"use strict";(self.webpackChunkmindmap=self.webpackChunkmindmap||[]).push([[923],{95416:(t,e,n)=>{n.d(e,{Cf:()=>gt,Jo:()=>X,K9:()=>kt,ML:()=>mt,NB:()=>bt,P1:()=>g,hj:()=>N,pr:()=>ft,vc:()=>yt});var o=n(2376),s=n(84348),r=n(60440),i=n(59084),a=n(16560),c=n(25804),d=n(53833);function l(t){const{state:e,transaction:n}=t;let{selection:o}=n,{doc:s}=n,{storedMarks:r}=n;return{...e,apply:e.apply.bind(e),applyTransaction:e.applyTransaction.bind(e),filterTransaction:e.filterTransaction,plugins:e.plugins,schema:e.schema,reconfigure:e.reconfigure.bind(e),toJSON:e.toJSON.bind(e),get storedMarks(){return r},get selection(){return o},get doc(){return s},get tr(){return o=n.selection,s=n.doc,r=n.storedMarks,n}}}class p{constructor(t){this.editor=t.editor,this.rawCommands=this.editor.extensionManager.commands,this.customState=t.state}get hasCustomState(){return!!this.customState}get state(){return this.customState||this.editor.state}get commands(){const{rawCommands:t,editor:e,state:n}=this,{view:o}=e,{tr:s}=n,r=this.buildProps(s);return Object.fromEntries(Object.entries(t).map((([t,e])=>[t,(...t)=>{const n=e(...t)(r);return s.getMeta("preventDispatch")||this.hasCustomState||o.dispatch(s),n}])))}get chain(){return()=>this.createChain()}get can(){return()=>this.createCan()}createChain(t,e=!0){const{rawCommands:n,editor:o,state:s}=this,{view:r}=o,i=[],a=!!t,c=t||s.tr,d={...Object.fromEntries(Object.entries(n).map((([t,n])=>[t,(...t)=>{const o=this.buildProps(c,e),s=n(...t)(o);return i.push(s),d}]))),run:()=>(a||!e||c.getMeta("preventDispatch")||this.hasCustomState||r.dispatch(c),i.every((t=>!0===t)))};return d}createCan(t){const{rawCommands:e,state:n}=this,o=void 0,s=t||n.tr,r=this.buildProps(s,o);return{...Object.fromEntries(Object.entries(e).map((([t,e])=>[t,(...t)=>e(...t)({...r,dispatch:o})]))),chain:()=>this.createChain(s,o)}}buildProps(t,e=!0){const{rawCommands:n,editor:o,state:s}=this,{view:r}=o;s.storedMarks&&t.setStoredMarks(s.storedMarks);const i={tr:t,editor:o,view:r,state:l({state:s,transaction:t}),dispatch:e?()=>{}:void 0,chain:()=>this.createChain(t),can:()=>this.createCan(t),get commands(){return Object.fromEntries(Object.entries(n).map((([t,e])=>[t,(...t)=>e(...t)(i)])))}};return i}}function u(t,e,n){return void 0===t.config[e]&&t.parent?u(t.parent,e,n):"function"==typeof t.config[e]?t.config[e].bind({...n,parent:t.parent?u(t.parent,e,n):null}):t.config[e]}function m(t){return{baseExtensions:t.filter((t=>"extension"===t.type)),nodeExtensions:t.filter((t=>"node"===t.type)),markExtensions:t.filter((t=>"mark"===t.type))}}function h(t){const e=[],{nodeExtensions:n,markExtensions:o}=m(t),s=[...n,...o],r={default:null,rendered:!0,renderHTML:null,parseHTML:null,keepOnSplit:!0,isRequired:!1};return t.forEach((t=>{const n=u(t,"addGlobalAttributes",{name:t.name,options:t.options,storage:t.storage});n&&n().forEach((t=>{t.types.forEach((n=>{Object.entries(t.attributes).forEach((([t,o])=>{e.push({type:n,name:t,attribute:{...r,...o}})}))}))}))})),s.forEach((t=>{const n={name:t.name,options:t.options,storage:t.storage},o=u(t,"addAttributes",n);if(!o)return;const s=o();Object.entries(s).forEach((([n,o])=>{const s={...r,...o};o.isRequired&&void 0===o.default&&delete s.default,e.push({type:t.name,name:n,attribute:s})}))})),e}function f(t,e){if("string"==typeof t){if(!e.nodes[t])throw Error(`There is no node type named '${t}'. Maybe you forgot to add the extension?`);return e.nodes[t]}return t}function g(...t){return t.filter((t=>!!t)).reduce(((t,e)=>{const n={...t};return Object.entries(e).forEach((([t,e])=>{n[t]?n[t]="class"===t?[n[t],e].join(" "):"style"===t?[n[t],e].join("; "):e:n[t]=e})),n}),{})}function y(t,e){return e.filter((t=>t.attribute.rendered)).map((e=>e.attribute.renderHTML?e.attribute.renderHTML(t.attrs)||{}:{[e.name]:t.attrs[e.name]})).reduce(((t,e)=>g(t,e)),{})}function b(t){return"function"==typeof t}function k(t,e,...n){return b(t)?e?t.bind(e)(...n):t(...n):t}function v(t,e){return t.style?t:{...t,getAttrs:n=>{const o=t.getAttrs?t.getAttrs(n):t.attrs;if(!1===o)return!1;const s=e.reduce(((t,e)=>{const o=e.attribute.parseHTML?e.attribute.parseHTML(n):function(t){return"string"!=typeof t?t:t.match(/^[+-]?(?:\d*\.)?\d+$/)?Number(t):"true"===t||"false"!==t&&t}(n.getAttribute(e.name));return null==o?t:{...t,[e.name]:o}}),{});return{...o,...s}}}}function x(t){return Object.fromEntries(Object.entries(t).filter((([t,e])=>("attrs"!==t||!function(t={}){return 0===Object.keys(t).length&&t.constructor===Object}(e))&&null!=e)))}function w(t,e){return e.nodes[t]||e.marks[t]||null}function M(t,e){return Array.isArray(e)?e.some((e=>("string"==typeof e?e:e.name)===t.name)):e}function S(t){return"[object RegExp]"===Object.prototype.toString.call(t)}class O{constructor(t){this.find=t.find,this.handler=t.handler}}function E(t){var e;const{editor:n,from:o,to:s,text:r,rules:i,plugin:a}=t,{view:c}=n;if(c.composing)return!1;const d=c.state.doc.resolve(o);if(d.parent.type.spec.code||(null===(e=d.nodeBefore||d.nodeAfter)||void 0===e?void 0:e.marks.find((t=>t.type.spec.code))))return!1;let u=!1;const m=((t,e=500)=>{let n="";return t.parent.nodesBetween(Math.max(0,t.parentOffset-e),t.parentOffset,((e,o,s,r)=>{var i,a,c;n+=(null===(a=(i=e.type.spec).toText)||void 0===a?void 0:a.call(i,{node:e,pos:o,parent:s,index:r}))||(null===(c=t.nodeBefore)||void 0===c?void 0:c.text)||"%leaf%"})),n})(d)+r;return i.forEach((t=>{if(u)return;const e=((t,e)=>{if(S(e))return e.exec(t);const n=e(t);if(!n)return null;const o=[];return o.push(n.text),o.index=n.index,o.input=t,o.data=n.data,n.replaceWith&&(n.text.includes(n.replaceWith)||console.warn('[tiptap warn]: "inputRuleMatch.replaceWith" must be part of "inputRuleMatch.text".'),o.push(n.replaceWith)),o})(m,t.find);if(!e)return;const i=c.state.tr,d=l({state:c.state,transaction:i}),h={from:o-(e[0].length-r.length),to:s},{commands:f,chain:g,can:y}=new p({editor:n,state:d});null!==t.handler({state:d,range:h,match:e,commands:f,chain:g,can:y})&&i.steps.length&&(i.setMeta(a,{transform:i,from:o,to:s,text:r}),c.dispatch(i),u=!0)})),u}function C(t){const{editor:e,rules:n}=t,s=new o.Sy({state:{init:()=>null,apply:(t,e)=>t.getMeta(s)||(t.selectionSet||t.docChanged?null:e)},props:{handleTextInput:(t,o,r,i)=>E({editor:e,from:o,to:r,text:i,rules:n,plugin:s}),handleDOMEvents:{compositionend:t=>(setTimeout((()=>{const{$cursor:o}=t.state.selection;o&&E({editor:e,from:o.pos,to:o.pos,text:"",rules:n,plugin:s})})),!1)},handleKeyDown(t,o){if("Enter"!==o.key)return!1;const{$cursor:r}=t.state.selection;return!!r&&E({editor:e,from:r.pos,to:r.pos,text:"\n",rules:n,plugin:s})}},isInputRules:!0});return s}class T{constructor(t){this.find=t.find,this.handler=t.handler}}function A(t){const{editor:e,rules:n}=t;let s=null,r=!1,i=!1;return n.map((t=>new o.Sy({view(t){const e=e=>{var n;s=(null===(n=t.dom.parentElement)||void 0===n?void 0:n.contains(e.target))?t.dom.parentElement:null};return window.addEventListener("dragstart",e),{destroy(){window.removeEventListener("dragstart",e)}}},props:{handleDOMEvents:{drop:t=>(i=s===t.dom.parentElement,!1),paste:(t,e)=>{var n;const o=null===(n=e.clipboardData)||void 0===n?void 0:n.getData("text/html");return r=!!(null==o?void 0:o.includes("data-pm-slice")),!1}}},appendTransaction:(n,o,s)=>{const a=n[0],c="paste"===a.getMeta("uiEvent")&&!r,d="drop"===a.getMeta("uiEvent")&&!i;if(!c&&!d)return;const u=o.doc.content.findDiffStart(s.doc.content),m=o.doc.content.findDiffEnd(s.doc.content);if("number"!=typeof u||!m||u===m.b)return;const h=s.tr,f=l({state:s,transaction:h});return function(t){const{editor:e,state:n,from:o,to:s,rule:r}=t,{commands:i,chain:a,can:c}=new p({editor:e,state:n}),d=[];return n.doc.nodesBetween(o,s,((t,e)=>{if(!t.isTextblock||t.type.spec.code)return;const l=Math.max(o,e),p=Math.min(s,e+t.content.size);((t,e)=>{if(S(e))return[...t.matchAll(e)];const n=e(t);return n?n.map((e=>{const n=[];return n.push(e.text),n.index=e.index,n.input=t,n.data=e.data,e.replaceWith&&(e.text.includes(e.replaceWith)||console.warn('[tiptap warn]: "pasteRuleMatch.replaceWith" must be part of "pasteRuleMatch.text".'),n.push(e.replaceWith)),n})):[]})(t.textBetween(l-e,p-e,void 0,"ï¿¼"),r.find).forEach((t=>{if(void 0===t.index)return;const e=l+t.index+1,o=e+t[0].length,s={from:n.tr.mapping.map(e),to:n.tr.mapping.map(o)},p=r.handler({state:n,range:s,match:t,commands:i,chain:a,can:c});d.push(p)}))})),d.every((t=>null!==t))}({editor:e,state:f,from:Math.max(u-1,0),to:m.b,rule:t})&&h.steps.length?h:void 0}})))}class P{constructor(t,e){this.splittableMarks=[],this.editor=e,this.extensions=P.resolve(t),this.schema=function(t){var e;const n=h(t),{nodeExtensions:o,markExtensions:s}=m(t),r=null===(e=o.find((t=>u(t,"topNode"))))||void 0===e?void 0:e.name,a=Object.fromEntries(o.map((e=>{const o=n.filter((t=>t.type===e.name)),s={name:e.name,options:e.options,storage:e.storage},r=x({...t.reduce(((t,n)=>{const o=u(n,"extendNodeSchema",s);return{...t,...o?o(e):{}}}),{}),content:k(u(e,"content",s)),marks:k(u(e,"marks",s)),group:k(u(e,"group",s)),inline:k(u(e,"inline",s)),atom:k(u(e,"atom",s)),selectable:k(u(e,"selectable",s)),draggable:k(u(e,"draggable",s)),code:k(u(e,"code",s)),defining:k(u(e,"defining",s)),isolating:k(u(e,"isolating",s)),attrs:Object.fromEntries(o.map((t=>{var e;return[t.name,{default:null===(e=null==t?void 0:t.attribute)||void 0===e?void 0:e.default}]})))}),i=k(u(e,"parseHTML",s));i&&(r.parseDOM=i.map((t=>v(t,o))));const a=u(e,"renderHTML",s);a&&(r.toDOM=t=>a({node:t,HTMLAttributes:y(t,o)}));const c=u(e,"renderText",s);return c&&(r.toText=c),[e.name,r]}))),c=Object.fromEntries(s.map((e=>{const o=n.filter((t=>t.type===e.name)),s={name:e.name,options:e.options,storage:e.storage},r=x({...t.reduce(((t,n)=>{const o=u(n,"extendMarkSchema",s);return{...t,...o?o(e):{}}}),{}),inclusive:k(u(e,"inclusive",s)),excludes:k(u(e,"excludes",s)),group:k(u(e,"group",s)),spanning:k(u(e,"spanning",s)),code:k(u(e,"code",s)),attrs:Object.fromEntries(o.map((t=>{var e;return[t.name,{default:null===(e=null==t?void 0:t.attribute)||void 0===e?void 0:e.default}]})))}),i=k(u(e,"parseHTML",s));i&&(r.parseDOM=i.map((t=>v(t,o))));const a=u(e,"renderHTML",s);return a&&(r.toDOM=t=>a({mark:t,HTMLAttributes:y(t,o)})),[e.name,r]})));return new i.V_({topNode:r,nodes:a,marks:c})}(this.extensions),this.extensions.forEach((t=>{var e;this.editor.extensionStorage[t.name]=t.storage;const n={name:t.name,options:t.options,storage:t.storage,editor:this.editor,type:w(t.name,this.schema)};"mark"===t.type&&(null===(e=k(u(t,"keepOnSplit",n)))||void 0===e||e)&&this.splittableMarks.push(t.name);const o=u(t,"onBeforeCreate",n);o&&this.editor.on("beforeCreate",o);const s=u(t,"onCreate",n);s&&this.editor.on("create",s);const r=u(t,"onUpdate",n);r&&this.editor.on("update",r);const i=u(t,"onSelectionUpdate",n);i&&this.editor.on("selectionUpdate",i);const a=u(t,"onTransaction",n);a&&this.editor.on("transaction",a);const c=u(t,"onFocus",n);c&&this.editor.on("focus",c);const d=u(t,"onBlur",n);d&&this.editor.on("blur",d);const l=u(t,"onDestroy",n);l&&this.editor.on("destroy",l)}))}static resolve(t){const e=P.sort(P.flatten(t)),n=function(t){const e=t.filter(((e,n)=>t.indexOf(e)!==n));return[...new Set(e)]}(e.map((t=>t.name)));return n.length&&console.warn(`[tiptap warn]: Duplicate extension names found: [${n.map((t=>`'${t}'`)).join(", ")}]. This can lead to issues.`),e}static flatten(t){return t.map((t=>{const e=u(t,"addExtensions",{name:t.name,options:t.options,storage:t.storage});return e?[t,...this.flatten(e())]:t})).flat(10)}static sort(t){return t.sort(((t,e)=>{const n=u(t,"priority")||100,o=u(e,"priority")||100;return n>o?-1:n<o?1:0}))}get commands(){return this.extensions.reduce(((t,e)=>{const n=u(e,"addCommands",{name:e.name,options:e.options,storage:e.storage,editor:this.editor,type:w(e.name,this.schema)});return n?{...t,...n()}:t}),{})}get plugins(){const{editor:t}=this,e=P.sort([...this.extensions].reverse()),n=[],o=[],s=e.map((e=>{const s={name:e.name,options:e.options,storage:e.storage,editor:t,type:w(e.name,this.schema)},i=[],a=u(e,"addKeyboardShortcuts",s);if(a){const e=Object.fromEntries(Object.entries(a()).map((([e,n])=>[e,()=>n({editor:t})]))),n=(0,r.h)(e);i.push(n)}const c=u(e,"addInputRules",s);M(e,t.options.enableInputRules)&&c&&n.push(...c());const d=u(e,"addPasteRules",s);M(e,t.options.enablePasteRules)&&d&&o.push(...d());const l=u(e,"addProseMirrorPlugins",s);if(l){const t=l();i.push(...t)}return i})).flat();return[C({editor:t,rules:n}),...A({editor:t,rules:o}),...s]}get attributes(){return h(this.extensions)}get nodeViews(){const{editor:t}=this,{nodeExtensions:e}=m(this.extensions);return Object.fromEntries(e.filter((t=>!!u(t,"addNodeView"))).map((e=>{const n=this.attributes.filter((t=>t.type===e.name)),o={name:e.name,options:e.options,storage:e.storage,editor:t,type:f(e.name,this.schema)},s=u(e,"addNodeView",o);return s?[e.name,(o,r,i,a)=>{const c=y(o,n);return s()({editor:t,node:o,getPos:i,decorations:a,HTMLAttributes:c,extension:e})}]:[]})))}}function $(t){return"Object"===function(t){return Object.prototype.toString.call(t).slice(8,-1)}(t)&&t.constructor===Object&&Object.getPrototypeOf(t)===Object.prototype}function B(t,e){const n={...t};return $(t)&&$(e)&&Object.keys(e).forEach((o=>{$(e[o])?o in t?n[o]=B(t[o],e[o]):Object.assign(n,{[o]:e[o]}):Object.assign(n,{[o]:e[o]})})),n}class N{constructor(t={}){this.type="extension",this.name="extension",this.parent=null,this.child=null,this.config={name:this.name,defaultOptions:{}},this.config={...this.config,...t},this.name=this.config.name,t.defaultOptions&&console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${this.name}".`),this.options=this.config.defaultOptions,this.config.addOptions&&(this.options=k(u(this,"addOptions",{name:this.name}))),this.storage=k(u(this,"addStorage",{name:this.name,options:this.options}))||{}}static create(t={}){return new N(t)}configure(t={}){const e=this.extend();return e.options=B(this.options,t),e.storage=k(u(e,"addStorage",{name:e.name,options:e.options})),e}extend(t={}){const e=new N(t);return e.parent=this,this.child=e,e.name=t.name?t.name:e.parent.name,t.defaultOptions&&console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${e.name}".`),e.options=k(u(e,"addOptions",{name:e.name})),e.storage=k(u(e,"addStorage",{name:e.name,options:e.options})),e}}function j(t,e,n){const{from:o,to:s}=e,{blockSeparator:r="\n\n",textSerializers:i={}}=n||{};let a="",c=!0;return t.nodesBetween(o,s,((t,n,d,l)=>{var p;const u=null==i?void 0:i[t.type.name];u?(t.isBlock&&!c&&(a+=r,c=!0),d&&(a+=u({node:t,pos:n,parent:d,index:l,range:e}))):t.isText?(a+=null===(p=null==t?void 0:t.text)||void 0===p?void 0:p.slice(Math.max(o,n)-n,s-n),c=!1):t.isBlock&&!c&&(a+=r,c=!0)})),a}function I(t){return Object.fromEntries(Object.entries(t.nodes).filter((([,t])=>t.spec.toText)).map((([t,e])=>[t,e.spec.toText])))}const z=N.create({name:"clipboardTextSerializer",addProseMirrorPlugins(){return[new o.Sy({key:new o.H$("clipboardTextSerializer"),props:{clipboardTextSerializer:()=>{const{editor:t}=this,{state:e,schema:n}=t,{doc:o,selection:s}=e,{ranges:r}=s;return j(o,{from:Math.min(...r.map((t=>t.$from.pos))),to:Math.max(...r.map((t=>t.$to.pos)))},{textSerializers:I(n)})}}})]}});function H(t,e,n={strict:!0}){const o=Object.keys(e);return!o.length||o.every((o=>n.strict?e[o]===t[o]:S(e[o])?e[o].test(t[o]):e[o]===t[o]))}function R(t,e,n={}){return t.find((t=>t.type===e&&H(t.attrs,n)))}function D(t,e,n={}){return!!R(t,e,n)}function L(t,e,n={}){if(!t||!e)return;let o=t.parent.childAfter(t.parentOffset);if(t.parentOffset===o.offset&&0!==o.offset&&(o=t.parent.childBefore(t.parentOffset)),!o.node)return;const s=R([...o.node.marks],e,n);if(!s)return;let r=o.index,i=t.start()+o.offset,a=r+1,c=i+o.node.nodeSize;for(R([...o.node.marks],e,n);r>0&&s.isInSet(t.parent.child(r-1).marks);)r-=1,i-=t.parent.child(r).nodeSize;for(;a<t.parent.childCount&&D([...t.parent.child(a).marks],e,n);)c+=t.parent.child(a).nodeSize,a+=1;return{from:i,to:c}}function F(t,e){if("string"==typeof t){if(!e.marks[t])throw Error(`There is no mark type named '${t}'. Maybe you forgot to add the extension?`);return e.marks[t]}return t}function V(t=0,e=0,n=0){return Math.min(Math.max(t,e),n)}function K(t,e=null){if(!e)return null;const n=o.Y1.atStart(t),s=o.Y1.atEnd(t);if("start"===e||!0===e)return n;if("end"===e)return s;const r=n.from,i=s.to;return"all"===e?o.Bs.create(t,V(0,r,i),V(t.content.size,r,i)):o.Bs.create(t,V(e,r,i),V(e,r,i))}function W(){return["iPad Simulator","iPhone Simulator","iPod Simulator","iPad","iPhone","iPod"].includes(navigator.platform)||navigator.userAgent.includes("Mac")&&"ontouchend"in document}function J(t){const e=`<body>${t}</body>`;return(new window.DOMParser).parseFromString(e,"text/html").body}function G(t,e,n){if(n={slice:!0,parseOptions:{},...n},"object"==typeof t&&null!==t)try{return Array.isArray(t)?i.HY.fromArray(t.map((t=>e.nodeFromJSON(t)))):e.nodeFromJSON(t)}catch(o){return console.warn("[tiptap warn]: Invalid content.","Passed value:",t,"Error:",o),G("",e,n)}if("string"==typeof t){const o=i.aw.fromSchema(e);return n.slice?o.parseSlice(J(t),n.parseOptions).content:o.parse(J(t),n.parseOptions)}return G("",e,n)}function U(){return"undefined"!=typeof navigator&&/Mac/.test(navigator.platform)}function Y(t,e,n={}){const{from:o,to:s,empty:r}=t.selection,i=e?f(e,t.schema):null,a=[];t.doc.nodesBetween(o,s,((t,e)=>{if(t.isText)return;const n=Math.max(o,e),r=Math.min(s,e+t.nodeSize);a.push({node:t,from:n,to:r})}));const c=s-o,d=a.filter((t=>!i||i.name===t.node.type.name)).filter((t=>H(t.node.attrs,n,{strict:!1})));return r?!!d.length:d.reduce(((t,e)=>t+e.to-e.from),0)>=c}function q(t,e){return e.nodes[t]?"node":e.marks[t]?"mark":null}function _(t,e){const n="string"==typeof e?[e]:e;return Object.keys(t).reduce(((e,o)=>(n.includes(o)||(e[o]=t[o]),e)),{})}function Q(t,e,n={}){return G(t,e,{slice:!1,parseOptions:n})}function X(t,e){const n=F(e,t.schema),{from:o,to:s,empty:r}=t.selection,i=[];r?(t.storedMarks&&i.push(...t.storedMarks),i.push(...t.selection.$head.marks())):t.doc.nodesBetween(o,s,(t=>{i.push(...t.marks)}));const a=i.find((t=>t.type.name===n.name));return a?{...a.attrs}:{}}function Z(t,e,n){return Object.fromEntries(Object.entries(n).filter((([n])=>{const o=t.find((t=>t.type===e&&t.name===n));return!!o&&o.attribute.keepOnSplit})))}function tt(t,e){const n=t.storedMarks||t.selection.$to.parentOffset&&t.selection.$from.marks();if(n){const o=n.filter((t=>null==e?void 0:e.includes(t.type.name)));t.tr.ensureMarks(o)}}function et(t){return e=>function(t,e){for(let n=t.depth;n>0;n-=1){const o=t.node(n);if(e(o))return{pos:n>0?t.before(n):0,start:t.start(n),depth:n,node:o}}}(e.$from,t)}function nt(t,e){const{nodeExtensions:n}=m(e),o=n.find((e=>e.name===t));if(!o)return!1;const s=k(u(o,"group",{name:o.name,options:o.options,storage:o.storage}));return"string"==typeof s&&s.split(" ").includes("list")}const ot=(t,e)=>{const n=et((t=>t.type===e))(t.selection);if(!n)return!0;const o=t.doc.resolve(Math.max(0,n.pos-1)).before(n.depth);if(void 0===o)return!0;const s=t.doc.nodeAt(o);return n.node.type!==(null==s?void 0:s.type)||!(0,a.Mn)(t.doc,n.pos)||(t.join(n.pos),!0)},st=(t,e)=>{const n=et((t=>t.type===e))(t.selection);if(!n)return!0;const o=t.doc.resolve(n.start).after(n.depth);if(void 0===o)return!0;const s=t.doc.nodeAt(o);return n.node.type!==(null==s?void 0:s.type)||!(0,a.Mn)(t.doc,o)||(t.join(o),!0)};function rt(t,e,n={}){const{empty:o,ranges:s}=t.selection,r=e?F(e,t.schema):null;if(o)return!!(t.storedMarks||t.selection.$from.marks()).filter((t=>!r||r.name===t.type.name)).find((t=>H(t.attrs,n,{strict:!1})));let i=0;const a=[];if(s.forEach((({$from:e,$to:n})=>{const o=e.pos,s=n.pos;t.doc.nodesBetween(o,s,((t,e)=>{if(!t.isText&&!t.marks.length)return;const n=Math.max(o,e),r=Math.min(s,e+t.nodeSize);i+=r-n,a.push(...t.marks.map((t=>({mark:t,from:n,to:r}))))}))})),0===i)return!1;const c=a.filter((t=>!r||r.name===t.mark.type.name)).filter((t=>H(t.mark.attrs,n,{strict:!1}))).reduce(((t,e)=>t+e.to-e.from),0),d=a.filter((t=>!r||t.mark.type!==r&&t.mark.type.excludes(r))).reduce(((t,e)=>t+e.to-e.from),0);return(c>0?c+d:c)>=i}var it=Object.freeze({__proto__:null,blur:()=>({editor:t,view:e})=>(requestAnimationFrame((()=>{var n;t.isDestroyed||(e.dom.blur(),null===(n=null===window||void 0===window?void 0:window.getSelection())||void 0===n||n.removeAllRanges())})),!0),clearContent:(t=!1)=>({commands:e})=>e.setContent("",t),clearNodes:()=>({state:t,tr:e,dispatch:n})=>{const{selection:o}=e,{ranges:s}=o;return!n||(s.forEach((({$from:n,$to:o})=>{t.doc.nodesBetween(n.pos,o.pos,((t,n)=>{if(t.type.isText)return;const{doc:o,mapping:s}=e,r=o.resolve(s.map(n)),i=o.resolve(s.map(n+t.nodeSize)),c=r.blockRange(i);if(!c)return;const d=(0,a.k9)(c);if(t.type.isTextblock){const{defaultType:t}=r.parent.contentMatchAt(r.index());e.setNodeMarkup(c.start,t)}(d||0===d)&&e.lift(c,d)}))})),!0)},command:t=>e=>t(e),createParagraphNear:()=>({state:t,dispatch:e})=>(0,c.mD)(t,e),deleteNode:t=>({tr:e,state:n,dispatch:o})=>{const s=f(t,n.schema),r=e.selection.$anchor;for(let t=r.depth;t>0;t-=1)if(r.node(t).type===s){if(o){const n=r.before(t),o=r.after(t);e.delete(n,o).scrollIntoView()}return!0}return!1},deleteRange:t=>({tr:e,dispatch:n})=>{const{from:o,to:s}=t;return n&&e.delete(o,s),!0},deleteSelection:()=>({state:t,dispatch:e})=>(0,c.NE)(t,e),enter:()=>({commands:t})=>t.keyboardShortcut("Enter"),exitCode:()=>({state:t,dispatch:e})=>(0,c.uo)(t,e),extendMarkRange:(t,e={})=>({tr:n,state:s,dispatch:r})=>{const i=F(t,s.schema),{doc:a,selection:c}=n,{$from:d,from:l,to:p}=c;if(r){const t=L(d,i,e);if(t&&t.from<=l&&t.to>=p){const e=o.Bs.create(a,t.from,t.to);n.setSelection(e)}}return!0},first:t=>e=>{const n="function"==typeof t?t(e):t;for(let t=0;t<n.length;t+=1)if(n[t](e))return!0;return!1},focus:(t=null,e={})=>({editor:n,view:s,tr:r,dispatch:i})=>{e={scrollIntoView:!0,...e};const a=()=>{W()&&s.dom.focus(),requestAnimationFrame((()=>{n.isDestroyed||(s.focus(),(null==e?void 0:e.scrollIntoView)&&n.commands.scrollIntoView())}))};if(s.hasFocus()&&null===t||!1===t)return!0;if(i&&null===t&&!(function(t){return t&&"object"==typeof t&&!Array.isArray(t)&&!function(t){var e;return"class"===(null===(e=t.constructor)||void 0===e?void 0:e.toString().substring(0,5))}(t)}(c=n.state.selection)&&c instanceof o.Bs))return a(),!0;var c;const d=K(r.doc,t)||n.state.selection,l=n.state.selection.eq(d);return i&&(l||r.setSelection(d),l&&r.storedMarks&&r.setStoredMarks(r.storedMarks),a()),!0},forEach:(t,e)=>n=>t.every(((t,o)=>e(t,{...n,index:o}))),insertContent:(t,e)=>({tr:n,commands:o})=>o.insertContentAt({from:n.selection.from,to:n.selection.to},t,e),insertContentAt:(t,e,n)=>({tr:s,dispatch:r,editor:i})=>{if(r){n={parseOptions:{},updateSelection:!0,...n};const r=G(e,i.schema,{parseOptions:{preserveWhitespace:"full",...n.parseOptions}});if("<>"===r.toString())return!0;let{from:c,to:d}="number"==typeof t?{from:t,to:t}:t,l=!0,p=!0;if((r.toString().startsWith("<")?r:[r]).forEach((t=>{t.check(),l=!!l&&t.isText&&0===t.marks.length,p=!!p&&t.isBlock})),c===d&&p){const{parent:t}=s.doc.resolve(c);t.isTextblock&&!t.type.spec.code&&!t.childCount&&(c-=1,d+=1)}l?s.insertText(e,c,d):s.replaceWith(c,d,r),n.updateSelection&&function(t,e,n){const s=t.steps.length-1;if(s<e)return;const r=t.steps[s];if(!(r instanceof a.Pu||r instanceof a.FC))return;const i=t.mapping.maps[s];let c=0;i.forEach(((t,e,n,o)=>{0===c&&(c=o)})),t.setSelection(o.Y1.near(t.doc.resolve(c),-1))}(s,s.steps.length-1)}return!0},joinBackward:()=>({state:t,dispatch:e})=>(0,c.al)(t,e),joinForward:()=>({state:t,dispatch:e})=>(0,c.Y_)(t,e),keyboardShortcut:t=>({editor:e,view:n,tr:o,dispatch:s})=>{const r=function(t){const e=t.split(/-(?!$)/);let n,o,s,r,i=e[e.length-1];"Space"===i&&(i=" ");for(let t=0;t<e.length-1;t+=1){const i=e[t];if(/^(cmd|meta|m)$/i.test(i))r=!0;else if(/^a(lt)?$/i.test(i))n=!0;else if(/^(c|ctrl|control)$/i.test(i))o=!0;else if(/^s(hift)?$/i.test(i))s=!0;else{if(!/^mod$/i.test(i))throw new Error(`Unrecognized modifier name: ${i}`);W()||U()?r=!0:o=!0}}return n&&(i=`Alt-${i}`),o&&(i=`Ctrl-${i}`),r&&(i=`Meta-${i}`),s&&(i=`Shift-${i}`),i}(t).split(/-(?!$)/),i=r.find((t=>!["Alt","Ctrl","Meta","Shift"].includes(t))),a=new KeyboardEvent("keydown",{key:"Space"===i?" ":i,altKey:r.includes("Alt"),ctrlKey:r.includes("Ctrl"),metaKey:r.includes("Meta"),shiftKey:r.includes("Shift"),bubbles:!0,cancelable:!0}),c=e.captureTransaction((()=>{n.someProp("handleKeyDown",(t=>t(n,a)))}));return null==c||c.steps.forEach((t=>{const e=t.map(o.mapping);e&&s&&o.maybeStep(e)})),!0},lift:(t,e={})=>({state:n,dispatch:o})=>!!Y(n,f(t,n.schema),e)&&(0,c.xb)(n,o),liftEmptyBlock:()=>({state:t,dispatch:e})=>(0,c.X0)(t,e),liftListItem:t=>({state:e,dispatch:n})=>{const o=f(t,e.schema);return(0,d.IB)(o)(e,n)},newlineInCode:()=>({state:t,dispatch:e})=>(0,c.QK)(t,e),resetAttributes:(t,e)=>({tr:n,state:o,dispatch:s})=>{let r=null,i=null;const a=q("string"==typeof t?t:t.name,o.schema);return!!a&&("node"===a&&(r=f(t,o.schema)),"mark"===a&&(i=F(t,o.schema)),s&&n.selection.ranges.forEach((t=>{o.doc.nodesBetween(t.$from.pos,t.$to.pos,((t,o)=>{r&&r===t.type&&n.setNodeMarkup(o,void 0,_(t.attrs,e)),i&&t.marks.length&&t.marks.forEach((s=>{i===s.type&&n.addMark(o,o+t.nodeSize,i.create(_(s.attrs,e)))}))}))})),!0)},scrollIntoView:()=>({tr:t,dispatch:e})=>(e&&t.scrollIntoView(),!0),selectAll:()=>({tr:t,commands:e})=>e.setTextSelection({from:0,to:t.doc.content.size}),selectNodeBackward:()=>({state:t,dispatch:e})=>(0,c._M)(t,e),selectNodeForward:()=>({state:t,dispatch:e})=>(0,c.o)(t,e),selectParentNode:()=>({state:t,dispatch:e})=>(0,c.N0)(t,e),selectTextblockEnd:()=>({state:t,dispatch:e})=>(0,c.nw)(t,e),selectTextblockStart:()=>({state:t,dispatch:e})=>(0,c.U9)(t,e),setContent:(t,e=!1,n={})=>({tr:o,editor:s,dispatch:r})=>{const{doc:i}=o,a=Q(t,s.schema,n);return r&&o.replaceWith(0,i.content.size,a).setMeta("preventUpdate",!e),!0},setMark:(t,e={})=>({tr:n,state:o,dispatch:s})=>{const{selection:r}=n,{empty:i,ranges:a}=r,c=F(t,o.schema);if(s)if(i){const t=X(o,c);n.addStoredMark(c.create({...t,...e}))}else a.forEach((t=>{const s=t.$from.pos,r=t.$to.pos;o.doc.nodesBetween(s,r,((t,o)=>{const i=Math.max(o,s),a=Math.min(o+t.nodeSize,r);t.marks.find((t=>t.type===c))?t.marks.forEach((t=>{c===t.type&&n.addMark(i,a,c.create({...t.attrs,...e}))})):n.addMark(i,a,c.create(e))}))}));return!0},setMeta:(t,e)=>({tr:n})=>(n.setMeta(t,e),!0),setNode:(t,e={})=>({state:n,dispatch:o,chain:s})=>{const r=f(t,n.schema);return r.isTextblock?s().command((({commands:t})=>!!(0,c.uJ)(r,e)(n)||t.clearNodes())).command((({state:t})=>(0,c.uJ)(r,e)(t,o))).run():(console.warn('[tiptap warn]: Currently "setNode()" only supports text block nodes.'),!1)},setNodeSelection:t=>({tr:e,dispatch:n})=>{if(n){const{doc:n}=e,s=o.Y1.atStart(n).from,r=o.Y1.atEnd(n).to,i=V(t,s,r),a=o.qv.create(n,i);e.setSelection(a)}return!0},setTextSelection:t=>({tr:e,dispatch:n})=>{if(n){const{doc:n}=e,{from:s,to:r}="number"==typeof t?{from:t,to:t}:t,i=o.Bs.atStart(n).from,a=o.Bs.atEnd(n).to,c=V(s,i,a),d=V(r,i,a),l=o.Bs.create(n,c,d);e.setSelection(l)}return!0},sinkListItem:t=>({state:e,dispatch:n})=>{const o=f(t,e.schema);return(0,d.bw)(o)(e,n)},splitBlock:({keepMarks:t=!0}={})=>({tr:e,state:n,dispatch:s,editor:r})=>{const{selection:i,doc:c}=e,{$from:d,$to:l}=i,p=Z(r.extensionManager.attributes,d.node().type.name,d.node().attrs);if(i instanceof o.qv&&i.node.isBlock)return!(!d.parentOffset||!(0,a.Ax)(c,d.pos)||(s&&(t&&tt(n,r.extensionManager.splittableMarks),e.split(d.pos).scrollIntoView()),0));if(!d.parent.isBlock)return!1;if(s){const s=l.parentOffset===l.parent.content.size;i instanceof o.Bs&&e.deleteSelection();const c=0===d.depth?void 0:function(t){for(let e=0;e<t.edgeCount;e+=1){const{type:n}=t.edge(e);if(n.isTextblock&&!n.hasRequiredAttrs())return n}return null}(d.node(-1).contentMatchAt(d.indexAfter(-1)));let u=s&&c?[{type:c,attrs:p}]:void 0,m=(0,a.Ax)(e.doc,e.mapping.map(d.pos),1,u);if(u||m||!(0,a.Ax)(e.doc,e.mapping.map(d.pos),1,c?[{type:c}]:void 0)||(m=!0,u=c?[{type:c,attrs:p}]:void 0),m&&(e.split(e.mapping.map(d.pos),1,u),c&&!s&&!d.parentOffset&&d.parent.type!==c)){const t=e.mapping.map(d.before()),n=e.doc.resolve(t);d.node(-1).canReplaceWith(n.index(),n.index()+1,c)&&e.setNodeMarkup(e.mapping.map(d.before()),c)}t&&tt(n,r.extensionManager.splittableMarks),e.scrollIntoView()}return!0},splitListItem:t=>({tr:e,state:n,dispatch:s,editor:r})=>{var c;const d=f(t,n.schema),{$from:l,$to:p}=n.selection,u=n.selection.node;if(u&&u.isBlock||l.depth<2||!l.sameParent(p))return!1;const m=l.node(-1);if(m.type!==d)return!1;const h=r.extensionManager.attributes;if(0===l.parent.content.size&&l.node(-1).childCount===l.indexAfter(-1)){if(2===l.depth||l.node(-3).type!==d||l.index(-2)!==l.node(-2).childCount-1)return!1;if(s){let t=i.HY.empty;const n=l.index(-1)?1:l.index(-2)?2:3;for(let e=l.depth-n;e>=l.depth-3;e-=1)t=i.HY.from(l.node(e).copy(t));const s=l.indexAfter(-1)<l.node(-2).childCount?1:l.indexAfter(-2)<l.node(-3).childCount?2:3,r=Z(h,l.node().type.name,l.node().attrs),a=(null===(c=d.contentMatch.defaultType)||void 0===c?void 0:c.createAndFill(r))||void 0;t=t.append(i.HY.from(d.createAndFill(null,a)||void 0));const p=l.before(l.depth-(n-1));e.replace(p,l.after(-s),new i.p2(t,4-n,0));let u=-1;e.doc.nodesBetween(p,e.doc.content.size,((t,e)=>{if(u>-1)return!1;t.isTextblock&&0===t.content.size&&(u=e+1)})),u>-1&&e.setSelection(o.Bs.near(e.doc.resolve(u))),e.scrollIntoView()}return!0}const g=p.pos===l.end()?m.contentMatchAt(0).defaultType:null,y=Z(h,m.type.name,m.attrs),b=Z(h,l.node().type.name,l.node().attrs);e.delete(l.pos,p.pos);const k=g?[{type:d,attrs:y},{type:g,attrs:b}]:[{type:d,attrs:y}];return!!(0,a.Ax)(e.doc,l.pos,2)&&(s&&e.split(l.pos,2,k).scrollIntoView(),!0)},toggleList:(t,e)=>({editor:n,tr:o,state:s,dispatch:r,chain:i,commands:a,can:c})=>{const{extensions:d}=n.extensionManager,l=f(t,s.schema),p=f(e,s.schema),{selection:u}=s,{$from:m,$to:h}=u,g=m.blockRange(h);if(!g)return!1;const y=et((t=>nt(t.type.name,d)))(u);if(g.depth>=1&&y&&g.depth-y.depth<=1){if(y.node.type===l)return a.liftListItem(p);if(nt(y.node.type.name,d)&&l.validContent(y.node.content)&&r)return i().command((()=>(o.setNodeMarkup(y.pos,l),!0))).command((()=>ot(o,l))).command((()=>st(o,l))).run()}return i().command((()=>!!c().wrapInList(l)||a.clearNodes())).wrapInList(l).command((()=>ot(o,l))).command((()=>st(o,l))).run()},toggleMark:(t,e={},n={})=>({state:o,commands:s})=>{const{extendEmptyMarkRange:r=!1}=n,i=F(t,o.schema);return rt(o,i,e)?s.unsetMark(i,{extendEmptyMarkRange:r}):s.setMark(i,e)},toggleNode:(t,e,n={})=>({state:o,commands:s})=>{const r=f(t,o.schema),i=f(e,o.schema);return Y(o,r,n)?s.setNode(i):s.setNode(r,n)},toggleWrap:(t,e={})=>({state:n,commands:o})=>{const s=f(t,n.schema);return Y(n,s,e)?o.lift(s):o.wrapIn(s,e)},undoInputRule:()=>({state:t,dispatch:e})=>{const n=t.plugins;for(let o=0;o<n.length;o+=1){const s=n[o];let r;if(s.spec.isInputRules&&(r=s.getState(t))){if(e){const e=t.tr,n=r.transform;for(let t=n.steps.length-1;t>=0;t-=1)e.step(n.steps[t].invert(n.docs[t]));if(r.text){const n=e.doc.resolve(r.from).marks();e.replaceWith(r.from,r.to,t.schema.text(r.text,n))}else e.delete(r.from,r.to)}return!0}}return!1},unsetAllMarks:()=>({tr:t,dispatch:e})=>{const{selection:n}=t,{empty:o,ranges:s}=n;return o||e&&s.forEach((e=>{t.removeMark(e.$from.pos,e.$to.pos)})),!0},unsetMark:(t,e={})=>({tr:n,state:o,dispatch:s})=>{var r;const{extendEmptyMarkRange:i=!1}=e,{selection:a}=n,c=F(t,o.schema),{$from:d,empty:l,ranges:p}=a;if(!s)return!0;if(l&&i){let{from:t,to:e}=a;const o=null===(r=d.marks().find((t=>t.type===c)))||void 0===r?void 0:r.attrs,s=L(d,c,o);s&&(t=s.from,e=s.to),n.removeMark(t,e,c)}else p.forEach((t=>{n.removeMark(t.$from.pos,t.$to.pos,c)}));return n.removeStoredMark(c),!0},updateAttributes:(t,e={})=>({tr:n,state:o,dispatch:s})=>{let r=null,i=null;const a=q("string"==typeof t?t:t.name,o.schema);return!!a&&("node"===a&&(r=f(t,o.schema)),"mark"===a&&(i=F(t,o.schema)),s&&n.selection.ranges.forEach((t=>{const s=t.$from.pos,a=t.$to.pos;o.doc.nodesBetween(s,a,((t,o)=>{r&&r===t.type&&n.setNodeMarkup(o,void 0,{...t.attrs,...e}),i&&t.marks.length&&t.marks.forEach((r=>{if(i===r.type){const c=Math.max(o,s),d=Math.min(o+t.nodeSize,a);n.addMark(c,d,i.create({...r.attrs,...e}))}}))}))})),!0)},wrapIn:(t,e={})=>({state:n,dispatch:o})=>{const s=f(t,n.schema);return(0,c.ym)(s,e)(n,o)},wrapInList:(t,e={})=>({state:n,dispatch:o})=>{const s=f(t,n.schema);return(0,d.KI)(s,e)(n,o)}});const at=N.create({name:"commands",addCommands:()=>({...it})}),ct=N.create({name:"editable",addProseMirrorPlugins(){return[new o.Sy({key:new o.H$("editable"),props:{editable:()=>this.editor.options.editable}})]}}),dt=N.create({name:"focusEvents",addProseMirrorPlugins(){const{editor:t}=this;return[new o.Sy({key:new o.H$("focusEvents"),props:{handleDOMEvents:{focus:(e,n)=>{t.isFocused=!0;const o=t.state.tr.setMeta("focus",{event:n}).setMeta("addToHistory",!1);return e.dispatch(o),!1},blur:(e,n)=>{t.isFocused=!1;const o=t.state.tr.setMeta("blur",{event:n}).setMeta("addToHistory",!1);return e.dispatch(o),!1}}}})]}}),lt=N.create({name:"keymap",addKeyboardShortcuts(){const t=()=>this.editor.commands.first((({commands:t})=>[()=>t.undoInputRule(),()=>t.command((({tr:e})=>{const{selection:n,doc:s}=e,{empty:r,$anchor:i}=n,{pos:a,parent:c}=i,d=o.Y1.atStart(s).from===a;return!(!(r&&d&&c.type.isTextblock)||c.textContent.length)&&t.clearNodes()})),()=>t.deleteSelection(),()=>t.joinBackward(),()=>t.selectNodeBackward()])),e=()=>this.editor.commands.first((({commands:t})=>[()=>t.deleteSelection(),()=>t.joinForward(),()=>t.selectNodeForward()])),n={Enter:()=>this.editor.commands.first((({commands:t})=>[()=>t.newlineInCode(),()=>t.createParagraphNear(),()=>t.liftEmptyBlock(),()=>t.splitBlock()])),"Mod-Enter":()=>this.editor.commands.exitCode(),Backspace:t,"Mod-Backspace":t,"Shift-Backspace":t,Delete:e,"Mod-Delete":e,"Mod-a":()=>this.editor.commands.selectAll()},s={...n},r={...n,"Ctrl-h":t,"Alt-Backspace":t,"Ctrl-d":e,"Ctrl-Alt-Backspace":e,"Alt-Delete":e,"Alt-d":e,"Ctrl-a":()=>this.editor.commands.selectTextblockStart(),"Ctrl-e":()=>this.editor.commands.selectTextblockEnd()};return W()||U()?r:s},addProseMirrorPlugins(){return[new o.Sy({key:new o.H$("clearDocument"),appendTransaction:(t,e,n)=>{if(!t.some((t=>t.docChanged))||e.doc.eq(n.doc))return;const{empty:s,from:r,to:i}=e.selection,a=o.Y1.atStart(e.doc).from,c=o.Y1.atEnd(e.doc).to,d=r===a&&i===c,u=0===n.doc.textBetween(0,n.doc.content.size," "," ").length;if(s||!d||!u)return;const m=n.tr,h=l({state:n,transaction:m}),{commands:f}=new p({editor:this.editor,state:h});return f.clearNodes(),m.steps.length?m:void 0}})]}}),pt=N.create({name:"tabindex",addProseMirrorPlugins(){return[new o.Sy({key:new o.H$("tabindex"),props:{attributes:this.editor.isEditable?{tabindex:"0"}:{}}})]}});var ut=Object.freeze({__proto__:null,ClipboardTextSerializer:z,Commands:at,Editable:ct,FocusEvents:dt,Keymap:lt,Tabindex:pt});class mt extends class{constructor(){this.callbacks={}}on(t,e){return this.callbacks[t]||(this.callbacks[t]=[]),this.callbacks[t].push(e),this}emit(t,...e){const n=this.callbacks[t];return n&&n.forEach((t=>t.apply(this,e))),this}off(t,e){const n=this.callbacks[t];return n&&(e?this.callbacks[t]=n.filter((t=>t!==e)):delete this.callbacks[t]),this}removeAllListeners(){this.callbacks={}}}{constructor(t={}){super(),this.isFocused=!1,this.extensionStorage={},this.options={element:document.createElement("div"),content:"",injectCSS:!0,injectNonce:void 0,extensions:[],autofocus:!1,editable:!0,editorProps:{},parseOptions:{},enableInputRules:!0,enablePasteRules:!0,enableCoreExtensions:!0,onBeforeCreate:()=>null,onCreate:()=>null,onUpdate:()=>null,onSelectionUpdate:()=>null,onTransaction:()=>null,onFocus:()=>null,onBlur:()=>null,onDestroy:()=>null},this.isCapturingTransaction=!1,this.capturedTransaction=null,this.setOptions(t),this.createExtensionManager(),this.createCommandManager(),this.createSchema(),this.on("beforeCreate",this.options.onBeforeCreate),this.emit("beforeCreate",{editor:this}),this.createView(),this.injectCSS(),this.on("create",this.options.onCreate),this.on("update",this.options.onUpdate),this.on("selectionUpdate",this.options.onSelectionUpdate),this.on("transaction",this.options.onTransaction),this.on("focus",this.options.onFocus),this.on("blur",this.options.onBlur),this.on("destroy",this.options.onDestroy),window.setTimeout((()=>{this.isDestroyed||(this.commands.focus(this.options.autofocus),this.emit("create",{editor:this}))}),0)}get storage(){return this.extensionStorage}get commands(){return this.commandManager.commands}chain(){return this.commandManager.chain()}can(){return this.commandManager.can()}injectCSS(){this.options.injectCSS&&document&&(this.css=function(t,e){const n=document.querySelector("style[data-tiptap-style]");if(null!==n)return n;const o=document.createElement("style");return e&&o.setAttribute("nonce",e),o.setAttribute("data-tiptap-style",""),o.innerHTML='.ProseMirror {\n  position: relative;\n}\n\n.ProseMirror {\n  word-wrap: break-word;\n  white-space: pre-wrap;\n  white-space: break-spaces;\n  -webkit-font-variant-ligatures: none;\n  font-variant-ligatures: none;\n  font-feature-settings: "liga" 0; /* the above doesn\'t seem to work in Edge */\n}\n\n.ProseMirror [contenteditable="false"] {\n  white-space: normal;\n}\n\n.ProseMirror [contenteditable="false"] [contenteditable="true"] {\n  white-space: pre-wrap;\n}\n\n.ProseMirror pre {\n  white-space: pre-wrap;\n}\n\nimg.ProseMirror-separator {\n  display: inline !important;\n  border: none !important;\n  margin: 0 !important;\n  width: 1px !important;\n  height: 1px !important;\n}\n\n.ProseMirror-gapcursor {\n  display: none;\n  pointer-events: none;\n  position: absolute;\n  margin: 0;\n}\n\n.ProseMirror-gapcursor:after {\n  content: "";\n  display: block;\n  position: absolute;\n  top: -2px;\n  width: 20px;\n  border-top: 1px solid black;\n  animation: ProseMirror-cursor-blink 1.1s steps(2, start) infinite;\n}\n\n@keyframes ProseMirror-cursor-blink {\n  to {\n    visibility: hidden;\n  }\n}\n\n.ProseMirror-hideselection *::selection {\n  background: transparent;\n}\n\n.ProseMirror-hideselection *::-moz-selection {\n  background: transparent;\n}\n\n.ProseMirror-hideselection * {\n  caret-color: transparent;\n}\n\n.ProseMirror-focused .ProseMirror-gapcursor {\n  display: block;\n}\n\n.tippy-box[data-animation=fade][data-state=hidden] {\n  opacity: 0\n}',document.getElementsByTagName("head")[0].appendChild(o),o}(0,this.options.injectNonce))}setOptions(t={}){this.options={...this.options,...t},this.view&&this.state&&!this.isDestroyed&&(this.options.editorProps&&this.view.setProps(this.options.editorProps),this.view.updateState(this.state))}setEditable(t){this.setOptions({editable:t})}get isEditable(){return this.options.editable&&this.view&&this.view.editable}get state(){return this.view.state}registerPlugin(t,e){const n=b(e)?e(t,[...this.state.plugins]):[...this.state.plugins,t],o=this.state.reconfigure({plugins:n});this.view.updateState(o)}unregisterPlugin(t){if(this.isDestroyed)return;const e="string"==typeof t?`${t}$`:t.key,n=this.state.reconfigure({plugins:this.state.plugins.filter((t=>!t.key.startsWith(e)))});this.view.updateState(n)}createExtensionManager(){const t=[...this.options.enableCoreExtensions?Object.values(ut):[],...this.options.extensions].filter((t=>["extension","node","mark"].includes(null==t?void 0:t.type)));this.extensionManager=new P(t,this)}createCommandManager(){this.commandManager=new p({editor:this})}createSchema(){this.schema=this.extensionManager.schema}createView(){const t=Q(this.options.content,this.schema,this.options.parseOptions),e=K(t,this.options.autofocus);this.view=new s.tk(this.options.element,{...this.options.editorProps,dispatchTransaction:this.dispatchTransaction.bind(this),state:o.yy.create({doc:t,selection:e||void 0})});const n=this.state.reconfigure({plugins:this.extensionManager.plugins});this.view.updateState(n),this.createNodeViews(),this.view.dom.editor=this}createNodeViews(){this.view.setProps({nodeViews:this.extensionManager.nodeViews})}captureTransaction(t){this.isCapturingTransaction=!0,t(),this.isCapturingTransaction=!1;const e=this.capturedTransaction;return this.capturedTransaction=null,e}dispatchTransaction(t){if(this.isCapturingTransaction)return this.capturedTransaction?void t.steps.forEach((t=>{var e;return null===(e=this.capturedTransaction)||void 0===e?void 0:e.step(t)})):void(this.capturedTransaction=t);const e=this.state.apply(t),n=!this.state.selection.eq(e.selection);this.view.updateState(e),this.emit("transaction",{editor:this,transaction:t}),n&&this.emit("selectionUpdate",{editor:this,transaction:t});const o=t.getMeta("focus"),s=t.getMeta("blur");o&&this.emit("focus",{editor:this,event:o.event,transaction:t}),s&&this.emit("blur",{editor:this,event:s.event,transaction:t}),t.docChanged&&!t.getMeta("preventUpdate")&&this.emit("update",{editor:this,transaction:t})}getAttributes(t){return function(t,e){const n=q("string"==typeof e?e:e.name,t.schema);return"node"===n?function(t,e){const n=f(e,t.schema),{from:o,to:s}=t.selection,r=[];t.doc.nodesBetween(o,s,(t=>{r.push(t)}));const i=r.reverse().find((t=>t.type.name===n.name));return i?{...i.attrs}:{}}(t,e):"mark"===n?X(t,e):{}}(this.state,t)}isActive(t,e){const n="string"==typeof t?t:null,o="string"==typeof t?e:t;return function(t,e,n={}){if(!e)return Y(t,null,n)||rt(t,null,n);const o=q(e,t.schema);return"node"===o?Y(t,e,n):"mark"===o&&rt(t,e,n)}(this.state,n,o)}getJSON(){return this.state.doc.toJSON()}getHTML(){return function(t,e){const n=i.PW.fromSchema(e).serializeFragment(t),o=document.implementation.createHTMLDocument().createElement("div");return o.appendChild(n),o.innerHTML}(this.state.doc.content,this.schema)}getText(t){const{blockSeparator:e="\n\n",textSerializers:n={}}=t||{};return function(t,e){return j(t,{from:0,to:t.content.size},e)}(this.state.doc,{blockSeparator:e,textSerializers:{...n,...I(this.schema)}})}get isEmpty(){return function(t){var e;const n=null===(e=t.type.createAndFill())||void 0===e?void 0:e.toJSON(),o=t.toJSON();return JSON.stringify(n)===JSON.stringify(o)}(this.state.doc)}getCharacterCount(){return console.warn('[tiptap warn]: "editor.getCharacterCount()" is deprecated. Please use "editor.storage.characterCount.characters()" instead.'),this.state.doc.content.size-2}destroy(){this.emit("destroy"),this.view&&this.view.destroy(),this.removeAllListeners()}get isDestroyed(){var t;return!(null===(t=this.view)||void 0===t?void 0:t.docView)}}function ht(t,e,n){const o=[];return t===e?n.resolve(t).marks().forEach((e=>{const s=L(n.resolve(t-1),e.type);s&&o.push({mark:e,...s})})):n.nodesBetween(t,e,((t,e)=>{o.push(...t.marks.map((n=>({from:e,to:e+t.nodeSize,mark:n}))))})),o}function ft(t,e,n){const o=t.state.doc.content.size,s=V(e,0,o),r=V(n,0,o),i=t.coordsAtPos(s),a=t.coordsAtPos(r,-1),c=Math.min(i.top,a.top),d=Math.max(i.bottom,a.bottom),l=Math.min(i.left,a.left),p=Math.max(i.right,a.right),u={top:c,bottom:d,left:l,right:p,width:p-l,height:d-c,x:l,y:c};return{...u,toJSON:()=>u}}function gt(t){return new O({find:t.find,handler:({state:e,range:n,match:o})=>{const s=k(t.getAttributes,void 0,o);if(!1===s||null===s)return null;const{tr:r}=e,i=o[o.length-1],a=o[0];let c=n.to;if(i){const o=a.search(/\S/),d=n.from+a.indexOf(i),l=d+i.length;if(ht(n.from,n.to,e.doc).filter((e=>e.mark.type.excluded.find((n=>n===t.type&&n!==e.mark.type)))).filter((t=>t.to>d)).length)return null;l<n.to&&r.delete(l,n.to),d>n.from&&r.delete(n.from+o,d),c=n.from+o+i.length,r.addMark(n.from+o,c,t.type.create(s||{})),r.removeStoredMark(t.type)}}})}class yt{constructor(t={}){this.type="mark",this.name="mark",this.parent=null,this.child=null,this.config={name:this.name,defaultOptions:{}},this.config={...this.config,...t},this.name=this.config.name,t.defaultOptions&&console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${this.name}".`),this.options=this.config.defaultOptions,this.config.addOptions&&(this.options=k(u(this,"addOptions",{name:this.name}))),this.storage=k(u(this,"addStorage",{name:this.name,options:this.options}))||{}}static create(t={}){return new yt(t)}configure(t={}){const e=this.extend();return e.options=B(this.options,t),e.storage=k(u(e,"addStorage",{name:e.name,options:e.options})),e}extend(t={}){const e=new yt(t);return e.parent=this,this.child=e,e.name=t.name?t.name:e.parent.name,t.defaultOptions&&console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${e.name}".`),e.options=k(u(e,"addOptions",{name:e.name})),e.storage=k(u(e,"addStorage",{name:e.name,options:e.options})),e}}class bt{constructor(t={}){this.type="node",this.name="node",this.parent=null,this.child=null,this.config={name:this.name,defaultOptions:{}},this.config={...this.config,...t},this.name=this.config.name,t.defaultOptions&&console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${this.name}".`),this.options=this.config.defaultOptions,this.config.addOptions&&(this.options=k(u(this,"addOptions",{name:this.name}))),this.storage=k(u(this,"addStorage",{name:this.name,options:this.options}))||{}}static create(t={}){return new bt(t)}configure(t={}){const e=this.extend();return e.options=B(this.options,t),e.storage=k(u(e,"addStorage",{name:e.name,options:e.options})),e}extend(t={}){const e=new bt(t);return e.parent=this,this.child=e,e.name=t.name?t.name:e.parent.name,t.defaultOptions&&console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${e.name}".`),e.options=k(u(e,"addOptions",{name:e.name})),e.storage=k(u(e,"addStorage",{name:e.name,options:e.options})),e}}function kt(t){return new T({find:t.find,handler:({state:e,range:n,match:o})=>{const s=k(t.getAttributes,void 0,o);if(!1===s||null===s)return null;const{tr:r}=e,i=o[o.length-1],a=o[0];let c=n.to;if(i){const o=a.search(/\S/),d=n.from+a.indexOf(i),l=d+i.length;if(ht(n.from,n.to,e.doc).filter((e=>e.mark.type.excluded.find((n=>n===t.type&&n!==e.mark.type)))).filter((t=>t.to>d)).length)return null;l<n.to&&r.delete(l,n.to),d>n.from&&r.delete(n.from+o,d),c=n.from+o+i.length,r.addMark(n.from+o,c,t.type.create(s||{})),r.removeStoredMark(t.type)}}})}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLWI1NGZmNmJlLjU2ZTg5YzBhM2Y4M2EzMzYzNmQ2LmpzIiwibWFwcGluZ3MiOiJrUkFRQSxTQUFTQSxFQUFxQkMsR0FDMUIsTUFBTSxNQUFFQyxFQUFLLFlBQUVDLEdBQWdCRixFQUMvQixJQUFJLFVBQUVHLEdBQWNELEdBQ2hCLElBQUVFLEdBQVFGLEdBQ1YsWUFBRUcsR0FBZ0JILEVBQ3RCLE1BQU8sSUFDQUQsRUFDSEssTUFBT0wsRUFBTUssTUFBTUMsS0FBS04sR0FDeEJPLGlCQUFrQlAsRUFBTU8saUJBQWlCRCxLQUFLTixHQUM5Q1Esa0JBQW1CUixFQUFNUSxrQkFDekJDLFFBQVNULEVBQU1TLFFBQ2ZDLE9BQVFWLEVBQU1VLE9BQ2RDLFlBQWFYLEVBQU1XLFlBQVlMLEtBQUtOLEdBQ3BDWSxPQUFRWixFQUFNWSxPQUFPTixLQUFLTixHQUN0Qkksa0JBQ0EsT0FBT0EsQ0FDWCxFQUNJRixnQkFDQSxPQUFPQSxDQUNYLEVBQ0lDLFVBQ0EsT0FBT0EsQ0FDWCxFQUNJVSxTQUlBLE9BSEFYLEVBQVlELEVBQVlDLFVBQ3hCQyxFQUFNRixFQUFZRSxJQUNsQkMsRUFBY0gsRUFBWUcsWUFDbkJILENBQ1gsRUFFUixDQUVBLE1BQU1hLEVBQ0ZDLFlBQVlDLEdBQ1JDLEtBQUtDLE9BQVNGLEVBQU1FLE9BQ3BCRCxLQUFLRSxZQUFjRixLQUFLQyxPQUFPRSxpQkFBaUJDLFNBQ2hESixLQUFLSyxZQUFjTixFQUFNaEIsS0FDN0IsQ0FDSXVCLHFCQUNBLFFBQVNOLEtBQUtLLFdBQ2xCLENBQ0l0QixZQUNBLE9BQU9pQixLQUFLSyxhQUFlTCxLQUFLQyxPQUFPbEIsS0FDM0MsQ0FDSXFCLGVBQ0EsTUFBTSxZQUFFRixFQUFXLE9BQUVELEVBQU0sTUFBRWxCLEdBQVVpQixNQUNqQyxLQUFFTyxHQUFTTixHQUNYLEdBQUVMLEdBQU9iLEVBQ1RnQixFQUFRQyxLQUFLUSxXQUFXWixHQUM5QixPQUFPYSxPQUFPQyxZQUFZRCxPQUNyQkUsUUFBUVQsR0FDUlUsS0FBSSxFQUFFQyxFQUFNQyxLQVFOLENBQUNELEVBUE8sSUFBSUUsS0FDZixNQUFNQyxFQUFXRixLQUFXQyxFQUFYRCxDQUFpQmYsR0FJbEMsT0FIS0gsRUFBR3FCLFFBQVEsb0JBQXVCakIsS0FBS00sZ0JBQ3hDQyxFQUFLVyxTQUFTdEIsR0FFWG9CLENBQVEsS0FJM0IsQ0FDSUcsWUFDQSxNQUFPLElBQU1uQixLQUFLb0IsYUFDdEIsQ0FDSUMsVUFDQSxNQUFPLElBQU1yQixLQUFLc0IsV0FDdEIsQ0FDQUYsWUFBWUcsRUFBU0MsR0FBaUIsR0FDbEMsTUFBTSxZQUFFdEIsRUFBVyxPQUFFRCxFQUFNLE1BQUVsQixHQUFVaUIsTUFDakMsS0FBRU8sR0FBU04sRUFDWHdCLEVBQVksR0FDWkMsSUFBd0JILEVBQ3hCM0IsRUFBSzJCLEdBQVd4QyxFQUFNYSxHQVV0QnVCLEVBQVEsSUFDUFYsT0FBT0MsWUFBWUQsT0FBT0UsUUFBUVQsR0FBYVUsS0FBSSxFQUFFQyxFQUFNQyxLQU9uRCxDQUFDRCxFQU5lLElBQUlFLEtBQ3ZCLE1BQU1oQixFQUFRQyxLQUFLUSxXQUFXWixFQUFJNEIsR0FDNUJSLEVBQVdGLEtBQVdDLEVBQVhELENBQWlCZixHQUVsQyxPQURBMEIsRUFBVUUsS0FBS1gsR0FDUkcsQ0FBSyxNQUlwQlMsSUFuQlEsS0FDSEYsSUFDRUYsR0FDQzVCLEVBQUdxQixRQUFRLG9CQUNYakIsS0FBS00sZ0JBQ1RDLEVBQUtXLFNBQVN0QixHQUVYNkIsRUFBVUksT0FBTWIsSUFBeUIsSUFBYkEsTUFjdkMsT0FBT0csQ0FDWCxDQUNBRyxVQUFVQyxHQUNOLE1BQU0sWUFBRXJCLEVBQVcsTUFBRW5CLEdBQVVpQixLQUN6QmtCLE9BQVdZLEVBQ1hsQyxFQUFLMkIsR0FBV3hDLEVBQU1hLEdBQ3RCRyxFQUFRQyxLQUFLUSxXQUFXWixFQUFJc0IsR0FNbEMsTUFBTyxJQUxtQlQsT0FBT0MsWUFBWUQsT0FDeENFLFFBQVFULEdBQ1JVLEtBQUksRUFBRUMsRUFBTUMsS0FDTixDQUFDRCxFQUFNLElBQUlFLElBQVNELEtBQVdDLEVBQVhELENBQWlCLElBQUtmLEVBQU9tQixpQkFJeERDLE1BQU8sSUFBTW5CLEtBQUtvQixZQUFZeEIsRUFBSXNCLEdBRTFDLENBQ0FWLFdBQVdaLEVBQUk0QixHQUFpQixHQUM1QixNQUFNLFlBQUV0QixFQUFXLE9BQUVELEVBQU0sTUFBRWxCLEdBQVVpQixNQUNqQyxLQUFFTyxHQUFTTixFQUNibEIsRUFBTUksYUFDTlMsRUFBR21DLGVBQWVoRCxFQUFNSSxhQUU1QixNQUFNWSxFQUFRLENBQ1ZILEtBQ0FLLFNBQ0FNLE9BQ0F4QixNQUFPRixFQUFxQixDQUN4QkUsUUFDQUMsWUFBYVksSUFFakJzQixTQUFVTSxFQUNKLEtBQ0YsT0FBRU0sRUFDTlgsTUFBTyxJQUFNbkIsS0FBS29CLFlBQVl4QixHQUM5QnlCLElBQUssSUFBTXJCLEtBQUtzQixVQUFVMUIsR0FDdEJRLGVBQ0EsT0FBT0ssT0FBT0MsWUFBWUQsT0FDckJFLFFBQVFULEdBQ1JVLEtBQUksRUFBRUMsRUFBTUMsS0FDTixDQUFDRCxFQUFNLElBQUlFLElBQVNELEtBQVdDLEVBQVhELENBQWlCZixNQUVwRCxHQUVKLE9BQU9BLENBQ1gsRUFzQ0osU0FBU2lDLEVBQWtCQyxFQUFXQyxFQUFPQyxHQUN6QyxZQUFnQ0wsSUFBNUJHLEVBQVVuRCxPQUFPb0QsSUFBd0JELEVBQVVHLE9BQzVDSixFQUFrQkMsRUFBVUcsT0FBUUYsRUFBT0MsR0FFZixtQkFBNUJGLEVBQVVuRCxPQUFPb0QsR0FDVkQsRUFBVW5ELE9BQU9vRCxHQUFPN0MsS0FBSyxJQUNwQzhDLEVBQ0hDLE9BQVFILEVBQVVHLE9BQ1pKLEVBQWtCQyxFQUFVRyxPQUFRRixFQUFPQyxHQUMzQyxPQUlQRixFQUFVbkQsT0FBT29ELEVBQzVCLENBRUEsU0FBU0csRUFBZ0JDLEdBSXJCLE1BQU8sQ0FDSEMsZUFKbUJELEVBQVdFLFFBQU9QLEdBQWdDLGNBQW5CQSxFQUFVUSxPQUs1REMsZUFKbUJKLEVBQVdFLFFBQU9QLEdBQWdDLFNBQW5CQSxFQUFVUSxPQUs1REUsZUFKbUJMLEVBQVdFLFFBQU9QLEdBQWdDLFNBQW5CQSxFQUFVUSxPQU1wRSxDQU1BLFNBQVNHLEVBQTRCTixHQUNqQyxNQUFNTyxFQUFzQixJQUN0QixlQUFFSCxFQUFjLGVBQUVDLEdBQW1CTixFQUFnQkMsR0FDckRRLEVBQXdCLElBQUlKLEtBQW1CQyxHQUMvQ0ksRUFBbUIsQ0FDckJDLFFBQVMsS0FDVEMsVUFBVSxFQUNWQyxXQUFZLEtBQ1pDLFVBQVcsS0FDWEMsYUFBYSxFQUNiQyxZQUFZLEdBNERoQixPQTFEQWYsRUFBV2dCLFNBQVFyQixJQUNmLE1BS01zQixFQUFzQnZCLEVBQWtCQyxFQUFXLHNCQUx6QyxDQUNacEIsS0FBTW9CLEVBQVVwQixLQUNoQjJDLFFBQVN2QixFQUFVdUIsUUFDbkJDLFFBQVN4QixFQUFVd0IsVUFHbEJGLEdBSW9CQSxJQUNSRCxTQUFRSSxJQUNyQkEsRUFBZ0JDLE1BQU1MLFNBQVFiLElBQzFCaEMsT0FDS0UsUUFBUStDLEVBQWdCRSxZQUN4Qk4sU0FBUSxFQUFFekMsRUFBTWdELE1BQ2pCaEIsRUFBb0JsQixLQUFLLENBQ3JCYyxPQUNBNUIsT0FDQWdELFVBQVcsSUFDSmQsS0FDQWMsSUFFVCxHQUNKLEdBQ0osR0FDSixJQUVOZixFQUFzQlEsU0FBUXJCLElBQzFCLE1BQU1FLEVBQVUsQ0FDWnRCLEtBQU1vQixFQUFVcEIsS0FDaEIyQyxRQUFTdkIsRUFBVXVCLFFBQ25CQyxRQUFTeEIsRUFBVXdCLFNBRWpCSyxFQUFnQjlCLEVBQWtCQyxFQUFXLGdCQUFpQkUsR0FDcEUsSUFBSzJCLEVBQ0QsT0FHSixNQUFNRixFQUFhRSxJQUNuQnJELE9BQ0tFLFFBQVFpRCxHQUNSTixTQUFRLEVBQUV6QyxFQUFNZ0QsTUFDakIsTUFBTUUsRUFBYSxJQUNaaEIsS0FDQWMsR0FFSEEsRUFBVVIsaUJBQW9DdkIsSUFBdEIrQixFQUFVYixnQkFDM0JlLEVBQVdmLFFBRXRCSCxFQUFvQmxCLEtBQUssQ0FDckJjLEtBQU1SLEVBQVVwQixLQUNoQkEsT0FDQWdELFVBQVdFLEdBQ2IsR0FDSixJQUVDbEIsQ0FDWCxDQUVBLFNBQVNtQixFQUFZQyxFQUFZeEUsR0FDN0IsR0FBMEIsaUJBQWZ3RSxFQUF5QixDQUNoQyxJQUFLeEUsRUFBT3lFLE1BQU1ELEdBQ2QsTUFBTUUsTUFBTSxnQ0FBZ0NGLDhDQUVoRCxPQUFPeEUsRUFBT3lFLE1BQU1ELEVBQ3hCLENBQ0EsT0FBT0EsQ0FDWCxDQUVBLFNBQVNHLEtBQW1CQyxHQUN4QixPQUFPQSxFQUNGN0IsUUFBTzhCLEtBQVVBLElBQ2pCQyxRQUFPLENBQUNDLEVBQU9GLEtBQ2hCLE1BQU1HLEVBQW1CLElBQUtELEdBaUI5QixPQWhCQS9ELE9BQU9FLFFBQVEyRCxHQUFNaEIsU0FBUSxFQUFFb0IsRUFBS0MsTUFDakJGLEVBQWlCQyxHQU01QkQsRUFBaUJDLEdBRFQsVUFBUkEsRUFDd0IsQ0FBQ0QsRUFBaUJDLEdBQU1DLEdBQU9DLEtBQUssS0FFL0MsVUFBUkYsRUFDbUIsQ0FBQ0QsRUFBaUJDLEdBQU1DLEdBQU9DLEtBQUssTUFHcENELEVBVnhCRixFQUFpQkMsR0FBT0MsQ0FXNUIsSUFFR0YsQ0FBZ0IsR0FDeEIsQ0FBQyxFQUNSLENBRUEsU0FBU0ksRUFBc0JDLEVBQVlqQyxHQUN2QyxPQUFPQSxFQUNGTCxRQUFPOEIsR0FBUUEsRUFBS1QsVUFBVVosV0FDOUJyQyxLQUFJMEQsR0FDQUEsRUFBS1QsVUFBVVgsV0FLYm9CLEVBQUtULFVBQVVYLFdBQVc0QixFQUFXQyxRQUFVLENBQUMsRUFKNUMsQ0FDSCxDQUFDVCxFQUFLekQsTUFBT2lFLEVBQVdDLE1BQU1ULEVBQUt6RCxTQUsxQzBELFFBQU8sQ0FBQ1gsRUFBWUMsSUFBY08sRUFBZ0JSLEVBQVlDLElBQVksQ0FBQyxFQUNwRixDQUVBLFNBQVNtQixFQUFXTCxHQUNoQixNQUF3QixtQkFBVkEsQ0FDbEIsQ0FTQSxTQUFTTSxFQUFhTixFQUFPeEMsS0FBd0JwQyxHQUNqRCxPQUFJaUYsRUFBV0wsR0FDUHhDLEVBQ093QyxFQUFNdEYsS0FBSzhDLEVBQVh3QyxJQUF1QjVFLEdBRTNCNEUsS0FBUzVFLEdBRWI0RSxDQUNYLENBNEJBLFNBQVNPLEVBQXFDQyxFQUFXdEMsR0FDckQsT0FBSXNDLEVBQVVDLE1BQ0hELEVBRUosSUFDQUEsRUFDSEUsU0FBVUMsSUFDTixNQUFNQyxFQUFnQkosRUFBVUUsU0FDMUJGLEVBQVVFLFNBQVNDLEdBQ25CSCxFQUFVSixNQUNoQixJQUFzQixJQUFsQlEsRUFDQSxPQUFPLEVBRVgsTUFBTUMsRUFBZ0IzQyxFQUFvQjBCLFFBQU8sQ0FBQ0MsRUFBT0YsS0FDckQsTUFBTUssRUFBUUwsRUFBS1QsVUFBVVYsVUFDdkJtQixFQUFLVCxVQUFVVixVQUFVbUMsR0FyQy9DLFNBQW9CWCxHQUNoQixNQUFxQixpQkFBVkEsRUFDQUEsRUFFUEEsRUFBTWMsTUFBTSx3QkFDTEMsT0FBT2YsR0FFSixTQUFWQSxHQUdVLFVBQVZBLEdBR0dBLENBQ1gsQ0F3QnNCZ0IsQ0FBV0wsRUFBS00sYUFBYXRCLEVBQUt6RCxPQUN4QyxPQUFJOEQsUUFDT0gsRUFFSixJQUNBQSxFQUNILENBQUNGLEVBQUt6RCxNQUFPOEQsRUFDaEIsR0FDRixDQUFDLEdBQ0osTUFBTyxJQUFLWSxLQUFrQkMsRUFBZSxFQUd6RCxDQUVBLFNBQVNLLEVBQWtCQyxHQUN2QixPQUFPckYsT0FBT0MsWUFBWUQsT0FBT0UsUUFBUW1GLEdBQU10RCxRQUFPLEVBQUVrQyxFQUFLQyxNQUM3QyxVQUFSRCxJQTFEWixTQUF1QkMsRUFBUSxDQUFDLEdBQzVCLE9BQXFDLElBQTlCbEUsT0FBT3NGLEtBQUtwQixHQUFPcUIsUUFBZ0JyQixFQUFNN0UsY0FBZ0JXLE1BQ3BFLENBd0QrQndGLENBQWN0QixLQUc5QkEsVUFFZixDQXNHQSxTQUFTdUIsRUFBb0JyRixFQUFNcEIsR0FDL0IsT0FBT0EsRUFBT3lFLE1BQU1yRCxJQUFTcEIsRUFBTzBHLE1BQU10RixJQUFTLElBQ3ZELENBRUEsU0FBU3VGLEVBQXdCbkUsRUFBV29FLEdBQ3hDLE9BQUlDLE1BQU1DLFFBQVFGLEdBQ1BBLEVBQVFHLE1BQUtDLElBQ3lCLGlCQUFyQkEsRUFDZEEsRUFDQUEsRUFBaUI1RixRQUNQb0IsRUFBVXBCLE9BRzNCd0YsQ0FDWCxDQWFBLFNBQVNLLEVBQVMvQixHQUNkLE1BQWlELG9CQUExQ2xFLE9BQU9rRyxVQUFVQyxTQUFTQyxLQUFLbEMsRUFDMUMsQ0FFQSxNQUFNbUMsRUFDRmhILFlBQVloQixHQUNSa0IsS0FBSytHLEtBQU9qSSxFQUFPaUksS0FDbkIvRyxLQUFLZ0gsUUFBVWxJLEVBQU9rSSxPQUMxQixFQXVCSixTQUFTQyxFQUFNbkksR0FDWCxJQUFJb0ksRUFDSixNQUFNLE9BQUVqSCxFQUFNLEtBQUVrSCxFQUFJLEdBQUVDLEVBQUUsS0FBRUMsRUFBSSxNQUFFQyxFQUFLLE9BQUVDLEdBQVl6SSxHQUM3QyxLQUFFeUIsR0FBU04sRUFDakIsR0FBSU0sRUFBS2lILFVBQ0wsT0FBTyxFQUVYLE1BQU1DLEVBQVFsSCxFQUFLeEIsTUFBTUcsSUFBSXdJLFFBQVFQLEdBQ3JDLEdBRUFNLEVBQU1yRixPQUFPSyxLQUFLa0YsS0FBS0MsT0FFb0MsUUFBaERWLEVBQU1PLEVBQU1JLFlBQWNKLEVBQU1LLGlCQUErQixJQUFQWixPQUFnQixFQUFTQSxFQUFHZixNQUFNWSxNQUFLZ0IsR0FBUUEsRUFBS3RGLEtBQUtrRixLQUFLQyxRQUM3SCxPQUFPLEVBRVgsSUFBSUksR0FBVSxFQUNkLE1BQU1DLEVBMURzQixFQUFDUixFQUFPUyxFQUFXLE9BQy9DLElBQUlELEVBQWEsR0FPakIsT0FOQVIsRUFBTXJGLE9BQU8rRixhQUFhQyxLQUFLQyxJQUFJLEVBQUdaLEVBQU1hLGFBQWVKLEdBQVdULEVBQU1hLGNBQWMsQ0FBQ2hELEVBQU1pRCxFQUFLbkcsRUFBUW9HLEtBQzFHLElBQUl0QixFQUFJdUIsRUFBSUMsRUFDWlQsSUFBdUQsUUFBdkNRLEdBQU12QixFQUFLNUIsRUFBSzdDLEtBQUtrRixNQUFNZ0IsY0FBMkIsSUFBUEYsT0FBZ0IsRUFBU0EsRUFBRzVCLEtBQUtLLEVBQUksQ0FDaEc1QixPQUFNaUQsTUFBS25HLFNBQVFvRyxhQUNhLFFBQTNCRSxFQUFLakIsRUFBTUksa0JBQStCLElBQVBhLE9BQWdCLEVBQVNBLEVBQUdyQixPQUFTLFFBQVEsSUFFdEZZLENBQVUsRUFrREVXLENBQXdCbkIsR0FBU0osRUE2Q3BELE9BNUNBQyxFQUFNaEUsU0FBUXVGLElBQ1YsR0FBSWIsRUFDQSxPQUVKLE1BQU12QyxFQTFDa0IsRUFBQzRCLEVBQU1OLEtBQ25DLEdBQUlMLEVBQVNLLEdBQ1QsT0FBT0EsRUFBSytCLEtBQUt6QixHQUVyQixNQUFNMEIsRUFBaUJoQyxFQUFLTSxHQUM1QixJQUFLMEIsRUFDRCxPQUFPLEtBRVgsTUFBTUMsRUFBUyxHQVdmLE9BVkFBLEVBQU9ySCxLQUFLb0gsRUFBZTFCLE1BQzNCMkIsRUFBT1IsTUFBUU8sRUFBZVAsTUFDOUJRLEVBQU9DLE1BQVE1QixFQUNmMkIsRUFBT2xELEtBQU9pRCxFQUFlakQsS0FDekJpRCxFQUFlRyxjQUNWSCxFQUFlMUIsS0FBSzhCLFNBQVNKLEVBQWVHLGNBQzdDRSxRQUFRQyxLQUFLLHNGQUVqQkwsRUFBT3JILEtBQUtvSCxFQUFlRyxjQUV4QkYsQ0FBTSxFQXVCS00sQ0FBd0JyQixFQUFZWSxFQUFLOUIsTUFDdkQsSUFBS3RCLEVBQ0QsT0FFSixNQUFNN0YsRUFBS1csRUFBS3hCLE1BQU1hLEdBQ2hCYixFQUFRRixFQUFxQixDQUMvQkUsTUFBT3dCLEVBQUt4QixNQUNaQyxZQUFhWSxJQUVYMkosRUFBUSxDQUNWcEMsS0FBTUEsR0FBUTFCLEVBQU0sR0FBR08sT0FBU3FCLEVBQUtyQixRQUNyQ29CLE9BRUUsU0FBRWhILEVBQVEsTUFBRWUsRUFBSyxJQUFFRSxHQUFRLElBQUl4QixFQUFlLENBQ2hESSxTQUNBbEIsVUFXWSxPQVRBOEosRUFBSzdCLFFBQVEsQ0FDekJqSSxRQUNBd0ssUUFDQTlELFFBQ0FyRixXQUNBZSxRQUNBRSxTQUdxQnpCLEVBQUc0SixNQUFNeEQsU0FLbENwRyxFQUFHNkosUUFBUWxDLEVBQVEsQ0FDZm1DLFVBQVc5SixFQUNYdUgsT0FDQUMsS0FDQUMsU0FFSjlHLEVBQUtXLFNBQVN0QixHQUNkb0ksR0FBVSxFQUFJLElBRVhBLENBQ1gsQ0FNQSxTQUFTMkIsRUFBaUI1SixHQUN0QixNQUFNLE9BQUVFLEVBQU0sTUFBRXFILEdBQVV2SCxFQUNwQndILEVBQVMsSUFBSSxLQUFPLENBQ3RCeEksTUFBTyxDQUNINkssS0FBSSxJQUNPLEtBRVh4SyxNQUFLLENBQUNRLEVBQUlpSyxJQUNTakssRUFBR3FCLFFBQVFzRyxLQUluQjNILEVBQUdrSyxjQUFnQmxLLEVBQUdtSyxXQUN2QixLQUNBRixJQUdkOUosTUFBTyxDQUNIaUssZ0JBQWUsQ0FBQ3pKLEVBQU00RyxFQUFNQyxFQUFJQyxJQUNyQkosRUFBTSxDQUNUaEgsU0FDQWtILE9BQ0FDLEtBQ0FDLE9BQ0FDLFFBQ0FDLFdBR1IwQyxnQkFBaUIsQ0FDYkMsZUFBZ0IzSixJQUNaNEosWUFBVyxLQUNQLE1BQU0sUUFBRUMsR0FBWTdKLEVBQUt4QixNQUFNRSxVQUMzQm1MLEdBQ0FuRCxFQUFNLENBQ0ZoSCxTQUNBa0gsS0FBTWlELEVBQVE3QixJQUNkbkIsR0FBSWdELEVBQVE3QixJQUNabEIsS0FBTSxHQUNOQyxRQUNBQyxVQUVSLEtBRUcsSUFLZjhDLGNBQWM5SixFQUFNK0osR0FDaEIsR0FBa0IsVUFBZEEsRUFBTTVGLElBQ04sT0FBTyxFQUVYLE1BQU0sUUFBRTBGLEdBQVk3SixFQUFLeEIsTUFBTUUsVUFDL0IsUUFBSW1MLEdBQ09uRCxFQUFNLENBQ1RoSCxTQUNBa0gsS0FBTWlELEVBQVE3QixJQUNkbkIsR0FBSWdELEVBQVE3QixJQUNabEIsS0FBTSxLQUNOQyxRQUNBQyxVQUlaLEdBR0pnRCxjQUFjLElBRWxCLE9BQU9oRCxDQUNYLENBTUEsTUFBTWlELEVBQ0YxSyxZQUFZaEIsR0FDUmtCLEtBQUsrRyxLQUFPakksRUFBT2lJLEtBQ25CL0csS0FBS2dILFFBQVVsSSxFQUFPa0ksT0FDMUIsRUFxRUosU0FBU3lELEVBQWlCMUssR0FDdEIsTUFBTSxPQUFFRSxFQUFNLE1BQUVxSCxHQUFVdkgsRUFDMUIsSUFBSTJLLEVBQW9CLEtBQ3BCQyxHQUEwQixFQUMxQkMsR0FBMkIsRUFtRS9CLE9BbEVnQnRELEVBQU0xRyxLQUFJaUksR0FDZixJQUFJLEtBQU8sQ0FFZHRJLEtBQUtBLEdBQ0QsTUFBTXNLLEVBQW1CUCxJQUNyQixJQUFJcEQsRUFDSndELEdBQXVELFFBQWpDeEQsRUFBSzNHLEVBQUt1SyxJQUFJQyxxQkFBa0MsSUFBUDdELE9BQWdCLEVBQVNBLEVBQUc4RCxTQUFTVixFQUFNVyxTQUNwRzFLLEVBQUt1SyxJQUFJQyxjQUNULElBQUksRUFHZCxPQURBRyxPQUFPQyxpQkFBaUIsWUFBYU4sR0FDOUIsQ0FDSE8sVUFDSUYsT0FBT0csb0JBQW9CLFlBQWFSLEVBQzVDLEVBRVIsRUFDQTlLLE1BQU8sQ0FDSGtLLGdCQUFpQixDQUNicUIsS0FBTS9LLElBQ0ZxSyxFQUEyQkYsSUFBc0JuSyxFQUFLdUssSUFBSUMsZUFDbkQsR0FFWFEsTUFBTyxDQUFDaEwsRUFBTStKLEtBQ1YsSUFBSXBELEVBQ0osTUFBTXNFLEVBQXNDLFFBQTlCdEUsRUFBS29ELEVBQU1tQixxQkFBa0MsSUFBUHZFLE9BQWdCLEVBQVNBLEVBQUd3RSxRQUFRLGFBRXhGLE9BREFmLEtBQTZCYSxhQUFtQyxFQUFTQSxFQUFLckMsU0FBUyxtQkFDaEYsQ0FBSyxJQUl4QndDLGtCQUFtQixDQUFDQyxFQUFjQyxFQUFVOU0sS0FDeEMsTUFBTUMsRUFBYzRNLEVBQWEsR0FDM0JFLEVBQTZDLFVBQW5DOU0sRUFBWWlDLFFBQVEsYUFBMkIwSixFQUN6RG9CLEVBQTRDLFNBQW5DL00sRUFBWWlDLFFBQVEsYUFBMEIySixFQUM3RCxJQUFLa0IsSUFBWUMsRUFDYixPQUdKLE1BQU01RSxFQUFPMEUsRUFBUzNNLElBQUk4TSxRQUFRQyxjQUFjbE4sRUFBTUcsSUFBSThNLFNBQ3BENUUsRUFBS3lFLEVBQVMzTSxJQUFJOE0sUUFBUUUsWUFBWW5OLEVBQU1HLElBQUk4TSxTQUN0RCxHQTFIWSxpQkEwSEU3RSxJQUFVQyxHQUFNRCxJQUFTQyxFQUFHK0UsRUFDdEMsT0FJSixNQUFNdk0sRUFBS2IsRUFBTWEsR0FDWHdNLEVBQWlCdk4sRUFBcUIsQ0FDeENFLFFBQ0FDLFlBQWFZLElBVWpCLE9BNUdoQixTQUFhZCxHQUNULE1BQU0sT0FBRW1CLEVBQU0sTUFBRWxCLEVBQUssS0FBRW9JLEVBQUksR0FBRUMsRUFBRSxLQUFFeUIsR0FBVS9KLEdBQ3JDLFNBQUVzQixFQUFRLE1BQUVlLEVBQUssSUFBRUUsR0FBUSxJQUFJeEIsRUFBZSxDQUNoREksU0FDQWxCLFVBRUVzTixFQUFXLEdBK0JqQixPQTlCQXROLEVBQU1HLElBQUlpSixhQUFhaEIsRUFBTUMsR0FBSSxDQUFDOUIsRUFBTWlELEtBQ3BDLElBQUtqRCxFQUFLZ0gsYUFBZWhILEVBQUs3QyxLQUFLa0YsS0FBS0MsS0FDcEMsT0FFSixNQUFNMkUsRUFBZW5FLEtBQUtDLElBQUlsQixFQUFNb0IsR0FDOUJpRSxFQUFhcEUsS0FBS3FFLElBQUlyRixFQUFJbUIsRUFBTWpELEVBQUswRyxRQUFRVSxNQW5DM0IsRUFBQ3JGLEVBQU1OLEtBQ25DLEdBQUlMLEVBQVNLLEdBQ1QsTUFBTyxJQUFJTSxFQUFLc0YsU0FBUzVGLElBRTdCLE1BQU02RixFQUFVN0YsRUFBS00sR0FDckIsT0FBS3VGLEVBR0VBLEVBQVFoTSxLQUFJaU0sSUFDZixNQUFNN0QsRUFBUyxHQVdmLE9BVkFBLEVBQU9ySCxLQUFLa0wsRUFBZXhGLE1BQzNCMkIsRUFBT1IsTUFBUXFFLEVBQWVyRSxNQUM5QlEsRUFBT0MsTUFBUTVCLEVBQ2YyQixFQUFPbEQsS0FBTytHLEVBQWUvRyxLQUN6QitHLEVBQWUzRCxjQUNWMkQsRUFBZXhGLEtBQUs4QixTQUFTMEQsRUFBZTNELGNBQzdDRSxRQUFRQyxLQUFLLHNGQUVqQkwsRUFBT3JILEtBQUtrTCxFQUFlM0QsY0FFeEJGLENBQU0sSUFkTixFQWVULEVBZ0JrQjhELENBREl4SCxFQUFLeUgsWUFBWVIsRUFBZWhFLEVBQUtpRSxFQUFhakUsT0FBS3pHLEVBQVcsS0FDakMrRyxFQUFLOUIsTUFDbER6RCxTQUFRbUMsSUFDWixRQUFvQjNELElBQWhCMkQsRUFBTStDLE1BQ04sT0FFSixNQUFNd0UsRUFBUVQsRUFBZTlHLEVBQU0rQyxNQUFRLEVBQ3JDeUUsRUFBTUQsRUFBUXZILEVBQU0sR0FBR08sT0FDdkJ1RCxFQUFRLENBQ1ZwQyxLQUFNcEksRUFBTWEsR0FBR3NOLFFBQVF0TSxJQUFJb00sR0FDM0I1RixHQUFJckksRUFBTWEsR0FBR3NOLFFBQVF0TSxJQUFJcU0sSUFFdkJqRyxFQUFVNkIsRUFBSzdCLFFBQVEsQ0FDekJqSSxRQUNBd0ssUUFDQTlELFFBQ0FyRixXQUNBZSxRQUNBRSxRQUVKZ0wsRUFBUzFLLEtBQUtxRixFQUFRLEdBQ3hCLElBRVVxRixFQUFTeEssT0FBTW1GLEdBQXVCLE9BQVpBLEdBRTlDLENBOERnQ3BGLENBQUksQ0FDaEIzQixTQUNBbEIsTUFBT3FOLEVBQ1BqRixLQUFNaUIsS0FBS0MsSUFBSWxCLEVBQU8sRUFBRyxHQUN6QkMsR0FBSUEsRUFBRytFLEVBQ1B0RCxVQUdhakosRUFBRzRKLE1BQU14RCxPQUduQnBHLE9BSFAsQ0FHUyxLQUt6QixDQU9BLE1BQU11TixFQUNGck4sWUFBWXdDLEVBQVlyQyxHQUNwQkQsS0FBS29OLGdCQUFrQixHQUN2QnBOLEtBQUtDLE9BQVNBLEVBQ2RELEtBQUtzQyxXQUFhNkssRUFBaUJ6RixRQUFRcEYsR0FDM0N0QyxLQUFLUCxPQTVjYixTQUF1QzZDLEdBQ25DLElBQUk0RSxFQUNKLE1BQU1tRyxFQUFnQnpLLEVBQTRCTixJQUM1QyxlQUFFSSxFQUFjLGVBQUVDLEdBQW1CTixFQUFnQkMsR0FDckRnTCxFQUErRixRQUFwRnBHLEVBQUt4RSxFQUFlcUUsTUFBSzlFLEdBQWFELEVBQWtCQyxFQUFXLG9CQUFnQyxJQUFQaUYsT0FBZ0IsRUFBU0EsRUFBR3JHLEtBQ25JcUQsRUFBUXpELE9BQU9DLFlBQVlnQyxFQUFlOUIsS0FBSXFCLElBQ2hELE1BQU1ZLEVBQXNCd0ssRUFBYzdLLFFBQU9xQixHQUFhQSxFQUFVcEIsT0FBU1IsRUFBVXBCLE9BQ3JGc0IsRUFBVSxDQUNadEIsS0FBTW9CLEVBQVVwQixLQUNoQjJDLFFBQVN2QixFQUFVdUIsUUFDbkJDLFFBQVN4QixFQUFVd0IsU0FTakJoRSxFQUFTb0csRUFBa0IsSUFQVHZELEVBQVdpQyxRQUFPLENBQUNnSixFQUFRQyxLQUMvQyxNQUFNQyxFQUFtQnpMLEVBQWtCd0wsRUFBRyxtQkFBb0JyTCxHQUNsRSxNQUFPLElBQ0FvTCxLQUNDRSxFQUFtQkEsRUFBaUJ4TCxHQUFhLENBQUMsRUFDekQsR0FDRixDQUFDLEdBR0ErSixRQUFTL0csRUFBYWpELEVBQWtCQyxFQUFXLFVBQVdFLElBQzlEZ0UsTUFBT2xCLEVBQWFqRCxFQUFrQkMsRUFBVyxRQUFTRSxJQUMxRHVMLE1BQU96SSxFQUFhakQsRUFBa0JDLEVBQVcsUUFBU0UsSUFDMUR3TCxPQUFRMUksRUFBYWpELEVBQWtCQyxFQUFXLFNBQVVFLElBQzVEeUwsS0FBTTNJLEVBQWFqRCxFQUFrQkMsRUFBVyxPQUFRRSxJQUN4RDBMLFdBQVk1SSxFQUFhakQsRUFBa0JDLEVBQVcsYUFBY0UsSUFDcEUyTCxVQUFXN0ksRUFBYWpELEVBQWtCQyxFQUFXLFlBQWFFLElBQ2xFeUYsS0FBTTNDLEVBQWFqRCxFQUFrQkMsRUFBVyxPQUFRRSxJQUN4RDRMLFNBQVU5SSxFQUFhakQsRUFBa0JDLEVBQVcsV0FBWUUsSUFDaEU2TCxVQUFXL0ksRUFBYWpELEVBQWtCQyxFQUFXLFlBQWFFLElBQ2xFNEMsTUFBT3RFLE9BQU9DLFlBQVltQyxFQUFvQmpDLEtBQUlxTixJQUM5QyxJQUFJL0csRUFDSixNQUFPLENBQUMrRyxFQUFtQnBOLEtBQU0sQ0FBRW1DLFFBQXlILFFBQS9Ha0UsRUFBSytHLGFBQStELEVBQVNBLEVBQW1CcEssaUJBQThCLElBQVBxRCxPQUFnQixFQUFTQSxFQUFHbEUsU0FBVSxPQUc1TUcsRUFBWThCLEVBQWFqRCxFQUFrQkMsRUFBVyxZQUFhRSxJQUNyRWdCLElBQ0ExRCxFQUFPeU8sU0FBVy9LLEVBQ2J2QyxLQUFJdUUsR0FBYUQsRUFBcUNDLEVBQVd0QyxNQUUxRSxNQUFNSyxFQUFhbEIsRUFBa0JDLEVBQVcsYUFBY0UsR0FDMURlLElBQ0F6RCxFQUFPME8sTUFBUTdJLEdBQVFwQyxFQUFXLENBQzlCb0MsT0FDQThJLGVBQWdCdkosRUFBc0JTLEVBQU16QyxNQUdwRCxNQUFNd0wsRUFBYXJNLEVBQWtCQyxFQUFXLGFBQWNFLEdBSTlELE9BSElrTSxJQUNBNU8sRUFBT2tKLE9BQVMwRixHQUViLENBQUNwTSxFQUFVcEIsS0FBTXBCLEVBQU8sS0FFN0IwRyxFQUFRMUYsT0FBT0MsWUFBWWlDLEVBQWUvQixLQUFJcUIsSUFDaEQsTUFBTVksRUFBc0J3SyxFQUFjN0ssUUFBT3FCLEdBQWFBLEVBQVVwQixPQUFTUixFQUFVcEIsT0FDckZzQixFQUFVLENBQ1p0QixLQUFNb0IsRUFBVXBCLEtBQ2hCMkMsUUFBU3ZCLEVBQVV1QixRQUNuQkMsUUFBU3hCLEVBQVV3QixTQVNqQmhFLEVBQVNvRyxFQUFrQixJQVBUdkQsRUFBV2lDLFFBQU8sQ0FBQ2dKLEVBQVFDLEtBQy9DLE1BQU1jLEVBQW1CdE0sRUFBa0J3TCxFQUFHLG1CQUFvQnJMLEdBQ2xFLE1BQU8sSUFDQW9MLEtBQ0NlLEVBQW1CQSxFQUFpQnJNLEdBQWEsQ0FBQyxFQUN6RCxHQUNGLENBQUMsR0FHQXNNLFVBQVd0SixFQUFhakQsRUFBa0JDLEVBQVcsWUFBYUUsSUFDbEVxTSxTQUFVdkosRUFBYWpELEVBQWtCQyxFQUFXLFdBQVlFLElBQ2hFdUwsTUFBT3pJLEVBQWFqRCxFQUFrQkMsRUFBVyxRQUFTRSxJQUMxRHNNLFNBQVV4SixFQUFhakQsRUFBa0JDLEVBQVcsV0FBWUUsSUFDaEV5RixLQUFNM0MsRUFBYWpELEVBQWtCQyxFQUFXLE9BQVFFLElBQ3hENEMsTUFBT3RFLE9BQU9DLFlBQVltQyxFQUFvQmpDLEtBQUlxTixJQUM5QyxJQUFJL0csRUFDSixNQUFPLENBQUMrRyxFQUFtQnBOLEtBQU0sQ0FBRW1DLFFBQXlILFFBQS9Ha0UsRUFBSytHLGFBQStELEVBQVNBLEVBQW1CcEssaUJBQThCLElBQVBxRCxPQUFnQixFQUFTQSxFQUFHbEUsU0FBVSxPQUc1TUcsRUFBWThCLEVBQWFqRCxFQUFrQkMsRUFBVyxZQUFhRSxJQUNyRWdCLElBQ0ExRCxFQUFPeU8sU0FBVy9LLEVBQ2J2QyxLQUFJdUUsR0FBYUQsRUFBcUNDLEVBQVd0QyxNQUUxRSxNQUFNSyxFQUFhbEIsRUFBa0JDLEVBQVcsYUFBY0UsR0FPOUQsT0FOSWUsSUFDQXpELEVBQU8wTyxNQUFRcEcsR0FBUTdFLEVBQVcsQ0FDOUI2RSxPQUNBcUcsZUFBZ0J2SixFQUFzQmtELEVBQU1sRixNQUc3QyxDQUFDWixFQUFVcEIsS0FBTXBCLEVBQU8sS0FFbkMsT0FBTyxJQUFJLEtBQU8sQ0FDZDZOLFVBQ0FwSixRQUNBaUMsU0FFUixDQXlXc0J1SSxDQUE4QjFPLEtBQUtzQyxZQUNqRHRDLEtBQUtzQyxXQUFXZ0IsU0FBUXJCLElBQ3BCLElBQUlpRixFQUVKbEgsS0FBS0MsT0FBTzBPLGlCQUFpQjFNLEVBQVVwQixNQUFRb0IsRUFBVXdCLFFBQ3pELE1BQU10QixFQUFVLENBQ1p0QixLQUFNb0IsRUFBVXBCLEtBQ2hCMkMsUUFBU3ZCLEVBQVV1QixRQUNuQkMsUUFBU3hCLEVBQVV3QixRQUNuQnhELE9BQVFELEtBQUtDLE9BQ2J3QyxLQUFNeUQsRUFBb0JqRSxFQUFVcEIsS0FBTWIsS0FBS1AsU0FFNUIsU0FBbkJ3QyxFQUFVUSxPQUN3RixRQUE3RXlFLEVBQUtqQyxFQUFhakQsRUFBa0JDLEVBQVcsY0FBZUUsV0FBOEIsSUFBUCtFLEdBQWdCQSxJQUV0SGxILEtBQUtvTixnQkFBZ0J6TCxLQUFLTSxFQUFVcEIsTUFHNUMsTUFBTStOLEVBQWlCNU0sRUFBa0JDLEVBQVcsaUJBQWtCRSxHQUNsRXlNLEdBQ0E1TyxLQUFLQyxPQUFPNE8sR0FBRyxlQUFnQkQsR0FFbkMsTUFBTUUsRUFBVzlNLEVBQWtCQyxFQUFXLFdBQVlFLEdBQ3REMk0sR0FDQTlPLEtBQUtDLE9BQU80TyxHQUFHLFNBQVVDLEdBRTdCLE1BQU1DLEVBQVcvTSxFQUFrQkMsRUFBVyxXQUFZRSxHQUN0RDRNLEdBQ0EvTyxLQUFLQyxPQUFPNE8sR0FBRyxTQUFVRSxHQUU3QixNQUFNQyxFQUFvQmhOLEVBQWtCQyxFQUFXLG9CQUFxQkUsR0FDeEU2TSxHQUNBaFAsS0FBS0MsT0FBTzRPLEdBQUcsa0JBQW1CRyxHQUV0QyxNQUFNQyxFQUFnQmpOLEVBQWtCQyxFQUFXLGdCQUFpQkUsR0FDaEU4TSxHQUNBalAsS0FBS0MsT0FBTzRPLEdBQUcsY0FBZUksR0FFbEMsTUFBTUMsRUFBVWxOLEVBQWtCQyxFQUFXLFVBQVdFLEdBQ3BEK00sR0FDQWxQLEtBQUtDLE9BQU80TyxHQUFHLFFBQVNLLEdBRTVCLE1BQU1DLEVBQVNuTixFQUFrQkMsRUFBVyxTQUFVRSxHQUNsRGdOLEdBQ0FuUCxLQUFLQyxPQUFPNE8sR0FBRyxPQUFRTSxHQUUzQixNQUFNQyxFQUFZcE4sRUFBa0JDLEVBQVcsWUFBYUUsR0FDeERpTixHQUNBcFAsS0FBS0MsT0FBTzRPLEdBQUcsVUFBV08sRUFDOUIsR0FFUixDQUNBQyxlQUFlL00sR0FDWCxNQUFNZ04sRUFBcUJuQyxFQUFpQm9DLEtBQUtwQyxFQUFpQnFDLFFBQVFsTixJQUNwRW1OLEVBaEVkLFNBQXdCakwsR0FDcEIsTUFBTWtMLEVBQVdsTCxFQUFNaEMsUUFBTyxDQUFDbU4sRUFBSW5ILElBQVVoRSxFQUFNb0wsUUFBUUQsS0FBUW5ILElBQ25FLE1BQU8sSUFBSSxJQUFJcUgsSUFBSUgsR0FDdkIsQ0E2RGdDSSxDQUFlUixFQUFtQjFPLEtBQUlxQixHQUFhQSxFQUFVcEIsUUFJckYsT0FISTRPLEVBQWdCekosUUFDaEJvRCxRQUFRQyxLQUFLLG9EQUFvRG9HLEVBQWdCN08sS0FBSTBELEdBQVEsSUFBSUEsT0FBU00sS0FBSyxvQ0FFNUcwSyxDQUNYLENBQ0FELGVBQWUvTSxHQUNYLE9BQU9BLEVBQ0YxQixLQUFJcUIsSUFDTCxNQUtNOE4sRUFBZ0IvTixFQUFrQkMsRUFBVyxnQkFMbkMsQ0FDWnBCLEtBQU1vQixFQUFVcEIsS0FDaEIyQyxRQUFTdkIsRUFBVXVCLFFBQ25CQyxRQUFTeEIsRUFBVXdCLFVBR3ZCLE9BQUlzTSxFQUNPLENBQ0g5TixLQUNHakMsS0FBS3dQLFFBQVFPLE1BR2pCOU4sQ0FBUyxJQUdmK04sS0FBSyxHQUNkLENBQ0FYLFlBQVkvTSxHQUVSLE9BQU9BLEVBQVdpTixNQUFLLENBQUNVLEVBQUc5RCxLQUN2QixNQUFNK0QsRUFBWWxPLEVBQWtCaU8sRUFBRyxhQUZuQixJQUdkRSxFQUFZbk8sRUFBa0JtSyxFQUFHLGFBSG5CLElBSXBCLE9BQUkrRCxFQUFZQyxHQUNKLEVBRVJELEVBQVlDLEVBQ0wsRUFFSixDQUFDLEdBRWhCLENBQ0kvUCxlQUNBLE9BQU9KLEtBQUtzQyxXQUFXaUMsUUFBTyxDQUFDbkUsRUFBVTZCLEtBQ3JDLE1BT01tTyxFQUFjcE8sRUFBa0JDLEVBQVcsY0FQakMsQ0FDWnBCLEtBQU1vQixFQUFVcEIsS0FDaEIyQyxRQUFTdkIsRUFBVXVCLFFBQ25CQyxRQUFTeEIsRUFBVXdCLFFBQ25CeEQsT0FBUUQsS0FBS0MsT0FDYndDLEtBQU15RCxFQUFvQmpFLEVBQVVwQixLQUFNYixLQUFLUCxVQUduRCxPQUFLMlEsRUFHRSxJQUNBaFEsS0FDQWdRLEtBSkloUSxDQUtWLEdBQ0YsQ0FBQyxFQUNSLENBQ0laLGNBQ0EsTUFBTSxPQUFFUyxHQUFXRCxLQU1ic0MsRUFBYTZLLEVBQWlCb0MsS0FBSyxJQUFJdlAsS0FBS3NDLFlBQVkrTixXQUN4REMsRUFBYSxHQUNiQyxFQUFhLEdBQ2JDLEVBQWFsTyxFQUNkMUIsS0FBSXFCLElBQ0wsTUFBTUUsRUFBVSxDQUNadEIsS0FBTW9CLEVBQVVwQixLQUNoQjJDLFFBQVN2QixFQUFVdUIsUUFDbkJDLFFBQVN4QixFQUFVd0IsUUFDbkJ4RCxTQUNBd0MsS0FBTXlELEVBQW9CakUsRUFBVXBCLEtBQU1iLEtBQUtQLFNBRTdDRCxFQUFVLEdBQ1ZpUixFQUF1QnpPLEVBQWtCQyxFQUFXLHVCQUF3QkUsR0FDbEYsR0FBSXNPLEVBQXNCLENBQ3RCLE1BQU1DLEVBQVdqUSxPQUFPQyxZQUFZRCxPQUMvQkUsUUFBUThQLEtBQ1I3UCxLQUFJLEVBQUUrUCxFQUFVQyxLQUNWLENBQUNELEVBQVUsSUFBTUMsRUFBTyxDQUFFM1EsZUFFL0I0USxHQUFlLE9BQU9ILEdBQzVCbFIsRUFBUW1DLEtBQUtrUCxFQUNqQixDQUNBLE1BQU1DLEVBQWdCOU8sRUFBa0JDLEVBQVcsZ0JBQWlCRSxHQUNoRWlFLEVBQXdCbkUsRUFBV2hDLEVBQU91RCxRQUFRdU4sbUJBQXFCRCxHQUN2RVIsRUFBVzNPLFFBQVFtUCxLQUV2QixNQUFNRSxFQUFnQmhQLEVBQWtCQyxFQUFXLGdCQUFpQkUsR0FDaEVpRSxFQUF3Qm5FLEVBQVdoQyxFQUFPdUQsUUFBUXlOLG1CQUFxQkQsR0FDdkVULEVBQVc1TyxRQUFRcVAsS0FFdkIsTUFBTUUsRUFBd0JsUCxFQUFrQkMsRUFBVyx3QkFBeUJFLEdBQ3BGLEdBQUkrTyxFQUF1QixDQUN2QixNQUFNQyxFQUFxQkQsSUFDM0IxUixFQUFRbUMsUUFBUXdQLEVBQ3BCLENBQ0EsT0FBTzNSLENBQU8sSUFFYndRLE9BQ0wsTUFBTyxDQUNIckcsRUFBaUIsQ0FDYjFKLFNBQ0FxSCxNQUFPZ0osT0FFUjdGLEVBQWlCLENBQ2hCeEssU0FDQXFILE1BQU9pSixPQUVSQyxFQUVYLENBQ0k1TSxpQkFDQSxPQUFPaEIsRUFBNEI1QyxLQUFLc0MsV0FDNUMsQ0FDSThPLGdCQUNBLE1BQU0sT0FBRW5SLEdBQVdELE1BQ2IsZUFBRTBDLEdBQW1CTCxFQUFnQnJDLEtBQUtzQyxZQUNoRCxPQUFPN0IsT0FBT0MsWUFBWWdDLEVBQ3JCRixRQUFPUCxLQUFlRCxFQUFrQkMsRUFBVyxpQkFDbkRyQixLQUFJcUIsSUFDTCxNQUFNWSxFQUFzQjdDLEtBQUs0RCxXQUFXcEIsUUFBT3FCLEdBQWFBLEVBQVVwQixPQUFTUixFQUFVcEIsT0FDdkZzQixFQUFVLENBQ1p0QixLQUFNb0IsRUFBVXBCLEtBQ2hCMkMsUUFBU3ZCLEVBQVV1QixRQUNuQkMsUUFBU3hCLEVBQVV3QixRQUNuQnhELFNBQ0F3QyxLQUFNdUIsRUFBWS9CLEVBQVVwQixLQUFNYixLQUFLUCxTQUVyQzRSLEVBQWNyUCxFQUFrQkMsRUFBVyxjQUFlRSxHQUNoRSxPQUFLa1AsRUFjRSxDQUFDcFAsRUFBVXBCLEtBWEQsQ0FBQ3lFLEVBQU0vRSxFQUFNK1EsRUFBUUMsS0FDbEMsTUFBTW5ELEVBQWlCdkosRUFBc0JTLEVBQU16QyxHQUNuRCxPQUFPd08sSUFBYyxDQUNqQnBSLFNBQ0FxRixPQUNBZ00sU0FDQUMsY0FDQW5ELGlCQUNBbk0sYUFDRixHQVhLLEVBYXNCLElBRXpDLEVBT0osU0FBU3VQLEVBQWM3TSxHQUNuQixNQUF1QixXQUozQixTQUFpQkEsR0FDYixPQUFPbEUsT0FBT2tHLFVBQVVDLFNBQVNDLEtBQUtsQyxHQUFPOE0sTUFBTSxHQUFJLEVBQzNELENBRVFDLENBQVEvTSxJQUdMQSxFQUFNN0UsY0FBZ0JXLFFBQVVBLE9BQU9rUixlQUFlaE4sS0FBV2xFLE9BQU9rRyxTQUNuRixDQUVBLFNBQVNpTCxFQUFVM0csRUFBUTRHLEdBQ3ZCLE1BQU1DLEVBQVMsSUFBSzdHLEdBZ0JwQixPQWZJdUcsRUFBY3ZHLElBQVd1RyxFQUFjSyxJQUN2Q3BSLE9BQU9zRixLQUFLOEwsR0FBUXZPLFNBQVFvQixJQUNwQjhNLEVBQWNLLEVBQU9uTixJQUNmQSxLQUFPdUcsRUFJVDZHLEVBQU9wTixHQUFPa04sRUFBVTNHLEVBQU92RyxHQUFNbU4sRUFBT25OLElBSDVDakUsT0FBT3NSLE9BQU9ELEVBQVEsQ0FBRSxDQUFDcE4sR0FBTW1OLEVBQU9uTixLQU8xQ2pFLE9BQU9zUixPQUFPRCxFQUFRLENBQUUsQ0FBQ3BOLEdBQU1tTixFQUFPbk4sSUFDMUMsSUFHRG9OLENBQ1gsQ0FFQSxNQUFNRSxFQUNGbFMsWUFBWWhCLEVBQVMsQ0FBQyxHQUNsQmtCLEtBQUt5QyxLQUFPLFlBQ1p6QyxLQUFLYSxLQUFPLFlBQ1piLEtBQUtvQyxPQUFTLEtBQ2RwQyxLQUFLaVMsTUFBUSxLQUNialMsS0FBS2xCLE9BQVMsQ0FDVitCLEtBQU1iLEtBQUthLEtBQ1hxUixlQUFnQixDQUFDLEdBRXJCbFMsS0FBS2xCLE9BQVMsSUFDUGtCLEtBQUtsQixVQUNMQSxHQUVQa0IsS0FBS2EsS0FBT2IsS0FBS2xCLE9BQU8rQixLQUNwQi9CLEVBQU9vVCxnQkFDUDlJLFFBQVFDLEtBQUsseUhBQXlIckosS0FBS2EsVUFHL0liLEtBQUt3RCxRQUFVeEQsS0FBS2xCLE9BQU9vVCxlQUN2QmxTLEtBQUtsQixPQUFPcVQsYUFDWm5TLEtBQUt3RCxRQUFVeUIsRUFBYWpELEVBQWtCaEMsS0FBTSxhQUFjLENBQzlEYSxLQUFNYixLQUFLYSxTQUduQmIsS0FBS3lELFFBQVV3QixFQUFhakQsRUFBa0JoQyxLQUFNLGFBQWMsQ0FDOURhLEtBQU1iLEtBQUthLEtBQ1gyQyxRQUFTeEQsS0FBS3dELFlBQ1gsQ0FBQyxDQUNaLENBQ0E2TCxjQUFjdlEsRUFBUyxDQUFDLEdBQ3BCLE9BQU8sSUFBSWtULEVBQVVsVCxFQUN6QixDQUNBc1QsVUFBVTVPLEVBQVUsQ0FBQyxHQUdqQixNQUFNdkIsRUFBWWpDLEtBQUtxUyxTQU12QixPQUxBcFEsRUFBVXVCLFFBQVVvTyxFQUFVNVIsS0FBS3dELFFBQVNBLEdBQzVDdkIsRUFBVXdCLFFBQVV3QixFQUFhakQsRUFBa0JDLEVBQVcsYUFBYyxDQUN4RXBCLEtBQU1vQixFQUFVcEIsS0FDaEIyQyxRQUFTdkIsRUFBVXVCLFdBRWhCdkIsQ0FDWCxDQUNBb1EsT0FBT0MsRUFBaUIsQ0FBQyxHQUNyQixNQUFNclEsRUFBWSxJQUFJK1AsRUFBVU0sR0FnQmhDLE9BZkFyUSxFQUFVRyxPQUFTcEMsS0FDbkJBLEtBQUtpUyxNQUFRaFEsRUFDYkEsRUFBVXBCLEtBQU95UixFQUFlelIsS0FDMUJ5UixFQUFlelIsS0FDZm9CLEVBQVVHLE9BQU92QixLQUNuQnlSLEVBQWVKLGdCQUNmOUksUUFBUUMsS0FBSyx5SEFBeUhwSCxFQUFVcEIsVUFFcEpvQixFQUFVdUIsUUFBVXlCLEVBQWFqRCxFQUFrQkMsRUFBVyxhQUFjLENBQ3hFcEIsS0FBTW9CLEVBQVVwQixRQUVwQm9CLEVBQVV3QixRQUFVd0IsRUFBYWpELEVBQWtCQyxFQUFXLGFBQWMsQ0FDeEVwQixLQUFNb0IsRUFBVXBCLEtBQ2hCMkMsUUFBU3ZCLEVBQVV1QixXQUVoQnZCLENBQ1gsRUFHSixTQUFTc1EsRUFBZUMsRUFBV2pKLEVBQU8vRixHQUN0QyxNQUFNLEtBQUUyRCxFQUFJLEdBQUVDLEdBQU9tQyxHQUNmLGVBQUVrSixFQUFpQixPQUFNLGdCQUFFQyxFQUFrQixDQUFDLEdBQU9sUCxHQUFXLENBQUMsRUFDdkUsSUFBSTZELEVBQU8sR0FDUHNMLEdBQVksRUE0QmhCLE9BM0JBSCxFQUFVckssYUFBYWhCLEVBQU1DLEdBQUksQ0FBQzlCLEVBQU1pRCxFQUFLbkcsRUFBUW9HLEtBQ2pELElBQUl0QixFQUNKLE1BQU0wTCxFQUFpQkYsYUFBeUQsRUFBU0EsRUFBZ0JwTixFQUFLN0MsS0FBSzVCLE1BQy9HK1IsR0FDSXROLEVBQUt1TixVQUFZRixJQUNqQnRMLEdBQVFvTCxFQUNSRSxHQUFZLEdBRVp2USxJQUNBaUYsR0FBUXVMLEVBQWUsQ0FDbkJ0TixPQUNBaUQsTUFDQW5HLFNBQ0FvRyxRQUNBZSxZQUlIakUsRUFBS3dOLFFBQ1Z6TCxHQUF5RSxRQUFoRUgsRUFBSzVCLGFBQW1DLEVBQVNBLEVBQUsrQixZQUF5QixJQUFQSCxPQUFnQixFQUFTQSxFQUFHdUssTUFBTXJKLEtBQUtDLElBQUlsQixFQUFNb0IsR0FBT0EsRUFBS25CLEVBQUttQixHQUNuSm9LLEdBQVksR0FFUHJOLEVBQUt1TixVQUFZRixJQUN0QnRMLEdBQVFvTCxFQUNSRSxHQUFZLEVBQ2hCLElBRUd0TCxDQUNYLENBRUEsU0FBUzBMLEVBQTZCdFQsR0FDbEMsT0FBT2dCLE9BQU9DLFlBQVlELE9BQ3JCRSxRQUFRbEIsRUFBT3lFLE9BQ2YxQixRQUFPLEVBQUUsQ0FBRThDLEtBQVVBLEVBQUtxQyxLQUFLZ0IsU0FDL0IvSCxLQUFJLEVBQUVDLEVBQU15RSxLQUFVLENBQUN6RSxFQUFNeUUsRUFBS3FDLEtBQUtnQixVQUNoRCxDQUVBLE1BQU1xSyxFQUEwQmhCLEVBQVVpQixPQUFPLENBQzdDcFMsS0FBTSwwQkFDTnFRLHdCQUNJLE1BQU8sQ0FDSCxJQUFJLEtBQU8sQ0FDUHhNLElBQUssSUFBSSxLQUFVLDJCQUNuQjNFLE1BQU8sQ0FDSG1ULHdCQUF5QixLQUNyQixNQUFNLE9BQUVqVCxHQUFXRCxNQUNiLE1BQUVqQixFQUFLLE9BQUVVLEdBQVdRLEdBQ3BCLElBQUVmLEVBQUcsVUFBRUQsR0FBY0YsR0FDckIsT0FBRW9VLEdBQVdsVSxFQUtuQixPQUFPc1QsRUFBZXJULEVBRFIsQ0FBRWlJLEtBSEhpQixLQUFLcUUsT0FBTzBHLEVBQU92UyxLQUFJMkksR0FBU0EsRUFBTTlCLE1BQU1jLE9BR25DbkIsR0FGWGdCLEtBQUtDLE9BQU84SyxFQUFPdlMsS0FBSTJJLEdBQVNBLEVBQU02SixJQUFJN0ssUUFHbkIsQ0FDOUJtSyxnQkFIb0JLLEVBQTZCdFQsSUFJbkQsS0FLdEIsSUFxR0osU0FBUzRULEVBQWVDLEVBQVNDLEVBQVMvUCxFQUFVLENBQUVnUSxRQUFRLElBQzFELE1BQU16TixFQUFPdEYsT0FBT3NGLEtBQUt3TixHQUN6QixPQUFLeE4sRUFBS0MsUUFHSEQsRUFBS2xFLE9BQU02QyxHQUNWbEIsRUFBUWdRLE9BQ0RELEVBQVE3TyxLQUFTNE8sRUFBUTVPLEdBRWhDZ0MsRUFBUzZNLEVBQVE3TyxJQUNWNk8sRUFBUTdPLEdBQUsrTyxLQUFLSCxFQUFRNU8sSUFFOUI2TyxFQUFRN08sS0FBUzRPLEVBQVE1TyxJQUV4QyxDQUVBLFNBQVNnUCxFQUFjdk4sRUFBTzFELEVBQU1tQixFQUFhLENBQUMsR0FDOUMsT0FBT3VDLEVBQU1ZLE1BQUt6QyxHQUNQQSxFQUFLN0IsT0FBU0EsR0FBUTRRLEVBQWUvTyxFQUFLUyxNQUFPbkIsSUFFaEUsQ0FDQSxTQUFTK1AsRUFBWXhOLEVBQU8xRCxFQUFNbUIsRUFBYSxDQUFDLEdBQzVDLFFBQVM4UCxFQUFjdk4sRUFBTzFELEVBQU1tQixFQUN4QyxDQUNBLFNBQVNnUSxFQUFhQyxFQUFNcFIsRUFBTW1CLEVBQWEsQ0FBQyxHQUM1QyxJQUFLaVEsSUFBU3BSLEVBQ1YsT0FFSixJQUFJdUssRUFBUTZHLEVBQUt6UixPQUFPMFIsV0FBV0QsRUFBS3ZMLGNBSXhDLEdBSEl1TCxFQUFLdkwsZUFBaUIwRSxFQUFNK0csUUFBMkIsSUFBakIvRyxFQUFNK0csU0FDNUMvRyxFQUFRNkcsRUFBS3pSLE9BQU80UixZQUFZSCxFQUFLdkwsZ0JBRXBDMEUsRUFBTTFILEtBQ1AsT0FFSixNQUFNeUMsRUFBTzJMLEVBQWMsSUFBSTFHLEVBQU0xSCxLQUFLYSxPQUFRMUQsRUFBTW1CLEdBQ3hELElBQUttRSxFQUNELE9BRUosSUFBSWtNLEVBQWFqSCxFQUFNeEUsTUFDbkIwTCxFQUFXTCxFQUFLN0csUUFBVUEsRUFBTStHLE9BQ2hDSSxFQUFXRixFQUFhLEVBQ3hCRyxFQUFTRixFQUFXbEgsRUFBTTFILEtBQUsrTyxTQUVuQyxJQURBWCxFQUFjLElBQUkxRyxFQUFNMUgsS0FBS2EsT0FBUTFELEVBQU1tQixHQUNwQ3FRLEVBQWEsR0FBS2xNLEVBQUt1TSxRQUFRVCxFQUFLelIsT0FBTzZQLE1BQU1nQyxFQUFhLEdBQUc5TixRQUNwRThOLEdBQWMsRUFDZEMsR0FBWUwsRUFBS3pSLE9BQU82UCxNQUFNZ0MsR0FBWUksU0FFOUMsS0FBT0YsRUFBV04sRUFBS3pSLE9BQU9tUyxZQUN2QlosRUFBWSxJQUFJRSxFQUFLelIsT0FBTzZQLE1BQU1rQyxHQUFVaE8sT0FBUTFELEVBQU1tQixJQUM3RHdRLEdBQVVQLEVBQUt6UixPQUFPNlAsTUFBTWtDLEdBQVVFLFNBQ3RDRixHQUFZLEVBRWhCLE1BQU8sQ0FDSGhOLEtBQU0rTSxFQUNOOU0sR0FBSWdOLEVBRVosQ0FFQSxTQUFTSSxFQUFZdlEsRUFBWXhFLEdBQzdCLEdBQTBCLGlCQUFmd0UsRUFBeUIsQ0FDaEMsSUFBS3hFLEVBQU8wRyxNQUFNbEMsR0FDZCxNQUFNRSxNQUFNLGdDQUFnQ0YsOENBRWhELE9BQU94RSxFQUFPMEcsTUFBTWxDLEVBQ3hCLENBQ0EsT0FBT0EsQ0FDWCxDQStDQSxTQUFTd1EsRUFBTzlQLEVBQVEsRUFBRzhILEVBQU0sRUFBR3BFLEVBQU0sR0FDdEMsT0FBT0QsS0FBS3FFLElBQUlyRSxLQUFLQyxJQUFJMUQsRUFBTzhILEdBQU1wRSxFQUMxQyxDQUVBLFNBQVNxTSxFQUFxQnhWLEVBQUt5VixFQUFXLE1BQzFDLElBQUtBLEVBQ0QsT0FBTyxLQUVYLE1BQU1DLEVBQW1CLGFBQWtCMVYsR0FDckMyVixFQUFpQixXQUFnQjNWLEdBQ3ZDLEdBQWlCLFVBQWJ5VixJQUFxQyxJQUFiQSxFQUN4QixPQUFPQyxFQUVYLEdBQWlCLFFBQWJELEVBQ0EsT0FBT0UsRUFFWCxNQUFNQyxFQUFTRixFQUFpQnpOLEtBQzFCNE4sRUFBU0YsRUFBZXpOLEdBQzlCLE1BQWlCLFFBQWJ1TixFQUNPLFlBQXFCelYsRUFBS3VWLEVBQU8sRUFBR0ssRUFBUUMsR0FBU04sRUFBT3ZWLEVBQUk4TSxRQUFRVSxLQUFNb0ksRUFBUUMsSUFFMUYsWUFBcUI3VixFQUFLdVYsRUFBT0UsRUFBVUcsRUFBUUMsR0FBU04sRUFBT0UsRUFBVUcsRUFBUUMsR0FDaEcsQ0FFQSxTQUFTQyxJQUNMLE1BQU8sQ0FDSCxpQkFDQSxtQkFDQSxpQkFDQSxPQUNBLFNBQ0EsUUFDRjdMLFNBQVM4TCxVQUFVQyxXQUViRCxVQUFVRSxVQUFVaE0sU0FBUyxRQUFVLGVBQWdCaU0sUUFDbkUsQ0EwREEsU0FBU0MsRUFBa0IxUSxHQUV2QixNQUFNMlEsRUFBZSxTQUFTM1EsV0FDOUIsT0FBTyxJQUFJdUcsT0FBT3FLLFdBQVlDLGdCQUFnQkYsRUFBYyxhQUFhRyxJQUM3RSxDQUVBLFNBQVNDLEVBQXNCMUosRUFBU3ZNLEVBQVErRCxHQU01QyxHQUxBQSxFQUFVLENBQ05pTyxPQUFPLEVBQ1BrRSxhQUFjLENBQUMsS0FDWm5TLEdBRWdCLGlCQUFad0ksR0FBb0MsT0FBWkEsRUFDL0IsSUFDSSxPQUFJMUYsTUFBTUMsUUFBUXlGLEdBQ1AsZUFBbUJBLEVBQVFwTCxLQUFJMEQsR0FBUTdFLEVBQU9tVyxhQUFhdFIsTUFFL0Q3RSxFQUFPbVcsYUFBYTVKLEVBSy9CLENBSEEsTUFBTzZKLEdBRUgsT0FEQXpNLFFBQVFDLEtBQUssa0NBQW1DLGdCQUFpQjJDLEVBQVMsU0FBVTZKLEdBQzdFSCxFQUFzQixHQUFJalcsRUFBUStELEVBQzdDLENBRUosR0FBdUIsaUJBQVp3SSxFQUFzQixDQUM3QixNQUFNOEosRUFBUyxnQkFBcUJyVyxHQUNwQyxPQUFPK0QsRUFBUWlPLE1BQ1RxRSxFQUFPQyxXQUFXVixFQUFrQnJKLEdBQVV4SSxFQUFRbVMsY0FBYzNKLFFBQ3BFOEosRUFBT0UsTUFBTVgsRUFBa0JySixHQUFVeEksRUFBUW1TLGFBQzNELENBQ0EsT0FBT0QsRUFBc0IsR0FBSWpXLEVBQVErRCxFQUM3QyxDQW1HQSxTQUFTeVMsSUFDTCxNQUE0QixvQkFBZGhCLFdBQ1IsTUFBTXhCLEtBQUt3QixVQUFVQyxTQUUvQixDQThFQSxTQUFTZ0IsRUFBYW5YLEVBQU9vWCxFQUFZdlMsRUFBYSxDQUFDLEdBQ25ELE1BQU0sS0FBRXVELEVBQUksR0FBRUMsRUFBRSxNQUFFZ1AsR0FBVXJYLEVBQU1FLFVBQzVCd0QsRUFBTzBULEVBQ1BuUyxFQUFZbVMsRUFBWXBYLEVBQU1VLFFBQzlCLEtBQ0E0VyxFQUFhLEdBQ25CdFgsRUFBTUcsSUFBSWlKLGFBQWFoQixFQUFNQyxHQUFJLENBQUM5QixFQUFNaUQsS0FDcEMsR0FBSWpELEVBQUt3TixPQUNMLE9BRUosTUFBTXdELEVBQWVsTyxLQUFLQyxJQUFJbEIsRUFBTW9CLEdBQzlCZ08sRUFBYW5PLEtBQUtxRSxJQUFJckYsRUFBSW1CLEVBQU1qRCxFQUFLK08sVUFDM0NnQyxFQUFXMVUsS0FBSyxDQUNaMkQsT0FDQTZCLEtBQU1tUCxFQUNObFAsR0FBSW1QLEdBQ04sSUFFTixNQUFNQyxFQUFpQnBQLEVBQUtELEVBQ3RCc1AsRUFBb0JKLEVBQ3JCN1QsUUFBT2tVLElBQ0hqVSxHQUdFQSxFQUFLNUIsT0FBUzZWLEVBQVVwUixLQUFLN0MsS0FBSzVCLE9BRXhDMkIsUUFBT2tVLEdBQWFyRCxFQUFlcUQsRUFBVXBSLEtBQUtQLE1BQU9uQixFQUFZLENBQUU0UCxRQUFRLE1BQ3BGLE9BQUk0QyxJQUNTSyxFQUFrQnpRLE9BRWpCeVEsRUFDVGxTLFFBQU8sQ0FBQ29TLEVBQUtELElBQWNDLEVBQU1ELEVBQVV0UCxHQUFLc1AsRUFBVXZQLE1BQU0sSUFDckRxUCxDQUNwQixDQXdCQSxTQUFTSSxFQUF3Qi9WLEVBQU1wQixHQUNuQyxPQUFJQSxFQUFPeUUsTUFBTXJELEdBQ04sT0FFUHBCLEVBQU8wRyxNQUFNdEYsR0FDTixPQUVKLElBQ1gsQ0FPQSxTQUFTZ1csRUFBWUMsRUFBS0MsR0FDdEIsTUFBTWhYLEVBQStCLGlCQUFoQmdYLEVBQ2YsQ0FBQ0EsR0FDREEsRUFDTixPQUFPdFcsT0FDRnNGLEtBQUsrUSxHQUNMdlMsUUFBTyxDQUFDeVMsRUFBUUMsS0FDWmxYLEVBQU1vSixTQUFTOE4sS0FDaEJELEVBQU9DLEdBQVFILEVBQUlHLElBRWhCRCxJQUNSLENBQUMsRUFDUixDQXdFQSxTQUFTRSxFQUFlbEwsRUFBU3ZNLEVBQVFrVyxFQUFlLENBQUMsR0FDckQsT0FBT0QsRUFBc0IxSixFQUFTdk0sRUFBUSxDQUFFZ1MsT0FBTyxFQUFPa0UsZ0JBQ2xFLENBWUEsU0FBU3dCLEVBQWtCcFksRUFBT29YLEdBQzlCLE1BQU0xVCxFQUFPK1IsRUFBWTJCLEVBQVlwWCxFQUFNVSxTQUNyQyxLQUFFMEgsRUFBSSxHQUFFQyxFQUFFLE1BQUVnUCxHQUFVclgsRUFBTUUsVUFDNUJrSCxFQUFRLEdBQ1ZpUSxHQUNJclgsRUFBTUksYUFDTmdILEVBQU14RSxRQUFRNUMsRUFBTUksYUFFeEJnSCxFQUFNeEUsUUFBUTVDLEVBQU1FLFVBQVVtWSxNQUFNalIsVUFHcENwSCxFQUFNRyxJQUFJaUosYUFBYWhCLEVBQU1DLEdBQUk5QixJQUM3QmEsRUFBTXhFLFFBQVEyRCxFQUFLYSxNQUFNLElBR2pDLE1BQU00QixFQUFPNUIsRUFBTVksTUFBS3NRLEdBQVlBLEVBQVM1VSxLQUFLNUIsT0FBUzRCLEVBQUs1QixPQUNoRSxPQUFLa0gsRUFHRSxJQUFLQSxFQUFLaEQsT0FGTixDQUFDLENBR2hCLENBeUdBLFNBQVN1UyxFQUFzQnpVLEVBQXFCMFUsRUFBVTNULEdBQzFELE9BQU9uRCxPQUFPQyxZQUFZRCxPQUNyQkUsUUFBUWlELEdBQ1JwQixRQUFPLEVBQUUzQixNQUNWLE1BQU1vTixFQUFxQnBMLEVBQW9Ca0UsTUFBS3pDLEdBQ3pDQSxFQUFLN0IsT0FBUzhVLEdBQVlqVCxFQUFLekQsT0FBU0EsSUFFbkQsUUFBS29OLEdBR0VBLEVBQW1CcEssVUFBVVQsV0FBVyxJQUV2RCxDQVdBLFNBQVNvVSxHQUFZelksRUFBT3FPLEdBQ3hCLE1BQU1qSCxFQUFRcEgsRUFBTUksYUFDWkosRUFBTUUsVUFBVW1VLElBQUk5SyxjQUFnQnZKLEVBQU1FLFVBQVV3SSxNQUFNdEIsUUFDbEUsR0FBSUEsRUFBTyxDQUNQLE1BQU1zUixFQUFnQnRSLEVBQU0zRCxRQUFPdUYsR0FBUXFGLGFBQXlELEVBQVNBLEVBQWdCakUsU0FBU3BCLEVBQUt0RixLQUFLNUIsUUFDaEo5QixFQUFNYSxHQUFHNFgsWUFBWUMsRUFDekIsQ0FDSixDQXFLQSxTQUFTQyxHQUFlQyxHQUNwQixPQUFRMVksR0FmWixTQUFvQzRVLEVBQU04RCxHQUN0QyxJQUFLLElBQUlDLEVBQUkvRCxFQUFLZ0UsTUFBT0QsRUFBSSxFQUFHQSxHQUFLLEVBQUcsQ0FDcEMsTUFBTXRTLEVBQU91TyxFQUFLdk8sS0FBS3NTLEdBQ3ZCLEdBQUlELEVBQVVyUyxHQUNWLE1BQU8sQ0FDSGlELElBQUtxUCxFQUFJLEVBQUkvRCxFQUFLaUUsT0FBT0YsR0FBSyxFQUM5QjVLLE1BQU82RyxFQUFLN0csTUFBTTRLLEdBQ2xCQyxNQUFPRCxFQUNQdFMsT0FHWixDQUNKLENBRzBCeVMsQ0FBMkI5WSxFQUFVd0ksTUFBT2tRLEVBQ3RFLENBRUEsU0FBU0ssR0FBT25YLEVBQU15QixHQUNsQixNQUFNLGVBQUVJLEdBQW1CTCxFQUFnQkMsR0FDckNMLEVBQVlTLEVBQWVxRSxNQUFLekMsR0FBUUEsRUFBS3pELE9BQVNBLElBQzVELElBQUtvQixFQUNELE9BQU8sRUFFWCxNQUtNeUwsRUFBUXpJLEVBQWFqRCxFQUFrQkMsRUFBVyxRQUx4QyxDQUNacEIsS0FBTW9CLEVBQVVwQixLQUNoQjJDLFFBQVN2QixFQUFVdUIsUUFDbkJDLFFBQVN4QixFQUFVd0IsV0FHdkIsTUFBcUIsaUJBQVZpSyxHQUdKQSxFQUFNdUssTUFBTSxLQUFLOU8sU0FBUyxPQUNyQyxDQUVBLE1BQU0rTyxHQUFvQixDQUFDdFksRUFBSXVZLEtBQzNCLE1BQU1DLEVBQU9WLElBQWVwUyxHQUFRQSxFQUFLN0MsT0FBUzBWLEdBQXJDVCxDQUErQzlYLEVBQUdYLFdBQy9ELElBQUttWixFQUNELE9BQU8sRUFFWCxNQUFNTixFQUFTbFksRUFBR1YsSUFBSXdJLFFBQVFVLEtBQUtDLElBQUksRUFBRytQLEVBQUs3UCxJQUFNLElBQUl1UCxPQUFPTSxFQUFLUCxPQUNyRSxRQUFlL1YsSUFBWGdXLEVBQ0EsT0FBTyxFQUVYLE1BQU1qUSxFQUFhakksRUFBR1YsSUFBSW1aLE9BQU9QLEdBR2pDLE9BRnlCTSxFQUFLOVMsS0FBSzdDLFFBQVVvRixhQUErQyxFQUFTQSxFQUFXcEYsU0FDekcsUUFBUTdDLEVBQUdWLElBQUtrWixFQUFLN1AsT0FJNUIzSSxFQUFHZ0YsS0FBS3dULEVBQUs3UCxNQUNOLEVBQUksRUFFVCtQLEdBQW1CLENBQUMxWSxFQUFJdVksS0FDMUIsTUFBTUMsRUFBT1YsSUFBZXBTLEdBQVFBLEVBQUs3QyxPQUFTMFYsR0FBckNULENBQStDOVgsRUFBR1gsV0FDL0QsSUFBS21aLEVBQ0QsT0FBTyxFQUVYLE1BQU1HLEVBQVEzWSxFQUFHVixJQUFJd0ksUUFBUTBRLEVBQUtwTCxPQUFPdUwsTUFBTUgsRUFBS1AsT0FDcEQsUUFBYy9WLElBQVZ5VyxFQUNBLE9BQU8sRUFFWCxNQUFNelEsRUFBWWxJLEVBQUdWLElBQUltWixPQUFPRSxHQUdoQyxPQUZ3QkgsRUFBSzlTLEtBQUs3QyxRQUFVcUYsYUFBNkMsRUFBU0EsRUFBVXJGLFNBQ3JHLFFBQVE3QyxFQUFHVixJQUFLcVosS0FJdkIzWSxFQUFHZ0YsS0FBSzJULElBQ0QsRUFBSSxFQStDZixTQUFTQyxHQUFhelosRUFBT29YLEVBQVl2UyxFQUFhLENBQUMsR0FDbkQsTUFBTSxNQUFFd1MsRUFBSyxPQUFFakQsR0FBV3BVLEVBQU1FLFVBQzFCd0QsRUFBTzBULEVBQ1AzQixFQUFZMkIsRUFBWXBYLEVBQU1VLFFBQzlCLEtBQ04sR0FBSTJXLEVBQ0EsU0FBVXJYLEVBQU1JLGFBQWVKLEVBQU1FLFVBQVV3SSxNQUFNdEIsU0FDaEQzRCxRQUFPdUYsSUFDSHRGLEdBR0VBLEVBQUs1QixPQUFTa0gsRUFBS3RGLEtBQUs1QixPQUU5QmtHLE1BQUtnQixHQUFRc0wsRUFBZXRMLEVBQUtoRCxNQUFPbkIsRUFBWSxDQUFFNFAsUUFBUSxNQUV2RSxJQUFJZ0QsRUFBaUIsRUFDckIsTUFBTWlDLEVBQWEsR0FtQm5CLEdBbEJBdEYsRUFBTzdQLFNBQVEsRUFBR21FLFFBQU8yTCxVQUNyQixNQUFNak0sRUFBT00sRUFBTWMsSUFDYm5CLEVBQUtnTSxFQUFJN0ssSUFDZnhKLEVBQU1HLElBQUlpSixhQUFhaEIsRUFBTUMsR0FBSSxDQUFDOUIsRUFBTWlELEtBQ3BDLElBQUtqRCxFQUFLd04sU0FBV3hOLEVBQUthLE1BQU1ILE9BQzVCLE9BRUosTUFBTXNRLEVBQWVsTyxLQUFLQyxJQUFJbEIsRUFBTW9CLEdBQzlCZ08sRUFBYW5PLEtBQUtxRSxJQUFJckYsRUFBSW1CLEVBQU1qRCxFQUFLK08sVUFFM0NtQyxHQURjRCxFQUFhRCxFQUUzQm1DLEVBQVc5VyxRQUFRMkQsRUFBS2EsTUFBTXZGLEtBQUltSCxJQUFRLENBQ3RDQSxPQUNBWixLQUFNbVAsRUFDTmxQLEdBQUltUCxNQUNKLEdBQ04sSUFFaUIsSUFBbkJDLEVBQ0EsT0FBTyxFQUdYLE1BQU1rQyxFQUFlRCxFQUNoQmpXLFFBQU9tVyxJQUNIbFcsR0FHRUEsRUFBSzVCLE9BQVM4WCxFQUFVNVEsS0FBS3RGLEtBQUs1QixPQUV4QzJCLFFBQU9tVyxHQUFhdEYsRUFBZXNGLEVBQVU1USxLQUFLaEQsTUFBT25CLEVBQVksQ0FBRTRQLFFBQVEsTUFDL0VqUCxRQUFPLENBQUNvUyxFQUFLZ0MsSUFBY2hDLEVBQU1nQyxFQUFVdlIsR0FBS3VSLEVBQVV4UixNQUFNLEdBRy9EeVIsRUFBZ0JILEVBQ2pCalcsUUFBT21XLElBQ0hsVyxHQUdFa1csRUFBVTVRLEtBQUt0RixPQUFTQSxHQUN4QmtXLEVBQVU1USxLQUFLdEYsS0FBSytMLFNBQVMvTCxLQUVuQzhCLFFBQU8sQ0FBQ29TLEVBQUtnQyxJQUFjaEMsRUFBTWdDLEVBQVV2UixHQUFLdVIsRUFBVXhSLE1BQU0sR0FNckUsT0FIY3VSLEVBQWUsRUFDdkJBLEVBQWVFLEVBQ2ZGLElBQ1VsQyxDQUNwQixDQTJKQSxJQUFJcFcsR0FBd0JLLE9BQU9vWSxPQUFPLENBQ3hDQyxVQUFXLEtBQ1hDLEtBcHpDVyxJQUFNLEVBQUc5WSxTQUFRTSxXQUMxQnlZLHVCQUFzQixLQUNsQixJQUFJOVIsRUFDQ2pILEVBQU9nWixjQUNSMVksRUFBS3VLLElBQUlpTyxPQUd3RSxRQUFoRjdSLEVBQWdCLE9BQVhnRSxhQUE4QixJQUFYQSxZQUFvQixFQUFTQSxPQUFPZ08sc0JBQW1DLElBQVBoUyxHQUF5QkEsRUFBR2lTLGtCQUN6SCxLQUVHLEdBMnlDVEMsYUF4eUNtQixDQUFDQyxHQUFhLElBQVUsRUFBR2paLGNBQ3JDQSxFQUFTa1osV0FBVyxHQUFJRCxHQXd5Q2pDRSxXQXJ5Q2lCLElBQU0sRUFBR3hhLFFBQU9hLEtBQUlzQixlQUNuQyxNQUFNLFVBQUVqQyxHQUFjVyxHQUNoQixPQUFFdVQsR0FBV2xVLEVBQ25CLE9BQUtpQyxJQUdMaVMsRUFBTzdQLFNBQVEsRUFBR21FLFFBQU8yTCxVQUNyQnJVLEVBQU1HLElBQUlpSixhQUFhVixFQUFNYyxJQUFLNkssRUFBSTdLLEtBQUssQ0FBQ2pELEVBQU1pRCxLQUM5QyxHQUFJakQsRUFBSzdDLEtBQUtxUSxPQUNWLE9BRUosTUFBTSxJQUFFNVQsRUFBRyxRQUFFZ08sR0FBWXROLEVBQ25CNFosRUFBY3RhLEVBQUl3SSxRQUFRd0YsRUFBUXRNLElBQUkySCxJQUN0Q2tSLEVBQVl2YSxFQUFJd0ksUUFBUXdGLEVBQVF0TSxJQUFJMkgsRUFBTWpELEVBQUsrTyxXQUMvQ3FDLEVBQVk4QyxFQUFZRSxXQUFXRCxHQUN6QyxJQUFLL0MsRUFDRCxPQUVKLE1BQU1pRCxHQUFrQixRQUFXakQsR0FDbkMsR0FBSXBSLEVBQUs3QyxLQUFLNkosWUFBYSxDQUN2QixNQUFNLFlBQUVzTixHQUFnQkosRUFBWXBYLE9BQU95WCxlQUFlTCxFQUFZaFIsU0FDdEU1SSxFQUFHa2EsY0FBY3BELEVBQVUxSixNQUFPNE0sRUFDdEMsRUFDSUQsR0FBdUMsSUFBcEJBLElBQ25CL1osRUFBR21hLEtBQUtyRCxFQUFXaUQsRUFDdkIsR0FDRixLQUVDLEVBQUksRUEwd0NiN1ksUUF2d0Nja1osR0FBTWphLEdBQ1hpYSxFQUFHamEsR0F1d0Naa2Esb0JBcHdDMEIsSUFBTSxFQUFHbGIsUUFBT21DLGVBQ2pDLFFBQXNCbkMsRUFBT21DLEdBb3dDdENnWixXQWp3Q2lCL0QsR0FBYyxFQUFHdlcsS0FBSWIsUUFBT21DLGVBQzNDLE1BQU11QixFQUFPdUIsRUFBWW1TLEVBQVlwWCxFQUFNVSxRQUNyQ29VLEVBQU9qVSxFQUFHWCxVQUFVa2IsUUFDMUIsSUFBSyxJQUFJdEMsRUFBUWhFLEVBQUtnRSxNQUFPQSxFQUFRLEVBQUdBLEdBQVMsRUFFN0MsR0FEYWhFLEVBQUt2TyxLQUFLdVMsR0FDZHBWLE9BQVNBLEVBQU0sQ0FDcEIsR0FBSXZCLEVBQVUsQ0FDVixNQUFNaUcsRUFBTzBNLEVBQUtpRSxPQUFPRCxHQUNuQnpRLEVBQUt5TSxFQUFLMEUsTUFBTVYsR0FDdEJqWSxFQUFHd2EsT0FBT2pULEVBQU1DLEdBQUlpVCxnQkFDeEIsQ0FDQSxPQUFPLENBQ1gsQ0FFSixPQUFPLENBQUssRUFvdkNkQyxZQWp2Q2tCL1EsR0FBUyxFQUFHM0osS0FBSXNCLGVBQ2hDLE1BQU0sS0FBRWlHLEVBQUksR0FBRUMsR0FBT21DLEVBSXJCLE9BSElySSxHQUNBdEIsRUFBR3dhLE9BQU9qVCxFQUFNQyxJQUViLENBQUksRUE2dUNibVQsZ0JBMXVDc0IsSUFBTSxFQUFHeGIsUUFBT21DLGVBQzdCLFFBQWtCbkMsRUFBT21DLEdBMHVDbENzWixNQXZ1Q1ksSUFBTSxFQUFHcGEsY0FDWkEsRUFBU3FhLGlCQUFpQixTQXV1Q25DQyxTQXB1Q2UsSUFBTSxFQUFHM2IsUUFBT21DLGVBQ3RCLFFBQVduQyxFQUFPbUMsR0FvdUMzQnlaLGdCQXZwQ3NCLENBQUN4RSxFQUFZdlMsRUFBYSxDQUFDLElBQU0sRUFBR2hFLEtBQUliLFFBQU9tQyxlQUNuRSxNQUFNdUIsRUFBTytSLEVBQVkyQixFQUFZcFgsRUFBTVUsU0FDckMsSUFBRVAsRUFBRyxVQUFFRCxHQUFjVyxHQUNyQixNQUFFNkgsRUFBSyxLQUFFTixFQUFJLEdBQUVDLEdBQU9uSSxFQUM1QixHQUFJaUMsRUFBVSxDQUNWLE1BQU1xSSxFQUFRcUssRUFBYW5NLEVBQU9oRixFQUFNbUIsR0FDeEMsR0FBSTJGLEdBQVNBLEVBQU1wQyxNQUFRQSxHQUFRb0MsRUFBTW5DLElBQU1BLEVBQUksQ0FDL0MsTUFBTXdULEVBQWUsWUFBcUIxYixFQUFLcUssRUFBTXBDLEtBQU1vQyxFQUFNbkMsSUFDakV4SCxFQUFHaWIsYUFBYUQsRUFDcEIsQ0FDSixDQUNBLE9BQU8sQ0FBSSxFQTZvQ2JFLE1BMW9DWTFhLEdBQVlMLElBQ3RCLE1BQU15RSxFQUE0QixtQkFBYnBFLEVBQ2ZBLEVBQVNMLEdBQ1RLLEVBQ04sSUFBSyxJQUFJd1gsRUFBSSxFQUFHQSxFQUFJcFQsRUFBTXdCLE9BQVE0UixHQUFLLEVBQ25DLEdBQUlwVCxFQUFNb1QsR0FBRzdYLEdBQ1QsT0FBTyxFQUdmLE9BQU8sQ0FBSyxFQWtvQ2RnYixNQXZrQ1ksQ0FBQ3BHLEVBQVcsS0FBTW5SLEVBQVUsQ0FBQyxJQUFNLEVBQUd2RCxTQUFRTSxPQUFNWCxLQUFJc0IsZUFDbEVzQyxFQUFVLENBQ042VyxnQkFBZ0IsS0FDYjdXLEdBRVAsTUFBTXdYLEVBQWUsS0FHYmhHLEtBQ0F6VSxFQUFLdUssSUFBSWlRLFFBSWIvQix1QkFBc0IsS0FDYi9ZLEVBQU9nWixjQUNSMVksRUFBS3dhLFNBQ0R2WCxhQUF5QyxFQUFTQSxFQUFRNlcsaUJBQzFEcGEsRUFBT0csU0FBU2lhLGlCQUV4QixHQUNGLEVBRU4sR0FBSzlaLEVBQUswYSxZQUEyQixPQUFidEcsSUFBbUMsSUFBYkEsRUFDMUMsT0FBTyxFQUdYLEdBQUl6VCxHQUF5QixPQUFieVQsS0ExRXBCLFNBQWtCaFEsR0FDZCxPQUFRQSxHQUNnQixpQkFBVkEsSUFDTjJCLE1BQU1DLFFBQVE1QixLQVgxQixTQUFpQkEsR0FDYixJQUFJdUMsRUFDSixNQUFzRyxXQUFwRSxRQUE1QkEsRUFBS3ZDLEVBQU03RSxtQkFBZ0MsSUFBUG9ILE9BQWdCLEVBQVNBLEVBQUdOLFdBQVdzVSxVQUFVLEVBQUcsR0FJbEcsQ0FNWUMsQ0FBUXhXLEVBQ3BCLENBR1d5VyxDQURjelcsRUFtRWlDMUUsRUFBT2xCLE1BQU1FLFlBbEV6QzBGLGFBQWlCLE1Bb0V2QyxPQURBcVcsS0FDTyxFQXJFZixJQUF5QnJXLEVBeUVyQixNQUFNMUYsRUFBWXlWLEVBQXFCOVUsRUFBR1YsSUFBS3lWLElBQWExVSxFQUFPbEIsTUFBTUUsVUFDbkVvYyxFQUFrQnBiLEVBQU9sQixNQUFNRSxVQUFVcWMsR0FBR3JjLEdBWWxELE9BWElpQyxJQUNLbWEsR0FDRHpiLEVBQUdpYixhQUFhNWIsR0FJaEJvYyxHQUFtQnpiLEVBQUdULGFBQ3RCUyxFQUFHbUMsZUFBZW5DLEVBQUdULGFBRXpCNmIsTUFFRyxDQUFJLEVBMmhDYjFYLFFBeGhDYyxDQUFDa0IsRUFBT3dWLElBQU9qYSxHQUNwQnlFLEVBQU0zQyxPQUFNLENBQUN5QyxFQUFNa0UsSUFBVXdSLEVBQUcxVixFQUFNLElBQUt2RSxFQUFPeUksWUF3aEMzRCtTLGNBcmhDb0IsQ0FBQzVXLEVBQU9uQixJQUFZLEVBQUc1RCxLQUFJUSxjQUN0Q0EsRUFBU29iLGdCQUFnQixDQUFFclUsS0FBTXZILEVBQUdYLFVBQVVrSSxLQUFNQyxHQUFJeEgsRUFBR1gsVUFBVW1JLElBQU16QyxFQUFPbkIsR0FxaEMzRmdZLGdCQTE5QnNCLENBQUM3RyxFQUFVaFEsRUFBT25CLElBQVksRUFBRzVELEtBQUlzQixXQUFVakIsYUFDbkUsR0FBSWlCLEVBQVUsQ0FDVnNDLEVBQVUsQ0FDTm1TLGFBQWMsQ0FBQyxFQUNmOEYsaUJBQWlCLEtBQ2RqWSxHQUVQLE1BQU13SSxFQUFVMEosRUFBc0IvUSxFQUFPMUUsRUFBT1IsT0FBUSxDQUN4RGtXLGFBQWMsQ0FDVitGLG1CQUFvQixVQUNqQmxZLEVBQVFtUyxnQkFJbkIsR0FBMkIsT0FBdkIzSixFQUFRcEYsV0FDUixPQUFPLEVBRVgsSUFBSSxLQUFFTyxFQUFJLEdBQUVDLEdBQTJCLGlCQUFidU4sRUFDcEIsQ0FBRXhOLEtBQU13TixFQUFVdk4sR0FBSXVOLEdBQ3RCQSxFQUNGZ0gsR0FBb0IsRUFDcEJDLEdBQXFCLEVBbUJ6QixJQWxCeUI1UCxFQXhCUHBGLFdBQVdpVixXQUFXLEtBeUJsQzdQLEVBQ0EsQ0FBQ0EsSUFDRDFJLFNBQVFnQyxJQUVWQSxFQUFLd1csUUFDTEgsSUFBb0JBLEdBQ2RyVyxFQUFLd04sUUFBZ0MsSUFBdEJ4TixFQUFLYSxNQUFNSCxPQUVoQzRWLElBQXFCQSxHQUNmdFcsRUFBS3VOLE9BQ0EsSUFPWDFMLElBQVNDLEdBQU13VSxFQUFvQixDQUNuQyxNQUFNLE9BQUV4WixHQUFXeEMsRUFBR1YsSUFBSXdJLFFBQVFQLEdBQ1QvRSxFQUFPa0ssY0FDeEJsSyxFQUFPSyxLQUFLa0YsS0FBS0MsT0FDakJ4RixFQUFPbVMsYUFFWHBOLEdBQVEsRUFDUkMsR0FBTSxFQUVkLENBR0l1VSxFQUNBL2IsRUFBR21jLFdBQVdwWCxFQUFPd0MsRUFBTUMsR0FHM0J4SCxFQUFHc0osWUFBWS9CLEVBQU1DLEVBQUk0RSxHQUd6QnhJLEVBQVFpWSxpQkFqRnBCLFNBQWlDN2IsRUFBSW9jLEVBQVVDLEdBQzNDLE1BQU1DLEVBQU90YyxFQUFHNEosTUFBTXhELE9BQVMsRUFDL0IsR0FBSWtXLEVBQU9GLEVBQ1AsT0FFSixNQUFNRyxFQUFPdmMsRUFBRzRKLE1BQU0wUyxHQUN0QixLQUFNQyxhQUFnQixNQUFlQSxhQUFnQixNQUNqRCxPQUVKLE1BQU12YixFQUFNaEIsRUFBR3NOLFFBQVFrUCxLQUFLRixHQUM1QixJQUFJalAsRUFBTSxFQUNWck0sRUFBSTBDLFNBQVEsQ0FBQytZLEVBQU9DLEVBQUtDLEVBQVVDLEtBQ25CLElBQVJ2UCxJQUNBQSxFQUFNdVAsRUFDVixJQUVKNWMsRUFBR2liLGFBQWEsVUFBZWpiLEVBQUdWLElBQUl3SSxRQUFRdUYsSUFrRVksR0FqRTlELENBaUVZd1AsQ0FBd0I3YyxFQUFJQSxFQUFHNEosTUFBTXhELE9BQVMsRUFFdEQsQ0FDQSxPQUFPLENBQUksRUE0NUJiMFcsYUF6NUJtQixJQUFNLEVBQUczZCxRQUFPbUMsZUFDMUIsUUFBZW5DLEVBQU9tQyxHQXk1Qi9CeWIsWUF0NUJrQixJQUFNLEVBQUc1ZCxRQUFPbUMsZUFDekIsUUFBY25DLEVBQU9tQyxHQXM1QjlCdVosaUJBMzFCdUI1WixHQUFRLEVBQUdaLFNBQVFNLE9BQU1YLEtBQUlzQixlQUNsRCxNQUFNNkUsRUFuRFYsU0FBMEJsRixHQUN0QixNQUFNK2IsRUFBUS9iLEVBQUtvWCxNQUFNLFVBQ3pCLElBSUk0RSxFQUNBQyxFQUNBQyxFQUNBQyxFQVBBaFUsRUFBUzRULEVBQU1BLEVBQU01VyxPQUFTLEdBQ25CLFVBQVhnRCxJQUNBQSxFQUFTLEtBTWIsSUFBSyxJQUFJNE8sRUFBSSxFQUFHQSxFQUFJZ0YsRUFBTTVXLE9BQVMsRUFBRzRSLEdBQUssRUFBRyxDQUMxQyxNQUFNcUYsRUFBTUwsRUFBTWhGLEdBQ2xCLEdBQUksa0JBQWtCbkUsS0FBS3dKLEdBQ3ZCRCxHQUFPLE9BRU4sR0FBSSxZQUFZdkosS0FBS3dKLEdBQ3RCSixHQUFNLE9BRUwsR0FBSSxzQkFBc0JwSixLQUFLd0osR0FDaENILEdBQU8sT0FFTixHQUFJLGNBQWNySixLQUFLd0osR0FDeEJGLEdBQVEsTUFFUCxLQUFJLFNBQVN0SixLQUFLd0osR0FTbkIsTUFBTSxJQUFJOVksTUFBTSwrQkFBK0I4WSxLQVIzQ2pJLEtBQVdpQixJQUNYK0csR0FBTyxFQUdQRixHQUFPLENBS2YsQ0FDSixDQWFBLE9BWklELElBQ0E3VCxFQUFTLE9BQU9BLEtBRWhCOFQsSUFDQTlULEVBQVMsUUFBUUEsS0FFakJnVSxJQUNBaFUsRUFBUyxRQUFRQSxLQUVqQitULElBQ0EvVCxFQUFTLFNBQVNBLEtBRWZBLENBQ1gsQ0FFaUJrVSxDQUFpQnJjLEdBQU1vWCxNQUFNLFVBQ3BDdlQsRUFBTXFCLEVBQUtnQixNQUFLekMsSUFBUyxDQUFDLE1BQU8sT0FBUSxPQUFRLFNBQVM2RSxTQUFTN0UsS0FDbkVnRyxFQUFRLElBQUk2UyxjQUFjLFVBQVcsQ0FDdkN6WSxJQUFhLFVBQVJBLEVBQ0MsSUFDQUEsRUFDTjBZLE9BQVFyWCxFQUFLb0QsU0FBUyxPQUN0QmtVLFFBQVN0WCxFQUFLb0QsU0FBUyxRQUN2Qm1VLFFBQVN2WCxFQUFLb0QsU0FBUyxRQUN2Qm9VLFNBQVV4WCxFQUFLb0QsU0FBUyxTQUN4QnFVLFNBQVMsRUFDVEMsWUFBWSxJQUVWQyxFQUFzQnpkLEVBQU8wZCxvQkFBbUIsS0FDbERwZCxFQUFLcWQsU0FBUyxpQkFBaUJDLEdBQUtBLEVBQUV0ZCxFQUFNK0osSUFBTyxJQVF2RCxPQU5Bb1QsU0FBMEVBLEVBQW9CbFUsTUFBTWxHLFNBQVE2WSxJQUN4RyxNQUFNMkIsRUFBVTNCLEVBQUt2YixJQUFJaEIsRUFBR3NOLFNBQ3hCNFEsR0FBVzVjLEdBQ1h0QixFQUFHbWUsVUFBVUQsRUFDakIsS0FFRyxDQUFJLEVBcTBCYi9ELEtBL3hCVyxDQUFDNUQsRUFBWXZTLEVBQWEsQ0FBQyxJQUFNLEVBQUc3RSxRQUFPbUMsZ0JBRW5DZ1YsRUFBYW5YLEVBRGpCaUYsRUFBWW1TLEVBQVlwWCxFQUFNVSxRQUNBbUUsS0FJcEMsUUFBTzdFLEVBQU9tQyxHQTB4QnZCOGMsZUF2eEJxQixJQUFNLEVBQUdqZixRQUFPbUMsZUFDNUIsUUFBaUJuQyxFQUFPbUMsR0F1eEJqQytjLGFBcHhCbUI5SCxHQUFjLEVBQUdwWCxRQUFPbUMsZUFDekMsTUFBTXVCLEVBQU91QixFQUFZbVMsRUFBWXBYLEVBQU1VLFFBQzNDLE9BQU8sUUFBZWdELEVBQWYsQ0FBcUIxRCxFQUFPbUMsRUFBUyxFQW14QjlDZ2QsY0FoeEJvQixJQUFNLEVBQUduZixRQUFPbUMsZUFDM0IsUUFBZ0JuQyxFQUFPbUMsR0FneEJoQ2lkLGdCQWh2QnNCLENBQUNoSSxFQUFZdlMsSUFBZSxFQUFHaEUsS0FBSWIsUUFBT21DLGVBQzlELElBQUlrZCxFQUFXLEtBQ1hDLEVBQVcsS0FDZixNQUFNQyxFQUFhMUgsRUFBOEMsaUJBQWZULEVBQzVDQSxFQUNBQSxFQUFXdFYsS0FBTTlCLEVBQU1VLFFBQzdCLFFBQUs2ZSxJQUdjLFNBQWZBLElBQ0FGLEVBQVdwYSxFQUFZbVMsRUFBWXBYLEVBQU1VLFNBRTFCLFNBQWY2ZSxJQUNBRCxFQUFXN0osRUFBWTJCLEVBQVlwWCxFQUFNVSxTQUV6Q3lCLEdBQ0F0QixFQUFHWCxVQUFVa1UsT0FBTzdQLFNBQVFpRyxJQUN4QnhLLEVBQU1HLElBQUlpSixhQUFhb0IsRUFBTTlCLE1BQU1jLElBQUtnQixFQUFNNkosSUFBSTdLLEtBQUssQ0FBQ2pELEVBQU1pRCxLQUN0RDZWLEdBQVlBLElBQWE5WSxFQUFLN0MsTUFDOUI3QyxFQUFHa2EsY0FBY3ZSLE9BQUt6RyxFQUFXK1UsRUFBWXZSLEVBQUtQLE1BQU9uQixJQUV6RHlhLEdBQVkvWSxFQUFLYSxNQUFNSCxRQUN2QlYsRUFBS2EsTUFBTTdDLFNBQVF5RSxJQUNYc1csSUFBYXRXLEVBQUt0RixNQUNsQjdDLEVBQUcyZSxRQUFRaFcsRUFBS0EsRUFBTWpELEVBQUsrTyxTQUFVZ0ssRUFBU3BMLE9BQU80RCxFQUFZOU8sRUFBS2hELE1BQU9uQixJQUNqRixHQUVSLEdBQ0YsS0FHSCxFQUFJLEVBa3RCYnlXLGVBL3NCcUIsSUFBTSxFQUFHemEsS0FBSXNCLGVBQzVCQSxHQUNBdEIsRUFBR3lhLGtCQUVBLEdBNHNCVG1FLFVBenNCZ0IsSUFBTSxFQUFHNWUsS0FBSVEsY0FDcEJBLEVBQVNxZSxpQkFBaUIsQ0FDN0J0WCxLQUFNLEVBQ05DLEdBQUl4SCxFQUFHVixJQUFJOE0sUUFBUVUsT0F1c0J6QmdTLG1CQW5zQnlCLElBQU0sRUFBRzNmLFFBQU9tQyxlQUNoQyxRQUFxQm5DLEVBQU9tQyxHQW1zQnJDeWQsa0JBaHNCd0IsSUFBTSxFQUFHNWYsUUFBT21DLGVBQy9CLE9BQW9CbkMsRUFBT21DLEdBZ3NCcEMwZCxpQkE3ckJ1QixJQUFNLEVBQUc3ZixRQUFPbUMsZUFDOUIsUUFBbUJuQyxFQUFPbUMsR0E2ckJuQzJkLG1CQXpyQnlCLElBQU0sRUFBRzlmLFFBQU9tQyxlQUNoQyxRQUFxQm5DLEVBQU9tQyxHQXlyQnJDNGQscUJBcnJCMkIsSUFBTSxFQUFHL2YsUUFBT21DLGVBQ2xDLFFBQXVCbkMsRUFBT21DLEdBcXJCdkNvWSxXQTlxQmlCLENBQUN0TixFQUFTcU4sR0FBYSxFQUFPMUQsRUFBZSxDQUFDLElBQU0sRUFBRy9WLEtBQUlLLFNBQVFpQixlQUNsRixNQUFNLElBQUVoQyxHQUFRVSxFQUNWd1YsRUFBVzhCLEVBQWVsTCxFQUFTL0wsRUFBT1IsT0FBUWtXLEdBS3hELE9BSkl6VSxHQUNBdEIsRUFBR3NKLFlBQVksRUFBR2hLLEVBQUk4TSxRQUFRVSxLQUFNMEksR0FDL0IzTCxRQUFRLGlCQUFrQjRQLElBRTVCLENBQUksRUF3cUJiMEYsUUEvb0JjLENBQUM1SSxFQUFZdlMsRUFBYSxDQUFDLElBQU0sRUFBR2hFLEtBQUliLFFBQU9tQyxlQUMzRCxNQUFNLFVBQUVqQyxHQUFjVyxHQUNoQixNQUFFd1csRUFBSyxPQUFFakQsR0FBV2xVLEVBQ3BCd0QsRUFBTytSLEVBQVkyQixFQUFZcFgsRUFBTVUsUUFDM0MsR0FBSXlCLEVBQ0EsR0FBSWtWLEVBQU8sQ0FDUCxNQUFNN1EsRUFBZ0I0UixFQUFrQnBZLEVBQU8wRCxHQUMvQzdDLEVBQUdvZixjQUFjdmMsRUFBS3dRLE9BQU8sSUFDdEIxTixLQUNBM0IsSUFFWCxNQUVJdVAsRUFBTzdQLFNBQVFpRyxJQUNYLE1BQU1wQyxFQUFPb0MsRUFBTTlCLE1BQU1jLElBQ25CbkIsRUFBS21DLEVBQU02SixJQUFJN0ssSUFDckJ4SixFQUFNRyxJQUFJaUosYUFBYWhCLEVBQU1DLEdBQUksQ0FBQzlCLEVBQU1pRCxLQUNwQyxNQUFNMFcsRUFBYzdXLEtBQUtDLElBQUlFLEVBQUtwQixHQUM1QitYLEVBQVk5VyxLQUFLcUUsSUFBSWxFLEVBQU1qRCxFQUFLK08sU0FBVWpOLEdBQzVCOUIsRUFBS2EsTUFBTVksTUFBS2dCLEdBQVFBLEVBQUt0RixPQUFTQSxJQUt0RDZDLEVBQUthLE1BQU03QyxTQUFReUUsSUFDWHRGLElBQVNzRixFQUFLdEYsTUFDZDdDLEVBQUcyZSxRQUFRVSxFQUFhQyxFQUFXemMsRUFBS3dRLE9BQU8sSUFDeENsTCxFQUFLaEQsU0FDTG5CLElBRVgsSUFJSmhFLEVBQUcyZSxRQUFRVSxFQUFhQyxFQUFXemMsRUFBS3dRLE9BQU9yUCxHQUNuRCxHQUNGLElBSWQsT0FBTyxDQUFJLEVBd21CYjZGLFFBcm1CYyxDQUFDL0UsRUFBS0MsSUFBVSxFQUFHL0UsU0FDL0JBLEVBQUc2SixRQUFRL0UsRUFBS0MsSUFDVCxHQW9tQlR3YSxRQWptQmMsQ0FBQ2hKLEVBQVl2UyxFQUFhLENBQUMsSUFBTSxFQUFHN0UsUUFBT21DLFdBQVVDLFlBQ2pFLE1BQU1zQixFQUFPdUIsRUFBWW1TLEVBQVlwWCxFQUFNVSxRQUUzQyxPQUFLZ0QsRUFBSzZKLFlBSUhuTCxJQUVGTCxTQUFRLEVBQUdWLGlCQUNRLFFBQWFxQyxFQUFNbUIsRUFBbkIsQ0FBK0I3RSxJQUk1Q3FCLEVBQVNtWixlQUVmelksU0FBUSxFQUFHL0IsTUFBT3FnQixNQUNaLFFBQWEzYyxFQUFNbUIsRUFBbkIsQ0FBK0J3YixFQUFjbGUsS0FFbkRVLE9BZkR3SCxRQUFRQyxLQUFLLHlFQUNOLEVBY0QsRUEra0JaZ1csaUJBNWtCdUIxSyxHQUFZLEVBQUcvVSxLQUFJc0IsZUFDeEMsR0FBSUEsRUFBVSxDQUNWLE1BQU0sSUFBRWhDLEdBQVFVLEVBQ1ZrVixFQUFTLGFBQWtCNVYsR0FBS2lJLEtBQ2hDNE4sRUFBUyxXQUFnQjdWLEdBQUtrSSxHQUM5QmtZLEVBQWM3SyxFQUFPRSxFQUFVRyxFQUFRQyxHQUN2QzlWLEVBQVksWUFBcUJDLEVBQUtvZ0IsR0FDNUMxZixFQUFHaWIsYUFBYTViLEVBQ3BCLENBQ0EsT0FBTyxDQUFJLEVBb2tCYndmLGlCQWprQnVCOUosR0FBWSxFQUFHL1UsS0FBSXNCLGVBQ3hDLEdBQUlBLEVBQVUsQ0FDVixNQUFNLElBQUVoQyxHQUFRVSxHQUNWLEtBQUV1SCxFQUFJLEdBQUVDLEdBQTJCLGlCQUFidU4sRUFDdEIsQ0FBRXhOLEtBQU13TixFQUFVdk4sR0FBSXVOLEdBQ3RCQSxFQUNBRyxFQUFTLGFBQXNCNVYsR0FBS2lJLEtBQ3BDNE4sRUFBUyxXQUFvQjdWLEdBQUtrSSxHQUNsQ21GLEVBQWVrSSxFQUFPdE4sRUFBTTJOLEVBQVFDLEdBQ3BDd0ssRUFBYzlLLEVBQU9yTixFQUFJME4sRUFBUUMsR0FDakM5VixFQUFZLFlBQXFCQyxFQUFLcU4sRUFBY2dULEdBQzFEM2YsRUFBR2liLGFBQWE1YixFQUNwQixDQUNBLE9BQU8sQ0FBSSxFQXFqQmJ1Z0IsYUFsakJtQnJKLEdBQWMsRUFBR3BYLFFBQU9tQyxlQUN6QyxNQUFNdUIsRUFBT3VCLEVBQVltUyxFQUFZcFgsRUFBTVUsUUFDM0MsT0FBTyxRQUFlZ0QsRUFBZixDQUFxQjFELEVBQU9tQyxFQUFTLEVBaWpCOUN1ZSxXQS9nQmlCLEVBQUdDLGFBQVksR0FBUyxDQUFDLElBQU0sRUFBRzlmLEtBQUliLFFBQU9tQyxXQUFVakIsYUFDdEUsTUFBTSxVQUFFaEIsRUFBUyxJQUFFQyxHQUFRVSxHQUNyQixNQUFFNkgsRUFBSyxJQUFFMkwsR0FBUW5VLEVBRWpCdUcsRUFBZ0I4UixFQURNclgsRUFBT0UsaUJBQWlCeUQsV0FDYTZELEVBQU1uQyxPQUFPN0MsS0FBSzVCLEtBQU00RyxFQUFNbkMsT0FBT1AsT0FDdEcsR0FBSTlGLGFBQXFCLE1BQWlCQSxFQUFVcUcsS0FBS3VOLFFBQ3JELFNBQUtwTCxFQUFNYSxnQkFBaUIsUUFBU3BKLEVBQUt1SSxFQUFNYyxPQUc1Q3JILElBQ0l3ZSxHQUNBbEksR0FBWXpZLEVBQU9rQixFQUFPRSxpQkFBaUJpTixpQkFFL0N4TixFQUFHcVksTUFBTXhRLEVBQU1jLEtBQUs4UixrQkFFakIsSUFFWCxJQUFLNVMsRUFBTXJGLE9BQU95USxRQUNkLE9BQU8sRUFFWCxHQUFJM1IsRUFBVSxDQUNWLE1BQU15ZSxFQUFRdk0sRUFBSTlLLGVBQWlCOEssRUFBSWhSLE9BQU80SixRQUFRVSxLQUNsRHpOLGFBQXFCLE1BQ3JCVyxFQUFHMmEsa0JBRVAsTUFBTXFGLEVBQXdCLElBQWhCblksRUFBTW9RLFdBQ2QvVixFQTNDZCxTQUEwQjJELEdBQ3RCLElBQUssSUFBSW1TLEVBQUksRUFBR0EsRUFBSW5TLEVBQU1vYSxVQUFXakksR0FBSyxFQUFHLENBQ3pDLE1BQU0sS0FBRW5WLEdBQVNnRCxFQUFNcWEsS0FBS2xJLEdBQzVCLEdBQUluVixFQUFLNkosY0FBZ0I3SixFQUFLc2QsbUJBQzFCLE9BQU90ZCxDQUVmLENBQ0EsT0FBTyxJQUNYLENBb0NjdWQsQ0FBaUJ2WSxFQUFNbkMsTUFBTSxHQUFHdVUsZUFBZXBTLEVBQU13WSxZQUFZLEtBQ3ZFLElBQUl0YyxFQUFRZ2MsR0FBU0MsRUFDZixDQUFDLENBQ0tuZCxLQUFNbWQsRUFDTjdhLE1BQU9TLFNBRWIxRCxFQUNGVCxHQUFNLFFBQVN6QixFQUFHVixJQUFLVSxFQUFHc04sUUFBUXRNLElBQUk2RyxFQUFNYyxLQUFNLEVBQUc1RSxHQVl6RCxHQVhLQSxHQUNHdEMsS0FDRCxRQUFTekIsRUFBR1YsSUFBS1UsRUFBR3NOLFFBQVF0TSxJQUFJNkcsRUFBTWMsS0FBTSxFQUFHcVgsRUFBUSxDQUFDLENBQUVuZCxLQUFNbWQsU0FBVzlkLEtBQzlFVCxHQUFNLEVBQ05zQyxFQUFRaWMsRUFDRixDQUFDLENBQ0tuZCxLQUFNbWQsRUFDTjdhLE1BQU9TLFNBRWIxRCxHQUVOVCxJQUNBekIsRUFBR3FZLE1BQU1yWSxFQUFHc04sUUFBUXRNLElBQUk2RyxFQUFNYyxLQUFNLEVBQUc1RSxHQUNuQ2ljLElBQ0lELElBQ0FsWSxFQUFNYSxjQUNQYixFQUFNckYsT0FBT0ssT0FBU21kLEdBQU8sQ0FDaEMsTUFBTTlFLEVBQVFsYixFQUFHc04sUUFBUXRNLElBQUk2RyxFQUFNcVEsVUFDN0JvSSxFQUFTdGdCLEVBQUdWLElBQUl3SSxRQUFRb1QsR0FDMUJyVCxFQUFNbkMsTUFBTSxHQUFHNmEsZUFBZUQsRUFBTzFYLFFBQVMwWCxFQUFPMVgsUUFBVSxFQUFHb1gsSUFDbEVoZ0IsRUFBR2thLGNBQWNsYSxFQUFHc04sUUFBUXRNLElBQUk2RyxFQUFNcVEsVUFBVzhILEVBRXpELENBRUFGLEdBQ0FsSSxHQUFZelksRUFBT2tCLEVBQU9FLGlCQUFpQmlOLGlCQUUvQ3hOLEVBQUd5YSxnQkFDUCxDQUNBLE9BQU8sQ0FBSSxFQWdkYitGLGNBN2NvQmpLLEdBQWMsRUFBR3ZXLEtBQUliLFFBQU9tQyxXQUFVakIsYUFDeEQsSUFBSWlILEVBQ0osTUFBTXpFLEVBQU91QixFQUFZbVMsRUFBWXBYLEVBQU1VLFNBQ3JDLE1BQUVnSSxFQUFLLElBQUUyTCxHQUFRclUsRUFBTUUsVUFHdkJxRyxFQUFPdkcsRUFBTUUsVUFBVXFHLEtBQzdCLEdBQUtBLEdBQVFBLEVBQUt1TixTQUFZcEwsRUFBTW9RLE1BQVEsSUFBTXBRLEVBQU00WSxXQUFXak4sR0FDL0QsT0FBTyxFQUVYLE1BQU1rTixFQUFjN1ksRUFBTW5DLE1BQU0sR0FDaEMsR0FBSWdiLEVBQVk3ZCxPQUFTQSxFQUNyQixPQUFPLEVBRVgsTUFBTUksRUFBc0I1QyxFQUFPRSxpQkFBaUJ5RCxXQUNwRCxHQUFrQyxJQUE5QjZELEVBQU1yRixPQUFPNEosUUFBUVUsTUFBY2pGLEVBQU1uQyxNQUFNLEdBQUdpUCxhQUFlOU0sRUFBTXdZLFlBQVksR0FBSSxDQUl2RixHQUFvQixJQUFoQnhZLEVBQU1vUSxPQUNIcFEsRUFBTW5DLE1BQU0sR0FBRzdDLE9BQVNBLEdBQ3hCZ0YsRUFBTWUsT0FBTyxLQUFPZixFQUFNbkMsTUFBTSxHQUFHaVAsV0FBYSxFQUNuRCxPQUFPLEVBRVgsR0FBSXJULEVBQVUsQ0FDVixJQUFJcWYsRUFBTyxXQUVYLE1BQU1DLEVBQWMvWSxFQUFNZSxPQUFPLEdBQzNCLEVBQ0FmLEVBQU1lLE9BQU8sR0FDVCxFQUNBLEVBR1YsSUFBSyxJQUFJaVksRUFBSWhaLEVBQU1vUSxNQUFRMkksRUFBYUMsR0FBS2haLEVBQU1vUSxNQUFRLEVBQUc0SSxHQUFLLEVBQy9ERixFQUFPLFVBQWM5WSxFQUFNbkMsS0FBS21iLEdBQUdDLEtBQUtILElBRzVDLE1BQU1JLEVBQWFsWixFQUFNd1ksWUFBWSxHQUFLeFksRUFBTW5DLE1BQU0sR0FBR2lQLFdBQ25ELEVBQ0E5TSxFQUFNd1ksWUFBWSxHQUFLeFksRUFBTW5DLE1BQU0sR0FBR2lQLFdBQ2xDLEVBQ0EsRUFFSnFNLEVBQXdCdEosRUFBc0J6VSxFQUFxQjRFLEVBQU1uQyxPQUFPN0MsS0FBSzVCLEtBQU00RyxFQUFNbkMsT0FBT1AsT0FDeEc4YixHQUFxRCxRQUF4QzNaLEVBQUt6RSxFQUFLcWUsYUFBYWxILG1CQUFnQyxJQUFQMVMsT0FBZ0IsRUFBU0EsRUFBRzZaLGNBQWNILFVBQTJCOWUsRUFDeEl5ZSxFQUFPQSxFQUFLUyxPQUFPLFVBQWN2ZSxFQUFLc2UsY0FBYyxLQUFNRixTQUFhL2UsSUFDdkUsTUFBTWtMLEVBQVF2RixFQUFNcVEsT0FBT3JRLEVBQU1vUSxPQUFTMkksRUFBYyxJQUN4RDVnQixFQUFHcWhCLFFBQVFqVSxFQUFPdkYsRUFBTThRLE9BQU9vSSxHQUFhLElBQUksS0FBTUosRUFBTSxFQUFJQyxFQUFhLElBQzdFLElBQUlVLEdBQU8sRUFDWHRoQixFQUFHVixJQUFJaUosYUFBYTZFLEVBQU9wTixFQUFHVixJQUFJOE0sUUFBUVUsTUFBTSxDQUFDeVUsRUFBRzVZLEtBQ2hELEdBQUkyWSxHQUFPLEVBQ1AsT0FBTyxFQUVQQyxFQUFFN1UsYUFBa0MsSUFBbkI2VSxFQUFFblYsUUFBUVUsT0FDM0J3VSxFQUFNM1ksRUFBTSxFQUNoQixJQUVBMlksR0FBTyxHQUNQdGhCLEVBQUdpYixhQUFhLFVBQW1CamIsRUFBR1YsSUFBSXdJLFFBQVF3WixLQUV0RHRoQixFQUFHeWEsZ0JBQ1AsQ0FDQSxPQUFPLENBQ1gsQ0FDQSxNQUFNd0csRUFBV3pOLEVBQUk3SyxNQUFRZCxFQUFNd0YsTUFDN0JxVCxFQUFZekcsZUFBZSxHQUFHRCxZQUM5QixLQUNBd0gsRUFBb0I5SixFQUFzQnpVLEVBQXFCeWQsRUFBWTdkLEtBQUs1QixLQUFNeWYsRUFBWXZiLE9BQ2xHNmIsRUFBd0J0SixFQUFzQnpVLEVBQXFCNEUsRUFBTW5DLE9BQU83QyxLQUFLNUIsS0FBTTRHLEVBQU1uQyxPQUFPUCxPQUM5R25GLEVBQUd3YSxPQUFPM1MsRUFBTWMsSUFBSzZLLEVBQUk3SyxLQUN6QixNQUFNNUUsRUFBUWtkLEVBQ1IsQ0FBQyxDQUFFcGUsT0FBTXNDLE1BQU9xYyxHQUFxQixDQUFFM2UsS0FBTW9lLEVBQVU5YixNQUFPNmIsSUFDOUQsQ0FBQyxDQUFFbmUsT0FBTXNDLE1BQU9xYyxJQUN0QixTQUFLLFFBQVN4aEIsRUFBR1YsSUFBS3VJLEVBQU1jLElBQUssS0FHN0JySCxHQUNBdEIsRUFBR3FZLE1BQU14USxFQUFNYyxJQUFLLEVBQUc1RSxHQUFPMFcsa0JBRTNCLEVBQUksRUE4WGJnSCxXQW5UaUIsQ0FBQ0MsRUFBZ0JDLElBQW1CLEVBQUd0aEIsU0FBUUwsS0FBSWIsUUFBT21DLFdBQVVDLFFBQU9mLFdBQVVpQixVQUNwRyxNQUFNLFdBQUVpQixHQUFlckMsRUFBT0UsaUJBQ3hCZ1ksRUFBV25VLEVBQVlzZCxFQUFnQnZpQixFQUFNVSxRQUM3QytoQixFQUFXeGQsRUFBWXVkLEVBQWdCeGlCLEVBQU1VLFNBQzdDLFVBQUVSLEdBQWNGLEdBQ2hCLE1BQUUwSSxFQUFLLElBQUUyTCxHQUFRblUsRUFDakJzSyxFQUFROUIsRUFBTWlTLFdBQVd0RyxHQUMvQixJQUFLN0osRUFDRCxPQUFPLEVBRVgsTUFBTWtZLEVBQWEvSixJQUFlcFMsR0FBUTBTLEdBQU8xUyxFQUFLN0MsS0FBSzVCLEtBQU15QixJQUE5Q29WLENBQTJEelksR0FDOUUsR0FBSXNLLEVBQU1zTyxPQUFTLEdBQUs0SixHQUFjbFksRUFBTXNPLE1BQVE0SixFQUFXNUosT0FBUyxFQUFHLENBRXZFLEdBQUk0SixFQUFXbmMsS0FBSzdDLE9BQVMwVixFQUN6QixPQUFPL1gsRUFBUzZkLGFBQWF1RCxHQUdqQyxHQUFJeEosR0FBT3lKLEVBQVduYyxLQUFLN0MsS0FBSzVCLEtBQU15QixJQUMvQjZWLEVBQVN1SixhQUFhRCxFQUFXbmMsS0FBSzBHLFVBQ3RDOUssRUFDSCxPQUFPQyxJQUNGTCxTQUFRLEtBQ1RsQixFQUFHa2EsY0FBYzJILEVBQVdsWixJQUFLNFAsSUFDMUIsS0FFTnJYLFNBQVEsSUFBTW9YLEdBQWtCdFksRUFBSXVZLEtBQ3BDclgsU0FBUSxJQUFNd1gsR0FBaUIxWSxFQUFJdVksS0FDbkN2VyxLQUViLENBQ0EsT0FBT1QsSUFFRkwsU0FBUSxNQUNhTyxJQUFNc2dCLFdBQVd4SixJQUloQy9YLEVBQVNtWixlQUVmb0ksV0FBV3hKLEdBQ1hyWCxTQUFRLElBQU1vWCxHQUFrQnRZLEVBQUl1WSxLQUNwQ3JYLFNBQVEsSUFBTXdYLEdBQWlCMVksRUFBSXVZLEtBQ25DdlcsS0FBSyxFQTBRWmdnQixXQXBNaUIsQ0FBQ3pMLEVBQVl2UyxFQUFhLENBQUMsRUFBR0osRUFBVSxDQUFDLElBQU0sRUFBR3pFLFFBQU9xQixlQUN4RSxNQUFNLHFCQUFFeWhCLEdBQXVCLEdBQVVyZSxFQUNuQ2YsRUFBTytSLEVBQVkyQixFQUFZcFgsRUFBTVUsUUFFM0MsT0FEaUIrWSxHQUFhelosRUFBTzBELEVBQU1tQixHQUVoQ3hELEVBQVMwaEIsVUFBVXJmLEVBQU0sQ0FBRW9mLHlCQUUvQnpoQixFQUFTMmUsUUFBUXRjLEVBQU1tQixFQUFXLEVBOEwzQ21lLFdBM0xpQixDQUFDNUwsRUFBWTZMLEVBQWtCcGUsRUFBYSxDQUFDLElBQU0sRUFBRzdFLFFBQU9xQixlQUM1RSxNQUFNcUMsRUFBT3VCLEVBQVltUyxFQUFZcFgsRUFBTVUsUUFDckN3aUIsRUFBYWplLEVBQVlnZSxFQUFrQmpqQixFQUFNVSxRQUV2RCxPQURpQnlXLEVBQWFuWCxFQUFPMEQsRUFBTW1CLEdBRWhDeEQsRUFBUytlLFFBQVE4QyxHQUVyQjdoQixFQUFTK2UsUUFBUTFjLEVBQU1tQixFQUFXLEVBcUwzQ3NlLFdBbExpQixDQUFDL0wsRUFBWXZTLEVBQWEsQ0FBQyxJQUFNLEVBQUc3RSxRQUFPcUIsZUFDMUQsTUFBTXFDLEVBQU91QixFQUFZbVMsRUFBWXBYLEVBQU1VLFFBRTNDLE9BRGlCeVcsRUFBYW5YLEVBQU8wRCxFQUFNbUIsR0FFaEN4RCxFQUFTMlosS0FBS3RYLEdBRWxCckMsRUFBUytoQixPQUFPMWYsRUFBTW1CLEVBQVcsRUE2SzFDd2UsY0ExS29CLElBQU0sRUFBR3JqQixRQUFPbUMsZUFDbEMsTUFBTTFCLEVBQVVULEVBQU1TLFFBQ3RCLElBQUssSUFBSW9ZLEVBQUksRUFBR0EsRUFBSXBZLEVBQVF3RyxPQUFRNFIsR0FBSyxFQUFHLENBQ3hDLE1BQU1yUSxFQUFTL0gsRUFBUW9ZLEdBQ3ZCLElBQUl5SyxFQUdKLEdBQUk5YSxFQUFPSSxLQUFLNEMsZUFBaUI4WCxFQUFXOWEsRUFBTythLFNBQVN2akIsSUFBUyxDQUNqRSxHQUFJbUMsRUFBVSxDQUNWLE1BQU10QixFQUFLYixFQUFNYSxHQUNYMmlCLEVBQVNGLEVBQVMzWSxVQUN4QixJQUFLLElBQUk4WSxFQUFJRCxFQUFPL1ksTUFBTXhELE9BQVMsRUFBR3djLEdBQUssRUFBR0EsR0FBSyxFQUMvQzVpQixFQUFHdWMsS0FBS29HLEVBQU8vWSxNQUFNZ1osR0FBR0MsT0FBT0YsRUFBT0csS0FBS0YsS0FFL0MsR0FBSUgsRUFBU2hiLEtBQU0sQ0FDZixNQUFNbEIsRUFBUXZHLEVBQUdWLElBQUl3SSxRQUFRMmEsRUFBU2xiLE1BQU1oQixRQUM1Q3ZHLEVBQUdzSixZQUFZbVosRUFBU2xiLEtBQU1rYixFQUFTamIsR0FBSXJJLEVBQU1VLE9BQU80SCxLQUFLZ2IsRUFBU2hiLEtBQU1sQixHQUNoRixNQUVJdkcsRUFBR3dhLE9BQU9pSSxFQUFTbGIsS0FBTWtiLEVBQVNqYixHQUUxQyxDQUNBLE9BQU8sQ0FDWCxDQUNKLENBQ0EsT0FBTyxDQUFLLEVBa0pkdWIsY0EvSW9CLElBQU0sRUFBRy9pQixLQUFJc0IsZUFDL0IsTUFBTSxVQUFFakMsR0FBY1csR0FDaEIsTUFBRXdXLEVBQUssT0FBRWpELEdBQVdsVSxFQUMxQixPQUFJbVgsR0FHQWxWLEdBQ0FpUyxFQUFPN1AsU0FBUWlHLElBQ1gzSixFQUFHZ2pCLFdBQVdyWixFQUFNOUIsTUFBTWMsSUFBS2dCLEVBQU02SixJQUFJN0ssSUFBSSxLQUoxQyxDQU9BLEVBcUlidVosVUFsSWdCLENBQUMzTCxFQUFZM1MsRUFBVSxDQUFDLElBQU0sRUFBRzVELEtBQUliLFFBQU9tQyxlQUMxRCxJQUFJZ0csRUFDSixNQUFNLHFCQUFFMmEsR0FBdUIsR0FBVXJlLEdBQ25DLFVBQUV2RSxHQUFjVyxFQUNoQjZDLEVBQU8rUixFQUFZMkIsRUFBWXBYLEVBQU1VLFNBQ3JDLE1BQUVnSSxFQUFLLE1BQUUyTyxFQUFLLE9BQUVqRCxHQUFXbFUsRUFDakMsSUFBS2lDLEVBQ0QsT0FBTyxFQUVYLEdBQUlrVixHQUFTeUwsRUFBc0IsQ0FDL0IsSUFBSSxLQUFFMWEsRUFBSSxHQUFFQyxHQUFPbkksRUFDbkIsTUFBTThGLEVBQWtFLFFBQXpEbUMsRUFBS08sRUFBTXRCLFFBQVFZLE1BQUtnQixHQUFRQSxFQUFLdEYsT0FBU0EsV0FBMEIsSUFBUHlFLE9BQWdCLEVBQVNBLEVBQUduQyxNQUN0R3dFLEVBQVFxSyxFQUFhbk0sRUFBT2hGLEVBQU1zQyxHQUNwQ3dFLElBQ0FwQyxFQUFPb0MsRUFBTXBDLEtBQ2JDLEVBQUttQyxFQUFNbkMsSUFFZnhILEVBQUdnakIsV0FBV3piLEVBQU1DLEVBQUkzRSxFQUM1QixNQUVJMFEsRUFBTzdQLFNBQVFpRyxJQUNYM0osRUFBR2dqQixXQUFXclosRUFBTTlCLE1BQU1jLElBQUtnQixFQUFNNkosSUFBSTdLLElBQUs5RixFQUFLLElBSTNELE9BREE3QyxFQUFHaWpCLGlCQUFpQnBnQixJQUNiLENBQUksRUEwR2JxZ0IsaUJBdkd1QixDQUFDM00sRUFBWXZTLEVBQWEsQ0FBQyxJQUFNLEVBQUdoRSxLQUFJYixRQUFPbUMsZUFDcEUsSUFBSWtkLEVBQVcsS0FDWEMsRUFBVyxLQUNmLE1BQU1DLEVBQWExSCxFQUE4QyxpQkFBZlQsRUFDNUNBLEVBQ0FBLEVBQVd0VixLQUFNOUIsRUFBTVUsUUFDN0IsUUFBSzZlLElBR2MsU0FBZkEsSUFDQUYsRUFBV3BhLEVBQVltUyxFQUFZcFgsRUFBTVUsU0FFMUIsU0FBZjZlLElBQ0FELEVBQVc3SixFQUFZMkIsRUFBWXBYLEVBQU1VLFNBRXpDeUIsR0FDQXRCLEVBQUdYLFVBQVVrVSxPQUFPN1AsU0FBUWlHLElBQ3hCLE1BQU1wQyxFQUFPb0MsRUFBTTlCLE1BQU1jLElBQ25CbkIsRUFBS21DLEVBQU02SixJQUFJN0ssSUFDckJ4SixFQUFNRyxJQUFJaUosYUFBYWhCLEVBQU1DLEdBQUksQ0FBQzlCLEVBQU1pRCxLQUNoQzZWLEdBQVlBLElBQWE5WSxFQUFLN0MsTUFDOUI3QyxFQUFHa2EsY0FBY3ZSLE9BQUt6RyxFQUFXLElBQzFCd0QsRUFBS1AsU0FDTG5CLElBR1B5YSxHQUFZL1ksRUFBS2EsTUFBTUgsUUFDdkJWLEVBQUthLE1BQU03QyxTQUFReUUsSUFDZixHQUFJc1csSUFBYXRXLEVBQUt0RixLQUFNLENBQ3hCLE1BQU13YyxFQUFjN1csS0FBS0MsSUFBSUUsRUFBS3BCLEdBQzVCK1gsRUFBWTlXLEtBQUtxRSxJQUFJbEUsRUFBTWpELEVBQUsrTyxTQUFVak4sR0FDaER4SCxFQUFHMmUsUUFBUVUsRUFBYUMsRUFBV2IsRUFBU3BMLE9BQU8sSUFDNUNsTCxFQUFLaEQsU0FDTG5CLElBRVgsSUFFUixHQUNGLEtBR0gsRUFBSSxFQStEYnVlLE9BNURhLENBQUNoTSxFQUFZdlMsRUFBYSxDQUFDLElBQU0sRUFBRzdFLFFBQU9tQyxlQUN0RCxNQUFNdUIsRUFBT3VCLEVBQVltUyxFQUFZcFgsRUFBTVUsUUFDM0MsT0FBTyxRQUFTZ0QsRUFBTW1CLEVBQWYsQ0FBMkI3RSxFQUFPbUMsRUFBUyxFQTJEcER5Z0IsV0F4RGlCLENBQUN4TCxFQUFZdlMsRUFBYSxDQUFDLElBQU0sRUFBRzdFLFFBQU9tQyxlQUMxRCxNQUFNdUIsRUFBT3VCLEVBQVltUyxFQUFZcFgsRUFBTVUsUUFDM0MsT0FBTyxRQUFhZ0QsRUFBTW1CLEVBQW5CLENBQStCN0UsRUFBT21DLEVBQVMsSUF5RDFELE1BQU02aEIsR0FBVy9RLEVBQVVpQixPQUFPLENBQzlCcFMsS0FBTSxXQUNOdVAsWUFBVyxLQUNBLElBQ0FoUSxPQUtUNGlCLEdBQVdoUixFQUFVaUIsT0FBTyxDQUM5QnBTLEtBQU0sV0FDTnFRLHdCQUNJLE1BQU8sQ0FDSCxJQUFJLEtBQU8sQ0FDUHhNLElBQUssSUFBSSxLQUFVLFlBQ25CM0UsTUFBTyxDQUNIa2pCLFNBQVUsSUFBTWpqQixLQUFLQyxPQUFPdUQsUUFBUXlmLFlBSXBELElBR0VDLEdBQWNsUixFQUFVaUIsT0FBTyxDQUNqQ3BTLEtBQU0sY0FDTnFRLHdCQUNJLE1BQU0sT0FBRWpSLEdBQVdELEtBQ25CLE1BQU8sQ0FDSCxJQUFJLEtBQU8sQ0FDUDBFLElBQUssSUFBSSxLQUFVLGVBQ25CM0UsTUFBTyxDQUNIa0ssZ0JBQWlCLENBQ2I4USxNQUFPLENBQUN4YSxFQUFNK0osS0FDVnJLLEVBQU9rakIsV0FBWSxFQUNuQixNQUFNbmtCLEVBQWNpQixFQUFPbEIsTUFBTWEsR0FDNUI2SixRQUFRLFFBQVMsQ0FBRWEsVUFDbkJiLFFBQVEsZ0JBQWdCLEdBRTdCLE9BREFsSixFQUFLVyxTQUFTbEMsSUFDUCxDQUFLLEVBRWhCK1osS0FBTSxDQUFDeFksRUFBTStKLEtBQ1RySyxFQUFPa2pCLFdBQVksRUFDbkIsTUFBTW5rQixFQUFjaUIsRUFBT2xCLE1BQU1hLEdBQzVCNkosUUFBUSxPQUFRLENBQUVhLFVBQ2xCYixRQUFRLGdCQUFnQixHQUU3QixPQURBbEosRUFBS1csU0FBU2xDLElBQ1AsQ0FBSyxNQU1wQyxJQUdFb2tCLEdBQVNwUixFQUFVaUIsT0FBTyxDQUM1QnBTLEtBQU0sU0FDTjRQLHVCQUNJLE1BQU00UyxFQUFrQixJQUFNcmpCLEtBQUtDLE9BQU9HLFNBQVMwYSxPQUFNLEVBQUcxYSxjQUFlLENBQ3ZFLElBQU1BLEVBQVNnaUIsZ0JBRWYsSUFBTWhpQixFQUFTVSxTQUFRLEVBQUdsQixTQUN0QixNQUFNLFVBQUVYLEVBQVMsSUFBRUMsR0FBUVUsR0FDckIsTUFBRXdXLEVBQUssUUFBRStELEdBQVlsYixHQUNyQixJQUFFc0osRUFBRyxPQUFFbkcsR0FBVytYLEVBQ2xCbUosRUFBWSxhQUFrQnBrQixHQUFLaUksT0FBU29CLEVBQ2xELFVBQUs2TixHQUNHa04sR0FDQWxoQixFQUFPSyxLQUFLNkosY0FDYmxLLEVBQU9taEIsWUFBWXZkLFNBR25CNUYsRUFBU21aLFlBQVksSUFFaEMsSUFBTW5aLEVBQVNtYSxrQkFDZixJQUFNbmEsRUFBU3NjLGVBQ2YsSUFBTXRjLEVBQVNzZSx3QkFFYjhFLEVBQWUsSUFBTXhqQixLQUFLQyxPQUFPRyxTQUFTMGEsT0FBTSxFQUFHMWEsY0FBZSxDQUNwRSxJQUFNQSxFQUFTbWEsa0JBQ2YsSUFBTW5hLEVBQVN1YyxjQUNmLElBQU12YyxFQUFTdWUsdUJBUWI4RSxFQUFhLENBQ2ZDLE1BUGdCLElBQU0xakIsS0FBS0MsT0FBT0csU0FBUzBhLE9BQU0sRUFBRzFhLGNBQWUsQ0FDbkUsSUFBTUEsRUFBUzhkLGdCQUNmLElBQU05ZCxFQUFTNlosc0JBQ2YsSUFBTTdaLEVBQVM0ZCxpQkFDZixJQUFNNWQsRUFBU3FmLGdCQUlmLFlBQWEsSUFBTXpmLEtBQUtDLE9BQU9HLFNBQVNzYSxXQUN4Q2lKLFVBQVdOLEVBQ1gsZ0JBQWlCQSxFQUNqQixrQkFBbUJBLEVBQ25CTyxPQUFRSixFQUNSLGFBQWNBLEVBQ2QsUUFBUyxJQUFNeGpCLEtBQUtDLE9BQU9HLFNBQVNvZSxhQUVsQ3FGLEVBQVcsSUFDVkosR0FFREssRUFBWSxJQUNYTCxFQUNILFNBQVVKLEVBQ1YsZ0JBQWlCQSxFQUNqQixTQUFVRyxFQUNWLHFCQUFzQkEsRUFDdEIsYUFBY0EsRUFDZCxRQUFTQSxFQUNULFNBQVUsSUFBTXhqQixLQUFLQyxPQUFPRyxTQUFTMGUsdUJBQ3JDLFNBQVUsSUFBTTllLEtBQUtDLE9BQU9HLFNBQVN5ZSxzQkFFekMsT0FBSTdKLEtBQVdpQixJQUNKNk4sRUFFSkQsQ0FDWCxFQUNBM1Msd0JBQ0ksTUFBTyxDQU1ILElBQUksS0FBTyxDQUNQeE0sSUFBSyxJQUFJLEtBQVUsaUJBQ25CaUgsa0JBQW1CLENBQUNDLEVBQWNDLEVBQVVrWSxLQUd4QyxJQUZtQm5ZLEVBQWFwRixNQUFLeEgsR0FBZUEsRUFBWStLLGNBQ3hEOEIsRUFBUzNNLElBQUlvYyxHQUFHeUksRUFBUzdrQixLQUU3QixPQUVKLE1BQU0sTUFBRWtYLEVBQUssS0FBRWpQLEVBQUksR0FBRUMsR0FBT3lFLEVBQVM1TSxVQUMvQitrQixFQUFVLGFBQWtCblksRUFBUzNNLEtBQUtpSSxLQUMxQzhjLEVBQVMsV0FBZ0JwWSxFQUFTM00sS0FBS2tJLEdBQ3ZDOGMsRUFBaUIvYyxJQUFTNmMsR0FBVzVjLElBQU82YyxFQUM1Q0UsRUFBc0YsSUFBNUVKLEVBQVM3a0IsSUFBSTZOLFlBQVksRUFBR2dYLEVBQVM3a0IsSUFBSThNLFFBQVFVLEtBQU0sSUFBSyxLQUFLMUcsT0FDakYsR0FBSW9RLElBQVU4TixJQUFtQkMsRUFDN0IsT0FFSixNQUFNdmtCLEVBQUtta0IsRUFBU25rQixHQUNkYixFQUFRRixFQUFxQixDQUMvQkUsTUFBT2dsQixFQUNQL2tCLFlBQWFZLEtBRVgsU0FBRVEsR0FBYSxJQUFJUCxFQUFlLENBQ3BDSSxPQUFRRCxLQUFLQyxPQUNibEIsVUFHSixPQURBcUIsRUFBU21aLGFBQ0ozWixFQUFHNEosTUFBTXhELE9BR1BwRyxPQUhQLENBR1MsSUFJekIsSUFHRXdrQixHQUFXcFMsRUFBVWlCLE9BQU8sQ0FDOUJwUyxLQUFNLFdBQ05xUSx3QkFDSSxNQUFPLENBQ0gsSUFBSSxLQUFPLENBQ1B4TSxJQUFLLElBQUksS0FBVSxZQUNuQjNFLE1BQU8sQ0FDSDZELFdBQVk1RCxLQUFLQyxPQUFPb2tCLFdBQWEsQ0FBRUMsU0FBVSxLQUFRLENBQUMsS0FJMUUsSUFHSixJQUFJaGlCLEdBQTBCN0IsT0FBT29ZLE9BQU8sQ0FDMUNDLFVBQVcsS0FDWDlGLHdCQUF5QkEsRUFDekIrUCxTQUFVQSxHQUNWQyxTQUFVQSxHQUNWRSxZQUFhQSxHQUNiRSxPQUFRQSxHQUNSZ0IsU0FBVUEsS0FrS1osTUFBTUcsV0FqeEZOLE1BQ0l6a0IsY0FDSUUsS0FBS3lCLFVBQVksQ0FBQyxDQUN0QixDQUNBb04sR0FBR3ZFLEVBQU8wUCxHQUtOLE9BSktoYSxLQUFLeUIsVUFBVTZJLEtBQ2hCdEssS0FBS3lCLFVBQVU2SSxHQUFTLElBRTVCdEssS0FBS3lCLFVBQVU2SSxHQUFPM0ksS0FBS3FZLEdBQ3BCaGEsSUFDWCxDQUNBd2tCLEtBQUtsYSxLQUFVdkosR0FDWCxNQUFNVSxFQUFZekIsS0FBS3lCLFVBQVU2SSxHQUlqQyxPQUhJN0ksR0FDQUEsRUFBVTZCLFNBQVF0QyxHQUFZQSxFQUFTNUIsTUFBTVksS0FBTWUsS0FFaERmLElBQ1gsQ0FDQXlrQixJQUFJbmEsRUFBTzBQLEdBQ1AsTUFBTXZZLEVBQVl6QixLQUFLeUIsVUFBVTZJLEdBU2pDLE9BUkk3SSxJQUNJdVksRUFDQWhhLEtBQUt5QixVQUFVNkksR0FBUzdJLEVBQVVlLFFBQU94QixHQUFZQSxJQUFhZ1osV0FHM0RoYSxLQUFLeUIsVUFBVTZJLElBR3ZCdEssSUFDWCxDQUNBMGtCLHFCQUNJMWtCLEtBQUt5QixVQUFZLENBQUMsQ0FDdEIsR0FrdkZBM0IsWUFBWTBELEVBQVUsQ0FBQyxHQUNuQm1oQixRQUNBM2tCLEtBQUttakIsV0FBWSxFQUNqQm5qQixLQUFLMk8saUJBQW1CLENBQUMsRUFDekIzTyxLQUFLd0QsUUFBVSxDQUNYb2hCLFFBQVN4UCxTQUFTeVAsY0FBYyxPQUNoQzdZLFFBQVMsR0FDVDhZLFdBQVcsRUFDWEMsaUJBQWFqakIsRUFDYlEsV0FBWSxHQUNaMGlCLFdBQVcsRUFDWC9CLFVBQVUsRUFDVmdDLFlBQWEsQ0FBQyxFQUNkdFAsYUFBYyxDQUFDLEVBQ2Y1RSxrQkFBa0IsRUFDbEJFLGtCQUFrQixFQUNsQmlVLHNCQUFzQixFQUN0QnRXLGVBQWdCLElBQU0sS0FDdEJFLFNBQVUsSUFBTSxLQUNoQkMsU0FBVSxJQUFNLEtBQ2hCQyxrQkFBbUIsSUFBTSxLQUN6QkMsY0FBZSxJQUFNLEtBQ3JCQyxRQUFTLElBQU0sS0FDZkMsT0FBUSxJQUFNLEtBQ2RDLFVBQVcsSUFBTSxNQUVyQnBQLEtBQUttbEIsd0JBQXlCLEVBQzlCbmxCLEtBQUswZCxvQkFBc0IsS0FDM0IxZCxLQUFLb2xCLFdBQVc1aEIsR0FDaEJ4RCxLQUFLcWxCLHlCQUNMcmxCLEtBQUtzbEIsdUJBQ0x0bEIsS0FBS3VsQixlQUNMdmxCLEtBQUs2TyxHQUFHLGVBQWdCN08sS0FBS3dELFFBQVFvTCxnQkFDckM1TyxLQUFLd2tCLEtBQUssZUFBZ0IsQ0FBRXZrQixPQUFRRCxPQUNwQ0EsS0FBS3dsQixhQUNMeGxCLEtBQUs4a0IsWUFDTDlrQixLQUFLNk8sR0FBRyxTQUFVN08sS0FBS3dELFFBQVFzTCxVQUMvQjlPLEtBQUs2TyxHQUFHLFNBQVU3TyxLQUFLd0QsUUFBUXVMLFVBQy9CL08sS0FBSzZPLEdBQUcsa0JBQW1CN08sS0FBS3dELFFBQVF3TCxtQkFDeENoUCxLQUFLNk8sR0FBRyxjQUFlN08sS0FBS3dELFFBQVF5TCxlQUNwQ2pQLEtBQUs2TyxHQUFHLFFBQVM3TyxLQUFLd0QsUUFBUTBMLFNBQzlCbFAsS0FBSzZPLEdBQUcsT0FBUTdPLEtBQUt3RCxRQUFRMkwsUUFDN0JuUCxLQUFLNk8sR0FBRyxVQUFXN08sS0FBS3dELFFBQVE0TCxXQUNoQ2xFLE9BQU9mLFlBQVcsS0FDVm5LLEtBQUtpWixjQUdUalosS0FBS0ksU0FBUzJhLE1BQU0vYSxLQUFLd0QsUUFBUXdoQixXQUNqQ2hsQixLQUFLd2tCLEtBQUssU0FBVSxDQUFFdmtCLE9BQVFELE9BQU8sR0FDdEMsRUFDUCxDQUlJeUQsY0FDQSxPQUFPekQsS0FBSzJPLGdCQUNoQixDQUlJdk8sZUFDQSxPQUFPSixLQUFLeWxCLGVBQWVybEIsUUFDL0IsQ0FJQWUsUUFDSSxPQUFPbkIsS0FBS3lsQixlQUFldGtCLE9BQy9CLENBSUFFLE1BQ0ksT0FBT3JCLEtBQUt5bEIsZUFBZXBrQixLQUMvQixDQUlBeWpCLFlBQ1E5a0IsS0FBS3dELFFBQVFzaEIsV0FBYTFQLFdBQzFCcFYsS0FBSzBsQixJQWhHakIsU0FBd0J0Z0IsRUFBT3VnQixHQUMzQixNQUFNQyxFQUFpQnhRLFNBQVN5USxjQUFjLDRCQUM5QyxHQUF1QixPQUFuQkQsRUFDQSxPQUFPQSxFQUVYLE1BQU1FLEVBQVkxUSxTQUFTeVAsY0FBYyxTQU96QyxPQU5JYyxHQUNBRyxFQUFVQyxhQUFhLFFBQVNKLEdBRXBDRyxFQUFVQyxhQUFhLG9CQUFxQixJQUM1Q0QsRUFBVUUsVUF0RkEsdzhDQXVGVjVRLFNBQVM2USxxQkFBcUIsUUFBUSxHQUFHQyxZQUFZSixHQUM5Q0EsQ0FDWCxDQW1GdUJLLENBNUtULEVBNEsrQm5tQixLQUFLd0QsUUFBUXVoQixhQUV0RCxDQU1BSyxXQUFXNWhCLEVBQVUsQ0FBQyxHQUNsQnhELEtBQUt3RCxRQUFVLElBQ1J4RCxLQUFLd0QsV0FDTEEsR0FFRnhELEtBQUtPLE1BQVNQLEtBQUtqQixRQUFTaUIsS0FBS2laLGNBR2xDalosS0FBS3dELFFBQVF5aEIsYUFDYmpsQixLQUFLTyxLQUFLNmxCLFNBQVNwbUIsS0FBS3dELFFBQVF5aEIsYUFFcENqbEIsS0FBS08sS0FBSzhsQixZQUFZcm1CLEtBQUtqQixPQUMvQixDQUlBdW5CLFlBQVlyRCxHQUNSampCLEtBQUtvbEIsV0FBVyxDQUFFbkMsWUFDdEIsQ0FJSW9CLGlCQUlBLE9BQU9ya0IsS0FBS3dELFFBQVF5ZixVQUNiampCLEtBQUtPLE1BQ0xQLEtBQUtPLEtBQUswaUIsUUFDckIsQ0FJSWxrQixZQUNBLE9BQU9pQixLQUFLTyxLQUFLeEIsS0FDckIsQ0FPQXduQixlQUFlaGYsRUFBUWlmLEdBQ25CLE1BQU1obkIsRUFBVXdGLEVBQVd3aEIsR0FDckJBLEVBQWNqZixFQUFRLElBQUl2SCxLQUFLakIsTUFBTVMsVUFDckMsSUFBSVEsS0FBS2pCLE1BQU1TLFFBQVMrSCxHQUN4QnhJLEVBQVFpQixLQUFLakIsTUFBTVcsWUFBWSxDQUFFRixZQUN2Q1EsS0FBS08sS0FBSzhsQixZQUFZdG5CLEVBQzFCLENBTUEwbkIsaUJBQWlCQyxHQUNiLEdBQUkxbUIsS0FBS2laLFlBQ0wsT0FFSixNQUFNcFksRUFBa0MsaUJBQXBCNmxCLEVBQ2QsR0FBR0EsS0FFSEEsRUFBZ0JoaUIsSUFDaEIzRixFQUFRaUIsS0FBS2pCLE1BQU1XLFlBQVksQ0FFakNGLFFBQVNRLEtBQUtqQixNQUFNUyxRQUFRZ0QsUUFBTytFLElBQVdBLEVBQU83QyxJQUFJbVgsV0FBV2hiLE9BRXhFYixLQUFLTyxLQUFLOGxCLFlBQVl0bkIsRUFDMUIsQ0FJQXNtQix5QkFDSSxNQUdNc0IsRUFBZ0IsSUFIQzNtQixLQUFLd0QsUUFBUTBoQixxQkFDOUJ6a0IsT0FBT21tQixPQUFPdGtCLElBQ2QsTUFDdUN0QyxLQUFLd0QsUUFBUWxCLFlBQVlFLFFBQU9QLEdBQ2xFLENBQUMsWUFBYSxPQUFRLFFBQVFrSCxTQUFTbEgsYUFBNkMsRUFBU0EsRUFBVVEsUUFFbEh6QyxLQUFLRyxpQkFBbUIsSUFBSWdOLEVBQWlCd1osRUFBZTNtQixLQUNoRSxDQUlBc2xCLHVCQUNJdGxCLEtBQUt5bEIsZUFBaUIsSUFBSTVsQixFQUFlLENBQ3JDSSxPQUFRRCxNQUVoQixDQUlBdWxCLGVBQ0l2bEIsS0FBS1AsT0FBU08sS0FBS0csaUJBQWlCVixNQUN4QyxDQUlBK2xCLGFBQ0ksTUFBTXRtQixFQUFNZ1ksRUFBZWxYLEtBQUt3RCxRQUFRd0ksUUFBU2hNLEtBQUtQLE9BQVFPLEtBQUt3RCxRQUFRbVMsY0FDckUxVyxFQUFZeVYsRUFBcUJ4VixFQUFLYyxLQUFLd0QsUUFBUXdoQixXQUN6RGhsQixLQUFLTyxLQUFPLElBQUksS0FBV1AsS0FBS3dELFFBQVFvaEIsUUFBUyxJQUMxQzVrQixLQUFLd0QsUUFBUXloQixZQUNoQjRCLG9CQUFxQjdtQixLQUFLNm1CLG9CQUFvQnhuQixLQUFLVyxNQUNuRGpCLE1BQU8sWUFBbUIsQ0FDdEJHLE1BQ0FELFVBQVdBLFFBQWE2QyxNQUtoQyxNQUFNaWlCLEVBQVcvakIsS0FBS2pCLE1BQU1XLFlBQVksQ0FDcENGLFFBQVNRLEtBQUtHLGlCQUFpQlgsVUFFbkNRLEtBQUtPLEtBQUs4bEIsWUFBWXRDLEdBQ3RCL2pCLEtBQUs4bUIsa0JBR085bUIsS0FBS08sS0FBS3VLLElBQ2xCN0ssT0FBU0QsSUFDakIsQ0FJQThtQixrQkFDSTltQixLQUFLTyxLQUFLNmxCLFNBQVMsQ0FDZmhWLFVBQVdwUixLQUFLRyxpQkFBaUJpUixXQUV6QyxDQUNBdU0sbUJBQW1CM0QsR0FDZmhhLEtBQUttbEIsd0JBQXlCLEVBQzlCbkwsSUFDQWhhLEtBQUttbEIsd0JBQXlCLEVBQzlCLE1BQU12bEIsRUFBS0ksS0FBSzBkLG9CQUVoQixPQURBMWQsS0FBSzBkLG9CQUFzQixLQUNwQjlkLENBQ1gsQ0FNQWluQixvQkFBb0I3bkIsR0FDaEIsR0FBSWdCLEtBQUttbEIsdUJBQ0wsT0FBS25sQixLQUFLMGQseUJBSVYxZSxFQUFZd0ssTUFBTWxHLFNBQVE2WSxJQUFVLElBQUlqVixFQUFJLE9BQTJDLFFBQW5DQSxFQUFLbEgsS0FBSzBkLDJCQUF3QyxJQUFQeFcsT0FBZ0IsRUFBU0EsRUFBR2lWLEtBQUtBLEVBQUssU0FIakluYyxLQUFLMGQsb0JBQXNCMWUsR0FNbkMsTUFBTUQsRUFBUWlCLEtBQUtqQixNQUFNSyxNQUFNSixHQUN6QituQixHQUF1Qi9tQixLQUFLakIsTUFBTUUsVUFBVXFjLEdBQUd2YyxFQUFNRSxXQUMzRGUsS0FBS08sS0FBSzhsQixZQUFZdG5CLEdBQ3RCaUIsS0FBS3drQixLQUFLLGNBQWUsQ0FDckJ2a0IsT0FBUUQsS0FDUmhCLGdCQUVBK25CLEdBQ0EvbUIsS0FBS3drQixLQUFLLGtCQUFtQixDQUN6QnZrQixPQUFRRCxLQUNSaEIsZ0JBR1IsTUFBTStiLEVBQVEvYixFQUFZaUMsUUFBUSxTQUM1QjhYLEVBQU8vWixFQUFZaUMsUUFBUSxRQUM3QjhaLEdBQ0EvYSxLQUFLd2tCLEtBQUssUUFBUyxDQUNmdmtCLE9BQVFELEtBQ1JzSyxNQUFPeVEsRUFBTXpRLE1BQ2J0TCxnQkFHSitaLEdBQ0EvWSxLQUFLd2tCLEtBQUssT0FBUSxDQUNkdmtCLE9BQVFELEtBQ1JzSyxNQUFPeU8sRUFBS3pPLE1BQ1p0TCxnQkFHSEEsRUFBWStLLGFBQWMvSyxFQUFZaUMsUUFBUSxrQkFHbkRqQixLQUFLd2tCLEtBQUssU0FBVSxDQUNoQnZrQixPQUFRRCxLQUNSaEIsZUFFUixDQUlBZ29CLGNBQWMvaUIsR0FDVixPQXZhUixTQUF1QmxGLEVBQU9vWCxHQUMxQixNQUFNbUksRUFBYTFILEVBQThDLGlCQUFmVCxFQUM1Q0EsRUFDQUEsRUFBV3RWLEtBQU05QixFQUFNVSxRQUM3QixNQUFtQixTQUFmNmUsRUFwQlIsU0FBMkJ2ZixFQUFPb1gsR0FDOUIsTUFBTTFULEVBQU91QixFQUFZbVMsRUFBWXBYLEVBQU1VLFNBQ3JDLEtBQUUwSCxFQUFJLEdBQUVDLEdBQU9ySSxFQUFNRSxVQUNyQmlGLEVBQVEsR0FDZG5GLEVBQU1HLElBQUlpSixhQUFhaEIsRUFBTUMsR0FBSTlCLElBQzdCcEIsRUFBTXZDLEtBQUsyRCxFQUFLLElBRXBCLE1BQU1BLEVBQU9wQixFQUNSbU0sVUFDQXRKLE1BQUtrZ0IsR0FBWUEsRUFBU3hrQixLQUFLNUIsT0FBUzRCLEVBQUs1QixPQUNsRCxPQUFLeUUsRUFHRSxJQUFLQSxFQUFLUCxPQUZOLENBQUMsQ0FHaEIsQ0FPZW1pQixDQUFrQm5vQixFQUFPb1gsR0FFakIsU0FBZm1JLEVBQ09uSCxFQUFrQnBZLEVBQU9vWCxHQUU3QixDQUFDLENBQ1osQ0E0WmU2USxDQUFjaG5CLEtBQUtqQixNQUFPa0YsRUFDckMsQ0FDQWtqQixTQUFTQyxFQUFrQkMsR0FDdkIsTUFBTXhtQixFQUFtQyxpQkFBckJ1bUIsRUFDZEEsRUFDQSxLQUNBeGpCLEVBQXlDLGlCQUFyQndqQixFQUNwQkMsRUFDQUQsRUFDTixPQWpaUixTQUFrQnJvQixFQUFPOEIsRUFBTStDLEVBQWEsQ0FBQyxHQUN6QyxJQUFLL0MsRUFDRCxPQUFPcVYsRUFBYW5YLEVBQU8sS0FBTTZFLElBQWU0VSxHQUFhelosRUFBTyxLQUFNNkUsR0FFOUUsTUFBTTBhLEVBQWExSCxFQUF3Qi9WLEVBQU05QixFQUFNVSxRQUN2RCxNQUFtQixTQUFmNmUsRUFDT3BJLEVBQWFuWCxFQUFPOEIsRUFBTStDLEdBRWxCLFNBQWYwYSxHQUNPOUYsR0FBYXpaLEVBQU84QixFQUFNK0MsRUFHekMsQ0FxWWV1akIsQ0FBU25uQixLQUFLakIsTUFBTzhCLEVBQU0rQyxFQUN0QyxDQUlBMGpCLFVBQ0ksT0FBT3RuQixLQUFLakIsTUFBTUcsSUFBSVMsUUFDMUIsQ0FJQTRuQixVQUNJLE9BL2FSLFNBQTZCQyxFQUFVL25CLEdBQ25DLE1BQU1nb0IsRUFBbUIsZ0JBQ1Rob0IsR0FDWGlvQixrQkFBa0JGLEdBRWpCRyxFQURvQnZTLFNBQVN3UyxlQUFlQyxxQkFDZGhELGNBQWMsT0FFbEQsT0FEQThDLEVBQVV6QixZQUFZdUIsR0FDZkUsRUFBVTNCLFNBQ3JCLENBdWFlOEIsQ0FBb0I5bkIsS0FBS2pCLE1BQU1HLElBQUk4TSxRQUFTaE0sS0FBS1AsT0FDNUQsQ0FJQXNvQixRQUFRdmtCLEdBQ0osTUFBTSxlQUFFaVAsRUFBaUIsT0FBTSxnQkFBRUMsRUFBa0IsQ0FBQyxHQUFPbFAsR0FBVyxDQUFDLEVBQ3ZFLE9BNWFSLFNBQWlCOEIsRUFBTTlCLEdBS25CLE9BQU8rTyxFQUFlak4sRUFKUixDQUNWNkIsS0FBTSxFQUNOQyxHQUFJOUIsRUFBSzBHLFFBQVFVLE1BRWNsSixFQUN2QyxDQXNhZXVrQixDQUFRL25CLEtBQUtqQixNQUFNRyxJQUFLLENBQzNCdVQsaUJBQ0FDLGdCQUFpQixJQUNWQSxLQUNBSyxFQUE2Qi9TLEtBQUtQLFVBR2pELENBSUkwa0IsY0FDQSxPQWxhUixTQUFxQjdlLEdBQ2pCLElBQUk0QixFQUNKLE1BQU04Z0IsRUFBc0QsUUFBcEM5Z0IsRUFBSzVCLEVBQUs3QyxLQUFLc2UsdUJBQW9DLElBQVA3WixPQUFnQixFQUFTQSxFQUFHdkgsU0FDMUZxTSxFQUFVMUcsRUFBSzNGLFNBQ3JCLE9BQU9zb0IsS0FBS0MsVUFBVUYsS0FBb0JDLEtBQUtDLFVBQVVsYyxFQUM3RCxDQTZaZW1jLENBQVlub0IsS0FBS2pCLE1BQU1HLElBQ2xDLENBTUFrcEIsb0JBRUksT0FEQWhmLFFBQVFDLEtBQUssK0hBQ05ySixLQUFLakIsTUFBTUcsSUFBSThNLFFBQVFVLEtBQU8sQ0FDekMsQ0FJQXRCLFVBQ0lwTCxLQUFLd2tCLEtBQUssV0FDTnhrQixLQUFLTyxNQUNMUCxLQUFLTyxLQUFLNkssVUFFZHBMLEtBQUswa0Isb0JBQ1QsQ0FJSXpMLGtCQUNBLElBQUkvUixFQUVKLFFBQThCLFFBQXBCQSxFQUFLbEgsS0FBS08sWUFBeUIsSUFBUDJHLE9BQWdCLEVBQVNBLEVBQUdtaEIsUUFDdEUsRUFtTkosU0FBU0MsR0FBZ0JuaEIsRUFBTUMsRUFBSWxJLEdBQy9CLE1BQU1pSCxFQUFRLEdBMkJkLE9BekJJZ0IsSUFBU0MsRUFDVGxJLEVBQ0t3SSxRQUFRUCxHQUNSaEIsUUFDQTdDLFNBQVF5RSxJQUNULE1BQ013QixFQUFRcUssRUFERDFVLEVBQUl3SSxRQUFRUCxFQUFPLEdBQ0NZLEVBQUt0RixNQUNqQzhHLEdBR0xwRCxFQUFNeEUsS0FBSyxDQUNQb0csVUFDR3dCLEdBQ0wsSUFJTnJLLEVBQUlpSixhQUFhaEIsRUFBTUMsR0FBSSxDQUFDOUIsRUFBTWlELEtBQzlCcEMsRUFBTXhFLFFBQVEyRCxFQUFLYSxNQUFNdkYsS0FBSW1ILElBQVEsQ0FDakNaLEtBQU1vQixFQUNObkIsR0FBSW1CLEVBQU1qRCxFQUFLK08sU0FDZnRNLFdBQ0EsSUFHTDVCLENBQ1gsQ0FNQSxTQUFTb2lCLEdBQWFob0IsRUFBTTRHLEVBQU1DLEdBQzlCLE1BQ00yTixFQUFTeFUsRUFBS3hCLE1BQU1HLElBQUk4TSxRQUFRVSxLQUNoQ0gsRUFBZWtJLEVBQU90TixFQUZiLEVBRTJCNE4sR0FDcEN3SyxFQUFjOUssRUFBT3JOLEVBSFosRUFHd0IyTixHQUNqQy9ILEVBQVF6TSxFQUFLaW9CLFlBQVlqYyxHQUN6QlUsRUFBTTFNLEVBQUtpb0IsWUFBWWpKLEdBQWMsR0FDckNrSixFQUFNcmdCLEtBQUtxRSxJQUFJTyxFQUFNeWIsSUFBS3hiLEVBQUl3YixLQUM5QkMsRUFBU3RnQixLQUFLQyxJQUFJMkUsRUFBTTBiLE9BQVF6YixFQUFJeWIsUUFDcENDLEVBQU92Z0IsS0FBS3FFLElBQUlPLEVBQU0yYixLQUFNMWIsRUFBSTBiLE1BQ2hDQyxFQUFReGdCLEtBQUtDLElBQUkyRSxFQUFNNGIsTUFBTzNiLEVBQUkyYixPQUtsQzlpQixFQUFPLENBQ1QyaUIsTUFDQUMsU0FDQUMsT0FDQUMsUUFDQUMsTUFUVUQsRUFBUUQsRUFVbEJHLE9BVFdKLEVBQVNELEVBVXBCTSxFQVRNSixFQVVOSyxFQVRNUCxHQVdWLE1BQU8sSUFDQTNpQixFQUNIbkcsT0FBUSxJQUFNbUcsRUFFdEIsQ0FNQSxTQUFTbWpCLEdBQWNucUIsR0FDbkIsT0FBTyxJQUFJZ0ksRUFBVSxDQUNqQkMsS0FBTWpJLEVBQU9pSSxLQUNiQyxRQUFTLEVBQUdqSSxRQUFPd0ssUUFBTzlELFlBQ3RCLE1BQU03QixFQUFhcUIsRUFBYW5HLEVBQU9rb0IsbUJBQWVsbEIsRUFBVzJELEdBQ2pFLElBQW1CLElBQWY3QixHQUF1QyxPQUFmQSxFQUN4QixPQUFPLEtBRVgsTUFBTSxHQUFFaEUsR0FBT2IsRUFDVG1xQixFQUFlempCLEVBQU1BLEVBQU1PLE9BQVMsR0FDcENtakIsRUFBWTFqQixFQUFNLEdBQ3hCLElBQUkyakIsRUFBVTdmLEVBQU1uQyxHQUNwQixHQUFJOGhCLEVBQWMsQ0FDZCxNQUFNRyxFQUFjRixFQUFVRyxPQUFPLE1BQy9CQyxFQUFZaGdCLEVBQU1wQyxLQUFPZ2lCLEVBQVV2WixRQUFRc1osR0FDM0NNLEVBQVVELEVBQVlMLEVBQWFsakIsT0FRekMsR0FQc0JzaUIsR0FBZ0IvZSxFQUFNcEMsS0FBTW9DLEVBQU1uQyxHQUFJckksRUFBTUcsS0FDN0RzRCxRQUFPOEIsR0FFU0EsRUFBS3lELEtBQUt0RixLQUFLZ25CLFNBQ2hCMWlCLE1BQUt0RSxHQUFRQSxJQUFTM0QsRUFBTzJELE1BQVFBLElBQVM2QixFQUFLeUQsS0FBS3RGLFNBRXZFRCxRQUFPOEIsR0FBUUEsRUFBSzhDLEdBQUttaUIsSUFDWnZqQixPQUNkLE9BQU8sS0FFUHdqQixFQUFVamdCLEVBQU1uQyxJQUNoQnhILEVBQUd3YSxPQUFPb1AsRUFBU2pnQixFQUFNbkMsSUFFekJtaUIsRUFBWWhnQixFQUFNcEMsTUFDbEJ2SCxFQUFHd2EsT0FBTzdRLEVBQU1wQyxLQUFPa2lCLEVBQWFFLEdBRXhDSCxFQUFVN2YsRUFBTXBDLEtBQU9raUIsRUFBY0gsRUFBYWxqQixPQUNsRHBHLEVBQUcyZSxRQUFRaFYsRUFBTXBDLEtBQU9raUIsRUFBYUQsRUFBU3RxQixFQUFPMkQsS0FBS3dRLE9BQU9yUCxHQUFjLENBQUMsSUFDaEZoRSxFQUFHaWpCLGlCQUFpQi9qQixFQUFPMkQsS0FDL0IsSUFHWixDQTBIQSxNQUFNaW5CLEdBQ0Y1cEIsWUFBWWhCLEVBQVMsQ0FBQyxHQUNsQmtCLEtBQUt5QyxLQUFPLE9BQ1p6QyxLQUFLYSxLQUFPLE9BQ1piLEtBQUtvQyxPQUFTLEtBQ2RwQyxLQUFLaVMsTUFBUSxLQUNialMsS0FBS2xCLE9BQVMsQ0FDVitCLEtBQU1iLEtBQUthLEtBQ1hxUixlQUFnQixDQUFDLEdBRXJCbFMsS0FBS2xCLE9BQVMsSUFDUGtCLEtBQUtsQixVQUNMQSxHQUVQa0IsS0FBS2EsS0FBT2IsS0FBS2xCLE9BQU8rQixLQUNwQi9CLEVBQU9vVCxnQkFDUDlJLFFBQVFDLEtBQUsseUhBQXlIckosS0FBS2EsVUFHL0liLEtBQUt3RCxRQUFVeEQsS0FBS2xCLE9BQU9vVCxlQUN2QmxTLEtBQUtsQixPQUFPcVQsYUFDWm5TLEtBQUt3RCxRQUFVeUIsRUFBYWpELEVBQWtCaEMsS0FBTSxhQUFjLENBQzlEYSxLQUFNYixLQUFLYSxTQUduQmIsS0FBS3lELFFBQVV3QixFQUFhakQsRUFBa0JoQyxLQUFNLGFBQWMsQ0FDOURhLEtBQU1iLEtBQUthLEtBQ1gyQyxRQUFTeEQsS0FBS3dELFlBQ1gsQ0FBQyxDQUNaLENBQ0E2TCxjQUFjdlEsRUFBUyxDQUFDLEdBQ3BCLE9BQU8sSUFBSTRxQixHQUFLNXFCLEVBQ3BCLENBQ0FzVCxVQUFVNU8sRUFBVSxDQUFDLEdBR2pCLE1BQU12QixFQUFZakMsS0FBS3FTLFNBTXZCLE9BTEFwUSxFQUFVdUIsUUFBVW9PLEVBQVU1UixLQUFLd0QsUUFBU0EsR0FDNUN2QixFQUFVd0IsUUFBVXdCLEVBQWFqRCxFQUFrQkMsRUFBVyxhQUFjLENBQ3hFcEIsS0FBTW9CLEVBQVVwQixLQUNoQjJDLFFBQVN2QixFQUFVdUIsV0FFaEJ2QixDQUNYLENBQ0FvUSxPQUFPQyxFQUFpQixDQUFDLEdBQ3JCLE1BQU1yUSxFQUFZLElBQUl5bkIsR0FBS3BYLEdBZ0IzQixPQWZBclEsRUFBVUcsT0FBU3BDLEtBQ25CQSxLQUFLaVMsTUFBUWhRLEVBQ2JBLEVBQVVwQixLQUFPeVIsRUFBZXpSLEtBQzFCeVIsRUFBZXpSLEtBQ2ZvQixFQUFVRyxPQUFPdkIsS0FDbkJ5UixFQUFlSixnQkFDZjlJLFFBQVFDLEtBQUsseUhBQXlIcEgsRUFBVXBCLFVBRXBKb0IsRUFBVXVCLFFBQVV5QixFQUFhakQsRUFBa0JDLEVBQVcsYUFBYyxDQUN4RXBCLEtBQU1vQixFQUFVcEIsUUFFcEJvQixFQUFVd0IsUUFBVXdCLEVBQWFqRCxFQUFrQkMsRUFBVyxhQUFjLENBQ3hFcEIsS0FBTW9CLEVBQVVwQixLQUNoQjJDLFFBQVN2QixFQUFVdUIsV0FFaEJ2QixDQUNYLEVBR0osTUFBTTBuQixHQUNGN3BCLFlBQVloQixFQUFTLENBQUMsR0FDbEJrQixLQUFLeUMsS0FBTyxPQUNaekMsS0FBS2EsS0FBTyxPQUNaYixLQUFLb0MsT0FBUyxLQUNkcEMsS0FBS2lTLE1BQVEsS0FDYmpTLEtBQUtsQixPQUFTLENBQ1YrQixLQUFNYixLQUFLYSxLQUNYcVIsZUFBZ0IsQ0FBQyxHQUVyQmxTLEtBQUtsQixPQUFTLElBQ1BrQixLQUFLbEIsVUFDTEEsR0FFUGtCLEtBQUthLEtBQU9iLEtBQUtsQixPQUFPK0IsS0FDcEIvQixFQUFPb1QsZ0JBQ1A5SSxRQUFRQyxLQUFLLHlIQUF5SHJKLEtBQUthLFVBRy9JYixLQUFLd0QsUUFBVXhELEtBQUtsQixPQUFPb1QsZUFDdkJsUyxLQUFLbEIsT0FBT3FULGFBQ1puUyxLQUFLd0QsUUFBVXlCLEVBQWFqRCxFQUFrQmhDLEtBQU0sYUFBYyxDQUM5RGEsS0FBTWIsS0FBS2EsU0FHbkJiLEtBQUt5RCxRQUFVd0IsRUFBYWpELEVBQWtCaEMsS0FBTSxhQUFjLENBQzlEYSxLQUFNYixLQUFLYSxLQUNYMkMsUUFBU3hELEtBQUt3RCxZQUNYLENBQUMsQ0FDWixDQUNBNkwsY0FBY3ZRLEVBQVMsQ0FBQyxHQUNwQixPQUFPLElBQUk2cUIsR0FBSzdxQixFQUNwQixDQUNBc1QsVUFBVTVPLEVBQVUsQ0FBQyxHQUdqQixNQUFNdkIsRUFBWWpDLEtBQUtxUyxTQU12QixPQUxBcFEsRUFBVXVCLFFBQVVvTyxFQUFVNVIsS0FBS3dELFFBQVNBLEdBQzVDdkIsRUFBVXdCLFFBQVV3QixFQUFhakQsRUFBa0JDLEVBQVcsYUFBYyxDQUN4RXBCLEtBQU1vQixFQUFVcEIsS0FDaEIyQyxRQUFTdkIsRUFBVXVCLFdBRWhCdkIsQ0FDWCxDQUNBb1EsT0FBT0MsRUFBaUIsQ0FBQyxHQUNyQixNQUFNclEsRUFBWSxJQUFJMG5CLEdBQUtyWCxHQWdCM0IsT0FmQXJRLEVBQVVHLE9BQVNwQyxLQUNuQkEsS0FBS2lTLE1BQVFoUSxFQUNiQSxFQUFVcEIsS0FBT3lSLEVBQWV6UixLQUMxQnlSLEVBQWV6UixLQUNmb0IsRUFBVUcsT0FBT3ZCLEtBQ25CeVIsRUFBZUosZ0JBQ2Y5SSxRQUFRQyxLQUFLLHlIQUF5SHBILEVBQVVwQixVQUVwSm9CLEVBQVV1QixRQUFVeUIsRUFBYWpELEVBQWtCQyxFQUFXLGFBQWMsQ0FDeEVwQixLQUFNb0IsRUFBVXBCLFFBRXBCb0IsRUFBVXdCLFFBQVV3QixFQUFhakQsRUFBa0JDLEVBQVcsYUFBYyxDQUN4RXBCLEtBQU1vQixFQUFVcEIsS0FDaEIyQyxRQUFTdkIsRUFBVXVCLFdBRWhCdkIsQ0FDWCxFQWtNSixTQUFTMm5CLEdBQWM5cUIsR0FDbkIsT0FBTyxJQUFJMEwsRUFBVSxDQUNqQnpELEtBQU1qSSxFQUFPaUksS0FDYkMsUUFBUyxFQUFHakksUUFBT3dLLFFBQU85RCxZQUN0QixNQUFNN0IsRUFBYXFCLEVBQWFuRyxFQUFPa29CLG1CQUFlbGxCLEVBQVcyRCxHQUNqRSxJQUFtQixJQUFmN0IsR0FBdUMsT0FBZkEsRUFDeEIsT0FBTyxLQUVYLE1BQU0sR0FBRWhFLEdBQU9iLEVBQ1RtcUIsRUFBZXpqQixFQUFNQSxFQUFNTyxPQUFTLEdBQ3BDbWpCLEVBQVkxakIsRUFBTSxHQUN4QixJQUFJMmpCLEVBQVU3ZixFQUFNbkMsR0FDcEIsR0FBSThoQixFQUFjLENBQ2QsTUFBTUcsRUFBY0YsRUFBVUcsT0FBTyxNQUMvQkMsRUFBWWhnQixFQUFNcEMsS0FBT2dpQixFQUFVdlosUUFBUXNaLEdBQzNDTSxFQUFVRCxFQUFZTCxFQUFhbGpCLE9BUXpDLEdBUHNCc2lCLEdBQWdCL2UsRUFBTXBDLEtBQU1vQyxFQUFNbkMsR0FBSXJJLEVBQU1HLEtBQzdEc0QsUUFBTzhCLEdBRVNBLEVBQUt5RCxLQUFLdEYsS0FBS2duQixTQUNoQjFpQixNQUFLdEUsR0FBUUEsSUFBUzNELEVBQU8yRCxNQUFRQSxJQUFTNkIsRUFBS3lELEtBQUt0RixTQUV2RUQsUUFBTzhCLEdBQVFBLEVBQUs4QyxHQUFLbWlCLElBQ1p2akIsT0FDZCxPQUFPLEtBRVB3akIsRUFBVWpnQixFQUFNbkMsSUFDaEJ4SCxFQUFHd2EsT0FBT29QLEVBQVNqZ0IsRUFBTW5DLElBRXpCbWlCLEVBQVloZ0IsRUFBTXBDLE1BQ2xCdkgsRUFBR3dhLE9BQU83USxFQUFNcEMsS0FBT2tpQixFQUFhRSxHQUV4Q0gsRUFBVTdmLEVBQU1wQyxLQUFPa2lCLEVBQWNILEVBQWFsakIsT0FDbERwRyxFQUFHMmUsUUFBUWhWLEVBQU1wQyxLQUFPa2lCLEVBQWFELEVBQVN0cUIsRUFBTzJELEtBQUt3USxPQUFPclAsR0FBYyxDQUFDLElBQ2hGaEUsRUFBR2lqQixpQkFBaUIvakIsRUFBTzJELEtBQy9CLElBR1osQyIsInNvdXJjZXMiOlsid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9jb3JlL2Rpc3QvdGlwdGFwLWNvcmUuZXNtLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBsdWdpbiwgUGx1Z2luS2V5LCBUZXh0U2VsZWN0aW9uLCBTZWxlY3Rpb24sIE5vZGVTZWxlY3Rpb24sIEVkaXRvclN0YXRlIH0gZnJvbSAncHJvc2VtaXJyb3Itc3RhdGUnO1xuaW1wb3J0IHsgRWRpdG9yVmlldyB9IGZyb20gJ3Byb3NlbWlycm9yLXZpZXcnO1xuaW1wb3J0IHsga2V5bWFwIH0gZnJvbSAncHJvc2VtaXJyb3Ita2V5bWFwJztcbmltcG9ydCB7IFNjaGVtYSwgRnJhZ21lbnQsIERPTVBhcnNlciwgU2xpY2UsIERPTVNlcmlhbGl6ZXIsIE5vZGUgYXMgTm9kZSQxIH0gZnJvbSAncHJvc2VtaXJyb3ItbW9kZWwnO1xuaW1wb3J0IHsgbGlmdFRhcmdldCwgUmVwbGFjZVN0ZXAsIFJlcGxhY2VBcm91bmRTdGVwLCBjYW5TcGxpdCwgY2FuSm9pbiwgVHJhbnNmb3JtLCBmaW5kV3JhcHBpbmcgfSBmcm9tICdwcm9zZW1pcnJvci10cmFuc2Zvcm0nO1xuaW1wb3J0IHsgY3JlYXRlUGFyYWdyYXBoTmVhciBhcyBjcmVhdGVQYXJhZ3JhcGhOZWFyJDEsIGRlbGV0ZVNlbGVjdGlvbiBhcyBkZWxldGVTZWxlY3Rpb24kMSwgZXhpdENvZGUgYXMgZXhpdENvZGUkMSwgam9pbkJhY2t3YXJkIGFzIGpvaW5CYWNrd2FyZCQxLCBqb2luRm9yd2FyZCBhcyBqb2luRm9yd2FyZCQxLCBsaWZ0IGFzIGxpZnQkMSwgbGlmdEVtcHR5QmxvY2sgYXMgbGlmdEVtcHR5QmxvY2skMSwgbmV3bGluZUluQ29kZSBhcyBuZXdsaW5lSW5Db2RlJDEsIHNlbGVjdE5vZGVCYWNrd2FyZCBhcyBzZWxlY3ROb2RlQmFja3dhcmQkMSwgc2VsZWN0Tm9kZUZvcndhcmQgYXMgc2VsZWN0Tm9kZUZvcndhcmQkMSwgc2VsZWN0UGFyZW50Tm9kZSBhcyBzZWxlY3RQYXJlbnROb2RlJDEsIHNlbGVjdFRleHRibG9ja0VuZCBhcyBzZWxlY3RUZXh0YmxvY2tFbmQkMSwgc2VsZWN0VGV4dGJsb2NrU3RhcnQgYXMgc2VsZWN0VGV4dGJsb2NrU3RhcnQkMSwgc2V0QmxvY2tUeXBlLCB3cmFwSW4gYXMgd3JhcEluJDEgfSBmcm9tICdwcm9zZW1pcnJvci1jb21tYW5kcyc7XG5pbXBvcnQgeyBsaWZ0TGlzdEl0ZW0gYXMgbGlmdExpc3RJdGVtJDEsIHNpbmtMaXN0SXRlbSBhcyBzaW5rTGlzdEl0ZW0kMSwgd3JhcEluTGlzdCBhcyB3cmFwSW5MaXN0JDEgfSBmcm9tICdwcm9zZW1pcnJvci1zY2hlbWEtbGlzdCc7XG5cbmZ1bmN0aW9uIGNyZWF0ZUNoYWluYWJsZVN0YXRlKGNvbmZpZykge1xyXG4gICAgY29uc3QgeyBzdGF0ZSwgdHJhbnNhY3Rpb24gfSA9IGNvbmZpZztcclxuICAgIGxldCB7IHNlbGVjdGlvbiB9ID0gdHJhbnNhY3Rpb247XHJcbiAgICBsZXQgeyBkb2MgfSA9IHRyYW5zYWN0aW9uO1xyXG4gICAgbGV0IHsgc3RvcmVkTWFya3MgfSA9IHRyYW5zYWN0aW9uO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICAuLi5zdGF0ZSxcclxuICAgICAgICBhcHBseTogc3RhdGUuYXBwbHkuYmluZChzdGF0ZSksXHJcbiAgICAgICAgYXBwbHlUcmFuc2FjdGlvbjogc3RhdGUuYXBwbHlUcmFuc2FjdGlvbi5iaW5kKHN0YXRlKSxcclxuICAgICAgICBmaWx0ZXJUcmFuc2FjdGlvbjogc3RhdGUuZmlsdGVyVHJhbnNhY3Rpb24sXHJcbiAgICAgICAgcGx1Z2luczogc3RhdGUucGx1Z2lucyxcclxuICAgICAgICBzY2hlbWE6IHN0YXRlLnNjaGVtYSxcclxuICAgICAgICByZWNvbmZpZ3VyZTogc3RhdGUucmVjb25maWd1cmUuYmluZChzdGF0ZSksXHJcbiAgICAgICAgdG9KU09OOiBzdGF0ZS50b0pTT04uYmluZChzdGF0ZSksXHJcbiAgICAgICAgZ2V0IHN0b3JlZE1hcmtzKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gc3RvcmVkTWFya3M7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBnZXQgc2VsZWN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gc2VsZWN0aW9uO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZ2V0IGRvYygpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGRvYztcclxuICAgICAgICB9LFxyXG4gICAgICAgIGdldCB0cigpIHtcclxuICAgICAgICAgICAgc2VsZWN0aW9uID0gdHJhbnNhY3Rpb24uc2VsZWN0aW9uO1xyXG4gICAgICAgICAgICBkb2MgPSB0cmFuc2FjdGlvbi5kb2M7XHJcbiAgICAgICAgICAgIHN0b3JlZE1hcmtzID0gdHJhbnNhY3Rpb24uc3RvcmVkTWFya3M7XHJcbiAgICAgICAgICAgIHJldHVybiB0cmFuc2FjdGlvbjtcclxuICAgICAgICB9LFxyXG4gICAgfTtcclxufVxuXG5jbGFzcyBDb21tYW5kTWFuYWdlciB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG4gICAgICAgIHRoaXMuZWRpdG9yID0gcHJvcHMuZWRpdG9yO1xyXG4gICAgICAgIHRoaXMucmF3Q29tbWFuZHMgPSB0aGlzLmVkaXRvci5leHRlbnNpb25NYW5hZ2VyLmNvbW1hbmRzO1xyXG4gICAgICAgIHRoaXMuY3VzdG9tU3RhdGUgPSBwcm9wcy5zdGF0ZTtcclxuICAgIH1cclxuICAgIGdldCBoYXNDdXN0b21TdGF0ZSgpIHtcclxuICAgICAgICByZXR1cm4gISF0aGlzLmN1c3RvbVN0YXRlO1xyXG4gICAgfVxyXG4gICAgZ2V0IHN0YXRlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmN1c3RvbVN0YXRlIHx8IHRoaXMuZWRpdG9yLnN0YXRlO1xyXG4gICAgfVxyXG4gICAgZ2V0IGNvbW1hbmRzKCkge1xyXG4gICAgICAgIGNvbnN0IHsgcmF3Q29tbWFuZHMsIGVkaXRvciwgc3RhdGUgfSA9IHRoaXM7XHJcbiAgICAgICAgY29uc3QgeyB2aWV3IH0gPSBlZGl0b3I7XHJcbiAgICAgICAgY29uc3QgeyB0ciB9ID0gc3RhdGU7XHJcbiAgICAgICAgY29uc3QgcHJvcHMgPSB0aGlzLmJ1aWxkUHJvcHModHIpO1xyXG4gICAgICAgIHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMoT2JqZWN0XHJcbiAgICAgICAgICAgIC5lbnRyaWVzKHJhd0NvbW1hbmRzKVxyXG4gICAgICAgICAgICAubWFwKChbbmFtZSwgY29tbWFuZF0pID0+IHtcclxuICAgICAgICAgICAgY29uc3QgbWV0aG9kID0gKC4uLmFyZ3MpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNhbGxiYWNrID0gY29tbWFuZCguLi5hcmdzKShwcm9wcyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRyLmdldE1ldGEoJ3ByZXZlbnREaXNwYXRjaCcpICYmICF0aGlzLmhhc0N1c3RvbVN0YXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmlldy5kaXNwYXRjaCh0cik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2s7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHJldHVybiBbbmFtZSwgbWV0aG9kXTtcclxuICAgICAgICB9KSk7XHJcbiAgICB9XHJcbiAgICBnZXQgY2hhaW4oKSB7XHJcbiAgICAgICAgcmV0dXJuICgpID0+IHRoaXMuY3JlYXRlQ2hhaW4oKTtcclxuICAgIH1cclxuICAgIGdldCBjYW4oKSB7XHJcbiAgICAgICAgcmV0dXJuICgpID0+IHRoaXMuY3JlYXRlQ2FuKCk7XHJcbiAgICB9XHJcbiAgICBjcmVhdGVDaGFpbihzdGFydFRyLCBzaG91bGREaXNwYXRjaCA9IHRydWUpIHtcclxuICAgICAgICBjb25zdCB7IHJhd0NvbW1hbmRzLCBlZGl0b3IsIHN0YXRlIH0gPSB0aGlzO1xyXG4gICAgICAgIGNvbnN0IHsgdmlldyB9ID0gZWRpdG9yO1xyXG4gICAgICAgIGNvbnN0IGNhbGxiYWNrcyA9IFtdO1xyXG4gICAgICAgIGNvbnN0IGhhc1N0YXJ0VHJhbnNhY3Rpb24gPSAhIXN0YXJ0VHI7XHJcbiAgICAgICAgY29uc3QgdHIgPSBzdGFydFRyIHx8IHN0YXRlLnRyO1xyXG4gICAgICAgIGNvbnN0IHJ1biA9ICgpID0+IHtcclxuICAgICAgICAgICAgaWYgKCFoYXNTdGFydFRyYW5zYWN0aW9uXHJcbiAgICAgICAgICAgICAgICAmJiBzaG91bGREaXNwYXRjaFxyXG4gICAgICAgICAgICAgICAgJiYgIXRyLmdldE1ldGEoJ3ByZXZlbnREaXNwYXRjaCcpXHJcbiAgICAgICAgICAgICAgICAmJiAhdGhpcy5oYXNDdXN0b21TdGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgdmlldy5kaXNwYXRjaCh0cik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrcy5ldmVyeShjYWxsYmFjayA9PiBjYWxsYmFjayA9PT0gdHJ1ZSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBjb25zdCBjaGFpbiA9IHtcclxuICAgICAgICAgICAgLi4uT2JqZWN0LmZyb21FbnRyaWVzKE9iamVjdC5lbnRyaWVzKHJhd0NvbW1hbmRzKS5tYXAoKFtuYW1lLCBjb21tYW5kXSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY2hhaW5lZENvbW1hbmQgPSAoLi4uYXJncykgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHByb3BzID0gdGhpcy5idWlsZFByb3BzKHRyLCBzaG91bGREaXNwYXRjaCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2FsbGJhY2sgPSBjb21tYW5kKC4uLmFyZ3MpKHByb3BzKTtcclxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFja3MucHVzaChjYWxsYmFjayk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNoYWluO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbbmFtZSwgY2hhaW5lZENvbW1hbmRdO1xyXG4gICAgICAgICAgICB9KSksXHJcbiAgICAgICAgICAgIHJ1bixcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBjaGFpbjtcclxuICAgIH1cclxuICAgIGNyZWF0ZUNhbihzdGFydFRyKSB7XHJcbiAgICAgICAgY29uc3QgeyByYXdDb21tYW5kcywgc3RhdGUgfSA9IHRoaXM7XHJcbiAgICAgICAgY29uc3QgZGlzcGF0Y2ggPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgY29uc3QgdHIgPSBzdGFydFRyIHx8IHN0YXRlLnRyO1xyXG4gICAgICAgIGNvbnN0IHByb3BzID0gdGhpcy5idWlsZFByb3BzKHRyLCBkaXNwYXRjaCk7XHJcbiAgICAgICAgY29uc3QgZm9ybWF0dGVkQ29tbWFuZHMgPSBPYmplY3QuZnJvbUVudHJpZXMoT2JqZWN0XHJcbiAgICAgICAgICAgIC5lbnRyaWVzKHJhd0NvbW1hbmRzKVxyXG4gICAgICAgICAgICAubWFwKChbbmFtZSwgY29tbWFuZF0pID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIFtuYW1lLCAoLi4uYXJncykgPT4gY29tbWFuZCguLi5hcmdzKSh7IC4uLnByb3BzLCBkaXNwYXRjaCB9KV07XHJcbiAgICAgICAgfSkpO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIC4uLmZvcm1hdHRlZENvbW1hbmRzLFxyXG4gICAgICAgICAgICBjaGFpbjogKCkgPT4gdGhpcy5jcmVhdGVDaGFpbih0ciwgZGlzcGF0Y2gpLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBidWlsZFByb3BzKHRyLCBzaG91bGREaXNwYXRjaCA9IHRydWUpIHtcclxuICAgICAgICBjb25zdCB7IHJhd0NvbW1hbmRzLCBlZGl0b3IsIHN0YXRlIH0gPSB0aGlzO1xyXG4gICAgICAgIGNvbnN0IHsgdmlldyB9ID0gZWRpdG9yO1xyXG4gICAgICAgIGlmIChzdGF0ZS5zdG9yZWRNYXJrcykge1xyXG4gICAgICAgICAgICB0ci5zZXRTdG9yZWRNYXJrcyhzdGF0ZS5zdG9yZWRNYXJrcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHByb3BzID0ge1xyXG4gICAgICAgICAgICB0cixcclxuICAgICAgICAgICAgZWRpdG9yLFxyXG4gICAgICAgICAgICB2aWV3LFxyXG4gICAgICAgICAgICBzdGF0ZTogY3JlYXRlQ2hhaW5hYmxlU3RhdGUoe1xyXG4gICAgICAgICAgICAgICAgc3RhdGUsXHJcbiAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbjogdHIsXHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICBkaXNwYXRjaDogc2hvdWxkRGlzcGF0Y2hcclxuICAgICAgICAgICAgICAgID8gKCkgPT4gdW5kZWZpbmVkXHJcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgY2hhaW46ICgpID0+IHRoaXMuY3JlYXRlQ2hhaW4odHIpLFxyXG4gICAgICAgICAgICBjYW46ICgpID0+IHRoaXMuY3JlYXRlQ2FuKHRyKSxcclxuICAgICAgICAgICAgZ2V0IGNvbW1hbmRzKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhPYmplY3RcclxuICAgICAgICAgICAgICAgICAgICAuZW50cmllcyhyYXdDb21tYW5kcylcclxuICAgICAgICAgICAgICAgICAgICAubWFwKChbbmFtZSwgY29tbWFuZF0pID0+IHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW25hbWUsICguLi5hcmdzKSA9PiBjb21tYW5kKC4uLmFyZ3MpKHByb3BzKV07XHJcbiAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gcHJvcHM7XHJcbiAgICB9XHJcbn1cblxuY2xhc3MgRXZlbnRFbWl0dGVyIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuY2FsbGJhY2tzID0ge307XHJcbiAgICB9XHJcbiAgICBvbihldmVudCwgZm4pIHtcclxuICAgICAgICBpZiAoIXRoaXMuY2FsbGJhY2tzW2V2ZW50XSkge1xyXG4gICAgICAgICAgICB0aGlzLmNhbGxiYWNrc1tldmVudF0gPSBbXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jYWxsYmFja3NbZXZlbnRdLnB1c2goZm4pO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG4gICAgZW1pdChldmVudCwgLi4uYXJncykge1xyXG4gICAgICAgIGNvbnN0IGNhbGxiYWNrcyA9IHRoaXMuY2FsbGJhY2tzW2V2ZW50XTtcclxuICAgICAgICBpZiAoY2FsbGJhY2tzKSB7XHJcbiAgICAgICAgICAgIGNhbGxiYWNrcy5mb3JFYWNoKGNhbGxiYWNrID0+IGNhbGxiYWNrLmFwcGx5KHRoaXMsIGFyZ3MpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICBvZmYoZXZlbnQsIGZuKSB7XHJcbiAgICAgICAgY29uc3QgY2FsbGJhY2tzID0gdGhpcy5jYWxsYmFja3NbZXZlbnRdO1xyXG4gICAgICAgIGlmIChjYWxsYmFja3MpIHtcclxuICAgICAgICAgICAgaWYgKGZuKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhbGxiYWNrc1tldmVudF0gPSBjYWxsYmFja3MuZmlsdGVyKGNhbGxiYWNrID0+IGNhbGxiYWNrICE9PSBmbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5jYWxsYmFja3NbZXZlbnRdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG4gICAgcmVtb3ZlQWxsTGlzdGVuZXJzKCkge1xyXG4gICAgICAgIHRoaXMuY2FsbGJhY2tzID0ge307XHJcbiAgICB9XHJcbn1cblxuZnVuY3Rpb24gZ2V0RXh0ZW5zaW9uRmllbGQoZXh0ZW5zaW9uLCBmaWVsZCwgY29udGV4dCkge1xyXG4gICAgaWYgKGV4dGVuc2lvbi5jb25maWdbZmllbGRdID09PSB1bmRlZmluZWQgJiYgZXh0ZW5zaW9uLnBhcmVudCkge1xyXG4gICAgICAgIHJldHVybiBnZXRFeHRlbnNpb25GaWVsZChleHRlbnNpb24ucGFyZW50LCBmaWVsZCwgY29udGV4dCk7XHJcbiAgICB9XHJcbiAgICBpZiAodHlwZW9mIGV4dGVuc2lvbi5jb25maWdbZmllbGRdID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgY29uc3QgdmFsdWUgPSBleHRlbnNpb24uY29uZmlnW2ZpZWxkXS5iaW5kKHtcclxuICAgICAgICAgICAgLi4uY29udGV4dCxcclxuICAgICAgICAgICAgcGFyZW50OiBleHRlbnNpb24ucGFyZW50XHJcbiAgICAgICAgICAgICAgICA/IGdldEV4dGVuc2lvbkZpZWxkKGV4dGVuc2lvbi5wYXJlbnQsIGZpZWxkLCBjb250ZXh0KVxyXG4gICAgICAgICAgICAgICAgOiBudWxsLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH1cclxuICAgIHJldHVybiBleHRlbnNpb24uY29uZmlnW2ZpZWxkXTtcclxufVxuXG5mdW5jdGlvbiBzcGxpdEV4dGVuc2lvbnMoZXh0ZW5zaW9ucykge1xyXG4gICAgY29uc3QgYmFzZUV4dGVuc2lvbnMgPSBleHRlbnNpb25zLmZpbHRlcihleHRlbnNpb24gPT4gZXh0ZW5zaW9uLnR5cGUgPT09ICdleHRlbnNpb24nKTtcclxuICAgIGNvbnN0IG5vZGVFeHRlbnNpb25zID0gZXh0ZW5zaW9ucy5maWx0ZXIoZXh0ZW5zaW9uID0+IGV4dGVuc2lvbi50eXBlID09PSAnbm9kZScpO1xyXG4gICAgY29uc3QgbWFya0V4dGVuc2lvbnMgPSBleHRlbnNpb25zLmZpbHRlcihleHRlbnNpb24gPT4gZXh0ZW5zaW9uLnR5cGUgPT09ICdtYXJrJyk7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGJhc2VFeHRlbnNpb25zLFxyXG4gICAgICAgIG5vZGVFeHRlbnNpb25zLFxyXG4gICAgICAgIG1hcmtFeHRlbnNpb25zLFxyXG4gICAgfTtcclxufVxuXG4vKipcclxuICogR2V0IGEgbGlzdCBvZiBhbGwgZXh0ZW5zaW9uIGF0dHJpYnV0ZXMgZGVmaW5lZCBpbiBgYWRkQXR0cmlidXRlYCBhbmQgYGFkZEdsb2JhbEF0dHJpYnV0ZWAuXHJcbiAqIEBwYXJhbSBleHRlbnNpb25zIExpc3Qgb2YgZXh0ZW5zaW9uc1xyXG4gKi9cclxuZnVuY3Rpb24gZ2V0QXR0cmlidXRlc0Zyb21FeHRlbnNpb25zKGV4dGVuc2lvbnMpIHtcclxuICAgIGNvbnN0IGV4dGVuc2lvbkF0dHJpYnV0ZXMgPSBbXTtcclxuICAgIGNvbnN0IHsgbm9kZUV4dGVuc2lvbnMsIG1hcmtFeHRlbnNpb25zIH0gPSBzcGxpdEV4dGVuc2lvbnMoZXh0ZW5zaW9ucyk7XHJcbiAgICBjb25zdCBub2RlQW5kTWFya0V4dGVuc2lvbnMgPSBbLi4ubm9kZUV4dGVuc2lvbnMsIC4uLm1hcmtFeHRlbnNpb25zXTtcclxuICAgIGNvbnN0IGRlZmF1bHRBdHRyaWJ1dGUgPSB7XHJcbiAgICAgICAgZGVmYXVsdDogbnVsbCxcclxuICAgICAgICByZW5kZXJlZDogdHJ1ZSxcclxuICAgICAgICByZW5kZXJIVE1MOiBudWxsLFxyXG4gICAgICAgIHBhcnNlSFRNTDogbnVsbCxcclxuICAgICAgICBrZWVwT25TcGxpdDogdHJ1ZSxcclxuICAgICAgICBpc1JlcXVpcmVkOiBmYWxzZSxcclxuICAgIH07XHJcbiAgICBleHRlbnNpb25zLmZvckVhY2goZXh0ZW5zaW9uID0+IHtcclxuICAgICAgICBjb25zdCBjb250ZXh0ID0ge1xyXG4gICAgICAgICAgICBuYW1lOiBleHRlbnNpb24ubmFtZSxcclxuICAgICAgICAgICAgb3B0aW9uczogZXh0ZW5zaW9uLm9wdGlvbnMsXHJcbiAgICAgICAgICAgIHN0b3JhZ2U6IGV4dGVuc2lvbi5zdG9yYWdlLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgY29uc3QgYWRkR2xvYmFsQXR0cmlidXRlcyA9IGdldEV4dGVuc2lvbkZpZWxkKGV4dGVuc2lvbiwgJ2FkZEdsb2JhbEF0dHJpYnV0ZXMnLCBjb250ZXh0KTtcclxuICAgICAgICBpZiAoIWFkZEdsb2JhbEF0dHJpYnV0ZXMpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBUT0RPOiByZW1vdmUgYGFzIEdsb2JhbEF0dHJpYnV0ZXNgXHJcbiAgICAgICAgY29uc3QgZ2xvYmFsQXR0cmlidXRlcyA9IGFkZEdsb2JhbEF0dHJpYnV0ZXMoKTtcclxuICAgICAgICBnbG9iYWxBdHRyaWJ1dGVzLmZvckVhY2goZ2xvYmFsQXR0cmlidXRlID0+IHtcclxuICAgICAgICAgICAgZ2xvYmFsQXR0cmlidXRlLnR5cGVzLmZvckVhY2godHlwZSA9PiB7XHJcbiAgICAgICAgICAgICAgICBPYmplY3RcclxuICAgICAgICAgICAgICAgICAgICAuZW50cmllcyhnbG9iYWxBdHRyaWJ1dGUuYXR0cmlidXRlcylcclxuICAgICAgICAgICAgICAgICAgICAuZm9yRWFjaCgoW25hbWUsIGF0dHJpYnV0ZV0pID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBleHRlbnNpb25BdHRyaWJ1dGVzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLmRlZmF1bHRBdHRyaWJ1dGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5hdHRyaWJ1dGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuICAgIG5vZGVBbmRNYXJrRXh0ZW5zaW9ucy5mb3JFYWNoKGV4dGVuc2lvbiA9PiB7XHJcbiAgICAgICAgY29uc3QgY29udGV4dCA9IHtcclxuICAgICAgICAgICAgbmFtZTogZXh0ZW5zaW9uLm5hbWUsXHJcbiAgICAgICAgICAgIG9wdGlvbnM6IGV4dGVuc2lvbi5vcHRpb25zLFxyXG4gICAgICAgICAgICBzdG9yYWdlOiBleHRlbnNpb24uc3RvcmFnZSxcclxuICAgICAgICB9O1xyXG4gICAgICAgIGNvbnN0IGFkZEF0dHJpYnV0ZXMgPSBnZXRFeHRlbnNpb25GaWVsZChleHRlbnNpb24sICdhZGRBdHRyaWJ1dGVzJywgY29udGV4dCk7XHJcbiAgICAgICAgaWYgKCFhZGRBdHRyaWJ1dGVzKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gVE9ETzogcmVtb3ZlIGBhcyBBdHRyaWJ1dGVzYFxyXG4gICAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBhZGRBdHRyaWJ1dGVzKCk7XHJcbiAgICAgICAgT2JqZWN0XHJcbiAgICAgICAgICAgIC5lbnRyaWVzKGF0dHJpYnV0ZXMpXHJcbiAgICAgICAgICAgIC5mb3JFYWNoKChbbmFtZSwgYXR0cmlidXRlXSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBtZXJnZWRBdHRyID0ge1xyXG4gICAgICAgICAgICAgICAgLi4uZGVmYXVsdEF0dHJpYnV0ZSxcclxuICAgICAgICAgICAgICAgIC4uLmF0dHJpYnV0ZSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgaWYgKGF0dHJpYnV0ZS5pc1JlcXVpcmVkICYmIGF0dHJpYnV0ZS5kZWZhdWx0ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSBtZXJnZWRBdHRyLmRlZmF1bHQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZXh0ZW5zaW9uQXR0cmlidXRlcy5wdXNoKHtcclxuICAgICAgICAgICAgICAgIHR5cGU6IGV4dGVuc2lvbi5uYW1lLFxyXG4gICAgICAgICAgICAgICAgbmFtZSxcclxuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZTogbWVyZ2VkQXR0cixcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBleHRlbnNpb25BdHRyaWJ1dGVzO1xyXG59XG5cbmZ1bmN0aW9uIGdldE5vZGVUeXBlKG5hbWVPclR5cGUsIHNjaGVtYSkge1xyXG4gICAgaWYgKHR5cGVvZiBuYW1lT3JUeXBlID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgIGlmICghc2NoZW1hLm5vZGVzW25hbWVPclR5cGVdKSB7XHJcbiAgICAgICAgICAgIHRocm93IEVycm9yKGBUaGVyZSBpcyBubyBub2RlIHR5cGUgbmFtZWQgJyR7bmFtZU9yVHlwZX0nLiBNYXliZSB5b3UgZm9yZ290IHRvIGFkZCB0aGUgZXh0ZW5zaW9uP2ApO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc2NoZW1hLm5vZGVzW25hbWVPclR5cGVdO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5hbWVPclR5cGU7XHJcbn1cblxuZnVuY3Rpb24gbWVyZ2VBdHRyaWJ1dGVzKC4uLm9iamVjdHMpIHtcclxuICAgIHJldHVybiBvYmplY3RzXHJcbiAgICAgICAgLmZpbHRlcihpdGVtID0+ICEhaXRlbSlcclxuICAgICAgICAucmVkdWNlKChpdGVtcywgaXRlbSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IG1lcmdlZEF0dHJpYnV0ZXMgPSB7IC4uLml0ZW1zIH07XHJcbiAgICAgICAgT2JqZWN0LmVudHJpZXMoaXRlbSkuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGV4aXN0cyA9IG1lcmdlZEF0dHJpYnV0ZXNba2V5XTtcclxuICAgICAgICAgICAgaWYgKCFleGlzdHMpIHtcclxuICAgICAgICAgICAgICAgIG1lcmdlZEF0dHJpYnV0ZXNba2V5XSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChrZXkgPT09ICdjbGFzcycpIHtcclxuICAgICAgICAgICAgICAgIG1lcmdlZEF0dHJpYnV0ZXNba2V5XSA9IFttZXJnZWRBdHRyaWJ1dGVzW2tleV0sIHZhbHVlXS5qb2luKCcgJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoa2V5ID09PSAnc3R5bGUnKSB7XHJcbiAgICAgICAgICAgICAgICBtZXJnZWRBdHRyaWJ1dGVzW2tleV0gPSBbbWVyZ2VkQXR0cmlidXRlc1trZXldLCB2YWx1ZV0uam9pbignOyAnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG1lcmdlZEF0dHJpYnV0ZXNba2V5XSA9IHZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIG1lcmdlZEF0dHJpYnV0ZXM7XHJcbiAgICB9LCB7fSk7XHJcbn1cblxuZnVuY3Rpb24gZ2V0UmVuZGVyZWRBdHRyaWJ1dGVzKG5vZGVPck1hcmssIGV4dGVuc2lvbkF0dHJpYnV0ZXMpIHtcclxuICAgIHJldHVybiBleHRlbnNpb25BdHRyaWJ1dGVzXHJcbiAgICAgICAgLmZpbHRlcihpdGVtID0+IGl0ZW0uYXR0cmlidXRlLnJlbmRlcmVkKVxyXG4gICAgICAgIC5tYXAoaXRlbSA9PiB7XHJcbiAgICAgICAgaWYgKCFpdGVtLmF0dHJpYnV0ZS5yZW5kZXJIVE1MKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBbaXRlbS5uYW1lXTogbm9kZU9yTWFyay5hdHRyc1tpdGVtLm5hbWVdLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaXRlbS5hdHRyaWJ1dGUucmVuZGVySFRNTChub2RlT3JNYXJrLmF0dHJzKSB8fCB7fTtcclxuICAgIH0pXHJcbiAgICAgICAgLnJlZHVjZSgoYXR0cmlidXRlcywgYXR0cmlidXRlKSA9PiBtZXJnZUF0dHJpYnV0ZXMoYXR0cmlidXRlcywgYXR0cmlidXRlKSwge30pO1xyXG59XG5cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsdWUpIHtcclxuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbic7XHJcbn1cblxuLyoqXHJcbiAqIE9wdGlvbmFsbHkgY2FsbHMgYHZhbHVlYCBhcyBhIGZ1bmN0aW9uLlxyXG4gKiBPdGhlcndpc2UgaXQgaXMgcmV0dXJuZWQgZGlyZWN0bHkuXHJcbiAqIEBwYXJhbSB2YWx1ZSBGdW5jdGlvbiBvciBhbnkgdmFsdWUuXHJcbiAqIEBwYXJhbSBjb250ZXh0IE9wdGlvbmFsIGNvbnRleHQgdG8gYmluZCB0byBmdW5jdGlvbi5cclxuICogQHBhcmFtIHByb3BzIE9wdGlvbmFsIHByb3BzIHRvIHBhc3MgdG8gZnVuY3Rpb24uXHJcbiAqL1xyXG5mdW5jdGlvbiBjYWxsT3JSZXR1cm4odmFsdWUsIGNvbnRleHQgPSB1bmRlZmluZWQsIC4uLnByb3BzKSB7XHJcbiAgICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHtcclxuICAgICAgICBpZiAoY29udGV4dCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdmFsdWUuYmluZChjb250ZXh0KSguLi5wcm9wcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB2YWx1ZSguLi5wcm9wcyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdmFsdWU7XHJcbn1cblxuZnVuY3Rpb24gaXNFbXB0eU9iamVjdCh2YWx1ZSA9IHt9KSB7XHJcbiAgICByZXR1cm4gT2JqZWN0LmtleXModmFsdWUpLmxlbmd0aCA9PT0gMCAmJiB2YWx1ZS5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0O1xyXG59XG5cbmZ1bmN0aW9uIGZyb21TdHJpbmcodmFsdWUpIHtcclxuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgfVxyXG4gICAgaWYgKHZhbHVlLm1hdGNoKC9eWystXT8oPzpcXGQqXFwuKT9cXGQrJC8pKSB7XHJcbiAgICAgICAgcmV0dXJuIE51bWJlcih2YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBpZiAodmFsdWUgPT09ICd0cnVlJykge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgaWYgKHZhbHVlID09PSAnZmFsc2UnKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHZhbHVlO1xyXG59XG5cbi8qKlxyXG4gKiBUaGlzIGZ1bmN0aW9uIG1lcmdlcyBleHRlbnNpb24gYXR0cmlidXRlcyBpbnRvIHBhcnNlcnVsZSBhdHRyaWJ1dGVzIChgYXR0cnNgIG9yIGBnZXRBdHRyc2ApLlxyXG4gKiBDYW5jZWxzIHdoZW4gYGdldEF0dHJzYCByZXR1cm5lZCBgZmFsc2VgLlxyXG4gKiBAcGFyYW0gcGFyc2VSdWxlIFByb3NlTWlycm9yIFBhcnNlUnVsZVxyXG4gKiBAcGFyYW0gZXh0ZW5zaW9uQXR0cmlidXRlcyBMaXN0IG9mIGF0dHJpYnV0ZXMgdG8gaW5qZWN0XHJcbiAqL1xyXG5mdW5jdGlvbiBpbmplY3RFeHRlbnNpb25BdHRyaWJ1dGVzVG9QYXJzZVJ1bGUocGFyc2VSdWxlLCBleHRlbnNpb25BdHRyaWJ1dGVzKSB7XHJcbiAgICBpZiAocGFyc2VSdWxlLnN0eWxlKSB7XHJcbiAgICAgICAgcmV0dXJuIHBhcnNlUnVsZTtcclxuICAgIH1cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgLi4ucGFyc2VSdWxlLFxyXG4gICAgICAgIGdldEF0dHJzOiBub2RlID0+IHtcclxuICAgICAgICAgICAgY29uc3Qgb2xkQXR0cmlidXRlcyA9IHBhcnNlUnVsZS5nZXRBdHRyc1xyXG4gICAgICAgICAgICAgICAgPyBwYXJzZVJ1bGUuZ2V0QXR0cnMobm9kZSlcclxuICAgICAgICAgICAgICAgIDogcGFyc2VSdWxlLmF0dHJzO1xyXG4gICAgICAgICAgICBpZiAob2xkQXR0cmlidXRlcyA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBuZXdBdHRyaWJ1dGVzID0gZXh0ZW5zaW9uQXR0cmlidXRlcy5yZWR1Y2UoKGl0ZW1zLCBpdGVtKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGl0ZW0uYXR0cmlidXRlLnBhcnNlSFRNTFxyXG4gICAgICAgICAgICAgICAgICAgID8gaXRlbS5hdHRyaWJ1dGUucGFyc2VIVE1MKG5vZGUpXHJcbiAgICAgICAgICAgICAgICAgICAgOiBmcm9tU3RyaW5nKG5vZGUuZ2V0QXR0cmlidXRlKGl0ZW0ubmFtZSkpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXRlbXM7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIC4uLml0ZW1zLFxyXG4gICAgICAgICAgICAgICAgICAgIFtpdGVtLm5hbWVdOiB2YWx1ZSxcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH0sIHt9KTtcclxuICAgICAgICAgICAgcmV0dXJuIHsgLi4ub2xkQXR0cmlidXRlcywgLi4ubmV3QXR0cmlidXRlcyB9O1xyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG59XG5cbmZ1bmN0aW9uIGNsZWFuVXBTY2hlbWFJdGVtKGRhdGEpIHtcclxuICAgIHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMoT2JqZWN0LmVudHJpZXMoZGF0YSkuZmlsdGVyKChba2V5LCB2YWx1ZV0pID0+IHtcclxuICAgICAgICBpZiAoa2V5ID09PSAnYXR0cnMnICYmIGlzRW1wdHlPYmplY3QodmFsdWUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlICE9PSBudWxsICYmIHZhbHVlICE9PSB1bmRlZmluZWQ7XHJcbiAgICB9KSk7XHJcbn1cclxuZnVuY3Rpb24gZ2V0U2NoZW1hQnlSZXNvbHZlZEV4dGVuc2lvbnMoZXh0ZW5zaW9ucykge1xyXG4gICAgdmFyIF9hO1xyXG4gICAgY29uc3QgYWxsQXR0cmlidXRlcyA9IGdldEF0dHJpYnV0ZXNGcm9tRXh0ZW5zaW9ucyhleHRlbnNpb25zKTtcclxuICAgIGNvbnN0IHsgbm9kZUV4dGVuc2lvbnMsIG1hcmtFeHRlbnNpb25zIH0gPSBzcGxpdEV4dGVuc2lvbnMoZXh0ZW5zaW9ucyk7XHJcbiAgICBjb25zdCB0b3BOb2RlID0gKF9hID0gbm9kZUV4dGVuc2lvbnMuZmluZChleHRlbnNpb24gPT4gZ2V0RXh0ZW5zaW9uRmllbGQoZXh0ZW5zaW9uLCAndG9wTm9kZScpKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm5hbWU7XHJcbiAgICBjb25zdCBub2RlcyA9IE9iamVjdC5mcm9tRW50cmllcyhub2RlRXh0ZW5zaW9ucy5tYXAoZXh0ZW5zaW9uID0+IHtcclxuICAgICAgICBjb25zdCBleHRlbnNpb25BdHRyaWJ1dGVzID0gYWxsQXR0cmlidXRlcy5maWx0ZXIoYXR0cmlidXRlID0+IGF0dHJpYnV0ZS50eXBlID09PSBleHRlbnNpb24ubmFtZSk7XHJcbiAgICAgICAgY29uc3QgY29udGV4dCA9IHtcclxuICAgICAgICAgICAgbmFtZTogZXh0ZW5zaW9uLm5hbWUsXHJcbiAgICAgICAgICAgIG9wdGlvbnM6IGV4dGVuc2lvbi5vcHRpb25zLFxyXG4gICAgICAgICAgICBzdG9yYWdlOiBleHRlbnNpb24uc3RvcmFnZSxcclxuICAgICAgICB9O1xyXG4gICAgICAgIGNvbnN0IGV4dHJhTm9kZUZpZWxkcyA9IGV4dGVuc2lvbnMucmVkdWNlKChmaWVsZHMsIGUpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgZXh0ZW5kTm9kZVNjaGVtYSA9IGdldEV4dGVuc2lvbkZpZWxkKGUsICdleHRlbmROb2RlU2NoZW1hJywgY29udGV4dCk7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAuLi5maWVsZHMsXHJcbiAgICAgICAgICAgICAgICAuLi4oZXh0ZW5kTm9kZVNjaGVtYSA/IGV4dGVuZE5vZGVTY2hlbWEoZXh0ZW5zaW9uKSA6IHt9KSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9LCB7fSk7XHJcbiAgICAgICAgY29uc3Qgc2NoZW1hID0gY2xlYW5VcFNjaGVtYUl0ZW0oe1xyXG4gICAgICAgICAgICAuLi5leHRyYU5vZGVGaWVsZHMsXHJcbiAgICAgICAgICAgIGNvbnRlbnQ6IGNhbGxPclJldHVybihnZXRFeHRlbnNpb25GaWVsZChleHRlbnNpb24sICdjb250ZW50JywgY29udGV4dCkpLFxyXG4gICAgICAgICAgICBtYXJrczogY2FsbE9yUmV0dXJuKGdldEV4dGVuc2lvbkZpZWxkKGV4dGVuc2lvbiwgJ21hcmtzJywgY29udGV4dCkpLFxyXG4gICAgICAgICAgICBncm91cDogY2FsbE9yUmV0dXJuKGdldEV4dGVuc2lvbkZpZWxkKGV4dGVuc2lvbiwgJ2dyb3VwJywgY29udGV4dCkpLFxyXG4gICAgICAgICAgICBpbmxpbmU6IGNhbGxPclJldHVybihnZXRFeHRlbnNpb25GaWVsZChleHRlbnNpb24sICdpbmxpbmUnLCBjb250ZXh0KSksXHJcbiAgICAgICAgICAgIGF0b206IGNhbGxPclJldHVybihnZXRFeHRlbnNpb25GaWVsZChleHRlbnNpb24sICdhdG9tJywgY29udGV4dCkpLFxyXG4gICAgICAgICAgICBzZWxlY3RhYmxlOiBjYWxsT3JSZXR1cm4oZ2V0RXh0ZW5zaW9uRmllbGQoZXh0ZW5zaW9uLCAnc2VsZWN0YWJsZScsIGNvbnRleHQpKSxcclxuICAgICAgICAgICAgZHJhZ2dhYmxlOiBjYWxsT3JSZXR1cm4oZ2V0RXh0ZW5zaW9uRmllbGQoZXh0ZW5zaW9uLCAnZHJhZ2dhYmxlJywgY29udGV4dCkpLFxyXG4gICAgICAgICAgICBjb2RlOiBjYWxsT3JSZXR1cm4oZ2V0RXh0ZW5zaW9uRmllbGQoZXh0ZW5zaW9uLCAnY29kZScsIGNvbnRleHQpKSxcclxuICAgICAgICAgICAgZGVmaW5pbmc6IGNhbGxPclJldHVybihnZXRFeHRlbnNpb25GaWVsZChleHRlbnNpb24sICdkZWZpbmluZycsIGNvbnRleHQpKSxcclxuICAgICAgICAgICAgaXNvbGF0aW5nOiBjYWxsT3JSZXR1cm4oZ2V0RXh0ZW5zaW9uRmllbGQoZXh0ZW5zaW9uLCAnaXNvbGF0aW5nJywgY29udGV4dCkpLFxyXG4gICAgICAgICAgICBhdHRyczogT2JqZWN0LmZyb21FbnRyaWVzKGV4dGVuc2lvbkF0dHJpYnV0ZXMubWFwKGV4dGVuc2lvbkF0dHJpYnV0ZSA9PiB7XHJcbiAgICAgICAgICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW2V4dGVuc2lvbkF0dHJpYnV0ZS5uYW1lLCB7IGRlZmF1bHQ6IChfYSA9IGV4dGVuc2lvbkF0dHJpYnV0ZSA9PT0gbnVsbCB8fCBleHRlbnNpb25BdHRyaWJ1dGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGV4dGVuc2lvbkF0dHJpYnV0ZS5hdHRyaWJ1dGUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5kZWZhdWx0IH1dO1xyXG4gICAgICAgICAgICB9KSksXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgY29uc3QgcGFyc2VIVE1MID0gY2FsbE9yUmV0dXJuKGdldEV4dGVuc2lvbkZpZWxkKGV4dGVuc2lvbiwgJ3BhcnNlSFRNTCcsIGNvbnRleHQpKTtcclxuICAgICAgICBpZiAocGFyc2VIVE1MKSB7XHJcbiAgICAgICAgICAgIHNjaGVtYS5wYXJzZURPTSA9IHBhcnNlSFRNTFxyXG4gICAgICAgICAgICAgICAgLm1hcChwYXJzZVJ1bGUgPT4gaW5qZWN0RXh0ZW5zaW9uQXR0cmlidXRlc1RvUGFyc2VSdWxlKHBhcnNlUnVsZSwgZXh0ZW5zaW9uQXR0cmlidXRlcykpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCByZW5kZXJIVE1MID0gZ2V0RXh0ZW5zaW9uRmllbGQoZXh0ZW5zaW9uLCAncmVuZGVySFRNTCcsIGNvbnRleHQpO1xyXG4gICAgICAgIGlmIChyZW5kZXJIVE1MKSB7XHJcbiAgICAgICAgICAgIHNjaGVtYS50b0RPTSA9IG5vZGUgPT4gcmVuZGVySFRNTCh7XHJcbiAgICAgICAgICAgICAgICBub2RlLFxyXG4gICAgICAgICAgICAgICAgSFRNTEF0dHJpYnV0ZXM6IGdldFJlbmRlcmVkQXR0cmlidXRlcyhub2RlLCBleHRlbnNpb25BdHRyaWJ1dGVzKSxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHJlbmRlclRleHQgPSBnZXRFeHRlbnNpb25GaWVsZChleHRlbnNpb24sICdyZW5kZXJUZXh0JywgY29udGV4dCk7XHJcbiAgICAgICAgaWYgKHJlbmRlclRleHQpIHtcclxuICAgICAgICAgICAgc2NoZW1hLnRvVGV4dCA9IHJlbmRlclRleHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBbZXh0ZW5zaW9uLm5hbWUsIHNjaGVtYV07XHJcbiAgICB9KSk7XHJcbiAgICBjb25zdCBtYXJrcyA9IE9iamVjdC5mcm9tRW50cmllcyhtYXJrRXh0ZW5zaW9ucy5tYXAoZXh0ZW5zaW9uID0+IHtcclxuICAgICAgICBjb25zdCBleHRlbnNpb25BdHRyaWJ1dGVzID0gYWxsQXR0cmlidXRlcy5maWx0ZXIoYXR0cmlidXRlID0+IGF0dHJpYnV0ZS50eXBlID09PSBleHRlbnNpb24ubmFtZSk7XHJcbiAgICAgICAgY29uc3QgY29udGV4dCA9IHtcclxuICAgICAgICAgICAgbmFtZTogZXh0ZW5zaW9uLm5hbWUsXHJcbiAgICAgICAgICAgIG9wdGlvbnM6IGV4dGVuc2lvbi5vcHRpb25zLFxyXG4gICAgICAgICAgICBzdG9yYWdlOiBleHRlbnNpb24uc3RvcmFnZSxcclxuICAgICAgICB9O1xyXG4gICAgICAgIGNvbnN0IGV4dHJhTWFya0ZpZWxkcyA9IGV4dGVuc2lvbnMucmVkdWNlKChmaWVsZHMsIGUpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgZXh0ZW5kTWFya1NjaGVtYSA9IGdldEV4dGVuc2lvbkZpZWxkKGUsICdleHRlbmRNYXJrU2NoZW1hJywgY29udGV4dCk7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAuLi5maWVsZHMsXHJcbiAgICAgICAgICAgICAgICAuLi4oZXh0ZW5kTWFya1NjaGVtYSA/IGV4dGVuZE1hcmtTY2hlbWEoZXh0ZW5zaW9uKSA6IHt9KSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9LCB7fSk7XHJcbiAgICAgICAgY29uc3Qgc2NoZW1hID0gY2xlYW5VcFNjaGVtYUl0ZW0oe1xyXG4gICAgICAgICAgICAuLi5leHRyYU1hcmtGaWVsZHMsXHJcbiAgICAgICAgICAgIGluY2x1c2l2ZTogY2FsbE9yUmV0dXJuKGdldEV4dGVuc2lvbkZpZWxkKGV4dGVuc2lvbiwgJ2luY2x1c2l2ZScsIGNvbnRleHQpKSxcclxuICAgICAgICAgICAgZXhjbHVkZXM6IGNhbGxPclJldHVybihnZXRFeHRlbnNpb25GaWVsZChleHRlbnNpb24sICdleGNsdWRlcycsIGNvbnRleHQpKSxcclxuICAgICAgICAgICAgZ3JvdXA6IGNhbGxPclJldHVybihnZXRFeHRlbnNpb25GaWVsZChleHRlbnNpb24sICdncm91cCcsIGNvbnRleHQpKSxcclxuICAgICAgICAgICAgc3Bhbm5pbmc6IGNhbGxPclJldHVybihnZXRFeHRlbnNpb25GaWVsZChleHRlbnNpb24sICdzcGFubmluZycsIGNvbnRleHQpKSxcclxuICAgICAgICAgICAgY29kZTogY2FsbE9yUmV0dXJuKGdldEV4dGVuc2lvbkZpZWxkKGV4dGVuc2lvbiwgJ2NvZGUnLCBjb250ZXh0KSksXHJcbiAgICAgICAgICAgIGF0dHJzOiBPYmplY3QuZnJvbUVudHJpZXMoZXh0ZW5zaW9uQXR0cmlidXRlcy5tYXAoZXh0ZW5zaW9uQXR0cmlidXRlID0+IHtcclxuICAgICAgICAgICAgICAgIHZhciBfYTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbZXh0ZW5zaW9uQXR0cmlidXRlLm5hbWUsIHsgZGVmYXVsdDogKF9hID0gZXh0ZW5zaW9uQXR0cmlidXRlID09PSBudWxsIHx8IGV4dGVuc2lvbkF0dHJpYnV0ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZXh0ZW5zaW9uQXR0cmlidXRlLmF0dHJpYnV0ZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmRlZmF1bHQgfV07XHJcbiAgICAgICAgICAgIH0pKSxcclxuICAgICAgICB9KTtcclxuICAgICAgICBjb25zdCBwYXJzZUhUTUwgPSBjYWxsT3JSZXR1cm4oZ2V0RXh0ZW5zaW9uRmllbGQoZXh0ZW5zaW9uLCAncGFyc2VIVE1MJywgY29udGV4dCkpO1xyXG4gICAgICAgIGlmIChwYXJzZUhUTUwpIHtcclxuICAgICAgICAgICAgc2NoZW1hLnBhcnNlRE9NID0gcGFyc2VIVE1MXHJcbiAgICAgICAgICAgICAgICAubWFwKHBhcnNlUnVsZSA9PiBpbmplY3RFeHRlbnNpb25BdHRyaWJ1dGVzVG9QYXJzZVJ1bGUocGFyc2VSdWxlLCBleHRlbnNpb25BdHRyaWJ1dGVzKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHJlbmRlckhUTUwgPSBnZXRFeHRlbnNpb25GaWVsZChleHRlbnNpb24sICdyZW5kZXJIVE1MJywgY29udGV4dCk7XHJcbiAgICAgICAgaWYgKHJlbmRlckhUTUwpIHtcclxuICAgICAgICAgICAgc2NoZW1hLnRvRE9NID0gbWFyayA9PiByZW5kZXJIVE1MKHtcclxuICAgICAgICAgICAgICAgIG1hcmssXHJcbiAgICAgICAgICAgICAgICBIVE1MQXR0cmlidXRlczogZ2V0UmVuZGVyZWRBdHRyaWJ1dGVzKG1hcmssIGV4dGVuc2lvbkF0dHJpYnV0ZXMpLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFtleHRlbnNpb24ubmFtZSwgc2NoZW1hXTtcclxuICAgIH0pKTtcclxuICAgIHJldHVybiBuZXcgU2NoZW1hKHtcclxuICAgICAgICB0b3BOb2RlLFxyXG4gICAgICAgIG5vZGVzLFxyXG4gICAgICAgIG1hcmtzLFxyXG4gICAgfSk7XHJcbn1cblxuZnVuY3Rpb24gZ2V0U2NoZW1hVHlwZUJ5TmFtZShuYW1lLCBzY2hlbWEpIHtcclxuICAgIHJldHVybiBzY2hlbWEubm9kZXNbbmFtZV0gfHwgc2NoZW1hLm1hcmtzW25hbWVdIHx8IG51bGw7XHJcbn1cblxuZnVuY3Rpb24gaXNFeHRlbnNpb25SdWxlc0VuYWJsZWQoZXh0ZW5zaW9uLCBlbmFibGVkKSB7XHJcbiAgICBpZiAoQXJyYXkuaXNBcnJheShlbmFibGVkKSkge1xyXG4gICAgICAgIHJldHVybiBlbmFibGVkLnNvbWUoZW5hYmxlZEV4dGVuc2lvbiA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSB0eXBlb2YgZW5hYmxlZEV4dGVuc2lvbiA9PT0gJ3N0cmluZydcclxuICAgICAgICAgICAgICAgID8gZW5hYmxlZEV4dGVuc2lvblxyXG4gICAgICAgICAgICAgICAgOiBlbmFibGVkRXh0ZW5zaW9uLm5hbWU7XHJcbiAgICAgICAgICAgIHJldHVybiBuYW1lID09PSBleHRlbnNpb24ubmFtZTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiBlbmFibGVkO1xyXG59XG5cbmNvbnN0IGdldFRleHRDb250ZW50RnJvbU5vZGVzID0gKCRmcm9tLCBtYXhNYXRjaCA9IDUwMCkgPT4ge1xyXG4gICAgbGV0IHRleHRCZWZvcmUgPSAnJztcclxuICAgICRmcm9tLnBhcmVudC5ub2Rlc0JldHdlZW4oTWF0aC5tYXgoMCwgJGZyb20ucGFyZW50T2Zmc2V0IC0gbWF4TWF0Y2gpLCAkZnJvbS5wYXJlbnRPZmZzZXQsIChub2RlLCBwb3MsIHBhcmVudCwgaW5kZXgpID0+IHtcclxuICAgICAgICB2YXIgX2EsIF9iLCBfYztcclxuICAgICAgICB0ZXh0QmVmb3JlICs9ICgoX2IgPSAoX2EgPSBub2RlLnR5cGUuc3BlYykudG9UZXh0KSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSwge1xyXG4gICAgICAgICAgICBub2RlLCBwb3MsIHBhcmVudCwgaW5kZXgsXHJcbiAgICAgICAgfSkpIHx8ICgoX2MgPSAkZnJvbS5ub2RlQmVmb3JlKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MudGV4dCkgfHwgJyVsZWFmJSc7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiB0ZXh0QmVmb3JlO1xyXG59O1xuXG5mdW5jdGlvbiBpc1JlZ0V4cCh2YWx1ZSkge1xyXG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IFJlZ0V4cF0nO1xyXG59XG5cbmNsYXNzIElucHV0UnVsZSB7XHJcbiAgICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcclxuICAgICAgICB0aGlzLmZpbmQgPSBjb25maWcuZmluZDtcclxuICAgICAgICB0aGlzLmhhbmRsZXIgPSBjb25maWcuaGFuZGxlcjtcclxuICAgIH1cclxufVxyXG5jb25zdCBpbnB1dFJ1bGVNYXRjaGVySGFuZGxlciA9ICh0ZXh0LCBmaW5kKSA9PiB7XHJcbiAgICBpZiAoaXNSZWdFeHAoZmluZCkpIHtcclxuICAgICAgICByZXR1cm4gZmluZC5leGVjKHRleHQpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgaW5wdXRSdWxlTWF0Y2ggPSBmaW5kKHRleHQpO1xyXG4gICAgaWYgKCFpbnB1dFJ1bGVNYXRjaCkge1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gICAgY29uc3QgcmVzdWx0ID0gW107XHJcbiAgICByZXN1bHQucHVzaChpbnB1dFJ1bGVNYXRjaC50ZXh0KTtcclxuICAgIHJlc3VsdC5pbmRleCA9IGlucHV0UnVsZU1hdGNoLmluZGV4O1xyXG4gICAgcmVzdWx0LmlucHV0ID0gdGV4dDtcclxuICAgIHJlc3VsdC5kYXRhID0gaW5wdXRSdWxlTWF0Y2guZGF0YTtcclxuICAgIGlmIChpbnB1dFJ1bGVNYXRjaC5yZXBsYWNlV2l0aCkge1xyXG4gICAgICAgIGlmICghaW5wdXRSdWxlTWF0Y2gudGV4dC5pbmNsdWRlcyhpbnB1dFJ1bGVNYXRjaC5yZXBsYWNlV2l0aCkpIHtcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKCdbdGlwdGFwIHdhcm5dOiBcImlucHV0UnVsZU1hdGNoLnJlcGxhY2VXaXRoXCIgbXVzdCBiZSBwYXJ0IG9mIFwiaW5wdXRSdWxlTWF0Y2gudGV4dFwiLicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXN1bHQucHVzaChpbnB1dFJ1bGVNYXRjaC5yZXBsYWNlV2l0aCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59O1xyXG5mdW5jdGlvbiBydW4kMShjb25maWcpIHtcclxuICAgIHZhciBfYTtcclxuICAgIGNvbnN0IHsgZWRpdG9yLCBmcm9tLCB0bywgdGV4dCwgcnVsZXMsIHBsdWdpbiwgfSA9IGNvbmZpZztcclxuICAgIGNvbnN0IHsgdmlldyB9ID0gZWRpdG9yO1xyXG4gICAgaWYgKHZpZXcuY29tcG9zaW5nKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgY29uc3QgJGZyb20gPSB2aWV3LnN0YXRlLmRvYy5yZXNvbHZlKGZyb20pO1xyXG4gICAgaWYgKFxyXG4gICAgLy8gY2hlY2sgZm9yIGNvZGUgbm9kZVxyXG4gICAgJGZyb20ucGFyZW50LnR5cGUuc3BlYy5jb2RlXHJcbiAgICAgICAgLy8gY2hlY2sgZm9yIGNvZGUgbWFya1xyXG4gICAgICAgIHx8ICEhKChfYSA9ICgkZnJvbS5ub2RlQmVmb3JlIHx8ICRmcm9tLm5vZGVBZnRlcikpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5tYXJrcy5maW5kKG1hcmsgPT4gbWFyay50eXBlLnNwZWMuY29kZSkpKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgbGV0IG1hdGNoZWQgPSBmYWxzZTtcclxuICAgIGNvbnN0IHRleHRCZWZvcmUgPSBnZXRUZXh0Q29udGVudEZyb21Ob2RlcygkZnJvbSkgKyB0ZXh0O1xyXG4gICAgcnVsZXMuZm9yRWFjaChydWxlID0+IHtcclxuICAgICAgICBpZiAobWF0Y2hlZCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IG1hdGNoID0gaW5wdXRSdWxlTWF0Y2hlckhhbmRsZXIodGV4dEJlZm9yZSwgcnVsZS5maW5kKTtcclxuICAgICAgICBpZiAoIW1hdGNoKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgdHIgPSB2aWV3LnN0YXRlLnRyO1xyXG4gICAgICAgIGNvbnN0IHN0YXRlID0gY3JlYXRlQ2hhaW5hYmxlU3RhdGUoe1xyXG4gICAgICAgICAgICBzdGF0ZTogdmlldy5zdGF0ZSxcclxuICAgICAgICAgICAgdHJhbnNhY3Rpb246IHRyLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGNvbnN0IHJhbmdlID0ge1xyXG4gICAgICAgICAgICBmcm9tOiBmcm9tIC0gKG1hdGNoWzBdLmxlbmd0aCAtIHRleHQubGVuZ3RoKSxcclxuICAgICAgICAgICAgdG8sXHJcbiAgICAgICAgfTtcclxuICAgICAgICBjb25zdCB7IGNvbW1hbmRzLCBjaGFpbiwgY2FuIH0gPSBuZXcgQ29tbWFuZE1hbmFnZXIoe1xyXG4gICAgICAgICAgICBlZGl0b3IsXHJcbiAgICAgICAgICAgIHN0YXRlLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGNvbnN0IGhhbmRsZXIgPSBydWxlLmhhbmRsZXIoe1xyXG4gICAgICAgICAgICBzdGF0ZSxcclxuICAgICAgICAgICAgcmFuZ2UsXHJcbiAgICAgICAgICAgIG1hdGNoLFxyXG4gICAgICAgICAgICBjb21tYW5kcyxcclxuICAgICAgICAgICAgY2hhaW4sXHJcbiAgICAgICAgICAgIGNhbixcclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyBzdG9wIGlmIHRoZXJlIGFyZSBubyBjaGFuZ2VzXHJcbiAgICAgICAgaWYgKGhhbmRsZXIgPT09IG51bGwgfHwgIXRyLnN0ZXBzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHN0b3JlIHRyYW5zZm9ybSBhcyBtZXRhIGRhdGFcclxuICAgICAgICAvLyBzbyB3ZSBjYW4gdW5kbyBpbnB1dCBydWxlcyB3aXRoaW4gdGhlIGB1bmRvSW5wdXRSdWxlc2AgY29tbWFuZFxyXG4gICAgICAgIHRyLnNldE1ldGEocGx1Z2luLCB7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHIsXHJcbiAgICAgICAgICAgIGZyb20sXHJcbiAgICAgICAgICAgIHRvLFxyXG4gICAgICAgICAgICB0ZXh0LFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHZpZXcuZGlzcGF0Y2godHIpO1xyXG4gICAgICAgIG1hdGNoZWQgPSB0cnVlO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gbWF0Y2hlZDtcclxufVxyXG4vKipcclxuICogQ3JlYXRlIGFuIGlucHV0IHJ1bGVzIHBsdWdpbi4gV2hlbiBlbmFibGVkLCBpdCB3aWxsIGNhdXNlIHRleHRcclxuICogaW5wdXQgdGhhdCBtYXRjaGVzIGFueSBvZiB0aGUgZ2l2ZW4gcnVsZXMgdG8gdHJpZ2dlciB0aGUgcnVsZeKAmXNcclxuICogYWN0aW9uLlxyXG4gKi9cclxuZnVuY3Rpb24gaW5wdXRSdWxlc1BsdWdpbihwcm9wcykge1xyXG4gICAgY29uc3QgeyBlZGl0b3IsIHJ1bGVzIH0gPSBwcm9wcztcclxuICAgIGNvbnN0IHBsdWdpbiA9IG5ldyBQbHVnaW4oe1xyXG4gICAgICAgIHN0YXRlOiB7XHJcbiAgICAgICAgICAgIGluaXQoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgYXBwbHkodHIsIHByZXYpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHN0b3JlZCA9IHRyLmdldE1ldGEocGx1Z2luKTtcclxuICAgICAgICAgICAgICAgIGlmIChzdG9yZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RvcmVkO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRyLnNlbGVjdGlvblNldCB8fCB0ci5kb2NDaGFuZ2VkXHJcbiAgICAgICAgICAgICAgICAgICAgPyBudWxsXHJcbiAgICAgICAgICAgICAgICAgICAgOiBwcmV2O1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcHJvcHM6IHtcclxuICAgICAgICAgICAgaGFuZGxlVGV4dElucHV0KHZpZXcsIGZyb20sIHRvLCB0ZXh0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcnVuJDEoe1xyXG4gICAgICAgICAgICAgICAgICAgIGVkaXRvcixcclxuICAgICAgICAgICAgICAgICAgICBmcm9tLFxyXG4gICAgICAgICAgICAgICAgICAgIHRvLFxyXG4gICAgICAgICAgICAgICAgICAgIHRleHQsXHJcbiAgICAgICAgICAgICAgICAgICAgcnVsZXMsXHJcbiAgICAgICAgICAgICAgICAgICAgcGx1Z2luLFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGhhbmRsZURPTUV2ZW50czoge1xyXG4gICAgICAgICAgICAgICAgY29tcG9zaXRpb25lbmQ6IHZpZXcgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB7ICRjdXJzb3IgfSA9IHZpZXcuc3RhdGUuc2VsZWN0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJGN1cnNvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVuJDEoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVkaXRvcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tOiAkY3Vyc29yLnBvcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bzogJGN1cnNvci5wb3MsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogJycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVsZXMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGx1Z2luLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAvLyBhZGQgc3VwcG9ydCBmb3IgaW5wdXQgcnVsZXMgdG8gdHJpZ2dlciBvbiBlbnRlclxyXG4gICAgICAgICAgICAvLyB0aGlzIGlzIHVzZWZ1bCBmb3IgZXhhbXBsZSBmb3IgY29kZSBibG9ja3NcclxuICAgICAgICAgICAgaGFuZGxlS2V5RG93bih2aWV3LCBldmVudCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50LmtleSAhPT0gJ0VudGVyJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IHsgJGN1cnNvciB9ID0gdmlldy5zdGF0ZS5zZWxlY3Rpb247XHJcbiAgICAgICAgICAgICAgICBpZiAoJGN1cnNvcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBydW4kMSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVkaXRvcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnJvbTogJGN1cnNvci5wb3MsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvOiAkY3Vyc29yLnBvcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogJ1xcbicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJ1bGVzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwbHVnaW4sXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSxcclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgaXNJbnB1dFJ1bGVzOiB0cnVlLFxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gcGx1Z2luO1xyXG59XG5cbmZ1bmN0aW9uIGlzTnVtYmVyKHZhbHVlKSB7XHJcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJztcclxufVxuXG5jbGFzcyBQYXN0ZVJ1bGUge1xyXG4gICAgY29uc3RydWN0b3IoY29uZmlnKSB7XHJcbiAgICAgICAgdGhpcy5maW5kID0gY29uZmlnLmZpbmQ7XHJcbiAgICAgICAgdGhpcy5oYW5kbGVyID0gY29uZmlnLmhhbmRsZXI7XHJcbiAgICB9XHJcbn1cclxuY29uc3QgcGFzdGVSdWxlTWF0Y2hlckhhbmRsZXIgPSAodGV4dCwgZmluZCkgPT4ge1xyXG4gICAgaWYgKGlzUmVnRXhwKGZpbmQpKSB7XHJcbiAgICAgICAgcmV0dXJuIFsuLi50ZXh0Lm1hdGNoQWxsKGZpbmQpXTtcclxuICAgIH1cclxuICAgIGNvbnN0IG1hdGNoZXMgPSBmaW5kKHRleHQpO1xyXG4gICAgaWYgKCFtYXRjaGVzKSB7XHJcbiAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG1hdGNoZXMubWFwKHBhc3RlUnVsZU1hdGNoID0+IHtcclxuICAgICAgICBjb25zdCByZXN1bHQgPSBbXTtcclxuICAgICAgICByZXN1bHQucHVzaChwYXN0ZVJ1bGVNYXRjaC50ZXh0KTtcclxuICAgICAgICByZXN1bHQuaW5kZXggPSBwYXN0ZVJ1bGVNYXRjaC5pbmRleDtcclxuICAgICAgICByZXN1bHQuaW5wdXQgPSB0ZXh0O1xyXG4gICAgICAgIHJlc3VsdC5kYXRhID0gcGFzdGVSdWxlTWF0Y2guZGF0YTtcclxuICAgICAgICBpZiAocGFzdGVSdWxlTWF0Y2gucmVwbGFjZVdpdGgpIHtcclxuICAgICAgICAgICAgaWYgKCFwYXN0ZVJ1bGVNYXRjaC50ZXh0LmluY2x1ZGVzKHBhc3RlUnVsZU1hdGNoLnJlcGxhY2VXaXRoKSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdbdGlwdGFwIHdhcm5dOiBcInBhc3RlUnVsZU1hdGNoLnJlcGxhY2VXaXRoXCIgbXVzdCBiZSBwYXJ0IG9mIFwicGFzdGVSdWxlTWF0Y2gudGV4dFwiLicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHBhc3RlUnVsZU1hdGNoLnJlcGxhY2VXaXRoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH0pO1xyXG59O1xyXG5mdW5jdGlvbiBydW4oY29uZmlnKSB7XHJcbiAgICBjb25zdCB7IGVkaXRvciwgc3RhdGUsIGZyb20sIHRvLCBydWxlLCB9ID0gY29uZmlnO1xyXG4gICAgY29uc3QgeyBjb21tYW5kcywgY2hhaW4sIGNhbiB9ID0gbmV3IENvbW1hbmRNYW5hZ2VyKHtcclxuICAgICAgICBlZGl0b3IsXHJcbiAgICAgICAgc3RhdGUsXHJcbiAgICB9KTtcclxuICAgIGNvbnN0IGhhbmRsZXJzID0gW107XHJcbiAgICBzdGF0ZS5kb2Mubm9kZXNCZXR3ZWVuKGZyb20sIHRvLCAobm9kZSwgcG9zKSA9PiB7XHJcbiAgICAgICAgaWYgKCFub2RlLmlzVGV4dGJsb2NrIHx8IG5vZGUudHlwZS5zcGVjLmNvZGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCByZXNvbHZlZEZyb20gPSBNYXRoLm1heChmcm9tLCBwb3MpO1xyXG4gICAgICAgIGNvbnN0IHJlc29sdmVkVG8gPSBNYXRoLm1pbih0bywgcG9zICsgbm9kZS5jb250ZW50LnNpemUpO1xyXG4gICAgICAgIGNvbnN0IHRleHRUb01hdGNoID0gbm9kZS50ZXh0QmV0d2VlbihyZXNvbHZlZEZyb20gLSBwb3MsIHJlc29sdmVkVG8gLSBwb3MsIHVuZGVmaW5lZCwgJ1xcdWZmZmMnKTtcclxuICAgICAgICBjb25zdCBtYXRjaGVzID0gcGFzdGVSdWxlTWF0Y2hlckhhbmRsZXIodGV4dFRvTWF0Y2gsIHJ1bGUuZmluZCk7XHJcbiAgICAgICAgbWF0Y2hlcy5mb3JFYWNoKG1hdGNoID0+IHtcclxuICAgICAgICAgICAgaWYgKG1hdGNoLmluZGV4ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBzdGFydCA9IHJlc29sdmVkRnJvbSArIG1hdGNoLmluZGV4ICsgMTtcclxuICAgICAgICAgICAgY29uc3QgZW5kID0gc3RhcnQgKyBtYXRjaFswXS5sZW5ndGg7XHJcbiAgICAgICAgICAgIGNvbnN0IHJhbmdlID0ge1xyXG4gICAgICAgICAgICAgICAgZnJvbTogc3RhdGUudHIubWFwcGluZy5tYXAoc3RhcnQpLFxyXG4gICAgICAgICAgICAgICAgdG86IHN0YXRlLnRyLm1hcHBpbmcubWFwKGVuZCksXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGNvbnN0IGhhbmRsZXIgPSBydWxlLmhhbmRsZXIoe1xyXG4gICAgICAgICAgICAgICAgc3RhdGUsXHJcbiAgICAgICAgICAgICAgICByYW5nZSxcclxuICAgICAgICAgICAgICAgIG1hdGNoLFxyXG4gICAgICAgICAgICAgICAgY29tbWFuZHMsXHJcbiAgICAgICAgICAgICAgICBjaGFpbixcclxuICAgICAgICAgICAgICAgIGNhbixcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGhhbmRsZXJzLnB1c2goaGFuZGxlcik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuICAgIGNvbnN0IHN1Y2Nlc3MgPSBoYW5kbGVycy5ldmVyeShoYW5kbGVyID0+IGhhbmRsZXIgIT09IG51bGwpO1xyXG4gICAgcmV0dXJuIHN1Y2Nlc3M7XHJcbn1cclxuLyoqXHJcbiAqIENyZWF0ZSBhbiBwYXN0ZSBydWxlcyBwbHVnaW4uIFdoZW4gZW5hYmxlZCwgaXQgd2lsbCBjYXVzZSBwYXN0ZWRcclxuICogdGV4dCB0aGF0IG1hdGNoZXMgYW55IG9mIHRoZSBnaXZlbiBydWxlcyB0byB0cmlnZ2VyIHRoZSBydWxl4oCZc1xyXG4gKiBhY3Rpb24uXHJcbiAqL1xyXG5mdW5jdGlvbiBwYXN0ZVJ1bGVzUGx1Z2luKHByb3BzKSB7XHJcbiAgICBjb25zdCB7IGVkaXRvciwgcnVsZXMgfSA9IHByb3BzO1xyXG4gICAgbGV0IGRyYWdTb3VyY2VFbGVtZW50ID0gbnVsbDtcclxuICAgIGxldCBpc1Bhc3RlZEZyb21Qcm9zZU1pcnJvciA9IGZhbHNlO1xyXG4gICAgbGV0IGlzRHJvcHBlZEZyb21Qcm9zZU1pcnJvciA9IGZhbHNlO1xyXG4gICAgY29uc3QgcGx1Z2lucyA9IHJ1bGVzLm1hcChydWxlID0+IHtcclxuICAgICAgICByZXR1cm4gbmV3IFBsdWdpbih7XHJcbiAgICAgICAgICAgIC8vIHdlIHJlZ2lzdGVyIGEgZ2xvYmFsIGRyYWcgaGFuZGxlciB0byB0cmFjayB0aGUgY3VycmVudCBkcmFnIHNvdXJjZSBlbGVtZW50XHJcbiAgICAgICAgICAgIHZpZXcodmlldykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaGFuZGxlRHJhZ3N0YXJ0ID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgICAgICAgICAgICAgIGRyYWdTb3VyY2VFbGVtZW50ID0gKChfYSA9IHZpZXcuZG9tLnBhcmVudEVsZW1lbnQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jb250YWlucyhldmVudC50YXJnZXQpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHZpZXcuZG9tLnBhcmVudEVsZW1lbnRcclxuICAgICAgICAgICAgICAgICAgICAgICAgOiBudWxsO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdkcmFnc3RhcnQnLCBoYW5kbGVEcmFnc3RhcnQpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICBkZXN0cm95KCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignZHJhZ3N0YXJ0JywgaGFuZGxlRHJhZ3N0YXJ0KTtcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcHJvcHM6IHtcclxuICAgICAgICAgICAgICAgIGhhbmRsZURPTUV2ZW50czoge1xyXG4gICAgICAgICAgICAgICAgICAgIGRyb3A6IHZpZXcgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpc0Ryb3BwZWRGcm9tUHJvc2VNaXJyb3IgPSBkcmFnU291cmNlRWxlbWVudCA9PT0gdmlldy5kb20ucGFyZW50RWxlbWVudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgcGFzdGU6ICh2aWV3LCBldmVudCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGh0bWwgPSAoX2EgPSBldmVudC5jbGlwYm9hcmREYXRhKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZ2V0RGF0YSgndGV4dC9odG1sJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzUGFzdGVkRnJvbVByb3NlTWlycm9yID0gISEoaHRtbCA9PT0gbnVsbCB8fCBodG1sID09PSB2b2lkIDAgPyB2b2lkIDAgOiBodG1sLmluY2x1ZGVzKCdkYXRhLXBtLXNsaWNlJykpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGFwcGVuZFRyYW5zYWN0aW9uOiAodHJhbnNhY3Rpb25zLCBvbGRTdGF0ZSwgc3RhdGUpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRyYW5zYWN0aW9uID0gdHJhbnNhY3Rpb25zWzBdO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaXNQYXN0ZSA9IHRyYW5zYWN0aW9uLmdldE1ldGEoJ3VpRXZlbnQnKSA9PT0gJ3Bhc3RlJyAmJiAhaXNQYXN0ZWRGcm9tUHJvc2VNaXJyb3I7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpc0Ryb3AgPSB0cmFuc2FjdGlvbi5nZXRNZXRhKCd1aUV2ZW50JykgPT09ICdkcm9wJyAmJiAhaXNEcm9wcGVkRnJvbVByb3NlTWlycm9yO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFpc1Bhc3RlICYmICFpc0Ryb3ApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBzdG9wIGlmIHRoZXJlIGlzIG5vIGNoYW5nZWQgcmFuZ2VcclxuICAgICAgICAgICAgICAgIGNvbnN0IGZyb20gPSBvbGRTdGF0ZS5kb2MuY29udGVudC5maW5kRGlmZlN0YXJ0KHN0YXRlLmRvYy5jb250ZW50KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRvID0gb2xkU3RhdGUuZG9jLmNvbnRlbnQuZmluZERpZmZFbmQoc3RhdGUuZG9jLmNvbnRlbnQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFpc051bWJlcihmcm9tKSB8fCAhdG8gfHwgZnJvbSA9PT0gdG8uYikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIGJ1aWxkIGEgY2hhaW5hYmxlIHN0YXRlXHJcbiAgICAgICAgICAgICAgICAvLyBzbyB3ZSBjYW4gdXNlIGEgc2luZ2xlIHRyYW5zYWN0aW9uIGZvciBhbGwgcGFzdGUgcnVsZXNcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRyID0gc3RhdGUudHI7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjaGFpbmFibGVTdGF0ZSA9IGNyZWF0ZUNoYWluYWJsZVN0YXRlKHtcclxuICAgICAgICAgICAgICAgICAgICBzdGF0ZSxcclxuICAgICAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbjogdHIsXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGhhbmRsZXIgPSBydW4oe1xyXG4gICAgICAgICAgICAgICAgICAgIGVkaXRvcixcclxuICAgICAgICAgICAgICAgICAgICBzdGF0ZTogY2hhaW5hYmxlU3RhdGUsXHJcbiAgICAgICAgICAgICAgICAgICAgZnJvbTogTWF0aC5tYXgoZnJvbSAtIDEsIDApLFxyXG4gICAgICAgICAgICAgICAgICAgIHRvOiB0by5iLFxyXG4gICAgICAgICAgICAgICAgICAgIHJ1bGUsXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIC8vIHN0b3AgaWYgdGhlcmUgYXJlIG5vIGNoYW5nZXNcclxuICAgICAgICAgICAgICAgIGlmICghaGFuZGxlciB8fCAhdHIuc3RlcHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRyO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gcGx1Z2lucztcclxufVxuXG5mdW5jdGlvbiBmaW5kRHVwbGljYXRlcyhpdGVtcykge1xyXG4gICAgY29uc3QgZmlsdGVyZWQgPSBpdGVtcy5maWx0ZXIoKGVsLCBpbmRleCkgPT4gaXRlbXMuaW5kZXhPZihlbCkgIT09IGluZGV4KTtcclxuICAgIHJldHVybiBbLi4ubmV3IFNldChmaWx0ZXJlZCldO1xyXG59XG5cbmNsYXNzIEV4dGVuc2lvbk1hbmFnZXIge1xyXG4gICAgY29uc3RydWN0b3IoZXh0ZW5zaW9ucywgZWRpdG9yKSB7XHJcbiAgICAgICAgdGhpcy5zcGxpdHRhYmxlTWFya3MgPSBbXTtcclxuICAgICAgICB0aGlzLmVkaXRvciA9IGVkaXRvcjtcclxuICAgICAgICB0aGlzLmV4dGVuc2lvbnMgPSBFeHRlbnNpb25NYW5hZ2VyLnJlc29sdmUoZXh0ZW5zaW9ucyk7XHJcbiAgICAgICAgdGhpcy5zY2hlbWEgPSBnZXRTY2hlbWFCeVJlc29sdmVkRXh0ZW5zaW9ucyh0aGlzLmV4dGVuc2lvbnMpO1xyXG4gICAgICAgIHRoaXMuZXh0ZW5zaW9ucy5mb3JFYWNoKGV4dGVuc2lvbiA9PiB7XHJcbiAgICAgICAgICAgIHZhciBfYTtcclxuICAgICAgICAgICAgLy8gc3RvcmUgZXh0ZW5zaW9uIHN0b3JhZ2UgaW4gZWRpdG9yXHJcbiAgICAgICAgICAgIHRoaXMuZWRpdG9yLmV4dGVuc2lvblN0b3JhZ2VbZXh0ZW5zaW9uLm5hbWVdID0gZXh0ZW5zaW9uLnN0b3JhZ2U7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbnRleHQgPSB7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiBleHRlbnNpb24ubmFtZSxcclxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IGV4dGVuc2lvbi5vcHRpb25zLFxyXG4gICAgICAgICAgICAgICAgc3RvcmFnZTogZXh0ZW5zaW9uLnN0b3JhZ2UsXHJcbiAgICAgICAgICAgICAgICBlZGl0b3I6IHRoaXMuZWRpdG9yLFxyXG4gICAgICAgICAgICAgICAgdHlwZTogZ2V0U2NoZW1hVHlwZUJ5TmFtZShleHRlbnNpb24ubmFtZSwgdGhpcy5zY2hlbWEpLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBpZiAoZXh0ZW5zaW9uLnR5cGUgPT09ICdtYXJrJykge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qga2VlcE9uU3BsaXQgPSAoX2EgPSBjYWxsT3JSZXR1cm4oZ2V0RXh0ZW5zaW9uRmllbGQoZXh0ZW5zaW9uLCAna2VlcE9uU3BsaXQnLCBjb250ZXh0KSkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHRydWU7XHJcbiAgICAgICAgICAgICAgICBpZiAoa2VlcE9uU3BsaXQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNwbGl0dGFibGVNYXJrcy5wdXNoKGV4dGVuc2lvbi5uYW1lKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBvbkJlZm9yZUNyZWF0ZSA9IGdldEV4dGVuc2lvbkZpZWxkKGV4dGVuc2lvbiwgJ29uQmVmb3JlQ3JlYXRlJywgY29udGV4dCk7XHJcbiAgICAgICAgICAgIGlmIChvbkJlZm9yZUNyZWF0ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lZGl0b3Iub24oJ2JlZm9yZUNyZWF0ZScsIG9uQmVmb3JlQ3JlYXRlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBvbkNyZWF0ZSA9IGdldEV4dGVuc2lvbkZpZWxkKGV4dGVuc2lvbiwgJ29uQ3JlYXRlJywgY29udGV4dCk7XHJcbiAgICAgICAgICAgIGlmIChvbkNyZWF0ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lZGl0b3Iub24oJ2NyZWF0ZScsIG9uQ3JlYXRlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBvblVwZGF0ZSA9IGdldEV4dGVuc2lvbkZpZWxkKGV4dGVuc2lvbiwgJ29uVXBkYXRlJywgY29udGV4dCk7XHJcbiAgICAgICAgICAgIGlmIChvblVwZGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lZGl0b3Iub24oJ3VwZGF0ZScsIG9uVXBkYXRlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBvblNlbGVjdGlvblVwZGF0ZSA9IGdldEV4dGVuc2lvbkZpZWxkKGV4dGVuc2lvbiwgJ29uU2VsZWN0aW9uVXBkYXRlJywgY29udGV4dCk7XHJcbiAgICAgICAgICAgIGlmIChvblNlbGVjdGlvblVwZGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lZGl0b3Iub24oJ3NlbGVjdGlvblVwZGF0ZScsIG9uU2VsZWN0aW9uVXBkYXRlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBvblRyYW5zYWN0aW9uID0gZ2V0RXh0ZW5zaW9uRmllbGQoZXh0ZW5zaW9uLCAnb25UcmFuc2FjdGlvbicsIGNvbnRleHQpO1xyXG4gICAgICAgICAgICBpZiAob25UcmFuc2FjdGlvbikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lZGl0b3Iub24oJ3RyYW5zYWN0aW9uJywgb25UcmFuc2FjdGlvbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3Qgb25Gb2N1cyA9IGdldEV4dGVuc2lvbkZpZWxkKGV4dGVuc2lvbiwgJ29uRm9jdXMnLCBjb250ZXh0KTtcclxuICAgICAgICAgICAgaWYgKG9uRm9jdXMpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZWRpdG9yLm9uKCdmb2N1cycsIG9uRm9jdXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IG9uQmx1ciA9IGdldEV4dGVuc2lvbkZpZWxkKGV4dGVuc2lvbiwgJ29uQmx1cicsIGNvbnRleHQpO1xyXG4gICAgICAgICAgICBpZiAob25CbHVyKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVkaXRvci5vbignYmx1cicsIG9uQmx1cik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3Qgb25EZXN0cm95ID0gZ2V0RXh0ZW5zaW9uRmllbGQoZXh0ZW5zaW9uLCAnb25EZXN0cm95JywgY29udGV4dCk7XHJcbiAgICAgICAgICAgIGlmIChvbkRlc3Ryb3kpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZWRpdG9yLm9uKCdkZXN0cm95Jywgb25EZXN0cm95KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIHJlc29sdmUoZXh0ZW5zaW9ucykge1xyXG4gICAgICAgIGNvbnN0IHJlc29sdmVkRXh0ZW5zaW9ucyA9IEV4dGVuc2lvbk1hbmFnZXIuc29ydChFeHRlbnNpb25NYW5hZ2VyLmZsYXR0ZW4oZXh0ZW5zaW9ucykpO1xyXG4gICAgICAgIGNvbnN0IGR1cGxpY2F0ZWROYW1lcyA9IGZpbmREdXBsaWNhdGVzKHJlc29sdmVkRXh0ZW5zaW9ucy5tYXAoZXh0ZW5zaW9uID0+IGV4dGVuc2lvbi5uYW1lKSk7XHJcbiAgICAgICAgaWYgKGR1cGxpY2F0ZWROYW1lcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKGBbdGlwdGFwIHdhcm5dOiBEdXBsaWNhdGUgZXh0ZW5zaW9uIG5hbWVzIGZvdW5kOiBbJHtkdXBsaWNhdGVkTmFtZXMubWFwKGl0ZW0gPT4gYCcke2l0ZW19J2ApLmpvaW4oJywgJyl9XS4gVGhpcyBjYW4gbGVhZCB0byBpc3N1ZXMuYCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXNvbHZlZEV4dGVuc2lvbnM7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgZmxhdHRlbihleHRlbnNpb25zKSB7XHJcbiAgICAgICAgcmV0dXJuIGV4dGVuc2lvbnNcclxuICAgICAgICAgICAgLm1hcChleHRlbnNpb24gPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBjb250ZXh0ID0ge1xyXG4gICAgICAgICAgICAgICAgbmFtZTogZXh0ZW5zaW9uLm5hbWUsXHJcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBleHRlbnNpb24ub3B0aW9ucyxcclxuICAgICAgICAgICAgICAgIHN0b3JhZ2U6IGV4dGVuc2lvbi5zdG9yYWdlLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBjb25zdCBhZGRFeHRlbnNpb25zID0gZ2V0RXh0ZW5zaW9uRmllbGQoZXh0ZW5zaW9uLCAnYWRkRXh0ZW5zaW9ucycsIGNvbnRleHQpO1xyXG4gICAgICAgICAgICBpZiAoYWRkRXh0ZW5zaW9ucykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgICAgICAgICBleHRlbnNpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgLi4udGhpcy5mbGF0dGVuKGFkZEV4dGVuc2lvbnMoKSksXHJcbiAgICAgICAgICAgICAgICBdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBleHRlbnNpb247XHJcbiAgICAgICAgfSlcclxuICAgICAgICAgICAgLy8gYEluZmluaXR5YCB3aWxsIGJyZWFrIFR5cGVTY3JpcHQgc28gd2Ugc2V0IGEgbnVtYmVyIHRoYXQgaXMgcHJvYmFibHkgaGlnaCBlbm91Z2hcclxuICAgICAgICAgICAgLmZsYXQoMTApO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIHNvcnQoZXh0ZW5zaW9ucykge1xyXG4gICAgICAgIGNvbnN0IGRlZmF1bHRQcmlvcml0eSA9IDEwMDtcclxuICAgICAgICByZXR1cm4gZXh0ZW5zaW9ucy5zb3J0KChhLCBiKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHByaW9yaXR5QSA9IGdldEV4dGVuc2lvbkZpZWxkKGEsICdwcmlvcml0eScpIHx8IGRlZmF1bHRQcmlvcml0eTtcclxuICAgICAgICAgICAgY29uc3QgcHJpb3JpdHlCID0gZ2V0RXh0ZW5zaW9uRmllbGQoYiwgJ3ByaW9yaXR5JykgfHwgZGVmYXVsdFByaW9yaXR5O1xyXG4gICAgICAgICAgICBpZiAocHJpb3JpdHlBID4gcHJpb3JpdHlCKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gLTE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHByaW9yaXR5QSA8IHByaW9yaXR5Qikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBnZXQgY29tbWFuZHMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZXh0ZW5zaW9ucy5yZWR1Y2UoKGNvbW1hbmRzLCBleHRlbnNpb24pID0+IHtcclxuICAgICAgICAgICAgY29uc3QgY29udGV4dCA9IHtcclxuICAgICAgICAgICAgICAgIG5hbWU6IGV4dGVuc2lvbi5uYW1lLFxyXG4gICAgICAgICAgICAgICAgb3B0aW9uczogZXh0ZW5zaW9uLm9wdGlvbnMsXHJcbiAgICAgICAgICAgICAgICBzdG9yYWdlOiBleHRlbnNpb24uc3RvcmFnZSxcclxuICAgICAgICAgICAgICAgIGVkaXRvcjogdGhpcy5lZGl0b3IsXHJcbiAgICAgICAgICAgICAgICB0eXBlOiBnZXRTY2hlbWFUeXBlQnlOYW1lKGV4dGVuc2lvbi5uYW1lLCB0aGlzLnNjaGVtYSksXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGNvbnN0IGFkZENvbW1hbmRzID0gZ2V0RXh0ZW5zaW9uRmllbGQoZXh0ZW5zaW9uLCAnYWRkQ29tbWFuZHMnLCBjb250ZXh0KTtcclxuICAgICAgICAgICAgaWYgKCFhZGRDb21tYW5kcykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1hbmRzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAuLi5jb21tYW5kcyxcclxuICAgICAgICAgICAgICAgIC4uLmFkZENvbW1hbmRzKCksXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSwge30pO1xyXG4gICAgfVxyXG4gICAgZ2V0IHBsdWdpbnMoKSB7XHJcbiAgICAgICAgY29uc3QgeyBlZGl0b3IgfSA9IHRoaXM7XHJcbiAgICAgICAgLy8gV2l0aCBQcm9zZU1pcnJvciwgZmlyc3QgcGx1Z2lucyB3aXRoaW4gYW4gYXJyYXkgYXJlIGV4ZWN1dGVkIGZpcnN0LlxyXG4gICAgICAgIC8vIEluIHRpcHRhcCwgd2UgcHJvdmlkZSB0aGUgYWJpbGl0eSB0byBvdmVycmlkZSBwbHVnaW5zLFxyXG4gICAgICAgIC8vIHNvIGl0IGZlZWxzIG1vcmUgbmF0dXJhbCB0byBydW4gcGx1Z2lucyBhdCB0aGUgZW5kIG9mIGFuIGFycmF5IGZpcnN0LlxyXG4gICAgICAgIC8vIFRoYXTigJlzIHdoeSB3ZSBoYXZlIHRvIHJldmVyc2UgdGhlIGBleHRlbnNpb25zYCBhcnJheSBhbmQgc29ydCBhZ2FpblxyXG4gICAgICAgIC8vIGJhc2VkIG9uIHRoZSBgcHJpb3JpdHlgIG9wdGlvbi5cclxuICAgICAgICBjb25zdCBleHRlbnNpb25zID0gRXh0ZW5zaW9uTWFuYWdlci5zb3J0KFsuLi50aGlzLmV4dGVuc2lvbnNdLnJldmVyc2UoKSk7XHJcbiAgICAgICAgY29uc3QgaW5wdXRSdWxlcyA9IFtdO1xyXG4gICAgICAgIGNvbnN0IHBhc3RlUnVsZXMgPSBbXTtcclxuICAgICAgICBjb25zdCBhbGxQbHVnaW5zID0gZXh0ZW5zaW9uc1xyXG4gICAgICAgICAgICAubWFwKGV4dGVuc2lvbiA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbnRleHQgPSB7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiBleHRlbnNpb24ubmFtZSxcclxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IGV4dGVuc2lvbi5vcHRpb25zLFxyXG4gICAgICAgICAgICAgICAgc3RvcmFnZTogZXh0ZW5zaW9uLnN0b3JhZ2UsXHJcbiAgICAgICAgICAgICAgICBlZGl0b3IsXHJcbiAgICAgICAgICAgICAgICB0eXBlOiBnZXRTY2hlbWFUeXBlQnlOYW1lKGV4dGVuc2lvbi5uYW1lLCB0aGlzLnNjaGVtYSksXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGNvbnN0IHBsdWdpbnMgPSBbXTtcclxuICAgICAgICAgICAgY29uc3QgYWRkS2V5Ym9hcmRTaG9ydGN1dHMgPSBnZXRFeHRlbnNpb25GaWVsZChleHRlbnNpb24sICdhZGRLZXlib2FyZFNob3J0Y3V0cycsIGNvbnRleHQpO1xyXG4gICAgICAgICAgICBpZiAoYWRkS2V5Ym9hcmRTaG9ydGN1dHMpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGJpbmRpbmdzID0gT2JqZWN0LmZyb21FbnRyaWVzKE9iamVjdFxyXG4gICAgICAgICAgICAgICAgICAgIC5lbnRyaWVzKGFkZEtleWJvYXJkU2hvcnRjdXRzKCkpXHJcbiAgICAgICAgICAgICAgICAgICAgLm1hcCgoW3Nob3J0Y3V0LCBtZXRob2RdKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtzaG9ydGN1dCwgKCkgPT4gbWV0aG9kKHsgZWRpdG9yIH0pXTtcclxuICAgICAgICAgICAgICAgIH0pKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGtleU1hcFBsdWdpbiA9IGtleW1hcChiaW5kaW5ncyk7XHJcbiAgICAgICAgICAgICAgICBwbHVnaW5zLnB1c2goa2V5TWFwUGx1Z2luKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBhZGRJbnB1dFJ1bGVzID0gZ2V0RXh0ZW5zaW9uRmllbGQoZXh0ZW5zaW9uLCAnYWRkSW5wdXRSdWxlcycsIGNvbnRleHQpO1xyXG4gICAgICAgICAgICBpZiAoaXNFeHRlbnNpb25SdWxlc0VuYWJsZWQoZXh0ZW5zaW9uLCBlZGl0b3Iub3B0aW9ucy5lbmFibGVJbnB1dFJ1bGVzKSAmJiBhZGRJbnB1dFJ1bGVzKSB7XHJcbiAgICAgICAgICAgICAgICBpbnB1dFJ1bGVzLnB1c2goLi4uYWRkSW5wdXRSdWxlcygpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBhZGRQYXN0ZVJ1bGVzID0gZ2V0RXh0ZW5zaW9uRmllbGQoZXh0ZW5zaW9uLCAnYWRkUGFzdGVSdWxlcycsIGNvbnRleHQpO1xyXG4gICAgICAgICAgICBpZiAoaXNFeHRlbnNpb25SdWxlc0VuYWJsZWQoZXh0ZW5zaW9uLCBlZGl0b3Iub3B0aW9ucy5lbmFibGVQYXN0ZVJ1bGVzKSAmJiBhZGRQYXN0ZVJ1bGVzKSB7XHJcbiAgICAgICAgICAgICAgICBwYXN0ZVJ1bGVzLnB1c2goLi4uYWRkUGFzdGVSdWxlcygpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBhZGRQcm9zZU1pcnJvclBsdWdpbnMgPSBnZXRFeHRlbnNpb25GaWVsZChleHRlbnNpb24sICdhZGRQcm9zZU1pcnJvclBsdWdpbnMnLCBjb250ZXh0KTtcclxuICAgICAgICAgICAgaWYgKGFkZFByb3NlTWlycm9yUGx1Z2lucykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcHJvc2VNaXJyb3JQbHVnaW5zID0gYWRkUHJvc2VNaXJyb3JQbHVnaW5zKCk7XHJcbiAgICAgICAgICAgICAgICBwbHVnaW5zLnB1c2goLi4ucHJvc2VNaXJyb3JQbHVnaW5zKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcGx1Z2lucztcclxuICAgICAgICB9KVxyXG4gICAgICAgICAgICAuZmxhdCgpO1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIGlucHV0UnVsZXNQbHVnaW4oe1xyXG4gICAgICAgICAgICAgICAgZWRpdG9yLFxyXG4gICAgICAgICAgICAgICAgcnVsZXM6IGlucHV0UnVsZXMsXHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAuLi5wYXN0ZVJ1bGVzUGx1Z2luKHtcclxuICAgICAgICAgICAgICAgIGVkaXRvcixcclxuICAgICAgICAgICAgICAgIHJ1bGVzOiBwYXN0ZVJ1bGVzLFxyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgLi4uYWxsUGx1Z2lucyxcclxuICAgICAgICBdO1xyXG4gICAgfVxyXG4gICAgZ2V0IGF0dHJpYnV0ZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIGdldEF0dHJpYnV0ZXNGcm9tRXh0ZW5zaW9ucyh0aGlzLmV4dGVuc2lvbnMpO1xyXG4gICAgfVxyXG4gICAgZ2V0IG5vZGVWaWV3cygpIHtcclxuICAgICAgICBjb25zdCB7IGVkaXRvciB9ID0gdGhpcztcclxuICAgICAgICBjb25zdCB7IG5vZGVFeHRlbnNpb25zIH0gPSBzcGxpdEV4dGVuc2lvbnModGhpcy5leHRlbnNpb25zKTtcclxuICAgICAgICByZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKG5vZGVFeHRlbnNpb25zXHJcbiAgICAgICAgICAgIC5maWx0ZXIoZXh0ZW5zaW9uID0+ICEhZ2V0RXh0ZW5zaW9uRmllbGQoZXh0ZW5zaW9uLCAnYWRkTm9kZVZpZXcnKSlcclxuICAgICAgICAgICAgLm1hcChleHRlbnNpb24gPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBleHRlbnNpb25BdHRyaWJ1dGVzID0gdGhpcy5hdHRyaWJ1dGVzLmZpbHRlcihhdHRyaWJ1dGUgPT4gYXR0cmlidXRlLnR5cGUgPT09IGV4dGVuc2lvbi5uYW1lKTtcclxuICAgICAgICAgICAgY29uc3QgY29udGV4dCA9IHtcclxuICAgICAgICAgICAgICAgIG5hbWU6IGV4dGVuc2lvbi5uYW1lLFxyXG4gICAgICAgICAgICAgICAgb3B0aW9uczogZXh0ZW5zaW9uLm9wdGlvbnMsXHJcbiAgICAgICAgICAgICAgICBzdG9yYWdlOiBleHRlbnNpb24uc3RvcmFnZSxcclxuICAgICAgICAgICAgICAgIGVkaXRvcixcclxuICAgICAgICAgICAgICAgIHR5cGU6IGdldE5vZGVUeXBlKGV4dGVuc2lvbi5uYW1lLCB0aGlzLnNjaGVtYSksXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGNvbnN0IGFkZE5vZGVWaWV3ID0gZ2V0RXh0ZW5zaW9uRmllbGQoZXh0ZW5zaW9uLCAnYWRkTm9kZVZpZXcnLCBjb250ZXh0KTtcclxuICAgICAgICAgICAgaWYgKCFhZGROb2RlVmlldykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IG5vZGV2aWV3ID0gKG5vZGUsIHZpZXcsIGdldFBvcywgZGVjb3JhdGlvbnMpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IEhUTUxBdHRyaWJ1dGVzID0gZ2V0UmVuZGVyZWRBdHRyaWJ1dGVzKG5vZGUsIGV4dGVuc2lvbkF0dHJpYnV0ZXMpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFkZE5vZGVWaWV3KCkoe1xyXG4gICAgICAgICAgICAgICAgICAgIGVkaXRvcixcclxuICAgICAgICAgICAgICAgICAgICBub2RlLFxyXG4gICAgICAgICAgICAgICAgICAgIGdldFBvcyxcclxuICAgICAgICAgICAgICAgICAgICBkZWNvcmF0aW9ucyxcclxuICAgICAgICAgICAgICAgICAgICBIVE1MQXR0cmlidXRlcyxcclxuICAgICAgICAgICAgICAgICAgICBleHRlbnNpb24sXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgcmV0dXJuIFtleHRlbnNpb24ubmFtZSwgbm9kZXZpZXddO1xyXG4gICAgICAgIH0pKTtcclxuICAgIH1cclxufVxuXG4vLyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9tZXNxdWVlYi9pcy13aGF0L2Jsb2IvODhkNmU0Y2E5MmZiMmJhYWI2MDAzYzU0ZTAyZWVkZjRlNzI5ZTVhYi9zcmMvaW5kZXgudHNcclxuZnVuY3Rpb24gZ2V0VHlwZSh2YWx1ZSkge1xyXG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkuc2xpY2UoOCwgLTEpO1xyXG59XHJcbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsdWUpIHtcclxuICAgIGlmIChnZXRUeXBlKHZhbHVlKSAhPT0gJ09iamVjdCcpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdmFsdWUuY29uc3RydWN0b3IgPT09IE9iamVjdCAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsdWUpID09PSBPYmplY3QucHJvdG90eXBlO1xyXG59XG5cbmZ1bmN0aW9uIG1lcmdlRGVlcCh0YXJnZXQsIHNvdXJjZSkge1xyXG4gICAgY29uc3Qgb3V0cHV0ID0geyAuLi50YXJnZXQgfTtcclxuICAgIGlmIChpc1BsYWluT2JqZWN0KHRhcmdldCkgJiYgaXNQbGFpbk9iamVjdChzb3VyY2UpKSB7XHJcbiAgICAgICAgT2JqZWN0LmtleXMoc291cmNlKS5mb3JFYWNoKGtleSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChpc1BsYWluT2JqZWN0KHNvdXJjZVtrZXldKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCEoa2V5IGluIHRhcmdldCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKG91dHB1dCwgeyBba2V5XTogc291cmNlW2tleV0gfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBvdXRwdXRba2V5XSA9IG1lcmdlRGVlcCh0YXJnZXRba2V5XSwgc291cmNlW2tleV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihvdXRwdXQsIHsgW2tleV06IHNvdXJjZVtrZXldIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gb3V0cHV0O1xyXG59XG5cbmNsYXNzIEV4dGVuc2lvbiB7XHJcbiAgICBjb25zdHJ1Y3Rvcihjb25maWcgPSB7fSkge1xyXG4gICAgICAgIHRoaXMudHlwZSA9ICdleHRlbnNpb24nO1xyXG4gICAgICAgIHRoaXMubmFtZSA9ICdleHRlbnNpb24nO1xyXG4gICAgICAgIHRoaXMucGFyZW50ID0gbnVsbDtcclxuICAgICAgICB0aGlzLmNoaWxkID0gbnVsbDtcclxuICAgICAgICB0aGlzLmNvbmZpZyA9IHtcclxuICAgICAgICAgICAgbmFtZTogdGhpcy5uYW1lLFxyXG4gICAgICAgICAgICBkZWZhdWx0T3B0aW9uczoge30sXHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmNvbmZpZyA9IHtcclxuICAgICAgICAgICAgLi4udGhpcy5jb25maWcsXHJcbiAgICAgICAgICAgIC4uLmNvbmZpZyxcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMubmFtZSA9IHRoaXMuY29uZmlnLm5hbWU7XHJcbiAgICAgICAgaWYgKGNvbmZpZy5kZWZhdWx0T3B0aW9ucykge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYFt0aXB0YXAgd2Fybl06IEJSRUFLSU5HIENIQU5HRTogXCJkZWZhdWx0T3B0aW9uc1wiIGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgXCJhZGRPcHRpb25zXCIgaW5zdGVhZC4gRm91bmQgaW4gZXh0ZW5zaW9uOiBcIiR7dGhpcy5uYW1lfVwiLmApO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBUT0RPOiByZW1vdmUgYGFkZE9wdGlvbnNgIGZhbGxiYWNrXHJcbiAgICAgICAgdGhpcy5vcHRpb25zID0gdGhpcy5jb25maWcuZGVmYXVsdE9wdGlvbnM7XHJcbiAgICAgICAgaWYgKHRoaXMuY29uZmlnLmFkZE9wdGlvbnMpIHtcclxuICAgICAgICAgICAgdGhpcy5vcHRpb25zID0gY2FsbE9yUmV0dXJuKGdldEV4dGVuc2lvbkZpZWxkKHRoaXMsICdhZGRPcHRpb25zJywge1xyXG4gICAgICAgICAgICAgICAgbmFtZTogdGhpcy5uYW1lLFxyXG4gICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc3RvcmFnZSA9IGNhbGxPclJldHVybihnZXRFeHRlbnNpb25GaWVsZCh0aGlzLCAnYWRkU3RvcmFnZScsIHtcclxuICAgICAgICAgICAgbmFtZTogdGhpcy5uYW1lLFxyXG4gICAgICAgICAgICBvcHRpb25zOiB0aGlzLm9wdGlvbnMsXHJcbiAgICAgICAgfSkpIHx8IHt9O1xyXG4gICAgfVxyXG4gICAgc3RhdGljIGNyZWF0ZShjb25maWcgPSB7fSkge1xyXG4gICAgICAgIHJldHVybiBuZXcgRXh0ZW5zaW9uKGNvbmZpZyk7XHJcbiAgICB9XHJcbiAgICBjb25maWd1cmUob3B0aW9ucyA9IHt9KSB7XHJcbiAgICAgICAgLy8gcmV0dXJuIGEgbmV3IGluc3RhbmNlIHNvIHdlIGNhbiB1c2UgdGhlIHNhbWUgZXh0ZW5zaW9uXHJcbiAgICAgICAgLy8gd2l0aCBkaWZmZXJlbnQgY2FsbHMgb2YgYGNvbmZpZ3VyZWBcclxuICAgICAgICBjb25zdCBleHRlbnNpb24gPSB0aGlzLmV4dGVuZCgpO1xyXG4gICAgICAgIGV4dGVuc2lvbi5vcHRpb25zID0gbWVyZ2VEZWVwKHRoaXMub3B0aW9ucywgb3B0aW9ucyk7XHJcbiAgICAgICAgZXh0ZW5zaW9uLnN0b3JhZ2UgPSBjYWxsT3JSZXR1cm4oZ2V0RXh0ZW5zaW9uRmllbGQoZXh0ZW5zaW9uLCAnYWRkU3RvcmFnZScsIHtcclxuICAgICAgICAgICAgbmFtZTogZXh0ZW5zaW9uLm5hbWUsXHJcbiAgICAgICAgICAgIG9wdGlvbnM6IGV4dGVuc2lvbi5vcHRpb25zLFxyXG4gICAgICAgIH0pKTtcclxuICAgICAgICByZXR1cm4gZXh0ZW5zaW9uO1xyXG4gICAgfVxyXG4gICAgZXh0ZW5kKGV4dGVuZGVkQ29uZmlnID0ge30pIHtcclxuICAgICAgICBjb25zdCBleHRlbnNpb24gPSBuZXcgRXh0ZW5zaW9uKGV4dGVuZGVkQ29uZmlnKTtcclxuICAgICAgICBleHRlbnNpb24ucGFyZW50ID0gdGhpcztcclxuICAgICAgICB0aGlzLmNoaWxkID0gZXh0ZW5zaW9uO1xyXG4gICAgICAgIGV4dGVuc2lvbi5uYW1lID0gZXh0ZW5kZWRDb25maWcubmFtZVxyXG4gICAgICAgICAgICA/IGV4dGVuZGVkQ29uZmlnLm5hbWVcclxuICAgICAgICAgICAgOiBleHRlbnNpb24ucGFyZW50Lm5hbWU7XHJcbiAgICAgICAgaWYgKGV4dGVuZGVkQ29uZmlnLmRlZmF1bHRPcHRpb25zKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgW3RpcHRhcCB3YXJuXTogQlJFQUtJTkcgQ0hBTkdFOiBcImRlZmF1bHRPcHRpb25zXCIgaXMgZGVwcmVjYXRlZC4gUGxlYXNlIHVzZSBcImFkZE9wdGlvbnNcIiBpbnN0ZWFkLiBGb3VuZCBpbiBleHRlbnNpb246IFwiJHtleHRlbnNpb24ubmFtZX1cIi5gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZXh0ZW5zaW9uLm9wdGlvbnMgPSBjYWxsT3JSZXR1cm4oZ2V0RXh0ZW5zaW9uRmllbGQoZXh0ZW5zaW9uLCAnYWRkT3B0aW9ucycsIHtcclxuICAgICAgICAgICAgbmFtZTogZXh0ZW5zaW9uLm5hbWUsXHJcbiAgICAgICAgfSkpO1xyXG4gICAgICAgIGV4dGVuc2lvbi5zdG9yYWdlID0gY2FsbE9yUmV0dXJuKGdldEV4dGVuc2lvbkZpZWxkKGV4dGVuc2lvbiwgJ2FkZFN0b3JhZ2UnLCB7XHJcbiAgICAgICAgICAgIG5hbWU6IGV4dGVuc2lvbi5uYW1lLFxyXG4gICAgICAgICAgICBvcHRpb25zOiBleHRlbnNpb24ub3B0aW9ucyxcclxuICAgICAgICB9KSk7XHJcbiAgICAgICAgcmV0dXJuIGV4dGVuc2lvbjtcclxuICAgIH1cclxufVxuXG5mdW5jdGlvbiBnZXRUZXh0QmV0d2VlbihzdGFydE5vZGUsIHJhbmdlLCBvcHRpb25zKSB7XHJcbiAgICBjb25zdCB7IGZyb20sIHRvIH0gPSByYW5nZTtcclxuICAgIGNvbnN0IHsgYmxvY2tTZXBhcmF0b3IgPSAnXFxuXFxuJywgdGV4dFNlcmlhbGl6ZXJzID0ge30sIH0gPSBvcHRpb25zIHx8IHt9O1xyXG4gICAgbGV0IHRleHQgPSAnJztcclxuICAgIGxldCBzZXBhcmF0ZWQgPSB0cnVlO1xyXG4gICAgc3RhcnROb2RlLm5vZGVzQmV0d2Vlbihmcm9tLCB0bywgKG5vZGUsIHBvcywgcGFyZW50LCBpbmRleCkgPT4ge1xyXG4gICAgICAgIHZhciBfYTtcclxuICAgICAgICBjb25zdCB0ZXh0U2VyaWFsaXplciA9IHRleHRTZXJpYWxpemVycyA9PT0gbnVsbCB8fCB0ZXh0U2VyaWFsaXplcnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHRleHRTZXJpYWxpemVyc1tub2RlLnR5cGUubmFtZV07XHJcbiAgICAgICAgaWYgKHRleHRTZXJpYWxpemVyKSB7XHJcbiAgICAgICAgICAgIGlmIChub2RlLmlzQmxvY2sgJiYgIXNlcGFyYXRlZCkge1xyXG4gICAgICAgICAgICAgICAgdGV4dCArPSBibG9ja1NlcGFyYXRvcjtcclxuICAgICAgICAgICAgICAgIHNlcGFyYXRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHBhcmVudCkge1xyXG4gICAgICAgICAgICAgICAgdGV4dCArPSB0ZXh0U2VyaWFsaXplcih7XHJcbiAgICAgICAgICAgICAgICAgICAgbm9kZSxcclxuICAgICAgICAgICAgICAgICAgICBwb3MsXHJcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50LFxyXG4gICAgICAgICAgICAgICAgICAgIGluZGV4LFxyXG4gICAgICAgICAgICAgICAgICAgIHJhbmdlLFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAobm9kZS5pc1RleHQpIHtcclxuICAgICAgICAgICAgdGV4dCArPSAoX2EgPSBub2RlID09PSBudWxsIHx8IG5vZGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG5vZGUudGV4dCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnNsaWNlKE1hdGgubWF4KGZyb20sIHBvcykgLSBwb3MsIHRvIC0gcG9zKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxyXG4gICAgICAgICAgICBzZXBhcmF0ZWQgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAobm9kZS5pc0Jsb2NrICYmICFzZXBhcmF0ZWQpIHtcclxuICAgICAgICAgICAgdGV4dCArPSBibG9ja1NlcGFyYXRvcjtcclxuICAgICAgICAgICAgc2VwYXJhdGVkID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIHJldHVybiB0ZXh0O1xyXG59XG5cbmZ1bmN0aW9uIGdldFRleHRTZXJpYWxpemVyc0Zyb21TY2hlbWEoc2NoZW1hKSB7XHJcbiAgICByZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKE9iamVjdFxyXG4gICAgICAgIC5lbnRyaWVzKHNjaGVtYS5ub2RlcylcclxuICAgICAgICAuZmlsdGVyKChbLCBub2RlXSkgPT4gbm9kZS5zcGVjLnRvVGV4dClcclxuICAgICAgICAubWFwKChbbmFtZSwgbm9kZV0pID0+IFtuYW1lLCBub2RlLnNwZWMudG9UZXh0XSkpO1xyXG59XG5cbmNvbnN0IENsaXBib2FyZFRleHRTZXJpYWxpemVyID0gRXh0ZW5zaW9uLmNyZWF0ZSh7XHJcbiAgICBuYW1lOiAnY2xpcGJvYXJkVGV4dFNlcmlhbGl6ZXInLFxyXG4gICAgYWRkUHJvc2VNaXJyb3JQbHVnaW5zKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIG5ldyBQbHVnaW4oe1xyXG4gICAgICAgICAgICAgICAga2V5OiBuZXcgUGx1Z2luS2V5KCdjbGlwYm9hcmRUZXh0U2VyaWFsaXplcicpLFxyXG4gICAgICAgICAgICAgICAgcHJvcHM6IHtcclxuICAgICAgICAgICAgICAgICAgICBjbGlwYm9hcmRUZXh0U2VyaWFsaXplcjogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB7IGVkaXRvciB9ID0gdGhpcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBzdGF0ZSwgc2NoZW1hIH0gPSBlZGl0b3I7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgZG9jLCBzZWxlY3Rpb24gfSA9IHN0YXRlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB7IHJhbmdlcyB9ID0gc2VsZWN0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmcm9tID0gTWF0aC5taW4oLi4ucmFuZ2VzLm1hcChyYW5nZSA9PiByYW5nZS4kZnJvbS5wb3MpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdG8gPSBNYXRoLm1heCguLi5yYW5nZXMubWFwKHJhbmdlID0+IHJhbmdlLiR0by5wb3MpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGV4dFNlcmlhbGl6ZXJzID0gZ2V0VGV4dFNlcmlhbGl6ZXJzRnJvbVNjaGVtYShzY2hlbWEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByYW5nZSA9IHsgZnJvbSwgdG8gfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdldFRleHRCZXR3ZWVuKGRvYywgcmFuZ2UsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHRTZXJpYWxpemVycyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgIF07XHJcbiAgICB9LFxyXG59KTtcblxuY29uc3QgYmx1ciA9ICgpID0+ICh7IGVkaXRvciwgdmlldyB9KSA9PiB7XHJcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xyXG4gICAgICAgIHZhciBfYTtcclxuICAgICAgICBpZiAoIWVkaXRvci5pc0Rlc3Ryb3llZCkge1xyXG4gICAgICAgICAgICB2aWV3LmRvbS5ibHVyKCk7XHJcbiAgICAgICAgICAgIC8vIEJyb3dzZXJzIHNob3VsZCByZW1vdmUgdGhlIGNhcmV0IG9uIGJsdXIgYnV0IHNhZmFyaSBkb2VzIG5vdC5cclxuICAgICAgICAgICAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vdWViZXJkb3Npcy90aXB0YXAvaXNzdWVzLzI0MDVcclxuICAgICAgICAgICAgKF9hID0gd2luZG93ID09PSBudWxsIHx8IHdpbmRvdyA9PT0gdm9pZCAwID8gdm9pZCAwIDogd2luZG93LmdldFNlbGVjdGlvbigpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucmVtb3ZlQWxsUmFuZ2VzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufTtcblxuY29uc3QgY2xlYXJDb250ZW50ID0gKGVtaXRVcGRhdGUgPSBmYWxzZSkgPT4gKHsgY29tbWFuZHMgfSkgPT4ge1xyXG4gICAgcmV0dXJuIGNvbW1hbmRzLnNldENvbnRlbnQoJycsIGVtaXRVcGRhdGUpO1xyXG59O1xuXG5jb25zdCBjbGVhck5vZGVzID0gKCkgPT4gKHsgc3RhdGUsIHRyLCBkaXNwYXRjaCB9KSA9PiB7XHJcbiAgICBjb25zdCB7IHNlbGVjdGlvbiB9ID0gdHI7XHJcbiAgICBjb25zdCB7IHJhbmdlcyB9ID0gc2VsZWN0aW9uO1xyXG4gICAgaWYgKCFkaXNwYXRjaCkge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgcmFuZ2VzLmZvckVhY2goKHsgJGZyb20sICR0byB9KSA9PiB7XHJcbiAgICAgICAgc3RhdGUuZG9jLm5vZGVzQmV0d2VlbigkZnJvbS5wb3MsICR0by5wb3MsIChub2RlLCBwb3MpID0+IHtcclxuICAgICAgICAgICAgaWYgKG5vZGUudHlwZS5pc1RleHQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCB7IGRvYywgbWFwcGluZyB9ID0gdHI7XHJcbiAgICAgICAgICAgIGNvbnN0ICRtYXBwZWRGcm9tID0gZG9jLnJlc29sdmUobWFwcGluZy5tYXAocG9zKSk7XHJcbiAgICAgICAgICAgIGNvbnN0ICRtYXBwZWRUbyA9IGRvYy5yZXNvbHZlKG1hcHBpbmcubWFwKHBvcyArIG5vZGUubm9kZVNpemUpKTtcclxuICAgICAgICAgICAgY29uc3Qgbm9kZVJhbmdlID0gJG1hcHBlZEZyb20uYmxvY2tSYW5nZSgkbWFwcGVkVG8pO1xyXG4gICAgICAgICAgICBpZiAoIW5vZGVSYW5nZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldExpZnREZXB0aCA9IGxpZnRUYXJnZXQobm9kZVJhbmdlKTtcclxuICAgICAgICAgICAgaWYgKG5vZGUudHlwZS5pc1RleHRibG9jaykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgeyBkZWZhdWx0VHlwZSB9ID0gJG1hcHBlZEZyb20ucGFyZW50LmNvbnRlbnRNYXRjaEF0KCRtYXBwZWRGcm9tLmluZGV4KCkpO1xyXG4gICAgICAgICAgICAgICAgdHIuc2V0Tm9kZU1hcmt1cChub2RlUmFuZ2Uuc3RhcnQsIGRlZmF1bHRUeXBlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGFyZ2V0TGlmdERlcHRoIHx8IHRhcmdldExpZnREZXB0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgdHIubGlmdChub2RlUmFuZ2UsIHRhcmdldExpZnREZXB0aCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbn07XG5cbmNvbnN0IGNvbW1hbmQgPSBmbiA9PiBwcm9wcyA9PiB7XHJcbiAgICByZXR1cm4gZm4ocHJvcHMpO1xyXG59O1xuXG5jb25zdCBjcmVhdGVQYXJhZ3JhcGhOZWFyID0gKCkgPT4gKHsgc3RhdGUsIGRpc3BhdGNoIH0pID0+IHtcclxuICAgIHJldHVybiBjcmVhdGVQYXJhZ3JhcGhOZWFyJDEoc3RhdGUsIGRpc3BhdGNoKTtcclxufTtcblxuY29uc3QgZGVsZXRlTm9kZSA9IHR5cGVPck5hbWUgPT4gKHsgdHIsIHN0YXRlLCBkaXNwYXRjaCB9KSA9PiB7XHJcbiAgICBjb25zdCB0eXBlID0gZ2V0Tm9kZVR5cGUodHlwZU9yTmFtZSwgc3RhdGUuc2NoZW1hKTtcclxuICAgIGNvbnN0ICRwb3MgPSB0ci5zZWxlY3Rpb24uJGFuY2hvcjtcclxuICAgIGZvciAobGV0IGRlcHRoID0gJHBvcy5kZXB0aDsgZGVwdGggPiAwOyBkZXB0aCAtPSAxKSB7XHJcbiAgICAgICAgY29uc3Qgbm9kZSA9ICRwb3Mubm9kZShkZXB0aCk7XHJcbiAgICAgICAgaWYgKG5vZGUudHlwZSA9PT0gdHlwZSkge1xyXG4gICAgICAgICAgICBpZiAoZGlzcGF0Y2gpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGZyb20gPSAkcG9zLmJlZm9yZShkZXB0aCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0byA9ICRwb3MuYWZ0ZXIoZGVwdGgpO1xyXG4gICAgICAgICAgICAgICAgdHIuZGVsZXRlKGZyb20sIHRvKS5zY3JvbGxJbnRvVmlldygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBmYWxzZTtcclxufTtcblxuY29uc3QgZGVsZXRlUmFuZ2UgPSByYW5nZSA9PiAoeyB0ciwgZGlzcGF0Y2ggfSkgPT4ge1xyXG4gICAgY29uc3QgeyBmcm9tLCB0byB9ID0gcmFuZ2U7XHJcbiAgICBpZiAoZGlzcGF0Y2gpIHtcclxuICAgICAgICB0ci5kZWxldGUoZnJvbSwgdG8pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbn07XG5cbmNvbnN0IGRlbGV0ZVNlbGVjdGlvbiA9ICgpID0+ICh7IHN0YXRlLCBkaXNwYXRjaCB9KSA9PiB7XHJcbiAgICByZXR1cm4gZGVsZXRlU2VsZWN0aW9uJDEoc3RhdGUsIGRpc3BhdGNoKTtcclxufTtcblxuY29uc3QgZW50ZXIgPSAoKSA9PiAoeyBjb21tYW5kcyB9KSA9PiB7XHJcbiAgICByZXR1cm4gY29tbWFuZHMua2V5Ym9hcmRTaG9ydGN1dCgnRW50ZXInKTtcclxufTtcblxuY29uc3QgZXhpdENvZGUgPSAoKSA9PiAoeyBzdGF0ZSwgZGlzcGF0Y2ggfSkgPT4ge1xyXG4gICAgcmV0dXJuIGV4aXRDb2RlJDEoc3RhdGUsIGRpc3BhdGNoKTtcclxufTtcblxuLyoqXHJcbiAqIENoZWNrIGlmIG9iamVjdDEgaW5jbHVkZXMgb2JqZWN0MlxyXG4gKiBAcGFyYW0gb2JqZWN0MSBPYmplY3RcclxuICogQHBhcmFtIG9iamVjdDIgT2JqZWN0XHJcbiAqL1xyXG5mdW5jdGlvbiBvYmplY3RJbmNsdWRlcyhvYmplY3QxLCBvYmplY3QyLCBvcHRpb25zID0geyBzdHJpY3Q6IHRydWUgfSkge1xyXG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdDIpO1xyXG4gICAgaWYgKCFrZXlzLmxlbmd0aCkge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGtleXMuZXZlcnkoa2V5ID0+IHtcclxuICAgICAgICBpZiAob3B0aW9ucy5zdHJpY3QpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG9iamVjdDJba2V5XSA9PT0gb2JqZWN0MVtrZXldO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaXNSZWdFeHAob2JqZWN0MltrZXldKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gb2JqZWN0MltrZXldLnRlc3Qob2JqZWN0MVtrZXldKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG9iamVjdDJba2V5XSA9PT0gb2JqZWN0MVtrZXldO1xyXG4gICAgfSk7XHJcbn1cblxuZnVuY3Rpb24gZmluZE1hcmtJblNldChtYXJrcywgdHlwZSwgYXR0cmlidXRlcyA9IHt9KSB7XHJcbiAgICByZXR1cm4gbWFya3MuZmluZChpdGVtID0+IHtcclxuICAgICAgICByZXR1cm4gaXRlbS50eXBlID09PSB0eXBlICYmIG9iamVjdEluY2x1ZGVzKGl0ZW0uYXR0cnMsIGF0dHJpYnV0ZXMpO1xyXG4gICAgfSk7XHJcbn1cclxuZnVuY3Rpb24gaXNNYXJrSW5TZXQobWFya3MsIHR5cGUsIGF0dHJpYnV0ZXMgPSB7fSkge1xyXG4gICAgcmV0dXJuICEhZmluZE1hcmtJblNldChtYXJrcywgdHlwZSwgYXR0cmlidXRlcyk7XHJcbn1cclxuZnVuY3Rpb24gZ2V0TWFya1JhbmdlKCRwb3MsIHR5cGUsIGF0dHJpYnV0ZXMgPSB7fSkge1xyXG4gICAgaWYgKCEkcG9zIHx8ICF0eXBlKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgbGV0IHN0YXJ0ID0gJHBvcy5wYXJlbnQuY2hpbGRBZnRlcigkcG9zLnBhcmVudE9mZnNldCk7XHJcbiAgICBpZiAoJHBvcy5wYXJlbnRPZmZzZXQgPT09IHN0YXJ0Lm9mZnNldCAmJiBzdGFydC5vZmZzZXQgIT09IDApIHtcclxuICAgICAgICBzdGFydCA9ICRwb3MucGFyZW50LmNoaWxkQmVmb3JlKCRwb3MucGFyZW50T2Zmc2V0KTtcclxuICAgIH1cclxuICAgIGlmICghc3RhcnQubm9kZSkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGNvbnN0IG1hcmsgPSBmaW5kTWFya0luU2V0KFsuLi5zdGFydC5ub2RlLm1hcmtzXSwgdHlwZSwgYXR0cmlidXRlcyk7XHJcbiAgICBpZiAoIW1hcmspIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBsZXQgc3RhcnRJbmRleCA9IHN0YXJ0LmluZGV4O1xyXG4gICAgbGV0IHN0YXJ0UG9zID0gJHBvcy5zdGFydCgpICsgc3RhcnQub2Zmc2V0O1xyXG4gICAgbGV0IGVuZEluZGV4ID0gc3RhcnRJbmRleCArIDE7XHJcbiAgICBsZXQgZW5kUG9zID0gc3RhcnRQb3MgKyBzdGFydC5ub2RlLm5vZGVTaXplO1xyXG4gICAgZmluZE1hcmtJblNldChbLi4uc3RhcnQubm9kZS5tYXJrc10sIHR5cGUsIGF0dHJpYnV0ZXMpO1xyXG4gICAgd2hpbGUgKHN0YXJ0SW5kZXggPiAwICYmIG1hcmsuaXNJblNldCgkcG9zLnBhcmVudC5jaGlsZChzdGFydEluZGV4IC0gMSkubWFya3MpKSB7XHJcbiAgICAgICAgc3RhcnRJbmRleCAtPSAxO1xyXG4gICAgICAgIHN0YXJ0UG9zIC09ICRwb3MucGFyZW50LmNoaWxkKHN0YXJ0SW5kZXgpLm5vZGVTaXplO1xyXG4gICAgfVxyXG4gICAgd2hpbGUgKGVuZEluZGV4IDwgJHBvcy5wYXJlbnQuY2hpbGRDb3VudFxyXG4gICAgICAgICYmIGlzTWFya0luU2V0KFsuLi4kcG9zLnBhcmVudC5jaGlsZChlbmRJbmRleCkubWFya3NdLCB0eXBlLCBhdHRyaWJ1dGVzKSkge1xyXG4gICAgICAgIGVuZFBvcyArPSAkcG9zLnBhcmVudC5jaGlsZChlbmRJbmRleCkubm9kZVNpemU7XHJcbiAgICAgICAgZW5kSW5kZXggKz0gMTtcclxuICAgIH1cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgZnJvbTogc3RhcnRQb3MsXHJcbiAgICAgICAgdG86IGVuZFBvcyxcclxuICAgIH07XHJcbn1cblxuZnVuY3Rpb24gZ2V0TWFya1R5cGUobmFtZU9yVHlwZSwgc2NoZW1hKSB7XHJcbiAgICBpZiAodHlwZW9mIG5hbWVPclR5cGUgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgaWYgKCFzY2hlbWEubWFya3NbbmFtZU9yVHlwZV0pIHtcclxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoYFRoZXJlIGlzIG5vIG1hcmsgdHlwZSBuYW1lZCAnJHtuYW1lT3JUeXBlfScuIE1heWJlIHlvdSBmb3Jnb3QgdG8gYWRkIHRoZSBleHRlbnNpb24/YCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzY2hlbWEubWFya3NbbmFtZU9yVHlwZV07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmFtZU9yVHlwZTtcclxufVxuXG5jb25zdCBleHRlbmRNYXJrUmFuZ2UgPSAodHlwZU9yTmFtZSwgYXR0cmlidXRlcyA9IHt9KSA9PiAoeyB0ciwgc3RhdGUsIGRpc3BhdGNoIH0pID0+IHtcclxuICAgIGNvbnN0IHR5cGUgPSBnZXRNYXJrVHlwZSh0eXBlT3JOYW1lLCBzdGF0ZS5zY2hlbWEpO1xyXG4gICAgY29uc3QgeyBkb2MsIHNlbGVjdGlvbiB9ID0gdHI7XHJcbiAgICBjb25zdCB7ICRmcm9tLCBmcm9tLCB0byB9ID0gc2VsZWN0aW9uO1xyXG4gICAgaWYgKGRpc3BhdGNoKSB7XHJcbiAgICAgICAgY29uc3QgcmFuZ2UgPSBnZXRNYXJrUmFuZ2UoJGZyb20sIHR5cGUsIGF0dHJpYnV0ZXMpO1xyXG4gICAgICAgIGlmIChyYW5nZSAmJiByYW5nZS5mcm9tIDw9IGZyb20gJiYgcmFuZ2UudG8gPj0gdG8pIHtcclxuICAgICAgICAgICAgY29uc3QgbmV3U2VsZWN0aW9uID0gVGV4dFNlbGVjdGlvbi5jcmVhdGUoZG9jLCByYW5nZS5mcm9tLCByYW5nZS50byk7XHJcbiAgICAgICAgICAgIHRyLnNldFNlbGVjdGlvbihuZXdTZWxlY3Rpb24pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG59O1xuXG5jb25zdCBmaXJzdCA9IGNvbW1hbmRzID0+IHByb3BzID0+IHtcclxuICAgIGNvbnN0IGl0ZW1zID0gdHlwZW9mIGNvbW1hbmRzID09PSAnZnVuY3Rpb24nXHJcbiAgICAgICAgPyBjb21tYW5kcyhwcm9wcylcclxuICAgICAgICA6IGNvbW1hbmRzO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpdGVtcy5sZW5ndGg7IGkgKz0gMSkge1xyXG4gICAgICAgIGlmIChpdGVtc1tpXShwcm9wcykpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG59O1xuXG5mdW5jdGlvbiBpc0NsYXNzKHZhbHVlKSB7XHJcbiAgICB2YXIgX2E7XHJcbiAgICBpZiAoKChfYSA9IHZhbHVlLmNvbnN0cnVjdG9yKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudG9TdHJpbmcoKS5zdWJzdHJpbmcoMCwgNSkpICE9PSAnY2xhc3MnKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbn1cblxuZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcclxuICAgIHJldHVybiAodmFsdWVcclxuICAgICAgICAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnXHJcbiAgICAgICAgJiYgIUFycmF5LmlzQXJyYXkodmFsdWUpXHJcbiAgICAgICAgJiYgIWlzQ2xhc3ModmFsdWUpKTtcclxufVxuXG5mdW5jdGlvbiBpc1RleHRTZWxlY3Rpb24odmFsdWUpIHtcclxuICAgIHJldHVybiBpc09iamVjdCh2YWx1ZSkgJiYgdmFsdWUgaW5zdGFuY2VvZiBUZXh0U2VsZWN0aW9uO1xyXG59XG5cbmZ1bmN0aW9uIG1pbk1heCh2YWx1ZSA9IDAsIG1pbiA9IDAsIG1heCA9IDApIHtcclxuICAgIHJldHVybiBNYXRoLm1pbihNYXRoLm1heCh2YWx1ZSwgbWluKSwgbWF4KTtcclxufVxuXG5mdW5jdGlvbiByZXNvbHZlRm9jdXNQb3NpdGlvbihkb2MsIHBvc2l0aW9uID0gbnVsbCkge1xyXG4gICAgaWYgKCFwb3NpdGlvbikge1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gICAgY29uc3Qgc2VsZWN0aW9uQXRTdGFydCA9IFNlbGVjdGlvbi5hdFN0YXJ0KGRvYyk7XHJcbiAgICBjb25zdCBzZWxlY3Rpb25BdEVuZCA9IFNlbGVjdGlvbi5hdEVuZChkb2MpO1xyXG4gICAgaWYgKHBvc2l0aW9uID09PSAnc3RhcnQnIHx8IHBvc2l0aW9uID09PSB0cnVlKSB7XHJcbiAgICAgICAgcmV0dXJuIHNlbGVjdGlvbkF0U3RhcnQ7XHJcbiAgICB9XHJcbiAgICBpZiAocG9zaXRpb24gPT09ICdlbmQnKSB7XHJcbiAgICAgICAgcmV0dXJuIHNlbGVjdGlvbkF0RW5kO1xyXG4gICAgfVxyXG4gICAgY29uc3QgbWluUG9zID0gc2VsZWN0aW9uQXRTdGFydC5mcm9tO1xyXG4gICAgY29uc3QgbWF4UG9zID0gc2VsZWN0aW9uQXRFbmQudG87XHJcbiAgICBpZiAocG9zaXRpb24gPT09ICdhbGwnKSB7XHJcbiAgICAgICAgcmV0dXJuIFRleHRTZWxlY3Rpb24uY3JlYXRlKGRvYywgbWluTWF4KDAsIG1pblBvcywgbWF4UG9zKSwgbWluTWF4KGRvYy5jb250ZW50LnNpemUsIG1pblBvcywgbWF4UG9zKSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gVGV4dFNlbGVjdGlvbi5jcmVhdGUoZG9jLCBtaW5NYXgocG9zaXRpb24sIG1pblBvcywgbWF4UG9zKSwgbWluTWF4KHBvc2l0aW9uLCBtaW5Qb3MsIG1heFBvcykpO1xyXG59XG5cbmZ1bmN0aW9uIGlzaU9TKCkge1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAgICAnaVBhZCBTaW11bGF0b3InLFxyXG4gICAgICAgICdpUGhvbmUgU2ltdWxhdG9yJyxcclxuICAgICAgICAnaVBvZCBTaW11bGF0b3InLFxyXG4gICAgICAgICdpUGFkJyxcclxuICAgICAgICAnaVBob25lJyxcclxuICAgICAgICAnaVBvZCcsXHJcbiAgICBdLmluY2x1ZGVzKG5hdmlnYXRvci5wbGF0Zm9ybSlcclxuICAgICAgICAvLyBpUGFkIG9uIGlPUyAxMyBkZXRlY3Rpb25cclxuICAgICAgICB8fCAobmF2aWdhdG9yLnVzZXJBZ2VudC5pbmNsdWRlcygnTWFjJykgJiYgJ29udG91Y2hlbmQnIGluIGRvY3VtZW50KTtcclxufVxuXG5jb25zdCBmb2N1cyA9IChwb3NpdGlvbiA9IG51bGwsIG9wdGlvbnMgPSB7fSkgPT4gKHsgZWRpdG9yLCB2aWV3LCB0ciwgZGlzcGF0Y2gsIH0pID0+IHtcclxuICAgIG9wdGlvbnMgPSB7XHJcbiAgICAgICAgc2Nyb2xsSW50b1ZpZXc6IHRydWUsXHJcbiAgICAgICAgLi4ub3B0aW9ucyxcclxuICAgIH07XHJcbiAgICBjb25zdCBkZWxheWVkRm9jdXMgPSAoKSA9PiB7XHJcbiAgICAgICAgLy8gZm9jdXMgd2l0aGluIGByZXF1ZXN0QW5pbWF0aW9uRnJhbWVgIGJyZWFrcyBmb2N1cyBvbiBpT1NcclxuICAgICAgICAvLyBzbyB3ZSBoYXZlIHRvIGNhbGwgdGhpc1xyXG4gICAgICAgIGlmIChpc2lPUygpKSB7XHJcbiAgICAgICAgICAgIHZpZXcuZG9tLmZvY3VzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIEZvciBSZWFjdCB3ZSBoYXZlIHRvIGZvY3VzIGFzeW5jaHJvbm91c2x5LiBPdGhlcndpc2Ugd2lsZCB0aGluZ3MgaGFwcGVuLlxyXG4gICAgICAgIC8vIHNlZTogaHR0cHM6Ly9naXRodWIuY29tL3VlYmVyZG9zaXMvdGlwdGFwL2lzc3Vlcy8xNTIwXHJcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcclxuICAgICAgICAgICAgaWYgKCFlZGl0b3IuaXNEZXN0cm95ZWQpIHtcclxuICAgICAgICAgICAgICAgIHZpZXcuZm9jdXMoKTtcclxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuc2Nyb2xsSW50b1ZpZXcpIHtcclxuICAgICAgICAgICAgICAgICAgICBlZGl0b3IuY29tbWFuZHMuc2Nyb2xsSW50b1ZpZXcoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIGlmICgodmlldy5oYXNGb2N1cygpICYmIHBvc2l0aW9uID09PSBudWxsKSB8fCBwb3NpdGlvbiA9PT0gZmFsc2UpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIC8vIHdlIGRvbuKAmXQgdHJ5IHRvIHJlc29sdmUgYSBOb2RlU2VsZWN0aW9uIG9yIENlbGxTZWxlY3Rpb25cclxuICAgIGlmIChkaXNwYXRjaCAmJiBwb3NpdGlvbiA9PT0gbnVsbCAmJiAhaXNUZXh0U2VsZWN0aW9uKGVkaXRvci5zdGF0ZS5zZWxlY3Rpb24pKSB7XHJcbiAgICAgICAgZGVsYXllZEZvY3VzKCk7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICAvLyBwYXNzIHRocm91Z2ggdHIuZG9jIGluc3RlYWQgb2YgZWRpdG9yLnN0YXRlLmRvY1xyXG4gICAgLy8gc2luY2UgdHJhbnNhY3Rpb25zIGNvdWxkIGNoYW5nZSB0aGUgZWRpdG9ycyBzdGF0ZSBiZWZvcmUgdGhpcyBjb21tYW5kIGhhcyBiZWVuIHJ1blxyXG4gICAgY29uc3Qgc2VsZWN0aW9uID0gcmVzb2x2ZUZvY3VzUG9zaXRpb24odHIuZG9jLCBwb3NpdGlvbikgfHwgZWRpdG9yLnN0YXRlLnNlbGVjdGlvbjtcclxuICAgIGNvbnN0IGlzU2FtZVNlbGVjdGlvbiA9IGVkaXRvci5zdGF0ZS5zZWxlY3Rpb24uZXEoc2VsZWN0aW9uKTtcclxuICAgIGlmIChkaXNwYXRjaCkge1xyXG4gICAgICAgIGlmICghaXNTYW1lU2VsZWN0aW9uKSB7XHJcbiAgICAgICAgICAgIHRyLnNldFNlbGVjdGlvbihzZWxlY3Rpb24pO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBgdHIuc2V0U2VsZWN0aW9uYCByZXNldHMgdGhlIHN0b3JlZCBtYXJrc1xyXG4gICAgICAgIC8vIHNvIHdl4oCZbGwgcmVzdG9yZSB0aGVtIGlmIHRoZSBzZWxlY3Rpb24gaXMgdGhlIHNhbWUgYXMgYmVmb3JlXHJcbiAgICAgICAgaWYgKGlzU2FtZVNlbGVjdGlvbiAmJiB0ci5zdG9yZWRNYXJrcykge1xyXG4gICAgICAgICAgICB0ci5zZXRTdG9yZWRNYXJrcyh0ci5zdG9yZWRNYXJrcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRlbGF5ZWRGb2N1cygpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbn07XG5cbmNvbnN0IGZvckVhY2ggPSAoaXRlbXMsIGZuKSA9PiBwcm9wcyA9PiB7XHJcbiAgICByZXR1cm4gaXRlbXMuZXZlcnkoKGl0ZW0sIGluZGV4KSA9PiBmbihpdGVtLCB7IC4uLnByb3BzLCBpbmRleCB9KSk7XHJcbn07XG5cbmNvbnN0IGluc2VydENvbnRlbnQgPSAodmFsdWUsIG9wdGlvbnMpID0+ICh7IHRyLCBjb21tYW5kcyB9KSA9PiB7XHJcbiAgICByZXR1cm4gY29tbWFuZHMuaW5zZXJ0Q29udGVudEF0KHsgZnJvbTogdHIuc2VsZWN0aW9uLmZyb20sIHRvOiB0ci5zZWxlY3Rpb24udG8gfSwgdmFsdWUsIG9wdGlvbnMpO1xyXG59O1xuXG5mdW5jdGlvbiBlbGVtZW50RnJvbVN0cmluZyh2YWx1ZSkge1xyXG4gICAgLy8gYWRkIGEgd3JhcHBlciB0byBwcmVzZXJ2ZSBsZWFkaW5nIGFuZCB0cmFpbGluZyB3aGl0ZXNwYWNlXHJcbiAgICBjb25zdCB3cmFwcGVkVmFsdWUgPSBgPGJvZHk+JHt2YWx1ZX08L2JvZHk+YDtcclxuICAgIHJldHVybiBuZXcgd2luZG93LkRPTVBhcnNlcigpLnBhcnNlRnJvbVN0cmluZyh3cmFwcGVkVmFsdWUsICd0ZXh0L2h0bWwnKS5ib2R5O1xyXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU5vZGVGcm9tQ29udGVudChjb250ZW50LCBzY2hlbWEsIG9wdGlvbnMpIHtcclxuICAgIG9wdGlvbnMgPSB7XHJcbiAgICAgICAgc2xpY2U6IHRydWUsXHJcbiAgICAgICAgcGFyc2VPcHRpb25zOiB7fSxcclxuICAgICAgICAuLi5vcHRpb25zLFxyXG4gICAgfTtcclxuICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ29iamVjdCcgJiYgY29udGVudCAhPT0gbnVsbCkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGNvbnRlbnQpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gRnJhZ21lbnQuZnJvbUFycmF5KGNvbnRlbnQubWFwKGl0ZW0gPT4gc2NoZW1hLm5vZGVGcm9tSlNPTihpdGVtKSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBzY2hlbWEubm9kZUZyb21KU09OKGNvbnRlbnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKCdbdGlwdGFwIHdhcm5dOiBJbnZhbGlkIGNvbnRlbnQuJywgJ1Bhc3NlZCB2YWx1ZTonLCBjb250ZW50LCAnRXJyb3I6JywgZXJyb3IpO1xyXG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlTm9kZUZyb21Db250ZW50KCcnLCBzY2hlbWEsIG9wdGlvbnMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICBjb25zdCBwYXJzZXIgPSBET01QYXJzZXIuZnJvbVNjaGVtYShzY2hlbWEpO1xyXG4gICAgICAgIHJldHVybiBvcHRpb25zLnNsaWNlXHJcbiAgICAgICAgICAgID8gcGFyc2VyLnBhcnNlU2xpY2UoZWxlbWVudEZyb21TdHJpbmcoY29udGVudCksIG9wdGlvbnMucGFyc2VPcHRpb25zKS5jb250ZW50XHJcbiAgICAgICAgICAgIDogcGFyc2VyLnBhcnNlKGVsZW1lbnRGcm9tU3RyaW5nKGNvbnRlbnQpLCBvcHRpb25zLnBhcnNlT3B0aW9ucyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY3JlYXRlTm9kZUZyb21Db250ZW50KCcnLCBzY2hlbWEsIG9wdGlvbnMpO1xyXG59XG5cbi8vIHNvdXJjZTogaHR0cHM6Ly9naXRodWIuY29tL1Byb3NlTWlycm9yL3Byb3NlbWlycm9yLXN0YXRlL2Jsb2IvbWFzdGVyL3NyYy9zZWxlY3Rpb24uanMjTDQ2NlxyXG5mdW5jdGlvbiBzZWxlY3Rpb25Ub0luc2VydGlvbkVuZCh0ciwgc3RhcnRMZW4sIGJpYXMpIHtcclxuICAgIGNvbnN0IGxhc3QgPSB0ci5zdGVwcy5sZW5ndGggLSAxO1xyXG4gICAgaWYgKGxhc3QgPCBzdGFydExlbikge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGNvbnN0IHN0ZXAgPSB0ci5zdGVwc1tsYXN0XTtcclxuICAgIGlmICghKHN0ZXAgaW5zdGFuY2VvZiBSZXBsYWNlU3RlcCB8fCBzdGVwIGluc3RhbmNlb2YgUmVwbGFjZUFyb3VuZFN0ZXApKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgY29uc3QgbWFwID0gdHIubWFwcGluZy5tYXBzW2xhc3RdO1xyXG4gICAgbGV0IGVuZCA9IDA7XHJcbiAgICBtYXAuZm9yRWFjaCgoX2Zyb20sIF90bywgX25ld0Zyb20sIG5ld1RvKSA9PiB7XHJcbiAgICAgICAgaWYgKGVuZCA9PT0gMCkge1xyXG4gICAgICAgICAgICBlbmQgPSBuZXdUbztcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIHRyLnNldFNlbGVjdGlvbihTZWxlY3Rpb24ubmVhcih0ci5kb2MucmVzb2x2ZShlbmQpLCBiaWFzKSk7XHJcbn1cblxuY29uc3QgaXNGcmFnbWVudCA9IChub2RlT3JGcmFnbWVudCkgPT4ge1xyXG4gICAgcmV0dXJuIG5vZGVPckZyYWdtZW50LnRvU3RyaW5nKCkuc3RhcnRzV2l0aCgnPCcpO1xyXG59O1xyXG5jb25zdCBpbnNlcnRDb250ZW50QXQgPSAocG9zaXRpb24sIHZhbHVlLCBvcHRpb25zKSA9PiAoeyB0ciwgZGlzcGF0Y2gsIGVkaXRvciB9KSA9PiB7XHJcbiAgICBpZiAoZGlzcGF0Y2gpIHtcclxuICAgICAgICBvcHRpb25zID0ge1xyXG4gICAgICAgICAgICBwYXJzZU9wdGlvbnM6IHt9LFxyXG4gICAgICAgICAgICB1cGRhdGVTZWxlY3Rpb246IHRydWUsXHJcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXHJcbiAgICAgICAgfTtcclxuICAgICAgICBjb25zdCBjb250ZW50ID0gY3JlYXRlTm9kZUZyb21Db250ZW50KHZhbHVlLCBlZGl0b3Iuc2NoZW1hLCB7XHJcbiAgICAgICAgICAgIHBhcnNlT3B0aW9uczoge1xyXG4gICAgICAgICAgICAgICAgcHJlc2VydmVXaGl0ZXNwYWNlOiAnZnVsbCcsXHJcbiAgICAgICAgICAgICAgICAuLi5vcHRpb25zLnBhcnNlT3B0aW9ucyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyBkb27igJl0IGRpc3BhdGNoIGFuIGVtcHR5IGZyYWdtZW50IGJlY2F1c2UgdGhpcyBjYW4gbGVhZCB0byBzdHJhbmdlIGVycm9yc1xyXG4gICAgICAgIGlmIChjb250ZW50LnRvU3RyaW5nKCkgPT09ICc8PicpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCB7IGZyb20sIHRvIH0gPSB0eXBlb2YgcG9zaXRpb24gPT09ICdudW1iZXInXHJcbiAgICAgICAgICAgID8geyBmcm9tOiBwb3NpdGlvbiwgdG86IHBvc2l0aW9uIH1cclxuICAgICAgICAgICAgOiBwb3NpdGlvbjtcclxuICAgICAgICBsZXQgaXNPbmx5VGV4dENvbnRlbnQgPSB0cnVlO1xyXG4gICAgICAgIGxldCBpc09ubHlCbG9ja0NvbnRlbnQgPSB0cnVlO1xyXG4gICAgICAgIGNvbnN0IG5vZGVzID0gaXNGcmFnbWVudChjb250ZW50KVxyXG4gICAgICAgICAgICA/IGNvbnRlbnRcclxuICAgICAgICAgICAgOiBbY29udGVudF07XHJcbiAgICAgICAgbm9kZXMuZm9yRWFjaChub2RlID0+IHtcclxuICAgICAgICAgICAgLy8gY2hlY2sgaWYgYWRkZWQgbm9kZSBpcyB2YWxpZFxyXG4gICAgICAgICAgICBub2RlLmNoZWNrKCk7XHJcbiAgICAgICAgICAgIGlzT25seVRleHRDb250ZW50ID0gaXNPbmx5VGV4dENvbnRlbnRcclxuICAgICAgICAgICAgICAgID8gbm9kZS5pc1RleHQgJiYgbm9kZS5tYXJrcy5sZW5ndGggPT09IDBcclxuICAgICAgICAgICAgICAgIDogZmFsc2U7XHJcbiAgICAgICAgICAgIGlzT25seUJsb2NrQ29udGVudCA9IGlzT25seUJsb2NrQ29udGVudFxyXG4gICAgICAgICAgICAgICAgPyBub2RlLmlzQmxvY2tcclxuICAgICAgICAgICAgICAgIDogZmFsc2U7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy8gY2hlY2sgaWYgd2UgY2FuIHJlcGxhY2UgdGhlIHdyYXBwaW5nIG5vZGUgYnlcclxuICAgICAgICAvLyB0aGUgbmV3bHkgaW5zZXJ0ZWQgY29udGVudFxyXG4gICAgICAgIC8vIGV4YW1wbGU6XHJcbiAgICAgICAgLy8gcmVwbGFjZSBhbiBlbXB0eSBwYXJhZ3JhcGggYnkgYW4gaW5zZXJ0ZWQgaW1hZ2VcclxuICAgICAgICAvLyBpbnN0ZWFkIG9mIGluc2VydGluZyB0aGUgaW1hZ2UgYmVsb3cgdGhlIHBhcmFncmFwaFxyXG4gICAgICAgIGlmIChmcm9tID09PSB0byAmJiBpc09ubHlCbG9ja0NvbnRlbnQpIHtcclxuICAgICAgICAgICAgY29uc3QgeyBwYXJlbnQgfSA9IHRyLmRvYy5yZXNvbHZlKGZyb20pO1xyXG4gICAgICAgICAgICBjb25zdCBpc0VtcHR5VGV4dEJsb2NrID0gcGFyZW50LmlzVGV4dGJsb2NrXHJcbiAgICAgICAgICAgICAgICAmJiAhcGFyZW50LnR5cGUuc3BlYy5jb2RlXHJcbiAgICAgICAgICAgICAgICAmJiAhcGFyZW50LmNoaWxkQ291bnQ7XHJcbiAgICAgICAgICAgIGlmIChpc0VtcHR5VGV4dEJsb2NrKSB7XHJcbiAgICAgICAgICAgICAgICBmcm9tIC09IDE7XHJcbiAgICAgICAgICAgICAgICB0byArPSAxO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGlmIHRoZXJlIGlzIG9ubHkgcGxhaW4gdGV4dCB3ZSBoYXZlIHRvIHVzZSBgaW5zZXJ0VGV4dGBcclxuICAgICAgICAvLyBiZWNhdXNlIHRoaXMgd2lsbCBrZWVwIHRoZSBjdXJyZW50IG1hcmtzXHJcbiAgICAgICAgaWYgKGlzT25seVRleHRDb250ZW50KSB7XHJcbiAgICAgICAgICAgIHRyLmluc2VydFRleHQodmFsdWUsIGZyb20sIHRvKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRyLnJlcGxhY2VXaXRoKGZyb20sIHRvLCBjb250ZW50KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gc2V0IGN1cnNvciBhdCBlbmQgb2YgaW5zZXJ0ZWQgY29udGVudFxyXG4gICAgICAgIGlmIChvcHRpb25zLnVwZGF0ZVNlbGVjdGlvbikge1xyXG4gICAgICAgICAgICBzZWxlY3Rpb25Ub0luc2VydGlvbkVuZCh0ciwgdHIuc3RlcHMubGVuZ3RoIC0gMSwgLTEpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG59O1xuXG5jb25zdCBqb2luQmFja3dhcmQgPSAoKSA9PiAoeyBzdGF0ZSwgZGlzcGF0Y2ggfSkgPT4ge1xyXG4gICAgcmV0dXJuIGpvaW5CYWNrd2FyZCQxKHN0YXRlLCBkaXNwYXRjaCk7XHJcbn07XG5cbmNvbnN0IGpvaW5Gb3J3YXJkID0gKCkgPT4gKHsgc3RhdGUsIGRpc3BhdGNoIH0pID0+IHtcclxuICAgIHJldHVybiBqb2luRm9yd2FyZCQxKHN0YXRlLCBkaXNwYXRjaCk7XHJcbn07XG5cbmZ1bmN0aW9uIGlzTWFjT1MoKSB7XHJcbiAgICByZXR1cm4gdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCdcclxuICAgICAgICA/IC9NYWMvLnRlc3QobmF2aWdhdG9yLnBsYXRmb3JtKVxyXG4gICAgICAgIDogZmFsc2U7XHJcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplS2V5TmFtZShuYW1lKSB7XHJcbiAgICBjb25zdCBwYXJ0cyA9IG5hbWUuc3BsaXQoLy0oPyEkKS8pO1xyXG4gICAgbGV0IHJlc3VsdCA9IHBhcnRzW3BhcnRzLmxlbmd0aCAtIDFdO1xyXG4gICAgaWYgKHJlc3VsdCA9PT0gJ1NwYWNlJykge1xyXG4gICAgICAgIHJlc3VsdCA9ICcgJztcclxuICAgIH1cclxuICAgIGxldCBhbHQ7XHJcbiAgICBsZXQgY3RybDtcclxuICAgIGxldCBzaGlmdDtcclxuICAgIGxldCBtZXRhO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGggLSAxOyBpICs9IDEpIHtcclxuICAgICAgICBjb25zdCBtb2QgPSBwYXJ0c1tpXTtcclxuICAgICAgICBpZiAoL14oY21kfG1ldGF8bSkkL2kudGVzdChtb2QpKSB7XHJcbiAgICAgICAgICAgIG1ldGEgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICgvXmEobHQpPyQvaS50ZXN0KG1vZCkpIHtcclxuICAgICAgICAgICAgYWx0ID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoL14oY3xjdHJsfGNvbnRyb2wpJC9pLnRlc3QobW9kKSkge1xyXG4gICAgICAgICAgICBjdHJsID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoL15zKGhpZnQpPyQvaS50ZXN0KG1vZCkpIHtcclxuICAgICAgICAgICAgc2hpZnQgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICgvXm1vZCQvaS50ZXN0KG1vZCkpIHtcclxuICAgICAgICAgICAgaWYgKGlzaU9TKCkgfHwgaXNNYWNPUygpKSB7XHJcbiAgICAgICAgICAgICAgICBtZXRhID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGN0cmwgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVucmVjb2duaXplZCBtb2RpZmllciBuYW1lOiAke21vZH1gKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoYWx0KSB7XHJcbiAgICAgICAgcmVzdWx0ID0gYEFsdC0ke3Jlc3VsdH1gO1xyXG4gICAgfVxyXG4gICAgaWYgKGN0cmwpIHtcclxuICAgICAgICByZXN1bHQgPSBgQ3RybC0ke3Jlc3VsdH1gO1xyXG4gICAgfVxyXG4gICAgaWYgKG1ldGEpIHtcclxuICAgICAgICByZXN1bHQgPSBgTWV0YS0ke3Jlc3VsdH1gO1xyXG4gICAgfVxyXG4gICAgaWYgKHNoaWZ0KSB7XHJcbiAgICAgICAgcmVzdWx0ID0gYFNoaWZ0LSR7cmVzdWx0fWA7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcbmNvbnN0IGtleWJvYXJkU2hvcnRjdXQgPSBuYW1lID0+ICh7IGVkaXRvciwgdmlldywgdHIsIGRpc3BhdGNoLCB9KSA9PiB7XHJcbiAgICBjb25zdCBrZXlzID0gbm9ybWFsaXplS2V5TmFtZShuYW1lKS5zcGxpdCgvLSg/ISQpLyk7XHJcbiAgICBjb25zdCBrZXkgPSBrZXlzLmZpbmQoaXRlbSA9PiAhWydBbHQnLCAnQ3RybCcsICdNZXRhJywgJ1NoaWZ0J10uaW5jbHVkZXMoaXRlbSkpO1xyXG4gICAgY29uc3QgZXZlbnQgPSBuZXcgS2V5Ym9hcmRFdmVudCgna2V5ZG93bicsIHtcclxuICAgICAgICBrZXk6IGtleSA9PT0gJ1NwYWNlJ1xyXG4gICAgICAgICAgICA/ICcgJ1xyXG4gICAgICAgICAgICA6IGtleSxcclxuICAgICAgICBhbHRLZXk6IGtleXMuaW5jbHVkZXMoJ0FsdCcpLFxyXG4gICAgICAgIGN0cmxLZXk6IGtleXMuaW5jbHVkZXMoJ0N0cmwnKSxcclxuICAgICAgICBtZXRhS2V5OiBrZXlzLmluY2x1ZGVzKCdNZXRhJyksXHJcbiAgICAgICAgc2hpZnRLZXk6IGtleXMuaW5jbHVkZXMoJ1NoaWZ0JyksXHJcbiAgICAgICAgYnViYmxlczogdHJ1ZSxcclxuICAgICAgICBjYW5jZWxhYmxlOiB0cnVlLFxyXG4gICAgfSk7XHJcbiAgICBjb25zdCBjYXB0dXJlZFRyYW5zYWN0aW9uID0gZWRpdG9yLmNhcHR1cmVUcmFuc2FjdGlvbigoKSA9PiB7XHJcbiAgICAgICAgdmlldy5zb21lUHJvcCgnaGFuZGxlS2V5RG93bicsIGYgPT4gZih2aWV3LCBldmVudCkpO1xyXG4gICAgfSk7XHJcbiAgICBjYXB0dXJlZFRyYW5zYWN0aW9uID09PSBudWxsIHx8IGNhcHR1cmVkVHJhbnNhY3Rpb24gPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNhcHR1cmVkVHJhbnNhY3Rpb24uc3RlcHMuZm9yRWFjaChzdGVwID0+IHtcclxuICAgICAgICBjb25zdCBuZXdTdGVwID0gc3RlcC5tYXAodHIubWFwcGluZyk7XHJcbiAgICAgICAgaWYgKG5ld1N0ZXAgJiYgZGlzcGF0Y2gpIHtcclxuICAgICAgICAgICAgdHIubWF5YmVTdGVwKG5ld1N0ZXApO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbn07XG5cbmZ1bmN0aW9uIGlzTm9kZUFjdGl2ZShzdGF0ZSwgdHlwZU9yTmFtZSwgYXR0cmlidXRlcyA9IHt9KSB7XHJcbiAgICBjb25zdCB7IGZyb20sIHRvLCBlbXB0eSB9ID0gc3RhdGUuc2VsZWN0aW9uO1xyXG4gICAgY29uc3QgdHlwZSA9IHR5cGVPck5hbWVcclxuICAgICAgICA/IGdldE5vZGVUeXBlKHR5cGVPck5hbWUsIHN0YXRlLnNjaGVtYSlcclxuICAgICAgICA6IG51bGw7XHJcbiAgICBjb25zdCBub2RlUmFuZ2VzID0gW107XHJcbiAgICBzdGF0ZS5kb2Mubm9kZXNCZXR3ZWVuKGZyb20sIHRvLCAobm9kZSwgcG9zKSA9PiB7XHJcbiAgICAgICAgaWYgKG5vZGUuaXNUZXh0KSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcmVsYXRpdmVGcm9tID0gTWF0aC5tYXgoZnJvbSwgcG9zKTtcclxuICAgICAgICBjb25zdCByZWxhdGl2ZVRvID0gTWF0aC5taW4odG8sIHBvcyArIG5vZGUubm9kZVNpemUpO1xyXG4gICAgICAgIG5vZGVSYW5nZXMucHVzaCh7XHJcbiAgICAgICAgICAgIG5vZGUsXHJcbiAgICAgICAgICAgIGZyb206IHJlbGF0aXZlRnJvbSxcclxuICAgICAgICAgICAgdG86IHJlbGF0aXZlVG8sXHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuICAgIGNvbnN0IHNlbGVjdGlvblJhbmdlID0gdG8gLSBmcm9tO1xyXG4gICAgY29uc3QgbWF0Y2hlZE5vZGVSYW5nZXMgPSBub2RlUmFuZ2VzXHJcbiAgICAgICAgLmZpbHRlcihub2RlUmFuZ2UgPT4ge1xyXG4gICAgICAgIGlmICghdHlwZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHR5cGUubmFtZSA9PT0gbm9kZVJhbmdlLm5vZGUudHlwZS5uYW1lO1xyXG4gICAgfSlcclxuICAgICAgICAuZmlsdGVyKG5vZGVSYW5nZSA9PiBvYmplY3RJbmNsdWRlcyhub2RlUmFuZ2Uubm9kZS5hdHRycywgYXR0cmlidXRlcywgeyBzdHJpY3Q6IGZhbHNlIH0pKTtcclxuICAgIGlmIChlbXB0eSkge1xyXG4gICAgICAgIHJldHVybiAhIW1hdGNoZWROb2RlUmFuZ2VzLmxlbmd0aDtcclxuICAgIH1cclxuICAgIGNvbnN0IHJhbmdlID0gbWF0Y2hlZE5vZGVSYW5nZXNcclxuICAgICAgICAucmVkdWNlKChzdW0sIG5vZGVSYW5nZSkgPT4gc3VtICsgbm9kZVJhbmdlLnRvIC0gbm9kZVJhbmdlLmZyb20sIDApO1xyXG4gICAgcmV0dXJuIHJhbmdlID49IHNlbGVjdGlvblJhbmdlO1xyXG59XG5cbmNvbnN0IGxpZnQgPSAodHlwZU9yTmFtZSwgYXR0cmlidXRlcyA9IHt9KSA9PiAoeyBzdGF0ZSwgZGlzcGF0Y2ggfSkgPT4ge1xyXG4gICAgY29uc3QgdHlwZSA9IGdldE5vZGVUeXBlKHR5cGVPck5hbWUsIHN0YXRlLnNjaGVtYSk7XHJcbiAgICBjb25zdCBpc0FjdGl2ZSA9IGlzTm9kZUFjdGl2ZShzdGF0ZSwgdHlwZSwgYXR0cmlidXRlcyk7XHJcbiAgICBpZiAoIWlzQWN0aXZlKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGxpZnQkMShzdGF0ZSwgZGlzcGF0Y2gpO1xyXG59O1xuXG5jb25zdCBsaWZ0RW1wdHlCbG9jayA9ICgpID0+ICh7IHN0YXRlLCBkaXNwYXRjaCB9KSA9PiB7XHJcbiAgICByZXR1cm4gbGlmdEVtcHR5QmxvY2skMShzdGF0ZSwgZGlzcGF0Y2gpO1xyXG59O1xuXG5jb25zdCBsaWZ0TGlzdEl0ZW0gPSB0eXBlT3JOYW1lID0+ICh7IHN0YXRlLCBkaXNwYXRjaCB9KSA9PiB7XHJcbiAgICBjb25zdCB0eXBlID0gZ2V0Tm9kZVR5cGUodHlwZU9yTmFtZSwgc3RhdGUuc2NoZW1hKTtcclxuICAgIHJldHVybiBsaWZ0TGlzdEl0ZW0kMSh0eXBlKShzdGF0ZSwgZGlzcGF0Y2gpO1xyXG59O1xuXG5jb25zdCBuZXdsaW5lSW5Db2RlID0gKCkgPT4gKHsgc3RhdGUsIGRpc3BhdGNoIH0pID0+IHtcclxuICAgIHJldHVybiBuZXdsaW5lSW5Db2RlJDEoc3RhdGUsIGRpc3BhdGNoKTtcclxufTtcblxuZnVuY3Rpb24gZ2V0U2NoZW1hVHlwZU5hbWVCeU5hbWUobmFtZSwgc2NoZW1hKSB7XHJcbiAgICBpZiAoc2NoZW1hLm5vZGVzW25hbWVdKSB7XHJcbiAgICAgICAgcmV0dXJuICdub2RlJztcclxuICAgIH1cclxuICAgIGlmIChzY2hlbWEubWFya3NbbmFtZV0pIHtcclxuICAgICAgICByZXR1cm4gJ21hcmsnO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbn1cblxuLyoqXHJcbiAqIFJlbW92ZSBhIHByb3BlcnR5IG9yIGFuIGFycmF5IG9mIHByb3BlcnRpZXMgZnJvbSBhbiBvYmplY3RcclxuICogQHBhcmFtIG9iaiBPYmplY3RcclxuICogQHBhcmFtIGtleSBLZXkgdG8gcmVtb3ZlXHJcbiAqL1xyXG5mdW5jdGlvbiBkZWxldGVQcm9wcyhvYmosIHByb3BPclByb3BzKSB7XHJcbiAgICBjb25zdCBwcm9wcyA9IHR5cGVvZiBwcm9wT3JQcm9wcyA9PT0gJ3N0cmluZydcclxuICAgICAgICA/IFtwcm9wT3JQcm9wc11cclxuICAgICAgICA6IHByb3BPclByb3BzO1xyXG4gICAgcmV0dXJuIE9iamVjdFxyXG4gICAgICAgIC5rZXlzKG9iailcclxuICAgICAgICAucmVkdWNlKChuZXdPYmosIHByb3ApID0+IHtcclxuICAgICAgICBpZiAoIXByb3BzLmluY2x1ZGVzKHByb3ApKSB7XHJcbiAgICAgICAgICAgIG5ld09ialtwcm9wXSA9IG9ialtwcm9wXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5ld09iajtcclxuICAgIH0sIHt9KTtcclxufVxuXG5jb25zdCByZXNldEF0dHJpYnV0ZXMgPSAodHlwZU9yTmFtZSwgYXR0cmlidXRlcykgPT4gKHsgdHIsIHN0YXRlLCBkaXNwYXRjaCB9KSA9PiB7XHJcbiAgICBsZXQgbm9kZVR5cGUgPSBudWxsO1xyXG4gICAgbGV0IG1hcmtUeXBlID0gbnVsbDtcclxuICAgIGNvbnN0IHNjaGVtYVR5cGUgPSBnZXRTY2hlbWFUeXBlTmFtZUJ5TmFtZSh0eXBlb2YgdHlwZU9yTmFtZSA9PT0gJ3N0cmluZydcclxuICAgICAgICA/IHR5cGVPck5hbWVcclxuICAgICAgICA6IHR5cGVPck5hbWUubmFtZSwgc3RhdGUuc2NoZW1hKTtcclxuICAgIGlmICghc2NoZW1hVHlwZSkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIGlmIChzY2hlbWFUeXBlID09PSAnbm9kZScpIHtcclxuICAgICAgICBub2RlVHlwZSA9IGdldE5vZGVUeXBlKHR5cGVPck5hbWUsIHN0YXRlLnNjaGVtYSk7XHJcbiAgICB9XHJcbiAgICBpZiAoc2NoZW1hVHlwZSA9PT0gJ21hcmsnKSB7XHJcbiAgICAgICAgbWFya1R5cGUgPSBnZXRNYXJrVHlwZSh0eXBlT3JOYW1lLCBzdGF0ZS5zY2hlbWEpO1xyXG4gICAgfVxyXG4gICAgaWYgKGRpc3BhdGNoKSB7XHJcbiAgICAgICAgdHIuc2VsZWN0aW9uLnJhbmdlcy5mb3JFYWNoKHJhbmdlID0+IHtcclxuICAgICAgICAgICAgc3RhdGUuZG9jLm5vZGVzQmV0d2VlbihyYW5nZS4kZnJvbS5wb3MsIHJhbmdlLiR0by5wb3MsIChub2RlLCBwb3MpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChub2RlVHlwZSAmJiBub2RlVHlwZSA9PT0gbm9kZS50eXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHIuc2V0Tm9kZU1hcmt1cChwb3MsIHVuZGVmaW5lZCwgZGVsZXRlUHJvcHMobm9kZS5hdHRycywgYXR0cmlidXRlcykpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKG1hcmtUeXBlICYmIG5vZGUubWFya3MubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5tYXJrcy5mb3JFYWNoKG1hcmsgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWFya1R5cGUgPT09IG1hcmsudHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHIuYWRkTWFyayhwb3MsIHBvcyArIG5vZGUubm9kZVNpemUsIG1hcmtUeXBlLmNyZWF0ZShkZWxldGVQcm9wcyhtYXJrLmF0dHJzLCBhdHRyaWJ1dGVzKSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbn07XG5cbmNvbnN0IHNjcm9sbEludG9WaWV3ID0gKCkgPT4gKHsgdHIsIGRpc3BhdGNoIH0pID0+IHtcclxuICAgIGlmIChkaXNwYXRjaCkge1xyXG4gICAgICAgIHRyLnNjcm9sbEludG9WaWV3KCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufTtcblxuY29uc3Qgc2VsZWN0QWxsID0gKCkgPT4gKHsgdHIsIGNvbW1hbmRzIH0pID0+IHtcclxuICAgIHJldHVybiBjb21tYW5kcy5zZXRUZXh0U2VsZWN0aW9uKHtcclxuICAgICAgICBmcm9tOiAwLFxyXG4gICAgICAgIHRvOiB0ci5kb2MuY29udGVudC5zaXplLFxyXG4gICAgfSk7XHJcbn07XG5cbmNvbnN0IHNlbGVjdE5vZGVCYWNrd2FyZCA9ICgpID0+ICh7IHN0YXRlLCBkaXNwYXRjaCB9KSA9PiB7XHJcbiAgICByZXR1cm4gc2VsZWN0Tm9kZUJhY2t3YXJkJDEoc3RhdGUsIGRpc3BhdGNoKTtcclxufTtcblxuY29uc3Qgc2VsZWN0Tm9kZUZvcndhcmQgPSAoKSA9PiAoeyBzdGF0ZSwgZGlzcGF0Y2ggfSkgPT4ge1xyXG4gICAgcmV0dXJuIHNlbGVjdE5vZGVGb3J3YXJkJDEoc3RhdGUsIGRpc3BhdGNoKTtcclxufTtcblxuY29uc3Qgc2VsZWN0UGFyZW50Tm9kZSA9ICgpID0+ICh7IHN0YXRlLCBkaXNwYXRjaCB9KSA9PiB7XHJcbiAgICByZXR1cm4gc2VsZWN0UGFyZW50Tm9kZSQxKHN0YXRlLCBkaXNwYXRjaCk7XHJcbn07XG5cbi8vIEB0cy1pZ25vcmVcclxuY29uc3Qgc2VsZWN0VGV4dGJsb2NrRW5kID0gKCkgPT4gKHsgc3RhdGUsIGRpc3BhdGNoIH0pID0+IHtcclxuICAgIHJldHVybiBzZWxlY3RUZXh0YmxvY2tFbmQkMShzdGF0ZSwgZGlzcGF0Y2gpO1xyXG59O1xuXG4vLyBAdHMtaWdub3JlXHJcbmNvbnN0IHNlbGVjdFRleHRibG9ja1N0YXJ0ID0gKCkgPT4gKHsgc3RhdGUsIGRpc3BhdGNoIH0pID0+IHtcclxuICAgIHJldHVybiBzZWxlY3RUZXh0YmxvY2tTdGFydCQxKHN0YXRlLCBkaXNwYXRjaCk7XHJcbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZURvY3VtZW50KGNvbnRlbnQsIHNjaGVtYSwgcGFyc2VPcHRpb25zID0ge30pIHtcclxuICAgIHJldHVybiBjcmVhdGVOb2RlRnJvbUNvbnRlbnQoY29udGVudCwgc2NoZW1hLCB7IHNsaWNlOiBmYWxzZSwgcGFyc2VPcHRpb25zIH0pO1xyXG59XG5cbmNvbnN0IHNldENvbnRlbnQgPSAoY29udGVudCwgZW1pdFVwZGF0ZSA9IGZhbHNlLCBwYXJzZU9wdGlvbnMgPSB7fSkgPT4gKHsgdHIsIGVkaXRvciwgZGlzcGF0Y2ggfSkgPT4ge1xyXG4gICAgY29uc3QgeyBkb2MgfSA9IHRyO1xyXG4gICAgY29uc3QgZG9jdW1lbnQgPSBjcmVhdGVEb2N1bWVudChjb250ZW50LCBlZGl0b3Iuc2NoZW1hLCBwYXJzZU9wdGlvbnMpO1xyXG4gICAgaWYgKGRpc3BhdGNoKSB7XHJcbiAgICAgICAgdHIucmVwbGFjZVdpdGgoMCwgZG9jLmNvbnRlbnQuc2l6ZSwgZG9jdW1lbnQpXHJcbiAgICAgICAgICAgIC5zZXRNZXRhKCdwcmV2ZW50VXBkYXRlJywgIWVtaXRVcGRhdGUpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbn07XG5cbmZ1bmN0aW9uIGdldE1hcmtBdHRyaWJ1dGVzKHN0YXRlLCB0eXBlT3JOYW1lKSB7XHJcbiAgICBjb25zdCB0eXBlID0gZ2V0TWFya1R5cGUodHlwZU9yTmFtZSwgc3RhdGUuc2NoZW1hKTtcclxuICAgIGNvbnN0IHsgZnJvbSwgdG8sIGVtcHR5IH0gPSBzdGF0ZS5zZWxlY3Rpb247XHJcbiAgICBjb25zdCBtYXJrcyA9IFtdO1xyXG4gICAgaWYgKGVtcHR5KSB7XHJcbiAgICAgICAgaWYgKHN0YXRlLnN0b3JlZE1hcmtzKSB7XHJcbiAgICAgICAgICAgIG1hcmtzLnB1c2goLi4uc3RhdGUuc3RvcmVkTWFya3MpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBtYXJrcy5wdXNoKC4uLnN0YXRlLnNlbGVjdGlvbi4kaGVhZC5tYXJrcygpKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHN0YXRlLmRvYy5ub2Rlc0JldHdlZW4oZnJvbSwgdG8sIG5vZGUgPT4ge1xyXG4gICAgICAgICAgICBtYXJrcy5wdXNoKC4uLm5vZGUubWFya3MpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgY29uc3QgbWFyayA9IG1hcmtzLmZpbmQobWFya0l0ZW0gPT4gbWFya0l0ZW0udHlwZS5uYW1lID09PSB0eXBlLm5hbWUpO1xyXG4gICAgaWYgKCFtYXJrKSB7XHJcbiAgICAgICAgcmV0dXJuIHt9O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHsgLi4ubWFyay5hdHRycyB9O1xyXG59XG5cbmNvbnN0IHNldE1hcmsgPSAodHlwZU9yTmFtZSwgYXR0cmlidXRlcyA9IHt9KSA9PiAoeyB0ciwgc3RhdGUsIGRpc3BhdGNoIH0pID0+IHtcclxuICAgIGNvbnN0IHsgc2VsZWN0aW9uIH0gPSB0cjtcclxuICAgIGNvbnN0IHsgZW1wdHksIHJhbmdlcyB9ID0gc2VsZWN0aW9uO1xyXG4gICAgY29uc3QgdHlwZSA9IGdldE1hcmtUeXBlKHR5cGVPck5hbWUsIHN0YXRlLnNjaGVtYSk7XHJcbiAgICBpZiAoZGlzcGF0Y2gpIHtcclxuICAgICAgICBpZiAoZW1wdHkpIHtcclxuICAgICAgICAgICAgY29uc3Qgb2xkQXR0cmlidXRlcyA9IGdldE1hcmtBdHRyaWJ1dGVzKHN0YXRlLCB0eXBlKTtcclxuICAgICAgICAgICAgdHIuYWRkU3RvcmVkTWFyayh0eXBlLmNyZWF0ZSh7XHJcbiAgICAgICAgICAgICAgICAuLi5vbGRBdHRyaWJ1dGVzLFxyXG4gICAgICAgICAgICAgICAgLi4uYXR0cmlidXRlcyxcclxuICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmFuZ2VzLmZvckVhY2gocmFuZ2UgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZnJvbSA9IHJhbmdlLiRmcm9tLnBvcztcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRvID0gcmFuZ2UuJHRvLnBvcztcclxuICAgICAgICAgICAgICAgIHN0YXRlLmRvYy5ub2Rlc0JldHdlZW4oZnJvbSwgdG8sIChub2RlLCBwb3MpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0cmltbWVkRnJvbSA9IE1hdGgubWF4KHBvcywgZnJvbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdHJpbW1lZFRvID0gTWF0aC5taW4ocG9zICsgbm9kZS5ub2RlU2l6ZSwgdG8pO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNvbWVIYXNNYXJrID0gbm9kZS5tYXJrcy5maW5kKG1hcmsgPT4gbWFyay50eXBlID09PSB0eXBlKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBpZiB0aGVyZSBpcyBhbHJlYWR5IGEgbWFyayBvZiB0aGlzIHR5cGVcclxuICAgICAgICAgICAgICAgICAgICAvLyB3ZSBrbm93IHRoYXQgd2UgaGF2ZSB0byBtZXJnZSBpdHMgYXR0cmlidXRlc1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIG90aGVyd2lzZSB3ZSBhZGQgYSBmcmVzaCBuZXcgbWFya1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzb21lSGFzTWFyaykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlLm1hcmtzLmZvckVhY2gobWFyayA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZSA9PT0gbWFyay50eXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHIuYWRkTWFyayh0cmltbWVkRnJvbSwgdHJpbW1lZFRvLCB0eXBlLmNyZWF0ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLm1hcmsuYXR0cnMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLmF0dHJpYnV0ZXMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyLmFkZE1hcmsodHJpbW1lZEZyb20sIHRyaW1tZWRUbywgdHlwZS5jcmVhdGUoYXR0cmlidXRlcykpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufTtcblxuY29uc3Qgc2V0TWV0YSA9IChrZXksIHZhbHVlKSA9PiAoeyB0ciB9KSA9PiB7XHJcbiAgICB0ci5zZXRNZXRhKGtleSwgdmFsdWUpO1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbn07XG5cbmNvbnN0IHNldE5vZGUgPSAodHlwZU9yTmFtZSwgYXR0cmlidXRlcyA9IHt9KSA9PiAoeyBzdGF0ZSwgZGlzcGF0Y2gsIGNoYWluIH0pID0+IHtcclxuICAgIGNvbnN0IHR5cGUgPSBnZXROb2RlVHlwZSh0eXBlT3JOYW1lLCBzdGF0ZS5zY2hlbWEpO1xyXG4gICAgLy8gVE9ETzogdXNlIGEgZmFsbGJhY2sgbGlrZSBpbnNlcnRDb250ZW50P1xyXG4gICAgaWYgKCF0eXBlLmlzVGV4dGJsb2NrKSB7XHJcbiAgICAgICAgY29uc29sZS53YXJuKCdbdGlwdGFwIHdhcm5dOiBDdXJyZW50bHkgXCJzZXROb2RlKClcIiBvbmx5IHN1cHBvcnRzIHRleHQgYmxvY2sgbm9kZXMuJyk7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNoYWluKClcclxuICAgICAgICAvLyB0cnkgdG8gY29udmVydCBub2RlIHRvIGRlZmF1bHQgbm9kZSBpZiBuZWVkZWRcclxuICAgICAgICAuY29tbWFuZCgoeyBjb21tYW5kcyB9KSA9PiB7XHJcbiAgICAgICAgY29uc3QgY2FuU2V0QmxvY2sgPSBzZXRCbG9ja1R5cGUodHlwZSwgYXR0cmlidXRlcykoc3RhdGUpO1xyXG4gICAgICAgIGlmIChjYW5TZXRCbG9jaykge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGNvbW1hbmRzLmNsZWFyTm9kZXMoKTtcclxuICAgIH0pXHJcbiAgICAgICAgLmNvbW1hbmQoKHsgc3RhdGU6IHVwZGF0ZWRTdGF0ZSB9KSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHNldEJsb2NrVHlwZSh0eXBlLCBhdHRyaWJ1dGVzKSh1cGRhdGVkU3RhdGUsIGRpc3BhdGNoKTtcclxuICAgIH0pXHJcbiAgICAgICAgLnJ1bigpO1xyXG59O1xuXG5jb25zdCBzZXROb2RlU2VsZWN0aW9uID0gcG9zaXRpb24gPT4gKHsgdHIsIGRpc3BhdGNoIH0pID0+IHtcclxuICAgIGlmIChkaXNwYXRjaCkge1xyXG4gICAgICAgIGNvbnN0IHsgZG9jIH0gPSB0cjtcclxuICAgICAgICBjb25zdCBtaW5Qb3MgPSBTZWxlY3Rpb24uYXRTdGFydChkb2MpLmZyb207XHJcbiAgICAgICAgY29uc3QgbWF4UG9zID0gU2VsZWN0aW9uLmF0RW5kKGRvYykudG87XHJcbiAgICAgICAgY29uc3QgcmVzb2x2ZWRQb3MgPSBtaW5NYXgocG9zaXRpb24sIG1pblBvcywgbWF4UG9zKTtcclxuICAgICAgICBjb25zdCBzZWxlY3Rpb24gPSBOb2RlU2VsZWN0aW9uLmNyZWF0ZShkb2MsIHJlc29sdmVkUG9zKTtcclxuICAgICAgICB0ci5zZXRTZWxlY3Rpb24oc2VsZWN0aW9uKTtcclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG59O1xuXG5jb25zdCBzZXRUZXh0U2VsZWN0aW9uID0gcG9zaXRpb24gPT4gKHsgdHIsIGRpc3BhdGNoIH0pID0+IHtcclxuICAgIGlmIChkaXNwYXRjaCkge1xyXG4gICAgICAgIGNvbnN0IHsgZG9jIH0gPSB0cjtcclxuICAgICAgICBjb25zdCB7IGZyb20sIHRvIH0gPSB0eXBlb2YgcG9zaXRpb24gPT09ICdudW1iZXInXHJcbiAgICAgICAgICAgID8geyBmcm9tOiBwb3NpdGlvbiwgdG86IHBvc2l0aW9uIH1cclxuICAgICAgICAgICAgOiBwb3NpdGlvbjtcclxuICAgICAgICBjb25zdCBtaW5Qb3MgPSBUZXh0U2VsZWN0aW9uLmF0U3RhcnQoZG9jKS5mcm9tO1xyXG4gICAgICAgIGNvbnN0IG1heFBvcyA9IFRleHRTZWxlY3Rpb24uYXRFbmQoZG9jKS50bztcclxuICAgICAgICBjb25zdCByZXNvbHZlZEZyb20gPSBtaW5NYXgoZnJvbSwgbWluUG9zLCBtYXhQb3MpO1xyXG4gICAgICAgIGNvbnN0IHJlc29sdmVkRW5kID0gbWluTWF4KHRvLCBtaW5Qb3MsIG1heFBvcyk7XHJcbiAgICAgICAgY29uc3Qgc2VsZWN0aW9uID0gVGV4dFNlbGVjdGlvbi5jcmVhdGUoZG9jLCByZXNvbHZlZEZyb20sIHJlc29sdmVkRW5kKTtcclxuICAgICAgICB0ci5zZXRTZWxlY3Rpb24oc2VsZWN0aW9uKTtcclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG59O1xuXG5jb25zdCBzaW5rTGlzdEl0ZW0gPSB0eXBlT3JOYW1lID0+ICh7IHN0YXRlLCBkaXNwYXRjaCB9KSA9PiB7XHJcbiAgICBjb25zdCB0eXBlID0gZ2V0Tm9kZVR5cGUodHlwZU9yTmFtZSwgc3RhdGUuc2NoZW1hKTtcclxuICAgIHJldHVybiBzaW5rTGlzdEl0ZW0kMSh0eXBlKShzdGF0ZSwgZGlzcGF0Y2gpO1xyXG59O1xuXG5mdW5jdGlvbiBnZXRTcGxpdHRlZEF0dHJpYnV0ZXMoZXh0ZW5zaW9uQXR0cmlidXRlcywgdHlwZU5hbWUsIGF0dHJpYnV0ZXMpIHtcclxuICAgIHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMoT2JqZWN0XHJcbiAgICAgICAgLmVudHJpZXMoYXR0cmlidXRlcylcclxuICAgICAgICAuZmlsdGVyKChbbmFtZV0pID0+IHtcclxuICAgICAgICBjb25zdCBleHRlbnNpb25BdHRyaWJ1dGUgPSBleHRlbnNpb25BdHRyaWJ1dGVzLmZpbmQoaXRlbSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBpdGVtLnR5cGUgPT09IHR5cGVOYW1lICYmIGl0ZW0ubmFtZSA9PT0gbmFtZTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAoIWV4dGVuc2lvbkF0dHJpYnV0ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBleHRlbnNpb25BdHRyaWJ1dGUuYXR0cmlidXRlLmtlZXBPblNwbGl0O1xyXG4gICAgfSkpO1xyXG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRCbG9ja0F0JDEobWF0Y2gpIHtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWF0Y2guZWRnZUNvdW50OyBpICs9IDEpIHtcclxuICAgICAgICBjb25zdCB7IHR5cGUgfSA9IG1hdGNoLmVkZ2UoaSk7XHJcbiAgICAgICAgaWYgKHR5cGUuaXNUZXh0YmxvY2sgJiYgIXR5cGUuaGFzUmVxdWlyZWRBdHRycygpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0eXBlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBudWxsO1xyXG59XHJcbmZ1bmN0aW9uIGVuc3VyZU1hcmtzKHN0YXRlLCBzcGxpdHRhYmxlTWFya3MpIHtcclxuICAgIGNvbnN0IG1hcmtzID0gc3RhdGUuc3RvcmVkTWFya3NcclxuICAgICAgICB8fCAoc3RhdGUuc2VsZWN0aW9uLiR0by5wYXJlbnRPZmZzZXQgJiYgc3RhdGUuc2VsZWN0aW9uLiRmcm9tLm1hcmtzKCkpO1xyXG4gICAgaWYgKG1hcmtzKSB7XHJcbiAgICAgICAgY29uc3QgZmlsdGVyZWRNYXJrcyA9IG1hcmtzLmZpbHRlcihtYXJrID0+IHNwbGl0dGFibGVNYXJrcyA9PT0gbnVsbCB8fCBzcGxpdHRhYmxlTWFya3MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNwbGl0dGFibGVNYXJrcy5pbmNsdWRlcyhtYXJrLnR5cGUubmFtZSkpO1xyXG4gICAgICAgIHN0YXRlLnRyLmVuc3VyZU1hcmtzKGZpbHRlcmVkTWFya3MpO1xyXG4gICAgfVxyXG59XHJcbmNvbnN0IHNwbGl0QmxvY2sgPSAoeyBrZWVwTWFya3MgPSB0cnVlIH0gPSB7fSkgPT4gKHsgdHIsIHN0YXRlLCBkaXNwYXRjaCwgZWRpdG9yLCB9KSA9PiB7XHJcbiAgICBjb25zdCB7IHNlbGVjdGlvbiwgZG9jIH0gPSB0cjtcclxuICAgIGNvbnN0IHsgJGZyb20sICR0byB9ID0gc2VsZWN0aW9uO1xyXG4gICAgY29uc3QgZXh0ZW5zaW9uQXR0cmlidXRlcyA9IGVkaXRvci5leHRlbnNpb25NYW5hZ2VyLmF0dHJpYnV0ZXM7XHJcbiAgICBjb25zdCBuZXdBdHRyaWJ1dGVzID0gZ2V0U3BsaXR0ZWRBdHRyaWJ1dGVzKGV4dGVuc2lvbkF0dHJpYnV0ZXMsICRmcm9tLm5vZGUoKS50eXBlLm5hbWUsICRmcm9tLm5vZGUoKS5hdHRycyk7XHJcbiAgICBpZiAoc2VsZWN0aW9uIGluc3RhbmNlb2YgTm9kZVNlbGVjdGlvbiAmJiBzZWxlY3Rpb24ubm9kZS5pc0Jsb2NrKSB7XHJcbiAgICAgICAgaWYgKCEkZnJvbS5wYXJlbnRPZmZzZXQgfHwgIWNhblNwbGl0KGRvYywgJGZyb20ucG9zKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChkaXNwYXRjaCkge1xyXG4gICAgICAgICAgICBpZiAoa2VlcE1hcmtzKSB7XHJcbiAgICAgICAgICAgICAgICBlbnN1cmVNYXJrcyhzdGF0ZSwgZWRpdG9yLmV4dGVuc2lvbk1hbmFnZXIuc3BsaXR0YWJsZU1hcmtzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0ci5zcGxpdCgkZnJvbS5wb3MpLnNjcm9sbEludG9WaWV3KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgaWYgKCEkZnJvbS5wYXJlbnQuaXNCbG9jaykge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIGlmIChkaXNwYXRjaCkge1xyXG4gICAgICAgIGNvbnN0IGF0RW5kID0gJHRvLnBhcmVudE9mZnNldCA9PT0gJHRvLnBhcmVudC5jb250ZW50LnNpemU7XHJcbiAgICAgICAgaWYgKHNlbGVjdGlvbiBpbnN0YW5jZW9mIFRleHRTZWxlY3Rpb24pIHtcclxuICAgICAgICAgICAgdHIuZGVsZXRlU2VsZWN0aW9uKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGRlZmx0ID0gJGZyb20uZGVwdGggPT09IDBcclxuICAgICAgICAgICAgPyB1bmRlZmluZWRcclxuICAgICAgICAgICAgOiBkZWZhdWx0QmxvY2tBdCQxKCRmcm9tLm5vZGUoLTEpLmNvbnRlbnRNYXRjaEF0KCRmcm9tLmluZGV4QWZ0ZXIoLTEpKSk7XHJcbiAgICAgICAgbGV0IHR5cGVzID0gYXRFbmQgJiYgZGVmbHRcclxuICAgICAgICAgICAgPyBbe1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IGRlZmx0LFxyXG4gICAgICAgICAgICAgICAgICAgIGF0dHJzOiBuZXdBdHRyaWJ1dGVzLFxyXG4gICAgICAgICAgICAgICAgfV1cclxuICAgICAgICAgICAgOiB1bmRlZmluZWQ7XHJcbiAgICAgICAgbGV0IGNhbiA9IGNhblNwbGl0KHRyLmRvYywgdHIubWFwcGluZy5tYXAoJGZyb20ucG9zKSwgMSwgdHlwZXMpO1xyXG4gICAgICAgIGlmICghdHlwZXNcclxuICAgICAgICAgICAgJiYgIWNhblxyXG4gICAgICAgICAgICAmJiBjYW5TcGxpdCh0ci5kb2MsIHRyLm1hcHBpbmcubWFwKCRmcm9tLnBvcyksIDEsIGRlZmx0ID8gW3sgdHlwZTogZGVmbHQgfV0gOiB1bmRlZmluZWQpKSB7XHJcbiAgICAgICAgICAgIGNhbiA9IHRydWU7XHJcbiAgICAgICAgICAgIHR5cGVzID0gZGVmbHRcclxuICAgICAgICAgICAgICAgID8gW3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogZGVmbHQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiBuZXdBdHRyaWJ1dGVzLFxyXG4gICAgICAgICAgICAgICAgICAgIH1dXHJcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGNhbikge1xyXG4gICAgICAgICAgICB0ci5zcGxpdCh0ci5tYXBwaW5nLm1hcCgkZnJvbS5wb3MpLCAxLCB0eXBlcyk7XHJcbiAgICAgICAgICAgIGlmIChkZWZsdFxyXG4gICAgICAgICAgICAgICAgJiYgIWF0RW5kXHJcbiAgICAgICAgICAgICAgICAmJiAhJGZyb20ucGFyZW50T2Zmc2V0XHJcbiAgICAgICAgICAgICAgICAmJiAkZnJvbS5wYXJlbnQudHlwZSAhPT0gZGVmbHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGZpcnN0ID0gdHIubWFwcGluZy5tYXAoJGZyb20uYmVmb3JlKCkpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgJGZpcnN0ID0gdHIuZG9jLnJlc29sdmUoZmlyc3QpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCRmcm9tLm5vZGUoLTEpLmNhblJlcGxhY2VXaXRoKCRmaXJzdC5pbmRleCgpLCAkZmlyc3QuaW5kZXgoKSArIDEsIGRlZmx0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRyLnNldE5vZGVNYXJrdXAodHIubWFwcGluZy5tYXAoJGZyb20uYmVmb3JlKCkpLCBkZWZsdCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGtlZXBNYXJrcykge1xyXG4gICAgICAgICAgICBlbnN1cmVNYXJrcyhzdGF0ZSwgZWRpdG9yLmV4dGVuc2lvbk1hbmFnZXIuc3BsaXR0YWJsZU1hcmtzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdHIuc2Nyb2xsSW50b1ZpZXcoKTtcclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG59O1xuXG5jb25zdCBzcGxpdExpc3RJdGVtID0gdHlwZU9yTmFtZSA9PiAoeyB0ciwgc3RhdGUsIGRpc3BhdGNoLCBlZGl0b3IsIH0pID0+IHtcclxuICAgIHZhciBfYTtcclxuICAgIGNvbnN0IHR5cGUgPSBnZXROb2RlVHlwZSh0eXBlT3JOYW1lLCBzdGF0ZS5zY2hlbWEpO1xyXG4gICAgY29uc3QgeyAkZnJvbSwgJHRvIH0gPSBzdGF0ZS5zZWxlY3Rpb247XHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcclxuICAgIGNvbnN0IG5vZGUgPSBzdGF0ZS5zZWxlY3Rpb24ubm9kZTtcclxuICAgIGlmICgobm9kZSAmJiBub2RlLmlzQmxvY2spIHx8ICRmcm9tLmRlcHRoIDwgMiB8fCAhJGZyb20uc2FtZVBhcmVudCgkdG8pKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgY29uc3QgZ3JhbmRQYXJlbnQgPSAkZnJvbS5ub2RlKC0xKTtcclxuICAgIGlmIChncmFuZFBhcmVudC50eXBlICE9PSB0eXBlKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgY29uc3QgZXh0ZW5zaW9uQXR0cmlidXRlcyA9IGVkaXRvci5leHRlbnNpb25NYW5hZ2VyLmF0dHJpYnV0ZXM7XHJcbiAgICBpZiAoJGZyb20ucGFyZW50LmNvbnRlbnQuc2l6ZSA9PT0gMCAmJiAkZnJvbS5ub2RlKC0xKS5jaGlsZENvdW50ID09PSAkZnJvbS5pbmRleEFmdGVyKC0xKSkge1xyXG4gICAgICAgIC8vIEluIGFuIGVtcHR5IGJsb2NrLiBJZiB0aGlzIGlzIGEgbmVzdGVkIGxpc3QsIHRoZSB3cmFwcGluZ1xyXG4gICAgICAgIC8vIGxpc3QgaXRlbSBzaG91bGQgYmUgc3BsaXQuIE90aGVyd2lzZSwgYmFpbCBvdXQgYW5kIGxldCBuZXh0XHJcbiAgICAgICAgLy8gY29tbWFuZCBoYW5kbGUgbGlmdGluZy5cclxuICAgICAgICBpZiAoJGZyb20uZGVwdGggPT09IDJcclxuICAgICAgICAgICAgfHwgJGZyb20ubm9kZSgtMykudHlwZSAhPT0gdHlwZVxyXG4gICAgICAgICAgICB8fCAkZnJvbS5pbmRleCgtMikgIT09ICRmcm9tLm5vZGUoLTIpLmNoaWxkQ291bnQgLSAxKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGRpc3BhdGNoKSB7XHJcbiAgICAgICAgICAgIGxldCB3cmFwID0gRnJhZ21lbnQuZW1wdHk7XHJcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxyXG4gICAgICAgICAgICBjb25zdCBkZXB0aEJlZm9yZSA9ICRmcm9tLmluZGV4KC0xKVxyXG4gICAgICAgICAgICAgICAgPyAxXHJcbiAgICAgICAgICAgICAgICA6ICRmcm9tLmluZGV4KC0yKVxyXG4gICAgICAgICAgICAgICAgICAgID8gMlxyXG4gICAgICAgICAgICAgICAgICAgIDogMztcclxuICAgICAgICAgICAgLy8gQnVpbGQgYSBmcmFnbWVudCBjb250YWluaW5nIGVtcHR5IHZlcnNpb25zIG9mIHRoZSBzdHJ1Y3R1cmVcclxuICAgICAgICAgICAgLy8gZnJvbSB0aGUgb3V0ZXIgbGlzdCBpdGVtIHRvIHRoZSBwYXJlbnQgbm9kZSBvZiB0aGUgY3Vyc29yXHJcbiAgICAgICAgICAgIGZvciAobGV0IGQgPSAkZnJvbS5kZXB0aCAtIGRlcHRoQmVmb3JlOyBkID49ICRmcm9tLmRlcHRoIC0gMzsgZCAtPSAxKSB7XHJcbiAgICAgICAgICAgICAgICB3cmFwID0gRnJhZ21lbnQuZnJvbSgkZnJvbS5ub2RlKGQpLmNvcHkod3JhcCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxyXG4gICAgICAgICAgICBjb25zdCBkZXB0aEFmdGVyID0gJGZyb20uaW5kZXhBZnRlcigtMSkgPCAkZnJvbS5ub2RlKC0yKS5jaGlsZENvdW50XHJcbiAgICAgICAgICAgICAgICA/IDFcclxuICAgICAgICAgICAgICAgIDogJGZyb20uaW5kZXhBZnRlcigtMikgPCAkZnJvbS5ub2RlKC0zKS5jaGlsZENvdW50XHJcbiAgICAgICAgICAgICAgICAgICAgPyAyXHJcbiAgICAgICAgICAgICAgICAgICAgOiAzO1xyXG4gICAgICAgICAgICAvLyBBZGQgYSBzZWNvbmQgbGlzdCBpdGVtIHdpdGggYW4gZW1wdHkgZGVmYXVsdCBzdGFydCBub2RlXHJcbiAgICAgICAgICAgIGNvbnN0IG5ld05leHRUeXBlQXR0cmlidXRlcyA9IGdldFNwbGl0dGVkQXR0cmlidXRlcyhleHRlbnNpb25BdHRyaWJ1dGVzLCAkZnJvbS5ub2RlKCkudHlwZS5uYW1lLCAkZnJvbS5ub2RlKCkuYXR0cnMpO1xyXG4gICAgICAgICAgICBjb25zdCBuZXh0VHlwZSA9ICgoX2EgPSB0eXBlLmNvbnRlbnRNYXRjaC5kZWZhdWx0VHlwZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNyZWF0ZUFuZEZpbGwobmV3TmV4dFR5cGVBdHRyaWJ1dGVzKSkgfHwgdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICB3cmFwID0gd3JhcC5hcHBlbmQoRnJhZ21lbnQuZnJvbSh0eXBlLmNyZWF0ZUFuZEZpbGwobnVsbCwgbmV4dFR5cGUpIHx8IHVuZGVmaW5lZCkpO1xyXG4gICAgICAgICAgICBjb25zdCBzdGFydCA9ICRmcm9tLmJlZm9yZSgkZnJvbS5kZXB0aCAtIChkZXB0aEJlZm9yZSAtIDEpKTtcclxuICAgICAgICAgICAgdHIucmVwbGFjZShzdGFydCwgJGZyb20uYWZ0ZXIoLWRlcHRoQWZ0ZXIpLCBuZXcgU2xpY2Uod3JhcCwgNCAtIGRlcHRoQmVmb3JlLCAwKSk7XHJcbiAgICAgICAgICAgIGxldCBzZWwgPSAtMTtcclxuICAgICAgICAgICAgdHIuZG9jLm5vZGVzQmV0d2VlbihzdGFydCwgdHIuZG9jLmNvbnRlbnQuc2l6ZSwgKG4sIHBvcykgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKHNlbCA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKG4uaXNUZXh0YmxvY2sgJiYgbi5jb250ZW50LnNpemUgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBzZWwgPSBwb3MgKyAxO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgaWYgKHNlbCA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICB0ci5zZXRTZWxlY3Rpb24oVGV4dFNlbGVjdGlvbi5uZWFyKHRyLmRvYy5yZXNvbHZlKHNlbCkpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0ci5zY3JvbGxJbnRvVmlldygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIGNvbnN0IG5leHRUeXBlID0gJHRvLnBvcyA9PT0gJGZyb20uZW5kKClcclxuICAgICAgICA/IGdyYW5kUGFyZW50LmNvbnRlbnRNYXRjaEF0KDApLmRlZmF1bHRUeXBlXHJcbiAgICAgICAgOiBudWxsO1xyXG4gICAgY29uc3QgbmV3VHlwZUF0dHJpYnV0ZXMgPSBnZXRTcGxpdHRlZEF0dHJpYnV0ZXMoZXh0ZW5zaW9uQXR0cmlidXRlcywgZ3JhbmRQYXJlbnQudHlwZS5uYW1lLCBncmFuZFBhcmVudC5hdHRycyk7XHJcbiAgICBjb25zdCBuZXdOZXh0VHlwZUF0dHJpYnV0ZXMgPSBnZXRTcGxpdHRlZEF0dHJpYnV0ZXMoZXh0ZW5zaW9uQXR0cmlidXRlcywgJGZyb20ubm9kZSgpLnR5cGUubmFtZSwgJGZyb20ubm9kZSgpLmF0dHJzKTtcclxuICAgIHRyLmRlbGV0ZSgkZnJvbS5wb3MsICR0by5wb3MpO1xyXG4gICAgY29uc3QgdHlwZXMgPSBuZXh0VHlwZVxyXG4gICAgICAgID8gW3sgdHlwZSwgYXR0cnM6IG5ld1R5cGVBdHRyaWJ1dGVzIH0sIHsgdHlwZTogbmV4dFR5cGUsIGF0dHJzOiBuZXdOZXh0VHlwZUF0dHJpYnV0ZXMgfV1cclxuICAgICAgICA6IFt7IHR5cGUsIGF0dHJzOiBuZXdUeXBlQXR0cmlidXRlcyB9XTtcclxuICAgIGlmICghY2FuU3BsaXQodHIuZG9jLCAkZnJvbS5wb3MsIDIpKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgaWYgKGRpc3BhdGNoKSB7XHJcbiAgICAgICAgdHIuc3BsaXQoJGZyb20ucG9zLCAyLCB0eXBlcykuc2Nyb2xsSW50b1ZpZXcoKTtcclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG59O1xuXG5mdW5jdGlvbiBmaW5kUGFyZW50Tm9kZUNsb3Nlc3RUb1BvcygkcG9zLCBwcmVkaWNhdGUpIHtcclxuICAgIGZvciAobGV0IGkgPSAkcG9zLmRlcHRoOyBpID4gMDsgaSAtPSAxKSB7XHJcbiAgICAgICAgY29uc3Qgbm9kZSA9ICRwb3Mubm9kZShpKTtcclxuICAgICAgICBpZiAocHJlZGljYXRlKG5vZGUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBwb3M6IGkgPiAwID8gJHBvcy5iZWZvcmUoaSkgOiAwLFxyXG4gICAgICAgICAgICAgICAgc3RhcnQ6ICRwb3Muc3RhcnQoaSksXHJcbiAgICAgICAgICAgICAgICBkZXB0aDogaSxcclxuICAgICAgICAgICAgICAgIG5vZGUsXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XG5cbmZ1bmN0aW9uIGZpbmRQYXJlbnROb2RlKHByZWRpY2F0ZSkge1xyXG4gICAgcmV0dXJuIChzZWxlY3Rpb24pID0+IGZpbmRQYXJlbnROb2RlQ2xvc2VzdFRvUG9zKHNlbGVjdGlvbi4kZnJvbSwgcHJlZGljYXRlKTtcclxufVxuXG5mdW5jdGlvbiBpc0xpc3QobmFtZSwgZXh0ZW5zaW9ucykge1xyXG4gICAgY29uc3QgeyBub2RlRXh0ZW5zaW9ucyB9ID0gc3BsaXRFeHRlbnNpb25zKGV4dGVuc2lvbnMpO1xyXG4gICAgY29uc3QgZXh0ZW5zaW9uID0gbm9kZUV4dGVuc2lvbnMuZmluZChpdGVtID0+IGl0ZW0ubmFtZSA9PT0gbmFtZSk7XHJcbiAgICBpZiAoIWV4dGVuc2lvbikge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIGNvbnN0IGNvbnRleHQgPSB7XHJcbiAgICAgICAgbmFtZTogZXh0ZW5zaW9uLm5hbWUsXHJcbiAgICAgICAgb3B0aW9uczogZXh0ZW5zaW9uLm9wdGlvbnMsXHJcbiAgICAgICAgc3RvcmFnZTogZXh0ZW5zaW9uLnN0b3JhZ2UsXHJcbiAgICB9O1xyXG4gICAgY29uc3QgZ3JvdXAgPSBjYWxsT3JSZXR1cm4oZ2V0RXh0ZW5zaW9uRmllbGQoZXh0ZW5zaW9uLCAnZ3JvdXAnLCBjb250ZXh0KSk7XHJcbiAgICBpZiAodHlwZW9mIGdyb3VwICE9PSAnc3RyaW5nJykge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIHJldHVybiBncm91cC5zcGxpdCgnICcpLmluY2x1ZGVzKCdsaXN0Jyk7XHJcbn1cblxuY29uc3Qgam9pbkxpc3RCYWNrd2FyZHMgPSAodHIsIGxpc3RUeXBlKSA9PiB7XHJcbiAgICBjb25zdCBsaXN0ID0gZmluZFBhcmVudE5vZGUobm9kZSA9PiBub2RlLnR5cGUgPT09IGxpc3RUeXBlKSh0ci5zZWxlY3Rpb24pO1xyXG4gICAgaWYgKCFsaXN0KSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICBjb25zdCBiZWZvcmUgPSB0ci5kb2MucmVzb2x2ZShNYXRoLm1heCgwLCBsaXN0LnBvcyAtIDEpKS5iZWZvcmUobGlzdC5kZXB0aCk7XHJcbiAgICBpZiAoYmVmb3JlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIGNvbnN0IG5vZGVCZWZvcmUgPSB0ci5kb2Mubm9kZUF0KGJlZm9yZSk7XHJcbiAgICBjb25zdCBjYW5Kb2luQmFja3dhcmRzID0gbGlzdC5ub2RlLnR5cGUgPT09IChub2RlQmVmb3JlID09PSBudWxsIHx8IG5vZGVCZWZvcmUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG5vZGVCZWZvcmUudHlwZSlcclxuICAgICAgICAmJiBjYW5Kb2luKHRyLmRvYywgbGlzdC5wb3MpO1xyXG4gICAgaWYgKCFjYW5Kb2luQmFja3dhcmRzKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICB0ci5qb2luKGxpc3QucG9zKTtcclxuICAgIHJldHVybiB0cnVlO1xyXG59O1xyXG5jb25zdCBqb2luTGlzdEZvcndhcmRzID0gKHRyLCBsaXN0VHlwZSkgPT4ge1xyXG4gICAgY29uc3QgbGlzdCA9IGZpbmRQYXJlbnROb2RlKG5vZGUgPT4gbm9kZS50eXBlID09PSBsaXN0VHlwZSkodHIuc2VsZWN0aW9uKTtcclxuICAgIGlmICghbGlzdCkge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgY29uc3QgYWZ0ZXIgPSB0ci5kb2MucmVzb2x2ZShsaXN0LnN0YXJ0KS5hZnRlcihsaXN0LmRlcHRoKTtcclxuICAgIGlmIChhZnRlciA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICBjb25zdCBub2RlQWZ0ZXIgPSB0ci5kb2Mubm9kZUF0KGFmdGVyKTtcclxuICAgIGNvbnN0IGNhbkpvaW5Gb3J3YXJkcyA9IGxpc3Qubm9kZS50eXBlID09PSAobm9kZUFmdGVyID09PSBudWxsIHx8IG5vZGVBZnRlciA9PT0gdm9pZCAwID8gdm9pZCAwIDogbm9kZUFmdGVyLnR5cGUpXHJcbiAgICAgICAgJiYgY2FuSm9pbih0ci5kb2MsIGFmdGVyKTtcclxuICAgIGlmICghY2FuSm9pbkZvcndhcmRzKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICB0ci5qb2luKGFmdGVyKTtcclxuICAgIHJldHVybiB0cnVlO1xyXG59O1xyXG5jb25zdCB0b2dnbGVMaXN0ID0gKGxpc3RUeXBlT3JOYW1lLCBpdGVtVHlwZU9yTmFtZSkgPT4gKHsgZWRpdG9yLCB0ciwgc3RhdGUsIGRpc3BhdGNoLCBjaGFpbiwgY29tbWFuZHMsIGNhbiwgfSkgPT4ge1xyXG4gICAgY29uc3QgeyBleHRlbnNpb25zIH0gPSBlZGl0b3IuZXh0ZW5zaW9uTWFuYWdlcjtcclxuICAgIGNvbnN0IGxpc3RUeXBlID0gZ2V0Tm9kZVR5cGUobGlzdFR5cGVPck5hbWUsIHN0YXRlLnNjaGVtYSk7XHJcbiAgICBjb25zdCBpdGVtVHlwZSA9IGdldE5vZGVUeXBlKGl0ZW1UeXBlT3JOYW1lLCBzdGF0ZS5zY2hlbWEpO1xyXG4gICAgY29uc3QgeyBzZWxlY3Rpb24gfSA9IHN0YXRlO1xyXG4gICAgY29uc3QgeyAkZnJvbSwgJHRvIH0gPSBzZWxlY3Rpb247XHJcbiAgICBjb25zdCByYW5nZSA9ICRmcm9tLmJsb2NrUmFuZ2UoJHRvKTtcclxuICAgIGlmICghcmFuZ2UpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBjb25zdCBwYXJlbnRMaXN0ID0gZmluZFBhcmVudE5vZGUobm9kZSA9PiBpc0xpc3Qobm9kZS50eXBlLm5hbWUsIGV4dGVuc2lvbnMpKShzZWxlY3Rpb24pO1xyXG4gICAgaWYgKHJhbmdlLmRlcHRoID49IDEgJiYgcGFyZW50TGlzdCAmJiByYW5nZS5kZXB0aCAtIHBhcmVudExpc3QuZGVwdGggPD0gMSkge1xyXG4gICAgICAgIC8vIHJlbW92ZSBsaXN0XHJcbiAgICAgICAgaWYgKHBhcmVudExpc3Qubm9kZS50eXBlID09PSBsaXN0VHlwZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gY29tbWFuZHMubGlmdExpc3RJdGVtKGl0ZW1UeXBlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY2hhbmdlIGxpc3QgdHlwZVxyXG4gICAgICAgIGlmIChpc0xpc3QocGFyZW50TGlzdC5ub2RlLnR5cGUubmFtZSwgZXh0ZW5zaW9ucylcclxuICAgICAgICAgICAgJiYgbGlzdFR5cGUudmFsaWRDb250ZW50KHBhcmVudExpc3Qubm9kZS5jb250ZW50KVxyXG4gICAgICAgICAgICAmJiBkaXNwYXRjaCkge1xyXG4gICAgICAgICAgICByZXR1cm4gY2hhaW4oKVxyXG4gICAgICAgICAgICAgICAgLmNvbW1hbmQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdHIuc2V0Tm9kZU1hcmt1cChwYXJlbnRMaXN0LnBvcywgbGlzdFR5cGUpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAuY29tbWFuZCgoKSA9PiBqb2luTGlzdEJhY2t3YXJkcyh0ciwgbGlzdFR5cGUpKVxyXG4gICAgICAgICAgICAgICAgLmNvbW1hbmQoKCkgPT4gam9pbkxpc3RGb3J3YXJkcyh0ciwgbGlzdFR5cGUpKVxyXG4gICAgICAgICAgICAgICAgLnJ1bigpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBjaGFpbigpXHJcbiAgICAgICAgLy8gdHJ5IHRvIGNvbnZlcnQgbm9kZSB0byBkZWZhdWx0IG5vZGUgaWYgbmVlZGVkXHJcbiAgICAgICAgLmNvbW1hbmQoKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGNhbldyYXBJbkxpc3QgPSBjYW4oKS53cmFwSW5MaXN0KGxpc3RUeXBlKTtcclxuICAgICAgICBpZiAoY2FuV3JhcEluTGlzdCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGNvbW1hbmRzLmNsZWFyTm9kZXMoKTtcclxuICAgIH0pXHJcbiAgICAgICAgLndyYXBJbkxpc3QobGlzdFR5cGUpXHJcbiAgICAgICAgLmNvbW1hbmQoKCkgPT4gam9pbkxpc3RCYWNrd2FyZHModHIsIGxpc3RUeXBlKSlcclxuICAgICAgICAuY29tbWFuZCgoKSA9PiBqb2luTGlzdEZvcndhcmRzKHRyLCBsaXN0VHlwZSkpXHJcbiAgICAgICAgLnJ1bigpO1xyXG59O1xuXG5mdW5jdGlvbiBpc01hcmtBY3RpdmUoc3RhdGUsIHR5cGVPck5hbWUsIGF0dHJpYnV0ZXMgPSB7fSkge1xyXG4gICAgY29uc3QgeyBlbXB0eSwgcmFuZ2VzIH0gPSBzdGF0ZS5zZWxlY3Rpb247XHJcbiAgICBjb25zdCB0eXBlID0gdHlwZU9yTmFtZVxyXG4gICAgICAgID8gZ2V0TWFya1R5cGUodHlwZU9yTmFtZSwgc3RhdGUuc2NoZW1hKVxyXG4gICAgICAgIDogbnVsbDtcclxuICAgIGlmIChlbXB0eSkge1xyXG4gICAgICAgIHJldHVybiAhIShzdGF0ZS5zdG9yZWRNYXJrcyB8fCBzdGF0ZS5zZWxlY3Rpb24uJGZyb20ubWFya3MoKSlcclxuICAgICAgICAgICAgLmZpbHRlcihtYXJrID0+IHtcclxuICAgICAgICAgICAgaWYgKCF0eXBlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdHlwZS5uYW1lID09PSBtYXJrLnR5cGUubmFtZTtcclxuICAgICAgICB9KVxyXG4gICAgICAgICAgICAuZmluZChtYXJrID0+IG9iamVjdEluY2x1ZGVzKG1hcmsuYXR0cnMsIGF0dHJpYnV0ZXMsIHsgc3RyaWN0OiBmYWxzZSB9KSk7XHJcbiAgICB9XHJcbiAgICBsZXQgc2VsZWN0aW9uUmFuZ2UgPSAwO1xyXG4gICAgY29uc3QgbWFya1JhbmdlcyA9IFtdO1xyXG4gICAgcmFuZ2VzLmZvckVhY2goKHsgJGZyb20sICR0byB9KSA9PiB7XHJcbiAgICAgICAgY29uc3QgZnJvbSA9ICRmcm9tLnBvcztcclxuICAgICAgICBjb25zdCB0byA9ICR0by5wb3M7XHJcbiAgICAgICAgc3RhdGUuZG9jLm5vZGVzQmV0d2Vlbihmcm9tLCB0bywgKG5vZGUsIHBvcykgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIW5vZGUuaXNUZXh0ICYmICFub2RlLm1hcmtzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IHJlbGF0aXZlRnJvbSA9IE1hdGgubWF4KGZyb20sIHBvcyk7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlbGF0aXZlVG8gPSBNYXRoLm1pbih0bywgcG9zICsgbm9kZS5ub2RlU2l6ZSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHJhbmdlID0gcmVsYXRpdmVUbyAtIHJlbGF0aXZlRnJvbTtcclxuICAgICAgICAgICAgc2VsZWN0aW9uUmFuZ2UgKz0gcmFuZ2U7XHJcbiAgICAgICAgICAgIG1hcmtSYW5nZXMucHVzaCguLi5ub2RlLm1hcmtzLm1hcChtYXJrID0+ICh7XHJcbiAgICAgICAgICAgICAgICBtYXJrLFxyXG4gICAgICAgICAgICAgICAgZnJvbTogcmVsYXRpdmVGcm9tLFxyXG4gICAgICAgICAgICAgICAgdG86IHJlbGF0aXZlVG8sXHJcbiAgICAgICAgICAgIH0pKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuICAgIGlmIChzZWxlY3Rpb25SYW5nZSA9PT0gMCkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIC8vIGNhbGN1bGF0ZSByYW5nZSBvZiBtYXRjaGVkIG1hcmtcclxuICAgIGNvbnN0IG1hdGNoZWRSYW5nZSA9IG1hcmtSYW5nZXNcclxuICAgICAgICAuZmlsdGVyKG1hcmtSYW5nZSA9PiB7XHJcbiAgICAgICAgaWYgKCF0eXBlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHlwZS5uYW1lID09PSBtYXJrUmFuZ2UubWFyay50eXBlLm5hbWU7XHJcbiAgICB9KVxyXG4gICAgICAgIC5maWx0ZXIobWFya1JhbmdlID0+IG9iamVjdEluY2x1ZGVzKG1hcmtSYW5nZS5tYXJrLmF0dHJzLCBhdHRyaWJ1dGVzLCB7IHN0cmljdDogZmFsc2UgfSkpXHJcbiAgICAgICAgLnJlZHVjZSgoc3VtLCBtYXJrUmFuZ2UpID0+IHN1bSArIG1hcmtSYW5nZS50byAtIG1hcmtSYW5nZS5mcm9tLCAwKTtcclxuICAgIC8vIGNhbGN1bGF0ZSByYW5nZSBvZiBtYXJrcyB0aGF0IGV4Y2x1ZGVzIHRoZSBzZWFyY2hlZCBtYXJrXHJcbiAgICAvLyBmb3IgZXhhbXBsZSBgY29kZWAgZG9lc27igJl0IGFsbG93IGFueSBvdGhlciBtYXJrc1xyXG4gICAgY29uc3QgZXhjbHVkZWRSYW5nZSA9IG1hcmtSYW5nZXNcclxuICAgICAgICAuZmlsdGVyKG1hcmtSYW5nZSA9PiB7XHJcbiAgICAgICAgaWYgKCF0eXBlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbWFya1JhbmdlLm1hcmsudHlwZSAhPT0gdHlwZVxyXG4gICAgICAgICAgICAmJiBtYXJrUmFuZ2UubWFyay50eXBlLmV4Y2x1ZGVzKHR5cGUpO1xyXG4gICAgfSlcclxuICAgICAgICAucmVkdWNlKChzdW0sIG1hcmtSYW5nZSkgPT4gc3VtICsgbWFya1JhbmdlLnRvIC0gbWFya1JhbmdlLmZyb20sIDApO1xyXG4gICAgLy8gd2Ugb25seSBpbmNsdWRlIHRoZSByZXN1bHQgb2YgYGV4Y2x1ZGVkUmFuZ2VgXHJcbiAgICAvLyBpZiB0aGVyZSBpcyBhIG1hdGNoIGF0IGFsbFxyXG4gICAgY29uc3QgcmFuZ2UgPSBtYXRjaGVkUmFuZ2UgPiAwXHJcbiAgICAgICAgPyBtYXRjaGVkUmFuZ2UgKyBleGNsdWRlZFJhbmdlXHJcbiAgICAgICAgOiBtYXRjaGVkUmFuZ2U7XHJcbiAgICByZXR1cm4gcmFuZ2UgPj0gc2VsZWN0aW9uUmFuZ2U7XHJcbn1cblxuY29uc3QgdG9nZ2xlTWFyayA9ICh0eXBlT3JOYW1lLCBhdHRyaWJ1dGVzID0ge30sIG9wdGlvbnMgPSB7fSkgPT4gKHsgc3RhdGUsIGNvbW1hbmRzIH0pID0+IHtcclxuICAgIGNvbnN0IHsgZXh0ZW5kRW1wdHlNYXJrUmFuZ2UgPSBmYWxzZSB9ID0gb3B0aW9ucztcclxuICAgIGNvbnN0IHR5cGUgPSBnZXRNYXJrVHlwZSh0eXBlT3JOYW1lLCBzdGF0ZS5zY2hlbWEpO1xyXG4gICAgY29uc3QgaXNBY3RpdmUgPSBpc01hcmtBY3RpdmUoc3RhdGUsIHR5cGUsIGF0dHJpYnV0ZXMpO1xyXG4gICAgaWYgKGlzQWN0aXZlKSB7XHJcbiAgICAgICAgcmV0dXJuIGNvbW1hbmRzLnVuc2V0TWFyayh0eXBlLCB7IGV4dGVuZEVtcHR5TWFya1JhbmdlIH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNvbW1hbmRzLnNldE1hcmsodHlwZSwgYXR0cmlidXRlcyk7XHJcbn07XG5cbmNvbnN0IHRvZ2dsZU5vZGUgPSAodHlwZU9yTmFtZSwgdG9nZ2xlVHlwZU9yTmFtZSwgYXR0cmlidXRlcyA9IHt9KSA9PiAoeyBzdGF0ZSwgY29tbWFuZHMgfSkgPT4ge1xyXG4gICAgY29uc3QgdHlwZSA9IGdldE5vZGVUeXBlKHR5cGVPck5hbWUsIHN0YXRlLnNjaGVtYSk7XHJcbiAgICBjb25zdCB0b2dnbGVUeXBlID0gZ2V0Tm9kZVR5cGUodG9nZ2xlVHlwZU9yTmFtZSwgc3RhdGUuc2NoZW1hKTtcclxuICAgIGNvbnN0IGlzQWN0aXZlID0gaXNOb2RlQWN0aXZlKHN0YXRlLCB0eXBlLCBhdHRyaWJ1dGVzKTtcclxuICAgIGlmIChpc0FjdGl2ZSkge1xyXG4gICAgICAgIHJldHVybiBjb21tYW5kcy5zZXROb2RlKHRvZ2dsZVR5cGUpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNvbW1hbmRzLnNldE5vZGUodHlwZSwgYXR0cmlidXRlcyk7XHJcbn07XG5cbmNvbnN0IHRvZ2dsZVdyYXAgPSAodHlwZU9yTmFtZSwgYXR0cmlidXRlcyA9IHt9KSA9PiAoeyBzdGF0ZSwgY29tbWFuZHMgfSkgPT4ge1xyXG4gICAgY29uc3QgdHlwZSA9IGdldE5vZGVUeXBlKHR5cGVPck5hbWUsIHN0YXRlLnNjaGVtYSk7XHJcbiAgICBjb25zdCBpc0FjdGl2ZSA9IGlzTm9kZUFjdGl2ZShzdGF0ZSwgdHlwZSwgYXR0cmlidXRlcyk7XHJcbiAgICBpZiAoaXNBY3RpdmUpIHtcclxuICAgICAgICByZXR1cm4gY29tbWFuZHMubGlmdCh0eXBlKTtcclxuICAgIH1cclxuICAgIHJldHVybiBjb21tYW5kcy53cmFwSW4odHlwZSwgYXR0cmlidXRlcyk7XHJcbn07XG5cbmNvbnN0IHVuZG9JbnB1dFJ1bGUgPSAoKSA9PiAoeyBzdGF0ZSwgZGlzcGF0Y2ggfSkgPT4ge1xyXG4gICAgY29uc3QgcGx1Z2lucyA9IHN0YXRlLnBsdWdpbnM7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBsdWdpbnMubGVuZ3RoOyBpICs9IDEpIHtcclxuICAgICAgICBjb25zdCBwbHVnaW4gPSBwbHVnaW5zW2ldO1xyXG4gICAgICAgIGxldCB1bmRvYWJsZTtcclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXHJcbiAgICAgICAgaWYgKHBsdWdpbi5zcGVjLmlzSW5wdXRSdWxlcyAmJiAodW5kb2FibGUgPSBwbHVnaW4uZ2V0U3RhdGUoc3RhdGUpKSkge1xyXG4gICAgICAgICAgICBpZiAoZGlzcGF0Y2gpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRyID0gc3RhdGUudHI7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0b1VuZG8gPSB1bmRvYWJsZS50cmFuc2Zvcm07XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gdG9VbmRvLnN0ZXBzLmxlbmd0aCAtIDE7IGogPj0gMDsgaiAtPSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHIuc3RlcCh0b1VuZG8uc3RlcHNbal0uaW52ZXJ0KHRvVW5kby5kb2NzW2pdKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodW5kb2FibGUudGV4dCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG1hcmtzID0gdHIuZG9jLnJlc29sdmUodW5kb2FibGUuZnJvbSkubWFya3MoKTtcclxuICAgICAgICAgICAgICAgICAgICB0ci5yZXBsYWNlV2l0aCh1bmRvYWJsZS5mcm9tLCB1bmRvYWJsZS50bywgc3RhdGUuc2NoZW1hLnRleHQodW5kb2FibGUudGV4dCwgbWFya3MpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRyLmRlbGV0ZSh1bmRvYWJsZS5mcm9tLCB1bmRvYWJsZS50byk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG59O1xuXG5jb25zdCB1bnNldEFsbE1hcmtzID0gKCkgPT4gKHsgdHIsIGRpc3BhdGNoIH0pID0+IHtcclxuICAgIGNvbnN0IHsgc2VsZWN0aW9uIH0gPSB0cjtcclxuICAgIGNvbnN0IHsgZW1wdHksIHJhbmdlcyB9ID0gc2VsZWN0aW9uO1xyXG4gICAgaWYgKGVtcHR5KSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICBpZiAoZGlzcGF0Y2gpIHtcclxuICAgICAgICByYW5nZXMuZm9yRWFjaChyYW5nZSA9PiB7XHJcbiAgICAgICAgICAgIHRyLnJlbW92ZU1hcmsocmFuZ2UuJGZyb20ucG9zLCByYW5nZS4kdG8ucG9zKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG59O1xuXG5jb25zdCB1bnNldE1hcmsgPSAodHlwZU9yTmFtZSwgb3B0aW9ucyA9IHt9KSA9PiAoeyB0ciwgc3RhdGUsIGRpc3BhdGNoIH0pID0+IHtcclxuICAgIHZhciBfYTtcclxuICAgIGNvbnN0IHsgZXh0ZW5kRW1wdHlNYXJrUmFuZ2UgPSBmYWxzZSB9ID0gb3B0aW9ucztcclxuICAgIGNvbnN0IHsgc2VsZWN0aW9uIH0gPSB0cjtcclxuICAgIGNvbnN0IHR5cGUgPSBnZXRNYXJrVHlwZSh0eXBlT3JOYW1lLCBzdGF0ZS5zY2hlbWEpO1xyXG4gICAgY29uc3QgeyAkZnJvbSwgZW1wdHksIHJhbmdlcyB9ID0gc2VsZWN0aW9uO1xyXG4gICAgaWYgKCFkaXNwYXRjaCkge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgaWYgKGVtcHR5ICYmIGV4dGVuZEVtcHR5TWFya1JhbmdlKSB7XHJcbiAgICAgICAgbGV0IHsgZnJvbSwgdG8gfSA9IHNlbGVjdGlvbjtcclxuICAgICAgICBjb25zdCBhdHRycyA9IChfYSA9ICRmcm9tLm1hcmtzKCkuZmluZChtYXJrID0+IG1hcmsudHlwZSA9PT0gdHlwZSkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5hdHRycztcclxuICAgICAgICBjb25zdCByYW5nZSA9IGdldE1hcmtSYW5nZSgkZnJvbSwgdHlwZSwgYXR0cnMpO1xyXG4gICAgICAgIGlmIChyYW5nZSkge1xyXG4gICAgICAgICAgICBmcm9tID0gcmFuZ2UuZnJvbTtcclxuICAgICAgICAgICAgdG8gPSByYW5nZS50bztcclxuICAgICAgICB9XHJcbiAgICAgICAgdHIucmVtb3ZlTWFyayhmcm9tLCB0bywgdHlwZSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByYW5nZXMuZm9yRWFjaChyYW5nZSA9PiB7XHJcbiAgICAgICAgICAgIHRyLnJlbW92ZU1hcmsocmFuZ2UuJGZyb20ucG9zLCByYW5nZS4kdG8ucG9zLCB0eXBlKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHRyLnJlbW92ZVN0b3JlZE1hcmsodHlwZSk7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufTtcblxuY29uc3QgdXBkYXRlQXR0cmlidXRlcyA9ICh0eXBlT3JOYW1lLCBhdHRyaWJ1dGVzID0ge30pID0+ICh7IHRyLCBzdGF0ZSwgZGlzcGF0Y2ggfSkgPT4ge1xyXG4gICAgbGV0IG5vZGVUeXBlID0gbnVsbDtcclxuICAgIGxldCBtYXJrVHlwZSA9IG51bGw7XHJcbiAgICBjb25zdCBzY2hlbWFUeXBlID0gZ2V0U2NoZW1hVHlwZU5hbWVCeU5hbWUodHlwZW9mIHR5cGVPck5hbWUgPT09ICdzdHJpbmcnXHJcbiAgICAgICAgPyB0eXBlT3JOYW1lXHJcbiAgICAgICAgOiB0eXBlT3JOYW1lLm5hbWUsIHN0YXRlLnNjaGVtYSk7XHJcbiAgICBpZiAoIXNjaGVtYVR5cGUpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBpZiAoc2NoZW1hVHlwZSA9PT0gJ25vZGUnKSB7XHJcbiAgICAgICAgbm9kZVR5cGUgPSBnZXROb2RlVHlwZSh0eXBlT3JOYW1lLCBzdGF0ZS5zY2hlbWEpO1xyXG4gICAgfVxyXG4gICAgaWYgKHNjaGVtYVR5cGUgPT09ICdtYXJrJykge1xyXG4gICAgICAgIG1hcmtUeXBlID0gZ2V0TWFya1R5cGUodHlwZU9yTmFtZSwgc3RhdGUuc2NoZW1hKTtcclxuICAgIH1cclxuICAgIGlmIChkaXNwYXRjaCkge1xyXG4gICAgICAgIHRyLnNlbGVjdGlvbi5yYW5nZXMuZm9yRWFjaChyYW5nZSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGZyb20gPSByYW5nZS4kZnJvbS5wb3M7XHJcbiAgICAgICAgICAgIGNvbnN0IHRvID0gcmFuZ2UuJHRvLnBvcztcclxuICAgICAgICAgICAgc3RhdGUuZG9jLm5vZGVzQmV0d2Vlbihmcm9tLCB0bywgKG5vZGUsIHBvcykgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKG5vZGVUeXBlICYmIG5vZGVUeXBlID09PSBub2RlLnR5cGUpIHtcclxuICAgICAgICAgICAgICAgICAgICB0ci5zZXROb2RlTWFya3VwKHBvcywgdW5kZWZpbmVkLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLm5vZGUuYXR0cnMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLmF0dHJpYnV0ZXMsXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAobWFya1R5cGUgJiYgbm9kZS5tYXJrcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBub2RlLm1hcmtzLmZvckVhY2gobWFyayA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXJrVHlwZSA9PT0gbWFyay50eXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0cmltbWVkRnJvbSA9IE1hdGgubWF4KHBvcywgZnJvbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0cmltbWVkVG8gPSBNYXRoLm1pbihwb3MgKyBub2RlLm5vZGVTaXplLCB0byk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ci5hZGRNYXJrKHRyaW1tZWRGcm9tLCB0cmltbWVkVG8sIG1hcmtUeXBlLmNyZWF0ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4ubWFyay5hdHRycyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5hdHRyaWJ1dGVzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbn07XG5cbmNvbnN0IHdyYXBJbiA9ICh0eXBlT3JOYW1lLCBhdHRyaWJ1dGVzID0ge30pID0+ICh7IHN0YXRlLCBkaXNwYXRjaCB9KSA9PiB7XHJcbiAgICBjb25zdCB0eXBlID0gZ2V0Tm9kZVR5cGUodHlwZU9yTmFtZSwgc3RhdGUuc2NoZW1hKTtcclxuICAgIHJldHVybiB3cmFwSW4kMSh0eXBlLCBhdHRyaWJ1dGVzKShzdGF0ZSwgZGlzcGF0Y2gpO1xyXG59O1xuXG5jb25zdCB3cmFwSW5MaXN0ID0gKHR5cGVPck5hbWUsIGF0dHJpYnV0ZXMgPSB7fSkgPT4gKHsgc3RhdGUsIGRpc3BhdGNoIH0pID0+IHtcclxuICAgIGNvbnN0IHR5cGUgPSBnZXROb2RlVHlwZSh0eXBlT3JOYW1lLCBzdGF0ZS5zY2hlbWEpO1xyXG4gICAgcmV0dXJuIHdyYXBJbkxpc3QkMSh0eXBlLCBhdHRyaWJ1dGVzKShzdGF0ZSwgZGlzcGF0Y2gpO1xyXG59O1xuXG52YXIgY29tbWFuZHMgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG4gIF9fcHJvdG9fXzogbnVsbCxcbiAgYmx1cjogYmx1cixcbiAgY2xlYXJDb250ZW50OiBjbGVhckNvbnRlbnQsXG4gIGNsZWFyTm9kZXM6IGNsZWFyTm9kZXMsXG4gIGNvbW1hbmQ6IGNvbW1hbmQsXG4gIGNyZWF0ZVBhcmFncmFwaE5lYXI6IGNyZWF0ZVBhcmFncmFwaE5lYXIsXG4gIGRlbGV0ZU5vZGU6IGRlbGV0ZU5vZGUsXG4gIGRlbGV0ZVJhbmdlOiBkZWxldGVSYW5nZSxcbiAgZGVsZXRlU2VsZWN0aW9uOiBkZWxldGVTZWxlY3Rpb24sXG4gIGVudGVyOiBlbnRlcixcbiAgZXhpdENvZGU6IGV4aXRDb2RlLFxuICBleHRlbmRNYXJrUmFuZ2U6IGV4dGVuZE1hcmtSYW5nZSxcbiAgZmlyc3Q6IGZpcnN0LFxuICBmb2N1czogZm9jdXMsXG4gIGZvckVhY2g6IGZvckVhY2gsXG4gIGluc2VydENvbnRlbnQ6IGluc2VydENvbnRlbnQsXG4gIGluc2VydENvbnRlbnRBdDogaW5zZXJ0Q29udGVudEF0LFxuICBqb2luQmFja3dhcmQ6IGpvaW5CYWNrd2FyZCxcbiAgam9pbkZvcndhcmQ6IGpvaW5Gb3J3YXJkLFxuICBrZXlib2FyZFNob3J0Y3V0OiBrZXlib2FyZFNob3J0Y3V0LFxuICBsaWZ0OiBsaWZ0LFxuICBsaWZ0RW1wdHlCbG9jazogbGlmdEVtcHR5QmxvY2ssXG4gIGxpZnRMaXN0SXRlbTogbGlmdExpc3RJdGVtLFxuICBuZXdsaW5lSW5Db2RlOiBuZXdsaW5lSW5Db2RlLFxuICByZXNldEF0dHJpYnV0ZXM6IHJlc2V0QXR0cmlidXRlcyxcbiAgc2Nyb2xsSW50b1ZpZXc6IHNjcm9sbEludG9WaWV3LFxuICBzZWxlY3RBbGw6IHNlbGVjdEFsbCxcbiAgc2VsZWN0Tm9kZUJhY2t3YXJkOiBzZWxlY3ROb2RlQmFja3dhcmQsXG4gIHNlbGVjdE5vZGVGb3J3YXJkOiBzZWxlY3ROb2RlRm9yd2FyZCxcbiAgc2VsZWN0UGFyZW50Tm9kZTogc2VsZWN0UGFyZW50Tm9kZSxcbiAgc2VsZWN0VGV4dGJsb2NrRW5kOiBzZWxlY3RUZXh0YmxvY2tFbmQsXG4gIHNlbGVjdFRleHRibG9ja1N0YXJ0OiBzZWxlY3RUZXh0YmxvY2tTdGFydCxcbiAgc2V0Q29udGVudDogc2V0Q29udGVudCxcbiAgc2V0TWFyazogc2V0TWFyayxcbiAgc2V0TWV0YTogc2V0TWV0YSxcbiAgc2V0Tm9kZTogc2V0Tm9kZSxcbiAgc2V0Tm9kZVNlbGVjdGlvbjogc2V0Tm9kZVNlbGVjdGlvbixcbiAgc2V0VGV4dFNlbGVjdGlvbjogc2V0VGV4dFNlbGVjdGlvbixcbiAgc2lua0xpc3RJdGVtOiBzaW5rTGlzdEl0ZW0sXG4gIHNwbGl0QmxvY2s6IHNwbGl0QmxvY2ssXG4gIHNwbGl0TGlzdEl0ZW06IHNwbGl0TGlzdEl0ZW0sXG4gIHRvZ2dsZUxpc3Q6IHRvZ2dsZUxpc3QsXG4gIHRvZ2dsZU1hcms6IHRvZ2dsZU1hcmssXG4gIHRvZ2dsZU5vZGU6IHRvZ2dsZU5vZGUsXG4gIHRvZ2dsZVdyYXA6IHRvZ2dsZVdyYXAsXG4gIHVuZG9JbnB1dFJ1bGU6IHVuZG9JbnB1dFJ1bGUsXG4gIHVuc2V0QWxsTWFya3M6IHVuc2V0QWxsTWFya3MsXG4gIHVuc2V0TWFyazogdW5zZXRNYXJrLFxuICB1cGRhdGVBdHRyaWJ1dGVzOiB1cGRhdGVBdHRyaWJ1dGVzLFxuICB3cmFwSW46IHdyYXBJbixcbiAgd3JhcEluTGlzdDogd3JhcEluTGlzdFxufSk7XG5cbmNvbnN0IENvbW1hbmRzID0gRXh0ZW5zaW9uLmNyZWF0ZSh7XHJcbiAgICBuYW1lOiAnY29tbWFuZHMnLFxyXG4gICAgYWRkQ29tbWFuZHMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgLi4uY29tbWFuZHMsXHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbn0pO1xuXG5jb25zdCBFZGl0YWJsZSA9IEV4dGVuc2lvbi5jcmVhdGUoe1xyXG4gICAgbmFtZTogJ2VkaXRhYmxlJyxcclxuICAgIGFkZFByb3NlTWlycm9yUGx1Z2lucygpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICBuZXcgUGx1Z2luKHtcclxuICAgICAgICAgICAgICAgIGtleTogbmV3IFBsdWdpbktleSgnZWRpdGFibGUnKSxcclxuICAgICAgICAgICAgICAgIHByb3BzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZWRpdGFibGU6ICgpID0+IHRoaXMuZWRpdG9yLm9wdGlvbnMuZWRpdGFibGUsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICBdO1xyXG4gICAgfSxcclxufSk7XG5cbmNvbnN0IEZvY3VzRXZlbnRzID0gRXh0ZW5zaW9uLmNyZWF0ZSh7XHJcbiAgICBuYW1lOiAnZm9jdXNFdmVudHMnLFxyXG4gICAgYWRkUHJvc2VNaXJyb3JQbHVnaW5zKCkge1xyXG4gICAgICAgIGNvbnN0IHsgZWRpdG9yIH0gPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIG5ldyBQbHVnaW4oe1xyXG4gICAgICAgICAgICAgICAga2V5OiBuZXcgUGx1Z2luS2V5KCdmb2N1c0V2ZW50cycpLFxyXG4gICAgICAgICAgICAgICAgcHJvcHM6IHtcclxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVET01FdmVudHM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9jdXM6ICh2aWV3LCBldmVudCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWRpdG9yLmlzRm9jdXNlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0cmFuc2FjdGlvbiA9IGVkaXRvci5zdGF0ZS50clxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRNZXRhKCdmb2N1cycsIHsgZXZlbnQgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc2V0TWV0YSgnYWRkVG9IaXN0b3J5JywgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlldy5kaXNwYXRjaCh0cmFuc2FjdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJsdXI6ICh2aWV3LCBldmVudCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWRpdG9yLmlzRm9jdXNlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdHJhbnNhY3Rpb24gPSBlZGl0b3Iuc3RhdGUudHJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc2V0TWV0YSgnYmx1cicsIHsgZXZlbnQgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc2V0TWV0YSgnYWRkVG9IaXN0b3J5JywgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlldy5kaXNwYXRjaCh0cmFuc2FjdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgIF07XHJcbiAgICB9LFxyXG59KTtcblxuY29uc3QgS2V5bWFwID0gRXh0ZW5zaW9uLmNyZWF0ZSh7XHJcbiAgICBuYW1lOiAna2V5bWFwJyxcclxuICAgIGFkZEtleWJvYXJkU2hvcnRjdXRzKCkge1xyXG4gICAgICAgIGNvbnN0IGhhbmRsZUJhY2tzcGFjZSA9ICgpID0+IHRoaXMuZWRpdG9yLmNvbW1hbmRzLmZpcnN0KCh7IGNvbW1hbmRzIH0pID0+IFtcclxuICAgICAgICAgICAgKCkgPT4gY29tbWFuZHMudW5kb0lucHV0UnVsZSgpLFxyXG4gICAgICAgICAgICAvLyBtYXliZSBjb252ZXJ0IGZpcnN0IHRleHQgYmxvY2sgbm9kZSB0byBkZWZhdWx0IG5vZGVcclxuICAgICAgICAgICAgKCkgPT4gY29tbWFuZHMuY29tbWFuZCgoeyB0ciB9KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB7IHNlbGVjdGlvbiwgZG9jIH0gPSB0cjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHsgZW1wdHksICRhbmNob3IgfSA9IHNlbGVjdGlvbjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHsgcG9zLCBwYXJlbnQgfSA9ICRhbmNob3I7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpc0F0U3RhcnQgPSBTZWxlY3Rpb24uYXRTdGFydChkb2MpLmZyb20gPT09IHBvcztcclxuICAgICAgICAgICAgICAgIGlmICghZW1wdHlcclxuICAgICAgICAgICAgICAgICAgICB8fCAhaXNBdFN0YXJ0XHJcbiAgICAgICAgICAgICAgICAgICAgfHwgIXBhcmVudC50eXBlLmlzVGV4dGJsb2NrXHJcbiAgICAgICAgICAgICAgICAgICAgfHwgcGFyZW50LnRleHRDb250ZW50Lmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBjb21tYW5kcy5jbGVhck5vZGVzKCk7XHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAoKSA9PiBjb21tYW5kcy5kZWxldGVTZWxlY3Rpb24oKSxcclxuICAgICAgICAgICAgKCkgPT4gY29tbWFuZHMuam9pbkJhY2t3YXJkKCksXHJcbiAgICAgICAgICAgICgpID0+IGNvbW1hbmRzLnNlbGVjdE5vZGVCYWNrd2FyZCgpLFxyXG4gICAgICAgIF0pO1xyXG4gICAgICAgIGNvbnN0IGhhbmRsZURlbGV0ZSA9ICgpID0+IHRoaXMuZWRpdG9yLmNvbW1hbmRzLmZpcnN0KCh7IGNvbW1hbmRzIH0pID0+IFtcclxuICAgICAgICAgICAgKCkgPT4gY29tbWFuZHMuZGVsZXRlU2VsZWN0aW9uKCksXHJcbiAgICAgICAgICAgICgpID0+IGNvbW1hbmRzLmpvaW5Gb3J3YXJkKCksXHJcbiAgICAgICAgICAgICgpID0+IGNvbW1hbmRzLnNlbGVjdE5vZGVGb3J3YXJkKCksXHJcbiAgICAgICAgXSk7XHJcbiAgICAgICAgY29uc3QgaGFuZGxlRW50ZXIgPSAoKSA9PiB0aGlzLmVkaXRvci5jb21tYW5kcy5maXJzdCgoeyBjb21tYW5kcyB9KSA9PiBbXHJcbiAgICAgICAgICAgICgpID0+IGNvbW1hbmRzLm5ld2xpbmVJbkNvZGUoKSxcclxuICAgICAgICAgICAgKCkgPT4gY29tbWFuZHMuY3JlYXRlUGFyYWdyYXBoTmVhcigpLFxyXG4gICAgICAgICAgICAoKSA9PiBjb21tYW5kcy5saWZ0RW1wdHlCbG9jaygpLFxyXG4gICAgICAgICAgICAoKSA9PiBjb21tYW5kcy5zcGxpdEJsb2NrKCksXHJcbiAgICAgICAgXSk7XHJcbiAgICAgICAgY29uc3QgYmFzZUtleW1hcCA9IHtcclxuICAgICAgICAgICAgRW50ZXI6IGhhbmRsZUVudGVyLFxyXG4gICAgICAgICAgICAnTW9kLUVudGVyJzogKCkgPT4gdGhpcy5lZGl0b3IuY29tbWFuZHMuZXhpdENvZGUoKSxcclxuICAgICAgICAgICAgQmFja3NwYWNlOiBoYW5kbGVCYWNrc3BhY2UsXHJcbiAgICAgICAgICAgICdNb2QtQmFja3NwYWNlJzogaGFuZGxlQmFja3NwYWNlLFxyXG4gICAgICAgICAgICAnU2hpZnQtQmFja3NwYWNlJzogaGFuZGxlQmFja3NwYWNlLFxyXG4gICAgICAgICAgICBEZWxldGU6IGhhbmRsZURlbGV0ZSxcclxuICAgICAgICAgICAgJ01vZC1EZWxldGUnOiBoYW5kbGVEZWxldGUsXHJcbiAgICAgICAgICAgICdNb2QtYSc6ICgpID0+IHRoaXMuZWRpdG9yLmNvbW1hbmRzLnNlbGVjdEFsbCgpLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgY29uc3QgcGNLZXltYXAgPSB7XHJcbiAgICAgICAgICAgIC4uLmJhc2VLZXltYXAsXHJcbiAgICAgICAgfTtcclxuICAgICAgICBjb25zdCBtYWNLZXltYXAgPSB7XHJcbiAgICAgICAgICAgIC4uLmJhc2VLZXltYXAsXHJcbiAgICAgICAgICAgICdDdHJsLWgnOiBoYW5kbGVCYWNrc3BhY2UsXHJcbiAgICAgICAgICAgICdBbHQtQmFja3NwYWNlJzogaGFuZGxlQmFja3NwYWNlLFxyXG4gICAgICAgICAgICAnQ3RybC1kJzogaGFuZGxlRGVsZXRlLFxyXG4gICAgICAgICAgICAnQ3RybC1BbHQtQmFja3NwYWNlJzogaGFuZGxlRGVsZXRlLFxyXG4gICAgICAgICAgICAnQWx0LURlbGV0ZSc6IGhhbmRsZURlbGV0ZSxcclxuICAgICAgICAgICAgJ0FsdC1kJzogaGFuZGxlRGVsZXRlLFxyXG4gICAgICAgICAgICAnQ3RybC1hJzogKCkgPT4gdGhpcy5lZGl0b3IuY29tbWFuZHMuc2VsZWN0VGV4dGJsb2NrU3RhcnQoKSxcclxuICAgICAgICAgICAgJ0N0cmwtZSc6ICgpID0+IHRoaXMuZWRpdG9yLmNvbW1hbmRzLnNlbGVjdFRleHRibG9ja0VuZCgpLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgaWYgKGlzaU9TKCkgfHwgaXNNYWNPUygpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBtYWNLZXltYXA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBwY0tleW1hcDtcclxuICAgIH0sXHJcbiAgICBhZGRQcm9zZU1pcnJvclBsdWdpbnMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgLy8gV2l0aCB0aGlzIHBsdWdpbiB3ZSBjaGVjayBpZiB0aGUgd2hvbGUgZG9jdW1lbnQgd2FzIHNlbGVjdGVkIGFuZCBkZWxldGVkLlxyXG4gICAgICAgICAgICAvLyBJbiB0aGlzIGNhc2Ugd2Ugd2lsbCBhZGRpdGlvbmFsbHkgY2FsbCBgY2xlYXJOb2RlcygpYCB0byBjb252ZXJ0IGUuZy4gYSBoZWFkaW5nXHJcbiAgICAgICAgICAgIC8vIHRvIGEgcGFyYWdyYXBoIGlmIG5lY2Vzc2FyeS5cclxuICAgICAgICAgICAgLy8gVGhpcyBpcyBhbiBhbHRlcm5hdGl2ZSB0byBQcm9zZU1pcnJvcidzIGBBbGxTZWxlY3Rpb25gLCB3aGljaCBkb2VzbuKAmXQgd29yayB3ZWxsXHJcbiAgICAgICAgICAgIC8vIHdpdGggbWFueSBvdGhlciBjb21tYW5kcy5cclxuICAgICAgICAgICAgbmV3IFBsdWdpbih7XHJcbiAgICAgICAgICAgICAgICBrZXk6IG5ldyBQbHVnaW5LZXkoJ2NsZWFyRG9jdW1lbnQnKSxcclxuICAgICAgICAgICAgICAgIGFwcGVuZFRyYW5zYWN0aW9uOiAodHJhbnNhY3Rpb25zLCBvbGRTdGF0ZSwgbmV3U3RhdGUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBkb2NDaGFuZ2VzID0gdHJhbnNhY3Rpb25zLnNvbWUodHJhbnNhY3Rpb24gPT4gdHJhbnNhY3Rpb24uZG9jQ2hhbmdlZClcclxuICAgICAgICAgICAgICAgICAgICAgICAgJiYgIW9sZFN0YXRlLmRvYy5lcShuZXdTdGF0ZS5kb2MpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghZG9jQ2hhbmdlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgZW1wdHksIGZyb20sIHRvIH0gPSBvbGRTdGF0ZS5zZWxlY3Rpb247XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYWxsRnJvbSA9IFNlbGVjdGlvbi5hdFN0YXJ0KG9sZFN0YXRlLmRvYykuZnJvbTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBhbGxFbmQgPSBTZWxlY3Rpb24uYXRFbmQob2xkU3RhdGUuZG9jKS50bztcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBhbGxXYXNTZWxlY3RlZCA9IGZyb20gPT09IGFsbEZyb20gJiYgdG8gPT09IGFsbEVuZDtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpc0VtcHR5ID0gbmV3U3RhdGUuZG9jLnRleHRCZXR3ZWVuKDAsIG5ld1N0YXRlLmRvYy5jb250ZW50LnNpemUsICcgJywgJyAnKS5sZW5ndGggPT09IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVtcHR5IHx8ICFhbGxXYXNTZWxlY3RlZCB8fCAhaXNFbXB0eSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRyID0gbmV3U3RhdGUudHI7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RhdGUgPSBjcmVhdGVDaGFpbmFibGVTdGF0ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlOiBuZXdTdGF0ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNhY3Rpb246IHRyLFxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgY29tbWFuZHMgfSA9IG5ldyBDb21tYW5kTWFuYWdlcih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVkaXRvcjogdGhpcy5lZGl0b3IsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLFxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbW1hbmRzLmNsZWFyTm9kZXMoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRyLnN0ZXBzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cjtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgIF07XHJcbiAgICB9LFxyXG59KTtcblxuY29uc3QgVGFiaW5kZXggPSBFeHRlbnNpb24uY3JlYXRlKHtcclxuICAgIG5hbWU6ICd0YWJpbmRleCcsXHJcbiAgICBhZGRQcm9zZU1pcnJvclBsdWdpbnMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgbmV3IFBsdWdpbih7XHJcbiAgICAgICAgICAgICAgICBrZXk6IG5ldyBQbHVnaW5LZXkoJ3RhYmluZGV4JyksXHJcbiAgICAgICAgICAgICAgICBwcm9wczoge1xyXG4gICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHRoaXMuZWRpdG9yLmlzRWRpdGFibGUgPyB7IHRhYmluZGV4OiAnMCcgfSA6IHt9LFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgXTtcclxuICAgIH0sXHJcbn0pO1xuXG52YXIgZXh0ZW5zaW9ucyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbiAgX19wcm90b19fOiBudWxsLFxuICBDbGlwYm9hcmRUZXh0U2VyaWFsaXplcjogQ2xpcGJvYXJkVGV4dFNlcmlhbGl6ZXIsXG4gIENvbW1hbmRzOiBDb21tYW5kcyxcbiAgRWRpdGFibGU6IEVkaXRhYmxlLFxuICBGb2N1c0V2ZW50czogRm9jdXNFdmVudHMsXG4gIEtleW1hcDogS2V5bWFwLFxuICBUYWJpbmRleDogVGFiaW5kZXhcbn0pO1xuXG5mdW5jdGlvbiBnZXROb2RlQXR0cmlidXRlcyhzdGF0ZSwgdHlwZU9yTmFtZSkge1xyXG4gICAgY29uc3QgdHlwZSA9IGdldE5vZGVUeXBlKHR5cGVPck5hbWUsIHN0YXRlLnNjaGVtYSk7XHJcbiAgICBjb25zdCB7IGZyb20sIHRvIH0gPSBzdGF0ZS5zZWxlY3Rpb247XHJcbiAgICBjb25zdCBub2RlcyA9IFtdO1xyXG4gICAgc3RhdGUuZG9jLm5vZGVzQmV0d2Vlbihmcm9tLCB0bywgbm9kZSA9PiB7XHJcbiAgICAgICAgbm9kZXMucHVzaChub2RlKTtcclxuICAgIH0pO1xyXG4gICAgY29uc3Qgbm9kZSA9IG5vZGVzXHJcbiAgICAgICAgLnJldmVyc2UoKVxyXG4gICAgICAgIC5maW5kKG5vZGVJdGVtID0+IG5vZGVJdGVtLnR5cGUubmFtZSA9PT0gdHlwZS5uYW1lKTtcclxuICAgIGlmICghbm9kZSkge1xyXG4gICAgICAgIHJldHVybiB7fTtcclxuICAgIH1cclxuICAgIHJldHVybiB7IC4uLm5vZGUuYXR0cnMgfTtcclxufVxuXG5mdW5jdGlvbiBnZXRBdHRyaWJ1dGVzKHN0YXRlLCB0eXBlT3JOYW1lKSB7XHJcbiAgICBjb25zdCBzY2hlbWFUeXBlID0gZ2V0U2NoZW1hVHlwZU5hbWVCeU5hbWUodHlwZW9mIHR5cGVPck5hbWUgPT09ICdzdHJpbmcnXHJcbiAgICAgICAgPyB0eXBlT3JOYW1lXHJcbiAgICAgICAgOiB0eXBlT3JOYW1lLm5hbWUsIHN0YXRlLnNjaGVtYSk7XHJcbiAgICBpZiAoc2NoZW1hVHlwZSA9PT0gJ25vZGUnKSB7XHJcbiAgICAgICAgcmV0dXJuIGdldE5vZGVBdHRyaWJ1dGVzKHN0YXRlLCB0eXBlT3JOYW1lKTtcclxuICAgIH1cclxuICAgIGlmIChzY2hlbWFUeXBlID09PSAnbWFyaycpIHtcclxuICAgICAgICByZXR1cm4gZ2V0TWFya0F0dHJpYnV0ZXMoc3RhdGUsIHR5cGVPck5hbWUpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHt9O1xyXG59XG5cbmZ1bmN0aW9uIGdldEhUTUxGcm9tRnJhZ21lbnQoZnJhZ21lbnQsIHNjaGVtYSkge1xyXG4gICAgY29uc3QgZG9jdW1lbnRGcmFnbWVudCA9IERPTVNlcmlhbGl6ZXJcclxuICAgICAgICAuZnJvbVNjaGVtYShzY2hlbWEpXHJcbiAgICAgICAgLnNlcmlhbGl6ZUZyYWdtZW50KGZyYWdtZW50KTtcclxuICAgIGNvbnN0IHRlbXBvcmFyeURvY3VtZW50ID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCk7XHJcbiAgICBjb25zdCBjb250YWluZXIgPSB0ZW1wb3JhcnlEb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChkb2N1bWVudEZyYWdtZW50KTtcclxuICAgIHJldHVybiBjb250YWluZXIuaW5uZXJIVE1MO1xyXG59XG5cbmZ1bmN0aW9uIGdldFRleHQobm9kZSwgb3B0aW9ucykge1xyXG4gICAgY29uc3QgcmFuZ2UgPSB7XHJcbiAgICAgICAgZnJvbTogMCxcclxuICAgICAgICB0bzogbm9kZS5jb250ZW50LnNpemUsXHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIGdldFRleHRCZXR3ZWVuKG5vZGUsIHJhbmdlLCBvcHRpb25zKTtcclxufVxuXG5mdW5jdGlvbiBpc0FjdGl2ZShzdGF0ZSwgbmFtZSwgYXR0cmlidXRlcyA9IHt9KSB7XHJcbiAgICBpZiAoIW5hbWUpIHtcclxuICAgICAgICByZXR1cm4gaXNOb2RlQWN0aXZlKHN0YXRlLCBudWxsLCBhdHRyaWJ1dGVzKSB8fCBpc01hcmtBY3RpdmUoc3RhdGUsIG51bGwsIGF0dHJpYnV0ZXMpO1xyXG4gICAgfVxyXG4gICAgY29uc3Qgc2NoZW1hVHlwZSA9IGdldFNjaGVtYVR5cGVOYW1lQnlOYW1lKG5hbWUsIHN0YXRlLnNjaGVtYSk7XHJcbiAgICBpZiAoc2NoZW1hVHlwZSA9PT0gJ25vZGUnKSB7XHJcbiAgICAgICAgcmV0dXJuIGlzTm9kZUFjdGl2ZShzdGF0ZSwgbmFtZSwgYXR0cmlidXRlcyk7XHJcbiAgICB9XHJcbiAgICBpZiAoc2NoZW1hVHlwZSA9PT0gJ21hcmsnKSB7XHJcbiAgICAgICAgcmV0dXJuIGlzTWFya0FjdGl2ZShzdGF0ZSwgbmFtZSwgYXR0cmlidXRlcyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbn1cblxuZnVuY3Rpb24gaXNOb2RlRW1wdHkobm9kZSkge1xyXG4gICAgdmFyIF9hO1xyXG4gICAgY29uc3QgZGVmYXVsdENvbnRlbnQgPSAoX2EgPSBub2RlLnR5cGUuY3JlYXRlQW5kRmlsbCgpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudG9KU09OKCk7XHJcbiAgICBjb25zdCBjb250ZW50ID0gbm9kZS50b0pTT04oKTtcclxuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShkZWZhdWx0Q29udGVudCkgPT09IEpTT04uc3RyaW5naWZ5KGNvbnRlbnQpO1xyXG59XG5cbmNvbnN0IHN0eWxlID0gYC5Qcm9zZU1pcnJvciB7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbn1cblxuLlByb3NlTWlycm9yIHtcbiAgd29yZC13cmFwOiBicmVhay13b3JkO1xuICB3aGl0ZS1zcGFjZTogcHJlLXdyYXA7XG4gIHdoaXRlLXNwYWNlOiBicmVhay1zcGFjZXM7XG4gIC13ZWJraXQtZm9udC12YXJpYW50LWxpZ2F0dXJlczogbm9uZTtcbiAgZm9udC12YXJpYW50LWxpZ2F0dXJlczogbm9uZTtcbiAgZm9udC1mZWF0dXJlLXNldHRpbmdzOiBcImxpZ2FcIiAwOyAvKiB0aGUgYWJvdmUgZG9lc24ndCBzZWVtIHRvIHdvcmsgaW4gRWRnZSAqL1xufVxuXG4uUHJvc2VNaXJyb3IgW2NvbnRlbnRlZGl0YWJsZT1cImZhbHNlXCJdIHtcbiAgd2hpdGUtc3BhY2U6IG5vcm1hbDtcbn1cblxuLlByb3NlTWlycm9yIFtjb250ZW50ZWRpdGFibGU9XCJmYWxzZVwiXSBbY29udGVudGVkaXRhYmxlPVwidHJ1ZVwiXSB7XG4gIHdoaXRlLXNwYWNlOiBwcmUtd3JhcDtcbn1cblxuLlByb3NlTWlycm9yIHByZSB7XG4gIHdoaXRlLXNwYWNlOiBwcmUtd3JhcDtcbn1cblxuaW1nLlByb3NlTWlycm9yLXNlcGFyYXRvciB7XG4gIGRpc3BsYXk6IGlubGluZSAhaW1wb3J0YW50O1xuICBib3JkZXI6IG5vbmUgIWltcG9ydGFudDtcbiAgbWFyZ2luOiAwICFpbXBvcnRhbnQ7XG4gIHdpZHRoOiAxcHggIWltcG9ydGFudDtcbiAgaGVpZ2h0OiAxcHggIWltcG9ydGFudDtcbn1cblxuLlByb3NlTWlycm9yLWdhcGN1cnNvciB7XG4gIGRpc3BsYXk6IG5vbmU7XG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIG1hcmdpbjogMDtcbn1cblxuLlByb3NlTWlycm9yLWdhcGN1cnNvcjphZnRlciB7XG4gIGNvbnRlbnQ6IFwiXCI7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogLTJweDtcbiAgd2lkdGg6IDIwcHg7XG4gIGJvcmRlci10b3A6IDFweCBzb2xpZCBibGFjaztcbiAgYW5pbWF0aW9uOiBQcm9zZU1pcnJvci1jdXJzb3ItYmxpbmsgMS4xcyBzdGVwcygyLCBzdGFydCkgaW5maW5pdGU7XG59XG5cbkBrZXlmcmFtZXMgUHJvc2VNaXJyb3ItY3Vyc29yLWJsaW5rIHtcbiAgdG8ge1xuICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcbiAgfVxufVxuXG4uUHJvc2VNaXJyb3ItaGlkZXNlbGVjdGlvbiAqOjpzZWxlY3Rpb24ge1xuICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcbn1cblxuLlByb3NlTWlycm9yLWhpZGVzZWxlY3Rpb24gKjo6LW1vei1zZWxlY3Rpb24ge1xuICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcbn1cblxuLlByb3NlTWlycm9yLWhpZGVzZWxlY3Rpb24gKiB7XG4gIGNhcmV0LWNvbG9yOiB0cmFuc3BhcmVudDtcbn1cblxuLlByb3NlTWlycm9yLWZvY3VzZWQgLlByb3NlTWlycm9yLWdhcGN1cnNvciB7XG4gIGRpc3BsYXk6IGJsb2NrO1xufVxuXG4udGlwcHktYm94W2RhdGEtYW5pbWF0aW9uPWZhZGVdW2RhdGEtc3RhdGU9aGlkZGVuXSB7XG4gIG9wYWNpdHk6IDBcbn1gO1xuXG5mdW5jdGlvbiBjcmVhdGVTdHlsZVRhZyhzdHlsZSwgbm9uY2UpIHtcclxuICAgIGNvbnN0IHRpcFRhcFN0eWxlVGFnID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcignc3R5bGVbZGF0YS10aXB0YXAtc3R5bGVdJyk7XHJcbiAgICBpZiAodGlwVGFwU3R5bGVUYWcgIT09IG51bGwpIHtcclxuICAgICAgICByZXR1cm4gdGlwVGFwU3R5bGVUYWc7XHJcbiAgICB9XHJcbiAgICBjb25zdCBzdHlsZU5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xyXG4gICAgaWYgKG5vbmNlKSB7XHJcbiAgICAgICAgc3R5bGVOb2RlLnNldEF0dHJpYnV0ZSgnbm9uY2UnLCBub25jZSk7XHJcbiAgICB9XHJcbiAgICBzdHlsZU5vZGUuc2V0QXR0cmlidXRlKCdkYXRhLXRpcHRhcC1zdHlsZScsICcnKTtcclxuICAgIHN0eWxlTm9kZS5pbm5lckhUTUwgPSBzdHlsZTtcclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF0uYXBwZW5kQ2hpbGQoc3R5bGVOb2RlKTtcclxuICAgIHJldHVybiBzdHlsZU5vZGU7XHJcbn1cblxuY2xhc3MgRWRpdG9yIGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcclxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgdGhpcy5pc0ZvY3VzZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmV4dGVuc2lvblN0b3JhZ2UgPSB7fTtcclxuICAgICAgICB0aGlzLm9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgIGVsZW1lbnQ6IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLFxyXG4gICAgICAgICAgICBjb250ZW50OiAnJyxcclxuICAgICAgICAgICAgaW5qZWN0Q1NTOiB0cnVlLFxyXG4gICAgICAgICAgICBpbmplY3ROb25jZTogdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICBleHRlbnNpb25zOiBbXSxcclxuICAgICAgICAgICAgYXV0b2ZvY3VzOiBmYWxzZSxcclxuICAgICAgICAgICAgZWRpdGFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGVkaXRvclByb3BzOiB7fSxcclxuICAgICAgICAgICAgcGFyc2VPcHRpb25zOiB7fSxcclxuICAgICAgICAgICAgZW5hYmxlSW5wdXRSdWxlczogdHJ1ZSxcclxuICAgICAgICAgICAgZW5hYmxlUGFzdGVSdWxlczogdHJ1ZSxcclxuICAgICAgICAgICAgZW5hYmxlQ29yZUV4dGVuc2lvbnM6IHRydWUsXHJcbiAgICAgICAgICAgIG9uQmVmb3JlQ3JlYXRlOiAoKSA9PiBudWxsLFxyXG4gICAgICAgICAgICBvbkNyZWF0ZTogKCkgPT4gbnVsbCxcclxuICAgICAgICAgICAgb25VcGRhdGU6ICgpID0+IG51bGwsXHJcbiAgICAgICAgICAgIG9uU2VsZWN0aW9uVXBkYXRlOiAoKSA9PiBudWxsLFxyXG4gICAgICAgICAgICBvblRyYW5zYWN0aW9uOiAoKSA9PiBudWxsLFxyXG4gICAgICAgICAgICBvbkZvY3VzOiAoKSA9PiBudWxsLFxyXG4gICAgICAgICAgICBvbkJsdXI6ICgpID0+IG51bGwsXHJcbiAgICAgICAgICAgIG9uRGVzdHJveTogKCkgPT4gbnVsbCxcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuaXNDYXB0dXJpbmdUcmFuc2FjdGlvbiA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuY2FwdHVyZWRUcmFuc2FjdGlvbiA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5zZXRPcHRpb25zKG9wdGlvbnMpO1xyXG4gICAgICAgIHRoaXMuY3JlYXRlRXh0ZW5zaW9uTWFuYWdlcigpO1xyXG4gICAgICAgIHRoaXMuY3JlYXRlQ29tbWFuZE1hbmFnZXIoKTtcclxuICAgICAgICB0aGlzLmNyZWF0ZVNjaGVtYSgpO1xyXG4gICAgICAgIHRoaXMub24oJ2JlZm9yZUNyZWF0ZScsIHRoaXMub3B0aW9ucy5vbkJlZm9yZUNyZWF0ZSk7XHJcbiAgICAgICAgdGhpcy5lbWl0KCdiZWZvcmVDcmVhdGUnLCB7IGVkaXRvcjogdGhpcyB9KTtcclxuICAgICAgICB0aGlzLmNyZWF0ZVZpZXcoKTtcclxuICAgICAgICB0aGlzLmluamVjdENTUygpO1xyXG4gICAgICAgIHRoaXMub24oJ2NyZWF0ZScsIHRoaXMub3B0aW9ucy5vbkNyZWF0ZSk7XHJcbiAgICAgICAgdGhpcy5vbigndXBkYXRlJywgdGhpcy5vcHRpb25zLm9uVXBkYXRlKTtcclxuICAgICAgICB0aGlzLm9uKCdzZWxlY3Rpb25VcGRhdGUnLCB0aGlzLm9wdGlvbnMub25TZWxlY3Rpb25VcGRhdGUpO1xyXG4gICAgICAgIHRoaXMub24oJ3RyYW5zYWN0aW9uJywgdGhpcy5vcHRpb25zLm9uVHJhbnNhY3Rpb24pO1xyXG4gICAgICAgIHRoaXMub24oJ2ZvY3VzJywgdGhpcy5vcHRpb25zLm9uRm9jdXMpO1xyXG4gICAgICAgIHRoaXMub24oJ2JsdXInLCB0aGlzLm9wdGlvbnMub25CbHVyKTtcclxuICAgICAgICB0aGlzLm9uKCdkZXN0cm95JywgdGhpcy5vcHRpb25zLm9uRGVzdHJveSk7XHJcbiAgICAgICAgd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5pc0Rlc3Ryb3llZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuY29tbWFuZHMuZm9jdXModGhpcy5vcHRpb25zLmF1dG9mb2N1cyk7XHJcbiAgICAgICAgICAgIHRoaXMuZW1pdCgnY3JlYXRlJywgeyBlZGl0b3I6IHRoaXMgfSk7XHJcbiAgICAgICAgfSwgMCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhlIGVkaXRvciBzdG9yYWdlLlxyXG4gICAgICovXHJcbiAgICBnZXQgc3RvcmFnZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5leHRlbnNpb25TdG9yYWdlO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBBbiBvYmplY3Qgb2YgYWxsIHJlZ2lzdGVyZWQgY29tbWFuZHMuXHJcbiAgICAgKi9cclxuICAgIGdldCBjb21tYW5kcygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jb21tYW5kTWFuYWdlci5jb21tYW5kcztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlIGEgY29tbWFuZCBjaGFpbiB0byBjYWxsIG11bHRpcGxlIGNvbW1hbmRzIGF0IG9uY2UuXHJcbiAgICAgKi9cclxuICAgIGNoYWluKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbW1hbmRNYW5hZ2VyLmNoYWluKCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENoZWNrIGlmIGEgY29tbWFuZCBvciBhIGNvbW1hbmQgY2hhaW4gY2FuIGJlIGV4ZWN1dGVkLiBXaXRob3V0IGV4ZWN1dGluZyBpdC5cclxuICAgICAqL1xyXG4gICAgY2FuKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbW1hbmRNYW5hZ2VyLmNhbigpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBJbmplY3QgQ1NTIHN0eWxlcy5cclxuICAgICAqL1xyXG4gICAgaW5qZWN0Q1NTKCkge1xyXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuaW5qZWN0Q1NTICYmIGRvY3VtZW50KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3NzID0gY3JlYXRlU3R5bGVUYWcoc3R5bGUsIHRoaXMub3B0aW9ucy5pbmplY3ROb25jZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBVcGRhdGUgZWRpdG9yIG9wdGlvbnMuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIG9wdGlvbnMgQSBsaXN0IG9mIG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgc2V0T3B0aW9ucyhvcHRpb25zID0ge30pIHtcclxuICAgICAgICB0aGlzLm9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgIC4uLnRoaXMub3B0aW9ucyxcclxuICAgICAgICAgICAgLi4ub3B0aW9ucyxcclxuICAgICAgICB9O1xyXG4gICAgICAgIGlmICghdGhpcy52aWV3IHx8ICF0aGlzLnN0YXRlIHx8IHRoaXMuaXNEZXN0cm95ZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmVkaXRvclByb3BzKSB7XHJcbiAgICAgICAgICAgIHRoaXMudmlldy5zZXRQcm9wcyh0aGlzLm9wdGlvbnMuZWRpdG9yUHJvcHMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnZpZXcudXBkYXRlU3RhdGUodGhpcy5zdGF0ZSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFVwZGF0ZSBlZGl0YWJsZSBzdGF0ZSBvZiB0aGUgZWRpdG9yLlxyXG4gICAgICovXHJcbiAgICBzZXRFZGl0YWJsZShlZGl0YWJsZSkge1xyXG4gICAgICAgIHRoaXMuc2V0T3B0aW9ucyh7IGVkaXRhYmxlIH0pO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHdoZXRoZXIgdGhlIGVkaXRvciBpcyBlZGl0YWJsZS5cclxuICAgICAqL1xyXG4gICAgZ2V0IGlzRWRpdGFibGUoKSB7XHJcbiAgICAgICAgLy8gc2luY2UgcGx1Z2lucyBhcmUgYXBwbGllZCBhZnRlciBjcmVhdGluZyB0aGUgdmlld1xyXG4gICAgICAgIC8vIGBlZGl0YWJsZWAgaXMgYWx3YXlzIGB0cnVlYCBmb3Igb25lIHRpY2suXHJcbiAgICAgICAgLy8gdGhhdOKAmXMgd2h5IHdlIGFsc28gaGF2ZSB0byBjaGVjayBmb3IgYG9wdGlvbnMuZWRpdGFibGVgXHJcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5lZGl0YWJsZVxyXG4gICAgICAgICAgICAmJiB0aGlzLnZpZXdcclxuICAgICAgICAgICAgJiYgdGhpcy52aWV3LmVkaXRhYmxlO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSBlZGl0b3Igc3RhdGUuXHJcbiAgICAgKi9cclxuICAgIGdldCBzdGF0ZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy52aWV3LnN0YXRlO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWdpc3RlciBhIFByb3NlTWlycm9yIHBsdWdpbi5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gcGx1Z2luIEEgUHJvc2VNaXJyb3IgcGx1Z2luXHJcbiAgICAgKiBAcGFyYW0gaGFuZGxlUGx1Z2lucyBDb250cm9sIGhvdyB0byBtZXJnZSB0aGUgcGx1Z2luIGludG8gdGhlIGV4aXN0aW5nIHBsdWdpbnMuXHJcbiAgICAgKi9cclxuICAgIHJlZ2lzdGVyUGx1Z2luKHBsdWdpbiwgaGFuZGxlUGx1Z2lucykge1xyXG4gICAgICAgIGNvbnN0IHBsdWdpbnMgPSBpc0Z1bmN0aW9uKGhhbmRsZVBsdWdpbnMpXHJcbiAgICAgICAgICAgID8gaGFuZGxlUGx1Z2lucyhwbHVnaW4sIFsuLi50aGlzLnN0YXRlLnBsdWdpbnNdKVxyXG4gICAgICAgICAgICA6IFsuLi50aGlzLnN0YXRlLnBsdWdpbnMsIHBsdWdpbl07XHJcbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnN0YXRlLnJlY29uZmlndXJlKHsgcGx1Z2lucyB9KTtcclxuICAgICAgICB0aGlzLnZpZXcudXBkYXRlU3RhdGUoc3RhdGUpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBVbnJlZ2lzdGVyIGEgUHJvc2VNaXJyb3IgcGx1Z2luLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBuYW1lT3JQbHVnaW5LZXkgVGhlIHBsdWdpbnMgbmFtZVxyXG4gICAgICovXHJcbiAgICB1bnJlZ2lzdGVyUGx1Z2luKG5hbWVPclBsdWdpbktleSkge1xyXG4gICAgICAgIGlmICh0aGlzLmlzRGVzdHJveWVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgbmFtZSA9IHR5cGVvZiBuYW1lT3JQbHVnaW5LZXkgPT09ICdzdHJpbmcnXHJcbiAgICAgICAgICAgID8gYCR7bmFtZU9yUGx1Z2luS2V5fSRgXHJcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgOiBuYW1lT3JQbHVnaW5LZXkua2V5O1xyXG4gICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5zdGF0ZS5yZWNvbmZpZ3VyZSh7XHJcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgcGx1Z2luczogdGhpcy5zdGF0ZS5wbHVnaW5zLmZpbHRlcihwbHVnaW4gPT4gIXBsdWdpbi5rZXkuc3RhcnRzV2l0aChuYW1lKSksXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy52aWV3LnVwZGF0ZVN0YXRlKHN0YXRlKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhbiBleHRlbnNpb24gbWFuYWdlci5cclxuICAgICAqL1xyXG4gICAgY3JlYXRlRXh0ZW5zaW9uTWFuYWdlcigpIHtcclxuICAgICAgICBjb25zdCBjb3JlRXh0ZW5zaW9ucyA9IHRoaXMub3B0aW9ucy5lbmFibGVDb3JlRXh0ZW5zaW9uc1xyXG4gICAgICAgICAgICA/IE9iamVjdC52YWx1ZXMoZXh0ZW5zaW9ucylcclxuICAgICAgICAgICAgOiBbXTtcclxuICAgICAgICBjb25zdCBhbGxFeHRlbnNpb25zID0gWy4uLmNvcmVFeHRlbnNpb25zLCAuLi50aGlzLm9wdGlvbnMuZXh0ZW5zaW9uc10uZmlsdGVyKGV4dGVuc2lvbiA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBbJ2V4dGVuc2lvbicsICdub2RlJywgJ21hcmsnXS5pbmNsdWRlcyhleHRlbnNpb24gPT09IG51bGwgfHwgZXh0ZW5zaW9uID09PSB2b2lkIDAgPyB2b2lkIDAgOiBleHRlbnNpb24udHlwZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5leHRlbnNpb25NYW5hZ2VyID0gbmV3IEV4dGVuc2lvbk1hbmFnZXIoYWxsRXh0ZW5zaW9ucywgdGhpcyk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYW4gY29tbWFuZCBtYW5hZ2VyLlxyXG4gICAgICovXHJcbiAgICBjcmVhdGVDb21tYW5kTWFuYWdlcigpIHtcclxuICAgICAgICB0aGlzLmNvbW1hbmRNYW5hZ2VyID0gbmV3IENvbW1hbmRNYW5hZ2VyKHtcclxuICAgICAgICAgICAgZWRpdG9yOiB0aGlzLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgUHJvc2VNaXJyb3Igc2NoZW1hLlxyXG4gICAgICovXHJcbiAgICBjcmVhdGVTY2hlbWEoKSB7XHJcbiAgICAgICAgdGhpcy5zY2hlbWEgPSB0aGlzLmV4dGVuc2lvbk1hbmFnZXIuc2NoZW1hO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgUHJvc2VNaXJyb3Igdmlldy5cclxuICAgICAqL1xyXG4gICAgY3JlYXRlVmlldygpIHtcclxuICAgICAgICBjb25zdCBkb2MgPSBjcmVhdGVEb2N1bWVudCh0aGlzLm9wdGlvbnMuY29udGVudCwgdGhpcy5zY2hlbWEsIHRoaXMub3B0aW9ucy5wYXJzZU9wdGlvbnMpO1xyXG4gICAgICAgIGNvbnN0IHNlbGVjdGlvbiA9IHJlc29sdmVGb2N1c1Bvc2l0aW9uKGRvYywgdGhpcy5vcHRpb25zLmF1dG9mb2N1cyk7XHJcbiAgICAgICAgdGhpcy52aWV3ID0gbmV3IEVkaXRvclZpZXcodGhpcy5vcHRpb25zLmVsZW1lbnQsIHtcclxuICAgICAgICAgICAgLi4udGhpcy5vcHRpb25zLmVkaXRvclByb3BzLFxyXG4gICAgICAgICAgICBkaXNwYXRjaFRyYW5zYWN0aW9uOiB0aGlzLmRpc3BhdGNoVHJhbnNhY3Rpb24uYmluZCh0aGlzKSxcclxuICAgICAgICAgICAgc3RhdGU6IEVkaXRvclN0YXRlLmNyZWF0ZSh7XHJcbiAgICAgICAgICAgICAgICBkb2MsXHJcbiAgICAgICAgICAgICAgICBzZWxlY3Rpb246IHNlbGVjdGlvbiB8fCB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8vIGBlZGl0b3Iudmlld2AgaXMgbm90IHlldCBhdmFpbGFibGUgYXQgdGhpcyB0aW1lLlxyXG4gICAgICAgIC8vIFRoZXJlZm9yZSB3ZSB3aWxsIGFkZCBhbGwgcGx1Z2lucyBhbmQgbm9kZSB2aWV3cyBkaXJlY3RseSBhZnRlcndhcmRzLlxyXG4gICAgICAgIGNvbnN0IG5ld1N0YXRlID0gdGhpcy5zdGF0ZS5yZWNvbmZpZ3VyZSh7XHJcbiAgICAgICAgICAgIHBsdWdpbnM6IHRoaXMuZXh0ZW5zaW9uTWFuYWdlci5wbHVnaW5zLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMudmlldy51cGRhdGVTdGF0ZShuZXdTdGF0ZSk7XHJcbiAgICAgICAgdGhpcy5jcmVhdGVOb2RlVmlld3MoKTtcclxuICAgICAgICAvLyBMZXTigJlzIHN0b3JlIHRoZSBlZGl0b3IgaW5zdGFuY2UgaW4gdGhlIERPTSBlbGVtZW50LlxyXG4gICAgICAgIC8vIFNvIHdl4oCZbGwgaGF2ZSBhY2Nlc3MgdG8gaXQgZm9yIHRlc3RzLlxyXG4gICAgICAgIGNvbnN0IGRvbSA9IHRoaXMudmlldy5kb207XHJcbiAgICAgICAgZG9tLmVkaXRvciA9IHRoaXM7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYWxsIG5vZGUgdmlld3MuXHJcbiAgICAgKi9cclxuICAgIGNyZWF0ZU5vZGVWaWV3cygpIHtcclxuICAgICAgICB0aGlzLnZpZXcuc2V0UHJvcHMoe1xyXG4gICAgICAgICAgICBub2RlVmlld3M6IHRoaXMuZXh0ZW5zaW9uTWFuYWdlci5ub2RlVmlld3MsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBjYXB0dXJlVHJhbnNhY3Rpb24oZm4pIHtcclxuICAgICAgICB0aGlzLmlzQ2FwdHVyaW5nVHJhbnNhY3Rpb24gPSB0cnVlO1xyXG4gICAgICAgIGZuKCk7XHJcbiAgICAgICAgdGhpcy5pc0NhcHR1cmluZ1RyYW5zYWN0aW9uID0gZmFsc2U7XHJcbiAgICAgICAgY29uc3QgdHIgPSB0aGlzLmNhcHR1cmVkVHJhbnNhY3Rpb247XHJcbiAgICAgICAgdGhpcy5jYXB0dXJlZFRyYW5zYWN0aW9uID0gbnVsbDtcclxuICAgICAgICByZXR1cm4gdHI7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFRoZSBjYWxsYmFjayBvdmVyIHdoaWNoIHRvIHNlbmQgdHJhbnNhY3Rpb25zIChzdGF0ZSB1cGRhdGVzKSBwcm9kdWNlZCBieSB0aGUgdmlldy5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gdHJhbnNhY3Rpb24gQW4gZWRpdG9yIHN0YXRlIHRyYW5zYWN0aW9uXHJcbiAgICAgKi9cclxuICAgIGRpc3BhdGNoVHJhbnNhY3Rpb24odHJhbnNhY3Rpb24pIHtcclxuICAgICAgICBpZiAodGhpcy5pc0NhcHR1cmluZ1RyYW5zYWN0aW9uKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5jYXB0dXJlZFRyYW5zYWN0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhcHR1cmVkVHJhbnNhY3Rpb24gPSB0cmFuc2FjdGlvbjtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0cmFuc2FjdGlvbi5zdGVwcy5mb3JFYWNoKHN0ZXAgPT4geyB2YXIgX2E7IHJldHVybiAoX2EgPSB0aGlzLmNhcHR1cmVkVHJhbnNhY3Rpb24pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zdGVwKHN0ZXApOyB9KTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMuc3RhdGUuYXBwbHkodHJhbnNhY3Rpb24pO1xyXG4gICAgICAgIGNvbnN0IHNlbGVjdGlvbkhhc0NoYW5nZWQgPSAhdGhpcy5zdGF0ZS5zZWxlY3Rpb24uZXEoc3RhdGUuc2VsZWN0aW9uKTtcclxuICAgICAgICB0aGlzLnZpZXcudXBkYXRlU3RhdGUoc3RhdGUpO1xyXG4gICAgICAgIHRoaXMuZW1pdCgndHJhbnNhY3Rpb24nLCB7XHJcbiAgICAgICAgICAgIGVkaXRvcjogdGhpcyxcclxuICAgICAgICAgICAgdHJhbnNhY3Rpb24sXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKHNlbGVjdGlvbkhhc0NoYW5nZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5lbWl0KCdzZWxlY3Rpb25VcGRhdGUnLCB7XHJcbiAgICAgICAgICAgICAgICBlZGl0b3I6IHRoaXMsXHJcbiAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbixcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGZvY3VzID0gdHJhbnNhY3Rpb24uZ2V0TWV0YSgnZm9jdXMnKTtcclxuICAgICAgICBjb25zdCBibHVyID0gdHJhbnNhY3Rpb24uZ2V0TWV0YSgnYmx1cicpO1xyXG4gICAgICAgIGlmIChmb2N1cykge1xyXG4gICAgICAgICAgICB0aGlzLmVtaXQoJ2ZvY3VzJywge1xyXG4gICAgICAgICAgICAgICAgZWRpdG9yOiB0aGlzLFxyXG4gICAgICAgICAgICAgICAgZXZlbnQ6IGZvY3VzLmV2ZW50LFxyXG4gICAgICAgICAgICAgICAgdHJhbnNhY3Rpb24sXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYmx1cikge1xyXG4gICAgICAgICAgICB0aGlzLmVtaXQoJ2JsdXInLCB7XHJcbiAgICAgICAgICAgICAgICBlZGl0b3I6IHRoaXMsXHJcbiAgICAgICAgICAgICAgICBldmVudDogYmx1ci5ldmVudCxcclxuICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCF0cmFuc2FjdGlvbi5kb2NDaGFuZ2VkIHx8IHRyYW5zYWN0aW9uLmdldE1ldGEoJ3ByZXZlbnRVcGRhdGUnKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZW1pdCgndXBkYXRlJywge1xyXG4gICAgICAgICAgICBlZGl0b3I6IHRoaXMsXHJcbiAgICAgICAgICAgIHRyYW5zYWN0aW9uLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgYXR0cmlidXRlcyBvZiB0aGUgY3VycmVudGx5IHNlbGVjdGVkIG5vZGUgb3IgbWFyay5cclxuICAgICAqL1xyXG4gICAgZ2V0QXR0cmlidXRlcyhuYW1lT3JUeXBlKSB7XHJcbiAgICAgICAgcmV0dXJuIGdldEF0dHJpYnV0ZXModGhpcy5zdGF0ZSwgbmFtZU9yVHlwZSk7XHJcbiAgICB9XHJcbiAgICBpc0FjdGl2ZShuYW1lT3JBdHRyaWJ1dGVzLCBhdHRyaWJ1dGVzT3JVbmRlZmluZWQpIHtcclxuICAgICAgICBjb25zdCBuYW1lID0gdHlwZW9mIG5hbWVPckF0dHJpYnV0ZXMgPT09ICdzdHJpbmcnXHJcbiAgICAgICAgICAgID8gbmFtZU9yQXR0cmlidXRlc1xyXG4gICAgICAgICAgICA6IG51bGw7XHJcbiAgICAgICAgY29uc3QgYXR0cmlidXRlcyA9IHR5cGVvZiBuYW1lT3JBdHRyaWJ1dGVzID09PSAnc3RyaW5nJ1xyXG4gICAgICAgICAgICA/IGF0dHJpYnV0ZXNPclVuZGVmaW5lZFxyXG4gICAgICAgICAgICA6IG5hbWVPckF0dHJpYnV0ZXM7XHJcbiAgICAgICAgcmV0dXJuIGlzQWN0aXZlKHRoaXMuc3RhdGUsIG5hbWUsIGF0dHJpYnV0ZXMpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgdGhlIGRvY3VtZW50IGFzIEpTT04uXHJcbiAgICAgKi9cclxuICAgIGdldEpTT04oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGUuZG9jLnRvSlNPTigpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgdGhlIGRvY3VtZW50IGFzIEhUTUwuXHJcbiAgICAgKi9cclxuICAgIGdldEhUTUwoKSB7XHJcbiAgICAgICAgcmV0dXJuIGdldEhUTUxGcm9tRnJhZ21lbnQodGhpcy5zdGF0ZS5kb2MuY29udGVudCwgdGhpcy5zY2hlbWEpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgdGhlIGRvY3VtZW50IGFzIHRleHQuXHJcbiAgICAgKi9cclxuICAgIGdldFRleHQob3B0aW9ucykge1xyXG4gICAgICAgIGNvbnN0IHsgYmxvY2tTZXBhcmF0b3IgPSAnXFxuXFxuJywgdGV4dFNlcmlhbGl6ZXJzID0ge30sIH0gPSBvcHRpb25zIHx8IHt9O1xyXG4gICAgICAgIHJldHVybiBnZXRUZXh0KHRoaXMuc3RhdGUuZG9jLCB7XHJcbiAgICAgICAgICAgIGJsb2NrU2VwYXJhdG9yLFxyXG4gICAgICAgICAgICB0ZXh0U2VyaWFsaXplcnM6IHtcclxuICAgICAgICAgICAgICAgIC4uLnRleHRTZXJpYWxpemVycyxcclxuICAgICAgICAgICAgICAgIC4uLmdldFRleHRTZXJpYWxpemVyc0Zyb21TY2hlbWEodGhpcy5zY2hlbWEpLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDaGVjayBpZiB0aGVyZSBpcyBubyBjb250ZW50LlxyXG4gICAgICovXHJcbiAgICBnZXQgaXNFbXB0eSgpIHtcclxuICAgICAgICByZXR1cm4gaXNOb2RlRW1wdHkodGhpcy5zdGF0ZS5kb2MpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgdGhlIG51bWJlciBvZiBjaGFyYWN0ZXJzIGZvciB0aGUgY3VycmVudCBkb2N1bWVudC5cclxuICAgICAqXHJcbiAgICAgKiBAZGVwcmVjYXRlZFxyXG4gICAgICovXHJcbiAgICBnZXRDaGFyYWN0ZXJDb3VudCgpIHtcclxuICAgICAgICBjb25zb2xlLndhcm4oJ1t0aXB0YXAgd2Fybl06IFwiZWRpdG9yLmdldENoYXJhY3RlckNvdW50KClcIiBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIFwiZWRpdG9yLnN0b3JhZ2UuY2hhcmFjdGVyQ291bnQuY2hhcmFjdGVycygpXCIgaW5zdGVhZC4nKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZS5kb2MuY29udGVudC5zaXplIC0gMjtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogRGVzdHJveSB0aGUgZWRpdG9yLlxyXG4gICAgICovXHJcbiAgICBkZXN0cm95KCkge1xyXG4gICAgICAgIHRoaXMuZW1pdCgnZGVzdHJveScpO1xyXG4gICAgICAgIGlmICh0aGlzLnZpZXcpIHtcclxuICAgICAgICAgICAgdGhpcy52aWV3LmRlc3Ryb3koKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ2hlY2sgaWYgdGhlIGVkaXRvciBpcyBhbHJlYWR5IGRlc3Ryb3llZC5cclxuICAgICAqL1xyXG4gICAgZ2V0IGlzRGVzdHJveWVkKCkge1xyXG4gICAgICAgIHZhciBfYTtcclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgcmV0dXJuICEoKF9hID0gdGhpcy52aWV3KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZG9jVmlldyk7XHJcbiAgICB9XHJcbn1cblxuLyoqXHJcbiAqIFJldHVybnMgYSBuZXcgYFRyYW5zZm9ybWAgYmFzZWQgb24gYWxsIHN0ZXBzIG9mIHRoZSBwYXNzZWQgdHJhbnNhY3Rpb25zLlxyXG4gKi9cclxuZnVuY3Rpb24gY29tYmluZVRyYW5zYWN0aW9uU3RlcHMob2xkRG9jLCB0cmFuc2FjdGlvbnMpIHtcclxuICAgIGNvbnN0IHRyYW5zZm9ybSA9IG5ldyBUcmFuc2Zvcm0ob2xkRG9jKTtcclxuICAgIHRyYW5zYWN0aW9ucy5mb3JFYWNoKHRyYW5zYWN0aW9uID0+IHtcclxuICAgICAgICB0cmFuc2FjdGlvbi5zdGVwcy5mb3JFYWNoKHN0ZXAgPT4ge1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm0uc3RlcChzdGVwKTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHRyYW5zZm9ybTtcclxufVxuXG5mdW5jdGlvbiBkZWZhdWx0QmxvY2tBdChtYXRjaCkge1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtYXRjaC5lZGdlQ291bnQ7IGkgKz0gMSkge1xyXG4gICAgICAgIGNvbnN0IHsgdHlwZSB9ID0gbWF0Y2guZWRnZShpKTtcclxuICAgICAgICBpZiAodHlwZS5pc1RleHRibG9jayAmJiAhdHlwZS5oYXNSZXF1aXJlZEF0dHJzKCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHR5cGU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbn1cblxuZnVuY3Rpb24gZmluZENoaWxkcmVuKG5vZGUsIHByZWRpY2F0ZSkge1xyXG4gICAgY29uc3Qgbm9kZXNXaXRoUG9zID0gW107XHJcbiAgICBub2RlLmRlc2NlbmRhbnRzKChjaGlsZCwgcG9zKSA9PiB7XHJcbiAgICAgICAgaWYgKHByZWRpY2F0ZShjaGlsZCkpIHtcclxuICAgICAgICAgICAgbm9kZXNXaXRoUG9zLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgbm9kZTogY2hpbGQsXHJcbiAgICAgICAgICAgICAgICBwb3MsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIG5vZGVzV2l0aFBvcztcclxufVxuXG4vKipcclxuICogU2FtZSBhcyBgZmluZENoaWxkcmVuYCBidXQgc2VhcmNoZXMgb25seSB3aXRoaW4gYSBgcmFuZ2VgLlxyXG4gKi9cclxuZnVuY3Rpb24gZmluZENoaWxkcmVuSW5SYW5nZShub2RlLCByYW5nZSwgcHJlZGljYXRlKSB7XHJcbiAgICBjb25zdCBub2Rlc1dpdGhQb3MgPSBbXTtcclxuICAgIC8vIGlmIChyYW5nZS5mcm9tID09PSByYW5nZS50bykge1xyXG4gICAgLy8gICBjb25zdCBub2RlQXQgPSBub2RlLm5vZGVBdChyYW5nZS5mcm9tKVxyXG4gICAgLy8gICBpZiAobm9kZUF0KSB7XHJcbiAgICAvLyAgICAgbm9kZXNXaXRoUG9zLnB1c2goe1xyXG4gICAgLy8gICAgICAgbm9kZTogbm9kZUF0LFxyXG4gICAgLy8gICAgICAgcG9zOiByYW5nZS5mcm9tLFxyXG4gICAgLy8gICAgIH0pXHJcbiAgICAvLyAgIH1cclxuICAgIC8vIH1cclxuICAgIG5vZGUubm9kZXNCZXR3ZWVuKHJhbmdlLmZyb20sIHJhbmdlLnRvLCAoY2hpbGQsIHBvcykgPT4ge1xyXG4gICAgICAgIGlmIChwcmVkaWNhdGUoY2hpbGQpKSB7XHJcbiAgICAgICAgICAgIG5vZGVzV2l0aFBvcy5wdXNoKHtcclxuICAgICAgICAgICAgICAgIG5vZGU6IGNoaWxkLFxyXG4gICAgICAgICAgICAgICAgcG9zLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBub2Rlc1dpdGhQb3M7XHJcbn1cblxuZnVuY3Rpb24gZ2V0U2NoZW1hKGV4dGVuc2lvbnMpIHtcclxuICAgIGNvbnN0IHJlc29sdmVkRXh0ZW5zaW9ucyA9IEV4dGVuc2lvbk1hbmFnZXIucmVzb2x2ZShleHRlbnNpb25zKTtcclxuICAgIHJldHVybiBnZXRTY2hlbWFCeVJlc29sdmVkRXh0ZW5zaW9ucyhyZXNvbHZlZEV4dGVuc2lvbnMpO1xyXG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlSFRNTChkb2MsIGV4dGVuc2lvbnMpIHtcclxuICAgIGNvbnN0IHNjaGVtYSA9IGdldFNjaGVtYShleHRlbnNpb25zKTtcclxuICAgIGNvbnN0IGNvbnRlbnROb2RlID0gTm9kZSQxLmZyb21KU09OKHNjaGVtYSwgZG9jKTtcclxuICAgIHJldHVybiBnZXRIVE1MRnJvbUZyYWdtZW50KGNvbnRlbnROb2RlLmNvbnRlbnQsIHNjaGVtYSk7XHJcbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGVKU09OKGh0bWwsIGV4dGVuc2lvbnMpIHtcclxuICAgIGNvbnN0IHNjaGVtYSA9IGdldFNjaGVtYShleHRlbnNpb25zKTtcclxuICAgIGNvbnN0IGRvbSA9IGVsZW1lbnRGcm9tU3RyaW5nKGh0bWwpO1xyXG4gICAgcmV0dXJuIERPTVBhcnNlci5mcm9tU2NoZW1hKHNjaGVtYSlcclxuICAgICAgICAucGFyc2UoZG9tKVxyXG4gICAgICAgIC50b0pTT04oKTtcclxufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZVRleHQoZG9jLCBleHRlbnNpb25zLCBvcHRpb25zKSB7XHJcbiAgICBjb25zdCB7IGJsb2NrU2VwYXJhdG9yID0gJ1xcblxcbicsIHRleHRTZXJpYWxpemVycyA9IHt9LCB9ID0gb3B0aW9ucyB8fCB7fTtcclxuICAgIGNvbnN0IHNjaGVtYSA9IGdldFNjaGVtYShleHRlbnNpb25zKTtcclxuICAgIGNvbnN0IGNvbnRlbnROb2RlID0gTm9kZSQxLmZyb21KU09OKHNjaGVtYSwgZG9jKTtcclxuICAgIHJldHVybiBnZXRUZXh0KGNvbnRlbnROb2RlLCB7XHJcbiAgICAgICAgYmxvY2tTZXBhcmF0b3IsXHJcbiAgICAgICAgdGV4dFNlcmlhbGl6ZXJzOiB7XHJcbiAgICAgICAgICAgIC4uLnRleHRTZXJpYWxpemVycyxcclxuICAgICAgICAgICAgLi4uZ2V0VGV4dFNlcmlhbGl6ZXJzRnJvbVNjaGVtYShzY2hlbWEpLFxyXG4gICAgICAgIH0sXHJcbiAgICB9KTtcclxufVxuXG4vKipcclxuICogUmVtb3ZlcyBkdXBsaWNhdGVkIHZhbHVlcyB3aXRoaW4gYW4gYXJyYXkuXHJcbiAqIFN1cHBvcnRzIG51bWJlcnMsIHN0cmluZ3MgYW5kIG9iamVjdHMuXHJcbiAqL1xyXG5mdW5jdGlvbiByZW1vdmVEdXBsaWNhdGVzKGFycmF5LCBieSA9IEpTT04uc3RyaW5naWZ5KSB7XHJcbiAgICBjb25zdCBzZWVuID0ge307XHJcbiAgICByZXR1cm4gYXJyYXkuZmlsdGVyKGl0ZW0gPT4ge1xyXG4gICAgICAgIGNvbnN0IGtleSA9IGJ5KGl0ZW0pO1xyXG4gICAgICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc2Vlbiwga2V5KVxyXG4gICAgICAgICAgICA/IGZhbHNlXHJcbiAgICAgICAgICAgIDogKHNlZW5ba2V5XSA9IHRydWUpO1xyXG4gICAgfSk7XHJcbn1cblxuLyoqXHJcbiAqIFJlbW92ZXMgZHVwbGljYXRlZCByYW5nZXMgYW5kIHJhbmdlcyB0aGF0IGFyZVxyXG4gKiBmdWxseSBjYXB0dXJlZCBieSBvdGhlciByYW5nZXMuXHJcbiAqL1xyXG5mdW5jdGlvbiBzaW1wbGlmeUNoYW5nZWRSYW5nZXMoY2hhbmdlcykge1xyXG4gICAgY29uc3QgdW5pcXVlQ2hhbmdlcyA9IHJlbW92ZUR1cGxpY2F0ZXMoY2hhbmdlcyk7XHJcbiAgICByZXR1cm4gdW5pcXVlQ2hhbmdlcy5sZW5ndGggPT09IDFcclxuICAgICAgICA/IHVuaXF1ZUNoYW5nZXNcclxuICAgICAgICA6IHVuaXF1ZUNoYW5nZXMuZmlsdGVyKChjaGFuZ2UsIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3QgPSB1bmlxdWVDaGFuZ2VzLmZpbHRlcigoXywgaSkgPT4gaSAhPT0gaW5kZXgpO1xyXG4gICAgICAgICAgICByZXR1cm4gIXJlc3Quc29tZShvdGhlckNoYW5nZSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY2hhbmdlLm9sZFJhbmdlLmZyb20gPj0gb3RoZXJDaGFuZ2Uub2xkUmFuZ2UuZnJvbVxyXG4gICAgICAgICAgICAgICAgICAgICYmIGNoYW5nZS5vbGRSYW5nZS50byA8PSBvdGhlckNoYW5nZS5vbGRSYW5nZS50b1xyXG4gICAgICAgICAgICAgICAgICAgICYmIGNoYW5nZS5uZXdSYW5nZS5mcm9tID49IG90aGVyQ2hhbmdlLm5ld1JhbmdlLmZyb21cclxuICAgICAgICAgICAgICAgICAgICAmJiBjaGFuZ2UubmV3UmFuZ2UudG8gPD0gb3RoZXJDaGFuZ2UubmV3UmFuZ2UudG87XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG59XHJcbi8qKlxyXG4gKiBSZXR1cm5zIGEgbGlzdCBvZiBjaGFuZ2VkIHJhbmdlc1xyXG4gKiBiYXNlZCBvbiB0aGUgZmlyc3QgYW5kIGxhc3Qgc3RhdGUgb2YgYWxsIHN0ZXBzLlxyXG4gKi9cclxuZnVuY3Rpb24gZ2V0Q2hhbmdlZFJhbmdlcyh0cmFuc2Zvcm0pIHtcclxuICAgIGNvbnN0IHsgbWFwcGluZywgc3RlcHMgfSA9IHRyYW5zZm9ybTtcclxuICAgIGNvbnN0IGNoYW5nZXMgPSBbXTtcclxuICAgIG1hcHBpbmcubWFwcy5mb3JFYWNoKChzdGVwTWFwLCBpbmRleCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHJhbmdlcyA9IFtdO1xyXG4gICAgICAgIC8vIFRoaXMgYWNjb3VudHMgZm9yIHN0ZXAgY2hhbmdlcyB3aGVyZSBubyByYW5nZSB3YXMgYWN0dWFsbHkgYWx0ZXJlZFxyXG4gICAgICAgIC8vIGUuZy4gd2hlbiBzZXR0aW5nIGEgbWFyaywgbm9kZSBhdHRyaWJ1dGUsIGV0Yy5cclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgaWYgKCFzdGVwTWFwLnJhbmdlcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgY29uc3QgeyBmcm9tLCB0byB9ID0gc3RlcHNbaW5kZXhdO1xyXG4gICAgICAgICAgICBpZiAoZnJvbSA9PT0gdW5kZWZpbmVkIHx8IHRvID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByYW5nZXMucHVzaCh7IGZyb20sIHRvIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgc3RlcE1hcC5mb3JFYWNoKChmcm9tLCB0bykgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmFuZ2VzLnB1c2goeyBmcm9tLCB0byB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJhbmdlcy5mb3JFYWNoKCh7IGZyb20sIHRvIH0pID0+IHtcclxuICAgICAgICAgICAgY29uc3QgbmV3U3RhcnQgPSBtYXBwaW5nLnNsaWNlKGluZGV4KS5tYXAoZnJvbSwgLTEpO1xyXG4gICAgICAgICAgICBjb25zdCBuZXdFbmQgPSBtYXBwaW5nLnNsaWNlKGluZGV4KS5tYXAodG8pO1xyXG4gICAgICAgICAgICBjb25zdCBvbGRTdGFydCA9IG1hcHBpbmcuaW52ZXJ0KCkubWFwKG5ld1N0YXJ0LCAtMSk7XHJcbiAgICAgICAgICAgIGNvbnN0IG9sZEVuZCA9IG1hcHBpbmcuaW52ZXJ0KCkubWFwKG5ld0VuZCk7XHJcbiAgICAgICAgICAgIGNoYW5nZXMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICBvbGRSYW5nZToge1xyXG4gICAgICAgICAgICAgICAgICAgIGZyb206IG9sZFN0YXJ0LFxyXG4gICAgICAgICAgICAgICAgICAgIHRvOiBvbGRFbmQsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgbmV3UmFuZ2U6IHtcclxuICAgICAgICAgICAgICAgICAgICBmcm9tOiBuZXdTdGFydCxcclxuICAgICAgICAgICAgICAgICAgICB0bzogbmV3RW5kLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBzaW1wbGlmeUNoYW5nZWRSYW5nZXMoY2hhbmdlcyk7XHJcbn1cblxuZnVuY3Rpb24gZ2V0RGVidWdKU09OKG5vZGUsIHN0YXJ0T2Zmc2V0ID0gMCkge1xyXG4gICAgY29uc3QgaXNUb3BOb2RlID0gbm9kZS50eXBlID09PSBub2RlLnR5cGUuc2NoZW1hLnRvcE5vZGVUeXBlO1xyXG4gICAgY29uc3QgaW5jcmVtZW50ID0gaXNUb3BOb2RlID8gMCA6IDE7XHJcbiAgICBjb25zdCBmcm9tID0gc3RhcnRPZmZzZXQ7XHJcbiAgICBjb25zdCB0byA9IGZyb20gKyBub2RlLm5vZGVTaXplO1xyXG4gICAgY29uc3QgbWFya3MgPSBub2RlLm1hcmtzLm1hcChtYXJrID0+IHtcclxuICAgICAgICBjb25zdCBvdXRwdXQgPSB7XHJcbiAgICAgICAgICAgIHR5cGU6IG1hcmsudHlwZS5uYW1lLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgaWYgKE9iamVjdC5rZXlzKG1hcmsuYXR0cnMpLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBvdXRwdXQuYXR0cnMgPSB7IC4uLm1hcmsuYXR0cnMgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG91dHB1dDtcclxuICAgIH0pO1xyXG4gICAgY29uc3QgYXR0cnMgPSB7IC4uLm5vZGUuYXR0cnMgfTtcclxuICAgIGNvbnN0IG91dHB1dCA9IHtcclxuICAgICAgICB0eXBlOiBub2RlLnR5cGUubmFtZSxcclxuICAgICAgICBmcm9tLFxyXG4gICAgICAgIHRvLFxyXG4gICAgfTtcclxuICAgIGlmIChPYmplY3Qua2V5cyhhdHRycykubGVuZ3RoKSB7XHJcbiAgICAgICAgb3V0cHV0LmF0dHJzID0gYXR0cnM7XHJcbiAgICB9XHJcbiAgICBpZiAobWFya3MubGVuZ3RoKSB7XHJcbiAgICAgICAgb3V0cHV0Lm1hcmtzID0gbWFya3M7XHJcbiAgICB9XHJcbiAgICBpZiAobm9kZS5jb250ZW50LmNoaWxkQ291bnQpIHtcclxuICAgICAgICBvdXRwdXQuY29udGVudCA9IFtdO1xyXG4gICAgICAgIG5vZGUuZm9yRWFjaCgoY2hpbGQsIG9mZnNldCkgPT4ge1xyXG4gICAgICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgICAgIChfYSA9IG91dHB1dC5jb250ZW50KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucHVzaChnZXREZWJ1Z0pTT04oY2hpbGQsIHN0YXJ0T2Zmc2V0ICsgb2Zmc2V0ICsgaW5jcmVtZW50KSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBpZiAobm9kZS50ZXh0KSB7XHJcbiAgICAgICAgb3V0cHV0LnRleHQgPSBub2RlLnRleHQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gb3V0cHV0O1xyXG59XG5cbmZ1bmN0aW9uIGdldE1hcmtzQmV0d2Vlbihmcm9tLCB0bywgZG9jKSB7XHJcbiAgICBjb25zdCBtYXJrcyA9IFtdO1xyXG4gICAgLy8gZ2V0IGFsbCBpbmNsdXNpdmUgbWFya3Mgb24gZW1wdHkgc2VsZWN0aW9uXHJcbiAgICBpZiAoZnJvbSA9PT0gdG8pIHtcclxuICAgICAgICBkb2NcclxuICAgICAgICAgICAgLnJlc29sdmUoZnJvbSlcclxuICAgICAgICAgICAgLm1hcmtzKClcclxuICAgICAgICAgICAgLmZvckVhY2gobWFyayA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0ICRwb3MgPSBkb2MucmVzb2x2ZShmcm9tIC0gMSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHJhbmdlID0gZ2V0TWFya1JhbmdlKCRwb3MsIG1hcmsudHlwZSk7XHJcbiAgICAgICAgICAgIGlmICghcmFuZ2UpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBtYXJrcy5wdXNoKHtcclxuICAgICAgICAgICAgICAgIG1hcmssXHJcbiAgICAgICAgICAgICAgICAuLi5yYW5nZSxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBkb2Mubm9kZXNCZXR3ZWVuKGZyb20sIHRvLCAobm9kZSwgcG9zKSA9PiB7XHJcbiAgICAgICAgICAgIG1hcmtzLnB1c2goLi4ubm9kZS5tYXJrcy5tYXAobWFyayA9PiAoe1xyXG4gICAgICAgICAgICAgICAgZnJvbTogcG9zLFxyXG4gICAgICAgICAgICAgICAgdG86IHBvcyArIG5vZGUubm9kZVNpemUsXHJcbiAgICAgICAgICAgICAgICBtYXJrLFxyXG4gICAgICAgICAgICB9KSkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG1hcmtzO1xyXG59XG5cbmZ1bmN0aW9uIGlzTm9kZVNlbGVjdGlvbih2YWx1ZSkge1xyXG4gICAgcmV0dXJuIGlzT2JqZWN0KHZhbHVlKSAmJiB2YWx1ZSBpbnN0YW5jZW9mIE5vZGVTZWxlY3Rpb247XHJcbn1cblxuZnVuY3Rpb24gcG9zVG9ET01SZWN0KHZpZXcsIGZyb20sIHRvKSB7XHJcbiAgICBjb25zdCBtaW5Qb3MgPSAwO1xyXG4gICAgY29uc3QgbWF4UG9zID0gdmlldy5zdGF0ZS5kb2MuY29udGVudC5zaXplO1xyXG4gICAgY29uc3QgcmVzb2x2ZWRGcm9tID0gbWluTWF4KGZyb20sIG1pblBvcywgbWF4UG9zKTtcclxuICAgIGNvbnN0IHJlc29sdmVkRW5kID0gbWluTWF4KHRvLCBtaW5Qb3MsIG1heFBvcyk7XHJcbiAgICBjb25zdCBzdGFydCA9IHZpZXcuY29vcmRzQXRQb3MocmVzb2x2ZWRGcm9tKTtcclxuICAgIGNvbnN0IGVuZCA9IHZpZXcuY29vcmRzQXRQb3MocmVzb2x2ZWRFbmQsIC0xKTtcclxuICAgIGNvbnN0IHRvcCA9IE1hdGgubWluKHN0YXJ0LnRvcCwgZW5kLnRvcCk7XHJcbiAgICBjb25zdCBib3R0b20gPSBNYXRoLm1heChzdGFydC5ib3R0b20sIGVuZC5ib3R0b20pO1xyXG4gICAgY29uc3QgbGVmdCA9IE1hdGgubWluKHN0YXJ0LmxlZnQsIGVuZC5sZWZ0KTtcclxuICAgIGNvbnN0IHJpZ2h0ID0gTWF0aC5tYXgoc3RhcnQucmlnaHQsIGVuZC5yaWdodCk7XHJcbiAgICBjb25zdCB3aWR0aCA9IHJpZ2h0IC0gbGVmdDtcclxuICAgIGNvbnN0IGhlaWdodCA9IGJvdHRvbSAtIHRvcDtcclxuICAgIGNvbnN0IHggPSBsZWZ0O1xyXG4gICAgY29uc3QgeSA9IHRvcDtcclxuICAgIGNvbnN0IGRhdGEgPSB7XHJcbiAgICAgICAgdG9wLFxyXG4gICAgICAgIGJvdHRvbSxcclxuICAgICAgICBsZWZ0LFxyXG4gICAgICAgIHJpZ2h0LFxyXG4gICAgICAgIHdpZHRoLFxyXG4gICAgICAgIGhlaWdodCxcclxuICAgICAgICB4LFxyXG4gICAgICAgIHksXHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICAuLi5kYXRhLFxyXG4gICAgICAgIHRvSlNPTjogKCkgPT4gZGF0YSxcclxuICAgIH07XHJcbn1cblxuLyoqXHJcbiAqIEJ1aWxkIGFuIGlucHV0IHJ1bGUgdGhhdCBhZGRzIGEgbWFyayB3aGVuIHRoZVxyXG4gKiBtYXRjaGVkIHRleHQgaXMgdHlwZWQgaW50byBpdC5cclxuICovXHJcbmZ1bmN0aW9uIG1hcmtJbnB1dFJ1bGUoY29uZmlnKSB7XHJcbiAgICByZXR1cm4gbmV3IElucHV0UnVsZSh7XHJcbiAgICAgICAgZmluZDogY29uZmlnLmZpbmQsXHJcbiAgICAgICAgaGFuZGxlcjogKHsgc3RhdGUsIHJhbmdlLCBtYXRjaCB9KSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBjYWxsT3JSZXR1cm4oY29uZmlnLmdldEF0dHJpYnV0ZXMsIHVuZGVmaW5lZCwgbWF0Y2gpO1xyXG4gICAgICAgICAgICBpZiAoYXR0cmlidXRlcyA9PT0gZmFsc2UgfHwgYXR0cmlidXRlcyA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgeyB0ciB9ID0gc3RhdGU7XHJcbiAgICAgICAgICAgIGNvbnN0IGNhcHR1cmVHcm91cCA9IG1hdGNoW21hdGNoLmxlbmd0aCAtIDFdO1xyXG4gICAgICAgICAgICBjb25zdCBmdWxsTWF0Y2ggPSBtYXRjaFswXTtcclxuICAgICAgICAgICAgbGV0IG1hcmtFbmQgPSByYW5nZS50bztcclxuICAgICAgICAgICAgaWYgKGNhcHR1cmVHcm91cCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc3RhcnRTcGFjZXMgPSBmdWxsTWF0Y2guc2VhcmNoKC9cXFMvKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRleHRTdGFydCA9IHJhbmdlLmZyb20gKyBmdWxsTWF0Y2guaW5kZXhPZihjYXB0dXJlR3JvdXApO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdGV4dEVuZCA9IHRleHRTdGFydCArIGNhcHR1cmVHcm91cC5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBleGNsdWRlZE1hcmtzID0gZ2V0TWFya3NCZXR3ZWVuKHJhbmdlLmZyb20sIHJhbmdlLnRvLCBzdGF0ZS5kb2MpXHJcbiAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihpdGVtID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZXhjbHVkZWQgPSBpdGVtLm1hcmsudHlwZS5leGNsdWRlZDtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXhjbHVkZWQuZmluZCh0eXBlID0+IHR5cGUgPT09IGNvbmZpZy50eXBlICYmIHR5cGUgIT09IGl0ZW0ubWFyay50eXBlKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihpdGVtID0+IGl0ZW0udG8gPiB0ZXh0U3RhcnQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGV4Y2x1ZGVkTWFya3MubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodGV4dEVuZCA8IHJhbmdlLnRvKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHIuZGVsZXRlKHRleHRFbmQsIHJhbmdlLnRvKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0ZXh0U3RhcnQgPiByYW5nZS5mcm9tKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHIuZGVsZXRlKHJhbmdlLmZyb20gKyBzdGFydFNwYWNlcywgdGV4dFN0YXJ0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIG1hcmtFbmQgPSByYW5nZS5mcm9tICsgc3RhcnRTcGFjZXMgKyBjYXB0dXJlR3JvdXAubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgdHIuYWRkTWFyayhyYW5nZS5mcm9tICsgc3RhcnRTcGFjZXMsIG1hcmtFbmQsIGNvbmZpZy50eXBlLmNyZWF0ZShhdHRyaWJ1dGVzIHx8IHt9KSk7XHJcbiAgICAgICAgICAgICAgICB0ci5yZW1vdmVTdG9yZWRNYXJrKGNvbmZpZy50eXBlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICB9KTtcclxufVxuXG4vKipcclxuICogQnVpbGQgYW4gaW5wdXQgcnVsZSB0aGF0IGFkZHMgYSBub2RlIHdoZW4gdGhlXHJcbiAqIG1hdGNoZWQgdGV4dCBpcyB0eXBlZCBpbnRvIGl0LlxyXG4gKi9cclxuZnVuY3Rpb24gbm9kZUlucHV0UnVsZShjb25maWcpIHtcclxuICAgIHJldHVybiBuZXcgSW5wdXRSdWxlKHtcclxuICAgICAgICBmaW5kOiBjb25maWcuZmluZCxcclxuICAgICAgICBoYW5kbGVyOiAoeyBzdGF0ZSwgcmFuZ2UsIG1hdGNoIH0pID0+IHtcclxuICAgICAgICAgICAgY29uc3QgYXR0cmlidXRlcyA9IGNhbGxPclJldHVybihjb25maWcuZ2V0QXR0cmlidXRlcywgdW5kZWZpbmVkLCBtYXRjaCkgfHwge307XHJcbiAgICAgICAgICAgIGNvbnN0IHsgdHIgfSA9IHN0YXRlO1xyXG4gICAgICAgICAgICBjb25zdCBzdGFydCA9IHJhbmdlLmZyb207XHJcbiAgICAgICAgICAgIGxldCBlbmQgPSByYW5nZS50bztcclxuICAgICAgICAgICAgaWYgKG1hdGNoWzFdKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvZmZzZXQgPSBtYXRjaFswXS5sYXN0SW5kZXhPZihtYXRjaFsxXSk7XHJcbiAgICAgICAgICAgICAgICBsZXQgbWF0Y2hTdGFydCA9IHN0YXJ0ICsgb2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgaWYgKG1hdGNoU3RhcnQgPiBlbmQpIHtcclxuICAgICAgICAgICAgICAgICAgICBtYXRjaFN0YXJ0ID0gZW5kO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZW5kID0gbWF0Y2hTdGFydCArIG1hdGNoWzFdLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIGluc2VydCBsYXN0IHR5cGVkIGNoYXJhY3RlclxyXG4gICAgICAgICAgICAgICAgY29uc3QgbGFzdENoYXIgPSBtYXRjaFswXVttYXRjaFswXS5sZW5ndGggLSAxXTtcclxuICAgICAgICAgICAgICAgIHRyLmluc2VydFRleHQobGFzdENoYXIsIHN0YXJ0ICsgbWF0Y2hbMF0ubGVuZ3RoIC0gMSk7XHJcbiAgICAgICAgICAgICAgICAvLyBpbnNlcnQgbm9kZSBmcm9tIGlucHV0IHJ1bGVcclxuICAgICAgICAgICAgICAgIHRyLnJlcGxhY2VXaXRoKG1hdGNoU3RhcnQsIGVuZCwgY29uZmlnLnR5cGUuY3JlYXRlKGF0dHJpYnV0ZXMpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChtYXRjaFswXSkge1xyXG4gICAgICAgICAgICAgICAgdHIucmVwbGFjZVdpdGgoc3RhcnQsIGVuZCwgY29uZmlnLnR5cGUuY3JlYXRlKGF0dHJpYnV0ZXMpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICB9KTtcclxufVxuXG4vKipcclxuICogQnVpbGQgYW4gaW5wdXQgcnVsZSB0aGF0IGNoYW5nZXMgdGhlIHR5cGUgb2YgYSB0ZXh0YmxvY2sgd2hlbiB0aGVcclxuICogbWF0Y2hlZCB0ZXh0IGlzIHR5cGVkIGludG8gaXQuIFdoZW4gdXNpbmcgYSByZWd1bGFyIGV4cHJlc2lvbiB5b3XigJlsbFxyXG4gKiBwcm9iYWJseSB3YW50IHRoZSByZWdleHAgdG8gc3RhcnQgd2l0aCBgXmAsIHNvIHRoYXQgdGhlIHBhdHRlcm4gY2FuXHJcbiAqIG9ubHkgb2NjdXIgYXQgdGhlIHN0YXJ0IG9mIGEgdGV4dGJsb2NrLlxyXG4gKi9cclxuZnVuY3Rpb24gdGV4dGJsb2NrVHlwZUlucHV0UnVsZShjb25maWcpIHtcclxuICAgIHJldHVybiBuZXcgSW5wdXRSdWxlKHtcclxuICAgICAgICBmaW5kOiBjb25maWcuZmluZCxcclxuICAgICAgICBoYW5kbGVyOiAoeyBzdGF0ZSwgcmFuZ2UsIG1hdGNoIH0pID0+IHtcclxuICAgICAgICAgICAgY29uc3QgJHN0YXJ0ID0gc3RhdGUuZG9jLnJlc29sdmUocmFuZ2UuZnJvbSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBjYWxsT3JSZXR1cm4oY29uZmlnLmdldEF0dHJpYnV0ZXMsIHVuZGVmaW5lZCwgbWF0Y2gpIHx8IHt9O1xyXG4gICAgICAgICAgICBpZiAoISRzdGFydC5ub2RlKC0xKS5jYW5SZXBsYWNlV2l0aCgkc3RhcnQuaW5kZXgoLTEpLCAkc3RhcnQuaW5kZXhBZnRlcigtMSksIGNvbmZpZy50eXBlKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc3RhdGUudHJcclxuICAgICAgICAgICAgICAgIC5kZWxldGUocmFuZ2UuZnJvbSwgcmFuZ2UudG8pXHJcbiAgICAgICAgICAgICAgICAuc2V0QmxvY2tUeXBlKHJhbmdlLmZyb20sIHJhbmdlLmZyb20sIGNvbmZpZy50eXBlLCBhdHRyaWJ1dGVzKTtcclxuICAgICAgICB9LFxyXG4gICAgfSk7XHJcbn1cblxuLyoqXHJcbiAqIEJ1aWxkIGFuIGlucHV0IHJ1bGUgdGhhdCByZXBsYWNlcyB0ZXh0IHdoZW4gdGhlXHJcbiAqIG1hdGNoZWQgdGV4dCBpcyB0eXBlZCBpbnRvIGl0LlxyXG4gKi9cclxuZnVuY3Rpb24gdGV4dElucHV0UnVsZShjb25maWcpIHtcclxuICAgIHJldHVybiBuZXcgSW5wdXRSdWxlKHtcclxuICAgICAgICBmaW5kOiBjb25maWcuZmluZCxcclxuICAgICAgICBoYW5kbGVyOiAoeyBzdGF0ZSwgcmFuZ2UsIG1hdGNoIH0pID0+IHtcclxuICAgICAgICAgICAgbGV0IGluc2VydCA9IGNvbmZpZy5yZXBsYWNlO1xyXG4gICAgICAgICAgICBsZXQgc3RhcnQgPSByYW5nZS5mcm9tO1xyXG4gICAgICAgICAgICBjb25zdCBlbmQgPSByYW5nZS50bztcclxuICAgICAgICAgICAgaWYgKG1hdGNoWzFdKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvZmZzZXQgPSBtYXRjaFswXS5sYXN0SW5kZXhPZihtYXRjaFsxXSk7XHJcbiAgICAgICAgICAgICAgICBpbnNlcnQgKz0gbWF0Y2hbMF0uc2xpY2Uob2Zmc2V0ICsgbWF0Y2hbMV0ubGVuZ3RoKTtcclxuICAgICAgICAgICAgICAgIHN0YXJ0ICs9IG9mZnNldDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGN1dE9mZiA9IHN0YXJ0IC0gZW5kO1xyXG4gICAgICAgICAgICAgICAgaWYgKGN1dE9mZiA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBpbnNlcnQgPSBtYXRjaFswXS5zbGljZShvZmZzZXQgLSBjdXRPZmYsIG9mZnNldCkgKyBpbnNlcnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSBlbmQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc3RhdGUudHIuaW5zZXJ0VGV4dChpbnNlcnQsIHN0YXJ0LCBlbmQpO1xyXG4gICAgICAgIH0sXHJcbiAgICB9KTtcclxufVxuXG4vKipcclxuICogQnVpbGQgYW4gaW5wdXQgcnVsZSBmb3IgYXV0b21hdGljYWxseSB3cmFwcGluZyBhIHRleHRibG9jayB3aGVuIGFcclxuICogZ2l2ZW4gc3RyaW5nIGlzIHR5cGVkLiBXaGVuIHVzaW5nIGEgcmVndWxhciBleHByZXNpb24geW914oCZbGxcclxuICogcHJvYmFibHkgd2FudCB0aGUgcmVnZXhwIHRvIHN0YXJ0IHdpdGggYF5gLCBzbyB0aGF0IHRoZSBwYXR0ZXJuIGNhblxyXG4gKiBvbmx5IG9jY3VyIGF0IHRoZSBzdGFydCBvZiBhIHRleHRibG9jay5cclxuICpcclxuICogYHR5cGVgIGlzIHRoZSB0eXBlIG9mIG5vZGUgdG8gd3JhcCBpbi5cclxuICpcclxuICogQnkgZGVmYXVsdCwgaWYgdGhlcmXigJlzIGEgbm9kZSB3aXRoIHRoZSBzYW1lIHR5cGUgYWJvdmUgdGhlIG5ld2x5XHJcbiAqIHdyYXBwZWQgbm9kZSwgdGhlIHJ1bGUgd2lsbCB0cnkgdG8gam9pbiB0aG9zZVxyXG4gKiB0d28gbm9kZXMuIFlvdSBjYW4gcGFzcyBhIGpvaW4gcHJlZGljYXRlLCB3aGljaCB0YWtlcyBhIHJlZ3VsYXJcclxuICogZXhwcmVzc2lvbiBtYXRjaCBhbmQgdGhlIG5vZGUgYmVmb3JlIHRoZSB3cmFwcGVkIG5vZGUsIGFuZCBjYW5cclxuICogcmV0dXJuIGEgYm9vbGVhbiB0byBpbmRpY2F0ZSB3aGV0aGVyIGEgam9pbiBzaG91bGQgaGFwcGVuLlxyXG4gKi9cclxuZnVuY3Rpb24gd3JhcHBpbmdJbnB1dFJ1bGUoY29uZmlnKSB7XHJcbiAgICByZXR1cm4gbmV3IElucHV0UnVsZSh7XHJcbiAgICAgICAgZmluZDogY29uZmlnLmZpbmQsXHJcbiAgICAgICAgaGFuZGxlcjogKHsgc3RhdGUsIHJhbmdlLCBtYXRjaCB9KSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBjYWxsT3JSZXR1cm4oY29uZmlnLmdldEF0dHJpYnV0ZXMsIHVuZGVmaW5lZCwgbWF0Y2gpIHx8IHt9O1xyXG4gICAgICAgICAgICBjb25zdCB0ciA9IHN0YXRlLnRyLmRlbGV0ZShyYW5nZS5mcm9tLCByYW5nZS50byk7XHJcbiAgICAgICAgICAgIGNvbnN0ICRzdGFydCA9IHRyLmRvYy5yZXNvbHZlKHJhbmdlLmZyb20pO1xyXG4gICAgICAgICAgICBjb25zdCBibG9ja1JhbmdlID0gJHN0YXJ0LmJsb2NrUmFuZ2UoKTtcclxuICAgICAgICAgICAgY29uc3Qgd3JhcHBpbmcgPSBibG9ja1JhbmdlICYmIGZpbmRXcmFwcGluZyhibG9ja1JhbmdlLCBjb25maWcudHlwZSwgYXR0cmlidXRlcyk7XHJcbiAgICAgICAgICAgIGlmICghd3JhcHBpbmcpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRyLndyYXAoYmxvY2tSYW5nZSwgd3JhcHBpbmcpO1xyXG4gICAgICAgICAgICBjb25zdCBiZWZvcmUgPSB0ci5kb2MucmVzb2x2ZShyYW5nZS5mcm9tIC0gMSkubm9kZUJlZm9yZTtcclxuICAgICAgICAgICAgaWYgKGJlZm9yZVxyXG4gICAgICAgICAgICAgICAgJiYgYmVmb3JlLnR5cGUgPT09IGNvbmZpZy50eXBlXHJcbiAgICAgICAgICAgICAgICAmJiBjYW5Kb2luKHRyLmRvYywgcmFuZ2UuZnJvbSAtIDEpXHJcbiAgICAgICAgICAgICAgICAmJiAoIWNvbmZpZy5qb2luUHJlZGljYXRlIHx8IGNvbmZpZy5qb2luUHJlZGljYXRlKG1hdGNoLCBiZWZvcmUpKSkge1xyXG4gICAgICAgICAgICAgICAgdHIuam9pbihyYW5nZS5mcm9tIC0gMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgfSk7XHJcbn1cblxuY2xhc3MgTWFyayB7XHJcbiAgICBjb25zdHJ1Y3Rvcihjb25maWcgPSB7fSkge1xyXG4gICAgICAgIHRoaXMudHlwZSA9ICdtYXJrJztcclxuICAgICAgICB0aGlzLm5hbWUgPSAnbWFyayc7XHJcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuY2hpbGQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuY29uZmlnID0ge1xyXG4gICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWUsXHJcbiAgICAgICAgICAgIGRlZmF1bHRPcHRpb25zOiB7fSxcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuY29uZmlnID0ge1xyXG4gICAgICAgICAgICAuLi50aGlzLmNvbmZpZyxcclxuICAgICAgICAgICAgLi4uY29uZmlnLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5uYW1lID0gdGhpcy5jb25maWcubmFtZTtcclxuICAgICAgICBpZiAoY29uZmlnLmRlZmF1bHRPcHRpb25zKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgW3RpcHRhcCB3YXJuXTogQlJFQUtJTkcgQ0hBTkdFOiBcImRlZmF1bHRPcHRpb25zXCIgaXMgZGVwcmVjYXRlZC4gUGxlYXNlIHVzZSBcImFkZE9wdGlvbnNcIiBpbnN0ZWFkLiBGb3VuZCBpbiBleHRlbnNpb246IFwiJHt0aGlzLm5hbWV9XCIuYCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFRPRE86IHJlbW92ZSBgYWRkT3B0aW9uc2AgZmFsbGJhY2tcclxuICAgICAgICB0aGlzLm9wdGlvbnMgPSB0aGlzLmNvbmZpZy5kZWZhdWx0T3B0aW9ucztcclxuICAgICAgICBpZiAodGhpcy5jb25maWcuYWRkT3B0aW9ucykge1xyXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMgPSBjYWxsT3JSZXR1cm4oZ2V0RXh0ZW5zaW9uRmllbGQodGhpcywgJ2FkZE9wdGlvbnMnLCB7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWUsXHJcbiAgICAgICAgICAgIH0pKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5zdG9yYWdlID0gY2FsbE9yUmV0dXJuKGdldEV4dGVuc2lvbkZpZWxkKHRoaXMsICdhZGRTdG9yYWdlJywge1xyXG4gICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWUsXHJcbiAgICAgICAgICAgIG9wdGlvbnM6IHRoaXMub3B0aW9ucyxcclxuICAgICAgICB9KSkgfHwge307XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgY3JlYXRlKGNvbmZpZyA9IHt9KSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBNYXJrKGNvbmZpZyk7XHJcbiAgICB9XHJcbiAgICBjb25maWd1cmUob3B0aW9ucyA9IHt9KSB7XHJcbiAgICAgICAgLy8gcmV0dXJuIGEgbmV3IGluc3RhbmNlIHNvIHdlIGNhbiB1c2UgdGhlIHNhbWUgZXh0ZW5zaW9uXHJcbiAgICAgICAgLy8gd2l0aCBkaWZmZXJlbnQgY2FsbHMgb2YgYGNvbmZpZ3VyZWBcclxuICAgICAgICBjb25zdCBleHRlbnNpb24gPSB0aGlzLmV4dGVuZCgpO1xyXG4gICAgICAgIGV4dGVuc2lvbi5vcHRpb25zID0gbWVyZ2VEZWVwKHRoaXMub3B0aW9ucywgb3B0aW9ucyk7XHJcbiAgICAgICAgZXh0ZW5zaW9uLnN0b3JhZ2UgPSBjYWxsT3JSZXR1cm4oZ2V0RXh0ZW5zaW9uRmllbGQoZXh0ZW5zaW9uLCAnYWRkU3RvcmFnZScsIHtcclxuICAgICAgICAgICAgbmFtZTogZXh0ZW5zaW9uLm5hbWUsXHJcbiAgICAgICAgICAgIG9wdGlvbnM6IGV4dGVuc2lvbi5vcHRpb25zLFxyXG4gICAgICAgIH0pKTtcclxuICAgICAgICByZXR1cm4gZXh0ZW5zaW9uO1xyXG4gICAgfVxyXG4gICAgZXh0ZW5kKGV4dGVuZGVkQ29uZmlnID0ge30pIHtcclxuICAgICAgICBjb25zdCBleHRlbnNpb24gPSBuZXcgTWFyayhleHRlbmRlZENvbmZpZyk7XHJcbiAgICAgICAgZXh0ZW5zaW9uLnBhcmVudCA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5jaGlsZCA9IGV4dGVuc2lvbjtcclxuICAgICAgICBleHRlbnNpb24ubmFtZSA9IGV4dGVuZGVkQ29uZmlnLm5hbWVcclxuICAgICAgICAgICAgPyBleHRlbmRlZENvbmZpZy5uYW1lXHJcbiAgICAgICAgICAgIDogZXh0ZW5zaW9uLnBhcmVudC5uYW1lO1xyXG4gICAgICAgIGlmIChleHRlbmRlZENvbmZpZy5kZWZhdWx0T3B0aW9ucykge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYFt0aXB0YXAgd2Fybl06IEJSRUFLSU5HIENIQU5HRTogXCJkZWZhdWx0T3B0aW9uc1wiIGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgXCJhZGRPcHRpb25zXCIgaW5zdGVhZC4gRm91bmQgaW4gZXh0ZW5zaW9uOiBcIiR7ZXh0ZW5zaW9uLm5hbWV9XCIuYCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGV4dGVuc2lvbi5vcHRpb25zID0gY2FsbE9yUmV0dXJuKGdldEV4dGVuc2lvbkZpZWxkKGV4dGVuc2lvbiwgJ2FkZE9wdGlvbnMnLCB7XHJcbiAgICAgICAgICAgIG5hbWU6IGV4dGVuc2lvbi5uYW1lLFxyXG4gICAgICAgIH0pKTtcclxuICAgICAgICBleHRlbnNpb24uc3RvcmFnZSA9IGNhbGxPclJldHVybihnZXRFeHRlbnNpb25GaWVsZChleHRlbnNpb24sICdhZGRTdG9yYWdlJywge1xyXG4gICAgICAgICAgICBuYW1lOiBleHRlbnNpb24ubmFtZSxcclxuICAgICAgICAgICAgb3B0aW9uczogZXh0ZW5zaW9uLm9wdGlvbnMsXHJcbiAgICAgICAgfSkpO1xyXG4gICAgICAgIHJldHVybiBleHRlbnNpb247XHJcbiAgICB9XHJcbn1cblxuY2xhc3MgTm9kZSB7XHJcbiAgICBjb25zdHJ1Y3Rvcihjb25maWcgPSB7fSkge1xyXG4gICAgICAgIHRoaXMudHlwZSA9ICdub2RlJztcclxuICAgICAgICB0aGlzLm5hbWUgPSAnbm9kZSc7XHJcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuY2hpbGQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuY29uZmlnID0ge1xyXG4gICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWUsXHJcbiAgICAgICAgICAgIGRlZmF1bHRPcHRpb25zOiB7fSxcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuY29uZmlnID0ge1xyXG4gICAgICAgICAgICAuLi50aGlzLmNvbmZpZyxcclxuICAgICAgICAgICAgLi4uY29uZmlnLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5uYW1lID0gdGhpcy5jb25maWcubmFtZTtcclxuICAgICAgICBpZiAoY29uZmlnLmRlZmF1bHRPcHRpb25zKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgW3RpcHRhcCB3YXJuXTogQlJFQUtJTkcgQ0hBTkdFOiBcImRlZmF1bHRPcHRpb25zXCIgaXMgZGVwcmVjYXRlZC4gUGxlYXNlIHVzZSBcImFkZE9wdGlvbnNcIiBpbnN0ZWFkLiBGb3VuZCBpbiBleHRlbnNpb246IFwiJHt0aGlzLm5hbWV9XCIuYCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFRPRE86IHJlbW92ZSBgYWRkT3B0aW9uc2AgZmFsbGJhY2tcclxuICAgICAgICB0aGlzLm9wdGlvbnMgPSB0aGlzLmNvbmZpZy5kZWZhdWx0T3B0aW9ucztcclxuICAgICAgICBpZiAodGhpcy5jb25maWcuYWRkT3B0aW9ucykge1xyXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMgPSBjYWxsT3JSZXR1cm4oZ2V0RXh0ZW5zaW9uRmllbGQodGhpcywgJ2FkZE9wdGlvbnMnLCB7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWUsXHJcbiAgICAgICAgICAgIH0pKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5zdG9yYWdlID0gY2FsbE9yUmV0dXJuKGdldEV4dGVuc2lvbkZpZWxkKHRoaXMsICdhZGRTdG9yYWdlJywge1xyXG4gICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWUsXHJcbiAgICAgICAgICAgIG9wdGlvbnM6IHRoaXMub3B0aW9ucyxcclxuICAgICAgICB9KSkgfHwge307XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgY3JlYXRlKGNvbmZpZyA9IHt9KSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBOb2RlKGNvbmZpZyk7XHJcbiAgICB9XHJcbiAgICBjb25maWd1cmUob3B0aW9ucyA9IHt9KSB7XHJcbiAgICAgICAgLy8gcmV0dXJuIGEgbmV3IGluc3RhbmNlIHNvIHdlIGNhbiB1c2UgdGhlIHNhbWUgZXh0ZW5zaW9uXHJcbiAgICAgICAgLy8gd2l0aCBkaWZmZXJlbnQgY2FsbHMgb2YgYGNvbmZpZ3VyZWBcclxuICAgICAgICBjb25zdCBleHRlbnNpb24gPSB0aGlzLmV4dGVuZCgpO1xyXG4gICAgICAgIGV4dGVuc2lvbi5vcHRpb25zID0gbWVyZ2VEZWVwKHRoaXMub3B0aW9ucywgb3B0aW9ucyk7XHJcbiAgICAgICAgZXh0ZW5zaW9uLnN0b3JhZ2UgPSBjYWxsT3JSZXR1cm4oZ2V0RXh0ZW5zaW9uRmllbGQoZXh0ZW5zaW9uLCAnYWRkU3RvcmFnZScsIHtcclxuICAgICAgICAgICAgbmFtZTogZXh0ZW5zaW9uLm5hbWUsXHJcbiAgICAgICAgICAgIG9wdGlvbnM6IGV4dGVuc2lvbi5vcHRpb25zLFxyXG4gICAgICAgIH0pKTtcclxuICAgICAgICByZXR1cm4gZXh0ZW5zaW9uO1xyXG4gICAgfVxyXG4gICAgZXh0ZW5kKGV4dGVuZGVkQ29uZmlnID0ge30pIHtcclxuICAgICAgICBjb25zdCBleHRlbnNpb24gPSBuZXcgTm9kZShleHRlbmRlZENvbmZpZyk7XHJcbiAgICAgICAgZXh0ZW5zaW9uLnBhcmVudCA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5jaGlsZCA9IGV4dGVuc2lvbjtcclxuICAgICAgICBleHRlbnNpb24ubmFtZSA9IGV4dGVuZGVkQ29uZmlnLm5hbWVcclxuICAgICAgICAgICAgPyBleHRlbmRlZENvbmZpZy5uYW1lXHJcbiAgICAgICAgICAgIDogZXh0ZW5zaW9uLnBhcmVudC5uYW1lO1xyXG4gICAgICAgIGlmIChleHRlbmRlZENvbmZpZy5kZWZhdWx0T3B0aW9ucykge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYFt0aXB0YXAgd2Fybl06IEJSRUFLSU5HIENIQU5HRTogXCJkZWZhdWx0T3B0aW9uc1wiIGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgXCJhZGRPcHRpb25zXCIgaW5zdGVhZC4gRm91bmQgaW4gZXh0ZW5zaW9uOiBcIiR7ZXh0ZW5zaW9uLm5hbWV9XCIuYCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGV4dGVuc2lvbi5vcHRpb25zID0gY2FsbE9yUmV0dXJuKGdldEV4dGVuc2lvbkZpZWxkKGV4dGVuc2lvbiwgJ2FkZE9wdGlvbnMnLCB7XHJcbiAgICAgICAgICAgIG5hbWU6IGV4dGVuc2lvbi5uYW1lLFxyXG4gICAgICAgIH0pKTtcclxuICAgICAgICBleHRlbnNpb24uc3RvcmFnZSA9IGNhbGxPclJldHVybihnZXRFeHRlbnNpb25GaWVsZChleHRlbnNpb24sICdhZGRTdG9yYWdlJywge1xyXG4gICAgICAgICAgICBuYW1lOiBleHRlbnNpb24ubmFtZSxcclxuICAgICAgICAgICAgb3B0aW9uczogZXh0ZW5zaW9uLm9wdGlvbnMsXHJcbiAgICAgICAgfSkpO1xyXG4gICAgICAgIHJldHVybiBleHRlbnNpb247XHJcbiAgICB9XHJcbn1cblxuY2xhc3MgTm9kZVZpZXcge1xyXG4gICAgY29uc3RydWN0b3IoY29tcG9uZW50LCBwcm9wcywgb3B0aW9ucykge1xyXG4gICAgICAgIHRoaXMuaXNEcmFnZ2luZyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuY29tcG9uZW50ID0gY29tcG9uZW50O1xyXG4gICAgICAgIHRoaXMuZWRpdG9yID0gcHJvcHMuZWRpdG9yO1xyXG4gICAgICAgIHRoaXMub3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgc3RvcEV2ZW50OiBudWxsLFxyXG4gICAgICAgICAgICBpZ25vcmVNdXRhdGlvbjogbnVsbCxcclxuICAgICAgICAgICAgLi4ub3B0aW9ucyxcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuZXh0ZW5zaW9uID0gcHJvcHMuZXh0ZW5zaW9uO1xyXG4gICAgICAgIHRoaXMubm9kZSA9IHByb3BzLm5vZGU7XHJcbiAgICAgICAgdGhpcy5kZWNvcmF0aW9ucyA9IHByb3BzLmRlY29yYXRpb25zO1xyXG4gICAgICAgIHRoaXMuZ2V0UG9zID0gcHJvcHMuZ2V0UG9zO1xyXG4gICAgICAgIHRoaXMubW91bnQoKTtcclxuICAgIH1cclxuICAgIG1vdW50KCkge1xyXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGdldCBkb20oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZWRpdG9yLnZpZXcuZG9tO1xyXG4gICAgfVxyXG4gICAgZ2V0IGNvbnRlbnRET00oKSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICBvbkRyYWdTdGFydChldmVudCkge1xyXG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2UsIF9mLCBfZztcclxuICAgICAgICBjb25zdCB7IHZpZXcgfSA9IHRoaXMuZWRpdG9yO1xyXG4gICAgICAgIGNvbnN0IHRhcmdldCA9IGV2ZW50LnRhcmdldDtcclxuICAgICAgICAvLyBnZXQgdGhlIGRyYWcgaGFuZGxlIGVsZW1lbnRcclxuICAgICAgICAvLyBgY2xvc2VzdGAgaXMgbm90IGF2YWlsYWJsZSBmb3IgdGV4dCBub2RlcyBzbyB3ZSBtYXkgaGF2ZSB0byB1c2UgaXRzIHBhcmVudFxyXG4gICAgICAgIGNvbnN0IGRyYWdIYW5kbGUgPSB0YXJnZXQubm9kZVR5cGUgPT09IDNcclxuICAgICAgICAgICAgPyAoX2EgPSB0YXJnZXQucGFyZW50RWxlbWVudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNsb3Nlc3QoJ1tkYXRhLWRyYWctaGFuZGxlXScpXHJcbiAgICAgICAgICAgIDogdGFyZ2V0LmNsb3Nlc3QoJ1tkYXRhLWRyYWctaGFuZGxlXScpO1xyXG4gICAgICAgIGlmICghdGhpcy5kb21cclxuICAgICAgICAgICAgfHwgKChfYiA9IHRoaXMuY29udGVudERPTSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNvbnRhaW5zKHRhcmdldCkpXHJcbiAgICAgICAgICAgIHx8ICFkcmFnSGFuZGxlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IHggPSAwO1xyXG4gICAgICAgIGxldCB5ID0gMDtcclxuICAgICAgICAvLyBjYWxjdWxhdGUgb2Zmc2V0IGZvciBkcmFnIGVsZW1lbnQgaWYgd2UgdXNlIGEgZGlmZmVyZW50IGRyYWcgaGFuZGxlIGVsZW1lbnRcclxuICAgICAgICBpZiAodGhpcy5kb20gIT09IGRyYWdIYW5kbGUpIHtcclxuICAgICAgICAgICAgY29uc3QgZG9tQm94ID0gdGhpcy5kb20uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGhhbmRsZUJveCA9IGRyYWdIYW5kbGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgICAgICAgIC8vIEluIFJlYWN0LCB3ZSBoYXZlIHRvIGdvIHRocm91Z2ggbmF0aXZlRXZlbnQgdG8gcmVhY2ggb2Zmc2V0WC9vZmZzZXRZLlxyXG4gICAgICAgICAgICBjb25zdCBvZmZzZXRYID0gKF9jID0gZXZlbnQub2Zmc2V0WCkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogKF9kID0gZXZlbnQubmF0aXZlRXZlbnQpID09PSBudWxsIHx8IF9kID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZC5vZmZzZXRYO1xyXG4gICAgICAgICAgICBjb25zdCBvZmZzZXRZID0gKF9lID0gZXZlbnQub2Zmc2V0WSkgIT09IG51bGwgJiYgX2UgIT09IHZvaWQgMCA/IF9lIDogKF9mID0gZXZlbnQubmF0aXZlRXZlbnQpID09PSBudWxsIHx8IF9mID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZi5vZmZzZXRZO1xyXG4gICAgICAgICAgICB4ID0gaGFuZGxlQm94LnggLSBkb21Cb3gueCArIG9mZnNldFg7XHJcbiAgICAgICAgICAgIHkgPSBoYW5kbGVCb3gueSAtIGRvbUJveC55ICsgb2Zmc2V0WTtcclxuICAgICAgICB9XHJcbiAgICAgICAgKF9nID0gZXZlbnQuZGF0YVRyYW5zZmVyKSA9PT0gbnVsbCB8fCBfZyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2cuc2V0RHJhZ0ltYWdlKHRoaXMuZG9tLCB4LCB5KTtcclxuICAgICAgICAvLyB3ZSBuZWVkIHRvIHRlbGwgUHJvc2VNaXJyb3IgdGhhdCB3ZSB3YW50IHRvIG1vdmUgdGhlIHdob2xlIG5vZGVcclxuICAgICAgICAvLyBzbyB3ZSBjcmVhdGUgYSBOb2RlU2VsZWN0aW9uXHJcbiAgICAgICAgY29uc3Qgc2VsZWN0aW9uID0gTm9kZVNlbGVjdGlvbi5jcmVhdGUodmlldy5zdGF0ZS5kb2MsIHRoaXMuZ2V0UG9zKCkpO1xyXG4gICAgICAgIGNvbnN0IHRyYW5zYWN0aW9uID0gdmlldy5zdGF0ZS50ci5zZXRTZWxlY3Rpb24oc2VsZWN0aW9uKTtcclxuICAgICAgICB2aWV3LmRpc3BhdGNoKHRyYW5zYWN0aW9uKTtcclxuICAgIH1cclxuICAgIHN0b3BFdmVudChldmVudCkge1xyXG4gICAgICAgIHZhciBfYTtcclxuICAgICAgICBpZiAoIXRoaXMuZG9tKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLm9wdGlvbnMuc3RvcEV2ZW50ID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMuc3RvcEV2ZW50KHsgZXZlbnQgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHRhcmdldCA9IGV2ZW50LnRhcmdldDtcclxuICAgICAgICBjb25zdCBpc0luRWxlbWVudCA9IHRoaXMuZG9tLmNvbnRhaW5zKHRhcmdldCkgJiYgISgoX2EgPSB0aGlzLmNvbnRlbnRET00pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jb250YWlucyh0YXJnZXQpKTtcclxuICAgICAgICAvLyBhbnkgZXZlbnQgZnJvbSBjaGlsZCBub2RlcyBzaG91bGQgYmUgaGFuZGxlZCBieSBQcm9zZU1pcnJvclxyXG4gICAgICAgIGlmICghaXNJbkVsZW1lbnQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBpc0Ryb3BFdmVudCA9IGV2ZW50LnR5cGUgPT09ICdkcm9wJztcclxuICAgICAgICBjb25zdCBpc0lucHV0ID0gWydJTlBVVCcsICdCVVRUT04nLCAnU0VMRUNUJywgJ1RFWFRBUkVBJ10uaW5jbHVkZXModGFyZ2V0LnRhZ05hbWUpXHJcbiAgICAgICAgICAgIHx8IHRhcmdldC5pc0NvbnRlbnRFZGl0YWJsZTtcclxuICAgICAgICAvLyBhbnkgaW5wdXQgZXZlbnQgd2l0aGluIG5vZGUgdmlld3Mgc2hvdWxkIGJlIGlnbm9yZWQgYnkgUHJvc2VNaXJyb3JcclxuICAgICAgICBpZiAoaXNJbnB1dCAmJiAhaXNEcm9wRXZlbnQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHsgaXNFZGl0YWJsZSB9ID0gdGhpcy5lZGl0b3I7XHJcbiAgICAgICAgY29uc3QgeyBpc0RyYWdnaW5nIH0gPSB0aGlzO1xyXG4gICAgICAgIGNvbnN0IGlzRHJhZ2dhYmxlID0gISF0aGlzLm5vZGUudHlwZS5zcGVjLmRyYWdnYWJsZTtcclxuICAgICAgICBjb25zdCBpc1NlbGVjdGFibGUgPSBOb2RlU2VsZWN0aW9uLmlzU2VsZWN0YWJsZSh0aGlzLm5vZGUpO1xyXG4gICAgICAgIGNvbnN0IGlzQ29weUV2ZW50ID0gZXZlbnQudHlwZSA9PT0gJ2NvcHknO1xyXG4gICAgICAgIGNvbnN0IGlzUGFzdGVFdmVudCA9IGV2ZW50LnR5cGUgPT09ICdwYXN0ZSc7XHJcbiAgICAgICAgY29uc3QgaXNDdXRFdmVudCA9IGV2ZW50LnR5cGUgPT09ICdjdXQnO1xyXG4gICAgICAgIGNvbnN0IGlzQ2xpY2tFdmVudCA9IGV2ZW50LnR5cGUgPT09ICdtb3VzZWRvd24nO1xyXG4gICAgICAgIGNvbnN0IGlzRHJhZ0V2ZW50ID0gZXZlbnQudHlwZS5zdGFydHNXaXRoKCdkcmFnJyk7XHJcbiAgICAgICAgLy8gUHJvc2VNaXJyb3IgdHJpZXMgdG8gZHJhZyBzZWxlY3RhYmxlIG5vZGVzXHJcbiAgICAgICAgLy8gZXZlbiBpZiBgZHJhZ2dhYmxlYCBpcyBzZXQgdG8gYGZhbHNlYFxyXG4gICAgICAgIC8vIHRoaXMgZml4IHByZXZlbnRzIHRoYXRcclxuICAgICAgICBpZiAoIWlzRHJhZ2dhYmxlICYmIGlzU2VsZWN0YWJsZSAmJiBpc0RyYWdFdmVudCkge1xyXG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaXNEcmFnZ2FibGUgJiYgaXNEcmFnRXZlbnQgJiYgIWlzRHJhZ2dpbmcpIHtcclxuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyB3ZSBoYXZlIHRvIHN0b3JlIHRoYXQgZHJhZ2dpbmcgc3RhcnRlZFxyXG4gICAgICAgIGlmIChpc0RyYWdnYWJsZSAmJiBpc0VkaXRhYmxlICYmICFpc0RyYWdnaW5nICYmIGlzQ2xpY2tFdmVudCkge1xyXG4gICAgICAgICAgICBjb25zdCBkcmFnSGFuZGxlID0gdGFyZ2V0LmNsb3Nlc3QoJ1tkYXRhLWRyYWctaGFuZGxlXScpO1xyXG4gICAgICAgICAgICBjb25zdCBpc1ZhbGlkRHJhZ0hhbmRsZSA9IGRyYWdIYW5kbGVcclxuICAgICAgICAgICAgICAgICYmICh0aGlzLmRvbSA9PT0gZHJhZ0hhbmRsZSB8fCAodGhpcy5kb20uY29udGFpbnMoZHJhZ0hhbmRsZSkpKTtcclxuICAgICAgICAgICAgaWYgKGlzVmFsaWREcmFnSGFuZGxlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlzRHJhZ2dpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignZHJhZ2VuZCcsICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmlzRHJhZ2dpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH0sIHsgb25jZTogdHJ1ZSB9KTtcclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0RyYWdnaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9LCB7IG9uY2U6IHRydWUgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gdGhlc2UgZXZlbnRzIGFyZSBoYW5kbGVkIGJ5IHByb3NlbWlycm9yXHJcbiAgICAgICAgaWYgKGlzRHJhZ2dpbmdcclxuICAgICAgICAgICAgfHwgaXNEcm9wRXZlbnRcclxuICAgICAgICAgICAgfHwgaXNDb3B5RXZlbnRcclxuICAgICAgICAgICAgfHwgaXNQYXN0ZUV2ZW50XHJcbiAgICAgICAgICAgIHx8IGlzQ3V0RXZlbnRcclxuICAgICAgICAgICAgfHwgKGlzQ2xpY2tFdmVudCAmJiBpc1NlbGVjdGFibGUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICBpZ25vcmVNdXRhdGlvbihtdXRhdGlvbikge1xyXG4gICAgICAgIGlmICghdGhpcy5kb20gfHwgIXRoaXMuY29udGVudERPTSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLm9wdGlvbnMuaWdub3JlTXV0YXRpb24gPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5pZ25vcmVNdXRhdGlvbih7IG11dGF0aW9uIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBhIGxlYWYvYXRvbSBub2RlIGlzIGxpa2UgYSBibGFjayBib3ggZm9yIFByb3NlTWlycm9yXHJcbiAgICAgICAgLy8gYW5kIHNob3VsZCBiZSBmdWxseSBoYW5kbGVkIGJ5IHRoZSBub2RlIHZpZXdcclxuICAgICAgICBpZiAodGhpcy5ub2RlLmlzTGVhZiB8fCB0aGlzLm5vZGUuaXNBdG9tKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBQcm9zZU1pcnJvciBzaG91bGQgaGFuZGxlIGFueSBzZWxlY3Rpb25zXHJcbiAgICAgICAgaWYgKG11dGF0aW9uLnR5cGUgPT09ICdzZWxlY3Rpb24nKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gdHJ5IHRvIHByZXZlbnQgYSBidWcgb24gaU9TIHRoYXQgd2lsbCBicmVhayBub2RlIHZpZXdzIG9uIGVudGVyXHJcbiAgICAgICAgLy8gdGhpcyBpcyBiZWNhdXNlIFByb3NlTWlycm9yIGNhbuKAmXQgcHJldmVudERpc3BhdGNoIG9uIGVudGVyXHJcbiAgICAgICAgLy8gdGhpcyB3aWxsIGxlYWQgdG8gYSByZS1yZW5kZXIgb2YgdGhlIG5vZGUgdmlldyBvbiBlbnRlclxyXG4gICAgICAgIC8vIHNlZTogaHR0cHM6Ly9naXRodWIuY29tL3VlYmVyZG9zaXMvdGlwdGFwL2lzc3Vlcy8xMjE0XHJcbiAgICAgICAgaWYgKHRoaXMuZG9tLmNvbnRhaW5zKG11dGF0aW9uLnRhcmdldClcclxuICAgICAgICAgICAgJiYgbXV0YXRpb24udHlwZSA9PT0gJ2NoaWxkTGlzdCdcclxuICAgICAgICAgICAgJiYgaXNpT1MoKVxyXG4gICAgICAgICAgICAmJiB0aGlzLmVkaXRvci5pc0ZvY3VzZWQpIHtcclxuICAgICAgICAgICAgY29uc3QgY2hhbmdlZE5vZGVzID0gW1xyXG4gICAgICAgICAgICAgICAgLi4uQXJyYXkuZnJvbShtdXRhdGlvbi5hZGRlZE5vZGVzKSxcclxuICAgICAgICAgICAgICAgIC4uLkFycmF5LmZyb20obXV0YXRpb24ucmVtb3ZlZE5vZGVzKSxcclxuICAgICAgICAgICAgXTtcclxuICAgICAgICAgICAgLy8gd2XigJlsbCBjaGVjayBpZiBldmVyeSBjaGFuZ2VkIG5vZGUgaXMgY29udGVudEVkaXRhYmxlXHJcbiAgICAgICAgICAgIC8vIHRvIG1ha2Ugc3VyZSBpdOKAmXMgcHJvYmFibHkgbXV0YXRlZCBieSBQcm9zZU1pcnJvclxyXG4gICAgICAgICAgICBpZiAoY2hhbmdlZE5vZGVzLmV2ZXJ5KG5vZGUgPT4gbm9kZS5pc0NvbnRlbnRFZGl0YWJsZSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyB3ZSB3aWxsIGFsbG93IG11dGF0aW9uIGNvbnRlbnRET00gd2l0aCBhdHRyaWJ1dGVzXHJcbiAgICAgICAgLy8gc28gd2UgY2FuIGZvciBleGFtcGxlIGFkZGluZyBjbGFzc2VzIHdpdGhpbiBvdXIgbm9kZSB2aWV3XHJcbiAgICAgICAgaWYgKHRoaXMuY29udGVudERPTSA9PT0gbXV0YXRpb24udGFyZ2V0ICYmIG11dGF0aW9uLnR5cGUgPT09ICdhdHRyaWJ1dGVzJykge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gUHJvc2VNaXJyb3Igc2hvdWxkIGhhbmRsZSBhbnkgY2hhbmdlcyB3aXRoaW4gY29udGVudERPTVxyXG4gICAgICAgIGlmICh0aGlzLmNvbnRlbnRET00uY29udGFpbnMobXV0YXRpb24udGFyZ2V0KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgdXBkYXRlQXR0cmlidXRlcyhhdHRyaWJ1dGVzKSB7XHJcbiAgICAgICAgdGhpcy5lZGl0b3IuY29tbWFuZHMuY29tbWFuZCgoeyB0ciB9KSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHBvcyA9IHRoaXMuZ2V0UG9zKCk7XHJcbiAgICAgICAgICAgIHRyLnNldE5vZGVNYXJrdXAocG9zLCB1bmRlZmluZWQsIHtcclxuICAgICAgICAgICAgICAgIC4uLnRoaXMubm9kZS5hdHRycyxcclxuICAgICAgICAgICAgICAgIC4uLmF0dHJpYnV0ZXMsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGRlbGV0ZU5vZGUoKSB7XHJcbiAgICAgICAgY29uc3QgZnJvbSA9IHRoaXMuZ2V0UG9zKCk7XHJcbiAgICAgICAgY29uc3QgdG8gPSBmcm9tICsgdGhpcy5ub2RlLm5vZGVTaXplO1xyXG4gICAgICAgIHRoaXMuZWRpdG9yLmNvbW1hbmRzLmRlbGV0ZVJhbmdlKHsgZnJvbSwgdG8gfSk7XHJcbiAgICB9XHJcbn1cblxuLyoqXHJcbiAqIEJ1aWxkIGFuIHBhc3RlIHJ1bGUgdGhhdCBhZGRzIGEgbWFyayB3aGVuIHRoZVxyXG4gKiBtYXRjaGVkIHRleHQgaXMgcGFzdGVkIGludG8gaXQuXHJcbiAqL1xyXG5mdW5jdGlvbiBtYXJrUGFzdGVSdWxlKGNvbmZpZykge1xyXG4gICAgcmV0dXJuIG5ldyBQYXN0ZVJ1bGUoe1xyXG4gICAgICAgIGZpbmQ6IGNvbmZpZy5maW5kLFxyXG4gICAgICAgIGhhbmRsZXI6ICh7IHN0YXRlLCByYW5nZSwgbWF0Y2ggfSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBhdHRyaWJ1dGVzID0gY2FsbE9yUmV0dXJuKGNvbmZpZy5nZXRBdHRyaWJ1dGVzLCB1bmRlZmluZWQsIG1hdGNoKTtcclxuICAgICAgICAgICAgaWYgKGF0dHJpYnV0ZXMgPT09IGZhbHNlIHx8IGF0dHJpYnV0ZXMgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IHsgdHIgfSA9IHN0YXRlO1xyXG4gICAgICAgICAgICBjb25zdCBjYXB0dXJlR3JvdXAgPSBtYXRjaFttYXRjaC5sZW5ndGggLSAxXTtcclxuICAgICAgICAgICAgY29uc3QgZnVsbE1hdGNoID0gbWF0Y2hbMF07XHJcbiAgICAgICAgICAgIGxldCBtYXJrRW5kID0gcmFuZ2UudG87XHJcbiAgICAgICAgICAgIGlmIChjYXB0dXJlR3JvdXApIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHN0YXJ0U3BhY2VzID0gZnVsbE1hdGNoLnNlYXJjaCgvXFxTLyk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ZXh0U3RhcnQgPSByYW5nZS5mcm9tICsgZnVsbE1hdGNoLmluZGV4T2YoY2FwdHVyZUdyb3VwKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRleHRFbmQgPSB0ZXh0U3RhcnQgKyBjYXB0dXJlR3JvdXAubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZXhjbHVkZWRNYXJrcyA9IGdldE1hcmtzQmV0d2VlbihyYW5nZS5mcm9tLCByYW5nZS50bywgc3RhdGUuZG9jKVxyXG4gICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoaXRlbSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGV4Y2x1ZGVkID0gaXRlbS5tYXJrLnR5cGUuZXhjbHVkZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV4Y2x1ZGVkLmZpbmQodHlwZSA9PiB0eXBlID09PSBjb25maWcudHlwZSAmJiB0eXBlICE9PSBpdGVtLm1hcmsudHlwZSk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoaXRlbSA9PiBpdGVtLnRvID4gdGV4dFN0YXJ0KTtcclxuICAgICAgICAgICAgICAgIGlmIChleGNsdWRlZE1hcmtzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRleHRFbmQgPCByYW5nZS50bykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRyLmRlbGV0ZSh0ZXh0RW5kLCByYW5nZS50byk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodGV4dFN0YXJ0ID4gcmFuZ2UuZnJvbSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRyLmRlbGV0ZShyYW5nZS5mcm9tICsgc3RhcnRTcGFjZXMsIHRleHRTdGFydCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBtYXJrRW5kID0gcmFuZ2UuZnJvbSArIHN0YXJ0U3BhY2VzICsgY2FwdHVyZUdyb3VwLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgIHRyLmFkZE1hcmsocmFuZ2UuZnJvbSArIHN0YXJ0U3BhY2VzLCBtYXJrRW5kLCBjb25maWcudHlwZS5jcmVhdGUoYXR0cmlidXRlcyB8fCB7fSkpO1xyXG4gICAgICAgICAgICAgICAgdHIucmVtb3ZlU3RvcmVkTWFyayhjb25maWcudHlwZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgfSk7XHJcbn1cblxuLy8gc291cmNlOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNjk2OTQ4NlxyXG5mdW5jdGlvbiBlc2NhcGVGb3JSZWdFeChzdHJpbmcpIHtcclxuICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvWy0vXFxcXF4kKis/LigpfFtcXF17fV0vZywgJ1xcXFwkJicpO1xyXG59XG5cbi8qKlxyXG4gKiBCdWlsZCBhbiBwYXN0ZSBydWxlIHRoYXQgYWRkcyBhIG5vZGUgd2hlbiB0aGVcclxuICogbWF0Y2hlZCB0ZXh0IGlzIHBhc3RlZCBpbnRvIGl0LlxyXG4gKi9cclxuZnVuY3Rpb24gbm9kZVBhc3RlUnVsZShjb25maWcpIHtcclxuICAgIHJldHVybiBuZXcgUGFzdGVSdWxlKHtcclxuICAgICAgICBmaW5kOiBjb25maWcuZmluZCxcclxuICAgICAgICBoYW5kbGVyKHsgbWF0Y2gsIGNoYWluLCByYW5nZSB9KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBjYWxsT3JSZXR1cm4oY29uZmlnLmdldEF0dHJpYnV0ZXMsIHVuZGVmaW5lZCwgbWF0Y2gpO1xyXG4gICAgICAgICAgICBpZiAoYXR0cmlidXRlcyA9PT0gZmFsc2UgfHwgYXR0cmlidXRlcyA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKG1hdGNoLmlucHV0KSB7XHJcbiAgICAgICAgICAgICAgICBjaGFpbigpXHJcbiAgICAgICAgICAgICAgICAgICAgLmRlbGV0ZVJhbmdlKHJhbmdlKVxyXG4gICAgICAgICAgICAgICAgICAgIC5pbnNlcnRDb250ZW50KHtcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBjb25maWcudHlwZS5uYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIGF0dHJzOiBhdHRyaWJ1dGVzLFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgfSk7XHJcbn1cblxuLyoqXHJcbiAqIEJ1aWxkIGFuIHBhc3RlIHJ1bGUgdGhhdCByZXBsYWNlcyB0ZXh0IHdoZW4gdGhlXHJcbiAqIG1hdGNoZWQgdGV4dCBpcyBwYXN0ZWQgaW50byBpdC5cclxuICovXHJcbmZ1bmN0aW9uIHRleHRQYXN0ZVJ1bGUoY29uZmlnKSB7XHJcbiAgICByZXR1cm4gbmV3IFBhc3RlUnVsZSh7XHJcbiAgICAgICAgZmluZDogY29uZmlnLmZpbmQsXHJcbiAgICAgICAgaGFuZGxlcjogKHsgc3RhdGUsIHJhbmdlLCBtYXRjaCB9KSA9PiB7XHJcbiAgICAgICAgICAgIGxldCBpbnNlcnQgPSBjb25maWcucmVwbGFjZTtcclxuICAgICAgICAgICAgbGV0IHN0YXJ0ID0gcmFuZ2UuZnJvbTtcclxuICAgICAgICAgICAgY29uc3QgZW5kID0gcmFuZ2UudG87XHJcbiAgICAgICAgICAgIGlmIChtYXRjaFsxXSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgb2Zmc2V0ID0gbWF0Y2hbMF0ubGFzdEluZGV4T2YobWF0Y2hbMV0pO1xyXG4gICAgICAgICAgICAgICAgaW5zZXJ0ICs9IG1hdGNoWzBdLnNsaWNlKG9mZnNldCArIG1hdGNoWzFdLmxlbmd0aCk7XHJcbiAgICAgICAgICAgICAgICBzdGFydCArPSBvZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXRPZmYgPSBzdGFydCAtIGVuZDtcclxuICAgICAgICAgICAgICAgIGlmIChjdXRPZmYgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5zZXJ0ID0gbWF0Y2hbMF0uc2xpY2Uob2Zmc2V0IC0gY3V0T2ZmLCBvZmZzZXQpICsgaW5zZXJ0O1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0ID0gZW5kO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHN0YXRlLnRyLmluc2VydFRleHQoaW5zZXJ0LCBzdGFydCwgZW5kKTtcclxuICAgICAgICB9LFxyXG4gICAgfSk7XHJcbn1cblxuY2xhc3MgVHJhY2tlciB7XHJcbiAgICBjb25zdHJ1Y3Rvcih0cmFuc2FjdGlvbikge1xyXG4gICAgICAgIHRoaXMudHJhbnNhY3Rpb24gPSB0cmFuc2FjdGlvbjtcclxuICAgICAgICB0aGlzLmN1cnJlbnRTdGVwID0gdGhpcy50cmFuc2FjdGlvbi5zdGVwcy5sZW5ndGg7XHJcbiAgICB9XHJcbiAgICBtYXAocG9zaXRpb24pIHtcclxuICAgICAgICBsZXQgZGVsZXRlZCA9IGZhbHNlO1xyXG4gICAgICAgIGNvbnN0IG1hcHBlZFBvc2l0aW9uID0gdGhpcy50cmFuc2FjdGlvbi5zdGVwc1xyXG4gICAgICAgICAgICAuc2xpY2UodGhpcy5jdXJyZW50U3RlcClcclxuICAgICAgICAgICAgLnJlZHVjZSgobmV3UG9zaXRpb24sIHN0ZXApID0+IHtcclxuICAgICAgICAgICAgY29uc3QgbWFwUmVzdWx0ID0gc3RlcFxyXG4gICAgICAgICAgICAgICAgLmdldE1hcCgpXHJcbiAgICAgICAgICAgICAgICAubWFwUmVzdWx0KG5ld1Bvc2l0aW9uKTtcclxuICAgICAgICAgICAgaWYgKG1hcFJlc3VsdC5kZWxldGVkKSB7XHJcbiAgICAgICAgICAgICAgICBkZWxldGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gbWFwUmVzdWx0LnBvcztcclxuICAgICAgICB9LCBwb3NpdGlvbik7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgcG9zaXRpb246IG1hcHBlZFBvc2l0aW9uLFxyXG4gICAgICAgICAgICBkZWxldGVkLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn1cblxuZXhwb3J0IHsgQ29tbWFuZE1hbmFnZXIsIEVkaXRvciwgRXh0ZW5zaW9uLCBJbnB1dFJ1bGUsIE1hcmssIE5vZGUsIE5vZGVWaWV3LCBQYXN0ZVJ1bGUsIFRyYWNrZXIsIGNhbGxPclJldHVybiwgY29tYmluZVRyYW5zYWN0aW9uU3RlcHMsIGRlZmF1bHRCbG9ja0F0LCBlc2NhcGVGb3JSZWdFeCwgZXh0ZW5zaW9ucywgZmluZENoaWxkcmVuLCBmaW5kQ2hpbGRyZW5JblJhbmdlLCBmaW5kUGFyZW50Tm9kZSwgZmluZFBhcmVudE5vZGVDbG9zZXN0VG9Qb3MsIGdlbmVyYXRlSFRNTCwgZ2VuZXJhdGVKU09OLCBnZW5lcmF0ZVRleHQsIGdldEF0dHJpYnV0ZXMsIGdldENoYW5nZWRSYW5nZXMsIGdldERlYnVnSlNPTiwgZ2V0RXh0ZW5zaW9uRmllbGQsIGdldEhUTUxGcm9tRnJhZ21lbnQsIGdldE1hcmtBdHRyaWJ1dGVzLCBnZXRNYXJrUmFuZ2UsIGdldE1hcmtUeXBlLCBnZXRNYXJrc0JldHdlZW4sIGdldE5vZGVBdHRyaWJ1dGVzLCBnZXROb2RlVHlwZSwgZ2V0U2NoZW1hLCBnZXRUZXh0LCBnZXRUZXh0QmV0d2VlbiwgZ2V0VGV4dENvbnRlbnRGcm9tTm9kZXMsIGdldFRleHRTZXJpYWxpemVyc0Zyb21TY2hlbWEsIGlucHV0UnVsZXNQbHVnaW4sIGlzQWN0aXZlLCBpc0xpc3QsIGlzTWFya0FjdGl2ZSwgaXNOb2RlQWN0aXZlLCBpc05vZGVFbXB0eSwgaXNOb2RlU2VsZWN0aW9uLCBpc1RleHRTZWxlY3Rpb24sIG1hcmtJbnB1dFJ1bGUsIG1hcmtQYXN0ZVJ1bGUsIG1lcmdlQXR0cmlidXRlcywgbm9kZUlucHV0UnVsZSwgbm9kZVBhc3RlUnVsZSwgcGFzdGVSdWxlc1BsdWdpbiwgcG9zVG9ET01SZWN0LCB0ZXh0SW5wdXRSdWxlLCB0ZXh0UGFzdGVSdWxlLCB0ZXh0YmxvY2tUeXBlSW5wdXRSdWxlLCB3cmFwcGluZ0lucHV0UnVsZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGlwdGFwLWNvcmUuZXNtLmpzLm1hcFxuIl0sIm5hbWVzIjpbImNyZWF0ZUNoYWluYWJsZVN0YXRlIiwiY29uZmlnIiwic3RhdGUiLCJ0cmFuc2FjdGlvbiIsInNlbGVjdGlvbiIsImRvYyIsInN0b3JlZE1hcmtzIiwiYXBwbHkiLCJiaW5kIiwiYXBwbHlUcmFuc2FjdGlvbiIsImZpbHRlclRyYW5zYWN0aW9uIiwicGx1Z2lucyIsInNjaGVtYSIsInJlY29uZmlndXJlIiwidG9KU09OIiwidHIiLCJDb21tYW5kTWFuYWdlciIsImNvbnN0cnVjdG9yIiwicHJvcHMiLCJ0aGlzIiwiZWRpdG9yIiwicmF3Q29tbWFuZHMiLCJleHRlbnNpb25NYW5hZ2VyIiwiY29tbWFuZHMiLCJjdXN0b21TdGF0ZSIsImhhc0N1c3RvbVN0YXRlIiwidmlldyIsImJ1aWxkUHJvcHMiLCJPYmplY3QiLCJmcm9tRW50cmllcyIsImVudHJpZXMiLCJtYXAiLCJuYW1lIiwiY29tbWFuZCIsImFyZ3MiLCJjYWxsYmFjayIsImdldE1ldGEiLCJkaXNwYXRjaCIsImNoYWluIiwiY3JlYXRlQ2hhaW4iLCJjYW4iLCJjcmVhdGVDYW4iLCJzdGFydFRyIiwic2hvdWxkRGlzcGF0Y2giLCJjYWxsYmFja3MiLCJoYXNTdGFydFRyYW5zYWN0aW9uIiwicHVzaCIsInJ1biIsImV2ZXJ5IiwidW5kZWZpbmVkIiwic2V0U3RvcmVkTWFya3MiLCJnZXRFeHRlbnNpb25GaWVsZCIsImV4dGVuc2lvbiIsImZpZWxkIiwiY29udGV4dCIsInBhcmVudCIsInNwbGl0RXh0ZW5zaW9ucyIsImV4dGVuc2lvbnMiLCJiYXNlRXh0ZW5zaW9ucyIsImZpbHRlciIsInR5cGUiLCJub2RlRXh0ZW5zaW9ucyIsIm1hcmtFeHRlbnNpb25zIiwiZ2V0QXR0cmlidXRlc0Zyb21FeHRlbnNpb25zIiwiZXh0ZW5zaW9uQXR0cmlidXRlcyIsIm5vZGVBbmRNYXJrRXh0ZW5zaW9ucyIsImRlZmF1bHRBdHRyaWJ1dGUiLCJkZWZhdWx0IiwicmVuZGVyZWQiLCJyZW5kZXJIVE1MIiwicGFyc2VIVE1MIiwia2VlcE9uU3BsaXQiLCJpc1JlcXVpcmVkIiwiZm9yRWFjaCIsImFkZEdsb2JhbEF0dHJpYnV0ZXMiLCJvcHRpb25zIiwic3RvcmFnZSIsImdsb2JhbEF0dHJpYnV0ZSIsInR5cGVzIiwiYXR0cmlidXRlcyIsImF0dHJpYnV0ZSIsImFkZEF0dHJpYnV0ZXMiLCJtZXJnZWRBdHRyIiwiZ2V0Tm9kZVR5cGUiLCJuYW1lT3JUeXBlIiwibm9kZXMiLCJFcnJvciIsIm1lcmdlQXR0cmlidXRlcyIsIm9iamVjdHMiLCJpdGVtIiwicmVkdWNlIiwiaXRlbXMiLCJtZXJnZWRBdHRyaWJ1dGVzIiwia2V5IiwidmFsdWUiLCJqb2luIiwiZ2V0UmVuZGVyZWRBdHRyaWJ1dGVzIiwibm9kZU9yTWFyayIsImF0dHJzIiwiaXNGdW5jdGlvbiIsImNhbGxPclJldHVybiIsImluamVjdEV4dGVuc2lvbkF0dHJpYnV0ZXNUb1BhcnNlUnVsZSIsInBhcnNlUnVsZSIsInN0eWxlIiwiZ2V0QXR0cnMiLCJub2RlIiwib2xkQXR0cmlidXRlcyIsIm5ld0F0dHJpYnV0ZXMiLCJtYXRjaCIsIk51bWJlciIsImZyb21TdHJpbmciLCJnZXRBdHRyaWJ1dGUiLCJjbGVhblVwU2NoZW1hSXRlbSIsImRhdGEiLCJrZXlzIiwibGVuZ3RoIiwiaXNFbXB0eU9iamVjdCIsImdldFNjaGVtYVR5cGVCeU5hbWUiLCJtYXJrcyIsImlzRXh0ZW5zaW9uUnVsZXNFbmFibGVkIiwiZW5hYmxlZCIsIkFycmF5IiwiaXNBcnJheSIsInNvbWUiLCJlbmFibGVkRXh0ZW5zaW9uIiwiaXNSZWdFeHAiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImNhbGwiLCJJbnB1dFJ1bGUiLCJmaW5kIiwiaGFuZGxlciIsInJ1biQxIiwiX2EiLCJmcm9tIiwidG8iLCJ0ZXh0IiwicnVsZXMiLCJwbHVnaW4iLCJjb21wb3NpbmciLCIkZnJvbSIsInJlc29sdmUiLCJzcGVjIiwiY29kZSIsIm5vZGVCZWZvcmUiLCJub2RlQWZ0ZXIiLCJtYXJrIiwibWF0Y2hlZCIsInRleHRCZWZvcmUiLCJtYXhNYXRjaCIsIm5vZGVzQmV0d2VlbiIsIk1hdGgiLCJtYXgiLCJwYXJlbnRPZmZzZXQiLCJwb3MiLCJpbmRleCIsIl9iIiwiX2MiLCJ0b1RleHQiLCJnZXRUZXh0Q29udGVudEZyb21Ob2RlcyIsInJ1bGUiLCJleGVjIiwiaW5wdXRSdWxlTWF0Y2giLCJyZXN1bHQiLCJpbnB1dCIsInJlcGxhY2VXaXRoIiwiaW5jbHVkZXMiLCJjb25zb2xlIiwid2FybiIsImlucHV0UnVsZU1hdGNoZXJIYW5kbGVyIiwicmFuZ2UiLCJzdGVwcyIsInNldE1ldGEiLCJ0cmFuc2Zvcm0iLCJpbnB1dFJ1bGVzUGx1Z2luIiwiaW5pdCIsInByZXYiLCJzZWxlY3Rpb25TZXQiLCJkb2NDaGFuZ2VkIiwiaGFuZGxlVGV4dElucHV0IiwiaGFuZGxlRE9NRXZlbnRzIiwiY29tcG9zaXRpb25lbmQiLCJzZXRUaW1lb3V0IiwiJGN1cnNvciIsImhhbmRsZUtleURvd24iLCJldmVudCIsImlzSW5wdXRSdWxlcyIsIlBhc3RlUnVsZSIsInBhc3RlUnVsZXNQbHVnaW4iLCJkcmFnU291cmNlRWxlbWVudCIsImlzUGFzdGVkRnJvbVByb3NlTWlycm9yIiwiaXNEcm9wcGVkRnJvbVByb3NlTWlycm9yIiwiaGFuZGxlRHJhZ3N0YXJ0IiwiZG9tIiwicGFyZW50RWxlbWVudCIsImNvbnRhaW5zIiwidGFyZ2V0Iiwid2luZG93IiwiYWRkRXZlbnRMaXN0ZW5lciIsImRlc3Ryb3kiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZHJvcCIsInBhc3RlIiwiaHRtbCIsImNsaXBib2FyZERhdGEiLCJnZXREYXRhIiwiYXBwZW5kVHJhbnNhY3Rpb24iLCJ0cmFuc2FjdGlvbnMiLCJvbGRTdGF0ZSIsImlzUGFzdGUiLCJpc0Ryb3AiLCJjb250ZW50IiwiZmluZERpZmZTdGFydCIsImZpbmREaWZmRW5kIiwiYiIsImNoYWluYWJsZVN0YXRlIiwiaGFuZGxlcnMiLCJpc1RleHRibG9jayIsInJlc29sdmVkRnJvbSIsInJlc29sdmVkVG8iLCJtaW4iLCJzaXplIiwibWF0Y2hBbGwiLCJtYXRjaGVzIiwicGFzdGVSdWxlTWF0Y2giLCJwYXN0ZVJ1bGVNYXRjaGVySGFuZGxlciIsInRleHRCZXR3ZWVuIiwic3RhcnQiLCJlbmQiLCJtYXBwaW5nIiwiRXh0ZW5zaW9uTWFuYWdlciIsInNwbGl0dGFibGVNYXJrcyIsImFsbEF0dHJpYnV0ZXMiLCJ0b3BOb2RlIiwiZmllbGRzIiwiZSIsImV4dGVuZE5vZGVTY2hlbWEiLCJncm91cCIsImlubGluZSIsImF0b20iLCJzZWxlY3RhYmxlIiwiZHJhZ2dhYmxlIiwiZGVmaW5pbmciLCJpc29sYXRpbmciLCJleHRlbnNpb25BdHRyaWJ1dGUiLCJwYXJzZURPTSIsInRvRE9NIiwiSFRNTEF0dHJpYnV0ZXMiLCJyZW5kZXJUZXh0IiwiZXh0ZW5kTWFya1NjaGVtYSIsImluY2x1c2l2ZSIsImV4Y2x1ZGVzIiwic3Bhbm5pbmciLCJnZXRTY2hlbWFCeVJlc29sdmVkRXh0ZW5zaW9ucyIsImV4dGVuc2lvblN0b3JhZ2UiLCJvbkJlZm9yZUNyZWF0ZSIsIm9uIiwib25DcmVhdGUiLCJvblVwZGF0ZSIsIm9uU2VsZWN0aW9uVXBkYXRlIiwib25UcmFuc2FjdGlvbiIsIm9uRm9jdXMiLCJvbkJsdXIiLCJvbkRlc3Ryb3kiLCJzdGF0aWMiLCJyZXNvbHZlZEV4dGVuc2lvbnMiLCJzb3J0IiwiZmxhdHRlbiIsImR1cGxpY2F0ZWROYW1lcyIsImZpbHRlcmVkIiwiZWwiLCJpbmRleE9mIiwiU2V0IiwiZmluZER1cGxpY2F0ZXMiLCJhZGRFeHRlbnNpb25zIiwiZmxhdCIsImEiLCJwcmlvcml0eUEiLCJwcmlvcml0eUIiLCJhZGRDb21tYW5kcyIsInJldmVyc2UiLCJpbnB1dFJ1bGVzIiwicGFzdGVSdWxlcyIsImFsbFBsdWdpbnMiLCJhZGRLZXlib2FyZFNob3J0Y3V0cyIsImJpbmRpbmdzIiwic2hvcnRjdXQiLCJtZXRob2QiLCJrZXlNYXBQbHVnaW4iLCJhZGRJbnB1dFJ1bGVzIiwiZW5hYmxlSW5wdXRSdWxlcyIsImFkZFBhc3RlUnVsZXMiLCJlbmFibGVQYXN0ZVJ1bGVzIiwiYWRkUHJvc2VNaXJyb3JQbHVnaW5zIiwicHJvc2VNaXJyb3JQbHVnaW5zIiwibm9kZVZpZXdzIiwiYWRkTm9kZVZpZXciLCJnZXRQb3MiLCJkZWNvcmF0aW9ucyIsImlzUGxhaW5PYmplY3QiLCJzbGljZSIsImdldFR5cGUiLCJnZXRQcm90b3R5cGVPZiIsIm1lcmdlRGVlcCIsInNvdXJjZSIsIm91dHB1dCIsImFzc2lnbiIsIkV4dGVuc2lvbiIsImNoaWxkIiwiZGVmYXVsdE9wdGlvbnMiLCJhZGRPcHRpb25zIiwiY29uZmlndXJlIiwiZXh0ZW5kIiwiZXh0ZW5kZWRDb25maWciLCJnZXRUZXh0QmV0d2VlbiIsInN0YXJ0Tm9kZSIsImJsb2NrU2VwYXJhdG9yIiwidGV4dFNlcmlhbGl6ZXJzIiwic2VwYXJhdGVkIiwidGV4dFNlcmlhbGl6ZXIiLCJpc0Jsb2NrIiwiaXNUZXh0IiwiZ2V0VGV4dFNlcmlhbGl6ZXJzRnJvbVNjaGVtYSIsIkNsaXBib2FyZFRleHRTZXJpYWxpemVyIiwiY3JlYXRlIiwiY2xpcGJvYXJkVGV4dFNlcmlhbGl6ZXIiLCJyYW5nZXMiLCIkdG8iLCJvYmplY3RJbmNsdWRlcyIsIm9iamVjdDEiLCJvYmplY3QyIiwic3RyaWN0IiwidGVzdCIsImZpbmRNYXJrSW5TZXQiLCJpc01hcmtJblNldCIsImdldE1hcmtSYW5nZSIsIiRwb3MiLCJjaGlsZEFmdGVyIiwib2Zmc2V0IiwiY2hpbGRCZWZvcmUiLCJzdGFydEluZGV4Iiwic3RhcnRQb3MiLCJlbmRJbmRleCIsImVuZFBvcyIsIm5vZGVTaXplIiwiaXNJblNldCIsImNoaWxkQ291bnQiLCJnZXRNYXJrVHlwZSIsIm1pbk1heCIsInJlc29sdmVGb2N1c1Bvc2l0aW9uIiwicG9zaXRpb24iLCJzZWxlY3Rpb25BdFN0YXJ0Iiwic2VsZWN0aW9uQXRFbmQiLCJtaW5Qb3MiLCJtYXhQb3MiLCJpc2lPUyIsIm5hdmlnYXRvciIsInBsYXRmb3JtIiwidXNlckFnZW50IiwiZG9jdW1lbnQiLCJlbGVtZW50RnJvbVN0cmluZyIsIndyYXBwZWRWYWx1ZSIsIkRPTVBhcnNlciIsInBhcnNlRnJvbVN0cmluZyIsImJvZHkiLCJjcmVhdGVOb2RlRnJvbUNvbnRlbnQiLCJwYXJzZU9wdGlvbnMiLCJub2RlRnJvbUpTT04iLCJlcnJvciIsInBhcnNlciIsInBhcnNlU2xpY2UiLCJwYXJzZSIsImlzTWFjT1MiLCJpc05vZGVBY3RpdmUiLCJ0eXBlT3JOYW1lIiwiZW1wdHkiLCJub2RlUmFuZ2VzIiwicmVsYXRpdmVGcm9tIiwicmVsYXRpdmVUbyIsInNlbGVjdGlvblJhbmdlIiwibWF0Y2hlZE5vZGVSYW5nZXMiLCJub2RlUmFuZ2UiLCJzdW0iLCJnZXRTY2hlbWFUeXBlTmFtZUJ5TmFtZSIsImRlbGV0ZVByb3BzIiwib2JqIiwicHJvcE9yUHJvcHMiLCJuZXdPYmoiLCJwcm9wIiwiY3JlYXRlRG9jdW1lbnQiLCJnZXRNYXJrQXR0cmlidXRlcyIsIiRoZWFkIiwibWFya0l0ZW0iLCJnZXRTcGxpdHRlZEF0dHJpYnV0ZXMiLCJ0eXBlTmFtZSIsImVuc3VyZU1hcmtzIiwiZmlsdGVyZWRNYXJrcyIsImZpbmRQYXJlbnROb2RlIiwicHJlZGljYXRlIiwiaSIsImRlcHRoIiwiYmVmb3JlIiwiZmluZFBhcmVudE5vZGVDbG9zZXN0VG9Qb3MiLCJpc0xpc3QiLCJzcGxpdCIsImpvaW5MaXN0QmFja3dhcmRzIiwibGlzdFR5cGUiLCJsaXN0Iiwibm9kZUF0Iiwiam9pbkxpc3RGb3J3YXJkcyIsImFmdGVyIiwiaXNNYXJrQWN0aXZlIiwibWFya1JhbmdlcyIsIm1hdGNoZWRSYW5nZSIsIm1hcmtSYW5nZSIsImV4Y2x1ZGVkUmFuZ2UiLCJmcmVlemUiLCJfX3Byb3RvX18iLCJibHVyIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiaXNEZXN0cm95ZWQiLCJnZXRTZWxlY3Rpb24iLCJyZW1vdmVBbGxSYW5nZXMiLCJjbGVhckNvbnRlbnQiLCJlbWl0VXBkYXRlIiwic2V0Q29udGVudCIsImNsZWFyTm9kZXMiLCIkbWFwcGVkRnJvbSIsIiRtYXBwZWRUbyIsImJsb2NrUmFuZ2UiLCJ0YXJnZXRMaWZ0RGVwdGgiLCJkZWZhdWx0VHlwZSIsImNvbnRlbnRNYXRjaEF0Iiwic2V0Tm9kZU1hcmt1cCIsImxpZnQiLCJmbiIsImNyZWF0ZVBhcmFncmFwaE5lYXIiLCJkZWxldGVOb2RlIiwiJGFuY2hvciIsImRlbGV0ZSIsInNjcm9sbEludG9WaWV3IiwiZGVsZXRlUmFuZ2UiLCJkZWxldGVTZWxlY3Rpb24iLCJlbnRlciIsImtleWJvYXJkU2hvcnRjdXQiLCJleGl0Q29kZSIsImV4dGVuZE1hcmtSYW5nZSIsIm5ld1NlbGVjdGlvbiIsInNldFNlbGVjdGlvbiIsImZpcnN0IiwiZm9jdXMiLCJkZWxheWVkRm9jdXMiLCJoYXNGb2N1cyIsInN1YnN0cmluZyIsImlzQ2xhc3MiLCJpc09iamVjdCIsImlzU2FtZVNlbGVjdGlvbiIsImVxIiwiaW5zZXJ0Q29udGVudCIsImluc2VydENvbnRlbnRBdCIsInVwZGF0ZVNlbGVjdGlvbiIsInByZXNlcnZlV2hpdGVzcGFjZSIsImlzT25seVRleHRDb250ZW50IiwiaXNPbmx5QmxvY2tDb250ZW50Iiwic3RhcnRzV2l0aCIsImNoZWNrIiwiaW5zZXJ0VGV4dCIsInN0YXJ0TGVuIiwiYmlhcyIsImxhc3QiLCJzdGVwIiwibWFwcyIsIl9mcm9tIiwiX3RvIiwiX25ld0Zyb20iLCJuZXdUbyIsInNlbGVjdGlvblRvSW5zZXJ0aW9uRW5kIiwiam9pbkJhY2t3YXJkIiwiam9pbkZvcndhcmQiLCJwYXJ0cyIsImFsdCIsImN0cmwiLCJzaGlmdCIsIm1ldGEiLCJtb2QiLCJub3JtYWxpemVLZXlOYW1lIiwiS2V5Ym9hcmRFdmVudCIsImFsdEtleSIsImN0cmxLZXkiLCJtZXRhS2V5Iiwic2hpZnRLZXkiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsImNhcHR1cmVkVHJhbnNhY3Rpb24iLCJjYXB0dXJlVHJhbnNhY3Rpb24iLCJzb21lUHJvcCIsImYiLCJuZXdTdGVwIiwibWF5YmVTdGVwIiwibGlmdEVtcHR5QmxvY2siLCJsaWZ0TGlzdEl0ZW0iLCJuZXdsaW5lSW5Db2RlIiwicmVzZXRBdHRyaWJ1dGVzIiwibm9kZVR5cGUiLCJtYXJrVHlwZSIsInNjaGVtYVR5cGUiLCJhZGRNYXJrIiwic2VsZWN0QWxsIiwic2V0VGV4dFNlbGVjdGlvbiIsInNlbGVjdE5vZGVCYWNrd2FyZCIsInNlbGVjdE5vZGVGb3J3YXJkIiwic2VsZWN0UGFyZW50Tm9kZSIsInNlbGVjdFRleHRibG9ja0VuZCIsInNlbGVjdFRleHRibG9ja1N0YXJ0Iiwic2V0TWFyayIsImFkZFN0b3JlZE1hcmsiLCJ0cmltbWVkRnJvbSIsInRyaW1tZWRUbyIsInNldE5vZGUiLCJ1cGRhdGVkU3RhdGUiLCJzZXROb2RlU2VsZWN0aW9uIiwicmVzb2x2ZWRQb3MiLCJyZXNvbHZlZEVuZCIsInNpbmtMaXN0SXRlbSIsInNwbGl0QmxvY2siLCJrZWVwTWFya3MiLCJhdEVuZCIsImRlZmx0IiwiZWRnZUNvdW50IiwiZWRnZSIsImhhc1JlcXVpcmVkQXR0cnMiLCJkZWZhdWx0QmxvY2tBdCQxIiwiaW5kZXhBZnRlciIsIiRmaXJzdCIsImNhblJlcGxhY2VXaXRoIiwic3BsaXRMaXN0SXRlbSIsInNhbWVQYXJlbnQiLCJncmFuZFBhcmVudCIsIndyYXAiLCJkZXB0aEJlZm9yZSIsImQiLCJjb3B5IiwiZGVwdGhBZnRlciIsIm5ld05leHRUeXBlQXR0cmlidXRlcyIsIm5leHRUeXBlIiwiY29udGVudE1hdGNoIiwiY3JlYXRlQW5kRmlsbCIsImFwcGVuZCIsInJlcGxhY2UiLCJzZWwiLCJuIiwibmV3VHlwZUF0dHJpYnV0ZXMiLCJ0b2dnbGVMaXN0IiwibGlzdFR5cGVPck5hbWUiLCJpdGVtVHlwZU9yTmFtZSIsIml0ZW1UeXBlIiwicGFyZW50TGlzdCIsInZhbGlkQ29udGVudCIsIndyYXBJbkxpc3QiLCJ0b2dnbGVNYXJrIiwiZXh0ZW5kRW1wdHlNYXJrUmFuZ2UiLCJ1bnNldE1hcmsiLCJ0b2dnbGVOb2RlIiwidG9nZ2xlVHlwZU9yTmFtZSIsInRvZ2dsZVR5cGUiLCJ0b2dnbGVXcmFwIiwid3JhcEluIiwidW5kb0lucHV0UnVsZSIsInVuZG9hYmxlIiwiZ2V0U3RhdGUiLCJ0b1VuZG8iLCJqIiwiaW52ZXJ0IiwiZG9jcyIsInVuc2V0QWxsTWFya3MiLCJyZW1vdmVNYXJrIiwicmVtb3ZlU3RvcmVkTWFyayIsInVwZGF0ZUF0dHJpYnV0ZXMiLCJDb21tYW5kcyIsIkVkaXRhYmxlIiwiZWRpdGFibGUiLCJGb2N1c0V2ZW50cyIsImlzRm9jdXNlZCIsIktleW1hcCIsImhhbmRsZUJhY2tzcGFjZSIsImlzQXRTdGFydCIsInRleHRDb250ZW50IiwiaGFuZGxlRGVsZXRlIiwiYmFzZUtleW1hcCIsIkVudGVyIiwiQmFja3NwYWNlIiwiRGVsZXRlIiwicGNLZXltYXAiLCJtYWNLZXltYXAiLCJuZXdTdGF0ZSIsImFsbEZyb20iLCJhbGxFbmQiLCJhbGxXYXNTZWxlY3RlZCIsImlzRW1wdHkiLCJUYWJpbmRleCIsImlzRWRpdGFibGUiLCJ0YWJpbmRleCIsIkVkaXRvciIsImVtaXQiLCJvZmYiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJzdXBlciIsImVsZW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiaW5qZWN0Q1NTIiwiaW5qZWN0Tm9uY2UiLCJhdXRvZm9jdXMiLCJlZGl0b3JQcm9wcyIsImVuYWJsZUNvcmVFeHRlbnNpb25zIiwiaXNDYXB0dXJpbmdUcmFuc2FjdGlvbiIsInNldE9wdGlvbnMiLCJjcmVhdGVFeHRlbnNpb25NYW5hZ2VyIiwiY3JlYXRlQ29tbWFuZE1hbmFnZXIiLCJjcmVhdGVTY2hlbWEiLCJjcmVhdGVWaWV3IiwiY29tbWFuZE1hbmFnZXIiLCJjc3MiLCJub25jZSIsInRpcFRhcFN0eWxlVGFnIiwicXVlcnlTZWxlY3RvciIsInN0eWxlTm9kZSIsInNldEF0dHJpYnV0ZSIsImlubmVySFRNTCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiYXBwZW5kQ2hpbGQiLCJjcmVhdGVTdHlsZVRhZyIsInNldFByb3BzIiwidXBkYXRlU3RhdGUiLCJzZXRFZGl0YWJsZSIsInJlZ2lzdGVyUGx1Z2luIiwiaGFuZGxlUGx1Z2lucyIsInVucmVnaXN0ZXJQbHVnaW4iLCJuYW1lT3JQbHVnaW5LZXkiLCJhbGxFeHRlbnNpb25zIiwidmFsdWVzIiwiZGlzcGF0Y2hUcmFuc2FjdGlvbiIsImNyZWF0ZU5vZGVWaWV3cyIsInNlbGVjdGlvbkhhc0NoYW5nZWQiLCJnZXRBdHRyaWJ1dGVzIiwibm9kZUl0ZW0iLCJnZXROb2RlQXR0cmlidXRlcyIsImlzQWN0aXZlIiwibmFtZU9yQXR0cmlidXRlcyIsImF0dHJpYnV0ZXNPclVuZGVmaW5lZCIsImdldEpTT04iLCJnZXRIVE1MIiwiZnJhZ21lbnQiLCJkb2N1bWVudEZyYWdtZW50Iiwic2VyaWFsaXplRnJhZ21lbnQiLCJjb250YWluZXIiLCJpbXBsZW1lbnRhdGlvbiIsImNyZWF0ZUhUTUxEb2N1bWVudCIsImdldEhUTUxGcm9tRnJhZ21lbnQiLCJnZXRUZXh0IiwiZGVmYXVsdENvbnRlbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiaXNOb2RlRW1wdHkiLCJnZXRDaGFyYWN0ZXJDb3VudCIsImRvY1ZpZXciLCJnZXRNYXJrc0JldHdlZW4iLCJwb3NUb0RPTVJlY3QiLCJjb29yZHNBdFBvcyIsInRvcCIsImJvdHRvbSIsImxlZnQiLCJyaWdodCIsIndpZHRoIiwiaGVpZ2h0IiwieCIsInkiLCJtYXJrSW5wdXRSdWxlIiwiY2FwdHVyZUdyb3VwIiwiZnVsbE1hdGNoIiwibWFya0VuZCIsInN0YXJ0U3BhY2VzIiwic2VhcmNoIiwidGV4dFN0YXJ0IiwidGV4dEVuZCIsImV4Y2x1ZGVkIiwiTWFyayIsIk5vZGUiLCJtYXJrUGFzdGVSdWxlIl0sInNvdXJjZVJvb3QiOiIifQ==