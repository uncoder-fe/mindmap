"use strict";(self.webpackChunkmindmap=self.webpackChunkmindmap||[]).push([[576],{51472:(e,t,n)=>{n.r(t),n.d(t,{default:()=>p});var o=n(87462),r=n(71002),a=n(1413),i=n(44925),s=n(67294),c=n(74768),l=n(43159);const d=function(e){var t=e.overlay,n=e.prefixCls,o=e.id,r=e.overlayInnerStyle;return s.createElement("div",{className:"".concat(n,"-inner"),id:o,role:"tooltip",style:r},"function"==typeof t?t():t)};var u=function(e,t){var n=e.overlayClassName,u=e.trigger,p=void 0===u?["hover"]:u,f=e.mouseEnterDelay,v=void 0===f?0:f,h=e.mouseLeaveDelay,g=void 0===h?.1:h,y=e.overlayStyle,m=e.prefixCls,k=void 0===m?"rc-tooltip":m,E=e.children,N=e.onVisibleChange,C=e.afterVisibleChange,b=e.transitionName,w=e.animation,x=e.motion,T=e.placement,S=void 0===T?"right":T,K=e.align,D=void 0===K?{}:K,P=e.destroyTooltipOnHide,O=void 0!==P&&P,M=e.defaultVisible,Z=e.getTooltipContainer,L=e.overlayInnerStyle,R=(0,i.Z)(e,["overlayClassName","trigger","mouseEnterDelay","mouseLeaveDelay","overlayStyle","prefixCls","children","onVisibleChange","afterVisibleChange","transitionName","animation","motion","placement","align","destroyTooltipOnHide","defaultVisible","getTooltipContainer","overlayInnerStyle"]),A=(0,s.useRef)(null);(0,s.useImperativeHandle)(t,(function(){return A.current}));var I=(0,a.Z)({},R);"visible"in e&&(I.popupVisible=e.visible);var _=!1,H=!1;if("boolean"==typeof O)_=O;else if(O&&"object"===(0,r.Z)(O)){var U=O.keepParent;_=!0===U,H=!1===U}return s.createElement(c.Z,(0,o.Z)({popupClassName:n,prefixCls:k,popup:function(){var t=e.arrowContent,n=void 0===t?null:t,o=e.overlay,r=e.id;return[s.createElement("div",{className:"".concat(k,"-arrow"),key:"arrow"},n),s.createElement(d,{key:"content",prefixCls:k,id:r,overlay:o,overlayInnerStyle:L})]},action:p,builtinPlacements:l.C,popupPlacement:S,ref:A,popupAlign:D,getPopupContainer:Z,onPopupVisibleChange:N,afterPopupVisibleChange:C,popupTransitionName:b,popupAnimation:w,popupMotion:x,defaultPopupVisible:M,destroyPopupOnHide:_,autoDestroy:H,mouseLeaveDelay:g,popupStyle:y,mouseEnterDelay:v},I),E)};const p=(0,s.forwardRef)(u)},43159:(e,t,n)=>{n.d(t,{C:()=>a});var o={adjustX:1,adjustY:1},r=[0,0],a={left:{points:["cr","cl"],overflow:o,offset:[-4,0],targetOffset:r},right:{points:["cl","cr"],overflow:o,offset:[4,0],targetOffset:r},top:{points:["bc","tc"],overflow:o,offset:[0,-4],targetOffset:r},bottom:{points:["tc","bc"],overflow:o,offset:[0,4],targetOffset:r},topLeft:{points:["bl","tl"],overflow:o,offset:[0,-4],targetOffset:r},leftTop:{points:["tr","tl"],overflow:o,offset:[-4,0],targetOffset:r},topRight:{points:["br","tr"],overflow:o,offset:[0,-4],targetOffset:r},rightTop:{points:["tl","tr"],overflow:o,offset:[4,0],targetOffset:r},bottomRight:{points:["tr","br"],overflow:o,offset:[0,4],targetOffset:r},rightBottom:{points:["bl","br"],overflow:o,offset:[4,0],targetOffset:r},bottomLeft:{points:["tl","bl"],overflow:o,offset:[0,4],targetOffset:r},leftBottom:{points:["br","bl"],overflow:o,offset:[-4,0],targetOffset:r}}},24375:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.placements=void 0;var n={adjustX:1,adjustY:1},o=[0,0],r={left:{points:["cr","cl"],overflow:n,offset:[-4,0],targetOffset:o},right:{points:["cl","cr"],overflow:n,offset:[4,0],targetOffset:o},top:{points:["bc","tc"],overflow:n,offset:[0,-4],targetOffset:o},bottom:{points:["tc","bc"],overflow:n,offset:[0,4],targetOffset:o},topLeft:{points:["bl","tl"],overflow:n,offset:[0,-4],targetOffset:o},leftTop:{points:["tr","tl"],overflow:n,offset:[-4,0],targetOffset:o},topRight:{points:["br","tr"],overflow:n,offset:[0,-4],targetOffset:o},rightTop:{points:["tl","tr"],overflow:n,offset:[4,0],targetOffset:o},bottomRight:{points:["tr","br"],overflow:n,offset:[0,4],targetOffset:o},rightBottom:{points:["bl","br"],overflow:n,offset:[4,0],targetOffset:o},bottomLeft:{points:["tl","bl"],overflow:n,offset:[0,4],targetOffset:o},leftBottom:{points:["br","bl"],overflow:n,offset:[-4,0],targetOffset:o}};t.placements=r;var a=r;t.default=a},4258:(e,t,n)=>{n.d(t,{Z:()=>x});var o=n(87462),r=n(4942),a=n(44925),i=n(1413),s=n(15671),c=n(43144),l=n(97326),d=n(79340),u=n(98557),p=n(67294),f=n(94184),v=n.n(f),h=n(64217),g=n(27822),y=function(e){for(var t=e.prefixCls,n=e.level,o=e.isStart,a=e.isEnd,i="".concat(t,"-indent-unit"),s=[],c=0;c<n;c+=1){var l;s.push(p.createElement("span",{key:c,className:v()(i,(l={},(0,r.Z)(l,"".concat(i,"-start"),o[c]),(0,r.Z)(l,"".concat(i,"-end"),a[c]),l))}))}return p.createElement("span",{"aria-hidden":"true",className:"".concat(t,"-indent")},s)};const m=p.memo(y);var k=n(1089),E=["eventKey","className","style","dragOver","dragOverGapTop","dragOverGapBottom","isLeaf","isStart","isEnd","expanded","selected","checked","halfChecked","loading","domRef","active","data","onMouseMove","selectable"],N="open",C="close",b=function(e){(0,d.Z)(n,e);var t=(0,u.Z)(n);function n(){var e;(0,s.Z)(this,n);for(var o=arguments.length,r=new Array(o),a=0;a<o;a++)r[a]=arguments[a];return(e=t.call.apply(t,[this].concat(r))).state={dragNodeHighlight:!1},e.selectHandle=void 0,e.onSelectorClick=function(t){(0,e.props.context.onNodeClick)(t,(0,k.F)(e.props)),e.isSelectable()?e.onSelect(t):e.onCheck(t)},e.onSelectorDoubleClick=function(t){(0,e.props.context.onNodeDoubleClick)(t,(0,k.F)(e.props))},e.onSelect=function(t){if(!e.isDisabled()){var n=e.props.context.onNodeSelect;t.preventDefault(),n(t,(0,k.F)(e.props))}},e.onCheck=function(t){if(!e.isDisabled()){var n=e.props,o=n.disableCheckbox,r=n.checked,a=e.props.context.onNodeCheck;if(e.isCheckable()&&!o){t.preventDefault();var i=!r;a(t,(0,k.F)(e.props),i)}}},e.onMouseEnter=function(t){(0,e.props.context.onNodeMouseEnter)(t,(0,k.F)(e.props))},e.onMouseLeave=function(t){(0,e.props.context.onNodeMouseLeave)(t,(0,k.F)(e.props))},e.onContextMenu=function(t){(0,e.props.context.onNodeContextMenu)(t,(0,k.F)(e.props))},e.onDragStart=function(t){var n=e.props.context.onNodeDragStart;t.stopPropagation(),e.setState({dragNodeHighlight:!0}),n(t,(0,l.Z)(e));try{t.dataTransfer.setData("text/plain","")}catch(e){}},e.onDragEnter=function(t){var n=e.props.context.onNodeDragEnter;t.preventDefault(),t.stopPropagation(),n(t,(0,l.Z)(e))},e.onDragOver=function(t){var n=e.props.context.onNodeDragOver;t.preventDefault(),t.stopPropagation(),n(t,(0,l.Z)(e))},e.onDragLeave=function(t){var n=e.props.context.onNodeDragLeave;t.stopPropagation(),n(t,(0,l.Z)(e))},e.onDragEnd=function(t){var n=e.props.context.onNodeDragEnd;t.stopPropagation(),e.setState({dragNodeHighlight:!1}),n(t,(0,l.Z)(e))},e.onDrop=function(t){var n=e.props.context.onNodeDrop;t.preventDefault(),t.stopPropagation(),e.setState({dragNodeHighlight:!1}),n(t,(0,l.Z)(e))},e.onExpand=function(t){var n=e.props,o=n.loading,r=n.context.onNodeExpand;o||r(t,(0,k.F)(e.props))},e.setSelectHandle=function(t){e.selectHandle=t},e.getNodeState=function(){var t=e.props.expanded;return e.isLeaf()?null:t?N:C},e.hasChildren=function(){var t=e.props.eventKey;return!!((e.props.context.keyEntities[t]||{}).children||[]).length},e.isLeaf=function(){var t=e.props,n=t.isLeaf,o=t.loaded,r=e.props.context.loadData,a=e.hasChildren();return!1!==n&&(n||!r&&!a||r&&o&&!a)},e.isDisabled=function(){var t=e.props.disabled;return!(!e.props.context.disabled&&!t)},e.isCheckable=function(){var t=e.props.checkable,n=e.props.context.checkable;return!(!n||!1===t)&&n},e.syncLoadData=function(t){var n=t.expanded,o=t.loading,r=t.loaded,a=e.props.context,i=a.loadData,s=a.onNodeLoad;o||i&&n&&!e.isLeaf()&&(e.hasChildren()||r||s((0,k.F)(e.props)))},e.isDraggable=function(){var t=e.props,n=t.data,o=t.context.draggable;return!(!o||o.nodeDraggable&&!o.nodeDraggable(n))},e.renderDragHandler=function(){var t=e.props.context,n=t.draggable,o=t.prefixCls;return(null==n?void 0:n.icon)?p.createElement("span",{className:"".concat(o,"-draggable-icon")},n.icon):null},e.renderSwitcherIconDom=function(t){var n=e.props.switcherIcon,o=e.props.context.switcherIcon,r=n||o;return"function"==typeof r?r((0,i.Z)((0,i.Z)({},e.props),{},{isLeaf:t})):r},e.renderSwitcher=function(){var t=e.props.expanded,n=e.props.context.prefixCls;if(e.isLeaf()){var o=e.renderSwitcherIconDom(!0);return!1!==o?p.createElement("span",{className:v()("".concat(n,"-switcher"),"".concat(n,"-switcher-noop"))},o):null}var r=v()("".concat(n,"-switcher"),"".concat(n,"-switcher_").concat(t?N:C)),a=e.renderSwitcherIconDom(!1);return!1!==a?p.createElement("span",{onClick:e.onExpand,className:r},a):null},e.renderCheckbox=function(){var t=e.props,n=t.checked,o=t.halfChecked,r=t.disableCheckbox,a=e.props.context.prefixCls,i=e.isDisabled(),s=e.isCheckable();if(!s)return null;var c="boolean"!=typeof s?s:null;return p.createElement("span",{className:v()("".concat(a,"-checkbox"),n&&"".concat(a,"-checkbox-checked"),!n&&o&&"".concat(a,"-checkbox-indeterminate"),(i||r)&&"".concat(a,"-checkbox-disabled")),onClick:e.onCheck},c)},e.renderIcon=function(){var t=e.props.loading,n=e.props.context.prefixCls;return p.createElement("span",{className:v()("".concat(n,"-iconEle"),"".concat(n,"-icon__").concat(e.getNodeState()||"docu"),t&&"".concat(n,"-icon_loading"))})},e.renderSelector=function(){var t,n,o=e.state.dragNodeHighlight,r=e.props,a=r.title,i=r.selected,s=r.icon,c=r.loading,l=r.data,d=e.props.context,u=d.prefixCls,f=d.showIcon,h=d.icon,g=d.loadData,y=d.titleRender,m=e.isDisabled(),k="".concat(u,"-node-content-wrapper");if(f){var E=s||h;t=E?p.createElement("span",{className:v()("".concat(u,"-iconEle"),"".concat(u,"-icon__customize"))},"function"==typeof E?E(e.props):E):e.renderIcon()}else g&&c&&(t=e.renderIcon());n="function"==typeof a?a(l):y?y(l):a;var N=p.createElement("span",{className:"".concat(u,"-title")},n);return p.createElement("span",{ref:e.setSelectHandle,title:"string"==typeof a?a:"",className:v()("".concat(k),"".concat(k,"-").concat(e.getNodeState()||"normal"),!m&&(i||o)&&"".concat(u,"-node-selected")),onMouseEnter:e.onMouseEnter,onMouseLeave:e.onMouseLeave,onContextMenu:e.onContextMenu,onClick:e.onSelectorClick,onDoubleClick:e.onSelectorDoubleClick},t,N,e.renderDropIndicator())},e.renderDropIndicator=function(){var t=e.props,n=t.disabled,o=t.eventKey,r=e.props.context,a=r.draggable,i=r.dropLevelOffset,s=r.dropPosition,c=r.prefixCls,l=r.indent,d=r.dropIndicatorRender,u=r.dragOverNodeKey,p=r.direction;return n||!1===a||u!==o?null:d({dropPosition:s,dropLevelOffset:i,indent:l,prefixCls:c,direction:p})},e}return(0,c.Z)(n,[{key:"componentDidMount",value:function(){this.syncLoadData(this.props)}},{key:"componentDidUpdate",value:function(){this.syncLoadData(this.props)}},{key:"isSelectable",value:function(){var e=this.props.selectable,t=this.props.context.selectable;return"boolean"==typeof e?e:t}},{key:"render",value:function(){var e,t=this.props,n=t.eventKey,i=t.className,s=t.style,c=t.dragOver,l=t.dragOverGapTop,d=t.dragOverGapBottom,u=t.isLeaf,f=t.isStart,g=t.isEnd,y=t.expanded,N=t.selected,C=t.checked,b=t.halfChecked,w=t.loading,x=t.domRef,T=t.active,S=(t.data,t.onMouseMove),K=t.selectable,D=(0,a.Z)(t,E),P=this.props.context,O=P.prefixCls,M=P.filterTreeNode,Z=P.keyEntities,L=P.dropContainerKey,R=P.dropTargetKey,A=P.draggingNodeKey,I=this.isDisabled(),_=(0,h.Z)(D,{aria:!0,data:!0}),H=(Z[n]||{}).level,U=g[g.length-1],F=this.isDraggable(),V=!I&&F,B=A===n,W=void 0!==K?{"aria-selected":!!K}:void 0;return p.createElement("div",(0,o.Z)({ref:x,className:v()(i,"".concat(O,"-treenode"),(e={},(0,r.Z)(e,"".concat(O,"-treenode-disabled"),I),(0,r.Z)(e,"".concat(O,"-treenode-switcher-").concat(y?"open":"close"),!u),(0,r.Z)(e,"".concat(O,"-treenode-checkbox-checked"),C),(0,r.Z)(e,"".concat(O,"-treenode-checkbox-indeterminate"),b),(0,r.Z)(e,"".concat(O,"-treenode-selected"),N),(0,r.Z)(e,"".concat(O,"-treenode-loading"),w),(0,r.Z)(e,"".concat(O,"-treenode-active"),T),(0,r.Z)(e,"".concat(O,"-treenode-leaf-last"),U),(0,r.Z)(e,"".concat(O,"-treenode-draggable"),V),(0,r.Z)(e,"dragging",B),(0,r.Z)(e,"drop-target",R===n),(0,r.Z)(e,"drop-container",L===n),(0,r.Z)(e,"drag-over",!I&&c),(0,r.Z)(e,"drag-over-gap-top",!I&&l),(0,r.Z)(e,"drag-over-gap-bottom",!I&&d),(0,r.Z)(e,"filter-node",M&&M((0,k.F)(this.props))),e)),style:s,draggable:V,"aria-grabbed":B,onDragStart:V?this.onDragStart:void 0,onDragEnter:F?this.onDragEnter:void 0,onDragOver:F?this.onDragOver:void 0,onDragLeave:F?this.onDragLeave:void 0,onDrop:F?this.onDrop:void 0,onDragEnd:F?this.onDragEnd:void 0,onMouseMove:S},W,_),p.createElement(m,{prefixCls:O,level:H,isStart:f,isEnd:g}),this.renderDragHandler(),this.renderSwitcher(),this.renderCheckbox(),this.renderSelector())}}]),n}(p.Component),w=function(e){return p.createElement(g.k.Consumer,null,(function(t){return p.createElement(b,(0,o.Z)({},e,{context:t}))}))};w.displayName="TreeNode",w.defaultProps={title:"---"},w.isTreeNode=1;const x=w},27822:(e,t,n)=>{n.d(t,{k:()=>o});var o=n(67294).createContext(null)},28361:(e,t,n)=>{n.d(t,{O:()=>T.Z,Z:()=>G});var o=n(87462),r=n(4942),a=n(71002),i=n(1413),s=n(93433),c=n(15671),l=n(43144),d=n(97326),u=n(79340),p=n(98557),f=n(67294),v=n(15105),h=n(80334),g=n(64217),y=n(94184),m=n.n(y),k=n(27822),E=n(10225),N=n(1089),C=n(29439),b=n(44925),w=n(7606),x=n(63441),T=n(4258),S=["className","style","motion","motionNodes","motionType","onMotionStart","onMotionEnd","active","treeNodeRequiredProps"],K=function(e,t){var n=e.className,r=e.style,a=e.motion,i=e.motionNodes,s=e.motionType,c=e.onMotionStart,l=e.onMotionEnd,d=e.active,u=e.treeNodeRequiredProps,p=(0,b.Z)(e,S),v=f.useState(!0),h=(0,C.Z)(v,2),g=h[0],y=h[1],E=f.useContext(k.k).prefixCls,w=f.useRef(!1),K=function(){w.current||l(),w.current=!0};return(0,f.useEffect)((function(){i&&"hide"===s&&g&&y(!1)}),[i]),(0,f.useEffect)((function(){return i&&c(),function(){i&&K()}}),[]),i?f.createElement(x.Z,(0,o.Z)({ref:t,visible:g},a,{motionAppear:"show"===s,onAppearEnd:K,onLeaveEnd:K}),(function(e,t){var n=e.className,r=e.style;return f.createElement("div",{ref:t,className:m()("".concat(E,"-treenode-motion"),n),style:r},i.map((function(e){var t=(0,o.Z)({},e.data),n=e.title,r=e.key,a=e.isStart,i=e.isEnd;delete t.children;var s=(0,N.H8)(r,u);return f.createElement(T.Z,(0,o.Z)({},t,s,{title:n,active:d,data:e.data,key:r,isStart:a,isEnd:i}))})))})):f.createElement(T.Z,(0,o.Z)({domRef:t,className:n,style:r},p,{active:d}))};K.displayName="MotionTreeNode";const D=f.forwardRef(K);function P(e,t,n){var o=e.findIndex((function(e){return e.key===n})),r=e[o+1],a=t.findIndex((function(e){return e.key===n}));if(r){var i=t.findIndex((function(e){return e.key===r.key}));return t.slice(a+1,i)}return t.slice(a+1)}var O=["prefixCls","data","selectable","checkable","expandedKeys","selectedKeys","checkedKeys","loadedKeys","loadingKeys","halfCheckedKeys","keyEntities","disabled","dragging","dragOverNodeKey","dropPosition","motion","height","itemHeight","virtual","focusable","activeItem","focused","tabIndex","onKeyDown","onFocus","onBlur","onActiveChange","onListChangeStart","onListChangeEnd"],M={width:0,height:0,display:"flex",overflow:"hidden",opacity:0,border:0,padding:0,margin:0},Z=function(){},L="RC_TREE_MOTION_".concat(Math.random()),R={key:L},A={key:L,level:0,index:0,pos:"0",node:R,nodes:[R]},I={parent:null,children:[],pos:A.pos,data:R,title:null,key:L,isStart:[],isEnd:[]};function _(e,t,n,o){return!1!==t&&n?e.slice(0,Math.ceil(n/o)+1):e}function H(e){var t=e.key,n=e.pos;return(0,N.km)(t,n)}var U=f.forwardRef((function(e,t){var n=e.prefixCls,r=e.data,a=(e.selectable,e.checkable,e.expandedKeys),i=e.selectedKeys,s=e.checkedKeys,c=e.loadedKeys,l=e.loadingKeys,d=e.halfCheckedKeys,u=e.keyEntities,p=e.disabled,v=e.dragging,h=e.dragOverNodeKey,g=e.dropPosition,y=e.motion,m=e.height,k=e.itemHeight,E=e.virtual,x=e.focusable,T=e.activeItem,S=e.focused,K=e.tabIndex,R=e.onKeyDown,A=e.onFocus,U=e.onBlur,F=e.onActiveChange,V=e.onListChangeStart,B=e.onListChangeEnd,W=(0,b.Z)(e,O),j=f.useRef(null),G=f.useRef(null);f.useImperativeHandle(t,(function(){return{scrollTo:function(e){j.current.scrollTo(e)},getIndentWidth:function(){return G.current.offsetWidth}}}));var z=f.useState(a),q=(0,C.Z)(z,2),Y=q[0],X=q[1],Q=f.useState(r),$=(0,C.Z)(Q,2),J=$[0],ee=$[1],te=f.useState(r),ne=(0,C.Z)(te,2),oe=ne[0],re=ne[1],ae=f.useState([]),ie=(0,C.Z)(ae,2),se=ie[0],ce=ie[1],le=f.useState(null),de=(0,C.Z)(le,2),ue=de[0],pe=de[1],fe=f.useRef(r);function ve(){var e=fe.current;ee(e),re(e),ce([]),pe(null),B()}fe.current=r,f.useEffect((function(){X(a);var e=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],n=e.length,o=t.length;if(1!==Math.abs(n-o))return{add:!1,key:null};function r(e,t){var n=new Map;e.forEach((function(e){n.set(e,!0)}));var o=t.filter((function(e){return!n.has(e)}));return 1===o.length?o[0]:null}return n<o?{add:!0,key:r(e,t)}:{add:!1,key:r(t,e)}}(Y,a);if(null!==e.key)if(e.add){var t=J.findIndex((function(t){return t.key===e.key})),n=_(P(J,r,e.key),E,m,k),o=J.slice();o.splice(t+1,0,I),re(o),ce(n),pe("show")}else{var i=r.findIndex((function(t){return t.key===e.key})),s=_(P(r,J,e.key),E,m,k),c=r.slice();c.splice(i+1,0,I),re(c),ce(s),pe("hide")}else J!==r&&(ee(r),re(r))}),[a,r]),f.useEffect((function(){v||ve()}),[v]);var he=y?oe:r,ge={expandedKeys:a,selectedKeys:i,loadedKeys:c,loadingKeys:l,checkedKeys:s,halfCheckedKeys:d,dragOverNodeKey:h,dropPosition:g,keyEntities:u};return f.createElement(f.Fragment,null,S&&T&&f.createElement("span",{style:M,"aria-live":"assertive"},function(e){for(var t=String(e.data.key),n=e;n.parent;)n=n.parent,t="".concat(n.data.key," > ").concat(t);return t}(T)),f.createElement("div",null,f.createElement("input",{style:M,disabled:!1===x||p,tabIndex:!1!==x?K:null,onKeyDown:R,onFocus:A,onBlur:U,value:"",onChange:Z,"aria-label":"for screen reader"})),f.createElement("div",{className:"".concat(n,"-treenode"),"aria-hidden":!0,style:{position:"absolute",pointerEvents:"none",visibility:"hidden",height:0,overflow:"hidden"}},f.createElement("div",{className:"".concat(n,"-indent")},f.createElement("div",{ref:G,className:"".concat(n,"-indent-unit")}))),f.createElement(w.Z,(0,o.Z)({},W,{data:he,itemKey:H,height:m,fullHeight:!1,virtual:E,itemHeight:k,prefixCls:"".concat(n,"-list"),ref:j,onVisibleChange:function(e,t){var n=new Set(e);t.filter((function(e){return!n.has(e)})).some((function(e){return H(e)===L}))&&ve()}}),(function(e){var t=e.pos,n=(0,o.Z)({},e.data),r=e.title,a=e.key,i=e.isStart,s=e.isEnd,c=(0,N.km)(a,t);delete n.key,delete n.children;var l=(0,N.H8)(c,ge);return f.createElement(D,(0,o.Z)({},n,l,{title:r,active:!!T&&a===T.key,pos:t,data:e.data,isStart:i,isEnd:s,motion:y,motionNodes:a===L?se:null,motionType:ue,onMotionStart:V,onMotionEnd:ve,treeNodeRequiredProps:ge,onMouseMove:function(){F(null)}}))})))}));U.displayName="NodeList";const F=U;function V(e,t){var n=new Set;return e.forEach((function(e){t.has(e)||n.add(e)})),n}function B(e){var t=e||{},n=t.disabled,o=t.disableCheckbox,r=t.checkable;return!(!n&&!o)||!1===r}function W(e,t,n,o){var r,a=[];r=o||B;var i,s=new Set(e.filter((function(e){var t=!!n[e];return t||a.push(e),t}))),c=new Map,l=0;return Object.keys(n).forEach((function(e){var t=n[e],o=t.level,r=c.get(o);r||(r=new Set,c.set(o,r)),r.add(t),l=Math.max(l,o)})),(0,h.ZP)(!a.length,"Tree missing follow keys: ".concat(a.slice(0,100).map((function(e){return"'".concat(e,"'")})).join(", "))),i=!0===t?function(e,t,n,o){for(var r=new Set(e),a=new Set,i=0;i<=n;i+=1)(t.get(i)||new Set).forEach((function(e){var t=e.key,n=e.node,a=e.children,i=void 0===a?[]:a;r.has(t)&&!o(n)&&i.filter((function(e){return!o(e.node)})).forEach((function(e){r.add(e.key)}))}));for(var s=new Set,c=n;c>=0;c-=1)(t.get(c)||new Set).forEach((function(e){var t=e.parent,n=e.node;if(!o(n)&&e.parent&&!s.has(e.parent.key))if(o(e.parent.node))s.add(t.key);else{var i=!0,c=!1;(t.children||[]).filter((function(e){return!o(e.node)})).forEach((function(e){var t=e.key,n=r.has(t);i&&!n&&(i=!1),c||!n&&!a.has(t)||(c=!0)})),i&&r.add(t.key),c&&a.add(t.key),s.add(t.key)}}));return{checkedKeys:Array.from(r),halfCheckedKeys:Array.from(V(a,r))}}(s,c,l,r):function(e,t,n,o,r){for(var a=new Set(e),i=new Set(t),s=0;s<=o;s+=1)(n.get(s)||new Set).forEach((function(e){var t=e.key,n=e.node,o=e.children,s=void 0===o?[]:o;a.has(t)||i.has(t)||r(n)||s.filter((function(e){return!r(e.node)})).forEach((function(e){a.delete(e.key)}))}));i=new Set;for(var c=new Set,l=o;l>=0;l-=1)(n.get(l)||new Set).forEach((function(e){var t=e.parent,n=e.node;if(!r(n)&&e.parent&&!c.has(e.parent.key))if(r(e.parent.node))c.add(t.key);else{var o=!0,s=!1;(t.children||[]).filter((function(e){return!r(e.node)})).forEach((function(e){var t=e.key,n=a.has(t);o&&!n&&(o=!1),s||!n&&!i.has(t)||(s=!0)})),o||a.delete(t.key),s&&i.add(t.key),c.add(t.key)}}));return{checkedKeys:Array.from(a),halfCheckedKeys:Array.from(V(i,a))}}(s,t.halfCheckedKeys,c,l,r),i}var j=function(e){(0,u.Z)(n,e);var t=(0,p.Z)(n);function n(){var e;(0,c.Z)(this,n);for(var o=arguments.length,r=new Array(o),a=0;a<o;a++)r[a]=arguments[a];return(e=t.call.apply(t,[this].concat(r))).destroyed=!1,e.delayedDragEnterLogic=void 0,e.loadingRetryTimes={},e.state={keyEntities:{},indent:null,selectedKeys:[],checkedKeys:[],halfCheckedKeys:[],loadedKeys:[],loadingKeys:[],expandedKeys:[],draggingNodeKey:null,dragChildrenKeys:[],dropTargetKey:null,dropPosition:null,dropContainerKey:null,dropLevelOffset:null,dropTargetPos:null,dropAllowed:!0,dragOverNodeKey:null,treeData:[],flattenNodes:[],focused:!1,activeKey:null,listChanging:!1,prevProps:null,fieldNames:(0,N.w$)()},e.dragStartMousePosition=null,e.dragNode=void 0,e.currentMouseOverDroppableNodeKey=null,e.listRef=f.createRef(),e.onNodeDragStart=function(t,n){var o=e.state,r=o.expandedKeys,a=o.keyEntities,i=e.props.onDragStart,s=n.props.eventKey;e.dragNode=n,e.dragStartMousePosition={x:t.clientX,y:t.clientY};var c=(0,E._5)(r,s);e.setState({draggingNodeKey:s,dragChildrenKeys:(0,E.wA)(s,a),indent:e.listRef.current.getIndentWidth()}),e.setExpandedKeys(c),window.addEventListener("dragend",e.onWindowDragEnd),null==i||i({event:t,node:(0,N.F)(n.props)})},e.onNodeDragEnter=function(t,n){var o=e.state,r=o.expandedKeys,a=o.keyEntities,i=o.dragChildrenKeys,c=o.flattenNodes,l=o.indent,u=e.props,p=u.onDragEnter,f=u.onExpand,v=u.allowDrop,h=u.direction,g=n.props,y=g.pos,m=g.eventKey,k=(0,d.Z)(e).dragNode;if(e.currentMouseOverDroppableNodeKey!==m&&(e.currentMouseOverDroppableNodeKey=m),k){var C=(0,E.OM)(t,k,n,l,e.dragStartMousePosition,v,c,a,r,h),b=C.dropPosition,w=C.dropLevelOffset,x=C.dropTargetKey,T=C.dropContainerKey,S=C.dropTargetPos,K=C.dropAllowed,D=C.dragOverNodeKey;-1===i.indexOf(x)&&K?(e.delayedDragEnterLogic||(e.delayedDragEnterLogic={}),Object.keys(e.delayedDragEnterLogic).forEach((function(t){clearTimeout(e.delayedDragEnterLogic[t])})),k.props.eventKey!==n.props.eventKey&&(t.persist(),e.delayedDragEnterLogic[y]=window.setTimeout((function(){if(null!==e.state.draggingNodeKey){var o=(0,s.Z)(r),i=a[n.props.eventKey];i&&(i.children||[]).length&&(o=(0,E.L0)(r,n.props.eventKey)),"expandedKeys"in e.props||e.setExpandedKeys(o),null==f||f(o,{node:(0,N.F)(n.props),expanded:!0,nativeEvent:t.nativeEvent})}}),800)),k.props.eventKey!==x||0!==w?(e.setState({dragOverNodeKey:D,dropPosition:b,dropLevelOffset:w,dropTargetKey:x,dropContainerKey:T,dropTargetPos:S,dropAllowed:K}),null==p||p({event:t,node:(0,N.F)(n.props),expandedKeys:r})):e.resetDragState()):e.resetDragState()}else e.resetDragState()},e.onNodeDragOver=function(t,n){var o=e.state,r=o.dragChildrenKeys,a=o.flattenNodes,i=o.keyEntities,s=o.expandedKeys,c=o.indent,l=e.props,u=l.onDragOver,p=l.allowDrop,f=l.direction,v=(0,d.Z)(e).dragNode;if(v){var h=(0,E.OM)(t,v,n,c,e.dragStartMousePosition,p,a,i,s,f),g=h.dropPosition,y=h.dropLevelOffset,m=h.dropTargetKey,k=h.dropContainerKey,C=h.dropAllowed,b=h.dropTargetPos,w=h.dragOverNodeKey;-1===r.indexOf(m)&&C&&(v.props.eventKey===m&&0===y?null===e.state.dropPosition&&null===e.state.dropLevelOffset&&null===e.state.dropTargetKey&&null===e.state.dropContainerKey&&null===e.state.dropTargetPos&&!1===e.state.dropAllowed&&null===e.state.dragOverNodeKey||e.resetDragState():g===e.state.dropPosition&&y===e.state.dropLevelOffset&&m===e.state.dropTargetKey&&k===e.state.dropContainerKey&&b===e.state.dropTargetPos&&C===e.state.dropAllowed&&w===e.state.dragOverNodeKey||e.setState({dropPosition:g,dropLevelOffset:y,dropTargetKey:m,dropContainerKey:k,dropTargetPos:b,dropAllowed:C,dragOverNodeKey:w}),null==u||u({event:t,node:(0,N.F)(n.props)}))}},e.onNodeDragLeave=function(t,n){e.currentMouseOverDroppableNodeKey!==n.props.eventKey||t.currentTarget.contains(t.relatedTarget)||(e.resetDragState(),e.currentMouseOverDroppableNodeKey=null);var o=e.props.onDragLeave;null==o||o({event:t,node:(0,N.F)(n.props)})},e.onWindowDragEnd=function(t){e.onNodeDragEnd(t,null,!0),window.removeEventListener("dragend",e.onWindowDragEnd)},e.onNodeDragEnd=function(t,n){var o=e.props.onDragEnd;e.setState({dragOverNodeKey:null}),e.cleanDragState(),null==o||o({event:t,node:(0,N.F)(n.props)}),e.dragNode=null},e.onNodeDrop=function(t,n){var o,r=arguments.length>2&&void 0!==arguments[2]&&arguments[2],a=e.state,s=a.dragChildrenKeys,c=a.dropPosition,l=a.dropTargetKey,d=a.dropTargetPos,u=a.dropAllowed;if(u){var p=e.props.onDrop;if(e.setState({dragOverNodeKey:null}),e.cleanDragState(),null!==l){var f=(0,i.Z)((0,i.Z)({},(0,N.H8)(l,e.getTreeNodeRequiredProps())),{},{active:(null===(o=e.getActiveItem())||void 0===o?void 0:o.key)===l,data:e.state.keyEntities[l].node}),v=-1!==s.indexOf(l);(0,h.ZP)(!v,"Can not drop to dragNode's children node. This is a bug of rc-tree. Please report an issue.");var g=(0,E.yx)(d),y={event:t,node:(0,N.F)(f),dragNode:e.dragNode?(0,N.F)(e.dragNode.props):null,dragNodesKeys:[e.dragNode.props.eventKey].concat(s),dropToGap:0!==c,dropPosition:c+Number(g[g.length-1])};r||null==p||p(y),e.dragNode=null}}},e.cleanDragState=function(){null!==e.state.draggingNodeKey&&e.setState({draggingNodeKey:null,dropPosition:null,dropContainerKey:null,dropTargetKey:null,dropLevelOffset:null,dropAllowed:!0,dragOverNodeKey:null}),e.dragStartMousePosition=null,e.currentMouseOverDroppableNodeKey=null},e.triggerExpandActionExpand=function(t,n){var o=e.state,r=o.expandedKeys,a=o.flattenNodes,s=n.expanded,c=n.key;if(!(n.isLeaf||t.shiftKey||t.metaKey||t.ctrlKey)){var l=a.filter((function(e){return e.key===c}))[0],d=(0,N.F)((0,i.Z)((0,i.Z)({},(0,N.H8)(c,e.getTreeNodeRequiredProps())),{},{data:l.data}));e.setExpandedKeys(s?(0,E._5)(r,c):(0,E.L0)(r,c)),e.onNodeExpand(t,d)}},e.onNodeClick=function(t,n){var o=e.props,r=o.onClick;"click"===o.expandAction&&e.triggerExpandActionExpand(t,n),null==r||r(t,n)},e.onNodeDoubleClick=function(t,n){var o=e.props,r=o.onDoubleClick;"doubleClick"===o.expandAction&&e.triggerExpandActionExpand(t,n),null==r||r(t,n)},e.onNodeSelect=function(t,n){var o=e.state.selectedKeys,r=e.state,a=r.keyEntities,i=r.fieldNames,s=e.props,c=s.onSelect,l=s.multiple,d=n.selected,u=n[i.key],p=!d,f=(o=p?l?(0,E.L0)(o,u):[u]:(0,E._5)(o,u)).map((function(e){var t=a[e];return t?t.node:null})).filter((function(e){return e}));e.setUncontrolledState({selectedKeys:o}),null==c||c(o,{event:"select",selected:p,node:n,selectedNodes:f,nativeEvent:t.nativeEvent})},e.onNodeCheck=function(t,n,o){var r,a=e.state,i=a.keyEntities,c=a.checkedKeys,l=a.halfCheckedKeys,d=e.props,u=d.checkStrictly,p=d.onCheck,f=n.key,v={event:"check",node:n,checked:o,nativeEvent:t.nativeEvent};if(u){var h=o?(0,E.L0)(c,f):(0,E._5)(c,f);r={checked:h,halfChecked:(0,E._5)(l,f)},v.checkedNodes=h.map((function(e){return i[e]})).filter((function(e){return e})).map((function(e){return e.node})),e.setUncontrolledState({checkedKeys:h})}else{var g=W([].concat((0,s.Z)(c),[f]),!0,i),y=g.checkedKeys,m=g.halfCheckedKeys;if(!o){var k=new Set(y);k.delete(f);var N=W(Array.from(k),{checked:!1,halfCheckedKeys:m},i);y=N.checkedKeys,m=N.halfCheckedKeys}r=y,v.checkedNodes=[],v.checkedNodesPositions=[],v.halfCheckedKeys=m,y.forEach((function(e){var t=i[e];if(t){var n=t.node,o=t.pos;v.checkedNodes.push(n),v.checkedNodesPositions.push({node:n,pos:o})}})),e.setUncontrolledState({checkedKeys:y},!1,{halfCheckedKeys:m})}null==p||p(r,v)},e.onNodeLoad=function(t){var n=t.key,o=new Promise((function(o,r){e.setState((function(a){var i=a.loadedKeys,s=void 0===i?[]:i,c=a.loadingKeys,l=void 0===c?[]:c,d=e.props,u=d.loadData,p=d.onLoad;return u&&-1===s.indexOf(n)&&-1===l.indexOf(n)?(u(t).then((function(){var r=e.state.loadedKeys,a=(0,E.L0)(r,n);null==p||p(a,{event:"load",node:t}),e.setUncontrolledState({loadedKeys:a}),e.setState((function(e){return{loadingKeys:(0,E._5)(e.loadingKeys,n)}})),o()})).catch((function(t){if(e.setState((function(e){return{loadingKeys:(0,E._5)(e.loadingKeys,n)}})),e.loadingRetryTimes[n]=(e.loadingRetryTimes[n]||0)+1,e.loadingRetryTimes[n]>=10){var a=e.state.loadedKeys;(0,h.ZP)(!1,"Retry for `loadData` many times but still failed. No more retry."),e.setUncontrolledState({loadedKeys:(0,E.L0)(a,n)}),o()}r(t)})),{loadingKeys:(0,E.L0)(l,n)}):null}))}));return o.catch((function(){})),o},e.onNodeMouseEnter=function(t,n){var o=e.props.onMouseEnter;null==o||o({event:t,node:n})},e.onNodeMouseLeave=function(t,n){var o=e.props.onMouseLeave;null==o||o({event:t,node:n})},e.onNodeContextMenu=function(t,n){var o=e.props.onRightClick;o&&(t.preventDefault(),o({event:t,node:n}))},e.onFocus=function(){var t=e.props.onFocus;e.setState({focused:!0});for(var n=arguments.length,o=new Array(n),r=0;r<n;r++)o[r]=arguments[r];null==t||t.apply(void 0,o)},e.onBlur=function(){var t=e.props.onBlur;e.setState({focused:!1}),e.onActiveChange(null);for(var n=arguments.length,o=new Array(n),r=0;r<n;r++)o[r]=arguments[r];null==t||t.apply(void 0,o)},e.getTreeNodeRequiredProps=function(){var t=e.state;return{expandedKeys:t.expandedKeys||[],selectedKeys:t.selectedKeys||[],loadedKeys:t.loadedKeys||[],loadingKeys:t.loadingKeys||[],checkedKeys:t.checkedKeys||[],halfCheckedKeys:t.halfCheckedKeys||[],dragOverNodeKey:t.dragOverNodeKey,dropPosition:t.dropPosition,keyEntities:t.keyEntities}},e.setExpandedKeys=function(t){var n=e.state,o=n.treeData,r=n.fieldNames,a=(0,N.oH)(o,t,r);e.setUncontrolledState({expandedKeys:t,flattenNodes:a},!0)},e.onNodeExpand=function(t,n){var o=e.state.expandedKeys,r=e.state,a=r.listChanging,i=r.fieldNames,s=e.props,c=s.onExpand,l=s.loadData,d=n.expanded,u=n[i.key];if(!a){var p=o.indexOf(u),f=!d;if((0,h.ZP)(d&&-1!==p||!d&&-1===p,"Expand state not sync with index check"),o=f?(0,E.L0)(o,u):(0,E._5)(o,u),e.setExpandedKeys(o),null==c||c(o,{node:n,expanded:f,nativeEvent:t.nativeEvent}),f&&l){var v=e.onNodeLoad(n);v&&v.then((function(){var t=(0,N.oH)(e.state.treeData,o,i);e.setUncontrolledState({flattenNodes:t})})).catch((function(){var t=e.state.expandedKeys,n=(0,E._5)(t,u);e.setExpandedKeys(n)}))}}},e.onListChangeStart=function(){e.setUncontrolledState({listChanging:!0})},e.onListChangeEnd=function(){setTimeout((function(){e.setUncontrolledState({listChanging:!1})}))},e.onActiveChange=function(t){var n=e.state.activeKey,o=e.props.onActiveChange;n!==t&&(e.setState({activeKey:t}),null!==t&&e.scrollTo({key:t}),null==o||o(t))},e.getActiveItem=function(){var t=e.state,n=t.activeKey,o=t.flattenNodes;return null===n?null:o.find((function(e){return e.key===n}))||null},e.offsetActiveKey=function(t){var n=e.state,o=n.flattenNodes,r=n.activeKey,a=o.findIndex((function(e){return e.key===r}));-1===a&&t<0&&(a=o.length);var i=o[a=(a+t+o.length)%o.length];if(i){var s=i.key;e.onActiveChange(s)}else e.onActiveChange(null)},e.onKeyDown=function(t){var n=e.state,o=n.activeKey,r=n.expandedKeys,a=n.checkedKeys,s=n.fieldNames,c=e.props,l=c.onKeyDown,d=c.checkable,u=c.selectable;switch(t.which){case v.Z.UP:e.offsetActiveKey(-1),t.preventDefault();break;case v.Z.DOWN:e.offsetActiveKey(1),t.preventDefault()}var p=e.getActiveItem();if(p&&p.data){var f=e.getTreeNodeRequiredProps(),h=!1===p.data.isLeaf||!!(p.data[s.children]||[]).length,g=(0,N.F)((0,i.Z)((0,i.Z)({},(0,N.H8)(o,f)),{},{data:p.data,active:!0}));switch(t.which){case v.Z.LEFT:h&&r.includes(o)?e.onNodeExpand({},g):p.parent&&e.onActiveChange(p.parent.key),t.preventDefault();break;case v.Z.RIGHT:h&&!r.includes(o)?e.onNodeExpand({},g):p.children&&p.children.length&&e.onActiveChange(p.children[0].key),t.preventDefault();break;case v.Z.ENTER:case v.Z.SPACE:!d||g.disabled||!1===g.checkable||g.disableCheckbox?d||!u||g.disabled||!1===g.selectable||e.onNodeSelect({},g):e.onNodeCheck({},g,!a.includes(o))}}null==l||l(t)},e.setUncontrolledState=function(t){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1],o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;if(!e.destroyed){var r=!1,a=!0,s={};Object.keys(t).forEach((function(n){n in e.props?a=!1:(r=!0,s[n]=t[n])})),!r||n&&!a||e.setState((0,i.Z)((0,i.Z)({},s),o))}},e.scrollTo=function(t){e.listRef.current.scrollTo(t)},e}return(0,l.Z)(n,[{key:"componentDidMount",value:function(){this.destroyed=!1,this.onUpdated()}},{key:"componentDidUpdate",value:function(){this.onUpdated()}},{key:"onUpdated",value:function(){var e=this.props.activeKey;void 0!==e&&e!==this.state.activeKey&&(this.setState({activeKey:e}),null!==e&&this.scrollTo({key:e}))}},{key:"componentWillUnmount",value:function(){window.removeEventListener("dragend",this.onWindowDragEnd),this.destroyed=!0}},{key:"resetDragState",value:function(){this.setState({dragOverNodeKey:null,dropPosition:null,dropLevelOffset:null,dropTargetKey:null,dropContainerKey:null,dropTargetPos:null,dropAllowed:!1})}},{key:"render",value:function(){var e,t,n=this.state,i=n.focused,s=n.flattenNodes,c=n.keyEntities,l=n.draggingNodeKey,d=n.activeKey,u=n.dropLevelOffset,p=n.dropContainerKey,v=n.dropTargetKey,h=n.dropPosition,y=n.dragOverNodeKey,E=n.indent,N=this.props,C=N.prefixCls,b=N.className,w=N.style,x=N.showLine,T=N.focusable,S=N.tabIndex,K=void 0===S?0:S,D=N.selectable,P=N.showIcon,O=N.icon,M=N.switcherIcon,Z=N.draggable,L=N.checkable,R=N.checkStrictly,A=N.disabled,I=N.motion,_=N.loadData,H=N.filterTreeNode,U=N.height,V=N.itemHeight,B=N.virtual,W=N.titleRender,j=N.dropIndicatorRender,G=N.onContextMenu,z=N.onScroll,q=N.direction,Y=N.rootClassName,X=N.rootStyle,Q=(0,g.Z)(this.props,{aria:!0,data:!0});return Z&&(t="object"===(0,a.Z)(Z)?Z:"function"==typeof Z?{nodeDraggable:Z}:{}),f.createElement(k.k.Provider,{value:{prefixCls:C,selectable:D,showIcon:P,icon:O,switcherIcon:M,draggable:t,draggingNodeKey:l,checkable:L,checkStrictly:R,disabled:A,keyEntities:c,dropLevelOffset:u,dropContainerKey:p,dropTargetKey:v,dropPosition:h,dragOverNodeKey:y,indent:E,direction:q,dropIndicatorRender:j,loadData:_,filterTreeNode:H,titleRender:W,onNodeClick:this.onNodeClick,onNodeDoubleClick:this.onNodeDoubleClick,onNodeExpand:this.onNodeExpand,onNodeSelect:this.onNodeSelect,onNodeCheck:this.onNodeCheck,onNodeLoad:this.onNodeLoad,onNodeMouseEnter:this.onNodeMouseEnter,onNodeMouseLeave:this.onNodeMouseLeave,onNodeContextMenu:this.onNodeContextMenu,onNodeDragStart:this.onNodeDragStart,onNodeDragEnter:this.onNodeDragEnter,onNodeDragOver:this.onNodeDragOver,onNodeDragLeave:this.onNodeDragLeave,onNodeDragEnd:this.onNodeDragEnd,onNodeDrop:this.onNodeDrop}},f.createElement("div",{role:"tree",className:m()(C,b,Y,(e={},(0,r.Z)(e,"".concat(C,"-show-line"),x),(0,r.Z)(e,"".concat(C,"-focused"),i),(0,r.Z)(e,"".concat(C,"-active-focused"),null!==d),e)),style:X},f.createElement(F,(0,o.Z)({ref:this.listRef,prefixCls:C,style:w,data:s,disabled:A,selectable:D,checkable:!!L,motion:I,dragging:null!==l,height:U,itemHeight:V,virtual:B,focusable:T,focused:i,tabIndex:K,activeItem:this.getActiveItem(),onFocus:this.onFocus,onBlur:this.onBlur,onKeyDown:this.onKeyDown,onActiveChange:this.onActiveChange,onListChangeStart:this.onListChangeStart,onListChangeEnd:this.onListChangeEnd,onContextMenu:G,onScroll:z},this.getTreeNodeRequiredProps(),Q))))}}],[{key:"getDerivedStateFromProps",value:function(e,t){var n,o=t.prevProps,a={prevProps:e};function s(t){return!o&&t in e||o&&o[t]!==e[t]}var c=t.fieldNames;if(s("fieldNames")&&(c=(0,N.w$)(e.fieldNames),a.fieldNames=c),s("treeData")?n=e.treeData:s("children")&&((0,h.ZP)(!1,"`children` of Tree is deprecated. Please use `treeData` instead."),n=(0,N.zn)(e.children)),n){a.treeData=n;var l=(0,N.I8)(n,{fieldNames:c});a.keyEntities=(0,i.Z)((0,r.Z)({},L,A),l.keyEntities)}var d,u=a.keyEntities||t.keyEntities;if(s("expandedKeys")||o&&s("autoExpandParent"))a.expandedKeys=e.autoExpandParent||!o&&e.defaultExpandParent?(0,E.r7)(e.expandedKeys,u):e.expandedKeys;else if(!o&&e.defaultExpandAll){var p=(0,i.Z)({},u);delete p[L],a.expandedKeys=Object.keys(p).map((function(e){return p[e].key}))}else!o&&e.defaultExpandedKeys&&(a.expandedKeys=e.autoExpandParent||e.defaultExpandParent?(0,E.r7)(e.defaultExpandedKeys,u):e.defaultExpandedKeys);if(a.expandedKeys||delete a.expandedKeys,n||a.expandedKeys){var f=(0,N.oH)(n||t.treeData,a.expandedKeys||t.expandedKeys,c);a.flattenNodes=f}if(e.selectable&&(s("selectedKeys")?a.selectedKeys=(0,E.BT)(e.selectedKeys,e):!o&&e.defaultSelectedKeys&&(a.selectedKeys=(0,E.BT)(e.defaultSelectedKeys,e))),e.checkable&&(s("checkedKeys")?d=(0,E.E6)(e.checkedKeys)||{}:!o&&e.defaultCheckedKeys?d=(0,E.E6)(e.defaultCheckedKeys)||{}:n&&(d=(0,E.E6)(e.checkedKeys)||{checkedKeys:t.checkedKeys,halfCheckedKeys:t.halfCheckedKeys}),d)){var v=d,g=v.checkedKeys,y=void 0===g?[]:g,m=v.halfCheckedKeys,k=void 0===m?[]:m;if(!e.checkStrictly){var C=W(y,!0,u);y=C.checkedKeys,k=C.halfCheckedKeys}a.checkedKeys=y,a.halfCheckedKeys=k}return s("loadedKeys")&&(a.loadedKeys=e.loadedKeys),a}}]),n}(f.Component);j.defaultProps={prefixCls:"rc-tree",showLine:!1,showIcon:!0,selectable:!0,multiple:!1,checkable:!1,disabled:!1,checkStrictly:!1,draggable:!1,defaultExpandParent:!0,autoExpandParent:!1,defaultExpandAll:!1,defaultExpandedKeys:[],defaultCheckedKeys:[],defaultSelectedKeys:[],dropIndicatorRender:function(e){var t=e.dropPosition,n=e.dropLevelOffset,o=e.indent,r={pointerEvents:"none",position:"absolute",right:0,backgroundColor:"red",height:2};switch(t){case-1:r.top=0,r.left=-n*o;break;case 1:r.bottom=0,r.left=-n*o;break;case 0:r.bottom=0,r.left=o}return f.createElement("div",{style:r})},allowDrop:function(){return!0},expandAction:!1},j.TreeNode=T.Z;const G=j},10225:(e,t,n)=>{n.d(t,{BT:()=>v,Ds:()=>d,E6:()=>h,L0:()=>s,OM:()=>f,_5:()=>i,bt:()=>l,r7:()=>g,wA:()=>u,yx:()=>c});var o=n(93433),r=n(71002),a=(n(67294),n(80334));function i(e,t){if(!e)return[];var n=e.slice(),o=n.indexOf(t);return o>=0&&n.splice(o,1),n}function s(e,t){var n=(e||[]).slice();return-1===n.indexOf(t)&&n.push(t),n}function c(e){return e.split("-")}function l(e,t){return"".concat(e,"-").concat(t)}function d(e){return e&&e.type&&e.type.isTreeNode}function u(e,t){var n=[];return function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];t.forEach((function(t){var o=t.key,r=t.children;n.push(o),e(r)}))}(t[e].children),n}function p(e){if(e.parent){var t=c(e.pos);return Number(t[t.length-1])===e.parent.children.length-1}return!1}function f(e,t,n,o,r,a,i,s,l,d){var u,f=e.clientX,v=e.clientY,h=e.target.getBoundingClientRect(),g=h.top,y=h.height,m=(("rtl"===d?-1:1)*(((null==r?void 0:r.x)||0)-f)-12)/o,k=s[n.props.eventKey];if(v<g+y/2){var E=i.findIndex((function(e){return e.key===k.key})),N=i[E<=0?0:E-1].key;k=s[N]}var C=k.key,b=k,w=k.key,x=0,T=0;if(!l.includes(C))for(var S=0;S<m&&p(k);S+=1)k=k.parent,T+=1;var K,D=t.props.data,P=k.node,O=!0;return K=c(k.pos),0===Number(K[K.length-1])&&0===k.level&&v<g+y/2&&a({dragNode:D,dropNode:P,dropPosition:-1})&&k.key===n.props.eventKey?x=-1:(b.children||[]).length&&l.includes(w)?a({dragNode:D,dropNode:P,dropPosition:0})?x=0:O=!1:0===T?m>-1.5?a({dragNode:D,dropNode:P,dropPosition:1})?x=1:O=!1:a({dragNode:D,dropNode:P,dropPosition:0})?x=0:a({dragNode:D,dropNode:P,dropPosition:1})?x=1:O=!1:a({dragNode:D,dropNode:P,dropPosition:1})?x=1:O=!1,{dropPosition:x,dropLevelOffset:T,dropTargetKey:k.key,dropTargetPos:k.pos,dragOverNodeKey:w,dropContainerKey:0===x?null:(null===(u=k.parent)||void 0===u?void 0:u.key)||null,dropAllowed:O}}function v(e,t){if(e)return t.multiple?e.slice():e.length?[e[0]]:e}function h(e){if(!e)return null;var t;if(Array.isArray(e))t={checkedKeys:e,halfCheckedKeys:void 0};else{if("object"!==(0,r.Z)(e))return(0,a.ZP)(!1,"`checkedKeys` is not an array or an object"),null;t={checkedKeys:e.checked||void 0,halfCheckedKeys:e.halfChecked||void 0}}return t}function g(e,t){var n=new Set;function r(e){if(!n.has(e)){var o=t[e];if(o){n.add(e);var a=o.parent;o.node.disabled||a&&r(a.key)}}}return(e||[]).forEach((function(e){r(e)})),(0,o.Z)(n)}n(4258)},1089:(e,t,n)=>{n.d(t,{F:()=>k,H8:()=>m,I8:()=>y,km:()=>p,oH:()=>h,w$:()=>f,zn:()=>v});var o=n(71002),r=n(93433),a=n(1413),i=n(44925),s=n(98423),c=n(50344),l=n(80334),d=n(10225),u=["children"];function p(e,t){return null!=e?e:t}function f(e){var t=e||{},n=t.title||"title";return{title:n,_title:t._title||[n],key:t.key||"key",children:t.children||"children"}}function v(e){return function e(t){return(0,c.Z)(t).map((function(t){if(!(0,d.Ds)(t))return(0,l.ZP)(!t,"Tree/TreeNode can only accept TreeNode as children."),null;var n=t.key,o=t.props,r=o.children,s=(0,i.Z)(o,u),c=(0,a.Z)({key:n},s),p=e(r);return p.length&&(c.children=p),c})).filter((function(e){return e}))}(e)}function h(e,t,n){var o=f(n),i=o._title,c=o.key,l=o.children,u=new Set(!0===t?[]:t),v=[];return function e(n){var o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;return n.map((function(f,h){for(var g,y=(0,d.bt)(o?o.pos:"0",h),m=p(f[c],y),k=0;k<i.length;k+=1){var E=i[k];if(void 0!==f[E]){g=f[E];break}}var N=(0,a.Z)((0,a.Z)({},(0,s.Z)(f,[].concat((0,r.Z)(i),[c,l]))),{},{title:g,key:m,parent:o,pos:y,children:null,data:f,isStart:[].concat((0,r.Z)(o?o.isStart:[]),[0===h]),isEnd:[].concat((0,r.Z)(o?o.isEnd:[]),[h===n.length-1])});return v.push(N),!0===t||u.has(m)?N.children=e(f[l]||[],N):N.children=[],N}))}(e),v}function g(e,t,n){var a,i=("object"===(0,o.Z)(n)?n:{externalGetKey:n})||{},s=i.childrenPropName,c=i.externalGetKey,l=f(i.fieldNames),u=l.key,v=l.children,h=s||v;c?"string"==typeof c?a=function(e){return e[c]}:"function"==typeof c&&(a=function(e){return c(e)}):a=function(e,t){return p(e[u],t)},function n(o,i,s,c){var l=o?o[h]:e,u=o?(0,d.bt)(s.pos,i):"0",p=o?[].concat((0,r.Z)(c),[o]):[];if(o){var f=a(o,u),v={node:o,index:i,pos:u,key:f,parentPos:s.node?s.pos:null,level:s.level+1,nodes:p};t(v)}l&&l.forEach((function(e,t){n(e,t,{node:o,pos:u,level:s?s.level+1:-1},p)}))}(null)}function y(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.initWrapper,o=t.processEntity,r=t.onProcessFinished,a=t.externalGetKey,i=t.childrenPropName,s=t.fieldNames,c=arguments.length>2?arguments[2]:void 0,l=a||c,d={},u={},f={posEntities:d,keyEntities:u};return n&&(f=n(f)||f),g(e,(function(e){var t=e.node,n=e.index,r=e.pos,a=e.key,i=e.parentPos,s=e.level,c={node:t,nodes:e.nodes,index:n,key:a,pos:r,level:s},l=p(a,r);d[r]=c,u[l]=c,c.parent=d[i],c.parent&&(c.parent.children=c.parent.children||[],c.parent.children.push(c)),o&&o(c,f)}),{externalGetKey:l,childrenPropName:i,fieldNames:s}),r&&r(f),f}function m(e,t){var n=t.expandedKeys,o=t.selectedKeys,r=t.loadedKeys,a=t.loadingKeys,i=t.checkedKeys,s=t.halfCheckedKeys,c=t.dragOverNodeKey,l=t.dropPosition,d=t.keyEntities[e];return{eventKey:e,expanded:-1!==n.indexOf(e),selected:-1!==o.indexOf(e),loaded:-1!==r.indexOf(e),loading:-1!==a.indexOf(e),checked:-1!==i.indexOf(e),halfChecked:-1!==s.indexOf(e),pos:String(d?d.pos:""),dragOver:c===e&&0===l,dragOverGapTop:c===e&&-1===l,dragOverGapBottom:c===e&&1===l}}function k(e){var t=e.data,n=e.expanded,o=e.selected,r=e.checked,i=e.loaded,s=e.loading,c=e.halfChecked,d=e.dragOver,u=e.dragOverGapTop,p=e.dragOverGapBottom,f=e.pos,v=e.active,h=e.eventKey,g=(0,a.Z)((0,a.Z)({},t),{},{expanded:n,selected:o,checked:r,loaded:i,loading:s,halfChecked:c,dragOver:d,dragOverGapTop:u,dragOverGapBottom:p,pos:f,active:v,key:h});return"props"in g||Object.defineProperty(g,"props",{get:function(){return(0,l.ZP)(!1,"Second param return from event is node data instead of TreeNode instance. Please read value directly instead of reading from `props`."),e}}),g}},74768:(e,t,n)=>{n.d(t,{Z:()=>B});var o=n(1413),r=n(87462),a=n(15671),i=n(43144),s=n(97326),c=n(79340),l=n(98557),d=n(67294),u=n(73935),p=n(75164),f=n(94999),v=n(34203),h=n(42550),g=n(64019),y=n(59015),m=n(94184),k=n.n(m);function E(e,t,n){return n?e[0]===t[0]:e[0]===t[0]&&e[1]===t[1]}var N=n(29439),C=n(44925),b=n(31131),w=n(63441);function x(e){var t=e.prefixCls,n=e.motion,o=e.animation,r=e.transitionName;return n||(o?{motionName:"".concat(t,"-").concat(o)}:r?{motionName:r}:null)}function T(e){var t=e.prefixCls,n=e.visible,a=e.zIndex,i=e.mask,s=e.maskMotion,c=e.maskAnimation,l=e.maskTransitionName;if(!i)return null;var u={};return(s||l||c)&&(u=(0,o.Z)({motionAppear:!0},x({motion:s,prefixCls:t,transitionName:l,animation:c}))),d.createElement(w.Z,(0,r.Z)({},u,{visible:n,removeOnLeave:!0}),(function(e){var n=e.className;return d.createElement("div",{style:{zIndex:a},className:k()("".concat(t,"-mask"),n)})}))}var S=n(84480),K=n(8410),D=n(74165),P=n(15861),O=n(30470),M=["measure","alignPre","align",null,"motion"],Z=d.forwardRef((function(e,t){var n=e.visible,a=e.prefixCls,i=e.className,s=e.style,c=e.children,l=e.zIndex,u=e.stretch,f=e.destroyPopupOnHide,v=e.forceRender,h=e.align,g=e.point,y=e.getRootDomNode,m=e.getClassNameFromAlign,E=e.onAlign,C=e.onMouseEnter,b=e.onMouseLeave,T=e.onMouseDown,Z=e.onTouchStart,L=e.onClick,R=(0,d.useRef)(),A=(0,d.useRef)(),I=(0,d.useState)(),_=(0,N.Z)(I,2),H=_[0],U=_[1],F=function(e){var t=d.useState({width:0,height:0}),n=(0,N.Z)(t,2),o=n[0],r=n[1];return[d.useMemo((function(){var t={};if(e){var n=o.width,r=o.height;-1!==e.indexOf("height")&&r?t.height=r:-1!==e.indexOf("minHeight")&&r&&(t.minHeight=r),-1!==e.indexOf("width")&&n?t.width=n:-1!==e.indexOf("minWidth")&&n&&(t.minWidth=n)}return t}),[e,o]),function(e){r({width:e.offsetWidth,height:e.offsetHeight})}]}(u),V=(0,N.Z)(F,2),B=V[0],W=V[1],j=function(e,t){var n=(0,O.Z)(null),o=(0,N.Z)(n,2),r=o[0],a=o[1],i=(0,d.useRef)();function s(e){a(e,!0)}function c(){p.Z.cancel(i.current)}return(0,d.useEffect)((function(){s("measure")}),[e]),(0,d.useEffect)((function(){"measure"===r&&(u&&W(y())),r&&(i.current=(0,p.Z)((0,P.Z)((0,D.Z)().mark((function e(){var t,n;return(0,D.Z)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=M.indexOf(r),(n=M[t+1])&&-1!==t&&s(n);case 3:case"end":return e.stop()}}),e)})))))}),[r]),(0,d.useEffect)((function(){return function(){c()}}),[]),[r,function(e){c(),i.current=(0,p.Z)((function(){s((function(e){switch(r){case"align":return"motion";case"motion":return"stable"}return e})),null==e||e()}))}]}(n),G=(0,N.Z)(j,2),z=G[0],q=G[1],Y=(0,d.useState)(0),X=(0,N.Z)(Y,2),Q=X[0],$=X[1],J=(0,d.useRef)();function ee(){var e;null===(e=R.current)||void 0===e||e.forceAlign()}function te(e,t){var n=m(t);H!==n&&U(n),$((function(e){return e+1})),"align"===z&&(null==E||E(e,t))}(0,K.Z)((function(){"alignPre"===z&&$(0)}),[z]),(0,K.Z)((function(){"align"===z&&(Q<2?ee():q((function(){var e;null===(e=J.current)||void 0===e||e.call(J)})))}),[Q]);var ne=(0,o.Z)({},x(e));function oe(){return new Promise((function(e){J.current=e}))}["onAppearEnd","onEnterEnd","onLeaveEnd"].forEach((function(e){var t=ne[e];ne[e]=function(e,n){return q(),null==t?void 0:t(e,n)}})),d.useEffect((function(){ne.motionName||"motion"!==z||q()}),[ne.motionName,z]),d.useImperativeHandle(t,(function(){return{forceAlign:ee,getElement:function(){return A.current}}}));var re=(0,o.Z)((0,o.Z)({},B),{},{zIndex:l,opacity:"motion"!==z&&"stable"!==z&&n?0:void 0,pointerEvents:n||"stable"===z?void 0:"none"},s),ae=!0;!(null==h?void 0:h.points)||"align"!==z&&"stable"!==z||(ae=!1);var ie=c;return d.Children.count(c)>1&&(ie=d.createElement("div",{className:"".concat(a,"-content")},c)),d.createElement(w.Z,(0,r.Z)({visible:n,ref:A,leavedClassName:"".concat(a,"-hidden")},ne,{onAppearPrepare:oe,onEnterPrepare:oe,removeOnLeave:f,forceRender:v}),(function(e,t){var n=e.className,r=e.style,s=k()(a,i,H,n);return d.createElement(S.Z,{target:g||y,key:"popup",ref:R,monitorWindowResize:!0,disabled:ae,align:h,onAlign:te},d.createElement("div",{ref:t,className:s,onMouseEnter:C,onMouseLeave:b,onMouseDownCapture:T,onTouchStartCapture:Z,onClick:L,style:(0,o.Z)((0,o.Z)({},r),re)},ie))}))}));Z.displayName="PopupInner";const L=Z;var R=d.forwardRef((function(e,t){var n=e.prefixCls,a=e.visible,i=e.zIndex,s=e.children,c=e.mobile,l=(c=void 0===c?{}:c).popupClassName,u=c.popupStyle,p=c.popupMotion,f=void 0===p?{}:p,v=c.popupRender,h=e.onClick,g=d.useRef();d.useImperativeHandle(t,(function(){return{forceAlign:function(){},getElement:function(){return g.current}}}));var y=(0,o.Z)({zIndex:i},u),m=s;return d.Children.count(s)>1&&(m=d.createElement("div",{className:"".concat(n,"-content")},s)),v&&(m=v(m)),d.createElement(w.Z,(0,r.Z)({visible:a,ref:g,removeOnLeave:!0},f),(function(e,t){var r=e.className,a=e.style,i=k()(n,l,r);return d.createElement("div",{ref:t,className:i,onClick:h,style:(0,o.Z)((0,o.Z)({},a),y)},m)}))}));R.displayName="MobilePopupInner";const A=R;var I=["visible","mobile"],_=d.forwardRef((function(e,t){var n=e.visible,a=e.mobile,i=(0,C.Z)(e,I),s=(0,d.useState)(n),c=(0,N.Z)(s,2),l=c[0],u=c[1],p=(0,d.useState)(!1),f=(0,N.Z)(p,2),v=f[0],h=f[1],g=(0,o.Z)((0,o.Z)({},i),{},{visible:l});(0,d.useEffect)((function(){u(n),n&&a&&h((0,b.Z)())}),[n,a]);var y=v?d.createElement(A,(0,r.Z)({},g,{mobile:a,ref:t})):d.createElement(L,(0,r.Z)({},g,{ref:t}));return d.createElement("div",null,d.createElement(T,g),y)}));_.displayName="Popup";const H=_,U=d.createContext(null);function F(){}var V=["onClick","onMouseDown","onTouchStart","onMouseEnter","onMouseLeave","onFocus","onBlur","onContextMenu"];const B=(W=y.Z,(j=function(e){(0,c.Z)(n,e);var t=(0,l.Z)(n);function n(e){var o,i;return(0,a.Z)(this,n),(o=t.call(this,e)).popupRef=d.createRef(),o.triggerRef=d.createRef(),o.portalContainer=void 0,o.attachId=void 0,o.clickOutsideHandler=void 0,o.touchOutsideHandler=void 0,o.contextMenuOutsideHandler1=void 0,o.contextMenuOutsideHandler2=void 0,o.mouseDownTimeout=void 0,o.focusTime=void 0,o.preClickTime=void 0,o.preTouchTime=void 0,o.delayTimer=void 0,o.hasPopupMouseDown=void 0,o.onMouseEnter=function(e){var t=o.props.mouseEnterDelay;o.fireEvents("onMouseEnter",e),o.delaySetPopupVisible(!0,t,t?null:e)},o.onMouseMove=function(e){o.fireEvents("onMouseMove",e),o.setPoint(e)},o.onMouseLeave=function(e){o.fireEvents("onMouseLeave",e),o.delaySetPopupVisible(!1,o.props.mouseLeaveDelay)},o.onPopupMouseEnter=function(){o.clearDelayTimer()},o.onPopupMouseLeave=function(e){var t;e.relatedTarget&&!e.relatedTarget.setTimeout&&(0,f.Z)(null===(t=o.popupRef.current)||void 0===t?void 0:t.getElement(),e.relatedTarget)||o.delaySetPopupVisible(!1,o.props.mouseLeaveDelay)},o.onFocus=function(e){o.fireEvents("onFocus",e),o.clearDelayTimer(),o.isFocusToShow()&&(o.focusTime=Date.now(),o.delaySetPopupVisible(!0,o.props.focusDelay))},o.onMouseDown=function(e){o.fireEvents("onMouseDown",e),o.preClickTime=Date.now()},o.onTouchStart=function(e){o.fireEvents("onTouchStart",e),o.preTouchTime=Date.now()},o.onBlur=function(e){o.fireEvents("onBlur",e),o.clearDelayTimer(),o.isBlurToHide()&&o.delaySetPopupVisible(!1,o.props.blurDelay)},o.onContextMenu=function(e){e.preventDefault(),o.fireEvents("onContextMenu",e),o.setPopupVisible(!0,e)},o.onContextMenuClose=function(){o.isContextMenuToShow()&&o.close()},o.onClick=function(e){if(o.fireEvents("onClick",e),o.focusTime){var t;if(o.preClickTime&&o.preTouchTime?t=Math.min(o.preClickTime,o.preTouchTime):o.preClickTime?t=o.preClickTime:o.preTouchTime&&(t=o.preTouchTime),Math.abs(t-o.focusTime)<20)return;o.focusTime=0}o.preClickTime=0,o.preTouchTime=0,o.isClickToShow()&&(o.isClickToHide()||o.isBlurToHide())&&e&&e.preventDefault&&e.preventDefault();var n=!o.state.popupVisible;(o.isClickToHide()&&!n||n&&o.isClickToShow())&&o.setPopupVisible(!o.state.popupVisible,e)},o.onPopupMouseDown=function(){var e;o.hasPopupMouseDown=!0,clearTimeout(o.mouseDownTimeout),o.mouseDownTimeout=window.setTimeout((function(){o.hasPopupMouseDown=!1}),0),o.context&&(e=o.context).onPopupMouseDown.apply(e,arguments)},o.onDocumentClick=function(e){if(!o.props.mask||o.props.maskClosable){var t=e.target,n=o.getRootDomNode(),r=o.getPopupDomNode();(0,f.Z)(n,t)&&!o.isContextMenuOnly()||(0,f.Z)(r,t)||o.hasPopupMouseDown||o.close()}},o.getRootDomNode=function(){var e=o.props.getTriggerDOMNode;if(e)return e(o.triggerRef.current);try{var t=(0,v.Z)(o.triggerRef.current);if(t)return t}catch(e){}return u.findDOMNode((0,s.Z)(o))},o.getPopupClassNameFromAlign=function(e){var t=[],n=o.props,r=n.popupPlacement,a=n.builtinPlacements,i=n.prefixCls,s=n.alignPoint,c=n.getPopupClassNameFromAlign;return r&&a&&t.push(function(e,t,n,o){for(var r=n.points,a=Object.keys(e),i=0;i<a.length;i+=1){var s=a[i];if(E(e[s].points,r,o))return"".concat(t,"-placement-").concat(s)}return""}(a,i,e,s)),c&&t.push(c(e)),t.join(" ")},o.getComponent=function(){var e=o.props,t=e.prefixCls,n=e.destroyPopupOnHide,a=e.popupClassName,i=e.onPopupAlign,s=e.popupMotion,c=e.popupAnimation,l=e.popupTransitionName,u=e.popupStyle,p=e.mask,f=e.maskAnimation,v=e.maskTransitionName,h=e.maskMotion,g=e.zIndex,y=e.popup,m=e.stretch,k=e.alignPoint,E=e.mobile,N=e.forceRender,C=e.onPopupClick,b=o.state,w=b.popupVisible,x=b.point,T=o.getPopupAlign(),S={};return o.isMouseEnterToShow()&&(S.onMouseEnter=o.onPopupMouseEnter),o.isMouseLeaveToHide()&&(S.onMouseLeave=o.onPopupMouseLeave),S.onMouseDown=o.onPopupMouseDown,S.onTouchStart=o.onPopupMouseDown,d.createElement(H,(0,r.Z)({prefixCls:t,destroyPopupOnHide:n,visible:w,point:k&&x,className:a,align:T,onAlign:i,animation:c,getClassNameFromAlign:o.getPopupClassNameFromAlign},S,{stretch:m,getRootDomNode:o.getRootDomNode,style:u,mask:p,zIndex:g,transitionName:l,maskAnimation:f,maskTransitionName:v,maskMotion:h,ref:o.popupRef,motion:s,mobile:E,forceRender:N,onClick:C}),"function"==typeof y?y():y)},o.attachParent=function(e){p.Z.cancel(o.attachId);var t,n=o.props,r=n.getPopupContainer,a=n.getDocument,i=o.getRootDomNode();r?(i||0===r.length)&&(t=r(i)):t=a(o.getRootDomNode()).body,t?t.appendChild(e):o.attachId=(0,p.Z)((function(){o.attachParent(e)}))},o.getContainer=function(){if(!o.portalContainer){var e=(0,o.props.getDocument)(o.getRootDomNode()).createElement("div");e.style.position="absolute",e.style.top="0",e.style.left="0",e.style.width="100%",o.portalContainer=e}return o.attachParent(o.portalContainer),o.portalContainer},o.setPoint=function(e){o.props.alignPoint&&e&&o.setState({point:{pageX:e.pageX,pageY:e.pageY}})},o.handlePortalUpdate=function(){o.state.prevPopupVisible!==o.state.popupVisible&&o.props.afterPopupVisibleChange(o.state.popupVisible)},o.triggerContextValue={onPopupMouseDown:o.onPopupMouseDown},i="popupVisible"in e?!!e.popupVisible:!!e.defaultPopupVisible,o.state={prevPopupVisible:i,popupVisible:i},V.forEach((function(e){o["fire".concat(e)]=function(t){o.fireEvents(e,t)}})),o}return(0,i.Z)(n,[{key:"componentDidMount",value:function(){this.componentDidUpdate()}},{key:"componentDidUpdate",value:function(){var e,t=this.props;if(this.state.popupVisible)return this.clickOutsideHandler||!this.isClickToHide()&&!this.isContextMenuToShow()||(e=t.getDocument(this.getRootDomNode()),this.clickOutsideHandler=(0,g.Z)(e,"mousedown",this.onDocumentClick)),this.touchOutsideHandler||(e=e||t.getDocument(this.getRootDomNode()),this.touchOutsideHandler=(0,g.Z)(e,"touchstart",this.onDocumentClick)),!this.contextMenuOutsideHandler1&&this.isContextMenuToShow()&&(e=e||t.getDocument(this.getRootDomNode()),this.contextMenuOutsideHandler1=(0,g.Z)(e,"scroll",this.onContextMenuClose)),void(!this.contextMenuOutsideHandler2&&this.isContextMenuToShow()&&(this.contextMenuOutsideHandler2=(0,g.Z)(window,"blur",this.onContextMenuClose)));this.clearOutsideHandler()}},{key:"componentWillUnmount",value:function(){this.clearDelayTimer(),this.clearOutsideHandler(),clearTimeout(this.mouseDownTimeout),p.Z.cancel(this.attachId)}},{key:"getPopupDomNode",value:function(){var e;return(null===(e=this.popupRef.current)||void 0===e?void 0:e.getElement())||null}},{key:"getPopupAlign",value:function(){var e=this.props,t=e.popupPlacement,n=e.popupAlign,r=e.builtinPlacements;return t&&r?function(e,t,n){var r=e[t]||{};return(0,o.Z)((0,o.Z)({},r),n)}(r,t,n):n}},{key:"setPopupVisible",value:function(e,t){var n=this.props.alignPoint,o=this.state.popupVisible;this.clearDelayTimer(),o!==e&&("popupVisible"in this.props||this.setState({popupVisible:e,prevPopupVisible:o}),this.props.onPopupVisibleChange(e)),n&&t&&e&&this.setPoint(t)}},{key:"delaySetPopupVisible",value:function(e,t,n){var o=this,r=1e3*t;if(this.clearDelayTimer(),r){var a=n?{pageX:n.pageX,pageY:n.pageY}:null;this.delayTimer=window.setTimeout((function(){o.setPopupVisible(e,a),o.clearDelayTimer()}),r)}else this.setPopupVisible(e,n)}},{key:"clearDelayTimer",value:function(){this.delayTimer&&(clearTimeout(this.delayTimer),this.delayTimer=null)}},{key:"clearOutsideHandler",value:function(){this.clickOutsideHandler&&(this.clickOutsideHandler.remove(),this.clickOutsideHandler=null),this.contextMenuOutsideHandler1&&(this.contextMenuOutsideHandler1.remove(),this.contextMenuOutsideHandler1=null),this.contextMenuOutsideHandler2&&(this.contextMenuOutsideHandler2.remove(),this.contextMenuOutsideHandler2=null),this.touchOutsideHandler&&(this.touchOutsideHandler.remove(),this.touchOutsideHandler=null)}},{key:"createTwoChains",value:function(e){var t=this.props.children.props,n=this.props;return t[e]&&n[e]?this["fire".concat(e)]:t[e]||n[e]}},{key:"isClickToShow",value:function(){var e=this.props,t=e.action,n=e.showAction;return-1!==t.indexOf("click")||-1!==n.indexOf("click")}},{key:"isContextMenuOnly",value:function(){var e=this.props.action;return"contextMenu"===e||1===e.length&&"contextMenu"===e[0]}},{key:"isContextMenuToShow",value:function(){var e=this.props,t=e.action,n=e.showAction;return-1!==t.indexOf("contextMenu")||-1!==n.indexOf("contextMenu")}},{key:"isClickToHide",value:function(){var e=this.props,t=e.action,n=e.hideAction;return-1!==t.indexOf("click")||-1!==n.indexOf("click")}},{key:"isMouseEnterToShow",value:function(){var e=this.props,t=e.action,n=e.showAction;return-1!==t.indexOf("hover")||-1!==n.indexOf("mouseEnter")}},{key:"isMouseLeaveToHide",value:function(){var e=this.props,t=e.action,n=e.hideAction;return-1!==t.indexOf("hover")||-1!==n.indexOf("mouseLeave")}},{key:"isFocusToShow",value:function(){var e=this.props,t=e.action,n=e.showAction;return-1!==t.indexOf("focus")||-1!==n.indexOf("focus")}},{key:"isBlurToHide",value:function(){var e=this.props,t=e.action,n=e.hideAction;return-1!==t.indexOf("focus")||-1!==n.indexOf("blur")}},{key:"forcePopupAlign",value:function(){var e;this.state.popupVisible&&(null===(e=this.popupRef.current)||void 0===e||e.forceAlign())}},{key:"fireEvents",value:function(e,t){var n=this.props.children.props[e];n&&n(t);var o=this.props[e];o&&o(t)}},{key:"close",value:function(){this.setPopupVisible(!1)}},{key:"render",value:function(){var e=this.state.popupVisible,t=this.props,n=t.children,r=t.forceRender,a=t.alignPoint,i=t.className,s=t.autoDestroy,c=d.Children.only(n),l={key:"trigger"};this.isContextMenuToShow()?l.onContextMenu=this.onContextMenu:l.onContextMenu=this.createTwoChains("onContextMenu"),this.isClickToHide()||this.isClickToShow()?(l.onClick=this.onClick,l.onMouseDown=this.onMouseDown,l.onTouchStart=this.onTouchStart):(l.onClick=this.createTwoChains("onClick"),l.onMouseDown=this.createTwoChains("onMouseDown"),l.onTouchStart=this.createTwoChains("onTouchStart")),this.isMouseEnterToShow()?(l.onMouseEnter=this.onMouseEnter,a&&(l.onMouseMove=this.onMouseMove)):l.onMouseEnter=this.createTwoChains("onMouseEnter"),this.isMouseLeaveToHide()?l.onMouseLeave=this.onMouseLeave:l.onMouseLeave=this.createTwoChains("onMouseLeave"),this.isFocusToShow()||this.isBlurToHide()?(l.onFocus=this.onFocus,l.onBlur=this.onBlur):(l.onFocus=this.createTwoChains("onFocus"),l.onBlur=this.createTwoChains("onBlur"));var u=k()(c&&c.props&&c.props.className,i);u&&(l.className=u);var p=(0,o.Z)({},l);(0,h.Yr)(c)&&(p.ref=(0,h.sQ)(this.triggerRef,c.ref));var f,v=d.cloneElement(c,p);return(e||this.popupRef.current||r)&&(f=d.createElement(W,{key:"portal",getContainer:this.getContainer,didUpdate:this.handlePortalUpdate},this.getComponent())),!e&&s&&(f=null),d.createElement(U.Provider,{value:this.triggerContextValue},v,f)}}],[{key:"getDerivedStateFromProps",value:function(e,t){var n=e.popupVisible,o={};return void 0!==n&&t.popupVisible!==n&&(o.popupVisible=n,o.prevPopupVisible=t.popupVisible),o}}]),n}(d.Component)).contextType=U,j.defaultProps={prefixCls:"rc-trigger-popup",getPopupClassNameFromAlign:function(){return""},getDocument:function(e){return e?e.ownerDocument:window.document},onPopupVisibleChange:F,afterPopupVisibleChange:F,onPopupAlign:F,popupClassName:"",mouseEnterDelay:0,mouseLeaveDelay:.1,focusDelay:0,blurDelay:.15,popupStyle:{},destroyPopupOnHide:!1,popupAlign:{},defaultPopupVisible:!1,mask:!1,maskClosable:!0,action:[],showAction:[],hideAction:[],autoDestroy:!1},j);var W,j},50344:(e,t,n)=>{n.d(t,{Z:()=>a});var o=n(67294),r=n(59864);function a(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=[];return o.Children.forEach(e,(function(e){(null!=e||t.keepEmpty)&&(Array.isArray(e)?n=n.concat(a(e)):(0,r.isFragment)(e)&&e.props?n=n.concat(a(e.props.children,t)):n.push(e))})),n}},64019:(e,t,n)=>{n.d(t,{Z:()=>r});var o=n(73935);function r(e,t,n,r){var a=o.unstable_batchedUpdates?function(e){o.unstable_batchedUpdates(n,e)}:n;return e.addEventListener&&e.addEventListener(t,a,r),{remove:function(){e.removeEventListener&&e.removeEventListener(t,a,r)}}}},98924:(e,t,n)=>{function o(){return!("undefined"==typeof window||!window.document||!window.document.createElement)}n.d(t,{Z:()=>o})},94999:(e,t,n)=>{function o(e,t){return!!e&&e.contains(t)}n.d(t,{Z:()=>o})},44958:(e,t,n)=>{n.d(t,{hq:()=>d});var o=n(98924),r="rc-util-key";function a(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.mark;return t?t.startsWith("data-")?t:"data-".concat(t):r}function i(e){return e.attachTo?e.attachTo:document.querySelector("head")||document.body}function s(e){var t,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!(0,o.Z)())return null;var r,a=document.createElement("style");(null===(t=n.csp)||void 0===t?void 0:t.nonce)&&(a.nonce=null===(r=n.csp)||void 0===r?void 0:r.nonce),a.innerHTML=e;var s=i(n),c=s.firstChild;return n.prepend&&s.prepend?s.prepend(a):n.prepend&&c?s.insertBefore(a,c):s.appendChild(a),a}var c=new Map;function l(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=i(t);return Array.from(c.get(n).children).find((function(n){return"STYLE"===n.tagName&&n.getAttribute(a(t))===e}))}function d(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o=i(n);if(!c.has(o)){var r=s("",n),d=r.parentNode;c.set(o,d),d.removeChild(r)}var u,p,f,v=l(t,n);if(v)return(null===(u=n.csp)||void 0===u?void 0:u.nonce)&&v.nonce!==(null===(p=n.csp)||void 0===p?void 0:p.nonce)&&(v.nonce=null===(f=n.csp)||void 0===f?void 0:f.nonce),v.innerHTML!==e&&(v.innerHTML=e),v;var h=s(e,n);return h.setAttribute(a(n),t),h}},34203:(e,t,n)=>{n.d(t,{Z:()=>r});var o=n(73935);function r(e){return e instanceof HTMLElement?e:o.findDOMNode(e)}},5110:(e,t,n)=>{n.d(t,{Z:()=>o});const o=function(e){if(!e)return!1;if(e.offsetParent)return!0;if(e.getBBox){var t=e.getBBox();if(t.width||t.height)return!0}if(e.getBoundingClientRect){var n=e.getBoundingClientRect();if(n.width||n.height)return!0}return!1}},15105:(e,t,n)=>{n.d(t,{Z:()=>r});var o={MAC_ENTER:3,BACKSPACE:8,TAB:9,NUM_CENTER:12,ENTER:13,SHIFT:16,CTRL:17,ALT:18,PAUSE:19,CAPS_LOCK:20,ESC:27,SPACE:32,PAGE_UP:33,PAGE_DOWN:34,END:35,HOME:36,LEFT:37,UP:38,RIGHT:39,DOWN:40,PRINT_SCREEN:44,INSERT:45,DELETE:46,ZERO:48,ONE:49,TWO:50,THREE:51,FOUR:52,FIVE:53,SIX:54,SEVEN:55,EIGHT:56,NINE:57,QUESTION_MARK:63,A:65,B:66,C:67,D:68,E:69,F:70,G:71,H:72,I:73,J:74,K:75,L:76,M:77,N:78,O:79,P:80,Q:81,R:82,S:83,T:84,U:85,V:86,W:87,X:88,Y:89,Z:90,META:91,WIN_KEY_RIGHT:92,CONTEXT_MENU:93,NUM_ZERO:96,NUM_ONE:97,NUM_TWO:98,NUM_THREE:99,NUM_FOUR:100,NUM_FIVE:101,NUM_SIX:102,NUM_SEVEN:103,NUM_EIGHT:104,NUM_NINE:105,NUM_MULTIPLY:106,NUM_PLUS:107,NUM_MINUS:109,NUM_PERIOD:110,NUM_DIVISION:111,F1:112,F2:113,F3:114,F4:115,F5:116,F6:117,F7:118,F8:119,F9:120,F10:121,F11:122,F12:123,NUMLOCK:144,SEMICOLON:186,DASH:189,EQUALS:187,COMMA:188,PERIOD:190,SLASH:191,APOSTROPHE:192,SINGLE_QUOTE:222,OPEN_SQUARE_BRACKET:219,BACKSLASH:220,CLOSE_SQUARE_BRACKET:221,WIN_KEY:224,MAC_FF_META:224,WIN_IME:229,isTextModifyingKeyEvent:function(e){var t=e.keyCode;if(e.altKey&&!e.ctrlKey||e.metaKey||t>=o.F1&&t<=o.F12)return!1;switch(t){case o.ALT:case o.CAPS_LOCK:case o.CONTEXT_MENU:case o.CTRL:case o.DOWN:case o.END:case o.ESC:case o.HOME:case o.INSERT:case o.LEFT:case o.MAC_FF_META:case o.META:case o.NUMLOCK:case o.NUM_CENTER:case o.PAGE_DOWN:case o.PAGE_UP:case o.PAUSE:case o.PRINT_SCREEN:case o.RIGHT:case o.SHIFT:case o.UP:case o.WIN_KEY:case o.WIN_KEY_RIGHT:return!1;default:return!0}},isCharacterKey:function(e){if(e>=o.ZERO&&e<=o.NINE)return!0;if(e>=o.NUM_ZERO&&e<=o.NUM_MULTIPLY)return!0;if(e>=o.A&&e<=o.Z)return!0;if(-1!==window.navigator.userAgent.indexOf("WebKit")&&0===e)return!0;switch(e){case o.SPACE:case o.QUESTION_MARK:case o.NUM_PLUS:case o.NUM_MINUS:case o.NUM_PERIOD:case o.NUM_DIVISION:case o.SEMICOLON:case o.DASH:case o.EQUALS:case o.COMMA:case o.PERIOD:case o.SLASH:case o.APOSTROPHE:case o.SINGLE_QUOTE:case o.OPEN_SQUARE_BRACKET:case o.BACKSLASH:case o.CLOSE_SQUARE_BRACKET:return!0;default:return!1}}};const r=o},59015:(e,t,n)=>{n.d(t,{Z:()=>i});var o=n(67294),r=n(73935),a=n(98924);const i=(0,o.forwardRef)((function(e,t){var n=e.didUpdate,i=e.getContainer,s=e.children,c=(0,o.useRef)(),l=(0,o.useRef)();(0,o.useImperativeHandle)(t,(function(){return{}}));var d=(0,o.useRef)(!1);return!d.current&&(0,a.Z)()&&(l.current=i(),c.current=l.current.parentNode,d.current=!0),(0,o.useEffect)((function(){null==n||n(e)})),(0,o.useEffect)((function(){return null===l.current.parentNode&&null!==c.current&&c.current.appendChild(l.current),function(){var e,t;null===(e=l.current)||void 0===e||null===(t=e.parentNode)||void 0===t||t.removeChild(l.current)}}),[]),l.current?r.createPortal(s,l.current):null}))},2016:(e,t,n)=>{n.d(t,{Z:()=>S});var o=n(15671),r=n(43144),a=n(79340),i=n(98557),s=n(71002),c=n(67294),l=n(75164),d=n(59015),u=n(98924),p=n(74204);const f=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!e)return{};var n=t.element,o=void 0===n?document.body:n,r={},a=Object.keys(e);return a.forEach((function(e){r[e]=o.style[e]})),a.forEach((function(t){o.style[t]=e[t]})),r};var v={};const h=function(e){if(document.body.scrollHeight>(window.innerHeight||document.documentElement.clientHeight)&&window.innerWidth>document.body.offsetWidth||e){var t="ant-scrolling-effect",n=new RegExp("".concat(t),"g"),o=document.body.className;if(e){if(!n.test(o))return;return f(v),v={},void(document.body.className=o.replace(n,"").trim())}var r=(0,p.Z)();if(r&&(v=f({position:"relative",width:"calc(100% - ".concat(r,"px)")}),!n.test(o))){var a="".concat(o," ").concat(t);document.body.className=a.trim()}}};var g=n(93433),y=[],m="ant-scrolling-effect",k=new RegExp("".concat(m),"g"),E=0,N=new Map,C=(0,r.Z)((function e(t){var n=this;(0,o.Z)(this,e),this.lockTarget=void 0,this.options=void 0,this.getContainer=function(){var e;return null===(e=n.options)||void 0===e?void 0:e.container},this.reLock=function(e){var t=y.find((function(e){return e.target===n.lockTarget}));t&&n.unLock(),n.options=e,t&&(t.options=e,n.lock())},this.lock=function(){var e;if(!y.some((function(e){return e.target===n.lockTarget})))if(y.some((function(e){var t,o=e.options;return(null==o?void 0:o.container)===(null===(t=n.options)||void 0===t?void 0:t.container)})))y=[].concat((0,g.Z)(y),[{target:n.lockTarget,options:n.options}]);else{var t=0,o=(null===(e=n.options)||void 0===e?void 0:e.container)||document.body;(o===document.body&&window.innerWidth-document.documentElement.clientWidth>0||o.scrollHeight>o.clientHeight)&&(t=(0,p.Z)());var r=o.className;if(0===y.filter((function(e){var t,o=e.options;return(null==o?void 0:o.container)===(null===(t=n.options)||void 0===t?void 0:t.container)})).length&&N.set(o,f({width:0!==t?"calc(100% - ".concat(t,"px)"):void 0,overflow:"hidden",overflowX:"hidden",overflowY:"hidden"},{element:o})),!k.test(r)){var a="".concat(r," ").concat(m);o.className=a.trim()}y=[].concat((0,g.Z)(y),[{target:n.lockTarget,options:n.options}])}},this.unLock=function(){var e,t=y.find((function(e){return e.target===n.lockTarget}));if(y=y.filter((function(e){return e.target!==n.lockTarget})),t&&!y.some((function(e){var n,o=e.options;return(null==o?void 0:o.container)===(null===(n=t.options)||void 0===n?void 0:n.container)}))){var o=(null===(e=n.options)||void 0===e?void 0:e.container)||document.body,r=o.className;k.test(r)&&(f(N.get(o),{element:o}),N.delete(o),o.className=o.className.replace(k,"").trim())}},this.lockTarget=E++,this.options=t})),b=0,w=(0,u.Z)(),x={},T=function(e){if(!w)return null;if(e){if("string"==typeof e)return document.querySelectorAll(e)[0];if("function"==typeof e)return e();if("object"===(0,s.Z)(e)&&e instanceof window.HTMLElement)return e}return document.body};const S=function(e){(0,a.Z)(n,e);var t=(0,i.Z)(n);function n(e){var r;return(0,o.Z)(this,n),(r=t.call(this,e)).container=void 0,r.componentRef=c.createRef(),r.rafId=void 0,r.scrollLocker=void 0,r.renderComponent=void 0,r.updateScrollLocker=function(e){var t=(e||{}).visible,n=r.props,o=n.getContainer,a=n.visible;a&&a!==t&&w&&T(o)!==r.scrollLocker.getContainer()&&r.scrollLocker.reLock({container:T(o)})},r.updateOpenCount=function(e){var t=e||{},n=t.visible,o=t.getContainer,a=r.props,i=a.visible,s=a.getContainer;i!==n&&w&&T(s)===document.body&&(i&&!n?b+=1:e&&(b-=1)),("function"==typeof s&&"function"==typeof o?s.toString()!==o.toString():s!==o)&&r.removeCurrentContainer()},r.attachToParent=function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(e||r.container&&!r.container.parentNode){var t=T(r.props.getContainer);return!!t&&(t.appendChild(r.container),!0)}return!0},r.getContainer=function(){return w?(r.container||(r.container=document.createElement("div"),r.attachToParent(!0)),r.setWrapperClassName(),r.container):null},r.setWrapperClassName=function(){var e=r.props.wrapperClassName;r.container&&e&&e!==r.container.className&&(r.container.className=e)},r.removeCurrentContainer=function(){var e,t;null===(e=r.container)||void 0===e||null===(t=e.parentNode)||void 0===t||t.removeChild(r.container)},r.switchScrollingEffect=function(){1!==b||Object.keys(x).length?b||(f(x),x={},h(!0)):(h(),x=f({overflow:"hidden",overflowX:"hidden",overflowY:"hidden"}))},r.scrollLocker=new C({container:T(e.getContainer)}),r}return(0,r.Z)(n,[{key:"componentDidMount",value:function(){var e=this;this.updateOpenCount(),this.attachToParent()||(this.rafId=(0,l.Z)((function(){e.forceUpdate()})))}},{key:"componentDidUpdate",value:function(e){this.updateOpenCount(e),this.updateScrollLocker(e),this.setWrapperClassName(),this.attachToParent()}},{key:"componentWillUnmount",value:function(){var e=this.props,t=e.visible,n=e.getContainer;w&&T(n)===document.body&&(b=t&&b?b-1:b),this.removeCurrentContainer(),l.Z.cancel(this.rafId)}},{key:"render",value:function(){var e=this.props,t=e.children,n=e.forceRender,o=e.visible,r=null,a={getOpenCount:function(){return b},getContainer:this.getContainer,switchScrollingEffect:this.switchScrollingEffect,scrollLocker:this.scrollLocker};return(n||o||this.componentRef.current)&&(r=c.createElement(d.Z,{getContainer:this.getContainer,ref:this.componentRef},t(a))),r}}]),n}(c.Component)},38135:(e,t,n)=>{var o;n.d(t,{s:()=>g,v:()=>E});var r,a=n(74165),i=n(15861),s=n(71002),c=n(1413),l=n(73935),d=(0,c.Z)({},o||(o=n.t(l,2))),u=d.version,p=d.render,f=d.unmountComponentAtNode;try{Number((u||"").split(".")[0])>=18&&(r=d.createRoot)}catch(e){}function v(e){var t=d.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;t&&"object"===(0,s.Z)(t)&&(t.usingClientEntryPoint=e)}var h="__rc_react_root__";function g(e,t){r?function(e,t){v(!0);var n=t[h]||r(t);v(!1),n.render(e),t[h]=n}(e,t):function(e,t){p(e,t)}(e,t)}function y(e){return m.apply(this,arguments)}function m(){return(m=(0,i.Z)((0,a.Z)().mark((function e(t){return(0,a.Z)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",Promise.resolve().then((function(){var e;null===(e=t[h])||void 0===e||e.unmount(),delete t[h]})));case 1:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function k(e){f(e)}function E(e){return N.apply(this,arguments)}function N(){return(N=(0,i.Z)((0,a.Z)().mark((function e(t){return(0,a.Z)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(void 0===r){e.next=2;break}return e.abrupt("return",y(t));case 2:k(t);case 3:case"end":return e.stop()}}),e)})))).apply(this,arguments)}},74204:(e,t,n)=>{var o;function r(e){if("undefined"==typeof document)return 0;if(e||void 0===o){var t=document.createElement("div");t.style.width="100%",t.style.height="200px";var n=document.createElement("div"),r=n.style;r.position="absolute",r.top="0",r.left="0",r.pointerEvents="none",r.visibility="hidden",r.width="200px",r.height="150px",r.overflow="hidden",n.appendChild(t),document.body.appendChild(n);var a=t.offsetWidth;n.style.overflow="scroll";var i=t.offsetWidth;a===i&&(i=n.clientWidth),document.body.removeChild(n),o=a-i}return o}n.d(t,{Z:()=>r})},7028:(e,t,n)=>{var o;n.d(t,{Z:()=>c});var r=n(29439),a=n(1413),i=n(67294),s=0;function c(e){var t=i.useState("ssr-id"),c=(0,r.Z)(t,2),l=c[0],d=c[1],u=(0,a.Z)({},o||(o=n.t(i,2))).useId,p=null==u?void 0:u();return i.useEffect((function(){if(!u){var e=s;s+=1,d("rc_unique_".concat(e))}}),[]),e||p||l}},8410:(e,t,n)=>{n.d(t,{Z:()=>r});var o=n(67294);const r=(0,n(98924).Z)()?o.useLayoutEffect:o.useEffect},56982:(e,t,n)=>{n.d(t,{Z:()=>r});var o=n(67294);function r(e,t,n){var r=o.useRef({});return"value"in r.current&&!n(r.current.condition,t)||(r.current.value=e(),r.current.condition=t),r.current.value}},76632:(e,t,n)=>{n.d(t,{Z:()=>d});var o=n(29439),r=n(67294);function a(e){var t=r.useRef();t.current=e;var n=r.useCallback((function(){for(var e,n=arguments.length,o=new Array(n),r=0;r<n;r++)o[r]=arguments[r];return null===(e=t.current)||void 0===e?void 0:e.call.apply(e,[t].concat(o))}),[]);return n}var i,s=n(8410),c=n(30470);function l(e){return void 0!==e}function d(e,t){var n,d,u,p=t||{},f=p.defaultValue,v=p.value,h=p.onChange,g=p.postState,y=(0,c.Z)((function(){var t,n=void 0;return l(v)?(n=v,t=i.PROP):l(f)?(n="function"==typeof f?f():f,t=i.PROP):(n="function"==typeof e?e():e,t=i.INNER),[n,t,n]})),m=(0,o.Z)(y,2),k=m[0],E=m[1],N=l(v)?v:k[0],C=g?g(N):N;n=function(){E((function(e){var t=(0,o.Z)(e,1)[0];return[v,i.PROP,t]}))},d=[v],u=r.useRef(!0),(0,s.Z)((function(){if(!u.current)return n()}),d),(0,s.Z)((function(){return u.current=!1,function(){u.current=!0}}),[]);var b=r.useRef(),w=a((function(e,t){E((function(t){var n=(0,o.Z)(t,3),r=n[0],a=n[1],s=n[2],c="function"==typeof e?e(r):e;if(c===r)return t;var l=a===i.INNER&&b.current!==s?s:r;return[c,i.INNER,l]}),t)})),x=a(h);return(0,s.Z)((function(){var e=(0,o.Z)(k,3),t=e[0],n=e[1],r=e[2];t!==r&&n===i.INNER&&(x(t,r),b.current=r)}),[k]),[C,w]}!function(e){e[e.INNER=0]="INNER",e[e.PROP=1]="PROP"}(i||(i={}))},30470:(e,t,n)=>{n.d(t,{Z:()=>a});var o=n(29439),r=n(67294);function a(e){var t=r.useRef(!1),n=r.useState(e),a=(0,o.Z)(n,2),i=a[0],s=a[1];return r.useEffect((function(){return t.current=!1,function(){t.current=!0}}),[]),[i,function(e,n){n&&t.current||s(e)}]}},31131:(e,t,n)=>{n.d(t,{Z:()=>o});const o=function(){if("undefined"==typeof navigator||"undefined"==typeof window)return!1;var e=navigator.userAgent||navigator.vendor||window.opera;return!(!/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(e)&&!/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw-(n|u)|c55\/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do(c|p)o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(-|_)|g1 u|g560|gene|gf-5|g-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd-(m|p|t)|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c(-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac( |-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk\/|se(c(-|0|1)|47|mc|nd|ri)|sgh-|shar|sie(-|m)|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel(i|m)|tim-|t-mo|to(pl|sh)|ts(70|m-|m3|m5)|tx-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/i.test(null==e?void 0:e.substr(0,4)))}},98423:(e,t,n)=>{n.d(t,{Z:()=>r});var o=n(1413);function r(e,t){var n=(0,o.Z)({},e);return Array.isArray(t)&&t.forEach((function(e){delete n[e]})),n}},64217:(e,t,n)=>{n.d(t,{Z:()=>c});var o=n(1413),r="".concat("accept acceptCharset accessKey action allowFullScreen allowTransparency\n    alt async autoComplete autoFocus autoPlay capture cellPadding cellSpacing challenge\n    charSet checked classID className colSpan cols content contentEditable contextMenu\n    controls coords crossOrigin data dateTime default defer dir disabled download draggable\n    encType form formAction formEncType formMethod formNoValidate formTarget frameBorder\n    headers height hidden high href hrefLang htmlFor httpEquiv icon id inputMode integrity\n    is keyParams keyType kind label lang list loop low manifest marginHeight marginWidth max maxLength media\n    mediaGroup method min minLength multiple muted name noValidate nonce open\n    optimum pattern placeholder poster preload radioGroup readOnly rel required\n    reversed role rowSpan rows sandbox scope scoped scrolling seamless selected\n    shape size sizes span spellCheck src srcDoc srcLang srcSet start step style\n    summary tabIndex target title type useMap value width wmode wrap"," ").concat("onCopy onCut onPaste onCompositionEnd onCompositionStart onCompositionUpdate onKeyDown\n    onKeyPress onKeyUp onFocus onBlur onChange onInput onSubmit onClick onContextMenu onDoubleClick\n    onDrag onDragEnd onDragEnter onDragExit onDragLeave onDragOver onDragStart onDrop onMouseDown\n    onMouseEnter onMouseLeave onMouseMove onMouseOut onMouseOver onMouseUp onSelect onTouchCancel\n    onTouchEnd onTouchMove onTouchStart onScroll onWheel onAbort onCanPlay onCanPlayThrough\n    onDurationChange onEmptied onEncrypted onEnded onError onLoadedData onLoadedMetadata\n    onLoadStart onPause onPlay onPlaying onProgress onRateChange onSeeked onSeeking onStalled onSuspend onTimeUpdate onVolumeChange onWaiting onLoad onError").split(/[\s\n]+/),a="aria-",i="data-";function s(e,t){return 0===e.indexOf(t)}function c(e){var t,n=arguments.length>1&&void 0!==arguments[1]&&arguments[1];t=!1===n?{aria:!0,data:!0,attr:!0}:!0===n?{aria:!0}:(0,o.Z)({},n);var c={};return Object.keys(e).forEach((function(n){(t.aria&&("role"===n||s(n,a))||t.data&&s(n,i)||t.attr&&r.includes(n))&&(c[n]=e[n])})),c}},75164:(e,t,n)=>{n.d(t,{Z:()=>c});var o=function(e){return+setTimeout(e,16)},r=function(e){return clearTimeout(e)};"undefined"!=typeof window&&"requestAnimationFrame"in window&&(o=function(e){return window.requestAnimationFrame(e)},r=function(e){return window.cancelAnimationFrame(e)});var a=0,i=new Map;function s(e){i.delete(e)}function c(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,n=a+=1;function r(t){if(0===t)s(n),e();else{var a=o((function(){r(t-1)}));i.set(n,a)}}return r(t),n}c.cancel=function(e){var t=i.get(e);return s(t),r(t)}},42550:(e,t,n)=>{n.d(t,{Yr:()=>l,mH:()=>i,sQ:()=>s,x1:()=>c});var o=n(71002),r=n(59864),a=n(56982);function i(e,t){"function"==typeof e?e(t):"object"===(0,o.Z)(e)&&e&&"current"in e&&(e.current=t)}function s(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var o=t.filter((function(e){return e}));return o.length<=1?o[0]:function(e){t.forEach((function(t){i(t,e)}))}}function c(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return(0,a.Z)((function(){return s.apply(void 0,t)}),t,(function(e,t){return e.length===t.length&&e.every((function(e,n){return e===t[n]}))}))}function l(e){var t,n,o=(0,r.isMemo)(e)?e.type.type:e.type;return!("function"==typeof o&&!(null===(t=o.prototype)||void 0===t?void 0:t.render)||"function"==typeof e&&!(null===(n=e.prototype)||void 0===n?void 0:n.render))}},95013:(e,t,n)=>{function o(e,t){for(var n=e,o=0;o<t.length;o+=1){if(null==n)return;n=n[t[o]]}return n}n.d(t,{Z:()=>o})},8880:(e,t,n)=>{n.d(t,{Z:()=>c});var o=n(1413),r=n(93433),a=n(84506),i=n(95013);function s(e,t,n,i){if(!t.length)return n;var c,l=(0,a.Z)(t),d=l[0],u=l.slice(1);return c=e||"number"!=typeof d?Array.isArray(e)?(0,r.Z)(e):(0,o.Z)({},e):[],i&&void 0===n&&1===u.length?delete c[d][u[0]]:c[d]=s(c[d],u,n,i),c}function c(e,t,n){var o=arguments.length>3&&void 0!==arguments[3]&&arguments[3];return t.length&&o&&void 0===n&&!(0,i.Z)(e,t.slice(0,-1))?e:s(e,t,n,o)}},80334:(e,t,n)=>{n.d(t,{Kp:()=>r,ZP:()=>a});var o={};function r(e,t){}const a=function(e,t){!function(e,t,n){t||o[n]||(e(!1,n),o[n]=!0)}(r,e,t)}},19158:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){return!("undefined"==typeof window||!window.document||!window.document.createElement)}},93399:(e,t,n)=>{var o=n(64836);Object.defineProperty(t,"__esModule",{value:!0}),t.injectCSS=c,t.removeCSS=function(e){var t,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=d(e,n);null==o||null===(t=o.parentNode)||void 0===t||t.removeChild(o)},t.updateCSS=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o=s(n);if(!l.has(o)){var r=c("",n),a=r.parentNode;l.set(o,a),a.removeChild(r)}var u,p,f,v=d(t,n);if(v)return(null===(u=n.csp)||void 0===u?void 0:u.nonce)&&v.nonce!==(null===(p=n.csp)||void 0===p?void 0:p.nonce)&&(v.nonce=null===(f=n.csp)||void 0===f?void 0:f.nonce),v.innerHTML!==e&&(v.innerHTML=e),v;var h=c(e,n);return h.setAttribute(i(n),t),h};var r=o(n(19158)),a="rc-util-key";function i(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.mark;return t?t.startsWith("data-")?t:"data-".concat(t):a}function s(e){return e.attachTo?e.attachTo:document.querySelector("head")||document.body}function c(e){var t,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!(0,r.default)())return null;var o,a=document.createElement("style");(null===(t=n.csp)||void 0===t?void 0:t.nonce)&&(a.nonce=null===(o=n.csp)||void 0===o?void 0:o.nonce),a.innerHTML=e;var i=s(n),c=i.firstChild;return n.prepend&&i.prepend?i.prepend(a):n.prepend&&c?i.insertBefore(a,c):i.appendChild(a),a}var l=new Map;function d(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=s(t);return Array.from(l.get(n).children).find((function(n){return"STYLE"===n.tagName&&n.getAttribute(i(t))===e}))}},18545:(e,t,n)=>{var o=n(75263);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=r.useRef();t.current=e;var n=r.useCallback((function(){for(var e,n=arguments.length,o=new Array(n),r=0;r<n;r++)o[r]=arguments[r];return null===(e=t.current)||void 0===e?void 0:e.call.apply(e,[t].concat(o))}),[]);return n};var r=o(n(67294))},82546:(e,t,n)=>{var o=n(64836),r=n(75263);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(67294)),i=(0,o(n(19158)).default)()?a.useLayoutEffect:a.useEffect;t.default=i},67265:(e,t,n)=>{var o=n(75263);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n){var o=r.useRef({});return"value"in o.current&&!n(o.current.condition,t)||(o.current.value=e(),o.current.condition=t),o.current.value};var r=o(n(67294))},60869:(e,t,n)=>{var o=n(75263),r=n(64836);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var n,o,r,p=t||{},f=p.defaultValue,v=p.value,h=p.onChange,g=p.postState,y=(0,d.default)((function(){var t,n=void 0;return u(v)?(n=v,t=a.PROP):u(f)?(n="function"==typeof f?f():f,t=a.PROP):(n="function"==typeof e?e():e,t=a.INNER),[n,t,n]})),m=(0,i.default)(y,2),k=m[0],E=m[1],N=u(v)?v:k[0],C=g?g(N):N;n=function(){E((function(e){var t=(0,i.default)(e,1)[0];return[v,a.PROP,t]}))},o=[v],r=s.useRef(!0),(0,l.default)((function(){if(!r.current)return n()}),o),(0,l.default)((function(){return r.current=!1,function(){r.current=!0}}),[]);var b=s.useRef(),w=(0,c.default)((function(e,t){E((function(t){var n=(0,i.default)(t,3),o=n[0],r=n[1],s=n[2],c="function"==typeof e?e(o):e;if(c===o)return t;var l=r===a.INNER&&b.current!==s?s:o;return[c,a.INNER,l]}),t)})),x=(0,c.default)(h);return(0,l.default)((function(){var e=(0,i.default)(k,3),t=e[0],n=e[1],o=e[2];t!==o&&n===a.INNER&&(x(t,o),b.current=o)}),[k]),[C,w]};var a,i=r(n(27424)),s=o(n(67294)),c=r(n(18545)),l=r(n(82546)),d=r(n(78423));function u(e){return void 0!==e}!function(e){e[e.INNER=0]="INNER",e[e.PROP=1]="PROP"}(a||(a={}))},78423:(e,t,n)=>{var o=n(75263),r=n(64836);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=i.useRef(!1),n=i.useState(e),o=(0,a.default)(n,2),r=o[0],s=o[1];return i.useEffect((function(){return t.current=!1,function(){t.current=!0}}),[]),[r,function(e,n){n&&t.current||s(e)}]};var a=r(n(27424)),i=o(n(67294))},18475:(e,t,n)=>{var o=n(64836);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var n=(0,r.default)({},e);return Array.isArray(t)&&t.forEach((function(e){delete n[e]})),n};var r=o(n(42122))},45520:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.call=a,t.default=void 0,t.note=r,t.noteOnce=function(e,t){a(r,e,t)},t.resetWarned=function(){n={}},t.warning=o,t.warningOnce=i;var n={};function o(e,t){}function r(e,t){}function a(e,t,o){t||n[o]||(e(!1,o),n[o]=!0)}function i(e,t){a(o,e,t)}var s=i;t.default=s}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,