/*! For license information please see common.js.LICENSE.txt */
(()=>{var t,e,n,r={597:(t,e,n)=>{"use strict";var r,i=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},o=(r=n(7294))&&r.__esModule?r:{default:r};e.Z=function(t){var e=t.fill,n=void 0===e?"currentColor":e,r=t.width,s=void 0===r?24:r,a=t.height,l=void 0===a?24:a,c=t.style,h=void 0===c?{}:c,u=function(t,e){var n={};for(var r in t)e.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r]);return n}(t,["fill","width","height","style"]);return o.default.createElement("svg",i({viewBox:"0 0 24 24",style:i({fill:n,width:s,height:l},h)},u),o.default.createElement("path",{d:"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"}))}},3891:(t,e,n)=>{"use strict";var r,i=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},o=(r=n(7294))&&r.__esModule?r:{default:r};e.Z=function(t){var e=t.fill,n=void 0===e?"currentColor":e,r=t.width,s=void 0===r?24:r,a=t.height,l=void 0===a?24:a,c=t.style,h=void 0===c?{}:c,u=function(t,e){var n={};for(var r in t)e.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r]);return n}(t,["fill","width","height","style"]);return o.default.createElement("svg",i({viewBox:"0 0 24 24",style:i({fill:n,width:s,height:l},h)},u),o.default.createElement("path",{d:"M12,18.17L8.83,15L7.42,16.41L12,21L16.59,16.41L15.17,15M12,5.83L15.17,9L16.58,7.59L12,3L7.41,7.59L8.83,9L12,5.83Z"}))}},5371:(t,e,n)=>{"use strict";n.d(e,{ML:()=>Yr,hj:()=>pr,vc:()=>Gr,NB:()=>Zr,Jo:()=>Dr,Cf:()=>Kr,K9:()=>Qr,P1:()=>Kn,pr:()=>Xr});var r=n(2376),i=n(7823),o=n(6560);const s="undefined"!=typeof navigator?navigator:null,a="undefined"!=typeof document?document:null,l=s&&s.userAgent||"",c=/Edge\/(\d+)/.exec(l),h=/MSIE \d/.exec(l),u=/Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(l),d=!!(h||u||c),p=h?document.documentMode:u?+u[1]:c?+c[1]:0,f=!d&&/gecko\/(\d+)/i.test(l);f&&(/Firefox\/(\d+)/.exec(l)||[0,0])[1];const g=!d&&/Chrome\/(\d+)/.exec(l),m=!!g,v=g?+g[1]:0,y=!d&&!!s&&/Apple Computer/.test(s.vendor),b=y&&(/Mobile\/\w+/.test(l)||!!s&&s.maxTouchPoints>2),w=b||!!s&&/Mac/.test(s.platform),x=/Android \d/.test(l),k=!!a&&"webkitFontSmoothing"in a.documentElement.style,S=k?+(/\bAppleWebKit\/(\d+)/.exec(navigator.userAgent)||[0,0])[1]:0,_=function(t){for(var e=0;;e++)if(!(t=t.previousSibling))return e},E=function(t){let e=t.assignedSlot||t.parentNode;return e&&11==e.nodeType?e.host:e};let C=null;const O=function(t,e,n){let r=C||(C=document.createRange());return r.setEnd(t,null==n?t.nodeValue.length:n),r.setStart(t,e||0),r},M=function(t,e,n,r){return n&&(T(t,e,n,r,-1)||T(t,e,n,r,1))},A=/^(img|br|input|textarea|hr)$/i;function T(t,e,n,r,i){for(;;){if(t==n&&e==r)return!0;if(e==(i<0?0:N(t))){let n=t.parentNode;if(!n||1!=n.nodeType||D(t)||A.test(t.nodeName)||"false"==t.contentEditable)return!1;e=_(t)+(i<0?0:1),t=n}else{if(1!=t.nodeType)return!1;if("false"==(t=t.childNodes[e+(i<0?-1:0)]).contentEditable)return!1;e=i<0?N(t):0}}}function N(t){return 3==t.nodeType?t.nodeValue.length:t.childNodes.length}function D(t){let e;for(let n=t;n&&!(e=n.pmViewDesc);n=n.parentNode);return e&&e.node&&e.node.isBlock&&(e.dom==t||e.contentDOM==t)}const j=function(t){let e=t.isCollapsed;return e&&m&&t.rangeCount&&!t.getRangeAt(0).collapsed&&(e=!1),e};function R(t,e){let n=document.createEvent("Event");return n.initEvent("keydown",!0,!0),n.keyCode=t,n.key=n.code=e,n}function P(t){return{left:0,right:t.documentElement.clientWidth,top:0,bottom:t.documentElement.clientHeight}}function z(t,e){return"number"==typeof t?t:t[e]}function I(t){let e=t.getBoundingClientRect(),n=e.width/t.offsetWidth||1,r=e.height/t.offsetHeight||1;return{left:e.left,right:e.left+t.clientWidth*n,top:e.top,bottom:e.top+t.clientHeight*r}}function B(t,e,n){let r=t.someProp("scrollThreshold")||0,i=t.someProp("scrollMargin")||5,o=t.dom.ownerDocument;for(let s=n||t.dom;s;s=E(s)){if(1!=s.nodeType)continue;let t=s,n=t==o.body,a=n?P(o):I(t),l=0,c=0;if(e.top<a.top+z(r,"top")?c=-(a.top-e.top+z(i,"top")):e.bottom>a.bottom-z(r,"bottom")&&(c=e.bottom-a.bottom+z(i,"bottom")),e.left<a.left+z(r,"left")?l=-(a.left-e.left+z(i,"left")):e.right>a.right-z(r,"right")&&(l=e.right-a.right+z(i,"right")),l||c)if(n)o.defaultView.scrollBy(l,c);else{let n=t.scrollLeft,r=t.scrollTop;c&&(t.scrollTop+=c),l&&(t.scrollLeft+=l);let i=t.scrollLeft-n,o=t.scrollTop-r;e={left:e.left-i,top:e.top-o,right:e.right-i,bottom:e.bottom-o}}if(n)break}}function F(t){let e=[],n=t.ownerDocument;for(let r=t;r&&(e.push({dom:r,top:r.scrollTop,left:r.scrollLeft}),t!=n);r=E(r));return e}function $(t,e){for(let n=0;n<t.length;n++){let{dom:r,top:i,left:o}=t[n];r.scrollTop!=i+e&&(r.scrollTop=i+e),r.scrollLeft!=o&&(r.scrollLeft=o)}}let L=null;function H(t,e){let n,r,i=2e8,o=0,s=e.top,a=e.top;for(let l=t.firstChild,c=0;l;l=l.nextSibling,c++){let t;if(1==l.nodeType)t=l.getClientRects();else{if(3!=l.nodeType)continue;t=O(l).getClientRects()}for(let h=0;h<t.length;h++){let u=t[h];if(u.top<=s&&u.bottom>=a){s=Math.max(u.bottom,s),a=Math.min(u.top,a);let t=u.left>e.left?u.left-e.left:u.right<e.left?e.left-u.right:0;if(t<i){n=l,i=t,r=t&&3==n.nodeType?{left:u.right<e.left?u.right:u.left,top:e.top}:e,1==l.nodeType&&t&&(o=c+(e.left>=(u.left+u.right)/2?1:0));continue}}!n&&(e.left>=u.right&&e.top>=u.top||e.left>=u.left&&e.top>=u.bottom)&&(o=c+1)}}return n&&3==n.nodeType?function(t,e){let n=t.nodeValue.length,r=document.createRange();for(let i=0;i<n;i++){r.setEnd(t,i+1),r.setStart(t,i);let n=U(r,1);if(n.top!=n.bottom&&V(e,n))return{node:t,offset:i+(e.left>=(n.left+n.right)/2?1:0)}}return{node:t,offset:0}}(n,r):!n||i&&1==n.nodeType?{node:t,offset:o}:H(n,r)}function V(t,e){return t.left>=e.left-1&&t.left<=e.right+1&&t.top>=e.top-1&&t.top<=e.bottom+1}function q(t,e,n){let r=t.childNodes.length;if(r&&n.top<n.bottom)for(let i=Math.max(0,Math.min(r-1,Math.floor(r*(e.top-n.top)/(n.bottom-n.top))-2)),o=i;;){let n=t.childNodes[o];if(1==n.nodeType){let t=n.getClientRects();for(let r=0;r<t.length;r++){let i=t[r];if(V(e,i))return q(n,e,i)}}if((o=(o+1)%r)==i)break}return t}function W(t,e){let n,r=t.dom.ownerDocument,i=0;if(r.caretPositionFromPoint)try{let t=r.caretPositionFromPoint(e.left,e.top);t&&({offsetNode:n,offset:i}=t)}catch(t){}if(!n&&r.caretRangeFromPoint){let t=r.caretRangeFromPoint(e.left,e.top);t&&({startContainer:n,startOffset:i}=t)}let o,s=(t.root.elementFromPoint?t.root:r).elementFromPoint(e.left,e.top+1);if(!s||!t.dom.contains(1!=s.nodeType?s.parentNode:s)){let n=t.dom.getBoundingClientRect();if(!V(e,n))return null;if(s=q(t.dom,e,n),!s)return null}if(y)for(let t=s;n&&t;t=E(t))t.draggable&&(n=void 0);if(s=function(t,e){let n=t.parentNode;return n&&/^li$/i.test(n.nodeName)&&e.left<t.getBoundingClientRect().left?n:t}(s,e),n){if(f&&1==n.nodeType&&(i=Math.min(i,n.childNodes.length),i<n.childNodes.length)){let t,r=n.childNodes[i];"IMG"==r.nodeName&&(t=r.getBoundingClientRect()).right<=e.left&&t.bottom>e.top&&i++}n==t.dom&&i==n.childNodes.length-1&&1==n.lastChild.nodeType&&e.top>n.lastChild.getBoundingClientRect().bottom?o=t.state.doc.content.size:0!=i&&1==n.nodeType&&"BR"==n.childNodes[i-1].nodeName||(o=function(t,e,n,r){let i=-1;for(let n=e;n!=t.dom;){let e=t.docView.nearestDesc(n,!0);if(!e)return null;if(e.node.isBlock&&e.parent){let t=e.dom.getBoundingClientRect();if(t.left>r.left||t.top>r.top)i=e.posBefore;else{if(!(t.right<r.left||t.bottom<r.top))break;i=e.posAfter}}n=e.dom.parentNode}return i>-1?i:t.docView.posFromDOM(e,n,1)}(t,n,i,e))}null==o&&(o=function(t,e,n){let{node:r,offset:i}=H(e,n),o=-1;if(1==r.nodeType&&!r.firstChild){let t=r.getBoundingClientRect();o=t.left!=t.right&&n.left>(t.left+t.right)/2?1:-1}return t.docView.posFromDOM(r,i,o)}(t,s,e));let a=t.docView.nearestDesc(s,!0);return{pos:o,inside:a?a.posAtStart-a.border:-1}}function U(t,e){let n=t.getClientRects();return n.length?n[e<0?0:n.length-1]:t.getBoundingClientRect()}const Y=/[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac]/;function J(t,e,n){let{node:r,offset:i}=t.docView.domFromPos(e,n<0?-1:1),o=k||f;if(3==r.nodeType){if(!o||!Y.test(r.nodeValue)&&(n<0?i:i!=r.nodeValue.length)){let t=i,e=i,o=n<0?1:-1;return n<0&&!i?(e++,o=-1):n>=0&&i==r.nodeValue.length?(t--,o=1):n<0?t--:e++,X(U(O(r,t,e),o),o<0)}{let t=U(O(r,i,i),n);if(f&&i&&/\s/.test(r.nodeValue[i-1])&&i<r.nodeValue.length){let e=U(O(r,i-1,i-1),-1);if(e.top==t.top){let n=U(O(r,i,i+1),-1);if(n.top!=t.top)return X(n,n.left<e.left)}}return t}}if(!t.state.doc.resolve(e).parent.inlineContent){if(i&&(n<0||i==N(r))){let t=r.childNodes[i-1];if(1==t.nodeType)return K(t.getBoundingClientRect(),!1)}if(i<N(r)){let t=r.childNodes[i];if(1==t.nodeType)return K(t.getBoundingClientRect(),!0)}return K(r.getBoundingClientRect(),n>=0)}if(i&&(n<0||i==N(r))){let t=r.childNodes[i-1],e=3==t.nodeType?O(t,N(t)-(o?0:1)):1!=t.nodeType||"BR"==t.nodeName&&t.nextSibling?null:t;if(e)return X(U(e,1),!1)}if(i<N(r)){let t=r.childNodes[i];for(;t.pmViewDesc&&t.pmViewDesc.ignoreForCoords;)t=t.nextSibling;let e=t?3==t.nodeType?O(t,0,o?0:1):1==t.nodeType?t:null:null;if(e)return X(U(e,-1),!0)}return X(U(3==r.nodeType?O(r):r,-n),n>=0)}function X(t,e){if(0==t.width)return t;let n=e?t.left:t.right;return{top:t.top,bottom:t.bottom,left:n,right:n}}function K(t,e){if(0==t.height)return t;let n=e?t.top:t.bottom;return{top:n,bottom:n,left:t.left,right:t.right}}function G(t,e,n){let r=t.state,i=t.root.activeElement;r!=e&&t.updateState(e),i!=t.dom&&t.focus();try{return n()}finally{r!=e&&t.updateState(r),i!=t.dom&&i&&i.focus()}}const Z=/[\u0590-\u08ac]/;let Q=null,tt=null,et=!1;class nt{constructor(t,e,n,r){this.parent=t,this.children=e,this.dom=n,this.contentDOM=r,this.dirty=0,n.pmViewDesc=this}matchesWidget(t){return!1}matchesMark(t){return!1}matchesNode(t,e,n){return!1}matchesHack(t){return!1}parseRule(){return null}stopEvent(t){return!1}get size(){let t=0;for(let e=0;e<this.children.length;e++)t+=this.children[e].size;return t}get border(){return 0}destroy(){this.parent=void 0,this.dom.pmViewDesc==this&&(this.dom.pmViewDesc=void 0);for(let t=0;t<this.children.length;t++)this.children[t].destroy()}posBeforeChild(t){for(let e=0,n=this.posAtStart;;e++){let r=this.children[e];if(r==t)return n;n+=r.size}}get posBefore(){return this.parent.posBeforeChild(this)}get posAtStart(){return this.parent?this.parent.posBeforeChild(this)+this.border:0}get posAfter(){return this.posBefore+this.size}get posAtEnd(){return this.posAtStart+this.size-2*this.border}localPosFromDOM(t,e,n){if(this.contentDOM&&this.contentDOM.contains(1==t.nodeType?t:t.parentNode)){if(n<0){let n,r;if(t==this.contentDOM)n=t.childNodes[e-1];else{for(;t.parentNode!=this.contentDOM;)t=t.parentNode;n=t.previousSibling}for(;n&&(!(r=n.pmViewDesc)||r.parent!=this);)n=n.previousSibling;return n?this.posBeforeChild(r)+r.size:this.posAtStart}{let n,r;if(t==this.contentDOM)n=t.childNodes[e];else{for(;t.parentNode!=this.contentDOM;)t=t.parentNode;n=t.nextSibling}for(;n&&(!(r=n.pmViewDesc)||r.parent!=this);)n=n.nextSibling;return n?this.posBeforeChild(r):this.posAtEnd}}let r;if(t==this.dom&&this.contentDOM)r=e>_(this.contentDOM);else if(this.contentDOM&&this.contentDOM!=this.dom&&this.dom.contains(this.contentDOM))r=2&t.compareDocumentPosition(this.contentDOM);else if(this.dom.firstChild){if(0==e)for(let e=t;;e=e.parentNode){if(e==this.dom){r=!1;break}if(e.previousSibling)break}if(null==r&&e==t.childNodes.length)for(let e=t;;e=e.parentNode){if(e==this.dom){r=!0;break}if(e.nextSibling)break}}return(null==r?n>0:r)?this.posAtEnd:this.posAtStart}nearestDesc(t,e=!1){for(let n=!0,r=t;r;r=r.parentNode){let i,o=this.getDesc(r);if(o&&(!e||o.node)){if(!n||!(i=o.nodeDOM)||(1==i.nodeType?i.contains(1==t.nodeType?t:t.parentNode):i==t))return o;n=!1}}}getDesc(t){let e=t.pmViewDesc;for(let t=e;t;t=t.parent)if(t==this)return e}posFromDOM(t,e,n){for(let r=t;r;r=r.parentNode){let i=this.getDesc(r);if(i)return i.localPosFromDOM(t,e,n)}return-1}descAt(t){for(let e=0,n=0;e<this.children.length;e++){let r=this.children[e],i=n+r.size;if(n==t&&i!=n){for(;!r.border&&r.children.length;)r=r.children[0];return r}if(t<i)return r.descAt(t-n-r.border);n=i}}domFromPos(t,e){if(!this.contentDOM)return{node:this.dom,offset:0};let n,r=0,i=0;for(let e=0;r<this.children.length;r++){let n=this.children[r],o=e+n.size;if(o>t||n instanceof ct){i=t-e;break}e=o}if(i)return this.children[r].domFromPos(i-this.children[r].border,e);for(;r&&!(n=this.children[r-1]).size&&n instanceof rt&&n.side>=0;r--);if(e<=0){let t,n=!0;for(;t=r?this.children[r-1]:null,t&&t.dom.parentNode!=this.contentDOM;r--,n=!1);return t&&e&&n&&!t.border&&!t.domAtom?t.domFromPos(t.size,e):{node:this.contentDOM,offset:t?_(t.dom)+1:0}}{let t,n=!0;for(;t=r<this.children.length?this.children[r]:null,t&&t.dom.parentNode!=this.contentDOM;r++,n=!1);return t&&n&&!t.border&&!t.domAtom?t.domFromPos(0,e):{node:this.contentDOM,offset:t?_(t.dom):this.contentDOM.childNodes.length}}}parseRange(t,e,n=0){if(0==this.children.length)return{node:this.contentDOM,from:t,to:e,fromOffset:0,toOffset:this.contentDOM.childNodes.length};let r=-1,i=-1;for(let o=n,s=0;;s++){let n=this.children[s],a=o+n.size;if(-1==r&&t<=a){let i=o+n.border;if(t>=i&&e<=a-n.border&&n.node&&n.contentDOM&&this.contentDOM.contains(n.contentDOM))return n.parseRange(t,e,i);t=o;for(let e=s;e>0;e--){let n=this.children[e-1];if(n.size&&n.dom.parentNode==this.contentDOM&&!n.emptyChildAt(1)){r=_(n.dom)+1;break}t-=n.size}-1==r&&(r=0)}if(r>-1&&(a>e||s==this.children.length-1)){e=a;for(let t=s+1;t<this.children.length;t++){let n=this.children[t];if(n.size&&n.dom.parentNode==this.contentDOM&&!n.emptyChildAt(-1)){i=_(n.dom);break}e+=n.size}-1==i&&(i=this.contentDOM.childNodes.length);break}o=a}return{node:this.contentDOM,from:t,to:e,fromOffset:r,toOffset:i}}emptyChildAt(t){if(this.border||!this.contentDOM||!this.children.length)return!1;let e=this.children[t<0?0:this.children.length-1];return 0==e.size||e.emptyChildAt(t)}domAfterPos(t){let{node:e,offset:n}=this.domFromPos(t,0);if(1!=e.nodeType||n==e.childNodes.length)throw new RangeError("No node after pos "+t);return e.childNodes[n]}setSelection(t,e,n,r=!1){let i=Math.min(t,e),o=Math.max(t,e);for(let s=0,a=0;s<this.children.length;s++){let l=this.children[s],c=a+l.size;if(i>a&&o<c)return l.setSelection(t-a-l.border,e-a-l.border,n,r);a=c}let s=this.domFromPos(t,t?-1:1),a=e==t?s:this.domFromPos(e,e?-1:1),l=n.getSelection(),c=!1;if((f||y)&&t==e){let{node:t,offset:e}=s;if(3==t.nodeType){if(c=!(!e||"\n"!=t.nodeValue[e-1]),c&&e==t.nodeValue.length)for(let e,n=t;n;n=n.parentNode){if(e=n.nextSibling){"BR"==e.nodeName&&(s=a={node:e.parentNode,offset:_(e)+1});break}let t=n.pmViewDesc;if(t&&t.node&&t.node.isBlock)break}}else{let n=t.childNodes[e-1];c=n&&("BR"==n.nodeName||"false"==n.contentEditable)}}if(f&&l.focusNode&&l.focusNode!=a.node&&1==l.focusNode.nodeType){let t=l.focusNode.childNodes[l.focusOffset];t&&"false"==t.contentEditable&&(r=!0)}if(!(r||c&&y)&&M(s.node,s.offset,l.anchorNode,l.anchorOffset)&&M(a.node,a.offset,l.focusNode,l.focusOffset))return;let h=!1;if((l.extend||t==e)&&!c){l.collapse(s.node,s.offset);try{t!=e&&l.extend(a.node,a.offset),h=!0}catch(t){if(!(t instanceof DOMException))throw t}}if(!h){if(t>e){let t=s;s=a,a=t}let n=document.createRange();n.setEnd(a.node,a.offset),n.setStart(s.node,s.offset),l.removeAllRanges(),l.addRange(n)}}ignoreMutation(t){return!this.contentDOM&&"selection"!=t.type}get contentLost(){return this.contentDOM&&this.contentDOM!=this.dom&&!this.dom.contains(this.contentDOM)}markDirty(t,e){for(let n=0,r=0;r<this.children.length;r++){let i=this.children[r],o=n+i.size;if(n==o?t<=o&&e>=n:t<o&&e>n){let r=n+i.border,s=o-i.border;if(t>=r&&e<=s)return this.dirty=t==n||e==o?2:1,void(t!=r||e!=s||!i.contentLost&&i.dom.parentNode==this.contentDOM?i.markDirty(t-r,e-r):i.dirty=3);i.dirty=i.dom!=i.contentDOM||i.dom.parentNode!=this.contentDOM||i.children.length?3:2}n=o}this.dirty=2}markParentsDirty(){let t=1;for(let e=this.parent;e;e=e.parent,t++){let n=1==t?2:1;e.dirty<n&&(e.dirty=n)}}get domAtom(){return!1}get ignoreForCoords(){return!1}}class rt extends nt{constructor(t,e,n,r){let i,o=e.type.toDOM;if("function"==typeof o&&(o=o(n,(()=>i?i.parent?i.parent.posBeforeChild(i):void 0:r))),!e.type.spec.raw){if(1!=o.nodeType){let t=document.createElement("span");t.appendChild(o),o=t}o.contentEditable="false",o.classList.add("ProseMirror-widget")}super(t,[],o,null),this.widget=e,this.widget=e,i=this}matchesWidget(t){return 0==this.dirty&&t.type.eq(this.widget.type)}parseRule(){return{ignore:!0}}stopEvent(t){let e=this.widget.spec.stopEvent;return!!e&&e(t)}ignoreMutation(t){return"selection"!=t.type||this.widget.spec.ignoreSelection}destroy(){this.widget.type.destroy(this.dom),super.destroy()}get domAtom(){return!0}get side(){return this.widget.type.side}}class it extends nt{constructor(t,e,n,r){super(t,[],e,null),this.textDOM=n,this.text=r}get size(){return this.text.length}localPosFromDOM(t,e){return t!=this.textDOM?this.posAtStart+(e?this.size:0):this.posAtStart+e}domFromPos(t){return{node:this.textDOM,offset:t}}ignoreMutation(t){return"characterData"===t.type&&t.target.nodeValue==t.oldValue}}class ot extends nt{constructor(t,e,n,r){super(t,[],n,r),this.mark=e}static create(t,e,n,r){let o=r.nodeViews[e.type.name],s=o&&o(e,r,n);return s&&s.dom||(s=i.PW.renderSpec(document,e.type.spec.toDOM(e,n))),new ot(t,e,s.dom,s.contentDOM||s.dom)}parseRule(){return 3&this.dirty||this.mark.type.spec.reparseInView?null:{mark:this.mark.type.name,attrs:this.mark.attrs,contentElement:this.contentDOM||void 0}}matchesMark(t){return 3!=this.dirty&&this.mark.eq(t)}markDirty(t,e){if(super.markDirty(t,e),0!=this.dirty){let t=this.parent;for(;!t.node;)t=t.parent;t.dirty<this.dirty&&(t.dirty=this.dirty),this.dirty=0}}slice(t,e,n){let r=ot.create(this.parent,this.mark,!0,n),i=this.children,o=this.size;e<o&&(i=kt(i,e,o,n)),t>0&&(i=kt(i,0,t,n));for(let t=0;t<i.length;t++)i[t].parent=r;return r.children=i,r}}class st extends nt{constructor(t,e,n,r,i,o,s,a,l){super(t,[],i,o),this.node=e,this.outerDeco=n,this.innerDeco=r,this.nodeDOM=s,o&&this.updateChildren(a,l)}static create(t,e,n,r,o,s){let a,l=o.nodeViews[e.type.name],c=l&&l(e,o,(()=>a?a.parent?a.parent.posBeforeChild(a):void 0:s),n,r),h=c&&c.dom,u=c&&c.contentDOM;if(e.isText)if(h){if(3!=h.nodeType)throw new RangeError("Text must be rendered as a DOM text node")}else h=document.createTextNode(e.text);else h||({dom:h,contentDOM:u}=i.PW.renderSpec(document,e.type.spec.toDOM(e)));u||e.isText||"BR"==h.nodeName||(h.hasAttribute("contenteditable")||(h.contentEditable="false"),e.type.spec.draggable&&(h.draggable=!0));let d=h;return h=vt(h,n,e),c?a=new ht(t,e,n,r,h,u||null,d,c,o,s+1):e.isText?new lt(t,e,n,r,h,d,o):new st(t,e,n,r,h,u||null,d,o,s+1)}parseRule(){if(this.node.type.spec.reparseInView)return null;let t={node:this.node.type.name,attrs:this.node.attrs};if("pre"==this.node.type.whitespace&&(t.preserveWhitespace="full"),this.contentDOM)if(this.contentLost){for(let e=this.children.length-1;e>=0;e--){let n=this.children[e];if(this.dom.contains(n.dom.parentNode)){t.contentElement=n.dom.parentNode;break}}t.contentElement||(t.getContent=()=>i.HY.empty)}else t.contentElement=this.contentDOM;else t.getContent=()=>this.node.content;return t}matchesNode(t,e,n){return 0==this.dirty&&t.eq(this.node)&&yt(e,this.outerDeco)&&n.eq(this.innerDeco)}get size(){return this.node.nodeSize}get border(){return this.node.isLeaf?0:1}updateChildren(t,e){let n=this.node.inlineContent,r=e,o=t.composing?this.localCompositionInfo(t,e):null,s=o&&o.pos>-1?o:null,a=o&&o.pos<0,l=new wt(this,s&&s.node);!function(t,e,n,r){let i=e.locals(t),o=0;if(0==i.length){for(let n=0;n<t.childCount;n++){let s=t.child(n);r(s,i,e.forChild(o,s),n),o+=s.nodeSize}return}let s=0,a=[],l=null;for(let c=0;;){if(s<i.length&&i[s].to==o){let t,e=i[s++];for(;s<i.length&&i[s].to==o;)(t||(t=[e])).push(i[s++]);if(t){t.sort(xt);for(let e=0;e<t.length;e++)n(t[e],c,!!l)}else n(e,c,!!l)}let h,u;if(l)u=-1,h=l,l=null;else{if(!(c<t.childCount))break;u=c,h=t.child(c++)}for(let t=0;t<a.length;t++)a[t].to<=o&&a.splice(t--,1);for(;s<i.length&&i[s].from<=o&&i[s].to>o;)a.push(i[s++]);let d=o+h.nodeSize;if(h.isText){let t=d;s<i.length&&i[s].from<t&&(t=i[s].from);for(let e=0;e<a.length;e++)a[e].to<t&&(t=a[e].to);t<d&&(l=h.cut(t-o),h=h.cut(0,t-o),d=t,u=-1)}r(h,h.isInline&&!h.isLeaf?a.filter((t=>!t.inline)):a.slice(),e.forChild(o,h),u),o=d}}(this.node,this.innerDeco,((e,o,s)=>{e.spec.marks?l.syncToMarks(e.spec.marks,n,t):e.type.side>=0&&!s&&l.syncToMarks(o==this.node.childCount?i.vc.none:this.node.child(o).marks,n,t),l.placeWidget(e,t,r)}),((e,i,s,c)=>{let h;l.syncToMarks(e.marks,n,t),l.findNodeMatch(e,i,s,c)||a&&t.state.selection.from>r&&t.state.selection.to<r+e.nodeSize&&(h=l.findIndexWithChild(o.node))>-1&&l.updateNodeAt(e,i,s,h,t)||l.updateNextNode(e,i,s,t,c)||l.addNode(e,i,s,t,r),r+=e.nodeSize})),l.syncToMarks([],n,t),this.node.isTextblock&&l.addTextblockHacks(),l.destroyRest(),(l.changed||2==this.dirty)&&(s&&this.protectLocalComposition(t,s),ut(this.contentDOM,this.children,t),b&&function(t){if("UL"==t.nodeName||"OL"==t.nodeName){let e=t.style.cssText;t.style.cssText=e+"; list-style: square !important",window.getComputedStyle(t).listStyle,t.style.cssText=e}}(this.dom))}localCompositionInfo(t,e){let{from:n,to:i}=t.state.selection;if(!(t.state.selection instanceof r.Bs)||n<e||i>e+this.node.content.size)return null;let o=t.domSelection(),s=function(t,e){for(;;){if(3==t.nodeType)return t;if(1==t.nodeType&&e>0){if(t.childNodes.length>e&&3==t.childNodes[e].nodeType)return t.childNodes[e];e=N(t=t.childNodes[e-1])}else{if(!(1==t.nodeType&&e<t.childNodes.length))return null;t=t.childNodes[e],e=0}}}(o.focusNode,o.focusOffset);if(!s||!this.dom.contains(s.parentNode))return null;if(this.node.inlineContent){let t=s.nodeValue,r=function(t,e,n,r){for(let i=0,o=0;i<t.childCount&&o<=r;){let s=t.child(i++),a=o;if(o+=s.nodeSize,!s.isText)continue;let l=s.text;for(;i<t.childCount;){let e=t.child(i++);if(o+=e.nodeSize,!e.isText)break;l+=e.text}if(o>=n){let t=a<r?l.lastIndexOf(e,r-a-1):-1;if(t>=0&&t+e.length+a>=n)return a+t;if(n==r&&l.length>=r+e.length-a&&l.slice(r-a,r-a+e.length)==e)return r}}return-1}(this.node.content,t,n-e,i-e);return r<0?null:{node:s,pos:r,text:t}}return{node:s,pos:-1,text:""}}protectLocalComposition(t,{node:e,pos:n,text:r}){if(this.getDesc(e))return;let i=e;for(;i.parentNode!=this.contentDOM;i=i.parentNode){for(;i.previousSibling;)i.parentNode.removeChild(i.previousSibling);for(;i.nextSibling;)i.parentNode.removeChild(i.nextSibling);i.pmViewDesc&&(i.pmViewDesc=void 0)}let o=new it(this,i,e,r);t.input.compositionNodes.push(o),this.children=kt(this.children,n,n+r.length,t,o)}update(t,e,n,r){return!(3==this.dirty||!t.sameMarkup(this.node)||(this.updateInner(t,e,n,r),0))}updateInner(t,e,n,r){this.updateOuterDeco(e),this.node=t,this.innerDeco=n,this.contentDOM&&this.updateChildren(r,this.posAtStart),this.dirty=0}updateOuterDeco(t){if(yt(t,this.outerDeco))return;let e=1!=this.nodeDOM.nodeType,n=this.dom;this.dom=gt(this.dom,this.nodeDOM,ft(this.outerDeco,this.node,e),ft(t,this.node,e)),this.dom!=n&&(n.pmViewDesc=void 0,this.dom.pmViewDesc=this),this.outerDeco=t}selectNode(){1==this.nodeDOM.nodeType&&this.nodeDOM.classList.add("ProseMirror-selectednode"),!this.contentDOM&&this.node.type.spec.draggable||(this.dom.draggable=!0)}deselectNode(){1==this.nodeDOM.nodeType&&this.nodeDOM.classList.remove("ProseMirror-selectednode"),!this.contentDOM&&this.node.type.spec.draggable||this.dom.removeAttribute("draggable")}get domAtom(){return this.node.isAtom}}function at(t,e,n,r,i){return vt(r,e,t),new st(void 0,t,e,n,r,r,r,i,0)}class lt extends st{constructor(t,e,n,r,i,o,s){super(t,e,n,r,i,null,o,s,0)}parseRule(){let t=this.nodeDOM.parentNode;for(;t&&t!=this.dom&&!t.pmIsDeco;)t=t.parentNode;return{skip:t||!0}}update(t,e,n,r){return!(3==this.dirty||0!=this.dirty&&!this.inParent()||!t.sameMarkup(this.node)||(this.updateOuterDeco(e),0==this.dirty&&t.text==this.node.text||t.text==this.nodeDOM.nodeValue||(this.nodeDOM.nodeValue=t.text,r.trackWrites==this.nodeDOM&&(r.trackWrites=null)),this.node=t,this.dirty=0,0))}inParent(){let t=this.parent.contentDOM;for(let e=this.nodeDOM;e;e=e.parentNode)if(e==t)return!0;return!1}domFromPos(t){return{node:this.nodeDOM,offset:t}}localPosFromDOM(t,e,n){return t==this.nodeDOM?this.posAtStart+Math.min(e,this.node.text.length):super.localPosFromDOM(t,e,n)}ignoreMutation(t){return"characterData"!=t.type&&"selection"!=t.type}slice(t,e,n){let r=this.node.cut(t,e),i=document.createTextNode(r.text);return new lt(this.parent,r,this.outerDeco,this.innerDeco,i,i,n)}markDirty(t,e){super.markDirty(t,e),this.dom==this.nodeDOM||0!=t&&e!=this.nodeDOM.nodeValue.length||(this.dirty=3)}get domAtom(){return!1}}class ct extends nt{parseRule(){return{ignore:!0}}matchesHack(t){return 0==this.dirty&&this.dom.nodeName==t}get domAtom(){return!0}get ignoreForCoords(){return"IMG"==this.dom.nodeName}}class ht extends st{constructor(t,e,n,r,i,o,s,a,l,c){super(t,e,n,r,i,o,s,l,c),this.spec=a}update(t,e,n,r){if(3==this.dirty)return!1;if(this.spec.update){let i=this.spec.update(t,e,n);return i&&this.updateInner(t,e,n,r),i}return!(!this.contentDOM&&!t.isLeaf)&&super.update(t,e,n,r)}selectNode(){this.spec.selectNode?this.spec.selectNode():super.selectNode()}deselectNode(){this.spec.deselectNode?this.spec.deselectNode():super.deselectNode()}setSelection(t,e,n,r){this.spec.setSelection?this.spec.setSelection(t,e,n):super.setSelection(t,e,n,r)}destroy(){this.spec.destroy&&this.spec.destroy(),super.destroy()}stopEvent(t){return!!this.spec.stopEvent&&this.spec.stopEvent(t)}ignoreMutation(t){return this.spec.ignoreMutation?this.spec.ignoreMutation(t):super.ignoreMutation(t)}}function ut(t,e,n){let r=t.firstChild,i=!1;for(let o=0;o<e.length;o++){let s=e[o],a=s.dom;if(a.parentNode==t){for(;a!=r;)r=bt(r),i=!0;r=r.nextSibling}else i=!0,t.insertBefore(a,r);if(s instanceof ot){let e=r?r.previousSibling:t.lastChild;ut(s.contentDOM,s.children,n),r=e?e.nextSibling:t.firstChild}}for(;r;)r=bt(r),i=!0;i&&n.trackWrites==t&&(n.trackWrites=null)}const dt=function(t){t&&(this.nodeName=t)};dt.prototype=Object.create(null);const pt=[new dt];function ft(t,e,n){if(0==t.length)return pt;let r=n?pt[0]:new dt,i=[r];for(let o=0;o<t.length;o++){let s=t[o].type.attrs;if(s){s.nodeName&&i.push(r=new dt(s.nodeName));for(let t in s){let o=s[t];null!=o&&(n&&1==i.length&&i.push(r=new dt(e.isInline?"span":"div")),"class"==t?r.class=(r.class?r.class+" ":"")+o:"style"==t?r.style=(r.style?r.style+";":"")+o:"nodeName"!=t&&(r[t]=o))}}}return i}function gt(t,e,n,r){if(n==pt&&r==pt)return e;let i=e;for(let e=0;e<r.length;e++){let o=r[e],s=n[e];if(e){let e;s&&s.nodeName==o.nodeName&&i!=t&&(e=i.parentNode)&&e.nodeName.toLowerCase()==o.nodeName||(e=document.createElement(o.nodeName),e.pmIsDeco=!0,e.appendChild(i),s=pt[0]),i=e}mt(i,s||pt[0],o)}return i}function mt(t,e,n){for(let r in e)"class"==r||"style"==r||"nodeName"==r||r in n||t.removeAttribute(r);for(let r in n)"class"!=r&&"style"!=r&&"nodeName"!=r&&n[r]!=e[r]&&t.setAttribute(r,n[r]);if(e.class!=n.class){let r=e.class?e.class.split(" ").filter(Boolean):[],i=n.class?n.class.split(" ").filter(Boolean):[];for(let e=0;e<r.length;e++)-1==i.indexOf(r[e])&&t.classList.remove(r[e]);for(let e=0;e<i.length;e++)-1==r.indexOf(i[e])&&t.classList.add(i[e]);0==t.classList.length&&t.removeAttribute("class")}if(e.style!=n.style){if(e.style){let n,r=/\s*([\w\-\xa1-\uffff]+)\s*:(?:"(?:\\.|[^"])*"|'(?:\\.|[^'])*'|\(.*?\)|[^;])*/g;for(;n=r.exec(e.style);)t.style.removeProperty(n[1])}n.style&&(t.style.cssText+=n.style)}}function vt(t,e,n){return gt(t,t,pt,ft(e,n,1!=t.nodeType))}function yt(t,e){if(t.length!=e.length)return!1;for(let n=0;n<t.length;n++)if(!t[n].type.eq(e[n].type))return!1;return!0}function bt(t){let e=t.nextSibling;return t.parentNode.removeChild(t),e}class wt{constructor(t,e){this.lock=e,this.index=0,this.stack=[],this.changed=!1,this.top=t,this.preMatch=function(t,e){let n=e,r=n.children.length,i=t.childCount,o=new Map,s=[];t:for(;i>0;){let a;for(;;)if(r){let t=n.children[r-1];if(!(t instanceof ot)){a=t,r--;break}n=t,r=t.children.length}else{if(n==e)break t;r=n.parent.children.indexOf(n),n=n.parent}let l=a.node;if(l){if(l!=t.child(i-1))break;--i,o.set(a,i),s.push(a)}}return{index:i,matched:o,matches:s.reverse()}}(t.node.content,t)}destroyBetween(t,e){if(t!=e){for(let n=t;n<e;n++)this.top.children[n].destroy();this.top.children.splice(t,e-t),this.changed=!0}}destroyRest(){this.destroyBetween(this.index,this.top.children.length)}syncToMarks(t,e,n){let r=0,i=this.stack.length>>1,o=Math.min(i,t.length);for(;r<o&&(r==i-1?this.top:this.stack[r+1<<1]).matchesMark(t[r])&&!1!==t[r].type.spec.spanning;)r++;for(;r<i;)this.destroyRest(),this.top.dirty=0,this.index=this.stack.pop(),this.top=this.stack.pop(),i--;for(;i<t.length;){this.stack.push(this.top,this.index+1);let r=-1;for(let e=this.index;e<Math.min(this.index+3,this.top.children.length);e++)if(this.top.children[e].matchesMark(t[i])){r=e;break}if(r>-1)r>this.index&&(this.changed=!0,this.destroyBetween(this.index,r)),this.top=this.top.children[this.index];else{let r=ot.create(this.top,t[i],e,n);this.top.children.splice(this.index,0,r),this.top=r,this.changed=!0}this.index=0,i++}}findNodeMatch(t,e,n,r){let i,o=-1;if(r>=this.preMatch.index&&(i=this.preMatch.matches[r-this.preMatch.index]).parent==this.top&&i.matchesNode(t,e,n))o=this.top.children.indexOf(i,this.index);else for(let r=this.index,i=Math.min(this.top.children.length,r+5);r<i;r++){let i=this.top.children[r];if(i.matchesNode(t,e,n)&&!this.preMatch.matched.has(i)){o=r;break}}return!(o<0||(this.destroyBetween(this.index,o),this.index++,0))}updateNodeAt(t,e,n,r,i){let o=this.top.children[r];return 3==o.dirty&&o.dom==o.contentDOM&&(o.dirty=2),!!o.update(t,e,n,i)&&(this.destroyBetween(this.index,r),this.index=r+1,!0)}findIndexWithChild(t){for(;;){let e=t.parentNode;if(!e)return-1;if(e==this.top.contentDOM){let e=t.pmViewDesc;if(e)for(let t=this.index;t<this.top.children.length;t++)if(this.top.children[t]==e)return t;return-1}t=e}}updateNextNode(t,e,n,r,i){for(let o=this.index;o<this.top.children.length;o++){let s=this.top.children[o];if(s instanceof st){let a=this.preMatch.matched.get(s);if(null!=a&&a!=i)return!1;let l=s.dom;if((!this.lock||!(l==this.lock||1==l.nodeType&&l.contains(this.lock.parentNode))||t.isText&&s.node&&s.node.isText&&s.nodeDOM.nodeValue==t.text&&3!=s.dirty&&yt(e,s.outerDeco))&&s.update(t,e,n,r))return this.destroyBetween(this.index,o),s.dom!=l&&(this.changed=!0),this.index++,!0;break}}return!1}addNode(t,e,n,r,i){this.top.children.splice(this.index++,0,st.create(this.top,t,e,n,r,i)),this.changed=!0}placeWidget(t,e,n){let r=this.index<this.top.children.length?this.top.children[this.index]:null;if(!r||!r.matchesWidget(t)||t!=r.widget&&r.widget.type.toDOM.parentNode){let r=new rt(this.top,t,e,n);this.top.children.splice(this.index++,0,r),this.changed=!0}else this.index++}addTextblockHacks(){let t=this.top.children[this.index-1],e=this.top;for(;t instanceof ot;)e=t,t=e.children[e.children.length-1];t&&t instanceof lt&&!/\n$/.test(t.node.text)||((y||m)&&t&&"false"==t.dom.contentEditable&&this.addHackNode("IMG",e),this.addHackNode("BR",this.top))}addHackNode(t,e){if(e==this.top&&this.index<e.children.length&&e.children[this.index].matchesHack(t))this.index++;else{let n=document.createElement(t);"IMG"==t&&(n.className="ProseMirror-separator",n.alt=""),"BR"==t&&(n.className="ProseMirror-trailingBreak");let r=new ct(this.top,[],n,null);e!=this.top?e.children.push(r):e.children.splice(this.index++,0,r),this.changed=!0}}}function xt(t,e){return t.type.side-e.type.side}function kt(t,e,n,r,i){let o=[];for(let s=0,a=0;s<t.length;s++){let l=t[s],c=a,h=a+=l.size;c>=n||h<=e?o.push(l):(c<e&&o.push(l.slice(0,e-c,r)),i&&(o.push(i),i=void 0),h>n&&o.push(l.slice(n-c,l.size,r)))}return o}function St(t,e=null){let n=t.domSelection(),i=t.state.doc;if(!n.focusNode)return null;let o=t.docView.nearestDesc(n.focusNode),s=o&&0==o.size,a=t.docView.posFromDOM(n.focusNode,n.focusOffset,1);if(a<0)return null;let l,c,h=i.resolve(a);if(j(n)){for(l=h;o&&!o.node;)o=o.parent;let t=o.node;if(o&&t.isAtom&&r.qv.isSelectable(t)&&o.parent&&(!t.isInline||!function(t,e,n){for(let r=0==e,i=e==N(t);r||i;){if(t==n)return!0;let e=_(t);if(!(t=t.parentNode))return!1;r=r&&0==e,i=i&&e==N(t)}}(n.focusNode,n.focusOffset,o.dom))){let t=o.posBefore;c=new r.qv(a==t?h:i.resolve(t))}}else{let e=t.docView.posFromDOM(n.anchorNode,n.anchorOffset,1);if(e<0)return null;l=i.resolve(e)}return c||(c=Dt(t,l,h,"pointer"==e||t.state.selection.head<h.pos&&!s?1:-1)),c}function _t(t){return t.editable?t.hasFocus():Rt(t)&&document.activeElement&&document.activeElement.contains(t.dom)}function Et(t,e=!1){let n=t.state.selection;if(Tt(t,n),_t(t)){if(!e&&t.input.mouseDown&&t.input.mouseDown.allowDefault&&m){let e=t.domSelection(),n=t.domObserver.currentSelection;if(e.anchorNode&&n.anchorNode&&M(e.anchorNode,e.anchorOffset,n.anchorNode,n.anchorOffset))return t.input.mouseDown.delayedSelectionSync=!0,void t.domObserver.setCurSelection()}if(t.domObserver.disconnectSelection(),t.cursorWrapper)!function(t){let e=t.domSelection(),n=document.createRange(),r=t.cursorWrapper.dom,i="IMG"==r.nodeName;i?n.setEnd(r.parentNode,_(r)+1):n.setEnd(r,0),n.collapse(!1),e.removeAllRanges(),e.addRange(n),!i&&!t.state.selection.visible&&d&&p<=11&&(r.disabled=!0,r.disabled=!1)}(t);else{let i,o,{anchor:s,head:a}=n;!Ct||n instanceof r.Bs||(n.$from.parent.inlineContent||(i=Ot(t,n.from)),n.empty||n.$from.parent.inlineContent||(o=Ot(t,n.to))),t.docView.setSelection(s,a,t.root,e),Ct&&(i&&At(i),o&&At(o)),n.visible?t.dom.classList.remove("ProseMirror-hideselection"):(t.dom.classList.add("ProseMirror-hideselection"),"onselectionchange"in document&&function(t){let e=t.dom.ownerDocument;e.removeEventListener("selectionchange",t.input.hideSelectionGuard);let n=t.domSelection(),r=n.anchorNode,i=n.anchorOffset;e.addEventListener("selectionchange",t.input.hideSelectionGuard=()=>{n.anchorNode==r&&n.anchorOffset==i||(e.removeEventListener("selectionchange",t.input.hideSelectionGuard),setTimeout((()=>{_t(t)&&!t.state.selection.visible||t.dom.classList.remove("ProseMirror-hideselection")}),20))})}(t))}t.domObserver.setCurSelection(),t.domObserver.connectSelection()}}const Ct=y||m&&v<63;function Ot(t,e){let{node:n,offset:r}=t.docView.domFromPos(e,0),i=r<n.childNodes.length?n.childNodes[r]:null,o=r?n.childNodes[r-1]:null;if(y&&i&&"false"==i.contentEditable)return Mt(i);if(!(i&&"false"!=i.contentEditable||o&&"false"!=o.contentEditable)){if(i)return Mt(i);if(o)return Mt(o)}}function Mt(t){return t.contentEditable="true",y&&t.draggable&&(t.draggable=!1,t.wasDraggable=!0),t}function At(t){t.contentEditable="false",t.wasDraggable&&(t.draggable=!0,t.wasDraggable=null)}function Tt(t,e){if(e instanceof r.qv){let n=t.docView.descAt(e.from);n!=t.lastSelectedViewDesc&&(Nt(t),n&&n.selectNode(),t.lastSelectedViewDesc=n)}else Nt(t)}function Nt(t){t.lastSelectedViewDesc&&(t.lastSelectedViewDesc.parent&&t.lastSelectedViewDesc.deselectNode(),t.lastSelectedViewDesc=void 0)}function Dt(t,e,n,i){return t.someProp("createSelectionBetween",(r=>r(t,e,n)))||r.Bs.between(e,n,i)}function jt(t){return(!t.editable||t.root.activeElement==t.dom)&&Rt(t)}function Rt(t){let e=t.domSelection();if(!e.anchorNode)return!1;try{return t.dom.contains(3==e.anchorNode.nodeType?e.anchorNode.parentNode:e.anchorNode)&&(t.editable||t.dom.contains(3==e.focusNode.nodeType?e.focusNode.parentNode:e.focusNode))}catch(t){return!1}}function Pt(t,e){let{$anchor:n,$head:i}=t.selection,o=e>0?n.max(i):n.min(i),s=o.parent.inlineContent?o.depth?t.doc.resolve(e>0?o.after():o.before()):null:o;return s&&r.Y1.findFrom(s,e)}function zt(t,e){return t.dispatch(t.state.tr.setSelection(e).scrollIntoView()),!0}function It(t,e,n){let i=t.state.selection;if(!(i instanceof r.Bs)){if(i instanceof r.qv&&i.node.isInline)return zt(t,new r.Bs(e>0?i.$to:i.$from));{let n=Pt(t.state,e);return!!n&&zt(t,n)}}if(!i.empty||n.indexOf("s")>-1)return!1;if(t.endOfTextblock(e>0?"right":"left")){let n=Pt(t.state,e);return!!(n&&n instanceof r.qv)&&zt(t,n)}if(!(w&&n.indexOf("m")>-1)){let n,o=i.$head,s=o.textOffset?null:e<0?o.nodeBefore:o.nodeAfter;if(!s||s.isText)return!1;let a=e<0?o.pos-s.nodeSize:o.pos;return!!(s.isAtom||(n=t.docView.descAt(a))&&!n.contentDOM)&&(r.qv.isSelectable(s)?zt(t,new r.qv(e<0?t.state.doc.resolve(o.pos-s.nodeSize):o)):!!k&&zt(t,new r.Bs(t.state.doc.resolve(e<0?a:a+s.nodeSize))))}}function Bt(t){return 3==t.nodeType?t.nodeValue.length:t.childNodes.length}function Ft(t){let e=t.pmViewDesc;return e&&0==e.size&&(t.nextSibling||"BR"!=t.nodeName)}function $t(t){let e=t.domSelection(),n=e.focusNode,r=e.focusOffset;if(!n)return;let i,o,s=!1;for(f&&1==n.nodeType&&r<Bt(n)&&Ft(n.childNodes[r])&&(s=!0);;)if(r>0){if(1!=n.nodeType)break;{let t=n.childNodes[r-1];if(Ft(t))i=n,o=--r;else{if(3!=t.nodeType)break;n=t,r=n.nodeValue.length}}}else{if(Ht(n))break;{let e=n.previousSibling;for(;e&&Ft(e);)i=n.parentNode,o=_(e),e=e.previousSibling;if(e)n=e,r=Bt(n);else{if(n=n.parentNode,n==t.dom)break;r=0}}}s?Vt(t,e,n,r):i&&Vt(t,e,i,o)}function Lt(t){let e=t.domSelection(),n=e.focusNode,r=e.focusOffset;if(!n)return;let i,o,s=Bt(n);for(;;)if(r<s){if(1!=n.nodeType)break;if(!Ft(n.childNodes[r]))break;i=n,o=++r}else{if(Ht(n))break;{let e=n.nextSibling;for(;e&&Ft(e);)i=e.parentNode,o=_(e)+1,e=e.nextSibling;if(e)n=e,r=0,s=Bt(n);else{if(n=n.parentNode,n==t.dom)break;r=s=0}}}i&&Vt(t,e,i,o)}function Ht(t){let e=t.pmViewDesc;return e&&e.node&&e.node.isBlock}function Vt(t,e,n,r){if(j(e)){let t=document.createRange();t.setEnd(n,r),t.setStart(n,r),e.removeAllRanges(),e.addRange(t)}else e.extend&&e.extend(n,r);t.domObserver.setCurSelection();let{state:i}=t;setTimeout((()=>{t.state==i&&Et(t)}),50)}function qt(t,e,n){let i=t.state.selection;if(i instanceof r.Bs&&!i.empty||n.indexOf("s")>-1)return!1;if(w&&n.indexOf("m")>-1)return!1;let{$from:o,$to:s}=i;if(!o.parent.inlineContent||t.endOfTextblock(e<0?"up":"down")){let n=Pt(t.state,e);if(n&&n instanceof r.qv)return zt(t,n)}if(!o.parent.inlineContent){let n=e<0?o:s,a=i instanceof r.C1?r.Y1.near(n,e):r.Y1.findFrom(n,e);return!!a&&zt(t,a)}return!1}function Wt(t,e){if(!(t.state.selection instanceof r.Bs))return!0;let{$head:n,$anchor:i,empty:o}=t.state.selection;if(!n.sameParent(i))return!0;if(!o)return!1;if(t.endOfTextblock(e>0?"forward":"backward"))return!0;let s=!n.textOffset&&(e<0?n.nodeBefore:n.nodeAfter);if(s&&!s.isText){let r=t.state.tr;return e<0?r.delete(n.pos-s.nodeSize,n.pos):r.delete(n.pos,n.pos+s.nodeSize),t.dispatch(r),!0}return!1}function Ut(t,e,n){t.domObserver.stop(),e.contentEditable=n,t.domObserver.start()}function Yt(t,e){let n=[],{content:r,openStart:o,openEnd:s}=e;for(;o>1&&s>1&&1==r.childCount&&1==r.firstChild.childCount;){o--,s--;let t=r.firstChild;n.push(t.type.name,t.attrs!=t.type.defaultAttrs?t.attrs:null),r=t.content}let a=t.someProp("clipboardSerializer")||i.PW.fromSchema(t.state.schema),l=re(),c=l.createElement("div");c.appendChild(a.serializeFragment(r,{document:l}));let h,u=c.firstChild,d=0;for(;u&&1==u.nodeType&&(h=ee[u.nodeName.toLowerCase()]);){for(let t=h.length-1;t>=0;t--){let e=l.createElement(h[t]);for(;c.firstChild;)e.appendChild(c.firstChild);c.appendChild(e),d++}u=c.firstChild}return u&&1==u.nodeType&&u.setAttribute("data-pm-slice",`${o} ${s}${d?` -${d}`:""} ${JSON.stringify(n)}`),{dom:c,text:t.someProp("clipboardTextSerializer",(t=>t(e)))||e.content.textBetween(0,e.content.size,"\n\n")}}function Jt(t,e,n,r,o){let s,a,l=o.parent.type.spec.code;if(!n&&!e)return null;let c=e&&(r||l||!n);if(c){if(t.someProp("transformPastedText",(t=>{e=t(e,l||r)})),l)return e?new i.p2(i.HY.from(t.state.schema.text(e.replace(/\r\n?/g,"\n"))),0,0):i.p2.empty;let n=t.someProp("clipboardTextParser",(t=>t(e,o,r)));if(n)a=n;else{let n=o.marks(),{schema:r}=t.state,a=i.PW.fromSchema(r);s=document.createElement("div"),e.split(/(?:\r\n?|\n)+/).forEach((t=>{let e=s.appendChild(document.createElement("p"));t&&e.appendChild(a.serializeNode(r.text(t,n)))}))}}else t.someProp("transformPastedHTML",(t=>{n=t(n)})),s=function(t){let e=/^(\s*<meta [^>]*>)*/.exec(t);e&&(t=t.slice(e[0].length));let n,r=re().createElement("div"),i=/<([a-z][^>\s]+)/i.exec(t);if((n=i&&ee[i[1].toLowerCase()])&&(t=n.map((t=>"<"+t+">")).join("")+t+n.map((t=>"</"+t+">")).reverse().join("")),r.innerHTML=t,n)for(let t=0;t<n.length;t++)r=r.querySelector(n[t])||r;return r}(n),k&&function(t){let e=t.querySelectorAll(m?"span:not([class]):not([style])":"span.Apple-converted-space");for(let n=0;n<e.length;n++){let r=e[n];1==r.childNodes.length&&" "==r.textContent&&r.parentNode&&r.parentNode.replaceChild(t.ownerDocument.createTextNode(" "),r)}}(s);let h=s&&s.querySelector("[data-pm-slice]"),u=h&&/^(\d+) (\d+)(?: -(\d+))? (.*)/.exec(h.getAttribute("data-pm-slice")||"");if(u&&u[3])for(let t=+u[3];t>0&&s.firstChild;t--)s=s.firstChild;if(!a){let e=t.someProp("clipboardParser")||t.someProp("domParser")||i.aw.fromSchema(t.state.schema);a=e.parseSlice(s,{preserveWhitespace:!(!c&&!u),context:o,ruleFromNode:t=>"BR"!=t.nodeName||t.nextSibling||!t.parentNode||Xt.test(t.parentNode.nodeName)?null:{ignore:!0}})}if(u)a=function(t,e){if(!t.size)return t;let n,r=t.content.firstChild.type.schema;try{n=JSON.parse(e)}catch(e){return t}let{content:o,openStart:s,openEnd:a}=t;for(let t=n.length-2;t>=0;t-=2){let e=r.nodes[n[t]];if(!e||e.hasRequiredAttrs())break;o=i.HY.from(e.create(n[t+1],o)),s++,a++}return new i.p2(o,s,a)}(te(a,+u[1],+u[2]),u[4]);else if(a=i.p2.maxOpen(function(t,e){if(t.childCount<2)return t;for(let n=e.depth;n>=0;n--){let r,o=e.node(n).contentMatchAt(e.index(n)),s=[];if(t.forEach((t=>{if(!s)return;let e,n=o.findWrapping(t.type);if(!n)return s=null;if(e=s.length&&r.length&&Gt(n,r,t,s[s.length-1],0))s[s.length-1]=e;else{s.length&&(s[s.length-1]=Zt(s[s.length-1],r.length));let e=Kt(t,n);s.push(e),o=o.matchType(e.type),r=n}})),s)return i.HY.from(s)}return t}(a.content,o),!0),a.openStart||a.openEnd){let t=0,e=0;for(let e=a.content.firstChild;t<a.openStart&&!e.type.spec.isolating;t++,e=e.firstChild);for(let t=a.content.lastChild;e<a.openEnd&&!t.type.spec.isolating;e++,t=t.lastChild);a=te(a,t,e)}return t.someProp("transformPasted",(t=>{a=t(a)})),a}const Xt=/^(a|abbr|acronym|b|cite|code|del|em|i|ins|kbd|label|output|q|ruby|s|samp|span|strong|sub|sup|time|u|tt|var)$/i;function Kt(t,e,n=0){for(let r=e.length-1;r>=n;r--)t=e[r].create(null,i.HY.from(t));return t}function Gt(t,e,n,r,o){if(o<t.length&&o<e.length&&t[o]==e[o]){let s=Gt(t,e,n,r.lastChild,o+1);if(s)return r.copy(r.content.replaceChild(r.childCount-1,s));if(r.contentMatchAt(r.childCount).matchType(o==t.length-1?n.type:t[o+1]))return r.copy(r.content.append(i.HY.from(Kt(n,t,o+1))))}}function Zt(t,e){if(0==e)return t;let n=t.content.replaceChild(t.childCount-1,Zt(t.lastChild,e-1)),r=t.contentMatchAt(t.childCount).fillBefore(i.HY.empty,!0);return t.copy(n.append(r))}function Qt(t,e,n,r,o,s){let a=e<0?t.firstChild:t.lastChild,l=a.content;return o<r-1&&(l=Qt(l,e,n,r,o+1,s)),o>=n&&(l=e<0?a.contentMatchAt(0).fillBefore(l,t.childCount>1||s<=o).append(l):l.append(a.contentMatchAt(a.childCount).fillBefore(i.HY.empty,!0))),t.replaceChild(e<0?0:t.childCount-1,a.copy(l))}function te(t,e,n){return e<t.openStart&&(t=new i.p2(Qt(t.content,-1,e,t.openStart,0,t.openEnd),e,t.openEnd)),n<t.openEnd&&(t=new i.p2(Qt(t.content,1,n,t.openEnd,0,0),t.openStart,n)),t}const ee={thead:["table"],tbody:["table"],tfoot:["table"],caption:["table"],colgroup:["table"],col:["table","colgroup"],tr:["table","tbody"],td:["table","tbody","tr"],th:["table","tbody","tr"]};let ne=null;function re(){return ne||(ne=document.implementation.createHTMLDocument("title"))}const ie={};let oe={};class se{constructor(){this.shiftKey=!1,this.mouseDown=null,this.lastKeyCode=null,this.lastKeyCodeTime=0,this.lastClick={time:0,x:0,y:0,type:""},this.lastSelectionOrigin=null,this.lastSelectionTime=0,this.lastIOSEnter=0,this.lastIOSEnterFallbackTimeout=-1,this.lastAndroidDelete=0,this.composing=!1,this.composingTimeout=-1,this.compositionNodes=[],this.compositionEndedAt=-2e8,this.domChangeCount=0,this.eventHandlers=Object.create(null),this.hideSelectionGuard=null}}function ae(t,e){t.input.lastSelectionOrigin=e,t.input.lastSelectionTime=Date.now()}function le(t){t.someProp("handleDOMEvents",(e=>{for(let n in e)t.input.eventHandlers[n]||t.dom.addEventListener(n,t.input.eventHandlers[n]=e=>ce(t,e))}))}function ce(t,e){return t.someProp("handleDOMEvents",(n=>{let r=n[e.type];return!!r&&(r(t,e)||e.defaultPrevented)}))}function he(t,e){if(!e.bubbles)return!0;if(e.defaultPrevented)return!1;for(let n=e.target;n!=t.dom;n=n.parentNode)if(!n||11==n.nodeType||n.pmViewDesc&&n.pmViewDesc.stopEvent(e))return!1;return!0}function ue(t){return{left:t.clientX,top:t.clientY}}function de(t,e,n,r,i){if(-1==r)return!1;let o=t.state.doc.resolve(r);for(let r=o.depth+1;r>0;r--)if(t.someProp(e,(e=>r>o.depth?e(t,n,o.nodeAfter,o.before(r),i,!0):e(t,n,o.node(r),o.before(r),i,!1))))return!0;return!1}function pe(t,e,n){t.focused||t.focus();let r=t.state.tr.setSelection(e);"pointer"==n&&r.setMeta("pointer",!0),t.dispatch(r)}function fe(t,e,n,r){return de(t,"handleDoubleClickOn",e,n,r)||t.someProp("handleDoubleClick",(n=>n(t,e,r)))}function ge(t,e,n,i){return de(t,"handleTripleClickOn",e,n,i)||t.someProp("handleTripleClick",(n=>n(t,e,i)))||function(t,e,n){if(0!=n.button)return!1;let i=t.state.doc;if(-1==e)return!!i.inlineContent&&(pe(t,r.Bs.create(i,0,i.content.size),"pointer"),!0);let o=i.resolve(e);for(let e=o.depth+1;e>0;e--){let n=e>o.depth?o.nodeAfter:o.node(e),s=o.before(e);if(n.inlineContent)pe(t,r.Bs.create(i,s+1,s+1+n.content.size),"pointer");else{if(!r.qv.isSelectable(n))continue;pe(t,r.qv.create(i,s),"pointer")}return!0}}(t,n,i)}function me(t){return Se(t)}oe.keydown=(t,e)=>{let n=e;if(t.input.shiftKey=16==n.keyCode||n.shiftKey,!be(t,n)&&(t.input.lastKeyCode=n.keyCode,t.input.lastKeyCodeTime=Date.now(),!x||!m||13!=n.keyCode))if(229!=n.keyCode&&t.domObserver.forceFlush(),!b||13!=n.keyCode||n.ctrlKey||n.altKey||n.metaKey)t.someProp("handleKeyDown",(e=>e(t,n)))||function(t,e){let n=e.keyCode,r=function(t){let e="";return t.ctrlKey&&(e+="c"),t.metaKey&&(e+="m"),t.altKey&&(e+="a"),t.shiftKey&&(e+="s"),e}(e);return 8==n||w&&72==n&&"c"==r?Wt(t,-1)||$t(t):46==n||w&&68==n&&"c"==r?Wt(t,1)||Lt(t):13==n||27==n||(37==n||w&&66==n&&"c"==r?It(t,-1,r)||$t(t):39==n||w&&70==n&&"c"==r?It(t,1,r)||Lt(t):38==n||w&&80==n&&"c"==r?qt(t,-1,r)||$t(t):40==n||w&&78==n&&"c"==r?function(t){if(!y||t.state.selection.$head.parentOffset>0)return!1;let{focusNode:e,focusOffset:n}=t.domSelection();if(e&&1==e.nodeType&&0==n&&e.firstChild&&"false"==e.firstChild.contentEditable){let n=e.firstChild;Ut(t,n,"true"),setTimeout((()=>Ut(t,n,"false")),20)}return!1}(t)||qt(t,1,r)||Lt(t):r==(w?"m":"c")&&(66==n||73==n||89==n||90==n))}(t,n)?n.preventDefault():ae(t,"key");else{let e=Date.now();t.input.lastIOSEnter=e,t.input.lastIOSEnterFallbackTimeout=setTimeout((()=>{t.input.lastIOSEnter==e&&(t.someProp("handleKeyDown",(e=>e(t,R(13,"Enter")))),t.input.lastIOSEnter=0)}),200)}},oe.keyup=(t,e)=>{16==e.keyCode&&(t.input.shiftKey=!1)},oe.keypress=(t,e)=>{let n=e;if(be(t,n)||!n.charCode||n.ctrlKey&&!n.altKey||w&&n.metaKey)return;if(t.someProp("handleKeyPress",(e=>e(t,n))))return void n.preventDefault();let i=t.state.selection;if(!(i instanceof r.Bs&&i.$from.sameParent(i.$to))){let e=String.fromCharCode(n.charCode);t.someProp("handleTextInput",(n=>n(t,i.$from.pos,i.$to.pos,e)))||t.dispatch(t.state.tr.insertText(e).scrollIntoView()),n.preventDefault()}};const ve=w?"metaKey":"ctrlKey";ie.mousedown=(t,e)=>{let n=e;t.input.shiftKey=n.shiftKey;let r=me(t),i=Date.now(),o="singleClick";i-t.input.lastClick.time<500&&function(t,e){let n=e.x-t.clientX,r=e.y-t.clientY;return n*n+r*r<100}(n,t.input.lastClick)&&!n[ve]&&("singleClick"==t.input.lastClick.type?o="doubleClick":"doubleClick"==t.input.lastClick.type&&(o="tripleClick")),t.input.lastClick={time:i,x:n.clientX,y:n.clientY,type:o};let s=t.posAtCoords(ue(n));s&&("singleClick"==o?(t.input.mouseDown&&t.input.mouseDown.done(),t.input.mouseDown=new ye(t,s,n,!!r)):("doubleClick"==o?fe:ge)(t,s.pos,s.inside,n)?n.preventDefault():ae(t,"pointer"))};class ye{constructor(t,e,n,i){let o,s;if(this.view=t,this.pos=e,this.event=n,this.flushed=i,this.delayedSelectionSync=!1,this.mightDrag=null,this.startDoc=t.state.doc,this.selectNode=!!n[ve],this.allowDefault=n.shiftKey,e.inside>-1)o=t.state.doc.nodeAt(e.inside),s=e.inside;else{let n=t.state.doc.resolve(e.pos);o=n.parent,s=n.depth?n.before():0}const a=i?null:n.target,l=a?t.docView.nearestDesc(a,!0):null;this.target=l?l.dom:null;let{selection:c}=t.state;(0==n.button&&o.type.spec.draggable&&!1!==o.type.spec.selectable||c instanceof r.qv&&c.from<=s&&c.to>s)&&(this.mightDrag={node:o,pos:s,addAttr:!(!this.target||this.target.draggable),setUneditable:!(!this.target||!f||this.target.hasAttribute("contentEditable"))}),this.target&&this.mightDrag&&(this.mightDrag.addAttr||this.mightDrag.setUneditable)&&(this.view.domObserver.stop(),this.mightDrag.addAttr&&(this.target.draggable=!0),this.mightDrag.setUneditable&&setTimeout((()=>{this.view.input.mouseDown==this&&this.target.setAttribute("contentEditable","false")}),20),this.view.domObserver.start()),t.root.addEventListener("mouseup",this.up=this.up.bind(this)),t.root.addEventListener("mousemove",this.move=this.move.bind(this)),ae(t,"pointer")}done(){this.view.root.removeEventListener("mouseup",this.up),this.view.root.removeEventListener("mousemove",this.move),this.mightDrag&&this.target&&(this.view.domObserver.stop(),this.mightDrag.addAttr&&this.target.removeAttribute("draggable"),this.mightDrag.setUneditable&&this.target.removeAttribute("contentEditable"),this.view.domObserver.start()),this.delayedSelectionSync&&setTimeout((()=>Et(this.view))),this.view.input.mouseDown=null}up(t){if(this.done(),!this.view.dom.contains(t.target))return;let e=this.pos;this.view.state.doc!=this.startDoc&&(e=this.view.posAtCoords(ue(t))),this.allowDefault||!e?ae(this.view,"pointer"):function(t,e,n,i,o){return de(t,"handleClickOn",e,n,i)||t.someProp("handleClick",(n=>n(t,e,i)))||(o?function(t,e){if(-1==e)return!1;let n,i,o=t.state.selection;o instanceof r.qv&&(n=o.node);let s=t.state.doc.resolve(e);for(let t=s.depth+1;t>0;t--){let e=t>s.depth?s.nodeAfter:s.node(t);if(r.qv.isSelectable(e)){i=n&&o.$from.depth>0&&t>=o.$from.depth&&s.before(o.$from.depth+1)==o.$from.pos?s.before(o.$from.depth):s.before(t);break}}return null!=i&&(pe(t,r.qv.create(t.state.doc,i),"pointer"),!0)}(t,n):function(t,e){if(-1==e)return!1;let n=t.state.doc.resolve(e),i=n.nodeAfter;return!!(i&&i.isAtom&&r.qv.isSelectable(i))&&(pe(t,new r.qv(n),"pointer"),!0)}(t,n))}(this.view,e.pos,e.inside,t,this.selectNode)?t.preventDefault():0==t.button&&(this.flushed||y&&this.mightDrag&&!this.mightDrag.node.isAtom||m&&!(this.view.state.selection instanceof r.Bs)&&Math.min(Math.abs(e.pos-this.view.state.selection.from),Math.abs(e.pos-this.view.state.selection.to))<=2)?(pe(this.view,r.Y1.near(this.view.state.doc.resolve(e.pos)),"pointer"),t.preventDefault()):ae(this.view,"pointer")}move(t){!this.allowDefault&&(Math.abs(this.event.x-t.clientX)>4||Math.abs(this.event.y-t.clientY)>4)&&(this.allowDefault=!0),ae(this.view,"pointer"),0==t.buttons&&this.done()}}function be(t,e){return!!t.composing||!!(y&&Math.abs(e.timeStamp-t.input.compositionEndedAt)<500)&&(t.input.compositionEndedAt=-2e8,!0)}ie.touchdown=t=>{me(t),ae(t,"pointer")},ie.contextmenu=t=>me(t);const we=x?5e3:-1;function xe(t,e){clearTimeout(t.input.composingTimeout),e>-1&&(t.input.composingTimeout=setTimeout((()=>Se(t)),e))}function ke(t){for(t.composing&&(t.input.composing=!1,t.input.compositionEndedAt=function(){let t=document.createEvent("Event");return t.initEvent("event",!0,!0),t.timeStamp}());t.input.compositionNodes.length>0;)t.input.compositionNodes.pop().markParentsDirty()}function Se(t,e=!1){if(!(x&&t.domObserver.flushingSoon>=0)){if(t.domObserver.forceFlush(),ke(t),e||t.docView&&t.docView.dirty){let e=St(t);return e&&!e.eq(t.state.selection)?t.dispatch(t.state.tr.setSelection(e)):t.updateState(t.state),!0}return!1}}oe.compositionstart=oe.compositionupdate=t=>{if(!t.composing){t.domObserver.flush();let{state:e}=t,n=e.selection.$from;if(e.selection.empty&&(e.storedMarks||!n.textOffset&&n.parentOffset&&n.nodeBefore.marks.some((t=>!1===t.type.spec.inclusive))))t.markCursor=t.state.storedMarks||n.marks(),Se(t,!0),t.markCursor=null;else if(Se(t),f&&e.selection.empty&&n.parentOffset&&!n.textOffset&&n.nodeBefore.marks.length){let e=t.domSelection();for(let t=e.focusNode,n=e.focusOffset;t&&1==t.nodeType&&0!=n;){let r=n<0?t.lastChild:t.childNodes[n-1];if(!r)break;if(3==r.nodeType){e.collapse(r,r.nodeValue.length);break}t=r,n=-1}}t.input.composing=!0}xe(t,we)},oe.compositionend=(t,e)=>{t.composing&&(t.input.composing=!1,t.input.compositionEndedAt=e.timeStamp,xe(t,20))};const _e=d&&p<15||b&&S<604;function Ee(t,e,n,r){let o=Jt(t,e,n,t.input.shiftKey,t.state.selection.$from);if(t.someProp("handlePaste",(e=>e(t,r,o||i.p2.empty))))return!0;if(!o)return!1;let s=function(t){return 0==t.openStart&&0==t.openEnd&&1==t.content.childCount?t.content.firstChild:null}(o),a=s?t.state.tr.replaceSelectionWith(s,t.input.shiftKey):t.state.tr.replaceSelection(o);return t.dispatch(a.scrollIntoView().setMeta("paste",!0).setMeta("uiEvent","paste")),!0}ie.copy=oe.cut=(t,e)=>{let n=e,r=t.state.selection,i="cut"==n.type;if(r.empty)return;let o=_e?null:n.clipboardData,s=r.content(),{dom:a,text:l}=Yt(t,s);o?(n.preventDefault(),o.clearData(),o.setData("text/html",a.innerHTML),o.setData("text/plain",l)):function(t,e){if(!t.dom.parentNode)return;let n=t.dom.parentNode.appendChild(document.createElement("div"));n.appendChild(e),n.style.cssText="position: fixed; left: -10000px; top: 10px";let r=getSelection(),i=document.createRange();i.selectNodeContents(e),t.dom.blur(),r.removeAllRanges(),r.addRange(i),setTimeout((()=>{n.parentNode&&n.parentNode.removeChild(n),t.focus()}),50)}(t,a),i&&t.dispatch(t.state.tr.deleteSelection().scrollIntoView().setMeta("uiEvent","cut"))},oe.paste=(t,e)=>{let n=e;if(t.composing&&!x)return;let r=_e?null:n.clipboardData;r&&Ee(t,r.getData("text/plain"),r.getData("text/html"),n)?n.preventDefault():function(t,e){if(!t.dom.parentNode)return;let n=t.input.shiftKey||t.state.selection.$from.parent.type.spec.code,r=t.dom.parentNode.appendChild(document.createElement(n?"textarea":"div"));n||(r.contentEditable="true"),r.style.cssText="position: fixed; left: -10000px; top: 10px",r.focus(),setTimeout((()=>{t.focus(),r.parentNode&&r.parentNode.removeChild(r),n?Ee(t,r.value,null,e):Ee(t,r.textContent,r.innerHTML,e)}),50)}(t,n)};class Ce{constructor(t,e){this.slice=t,this.move=e}}const Oe=w?"altKey":"ctrlKey";ie.dragstart=(t,e)=>{let n=e,i=t.input.mouseDown;if(i&&i.done(),!n.dataTransfer)return;let o=t.state.selection,s=o.empty?null:t.posAtCoords(ue(n));if(s&&s.pos>=o.from&&s.pos<=(o instanceof r.qv?o.to-1:o.to));else if(i&&i.mightDrag)t.dispatch(t.state.tr.setSelection(r.qv.create(t.state.doc,i.mightDrag.pos)));else if(n.target&&1==n.target.nodeType){let e=t.docView.nearestDesc(n.target,!0);e&&e.node.type.spec.draggable&&e!=t.docView&&t.dispatch(t.state.tr.setSelection(r.qv.create(t.state.doc,e.posBefore)))}let a=t.state.selection.content(),{dom:l,text:c}=Yt(t,a);n.dataTransfer.clearData(),n.dataTransfer.setData(_e?"Text":"text/html",l.innerHTML),n.dataTransfer.effectAllowed="copyMove",_e||n.dataTransfer.setData("text/plain",c),t.dragging=new Ce(a,!n[Oe])},ie.dragend=t=>{let e=t.dragging;window.setTimeout((()=>{t.dragging==e&&(t.dragging=null)}),50)},oe.dragover=oe.dragenter=(t,e)=>e.preventDefault(),oe.drop=(t,e)=>{let n=e,s=t.dragging;if(t.dragging=null,!n.dataTransfer)return;let a=t.posAtCoords(ue(n));if(!a)return;let l=t.state.doc.resolve(a.pos);if(!l)return;let c=s&&s.slice;c?t.someProp("transformPasted",(t=>{c=t(c)})):c=Jt(t,n.dataTransfer.getData(_e?"Text":"text/plain"),_e?null:n.dataTransfer.getData("text/html"),!1,l);let h=!(!s||n[Oe]);if(t.someProp("handleDrop",(e=>e(t,n,c||i.p2.empty,h))))return void n.preventDefault();if(!c)return;n.preventDefault();let u=c?(0,o.nj)(t.state.doc,l.pos,c):l.pos;null==u&&(u=l.pos);let d=t.state.tr;h&&d.deleteSelection();let p=d.mapping.map(u),f=0==c.openStart&&0==c.openEnd&&1==c.content.childCount,g=d.doc;if(f?d.replaceRangeWith(p,p,c.content.firstChild):d.replaceRange(p,p,c),d.doc.eq(g))return;let m=d.doc.resolve(p);if(f&&r.qv.isSelectable(c.content.firstChild)&&m.nodeAfter&&m.nodeAfter.sameMarkup(c.content.firstChild))d.setSelection(new r.qv(m));else{let e=d.mapping.map(u);d.mapping.maps[d.mapping.maps.length-1].forEach(((t,n,r,i)=>e=i)),d.setSelection(Dt(t,m,d.doc.resolve(e)))}t.focus(),t.dispatch(d.setMeta("uiEvent","drop"))},ie.focus=t=>{t.focused||(t.domObserver.stop(),t.dom.classList.add("ProseMirror-focused"),t.domObserver.start(),t.focused=!0,setTimeout((()=>{t.docView&&t.hasFocus()&&!t.domObserver.currentSelection.eq(t.domSelection())&&Et(t)}),20))},ie.blur=(t,e)=>{let n=e;t.focused&&(t.domObserver.stop(),t.dom.classList.remove("ProseMirror-focused"),t.domObserver.start(),n.relatedTarget&&t.dom.contains(n.relatedTarget)&&t.domObserver.currentSelection.clear(),t.focused=!1)},ie.beforeinput=(t,e)=>{if(m&&x&&"deleteContentBackward"==e.inputType){t.domObserver.flushSoon();let{domChangeCount:e}=t.input;setTimeout((()=>{if(t.input.domChangeCount!=e)return;if(t.dom.blur(),t.focus(),t.someProp("handleKeyDown",(e=>e(t,R(8,"Backspace")))))return;let{$cursor:n}=t.state.selection;n&&n.pos>0&&t.dispatch(t.state.tr.delete(n.pos-1,n.pos).scrollIntoView())}),50)}};for(let t in oe)ie[t]=oe[t];function Me(t,e){if(t==e)return!0;for(let n in t)if(t[n]!==e[n])return!1;for(let n in e)if(!(n in t))return!1;return!0}class Ae{constructor(t,e){this.toDOM=t,this.spec=e||Re,this.side=this.spec.side||0}map(t,e,n,r){let{pos:i,deleted:o}=t.mapResult(e.from+r,this.side<0?-1:1);return o?null:new De(i-n,i-n,this)}valid(){return!0}eq(t){return this==t||t instanceof Ae&&(this.spec.key&&this.spec.key==t.spec.key||this.toDOM==t.toDOM&&Me(this.spec,t.spec))}destroy(t){this.spec.destroy&&this.spec.destroy(t)}}class Te{constructor(t,e){this.attrs=t,this.spec=e||Re}map(t,e,n,r){let i=t.map(e.from+r,this.spec.inclusiveStart?-1:1)-n,o=t.map(e.to+r,this.spec.inclusiveEnd?1:-1)-n;return i>=o?null:new De(i,o,this)}valid(t,e){return e.from<e.to}eq(t){return this==t||t instanceof Te&&Me(this.attrs,t.attrs)&&Me(this.spec,t.spec)}static is(t){return t.type instanceof Te}destroy(){}}class Ne{constructor(t,e){this.attrs=t,this.spec=e||Re}map(t,e,n,r){let i=t.mapResult(e.from+r,1);if(i.deleted)return null;let o=t.mapResult(e.to+r,-1);return o.deleted||o.pos<=i.pos?null:new De(i.pos-n,o.pos-n,this)}valid(t,e){let n,{index:r,offset:i}=t.content.findIndex(e.from);return i==e.from&&!(n=t.child(r)).isText&&i+n.nodeSize==e.to}eq(t){return this==t||t instanceof Ne&&Me(this.attrs,t.attrs)&&Me(this.spec,t.spec)}destroy(){}}class De{constructor(t,e,n){this.from=t,this.to=e,this.type=n}copy(t,e){return new De(t,e,this.type)}eq(t,e=0){return this.type.eq(t.type)&&this.from+e==t.from&&this.to+e==t.to}map(t,e,n){return this.type.map(t,this,e,n)}static widget(t,e,n){return new De(t,t,new Ae(e,n))}static inline(t,e,n,r){return new De(t,e,new Te(n,r))}static node(t,e,n,r){return new De(t,e,new Ne(n,r))}get spec(){return this.type.spec}get inline(){return this.type instanceof Te}}const je=[],Re={};class Pe{constructor(t,e){this.local=t.length?t:je,this.children=e.length?e:je}static create(t,e){return e.length?Le(e,t,0,Re):ze}find(t,e,n){let r=[];return this.findInner(null==t?0:t,null==e?1e9:e,r,0,n),r}findInner(t,e,n,r,i){for(let o=0;o<this.local.length;o++){let s=this.local[o];s.from<=e&&s.to>=t&&(!i||i(s.spec))&&n.push(s.copy(s.from+r,s.to+r))}for(let o=0;o<this.children.length;o+=3)if(this.children[o]<e&&this.children[o+1]>t){let s=this.children[o]+1;this.children[o+2].findInner(t-s,e-s,n,r+s,i)}}map(t,e,n){return this==ze||0==t.maps.length?this:this.mapInner(t,e,0,0,n||Re)}mapInner(t,e,n,r,i){let o;for(let s=0;s<this.local.length;s++){let a=this.local[s].map(t,n,r);a&&a.type.valid(e,a)?(o||(o=[])).push(a):i.onRemove&&i.onRemove(this.local[s].spec)}return this.children.length?function(t,e,n,r,i,o,s){let a=t.slice(),l=(t,e,n,r)=>{for(let s=0;s<a.length;s+=3){let l,c=a[s+1];if(c<0||t>c+o)continue;let h=a[s]+o;e>=h?a[s+1]=t<=h?-2:-1:n>=i&&(l=r-n-(e-t))&&(a[s]+=l,a[s+1]+=l)}};for(let t=0;t<n.maps.length;t++)n.maps[t].forEach(l);let c=!1;for(let e=0;e<a.length;e+=3)if(a[e+1]<0){if(-2==a[e+1]){c=!0,a[e+1]=-1;continue}let l=n.map(t[e]+o),h=l-i;if(h<0||h>=r.content.size){c=!0;continue}let u=n.map(t[e+1]+o,-1)-i,{index:d,offset:p}=r.content.findIndex(h),f=r.maybeChild(d);if(f&&p==h&&p+f.nodeSize==u){let r=a[e+2].mapInner(n,f,l+1,t[e]+o+1,s);r!=ze?(a[e]=h,a[e+1]=u,a[e+2]=r):(a[e+1]=-2,c=!0)}else c=!0}if(c){let l=function(t,e,n,r,i,o,s){function a(t,e){for(let o=0;o<t.local.length;o++){let a=t.local[o].map(r,i,e);a?n.push(a):s.onRemove&&s.onRemove(t.local[o].spec)}for(let n=0;n<t.children.length;n+=3)a(t.children[n+2],t.children[n]+e+1)}for(let n=0;n<t.length;n+=3)-1==t[n+1]&&a(t[n+2],e[n]+o+1);return n}(a,t,e,n,i,o,s),c=Le(l,r,0,s);e=c.local;for(let t=0;t<a.length;t+=3)a[t+1]<0&&(a.splice(t,3),t-=3);for(let t=0,e=0;t<c.children.length;t+=3){let n=c.children[t];for(;e<a.length&&a[e]<n;)e+=3;a.splice(e,0,c.children[t],c.children[t+1],c.children[t+2])}}return new Pe(e.sort(He),a)}(this.children,o||[],t,e,n,r,i):o?new Pe(o.sort(He),je):ze}add(t,e){return e.length?this==ze?Pe.create(t,e):this.addInner(t,e,0):this}addInner(t,e,n){let r,i=0;t.forEach(((t,o)=>{let s,a=o+n;if(s=Fe(e,t,a)){for(r||(r=this.children.slice());i<r.length&&r[i]<o;)i+=3;r[i]==o?r[i+2]=r[i+2].addInner(t,s,a+1):r.splice(i,0,o,o+t.nodeSize,Le(s,t,a+1,Re)),i+=3}}));let o=Be(i?$e(e):e,-n);for(let e=0;e<o.length;e++)o[e].type.valid(t,o[e])||o.splice(e--,1);return new Pe(o.length?this.local.concat(o).sort(He):this.local,r||this.children)}remove(t){return 0==t.length||this==ze?this:this.removeInner(t,0)}removeInner(t,e){let n=this.children,r=this.local;for(let r=0;r<n.length;r+=3){let i,o=n[r]+e,s=n[r+1]+e;for(let e,n=0;n<t.length;n++)(e=t[n])&&e.from>o&&e.to<s&&(t[n]=null,(i||(i=[])).push(e));if(!i)continue;n==this.children&&(n=this.children.slice());let a=n[r+2].removeInner(i,o+1);a!=ze?n[r+2]=a:(n.splice(r,3),r-=3)}if(r.length)for(let n,i=0;i<t.length;i++)if(n=t[i])for(let t=0;t<r.length;t++)r[t].eq(n,e)&&(r==this.local&&(r=this.local.slice()),r.splice(t--,1));return n==this.children&&r==this.local?this:r.length||n.length?new Pe(r,n):ze}forChild(t,e){if(this==ze)return this;if(e.isLeaf)return Pe.empty;let n,r;for(let e=0;e<this.children.length;e+=3)if(this.children[e]>=t){this.children[e]==t&&(n=this.children[e+2]);break}let i=t+1,o=i+e.content.size;for(let t=0;t<this.local.length;t++){let e=this.local[t];if(e.from<o&&e.to>i&&e.type instanceof Te){let t=Math.max(i,e.from)-i,n=Math.min(o,e.to)-i;t<n&&(r||(r=[])).push(e.copy(t,n))}}if(r){let t=new Pe(r.sort(He),je);return n?new Ie([t,n]):t}return n||ze}eq(t){if(this==t)return!0;if(!(t instanceof Pe)||this.local.length!=t.local.length||this.children.length!=t.children.length)return!1;for(let e=0;e<this.local.length;e++)if(!this.local[e].eq(t.local[e]))return!1;for(let e=0;e<this.children.length;e+=3)if(this.children[e]!=t.children[e]||this.children[e+1]!=t.children[e+1]||!this.children[e+2].eq(t.children[e+2]))return!1;return!0}locals(t){return Ve(this.localsInner(t))}localsInner(t){if(this==ze)return je;if(t.inlineContent||!this.local.some(Te.is))return this.local;let e=[];for(let t=0;t<this.local.length;t++)this.local[t].type instanceof Te||e.push(this.local[t]);return e}}Pe.empty=new Pe([],[]),Pe.removeOverlap=Ve;const ze=Pe.empty;class Ie{constructor(t){this.members=t}map(t,e){const n=this.members.map((n=>n.map(t,e,Re)));return Ie.from(n)}forChild(t,e){if(e.isLeaf)return Pe.empty;let n=[];for(let r=0;r<this.members.length;r++){let i=this.members[r].forChild(t,e);i!=ze&&(i instanceof Ie?n=n.concat(i.members):n.push(i))}return Ie.from(n)}eq(t){if(!(t instanceof Ie)||t.members.length!=this.members.length)return!1;for(let e=0;e<this.members.length;e++)if(!this.members[e].eq(t.members[e]))return!1;return!0}locals(t){let e,n=!0;for(let r=0;r<this.members.length;r++){let i=this.members[r].localsInner(t);if(i.length)if(e){n&&(e=e.slice(),n=!1);for(let t=0;t<i.length;t++)e.push(i[t])}else e=i}return e?Ve(n?e:e.sort(He)):je}static from(t){switch(t.length){case 0:return ze;case 1:return t[0];default:return new Ie(t)}}}function Be(t,e){if(!e||!t.length)return t;let n=[];for(let r=0;r<t.length;r++){let i=t[r];n.push(new De(i.from+e,i.to+e,i.type))}return n}function Fe(t,e,n){if(e.isLeaf)return null;let r=n+e.nodeSize,i=null;for(let e,o=0;o<t.length;o++)(e=t[o])&&e.from>n&&e.to<r&&((i||(i=[])).push(e),t[o]=null);return i}function $e(t){let e=[];for(let n=0;n<t.length;n++)null!=t[n]&&e.push(t[n]);return e}function Le(t,e,n,r){let i=[],o=!1;e.forEach(((e,s)=>{let a=Fe(t,e,s+n);if(a){o=!0;let t=Le(a,e,n+s+1,r);t!=ze&&i.push(s,s+e.nodeSize,t)}}));let s=Be(o?$e(t):t,-n).sort(He);for(let t=0;t<s.length;t++)s[t].type.valid(e,s[t])||(r.onRemove&&r.onRemove(s[t].spec),s.splice(t--,1));return s.length||i.length?new Pe(s,i):ze}function He(t,e){return t.from-e.from||t.to-e.to}function Ve(t){let e=t;for(let n=0;n<e.length-1;n++){let r=e[n];if(r.from!=r.to)for(let i=n+1;i<e.length;i++){let o=e[i];if(o.from!=r.from){o.from<r.to&&(e==t&&(e=t.slice()),e[n]=r.copy(r.from,o.from),qe(e,i,r.copy(o.from,r.to)));break}o.to!=r.to&&(e==t&&(e=t.slice()),e[i]=o.copy(o.from,r.to),qe(e,i+1,o.copy(r.to,o.to)))}}return e}function qe(t,e,n){for(;e<t.length&&He(n,t[e])>0;)e++;t.splice(e,0,n)}function We(t){let e=[];return t.someProp("decorations",(n=>{let r=n(t.state);r&&r!=ze&&e.push(r)})),t.cursorWrapper&&e.push(Pe.create(t.state.doc,[t.cursorWrapper.deco])),Ie.from(e)}const Ue={childList:!0,characterData:!0,characterDataOldValue:!0,attributes:!0,attributeOldValue:!0,subtree:!0},Ye=d&&p<=11;class Je{constructor(){this.anchorNode=null,this.anchorOffset=0,this.focusNode=null,this.focusOffset=0}set(t){this.anchorNode=t.anchorNode,this.anchorOffset=t.anchorOffset,this.focusNode=t.focusNode,this.focusOffset=t.focusOffset}clear(){this.anchorNode=this.focusNode=null}eq(t){return t.anchorNode==this.anchorNode&&t.anchorOffset==this.anchorOffset&&t.focusNode==this.focusNode&&t.focusOffset==this.focusOffset}}class Xe{constructor(t,e){this.view=t,this.handleDOMChange=e,this.queue=[],this.flushingSoon=-1,this.observer=null,this.currentSelection=new Je,this.onCharData=null,this.suppressingSelectionUpdates=!1,this.observer=window.MutationObserver&&new window.MutationObserver((t=>{for(let e=0;e<t.length;e++)this.queue.push(t[e]);d&&p<=11&&t.some((t=>"childList"==t.type&&t.removedNodes.length||"characterData"==t.type&&t.oldValue.length>t.target.nodeValue.length))?this.flushSoon():this.flush()})),Ye&&(this.onCharData=t=>{this.queue.push({target:t.target,type:"characterData",oldValue:t.prevValue}),this.flushSoon()}),this.onSelectionChange=this.onSelectionChange.bind(this)}flushSoon(){this.flushingSoon<0&&(this.flushingSoon=window.setTimeout((()=>{this.flushingSoon=-1,this.flush()}),20))}forceFlush(){this.flushingSoon>-1&&(window.clearTimeout(this.flushingSoon),this.flushingSoon=-1,this.flush())}start(){this.observer&&this.observer.observe(this.view.dom,Ue),this.onCharData&&this.view.dom.addEventListener("DOMCharacterDataModified",this.onCharData),this.connectSelection()}stop(){if(this.observer){let t=this.observer.takeRecords();if(t.length){for(let e=0;e<t.length;e++)this.queue.push(t[e]);window.setTimeout((()=>this.flush()),20)}this.observer.disconnect()}this.onCharData&&this.view.dom.removeEventListener("DOMCharacterDataModified",this.onCharData),this.disconnectSelection()}connectSelection(){this.view.dom.ownerDocument.addEventListener("selectionchange",this.onSelectionChange)}disconnectSelection(){this.view.dom.ownerDocument.removeEventListener("selectionchange",this.onSelectionChange)}suppressSelectionUpdates(){this.suppressingSelectionUpdates=!0,setTimeout((()=>this.suppressingSelectionUpdates=!1),50)}onSelectionChange(){if(jt(this.view)){if(this.suppressingSelectionUpdates)return Et(this.view);if(d&&p<=11&&!this.view.state.selection.empty){let t=this.view.domSelection();if(t.focusNode&&M(t.focusNode,t.focusOffset,t.anchorNode,t.anchorOffset))return this.flushSoon()}this.flush()}}setCurSelection(){this.currentSelection.set(this.view.domSelection())}ignoreSelectionChange(t){if(0==t.rangeCount)return!0;let e=t.getRangeAt(0).commonAncestorContainer,n=this.view.docView.nearestDesc(e);return n&&n.ignoreMutation({type:"selection",target:3==e.nodeType?e.parentNode:e})?(this.setCurSelection(),!0):void 0}flush(){if(!this.view.docView||this.flushingSoon>-1)return;let t=this.observer?this.observer.takeRecords():[];this.queue.length&&(t=this.queue.concat(t),this.queue.length=0);let e=this.view.domSelection(),n=!this.suppressingSelectionUpdates&&!this.currentSelection.eq(e)&&jt(this.view)&&!this.ignoreSelectionChange(e),r=-1,i=-1,o=!1,s=[];if(this.view.editable)for(let e=0;e<t.length;e++){let n=this.registerMutation(t[e],s);n&&(r=r<0?n.from:Math.min(n.from,r),i=i<0?n.to:Math.max(n.to,i),n.typeOver&&(o=!0))}if(f&&s.length>1){let t=s.filter((t=>"BR"==t.nodeName));if(2==t.length){let e=t[0],n=t[1];e.parentNode&&e.parentNode.parentNode==n.parentNode?n.remove():e.remove()}}var a;(r>-1||n)&&(r>-1&&(this.view.docView.markDirty(r,i),a=this.view,Ke||(Ke=!0,"normal"==getComputedStyle(a.dom).whiteSpace&&console.warn("ProseMirror expects the CSS white-space property to be set, preferably to 'pre-wrap'. It is recommended to load style/prosemirror.css from the prosemirror-view package."))),this.handleDOMChange(r,i,o,s),this.view.docView&&this.view.docView.dirty?this.view.updateState(this.view.state):this.currentSelection.eq(e)||Et(this.view),this.currentSelection.set(e))}registerMutation(t,e){if(e.indexOf(t.target)>-1)return null;let n=this.view.docView.nearestDesc(t.target);if("attributes"==t.type&&(n==this.view.docView||"contenteditable"==t.attributeName||"style"==t.attributeName&&!t.oldValue&&!t.target.getAttribute("style")))return null;if(!n||n.ignoreMutation(t))return null;if("childList"==t.type){for(let n=0;n<t.addedNodes.length;n++)e.push(t.addedNodes[n]);if(n.contentDOM&&n.contentDOM!=n.dom&&!n.contentDOM.contains(t.target))return{from:n.posBefore,to:n.posAfter};let r=t.previousSibling,i=t.nextSibling;if(d&&p<=11&&t.addedNodes.length)for(let e=0;e<t.addedNodes.length;e++){let{previousSibling:n,nextSibling:o}=t.addedNodes[e];(!n||Array.prototype.indexOf.call(t.addedNodes,n)<0)&&(r=n),(!o||Array.prototype.indexOf.call(t.addedNodes,o)<0)&&(i=o)}let o=r&&r.parentNode==t.target?_(r)+1:0,s=n.localPosFromDOM(t.target,o,-1),a=i&&i.parentNode==t.target?_(i):t.target.childNodes.length;return{from:s,to:n.localPosFromDOM(t.target,a,1)}}return"attributes"==t.type?{from:n.posAtStart-n.border,to:n.posAtEnd+n.border}:{from:n.posAtStart,to:n.posAtEnd,typeOver:t.target.nodeValue==t.oldValue}}}let Ke=!1;function Ge(t){let e=t.pmViewDesc;if(e)return e.parseRule();if("BR"==t.nodeName&&t.parentNode){if(y&&/^(ul|ol)$/i.test(t.parentNode.nodeName)){let t=document.createElement("div");return t.appendChild(document.createElement("li")),{skip:t}}if(t.parentNode.lastChild==t||y&&/^(tr|table)$/i.test(t.parentNode.nodeName))return{ignore:!0}}else if("IMG"==t.nodeName&&t.getAttribute("mark-placeholder"))return{ignore:!0};return null}function Ze(t,e,n){return Math.max(n.anchor,n.head)>e.content.size?null:Dt(t,e.resolve(n.anchor),e.resolve(n.head))}function Qe(t,e,n){let r=t.depth,i=e?t.end():t.pos;for(;r>0&&(e||t.indexAfter(r)==t.node(r).childCount);)r--,i++,e=!1;if(n){let e=t.node(r).maybeChild(t.indexAfter(r));for(;e&&!e.isLeaf;)e=e.firstChild,i++}return i}class tn{constructor(t,e){this._root=null,this.focused=!1,this.trackWrites=null,this.mounted=!1,this.markCursor=null,this.cursorWrapper=null,this.lastSelectedViewDesc=void 0,this.input=new se,this.prevDirectPlugins=[],this.pluginViews=[],this.dragging=null,this._props=e,this.state=e.state,this.directPlugins=e.plugins||[],this.directPlugins.forEach(sn),this.dispatch=this.dispatch.bind(this),this.dom=t&&t.mount||document.createElement("div"),t&&(t.appendChild?t.appendChild(this.dom):"function"==typeof t?t(this.dom):t.mount&&(this.mounted=!0)),this.editable=rn(this),nn(this),this.nodeViews=on(this),this.docView=at(this.state.doc,en(this),We(this),this.dom,this),this.domObserver=new Xe(this,((t,e,n,o)=>function(t,e,n,o,s){if(e<0){let e=t.input.lastSelectionTime>Date.now()-50?t.input.lastSelectionOrigin:null,n=St(t,e);if(n&&!t.state.selection.eq(n)){let r=t.state.tr.setSelection(n);"pointer"==e?r.setMeta("pointer",!0):"key"==e&&r.scrollIntoView(),t.dispatch(r)}return}let a=t.state.doc.resolve(e),l=a.sharedDepth(n);e=a.before(l+1),n=t.state.doc.resolve(n).after(l+1);let c=t.state.selection,h=function(t,e,n){let r,{node:o,fromOffset:s,toOffset:a,from:l,to:c}=t.docView.parseRange(e,n),h=t.domSelection(),u=h.anchorNode;if(u&&t.dom.contains(1==u.nodeType?u:u.parentNode)&&(r=[{node:u,offset:h.anchorOffset}],j(h)||r.push({node:h.focusNode,offset:h.focusOffset})),m&&8===t.input.lastKeyCode)for(let t=a;t>s;t--){let e=o.childNodes[t-1],n=e.pmViewDesc;if("BR"==e.nodeName&&!n){a=t;break}if(!n||n.size)break}let d=t.state.doc,p=t.someProp("domParser")||i.aw.fromSchema(t.state.schema),f=d.resolve(l),g=null,v=p.parse(o,{topNode:f.parent,topMatch:f.parent.contentMatchAt(f.index()),topOpen:!0,from:s,to:a,preserveWhitespace:"pre"!=f.parent.type.whitespace||"full",findPositions:r,ruleFromNode:Ge,context:f});if(r&&null!=r[0].pos){let t=r[0].pos,e=r[1]&&r[1].pos;null==e&&(e=t),g={anchor:t+l,head:e+l}}return{doc:v,sel:g,from:l,to:c}}(t,e,n);if(m&&t.cursorWrapper&&h.sel&&h.sel.anchor==t.cursorWrapper.deco.from){let e=t.cursorWrapper.deco.type.toDOM.nextSibling,n=e&&e.nodeValue?e.nodeValue.length:1;h.sel={anchor:h.sel.anchor+n,head:h.sel.anchor+n}}let u,f,g=t.state.doc,v=g.slice(h.from,h.to);8===t.input.lastKeyCode&&Date.now()-100<t.input.lastKeyCodeTime?(u=t.state.selection.to,f="end"):(u=t.state.selection.from,f="start"),t.input.lastKeyCode=null;let y=function(t,e,n,r,i){let o=t.findDiffStart(e,n);if(null==o)return null;let{a:s,b:a}=t.findDiffEnd(e,n+t.size,n+e.size);return"end"==i&&(r-=s+Math.max(0,o-Math.min(s,a))-o),s<o&&t.size<e.size?(o-=r<=o&&r>=s?o-r:0,a=o+(a-s),s=o):a<o&&(o-=r<=o&&r>=a?o-r:0,s=o+(s-a),a=o),{start:o,endA:s,endB:a}}(v.content,h.doc.content,h.from,u,f);if((b&&t.input.lastIOSEnter>Date.now()-225||x)&&s.some((t=>"DIV"==t.nodeName||"P"==t.nodeName))&&(!y||y.endA>=y.endB)&&t.someProp("handleKeyDown",(e=>e(t,R(13,"Enter")))))return void(t.input.lastIOSEnter=0);if(!y){if(!(o&&c instanceof r.Bs&&!c.empty&&c.$head.sameParent(c.$anchor))||t.composing||h.sel&&h.sel.anchor!=h.sel.head){if(h.sel){let e=Ze(t,t.state.doc,h.sel);e&&!e.eq(t.state.selection)&&t.dispatch(t.state.tr.setSelection(e))}return}y={start:c.from,endA:c.to,endB:c.to}}t.input.domChangeCount++,t.state.selection.from<t.state.selection.to&&y.start==y.endB&&t.state.selection instanceof r.Bs&&(y.start>t.state.selection.from&&y.start<=t.state.selection.from+2&&t.state.selection.from>=h.from?y.start=t.state.selection.from:y.endA<t.state.selection.to&&y.endA>=t.state.selection.to-2&&t.state.selection.to<=h.to&&(y.endB+=t.state.selection.to-y.endA,y.endA=t.state.selection.to)),d&&p<=11&&y.endB==y.start+1&&y.endA==y.start&&y.start>h.from&&"  "==h.doc.textBetween(y.start-h.from-1,y.start-h.from+1)&&(y.start--,y.endA--,y.endB--);let w,k=h.doc.resolveNoCache(y.start-h.from),S=h.doc.resolveNoCache(y.endB-h.from),_=g.resolve(y.start),E=k.sameParent(S)&&k.parent.inlineContent&&_.end()>=y.endA;if((b&&t.input.lastIOSEnter>Date.now()-225&&(!E||s.some((t=>"DIV"==t.nodeName||"P"==t.nodeName)))||!E&&k.pos<h.doc.content.size&&(w=r.Y1.findFrom(h.doc.resolve(k.pos+1),1,!0))&&w.head==S.pos)&&t.someProp("handleKeyDown",(e=>e(t,R(13,"Enter")))))return void(t.input.lastIOSEnter=0);if(t.state.selection.anchor>y.start&&function(t,e,n,r,i){if(!r.parent.isTextblock||n-e<=i.pos-r.pos||Qe(r,!0,!1)<i.pos)return!1;let o=t.resolve(e);if(o.parentOffset<o.parent.content.size||!o.parent.isTextblock)return!1;let s=t.resolve(Qe(o,!0,!0));return!(!s.parent.isTextblock||s.pos>n||Qe(s,!0,!1)<n)&&r.parent.content.cut(r.parentOffset).eq(s.parent.content)}(g,y.start,y.endA,k,S)&&t.someProp("handleKeyDown",(e=>e(t,R(8,"Backspace")))))return void(x&&m&&t.domObserver.suppressSelectionUpdates());m&&x&&y.endB==y.start&&(t.input.lastAndroidDelete=Date.now()),x&&!E&&k.start()!=S.start()&&0==S.parentOffset&&k.depth==S.depth&&h.sel&&h.sel.anchor==h.sel.head&&h.sel.head==y.endA&&(y.endB-=2,S=h.doc.resolveNoCache(y.endB-h.from),setTimeout((()=>{t.someProp("handleKeyDown",(function(e){return e(t,R(13,"Enter"))}))}),20));let C,O,M,A=y.start,T=y.endA;if(E)if(k.pos==S.pos)d&&p<=11&&0==k.parentOffset&&(t.domObserver.suppressSelectionUpdates(),setTimeout((()=>Et(t)),20)),C=t.state.tr.delete(A,T),O=g.resolve(y.start).marksAcross(g.resolve(y.endA));else if(y.endA==y.endB&&(M=function(t,e){let n,r,o,s=t.firstChild.marks,a=e.firstChild.marks,l=s,c=a;for(let t=0;t<a.length;t++)l=a[t].removeFromSet(l);for(let t=0;t<s.length;t++)c=s[t].removeFromSet(c);if(1==l.length&&0==c.length)r=l[0],n="add",o=t=>t.mark(r.addToSet(t.marks));else{if(0!=l.length||1!=c.length)return null;r=c[0],n="remove",o=t=>t.mark(r.removeFromSet(t.marks))}let h=[];for(let t=0;t<e.childCount;t++)h.push(o(e.child(t)));if(i.HY.from(h).eq(t))return{mark:r,type:n}}(k.parent.content.cut(k.parentOffset,S.parentOffset),_.parent.content.cut(_.parentOffset,y.endA-_.start()))))C=t.state.tr,"add"==M.type?C.addMark(A,T,M.mark):C.removeMark(A,T,M.mark);else if(k.parent.child(k.index()).isText&&k.index()==S.index()-(S.textOffset?0:1)){let e=k.parent.textBetween(k.parentOffset,S.parentOffset);if(t.someProp("handleTextInput",(n=>n(t,A,T,e))))return;C=t.state.tr.insertText(e,A,T)}if(C||(C=t.state.tr.replace(A,T,h.doc.slice(y.start-h.from,y.endB-h.from))),h.sel){let e=Ze(t,C.doc,h.sel);e&&!(m&&x&&t.composing&&e.empty&&(y.start!=y.endB||t.input.lastAndroidDelete<Date.now()-100)&&(e.head==A||e.head==C.mapping.map(T)-1)||d&&e.empty&&e.head==A)&&C.setSelection(e)}O&&C.ensureMarks(O),t.dispatch(C.scrollIntoView())}(this,t,e,n,o))),this.domObserver.start(),function(t){for(let e in ie){let n=ie[e];t.dom.addEventListener(e,t.input.eventHandlers[e]=e=>{!he(t,e)||ce(t,e)||!t.editable&&e.type in oe||n(t,e)})}y&&t.dom.addEventListener("input",(()=>null)),le(t)}(this),this.updatePluginViews()}get composing(){return this.input.composing}get props(){if(this._props.state!=this.state){let t=this._props;this._props={};for(let e in t)this._props[e]=t[e];this._props.state=this.state}return this._props}update(t){t.handleDOMEvents!=this._props.handleDOMEvents&&le(this),this._props=t,t.plugins&&(t.plugins.forEach(sn),this.directPlugins=t.plugins),this.updateStateInner(t.state,!0)}setProps(t){let e={};for(let t in this._props)e[t]=this._props[t];e.state=this.state;for(let n in t)e[n]=t[n];this.update(e)}updateState(t){this.updateStateInner(t,this.state.plugins!=t.plugins)}updateStateInner(t,e){let n=this.state,i=!1,o=!1;if(t.storedMarks&&this.composing&&(ke(this),o=!0),this.state=t,e){let t=on(this);(function(t,e){let n=0,r=0;for(let r in t){if(t[r]!=e[r])return!0;n++}for(let t in e)r++;return n!=r})(t,this.nodeViews)&&(this.nodeViews=t,i=!0),le(this)}this.editable=rn(this),nn(this);let s=We(this),a=en(this),l=e?"reset":t.scrollToSelection>n.scrollToSelection?"to selection":"preserve",c=i||!this.docView.matchesNode(t.doc,a,s);!c&&t.selection.eq(n.selection)||(o=!0);let h="preserve"==l&&o&&null==this.dom.style.overflowAnchor&&function(t){let e,n,r=t.dom.getBoundingClientRect(),i=Math.max(0,r.top);for(let o=(r.left+r.right)/2,s=i+1;s<Math.min(innerHeight,r.bottom);s+=5){let r=t.root.elementFromPoint(o,s);if(!r||r==t.dom||!t.dom.contains(r))continue;let a=r.getBoundingClientRect();if(a.top>=i-20){e=r,n=a.top;break}}return{refDOM:e,refTop:n,stack:F(t.dom)}}(this);if(o){this.domObserver.stop();let e=c&&(d||m)&&!this.composing&&!n.selection.empty&&!t.selection.empty&&function(t,e){let n=Math.min(t.$anchor.sharedDepth(t.head),e.$anchor.sharedDepth(e.head));return t.$anchor.start(n)!=e.$anchor.start(n)}(n.selection,t.selection);if(c){let n=m?this.trackWrites=this.domSelection().focusNode:null;!i&&this.docView.update(t.doc,a,s,this)||(this.docView.updateOuterDeco([]),this.docView.destroy(),this.docView=at(t.doc,a,s,this.dom,this)),n&&!this.trackWrites&&(e=!0)}e||!(this.input.mouseDown&&this.domObserver.currentSelection.eq(this.domSelection())&&function(t){let e=t.docView.domFromPos(t.state.selection.anchor,0),n=t.domSelection();return M(e.node,e.offset,n.anchorNode,n.anchorOffset)}(this))?Et(this,e):(Tt(this,t.selection),this.domObserver.setCurSelection()),this.domObserver.start()}if(this.updatePluginViews(n),"reset"==l)this.dom.scrollTop=0;else if("to selection"==l){let e=this.domSelection().focusNode;if(this.someProp("handleScrollToSelection",(t=>t(this))));else if(t.selection instanceof r.qv){let n=this.docView.domAfterPos(t.selection.from);1==n.nodeType&&B(this,n.getBoundingClientRect(),e)}else B(this,this.coordsAtPos(t.selection.head,1),e)}else h&&function({refDOM:t,refTop:e,stack:n}){let r=t?t.getBoundingClientRect().top:0;$(n,0==r?0:r-e)}(h)}destroyPluginViews(){let t;for(;t=this.pluginViews.pop();)t.destroy&&t.destroy()}updatePluginViews(t){if(t&&t.plugins==this.state.plugins&&this.directPlugins==this.prevDirectPlugins)for(let e=0;e<this.pluginViews.length;e++){let n=this.pluginViews[e];n.update&&n.update(this,t)}else{this.prevDirectPlugins=this.directPlugins,this.destroyPluginViews();for(let t=0;t<this.directPlugins.length;t++){let e=this.directPlugins[t];e.spec.view&&this.pluginViews.push(e.spec.view(this))}for(let t=0;t<this.state.plugins.length;t++){let e=this.state.plugins[t];e.spec.view&&this.pluginViews.push(e.spec.view(this))}}}someProp(t,e){let n,r=this._props&&this._props[t];if(null!=r&&(n=e?e(r):r))return n;for(let r=0;r<this.directPlugins.length;r++){let i=this.directPlugins[r].props[t];if(null!=i&&(n=e?e(i):i))return n}let i=this.state.plugins;if(i)for(let r=0;r<i.length;r++){let o=i[r].props[t];if(null!=o&&(n=e?e(o):o))return n}}hasFocus(){return this.root.activeElement==this.dom}focus(){this.domObserver.stop(),this.editable&&function(t){if(t.setActive)return t.setActive();if(L)return t.focus(L);let e=F(t);t.focus(null==L?{get preventScroll(){return L={preventScroll:!0},!0}}:void 0),L||(L=!1,$(e,0))}(this.dom),Et(this),this.domObserver.start()}get root(){let t=this._root;if(null==t)for(let t=this.dom.parentNode;t;t=t.parentNode)if(9==t.nodeType||11==t.nodeType&&t.host)return t.getSelection||(Object.getPrototypeOf(t).getSelection=()=>t.ownerDocument.getSelection()),this._root=t;return t||document}posAtCoords(t){return W(this,t)}coordsAtPos(t,e=1){return J(this,t,e)}domAtPos(t,e=0){return this.docView.domFromPos(t,e)}nodeDOM(t){let e=this.docView.descAt(t);return e?e.nodeDOM:null}posAtDOM(t,e,n=-1){let r=this.docView.posFromDOM(t,e,n);if(null==r)throw new RangeError("DOM position not inside the editor");return r}endOfTextblock(t,e){return function(t,e,n){return Q==e&&tt==n?et:(Q=e,tt=n,et="up"==n||"down"==n?function(t,e,n){let r=e.selection,i="up"==n?r.$from:r.$to;return G(t,e,(()=>{let{node:e}=t.docView.domFromPos(i.pos,"up"==n?-1:1);for(;;){let n=t.docView.nearestDesc(e,!0);if(!n)break;if(n.node.isBlock){e=n.dom;break}e=n.dom.parentNode}let r=J(t,i.pos,1);for(let t=e.firstChild;t;t=t.nextSibling){let e;if(1==t.nodeType)e=t.getClientRects();else{if(3!=t.nodeType)continue;e=O(t,0,t.nodeValue.length).getClientRects()}for(let t=0;t<e.length;t++){let i=e[t];if(i.bottom>i.top+1&&("up"==n?r.top-i.top>2*(i.bottom-r.top):i.bottom-r.bottom>2*(r.bottom-i.top)))return!1}}return!0}))}(t,e,n):function(t,e,n){let{$head:r}=e.selection;if(!r.parent.isTextblock)return!1;let i=r.parentOffset,o=!i,s=i==r.parent.content.size,a=t.domSelection();return Z.test(r.parent.textContent)&&a.modify?G(t,e,(()=>{let e=a.getRangeAt(0),i=a.focusNode,o=a.focusOffset,s=a.caretBidiLevel;a.modify("move",n,"character");let l=!(r.depth?t.docView.domAfterPos(r.before()):t.dom).contains(1==a.focusNode.nodeType?a.focusNode:a.focusNode.parentNode)||i==a.focusNode&&o==a.focusOffset;return a.removeAllRanges(),a.addRange(e),null!=s&&(a.caretBidiLevel=s),l})):"left"==n||"backward"==n?o:s}(t,e,n))}(this,e||this.state,t)}destroy(){this.docView&&(function(t){t.domObserver.stop();for(let e in t.input.eventHandlers)t.dom.removeEventListener(e,t.input.eventHandlers[e]);clearTimeout(t.input.composingTimeout),clearTimeout(t.input.lastIOSEnterFallbackTimeout)}(this),this.destroyPluginViews(),this.mounted?(this.docView.update(this.state.doc,[],We(this),this),this.dom.textContent=""):this.dom.parentNode&&this.dom.parentNode.removeChild(this.dom),this.docView.destroy(),this.docView=null)}get isDestroyed(){return null==this.docView}dispatchEvent(t){return function(t,e){ce(t,e)||!ie[e.type]||!t.editable&&e.type in oe||ie[e.type](t,e)}(this,t)}dispatch(t){let e=this._props.dispatchTransaction;e?e.call(this,t):this.updateState(this.state.apply(t))}domSelection(){return this.root.getSelection()}}function en(t){let e=Object.create(null);return e.class="ProseMirror",e.contenteditable=String(t.editable),e.translate="no",t.someProp("attributes",(n=>{if("function"==typeof n&&(n=n(t.state)),n)for(let t in n)"class"==t&&(e.class+=" "+n[t]),"style"==t?e.style=(e.style?e.style+";":"")+n[t]:e[t]||"contenteditable"==t||"nodeName"==t||(e[t]=String(n[t]))})),[De.node(0,t.state.doc.content.size,e)]}function nn(t){if(t.markCursor){let e=document.createElement("img");e.className="ProseMirror-separator",e.setAttribute("mark-placeholder","true"),e.setAttribute("alt",""),t.cursorWrapper={dom:e,deco:De.widget(t.state.selection.head,e,{raw:!0,marks:t.markCursor})}}else t.cursorWrapper=null}function rn(t){return!t.someProp("editable",(e=>!1===e(t.state)))}function on(t){let e=Object.create(null);function n(t){for(let n in t)Object.prototype.hasOwnProperty.call(e,n)||(e[n]=t[n])}return t.someProp("nodeViews",n),t.someProp("markViews",n),e}function sn(t){if(t.spec.state||t.spec.filterTransaction||t.spec.appendTransaction)throw new RangeError("Plugins passed directly to the view must not have a state component")}for(var an={8:"Backspace",9:"Tab",10:"Enter",12:"NumLock",13:"Enter",16:"Shift",17:"Control",18:"Alt",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",44:"PrintScreen",45:"Insert",46:"Delete",59:";",61:"=",91:"Meta",92:"Meta",106:"*",107:"+",108:",",109:"-",110:".",111:"/",144:"NumLock",145:"ScrollLock",160:"Shift",161:"Shift",162:"Control",163:"Control",164:"Alt",165:"Alt",173:"-",186:";",187:"=",188:",",189:"-",190:".",191:"/",192:"`",219:"[",220:"\\",221:"]",222:"'",229:"q"},ln={48:")",49:"!",50:"@",51:"#",52:"$",53:"%",54:"^",55:"&",56:"*",57:"(",59:":",61:"+",173:"_",186:":",187:"+",188:"<",189:"_",190:">",191:"?",192:"~",219:"{",220:"|",221:"}",222:'"',229:"Q"},cn="undefined"!=typeof navigator&&/Chrome\/(\d+)/.exec(navigator.userAgent),hn="undefined"!=typeof navigator&&/Apple Computer/.test(navigator.vendor),un="undefined"!=typeof navigator&&/Gecko\/\d+/.test(navigator.userAgent),dn="undefined"!=typeof navigator&&/Mac/.test(navigator.platform),pn="undefined"!=typeof navigator&&/MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent),fn=cn&&(dn||+cn[1]<57)||un&&dn,gn=0;gn<10;gn++)an[48+gn]=an[96+gn]=String(gn);for(gn=1;gn<=24;gn++)an[gn+111]="F"+gn;for(gn=65;gn<=90;gn++)an[gn]=String.fromCharCode(gn+32),ln[gn]=String.fromCharCode(gn);for(var mn in an)ln.hasOwnProperty(mn)||(ln[mn]=an[mn]);const vn="undefined"!=typeof navigator&&/Mac|iP(hone|[oa]d)/.test(navigator.platform);function yn(t){let e,n,r,i,o=t.split(/-(?!$)/),s=o[o.length-1];"Space"==s&&(s=" ");for(let t=0;t<o.length-1;t++){let s=o[t];if(/^(cmd|meta|m)$/i.test(s))i=!0;else if(/^a(lt)?$/i.test(s))e=!0;else if(/^(c|ctrl|control)$/i.test(s))n=!0;else if(/^s(hift)?$/i.test(s))r=!0;else{if(!/^mod$/i.test(s))throw new Error("Unrecognized modifier name: "+s);vn?i=!0:n=!0}}return e&&(s="Alt-"+s),n&&(s="Ctrl-"+s),i&&(s="Meta-"+s),r&&(s="Shift-"+s),s}function bn(t,e,n){return e.altKey&&(t="Alt-"+t),e.ctrlKey&&(t="Ctrl-"+t),e.metaKey&&(t="Meta-"+t),!1!==n&&e.shiftKey&&(t="Shift-"+t),t}function wn(t){let e=function(t){let e=Object.create(null);for(let n in t)e[yn(n)]=t[n];return e}(t);return function(t,n){let r,i=function(t){var e=!(fn&&(t.ctrlKey||t.altKey||t.metaKey)||(hn||pn)&&t.shiftKey&&t.key&&1==t.key.length)&&t.key||(t.shiftKey?ln:an)[t.keyCode]||t.key||"Unidentified";return"Esc"==e&&(e="Escape"),"Del"==e&&(e="Delete"),"Left"==e&&(e="ArrowLeft"),"Up"==e&&(e="ArrowUp"),"Right"==e&&(e="ArrowRight"),"Down"==e&&(e="ArrowDown"),e}(n),o=1==i.length&&" "!=i,s=e[bn(i,n,!o)];if(s&&s(t.state,t.dispatch,t))return!0;if(o&&(n.shiftKey||n.altKey||n.metaKey||i.charCodeAt(0)>127)&&(r=an[n.keyCode])&&r!=i){let i=e[bn(r,n,!0)];if(i&&i(t.state,t.dispatch,t))return!0}else if(o&&n.shiftKey){let r=e[bn(i,n,!0)];if(r&&r(t.state,t.dispatch,t))return!0}return!1}}const xn=(t,e)=>!t.selection.empty&&(e&&e(t.tr.deleteSelection().scrollIntoView()),!0),kn=(t,e,n)=>{let{$cursor:s}=t.selection;if(!s||(n?!n.endOfTextblock("backward",t):s.parentOffset>0))return!1;let a=En(s);if(!a){let n=s.blockRange(),r=n&&(0,o.k9)(n);return null!=r&&(e&&e(t.tr.lift(n,r).scrollIntoView()),!0)}let l=a.nodeBefore;if(!l.type.spec.isolating&&Rn(t,a,e))return!0;if(0==s.parent.content.size&&(Sn(l,"end")||r.qv.isSelectable(l))){let n=(0,o.dR)(t.doc,s.before(),s.after(),i.p2.empty);if(n&&n.slice.size<n.to-n.from){if(e){let i=t.tr.step(n);i.setSelection(Sn(l,"end")?r.Y1.findFrom(i.doc.resolve(i.mapping.map(a.pos,-1)),-1):r.qv.create(i.doc,a.pos-l.nodeSize)),e(i.scrollIntoView())}return!0}}return!(!l.isAtom||a.depth!=s.depth-1||(e&&e(t.tr.delete(a.pos-l.nodeSize,a.pos).scrollIntoView()),0))};function Sn(t,e,n=!1){for(let r=t;r;r="start"==e?r.firstChild:r.lastChild){if(r.isTextblock)return!0;if(n&&1!=r.childCount)return!1}return!1}const _n=(t,e,n)=>{let{$head:i,empty:o}=t.selection,s=i;if(!o)return!1;if(i.parent.isTextblock){if(n?!n.endOfTextblock("backward",t):i.parentOffset>0)return!1;s=En(i)}let a=s&&s.nodeBefore;return!(!a||!r.qv.isSelectable(a)||(e&&e(t.tr.setSelection(r.qv.create(t.doc,s.pos-a.nodeSize)).scrollIntoView()),0))};function En(t){if(!t.parent.type.spec.isolating)for(let e=t.depth-1;e>=0;e--){if(t.index(e)>0)return t.doc.resolve(t.before(e+1));if(t.node(e).type.spec.isolating)break}return null}const Cn=(t,e,n)=>{let{$cursor:s}=t.selection;if(!s||(n?!n.endOfTextblock("forward",t):s.parentOffset<s.parent.content.size))return!1;let a=Mn(s);if(!a)return!1;let l=a.nodeAfter;if(Rn(t,a,e))return!0;if(0==s.parent.content.size&&(Sn(l,"start")||r.qv.isSelectable(l))){let n=(0,o.dR)(t.doc,s.before(),s.after(),i.p2.empty);if(n&&n.slice.size<n.to-n.from){if(e){let i=t.tr.step(n);i.setSelection(Sn(l,"start")?r.Y1.findFrom(i.doc.resolve(i.mapping.map(a.pos)),1):r.qv.create(i.doc,i.mapping.map(a.pos))),e(i.scrollIntoView())}return!0}}return!(!l.isAtom||a.depth!=s.depth-1||(e&&e(t.tr.delete(a.pos,a.pos+l.nodeSize).scrollIntoView()),0))},On=(t,e,n)=>{let{$head:i,empty:o}=t.selection,s=i;if(!o)return!1;if(i.parent.isTextblock){if(n?!n.endOfTextblock("forward",t):i.parentOffset<i.parent.content.size)return!1;s=Mn(i)}let a=s&&s.nodeAfter;return!(!a||!r.qv.isSelectable(a)||(e&&e(t.tr.setSelection(r.qv.create(t.doc,s.pos)).scrollIntoView()),0))};function Mn(t){if(!t.parent.type.spec.isolating)for(let e=t.depth-1;e>=0;e--){let n=t.node(e);if(t.index(e)+1<n.childCount)return t.doc.resolve(t.after(e+1));if(n.type.spec.isolating)break}return null}const An=(t,e)=>{let{$head:n,$anchor:r}=t.selection;return!(!n.parent.type.spec.code||!n.sameParent(r)||(e&&e(t.tr.insertText("\n").scrollIntoView()),0))};function Tn(t){for(let e=0;e<t.edgeCount;e++){let{type:n}=t.edge(e);if(n.isTextblock&&!n.hasRequiredAttrs())return n}return null}const Nn=(t,e)=>{let{$head:n,$anchor:i}=t.selection;if(!n.parent.type.spec.code||!n.sameParent(i))return!1;let o=n.node(-1),s=n.indexAfter(-1),a=Tn(o.contentMatchAt(s));if(!a||!o.canReplaceWith(s,s,a))return!1;if(e){let i=n.after(),o=t.tr.replaceWith(i,i,a.createAndFill());o.setSelection(r.Y1.near(o.doc.resolve(i),1)),e(o.scrollIntoView())}return!0},Dn=(t,e)=>{let n=t.selection,{$from:i,$to:o}=n;if(n instanceof r.C1||i.parent.inlineContent||o.parent.inlineContent)return!1;let s=Tn(o.parent.contentMatchAt(o.indexAfter()));if(!s||!s.isTextblock)return!1;if(e){let n=(!i.parentOffset&&o.index()<o.parent.childCount?i:o).pos,a=t.tr.insert(n,s.createAndFill());a.setSelection(r.Bs.create(a.doc,n+1)),e(a.scrollIntoView())}return!0},jn=(t,e)=>{let{$cursor:n}=t.selection;if(!n||n.parent.content.size)return!1;if(n.depth>1&&n.after()!=n.end(-1)){let r=n.before();if((0,o.Ax)(t.doc,r))return e&&e(t.tr.split(r).scrollIntoView()),!0}let r=n.blockRange(),i=r&&(0,o.k9)(r);return null!=i&&(e&&e(t.tr.lift(r,i).scrollIntoView()),!0)};function Rn(t,e,n){let s,a,l=e.nodeBefore,c=e.nodeAfter;if(l.type.spec.isolating||c.type.spec.isolating)return!1;if(function(t,e,n){let r=e.nodeBefore,i=e.nodeAfter,s=e.index();return!(!(r&&i&&r.type.compatibleContent(i.type))||(!r.content.size&&e.parent.canReplace(s-1,s)?(n&&n(t.tr.delete(e.pos-r.nodeSize,e.pos).scrollIntoView()),0):!e.parent.canReplace(s,s+1)||!i.isTextblock&&!(0,o.Mn)(t.doc,e.pos)||(n&&n(t.tr.clearIncompatible(e.pos,r.type,r.contentMatchAt(r.childCount)).join(e.pos).scrollIntoView()),0)))}(t,e,n))return!0;let h=e.parent.canReplace(e.index(),e.index()+1);if(h&&(s=(a=l.contentMatchAt(l.childCount)).findWrapping(c.type))&&a.matchType(s[0]||c.type).validEnd){if(n){let r=e.pos+c.nodeSize,a=i.HY.empty;for(let t=s.length-1;t>=0;t--)a=i.HY.from(s[t].create(null,a));a=i.HY.from(l.copy(a));let h=t.tr.step(new o.FC(e.pos-1,r,e.pos,r,new i.p2(a,1,0),s.length,!0)),u=r+2*s.length;(0,o.Mn)(h.doc,u)&&h.join(u),n(h.scrollIntoView())}return!0}let u=r.Y1.findFrom(e,1),d=u&&u.$from.blockRange(u.$to),p=d&&(0,o.k9)(d);if(null!=p&&p>=e.depth)return n&&n(t.tr.lift(d,p).scrollIntoView()),!0;if(h&&Sn(c,"start",!0)&&Sn(l,"end")){let r=l,s=[];for(;s.push(r),!r.isTextblock;)r=r.lastChild;let a=c,h=1;for(;!a.isTextblock;a=a.firstChild)h++;if(r.canReplace(r.childCount,r.childCount,a.content)){if(n){let r=i.HY.empty;for(let t=s.length-1;t>=0;t--)r=i.HY.from(s[t].copy(r));n(t.tr.step(new o.FC(e.pos-s.length,e.pos+c.nodeSize,e.pos+h,e.pos+c.nodeSize-h,new i.p2(r,s.length,0),0,!0)).scrollIntoView())}return!0}}return!1}function Pn(t){return function(e,n){let i=e.selection,o=t<0?i.$from:i.$to,s=o.depth;for(;o.node(s).isInline;){if(!s)return!1;s--}return!!o.node(s).isTextblock&&(n&&n(e.tr.setSelection(r.Bs.create(e.doc,t<0?o.start(s):o.end(s)))),!0)}}const zn=Pn(-1),In=Pn(1);function Bn(t,e=null){return function(n,r){let{from:i,to:o}=n.selection,s=!1;return n.doc.nodesBetween(i,o,((r,i)=>{if(s)return!1;if(r.isTextblock&&!r.hasMarkup(t,e))if(r.type==t)s=!0;else{let e=n.doc.resolve(i),r=e.index();s=e.parent.canReplaceWith(r,r+1,t)}})),!!s&&(r&&r(n.tr.setBlockType(i,o,t,e).scrollIntoView()),!0)}}function Fn(...t){return function(e,n,r){for(let i=0;i<t.length;i++)if(t[i](e,n,r))return!0;return!1}}let $n=Fn(xn,kn,_n),Ln=Fn(xn,Cn,On);const Hn={Enter:Fn(An,Dn,jn,((t,e)=>{let{$from:n,$to:i}=t.selection;if(t.selection instanceof r.qv&&t.selection.node.isBlock)return!(!n.parentOffset||!(0,o.Ax)(t.doc,n.pos)||(e&&e(t.tr.split(n.pos).scrollIntoView()),0));if(!n.parent.isBlock)return!1;if(e){let s=i.parentOffset==i.parent.content.size,a=t.tr;(t.selection instanceof r.Bs||t.selection instanceof r.C1)&&a.deleteSelection();let l=0==n.depth?null:Tn(n.node(-1).contentMatchAt(n.indexAfter(-1))),c=s&&l?[{type:l}]:void 0,h=(0,o.Ax)(a.doc,a.mapping.map(n.pos),1,c);if(c||h||!(0,o.Ax)(a.doc,a.mapping.map(n.pos),1,l?[{type:l}]:void 0)||(l&&(c=[{type:l}]),h=!0),h&&(a.split(a.mapping.map(n.pos),1,c),!s&&!n.parentOffset&&n.parent.type!=l)){let t=a.mapping.map(n.before()),e=a.doc.resolve(t);l&&n.node(-1).canReplaceWith(e.index(),e.index()+1,l)&&a.setNodeMarkup(a.mapping.map(n.before()),l)}e(a.scrollIntoView())}return!0})),"Mod-Enter":Nn,Backspace:$n,"Mod-Backspace":$n,"Shift-Backspace":$n,Delete:Ln,"Mod-Delete":Ln,"Mod-a":(t,e)=>(e&&e(t.tr.setSelection(new r.C1(t.doc))),!0)},Vn={"Ctrl-h":Hn.Backspace,"Alt-Backspace":Hn["Mod-Backspace"],"Ctrl-d":Hn.Delete,"Ctrl-Alt-Backspace":Hn["Mod-Delete"],"Alt-Delete":Hn["Mod-Delete"],"Alt-d":Hn["Mod-Delete"],"Ctrl-a":zn,"Ctrl-e":In};for(let t in Hn)Vn[t]=Hn[t];function qn(t){const{state:e,transaction:n}=t;let{selection:r}=n,{doc:i}=n,{storedMarks:o}=n;return{...e,apply:e.apply.bind(e),applyTransaction:e.applyTransaction.bind(e),filterTransaction:e.filterTransaction,plugins:e.plugins,schema:e.schema,reconfigure:e.reconfigure.bind(e),toJSON:e.toJSON.bind(e),get storedMarks(){return o},get selection(){return r},get doc(){return i},get tr(){return r=n.selection,i=n.doc,o=n.storedMarks,n}}}"undefined"!=typeof navigator?/Mac|iP(hone|[oa]d)/.test(navigator.platform):"undefined"!=typeof os&&os.platform&&os.platform();class Wn{constructor(t){this.editor=t.editor,this.rawCommands=this.editor.extensionManager.commands,this.customState=t.state}get hasCustomState(){return!!this.customState}get state(){return this.customState||this.editor.state}get commands(){const{rawCommands:t,editor:e,state:n}=this,{view:r}=e,{tr:i}=n,o=this.buildProps(i);return Object.fromEntries(Object.entries(t).map((([t,e])=>[t,(...t)=>{const n=e(...t)(o);return i.getMeta("preventDispatch")||this.hasCustomState||r.dispatch(i),n}])))}get chain(){return()=>this.createChain()}get can(){return()=>this.createCan()}createChain(t,e=!0){const{rawCommands:n,editor:r,state:i}=this,{view:o}=r,s=[],a=!!t,l=t||i.tr,c={...Object.fromEntries(Object.entries(n).map((([t,n])=>[t,(...t)=>{const r=this.buildProps(l,e),i=n(...t)(r);return s.push(i),c}]))),run:()=>(a||!e||l.getMeta("preventDispatch")||this.hasCustomState||o.dispatch(l),s.every((t=>!0===t)))};return c}createCan(t){const{rawCommands:e,state:n}=this,r=void 0,i=t||n.tr,o=this.buildProps(i,r);return{...Object.fromEntries(Object.entries(e).map((([t,e])=>[t,(...t)=>e(...t)({...o,dispatch:r})]))),chain:()=>this.createChain(i,r)}}buildProps(t,e=!0){const{rawCommands:n,editor:r,state:i}=this,{view:o}=r;i.storedMarks&&t.setStoredMarks(i.storedMarks);const s={tr:t,editor:r,view:o,state:qn({state:i,transaction:t}),dispatch:e?()=>{}:void 0,chain:()=>this.createChain(t),can:()=>this.createCan(t),get commands(){return Object.fromEntries(Object.entries(n).map((([t,e])=>[t,(...t)=>e(...t)(s)])))}};return s}}function Un(t,e,n){return void 0===t.config[e]&&t.parent?Un(t.parent,e,n):"function"==typeof t.config[e]?t.config[e].bind({...n,parent:t.parent?Un(t.parent,e,n):null}):t.config[e]}function Yn(t){return{baseExtensions:t.filter((t=>"extension"===t.type)),nodeExtensions:t.filter((t=>"node"===t.type)),markExtensions:t.filter((t=>"mark"===t.type))}}function Jn(t){const e=[],{nodeExtensions:n,markExtensions:r}=Yn(t),i=[...n,...r],o={default:null,rendered:!0,renderHTML:null,parseHTML:null,keepOnSplit:!0,isRequired:!1};return t.forEach((t=>{const n=Un(t,"addGlobalAttributes",{name:t.name,options:t.options,storage:t.storage});n&&n().forEach((t=>{t.types.forEach((n=>{Object.entries(t.attributes).forEach((([t,r])=>{e.push({type:n,name:t,attribute:{...o,...r}})}))}))}))})),i.forEach((t=>{const n={name:t.name,options:t.options,storage:t.storage},r=Un(t,"addAttributes",n);if(!r)return;const i=r();Object.entries(i).forEach((([n,r])=>{const i={...o,...r};r.isRequired&&void 0===r.default&&delete i.default,e.push({type:t.name,name:n,attribute:i})}))})),e}function Xn(t,e){if("string"==typeof t){if(!e.nodes[t])throw Error(`There is no node type named '${t}'. Maybe you forgot to add the extension?`);return e.nodes[t]}return t}function Kn(...t){return t.filter((t=>!!t)).reduce(((t,e)=>{const n={...t};return Object.entries(e).forEach((([t,e])=>{n[t]?n[t]="class"===t?[n[t],e].join(" "):"style"===t?[n[t],e].join("; "):e:n[t]=e})),n}),{})}function Gn(t,e){return e.filter((t=>t.attribute.rendered)).map((e=>e.attribute.renderHTML?e.attribute.renderHTML(t.attrs)||{}:{[e.name]:t.attrs[e.name]})).reduce(((t,e)=>Kn(t,e)),{})}function Zn(t){return"function"==typeof t}function Qn(t,e,...n){return Zn(t)?e?t.bind(e)(...n):t(...n):t}function tr(t,e){return t.style?t:{...t,getAttrs:n=>{const r=t.getAttrs?t.getAttrs(n):t.attrs;if(!1===r)return!1;const i=e.reduce(((t,e)=>{const r=e.attribute.parseHTML?e.attribute.parseHTML(n):function(t){return"string"!=typeof t?t:t.match(/^[+-]?(?:\d*\.)?\d+$/)?Number(t):"true"===t||"false"!==t&&t}(n.getAttribute(e.name));return null==r?t:{...t,[e.name]:r}}),{});return{...r,...i}}}}function er(t){return Object.fromEntries(Object.entries(t).filter((([t,e])=>("attrs"!==t||!function(t={}){return 0===Object.keys(t).length&&t.constructor===Object}(e))&&null!=e)))}function nr(t,e){return e.nodes[t]||e.marks[t]||null}function rr(t,e){return Array.isArray(e)?e.some((e=>("string"==typeof e?e:e.name)===t.name)):e}function ir(t){return"[object RegExp]"===Object.prototype.toString.call(t)}class or{constructor(t){this.find=t.find,this.handler=t.handler}}function sr(t){var e;const{editor:n,from:r,to:i,text:o,rules:s,plugin:a}=t,{view:l}=n;if(l.composing)return!1;const c=l.state.doc.resolve(r);if(c.parent.type.spec.code||(null===(e=c.nodeBefore||c.nodeAfter)||void 0===e?void 0:e.marks.find((t=>t.type.spec.code))))return!1;let h=!1;const u=((t,e=500)=>{let n="";return t.parent.nodesBetween(Math.max(0,t.parentOffset-e),t.parentOffset,((e,r,i,o)=>{var s,a,l;n+=(null===(a=(s=e.type.spec).toText)||void 0===a?void 0:a.call(s,{node:e,pos:r,parent:i,index:o}))||(null===(l=t.nodeBefore)||void 0===l?void 0:l.text)||"%leaf%"})),n})(c)+o;return s.forEach((t=>{if(h)return;const e=((t,e)=>{if(ir(e))return e.exec(t);const n=e(t);if(!n)return null;const r=[];return r.push(n.text),r.index=n.index,r.input=t,r.data=n.data,n.replaceWith&&(n.text.includes(n.replaceWith)||console.warn('[tiptap warn]: "inputRuleMatch.replaceWith" must be part of "inputRuleMatch.text".'),r.push(n.replaceWith)),r})(u,t.find);if(!e)return;const s=l.state.tr,c=qn({state:l.state,transaction:s}),d={from:r-(e[0].length-o.length),to:i},{commands:p,chain:f,can:g}=new Wn({editor:n,state:c});null!==t.handler({state:c,range:d,match:e,commands:p,chain:f,can:g})&&s.steps.length&&(s.setMeta(a,{transform:s,from:r,to:i,text:o}),l.dispatch(s),h=!0)})),h}function ar(t){const{editor:e,rules:n}=t,i=new r.Sy({state:{init:()=>null,apply:(t,e)=>t.getMeta(i)||(t.selectionSet||t.docChanged?null:e)},props:{handleTextInput:(t,r,o,s)=>sr({editor:e,from:r,to:o,text:s,rules:n,plugin:i}),handleDOMEvents:{compositionend:t=>(setTimeout((()=>{const{$cursor:r}=t.state.selection;r&&sr({editor:e,from:r.pos,to:r.pos,text:"",rules:n,plugin:i})})),!1)},handleKeyDown(t,r){if("Enter"!==r.key)return!1;const{$cursor:o}=t.state.selection;return!!o&&sr({editor:e,from:o.pos,to:o.pos,text:"\n",rules:n,plugin:i})}},isInputRules:!0});return i}class lr{constructor(t){this.find=t.find,this.handler=t.handler}}function cr(t){const{editor:e,rules:n}=t;let i=null,o=!1,s=!1;return n.map((t=>new r.Sy({view(t){const e=e=>{var n;i=(null===(n=t.dom.parentElement)||void 0===n?void 0:n.contains(e.target))?t.dom.parentElement:null};return window.addEventListener("dragstart",e),{destroy(){window.removeEventListener("dragstart",e)}}},props:{handleDOMEvents:{drop:t=>(s=i===t.dom.parentElement,!1),paste:(t,e)=>{var n;const r=null===(n=e.clipboardData)||void 0===n?void 0:n.getData("text/html");return o=!!(null==r?void 0:r.includes("data-pm-slice")),!1}}},appendTransaction:(n,r,i)=>{const a=n[0],l="paste"===a.getMeta("uiEvent")&&!o,c="drop"===a.getMeta("uiEvent")&&!s;if(!l&&!c)return;const h=r.doc.content.findDiffStart(i.doc.content),u=r.doc.content.findDiffEnd(i.doc.content);if("number"!=typeof h||!u||h===u.b)return;const d=i.tr,p=qn({state:i,transaction:d});return function(t){const{editor:e,state:n,from:r,to:i,rule:o}=t,{commands:s,chain:a,can:l}=new Wn({editor:e,state:n}),c=[];return n.doc.nodesBetween(r,i,((t,e)=>{if(!t.isTextblock||t.type.spec.code)return;const h=Math.max(r,e),u=Math.min(i,e+t.content.size);((t,e)=>{if(ir(e))return[...t.matchAll(e)];const n=e(t);return n?n.map((e=>{const n=[];return n.push(e.text),n.index=e.index,n.input=t,n.data=e.data,e.replaceWith&&(e.text.includes(e.replaceWith)||console.warn('[tiptap warn]: "pasteRuleMatch.replaceWith" must be part of "pasteRuleMatch.text".'),n.push(e.replaceWith)),n})):[]})(t.textBetween(h-e,u-e,void 0,"￼"),o.find).forEach((t=>{if(void 0===t.index)return;const e=h+t.index+1,r=e+t[0].length,i={from:n.tr.mapping.map(e),to:n.tr.mapping.map(r)},u=o.handler({state:n,range:i,match:t,commands:s,chain:a,can:l});c.push(u)}))})),c.every((t=>null!==t))}({editor:e,state:p,from:Math.max(h-1,0),to:u.b,rule:t})&&d.steps.length?d:void 0}})))}class hr{constructor(t,e){this.splittableMarks=[],this.editor=e,this.extensions=hr.resolve(t),this.schema=function(t){var e;const n=Jn(t),{nodeExtensions:r,markExtensions:o}=Yn(t),s=null===(e=r.find((t=>Un(t,"topNode"))))||void 0===e?void 0:e.name,a=Object.fromEntries(r.map((e=>{const r=n.filter((t=>t.type===e.name)),i={name:e.name,options:e.options,storage:e.storage},o=er({...t.reduce(((t,n)=>{const r=Un(n,"extendNodeSchema",i);return{...t,...r?r(e):{}}}),{}),content:Qn(Un(e,"content",i)),marks:Qn(Un(e,"marks",i)),group:Qn(Un(e,"group",i)),inline:Qn(Un(e,"inline",i)),atom:Qn(Un(e,"atom",i)),selectable:Qn(Un(e,"selectable",i)),draggable:Qn(Un(e,"draggable",i)),code:Qn(Un(e,"code",i)),defining:Qn(Un(e,"defining",i)),isolating:Qn(Un(e,"isolating",i)),attrs:Object.fromEntries(r.map((t=>{var e;return[t.name,{default:null===(e=null==t?void 0:t.attribute)||void 0===e?void 0:e.default}]})))}),s=Qn(Un(e,"parseHTML",i));s&&(o.parseDOM=s.map((t=>tr(t,r))));const a=Un(e,"renderHTML",i);a&&(o.toDOM=t=>a({node:t,HTMLAttributes:Gn(t,r)}));const l=Un(e,"renderText",i);return l&&(o.toText=l),[e.name,o]}))),l=Object.fromEntries(o.map((e=>{const r=n.filter((t=>t.type===e.name)),i={name:e.name,options:e.options,storage:e.storage},o=er({...t.reduce(((t,n)=>{const r=Un(n,"extendMarkSchema",i);return{...t,...r?r(e):{}}}),{}),inclusive:Qn(Un(e,"inclusive",i)),excludes:Qn(Un(e,"excludes",i)),group:Qn(Un(e,"group",i)),spanning:Qn(Un(e,"spanning",i)),code:Qn(Un(e,"code",i)),attrs:Object.fromEntries(r.map((t=>{var e;return[t.name,{default:null===(e=null==t?void 0:t.attribute)||void 0===e?void 0:e.default}]})))}),s=Qn(Un(e,"parseHTML",i));s&&(o.parseDOM=s.map((t=>tr(t,r))));const a=Un(e,"renderHTML",i);return a&&(o.toDOM=t=>a({mark:t,HTMLAttributes:Gn(t,r)})),[e.name,o]})));return new i.V_({topNode:s,nodes:a,marks:l})}(this.extensions),this.extensions.forEach((t=>{var e;this.editor.extensionStorage[t.name]=t.storage;const n={name:t.name,options:t.options,storage:t.storage,editor:this.editor,type:nr(t.name,this.schema)};"mark"===t.type&&(null===(e=Qn(Un(t,"keepOnSplit",n)))||void 0===e||e)&&this.splittableMarks.push(t.name);const r=Un(t,"onBeforeCreate",n);r&&this.editor.on("beforeCreate",r);const i=Un(t,"onCreate",n);i&&this.editor.on("create",i);const o=Un(t,"onUpdate",n);o&&this.editor.on("update",o);const s=Un(t,"onSelectionUpdate",n);s&&this.editor.on("selectionUpdate",s);const a=Un(t,"onTransaction",n);a&&this.editor.on("transaction",a);const l=Un(t,"onFocus",n);l&&this.editor.on("focus",l);const c=Un(t,"onBlur",n);c&&this.editor.on("blur",c);const h=Un(t,"onDestroy",n);h&&this.editor.on("destroy",h)}))}static resolve(t){const e=hr.sort(hr.flatten(t)),n=function(t){const e=t.filter(((e,n)=>t.indexOf(e)!==n));return[...new Set(e)]}(e.map((t=>t.name)));return n.length&&console.warn(`[tiptap warn]: Duplicate extension names found: [${n.map((t=>`'${t}'`)).join(", ")}]. This can lead to issues.`),e}static flatten(t){return t.map((t=>{const e=Un(t,"addExtensions",{name:t.name,options:t.options,storage:t.storage});return e?[t,...this.flatten(e())]:t})).flat(10)}static sort(t){return t.sort(((t,e)=>{const n=Un(t,"priority")||100,r=Un(e,"priority")||100;return n>r?-1:n<r?1:0}))}get commands(){return this.extensions.reduce(((t,e)=>{const n=Un(e,"addCommands",{name:e.name,options:e.options,storage:e.storage,editor:this.editor,type:nr(e.name,this.schema)});return n?{...t,...n()}:t}),{})}get plugins(){const{editor:t}=this,e=hr.sort([...this.extensions].reverse()),n=[],i=[],o=e.map((e=>{const o={name:e.name,options:e.options,storage:e.storage,editor:t,type:nr(e.name,this.schema)},s=[],a=Un(e,"addKeyboardShortcuts",o);if(a){const e=(l=Object.fromEntries(Object.entries(a()).map((([e,n])=>[e,()=>n({editor:t})]))),new r.Sy({props:{handleKeyDown:wn(l)}}));s.push(e)}var l;const c=Un(e,"addInputRules",o);rr(e,t.options.enableInputRules)&&c&&n.push(...c());const h=Un(e,"addPasteRules",o);rr(e,t.options.enablePasteRules)&&h&&i.push(...h());const u=Un(e,"addProseMirrorPlugins",o);if(u){const t=u();s.push(...t)}return s})).flat();return[ar({editor:t,rules:n}),...cr({editor:t,rules:i}),...o]}get attributes(){return Jn(this.extensions)}get nodeViews(){const{editor:t}=this,{nodeExtensions:e}=Yn(this.extensions);return Object.fromEntries(e.filter((t=>!!Un(t,"addNodeView"))).map((e=>{const n=this.attributes.filter((t=>t.type===e.name)),r={name:e.name,options:e.options,storage:e.storage,editor:t,type:Xn(e.name,this.schema)},i=Un(e,"addNodeView",r);return i?[e.name,(r,o,s,a)=>{const l=Gn(r,n);return i()({editor:t,node:r,getPos:s,decorations:a,HTMLAttributes:l,extension:e})}]:[]})))}}function ur(t){return"Object"===function(t){return Object.prototype.toString.call(t).slice(8,-1)}(t)&&t.constructor===Object&&Object.getPrototypeOf(t)===Object.prototype}function dr(t,e){const n={...t};return ur(t)&&ur(e)&&Object.keys(e).forEach((r=>{ur(e[r])?r in t?n[r]=dr(t[r],e[r]):Object.assign(n,{[r]:e[r]}):Object.assign(n,{[r]:e[r]})})),n}class pr{constructor(t={}){this.type="extension",this.name="extension",this.parent=null,this.child=null,this.config={name:this.name,defaultOptions:{}},this.config={...this.config,...t},this.name=this.config.name,t.defaultOptions&&console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${this.name}".`),this.options=this.config.defaultOptions,this.config.addOptions&&(this.options=Qn(Un(this,"addOptions",{name:this.name}))),this.storage=Qn(Un(this,"addStorage",{name:this.name,options:this.options}))||{}}static create(t={}){return new pr(t)}configure(t={}){const e=this.extend();return e.options=dr(this.options,t),e.storage=Qn(Un(e,"addStorage",{name:e.name,options:e.options})),e}extend(t={}){const e=new pr(t);return e.parent=this,this.child=e,e.name=t.name?t.name:e.parent.name,t.defaultOptions&&console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${e.name}".`),e.options=Qn(Un(e,"addOptions",{name:e.name})),e.storage=Qn(Un(e,"addStorage",{name:e.name,options:e.options})),e}}function fr(t,e,n){const{from:r,to:i}=e,{blockSeparator:o="\n\n",textSerializers:s={}}=n||{};let a="",l=!0;return t.nodesBetween(r,i,((t,n,c,h)=>{var u;const d=null==s?void 0:s[t.type.name];d?(t.isBlock&&!l&&(a+=o,l=!0),c&&(a+=d({node:t,pos:n,parent:c,index:h,range:e}))):t.isText?(a+=null===(u=null==t?void 0:t.text)||void 0===u?void 0:u.slice(Math.max(r,n)-n,i-n),l=!1):t.isBlock&&!l&&(a+=o,l=!0)})),a}function gr(t){return Object.fromEntries(Object.entries(t.nodes).filter((([,t])=>t.spec.toText)).map((([t,e])=>[t,e.spec.toText])))}const mr=pr.create({name:"clipboardTextSerializer",addProseMirrorPlugins(){return[new r.Sy({key:new r.H$("clipboardTextSerializer"),props:{clipboardTextSerializer:()=>{const{editor:t}=this,{state:e,schema:n}=t,{doc:r,selection:i}=e,{ranges:o}=i;return fr(r,{from:Math.min(...o.map((t=>t.$from.pos))),to:Math.max(...o.map((t=>t.$to.pos)))},{textSerializers:gr(n)})}}})]}});function vr(t,e,n={strict:!0}){const r=Object.keys(e);return!r.length||r.every((r=>n.strict?e[r]===t[r]:ir(e[r])?e[r].test(t[r]):e[r]===t[r]))}function yr(t,e,n={}){return t.find((t=>t.type===e&&vr(t.attrs,n)))}function br(t,e,n={}){return!!yr(t,e,n)}function wr(t,e,n={}){if(!t||!e)return;let r=t.parent.childAfter(t.parentOffset);if(t.parentOffset===r.offset&&0!==r.offset&&(r=t.parent.childBefore(t.parentOffset)),!r.node)return;const i=yr([...r.node.marks],e,n);if(!i)return;let o=r.index,s=t.start()+r.offset,a=o+1,l=s+r.node.nodeSize;for(yr([...r.node.marks],e,n);o>0&&i.isInSet(t.parent.child(o-1).marks);)o-=1,s-=t.parent.child(o).nodeSize;for(;a<t.parent.childCount&&br([...t.parent.child(a).marks],e,n);)l+=t.parent.child(a).nodeSize,a+=1;return{from:s,to:l}}function xr(t,e){if("string"==typeof t){if(!e.marks[t])throw Error(`There is no mark type named '${t}'. Maybe you forgot to add the extension?`);return e.marks[t]}return t}function kr(t=0,e=0,n=0){return Math.min(Math.max(t,e),n)}function Sr(t,e=null){if(!e)return null;const n=r.Y1.atStart(t),i=r.Y1.atEnd(t);if("start"===e||!0===e)return n;if("end"===e)return i;const o=n.from,s=i.to;return"all"===e?r.Bs.create(t,kr(0,o,s),kr(t.content.size,o,s)):r.Bs.create(t,kr(e,o,s),kr(e,o,s))}function _r(){return["iPad Simulator","iPhone Simulator","iPod Simulator","iPad","iPhone","iPod"].includes(navigator.platform)||navigator.userAgent.includes("Mac")&&"ontouchend"in document}function Er(t){const e=`<body>${t}</body>`;return(new window.DOMParser).parseFromString(e,"text/html").body}function Cr(t,e,n){if(n={slice:!0,parseOptions:{},...n},"object"==typeof t&&null!==t)try{return Array.isArray(t)?i.HY.fromArray(t.map((t=>e.nodeFromJSON(t)))):e.nodeFromJSON(t)}catch(r){return console.warn("[tiptap warn]: Invalid content.","Passed value:",t,"Error:",r),Cr("",e,n)}if("string"==typeof t){const r=i.aw.fromSchema(e);return n.slice?r.parseSlice(Er(t),n.parseOptions).content:r.parse(Er(t),n.parseOptions)}return Cr("",e,n)}function Or(){return"undefined"!=typeof navigator&&/Mac/.test(navigator.platform)}function Mr(t,e,n={}){const{from:r,to:i,empty:o}=t.selection,s=e?Xn(e,t.schema):null,a=[];t.doc.nodesBetween(r,i,((t,e)=>{if(t.isText)return;const n=Math.max(r,e),o=Math.min(i,e+t.nodeSize);a.push({node:t,from:n,to:o})}));const l=i-r,c=a.filter((t=>!s||s.name===t.node.type.name)).filter((t=>vr(t.node.attrs,n,{strict:!1})));return o?!!c.length:c.reduce(((t,e)=>t+e.to-e.from),0)>=l}function Ar(t,e){return e.nodes[t]?"node":e.marks[t]?"mark":null}function Tr(t,e){const n="string"==typeof e?[e]:e;return Object.keys(t).reduce(((e,r)=>(n.includes(r)||(e[r]=t[r]),e)),{})}function Nr(t,e,n={}){return Cr(t,e,{slice:!1,parseOptions:n})}function Dr(t,e){const n=xr(e,t.schema),{from:r,to:i,empty:o}=t.selection,s=[];o?(t.storedMarks&&s.push(...t.storedMarks),s.push(...t.selection.$head.marks())):t.doc.nodesBetween(r,i,(t=>{s.push(...t.marks)}));const a=s.find((t=>t.type.name===n.name));return a?{...a.attrs}:{}}function jr(t,e,n){return Object.fromEntries(Object.entries(n).filter((([n])=>{const r=t.find((t=>t.type===e&&t.name===n));return!!r&&r.attribute.keepOnSplit})))}function Rr(t,e){const n=t.storedMarks||t.selection.$to.parentOffset&&t.selection.$from.marks();if(n){const r=n.filter((t=>null==e?void 0:e.includes(t.type.name)));t.tr.ensureMarks(r)}}function Pr(t){return e=>function(t,e){for(let n=t.depth;n>0;n-=1){const r=t.node(n);if(e(r))return{pos:n>0?t.before(n):0,start:t.start(n),depth:n,node:r}}}(e.$from,t)}function zr(t,e){const{nodeExtensions:n}=Yn(e),r=n.find((e=>e.name===t));if(!r)return!1;const i=Qn(Un(r,"group",{name:r.name,options:r.options,storage:r.storage}));return"string"==typeof i&&i.split(" ").includes("list")}const Ir=(t,e)=>{const n=Pr((t=>t.type===e))(t.selection);if(!n)return!0;const r=t.doc.resolve(Math.max(0,n.pos-1)).before(n.depth);if(void 0===r)return!0;const i=t.doc.nodeAt(r);return n.node.type!==(null==i?void 0:i.type)||!(0,o.Mn)(t.doc,n.pos)||(t.join(n.pos),!0)},Br=(t,e)=>{const n=Pr((t=>t.type===e))(t.selection);if(!n)return!0;const r=t.doc.resolve(n.start).after(n.depth);if(void 0===r)return!0;const i=t.doc.nodeAt(r);return n.node.type!==(null==i?void 0:i.type)||!(0,o.Mn)(t.doc,r)||(t.join(r),!0)};function Fr(t,e,n={}){const{empty:r,ranges:i}=t.selection,o=e?xr(e,t.schema):null;if(r)return!!(t.storedMarks||t.selection.$from.marks()).filter((t=>!o||o.name===t.type.name)).find((t=>vr(t.attrs,n,{strict:!1})));let s=0;const a=[];if(i.forEach((({$from:e,$to:n})=>{const r=e.pos,i=n.pos;t.doc.nodesBetween(r,i,((t,e)=>{if(!t.isText&&!t.marks.length)return;const n=Math.max(r,e),o=Math.min(i,e+t.nodeSize);s+=o-n,a.push(...t.marks.map((t=>({mark:t,from:n,to:o}))))}))})),0===s)return!1;const l=a.filter((t=>!o||o.name===t.mark.type.name)).filter((t=>vr(t.mark.attrs,n,{strict:!1}))).reduce(((t,e)=>t+e.to-e.from),0),c=a.filter((t=>!o||t.mark.type!==o&&t.mark.type.excludes(o))).reduce(((t,e)=>t+e.to-e.from),0);return(l>0?l+c:l)>=s}var $r=Object.freeze({__proto__:null,blur:()=>({editor:t,view:e})=>(requestAnimationFrame((()=>{var n;t.isDestroyed||(e.dom.blur(),null===(n=null===window||void 0===window?void 0:window.getSelection())||void 0===n||n.removeAllRanges())})),!0),clearContent:(t=!1)=>({commands:e})=>e.setContent("",t),clearNodes:()=>({state:t,tr:e,dispatch:n})=>{const{selection:r}=e,{ranges:i}=r;return!n||(i.forEach((({$from:n,$to:r})=>{t.doc.nodesBetween(n.pos,r.pos,((t,n)=>{if(t.type.isText)return;const{doc:r,mapping:i}=e,s=r.resolve(i.map(n)),a=r.resolve(i.map(n+t.nodeSize)),l=s.blockRange(a);if(!l)return;const c=(0,o.k9)(l);if(t.type.isTextblock){const{defaultType:t}=s.parent.contentMatchAt(s.index());e.setNodeMarkup(l.start,t)}(c||0===c)&&e.lift(l,c)}))})),!0)},command:t=>e=>t(e),createParagraphNear:()=>({state:t,dispatch:e})=>Dn(t,e),deleteNode:t=>({tr:e,state:n,dispatch:r})=>{const i=Xn(t,n.schema),o=e.selection.$anchor;for(let t=o.depth;t>0;t-=1)if(o.node(t).type===i){if(r){const n=o.before(t),r=o.after(t);e.delete(n,r).scrollIntoView()}return!0}return!1},deleteRange:t=>({tr:e,dispatch:n})=>{const{from:r,to:i}=t;return n&&e.delete(r,i),!0},deleteSelection:()=>({state:t,dispatch:e})=>xn(t,e),enter:()=>({commands:t})=>t.keyboardShortcut("Enter"),exitCode:()=>({state:t,dispatch:e})=>Nn(t,e),extendMarkRange:(t,e={})=>({tr:n,state:i,dispatch:o})=>{const s=xr(t,i.schema),{doc:a,selection:l}=n,{$from:c,from:h,to:u}=l;if(o){const t=wr(c,s,e);if(t&&t.from<=h&&t.to>=u){const e=r.Bs.create(a,t.from,t.to);n.setSelection(e)}}return!0},first:t=>e=>{const n="function"==typeof t?t(e):t;for(let t=0;t<n.length;t+=1)if(n[t](e))return!0;return!1},focus:(t=null,e={})=>({editor:n,view:i,tr:o,dispatch:s})=>{e={scrollIntoView:!0,...e};const a=()=>{_r()&&i.dom.focus(),requestAnimationFrame((()=>{n.isDestroyed||(i.focus(),(null==e?void 0:e.scrollIntoView)&&n.commands.scrollIntoView())}))};if(i.hasFocus()&&null===t||!1===t)return!0;if(s&&null===t&&!(function(t){return t&&"object"==typeof t&&!Array.isArray(t)&&!function(t){var e;return"class"===(null===(e=t.constructor)||void 0===e?void 0:e.toString().substring(0,5))}(t)}(l=n.state.selection)&&l instanceof r.Bs))return a(),!0;var l;const c=Sr(o.doc,t)||n.state.selection,h=n.state.selection.eq(c);return s&&(h||o.setSelection(c),h&&o.storedMarks&&o.setStoredMarks(o.storedMarks),a()),!0},forEach:(t,e)=>n=>t.every(((t,r)=>e(t,{...n,index:r}))),insertContent:(t,e)=>({tr:n,commands:r})=>r.insertContentAt({from:n.selection.from,to:n.selection.to},t,e),insertContentAt:(t,e,n)=>({tr:i,dispatch:s,editor:a})=>{if(s){n={parseOptions:{},updateSelection:!0,...n};const s=Cr(e,a.schema,{parseOptions:{preserveWhitespace:"full",...n.parseOptions}});if("<>"===s.toString())return!0;let{from:l,to:c}="number"==typeof t?{from:t,to:t}:t,h=!0,u=!0;if((s.toString().startsWith("<")?s:[s]).forEach((t=>{t.check(),h=!!h&&t.isText&&0===t.marks.length,u=!!u&&t.isBlock})),l===c&&u){const{parent:t}=i.doc.resolve(l);t.isTextblock&&!t.type.spec.code&&!t.childCount&&(l-=1,c+=1)}h?i.insertText(e,l,c):i.replaceWith(l,c,s),n.updateSelection&&function(t,e,n){const i=t.steps.length-1;if(i<e)return;const s=t.steps[i];if(!(s instanceof o.Pu||s instanceof o.FC))return;const a=t.mapping.maps[i];let l=0;a.forEach(((t,e,n,r)=>{0===l&&(l=r)})),t.setSelection(r.Y1.near(t.doc.resolve(l),-1))}(i,i.steps.length-1)}return!0},joinBackward:()=>({state:t,dispatch:e})=>kn(t,e),joinForward:()=>({state:t,dispatch:e})=>Cn(t,e),keyboardShortcut:t=>({editor:e,view:n,tr:r,dispatch:i})=>{const o=function(t){const e=t.split(/-(?!$)/);let n,r,i,o,s=e[e.length-1];"Space"===s&&(s=" ");for(let t=0;t<e.length-1;t+=1){const s=e[t];if(/^(cmd|meta|m)$/i.test(s))o=!0;else if(/^a(lt)?$/i.test(s))n=!0;else if(/^(c|ctrl|control)$/i.test(s))r=!0;else if(/^s(hift)?$/i.test(s))i=!0;else{if(!/^mod$/i.test(s))throw new Error(`Unrecognized modifier name: ${s}`);_r()||Or()?o=!0:r=!0}}return n&&(s=`Alt-${s}`),r&&(s=`Ctrl-${s}`),o&&(s=`Meta-${s}`),i&&(s=`Shift-${s}`),s}(t).split(/-(?!$)/),s=o.find((t=>!["Alt","Ctrl","Meta","Shift"].includes(t))),a=new KeyboardEvent("keydown",{key:"Space"===s?" ":s,altKey:o.includes("Alt"),ctrlKey:o.includes("Ctrl"),metaKey:o.includes("Meta"),shiftKey:o.includes("Shift"),bubbles:!0,cancelable:!0}),l=e.captureTransaction((()=>{n.someProp("handleKeyDown",(t=>t(n,a)))}));return null==l||l.steps.forEach((t=>{const e=t.map(r.mapping);e&&i&&r.maybeStep(e)})),!0},lift:(t,e={})=>({state:n,dispatch:r})=>!!Mr(n,Xn(t,n.schema),e)&&((t,e)=>{let{$from:n,$to:r}=t.selection,i=n.blockRange(r),s=i&&(0,o.k9)(i);return null!=s&&(e&&e(t.tr.lift(i,s).scrollIntoView()),!0)})(n,r),liftEmptyBlock:()=>({state:t,dispatch:e})=>jn(t,e),liftListItem:t=>({state:e,dispatch:n})=>{return(r=Xn(t,e.schema),function(t,e){let{$from:n,$to:s}=t.selection,a=n.blockRange(s,(t=>t.childCount>0&&t.firstChild.type==r));return!!a&&(!e||(n.node(a.depth-1).type==r?function(t,e,n,r){let s=t.tr,a=r.end,l=r.$to.end(r.depth);return a<l&&(s.step(new o.FC(a-1,l,a,l,new i.p2(i.HY.from(n.create(null,r.parent.copy())),1,0),1,!0)),r=new i.Ts(s.doc.resolve(r.$from.pos),s.doc.resolve(l),r.depth)),e(s.lift(r,(0,o.k9)(r)).scrollIntoView()),!0}(t,e,r,a):function(t,e,n){let r=t.tr,s=n.parent;for(let t=n.end,e=n.endIndex-1,i=n.startIndex;e>i;e--)t-=s.child(e).nodeSize,r.delete(t-1,t+1);let a=r.doc.resolve(n.start),l=a.nodeAfter;if(r.mapping.map(n.end)!=n.start+a.nodeAfter.nodeSize)return!1;let c=0==n.startIndex,h=n.endIndex==s.childCount,u=a.node(-1),d=a.index(-1);if(!u.canReplace(d+(c?0:1),d+1,l.content.append(h?i.HY.empty:i.HY.from(s))))return!1;let p=a.pos,f=p+l.nodeSize;return r.step(new o.FC(p-(c?1:0),f+(h?1:0),p+1,f-1,new i.p2((c?i.HY.empty:i.HY.from(s.copy(i.HY.empty))).append(h?i.HY.empty:i.HY.from(s.copy(i.HY.empty))),c?0:1,h?0:1),c?0:1)),e(r.scrollIntoView()),!0}(t,e,a)))})(e,n);var r},newlineInCode:()=>({state:t,dispatch:e})=>An(t,e),resetAttributes:(t,e)=>({tr:n,state:r,dispatch:i})=>{let o=null,s=null;const a=Ar("string"==typeof t?t:t.name,r.schema);return!!a&&("node"===a&&(o=Xn(t,r.schema)),"mark"===a&&(s=xr(t,r.schema)),i&&n.selection.ranges.forEach((t=>{r.doc.nodesBetween(t.$from.pos,t.$to.pos,((t,r)=>{o&&o===t.type&&n.setNodeMarkup(r,void 0,Tr(t.attrs,e)),s&&t.marks.length&&t.marks.forEach((i=>{s===i.type&&n.addMark(r,r+t.nodeSize,s.create(Tr(i.attrs,e)))}))}))})),!0)},scrollIntoView:()=>({tr:t,dispatch:e})=>(e&&t.scrollIntoView(),!0),selectAll:()=>({tr:t,commands:e})=>e.setTextSelection({from:0,to:t.doc.content.size}),selectNodeBackward:()=>({state:t,dispatch:e})=>_n(t,e),selectNodeForward:()=>({state:t,dispatch:e})=>On(t,e),selectParentNode:()=>({state:t,dispatch:e})=>((t,e)=>{let n,{$from:i,to:o}=t.selection,s=i.sharedDepth(o);return 0!=s&&(n=i.before(s),e&&e(t.tr.setSelection(r.qv.create(t.doc,n))),!0)})(t,e),selectTextblockEnd:()=>({state:t,dispatch:e})=>In(t,e),selectTextblockStart:()=>({state:t,dispatch:e})=>zn(t,e),setContent:(t,e=!1,n={})=>({tr:r,editor:i,dispatch:o})=>{const{doc:s}=r,a=Nr(t,i.schema,n);return o&&r.replaceWith(0,s.content.size,a).setMeta("preventUpdate",!e),!0},setMark:(t,e={})=>({tr:n,state:r,dispatch:i})=>{const{selection:o}=n,{empty:s,ranges:a}=o,l=xr(t,r.schema);if(i)if(s){const t=Dr(r,l);n.addStoredMark(l.create({...t,...e}))}else a.forEach((t=>{const i=t.$from.pos,o=t.$to.pos;r.doc.nodesBetween(i,o,((t,r)=>{const s=Math.max(r,i),a=Math.min(r+t.nodeSize,o);t.marks.find((t=>t.type===l))?t.marks.forEach((t=>{l===t.type&&n.addMark(s,a,l.create({...t.attrs,...e}))})):n.addMark(s,a,l.create(e))}))}));return!0},setMeta:(t,e)=>({tr:n})=>(n.setMeta(t,e),!0),setNode:(t,e={})=>({state:n,dispatch:r,chain:i})=>{const o=Xn(t,n.schema);return o.isTextblock?i().command((({commands:t})=>!!Bn(o,e)(n)||t.clearNodes())).command((({state:t})=>Bn(o,e)(t,r))).run():(console.warn('[tiptap warn]: Currently "setNode()" only supports text block nodes.'),!1)},setNodeSelection:t=>({tr:e,dispatch:n})=>{if(n){const{doc:n}=e,i=r.Y1.atStart(n).from,o=r.Y1.atEnd(n).to,s=kr(t,i,o),a=r.qv.create(n,s);e.setSelection(a)}return!0},setTextSelection:t=>({tr:e,dispatch:n})=>{if(n){const{doc:n}=e,{from:i,to:o}="number"==typeof t?{from:t,to:t}:t,s=r.Bs.atStart(n).from,a=r.Bs.atEnd(n).to,l=kr(i,s,a),c=kr(o,s,a),h=r.Bs.create(n,l,c);e.setSelection(h)}return!0},sinkListItem:t=>({state:e,dispatch:n})=>{const r=Xn(t,e.schema);return(s=r,function(t,e){let{$from:n,$to:r}=t.selection,a=n.blockRange(r,(t=>t.childCount>0&&t.firstChild.type==s));if(!a)return!1;let l=a.startIndex;if(0==l)return!1;let c=a.parent,h=c.child(l-1);if(h.type!=s)return!1;if(e){let n=h.lastChild&&h.lastChild.type==c.type,r=i.HY.from(n?s.create():null),l=new i.p2(i.HY.from(s.create(null,i.HY.from(c.type.create(null,r)))),n?3:1,0),u=a.start,d=a.end;e(t.tr.step(new o.FC(u-(n?3:1),d,u,d,l,1,!0)).scrollIntoView())}return!0})(e,n);var s},splitBlock:({keepMarks:t=!0}={})=>({tr:e,state:n,dispatch:i,editor:s})=>{const{selection:a,doc:l}=e,{$from:c,$to:h}=a,u=jr(s.extensionManager.attributes,c.node().type.name,c.node().attrs);if(a instanceof r.qv&&a.node.isBlock)return!(!c.parentOffset||!(0,o.Ax)(l,c.pos)||(i&&(t&&Rr(n,s.extensionManager.splittableMarks),e.split(c.pos).scrollIntoView()),0));if(!c.parent.isBlock)return!1;if(i){const i=h.parentOffset===h.parent.content.size;a instanceof r.Bs&&e.deleteSelection();const l=0===c.depth?void 0:function(t){for(let e=0;e<t.edgeCount;e+=1){const{type:n}=t.edge(e);if(n.isTextblock&&!n.hasRequiredAttrs())return n}return null}(c.node(-1).contentMatchAt(c.indexAfter(-1)));let d=i&&l?[{type:l,attrs:u}]:void 0,p=(0,o.Ax)(e.doc,e.mapping.map(c.pos),1,d);if(d||p||!(0,o.Ax)(e.doc,e.mapping.map(c.pos),1,l?[{type:l}]:void 0)||(p=!0,d=l?[{type:l,attrs:u}]:void 0),p&&(e.split(e.mapping.map(c.pos),1,d),l&&!i&&!c.parentOffset&&c.parent.type!==l)){const t=e.mapping.map(c.before()),n=e.doc.resolve(t);c.node(-1).canReplaceWith(n.index(),n.index()+1,l)&&e.setNodeMarkup(e.mapping.map(c.before()),l)}t&&Rr(n,s.extensionManager.splittableMarks),e.scrollIntoView()}return!0},splitListItem:t=>({tr:e,state:n,dispatch:s,editor:a})=>{var l;const c=Xn(t,n.schema),{$from:h,$to:u}=n.selection,d=n.selection.node;if(d&&d.isBlock||h.depth<2||!h.sameParent(u))return!1;const p=h.node(-1);if(p.type!==c)return!1;const f=a.extensionManager.attributes;if(0===h.parent.content.size&&h.node(-1).childCount===h.indexAfter(-1)){if(2===h.depth||h.node(-3).type!==c||h.index(-2)!==h.node(-2).childCount-1)return!1;if(s){let t=i.HY.empty;const n=h.index(-1)?1:h.index(-2)?2:3;for(let e=h.depth-n;e>=h.depth-3;e-=1)t=i.HY.from(h.node(e).copy(t));const o=h.indexAfter(-1)<h.node(-2).childCount?1:h.indexAfter(-2)<h.node(-3).childCount?2:3,s=jr(f,h.node().type.name,h.node().attrs),a=(null===(l=c.contentMatch.defaultType)||void 0===l?void 0:l.createAndFill(s))||void 0;t=t.append(i.HY.from(c.createAndFill(null,a)||void 0));const u=h.before(h.depth-(n-1));e.replace(u,h.after(-o),new i.p2(t,4-n,0));let d=-1;e.doc.nodesBetween(u,e.doc.content.size,((t,e)=>{if(d>-1)return!1;t.isTextblock&&0===t.content.size&&(d=e+1)})),d>-1&&e.setSelection(r.Bs.near(e.doc.resolve(d))),e.scrollIntoView()}return!0}const g=u.pos===h.end()?p.contentMatchAt(0).defaultType:null,m=jr(f,p.type.name,p.attrs),v=jr(f,h.node().type.name,h.node().attrs);e.delete(h.pos,u.pos);const y=g?[{type:c,attrs:m},{type:g,attrs:v}]:[{type:c,attrs:m}];return!!(0,o.Ax)(e.doc,h.pos,2)&&(s&&e.split(h.pos,2,y).scrollIntoView(),!0)},toggleList:(t,e)=>({editor:n,tr:r,state:i,dispatch:o,chain:s,commands:a,can:l})=>{const{extensions:c}=n.extensionManager,h=Xn(t,i.schema),u=Xn(e,i.schema),{selection:d}=i,{$from:p,$to:f}=d,g=p.blockRange(f);if(!g)return!1;const m=Pr((t=>zr(t.type.name,c)))(d);if(g.depth>=1&&m&&g.depth-m.depth<=1){if(m.node.type===h)return a.liftListItem(u);if(zr(m.node.type.name,c)&&h.validContent(m.node.content)&&o)return s().command((()=>(r.setNodeMarkup(m.pos,h),!0))).command((()=>Ir(r,h))).command((()=>Br(r,h))).run()}return s().command((()=>!!l().wrapInList(h)||a.clearNodes())).wrapInList(h).command((()=>Ir(r,h))).command((()=>Br(r,h))).run()},toggleMark:(t,e={},n={})=>({state:r,commands:i})=>{const{extendEmptyMarkRange:o=!1}=n,s=xr(t,r.schema);return Fr(r,s,e)?i.unsetMark(s,{extendEmptyMarkRange:o}):i.setMark(s,e)},toggleNode:(t,e,n={})=>({state:r,commands:i})=>{const o=Xn(t,r.schema),s=Xn(e,r.schema);return Mr(r,o,n)?i.setNode(s):i.setNode(o,n)},toggleWrap:(t,e={})=>({state:n,commands:r})=>{const i=Xn(t,n.schema);return Mr(n,i,e)?r.lift(i):r.wrapIn(i,e)},undoInputRule:()=>({state:t,dispatch:e})=>{const n=t.plugins;for(let r=0;r<n.length;r+=1){const i=n[r];let o;if(i.spec.isInputRules&&(o=i.getState(t))){if(e){const e=t.tr,n=o.transform;for(let t=n.steps.length-1;t>=0;t-=1)e.step(n.steps[t].invert(n.docs[t]));if(o.text){const n=e.doc.resolve(o.from).marks();e.replaceWith(o.from,o.to,t.schema.text(o.text,n))}else e.delete(o.from,o.to)}return!0}}return!1},unsetAllMarks:()=>({tr:t,dispatch:e})=>{const{selection:n}=t,{empty:r,ranges:i}=n;return r||e&&i.forEach((e=>{t.removeMark(e.$from.pos,e.$to.pos)})),!0},unsetMark:(t,e={})=>({tr:n,state:r,dispatch:i})=>{var o;const{extendEmptyMarkRange:s=!1}=e,{selection:a}=n,l=xr(t,r.schema),{$from:c,empty:h,ranges:u}=a;if(!i)return!0;if(h&&s){let{from:t,to:e}=a;const r=null===(o=c.marks().find((t=>t.type===l)))||void 0===o?void 0:o.attrs,i=wr(c,l,r);i&&(t=i.from,e=i.to),n.removeMark(t,e,l)}else u.forEach((t=>{n.removeMark(t.$from.pos,t.$to.pos,l)}));return n.removeStoredMark(l),!0},updateAttributes:(t,e={})=>({tr:n,state:r,dispatch:i})=>{let o=null,s=null;const a=Ar("string"==typeof t?t:t.name,r.schema);return!!a&&("node"===a&&(o=Xn(t,r.schema)),"mark"===a&&(s=xr(t,r.schema)),i&&n.selection.ranges.forEach((t=>{const i=t.$from.pos,a=t.$to.pos;r.doc.nodesBetween(i,a,((t,r)=>{o&&o===t.type&&n.setNodeMarkup(r,void 0,{...t.attrs,...e}),s&&t.marks.length&&t.marks.forEach((o=>{if(s===o.type){const l=Math.max(r,i),c=Math.min(r+t.nodeSize,a);n.addMark(l,c,s.create({...o.attrs,...e}))}}))}))})),!0)},wrapIn:(t,e={})=>({state:n,dispatch:r})=>function(t,e=null){return function(n,r){let{$from:i,$to:s}=n.selection,a=i.blockRange(s),l=a&&(0,o.nd)(a,t,e);return!!l&&(r&&r(n.tr.wrap(a,l).scrollIntoView()),!0)}}(Xn(t,n.schema),e)(n,r),wrapInList:(t,e={})=>({state:n,dispatch:r})=>function(t,e=null){return function(n,r){let{$from:s,$to:a}=n.selection,l=s.blockRange(a),c=!1,h=l;if(!l)return!1;if(l.depth>=2&&s.node(l.depth-1).type.compatibleContent(t)&&0==l.startIndex){if(0==s.index(l.depth-1))return!1;let t=n.doc.resolve(l.start-2);h=new i.Ts(t,t,l.depth),l.endIndex<l.parent.childCount&&(l=new i.Ts(s,n.doc.resolve(a.end(l.depth)),l.depth)),c=!0}let u=(0,o.nd)(h,t,e,l);return!!u&&(r&&r(function(t,e,n,r,s){let a=i.HY.empty;for(let t=n.length-1;t>=0;t--)a=i.HY.from(n[t].type.create(n[t].attrs,a));t.step(new o.FC(e.start-(r?2:0),e.end,e.start,e.end,new i.p2(a,0,0),n.length,!0));let l=0;for(let t=0;t<n.length;t++)n[t].type==s&&(l=t+1);let c=n.length-l,h=e.start+n.length-(r?2:0),u=e.parent;for(let n=e.startIndex,r=e.endIndex,i=!0;n<r;n++,i=!1)!i&&(0,o.Ax)(t.doc,h,c)&&(t.split(h,c),h+=2*c),h+=u.child(n).nodeSize;return t}(n.tr,l,u,c,t).scrollIntoView()),!0)}}(Xn(t,n.schema),e)(n,r)});const Lr=pr.create({name:"commands",addCommands:()=>({...$r})}),Hr=pr.create({name:"editable",addProseMirrorPlugins(){return[new r.Sy({key:new r.H$("editable"),props:{editable:()=>this.editor.options.editable}})]}}),Vr=pr.create({name:"focusEvents",addProseMirrorPlugins(){const{editor:t}=this;return[new r.Sy({key:new r.H$("focusEvents"),props:{handleDOMEvents:{focus:(e,n)=>{t.isFocused=!0;const r=t.state.tr.setMeta("focus",{event:n}).setMeta("addToHistory",!1);return e.dispatch(r),!1},blur:(e,n)=>{t.isFocused=!1;const r=t.state.tr.setMeta("blur",{event:n}).setMeta("addToHistory",!1);return e.dispatch(r),!1}}}})]}}),qr=pr.create({name:"keymap",addKeyboardShortcuts(){const t=()=>this.editor.commands.first((({commands:t})=>[()=>t.undoInputRule(),()=>t.command((({tr:e})=>{const{selection:n,doc:i}=e,{empty:o,$anchor:s}=n,{pos:a,parent:l}=s,c=r.Y1.atStart(i).from===a;return!(!(o&&c&&l.type.isTextblock)||l.textContent.length)&&t.clearNodes()})),()=>t.deleteSelection(),()=>t.joinBackward(),()=>t.selectNodeBackward()])),e=()=>this.editor.commands.first((({commands:t})=>[()=>t.deleteSelection(),()=>t.joinForward(),()=>t.selectNodeForward()])),n={Enter:()=>this.editor.commands.first((({commands:t})=>[()=>t.newlineInCode(),()=>t.createParagraphNear(),()=>t.liftEmptyBlock(),()=>t.splitBlock()])),"Mod-Enter":()=>this.editor.commands.exitCode(),Backspace:t,"Mod-Backspace":t,"Shift-Backspace":t,Delete:e,"Mod-Delete":e,"Mod-a":()=>this.editor.commands.selectAll()},i={...n},o={...n,"Ctrl-h":t,"Alt-Backspace":t,"Ctrl-d":e,"Ctrl-Alt-Backspace":e,"Alt-Delete":e,"Alt-d":e,"Ctrl-a":()=>this.editor.commands.selectTextblockStart(),"Ctrl-e":()=>this.editor.commands.selectTextblockEnd()};return _r()||Or()?o:i},addProseMirrorPlugins(){return[new r.Sy({key:new r.H$("clearDocument"),appendTransaction:(t,e,n)=>{if(!t.some((t=>t.docChanged))||e.doc.eq(n.doc))return;const{empty:i,from:o,to:s}=e.selection,a=r.Y1.atStart(e.doc).from,l=r.Y1.atEnd(e.doc).to,c=o===a&&s===l,h=0===n.doc.textBetween(0,n.doc.content.size," "," ").length;if(i||!c||!h)return;const u=n.tr,d=qn({state:n,transaction:u}),{commands:p}=new Wn({editor:this.editor,state:d});return p.clearNodes(),u.steps.length?u:void 0}})]}}),Wr=pr.create({name:"tabindex",addProseMirrorPlugins(){return[new r.Sy({key:new r.H$("tabindex"),props:{attributes:this.editor.isEditable?{tabindex:"0"}:{}}})]}});var Ur=Object.freeze({__proto__:null,ClipboardTextSerializer:mr,Commands:Lr,Editable:Hr,FocusEvents:Vr,Keymap:qr,Tabindex:Wr});class Yr extends class{constructor(){this.callbacks={}}on(t,e){return this.callbacks[t]||(this.callbacks[t]=[]),this.callbacks[t].push(e),this}emit(t,...e){const n=this.callbacks[t];return n&&n.forEach((t=>t.apply(this,e))),this}off(t,e){const n=this.callbacks[t];return n&&(e?this.callbacks[t]=n.filter((t=>t!==e)):delete this.callbacks[t]),this}removeAllListeners(){this.callbacks={}}}{constructor(t={}){super(),this.isFocused=!1,this.extensionStorage={},this.options={element:document.createElement("div"),content:"",injectCSS:!0,injectNonce:void 0,extensions:[],autofocus:!1,editable:!0,editorProps:{},parseOptions:{},enableInputRules:!0,enablePasteRules:!0,enableCoreExtensions:!0,onBeforeCreate:()=>null,onCreate:()=>null,onUpdate:()=>null,onSelectionUpdate:()=>null,onTransaction:()=>null,onFocus:()=>null,onBlur:()=>null,onDestroy:()=>null},this.isCapturingTransaction=!1,this.capturedTransaction=null,this.setOptions(t),this.createExtensionManager(),this.createCommandManager(),this.createSchema(),this.on("beforeCreate",this.options.onBeforeCreate),this.emit("beforeCreate",{editor:this}),this.createView(),this.injectCSS(),this.on("create",this.options.onCreate),this.on("update",this.options.onUpdate),this.on("selectionUpdate",this.options.onSelectionUpdate),this.on("transaction",this.options.onTransaction),this.on("focus",this.options.onFocus),this.on("blur",this.options.onBlur),this.on("destroy",this.options.onDestroy),window.setTimeout((()=>{this.isDestroyed||(this.commands.focus(this.options.autofocus),this.emit("create",{editor:this}))}),0)}get storage(){return this.extensionStorage}get commands(){return this.commandManager.commands}chain(){return this.commandManager.chain()}can(){return this.commandManager.can()}injectCSS(){this.options.injectCSS&&document&&(this.css=function(t,e){const n=document.querySelector("style[data-tiptap-style]");if(null!==n)return n;const r=document.createElement("style");return e&&r.setAttribute("nonce",e),r.setAttribute("data-tiptap-style",""),r.innerHTML='.ProseMirror {\n  position: relative;\n}\n\n.ProseMirror {\n  word-wrap: break-word;\n  white-space: pre-wrap;\n  white-space: break-spaces;\n  -webkit-font-variant-ligatures: none;\n  font-variant-ligatures: none;\n  font-feature-settings: "liga" 0; /* the above doesn\'t seem to work in Edge */\n}\n\n.ProseMirror [contenteditable="false"] {\n  white-space: normal;\n}\n\n.ProseMirror [contenteditable="false"] [contenteditable="true"] {\n  white-space: pre-wrap;\n}\n\n.ProseMirror pre {\n  white-space: pre-wrap;\n}\n\nimg.ProseMirror-separator {\n  display: inline !important;\n  border: none !important;\n  margin: 0 !important;\n  width: 1px !important;\n  height: 1px !important;\n}\n\n.ProseMirror-gapcursor {\n  display: none;\n  pointer-events: none;\n  position: absolute;\n  margin: 0;\n}\n\n.ProseMirror-gapcursor:after {\n  content: "";\n  display: block;\n  position: absolute;\n  top: -2px;\n  width: 20px;\n  border-top: 1px solid black;\n  animation: ProseMirror-cursor-blink 1.1s steps(2, start) infinite;\n}\n\n@keyframes ProseMirror-cursor-blink {\n  to {\n    visibility: hidden;\n  }\n}\n\n.ProseMirror-hideselection *::selection {\n  background: transparent;\n}\n\n.ProseMirror-hideselection *::-moz-selection {\n  background: transparent;\n}\n\n.ProseMirror-hideselection * {\n  caret-color: transparent;\n}\n\n.ProseMirror-focused .ProseMirror-gapcursor {\n  display: block;\n}\n\n.tippy-box[data-animation=fade][data-state=hidden] {\n  opacity: 0\n}',document.getElementsByTagName("head")[0].appendChild(r),r}(0,this.options.injectNonce))}setOptions(t={}){this.options={...this.options,...t},this.view&&this.state&&!this.isDestroyed&&(this.options.editorProps&&this.view.setProps(this.options.editorProps),this.view.updateState(this.state))}setEditable(t){this.setOptions({editable:t})}get isEditable(){return this.options.editable&&this.view&&this.view.editable}get state(){return this.view.state}registerPlugin(t,e){const n=Zn(e)?e(t,[...this.state.plugins]):[...this.state.plugins,t],r=this.state.reconfigure({plugins:n});this.view.updateState(r)}unregisterPlugin(t){if(this.isDestroyed)return;const e="string"==typeof t?`${t}$`:t.key,n=this.state.reconfigure({plugins:this.state.plugins.filter((t=>!t.key.startsWith(e)))});this.view.updateState(n)}createExtensionManager(){const t=[...this.options.enableCoreExtensions?Object.values(Ur):[],...this.options.extensions].filter((t=>["extension","node","mark"].includes(null==t?void 0:t.type)));this.extensionManager=new hr(t,this)}createCommandManager(){this.commandManager=new Wn({editor:this})}createSchema(){this.schema=this.extensionManager.schema}createView(){const t=Nr(this.options.content,this.schema,this.options.parseOptions),e=Sr(t,this.options.autofocus);this.view=new tn(this.options.element,{...this.options.editorProps,dispatchTransaction:this.dispatchTransaction.bind(this),state:r.yy.create({doc:t,selection:e||void 0})});const n=this.state.reconfigure({plugins:this.extensionManager.plugins});this.view.updateState(n),this.createNodeViews(),this.view.dom.editor=this}createNodeViews(){this.view.setProps({nodeViews:this.extensionManager.nodeViews})}captureTransaction(t){this.isCapturingTransaction=!0,t(),this.isCapturingTransaction=!1;const e=this.capturedTransaction;return this.capturedTransaction=null,e}dispatchTransaction(t){if(this.isCapturingTransaction)return this.capturedTransaction?void t.steps.forEach((t=>{var e;return null===(e=this.capturedTransaction)||void 0===e?void 0:e.step(t)})):void(this.capturedTransaction=t);const e=this.state.apply(t),n=!this.state.selection.eq(e.selection);this.view.updateState(e),this.emit("transaction",{editor:this,transaction:t}),n&&this.emit("selectionUpdate",{editor:this,transaction:t});const r=t.getMeta("focus"),i=t.getMeta("blur");r&&this.emit("focus",{editor:this,event:r.event,transaction:t}),i&&this.emit("blur",{editor:this,event:i.event,transaction:t}),t.docChanged&&!t.getMeta("preventUpdate")&&this.emit("update",{editor:this,transaction:t})}getAttributes(t){return function(t,e){const n=Ar("string"==typeof e?e:e.name,t.schema);return"node"===n?function(t,e){const n=Xn(e,t.schema),{from:r,to:i}=t.selection,o=[];t.doc.nodesBetween(r,i,(t=>{o.push(t)}));const s=o.reverse().find((t=>t.type.name===n.name));return s?{...s.attrs}:{}}(t,e):"mark"===n?Dr(t,e):{}}(this.state,t)}isActive(t,e){const n="string"==typeof t?t:null,r="string"==typeof t?e:t;return function(t,e,n={}){if(!e)return Mr(t,null,n)||Fr(t,null,n);const r=Ar(e,t.schema);return"node"===r?Mr(t,e,n):"mark"===r&&Fr(t,e,n)}(this.state,n,r)}getJSON(){return this.state.doc.toJSON()}getHTML(){return function(t,e){const n=i.PW.fromSchema(e).serializeFragment(t),r=document.implementation.createHTMLDocument().createElement("div");return r.appendChild(n),r.innerHTML}(this.state.doc.content,this.schema)}getText(t){const{blockSeparator:e="\n\n",textSerializers:n={}}=t||{};return function(t,e){return fr(t,{from:0,to:t.content.size},e)}(this.state.doc,{blockSeparator:e,textSerializers:{...n,...gr(this.schema)}})}get isEmpty(){return function(t){var e;const n=null===(e=t.type.createAndFill())||void 0===e?void 0:e.toJSON(),r=t.toJSON();return JSON.stringify(n)===JSON.stringify(r)}(this.state.doc)}getCharacterCount(){return console.warn('[tiptap warn]: "editor.getCharacterCount()" is deprecated. Please use "editor.storage.characterCount.characters()" instead.'),this.state.doc.content.size-2}destroy(){this.emit("destroy"),this.view&&this.view.destroy(),this.removeAllListeners()}get isDestroyed(){var t;return!(null===(t=this.view)||void 0===t?void 0:t.docView)}}function Jr(t,e,n){const r=[];return t===e?n.resolve(t).marks().forEach((e=>{const i=wr(n.resolve(t-1),e.type);i&&r.push({mark:e,...i})})):n.nodesBetween(t,e,((t,e)=>{r.push(...t.marks.map((n=>({from:e,to:e+t.nodeSize,mark:n}))))})),r}function Xr(t,e,n){const r=t.state.doc.content.size,i=kr(e,0,r),o=kr(n,0,r),s=t.coordsAtPos(i),a=t.coordsAtPos(o,-1),l=Math.min(s.top,a.top),c=Math.max(s.bottom,a.bottom),h=Math.min(s.left,a.left),u=Math.max(s.right,a.right),d={top:l,bottom:c,left:h,right:u,width:u-h,height:c-l,x:h,y:l};return{...d,toJSON:()=>d}}function Kr(t){return new or({find:t.find,handler:({state:e,range:n,match:r})=>{const i=Qn(t.getAttributes,void 0,r);if(!1===i||null===i)return null;const{tr:o}=e,s=r[r.length-1],a=r[0];let l=n.to;if(s){const r=a.search(/\S/),c=n.from+a.indexOf(s),h=c+s.length;if(Jr(n.from,n.to,e.doc).filter((e=>e.mark.type.excluded.find((n=>n===t.type&&n!==e.mark.type)))).filter((t=>t.to>c)).length)return null;h<n.to&&o.delete(h,n.to),c>n.from&&o.delete(n.from+r,c),l=n.from+r+s.length,o.addMark(n.from+r,l,t.type.create(i||{})),o.removeStoredMark(t.type)}}})}class Gr{constructor(t={}){this.type="mark",this.name="mark",this.parent=null,this.child=null,this.config={name:this.name,defaultOptions:{}},this.config={...this.config,...t},this.name=this.config.name,t.defaultOptions&&console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${this.name}".`),this.options=this.config.defaultOptions,this.config.addOptions&&(this.options=Qn(Un(this,"addOptions",{name:this.name}))),this.storage=Qn(Un(this,"addStorage",{name:this.name,options:this.options}))||{}}static create(t={}){return new Gr(t)}configure(t={}){const e=this.extend();return e.options=dr(this.options,t),e.storage=Qn(Un(e,"addStorage",{name:e.name,options:e.options})),e}extend(t={}){const e=new Gr(t);return e.parent=this,this.child=e,e.name=t.name?t.name:e.parent.name,t.defaultOptions&&console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${e.name}".`),e.options=Qn(Un(e,"addOptions",{name:e.name})),e.storage=Qn(Un(e,"addStorage",{name:e.name,options:e.options})),e}}class Zr{constructor(t={}){this.type="node",this.name="node",this.parent=null,this.child=null,this.config={name:this.name,defaultOptions:{}},this.config={...this.config,...t},this.name=this.config.name,t.defaultOptions&&console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${this.name}".`),this.options=this.config.defaultOptions,this.config.addOptions&&(this.options=Qn(Un(this,"addOptions",{name:this.name}))),this.storage=Qn(Un(this,"addStorage",{name:this.name,options:this.options}))||{}}static create(t={}){return new Zr(t)}configure(t={}){const e=this.extend();return e.options=dr(this.options,t),e.storage=Qn(Un(e,"addStorage",{name:e.name,options:e.options})),e}extend(t={}){const e=new Zr(t);return e.parent=this,this.child=e,e.name=t.name?t.name:e.parent.name,t.defaultOptions&&console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${e.name}".`),e.options=Qn(Un(e,"addOptions",{name:e.name})),e.storage=Qn(Un(e,"addStorage",{name:e.name,options:e.options})),e}}function Qr(t){return new lr({find:t.find,handler:({state:e,range:n,match:r})=>{const i=Qn(t.getAttributes,void 0,r);if(!1===i||null===i)return null;const{tr:o}=e,s=r[r.length-1],a=r[0];let l=n.to;if(s){const r=a.search(/\S/),c=n.from+a.indexOf(s),h=c+s.length;if(Jr(n.from,n.to,e.doc).filter((e=>e.mark.type.excluded.find((n=>n===t.type&&n!==e.mark.type)))).filter((t=>t.to>c)).length)return null;h<n.to&&o.delete(h,n.to),c>n.from&&o.delete(n.from+r,c),l=n.from+r+s.length,o.addMark(n.from+r,l,t.type.create(i||{})),o.removeStoredMark(t.type)}}})}},8552:(t,e,n)=>{var r=n(852)(n(5639),"DataView");t.exports=r},1989:(t,e,n)=>{var r=n(1789),i=n(401),o=n(7667),s=n(1327),a=n(1866);function l(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}l.prototype.clear=r,l.prototype.delete=i,l.prototype.get=o,l.prototype.has=s,l.prototype.set=a,t.exports=l},8407:(t,e,n)=>{var r=n(7040),i=n(4125),o=n(2117),s=n(7529),a=n(4705);function l(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}l.prototype.clear=r,l.prototype.delete=i,l.prototype.get=o,l.prototype.has=s,l.prototype.set=a,t.exports=l},7071:(t,e,n)=>{var r=n(852)(n(5639),"Map");t.exports=r},3369:(t,e,n)=>{var r=n(4785),i=n(1285),o=n(6e3),s=n(9916),a=n(5265);function l(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}l.prototype.clear=r,l.prototype.delete=i,l.prototype.get=o,l.prototype.has=s,l.prototype.set=a,t.exports=l},3818:(t,e,n)=>{var r=n(852)(n(5639),"Promise");t.exports=r},8525:(t,e,n)=>{var r=n(852)(n(5639),"Set");t.exports=r},8668:(t,e,n)=>{var r=n(3369),i=n(619),o=n(2385);function s(t){var e=-1,n=null==t?0:t.length;for(this.__data__=new r;++e<n;)this.add(t[e])}s.prototype.add=s.prototype.push=i,s.prototype.has=o,t.exports=s},6384:(t,e,n)=>{var r=n(8407),i=n(7465),o=n(3779),s=n(7599),a=n(4758),l=n(4309);function c(t){var e=this.__data__=new r(t);this.size=e.size}c.prototype.clear=i,c.prototype.delete=o,c.prototype.get=s,c.prototype.has=a,c.prototype.set=l,t.exports=c},2705:(t,e,n)=>{var r=n(5639).Symbol;t.exports=r},1149:(t,e,n)=>{var r=n(5639).Uint8Array;t.exports=r},577:(t,e,n)=>{var r=n(852)(n(5639),"WeakMap");t.exports=r},7412:t=>{t.exports=function(t,e){for(var n=-1,r=null==t?0:t.length;++n<r&&!1!==e(t[n],n,t););return t}},4963:t=>{t.exports=function(t,e){for(var n=-1,r=null==t?0:t.length,i=0,o=[];++n<r;){var s=t[n];e(s,n,t)&&(o[i++]=s)}return o}},4636:(t,e,n)=>{var r=n(2545),i=n(5694),o=n(1469),s=n(4144),a=n(5776),l=n(6719),c=Object.prototype.hasOwnProperty;t.exports=function(t,e){var n=o(t),h=!n&&i(t),u=!n&&!h&&s(t),d=!n&&!h&&!u&&l(t),p=n||h||u||d,f=p?r(t.length,String):[],g=f.length;for(var m in t)!e&&!c.call(t,m)||p&&("length"==m||u&&("offset"==m||"parent"==m)||d&&("buffer"==m||"byteLength"==m||"byteOffset"==m)||a(m,g))||f.push(m);return f}},9932:t=>{t.exports=function(t,e){for(var n=-1,r=null==t?0:t.length,i=Array(r);++n<r;)i[n]=e(t[n],n,t);return i}},2488:t=>{t.exports=function(t,e){for(var n=-1,r=e.length,i=t.length;++n<r;)t[i+n]=e[n];return t}},2908:t=>{t.exports=function(t,e){for(var n=-1,r=null==t?0:t.length;++n<r;)if(e(t[n],n,t))return!0;return!1}},4865:(t,e,n)=>{var r=n(9465),i=n(7813),o=Object.prototype.hasOwnProperty;t.exports=function(t,e,n){var s=t[e];o.call(t,e)&&i(s,n)&&(void 0!==n||e in t)||r(t,e,n)}},8470:(t,e,n)=>{var r=n(7813);t.exports=function(t,e){for(var n=t.length;n--;)if(r(t[n][0],e))return n;return-1}},4037:(t,e,n)=>{var r=n(8363),i=n(3674);t.exports=function(t,e){return t&&r(e,i(e),t)}},3886:(t,e,n)=>{var r=n(8363),i=n(1704);t.exports=function(t,e){return t&&r(e,i(e),t)}},9465:(t,e,n)=>{var r=n(8777);t.exports=function(t,e,n){"__proto__"==e&&r?r(t,e,{configurable:!0,enumerable:!0,value:n,writable:!0}):t[e]=n}},5990:(t,e,n)=>{var r=n(6384),i=n(7412),o=n(4865),s=n(4037),a=n(3886),l=n(4626),c=n(278),h=n(8805),u=n(1911),d=n(8234),p=n(6904),f=n(4160),g=n(3824),m=n(9148),v=n(8517),y=n(1469),b=n(4144),w=n(6688),x=n(3218),k=n(2928),S=n(3674),_=n(1704),E="[object Arguments]",C="[object Function]",O="[object Object]",M={};M[E]=M["[object Array]"]=M["[object ArrayBuffer]"]=M["[object DataView]"]=M["[object Boolean]"]=M["[object Date]"]=M["[object Float32Array]"]=M["[object Float64Array]"]=M["[object Int8Array]"]=M["[object Int16Array]"]=M["[object Int32Array]"]=M["[object Map]"]=M["[object Number]"]=M[O]=M["[object RegExp]"]=M["[object Set]"]=M["[object String]"]=M["[object Symbol]"]=M["[object Uint8Array]"]=M["[object Uint8ClampedArray]"]=M["[object Uint16Array]"]=M["[object Uint32Array]"]=!0,M["[object Error]"]=M[C]=M["[object WeakMap]"]=!1,t.exports=function t(e,n,A,T,N,D){var j,R=1&n,P=2&n,z=4&n;if(A&&(j=N?A(e,T,N,D):A(e)),void 0!==j)return j;if(!x(e))return e;var I=y(e);if(I){if(j=g(e),!R)return c(e,j)}else{var B=f(e),F=B==C||"[object GeneratorFunction]"==B;if(b(e))return l(e,R);if(B==O||B==E||F&&!N){if(j=P||F?{}:v(e),!R)return P?u(e,a(j,e)):h(e,s(j,e))}else{if(!M[B])return N?e:{};j=m(e,B,R)}}D||(D=new r);var $=D.get(e);if($)return $;D.set(e,j),k(e)?e.forEach((function(r){j.add(t(r,n,A,r,e,D))})):w(e)&&e.forEach((function(r,i){j.set(i,t(r,n,A,i,e,D))}));var L=I?void 0:(z?P?p:d:P?_:S)(e);return i(L||e,(function(r,i){L&&(r=e[i=r]),o(j,i,t(r,n,A,i,e,D))})),j}},3118:(t,e,n)=>{var r=n(3218),i=Object.create,o=function(){function t(){}return function(e){if(!r(e))return{};if(i)return i(e);t.prototype=e;var n=new t;return t.prototype=void 0,n}}();t.exports=o},9881:(t,e,n)=>{var r=n(7816),i=n(9291)(r);t.exports=i},8483:(t,e,n)=>{var r=n(5063)();t.exports=r},7816:(t,e,n)=>{var r=n(8483),i=n(3674);t.exports=function(t,e){return t&&r(t,e,i)}},7786:(t,e,n)=>{var r=n(1811),i=n(327);t.exports=function(t,e){for(var n=0,o=(e=r(e,t)).length;null!=t&&n<o;)t=t[i(e[n++])];return n&&n==o?t:void 0}},8866:(t,e,n)=>{var r=n(2488),i=n(1469);t.exports=function(t,e,n){var o=e(t);return i(t)?o:r(o,n(t))}},4239:(t,e,n)=>{var r=n(2705),i=n(9607),o=n(2333),s=r?r.toStringTag:void 0;t.exports=function(t){return null==t?void 0===t?"[object Undefined]":"[object Null]":s&&s in Object(t)?i(t):o(t)}},13:t=>{t.exports=function(t,e){return null!=t&&e in Object(t)}},9454:(t,e,n)=>{var r=n(4239),i=n(7005);t.exports=function(t){return i(t)&&"[object Arguments]"==r(t)}},939:(t,e,n)=>{var r=n(2492),i=n(7005);t.exports=function t(e,n,o,s,a){return e===n||(null==e||null==n||!i(e)&&!i(n)?e!=e&&n!=n:r(e,n,o,s,t,a))}},2492:(t,e,n)=>{var r=n(6384),i=n(7114),o=n(8351),s=n(6096),a=n(4160),l=n(1469),c=n(4144),h=n(6719),u="[object Arguments]",d="[object Array]",p="[object Object]",f=Object.prototype.hasOwnProperty;t.exports=function(t,e,n,g,m,v){var y=l(t),b=l(e),w=y?d:a(t),x=b?d:a(e),k=(w=w==u?p:w)==p,S=(x=x==u?p:x)==p,_=w==x;if(_&&c(t)){if(!c(e))return!1;y=!0,k=!1}if(_&&!k)return v||(v=new r),y||h(t)?i(t,e,n,g,m,v):o(t,e,w,n,g,m,v);if(!(1&n)){var E=k&&f.call(t,"__wrapped__"),C=S&&f.call(e,"__wrapped__");if(E||C){var O=E?t.value():t,M=C?e.value():e;return v||(v=new r),m(O,M,n,g,v)}}return!!_&&(v||(v=new r),s(t,e,n,g,m,v))}},5588:(t,e,n)=>{var r=n(4160),i=n(7005);t.exports=function(t){return i(t)&&"[object Map]"==r(t)}},2958:(t,e,n)=>{var r=n(6384),i=n(939);t.exports=function(t,e,n,o){var s=n.length,a=s,l=!o;if(null==t)return!a;for(t=Object(t);s--;){var c=n[s];if(l&&c[2]?c[1]!==t[c[0]]:!(c[0]in t))return!1}for(;++s<a;){var h=(c=n[s])[0],u=t[h],d=c[1];if(l&&c[2]){if(void 0===u&&!(h in t))return!1}else{var p=new r;if(o)var f=o(u,d,h,t,e,p);if(!(void 0===f?i(d,u,3,o,p):f))return!1}}return!0}},8458:(t,e,n)=>{var r=n(3560),i=n(5346),o=n(3218),s=n(346),a=/^\[object .+?Constructor\]$/,l=Function.prototype,c=Object.prototype,h=l.toString,u=c.hasOwnProperty,d=RegExp("^"+h.call(u).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");t.exports=function(t){return!(!o(t)||i(t))&&(r(t)?d:a).test(s(t))}},9221:(t,e,n)=>{var r=n(4160),i=n(7005);t.exports=function(t){return i(t)&&"[object Set]"==r(t)}},8749:(t,e,n)=>{var r=n(4239),i=n(1780),o=n(7005),s={};s["[object Float32Array]"]=s["[object Float64Array]"]=s["[object Int8Array]"]=s["[object Int16Array]"]=s["[object Int32Array]"]=s["[object Uint8Array]"]=s["[object Uint8ClampedArray]"]=s["[object Uint16Array]"]=s["[object Uint32Array]"]=!0,s["[object Arguments]"]=s["[object Array]"]=s["[object ArrayBuffer]"]=s["[object Boolean]"]=s["[object DataView]"]=s["[object Date]"]=s["[object Error]"]=s["[object Function]"]=s["[object Map]"]=s["[object Number]"]=s["[object Object]"]=s["[object RegExp]"]=s["[object Set]"]=s["[object String]"]=s["[object WeakMap]"]=!1,t.exports=function(t){return o(t)&&i(t.length)&&!!s[r(t)]}},7206:(t,e,n)=>{var r=n(1573),i=n(6432),o=n(6557),s=n(1469),a=n(9601);t.exports=function(t){return"function"==typeof t?t:null==t?o:"object"==typeof t?s(t)?i(t[0],t[1]):r(t):a(t)}},280:(t,e,n)=>{var r=n(5726),i=n(6916),o=Object.prototype.hasOwnProperty;t.exports=function(t){if(!r(t))return i(t);var e=[];for(var n in Object(t))o.call(t,n)&&"constructor"!=n&&e.push(n);return e}},313:(t,e,n)=>{var r=n(3218),i=n(5726),o=n(3498),s=Object.prototype.hasOwnProperty;t.exports=function(t){if(!r(t))return o(t);var e=i(t),n=[];for(var a in t)("constructor"!=a||!e&&s.call(t,a))&&n.push(a);return n}},9199:(t,e,n)=>{var r=n(9881),i=n(8612);t.exports=function(t,e){var n=-1,o=i(t)?Array(t.length):[];return r(t,(function(t,r,i){o[++n]=e(t,r,i)})),o}},1573:(t,e,n)=>{var r=n(2958),i=n(1499),o=n(2634);t.exports=function(t){var e=i(t);return 1==e.length&&e[0][2]?o(e[0][0],e[0][1]):function(n){return n===t||r(n,t,e)}}},6432:(t,e,n)=>{var r=n(939),i=n(7361),o=n(9095),s=n(5403),a=n(9162),l=n(2634),c=n(327);t.exports=function(t,e){return s(t)&&a(e)?l(c(t),e):function(n){var s=i(n,t);return void 0===s&&s===e?o(n,t):r(e,s,3)}}},371:t=>{t.exports=function(t){return function(e){return null==e?void 0:e[t]}}},9152:(t,e,n)=>{var r=n(7786);t.exports=function(t){return function(e){return r(e,t)}}},2545:t=>{t.exports=function(t,e){for(var n=-1,r=Array(t);++n<t;)r[n]=e(n);return r}},531:(t,e,n)=>{var r=n(2705),i=n(9932),o=n(1469),s=n(3448),a=r?r.prototype:void 0,l=a?a.toString:void 0;t.exports=function t(e){if("string"==typeof e)return e;if(o(e))return i(e,t)+"";if(s(e))return l?l.call(e):"";var n=e+"";return"0"==n&&1/e==-1/0?"-0":n}},7518:t=>{t.exports=function(t){return function(e){return t(e)}}},4757:t=>{t.exports=function(t,e){return t.has(e)}},4290:(t,e,n)=>{var r=n(6557);t.exports=function(t){return"function"==typeof t?t:r}},1811:(t,e,n)=>{var r=n(1469),i=n(5403),o=n(5514),s=n(9833);t.exports=function(t,e){return r(t)?t:i(t,e)?[t]:o(s(t))}},4318:(t,e,n)=>{var r=n(1149);t.exports=function(t){var e=new t.constructor(t.byteLength);return new r(e).set(new r(t)),e}},4626:(t,e,n)=>{t=n.nmd(t);var r=n(5639),i=e&&!e.nodeType&&e,o=i&&t&&!t.nodeType&&t,s=o&&o.exports===i?r.Buffer:void 0,a=s?s.allocUnsafe:void 0;t.exports=function(t,e){if(e)return t.slice();var n=t.length,r=a?a(n):new t.constructor(n);return t.copy(r),r}},7157:(t,e,n)=>{var r=n(4318);t.exports=function(t,e){var n=e?r(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.byteLength)}},3147:t=>{var e=/\w*$/;t.exports=function(t){var n=new t.constructor(t.source,e.exec(t));return n.lastIndex=t.lastIndex,n}},419:(t,e,n)=>{var r=n(2705),i=r?r.prototype:void 0,o=i?i.valueOf:void 0;t.exports=function(t){return o?Object(o.call(t)):{}}},7133:(t,e,n)=>{var r=n(4318);t.exports=function(t,e){var n=e?r(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.length)}},278:t=>{t.exports=function(t,e){var n=-1,r=t.length;for(e||(e=Array(r));++n<r;)e[n]=t[n];return e}},8363:(t,e,n)=>{var r=n(4865),i=n(9465);t.exports=function(t,e,n,o){var s=!n;n||(n={});for(var a=-1,l=e.length;++a<l;){var c=e[a],h=o?o(n[c],t[c],c,n,t):void 0;void 0===h&&(h=t[c]),s?i(n,c,h):r(n,c,h)}return n}},8805:(t,e,n)=>{var r=n(8363),i=n(9551);t.exports=function(t,e){return r(t,i(t),e)}},1911:(t,e,n)=>{var r=n(8363),i=n(1442);t.exports=function(t,e){return r(t,i(t),e)}},4429:(t,e,n)=>{var r=n(5639)["__core-js_shared__"];t.exports=r},9291:(t,e,n)=>{var r=n(8612);t.exports=function(t,e){return function(n,i){if(null==n)return n;if(!r(n))return t(n,i);for(var o=n.length,s=e?o:-1,a=Object(n);(e?s--:++s<o)&&!1!==i(a[s],s,a););return n}}},5063:t=>{t.exports=function(t){return function(e,n,r){for(var i=-1,o=Object(e),s=r(e),a=s.length;a--;){var l=s[t?a:++i];if(!1===n(o[l],l,o))break}return e}}},8777:(t,e,n)=>{var r=n(852),i=function(){try{var t=r(Object,"defineProperty");return t({},"",{}),t}catch(t){}}();t.exports=i},7114:(t,e,n)=>{var r=n(8668),i=n(2908),o=n(4757);t.exports=function(t,e,n,s,a,l){var c=1&n,h=t.length,u=e.length;if(h!=u&&!(c&&u>h))return!1;var d=l.get(t),p=l.get(e);if(d&&p)return d==e&&p==t;var f=-1,g=!0,m=2&n?new r:void 0;for(l.set(t,e),l.set(e,t);++f<h;){var v=t[f],y=e[f];if(s)var b=c?s(y,v,f,e,t,l):s(v,y,f,t,e,l);if(void 0!==b){if(b)continue;g=!1;break}if(m){if(!i(e,(function(t,e){if(!o(m,e)&&(v===t||a(v,t,n,s,l)))return m.push(e)}))){g=!1;break}}else if(v!==y&&!a(v,y,n,s,l)){g=!1;break}}return l.delete(t),l.delete(e),g}},8351:(t,e,n)=>{var r=n(2705),i=n(1149),o=n(7813),s=n(7114),a=n(8776),l=n(1814),c=r?r.prototype:void 0,h=c?c.valueOf:void 0;t.exports=function(t,e,n,r,c,u,d){switch(n){case"[object DataView]":if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case"[object ArrayBuffer]":return!(t.byteLength!=e.byteLength||!u(new i(t),new i(e)));case"[object Boolean]":case"[object Date]":case"[object Number]":return o(+t,+e);case"[object Error]":return t.name==e.name&&t.message==e.message;case"[object RegExp]":case"[object String]":return t==e+"";case"[object Map]":var p=a;case"[object Set]":var f=1&r;if(p||(p=l),t.size!=e.size&&!f)return!1;var g=d.get(t);if(g)return g==e;r|=2,d.set(t,e);var m=s(p(t),p(e),r,c,u,d);return d.delete(t),m;case"[object Symbol]":if(h)return h.call(t)==h.call(e)}return!1}},6096:(t,e,n)=>{var r=n(8234),i=Object.prototype.hasOwnProperty;t.exports=function(t,e,n,o,s,a){var l=1&n,c=r(t),h=c.length;if(h!=r(e).length&&!l)return!1;for(var u=h;u--;){var d=c[u];if(!(l?d in e:i.call(e,d)))return!1}var p=a.get(t),f=a.get(e);if(p&&f)return p==e&&f==t;var g=!0;a.set(t,e),a.set(e,t);for(var m=l;++u<h;){var v=t[d=c[u]],y=e[d];if(o)var b=l?o(y,v,d,e,t,a):o(v,y,d,t,e,a);if(!(void 0===b?v===y||s(v,y,n,o,a):b)){g=!1;break}m||(m="constructor"==d)}if(g&&!m){var w=t.constructor,x=e.constructor;w==x||!("constructor"in t)||!("constructor"in e)||"function"==typeof w&&w instanceof w&&"function"==typeof x&&x instanceof x||(g=!1)}return a.delete(t),a.delete(e),g}},1957:(t,e,n)=>{var r="object"==typeof n.g&&n.g&&n.g.Object===Object&&n.g;t.exports=r},8234:(t,e,n)=>{var r=n(8866),i=n(9551),o=n(3674);t.exports=function(t){return r(t,o,i)}},6904:(t,e,n)=>{var r=n(8866),i=n(1442),o=n(1704);t.exports=function(t){return r(t,o,i)}},5050:(t,e,n)=>{var r=n(7019);t.exports=function(t,e){var n=t.__data__;return r(e)?n["string"==typeof e?"string":"hash"]:n.map}},1499:(t,e,n)=>{var r=n(9162),i=n(3674);t.exports=function(t){for(var e=i(t),n=e.length;n--;){var o=e[n],s=t[o];e[n]=[o,s,r(s)]}return e}},852:(t,e,n)=>{var r=n(8458),i=n(7801);t.exports=function(t,e){var n=i(t,e);return r(n)?n:void 0}},5924:(t,e,n)=>{var r=n(5569)(Object.getPrototypeOf,Object);t.exports=r},9607:(t,e,n)=>{var r=n(2705),i=Object.prototype,o=i.hasOwnProperty,s=i.toString,a=r?r.toStringTag:void 0;t.exports=function(t){var e=o.call(t,a),n=t[a];try{t[a]=void 0;var r=!0}catch(t){}var i=s.call(t);return r&&(e?t[a]=n:delete t[a]),i}},9551:(t,e,n)=>{var r=n(4963),i=n(479),o=Object.prototype.propertyIsEnumerable,s=Object.getOwnPropertySymbols,a=s?function(t){return null==t?[]:(t=Object(t),r(s(t),(function(e){return o.call(t,e)})))}:i;t.exports=a},1442:(t,e,n)=>{var r=n(2488),i=n(5924),o=n(9551),s=n(479),a=Object.getOwnPropertySymbols?function(t){for(var e=[];t;)r(e,o(t)),t=i(t);return e}:s;t.exports=a},4160:(t,e,n)=>{var r=n(8552),i=n(7071),o=n(3818),s=n(8525),a=n(577),l=n(4239),c=n(346),h="[object Map]",u="[object Promise]",d="[object Set]",p="[object WeakMap]",f="[object DataView]",g=c(r),m=c(i),v=c(o),y=c(s),b=c(a),w=l;(r&&w(new r(new ArrayBuffer(1)))!=f||i&&w(new i)!=h||o&&w(o.resolve())!=u||s&&w(new s)!=d||a&&w(new a)!=p)&&(w=function(t){var e=l(t),n="[object Object]"==e?t.constructor:void 0,r=n?c(n):"";if(r)switch(r){case g:return f;case m:return h;case v:return u;case y:return d;case b:return p}return e}),t.exports=w},7801:t=>{t.exports=function(t,e){return null==t?void 0:t[e]}},222:(t,e,n)=>{var r=n(1811),i=n(5694),o=n(1469),s=n(5776),a=n(1780),l=n(327);t.exports=function(t,e,n){for(var c=-1,h=(e=r(e,t)).length,u=!1;++c<h;){var d=l(e[c]);if(!(u=null!=t&&n(t,d)))break;t=t[d]}return u||++c!=h?u:!!(h=null==t?0:t.length)&&a(h)&&s(d,h)&&(o(t)||i(t))}},1789:(t,e,n)=>{var r=n(4536);t.exports=function(){this.__data__=r?r(null):{},this.size=0}},401:t=>{t.exports=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e}},7667:(t,e,n)=>{var r=n(4536),i=Object.prototype.hasOwnProperty;t.exports=function(t){var e=this.__data__;if(r){var n=e[t];return"__lodash_hash_undefined__"===n?void 0:n}return i.call(e,t)?e[t]:void 0}},1327:(t,e,n)=>{var r=n(4536),i=Object.prototype.hasOwnProperty;t.exports=function(t){var e=this.__data__;return r?void 0!==e[t]:i.call(e,t)}},1866:(t,e,n)=>{var r=n(4536);t.exports=function(t,e){var n=this.__data__;return this.size+=this.has(t)?0:1,n[t]=r&&void 0===e?"__lodash_hash_undefined__":e,this}},3824:t=>{var e=Object.prototype.hasOwnProperty;t.exports=function(t){var n=t.length,r=new t.constructor(n);return n&&"string"==typeof t[0]&&e.call(t,"index")&&(r.index=t.index,r.input=t.input),r}},9148:(t,e,n)=>{var r=n(4318),i=n(7157),o=n(3147),s=n(419),a=n(7133);t.exports=function(t,e,n){var l=t.constructor;switch(e){case"[object ArrayBuffer]":return r(t);case"[object Boolean]":case"[object Date]":return new l(+t);case"[object DataView]":return i(t,n);case"[object Float32Array]":case"[object Float64Array]":case"[object Int8Array]":case"[object Int16Array]":case"[object Int32Array]":case"[object Uint8Array]":case"[object Uint8ClampedArray]":case"[object Uint16Array]":case"[object Uint32Array]":return a(t,n);case"[object Map]":case"[object Set]":return new l;case"[object Number]":case"[object String]":return new l(t);case"[object RegExp]":return o(t);case"[object Symbol]":return s(t)}}},8517:(t,e,n)=>{var r=n(3118),i=n(5924),o=n(5726);t.exports=function(t){return"function"!=typeof t.constructor||o(t)?{}:r(i(t))}},5776:t=>{var e=/^(?:0|[1-9]\d*)$/;t.exports=function(t,n){var r=typeof t;return!!(n=null==n?9007199254740991:n)&&("number"==r||"symbol"!=r&&e.test(t))&&t>-1&&t%1==0&&t<n}},5403:(t,e,n)=>{var r=n(1469),i=n(3448),o=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,s=/^\w*$/;t.exports=function(t,e){if(r(t))return!1;var n=typeof t;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=t&&!i(t))||s.test(t)||!o.test(t)||null!=e&&t in Object(e)}},7019:t=>{t.exports=function(t){var e=typeof t;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==t:null===t}},5346:(t,e,n)=>{var r,i=n(4429),o=(r=/[^.]+$/.exec(i&&i.keys&&i.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"";t.exports=function(t){return!!o&&o in t}},5726:t=>{var e=Object.prototype;t.exports=function(t){var n=t&&t.constructor;return t===("function"==typeof n&&n.prototype||e)}},9162:(t,e,n)=>{var r=n(3218);t.exports=function(t){return t==t&&!r(t)}},7040:t=>{t.exports=function(){this.__data__=[],this.size=0}},4125:(t,e,n)=>{var r=n(8470),i=Array.prototype.splice;t.exports=function(t){var e=this.__data__,n=r(e,t);return!(n<0||(n==e.length-1?e.pop():i.call(e,n,1),--this.size,0))}},2117:(t,e,n)=>{var r=n(8470);t.exports=function(t){var e=this.__data__,n=r(e,t);return n<0?void 0:e[n][1]}},7529:(t,e,n)=>{var r=n(8470);t.exports=function(t){return r(this.__data__,t)>-1}},4705:(t,e,n)=>{var r=n(8470);t.exports=function(t,e){var n=this.__data__,i=r(n,t);return i<0?(++this.size,n.push([t,e])):n[i][1]=e,this}},4785:(t,e,n)=>{var r=n(1989),i=n(8407),o=n(7071);t.exports=function(){this.size=0,this.__data__={hash:new r,map:new(o||i),string:new r}}},1285:(t,e,n)=>{var r=n(5050);t.exports=function(t){var e=r(this,t).delete(t);return this.size-=e?1:0,e}},6e3:(t,e,n)=>{var r=n(5050);t.exports=function(t){return r(this,t).get(t)}},9916:(t,e,n)=>{var r=n(5050);t.exports=function(t){return r(this,t).has(t)}},5265:(t,e,n)=>{var r=n(5050);t.exports=function(t,e){var n=r(this,t),i=n.size;return n.set(t,e),this.size+=n.size==i?0:1,this}},8776:t=>{t.exports=function(t){var e=-1,n=Array(t.size);return t.forEach((function(t,r){n[++e]=[r,t]})),n}},2634:t=>{t.exports=function(t,e){return function(n){return null!=n&&n[t]===e&&(void 0!==e||t in Object(n))}}},4523:(t,e,n)=>{var r=n(8306);t.exports=function(t){var e=r(t,(function(t){return 500===n.size&&n.clear(),t})),n=e.cache;return e}},4536:(t,e,n)=>{var r=n(852)(Object,"create");t.exports=r},6916:(t,e,n)=>{var r=n(5569)(Object.keys,Object);t.exports=r},3498:t=>{t.exports=function(t){var e=[];if(null!=t)for(var n in Object(t))e.push(n);return e}},1167:(t,e,n)=>{t=n.nmd(t);var r=n(1957),i=e&&!e.nodeType&&e,o=i&&t&&!t.nodeType&&t,s=o&&o.exports===i&&r.process,a=function(){try{return o&&o.require&&o.require("util").types||s&&s.binding&&s.binding("util")}catch(t){}}();t.exports=a},2333:t=>{var e=Object.prototype.toString;t.exports=function(t){return e.call(t)}},5569:t=>{t.exports=function(t,e){return function(n){return t(e(n))}}},5639:(t,e,n)=>{var r=n(1957),i="object"==typeof self&&self&&self.Object===Object&&self,o=r||i||Function("return this")();t.exports=o},619:t=>{t.exports=function(t){return this.__data__.set(t,"__lodash_hash_undefined__"),this}},2385:t=>{t.exports=function(t){return this.__data__.has(t)}},1814:t=>{t.exports=function(t){var e=-1,n=Array(t.size);return t.forEach((function(t){n[++e]=t})),n}},7465:(t,e,n)=>{var r=n(8407);t.exports=function(){this.__data__=new r,this.size=0}},3779:t=>{t.exports=function(t){var e=this.__data__,n=e.delete(t);return this.size=e.size,n}},7599:t=>{t.exports=function(t){return this.__data__.get(t)}},4758:t=>{t.exports=function(t){return this.__data__.has(t)}},4309:(t,e,n)=>{var r=n(8407),i=n(7071),o=n(3369);t.exports=function(t,e){var n=this.__data__;if(n instanceof r){var s=n.__data__;if(!i||s.length<199)return s.push([t,e]),this.size=++n.size,this;n=this.__data__=new o(s)}return n.set(t,e),this.size=n.size,this}},5514:(t,e,n)=>{var r=n(4523),i=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,o=/\\(\\)?/g,s=r((function(t){var e=[];return 46===t.charCodeAt(0)&&e.push(""),t.replace(i,(function(t,n,r,i){e.push(r?i.replace(o,"$1"):n||t)})),e}));t.exports=s},327:(t,e,n)=>{var r=n(3448);t.exports=function(t){if("string"==typeof t||r(t))return t;var e=t+"";return"0"==e&&1/t==-1/0?"-0":e}},346:t=>{var e=Function.prototype.toString;t.exports=function(t){if(null!=t){try{return e.call(t)}catch(t){}try{return t+""}catch(t){}}return""}},361:(t,e,n)=>{var r=n(5990);t.exports=function(t){return r(t,5)}},7813:t=>{t.exports=function(t,e){return t===e||t!=t&&e!=e}},2525:(t,e,n)=>{var r=n(7816),i=n(4290);t.exports=function(t,e){return t&&r(t,i(e))}},7361:(t,e,n)=>{var r=n(7786);t.exports=function(t,e,n){var i=null==t?void 0:r(t,e);return void 0===i?n:i}},9095:(t,e,n)=>{var r=n(13),i=n(222);t.exports=function(t,e){return null!=t&&i(t,e,r)}},6557:t=>{t.exports=function(t){return t}},5694:(t,e,n)=>{var r=n(9454),i=n(7005),o=Object.prototype,s=o.hasOwnProperty,a=o.propertyIsEnumerable,l=r(function(){return arguments}())?r:function(t){return i(t)&&s.call(t,"callee")&&!a.call(t,"callee")};t.exports=l},1469:t=>{var e=Array.isArray;t.exports=e},8612:(t,e,n)=>{var r=n(3560),i=n(1780);t.exports=function(t){return null!=t&&i(t.length)&&!r(t)}},4144:(t,e,n)=>{t=n.nmd(t);var r=n(5639),i=n(5062),o=e&&!e.nodeType&&e,s=o&&t&&!t.nodeType&&t,a=s&&s.exports===o?r.Buffer:void 0,l=(a?a.isBuffer:void 0)||i;t.exports=l},3560:(t,e,n)=>{var r=n(4239),i=n(3218);t.exports=function(t){if(!i(t))return!1;var e=r(t);return"[object Function]"==e||"[object GeneratorFunction]"==e||"[object AsyncFunction]"==e||"[object Proxy]"==e}},1780:t=>{t.exports=function(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=9007199254740991}},6688:(t,e,n)=>{var r=n(5588),i=n(7518),o=n(1167),s=o&&o.isMap,a=s?i(s):r;t.exports=a},3218:t=>{t.exports=function(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}},7005:t=>{t.exports=function(t){return null!=t&&"object"==typeof t}},8630:(t,e,n)=>{var r=n(4239),i=n(5924),o=n(7005),s=Function.prototype,a=Object.prototype,l=s.toString,c=a.hasOwnProperty,h=l.call(Object);t.exports=function(t){if(!o(t)||"[object Object]"!=r(t))return!1;var e=i(t);if(null===e)return!0;var n=c.call(e,"constructor")&&e.constructor;return"function"==typeof n&&n instanceof n&&l.call(n)==h}},2928:(t,e,n)=>{var r=n(9221),i=n(7518),o=n(1167),s=o&&o.isSet,a=s?i(s):r;t.exports=a},7037:(t,e,n)=>{var r=n(4239),i=n(1469),o=n(7005);t.exports=function(t){return"string"==typeof t||!i(t)&&o(t)&&"[object String]"==r(t)}},3448:(t,e,n)=>{var r=n(4239),i=n(7005);t.exports=function(t){return"symbol"==typeof t||i(t)&&"[object Symbol]"==r(t)}},6719:(t,e,n)=>{var r=n(8749),i=n(7518),o=n(1167),s=o&&o.isTypedArray,a=s?i(s):r;t.exports=a},3674:(t,e,n)=>{var r=n(4636),i=n(280),o=n(8612);t.exports=function(t){return o(t)?r(t):i(t)}},1704:(t,e,n)=>{var r=n(4636),i=n(313),o=n(8612);t.exports=function(t){return o(t)?r(t,!0):i(t)}},5161:(t,e,n)=>{var r=n(9932),i=n(7206),o=n(9199),s=n(1469);t.exports=function(t,e){return(s(t)?r:o)(t,i(e,3))}},8306:(t,e,n)=>{var r=n(3369);function i(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new TypeError("Expected a function");var n=function(){var r=arguments,i=e?e.apply(this,r):r[0],o=n.cache;if(o.has(i))return o.get(i);var s=t.apply(this,r);return n.cache=o.set(i,s)||o,s};return n.cache=new(i.Cache||r),n}i.Cache=r,t.exports=i},9601:(t,e,n)=>{var r=n(371),i=n(9152),o=n(5403),s=n(327);t.exports=function(t){return o(t)?r(s(t)):i(t)}},479:t=>{t.exports=function(){return[]}},5062:t=>{t.exports=function(){return!1}},9833:(t,e,n)=>{var r=n(531);t.exports=function(t){return null==t?"":r(t)}},2703:(t,e,n)=>{"use strict";var r=n(414);function i(){}function o(){}o.resetWarningCache=i,t.exports=function(){function t(t,e,n,i,o,s){if(s!==r){var a=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw a.name="Invariant Violation",a}}function e(){return t}t.isRequired=t;var n={array:t,bigint:t,bool:t,func:t,number:t,object:t,string:t,symbol:t,any:t,arrayOf:e,element:t,elementType:t,instanceOf:e,node:t,objectOf:e,oneOf:e,oneOfType:e,shape:e,exact:e,checkPropTypes:o,resetWarningCache:i};return n.PropTypes=n,n}},5697:(t,e,n)=>{t.exports=n(2703)()},414:t=>{"use strict";t.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},3565:(t,e,n)=>{"use strict";n.d(e,{xS:()=>Io});var r=n(7294),i=n(9941),o=function(t,e,n,r,i){var o=i.clientWidth,s=i.clientHeight,a="number"==typeof t.pageX?t.pageX:t.touches[0].pageX,l="number"==typeof t.pageY?t.pageY:t.touches[0].pageY,c=a-(i.getBoundingClientRect().left+window.pageXOffset),h=l-(i.getBoundingClientRect().top+window.pageYOffset);if("vertical"===n){var u;if(u=h<0?0:h>s?1:Math.round(100*h/s)/100,e.a!==u)return{h:e.h,s:e.s,l:e.l,a:u,source:"rgb"}}else{var d;if(r!==(d=c<0?0:c>o?1:Math.round(100*c/o)/100))return{h:e.h,s:e.s,l:e.l,a:d,source:"rgb"}}return null},s={},a=function(t,e,n,r){var i=t+"-"+e+"-"+n+(r?"-server":"");if(s[i])return s[i];var o=function(t,e,n,r){if("undefined"==typeof document&&!r)return null;var i=r?new r:document.createElement("canvas");i.width=2*n,i.height=2*n;var o=i.getContext("2d");return o?(o.fillStyle=t,o.fillRect(0,0,i.width,i.height),o.fillStyle=e,o.fillRect(0,0,n,n),o.translate(n,n),o.fillRect(0,0,n,n),i.toDataURL()):null}(t,e,n,r);return s[i]=o,o},l=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},c=function(t){var e=t.white,n=t.grey,o=t.size,s=t.renderers,c=t.borderRadius,h=t.boxShadow,u=t.children,d=(0,i.ZP)({default:{grid:{borderRadius:c,boxShadow:h,absolute:"0px 0px 0px 0px",background:"url("+a(e,n,o,s.canvas)+") center left"}}});return(0,r.isValidElement)(u)?r.cloneElement(u,l({},u.props,{style:l({},u.props.style,d.grid)})):r.createElement("div",{style:d.grid})};c.defaultProps={size:8,white:"transparent",grey:"rgba(0,0,0,.08)",renderers:{}};const h=c;var u=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},d=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}();function p(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function f(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}const g=function(t){function e(){var t,n,r;p(this,e);for(var i=arguments.length,s=Array(i),a=0;a<i;a++)s[a]=arguments[a];return n=r=f(this,(t=e.__proto__||Object.getPrototypeOf(e)).call.apply(t,[this].concat(s))),r.handleChange=function(t){var e=o(t,r.props.hsl,r.props.direction,r.props.a,r.container);e&&"function"==typeof r.props.onChange&&r.props.onChange(e,t)},r.handleMouseDown=function(t){r.handleChange(t),window.addEventListener("mousemove",r.handleChange),window.addEventListener("mouseup",r.handleMouseUp)},r.handleMouseUp=function(){r.unbindEventListeners()},r.unbindEventListeners=function(){window.removeEventListener("mousemove",r.handleChange),window.removeEventListener("mouseup",r.handleMouseUp)},f(r,n)}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),d(e,[{key:"componentWillUnmount",value:function(){this.unbindEventListeners()}},{key:"render",value:function(){var t=this,e=this.props.rgb,n=(0,i.ZP)({default:{alpha:{absolute:"0px 0px 0px 0px",borderRadius:this.props.radius},checkboard:{absolute:"0px 0px 0px 0px",overflow:"hidden",borderRadius:this.props.radius},gradient:{absolute:"0px 0px 0px 0px",background:"linear-gradient(to right, rgba("+e.r+","+e.g+","+e.b+", 0) 0%,\n           rgba("+e.r+","+e.g+","+e.b+", 1) 100%)",boxShadow:this.props.shadow,borderRadius:this.props.radius},container:{position:"relative",height:"100%",margin:"0 3px"},pointer:{position:"absolute",left:100*e.a+"%"},slider:{width:"4px",borderRadius:"1px",height:"8px",boxShadow:"0 0 2px rgba(0, 0, 0, .6)",background:"#fff",marginTop:"1px",transform:"translateX(-2px)"}},vertical:{gradient:{background:"linear-gradient(to bottom, rgba("+e.r+","+e.g+","+e.b+", 0) 0%,\n           rgba("+e.r+","+e.g+","+e.b+", 1) 100%)"},pointer:{left:0,top:100*e.a+"%"}},overwrite:u({},this.props.style)},{vertical:"vertical"===this.props.direction,overwrite:!0});return r.createElement("div",{style:n.alpha},r.createElement("div",{style:n.checkboard},r.createElement(h,{renderers:this.props.renderers})),r.createElement("div",{style:n.gradient}),r.createElement("div",{style:n.container,ref:function(e){return t.container=e},onMouseDown:this.handleMouseDown,onTouchMove:this.handleChange,onTouchStart:this.handleChange},r.createElement("div",{style:n.pointer},this.props.pointer?r.createElement(this.props.pointer,this.props):r.createElement("div",{style:n.slider}))))}}]),e}(r.PureComponent||r.Component);var m=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),v=[38,40],y=1;const b=function(t){function e(t){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var n=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this));return n.handleBlur=function(){n.state.blurValue&&n.setState({value:n.state.blurValue,blurValue:null})},n.handleChange=function(t){n.setUpdatedValue(t.target.value,t)},n.handleKeyDown=function(t){var e,r=function(t){return Number(String(t).replace(/%/g,""))}(t.target.value);if(!isNaN(r)&&(e=t.keyCode,v.indexOf(e)>-1)){var i=n.getArrowOffset(),o=38===t.keyCode?r+i:r-i;n.setUpdatedValue(o,t)}},n.handleDrag=function(t){if(n.props.dragLabel){var e=Math.round(n.props.value+t.movementX);e>=0&&e<=n.props.dragMax&&n.props.onChange&&n.props.onChange(n.getValueObjectWithLabel(e),t)}},n.handleMouseDown=function(t){n.props.dragLabel&&(t.preventDefault(),n.handleDrag(t),window.addEventListener("mousemove",n.handleDrag),window.addEventListener("mouseup",n.handleMouseUp))},n.handleMouseUp=function(){n.unbindEventListeners()},n.unbindEventListeners=function(){window.removeEventListener("mousemove",n.handleDrag),window.removeEventListener("mouseup",n.handleMouseUp)},n.state={value:String(t.value).toUpperCase(),blurValue:String(t.value).toUpperCase()},n.inputId="rc-editable-input-"+y++,n}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),m(e,[{key:"componentDidUpdate",value:function(t,e){this.props.value===this.state.value||t.value===this.props.value&&e.value===this.state.value||(this.input===document.activeElement?this.setState({blurValue:String(this.props.value).toUpperCase()}):this.setState({value:String(this.props.value).toUpperCase(),blurValue:!this.state.blurValue&&String(this.props.value).toUpperCase()}))}},{key:"componentWillUnmount",value:function(){this.unbindEventListeners()}},{key:"getValueObjectWithLabel",value:function(t){return function(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}({},this.props.label,t)}},{key:"getArrowOffset",value:function(){return this.props.arrowOffset||1}},{key:"setUpdatedValue",value:function(t,e){var n=this.props.label?this.getValueObjectWithLabel(t):t;this.props.onChange&&this.props.onChange(n,e),this.setState({value:t})}},{key:"render",value:function(){var t=this,e=(0,i.ZP)({default:{wrap:{position:"relative"}},"user-override":{wrap:this.props.style&&this.props.style.wrap?this.props.style.wrap:{},input:this.props.style&&this.props.style.input?this.props.style.input:{},label:this.props.style&&this.props.style.label?this.props.style.label:{}},"dragLabel-true":{label:{cursor:"ew-resize"}}},{"user-override":!0},this.props);return r.createElement("div",{style:e.wrap},r.createElement("input",{id:this.inputId,style:e.input,ref:function(e){return t.input=e},value:this.state.value,onKeyDown:this.handleKeyDown,onChange:this.handleChange,onBlur:this.handleBlur,placeholder:this.props.placeholder,spellCheck:"false"}),this.props.label&&!this.props.hideLabel?r.createElement("label",{htmlFor:this.inputId,style:e.label,onMouseDown:this.handleMouseDown},this.props.label):null)}}]),e}(r.PureComponent||r.Component);var w=function(t,e,n,r){var i=r.clientWidth,o=r.clientHeight,s="number"==typeof t.pageX?t.pageX:t.touches[0].pageX,a="number"==typeof t.pageY?t.pageY:t.touches[0].pageY,l=s-(r.getBoundingClientRect().left+window.pageXOffset),c=a-(r.getBoundingClientRect().top+window.pageYOffset);if("vertical"===e){var h=void 0;if(h=c<0?359:c>o?0:360*(-100*c/o+100)/100,n.h!==h)return{h,s:n.s,l:n.l,a:n.a,source:"hsl"}}else{var u=void 0;if(u=l<0?0:l>i?359:100*l/i*360/100,n.h!==u)return{h:u,s:n.s,l:n.l,a:n.a,source:"hsl"}}return null},x=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}();function k(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function S(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}const _=function(t){function e(){var t,n,r;k(this,e);for(var i=arguments.length,o=Array(i),s=0;s<i;s++)o[s]=arguments[s];return n=r=S(this,(t=e.__proto__||Object.getPrototypeOf(e)).call.apply(t,[this].concat(o))),r.handleChange=function(t){var e=w(t,r.props.direction,r.props.hsl,r.container);e&&"function"==typeof r.props.onChange&&r.props.onChange(e,t)},r.handleMouseDown=function(t){r.handleChange(t),window.addEventListener("mousemove",r.handleChange),window.addEventListener("mouseup",r.handleMouseUp)},r.handleMouseUp=function(){r.unbindEventListeners()},S(r,n)}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),x(e,[{key:"componentWillUnmount",value:function(){this.unbindEventListeners()}},{key:"unbindEventListeners",value:function(){window.removeEventListener("mousemove",this.handleChange),window.removeEventListener("mouseup",this.handleMouseUp)}},{key:"render",value:function(){var t=this,e=this.props.direction,n=void 0===e?"horizontal":e,o=(0,i.ZP)({default:{hue:{absolute:"0px 0px 0px 0px",borderRadius:this.props.radius,boxShadow:this.props.shadow},container:{padding:"0 2px",position:"relative",height:"100%",borderRadius:this.props.radius},pointer:{position:"absolute",left:100*this.props.hsl.h/360+"%"},slider:{marginTop:"1px",width:"4px",borderRadius:"1px",height:"8px",boxShadow:"0 0 2px rgba(0, 0, 0, .6)",background:"#fff",transform:"translateX(-2px)"}},vertical:{pointer:{left:"0px",top:-100*this.props.hsl.h/360+100+"%"}}},{vertical:"vertical"===n});return r.createElement("div",{style:o.hue},r.createElement("div",{className:"hue-"+n,style:o.container,ref:function(e){return t.container=e},onMouseDown:this.handleMouseDown,onTouchMove:this.handleChange,onTouchStart:this.handleChange},r.createElement("style",null,"\n            .hue-horizontal {\n              background: linear-gradient(to right, #f00 0%, #ff0 17%, #0f0\n                33%, #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);\n              background: -webkit-linear-gradient(to right, #f00 0%, #ff0\n                17%, #0f0 33%, #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);\n            }\n\n            .hue-vertical {\n              background: linear-gradient(to top, #f00 0%, #ff0 17%, #0f0 33%,\n                #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);\n              background: -webkit-linear-gradient(to top, #f00 0%, #ff0 17%,\n                #0f0 33%, #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);\n            }\n          "),r.createElement("div",{style:o.pointer},this.props.pointer?r.createElement(this.props.pointer,this.props):r.createElement("div",{style:o.slider}))))}}]),e}(r.PureComponent||r.Component);var E=n(5697),C=n.n(E);const O=function(t,e){return t===e||t!=t&&e!=e},M=function(t,e){for(var n=t.length;n--;)if(O(t[n][0],e))return n;return-1};var A=Array.prototype.splice;function T(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}T.prototype.clear=function(){this.__data__=[],this.size=0},T.prototype.delete=function(t){var e=this.__data__,n=M(e,t);return!(n<0||(n==e.length-1?e.pop():A.call(e,n,1),--this.size,0))},T.prototype.get=function(t){var e=this.__data__,n=M(e,t);return n<0?void 0:e[n][1]},T.prototype.has=function(t){return M(this.__data__,t)>-1},T.prototype.set=function(t,e){var n=this.__data__,r=M(n,t);return r<0?(++this.size,n.push([t,e])):n[r][1]=e,this};const N=T,D="object"==typeof global&&global&&global.Object===Object&&global;var j="object"==typeof self&&self&&self.Object===Object&&self;const R=D||j||Function("return this")(),P=R.Symbol;var z=Object.prototype,I=z.hasOwnProperty,B=z.toString,F=P?P.toStringTag:void 0;var $=Object.prototype.toString;var L=P?P.toStringTag:void 0;const H=function(t){return null==t?void 0===t?"[object Undefined]":"[object Null]":L&&L in Object(t)?function(t){var e=I.call(t,F),n=t[F];try{t[F]=void 0;var r=!0}catch(t){}var i=B.call(t);return r&&(e?t[F]=n:delete t[F]),i}(t):function(t){return $.call(t)}(t)},V=function(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)},q=function(t){if(!V(t))return!1;var e=H(t);return"[object Function]"==e||"[object GeneratorFunction]"==e||"[object AsyncFunction]"==e||"[object Proxy]"==e},W=R["__core-js_shared__"];var U,Y=(U=/[^.]+$/.exec(W&&W.keys&&W.keys.IE_PROTO||""))?"Symbol(src)_1."+U:"";var J=Function.prototype.toString;const X=function(t){if(null!=t){try{return J.call(t)}catch(t){}try{return t+""}catch(t){}}return""};var K=/^\[object .+?Constructor\]$/,G=Function.prototype,Z=Object.prototype,Q=G.toString,tt=Z.hasOwnProperty,et=RegExp("^"+Q.call(tt).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");const nt=function(t){return!(!V(t)||(e=t,Y&&Y in e))&&(q(t)?et:K).test(X(t));var e},rt=function(t,e){var n=function(t,e){return null==t?void 0:t[e]}(t,e);return nt(n)?n:void 0},it=rt(R,"Map"),ot=rt(Object,"create");var st=Object.prototype.hasOwnProperty;var at=Object.prototype.hasOwnProperty;function lt(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}lt.prototype.clear=function(){this.__data__=ot?ot(null):{},this.size=0},lt.prototype.delete=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e},lt.prototype.get=function(t){var e=this.__data__;if(ot){var n=e[t];return"__lodash_hash_undefined__"===n?void 0:n}return st.call(e,t)?e[t]:void 0},lt.prototype.has=function(t){var e=this.__data__;return ot?void 0!==e[t]:at.call(e,t)},lt.prototype.set=function(t,e){var n=this.__data__;return this.size+=this.has(t)?0:1,n[t]=ot&&void 0===e?"__lodash_hash_undefined__":e,this};const ct=lt,ht=function(t,e){var n,r,i=t.__data__;return("string"==(r=typeof(n=e))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==n:null===n)?i["string"==typeof e?"string":"hash"]:i.map};function ut(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}ut.prototype.clear=function(){this.size=0,this.__data__={hash:new ct,map:new(it||N),string:new ct}},ut.prototype.delete=function(t){var e=ht(this,t).delete(t);return this.size-=e?1:0,e},ut.prototype.get=function(t){return ht(this,t).get(t)},ut.prototype.has=function(t){return ht(this,t).has(t)},ut.prototype.set=function(t,e){var n=ht(this,t),r=n.size;return n.set(t,e),this.size+=n.size==r?0:1,this};const dt=ut;function pt(t){var e=this.__data__=new N(t);this.size=e.size}pt.prototype.clear=function(){this.__data__=new N,this.size=0},pt.prototype.delete=function(t){var e=this.__data__,n=e.delete(t);return this.size=e.size,n},pt.prototype.get=function(t){return this.__data__.get(t)},pt.prototype.has=function(t){return this.__data__.has(t)},pt.prototype.set=function(t,e){var n=this.__data__;if(n instanceof N){var r=n.__data__;if(!it||r.length<199)return r.push([t,e]),this.size=++n.size,this;n=this.__data__=new dt(r)}return n.set(t,e),this.size=n.size,this};const ft=pt,gt=function(){try{var t=rt(Object,"defineProperty");return t({},"",{}),t}catch(t){}}(),mt=function(t,e,n){"__proto__"==e&&gt?gt(t,e,{configurable:!0,enumerable:!0,value:n,writable:!0}):t[e]=n},vt=function(t,e,n){(void 0!==n&&!O(t[e],n)||void 0===n&&!(e in t))&&mt(t,e,n)},yt=function(t,e,n){for(var r=-1,i=Object(t),o=n(t),s=o.length;s--;){var a=o[++r];if(!1===e(i[a],a,i))break}return t};var bt="object"==typeof exports&&exports&&!exports.nodeType&&exports,wt=bt&&"object"==typeof module&&module&&!module.nodeType&&module,xt=wt&&wt.exports===bt?R.Buffer:void 0,kt=xt?xt.allocUnsafe:void 0;const St=R.Uint8Array,_t=function(t,e){var n,r,i=e?(n=t.buffer,r=new n.constructor(n.byteLength),new St(r).set(new St(n)),r):t.buffer;return new t.constructor(i,t.byteOffset,t.length)};var Et=Object.create;const Ct=function(){function t(){}return function(e){if(!V(e))return{};if(Et)return Et(e);t.prototype=e;var n=new t;return t.prototype=void 0,n}}(),Ot=function(t,e){return function(n){return t(e(n))}},Mt=Ot(Object.getPrototypeOf,Object);var At=Object.prototype;const Tt=function(t){var e=t&&t.constructor;return t===("function"==typeof e&&e.prototype||At)},Nt=function(t){return null!=t&&"object"==typeof t},Dt=function(t){return Nt(t)&&"[object Arguments]"==H(t)};var jt=Object.prototype,Rt=jt.hasOwnProperty,Pt=jt.propertyIsEnumerable;const zt=Dt(function(){return arguments}())?Dt:function(t){return Nt(t)&&Rt.call(t,"callee")&&!Pt.call(t,"callee")},It=Array.isArray,Bt=function(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=9007199254740991},Ft=function(t){return null!=t&&Bt(t.length)&&!q(t)};var $t="object"==typeof exports&&exports&&!exports.nodeType&&exports,Lt=$t&&"object"==typeof module&&module&&!module.nodeType&&module,Ht=Lt&&Lt.exports===$t?R.Buffer:void 0;const Vt=(Ht?Ht.isBuffer:void 0)||function(){return!1};var qt=Function.prototype,Wt=Object.prototype,Ut=qt.toString,Yt=Wt.hasOwnProperty,Jt=Ut.call(Object);var Xt={};Xt["[object Float32Array]"]=Xt["[object Float64Array]"]=Xt["[object Int8Array]"]=Xt["[object Int16Array]"]=Xt["[object Int32Array]"]=Xt["[object Uint8Array]"]=Xt["[object Uint8ClampedArray]"]=Xt["[object Uint16Array]"]=Xt["[object Uint32Array]"]=!0,Xt["[object Arguments]"]=Xt["[object Array]"]=Xt["[object ArrayBuffer]"]=Xt["[object Boolean]"]=Xt["[object DataView]"]=Xt["[object Date]"]=Xt["[object Error]"]=Xt["[object Function]"]=Xt["[object Map]"]=Xt["[object Number]"]=Xt["[object Object]"]=Xt["[object RegExp]"]=Xt["[object Set]"]=Xt["[object String]"]=Xt["[object WeakMap]"]=!1;var Kt="object"==typeof exports&&exports&&!exports.nodeType&&exports,Gt=Kt&&"object"==typeof module&&module&&!module.nodeType&&module,Zt=Gt&&Gt.exports===Kt&&D.process,Qt=function(){try{return Gt&&Gt.require&&Gt.require("util").types||Zt&&Zt.binding&&Zt.binding("util")}catch(t){}}(),te=Qt&&Qt.isTypedArray;const ee=te?(ne=te,function(t){return ne(t)}):function(t){return Nt(t)&&Bt(t.length)&&!!Xt[H(t)]};var ne;const re=function(t,e){if(("constructor"!==e||"function"!=typeof t[e])&&"__proto__"!=e)return t[e]};var ie=Object.prototype.hasOwnProperty;const oe=function(t,e,n){var r=t[e];ie.call(t,e)&&O(r,n)&&(void 0!==n||e in t)||mt(t,e,n)};var se=/^(?:0|[1-9]\d*)$/;const ae=function(t,e){var n=typeof t;return!!(e=null==e?9007199254740991:e)&&("number"==n||"symbol"!=n&&se.test(t))&&t>-1&&t%1==0&&t<e};var le=Object.prototype.hasOwnProperty;const ce=function(t,e){var n=It(t),r=!n&&zt(t),i=!n&&!r&&Vt(t),o=!n&&!r&&!i&&ee(t),s=n||r||i||o,a=s?function(t,e){for(var n=-1,r=Array(t);++n<t;)r[n]=e(n);return r}(t.length,String):[],l=a.length;for(var c in t)!e&&!le.call(t,c)||s&&("length"==c||i&&("offset"==c||"parent"==c)||o&&("buffer"==c||"byteLength"==c||"byteOffset"==c)||ae(c,l))||a.push(c);return a};var he=Object.prototype.hasOwnProperty;const ue=function(t){if(!V(t))return function(t){var e=[];if(null!=t)for(var n in Object(t))e.push(n);return e}(t);var e=Tt(t),n=[];for(var r in t)("constructor"!=r||!e&&he.call(t,r))&&n.push(r);return n},de=function(t){return Ft(t)?ce(t,!0):ue(t)},pe=function(t){return function(t,e,n,r){var i=!n;n||(n={});for(var o=-1,s=e.length;++o<s;){var a=e[o],l=r?r(n[a],t[a],a,n,t):void 0;void 0===l&&(l=t[a]),i?mt(n,a,l):oe(n,a,l)}return n}(t,de(t))},fe=function(t,e,n,r,i,o,s){var a,l=re(t,n),c=re(e,n),h=s.get(c);if(h)vt(t,n,h);else{var u=o?o(l,c,n+"",t,e,s):void 0,d=void 0===u;if(d){var p=It(c),f=!p&&Vt(c),g=!p&&!f&&ee(c);u=c,p||f||g?It(l)?u=l:Nt(a=l)&&Ft(a)?u=function(t,e){var n=-1,r=t.length;for(e||(e=Array(r));++n<r;)e[n]=t[n];return e}(l):f?(d=!1,u=function(t,e){if(e)return t.slice();var n=t.length,r=kt?kt(n):new t.constructor(n);return t.copy(r),r}(c,!0)):g?(d=!1,u=_t(c,!0)):u=[]:function(t){if(!Nt(t)||"[object Object]"!=H(t))return!1;var e=Mt(t);if(null===e)return!0;var n=Yt.call(e,"constructor")&&e.constructor;return"function"==typeof n&&n instanceof n&&Ut.call(n)==Jt}(c)||zt(c)?(u=l,zt(l)?u=pe(l):V(l)&&!q(l)||(u=function(t){return"function"!=typeof t.constructor||Tt(t)?{}:Ct(Mt(t))}(c))):d=!1}d&&(s.set(c,u),i(u,c,r,o,s),s.delete(c)),vt(t,n,u)}},ge=function t(e,n,r,i,o){e!==n&&yt(n,(function(s,a){if(o||(o=new ft),V(s))fe(e,n,a,r,t,i,o);else{var l=i?i(re(e,a),s,a+"",e,n,o):void 0;void 0===l&&(l=s),vt(e,a,l)}}),de)},me=function(t){return t},ve=function(t,e,n){switch(n.length){case 0:return t.call(e);case 1:return t.call(e,n[0]);case 2:return t.call(e,n[0],n[1]);case 3:return t.call(e,n[0],n[1],n[2])}return t.apply(e,n)};var ye=Math.max;const be=gt?function(t,e){return gt(t,"toString",{configurable:!0,enumerable:!1,value:(n=e,function(){return n}),writable:!0});var n}:me;var we=Date.now;const xe=function(t){var e=0,n=0;return function(){var r=we(),i=16-(r-n);if(n=r,i>0){if(++e>=800)return arguments[0]}else e=0;return t.apply(void 0,arguments)}}(be),ke=function(t,e){return xe(function(t,e,n){return e=ye(void 0===e?t.length-1:e,0),function(){for(var r=arguments,i=-1,o=ye(r.length-e,0),s=Array(o);++i<o;)s[i]=r[e+i];i=-1;for(var a=Array(e+1);++i<e;)a[i]=r[i];return a[e]=n(s),ve(t,this,a)}}(t,e,me),t+"")},Se=(_e=function(t,e,n){ge(t,e,n)},ke((function(t,e){var n=-1,r=e.length,i=r>1?e[r-1]:void 0,o=r>2?e[2]:void 0;for(i=_e.length>3&&"function"==typeof i?(r--,i):void 0,o&&function(t,e,n){if(!V(n))return!1;var r=typeof e;return!!("number"==r?Ft(n)&&ae(e,n.length):"string"==r&&e in n)&&O(n[e],t)}(e[0],e[1],o)&&(i=r<3?void 0:i,r=1),t=Object(t);++n<r;){var s=e[n];s&&_e(t,s,n)}return t})));var _e,Ee=function(t){var e=t.zDepth,n=t.radius,o=t.background,s=t.children,a=t.styles,l=void 0===a?{}:a,c=(0,i.ZP)(Se({default:{wrap:{position:"relative",display:"inline-block"},content:{position:"relative"},bg:{absolute:"0px 0px 0px 0px",boxShadow:"0 "+e+"px "+4*e+"px rgba(0,0,0,.24)",borderRadius:n,background:o}},"zDepth-0":{bg:{boxShadow:"none"}},"zDepth-1":{bg:{boxShadow:"0 2px 10px rgba(0,0,0,.12), 0 2px 5px rgba(0,0,0,.16)"}},"zDepth-2":{bg:{boxShadow:"0 6px 20px rgba(0,0,0,.19), 0 8px 17px rgba(0,0,0,.2)"}},"zDepth-3":{bg:{boxShadow:"0 17px 50px rgba(0,0,0,.19), 0 12px 15px rgba(0,0,0,.24)"}},"zDepth-4":{bg:{boxShadow:"0 25px 55px rgba(0,0,0,.21), 0 16px 28px rgba(0,0,0,.22)"}},"zDepth-5":{bg:{boxShadow:"0 40px 77px rgba(0,0,0,.22), 0 27px 24px rgba(0,0,0,.2)"}},square:{bg:{borderRadius:"0"}},circle:{bg:{borderRadius:"50%"}}},l),{"zDepth-1":1===e});return r.createElement("div",{style:c.wrap},r.createElement("div",{style:c.bg}),r.createElement("div",{style:c.content},s))};Ee.propTypes={background:C().string,zDepth:C().oneOf([0,1,2,3,4,5]),radius:C().number,styles:C().object},Ee.defaultProps={background:"#fff",zDepth:1,radius:2,styles:{}};const Ce=Ee,Oe=function(){return R.Date.now()};var Me=/\s/;var Ae=/^\s+/;const Te=function(t){return t?t.slice(0,function(t){for(var e=t.length;e--&&Me.test(t.charAt(e)););return e}(t)+1).replace(Ae,""):t},Ne=function(t){return"symbol"==typeof t||Nt(t)&&"[object Symbol]"==H(t)};var De=/^[-+]0x[0-9a-f]+$/i,je=/^0b[01]+$/i,Re=/^0o[0-7]+$/i,Pe=parseInt;const ze=function(t){if("number"==typeof t)return t;if(Ne(t))return NaN;if(V(t)){var e="function"==typeof t.valueOf?t.valueOf():t;t=V(e)?e+"":e}if("string"!=typeof t)return 0===t?t:+t;t=Te(t);var n=je.test(t);return n||Re.test(t)?Pe(t.slice(2),n?2:8):De.test(t)?NaN:+t};var Ie=Math.max,Be=Math.min;const Fe=function(t,e,n){var r,i,o,s,a,l,c=0,h=!1,u=!1,d=!0;if("function"!=typeof t)throw new TypeError("Expected a function");function p(e){var n=r,o=i;return r=i=void 0,c=e,s=t.apply(o,n)}function f(t){return c=t,a=setTimeout(m,e),h?p(t):s}function g(t){var n=t-l;return void 0===l||n>=e||n<0||u&&t-c>=o}function m(){var t=Oe();if(g(t))return v(t);a=setTimeout(m,function(t){var n=e-(t-l);return u?Be(n,o-(t-c)):n}(t))}function v(t){return a=void 0,d&&r?p(t):(r=i=void 0,s)}function y(){var t=Oe(),n=g(t);if(r=arguments,i=this,l=t,n){if(void 0===a)return f(l);if(u)return clearTimeout(a),a=setTimeout(m,e),p(l)}return void 0===a&&(a=setTimeout(m,e)),s}return e=ze(e)||0,V(n)&&(h=!!n.leading,o=(u="maxWait"in n)?Ie(ze(n.maxWait)||0,e):o,d="trailing"in n?!!n.trailing:d),y.cancel=function(){void 0!==a&&clearTimeout(a),c=0,r=l=i=a=void 0},y.flush=function(){return void 0===a?s:v(Oe())},y};var $e=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),Le=function(t){function e(t){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var n=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t));return n.handleChange=function(t){"function"==typeof n.props.onChange&&n.throttle(n.props.onChange,function(t,e,n){var r=n.getBoundingClientRect(),i=r.width,o=r.height,s="number"==typeof t.pageX?t.pageX:t.touches[0].pageX,a="number"==typeof t.pageY?t.pageY:t.touches[0].pageY,l=s-(n.getBoundingClientRect().left+window.pageXOffset),c=a-(n.getBoundingClientRect().top+window.pageYOffset);l<0?l=0:l>i&&(l=i),c<0?c=0:c>o&&(c=o);var h=l/i,u=1-c/o;return{h:e.h,s:h,v:u,a:e.a,source:"hsv"}}(t,n.props.hsl,n.container),t)},n.handleMouseDown=function(t){n.handleChange(t);var e=n.getContainerRenderWindow();e.addEventListener("mousemove",n.handleChange),e.addEventListener("mouseup",n.handleMouseUp)},n.handleMouseUp=function(){n.unbindEventListeners()},n.throttle=function(t,e,n){var r=!0,i=!0;if("function"!=typeof t)throw new TypeError("Expected a function");return V(n)&&(r="leading"in n?!!n.leading:r,i="trailing"in n?!!n.trailing:i),Fe(t,e,{leading:r,maxWait:e,trailing:i})}((function(t,e,n){t(e,n)}),50),n}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),$e(e,[{key:"componentWillUnmount",value:function(){this.throttle.cancel(),this.unbindEventListeners()}},{key:"getContainerRenderWindow",value:function(){for(var t=this.container,e=window;!e.document.contains(t)&&e.parent!==e;)e=e.parent;return e}},{key:"unbindEventListeners",value:function(){var t=this.getContainerRenderWindow();t.removeEventListener("mousemove",this.handleChange),t.removeEventListener("mouseup",this.handleMouseUp)}},{key:"render",value:function(){var t=this,e=this.props.style||{},n=e.color,o=e.white,s=e.black,a=e.pointer,l=e.circle,c=(0,i.ZP)({default:{color:{absolute:"0px 0px 0px 0px",background:"hsl("+this.props.hsl.h+",100%, 50%)",borderRadius:this.props.radius},white:{absolute:"0px 0px 0px 0px",borderRadius:this.props.radius},black:{absolute:"0px 0px 0px 0px",boxShadow:this.props.shadow,borderRadius:this.props.radius},pointer:{position:"absolute",top:-100*this.props.hsv.v+100+"%",left:100*this.props.hsv.s+"%",cursor:"default"},circle:{width:"4px",height:"4px",boxShadow:"0 0 0 1.5px #fff, inset 0 0 1px 1px rgba(0,0,0,.3),\n            0 0 1px 2px rgba(0,0,0,.4)",borderRadius:"50%",cursor:"hand",transform:"translate(-2px, -2px)"}},custom:{color:n,white:o,black:s,pointer:a,circle:l}},{custom:!!this.props.style});return r.createElement("div",{style:c.color,ref:function(e){return t.container=e},onMouseDown:this.handleMouseDown,onTouchMove:this.handleChange,onTouchStart:this.handleChange},r.createElement("style",null,"\n          .saturation-white {\n            background: -webkit-linear-gradient(to right, #fff, rgba(255,255,255,0));\n            background: linear-gradient(to right, #fff, rgba(255,255,255,0));\n          }\n          .saturation-black {\n            background: -webkit-linear-gradient(to top, #000, rgba(0,0,0,0));\n            background: linear-gradient(to top, #000, rgba(0,0,0,0));\n          }\n        "),r.createElement("div",{style:c.white,className:"saturation-white"},r.createElement("div",{style:c.black,className:"saturation-black"}),r.createElement("div",{style:c.pointer},this.props.pointer?r.createElement(this.props.pointer,this.props):r.createElement("div",{style:c.circle}))))}}]),e}(r.PureComponent||r.Component);const He=Le,Ve=function(t,e){for(var n=-1,r=null==t?0:t.length;++n<r&&!1!==e(t[n],n,t););return t},qe=Ot(Object.keys,Object);var We=Object.prototype.hasOwnProperty;const Ue=function(t){return Ft(t)?ce(t):function(t){if(!Tt(t))return qe(t);var e=[];for(var n in Object(t))We.call(t,n)&&"constructor"!=n&&e.push(n);return e}(t)},Ye=function(t,e){if(null==t)return t;if(!Ft(t))return function(t,e){return t&&yt(t,e,Ue)}(t,e);for(var n=t.length,r=-1,i=Object(t);++r<n&&!1!==e(i[r],r,i););return t},Je=function(t,e){return(It(t)?Ve:Ye)(t,"function"==typeof(n=e)?n:me);var n};var Xe=n(7621),Ke=n.n(Xe),Ge=function(t){var e=0,n=0;return Je(["r","g","b","a","h","s","l","v"],(function(r){t[r]&&(e+=1,isNaN(t[r])||(n+=1),"s"===r||"l"===r)&&/^\d+%$/.test(t[r])&&(n+=1)})),e===n&&t},Ze=function(t,e){var n=t.hex?Ke()(t.hex):Ke()(t),r=n.toHsl(),i=n.toHsv(),o=n.toRgb(),s=n.toHex();return 0===r.s&&(r.h=e||0,i.h=e||0),{hsl:r,hex:"000000"===s&&0===o.a?"transparent":"#"+s,rgb:o,hsv:i,oldHue:t.h||e||r.h,source:t.source}},Qe=function(t){if("transparent"===t)return!0;var e="#"===String(t).charAt(0)?1:0;return t.length!==4+e&&t.length<7+e&&Ke()(t).isValid()},tn=function(t){if(!t)return"#fff";var e=Ze(t);return"transparent"===e.hex?"rgba(0,0,0,0.4)":(299*e.rgb.r+587*e.rgb.g+114*e.rgb.b)/1e3>=128?"#000":"#fff"},en=function(t,e){var n=t.replace("°","");return Ke()(e+" ("+n+")")._ok},nn=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},rn=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}();const on=function(t){var e=function(e){function n(t){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,n);var e=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(n.__proto__||Object.getPrototypeOf(n)).call(this));return e.handleChange=function(t,n){if(Ge(t)){var r=Ze(t,t.h||e.state.oldHue);e.setState(r),e.props.onChangeComplete&&e.debounce(e.props.onChangeComplete,r,n),e.props.onChange&&e.props.onChange(r,n)}},e.handleSwatchHover=function(t,n){if(Ge(t)){var r=Ze(t,t.h||e.state.oldHue);e.props.onSwatchHover&&e.props.onSwatchHover(r,n)}},e.state=nn({},Ze(t.color,0)),e.debounce=Fe((function(t,e,n){t(e,n)}),100),e}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(n,e),rn(n,[{key:"render",value:function(){var e={};return this.props.onSwatchHover&&(e.onSwatchHover=this.handleSwatchHover),r.createElement(t,nn({},this.props,this.state,{onChange:this.handleChange},e))}}],[{key:"getDerivedStateFromProps",value:function(t,e){return nn({},Ze(t.color,e.oldHue))}}]),n}(r.PureComponent||r.Component);return e.propTypes=nn({},t.propTypes),e.defaultProps=nn({},t.defaultProps,{color:{h:250,s:.5,l:.2,a:1}}),e};var sn=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},an=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}();function ln(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function cn(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function hn(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}var un=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t};const dn=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"span";return function(n){function i(){var t,e,n;ln(this,i);for(var r=arguments.length,o=Array(r),s=0;s<r;s++)o[s]=arguments[s];return e=n=cn(this,(t=i.__proto__||Object.getPrototypeOf(i)).call.apply(t,[this].concat(o))),n.state={focus:!1},n.handleFocus=function(){return n.setState({focus:!0})},n.handleBlur=function(){return n.setState({focus:!1})},cn(n,e)}return hn(i,n),an(i,[{key:"render",value:function(){return r.createElement(e,{onFocus:this.handleFocus,onBlur:this.handleBlur},r.createElement(t,sn({},this.props,this.state)))}}]),i}(r.Component)}((function(t){var e=t.color,n=t.style,o=t.onClick,s=void 0===o?function(){}:o,a=t.onHover,l=t.title,c=void 0===l?e:l,u=t.children,d=t.focus,p=t.focusStyle,f=void 0===p?{}:p,g="transparent"===e,m=(0,i.ZP)({default:{swatch:un({background:e,height:"100%",width:"100%",cursor:"pointer",position:"relative",outline:"none"},n,d?f:{})}}),v={};return a&&(v.onMouseOver=function(t){return a(e,t)}),r.createElement("div",un({style:m.swatch,onClick:function(t){return s(e,t)},title:c,tabIndex:0,onKeyDown:function(t){return 13===t.keyCode&&s(e,t)}},v),u,g&&r.createElement(h,{borderRadius:m.swatch.borderRadius,boxShadow:"inset 0 0 0 1px rgba(0,0,0,0.1)"}))}));var pn=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},fn=function(t){var e=t.rgb,n=t.hsl,o=t.width,s=t.height,a=t.onChange,l=t.direction,c=t.style,h=t.renderers,u=t.pointer,d=t.className,p=void 0===d?"":d,f=(0,i.ZP)({default:{picker:{position:"relative",width:o,height:s},alpha:{radius:"2px",style:c}}});return r.createElement("div",{style:f.picker,className:"alpha-picker "+p},r.createElement(g,pn({},f.alpha,{rgb:e,hsl:n,pointer:u,renderers:h,onChange:a,direction:l})))};fn.defaultProps={width:"316px",height:"16px",direction:"horizontal",pointer:function(t){var e=t.direction,n=(0,i.ZP)({default:{picker:{width:"18px",height:"18px",borderRadius:"50%",transform:"translate(-9px, -1px)",backgroundColor:"rgb(248, 248, 248)",boxShadow:"0 1px 4px 0 rgba(0, 0, 0, 0.37)"}},vertical:{picker:{transform:"translate(-3px, -9px)"}}},{vertical:"vertical"===e});return r.createElement("div",{style:n.picker})}},on(fn);const gn=function(t,e){for(var n=-1,r=null==t?0:t.length,i=Array(r);++n<r;)i[n]=e(t[n],n,t);return i};function mn(t){var e=-1,n=null==t?0:t.length;for(this.__data__=new dt;++e<n;)this.add(t[e])}mn.prototype.add=mn.prototype.push=function(t){return this.__data__.set(t,"__lodash_hash_undefined__"),this},mn.prototype.has=function(t){return this.__data__.has(t)};const vn=mn,yn=function(t,e){for(var n=-1,r=null==t?0:t.length;++n<r;)if(e(t[n],n,t))return!0;return!1},bn=function(t,e,n,r,i,o){var s=1&n,a=t.length,l=e.length;if(a!=l&&!(s&&l>a))return!1;var c=o.get(t),h=o.get(e);if(c&&h)return c==e&&h==t;var u=-1,d=!0,p=2&n?new vn:void 0;for(o.set(t,e),o.set(e,t);++u<a;){var f=t[u],g=e[u];if(r)var m=s?r(g,f,u,e,t,o):r(f,g,u,t,e,o);if(void 0!==m){if(m)continue;d=!1;break}if(p){if(!yn(e,(function(t,e){if(s=e,!p.has(s)&&(f===t||i(f,t,n,r,o)))return p.push(e);var s}))){d=!1;break}}else if(f!==g&&!i(f,g,n,r,o)){d=!1;break}}return o.delete(t),o.delete(e),d},wn=function(t){var e=-1,n=Array(t.size);return t.forEach((function(t,r){n[++e]=[r,t]})),n},xn=function(t){var e=-1,n=Array(t.size);return t.forEach((function(t){n[++e]=t})),n};var kn=P?P.prototype:void 0,Sn=kn?kn.valueOf:void 0;var _n=Object.prototype.propertyIsEnumerable,En=Object.getOwnPropertySymbols;const Cn=En?function(t){return null==t?[]:(t=Object(t),function(t,e){for(var n=-1,r=null==t?0:t.length,i=0,o=[];++n<r;){var s=t[n];e(s,n,t)&&(o[i++]=s)}return o}(En(t),(function(e){return _n.call(t,e)})))}:function(){return[]},On=function(t){return function(t,e,n){var r=e(t);return It(t)?r:function(t,e){for(var n=-1,r=e.length,i=t.length;++n<r;)t[i+n]=e[n];return t}(r,n(t))}(t,Ue,Cn)};var Mn=Object.prototype.hasOwnProperty;const An=rt(R,"DataView"),Tn=rt(R,"Promise"),Nn=rt(R,"Set"),Dn=rt(R,"WeakMap");var jn="[object Map]",Rn="[object Promise]",Pn="[object Set]",zn="[object WeakMap]",In="[object DataView]",Bn=X(An),Fn=X(it),$n=X(Tn),Ln=X(Nn),Hn=X(Dn),Vn=H;(An&&Vn(new An(new ArrayBuffer(1)))!=In||it&&Vn(new it)!=jn||Tn&&Vn(Tn.resolve())!=Rn||Nn&&Vn(new Nn)!=Pn||Dn&&Vn(new Dn)!=zn)&&(Vn=function(t){var e=H(t),n="[object Object]"==e?t.constructor:void 0,r=n?X(n):"";if(r)switch(r){case Bn:return In;case Fn:return jn;case $n:return Rn;case Ln:return Pn;case Hn:return zn}return e});const qn=Vn;var Wn="[object Arguments]",Un="[object Array]",Yn="[object Object]",Jn=Object.prototype.hasOwnProperty;const Xn=function(t,e,n,r,i,o){var s=It(t),a=It(e),l=s?Un:qn(t),c=a?Un:qn(e),h=(l=l==Wn?Yn:l)==Yn,u=(c=c==Wn?Yn:c)==Yn,d=l==c;if(d&&Vt(t)){if(!Vt(e))return!1;s=!0,h=!1}if(d&&!h)return o||(o=new ft),s||ee(t)?bn(t,e,n,r,i,o):function(t,e,n,r,i,o,s){switch(n){case"[object DataView]":if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case"[object ArrayBuffer]":return!(t.byteLength!=e.byteLength||!o(new St(t),new St(e)));case"[object Boolean]":case"[object Date]":case"[object Number]":return O(+t,+e);case"[object Error]":return t.name==e.name&&t.message==e.message;case"[object RegExp]":case"[object String]":return t==e+"";case"[object Map]":var a=wn;case"[object Set]":var l=1&r;if(a||(a=xn),t.size!=e.size&&!l)return!1;var c=s.get(t);if(c)return c==e;r|=2,s.set(t,e);var h=bn(a(t),a(e),r,i,o,s);return s.delete(t),h;case"[object Symbol]":if(Sn)return Sn.call(t)==Sn.call(e)}return!1}(t,e,l,n,r,i,o);if(!(1&n)){var p=h&&Jn.call(t,"__wrapped__"),f=u&&Jn.call(e,"__wrapped__");if(p||f){var g=p?t.value():t,m=f?e.value():e;return o||(o=new ft),i(g,m,n,r,o)}}return!!d&&(o||(o=new ft),function(t,e,n,r,i,o){var s=1&n,a=On(t),l=a.length;if(l!=On(e).length&&!s)return!1;for(var c=l;c--;){var h=a[c];if(!(s?h in e:Mn.call(e,h)))return!1}var u=o.get(t),d=o.get(e);if(u&&d)return u==e&&d==t;var p=!0;o.set(t,e),o.set(e,t);for(var f=s;++c<l;){var g=t[h=a[c]],m=e[h];if(r)var v=s?r(m,g,h,e,t,o):r(g,m,h,t,e,o);if(!(void 0===v?g===m||i(g,m,n,r,o):v)){p=!1;break}f||(f="constructor"==h)}if(p&&!f){var y=t.constructor,b=e.constructor;y==b||!("constructor"in t)||!("constructor"in e)||"function"==typeof y&&y instanceof y&&"function"==typeof b&&b instanceof b||(p=!1)}return o.delete(t),o.delete(e),p}(t,e,n,r,i,o))},Kn=function t(e,n,r,i,o){return e===n||(null==e||null==n||!Nt(e)&&!Nt(n)?e!=e&&n!=n:Xn(e,n,r,i,t,o))},Gn=function(t){return t==t&&!V(t)},Zn=function(t,e){return function(n){return null!=n&&n[t]===e&&(void 0!==e||t in Object(n))}},Qn=function(t){var e=function(t){for(var e=Ue(t),n=e.length;n--;){var r=e[n],i=t[r];e[n]=[r,i,Gn(i)]}return e}(t);return 1==e.length&&e[0][2]?Zn(e[0][0],e[0][1]):function(n){return n===t||function(t,e,n,r){var i=n.length,o=i,s=!r;if(null==t)return!o;for(t=Object(t);i--;){var a=n[i];if(s&&a[2]?a[1]!==t[a[0]]:!(a[0]in t))return!1}for(;++i<o;){var l=(a=n[i])[0],c=t[l],h=a[1];if(s&&a[2]){if(void 0===c&&!(l in t))return!1}else{var u=new ft;if(r)var d=r(c,h,l,t,e,u);if(!(void 0===d?Kn(h,c,3,r,u):d))return!1}}return!0}(n,t,e)}};var tr=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,er=/^\w*$/;const nr=function(t,e){if(It(t))return!1;var n=typeof t;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=t&&!Ne(t))||er.test(t)||!tr.test(t)||null!=e&&t in Object(e)};function rr(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new TypeError("Expected a function");var n=function(){var r=arguments,i=e?e.apply(this,r):r[0],o=n.cache;if(o.has(i))return o.get(i);var s=t.apply(this,r);return n.cache=o.set(i,s)||o,s};return n.cache=new(rr.Cache||dt),n}rr.Cache=dt;var ir=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,or=/\\(\\)?/g;const sr=(ar=rr((function(t){var e=[];return 46===t.charCodeAt(0)&&e.push(""),t.replace(ir,(function(t,n,r,i){e.push(r?i.replace(or,"$1"):n||t)})),e}),(function(t){return 500===lr.size&&lr.clear(),t})),lr=ar.cache,ar);var ar,lr,cr=P?P.prototype:void 0,hr=cr?cr.toString:void 0;const ur=function t(e){if("string"==typeof e)return e;if(It(e))return gn(e,t)+"";if(Ne(e))return hr?hr.call(e):"";var n=e+"";return"0"==n&&1/e==-1/0?"-0":n},dr=function(t){return null==t?"":ur(t)},pr=function(t,e){return It(t)?t:nr(t,e)?[t]:sr(dr(t))},fr=function(t){if("string"==typeof t||Ne(t))return t;var e=t+"";return"0"==e&&1/t==-1/0?"-0":e},gr=function(t,e){for(var n=0,r=(e=pr(e,t)).length;null!=t&&n<r;)t=t[fr(e[n++])];return n&&n==r?t:void 0},mr=function(t,e){return null!=t&&e in Object(t)},vr=function(t,e){return null!=t&&function(t,e,n){for(var r=-1,i=(e=pr(e,t)).length,o=!1;++r<i;){var s=fr(e[r]);if(!(o=null!=t&&n(t,s)))break;t=t[s]}return o||++r!=i?o:!!(i=null==t?0:t.length)&&Bt(i)&&ae(s,i)&&(It(t)||zt(t))}(t,e,mr)},yr=function(t,e){return nr(t)&&Gn(e)?Zn(fr(t),e):function(n){var r=function(t,e,n){var r=null==t?void 0:gr(t,e);return void 0===r?n:r}(n,t);return void 0===r&&r===e?vr(n,t):Kn(e,r,3)}},br=function(t){return nr(t)?(e=fr(t),function(t){return null==t?void 0:t[e]}):function(t){return function(e){return gr(e,t)}}(t);var e},wr=function(t,e){var n=-1,r=Ft(t)?Array(t.length):[];return Ye(t,(function(t,i,o){r[++n]=e(t,i,o)})),r},xr=function(t,e){return(It(t)?gn:wr)(t,"function"==typeof(n=e)?n:null==n?me:"object"==typeof n?It(n)?yr(n[0],n[1]):Qn(n):br(n));var n},kr=function(t){var e=t.colors,n=t.onClick,o=t.onSwatchHover,s=(0,i.ZP)({default:{swatches:{marginRight:"-10px"},swatch:{width:"22px",height:"22px",float:"left",marginRight:"10px",marginBottom:"10px",borderRadius:"4px"},clear:{clear:"both"}}});return r.createElement("div",{style:s.swatches},xr(e,(function(t){return r.createElement(dn,{key:t,color:t,style:s.swatch,onClick:n,onHover:o,focusStyle:{boxShadow:"0 0 4px "+t}})})),r.createElement("div",{style:s.clear}))};var Sr=function(t){var e=t.onChange,n=t.onSwatchHover,o=t.hex,s=t.colors,a=t.width,l=t.triangle,c=t.styles,u=void 0===c?{}:c,d=t.className,p=void 0===d?"":d,f="transparent"===o,g=function(t,n){Qe(t)&&e({hex:t,source:"hex"},n)},m=(0,i.ZP)(Se({default:{card:{width:a,background:"#fff",boxShadow:"0 1px rgba(0,0,0,.1)",borderRadius:"6px",position:"relative"},head:{height:"110px",background:o,borderRadius:"6px 6px 0 0",display:"flex",alignItems:"center",justifyContent:"center",position:"relative"},body:{padding:"10px"},label:{fontSize:"18px",color:tn(o),position:"relative"},triangle:{width:"0px",height:"0px",borderStyle:"solid",borderWidth:"0 10px 10px 10px",borderColor:"transparent transparent "+o+" transparent",position:"absolute",top:"-10px",left:"50%",marginLeft:"-10px"},input:{width:"100%",fontSize:"12px",color:"#666",border:"0px",outline:"none",height:"22px",boxShadow:"inset 0 0 0 1px #ddd",borderRadius:"4px",padding:"0 7px",boxSizing:"border-box"}},"hide-triangle":{triangle:{display:"none"}}},u),{"hide-triangle":"hide"===l});return r.createElement("div",{style:m.card,className:"block-picker "+p},r.createElement("div",{style:m.triangle}),r.createElement("div",{style:m.head},f&&r.createElement(h,{borderRadius:"6px 6px 0 0"}),r.createElement("div",{style:m.label},o)),r.createElement("div",{style:m.body},r.createElement(kr,{colors:s,onClick:g,onSwatchHover:n}),r.createElement(b,{style:{input:m.input},value:o,onChange:g})))};Sr.propTypes={width:C().oneOfType([C().string,C().number]),colors:C().arrayOf(C().string),triangle:C().oneOf(["top","hide"]),styles:C().object},Sr.defaultProps={width:170,colors:["#D9E3F0","#F47373","#697689","#37D67A","#2CCCE4","#555555","#dce775","#ff8a65","#ba68c8"],triangle:"top",styles:{}},on(Sr);var _r="#ffcdd2",Er="#e57373",Cr="#f44336",Or="#d32f2f",Mr="#b71c1c",Ar="#f8bbd0",Tr="#f06292",Nr="#e91e63",Dr="#c2185b",jr="#880e4f",Rr="#e1bee7",Pr="#ba68c8",zr="#9c27b0",Ir="#7b1fa2",Br="#4a148c",Fr="#d1c4e9",$r="#9575cd",Lr="#673ab7",Hr="#512da8",Vr="#311b92",qr="#c5cae9",Wr="#7986cb",Ur="#3f51b5",Yr="#303f9f",Jr="#1a237e",Xr="#bbdefb",Kr="#64b5f6",Gr="#2196f3",Zr="#1976d2",Qr="#0d47a1",ti="#b3e5fc",ei="#4fc3f7",ni="#03a9f4",ri="#0288d1",ii="#01579b",oi="#b2ebf2",si="#4dd0e1",ai="#00bcd4",li="#0097a7",ci="#006064",hi="#b2dfdb",ui="#4db6ac",di="#009688",pi="#00796b",fi="#004d40",gi="#c8e6c9",mi="#81c784",vi="#4caf50",yi="#388e3c",bi="#dcedc8",wi="#aed581",xi="#8bc34a",ki="#689f38",Si="#33691e",_i="#f0f4c3",Ei="#dce775",Ci="#cddc39",Oi="#afb42b",Mi="#827717",Ai="#fff9c4",Ti="#fff176",Ni="#ffeb3b",Di="#fbc02d",ji="#f57f17",Ri="#ffecb3",Pi="#ffd54f",zi="#ffc107",Ii="#ffa000",Bi="#ff6f00",Fi="#ffe0b2",$i="#ffb74d",Li="#ff9800",Hi="#f57c00",Vi="#e65100",qi="#ffccbc",Wi="#ff8a65",Ui="#ff5722",Yi="#e64a19",Ji="#bf360c",Xi="#d7ccc8",Ki="#a1887f",Gi="#795548",Zi="#5d4037",Qi="#3e2723",to="#cfd8dc",eo="#90a4ae",no="#607d8b",ro="#455a64",io="#263238",oo=function(t){var e=t.color,n=t.onClick,o=t.onSwatchHover,s=t.hover,a=t.active,l=t.circleSize,c=t.circleSpacing,h=(0,i.ZP)({default:{swatch:{width:l,height:l,marginRight:c,marginBottom:c,transform:"scale(1)",transition:"100ms transform ease"},Swatch:{borderRadius:"50%",background:"transparent",boxShadow:"inset 0 0 0 "+(l/2+1)+"px "+e,transition:"100ms box-shadow ease"}},hover:{swatch:{transform:"scale(1.2)"}},active:{Swatch:{boxShadow:"inset 0 0 0 3px "+e}}},{hover:s,active:a});return r.createElement("div",{style:h.swatch},r.createElement(dn,{style:h.Swatch,color:e,onClick:n,onHover:o,focusStyle:{boxShadow:h.Swatch.boxShadow+", 0 0 5px "+e}}))};oo.defaultProps={circleSize:28,circleSpacing:14};const so=(0,i.tz)(oo);var ao=function(t){var e=t.width,n=t.onChange,o=t.onSwatchHover,s=t.colors,a=t.hex,l=t.circleSize,c=t.styles,h=void 0===c?{}:c,u=t.circleSpacing,d=t.className,p=void 0===d?"":d,f=(0,i.ZP)(Se({default:{card:{width:e,display:"flex",flexWrap:"wrap",marginRight:-u,marginBottom:-u}}},h)),g=function(t,e){return n({hex:t,source:"hex"},e)};return r.createElement("div",{style:f.card,className:"circle-picker "+p},xr(s,(function(t){return r.createElement(so,{key:t,color:t,onClick:g,onSwatchHover:o,active:a===t.toLowerCase(),circleSize:l,circleSpacing:u})})))};ao.propTypes={width:C().oneOfType([C().string,C().number]),circleSize:C().number,circleSpacing:C().number,styles:C().object},ao.defaultProps={width:252,circleSize:28,circleSpacing:14,colors:[Cr,Nr,zr,Lr,Ur,Gr,ni,ai,di,vi,xi,Ci,Ni,zi,Li,Ui,Gi,no],styles:{}},on(ao);const lo=function(t){return void 0===t};var co=n(3891),ho=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),uo=function(t){function e(t){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var n=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this));return n.toggleViews=function(){"hex"===n.state.view?n.setState({view:"rgb"}):"rgb"===n.state.view?n.setState({view:"hsl"}):"hsl"===n.state.view&&(1===n.props.hsl.a?n.setState({view:"hex"}):n.setState({view:"rgb"}))},n.handleChange=function(t,e){t.hex?Qe(t.hex)&&n.props.onChange({hex:t.hex,source:"hex"},e):t.r||t.g||t.b?n.props.onChange({r:t.r||n.props.rgb.r,g:t.g||n.props.rgb.g,b:t.b||n.props.rgb.b,source:"rgb"},e):t.a?(t.a<0?t.a=0:t.a>1&&(t.a=1),n.props.onChange({h:n.props.hsl.h,s:n.props.hsl.s,l:n.props.hsl.l,a:Math.round(100*t.a)/100,source:"rgb"},e)):(t.h||t.s||t.l)&&("string"==typeof t.s&&t.s.includes("%")&&(t.s=t.s.replace("%","")),"string"==typeof t.l&&t.l.includes("%")&&(t.l=t.l.replace("%","")),1==t.s?t.s=.01:1==t.l&&(t.l=.01),n.props.onChange({h:t.h||n.props.hsl.h,s:Number(lo(t.s)?n.props.hsl.s:t.s),l:Number(lo(t.l)?n.props.hsl.l:t.l),source:"hsl"},e))},n.showHighlight=function(t){t.currentTarget.style.background="#eee"},n.hideHighlight=function(t){t.currentTarget.style.background="transparent"},1!==t.hsl.a&&"hex"===t.view?n.state={view:"rgb"}:n.state={view:t.view},n}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),ho(e,[{key:"render",value:function(){var t=this,e=(0,i.ZP)({default:{wrap:{paddingTop:"16px",display:"flex"},fields:{flex:"1",display:"flex",marginLeft:"-6px"},field:{paddingLeft:"6px",width:"100%"},alpha:{paddingLeft:"6px",width:"100%"},toggle:{width:"32px",textAlign:"right",position:"relative"},icon:{marginRight:"-4px",marginTop:"12px",cursor:"pointer",position:"relative"},iconHighlight:{position:"absolute",width:"24px",height:"28px",background:"#eee",borderRadius:"4px",top:"10px",left:"12px",display:"none"},input:{fontSize:"11px",color:"#333",width:"100%",borderRadius:"2px",border:"none",boxShadow:"inset 0 0 0 1px #dadada",height:"21px",textAlign:"center"},label:{textTransform:"uppercase",fontSize:"11px",lineHeight:"11px",color:"#969696",textAlign:"center",display:"block",marginTop:"12px"},svg:{fill:"#333",width:"24px",height:"24px",border:"1px transparent solid",borderRadius:"5px"}},disableAlpha:{alpha:{display:"none"}}},this.props,this.state),n=void 0;return"hex"===this.state.view?n=r.createElement("div",{style:e.fields,className:"flexbox-fix"},r.createElement("div",{style:e.field},r.createElement(b,{style:{input:e.input,label:e.label},label:"hex",value:this.props.hex,onChange:this.handleChange}))):"rgb"===this.state.view?n=r.createElement("div",{style:e.fields,className:"flexbox-fix"},r.createElement("div",{style:e.field},r.createElement(b,{style:{input:e.input,label:e.label},label:"r",value:this.props.rgb.r,onChange:this.handleChange})),r.createElement("div",{style:e.field},r.createElement(b,{style:{input:e.input,label:e.label},label:"g",value:this.props.rgb.g,onChange:this.handleChange})),r.createElement("div",{style:e.field},r.createElement(b,{style:{input:e.input,label:e.label},label:"b",value:this.props.rgb.b,onChange:this.handleChange})),r.createElement("div",{style:e.alpha},r.createElement(b,{style:{input:e.input,label:e.label},label:"a",value:this.props.rgb.a,arrowOffset:.01,onChange:this.handleChange}))):"hsl"===this.state.view&&(n=r.createElement("div",{style:e.fields,className:"flexbox-fix"},r.createElement("div",{style:e.field},r.createElement(b,{style:{input:e.input,label:e.label},label:"h",value:Math.round(this.props.hsl.h),onChange:this.handleChange})),r.createElement("div",{style:e.field},r.createElement(b,{style:{input:e.input,label:e.label},label:"s",value:Math.round(100*this.props.hsl.s)+"%",onChange:this.handleChange})),r.createElement("div",{style:e.field},r.createElement(b,{style:{input:e.input,label:e.label},label:"l",value:Math.round(100*this.props.hsl.l)+"%",onChange:this.handleChange})),r.createElement("div",{style:e.alpha},r.createElement(b,{style:{input:e.input,label:e.label},label:"a",value:this.props.hsl.a,arrowOffset:.01,onChange:this.handleChange})))),r.createElement("div",{style:e.wrap,className:"flexbox-fix"},n,r.createElement("div",{style:e.toggle},r.createElement("div",{style:e.icon,onClick:this.toggleViews,ref:function(e){return t.icon=e}},r.createElement(co.Z,{style:e.svg,onMouseOver:this.showHighlight,onMouseEnter:this.showHighlight,onMouseOut:this.hideHighlight}))))}}],[{key:"getDerivedStateFromProps",value:function(t,e){return 1!==t.hsl.a&&"hex"===e.view?{view:"rgb"}:null}}]),e}(r.Component);uo.defaultProps={view:"hex"};const po=uo,fo=function(){var t=(0,i.ZP)({default:{picker:{width:"12px",height:"12px",borderRadius:"6px",transform:"translate(-6px, -1px)",backgroundColor:"rgb(248, 248, 248)",boxShadow:"0 1px 4px 0 rgba(0, 0, 0, 0.37)"}}});return r.createElement("div",{style:t.picker})},go=function(){var t=(0,i.ZP)({default:{picker:{width:"12px",height:"12px",borderRadius:"6px",boxShadow:"inset 0 0 0 1px #fff",transform:"translate(-6px, -6px)"}}});return r.createElement("div",{style:t.picker})};var mo=function(t){var e=t.width,n=t.onChange,o=t.disableAlpha,s=t.rgb,a=t.hsl,l=t.hsv,c=t.hex,u=t.renderers,d=t.styles,p=void 0===d?{}:d,f=t.className,m=void 0===f?"":f,v=t.defaultView,y=(0,i.ZP)(Se({default:{picker:{width:e,background:"#fff",borderRadius:"2px",boxShadow:"0 0 2px rgba(0,0,0,.3), 0 4px 8px rgba(0,0,0,.3)",boxSizing:"initial",fontFamily:"Menlo"},saturation:{width:"100%",paddingBottom:"55%",position:"relative",borderRadius:"2px 2px 0 0",overflow:"hidden"},Saturation:{radius:"2px 2px 0 0"},body:{padding:"16px 16px 12px"},controls:{display:"flex"},color:{width:"32px"},swatch:{marginTop:"6px",width:"16px",height:"16px",borderRadius:"8px",position:"relative",overflow:"hidden"},active:{absolute:"0px 0px 0px 0px",borderRadius:"8px",boxShadow:"inset 0 0 0 1px rgba(0,0,0,.1)",background:"rgba("+s.r+", "+s.g+", "+s.b+", "+s.a+")",zIndex:"2"},toggles:{flex:"1"},hue:{height:"10px",position:"relative",marginBottom:"8px"},Hue:{radius:"2px"},alpha:{height:"10px",position:"relative"},Alpha:{radius:"2px"}},disableAlpha:{color:{width:"22px"},alpha:{display:"none"},hue:{marginBottom:"0px"},swatch:{width:"10px",height:"10px",marginTop:"0px"}}},p),{disableAlpha:o});return r.createElement("div",{style:y.picker,className:"chrome-picker "+m},r.createElement("div",{style:y.saturation},r.createElement(He,{style:y.Saturation,hsl:a,hsv:l,pointer:go,onChange:n})),r.createElement("div",{style:y.body},r.createElement("div",{style:y.controls,className:"flexbox-fix"},r.createElement("div",{style:y.color},r.createElement("div",{style:y.swatch},r.createElement("div",{style:y.active}),r.createElement(h,{renderers:u}))),r.createElement("div",{style:y.toggles},r.createElement("div",{style:y.hue},r.createElement(_,{style:y.Hue,hsl:a,pointer:fo,onChange:n})),r.createElement("div",{style:y.alpha},r.createElement(g,{style:y.Alpha,rgb:s,hsl:a,pointer:fo,renderers:u,onChange:n})))),r.createElement(po,{rgb:s,hsl:a,hex:c,view:v,onChange:n,disableAlpha:o})))};mo.propTypes={width:C().oneOfType([C().string,C().number]),disableAlpha:C().bool,styles:C().object,defaultView:C().oneOf(["hex","rgb","hsl"])},mo.defaultProps={width:225,disableAlpha:!1,styles:{}},on(mo);const vo=function(t){var e=t.color,n=t.onClick,o=void 0===n?function(){}:n,s=t.onSwatchHover,a=t.active,l=(0,i.ZP)({default:{color:{background:e,width:"15px",height:"15px",float:"left",marginRight:"5px",marginBottom:"5px",position:"relative",cursor:"pointer"},dot:{absolute:"5px 5px 5px 5px",background:tn(e),borderRadius:"50%",opacity:"0"}},active:{dot:{opacity:"1"}},"color-#FFFFFF":{color:{boxShadow:"inset 0 0 0 1px #ddd"},dot:{background:"#000"}},transparent:{dot:{background:"#000"}}},{active:a,"color-#FFFFFF":"#FFFFFF"===e,transparent:"transparent"===e});return r.createElement(dn,{style:l.color,color:e,onClick:o,onHover:s,focusStyle:{boxShadow:"0 0 4px "+e}},r.createElement("div",{style:l.dot}))},yo=function(t){var e=t.hex,n=t.rgb,o=t.onChange,s=(0,i.ZP)({default:{fields:{display:"flex",paddingBottom:"6px",paddingRight:"5px",position:"relative"},active:{position:"absolute",top:"6px",left:"5px",height:"9px",width:"9px",background:e},HEXwrap:{flex:"6",position:"relative"},HEXinput:{width:"80%",padding:"0px",paddingLeft:"20%",border:"none",outline:"none",background:"none",fontSize:"12px",color:"#333",height:"16px"},HEXlabel:{display:"none"},RGBwrap:{flex:"3",position:"relative"},RGBinput:{width:"70%",padding:"0px",paddingLeft:"30%",border:"none",outline:"none",background:"none",fontSize:"12px",color:"#333",height:"16px"},RGBlabel:{position:"absolute",top:"3px",left:"0px",lineHeight:"16px",textTransform:"uppercase",fontSize:"12px",color:"#999"}}}),a=function(t,e){t.r||t.g||t.b?o({r:t.r||n.r,g:t.g||n.g,b:t.b||n.b,source:"rgb"},e):o({hex:t.hex,source:"hex"},e)};return r.createElement("div",{style:s.fields,className:"flexbox-fix"},r.createElement("div",{style:s.active}),r.createElement(b,{style:{wrap:s.HEXwrap,input:s.HEXinput,label:s.HEXlabel},label:"hex",value:e,onChange:a}),r.createElement(b,{style:{wrap:s.RGBwrap,input:s.RGBinput,label:s.RGBlabel},label:"r",value:n.r,onChange:a}),r.createElement(b,{style:{wrap:s.RGBwrap,input:s.RGBinput,label:s.RGBlabel},label:"g",value:n.g,onChange:a}),r.createElement(b,{style:{wrap:s.RGBwrap,input:s.RGBinput,label:s.RGBlabel},label:"b",value:n.b,onChange:a}))};var bo=function(t){var e=t.onChange,n=t.onSwatchHover,o=t.colors,s=t.hex,a=t.rgb,l=t.styles,c=void 0===l?{}:l,h=t.className,u=void 0===h?"":h,d=(0,i.ZP)(Se({default:{Compact:{background:"#f6f6f6",radius:"4px"},compact:{paddingTop:"5px",paddingLeft:"5px",boxSizing:"initial",width:"240px"},clear:{clear:"both"}}},c)),p=function(t,n){t.hex?Qe(t.hex)&&e({hex:t.hex,source:"hex"},n):e(t,n)};return r.createElement(Ce,{style:d.Compact,styles:c},r.createElement("div",{style:d.compact,className:"compact-picker "+u},r.createElement("div",null,xr(o,(function(t){return r.createElement(vo,{key:t,color:t,active:t.toLowerCase()===s,onClick:p,onSwatchHover:n})})),r.createElement("div",{style:d.clear})),r.createElement(yo,{hex:s,rgb:a,onChange:p})))};bo.propTypes={colors:C().arrayOf(C().string),styles:C().object},bo.defaultProps={colors:["#4D4D4D","#999999","#FFFFFF","#F44E3B","#FE9200","#FCDC00","#DBDF00","#A4DD00","#68CCCA","#73D8FF","#AEA1FF","#FDA1FF","#333333","#808080","#cccccc","#D33115","#E27300","#FCC400","#B0BC00","#68BC00","#16A5A5","#009CE0","#7B64FF","#FA28FF","#000000","#666666","#B3B3B3","#9F0500","#C45100","#FB9E00","#808900","#194D33","#0C797D","#0062B1","#653294","#AB149E"],styles:{}},on(bo);const wo=(0,i.tz)((function(t){var e=t.hover,n=t.color,o=t.onClick,s=t.onSwatchHover,a={position:"relative",zIndex:"2",outline:"2px solid #fff",boxShadow:"0 0 5px 2px rgba(0,0,0,0.25)"},l=(0,i.ZP)({default:{swatch:{width:"25px",height:"25px",fontSize:"0"}},hover:{swatch:a}},{hover:e});return r.createElement("div",{style:l.swatch},r.createElement(dn,{color:n,onClick:o,onHover:s,focusStyle:a}))}));var xo=function(t){var e=t.width,n=t.colors,o=t.onChange,s=t.onSwatchHover,a=t.triangle,l=t.styles,c=void 0===l?{}:l,h=t.className,u=void 0===h?"":h,d=(0,i.ZP)(Se({default:{card:{width:e,background:"#fff",border:"1px solid rgba(0,0,0,0.2)",boxShadow:"0 3px 12px rgba(0,0,0,0.15)",borderRadius:"4px",position:"relative",padding:"5px",display:"flex",flexWrap:"wrap"},triangle:{position:"absolute",border:"7px solid transparent",borderBottomColor:"#fff"},triangleShadow:{position:"absolute",border:"8px solid transparent",borderBottomColor:"rgba(0,0,0,0.15)"}},"hide-triangle":{triangle:{display:"none"},triangleShadow:{display:"none"}},"top-left-triangle":{triangle:{top:"-14px",left:"10px"},triangleShadow:{top:"-16px",left:"9px"}},"top-right-triangle":{triangle:{top:"-14px",right:"10px"},triangleShadow:{top:"-16px",right:"9px"}},"bottom-left-triangle":{triangle:{top:"35px",left:"10px",transform:"rotate(180deg)"},triangleShadow:{top:"37px",left:"9px",transform:"rotate(180deg)"}},"bottom-right-triangle":{triangle:{top:"35px",right:"10px",transform:"rotate(180deg)"},triangleShadow:{top:"37px",right:"9px",transform:"rotate(180deg)"}}},c),{"hide-triangle":"hide"===a,"top-left-triangle":"top-left"===a,"top-right-triangle":"top-right"===a,"bottom-left-triangle":"bottom-left"===a,"bottom-right-triangle":"bottom-right"===a}),p=function(t,e){return o({hex:t,source:"hex"},e)};return r.createElement("div",{style:d.card,className:"github-picker "+u},r.createElement("div",{style:d.triangleShadow}),r.createElement("div",{style:d.triangle}),xr(n,(function(t){return r.createElement(wo,{color:t,key:t,onClick:p,onSwatchHover:s})})))};xo.propTypes={width:C().oneOfType([C().string,C().number]),colors:C().arrayOf(C().string),triangle:C().oneOf(["hide","top-left","top-right","bottom-left","bottom-right"]),styles:C().object},xo.defaultProps={width:200,colors:["#B80000","#DB3E00","#FCCB00","#008B02","#006B76","#1273DE","#004DCF","#5300EB","#EB9694","#FAD0C3","#FEF3BD","#C1E1C5","#BEDADC","#C4DEF6","#BED3F3","#D4C4FB"],triangle:"top-left",styles:{}},on(xo);var ko=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},So=function(t){var e=t.width,n=t.height,o=t.onChange,s=t.hsl,a=t.direction,l=t.pointer,c=t.styles,h=void 0===c?{}:c,u=t.className,d=void 0===u?"":u,p=(0,i.ZP)(Se({default:{picker:{position:"relative",width:e,height:n},hue:{radius:"2px"}}},h));return r.createElement("div",{style:p.picker,className:"hue-picker "+d},r.createElement(_,ko({},p.hue,{hsl:s,pointer:l,onChange:function(t){return o({a:1,h:t.h,l:.5,s:1})},direction:a})))};So.propTypes={styles:C().object},So.defaultProps={width:"316px",height:"16px",direction:"horizontal",pointer:function(t){var e=t.direction,n=(0,i.ZP)({default:{picker:{width:"18px",height:"18px",borderRadius:"50%",transform:"translate(-9px, -1px)",backgroundColor:"rgb(248, 248, 248)",boxShadow:"0 1px 4px 0 rgba(0, 0, 0, 0.37)"}},vertical:{picker:{transform:"translate(-3px, -9px)"}}},{vertical:"vertical"===e});return r.createElement("div",{style:n.picker})},styles:{}},on(So),on((function(t){var e=t.onChange,n=t.hex,o=t.rgb,s=t.styles,a=void 0===s?{}:s,l=t.className,c=void 0===l?"":l,h=(0,i.ZP)(Se({default:{material:{width:"98px",height:"98px",padding:"16px",fontFamily:"Roboto"},HEXwrap:{position:"relative"},HEXinput:{width:"100%",marginTop:"12px",fontSize:"15px",color:"#333",padding:"0px",border:"0px",borderBottom:"2px solid "+n,outline:"none",height:"30px"},HEXlabel:{position:"absolute",top:"0px",left:"0px",fontSize:"11px",color:"#999999",textTransform:"capitalize"},Hex:{style:{}},RGBwrap:{position:"relative"},RGBinput:{width:"100%",marginTop:"12px",fontSize:"15px",color:"#333",padding:"0px",border:"0px",borderBottom:"1px solid #eee",outline:"none",height:"30px"},RGBlabel:{position:"absolute",top:"0px",left:"0px",fontSize:"11px",color:"#999999",textTransform:"capitalize"},split:{display:"flex",marginRight:"-10px",paddingTop:"11px"},third:{flex:"1",paddingRight:"10px"}}},a)),u=function(t,n){t.hex?Qe(t.hex)&&e({hex:t.hex,source:"hex"},n):(t.r||t.g||t.b)&&e({r:t.r||o.r,g:t.g||o.g,b:t.b||o.b,source:"rgb"},n)};return r.createElement(Ce,{styles:a},r.createElement("div",{style:h.material,className:"material-picker "+c},r.createElement(b,{style:{wrap:h.HEXwrap,input:h.HEXinput,label:h.HEXlabel},label:"hex",value:n,onChange:u}),r.createElement("div",{style:h.split,className:"flexbox-fix"},r.createElement("div",{style:h.third},r.createElement(b,{style:{wrap:h.RGBwrap,input:h.RGBinput,label:h.RGBlabel},label:"r",value:o.r,onChange:u})),r.createElement("div",{style:h.third},r.createElement(b,{style:{wrap:h.RGBwrap,input:h.RGBinput,label:h.RGBlabel},label:"g",value:o.g,onChange:u})),r.createElement("div",{style:h.third},r.createElement(b,{style:{wrap:h.RGBwrap,input:h.RGBinput,label:h.RGBlabel},label:"b",value:o.b,onChange:u})))))}));const _o=function(t){var e=t.onChange,n=t.rgb,o=t.hsv,s=t.hex,a=(0,i.ZP)({default:{fields:{paddingTop:"5px",paddingBottom:"9px",width:"80px",position:"relative"},divider:{height:"5px"},RGBwrap:{position:"relative"},RGBinput:{marginLeft:"40%",width:"40%",height:"18px",border:"1px solid #888888",boxShadow:"inset 0 1px 1px rgba(0,0,0,.1), 0 1px 0 0 #ECECEC",marginBottom:"5px",fontSize:"13px",paddingLeft:"3px",marginRight:"10px"},RGBlabel:{left:"0px",top:"0px",width:"34px",textTransform:"uppercase",fontSize:"13px",height:"18px",lineHeight:"22px",position:"absolute"},HEXwrap:{position:"relative"},HEXinput:{marginLeft:"20%",width:"80%",height:"18px",border:"1px solid #888888",boxShadow:"inset 0 1px 1px rgba(0,0,0,.1), 0 1px 0 0 #ECECEC",marginBottom:"6px",fontSize:"13px",paddingLeft:"3px"},HEXlabel:{position:"absolute",top:"0px",left:"0px",width:"14px",textTransform:"uppercase",fontSize:"13px",height:"18px",lineHeight:"22px"},fieldSymbols:{position:"absolute",top:"5px",right:"-7px",fontSize:"13px"},symbol:{height:"20px",lineHeight:"22px",paddingBottom:"7px"}}}),l=function(t,r){t["#"]?Qe(t["#"])&&e({hex:t["#"],source:"hex"},r):t.r||t.g||t.b?e({r:t.r||n.r,g:t.g||n.g,b:t.b||n.b,source:"rgb"},r):(t.h||t.s||t.v)&&e({h:t.h||o.h,s:t.s||o.s,v:t.v||o.v,source:"hsv"},r)};return r.createElement("div",{style:a.fields},r.createElement(b,{style:{wrap:a.RGBwrap,input:a.RGBinput,label:a.RGBlabel},label:"h",value:Math.round(o.h),onChange:l}),r.createElement(b,{style:{wrap:a.RGBwrap,input:a.RGBinput,label:a.RGBlabel},label:"s",value:Math.round(100*o.s),onChange:l}),r.createElement(b,{style:{wrap:a.RGBwrap,input:a.RGBinput,label:a.RGBlabel},label:"v",value:Math.round(100*o.v),onChange:l}),r.createElement("div",{style:a.divider}),r.createElement(b,{style:{wrap:a.RGBwrap,input:a.RGBinput,label:a.RGBlabel},label:"r",value:n.r,onChange:l}),r.createElement(b,{style:{wrap:a.RGBwrap,input:a.RGBinput,label:a.RGBlabel},label:"g",value:n.g,onChange:l}),r.createElement(b,{style:{wrap:a.RGBwrap,input:a.RGBinput,label:a.RGBlabel},label:"b",value:n.b,onChange:l}),r.createElement("div",{style:a.divider}),r.createElement(b,{style:{wrap:a.HEXwrap,input:a.HEXinput,label:a.HEXlabel},label:"#",value:s.replace("#",""),onChange:l}),r.createElement("div",{style:a.fieldSymbols},r.createElement("div",{style:a.symbol},"°"),r.createElement("div",{style:a.symbol},"%"),r.createElement("div",{style:a.symbol},"%")))},Eo=function(t){var e=t.hsl,n=(0,i.ZP)({default:{picker:{width:"12px",height:"12px",borderRadius:"6px",boxShadow:"inset 0 0 0 1px #fff",transform:"translate(-6px, -6px)"}},"black-outline":{picker:{boxShadow:"inset 0 0 0 1px #000"}}},{"black-outline":e.l>.5});return r.createElement("div",{style:n.picker})},Co=function(){var t=(0,i.ZP)({default:{triangle:{width:0,height:0,borderStyle:"solid",borderWidth:"4px 0 4px 6px",borderColor:"transparent transparent transparent #fff",position:"absolute",top:"1px",left:"1px"},triangleBorder:{width:0,height:0,borderStyle:"solid",borderWidth:"5px 0 5px 8px",borderColor:"transparent transparent transparent #555"},left:{Extend:"triangleBorder",transform:"translate(-13px, -4px)"},leftInside:{Extend:"triangle",transform:"translate(-8px, -5px)"},right:{Extend:"triangleBorder",transform:"translate(20px, -14px) rotate(180deg)"},rightInside:{Extend:"triangle",transform:"translate(-8px, -5px)"}}});return r.createElement("div",{style:t.pointer},r.createElement("div",{style:t.left},r.createElement("div",{style:t.leftInside})),r.createElement("div",{style:t.right},r.createElement("div",{style:t.rightInside})))},Oo=function(t){var e=t.onClick,n=t.label,o=t.children,s=t.active,a=(0,i.ZP)({default:{button:{backgroundImage:"linear-gradient(-180deg, #FFFFFF 0%, #E6E6E6 100%)",border:"1px solid #878787",borderRadius:"2px",height:"20px",boxShadow:"0 1px 0 0 #EAEAEA",fontSize:"14px",color:"#000",lineHeight:"20px",textAlign:"center",marginBottom:"10px",cursor:"pointer"}},active:{button:{boxShadow:"0 0 0 1px #878787"}}},{active:s});return r.createElement("div",{style:a.button,onClick:e},n||o)},Mo=function(t){var e=t.rgb,n=t.currentColor,o=(0,i.ZP)({default:{swatches:{border:"1px solid #B3B3B3",borderBottom:"1px solid #F0F0F0",marginBottom:"2px",marginTop:"1px"},new:{height:"34px",background:"rgb("+e.r+","+e.g+", "+e.b+")",boxShadow:"inset 1px 0 0 #000, inset -1px 0 0 #000, inset 0 1px 0 #000"},current:{height:"34px",background:n,boxShadow:"inset 1px 0 0 #000, inset -1px 0 0 #000, inset 0 -1px 0 #000"},label:{fontSize:"14px",color:"#000",textAlign:"center"}}});return r.createElement("div",null,r.createElement("div",{style:o.label},"new"),r.createElement("div",{style:o.swatches},r.createElement("div",{style:o.new}),r.createElement("div",{style:o.current})),r.createElement("div",{style:o.label},"current"))};var Ao=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),To=function(t){function e(t){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var n=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this));return n.state={currentColor:t.hex},n}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),Ao(e,[{key:"render",value:function(){var t=this.props,e=t.styles,n=void 0===e?{}:e,o=t.className,s=void 0===o?"":o,a=(0,i.ZP)(Se({default:{picker:{background:"#DCDCDC",borderRadius:"4px",boxShadow:"0 0 0 1px rgba(0,0,0,.25), 0 8px 16px rgba(0,0,0,.15)",boxSizing:"initial",width:"513px"},head:{backgroundImage:"linear-gradient(-180deg, #F0F0F0 0%, #D4D4D4 100%)",borderBottom:"1px solid #B1B1B1",boxShadow:"inset 0 1px 0 0 rgba(255,255,255,.2), inset 0 -1px 0 0 rgba(0,0,0,.02)",height:"23px",lineHeight:"24px",borderRadius:"4px 4px 0 0",fontSize:"13px",color:"#4D4D4D",textAlign:"center"},body:{padding:"15px 15px 0",display:"flex"},saturation:{width:"256px",height:"256px",position:"relative",border:"2px solid #B3B3B3",borderBottom:"2px solid #F0F0F0",overflow:"hidden"},hue:{position:"relative",height:"256px",width:"19px",marginLeft:"10px",border:"2px solid #B3B3B3",borderBottom:"2px solid #F0F0F0"},controls:{width:"180px",marginLeft:"10px"},top:{display:"flex"},previews:{width:"60px"},actions:{flex:"1",marginLeft:"20px"}}},n));return r.createElement("div",{style:a.picker,className:"photoshop-picker "+s},r.createElement("div",{style:a.head},this.props.header),r.createElement("div",{style:a.body,className:"flexbox-fix"},r.createElement("div",{style:a.saturation},r.createElement(He,{hsl:this.props.hsl,hsv:this.props.hsv,pointer:Eo,onChange:this.props.onChange})),r.createElement("div",{style:a.hue},r.createElement(_,{direction:"vertical",hsl:this.props.hsl,pointer:Co,onChange:this.props.onChange})),r.createElement("div",{style:a.controls},r.createElement("div",{style:a.top,className:"flexbox-fix"},r.createElement("div",{style:a.previews},r.createElement(Mo,{rgb:this.props.rgb,currentColor:this.state.currentColor})),r.createElement("div",{style:a.actions},r.createElement(Oo,{label:"OK",onClick:this.props.onAccept,active:!0}),r.createElement(Oo,{label:"Cancel",onClick:this.props.onCancel}),r.createElement(_o,{onChange:this.props.onChange,rgb:this.props.rgb,hsv:this.props.hsv,hex:this.props.hex}))))))}}]),e}(r.Component);To.propTypes={header:C().string,styles:C().object},To.defaultProps={header:"Color Picker",styles:{}},on(To);const No=function(t){var e=t.onChange,n=t.rgb,o=t.hsl,s=t.hex,a=t.disableAlpha,l=(0,i.ZP)({default:{fields:{display:"flex",paddingTop:"4px"},single:{flex:"1",paddingLeft:"6px"},alpha:{flex:"1",paddingLeft:"6px"},double:{flex:"2"},input:{width:"80%",padding:"4px 10% 3px",border:"none",boxShadow:"inset 0 0 0 1px #ccc",fontSize:"11px"},label:{display:"block",textAlign:"center",fontSize:"11px",color:"#222",paddingTop:"3px",paddingBottom:"4px",textTransform:"capitalize"}},disableAlpha:{alpha:{display:"none"}}},{disableAlpha:a}),c=function(t,r){t.hex?Qe(t.hex)&&e({hex:t.hex,source:"hex"},r):t.r||t.g||t.b?e({r:t.r||n.r,g:t.g||n.g,b:t.b||n.b,a:n.a,source:"rgb"},r):t.a&&(t.a<0?t.a=0:t.a>100&&(t.a=100),t.a/=100,e({h:o.h,s:o.s,l:o.l,a:t.a,source:"rgb"},r))};return r.createElement("div",{style:l.fields,className:"flexbox-fix"},r.createElement("div",{style:l.double},r.createElement(b,{style:{input:l.input,label:l.label},label:"hex",value:s.replace("#",""),onChange:c})),r.createElement("div",{style:l.single},r.createElement(b,{style:{input:l.input,label:l.label},label:"r",value:n.r,onChange:c,dragLabel:"true",dragMax:"255"})),r.createElement("div",{style:l.single},r.createElement(b,{style:{input:l.input,label:l.label},label:"g",value:n.g,onChange:c,dragLabel:"true",dragMax:"255"})),r.createElement("div",{style:l.single},r.createElement(b,{style:{input:l.input,label:l.label},label:"b",value:n.b,onChange:c,dragLabel:"true",dragMax:"255"})),r.createElement("div",{style:l.alpha},r.createElement(b,{style:{input:l.input,label:l.label},label:"a",value:Math.round(100*n.a),onChange:c,dragLabel:"true",dragMax:"100"})))};var Do=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},jo=function(t){var e=t.colors,n=t.onClick,o=void 0===n?function(){}:n,s=t.onSwatchHover,a=(0,i.ZP)({default:{colors:{margin:"0 -10px",padding:"10px 0 0 10px",borderTop:"1px solid #eee",display:"flex",flexWrap:"wrap",position:"relative"},swatchWrap:{width:"16px",height:"16px",margin:"0 10px 10px 0"},swatch:{borderRadius:"3px",boxShadow:"inset 0 0 0 1px rgba(0,0,0,.15)"}},"no-presets":{colors:{display:"none"}}},{"no-presets":!e||!e.length}),l=function(t,e){o({hex:t,source:"hex"},e)};return r.createElement("div",{style:a.colors,className:"flexbox-fix"},e.map((function(t){var e="string"==typeof t?{color:t}:t,n=""+e.color+(e.title||"");return r.createElement("div",{key:n,style:a.swatchWrap},r.createElement(dn,Do({},e,{style:a.swatch,onClick:l,onHover:s,focusStyle:{boxShadow:"inset 0 0 0 1px rgba(0,0,0,.15), 0 0 4px "+e.color}})))})))};jo.propTypes={colors:C().arrayOf(C().oneOfType([C().string,C().shape({color:C().string,title:C().string})])).isRequired};const Ro=jo;var Po=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},zo=function(t){var e=t.width,n=t.rgb,o=t.hex,s=t.hsv,a=t.hsl,l=t.onChange,c=t.onSwatchHover,u=t.disableAlpha,d=t.presetColors,p=t.renderers,f=t.styles,m=void 0===f?{}:f,v=t.className,y=void 0===v?"":v,b=(0,i.ZP)(Se({default:Po({picker:{width:e,padding:"10px 10px 0",boxSizing:"initial",background:"#fff",borderRadius:"4px",boxShadow:"0 0 0 1px rgba(0,0,0,.15), 0 8px 16px rgba(0,0,0,.15)"},saturation:{width:"100%",paddingBottom:"75%",position:"relative",overflow:"hidden"},Saturation:{radius:"3px",shadow:"inset 0 0 0 1px rgba(0,0,0,.15), inset 0 0 4px rgba(0,0,0,.25)"},controls:{display:"flex"},sliders:{padding:"4px 0",flex:"1"},color:{width:"24px",height:"24px",position:"relative",marginTop:"4px",marginLeft:"4px",borderRadius:"3px"},activeColor:{absolute:"0px 0px 0px 0px",borderRadius:"2px",background:"rgba("+n.r+","+n.g+","+n.b+","+n.a+")",boxShadow:"inset 0 0 0 1px rgba(0,0,0,.15), inset 0 0 4px rgba(0,0,0,.25)"},hue:{position:"relative",height:"10px",overflow:"hidden"},Hue:{radius:"2px",shadow:"inset 0 0 0 1px rgba(0,0,0,.15), inset 0 0 4px rgba(0,0,0,.25)"},alpha:{position:"relative",height:"10px",marginTop:"4px",overflow:"hidden"},Alpha:{radius:"2px",shadow:"inset 0 0 0 1px rgba(0,0,0,.15), inset 0 0 4px rgba(0,0,0,.25)"}},m),disableAlpha:{color:{height:"10px"},hue:{height:"10px"},alpha:{display:"none"}}},m),{disableAlpha:u});return r.createElement("div",{style:b.picker,className:"sketch-picker "+y},r.createElement("div",{style:b.saturation},r.createElement(He,{style:b.Saturation,hsl:a,hsv:s,onChange:l})),r.createElement("div",{style:b.controls,className:"flexbox-fix"},r.createElement("div",{style:b.sliders},r.createElement("div",{style:b.hue},r.createElement(_,{style:b.Hue,hsl:a,onChange:l})),r.createElement("div",{style:b.alpha},r.createElement(g,{style:b.Alpha,rgb:n,hsl:a,renderers:p,onChange:l}))),r.createElement("div",{style:b.color},r.createElement(h,null),r.createElement("div",{style:b.activeColor}))),r.createElement(No,{rgb:n,hsl:a,hex:o,onChange:l,disableAlpha:u}),r.createElement(Ro,{colors:d,onClick:l,onSwatchHover:c}))};zo.propTypes={disableAlpha:C().bool,width:C().oneOfType([C().string,C().number]),styles:C().object},zo.defaultProps={disableAlpha:!1,width:200,styles:{},presetColors:["#D0021B","#F5A623","#F8E71C","#8B572A","#7ED321","#417505","#BD10E0","#9013FE","#4A90E2","#50E3C2","#B8E986","#000000","#4A4A4A","#9B9B9B","#FFFFFF"]};const Io=on(zo),Bo=function(t){var e=t.hsl,n=t.offset,o=t.onClick,s=void 0===o?function(){}:o,a=t.active,l=t.first,c=t.last,h=(0,i.ZP)({default:{swatch:{height:"12px",background:"hsl("+e.h+", 50%, "+100*n+"%)",cursor:"pointer"}},first:{swatch:{borderRadius:"2px 0 0 2px"}},last:{swatch:{borderRadius:"0 2px 2px 0"}},active:{swatch:{transform:"scaleY(1.8)",borderRadius:"3.6px/2px"}}},{active:a,first:l,last:c});return r.createElement("div",{style:h.swatch,onClick:function(t){return s({h:e.h,s:.5,l:n,source:"hsl"},t)}})},Fo=function(t){var e=t.onClick,n=t.hsl,o=(0,i.ZP)({default:{swatches:{marginTop:"20px"},swatch:{boxSizing:"border-box",width:"20%",paddingRight:"1px",float:"left"},clear:{clear:"both"}}}),s=.1;return r.createElement("div",{style:o.swatches},r.createElement("div",{style:o.swatch},r.createElement(Bo,{hsl:n,offset:".80",active:Math.abs(n.l-.8)<s&&Math.abs(n.s-.5)<s,onClick:e,first:!0})),r.createElement("div",{style:o.swatch},r.createElement(Bo,{hsl:n,offset:".65",active:Math.abs(n.l-.65)<s&&Math.abs(n.s-.5)<s,onClick:e})),r.createElement("div",{style:o.swatch},r.createElement(Bo,{hsl:n,offset:".50",active:Math.abs(n.l-.5)<s&&Math.abs(n.s-.5)<s,onClick:e})),r.createElement("div",{style:o.swatch},r.createElement(Bo,{hsl:n,offset:".35",active:Math.abs(n.l-.35)<s&&Math.abs(n.s-.5)<s,onClick:e})),r.createElement("div",{style:o.swatch},r.createElement(Bo,{hsl:n,offset:".20",active:Math.abs(n.l-.2)<s&&Math.abs(n.s-.5)<s,onClick:e,last:!0})),r.createElement("div",{style:o.clear}))};var $o=function(t){var e=t.hsl,n=t.onChange,o=t.pointer,s=t.styles,a=void 0===s?{}:s,l=t.className,c=void 0===l?"":l,h=(0,i.ZP)(Se({default:{hue:{height:"12px",position:"relative"},Hue:{radius:"2px"}}},a));return r.createElement("div",{style:h.wrap||{},className:"slider-picker "+c},r.createElement("div",{style:h.hue},r.createElement(_,{style:h.Hue,hsl:e,pointer:o,onChange:n})),r.createElement("div",{style:h.swatches},r.createElement(Fo,{hsl:e,onClick:n})))};$o.propTypes={styles:C().object},$o.defaultProps={pointer:function(){var t=(0,i.ZP)({default:{picker:{width:"14px",height:"14px",borderRadius:"6px",transform:"translate(-7px, -1px)",backgroundColor:"rgb(248, 248, 248)",boxShadow:"0 1px 4px 0 rgba(0, 0, 0, 0.37)"}}});return r.createElement("div",{style:t.picker})},styles:{}},on($o);var Lo=n(597);const Ho=function(t){var e=t.color,n=t.onClick,o=void 0===n?function(){}:n,s=t.onSwatchHover,a=t.first,l=t.last,c=t.active,h=(0,i.ZP)({default:{color:{width:"40px",height:"24px",cursor:"pointer",background:e,marginBottom:"1px"},check:{color:tn(e),marginLeft:"8px",display:"none"}},first:{color:{overflow:"hidden",borderRadius:"2px 2px 0 0"}},last:{color:{overflow:"hidden",borderRadius:"0 0 2px 2px"}},active:{check:{display:"block"}},"color-#FFFFFF":{color:{boxShadow:"inset 0 0 0 1px #ddd"},check:{color:"#333"}},transparent:{check:{color:"#333"}}},{first:a,last:l,active:c,"color-#FFFFFF":"#FFFFFF"===e,transparent:"transparent"===e});return r.createElement(dn,{color:e,style:h.color,onClick:o,onHover:s,focusStyle:{boxShadow:"0 0 4px "+e}},r.createElement("div",{style:h.check},r.createElement(Lo.Z,null)))},Vo=function(t){var e=t.onClick,n=t.onSwatchHover,o=t.group,s=t.active,a=(0,i.ZP)({default:{group:{paddingBottom:"10px",width:"40px",float:"left",marginRight:"10px"}}});return r.createElement("div",{style:a.group},xr(o,(function(t,i){return r.createElement(Ho,{key:t,color:t,active:t.toLowerCase()===s,first:0===i,last:i===o.length-1,onClick:e,onSwatchHover:n})})))};var qo=function(t){var e=t.width,n=t.height,o=t.onChange,s=t.onSwatchHover,a=t.colors,l=t.hex,c=t.styles,h=void 0===c?{}:c,u=t.className,d=void 0===u?"":u,p=(0,i.ZP)(Se({default:{picker:{width:e,height:n},overflow:{height:n,overflowY:"scroll"},body:{padding:"16px 0 6px 16px"},clear:{clear:"both"}}},h)),f=function(t,e){return o({hex:t,source:"hex"},e)};return r.createElement("div",{style:p.picker,className:"swatches-picker "+d},r.createElement(Ce,null,r.createElement("div",{style:p.overflow},r.createElement("div",{style:p.body},xr(a,(function(t){return r.createElement(Vo,{key:t.toString(),group:t,active:l,onClick:f,onSwatchHover:s})})),r.createElement("div",{style:p.clear})))))};qo.propTypes={width:C().oneOfType([C().string,C().number]),height:C().oneOfType([C().string,C().number]),colors:C().arrayOf(C().arrayOf(C().string)),styles:C().object},qo.defaultProps={width:320,height:240,colors:[[Mr,Or,Cr,Er,_r],[jr,Dr,Nr,Tr,Ar],[Br,Ir,zr,Pr,Rr],[Vr,Hr,Lr,$r,Fr],[Jr,Yr,Ur,Wr,qr],[Qr,Zr,Gr,Kr,Xr],[ii,ri,ni,ei,ti],[ci,li,ai,si,oi],[fi,pi,di,ui,hi],["#194D33",yi,vi,mi,gi],[Si,ki,xi,wi,bi],[Mi,Oi,Ci,Ei,_i],[ji,Di,Ni,Ti,Ai],[Bi,Ii,zi,Pi,Ri],[Vi,Hi,Li,$i,Fi],[Ji,Yi,Ui,Wi,qi],[Qi,Zi,Gi,Ki,Xi],[io,ro,no,eo,to],["#000000","#525252","#969696","#D9D9D9","#FFFFFF"]],styles:{}},on(qo);var Wo=function(t){var e=t.onChange,n=t.onSwatchHover,o=t.hex,s=t.colors,a=t.width,l=t.triangle,c=t.styles,h=void 0===c?{}:c,u=t.className,d=void 0===u?"":u,p=(0,i.ZP)(Se({default:{card:{width:a,background:"#fff",border:"0 solid rgba(0,0,0,0.25)",boxShadow:"0 1px 4px rgba(0,0,0,0.25)",borderRadius:"4px",position:"relative"},body:{padding:"15px 9px 9px 15px"},label:{fontSize:"18px",color:"#fff"},triangle:{width:"0px",height:"0px",borderStyle:"solid",borderWidth:"0 9px 10px 9px",borderColor:"transparent transparent #fff transparent",position:"absolute"},triangleShadow:{width:"0px",height:"0px",borderStyle:"solid",borderWidth:"0 9px 10px 9px",borderColor:"transparent transparent rgba(0,0,0,.1) transparent",position:"absolute"},hash:{background:"#F0F0F0",height:"30px",width:"30px",borderRadius:"4px 0 0 4px",float:"left",color:"#98A1A4",display:"flex",alignItems:"center",justifyContent:"center"},input:{width:"100px",fontSize:"14px",color:"#666",border:"0px",outline:"none",height:"28px",boxShadow:"inset 0 0 0 1px #F0F0F0",boxSizing:"content-box",borderRadius:"0 4px 4px 0",float:"left",paddingLeft:"8px"},swatch:{width:"30px",height:"30px",float:"left",borderRadius:"4px",margin:"0 6px 6px 0"},clear:{clear:"both"}},"hide-triangle":{triangle:{display:"none"},triangleShadow:{display:"none"}},"top-left-triangle":{triangle:{top:"-10px",left:"12px"},triangleShadow:{top:"-11px",left:"12px"}},"top-right-triangle":{triangle:{top:"-10px",right:"12px"},triangleShadow:{top:"-11px",right:"12px"}}},h),{"hide-triangle":"hide"===l,"top-left-triangle":"top-left"===l,"top-right-triangle":"top-right"===l}),f=function(t,n){Qe(t)&&e({hex:t,source:"hex"},n)};return r.createElement("div",{style:p.card,className:"twitter-picker "+d},r.createElement("div",{style:p.triangleShadow}),r.createElement("div",{style:p.triangle}),r.createElement("div",{style:p.body},xr(s,(function(t,e){return r.createElement(dn,{key:e,color:t,hex:t,style:p.swatch,onClick:f,onHover:n,focusStyle:{boxShadow:"0 0 4px "+t}})})),r.createElement("div",{style:p.hash},"#"),r.createElement(b,{label:null,style:{input:p.input},value:o.replace("#",""),onChange:f}),r.createElement("div",{style:p.clear})))};Wo.propTypes={width:C().oneOfType([C().string,C().number]),triangle:C().oneOf(["hide","top-left","top-right"]),colors:C().arrayOf(C().string),styles:C().object},Wo.defaultProps={width:276,colors:["#FF6900","#FCB900","#7BDCB5","#00D084","#8ED1FC","#0693E3","#ABB8C3","#EB144C","#F78DA7","#9900EF"],triangle:"top-left",styles:{}},on(Wo);var Uo=function(t){var e=(0,i.ZP)({default:{picker:{width:"20px",height:"20px",borderRadius:"22px",border:"2px #fff solid",transform:"translate(-12px, -13px)",background:"hsl("+Math.round(t.hsl.h)+", "+Math.round(100*t.hsl.s)+"%, "+Math.round(100*t.hsl.l)+"%)"}}});return r.createElement("div",{style:e.picker})};Uo.propTypes={hsl:C().shape({h:C().number,s:C().number,l:C().number,a:C().number})},Uo.defaultProps={hsl:{a:1,h:249.94,l:.2,s:.5}};const Yo=Uo;var Jo=function(t){var e=(0,i.ZP)({default:{picker:{width:"20px",height:"20px",borderRadius:"22px",transform:"translate(-10px, -7px)",background:"hsl("+Math.round(t.hsl.h)+", 100%, 50%)",border:"2px white solid"}}});return r.createElement("div",{style:e.picker})};Jo.propTypes={hsl:C().shape({h:C().number,s:C().number,l:C().number,a:C().number})},Jo.defaultProps={hsl:{a:1,h:249.94,l:.2,s:.5}};const Xo=Jo,Ko=function(t){var e=t.onChange,n=t.rgb,o=t.hsl,s=t.hex,a=t.hsv,l=function(t,n){if(t.hex)Qe(t.hex)&&e({hex:t.hex,source:"hex"},n);else if(t.rgb){var r=t.rgb.split(",");en(t.rgb,"rgb")&&e({r:r[0],g:r[1],b:r[2],a:1,source:"rgb"},n)}else if(t.hsv){var i=t.hsv.split(",");en(t.hsv,"hsv")&&(i[2]=i[2].replace("%",""),i[1]=i[1].replace("%",""),i[0]=i[0].replace("°",""),1==i[1]?i[1]=.01:1==i[2]&&(i[2]=.01),e({h:Number(i[0]),s:Number(i[1]),v:Number(i[2]),source:"hsv"},n))}else if(t.hsl){var o=t.hsl.split(",");en(t.hsl,"hsl")&&(o[2]=o[2].replace("%",""),o[1]=o[1].replace("%",""),o[0]=o[0].replace("°",""),1==d[1]?d[1]=.01:1==d[2]&&(d[2]=.01),e({h:Number(o[0]),s:Number(o[1]),v:Number(o[2]),source:"hsl"},n))}},c=(0,i.ZP)({default:{wrap:{display:"flex",height:"100px",marginTop:"4px"},fields:{width:"100%"},column:{paddingTop:"10px",display:"flex",justifyContent:"space-between"},double:{padding:"0px 4.4px",boxSizing:"border-box"},input:{width:"100%",height:"38px",boxSizing:"border-box",padding:"4px 10% 3px",textAlign:"center",border:"1px solid #dadce0",fontSize:"11px",textTransform:"lowercase",borderRadius:"5px",outline:"none",fontFamily:"Roboto,Arial,sans-serif"},input2:{height:"38px",width:"100%",border:"1px solid #dadce0",boxSizing:"border-box",fontSize:"11px",textTransform:"lowercase",borderRadius:"5px",outline:"none",paddingLeft:"10px",fontFamily:"Roboto,Arial,sans-serif"},label:{textAlign:"center",fontSize:"12px",background:"#fff",position:"absolute",textTransform:"uppercase",color:"#3c4043",width:"35px",top:"-6px",left:"0",right:"0",marginLeft:"auto",marginRight:"auto",fontFamily:"Roboto,Arial,sans-serif"},label2:{left:"10px",textAlign:"center",fontSize:"12px",background:"#fff",position:"absolute",textTransform:"uppercase",color:"#3c4043",width:"32px",top:"-6px",fontFamily:"Roboto,Arial,sans-serif"},single:{flexGrow:"1",margin:"0px 4.4px"}}}),h=n.r+", "+n.g+", "+n.b,u=Math.round(o.h)+"°, "+Math.round(100*o.s)+"%, "+Math.round(100*o.l)+"%",d=Math.round(a.h)+"°, "+Math.round(100*a.s)+"%, "+Math.round(100*a.v)+"%";return r.createElement("div",{style:c.wrap,className:"flexbox-fix"},r.createElement("div",{style:c.fields},r.createElement("div",{style:c.double},r.createElement(b,{style:{input:c.input,label:c.label},label:"hex",value:s,onChange:l})),r.createElement("div",{style:c.column},r.createElement("div",{style:c.single},r.createElement(b,{style:{input:c.input2,label:c.label2},label:"rgb",value:h,onChange:l})),r.createElement("div",{style:c.single},r.createElement(b,{style:{input:c.input2,label:c.label2},label:"hsv",value:d,onChange:l})),r.createElement("div",{style:c.single},r.createElement(b,{style:{input:c.input2,label:c.label2},label:"hsl",value:u,onChange:l})))))};var Go=function(t){var e=t.width,n=t.onChange,o=t.rgb,s=t.hsl,a=t.hsv,l=t.hex,c=t.header,h=t.styles,u=void 0===h?{}:h,d=t.className,p=void 0===d?"":d,f=(0,i.ZP)(Se({default:{picker:{width:e,background:"#fff",border:"1px solid #dfe1e5",boxSizing:"initial",display:"flex",flexWrap:"wrap",borderRadius:"8px 8px 0px 0px"},head:{height:"57px",width:"100%",paddingTop:"16px",paddingBottom:"16px",paddingLeft:"16px",fontSize:"20px",boxSizing:"border-box",fontFamily:"Roboto-Regular,HelveticaNeue,Arial,sans-serif"},saturation:{width:"70%",padding:"0px",position:"relative",overflow:"hidden"},swatch:{width:"30%",height:"228px",padding:"0px",background:"rgba("+o.r+", "+o.g+", "+o.b+", 1)",position:"relative",overflow:"hidden"},body:{margin:"auto",width:"95%"},controls:{display:"flex",boxSizing:"border-box",height:"52px",paddingTop:"22px"},color:{width:"32px"},hue:{height:"8px",position:"relative",margin:"0px 16px 0px 16px",width:"100%"},Hue:{radius:"2px"}}},u));return r.createElement("div",{style:f.picker,className:"google-picker "+p},r.createElement("div",{style:f.head},c),r.createElement("div",{style:f.swatch}),r.createElement("div",{style:f.saturation},r.createElement(He,{hsl:s,hsv:a,pointer:Yo,onChange:n})),r.createElement("div",{style:f.body},r.createElement("div",{style:f.controls,className:"flexbox-fix"},r.createElement("div",{style:f.hue},r.createElement(_,{style:f.Hue,hsl:s,radius:"4px",pointer:Xo,onChange:n}))),r.createElement(Ko,{rgb:o,hsl:s,hex:l,hsv:a,onChange:n})))};Go.propTypes={width:C().oneOfType([C().string,C().number]),styles:C().object,header:C().string},Go.defaultProps={width:652,styles:{},header:"Color picker"},on(Go)},2408:(t,e)=>{"use strict";var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),i=Symbol.for("react.fragment"),o=Symbol.for("react.strict_mode"),s=Symbol.for("react.profiler"),a=Symbol.for("react.provider"),l=Symbol.for("react.context"),c=Symbol.for("react.forward_ref"),h=Symbol.for("react.suspense"),u=Symbol.for("react.memo"),d=Symbol.for("react.lazy"),p=Symbol.iterator,f={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},g=Object.assign,m={};function v(t,e,n){this.props=t,this.context=e,this.refs=m,this.updater=n||f}function y(){}function b(t,e,n){this.props=t,this.context=e,this.refs=m,this.updater=n||f}v.prototype.isReactComponent={},v.prototype.setState=function(t,e){if("object"!=typeof t&&"function"!=typeof t&&null!=t)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,t,e,"setState")},v.prototype.forceUpdate=function(t){this.updater.enqueueForceUpdate(this,t,"forceUpdate")},y.prototype=v.prototype;var w=b.prototype=new y;w.constructor=b,g(w,v.prototype),w.isPureReactComponent=!0;var x=Array.isArray,k=Object.prototype.hasOwnProperty,S={current:null},_={key:!0,ref:!0,__self:!0,__source:!0};function E(t,e,r){var i,o={},s=null,a=null;if(null!=e)for(i in void 0!==e.ref&&(a=e.ref),void 0!==e.key&&(s=""+e.key),e)k.call(e,i)&&!_.hasOwnProperty(i)&&(o[i]=e[i]);var l=arguments.length-2;if(1===l)o.children=r;else if(1<l){for(var c=Array(l),h=0;h<l;h++)c[h]=arguments[h+2];o.children=c}if(t&&t.defaultProps)for(i in l=t.defaultProps)void 0===o[i]&&(o[i]=l[i]);return{$$typeof:n,type:t,key:s,ref:a,props:o,_owner:S.current}}function C(t){return"object"==typeof t&&null!==t&&t.$$typeof===n}var O=/\/+/g;function M(t,e){return"object"==typeof t&&null!==t&&null!=t.key?function(t){var e={"=":"=0",":":"=2"};return"$"+t.replace(/[=:]/g,(function(t){return e[t]}))}(""+t.key):e.toString(36)}function A(t,e,i,o,s){var a=typeof t;"undefined"!==a&&"boolean"!==a||(t=null);var l=!1;if(null===t)l=!0;else switch(a){case"string":case"number":l=!0;break;case"object":switch(t.$$typeof){case n:case r:l=!0}}if(l)return s=s(l=t),t=""===o?"."+M(l,0):o,x(s)?(i="",null!=t&&(i=t.replace(O,"$&/")+"/"),A(s,e,i,"",(function(t){return t}))):null!=s&&(C(s)&&(s=function(t,e){return{$$typeof:n,type:t.type,key:e,ref:t.ref,props:t.props,_owner:t._owner}}(s,i+(!s.key||l&&l.key===s.key?"":(""+s.key).replace(O,"$&/")+"/")+t)),e.push(s)),1;if(l=0,o=""===o?".":o+":",x(t))for(var c=0;c<t.length;c++){var h=o+M(a=t[c],c);l+=A(a,e,i,h,s)}else if(h=function(t){return null===t||"object"!=typeof t?null:"function"==typeof(t=p&&t[p]||t["@@iterator"])?t:null}(t),"function"==typeof h)for(t=h.call(t),c=0;!(a=t.next()).done;)l+=A(a=a.value,e,i,h=o+M(a,c++),s);else if("object"===a)throw e=String(t),Error("Objects are not valid as a React child (found: "+("[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e)+"). If you meant to render a collection of children, use an array instead.");return l}function T(t,e,n){if(null==t)return t;var r=[],i=0;return A(t,r,"","",(function(t){return e.call(n,t,i++)})),r}function N(t){if(-1===t._status){var e=t._result;(e=e()).then((function(e){0!==t._status&&-1!==t._status||(t._status=1,t._result=e)}),(function(e){0!==t._status&&-1!==t._status||(t._status=2,t._result=e)})),-1===t._status&&(t._status=0,t._result=e)}if(1===t._status)return t._result.default;throw t._result}var D={current:null},j={transition:null},R={ReactCurrentDispatcher:D,ReactCurrentBatchConfig:j,ReactCurrentOwner:S};e.Children={map:T,forEach:function(t,e,n){T(t,(function(){e.apply(this,arguments)}),n)},count:function(t){var e=0;return T(t,(function(){e++})),e},toArray:function(t){return T(t,(function(t){return t}))||[]},only:function(t){if(!C(t))throw Error("React.Children.only expected to receive a single React element child.");return t}},e.Component=v,e.Fragment=i,e.Profiler=s,e.PureComponent=b,e.StrictMode=o,e.Suspense=h,e.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=R,e.cloneElement=function(t,e,r){if(null==t)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+t+".");var i=g({},t.props),o=t.key,s=t.ref,a=t._owner;if(null!=e){if(void 0!==e.ref&&(s=e.ref,a=S.current),void 0!==e.key&&(o=""+e.key),t.type&&t.type.defaultProps)var l=t.type.defaultProps;for(c in e)k.call(e,c)&&!_.hasOwnProperty(c)&&(i[c]=void 0===e[c]&&void 0!==l?l[c]:e[c])}var c=arguments.length-2;if(1===c)i.children=r;else if(1<c){l=Array(c);for(var h=0;h<c;h++)l[h]=arguments[h+2];i.children=l}return{$$typeof:n,type:t.type,key:o,ref:s,props:i,_owner:a}},e.createContext=function(t){return(t={$$typeof:l,_currentValue:t,_currentValue2:t,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:a,_context:t},t.Consumer=t},e.createElement=E,e.createFactory=function(t){var e=E.bind(null,t);return e.type=t,e},e.createRef=function(){return{current:null}},e.forwardRef=function(t){return{$$typeof:c,render:t}},e.isValidElement=C,e.lazy=function(t){return{$$typeof:d,_payload:{_status:-1,_result:t},_init:N}},e.memo=function(t,e){return{$$typeof:u,type:t,compare:void 0===e?null:e}},e.startTransition=function(t){var e=j.transition;j.transition={};try{t()}finally{j.transition=e}},e.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},e.useCallback=function(t,e){return D.current.useCallback(t,e)},e.useContext=function(t){return D.current.useContext(t)},e.useDebugValue=function(){},e.useDeferredValue=function(t){return D.current.useDeferredValue(t)},e.useEffect=function(t,e){return D.current.useEffect(t,e)},e.useId=function(){return D.current.useId()},e.useImperativeHandle=function(t,e,n){return D.current.useImperativeHandle(t,e,n)},e.useInsertionEffect=function(t,e){return D.current.useInsertionEffect(t,e)},e.useLayoutEffect=function(t,e){return D.current.useLayoutEffect(t,e)},e.useMemo=function(t,e){return D.current.useMemo(t,e)},e.useReducer=function(t,e,n){return D.current.useReducer(t,e,n)},e.useRef=function(t){return D.current.useRef(t)},e.useState=function(t){return D.current.useState(t)},e.useSyncExternalStore=function(t,e,n){return D.current.useSyncExternalStore(t,e,n)},e.useTransition=function(){return D.current.useTransition()},e.version="18.2.0"},7294:(t,e,n)=>{"use strict";t.exports=n(2408)},4754:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.autoprefix=void 0;var r,i=(r=n(2525))&&r.__esModule?r:{default:r},o=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},s={borderRadius:function(t){return{msBorderRadius:t,MozBorderRadius:t,OBorderRadius:t,WebkitBorderRadius:t,borderRadius:t}},boxShadow:function(t){return{msBoxShadow:t,MozBoxShadow:t,OBoxShadow:t,WebkitBoxShadow:t,boxShadow:t}},userSelect:function(t){return{WebkitTouchCallout:t,KhtmlUserSelect:t,MozUserSelect:t,msUserSelect:t,WebkitUserSelect:t,userSelect:t}},flex:function(t){return{WebkitBoxFlex:t,MozBoxFlex:t,WebkitFlex:t,msFlex:t,flex:t}},flexBasis:function(t){return{WebkitFlexBasis:t,flexBasis:t}},justifyContent:function(t){return{WebkitJustifyContent:t,justifyContent:t}},transition:function(t){return{msTransition:t,MozTransition:t,OTransition:t,WebkitTransition:t,transition:t}},transform:function(t){return{msTransform:t,MozTransform:t,OTransform:t,WebkitTransform:t,transform:t}},absolute:function(t){var e=t&&t.split(" ");return{position:"absolute",top:e&&e[0],right:e&&e[1],bottom:e&&e[2],left:e&&e[3]}},extend:function(t,e){return e[t]||{extend:t}}},a=e.autoprefix=function(t){var e={};return(0,i.default)(t,(function(t,n){var r={};(0,i.default)(t,(function(t,e){var n=s[e];n?r=o({},r,n(t)):r[e]=t})),e[n]=r})),e};e.default=a},6002:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.active=void 0;var r,i=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},o=(r=n(7294))&&r.__esModule?r:{default:r};function s(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function a(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function l(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}var c=e.active=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"span";return function(n){function r(){var n,l,c;s(this,r);for(var h=arguments.length,u=Array(h),d=0;d<h;d++)u[d]=arguments[d];return l=c=a(this,(n=r.__proto__||Object.getPrototypeOf(r)).call.apply(n,[this].concat(u))),c.state={active:!1},c.handleMouseDown=function(){return c.setState({active:!0})},c.handleMouseUp=function(){return c.setState({active:!1})},c.render=function(){return o.default.createElement(e,{onMouseDown:c.handleMouseDown,onMouseUp:c.handleMouseUp},o.default.createElement(t,i({},c.props,c.state)))},a(c,l)}return l(r,n),r}(o.default.Component)};e.default=c},1765:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.hover=void 0;var r,i=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},o=(r=n(7294))&&r.__esModule?r:{default:r};function s(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function a(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function l(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}var c=e.hover=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"span";return function(n){function r(){var n,l,c;s(this,r);for(var h=arguments.length,u=Array(h),d=0;d<h;d++)u[d]=arguments[d];return l=c=a(this,(n=r.__proto__||Object.getPrototypeOf(r)).call.apply(n,[this].concat(u))),c.state={hover:!1},c.handleMouseOver=function(){return c.setState({hover:!0})},c.handleMouseOut=function(){return c.setState({hover:!1})},c.render=function(){return o.default.createElement(e,{onMouseOver:c.handleMouseOver,onMouseOut:c.handleMouseOut},o.default.createElement(t,i({},c.props,c.state)))},a(c,l)}return l(r,n),r}(o.default.Component)};e.default=c},4147:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.flattenNames=void 0;var r=a(n(7037)),i=a(n(2525)),o=a(n(8630)),s=a(n(5161));function a(t){return t&&t.__esModule?t:{default:t}}var l=e.flattenNames=function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],n=[];return(0,s.default)(e,(function(e){Array.isArray(e)?t(e).map((function(t){return n.push(t)})):(0,o.default)(e)?(0,i.default)(e,(function(t,e){!0===t&&n.push(e),n.push(e+"-"+t)})):(0,r.default)(e)&&n.push(e)})),n};e.default=l},9941:(t,e,n)=>{"use strict";e.tz=void 0;var r=c(n(4147)),i=c(n(8556)),o=c(n(4754)),s=c(n(1765)),a=c(n(6002)),l=c(n(7742));function c(t){return t&&t.__esModule?t:{default:t}}s.default,e.tz=s.default,a.default,l.default;e.ZP=function(t){for(var e=arguments.length,n=Array(e>1?e-1:0),s=1;s<e;s++)n[s-1]=arguments[s];var a=(0,r.default)(n),l=(0,i.default)(t,a);return(0,o.default)(l)}},7742:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){var n={},r=function(t){var e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];n[t]=e};return 0===t&&r("first-child"),t===e-1&&r("last-child"),(0===t||t%2==0)&&r("even"),1===Math.abs(t%2)&&r("odd"),r("nth-child",t),n}},8556:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.mergeClasses=void 0;var r=s(n(2525)),i=s(n(361)),o=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t};function s(t){return t&&t.__esModule?t:{default:t}}var a=e.mergeClasses=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],n=t.default&&(0,i.default)(t.default)||{};return e.map((function(e){var i=t[e];return i&&(0,r.default)(i,(function(t,e){n[e]||(n[e]={}),n[e]=o({},n[e],i[e])})),e})),n};e.default=a},7621:(t,e,n)=>{var r;!function(i){var o=/^\s+/,s=/\s+$/,a=0,l=i.round,c=i.min,h=i.max,u=i.random;function d(t,e){if(e=e||{},(t=t||"")instanceof d)return t;if(!(this instanceof d))return new d(t,e);var n=function(t){var e,n,r,a={r:0,g:0,b:0},l=1,u=null,d=null,p=null,f=!1,g=!1;return"string"==typeof t&&(t=function(t){t=t.replace(o,"").replace(s,"").toLowerCase();var e,n=!1;if(T[t])t=T[t],n=!0;else if("transparent"==t)return{r:0,g:0,b:0,a:0,format:"name"};return(e=V.rgb.exec(t))?{r:e[1],g:e[2],b:e[3]}:(e=V.rgba.exec(t))?{r:e[1],g:e[2],b:e[3],a:e[4]}:(e=V.hsl.exec(t))?{h:e[1],s:e[2],l:e[3]}:(e=V.hsla.exec(t))?{h:e[1],s:e[2],l:e[3],a:e[4]}:(e=V.hsv.exec(t))?{h:e[1],s:e[2],v:e[3]}:(e=V.hsva.exec(t))?{h:e[1],s:e[2],v:e[3],a:e[4]}:(e=V.hex8.exec(t))?{r:P(e[1]),g:P(e[2]),b:P(e[3]),a:F(e[4]),format:n?"name":"hex8"}:(e=V.hex6.exec(t))?{r:P(e[1]),g:P(e[2]),b:P(e[3]),format:n?"name":"hex"}:(e=V.hex4.exec(t))?{r:P(e[1]+""+e[1]),g:P(e[2]+""+e[2]),b:P(e[3]+""+e[3]),a:F(e[4]+""+e[4]),format:n?"name":"hex8"}:!!(e=V.hex3.exec(t))&&{r:P(e[1]+""+e[1]),g:P(e[2]+""+e[2]),b:P(e[3]+""+e[3]),format:n?"name":"hex"}}(t)),"object"==typeof t&&(q(t.r)&&q(t.g)&&q(t.b)?(e=t.r,n=t.g,r=t.b,a={r:255*j(e,255),g:255*j(n,255),b:255*j(r,255)},f=!0,g="%"===String(t.r).substr(-1)?"prgb":"rgb"):q(t.h)&&q(t.s)&&q(t.v)?(u=I(t.s),d=I(t.v),a=function(t,e,n){t=6*j(t,360),e=j(e,100),n=j(n,100);var r=i.floor(t),o=t-r,s=n*(1-e),a=n*(1-o*e),l=n*(1-(1-o)*e),c=r%6;return{r:255*[n,a,s,s,l,n][c],g:255*[l,n,n,a,s,s][c],b:255*[s,s,l,n,n,a][c]}}(t.h,u,d),f=!0,g="hsv"):q(t.h)&&q(t.s)&&q(t.l)&&(u=I(t.s),p=I(t.l),a=function(t,e,n){var r,i,o;function s(t,e,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?t+6*(e-t)*n:n<.5?e:n<2/3?t+(e-t)*(2/3-n)*6:t}if(t=j(t,360),e=j(e,100),n=j(n,100),0===e)r=i=o=n;else{var a=n<.5?n*(1+e):n+e-n*e,l=2*n-a;r=s(l,a,t+1/3),i=s(l,a,t),o=s(l,a,t-1/3)}return{r:255*r,g:255*i,b:255*o}}(t.h,u,p),f=!0,g="hsl"),t.hasOwnProperty("a")&&(l=t.a)),l=D(l),{ok:f,format:t.format||g,r:c(255,h(a.r,0)),g:c(255,h(a.g,0)),b:c(255,h(a.b,0)),a:l}}(t);this._originalInput=t,this._r=n.r,this._g=n.g,this._b=n.b,this._a=n.a,this._roundA=l(100*this._a)/100,this._format=e.format||n.format,this._gradientType=e.gradientType,this._r<1&&(this._r=l(this._r)),this._g<1&&(this._g=l(this._g)),this._b<1&&(this._b=l(this._b)),this._ok=n.ok,this._tc_id=a++}function p(t,e,n){t=j(t,255),e=j(e,255),n=j(n,255);var r,i,o=h(t,e,n),s=c(t,e,n),a=(o+s)/2;if(o==s)r=i=0;else{var l=o-s;switch(i=a>.5?l/(2-o-s):l/(o+s),o){case t:r=(e-n)/l+(e<n?6:0);break;case e:r=(n-t)/l+2;break;case n:r=(t-e)/l+4}r/=6}return{h:r,s:i,l:a}}function f(t,e,n){t=j(t,255),e=j(e,255),n=j(n,255);var r,i,o=h(t,e,n),s=c(t,e,n),a=o,l=o-s;if(i=0===o?0:l/o,o==s)r=0;else{switch(o){case t:r=(e-n)/l+(e<n?6:0);break;case e:r=(n-t)/l+2;break;case n:r=(t-e)/l+4}r/=6}return{h:r,s:i,v:a}}function g(t,e,n,r){var i=[z(l(t).toString(16)),z(l(e).toString(16)),z(l(n).toString(16))];return r&&i[0].charAt(0)==i[0].charAt(1)&&i[1].charAt(0)==i[1].charAt(1)&&i[2].charAt(0)==i[2].charAt(1)?i[0].charAt(0)+i[1].charAt(0)+i[2].charAt(0):i.join("")}function m(t,e,n,r){return[z(B(r)),z(l(t).toString(16)),z(l(e).toString(16)),z(l(n).toString(16))].join("")}function v(t,e){e=0===e?0:e||10;var n=d(t).toHsl();return n.s-=e/100,n.s=R(n.s),d(n)}function y(t,e){e=0===e?0:e||10;var n=d(t).toHsl();return n.s+=e/100,n.s=R(n.s),d(n)}function b(t){return d(t).desaturate(100)}function w(t,e){e=0===e?0:e||10;var n=d(t).toHsl();return n.l+=e/100,n.l=R(n.l),d(n)}function x(t,e){e=0===e?0:e||10;var n=d(t).toRgb();return n.r=h(0,c(255,n.r-l(-e/100*255))),n.g=h(0,c(255,n.g-l(-e/100*255))),n.b=h(0,c(255,n.b-l(-e/100*255))),d(n)}function k(t,e){e=0===e?0:e||10;var n=d(t).toHsl();return n.l-=e/100,n.l=R(n.l),d(n)}function S(t,e){var n=d(t).toHsl(),r=(n.h+e)%360;return n.h=r<0?360+r:r,d(n)}function _(t){var e=d(t).toHsl();return e.h=(e.h+180)%360,d(e)}function E(t){var e=d(t).toHsl(),n=e.h;return[d(t),d({h:(n+120)%360,s:e.s,l:e.l}),d({h:(n+240)%360,s:e.s,l:e.l})]}function C(t){var e=d(t).toHsl(),n=e.h;return[d(t),d({h:(n+90)%360,s:e.s,l:e.l}),d({h:(n+180)%360,s:e.s,l:e.l}),d({h:(n+270)%360,s:e.s,l:e.l})]}function O(t){var e=d(t).toHsl(),n=e.h;return[d(t),d({h:(n+72)%360,s:e.s,l:e.l}),d({h:(n+216)%360,s:e.s,l:e.l})]}function M(t,e,n){e=e||6,n=n||30;var r=d(t).toHsl(),i=360/n,o=[d(t)];for(r.h=(r.h-(i*e>>1)+720)%360;--e;)r.h=(r.h+i)%360,o.push(d(r));return o}function A(t,e){e=e||6;for(var n=d(t).toHsv(),r=n.h,i=n.s,o=n.v,s=[],a=1/e;e--;)s.push(d({h:r,s:i,v:o})),o=(o+a)%1;return s}d.prototype={isDark:function(){return this.getBrightness()<128},isLight:function(){return!this.isDark()},isValid:function(){return this._ok},getOriginalInput:function(){return this._originalInput},getFormat:function(){return this._format},getAlpha:function(){return this._a},getBrightness:function(){var t=this.toRgb();return(299*t.r+587*t.g+114*t.b)/1e3},getLuminance:function(){var t,e,n,r=this.toRgb();return t=r.r/255,e=r.g/255,n=r.b/255,.2126*(t<=.03928?t/12.92:i.pow((t+.055)/1.055,2.4))+.7152*(e<=.03928?e/12.92:i.pow((e+.055)/1.055,2.4))+.0722*(n<=.03928?n/12.92:i.pow((n+.055)/1.055,2.4))},setAlpha:function(t){return this._a=D(t),this._roundA=l(100*this._a)/100,this},toHsv:function(){var t=f(this._r,this._g,this._b);return{h:360*t.h,s:t.s,v:t.v,a:this._a}},toHsvString:function(){var t=f(this._r,this._g,this._b),e=l(360*t.h),n=l(100*t.s),r=l(100*t.v);return 1==this._a?"hsv("+e+", "+n+"%, "+r+"%)":"hsva("+e+", "+n+"%, "+r+"%, "+this._roundA+")"},toHsl:function(){var t=p(this._r,this._g,this._b);return{h:360*t.h,s:t.s,l:t.l,a:this._a}},toHslString:function(){var t=p(this._r,this._g,this._b),e=l(360*t.h),n=l(100*t.s),r=l(100*t.l);return 1==this._a?"hsl("+e+", "+n+"%, "+r+"%)":"hsla("+e+", "+n+"%, "+r+"%, "+this._roundA+")"},toHex:function(t){return g(this._r,this._g,this._b,t)},toHexString:function(t){return"#"+this.toHex(t)},toHex8:function(t){return function(t,e,n,r,i){var o=[z(l(t).toString(16)),z(l(e).toString(16)),z(l(n).toString(16)),z(B(r))];return i&&o[0].charAt(0)==o[0].charAt(1)&&o[1].charAt(0)==o[1].charAt(1)&&o[2].charAt(0)==o[2].charAt(1)&&o[3].charAt(0)==o[3].charAt(1)?o[0].charAt(0)+o[1].charAt(0)+o[2].charAt(0)+o[3].charAt(0):o.join("")}(this._r,this._g,this._b,this._a,t)},toHex8String:function(t){return"#"+this.toHex8(t)},toRgb:function(){return{r:l(this._r),g:l(this._g),b:l(this._b),a:this._a}},toRgbString:function(){return 1==this._a?"rgb("+l(this._r)+", "+l(this._g)+", "+l(this._b)+")":"rgba("+l(this._r)+", "+l(this._g)+", "+l(this._b)+", "+this._roundA+")"},toPercentageRgb:function(){return{r:l(100*j(this._r,255))+"%",g:l(100*j(this._g,255))+"%",b:l(100*j(this._b,255))+"%",a:this._a}},toPercentageRgbString:function(){return 1==this._a?"rgb("+l(100*j(this._r,255))+"%, "+l(100*j(this._g,255))+"%, "+l(100*j(this._b,255))+"%)":"rgba("+l(100*j(this._r,255))+"%, "+l(100*j(this._g,255))+"%, "+l(100*j(this._b,255))+"%, "+this._roundA+")"},toName:function(){return 0===this._a?"transparent":!(this._a<1)&&(N[g(this._r,this._g,this._b,!0)]||!1)},toFilter:function(t){var e="#"+m(this._r,this._g,this._b,this._a),n=e,r=this._gradientType?"GradientType = 1, ":"";if(t){var i=d(t);n="#"+m(i._r,i._g,i._b,i._a)}return"progid:DXImageTransform.Microsoft.gradient("+r+"startColorstr="+e+",endColorstr="+n+")"},toString:function(t){var e=!!t;t=t||this._format;var n=!1,r=this._a<1&&this._a>=0;return e||!r||"hex"!==t&&"hex6"!==t&&"hex3"!==t&&"hex4"!==t&&"hex8"!==t&&"name"!==t?("rgb"===t&&(n=this.toRgbString()),"prgb"===t&&(n=this.toPercentageRgbString()),"hex"!==t&&"hex6"!==t||(n=this.toHexString()),"hex3"===t&&(n=this.toHexString(!0)),"hex4"===t&&(n=this.toHex8String(!0)),"hex8"===t&&(n=this.toHex8String()),"name"===t&&(n=this.toName()),"hsl"===t&&(n=this.toHslString()),"hsv"===t&&(n=this.toHsvString()),n||this.toHexString()):"name"===t&&0===this._a?this.toName():this.toRgbString()},clone:function(){return d(this.toString())},_applyModification:function(t,e){var n=t.apply(null,[this].concat([].slice.call(e)));return this._r=n._r,this._g=n._g,this._b=n._b,this.setAlpha(n._a),this},lighten:function(){return this._applyModification(w,arguments)},brighten:function(){return this._applyModification(x,arguments)},darken:function(){return this._applyModification(k,arguments)},desaturate:function(){return this._applyModification(v,arguments)},saturate:function(){return this._applyModification(y,arguments)},greyscale:function(){return this._applyModification(b,arguments)},spin:function(){return this._applyModification(S,arguments)},_applyCombination:function(t,e){return t.apply(null,[this].concat([].slice.call(e)))},analogous:function(){return this._applyCombination(M,arguments)},complement:function(){return this._applyCombination(_,arguments)},monochromatic:function(){return this._applyCombination(A,arguments)},splitcomplement:function(){return this._applyCombination(O,arguments)},triad:function(){return this._applyCombination(E,arguments)},tetrad:function(){return this._applyCombination(C,arguments)}},d.fromRatio=function(t,e){if("object"==typeof t){var n={};for(var r in t)t.hasOwnProperty(r)&&(n[r]="a"===r?t[r]:I(t[r]));t=n}return d(t,e)},d.equals=function(t,e){return!(!t||!e)&&d(t).toRgbString()==d(e).toRgbString()},d.random=function(){return d.fromRatio({r:u(),g:u(),b:u()})},d.mix=function(t,e,n){n=0===n?0:n||50;var r=d(t).toRgb(),i=d(e).toRgb(),o=n/100;return d({r:(i.r-r.r)*o+r.r,g:(i.g-r.g)*o+r.g,b:(i.b-r.b)*o+r.b,a:(i.a-r.a)*o+r.a})},d.readability=function(t,e){var n=d(t),r=d(e);return(i.max(n.getLuminance(),r.getLuminance())+.05)/(i.min(n.getLuminance(),r.getLuminance())+.05)},d.isReadable=function(t,e,n){var r,i,o,s,a,l=d.readability(t,e);switch(i=!1,(o=n,"AA"!==(s=((o=o||{level:"AA",size:"small"}).level||"AA").toUpperCase())&&"AAA"!==s&&(s="AA"),"small"!==(a=(o.size||"small").toLowerCase())&&"large"!==a&&(a="small"),r={level:s,size:a}).level+r.size){case"AAsmall":case"AAAlarge":i=l>=4.5;break;case"AAlarge":i=l>=3;break;case"AAAsmall":i=l>=7}return i},d.mostReadable=function(t,e,n){var r,i,o,s,a=null,l=0;i=(n=n||{}).includeFallbackColors,o=n.level,s=n.size;for(var c=0;c<e.length;c++)(r=d.readability(t,e[c]))>l&&(l=r,a=d(e[c]));return d.isReadable(t,a,{level:o,size:s})||!i?a:(n.includeFallbackColors=!1,d.mostReadable(t,["#fff","#000"],n))};var T=d.names={aliceblue:"f0f8ff",antiquewhite:"faebd7",aqua:"0ff",aquamarine:"7fffd4",azure:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"000",blanchedalmond:"ffebcd",blue:"00f",blueviolet:"8a2be2",brown:"a52a2a",burlywood:"deb887",burntsienna:"ea7e5d",cadetblue:"5f9ea0",chartreuse:"7fff00",chocolate:"d2691e",coral:"ff7f50",cornflowerblue:"6495ed",cornsilk:"fff8dc",crimson:"dc143c",cyan:"0ff",darkblue:"00008b",darkcyan:"008b8b",darkgoldenrod:"b8860b",darkgray:"a9a9a9",darkgreen:"006400",darkgrey:"a9a9a9",darkkhaki:"bdb76b",darkmagenta:"8b008b",darkolivegreen:"556b2f",darkorange:"ff8c00",darkorchid:"9932cc",darkred:"8b0000",darksalmon:"e9967a",darkseagreen:"8fbc8f",darkslateblue:"483d8b",darkslategray:"2f4f4f",darkslategrey:"2f4f4f",darkturquoise:"00ced1",darkviolet:"9400d3",deeppink:"ff1493",deepskyblue:"00bfff",dimgray:"696969",dimgrey:"696969",dodgerblue:"1e90ff",firebrick:"b22222",floralwhite:"fffaf0",forestgreen:"228b22",fuchsia:"f0f",gainsboro:"dcdcdc",ghostwhite:"f8f8ff",gold:"ffd700",goldenrod:"daa520",gray:"808080",green:"008000",greenyellow:"adff2f",grey:"808080",honeydew:"f0fff0",hotpink:"ff69b4",indianred:"cd5c5c",indigo:"4b0082",ivory:"fffff0",khaki:"f0e68c",lavender:"e6e6fa",lavenderblush:"fff0f5",lawngreen:"7cfc00",lemonchiffon:"fffacd",lightblue:"add8e6",lightcoral:"f08080",lightcyan:"e0ffff",lightgoldenrodyellow:"fafad2",lightgray:"d3d3d3",lightgreen:"90ee90",lightgrey:"d3d3d3",lightpink:"ffb6c1",lightsalmon:"ffa07a",lightseagreen:"20b2aa",lightskyblue:"87cefa",lightslategray:"789",lightslategrey:"789",lightsteelblue:"b0c4de",lightyellow:"ffffe0",lime:"0f0",limegreen:"32cd32",linen:"faf0e6",magenta:"f0f",maroon:"800000",mediumaquamarine:"66cdaa",mediumblue:"0000cd",mediumorchid:"ba55d3",mediumpurple:"9370db",mediumseagreen:"3cb371",mediumslateblue:"7b68ee",mediumspringgreen:"00fa9a",mediumturquoise:"48d1cc",mediumvioletred:"c71585",midnightblue:"191970",mintcream:"f5fffa",mistyrose:"ffe4e1",moccasin:"ffe4b5",navajowhite:"ffdead",navy:"000080",oldlace:"fdf5e6",olive:"808000",olivedrab:"6b8e23",orange:"ffa500",orangered:"ff4500",orchid:"da70d6",palegoldenrod:"eee8aa",palegreen:"98fb98",paleturquoise:"afeeee",palevioletred:"db7093",papayawhip:"ffefd5",peachpuff:"ffdab9",peru:"cd853f",pink:"ffc0cb",plum:"dda0dd",powderblue:"b0e0e6",purple:"800080",rebeccapurple:"663399",red:"f00",rosybrown:"bc8f8f",royalblue:"4169e1",saddlebrown:"8b4513",salmon:"fa8072",sandybrown:"f4a460",seagreen:"2e8b57",seashell:"fff5ee",sienna:"a0522d",silver:"c0c0c0",skyblue:"87ceeb",slateblue:"6a5acd",slategray:"708090",slategrey:"708090",snow:"fffafa",springgreen:"00ff7f",steelblue:"4682b4",tan:"d2b48c",teal:"008080",thistle:"d8bfd8",tomato:"ff6347",turquoise:"40e0d0",violet:"ee82ee",wheat:"f5deb3",white:"fff",whitesmoke:"f5f5f5",yellow:"ff0",yellowgreen:"9acd32"},N=d.hexNames=function(t){var e={};for(var n in t)t.hasOwnProperty(n)&&(e[t[n]]=n);return e}(T);function D(t){return t=parseFloat(t),(isNaN(t)||t<0||t>1)&&(t=1),t}function j(t,e){(function(t){return"string"==typeof t&&-1!=t.indexOf(".")&&1===parseFloat(t)})(t)&&(t="100%");var n=function(t){return"string"==typeof t&&-1!=t.indexOf("%")}(t);return t=c(e,h(0,parseFloat(t))),n&&(t=parseInt(t*e,10)/100),i.abs(t-e)<1e-6?1:t%e/parseFloat(e)}function R(t){return c(1,h(0,t))}function P(t){return parseInt(t,16)}function z(t){return 1==t.length?"0"+t:""+t}function I(t){return t<=1&&(t=100*t+"%"),t}function B(t){return i.round(255*parseFloat(t)).toString(16)}function F(t){return P(t)/255}var $,L,H,V=(L="[\\s|\\(]+("+($="(?:[-\\+]?\\d*\\.\\d+%?)|(?:[-\\+]?\\d+%?)")+")[,|\\s]+("+$+")[,|\\s]+("+$+")\\s*\\)?",H="[\\s|\\(]+("+$+")[,|\\s]+("+$+")[,|\\s]+("+$+")[,|\\s]+("+$+")\\s*\\)?",{CSS_UNIT:new RegExp($),rgb:new RegExp("rgb"+L),rgba:new RegExp("rgba"+H),hsl:new RegExp("hsl"+L),hsla:new RegExp("hsla"+H),hsv:new RegExp("hsv"+L),hsva:new RegExp("hsva"+H),hex3:/^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,hex6:/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,hex4:/^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,hex8:/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/});function q(t){return!!V.CSS_UNIT.exec(t)}t.exports?t.exports=d:void 0===(r=function(){return d}.call(e,n,e,t))||(t.exports=r)}(Math)},1949:function(t){t.exports=function(){"use strict";function t(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function e(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?t(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):t(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function n(t){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n(t)}function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var s={backdrop:!0,button:!0,navbar:!0,title:!0,toolbar:!0,className:"",container:"body",filter:null,fullscreen:!0,inheritedAttributes:["crossOrigin","decoding","isMap","loading","referrerPolicy","sizes","srcset","useMap"],initialViewIndex:0,inline:!1,interval:5e3,keyboard:!0,focus:!0,loading:!0,loop:!0,minWidth:200,minHeight:100,movable:!0,rotatable:!0,scalable:!0,zoomable:!0,zoomOnTouch:!0,zoomOnWheel:!0,slideOnTouch:!0,toggleOnDblclick:!0,tooltip:!0,transition:!0,zIndex:2015,zIndexInline:0,zoomRatio:.1,minZoomRatio:.01,maxZoomRatio:100,url:"src",ready:null,show:null,shown:null,hide:null,hidden:null,view:null,viewed:null,move:null,moved:null,rotate:null,rotated:null,scale:null,scaled:null,zoom:null,zoomed:null,play:null,stop:null},a="undefined"!=typeof window&&void 0!==window.document,l=a?window:{},c=!(!a||!l.document.documentElement)&&"ontouchstart"in l.document.documentElement,h=!!a&&"PointerEvent"in l,u="viewer",d="move",p="switch",f="zoom",g="".concat(u,"-active"),m="".concat(u,"-close"),v="".concat(u,"-fade"),y="".concat(u,"-fixed"),b="".concat(u,"-fullscreen"),w="".concat(u,"-fullscreen-exit"),x="".concat(u,"-hide"),k="".concat(u,"-hide-md-down"),S="".concat(u,"-hide-sm-down"),_="".concat(u,"-hide-xs-down"),E="".concat(u,"-in"),C="".concat(u,"-invisible"),O="".concat(u,"-loading"),M="".concat(u,"-move"),A="".concat(u,"-open"),T="".concat(u,"-show"),N="".concat(u,"-transition"),D="click",j="dblclick",R="dragstart",P="focusin",z="keydown",I="load",B="error",F=h?"pointerdown":c?"touchstart":"mousedown",$=h?"pointermove":c?"touchmove":"mousemove",L=h?"pointerup pointercancel":c?"touchend touchcancel":"mouseup",H="resize",V="transitionend",q="wheel",W="ready",U="show",Y="shown",J="hide",X="hidden",K="view",G="viewed",Z="move",Q="moved",tt="rotate",et="rotated",nt="scale",rt="scaled",it="zoom",ot="zoomed",st="play",at="stop",lt="".concat(u,"Action"),ct=/\s\s*/,ht=["zoom-in","zoom-out","one-to-one","reset","prev","play","next","rotate-left","rotate-right","flip-horizontal","flip-vertical"];function ut(t){return"string"==typeof t}var dt=Number.isNaN||l.isNaN;function pt(t){return"number"==typeof t&&!dt(t)}function ft(t){return void 0===t}function gt(t){return"object"===n(t)&&null!==t}var mt=Object.prototype.hasOwnProperty;function vt(t){if(!gt(t))return!1;try{var e=t.constructor,n=e.prototype;return e&&n&&mt.call(n,"isPrototypeOf")}catch(t){return!1}}function yt(t){return"function"==typeof t}function bt(t,e){if(t&&yt(e))if(Array.isArray(t)||pt(t.length)){var n,r=t.length;for(n=0;n<r&&!1!==e.call(t,t[n],n,t);n+=1);}else gt(t)&&Object.keys(t).forEach((function(n){e.call(t,t[n],n,t)}));return t}var wt=Object.assign||function(t){for(var e=arguments.length,n=new Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];return gt(t)&&n.length>0&&n.forEach((function(e){gt(e)&&Object.keys(e).forEach((function(n){t[n]=e[n]}))})),t},xt=/^(?:width|height|left|top|marginLeft|marginTop)$/;function kt(t,e){var n=t.style;bt(e,(function(t,e){xt.test(e)&&pt(t)&&(t+="px"),n[e]=t}))}function St(t){return ut(t)?t.replace(/&(?!amp;|quot;|#39;|lt;|gt;)/g,"&amp;").replace(/"/g,"&quot;").replace(/'/g,"&#39;").replace(/</g,"&lt;").replace(/>/g,"&gt;"):t}function _t(t,e){return!(!t||!e)&&(t.classList?t.classList.contains(e):t.className.indexOf(e)>-1)}function Et(t,e){if(t&&e)if(pt(t.length))bt(t,(function(t){Et(t,e)}));else if(t.classList)t.classList.add(e);else{var n=t.className.trim();n?n.indexOf(e)<0&&(t.className="".concat(n," ").concat(e)):t.className=e}}function Ct(t,e){t&&e&&(pt(t.length)?bt(t,(function(t){Ct(t,e)})):t.classList?t.classList.remove(e):t.className.indexOf(e)>=0&&(t.className=t.className.replace(e,"")))}function Ot(t,e,n){e&&(pt(t.length)?bt(t,(function(t){Ot(t,e,n)})):n?Et(t,e):Ct(t,e))}var Mt=/([a-z\d])([A-Z])/g;function At(t){return t.replace(Mt,"$1-$2").toLowerCase()}function Tt(t,e){return gt(t[e])?t[e]:t.dataset?t.dataset[e]:t.getAttribute("data-".concat(At(e)))}function Nt(t,e,n){gt(n)?t[e]=n:t.dataset?t.dataset[e]=n:t.setAttribute("data-".concat(At(e)),n)}var Dt=function(){var t=!1;if(a){var e=!1,n=function(){},r=Object.defineProperty({},"once",{get:function(){return t=!0,e},set:function(t){e=t}});l.addEventListener("test",n,r),l.removeEventListener("test",n,r)}return t}();function jt(t,e,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},i=n;e.trim().split(ct).forEach((function(e){if(!Dt){var o=t.listeners;o&&o[e]&&o[e][n]&&(i=o[e][n],delete o[e][n],0===Object.keys(o[e]).length&&delete o[e],0===Object.keys(o).length&&delete t.listeners)}t.removeEventListener(e,i,r)}))}function Rt(t,e,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},i=n;e.trim().split(ct).forEach((function(e){if(r.once&&!Dt){var o=t.listeners,s=void 0===o?{}:o;i=function(){delete s[e][n],t.removeEventListener(e,i,r);for(var o=arguments.length,a=new Array(o),l=0;l<o;l++)a[l]=arguments[l];n.apply(t,a)},s[e]||(s[e]={}),s[e][n]&&t.removeEventListener(e,s[e][n],r),s[e][n]=i,t.listeners=s}t.addEventListener(e,i,r)}))}function Pt(t,n,r,i){var o;return yt(Event)&&yt(CustomEvent)?o=new CustomEvent(n,e({bubbles:!0,cancelable:!0,detail:r},i)):(o=document.createEvent("CustomEvent")).initCustomEvent(n,!0,!0,r),t.dispatchEvent(o)}function zt(t){var e=t.getBoundingClientRect();return{left:e.left+(window.pageXOffset-document.documentElement.clientLeft),top:e.top+(window.pageYOffset-document.documentElement.clientTop)}}function It(t){var e=t.rotate,n=t.scaleX,r=t.scaleY,i=t.translateX,o=t.translateY,s=[];pt(i)&&0!==i&&s.push("translateX(".concat(i,"px)")),pt(o)&&0!==o&&s.push("translateY(".concat(o,"px)")),pt(e)&&0!==e&&s.push("rotate(".concat(e,"deg)")),pt(n)&&1!==n&&s.push("scaleX(".concat(n,")")),pt(r)&&1!==r&&s.push("scaleY(".concat(r,")"));var a=s.length?s.join(" "):"none";return{WebkitTransform:a,msTransform:a,transform:a}}var Bt=l.navigator&&/(Macintosh|iPhone|iPod|iPad).*AppleWebKit/i.test(l.navigator.userAgent);function Ft(t,e,n){var r=document.createElement("img");if(t.naturalWidth&&!Bt)return n(t.naturalWidth,t.naturalHeight),r;var i=document.body||document.documentElement;return r.onload=function(){n(r.width,r.height),Bt||i.removeChild(r)},bt(e.inheritedAttributes,(function(e){var n=t.getAttribute(e);null!==n&&r.setAttribute(e,n)})),r.src=t.src,Bt||(r.style.cssText="left:0;max-height:none!important;max-width:none!important;min-height:0!important;min-width:0!important;opacity:0;position:absolute;top:0;z-index:-1;",i.appendChild(r)),r}function $t(t){switch(t){case 2:return _;case 3:return S;case 4:return k;default:return""}}function Lt(t,n){var r=t.pageX,i=t.pageY,o={endX:r,endY:i};return n?o:e({timeStamp:Date.now(),startX:r,startY:i},o)}function Ht(t){var e=0,n=0,r=0;return bt(t,(function(t){var i=t.startX,o=t.startY;e+=i,n+=o,r+=1})),{pageX:e/=r,pageY:n/=r}}var Vt,qt={render:function(){this.initContainer(),this.initViewer(),this.initList(),this.renderViewer()},initBody:function(){var t=this.element.ownerDocument,e=t.body||t.documentElement;this.body=e,this.scrollbarWidth=window.innerWidth-t.documentElement.clientWidth,this.initialBodyPaddingRight=e.style.paddingRight,this.initialBodyComputedPaddingRight=window.getComputedStyle(e).paddingRight},initContainer:function(){this.containerData={width:window.innerWidth,height:window.innerHeight}},initViewer:function(){var t,e=this.options,n=this.parent;e.inline&&(t={width:Math.max(n.offsetWidth,e.minWidth),height:Math.max(n.offsetHeight,e.minHeight)},this.parentData=t),!this.fulled&&t||(t=this.containerData),this.viewerData=wt({},t)},renderViewer:function(){this.options.inline&&!this.fulled&&kt(this.viewer,this.viewerData)},initList:function(){var t=this,e=this.element,n=this.options,r=this.list,i=[];r.innerHTML="",bt(this.images,(function(e,o){var s=e.src,a=e.alt||function(t){return ut(t)?decodeURIComponent(t.replace(/^.*\//,"").replace(/[?&#].*$/,"")):""}(s),l=t.getImageURL(e);if(s||l){var c=document.createElement("li"),h=document.createElement("img");bt(n.inheritedAttributes,(function(t){var n=e.getAttribute(t);null!==n&&h.setAttribute(t,n)})),h.src=s||l,h.alt=a,h.setAttribute("data-original-url",l||s),c.setAttribute("data-index",o),c.setAttribute("data-viewer-action","view"),c.setAttribute("role","button"),n.keyboard&&c.setAttribute("tabindex",0),c.appendChild(h),r.appendChild(c),i.push(c)}})),this.items=i,bt(i,(function(e){var r,i,o=e.firstElementChild;Nt(o,"filled",!0),n.loading&&Et(e,O),Rt(o,I,r=function(r){jt(o,B,i),n.loading&&Ct(e,O),t.loadImage(r)},{once:!0}),Rt(o,B,i=function(){jt(o,I,r),n.loading&&Ct(e,O)},{once:!0})})),n.transition&&Rt(e,G,(function(){Et(r,N)}),{once:!0})},renderList:function(){var t=this.index,e=this.items[t];if(e){var n=e.nextElementSibling,r=parseInt(window.getComputedStyle(n||e).marginLeft,10),i=e.offsetWidth,o=i+r;kt(this.list,wt({width:o*this.length-r},It({translateX:(this.viewerData.width-i)/2-o*t})))}},resetList:function(){var t=this.list;t.innerHTML="",Ct(t,N),kt(t,It({translateX:0}))},initImage:function(t){var e,n=this,r=this.options,i=this.image,o=this.viewerData,s=this.footer.offsetHeight,a=o.width,l=Math.max(o.height-s,s),c=this.imageData||{};this.imageInitializing={abort:function(){e.onload=null}},e=Ft(i,r,(function(e,i){var o=e/i,s=a,h=l;n.imageInitializing=!1,l*o>a?h=a/o:s=l*o,s=Math.min(.9*s,e),h=Math.min(.9*h,i);var u=(a-s)/2,d=(l-h)/2,p={left:u,top:d,x:u,y:d,width:s,height:h,oldRatio:1,ratio:s/e,aspectRatio:o,naturalWidth:e,naturalHeight:i},f=wt({},p);r.rotatable&&(p.rotate=c.rotate||0,f.rotate=0),r.scalable&&(p.scaleX=c.scaleX||1,p.scaleY=c.scaleY||1,f.scaleX=1,f.scaleY=1),n.imageData=p,n.initialImageData=f,t&&t()}))},renderImage:function(t){var e=this,n=this.image,r=this.imageData;if(kt(n,wt({width:r.width,height:r.height,marginLeft:r.x,marginTop:r.y},It(r))),t)if((this.viewing||this.moving||this.rotating||this.scaling||this.zooming)&&this.options.transition&&_t(n,N)){var i=function(){e.imageRendering=!1,t()};this.imageRendering={abort:function(){jt(n,V,i)}},Rt(n,V,i,{once:!0})}else t()},resetImage:function(){if(this.viewing||this.viewed){var t=this.image;this.viewing&&this.viewing.abort(),t.parentNode.removeChild(t),this.image=null}}},Wt={bind:function(){var t=this.options,e=this.viewer,n=this.canvas,r=this.element.ownerDocument;Rt(e,D,this.onClick=this.click.bind(this)),Rt(e,R,this.onDragStart=this.dragstart.bind(this)),Rt(n,F,this.onPointerDown=this.pointerdown.bind(this)),Rt(r,$,this.onPointerMove=this.pointermove.bind(this)),Rt(r,L,this.onPointerUp=this.pointerup.bind(this)),Rt(r,z,this.onKeyDown=this.keydown.bind(this)),Rt(window,H,this.onResize=this.resize.bind(this)),t.zoomable&&t.zoomOnWheel&&Rt(e,q,this.onWheel=this.wheel.bind(this),{passive:!1,capture:!0}),t.toggleOnDblclick&&Rt(n,j,this.onDblclick=this.dblclick.bind(this))},unbind:function(){var t=this.options,e=this.viewer,n=this.canvas,r=this.element.ownerDocument;jt(e,D,this.onClick),jt(e,R,this.onDragStart),jt(n,F,this.onPointerDown),jt(r,$,this.onPointerMove),jt(r,L,this.onPointerUp),jt(r,z,this.onKeyDown),jt(window,H,this.onResize),t.zoomable&&t.zoomOnWheel&&jt(e,q,this.onWheel,{passive:!1,capture:!0}),t.toggleOnDblclick&&jt(n,j,this.onDblclick)}},Ut={click:function(t){var e=this.options,n=this.imageData,r=t.target,i=Tt(r,lt);switch(i||"img"!==r.localName||"li"!==r.parentElement.localName||(i=Tt(r=r.parentElement,lt)),c&&t.isTrusted&&r===this.canvas&&clearTimeout(this.clickCanvasTimeout),i){case"mix":this.played?this.stop():e.inline?this.fulled?this.exit():this.full():this.hide();break;case"hide":this.hide();break;case"view":this.view(Tt(r,"index"));break;case"zoom-in":this.zoom(.1,!0);break;case"zoom-out":this.zoom(-.1,!0);break;case"one-to-one":this.toggle();break;case"reset":this.reset();break;case"prev":this.prev(e.loop);break;case"play":this.play(e.fullscreen);break;case"next":this.next(e.loop);break;case"rotate-left":this.rotate(-90);break;case"rotate-right":this.rotate(90);break;case"flip-horizontal":this.scaleX(-n.scaleX||-1);break;case"flip-vertical":this.scaleY(-n.scaleY||-1);break;default:this.played&&this.stop()}},dblclick:function(t){t.preventDefault(),this.viewed&&t.target===this.image&&(c&&t.isTrusted&&clearTimeout(this.doubleClickImageTimeout),this.toggle(t.isTrusted?t:t.detail&&t.detail.originalEvent))},load:function(){var t=this;this.timeout&&(clearTimeout(this.timeout),this.timeout=!1);var e=this.element,n=this.options,r=this.image,i=this.index,o=this.viewerData;Ct(r,C),n.loading&&Ct(this.canvas,O),r.style.cssText="height:0;"+"margin-left:".concat(o.width/2,"px;")+"margin-top:".concat(o.height/2,"px;")+"max-width:none!important;position:relative;width:0;",this.initImage((function(){Ot(r,M,n.movable),Ot(r,N,n.transition),t.renderImage((function(){t.viewed=!0,t.viewing=!1,yt(n.viewed)&&Rt(e,G,n.viewed,{once:!0}),Pt(e,G,{originalImage:t.images[i],index:i,image:r},{cancelable:!1})}))}))},loadImage:function(t){var e=t.target,n=e.parentNode,r=n.offsetWidth||30,i=n.offsetHeight||50,o=!!Tt(e,"filled");Ft(e,this.options,(function(t,n){var s=t/n,a=r,l=i;i*s>r?o?a=i*s:l=r/s:o?l=r/s:a=i*s,kt(e,wt({width:a,height:l},It({translateX:(r-a)/2,translateY:(i-l)/2})))}))},keydown:function(t){var e=this.options;if(e.keyboard){var n=t.keyCode||t.which||t.charCode;if(13===n&&this.viewer.contains(t.target)&&this.click(t),this.fulled)switch(n){case 27:this.played?this.stop():e.inline?this.fulled&&this.exit():this.hide();break;case 32:this.played&&this.stop();break;case 37:this.prev(e.loop);break;case 38:t.preventDefault(),this.zoom(e.zoomRatio,!0);break;case 39:this.next(e.loop);break;case 40:t.preventDefault(),this.zoom(-e.zoomRatio,!0);break;case 48:case 49:t.ctrlKey&&(t.preventDefault(),this.toggle())}}},dragstart:function(t){"img"===t.target.localName&&t.preventDefault()},pointerdown:function(t){var e=this.options,n=this.pointers,r=t.buttons,i=t.button;if(!(!this.viewed||this.showing||this.viewing||this.hiding||("mousedown"===t.type||"pointerdown"===t.type&&"mouse"===t.pointerType)&&(pt(r)&&1!==r||pt(i)&&0!==i||t.ctrlKey))){t.preventDefault(),t.changedTouches?bt(t.changedTouches,(function(t){n[t.identifier]=Lt(t)})):n[t.pointerId||0]=Lt(t);var o=!!e.movable&&d;e.zoomOnTouch&&e.zoomable&&Object.keys(n).length>1?o=f:e.slideOnTouch&&("touch"===t.pointerType||"touchstart"===t.type)&&this.isSwitchable()&&(o=p),!e.transition||o!==d&&o!==f||Ct(this.image,N),this.action=o}},pointermove:function(t){var e=this.pointers,n=this.action;this.viewed&&n&&(t.preventDefault(),t.changedTouches?bt(t.changedTouches,(function(t){wt(e[t.identifier]||{},Lt(t,!0))})):wt(e[t.pointerId||0]||{},Lt(t,!0)),this.change(t))},pointerup:function(t){var e,n=this,r=this.options,i=this.action,o=this.pointers;t.changedTouches?bt(t.changedTouches,(function(t){e=o[t.identifier],delete o[t.identifier]})):(e=o[t.pointerId||0],delete o[t.pointerId||0]),i&&(t.preventDefault(),!r.transition||i!==d&&i!==f||Et(this.image,N),this.action=!1,c&&i!==f&&e&&Date.now()-e.timeStamp<500&&(clearTimeout(this.clickCanvasTimeout),clearTimeout(this.doubleClickImageTimeout),r.toggleOnDblclick&&this.viewed&&t.target===this.image?this.imageClicked?(this.imageClicked=!1,this.doubleClickImageTimeout=setTimeout((function(){Pt(n.image,j,{originalEvent:t})}),50)):(this.imageClicked=!0,this.doubleClickImageTimeout=setTimeout((function(){n.imageClicked=!1}),500)):(this.imageClicked=!1,r.backdrop&&"static"!==r.backdrop&&t.target===this.canvas&&(this.clickCanvasTimeout=setTimeout((function(){Pt(n.canvas,D,{originalEvent:t})}),50)))))},resize:function(){var t=this;if(this.isShown&&!this.hiding&&(this.fulled&&(this.close(),this.initBody(),this.open()),this.initContainer(),this.initViewer(),this.renderViewer(),this.renderList(),this.viewed&&this.initImage((function(){t.renderImage()})),this.played)){if(this.options.fullscreen&&this.fulled&&!(document.fullscreenElement||document.webkitFullscreenElement||document.mozFullScreenElement||document.msFullscreenElement))return void this.stop();bt(this.player.getElementsByTagName("img"),(function(e){Rt(e,I,t.loadImage.bind(t),{once:!0}),Pt(e,I)}))}},wheel:function(t){var e=this;if(this.viewed&&(t.preventDefault(),!this.wheeling)){this.wheeling=!0,setTimeout((function(){e.wheeling=!1}),50);var n=Number(this.options.zoomRatio)||.1,r=1;t.deltaY?r=t.deltaY>0?1:-1:t.wheelDelta?r=-t.wheelDelta/120:t.detail&&(r=t.detail>0?1:-1),this.zoom(-r*n,!0,t)}}},Yt={show:function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0],e=this.element,n=this.options;if(n.inline||this.showing||this.isShown||this.showing)return this;if(!this.ready)return this.build(),this.ready&&this.show(t),this;if(yt(n.show)&&Rt(e,U,n.show,{once:!0}),!1===Pt(e,U)||!this.ready)return this;this.hiding&&this.transitioning.abort(),this.showing=!0,this.open();var r=this.viewer;if(Ct(r,x),r.setAttribute("role","dialog"),r.setAttribute("aria-labelledby",this.title.id),r.setAttribute("aria-modal",!0),r.removeAttribute("aria-hidden"),n.transition&&!t){var i=this.shown.bind(this);this.transitioning={abort:function(){jt(r,V,i),Ct(r,E)}},Et(r,N),r.initialOffsetWidth=r.offsetWidth,Rt(r,V,i,{once:!0}),Et(r,E)}else Et(r,E),this.shown();return this},hide:function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],n=this.element,r=this.options;if(r.inline||this.hiding||!this.isShown&&!this.showing)return this;if(yt(r.hide)&&Rt(n,J,r.hide,{once:!0}),!1===Pt(n,J))return this;this.showing&&this.transitioning.abort(),this.hiding=!0,this.played?this.stop():this.viewing&&this.viewing.abort();var i=this.viewer,o=this.image,s=function(){Ct(i,E),t.hidden()};if(r.transition&&!e){var a=function e(n){n&&n.target===i&&(jt(i,V,e),t.hidden())},l=function(){_t(i,N)?(Rt(i,V,a),Ct(i,E)):s()};this.transitioning={abort:function(){t.viewed&&_t(o,N)?jt(o,V,l):_t(i,N)&&jt(i,V,a)}},this.viewed&&_t(o,N)?(Rt(o,V,l,{once:!0}),this.zoomTo(0,!1,null,!0)):l()}else s();return this},view:function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.options.initialViewIndex;if(e=Number(e)||0,this.hiding||this.played||e<0||e>=this.length||this.viewed&&e===this.index)return this;if(!this.isShown)return this.index=e,this.show();this.viewing&&this.viewing.abort();var n=this.element,r=this.options,i=this.title,o=this.canvas,s=this.items[e],a=s.querySelector("img"),l=Tt(a,"originalUrl"),c=a.getAttribute("alt"),h=document.createElement("img");if(bt(r.inheritedAttributes,(function(t){var e=a.getAttribute(t);null!==e&&h.setAttribute(t,e)})),h.src=l,h.alt=c,yt(r.view)&&Rt(n,K,r.view,{once:!0}),!1===Pt(n,K,{originalImage:this.images[e],index:e,image:h})||!this.isShown||this.hiding||this.played)return this;var u=this.items[this.index];u&&(Ct(u,g),u.removeAttribute("aria-selected")),Et(s,g),s.setAttribute("aria-selected",!0),r.focus&&s.focus(),this.image=h,this.viewed=!1,this.index=e,this.imageData={},Et(h,C),r.loading&&Et(o,O),o.innerHTML="",o.appendChild(h),this.renderList(),i.innerHTML="";var d,p,f=function(){var e=t.imageData,n=Array.isArray(r.title)?r.title[1]:r.title;i.innerHTML=St(yt(n)?n.call(t,h,e):"".concat(c," (").concat(e.naturalWidth," × ").concat(e.naturalHeight,")"))};return Rt(n,G,f,{once:!0}),this.viewing={abort:function(){jt(n,G,f),h.complete?t.imageRendering?t.imageRendering.abort():t.imageInitializing&&t.imageInitializing.abort():(h.src="",jt(h,I,d),t.timeout&&clearTimeout(t.timeout))}},h.complete?this.load():(Rt(h,I,d=function(){jt(h,B,p),t.load()},{once:!0}),Rt(h,B,p=function(){jt(h,I,d),t.timeout&&(clearTimeout(t.timeout),t.timeout=!1),Ct(h,C),r.loading&&Ct(t.canvas,O)},{once:!0}),this.timeout&&clearTimeout(this.timeout),this.timeout=setTimeout((function(){Ct(h,C),t.timeout=!1}),1e3)),this},prev:function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0],e=this.index-1;return e<0&&(e=t?this.length-1:0),this.view(e),this},next:function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0],e=this.length-1,n=this.index+1;return n>e&&(n=t?0:e),this.view(n),this},move:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:t,n=this.imageData;return this.moveTo(ft(t)?t:n.x+Number(t),ft(e)?e:n.y+Number(e)),this},moveTo:function(t){var e=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:t,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,i=this.element,o=this.options,s=this.imageData;if(t=Number(t),n=Number(n),this.viewed&&!this.played&&o.movable){var a=s.x,l=s.y,c=!1;if(pt(t)?c=!0:t=a,pt(n)?c=!0:n=l,c){if(yt(o.move)&&Rt(i,Z,o.move,{once:!0}),!1===Pt(i,Z,{x:t,y:n,oldX:a,oldY:l,originalEvent:r}))return this;s.x=t,s.y=n,s.left=t,s.top=n,this.moving=!0,this.renderImage((function(){e.moving=!1,yt(o.moved)&&Rt(i,Q,o.moved,{once:!0}),Pt(i,Q,{x:t,y:n,oldX:a,oldY:l,originalEvent:r},{cancelable:!1})}))}}return this},rotate:function(t){return this.rotateTo((this.imageData.rotate||0)+Number(t)),this},rotateTo:function(t){var e=this,n=this.element,r=this.options,i=this.imageData;if(pt(t=Number(t))&&this.viewed&&!this.played&&r.rotatable){var o=i.rotate;if(yt(r.rotate)&&Rt(n,tt,r.rotate,{once:!0}),!1===Pt(n,tt,{degree:t,oldDegree:o}))return this;i.rotate=t,this.rotating=!0,this.renderImage((function(){e.rotating=!1,yt(r.rotated)&&Rt(n,et,r.rotated,{once:!0}),Pt(n,et,{degree:t,oldDegree:o},{cancelable:!1})}))}return this},scaleX:function(t){return this.scale(t,this.imageData.scaleY),this},scaleY:function(t){return this.scale(this.imageData.scaleX,t),this},scale:function(t){var e=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:t,r=this.element,i=this.options,o=this.imageData;if(t=Number(t),n=Number(n),this.viewed&&!this.played&&i.scalable){var s=o.scaleX,a=o.scaleY,l=!1;if(pt(t)?l=!0:t=s,pt(n)?l=!0:n=a,l){if(yt(i.scale)&&Rt(r,nt,i.scale,{once:!0}),!1===Pt(r,nt,{scaleX:t,scaleY:n,oldScaleX:s,oldScaleY:a}))return this;o.scaleX=t,o.scaleY=n,this.scaling=!0,this.renderImage((function(){e.scaling=!1,yt(i.scaled)&&Rt(r,rt,i.scaled,{once:!0}),Pt(r,rt,{scaleX:t,scaleY:n,oldScaleX:s,oldScaleY:a},{cancelable:!1})}))}}return this},zoom:function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,r=this.imageData;return t=(t=Number(t))<0?1/(1-t):1+t,this.zoomTo(r.width*t/r.naturalWidth,e,n),this},zoomTo:function(t){var e=this,n=arguments.length>1&&void 0!==arguments[1]&&arguments[1],r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,i=arguments.length>3&&void 0!==arguments[3]&&arguments[3],o=this.element,s=this.options,a=this.pointers,l=this.imageData,c=l.x,h=l.y,u=l.width,d=l.height,p=l.naturalWidth,f=l.naturalHeight;if(pt(t=Math.max(0,t))&&this.viewed&&!this.played&&(i||s.zoomable)){if(!i){var g=Math.max(.01,s.minZoomRatio),m=Math.min(100,s.maxZoomRatio);t=Math.min(Math.max(t,g),m)}if(r)switch(r.type){case"wheel":s.zoomRatio>=.055&&t>.95&&t<1.05&&(t=1);break;case"pointermove":case"touchmove":case"mousemove":t>.99&&t<1.01&&(t=1)}var v=p*t,y=f*t,b=v-u,w=y-d,x=l.ratio;if(yt(s.zoom)&&Rt(o,it,s.zoom,{once:!0}),!1===Pt(o,it,{ratio:t,oldRatio:x,originalEvent:r}))return this;if(this.zooming=!0,r){var k=zt(this.viewer),S=a&&Object.keys(a).length>0?Ht(a):{pageX:r.pageX,pageY:r.pageY};l.x-=b*((S.pageX-k.left-c)/u),l.y-=w*((S.pageY-k.top-h)/d)}else l.x-=b/2,l.y-=w/2;l.left=l.x,l.top=l.y,l.width=v,l.height=y,l.oldRatio=x,l.ratio=t,this.renderImage((function(){e.zooming=!1,yt(s.zoomed)&&Rt(o,ot,s.zoomed,{once:!0}),Pt(o,ot,{ratio:t,oldRatio:x,originalEvent:r},{cancelable:!1})})),n&&this.tooltip()}return this},play:function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(!this.isShown||this.played)return this;var n=this.element,r=this.options;if(yt(r.play)&&Rt(n,st,r.play,{once:!0}),!1===Pt(n,st))return this;var i=this.player,o=this.loadImage.bind(this),s=[],a=0,l=0;if(this.played=!0,this.onLoadWhenPlay=o,e&&this.requestFullscreen(e),Et(i,T),bt(this.items,(function(t,e){var n=t.querySelector("img"),c=document.createElement("img");c.src=Tt(n,"originalUrl"),c.alt=n.getAttribute("alt"),c.referrerPolicy=n.referrerPolicy,a+=1,Et(c,v),Ot(c,N,r.transition),_t(t,g)&&(Et(c,E),l=e),s.push(c),Rt(c,I,o,{once:!0}),i.appendChild(c)})),pt(r.interval)&&r.interval>0){var c=function e(){t.playing=setTimeout((function(){Ct(s[l],E),Et(s[l=(l+=1)<a?l:0],E),e()}),r.interval)};a>1&&c()}return this},stop:function(){var t=this;if(!this.played)return this;var e=this.element,n=this.options;if(yt(n.stop)&&Rt(e,at,n.stop,{once:!0}),!1===Pt(e,at))return this;var r=this.player;return this.played=!1,clearTimeout(this.playing),bt(r.getElementsByTagName("img"),(function(e){jt(e,I,t.onLoadWhenPlay)})),Ct(r,T),r.innerHTML="",this.exitFullscreen(),this},full:function(){var t=this,e=this.options,n=this.viewer,r=this.image,i=this.list;return!this.isShown||this.played||this.fulled||!e.inline||(this.fulled=!0,this.open(),Et(this.button,w),e.transition&&(Ct(i,N),this.viewed&&Ct(r,N)),Et(n,y),n.setAttribute("role","dialog"),n.setAttribute("aria-labelledby",this.title.id),n.setAttribute("aria-modal",!0),n.removeAttribute("style"),kt(n,{zIndex:e.zIndex}),e.focus&&this.enforceFocus(),this.initContainer(),this.viewerData=wt({},this.containerData),this.renderList(),this.viewed&&this.initImage((function(){t.renderImage((function(){e.transition&&setTimeout((function(){Et(r,N),Et(i,N)}),0)}))}))),this},exit:function(){var t=this,e=this.options,n=this.viewer,r=this.image,i=this.list;return this.isShown&&!this.played&&this.fulled&&e.inline?(this.fulled=!1,this.close(),Ct(this.button,w),e.transition&&(Ct(i,N),this.viewed&&Ct(r,N)),e.focus&&this.clearEnforceFocus(),n.removeAttribute("role"),n.removeAttribute("aria-labelledby"),n.removeAttribute("aria-modal"),Ct(n,y),kt(n,{zIndex:e.zIndexInline}),this.viewerData=wt({},this.parentData),this.renderViewer(),this.renderList(),this.viewed&&this.initImage((function(){t.renderImage((function(){e.transition&&setTimeout((function(){Et(r,N),Et(i,N)}),0)}))})),this):this},tooltip:function(){var t=this,e=this.options,n=this.tooltipBox,r=this.imageData;return this.viewed&&!this.played&&e.tooltip?(n.textContent="".concat(Math.round(100*r.ratio),"%"),this.tooltipping?clearTimeout(this.tooltipping):e.transition?(this.fading&&Pt(n,V),Et(n,T),Et(n,v),Et(n,N),n.removeAttribute("aria-hidden"),n.initialOffsetWidth=n.offsetWidth,Et(n,E)):(Et(n,T),n.removeAttribute("aria-hidden")),this.tooltipping=setTimeout((function(){e.transition?(Rt(n,V,(function(){Ct(n,T),Ct(n,v),Ct(n,N),n.setAttribute("aria-hidden",!0),t.fading=!1}),{once:!0}),Ct(n,E),t.fading=!0):(Ct(n,T),n.setAttribute("aria-hidden",!0)),t.tooltipping=!1}),1e3),this):this},toggle:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;return 1===this.imageData.ratio?this.zoomTo(this.imageData.oldRatio,!0,t):this.zoomTo(1,!0,t),this},reset:function(){return this.viewed&&!this.played&&(this.imageData=wt({},this.initialImageData),this.renderImage()),this},update:function(){var t=this,e=this.element,n=this.options,r=this.isImg;if(r&&!e.parentNode)return this.destroy();var i=[];if(bt(r?[e]:e.querySelectorAll("img"),(function(e){yt(n.filter)?n.filter.call(t,e)&&i.push(e):t.getImageURL(e)&&i.push(e)})),!i.length)return this;if(this.images=i,this.length=i.length,this.ready){var o=[];if(bt(this.items,(function(t,e){var n=t.querySelector("img"),r=i[e];r&&n&&r.src===n.src&&r.alt===n.alt||o.push(e)})),kt(this.list,{width:"auto"}),this.initList(),this.isShown)if(this.length){if(this.viewed){var s=o.indexOf(this.index);if(s>=0)this.viewed=!1,this.view(Math.max(Math.min(this.index-s,this.length-1),0));else{var a=this.items[this.index];Et(a,g),a.setAttribute("aria-selected",!0)}}}else this.image=null,this.viewed=!1,this.index=0,this.imageData={},this.canvas.innerHTML="",this.title.innerHTML=""}else this.build();return this},destroy:function(){var t=this.element,e=this.options;return t.viewer?(this.destroyed=!0,this.ready?(this.played&&this.stop(),e.inline?(this.fulled&&this.exit(),this.unbind()):this.isShown?(this.viewing&&(this.imageRendering?this.imageRendering.abort():this.imageInitializing&&this.imageInitializing.abort()),this.hiding&&this.transitioning.abort(),this.hidden()):this.showing&&(this.transitioning.abort(),this.hidden()),this.ready=!1,this.viewer.parentNode.removeChild(this.viewer)):e.inline&&(this.delaying?this.delaying.abort():this.initializing&&this.initializing.abort()),e.inline||jt(t,D,this.onStart),t.viewer=void 0,this):this}},Jt={getImageURL:function(t){var e=this.options.url;return ut(e)?t.getAttribute(e):yt(e)?e.call(this,t):""},enforceFocus:function(){var t=this;this.clearEnforceFocus(),Rt(document,P,this.onFocusin=function(e){var n=t.viewer,r=e.target;if(r!==document&&r!==n&&!n.contains(r)){for(;r;){if(null!==r.getAttribute("tabindex")||"true"===r.getAttribute("aria-modal"))return;r=r.parentElement}n.focus()}})},clearEnforceFocus:function(){this.onFocusin&&(jt(document,P,this.onFocusin),this.onFocusin=null)},open:function(){var t=this.body;Et(t,A),t.style.paddingRight="".concat(this.scrollbarWidth+(parseFloat(this.initialBodyComputedPaddingRight)||0),"px")},close:function(){var t=this.body;Ct(t,A),t.style.paddingRight=this.initialBodyPaddingRight},shown:function(){var t=this.element,e=this.options,n=this.viewer;this.fulled=!0,this.isShown=!0,this.render(),this.bind(),this.showing=!1,e.focus&&(n.focus(),this.enforceFocus()),yt(e.shown)&&Rt(t,Y,e.shown,{once:!0}),!1!==Pt(t,Y)&&this.ready&&this.isShown&&!this.hiding&&this.view(this.index)},hidden:function(){var t=this.element,e=this.options,n=this.viewer;e.fucus&&this.clearEnforceFocus(),this.fulled=!1,this.viewed=!1,this.isShown=!1,this.close(),this.unbind(),Et(n,x),n.removeAttribute("role"),n.removeAttribute("aria-labelledby"),n.removeAttribute("aria-modal"),n.setAttribute("aria-hidden",!0),this.resetList(),this.resetImage(),this.hiding=!1,this.destroyed||(yt(e.hidden)&&Rt(t,X,e.hidden,{once:!0}),Pt(t,X,null,{cancelable:!1}))},requestFullscreen:function(t){var e=this.element.ownerDocument;if(this.fulled&&!(e.fullscreenElement||e.webkitFullscreenElement||e.mozFullScreenElement||e.msFullscreenElement)){var n=e.documentElement;n.requestFullscreen?vt(t)?n.requestFullscreen(t):n.requestFullscreen():n.webkitRequestFullscreen?n.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT):n.mozRequestFullScreen?n.mozRequestFullScreen():n.msRequestFullscreen&&n.msRequestFullscreen()}},exitFullscreen:function(){var t=this.element.ownerDocument;this.fulled&&(t.fullscreenElement||t.webkitFullscreenElement||t.mozFullScreenElement||t.msFullscreenElement)&&(t.exitFullscreen?t.exitFullscreen():t.webkitExitFullscreen?t.webkitExitFullscreen():t.mozCancelFullScreen?t.mozCancelFullScreen():t.msExitFullscreen&&t.msExitFullscreen())},change:function(t){var n=this.options,r=this.pointers,i=r[Object.keys(r)[0]];if(i){var o=i.endX-i.startX,s=i.endY-i.startY;switch(this.action){case d:this.move(o,s,t);break;case f:this.zoom(function(t){var n=e({},t),r=[];return bt(t,(function(t,e){delete n[e],bt(n,(function(e){var n=Math.abs(t.startX-e.startX),i=Math.abs(t.startY-e.startY),o=Math.abs(t.endX-e.endX),s=Math.abs(t.endY-e.endY),a=Math.sqrt(n*n+i*i),l=(Math.sqrt(o*o+s*s)-a)/a;r.push(l)}))})),r.sort((function(t,e){return Math.abs(t)<Math.abs(e)})),r[0]}(r),!1,t);break;case p:this.action="switched";var a=Math.abs(o);a>1&&a>Math.abs(s)&&(this.pointers={},o>1?this.prev(n.loop):o<-1&&this.next(n.loop))}bt(r,(function(t){t.startX=t.endX,t.startY=t.endY}))}},isSwitchable:function(){var t=this.imageData,e=this.viewerData;return this.length>1&&t.x>=0&&t.y>=0&&t.width<=e.width&&t.height<=e.height}},Xt=l.Viewer,Kt=(Vt=-1,function(){return Vt+=1}),Gt=function(){function t(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(r(this,t),!e||1!==e.nodeType)throw new Error("The first argument is required and must be an element.");this.element=e,this.options=wt({},s,vt(n)&&n),this.action=!1,this.fading=!1,this.fulled=!1,this.hiding=!1,this.imageClicked=!1,this.imageData={},this.index=this.options.initialViewIndex,this.isImg=!1,this.isShown=!1,this.length=0,this.moving=!1,this.played=!1,this.playing=!1,this.pointers={},this.ready=!1,this.rotating=!1,this.scaling=!1,this.showing=!1,this.timeout=!1,this.tooltipping=!1,this.viewed=!1,this.viewing=!1,this.wheeling=!1,this.zooming=!1,this.id=Kt(),this.init()}return e=t,o=[{key:"noConflict",value:function(){return window.Viewer=Xt,t}},{key:"setDefaults",value:function(t){wt(s,vt(t)&&t)}}],(n=[{key:"init",value:function(){var t=this,e=this.element,n=this.options;if(!e.viewer){e.viewer=this,n.focus&&!n.keyboard&&(n.focus=!1);var r="img"===e.localName,i=[];if(bt(r?[e]:e.querySelectorAll("img"),(function(e){yt(n.filter)?n.filter.call(t,e)&&i.push(e):t.getImageURL(e)&&i.push(e)})),this.isImg=r,this.length=i.length,this.images=i,this.initBody(),ft(document.createElement(u).style.transition)&&(n.transition=!1),n.inline){var o=0,s=function(){var e;(o+=1)===t.length&&(t.initializing=!1,t.delaying={abort:function(){clearTimeout(e)}},e=setTimeout((function(){t.delaying=!1,t.build()}),0))};this.initializing={abort:function(){bt(i,(function(t){t.complete||(jt(t,I,s),jt(t,B,s))}))}},bt(i,(function(t){var e,n;t.complete?s():(Rt(t,I,e=function(){jt(t,B,n),s()},{once:!0}),Rt(t,B,n=function(){jt(t,I,e),s()},{once:!0}))}))}else Rt(e,D,this.onStart=function(e){var r=e.target;"img"!==r.localName||yt(n.filter)&&!n.filter.call(t,r)||t.view(t.images.indexOf(r))})}}},{key:"build",value:function(){if(!this.ready){var t=this.element,e=this.options,n=t.parentNode,r=document.createElement("div");r.innerHTML='<div class="viewer-container" tabindex="-1" touch-action="none"><div class="viewer-canvas"></div><div class="viewer-footer"><div class="viewer-title"></div><div class="viewer-toolbar"></div><div class="viewer-navbar"><ul class="viewer-list" role="navigation"></ul></div></div><div class="viewer-tooltip" role="alert" aria-hidden="true"></div><div class="viewer-button" data-viewer-action="mix" role="button"></div><div class="viewer-player"></div></div>';var i=r.querySelector(".".concat(u,"-container")),o=i.querySelector(".".concat(u,"-title")),s=i.querySelector(".".concat(u,"-toolbar")),a=i.querySelector(".".concat(u,"-navbar")),l=i.querySelector(".".concat(u,"-button")),c=i.querySelector(".".concat(u,"-canvas"));if(this.parent=n,this.viewer=i,this.title=o,this.toolbar=s,this.navbar=a,this.button=l,this.canvas=c,this.footer=i.querySelector(".".concat(u,"-footer")),this.tooltipBox=i.querySelector(".".concat(u,"-tooltip")),this.player=i.querySelector(".".concat(u,"-player")),this.list=i.querySelector(".".concat(u,"-list")),i.id="".concat(u).concat(this.id),o.id="".concat(u,"Title").concat(this.id),Et(o,e.title?$t(Array.isArray(e.title)?e.title[0]:e.title):x),Et(a,e.navbar?$t(e.navbar):x),Ot(l,x,!e.button),e.keyboard&&l.setAttribute("tabindex",0),e.backdrop&&(Et(i,"".concat(u,"-backdrop")),e.inline||"static"===e.backdrop||Nt(c,lt,"hide")),ut(e.className)&&e.className&&e.className.split(ct).forEach((function(t){Et(i,t)})),e.toolbar){var h=document.createElement("ul"),d=vt(e.toolbar),p=ht.slice(0,3),f=ht.slice(7,9),g=ht.slice(9);d||Et(s,$t(e.toolbar)),bt(d?e.toolbar:ht,(function(t,n){var r=d&&vt(t),i=d?At(n):t,o=r&&!ft(t.show)?t.show:t;if(o&&(e.zoomable||-1===p.indexOf(i))&&(e.rotatable||-1===f.indexOf(i))&&(e.scalable||-1===g.indexOf(i))){var s=r&&!ft(t.size)?t.size:t,a=r&&!ft(t.click)?t.click:t,l=document.createElement("li");e.keyboard&&l.setAttribute("tabindex",0),l.setAttribute("role","button"),Et(l,"".concat(u,"-").concat(i)),yt(a)||Nt(l,lt,i),pt(o)&&Et(l,$t(o)),-1!==["small","large"].indexOf(s)?Et(l,"".concat(u,"-").concat(s)):"play"===i&&Et(l,"".concat(u,"-large")),yt(a)&&Rt(l,D,a),h.appendChild(l)}})),s.appendChild(h)}else Et(s,x);if(!e.rotatable){var w=s.querySelectorAll('li[class*="rotate"]');Et(w,C),bt(w,(function(t){s.appendChild(t)}))}if(e.inline)Et(l,b),kt(i,{zIndex:e.zIndexInline}),"static"===window.getComputedStyle(n).position&&kt(n,{position:"relative"}),n.insertBefore(i,t.nextSibling);else{Et(l,m),Et(i,y),Et(i,v),Et(i,x),kt(i,{zIndex:e.zIndex});var k=e.container;ut(k)&&(k=t.ownerDocument.querySelector(k)),k||(k=this.body),k.appendChild(i)}e.inline&&(this.render(),this.bind(),this.isShown=!0),this.ready=!0,yt(e.ready)&&Rt(t,W,e.ready,{once:!0}),!1!==Pt(t,W)?this.ready&&e.inline&&this.view(this.index):this.ready=!1}}}])&&i(e.prototype,n),o&&i(e,o),Object.defineProperty(e,"prototype",{writable:!1}),t;var e,n,o}();return wt(Gt.prototype,qt,Wt,Ut,Yt,Jt),Gt}()},5290:(t,e,n)=>{"use strict";function r(){}function i(t){return null==t?r:function(){return this.querySelector(t)}}function o(t){return null==t?[]:Array.isArray(t)?t:Array.from(t)}function s(){return[]}function a(t){return null==t?s:function(){return this.querySelectorAll(t)}}function l(t){return function(){return this.matches(t)}}function c(t){return function(e){return e.matches(t)}}n.d(e,{Ue8:()=>Kn,ohM:()=>Hn,jvg:()=>rr,ETc:()=>Xn,daD:()=>Gn,Ys:()=>An});var h=Array.prototype.find;function u(){return this.firstElementChild}var d=Array.prototype.filter;function p(){return Array.from(this.children)}function f(t){return new Array(t.length)}function g(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}function m(t){return function(){return t}}function v(t,e,n,r,i,o){for(var s,a=0,l=e.length,c=o.length;a<c;++a)(s=e[a])?(s.__data__=o[a],r[a]=s):n[a]=new g(t,o[a]);for(;a<l;++a)(s=e[a])&&(i[a]=s)}function y(t,e,n,r,i,o,s){var a,l,c,h=new Map,u=e.length,d=o.length,p=new Array(u);for(a=0;a<u;++a)(l=e[a])&&(p[a]=c=s.call(l,l.__data__,a,e)+"",h.has(c)?i[a]=l:h.set(c,l));for(a=0;a<d;++a)c=s.call(t,o[a],a,o)+"",(l=h.get(c))?(r[a]=l,l.__data__=o[a],h.delete(c)):n[a]=new g(t,o[a]);for(a=0;a<u;++a)(l=e[a])&&h.get(p[a])===l&&(i[a]=l)}function b(t){return t.__data__}function w(t){return"object"==typeof t&&"length"in t?t:Array.from(t)}function x(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}g.prototype={constructor:g,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var k="http://www.w3.org/1999/xhtml";const S={svg:"http://www.w3.org/2000/svg",xhtml:k,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function _(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),S.hasOwnProperty(e)?{space:S[e],local:t}:t}function E(t){return function(){this.removeAttribute(t)}}function C(t){return function(){this.removeAttributeNS(t.space,t.local)}}function O(t,e){return function(){this.setAttribute(t,e)}}function M(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}function A(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}function T(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}function N(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}function D(t){return function(){this.style.removeProperty(t)}}function j(t,e,n){return function(){this.style.setProperty(t,e,n)}}function R(t,e,n){return function(){var r=e.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,n)}}function P(t,e){return t.style.getPropertyValue(e)||N(t).getComputedStyle(t,null).getPropertyValue(e)}function z(t){return function(){delete this[t]}}function I(t,e){return function(){this[t]=e}}function B(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}function F(t){return t.trim().split(/^|\s+/)}function $(t){return t.classList||new L(t)}function L(t){this._node=t,this._names=F(t.getAttribute("class")||"")}function H(t,e){for(var n=$(t),r=-1,i=e.length;++r<i;)n.add(e[r])}function V(t,e){for(var n=$(t),r=-1,i=e.length;++r<i;)n.remove(e[r])}function q(t){return function(){H(this,t)}}function W(t){return function(){V(this,t)}}function U(t,e){return function(){(e.apply(this,arguments)?H:V)(this,t)}}function Y(){this.textContent=""}function J(t){return function(){this.textContent=t}}function X(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}function K(){this.innerHTML=""}function G(t){return function(){this.innerHTML=t}}function Z(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}function Q(){this.nextSibling&&this.parentNode.appendChild(this)}function tt(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function et(t){return function(){var e=this.ownerDocument,n=this.namespaceURI;return n===k&&e.documentElement.namespaceURI===k?e.createElement(t):e.createElementNS(n,t)}}function nt(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}function rt(t){var e=_(t);return(e.local?nt:et)(e)}function it(){return null}function ot(){var t=this.parentNode;t&&t.removeChild(this)}function st(){var t=this.cloneNode(!1),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}function at(){var t=this.cloneNode(!0),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}function lt(t){return t.trim().split(/^|\s+/).map((function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}}))}function ct(t){return function(){var e=this.__on;if(e){for(var n,r=0,i=-1,o=e.length;r<o;++r)n=e[r],t.type&&n.type!==t.type||n.name!==t.name?e[++i]=n:this.removeEventListener(n.type,n.listener,n.options);++i?e.length=i:delete this.__on}}}function ht(t,e,n){return function(){var r,i=this.__on,o=function(t){return function(e){t.call(this,e,this.__data__)}}(e);if(i)for(var s=0,a=i.length;s<a;++s)if((r=i[s]).type===t.type&&r.name===t.name)return this.removeEventListener(r.type,r.listener,r.options),this.addEventListener(r.type,r.listener=o,r.options=n),void(r.value=e);this.addEventListener(t.type,o,n),r={type:t.type,name:t.name,value:e,listener:o,options:n},i?i.push(r):this.__on=[r]}}function ut(t,e,n){var r=N(t),i=r.CustomEvent;"function"==typeof i?i=new i(e,n):(i=r.document.createEvent("Event"),n?(i.initEvent(e,n.bubbles,n.cancelable),i.detail=n.detail):i.initEvent(e,!1,!1)),t.dispatchEvent(i)}function dt(t,e){return function(){return ut(this,t,e)}}function pt(t,e){return function(){return ut(this,t,e.apply(this,arguments))}}L.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var ft=[null];function gt(t,e){this._groups=t,this._parents=e}function mt(){return new gt([[document.documentElement]],ft)}gt.prototype=mt.prototype={constructor:gt,select:function(t){"function"!=typeof t&&(t=i(t));for(var e=this._groups,n=e.length,r=new Array(n),o=0;o<n;++o)for(var s,a,l=e[o],c=l.length,h=r[o]=new Array(c),u=0;u<c;++u)(s=l[u])&&(a=t.call(s,s.__data__,u,l))&&("__data__"in s&&(a.__data__=s.__data__),h[u]=a);return new gt(r,this._parents)},selectAll:function(t){t="function"==typeof t?function(t){return function(){return o(t.apply(this,arguments))}}(t):a(t);for(var e=this._groups,n=e.length,r=[],i=[],s=0;s<n;++s)for(var l,c=e[s],h=c.length,u=0;u<h;++u)(l=c[u])&&(r.push(t.call(l,l.__data__,u,c)),i.push(l));return new gt(r,i)},selectChild:function(t){return this.select(null==t?u:function(t){return function(){return h.call(this.children,t)}}("function"==typeof t?t:c(t)))},selectChildren:function(t){return this.selectAll(null==t?p:function(t){return function(){return d.call(this.children,t)}}("function"==typeof t?t:c(t)))},filter:function(t){"function"!=typeof t&&(t=l(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,s=e[i],a=s.length,c=r[i]=[],h=0;h<a;++h)(o=s[h])&&t.call(o,o.__data__,h,s)&&c.push(o);return new gt(r,this._parents)},data:function(t,e){if(!arguments.length)return Array.from(this,b);var n=e?y:v,r=this._parents,i=this._groups;"function"!=typeof t&&(t=m(t));for(var o=i.length,s=new Array(o),a=new Array(o),l=new Array(o),c=0;c<o;++c){var h=r[c],u=i[c],d=u.length,p=w(t.call(h,h&&h.__data__,c,r)),f=p.length,g=a[c]=new Array(f),x=s[c]=new Array(f),k=l[c]=new Array(d);n(h,u,g,x,k,p,e);for(var S,_,E=0,C=0;E<f;++E)if(S=g[E]){for(E>=C&&(C=E+1);!(_=x[C])&&++C<f;);S._next=_||null}}return(s=new gt(s,r))._enter=a,s._exit=l,s},enter:function(){return new gt(this._enter||this._groups.map(f),this._parents)},exit:function(){return new gt(this._exit||this._groups.map(f),this._parents)},join:function(t,e,n){var r=this.enter(),i=this,o=this.exit();return"function"==typeof t?(r=t(r))&&(r=r.selection()):r=r.append(t+""),null!=e&&(i=e(i))&&(i=i.selection()),null==n?o.remove():n(o),r&&i?r.merge(i).order():i},merge:function(t){for(var e=t.selection?t.selection():t,n=this._groups,r=e._groups,i=n.length,o=r.length,s=Math.min(i,o),a=new Array(i),l=0;l<s;++l)for(var c,h=n[l],u=r[l],d=h.length,p=a[l]=new Array(d),f=0;f<d;++f)(c=h[f]||u[f])&&(p[f]=c);for(;l<i;++l)a[l]=n[l];return new gt(a,this._parents)},selection:function(){return this},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var r,i=t[e],o=i.length-1,s=i[o];--o>=0;)(r=i[o])&&(s&&4^r.compareDocumentPosition(s)&&s.parentNode.insertBefore(r,s),s=r);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=x);for(var n=this._groups,r=n.length,i=new Array(r),o=0;o<r;++o){for(var s,a=n[o],l=a.length,c=i[o]=new Array(l),h=0;h<l;++h)(s=a[h])&&(c[h]=s);c.sort(e)}return new gt(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){return Array.from(this)},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r=t[e],i=0,o=r.length;i<o;++i){var s=r[i];if(s)return s}return null},size:function(){let t=0;for(const e of this)++t;return t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,r=e.length;n<r;++n)for(var i,o=e[n],s=0,a=o.length;s<a;++s)(i=o[s])&&t.call(i,i.__data__,s,o);return this},attr:function(t,e){var n=_(t);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==e?n.local?C:E:"function"==typeof e?n.local?T:A:n.local?M:O)(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?D:"function"==typeof e?R:j)(t,e,null==n?"":n)):P(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?z:"function"==typeof e?B:I)(t,e)):this.node()[t]},classed:function(t,e){var n=F(t+"");if(arguments.length<2){for(var r=$(this.node()),i=-1,o=n.length;++i<o;)if(!r.contains(n[i]))return!1;return!0}return this.each(("function"==typeof e?U:e?q:W)(n,e))},text:function(t){return arguments.length?this.each(null==t?Y:("function"==typeof t?X:J)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?K:("function"==typeof t?Z:G)(t)):this.node().innerHTML},raise:function(){return this.each(Q)},lower:function(){return this.each(tt)},append:function(t){var e="function"==typeof t?t:rt(t);return this.select((function(){return this.appendChild(e.apply(this,arguments))}))},insert:function(t,e){var n="function"==typeof t?t:rt(t),r=null==e?it:"function"==typeof e?e:i(e);return this.select((function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(ot)},clone:function(t){return this.select(t?at:st)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var r,i,o=lt(t+""),s=o.length;if(!(arguments.length<2)){for(a=e?ht:ct,r=0;r<s;++r)this.each(a(o[r],e,n));return this}var a=this.node().__on;if(a)for(var l,c=0,h=a.length;c<h;++c)for(r=0,l=a[c];r<s;++r)if((i=o[r]).type===l.type&&i.name===l.name)return l.value},dispatch:function(t,e){return this.each(("function"==typeof e?pt:dt)(t,e))},[Symbol.iterator]:function*(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r,i=t[e],o=0,s=i.length;o<s;++o)(r=i[o])&&(yield r)}};const vt=mt;var yt={value:()=>{}};function bt(){for(var t,e=0,n=arguments.length,r={};e<n;++e){if(!(t=arguments[e]+"")||t in r||/[\s.]/.test(t))throw new Error("illegal type: "+t);r[t]=[]}return new wt(r)}function wt(t){this._=t}function xt(t,e){return t.trim().split(/^|\s+/).map((function(t){var n="",r=t.indexOf(".");if(r>=0&&(n=t.slice(r+1),t=t.slice(0,r)),t&&!e.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:n}}))}function kt(t,e){for(var n,r=0,i=t.length;r<i;++r)if((n=t[r]).name===e)return n.value}function St(t,e,n){for(var r=0,i=t.length;r<i;++r)if(t[r].name===e){t[r]=yt,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=n&&t.push({name:e,value:n}),t}wt.prototype=bt.prototype={constructor:wt,on:function(t,e){var n,r=this._,i=xt(t+"",r),o=-1,s=i.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++o<s;)if(n=(t=i[o]).type)r[n]=St(r[n],t.name,e);else if(null==e)for(n in r)r[n]=St(r[n],t.name,null);return this}for(;++o<s;)if((n=(t=i[o]).type)&&(n=kt(r[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new wt(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,r,i=new Array(n),o=0;o<n;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,n=(r=this._[t]).length;o<n;++o)r[o].value.apply(e,i)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(e,n)}};const _t=bt;var Et,Ct,Ot=0,Mt=0,At=0,Tt=0,Nt=0,Dt=0,jt="object"==typeof performance&&performance.now?performance:Date,Rt="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function Pt(){return Nt||(Rt(zt),Nt=jt.now()+Dt)}function zt(){Nt=0}function It(){this._call=this._time=this._next=null}function Bt(t,e,n){var r=new It;return r.restart(t,e,n),r}function Ft(){Nt=(Tt=jt.now())+Dt,Ot=Mt=0;try{!function(){Pt(),++Ot;for(var t,e=Et;e;)(t=Nt-e._time)>=0&&e._call.call(void 0,t),e=e._next;--Ot}()}finally{Ot=0,function(){for(var t,e,n=Et,r=1/0;n;)n._call?(r>n._time&&(r=n._time),t=n,n=n._next):(e=n._next,n._next=null,n=t?t._next=e:Et=e);Ct=t,Lt(r)}(),Nt=0}}function $t(){var t=jt.now(),e=t-Tt;e>1e3&&(Dt-=e,Tt=t)}function Lt(t){Ot||(Mt&&(Mt=clearTimeout(Mt)),t-Nt>24?(t<1/0&&(Mt=setTimeout(Ft,t-jt.now()-Dt)),At&&(At=clearInterval(At))):(At||(Tt=jt.now(),At=setInterval($t,1e3)),Ot=1,Rt(Ft)))}function Ht(t,e,n){var r=new It;return e=null==e?0:+e,r.restart((n=>{r.stop(),t(n+e)}),e,n),r}It.prototype=Bt.prototype={constructor:It,restart:function(t,e,n){if("function"!=typeof t)throw new TypeError("callback is not a function");n=(null==n?Pt():+n)+(null==e?0:+e),this._next||Ct===this||(Ct?Ct._next=this:Et=this,Ct=this),this._call=t,this._time=n,Lt()},stop:function(){this._call&&(this._call=null,this._time=1/0,Lt())}};var Vt=_t("start","end","cancel","interrupt"),qt=[];function Wt(t,e,n,r,i,o){var s=t.__transition;if(s){if(n in s)return}else t.__transition={};!function(t,e,n){var r,i=t.__transition;function o(l){var c,h,u,d;if(1!==n.state)return a();for(c in i)if((d=i[c]).name===n.name){if(3===d.state)return Ht(o);4===d.state?(d.state=6,d.timer.stop(),d.on.call("interrupt",t,t.__data__,d.index,d.group),delete i[c]):+c<e&&(d.state=6,d.timer.stop(),d.on.call("cancel",t,t.__data__,d.index,d.group),delete i[c])}if(Ht((function(){3===n.state&&(n.state=4,n.timer.restart(s,n.delay,n.time),s(l))})),n.state=2,n.on.call("start",t,t.__data__,n.index,n.group),2===n.state){for(n.state=3,r=new Array(u=n.tween.length),c=0,h=-1;c<u;++c)(d=n.tween[c].value.call(t,t.__data__,n.index,n.group))&&(r[++h]=d);r.length=h+1}}function s(e){for(var i=e<n.duration?n.ease.call(null,e/n.duration):(n.timer.restart(a),n.state=5,1),o=-1,s=r.length;++o<s;)r[o].call(t,i);5===n.state&&(n.on.call("end",t,t.__data__,n.index,n.group),a())}function a(){for(var r in n.state=6,n.timer.stop(),delete i[e],i)return;delete t.__transition}i[e]=n,n.timer=Bt((function(t){n.state=1,n.timer.restart(o,n.delay,n.time),n.delay<=t&&o(t-n.delay)}),0,n.time)}(t,n,{name:e,index:r,group:i,on:Vt,tween:qt,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:0})}function Ut(t,e){var n=Jt(t,e);if(n.state>0)throw new Error("too late; already scheduled");return n}function Yt(t,e){var n=Jt(t,e);if(n.state>3)throw new Error("too late; already running");return n}function Jt(t,e){var n=t.__transition;if(!n||!(n=n[e]))throw new Error("transition not found");return n}function Xt(t,e){return t=+t,e=+e,function(n){return t*(1-n)+e*n}}var Kt,Gt=180/Math.PI,Zt={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function Qt(t,e,n,r,i,o){var s,a,l;return(s=Math.sqrt(t*t+e*e))&&(t/=s,e/=s),(l=t*n+e*r)&&(n-=t*l,r-=e*l),(a=Math.sqrt(n*n+r*r))&&(n/=a,r/=a,l/=a),t*r<e*n&&(t=-t,e=-e,l=-l,s=-s),{translateX:i,translateY:o,rotate:Math.atan2(e,t)*Gt,skewX:Math.atan(l)*Gt,scaleX:s,scaleY:a}}function te(t,e,n,r){function i(t){return t.length?t.pop()+" ":""}return function(o,s){var a=[],l=[];return o=t(o),s=t(s),function(t,r,i,o,s,a){if(t!==i||r!==o){var l=s.push("translate(",null,e,null,n);a.push({i:l-4,x:Xt(t,i)},{i:l-2,x:Xt(r,o)})}else(i||o)&&s.push("translate("+i+e+o+n)}(o.translateX,o.translateY,s.translateX,s.translateY,a,l),function(t,e,n,o){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),o.push({i:n.push(i(n)+"rotate(",null,r)-2,x:Xt(t,e)})):e&&n.push(i(n)+"rotate("+e+r)}(o.rotate,s.rotate,a,l),function(t,e,n,o){t!==e?o.push({i:n.push(i(n)+"skewX(",null,r)-2,x:Xt(t,e)}):e&&n.push(i(n)+"skewX("+e+r)}(o.skewX,s.skewX,a,l),function(t,e,n,r,o,s){if(t!==n||e!==r){var a=o.push(i(o)+"scale(",null,",",null,")");s.push({i:a-4,x:Xt(t,n)},{i:a-2,x:Xt(e,r)})}else 1===n&&1===r||o.push(i(o)+"scale("+n+","+r+")")}(o.scaleX,o.scaleY,s.scaleX,s.scaleY,a,l),o=s=null,function(t){for(var e,n=-1,r=l.length;++n<r;)a[(e=l[n]).i]=e.x(t);return a.join("")}}}var ee=te((function(t){const e=new("function"==typeof DOMMatrix?DOMMatrix:WebKitCSSMatrix)(t+"");return e.isIdentity?Zt:Qt(e.a,e.b,e.c,e.d,e.e,e.f)}),"px, ","px)","deg)"),ne=te((function(t){return null==t?Zt:(Kt||(Kt=document.createElementNS("http://www.w3.org/2000/svg","g")),Kt.setAttribute("transform",t),(t=Kt.transform.baseVal.consolidate())?Qt((t=t.matrix).a,t.b,t.c,t.d,t.e,t.f):Zt)}),", ",")",")");function re(t,e){var n,r;return function(){var i=Yt(this,t),o=i.tween;if(o!==n)for(var s=0,a=(r=n=o).length;s<a;++s)if(r[s].name===e){(r=r.slice()).splice(s,1);break}i.tween=r}}function ie(t,e,n){var r,i;if("function"!=typeof n)throw new Error;return function(){var o=Yt(this,t),s=o.tween;if(s!==r){i=(r=s).slice();for(var a={name:e,value:n},l=0,c=i.length;l<c;++l)if(i[l].name===e){i[l]=a;break}l===c&&i.push(a)}o.tween=i}}function oe(t,e,n){var r=t._id;return t.each((function(){var t=Yt(this,r);(t.value||(t.value={}))[e]=n.apply(this,arguments)})),function(t){return Jt(t,r).value[e]}}function se(t,e,n){t.prototype=e.prototype=n,n.constructor=t}function ae(t,e){var n=Object.create(t.prototype);for(var r in e)n[r]=e[r];return n}function le(){}var ce=.7,he=1/ce,ue="\\s*([+-]?\\d+)\\s*",de="\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*",pe="\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*",fe=/^#([0-9a-f]{3,8})$/,ge=new RegExp(`^rgb\\(${ue},${ue},${ue}\\)$`),me=new RegExp(`^rgb\\(${pe},${pe},${pe}\\)$`),ve=new RegExp(`^rgba\\(${ue},${ue},${ue},${de}\\)$`),ye=new RegExp(`^rgba\\(${pe},${pe},${pe},${de}\\)$`),be=new RegExp(`^hsl\\(${de},${pe},${pe}\\)$`),we=new RegExp(`^hsla\\(${de},${pe},${pe},${de}\\)$`),xe={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function ke(){return this.rgb().formatHex()}function Se(){return this.rgb().formatRgb()}function _e(t){var e,n;return t=(t+"").trim().toLowerCase(),(e=fe.exec(t))?(n=e[1].length,e=parseInt(e[1],16),6===n?Ee(e):3===n?new Ae(e>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):8===n?Ce(e>>24&255,e>>16&255,e>>8&255,(255&e)/255):4===n?Ce(e>>12&15|e>>8&240,e>>8&15|e>>4&240,e>>4&15|240&e,((15&e)<<4|15&e)/255):null):(e=ge.exec(t))?new Ae(e[1],e[2],e[3],1):(e=me.exec(t))?new Ae(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=ve.exec(t))?Ce(e[1],e[2],e[3],e[4]):(e=ye.exec(t))?Ce(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=be.exec(t))?Pe(e[1],e[2]/100,e[3]/100,1):(e=we.exec(t))?Pe(e[1],e[2]/100,e[3]/100,e[4]):xe.hasOwnProperty(t)?Ee(xe[t]):"transparent"===t?new Ae(NaN,NaN,NaN,0):null}function Ee(t){return new Ae(t>>16&255,t>>8&255,255&t,1)}function Ce(t,e,n,r){return r<=0&&(t=e=n=NaN),new Ae(t,e,n,r)}function Oe(t){return t instanceof le||(t=_e(t)),t?new Ae((t=t.rgb()).r,t.g,t.b,t.opacity):new Ae}function Me(t,e,n,r){return 1===arguments.length?Oe(t):new Ae(t,e,n,null==r?1:r)}function Ae(t,e,n,r){this.r=+t,this.g=+e,this.b=+n,this.opacity=+r}function Te(){return`#${Re(this.r)}${Re(this.g)}${Re(this.b)}`}function Ne(){const t=De(this.opacity);return`${1===t?"rgb(":"rgba("}${je(this.r)}, ${je(this.g)}, ${je(this.b)}${1===t?")":`, ${t})`}`}function De(t){return isNaN(t)?1:Math.max(0,Math.min(1,t))}function je(t){return Math.max(0,Math.min(255,Math.round(t)||0))}function Re(t){return((t=je(t))<16?"0":"")+t.toString(16)}function Pe(t,e,n,r){return r<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new Ie(t,e,n,r)}function ze(t){if(t instanceof Ie)return new Ie(t.h,t.s,t.l,t.opacity);if(t instanceof le||(t=_e(t)),!t)return new Ie;if(t instanceof Ie)return t;var e=(t=t.rgb()).r/255,n=t.g/255,r=t.b/255,i=Math.min(e,n,r),o=Math.max(e,n,r),s=NaN,a=o-i,l=(o+i)/2;return a?(s=e===o?(n-r)/a+6*(n<r):n===o?(r-e)/a+2:(e-n)/a+4,a/=l<.5?o+i:2-o-i,s*=60):a=l>0&&l<1?0:s,new Ie(s,a,l,t.opacity)}function Ie(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function Be(t){return(t=(t||0)%360)<0?t+360:t}function Fe(t){return Math.max(0,Math.min(1,t||0))}function $e(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}function Le(t,e,n,r,i){var o=t*t,s=o*t;return((1-3*t+3*o-s)*e+(4-6*o+3*s)*n+(1+3*t+3*o-3*s)*r+s*i)/6}se(le,_e,{copy(t){return Object.assign(new this.constructor,this,t)},displayable(){return this.rgb().displayable()},hex:ke,formatHex:ke,formatHex8:function(){return this.rgb().formatHex8()},formatHsl:function(){return ze(this).formatHsl()},formatRgb:Se,toString:Se}),se(Ae,Me,ae(le,{brighter(t){return t=null==t?he:Math.pow(he,t),new Ae(this.r*t,this.g*t,this.b*t,this.opacity)},darker(t){return t=null==t?ce:Math.pow(ce,t),new Ae(this.r*t,this.g*t,this.b*t,this.opacity)},rgb(){return this},clamp(){return new Ae(je(this.r),je(this.g),je(this.b),De(this.opacity))},displayable(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:Te,formatHex:Te,formatHex8:function(){return`#${Re(this.r)}${Re(this.g)}${Re(this.b)}${Re(255*(isNaN(this.opacity)?1:this.opacity))}`},formatRgb:Ne,toString:Ne})),se(Ie,(function(t,e,n,r){return 1===arguments.length?ze(t):new Ie(t,e,n,null==r?1:r)}),ae(le,{brighter(t){return t=null==t?he:Math.pow(he,t),new Ie(this.h,this.s,this.l*t,this.opacity)},darker(t){return t=null==t?ce:Math.pow(ce,t),new Ie(this.h,this.s,this.l*t,this.opacity)},rgb(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*e,i=2*n-r;return new Ae($e(t>=240?t-240:t+120,i,r),$e(t,i,r),$e(t<120?t+240:t-120,i,r),this.opacity)},clamp(){return new Ie(Be(this.h),Fe(this.s),Fe(this.l),De(this.opacity))},displayable(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl(){const t=De(this.opacity);return`${1===t?"hsl(":"hsla("}${Be(this.h)}, ${100*Fe(this.s)}%, ${100*Fe(this.l)}%${1===t?")":`, ${t})`}`}}));const He=t=>()=>t;function Ve(t,e){var n=e-t;return n?function(t,e){return function(n){return t+n*e}}(t,n):He(isNaN(t)?e:t)}const qe=function t(e){var n=function(t){return 1==(t=+t)?Ve:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(r){return Math.pow(t+r*e,n)}}(e,n,t):He(isNaN(e)?n:e)}}(e);function r(t,e){var r=n((t=Me(t)).r,(e=Me(e)).r),i=n(t.g,e.g),o=n(t.b,e.b),s=Ve(t.opacity,e.opacity);return function(e){return t.r=r(e),t.g=i(e),t.b=o(e),t.opacity=s(e),t+""}}return r.gamma=t,r}(1);function We(t){return function(e){var n,r,i=e.length,o=new Array(i),s=new Array(i),a=new Array(i);for(n=0;n<i;++n)r=Me(e[n]),o[n]=r.r||0,s[n]=r.g||0,a[n]=r.b||0;return o=t(o),s=t(s),a=t(a),r.opacity=1,function(t){return r.r=o(t),r.g=s(t),r.b=a(t),r+""}}}We((function(t){var e=t.length-1;return function(n){var r=n<=0?n=0:n>=1?(n=1,e-1):Math.floor(n*e),i=t[r],o=t[r+1],s=r>0?t[r-1]:2*i-o,a=r<e-1?t[r+2]:2*o-i;return Le((n-r/e)*e,s,i,o,a)}})),We((function(t){var e=t.length;return function(n){var r=Math.floor(((n%=1)<0?++n:n)*e),i=t[(r+e-1)%e],o=t[r%e],s=t[(r+1)%e],a=t[(r+2)%e];return Le((n-r/e)*e,i,o,s,a)}}));var Ue=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Ye=new RegExp(Ue.source,"g");function Je(t,e){var n,r,i,o=Ue.lastIndex=Ye.lastIndex=0,s=-1,a=[],l=[];for(t+="",e+="";(n=Ue.exec(t))&&(r=Ye.exec(e));)(i=r.index)>o&&(i=e.slice(o,i),a[s]?a[s]+=i:a[++s]=i),(n=n[0])===(r=r[0])?a[s]?a[s]+=r:a[++s]=r:(a[++s]=null,l.push({i:s,x:Xt(n,r)})),o=Ye.lastIndex;return o<e.length&&(i=e.slice(o),a[s]?a[s]+=i:a[++s]=i),a.length<2?l[0]?function(t){return function(e){return t(e)+""}}(l[0].x):function(t){return function(){return t}}(e):(e=l.length,function(t){for(var n,r=0;r<e;++r)a[(n=l[r]).i]=n.x(t);return a.join("")})}function Xe(t,e){var n;return("number"==typeof e?Xt:e instanceof _e?qe:(n=_e(e))?(e=n,qe):Je)(t,e)}function Ke(t){return function(){this.removeAttribute(t)}}function Ge(t){return function(){this.removeAttributeNS(t.space,t.local)}}function Ze(t,e,n){var r,i,o=n+"";return function(){var s=this.getAttribute(t);return s===o?null:s===r?i:i=e(r=s,n)}}function Qe(t,e,n){var r,i,o=n+"";return function(){var s=this.getAttributeNS(t.space,t.local);return s===o?null:s===r?i:i=e(r=s,n)}}function tn(t,e,n){var r,i,o;return function(){var s,a,l=n(this);if(null!=l)return(s=this.getAttribute(t))===(a=l+"")?null:s===r&&a===i?o:(i=a,o=e(r=s,l));this.removeAttribute(t)}}function en(t,e,n){var r,i,o;return function(){var s,a,l=n(this);if(null!=l)return(s=this.getAttributeNS(t.space,t.local))===(a=l+"")?null:s===r&&a===i?o:(i=a,o=e(r=s,l));this.removeAttributeNS(t.space,t.local)}}function nn(t,e){return function(n){this.setAttribute(t,e.call(this,n))}}function rn(t,e){return function(n){this.setAttributeNS(t.space,t.local,e.call(this,n))}}function on(t,e){var n,r;function i(){var i=e.apply(this,arguments);return i!==r&&(n=(r=i)&&rn(t,i)),n}return i._value=e,i}function sn(t,e){var n,r;function i(){var i=e.apply(this,arguments);return i!==r&&(n=(r=i)&&nn(t,i)),n}return i._value=e,i}function an(t,e){return function(){Ut(this,t).delay=+e.apply(this,arguments)}}function ln(t,e){return e=+e,function(){Ut(this,t).delay=e}}function cn(t,e){return function(){Yt(this,t).duration=+e.apply(this,arguments)}}function hn(t,e){return e=+e,function(){Yt(this,t).duration=e}}function un(t,e){if("function"!=typeof e)throw new Error;return function(){Yt(this,t).ease=e}}function dn(t,e,n){var r,i,o=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var e=t.indexOf(".");return e>=0&&(t=t.slice(0,e)),!t||"start"===t}))}(e)?Ut:Yt;return function(){var s=o(this,t),a=s.on;a!==r&&(i=(r=a).copy()).on(e,n),s.on=i}}var pn=vt.prototype.constructor;function fn(t){return function(){this.style.removeProperty(t)}}function gn(t,e,n){return function(r){this.style.setProperty(t,e.call(this,r),n)}}function mn(t,e,n){var r,i;function o(){var o=e.apply(this,arguments);return o!==i&&(r=(i=o)&&gn(t,o,n)),r}return o._value=e,o}function vn(t){return function(e){this.textContent=t.call(this,e)}}function yn(t){var e,n;function r(){var r=t.apply(this,arguments);return r!==n&&(e=(n=r)&&vn(r)),e}return r._value=t,r}var bn=0;function wn(t,e,n,r){this._groups=t,this._parents=e,this._name=n,this._id=r}function xn(){return++bn}var kn=vt.prototype;wn.prototype=function(t){return vt().transition(t)}.prototype={constructor:wn,select:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=i(t));for(var r=this._groups,o=r.length,s=new Array(o),a=0;a<o;++a)for(var l,c,h=r[a],u=h.length,d=s[a]=new Array(u),p=0;p<u;++p)(l=h[p])&&(c=t.call(l,l.__data__,p,h))&&("__data__"in l&&(c.__data__=l.__data__),d[p]=c,Wt(d[p],e,n,p,d,Jt(l,n)));return new wn(s,this._parents,e,n)},selectAll:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=a(t));for(var r=this._groups,i=r.length,o=[],s=[],l=0;l<i;++l)for(var c,h=r[l],u=h.length,d=0;d<u;++d)if(c=h[d]){for(var p,f=t.call(c,c.__data__,d,h),g=Jt(c,n),m=0,v=f.length;m<v;++m)(p=f[m])&&Wt(p,e,n,m,f,g);o.push(f),s.push(c)}return new wn(o,s,e,n)},selectChild:kn.selectChild,selectChildren:kn.selectChildren,filter:function(t){"function"!=typeof t&&(t=l(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,s=e[i],a=s.length,c=r[i]=[],h=0;h<a;++h)(o=s[h])&&t.call(o,o.__data__,h,s)&&c.push(o);return new wn(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var e=this._groups,n=t._groups,r=e.length,i=n.length,o=Math.min(r,i),s=new Array(r),a=0;a<o;++a)for(var l,c=e[a],h=n[a],u=c.length,d=s[a]=new Array(u),p=0;p<u;++p)(l=c[p]||h[p])&&(d[p]=l);for(;a<r;++a)s[a]=e[a];return new wn(s,this._parents,this._name,this._id)},selection:function(){return new pn(this._groups,this._parents)},transition:function(){for(var t=this._name,e=this._id,n=xn(),r=this._groups,i=r.length,o=0;o<i;++o)for(var s,a=r[o],l=a.length,c=0;c<l;++c)if(s=a[c]){var h=Jt(s,e);Wt(s,t,n,c,a,{time:h.time+h.delay+h.duration,delay:0,duration:h.duration,ease:h.ease})}return new wn(r,this._parents,t,n)},call:kn.call,nodes:kn.nodes,node:kn.node,size:kn.size,empty:kn.empty,each:kn.each,on:function(t,e){var n=this._id;return arguments.length<2?Jt(this.node(),n).on.on(t):this.each(dn(n,t,e))},attr:function(t,e){var n=_(t),r="transform"===n?ne:Xe;return this.attrTween(t,"function"==typeof e?(n.local?en:tn)(n,r,oe(this,"attr."+t,e)):null==e?(n.local?Ge:Ke)(n):(n.local?Qe:Ze)(n,r,e))},attrTween:function(t,e){var n="attr."+t;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==e)return this.tween(n,null);if("function"!=typeof e)throw new Error;var r=_(t);return this.tween(n,(r.local?on:sn)(r,e))},style:function(t,e,n){var r="transform"==(t+="")?ee:Xe;return null==e?this.styleTween(t,function(t,e){var n,r,i;return function(){var o=P(this,t),s=(this.style.removeProperty(t),P(this,t));return o===s?null:o===n&&s===r?i:i=e(n=o,r=s)}}(t,r)).on("end.style."+t,fn(t)):"function"==typeof e?this.styleTween(t,function(t,e,n){var r,i,o;return function(){var s=P(this,t),a=n(this),l=a+"";return null==a&&(this.style.removeProperty(t),l=a=P(this,t)),s===l?null:s===r&&l===i?o:(i=l,o=e(r=s,a))}}(t,r,oe(this,"style."+t,e))).each(function(t,e){var n,r,i,o,s="style."+e,a="end."+s;return function(){var l=Yt(this,t),c=l.on,h=null==l.value[s]?o||(o=fn(e)):void 0;c===n&&i===h||(r=(n=c).copy()).on(a,i=h),l.on=r}}(this._id,t)):this.styleTween(t,function(t,e,n){var r,i,o=n+"";return function(){var s=P(this,t);return s===o?null:s===r?i:i=e(r=s,n)}}(t,r,e),n).on("end.style."+t,null)},styleTween:function(t,e,n){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==e)return this.tween(r,null);if("function"!=typeof e)throw new Error;return this.tween(r,mn(t,e,null==n?"":n))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var e=t(this);this.textContent=null==e?"":e}}(oe(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},textTween:function(t){var e="text";if(arguments.length<1)return(e=this.tween(e))&&e._value;if(null==t)return this.tween(e,null);if("function"!=typeof t)throw new Error;return this.tween(e,yn(t))},remove:function(){return this.on("end.remove",function(t){return function(){var e=this.parentNode;for(var n in this.__transition)if(+n!==t)return;e&&e.removeChild(this)}}(this._id))},tween:function(t,e){var n=this._id;if(t+="",arguments.length<2){for(var r,i=Jt(this.node(),n).tween,o=0,s=i.length;o<s;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==e?re:ie)(n,t,e))},delay:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?an:ln)(e,t)):Jt(this.node(),e).delay},duration:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?cn:hn)(e,t)):Jt(this.node(),e).duration},ease:function(t){var e=this._id;return arguments.length?this.each(un(e,t)):Jt(this.node(),e).ease},easeVarying:function(t){if("function"!=typeof t)throw new Error;return this.each(function(t,e){return function(){var n=e.apply(this,arguments);if("function"!=typeof n)throw new Error;Yt(this,t).ease=n}}(this._id,t))},end:function(){var t,e,n=this,r=n._id,i=n.size();return new Promise((function(o,s){var a={value:s},l={value:function(){0==--i&&o()}};n.each((function(){var n=Yt(this,r),i=n.on;i!==t&&((e=(t=i).copy())._.cancel.push(a),e._.interrupt.push(a),e._.end.push(l)),n.on=e})),0===i&&o()}))},[Symbol.iterator]:kn[Symbol.iterator]};var Sn={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function _n(t,e){for(var n;!(n=t.__transition)||!(n=n[e]);)if(!(t=t.parentNode))throw new Error(`transition ${e} not found`);return n}vt.prototype.interrupt=function(t){return this.each((function(){!function(t,e){var n,r,i,o=t.__transition,s=!0;if(o){for(i in e=null==e?null:e+"",o)(n=o[i]).name===e?(r=n.state>2&&n.state<5,n.state=6,n.timer.stop(),n.on.call(r?"interrupt":"cancel",t,t.__data__,n.index,n.group),delete o[i]):s=!1;s&&delete t.__transition}}(this,t)}))},vt.prototype.transition=function(t){var e,n;t instanceof wn?(e=t._id,t=t._name):(e=xn(),(n=Sn).time=Pt(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var s,a=r[o],l=a.length,c=0;c<l;++c)(s=a[c])&&Wt(s,t,e,c,a,n||_n(s,e));return new wn(r,this._parents,t,e)};const{abs:En,max:Cn,min:On}=Math;function Mn(t){return{type:t}}function An(t){return"string"==typeof t?new gt([[document.querySelector(t)]],[document.documentElement]):new gt([[t]],ft)}function Tn(t){let e;for(;e=t.sourceEvent;)t=e;return t}function Nn(t,e){if(t=Tn(t),void 0===e&&(e=t.currentTarget),e){var n=e.ownerSVGElement||e;if(n.createSVGPoint){var r=n.createSVGPoint();return r.x=t.clientX,r.y=t.clientY,[(r=r.matrixTransform(e.getScreenCTM().inverse())).x,r.y]}if(e.getBoundingClientRect){var i=e.getBoundingClientRect();return[t.clientX-i.left-e.clientLeft,t.clientY-i.top-e.clientTop]}}return[t.pageX,t.pageY]}["w","e"].map(Mn),["n","s"].map(Mn),["n","w","e","s","nw","ne","sw","se"].map(Mn);const Dn={passive:!1},jn={capture:!0,passive:!1};function Rn(t){t.stopImmediatePropagation()}function Pn(t){t.preventDefault(),t.stopImmediatePropagation()}const zn=t=>()=>t;function In(t,{sourceEvent:e,subject:n,target:r,identifier:i,active:o,x:s,y:a,dx:l,dy:c,dispatch:h}){Object.defineProperties(this,{type:{value:t,enumerable:!0,configurable:!0},sourceEvent:{value:e,enumerable:!0,configurable:!0},subject:{value:n,enumerable:!0,configurable:!0},target:{value:r,enumerable:!0,configurable:!0},identifier:{value:i,enumerable:!0,configurable:!0},active:{value:o,enumerable:!0,configurable:!0},x:{value:s,enumerable:!0,configurable:!0},y:{value:a,enumerable:!0,configurable:!0},dx:{value:l,enumerable:!0,configurable:!0},dy:{value:c,enumerable:!0,configurable:!0},_:{value:h}})}function Bn(t){return!t.ctrlKey&&!t.button}function Fn(){return this.parentNode}function $n(t,e){return null==e?{x:t.x,y:t.y}:e}function Ln(){return navigator.maxTouchPoints||"ontouchstart"in this}function Hn(){var t,e,n,r,i=Bn,o=Fn,s=$n,a=Ln,l={},c=_t("start","drag","end"),h=0,u=0;function d(t){t.on("mousedown.drag",p).filter(a).on("touchstart.drag",m).on("touchmove.drag",v,Dn).on("touchend.drag touchcancel.drag",y).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function p(s,a){if(!r&&i.call(this,s,a)){var l=b(this,o.call(this,s,a),s,a,"mouse");l&&(An(s.view).on("mousemove.drag",f,jn).on("mouseup.drag",g,jn),function(t){var e=t.document.documentElement,n=An(t).on("dragstart.drag",Pn,jn);"onselectstart"in e?n.on("selectstart.drag",Pn,jn):(e.__noselect=e.style.MozUserSelect,e.style.MozUserSelect="none")}(s.view),Rn(s),n=!1,t=s.clientX,e=s.clientY,l("start",s))}}function f(r){if(Pn(r),!n){var i=r.clientX-t,o=r.clientY-e;n=i*i+o*o>u}l.mouse("drag",r)}function g(t){An(t.view).on("mousemove.drag mouseup.drag",null),function(t,e){var n=t.document.documentElement,r=An(t).on("dragstart.drag",null);e&&(r.on("click.drag",Pn,jn),setTimeout((function(){r.on("click.drag",null)}),0)),"onselectstart"in n?r.on("selectstart.drag",null):(n.style.MozUserSelect=n.__noselect,delete n.__noselect)}(t.view,n),Pn(t),l.mouse("end",t)}function m(t,e){if(i.call(this,t,e)){var n,r,s=t.changedTouches,a=o.call(this,t,e),l=s.length;for(n=0;n<l;++n)(r=b(this,a,t,e,s[n].identifier,s[n]))&&(Rn(t),r("start",t,s[n]))}}function v(t){var e,n,r=t.changedTouches,i=r.length;for(e=0;e<i;++e)(n=l[r[e].identifier])&&(Pn(t),n("drag",t,r[e]))}function y(t){var e,n,i=t.changedTouches,o=i.length;for(r&&clearTimeout(r),r=setTimeout((function(){r=null}),500),e=0;e<o;++e)(n=l[i[e].identifier])&&(Rn(t),n("end",t,i[e]))}function b(t,e,n,r,i,o){var a,u,p,f=c.copy(),g=Nn(o||n,e);if(null!=(p=s.call(t,new In("beforestart",{sourceEvent:n,target:d,identifier:i,active:h,x:g[0],y:g[1],dx:0,dy:0,dispatch:f}),r)))return a=p.x-g[0]||0,u=p.y-g[1]||0,function n(o,s,c){var m,v=g;switch(o){case"start":l[i]=n,m=h++;break;case"end":delete l[i],--h;case"drag":g=Nn(c||s,e),m=h}f.call(o,t,new In(o,{sourceEvent:s,subject:p,target:d,identifier:i,active:m,x:g[0]+a,y:g[1]+u,dx:g[0]-v[0],dy:g[1]-v[1],dispatch:f}),r)}}return d.filter=function(t){return arguments.length?(i="function"==typeof t?t:zn(!!t),d):i},d.container=function(t){return arguments.length?(o="function"==typeof t?t:zn(t),d):o},d.subject=function(t){return arguments.length?(s="function"==typeof t?t:zn(t),d):s},d.touchable=function(t){return arguments.length?(a="function"==typeof t?t:zn(!!t),d):a},d.on=function(){var t=c.on.apply(c,arguments);return t===c?d:t},d.clickDistance=function(t){return arguments.length?(u=(t=+t)*t,d):Math.sqrt(u)},d}In.prototype.on=function(){var t=this._.on.apply(this._,arguments);return t===this._?this:t};const Vn=Math.PI,qn=2*Vn,Wn=1e-6,Un=qn-Wn;function Yn(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function Jn(){return new Yn}Yn.prototype=Jn.prototype={constructor:Yn,moveTo:function(t,e){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,e){this._+="L"+(this._x1=+t)+","+(this._y1=+e)},quadraticCurveTo:function(t,e,n,r){this._+="Q"+ +t+","+ +e+","+(this._x1=+n)+","+(this._y1=+r)},bezierCurveTo:function(t,e,n,r,i,o){this._+="C"+ +t+","+ +e+","+ +n+","+ +r+","+(this._x1=+i)+","+(this._y1=+o)},arcTo:function(t,e,n,r,i){t=+t,e=+e,n=+n,r=+r,i=+i;var o=this._x1,s=this._y1,a=n-t,l=r-e,c=o-t,h=s-e,u=c*c+h*h;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=e);else if(u>Wn)if(Math.abs(h*a-l*c)>Wn&&i){var d=n-o,p=r-s,f=a*a+l*l,g=d*d+p*p,m=Math.sqrt(f),v=Math.sqrt(u),y=i*Math.tan((Vn-Math.acos((f+u-g)/(2*m*v)))/2),b=y/v,w=y/m;Math.abs(b-1)>Wn&&(this._+="L"+(t+b*c)+","+(e+b*h)),this._+="A"+i+","+i+",0,0,"+ +(h*d>c*p)+","+(this._x1=t+w*a)+","+(this._y1=e+w*l)}else this._+="L"+(this._x1=t)+","+(this._y1=e)},arc:function(t,e,n,r,i,o){t=+t,e=+e,o=!!o;var s=(n=+n)*Math.cos(r),a=n*Math.sin(r),l=t+s,c=e+a,h=1^o,u=o?r-i:i-r;if(n<0)throw new Error("negative radius: "+n);null===this._x1?this._+="M"+l+","+c:(Math.abs(this._x1-l)>Wn||Math.abs(this._y1-c)>Wn)&&(this._+="L"+l+","+c),n&&(u<0&&(u=u%qn+qn),u>Un?this._+="A"+n+","+n+",0,1,"+h+","+(t-s)+","+(e-a)+"A"+n+","+n+",0,1,"+h+","+(this._x1=l)+","+(this._y1=c):u>Wn&&(this._+="A"+n+","+n+",0,"+ +(u>=Vn)+","+h+","+(this._x1=t+n*Math.cos(i))+","+(this._y1=e+n*Math.sin(i))))},rect:function(t,e,n,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)+"h"+ +n+"v"+ +r+"h"+-n+"Z"},toString:function(){return this._}};const Xn=Jn;function Kn(t){return An(rt(t).call(document.documentElement))}function Gn(t,e){return t.target&&(t=Tn(t),void 0===e&&(e=t.currentTarget),t=t.touches||[t]),Array.from(t,(t=>Nn(t,e)))}function Zn(t){return function(){return t}}function Qn(t){this._context=t}function tr(t){return new Qn(t)}function er(t){return t[0]}function nr(t){return t[1]}function rr(t,e){var n=Zn(!0),r=null,i=tr,o=null;function s(s){var a,l,c,h=(s=function(t){return"object"==typeof t&&"length"in t?t:Array.from(t)}(s)).length,u=!1;for(null==r&&(o=i(c=Xn())),a=0;a<=h;++a)!(a<h&&n(l=s[a],a,s))===u&&((u=!u)?o.lineStart():o.lineEnd()),u&&o.point(+t(l,a,s),+e(l,a,s));if(c)return o=null,c+""||null}return t="function"==typeof t?t:void 0===t?er:Zn(t),e="function"==typeof e?e:void 0===e?nr:Zn(e),s.x=function(e){return arguments.length?(t="function"==typeof e?e:Zn(+e),s):t},s.y=function(t){return arguments.length?(e="function"==typeof t?t:Zn(+t),s):e},s.defined=function(t){return arguments.length?(n="function"==typeof t?t:Zn(!!t),s):n},s.curve=function(t){return arguments.length?(i=t,null!=r&&(o=i(r)),s):i},s.context=function(t){return arguments.length?(null==t?r=o=null:o=i(r=t),s):r},s}function ir(t,e,n){this.k=t,this.x=e,this.y=n}Array.prototype.slice,Qn.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:this._context.lineTo(t,e)}}},ir.prototype={constructor:ir,scale:function(t){return 1===t?this:new ir(this.k*t,this.x,this.y)},translate:function(t,e){return 0===t&0===e?this:new ir(this.k,this.x+this.k*t,this.y+this.k*e)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}},new ir(1,0,0),ir.prototype},7823:(t,e,n)=>{"use strict";function r(t){this.content=t}n.d(e,{aw:()=>G,PW:()=>at,HY:()=>a,vc:()=>u,ZU:()=>J,NB:()=>N,Ts:()=>A,e4:()=>d,V_:()=>X,p2:()=>p}),r.prototype={constructor:r,find:function(t){for(var e=0;e<this.content.length;e+=2)if(this.content[e]===t)return e;return-1},get:function(t){var e=this.find(t);return-1==e?void 0:this.content[e+1]},update:function(t,e,n){var i=n&&n!=t?this.remove(n):this,o=i.find(t),s=i.content.slice();return-1==o?s.push(n||t,e):(s[o+1]=e,n&&(s[o]=n)),new r(s)},remove:function(t){var e=this.find(t);if(-1==e)return this;var n=this.content.slice();return n.splice(e,2),new r(n)},addToStart:function(t,e){return new r([t,e].concat(this.remove(t).content))},addToEnd:function(t,e){var n=this.remove(t).content.slice();return n.push(t,e),new r(n)},addBefore:function(t,e,n){var i=this.remove(e),o=i.content.slice(),s=i.find(t);return o.splice(-1==s?o.length:s,0,e,n),new r(o)},forEach:function(t){for(var e=0;e<this.content.length;e+=2)t(this.content[e],this.content[e+1])},prepend:function(t){return(t=r.from(t)).size?new r(t.content.concat(this.subtract(t).content)):this},append:function(t){return(t=r.from(t)).size?new r(this.subtract(t).content.concat(t.content)):this},subtract:function(t){var e=this;t=r.from(t);for(var n=0;n<t.content.length;n+=2)e=e.remove(t.content[n]);return e},get size(){return this.content.length>>1}},r.from=function(t){if(t instanceof r)return t;var e=[];if(t)for(var n in t)e.push(n,t[n]);return new r(e)};const i=r;function o(t,e,n){for(let r=0;;r++){if(r==t.childCount||r==e.childCount)return t.childCount==e.childCount?null:n;let i=t.child(r),s=e.child(r);if(i!=s){if(!i.sameMarkup(s))return n;if(i.isText&&i.text!=s.text){for(let t=0;i.text[t]==s.text[t];t++)n++;return n}if(i.content.size||s.content.size){let t=o(i.content,s.content,n+1);if(null!=t)return t}n+=i.nodeSize}else n+=i.nodeSize}}function s(t,e,n,r){for(let i=t.childCount,o=e.childCount;;){if(0==i||0==o)return i==o?null:{a:n,b:r};let a=t.child(--i),l=e.child(--o),c=a.nodeSize;if(a!=l){if(!a.sameMarkup(l))return{a:n,b:r};if(a.isText&&a.text!=l.text){let t=0,e=Math.min(a.text.length,l.text.length);for(;t<e&&a.text[a.text.length-t-1]==l.text[l.text.length-t-1];)t++,n--,r--;return{a:n,b:r}}if(a.content.size||l.content.size){let t=s(a.content,l.content,n-1,r-1);if(t)return t}n-=c,r-=c}else n-=c,r-=c}}class a{constructor(t,e){if(this.content=t,this.size=e||0,null==e)for(let e=0;e<t.length;e++)this.size+=t[e].nodeSize}nodesBetween(t,e,n,r=0,i){for(let o=0,s=0;s<e;o++){let a=this.content[o],l=s+a.nodeSize;if(l>t&&!1!==n(a,r+s,i||null,o)&&a.content.size){let i=s+1;a.nodesBetween(Math.max(0,t-i),Math.min(a.content.size,e-i),n,r+i)}s=l}}descendants(t){this.nodesBetween(0,this.size,t)}textBetween(t,e,n,r){let i="",o=!0;return this.nodesBetween(t,e,((s,a)=>{s.isText?(i+=s.text.slice(Math.max(t,a)-a,e-a),o=!n):s.isLeaf?(r?i+="function"==typeof r?r(s):r:s.type.spec.leafText&&(i+=s.type.spec.leafText(s)),o=!n):!o&&s.isBlock&&(i+=n,o=!0)}),0),i}append(t){if(!t.size)return this;if(!this.size)return t;let e=this.lastChild,n=t.firstChild,r=this.content.slice(),i=0;for(e.isText&&e.sameMarkup(n)&&(r[r.length-1]=e.withText(e.text+n.text),i=1);i<t.content.length;i++)r.push(t.content[i]);return new a(r,this.size+t.size)}cut(t,e=this.size){if(0==t&&e==this.size)return this;let n=[],r=0;if(e>t)for(let i=0,o=0;o<e;i++){let s=this.content[i],a=o+s.nodeSize;a>t&&((o<t||a>e)&&(s=s.isText?s.cut(Math.max(0,t-o),Math.min(s.text.length,e-o)):s.cut(Math.max(0,t-o-1),Math.min(s.content.size,e-o-1))),n.push(s),r+=s.nodeSize),o=a}return new a(n,r)}cutByIndex(t,e){return t==e?a.empty:0==t&&e==this.content.length?this:new a(this.content.slice(t,e))}replaceChild(t,e){let n=this.content[t];if(n==e)return this;let r=this.content.slice(),i=this.size+e.nodeSize-n.nodeSize;return r[t]=e,new a(r,i)}addToStart(t){return new a([t].concat(this.content),this.size+t.nodeSize)}addToEnd(t){return new a(this.content.concat(t),this.size+t.nodeSize)}eq(t){if(this.content.length!=t.content.length)return!1;for(let e=0;e<this.content.length;e++)if(!this.content[e].eq(t.content[e]))return!1;return!0}get firstChild(){return this.content.length?this.content[0]:null}get lastChild(){return this.content.length?this.content[this.content.length-1]:null}get childCount(){return this.content.length}child(t){let e=this.content[t];if(!e)throw new RangeError("Index "+t+" out of range for "+this);return e}maybeChild(t){return this.content[t]||null}forEach(t){for(let e=0,n=0;e<this.content.length;e++){let r=this.content[e];t(r,n,e),n+=r.nodeSize}}findDiffStart(t,e=0){return o(this,t,e)}findDiffEnd(t,e=this.size,n=t.size){return s(this,t,e,n)}findIndex(t,e=-1){if(0==t)return c(0,t);if(t==this.size)return c(this.content.length,t);if(t>this.size||t<0)throw new RangeError(`Position ${t} outside of fragment (${this})`);for(let n=0,r=0;;n++){let i=r+this.child(n).nodeSize;if(i>=t)return i==t||e>0?c(n+1,i):c(n,r);r=i}}toString(){return"<"+this.toStringInner()+">"}toStringInner(){return this.content.join(", ")}toJSON(){return this.content.length?this.content.map((t=>t.toJSON())):null}static fromJSON(t,e){if(!e)return a.empty;if(!Array.isArray(e))throw new RangeError("Invalid input for Fragment.fromJSON");return new a(e.map(t.nodeFromJSON))}static fromArray(t){if(!t.length)return a.empty;let e,n=0;for(let r=0;r<t.length;r++){let i=t[r];n+=i.nodeSize,r&&i.isText&&t[r-1].sameMarkup(i)?(e||(e=t.slice(0,r)),e[e.length-1]=i.withText(e[e.length-1].text+i.text)):e&&e.push(i)}return new a(e||t,n)}static from(t){if(!t)return a.empty;if(t instanceof a)return t;if(Array.isArray(t))return this.fromArray(t);if(t.attrs)return new a([t],t.nodeSize);throw new RangeError("Can not convert "+t+" to a Fragment"+(t.nodesBetween?" (looks like multiple versions of prosemirror-model were loaded)":""))}}a.empty=new a([],0);const l={index:0,offset:0};function c(t,e){return l.index=t,l.offset=e,l}function h(t,e){if(t===e)return!0;if(!t||"object"!=typeof t||!e||"object"!=typeof e)return!1;let n=Array.isArray(t);if(Array.isArray(e)!=n)return!1;if(n){if(t.length!=e.length)return!1;for(let n=0;n<t.length;n++)if(!h(t[n],e[n]))return!1}else{for(let n in t)if(!(n in e)||!h(t[n],e[n]))return!1;for(let n in e)if(!(n in t))return!1}return!0}class u{constructor(t,e){this.type=t,this.attrs=e}addToSet(t){let e,n=!1;for(let r=0;r<t.length;r++){let i=t[r];if(this.eq(i))return t;if(this.type.excludes(i.type))e||(e=t.slice(0,r));else{if(i.type.excludes(this.type))return t;!n&&i.type.rank>this.type.rank&&(e||(e=t.slice(0,r)),e.push(this),n=!0),e&&e.push(i)}}return e||(e=t.slice()),n||e.push(this),e}removeFromSet(t){for(let e=0;e<t.length;e++)if(this.eq(t[e]))return t.slice(0,e).concat(t.slice(e+1));return t}isInSet(t){for(let e=0;e<t.length;e++)if(this.eq(t[e]))return!0;return!1}eq(t){return this==t||this.type==t.type&&h(this.attrs,t.attrs)}toJSON(){let t={type:this.type.name};for(let e in this.attrs){t.attrs=this.attrs;break}return t}static fromJSON(t,e){if(!e)throw new RangeError("Invalid input for Mark.fromJSON");let n=t.marks[e.type];if(!n)throw new RangeError(`There is no mark type ${e.type} in this schema`);return n.create(e.attrs)}static sameSet(t,e){if(t==e)return!0;if(t.length!=e.length)return!1;for(let n=0;n<t.length;n++)if(!t[n].eq(e[n]))return!1;return!0}static setFrom(t){if(!t||Array.isArray(t)&&0==t.length)return u.none;if(t instanceof u)return[t];let e=t.slice();return e.sort(((t,e)=>t.type.rank-e.type.rank)),e}}u.none=[];class d extends Error{}class p{constructor(t,e,n){this.content=t,this.openStart=e,this.openEnd=n}get size(){return this.content.size-this.openStart-this.openEnd}insertAt(t,e){let n=g(this.content,t+this.openStart,e);return n&&new p(n,this.openStart,this.openEnd)}removeBetween(t,e){return new p(f(this.content,t+this.openStart,e+this.openStart),this.openStart,this.openEnd)}eq(t){return this.content.eq(t.content)&&this.openStart==t.openStart&&this.openEnd==t.openEnd}toString(){return this.content+"("+this.openStart+","+this.openEnd+")"}toJSON(){if(!this.content.size)return null;let t={content:this.content.toJSON()};return this.openStart>0&&(t.openStart=this.openStart),this.openEnd>0&&(t.openEnd=this.openEnd),t}static fromJSON(t,e){if(!e)return p.empty;let n=e.openStart||0,r=e.openEnd||0;if("number"!=typeof n||"number"!=typeof r)throw new RangeError("Invalid input for Slice.fromJSON");return new p(a.fromJSON(t,e.content),n,r)}static maxOpen(t,e=!0){let n=0,r=0;for(let r=t.firstChild;r&&!r.isLeaf&&(e||!r.type.spec.isolating);r=r.firstChild)n++;for(let n=t.lastChild;n&&!n.isLeaf&&(e||!n.type.spec.isolating);n=n.lastChild)r++;return new p(t,n,r)}}function f(t,e,n){let{index:r,offset:i}=t.findIndex(e),o=t.maybeChild(r),{index:s,offset:a}=t.findIndex(n);if(i==e||o.isText){if(a!=n&&!t.child(s).isText)throw new RangeError("Removing non-flat range");return t.cut(0,e).append(t.cut(n))}if(r!=s)throw new RangeError("Removing non-flat range");return t.replaceChild(r,o.copy(f(o.content,e-i-1,n-i-1)))}function g(t,e,n,r){let{index:i,offset:o}=t.findIndex(e),s=t.maybeChild(i);if(o==e||s.isText)return r&&!r.canReplace(i,i,n)?null:t.cut(0,e).append(n).append(t.cut(e));let a=g(s.content,e-o-1,n);return a&&t.replaceChild(i,s.copy(a))}function m(t,e,n){if(n.openStart>t.depth)throw new d("Inserted content deeper than insertion position");if(t.depth-n.openStart!=e.depth-n.openEnd)throw new d("Inconsistent open depths");return v(t,e,n,0)}function v(t,e,n,r){let i=t.index(r),o=t.node(r);if(i==e.index(r)&&r<t.depth-n.openStart){let s=v(t,e,n,r+1);return o.copy(o.content.replaceChild(i,s))}if(n.content.size){if(n.openStart||n.openEnd||t.depth!=r||e.depth!=r){let{start:i,end:s}=function(t,e){let n=e.depth-t.openStart,r=e.node(n).copy(t.content);for(let t=n-1;t>=0;t--)r=e.node(t).copy(a.from(r));return{start:r.resolveNoCache(t.openStart+n),end:r.resolveNoCache(r.content.size-t.openEnd-n)}}(n,t);return k(o,S(t,i,s,e,r))}{let r=t.parent,i=r.content;return k(r,i.cut(0,t.parentOffset).append(n.content).append(i.cut(e.parentOffset)))}}return k(o,_(t,e,r))}function y(t,e){if(!e.type.compatibleContent(t.type))throw new d("Cannot join "+e.type.name+" onto "+t.type.name)}function b(t,e,n){let r=t.node(n);return y(r,e.node(n)),r}function w(t,e){let n=e.length-1;n>=0&&t.isText&&t.sameMarkup(e[n])?e[n]=t.withText(e[n].text+t.text):e.push(t)}function x(t,e,n,r){let i=(e||t).node(n),o=0,s=e?e.index(n):i.childCount;t&&(o=t.index(n),t.depth>n?o++:t.textOffset&&(w(t.nodeAfter,r),o++));for(let t=o;t<s;t++)w(i.child(t),r);e&&e.depth==n&&e.textOffset&&w(e.nodeBefore,r)}function k(t,e){if(!t.type.validContent(e))throw new d("Invalid content for node "+t.type.name);return t.copy(e)}function S(t,e,n,r,i){let o=t.depth>i&&b(t,e,i+1),s=r.depth>i&&b(n,r,i+1),l=[];return x(null,t,i,l),o&&s&&e.index(i)==n.index(i)?(y(o,s),w(k(o,S(t,e,n,r,i+1)),l)):(o&&w(k(o,_(t,e,i+1)),l),x(e,n,i,l),s&&w(k(s,_(n,r,i+1)),l)),x(r,null,i,l),new a(l)}function _(t,e,n){let r=[];return x(null,t,n,r),t.depth>n&&w(k(b(t,e,n+1),_(t,e,n+1)),r),x(e,null,n,r),new a(r)}p.empty=new p(a.empty,0,0);class E{constructor(t,e,n){this.pos=t,this.path=e,this.parentOffset=n,this.depth=e.length/3-1}resolveDepth(t){return null==t?this.depth:t<0?this.depth+t:t}get parent(){return this.node(this.depth)}get doc(){return this.node(0)}node(t){return this.path[3*this.resolveDepth(t)]}index(t){return this.path[3*this.resolveDepth(t)+1]}indexAfter(t){return t=this.resolveDepth(t),this.index(t)+(t!=this.depth||this.textOffset?1:0)}start(t){return 0==(t=this.resolveDepth(t))?0:this.path[3*t-1]+1}end(t){return t=this.resolveDepth(t),this.start(t)+this.node(t).content.size}before(t){if(!(t=this.resolveDepth(t)))throw new RangeError("There is no position before the top-level node");return t==this.depth+1?this.pos:this.path[3*t-1]}after(t){if(!(t=this.resolveDepth(t)))throw new RangeError("There is no position after the top-level node");return t==this.depth+1?this.pos:this.path[3*t-1]+this.path[3*t].nodeSize}get textOffset(){return this.pos-this.path[this.path.length-1]}get nodeAfter(){let t=this.parent,e=this.index(this.depth);if(e==t.childCount)return null;let n=this.pos-this.path[this.path.length-1],r=t.child(e);return n?t.child(e).cut(n):r}get nodeBefore(){let t=this.index(this.depth),e=this.pos-this.path[this.path.length-1];return e?this.parent.child(t).cut(0,e):0==t?null:this.parent.child(t-1)}posAtIndex(t,e){e=this.resolveDepth(e);let n=this.path[3*e],r=0==e?0:this.path[3*e-1]+1;for(let e=0;e<t;e++)r+=n.child(e).nodeSize;return r}marks(){let t=this.parent,e=this.index();if(0==t.content.size)return u.none;if(this.textOffset)return t.child(e).marks;let n=t.maybeChild(e-1),r=t.maybeChild(e);if(!n){let t=n;n=r,r=t}let i=n.marks;for(var o=0;o<i.length;o++)!1!==i[o].type.spec.inclusive||r&&i[o].isInSet(r.marks)||(i=i[o--].removeFromSet(i));return i}marksAcross(t){let e=this.parent.maybeChild(this.index());if(!e||!e.isInline)return null;let n=e.marks,r=t.parent.maybeChild(t.index());for(var i=0;i<n.length;i++)!1!==n[i].type.spec.inclusive||r&&n[i].isInSet(r.marks)||(n=n[i--].removeFromSet(n));return n}sharedDepth(t){for(let e=this.depth;e>0;e--)if(this.start(e)<=t&&this.end(e)>=t)return e;return 0}blockRange(t=this,e){if(t.pos<this.pos)return t.blockRange(this);for(let n=this.depth-(this.parent.inlineContent||this.pos==t.pos?1:0);n>=0;n--)if(t.pos<=this.end(n)&&(!e||e(this.node(n))))return new A(this,t,n);return null}sameParent(t){return this.pos-this.parentOffset==t.pos-t.parentOffset}max(t){return t.pos>this.pos?t:this}min(t){return t.pos<this.pos?t:this}toString(){let t="";for(let e=1;e<=this.depth;e++)t+=(t?"/":"")+this.node(e).type.name+"_"+this.index(e-1);return t+":"+this.parentOffset}static resolve(t,e){if(!(e>=0&&e<=t.content.size))throw new RangeError("Position "+e+" out of range");let n=[],r=0,i=e;for(let e=t;;){let{index:t,offset:o}=e.content.findIndex(i),s=i-o;if(n.push(e,t,r+o),!s)break;if(e=e.child(t),e.isText)break;i=s-1,r+=o+1}return new E(e,n,i)}static resolveCached(t,e){for(let n=0;n<C.length;n++){let r=C[n];if(r.pos==e&&r.doc==t)return r}let n=C[O]=E.resolve(t,e);return O=(O+1)%M,n}}let C=[],O=0,M=12;class A{constructor(t,e,n){this.$from=t,this.$to=e,this.depth=n}get start(){return this.$from.before(this.depth+1)}get end(){return this.$to.after(this.depth+1)}get parent(){return this.$from.node(this.depth)}get startIndex(){return this.$from.index(this.depth)}get endIndex(){return this.$to.indexAfter(this.depth)}}const T=Object.create(null);class N{constructor(t,e,n,r=u.none){this.type=t,this.attrs=e,this.marks=r,this.content=n||a.empty}get nodeSize(){return this.isLeaf?1:2+this.content.size}get childCount(){return this.content.childCount}child(t){return this.content.child(t)}maybeChild(t){return this.content.maybeChild(t)}forEach(t){this.content.forEach(t)}nodesBetween(t,e,n,r=0){this.content.nodesBetween(t,e,n,r,this)}descendants(t){this.nodesBetween(0,this.content.size,t)}get textContent(){return this.isLeaf&&this.type.spec.leafText?this.type.spec.leafText(this):this.textBetween(0,this.content.size,"")}textBetween(t,e,n,r){return this.content.textBetween(t,e,n,r)}get firstChild(){return this.content.firstChild}get lastChild(){return this.content.lastChild}eq(t){return this==t||this.sameMarkup(t)&&this.content.eq(t.content)}sameMarkup(t){return this.hasMarkup(t.type,t.attrs,t.marks)}hasMarkup(t,e,n){return this.type==t&&h(this.attrs,e||t.defaultAttrs||T)&&u.sameSet(this.marks,n||u.none)}copy(t=null){return t==this.content?this:new N(this.type,this.attrs,t,this.marks)}mark(t){return t==this.marks?this:new N(this.type,this.attrs,this.content,t)}cut(t,e=this.content.size){return 0==t&&e==this.content.size?this:this.copy(this.content.cut(t,e))}slice(t,e=this.content.size,n=!1){if(t==e)return p.empty;let r=this.resolve(t),i=this.resolve(e),o=n?0:r.sharedDepth(e),s=r.start(o),a=r.node(o).content.cut(r.pos-s,i.pos-s);return new p(a,r.depth-o,i.depth-o)}replace(t,e,n){return m(this.resolve(t),this.resolve(e),n)}nodeAt(t){for(let e=this;;){let{index:n,offset:r}=e.content.findIndex(t);if(e=e.maybeChild(n),!e)return null;if(r==t||e.isText)return e;t-=r+1}}childAfter(t){let{index:e,offset:n}=this.content.findIndex(t);return{node:this.content.maybeChild(e),index:e,offset:n}}childBefore(t){if(0==t)return{node:null,index:0,offset:0};let{index:e,offset:n}=this.content.findIndex(t);if(n<t)return{node:this.content.child(e),index:e,offset:n};let r=this.content.child(e-1);return{node:r,index:e-1,offset:n-r.nodeSize}}resolve(t){return E.resolveCached(this,t)}resolveNoCache(t){return E.resolve(this,t)}rangeHasMark(t,e,n){let r=!1;return e>t&&this.nodesBetween(t,e,(t=>(n.isInSet(t.marks)&&(r=!0),!r))),r}get isBlock(){return this.type.isBlock}get isTextblock(){return this.type.isTextblock}get inlineContent(){return this.type.inlineContent}get isInline(){return this.type.isInline}get isText(){return this.type.isText}get isLeaf(){return this.type.isLeaf}get isAtom(){return this.type.isAtom}toString(){if(this.type.spec.toDebugString)return this.type.spec.toDebugString(this);let t=this.type.name;return this.content.size&&(t+="("+this.content.toStringInner()+")"),j(this.marks,t)}contentMatchAt(t){let e=this.type.contentMatch.matchFragment(this.content,0,t);if(!e)throw new Error("Called contentMatchAt on a node with invalid content");return e}canReplace(t,e,n=a.empty,r=0,i=n.childCount){let o=this.contentMatchAt(t).matchFragment(n,r,i),s=o&&o.matchFragment(this.content,e);if(!s||!s.validEnd)return!1;for(let t=r;t<i;t++)if(!this.type.allowsMarks(n.child(t).marks))return!1;return!0}canReplaceWith(t,e,n,r){if(r&&!this.type.allowsMarks(r))return!1;let i=this.contentMatchAt(t).matchType(n),o=i&&i.matchFragment(this.content,e);return!!o&&o.validEnd}canAppend(t){return t.content.size?this.canReplace(this.childCount,this.childCount,t.content):this.type.compatibleContent(t.type)}check(){if(!this.type.validContent(this.content))throw new RangeError(`Invalid content for node ${this.type.name}: ${this.content.toString().slice(0,50)}`);let t=u.none;for(let e=0;e<this.marks.length;e++)t=this.marks[e].addToSet(t);if(!u.sameSet(t,this.marks))throw new RangeError(`Invalid collection of marks for node ${this.type.name}: ${this.marks.map((t=>t.type.name))}`);this.content.forEach((t=>t.check()))}toJSON(){let t={type:this.type.name};for(let e in this.attrs){t.attrs=this.attrs;break}return this.content.size&&(t.content=this.content.toJSON()),this.marks.length&&(t.marks=this.marks.map((t=>t.toJSON()))),t}static fromJSON(t,e){if(!e)throw new RangeError("Invalid input for Node.fromJSON");let n=null;if(e.marks){if(!Array.isArray(e.marks))throw new RangeError("Invalid mark data for Node.fromJSON");n=e.marks.map(t.markFromJSON)}if("text"==e.type){if("string"!=typeof e.text)throw new RangeError("Invalid text node in JSON");return t.text(e.text,n)}let r=a.fromJSON(t,e.content);return t.nodeType(e.type).create(e.attrs,r,n)}}N.prototype.text=void 0;class D extends N{constructor(t,e,n,r){if(super(t,e,null,r),!n)throw new RangeError("Empty text nodes are not allowed");this.text=n}toString(){return this.type.spec.toDebugString?this.type.spec.toDebugString(this):j(this.marks,JSON.stringify(this.text))}get textContent(){return this.text}textBetween(t,e){return this.text.slice(t,e)}get nodeSize(){return this.text.length}mark(t){return t==this.marks?this:new D(this.type,this.attrs,this.text,t)}withText(t){return t==this.text?this:new D(this.type,this.attrs,t,this.marks)}cut(t=0,e=this.text.length){return 0==t&&e==this.text.length?this:this.withText(this.text.slice(t,e))}eq(t){return this.sameMarkup(t)&&this.text==t.text}toJSON(){let t=super.toJSON();return t.text=this.text,t}}function j(t,e){for(let n=t.length-1;n>=0;n--)e=t[n].type.name+"("+e+")";return e}class R{constructor(t){this.validEnd=t,this.next=[],this.wrapCache=[]}static parse(t,e){let n=new P(t,e);if(null==n.next)return R.empty;let r=z(n);n.next&&n.err("Unexpected trailing text");let i=function(t){let e=Object.create(null);return function n(r){let i=[];r.forEach((e=>{t[e].forEach((({term:e,to:n})=>{if(!e)return;let r;for(let t=0;t<i.length;t++)i[t][0]==e&&(r=i[t][1]);H(t,n).forEach((t=>{r||i.push([e,r=[]]),-1==r.indexOf(t)&&r.push(t)}))}))}));let o=e[r.join(",")]=new R(r.indexOf(t.length-1)>-1);for(let t=0;t<i.length;t++){let r=i[t][1].sort(L);o.next.push({type:i[t][0],next:e[r.join(",")]||n(r)})}return o}(H(t,0))}(function(t){let e=[[]];return i(function t(e,o){if("choice"==e.type)return e.exprs.reduce(((e,n)=>e.concat(t(n,o))),[]);if("seq"!=e.type){if("star"==e.type){let s=n();return r(o,s),i(t(e.expr,s),s),[r(s)]}if("plus"==e.type){let s=n();return i(t(e.expr,o),s),i(t(e.expr,s),s),[r(s)]}if("opt"==e.type)return[r(o)].concat(t(e.expr,o));if("range"==e.type){let s=o;for(let r=0;r<e.min;r++){let r=n();i(t(e.expr,s),r),s=r}if(-1==e.max)i(t(e.expr,s),s);else for(let o=e.min;o<e.max;o++){let o=n();r(s,o),i(t(e.expr,s),o),s=o}return[r(s)]}if("name"==e.type)return[r(o,void 0,e.value)];throw new Error("Unknown expr type")}for(let r=0;;r++){let s=t(e.exprs[r],o);if(r==e.exprs.length-1)return s;i(s,o=n())}}(t,0),n()),e;function n(){return e.push([])-1}function r(t,n,r){let i={term:r,to:n};return e[t].push(i),i}function i(t,e){t.forEach((t=>t.to=e))}}(r));return function(t,e){for(let n=0,r=[t];n<r.length;n++){let t=r[n],i=!t.validEnd,o=[];for(let e=0;e<t.next.length;e++){let{type:n,next:s}=t.next[e];o.push(n.name),!i||n.isText||n.hasRequiredAttrs()||(i=!1),-1==r.indexOf(s)&&r.push(s)}i&&e.err("Only non-generatable nodes ("+o.join(", ")+") in a required position (see https://prosemirror.net/docs/guide/#generatable)")}}(i,n),i}matchType(t){for(let e=0;e<this.next.length;e++)if(this.next[e].type==t)return this.next[e].next;return null}matchFragment(t,e=0,n=t.childCount){let r=this;for(let i=e;r&&i<n;i++)r=r.matchType(t.child(i).type);return r}get inlineContent(){return this.next.length&&this.next[0].type.isInline}get defaultType(){for(let t=0;t<this.next.length;t++){let{type:e}=this.next[t];if(!e.isText&&!e.hasRequiredAttrs())return e}return null}compatible(t){for(let e=0;e<this.next.length;e++)for(let n=0;n<t.next.length;n++)if(this.next[e].type==t.next[n].type)return!0;return!1}fillBefore(t,e=!1,n=0){let r=[this];return function i(o,s){let l=o.matchFragment(t,n);if(l&&(!e||l.validEnd))return a.from(s.map((t=>t.createAndFill())));for(let t=0;t<o.next.length;t++){let{type:e,next:n}=o.next[t];if(!e.isText&&!e.hasRequiredAttrs()&&-1==r.indexOf(n)){r.push(n);let t=i(n,s.concat(e));if(t)return t}}return null}(this,[])}findWrapping(t){for(let e=0;e<this.wrapCache.length;e+=2)if(this.wrapCache[e]==t)return this.wrapCache[e+1];let e=this.computeWrapping(t);return this.wrapCache.push(t,e),e}computeWrapping(t){let e=Object.create(null),n=[{match:this,type:null,via:null}];for(;n.length;){let r=n.shift(),i=r.match;if(i.matchType(t)){let t=[];for(let e=r;e.type;e=e.via)t.push(e.type);return t.reverse()}for(let t=0;t<i.next.length;t++){let{type:o,next:s}=i.next[t];o.isLeaf||o.hasRequiredAttrs()||o.name in e||r.type&&!s.validEnd||(n.push({match:o.contentMatch,type:o,via:r}),e[o.name]=!0)}}return null}get edgeCount(){return this.next.length}edge(t){if(t>=this.next.length)throw new RangeError(`There's no ${t}th edge in this content match`);return this.next[t]}toString(){let t=[];return function e(n){t.push(n);for(let r=0;r<n.next.length;r++)-1==t.indexOf(n.next[r].next)&&e(n.next[r].next)}(this),t.map(((e,n)=>{let r=n+(e.validEnd?"*":" ")+" ";for(let n=0;n<e.next.length;n++)r+=(n?", ":"")+e.next[n].type.name+"->"+t.indexOf(e.next[n].next);return r})).join("\n")}}R.empty=new R(!0);class P{constructor(t,e){this.string=t,this.nodeTypes=e,this.inline=null,this.pos=0,this.tokens=t.split(/\s*(?=\b|\W|$)/),""==this.tokens[this.tokens.length-1]&&this.tokens.pop(),""==this.tokens[0]&&this.tokens.shift()}get next(){return this.tokens[this.pos]}eat(t){return this.next==t&&(this.pos++||!0)}err(t){throw new SyntaxError(t+" (in content expression '"+this.string+"')")}}function z(t){let e=[];do{e.push(I(t))}while(t.eat("|"));return 1==e.length?e[0]:{type:"choice",exprs:e}}function I(t){let e=[];do{e.push(B(t))}while(t.next&&")"!=t.next&&"|"!=t.next);return 1==e.length?e[0]:{type:"seq",exprs:e}}function B(t){let e=function(t){if(t.eat("(")){let e=z(t);return t.eat(")")||t.err("Missing closing paren"),e}if(!/\W/.test(t.next)){let e=function(t,e){let n=t.nodeTypes,r=n[e];if(r)return[r];let i=[];for(let t in n){let r=n[t];r.groups.indexOf(e)>-1&&i.push(r)}return 0==i.length&&t.err("No node type or group '"+e+"' found"),i}(t,t.next).map((e=>(null==t.inline?t.inline=e.isInline:t.inline!=e.isInline&&t.err("Mixing inline and block content"),{type:"name",value:e})));return t.pos++,1==e.length?e[0]:{type:"choice",exprs:e}}t.err("Unexpected token '"+t.next+"'")}(t);for(;;)if(t.eat("+"))e={type:"plus",expr:e};else if(t.eat("*"))e={type:"star",expr:e};else if(t.eat("?"))e={type:"opt",expr:e};else{if(!t.eat("{"))break;e=$(t,e)}return e}function F(t){/\D/.test(t.next)&&t.err("Expected number, got '"+t.next+"'");let e=Number(t.next);return t.pos++,e}function $(t,e){let n=F(t),r=n;return t.eat(",")&&(r="}"!=t.next?F(t):-1),t.eat("}")||t.err("Unclosed braced range"),{type:"range",min:n,max:r,expr:e}}function L(t,e){return e-t}function H(t,e){let n=[];return function e(r){let i=t[r];if(1==i.length&&!i[0].term)return e(i[0].to);n.push(r);for(let t=0;t<i.length;t++){let{term:r,to:o}=i[t];r||-1!=n.indexOf(o)||e(o)}}(e),n.sort(L)}function V(t){let e=Object.create(null);for(let n in t){let r=t[n];if(!r.hasDefault)return null;e[n]=r.default}return e}function q(t,e){let n=Object.create(null);for(let r in t){let i=e&&e[r];if(void 0===i){let e=t[r];if(!e.hasDefault)throw new RangeError("No value supplied for attribute "+r);i=e.default}n[r]=i}return n}function W(t){let e=Object.create(null);if(t)for(let n in t)e[n]=new Y(t[n]);return e}class U{constructor(t,e,n){this.name=t,this.schema=e,this.spec=n,this.markSet=null,this.groups=n.group?n.group.split(" "):[],this.attrs=W(n.attrs),this.defaultAttrs=V(this.attrs),this.contentMatch=null,this.inlineContent=null,this.isBlock=!(n.inline||"text"==t),this.isText="text"==t}get isInline(){return!this.isBlock}get isTextblock(){return this.isBlock&&this.inlineContent}get isLeaf(){return this.contentMatch==R.empty}get isAtom(){return this.isLeaf||!!this.spec.atom}get whitespace(){return this.spec.whitespace||(this.spec.code?"pre":"normal")}hasRequiredAttrs(){for(let t in this.attrs)if(this.attrs[t].isRequired)return!0;return!1}compatibleContent(t){return this==t||this.contentMatch.compatible(t.contentMatch)}computeAttrs(t){return!t&&this.defaultAttrs?this.defaultAttrs:q(this.attrs,t)}create(t=null,e,n){if(this.isText)throw new Error("NodeType.create can't construct text nodes");return new N(this,this.computeAttrs(t),a.from(e),u.setFrom(n))}createChecked(t=null,e,n){if(e=a.from(e),!this.validContent(e))throw new RangeError("Invalid content for node "+this.name);return new N(this,this.computeAttrs(t),e,u.setFrom(n))}createAndFill(t=null,e,n){if(t=this.computeAttrs(t),(e=a.from(e)).size){let t=this.contentMatch.fillBefore(e);if(!t)return null;e=t.append(e)}let r=this.contentMatch.matchFragment(e),i=r&&r.fillBefore(a.empty,!0);return i?new N(this,t,e.append(i),u.setFrom(n)):null}validContent(t){let e=this.contentMatch.matchFragment(t);if(!e||!e.validEnd)return!1;for(let e=0;e<t.childCount;e++)if(!this.allowsMarks(t.child(e).marks))return!1;return!0}allowsMarkType(t){return null==this.markSet||this.markSet.indexOf(t)>-1}allowsMarks(t){if(null==this.markSet)return!0;for(let e=0;e<t.length;e++)if(!this.allowsMarkType(t[e].type))return!1;return!0}allowedMarks(t){if(null==this.markSet)return t;let e;for(let n=0;n<t.length;n++)this.allowsMarkType(t[n].type)?e&&e.push(t[n]):e||(e=t.slice(0,n));return e?e.length?e:u.none:t}static compile(t,e){let n=Object.create(null);t.forEach(((t,r)=>n[t]=new U(t,e,r)));let r=e.spec.topNode||"doc";if(!n[r])throw new RangeError("Schema is missing its top node type ('"+r+"')");if(!n.text)throw new RangeError("Every schema needs a 'text' type");for(let t in n.text.attrs)throw new RangeError("The text node type should not have attributes");return n}}class Y{constructor(t){this.hasDefault=Object.prototype.hasOwnProperty.call(t,"default"),this.default=t.default}get isRequired(){return!this.hasDefault}}class J{constructor(t,e,n,r){this.name=t,this.rank=e,this.schema=n,this.spec=r,this.attrs=W(r.attrs),this.excluded=null;let i=V(this.attrs);this.instance=i?new u(this,i):null}create(t=null){return!t&&this.instance?this.instance:new u(this,q(this.attrs,t))}static compile(t,e){let n=Object.create(null),r=0;return t.forEach(((t,i)=>n[t]=new J(t,r++,e,i))),n}removeFromSet(t){for(var e=0;e<t.length;e++)t[e].type==this&&(t=t.slice(0,e).concat(t.slice(e+1)),e--);return t}isInSet(t){for(let e=0;e<t.length;e++)if(t[e].type==this)return t[e]}excludes(t){return this.excluded.indexOf(t)>-1}}class X{constructor(t){this.cached=Object.create(null),this.spec={nodes:i.from(t.nodes),marks:i.from(t.marks||{}),topNode:t.topNode},this.nodes=U.compile(this.spec.nodes,this),this.marks=J.compile(this.spec.marks,this);let e=Object.create(null);for(let t in this.nodes){if(t in this.marks)throw new RangeError(t+" can not be both a node and a mark");let n=this.nodes[t],r=n.spec.content||"",i=n.spec.marks;n.contentMatch=e[r]||(e[r]=R.parse(r,this.nodes)),n.inlineContent=n.contentMatch.inlineContent,n.markSet="_"==i?null:i?K(this,i.split(" ")):""!=i&&n.inlineContent?null:[]}for(let t in this.marks){let e=this.marks[t],n=e.spec.excludes;e.excluded=null==n?[e]:""==n?[]:K(this,n.split(" "))}this.nodeFromJSON=this.nodeFromJSON.bind(this),this.markFromJSON=this.markFromJSON.bind(this),this.topNodeType=this.nodes[this.spec.topNode||"doc"],this.cached.wrappings=Object.create(null)}node(t,e=null,n,r){if("string"==typeof t)t=this.nodeType(t);else{if(!(t instanceof U))throw new RangeError("Invalid node type: "+t);if(t.schema!=this)throw new RangeError("Node type from different schema used ("+t.name+")")}return t.createChecked(e,n,r)}text(t,e){let n=this.nodes.text;return new D(n,n.defaultAttrs,t,u.setFrom(e))}mark(t,e){return"string"==typeof t&&(t=this.marks[t]),t.create(e)}nodeFromJSON(t){return N.fromJSON(this,t)}markFromJSON(t){return u.fromJSON(this,t)}nodeType(t){let e=this.nodes[t];if(!e)throw new RangeError("Unknown node type: "+t);return e}}function K(t,e){let n=[];for(let r=0;r<e.length;r++){let i=e[r],o=t.marks[i],s=o;if(o)n.push(o);else for(let e in t.marks){let r=t.marks[e];("_"==i||r.spec.group&&r.spec.group.split(" ").indexOf(i)>-1)&&n.push(s=r)}if(!s)throw new SyntaxError("Unknown mark type: '"+e[r]+"'")}return n}class G{constructor(t,e){this.schema=t,this.rules=e,this.tags=[],this.styles=[],e.forEach((t=>{t.tag?this.tags.push(t):t.style&&this.styles.push(t)})),this.normalizeLists=!this.tags.some((e=>{if(!/^(ul|ol)\b/.test(e.tag)||!e.node)return!1;let n=t.nodes[e.node];return n.contentMatch.matchType(n)}))}parse(t,e={}){let n=new rt(this,e,!1);return n.addAll(t,e.from,e.to),n.finish()}parseSlice(t,e={}){let n=new rt(this,e,!0);return n.addAll(t,e.from,e.to),p.maxOpen(n.finish())}matchTag(t,e,n){for(let r=n?this.tags.indexOf(n)+1:0;r<this.tags.length;r++){let n=this.tags[r];if(it(t,n.tag)&&(void 0===n.namespace||t.namespaceURI==n.namespace)&&(!n.context||e.matchesContext(n.context))){if(n.getAttrs){let e=n.getAttrs(t);if(!1===e)continue;n.attrs=e||void 0}return n}}}matchStyle(t,e,n,r){for(let i=r?this.styles.indexOf(r)+1:0;i<this.styles.length;i++){let r=this.styles[i],o=r.style;if(!(0!=o.indexOf(t)||r.context&&!n.matchesContext(r.context)||o.length>t.length&&(61!=o.charCodeAt(t.length)||o.slice(t.length+1)!=e))){if(r.getAttrs){let t=r.getAttrs(e);if(!1===t)continue;r.attrs=t||void 0}return r}}}static schemaRules(t){let e=[];function n(t){let n=null==t.priority?50:t.priority,r=0;for(;r<e.length;r++){let t=e[r];if((null==t.priority?50:t.priority)<n)break}e.splice(r,0,t)}for(let e in t.marks){let r=t.marks[e].spec.parseDOM;r&&r.forEach((t=>{n(t=ot(t)),t.mark=e}))}for(let e in t.nodes){let r=t.nodes[e].spec.parseDOM;r&&r.forEach((t=>{n(t=ot(t)),t.node=e}))}return e}static fromSchema(t){return t.cached.domParser||(t.cached.domParser=new G(t,G.schemaRules(t)))}}const Z={address:!0,article:!0,aside:!0,blockquote:!0,canvas:!0,dd:!0,div:!0,dl:!0,fieldset:!0,figcaption:!0,figure:!0,footer:!0,form:!0,h1:!0,h2:!0,h3:!0,h4:!0,h5:!0,h6:!0,header:!0,hgroup:!0,hr:!0,li:!0,noscript:!0,ol:!0,output:!0,p:!0,pre:!0,section:!0,table:!0,tfoot:!0,ul:!0},Q={head:!0,noscript:!0,object:!0,script:!0,style:!0,title:!0},tt={ol:!0,ul:!0};function et(t,e,n){return null!=e?(e?1:0)|("full"===e?2:0):t&&"pre"==t.whitespace?3:-5&n}class nt{constructor(t,e,n,r,i,o,s){this.type=t,this.attrs=e,this.marks=n,this.pendingMarks=r,this.solid=i,this.options=s,this.content=[],this.activeMarks=u.none,this.stashMarks=[],this.match=o||(4&s?null:t.contentMatch)}findWrapping(t){if(!this.match){if(!this.type)return[];let e=this.type.contentMatch.fillBefore(a.from(t));if(!e){let e,n=this.type.contentMatch;return(e=n.findWrapping(t.type))?(this.match=n,e):null}this.match=this.type.contentMatch.matchFragment(e)}return this.match.findWrapping(t.type)}finish(t){if(!(1&this.options)){let t,e=this.content[this.content.length-1];if(e&&e.isText&&(t=/[ \t\r\n\u000c]+$/.exec(e.text))){let n=e;e.text.length==t[0].length?this.content.pop():this.content[this.content.length-1]=n.withText(n.text.slice(0,n.text.length-t[0].length))}}let e=a.from(this.content);return!t&&this.match&&(e=e.append(this.match.fillBefore(a.empty,!0))),this.type?this.type.create(this.attrs,e,this.marks):e}popFromStashMark(t){for(let e=this.stashMarks.length-1;e>=0;e--)if(t.eq(this.stashMarks[e]))return this.stashMarks.splice(e,1)[0]}applyPending(t){for(let e=0,n=this.pendingMarks;e<n.length;e++){let r=n[e];(this.type?this.type.allowsMarkType(r.type):st(r.type,t))&&!r.isInSet(this.activeMarks)&&(this.activeMarks=r.addToSet(this.activeMarks),this.pendingMarks=r.removeFromSet(this.pendingMarks))}}inlineContext(t){return this.type?this.type.inlineContent:this.content.length?this.content[0].isInline:t.parentNode&&!Z.hasOwnProperty(t.parentNode.nodeName.toLowerCase())}}class rt{constructor(t,e,n){this.parser=t,this.options=e,this.isOpen=n,this.open=0;let r,i=e.topNode,o=et(null,e.preserveWhitespace,0)|(n?4:0);r=i?new nt(i.type,i.attrs,u.none,u.none,!0,e.topMatch||i.type.contentMatch,o):new nt(n?null:t.schema.topNodeType,null,u.none,u.none,!0,null,o),this.nodes=[r],this.find=e.findPositions,this.needsBlock=!1}get top(){return this.nodes[this.open]}addDOM(t){if(3==t.nodeType)this.addTextNode(t);else if(1==t.nodeType){let e=t.getAttribute("style"),n=e?this.readStyles(function(t){let e,n=/\s*([\w-]+)\s*:\s*([^;]+)/g,r=[];for(;e=n.exec(t);)r.push(e[1],e[2].trim());return r}(e)):null,r=this.top;if(null!=n)for(let t=0;t<n.length;t++)this.addPendingMark(n[t]);if(this.addElement(t),null!=n)for(let t=0;t<n.length;t++)this.removePendingMark(n[t],r)}}addTextNode(t){let e=t.nodeValue,n=this.top;if(2&n.options||n.inlineContext(t)||/[^ \t\r\n\u000c]/.test(e)){if(1&n.options)e=2&n.options?e.replace(/\r\n?/g,"\n"):e.replace(/\r?\n|\r/g," ");else if(e=e.replace(/[ \t\r\n\u000c]+/g," "),/^[ \t\r\n\u000c]/.test(e)&&this.open==this.nodes.length-1){let r=n.content[n.content.length-1],i=t.previousSibling;(!r||i&&"BR"==i.nodeName||r.isText&&/[ \t\r\n\u000c]$/.test(r.text))&&(e=e.slice(1))}e&&this.insertNode(this.parser.schema.text(e)),this.findInText(t)}else this.findInside(t)}addElement(t,e){let n,r=t.nodeName.toLowerCase();tt.hasOwnProperty(r)&&this.parser.normalizeLists&&function(t){for(let e=t.firstChild,n=null;e;e=e.nextSibling){let t=1==e.nodeType?e.nodeName.toLowerCase():null;t&&tt.hasOwnProperty(t)&&n?(n.appendChild(e),e=n):"li"==t?n=e:t&&(n=null)}}(t);let i=this.options.ruleFromNode&&this.options.ruleFromNode(t)||(n=this.parser.matchTag(t,this,e));if(i?i.ignore:Q.hasOwnProperty(r))this.findInside(t),this.ignoreFallback(t);else if(!i||i.skip||i.closeParent){i&&i.closeParent?this.open=Math.max(0,this.open-1):i&&i.skip.nodeType&&(t=i.skip);let e,n=this.top,o=this.needsBlock;if(Z.hasOwnProperty(r))e=!0,n.type||(this.needsBlock=!0);else if(!t.firstChild)return void this.leafFallback(t);this.addAll(t),e&&this.sync(n),this.needsBlock=o}else this.addElementByRule(t,i,!1===i.consuming?n:void 0)}leafFallback(t){"BR"==t.nodeName&&this.top.type&&this.top.type.inlineContent&&this.addTextNode(t.ownerDocument.createTextNode("\n"))}ignoreFallback(t){"BR"!=t.nodeName||this.top.type&&this.top.type.inlineContent||this.findPlace(this.parser.schema.text("-"))}readStyles(t){let e=u.none;t:for(let n=0;n<t.length;n+=2)for(let r;;){let i=this.parser.matchStyle(t[n],t[n+1],this,r);if(!i)continue t;if(i.ignore)return null;if(e=this.parser.schema.marks[i.mark].create(i.attrs).addToSet(e),!1!==i.consuming)break;r=i}return e}addElementByRule(t,e,n){let r,i,o;e.node?(i=this.parser.schema.nodes[e.node],i.isLeaf?this.insertNode(i.create(e.attrs))||this.leafFallback(t):r=this.enter(i,e.attrs||null,e.preserveWhitespace)):(o=this.parser.schema.marks[e.mark].create(e.attrs),this.addPendingMark(o));let s=this.top;if(i&&i.isLeaf)this.findInside(t);else if(n)this.addElement(t,n);else if(e.getContent)this.findInside(t),e.getContent(t,this.parser.schema).forEach((t=>this.insertNode(t)));else{let n=t;"string"==typeof e.contentElement?n=t.querySelector(e.contentElement):"function"==typeof e.contentElement?n=e.contentElement(t):e.contentElement&&(n=e.contentElement),this.findAround(t,n,!0),this.addAll(n)}r&&this.sync(s)&&this.open--,o&&this.removePendingMark(o,s)}addAll(t,e,n){let r=e||0;for(let i=e?t.childNodes[e]:t.firstChild,o=null==n?null:t.childNodes[n];i!=o;i=i.nextSibling,++r)this.findAtPoint(t,r),this.addDOM(i);this.findAtPoint(t,r)}findPlace(t){let e,n;for(let r=this.open;r>=0;r--){let i=this.nodes[r],o=i.findWrapping(t);if(o&&(!e||e.length>o.length)&&(e=o,n=i,!o.length))break;if(i.solid)break}if(!e)return!1;this.sync(n);for(let t=0;t<e.length;t++)this.enterInner(e[t],null,!1);return!0}insertNode(t){if(t.isInline&&this.needsBlock&&!this.top.type){let t=this.textblockFromContext();t&&this.enterInner(t)}if(this.findPlace(t)){this.closeExtra();let e=this.top;e.applyPending(t.type),e.match&&(e.match=e.match.matchType(t.type));let n=e.activeMarks;for(let r=0;r<t.marks.length;r++)e.type&&!e.type.allowsMarkType(t.marks[r].type)||(n=t.marks[r].addToSet(n));return e.content.push(t.mark(n)),!0}return!1}enter(t,e,n){let r=this.findPlace(t.create(e));return r&&this.enterInner(t,e,!0,n),r}enterInner(t,e=null,n=!1,r){this.closeExtra();let i=this.top;i.applyPending(t),i.match=i.match&&i.match.matchType(t);let o=et(t,r,i.options);4&i.options&&0==i.content.length&&(o|=4),this.nodes.push(new nt(t,e,i.activeMarks,i.pendingMarks,n,null,o)),this.open++}closeExtra(t=!1){let e=this.nodes.length-1;if(e>this.open){for(;e>this.open;e--)this.nodes[e-1].content.push(this.nodes[e].finish(t));this.nodes.length=this.open+1}}finish(){return this.open=0,this.closeExtra(this.isOpen),this.nodes[0].finish(this.isOpen||this.options.topOpen)}sync(t){for(let e=this.open;e>=0;e--)if(this.nodes[e]==t)return this.open=e,!0;return!1}get currentPos(){this.closeExtra();let t=0;for(let e=this.open;e>=0;e--){let n=this.nodes[e].content;for(let e=n.length-1;e>=0;e--)t+=n[e].nodeSize;e&&t++}return t}findAtPoint(t,e){if(this.find)for(let n=0;n<this.find.length;n++)this.find[n].node==t&&this.find[n].offset==e&&(this.find[n].pos=this.currentPos)}findInside(t){if(this.find)for(let e=0;e<this.find.length;e++)null==this.find[e].pos&&1==t.nodeType&&t.contains(this.find[e].node)&&(this.find[e].pos=this.currentPos)}findAround(t,e,n){if(t!=e&&this.find)for(let r=0;r<this.find.length;r++)null==this.find[r].pos&&1==t.nodeType&&t.contains(this.find[r].node)&&e.compareDocumentPosition(this.find[r].node)&(n?2:4)&&(this.find[r].pos=this.currentPos)}findInText(t){if(this.find)for(let e=0;e<this.find.length;e++)this.find[e].node==t&&(this.find[e].pos=this.currentPos-(t.nodeValue.length-this.find[e].offset))}matchesContext(t){if(t.indexOf("|")>-1)return t.split(/\s*\|\s*/).some(this.matchesContext,this);let e=t.split("/"),n=this.options.context,r=!(this.isOpen||n&&n.parent.type!=this.nodes[0].type),i=-(n?n.depth+1:0)+(r?0:1),o=(t,s)=>{for(;t>=0;t--){let a=e[t];if(""==a){if(t==e.length-1||0==t)continue;for(;s>=i;s--)if(o(t-1,s))return!0;return!1}{let t=s>0||0==s&&r?this.nodes[s].type:n&&s>=i?n.node(s-i).type:null;if(!t||t.name!=a&&-1==t.groups.indexOf(a))return!1;s--}}return!0};return o(e.length-1,this.open)}textblockFromContext(){let t=this.options.context;if(t)for(let e=t.depth;e>=0;e--){let n=t.node(e).contentMatchAt(t.indexAfter(e)).defaultType;if(n&&n.isTextblock&&n.defaultAttrs)return n}for(let t in this.parser.schema.nodes){let e=this.parser.schema.nodes[t];if(e.isTextblock&&e.defaultAttrs)return e}}addPendingMark(t){let e=function(t,e){for(let n=0;n<e.length;n++)if(t.eq(e[n]))return e[n]}(t,this.top.pendingMarks);e&&this.top.stashMarks.push(e),this.top.pendingMarks=t.addToSet(this.top.pendingMarks)}removePendingMark(t,e){for(let n=this.open;n>=0;n--){let r=this.nodes[n];if(r.pendingMarks.lastIndexOf(t)>-1)r.pendingMarks=t.removeFromSet(r.pendingMarks);else{r.activeMarks=t.removeFromSet(r.activeMarks);let e=r.popFromStashMark(t);e&&r.type&&r.type.allowsMarkType(e.type)&&(r.activeMarks=e.addToSet(r.activeMarks))}if(r==e)break}}}function it(t,e){return(t.matches||t.msMatchesSelector||t.webkitMatchesSelector||t.mozMatchesSelector).call(t,e)}function ot(t){let e={};for(let n in t)e[n]=t[n];return e}function st(t,e){let n=e.schema.nodes;for(let r in n){let i=n[r];if(!i.allowsMarkType(t))continue;let o=[],s=t=>{o.push(t);for(let n=0;n<t.edgeCount;n++){let{type:r,next:i}=t.edge(n);if(r==e)return!0;if(o.indexOf(i)<0&&s(i))return!0}};if(s(i.contentMatch))return!0}}class at{constructor(t,e){this.nodes=t,this.marks=e}serializeFragment(t,e={},n){n||(n=ct(e).createDocumentFragment());let r=n,i=[];return t.forEach((t=>{if(i.length||t.marks.length){let n=0,o=0;for(;n<i.length&&o<t.marks.length;){let e=t.marks[o];if(this.marks[e.type.name]){if(!e.eq(i[n][0])||!1===e.type.spec.spanning)break;n++,o++}else o++}for(;n<i.length;)r=i.pop()[1];for(;o<t.marks.length;){let n=t.marks[o++],s=this.serializeMark(n,t.isInline,e);s&&(i.push([n,r]),r.appendChild(s.dom),r=s.contentDOM||s.dom)}}r.appendChild(this.serializeNodeInner(t,e))})),n}serializeNodeInner(t,e){let{dom:n,contentDOM:r}=at.renderSpec(ct(e),this.nodes[t.type.name](t));if(r){if(t.isLeaf)throw new RangeError("Content hole not allowed in a leaf node spec");this.serializeFragment(t.content,e,r)}return n}serializeNode(t,e={}){let n=this.serializeNodeInner(t,e);for(let r=t.marks.length-1;r>=0;r--){let i=this.serializeMark(t.marks[r],t.isInline,e);i&&((i.contentDOM||i.dom).appendChild(n),n=i.dom)}return n}serializeMark(t,e,n={}){let r=this.marks[t.type.name];return r&&at.renderSpec(ct(n),r(t,e))}static renderSpec(t,e,n=null){if("string"==typeof e)return{dom:t.createTextNode(e)};if(null!=e.nodeType)return{dom:e};if(e.dom&&null!=e.dom.nodeType)return e;let r,i=e[0],o=i.indexOf(" ");o>0&&(n=i.slice(0,o),i=i.slice(o+1));let s=n?t.createElementNS(n,i):t.createElement(i),a=e[1],l=1;if(a&&"object"==typeof a&&null==a.nodeType&&!Array.isArray(a)){l=2;for(let t in a)if(null!=a[t]){let e=t.indexOf(" ");e>0?s.setAttributeNS(t.slice(0,e),t.slice(e+1),a[t]):s.setAttribute(t,a[t])}}for(let i=l;i<e.length;i++){let o=e[i];if(0===o){if(i<e.length-1||i>l)throw new RangeError("Content hole must be the only child of its parent node");return{dom:s,contentDOM:s}}{let{dom:e,contentDOM:i}=at.renderSpec(t,o,n);if(s.appendChild(e),i){if(r)throw new RangeError("Multiple content holes");r=i}}}return{dom:s,contentDOM:r}}static fromSchema(t){return t.cached.domSerializer||(t.cached.domSerializer=new at(this.nodesFromSchema(t),this.marksFromSchema(t)))}static nodesFromSchema(t){let e=lt(t.nodes);return e.text||(e.text=t=>t.text),e}static marksFromSchema(t){return lt(t.marks)}}function lt(t){let e={};for(let n in t){let r=t[n].spec.toDOM;r&&(e[n]=r)}return e}function ct(t){return t.document||window.document}},2376:(t,e,n)=>{"use strict";n.d(e,{Bs:()=>h,C1:()=>f,H$:()=>M,Sy:()=>E,Y1:()=>s,qv:()=>d,yy:()=>S});var r=n(7823),i=n(6560);const o=Object.create(null);class s{constructor(t,e,n){this.$anchor=t,this.$head=e,this.ranges=n||[new a(t.min(e),t.max(e))]}get anchor(){return this.$anchor.pos}get head(){return this.$head.pos}get from(){return this.$from.pos}get to(){return this.$to.pos}get $from(){return this.ranges[0].$from}get $to(){return this.ranges[0].$to}get empty(){let t=this.ranges;for(let e=0;e<t.length;e++)if(t[e].$from.pos!=t[e].$to.pos)return!1;return!0}content(){return this.$from.doc.slice(this.from,this.to,!0)}replace(t,e=r.p2.empty){let n=e.content.lastChild,i=null;for(let t=0;t<e.openEnd;t++)i=n,n=n.lastChild;let o=t.steps.length,s=this.ranges;for(let a=0;a<s.length;a++){let{$from:l,$to:c}=s[a],h=t.mapping.slice(o);t.replaceRange(h.map(l.pos),h.map(c.pos),a?r.p2.empty:e),0==a&&v(t,o,(n?n.isInline:i&&i.isTextblock)?-1:1)}}replaceWith(t,e){let n=t.steps.length,r=this.ranges;for(let i=0;i<r.length;i++){let{$from:o,$to:s}=r[i],a=t.mapping.slice(n),l=a.map(o.pos),c=a.map(s.pos);i?t.deleteRange(l,c):(t.replaceRangeWith(l,c,e),v(t,n,e.isInline?-1:1))}}static findFrom(t,e,n=!1){let r=t.parent.inlineContent?new h(t):m(t.node(0),t.parent,t.pos,t.index(),e,n);if(r)return r;for(let r=t.depth-1;r>=0;r--){let i=e<0?m(t.node(0),t.node(r),t.before(r+1),t.index(r),e,n):m(t.node(0),t.node(r),t.after(r+1),t.index(r)+1,e,n);if(i)return i}return null}static near(t,e=1){return this.findFrom(t,e)||this.findFrom(t,-e)||new f(t.node(0))}static atStart(t){return m(t,t,0,0,1)||new f(t)}static atEnd(t){return m(t,t,t.content.size,t.childCount,-1)||new f(t)}static fromJSON(t,e){if(!e||!e.type)throw new RangeError("Invalid input for Selection.fromJSON");let n=o[e.type];if(!n)throw new RangeError(`No selection type ${e.type} defined`);return n.fromJSON(t,e)}static jsonID(t,e){if(t in o)throw new RangeError("Duplicate use of selection JSON ID "+t);return o[t]=e,e.prototype.jsonID=t,e}getBookmark(){return h.between(this.$anchor,this.$head).getBookmark()}}s.prototype.visible=!0;class a{constructor(t,e){this.$from=t,this.$to=e}}let l=!1;function c(t){l||t.parent.inlineContent||(l=!0,console.warn("TextSelection endpoint not pointing into a node with inline content ("+t.parent.type.name+")"))}class h extends s{constructor(t,e=t){c(t),c(e),super(t,e)}get $cursor(){return this.$anchor.pos==this.$head.pos?this.$head:null}map(t,e){let n=t.resolve(e.map(this.head));if(!n.parent.inlineContent)return s.near(n);let r=t.resolve(e.map(this.anchor));return new h(r.parent.inlineContent?r:n,n)}replace(t,e=r.p2.empty){if(super.replace(t,e),e==r.p2.empty){let e=this.$from.marksAcross(this.$to);e&&t.ensureMarks(e)}}eq(t){return t instanceof h&&t.anchor==this.anchor&&t.head==this.head}getBookmark(){return new u(this.anchor,this.head)}toJSON(){return{type:"text",anchor:this.anchor,head:this.head}}static fromJSON(t,e){if("number"!=typeof e.anchor||"number"!=typeof e.head)throw new RangeError("Invalid input for TextSelection.fromJSON");return new h(t.resolve(e.anchor),t.resolve(e.head))}static create(t,e,n=e){let r=t.resolve(e);return new this(r,n==e?r:t.resolve(n))}static between(t,e,n){let r=t.pos-e.pos;if(n&&!r||(n=r>=0?1:-1),!e.parent.inlineContent){let t=s.findFrom(e,n,!0)||s.findFrom(e,-n,!0);if(!t)return s.near(e,n);e=t.$head}return t.parent.inlineContent||(0==r||(t=(s.findFrom(t,-n,!0)||s.findFrom(t,n,!0)).$anchor).pos<e.pos!=r<0)&&(t=e),new h(t,e)}}s.jsonID("text",h);class u{constructor(t,e){this.anchor=t,this.head=e}map(t){return new u(t.map(this.anchor),t.map(this.head))}resolve(t){return h.between(t.resolve(this.anchor),t.resolve(this.head))}}class d extends s{constructor(t){let e=t.nodeAfter,n=t.node(0).resolve(t.pos+e.nodeSize);super(t,n),this.node=e}map(t,e){let{deleted:n,pos:r}=e.mapResult(this.anchor),i=t.resolve(r);return n?s.near(i):new d(i)}content(){return new r.p2(r.HY.from(this.node),0,0)}eq(t){return t instanceof d&&t.anchor==this.anchor}toJSON(){return{type:"node",anchor:this.anchor}}getBookmark(){return new p(this.anchor)}static fromJSON(t,e){if("number"!=typeof e.anchor)throw new RangeError("Invalid input for NodeSelection.fromJSON");return new d(t.resolve(e.anchor))}static create(t,e){return new d(t.resolve(e))}static isSelectable(t){return!t.isText&&!1!==t.type.spec.selectable}}d.prototype.visible=!1,s.jsonID("node",d);class p{constructor(t){this.anchor=t}map(t){let{deleted:e,pos:n}=t.mapResult(this.anchor);return e?new u(n,n):new p(n)}resolve(t){let e=t.resolve(this.anchor),n=e.nodeAfter;return n&&d.isSelectable(n)?new d(e):s.near(e)}}class f extends s{constructor(t){super(t.resolve(0),t.resolve(t.content.size))}replace(t,e=r.p2.empty){if(e==r.p2.empty){t.delete(0,t.doc.content.size);let e=s.atStart(t.doc);e.eq(t.selection)||t.setSelection(e)}else super.replace(t,e)}toJSON(){return{type:"all"}}static fromJSON(t){return new f(t)}map(t){return new f(t)}eq(t){return t instanceof f}getBookmark(){return g}}s.jsonID("all",f);const g={map(){return this},resolve:t=>new f(t)};function m(t,e,n,r,i,o=!1){if(e.inlineContent)return h.create(t,n);for(let s=r-(i>0?0:1);i>0?s<e.childCount:s>=0;s+=i){let r=e.child(s);if(r.isAtom){if(!o&&d.isSelectable(r))return d.create(t,n-(i<0?r.nodeSize:0))}else{let e=m(t,r,n+i,i<0?r.childCount:0,i,o);if(e)return e}n+=r.nodeSize*i}return null}function v(t,e,n){let r=t.steps.length-1;if(r<e)return;let o,a=t.steps[r];(a instanceof i.Pu||a instanceof i.FC)&&(t.mapping.maps[r].forEach(((t,e,n,r)=>{null==o&&(o=r)})),t.setSelection(s.near(t.doc.resolve(o),n)))}class y extends i.wx{constructor(t){super(t.doc),this.curSelectionFor=0,this.updated=0,this.meta=Object.create(null),this.time=Date.now(),this.curSelection=t.selection,this.storedMarks=t.storedMarks}get selection(){return this.curSelectionFor<this.steps.length&&(this.curSelection=this.curSelection.map(this.doc,this.mapping.slice(this.curSelectionFor)),this.curSelectionFor=this.steps.length),this.curSelection}setSelection(t){if(t.$from.doc!=this.doc)throw new RangeError("Selection passed to setSelection must point at the current document");return this.curSelection=t,this.curSelectionFor=this.steps.length,this.updated=-3&(1|this.updated),this.storedMarks=null,this}get selectionSet(){return(1&this.updated)>0}setStoredMarks(t){return this.storedMarks=t,this.updated|=2,this}ensureMarks(t){return r.vc.sameSet(this.storedMarks||this.selection.$from.marks(),t)||this.setStoredMarks(t),this}addStoredMark(t){return this.ensureMarks(t.addToSet(this.storedMarks||this.selection.$head.marks()))}removeStoredMark(t){return this.ensureMarks(t.removeFromSet(this.storedMarks||this.selection.$head.marks()))}get storedMarksSet(){return(2&this.updated)>0}addStep(t,e){super.addStep(t,e),this.updated=-3&this.updated,this.storedMarks=null}setTime(t){return this.time=t,this}replaceSelection(t){return this.selection.replace(this,t),this}replaceSelectionWith(t,e=!0){let n=this.selection;return e&&(t=t.mark(this.storedMarks||(n.empty?n.$from.marks():n.$from.marksAcross(n.$to)||r.vc.none))),n.replaceWith(this,t),this}deleteSelection(){return this.selection.replace(this),this}insertText(t,e,n){let r=this.doc.type.schema;if(null==e)return t?this.replaceSelectionWith(r.text(t),!0):this.deleteSelection();{if(null==n&&(n=e),n=null==n?e:n,!t)return this.deleteRange(e,n);let i=this.storedMarks;if(!i){let t=this.doc.resolve(e);i=n==e?t.marks():t.marksAcross(this.doc.resolve(n))}return this.replaceRangeWith(e,n,r.text(t,i)),this.selection.empty||this.setSelection(s.near(this.selection.$to)),this}}setMeta(t,e){return this.meta["string"==typeof t?t:t.key]=e,this}getMeta(t){return this.meta["string"==typeof t?t:t.key]}get isGeneric(){for(let t in this.meta)return!1;return!0}scrollIntoView(){return this.updated|=4,this}get scrolledIntoView(){return(4&this.updated)>0}}function b(t,e){return e&&t?t.bind(e):t}class w{constructor(t,e,n){this.name=t,this.init=b(e.init,n),this.apply=b(e.apply,n)}}const x=[new w("doc",{init:t=>t.doc||t.schema.topNodeType.createAndFill(),apply:t=>t.doc}),new w("selection",{init:(t,e)=>t.selection||s.atStart(e.doc),apply:t=>t.selection}),new w("storedMarks",{init:t=>t.storedMarks||null,apply:(t,e,n,r)=>r.selection.$cursor?t.storedMarks:null}),new w("scrollToSelection",{init:()=>0,apply:(t,e)=>t.scrolledIntoView?e+1:e})];class k{constructor(t,e){this.schema=t,this.plugins=[],this.pluginsByKey=Object.create(null),this.fields=x.slice(),e&&e.forEach((t=>{if(this.pluginsByKey[t.key])throw new RangeError("Adding different instances of a keyed plugin ("+t.key+")");this.plugins.push(t),this.pluginsByKey[t.key]=t,t.spec.state&&this.fields.push(new w(t.key,t.spec.state,t))}))}}class S{constructor(t){this.config=t}get schema(){return this.config.schema}get plugins(){return this.config.plugins}apply(t){return this.applyTransaction(t).state}filterTransaction(t,e=-1){for(let n=0;n<this.config.plugins.length;n++)if(n!=e){let e=this.config.plugins[n];if(e.spec.filterTransaction&&!e.spec.filterTransaction.call(e,t,this))return!1}return!0}applyTransaction(t){if(!this.filterTransaction(t))return{state:this,transactions:[]};let e=[t],n=this.applyInner(t),r=null;for(;;){let i=!1;for(let o=0;o<this.config.plugins.length;o++){let s=this.config.plugins[o];if(s.spec.appendTransaction){let a=r?r[o].n:0,l=r?r[o].state:this,c=a<e.length&&s.spec.appendTransaction.call(s,a?e.slice(a):e,l,n);if(c&&n.filterTransaction(c,o)){if(c.setMeta("appendedTransaction",t),!r){r=[];for(let t=0;t<this.config.plugins.length;t++)r.push(t<o?{state:n,n:e.length}:{state:this,n:0})}e.push(c),n=n.applyInner(c),i=!0}r&&(r[o]={state:n,n:e.length})}}if(!i)return{state:n,transactions:e}}}applyInner(t){if(!t.before.eq(this.doc))throw new RangeError("Applying a mismatched transaction");let e=new S(this.config),n=this.config.fields;for(let r=0;r<n.length;r++){let i=n[r];e[i.name]=i.apply(t,this[i.name],this,e)}return e}get tr(){return new y(this)}static create(t){let e=new k(t.doc?t.doc.type.schema:t.schema,t.plugins),n=new S(e);for(let r=0;r<e.fields.length;r++)n[e.fields[r].name]=e.fields[r].init(t,n);return n}reconfigure(t){let e=new k(this.schema,t.plugins),n=e.fields,r=new S(e);for(let e=0;e<n.length;e++){let i=n[e].name;r[i]=this.hasOwnProperty(i)?this[i]:n[e].init(t,r)}return r}toJSON(t){let e={doc:this.doc.toJSON(),selection:this.selection.toJSON()};if(this.storedMarks&&(e.storedMarks=this.storedMarks.map((t=>t.toJSON()))),t&&"object"==typeof t)for(let n in t){if("doc"==n||"selection"==n)throw new RangeError("The JSON fields `doc` and `selection` are reserved");let r=t[n],i=r.spec.state;i&&i.toJSON&&(e[n]=i.toJSON.call(r,this[r.key]))}return e}static fromJSON(t,e,n){if(!e)throw new RangeError("Invalid input for EditorState.fromJSON");if(!t.schema)throw new RangeError("Required config field 'schema' missing");let i=new k(t.schema,t.plugins),o=new S(i);return i.fields.forEach((i=>{if("doc"==i.name)o.doc=r.NB.fromJSON(t.schema,e.doc);else if("selection"==i.name)o.selection=s.fromJSON(o.doc,e.selection);else if("storedMarks"==i.name)e.storedMarks&&(o.storedMarks=e.storedMarks.map(t.schema.markFromJSON));else{if(n)for(let r in n){let s=n[r],a=s.spec.state;if(s.key==i.name&&a&&a.fromJSON&&Object.prototype.hasOwnProperty.call(e,r))return void(o[i.name]=a.fromJSON.call(s,t,e[r],o))}o[i.name]=i.init(t,o)}})),o}}function _(t,e,n){for(let r in t){let i=t[r];i instanceof Function?i=i.bind(e):"handleDOMEvents"==r&&(i=_(i,e,{})),n[r]=i}return n}class E{constructor(t){this.spec=t,this.props={},t.props&&_(t.props,this,this.props),this.key=t.key?t.key.key:O("plugin")}getState(t){return t[this.key]}}const C=Object.create(null);function O(t){return t in C?t+"$"+ ++C[t]:(C[t]=0,t+"$")}class M{constructor(t="key"){this.key=O(t)}get(t){return t.config.pluginsByKey[this.key]}getState(t){return t[this.key]}}},6560:(t,e,n)=>{"use strict";n.d(e,{Ax:()=>k,FC:()=>m,Mn:()=>S,Pu:()=>g,dR:()=>E,k9:()=>b,nd:()=>w,nj:()=>_,wx:()=>I});var r=n(7823);const i=Math.pow(2,16);function o(t){return 65535&t}class s{constructor(t,e,n){this.pos=t,this.delInfo=e,this.recover=n}get deleted(){return(8&this.delInfo)>0}get deletedBefore(){return(5&this.delInfo)>0}get deletedAfter(){return(6&this.delInfo)>0}get deletedAcross(){return(4&this.delInfo)>0}}class a{constructor(t,e=!1){if(this.ranges=t,this.inverted=e,!t.length&&a.empty)return a.empty}recover(t){let e=0,n=o(t);if(!this.inverted)for(let t=0;t<n;t++)e+=this.ranges[3*t+2]-this.ranges[3*t+1];return this.ranges[3*n]+e+function(t){return(t-(65535&t))/i}(t)}mapResult(t,e=1){return this._map(t,e,!1)}map(t,e=1){return this._map(t,e,!0)}_map(t,e,n){let r=0,o=this.inverted?2:1,a=this.inverted?1:2;for(let l=0;l<this.ranges.length;l+=3){let c=this.ranges[l]-(this.inverted?r:0);if(c>t)break;let h=this.ranges[l+o],u=this.ranges[l+a],d=c+h;if(t<=d){let o=c+r+((h?t==c?-1:t==d?1:e:e)<0?0:u);if(n)return o;let a=t==c?2:t==d?1:4;return(e<0?t!=c:t!=d)&&(a|=8),new s(o,a,t==(e<0?c:d)?null:l/3+(t-c)*i)}r+=u-h}return n?t+r:new s(t+r,0,null)}touches(t,e){let n=0,r=o(e),i=this.inverted?2:1,s=this.inverted?1:2;for(let e=0;e<this.ranges.length;e+=3){let o=this.ranges[e]-(this.inverted?n:0);if(o>t)break;let a=this.ranges[e+i];if(t<=o+a&&e==3*r)return!0;n+=this.ranges[e+s]-a}return!1}forEach(t){let e=this.inverted?2:1,n=this.inverted?1:2;for(let r=0,i=0;r<this.ranges.length;r+=3){let o=this.ranges[r],s=o-(this.inverted?i:0),a=o+(this.inverted?0:i),l=this.ranges[r+e],c=this.ranges[r+n];t(s,s+l,a,a+c),i+=c-l}}invert(){return new a(this.ranges,!this.inverted)}toString(){return(this.inverted?"-":"")+JSON.stringify(this.ranges)}static offset(t){return 0==t?a.empty:new a(t<0?[0,-t,0]:[0,0,t])}}a.empty=new a([]);class l{constructor(t=[],e,n=0,r=t.length){this.maps=t,this.mirror=e,this.from=n,this.to=r}slice(t=0,e=this.maps.length){return new l(this.maps,this.mirror,t,e)}copy(){return new l(this.maps.slice(),this.mirror&&this.mirror.slice(),this.from,this.to)}appendMap(t,e){this.to=this.maps.push(t),null!=e&&this.setMirror(this.maps.length-1,e)}appendMapping(t){for(let e=0,n=this.maps.length;e<t.maps.length;e++){let r=t.getMirror(e);this.appendMap(t.maps[e],null!=r&&r<e?n+r:void 0)}}getMirror(t){if(this.mirror)for(let e=0;e<this.mirror.length;e++)if(this.mirror[e]==t)return this.mirror[e+(e%2?-1:1)]}setMirror(t,e){this.mirror||(this.mirror=[]),this.mirror.push(t,e)}appendMappingInverted(t){for(let e=t.maps.length-1,n=this.maps.length+t.maps.length;e>=0;e--){let r=t.getMirror(e);this.appendMap(t.maps[e].invert(),null!=r&&r>e?n-r-1:void 0)}}invert(){let t=new l;return t.appendMappingInverted(this),t}map(t,e=1){if(this.mirror)return this._map(t,e,!0);for(let n=this.from;n<this.to;n++)t=this.maps[n].map(t,e);return t}mapResult(t,e=1){return this._map(t,e,!1)}_map(t,e,n){let r=0;for(let n=this.from;n<this.to;n++){let i=this.maps[n].mapResult(t,e);if(null!=i.recover){let e=this.getMirror(n);if(null!=e&&e>n&&e<this.to){n=e,t=this.maps[e].recover(i.recover);continue}}r|=i.delInfo,t=i.pos}return n?t:new s(t,r,null)}}const c=Object.create(null);class h{getMap(){return a.empty}merge(t){return null}static fromJSON(t,e){if(!e||!e.stepType)throw new RangeError("Invalid input for Step.fromJSON");let n=c[e.stepType];if(!n)throw new RangeError(`No step type ${e.stepType} defined`);return n.fromJSON(t,e)}static jsonID(t,e){if(t in c)throw new RangeError("Duplicate use of step JSON ID "+t);return c[t]=e,e.prototype.jsonID=t,e}}class u{constructor(t,e){this.doc=t,this.failed=e}static ok(t){return new u(t,null)}static fail(t){return new u(null,t)}static fromReplace(t,e,n,i){try{return u.ok(t.replace(e,n,i))}catch(t){if(t instanceof r.e4)return u.fail(t.message);throw t}}}function d(t,e,n){let i=[];for(let r=0;r<t.childCount;r++){let o=t.child(r);o.content.size&&(o=o.copy(d(o.content,e,o))),o.isInline&&(o=e(o,n,r)),i.push(o)}return r.HY.fromArray(i)}class p extends h{constructor(t,e,n){super(),this.from=t,this.to=e,this.mark=n}apply(t){let e=t.slice(this.from,this.to),n=t.resolve(this.from),i=n.node(n.sharedDepth(this.to)),o=new r.p2(d(e.content,((t,e)=>t.isAtom&&e.type.allowsMarkType(this.mark.type)?t.mark(this.mark.addToSet(t.marks)):t),i),e.openStart,e.openEnd);return u.fromReplace(t,this.from,this.to,o)}invert(){return new f(this.from,this.to,this.mark)}map(t){let e=t.mapResult(this.from,1),n=t.mapResult(this.to,-1);return e.deleted&&n.deleted||e.pos>=n.pos?null:new p(e.pos,n.pos,this.mark)}merge(t){return t instanceof p&&t.mark.eq(this.mark)&&this.from<=t.to&&this.to>=t.from?new p(Math.min(this.from,t.from),Math.max(this.to,t.to),this.mark):null}toJSON(){return{stepType:"addMark",mark:this.mark.toJSON(),from:this.from,to:this.to}}static fromJSON(t,e){if("number"!=typeof e.from||"number"!=typeof e.to)throw new RangeError("Invalid input for AddMarkStep.fromJSON");return new p(e.from,e.to,t.markFromJSON(e.mark))}}h.jsonID("addMark",p);class f extends h{constructor(t,e,n){super(),this.from=t,this.to=e,this.mark=n}apply(t){let e=t.slice(this.from,this.to),n=new r.p2(d(e.content,(t=>t.mark(this.mark.removeFromSet(t.marks))),t),e.openStart,e.openEnd);return u.fromReplace(t,this.from,this.to,n)}invert(){return new p(this.from,this.to,this.mark)}map(t){let e=t.mapResult(this.from,1),n=t.mapResult(this.to,-1);return e.deleted&&n.deleted||e.pos>=n.pos?null:new f(e.pos,n.pos,this.mark)}merge(t){return t instanceof f&&t.mark.eq(this.mark)&&this.from<=t.to&&this.to>=t.from?new f(Math.min(this.from,t.from),Math.max(this.to,t.to),this.mark):null}toJSON(){return{stepType:"removeMark",mark:this.mark.toJSON(),from:this.from,to:this.to}}static fromJSON(t,e){if("number"!=typeof e.from||"number"!=typeof e.to)throw new RangeError("Invalid input for RemoveMarkStep.fromJSON");return new f(e.from,e.to,t.markFromJSON(e.mark))}}h.jsonID("removeMark",f);class g extends h{constructor(t,e,n,r=!1){super(),this.from=t,this.to=e,this.slice=n,this.structure=r}apply(t){return this.structure&&v(t,this.from,this.to)?u.fail("Structure replace would overwrite content"):u.fromReplace(t,this.from,this.to,this.slice)}getMap(){return new a([this.from,this.to-this.from,this.slice.size])}invert(t){return new g(this.from,this.from+this.slice.size,t.slice(this.from,this.to))}map(t){let e=t.mapResult(this.from,1),n=t.mapResult(this.to,-1);return e.deletedAcross&&n.deletedAcross?null:new g(e.pos,Math.max(e.pos,n.pos),this.slice)}merge(t){if(!(t instanceof g)||t.structure||this.structure)return null;if(this.from+this.slice.size!=t.from||this.slice.openEnd||t.slice.openStart){if(t.to!=this.from||this.slice.openStart||t.slice.openEnd)return null;{let e=this.slice.size+t.slice.size==0?r.p2.empty:new r.p2(t.slice.content.append(this.slice.content),t.slice.openStart,this.slice.openEnd);return new g(t.from,this.to,e,this.structure)}}{let e=this.slice.size+t.slice.size==0?r.p2.empty:new r.p2(this.slice.content.append(t.slice.content),this.slice.openStart,t.slice.openEnd);return new g(this.from,this.to+(t.to-t.from),e,this.structure)}}toJSON(){let t={stepType:"replace",from:this.from,to:this.to};return this.slice.size&&(t.slice=this.slice.toJSON()),this.structure&&(t.structure=!0),t}static fromJSON(t,e){if("number"!=typeof e.from||"number"!=typeof e.to)throw new RangeError("Invalid input for ReplaceStep.fromJSON");return new g(e.from,e.to,r.p2.fromJSON(t,e.slice),!!e.structure)}}h.jsonID("replace",g);class m extends h{constructor(t,e,n,r,i,o,s=!1){super(),this.from=t,this.to=e,this.gapFrom=n,this.gapTo=r,this.slice=i,this.insert=o,this.structure=s}apply(t){if(this.structure&&(v(t,this.from,this.gapFrom)||v(t,this.gapTo,this.to)))return u.fail("Structure gap-replace would overwrite content");let e=t.slice(this.gapFrom,this.gapTo);if(e.openStart||e.openEnd)return u.fail("Gap is not a flat range");let n=this.slice.insertAt(this.insert,e.content);return n?u.fromReplace(t,this.from,this.to,n):u.fail("Content does not fit in gap")}getMap(){return new a([this.from,this.gapFrom-this.from,this.insert,this.gapTo,this.to-this.gapTo,this.slice.size-this.insert])}invert(t){let e=this.gapTo-this.gapFrom;return new m(this.from,this.from+this.slice.size+e,this.from+this.insert,this.from+this.insert+e,t.slice(this.from,this.to).removeBetween(this.gapFrom-this.from,this.gapTo-this.from),this.gapFrom-this.from,this.structure)}map(t){let e=t.mapResult(this.from,1),n=t.mapResult(this.to,-1),r=t.map(this.gapFrom,-1),i=t.map(this.gapTo,1);return e.deletedAcross&&n.deletedAcross||r<e.pos||i>n.pos?null:new m(e.pos,n.pos,r,i,this.slice,this.insert,this.structure)}toJSON(){let t={stepType:"replaceAround",from:this.from,to:this.to,gapFrom:this.gapFrom,gapTo:this.gapTo,insert:this.insert};return this.slice.size&&(t.slice=this.slice.toJSON()),this.structure&&(t.structure=!0),t}static fromJSON(t,e){if("number"!=typeof e.from||"number"!=typeof e.to||"number"!=typeof e.gapFrom||"number"!=typeof e.gapTo||"number"!=typeof e.insert)throw new RangeError("Invalid input for ReplaceAroundStep.fromJSON");return new m(e.from,e.to,e.gapFrom,e.gapTo,r.p2.fromJSON(t,e.slice),e.insert,!!e.structure)}}function v(t,e,n){let r=t.resolve(e),i=n-e,o=r.depth;for(;i>0&&o>0&&r.indexAfter(o)==r.node(o).childCount;)o--,i--;if(i>0){let t=r.node(o).maybeChild(r.indexAfter(o));for(;i>0;){if(!t||t.isLeaf)return!0;t=t.firstChild,i--}}return!1}function y(t,e,n){return(0==e||t.canReplace(e,t.childCount))&&(n==t.childCount||t.canReplace(0,n))}function b(t){let e=t.parent.content.cutByIndex(t.startIndex,t.endIndex);for(let n=t.depth;;--n){let r=t.$from.node(n),i=t.$from.index(n),o=t.$to.indexAfter(n);if(n<t.depth&&r.canReplace(i,o,e))return n;if(0==n||r.type.spec.isolating||!y(r,i,o))break}return null}function w(t,e,n=null,r=t){let i=function(t,e){let{parent:n,startIndex:r,endIndex:i}=t,o=n.contentMatchAt(r).findWrapping(e);if(!o)return null;let s=o.length?o[0]:e;return n.canReplaceWith(r,i,s)?o:null}(t,e),o=i&&function(t,e){let{parent:n,startIndex:r,endIndex:i}=t,o=n.child(r),s=e.contentMatch.findWrapping(o.type);if(!s)return null;let a=(s.length?s[s.length-1]:e).contentMatch;for(let t=r;a&&t<i;t++)a=a.matchType(n.child(t).type);return a&&a.validEnd?s:null}(r,e);return o?i.map(x).concat({type:e,attrs:n}).concat(o.map(x)):null}function x(t){return{type:t,attrs:null}}function k(t,e,n=1,r){let i=t.resolve(e),o=i.depth-n,s=r&&r[r.length-1]||i.parent;if(o<0||i.parent.type.spec.isolating||!i.parent.canReplace(i.index(),i.parent.childCount)||!s.type.validContent(i.parent.content.cutByIndex(i.index(),i.parent.childCount)))return!1;for(let t=i.depth-1,e=n-2;t>o;t--,e--){let n=i.node(t),o=i.index(t);if(n.type.spec.isolating)return!1;let s=n.content.cutByIndex(o,n.childCount),a=r&&r[e]||n;if(a!=n&&(s=s.replaceChild(0,a.type.create(a.attrs))),!n.canReplace(o+1,n.childCount)||!a.type.validContent(s))return!1}let a=i.indexAfter(o),l=r&&r[0];return i.node(o).canReplaceWith(a,a,l?l.type:i.node(o+1).type)}function S(t,e){let n=t.resolve(e),r=n.index();return i=n.nodeBefore,o=n.nodeAfter,!(!i||!o||i.isLeaf||!i.canAppend(o))&&n.parent.canReplace(r,r+1);var i,o}function _(t,e,n){let r=t.resolve(e);if(!n.content.size)return e;let i=n.content;for(let t=0;t<n.openStart;t++)i=i.firstChild.content;for(let t=1;t<=(0==n.openStart&&n.size?2:1);t++)for(let e=r.depth;e>=0;e--){let n=e==r.depth?0:r.pos<=(r.start(e+1)+r.end(e+1))/2?-1:1,o=r.index(e)+(n>0?1:0),s=r.node(e),a=!1;if(1==t)a=s.canReplace(o,o,i);else{let t=s.contentMatchAt(o).findWrapping(i.firstChild.type);a=t&&s.canReplaceWith(o,o,t[0])}if(a)return 0==n?r.pos:n<0?r.before(e+1):r.after(e+1)}return null}function E(t,e,n=e,i=r.p2.empty){if(e==n&&!i.size)return null;let o=t.resolve(e),s=t.resolve(n);return C(o,s,i)?new g(e,n,i):new O(o,s,i).fit()}function C(t,e,n){return!n.openStart&&!n.openEnd&&t.start()==e.start()&&t.parent.canReplace(t.index(),e.index(),n.content)}h.jsonID("replaceAround",m);class O{constructor(t,e,n){this.$from=t,this.$to=e,this.unplaced=n,this.frontier=[],this.placed=r.HY.empty;for(let e=0;e<=t.depth;e++){let n=t.node(e);this.frontier.push({type:n.type,match:n.contentMatchAt(t.indexAfter(e))})}for(let e=t.depth;e>0;e--)this.placed=r.HY.from(t.node(e).copy(this.placed))}get depth(){return this.frontier.length-1}fit(){for(;this.unplaced.size;){let t=this.findFittable();t?this.placeNodes(t):this.openMore()||this.dropNode()}let t=this.mustMoveInline(),e=this.placed.size-this.depth-this.$from.depth,n=this.$from,i=this.close(t<0?this.$to:n.doc.resolve(t));if(!i)return null;let o=this.placed,s=n.depth,a=i.depth;for(;s&&a&&1==o.childCount;)o=o.firstChild.content,s--,a--;let l=new r.p2(o,s,a);return t>-1?new m(n.pos,t,this.$to.pos,this.$to.end(),l,e):l.size||n.pos!=this.$to.pos?new g(n.pos,i.pos,l):null}findFittable(){for(let t=1;t<=2;t++)for(let e=this.unplaced.openStart;e>=0;e--){let n,i=null;e?(i=T(this.unplaced.content,e-1).firstChild,n=i.content):n=this.unplaced.content;let o=n.firstChild;for(let n=this.depth;n>=0;n--){let s,{type:a,match:l}=this.frontier[n],c=null;if(1==t&&(o?l.matchType(o.type)||(c=l.fillBefore(r.HY.from(o),!1)):i&&a.compatibleContent(i.type)))return{sliceDepth:e,frontierDepth:n,parent:i,inject:c};if(2==t&&o&&(s=l.findWrapping(o.type)))return{sliceDepth:e,frontierDepth:n,parent:i,wrap:s};if(i&&l.matchType(i.type))break}}}openMore(){let{content:t,openStart:e,openEnd:n}=this.unplaced,i=T(t,e);return!(!i.childCount||i.firstChild.isLeaf||(this.unplaced=new r.p2(t,e+1,Math.max(n,i.size+e>=t.size-n?e+1:0)),0))}dropNode(){let{content:t,openStart:e,openEnd:n}=this.unplaced,i=T(t,e);if(i.childCount<=1&&e>0){let o=t.size-e<=e+i.size;this.unplaced=new r.p2(M(t,e-1,1),e-1,o?e-1:n)}else this.unplaced=new r.p2(M(t,e,1),e,n)}placeNodes({sliceDepth:t,frontierDepth:e,parent:n,inject:i,wrap:o}){for(;this.depth>e;)this.closeFrontierNode();if(o)for(let t=0;t<o.length;t++)this.openFrontierNode(o[t]);let s=this.unplaced,a=n?n.content:s.content,l=s.openStart-t,c=0,h=[],{match:u,type:d}=this.frontier[e];if(i){for(let t=0;t<i.childCount;t++)h.push(i.child(t));u=u.matchFragment(i)}let p=a.size+t-(s.content.size-s.openEnd);for(;c<a.childCount;){let t=a.child(c),e=u.matchType(t.type);if(!e)break;c++,(c>1||0==l||t.content.size)&&(u=e,h.push(N(t.mark(d.allowedMarks(t.marks)),1==c?l:0,c==a.childCount?p:-1)))}let f=c==a.childCount;f||(p=-1),this.placed=A(this.placed,e,r.HY.from(h)),this.frontier[e].match=u,f&&p<0&&n&&n.type==this.frontier[this.depth].type&&this.frontier.length>1&&this.closeFrontierNode();for(let t=0,e=a;t<p;t++){let t=e.lastChild;this.frontier.push({type:t.type,match:t.contentMatchAt(t.childCount)}),e=t.content}this.unplaced=f?0==t?r.p2.empty:new r.p2(M(s.content,t-1,1),t-1,p<0?s.openEnd:t-1):new r.p2(M(s.content,t,c),s.openStart,s.openEnd)}mustMoveInline(){if(!this.$to.parent.isTextblock)return-1;let t,e=this.frontier[this.depth];if(!e.type.isTextblock||!D(this.$to,this.$to.depth,e.type,e.match,!1)||this.$to.depth==this.depth&&(t=this.findCloseLevel(this.$to))&&t.depth==this.depth)return-1;let{depth:n}=this.$to,r=this.$to.after(n);for(;n>1&&r==this.$to.end(--n);)++r;return r}findCloseLevel(t){t:for(let e=Math.min(this.depth,t.depth);e>=0;e--){let{match:n,type:r}=this.frontier[e],i=e<t.depth&&t.end(e+1)==t.pos+(t.depth-(e+1)),o=D(t,e,r,n,i);if(o){for(let n=e-1;n>=0;n--){let{match:e,type:r}=this.frontier[n],i=D(t,n,r,e,!0);if(!i||i.childCount)continue t}return{depth:e,fit:o,move:i?t.doc.resolve(t.after(e+1)):t}}}}close(t){let e=this.findCloseLevel(t);if(!e)return null;for(;this.depth>e.depth;)this.closeFrontierNode();e.fit.childCount&&(this.placed=A(this.placed,e.depth,e.fit)),t=e.move;for(let n=e.depth+1;n<=t.depth;n++){let e=t.node(n),r=e.type.contentMatch.fillBefore(e.content,!0,t.index(n));this.openFrontierNode(e.type,e.attrs,r)}return t}openFrontierNode(t,e=null,n){let i=this.frontier[this.depth];i.match=i.match.matchType(t),this.placed=A(this.placed,this.depth,r.HY.from(t.create(e,n))),this.frontier.push({type:t,match:t.contentMatch})}closeFrontierNode(){let t=this.frontier.pop().match.fillBefore(r.HY.empty,!0);t.childCount&&(this.placed=A(this.placed,this.frontier.length,t))}}function M(t,e,n){return 0==e?t.cutByIndex(n,t.childCount):t.replaceChild(0,t.firstChild.copy(M(t.firstChild.content,e-1,n)))}function A(t,e,n){return 0==e?t.append(n):t.replaceChild(t.childCount-1,t.lastChild.copy(A(t.lastChild.content,e-1,n)))}function T(t,e){for(let n=0;n<e;n++)t=t.firstChild.content;return t}function N(t,e,n){if(e<=0)return t;let i=t.content;return e>1&&(i=i.replaceChild(0,N(i.firstChild,e-1,1==i.childCount?n-1:0))),e>0&&(i=t.type.contentMatch.fillBefore(i).append(i),n<=0&&(i=i.append(t.type.contentMatch.matchFragment(i).fillBefore(r.HY.empty,!0)))),t.copy(i)}function D(t,e,n,r,i){let o=t.node(e),s=i?t.indexAfter(e):t.index(e);if(s==o.childCount&&!n.compatibleContent(o.type))return null;let a=r.fillBefore(o.content,!0,s);return a&&!function(t,e,n){for(let r=n;r<e.childCount;r++)if(!t.allowsMarks(e.child(r).marks))return!0;return!1}(n,o.content,s)?a:null}function j(t){return t.spec.defining||t.spec.definingForContent}function R(t,e,n,i,o){if(e<n){let r=t.firstChild;t=t.replaceChild(0,r.copy(R(r.content,e+1,n,i,r)))}if(e>i){let e=o.contentMatchAt(0),n=e.fillBefore(t).append(t);t=n.append(e.matchFragment(n).fillBefore(r.HY.empty,!0))}return t}function P(t,e){let n=[];for(let r=Math.min(t.depth,e.depth);r>=0;r--){let i=t.start(r);if(i<t.pos-(t.depth-r)||e.end(r)>e.pos+(e.depth-r)||t.node(r).type.spec.isolating||e.node(r).type.spec.isolating)break;(i==e.start(r)||r==t.depth&&r==e.depth&&t.parent.inlineContent&&e.parent.inlineContent&&r&&e.start(r-1)==i-1)&&n.push(r)}return n}let z=class extends Error{};z=function t(e){let n=Error.call(this,e);return n.__proto__=t.prototype,n},(z.prototype=Object.create(Error.prototype)).constructor=z,z.prototype.name="TransformError";class I{constructor(t){this.doc=t,this.steps=[],this.docs=[],this.mapping=new l}get before(){return this.docs.length?this.docs[0]:this.doc}step(t){let e=this.maybeStep(t);if(e.failed)throw new z(e.failed);return this}maybeStep(t){let e=t.apply(this.doc);return e.failed||this.addStep(t,e.doc),e}get docChanged(){return this.steps.length>0}addStep(t,e){this.docs.push(this.doc),this.steps.push(t),this.mapping.appendMap(t.getMap()),this.doc=e}replace(t,e=t,n=r.p2.empty){let i=E(this.doc,t,e,n);return i&&this.step(i),this}replaceWith(t,e,n){return this.replace(t,e,new r.p2(r.HY.from(n),0,0))}delete(t,e){return this.replace(t,e,r.p2.empty)}insert(t,e){return this.replaceWith(t,t,e)}replaceRange(t,e,n){return function(t,e,n,i){if(!i.size)return t.deleteRange(e,n);let o=t.doc.resolve(e),s=t.doc.resolve(n);if(C(o,s,i))return t.step(new g(e,n,i));let a=P(o,t.doc.resolve(n));0==a[a.length-1]&&a.pop();let l=-(o.depth+1);a.unshift(l);for(let t=o.depth,e=o.pos-1;t>0;t--,e--){let n=o.node(t).type.spec;if(n.defining||n.definingAsContext||n.isolating)break;a.indexOf(t)>-1?l=t:o.before(t)==e&&a.splice(1,0,-t)}let c=a.indexOf(l),h=[],u=i.openStart;for(let t=i.content,e=0;;e++){let n=t.firstChild;if(h.push(n),e==i.openStart)break;t=n.content}for(let t=u-1;t>=0;t--){let e=h[t].type,n=j(e);if(n&&o.node(c).type!=e)u=t;else if(n||!e.isTextblock)break}for(let e=i.openStart;e>=0;e--){let l=(e+u+1)%(i.openStart+1),d=h[l];if(d)for(let e=0;e<a.length;e++){let h=a[(e+c)%a.length],u=!0;h<0&&(u=!1,h=-h);let p=o.node(h-1),f=o.index(h-1);if(p.canReplaceWith(f,f,d.type,d.marks))return t.replace(o.before(h),u?s.after(h):n,new r.p2(R(i.content,0,i.openStart,l),l,i.openEnd))}}let d=t.steps.length;for(let r=a.length-1;r>=0&&(t.replace(e,n,i),!(t.steps.length>d));r--){let t=a[r];t<0||(e=o.before(t),n=s.after(t))}}(this,t,e,n),this}replaceRangeWith(t,e,n){return function(t,e,n,i){if(!i.isInline&&e==n&&t.doc.resolve(e).parent.content.size){let r=function(t,e,n){let r=t.resolve(e);if(r.parent.canReplaceWith(r.index(),r.index(),n))return e;if(0==r.parentOffset)for(let t=r.depth-1;t>=0;t--){let e=r.index(t);if(r.node(t).canReplaceWith(e,e,n))return r.before(t+1);if(e>0)return null}if(r.parentOffset==r.parent.content.size)for(let t=r.depth-1;t>=0;t--){let e=r.indexAfter(t);if(r.node(t).canReplaceWith(e,e,n))return r.after(t+1);if(e<r.node(t).childCount)return null}return null}(t.doc,e,i.type);null!=r&&(e=n=r)}t.replaceRange(e,n,new r.p2(r.HY.from(i),0,0))}(this,t,e,n),this}deleteRange(t,e){return function(t,e,n){let r=t.doc.resolve(e),i=t.doc.resolve(n),o=P(r,i);for(let e=0;e<o.length;e++){let n=o[e],s=e==o.length-1;if(s&&0==n||r.node(n).type.contentMatch.validEnd)return t.delete(r.start(n),i.end(n));if(n>0&&(s||r.node(n-1).canReplace(r.index(n-1),i.indexAfter(n-1))))return t.delete(r.before(n),i.after(n))}for(let o=1;o<=r.depth&&o<=i.depth;o++)if(e-r.start(o)==r.depth-o&&n>r.end(o)&&i.end(o)-n!=i.depth-o)return t.delete(r.before(o),n);t.delete(e,n)}(this,t,e),this}lift(t,e){return function(t,e,n){let{$from:i,$to:o,depth:s}=e,a=i.before(s+1),l=o.after(s+1),c=a,h=l,u=r.HY.empty,d=0;for(let t=s,e=!1;t>n;t--)e||i.index(t)>0?(e=!0,u=r.HY.from(i.node(t).copy(u)),d++):c--;let p=r.HY.empty,f=0;for(let t=s,e=!1;t>n;t--)e||o.after(t+1)<o.end(t)?(e=!0,p=r.HY.from(o.node(t).copy(p)),f++):h++;t.step(new m(c,h,a,l,new r.p2(u.append(p),d,f),u.size-d,!0))}(this,t,e),this}join(t,e=1){return function(t,e,n){let i=new g(e-n,e+n,r.p2.empty,!0);t.step(i)}(this,t,e),this}wrap(t,e){return function(t,e,n){let i=r.HY.empty;for(let t=n.length-1;t>=0;t--){if(i.size){let e=n[t].type.contentMatch.matchFragment(i);if(!e||!e.validEnd)throw new RangeError("Wrapper type given to Transform.wrap does not form valid content of its parent wrapper")}i=r.HY.from(n[t].type.create(n[t].attrs,i))}let o=e.start,s=e.end;t.step(new m(o,s,o,s,new r.p2(i,0,0),n.length,!0))}(this,t,e),this}setBlockType(t,e=t,n,i=null){return function(t,e,n,i,o){if(!i.isTextblock)throw new RangeError("Type given to setBlockType should be a textblock");let s=t.steps.length;t.doc.nodesBetween(e,n,((e,n)=>{if(e.isTextblock&&!e.hasMarkup(i,o)&&function(t,e,n){let r=t.resolve(e),i=r.index();return r.parent.canReplaceWith(i,i+1,n)}(t.doc,t.mapping.slice(s).map(n),i)){t.clearIncompatible(t.mapping.slice(s).map(n,1),i);let a=t.mapping.slice(s),l=a.map(n,1),c=a.map(n+e.nodeSize,1);return t.step(new m(l,c,l+1,c-1,new r.p2(r.HY.from(i.create(o,null,e.marks)),0,0),1,!0)),!1}}))}(this,t,e,n,i),this}setNodeMarkup(t,e,n=null,i=[]){return function(t,e,n,i,o){let s=t.doc.nodeAt(e);if(!s)throw new RangeError("No node at given position");n||(n=s.type);let a=n.create(i,null,o||s.marks);if(s.isLeaf)return t.replaceWith(e,e+s.nodeSize,a);if(!n.validContent(s.content))throw new RangeError("Invalid content for node type "+n.name);t.step(new m(e,e+s.nodeSize,e+1,e+s.nodeSize-1,new r.p2(r.HY.from(a),0,0),1,!0))}(this,t,e,n,i),this}split(t,e=1,n){return function(t,e,n=1,i){let o=t.doc.resolve(e),s=r.HY.empty,a=r.HY.empty;for(let t=o.depth,e=o.depth-n,l=n-1;t>e;t--,l--){s=r.HY.from(o.node(t).copy(s));let e=i&&i[l];a=r.HY.from(e?e.type.create(e.attrs,a):o.node(t).copy(a))}t.step(new g(e,e,new r.p2(s.append(a),n,n),!0))}(this,t,e,n),this}addMark(t,e,n){return function(t,e,n,r){let i,o,s=[],a=[];t.doc.nodesBetween(e,n,((t,l,c)=>{if(!t.isInline)return;let h=t.marks;if(!r.isInSet(h)&&c.type.allowsMarkType(r.type)){let c=Math.max(l,e),u=Math.min(l+t.nodeSize,n),d=r.addToSet(h);for(let t=0;t<h.length;t++)h[t].isInSet(d)||(i&&i.to==c&&i.mark.eq(h[t])?i.to=u:s.push(i=new f(c,u,h[t])));o&&o.to==c?o.to=u:a.push(o=new p(c,u,r))}})),s.forEach((e=>t.step(e))),a.forEach((e=>t.step(e)))}(this,t,e,n),this}removeMark(t,e,n){return function(t,e,n,i){let o=[],s=0;t.doc.nodesBetween(e,n,((t,a)=>{if(!t.isInline)return;s++;let l=null;if(i instanceof r.ZU){let e,n=t.marks;for(;e=i.isInSet(n);)(l||(l=[])).push(e),n=e.removeFromSet(n)}else i?i.isInSet(t.marks)&&(l=[i]):l=t.marks;if(l&&l.length){let r=Math.min(a+t.nodeSize,n);for(let t=0;t<l.length;t++){let n,i=l[t];for(let t=0;t<o.length;t++){let e=o[t];e.step==s-1&&i.eq(o[t].style)&&(n=e)}n?(n.to=r,n.step=s):o.push({style:i,from:Math.max(a,e),to:r,step:s})}}})),o.forEach((e=>t.step(new f(e.from,e.to,e.style))))}(this,t,e,n),this}clearIncompatible(t,e,n){return function(t,e,n,i=n.contentMatch){let o=t.doc.nodeAt(e),s=[],a=e+1;for(let e=0;e<o.childCount;e++){let l=o.child(e),c=a+l.nodeSize,h=i.matchType(l.type);if(h){i=h;for(let e=0;e<l.marks.length;e++)n.allowsMarkType(l.marks[e].type)||t.step(new f(a,c,l.marks[e]))}else s.push(new g(a,c,r.p2.empty));a=c}if(!i.validEnd){let e=i.fillBefore(r.HY.empty,!0);t.replace(a,a,new r.p2(e,0,0))}for(let e=s.length-1;e>=0;e--)t.step(s[e])}(this,t,e,n),this}}},8575:(t,e,n)=>{"use strict";n.d(e,{QW:()=>Rt,H6:()=>me});const r=()=>new Map,i=t=>{const e=r();return t.forEach(((t,n)=>{e.set(n,t)})),e},o=(t,e,n)=>{let r=t.get(e);return void 0===r&&t.set(e,r=n()),r},s=()=>new Set,a=t=>t[t.length-1],l=(t,e)=>{for(let n=0;n<e.length;n++)t.push(e[n])},c=Array.from,h=Array.isArray;class u{constructor(){this._observers=r()}on(t,e){o(this._observers,t,s).add(e)}once(t,e){const n=(...r)=>{this.off(t,n),e(...r)};this.on(t,n)}off(t,e){const n=this._observers.get(t);void 0!==n&&(n.delete(e),0===n.size&&this._observers.delete(t))}emit(t,e){return c((this._observers.get(t)||r()).values()).forEach((t=>t(...e)))}destroy(){this._observers=r()}}const d=Math.floor,p=(Math.ceil,Math.abs),f=(Math.imul,Math.round,Math.log10,Math.log2,Math.log,Math.sqrt,(t,e)=>t<e?t:e),g=(t,e)=>t>e?t:e,m=(Number.isNaN,Math.pow,Math.sign,String.fromCharCode,String.fromCodePoint,/^\s*/g),v=/([A-Z])/g,y=(t,e)=>(t=>t.replace(m,""))(t.replace(v,(t=>`${e}${(t=>t.toLowerCase())(t)}`)));"undefined"!=typeof TextEncoder&&new TextEncoder;let b="undefined"==typeof TextDecoder?null:new TextDecoder("utf-8",{fatal:!0,ignoreBOM:!0});b&&1===b.decode(new Uint8Array).length&&(b=null);let w=new class{constructor(){this.map=new Map}setItem(t,e){this.map.set(t,e)}getItem(t){return this.map.get(t)}},x=!0;try{"undefined"!=typeof localStorage&&(w=localStorage,x=!1)}catch(t){}const k=w,S="undefined"!=typeof process&&process.release&&/node|io\.js/.test(process.release.name);let _;"undefined"!=typeof navigator&&/Mac/.test(navigator.platform);const E=[];(t=>(()=>{if(void 0===_)if(S){_=r();const t=process.argv;let e=null;for(let n=0;n<t.length;n++){const r=t[n];"-"===r[0]?(null!==e&&_.set(e,""),e=r):null!==e?(_.set(e,r),e=null):E.push(r)}null!==e&&_.set(e,"")}else"object"==typeof location?(_=r(),(location.search||"?").slice(1).split("&").forEach((t=>{if(0!==t.length){const[e,n]=t.split("=");_.set(`--${y(e,"-")}`,n),_.set(`-${y(e,"-")}`,n)}}))):_=r();return _})().has(t))("--"+"production")||(t=>{return void 0===(e=S?process.env[t.toUpperCase()]:k.getItem(t))?null:e;var e})("production");const C=(t,e,n)=>new Uint8Array(t,e,n),O=128,M=127,A=(Number.MAX_SAFE_INTEGER,Number.MIN_SAFE_INTEGER,Number.isInteger||(t=>"number"==typeof t&&isFinite(t)&&d(t)===t));Number.isNaN,Number.parseInt;class T{constructor(){this.cpos=0,this.cbuf=new Uint8Array(100),this.bufs=[]}}const N=()=>new T,D=t=>{const e=new Uint8Array((t=>{let e=t.cpos;for(let n=0;n<t.bufs.length;n++)e+=t.bufs[n].length;return e})(t));let n=0;for(let r=0;r<t.bufs.length;r++){const i=t.bufs[r];e.set(i,n),n+=i.length}return e.set(C(t.cbuf.buffer,0,t.cpos),n),e},j=(t,e)=>{const n=t.cbuf.length;t.cpos===n&&(t.bufs.push(t.cbuf),t.cbuf=new Uint8Array(2*n),t.cpos=0),t.cbuf[t.cpos++]=e},R=j,P=(t,e)=>{for(;e>M;)j(t,O|M&e),e>>>=7;j(t,M&e)},z=(t,e)=>{const n=0!==(r=e)?r<0:1/r<0;var r;for(n&&(e=-e),j(t,(e>63?O:0)|(n?64:0)|63&e),e>>>=6;e>0;)j(t,(e>M?O:0)|M&e),e>>>=7},I=(t,e)=>{const n=unescape(encodeURIComponent(e)),r=n.length;P(t,r);for(let e=0;e<r;e++)j(t,n.codePointAt(e))},B=(t,e)=>{const n=t.cbuf.length,r=t.cpos,i=f(n-r,e.length),o=e.length-i;t.cbuf.set(e.subarray(0,i),r),t.cpos+=i,o>0&&(t.bufs.push(t.cbuf),t.cbuf=new Uint8Array(g(2*n,o)),t.cbuf.set(e.subarray(i)),t.cpos=o)},F=(t,e)=>{P(t,e.byteLength),B(t,e)},$=(t,e)=>{((t,e)=>{const n=t.cbuf.length;n-t.cpos<e&&(t.bufs.push(C(t.cbuf.buffer,0,t.cpos)),t.cbuf=new Uint8Array(2*g(n,e)),t.cpos=0)})(t,e);const n=new DataView(t.cbuf.buffer,t.cpos,e);return t.cpos+=e,n},L=new DataView(new ArrayBuffer(4)),H=(t,e)=>{switch(typeof e){case"string":j(t,119),I(t,e);break;case"number":A(e)&&p(e)<=2147483647?(j(t,125),z(t,e)):(n=e,L.setFloat32(0,n),L.getFloat32(0)===n?(j(t,124),((t,e)=>{$(t,4).setFloat32(0,e,!1)})(t,e)):(j(t,123),((t,e)=>{$(t,8).setFloat64(0,e,!1)})(t,e)));break;case"bigint":j(t,122),((t,e)=>{$(t,8).setBigInt64(0,e,!1)})(t,e);break;case"object":if(null===e)j(t,126);else if(e instanceof Array){j(t,117),P(t,e.length);for(let n=0;n<e.length;n++)H(t,e[n])}else if(e instanceof Uint8Array)j(t,116),F(t,e);else{j(t,118);const n=Object.keys(e);P(t,n.length);for(let r=0;r<n.length;r++){const i=n[r];I(t,i),H(t,e[i])}}break;case"boolean":j(t,e?120:121);break;default:j(t,127)}var n};class V extends T{constructor(t){super(),this.w=t,this.s=null,this.count=0}write(t){this.s===t?this.count++:(this.count>0&&P(this,this.count-1),this.count=1,this.w(this,t),this.s=t)}}const q=t=>{t.count>0&&(z(t.encoder,1===t.count?t.s:-t.s),t.count>1&&P(t.encoder,t.count-2))};class W{constructor(){this.encoder=new T,this.s=0,this.count=0}write(t){this.s===t?this.count++:(q(this),this.count=1,this.s=t)}toUint8Array(){return q(this),D(this.encoder)}}const U=t=>{if(t.count>0){const e=t.diff<<1|(1===t.count?0:1);z(t.encoder,e),t.count>1&&P(t.encoder,t.count-2)}};class Y{constructor(){this.encoder=new T,this.s=0,this.count=0,this.diff=0}write(t){this.diff===t-this.s?(this.s=t,this.count++):(U(this),this.count=1,this.diff=t-this.s,this.s=t)}toUint8Array(){return U(this),D(this.encoder)}}class J{constructor(){this.sarr=[],this.s="",this.lensE=new W}write(t){this.s+=t,this.s.length>19&&(this.sarr.push(this.s),this.s=""),this.lensE.write(t.length)}toUint8Array(){const t=new T;return this.sarr.push(this.s),this.s="",I(t,this.sarr.join("")),B(t,this.lensE.toUint8Array()),D(t)}}"undefined"==typeof window||void 0!==window.performance&&window.performance;const X="undefined"==typeof crypto?null:crypto,K=null!==X?t=>{const e=new ArrayBuffer(t),n=new Uint8Array(e);return X.getRandomValues(n),e}:t=>{const e=new ArrayBuffer(t),n=new Uint8Array(e);for(let e=0;e<t;e++)n[e]=Math.ceil(4294967295*Math.random()>>>0);return e},G=(Math.random,()=>new Uint32Array(K(4))[0]),Z=[1e7]+-1e3+-4e3+-8e3+-1e11,Q=()=>Z.replace(/[018]/g,(t=>(t^G()&15>>t/4).toString(16))),tt=t=>new Error(t),et=()=>{throw tt("Method unimplemented")},nt=()=>{throw tt("Unexpected case")},rt=(t,e,n=0)=>{try{for(;n<t.length;n++)t[n](...e)}finally{n<t.length&&rt(t,e,n+1)}},it=Symbol;class ot{constructor(t,e){this.left=t,this.right=e}}const st=(t,e)=>new ot(t,e),at="undefined"!=typeof document?document:{},lt=("undefined"!=typeof DOMParser&&new DOMParser,at.ELEMENT_NODE,at.TEXT_NODE,at.CDATA_SECTION_NODE,at.COMMENT_NODE,at.DOCUMENT_NODE,at.DOCUMENT_TYPE_NODE,at.DOCUMENT_FRAGMENT_NODE,Date.now),ct=it(),ht=it(),ut=it(),dt=it(),pt=it(),ft=it(),gt=it(),mt=it(),vt=it(),yt={[ct]:st("font-weight","bold"),[ht]:st("font-weight","normal"),[ut]:st("color","blue"),[pt]:st("color","green"),[dt]:st("color","grey"),[ft]:st("color","red"),[gt]:st("color","purple"),[mt]:st("color","orange"),[vt]:st("color","black")},bt={[ct]:"[1m",[ht]:"[2m",[ut]:"[34m",[pt]:"[32m",[dt]:"[37m",[ft]:"[31m",[gt]:"[35m",[mt]:"[38;5;208m",[vt]:"[0m"},wt=S?t=>{const e=[],n=[];let r=0;for(;r<t.length;r++){const n=t[r],i=bt[n];if(void 0!==i)e.push(i);else{if(n.constructor!==String&&n.constructor!==Number)break;e.push(n)}}for(r>0&&(e.push("[0m"),n.push(e.join("")));r<t.length;r++){const e=t[r];e instanceof Symbol||n.push(e)}return n}:t=>{const e=[],n=[],i=r();let o=[],s=0;for(;s<t.length;s++){const r=t[s],o=yt[r];if(void 0!==o)i.set(o.left,o.right);else{if(r.constructor!==String&&r.constructor!==Number)break;{const t=((t,e)=>{const n=[];for(const[r,i]of t)n.push(e(i,r));return n})(i,((t,e)=>`${e}:${t};`)).join("");s>0||t.length>0?(e.push("%c"+r),n.push(t)):e.push(r)}}}for(s>0&&(o=n,o.unshift(e.join("")));s<t.length;s++){const e=t[s];e instanceof Symbol||o.push(e)}return o},xt=new Set;lt();const kt=t=>({[Symbol.iterator](){return this},next:t}),St=(t,e)=>kt((()=>{const{done:n,value:r}=t.next();return{done:n,value:n?void 0:e(r)}})),_t=(Object.assign,Object.keys),Et=t=>_t(t).length;class Ct{constructor(t,e){this.clock=t,this.len=e}}class Ot{constructor(){this.clients=new Map}}const Mt=(t,e,n)=>e.clients.forEach(((e,r)=>{const i=t.doc.store.clients.get(r);for(let r=0;r<e.length;r++){const o=e[r];se(t,i,o.clock,o.len,n)}})),At=(t,e)=>{const n=t.clients.get(e.client);return void 0!==n&&null!==((t,e)=>{let n=0,r=t.length-1;for(;n<=r;){const i=d((n+r)/2),o=t[i],s=o.clock;if(s<=e){if(e<s+o.len)return i;n=i+1}else r=i-1}return null})(n,e.clock)},Tt=t=>{t.clients.forEach((t=>{let e,n;for(t.sort(((t,e)=>t.clock-e.clock)),e=1,n=1;e<t.length;e++){const r=t[n-1],i=t[e];r.clock+r.len>=i.clock?r.len=g(r.len,i.clock+i.len-r.clock):(n<e&&(t[n]=i),n++)}t.length=n}))},Nt=t=>{const e=new Ot;for(let n=0;n<t.length;n++)t[n].clients.forEach(((r,i)=>{if(!e.clients.has(i)){const o=r.slice();for(let e=n+1;e<t.length;e++)l(o,t[e].clients.get(i)||[]);e.clients.set(i,o)}}));return Tt(e),e},Dt=(t,e,n,r)=>{o(t.clients,e,(()=>[])).push(new Ct(n,r))},jt=G;class Rt extends u{constructor({guid:t=Q(),collectionid:e=null,gc:n=!0,gcFilter:r=(()=>!0),meta:i=null,autoLoad:o=!1,shouldLoad:s=!0}={}){super(),this.gc=n,this.gcFilter=r,this.clientID=jt(),this.guid=t,this.collectionid=e,this.share=new Map,this.store=new Gt,this._transaction=null,this._transactionCleanups=[],this.subdocs=new Set,this._item=null,this.shouldLoad=s,this.autoLoad=o,this.meta=i,this.isLoaded=!1,this.whenLoaded=new Promise((t=>{this.on("load",(()=>{this.isLoaded=!0,t(this)}))}))}load(){const t=this._item;null===t||this.shouldLoad||de(t.parent.doc,(t=>{t.subdocsLoaded.add(this)}),null,!0),this.shouldLoad=!0}getSubdocs(){return this.subdocs}getSubdocGuids(){return new Set(Array.from(this.subdocs).map((t=>t.guid)))}transact(t,e=null){de(this,t,e)}get(t,e=Ee){const n=o(this.share,t,(()=>{const t=new e;return t._integrate(this,null),t})),r=n.constructor;if(e!==Ee&&r!==e){if(r===Ee){const r=new e;r._map=n._map,n._map.forEach((t=>{for(;null!==t;t=t.left)t.parent=r})),r._start=n._start;for(let t=r._start;null!==t;t=t.right)t.parent=r;return r._length=n._length,this.share.set(t,r),r._integrate(this,null),r}throw new Error(`Type with the name ${t} has already been defined with a different constructor`)}return n}getArray(t=""){return this.get(t,Ve)}getText(t=""){return this.get(t,sn)}getMap(t=""){return this.get(t,We)}getXmlFragment(t=""){return this.get(t,ln)}toJSON(){const t={};return this.share.forEach(((e,n)=>{t[n]=e.toJSON()})),t}destroy(){c(this.subdocs).forEach((t=>t.destroy()));const t=this._item;if(null!==t){this._item=null;const e=t.content;e.doc=new Rt({guid:this.guid,...e.opts,shouldLoad:!1}),e.doc._item=t,de(t.parent.doc,(n=>{const r=e.doc;t.deleted||n.subdocsAdded.add(r),n.subdocsRemoved.add(this)}),null,!0)}this.emit("destroyed",[!0]),this.emit("destroy",[this]),super.destroy()}on(t,e){super.on(t,e)}off(t,e){super.off(t,e)}}class Pt extends class{constructor(){this.restEncoder=N()}toUint8Array(){return D(this.restEncoder)}resetDsCurVal(){}writeDsClock(t){P(this.restEncoder,t)}writeDsLen(t){P(this.restEncoder,t)}}{writeLeftID(t){P(this.restEncoder,t.client),P(this.restEncoder,t.clock)}writeRightID(t){P(this.restEncoder,t.client),P(this.restEncoder,t.clock)}writeClient(t){P(this.restEncoder,t)}writeInfo(t){R(this.restEncoder,t)}writeString(t){I(this.restEncoder,t)}writeParentInfo(t){P(this.restEncoder,t?1:0)}writeTypeRef(t){P(this.restEncoder,t)}writeLen(t){P(this.restEncoder,t)}writeAny(t){H(this.restEncoder,t)}writeBuf(t){F(this.restEncoder,t)}writeJSON(t){I(this.restEncoder,JSON.stringify(t))}writeKey(t){I(this.restEncoder,t)}}class zt extends class{constructor(){this.restEncoder=N(),this.dsCurrVal=0}toUint8Array(){return D(this.restEncoder)}resetDsCurVal(){this.dsCurrVal=0}writeDsClock(t){const e=t-this.dsCurrVal;this.dsCurrVal=t,P(this.restEncoder,e)}writeDsLen(t){0===t&&nt(),P(this.restEncoder,t-1),this.dsCurrVal+=t}}{constructor(){super(),this.keyMap=new Map,this.keyClock=0,this.keyClockEncoder=new Y,this.clientEncoder=new W,this.leftClockEncoder=new Y,this.rightClockEncoder=new Y,this.infoEncoder=new V(R),this.stringEncoder=new J,this.parentInfoEncoder=new V(R),this.typeRefEncoder=new W,this.lenEncoder=new W}toUint8Array(){const t=N();return P(t,0),F(t,this.keyClockEncoder.toUint8Array()),F(t,this.clientEncoder.toUint8Array()),F(t,this.leftClockEncoder.toUint8Array()),F(t,this.rightClockEncoder.toUint8Array()),F(t,D(this.infoEncoder)),F(t,this.stringEncoder.toUint8Array()),F(t,D(this.parentInfoEncoder)),F(t,this.typeRefEncoder.toUint8Array()),F(t,this.lenEncoder.toUint8Array()),B(t,D(this.restEncoder)),D(t)}writeLeftID(t){this.clientEncoder.write(t.client),this.leftClockEncoder.write(t.clock)}writeRightID(t){this.clientEncoder.write(t.client),this.rightClockEncoder.write(t.clock)}writeClient(t){this.clientEncoder.write(t)}writeInfo(t){this.infoEncoder.write(t)}writeString(t){this.stringEncoder.write(t)}writeParentInfo(t){this.parentInfoEncoder.write(t?1:0)}writeTypeRef(t){this.typeRefEncoder.write(t)}writeLen(t){this.lenEncoder.write(t)}writeAny(t){H(this.restEncoder,t)}writeBuf(t){F(this.restEncoder,t)}writeJSON(t){H(this.restEncoder,t)}writeKey(t){const e=this.keyMap.get(t);void 0===e?(this.keyClockEncoder.write(this.keyClock++),this.stringEncoder.write(t)):this.keyClockEncoder.write(e)}}class It{constructor(){this.l=[]}}const Bt=()=>new It,Ft=(t,e)=>t.l.push(e),$t=(t,e)=>{const n=t.l,r=n.length;t.l=n.filter((t=>e!==t)),r===t.l.length&&console.error("[yjs] Tried to remove event handler that doesn't exist.")},Lt=(t,e,n)=>rt(t.l,[e,n]);class Ht{constructor(t,e){this.client=t,this.clock=e}}const Vt=(t,e)=>t===e||null!==t&&null!==e&&t.client===e.client&&t.clock===e.clock,qt=(t,e)=>new Ht(t,e),Wt=(t,e)=>{for(;null!==e;){if(e.parent===t)return!0;e=e.parent._item}return!1};class Ut{constructor(t,e){this.ds=t,this.sv=e}}const Yt=(Xt=new Ot,Kt=new Map,new Ut(Xt,Kt),(t,e)=>void 0===e?!t.deleted:e.sv.has(t.id.client)&&(e.sv.get(t.id.client)||0)>t.id.clock&&!At(e.ds,t.id)),Jt=(t,e)=>{const n=o(t.meta,Jt,s),r=t.doc.store;n.has(e)||(e.sv.forEach(((e,n)=>{e<Qt(r,n)&&ie(t,qt(n,e))})),Mt(t,e.ds,(t=>{})),n.add(e))};var Xt,Kt;class Gt{constructor(){this.clients=new Map,this.pendingStructs=null,this.pendingDs=null}}const Zt=t=>{const e=new Map;return t.clients.forEach(((t,n)=>{const r=t[t.length-1];e.set(n,r.id.clock+r.length)})),e},Qt=(t,e)=>{const n=t.clients.get(e);if(void 0===n)return 0;const r=n[n.length-1];return r.id.clock+r.length},te=(t,e)=>{let n=t.clients.get(e.id.client);if(void 0===n)n=[],t.clients.set(e.id.client,n);else{const t=n[n.length-1];if(t.id.clock+t.length!==e.id.clock)throw nt()}n.push(e)},ee=(t,e)=>{let n=0,r=t.length-1,i=t[r],o=i.id.clock;if(o===e)return r;let s=d(e/(o+i.length-1)*r);for(;n<=r;){if(i=t[s],o=i.id.clock,o<=e){if(e<o+i.length)return s;n=s+1}else r=s-1;s=d((n+r)/2)}throw nt()},ne=(t,e)=>{const n=t.clients.get(e.client);return n[ee(n,e.clock)]},re=(t,e,n)=>{const r=ee(e,n),i=e[r];return i.id.clock<n&&i instanceof Tn?(e.splice(r+1,0,Mn(t,i,n-i.id.clock)),r+1):r},ie=(t,e)=>{const n=t.doc.store.clients.get(e.client);return n[re(t,n,e.clock)]},oe=(t,e,n)=>{const r=e.clients.get(n.client),i=ee(r,n.clock),o=r[i];return n.clock!==o.id.clock+o.length-1&&o.constructor!==dn&&r.splice(i+1,0,Mn(t,o,n.clock-o.id.clock+1)),o},se=(t,e,n,r,i)=>{if(0===r)return;const o=n+r;let s,a=re(t,e,n);do{s=e[a++],o<s.id.clock+s.length&&re(t,e,o),i(s)}while(a<e.length&&e[a].id.clock<o)};class ae{constructor(t,e,n){this.doc=t,this.deleteSet=new Ot,this.beforeState=Zt(t.store),this.afterState=new Map,this.changed=new Map,this.changedParentTypes=new Map,this._mergeStructs=[],this.origin=e,this.meta=new Map,this.local=n,this.subdocsAdded=new Set,this.subdocsRemoved=new Set,this.subdocsLoaded=new Set}}const le=(t,e)=>!(0===e.deleteSet.clients.size&&!((t,n)=>{for(const[n,o]of t)if(r=o,i=n,e.beforeState.get(i)!==r)return!0;var r,i;return!1})(e.afterState)||(Tt(e.deleteSet),((t,e)=>{((t,e,n)=>{const r=new Map;n.forEach(((t,n)=>{Qt(e,n)>t&&r.set(n,t)})),Zt(e).forEach(((t,e)=>{n.has(e)||r.set(e,0)})),P(t.restEncoder,r.size),Array.from(r.entries()).sort(((t,e)=>e[0]-t[0])).forEach((([n,r])=>{((t,e,n,r)=>{r=g(r,e[0].id.clock);const i=ee(e,r);P(t.restEncoder,e.length-i),t.writeClient(n),P(t.restEncoder,r);const o=e[i];o.write(t,r-o.id.clock);for(let n=i+1;n<e.length;n++)e[n].write(t,0)})(t,e.clients.get(n),n,r)}))})(t,e.doc.store,e.beforeState)})(t,e),((t,e)=>{P(t.restEncoder,e.clients.size),e.clients.forEach(((e,n)=>{t.resetDsCurVal(),P(t.restEncoder,n);const r=e.length;P(t.restEncoder,r);for(let n=0;n<r;n++){const r=e[n];t.writeDsClock(r.clock),t.writeDsLen(r.len)}}))})(t,e.deleteSet),0)),ce=(t,e,n)=>{const r=e._item;(null===r||r.id.clock<(t.beforeState.get(r.id.client)||0)&&!r.deleted)&&o(t.changed,e,s).add(n)},he=(t,e)=>{const n=t[e-1],r=t[e];n.deleted===r.deleted&&n.constructor===r.constructor&&n.mergeWith(r)&&(t.splice(e,1),r instanceof Tn&&null!==r.parentSub&&r.parent._map.get(r.parentSub)===r&&r.parent._map.set(r.parentSub,n))},ue=(t,e)=>{if(e<t.length){const n=t[e],r=n.doc,i=r.store,o=n.deleteSet,s=n._mergeStructs;try{Tt(o),n.afterState=Zt(n.doc.store),r._transaction=null,r.emit("beforeObserverCalls",[n,r]);const a=[];n.changed.forEach(((t,e)=>a.push((()=>{null!==e._item&&e._item.deleted||e._callObserver(n,t)})))),a.push((()=>{n.changedParentTypes.forEach(((t,e)=>a.push((()=>{null!==e._item&&e._item.deleted||((t=t.filter((t=>null===t.target._item||!t.target._item.deleted))).forEach((t=>{t.currentTarget=e})),t.sort(((t,e)=>t.path.length-e.path.length)),Lt(e._dEH,t,n))})))),a.push((()=>r.emit("afterTransaction",[n,r])))})),rt(a,[])}finally{r.gc&&((t,e,n)=>{for(const[r,i]of t.clients.entries()){const t=e.clients.get(r);for(let r=i.length-1;r>=0;r--){const o=i[r],s=o.clock+o.len;for(let r=ee(t,o.clock),i=t[r];r<t.length&&i.id.clock<s;i=t[++r]){const i=t[r];if(o.clock+o.len<=i.id.clock)break;i instanceof Tn&&i.deleted&&!i.keep&&n(i)&&i.gc(e,!1)}}}})(o,i,r.gcFilter),((t,e)=>{t.clients.forEach(((t,n)=>{const r=e.clients.get(n);for(let e=t.length-1;e>=0;e--){const n=t[e];for(let t=f(r.length-1,1+ee(r,n.clock+n.len-1)),e=r[t];t>0&&e.id.clock>=n.clock;e=r[--t])he(r,t)}}))})(o,i),n.afterState.forEach(((t,e)=>{const r=n.beforeState.get(e)||0;if(r!==t){const t=i.clients.get(e),n=g(ee(t,r),1);for(let e=t.length-1;e>=n;e--)he(t,e)}}));for(let t=0;t<s.length;t++){const{client:e,clock:n}=s[t].id,r=i.clients.get(e),o=ee(r,n);o+1<r.length&&he(r,o+1),o>0&&he(r,o)}if(n.local||n.afterState.get(r.clientID)===n.beforeState.get(r.clientID)||(((...t)=>{console.log(...wt(t)),xt.forEach((e=>e.print(t)))})(mt,ct,"[yjs] ",ht,ft,"Changed the client-id because another client seems to be using it."),r.clientID=jt()),r.emit("afterTransactionCleanup",[n,r]),r._observers.has("update")){const t=new Pt;le(t,n)&&r.emit("update",[t.toUint8Array(),n.origin,r,n])}if(r._observers.has("updateV2")){const t=new zt;le(t,n)&&r.emit("updateV2",[t.toUint8Array(),n.origin,r,n])}const{subdocsAdded:a,subdocsLoaded:l,subdocsRemoved:c}=n;(a.size>0||c.size>0||l.size>0)&&(a.forEach((t=>{t.clientID=r.clientID,null==t.collectionid&&(t.collectionid=r.collectionid),r.subdocs.add(t)})),c.forEach((t=>r.subdocs.delete(t))),r.emit("subdocs",[{loaded:l,added:a,removed:c},r,n]),c.forEach((t=>t.destroy()))),t.length<=e+1?(r._transactionCleanups=[],r.emit("afterAllTransactions",[r,t])):ue(t,e+1)}}},de=(t,e,n=null,r=!0)=>{const i=t._transactionCleanups;let o=!1;null===t._transaction&&(o=!0,t._transaction=new ae(t,n,r),i.push(t._transaction),1===i.length&&t.emit("beforeAllTransactions",[t]),t.emit("beforeTransaction",[t._transaction,t]));try{e(t._transaction)}finally{o&&i[0]===t._transaction&&ue(i,0)}};class pe{constructor(t,e){this.insertions=e,this.deletions=t,this.meta=new Map}}const fe=(t,e,n)=>{Mt(t,n.deletions,(t=>{t instanceof Tn&&e.scope.some((e=>Wt(e,t)))&&On(t,!1)}))},ge=(t,e,n)=>{let r=null,i=null;const o=t.doc,s=t.scope;if(de(o,(n=>{for(;e.length>0&&null===r;){const i=o.store,a=e.pop(),l=new Set,c=[];let h=!1;Mt(n,a.insertions,(t=>{if(t instanceof Tn){if(null!==t.redone){let{item:e,diff:r}=Cn(i,t.id);r>0&&(e=ie(n,qt(e.id.client,e.id.clock+r))),t=e}!t.deleted&&s.some((e=>Wt(e,t)))&&c.push(t)}})),Mt(n,a.deletions,(t=>{t instanceof Tn&&s.some((e=>Wt(e,t)))&&!At(a.insertions,t.id)&&l.add(t)})),l.forEach((e=>{h=null!==An(n,e,l,a.insertions,t.ignoreRemoteMapChanges)||h}));for(let e=c.length-1;e>=0;e--){const r=c[e];t.deleteFilter(r)&&(r.delete(n),h=!0)}r=h?a:null}n.changed.forEach(((t,e)=>{t.has(null)&&e._searchMarker&&(e._searchMarker.length=0)})),i=n}),t),null!=r){const e=i.changedParentTypes;t.emit("stack-item-popped",[{stackItem:r,type:n,changedParentTypes:e},t])}return r};class me extends u{constructor(t,{captureTimeout:e=500,captureTransaction:n=(t=>!0),deleteFilter:r=(()=>!0),trackedOrigins:i=new Set([null]),ignoreRemoteMapChanges:o=!1}={}){super(),this.scope=[],this.addToScope(t),this.deleteFilter=r,i.add(this),this.trackedOrigins=i,this.captureTransaction=n,this.undoStack=[],this.redoStack=[],this.undoing=!1,this.redoing=!1,this.doc=this.scope[0].doc,this.lastChange=0,this.ignoreRemoteMapChanges=o,this.afterTransactionHandler=t=>{if(!(this.captureTransaction(t)&&this.scope.some((e=>t.changedParentTypes.has(e)))&&(this.trackedOrigins.has(t.origin)||t.origin&&this.trackedOrigins.has(t.origin.constructor))))return;const n=this.undoing,r=this.redoing,i=n?this.redoStack:this.undoStack;n?this.stopCapturing():r||this.clear(!1,!0);const o=new Ot;t.afterState.forEach(((e,n)=>{const r=t.beforeState.get(n)||0,i=e-r;i>0&&Dt(o,n,r,i)}));const s=lt();let a=!1;if(s-this.lastChange<e&&i.length>0&&!n&&!r){const e=i[i.length-1];e.deletions=Nt([e.deletions,t.deleteSet]),e.insertions=Nt([e.insertions,o])}else i.push(new pe(t.deleteSet,o)),a=!0;n||r||(this.lastChange=s),Mt(t,t.deleteSet,(t=>{t instanceof Tn&&this.scope.some((e=>Wt(e,t)))&&On(t,!0)}));const l=[{stackItem:i[i.length-1],origin:t.origin,type:n?"redo":"undo",changedParentTypes:t.changedParentTypes},this];a?this.emit("stack-item-added",l):this.emit("stack-item-updated",l)},this.doc.on("afterTransaction",this.afterTransactionHandler),this.doc.on("destroy",(()=>{this.destroy()}))}addToScope(t){(t=h(t)?t:[t]).forEach((t=>{this.scope.every((e=>e!==t))&&this.scope.push(t)}))}addTrackedOrigin(t){this.trackedOrigins.add(t)}removeTrackedOrigin(t){this.trackedOrigins.delete(t)}clear(t=!0,e=!0){(t&&this.canUndo()||e&&this.canRedo())&&this.doc.transact((n=>{t&&(this.undoStack.forEach((t=>fe(n,this,t))),this.undoStack=[]),e&&(this.redoStack.forEach((t=>fe(n,this,t))),this.redoStack=[]),this.emit("stack-cleared",[{undoStackCleared:t,redoStackCleared:e}])}))}stopCapturing(){this.lastChange=0}undo(){let t;this.undoing=!0;try{t=ge(this,this.undoStack,"undo")}finally{this.undoing=!1}return t}redo(){let t;this.redoing=!0;try{t=ge(this,this.redoStack,"redo")}finally{this.redoing=!1}return t}canUndo(){return this.undoStack.length>0}canRedo(){return this.redoStack.length>0}destroy(){this.trackedOrigins.delete(this),this.doc.off("afterTransaction",this.afterTransactionHandler),super.destroy()}}class ve{constructor(t,e){this.target=t,this.currentTarget=t,this.transaction=e,this._changes=null,this._keys=null,this._delta=null}get path(){return ye(this.currentTarget,this.target)}deletes(t){return At(this.transaction.deleteSet,t.id)}get keys(){if(null===this._keys){const t=new Map,e=this.target;this.transaction.changed.get(e).forEach((n=>{if(null!==n){const r=e._map.get(n);let i,o;if(this.adds(r)){let t=r.left;for(;null!==t&&this.adds(t);)t=t.left;if(this.deletes(r)){if(null===t||!this.deletes(t))return;i="delete",o=a(t.content.getContent())}else null!==t&&this.deletes(t)?(i="update",o=a(t.content.getContent())):(i="add",o=void 0)}else{if(!this.deletes(r))return;i="delete",o=a(r.content.getContent())}t.set(n,{action:i,oldValue:o})}})),this._keys=t}return this._keys}get delta(){return this.changes.delta}adds(t){return t.id.clock>=(this.transaction.beforeState.get(t.id.client)||0)}get changes(){let t=this._changes;if(null===t){const e=this.target,n=s(),r=s(),i=[];if(t={added:n,deleted:r,delta:i,keys:this.keys},this.transaction.changed.get(e).has(null)){let t=null;const o=()=>{t&&i.push(t)};for(let i=e._start;null!==i;i=i.right)i.deleted?this.deletes(i)&&!this.adds(i)&&(null!==t&&void 0!==t.delete||(o(),t={delete:0}),t.delete+=i.length,r.add(i)):this.adds(i)?(null!==t&&void 0!==t.insert||(o(),t={insert:[]}),t.insert=t.insert.concat(i.content.getContent()),n.add(i)):(null!==t&&void 0!==t.retain||(o(),t={retain:0}),t.retain+=i.length);null!==t&&void 0===t.retain&&o()}this._changes=t}return t}}const ye=(t,e)=>{const n=[];for(;null!==e._item&&e!==t;){if(null!==e._item.parentSub)n.unshift(e._item.parentSub);else{let t=0,r=e._item.parent._start;for(;r!==e._item&&null!==r;)r.deleted||t++,r=r.right;n.unshift(t)}e=e._item.parent}return n};let be=0;class we{constructor(t,e){t.marker=!0,this.p=t,this.index=e,this.timestamp=be++}}const xe=(t,e,n)=>{t.p.marker=!1,t.p=e,e.marker=!0,t.index=n,t.timestamp=be++},ke=(t,e)=>{if(null===t._start||0===e||null===t._searchMarker)return null;const n=0===t._searchMarker.length?null:t._searchMarker.reduce(((t,n)=>p(e-t.index)<p(e-n.index)?t:n));let r=t._start,i=0;for(null!==n&&(r=n.p,i=n.index,(t=>{t.timestamp=be++})(n));null!==r.right&&i<e;){if(!r.deleted&&r.countable){if(e<i+r.length)break;i+=r.length}r=r.right}for(;null!==r.left&&i>e;)r=r.left,!r.deleted&&r.countable&&(i-=r.length);for(;null!==r.left&&r.left.id.client===r.id.client&&r.left.id.clock+r.left.length===r.id.clock;)r=r.left,!r.deleted&&r.countable&&(i-=r.length);return null!==n&&p(n.index-i)<r.parent.length/80?(xe(n,r,i),n):((t,e,n)=>{if(t.length>=80){const r=t.reduce(((t,e)=>t.timestamp<e.timestamp?t:e));return xe(r,e,n),r}{const r=new we(e,n);return t.push(r),r}})(t._searchMarker,r,i)},Se=(t,e,n)=>{for(let r=t.length-1;r>=0;r--){const i=t[r];if(n>0){let e=i.p;for(e.marker=!1;e&&(e.deleted||!e.countable);)e=e.left,e&&!e.deleted&&e.countable&&(i.index-=e.length);if(null===e||!0===e.marker){t.splice(r,1);continue}i.p=e,e.marker=!0}(e<i.index||n>0&&e===i.index)&&(i.index=g(e,i.index+n))}},_e=(t,e,n)=>{const r=t,i=e.changedParentTypes;for(;o(i,t,(()=>[])).push(n),null!==t._item;)t=t._item.parent;Lt(r._eH,n,e)};class Ee{constructor(){this._item=null,this._map=new Map,this._start=null,this.doc=null,this._length=0,this._eH=Bt(),this._dEH=Bt(),this._searchMarker=null}get parent(){return this._item?this._item.parent:null}_integrate(t,e){this.doc=t,this._item=e}_copy(){throw et()}clone(){throw et()}_write(t){}get _first(){let t=this._start;for(;null!==t&&t.deleted;)t=t.right;return t}_callObserver(t,e){!t.local&&this._searchMarker&&(this._searchMarker.length=0)}observe(t){Ft(this._eH,t)}observeDeep(t){Ft(this._dEH,t)}unobserve(t){$t(this._eH,t)}unobserveDeep(t){$t(this._dEH,t)}toJSON(){}}const Ce=(t,e,n)=>{e<0&&(e=t._length+e),n<0&&(n=t._length+n);let r=n-e;const i=[];let o=t._start;for(;null!==o&&r>0;){if(o.countable&&!o.deleted){const t=o.content.getContent();if(t.length<=e)e-=t.length;else{for(let n=e;n<t.length&&r>0;n++)i.push(t[n]),r--;e=0}}o=o.right}return i},Oe=t=>{const e=[];let n=t._start;for(;null!==n;){if(n.countable&&!n.deleted){const t=n.content.getContent();for(let n=0;n<t.length;n++)e.push(t[n])}n=n.right}return e},Me=(t,e)=>{let n=0,r=t._start;for(;null!==r;){if(r.countable&&!r.deleted){const i=r.content.getContent();for(let r=0;r<i.length;r++)e(i[r],n++,t)}r=r.right}},Ae=(t,e)=>{const n=[];return Me(t,((r,i)=>{n.push(e(r,i,t))})),n},Te=t=>{let e=t._start,n=null,r=0;return{[Symbol.iterator](){return this},next:()=>{if(null===n){for(;null!==e&&e.deleted;)e=e.right;if(null===e)return{done:!0,value:void 0};n=e.content.getContent(),r=0,e=e.right}const t=n[r++];return n.length<=r&&(n=null),{done:!1,value:t}}}},Ne=(t,e)=>{const n=ke(t,e);let r=t._start;for(null!==n&&(r=n.p,e-=n.index);null!==r;r=r.right)if(!r.deleted&&r.countable){if(e<r.length)return r.content.getContent()[e];e-=r.length}},De=(t,e,n,r)=>{let i=n;const o=t.doc,s=o.clientID,a=o.store,l=null===n?e._start:n.right;let c=[];const h=()=>{c.length>0&&(i=new Tn(qt(s,Qt(a,s)),i,i&&i.lastId,l,l&&l.id,e,null,new yn(c)),i.integrate(t,0),c=[])};r.forEach((n=>{if(null===n)c.push(n);else switch(n.constructor){case Number:case Object:case Boolean:case Array:case String:c.push(n);break;default:switch(h(),n.constructor){case Uint8Array:case ArrayBuffer:i=new Tn(qt(s,Qt(a,s)),i,i&&i.lastId,l,l&&l.id,e,null,new pn(new Uint8Array(n))),i.integrate(t,0);break;case Rt:i=new Tn(qt(s,Qt(a,s)),i,i&&i.lastId,l,l&&l.id,e,null,new gn(n)),i.integrate(t,0);break;default:if(!(n instanceof Ee))throw new Error("Unexpected content type in insert operation");i=new Tn(qt(s,Qt(a,s)),i,i&&i.lastId,l,l&&l.id,e,null,new En(n)),i.integrate(t,0)}}})),h()},je=tt("Length exceeded!"),Re=(t,e,n,r)=>{if(n>e._length)throw je;if(0===n)return e._searchMarker&&Se(e._searchMarker,n,r.length),De(t,e,null,r);const i=n,o=ke(e,n);let s=e._start;for(null!==o&&(s=o.p,0==(n-=o.index)&&(s=s.prev,n+=s&&s.countable&&!s.deleted?s.length:0));null!==s;s=s.right)if(!s.deleted&&s.countable){if(n<=s.length){n<s.length&&ie(t,qt(s.id.client,s.id.clock+n));break}n-=s.length}return e._searchMarker&&Se(e._searchMarker,i,r.length),De(t,e,s,r)},Pe=(t,e,n,r)=>{if(0===r)return;const i=n,o=r,s=ke(e,n);let a=e._start;for(null!==s&&(a=s.p,n-=s.index);null!==a&&n>0;a=a.right)!a.deleted&&a.countable&&(n<a.length&&ie(t,qt(a.id.client,a.id.clock+n)),n-=a.length);for(;r>0&&null!==a;)a.deleted||(r<a.length&&ie(t,qt(a.id.client,a.id.clock+r)),a.delete(t),r-=a.length),a=a.right;if(r>0)throw je;e._searchMarker&&Se(e._searchMarker,i,-o+r)},ze=(t,e,n)=>{const r=e._map.get(n);void 0!==r&&r.delete(t)},Ie=(t,e,n,r)=>{const i=e._map.get(n)||null,o=t.doc,s=o.clientID;let a;if(null==r)a=new yn([r]);else switch(r.constructor){case Number:case Object:case Boolean:case Array:case String:a=new yn([r]);break;case Uint8Array:a=new pn(r);break;case Rt:a=new gn(r);break;default:if(!(r instanceof Ee))throw new Error("Unexpected content type");a=new En(r)}new Tn(qt(s,Qt(o.store,s)),i,i&&i.lastId,null,null,e,n,a).integrate(t,0)},Be=(t,e)=>{const n=t._map.get(e);return void 0===n||n.deleted?void 0:n.content.getContent()[n.length-1]},Fe=t=>{const e={};return t._map.forEach(((t,n)=>{t.deleted||(e[n]=t.content.getContent()[t.length-1])})),e},$e=(t,e)=>{const n=t._map.get(e);return void 0!==n&&!n.deleted},Le=t=>{return e=t.entries(),n=t=>!t[1].deleted,kt((()=>{let t;do{t=e.next()}while(!t.done&&!n(t.value));return t}));var e,n};class He extends ve{constructor(t,e){super(t,e),this._transaction=e}}class Ve extends Ee{constructor(){super(),this._prelimContent=[],this._searchMarker=[]}static from(t){const e=new Ve;return e.push(t),e}_integrate(t,e){super._integrate(t,e),this.insert(0,this._prelimContent),this._prelimContent=null}_copy(){return new Ve}clone(){const t=new Ve;return t.insert(0,this.toArray().map((t=>t instanceof Ee?t.clone():t))),t}get length(){return null===this._prelimContent?this._length:this._prelimContent.length}_callObserver(t,e){super._callObserver(t,e),_e(this,t,new He(this,t))}insert(t,e){null!==this.doc?de(this.doc,(n=>{Re(n,this,t,e)})):this._prelimContent.splice(t,0,...e)}push(t){null!==this.doc?de(this.doc,(e=>{((t,e,n)=>{let r=(e._searchMarker||[]).reduce(((t,e)=>e.index>t.index?e:t),{index:0,p:e._start}).p;if(r)for(;r.right;)r=r.right;De(t,e,r,n)})(e,this,t)})):this._prelimContent.push(...t)}unshift(t){this.insert(0,t)}delete(t,e=1){null!==this.doc?de(this.doc,(n=>{Pe(n,this,t,e)})):this._prelimContent.splice(t,e)}get(t){return Ne(this,t)}toArray(){return Oe(this)}slice(t=0,e=this.length){return Ce(this,t,e)}toJSON(){return this.map((t=>t instanceof Ee?t.toJSON():t))}map(t){return Ae(this,t)}forEach(t){Me(this,t)}[Symbol.iterator](){return Te(this)}_write(t){t.writeTypeRef(wn)}}class qe extends ve{constructor(t,e,n){super(t,e),this.keysChanged=n}}class We extends Ee{constructor(t){super(),this._prelimContent=null,this._prelimContent=void 0===t?new Map:new Map(t)}_integrate(t,e){super._integrate(t,e),this._prelimContent.forEach(((t,e)=>{this.set(e,t)})),this._prelimContent=null}_copy(){return new We}clone(){const t=new We;return this.forEach(((e,n)=>{t.set(n,e instanceof Ee?e.clone():e)})),t}_callObserver(t,e){_e(this,t,new qe(this,t,e))}toJSON(){const t={};return this._map.forEach(((e,n)=>{if(!e.deleted){const r=e.content.getContent()[e.length-1];t[n]=r instanceof Ee?r.toJSON():r}})),t}get size(){return[...Le(this._map)].length}keys(){return St(Le(this._map),(t=>t[0]))}values(){return St(Le(this._map),(t=>t[1].content.getContent()[t[1].length-1]))}entries(){return St(Le(this._map),(t=>[t[0],t[1].content.getContent()[t[1].length-1]]))}forEach(t){return this._map.forEach(((e,n)=>{e.deleted||t(e.content.getContent()[e.length-1],n,this)})),{}}[Symbol.iterator](){return this.entries()}delete(t){null!==this.doc?de(this.doc,(e=>{ze(e,this,t)})):this._prelimContent.delete(t)}set(t,e){return null!==this.doc?de(this.doc,(n=>{Ie(n,this,t,e)})):this._prelimContent.set(t,e),e}get(t){return Be(this,t)}has(t){return $e(this,t)}clear(){null!==this.doc?de(this.doc,(t=>{this.forEach((function(e,n,r){ze(t,r,n)}))})):this._prelimContent.clear()}_write(t){t.writeTypeRef(xn)}}const Ue=(t,e)=>t===e||"object"==typeof t&&"object"==typeof e&&t&&e&&((t,e)=>t===e||Et(t)===Et(e)&&((t,e)=>{for(const n in t)if(!e(t[n],n))return!1;return!0})(t,((t,n)=>(void 0!==t||((t,e)=>Object.prototype.hasOwnProperty.call(t,e))(e,n))&&e[n]===t)))(t,e);class Ye{constructor(t,e,n,r){this.left=t,this.right=e,this.index=n,this.currentAttributes=r}forward(){null===this.right&&nt(),this.right.content.constructor===vn?this.right.deleted||Ge(this.currentAttributes,this.right.content):this.right.deleted||(this.index+=this.right.length),this.left=this.right,this.right=this.right.right}}const Je=(t,e,n)=>{for(;null!==e.right&&n>0;)e.right.content.constructor===vn?e.right.deleted||Ge(e.currentAttributes,e.right.content):e.right.deleted||(n<e.right.length&&ie(t,qt(e.right.id.client,e.right.id.clock+n)),e.index+=e.right.length,n-=e.right.length),e.left=e.right,e.right=e.right.right;return e},Xe=(t,e,n)=>{const r=new Map,i=ke(e,n);if(i){const e=new Ye(i.p.left,i.p,i.index,r);return Je(t,e,n-i.index)}{const i=new Ye(null,e._start,0,r);return Je(t,i,n)}},Ke=(t,e,n,r)=>{for(;null!==n.right&&(!0===n.right.deleted||n.right.content.constructor===vn&&Ue(r.get(n.right.content.key),n.right.content.value));)n.right.deleted||r.delete(n.right.content.key),n.forward();const i=t.doc,o=i.clientID;r.forEach(((r,s)=>{const a=n.left,l=n.right,c=new Tn(qt(o,Qt(i.store,o)),a,a&&a.lastId,l,l&&l.id,e,null,new vn(s,r));c.integrate(t,0),n.right=c,n.forward()}))},Ge=(t,e)=>{const{key:n,value:r}=e;null===r?t.delete(n):t.set(n,r)},Ze=(t,e)=>{for(;null!==t.right&&(t.right.deleted||t.right.content.constructor===vn&&Ue(e[t.right.content.key]||null,t.right.content.value));)t.forward()},Qe=(t,e,n,r)=>{const i=t.doc,o=i.clientID,s=new Map;for(const a in r){const l=r[a],c=n.currentAttributes.get(a)||null;if(!Ue(c,l)){s.set(a,c);const{left:r,right:h}=n;n.right=new Tn(qt(o,Qt(i.store,o)),r,r&&r.lastId,h,h&&h.id,e,null,new vn(a,l)),n.right.integrate(t,0),n.forward()}}return s},tn=(t,e,n,r,i)=>{n.currentAttributes.forEach(((t,e)=>{void 0===i[e]&&(i[e]=null)}));const o=t.doc,s=o.clientID;Ze(n,i);const a=Qe(t,e,n,i),l=r.constructor===String?new bn(r):r instanceof Ee?new En(r):new mn(r);let{left:c,right:h,index:u}=n;e._searchMarker&&Se(e._searchMarker,n.index,l.getLength()),h=new Tn(qt(s,Qt(o.store,s)),c,c&&c.lastId,h,h&&h.id,e,null,l),h.integrate(t,0),n.right=h,n.index=u,n.forward(),Ke(t,e,n,a)},en=(t,e,n,r,i)=>{const o=t.doc,s=o.clientID;Ze(n,i);const a=Qe(t,e,n,i);t:for(;null!==n.right&&(r>0||a.size>0&&(n.right.deleted||n.right.content.constructor===vn));){if(!n.right.deleted)switch(n.right.content.constructor){case vn:{const{key:e,value:o}=n.right.content,s=i[e];if(void 0!==s){if(Ue(s,o))a.delete(e);else{if(0===r)break t;a.set(e,o)}n.right.delete(t)}else n.currentAttributes.set(e,o);break}default:r<n.right.length&&ie(t,qt(n.right.id.client,n.right.id.clock+r)),r-=n.right.length}n.forward()}if(r>0){let i="";for(;r>0;r--)i+="\n";n.right=new Tn(qt(s,Qt(o.store,s)),n.left,n.left&&n.left.lastId,n.right,n.right&&n.right.id,e,null,new bn(i)),n.right.integrate(t,0),n.forward()}Ke(t,e,n,a)},nn=(t,e,n,r,o)=>{let s=n;const a=i(o);for(;s&&(!s.countable||s.deleted);)s.deleted||s.content.constructor!==vn||Ge(a,s.content),s=s.right;let l=0,c=!1;for(;e!==s;){if(n===e&&(c=!0),!e.deleted){const n=e.content;switch(n.constructor){case vn:{const{key:i,value:s}=n;(a.get(i)||null)===s&&(r.get(i)||null)!==s||(e.delete(t),l++,c||(o.get(i)||null)!==s||(r.get(i)||null)===s||o.delete(i));break}}}e=e.right}return l},rn=(t,e,n)=>{const r=n,o=i(e.currentAttributes),s=e.right;for(;n>0&&null!==e.right;){if(!1===e.right.deleted)switch(e.right.content.constructor){case En:case mn:case bn:n<e.right.length&&ie(t,qt(e.right.id.client,e.right.id.clock+n)),n-=e.right.length,e.right.delete(t)}e.forward()}s&&nn(t,s,e.right,o,e.currentAttributes);const a=(e.left||e.right).parent;return a._searchMarker&&Se(a._searchMarker,e.index,-r+n),e};class on extends ve{constructor(t,e,n){super(t,e),this.childListChanged=!1,this.keysChanged=new Set,n.forEach((t=>{null===t?this.childListChanged=!0:this.keysChanged.add(t)}))}get changes(){if(null===this._changes){const t={keys:this.keys,delta:this.delta,added:new Set,deleted:new Set};this._changes=t}return this._changes}get delta(){if(null===this._delta){const t=this.target.doc,e=[];de(t,(t=>{const n=new Map,r=new Map;let i=this.target._start,o=null;const s={};let a="",l=0,c=0;const h=()=>{if(null!==o){let t;switch(o){case"delete":t={delete:c},c=0;break;case"insert":t={insert:a},n.size>0&&(t.attributes={},n.forEach(((e,n)=>{null!==e&&(t.attributes[n]=e)}))),a="";break;case"retain":if(t={retain:l},Object.keys(s).length>0){t.attributes={};for(const e in s)t.attributes[e]=s[e]}l=0}e.push(t),o=null}};for(;null!==i;){switch(i.content.constructor){case En:case mn:this.adds(i)?this.deletes(i)||(h(),o="insert",a=i.content.getContent()[0],h()):this.deletes(i)?("delete"!==o&&(h(),o="delete"),c+=1):i.deleted||("retain"!==o&&(h(),o="retain"),l+=1);break;case bn:this.adds(i)?this.deletes(i)||("insert"!==o&&(h(),o="insert"),a+=i.content.str):this.deletes(i)?("delete"!==o&&(h(),o="delete"),c+=i.length):i.deleted||("retain"!==o&&(h(),o="retain"),l+=i.length);break;case vn:{const{key:e,value:a}=i.content;if(this.adds(i)){if(!this.deletes(i)){const l=n.get(e)||null;Ue(l,a)?null!==a&&i.delete(t):("retain"===o&&h(),Ue(a,r.get(e)||null)?delete s[e]:s[e]=a)}}else if(this.deletes(i)){r.set(e,a);const t=n.get(e)||null;Ue(t,a)||("retain"===o&&h(),s[e]=t)}else if(!i.deleted){r.set(e,a);const n=s[e];void 0!==n&&(Ue(n,a)?null!==n&&i.delete(t):("retain"===o&&h(),null===a?delete s[e]:s[e]=a))}i.deleted||("insert"===o&&h(),Ge(n,i.content));break}}i=i.right}for(h();e.length>0;){const t=e[e.length-1];if(void 0===t.retain||void 0!==t.attributes)break;e.pop()}})),this._delta=e}return this._delta}}class sn extends Ee{constructor(t){super(),this._pending=void 0!==t?[()=>this.insert(0,t)]:[],this._searchMarker=[]}get length(){return this._length}_integrate(t,e){super._integrate(t,e);try{this._pending.forEach((t=>t()))}catch(t){console.error(t)}this._pending=null}_copy(){return new sn}clone(){const t=new sn;return t.applyDelta(this.toDelta()),t}_callObserver(t,e){super._callObserver(t,e);const n=new on(this,t,e),o=t.doc;if(_e(this,t,n),!t.local){let e=!1;for(const[n,r]of t.afterState.entries()){const i=t.beforeState.get(n)||0;if(r!==i&&(se(t,o.store.clients.get(n),i,r,(t=>{t.deleted||t.content.constructor!==vn||(e=!0)})),e))break}e||Mt(t,t.deleteSet,(t=>{t instanceof dn||e||t.parent===this&&t.content.constructor===vn&&(e=!0)})),de(o,(t=>{e?(t=>{let e=0;de(t.doc,(n=>{let o=t._start,s=t._start,a=r();const l=i(a);for(;s;)!1===s.deleted&&(s.content.constructor===vn?Ge(l,s.content):(e+=nn(n,o,s,a,l),a=i(l),o=s)),s=s.right}))})(this):Mt(t,t.deleteSet,(e=>{e instanceof dn||e.parent===this&&((t,e)=>{for(;e&&e.right&&(e.right.deleted||!e.right.countable);)e=e.right;const n=new Set;for(;e&&(e.deleted||!e.countable);){if(!e.deleted&&e.content.constructor===vn){const r=e.content.key;n.has(r)?e.delete(t):n.add(r)}e=e.left}})(t,e)}))}))}}toString(){let t="",e=this._start;for(;null!==e;)!e.deleted&&e.countable&&e.content.constructor===bn&&(t+=e.content.str),e=e.right;return t}toJSON(){return this.toString()}applyDelta(t,{sanitize:e=!0}={}){null!==this.doc?de(this.doc,(n=>{const r=new Ye(null,this._start,0,new Map);for(let i=0;i<t.length;i++){const o=t[i];if(void 0!==o.insert){const s=e||"string"!=typeof o.insert||i!==t.length-1||null!==r.right||"\n"!==o.insert.slice(-1)?o.insert:o.insert.slice(0,-1);("string"!=typeof s||s.length>0)&&tn(n,this,r,s,o.attributes||{})}else void 0!==o.retain?en(n,this,r,o.retain,o.attributes||{}):void 0!==o.delete&&rn(n,r,o.delete)}})):this._pending.push((()=>this.applyDelta(t)))}toDelta(t,e,n){const r=[],i=new Map,o=this.doc;let s="",a=this._start;function l(){if(s.length>0){const t={};let e=!1;i.forEach(((n,r)=>{e=!0,t[r]=n}));const n={insert:s};e&&(n.attributes=t),r.push(n),s=""}}return de(o,(o=>{for(t&&Jt(o,t),e&&Jt(o,e);null!==a;){if(Yt(a,t)||void 0!==e&&Yt(a,e))switch(a.content.constructor){case bn:{const r=i.get("ychange");void 0===t||Yt(a,t)?void 0===e||Yt(a,e)?void 0!==r&&(l(),i.delete("ychange")):void 0!==r&&r.user===a.id.client&&"added"===r.state||(l(),i.set("ychange",n?n("added",a.id):{type:"added"})):void 0!==r&&r.user===a.id.client&&"removed"===r.state||(l(),i.set("ychange",n?n("removed",a.id):{type:"removed"})),s+=a.content.str;break}case En:case mn:{l();const t={insert:a.content.getContent()[0]};if(i.size>0){const e={};t.attributes=e,i.forEach(((t,n)=>{e[n]=t}))}r.push(t);break}case vn:Yt(a,t)&&(l(),Ge(i,a.content))}a=a.right}l()}),Jt),r}insert(t,e,n){if(e.length<=0)return;const r=this.doc;null!==r?de(r,(r=>{const i=Xe(r,this,t);n||(n={},i.currentAttributes.forEach(((t,e)=>{n[e]=t}))),tn(r,this,i,e,n)})):this._pending.push((()=>this.insert(t,e,n)))}insertEmbed(t,e,n={}){const r=this.doc;null!==r?de(r,(r=>{const i=Xe(r,this,t);tn(r,this,i,e,n)})):this._pending.push((()=>this.insertEmbed(t,e,n)))}delete(t,e){if(0===e)return;const n=this.doc;null!==n?de(n,(n=>{rn(n,Xe(n,this,t),e)})):this._pending.push((()=>this.delete(t,e)))}format(t,e,n){if(0===e)return;const r=this.doc;null!==r?de(r,(r=>{const i=Xe(r,this,t);null!==i.right&&en(r,this,i,e,n)})):this._pending.push((()=>this.format(t,e,n)))}removeAttribute(t){null!==this.doc?de(this.doc,(e=>{ze(e,this,t)})):this._pending.push((()=>this.removeAttribute(t)))}setAttribute(t,e){null!==this.doc?de(this.doc,(n=>{Ie(n,this,t,e)})):this._pending.push((()=>this.setAttribute(t,e)))}getAttribute(t){return Be(this,t)}getAttributes(t){return Fe(this)}_write(t){t.writeTypeRef(kn)}}class an{constructor(t,e=(()=>!0)){this._filter=e,this._root=t,this._currentNode=t._start,this._firstCall=!0}[Symbol.iterator](){return this}next(){let t=this._currentNode,e=t&&t.content&&t.content.type;if(null!==t&&(!this._firstCall||t.deleted||!this._filter(e)))do{if(e=t.content.type,t.deleted||e.constructor!==cn&&e.constructor!==ln||null===e._start)for(;null!==t;){if(null!==t.right){t=t.right;break}t=t.parent===this._root?null:t.parent._item}else t=e._start}while(null!==t&&(t.deleted||!this._filter(t.content.type)));return this._firstCall=!1,null===t?{value:void 0,done:!0}:(this._currentNode=t,{value:t.content.type,done:!1})}}class ln extends Ee{constructor(){super(),this._prelimContent=[]}get firstChild(){const t=this._first;return t?t.content.getContent()[0]:null}_integrate(t,e){super._integrate(t,e),this.insert(0,this._prelimContent),this._prelimContent=null}_copy(){return new ln}clone(){const t=new ln;return t.insert(0,this.toArray().map((t=>t instanceof Ee?t.clone():t))),t}get length(){return null===this._prelimContent?this._length:this._prelimContent.length}createTreeWalker(t){return new an(this,t)}querySelector(t){t=t.toUpperCase();const e=new an(this,(e=>e.nodeName&&e.nodeName.toUpperCase()===t)).next();return e.done?null:e.value}querySelectorAll(t){return t=t.toUpperCase(),Array.from(new an(this,(e=>e.nodeName&&e.nodeName.toUpperCase()===t)))}_callObserver(t,e){_e(this,t,new hn(this,e,t))}toString(){return Ae(this,(t=>t.toString())).join("")}toJSON(){return this.toString()}toDOM(t=document,e={},n){const r=t.createDocumentFragment();return void 0!==n&&n._createAssociation(r,this),Me(this,(i=>{r.insertBefore(i.toDOM(t,e,n),null)})),r}insert(t,e){null!==this.doc?de(this.doc,(n=>{Re(n,this,t,e)})):this._prelimContent.splice(t,0,...e)}insertAfter(t,e){if(null!==this.doc)de(this.doc,(n=>{const r=t&&t instanceof Ee?t._item:t;De(n,this,r,e)}));else{const n=this._prelimContent,r=null===t?0:n.findIndex((e=>e===t))+1;if(0===r&&null!==t)throw tt("Reference item not found");n.splice(r,0,...e)}}delete(t,e=1){null!==this.doc?de(this.doc,(n=>{Pe(n,this,t,e)})):this._prelimContent.splice(t,e)}toArray(){return Oe(this)}push(t){this.insert(this.length,t)}unshift(t){this.insert(0,t)}get(t){return Ne(this,t)}slice(t=0,e=this.length){return Ce(this,t,e)}forEach(t){Me(this,t)}_write(t){t.writeTypeRef(_n)}}class cn extends ln{constructor(t="UNDEFINED"){super(),this.nodeName=t,this._prelimAttrs=new Map}get nextSibling(){const t=this._item?this._item.next:null;return t?t.content.type:null}get prevSibling(){const t=this._item?this._item.prev:null;return t?t.content.type:null}_integrate(t,e){super._integrate(t,e),this._prelimAttrs.forEach(((t,e)=>{this.setAttribute(e,t)})),this._prelimAttrs=null}_copy(){return new cn(this.nodeName)}clone(){const t=new cn(this.nodeName),e=this.getAttributes();for(const n in e)t.setAttribute(n,e[n]);return t.insert(0,this.toArray().map((t=>t instanceof Ee?t.clone():t))),t}toString(){const t=this.getAttributes(),e=[],n=[];for(const e in t)n.push(e);n.sort();const r=n.length;for(let i=0;i<r;i++){const r=n[i];e.push(r+'="'+t[r]+'"')}const i=this.nodeName.toLocaleLowerCase();return`<${i}${e.length>0?" "+e.join(" "):""}>${super.toString()}</${i}>`}removeAttribute(t){null!==this.doc?de(this.doc,(e=>{ze(e,this,t)})):this._prelimAttrs.delete(t)}setAttribute(t,e){null!==this.doc?de(this.doc,(n=>{Ie(n,this,t,e)})):this._prelimAttrs.set(t,e)}getAttribute(t){return Be(this,t)}hasAttribute(t){return $e(this,t)}getAttributes(t){return Fe(this)}toDOM(t=document,e={},n){const r=t.createElement(this.nodeName),i=this.getAttributes();for(const t in i)r.setAttribute(t,i[t]);return Me(this,(i=>{r.appendChild(i.toDOM(t,e,n))})),void 0!==n&&n._createAssociation(r,this),r}_write(t){t.writeTypeRef(Sn),t.writeKey(this.nodeName)}}class hn extends ve{constructor(t,e,n){super(t,n),this.childListChanged=!1,this.attributesChanged=new Set,e.forEach((t=>{null===t?this.childListChanged=!0:this.attributesChanged.add(t)}))}}class un{constructor(t,e){this.id=t,this.length=e}get deleted(){throw et()}mergeWith(t){return!1}write(t,e,n){throw et()}integrate(t,e){throw et()}}class dn extends un{get deleted(){return!0}delete(){}mergeWith(t){return this.constructor===t.constructor&&(this.length+=t.length,!0)}integrate(t,e){e>0&&(this.id.clock+=e,this.length-=e),te(t.doc.store,this)}write(t,e){t.writeInfo(0),t.writeLen(this.length-e)}getMissing(t,e){return null}}class pn{constructor(t){this.content=t}getLength(){return 1}getContent(){return[this.content]}isCountable(){return!0}copy(){return new pn(this.content)}splice(t){throw et()}mergeWith(t){return!1}integrate(t,e){}delete(t){}gc(t){}write(t,e){t.writeBuf(this.content)}getRef(){return 3}}class fn{constructor(t){this.len=t}getLength(){return this.len}getContent(){return[]}isCountable(){return!1}copy(){return new fn(this.len)}splice(t){const e=new fn(this.len-t);return this.len=t,e}mergeWith(t){return this.len+=t.len,!0}integrate(t,e){Dt(t.deleteSet,e.id.client,e.id.clock,this.len),e.markDeleted()}delete(t){}gc(t){}write(t,e){t.writeLen(this.len-e)}getRef(){return 1}}class gn{constructor(t){t._item&&console.error("This document was already integrated as a sub-document. You should create a second instance instead with the same guid."),this.doc=t;const e={};this.opts=e,t.gc||(e.gc=!1),t.autoLoad&&(e.autoLoad=!0),null!==t.meta&&(e.meta=t.meta)}getLength(){return 1}getContent(){return[this.doc]}isCountable(){return!0}copy(){return new gn((t=this.doc.guid,e=this.opts,new Rt({guid:t,...e,shouldLoad:e.shouldLoad||e.autoLoad||!1})));var t,e}splice(t){throw et()}mergeWith(t){return!1}integrate(t,e){this.doc._item=e,t.subdocsAdded.add(this.doc),this.doc.shouldLoad&&t.subdocsLoaded.add(this.doc)}delete(t){t.subdocsAdded.has(this.doc)?t.subdocsAdded.delete(this.doc):t.subdocsRemoved.add(this.doc)}gc(t){}write(t,e){t.writeString(this.doc.guid),t.writeAny(this.opts)}getRef(){return 9}}class mn{constructor(t){this.embed=t}getLength(){return 1}getContent(){return[this.embed]}isCountable(){return!0}copy(){return new mn(this.embed)}splice(t){throw et()}mergeWith(t){return!1}integrate(t,e){}delete(t){}gc(t){}write(t,e){t.writeJSON(this.embed)}getRef(){return 5}}class vn{constructor(t,e){this.key=t,this.value=e}getLength(){return 1}getContent(){return[]}isCountable(){return!1}copy(){return new vn(this.key,this.value)}splice(t){throw et()}mergeWith(t){return!1}integrate(t,e){e.parent._searchMarker=null}delete(t){}gc(t){}write(t,e){t.writeKey(this.key),t.writeJSON(this.value)}getRef(){return 6}}class yn{constructor(t){this.arr=t}getLength(){return this.arr.length}getContent(){return this.arr}isCountable(){return!0}copy(){return new yn(this.arr)}splice(t){const e=new yn(this.arr.slice(t));return this.arr=this.arr.slice(0,t),e}mergeWith(t){return this.arr=this.arr.concat(t.arr),!0}integrate(t,e){}delete(t){}gc(t){}write(t,e){const n=this.arr.length;t.writeLen(n-e);for(let r=e;r<n;r++){const e=this.arr[r];t.writeAny(e)}}getRef(){return 8}}class bn{constructor(t){this.str=t}getLength(){return this.str.length}getContent(){return this.str.split("")}isCountable(){return!0}copy(){return new bn(this.str)}splice(t){const e=new bn(this.str.slice(t));this.str=this.str.slice(0,t);const n=this.str.charCodeAt(t-1);return n>=55296&&n<=56319&&(this.str=this.str.slice(0,t-1)+"�",e.str="�"+e.str.slice(1)),e}mergeWith(t){return this.str+=t.str,!0}integrate(t,e){}delete(t){}gc(t){}write(t,e){t.writeString(0===e?this.str:this.str.slice(e))}getRef(){return 4}}const wn=0,xn=1,kn=2,Sn=3,_n=4;class En{constructor(t){this.type=t}getLength(){return 1}getContent(){return[this.type]}isCountable(){return!0}copy(){return new En(this.type._copy())}splice(t){throw et()}mergeWith(t){return!1}integrate(t,e){this.type._integrate(t.doc,e)}delete(t){let e=this.type._start;for(;null!==e;)e.deleted?t._mergeStructs.push(e):e.delete(t),e=e.right;this.type._map.forEach((e=>{e.deleted?t._mergeStructs.push(e):e.delete(t)})),t.changed.delete(this.type)}gc(t){let e=this.type._start;for(;null!==e;)e.gc(t,!0),e=e.right;this.type._start=null,this.type._map.forEach((e=>{for(;null!==e;)e.gc(t,!0),e=e.left})),this.type._map=new Map}write(t,e){this.type._write(t)}getRef(){return 7}}const Cn=(t,e)=>{let n,r=e,i=0;do{i>0&&(r=qt(r.client,r.clock+i)),n=ne(t,r),i=r.clock-n.id.clock,r=n.redone}while(null!==r&&n instanceof Tn);return{item:n,diff:i}},On=(t,e)=>{for(;null!==t&&t.keep!==e;)t.keep=e,t=t.parent._item},Mn=(t,e,n)=>{const{client:r,clock:i}=e.id,o=new Tn(qt(r,i+n),e,qt(r,i+n-1),e.right,e.rightOrigin,e.parent,e.parentSub,e.content.splice(n));return e.deleted&&o.markDeleted(),e.keep&&(o.keep=!0),null!==e.redone&&(o.redone=qt(e.redone.client,e.redone.clock+n)),e.right=o,null!==o.right&&(o.right.left=o),t._mergeStructs.push(o),null!==o.parentSub&&null===o.right&&o.parent._map.set(o.parentSub,o),e.length=n,o},An=(t,e,n,r,i)=>{const o=t.doc,s=o.store,a=o.clientID,l=e.redone;if(null!==l)return ie(t,l);let c,h=e.parent._item,u=null;if(null!==h&&!0===h.deleted){if(null===h.redone&&(!n.has(h)||null===An(t,h,n,r,i)))return null;for(;null!==h.redone;)h=ie(t,h.redone)}const d=null===h?e.parent:h.content.type;if(null===e.parentSub){for(u=e.left,c=e;null!==u;){let e=u;for(;null!==e&&e.parent._item!==h;)e=null===e.redone?null:ie(t,e.redone);if(null!==e&&e.parent._item===h){u=e;break}u=u.left}for(;null!==c;){let e=c;for(;null!==e&&e.parent._item!==h;)e=null===e.redone?null:ie(t,e.redone);if(null!==e&&e.parent._item===h){c=e;break}c=c.right}}else if(c=null,e.right&&!i){for(u=e;null!==u&&null!==u.right&&At(r,u.right.id);)u=u.right;for(;null!==u&&null!==u.redone;)u=ie(t,u.redone);if(null===u||u.parent._item!==h)return null;if(u&&null!==u.right)return null}else u=d._map.get(e.parentSub)||null;const p=Qt(s,a),f=qt(a,p),g=new Tn(f,u,u&&u.lastId,c,c&&c.id,d,e.parentSub,e.content.copy());return e.redone=f,On(g,!0),g.integrate(t,0),g};class Tn extends un{constructor(t,e,n,r,i,o,s,a){super(t,a.getLength()),this.origin=n,this.left=e,this.right=r,this.rightOrigin=i,this.parent=o,this.parentSub=s,this.redone=null,this.content=a,this.info=this.content.isCountable()?2:0}set marker(t){(8&this.info)>0!==t&&(this.info^=8)}get marker(){return(8&this.info)>0}get keep(){return(1&this.info)>0}set keep(t){this.keep!==t&&(this.info^=1)}get countable(){return(2&this.info)>0}get deleted(){return(4&this.info)>0}set deleted(t){this.deleted!==t&&(this.info^=4)}markDeleted(){this.info|=4}getMissing(t,e){if(this.origin&&this.origin.client!==this.id.client&&this.origin.clock>=Qt(e,this.origin.client))return this.origin.client;if(this.rightOrigin&&this.rightOrigin.client!==this.id.client&&this.rightOrigin.clock>=Qt(e,this.rightOrigin.client))return this.rightOrigin.client;if(this.parent&&this.parent.constructor===Ht&&this.id.client!==this.parent.client&&this.parent.clock>=Qt(e,this.parent.client))return this.parent.client;if(this.origin&&(this.left=oe(t,e,this.origin),this.origin=this.left.lastId),this.rightOrigin&&(this.right=ie(t,this.rightOrigin),this.rightOrigin=this.right.id),(this.left&&this.left.constructor===dn||this.right&&this.right.constructor===dn)&&(this.parent=null),this.parent){if(this.parent.constructor===Ht){const t=ne(e,this.parent);t.constructor===dn?this.parent=null:this.parent=t.content.type}}else this.left&&this.left.constructor===Tn&&(this.parent=this.left.parent,this.parentSub=this.left.parentSub),this.right&&this.right.constructor===Tn&&(this.parent=this.right.parent,this.parentSub=this.right.parentSub);return null}integrate(t,e){if(e>0&&(this.id.clock+=e,this.left=oe(t,t.doc.store,qt(this.id.client,this.id.clock-1)),this.origin=this.left.lastId,this.content=this.content.splice(e),this.length-=e),this.parent){if(!this.left&&(!this.right||null!==this.right.left)||this.left&&this.left.right!==this.right){let e,n=this.left;if(null!==n)e=n.right;else if(null!==this.parentSub)for(e=this.parent._map.get(this.parentSub)||null;null!==e&&null!==e.left;)e=e.left;else e=this.parent._start;const r=new Set,i=new Set;for(;null!==e&&e!==this.right;){if(i.add(e),r.add(e),Vt(this.origin,e.origin)){if(e.id.client<this.id.client)n=e,r.clear();else if(Vt(this.rightOrigin,e.rightOrigin))break}else{if(null===e.origin||!i.has(ne(t.doc.store,e.origin)))break;r.has(ne(t.doc.store,e.origin))||(n=e,r.clear())}e=e.right}this.left=n}if(null!==this.left){const t=this.left.right;this.right=t,this.left.right=this}else{let t;if(null!==this.parentSub)for(t=this.parent._map.get(this.parentSub)||null;null!==t&&null!==t.left;)t=t.left;else t=this.parent._start,this.parent._start=this;this.right=t}null!==this.right?this.right.left=this:null!==this.parentSub&&(this.parent._map.set(this.parentSub,this),null!==this.left&&this.left.delete(t)),null===this.parentSub&&this.countable&&!this.deleted&&(this.parent._length+=this.length),te(t.doc.store,this),this.content.integrate(t,this),ce(t,this.parent,this.parentSub),(null!==this.parent._item&&this.parent._item.deleted||null!==this.parentSub&&null!==this.right)&&this.delete(t)}else new dn(this.id,this.length).integrate(t,0)}get next(){let t=this.right;for(;null!==t&&t.deleted;)t=t.right;return t}get prev(){let t=this.left;for(;null!==t&&t.deleted;)t=t.left;return t}get lastId(){return 1===this.length?this.id:qt(this.id.client,this.id.clock+this.length-1)}mergeWith(t){if(this.constructor===t.constructor&&Vt(t.origin,this.lastId)&&this.right===t&&Vt(this.rightOrigin,t.rightOrigin)&&this.id.client===t.id.client&&this.id.clock+this.length===t.id.clock&&this.deleted===t.deleted&&null===this.redone&&null===t.redone&&this.content.constructor===t.content.constructor&&this.content.mergeWith(t.content)){const e=this.parent._searchMarker;return e&&e.forEach((e=>{e.p===t&&(e.p=this,!this.deleted&&this.countable&&(e.index-=this.length))})),t.keep&&(this.keep=!0),this.right=t.right,null!==this.right&&(this.right.left=this),this.length+=t.length,!0}return!1}delete(t){if(!this.deleted){const e=this.parent;this.countable&&null===this.parentSub&&(e._length-=this.length),this.markDeleted(),Dt(t.deleteSet,this.id.client,this.id.clock,this.length),ce(t,e,this.parentSub),this.content.delete(t)}}gc(t,e){if(!this.deleted)throw nt();this.content.gc(t),e?((t,e,n)=>{const r=t.clients.get(e.id.client);r[ee(r,e.id.clock)]=n})(t,this,new dn(this.id,this.length)):this.content=new fn(this.length)}write(t,e){const n=e>0?qt(this.id.client,this.id.clock+e-1):this.origin,r=this.rightOrigin,i=this.parentSub,o=31&this.content.getRef()|(null===n?0:O)|(null===r?0:64)|(null===i?0:32);if(t.writeInfo(o),null!==n&&t.writeLeftID(n),null!==r&&t.writeRightID(r),null===n&&null===r){const e=this.parent;if(void 0!==e._item){const n=e._item;if(null===n){const n=(t=>{for(const[e,n]of t.doc.share.entries())if(n===t)return e;throw nt()})(e);t.writeParentInfo(!0),t.writeString(n)}else t.writeParentInfo(!1),t.writeLeftID(n.id)}else e.constructor===String?(t.writeParentInfo(!0),t.writeString(e)):e.constructor===Ht?(t.writeParentInfo(!1),t.writeLeftID(e)):nt();null!==i&&t.writeString(i)}this.content.write(t,e)}}const Nn="undefined"!=typeof window?window:"undefined"!=typeof global?global:{};!0===Nn["__ $YJS$ __"]&&console.error("Yjs was already imported. This breaks constructor checks and will lead to isssues!"),Nn["__ $YJS$ __"]=!0}},i={};function o(t){var e=i[t];if(void 0!==e)return e.exports;var n=i[t]={id:t,loaded:!1,exports:{}};return r[t].call(n.exports,n,n.exports,o),n.loaded=!0,n.exports}o.m=r,t=[],o.O=(e,n,r,i)=>{if(!n){var s=1/0;for(h=0;h<t.length;h++){for(var[n,r,i]=t[h],a=!0,l=0;l<n.length;l++)(!1&i||s>=i)&&Object.keys(o.O).every((t=>o.O[t](n[l])))?n.splice(l--,1):(a=!1,i<s&&(s=i));if(a){t.splice(h--,1);var c=r();void 0!==c&&(e=c)}}return e}i=i||0;for(var h=t.length;h>0&&t[h-1][2]>i;h--)t[h]=t[h-1];t[h]=[n,r,i]},o.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return o.d(e,{a:e}),e},n=Object.getPrototypeOf?t=>Object.getPrototypeOf(t):t=>t.__proto__,o.t=function(t,r){if(1&r&&(t=this(t)),8&r)return t;if("object"==typeof t&&t){if(4&r&&t.__esModule)return t;if(16&r&&"function"==typeof t.then)return t}var i=Object.create(null);o.r(i);var s={};e=e||[null,n({}),n([]),n(n)];for(var a=2&r&&t;"object"==typeof a&&!~e.indexOf(a);a=n(a))Object.getOwnPropertyNames(a).forEach((e=>s[e]=()=>t[e]));return s.default=()=>t,o.d(i,s),i},o.d=(t,e)=>{for(var n in e)o.o(e,n)&&!o.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),o.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),o.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},o.nmd=t=>(t.paths=[],t.children||(t.children=[]),t),(()=>{var t={592:0};o.O.j=e=>0===t[e];var e=(e,n)=>{var r,i,[s,a,l]=n,c=0;if(s.some((e=>0!==t[e]))){for(r in a)o.o(a,r)&&(o.m[r]=a[r]);if(l)var h=l(o)}for(e&&e(n);c<s.length;c++)i=s[c],o.o(t,i)&&t[i]&&t[i][0](),t[i]=0;return o.O(h)},n=self.webpackChunkmindmap=self.webpackChunkmindmap||[];n.forEach(e.bind(null,0)),n.push=e.bind(null,n.push.bind(n))})(),o(5290),o(8575),o(5371),o(1949);var s=o(3565);s=o.O(s)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LElBQVlELEVBQWdCQyxJQUNyRUQsRUFBZ0JDLEdBQVMsS0FFMUJELEVBQWdCQyxHQUFXLEVBRTVCLE9BQU9mLEVBQW9CeGpFLEVBQUVueUQsSUFHMUIrMkgsRUFBcUJqL0gsS0FBMEIsb0JBQUlBLEtBQTBCLHFCQUFLLEdBQ3RGaS9ILEVBQW1CbnRILFFBQVErc0gsRUFBcUI1a0gsS0FBSyxLQUFNLElBQzNEZ2xILEVBQW1CcHBJLEtBQU9ncEksRUFBcUI1a0gsS0FBSyxLQUFNZ2xILEVBQW1CcHBJLEtBQUtva0IsS0FBS2dsSCxRQzdDdkZwQixFQUFvQixNQUNwQkEsRUFBb0IsTUFDcEJBLEVBQW9CLE1BQ3BCQSxFQUFvQixNQUNwQixJQUFJcUIsRUFBc0JyQixFQUFvQixNQUM5Q3FCLEVBQXNCckIsRUFBb0J4akUsRUFBRTZrRSIsInNvdXJjZXMiOlsid2VicGFjazovL21pbmRtYXAvd2VicGFjay9ydW50aW1lL2NodW5rIGxvYWRlZCIsIndlYnBhY2s6Ly9taW5kbWFwL3dlYnBhY2svcnVudGltZS9jcmVhdGUgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvQGljb25zL21hdGVyaWFsL0NoZWNrSWNvbi5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL0BpY29ucy9tYXRlcmlhbC9VbmZvbGRNb3JlSG9yaXpvbnRhbEljb24uanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9wcm9zZW1pcnJvci12aWV3L2Rpc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy93M2Mta2V5bmFtZS9pbmRleC5lcy5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL3Byb3NlbWlycm9yLWtleW1hcC9kaXN0L2luZGV4LmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvcHJvc2VtaXJyb3ItY29tbWFuZHMvZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL0B0aXB0YXAvY29yZS9kaXN0L3RpcHRhcC1jb3JlLmVzbS5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL3Byb3NlbWlycm9yLXNjaGVtYS1saXN0L2Rpc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX0RhdGFWaWV3LmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19IYXNoLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19MaXN0Q2FjaGUuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX01hcC5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fTWFwQ2FjaGUuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1Byb21pc2UuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1NldC5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fU2V0Q2FjaGUuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1N0YWNrLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19TeW1ib2wuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1VpbnQ4QXJyYXkuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1dlYWtNYXAuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5RWFjaC5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXJyYXlGaWx0ZXIuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5TGlrZUtleXMuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5TWFwLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheVB1c2guanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5U29tZS5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXNzaWduVmFsdWUuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Fzc29jSW5kZXhPZi5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUFzc2lnbi5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUFzc2lnbkluLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlQXNzaWduVmFsdWUuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VDbG9uZS5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUNyZWF0ZS5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUVhY2guanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VGb3IuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VGb3JPd24uanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VHZXQuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VHZXRBbGxLZXlzLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlR2V0VGFnLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSGFzSW4uanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJc0FyZ3VtZW50cy5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzRXF1YWwuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJc0VxdWFsRGVlcC5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzTWFwLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXNNYXRjaC5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzTmF0aXZlLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXNTZXQuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJc1R5cGVkQXJyYXkuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJdGVyYXRlZS5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUtleXMuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VLZXlzSW4uanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VNYXAuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VNYXRjaGVzLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlTWF0Y2hlc1Byb3BlcnR5LmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlUHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VQcm9wZXJ0eURlZXAuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VUaW1lcy5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVRvU3RyaW5nLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlVW5hcnkuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NhY2hlSGFzLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jYXN0RnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Nhc3RQYXRoLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jbG9uZUFycmF5QnVmZmVyLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jbG9uZUJ1ZmZlci5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY2xvbmVEYXRhVmlldy5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY2xvbmVSZWdFeHAuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Nsb25lU3ltYm9sLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jbG9uZVR5cGVkQXJyYXkuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NvcHlBcnJheS5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY29weU9iamVjdC5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY29weVN5bWJvbHMuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NvcHlTeW1ib2xzSW4uanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NvcmVKc0RhdGEuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NyZWF0ZUJhc2VFYWNoLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jcmVhdGVCYXNlRm9yLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19kZWZpbmVQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZXF1YWxBcnJheXMuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2VxdWFsQnlUYWcuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2VxdWFsT2JqZWN0cy5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZnJlZUdsb2JhbC5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0QWxsS2V5cy5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0QWxsS2V5c0luLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRNYXBEYXRhLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRNYXRjaERhdGEuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldE5hdGl2ZS5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0UHJvdG90eXBlLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRSYXdUYWcuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldFN5bWJvbHMuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldFN5bWJvbHNJbi5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0VGFnLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRWYWx1ZS5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faGFzUGF0aC5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faGFzaENsZWFyLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19oYXNoRGVsZXRlLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19oYXNoR2V0LmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19oYXNoSGFzLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19oYXNoU2V0LmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pbml0Q2xvbmVBcnJheS5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faW5pdENsb25lQnlUYWcuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2luaXRDbG9uZU9iamVjdC5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faXNJbmRleC5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faXNLZXkuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzS2V5YWJsZS5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faXNNYXNrZWQuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzUHJvdG90eXBlLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc1N0cmljdENvbXBhcmFibGUuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2xpc3RDYWNoZUNsZWFyLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19saXN0Q2FjaGVEZWxldGUuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2xpc3RDYWNoZUdldC5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbGlzdENhY2hlSGFzLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19saXN0Q2FjaGVTZXQuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21hcENhY2hlQ2xlYXIuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21hcENhY2hlRGVsZXRlLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tYXBDYWNoZUdldC5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwQ2FjaGVIYXMuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21hcENhY2hlU2V0LmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tYXBUb0FycmF5LmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tYXRjaGVzU3RyaWN0Q29tcGFyYWJsZS5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWVtb2l6ZUNhcHBlZC5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbmF0aXZlQ3JlYXRlLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19uYXRpdmVLZXlzLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19uYXRpdmVLZXlzSW4uanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX25vZGVVdGlsLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19vYmplY3RUb1N0cmluZy5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fb3ZlckFyZy5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fcm9vdC5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc2V0Q2FjaGVBZGQuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3NldENhY2hlSGFzLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zZXRUb0FycmF5LmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zdGFja0NsZWFyLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zdGFja0RlbGV0ZS5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RhY2tHZXQuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0YWNrSGFzLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zdGFja1NldC5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RyaW5nVG9QYXRoLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL190b0tleS5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fdG9Tb3VyY2UuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvY2xvbmVEZWVwLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2VxLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2Zvck93bi5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9nZXQuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaGFzSW4uanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaWRlbnRpdHkuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNBcmd1bWVudHMuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNBcnJheS5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0FycmF5TGlrZS5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0J1ZmZlci5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0Z1bmN0aW9uLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzTGVuZ3RoLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzTWFwLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzT2JqZWN0LmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzT2JqZWN0TGlrZS5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc1BsYWluT2JqZWN0LmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzU2V0LmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzU3RyaW5nLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzU3ltYm9sLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzVHlwZWRBcnJheS5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9rZXlzLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2tleXNJbi5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9tYXAuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvbWVtb2l6ZS5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9zdHViQXJyYXkuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvc3R1YkZhbHNlLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL3RvU3RyaW5nLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9yZWFjdC1jb2xvci9lcy9oZWxwZXJzL2FscGhhLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvcmVhY3QtY29sb3IvZXMvaGVscGVycy9jaGVja2JvYXJkLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvcmVhY3QtY29sb3IvZXMvY29tcG9uZW50cy9jb21tb24vQ2hlY2tib2FyZC5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWNvbG9yL2VzL2NvbXBvbmVudHMvY29tbW9uL0FscGhhLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvcmVhY3QtY29sb3IvZXMvY29tcG9uZW50cy9jb21tb24vRWRpdGFibGVJbnB1dC5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWNvbG9yL2VzL2hlbHBlcnMvaHVlLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvcmVhY3QtY29sb3IvZXMvY29tcG9uZW50cy9jb21tb24vSHVlLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19saXN0Q2FjaGVDbGVhci5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9lcS5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYXNzb2NJbmRleE9mLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19saXN0Q2FjaGVEZWxldGUuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX0xpc3RDYWNoZS5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbGlzdENhY2hlR2V0LmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19saXN0Q2FjaGVIYXMuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2xpc3RDYWNoZVNldC5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZnJlZUdsb2JhbC5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fcm9vdC5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fU3ltYm9sLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19nZXRSYXdUYWcuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX29iamVjdFRvU3RyaW5nLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlR2V0VGFnLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzT2JqZWN0LmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzRnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2NvcmVKc0RhdGEuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2lzTWFza2VkLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL190b1NvdXJjZS5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUlzTmF0aXZlLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19nZXROYXRpdmUuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2dldFZhbHVlLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19NYXAuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX25hdGl2ZUNyZWF0ZS5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9faGFzaEdldC5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9faGFzaEhhcy5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fSGFzaC5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9faGFzaENsZWFyLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19oYXNoRGVsZXRlLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19oYXNoU2V0LmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19nZXRNYXBEYXRhLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19pc0tleWFibGUuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX01hcENhY2hlLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19tYXBDYWNoZUNsZWFyLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19tYXBDYWNoZURlbGV0ZS5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbWFwQ2FjaGVHZXQuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX21hcENhY2hlSGFzLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19tYXBDYWNoZVNldC5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fU3RhY2suanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX3N0YWNrQ2xlYXIuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX3N0YWNrRGVsZXRlLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19zdGFja0dldC5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fc3RhY2tIYXMuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX3N0YWNrU2V0LmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19kZWZpbmVQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUFzc2lnblZhbHVlLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19hc3NpZ25NZXJnZVZhbHVlLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlRm9yLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19jcmVhdGVCYXNlRm9yLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19jbG9uZUJ1ZmZlci5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fVWludDhBcnJheS5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fY2xvbmVUeXBlZEFycmF5LmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19jbG9uZUFycmF5QnVmZmVyLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlQ3JlYXRlLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19vdmVyQXJnLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19nZXRQcm90b3R5cGUuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2lzUHJvdG90eXBlLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzT2JqZWN0TGlrZS5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUlzQXJndW1lbnRzLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzQXJndW1lbnRzLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzQXJyYXkuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNMZW5ndGguanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNBcnJheUxpa2UuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNCdWZmZXIuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvc3R1YkZhbHNlLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzUGxhaW5PYmplY3QuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VJc1R5cGVkQXJyYXkuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX25vZGVVdGlsLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzVHlwZWRBcnJheS5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZVVuYXJ5LmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19zYWZlR2V0LmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19hc3NpZ25WYWx1ZS5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9faXNJbmRleC5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYXJyYXlMaWtlS2V5cy5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZVRpbWVzLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlS2V5c0luLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19uYXRpdmVLZXlzSW4uanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMva2V5c0luLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL3RvUGxhaW5PYmplY3QuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2NvcHlPYmplY3QuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VNZXJnZURlZXAuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNBcnJheUxpa2VPYmplY3QuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2NvcHlBcnJheS5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9faW5pdENsb25lT2JqZWN0LmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlTWVyZ2UuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaWRlbnRpdHkuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2FwcGx5LmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19vdmVyUmVzdC5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZVNldFRvU3RyaW5nLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2NvbnN0YW50LmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19zaG9ydE91dC5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fc2V0VG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VSZXN0LmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL21lcmdlLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19jcmVhdGVBc3NpZ25lci5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9faXNJdGVyYXRlZUNhbGwuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9yZWFjdC1jb2xvci9lcy9jb21wb25lbnRzL2NvbW1vbi9SYWlzZWQuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvbm93LmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL190cmltbWVkRW5kSW5kZXguanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VUcmltLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzU3ltYm9sLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL3RvTnVtYmVyLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2RlYm91bmNlLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvcmVhY3QtY29sb3IvZXMvaGVscGVycy9zYXR1cmF0aW9uLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvcmVhY3QtY29sb3IvZXMvY29tcG9uZW50cy9jb21tb24vU2F0dXJhdGlvbi5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy90aHJvdHRsZS5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYXJyYXlFYWNoLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19uYXRpdmVLZXlzLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlS2V5cy5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9rZXlzLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlRWFjaC5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fY3JlYXRlQmFzZUVhY2guanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VGb3JPd24uanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvZm9yRWFjaC5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fY2FzdEZ1bmN0aW9uLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvcmVhY3QtY29sb3IvZXMvaGVscGVycy9jb2xvci5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWNvbG9yL2VzL2NvbXBvbmVudHMvY29tbW9uL0NvbG9yV3JhcC5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWNvbG9yL2VzL2hlbHBlcnMvaW50ZXJhY3Rpb24uanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9yZWFjdC1jb2xvci9lcy9jb21wb25lbnRzL2NvbW1vbi9Td2F0Y2guanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9yZWFjdC1jb2xvci9lcy9jb21wb25lbnRzL2FscGhhL0FscGhhLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvcmVhY3QtY29sb3IvZXMvY29tcG9uZW50cy9hbHBoYS9BbHBoYVBvaW50ZXIuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2FycmF5TWFwLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19TZXRDYWNoZS5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fc2V0Q2FjaGVBZGQuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX3NldENhY2hlSGFzLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19hcnJheVNvbWUuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2VxdWFsQXJyYXlzLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19jYWNoZUhhcy5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbWFwVG9BcnJheS5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fc2V0VG9BcnJheS5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZXF1YWxCeVRhZy5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZ2V0U3ltYm9scy5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYXJyYXlGaWx0ZXIuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvc3R1YkFycmF5LmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19nZXRBbGxLZXlzLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlR2V0QWxsS2V5cy5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYXJyYXlQdXNoLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19lcXVhbE9iamVjdHMuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX0RhdGFWaWV3LmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19Qcm9taXNlLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19TZXQuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX1dlYWtNYXAuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2dldFRhZy5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUlzRXF1YWxEZWVwLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlSXNFcXVhbC5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9faXNTdHJpY3RDb21wYXJhYmxlLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19tYXRjaGVzU3RyaWN0Q29tcGFyYWJsZS5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZU1hdGNoZXMuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2dldE1hdGNoRGF0YS5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUlzTWF0Y2guanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2lzS2V5LmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL21lbW9pemUuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX3N0cmluZ1RvUGF0aC5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbWVtb2l6ZUNhcHBlZC5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZVRvU3RyaW5nLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL3RvU3RyaW5nLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19jYXN0UGF0aC5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fdG9LZXkuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VHZXQuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VIYXNJbi5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9oYXNJbi5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9faGFzUGF0aC5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZU1hdGNoZXNQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9nZXQuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZVByb3BlcnR5RGVlcC5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZU1hcC5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9tYXAuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VJdGVyYXRlZS5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWNvbG9yL2VzL2NvbXBvbmVudHMvYmxvY2svQmxvY2tTd2F0Y2hlcy5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWNvbG9yL2VzL2NvbXBvbmVudHMvYmxvY2svQmxvY2suanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9tYXRlcmlhbC1jb2xvcnMvZGlzdC9jb2xvcnMuZXMyMDE1LmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvcmVhY3QtY29sb3IvZXMvY29tcG9uZW50cy9jaXJjbGUvQ2lyY2xlU3dhdGNoLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvcmVhY3QtY29sb3IvZXMvY29tcG9uZW50cy9jaXJjbGUvQ2lyY2xlLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzVW5kZWZpbmVkLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvcmVhY3QtY29sb3IvZXMvY29tcG9uZW50cy9jaHJvbWUvQ2hyb21lRmllbGRzLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvcmVhY3QtY29sb3IvZXMvY29tcG9uZW50cy9jaHJvbWUvQ2hyb21lUG9pbnRlci5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWNvbG9yL2VzL2NvbXBvbmVudHMvY2hyb21lL0Nocm9tZVBvaW50ZXJDaXJjbGUuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9yZWFjdC1jb2xvci9lcy9jb21wb25lbnRzL2Nocm9tZS9DaHJvbWUuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9yZWFjdC1jb2xvci9lcy9jb21wb25lbnRzL2NvbXBhY3QvQ29tcGFjdENvbG9yLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvcmVhY3QtY29sb3IvZXMvY29tcG9uZW50cy9jb21wYWN0L0NvbXBhY3RGaWVsZHMuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9yZWFjdC1jb2xvci9lcy9jb21wb25lbnRzL2NvbXBhY3QvQ29tcGFjdC5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWNvbG9yL2VzL2NvbXBvbmVudHMvZ2l0aHViL0dpdGh1YlN3YXRjaC5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWNvbG9yL2VzL2NvbXBvbmVudHMvZ2l0aHViL0dpdGh1Yi5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWNvbG9yL2VzL2NvbXBvbmVudHMvaHVlL0h1ZS5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWNvbG9yL2VzL2NvbXBvbmVudHMvaHVlL0h1ZVBvaW50ZXIuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9yZWFjdC1jb2xvci9lcy9jb21wb25lbnRzL21hdGVyaWFsL01hdGVyaWFsLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvcmVhY3QtY29sb3IvZXMvY29tcG9uZW50cy9waG90b3Nob3AvUGhvdG9zaG9wRmllbGRzLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvcmVhY3QtY29sb3IvZXMvY29tcG9uZW50cy9waG90b3Nob3AvUGhvdG9zaG9wUG9pbnRlckNpcmNsZS5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWNvbG9yL2VzL2NvbXBvbmVudHMvcGhvdG9zaG9wL1Bob3Rvc2hvcFBvaW50ZXIuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9yZWFjdC1jb2xvci9lcy9jb21wb25lbnRzL3Bob3Rvc2hvcC9QaG90b3Nob3BCdXR0b24uanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9yZWFjdC1jb2xvci9lcy9jb21wb25lbnRzL3Bob3Rvc2hvcC9QaG90b3Nob3BQcmV2aWV3cy5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWNvbG9yL2VzL2NvbXBvbmVudHMvcGhvdG9zaG9wL1Bob3Rvc2hvcC5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWNvbG9yL2VzL2NvbXBvbmVudHMvc2tldGNoL1NrZXRjaEZpZWxkcy5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWNvbG9yL2VzL2NvbXBvbmVudHMvc2tldGNoL1NrZXRjaFByZXNldENvbG9ycy5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWNvbG9yL2VzL2NvbXBvbmVudHMvc2tldGNoL1NrZXRjaC5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWNvbG9yL2VzL2NvbXBvbmVudHMvc2xpZGVyL1NsaWRlclN3YXRjaC5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWNvbG9yL2VzL2NvbXBvbmVudHMvc2xpZGVyL1NsaWRlclN3YXRjaGVzLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvcmVhY3QtY29sb3IvZXMvY29tcG9uZW50cy9zbGlkZXIvU2xpZGVyLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvcmVhY3QtY29sb3IvZXMvY29tcG9uZW50cy9zbGlkZXIvU2xpZGVyUG9pbnRlci5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWNvbG9yL2VzL2NvbXBvbmVudHMvc3dhdGNoZXMvU3dhdGNoZXNDb2xvci5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWNvbG9yL2VzL2NvbXBvbmVudHMvc3dhdGNoZXMvU3dhdGNoZXNHcm91cC5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWNvbG9yL2VzL2NvbXBvbmVudHMvc3dhdGNoZXMvU3dhdGNoZXMuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9yZWFjdC1jb2xvci9lcy9jb21wb25lbnRzL3R3aXR0ZXIvVHdpdHRlci5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWNvbG9yL2VzL2NvbXBvbmVudHMvZ29vZ2xlL0dvb2dsZVBvaW50ZXJDaXJjbGUuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9yZWFjdC1jb2xvci9lcy9jb21wb25lbnRzL2dvb2dsZS9Hb29nbGVQb2ludGVyLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvcmVhY3QtY29sb3IvZXMvY29tcG9uZW50cy9nb29nbGUvR29vZ2xlRmllbGRzLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvcmVhY3QtY29sb3IvZXMvY29tcG9uZW50cy9nb29nbGUvR29vZ2xlLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvcmVhY3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9yZWFjdGNzcy9saWIvYXV0b3ByZWZpeC5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL3JlYWN0Y3NzL2xpYi9jb21wb25lbnRzL2FjdGl2ZS5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL3JlYWN0Y3NzL2xpYi9jb21wb25lbnRzL2hvdmVyLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvcmVhY3Rjc3MvbGliL2ZsYXR0ZW5OYW1lcy5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL3JlYWN0Y3NzL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL3JlYWN0Y3NzL2xpYi9sb29wLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvcmVhY3Rjc3MvbGliL21lcmdlQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL3Rpbnljb2xvcjIvdGlueWNvbG9yLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvdmlld2VyanMvZGlzdC92aWV3ZXIuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdG9yLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9hcnJheS5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0b3JBbGwuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL21hdGNoZXIuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9zZWxlY3RDaGlsZC5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3NlbGVjdENoaWxkcmVuLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc3BhcnNlLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZW50ZXIuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL2NvbnN0YW50LmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZGF0YS5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3NvcnQuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL25hbWVzcGFjZXMuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL25hbWVzcGFjZS5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2F0dHIuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3dpbmRvdy5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3N0eWxlLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9jbGFzc2VkLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vdGV4dC5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2h0bWwuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9yYWlzZS5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2xvd2VyLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9jcmVhdG9yLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vaW5zZXJ0LmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vcmVtb3ZlLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vY2xvbmUuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9vbi5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2Rpc3BhdGNoLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9zZWxlY3QuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9zZWxlY3RBbGwuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9maWx0ZXIuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9leGl0LmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vam9pbi5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL21lcmdlLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vb3JkZXIuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9jYWxsLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vbm9kZXMuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9ub2RlLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc2l6ZS5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2VtcHR5LmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZWFjaC5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2FwcGVuZC5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2RhdHVtLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9kMy1kaXNwYXRjaC9zcmMvZGlzcGF0Y2guanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9kMy10aW1lci9zcmMvdGltZXIuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9kMy10aW1lci9zcmMvdGltZW91dC5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vc2NoZWR1bGUuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvbnVtYmVyLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3RyYW5zZm9ybS9kZWNvbXBvc2UuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvdHJhbnNmb3JtL3BhcnNlLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3RyYW5zZm9ybS9pbmRleC5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vdHdlZW4uanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9kMy1jb2xvci9zcmMvZGVmaW5lLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvZDMtY29sb3Ivc3JjL2NvbG9yLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2Jhc2lzLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2NvbnN0YW50LmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2NvbG9yLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3JnYi5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9iYXNpc0Nsb3NlZC5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2ludGVycG9sYXRlLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9hdHRyLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9hdHRyVHdlZW4uanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2RlbGF5LmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9kdXJhdGlvbi5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vZWFzZS5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vb24uanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3NlbGVjdGlvbi5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vc3R5bGUuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3N0eWxlVHdlZW4uanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3RleHRUd2Vlbi5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3NlbGVjdC5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vc2VsZWN0QWxsLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9maWx0ZXIuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL21lcmdlLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi90cmFuc2l0aW9uLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi90ZXh0LmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9yZW1vdmUuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2Vhc2VWYXJ5aW5nLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9lbmQuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy9zZWxlY3Rpb24vdHJhbnNpdGlvbi5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2QzLWVhc2Uvc3JjL2N1YmljLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvc2VsZWN0aW9uL2luZGV4LmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvc2VsZWN0aW9uL2ludGVycnVwdC5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL2ludGVycnVwdC5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2QzLWJydXNoL3NyYy9icnVzaC5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0LmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zb3VyY2VFdmVudC5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvcG9pbnRlci5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2QzLWRyYWcvc3JjL25vZXZlbnQuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9kMy1kcmFnL3NyYy9jb25zdGFudC5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2QzLWRyYWcvc3JjL2V2ZW50LmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvZDMtZHJhZy9zcmMvZHJhZy5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2QzLWRyYWcvc3JjL25vZHJhZy5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2QzLXBhdGgvc3JjL3BhdGguanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL2NyZWF0ZS5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvcG9pbnRlcnMuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvY29uc3RhbnQuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvY3VydmUvbGluZWFyLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL3BvaW50LmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2xpbmUuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvYXJyYXkuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9kMy16b29tL3NyYy90cmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9vcmRlcmVkbWFwL2Rpc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9wcm9zZW1pcnJvci1tb2RlbC9kaXN0L2luZGV4LmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvcHJvc2VtaXJyb3Itc3RhdGUvZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL3Byb3NlbWlycm9yLXRyYW5zZm9ybS9kaXN0L2luZGV4LmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbGliMC9tYXAuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9saWIwL3NldC5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xpYjAvYXJyYXkuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9saWIwL29ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9saWIwL21hdGguanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9saWIwL3N0cmluZy5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xpYjAvc3RvcmFnZS5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xpYjAvZW52aXJvbm1lbnQuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9saWIwL2NvbmRpdGlvbnMuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9saWIwL2J1ZmZlci5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xpYjAvYmluYXJ5LmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbGliMC9udW1iZXIuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9saWIwL2VuY29kaW5nLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvaXNvbW9ycGhpYy5qcy9icm93c2VyLm1qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xpYjAvcmFuZG9tLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbGliMC9lcnJvci5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xpYjAvZnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9saWIwL3N5bWJvbC5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xpYjAvcGFpci5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xpYjAvZG9tLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbGliMC90aW1lLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbGliMC9sb2dnaW5nLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvbGliMC9pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xpYjAvb2JqZWN0LmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMveWpzL2Rpc3QveWpzLm1qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL2xpYjAvcHJvbWlzZS5qcyIsIndlYnBhY2s6Ly9taW5kbWFwL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL21pbmRtYXAvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vbWluZG1hcC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vbWluZG1hcC93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL21pbmRtYXAvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9taW5kbWFwL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vbWluZG1hcC93ZWJwYWNrL3J1bnRpbWUvbm9kZSBtb2R1bGUgZGVjb3JhdG9yIiwid2VicGFjazovL21pbmRtYXAvd2VicGFjay9ydW50aW1lL2pzb25wIGNodW5rIGxvYWRpbmciLCJ3ZWJwYWNrOi8vbWluZG1hcC93ZWJwYWNrL3N0YXJ0dXAiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGRlZmVycmVkID0gW107XG5fX3dlYnBhY2tfcmVxdWlyZV9fLk8gPSAocmVzdWx0LCBjaHVua0lkcywgZm4sIHByaW9yaXR5KSA9PiB7XG5cdGlmKGNodW5rSWRzKSB7XG5cdFx0cHJpb3JpdHkgPSBwcmlvcml0eSB8fCAwO1xuXHRcdGZvcih2YXIgaSA9IGRlZmVycmVkLmxlbmd0aDsgaSA+IDAgJiYgZGVmZXJyZWRbaSAtIDFdWzJdID4gcHJpb3JpdHk7IGktLSkgZGVmZXJyZWRbaV0gPSBkZWZlcnJlZFtpIC0gMV07XG5cdFx0ZGVmZXJyZWRbaV0gPSBbY2h1bmtJZHMsIGZuLCBwcmlvcml0eV07XG5cdFx0cmV0dXJuO1xuXHR9XG5cdHZhciBub3RGdWxmaWxsZWQgPSBJbmZpbml0eTtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBkZWZlcnJlZC5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBbY2h1bmtJZHMsIGZuLCBwcmlvcml0eV0gPSBkZWZlcnJlZFtpXTtcblx0XHR2YXIgZnVsZmlsbGVkID0gdHJ1ZTtcblx0XHRmb3IgKHZhciBqID0gMDsgaiA8IGNodW5rSWRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRpZiAoKHByaW9yaXR5ICYgMSA9PT0gMCB8fCBub3RGdWxmaWxsZWQgPj0gcHJpb3JpdHkpICYmIE9iamVjdC5rZXlzKF9fd2VicGFja19yZXF1aXJlX18uTykuZXZlcnkoKGtleSkgPT4gKF9fd2VicGFja19yZXF1aXJlX18uT1trZXldKGNodW5rSWRzW2pdKSkpKSB7XG5cdFx0XHRcdGNodW5rSWRzLnNwbGljZShqLS0sIDEpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZnVsZmlsbGVkID0gZmFsc2U7XG5cdFx0XHRcdGlmKHByaW9yaXR5IDwgbm90RnVsZmlsbGVkKSBub3RGdWxmaWxsZWQgPSBwcmlvcml0eTtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYoZnVsZmlsbGVkKSB7XG5cdFx0XHRkZWZlcnJlZC5zcGxpY2UoaS0tLCAxKVxuXHRcdFx0dmFyIHIgPSBmbigpO1xuXHRcdFx0aWYgKHIgIT09IHVuZGVmaW5lZCkgcmVzdWx0ID0gcjtcblx0XHR9XG5cdH1cblx0cmV0dXJuIHJlc3VsdDtcbn07IiwidmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mID8gKG9iaikgPT4gKE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopKSA6IChvYmopID0+IChvYmouX19wcm90b19fKTtcbnZhciBsZWFmUHJvdG90eXBlcztcbi8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuLy8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4vLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbi8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuLy8gbW9kZSAmIDE2OiByZXR1cm4gdmFsdWUgd2hlbiBpdCdzIFByb21pc2UtbGlrZVxuLy8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuX193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcblx0aWYobW9kZSAmIDEpIHZhbHVlID0gdGhpcyh2YWx1ZSk7XG5cdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG5cdGlmKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUpIHtcblx0XHRpZigobW9kZSAmIDQpICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcblx0XHRpZigobW9kZSAmIDE2KSAmJiB0eXBlb2YgdmFsdWUudGhlbiA9PT0gJ2Z1bmN0aW9uJykgcmV0dXJuIHZhbHVlO1xuXHR9XG5cdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG5cdHZhciBkZWYgPSB7fTtcblx0bGVhZlByb3RvdHlwZXMgPSBsZWFmUHJvdG90eXBlcyB8fCBbbnVsbCwgZ2V0UHJvdG8oe30pLCBnZXRQcm90byhbXSksIGdldFByb3RvKGdldFByb3RvKV07XG5cdGZvcih2YXIgY3VycmVudCA9IG1vZGUgJiAyICYmIHZhbHVlOyB0eXBlb2YgY3VycmVudCA9PSAnb2JqZWN0JyAmJiAhfmxlYWZQcm90b3R5cGVzLmluZGV4T2YoY3VycmVudCk7IGN1cnJlbnQgPSBnZXRQcm90byhjdXJyZW50KSkge1xuXHRcdE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGN1cnJlbnQpLmZvckVhY2goKGtleSkgPT4gKGRlZltrZXldID0gKCkgPT4gKHZhbHVlW2tleV0pKSk7XG5cdH1cblx0ZGVmWydkZWZhdWx0J10gPSAoKSA9PiAodmFsdWUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGRlZik7XG5cdHJldHVybiBucztcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxudmFyIERFRkFVTFRfU0laRSA9IDI0O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgX3JlZiRmaWxsID0gX3JlZi5maWxsLFxuICAgICAgZmlsbCA9IF9yZWYkZmlsbCA9PT0gdW5kZWZpbmVkID8gJ2N1cnJlbnRDb2xvcicgOiBfcmVmJGZpbGwsXG4gICAgICBfcmVmJHdpZHRoID0gX3JlZi53aWR0aCxcbiAgICAgIHdpZHRoID0gX3JlZiR3aWR0aCA9PT0gdW5kZWZpbmVkID8gREVGQVVMVF9TSVpFIDogX3JlZiR3aWR0aCxcbiAgICAgIF9yZWYkaGVpZ2h0ID0gX3JlZi5oZWlnaHQsXG4gICAgICBoZWlnaHQgPSBfcmVmJGhlaWdodCA9PT0gdW5kZWZpbmVkID8gREVGQVVMVF9TSVpFIDogX3JlZiRoZWlnaHQsXG4gICAgICBfcmVmJHN0eWxlID0gX3JlZi5zdHlsZSxcbiAgICAgIHN0eWxlID0gX3JlZiRzdHlsZSA9PT0gdW5kZWZpbmVkID8ge30gOiBfcmVmJHN0eWxlLFxuICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZiwgWydmaWxsJywgJ3dpZHRoJywgJ2hlaWdodCcsICdzdHlsZSddKTtcblxuICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgJ3N2ZycsXG4gICAgX2V4dGVuZHMoe1xuICAgICAgdmlld0JveDogJzAgMCAnICsgREVGQVVMVF9TSVpFICsgJyAnICsgREVGQVVMVF9TSVpFLFxuICAgICAgc3R5bGU6IF9leHRlbmRzKHsgZmlsbDogZmlsbCwgd2lkdGg6IHdpZHRoLCBoZWlnaHQ6IGhlaWdodCB9LCBzdHlsZSlcbiAgICB9LCBwcm9wcyksXG4gICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ3BhdGgnLCB7IGQ6ICdNMjEsN0w5LDE5TDMuNSwxMy41TDQuOTEsMTIuMDlMOSwxNi4xN0wxOS41OSw1LjU5TDIxLDdaJyB9KVxuICApO1xufTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG52YXIgREVGQVVMVF9TSVpFID0gMjQ7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBfcmVmJGZpbGwgPSBfcmVmLmZpbGwsXG4gICAgICBmaWxsID0gX3JlZiRmaWxsID09PSB1bmRlZmluZWQgPyAnY3VycmVudENvbG9yJyA6IF9yZWYkZmlsbCxcbiAgICAgIF9yZWYkd2lkdGggPSBfcmVmLndpZHRoLFxuICAgICAgd2lkdGggPSBfcmVmJHdpZHRoID09PSB1bmRlZmluZWQgPyBERUZBVUxUX1NJWkUgOiBfcmVmJHdpZHRoLFxuICAgICAgX3JlZiRoZWlnaHQgPSBfcmVmLmhlaWdodCxcbiAgICAgIGhlaWdodCA9IF9yZWYkaGVpZ2h0ID09PSB1bmRlZmluZWQgPyBERUZBVUxUX1NJWkUgOiBfcmVmJGhlaWdodCxcbiAgICAgIF9yZWYkc3R5bGUgPSBfcmVmLnN0eWxlLFxuICAgICAgc3R5bGUgPSBfcmVmJHN0eWxlID09PSB1bmRlZmluZWQgPyB7fSA6IF9yZWYkc3R5bGUsXG4gICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLCBbJ2ZpbGwnLCAnd2lkdGgnLCAnaGVpZ2h0JywgJ3N0eWxlJ10pO1xuXG4gIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAnc3ZnJyxcbiAgICBfZXh0ZW5kcyh7XG4gICAgICB2aWV3Qm94OiAnMCAwICcgKyBERUZBVUxUX1NJWkUgKyAnICcgKyBERUZBVUxUX1NJWkUsXG4gICAgICBzdHlsZTogX2V4dGVuZHMoeyBmaWxsOiBmaWxsLCB3aWR0aDogd2lkdGgsIGhlaWdodDogaGVpZ2h0IH0sIHN0eWxlKVxuICAgIH0sIHByb3BzKSxcbiAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgncGF0aCcsIHsgZDogJ00xMiwxOC4xN0w4LjgzLDE1TDcuNDIsMTYuNDFMMTIsMjFMMTYuNTksMTYuNDFMMTUuMTcsMTVNMTIsNS44M0wxNS4xNyw5TDE2LjU4LDcuNTlMMTIsM0w3LjQxLDcuNTlMOC44Myw5TDEyLDUuODNaJyB9KVxuICApO1xufTsiLCJpbXBvcnQgeyBUZXh0U2VsZWN0aW9uLCBOb2RlU2VsZWN0aW9uLCBTZWxlY3Rpb24sIEFsbFNlbGVjdGlvbiB9IGZyb20gJ3Byb3NlbWlycm9yLXN0YXRlJztcbmltcG9ydCB7IERPTVNlcmlhbGl6ZXIsIEZyYWdtZW50LCBNYXJrLCBTbGljZSwgRE9NUGFyc2VyIH0gZnJvbSAncHJvc2VtaXJyb3ItbW9kZWwnO1xuaW1wb3J0IHsgZHJvcFBvaW50IH0gZnJvbSAncHJvc2VtaXJyb3ItdHJhbnNmb3JtJztcblxuY29uc3QgbmF2ID0gdHlwZW9mIG5hdmlnYXRvciAhPSBcInVuZGVmaW5lZFwiID8gbmF2aWdhdG9yIDogbnVsbDtcbmNvbnN0IGRvYyA9IHR5cGVvZiBkb2N1bWVudCAhPSBcInVuZGVmaW5lZFwiID8gZG9jdW1lbnQgOiBudWxsO1xuY29uc3QgYWdlbnQgPSAobmF2ICYmIG5hdi51c2VyQWdlbnQpIHx8IFwiXCI7XG5jb25zdCBpZV9lZGdlID0gL0VkZ2VcXC8oXFxkKykvLmV4ZWMoYWdlbnQpO1xuY29uc3QgaWVfdXB0bzEwID0gL01TSUUgXFxkLy5leGVjKGFnZW50KTtcbmNvbnN0IGllXzExdXAgPSAvVHJpZGVudFxcLyg/Ols3LTldfFxcZHsyLH0pXFwuLipydjooXFxkKykvLmV4ZWMoYWdlbnQpO1xuY29uc3QgaWUgPSAhIShpZV91cHRvMTAgfHwgaWVfMTF1cCB8fCBpZV9lZGdlKTtcbmNvbnN0IGllX3ZlcnNpb24gPSBpZV91cHRvMTAgPyBkb2N1bWVudC5kb2N1bWVudE1vZGUgOiBpZV8xMXVwID8gK2llXzExdXBbMV0gOiBpZV9lZGdlID8gK2llX2VkZ2VbMV0gOiAwO1xuY29uc3QgZ2Vja28gPSAhaWUgJiYgL2dlY2tvXFwvKFxcZCspL2kudGVzdChhZ2VudCk7XG5nZWNrbyAmJiArKC9GaXJlZm94XFwvKFxcZCspLy5leGVjKGFnZW50KSB8fCBbMCwgMF0pWzFdO1xuY29uc3QgX2Nocm9tZSA9ICFpZSAmJiAvQ2hyb21lXFwvKFxcZCspLy5leGVjKGFnZW50KTtcbmNvbnN0IGNocm9tZSA9ICEhX2Nocm9tZTtcbmNvbnN0IGNocm9tZV92ZXJzaW9uID0gX2Nocm9tZSA/ICtfY2hyb21lWzFdIDogMDtcbmNvbnN0IHNhZmFyaSA9ICFpZSAmJiAhIW5hdiAmJiAvQXBwbGUgQ29tcHV0ZXIvLnRlc3QobmF2LnZlbmRvcik7XG4vLyBJcyB0cnVlIGZvciBib3RoIGlPUyBhbmQgaVBhZE9TIGZvciBjb252ZW5pZW5jZVxuY29uc3QgaW9zID0gc2FmYXJpICYmICgvTW9iaWxlXFwvXFx3Ky8udGVzdChhZ2VudCkgfHwgISFuYXYgJiYgbmF2Lm1heFRvdWNoUG9pbnRzID4gMik7XG5jb25zdCBtYWMgPSBpb3MgfHwgKG5hdiA/IC9NYWMvLnRlc3QobmF2LnBsYXRmb3JtKSA6IGZhbHNlKTtcbmNvbnN0IGFuZHJvaWQgPSAvQW5kcm9pZCBcXGQvLnRlc3QoYWdlbnQpO1xuY29uc3Qgd2Via2l0ID0gISFkb2MgJiYgXCJ3ZWJraXRGb250U21vb3RoaW5nXCIgaW4gZG9jLmRvY3VtZW50RWxlbWVudC5zdHlsZTtcbmNvbnN0IHdlYmtpdF92ZXJzaW9uID0gd2Via2l0ID8gKygvXFxiQXBwbGVXZWJLaXRcXC8oXFxkKykvLmV4ZWMobmF2aWdhdG9yLnVzZXJBZ2VudCkgfHwgWzAsIDBdKVsxXSA6IDA7XG5cbmNvbnN0IGRvbUluZGV4ID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICBmb3IgKHZhciBpbmRleCA9IDA7OyBpbmRleCsrKSB7XG4gICAgICAgIG5vZGUgPSBub2RlLnByZXZpb3VzU2libGluZztcbiAgICAgICAgaWYgKCFub2RlKVxuICAgICAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgIH1cbn07XG5jb25zdCBwYXJlbnROb2RlID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICBsZXQgcGFyZW50ID0gbm9kZS5hc3NpZ25lZFNsb3QgfHwgbm9kZS5wYXJlbnROb2RlO1xuICAgIHJldHVybiBwYXJlbnQgJiYgcGFyZW50Lm5vZGVUeXBlID09IDExID8gcGFyZW50Lmhvc3QgOiBwYXJlbnQ7XG59O1xubGV0IHJldXNlZFJhbmdlID0gbnVsbDtcbi8vIE5vdGUgdGhhdCB0aGlzIHdpbGwgYWx3YXlzIHJldHVybiB0aGUgc2FtZSByYW5nZSwgYmVjYXVzZSBET00gcmFuZ2Vcbi8vIG9iamVjdHMgYXJlIGV2ZXJ5IGV4cGVuc2l2ZSwgYW5kIGtlZXAgc2xvd2luZyBkb3duIHN1YnNlcXVlbnQgRE9NXG4vLyB1cGRhdGVzLCBmb3Igc29tZSByZWFzb24uXG5jb25zdCB0ZXh0UmFuZ2UgPSBmdW5jdGlvbiAobm9kZSwgZnJvbSwgdG8pIHtcbiAgICBsZXQgcmFuZ2UgPSByZXVzZWRSYW5nZSB8fCAocmV1c2VkUmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpKTtcbiAgICByYW5nZS5zZXRFbmQobm9kZSwgdG8gPT0gbnVsbCA/IG5vZGUubm9kZVZhbHVlLmxlbmd0aCA6IHRvKTtcbiAgICByYW5nZS5zZXRTdGFydChub2RlLCBmcm9tIHx8IDApO1xuICAgIHJldHVybiByYW5nZTtcbn07XG4vLyBTY2FucyBmb3J3YXJkIGFuZCBiYWNrd2FyZCB0aHJvdWdoIERPTSBwb3NpdGlvbnMgZXF1aXZhbGVudCB0byB0aGVcbi8vIGdpdmVuIG9uZSB0byBzZWUgaWYgdGhlIHR3byBhcmUgaW4gdGhlIHNhbWUgcGxhY2UgKGkuZS4gYWZ0ZXIgYVxuLy8gdGV4dCBub2RlIHZzIGF0IHRoZSBlbmQgb2YgdGhhdCB0ZXh0IG5vZGUpXG5jb25zdCBpc0VxdWl2YWxlbnRQb3NpdGlvbiA9IGZ1bmN0aW9uIChub2RlLCBvZmYsIHRhcmdldE5vZGUsIHRhcmdldE9mZikge1xuICAgIHJldHVybiB0YXJnZXROb2RlICYmIChzY2FuRm9yKG5vZGUsIG9mZiwgdGFyZ2V0Tm9kZSwgdGFyZ2V0T2ZmLCAtMSkgfHxcbiAgICAgICAgc2NhbkZvcihub2RlLCBvZmYsIHRhcmdldE5vZGUsIHRhcmdldE9mZiwgMSkpO1xufTtcbmNvbnN0IGF0b21FbGVtZW50cyA9IC9eKGltZ3xicnxpbnB1dHx0ZXh0YXJlYXxocikkL2k7XG5mdW5jdGlvbiBzY2FuRm9yKG5vZGUsIG9mZiwgdGFyZ2V0Tm9kZSwgdGFyZ2V0T2ZmLCBkaXIpIHtcbiAgICBmb3IgKDs7KSB7XG4gICAgICAgIGlmIChub2RlID09IHRhcmdldE5vZGUgJiYgb2ZmID09IHRhcmdldE9mZilcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICBpZiAob2ZmID09IChkaXIgPCAwID8gMCA6IG5vZGVTaXplKG5vZGUpKSkge1xuICAgICAgICAgICAgbGV0IHBhcmVudCA9IG5vZGUucGFyZW50Tm9kZTtcbiAgICAgICAgICAgIGlmICghcGFyZW50IHx8IHBhcmVudC5ub2RlVHlwZSAhPSAxIHx8IGhhc0Jsb2NrRGVzYyhub2RlKSB8fCBhdG9tRWxlbWVudHMudGVzdChub2RlLm5vZGVOYW1lKSB8fFxuICAgICAgICAgICAgICAgIG5vZGUuY29udGVudEVkaXRhYmxlID09IFwiZmFsc2VcIilcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICBvZmYgPSBkb21JbmRleChub2RlKSArIChkaXIgPCAwID8gMCA6IDEpO1xuICAgICAgICAgICAgbm9kZSA9IHBhcmVudDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChub2RlLm5vZGVUeXBlID09IDEpIHtcbiAgICAgICAgICAgIG5vZGUgPSBub2RlLmNoaWxkTm9kZXNbb2ZmICsgKGRpciA8IDAgPyAtMSA6IDApXTtcbiAgICAgICAgICAgIGlmIChub2RlLmNvbnRlbnRFZGl0YWJsZSA9PSBcImZhbHNlXCIpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgb2ZmID0gZGlyIDwgMCA/IG5vZGVTaXplKG5vZGUpIDogMDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIG5vZGVTaXplKG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS5ub2RlVHlwZSA9PSAzID8gbm9kZS5ub2RlVmFsdWUubGVuZ3RoIDogbm9kZS5jaGlsZE5vZGVzLmxlbmd0aDtcbn1cbmZ1bmN0aW9uIGlzT25FZGdlKG5vZGUsIG9mZnNldCwgcGFyZW50KSB7XG4gICAgZm9yIChsZXQgYXRTdGFydCA9IG9mZnNldCA9PSAwLCBhdEVuZCA9IG9mZnNldCA9PSBub2RlU2l6ZShub2RlKTsgYXRTdGFydCB8fCBhdEVuZDspIHtcbiAgICAgICAgaWYgKG5vZGUgPT0gcGFyZW50KVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIGxldCBpbmRleCA9IGRvbUluZGV4KG5vZGUpO1xuICAgICAgICBub2RlID0gbm9kZS5wYXJlbnROb2RlO1xuICAgICAgICBpZiAoIW5vZGUpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGF0U3RhcnQgPSBhdFN0YXJ0ICYmIGluZGV4ID09IDA7XG4gICAgICAgIGF0RW5kID0gYXRFbmQgJiYgaW5kZXggPT0gbm9kZVNpemUobm9kZSk7XG4gICAgfVxufVxuZnVuY3Rpb24gaGFzQmxvY2tEZXNjKGRvbSkge1xuICAgIGxldCBkZXNjO1xuICAgIGZvciAobGV0IGN1ciA9IGRvbTsgY3VyOyBjdXIgPSBjdXIucGFyZW50Tm9kZSlcbiAgICAgICAgaWYgKGRlc2MgPSBjdXIucG1WaWV3RGVzYylcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIHJldHVybiBkZXNjICYmIGRlc2Mubm9kZSAmJiBkZXNjLm5vZGUuaXNCbG9jayAmJiAoZGVzYy5kb20gPT0gZG9tIHx8IGRlc2MuY29udGVudERPTSA9PSBkb20pO1xufVxuLy8gV29yayBhcm91bmQgQ2hyb21lIGlzc3VlIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ0NzUyM1xuLy8gKGlzQ29sbGFwc2VkIGluYXBwcm9wcmlhdGVseSByZXR1cm5zIHRydWUgaW4gc2hhZG93IGRvbSlcbmNvbnN0IHNlbGVjdGlvbkNvbGxhcHNlZCA9IGZ1bmN0aW9uIChkb21TZWwpIHtcbiAgICBsZXQgY29sbGFwc2VkID0gZG9tU2VsLmlzQ29sbGFwc2VkO1xuICAgIGlmIChjb2xsYXBzZWQgJiYgY2hyb21lICYmIGRvbVNlbC5yYW5nZUNvdW50ICYmICFkb21TZWwuZ2V0UmFuZ2VBdCgwKS5jb2xsYXBzZWQpXG4gICAgICAgIGNvbGxhcHNlZCA9IGZhbHNlO1xuICAgIHJldHVybiBjb2xsYXBzZWQ7XG59O1xuZnVuY3Rpb24ga2V5RXZlbnQoa2V5Q29kZSwga2V5KSB7XG4gICAgbGV0IGV2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJFdmVudFwiKTtcbiAgICBldmVudC5pbml0RXZlbnQoXCJrZXlkb3duXCIsIHRydWUsIHRydWUpO1xuICAgIGV2ZW50LmtleUNvZGUgPSBrZXlDb2RlO1xuICAgIGV2ZW50LmtleSA9IGV2ZW50LmNvZGUgPSBrZXk7XG4gICAgcmV0dXJuIGV2ZW50O1xufVxuXG5mdW5jdGlvbiB3aW5kb3dSZWN0KGRvYykge1xuICAgIHJldHVybiB7IGxlZnQ6IDAsIHJpZ2h0OiBkb2MuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoLFxuICAgICAgICB0b3A6IDAsIGJvdHRvbTogZG9jLmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQgfTtcbn1cbmZ1bmN0aW9uIGdldFNpZGUodmFsdWUsIHNpZGUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09IFwibnVtYmVyXCIgPyB2YWx1ZSA6IHZhbHVlW3NpZGVdO1xufVxuZnVuY3Rpb24gY2xpZW50UmVjdChub2RlKSB7XG4gICAgbGV0IHJlY3QgPSBub2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIC8vIEFkanVzdCBmb3IgZWxlbWVudHMgd2l0aCBzdHlsZSBcInRyYW5zZm9ybTogc2NhbGUoKVwiXG4gICAgbGV0IHNjYWxlWCA9IChyZWN0LndpZHRoIC8gbm9kZS5vZmZzZXRXaWR0aCkgfHwgMTtcbiAgICBsZXQgc2NhbGVZID0gKHJlY3QuaGVpZ2h0IC8gbm9kZS5vZmZzZXRIZWlnaHQpIHx8IDE7XG4gICAgLy8gTWFrZSBzdXJlIHNjcm9sbGJhciB3aWR0aCBpc24ndCBpbmNsdWRlZCBpbiB0aGUgcmVjdGFuZ2xlXG4gICAgcmV0dXJuIHsgbGVmdDogcmVjdC5sZWZ0LCByaWdodDogcmVjdC5sZWZ0ICsgbm9kZS5jbGllbnRXaWR0aCAqIHNjYWxlWCxcbiAgICAgICAgdG9wOiByZWN0LnRvcCwgYm90dG9tOiByZWN0LnRvcCArIG5vZGUuY2xpZW50SGVpZ2h0ICogc2NhbGVZIH07XG59XG5mdW5jdGlvbiBzY3JvbGxSZWN0SW50b1ZpZXcodmlldywgcmVjdCwgc3RhcnRET00pIHtcbiAgICBsZXQgc2Nyb2xsVGhyZXNob2xkID0gdmlldy5zb21lUHJvcChcInNjcm9sbFRocmVzaG9sZFwiKSB8fCAwLCBzY3JvbGxNYXJnaW4gPSB2aWV3LnNvbWVQcm9wKFwic2Nyb2xsTWFyZ2luXCIpIHx8IDU7XG4gICAgbGV0IGRvYyA9IHZpZXcuZG9tLm93bmVyRG9jdW1lbnQ7XG4gICAgZm9yIChsZXQgcGFyZW50ID0gc3RhcnRET00gfHwgdmlldy5kb207OyBwYXJlbnQgPSBwYXJlbnROb2RlKHBhcmVudCkpIHtcbiAgICAgICAgaWYgKCFwYXJlbnQpXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgaWYgKHBhcmVudC5ub2RlVHlwZSAhPSAxKVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIGxldCBlbHQgPSBwYXJlbnQ7XG4gICAgICAgIGxldCBhdFRvcCA9IGVsdCA9PSBkb2MuYm9keTtcbiAgICAgICAgbGV0IGJvdW5kaW5nID0gYXRUb3AgPyB3aW5kb3dSZWN0KGRvYykgOiBjbGllbnRSZWN0KGVsdCk7XG4gICAgICAgIGxldCBtb3ZlWCA9IDAsIG1vdmVZID0gMDtcbiAgICAgICAgaWYgKHJlY3QudG9wIDwgYm91bmRpbmcudG9wICsgZ2V0U2lkZShzY3JvbGxUaHJlc2hvbGQsIFwidG9wXCIpKVxuICAgICAgICAgICAgbW92ZVkgPSAtKGJvdW5kaW5nLnRvcCAtIHJlY3QudG9wICsgZ2V0U2lkZShzY3JvbGxNYXJnaW4sIFwidG9wXCIpKTtcbiAgICAgICAgZWxzZSBpZiAocmVjdC5ib3R0b20gPiBib3VuZGluZy5ib3R0b20gLSBnZXRTaWRlKHNjcm9sbFRocmVzaG9sZCwgXCJib3R0b21cIikpXG4gICAgICAgICAgICBtb3ZlWSA9IHJlY3QuYm90dG9tIC0gYm91bmRpbmcuYm90dG9tICsgZ2V0U2lkZShzY3JvbGxNYXJnaW4sIFwiYm90dG9tXCIpO1xuICAgICAgICBpZiAocmVjdC5sZWZ0IDwgYm91bmRpbmcubGVmdCArIGdldFNpZGUoc2Nyb2xsVGhyZXNob2xkLCBcImxlZnRcIikpXG4gICAgICAgICAgICBtb3ZlWCA9IC0oYm91bmRpbmcubGVmdCAtIHJlY3QubGVmdCArIGdldFNpZGUoc2Nyb2xsTWFyZ2luLCBcImxlZnRcIikpO1xuICAgICAgICBlbHNlIGlmIChyZWN0LnJpZ2h0ID4gYm91bmRpbmcucmlnaHQgLSBnZXRTaWRlKHNjcm9sbFRocmVzaG9sZCwgXCJyaWdodFwiKSlcbiAgICAgICAgICAgIG1vdmVYID0gcmVjdC5yaWdodCAtIGJvdW5kaW5nLnJpZ2h0ICsgZ2V0U2lkZShzY3JvbGxNYXJnaW4sIFwicmlnaHRcIik7XG4gICAgICAgIGlmIChtb3ZlWCB8fCBtb3ZlWSkge1xuICAgICAgICAgICAgaWYgKGF0VG9wKSB7XG4gICAgICAgICAgICAgICAgZG9jLmRlZmF1bHRWaWV3LnNjcm9sbEJ5KG1vdmVYLCBtb3ZlWSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBsZXQgc3RhcnRYID0gZWx0LnNjcm9sbExlZnQsIHN0YXJ0WSA9IGVsdC5zY3JvbGxUb3A7XG4gICAgICAgICAgICAgICAgaWYgKG1vdmVZKVxuICAgICAgICAgICAgICAgICAgICBlbHQuc2Nyb2xsVG9wICs9IG1vdmVZO1xuICAgICAgICAgICAgICAgIGlmIChtb3ZlWClcbiAgICAgICAgICAgICAgICAgICAgZWx0LnNjcm9sbExlZnQgKz0gbW92ZVg7XG4gICAgICAgICAgICAgICAgbGV0IGRYID0gZWx0LnNjcm9sbExlZnQgLSBzdGFydFgsIGRZID0gZWx0LnNjcm9sbFRvcCAtIHN0YXJ0WTtcbiAgICAgICAgICAgICAgICByZWN0ID0geyBsZWZ0OiByZWN0LmxlZnQgLSBkWCwgdG9wOiByZWN0LnRvcCAtIGRZLCByaWdodDogcmVjdC5yaWdodCAtIGRYLCBib3R0b206IHJlY3QuYm90dG9tIC0gZFkgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoYXRUb3ApXG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG59XG4vLyBTdG9yZSB0aGUgc2Nyb2xsIHBvc2l0aW9uIG9mIHRoZSBlZGl0b3IncyBwYXJlbnQgbm9kZXMsIGFsb25nIHdpdGhcbi8vIHRoZSB0b3AgcG9zaXRpb24gb2YgYW4gZWxlbWVudCBuZWFyIHRoZSB0b3Agb2YgdGhlIGVkaXRvciwgd2hpY2hcbi8vIHdpbGwgYmUgdXNlZCB0byBtYWtlIHN1cmUgdGhlIHZpc2libGUgdmlld3BvcnQgcmVtYWlucyBzdGFibGUgZXZlblxuLy8gd2hlbiB0aGUgc2l6ZSBvZiB0aGUgY29udGVudCBhYm92ZSBjaGFuZ2VzLlxuZnVuY3Rpb24gc3RvcmVTY3JvbGxQb3Modmlldykge1xuICAgIGxldCByZWN0ID0gdmlldy5kb20uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksIHN0YXJ0WSA9IE1hdGgubWF4KDAsIHJlY3QudG9wKTtcbiAgICBsZXQgcmVmRE9NLCByZWZUb3A7XG4gICAgZm9yIChsZXQgeCA9IChyZWN0LmxlZnQgKyByZWN0LnJpZ2h0KSAvIDIsIHkgPSBzdGFydFkgKyAxOyB5IDwgTWF0aC5taW4oaW5uZXJIZWlnaHQsIHJlY3QuYm90dG9tKTsgeSArPSA1KSB7XG4gICAgICAgIGxldCBkb20gPSB2aWV3LnJvb3QuZWxlbWVudEZyb21Qb2ludCh4LCB5KTtcbiAgICAgICAgaWYgKCFkb20gfHwgZG9tID09IHZpZXcuZG9tIHx8ICF2aWV3LmRvbS5jb250YWlucyhkb20pKVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIGxldCBsb2NhbFJlY3QgPSBkb20uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIGlmIChsb2NhbFJlY3QudG9wID49IHN0YXJ0WSAtIDIwKSB7XG4gICAgICAgICAgICByZWZET00gPSBkb207XG4gICAgICAgICAgICByZWZUb3AgPSBsb2NhbFJlY3QudG9wO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHsgcmVmRE9NOiByZWZET00sIHJlZlRvcDogcmVmVG9wLCBzdGFjazogc2Nyb2xsU3RhY2sodmlldy5kb20pIH07XG59XG5mdW5jdGlvbiBzY3JvbGxTdGFjayhkb20pIHtcbiAgICBsZXQgc3RhY2sgPSBbXSwgZG9jID0gZG9tLm93bmVyRG9jdW1lbnQ7XG4gICAgZm9yIChsZXQgY3VyID0gZG9tOyBjdXI7IGN1ciA9IHBhcmVudE5vZGUoY3VyKSkge1xuICAgICAgICBzdGFjay5wdXNoKHsgZG9tOiBjdXIsIHRvcDogY3VyLnNjcm9sbFRvcCwgbGVmdDogY3VyLnNjcm9sbExlZnQgfSk7XG4gICAgICAgIGlmIChkb20gPT0gZG9jKVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiBzdGFjaztcbn1cbi8vIFJlc2V0IHRoZSBzY3JvbGwgcG9zaXRpb24gb2YgdGhlIGVkaXRvcidzIHBhcmVudCBub2RlcyB0byB0aGF0IHdoYXRcbi8vIGl0IHdhcyBiZWZvcmUsIHdoZW4gc3RvcmVTY3JvbGxQb3Mgd2FzIGNhbGxlZC5cbmZ1bmN0aW9uIHJlc2V0U2Nyb2xsUG9zKHsgcmVmRE9NLCByZWZUb3AsIHN0YWNrIH0pIHtcbiAgICBsZXQgbmV3UmVmVG9wID0gcmVmRE9NID8gcmVmRE9NLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcCA6IDA7XG4gICAgcmVzdG9yZVNjcm9sbFN0YWNrKHN0YWNrLCBuZXdSZWZUb3AgPT0gMCA/IDAgOiBuZXdSZWZUb3AgLSByZWZUb3ApO1xufVxuZnVuY3Rpb24gcmVzdG9yZVNjcm9sbFN0YWNrKHN0YWNrLCBkVG9wKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdGFjay5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgeyBkb20sIHRvcCwgbGVmdCB9ID0gc3RhY2tbaV07XG4gICAgICAgIGlmIChkb20uc2Nyb2xsVG9wICE9IHRvcCArIGRUb3ApXG4gICAgICAgICAgICBkb20uc2Nyb2xsVG9wID0gdG9wICsgZFRvcDtcbiAgICAgICAgaWYgKGRvbS5zY3JvbGxMZWZ0ICE9IGxlZnQpXG4gICAgICAgICAgICBkb20uc2Nyb2xsTGVmdCA9IGxlZnQ7XG4gICAgfVxufVxubGV0IHByZXZlbnRTY3JvbGxTdXBwb3J0ZWQgPSBudWxsO1xuLy8gRmVhdHVyZS1kZXRlY3RzIHN1cHBvcnQgZm9yIC5mb2N1cyh7cHJldmVudFNjcm9sbDogdHJ1ZX0pLCBhbmQgdXNlc1xuLy8gYSBmYWxsYmFjayBrbHVkZ2Ugd2hlbiBub3Qgc3VwcG9ydGVkLlxuZnVuY3Rpb24gZm9jdXNQcmV2ZW50U2Nyb2xsKGRvbSkge1xuICAgIGlmIChkb20uc2V0QWN0aXZlKVxuICAgICAgICByZXR1cm4gZG9tLnNldEFjdGl2ZSgpOyAvLyBpbiBJRVxuICAgIGlmIChwcmV2ZW50U2Nyb2xsU3VwcG9ydGVkKVxuICAgICAgICByZXR1cm4gZG9tLmZvY3VzKHByZXZlbnRTY3JvbGxTdXBwb3J0ZWQpO1xuICAgIGxldCBzdG9yZWQgPSBzY3JvbGxTdGFjayhkb20pO1xuICAgIGRvbS5mb2N1cyhwcmV2ZW50U2Nyb2xsU3VwcG9ydGVkID09IG51bGwgPyB7XG4gICAgICAgIGdldCBwcmV2ZW50U2Nyb2xsKCkge1xuICAgICAgICAgICAgcHJldmVudFNjcm9sbFN1cHBvcnRlZCA9IHsgcHJldmVudFNjcm9sbDogdHJ1ZSB9O1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9IDogdW5kZWZpbmVkKTtcbiAgICBpZiAoIXByZXZlbnRTY3JvbGxTdXBwb3J0ZWQpIHtcbiAgICAgICAgcHJldmVudFNjcm9sbFN1cHBvcnRlZCA9IGZhbHNlO1xuICAgICAgICByZXN0b3JlU2Nyb2xsU3RhY2soc3RvcmVkLCAwKTtcbiAgICB9XG59XG5mdW5jdGlvbiBmaW5kT2Zmc2V0SW5Ob2RlKG5vZGUsIGNvb3Jkcykge1xuICAgIGxldCBjbG9zZXN0LCBkeENsb3Nlc3QgPSAyZTgsIGNvb3Jkc0Nsb3Nlc3QsIG9mZnNldCA9IDA7XG4gICAgbGV0IHJvd0JvdCA9IGNvb3Jkcy50b3AsIHJvd1RvcCA9IGNvb3Jkcy50b3A7XG4gICAgZm9yIChsZXQgY2hpbGQgPSBub2RlLmZpcnN0Q2hpbGQsIGNoaWxkSW5kZXggPSAwOyBjaGlsZDsgY2hpbGQgPSBjaGlsZC5uZXh0U2libGluZywgY2hpbGRJbmRleCsrKSB7XG4gICAgICAgIGxldCByZWN0cztcbiAgICAgICAgaWYgKGNoaWxkLm5vZGVUeXBlID09IDEpXG4gICAgICAgICAgICByZWN0cyA9IGNoaWxkLmdldENsaWVudFJlY3RzKCk7XG4gICAgICAgIGVsc2UgaWYgKGNoaWxkLm5vZGVUeXBlID09IDMpXG4gICAgICAgICAgICByZWN0cyA9IHRleHRSYW5nZShjaGlsZCkuZ2V0Q2xpZW50UmVjdHMoKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVjdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCByZWN0ID0gcmVjdHNbaV07XG4gICAgICAgICAgICBpZiAocmVjdC50b3AgPD0gcm93Qm90ICYmIHJlY3QuYm90dG9tID49IHJvd1RvcCkge1xuICAgICAgICAgICAgICAgIHJvd0JvdCA9IE1hdGgubWF4KHJlY3QuYm90dG9tLCByb3dCb3QpO1xuICAgICAgICAgICAgICAgIHJvd1RvcCA9IE1hdGgubWluKHJlY3QudG9wLCByb3dUb3ApO1xuICAgICAgICAgICAgICAgIGxldCBkeCA9IHJlY3QubGVmdCA+IGNvb3Jkcy5sZWZ0ID8gcmVjdC5sZWZ0IC0gY29vcmRzLmxlZnRcbiAgICAgICAgICAgICAgICAgICAgOiByZWN0LnJpZ2h0IDwgY29vcmRzLmxlZnQgPyBjb29yZHMubGVmdCAtIHJlY3QucmlnaHQgOiAwO1xuICAgICAgICAgICAgICAgIGlmIChkeCA8IGR4Q2xvc2VzdCkge1xuICAgICAgICAgICAgICAgICAgICBjbG9zZXN0ID0gY2hpbGQ7XG4gICAgICAgICAgICAgICAgICAgIGR4Q2xvc2VzdCA9IGR4O1xuICAgICAgICAgICAgICAgICAgICBjb29yZHNDbG9zZXN0ID0gZHggJiYgY2xvc2VzdC5ub2RlVHlwZSA9PSAzID8ge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogcmVjdC5yaWdodCA8IGNvb3Jkcy5sZWZ0ID8gcmVjdC5yaWdodCA6IHJlY3QubGVmdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogY29vcmRzLnRvcFxuICAgICAgICAgICAgICAgICAgICB9IDogY29vcmRzO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGQubm9kZVR5cGUgPT0gMSAmJiBkeClcbiAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IGNoaWxkSW5kZXggKyAoY29vcmRzLmxlZnQgPj0gKHJlY3QubGVmdCArIHJlY3QucmlnaHQpIC8gMiA/IDEgOiAwKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFjbG9zZXN0ICYmIChjb29yZHMubGVmdCA+PSByZWN0LnJpZ2h0ICYmIGNvb3Jkcy50b3AgPj0gcmVjdC50b3AgfHxcbiAgICAgICAgICAgICAgICBjb29yZHMubGVmdCA+PSByZWN0LmxlZnQgJiYgY29vcmRzLnRvcCA+PSByZWN0LmJvdHRvbSkpXG4gICAgICAgICAgICAgICAgb2Zmc2V0ID0gY2hpbGRJbmRleCArIDE7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGNsb3Nlc3QgJiYgY2xvc2VzdC5ub2RlVHlwZSA9PSAzKVxuICAgICAgICByZXR1cm4gZmluZE9mZnNldEluVGV4dChjbG9zZXN0LCBjb29yZHNDbG9zZXN0KTtcbiAgICBpZiAoIWNsb3Nlc3QgfHwgKGR4Q2xvc2VzdCAmJiBjbG9zZXN0Lm5vZGVUeXBlID09IDEpKVxuICAgICAgICByZXR1cm4geyBub2RlLCBvZmZzZXQgfTtcbiAgICByZXR1cm4gZmluZE9mZnNldEluTm9kZShjbG9zZXN0LCBjb29yZHNDbG9zZXN0KTtcbn1cbmZ1bmN0aW9uIGZpbmRPZmZzZXRJblRleHQobm9kZSwgY29vcmRzKSB7XG4gICAgbGV0IGxlbiA9IG5vZGUubm9kZVZhbHVlLmxlbmd0aDtcbiAgICBsZXQgcmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgcmFuZ2Uuc2V0RW5kKG5vZGUsIGkgKyAxKTtcbiAgICAgICAgcmFuZ2Uuc2V0U3RhcnQobm9kZSwgaSk7XG4gICAgICAgIGxldCByZWN0ID0gc2luZ2xlUmVjdChyYW5nZSwgMSk7XG4gICAgICAgIGlmIChyZWN0LnRvcCA9PSByZWN0LmJvdHRvbSlcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBpZiAoaW5SZWN0KGNvb3JkcywgcmVjdCkpXG4gICAgICAgICAgICByZXR1cm4geyBub2RlLCBvZmZzZXQ6IGkgKyAoY29vcmRzLmxlZnQgPj0gKHJlY3QubGVmdCArIHJlY3QucmlnaHQpIC8gMiA/IDEgOiAwKSB9O1xuICAgIH1cbiAgICByZXR1cm4geyBub2RlLCBvZmZzZXQ6IDAgfTtcbn1cbmZ1bmN0aW9uIGluUmVjdChjb29yZHMsIHJlY3QpIHtcbiAgICByZXR1cm4gY29vcmRzLmxlZnQgPj0gcmVjdC5sZWZ0IC0gMSAmJiBjb29yZHMubGVmdCA8PSByZWN0LnJpZ2h0ICsgMSAmJlxuICAgICAgICBjb29yZHMudG9wID49IHJlY3QudG9wIC0gMSAmJiBjb29yZHMudG9wIDw9IHJlY3QuYm90dG9tICsgMTtcbn1cbmZ1bmN0aW9uIHRhcmdldEtsdWRnZShkb20sIGNvb3Jkcykge1xuICAgIGxldCBwYXJlbnQgPSBkb20ucGFyZW50Tm9kZTtcbiAgICBpZiAocGFyZW50ICYmIC9ebGkkL2kudGVzdChwYXJlbnQubm9kZU5hbWUpICYmIGNvb3Jkcy5sZWZ0IDwgZG9tLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQpXG4gICAgICAgIHJldHVybiBwYXJlbnQ7XG4gICAgcmV0dXJuIGRvbTtcbn1cbmZ1bmN0aW9uIHBvc0Zyb21FbGVtZW50KHZpZXcsIGVsdCwgY29vcmRzKSB7XG4gICAgbGV0IHsgbm9kZSwgb2Zmc2V0IH0gPSBmaW5kT2Zmc2V0SW5Ob2RlKGVsdCwgY29vcmRzKSwgYmlhcyA9IC0xO1xuICAgIGlmIChub2RlLm5vZGVUeXBlID09IDEgJiYgIW5vZGUuZmlyc3RDaGlsZCkge1xuICAgICAgICBsZXQgcmVjdCA9IG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIGJpYXMgPSByZWN0LmxlZnQgIT0gcmVjdC5yaWdodCAmJiBjb29yZHMubGVmdCA+IChyZWN0LmxlZnQgKyByZWN0LnJpZ2h0KSAvIDIgPyAxIDogLTE7XG4gICAgfVxuICAgIHJldHVybiB2aWV3LmRvY1ZpZXcucG9zRnJvbURPTShub2RlLCBvZmZzZXQsIGJpYXMpO1xufVxuZnVuY3Rpb24gcG9zRnJvbUNhcmV0KHZpZXcsIG5vZGUsIG9mZnNldCwgY29vcmRzKSB7XG4gICAgLy8gQnJvd3NlciAoaW4gY2FyZXRQb3NpdGlvbi9SYW5nZUZyb21Qb2ludCkgd2lsbCBhZ3Jlc3NpdmVseVxuICAgIC8vIG5vcm1hbGl6ZSB0b3dhcmRzIG5lYXJieSBpbmxpbmUgbm9kZXMuIFNpbmNlIHdlIGFyZSBpbnRlcmVzdGVkIGluXG4gICAgLy8gcG9zaXRpb25zIGJldHdlZW4gYmxvY2sgbm9kZXMgdG9vLCB3ZSBmaXJzdCB3YWxrIHVwIHRoZSBoaWVyYXJjaHlcbiAgICAvLyBvZiBub2RlcyB0byBzZWUgaWYgdGhlcmUgYXJlIGJsb2NrIG5vZGVzIHRoYXQgdGhlIGNvb3JkaW5hdGVzXG4gICAgLy8gZmFsbCBvdXRzaWRlIG9mLiBJZiBzbywgd2UgdGFrZSB0aGUgcG9zaXRpb24gYmVmb3JlL2FmdGVyIHRoYXRcbiAgICAvLyBibG9jay4gSWYgbm90LCB3ZSBjYWxsIGBwb3NGcm9tRE9NYCBvbiB0aGUgcmF3IG5vZGUvb2Zmc2V0LlxuICAgIGxldCBvdXRzaWRlID0gLTE7XG4gICAgZm9yIChsZXQgY3VyID0gbm9kZTs7KSB7XG4gICAgICAgIGlmIChjdXIgPT0gdmlldy5kb20pXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgbGV0IGRlc2MgPSB2aWV3LmRvY1ZpZXcubmVhcmVzdERlc2MoY3VyLCB0cnVlKTtcbiAgICAgICAgaWYgKCFkZXNjKVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIGlmIChkZXNjLm5vZGUuaXNCbG9jayAmJiBkZXNjLnBhcmVudCkge1xuICAgICAgICAgICAgbGV0IHJlY3QgPSBkZXNjLmRvbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgIGlmIChyZWN0LmxlZnQgPiBjb29yZHMubGVmdCB8fCByZWN0LnRvcCA+IGNvb3Jkcy50b3ApXG4gICAgICAgICAgICAgICAgb3V0c2lkZSA9IGRlc2MucG9zQmVmb3JlO1xuICAgICAgICAgICAgZWxzZSBpZiAocmVjdC5yaWdodCA8IGNvb3Jkcy5sZWZ0IHx8IHJlY3QuYm90dG9tIDwgY29vcmRzLnRvcClcbiAgICAgICAgICAgICAgICBvdXRzaWRlID0gZGVzYy5wb3NBZnRlcjtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjdXIgPSBkZXNjLmRvbS5wYXJlbnROb2RlO1xuICAgIH1cbiAgICByZXR1cm4gb3V0c2lkZSA+IC0xID8gb3V0c2lkZSA6IHZpZXcuZG9jVmlldy5wb3NGcm9tRE9NKG5vZGUsIG9mZnNldCwgMSk7XG59XG5mdW5jdGlvbiBlbGVtZW50RnJvbVBvaW50KGVsZW1lbnQsIGNvb3JkcywgYm94KSB7XG4gICAgbGV0IGxlbiA9IGVsZW1lbnQuY2hpbGROb2Rlcy5sZW5ndGg7XG4gICAgaWYgKGxlbiAmJiBib3gudG9wIDwgYm94LmJvdHRvbSkge1xuICAgICAgICBmb3IgKGxldCBzdGFydEkgPSBNYXRoLm1heCgwLCBNYXRoLm1pbihsZW4gLSAxLCBNYXRoLmZsb29yKGxlbiAqIChjb29yZHMudG9wIC0gYm94LnRvcCkgLyAoYm94LmJvdHRvbSAtIGJveC50b3ApKSAtIDIpKSwgaSA9IHN0YXJ0STs7KSB7XG4gICAgICAgICAgICBsZXQgY2hpbGQgPSBlbGVtZW50LmNoaWxkTm9kZXNbaV07XG4gICAgICAgICAgICBpZiAoY2hpbGQubm9kZVR5cGUgPT0gMSkge1xuICAgICAgICAgICAgICAgIGxldCByZWN0cyA9IGNoaWxkLmdldENsaWVudFJlY3RzKCk7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCByZWN0cy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgcmVjdCA9IHJlY3RzW2pdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5SZWN0KGNvb3JkcywgcmVjdCkpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZWxlbWVudEZyb21Qb2ludChjaGlsZCwgY29vcmRzLCByZWN0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKGkgPSAoaSArIDEpICUgbGVuKSA9PSBzdGFydEkpXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG59XG4vLyBHaXZlbiBhbiB4LHkgcG9zaXRpb24gb24gdGhlIGVkaXRvciwgZ2V0IHRoZSBwb3NpdGlvbiBpbiB0aGUgZG9jdW1lbnQuXG5mdW5jdGlvbiBwb3NBdENvb3Jkcyh2aWV3LCBjb29yZHMpIHtcbiAgICBsZXQgZG9jID0gdmlldy5kb20ub3duZXJEb2N1bWVudCwgbm9kZSwgb2Zmc2V0ID0gMDtcbiAgICBpZiAoZG9jLmNhcmV0UG9zaXRpb25Gcm9tUG9pbnQpIHtcbiAgICAgICAgdHJ5IHsgLy8gRmlyZWZveCB0aHJvd3MgZm9yIHRoaXMgY2FsbCBpbiBoYXJkLXRvLXByZWRpY3QgY2lyY3Vtc3RhbmNlcyAoIzk5NClcbiAgICAgICAgICAgIGxldCBwb3MgPSBkb2MuY2FyZXRQb3NpdGlvbkZyb21Qb2ludChjb29yZHMubGVmdCwgY29vcmRzLnRvcCk7XG4gICAgICAgICAgICBpZiAocG9zKVxuICAgICAgICAgICAgICAgICh7IG9mZnNldE5vZGU6IG5vZGUsIG9mZnNldCB9ID0gcG9zKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoXykgeyB9XG4gICAgfVxuICAgIGlmICghbm9kZSAmJiBkb2MuY2FyZXRSYW5nZUZyb21Qb2ludCkge1xuICAgICAgICBsZXQgcmFuZ2UgPSBkb2MuY2FyZXRSYW5nZUZyb21Qb2ludChjb29yZHMubGVmdCwgY29vcmRzLnRvcCk7XG4gICAgICAgIGlmIChyYW5nZSlcbiAgICAgICAgICAgICh7IHN0YXJ0Q29udGFpbmVyOiBub2RlLCBzdGFydE9mZnNldDogb2Zmc2V0IH0gPSByYW5nZSk7XG4gICAgfVxuICAgIGxldCBlbHQgPSAodmlldy5yb290LmVsZW1lbnRGcm9tUG9pbnQgPyB2aWV3LnJvb3QgOiBkb2MpXG4gICAgICAgIC5lbGVtZW50RnJvbVBvaW50KGNvb3Jkcy5sZWZ0LCBjb29yZHMudG9wICsgMSk7XG4gICAgbGV0IHBvcztcbiAgICBpZiAoIWVsdCB8fCAhdmlldy5kb20uY29udGFpbnMoZWx0Lm5vZGVUeXBlICE9IDEgPyBlbHQucGFyZW50Tm9kZSA6IGVsdCkpIHtcbiAgICAgICAgbGV0IGJveCA9IHZpZXcuZG9tLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICBpZiAoIWluUmVjdChjb29yZHMsIGJveCkpXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgZWx0ID0gZWxlbWVudEZyb21Qb2ludCh2aWV3LmRvbSwgY29vcmRzLCBib3gpO1xuICAgICAgICBpZiAoIWVsdClcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICAvLyBTYWZhcmkncyBjYXJldFJhbmdlRnJvbVBvaW50IHJldHVybnMgbm9uc2Vuc2Ugd2hlbiBvbiBhIGRyYWdnYWJsZSBlbGVtZW50XG4gICAgaWYgKHNhZmFyaSkge1xuICAgICAgICBmb3IgKGxldCBwID0gZWx0OyBub2RlICYmIHA7IHAgPSBwYXJlbnROb2RlKHApKVxuICAgICAgICAgICAgaWYgKHAuZHJhZ2dhYmxlKVxuICAgICAgICAgICAgICAgIG5vZGUgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGVsdCA9IHRhcmdldEtsdWRnZShlbHQsIGNvb3Jkcyk7XG4gICAgaWYgKG5vZGUpIHtcbiAgICAgICAgaWYgKGdlY2tvICYmIG5vZGUubm9kZVR5cGUgPT0gMSkge1xuICAgICAgICAgICAgLy8gRmlyZWZveCB3aWxsIHNvbWV0aW1lcyByZXR1cm4gb2Zmc2V0cyBpbnRvIDxpbnB1dD4gbm9kZXMsIHdoaWNoXG4gICAgICAgICAgICAvLyBoYXZlIG5vIGFjdHVhbCBjaGlsZHJlbiwgZnJvbSBjYXJldFBvc2l0aW9uRnJvbVBvaW50ICgjOTUzKVxuICAgICAgICAgICAgb2Zmc2V0ID0gTWF0aC5taW4ob2Zmc2V0LCBub2RlLmNoaWxkTm9kZXMubGVuZ3RoKTtcbiAgICAgICAgICAgIC8vIEl0J2xsIGFsc28gbW92ZSB0aGUgcmV0dXJuZWQgcG9zaXRpb24gYmVmb3JlIGltYWdlIG5vZGVzLFxuICAgICAgICAgICAgLy8gZXZlbiBpZiB0aG9zZSBhcmUgYmVoaW5kIGl0LlxuICAgICAgICAgICAgaWYgKG9mZnNldCA8IG5vZGUuY2hpbGROb2Rlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBsZXQgbmV4dCA9IG5vZGUuY2hpbGROb2Rlc1tvZmZzZXRdLCBib3g7XG4gICAgICAgICAgICAgICAgaWYgKG5leHQubm9kZU5hbWUgPT0gXCJJTUdcIiAmJiAoYm94ID0gbmV4dC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSkucmlnaHQgPD0gY29vcmRzLmxlZnQgJiZcbiAgICAgICAgICAgICAgICAgICAgYm94LmJvdHRvbSA+IGNvb3Jkcy50b3ApXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldCsrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIFN1c3BpY2lvdXNseSBzcGVjaWZpYyBrbHVkZ2UgdG8gd29yayBhcm91bmQgY2FyZXQqRnJvbVBvaW50XG4gICAgICAgIC8vIG5ldmVyIHJldHVybmluZyBhIHBvc2l0aW9uIGF0IHRoZSBlbmQgb2YgdGhlIGRvY3VtZW50XG4gICAgICAgIGlmIChub2RlID09IHZpZXcuZG9tICYmIG9mZnNldCA9PSBub2RlLmNoaWxkTm9kZXMubGVuZ3RoIC0gMSAmJiBub2RlLmxhc3RDaGlsZC5ub2RlVHlwZSA9PSAxICYmXG4gICAgICAgICAgICBjb29yZHMudG9wID4gbm9kZS5sYXN0Q2hpbGQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuYm90dG9tKVxuICAgICAgICAgICAgcG9zID0gdmlldy5zdGF0ZS5kb2MuY29udGVudC5zaXplO1xuICAgICAgICAvLyBJZ25vcmUgcG9zaXRpb25zIGRpcmVjdGx5IGFmdGVyIGEgQlIsIHNpbmNlIGNhcmV0KkZyb21Qb2ludFxuICAgICAgICAvLyAncm91bmQgdXAnIHBvc2l0aW9ucyB0aGF0IHdvdWxkIGJlIG1vcmUgYWNjdXJhdGVseSBwbGFjZWRcbiAgICAgICAgLy8gYmVmb3JlIHRoZSBCUiBub2RlLlxuICAgICAgICBlbHNlIGlmIChvZmZzZXQgPT0gMCB8fCBub2RlLm5vZGVUeXBlICE9IDEgfHwgbm9kZS5jaGlsZE5vZGVzW29mZnNldCAtIDFdLm5vZGVOYW1lICE9IFwiQlJcIilcbiAgICAgICAgICAgIHBvcyA9IHBvc0Zyb21DYXJldCh2aWV3LCBub2RlLCBvZmZzZXQsIGNvb3Jkcyk7XG4gICAgfVxuICAgIGlmIChwb3MgPT0gbnVsbClcbiAgICAgICAgcG9zID0gcG9zRnJvbUVsZW1lbnQodmlldywgZWx0LCBjb29yZHMpO1xuICAgIGxldCBkZXNjID0gdmlldy5kb2NWaWV3Lm5lYXJlc3REZXNjKGVsdCwgdHJ1ZSk7XG4gICAgcmV0dXJuIHsgcG9zLCBpbnNpZGU6IGRlc2MgPyBkZXNjLnBvc0F0U3RhcnQgLSBkZXNjLmJvcmRlciA6IC0xIH07XG59XG5mdW5jdGlvbiBzaW5nbGVSZWN0KHRhcmdldCwgYmlhcykge1xuICAgIGxldCByZWN0cyA9IHRhcmdldC5nZXRDbGllbnRSZWN0cygpO1xuICAgIHJldHVybiAhcmVjdHMubGVuZ3RoID8gdGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpIDogcmVjdHNbYmlhcyA8IDAgPyAwIDogcmVjdHMubGVuZ3RoIC0gMV07XG59XG5jb25zdCBCSURJID0gL1tcXHUwNTkwLVxcdTA1ZjRcXHUwNjAwLVxcdTA2ZmZcXHUwNzAwLVxcdTA4YWNdLztcbi8vIEdpdmVuIGEgcG9zaXRpb24gaW4gdGhlIGRvY3VtZW50IG1vZGVsLCBnZXQgYSBib3VuZGluZyBib3ggb2YgdGhlXG4vLyBjaGFyYWN0ZXIgYXQgdGhhdCBwb3NpdGlvbiwgcmVsYXRpdmUgdG8gdGhlIHdpbmRvdy5cbmZ1bmN0aW9uIGNvb3Jkc0F0UG9zKHZpZXcsIHBvcywgc2lkZSkge1xuICAgIGxldCB7IG5vZGUsIG9mZnNldCB9ID0gdmlldy5kb2NWaWV3LmRvbUZyb21Qb3MocG9zLCBzaWRlIDwgMCA/IC0xIDogMSk7XG4gICAgbGV0IHN1cHBvcnRFbXB0eVJhbmdlID0gd2Via2l0IHx8IGdlY2tvO1xuICAgIGlmIChub2RlLm5vZGVUeXBlID09IDMpIHtcbiAgICAgICAgLy8gVGhlc2UgYnJvd3NlcnMgc3VwcG9ydCBxdWVyeWluZyBlbXB0eSB0ZXh0IHJhbmdlcy4gUHJlZmVyIHRoYXQgaW5cbiAgICAgICAgLy8gYmlkaSBjb250ZXh0IG9yIHdoZW4gYXQgdGhlIGVuZCBvZiBhIG5vZGUuXG4gICAgICAgIGlmIChzdXBwb3J0RW1wdHlSYW5nZSAmJiAoQklESS50ZXN0KG5vZGUubm9kZVZhbHVlKSB8fCAoc2lkZSA8IDAgPyAhb2Zmc2V0IDogb2Zmc2V0ID09IG5vZGUubm9kZVZhbHVlLmxlbmd0aCkpKSB7XG4gICAgICAgICAgICBsZXQgcmVjdCA9IHNpbmdsZVJlY3QodGV4dFJhbmdlKG5vZGUsIG9mZnNldCwgb2Zmc2V0KSwgc2lkZSk7XG4gICAgICAgICAgICAvLyBGaXJlZm94IHJldHVybnMgYmFkIHJlc3VsdHMgKHRoZSBwb3NpdGlvbiBiZWZvcmUgdGhlIHNwYWNlKVxuICAgICAgICAgICAgLy8gd2hlbiBxdWVyeWluZyBhIHBvc2l0aW9uIGRpcmVjdGx5IGFmdGVyIGxpbmUtYnJva2VuXG4gICAgICAgICAgICAvLyB3aGl0ZXNwYWNlLiBEZXRlY3QgdGhpcyBzaXR1YXRpb24gYW5kIGFuZCBrbHVkZ2UgYXJvdW5kIGl0XG4gICAgICAgICAgICBpZiAoZ2Vja28gJiYgb2Zmc2V0ICYmIC9cXHMvLnRlc3Qobm9kZS5ub2RlVmFsdWVbb2Zmc2V0IC0gMV0pICYmIG9mZnNldCA8IG5vZGUubm9kZVZhbHVlLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGxldCByZWN0QmVmb3JlID0gc2luZ2xlUmVjdCh0ZXh0UmFuZ2Uobm9kZSwgb2Zmc2V0IC0gMSwgb2Zmc2V0IC0gMSksIC0xKTtcbiAgICAgICAgICAgICAgICBpZiAocmVjdEJlZm9yZS50b3AgPT0gcmVjdC50b3ApIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlY3RBZnRlciA9IHNpbmdsZVJlY3QodGV4dFJhbmdlKG5vZGUsIG9mZnNldCwgb2Zmc2V0ICsgMSksIC0xKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlY3RBZnRlci50b3AgIT0gcmVjdC50b3ApXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmxhdHRlblYocmVjdEFmdGVyLCByZWN0QWZ0ZXIubGVmdCA8IHJlY3RCZWZvcmUubGVmdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlY3Q7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBsZXQgZnJvbSA9IG9mZnNldCwgdG8gPSBvZmZzZXQsIHRha2VTaWRlID0gc2lkZSA8IDAgPyAxIDogLTE7XG4gICAgICAgICAgICBpZiAoc2lkZSA8IDAgJiYgIW9mZnNldCkge1xuICAgICAgICAgICAgICAgIHRvKys7XG4gICAgICAgICAgICAgICAgdGFrZVNpZGUgPSAtMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHNpZGUgPj0gMCAmJiBvZmZzZXQgPT0gbm9kZS5ub2RlVmFsdWUubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgZnJvbS0tO1xuICAgICAgICAgICAgICAgIHRha2VTaWRlID0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHNpZGUgPCAwKSB7XG4gICAgICAgICAgICAgICAgZnJvbS0tO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdG8rKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmbGF0dGVuVihzaW5nbGVSZWN0KHRleHRSYW5nZShub2RlLCBmcm9tLCB0byksIHRha2VTaWRlKSwgdGFrZVNpZGUgPCAwKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBSZXR1cm4gYSBob3Jpem9udGFsIGxpbmUgaW4gYmxvY2sgY29udGV4dFxuICAgIGlmICghdmlldy5zdGF0ZS5kb2MucmVzb2x2ZShwb3MpLnBhcmVudC5pbmxpbmVDb250ZW50KSB7XG4gICAgICAgIGlmIChvZmZzZXQgJiYgKHNpZGUgPCAwIHx8IG9mZnNldCA9PSBub2RlU2l6ZShub2RlKSkpIHtcbiAgICAgICAgICAgIGxldCBiZWZvcmUgPSBub2RlLmNoaWxkTm9kZXNbb2Zmc2V0IC0gMV07XG4gICAgICAgICAgICBpZiAoYmVmb3JlLm5vZGVUeXBlID09IDEpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZsYXR0ZW5IKGJlZm9yZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvZmZzZXQgPCBub2RlU2l6ZShub2RlKSkge1xuICAgICAgICAgICAgbGV0IGFmdGVyID0gbm9kZS5jaGlsZE5vZGVzW29mZnNldF07XG4gICAgICAgICAgICBpZiAoYWZ0ZXIubm9kZVR5cGUgPT0gMSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZmxhdHRlbkgoYWZ0ZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmbGF0dGVuSChub2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLCBzaWRlID49IDApO1xuICAgIH1cbiAgICAvLyBJbmxpbmUsIG5vdCBpbiB0ZXh0IG5vZGUgKHRoaXMgaXMgbm90IEJpZGktc2FmZSlcbiAgICBpZiAob2Zmc2V0ICYmIChzaWRlIDwgMCB8fCBvZmZzZXQgPT0gbm9kZVNpemUobm9kZSkpKSB7XG4gICAgICAgIGxldCBiZWZvcmUgPSBub2RlLmNoaWxkTm9kZXNbb2Zmc2V0IC0gMV07XG4gICAgICAgIGxldCB0YXJnZXQgPSBiZWZvcmUubm9kZVR5cGUgPT0gMyA/IHRleHRSYW5nZShiZWZvcmUsIG5vZGVTaXplKGJlZm9yZSkgLSAoc3VwcG9ydEVtcHR5UmFuZ2UgPyAwIDogMSkpXG4gICAgICAgICAgICAvLyBCUiBub2RlcyB0ZW5kIHRvIG9ubHkgcmV0dXJuIHRoZSByZWN0YW5nbGUgYmVmb3JlIHRoZW0uXG4gICAgICAgICAgICAvLyBPbmx5IHVzZSB0aGVtIGlmIHRoZXkgYXJlIHRoZSBsYXN0IGVsZW1lbnQgaW4gdGhlaXIgcGFyZW50XG4gICAgICAgICAgICA6IGJlZm9yZS5ub2RlVHlwZSA9PSAxICYmIChiZWZvcmUubm9kZU5hbWUgIT0gXCJCUlwiIHx8ICFiZWZvcmUubmV4dFNpYmxpbmcpID8gYmVmb3JlIDogbnVsbDtcbiAgICAgICAgaWYgKHRhcmdldClcbiAgICAgICAgICAgIHJldHVybiBmbGF0dGVuVihzaW5nbGVSZWN0KHRhcmdldCwgMSksIGZhbHNlKTtcbiAgICB9XG4gICAgaWYgKG9mZnNldCA8IG5vZGVTaXplKG5vZGUpKSB7XG4gICAgICAgIGxldCBhZnRlciA9IG5vZGUuY2hpbGROb2Rlc1tvZmZzZXRdO1xuICAgICAgICB3aGlsZSAoYWZ0ZXIucG1WaWV3RGVzYyAmJiBhZnRlci5wbVZpZXdEZXNjLmlnbm9yZUZvckNvb3JkcylcbiAgICAgICAgICAgIGFmdGVyID0gYWZ0ZXIubmV4dFNpYmxpbmc7XG4gICAgICAgIGxldCB0YXJnZXQgPSAhYWZ0ZXIgPyBudWxsIDogYWZ0ZXIubm9kZVR5cGUgPT0gMyA/IHRleHRSYW5nZShhZnRlciwgMCwgKHN1cHBvcnRFbXB0eVJhbmdlID8gMCA6IDEpKVxuICAgICAgICAgICAgOiBhZnRlci5ub2RlVHlwZSA9PSAxID8gYWZ0ZXIgOiBudWxsO1xuICAgICAgICBpZiAodGFyZ2V0KVxuICAgICAgICAgICAgcmV0dXJuIGZsYXR0ZW5WKHNpbmdsZVJlY3QodGFyZ2V0LCAtMSksIHRydWUpO1xuICAgIH1cbiAgICAvLyBBbGwgZWxzZSBmYWlsZWQsIGp1c3QgdHJ5IHRvIGdldCBhIHJlY3RhbmdsZSBmb3IgdGhlIHRhcmdldCBub2RlXG4gICAgcmV0dXJuIGZsYXR0ZW5WKHNpbmdsZVJlY3Qobm9kZS5ub2RlVHlwZSA9PSAzID8gdGV4dFJhbmdlKG5vZGUpIDogbm9kZSwgLXNpZGUpLCBzaWRlID49IDApO1xufVxuZnVuY3Rpb24gZmxhdHRlblYocmVjdCwgbGVmdCkge1xuICAgIGlmIChyZWN0LndpZHRoID09IDApXG4gICAgICAgIHJldHVybiByZWN0O1xuICAgIGxldCB4ID0gbGVmdCA/IHJlY3QubGVmdCA6IHJlY3QucmlnaHQ7XG4gICAgcmV0dXJuIHsgdG9wOiByZWN0LnRvcCwgYm90dG9tOiByZWN0LmJvdHRvbSwgbGVmdDogeCwgcmlnaHQ6IHggfTtcbn1cbmZ1bmN0aW9uIGZsYXR0ZW5IKHJlY3QsIHRvcCkge1xuICAgIGlmIChyZWN0LmhlaWdodCA9PSAwKVxuICAgICAgICByZXR1cm4gcmVjdDtcbiAgICBsZXQgeSA9IHRvcCA/IHJlY3QudG9wIDogcmVjdC5ib3R0b207XG4gICAgcmV0dXJuIHsgdG9wOiB5LCBib3R0b206IHksIGxlZnQ6IHJlY3QubGVmdCwgcmlnaHQ6IHJlY3QucmlnaHQgfTtcbn1cbmZ1bmN0aW9uIHdpdGhGbHVzaGVkU3RhdGUodmlldywgc3RhdGUsIGYpIHtcbiAgICBsZXQgdmlld1N0YXRlID0gdmlldy5zdGF0ZSwgYWN0aXZlID0gdmlldy5yb290LmFjdGl2ZUVsZW1lbnQ7XG4gICAgaWYgKHZpZXdTdGF0ZSAhPSBzdGF0ZSlcbiAgICAgICAgdmlldy51cGRhdGVTdGF0ZShzdGF0ZSk7XG4gICAgaWYgKGFjdGl2ZSAhPSB2aWV3LmRvbSlcbiAgICAgICAgdmlldy5mb2N1cygpO1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBmKCk7XG4gICAgfVxuICAgIGZpbmFsbHkge1xuICAgICAgICBpZiAodmlld1N0YXRlICE9IHN0YXRlKVxuICAgICAgICAgICAgdmlldy51cGRhdGVTdGF0ZSh2aWV3U3RhdGUpO1xuICAgICAgICBpZiAoYWN0aXZlICE9IHZpZXcuZG9tICYmIGFjdGl2ZSlcbiAgICAgICAgICAgIGFjdGl2ZS5mb2N1cygpO1xuICAgIH1cbn1cbi8vIFdoZXRoZXIgdmVydGljYWwgcG9zaXRpb24gbW90aW9uIGluIGEgZ2l2ZW4gZGlyZWN0aW9uXG4vLyBmcm9tIGEgcG9zaXRpb24gd291bGQgbGVhdmUgYSB0ZXh0IGJsb2NrLlxuZnVuY3Rpb24gZW5kT2ZUZXh0YmxvY2tWZXJ0aWNhbCh2aWV3LCBzdGF0ZSwgZGlyKSB7XG4gICAgbGV0IHNlbCA9IHN0YXRlLnNlbGVjdGlvbjtcbiAgICBsZXQgJHBvcyA9IGRpciA9PSBcInVwXCIgPyBzZWwuJGZyb20gOiBzZWwuJHRvO1xuICAgIHJldHVybiB3aXRoRmx1c2hlZFN0YXRlKHZpZXcsIHN0YXRlLCAoKSA9PiB7XG4gICAgICAgIGxldCB7IG5vZGU6IGRvbSB9ID0gdmlldy5kb2NWaWV3LmRvbUZyb21Qb3MoJHBvcy5wb3MsIGRpciA9PSBcInVwXCIgPyAtMSA6IDEpO1xuICAgICAgICBmb3IgKDs7KSB7XG4gICAgICAgICAgICBsZXQgbmVhcmVzdCA9IHZpZXcuZG9jVmlldy5uZWFyZXN0RGVzYyhkb20sIHRydWUpO1xuICAgICAgICAgICAgaWYgKCFuZWFyZXN0KVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgaWYgKG5lYXJlc3Qubm9kZS5pc0Jsb2NrKSB7XG4gICAgICAgICAgICAgICAgZG9tID0gbmVhcmVzdC5kb207XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkb20gPSBuZWFyZXN0LmRvbS5wYXJlbnROb2RlO1xuICAgICAgICB9XG4gICAgICAgIGxldCBjb29yZHMgPSBjb29yZHNBdFBvcyh2aWV3LCAkcG9zLnBvcywgMSk7XG4gICAgICAgIGZvciAobGV0IGNoaWxkID0gZG9tLmZpcnN0Q2hpbGQ7IGNoaWxkOyBjaGlsZCA9IGNoaWxkLm5leHRTaWJsaW5nKSB7XG4gICAgICAgICAgICBsZXQgYm94ZXM7XG4gICAgICAgICAgICBpZiAoY2hpbGQubm9kZVR5cGUgPT0gMSlcbiAgICAgICAgICAgICAgICBib3hlcyA9IGNoaWxkLmdldENsaWVudFJlY3RzKCk7XG4gICAgICAgICAgICBlbHNlIGlmIChjaGlsZC5ub2RlVHlwZSA9PSAzKVxuICAgICAgICAgICAgICAgIGJveGVzID0gdGV4dFJhbmdlKGNoaWxkLCAwLCBjaGlsZC5ub2RlVmFsdWUubGVuZ3RoKS5nZXRDbGllbnRSZWN0cygpO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBib3hlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGxldCBib3ggPSBib3hlc1tpXTtcbiAgICAgICAgICAgICAgICBpZiAoYm94LmJvdHRvbSA+IGJveC50b3AgKyAxICYmXG4gICAgICAgICAgICAgICAgICAgIChkaXIgPT0gXCJ1cFwiID8gY29vcmRzLnRvcCAtIGJveC50b3AgPiAoYm94LmJvdHRvbSAtIGNvb3Jkcy50b3ApICogMlxuICAgICAgICAgICAgICAgICAgICAgICAgOiBib3guYm90dG9tIC0gY29vcmRzLmJvdHRvbSA+IChjb29yZHMuYm90dG9tIC0gYm94LnRvcCkgKiAyKSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pO1xufVxuY29uc3QgbWF5YmVSVEwgPSAvW1xcdTA1OTAtXFx1MDhhY10vO1xuZnVuY3Rpb24gZW5kT2ZUZXh0YmxvY2tIb3Jpem9udGFsKHZpZXcsIHN0YXRlLCBkaXIpIHtcbiAgICBsZXQgeyAkaGVhZCB9ID0gc3RhdGUuc2VsZWN0aW9uO1xuICAgIGlmICghJGhlYWQucGFyZW50LmlzVGV4dGJsb2NrKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgbGV0IG9mZnNldCA9ICRoZWFkLnBhcmVudE9mZnNldCwgYXRTdGFydCA9ICFvZmZzZXQsIGF0RW5kID0gb2Zmc2V0ID09ICRoZWFkLnBhcmVudC5jb250ZW50LnNpemU7XG4gICAgbGV0IHNlbCA9IHZpZXcuZG9tU2VsZWN0aW9uKCk7XG4gICAgLy8gSWYgdGhlIHRleHRibG9jayBpcyBhbGwgTFRSLCBvciB0aGUgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnRcbiAgICAvLyBTZWxlY3Rpb24ubW9kaWZ5IChFZGdlKSwgZmFsbCBiYWNrIHRvIGEgcHJpbWl0aXZlIGFwcHJvYWNoXG4gICAgaWYgKCFtYXliZVJUTC50ZXN0KCRoZWFkLnBhcmVudC50ZXh0Q29udGVudCkgfHwgIXNlbC5tb2RpZnkpXG4gICAgICAgIHJldHVybiBkaXIgPT0gXCJsZWZ0XCIgfHwgZGlyID09IFwiYmFja3dhcmRcIiA/IGF0U3RhcnQgOiBhdEVuZDtcbiAgICByZXR1cm4gd2l0aEZsdXNoZWRTdGF0ZSh2aWV3LCBzdGF0ZSwgKCkgPT4ge1xuICAgICAgICAvLyBUaGlzIGlzIGEgaHVnZSBoYWNrLCBidXQgYXBwZWFycyB0byBiZSB0aGUgYmVzdCB3ZSBjYW5cbiAgICAgICAgLy8gY3VycmVudGx5IGRvOiB1c2UgYFNlbGVjdGlvbi5tb2RpZnlgIHRvIG1vdmUgdGhlIHNlbGVjdGlvbiBieVxuICAgICAgICAvLyBvbmUgY2hhcmFjdGVyLCBhbmQgc2VlIGlmIHRoYXQgbW92ZXMgdGhlIGN1cnNvciBvdXQgb2YgdGhlXG4gICAgICAgIC8vIHRleHRibG9jayAob3IgZG9lc24ndCBtb3ZlIGl0IGF0IGFsbCwgd2hlbiBhdCB0aGUgc3RhcnQvZW5kIG9mXG4gICAgICAgIC8vIHRoZSBkb2N1bWVudCkuXG4gICAgICAgIGxldCBvbGRSYW5nZSA9IHNlbC5nZXRSYW5nZUF0KDApLCBvbGROb2RlID0gc2VsLmZvY3VzTm9kZSwgb2xkT2ZmID0gc2VsLmZvY3VzT2Zmc2V0O1xuICAgICAgICBsZXQgb2xkQmlkaUxldmVsID0gc2VsLmNhcmV0QmlkaUxldmVsIC8vIE9ubHkgZm9yIEZpcmVmb3hcbiAgICAgICAgO1xuICAgICAgICBzZWwubW9kaWZ5KFwibW92ZVwiLCBkaXIsIFwiY2hhcmFjdGVyXCIpO1xuICAgICAgICBsZXQgcGFyZW50RE9NID0gJGhlYWQuZGVwdGggPyB2aWV3LmRvY1ZpZXcuZG9tQWZ0ZXJQb3MoJGhlYWQuYmVmb3JlKCkpIDogdmlldy5kb207XG4gICAgICAgIGxldCByZXN1bHQgPSAhcGFyZW50RE9NLmNvbnRhaW5zKHNlbC5mb2N1c05vZGUubm9kZVR5cGUgPT0gMSA/IHNlbC5mb2N1c05vZGUgOiBzZWwuZm9jdXNOb2RlLnBhcmVudE5vZGUpIHx8XG4gICAgICAgICAgICAob2xkTm9kZSA9PSBzZWwuZm9jdXNOb2RlICYmIG9sZE9mZiA9PSBzZWwuZm9jdXNPZmZzZXQpO1xuICAgICAgICAvLyBSZXN0b3JlIHRoZSBwcmV2aW91cyBzZWxlY3Rpb25cbiAgICAgICAgc2VsLnJlbW92ZUFsbFJhbmdlcygpO1xuICAgICAgICBzZWwuYWRkUmFuZ2Uob2xkUmFuZ2UpO1xuICAgICAgICBpZiAob2xkQmlkaUxldmVsICE9IG51bGwpXG4gICAgICAgICAgICBzZWwuY2FyZXRCaWRpTGV2ZWwgPSBvbGRCaWRpTGV2ZWw7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSk7XG59XG5sZXQgY2FjaGVkU3RhdGUgPSBudWxsO1xubGV0IGNhY2hlZERpciA9IG51bGw7XG5sZXQgY2FjaGVkUmVzdWx0ID0gZmFsc2U7XG5mdW5jdGlvbiBlbmRPZlRleHRibG9jayh2aWV3LCBzdGF0ZSwgZGlyKSB7XG4gICAgaWYgKGNhY2hlZFN0YXRlID09IHN0YXRlICYmIGNhY2hlZERpciA9PSBkaXIpXG4gICAgICAgIHJldHVybiBjYWNoZWRSZXN1bHQ7XG4gICAgY2FjaGVkU3RhdGUgPSBzdGF0ZTtcbiAgICBjYWNoZWREaXIgPSBkaXI7XG4gICAgcmV0dXJuIGNhY2hlZFJlc3VsdCA9IGRpciA9PSBcInVwXCIgfHwgZGlyID09IFwiZG93blwiXG4gICAgICAgID8gZW5kT2ZUZXh0YmxvY2tWZXJ0aWNhbCh2aWV3LCBzdGF0ZSwgZGlyKVxuICAgICAgICA6IGVuZE9mVGV4dGJsb2NrSG9yaXpvbnRhbCh2aWV3LCBzdGF0ZSwgZGlyKTtcbn1cblxuLy8gVmlldyBkZXNjcmlwdGlvbnMgYXJlIGRhdGEgc3RydWN0dXJlcyB0aGF0IGRlc2NyaWJlIHRoZSBET00gdGhhdCBpc1xuLy8gdXNlZCB0byByZXByZXNlbnQgdGhlIGVkaXRvcidzIGNvbnRlbnQuIFRoZXkgYXJlIHVzZWQgZm9yOlxuLy9cbi8vIC0gSW5jcmVtZW50YWwgcmVkcmF3aW5nIHdoZW4gdGhlIGRvY3VtZW50IGNoYW5nZXNcbi8vXG4vLyAtIEZpZ3VyaW5nIG91dCB3aGF0IHBhcnQgb2YgdGhlIGRvY3VtZW50IGEgZ2l2ZW4gRE9NIHBvc2l0aW9uXG4vLyAgIGNvcnJlc3BvbmRzIHRvXG4vL1xuLy8gLSBXaXJpbmcgaW4gY3VzdG9tIGltcGxlbWVudGF0aW9ucyBvZiB0aGUgZWRpdGluZyBpbnRlcmZhY2UgZm9yIGFcbi8vICAgZ2l2ZW4gbm9kZVxuLy9cbi8vIFRoZXkgZm9ybSBhIGRvdWJseS1saW5rZWQgbXV0YWJsZSB0cmVlLCBzdGFydGluZyBhdCBgdmlldy5kb2NWaWV3YC5cbmNvbnN0IE5PVF9ESVJUWSA9IDAsIENISUxEX0RJUlRZID0gMSwgQ09OVEVOVF9ESVJUWSA9IDIsIE5PREVfRElSVFkgPSAzO1xuLy8gU3VwZXJjbGFzcyBmb3IgdGhlIHZhcmlvdXMga2luZHMgb2YgZGVzY3JpcHRpb25zLiBEZWZpbmVzIHRoZWlyXG4vLyBiYXNpYyBzdHJ1Y3R1cmUgYW5kIHNoYXJlZCBtZXRob2RzLlxuY2xhc3MgVmlld0Rlc2Mge1xuICAgIGNvbnN0cnVjdG9yKHBhcmVudCwgY2hpbGRyZW4sIGRvbSwgXG4gICAgLy8gVGhpcyBpcyB0aGUgbm9kZSB0aGF0IGhvbGRzIHRoZSBjaGlsZCB2aWV3cy4gSXQgbWF5IGJlIG51bGwgZm9yXG4gICAgLy8gZGVzY3MgdGhhdCBkb24ndCBoYXZlIGNoaWxkcmVuLlxuICAgIGNvbnRlbnRET00pIHtcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgICAgIHRoaXMuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgICAgICAgdGhpcy5kb20gPSBkb207XG4gICAgICAgIHRoaXMuY29udGVudERPTSA9IGNvbnRlbnRET007XG4gICAgICAgIHRoaXMuZGlydHkgPSBOT1RfRElSVFk7XG4gICAgICAgIC8vIEFuIGV4cGFuZG8gcHJvcGVydHkgb24gdGhlIERPTSBub2RlIHByb3ZpZGVzIGEgbGluayBiYWNrIHRvIGl0c1xuICAgICAgICAvLyBkZXNjcmlwdGlvbi5cbiAgICAgICAgZG9tLnBtVmlld0Rlc2MgPSB0aGlzO1xuICAgIH1cbiAgICAvLyBVc2VkIHRvIGNoZWNrIHdoZXRoZXIgYSBnaXZlbiBkZXNjcmlwdGlvbiBjb3JyZXNwb25kcyB0byBhXG4gICAgLy8gd2lkZ2V0L21hcmsvbm9kZS5cbiAgICBtYXRjaGVzV2lkZ2V0KHdpZGdldCkgeyByZXR1cm4gZmFsc2U7IH1cbiAgICBtYXRjaGVzTWFyayhtYXJrKSB7IHJldHVybiBmYWxzZTsgfVxuICAgIG1hdGNoZXNOb2RlKG5vZGUsIG91dGVyRGVjbywgaW5uZXJEZWNvKSB7IHJldHVybiBmYWxzZTsgfVxuICAgIG1hdGNoZXNIYWNrKG5vZGVOYW1lKSB7IHJldHVybiBmYWxzZTsgfVxuICAgIC8vIFdoZW4gcGFyc2luZyBpbi1lZGl0b3IgY29udGVudCAoaW4gZG9tY2hhbmdlLmpzKSwgd2UgYWxsb3dcbiAgICAvLyBkZXNjcmlwdGlvbnMgdG8gZGV0ZXJtaW5lIHRoZSBwYXJzZSBydWxlcyB0aGF0IHNob3VsZCBiZSB1c2VkIHRvXG4gICAgLy8gcGFyc2UgdGhlbS5cbiAgICBwYXJzZVJ1bGUoKSB7IHJldHVybiBudWxsOyB9XG4gICAgLy8gVXNlZCBieSB0aGUgZWRpdG9yJ3MgZXZlbnQgaGFuZGxlciB0byBpZ25vcmUgZXZlbnRzIHRoYXQgY29tZVxuICAgIC8vIGZyb20gY2VydGFpbiBkZXNjcy5cbiAgICBzdG9wRXZlbnQoZXZlbnQpIHsgcmV0dXJuIGZhbHNlOyB9XG4gICAgLy8gVGhlIHNpemUgb2YgdGhlIGNvbnRlbnQgcmVwcmVzZW50ZWQgYnkgdGhpcyBkZXNjLlxuICAgIGdldCBzaXplKCkge1xuICAgICAgICBsZXQgc2l6ZSA9IDA7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5jaGlsZHJlbi5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgIHNpemUgKz0gdGhpcy5jaGlsZHJlbltpXS5zaXplO1xuICAgICAgICByZXR1cm4gc2l6ZTtcbiAgICB9XG4gICAgLy8gRm9yIGJsb2NrIG5vZGVzLCB0aGlzIHJlcHJlc2VudHMgdGhlIHNwYWNlIHRha2VuIHVwIGJ5IHRoZWlyXG4gICAgLy8gc3RhcnQvZW5kIHRva2Vucy5cbiAgICBnZXQgYm9yZGVyKCkgeyByZXR1cm4gMDsgfVxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMucGFyZW50ID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAodGhpcy5kb20ucG1WaWV3RGVzYyA9PSB0aGlzKVxuICAgICAgICAgICAgdGhpcy5kb20ucG1WaWV3RGVzYyA9IHVuZGVmaW5lZDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgdGhpcy5jaGlsZHJlbltpXS5kZXN0cm95KCk7XG4gICAgfVxuICAgIHBvc0JlZm9yZUNoaWxkKGNoaWxkKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBwb3MgPSB0aGlzLnBvc0F0U3RhcnQ7OyBpKyspIHtcbiAgICAgICAgICAgIGxldCBjdXIgPSB0aGlzLmNoaWxkcmVuW2ldO1xuICAgICAgICAgICAgaWYgKGN1ciA9PSBjaGlsZClcbiAgICAgICAgICAgICAgICByZXR1cm4gcG9zO1xuICAgICAgICAgICAgcG9zICs9IGN1ci5zaXplO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldCBwb3NCZWZvcmUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcmVudC5wb3NCZWZvcmVDaGlsZCh0aGlzKTtcbiAgICB9XG4gICAgZ2V0IHBvc0F0U3RhcnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcmVudCA/IHRoaXMucGFyZW50LnBvc0JlZm9yZUNoaWxkKHRoaXMpICsgdGhpcy5ib3JkZXIgOiAwO1xuICAgIH1cbiAgICBnZXQgcG9zQWZ0ZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBvc0JlZm9yZSArIHRoaXMuc2l6ZTtcbiAgICB9XG4gICAgZ2V0IHBvc0F0RW5kKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wb3NBdFN0YXJ0ICsgdGhpcy5zaXplIC0gMiAqIHRoaXMuYm9yZGVyO1xuICAgIH1cbiAgICBsb2NhbFBvc0Zyb21ET00oZG9tLCBvZmZzZXQsIGJpYXMpIHtcbiAgICAgICAgLy8gSWYgdGhlIERPTSBwb3NpdGlvbiBpcyBpbiB0aGUgY29udGVudCwgdXNlIHRoZSBjaGlsZCBkZXNjIGFmdGVyXG4gICAgICAgIC8vIGl0IHRvIGZpZ3VyZSBvdXQgYSBwb3NpdGlvbi5cbiAgICAgICAgaWYgKHRoaXMuY29udGVudERPTSAmJiB0aGlzLmNvbnRlbnRET00uY29udGFpbnMoZG9tLm5vZGVUeXBlID09IDEgPyBkb20gOiBkb20ucGFyZW50Tm9kZSkpIHtcbiAgICAgICAgICAgIGlmIChiaWFzIDwgMCkge1xuICAgICAgICAgICAgICAgIGxldCBkb21CZWZvcmUsIGRlc2M7XG4gICAgICAgICAgICAgICAgaWYgKGRvbSA9PSB0aGlzLmNvbnRlbnRET00pIHtcbiAgICAgICAgICAgICAgICAgICAgZG9tQmVmb3JlID0gZG9tLmNoaWxkTm9kZXNbb2Zmc2V0IC0gMV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoZG9tLnBhcmVudE5vZGUgIT0gdGhpcy5jb250ZW50RE9NKVxuICAgICAgICAgICAgICAgICAgICAgICAgZG9tID0gZG9tLnBhcmVudE5vZGU7XG4gICAgICAgICAgICAgICAgICAgIGRvbUJlZm9yZSA9IGRvbS5wcmV2aW91c1NpYmxpbmc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHdoaWxlIChkb21CZWZvcmUgJiYgISgoZGVzYyA9IGRvbUJlZm9yZS5wbVZpZXdEZXNjKSAmJiBkZXNjLnBhcmVudCA9PSB0aGlzKSlcbiAgICAgICAgICAgICAgICAgICAgZG9tQmVmb3JlID0gZG9tQmVmb3JlLnByZXZpb3VzU2libGluZztcbiAgICAgICAgICAgICAgICByZXR1cm4gZG9tQmVmb3JlID8gdGhpcy5wb3NCZWZvcmVDaGlsZChkZXNjKSArIGRlc2Muc2l6ZSA6IHRoaXMucG9zQXRTdGFydDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGxldCBkb21BZnRlciwgZGVzYztcbiAgICAgICAgICAgICAgICBpZiAoZG9tID09IHRoaXMuY29udGVudERPTSkge1xuICAgICAgICAgICAgICAgICAgICBkb21BZnRlciA9IGRvbS5jaGlsZE5vZGVzW29mZnNldF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoZG9tLnBhcmVudE5vZGUgIT0gdGhpcy5jb250ZW50RE9NKVxuICAgICAgICAgICAgICAgICAgICAgICAgZG9tID0gZG9tLnBhcmVudE5vZGU7XG4gICAgICAgICAgICAgICAgICAgIGRvbUFmdGVyID0gZG9tLm5leHRTaWJsaW5nO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB3aGlsZSAoZG9tQWZ0ZXIgJiYgISgoZGVzYyA9IGRvbUFmdGVyLnBtVmlld0Rlc2MpICYmIGRlc2MucGFyZW50ID09IHRoaXMpKVxuICAgICAgICAgICAgICAgICAgICBkb21BZnRlciA9IGRvbUFmdGVyLm5leHRTaWJsaW5nO1xuICAgICAgICAgICAgICAgIHJldHVybiBkb21BZnRlciA/IHRoaXMucG9zQmVmb3JlQ2hpbGQoZGVzYykgOiB0aGlzLnBvc0F0RW5kO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIE90aGVyd2lzZSwgdXNlIHZhcmlvdXMgaGV1cmlzdGljcywgZmFsbGluZyBiYWNrIG9uIHRoZSBiaWFzXG4gICAgICAgIC8vIHBhcmFtZXRlciwgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgdG8gcmV0dXJuIHRoZSBwb3NpdGlvbiBhdCB0aGVcbiAgICAgICAgLy8gc3RhcnQgb3IgYXQgdGhlIGVuZCBvZiB0aGlzIHZpZXcgZGVzYy5cbiAgICAgICAgbGV0IGF0RW5kO1xuICAgICAgICBpZiAoZG9tID09IHRoaXMuZG9tICYmIHRoaXMuY29udGVudERPTSkge1xuICAgICAgICAgICAgYXRFbmQgPSBvZmZzZXQgPiBkb21JbmRleCh0aGlzLmNvbnRlbnRET00pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuY29udGVudERPTSAmJiB0aGlzLmNvbnRlbnRET00gIT0gdGhpcy5kb20gJiYgdGhpcy5kb20uY29udGFpbnModGhpcy5jb250ZW50RE9NKSkge1xuICAgICAgICAgICAgYXRFbmQgPSBkb20uY29tcGFyZURvY3VtZW50UG9zaXRpb24odGhpcy5jb250ZW50RE9NKSAmIDI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5kb20uZmlyc3RDaGlsZCkge1xuICAgICAgICAgICAgaWYgKG9mZnNldCA9PSAwKVxuICAgICAgICAgICAgICAgIGZvciAobGV0IHNlYXJjaCA9IGRvbTs7IHNlYXJjaCA9IHNlYXJjaC5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWFyY2ggPT0gdGhpcy5kb20pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0RW5kID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoc2VhcmNoLnByZXZpb3VzU2libGluZylcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChhdEVuZCA9PSBudWxsICYmIG9mZnNldCA9PSBkb20uY2hpbGROb2Rlcy5sZW5ndGgpXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2VhcmNoID0gZG9tOzsgc2VhcmNoID0gc2VhcmNoLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlYXJjaCA9PSB0aGlzLmRvbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXRFbmQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlYXJjaC5uZXh0U2libGluZylcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKGF0RW5kID09IG51bGwgPyBiaWFzID4gMCA6IGF0RW5kKSA/IHRoaXMucG9zQXRFbmQgOiB0aGlzLnBvc0F0U3RhcnQ7XG4gICAgfVxuICAgIC8vIFNjYW4gdXAgdGhlIGRvbSBmaW5kaW5nIHRoZSBmaXJzdCBkZXNjIHRoYXQgaXMgYSBkZXNjZW5kYW50IG9mXG4gICAgLy8gdGhpcyBvbmUuXG4gICAgbmVhcmVzdERlc2MoZG9tLCBvbmx5Tm9kZXMgPSBmYWxzZSkge1xuICAgICAgICBmb3IgKGxldCBmaXJzdCA9IHRydWUsIGN1ciA9IGRvbTsgY3VyOyBjdXIgPSBjdXIucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgbGV0IGRlc2MgPSB0aGlzLmdldERlc2MoY3VyKSwgbm9kZURPTTtcbiAgICAgICAgICAgIGlmIChkZXNjICYmICghb25seU5vZGVzIHx8IGRlc2Mubm9kZSkpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiBkb20gaXMgb3V0c2lkZSBvZiB0aGlzIGRlc2MncyBub2RlRE9NLCBkb24ndCBjb3VudCBpdC5cbiAgICAgICAgICAgICAgICBpZiAoZmlyc3QgJiYgKG5vZGVET00gPSBkZXNjLm5vZGVET00pICYmXG4gICAgICAgICAgICAgICAgICAgICEobm9kZURPTS5ub2RlVHlwZSA9PSAxID8gbm9kZURPTS5jb250YWlucyhkb20ubm9kZVR5cGUgPT0gMSA/IGRvbSA6IGRvbS5wYXJlbnROb2RlKSA6IG5vZGVET00gPT0gZG9tKSlcbiAgICAgICAgICAgICAgICAgICAgZmlyc3QgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkZXNjO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGdldERlc2MoZG9tKSB7XG4gICAgICAgIGxldCBkZXNjID0gZG9tLnBtVmlld0Rlc2M7XG4gICAgICAgIGZvciAobGV0IGN1ciA9IGRlc2M7IGN1cjsgY3VyID0gY3VyLnBhcmVudClcbiAgICAgICAgICAgIGlmIChjdXIgPT0gdGhpcylcbiAgICAgICAgICAgICAgICByZXR1cm4gZGVzYztcbiAgICB9XG4gICAgcG9zRnJvbURPTShkb20sIG9mZnNldCwgYmlhcykge1xuICAgICAgICBmb3IgKGxldCBzY2FuID0gZG9tOyBzY2FuOyBzY2FuID0gc2Nhbi5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICBsZXQgZGVzYyA9IHRoaXMuZ2V0RGVzYyhzY2FuKTtcbiAgICAgICAgICAgIGlmIChkZXNjKVxuICAgICAgICAgICAgICAgIHJldHVybiBkZXNjLmxvY2FsUG9zRnJvbURPTShkb20sIG9mZnNldCwgYmlhcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH1cbiAgICAvLyBGaW5kIHRoZSBkZXNjIGZvciB0aGUgbm9kZSBhZnRlciB0aGUgZ2l2ZW4gcG9zLCBpZiBhbnkuIChXaGVuIGFcbiAgICAvLyBwYXJlbnQgbm9kZSBvdmVycm9kZSByZW5kZXJpbmcsIHRoZXJlIG1pZ2h0IG5vdCBiZSBvbmUuKVxuICAgIGRlc2NBdChwb3MpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIG9mZnNldCA9IDA7IGkgPCB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgY2hpbGQgPSB0aGlzLmNoaWxkcmVuW2ldLCBlbmQgPSBvZmZzZXQgKyBjaGlsZC5zaXplO1xuICAgICAgICAgICAgaWYgKG9mZnNldCA9PSBwb3MgJiYgZW5kICE9IG9mZnNldCkge1xuICAgICAgICAgICAgICAgIHdoaWxlICghY2hpbGQuYm9yZGVyICYmIGNoaWxkLmNoaWxkcmVuLmxlbmd0aClcbiAgICAgICAgICAgICAgICAgICAgY2hpbGQgPSBjaGlsZC5jaGlsZHJlblswXTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2hpbGQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocG9zIDwgZW5kKVxuICAgICAgICAgICAgICAgIHJldHVybiBjaGlsZC5kZXNjQXQocG9zIC0gb2Zmc2V0IC0gY2hpbGQuYm9yZGVyKTtcbiAgICAgICAgICAgIG9mZnNldCA9IGVuZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBkb21Gcm9tUG9zKHBvcywgc2lkZSkge1xuICAgICAgICBpZiAoIXRoaXMuY29udGVudERPTSlcbiAgICAgICAgICAgIHJldHVybiB7IG5vZGU6IHRoaXMuZG9tLCBvZmZzZXQ6IDAgfTtcbiAgICAgICAgLy8gRmlyc3QgZmluZCB0aGUgcG9zaXRpb24gaW4gdGhlIGNoaWxkIGFycmF5XG4gICAgICAgIGxldCBpID0gMCwgb2Zmc2V0ID0gMDtcbiAgICAgICAgZm9yIChsZXQgY3VyUG9zID0gMDsgaSA8IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBjaGlsZCA9IHRoaXMuY2hpbGRyZW5baV0sIGVuZCA9IGN1clBvcyArIGNoaWxkLnNpemU7XG4gICAgICAgICAgICBpZiAoZW5kID4gcG9zIHx8IGNoaWxkIGluc3RhbmNlb2YgVHJhaWxpbmdIYWNrVmlld0Rlc2MpIHtcbiAgICAgICAgICAgICAgICBvZmZzZXQgPSBwb3MgLSBjdXJQb3M7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdXJQb3MgPSBlbmQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgdGhpcyBwb2ludHMgaW50byB0aGUgbWlkZGxlIG9mIGEgY2hpbGQsIGNhbGwgdGhyb3VnaFxuICAgICAgICBpZiAob2Zmc2V0KVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2hpbGRyZW5baV0uZG9tRnJvbVBvcyhvZmZzZXQgLSB0aGlzLmNoaWxkcmVuW2ldLmJvcmRlciwgc2lkZSk7XG4gICAgICAgIC8vIEdvIGJhY2sgaWYgdGhlcmUgd2VyZSBhbnkgemVyby1sZW5ndGggd2lkZ2V0cyB3aXRoIHNpZGUgPj0gMCBiZWZvcmUgdGhpcyBwb2ludFxuICAgICAgICBmb3IgKGxldCBwcmV2OyBpICYmICEocHJldiA9IHRoaXMuY2hpbGRyZW5baSAtIDFdKS5zaXplICYmIHByZXYgaW5zdGFuY2VvZiBXaWRnZXRWaWV3RGVzYyAmJiBwcmV2LnNpZGUgPj0gMDsgaS0tKSB7IH1cbiAgICAgICAgLy8gU2NhbiB0b3dhcmRzIHRoZSBmaXJzdCB1c2VhYmxlIG5vZGVcbiAgICAgICAgaWYgKHNpZGUgPD0gMCkge1xuICAgICAgICAgICAgbGV0IHByZXYsIGVudGVyID0gdHJ1ZTtcbiAgICAgICAgICAgIGZvciAoOzsgaS0tLCBlbnRlciA9IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgcHJldiA9IGkgPyB0aGlzLmNoaWxkcmVuW2kgLSAxXSA6IG51bGw7XG4gICAgICAgICAgICAgICAgaWYgKCFwcmV2IHx8IHByZXYuZG9tLnBhcmVudE5vZGUgPT0gdGhpcy5jb250ZW50RE9NKVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwcmV2ICYmIHNpZGUgJiYgZW50ZXIgJiYgIXByZXYuYm9yZGVyICYmICFwcmV2LmRvbUF0b20pXG4gICAgICAgICAgICAgICAgcmV0dXJuIHByZXYuZG9tRnJvbVBvcyhwcmV2LnNpemUsIHNpZGUpO1xuICAgICAgICAgICAgcmV0dXJuIHsgbm9kZTogdGhpcy5jb250ZW50RE9NLCBvZmZzZXQ6IHByZXYgPyBkb21JbmRleChwcmV2LmRvbSkgKyAxIDogMCB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbGV0IG5leHQsIGVudGVyID0gdHJ1ZTtcbiAgICAgICAgICAgIGZvciAoOzsgaSsrLCBlbnRlciA9IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgbmV4dCA9IGkgPCB0aGlzLmNoaWxkcmVuLmxlbmd0aCA/IHRoaXMuY2hpbGRyZW5baV0gOiBudWxsO1xuICAgICAgICAgICAgICAgIGlmICghbmV4dCB8fCBuZXh0LmRvbS5wYXJlbnROb2RlID09IHRoaXMuY29udGVudERPTSlcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobmV4dCAmJiBlbnRlciAmJiAhbmV4dC5ib3JkZXIgJiYgIW5leHQuZG9tQXRvbSlcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV4dC5kb21Gcm9tUG9zKDAsIHNpZGUpO1xuICAgICAgICAgICAgcmV0dXJuIHsgbm9kZTogdGhpcy5jb250ZW50RE9NLCBvZmZzZXQ6IG5leHQgPyBkb21JbmRleChuZXh0LmRvbSkgOiB0aGlzLmNvbnRlbnRET00uY2hpbGROb2Rlcy5sZW5ndGggfTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBVc2VkIHRvIGZpbmQgYSBET00gcmFuZ2UgaW4gYSBzaW5nbGUgcGFyZW50IGZvciBhIGdpdmVuIGNoYW5nZWRcbiAgICAvLyByYW5nZS5cbiAgICBwYXJzZVJhbmdlKGZyb20sIHRvLCBiYXNlID0gMCkge1xuICAgICAgICBpZiAodGhpcy5jaGlsZHJlbi5sZW5ndGggPT0gMClcbiAgICAgICAgICAgIHJldHVybiB7IG5vZGU6IHRoaXMuY29udGVudERPTSwgZnJvbSwgdG8sIGZyb21PZmZzZXQ6IDAsIHRvT2Zmc2V0OiB0aGlzLmNvbnRlbnRET00uY2hpbGROb2Rlcy5sZW5ndGggfTtcbiAgICAgICAgbGV0IGZyb21PZmZzZXQgPSAtMSwgdG9PZmZzZXQgPSAtMTtcbiAgICAgICAgZm9yIChsZXQgb2Zmc2V0ID0gYmFzZSwgaSA9IDA7OyBpKyspIHtcbiAgICAgICAgICAgIGxldCBjaGlsZCA9IHRoaXMuY2hpbGRyZW5baV0sIGVuZCA9IG9mZnNldCArIGNoaWxkLnNpemU7XG4gICAgICAgICAgICBpZiAoZnJvbU9mZnNldCA9PSAtMSAmJiBmcm9tIDw9IGVuZCkge1xuICAgICAgICAgICAgICAgIGxldCBjaGlsZEJhc2UgPSBvZmZzZXQgKyBjaGlsZC5ib3JkZXI7XG4gICAgICAgICAgICAgICAgLy8gRklYTUUgbWF5YmUgZGVzY2VuZCBtYXJrIHZpZXdzIHRvIHBhcnNlIGEgbmFycm93ZXIgcmFuZ2U/XG4gICAgICAgICAgICAgICAgaWYgKGZyb20gPj0gY2hpbGRCYXNlICYmIHRvIDw9IGVuZCAtIGNoaWxkLmJvcmRlciAmJiBjaGlsZC5ub2RlICYmXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkLmNvbnRlbnRET00gJiYgdGhpcy5jb250ZW50RE9NLmNvbnRhaW5zKGNoaWxkLmNvbnRlbnRET00pKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2hpbGQucGFyc2VSYW5nZShmcm9tLCB0bywgY2hpbGRCYXNlKTtcbiAgICAgICAgICAgICAgICBmcm9tID0gb2Zmc2V0O1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSBpOyBqID4gMDsgai0tKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBwcmV2ID0gdGhpcy5jaGlsZHJlbltqIC0gMV07XG4gICAgICAgICAgICAgICAgICAgIGlmIChwcmV2LnNpemUgJiYgcHJldi5kb20ucGFyZW50Tm9kZSA9PSB0aGlzLmNvbnRlbnRET00gJiYgIXByZXYuZW1wdHlDaGlsZEF0KDEpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmcm9tT2Zmc2V0ID0gZG9tSW5kZXgocHJldi5kb20pICsgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGZyb20gLT0gcHJldi5zaXplO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZnJvbU9mZnNldCA9PSAtMSlcbiAgICAgICAgICAgICAgICAgICAgZnJvbU9mZnNldCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZnJvbU9mZnNldCA+IC0xICYmIChlbmQgPiB0byB8fCBpID09IHRoaXMuY2hpbGRyZW4ubGVuZ3RoIC0gMSkpIHtcbiAgICAgICAgICAgICAgICB0byA9IGVuZDtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gaSArIDE7IGogPCB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBuZXh0ID0gdGhpcy5jaGlsZHJlbltqXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5leHQuc2l6ZSAmJiBuZXh0LmRvbS5wYXJlbnROb2RlID09IHRoaXMuY29udGVudERPTSAmJiAhbmV4dC5lbXB0eUNoaWxkQXQoLTEpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b09mZnNldCA9IGRvbUluZGV4KG5leHQuZG9tKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRvICs9IG5leHQuc2l6ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRvT2Zmc2V0ID09IC0xKVxuICAgICAgICAgICAgICAgICAgICB0b09mZnNldCA9IHRoaXMuY29udGVudERPTS5jaGlsZE5vZGVzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9mZnNldCA9IGVuZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBub2RlOiB0aGlzLmNvbnRlbnRET00sIGZyb20sIHRvLCBmcm9tT2Zmc2V0LCB0b09mZnNldCB9O1xuICAgIH1cbiAgICBlbXB0eUNoaWxkQXQoc2lkZSkge1xuICAgICAgICBpZiAodGhpcy5ib3JkZXIgfHwgIXRoaXMuY29udGVudERPTSB8fCAhdGhpcy5jaGlsZHJlbi5sZW5ndGgpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGxldCBjaGlsZCA9IHRoaXMuY2hpbGRyZW5bc2lkZSA8IDAgPyAwIDogdGhpcy5jaGlsZHJlbi5sZW5ndGggLSAxXTtcbiAgICAgICAgcmV0dXJuIGNoaWxkLnNpemUgPT0gMCB8fCBjaGlsZC5lbXB0eUNoaWxkQXQoc2lkZSk7XG4gICAgfVxuICAgIGRvbUFmdGVyUG9zKHBvcykge1xuICAgICAgICBsZXQgeyBub2RlLCBvZmZzZXQgfSA9IHRoaXMuZG9tRnJvbVBvcyhwb3MsIDApO1xuICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSAhPSAxIHx8IG9mZnNldCA9PSBub2RlLmNoaWxkTm9kZXMubGVuZ3RoKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJObyBub2RlIGFmdGVyIHBvcyBcIiArIHBvcyk7XG4gICAgICAgIHJldHVybiBub2RlLmNoaWxkTm9kZXNbb2Zmc2V0XTtcbiAgICB9XG4gICAgLy8gVmlldyBkZXNjcyBhcmUgcmVzcG9uc2libGUgZm9yIHNldHRpbmcgYW55IHNlbGVjdGlvbiB0aGF0IGZhbGxzXG4gICAgLy8gZW50aXJlbHkgaW5zaWRlIG9mIHRoZW0sIHNvIHRoYXQgY3VzdG9tIGltcGxlbWVudGF0aW9ucyBjYW4gZG9cbiAgICAvLyBjdXN0b20gdGhpbmdzIHdpdGggdGhlIHNlbGVjdGlvbi4gTm90ZSB0aGF0IHRoaXMgZmFsbHMgYXBhcnQgd2hlblxuICAgIC8vIGEgc2VsZWN0aW9uIHN0YXJ0cyBpbiBzdWNoIGEgbm9kZSBhbmQgZW5kcyBpbiBhbm90aGVyLCBpbiB3aGljaFxuICAgIC8vIGNhc2Ugd2UganVzdCB1c2Ugd2hhdGV2ZXIgZG9tRnJvbVBvcyBwcm9kdWNlcyBhcyBhIGJlc3QgZWZmb3J0LlxuICAgIHNldFNlbGVjdGlvbihhbmNob3IsIGhlYWQsIHJvb3QsIGZvcmNlID0gZmFsc2UpIHtcbiAgICAgICAgLy8gSWYgdGhlIHNlbGVjdGlvbiBmYWxscyBlbnRpcmVseSBpbiBhIGNoaWxkLCBnaXZlIGl0IHRvIHRoYXQgY2hpbGRcbiAgICAgICAgbGV0IGZyb20gPSBNYXRoLm1pbihhbmNob3IsIGhlYWQpLCB0byA9IE1hdGgubWF4KGFuY2hvciwgaGVhZCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBvZmZzZXQgPSAwOyBpIDwgdGhpcy5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IGNoaWxkID0gdGhpcy5jaGlsZHJlbltpXSwgZW5kID0gb2Zmc2V0ICsgY2hpbGQuc2l6ZTtcbiAgICAgICAgICAgIGlmIChmcm9tID4gb2Zmc2V0ICYmIHRvIDwgZW5kKVxuICAgICAgICAgICAgICAgIHJldHVybiBjaGlsZC5zZXRTZWxlY3Rpb24oYW5jaG9yIC0gb2Zmc2V0IC0gY2hpbGQuYm9yZGVyLCBoZWFkIC0gb2Zmc2V0IC0gY2hpbGQuYm9yZGVyLCByb290LCBmb3JjZSk7XG4gICAgICAgICAgICBvZmZzZXQgPSBlbmQ7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGFuY2hvckRPTSA9IHRoaXMuZG9tRnJvbVBvcyhhbmNob3IsIGFuY2hvciA/IC0xIDogMSk7XG4gICAgICAgIGxldCBoZWFkRE9NID0gaGVhZCA9PSBhbmNob3IgPyBhbmNob3JET00gOiB0aGlzLmRvbUZyb21Qb3MoaGVhZCwgaGVhZCA/IC0xIDogMSk7XG4gICAgICAgIGxldCBkb21TZWwgPSByb290LmdldFNlbGVjdGlvbigpO1xuICAgICAgICBsZXQgYnJLbHVkZ2UgPSBmYWxzZTtcbiAgICAgICAgLy8gT24gRmlyZWZveCwgdXNpbmcgU2VsZWN0aW9uLmNvbGxhcHNlIHRvIHB1dCB0aGUgY3Vyc29yIGFmdGVyIGFcbiAgICAgICAgLy8gQlIgbm9kZSBmb3Igc29tZSByZWFzb24gZG9lc24ndCBhbHdheXMgd29yayAoIzEwNzMpLiBPbiBTYWZhcmksXG4gICAgICAgIC8vIHRoZSBjdXJzb3Igc29tZXRpbWVzIGluZXhwbGljYWJsZSB2aXN1YWxseSBsYWdzIGJlaGluZCBpdHNcbiAgICAgICAgLy8gcmVwb3J0ZWQgcG9zaXRpb24gaW4gc3VjaCBzaXR1YXRpb25zICgjMTA5MikuXG4gICAgICAgIGlmICgoZ2Vja28gfHwgc2FmYXJpKSAmJiBhbmNob3IgPT0gaGVhZCkge1xuICAgICAgICAgICAgbGV0IHsgbm9kZSwgb2Zmc2V0IH0gPSBhbmNob3JET007XG4gICAgICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PSAzKSB7XG4gICAgICAgICAgICAgICAgYnJLbHVkZ2UgPSAhIShvZmZzZXQgJiYgbm9kZS5ub2RlVmFsdWVbb2Zmc2V0IC0gMV0gPT0gXCJcXG5cIik7XG4gICAgICAgICAgICAgICAgLy8gSXNzdWUgIzExMjhcbiAgICAgICAgICAgICAgICBpZiAoYnJLbHVkZ2UgJiYgb2Zmc2V0ID09IG5vZGUubm9kZVZhbHVlLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBzY2FuID0gbm9kZSwgYWZ0ZXI7IHNjYW47IHNjYW4gPSBzY2FuLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhZnRlciA9IHNjYW4ubmV4dFNpYmxpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWZ0ZXIubm9kZU5hbWUgPT0gXCJCUlwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmNob3JET00gPSBoZWFkRE9NID0geyBub2RlOiBhZnRlci5wYXJlbnROb2RlLCBvZmZzZXQ6IGRvbUluZGV4KGFmdGVyKSArIDEgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBkZXNjID0gc2Nhbi5wbVZpZXdEZXNjO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlc2MgJiYgZGVzYy5ub2RlICYmIGRlc2Mubm9kZS5pc0Jsb2NrKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbGV0IHByZXYgPSBub2RlLmNoaWxkTm9kZXNbb2Zmc2V0IC0gMV07XG4gICAgICAgICAgICAgICAgYnJLbHVkZ2UgPSBwcmV2ICYmIChwcmV2Lm5vZGVOYW1lID09IFwiQlJcIiB8fCBwcmV2LmNvbnRlbnRFZGl0YWJsZSA9PSBcImZhbHNlXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIEZpcmVmb3ggY2FuIGFjdCBzdHJhbmdlbHkgd2hlbiB0aGUgc2VsZWN0aW9uIGlzIGluIGZyb250IG9mIGFuXG4gICAgICAgIC8vIHVuZWRpdGFibGUgbm9kZS4gU2VlICMxMTYzIGFuZCBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0xNzA5NTM2XG4gICAgICAgIGlmIChnZWNrbyAmJiBkb21TZWwuZm9jdXNOb2RlICYmIGRvbVNlbC5mb2N1c05vZGUgIT0gaGVhZERPTS5ub2RlICYmIGRvbVNlbC5mb2N1c05vZGUubm9kZVR5cGUgPT0gMSkge1xuICAgICAgICAgICAgbGV0IGFmdGVyID0gZG9tU2VsLmZvY3VzTm9kZS5jaGlsZE5vZGVzW2RvbVNlbC5mb2N1c09mZnNldF07XG4gICAgICAgICAgICBpZiAoYWZ0ZXIgJiYgYWZ0ZXIuY29udGVudEVkaXRhYmxlID09IFwiZmFsc2VcIilcbiAgICAgICAgICAgICAgICBmb3JjZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCEoZm9yY2UgfHwgYnJLbHVkZ2UgJiYgc2FmYXJpKSAmJlxuICAgICAgICAgICAgaXNFcXVpdmFsZW50UG9zaXRpb24oYW5jaG9yRE9NLm5vZGUsIGFuY2hvckRPTS5vZmZzZXQsIGRvbVNlbC5hbmNob3JOb2RlLCBkb21TZWwuYW5jaG9yT2Zmc2V0KSAmJlxuICAgICAgICAgICAgaXNFcXVpdmFsZW50UG9zaXRpb24oaGVhZERPTS5ub2RlLCBoZWFkRE9NLm9mZnNldCwgZG9tU2VsLmZvY3VzTm9kZSwgZG9tU2VsLmZvY3VzT2Zmc2V0KSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgLy8gU2VsZWN0aW9uLmV4dGVuZCBjYW4gYmUgdXNlZCB0byBjcmVhdGUgYW4gJ2ludmVydGVkJyBzZWxlY3Rpb25cbiAgICAgICAgLy8gKG9uZSB3aGVyZSB0aGUgZm9jdXMgaXMgYmVmb3JlIHRoZSBhbmNob3IpLCBidXQgbm90IGFsbFxuICAgICAgICAvLyBicm93c2VycyBzdXBwb3J0IGl0IHlldC5cbiAgICAgICAgbGV0IGRvbVNlbEV4dGVuZGVkID0gZmFsc2U7XG4gICAgICAgIGlmICgoZG9tU2VsLmV4dGVuZCB8fCBhbmNob3IgPT0gaGVhZCkgJiYgIWJyS2x1ZGdlKSB7XG4gICAgICAgICAgICBkb21TZWwuY29sbGFwc2UoYW5jaG9yRE9NLm5vZGUsIGFuY2hvckRPTS5vZmZzZXQpO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoYW5jaG9yICE9IGhlYWQpXG4gICAgICAgICAgICAgICAgICAgIGRvbVNlbC5leHRlbmQoaGVhZERPTS5ub2RlLCBoZWFkRE9NLm9mZnNldCk7XG4gICAgICAgICAgICAgICAgZG9tU2VsRXh0ZW5kZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIC8vIEluIHNvbWUgY2FzZXMgd2l0aCBDaHJvbWUgdGhlIHNlbGVjdGlvbiBpcyBlbXB0eSBhZnRlciBjYWxsaW5nXG4gICAgICAgICAgICAgICAgLy8gY29sbGFwc2UsIGV2ZW4gd2hlbiBpdCBzaG91bGQgYmUgdmFsaWQuIFRoaXMgYXBwZWFycyB0byBiZSBhIGJ1ZywgYnV0XG4gICAgICAgICAgICAgICAgLy8gaXQgaXMgZGlmZmljdWx0IHRvIGlzb2xhdGUuIElmIHRoaXMgaGFwcGVucyBmYWxsYmFjayB0byB0aGUgb2xkIHBhdGhcbiAgICAgICAgICAgICAgICAvLyB3aXRob3V0IHVzaW5nIGV4dGVuZC5cbiAgICAgICAgICAgICAgICBpZiAoIShlcnIgaW5zdGFuY2VvZiBET01FeGNlcHRpb24pKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgICAgICAgLy8gZGVjbGFyZSBnbG9iYWw6IERPTUV4Y2VwdGlvblxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghZG9tU2VsRXh0ZW5kZWQpIHtcbiAgICAgICAgICAgIGlmIChhbmNob3IgPiBoZWFkKSB7XG4gICAgICAgICAgICAgICAgbGV0IHRtcCA9IGFuY2hvckRPTTtcbiAgICAgICAgICAgICAgICBhbmNob3JET00gPSBoZWFkRE9NO1xuICAgICAgICAgICAgICAgIGhlYWRET00gPSB0bXA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgcmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xuICAgICAgICAgICAgcmFuZ2Uuc2V0RW5kKGhlYWRET00ubm9kZSwgaGVhZERPTS5vZmZzZXQpO1xuICAgICAgICAgICAgcmFuZ2Uuc2V0U3RhcnQoYW5jaG9yRE9NLm5vZGUsIGFuY2hvckRPTS5vZmZzZXQpO1xuICAgICAgICAgICAgZG9tU2VsLnJlbW92ZUFsbFJhbmdlcygpO1xuICAgICAgICAgICAgZG9tU2VsLmFkZFJhbmdlKHJhbmdlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZ25vcmVNdXRhdGlvbihtdXRhdGlvbikge1xuICAgICAgICByZXR1cm4gIXRoaXMuY29udGVudERPTSAmJiBtdXRhdGlvbi50eXBlICE9IFwic2VsZWN0aW9uXCI7XG4gICAgfVxuICAgIGdldCBjb250ZW50TG9zdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGVudERPTSAmJiB0aGlzLmNvbnRlbnRET00gIT0gdGhpcy5kb20gJiYgIXRoaXMuZG9tLmNvbnRhaW5zKHRoaXMuY29udGVudERPTSk7XG4gICAgfVxuICAgIC8vIFJlbW92ZSBhIHN1YnRyZWUgb2YgdGhlIGVsZW1lbnQgdHJlZSB0aGF0IGhhcyBiZWVuIHRvdWNoZWRcbiAgICAvLyBieSBhIERPTSBjaGFuZ2UsIHNvIHRoYXQgdGhlIG5leHQgdXBkYXRlIHdpbGwgcmVkcmF3IGl0LlxuICAgIG1hcmtEaXJ0eShmcm9tLCB0bykge1xuICAgICAgICBmb3IgKGxldCBvZmZzZXQgPSAwLCBpID0gMDsgaSA8IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBjaGlsZCA9IHRoaXMuY2hpbGRyZW5baV0sIGVuZCA9IG9mZnNldCArIGNoaWxkLnNpemU7XG4gICAgICAgICAgICBpZiAob2Zmc2V0ID09IGVuZCA/IGZyb20gPD0gZW5kICYmIHRvID49IG9mZnNldCA6IGZyb20gPCBlbmQgJiYgdG8gPiBvZmZzZXQpIHtcbiAgICAgICAgICAgICAgICBsZXQgc3RhcnRJbnNpZGUgPSBvZmZzZXQgKyBjaGlsZC5ib3JkZXIsIGVuZEluc2lkZSA9IGVuZCAtIGNoaWxkLmJvcmRlcjtcbiAgICAgICAgICAgICAgICBpZiAoZnJvbSA+PSBzdGFydEluc2lkZSAmJiB0byA8PSBlbmRJbnNpZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXJ0eSA9IGZyb20gPT0gb2Zmc2V0IHx8IHRvID09IGVuZCA/IENPTlRFTlRfRElSVFkgOiBDSElMRF9ESVJUWTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZyb20gPT0gc3RhcnRJbnNpZGUgJiYgdG8gPT0gZW5kSW5zaWRlICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAoY2hpbGQuY29udGVudExvc3QgfHwgY2hpbGQuZG9tLnBhcmVudE5vZGUgIT0gdGhpcy5jb250ZW50RE9NKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkLmRpcnR5ID0gTk9ERV9ESVJUWTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQubWFya0RpcnR5KGZyb20gLSBzdGFydEluc2lkZSwgdG8gLSBzdGFydEluc2lkZSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkLmRpcnR5ID0gY2hpbGQuZG9tID09IGNoaWxkLmNvbnRlbnRET00gJiYgY2hpbGQuZG9tLnBhcmVudE5vZGUgPT0gdGhpcy5jb250ZW50RE9NICYmICFjaGlsZC5jaGlsZHJlbi5sZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgICAgID8gQ09OVEVOVF9ESVJUWSA6IE5PREVfRElSVFk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb2Zmc2V0ID0gZW5kO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGlydHkgPSBDT05URU5UX0RJUlRZO1xuICAgIH1cbiAgICBtYXJrUGFyZW50c0RpcnR5KCkge1xuICAgICAgICBsZXQgbGV2ZWwgPSAxO1xuICAgICAgICBmb3IgKGxldCBub2RlID0gdGhpcy5wYXJlbnQ7IG5vZGU7IG5vZGUgPSBub2RlLnBhcmVudCwgbGV2ZWwrKykge1xuICAgICAgICAgICAgbGV0IGRpcnR5ID0gbGV2ZWwgPT0gMSA/IENPTlRFTlRfRElSVFkgOiBDSElMRF9ESVJUWTtcbiAgICAgICAgICAgIGlmIChub2RlLmRpcnR5IDwgZGlydHkpXG4gICAgICAgICAgICAgICAgbm9kZS5kaXJ0eSA9IGRpcnR5O1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldCBkb21BdG9tKCkgeyByZXR1cm4gZmFsc2U7IH1cbiAgICBnZXQgaWdub3JlRm9yQ29vcmRzKCkgeyByZXR1cm4gZmFsc2U7IH1cbn1cbi8vIEEgd2lkZ2V0IGRlc2MgcmVwcmVzZW50cyBhIHdpZGdldCBkZWNvcmF0aW9uLCB3aGljaCBpcyBhIERPTSBub2RlXG4vLyBkcmF3biBiZXR3ZWVuIHRoZSBkb2N1bWVudCBub2Rlcy5cbmNsYXNzIFdpZGdldFZpZXdEZXNjIGV4dGVuZHMgVmlld0Rlc2Mge1xuICAgIGNvbnN0cnVjdG9yKHBhcmVudCwgd2lkZ2V0LCB2aWV3LCBwb3MpIHtcbiAgICAgICAgbGV0IHNlbGYsIGRvbSA9IHdpZGdldC50eXBlLnRvRE9NO1xuICAgICAgICBpZiAodHlwZW9mIGRvbSA9PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgICAgICBkb20gPSBkb20odmlldywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghc2VsZilcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBvcztcbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5wYXJlbnQpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLnBhcmVudC5wb3NCZWZvcmVDaGlsZChzZWxmKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICBpZiAoIXdpZGdldC50eXBlLnNwZWMucmF3KSB7XG4gICAgICAgICAgICBpZiAoZG9tLm5vZGVUeXBlICE9IDEpIHtcbiAgICAgICAgICAgICAgICBsZXQgd3JhcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuICAgICAgICAgICAgICAgIHdyYXAuYXBwZW5kQ2hpbGQoZG9tKTtcbiAgICAgICAgICAgICAgICBkb20gPSB3cmFwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZG9tLmNvbnRlbnRFZGl0YWJsZSA9IFwiZmFsc2VcIjtcbiAgICAgICAgICAgIGRvbS5jbGFzc0xpc3QuYWRkKFwiUHJvc2VNaXJyb3Itd2lkZ2V0XCIpO1xuICAgICAgICB9XG4gICAgICAgIHN1cGVyKHBhcmVudCwgW10sIGRvbSwgbnVsbCk7XG4gICAgICAgIHRoaXMud2lkZ2V0ID0gd2lkZ2V0O1xuICAgICAgICB0aGlzLndpZGdldCA9IHdpZGdldDtcbiAgICAgICAgc2VsZiA9IHRoaXM7XG4gICAgfVxuICAgIG1hdGNoZXNXaWRnZXQod2lkZ2V0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpcnR5ID09IE5PVF9ESVJUWSAmJiB3aWRnZXQudHlwZS5lcSh0aGlzLndpZGdldC50eXBlKTtcbiAgICB9XG4gICAgcGFyc2VSdWxlKCkgeyByZXR1cm4geyBpZ25vcmU6IHRydWUgfTsgfVxuICAgIHN0b3BFdmVudChldmVudCkge1xuICAgICAgICBsZXQgc3RvcCA9IHRoaXMud2lkZ2V0LnNwZWMuc3RvcEV2ZW50O1xuICAgICAgICByZXR1cm4gc3RvcCA/IHN0b3AoZXZlbnQpIDogZmFsc2U7XG4gICAgfVxuICAgIGlnbm9yZU11dGF0aW9uKG11dGF0aW9uKSB7XG4gICAgICAgIHJldHVybiBtdXRhdGlvbi50eXBlICE9IFwic2VsZWN0aW9uXCIgfHwgdGhpcy53aWRnZXQuc3BlYy5pZ25vcmVTZWxlY3Rpb247XG4gICAgfVxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMud2lkZ2V0LnR5cGUuZGVzdHJveSh0aGlzLmRvbSk7XG4gICAgICAgIHN1cGVyLmRlc3Ryb3koKTtcbiAgICB9XG4gICAgZ2V0IGRvbUF0b20oKSB7IHJldHVybiB0cnVlOyB9XG4gICAgZ2V0IHNpZGUoKSB7IHJldHVybiB0aGlzLndpZGdldC50eXBlLnNpZGU7IH1cbn1cbmNsYXNzIENvbXBvc2l0aW9uVmlld0Rlc2MgZXh0ZW5kcyBWaWV3RGVzYyB7XG4gICAgY29uc3RydWN0b3IocGFyZW50LCBkb20sIHRleHRET00sIHRleHQpIHtcbiAgICAgICAgc3VwZXIocGFyZW50LCBbXSwgZG9tLCBudWxsKTtcbiAgICAgICAgdGhpcy50ZXh0RE9NID0gdGV4dERPTTtcbiAgICAgICAgdGhpcy50ZXh0ID0gdGV4dDtcbiAgICB9XG4gICAgZ2V0IHNpemUoKSB7IHJldHVybiB0aGlzLnRleHQubGVuZ3RoOyB9XG4gICAgbG9jYWxQb3NGcm9tRE9NKGRvbSwgb2Zmc2V0KSB7XG4gICAgICAgIGlmIChkb20gIT0gdGhpcy50ZXh0RE9NKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucG9zQXRTdGFydCArIChvZmZzZXQgPyB0aGlzLnNpemUgOiAwKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucG9zQXRTdGFydCArIG9mZnNldDtcbiAgICB9XG4gICAgZG9tRnJvbVBvcyhwb3MpIHtcbiAgICAgICAgcmV0dXJuIHsgbm9kZTogdGhpcy50ZXh0RE9NLCBvZmZzZXQ6IHBvcyB9O1xuICAgIH1cbiAgICBpZ25vcmVNdXRhdGlvbihtdXQpIHtcbiAgICAgICAgcmV0dXJuIG11dC50eXBlID09PSAnY2hhcmFjdGVyRGF0YScgJiYgbXV0LnRhcmdldC5ub2RlVmFsdWUgPT0gbXV0Lm9sZFZhbHVlO1xuICAgIH1cbn1cbi8vIEEgbWFyayBkZXNjIHJlcHJlc2VudHMgYSBtYXJrLiBNYXkgaGF2ZSBtdWx0aXBsZSBjaGlsZHJlbixcbi8vIGRlcGVuZGluZyBvbiBob3cgdGhlIG1hcmsgaXMgc3BsaXQuIE5vdGUgdGhhdCBtYXJrcyBhcmUgZHJhd24gdXNpbmdcbi8vIGEgZml4ZWQgbmVzdGluZyBvcmRlciwgZm9yIHNpbXBsaWNpdHkgYW5kIHByZWRpY3RhYmlsaXR5LCBzbyBpblxuLy8gc29tZSBjYXNlcyB0aGV5IHdpbGwgYmUgc3BsaXQgbW9yZSBvZnRlbiB0aGFuIHdvdWxkIGFwcGVhclxuLy8gbmVjZXNzYXJ5LlxuY2xhc3MgTWFya1ZpZXdEZXNjIGV4dGVuZHMgVmlld0Rlc2Mge1xuICAgIGNvbnN0cnVjdG9yKHBhcmVudCwgbWFyaywgZG9tLCBjb250ZW50RE9NKSB7XG4gICAgICAgIHN1cGVyKHBhcmVudCwgW10sIGRvbSwgY29udGVudERPTSk7XG4gICAgICAgIHRoaXMubWFyayA9IG1hcms7XG4gICAgfVxuICAgIHN0YXRpYyBjcmVhdGUocGFyZW50LCBtYXJrLCBpbmxpbmUsIHZpZXcpIHtcbiAgICAgICAgbGV0IGN1c3RvbSA9IHZpZXcubm9kZVZpZXdzW21hcmsudHlwZS5uYW1lXTtcbiAgICAgICAgbGV0IHNwZWMgPSBjdXN0b20gJiYgY3VzdG9tKG1hcmssIHZpZXcsIGlubGluZSk7XG4gICAgICAgIGlmICghc3BlYyB8fCAhc3BlYy5kb20pXG4gICAgICAgICAgICBzcGVjID0gRE9NU2VyaWFsaXplci5yZW5kZXJTcGVjKGRvY3VtZW50LCBtYXJrLnR5cGUuc3BlYy50b0RPTShtYXJrLCBpbmxpbmUpKTtcbiAgICAgICAgcmV0dXJuIG5ldyBNYXJrVmlld0Rlc2MocGFyZW50LCBtYXJrLCBzcGVjLmRvbSwgc3BlYy5jb250ZW50RE9NIHx8IHNwZWMuZG9tKTtcbiAgICB9XG4gICAgcGFyc2VSdWxlKCkge1xuICAgICAgICBpZiAoKHRoaXMuZGlydHkgJiBOT0RFX0RJUlRZKSB8fCB0aGlzLm1hcmsudHlwZS5zcGVjLnJlcGFyc2VJblZpZXcpXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgcmV0dXJuIHsgbWFyazogdGhpcy5tYXJrLnR5cGUubmFtZSwgYXR0cnM6IHRoaXMubWFyay5hdHRycywgY29udGVudEVsZW1lbnQ6IHRoaXMuY29udGVudERPTSB8fCB1bmRlZmluZWQgfTtcbiAgICB9XG4gICAgbWF0Y2hlc01hcmsobWFyaykgeyByZXR1cm4gdGhpcy5kaXJ0eSAhPSBOT0RFX0RJUlRZICYmIHRoaXMubWFyay5lcShtYXJrKTsgfVxuICAgIG1hcmtEaXJ0eShmcm9tLCB0bykge1xuICAgICAgICBzdXBlci5tYXJrRGlydHkoZnJvbSwgdG8pO1xuICAgICAgICAvLyBNb3ZlIGRpcnR5IGluZm8gdG8gbmVhcmVzdCBub2RlIHZpZXdcbiAgICAgICAgaWYgKHRoaXMuZGlydHkgIT0gTk9UX0RJUlRZKSB7XG4gICAgICAgICAgICBsZXQgcGFyZW50ID0gdGhpcy5wYXJlbnQ7XG4gICAgICAgICAgICB3aGlsZSAoIXBhcmVudC5ub2RlKVxuICAgICAgICAgICAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG4gICAgICAgICAgICBpZiAocGFyZW50LmRpcnR5IDwgdGhpcy5kaXJ0eSlcbiAgICAgICAgICAgICAgICBwYXJlbnQuZGlydHkgPSB0aGlzLmRpcnR5O1xuICAgICAgICAgICAgdGhpcy5kaXJ0eSA9IE5PVF9ESVJUWTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzbGljZShmcm9tLCB0bywgdmlldykge1xuICAgICAgICBsZXQgY29weSA9IE1hcmtWaWV3RGVzYy5jcmVhdGUodGhpcy5wYXJlbnQsIHRoaXMubWFyaywgdHJ1ZSwgdmlldyk7XG4gICAgICAgIGxldCBub2RlcyA9IHRoaXMuY2hpbGRyZW4sIHNpemUgPSB0aGlzLnNpemU7XG4gICAgICAgIGlmICh0byA8IHNpemUpXG4gICAgICAgICAgICBub2RlcyA9IHJlcGxhY2VOb2Rlcyhub2RlcywgdG8sIHNpemUsIHZpZXcpO1xuICAgICAgICBpZiAoZnJvbSA+IDApXG4gICAgICAgICAgICBub2RlcyA9IHJlcGxhY2VOb2Rlcyhub2RlcywgMCwgZnJvbSwgdmlldyk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICBub2Rlc1tpXS5wYXJlbnQgPSBjb3B5O1xuICAgICAgICBjb3B5LmNoaWxkcmVuID0gbm9kZXM7XG4gICAgICAgIHJldHVybiBjb3B5O1xuICAgIH1cbn1cbi8vIE5vZGUgdmlldyBkZXNjcyBhcmUgdGhlIG1haW4sIG1vc3QgY29tbW9uIHR5cGUgb2YgdmlldyBkZXNjLCBhbmRcbi8vIGNvcnJlc3BvbmQgdG8gYW4gYWN0dWFsIG5vZGUgaW4gdGhlIGRvY3VtZW50LiBVbmxpa2UgbWFyayBkZXNjcyxcbi8vIHRoZXkgcG9wdWxhdGUgdGhlaXIgY2hpbGQgYXJyYXkgdGhlbXNlbHZlcy5cbmNsYXNzIE5vZGVWaWV3RGVzYyBleHRlbmRzIFZpZXdEZXNjIHtcbiAgICBjb25zdHJ1Y3RvcihwYXJlbnQsIG5vZGUsIG91dGVyRGVjbywgaW5uZXJEZWNvLCBkb20sIGNvbnRlbnRET00sIG5vZGVET00sIHZpZXcsIHBvcykge1xuICAgICAgICBzdXBlcihwYXJlbnQsIFtdLCBkb20sIGNvbnRlbnRET00pO1xuICAgICAgICB0aGlzLm5vZGUgPSBub2RlO1xuICAgICAgICB0aGlzLm91dGVyRGVjbyA9IG91dGVyRGVjbztcbiAgICAgICAgdGhpcy5pbm5lckRlY28gPSBpbm5lckRlY287XG4gICAgICAgIHRoaXMubm9kZURPTSA9IG5vZGVET007XG4gICAgICAgIGlmIChjb250ZW50RE9NKVxuICAgICAgICAgICAgdGhpcy51cGRhdGVDaGlsZHJlbih2aWV3LCBwb3MpO1xuICAgIH1cbiAgICAvLyBCeSBkZWZhdWx0LCBhIG5vZGUgaXMgcmVuZGVyZWQgdXNpbmcgdGhlIGB0b0RPTWAgbWV0aG9kIGZyb20gdGhlXG4gICAgLy8gbm9kZSB0eXBlIHNwZWMuIEJ1dCBjbGllbnQgY29kZSBjYW4gdXNlIHRoZSBgbm9kZVZpZXdzYCBzcGVjIHRvXG4gICAgLy8gc3VwcGx5IGEgY3VzdG9tIG5vZGUgdmlldywgd2hpY2ggY2FuIGluZmx1ZW5jZSB2YXJpb3VzIGFzcGVjdHMgb2ZcbiAgICAvLyB0aGUgd2F5IHRoZSBub2RlIHdvcmtzLlxuICAgIC8vXG4gICAgLy8gKFVzaW5nIHN1YmNsYXNzaW5nIGZvciB0aGlzIHdhcyBpbnRlbnRpb25hbGx5IGRlY2lkZWQgYWdhaW5zdCxcbiAgICAvLyBzaW5jZSBpdCdkIHJlcXVpcmUgZXhwb3NpbmcgYSB3aG9sZSBzbGV3IG9mIGZpbmlja3lcbiAgICAvLyBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzIHRvIHRoZSB1c2VyIGNvZGUgdGhhdCB0aGV5IHByb2JhYmx5IHdpbGxcbiAgICAvLyBuZXZlciBuZWVkLilcbiAgICBzdGF0aWMgY3JlYXRlKHBhcmVudCwgbm9kZSwgb3V0ZXJEZWNvLCBpbm5lckRlY28sIHZpZXcsIHBvcykge1xuICAgICAgICBsZXQgY3VzdG9tID0gdmlldy5ub2RlVmlld3Nbbm9kZS50eXBlLm5hbWVdLCBkZXNjT2JqO1xuICAgICAgICBsZXQgc3BlYyA9IGN1c3RvbSAmJiBjdXN0b20obm9kZSwgdmlldywgKCkgPT4ge1xuICAgICAgICAgICAgLy8gKFRoaXMgaXMgYSBmdW5jdGlvbiB0aGF0IGFsbG93cyB0aGUgY3VzdG9tIHZpZXcgdG8gZmluZCBpdHNcbiAgICAgICAgICAgIC8vIG93biBwb3NpdGlvbilcbiAgICAgICAgICAgIGlmICghZGVzY09iailcbiAgICAgICAgICAgICAgICByZXR1cm4gcG9zO1xuICAgICAgICAgICAgaWYgKGRlc2NPYmoucGFyZW50KVxuICAgICAgICAgICAgICAgIHJldHVybiBkZXNjT2JqLnBhcmVudC5wb3NCZWZvcmVDaGlsZChkZXNjT2JqKTtcbiAgICAgICAgfSwgb3V0ZXJEZWNvLCBpbm5lckRlY28pO1xuICAgICAgICBsZXQgZG9tID0gc3BlYyAmJiBzcGVjLmRvbSwgY29udGVudERPTSA9IHNwZWMgJiYgc3BlYy5jb250ZW50RE9NO1xuICAgICAgICBpZiAobm9kZS5pc1RleHQpIHtcbiAgICAgICAgICAgIGlmICghZG9tKVxuICAgICAgICAgICAgICAgIGRvbSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKG5vZGUudGV4dCk7XG4gICAgICAgICAgICBlbHNlIGlmIChkb20ubm9kZVR5cGUgIT0gMylcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlRleHQgbXVzdCBiZSByZW5kZXJlZCBhcyBhIERPTSB0ZXh0IG5vZGVcIik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIWRvbSkge1xuICAgICAgICAgICAgKHsgZG9tLCBjb250ZW50RE9NIH0gPSBET01TZXJpYWxpemVyLnJlbmRlclNwZWMoZG9jdW1lbnQsIG5vZGUudHlwZS5zcGVjLnRvRE9NKG5vZGUpKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFjb250ZW50RE9NICYmICFub2RlLmlzVGV4dCAmJiBkb20ubm9kZU5hbWUgIT0gXCJCUlwiKSB7IC8vIENocm9tZSBnZXRzIGNvbmZ1c2VkIGJ5IDxiciBjb250ZW50ZWRpdGFibGU9ZmFsc2U+XG4gICAgICAgICAgICBpZiAoIWRvbS5oYXNBdHRyaWJ1dGUoXCJjb250ZW50ZWRpdGFibGVcIikpXG4gICAgICAgICAgICAgICAgZG9tLmNvbnRlbnRFZGl0YWJsZSA9IFwiZmFsc2VcIjtcbiAgICAgICAgICAgIGlmIChub2RlLnR5cGUuc3BlYy5kcmFnZ2FibGUpXG4gICAgICAgICAgICAgICAgZG9tLmRyYWdnYWJsZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IG5vZGVET00gPSBkb207XG4gICAgICAgIGRvbSA9IGFwcGx5T3V0ZXJEZWNvKGRvbSwgb3V0ZXJEZWNvLCBub2RlKTtcbiAgICAgICAgaWYgKHNwZWMpXG4gICAgICAgICAgICByZXR1cm4gZGVzY09iaiA9IG5ldyBDdXN0b21Ob2RlVmlld0Rlc2MocGFyZW50LCBub2RlLCBvdXRlckRlY28sIGlubmVyRGVjbywgZG9tLCBjb250ZW50RE9NIHx8IG51bGwsIG5vZGVET00sIHNwZWMsIHZpZXcsIHBvcyArIDEpO1xuICAgICAgICBlbHNlIGlmIChub2RlLmlzVGV4dClcbiAgICAgICAgICAgIHJldHVybiBuZXcgVGV4dFZpZXdEZXNjKHBhcmVudCwgbm9kZSwgb3V0ZXJEZWNvLCBpbm5lckRlY28sIGRvbSwgbm9kZURPTSwgdmlldyk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHJldHVybiBuZXcgTm9kZVZpZXdEZXNjKHBhcmVudCwgbm9kZSwgb3V0ZXJEZWNvLCBpbm5lckRlY28sIGRvbSwgY29udGVudERPTSB8fCBudWxsLCBub2RlRE9NLCB2aWV3LCBwb3MgKyAxKTtcbiAgICB9XG4gICAgcGFyc2VSdWxlKCkge1xuICAgICAgICAvLyBFeHBlcmltZW50YWwga2x1ZGdlIHRvIGFsbG93IG9wdC1pbiByZS1wYXJzaW5nIG9mIG5vZGVzXG4gICAgICAgIGlmICh0aGlzLm5vZGUudHlwZS5zcGVjLnJlcGFyc2VJblZpZXcpXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgLy8gRklYTUUgdGhlIGFzc3VtcHRpb24gdGhhdCB0aGlzIGNhbiBhbHdheXMgcmV0dXJuIHRoZSBjdXJyZW50XG4gICAgICAgIC8vIGF0dHJzIG1lYW5zIHRoYXQgaWYgdGhlIHVzZXIgc29tZWhvdyBtYW5hZ2VzIHRvIGNoYW5nZSB0aGVcbiAgICAgICAgLy8gYXR0cnMgaW4gdGhlIGRvbSwgdGhhdCB3b24ndCBiZSBwaWNrZWQgdXAuIE5vdCBlbnRpcmVseSBzdXJlXG4gICAgICAgIC8vIHdoZXRoZXIgdGhpcyBpcyBhIHByb2JsZW1cbiAgICAgICAgbGV0IHJ1bGUgPSB7IG5vZGU6IHRoaXMubm9kZS50eXBlLm5hbWUsIGF0dHJzOiB0aGlzLm5vZGUuYXR0cnMgfTtcbiAgICAgICAgaWYgKHRoaXMubm9kZS50eXBlLndoaXRlc3BhY2UgPT0gXCJwcmVcIilcbiAgICAgICAgICAgIHJ1bGUucHJlc2VydmVXaGl0ZXNwYWNlID0gXCJmdWxsXCI7XG4gICAgICAgIGlmICghdGhpcy5jb250ZW50RE9NKSB7XG4gICAgICAgICAgICBydWxlLmdldENvbnRlbnQgPSAoKSA9PiB0aGlzLm5vZGUuY29udGVudDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghdGhpcy5jb250ZW50TG9zdCkge1xuICAgICAgICAgICAgcnVsZS5jb250ZW50RWxlbWVudCA9IHRoaXMuY29udGVudERPTTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIENocm9tZSBsaWtlcyB0byByYW5kb21seSByZWNyZWF0ZSBwYXJlbnQgbm9kZXMgd2hlblxuICAgICAgICAgICAgLy8gYmFja3NwYWNpbmcgdGhpbmdzLiBXaGVuIHRoYXQgaGFwcGVucywgdGhpcyB0cmllcyB0byBmaW5kIHRoZVxuICAgICAgICAgICAgLy8gbmV3IHBhcmVudC5cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSB0aGlzLmNoaWxkcmVuLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICAgICAgbGV0IGNoaWxkID0gdGhpcy5jaGlsZHJlbltpXTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5kb20uY29udGFpbnMoY2hpbGQuZG9tLnBhcmVudE5vZGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJ1bGUuY29udGVudEVsZW1lbnQgPSBjaGlsZC5kb20ucGFyZW50Tm9kZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFydWxlLmNvbnRlbnRFbGVtZW50KVxuICAgICAgICAgICAgICAgIHJ1bGUuZ2V0Q29udGVudCA9ICgpID0+IEZyYWdtZW50LmVtcHR5O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBydWxlO1xuICAgIH1cbiAgICBtYXRjaGVzTm9kZShub2RlLCBvdXRlckRlY28sIGlubmVyRGVjbykge1xuICAgICAgICByZXR1cm4gdGhpcy5kaXJ0eSA9PSBOT1RfRElSVFkgJiYgbm9kZS5lcSh0aGlzLm5vZGUpICYmXG4gICAgICAgICAgICBzYW1lT3V0ZXJEZWNvKG91dGVyRGVjbywgdGhpcy5vdXRlckRlY28pICYmIGlubmVyRGVjby5lcSh0aGlzLmlubmVyRGVjbyk7XG4gICAgfVxuICAgIGdldCBzaXplKCkgeyByZXR1cm4gdGhpcy5ub2RlLm5vZGVTaXplOyB9XG4gICAgZ2V0IGJvcmRlcigpIHsgcmV0dXJuIHRoaXMubm9kZS5pc0xlYWYgPyAwIDogMTsgfVxuICAgIC8vIFN5bmNzIGB0aGlzLmNoaWxkcmVuYCB0byBtYXRjaCBgdGhpcy5ub2RlLmNvbnRlbnRgIGFuZCB0aGUgbG9jYWxcbiAgICAvLyBkZWNvcmF0aW9ucywgcG9zc2libHkgaW50cm9kdWNpbmcgbmVzdGluZyBmb3IgbWFya3MuIFRoZW4sIGluIGFcbiAgICAvLyBzZXBhcmF0ZSBzdGVwLCBzeW5jcyB0aGUgRE9NIGluc2lkZSBgdGhpcy5jb250ZW50RE9NYCB0b1xuICAgIC8vIGB0aGlzLmNoaWxkcmVuYC5cbiAgICB1cGRhdGVDaGlsZHJlbih2aWV3LCBwb3MpIHtcbiAgICAgICAgbGV0IGlubGluZSA9IHRoaXMubm9kZS5pbmxpbmVDb250ZW50LCBvZmYgPSBwb3M7XG4gICAgICAgIGxldCBjb21wb3NpdGlvbiA9IHZpZXcuY29tcG9zaW5nID8gdGhpcy5sb2NhbENvbXBvc2l0aW9uSW5mbyh2aWV3LCBwb3MpIDogbnVsbDtcbiAgICAgICAgbGV0IGxvY2FsQ29tcG9zaXRpb24gPSBjb21wb3NpdGlvbiAmJiBjb21wb3NpdGlvbi5wb3MgPiAtMSA/IGNvbXBvc2l0aW9uIDogbnVsbDtcbiAgICAgICAgbGV0IGNvbXBvc2l0aW9uSW5DaGlsZCA9IGNvbXBvc2l0aW9uICYmIGNvbXBvc2l0aW9uLnBvcyA8IDA7XG4gICAgICAgIGxldCB1cGRhdGVyID0gbmV3IFZpZXdUcmVlVXBkYXRlcih0aGlzLCBsb2NhbENvbXBvc2l0aW9uICYmIGxvY2FsQ29tcG9zaXRpb24ubm9kZSk7XG4gICAgICAgIGl0ZXJEZWNvKHRoaXMubm9kZSwgdGhpcy5pbm5lckRlY28sICh3aWRnZXQsIGksIGluc2lkZU5vZGUpID0+IHtcbiAgICAgICAgICAgIGlmICh3aWRnZXQuc3BlYy5tYXJrcylcbiAgICAgICAgICAgICAgICB1cGRhdGVyLnN5bmNUb01hcmtzKHdpZGdldC5zcGVjLm1hcmtzLCBpbmxpbmUsIHZpZXcpO1xuICAgICAgICAgICAgZWxzZSBpZiAod2lkZ2V0LnR5cGUuc2lkZSA+PSAwICYmICFpbnNpZGVOb2RlKVxuICAgICAgICAgICAgICAgIHVwZGF0ZXIuc3luY1RvTWFya3MoaSA9PSB0aGlzLm5vZGUuY2hpbGRDb3VudCA/IE1hcmsubm9uZSA6IHRoaXMubm9kZS5jaGlsZChpKS5tYXJrcywgaW5saW5lLCB2aWV3KTtcbiAgICAgICAgICAgIC8vIElmIHRoZSBuZXh0IG5vZGUgaXMgYSBkZXNjIG1hdGNoaW5nIHRoaXMgd2lkZ2V0LCByZXVzZSBpdCxcbiAgICAgICAgICAgIC8vIG90aGVyd2lzZSBpbnNlcnQgdGhlIHdpZGdldCBhcyBhIG5ldyB2aWV3IGRlc2MuXG4gICAgICAgICAgICB1cGRhdGVyLnBsYWNlV2lkZ2V0KHdpZGdldCwgdmlldywgb2ZmKTtcbiAgICAgICAgfSwgKGNoaWxkLCBvdXRlckRlY28sIGlubmVyRGVjbywgaSkgPT4ge1xuICAgICAgICAgICAgLy8gTWFrZSBzdXJlIHRoZSB3cmFwcGluZyBtYXJrIGRlc2NzIG1hdGNoIHRoZSBub2RlJ3MgbWFya3MuXG4gICAgICAgICAgICB1cGRhdGVyLnN5bmNUb01hcmtzKGNoaWxkLm1hcmtzLCBpbmxpbmUsIHZpZXcpO1xuICAgICAgICAgICAgLy8gVHJ5IHNldmVyYWwgc3RyYXRlZ2llcyBmb3IgZHJhd2luZyB0aGlzIG5vZGVcbiAgICAgICAgICAgIGxldCBjb21wSW5kZXg7XG4gICAgICAgICAgICBpZiAodXBkYXRlci5maW5kTm9kZU1hdGNoKGNoaWxkLCBvdXRlckRlY28sIGlubmVyRGVjbywgaSkpIDtcbiAgICAgICAgICAgIGVsc2UgaWYgKGNvbXBvc2l0aW9uSW5DaGlsZCAmJiB2aWV3LnN0YXRlLnNlbGVjdGlvbi5mcm9tID4gb2ZmICYmXG4gICAgICAgICAgICAgICAgdmlldy5zdGF0ZS5zZWxlY3Rpb24udG8gPCBvZmYgKyBjaGlsZC5ub2RlU2l6ZSAmJlxuICAgICAgICAgICAgICAgIChjb21wSW5kZXggPSB1cGRhdGVyLmZpbmRJbmRleFdpdGhDaGlsZChjb21wb3NpdGlvbi5ub2RlKSkgPiAtMSAmJlxuICAgICAgICAgICAgICAgIHVwZGF0ZXIudXBkYXRlTm9kZUF0KGNoaWxkLCBvdXRlckRlY28sIGlubmVyRGVjbywgY29tcEluZGV4LCB2aWV3KSkgO1xuICAgICAgICAgICAgZWxzZSBpZiAodXBkYXRlci51cGRhdGVOZXh0Tm9kZShjaGlsZCwgb3V0ZXJEZWNvLCBpbm5lckRlY28sIHZpZXcsIGkpKSA7XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBBZGQgaXQgYXMgYSBuZXcgdmlld1xuICAgICAgICAgICAgICAgIHVwZGF0ZXIuYWRkTm9kZShjaGlsZCwgb3V0ZXJEZWNvLCBpbm5lckRlY28sIHZpZXcsIG9mZik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvZmYgKz0gY2hpbGQubm9kZVNpemU7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBEcm9wIGFsbCByZW1haW5pbmcgZGVzY3MgYWZ0ZXIgdGhlIGN1cnJlbnQgcG9zaXRpb24uXG4gICAgICAgIHVwZGF0ZXIuc3luY1RvTWFya3MoW10sIGlubGluZSwgdmlldyk7XG4gICAgICAgIGlmICh0aGlzLm5vZGUuaXNUZXh0YmxvY2spXG4gICAgICAgICAgICB1cGRhdGVyLmFkZFRleHRibG9ja0hhY2tzKCk7XG4gICAgICAgIHVwZGF0ZXIuZGVzdHJveVJlc3QoKTtcbiAgICAgICAgLy8gU3luYyB0aGUgRE9NIGlmIGFueXRoaW5nIGNoYW5nZWRcbiAgICAgICAgaWYgKHVwZGF0ZXIuY2hhbmdlZCB8fCB0aGlzLmRpcnR5ID09IENPTlRFTlRfRElSVFkpIHtcbiAgICAgICAgICAgIC8vIE1heSBoYXZlIHRvIHByb3RlY3QgZm9jdXNlZCBET00gZnJvbSBiZWluZyBjaGFuZ2VkIGlmIGEgY29tcG9zaXRpb24gaXMgYWN0aXZlXG4gICAgICAgICAgICBpZiAobG9jYWxDb21wb3NpdGlvbilcbiAgICAgICAgICAgICAgICB0aGlzLnByb3RlY3RMb2NhbENvbXBvc2l0aW9uKHZpZXcsIGxvY2FsQ29tcG9zaXRpb24pO1xuICAgICAgICAgICAgcmVuZGVyRGVzY3ModGhpcy5jb250ZW50RE9NLCB0aGlzLmNoaWxkcmVuLCB2aWV3KTtcbiAgICAgICAgICAgIGlmIChpb3MpXG4gICAgICAgICAgICAgICAgaW9zSGFja3ModGhpcy5kb20pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGxvY2FsQ29tcG9zaXRpb25JbmZvKHZpZXcsIHBvcykge1xuICAgICAgICAvLyBPbmx5IGRvIHNvbWV0aGluZyBpZiBib3RoIHRoZSBzZWxlY3Rpb24gYW5kIGEgZm9jdXNlZCB0ZXh0IG5vZGVcbiAgICAgICAgLy8gYXJlIGluc2lkZSBvZiB0aGlzIG5vZGVcbiAgICAgICAgbGV0IHsgZnJvbSwgdG8gfSA9IHZpZXcuc3RhdGUuc2VsZWN0aW9uO1xuICAgICAgICBpZiAoISh2aWV3LnN0YXRlLnNlbGVjdGlvbiBpbnN0YW5jZW9mIFRleHRTZWxlY3Rpb24pIHx8IGZyb20gPCBwb3MgfHwgdG8gPiBwb3MgKyB0aGlzLm5vZGUuY29udGVudC5zaXplKVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIGxldCBzZWwgPSB2aWV3LmRvbVNlbGVjdGlvbigpO1xuICAgICAgICBsZXQgdGV4dE5vZGUgPSBuZWFyYnlUZXh0Tm9kZShzZWwuZm9jdXNOb2RlLCBzZWwuZm9jdXNPZmZzZXQpO1xuICAgICAgICBpZiAoIXRleHROb2RlIHx8ICF0aGlzLmRvbS5jb250YWlucyh0ZXh0Tm9kZS5wYXJlbnROb2RlKSlcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICBpZiAodGhpcy5ub2RlLmlubGluZUNvbnRlbnQpIHtcbiAgICAgICAgICAgIC8vIEZpbmQgdGhlIHRleHQgaW4gdGhlIGZvY3VzZWQgbm9kZSBpbiB0aGUgbm9kZSwgc3RvcCBpZiBpdCdzIG5vdFxuICAgICAgICAgICAgLy8gdGhlcmUgKG1heSBoYXZlIGJlZW4gbW9kaWZpZWQgdGhyb3VnaCBvdGhlciBtZWFucywgaW4gd2hpY2hcbiAgICAgICAgICAgIC8vIGNhc2UgaXQgc2hvdWxkIG92ZXJ3cml0dGVuKVxuICAgICAgICAgICAgbGV0IHRleHQgPSB0ZXh0Tm9kZS5ub2RlVmFsdWU7XG4gICAgICAgICAgICBsZXQgdGV4dFBvcyA9IGZpbmRUZXh0SW5GcmFnbWVudCh0aGlzLm5vZGUuY29udGVudCwgdGV4dCwgZnJvbSAtIHBvcywgdG8gLSBwb3MpO1xuICAgICAgICAgICAgcmV0dXJuIHRleHRQb3MgPCAwID8gbnVsbCA6IHsgbm9kZTogdGV4dE5vZGUsIHBvczogdGV4dFBvcywgdGV4dCB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHsgbm9kZTogdGV4dE5vZGUsIHBvczogLTEsIHRleHQ6IFwiXCIgfTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBwcm90ZWN0TG9jYWxDb21wb3NpdGlvbih2aWV3LCB7IG5vZGUsIHBvcywgdGV4dCB9KSB7XG4gICAgICAgIC8vIFRoZSBub2RlIGlzIGFscmVhZHkgcGFydCBvZiBhIGxvY2FsIHZpZXcgZGVzYywgbGVhdmUgaXQgdGhlcmVcbiAgICAgICAgaWYgKHRoaXMuZ2V0RGVzYyhub2RlKSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgLy8gQ3JlYXRlIGEgY29tcG9zaXRpb24gdmlldyBmb3IgdGhlIG9ycGhhbmVkIG5vZGVzXG4gICAgICAgIGxldCB0b3BOb2RlID0gbm9kZTtcbiAgICAgICAgZm9yICg7OyB0b3BOb2RlID0gdG9wTm9kZS5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICBpZiAodG9wTm9kZS5wYXJlbnROb2RlID09IHRoaXMuY29udGVudERPTSlcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIHdoaWxlICh0b3BOb2RlLnByZXZpb3VzU2libGluZylcbiAgICAgICAgICAgICAgICB0b3BOb2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodG9wTm9kZS5wcmV2aW91c1NpYmxpbmcpO1xuICAgICAgICAgICAgd2hpbGUgKHRvcE5vZGUubmV4dFNpYmxpbmcpXG4gICAgICAgICAgICAgICAgdG9wTm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRvcE5vZGUubmV4dFNpYmxpbmcpO1xuICAgICAgICAgICAgaWYgKHRvcE5vZGUucG1WaWV3RGVzYylcbiAgICAgICAgICAgICAgICB0b3BOb2RlLnBtVmlld0Rlc2MgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGRlc2MgPSBuZXcgQ29tcG9zaXRpb25WaWV3RGVzYyh0aGlzLCB0b3BOb2RlLCBub2RlLCB0ZXh0KTtcbiAgICAgICAgdmlldy5pbnB1dC5jb21wb3NpdGlvbk5vZGVzLnB1c2goZGVzYyk7XG4gICAgICAgIC8vIFBhdGNoIHVwIHRoaXMuY2hpbGRyZW4gdG8gY29udGFpbiB0aGUgY29tcG9zaXRpb24gdmlld1xuICAgICAgICB0aGlzLmNoaWxkcmVuID0gcmVwbGFjZU5vZGVzKHRoaXMuY2hpbGRyZW4sIHBvcywgcG9zICsgdGV4dC5sZW5ndGgsIHZpZXcsIGRlc2MpO1xuICAgIH1cbiAgICAvLyBJZiB0aGlzIGRlc2MgbXVzdCBiZSB1cGRhdGVkIHRvIG1hdGNoIHRoZSBnaXZlbiBub2RlIGRlY29yYXRpb24sXG4gICAgLy8gZG8gc28gYW5kIHJldHVybiB0cnVlLlxuICAgIHVwZGF0ZShub2RlLCBvdXRlckRlY28sIGlubmVyRGVjbywgdmlldykge1xuICAgICAgICBpZiAodGhpcy5kaXJ0eSA9PSBOT0RFX0RJUlRZIHx8XG4gICAgICAgICAgICAhbm9kZS5zYW1lTWFya3VwKHRoaXMubm9kZSkpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIHRoaXMudXBkYXRlSW5uZXIobm9kZSwgb3V0ZXJEZWNvLCBpbm5lckRlY28sIHZpZXcpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgdXBkYXRlSW5uZXIobm9kZSwgb3V0ZXJEZWNvLCBpbm5lckRlY28sIHZpZXcpIHtcbiAgICAgICAgdGhpcy51cGRhdGVPdXRlckRlY28ob3V0ZXJEZWNvKTtcbiAgICAgICAgdGhpcy5ub2RlID0gbm9kZTtcbiAgICAgICAgdGhpcy5pbm5lckRlY28gPSBpbm5lckRlY287XG4gICAgICAgIGlmICh0aGlzLmNvbnRlbnRET00pXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUNoaWxkcmVuKHZpZXcsIHRoaXMucG9zQXRTdGFydCk7XG4gICAgICAgIHRoaXMuZGlydHkgPSBOT1RfRElSVFk7XG4gICAgfVxuICAgIHVwZGF0ZU91dGVyRGVjbyhvdXRlckRlY28pIHtcbiAgICAgICAgaWYgKHNhbWVPdXRlckRlY28ob3V0ZXJEZWNvLCB0aGlzLm91dGVyRGVjbykpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGxldCBuZWVkc1dyYXAgPSB0aGlzLm5vZGVET00ubm9kZVR5cGUgIT0gMTtcbiAgICAgICAgbGV0IG9sZERPTSA9IHRoaXMuZG9tO1xuICAgICAgICB0aGlzLmRvbSA9IHBhdGNoT3V0ZXJEZWNvKHRoaXMuZG9tLCB0aGlzLm5vZGVET00sIGNvbXB1dGVPdXRlckRlY28odGhpcy5vdXRlckRlY28sIHRoaXMubm9kZSwgbmVlZHNXcmFwKSwgY29tcHV0ZU91dGVyRGVjbyhvdXRlckRlY28sIHRoaXMubm9kZSwgbmVlZHNXcmFwKSk7XG4gICAgICAgIGlmICh0aGlzLmRvbSAhPSBvbGRET00pIHtcbiAgICAgICAgICAgIG9sZERPTS5wbVZpZXdEZXNjID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgdGhpcy5kb20ucG1WaWV3RGVzYyA9IHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vdXRlckRlY28gPSBvdXRlckRlY287XG4gICAgfVxuICAgIC8vIE1hcmsgdGhpcyBub2RlIGFzIGJlaW5nIHRoZSBzZWxlY3RlZCBub2RlLlxuICAgIHNlbGVjdE5vZGUoKSB7XG4gICAgICAgIGlmICh0aGlzLm5vZGVET00ubm9kZVR5cGUgPT0gMSlcbiAgICAgICAgICAgIHRoaXMubm9kZURPTS5jbGFzc0xpc3QuYWRkKFwiUHJvc2VNaXJyb3Itc2VsZWN0ZWRub2RlXCIpO1xuICAgICAgICBpZiAodGhpcy5jb250ZW50RE9NIHx8ICF0aGlzLm5vZGUudHlwZS5zcGVjLmRyYWdnYWJsZSlcbiAgICAgICAgICAgIHRoaXMuZG9tLmRyYWdnYWJsZSA9IHRydWU7XG4gICAgfVxuICAgIC8vIFJlbW92ZSBzZWxlY3RlZCBub2RlIG1hcmtpbmcgZnJvbSB0aGlzIG5vZGUuXG4gICAgZGVzZWxlY3ROb2RlKCkge1xuICAgICAgICBpZiAodGhpcy5ub2RlRE9NLm5vZGVUeXBlID09IDEpXG4gICAgICAgICAgICB0aGlzLm5vZGVET00uY2xhc3NMaXN0LnJlbW92ZShcIlByb3NlTWlycm9yLXNlbGVjdGVkbm9kZVwiKTtcbiAgICAgICAgaWYgKHRoaXMuY29udGVudERPTSB8fCAhdGhpcy5ub2RlLnR5cGUuc3BlYy5kcmFnZ2FibGUpXG4gICAgICAgICAgICB0aGlzLmRvbS5yZW1vdmVBdHRyaWJ1dGUoXCJkcmFnZ2FibGVcIik7XG4gICAgfVxuICAgIGdldCBkb21BdG9tKCkgeyByZXR1cm4gdGhpcy5ub2RlLmlzQXRvbTsgfVxufVxuLy8gQ3JlYXRlIGEgdmlldyBkZXNjIGZvciB0aGUgdG9wLWxldmVsIGRvY3VtZW50IG5vZGUsIHRvIGJlIGV4cG9ydGVkXG4vLyBhbmQgdXNlZCBieSB0aGUgdmlldyBjbGFzcy5cbmZ1bmN0aW9uIGRvY1ZpZXdEZXNjKGRvYywgb3V0ZXJEZWNvLCBpbm5lckRlY28sIGRvbSwgdmlldykge1xuICAgIGFwcGx5T3V0ZXJEZWNvKGRvbSwgb3V0ZXJEZWNvLCBkb2MpO1xuICAgIHJldHVybiBuZXcgTm9kZVZpZXdEZXNjKHVuZGVmaW5lZCwgZG9jLCBvdXRlckRlY28sIGlubmVyRGVjbywgZG9tLCBkb20sIGRvbSwgdmlldywgMCk7XG59XG5jbGFzcyBUZXh0Vmlld0Rlc2MgZXh0ZW5kcyBOb2RlVmlld0Rlc2Mge1xuICAgIGNvbnN0cnVjdG9yKHBhcmVudCwgbm9kZSwgb3V0ZXJEZWNvLCBpbm5lckRlY28sIGRvbSwgbm9kZURPTSwgdmlldykge1xuICAgICAgICBzdXBlcihwYXJlbnQsIG5vZGUsIG91dGVyRGVjbywgaW5uZXJEZWNvLCBkb20sIG51bGwsIG5vZGVET00sIHZpZXcsIDApO1xuICAgIH1cbiAgICBwYXJzZVJ1bGUoKSB7XG4gICAgICAgIGxldCBza2lwID0gdGhpcy5ub2RlRE9NLnBhcmVudE5vZGU7XG4gICAgICAgIHdoaWxlIChza2lwICYmIHNraXAgIT0gdGhpcy5kb20gJiYgIXNraXAucG1Jc0RlY28pXG4gICAgICAgICAgICBza2lwID0gc2tpcC5wYXJlbnROb2RlO1xuICAgICAgICByZXR1cm4geyBza2lwOiAoc2tpcCB8fCB0cnVlKSB9O1xuICAgIH1cbiAgICB1cGRhdGUobm9kZSwgb3V0ZXJEZWNvLCBpbm5lckRlY28sIHZpZXcpIHtcbiAgICAgICAgaWYgKHRoaXMuZGlydHkgPT0gTk9ERV9ESVJUWSB8fCAodGhpcy5kaXJ0eSAhPSBOT1RfRElSVFkgJiYgIXRoaXMuaW5QYXJlbnQoKSkgfHxcbiAgICAgICAgICAgICFub2RlLnNhbWVNYXJrdXAodGhpcy5ub2RlKSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgdGhpcy51cGRhdGVPdXRlckRlY28ob3V0ZXJEZWNvKTtcbiAgICAgICAgaWYgKCh0aGlzLmRpcnR5ICE9IE5PVF9ESVJUWSB8fCBub2RlLnRleHQgIT0gdGhpcy5ub2RlLnRleHQpICYmIG5vZGUudGV4dCAhPSB0aGlzLm5vZGVET00ubm9kZVZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLm5vZGVET00ubm9kZVZhbHVlID0gbm9kZS50ZXh0O1xuICAgICAgICAgICAgaWYgKHZpZXcudHJhY2tXcml0ZXMgPT0gdGhpcy5ub2RlRE9NKVxuICAgICAgICAgICAgICAgIHZpZXcudHJhY2tXcml0ZXMgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubm9kZSA9IG5vZGU7XG4gICAgICAgIHRoaXMuZGlydHkgPSBOT1RfRElSVFk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpblBhcmVudCgpIHtcbiAgICAgICAgbGV0IHBhcmVudERPTSA9IHRoaXMucGFyZW50LmNvbnRlbnRET007XG4gICAgICAgIGZvciAobGV0IG4gPSB0aGlzLm5vZGVET007IG47IG4gPSBuLnBhcmVudE5vZGUpXG4gICAgICAgICAgICBpZiAobiA9PSBwYXJlbnRET00pXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZG9tRnJvbVBvcyhwb3MpIHtcbiAgICAgICAgcmV0dXJuIHsgbm9kZTogdGhpcy5ub2RlRE9NLCBvZmZzZXQ6IHBvcyB9O1xuICAgIH1cbiAgICBsb2NhbFBvc0Zyb21ET00oZG9tLCBvZmZzZXQsIGJpYXMpIHtcbiAgICAgICAgaWYgKGRvbSA9PSB0aGlzLm5vZGVET00pXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wb3NBdFN0YXJ0ICsgTWF0aC5taW4ob2Zmc2V0LCB0aGlzLm5vZGUudGV4dC5sZW5ndGgpO1xuICAgICAgICByZXR1cm4gc3VwZXIubG9jYWxQb3NGcm9tRE9NKGRvbSwgb2Zmc2V0LCBiaWFzKTtcbiAgICB9XG4gICAgaWdub3JlTXV0YXRpb24obXV0YXRpb24pIHtcbiAgICAgICAgcmV0dXJuIG11dGF0aW9uLnR5cGUgIT0gXCJjaGFyYWN0ZXJEYXRhXCIgJiYgbXV0YXRpb24udHlwZSAhPSBcInNlbGVjdGlvblwiO1xuICAgIH1cbiAgICBzbGljZShmcm9tLCB0bywgdmlldykge1xuICAgICAgICBsZXQgbm9kZSA9IHRoaXMubm9kZS5jdXQoZnJvbSwgdG8pLCBkb20gPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShub2RlLnRleHQpO1xuICAgICAgICByZXR1cm4gbmV3IFRleHRWaWV3RGVzYyh0aGlzLnBhcmVudCwgbm9kZSwgdGhpcy5vdXRlckRlY28sIHRoaXMuaW5uZXJEZWNvLCBkb20sIGRvbSwgdmlldyk7XG4gICAgfVxuICAgIG1hcmtEaXJ0eShmcm9tLCB0bykge1xuICAgICAgICBzdXBlci5tYXJrRGlydHkoZnJvbSwgdG8pO1xuICAgICAgICBpZiAodGhpcy5kb20gIT0gdGhpcy5ub2RlRE9NICYmIChmcm9tID09IDAgfHwgdG8gPT0gdGhpcy5ub2RlRE9NLm5vZGVWYWx1ZS5sZW5ndGgpKVxuICAgICAgICAgICAgdGhpcy5kaXJ0eSA9IE5PREVfRElSVFk7XG4gICAgfVxuICAgIGdldCBkb21BdG9tKCkgeyByZXR1cm4gZmFsc2U7IH1cbn1cbi8vIEEgZHVtbXkgZGVzYyB1c2VkIHRvIHRhZyB0cmFpbGluZyBCUiBvciBJTUcgbm9kZXMgY3JlYXRlZCB0byB3b3JrXG4vLyBhcm91bmQgY29udGVudEVkaXRhYmxlIHRlcnJpYmxlbmVzcy5cbmNsYXNzIFRyYWlsaW5nSGFja1ZpZXdEZXNjIGV4dGVuZHMgVmlld0Rlc2Mge1xuICAgIHBhcnNlUnVsZSgpIHsgcmV0dXJuIHsgaWdub3JlOiB0cnVlIH07IH1cbiAgICBtYXRjaGVzSGFjayhub2RlTmFtZSkgeyByZXR1cm4gdGhpcy5kaXJ0eSA9PSBOT1RfRElSVFkgJiYgdGhpcy5kb20ubm9kZU5hbWUgPT0gbm9kZU5hbWU7IH1cbiAgICBnZXQgZG9tQXRvbSgpIHsgcmV0dXJuIHRydWU7IH1cbiAgICBnZXQgaWdub3JlRm9yQ29vcmRzKCkgeyByZXR1cm4gdGhpcy5kb20ubm9kZU5hbWUgPT0gXCJJTUdcIjsgfVxufVxuLy8gQSBzZXBhcmF0ZSBzdWJjbGFzcyBpcyB1c2VkIGZvciBjdXN0b21pemVkIG5vZGUgdmlld3MsIHNvIHRoYXQgdGhlXG4vLyBleHRyYSBjaGVja3Mgb25seSBoYXZlIHRvIGJlIG1hZGUgZm9yIG5vZGVzIHRoYXQgYXJlIGFjdHVhbGx5XG4vLyBjdXN0b21pemVkLlxuY2xhc3MgQ3VzdG9tTm9kZVZpZXdEZXNjIGV4dGVuZHMgTm9kZVZpZXdEZXNjIHtcbiAgICBjb25zdHJ1Y3RvcihwYXJlbnQsIG5vZGUsIG91dGVyRGVjbywgaW5uZXJEZWNvLCBkb20sIGNvbnRlbnRET00sIG5vZGVET00sIHNwZWMsIHZpZXcsIHBvcykge1xuICAgICAgICBzdXBlcihwYXJlbnQsIG5vZGUsIG91dGVyRGVjbywgaW5uZXJEZWNvLCBkb20sIGNvbnRlbnRET00sIG5vZGVET00sIHZpZXcsIHBvcyk7XG4gICAgICAgIHRoaXMuc3BlYyA9IHNwZWM7XG4gICAgfVxuICAgIC8vIEEgY3VzdG9tIGB1cGRhdGVgIG1ldGhvZCBnZXRzIHRvIGRlY2lkZSB3aGV0aGVyIHRoZSB1cGRhdGUgZ29lc1xuICAgIC8vIHRocm91Z2guIElmIGl0IGRvZXMsIGFuZCB0aGVyZSdzIGEgYGNvbnRlbnRET01gIG5vZGUsIG91ciBsb2dpY1xuICAgIC8vIHVwZGF0ZXMgdGhlIGNoaWxkcmVuLlxuICAgIHVwZGF0ZShub2RlLCBvdXRlckRlY28sIGlubmVyRGVjbywgdmlldykge1xuICAgICAgICBpZiAodGhpcy5kaXJ0eSA9PSBOT0RFX0RJUlRZKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAodGhpcy5zcGVjLnVwZGF0ZSkge1xuICAgICAgICAgICAgbGV0IHJlc3VsdCA9IHRoaXMuc3BlYy51cGRhdGUobm9kZSwgb3V0ZXJEZWNvLCBpbm5lckRlY28pO1xuICAgICAgICAgICAgaWYgKHJlc3VsdClcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUlubmVyKG5vZGUsIG91dGVyRGVjbywgaW5uZXJEZWNvLCB2aWV3KTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIXRoaXMuY29udGVudERPTSAmJiAhbm9kZS5pc0xlYWYpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBzdXBlci51cGRhdGUobm9kZSwgb3V0ZXJEZWNvLCBpbm5lckRlY28sIHZpZXcpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNlbGVjdE5vZGUoKSB7XG4gICAgICAgIHRoaXMuc3BlYy5zZWxlY3ROb2RlID8gdGhpcy5zcGVjLnNlbGVjdE5vZGUoKSA6IHN1cGVyLnNlbGVjdE5vZGUoKTtcbiAgICB9XG4gICAgZGVzZWxlY3ROb2RlKCkge1xuICAgICAgICB0aGlzLnNwZWMuZGVzZWxlY3ROb2RlID8gdGhpcy5zcGVjLmRlc2VsZWN0Tm9kZSgpIDogc3VwZXIuZGVzZWxlY3ROb2RlKCk7XG4gICAgfVxuICAgIHNldFNlbGVjdGlvbihhbmNob3IsIGhlYWQsIHJvb3QsIGZvcmNlKSB7XG4gICAgICAgIHRoaXMuc3BlYy5zZXRTZWxlY3Rpb24gPyB0aGlzLnNwZWMuc2V0U2VsZWN0aW9uKGFuY2hvciwgaGVhZCwgcm9vdClcbiAgICAgICAgICAgIDogc3VwZXIuc2V0U2VsZWN0aW9uKGFuY2hvciwgaGVhZCwgcm9vdCwgZm9yY2UpO1xuICAgIH1cbiAgICBkZXN0cm95KCkge1xuICAgICAgICBpZiAodGhpcy5zcGVjLmRlc3Ryb3kpXG4gICAgICAgICAgICB0aGlzLnNwZWMuZGVzdHJveSgpO1xuICAgICAgICBzdXBlci5kZXN0cm95KCk7XG4gICAgfVxuICAgIHN0b3BFdmVudChldmVudCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zcGVjLnN0b3BFdmVudCA/IHRoaXMuc3BlYy5zdG9wRXZlbnQoZXZlbnQpIDogZmFsc2U7XG4gICAgfVxuICAgIGlnbm9yZU11dGF0aW9uKG11dGF0aW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNwZWMuaWdub3JlTXV0YXRpb24gPyB0aGlzLnNwZWMuaWdub3JlTXV0YXRpb24obXV0YXRpb24pIDogc3VwZXIuaWdub3JlTXV0YXRpb24obXV0YXRpb24pO1xuICAgIH1cbn1cbi8vIFN5bmMgdGhlIGNvbnRlbnQgb2YgdGhlIGdpdmVuIERPTSBub2RlIHdpdGggdGhlIG5vZGVzIGFzc29jaWF0ZWRcbi8vIHdpdGggdGhlIGdpdmVuIGFycmF5IG9mIHZpZXcgZGVzY3MsIHJlY3Vyc2luZyBpbnRvIG1hcmsgZGVzY3Ncbi8vIGJlY2F1c2UgdGhpcyBzaG91bGQgc3luYyB0aGUgc3VidHJlZSBmb3IgYSB3aG9sZSBub2RlIGF0IGEgdGltZS5cbmZ1bmN0aW9uIHJlbmRlckRlc2NzKHBhcmVudERPTSwgZGVzY3MsIHZpZXcpIHtcbiAgICBsZXQgZG9tID0gcGFyZW50RE9NLmZpcnN0Q2hpbGQsIHdyaXR0ZW4gPSBmYWxzZTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRlc2NzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCBkZXNjID0gZGVzY3NbaV0sIGNoaWxkRE9NID0gZGVzYy5kb207XG4gICAgICAgIGlmIChjaGlsZERPTS5wYXJlbnROb2RlID09IHBhcmVudERPTSkge1xuICAgICAgICAgICAgd2hpbGUgKGNoaWxkRE9NICE9IGRvbSkge1xuICAgICAgICAgICAgICAgIGRvbSA9IHJtKGRvbSk7XG4gICAgICAgICAgICAgICAgd3JpdHRlbiA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkb20gPSBkb20ubmV4dFNpYmxpbmc7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB3cml0dGVuID0gdHJ1ZTtcbiAgICAgICAgICAgIHBhcmVudERPTS5pbnNlcnRCZWZvcmUoY2hpbGRET00sIGRvbSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRlc2MgaW5zdGFuY2VvZiBNYXJrVmlld0Rlc2MpIHtcbiAgICAgICAgICAgIGxldCBwb3MgPSBkb20gPyBkb20ucHJldmlvdXNTaWJsaW5nIDogcGFyZW50RE9NLmxhc3RDaGlsZDtcbiAgICAgICAgICAgIHJlbmRlckRlc2NzKGRlc2MuY29udGVudERPTSwgZGVzYy5jaGlsZHJlbiwgdmlldyk7XG4gICAgICAgICAgICBkb20gPSBwb3MgPyBwb3MubmV4dFNpYmxpbmcgOiBwYXJlbnRET00uZmlyc3RDaGlsZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICB3aGlsZSAoZG9tKSB7XG4gICAgICAgIGRvbSA9IHJtKGRvbSk7XG4gICAgICAgIHdyaXR0ZW4gPSB0cnVlO1xuICAgIH1cbiAgICBpZiAod3JpdHRlbiAmJiB2aWV3LnRyYWNrV3JpdGVzID09IHBhcmVudERPTSlcbiAgICAgICAgdmlldy50cmFja1dyaXRlcyA9IG51bGw7XG59XG5jb25zdCBPdXRlckRlY29MZXZlbCA9IGZ1bmN0aW9uIChub2RlTmFtZSkge1xuICAgIGlmIChub2RlTmFtZSlcbiAgICAgICAgdGhpcy5ub2RlTmFtZSA9IG5vZGVOYW1lO1xufTtcbk91dGVyRGVjb0xldmVsLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5jb25zdCBub0RlY28gPSBbbmV3IE91dGVyRGVjb0xldmVsXTtcbmZ1bmN0aW9uIGNvbXB1dGVPdXRlckRlY28ob3V0ZXJEZWNvLCBub2RlLCBuZWVkc1dyYXApIHtcbiAgICBpZiAob3V0ZXJEZWNvLmxlbmd0aCA9PSAwKVxuICAgICAgICByZXR1cm4gbm9EZWNvO1xuICAgIGxldCB0b3AgPSBuZWVkc1dyYXAgPyBub0RlY29bMF0gOiBuZXcgT3V0ZXJEZWNvTGV2ZWwsIHJlc3VsdCA9IFt0b3BdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb3V0ZXJEZWNvLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCBhdHRycyA9IG91dGVyRGVjb1tpXS50eXBlLmF0dHJzO1xuICAgICAgICBpZiAoIWF0dHJzKVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIGlmIChhdHRycy5ub2RlTmFtZSlcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHRvcCA9IG5ldyBPdXRlckRlY29MZXZlbChhdHRycy5ub2RlTmFtZSkpO1xuICAgICAgICBmb3IgKGxldCBuYW1lIGluIGF0dHJzKSB7XG4gICAgICAgICAgICBsZXQgdmFsID0gYXR0cnNbbmFtZV07XG4gICAgICAgICAgICBpZiAodmFsID09IG51bGwpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICBpZiAobmVlZHNXcmFwICYmIHJlc3VsdC5sZW5ndGggPT0gMSlcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh0b3AgPSBuZXcgT3V0ZXJEZWNvTGV2ZWwobm9kZS5pc0lubGluZSA/IFwic3BhblwiIDogXCJkaXZcIikpO1xuICAgICAgICAgICAgaWYgKG5hbWUgPT0gXCJjbGFzc1wiKVxuICAgICAgICAgICAgICAgIHRvcC5jbGFzcyA9ICh0b3AuY2xhc3MgPyB0b3AuY2xhc3MgKyBcIiBcIiA6IFwiXCIpICsgdmFsO1xuICAgICAgICAgICAgZWxzZSBpZiAobmFtZSA9PSBcInN0eWxlXCIpXG4gICAgICAgICAgICAgICAgdG9wLnN0eWxlID0gKHRvcC5zdHlsZSA/IHRvcC5zdHlsZSArIFwiO1wiIDogXCJcIikgKyB2YWw7XG4gICAgICAgICAgICBlbHNlIGlmIChuYW1lICE9IFwibm9kZU5hbWVcIilcbiAgICAgICAgICAgICAgICB0b3BbbmFtZV0gPSB2YWw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIHBhdGNoT3V0ZXJEZWNvKG91dGVyRE9NLCBub2RlRE9NLCBwcmV2Q29tcHV0ZWQsIGN1ckNvbXB1dGVkKSB7XG4gICAgLy8gU2hvcnRjdXQgZm9yIHRyaXZpYWwgY2FzZVxuICAgIGlmIChwcmV2Q29tcHV0ZWQgPT0gbm9EZWNvICYmIGN1ckNvbXB1dGVkID09IG5vRGVjbylcbiAgICAgICAgcmV0dXJuIG5vZGVET007XG4gICAgbGV0IGN1ckRPTSA9IG5vZGVET007XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjdXJDb21wdXRlZC5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgZGVjbyA9IGN1ckNvbXB1dGVkW2ldLCBwcmV2ID0gcHJldkNvbXB1dGVkW2ldO1xuICAgICAgICBpZiAoaSkge1xuICAgICAgICAgICAgbGV0IHBhcmVudDtcbiAgICAgICAgICAgIGlmIChwcmV2ICYmIHByZXYubm9kZU5hbWUgPT0gZGVjby5ub2RlTmFtZSAmJiBjdXJET00gIT0gb3V0ZXJET00gJiZcbiAgICAgICAgICAgICAgICAocGFyZW50ID0gY3VyRE9NLnBhcmVudE5vZGUpICYmIHBhcmVudC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09IGRlY28ubm9kZU5hbWUpIHtcbiAgICAgICAgICAgICAgICBjdXJET00gPSBwYXJlbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBwYXJlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGRlY28ubm9kZU5hbWUpO1xuICAgICAgICAgICAgICAgIHBhcmVudC5wbUlzRGVjbyA9IHRydWU7XG4gICAgICAgICAgICAgICAgcGFyZW50LmFwcGVuZENoaWxkKGN1ckRPTSk7XG4gICAgICAgICAgICAgICAgcHJldiA9IG5vRGVjb1swXTtcbiAgICAgICAgICAgICAgICBjdXJET00gPSBwYXJlbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcGF0Y2hBdHRyaWJ1dGVzKGN1ckRPTSwgcHJldiB8fCBub0RlY29bMF0sIGRlY28pO1xuICAgIH1cbiAgICByZXR1cm4gY3VyRE9NO1xufVxuZnVuY3Rpb24gcGF0Y2hBdHRyaWJ1dGVzKGRvbSwgcHJldiwgY3VyKSB7XG4gICAgZm9yIChsZXQgbmFtZSBpbiBwcmV2KVxuICAgICAgICBpZiAobmFtZSAhPSBcImNsYXNzXCIgJiYgbmFtZSAhPSBcInN0eWxlXCIgJiYgbmFtZSAhPSBcIm5vZGVOYW1lXCIgJiYgIShuYW1lIGluIGN1cikpXG4gICAgICAgICAgICBkb20ucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgIGZvciAobGV0IG5hbWUgaW4gY3VyKVxuICAgICAgICBpZiAobmFtZSAhPSBcImNsYXNzXCIgJiYgbmFtZSAhPSBcInN0eWxlXCIgJiYgbmFtZSAhPSBcIm5vZGVOYW1lXCIgJiYgY3VyW25hbWVdICE9IHByZXZbbmFtZV0pXG4gICAgICAgICAgICBkb20uc2V0QXR0cmlidXRlKG5hbWUsIGN1cltuYW1lXSk7XG4gICAgaWYgKHByZXYuY2xhc3MgIT0gY3VyLmNsYXNzKSB7XG4gICAgICAgIGxldCBwcmV2TGlzdCA9IHByZXYuY2xhc3MgPyBwcmV2LmNsYXNzLnNwbGl0KFwiIFwiKS5maWx0ZXIoQm9vbGVhbikgOiBbXTtcbiAgICAgICAgbGV0IGN1ckxpc3QgPSBjdXIuY2xhc3MgPyBjdXIuY2xhc3Muc3BsaXQoXCIgXCIpLmZpbHRlcihCb29sZWFuKSA6IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHByZXZMaXN0Lmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgaWYgKGN1ckxpc3QuaW5kZXhPZihwcmV2TGlzdFtpXSkgPT0gLTEpXG4gICAgICAgICAgICAgICAgZG9tLmNsYXNzTGlzdC5yZW1vdmUocHJldkxpc3RbaV0pO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGN1ckxpc3QubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICBpZiAocHJldkxpc3QuaW5kZXhPZihjdXJMaXN0W2ldKSA9PSAtMSlcbiAgICAgICAgICAgICAgICBkb20uY2xhc3NMaXN0LmFkZChjdXJMaXN0W2ldKTtcbiAgICAgICAgaWYgKGRvbS5jbGFzc0xpc3QubGVuZ3RoID09IDApXG4gICAgICAgICAgICBkb20ucmVtb3ZlQXR0cmlidXRlKFwiY2xhc3NcIik7XG4gICAgfVxuICAgIGlmIChwcmV2LnN0eWxlICE9IGN1ci5zdHlsZSkge1xuICAgICAgICBpZiAocHJldi5zdHlsZSkge1xuICAgICAgICAgICAgbGV0IHByb3AgPSAvXFxzKihbXFx3XFwtXFx4YTEtXFx1ZmZmZl0rKVxccyo6KD86XCIoPzpcXFxcLnxbXlwiXSkqXCJ8Jyg/OlxcXFwufFteJ10pKid8XFwoLio/XFwpfFteO10pKi9nLCBtO1xuICAgICAgICAgICAgd2hpbGUgKG0gPSBwcm9wLmV4ZWMocHJldi5zdHlsZSkpXG4gICAgICAgICAgICAgICAgZG9tLnN0eWxlLnJlbW92ZVByb3BlcnR5KG1bMV0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjdXIuc3R5bGUpXG4gICAgICAgICAgICBkb20uc3R5bGUuY3NzVGV4dCArPSBjdXIuc3R5bGU7XG4gICAgfVxufVxuZnVuY3Rpb24gYXBwbHlPdXRlckRlY28oZG9tLCBkZWNvLCBub2RlKSB7XG4gICAgcmV0dXJuIHBhdGNoT3V0ZXJEZWNvKGRvbSwgZG9tLCBub0RlY28sIGNvbXB1dGVPdXRlckRlY28oZGVjbywgbm9kZSwgZG9tLm5vZGVUeXBlICE9IDEpKTtcbn1cbmZ1bmN0aW9uIHNhbWVPdXRlckRlY28oYSwgYikge1xuICAgIGlmIChhLmxlbmd0aCAhPSBiLmxlbmd0aClcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKylcbiAgICAgICAgaWYgKCFhW2ldLnR5cGUuZXEoYltpXS50eXBlKSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gdHJ1ZTtcbn1cbi8vIFJlbW92ZSBhIERPTSBub2RlIGFuZCByZXR1cm4gaXRzIG5leHQgc2libGluZy5cbmZ1bmN0aW9uIHJtKGRvbSkge1xuICAgIGxldCBuZXh0ID0gZG9tLm5leHRTaWJsaW5nO1xuICAgIGRvbS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGRvbSk7XG4gICAgcmV0dXJuIG5leHQ7XG59XG4vLyBIZWxwZXIgY2xhc3MgZm9yIGluY3JlbWVudGFsbHkgdXBkYXRpbmcgYSB0cmVlIG9mIG1hcmsgZGVzY3MgYW5kXG4vLyB0aGUgd2lkZ2V0IGFuZCBub2RlIGRlc2NzIGluc2lkZSBvZiB0aGVtLlxuY2xhc3MgVmlld1RyZWVVcGRhdGVyIHtcbiAgICBjb25zdHJ1Y3Rvcih0b3AsIGxvY2spIHtcbiAgICAgICAgdGhpcy5sb2NrID0gbG9jaztcbiAgICAgICAgLy8gSW5kZXggaW50byBgdGhpcy50b3BgJ3MgY2hpbGQgYXJyYXksIHJlcHJlc2VudHMgdGhlIGN1cnJlbnRcbiAgICAgICAgLy8gdXBkYXRlIHBvc2l0aW9uLlxuICAgICAgICB0aGlzLmluZGV4ID0gMDtcbiAgICAgICAgLy8gV2hlbiBlbnRlcmluZyBhIG1hcmssIHRoZSBjdXJyZW50IHRvcCBhbmQgaW5kZXggYXJlIHB1c2hlZFxuICAgICAgICAvLyBvbnRvIHRoaXMuXG4gICAgICAgIHRoaXMuc3RhY2sgPSBbXTtcbiAgICAgICAgLy8gVHJhY2tzIHdoZXRoZXIgYW55dGhpbmcgd2FzIGNoYW5nZWRcbiAgICAgICAgdGhpcy5jaGFuZ2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMudG9wID0gdG9wO1xuICAgICAgICB0aGlzLnByZU1hdGNoID0gcHJlTWF0Y2godG9wLm5vZGUuY29udGVudCwgdG9wKTtcbiAgICB9XG4gICAgLy8gRGVzdHJveSBhbmQgcmVtb3ZlIHRoZSBjaGlsZHJlbiBiZXR3ZWVuIHRoZSBnaXZlbiBpbmRpY2VzIGluXG4gICAgLy8gYHRoaXMudG9wYC5cbiAgICBkZXN0cm95QmV0d2VlbihzdGFydCwgZW5kKSB7XG4gICAgICAgIGlmIChzdGFydCA9PSBlbmQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGZvciAobGV0IGkgPSBzdGFydDsgaSA8IGVuZDsgaSsrKVxuICAgICAgICAgICAgdGhpcy50b3AuY2hpbGRyZW5baV0uZGVzdHJveSgpO1xuICAgICAgICB0aGlzLnRvcC5jaGlsZHJlbi5zcGxpY2Uoc3RhcnQsIGVuZCAtIHN0YXJ0KTtcbiAgICAgICAgdGhpcy5jaGFuZ2VkID0gdHJ1ZTtcbiAgICB9XG4gICAgLy8gRGVzdHJveSBhbGwgcmVtYWluaW5nIGNoaWxkcmVuIGluIGB0aGlzLnRvcGAuXG4gICAgZGVzdHJveVJlc3QoKSB7XG4gICAgICAgIHRoaXMuZGVzdHJveUJldHdlZW4odGhpcy5pbmRleCwgdGhpcy50b3AuY2hpbGRyZW4ubGVuZ3RoKTtcbiAgICB9XG4gICAgLy8gU3luYyB0aGUgY3VycmVudCBzdGFjayBvZiBtYXJrIGRlc2NzIHdpdGggdGhlIGdpdmVuIGFycmF5IG9mXG4gICAgLy8gbWFya3MsIHJldXNpbmcgZXhpc3RpbmcgbWFyayBkZXNjcyB3aGVuIHBvc3NpYmxlLlxuICAgIHN5bmNUb01hcmtzKG1hcmtzLCBpbmxpbmUsIHZpZXcpIHtcbiAgICAgICAgbGV0IGtlZXAgPSAwLCBkZXB0aCA9IHRoaXMuc3RhY2subGVuZ3RoID4+IDE7XG4gICAgICAgIGxldCBtYXhLZWVwID0gTWF0aC5taW4oZGVwdGgsIG1hcmtzLmxlbmd0aCk7XG4gICAgICAgIHdoaWxlIChrZWVwIDwgbWF4S2VlcCAmJlxuICAgICAgICAgICAgKGtlZXAgPT0gZGVwdGggLSAxID8gdGhpcy50b3AgOiB0aGlzLnN0YWNrWyhrZWVwICsgMSkgPDwgMV0pXG4gICAgICAgICAgICAgICAgLm1hdGNoZXNNYXJrKG1hcmtzW2tlZXBdKSAmJiBtYXJrc1trZWVwXS50eXBlLnNwZWMuc3Bhbm5pbmcgIT09IGZhbHNlKVxuICAgICAgICAgICAga2VlcCsrO1xuICAgICAgICB3aGlsZSAoa2VlcCA8IGRlcHRoKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3Ryb3lSZXN0KCk7XG4gICAgICAgICAgICB0aGlzLnRvcC5kaXJ0eSA9IE5PVF9ESVJUWTtcbiAgICAgICAgICAgIHRoaXMuaW5kZXggPSB0aGlzLnN0YWNrLnBvcCgpO1xuICAgICAgICAgICAgdGhpcy50b3AgPSB0aGlzLnN0YWNrLnBvcCgpO1xuICAgICAgICAgICAgZGVwdGgtLTtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoZGVwdGggPCBtYXJrcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhY2sucHVzaCh0aGlzLnRvcCwgdGhpcy5pbmRleCArIDEpO1xuICAgICAgICAgICAgbGV0IGZvdW5kID0gLTE7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gdGhpcy5pbmRleDsgaSA8IE1hdGgubWluKHRoaXMuaW5kZXggKyAzLCB0aGlzLnRvcC5jaGlsZHJlbi5sZW5ndGgpOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy50b3AuY2hpbGRyZW5baV0ubWF0Y2hlc01hcmsobWFya3NbZGVwdGhdKSkge1xuICAgICAgICAgICAgICAgICAgICBmb3VuZCA9IGk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChmb3VuZCA+IC0xKSB7XG4gICAgICAgICAgICAgICAgaWYgKGZvdW5kID4gdGhpcy5pbmRleCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYW5nZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRlc3Ryb3lCZXR3ZWVuKHRoaXMuaW5kZXgsIGZvdW5kKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy50b3AgPSB0aGlzLnRvcC5jaGlsZHJlblt0aGlzLmluZGV4XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGxldCBtYXJrRGVzYyA9IE1hcmtWaWV3RGVzYy5jcmVhdGUodGhpcy50b3AsIG1hcmtzW2RlcHRoXSwgaW5saW5lLCB2aWV3KTtcbiAgICAgICAgICAgICAgICB0aGlzLnRvcC5jaGlsZHJlbi5zcGxpY2UodGhpcy5pbmRleCwgMCwgbWFya0Rlc2MpO1xuICAgICAgICAgICAgICAgIHRoaXMudG9wID0gbWFya0Rlc2M7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuaW5kZXggPSAwO1xuICAgICAgICAgICAgZGVwdGgrKztcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBUcnkgdG8gZmluZCBhIG5vZGUgZGVzYyBtYXRjaGluZyB0aGUgZ2l2ZW4gZGF0YS4gU2tpcCBvdmVyIGl0IGFuZFxuICAgIC8vIHJldHVybiB0cnVlIHdoZW4gc3VjY2Vzc2Z1bC5cbiAgICBmaW5kTm9kZU1hdGNoKG5vZGUsIG91dGVyRGVjbywgaW5uZXJEZWNvLCBpbmRleCkge1xuICAgICAgICBsZXQgZm91bmQgPSAtMSwgdGFyZ2V0RGVzYztcbiAgICAgICAgaWYgKGluZGV4ID49IHRoaXMucHJlTWF0Y2guaW5kZXggJiZcbiAgICAgICAgICAgICh0YXJnZXREZXNjID0gdGhpcy5wcmVNYXRjaC5tYXRjaGVzW2luZGV4IC0gdGhpcy5wcmVNYXRjaC5pbmRleF0pLnBhcmVudCA9PSB0aGlzLnRvcCAmJlxuICAgICAgICAgICAgdGFyZ2V0RGVzYy5tYXRjaGVzTm9kZShub2RlLCBvdXRlckRlY28sIGlubmVyRGVjbykpIHtcbiAgICAgICAgICAgIGZvdW5kID0gdGhpcy50b3AuY2hpbGRyZW4uaW5kZXhPZih0YXJnZXREZXNjLCB0aGlzLmluZGV4KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSB0aGlzLmluZGV4LCBlID0gTWF0aC5taW4odGhpcy50b3AuY2hpbGRyZW4ubGVuZ3RoLCBpICsgNSk7IGkgPCBlOyBpKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgY2hpbGQgPSB0aGlzLnRvcC5jaGlsZHJlbltpXTtcbiAgICAgICAgICAgICAgICBpZiAoY2hpbGQubWF0Y2hlc05vZGUobm9kZSwgb3V0ZXJEZWNvLCBpbm5lckRlY28pICYmICF0aGlzLnByZU1hdGNoLm1hdGNoZWQuaGFzKGNoaWxkKSkge1xuICAgICAgICAgICAgICAgICAgICBmb3VuZCA9IGk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZm91bmQgPCAwKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB0aGlzLmRlc3Ryb3lCZXR3ZWVuKHRoaXMuaW5kZXgsIGZvdW5kKTtcbiAgICAgICAgdGhpcy5pbmRleCsrO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgdXBkYXRlTm9kZUF0KG5vZGUsIG91dGVyRGVjbywgaW5uZXJEZWNvLCBpbmRleCwgdmlldykge1xuICAgICAgICBsZXQgY2hpbGQgPSB0aGlzLnRvcC5jaGlsZHJlbltpbmRleF07XG4gICAgICAgIGlmIChjaGlsZC5kaXJ0eSA9PSBOT0RFX0RJUlRZICYmIGNoaWxkLmRvbSA9PSBjaGlsZC5jb250ZW50RE9NKVxuICAgICAgICAgICAgY2hpbGQuZGlydHkgPSBDT05URU5UX0RJUlRZO1xuICAgICAgICBpZiAoIWNoaWxkLnVwZGF0ZShub2RlLCBvdXRlckRlY28sIGlubmVyRGVjbywgdmlldykpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIHRoaXMuZGVzdHJveUJldHdlZW4odGhpcy5pbmRleCwgaW5kZXgpO1xuICAgICAgICB0aGlzLmluZGV4ID0gaW5kZXggKyAxO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgZmluZEluZGV4V2l0aENoaWxkKGRvbU5vZGUpIHtcbiAgICAgICAgZm9yICg7Oykge1xuICAgICAgICAgICAgbGV0IHBhcmVudCA9IGRvbU5vZGUucGFyZW50Tm9kZTtcbiAgICAgICAgICAgIGlmICghcGFyZW50KVxuICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgIGlmIChwYXJlbnQgPT0gdGhpcy50b3AuY29udGVudERPTSkge1xuICAgICAgICAgICAgICAgIGxldCBkZXNjID0gZG9tTm9kZS5wbVZpZXdEZXNjO1xuICAgICAgICAgICAgICAgIGlmIChkZXNjKVxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gdGhpcy5pbmRleDsgaSA8IHRoaXMudG9wLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy50b3AuY2hpbGRyZW5baV0gPT0gZGVzYylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRvbU5vZGUgPSBwYXJlbnQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gVHJ5IHRvIHVwZGF0ZSB0aGUgbmV4dCBub2RlLCBpZiBhbnksIHRvIHRoZSBnaXZlbiBkYXRhLiBDaGVja3NcbiAgICAvLyBwcmUtbWF0Y2hlcyB0byBhdm9pZCBvdmVyd3JpdGluZyBub2RlcyB0aGF0IGNvdWxkIHN0aWxsIGJlIHVzZWQuXG4gICAgdXBkYXRlTmV4dE5vZGUobm9kZSwgb3V0ZXJEZWNvLCBpbm5lckRlY28sIHZpZXcsIGluZGV4KSB7XG4gICAgICAgIGZvciAobGV0IGkgPSB0aGlzLmluZGV4OyBpIDwgdGhpcy50b3AuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBuZXh0ID0gdGhpcy50b3AuY2hpbGRyZW5baV07XG4gICAgICAgICAgICBpZiAobmV4dCBpbnN0YW5jZW9mIE5vZGVWaWV3RGVzYykge1xuICAgICAgICAgICAgICAgIGxldCBwcmVNYXRjaCA9IHRoaXMucHJlTWF0Y2gubWF0Y2hlZC5nZXQobmV4dCk7XG4gICAgICAgICAgICAgICAgaWYgKHByZU1hdGNoICE9IG51bGwgJiYgcHJlTWF0Y2ggIT0gaW5kZXgpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICBsZXQgbmV4dERPTSA9IG5leHQuZG9tO1xuICAgICAgICAgICAgICAgIC8vIENhbid0IHVwZGF0ZSBpZiBuZXh0RE9NIGlzIG9yIGNvbnRhaW5zIHRoaXMubG9jaywgZXhjZXB0IGlmXG4gICAgICAgICAgICAgICAgLy8gaXQncyBhIHRleHQgbm9kZSB3aG9zZSBjb250ZW50IGFscmVhZHkgbWF0Y2hlcyB0aGUgbmV3IHRleHRcbiAgICAgICAgICAgICAgICAvLyBhbmQgd2hvc2UgZGVjb3JhdGlvbnMgbWF0Y2ggdGhlIG5ldyBvbmVzLlxuICAgICAgICAgICAgICAgIGxldCBsb2NrZWQgPSB0aGlzLmxvY2sgJiYgKG5leHRET00gPT0gdGhpcy5sb2NrIHx8IG5leHRET00ubm9kZVR5cGUgPT0gMSAmJiBuZXh0RE9NLmNvbnRhaW5zKHRoaXMubG9jay5wYXJlbnROb2RlKSkgJiZcbiAgICAgICAgICAgICAgICAgICAgIShub2RlLmlzVGV4dCAmJiBuZXh0Lm5vZGUgJiYgbmV4dC5ub2RlLmlzVGV4dCAmJiBuZXh0Lm5vZGVET00ubm9kZVZhbHVlID09IG5vZGUudGV4dCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dC5kaXJ0eSAhPSBOT0RFX0RJUlRZICYmIHNhbWVPdXRlckRlY28ob3V0ZXJEZWNvLCBuZXh0Lm91dGVyRGVjbykpO1xuICAgICAgICAgICAgICAgIGlmICghbG9ja2VkICYmIG5leHQudXBkYXRlKG5vZGUsIG91dGVyRGVjbywgaW5uZXJEZWNvLCB2aWV3KSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRlc3Ryb3lCZXR3ZWVuKHRoaXMuaW5kZXgsIGkpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobmV4dC5kb20gIT0gbmV4dERPTSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhbmdlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5kZXgrKztcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLy8gSW5zZXJ0IHRoZSBub2RlIGFzIGEgbmV3bHkgY3JlYXRlZCBub2RlIGRlc2MuXG4gICAgYWRkTm9kZShub2RlLCBvdXRlckRlY28sIGlubmVyRGVjbywgdmlldywgcG9zKSB7XG4gICAgICAgIHRoaXMudG9wLmNoaWxkcmVuLnNwbGljZSh0aGlzLmluZGV4KyssIDAsIE5vZGVWaWV3RGVzYy5jcmVhdGUodGhpcy50b3AsIG5vZGUsIG91dGVyRGVjbywgaW5uZXJEZWNvLCB2aWV3LCBwb3MpKTtcbiAgICAgICAgdGhpcy5jaGFuZ2VkID0gdHJ1ZTtcbiAgICB9XG4gICAgcGxhY2VXaWRnZXQod2lkZ2V0LCB2aWV3LCBwb3MpIHtcbiAgICAgICAgbGV0IG5leHQgPSB0aGlzLmluZGV4IDwgdGhpcy50b3AuY2hpbGRyZW4ubGVuZ3RoID8gdGhpcy50b3AuY2hpbGRyZW5bdGhpcy5pbmRleF0gOiBudWxsO1xuICAgICAgICBpZiAobmV4dCAmJiBuZXh0Lm1hdGNoZXNXaWRnZXQod2lkZ2V0KSAmJlxuICAgICAgICAgICAgKHdpZGdldCA9PSBuZXh0LndpZGdldCB8fCAhbmV4dC53aWRnZXQudHlwZS50b0RPTS5wYXJlbnROb2RlKSkge1xuICAgICAgICAgICAgdGhpcy5pbmRleCsrO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbGV0IGRlc2MgPSBuZXcgV2lkZ2V0Vmlld0Rlc2ModGhpcy50b3AsIHdpZGdldCwgdmlldywgcG9zKTtcbiAgICAgICAgICAgIHRoaXMudG9wLmNoaWxkcmVuLnNwbGljZSh0aGlzLmluZGV4KyssIDAsIGRlc2MpO1xuICAgICAgICAgICAgdGhpcy5jaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBNYWtlIHN1cmUgYSB0ZXh0YmxvY2sgbG9va3MgYW5kIGJlaGF2ZXMgY29ycmVjdGx5IGluXG4gICAgLy8gY29udGVudEVkaXRhYmxlLlxuICAgIGFkZFRleHRibG9ja0hhY2tzKCkge1xuICAgICAgICBsZXQgbGFzdENoaWxkID0gdGhpcy50b3AuY2hpbGRyZW5bdGhpcy5pbmRleCAtIDFdLCBwYXJlbnQgPSB0aGlzLnRvcDtcbiAgICAgICAgd2hpbGUgKGxhc3RDaGlsZCBpbnN0YW5jZW9mIE1hcmtWaWV3RGVzYykge1xuICAgICAgICAgICAgcGFyZW50ID0gbGFzdENoaWxkO1xuICAgICAgICAgICAgbGFzdENoaWxkID0gcGFyZW50LmNoaWxkcmVuW3BhcmVudC5jaGlsZHJlbi5sZW5ndGggLSAxXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWxhc3RDaGlsZCB8fCAvLyBFbXB0eSB0ZXh0YmxvY2tcbiAgICAgICAgICAgICEobGFzdENoaWxkIGluc3RhbmNlb2YgVGV4dFZpZXdEZXNjKSB8fFxuICAgICAgICAgICAgL1xcbiQvLnRlc3QobGFzdENoaWxkLm5vZGUudGV4dCkpIHtcbiAgICAgICAgICAgIC8vIEF2b2lkIGJ1Z3MgaW4gU2FmYXJpJ3MgY3Vyc29yIGRyYXdpbmcgKCMxMTY1KSBhbmQgQ2hyb21lJ3MgbW91c2Ugc2VsZWN0aW9uICgjMTE1MilcbiAgICAgICAgICAgIGlmICgoc2FmYXJpIHx8IGNocm9tZSkgJiYgbGFzdENoaWxkICYmIGxhc3RDaGlsZC5kb20uY29udGVudEVkaXRhYmxlID09IFwiZmFsc2VcIilcbiAgICAgICAgICAgICAgICB0aGlzLmFkZEhhY2tOb2RlKFwiSU1HXCIsIHBhcmVudCk7XG4gICAgICAgICAgICB0aGlzLmFkZEhhY2tOb2RlKFwiQlJcIiwgdGhpcy50b3ApO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFkZEhhY2tOb2RlKG5vZGVOYW1lLCBwYXJlbnQpIHtcbiAgICAgICAgaWYgKHBhcmVudCA9PSB0aGlzLnRvcCAmJiB0aGlzLmluZGV4IDwgcGFyZW50LmNoaWxkcmVuLmxlbmd0aCAmJiBwYXJlbnQuY2hpbGRyZW5bdGhpcy5pbmRleF0ubWF0Y2hlc0hhY2sobm9kZU5hbWUpKSB7XG4gICAgICAgICAgICB0aGlzLmluZGV4Kys7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBsZXQgZG9tID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChub2RlTmFtZSk7XG4gICAgICAgICAgICBpZiAobm9kZU5hbWUgPT0gXCJJTUdcIikge1xuICAgICAgICAgICAgICAgIGRvbS5jbGFzc05hbWUgPSBcIlByb3NlTWlycm9yLXNlcGFyYXRvclwiO1xuICAgICAgICAgICAgICAgIGRvbS5hbHQgPSBcIlwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5vZGVOYW1lID09IFwiQlJcIilcbiAgICAgICAgICAgICAgICBkb20uY2xhc3NOYW1lID0gXCJQcm9zZU1pcnJvci10cmFpbGluZ0JyZWFrXCI7XG4gICAgICAgICAgICBsZXQgaGFjayA9IG5ldyBUcmFpbGluZ0hhY2tWaWV3RGVzYyh0aGlzLnRvcCwgW10sIGRvbSwgbnVsbCk7XG4gICAgICAgICAgICBpZiAocGFyZW50ICE9IHRoaXMudG9wKVxuICAgICAgICAgICAgICAgIHBhcmVudC5jaGlsZHJlbi5wdXNoKGhhY2spO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHBhcmVudC5jaGlsZHJlbi5zcGxpY2UodGhpcy5pbmRleCsrLCAwLCBoYWNrKTtcbiAgICAgICAgICAgIHRoaXMuY2hhbmdlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG59XG4vLyBJdGVyYXRlIGZyb20gdGhlIGVuZCBvZiB0aGUgZnJhZ21lbnQgYW5kIGFycmF5IG9mIGRlc2NzIHRvIGZpbmRcbi8vIGRpcmVjdGx5IG1hdGNoaW5nIG9uZXMsIGluIG9yZGVyIHRvIGF2b2lkIG92ZXJlYWdlcmx5IHJldXNpbmcgdGhvc2Vcbi8vIGZvciBvdGhlciBub2Rlcy4gUmV0dXJucyB0aGUgZnJhZ21lbnQgaW5kZXggb2YgdGhlIGZpcnN0IG5vZGUgdGhhdFxuLy8gaXMgcGFydCBvZiB0aGUgc2VxdWVuY2Ugb2YgbWF0Y2hlZCBub2RlcyBhdCB0aGUgZW5kIG9mIHRoZVxuLy8gZnJhZ21lbnQuXG5mdW5jdGlvbiBwcmVNYXRjaChmcmFnLCBwYXJlbnREZXNjKSB7XG4gICAgbGV0IGN1ckRlc2MgPSBwYXJlbnREZXNjLCBkZXNjSSA9IGN1ckRlc2MuY2hpbGRyZW4ubGVuZ3RoO1xuICAgIGxldCBmSSA9IGZyYWcuY2hpbGRDb3VudCwgbWF0Y2hlZCA9IG5ldyBNYXAsIG1hdGNoZXMgPSBbXTtcbiAgICBvdXRlcjogd2hpbGUgKGZJID4gMCkge1xuICAgICAgICBsZXQgZGVzYztcbiAgICAgICAgZm9yICg7Oykge1xuICAgICAgICAgICAgaWYgKGRlc2NJKSB7XG4gICAgICAgICAgICAgICAgbGV0IG5leHQgPSBjdXJEZXNjLmNoaWxkcmVuW2Rlc2NJIC0gMV07XG4gICAgICAgICAgICAgICAgaWYgKG5leHQgaW5zdGFuY2VvZiBNYXJrVmlld0Rlc2MpIHtcbiAgICAgICAgICAgICAgICAgICAgY3VyRGVzYyA9IG5leHQ7XG4gICAgICAgICAgICAgICAgICAgIGRlc2NJID0gbmV4dC5jaGlsZHJlbi5sZW5ndGg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBkZXNjID0gbmV4dDtcbiAgICAgICAgICAgICAgICAgICAgZGVzY0ktLTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY3VyRGVzYyA9PSBwYXJlbnREZXNjKSB7XG4gICAgICAgICAgICAgICAgYnJlYWsgb3V0ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBGSVhNRVxuICAgICAgICAgICAgICAgIGRlc2NJID0gY3VyRGVzYy5wYXJlbnQuY2hpbGRyZW4uaW5kZXhPZihjdXJEZXNjKTtcbiAgICAgICAgICAgICAgICBjdXJEZXNjID0gY3VyRGVzYy5wYXJlbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbGV0IG5vZGUgPSBkZXNjLm5vZGU7XG4gICAgICAgIGlmICghbm9kZSlcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBpZiAobm9kZSAhPSBmcmFnLmNoaWxkKGZJIC0gMSkpXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgLS1mSTtcbiAgICAgICAgbWF0Y2hlZC5zZXQoZGVzYywgZkkpO1xuICAgICAgICBtYXRjaGVzLnB1c2goZGVzYyk7XG4gICAgfVxuICAgIHJldHVybiB7IGluZGV4OiBmSSwgbWF0Y2hlZCwgbWF0Y2hlczogbWF0Y2hlcy5yZXZlcnNlKCkgfTtcbn1cbmZ1bmN0aW9uIGNvbXBhcmVTaWRlKGEsIGIpIHtcbiAgICByZXR1cm4gYS50eXBlLnNpZGUgLSBiLnR5cGUuc2lkZTtcbn1cbi8vIFRoaXMgZnVuY3Rpb24gYWJzdHJhY3RzIGl0ZXJhdGluZyBvdmVyIHRoZSBub2RlcyBhbmQgZGVjb3JhdGlvbnMgaW5cbi8vIGEgZnJhZ21lbnQuIENhbGxzIGBvbk5vZGVgIGZvciBlYWNoIG5vZGUsIHdpdGggaXRzIGxvY2FsIGFuZCBjaGlsZFxuLy8gZGVjb3JhdGlvbnMuIFNwbGl0cyB0ZXh0IG5vZGVzIHdoZW4gdGhlcmUgaXMgYSBkZWNvcmF0aW9uIHN0YXJ0aW5nXG4vLyBvciBlbmRpbmcgaW5zaWRlIG9mIHRoZW0uIENhbGxzIGBvbldpZGdldGAgZm9yIGVhY2ggd2lkZ2V0LlxuZnVuY3Rpb24gaXRlckRlY28ocGFyZW50LCBkZWNvLCBvbldpZGdldCwgb25Ob2RlKSB7XG4gICAgbGV0IGxvY2FscyA9IGRlY28ubG9jYWxzKHBhcmVudCksIG9mZnNldCA9IDA7XG4gICAgLy8gU2ltcGxlLCBjaGVhcCB2YXJpYW50IGZvciB3aGVuIHRoZXJlIGFyZSBubyBsb2NhbCBkZWNvcmF0aW9uc1xuICAgIGlmIChsb2NhbHMubGVuZ3RoID09IDApIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJlbnQuY2hpbGRDb3VudDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgY2hpbGQgPSBwYXJlbnQuY2hpbGQoaSk7XG4gICAgICAgICAgICBvbk5vZGUoY2hpbGQsIGxvY2FscywgZGVjby5mb3JDaGlsZChvZmZzZXQsIGNoaWxkKSwgaSk7XG4gICAgICAgICAgICBvZmZzZXQgKz0gY2hpbGQubm9kZVNpemU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgZGVjb0luZGV4ID0gMCwgYWN0aXZlID0gW10sIHJlc3ROb2RlID0gbnVsbDtcbiAgICBmb3IgKGxldCBwYXJlbnRJbmRleCA9IDA7Oykge1xuICAgICAgICBpZiAoZGVjb0luZGV4IDwgbG9jYWxzLmxlbmd0aCAmJiBsb2NhbHNbZGVjb0luZGV4XS50byA9PSBvZmZzZXQpIHtcbiAgICAgICAgICAgIGxldCB3aWRnZXQgPSBsb2NhbHNbZGVjb0luZGV4KytdLCB3aWRnZXRzO1xuICAgICAgICAgICAgd2hpbGUgKGRlY29JbmRleCA8IGxvY2Fscy5sZW5ndGggJiYgbG9jYWxzW2RlY29JbmRleF0udG8gPT0gb2Zmc2V0KVxuICAgICAgICAgICAgICAgICh3aWRnZXRzIHx8ICh3aWRnZXRzID0gW3dpZGdldF0pKS5wdXNoKGxvY2Fsc1tkZWNvSW5kZXgrK10pO1xuICAgICAgICAgICAgaWYgKHdpZGdldHMpIHtcbiAgICAgICAgICAgICAgICB3aWRnZXRzLnNvcnQoY29tcGFyZVNpZGUpO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgd2lkZ2V0cy5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgICAgICAgICAgb25XaWRnZXQod2lkZ2V0c1tpXSwgcGFyZW50SW5kZXgsICEhcmVzdE5vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgb25XaWRnZXQod2lkZ2V0LCBwYXJlbnRJbmRleCwgISFyZXN0Tm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGNoaWxkLCBpbmRleDtcbiAgICAgICAgaWYgKHJlc3ROb2RlKSB7XG4gICAgICAgICAgICBpbmRleCA9IC0xO1xuICAgICAgICAgICAgY2hpbGQgPSByZXN0Tm9kZTtcbiAgICAgICAgICAgIHJlc3ROb2RlID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwYXJlbnRJbmRleCA8IHBhcmVudC5jaGlsZENvdW50KSB7XG4gICAgICAgICAgICBpbmRleCA9IHBhcmVudEluZGV4O1xuICAgICAgICAgICAgY2hpbGQgPSBwYXJlbnQuY2hpbGQocGFyZW50SW5kZXgrKyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFjdGl2ZS5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgIGlmIChhY3RpdmVbaV0udG8gPD0gb2Zmc2V0KVxuICAgICAgICAgICAgICAgIGFjdGl2ZS5zcGxpY2UoaS0tLCAxKTtcbiAgICAgICAgd2hpbGUgKGRlY29JbmRleCA8IGxvY2Fscy5sZW5ndGggJiYgbG9jYWxzW2RlY29JbmRleF0uZnJvbSA8PSBvZmZzZXQgJiYgbG9jYWxzW2RlY29JbmRleF0udG8gPiBvZmZzZXQpXG4gICAgICAgICAgICBhY3RpdmUucHVzaChsb2NhbHNbZGVjb0luZGV4KytdKTtcbiAgICAgICAgbGV0IGVuZCA9IG9mZnNldCArIGNoaWxkLm5vZGVTaXplO1xuICAgICAgICBpZiAoY2hpbGQuaXNUZXh0KSB7XG4gICAgICAgICAgICBsZXQgY3V0QXQgPSBlbmQ7XG4gICAgICAgICAgICBpZiAoZGVjb0luZGV4IDwgbG9jYWxzLmxlbmd0aCAmJiBsb2NhbHNbZGVjb0luZGV4XS5mcm9tIDwgY3V0QXQpXG4gICAgICAgICAgICAgICAgY3V0QXQgPSBsb2NhbHNbZGVjb0luZGV4XS5mcm9tO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhY3RpdmUubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICAgICAgaWYgKGFjdGl2ZVtpXS50byA8IGN1dEF0KVxuICAgICAgICAgICAgICAgICAgICBjdXRBdCA9IGFjdGl2ZVtpXS50bztcbiAgICAgICAgICAgIGlmIChjdXRBdCA8IGVuZCkge1xuICAgICAgICAgICAgICAgIHJlc3ROb2RlID0gY2hpbGQuY3V0KGN1dEF0IC0gb2Zmc2V0KTtcbiAgICAgICAgICAgICAgICBjaGlsZCA9IGNoaWxkLmN1dCgwLCBjdXRBdCAtIG9mZnNldCk7XG4gICAgICAgICAgICAgICAgZW5kID0gY3V0QXQ7XG4gICAgICAgICAgICAgICAgaW5kZXggPSAtMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsZXQgb3V0ZXJEZWNvID0gY2hpbGQuaXNJbmxpbmUgJiYgIWNoaWxkLmlzTGVhZiA/IGFjdGl2ZS5maWx0ZXIoZCA9PiAhZC5pbmxpbmUpIDogYWN0aXZlLnNsaWNlKCk7XG4gICAgICAgIG9uTm9kZShjaGlsZCwgb3V0ZXJEZWNvLCBkZWNvLmZvckNoaWxkKG9mZnNldCwgY2hpbGQpLCBpbmRleCk7XG4gICAgICAgIG9mZnNldCA9IGVuZDtcbiAgICB9XG59XG4vLyBMaXN0IG1hcmtlcnMgaW4gTW9iaWxlIFNhZmFyaSB3aWxsIG15c3RlcmlvdXNseSBkaXNhcHBlYXJcbi8vIHNvbWV0aW1lcy4gVGhpcyB3b3JrcyBhcm91bmQgdGhhdC5cbmZ1bmN0aW9uIGlvc0hhY2tzKGRvbSkge1xuICAgIGlmIChkb20ubm9kZU5hbWUgPT0gXCJVTFwiIHx8IGRvbS5ub2RlTmFtZSA9PSBcIk9MXCIpIHtcbiAgICAgICAgbGV0IG9sZENTUyA9IGRvbS5zdHlsZS5jc3NUZXh0O1xuICAgICAgICBkb20uc3R5bGUuY3NzVGV4dCA9IG9sZENTUyArIFwiOyBsaXN0LXN0eWxlOiBzcXVhcmUgIWltcG9ydGFudFwiO1xuICAgICAgICB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShkb20pLmxpc3RTdHlsZTtcbiAgICAgICAgZG9tLnN0eWxlLmNzc1RleHQgPSBvbGRDU1M7XG4gICAgfVxufVxuZnVuY3Rpb24gbmVhcmJ5VGV4dE5vZGUobm9kZSwgb2Zmc2V0KSB7XG4gICAgZm9yICg7Oykge1xuICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PSAzKVxuICAgICAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICAgIGlmIChub2RlLm5vZGVUeXBlID09IDEgJiYgb2Zmc2V0ID4gMCkge1xuICAgICAgICAgICAgaWYgKG5vZGUuY2hpbGROb2Rlcy5sZW5ndGggPiBvZmZzZXQgJiYgbm9kZS5jaGlsZE5vZGVzW29mZnNldF0ubm9kZVR5cGUgPT0gMylcbiAgICAgICAgICAgICAgICByZXR1cm4gbm9kZS5jaGlsZE5vZGVzW29mZnNldF07XG4gICAgICAgICAgICBub2RlID0gbm9kZS5jaGlsZE5vZGVzW29mZnNldCAtIDFdO1xuICAgICAgICAgICAgb2Zmc2V0ID0gbm9kZVNpemUobm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobm9kZS5ub2RlVHlwZSA9PSAxICYmIG9mZnNldCA8IG5vZGUuY2hpbGROb2Rlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIG5vZGUgPSBub2RlLmNoaWxkTm9kZXNbb2Zmc2V0XTtcbiAgICAgICAgICAgIG9mZnNldCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8vIEZpbmQgYSBwaWVjZSBvZiB0ZXh0IGluIGFuIGlubGluZSBmcmFnbWVudCwgb3ZlcmxhcHBpbmcgZnJvbS10b1xuZnVuY3Rpb24gZmluZFRleHRJbkZyYWdtZW50KGZyYWcsIHRleHQsIGZyb20sIHRvKSB7XG4gICAgZm9yIChsZXQgaSA9IDAsIHBvcyA9IDA7IGkgPCBmcmFnLmNoaWxkQ291bnQgJiYgcG9zIDw9IHRvOykge1xuICAgICAgICBsZXQgY2hpbGQgPSBmcmFnLmNoaWxkKGkrKyksIGNoaWxkU3RhcnQgPSBwb3M7XG4gICAgICAgIHBvcyArPSBjaGlsZC5ub2RlU2l6ZTtcbiAgICAgICAgaWYgKCFjaGlsZC5pc1RleHQpXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgbGV0IHN0ciA9IGNoaWxkLnRleHQ7XG4gICAgICAgIHdoaWxlIChpIDwgZnJhZy5jaGlsZENvdW50KSB7XG4gICAgICAgICAgICBsZXQgbmV4dCA9IGZyYWcuY2hpbGQoaSsrKTtcbiAgICAgICAgICAgIHBvcyArPSBuZXh0Lm5vZGVTaXplO1xuICAgICAgICAgICAgaWYgKCFuZXh0LmlzVGV4dClcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIHN0ciArPSBuZXh0LnRleHQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBvcyA+PSBmcm9tKSB7XG4gICAgICAgICAgICBsZXQgZm91bmQgPSBjaGlsZFN0YXJ0IDwgdG8gPyBzdHIubGFzdEluZGV4T2YodGV4dCwgdG8gLSBjaGlsZFN0YXJ0IC0gMSkgOiAtMTtcbiAgICAgICAgICAgIGlmIChmb3VuZCA+PSAwICYmIGZvdW5kICsgdGV4dC5sZW5ndGggKyBjaGlsZFN0YXJ0ID49IGZyb20pXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNoaWxkU3RhcnQgKyBmb3VuZDtcbiAgICAgICAgICAgIGlmIChmcm9tID09IHRvICYmIHN0ci5sZW5ndGggPj0gKHRvICsgdGV4dC5sZW5ndGgpIC0gY2hpbGRTdGFydCAmJlxuICAgICAgICAgICAgICAgIHN0ci5zbGljZSh0byAtIGNoaWxkU3RhcnQsIHRvIC0gY2hpbGRTdGFydCArIHRleHQubGVuZ3RoKSA9PSB0ZXh0KVxuICAgICAgICAgICAgICAgIHJldHVybiB0bztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gLTE7XG59XG4vLyBSZXBsYWNlIHJhbmdlIGZyb20tdG8gaW4gYW4gYXJyYXkgb2YgdmlldyBkZXNjcyB3aXRoIHJlcGxhY2VtZW50XG4vLyAobWF5IGJlIG51bGwgdG8ganVzdCBkZWxldGUpLiBUaGlzIGdvZXMgdmVyeSBtdWNoIGFnYWluc3QgdGhlIGdyYWluXG4vLyBvZiB0aGUgcmVzdCBvZiB0aGlzIGNvZGUsIHdoaWNoIHRlbmRzIHRvIGNyZWF0ZSBub2RlcyB3aXRoIHRoZVxuLy8gcmlnaHQgc2hhcGUgaW4gb25lIGdvLCByYXRoZXIgdGhhbiBtZXNzaW5nIHdpdGggdGhlbSBhZnRlclxuLy8gY3JlYXRpb24sIGJ1dCBpcyBuZWNlc3NhcnkgaW4gdGhlIGNvbXBvc2l0aW9uIGhhY2suXG5mdW5jdGlvbiByZXBsYWNlTm9kZXMobm9kZXMsIGZyb20sIHRvLCB2aWV3LCByZXBsYWNlbWVudCkge1xuICAgIGxldCByZXN1bHQgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMCwgb2ZmID0gMDsgaSA8IG5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCBjaGlsZCA9IG5vZGVzW2ldLCBzdGFydCA9IG9mZiwgZW5kID0gb2ZmICs9IGNoaWxkLnNpemU7XG4gICAgICAgIGlmIChzdGFydCA+PSB0byB8fCBlbmQgPD0gZnJvbSkge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goY2hpbGQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKHN0YXJ0IDwgZnJvbSlcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChjaGlsZC5zbGljZSgwLCBmcm9tIC0gc3RhcnQsIHZpZXcpKTtcbiAgICAgICAgICAgIGlmIChyZXBsYWNlbWVudCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHJlcGxhY2VtZW50KTtcbiAgICAgICAgICAgICAgICByZXBsYWNlbWVudCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChlbmQgPiB0bylcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChjaGlsZC5zbGljZSh0byAtIHN0YXJ0LCBjaGlsZC5zaXplLCB2aWV3KSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gc2VsZWN0aW9uRnJvbURPTSh2aWV3LCBvcmlnaW4gPSBudWxsKSB7XG4gICAgbGV0IGRvbVNlbCA9IHZpZXcuZG9tU2VsZWN0aW9uKCksIGRvYyA9IHZpZXcuc3RhdGUuZG9jO1xuICAgIGlmICghZG9tU2VsLmZvY3VzTm9kZSlcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgbGV0IG5lYXJlc3REZXNjID0gdmlldy5kb2NWaWV3Lm5lYXJlc3REZXNjKGRvbVNlbC5mb2N1c05vZGUpLCBpbldpZGdldCA9IG5lYXJlc3REZXNjICYmIG5lYXJlc3REZXNjLnNpemUgPT0gMDtcbiAgICBsZXQgaGVhZCA9IHZpZXcuZG9jVmlldy5wb3NGcm9tRE9NKGRvbVNlbC5mb2N1c05vZGUsIGRvbVNlbC5mb2N1c09mZnNldCwgMSk7XG4gICAgaWYgKGhlYWQgPCAwKVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICBsZXQgJGhlYWQgPSBkb2MucmVzb2x2ZShoZWFkKSwgJGFuY2hvciwgc2VsZWN0aW9uO1xuICAgIGlmIChzZWxlY3Rpb25Db2xsYXBzZWQoZG9tU2VsKSkge1xuICAgICAgICAkYW5jaG9yID0gJGhlYWQ7XG4gICAgICAgIHdoaWxlIChuZWFyZXN0RGVzYyAmJiAhbmVhcmVzdERlc2Mubm9kZSlcbiAgICAgICAgICAgIG5lYXJlc3REZXNjID0gbmVhcmVzdERlc2MucGFyZW50O1xuICAgICAgICBsZXQgbmVhcmVzdERlc2NOb2RlID0gbmVhcmVzdERlc2Mubm9kZTtcbiAgICAgICAgaWYgKG5lYXJlc3REZXNjICYmIG5lYXJlc3REZXNjTm9kZS5pc0F0b20gJiYgTm9kZVNlbGVjdGlvbi5pc1NlbGVjdGFibGUobmVhcmVzdERlc2NOb2RlKSAmJiBuZWFyZXN0RGVzYy5wYXJlbnRcbiAgICAgICAgICAgICYmICEobmVhcmVzdERlc2NOb2RlLmlzSW5saW5lICYmIGlzT25FZGdlKGRvbVNlbC5mb2N1c05vZGUsIGRvbVNlbC5mb2N1c09mZnNldCwgbmVhcmVzdERlc2MuZG9tKSkpIHtcbiAgICAgICAgICAgIGxldCBwb3MgPSBuZWFyZXN0RGVzYy5wb3NCZWZvcmU7XG4gICAgICAgICAgICBzZWxlY3Rpb24gPSBuZXcgTm9kZVNlbGVjdGlvbihoZWFkID09IHBvcyA/ICRoZWFkIDogZG9jLnJlc29sdmUocG9zKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGxldCBhbmNob3IgPSB2aWV3LmRvY1ZpZXcucG9zRnJvbURPTShkb21TZWwuYW5jaG9yTm9kZSwgZG9tU2VsLmFuY2hvck9mZnNldCwgMSk7XG4gICAgICAgIGlmIChhbmNob3IgPCAwKVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICRhbmNob3IgPSBkb2MucmVzb2x2ZShhbmNob3IpO1xuICAgIH1cbiAgICBpZiAoIXNlbGVjdGlvbikge1xuICAgICAgICBsZXQgYmlhcyA9IG9yaWdpbiA9PSBcInBvaW50ZXJcIiB8fCAodmlldy5zdGF0ZS5zZWxlY3Rpb24uaGVhZCA8ICRoZWFkLnBvcyAmJiAhaW5XaWRnZXQpID8gMSA6IC0xO1xuICAgICAgICBzZWxlY3Rpb24gPSBzZWxlY3Rpb25CZXR3ZWVuKHZpZXcsICRhbmNob3IsICRoZWFkLCBiaWFzKTtcbiAgICB9XG4gICAgcmV0dXJuIHNlbGVjdGlvbjtcbn1cbmZ1bmN0aW9uIGVkaXRvck93bnNTZWxlY3Rpb24odmlldykge1xuICAgIHJldHVybiB2aWV3LmVkaXRhYmxlID8gdmlldy5oYXNGb2N1cygpIDpcbiAgICAgICAgaGFzU2VsZWN0aW9uKHZpZXcpICYmIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5jb250YWlucyh2aWV3LmRvbSk7XG59XG5mdW5jdGlvbiBzZWxlY3Rpb25Ub0RPTSh2aWV3LCBmb3JjZSA9IGZhbHNlKSB7XG4gICAgbGV0IHNlbCA9IHZpZXcuc3RhdGUuc2VsZWN0aW9uO1xuICAgIHN5bmNOb2RlU2VsZWN0aW9uKHZpZXcsIHNlbCk7XG4gICAgaWYgKCFlZGl0b3JPd25zU2VsZWN0aW9uKHZpZXcpKVxuICAgICAgICByZXR1cm47XG4gICAgLy8gVGhlIGRlbGF5ZWQgZHJhZyBzZWxlY3Rpb24gY2F1c2VzIGlzc3VlcyB3aXRoIENlbGwgU2VsZWN0aW9uc1xuICAgIC8vIGluIFNhZmFyaS4gQW5kIHRoZSBkcmFnIHNlbGVjdGlvbiBkZWxheSBpcyB0byB3b3JrYXJvbmQgaXNzdWVzXG4gICAgLy8gd2hpY2ggb25seSBwcmVzZW50IGluIENocm9tZS5cbiAgICBpZiAoIWZvcmNlICYmIHZpZXcuaW5wdXQubW91c2VEb3duICYmIHZpZXcuaW5wdXQubW91c2VEb3duLmFsbG93RGVmYXVsdCAmJiBjaHJvbWUpIHtcbiAgICAgICAgbGV0IGRvbVNlbCA9IHZpZXcuZG9tU2VsZWN0aW9uKCksIGN1clNlbCA9IHZpZXcuZG9tT2JzZXJ2ZXIuY3VycmVudFNlbGVjdGlvbjtcbiAgICAgICAgaWYgKGRvbVNlbC5hbmNob3JOb2RlICYmIGN1clNlbC5hbmNob3JOb2RlICYmXG4gICAgICAgICAgICBpc0VxdWl2YWxlbnRQb3NpdGlvbihkb21TZWwuYW5jaG9yTm9kZSwgZG9tU2VsLmFuY2hvck9mZnNldCwgY3VyU2VsLmFuY2hvck5vZGUsIGN1clNlbC5hbmNob3JPZmZzZXQpKSB7XG4gICAgICAgICAgICB2aWV3LmlucHV0Lm1vdXNlRG93bi5kZWxheWVkU2VsZWN0aW9uU3luYyA9IHRydWU7XG4gICAgICAgICAgICB2aWV3LmRvbU9ic2VydmVyLnNldEN1clNlbGVjdGlvbigpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfVxuICAgIHZpZXcuZG9tT2JzZXJ2ZXIuZGlzY29ubmVjdFNlbGVjdGlvbigpO1xuICAgIGlmICh2aWV3LmN1cnNvcldyYXBwZXIpIHtcbiAgICAgICAgc2VsZWN0Q3Vyc29yV3JhcHBlcih2aWV3KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGxldCB7IGFuY2hvciwgaGVhZCB9ID0gc2VsLCByZXNldEVkaXRhYmxlRnJvbSwgcmVzZXRFZGl0YWJsZVRvO1xuICAgICAgICBpZiAoYnJva2VuU2VsZWN0QmV0d2VlblVuZWRpdGFibGUgJiYgIShzZWwgaW5zdGFuY2VvZiBUZXh0U2VsZWN0aW9uKSkge1xuICAgICAgICAgICAgaWYgKCFzZWwuJGZyb20ucGFyZW50LmlubGluZUNvbnRlbnQpXG4gICAgICAgICAgICAgICAgcmVzZXRFZGl0YWJsZUZyb20gPSB0ZW1wb3JhcmlseUVkaXRhYmxlTmVhcih2aWV3LCBzZWwuZnJvbSk7XG4gICAgICAgICAgICBpZiAoIXNlbC5lbXB0eSAmJiAhc2VsLiRmcm9tLnBhcmVudC5pbmxpbmVDb250ZW50KVxuICAgICAgICAgICAgICAgIHJlc2V0RWRpdGFibGVUbyA9IHRlbXBvcmFyaWx5RWRpdGFibGVOZWFyKHZpZXcsIHNlbC50byk7XG4gICAgICAgIH1cbiAgICAgICAgdmlldy5kb2NWaWV3LnNldFNlbGVjdGlvbihhbmNob3IsIGhlYWQsIHZpZXcucm9vdCwgZm9yY2UpO1xuICAgICAgICBpZiAoYnJva2VuU2VsZWN0QmV0d2VlblVuZWRpdGFibGUpIHtcbiAgICAgICAgICAgIGlmIChyZXNldEVkaXRhYmxlRnJvbSlcbiAgICAgICAgICAgICAgICByZXNldEVkaXRhYmxlKHJlc2V0RWRpdGFibGVGcm9tKTtcbiAgICAgICAgICAgIGlmIChyZXNldEVkaXRhYmxlVG8pXG4gICAgICAgICAgICAgICAgcmVzZXRFZGl0YWJsZShyZXNldEVkaXRhYmxlVG8pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZWwudmlzaWJsZSkge1xuICAgICAgICAgICAgdmlldy5kb20uY2xhc3NMaXN0LnJlbW92ZShcIlByb3NlTWlycm9yLWhpZGVzZWxlY3Rpb25cIik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2aWV3LmRvbS5jbGFzc0xpc3QuYWRkKFwiUHJvc2VNaXJyb3ItaGlkZXNlbGVjdGlvblwiKTtcbiAgICAgICAgICAgIGlmIChcIm9uc2VsZWN0aW9uY2hhbmdlXCIgaW4gZG9jdW1lbnQpXG4gICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3NPblNlbGVjdGlvbkNoYW5nZSh2aWV3KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB2aWV3LmRvbU9ic2VydmVyLnNldEN1clNlbGVjdGlvbigpO1xuICAgIHZpZXcuZG9tT2JzZXJ2ZXIuY29ubmVjdFNlbGVjdGlvbigpO1xufVxuLy8gS2x1ZGdlIHRvIHdvcmsgYXJvdW5kIFdlYmtpdCBub3QgYWxsb3dpbmcgYSBzZWxlY3Rpb24gdG8gc3RhcnQvZW5kXG4vLyBiZXR3ZWVuIG5vbi1lZGl0YWJsZSBibG9jayBub2Rlcy4gV2UgYnJpZWZseSBtYWtlIHNvbWV0aGluZ1xuLy8gZWRpdGFibGUsIHNldCB0aGUgc2VsZWN0aW9uLCB0aGVuIHNldCBpdCB1bmVkaXRhYmxlIGFnYWluLlxuY29uc3QgYnJva2VuU2VsZWN0QmV0d2VlblVuZWRpdGFibGUgPSBzYWZhcmkgfHwgY2hyb21lICYmIGNocm9tZV92ZXJzaW9uIDwgNjM7XG5mdW5jdGlvbiB0ZW1wb3JhcmlseUVkaXRhYmxlTmVhcih2aWV3LCBwb3MpIHtcbiAgICBsZXQgeyBub2RlLCBvZmZzZXQgfSA9IHZpZXcuZG9jVmlldy5kb21Gcm9tUG9zKHBvcywgMCk7XG4gICAgbGV0IGFmdGVyID0gb2Zmc2V0IDwgbm9kZS5jaGlsZE5vZGVzLmxlbmd0aCA/IG5vZGUuY2hpbGROb2Rlc1tvZmZzZXRdIDogbnVsbDtcbiAgICBsZXQgYmVmb3JlID0gb2Zmc2V0ID8gbm9kZS5jaGlsZE5vZGVzW29mZnNldCAtIDFdIDogbnVsbDtcbiAgICBpZiAoc2FmYXJpICYmIGFmdGVyICYmIGFmdGVyLmNvbnRlbnRFZGl0YWJsZSA9PSBcImZhbHNlXCIpXG4gICAgICAgIHJldHVybiBzZXRFZGl0YWJsZShhZnRlcik7XG4gICAgaWYgKCghYWZ0ZXIgfHwgYWZ0ZXIuY29udGVudEVkaXRhYmxlID09IFwiZmFsc2VcIikgJiZcbiAgICAgICAgKCFiZWZvcmUgfHwgYmVmb3JlLmNvbnRlbnRFZGl0YWJsZSA9PSBcImZhbHNlXCIpKSB7XG4gICAgICAgIGlmIChhZnRlcilcbiAgICAgICAgICAgIHJldHVybiBzZXRFZGl0YWJsZShhZnRlcik7XG4gICAgICAgIGVsc2UgaWYgKGJlZm9yZSlcbiAgICAgICAgICAgIHJldHVybiBzZXRFZGl0YWJsZShiZWZvcmUpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHNldEVkaXRhYmxlKGVsZW1lbnQpIHtcbiAgICBlbGVtZW50LmNvbnRlbnRFZGl0YWJsZSA9IFwidHJ1ZVwiO1xuICAgIGlmIChzYWZhcmkgJiYgZWxlbWVudC5kcmFnZ2FibGUpIHtcbiAgICAgICAgZWxlbWVudC5kcmFnZ2FibGUgPSBmYWxzZTtcbiAgICAgICAgZWxlbWVudC53YXNEcmFnZ2FibGUgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZWxlbWVudDtcbn1cbmZ1bmN0aW9uIHJlc2V0RWRpdGFibGUoZWxlbWVudCkge1xuICAgIGVsZW1lbnQuY29udGVudEVkaXRhYmxlID0gXCJmYWxzZVwiO1xuICAgIGlmIChlbGVtZW50Lndhc0RyYWdnYWJsZSkge1xuICAgICAgICBlbGVtZW50LmRyYWdnYWJsZSA9IHRydWU7XG4gICAgICAgIGVsZW1lbnQud2FzRHJhZ2dhYmxlID0gbnVsbDtcbiAgICB9XG59XG5mdW5jdGlvbiByZW1vdmVDbGFzc09uU2VsZWN0aW9uQ2hhbmdlKHZpZXcpIHtcbiAgICBsZXQgZG9jID0gdmlldy5kb20ub3duZXJEb2N1bWVudDtcbiAgICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInNlbGVjdGlvbmNoYW5nZVwiLCB2aWV3LmlucHV0LmhpZGVTZWxlY3Rpb25HdWFyZCk7XG4gICAgbGV0IGRvbVNlbCA9IHZpZXcuZG9tU2VsZWN0aW9uKCk7XG4gICAgbGV0IG5vZGUgPSBkb21TZWwuYW5jaG9yTm9kZSwgb2Zmc2V0ID0gZG9tU2VsLmFuY2hvck9mZnNldDtcbiAgICBkb2MuYWRkRXZlbnRMaXN0ZW5lcihcInNlbGVjdGlvbmNoYW5nZVwiLCB2aWV3LmlucHV0LmhpZGVTZWxlY3Rpb25HdWFyZCA9ICgpID0+IHtcbiAgICAgICAgaWYgKGRvbVNlbC5hbmNob3JOb2RlICE9IG5vZGUgfHwgZG9tU2VsLmFuY2hvck9mZnNldCAhPSBvZmZzZXQpIHtcbiAgICAgICAgICAgIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKFwic2VsZWN0aW9uY2hhbmdlXCIsIHZpZXcuaW5wdXQuaGlkZVNlbGVjdGlvbkd1YXJkKTtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghZWRpdG9yT3duc1NlbGVjdGlvbih2aWV3KSB8fCB2aWV3LnN0YXRlLnNlbGVjdGlvbi52aXNpYmxlKVxuICAgICAgICAgICAgICAgICAgICB2aWV3LmRvbS5jbGFzc0xpc3QucmVtb3ZlKFwiUHJvc2VNaXJyb3ItaGlkZXNlbGVjdGlvblwiKTtcbiAgICAgICAgICAgIH0sIDIwKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuZnVuY3Rpb24gc2VsZWN0Q3Vyc29yV3JhcHBlcih2aWV3KSB7XG4gICAgbGV0IGRvbVNlbCA9IHZpZXcuZG9tU2VsZWN0aW9uKCksIHJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcbiAgICBsZXQgbm9kZSA9IHZpZXcuY3Vyc29yV3JhcHBlci5kb20sIGltZyA9IG5vZGUubm9kZU5hbWUgPT0gXCJJTUdcIjtcbiAgICBpZiAoaW1nKVxuICAgICAgICByYW5nZS5zZXRFbmQobm9kZS5wYXJlbnROb2RlLCBkb21JbmRleChub2RlKSArIDEpO1xuICAgIGVsc2VcbiAgICAgICAgcmFuZ2Uuc2V0RW5kKG5vZGUsIDApO1xuICAgIHJhbmdlLmNvbGxhcHNlKGZhbHNlKTtcbiAgICBkb21TZWwucmVtb3ZlQWxsUmFuZ2VzKCk7XG4gICAgZG9tU2VsLmFkZFJhbmdlKHJhbmdlKTtcbiAgICAvLyBLbHVkZ2UgdG8ga2lsbCAnY29udHJvbCBzZWxlY3Rpb24nIGluIElFMTEgd2hlbiBzZWxlY3RpbmcgYW5cbiAgICAvLyBpbnZpc2libGUgY3Vyc29yIHdyYXBwZXIsIHNpbmNlIHRoYXQgd291bGQgcmVzdWx0IGluIHRob3NlIHdlaXJkXG4gICAgLy8gcmVzaXplIGhhbmRsZXMgYW5kIGEgc2VsZWN0aW9uIHRoYXQgY29uc2lkZXJzIHRoZSBhYnNvbHV0ZWx5XG4gICAgLy8gcG9zaXRpb25lZCB3cmFwcGVyLCByYXRoZXIgdGhhbiB0aGUgcm9vdCBlZGl0YWJsZSBub2RlLCB0aGVcbiAgICAvLyBmb2N1c2VkIGVsZW1lbnQuXG4gICAgaWYgKCFpbWcgJiYgIXZpZXcuc3RhdGUuc2VsZWN0aW9uLnZpc2libGUgJiYgaWUgJiYgaWVfdmVyc2lvbiA8PSAxMSkge1xuICAgICAgICBub2RlLmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgbm9kZS5kaXNhYmxlZCA9IGZhbHNlO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHN5bmNOb2RlU2VsZWN0aW9uKHZpZXcsIHNlbCkge1xuICAgIGlmIChzZWwgaW5zdGFuY2VvZiBOb2RlU2VsZWN0aW9uKSB7XG4gICAgICAgIGxldCBkZXNjID0gdmlldy5kb2NWaWV3LmRlc2NBdChzZWwuZnJvbSk7XG4gICAgICAgIGlmIChkZXNjICE9IHZpZXcubGFzdFNlbGVjdGVkVmlld0Rlc2MpIHtcbiAgICAgICAgICAgIGNsZWFyTm9kZVNlbGVjdGlvbih2aWV3KTtcbiAgICAgICAgICAgIGlmIChkZXNjKVxuICAgICAgICAgICAgICAgIGRlc2Muc2VsZWN0Tm9kZSgpO1xuICAgICAgICAgICAgdmlldy5sYXN0U2VsZWN0ZWRWaWV3RGVzYyA9IGRlc2M7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNsZWFyTm9kZVNlbGVjdGlvbih2aWV3KTtcbiAgICB9XG59XG4vLyBDbGVhciBhbGwgRE9NIHN0YXRlZnVsbmVzcyBvZiB0aGUgbGFzdCBub2RlIHNlbGVjdGlvbi5cbmZ1bmN0aW9uIGNsZWFyTm9kZVNlbGVjdGlvbih2aWV3KSB7XG4gICAgaWYgKHZpZXcubGFzdFNlbGVjdGVkVmlld0Rlc2MpIHtcbiAgICAgICAgaWYgKHZpZXcubGFzdFNlbGVjdGVkVmlld0Rlc2MucGFyZW50KVxuICAgICAgICAgICAgdmlldy5sYXN0U2VsZWN0ZWRWaWV3RGVzYy5kZXNlbGVjdE5vZGUoKTtcbiAgICAgICAgdmlldy5sYXN0U2VsZWN0ZWRWaWV3RGVzYyA9IHVuZGVmaW5lZDtcbiAgICB9XG59XG5mdW5jdGlvbiBzZWxlY3Rpb25CZXR3ZWVuKHZpZXcsICRhbmNob3IsICRoZWFkLCBiaWFzKSB7XG4gICAgcmV0dXJuIHZpZXcuc29tZVByb3AoXCJjcmVhdGVTZWxlY3Rpb25CZXR3ZWVuXCIsIGYgPT4gZih2aWV3LCAkYW5jaG9yLCAkaGVhZCkpXG4gICAgICAgIHx8IFRleHRTZWxlY3Rpb24uYmV0d2VlbigkYW5jaG9yLCAkaGVhZCwgYmlhcyk7XG59XG5mdW5jdGlvbiBoYXNGb2N1c0FuZFNlbGVjdGlvbih2aWV3KSB7XG4gICAgaWYgKHZpZXcuZWRpdGFibGUgJiYgdmlldy5yb290LmFjdGl2ZUVsZW1lbnQgIT0gdmlldy5kb20pXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gaGFzU2VsZWN0aW9uKHZpZXcpO1xufVxuZnVuY3Rpb24gaGFzU2VsZWN0aW9uKHZpZXcpIHtcbiAgICBsZXQgc2VsID0gdmlldy5kb21TZWxlY3Rpb24oKTtcbiAgICBpZiAoIXNlbC5hbmNob3JOb2RlKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gRmlyZWZveCB3aWxsIHJhaXNlICdwZXJtaXNzaW9uIGRlbmllZCcgZXJyb3JzIHdoZW4gYWNjZXNzaW5nXG4gICAgICAgIC8vIHByb3BlcnRpZXMgb2YgYHNlbC5hbmNob3JOb2RlYCB3aGVuIGl0J3MgaW4gYSBnZW5lcmF0ZWQgQ1NTXG4gICAgICAgIC8vIGVsZW1lbnQuXG4gICAgICAgIHJldHVybiB2aWV3LmRvbS5jb250YWlucyhzZWwuYW5jaG9yTm9kZS5ub2RlVHlwZSA9PSAzID8gc2VsLmFuY2hvck5vZGUucGFyZW50Tm9kZSA6IHNlbC5hbmNob3JOb2RlKSAmJlxuICAgICAgICAgICAgKHZpZXcuZWRpdGFibGUgfHwgdmlldy5kb20uY29udGFpbnMoc2VsLmZvY3VzTm9kZS5ub2RlVHlwZSA9PSAzID8gc2VsLmZvY3VzTm9kZS5wYXJlbnROb2RlIDogc2VsLmZvY3VzTm9kZSkpO1xuICAgIH1cbiAgICBjYXRjaCAoXykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuZnVuY3Rpb24gYW5jaG9ySW5SaWdodFBsYWNlKHZpZXcpIHtcbiAgICBsZXQgYW5jaG9yRE9NID0gdmlldy5kb2NWaWV3LmRvbUZyb21Qb3Modmlldy5zdGF0ZS5zZWxlY3Rpb24uYW5jaG9yLCAwKTtcbiAgICBsZXQgZG9tU2VsID0gdmlldy5kb21TZWxlY3Rpb24oKTtcbiAgICByZXR1cm4gaXNFcXVpdmFsZW50UG9zaXRpb24oYW5jaG9yRE9NLm5vZGUsIGFuY2hvckRPTS5vZmZzZXQsIGRvbVNlbC5hbmNob3JOb2RlLCBkb21TZWwuYW5jaG9yT2Zmc2V0KTtcbn1cblxuZnVuY3Rpb24gbW92ZVNlbGVjdGlvbkJsb2NrKHN0YXRlLCBkaXIpIHtcbiAgICBsZXQgeyAkYW5jaG9yLCAkaGVhZCB9ID0gc3RhdGUuc2VsZWN0aW9uO1xuICAgIGxldCAkc2lkZSA9IGRpciA+IDAgPyAkYW5jaG9yLm1heCgkaGVhZCkgOiAkYW5jaG9yLm1pbigkaGVhZCk7XG4gICAgbGV0ICRzdGFydCA9ICEkc2lkZS5wYXJlbnQuaW5saW5lQ29udGVudCA/ICRzaWRlIDogJHNpZGUuZGVwdGggPyBzdGF0ZS5kb2MucmVzb2x2ZShkaXIgPiAwID8gJHNpZGUuYWZ0ZXIoKSA6ICRzaWRlLmJlZm9yZSgpKSA6IG51bGw7XG4gICAgcmV0dXJuICRzdGFydCAmJiBTZWxlY3Rpb24uZmluZEZyb20oJHN0YXJ0LCBkaXIpO1xufVxuZnVuY3Rpb24gYXBwbHkodmlldywgc2VsKSB7XG4gICAgdmlldy5kaXNwYXRjaCh2aWV3LnN0YXRlLnRyLnNldFNlbGVjdGlvbihzZWwpLnNjcm9sbEludG9WaWV3KCkpO1xuICAgIHJldHVybiB0cnVlO1xufVxuZnVuY3Rpb24gc2VsZWN0SG9yaXpvbnRhbGx5KHZpZXcsIGRpciwgbW9kcykge1xuICAgIGxldCBzZWwgPSB2aWV3LnN0YXRlLnNlbGVjdGlvbjtcbiAgICBpZiAoc2VsIGluc3RhbmNlb2YgVGV4dFNlbGVjdGlvbikge1xuICAgICAgICBpZiAoIXNlbC5lbXB0eSB8fCBtb2RzLmluZGV4T2YoXCJzXCIpID4gLTEpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh2aWV3LmVuZE9mVGV4dGJsb2NrKGRpciA+IDAgPyBcInJpZ2h0XCIgOiBcImxlZnRcIikpIHtcbiAgICAgICAgICAgIGxldCBuZXh0ID0gbW92ZVNlbGVjdGlvbkJsb2NrKHZpZXcuc3RhdGUsIGRpcik7XG4gICAgICAgICAgICBpZiAobmV4dCAmJiAobmV4dCBpbnN0YW5jZW9mIE5vZGVTZWxlY3Rpb24pKVxuICAgICAgICAgICAgICAgIHJldHVybiBhcHBseSh2aWV3LCBuZXh0KTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghKG1hYyAmJiBtb2RzLmluZGV4T2YoXCJtXCIpID4gLTEpKSB7XG4gICAgICAgICAgICBsZXQgJGhlYWQgPSBzZWwuJGhlYWQsIG5vZGUgPSAkaGVhZC50ZXh0T2Zmc2V0ID8gbnVsbCA6IGRpciA8IDAgPyAkaGVhZC5ub2RlQmVmb3JlIDogJGhlYWQubm9kZUFmdGVyLCBkZXNjO1xuICAgICAgICAgICAgaWYgKCFub2RlIHx8IG5vZGUuaXNUZXh0KVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIGxldCBub2RlUG9zID0gZGlyIDwgMCA/ICRoZWFkLnBvcyAtIG5vZGUubm9kZVNpemUgOiAkaGVhZC5wb3M7XG4gICAgICAgICAgICBpZiAoIShub2RlLmlzQXRvbSB8fCAoZGVzYyA9IHZpZXcuZG9jVmlldy5kZXNjQXQobm9kZVBvcykpICYmICFkZXNjLmNvbnRlbnRET00pKVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIGlmIChOb2RlU2VsZWN0aW9uLmlzU2VsZWN0YWJsZShub2RlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhcHBseSh2aWV3LCBuZXcgTm9kZVNlbGVjdGlvbihkaXIgPCAwID8gdmlldy5zdGF0ZS5kb2MucmVzb2x2ZSgkaGVhZC5wb3MgLSBub2RlLm5vZGVTaXplKSA6ICRoZWFkKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh3ZWJraXQpIHtcbiAgICAgICAgICAgICAgICAvLyBDaHJvbWUgYW5kIFNhZmFyaSB3aWxsIGludHJvZHVjZSBleHRyYSBwb2ludGxlc3MgY3Vyc29yXG4gICAgICAgICAgICAgICAgLy8gcG9zaXRpb25zIGFyb3VuZCBpbmxpbmUgdW5lZGl0YWJsZSBub2Rlcywgc28gd2UgaGF2ZSB0b1xuICAgICAgICAgICAgICAgIC8vIHRha2Ugb3ZlciBhbmQgbW92ZSB0aGUgY3Vyc29yIHBhc3QgdGhlbSAoIzkzNylcbiAgICAgICAgICAgICAgICByZXR1cm4gYXBwbHkodmlldywgbmV3IFRleHRTZWxlY3Rpb24odmlldy5zdGF0ZS5kb2MucmVzb2x2ZShkaXIgPCAwID8gbm9kZVBvcyA6IG5vZGVQb3MgKyBub2RlLm5vZGVTaXplKSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKHNlbCBpbnN0YW5jZW9mIE5vZGVTZWxlY3Rpb24gJiYgc2VsLm5vZGUuaXNJbmxpbmUpIHtcbiAgICAgICAgcmV0dXJuIGFwcGx5KHZpZXcsIG5ldyBUZXh0U2VsZWN0aW9uKGRpciA+IDAgPyBzZWwuJHRvIDogc2VsLiRmcm9tKSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBsZXQgbmV4dCA9IG1vdmVTZWxlY3Rpb25CbG9jayh2aWV3LnN0YXRlLCBkaXIpO1xuICAgICAgICBpZiAobmV4dClcbiAgICAgICAgICAgIHJldHVybiBhcHBseSh2aWV3LCBuZXh0KTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbmZ1bmN0aW9uIG5vZGVMZW4obm9kZSkge1xuICAgIHJldHVybiBub2RlLm5vZGVUeXBlID09IDMgPyBub2RlLm5vZGVWYWx1ZS5sZW5ndGggOiBub2RlLmNoaWxkTm9kZXMubGVuZ3RoO1xufVxuZnVuY3Rpb24gaXNJZ25vcmFibGUoZG9tKSB7XG4gICAgbGV0IGRlc2MgPSBkb20ucG1WaWV3RGVzYztcbiAgICByZXR1cm4gZGVzYyAmJiBkZXNjLnNpemUgPT0gMCAmJiAoZG9tLm5leHRTaWJsaW5nIHx8IGRvbS5ub2RlTmFtZSAhPSBcIkJSXCIpO1xufVxuLy8gTWFrZSBzdXJlIHRoZSBjdXJzb3IgaXNuJ3QgZGlyZWN0bHkgYWZ0ZXIgb25lIG9yIG1vcmUgaWdub3JlZFxuLy8gbm9kZXMsIHdoaWNoIHdpbGwgY29uZnVzZSB0aGUgYnJvd3NlcidzIGN1cnNvciBtb3Rpb24gbG9naWMuXG5mdW5jdGlvbiBza2lwSWdub3JlZE5vZGVzTGVmdCh2aWV3KSB7XG4gICAgbGV0IHNlbCA9IHZpZXcuZG9tU2VsZWN0aW9uKCk7XG4gICAgbGV0IG5vZGUgPSBzZWwuZm9jdXNOb2RlLCBvZmZzZXQgPSBzZWwuZm9jdXNPZmZzZXQ7XG4gICAgaWYgKCFub2RlKVxuICAgICAgICByZXR1cm47XG4gICAgbGV0IG1vdmVOb2RlLCBtb3ZlT2Zmc2V0LCBmb3JjZSA9IGZhbHNlO1xuICAgIC8vIEdlY2tvIHdpbGwgZG8gb2RkIHRoaW5ncyB3aGVuIHRoZSBzZWxlY3Rpb24gaXMgZGlyZWN0bHkgaW4gZnJvbnRcbiAgICAvLyBvZiBhIG5vbi1lZGl0YWJsZSBub2RlLCBzbyBpbiB0aGF0IGNhc2UsIG1vdmUgaXQgaW50byB0aGUgbmV4dFxuICAgIC8vIG5vZGUgaWYgcG9zc2libGUuIElzc3VlIHByb3NlbWlycm9yL3Byb3NlbWlycm9yIzgzMi5cbiAgICBpZiAoZ2Vja28gJiYgbm9kZS5ub2RlVHlwZSA9PSAxICYmIG9mZnNldCA8IG5vZGVMZW4obm9kZSkgJiYgaXNJZ25vcmFibGUobm9kZS5jaGlsZE5vZGVzW29mZnNldF0pKVxuICAgICAgICBmb3JjZSA9IHRydWU7XG4gICAgZm9yICg7Oykge1xuICAgICAgICBpZiAob2Zmc2V0ID4gMCkge1xuICAgICAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgIT0gMSkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbGV0IGJlZm9yZSA9IG5vZGUuY2hpbGROb2Rlc1tvZmZzZXQgLSAxXTtcbiAgICAgICAgICAgICAgICBpZiAoaXNJZ25vcmFibGUoYmVmb3JlKSkge1xuICAgICAgICAgICAgICAgICAgICBtb3ZlTm9kZSA9IG5vZGU7XG4gICAgICAgICAgICAgICAgICAgIG1vdmVPZmZzZXQgPSAtLW9mZnNldDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoYmVmb3JlLm5vZGVUeXBlID09IDMpIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZSA9IGJlZm9yZTtcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ID0gbm9kZS5ub2RlVmFsdWUubGVuZ3RoO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzQmxvY2tOb2RlKG5vZGUpKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxldCBwcmV2ID0gbm9kZS5wcmV2aW91c1NpYmxpbmc7XG4gICAgICAgICAgICB3aGlsZSAocHJldiAmJiBpc0lnbm9yYWJsZShwcmV2KSkge1xuICAgICAgICAgICAgICAgIG1vdmVOb2RlID0gbm9kZS5wYXJlbnROb2RlO1xuICAgICAgICAgICAgICAgIG1vdmVPZmZzZXQgPSBkb21JbmRleChwcmV2KTtcbiAgICAgICAgICAgICAgICBwcmV2ID0gcHJldi5wcmV2aW91c1NpYmxpbmc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXByZXYpIHtcbiAgICAgICAgICAgICAgICBub2RlID0gbm9kZS5wYXJlbnROb2RlO1xuICAgICAgICAgICAgICAgIGlmIChub2RlID09IHZpZXcuZG9tKVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBvZmZzZXQgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbm9kZSA9IHByZXY7XG4gICAgICAgICAgICAgICAgb2Zmc2V0ID0gbm9kZUxlbihub2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoZm9yY2UpXG4gICAgICAgIHNldFNlbEZvY3VzKHZpZXcsIHNlbCwgbm9kZSwgb2Zmc2V0KTtcbiAgICBlbHNlIGlmIChtb3ZlTm9kZSlcbiAgICAgICAgc2V0U2VsRm9jdXModmlldywgc2VsLCBtb3ZlTm9kZSwgbW92ZU9mZnNldCk7XG59XG4vLyBNYWtlIHN1cmUgdGhlIGN1cnNvciBpc24ndCBkaXJlY3RseSBiZWZvcmUgb25lIG9yIG1vcmUgaWdub3JlZFxuLy8gbm9kZXMuXG5mdW5jdGlvbiBza2lwSWdub3JlZE5vZGVzUmlnaHQodmlldykge1xuICAgIGxldCBzZWwgPSB2aWV3LmRvbVNlbGVjdGlvbigpO1xuICAgIGxldCBub2RlID0gc2VsLmZvY3VzTm9kZSwgb2Zmc2V0ID0gc2VsLmZvY3VzT2Zmc2V0O1xuICAgIGlmICghbm9kZSlcbiAgICAgICAgcmV0dXJuO1xuICAgIGxldCBsZW4gPSBub2RlTGVuKG5vZGUpO1xuICAgIGxldCBtb3ZlTm9kZSwgbW92ZU9mZnNldDtcbiAgICBmb3IgKDs7KSB7XG4gICAgICAgIGlmIChvZmZzZXQgPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChub2RlLm5vZGVUeXBlICE9IDEpXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBsZXQgYWZ0ZXIgPSBub2RlLmNoaWxkTm9kZXNbb2Zmc2V0XTtcbiAgICAgICAgICAgIGlmIChpc0lnbm9yYWJsZShhZnRlcikpIHtcbiAgICAgICAgICAgICAgICBtb3ZlTm9kZSA9IG5vZGU7XG4gICAgICAgICAgICAgICAgbW92ZU9mZnNldCA9ICsrb2Zmc2V0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzQmxvY2tOb2RlKG5vZGUpKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxldCBuZXh0ID0gbm9kZS5uZXh0U2libGluZztcbiAgICAgICAgICAgIHdoaWxlIChuZXh0ICYmIGlzSWdub3JhYmxlKG5leHQpKSB7XG4gICAgICAgICAgICAgICAgbW92ZU5vZGUgPSBuZXh0LnBhcmVudE5vZGU7XG4gICAgICAgICAgICAgICAgbW92ZU9mZnNldCA9IGRvbUluZGV4KG5leHQpICsgMTtcbiAgICAgICAgICAgICAgICBuZXh0ID0gbmV4dC5uZXh0U2libGluZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghbmV4dCkge1xuICAgICAgICAgICAgICAgIG5vZGUgPSBub2RlLnBhcmVudE5vZGU7XG4gICAgICAgICAgICAgICAgaWYgKG5vZGUgPT0gdmlldy5kb20pXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIG9mZnNldCA9IGxlbiA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBub2RlID0gbmV4dDtcbiAgICAgICAgICAgICAgICBvZmZzZXQgPSAwO1xuICAgICAgICAgICAgICAgIGxlbiA9IG5vZGVMZW4obm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKG1vdmVOb2RlKVxuICAgICAgICBzZXRTZWxGb2N1cyh2aWV3LCBzZWwsIG1vdmVOb2RlLCBtb3ZlT2Zmc2V0KTtcbn1cbmZ1bmN0aW9uIGlzQmxvY2tOb2RlKGRvbSkge1xuICAgIGxldCBkZXNjID0gZG9tLnBtVmlld0Rlc2M7XG4gICAgcmV0dXJuIGRlc2MgJiYgZGVzYy5ub2RlICYmIGRlc2Mubm9kZS5pc0Jsb2NrO1xufVxuZnVuY3Rpb24gc2V0U2VsRm9jdXModmlldywgc2VsLCBub2RlLCBvZmZzZXQpIHtcbiAgICBpZiAoc2VsZWN0aW9uQ29sbGFwc2VkKHNlbCkpIHtcbiAgICAgICAgbGV0IHJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcbiAgICAgICAgcmFuZ2Uuc2V0RW5kKG5vZGUsIG9mZnNldCk7XG4gICAgICAgIHJhbmdlLnNldFN0YXJ0KG5vZGUsIG9mZnNldCk7XG4gICAgICAgIHNlbC5yZW1vdmVBbGxSYW5nZXMoKTtcbiAgICAgICAgc2VsLmFkZFJhbmdlKHJhbmdlKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoc2VsLmV4dGVuZCkge1xuICAgICAgICBzZWwuZXh0ZW5kKG5vZGUsIG9mZnNldCk7XG4gICAgfVxuICAgIHZpZXcuZG9tT2JzZXJ2ZXIuc2V0Q3VyU2VsZWN0aW9uKCk7XG4gICAgbGV0IHsgc3RhdGUgfSA9IHZpZXc7XG4gICAgLy8gSWYgbm8gc3RhdGUgdXBkYXRlIGVuZHMgdXAgaGFwcGVuaW5nLCByZXNldCB0aGUgc2VsZWN0aW9uLlxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBpZiAodmlldy5zdGF0ZSA9PSBzdGF0ZSlcbiAgICAgICAgICAgIHNlbGVjdGlvblRvRE9NKHZpZXcpO1xuICAgIH0sIDUwKTtcbn1cbi8vIENoZWNrIHdoZXRoZXIgdmVydGljYWwgc2VsZWN0aW9uIG1vdGlvbiB3b3VsZCBpbnZvbHZlIG5vZGVcbi8vIHNlbGVjdGlvbnMuIElmIHNvLCBhcHBseSBpdCAoaWYgbm90LCB0aGUgcmVzdWx0IGlzIGxlZnQgdG8gdGhlXG4vLyBicm93c2VyKVxuZnVuY3Rpb24gc2VsZWN0VmVydGljYWxseSh2aWV3LCBkaXIsIG1vZHMpIHtcbiAgICBsZXQgc2VsID0gdmlldy5zdGF0ZS5zZWxlY3Rpb247XG4gICAgaWYgKHNlbCBpbnN0YW5jZW9mIFRleHRTZWxlY3Rpb24gJiYgIXNlbC5lbXB0eSB8fCBtb2RzLmluZGV4T2YoXCJzXCIpID4gLTEpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBpZiAobWFjICYmIG1vZHMuaW5kZXhPZihcIm1cIikgPiAtMSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGxldCB7ICRmcm9tLCAkdG8gfSA9IHNlbDtcbiAgICBpZiAoISRmcm9tLnBhcmVudC5pbmxpbmVDb250ZW50IHx8IHZpZXcuZW5kT2ZUZXh0YmxvY2soZGlyIDwgMCA/IFwidXBcIiA6IFwiZG93blwiKSkge1xuICAgICAgICBsZXQgbmV4dCA9IG1vdmVTZWxlY3Rpb25CbG9jayh2aWV3LnN0YXRlLCBkaXIpO1xuICAgICAgICBpZiAobmV4dCAmJiAobmV4dCBpbnN0YW5jZW9mIE5vZGVTZWxlY3Rpb24pKVxuICAgICAgICAgICAgcmV0dXJuIGFwcGx5KHZpZXcsIG5leHQpO1xuICAgIH1cbiAgICBpZiAoISRmcm9tLnBhcmVudC5pbmxpbmVDb250ZW50KSB7XG4gICAgICAgIGxldCBzaWRlID0gZGlyIDwgMCA/ICRmcm9tIDogJHRvO1xuICAgICAgICBsZXQgYmV5b25kID0gc2VsIGluc3RhbmNlb2YgQWxsU2VsZWN0aW9uID8gU2VsZWN0aW9uLm5lYXIoc2lkZSwgZGlyKSA6IFNlbGVjdGlvbi5maW5kRnJvbShzaWRlLCBkaXIpO1xuICAgICAgICByZXR1cm4gYmV5b25kID8gYXBwbHkodmlldywgYmV5b25kKSA6IGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBzdG9wTmF0aXZlSG9yaXpvbnRhbERlbGV0ZSh2aWV3LCBkaXIpIHtcbiAgICBpZiAoISh2aWV3LnN0YXRlLnNlbGVjdGlvbiBpbnN0YW5jZW9mIFRleHRTZWxlY3Rpb24pKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICBsZXQgeyAkaGVhZCwgJGFuY2hvciwgZW1wdHkgfSA9IHZpZXcuc3RhdGUuc2VsZWN0aW9uO1xuICAgIGlmICghJGhlYWQuc2FtZVBhcmVudCgkYW5jaG9yKSlcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgaWYgKCFlbXB0eSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGlmICh2aWV3LmVuZE9mVGV4dGJsb2NrKGRpciA+IDAgPyBcImZvcndhcmRcIiA6IFwiYmFja3dhcmRcIikpXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIGxldCBuZXh0Tm9kZSA9ICEkaGVhZC50ZXh0T2Zmc2V0ICYmIChkaXIgPCAwID8gJGhlYWQubm9kZUJlZm9yZSA6ICRoZWFkLm5vZGVBZnRlcik7XG4gICAgaWYgKG5leHROb2RlICYmICFuZXh0Tm9kZS5pc1RleHQpIHtcbiAgICAgICAgbGV0IHRyID0gdmlldy5zdGF0ZS50cjtcbiAgICAgICAgaWYgKGRpciA8IDApXG4gICAgICAgICAgICB0ci5kZWxldGUoJGhlYWQucG9zIC0gbmV4dE5vZGUubm9kZVNpemUsICRoZWFkLnBvcyk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHRyLmRlbGV0ZSgkaGVhZC5wb3MsICRoZWFkLnBvcyArIG5leHROb2RlLm5vZGVTaXplKTtcbiAgICAgICAgdmlldy5kaXNwYXRjaCh0cik7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBzd2l0Y2hFZGl0YWJsZSh2aWV3LCBub2RlLCBzdGF0ZSkge1xuICAgIHZpZXcuZG9tT2JzZXJ2ZXIuc3RvcCgpO1xuICAgIG5vZGUuY29udGVudEVkaXRhYmxlID0gc3RhdGU7XG4gICAgdmlldy5kb21PYnNlcnZlci5zdGFydCgpO1xufVxuLy8gSXNzdWUgIzg2NyAvICMxMDkwIC8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9OTAzODIxXG4vLyBJbiB3aGljaCBTYWZhcmkgKGFuZCBhdCBzb21lIHBvaW50IGluIHRoZSBwYXN0LCBDaHJvbWUpIGRvZXMgcmVhbGx5XG4vLyB3cm9uZyB0aGluZ3Mgd2hlbiB0aGUgZG93biBhcnJvdyBpcyBwcmVzc2VkIHdoZW4gdGhlIGN1cnNvciBpc1xuLy8gZGlyZWN0bHkgYXQgdGhlIHN0YXJ0IG9mIGEgdGV4dGJsb2NrIGFuZCBoYXMgYW4gdW5lZGl0YWJsZSBub2RlXG4vLyBhZnRlciBpdFxuZnVuY3Rpb24gc2FmYXJpRG93bkFycm93QnVnKHZpZXcpIHtcbiAgICBpZiAoIXNhZmFyaSB8fCB2aWV3LnN0YXRlLnNlbGVjdGlvbi4kaGVhZC5wYXJlbnRPZmZzZXQgPiAwKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgbGV0IHsgZm9jdXNOb2RlLCBmb2N1c09mZnNldCB9ID0gdmlldy5kb21TZWxlY3Rpb24oKTtcbiAgICBpZiAoZm9jdXNOb2RlICYmIGZvY3VzTm9kZS5ub2RlVHlwZSA9PSAxICYmIGZvY3VzT2Zmc2V0ID09IDAgJiZcbiAgICAgICAgZm9jdXNOb2RlLmZpcnN0Q2hpbGQgJiYgZm9jdXNOb2RlLmZpcnN0Q2hpbGQuY29udGVudEVkaXRhYmxlID09IFwiZmFsc2VcIikge1xuICAgICAgICBsZXQgY2hpbGQgPSBmb2N1c05vZGUuZmlyc3RDaGlsZDtcbiAgICAgICAgc3dpdGNoRWRpdGFibGUodmlldywgY2hpbGQsIFwidHJ1ZVwiKTtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiBzd2l0Y2hFZGl0YWJsZSh2aWV3LCBjaGlsZCwgXCJmYWxzZVwiKSwgMjApO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG4vLyBBIGJhY2tkcm9wIGtleSBtYXBwaW5nIHVzZWQgdG8gbWFrZSBzdXJlIHdlIGFsd2F5cyBzdXBwcmVzcyBrZXlzXG4vLyB0aGF0IGhhdmUgYSBkYW5nZXJvdXMgZGVmYXVsdCBlZmZlY3QsIGV2ZW4gaWYgdGhlIGNvbW1hbmRzIHRoZXkgYXJlXG4vLyBib3VuZCB0byByZXR1cm4gZmFsc2UsIGFuZCB0byBtYWtlIHN1cmUgdGhhdCBjdXJzb3ItbW90aW9uIGtleXNcbi8vIGZpbmQgYSBjdXJzb3IgKGFzIG9wcG9zZWQgdG8gYSBub2RlIHNlbGVjdGlvbikgd2hlbiBwcmVzc2VkLiBGb3Jcbi8vIGN1cnNvci1tb3Rpb24ga2V5cywgdGhlIGNvZGUgaW4gdGhlIGhhbmRsZXJzIGFsc28gdGFrZXMgY2FyZSBvZlxuLy8gYmxvY2sgc2VsZWN0aW9ucy5cbmZ1bmN0aW9uIGdldE1vZHMoZXZlbnQpIHtcbiAgICBsZXQgcmVzdWx0ID0gXCJcIjtcbiAgICBpZiAoZXZlbnQuY3RybEtleSlcbiAgICAgICAgcmVzdWx0ICs9IFwiY1wiO1xuICAgIGlmIChldmVudC5tZXRhS2V5KVxuICAgICAgICByZXN1bHQgKz0gXCJtXCI7XG4gICAgaWYgKGV2ZW50LmFsdEtleSlcbiAgICAgICAgcmVzdWx0ICs9IFwiYVwiO1xuICAgIGlmIChldmVudC5zaGlmdEtleSlcbiAgICAgICAgcmVzdWx0ICs9IFwic1wiO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBjYXB0dXJlS2V5RG93bih2aWV3LCBldmVudCkge1xuICAgIGxldCBjb2RlID0gZXZlbnQua2V5Q29kZSwgbW9kcyA9IGdldE1vZHMoZXZlbnQpO1xuICAgIGlmIChjb2RlID09IDggfHwgKG1hYyAmJiBjb2RlID09IDcyICYmIG1vZHMgPT0gXCJjXCIpKSB7IC8vIEJhY2tzcGFjZSwgQ3RybC1oIG9uIE1hY1xuICAgICAgICByZXR1cm4gc3RvcE5hdGl2ZUhvcml6b250YWxEZWxldGUodmlldywgLTEpIHx8IHNraXBJZ25vcmVkTm9kZXNMZWZ0KHZpZXcpO1xuICAgIH1cbiAgICBlbHNlIGlmIChjb2RlID09IDQ2IHx8IChtYWMgJiYgY29kZSA9PSA2OCAmJiBtb2RzID09IFwiY1wiKSkgeyAvLyBEZWxldGUsIEN0cmwtZCBvbiBNYWNcbiAgICAgICAgcmV0dXJuIHN0b3BOYXRpdmVIb3Jpem9udGFsRGVsZXRlKHZpZXcsIDEpIHx8IHNraXBJZ25vcmVkTm9kZXNSaWdodCh2aWV3KTtcbiAgICB9XG4gICAgZWxzZSBpZiAoY29kZSA9PSAxMyB8fCBjb2RlID09IDI3KSB7IC8vIEVudGVyLCBFc2NcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGVsc2UgaWYgKGNvZGUgPT0gMzcgfHwgKG1hYyAmJiBjb2RlID09IDY2ICYmIG1vZHMgPT0gXCJjXCIpKSB7IC8vIExlZnQgYXJyb3csIEN0cmwtYiBvbiBNYWNcbiAgICAgICAgcmV0dXJuIHNlbGVjdEhvcml6b250YWxseSh2aWV3LCAtMSwgbW9kcykgfHwgc2tpcElnbm9yZWROb2Rlc0xlZnQodmlldyk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGNvZGUgPT0gMzkgfHwgKG1hYyAmJiBjb2RlID09IDcwICYmIG1vZHMgPT0gXCJjXCIpKSB7IC8vIFJpZ2h0IGFycm93LCBDdHJsLWYgb24gTWFjXG4gICAgICAgIHJldHVybiBzZWxlY3RIb3Jpem9udGFsbHkodmlldywgMSwgbW9kcykgfHwgc2tpcElnbm9yZWROb2Rlc1JpZ2h0KHZpZXcpO1xuICAgIH1cbiAgICBlbHNlIGlmIChjb2RlID09IDM4IHx8IChtYWMgJiYgY29kZSA9PSA4MCAmJiBtb2RzID09IFwiY1wiKSkgeyAvLyBVcCBhcnJvdywgQ3RybC1wIG9uIE1hY1xuICAgICAgICByZXR1cm4gc2VsZWN0VmVydGljYWxseSh2aWV3LCAtMSwgbW9kcykgfHwgc2tpcElnbm9yZWROb2Rlc0xlZnQodmlldyk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGNvZGUgPT0gNDAgfHwgKG1hYyAmJiBjb2RlID09IDc4ICYmIG1vZHMgPT0gXCJjXCIpKSB7IC8vIERvd24gYXJyb3csIEN0cmwtbiBvbiBNYWNcbiAgICAgICAgcmV0dXJuIHNhZmFyaURvd25BcnJvd0J1Zyh2aWV3KSB8fCBzZWxlY3RWZXJ0aWNhbGx5KHZpZXcsIDEsIG1vZHMpIHx8IHNraXBJZ25vcmVkTm9kZXNSaWdodCh2aWV3KTtcbiAgICB9XG4gICAgZWxzZSBpZiAobW9kcyA9PSAobWFjID8gXCJtXCIgOiBcImNcIikgJiZcbiAgICAgICAgKGNvZGUgPT0gNjYgfHwgY29kZSA9PSA3MyB8fCBjb2RlID09IDg5IHx8IGNvZGUgPT0gOTApKSB7IC8vIE1vZC1bYml5el1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gc2VyaWFsaXplRm9yQ2xpcGJvYXJkKHZpZXcsIHNsaWNlKSB7XG4gICAgbGV0IGNvbnRleHQgPSBbXSwgeyBjb250ZW50LCBvcGVuU3RhcnQsIG9wZW5FbmQgfSA9IHNsaWNlO1xuICAgIHdoaWxlIChvcGVuU3RhcnQgPiAxICYmIG9wZW5FbmQgPiAxICYmIGNvbnRlbnQuY2hpbGRDb3VudCA9PSAxICYmIGNvbnRlbnQuZmlyc3RDaGlsZC5jaGlsZENvdW50ID09IDEpIHtcbiAgICAgICAgb3BlblN0YXJ0LS07XG4gICAgICAgIG9wZW5FbmQtLTtcbiAgICAgICAgbGV0IG5vZGUgPSBjb250ZW50LmZpcnN0Q2hpbGQ7XG4gICAgICAgIGNvbnRleHQucHVzaChub2RlLnR5cGUubmFtZSwgbm9kZS5hdHRycyAhPSBub2RlLnR5cGUuZGVmYXVsdEF0dHJzID8gbm9kZS5hdHRycyA6IG51bGwpO1xuICAgICAgICBjb250ZW50ID0gbm9kZS5jb250ZW50O1xuICAgIH1cbiAgICBsZXQgc2VyaWFsaXplciA9IHZpZXcuc29tZVByb3AoXCJjbGlwYm9hcmRTZXJpYWxpemVyXCIpIHx8IERPTVNlcmlhbGl6ZXIuZnJvbVNjaGVtYSh2aWV3LnN0YXRlLnNjaGVtYSk7XG4gICAgbGV0IGRvYyA9IGRldGFjaGVkRG9jKCksIHdyYXAgPSBkb2MuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICB3cmFwLmFwcGVuZENoaWxkKHNlcmlhbGl6ZXIuc2VyaWFsaXplRnJhZ21lbnQoY29udGVudCwgeyBkb2N1bWVudDogZG9jIH0pKTtcbiAgICBsZXQgZmlyc3RDaGlsZCA9IHdyYXAuZmlyc3RDaGlsZCwgbmVlZHNXcmFwLCB3cmFwcGVycyA9IDA7XG4gICAgd2hpbGUgKGZpcnN0Q2hpbGQgJiYgZmlyc3RDaGlsZC5ub2RlVHlwZSA9PSAxICYmIChuZWVkc1dyYXAgPSB3cmFwTWFwW2ZpcnN0Q2hpbGQubm9kZU5hbWUudG9Mb3dlckNhc2UoKV0pKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSBuZWVkc1dyYXAubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgIGxldCB3cmFwcGVyID0gZG9jLmNyZWF0ZUVsZW1lbnQobmVlZHNXcmFwW2ldKTtcbiAgICAgICAgICAgIHdoaWxlICh3cmFwLmZpcnN0Q2hpbGQpXG4gICAgICAgICAgICAgICAgd3JhcHBlci5hcHBlbmRDaGlsZCh3cmFwLmZpcnN0Q2hpbGQpO1xuICAgICAgICAgICAgd3JhcC5hcHBlbmRDaGlsZCh3cmFwcGVyKTtcbiAgICAgICAgICAgIHdyYXBwZXJzKys7XG4gICAgICAgIH1cbiAgICAgICAgZmlyc3RDaGlsZCA9IHdyYXAuZmlyc3RDaGlsZDtcbiAgICB9XG4gICAgaWYgKGZpcnN0Q2hpbGQgJiYgZmlyc3RDaGlsZC5ub2RlVHlwZSA9PSAxKVxuICAgICAgICBmaXJzdENoaWxkLnNldEF0dHJpYnV0ZShcImRhdGEtcG0tc2xpY2VcIiwgYCR7b3BlblN0YXJ0fSAke29wZW5FbmR9JHt3cmFwcGVycyA/IGAgLSR7d3JhcHBlcnN9YCA6IFwiXCJ9ICR7SlNPTi5zdHJpbmdpZnkoY29udGV4dCl9YCk7XG4gICAgbGV0IHRleHQgPSB2aWV3LnNvbWVQcm9wKFwiY2xpcGJvYXJkVGV4dFNlcmlhbGl6ZXJcIiwgZiA9PiBmKHNsaWNlKSkgfHxcbiAgICAgICAgc2xpY2UuY29udGVudC50ZXh0QmV0d2VlbigwLCBzbGljZS5jb250ZW50LnNpemUsIFwiXFxuXFxuXCIpO1xuICAgIHJldHVybiB7IGRvbTogd3JhcCwgdGV4dCB9O1xufVxuLy8gUmVhZCBhIHNsaWNlIG9mIGNvbnRlbnQgZnJvbSB0aGUgY2xpcGJvYXJkIChvciBkcm9wIGRhdGEpLlxuZnVuY3Rpb24gcGFyc2VGcm9tQ2xpcGJvYXJkKHZpZXcsIHRleHQsIGh0bWwsIHBsYWluVGV4dCwgJGNvbnRleHQpIHtcbiAgICBsZXQgaW5Db2RlID0gJGNvbnRleHQucGFyZW50LnR5cGUuc3BlYy5jb2RlO1xuICAgIGxldCBkb20sIHNsaWNlO1xuICAgIGlmICghaHRtbCAmJiAhdGV4dClcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgbGV0IGFzVGV4dCA9IHRleHQgJiYgKHBsYWluVGV4dCB8fCBpbkNvZGUgfHwgIWh0bWwpO1xuICAgIGlmIChhc1RleHQpIHtcbiAgICAgICAgdmlldy5zb21lUHJvcChcInRyYW5zZm9ybVBhc3RlZFRleHRcIiwgZiA9PiB7IHRleHQgPSBmKHRleHQsIGluQ29kZSB8fCBwbGFpblRleHQpOyB9KTtcbiAgICAgICAgaWYgKGluQ29kZSlcbiAgICAgICAgICAgIHJldHVybiB0ZXh0ID8gbmV3IFNsaWNlKEZyYWdtZW50LmZyb20odmlldy5zdGF0ZS5zY2hlbWEudGV4dCh0ZXh0LnJlcGxhY2UoL1xcclxcbj8vZywgXCJcXG5cIikpKSwgMCwgMCkgOiBTbGljZS5lbXB0eTtcbiAgICAgICAgbGV0IHBhcnNlZCA9IHZpZXcuc29tZVByb3AoXCJjbGlwYm9hcmRUZXh0UGFyc2VyXCIsIGYgPT4gZih0ZXh0LCAkY29udGV4dCwgcGxhaW5UZXh0KSk7XG4gICAgICAgIGlmIChwYXJzZWQpIHtcbiAgICAgICAgICAgIHNsaWNlID0gcGFyc2VkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbGV0IG1hcmtzID0gJGNvbnRleHQubWFya3MoKTtcbiAgICAgICAgICAgIGxldCB7IHNjaGVtYSB9ID0gdmlldy5zdGF0ZSwgc2VyaWFsaXplciA9IERPTVNlcmlhbGl6ZXIuZnJvbVNjaGVtYShzY2hlbWEpO1xuICAgICAgICAgICAgZG9tID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICAgIHRleHQuc3BsaXQoLyg/Olxcclxcbj98XFxuKSsvKS5mb3JFYWNoKGJsb2NrID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgcCA9IGRvbS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKSk7XG4gICAgICAgICAgICAgICAgaWYgKGJsb2NrKVxuICAgICAgICAgICAgICAgICAgICBwLmFwcGVuZENoaWxkKHNlcmlhbGl6ZXIuc2VyaWFsaXplTm9kZShzY2hlbWEudGV4dChibG9jaywgbWFya3MpKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdmlldy5zb21lUHJvcChcInRyYW5zZm9ybVBhc3RlZEhUTUxcIiwgZiA9PiB7IGh0bWwgPSBmKGh0bWwpOyB9KTtcbiAgICAgICAgZG9tID0gcmVhZEhUTUwoaHRtbCk7XG4gICAgICAgIGlmICh3ZWJraXQpXG4gICAgICAgICAgICByZXN0b3JlUmVwbGFjZWRTcGFjZXMoZG9tKTtcbiAgICB9XG4gICAgbGV0IGNvbnRleHROb2RlID0gZG9tICYmIGRvbS5xdWVyeVNlbGVjdG9yKFwiW2RhdGEtcG0tc2xpY2VdXCIpO1xuICAgIGxldCBzbGljZURhdGEgPSBjb250ZXh0Tm9kZSAmJiAvXihcXGQrKSAoXFxkKykoPzogLShcXGQrKSk/ICguKikvLmV4ZWMoY29udGV4dE5vZGUuZ2V0QXR0cmlidXRlKFwiZGF0YS1wbS1zbGljZVwiKSB8fCBcIlwiKTtcbiAgICBpZiAoc2xpY2VEYXRhICYmIHNsaWNlRGF0YVszXSlcbiAgICAgICAgZm9yIChsZXQgaSA9ICtzbGljZURhdGFbM107IGkgPiAwICYmIGRvbS5maXJzdENoaWxkOyBpLS0pXG4gICAgICAgICAgICBkb20gPSBkb20uZmlyc3RDaGlsZDtcbiAgICBpZiAoIXNsaWNlKSB7XG4gICAgICAgIGxldCBwYXJzZXIgPSB2aWV3LnNvbWVQcm9wKFwiY2xpcGJvYXJkUGFyc2VyXCIpIHx8IHZpZXcuc29tZVByb3AoXCJkb21QYXJzZXJcIikgfHwgRE9NUGFyc2VyLmZyb21TY2hlbWEodmlldy5zdGF0ZS5zY2hlbWEpO1xuICAgICAgICBzbGljZSA9IHBhcnNlci5wYXJzZVNsaWNlKGRvbSwge1xuICAgICAgICAgICAgcHJlc2VydmVXaGl0ZXNwYWNlOiAhIShhc1RleHQgfHwgc2xpY2VEYXRhKSxcbiAgICAgICAgICAgIGNvbnRleHQ6ICRjb250ZXh0LFxuICAgICAgICAgICAgcnVsZUZyb21Ob2RlKGRvbSkge1xuICAgICAgICAgICAgICAgIGlmIChkb20ubm9kZU5hbWUgPT0gXCJCUlwiICYmICFkb20ubmV4dFNpYmxpbmcgJiZcbiAgICAgICAgICAgICAgICAgICAgZG9tLnBhcmVudE5vZGUgJiYgIWlubGluZVBhcmVudHMudGVzdChkb20ucGFyZW50Tm9kZS5ub2RlTmFtZSkpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IGlnbm9yZTogdHJ1ZSB9O1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKHNsaWNlRGF0YSkge1xuICAgICAgICBzbGljZSA9IGFkZENvbnRleHQoY2xvc2VTbGljZShzbGljZSwgK3NsaWNlRGF0YVsxXSwgK3NsaWNlRGF0YVsyXSksIHNsaWNlRGF0YVs0XSk7XG4gICAgfVxuICAgIGVsc2UgeyAvLyBIVE1MIHdhc24ndCBjcmVhdGVkIGJ5IFByb3NlTWlycm9yLiBNYWtlIHN1cmUgdG9wLWxldmVsIHNpYmxpbmdzIGFyZSBjb2hlcmVudFxuICAgICAgICBzbGljZSA9IFNsaWNlLm1heE9wZW4obm9ybWFsaXplU2libGluZ3Moc2xpY2UuY29udGVudCwgJGNvbnRleHQpLCB0cnVlKTtcbiAgICAgICAgaWYgKHNsaWNlLm9wZW5TdGFydCB8fCBzbGljZS5vcGVuRW5kKSB7XG4gICAgICAgICAgICBsZXQgb3BlblN0YXJ0ID0gMCwgb3BlbkVuZCA9IDA7XG4gICAgICAgICAgICBmb3IgKGxldCBub2RlID0gc2xpY2UuY29udGVudC5maXJzdENoaWxkOyBvcGVuU3RhcnQgPCBzbGljZS5vcGVuU3RhcnQgJiYgIW5vZGUudHlwZS5zcGVjLmlzb2xhdGluZzsgb3BlblN0YXJ0KyssIG5vZGUgPSBub2RlLmZpcnN0Q2hpbGQpIHsgfVxuICAgICAgICAgICAgZm9yIChsZXQgbm9kZSA9IHNsaWNlLmNvbnRlbnQubGFzdENoaWxkOyBvcGVuRW5kIDwgc2xpY2Uub3BlbkVuZCAmJiAhbm9kZS50eXBlLnNwZWMuaXNvbGF0aW5nOyBvcGVuRW5kKyssIG5vZGUgPSBub2RlLmxhc3RDaGlsZCkgeyB9XG4gICAgICAgICAgICBzbGljZSA9IGNsb3NlU2xpY2Uoc2xpY2UsIG9wZW5TdGFydCwgb3BlbkVuZCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmlldy5zb21lUHJvcChcInRyYW5zZm9ybVBhc3RlZFwiLCBmID0+IHsgc2xpY2UgPSBmKHNsaWNlKTsgfSk7XG4gICAgcmV0dXJuIHNsaWNlO1xufVxuY29uc3QgaW5saW5lUGFyZW50cyA9IC9eKGF8YWJicnxhY3JvbnltfGJ8Y2l0ZXxjb2RlfGRlbHxlbXxpfGluc3xrYmR8bGFiZWx8b3V0cHV0fHF8cnVieXxzfHNhbXB8c3BhbnxzdHJvbmd8c3VifHN1cHx0aW1lfHV8dHR8dmFyKSQvaTtcbi8vIFRha2VzIGEgc2xpY2UgcGFyc2VkIHdpdGggcGFyc2VTbGljZSwgd2hpY2ggbWVhbnMgdGhlcmUgaGFzbid0IGJlZW5cbi8vIGFueSBjb250ZW50LWV4cHJlc3Npb24gY2hlY2tpbmcgZG9uZSBvbiB0aGUgdG9wIG5vZGVzLCB0cmllcyB0b1xuLy8gZmluZCBhIHBhcmVudCBub2RlIGluIHRoZSBjdXJyZW50IGNvbnRleHQgdGhhdCBtaWdodCBmaXQgdGhlIG5vZGVzLFxuLy8gYW5kIGlmIHN1Y2Nlc3NmdWwsIHJlYnVpbGRzIHRoZSBzbGljZSBzbyB0aGF0IGl0IGZpdHMgaW50byB0aGF0IHBhcmVudC5cbi8vXG4vLyBUaGlzIGFkZHJlc3NlcyB0aGUgcHJvYmxlbSB0aGF0IFRyYW5zZm9ybS5yZXBsYWNlIGV4cGVjdHMgYVxuLy8gY29oZXJlbnQgc2xpY2UsIGFuZCB3aWxsIGZhaWwgdG8gcGxhY2UgYSBzZXQgb2Ygc2libGluZ3MgdGhhdCBkb24ndFxuLy8gZml0IGFueXdoZXJlIGluIHRoZSBzY2hlbWEuXG5mdW5jdGlvbiBub3JtYWxpemVTaWJsaW5ncyhmcmFnbWVudCwgJGNvbnRleHQpIHtcbiAgICBpZiAoZnJhZ21lbnQuY2hpbGRDb3VudCA8IDIpXG4gICAgICAgIHJldHVybiBmcmFnbWVudDtcbiAgICBmb3IgKGxldCBkID0gJGNvbnRleHQuZGVwdGg7IGQgPj0gMDsgZC0tKSB7XG4gICAgICAgIGxldCBwYXJlbnQgPSAkY29udGV4dC5ub2RlKGQpO1xuICAgICAgICBsZXQgbWF0Y2ggPSBwYXJlbnQuY29udGVudE1hdGNoQXQoJGNvbnRleHQuaW5kZXgoZCkpO1xuICAgICAgICBsZXQgbGFzdFdyYXAsIHJlc3VsdCA9IFtdO1xuICAgICAgICBmcmFnbWVudC5mb3JFYWNoKG5vZGUgPT4ge1xuICAgICAgICAgICAgaWYgKCFyZXN1bHQpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgbGV0IHdyYXAgPSBtYXRjaC5maW5kV3JhcHBpbmcobm9kZS50eXBlKSwgaW5MYXN0O1xuICAgICAgICAgICAgaWYgKCF3cmFwKVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgPSBudWxsO1xuICAgICAgICAgICAgaWYgKGluTGFzdCA9IHJlc3VsdC5sZW5ndGggJiYgbGFzdFdyYXAubGVuZ3RoICYmIGFkZFRvU2libGluZyh3cmFwLCBsYXN0V3JhcCwgbm9kZSwgcmVzdWx0W3Jlc3VsdC5sZW5ndGggLSAxXSwgMCkpIHtcbiAgICAgICAgICAgICAgICByZXN1bHRbcmVzdWx0Lmxlbmd0aCAtIDFdID0gaW5MYXN0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5sZW5ndGgpXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdFtyZXN1bHQubGVuZ3RoIC0gMV0gPSBjbG9zZVJpZ2h0KHJlc3VsdFtyZXN1bHQubGVuZ3RoIC0gMV0sIGxhc3RXcmFwLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgbGV0IHdyYXBwZWQgPSB3aXRoV3JhcHBlcnMobm9kZSwgd3JhcCk7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2god3JhcHBlZCk7XG4gICAgICAgICAgICAgICAgbWF0Y2ggPSBtYXRjaC5tYXRjaFR5cGUod3JhcHBlZC50eXBlKTtcbiAgICAgICAgICAgICAgICBsYXN0V3JhcCA9IHdyYXA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAocmVzdWx0KVxuICAgICAgICAgICAgcmV0dXJuIEZyYWdtZW50LmZyb20ocmVzdWx0KTtcbiAgICB9XG4gICAgcmV0dXJuIGZyYWdtZW50O1xufVxuZnVuY3Rpb24gd2l0aFdyYXBwZXJzKG5vZGUsIHdyYXAsIGZyb20gPSAwKSB7XG4gICAgZm9yIChsZXQgaSA9IHdyYXAubGVuZ3RoIC0gMTsgaSA+PSBmcm9tOyBpLS0pXG4gICAgICAgIG5vZGUgPSB3cmFwW2ldLmNyZWF0ZShudWxsLCBGcmFnbWVudC5mcm9tKG5vZGUpKTtcbiAgICByZXR1cm4gbm9kZTtcbn1cbi8vIFVzZWQgdG8gZ3JvdXAgYWRqYWNlbnQgbm9kZXMgd3JhcHBlZCBpbiBzaW1pbGFyIHBhcmVudHMgYnlcbi8vIG5vcm1hbGl6ZVNpYmxpbmdzIGludG8gdGhlIHNhbWUgcGFyZW50IG5vZGVcbmZ1bmN0aW9uIGFkZFRvU2libGluZyh3cmFwLCBsYXN0V3JhcCwgbm9kZSwgc2libGluZywgZGVwdGgpIHtcbiAgICBpZiAoZGVwdGggPCB3cmFwLmxlbmd0aCAmJiBkZXB0aCA8IGxhc3RXcmFwLmxlbmd0aCAmJiB3cmFwW2RlcHRoXSA9PSBsYXN0V3JhcFtkZXB0aF0pIHtcbiAgICAgICAgbGV0IGlubmVyID0gYWRkVG9TaWJsaW5nKHdyYXAsIGxhc3RXcmFwLCBub2RlLCBzaWJsaW5nLmxhc3RDaGlsZCwgZGVwdGggKyAxKTtcbiAgICAgICAgaWYgKGlubmVyKVxuICAgICAgICAgICAgcmV0dXJuIHNpYmxpbmcuY29weShzaWJsaW5nLmNvbnRlbnQucmVwbGFjZUNoaWxkKHNpYmxpbmcuY2hpbGRDb3VudCAtIDEsIGlubmVyKSk7XG4gICAgICAgIGxldCBtYXRjaCA9IHNpYmxpbmcuY29udGVudE1hdGNoQXQoc2libGluZy5jaGlsZENvdW50KTtcbiAgICAgICAgaWYgKG1hdGNoLm1hdGNoVHlwZShkZXB0aCA9PSB3cmFwLmxlbmd0aCAtIDEgPyBub2RlLnR5cGUgOiB3cmFwW2RlcHRoICsgMV0pKVxuICAgICAgICAgICAgcmV0dXJuIHNpYmxpbmcuY29weShzaWJsaW5nLmNvbnRlbnQuYXBwZW5kKEZyYWdtZW50LmZyb20od2l0aFdyYXBwZXJzKG5vZGUsIHdyYXAsIGRlcHRoICsgMSkpKSk7XG4gICAgfVxufVxuZnVuY3Rpb24gY2xvc2VSaWdodChub2RlLCBkZXB0aCkge1xuICAgIGlmIChkZXB0aCA9PSAwKVxuICAgICAgICByZXR1cm4gbm9kZTtcbiAgICBsZXQgZnJhZ21lbnQgPSBub2RlLmNvbnRlbnQucmVwbGFjZUNoaWxkKG5vZGUuY2hpbGRDb3VudCAtIDEsIGNsb3NlUmlnaHQobm9kZS5sYXN0Q2hpbGQsIGRlcHRoIC0gMSkpO1xuICAgIGxldCBmaWxsID0gbm9kZS5jb250ZW50TWF0Y2hBdChub2RlLmNoaWxkQ291bnQpLmZpbGxCZWZvcmUoRnJhZ21lbnQuZW1wdHksIHRydWUpO1xuICAgIHJldHVybiBub2RlLmNvcHkoZnJhZ21lbnQuYXBwZW5kKGZpbGwpKTtcbn1cbmZ1bmN0aW9uIGNsb3NlUmFuZ2UoZnJhZ21lbnQsIHNpZGUsIGZyb20sIHRvLCBkZXB0aCwgb3BlbkVuZCkge1xuICAgIGxldCBub2RlID0gc2lkZSA8IDAgPyBmcmFnbWVudC5maXJzdENoaWxkIDogZnJhZ21lbnQubGFzdENoaWxkLCBpbm5lciA9IG5vZGUuY29udGVudDtcbiAgICBpZiAoZGVwdGggPCB0byAtIDEpXG4gICAgICAgIGlubmVyID0gY2xvc2VSYW5nZShpbm5lciwgc2lkZSwgZnJvbSwgdG8sIGRlcHRoICsgMSwgb3BlbkVuZCk7XG4gICAgaWYgKGRlcHRoID49IGZyb20pXG4gICAgICAgIGlubmVyID0gc2lkZSA8IDAgPyBub2RlLmNvbnRlbnRNYXRjaEF0KDApLmZpbGxCZWZvcmUoaW5uZXIsIGZyYWdtZW50LmNoaWxkQ291bnQgPiAxIHx8IG9wZW5FbmQgPD0gZGVwdGgpLmFwcGVuZChpbm5lcilcbiAgICAgICAgICAgIDogaW5uZXIuYXBwZW5kKG5vZGUuY29udGVudE1hdGNoQXQobm9kZS5jaGlsZENvdW50KS5maWxsQmVmb3JlKEZyYWdtZW50LmVtcHR5LCB0cnVlKSk7XG4gICAgcmV0dXJuIGZyYWdtZW50LnJlcGxhY2VDaGlsZChzaWRlIDwgMCA/IDAgOiBmcmFnbWVudC5jaGlsZENvdW50IC0gMSwgbm9kZS5jb3B5KGlubmVyKSk7XG59XG5mdW5jdGlvbiBjbG9zZVNsaWNlKHNsaWNlLCBvcGVuU3RhcnQsIG9wZW5FbmQpIHtcbiAgICBpZiAob3BlblN0YXJ0IDwgc2xpY2Uub3BlblN0YXJ0KVxuICAgICAgICBzbGljZSA9IG5ldyBTbGljZShjbG9zZVJhbmdlKHNsaWNlLmNvbnRlbnQsIC0xLCBvcGVuU3RhcnQsIHNsaWNlLm9wZW5TdGFydCwgMCwgc2xpY2Uub3BlbkVuZCksIG9wZW5TdGFydCwgc2xpY2Uub3BlbkVuZCk7XG4gICAgaWYgKG9wZW5FbmQgPCBzbGljZS5vcGVuRW5kKVxuICAgICAgICBzbGljZSA9IG5ldyBTbGljZShjbG9zZVJhbmdlKHNsaWNlLmNvbnRlbnQsIDEsIG9wZW5FbmQsIHNsaWNlLm9wZW5FbmQsIDAsIDApLCBzbGljZS5vcGVuU3RhcnQsIG9wZW5FbmQpO1xuICAgIHJldHVybiBzbGljZTtcbn1cbi8vIFRyaWNrIGZyb20galF1ZXJ5IC0tIHNvbWUgZWxlbWVudHMgbXVzdCBiZSB3cmFwcGVkIGluIG90aGVyXG4vLyBlbGVtZW50cyBmb3IgaW5uZXJIVE1MIHRvIHdvcmsuIEkuZS4gaWYgeW91IGRvIGBkaXYuaW5uZXJIVE1MID1cbi8vIFwiPHRkPi4uPC90ZD5cImAgdGhlIHRhYmxlIGNlbGxzIGFyZSBpZ25vcmVkLlxuY29uc3Qgd3JhcE1hcCA9IHtcbiAgICB0aGVhZDogW1widGFibGVcIl0sXG4gICAgdGJvZHk6IFtcInRhYmxlXCJdLFxuICAgIHRmb290OiBbXCJ0YWJsZVwiXSxcbiAgICBjYXB0aW9uOiBbXCJ0YWJsZVwiXSxcbiAgICBjb2xncm91cDogW1widGFibGVcIl0sXG4gICAgY29sOiBbXCJ0YWJsZVwiLCBcImNvbGdyb3VwXCJdLFxuICAgIHRyOiBbXCJ0YWJsZVwiLCBcInRib2R5XCJdLFxuICAgIHRkOiBbXCJ0YWJsZVwiLCBcInRib2R5XCIsIFwidHJcIl0sXG4gICAgdGg6IFtcInRhYmxlXCIsIFwidGJvZHlcIiwgXCJ0clwiXVxufTtcbmxldCBfZGV0YWNoZWREb2MgPSBudWxsO1xuZnVuY3Rpb24gZGV0YWNoZWREb2MoKSB7XG4gICAgcmV0dXJuIF9kZXRhY2hlZERvYyB8fCAoX2RldGFjaGVkRG9jID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KFwidGl0bGVcIikpO1xufVxuZnVuY3Rpb24gcmVhZEhUTUwoaHRtbCkge1xuICAgIGxldCBtZXRhcyA9IC9eKFxccyo8bWV0YSBbXj5dKj4pKi8uZXhlYyhodG1sKTtcbiAgICBpZiAobWV0YXMpXG4gICAgICAgIGh0bWwgPSBodG1sLnNsaWNlKG1ldGFzWzBdLmxlbmd0aCk7XG4gICAgbGV0IGVsdCA9IGRldGFjaGVkRG9jKCkuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBsZXQgZmlyc3RUYWcgPSAvPChbYS16XVtePlxcc10rKS9pLmV4ZWMoaHRtbCksIHdyYXA7XG4gICAgaWYgKHdyYXAgPSBmaXJzdFRhZyAmJiB3cmFwTWFwW2ZpcnN0VGFnWzFdLnRvTG93ZXJDYXNlKCldKVxuICAgICAgICBodG1sID0gd3JhcC5tYXAobiA9PiBcIjxcIiArIG4gKyBcIj5cIikuam9pbihcIlwiKSArIGh0bWwgKyB3cmFwLm1hcChuID0+IFwiPC9cIiArIG4gKyBcIj5cIikucmV2ZXJzZSgpLmpvaW4oXCJcIik7XG4gICAgZWx0LmlubmVySFRNTCA9IGh0bWw7XG4gICAgaWYgKHdyYXApXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgd3JhcC5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgIGVsdCA9IGVsdC5xdWVyeVNlbGVjdG9yKHdyYXBbaV0pIHx8IGVsdDtcbiAgICByZXR1cm4gZWx0O1xufVxuLy8gV2Via2l0IGJyb3dzZXJzIGRvIHNvbWUgaGFyZC10by1wcmVkaWN0IHJlcGxhY2VtZW50IG9mIHJlZ3VsYXJcbi8vIHNwYWNlcyB3aXRoIG5vbi1icmVha2luZyBzcGFjZXMgd2hlbiBwdXR0aW5nIGNvbnRlbnQgb24gdGhlXG4vLyBjbGlwYm9hcmQuIFRoaXMgdHJpZXMgdG8gY29udmVydCBzdWNoIG5vbi1icmVha2luZyBzcGFjZXMgKHdoaWNoXG4vLyB3aWxsIGJlIHdyYXBwZWQgaW4gYSBwbGFpbiBzcGFuIG9uIENocm9tZSwgYSBzcGFuIHdpdGggY2xhc3Ncbi8vIEFwcGxlLWNvbnZlcnRlZC1zcGFjZSBvbiBTYWZhcmkpIGJhY2sgdG8gcmVndWxhciBzcGFjZXMuXG5mdW5jdGlvbiByZXN0b3JlUmVwbGFjZWRTcGFjZXMoZG9tKSB7XG4gICAgbGV0IG5vZGVzID0gZG9tLnF1ZXJ5U2VsZWN0b3JBbGwoY2hyb21lID8gXCJzcGFuOm5vdChbY2xhc3NdKTpub3QoW3N0eWxlXSlcIiA6IFwic3Bhbi5BcHBsZS1jb252ZXJ0ZWQtc3BhY2VcIik7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgbm9kZSA9IG5vZGVzW2ldO1xuICAgICAgICBpZiAobm9kZS5jaGlsZE5vZGVzLmxlbmd0aCA9PSAxICYmIG5vZGUudGV4dENvbnRlbnQgPT0gXCJcXHUwMGEwXCIgJiYgbm9kZS5wYXJlbnROb2RlKVxuICAgICAgICAgICAgbm9kZS5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChkb20ub3duZXJEb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShcIiBcIiksIG5vZGUpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGFkZENvbnRleHQoc2xpY2UsIGNvbnRleHQpIHtcbiAgICBpZiAoIXNsaWNlLnNpemUpXG4gICAgICAgIHJldHVybiBzbGljZTtcbiAgICBsZXQgc2NoZW1hID0gc2xpY2UuY29udGVudC5maXJzdENoaWxkLnR5cGUuc2NoZW1hLCBhcnJheTtcbiAgICB0cnkge1xuICAgICAgICBhcnJheSA9IEpTT04ucGFyc2UoY29udGV4dCk7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBzbGljZTtcbiAgICB9XG4gICAgbGV0IHsgY29udGVudCwgb3BlblN0YXJ0LCBvcGVuRW5kIH0gPSBzbGljZTtcbiAgICBmb3IgKGxldCBpID0gYXJyYXkubGVuZ3RoIC0gMjsgaSA+PSAwOyBpIC09IDIpIHtcbiAgICAgICAgbGV0IHR5cGUgPSBzY2hlbWEubm9kZXNbYXJyYXlbaV1dO1xuICAgICAgICBpZiAoIXR5cGUgfHwgdHlwZS5oYXNSZXF1aXJlZEF0dHJzKCkpXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY29udGVudCA9IEZyYWdtZW50LmZyb20odHlwZS5jcmVhdGUoYXJyYXlbaSArIDFdLCBjb250ZW50KSk7XG4gICAgICAgIG9wZW5TdGFydCsrO1xuICAgICAgICBvcGVuRW5kKys7XG4gICAgfVxuICAgIHJldHVybiBuZXcgU2xpY2UoY29udGVudCwgb3BlblN0YXJ0LCBvcGVuRW5kKTtcbn1cblxuLy8gQSBjb2xsZWN0aW9uIG9mIERPTSBldmVudHMgdGhhdCBvY2N1ciB3aXRoaW4gdGhlIGVkaXRvciwgYW5kIGNhbGxiYWNrIGZ1bmN0aW9uc1xuLy8gdG8gaW52b2tlIHdoZW4gdGhlIGV2ZW50IGZpcmVzLlxuY29uc3QgaGFuZGxlcnMgPSB7fTtcbmxldCBlZGl0SGFuZGxlcnMgPSB7fTtcbmNsYXNzIElucHV0U3RhdGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnNoaWZ0S2V5ID0gZmFsc2U7XG4gICAgICAgIHRoaXMubW91c2VEb3duID0gbnVsbDtcbiAgICAgICAgdGhpcy5sYXN0S2V5Q29kZSA9IG51bGw7XG4gICAgICAgIHRoaXMubGFzdEtleUNvZGVUaW1lID0gMDtcbiAgICAgICAgdGhpcy5sYXN0Q2xpY2sgPSB7IHRpbWU6IDAsIHg6IDAsIHk6IDAsIHR5cGU6IFwiXCIgfTtcbiAgICAgICAgdGhpcy5sYXN0U2VsZWN0aW9uT3JpZ2luID0gbnVsbDtcbiAgICAgICAgdGhpcy5sYXN0U2VsZWN0aW9uVGltZSA9IDA7XG4gICAgICAgIHRoaXMubGFzdElPU0VudGVyID0gMDtcbiAgICAgICAgdGhpcy5sYXN0SU9TRW50ZXJGYWxsYmFja1RpbWVvdXQgPSAtMTtcbiAgICAgICAgdGhpcy5sYXN0QW5kcm9pZERlbGV0ZSA9IDA7XG4gICAgICAgIHRoaXMuY29tcG9zaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY29tcG9zaW5nVGltZW91dCA9IC0xO1xuICAgICAgICB0aGlzLmNvbXBvc2l0aW9uTm9kZXMgPSBbXTtcbiAgICAgICAgdGhpcy5jb21wb3NpdGlvbkVuZGVkQXQgPSAtMmU4O1xuICAgICAgICB0aGlzLmRvbUNoYW5nZUNvdW50ID0gMDtcbiAgICAgICAgdGhpcy5ldmVudEhhbmRsZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgdGhpcy5oaWRlU2VsZWN0aW9uR3VhcmQgPSBudWxsO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGluaXRJbnB1dCh2aWV3KSB7XG4gICAgZm9yIChsZXQgZXZlbnQgaW4gaGFuZGxlcnMpIHtcbiAgICAgICAgbGV0IGhhbmRsZXIgPSBoYW5kbGVyc1tldmVudF07XG4gICAgICAgIHZpZXcuZG9tLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIHZpZXcuaW5wdXQuZXZlbnRIYW5kbGVyc1tldmVudF0gPSAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGlmIChldmVudEJlbG9uZ3NUb1ZpZXcodmlldywgZXZlbnQpICYmICFydW5DdXN0b21IYW5kbGVyKHZpZXcsIGV2ZW50KSAmJlxuICAgICAgICAgICAgICAgICh2aWV3LmVkaXRhYmxlIHx8ICEoZXZlbnQudHlwZSBpbiBlZGl0SGFuZGxlcnMpKSlcbiAgICAgICAgICAgICAgICBoYW5kbGVyKHZpZXcsIGV2ZW50KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8vIE9uIFNhZmFyaSwgZm9yIHJlYXNvbnMgYmV5b25kIG15IHVuZGVyc3RhbmRpbmcsIGFkZGluZyBhbiBpbnB1dFxuICAgIC8vIGV2ZW50IGhhbmRsZXIgbWFrZXMgYW4gaXNzdWUgd2hlcmUgdGhlIGNvbXBvc2l0aW9uIHZhbmlzaGVzIHdoZW5cbiAgICAvLyB5b3UgcHJlc3MgZW50ZXIgZ28gYXdheS5cbiAgICBpZiAoc2FmYXJpKVxuICAgICAgICB2aWV3LmRvbS5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgKCkgPT4gbnVsbCk7XG4gICAgZW5zdXJlTGlzdGVuZXJzKHZpZXcpO1xufVxuZnVuY3Rpb24gc2V0U2VsZWN0aW9uT3JpZ2luKHZpZXcsIG9yaWdpbikge1xuICAgIHZpZXcuaW5wdXQubGFzdFNlbGVjdGlvbk9yaWdpbiA9IG9yaWdpbjtcbiAgICB2aWV3LmlucHV0Lmxhc3RTZWxlY3Rpb25UaW1lID0gRGF0ZS5ub3coKTtcbn1cbmZ1bmN0aW9uIGRlc3Ryb3lJbnB1dCh2aWV3KSB7XG4gICAgdmlldy5kb21PYnNlcnZlci5zdG9wKCk7XG4gICAgZm9yIChsZXQgdHlwZSBpbiB2aWV3LmlucHV0LmV2ZW50SGFuZGxlcnMpXG4gICAgICAgIHZpZXcuZG9tLnJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgdmlldy5pbnB1dC5ldmVudEhhbmRsZXJzW3R5cGVdKTtcbiAgICBjbGVhclRpbWVvdXQodmlldy5pbnB1dC5jb21wb3NpbmdUaW1lb3V0KTtcbiAgICBjbGVhclRpbWVvdXQodmlldy5pbnB1dC5sYXN0SU9TRW50ZXJGYWxsYmFja1RpbWVvdXQpO1xufVxuZnVuY3Rpb24gZW5zdXJlTGlzdGVuZXJzKHZpZXcpIHtcbiAgICB2aWV3LnNvbWVQcm9wKFwiaGFuZGxlRE9NRXZlbnRzXCIsIGN1cnJlbnRIYW5kbGVycyA9PiB7XG4gICAgICAgIGZvciAobGV0IHR5cGUgaW4gY3VycmVudEhhbmRsZXJzKVxuICAgICAgICAgICAgaWYgKCF2aWV3LmlucHV0LmV2ZW50SGFuZGxlcnNbdHlwZV0pXG4gICAgICAgICAgICAgICAgdmlldy5kb20uYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCB2aWV3LmlucHV0LmV2ZW50SGFuZGxlcnNbdHlwZV0gPSBldmVudCA9PiBydW5DdXN0b21IYW5kbGVyKHZpZXcsIGV2ZW50KSk7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBydW5DdXN0b21IYW5kbGVyKHZpZXcsIGV2ZW50KSB7XG4gICAgcmV0dXJuIHZpZXcuc29tZVByb3AoXCJoYW5kbGVET01FdmVudHNcIiwgaGFuZGxlcnMgPT4ge1xuICAgICAgICBsZXQgaGFuZGxlciA9IGhhbmRsZXJzW2V2ZW50LnR5cGVdO1xuICAgICAgICByZXR1cm4gaGFuZGxlciA/IGhhbmRsZXIodmlldywgZXZlbnQpIHx8IGV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgOiBmYWxzZTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGV2ZW50QmVsb25nc1RvVmlldyh2aWV3LCBldmVudCkge1xuICAgIGlmICghZXZlbnQuYnViYmxlcylcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgaWYgKGV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBmb3IgKGxldCBub2RlID0gZXZlbnQudGFyZ2V0OyBub2RlICE9IHZpZXcuZG9tOyBub2RlID0gbm9kZS5wYXJlbnROb2RlKVxuICAgICAgICBpZiAoIW5vZGUgfHwgbm9kZS5ub2RlVHlwZSA9PSAxMSB8fFxuICAgICAgICAgICAgKG5vZGUucG1WaWV3RGVzYyAmJiBub2RlLnBtVmlld0Rlc2Muc3RvcEV2ZW50KGV2ZW50KSkpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIHRydWU7XG59XG5mdW5jdGlvbiBkaXNwYXRjaEV2ZW50KHZpZXcsIGV2ZW50KSB7XG4gICAgaWYgKCFydW5DdXN0b21IYW5kbGVyKHZpZXcsIGV2ZW50KSAmJiBoYW5kbGVyc1tldmVudC50eXBlXSAmJlxuICAgICAgICAodmlldy5lZGl0YWJsZSB8fCAhKGV2ZW50LnR5cGUgaW4gZWRpdEhhbmRsZXJzKSkpXG4gICAgICAgIGhhbmRsZXJzW2V2ZW50LnR5cGVdKHZpZXcsIGV2ZW50KTtcbn1cbmVkaXRIYW5kbGVycy5rZXlkb3duID0gKHZpZXcsIF9ldmVudCkgPT4ge1xuICAgIGxldCBldmVudCA9IF9ldmVudDtcbiAgICB2aWV3LmlucHV0LnNoaWZ0S2V5ID0gZXZlbnQua2V5Q29kZSA9PSAxNiB8fCBldmVudC5zaGlmdEtleTtcbiAgICBpZiAoaW5Pck5lYXJDb21wb3NpdGlvbih2aWV3LCBldmVudCkpXG4gICAgICAgIHJldHVybjtcbiAgICB2aWV3LmlucHV0Lmxhc3RLZXlDb2RlID0gZXZlbnQua2V5Q29kZTtcbiAgICB2aWV3LmlucHV0Lmxhc3RLZXlDb2RlVGltZSA9IERhdGUubm93KCk7XG4gICAgLy8gU3VwcHJlc3MgZW50ZXIga2V5IGV2ZW50cyBvbiBDaHJvbWUgQW5kcm9pZCwgYmVjYXVzZSB0aG9zZSB0ZW5kXG4gICAgLy8gdG8gYmUgcGFydCBvZiBhIGNvbmZ1c2VkIHNlcXVlbmNlIG9mIGNvbXBvc2l0aW9uIGV2ZW50cyBmaXJlZCxcbiAgICAvLyBhbmQgaGFuZGxpbmcgdGhlbSBlYWdlcmx5IHRlbmRzIHRvIGNvcnJ1cHQgdGhlIGlucHV0LlxuICAgIGlmIChhbmRyb2lkICYmIGNocm9tZSAmJiBldmVudC5rZXlDb2RlID09IDEzKVxuICAgICAgICByZXR1cm47XG4gICAgaWYgKGV2ZW50LmtleUNvZGUgIT0gMjI5KVxuICAgICAgICB2aWV3LmRvbU9ic2VydmVyLmZvcmNlRmx1c2goKTtcbiAgICAvLyBPbiBpT1MsIGlmIHdlIHByZXZlbnREZWZhdWx0IGVudGVyIGtleSBwcmVzc2VzLCB0aGUgdmlydHVhbFxuICAgIC8vIGtleWJvYXJkIGdldHMgY29uZnVzZWQuIFNvIHRoZSBoYWNrIGhlcmUgaXMgdG8gc2V0IGEgZmxhZyB0aGF0XG4gICAgLy8gbWFrZXMgdGhlIERPTSBjaGFuZ2UgY29kZSByZWNvZ25pemUgdGhhdCB3aGF0IGp1c3QgaGFwcGVucyBzaG91bGRcbiAgICAvLyBiZSByZXBsYWNlZCBieSB3aGF0ZXZlciB0aGUgRW50ZXIga2V5IGhhbmRsZXJzIGRvLlxuICAgIGlmIChpb3MgJiYgZXZlbnQua2V5Q29kZSA9PSAxMyAmJiAhZXZlbnQuY3RybEtleSAmJiAhZXZlbnQuYWx0S2V5ICYmICFldmVudC5tZXRhS2V5KSB7XG4gICAgICAgIGxldCBub3cgPSBEYXRlLm5vdygpO1xuICAgICAgICB2aWV3LmlucHV0Lmxhc3RJT1NFbnRlciA9IG5vdztcbiAgICAgICAgdmlldy5pbnB1dC5sYXN0SU9TRW50ZXJGYWxsYmFja1RpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIGlmICh2aWV3LmlucHV0Lmxhc3RJT1NFbnRlciA9PSBub3cpIHtcbiAgICAgICAgICAgICAgICB2aWV3LnNvbWVQcm9wKFwiaGFuZGxlS2V5RG93blwiLCBmID0+IGYodmlldywga2V5RXZlbnQoMTMsIFwiRW50ZXJcIikpKTtcbiAgICAgICAgICAgICAgICB2aWV3LmlucHV0Lmxhc3RJT1NFbnRlciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIDIwMCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHZpZXcuc29tZVByb3AoXCJoYW5kbGVLZXlEb3duXCIsIGYgPT4gZih2aWV3LCBldmVudCkpIHx8IGNhcHR1cmVLZXlEb3duKHZpZXcsIGV2ZW50KSkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgc2V0U2VsZWN0aW9uT3JpZ2luKHZpZXcsIFwia2V5XCIpO1xuICAgIH1cbn07XG5lZGl0SGFuZGxlcnMua2V5dXAgPSAodmlldywgZXZlbnQpID0+IHtcbiAgICBpZiAoZXZlbnQua2V5Q29kZSA9PSAxNilcbiAgICAgICAgdmlldy5pbnB1dC5zaGlmdEtleSA9IGZhbHNlO1xufTtcbmVkaXRIYW5kbGVycy5rZXlwcmVzcyA9ICh2aWV3LCBfZXZlbnQpID0+IHtcbiAgICBsZXQgZXZlbnQgPSBfZXZlbnQ7XG4gICAgaWYgKGluT3JOZWFyQ29tcG9zaXRpb24odmlldywgZXZlbnQpIHx8ICFldmVudC5jaGFyQ29kZSB8fFxuICAgICAgICBldmVudC5jdHJsS2V5ICYmICFldmVudC5hbHRLZXkgfHwgbWFjICYmIGV2ZW50Lm1ldGFLZXkpXG4gICAgICAgIHJldHVybjtcbiAgICBpZiAodmlldy5zb21lUHJvcChcImhhbmRsZUtleVByZXNzXCIsIGYgPT4gZih2aWV3LCBldmVudCkpKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IHNlbCA9IHZpZXcuc3RhdGUuc2VsZWN0aW9uO1xuICAgIGlmICghKHNlbCBpbnN0YW5jZW9mIFRleHRTZWxlY3Rpb24pIHx8ICFzZWwuJGZyb20uc2FtZVBhcmVudChzZWwuJHRvKSkge1xuICAgICAgICBsZXQgdGV4dCA9IFN0cmluZy5mcm9tQ2hhckNvZGUoZXZlbnQuY2hhckNvZGUpO1xuICAgICAgICBpZiAoIXZpZXcuc29tZVByb3AoXCJoYW5kbGVUZXh0SW5wdXRcIiwgZiA9PiBmKHZpZXcsIHNlbC4kZnJvbS5wb3MsIHNlbC4kdG8ucG9zLCB0ZXh0KSkpXG4gICAgICAgICAgICB2aWV3LmRpc3BhdGNoKHZpZXcuc3RhdGUudHIuaW5zZXJ0VGV4dCh0ZXh0KS5zY3JvbGxJbnRvVmlldygpKTtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG59O1xuZnVuY3Rpb24gZXZlbnRDb29yZHMoZXZlbnQpIHsgcmV0dXJuIHsgbGVmdDogZXZlbnQuY2xpZW50WCwgdG9wOiBldmVudC5jbGllbnRZIH07IH1cbmZ1bmN0aW9uIGlzTmVhcihldmVudCwgY2xpY2spIHtcbiAgICBsZXQgZHggPSBjbGljay54IC0gZXZlbnQuY2xpZW50WCwgZHkgPSBjbGljay55IC0gZXZlbnQuY2xpZW50WTtcbiAgICByZXR1cm4gZHggKiBkeCArIGR5ICogZHkgPCAxMDA7XG59XG5mdW5jdGlvbiBydW5IYW5kbGVyT25Db250ZXh0KHZpZXcsIHByb3BOYW1lLCBwb3MsIGluc2lkZSwgZXZlbnQpIHtcbiAgICBpZiAoaW5zaWRlID09IC0xKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgbGV0ICRwb3MgPSB2aWV3LnN0YXRlLmRvYy5yZXNvbHZlKGluc2lkZSk7XG4gICAgZm9yIChsZXQgaSA9ICRwb3MuZGVwdGggKyAxOyBpID4gMDsgaS0tKSB7XG4gICAgICAgIGlmICh2aWV3LnNvbWVQcm9wKHByb3BOYW1lLCBmID0+IGkgPiAkcG9zLmRlcHRoID8gZih2aWV3LCBwb3MsICRwb3Mubm9kZUFmdGVyLCAkcG9zLmJlZm9yZShpKSwgZXZlbnQsIHRydWUpXG4gICAgICAgICAgICA6IGYodmlldywgcG9zLCAkcG9zLm5vZGUoaSksICRwb3MuYmVmb3JlKGkpLCBldmVudCwgZmFsc2UpKSlcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiB1cGRhdGVTZWxlY3Rpb24odmlldywgc2VsZWN0aW9uLCBvcmlnaW4pIHtcbiAgICBpZiAoIXZpZXcuZm9jdXNlZClcbiAgICAgICAgdmlldy5mb2N1cygpO1xuICAgIGxldCB0ciA9IHZpZXcuc3RhdGUudHIuc2V0U2VsZWN0aW9uKHNlbGVjdGlvbik7XG4gICAgaWYgKG9yaWdpbiA9PSBcInBvaW50ZXJcIilcbiAgICAgICAgdHIuc2V0TWV0YShcInBvaW50ZXJcIiwgdHJ1ZSk7XG4gICAgdmlldy5kaXNwYXRjaCh0cik7XG59XG5mdW5jdGlvbiBzZWxlY3RDbGlja2VkTGVhZih2aWV3LCBpbnNpZGUpIHtcbiAgICBpZiAoaW5zaWRlID09IC0xKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgbGV0ICRwb3MgPSB2aWV3LnN0YXRlLmRvYy5yZXNvbHZlKGluc2lkZSksIG5vZGUgPSAkcG9zLm5vZGVBZnRlcjtcbiAgICBpZiAobm9kZSAmJiBub2RlLmlzQXRvbSAmJiBOb2RlU2VsZWN0aW9uLmlzU2VsZWN0YWJsZShub2RlKSkge1xuICAgICAgICB1cGRhdGVTZWxlY3Rpb24odmlldywgbmV3IE5vZGVTZWxlY3Rpb24oJHBvcyksIFwicG9pbnRlclwiKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIHNlbGVjdENsaWNrZWROb2RlKHZpZXcsIGluc2lkZSkge1xuICAgIGlmIChpbnNpZGUgPT0gLTEpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBsZXQgc2VsID0gdmlldy5zdGF0ZS5zZWxlY3Rpb24sIHNlbGVjdGVkTm9kZSwgc2VsZWN0QXQ7XG4gICAgaWYgKHNlbCBpbnN0YW5jZW9mIE5vZGVTZWxlY3Rpb24pXG4gICAgICAgIHNlbGVjdGVkTm9kZSA9IHNlbC5ub2RlO1xuICAgIGxldCAkcG9zID0gdmlldy5zdGF0ZS5kb2MucmVzb2x2ZShpbnNpZGUpO1xuICAgIGZvciAobGV0IGkgPSAkcG9zLmRlcHRoICsgMTsgaSA+IDA7IGktLSkge1xuICAgICAgICBsZXQgbm9kZSA9IGkgPiAkcG9zLmRlcHRoID8gJHBvcy5ub2RlQWZ0ZXIgOiAkcG9zLm5vZGUoaSk7XG4gICAgICAgIGlmIChOb2RlU2VsZWN0aW9uLmlzU2VsZWN0YWJsZShub2RlKSkge1xuICAgICAgICAgICAgaWYgKHNlbGVjdGVkTm9kZSAmJiBzZWwuJGZyb20uZGVwdGggPiAwICYmXG4gICAgICAgICAgICAgICAgaSA+PSBzZWwuJGZyb20uZGVwdGggJiYgJHBvcy5iZWZvcmUoc2VsLiRmcm9tLmRlcHRoICsgMSkgPT0gc2VsLiRmcm9tLnBvcylcbiAgICAgICAgICAgICAgICBzZWxlY3RBdCA9ICRwb3MuYmVmb3JlKHNlbC4kZnJvbS5kZXB0aCk7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgc2VsZWN0QXQgPSAkcG9zLmJlZm9yZShpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChzZWxlY3RBdCAhPSBudWxsKSB7XG4gICAgICAgIHVwZGF0ZVNlbGVjdGlvbih2aWV3LCBOb2RlU2VsZWN0aW9uLmNyZWF0ZSh2aWV3LnN0YXRlLmRvYywgc2VsZWN0QXQpLCBcInBvaW50ZXJcIik7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGhhbmRsZVNpbmdsZUNsaWNrKHZpZXcsIHBvcywgaW5zaWRlLCBldmVudCwgc2VsZWN0Tm9kZSkge1xuICAgIHJldHVybiBydW5IYW5kbGVyT25Db250ZXh0KHZpZXcsIFwiaGFuZGxlQ2xpY2tPblwiLCBwb3MsIGluc2lkZSwgZXZlbnQpIHx8XG4gICAgICAgIHZpZXcuc29tZVByb3AoXCJoYW5kbGVDbGlja1wiLCBmID0+IGYodmlldywgcG9zLCBldmVudCkpIHx8XG4gICAgICAgIChzZWxlY3ROb2RlID8gc2VsZWN0Q2xpY2tlZE5vZGUodmlldywgaW5zaWRlKSA6IHNlbGVjdENsaWNrZWRMZWFmKHZpZXcsIGluc2lkZSkpO1xufVxuZnVuY3Rpb24gaGFuZGxlRG91YmxlQ2xpY2sodmlldywgcG9zLCBpbnNpZGUsIGV2ZW50KSB7XG4gICAgcmV0dXJuIHJ1bkhhbmRsZXJPbkNvbnRleHQodmlldywgXCJoYW5kbGVEb3VibGVDbGlja09uXCIsIHBvcywgaW5zaWRlLCBldmVudCkgfHxcbiAgICAgICAgdmlldy5zb21lUHJvcChcImhhbmRsZURvdWJsZUNsaWNrXCIsIGYgPT4gZih2aWV3LCBwb3MsIGV2ZW50KSk7XG59XG5mdW5jdGlvbiBoYW5kbGVUcmlwbGVDbGljayh2aWV3LCBwb3MsIGluc2lkZSwgZXZlbnQpIHtcbiAgICByZXR1cm4gcnVuSGFuZGxlck9uQ29udGV4dCh2aWV3LCBcImhhbmRsZVRyaXBsZUNsaWNrT25cIiwgcG9zLCBpbnNpZGUsIGV2ZW50KSB8fFxuICAgICAgICB2aWV3LnNvbWVQcm9wKFwiaGFuZGxlVHJpcGxlQ2xpY2tcIiwgZiA9PiBmKHZpZXcsIHBvcywgZXZlbnQpKSB8fFxuICAgICAgICBkZWZhdWx0VHJpcGxlQ2xpY2sodmlldywgaW5zaWRlLCBldmVudCk7XG59XG5mdW5jdGlvbiBkZWZhdWx0VHJpcGxlQ2xpY2sodmlldywgaW5zaWRlLCBldmVudCkge1xuICAgIGlmIChldmVudC5idXR0b24gIT0gMClcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGxldCBkb2MgPSB2aWV3LnN0YXRlLmRvYztcbiAgICBpZiAoaW5zaWRlID09IC0xKSB7XG4gICAgICAgIGlmIChkb2MuaW5saW5lQ29udGVudCkge1xuICAgICAgICAgICAgdXBkYXRlU2VsZWN0aW9uKHZpZXcsIFRleHRTZWxlY3Rpb24uY3JlYXRlKGRvYywgMCwgZG9jLmNvbnRlbnQuc2l6ZSksIFwicG9pbnRlclwiKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgbGV0ICRwb3MgPSBkb2MucmVzb2x2ZShpbnNpZGUpO1xuICAgIGZvciAobGV0IGkgPSAkcG9zLmRlcHRoICsgMTsgaSA+IDA7IGktLSkge1xuICAgICAgICBsZXQgbm9kZSA9IGkgPiAkcG9zLmRlcHRoID8gJHBvcy5ub2RlQWZ0ZXIgOiAkcG9zLm5vZGUoaSk7XG4gICAgICAgIGxldCBub2RlUG9zID0gJHBvcy5iZWZvcmUoaSk7XG4gICAgICAgIGlmIChub2RlLmlubGluZUNvbnRlbnQpXG4gICAgICAgICAgICB1cGRhdGVTZWxlY3Rpb24odmlldywgVGV4dFNlbGVjdGlvbi5jcmVhdGUoZG9jLCBub2RlUG9zICsgMSwgbm9kZVBvcyArIDEgKyBub2RlLmNvbnRlbnQuc2l6ZSksIFwicG9pbnRlclwiKTtcbiAgICAgICAgZWxzZSBpZiAoTm9kZVNlbGVjdGlvbi5pc1NlbGVjdGFibGUobm9kZSkpXG4gICAgICAgICAgICB1cGRhdGVTZWxlY3Rpb24odmlldywgTm9kZVNlbGVjdGlvbi5jcmVhdGUoZG9jLCBub2RlUG9zKSwgXCJwb2ludGVyXCIpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxufVxuZnVuY3Rpb24gZm9yY2VET01GbHVzaCh2aWV3KSB7XG4gICAgcmV0dXJuIGVuZENvbXBvc2l0aW9uKHZpZXcpO1xufVxuY29uc3Qgc2VsZWN0Tm9kZU1vZGlmaWVyID0gbWFjID8gXCJtZXRhS2V5XCIgOiBcImN0cmxLZXlcIjtcbmhhbmRsZXJzLm1vdXNlZG93biA9ICh2aWV3LCBfZXZlbnQpID0+IHtcbiAgICBsZXQgZXZlbnQgPSBfZXZlbnQ7XG4gICAgdmlldy5pbnB1dC5zaGlmdEtleSA9IGV2ZW50LnNoaWZ0S2V5O1xuICAgIGxldCBmbHVzaGVkID0gZm9yY2VET01GbHVzaCh2aWV3KTtcbiAgICBsZXQgbm93ID0gRGF0ZS5ub3coKSwgdHlwZSA9IFwic2luZ2xlQ2xpY2tcIjtcbiAgICBpZiAobm93IC0gdmlldy5pbnB1dC5sYXN0Q2xpY2sudGltZSA8IDUwMCAmJiBpc05lYXIoZXZlbnQsIHZpZXcuaW5wdXQubGFzdENsaWNrKSAmJiAhZXZlbnRbc2VsZWN0Tm9kZU1vZGlmaWVyXSkge1xuICAgICAgICBpZiAodmlldy5pbnB1dC5sYXN0Q2xpY2sudHlwZSA9PSBcInNpbmdsZUNsaWNrXCIpXG4gICAgICAgICAgICB0eXBlID0gXCJkb3VibGVDbGlja1wiO1xuICAgICAgICBlbHNlIGlmICh2aWV3LmlucHV0Lmxhc3RDbGljay50eXBlID09IFwiZG91YmxlQ2xpY2tcIilcbiAgICAgICAgICAgIHR5cGUgPSBcInRyaXBsZUNsaWNrXCI7XG4gICAgfVxuICAgIHZpZXcuaW5wdXQubGFzdENsaWNrID0geyB0aW1lOiBub3csIHg6IGV2ZW50LmNsaWVudFgsIHk6IGV2ZW50LmNsaWVudFksIHR5cGUgfTtcbiAgICBsZXQgcG9zID0gdmlldy5wb3NBdENvb3JkcyhldmVudENvb3JkcyhldmVudCkpO1xuICAgIGlmICghcG9zKVxuICAgICAgICByZXR1cm47XG4gICAgaWYgKHR5cGUgPT0gXCJzaW5nbGVDbGlja1wiKSB7XG4gICAgICAgIGlmICh2aWV3LmlucHV0Lm1vdXNlRG93bilcbiAgICAgICAgICAgIHZpZXcuaW5wdXQubW91c2VEb3duLmRvbmUoKTtcbiAgICAgICAgdmlldy5pbnB1dC5tb3VzZURvd24gPSBuZXcgTW91c2VEb3duKHZpZXcsIHBvcywgZXZlbnQsICEhZmx1c2hlZCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKCh0eXBlID09IFwiZG91YmxlQ2xpY2tcIiA/IGhhbmRsZURvdWJsZUNsaWNrIDogaGFuZGxlVHJpcGxlQ2xpY2spKHZpZXcsIHBvcy5wb3MsIHBvcy5pbnNpZGUsIGV2ZW50KSkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgc2V0U2VsZWN0aW9uT3JpZ2luKHZpZXcsIFwicG9pbnRlclwiKTtcbiAgICB9XG59O1xuY2xhc3MgTW91c2VEb3duIHtcbiAgICBjb25zdHJ1Y3Rvcih2aWV3LCBwb3MsIGV2ZW50LCBmbHVzaGVkKSB7XG4gICAgICAgIHRoaXMudmlldyA9IHZpZXc7XG4gICAgICAgIHRoaXMucG9zID0gcG9zO1xuICAgICAgICB0aGlzLmV2ZW50ID0gZXZlbnQ7XG4gICAgICAgIHRoaXMuZmx1c2hlZCA9IGZsdXNoZWQ7XG4gICAgICAgIHRoaXMuZGVsYXllZFNlbGVjdGlvblN5bmMgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5taWdodERyYWcgPSBudWxsO1xuICAgICAgICB0aGlzLnN0YXJ0RG9jID0gdmlldy5zdGF0ZS5kb2M7XG4gICAgICAgIHRoaXMuc2VsZWN0Tm9kZSA9ICEhZXZlbnRbc2VsZWN0Tm9kZU1vZGlmaWVyXTtcbiAgICAgICAgdGhpcy5hbGxvd0RlZmF1bHQgPSBldmVudC5zaGlmdEtleTtcbiAgICAgICAgbGV0IHRhcmdldE5vZGUsIHRhcmdldFBvcztcbiAgICAgICAgaWYgKHBvcy5pbnNpZGUgPiAtMSkge1xuICAgICAgICAgICAgdGFyZ2V0Tm9kZSA9IHZpZXcuc3RhdGUuZG9jLm5vZGVBdChwb3MuaW5zaWRlKTtcbiAgICAgICAgICAgIHRhcmdldFBvcyA9IHBvcy5pbnNpZGU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBsZXQgJHBvcyA9IHZpZXcuc3RhdGUuZG9jLnJlc29sdmUocG9zLnBvcyk7XG4gICAgICAgICAgICB0YXJnZXROb2RlID0gJHBvcy5wYXJlbnQ7XG4gICAgICAgICAgICB0YXJnZXRQb3MgPSAkcG9zLmRlcHRoID8gJHBvcy5iZWZvcmUoKSA6IDA7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gZmx1c2hlZCA/IG51bGwgOiBldmVudC50YXJnZXQ7XG4gICAgICAgIGNvbnN0IHRhcmdldERlc2MgPSB0YXJnZXQgPyB2aWV3LmRvY1ZpZXcubmVhcmVzdERlc2ModGFyZ2V0LCB0cnVlKSA6IG51bGw7XG4gICAgICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0RGVzYyA/IHRhcmdldERlc2MuZG9tIDogbnVsbDtcbiAgICAgICAgbGV0IHsgc2VsZWN0aW9uIH0gPSB2aWV3LnN0YXRlO1xuICAgICAgICBpZiAoZXZlbnQuYnV0dG9uID09IDAgJiZcbiAgICAgICAgICAgIHRhcmdldE5vZGUudHlwZS5zcGVjLmRyYWdnYWJsZSAmJiB0YXJnZXROb2RlLnR5cGUuc3BlYy5zZWxlY3RhYmxlICE9PSBmYWxzZSB8fFxuICAgICAgICAgICAgc2VsZWN0aW9uIGluc3RhbmNlb2YgTm9kZVNlbGVjdGlvbiAmJiBzZWxlY3Rpb24uZnJvbSA8PSB0YXJnZXRQb3MgJiYgc2VsZWN0aW9uLnRvID4gdGFyZ2V0UG9zKVxuICAgICAgICAgICAgdGhpcy5taWdodERyYWcgPSB7XG4gICAgICAgICAgICAgICAgbm9kZTogdGFyZ2V0Tm9kZSxcbiAgICAgICAgICAgICAgICBwb3M6IHRhcmdldFBvcyxcbiAgICAgICAgICAgICAgICBhZGRBdHRyOiAhISh0aGlzLnRhcmdldCAmJiAhdGhpcy50YXJnZXQuZHJhZ2dhYmxlKSxcbiAgICAgICAgICAgICAgICBzZXRVbmVkaXRhYmxlOiAhISh0aGlzLnRhcmdldCAmJiBnZWNrbyAmJiAhdGhpcy50YXJnZXQuaGFzQXR0cmlidXRlKFwiY29udGVudEVkaXRhYmxlXCIpKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgaWYgKHRoaXMudGFyZ2V0ICYmIHRoaXMubWlnaHREcmFnICYmICh0aGlzLm1pZ2h0RHJhZy5hZGRBdHRyIHx8IHRoaXMubWlnaHREcmFnLnNldFVuZWRpdGFibGUpKSB7XG4gICAgICAgICAgICB0aGlzLnZpZXcuZG9tT2JzZXJ2ZXIuc3RvcCgpO1xuICAgICAgICAgICAgaWYgKHRoaXMubWlnaHREcmFnLmFkZEF0dHIpXG4gICAgICAgICAgICAgICAgdGhpcy50YXJnZXQuZHJhZ2dhYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmICh0aGlzLm1pZ2h0RHJhZy5zZXRVbmVkaXRhYmxlKVxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy52aWV3LmlucHV0Lm1vdXNlRG93biA9PSB0aGlzKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50YXJnZXQuc2V0QXR0cmlidXRlKFwiY29udGVudEVkaXRhYmxlXCIsIFwiZmFsc2VcIik7XG4gICAgICAgICAgICAgICAgfSwgMjApO1xuICAgICAgICAgICAgdGhpcy52aWV3LmRvbU9ic2VydmVyLnN0YXJ0KCk7XG4gICAgICAgIH1cbiAgICAgICAgdmlldy5yb290LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIHRoaXMudXAgPSB0aGlzLnVwLmJpbmQodGhpcykpO1xuICAgICAgICB2aWV3LnJvb3QuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCB0aGlzLm1vdmUgPSB0aGlzLm1vdmUuYmluZCh0aGlzKSk7XG4gICAgICAgIHNldFNlbGVjdGlvbk9yaWdpbih2aWV3LCBcInBvaW50ZXJcIik7XG4gICAgfVxuICAgIGRvbmUoKSB7XG4gICAgICAgIHRoaXMudmlldy5yb290LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIHRoaXMudXApO1xuICAgICAgICB0aGlzLnZpZXcucm9vdC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIHRoaXMubW92ZSk7XG4gICAgICAgIGlmICh0aGlzLm1pZ2h0RHJhZyAmJiB0aGlzLnRhcmdldCkge1xuICAgICAgICAgICAgdGhpcy52aWV3LmRvbU9ic2VydmVyLnN0b3AoKTtcbiAgICAgICAgICAgIGlmICh0aGlzLm1pZ2h0RHJhZy5hZGRBdHRyKVxuICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0LnJlbW92ZUF0dHJpYnV0ZShcImRyYWdnYWJsZVwiKTtcbiAgICAgICAgICAgIGlmICh0aGlzLm1pZ2h0RHJhZy5zZXRVbmVkaXRhYmxlKVxuICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0LnJlbW92ZUF0dHJpYnV0ZShcImNvbnRlbnRFZGl0YWJsZVwiKTtcbiAgICAgICAgICAgIHRoaXMudmlldy5kb21PYnNlcnZlci5zdGFydCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmRlbGF5ZWRTZWxlY3Rpb25TeW5jKVxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiBzZWxlY3Rpb25Ub0RPTSh0aGlzLnZpZXcpKTtcbiAgICAgICAgdGhpcy52aWV3LmlucHV0Lm1vdXNlRG93biA9IG51bGw7XG4gICAgfVxuICAgIHVwKGV2ZW50KSB7XG4gICAgICAgIHRoaXMuZG9uZSgpO1xuICAgICAgICBpZiAoIXRoaXMudmlldy5kb20uY29udGFpbnMoZXZlbnQudGFyZ2V0KSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgbGV0IHBvcyA9IHRoaXMucG9zO1xuICAgICAgICBpZiAodGhpcy52aWV3LnN0YXRlLmRvYyAhPSB0aGlzLnN0YXJ0RG9jKVxuICAgICAgICAgICAgcG9zID0gdGhpcy52aWV3LnBvc0F0Q29vcmRzKGV2ZW50Q29vcmRzKGV2ZW50KSk7XG4gICAgICAgIGlmICh0aGlzLmFsbG93RGVmYXVsdCB8fCAhcG9zKSB7XG4gICAgICAgICAgICBzZXRTZWxlY3Rpb25PcmlnaW4odGhpcy52aWV3LCBcInBvaW50ZXJcIik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaGFuZGxlU2luZ2xlQ2xpY2sodGhpcy52aWV3LCBwb3MucG9zLCBwb3MuaW5zaWRlLCBldmVudCwgdGhpcy5zZWxlY3ROb2RlKSkge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChldmVudC5idXR0b24gPT0gMCAmJlxuICAgICAgICAgICAgKHRoaXMuZmx1c2hlZCB8fFxuICAgICAgICAgICAgICAgIC8vIFNhZmFyaSBpZ25vcmVzIGNsaWNrcyBvbiBkcmFnZ2FibGUgZWxlbWVudHNcbiAgICAgICAgICAgICAgICAoc2FmYXJpICYmIHRoaXMubWlnaHREcmFnICYmICF0aGlzLm1pZ2h0RHJhZy5ub2RlLmlzQXRvbSkgfHxcbiAgICAgICAgICAgICAgICAvLyBDaHJvbWUgd2lsbCBzb21ldGltZXMgdHJlYXQgYSBub2RlIHNlbGVjdGlvbiBhcyBhXG4gICAgICAgICAgICAgICAgLy8gY3Vyc29yLCBidXQgc3RpbGwgcmVwb3J0IHRoYXQgdGhlIG5vZGUgaXMgc2VsZWN0ZWRcbiAgICAgICAgICAgICAgICAvLyB3aGVuIGFza2VkIHRocm91Z2ggZ2V0U2VsZWN0aW9uLiBZb3UnbGwgdGhlbiBnZXQgYVxuICAgICAgICAgICAgICAgIC8vIHNpdHVhdGlvbiB3aGVyZSBjbGlja2luZyBhdCB0aGUgcG9pbnQgd2hlcmUgdGhhdFxuICAgICAgICAgICAgICAgIC8vIChoaWRkZW4pIGN1cnNvciBpcyBkb2Vzbid0IGNoYW5nZSB0aGUgc2VsZWN0aW9uLCBhbmRcbiAgICAgICAgICAgICAgICAvLyB0aHVzIGRvZXNuJ3QgZ2V0IGEgcmVhY3Rpb24gZnJvbSBQcm9zZU1pcnJvci4gVGhpc1xuICAgICAgICAgICAgICAgIC8vIHdvcmtzIGFyb3VuZCB0aGF0LlxuICAgICAgICAgICAgICAgIChjaHJvbWUgJiYgISh0aGlzLnZpZXcuc3RhdGUuc2VsZWN0aW9uIGluc3RhbmNlb2YgVGV4dFNlbGVjdGlvbikgJiZcbiAgICAgICAgICAgICAgICAgICAgTWF0aC5taW4oTWF0aC5hYnMocG9zLnBvcyAtIHRoaXMudmlldy5zdGF0ZS5zZWxlY3Rpb24uZnJvbSksIE1hdGguYWJzKHBvcy5wb3MgLSB0aGlzLnZpZXcuc3RhdGUuc2VsZWN0aW9uLnRvKSkgPD0gMikpKSB7XG4gICAgICAgICAgICB1cGRhdGVTZWxlY3Rpb24odGhpcy52aWV3LCBTZWxlY3Rpb24ubmVhcih0aGlzLnZpZXcuc3RhdGUuZG9jLnJlc29sdmUocG9zLnBvcykpLCBcInBvaW50ZXJcIik7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc2V0U2VsZWN0aW9uT3JpZ2luKHRoaXMudmlldywgXCJwb2ludGVyXCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIG1vdmUoZXZlbnQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmFsbG93RGVmYXVsdCAmJiAoTWF0aC5hYnModGhpcy5ldmVudC54IC0gZXZlbnQuY2xpZW50WCkgPiA0IHx8XG4gICAgICAgICAgICBNYXRoLmFicyh0aGlzLmV2ZW50LnkgLSBldmVudC5jbGllbnRZKSA+IDQpKVxuICAgICAgICAgICAgdGhpcy5hbGxvd0RlZmF1bHQgPSB0cnVlO1xuICAgICAgICBzZXRTZWxlY3Rpb25PcmlnaW4odGhpcy52aWV3LCBcInBvaW50ZXJcIik7XG4gICAgICAgIGlmIChldmVudC5idXR0b25zID09IDApXG4gICAgICAgICAgICB0aGlzLmRvbmUoKTtcbiAgICB9XG59XG5oYW5kbGVycy50b3VjaGRvd24gPSB2aWV3ID0+IHtcbiAgICBmb3JjZURPTUZsdXNoKHZpZXcpO1xuICAgIHNldFNlbGVjdGlvbk9yaWdpbih2aWV3LCBcInBvaW50ZXJcIik7XG59O1xuaGFuZGxlcnMuY29udGV4dG1lbnUgPSB2aWV3ID0+IGZvcmNlRE9NRmx1c2godmlldyk7XG5mdW5jdGlvbiBpbk9yTmVhckNvbXBvc2l0aW9uKHZpZXcsIGV2ZW50KSB7XG4gICAgaWYgKHZpZXcuY29tcG9zaW5nKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAvLyBTZWUgaHR0cHM6Ly93d3cuc3R1bS5kZS8yMDE2LzA2LzI0L2hhbmRsaW5nLWltZS1ldmVudHMtaW4tamF2YXNjcmlwdC8uXG4gICAgLy8gT24gSmFwYW5lc2UgaW5wdXQgbWV0aG9kIGVkaXRvcnMgKElNRXMpLCB0aGUgRW50ZXIga2V5IGlzIHVzZWQgdG8gY29uZmlybSBjaGFyYWN0ZXJcbiAgICAvLyBzZWxlY3Rpb24uIE9uIFNhZmFyaSwgd2hlbiBFbnRlciBpcyBwcmVzc2VkLCBjb21wb3NpdGlvbmVuZCBhbmQga2V5ZG93biBldmVudHMgYXJlXG4gICAgLy8gZW1pdHRlZC4gVGhlIGtleWRvd24gZXZlbnQgdHJpZ2dlcnMgbmV3bGluZSBpbnNlcnRpb24sIHdoaWNoIHdlIGRvbid0IHdhbnQuXG4gICAgLy8gVGhpcyBtZXRob2QgcmV0dXJucyB0cnVlIGlmIHRoZSBrZXlkb3duIGV2ZW50IHNob3VsZCBiZSBpZ25vcmVkLlxuICAgIC8vIFdlIG9ubHkgaWdub3JlIGl0IG9uY2UsIGFzIHByZXNzaW5nIEVudGVyIGEgc2Vjb25kIHRpbWUgKnNob3VsZCogaW5zZXJ0IGEgbmV3bGluZS5cbiAgICAvLyBGdXJ0aGVybW9yZSwgdGhlIGtleWRvd24gZXZlbnQgdGltZXN0YW1wIG11c3QgYmUgY2xvc2UgdG8gdGhlIGNvbXBvc2l0aW9uRW5kZWRBdCB0aW1lc3RhbXAuXG4gICAgLy8gVGhpcyBndWFyZHMgYWdhaW5zdCB0aGUgY2FzZSB3aGVyZSBjb21wb3NpdGlvbmVuZCBpcyB0cmlnZ2VyZWQgd2l0aG91dCB0aGUga2V5Ym9hcmRcbiAgICAvLyAoZS5nLiBjaGFyYWN0ZXIgY29uZmlybWF0aW9uIG1heSBiZSBkb25lIHdpdGggdGhlIG1vdXNlKSwgYW5kIGtleWRvd24gaXMgdHJpZ2dlcmVkXG4gICAgLy8gYWZ0ZXJ3YXJkcy0gd2Ugd291bGRuJ3Qgd2FudCB0byBpZ25vcmUgdGhlIGtleWRvd24gZXZlbnQgaW4gdGhpcyBjYXNlLlxuICAgIGlmIChzYWZhcmkgJiYgTWF0aC5hYnMoZXZlbnQudGltZVN0YW1wIC0gdmlldy5pbnB1dC5jb21wb3NpdGlvbkVuZGVkQXQpIDwgNTAwKSB7XG4gICAgICAgIHZpZXcuaW5wdXQuY29tcG9zaXRpb25FbmRlZEF0ID0gLTJlODtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbi8vIERyb3AgYWN0aXZlIGNvbXBvc2l0aW9uIGFmdGVyIDUgc2Vjb25kcyBvZiBpbmFjdGl2aXR5IG9uIEFuZHJvaWRcbmNvbnN0IHRpbWVvdXRDb21wb3NpdGlvbiA9IGFuZHJvaWQgPyA1MDAwIDogLTE7XG5lZGl0SGFuZGxlcnMuY29tcG9zaXRpb25zdGFydCA9IGVkaXRIYW5kbGVycy5jb21wb3NpdGlvbnVwZGF0ZSA9IHZpZXcgPT4ge1xuICAgIGlmICghdmlldy5jb21wb3NpbmcpIHtcbiAgICAgICAgdmlldy5kb21PYnNlcnZlci5mbHVzaCgpO1xuICAgICAgICBsZXQgeyBzdGF0ZSB9ID0gdmlldywgJHBvcyA9IHN0YXRlLnNlbGVjdGlvbi4kZnJvbTtcbiAgICAgICAgaWYgKHN0YXRlLnNlbGVjdGlvbi5lbXB0eSAmJlxuICAgICAgICAgICAgKHN0YXRlLnN0b3JlZE1hcmtzIHx8XG4gICAgICAgICAgICAgICAgKCEkcG9zLnRleHRPZmZzZXQgJiYgJHBvcy5wYXJlbnRPZmZzZXQgJiYgJHBvcy5ub2RlQmVmb3JlLm1hcmtzLnNvbWUobSA9PiBtLnR5cGUuc3BlYy5pbmNsdXNpdmUgPT09IGZhbHNlKSkpKSB7XG4gICAgICAgICAgICAvLyBOZWVkIHRvIHdyYXAgdGhlIGN1cnNvciBpbiBtYXJrIG5vZGVzIGRpZmZlcmVudCBmcm9tIHRoZSBvbmVzIGluIHRoZSBET00gY29udGV4dFxuICAgICAgICAgICAgdmlldy5tYXJrQ3Vyc29yID0gdmlldy5zdGF0ZS5zdG9yZWRNYXJrcyB8fCAkcG9zLm1hcmtzKCk7XG4gICAgICAgICAgICBlbmRDb21wb3NpdGlvbih2aWV3LCB0cnVlKTtcbiAgICAgICAgICAgIHZpZXcubWFya0N1cnNvciA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBlbmRDb21wb3NpdGlvbih2aWV3KTtcbiAgICAgICAgICAgIC8vIEluIGZpcmVmb3gsIGlmIHRoZSBjdXJzb3IgaXMgYWZ0ZXIgYnV0IG91dHNpZGUgYSBtYXJrZWQgbm9kZSxcbiAgICAgICAgICAgIC8vIHRoZSBpbnNlcnRlZCB0ZXh0IHdvbid0IGluaGVyaXQgdGhlIG1hcmtzLiBTbyB0aGlzIG1vdmVzIGl0XG4gICAgICAgICAgICAvLyBpbnNpZGUgaWYgbmVjZXNzYXJ5LlxuICAgICAgICAgICAgaWYgKGdlY2tvICYmIHN0YXRlLnNlbGVjdGlvbi5lbXB0eSAmJiAkcG9zLnBhcmVudE9mZnNldCAmJiAhJHBvcy50ZXh0T2Zmc2V0ICYmICRwb3Mubm9kZUJlZm9yZS5tYXJrcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBsZXQgc2VsID0gdmlldy5kb21TZWxlY3Rpb24oKTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBub2RlID0gc2VsLmZvY3VzTm9kZSwgb2Zmc2V0ID0gc2VsLmZvY3VzT2Zmc2V0OyBub2RlICYmIG5vZGUubm9kZVR5cGUgPT0gMSAmJiBvZmZzZXQgIT0gMDspIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGJlZm9yZSA9IG9mZnNldCA8IDAgPyBub2RlLmxhc3RDaGlsZCA6IG5vZGUuY2hpbGROb2Rlc1tvZmZzZXQgLSAxXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFiZWZvcmUpXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJlZm9yZS5ub2RlVHlwZSA9PSAzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWwuY29sbGFwc2UoYmVmb3JlLCBiZWZvcmUubm9kZVZhbHVlLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUgPSBiZWZvcmU7XG4gICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSAtMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2aWV3LmlucHV0LmNvbXBvc2luZyA9IHRydWU7XG4gICAgfVxuICAgIHNjaGVkdWxlQ29tcG9zZUVuZCh2aWV3LCB0aW1lb3V0Q29tcG9zaXRpb24pO1xufTtcbmVkaXRIYW5kbGVycy5jb21wb3NpdGlvbmVuZCA9ICh2aWV3LCBldmVudCkgPT4ge1xuICAgIGlmICh2aWV3LmNvbXBvc2luZykge1xuICAgICAgICB2aWV3LmlucHV0LmNvbXBvc2luZyA9IGZhbHNlO1xuICAgICAgICB2aWV3LmlucHV0LmNvbXBvc2l0aW9uRW5kZWRBdCA9IGV2ZW50LnRpbWVTdGFtcDtcbiAgICAgICAgc2NoZWR1bGVDb21wb3NlRW5kKHZpZXcsIDIwKTtcbiAgICB9XG59O1xuZnVuY3Rpb24gc2NoZWR1bGVDb21wb3NlRW5kKHZpZXcsIGRlbGF5KSB7XG4gICAgY2xlYXJUaW1lb3V0KHZpZXcuaW5wdXQuY29tcG9zaW5nVGltZW91dCk7XG4gICAgaWYgKGRlbGF5ID4gLTEpXG4gICAgICAgIHZpZXcuaW5wdXQuY29tcG9zaW5nVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4gZW5kQ29tcG9zaXRpb24odmlldyksIGRlbGF5KTtcbn1cbmZ1bmN0aW9uIGNsZWFyQ29tcG9zaXRpb24odmlldykge1xuICAgIGlmICh2aWV3LmNvbXBvc2luZykge1xuICAgICAgICB2aWV3LmlucHV0LmNvbXBvc2luZyA9IGZhbHNlO1xuICAgICAgICB2aWV3LmlucHV0LmNvbXBvc2l0aW9uRW5kZWRBdCA9IHRpbWVzdGFtcEZyb21DdXN0b21FdmVudCgpO1xuICAgIH1cbiAgICB3aGlsZSAodmlldy5pbnB1dC5jb21wb3NpdGlvbk5vZGVzLmxlbmd0aCA+IDApXG4gICAgICAgIHZpZXcuaW5wdXQuY29tcG9zaXRpb25Ob2Rlcy5wb3AoKS5tYXJrUGFyZW50c0RpcnR5KCk7XG59XG5mdW5jdGlvbiB0aW1lc3RhbXBGcm9tQ3VzdG9tRXZlbnQoKSB7XG4gICAgbGV0IGV2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJFdmVudFwiKTtcbiAgICBldmVudC5pbml0RXZlbnQoXCJldmVudFwiLCB0cnVlLCB0cnVlKTtcbiAgICByZXR1cm4gZXZlbnQudGltZVN0YW1wO1xufVxuLyoqXG5AaW50ZXJuYWxcbiovXG5mdW5jdGlvbiBlbmRDb21wb3NpdGlvbih2aWV3LCBmb3JjZVVwZGF0ZSA9IGZhbHNlKSB7XG4gICAgaWYgKGFuZHJvaWQgJiYgdmlldy5kb21PYnNlcnZlci5mbHVzaGluZ1Nvb24gPj0gMClcbiAgICAgICAgcmV0dXJuO1xuICAgIHZpZXcuZG9tT2JzZXJ2ZXIuZm9yY2VGbHVzaCgpO1xuICAgIGNsZWFyQ29tcG9zaXRpb24odmlldyk7XG4gICAgaWYgKGZvcmNlVXBkYXRlIHx8IHZpZXcuZG9jVmlldyAmJiB2aWV3LmRvY1ZpZXcuZGlydHkpIHtcbiAgICAgICAgbGV0IHNlbCA9IHNlbGVjdGlvbkZyb21ET00odmlldyk7XG4gICAgICAgIGlmIChzZWwgJiYgIXNlbC5lcSh2aWV3LnN0YXRlLnNlbGVjdGlvbikpXG4gICAgICAgICAgICB2aWV3LmRpc3BhdGNoKHZpZXcuc3RhdGUudHIuc2V0U2VsZWN0aW9uKHNlbCkpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICB2aWV3LnVwZGF0ZVN0YXRlKHZpZXcuc3RhdGUpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gY2FwdHVyZUNvcHkodmlldywgZG9tKSB7XG4gICAgLy8gVGhlIGV4dHJhIHdyYXBwZXIgaXMgc29tZWhvdyBuZWNlc3Nhcnkgb24gSUUvRWRnZSB0byBwcmV2ZW50IHRoZVxuICAgIC8vIGNvbnRlbnQgZnJvbSBiZWluZyBtYW5nbGVkIHdoZW4gaXQgaXMgcHV0IG9udG8gdGhlIGNsaXBib2FyZFxuICAgIGlmICghdmlldy5kb20ucGFyZW50Tm9kZSlcbiAgICAgICAgcmV0dXJuO1xuICAgIGxldCB3cmFwID0gdmlldy5kb20ucGFyZW50Tm9kZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpKTtcbiAgICB3cmFwLmFwcGVuZENoaWxkKGRvbSk7XG4gICAgd3JhcC5zdHlsZS5jc3NUZXh0ID0gXCJwb3NpdGlvbjogZml4ZWQ7IGxlZnQ6IC0xMDAwMHB4OyB0b3A6IDEwcHhcIjtcbiAgICBsZXQgc2VsID0gZ2V0U2VsZWN0aW9uKCksIHJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcbiAgICByYW5nZS5zZWxlY3ROb2RlQ29udGVudHMoZG9tKTtcbiAgICAvLyBEb25lIGJlY2F1c2UgSUUgd2lsbCBmaXJlIGEgc2VsZWN0aW9uY2hhbmdlIG1vdmluZyB0aGUgc2VsZWN0aW9uXG4gICAgLy8gdG8gaXRzIHN0YXJ0IHdoZW4gcmVtb3ZlQWxsUmFuZ2VzIGlzIGNhbGxlZCBhbmQgdGhlIGVkaXRvciBzdGlsbFxuICAgIC8vIGhhcyBmb2N1cyAod2hpY2ggd2lsbCBtZXNzIHVwIHRoZSBlZGl0b3IncyBzZWxlY3Rpb24gc3RhdGUpLlxuICAgIHZpZXcuZG9tLmJsdXIoKTtcbiAgICBzZWwucmVtb3ZlQWxsUmFuZ2VzKCk7XG4gICAgc2VsLmFkZFJhbmdlKHJhbmdlKTtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgaWYgKHdyYXAucGFyZW50Tm9kZSlcbiAgICAgICAgICAgIHdyYXAucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh3cmFwKTtcbiAgICAgICAgdmlldy5mb2N1cygpO1xuICAgIH0sIDUwKTtcbn1cbi8vIFRoaXMgaXMgdmVyeSBjcnVkZSwgYnV0IHVuZm9ydHVuYXRlbHkgYm90aCB0aGVzZSBicm93c2VycyBfcHJldGVuZF9cbi8vIHRoYXQgdGhleSBoYXZlIGEgY2xpcGJvYXJkIEFQSeKAlGFsbCB0aGUgb2JqZWN0cyBhbmQgbWV0aG9kcyBhcmVcbi8vIHRoZXJlLCB0aGV5IGp1c3QgZG9uJ3Qgd29yaywgYW5kIHRoZXkgYXJlIGhhcmQgdG8gdGVzdC5cbmNvbnN0IGJyb2tlbkNsaXBib2FyZEFQSSA9IChpZSAmJiBpZV92ZXJzaW9uIDwgMTUpIHx8XG4gICAgKGlvcyAmJiB3ZWJraXRfdmVyc2lvbiA8IDYwNCk7XG5oYW5kbGVycy5jb3B5ID0gZWRpdEhhbmRsZXJzLmN1dCA9ICh2aWV3LCBfZXZlbnQpID0+IHtcbiAgICBsZXQgZXZlbnQgPSBfZXZlbnQ7XG4gICAgbGV0IHNlbCA9IHZpZXcuc3RhdGUuc2VsZWN0aW9uLCBjdXQgPSBldmVudC50eXBlID09IFwiY3V0XCI7XG4gICAgaWYgKHNlbC5lbXB0eSlcbiAgICAgICAgcmV0dXJuO1xuICAgIC8vIElFIGFuZCBFZGdlJ3MgY2xpcGJvYXJkIGludGVyZmFjZSBpcyBjb21wbGV0ZWx5IGJyb2tlblxuICAgIGxldCBkYXRhID0gYnJva2VuQ2xpcGJvYXJkQVBJID8gbnVsbCA6IGV2ZW50LmNsaXBib2FyZERhdGE7XG4gICAgbGV0IHNsaWNlID0gc2VsLmNvbnRlbnQoKSwgeyBkb20sIHRleHQgfSA9IHNlcmlhbGl6ZUZvckNsaXBib2FyZCh2aWV3LCBzbGljZSk7XG4gICAgaWYgKGRhdGEpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZGF0YS5jbGVhckRhdGEoKTtcbiAgICAgICAgZGF0YS5zZXREYXRhKFwidGV4dC9odG1sXCIsIGRvbS5pbm5lckhUTUwpO1xuICAgICAgICBkYXRhLnNldERhdGEoXCJ0ZXh0L3BsYWluXCIsIHRleHQpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY2FwdHVyZUNvcHkodmlldywgZG9tKTtcbiAgICB9XG4gICAgaWYgKGN1dClcbiAgICAgICAgdmlldy5kaXNwYXRjaCh2aWV3LnN0YXRlLnRyLmRlbGV0ZVNlbGVjdGlvbigpLnNjcm9sbEludG9WaWV3KCkuc2V0TWV0YShcInVpRXZlbnRcIiwgXCJjdXRcIikpO1xufTtcbmZ1bmN0aW9uIHNsaWNlU2luZ2xlTm9kZShzbGljZSkge1xuICAgIHJldHVybiBzbGljZS5vcGVuU3RhcnQgPT0gMCAmJiBzbGljZS5vcGVuRW5kID09IDAgJiYgc2xpY2UuY29udGVudC5jaGlsZENvdW50ID09IDEgPyBzbGljZS5jb250ZW50LmZpcnN0Q2hpbGQgOiBudWxsO1xufVxuZnVuY3Rpb24gY2FwdHVyZVBhc3RlKHZpZXcsIGV2ZW50KSB7XG4gICAgaWYgKCF2aWV3LmRvbS5wYXJlbnROb2RlKVxuICAgICAgICByZXR1cm47XG4gICAgbGV0IHBsYWluVGV4dCA9IHZpZXcuaW5wdXQuc2hpZnRLZXkgfHwgdmlldy5zdGF0ZS5zZWxlY3Rpb24uJGZyb20ucGFyZW50LnR5cGUuc3BlYy5jb2RlO1xuICAgIGxldCB0YXJnZXQgPSB2aWV3LmRvbS5wYXJlbnROb2RlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQocGxhaW5UZXh0ID8gXCJ0ZXh0YXJlYVwiIDogXCJkaXZcIikpO1xuICAgIGlmICghcGxhaW5UZXh0KVxuICAgICAgICB0YXJnZXQuY29udGVudEVkaXRhYmxlID0gXCJ0cnVlXCI7XG4gICAgdGFyZ2V0LnN0eWxlLmNzc1RleHQgPSBcInBvc2l0aW9uOiBmaXhlZDsgbGVmdDogLTEwMDAwcHg7IHRvcDogMTBweFwiO1xuICAgIHRhcmdldC5mb2N1cygpO1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB2aWV3LmZvY3VzKCk7XG4gICAgICAgIGlmICh0YXJnZXQucGFyZW50Tm9kZSlcbiAgICAgICAgICAgIHRhcmdldC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRhcmdldCk7XG4gICAgICAgIGlmIChwbGFpblRleHQpXG4gICAgICAgICAgICBkb1Bhc3RlKHZpZXcsIHRhcmdldC52YWx1ZSwgbnVsbCwgZXZlbnQpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBkb1Bhc3RlKHZpZXcsIHRhcmdldC50ZXh0Q29udGVudCwgdGFyZ2V0LmlubmVySFRNTCwgZXZlbnQpO1xuICAgIH0sIDUwKTtcbn1cbmZ1bmN0aW9uIGRvUGFzdGUodmlldywgdGV4dCwgaHRtbCwgZXZlbnQpIHtcbiAgICBsZXQgc2xpY2UgPSBwYXJzZUZyb21DbGlwYm9hcmQodmlldywgdGV4dCwgaHRtbCwgdmlldy5pbnB1dC5zaGlmdEtleSwgdmlldy5zdGF0ZS5zZWxlY3Rpb24uJGZyb20pO1xuICAgIGlmICh2aWV3LnNvbWVQcm9wKFwiaGFuZGxlUGFzdGVcIiwgZiA9PiBmKHZpZXcsIGV2ZW50LCBzbGljZSB8fCBTbGljZS5lbXB0eSkpKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICBpZiAoIXNsaWNlKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgbGV0IHNpbmdsZU5vZGUgPSBzbGljZVNpbmdsZU5vZGUoc2xpY2UpO1xuICAgIGxldCB0ciA9IHNpbmdsZU5vZGVcbiAgICAgICAgPyB2aWV3LnN0YXRlLnRyLnJlcGxhY2VTZWxlY3Rpb25XaXRoKHNpbmdsZU5vZGUsIHZpZXcuaW5wdXQuc2hpZnRLZXkpXG4gICAgICAgIDogdmlldy5zdGF0ZS50ci5yZXBsYWNlU2VsZWN0aW9uKHNsaWNlKTtcbiAgICB2aWV3LmRpc3BhdGNoKHRyLnNjcm9sbEludG9WaWV3KCkuc2V0TWV0YShcInBhc3RlXCIsIHRydWUpLnNldE1ldGEoXCJ1aUV2ZW50XCIsIFwicGFzdGVcIikpO1xuICAgIHJldHVybiB0cnVlO1xufVxuZWRpdEhhbmRsZXJzLnBhc3RlID0gKHZpZXcsIF9ldmVudCkgPT4ge1xuICAgIGxldCBldmVudCA9IF9ldmVudDtcbiAgICAvLyBIYW5kbGluZyBwYXN0ZSBmcm9tIEphdmFTY3JpcHQgZHVyaW5nIGNvbXBvc2l0aW9uIGlzIHZlcnkgcG9vcmx5XG4gICAgLy8gaGFuZGxlZCBieSBicm93c2Vycywgc28gYXMgYSBkb2RneSBidXQgcHJlZmVyYWJsZSBrbHVkZ2UsIHdlIGp1c3RcbiAgICAvLyBsZXQgdGhlIGJyb3dzZXIgZG8gaXRzIG5hdGl2ZSB0aGluZyB0aGVyZSwgZXhjZXB0IG9uIEFuZHJvaWQsXG4gICAgLy8gd2hlcmUgdGhlIGVkaXRvciBpcyBhbG1vc3QgYWx3YXlzIGNvbXBvc2luZy5cbiAgICBpZiAodmlldy5jb21wb3NpbmcgJiYgIWFuZHJvaWQpXG4gICAgICAgIHJldHVybjtcbiAgICBsZXQgZGF0YSA9IGJyb2tlbkNsaXBib2FyZEFQSSA/IG51bGwgOiBldmVudC5jbGlwYm9hcmREYXRhO1xuICAgIGlmIChkYXRhICYmIGRvUGFzdGUodmlldywgZGF0YS5nZXREYXRhKFwidGV4dC9wbGFpblwiKSwgZGF0YS5nZXREYXRhKFwidGV4dC9odG1sXCIpLCBldmVudCkpXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgZWxzZVxuICAgICAgICBjYXB0dXJlUGFzdGUodmlldywgZXZlbnQpO1xufTtcbmNsYXNzIERyYWdnaW5nIHtcbiAgICBjb25zdHJ1Y3RvcihzbGljZSwgbW92ZSkge1xuICAgICAgICB0aGlzLnNsaWNlID0gc2xpY2U7XG4gICAgICAgIHRoaXMubW92ZSA9IG1vdmU7XG4gICAgfVxufVxuY29uc3QgZHJhZ0NvcHlNb2RpZmllciA9IG1hYyA/IFwiYWx0S2V5XCIgOiBcImN0cmxLZXlcIjtcbmhhbmRsZXJzLmRyYWdzdGFydCA9ICh2aWV3LCBfZXZlbnQpID0+IHtcbiAgICBsZXQgZXZlbnQgPSBfZXZlbnQ7XG4gICAgbGV0IG1vdXNlRG93biA9IHZpZXcuaW5wdXQubW91c2VEb3duO1xuICAgIGlmIChtb3VzZURvd24pXG4gICAgICAgIG1vdXNlRG93bi5kb25lKCk7XG4gICAgaWYgKCFldmVudC5kYXRhVHJhbnNmZXIpXG4gICAgICAgIHJldHVybjtcbiAgICBsZXQgc2VsID0gdmlldy5zdGF0ZS5zZWxlY3Rpb247XG4gICAgbGV0IHBvcyA9IHNlbC5lbXB0eSA/IG51bGwgOiB2aWV3LnBvc0F0Q29vcmRzKGV2ZW50Q29vcmRzKGV2ZW50KSk7XG4gICAgaWYgKHBvcyAmJiBwb3MucG9zID49IHNlbC5mcm9tICYmIHBvcy5wb3MgPD0gKHNlbCBpbnN0YW5jZW9mIE5vZGVTZWxlY3Rpb24gPyBzZWwudG8gLSAxIDogc2VsLnRvKSkgO1xuICAgIGVsc2UgaWYgKG1vdXNlRG93biAmJiBtb3VzZURvd24ubWlnaHREcmFnKSB7XG4gICAgICAgIHZpZXcuZGlzcGF0Y2godmlldy5zdGF0ZS50ci5zZXRTZWxlY3Rpb24oTm9kZVNlbGVjdGlvbi5jcmVhdGUodmlldy5zdGF0ZS5kb2MsIG1vdXNlRG93bi5taWdodERyYWcucG9zKSkpO1xuICAgIH1cbiAgICBlbHNlIGlmIChldmVudC50YXJnZXQgJiYgZXZlbnQudGFyZ2V0Lm5vZGVUeXBlID09IDEpIHtcbiAgICAgICAgbGV0IGRlc2MgPSB2aWV3LmRvY1ZpZXcubmVhcmVzdERlc2MoZXZlbnQudGFyZ2V0LCB0cnVlKTtcbiAgICAgICAgaWYgKGRlc2MgJiYgZGVzYy5ub2RlLnR5cGUuc3BlYy5kcmFnZ2FibGUgJiYgZGVzYyAhPSB2aWV3LmRvY1ZpZXcpXG4gICAgICAgICAgICB2aWV3LmRpc3BhdGNoKHZpZXcuc3RhdGUudHIuc2V0U2VsZWN0aW9uKE5vZGVTZWxlY3Rpb24uY3JlYXRlKHZpZXcuc3RhdGUuZG9jLCBkZXNjLnBvc0JlZm9yZSkpKTtcbiAgICB9XG4gICAgbGV0IHNsaWNlID0gdmlldy5zdGF0ZS5zZWxlY3Rpb24uY29udGVudCgpLCB7IGRvbSwgdGV4dCB9ID0gc2VyaWFsaXplRm9yQ2xpcGJvYXJkKHZpZXcsIHNsaWNlKTtcbiAgICBldmVudC5kYXRhVHJhbnNmZXIuY2xlYXJEYXRhKCk7XG4gICAgZXZlbnQuZGF0YVRyYW5zZmVyLnNldERhdGEoYnJva2VuQ2xpcGJvYXJkQVBJID8gXCJUZXh0XCIgOiBcInRleHQvaHRtbFwiLCBkb20uaW5uZXJIVE1MKTtcbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL1Byb3NlTWlycm9yL3Byb3NlbWlycm9yL2lzc3Vlcy8xMTU2XG4gICAgZXZlbnQuZGF0YVRyYW5zZmVyLmVmZmVjdEFsbG93ZWQgPSBcImNvcHlNb3ZlXCI7XG4gICAgaWYgKCFicm9rZW5DbGlwYm9hcmRBUEkpXG4gICAgICAgIGV2ZW50LmRhdGFUcmFuc2Zlci5zZXREYXRhKFwidGV4dC9wbGFpblwiLCB0ZXh0KTtcbiAgICB2aWV3LmRyYWdnaW5nID0gbmV3IERyYWdnaW5nKHNsaWNlLCAhZXZlbnRbZHJhZ0NvcHlNb2RpZmllcl0pO1xufTtcbmhhbmRsZXJzLmRyYWdlbmQgPSB2aWV3ID0+IHtcbiAgICBsZXQgZHJhZ2dpbmcgPSB2aWV3LmRyYWdnaW5nO1xuICAgIHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgaWYgKHZpZXcuZHJhZ2dpbmcgPT0gZHJhZ2dpbmcpXG4gICAgICAgICAgICB2aWV3LmRyYWdnaW5nID0gbnVsbDtcbiAgICB9LCA1MCk7XG59O1xuZWRpdEhhbmRsZXJzLmRyYWdvdmVyID0gZWRpdEhhbmRsZXJzLmRyYWdlbnRlciA9IChfLCBlKSA9PiBlLnByZXZlbnREZWZhdWx0KCk7XG5lZGl0SGFuZGxlcnMuZHJvcCA9ICh2aWV3LCBfZXZlbnQpID0+IHtcbiAgICBsZXQgZXZlbnQgPSBfZXZlbnQ7XG4gICAgbGV0IGRyYWdnaW5nID0gdmlldy5kcmFnZ2luZztcbiAgICB2aWV3LmRyYWdnaW5nID0gbnVsbDtcbiAgICBpZiAoIWV2ZW50LmRhdGFUcmFuc2ZlcilcbiAgICAgICAgcmV0dXJuO1xuICAgIGxldCBldmVudFBvcyA9IHZpZXcucG9zQXRDb29yZHMoZXZlbnRDb29yZHMoZXZlbnQpKTtcbiAgICBpZiAoIWV2ZW50UG9zKVxuICAgICAgICByZXR1cm47XG4gICAgbGV0ICRtb3VzZSA9IHZpZXcuc3RhdGUuZG9jLnJlc29sdmUoZXZlbnRQb3MucG9zKTtcbiAgICBpZiAoISRtb3VzZSlcbiAgICAgICAgcmV0dXJuO1xuICAgIGxldCBzbGljZSA9IGRyYWdnaW5nICYmIGRyYWdnaW5nLnNsaWNlO1xuICAgIGlmIChzbGljZSkge1xuICAgICAgICB2aWV3LnNvbWVQcm9wKFwidHJhbnNmb3JtUGFzdGVkXCIsIGYgPT4geyBzbGljZSA9IGYoc2xpY2UpOyB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHNsaWNlID0gcGFyc2VGcm9tQ2xpcGJvYXJkKHZpZXcsIGV2ZW50LmRhdGFUcmFuc2Zlci5nZXREYXRhKGJyb2tlbkNsaXBib2FyZEFQSSA/IFwiVGV4dFwiIDogXCJ0ZXh0L3BsYWluXCIpLCBicm9rZW5DbGlwYm9hcmRBUEkgPyBudWxsIDogZXZlbnQuZGF0YVRyYW5zZmVyLmdldERhdGEoXCJ0ZXh0L2h0bWxcIiksIGZhbHNlLCAkbW91c2UpO1xuICAgIH1cbiAgICBsZXQgbW92ZSA9ICEhKGRyYWdnaW5nICYmICFldmVudFtkcmFnQ29weU1vZGlmaWVyXSk7XG4gICAgaWYgKHZpZXcuc29tZVByb3AoXCJoYW5kbGVEcm9wXCIsIGYgPT4gZih2aWV3LCBldmVudCwgc2xpY2UgfHwgU2xpY2UuZW1wdHksIG1vdmUpKSkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghc2xpY2UpXG4gICAgICAgIHJldHVybjtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGxldCBpbnNlcnRQb3MgPSBzbGljZSA/IGRyb3BQb2ludCh2aWV3LnN0YXRlLmRvYywgJG1vdXNlLnBvcywgc2xpY2UpIDogJG1vdXNlLnBvcztcbiAgICBpZiAoaW5zZXJ0UG9zID09IG51bGwpXG4gICAgICAgIGluc2VydFBvcyA9ICRtb3VzZS5wb3M7XG4gICAgbGV0IHRyID0gdmlldy5zdGF0ZS50cjtcbiAgICBpZiAobW92ZSlcbiAgICAgICAgdHIuZGVsZXRlU2VsZWN0aW9uKCk7XG4gICAgbGV0IHBvcyA9IHRyLm1hcHBpbmcubWFwKGluc2VydFBvcyk7XG4gICAgbGV0IGlzTm9kZSA9IHNsaWNlLm9wZW5TdGFydCA9PSAwICYmIHNsaWNlLm9wZW5FbmQgPT0gMCAmJiBzbGljZS5jb250ZW50LmNoaWxkQ291bnQgPT0gMTtcbiAgICBsZXQgYmVmb3JlSW5zZXJ0ID0gdHIuZG9jO1xuICAgIGlmIChpc05vZGUpXG4gICAgICAgIHRyLnJlcGxhY2VSYW5nZVdpdGgocG9zLCBwb3MsIHNsaWNlLmNvbnRlbnQuZmlyc3RDaGlsZCk7XG4gICAgZWxzZVxuICAgICAgICB0ci5yZXBsYWNlUmFuZ2UocG9zLCBwb3MsIHNsaWNlKTtcbiAgICBpZiAodHIuZG9jLmVxKGJlZm9yZUluc2VydCkpXG4gICAgICAgIHJldHVybjtcbiAgICBsZXQgJHBvcyA9IHRyLmRvYy5yZXNvbHZlKHBvcyk7XG4gICAgaWYgKGlzTm9kZSAmJiBOb2RlU2VsZWN0aW9uLmlzU2VsZWN0YWJsZShzbGljZS5jb250ZW50LmZpcnN0Q2hpbGQpICYmXG4gICAgICAgICRwb3Mubm9kZUFmdGVyICYmICRwb3Mubm9kZUFmdGVyLnNhbWVNYXJrdXAoc2xpY2UuY29udGVudC5maXJzdENoaWxkKSkge1xuICAgICAgICB0ci5zZXRTZWxlY3Rpb24obmV3IE5vZGVTZWxlY3Rpb24oJHBvcykpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgbGV0IGVuZCA9IHRyLm1hcHBpbmcubWFwKGluc2VydFBvcyk7XG4gICAgICAgIHRyLm1hcHBpbmcubWFwc1t0ci5tYXBwaW5nLm1hcHMubGVuZ3RoIC0gMV0uZm9yRWFjaCgoX2Zyb20sIF90bywgX25ld0Zyb20sIG5ld1RvKSA9PiBlbmQgPSBuZXdUbyk7XG4gICAgICAgIHRyLnNldFNlbGVjdGlvbihzZWxlY3Rpb25CZXR3ZWVuKHZpZXcsICRwb3MsIHRyLmRvYy5yZXNvbHZlKGVuZCkpKTtcbiAgICB9XG4gICAgdmlldy5mb2N1cygpO1xuICAgIHZpZXcuZGlzcGF0Y2godHIuc2V0TWV0YShcInVpRXZlbnRcIiwgXCJkcm9wXCIpKTtcbn07XG5oYW5kbGVycy5mb2N1cyA9IHZpZXcgPT4ge1xuICAgIGlmICghdmlldy5mb2N1c2VkKSB7XG4gICAgICAgIHZpZXcuZG9tT2JzZXJ2ZXIuc3RvcCgpO1xuICAgICAgICB2aWV3LmRvbS5jbGFzc0xpc3QuYWRkKFwiUHJvc2VNaXJyb3ItZm9jdXNlZFwiKTtcbiAgICAgICAgdmlldy5kb21PYnNlcnZlci5zdGFydCgpO1xuICAgICAgICB2aWV3LmZvY3VzZWQgPSB0cnVlO1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIGlmICh2aWV3LmRvY1ZpZXcgJiYgdmlldy5oYXNGb2N1cygpICYmICF2aWV3LmRvbU9ic2VydmVyLmN1cnJlbnRTZWxlY3Rpb24uZXEodmlldy5kb21TZWxlY3Rpb24oKSkpXG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uVG9ET00odmlldyk7XG4gICAgICAgIH0sIDIwKTtcbiAgICB9XG59O1xuaGFuZGxlcnMuYmx1ciA9ICh2aWV3LCBfZXZlbnQpID0+IHtcbiAgICBsZXQgZXZlbnQgPSBfZXZlbnQ7XG4gICAgaWYgKHZpZXcuZm9jdXNlZCkge1xuICAgICAgICB2aWV3LmRvbU9ic2VydmVyLnN0b3AoKTtcbiAgICAgICAgdmlldy5kb20uY2xhc3NMaXN0LnJlbW92ZShcIlByb3NlTWlycm9yLWZvY3VzZWRcIik7XG4gICAgICAgIHZpZXcuZG9tT2JzZXJ2ZXIuc3RhcnQoKTtcbiAgICAgICAgaWYgKGV2ZW50LnJlbGF0ZWRUYXJnZXQgJiYgdmlldy5kb20uY29udGFpbnMoZXZlbnQucmVsYXRlZFRhcmdldCkpXG4gICAgICAgICAgICB2aWV3LmRvbU9ic2VydmVyLmN1cnJlbnRTZWxlY3Rpb24uY2xlYXIoKTtcbiAgICAgICAgdmlldy5mb2N1c2VkID0gZmFsc2U7XG4gICAgfVxufTtcbmhhbmRsZXJzLmJlZm9yZWlucHV0ID0gKHZpZXcsIF9ldmVudCkgPT4ge1xuICAgIGxldCBldmVudCA9IF9ldmVudDtcbiAgICAvLyBXZSBzaG91bGQgcHJvYmFibHkgZG8gbW9yZSB3aXRoIGJlZm9yZWlucHV0IGV2ZW50cywgYnV0IHN1cHBvcnRcbiAgICAvLyBpcyBzbyBzcG90dHkgdGhhdCBJJ20gc3RpbGwgd2FpdGluZyB0byBzZWUgd2hlcmUgdGhleSBhcmUgZ29pbmcuXG4gICAgLy8gVmVyeSBzcGVjaWZpYyBoYWNrIHRvIGRlYWwgd2l0aCBiYWNrc3BhY2Ugc29tZXRpbWVzIGZhaWxpbmcgb25cbiAgICAvLyBDaHJvbWUgQW5kcm9pZCB3aGVuIGFmdGVyIGFuIHVuZWRpdGFibGUgbm9kZS5cbiAgICBpZiAoY2hyb21lICYmIGFuZHJvaWQgJiYgZXZlbnQuaW5wdXRUeXBlID09IFwiZGVsZXRlQ29udGVudEJhY2t3YXJkXCIpIHtcbiAgICAgICAgdmlldy5kb21PYnNlcnZlci5mbHVzaFNvb24oKTtcbiAgICAgICAgbGV0IHsgZG9tQ2hhbmdlQ291bnQgfSA9IHZpZXcuaW5wdXQ7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHZpZXcuaW5wdXQuZG9tQ2hhbmdlQ291bnQgIT0gZG9tQ2hhbmdlQ291bnQpXG4gICAgICAgICAgICAgICAgcmV0dXJuOyAvLyBFdmVudCBhbHJlYWR5IGhhZCBzb21lIGVmZmVjdFxuICAgICAgICAgICAgLy8gVGhpcyBidWcgdGVuZHMgdG8gY2xvc2UgdGhlIHZpcnR1YWwga2V5Ym9hcmQsIHNvIHdlIHJlZm9jdXNcbiAgICAgICAgICAgIHZpZXcuZG9tLmJsdXIoKTtcbiAgICAgICAgICAgIHZpZXcuZm9jdXMoKTtcbiAgICAgICAgICAgIGlmICh2aWV3LnNvbWVQcm9wKFwiaGFuZGxlS2V5RG93blwiLCBmID0+IGYodmlldywga2V5RXZlbnQoOCwgXCJCYWNrc3BhY2VcIikpKSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBsZXQgeyAkY3Vyc29yIH0gPSB2aWV3LnN0YXRlLnNlbGVjdGlvbjtcbiAgICAgICAgICAgIC8vIENydWRlIGFwcHJveGltYXRpb24gb2YgYmFja3NwYWNlIGJlaGF2aW9yIHdoZW4gbm8gY29tbWFuZCBoYW5kbGVkIGl0XG4gICAgICAgICAgICBpZiAoJGN1cnNvciAmJiAkY3Vyc29yLnBvcyA+IDApXG4gICAgICAgICAgICAgICAgdmlldy5kaXNwYXRjaCh2aWV3LnN0YXRlLnRyLmRlbGV0ZSgkY3Vyc29yLnBvcyAtIDEsICRjdXJzb3IucG9zKS5zY3JvbGxJbnRvVmlldygpKTtcbiAgICAgICAgfSwgNTApO1xuICAgIH1cbn07XG4vLyBNYWtlIHN1cmUgYWxsIGhhbmRsZXJzIGdldCByZWdpc3RlcmVkXG5mb3IgKGxldCBwcm9wIGluIGVkaXRIYW5kbGVycylcbiAgICBoYW5kbGVyc1twcm9wXSA9IGVkaXRIYW5kbGVyc1twcm9wXTtcblxuZnVuY3Rpb24gY29tcGFyZU9ianMoYSwgYikge1xuICAgIGlmIChhID09IGIpXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIGZvciAobGV0IHAgaW4gYSlcbiAgICAgICAgaWYgKGFbcF0gIT09IGJbcF0pXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgZm9yIChsZXQgcCBpbiBiKVxuICAgICAgICBpZiAoIShwIGluIGEpKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0cnVlO1xufVxuY2xhc3MgV2lkZ2V0VHlwZSB7XG4gICAgY29uc3RydWN0b3IodG9ET00sIHNwZWMpIHtcbiAgICAgICAgdGhpcy50b0RPTSA9IHRvRE9NO1xuICAgICAgICB0aGlzLnNwZWMgPSBzcGVjIHx8IG5vU3BlYztcbiAgICAgICAgdGhpcy5zaWRlID0gdGhpcy5zcGVjLnNpZGUgfHwgMDtcbiAgICB9XG4gICAgbWFwKG1hcHBpbmcsIHNwYW4sIG9mZnNldCwgb2xkT2Zmc2V0KSB7XG4gICAgICAgIGxldCB7IHBvcywgZGVsZXRlZCB9ID0gbWFwcGluZy5tYXBSZXN1bHQoc3Bhbi5mcm9tICsgb2xkT2Zmc2V0LCB0aGlzLnNpZGUgPCAwID8gLTEgOiAxKTtcbiAgICAgICAgcmV0dXJuIGRlbGV0ZWQgPyBudWxsIDogbmV3IERlY29yYXRpb24ocG9zIC0gb2Zmc2V0LCBwb3MgLSBvZmZzZXQsIHRoaXMpO1xuICAgIH1cbiAgICB2YWxpZCgpIHsgcmV0dXJuIHRydWU7IH1cbiAgICBlcShvdGhlcikge1xuICAgICAgICByZXR1cm4gdGhpcyA9PSBvdGhlciB8fFxuICAgICAgICAgICAgKG90aGVyIGluc3RhbmNlb2YgV2lkZ2V0VHlwZSAmJlxuICAgICAgICAgICAgICAgICh0aGlzLnNwZWMua2V5ICYmIHRoaXMuc3BlYy5rZXkgPT0gb3RoZXIuc3BlYy5rZXkgfHxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50b0RPTSA9PSBvdGhlci50b0RPTSAmJiBjb21wYXJlT2Jqcyh0aGlzLnNwZWMsIG90aGVyLnNwZWMpKSk7XG4gICAgfVxuICAgIGRlc3Ryb3kobm9kZSkge1xuICAgICAgICBpZiAodGhpcy5zcGVjLmRlc3Ryb3kpXG4gICAgICAgICAgICB0aGlzLnNwZWMuZGVzdHJveShub2RlKTtcbiAgICB9XG59XG5jbGFzcyBJbmxpbmVUeXBlIHtcbiAgICBjb25zdHJ1Y3RvcihhdHRycywgc3BlYykge1xuICAgICAgICB0aGlzLmF0dHJzID0gYXR0cnM7XG4gICAgICAgIHRoaXMuc3BlYyA9IHNwZWMgfHwgbm9TcGVjO1xuICAgIH1cbiAgICBtYXAobWFwcGluZywgc3Bhbiwgb2Zmc2V0LCBvbGRPZmZzZXQpIHtcbiAgICAgICAgbGV0IGZyb20gPSBtYXBwaW5nLm1hcChzcGFuLmZyb20gKyBvbGRPZmZzZXQsIHRoaXMuc3BlYy5pbmNsdXNpdmVTdGFydCA/IC0xIDogMSkgLSBvZmZzZXQ7XG4gICAgICAgIGxldCB0byA9IG1hcHBpbmcubWFwKHNwYW4udG8gKyBvbGRPZmZzZXQsIHRoaXMuc3BlYy5pbmNsdXNpdmVFbmQgPyAxIDogLTEpIC0gb2Zmc2V0O1xuICAgICAgICByZXR1cm4gZnJvbSA+PSB0byA/IG51bGwgOiBuZXcgRGVjb3JhdGlvbihmcm9tLCB0bywgdGhpcyk7XG4gICAgfVxuICAgIHZhbGlkKF8sIHNwYW4pIHsgcmV0dXJuIHNwYW4uZnJvbSA8IHNwYW4udG87IH1cbiAgICBlcShvdGhlcikge1xuICAgICAgICByZXR1cm4gdGhpcyA9PSBvdGhlciB8fFxuICAgICAgICAgICAgKG90aGVyIGluc3RhbmNlb2YgSW5saW5lVHlwZSAmJiBjb21wYXJlT2Jqcyh0aGlzLmF0dHJzLCBvdGhlci5hdHRycykgJiZcbiAgICAgICAgICAgICAgICBjb21wYXJlT2Jqcyh0aGlzLnNwZWMsIG90aGVyLnNwZWMpKTtcbiAgICB9XG4gICAgc3RhdGljIGlzKHNwYW4pIHsgcmV0dXJuIHNwYW4udHlwZSBpbnN0YW5jZW9mIElubGluZVR5cGU7IH1cbiAgICBkZXN0cm95KCkgeyB9XG59XG5jbGFzcyBOb2RlVHlwZSB7XG4gICAgY29uc3RydWN0b3IoYXR0cnMsIHNwZWMpIHtcbiAgICAgICAgdGhpcy5hdHRycyA9IGF0dHJzO1xuICAgICAgICB0aGlzLnNwZWMgPSBzcGVjIHx8IG5vU3BlYztcbiAgICB9XG4gICAgbWFwKG1hcHBpbmcsIHNwYW4sIG9mZnNldCwgb2xkT2Zmc2V0KSB7XG4gICAgICAgIGxldCBmcm9tID0gbWFwcGluZy5tYXBSZXN1bHQoc3Bhbi5mcm9tICsgb2xkT2Zmc2V0LCAxKTtcbiAgICAgICAgaWYgKGZyb20uZGVsZXRlZClcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICBsZXQgdG8gPSBtYXBwaW5nLm1hcFJlc3VsdChzcGFuLnRvICsgb2xkT2Zmc2V0LCAtMSk7XG4gICAgICAgIGlmICh0by5kZWxldGVkIHx8IHRvLnBvcyA8PSBmcm9tLnBvcylcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICByZXR1cm4gbmV3IERlY29yYXRpb24oZnJvbS5wb3MgLSBvZmZzZXQsIHRvLnBvcyAtIG9mZnNldCwgdGhpcyk7XG4gICAgfVxuICAgIHZhbGlkKG5vZGUsIHNwYW4pIHtcbiAgICAgICAgbGV0IHsgaW5kZXgsIG9mZnNldCB9ID0gbm9kZS5jb250ZW50LmZpbmRJbmRleChzcGFuLmZyb20pLCBjaGlsZDtcbiAgICAgICAgcmV0dXJuIG9mZnNldCA9PSBzcGFuLmZyb20gJiYgIShjaGlsZCA9IG5vZGUuY2hpbGQoaW5kZXgpKS5pc1RleHQgJiYgb2Zmc2V0ICsgY2hpbGQubm9kZVNpemUgPT0gc3Bhbi50bztcbiAgICB9XG4gICAgZXEob3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMgPT0gb3RoZXIgfHxcbiAgICAgICAgICAgIChvdGhlciBpbnN0YW5jZW9mIE5vZGVUeXBlICYmIGNvbXBhcmVPYmpzKHRoaXMuYXR0cnMsIG90aGVyLmF0dHJzKSAmJlxuICAgICAgICAgICAgICAgIGNvbXBhcmVPYmpzKHRoaXMuc3BlYywgb3RoZXIuc3BlYykpO1xuICAgIH1cbiAgICBkZXN0cm95KCkgeyB9XG59XG4vKipcbkRlY29yYXRpb24gb2JqZWN0cyBjYW4gYmUgcHJvdmlkZWQgdG8gdGhlIHZpZXcgdGhyb3VnaCB0aGVcbltgZGVjb3JhdGlvbnNgIHByb3BdKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyN2aWV3LkVkaXRvclByb3BzLmRlY29yYXRpb25zKS4gVGhleSBjb21lIGluXG5zZXZlcmFsIHZhcmlhbnRz4oCUc2VlIHRoZSBzdGF0aWMgbWVtYmVycyBvZiB0aGlzIGNsYXNzIGZvciBkZXRhaWxzLlxuKi9cbmNsYXNzIERlY29yYXRpb24ge1xuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgY29uc3RydWN0b3IoXG4gICAgLyoqXG4gICAgVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSBkZWNvcmF0aW9uLlxuICAgICovXG4gICAgZnJvbSwgXG4gICAgLyoqXG4gICAgVGhlIGVuZCBwb3NpdGlvbi4gV2lsbCBiZSB0aGUgc2FtZSBhcyBgZnJvbWAgZm9yIFt3aWRnZXRcbiAgICBkZWNvcmF0aW9uc10oaHR0cHM6Ly9wcm9zZW1pcnJvci5uZXQvZG9jcy9yZWYvI3ZpZXcuRGVjb3JhdGlvbl53aWRnZXQpLlxuICAgICovXG4gICAgdG8sIFxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgdHlwZSkge1xuICAgICAgICB0aGlzLmZyb20gPSBmcm9tO1xuICAgICAgICB0aGlzLnRvID0gdG87XG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgfVxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgY29weShmcm9tLCB0bykge1xuICAgICAgICByZXR1cm4gbmV3IERlY29yYXRpb24oZnJvbSwgdG8sIHRoaXMudHlwZSk7XG4gICAgfVxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgZXEob3RoZXIsIG9mZnNldCA9IDApIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHlwZS5lcShvdGhlci50eXBlKSAmJiB0aGlzLmZyb20gKyBvZmZzZXQgPT0gb3RoZXIuZnJvbSAmJiB0aGlzLnRvICsgb2Zmc2V0ID09IG90aGVyLnRvO1xuICAgIH1cbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIG1hcChtYXBwaW5nLCBvZmZzZXQsIG9sZE9mZnNldCkge1xuICAgICAgICByZXR1cm4gdGhpcy50eXBlLm1hcChtYXBwaW5nLCB0aGlzLCBvZmZzZXQsIG9sZE9mZnNldCk7XG4gICAgfVxuICAgIC8qKlxuICAgIENyZWF0ZXMgYSB3aWRnZXQgZGVjb3JhdGlvbiwgd2hpY2ggaXMgYSBET00gbm9kZSB0aGF0J3Mgc2hvd24gaW5cbiAgICB0aGUgZG9jdW1lbnQgYXQgdGhlIGdpdmVuIHBvc2l0aW9uLiBJdCBpcyByZWNvbW1lbmRlZCB0aGF0IHlvdVxuICAgIGRlbGF5IHJlbmRlcmluZyB0aGUgd2lkZ2V0IGJ5IHBhc3NpbmcgYSBmdW5jdGlvbiB0aGF0IHdpbGwgYmVcbiAgICBjYWxsZWQgd2hlbiB0aGUgd2lkZ2V0IGlzIGFjdHVhbGx5IGRyYXduIGluIGEgdmlldywgYnV0IHlvdSBjYW5cbiAgICBhbHNvIGRpcmVjdGx5IHBhc3MgYSBET00gbm9kZS4gYGdldFBvc2AgY2FuIGJlIHVzZWQgdG8gZmluZCB0aGVcbiAgICB3aWRnZXQncyBjdXJyZW50IGRvY3VtZW50IHBvc2l0aW9uLlxuICAgICovXG4gICAgc3RhdGljIHdpZGdldChwb3MsIHRvRE9NLCBzcGVjKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGVjb3JhdGlvbihwb3MsIHBvcywgbmV3IFdpZGdldFR5cGUodG9ET00sIHNwZWMpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgQ3JlYXRlcyBhbiBpbmxpbmUgZGVjb3JhdGlvbiwgd2hpY2ggYWRkcyB0aGUgZ2l2ZW4gYXR0cmlidXRlcyB0b1xuICAgIGVhY2ggaW5saW5lIG5vZGUgYmV0d2VlbiBgZnJvbWAgYW5kIGB0b2AuXG4gICAgKi9cbiAgICBzdGF0aWMgaW5saW5lKGZyb20sIHRvLCBhdHRycywgc3BlYykge1xuICAgICAgICByZXR1cm4gbmV3IERlY29yYXRpb24oZnJvbSwgdG8sIG5ldyBJbmxpbmVUeXBlKGF0dHJzLCBzcGVjKSk7XG4gICAgfVxuICAgIC8qKlxuICAgIENyZWF0ZXMgYSBub2RlIGRlY29yYXRpb24uIGBmcm9tYCBhbmQgYHRvYCBzaG91bGQgcG9pbnQgcHJlY2lzZWx5XG4gICAgYmVmb3JlIGFuZCBhZnRlciBhIG5vZGUgaW4gdGhlIGRvY3VtZW50LiBUaGF0IG5vZGUsIGFuZCBvbmx5IHRoYXRcbiAgICBub2RlLCB3aWxsIHJlY2VpdmUgdGhlIGdpdmVuIGF0dHJpYnV0ZXMuXG4gICAgKi9cbiAgICBzdGF0aWMgbm9kZShmcm9tLCB0bywgYXR0cnMsIHNwZWMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEZWNvcmF0aW9uKGZyb20sIHRvLCBuZXcgTm9kZVR5cGUoYXR0cnMsIHNwZWMpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgVGhlIHNwZWMgcHJvdmlkZWQgd2hlbiBjcmVhdGluZyB0aGlzIGRlY29yYXRpb24uIENhbiBiZSB1c2VmdWxcbiAgICBpZiB5b3UndmUgc3RvcmVkIGV4dHJhIGluZm9ybWF0aW9uIGluIHRoYXQgb2JqZWN0LlxuICAgICovXG4gICAgZ2V0IHNwZWMoKSB7IHJldHVybiB0aGlzLnR5cGUuc3BlYzsgfVxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgZ2V0IGlubGluZSgpIHsgcmV0dXJuIHRoaXMudHlwZSBpbnN0YW5jZW9mIElubGluZVR5cGU7IH1cbn1cbmNvbnN0IG5vbmUgPSBbXSwgbm9TcGVjID0ge307XG4vKipcbkEgY29sbGVjdGlvbiBvZiBbZGVjb3JhdGlvbnNdKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyN2aWV3LkRlY29yYXRpb24pLCBvcmdhbml6ZWQgaW4gc3VjaFxuYSB3YXkgdGhhdCB0aGUgZHJhd2luZyBhbGdvcml0aG0gY2FuIGVmZmljaWVudGx5IHVzZSBhbmQgY29tcGFyZVxudGhlbS4gVGhpcyBpcyBhIHBlcnNpc3RlbnQgZGF0YSBzdHJ1Y3R1cmXigJRpdCBpcyBub3QgbW9kaWZpZWQsXG51cGRhdGVzIGNyZWF0ZSBhIG5ldyB2YWx1ZS5cbiovXG5jbGFzcyBEZWNvcmF0aW9uU2V0IHtcbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGxvY2FsLCBjaGlsZHJlbikge1xuICAgICAgICB0aGlzLmxvY2FsID0gbG9jYWwubGVuZ3RoID8gbG9jYWwgOiBub25lO1xuICAgICAgICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW4ubGVuZ3RoID8gY2hpbGRyZW4gOiBub25lO1xuICAgIH1cbiAgICAvKipcbiAgICBDcmVhdGUgYSBzZXQgb2YgZGVjb3JhdGlvbnMsIHVzaW5nIHRoZSBzdHJ1Y3R1cmUgb2YgdGhlIGdpdmVuXG4gICAgZG9jdW1lbnQuXG4gICAgKi9cbiAgICBzdGF0aWMgY3JlYXRlKGRvYywgZGVjb3JhdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIGRlY29yYXRpb25zLmxlbmd0aCA/IGJ1aWxkVHJlZShkZWNvcmF0aW9ucywgZG9jLCAwLCBub1NwZWMpIDogZW1wdHk7XG4gICAgfVxuICAgIC8qKlxuICAgIEZpbmQgYWxsIGRlY29yYXRpb25zIGluIHRoaXMgc2V0IHdoaWNoIHRvdWNoIHRoZSBnaXZlbiByYW5nZVxuICAgIChpbmNsdWRpbmcgZGVjb3JhdGlvbnMgdGhhdCBzdGFydCBvciBlbmQgZGlyZWN0bHkgYXQgdGhlXG4gICAgYm91bmRhcmllcykgYW5kIG1hdGNoIHRoZSBnaXZlbiBwcmVkaWNhdGUgb24gdGhlaXIgc3BlYy4gV2hlblxuICAgIGBzdGFydGAgYW5kIGBlbmRgIGFyZSBvbWl0dGVkLCBhbGwgZGVjb3JhdGlvbnMgaW4gdGhlIHNldCBhcmVcbiAgICBjb25zaWRlcmVkLiBXaGVuIGBwcmVkaWNhdGVgIGlzbid0IGdpdmVuLCBhbGwgZGVjb3JhdGlvbnMgYXJlXG4gICAgYXNzdW1lZCB0byBtYXRjaC5cbiAgICAqL1xuICAgIGZpbmQoc3RhcnQsIGVuZCwgcHJlZGljYXRlKSB7XG4gICAgICAgIGxldCByZXN1bHQgPSBbXTtcbiAgICAgICAgdGhpcy5maW5kSW5uZXIoc3RhcnQgPT0gbnVsbCA/IDAgOiBzdGFydCwgZW5kID09IG51bGwgPyAxZTkgOiBlbmQsIHJlc3VsdCwgMCwgcHJlZGljYXRlKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgZmluZElubmVyKHN0YXJ0LCBlbmQsIHJlc3VsdCwgb2Zmc2V0LCBwcmVkaWNhdGUpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxvY2FsLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgc3BhbiA9IHRoaXMubG9jYWxbaV07XG4gICAgICAgICAgICBpZiAoc3Bhbi5mcm9tIDw9IGVuZCAmJiBzcGFuLnRvID49IHN0YXJ0ICYmICghcHJlZGljYXRlIHx8IHByZWRpY2F0ZShzcGFuLnNwZWMpKSlcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChzcGFuLmNvcHkoc3Bhbi5mcm9tICsgb2Zmc2V0LCBzcGFuLnRvICsgb2Zmc2V0KSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5jaGlsZHJlbltpXSA8IGVuZCAmJiB0aGlzLmNoaWxkcmVuW2kgKyAxXSA+IHN0YXJ0KSB7XG4gICAgICAgICAgICAgICAgbGV0IGNoaWxkT2ZmID0gdGhpcy5jaGlsZHJlbltpXSArIDE7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGlsZHJlbltpICsgMl0uZmluZElubmVyKHN0YXJ0IC0gY2hpbGRPZmYsIGVuZCAtIGNoaWxkT2ZmLCByZXN1bHQsIG9mZnNldCArIGNoaWxkT2ZmLCBwcmVkaWNhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgIE1hcCB0aGUgc2V0IG9mIGRlY29yYXRpb25zIGluIHJlc3BvbnNlIHRvIGEgY2hhbmdlIGluIHRoZVxuICAgIGRvY3VtZW50LlxuICAgICovXG4gICAgbWFwKG1hcHBpbmcsIGRvYywgb3B0aW9ucykge1xuICAgICAgICBpZiAodGhpcyA9PSBlbXB0eSB8fCBtYXBwaW5nLm1hcHMubGVuZ3RoID09IDApXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgcmV0dXJuIHRoaXMubWFwSW5uZXIobWFwcGluZywgZG9jLCAwLCAwLCBvcHRpb25zIHx8IG5vU3BlYyk7XG4gICAgfVxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgbWFwSW5uZXIobWFwcGluZywgbm9kZSwgb2Zmc2V0LCBvbGRPZmZzZXQsIG9wdGlvbnMpIHtcbiAgICAgICAgbGV0IG5ld0xvY2FsO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubG9jYWwubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBtYXBwZWQgPSB0aGlzLmxvY2FsW2ldLm1hcChtYXBwaW5nLCBvZmZzZXQsIG9sZE9mZnNldCk7XG4gICAgICAgICAgICBpZiAobWFwcGVkICYmIG1hcHBlZC50eXBlLnZhbGlkKG5vZGUsIG1hcHBlZCkpXG4gICAgICAgICAgICAgICAgKG5ld0xvY2FsIHx8IChuZXdMb2NhbCA9IFtdKSkucHVzaChtYXBwZWQpO1xuICAgICAgICAgICAgZWxzZSBpZiAob3B0aW9ucy5vblJlbW92ZSlcbiAgICAgICAgICAgICAgICBvcHRpb25zLm9uUmVtb3ZlKHRoaXMubG9jYWxbaV0uc3BlYyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuY2hpbGRyZW4ubGVuZ3RoKVxuICAgICAgICAgICAgcmV0dXJuIG1hcENoaWxkcmVuKHRoaXMuY2hpbGRyZW4sIG5ld0xvY2FsIHx8IFtdLCBtYXBwaW5nLCBub2RlLCBvZmZzZXQsIG9sZE9mZnNldCwgb3B0aW9ucyk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHJldHVybiBuZXdMb2NhbCA/IG5ldyBEZWNvcmF0aW9uU2V0KG5ld0xvY2FsLnNvcnQoYnlQb3MpLCBub25lKSA6IGVtcHR5O1xuICAgIH1cbiAgICAvKipcbiAgICBBZGQgdGhlIGdpdmVuIGFycmF5IG9mIGRlY29yYXRpb25zIHRvIHRoZSBvbmVzIGluIHRoZSBzZXQsXG4gICAgcHJvZHVjaW5nIGEgbmV3IHNldC4gTmVlZHMgYWNjZXNzIHRvIHRoZSBjdXJyZW50IGRvY3VtZW50IHRvXG4gICAgY3JlYXRlIHRoZSBhcHByb3ByaWF0ZSB0cmVlIHN0cnVjdHVyZS5cbiAgICAqL1xuICAgIGFkZChkb2MsIGRlY29yYXRpb25zKSB7XG4gICAgICAgIGlmICghZGVjb3JhdGlvbnMubGVuZ3RoKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIGlmICh0aGlzID09IGVtcHR5KVxuICAgICAgICAgICAgcmV0dXJuIERlY29yYXRpb25TZXQuY3JlYXRlKGRvYywgZGVjb3JhdGlvbnMpO1xuICAgICAgICByZXR1cm4gdGhpcy5hZGRJbm5lcihkb2MsIGRlY29yYXRpb25zLCAwKTtcbiAgICB9XG4gICAgYWRkSW5uZXIoZG9jLCBkZWNvcmF0aW9ucywgb2Zmc2V0KSB7XG4gICAgICAgIGxldCBjaGlsZHJlbiwgY2hpbGRJbmRleCA9IDA7XG4gICAgICAgIGRvYy5mb3JFYWNoKChjaGlsZE5vZGUsIGNoaWxkT2Zmc2V0KSA9PiB7XG4gICAgICAgICAgICBsZXQgYmFzZU9mZnNldCA9IGNoaWxkT2Zmc2V0ICsgb2Zmc2V0LCBmb3VuZDtcbiAgICAgICAgICAgIGlmICghKGZvdW5kID0gdGFrZVNwYW5zRm9yTm9kZShkZWNvcmF0aW9ucywgY2hpbGROb2RlLCBiYXNlT2Zmc2V0KSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgaWYgKCFjaGlsZHJlbilcbiAgICAgICAgICAgICAgICBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW4uc2xpY2UoKTtcbiAgICAgICAgICAgIHdoaWxlIChjaGlsZEluZGV4IDwgY2hpbGRyZW4ubGVuZ3RoICYmIGNoaWxkcmVuW2NoaWxkSW5kZXhdIDwgY2hpbGRPZmZzZXQpXG4gICAgICAgICAgICAgICAgY2hpbGRJbmRleCArPSAzO1xuICAgICAgICAgICAgaWYgKGNoaWxkcmVuW2NoaWxkSW5kZXhdID09IGNoaWxkT2Zmc2V0KVxuICAgICAgICAgICAgICAgIGNoaWxkcmVuW2NoaWxkSW5kZXggKyAyXSA9IGNoaWxkcmVuW2NoaWxkSW5kZXggKyAyXS5hZGRJbm5lcihjaGlsZE5vZGUsIGZvdW5kLCBiYXNlT2Zmc2V0ICsgMSk7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgY2hpbGRyZW4uc3BsaWNlKGNoaWxkSW5kZXgsIDAsIGNoaWxkT2Zmc2V0LCBjaGlsZE9mZnNldCArIGNoaWxkTm9kZS5ub2RlU2l6ZSwgYnVpbGRUcmVlKGZvdW5kLCBjaGlsZE5vZGUsIGJhc2VPZmZzZXQgKyAxLCBub1NwZWMpKTtcbiAgICAgICAgICAgIGNoaWxkSW5kZXggKz0gMztcbiAgICAgICAgfSk7XG4gICAgICAgIGxldCBsb2NhbCA9IG1vdmVTcGFucyhjaGlsZEluZGV4ID8gd2l0aG91dE51bGxzKGRlY29yYXRpb25zKSA6IGRlY29yYXRpb25zLCAtb2Zmc2V0KTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsb2NhbC5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgIGlmICghbG9jYWxbaV0udHlwZS52YWxpZChkb2MsIGxvY2FsW2ldKSlcbiAgICAgICAgICAgICAgICBsb2NhbC5zcGxpY2UoaS0tLCAxKTtcbiAgICAgICAgcmV0dXJuIG5ldyBEZWNvcmF0aW9uU2V0KGxvY2FsLmxlbmd0aCA/IHRoaXMubG9jYWwuY29uY2F0KGxvY2FsKS5zb3J0KGJ5UG9zKSA6IHRoaXMubG9jYWwsIGNoaWxkcmVuIHx8IHRoaXMuY2hpbGRyZW4pO1xuICAgIH1cbiAgICAvKipcbiAgICBDcmVhdGUgYSBuZXcgc2V0IHRoYXQgY29udGFpbnMgdGhlIGRlY29yYXRpb25zIGluIHRoaXMgc2V0LCBtaW51c1xuICAgIHRoZSBvbmVzIGluIHRoZSBnaXZlbiBhcnJheS5cbiAgICAqL1xuICAgIHJlbW92ZShkZWNvcmF0aW9ucykge1xuICAgICAgICBpZiAoZGVjb3JhdGlvbnMubGVuZ3RoID09IDAgfHwgdGhpcyA9PSBlbXB0eSlcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICByZXR1cm4gdGhpcy5yZW1vdmVJbm5lcihkZWNvcmF0aW9ucywgMCk7XG4gICAgfVxuICAgIHJlbW92ZUlubmVyKGRlY29yYXRpb25zLCBvZmZzZXQpIHtcbiAgICAgICAgbGV0IGNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbiwgbG9jYWwgPSB0aGlzLmxvY2FsO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgICAgICAgICBsZXQgZm91bmQ7XG4gICAgICAgICAgICBsZXQgZnJvbSA9IGNoaWxkcmVuW2ldICsgb2Zmc2V0LCB0byA9IGNoaWxkcmVuW2kgKyAxXSArIG9mZnNldDtcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwLCBzcGFuOyBqIDwgZGVjb3JhdGlvbnMubGVuZ3RoOyBqKyspXG4gICAgICAgICAgICAgICAgaWYgKHNwYW4gPSBkZWNvcmF0aW9uc1tqXSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3Bhbi5mcm9tID4gZnJvbSAmJiBzcGFuLnRvIDwgdG8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlY29yYXRpb25zW2pdID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIChmb3VuZCB8fCAoZm91bmQgPSBbXSkpLnB1c2goc3Bhbik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWZvdW5kKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgaWYgKGNoaWxkcmVuID09IHRoaXMuY2hpbGRyZW4pXG4gICAgICAgICAgICAgICAgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuLnNsaWNlKCk7XG4gICAgICAgICAgICBsZXQgcmVtb3ZlZCA9IGNoaWxkcmVuW2kgKyAyXS5yZW1vdmVJbm5lcihmb3VuZCwgZnJvbSArIDEpO1xuICAgICAgICAgICAgaWYgKHJlbW92ZWQgIT0gZW1wdHkpIHtcbiAgICAgICAgICAgICAgICBjaGlsZHJlbltpICsgMl0gPSByZW1vdmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW4uc3BsaWNlKGksIDMpO1xuICAgICAgICAgICAgICAgIGkgLT0gMztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAobG9jYWwubGVuZ3RoKVxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIHNwYW47IGkgPCBkZWNvcmF0aW9ucy5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgICAgICBpZiAoc3BhbiA9IGRlY29yYXRpb25zW2ldKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgbG9jYWwubGVuZ3RoOyBqKyspXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobG9jYWxbal0uZXEoc3Bhbiwgb2Zmc2V0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsb2NhbCA9PSB0aGlzLmxvY2FsKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbCA9IHRoaXMubG9jYWwuc2xpY2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbC5zcGxpY2Uoai0tLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgIGlmIChjaGlsZHJlbiA9PSB0aGlzLmNoaWxkcmVuICYmIGxvY2FsID09IHRoaXMubG9jYWwpXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgcmV0dXJuIGxvY2FsLmxlbmd0aCB8fCBjaGlsZHJlbi5sZW5ndGggPyBuZXcgRGVjb3JhdGlvblNldChsb2NhbCwgY2hpbGRyZW4pIDogZW1wdHk7XG4gICAgfVxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgZm9yQ2hpbGQob2Zmc2V0LCBub2RlKSB7XG4gICAgICAgIGlmICh0aGlzID09IGVtcHR5KVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIGlmIChub2RlLmlzTGVhZilcbiAgICAgICAgICAgIHJldHVybiBEZWNvcmF0aW9uU2V0LmVtcHR5O1xuICAgICAgICBsZXQgY2hpbGQsIGxvY2FsO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyBpICs9IDMpXG4gICAgICAgICAgICBpZiAodGhpcy5jaGlsZHJlbltpXSA+PSBvZmZzZXQpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jaGlsZHJlbltpXSA9PSBvZmZzZXQpXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkID0gdGhpcy5jaGlsZHJlbltpICsgMl07XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIGxldCBzdGFydCA9IG9mZnNldCArIDEsIGVuZCA9IHN0YXJ0ICsgbm9kZS5jb250ZW50LnNpemU7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sb2NhbC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IGRlYyA9IHRoaXMubG9jYWxbaV07XG4gICAgICAgICAgICBpZiAoZGVjLmZyb20gPCBlbmQgJiYgZGVjLnRvID4gc3RhcnQgJiYgKGRlYy50eXBlIGluc3RhbmNlb2YgSW5saW5lVHlwZSkpIHtcbiAgICAgICAgICAgICAgICBsZXQgZnJvbSA9IE1hdGgubWF4KHN0YXJ0LCBkZWMuZnJvbSkgLSBzdGFydCwgdG8gPSBNYXRoLm1pbihlbmQsIGRlYy50bykgLSBzdGFydDtcbiAgICAgICAgICAgICAgICBpZiAoZnJvbSA8IHRvKVxuICAgICAgICAgICAgICAgICAgICAobG9jYWwgfHwgKGxvY2FsID0gW10pKS5wdXNoKGRlYy5jb3B5KGZyb20sIHRvKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxvY2FsKSB7XG4gICAgICAgICAgICBsZXQgbG9jYWxTZXQgPSBuZXcgRGVjb3JhdGlvblNldChsb2NhbC5zb3J0KGJ5UG9zKSwgbm9uZSk7XG4gICAgICAgICAgICByZXR1cm4gY2hpbGQgPyBuZXcgRGVjb3JhdGlvbkdyb3VwKFtsb2NhbFNldCwgY2hpbGRdKSA6IGxvY2FsU2V0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjaGlsZCB8fCBlbXB0eTtcbiAgICB9XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBlcShvdGhlcikge1xuICAgICAgICBpZiAodGhpcyA9PSBvdGhlcilcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICBpZiAoIShvdGhlciBpbnN0YW5jZW9mIERlY29yYXRpb25TZXQpIHx8XG4gICAgICAgICAgICB0aGlzLmxvY2FsLmxlbmd0aCAhPSBvdGhlci5sb2NhbC5sZW5ndGggfHxcbiAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4ubGVuZ3RoICE9IG90aGVyLmNoaWxkcmVuLmxlbmd0aClcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxvY2FsLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgaWYgKCF0aGlzLmxvY2FsW2ldLmVxKG90aGVyLmxvY2FsW2ldKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5jaGlsZHJlbi5sZW5ndGg7IGkgKz0gMylcbiAgICAgICAgICAgIGlmICh0aGlzLmNoaWxkcmVuW2ldICE9IG90aGVyLmNoaWxkcmVuW2ldIHx8XG4gICAgICAgICAgICAgICAgdGhpcy5jaGlsZHJlbltpICsgMV0gIT0gb3RoZXIuY2hpbGRyZW5baSArIDFdIHx8XG4gICAgICAgICAgICAgICAgIXRoaXMuY2hpbGRyZW5baSArIDJdLmVxKG90aGVyLmNoaWxkcmVuW2kgKyAyXSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBsb2NhbHMobm9kZSkge1xuICAgICAgICByZXR1cm4gcmVtb3ZlT3ZlcmxhcCh0aGlzLmxvY2Fsc0lubmVyKG5vZGUpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBsb2NhbHNJbm5lcihub2RlKSB7XG4gICAgICAgIGlmICh0aGlzID09IGVtcHR5KVxuICAgICAgICAgICAgcmV0dXJuIG5vbmU7XG4gICAgICAgIGlmIChub2RlLmlubGluZUNvbnRlbnQgfHwgIXRoaXMubG9jYWwuc29tZShJbmxpbmVUeXBlLmlzKSlcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsO1xuICAgICAgICBsZXQgcmVzdWx0ID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sb2NhbC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKCEodGhpcy5sb2NhbFtpXS50eXBlIGluc3RhbmNlb2YgSW5saW5lVHlwZSkpXG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2godGhpcy5sb2NhbFtpXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG4vKipcblRoZSBlbXB0eSBzZXQgb2YgZGVjb3JhdGlvbnMuXG4qL1xuRGVjb3JhdGlvblNldC5lbXB0eSA9IG5ldyBEZWNvcmF0aW9uU2V0KFtdLCBbXSk7XG4vKipcbkBpbnRlcm5hbFxuKi9cbkRlY29yYXRpb25TZXQucmVtb3ZlT3ZlcmxhcCA9IHJlbW92ZU92ZXJsYXA7XG5jb25zdCBlbXB0eSA9IERlY29yYXRpb25TZXQuZW1wdHk7XG4vLyBBbiBhYnN0cmFjdGlvbiB0aGF0IGFsbG93cyB0aGUgY29kZSBkZWFsaW5nIHdpdGggZGVjb3JhdGlvbnMgdG9cbi8vIHRyZWF0IG11bHRpcGxlIERlY29yYXRpb25TZXQgb2JqZWN0cyBhcyBpZiBpdCB3ZXJlIGEgc2luZ2xlIG9iamVjdFxuLy8gd2l0aCAoYSBzdWJzZXQgb2YpIHRoZSBzYW1lIGludGVyZmFjZS5cbmNsYXNzIERlY29yYXRpb25Hcm91cCB7XG4gICAgY29uc3RydWN0b3IobWVtYmVycykge1xuICAgICAgICB0aGlzLm1lbWJlcnMgPSBtZW1iZXJzO1xuICAgIH1cbiAgICBtYXAobWFwcGluZywgZG9jKSB7XG4gICAgICAgIGNvbnN0IG1hcHBlZERlY29zID0gdGhpcy5tZW1iZXJzLm1hcChtZW1iZXIgPT4gbWVtYmVyLm1hcChtYXBwaW5nLCBkb2MsIG5vU3BlYykpO1xuICAgICAgICByZXR1cm4gRGVjb3JhdGlvbkdyb3VwLmZyb20obWFwcGVkRGVjb3MpO1xuICAgIH1cbiAgICBmb3JDaGlsZChvZmZzZXQsIGNoaWxkKSB7XG4gICAgICAgIGlmIChjaGlsZC5pc0xlYWYpXG4gICAgICAgICAgICByZXR1cm4gRGVjb3JhdGlvblNldC5lbXB0eTtcbiAgICAgICAgbGV0IGZvdW5kID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5tZW1iZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgcmVzdWx0ID0gdGhpcy5tZW1iZXJzW2ldLmZvckNoaWxkKG9mZnNldCwgY2hpbGQpO1xuICAgICAgICAgICAgaWYgKHJlc3VsdCA9PSBlbXB0eSlcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBEZWNvcmF0aW9uR3JvdXApXG4gICAgICAgICAgICAgICAgZm91bmQgPSBmb3VuZC5jb25jYXQocmVzdWx0Lm1lbWJlcnMpO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIGZvdW5kLnB1c2gocmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gRGVjb3JhdGlvbkdyb3VwLmZyb20oZm91bmQpO1xuICAgIH1cbiAgICBlcShvdGhlcikge1xuICAgICAgICBpZiAoIShvdGhlciBpbnN0YW5jZW9mIERlY29yYXRpb25Hcm91cCkgfHxcbiAgICAgICAgICAgIG90aGVyLm1lbWJlcnMubGVuZ3RoICE9IHRoaXMubWVtYmVycy5sZW5ndGgpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5tZW1iZXJzLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgaWYgKCF0aGlzLm1lbWJlcnNbaV0uZXEob3RoZXIubWVtYmVyc1tpXSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgbG9jYWxzKG5vZGUpIHtcbiAgICAgICAgbGV0IHJlc3VsdCwgc29ydGVkID0gdHJ1ZTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm1lbWJlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBsb2NhbHMgPSB0aGlzLm1lbWJlcnNbaV0ubG9jYWxzSW5uZXIobm9kZSk7XG4gICAgICAgICAgICBpZiAoIWxvY2Fscy5sZW5ndGgpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGxvY2FscztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChzb3J0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnNsaWNlKCk7XG4gICAgICAgICAgICAgICAgICAgIHNvcnRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGxvY2Fscy5sZW5ndGg7IGorKylcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gobG9jYWxzW2pdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0ID8gcmVtb3ZlT3ZlcmxhcChzb3J0ZWQgPyByZXN1bHQgOiByZXN1bHQuc29ydChieVBvcykpIDogbm9uZTtcbiAgICB9XG4gICAgLy8gQ3JlYXRlIGEgZ3JvdXAgZm9yIHRoZSBnaXZlbiBhcnJheSBvZiBkZWNvcmF0aW9uIHNldHMsIG9yIHJldHVyblxuICAgIC8vIGEgc2luZ2xlIHNldCB3aGVuIHBvc3NpYmxlLlxuICAgIHN0YXRpYyBmcm9tKG1lbWJlcnMpIHtcbiAgICAgICAgc3dpdGNoIChtZW1iZXJzLmxlbmd0aCkge1xuICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gZW1wdHk7XG4gICAgICAgICAgICBjYXNlIDE6IHJldHVybiBtZW1iZXJzWzBdO1xuICAgICAgICAgICAgZGVmYXVsdDogcmV0dXJuIG5ldyBEZWNvcmF0aW9uR3JvdXAobWVtYmVycyk7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBtYXBDaGlsZHJlbihvbGRDaGlsZHJlbiwgbmV3TG9jYWwsIG1hcHBpbmcsIG5vZGUsIG9mZnNldCwgb2xkT2Zmc2V0LCBvcHRpb25zKSB7XG4gICAgbGV0IGNoaWxkcmVuID0gb2xkQ2hpbGRyZW4uc2xpY2UoKTtcbiAgICAvLyBNYXJrIHRoZSBjaGlsZHJlbiB0aGF0IGFyZSBkaXJlY3RseSB0b3VjaGVkIGJ5IGNoYW5nZXMsIGFuZFxuICAgIC8vIG1vdmUgdGhvc2UgdGhhdCBhcmUgYWZ0ZXIgdGhlIGNoYW5nZXMuXG4gICAgbGV0IHNoaWZ0ID0gKG9sZFN0YXJ0LCBvbGRFbmQsIG5ld1N0YXJ0LCBuZXdFbmQpID0+IHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkgKz0gMykge1xuICAgICAgICAgICAgbGV0IGVuZCA9IGNoaWxkcmVuW2kgKyAxXSwgZFNpemU7XG4gICAgICAgICAgICBpZiAoZW5kIDwgMCB8fCBvbGRTdGFydCA+IGVuZCArIG9sZE9mZnNldClcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIGxldCBzdGFydCA9IGNoaWxkcmVuW2ldICsgb2xkT2Zmc2V0O1xuICAgICAgICAgICAgaWYgKG9sZEVuZCA+PSBzdGFydCkge1xuICAgICAgICAgICAgICAgIGNoaWxkcmVuW2kgKyAxXSA9IG9sZFN0YXJ0IDw9IHN0YXJ0ID8gLTIgOiAtMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKG5ld1N0YXJ0ID49IG9mZnNldCAmJiAoZFNpemUgPSAobmV3RW5kIC0gbmV3U3RhcnQpIC0gKG9sZEVuZCAtIG9sZFN0YXJ0KSkpIHtcbiAgICAgICAgICAgICAgICBjaGlsZHJlbltpXSArPSBkU2l6ZTtcbiAgICAgICAgICAgICAgICBjaGlsZHJlbltpICsgMV0gKz0gZFNpemU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWFwcGluZy5tYXBzLmxlbmd0aDsgaSsrKVxuICAgICAgICBtYXBwaW5nLm1hcHNbaV0uZm9yRWFjaChzaGlmdCk7XG4gICAgLy8gRmluZCB0aGUgY2hpbGQgbm9kZXMgdGhhdCBzdGlsbCBjb3JyZXNwb25kIHRvIGEgc2luZ2xlIG5vZGUsXG4gICAgLy8gcmVjdXJzaXZlbHkgY2FsbCBtYXBJbm5lciBvbiB0aGVtIGFuZCB1cGRhdGUgdGhlaXIgcG9zaXRpb25zLlxuICAgIGxldCBtdXN0UmVidWlsZCA9IGZhbHNlO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpICs9IDMpXG4gICAgICAgIGlmIChjaGlsZHJlbltpICsgMV0gPCAwKSB7IC8vIFRvdWNoZWQgbm9kZXNcbiAgICAgICAgICAgIGlmIChjaGlsZHJlbltpICsgMV0gPT0gLTIpIHtcbiAgICAgICAgICAgICAgICBtdXN0UmVidWlsZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW5baSArIDFdID0gLTE7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgZnJvbSA9IG1hcHBpbmcubWFwKG9sZENoaWxkcmVuW2ldICsgb2xkT2Zmc2V0KSwgZnJvbUxvY2FsID0gZnJvbSAtIG9mZnNldDtcbiAgICAgICAgICAgIGlmIChmcm9tTG9jYWwgPCAwIHx8IGZyb21Mb2NhbCA+PSBub2RlLmNvbnRlbnQuc2l6ZSkge1xuICAgICAgICAgICAgICAgIG11c3RSZWJ1aWxkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIE11c3QgcmVhZCBvbGRDaGlsZHJlbiBiZWNhdXNlIGNoaWxkcmVuIHdhcyB0YWdnZWQgd2l0aCAtMVxuICAgICAgICAgICAgbGV0IHRvID0gbWFwcGluZy5tYXAob2xkQ2hpbGRyZW5baSArIDFdICsgb2xkT2Zmc2V0LCAtMSksIHRvTG9jYWwgPSB0byAtIG9mZnNldDtcbiAgICAgICAgICAgIGxldCB7IGluZGV4LCBvZmZzZXQ6IGNoaWxkT2Zmc2V0IH0gPSBub2RlLmNvbnRlbnQuZmluZEluZGV4KGZyb21Mb2NhbCk7XG4gICAgICAgICAgICBsZXQgY2hpbGROb2RlID0gbm9kZS5tYXliZUNoaWxkKGluZGV4KTtcbiAgICAgICAgICAgIGlmIChjaGlsZE5vZGUgJiYgY2hpbGRPZmZzZXQgPT0gZnJvbUxvY2FsICYmIGNoaWxkT2Zmc2V0ICsgY2hpbGROb2RlLm5vZGVTaXplID09IHRvTG9jYWwpIHtcbiAgICAgICAgICAgICAgICBsZXQgbWFwcGVkID0gY2hpbGRyZW5baSArIDJdXG4gICAgICAgICAgICAgICAgICAgIC5tYXBJbm5lcihtYXBwaW5nLCBjaGlsZE5vZGUsIGZyb20gKyAxLCBvbGRDaGlsZHJlbltpXSArIG9sZE9mZnNldCArIDEsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIGlmIChtYXBwZWQgIT0gZW1wdHkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW5baV0gPSBmcm9tTG9jYWw7XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuW2kgKyAxXSA9IHRvTG9jYWw7XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuW2kgKyAyXSA9IG1hcHBlZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuW2kgKyAxXSA9IC0yO1xuICAgICAgICAgICAgICAgICAgICBtdXN0UmVidWlsZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbXVzdFJlYnVpbGQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgLy8gUmVtYWluaW5nIGNoaWxkcmVuIG11c3QgYmUgY29sbGVjdGVkIGFuZCByZWJ1aWx0IGludG8gdGhlIGFwcHJvcHJpYXRlIHN0cnVjdHVyZVxuICAgIGlmIChtdXN0UmVidWlsZCkge1xuICAgICAgICBsZXQgZGVjb3JhdGlvbnMgPSBtYXBBbmRHYXRoZXJSZW1haW5pbmdEZWNvcmF0aW9ucyhjaGlsZHJlbiwgb2xkQ2hpbGRyZW4sIG5ld0xvY2FsLCBtYXBwaW5nLCBvZmZzZXQsIG9sZE9mZnNldCwgb3B0aW9ucyk7XG4gICAgICAgIGxldCBidWlsdCA9IGJ1aWxkVHJlZShkZWNvcmF0aW9ucywgbm9kZSwgMCwgb3B0aW9ucyk7XG4gICAgICAgIG5ld0xvY2FsID0gYnVpbHQubG9jYWw7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpICs9IDMpXG4gICAgICAgICAgICBpZiAoY2hpbGRyZW5baSArIDFdIDwgMCkge1xuICAgICAgICAgICAgICAgIGNoaWxkcmVuLnNwbGljZShpLCAzKTtcbiAgICAgICAgICAgICAgICBpIC09IDM7XG4gICAgICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBqID0gMDsgaSA8IGJ1aWx0LmNoaWxkcmVuLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgICAgICAgICBsZXQgZnJvbSA9IGJ1aWx0LmNoaWxkcmVuW2ldO1xuICAgICAgICAgICAgd2hpbGUgKGogPCBjaGlsZHJlbi5sZW5ndGggJiYgY2hpbGRyZW5bal0gPCBmcm9tKVxuICAgICAgICAgICAgICAgIGogKz0gMztcbiAgICAgICAgICAgIGNoaWxkcmVuLnNwbGljZShqLCAwLCBidWlsdC5jaGlsZHJlbltpXSwgYnVpbHQuY2hpbGRyZW5baSArIDFdLCBidWlsdC5jaGlsZHJlbltpICsgMl0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXcgRGVjb3JhdGlvblNldChuZXdMb2NhbC5zb3J0KGJ5UG9zKSwgY2hpbGRyZW4pO1xufVxuZnVuY3Rpb24gbW92ZVNwYW5zKHNwYW5zLCBvZmZzZXQpIHtcbiAgICBpZiAoIW9mZnNldCB8fCAhc3BhbnMubGVuZ3RoKVxuICAgICAgICByZXR1cm4gc3BhbnM7XG4gICAgbGV0IHJlc3VsdCA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3BhbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IHNwYW4gPSBzcGFuc1tpXTtcbiAgICAgICAgcmVzdWx0LnB1c2gobmV3IERlY29yYXRpb24oc3Bhbi5mcm9tICsgb2Zmc2V0LCBzcGFuLnRvICsgb2Zmc2V0LCBzcGFuLnR5cGUpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIG1hcEFuZEdhdGhlclJlbWFpbmluZ0RlY29yYXRpb25zKGNoaWxkcmVuLCBvbGRDaGlsZHJlbiwgZGVjb3JhdGlvbnMsIG1hcHBpbmcsIG9mZnNldCwgb2xkT2Zmc2V0LCBvcHRpb25zKSB7XG4gICAgLy8gR2F0aGVyIGFsbCBkZWNvcmF0aW9ucyBmcm9tIHRoZSByZW1haW5pbmcgbWFya2VkIGNoaWxkcmVuXG4gICAgZnVuY3Rpb24gZ2F0aGVyKHNldCwgb2xkT2Zmc2V0KSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2V0LmxvY2FsLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgbWFwcGVkID0gc2V0LmxvY2FsW2ldLm1hcChtYXBwaW5nLCBvZmZzZXQsIG9sZE9mZnNldCk7XG4gICAgICAgICAgICBpZiAobWFwcGVkKVxuICAgICAgICAgICAgICAgIGRlY29yYXRpb25zLnB1c2gobWFwcGVkKTtcbiAgICAgICAgICAgIGVsc2UgaWYgKG9wdGlvbnMub25SZW1vdmUpXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5vblJlbW92ZShzZXQubG9jYWxbaV0uc3BlYyk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZXQuY2hpbGRyZW4ubGVuZ3RoOyBpICs9IDMpXG4gICAgICAgICAgICBnYXRoZXIoc2V0LmNoaWxkcmVuW2kgKyAyXSwgc2V0LmNoaWxkcmVuW2ldICsgb2xkT2Zmc2V0ICsgMSk7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpICs9IDMpXG4gICAgICAgIGlmIChjaGlsZHJlbltpICsgMV0gPT0gLTEpXG4gICAgICAgICAgICBnYXRoZXIoY2hpbGRyZW5baSArIDJdLCBvbGRDaGlsZHJlbltpXSArIG9sZE9mZnNldCArIDEpO1xuICAgIHJldHVybiBkZWNvcmF0aW9ucztcbn1cbmZ1bmN0aW9uIHRha2VTcGFuc0Zvck5vZGUoc3BhbnMsIG5vZGUsIG9mZnNldCkge1xuICAgIGlmIChub2RlLmlzTGVhZilcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgbGV0IGVuZCA9IG9mZnNldCArIG5vZGUubm9kZVNpemUsIGZvdW5kID0gbnVsbDtcbiAgICBmb3IgKGxldCBpID0gMCwgc3BhbjsgaSA8IHNwYW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICgoc3BhbiA9IHNwYW5zW2ldKSAmJiBzcGFuLmZyb20gPiBvZmZzZXQgJiYgc3Bhbi50byA8IGVuZCkge1xuICAgICAgICAgICAgKGZvdW5kIHx8IChmb3VuZCA9IFtdKSkucHVzaChzcGFuKTtcbiAgICAgICAgICAgIHNwYW5zW2ldID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZm91bmQ7XG59XG5mdW5jdGlvbiB3aXRob3V0TnVsbHMoYXJyYXkpIHtcbiAgICBsZXQgcmVzdWx0ID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKylcbiAgICAgICAgaWYgKGFycmF5W2ldICE9IG51bGwpXG4gICAgICAgICAgICByZXN1bHQucHVzaChhcnJheVtpXSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbi8vIEJ1aWxkIHVwIGEgdHJlZSB0aGF0IGNvcnJlc3BvbmRzIHRvIGEgc2V0IG9mIGRlY29yYXRpb25zLiBgb2Zmc2V0YFxuLy8gaXMgYSBiYXNlIG9mZnNldCB0aGF0IHNob3VsZCBiZSBzdWJ0cmFjdGVkIGZyb20gdGhlIGBmcm9tYCBhbmQgYHRvYFxuLy8gcG9zaXRpb25zIGluIHRoZSBzcGFucyAoc28gdGhhdCB3ZSBkb24ndCBoYXZlIHRvIGFsbG9jYXRlIG5ldyBzcGFuc1xuLy8gZm9yIHJlY3Vyc2l2ZSBjYWxscykuXG5mdW5jdGlvbiBidWlsZFRyZWUoc3BhbnMsIG5vZGUsIG9mZnNldCwgb3B0aW9ucykge1xuICAgIGxldCBjaGlsZHJlbiA9IFtdLCBoYXNOdWxscyA9IGZhbHNlO1xuICAgIG5vZGUuZm9yRWFjaCgoY2hpbGROb2RlLCBsb2NhbFN0YXJ0KSA9PiB7XG4gICAgICAgIGxldCBmb3VuZCA9IHRha2VTcGFuc0Zvck5vZGUoc3BhbnMsIGNoaWxkTm9kZSwgbG9jYWxTdGFydCArIG9mZnNldCk7XG4gICAgICAgIGlmIChmb3VuZCkge1xuICAgICAgICAgICAgaGFzTnVsbHMgPSB0cnVlO1xuICAgICAgICAgICAgbGV0IHN1YnRyZWUgPSBidWlsZFRyZWUoZm91bmQsIGNoaWxkTm9kZSwgb2Zmc2V0ICsgbG9jYWxTdGFydCArIDEsIG9wdGlvbnMpO1xuICAgICAgICAgICAgaWYgKHN1YnRyZWUgIT0gZW1wdHkpXG4gICAgICAgICAgICAgICAgY2hpbGRyZW4ucHVzaChsb2NhbFN0YXJ0LCBsb2NhbFN0YXJ0ICsgY2hpbGROb2RlLm5vZGVTaXplLCBzdWJ0cmVlKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGxldCBsb2NhbHMgPSBtb3ZlU3BhbnMoaGFzTnVsbHMgPyB3aXRob3V0TnVsbHMoc3BhbnMpIDogc3BhbnMsIC1vZmZzZXQpLnNvcnQoYnlQb3MpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbG9jYWxzLmxlbmd0aDsgaSsrKVxuICAgICAgICBpZiAoIWxvY2Fsc1tpXS50eXBlLnZhbGlkKG5vZGUsIGxvY2Fsc1tpXSkpIHtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLm9uUmVtb3ZlKVxuICAgICAgICAgICAgICAgIG9wdGlvbnMub25SZW1vdmUobG9jYWxzW2ldLnNwZWMpO1xuICAgICAgICAgICAgbG9jYWxzLnNwbGljZShpLS0sIDEpO1xuICAgICAgICB9XG4gICAgcmV0dXJuIGxvY2Fscy5sZW5ndGggfHwgY2hpbGRyZW4ubGVuZ3RoID8gbmV3IERlY29yYXRpb25TZXQobG9jYWxzLCBjaGlsZHJlbikgOiBlbXB0eTtcbn1cbi8vIFVzZWQgdG8gc29ydCBkZWNvcmF0aW9ucyBzbyB0aGF0IG9uZXMgd2l0aCBhIGxvdyBzdGFydCBwb3NpdGlvblxuLy8gY29tZSBmaXJzdCwgYW5kIHdpdGhpbiBhIHNldCB3aXRoIHRoZSBzYW1lIHN0YXJ0IHBvc2l0aW9uLCB0aG9zZVxuLy8gd2l0aCBhbiBzbWFsbGVyIGVuZCBwb3NpdGlvbiBjb21lIGZpcnN0LlxuZnVuY3Rpb24gYnlQb3MoYSwgYikge1xuICAgIHJldHVybiBhLmZyb20gLSBiLmZyb20gfHwgYS50byAtIGIudG87XG59XG4vLyBTY2FuIGEgc29ydGVkIGFycmF5IG9mIGRlY29yYXRpb25zIGZvciBwYXJ0aWFsbHkgb3ZlcmxhcHBpbmcgc3BhbnMsXG4vLyBhbmQgc3BsaXQgdGhvc2Ugc28gdGhhdCBvbmx5IGZ1bGx5IG92ZXJsYXBwaW5nIHNwYW5zIGFyZSBsZWZ0ICh0b1xuLy8gbWFrZSBzdWJzZXF1ZW50IHJlbmRlcmluZyBlYXNpZXIpLiBXaWxsIHJldHVybiB0aGUgaW5wdXQgYXJyYXkgaWZcbi8vIG5vIHBhcnRpYWxseSBvdmVybGFwcGluZyBzcGFucyBhcmUgZm91bmQgKHRoZSBjb21tb24gY2FzZSkuXG5mdW5jdGlvbiByZW1vdmVPdmVybGFwKHNwYW5zKSB7XG4gICAgbGV0IHdvcmtpbmcgPSBzcGFucztcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHdvcmtpbmcubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgIGxldCBzcGFuID0gd29ya2luZ1tpXTtcbiAgICAgICAgaWYgKHNwYW4uZnJvbSAhPSBzcGFuLnRvKVxuICAgICAgICAgICAgZm9yIChsZXQgaiA9IGkgKyAxOyBqIDwgd29ya2luZy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIGxldCBuZXh0ID0gd29ya2luZ1tqXTtcbiAgICAgICAgICAgICAgICBpZiAobmV4dC5mcm9tID09IHNwYW4uZnJvbSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAobmV4dC50byAhPSBzcGFuLnRvKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAod29ya2luZyA9PSBzcGFucylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3b3JraW5nID0gc3BhbnMuc2xpY2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZvbGxvd2VkIGJ5IGEgcGFydGlhbGx5IG92ZXJsYXBwaW5nIGxhcmdlciBzcGFuLiBTcGxpdCB0aGF0XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzcGFuLlxuICAgICAgICAgICAgICAgICAgICAgICAgd29ya2luZ1tqXSA9IG5leHQuY29weShuZXh0LmZyb20sIHNwYW4udG8pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5zZXJ0QWhlYWQod29ya2luZywgaiArIDEsIG5leHQuY29weShzcGFuLnRvLCBuZXh0LnRvKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAobmV4dC5mcm9tIDwgc3Bhbi50bykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdvcmtpbmcgPT0gc3BhbnMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd29ya2luZyA9IHNwYW5zLnNsaWNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGUgZW5kIG9mIHRoaXMgb25lIG92ZXJsYXBzIHdpdGggYSBzdWJzZXF1ZW50IHNwYW4uIFNwbGl0XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGlzIG9uZS5cbiAgICAgICAgICAgICAgICAgICAgICAgIHdvcmtpbmdbaV0gPSBzcGFuLmNvcHkoc3Bhbi5mcm9tLCBuZXh0LmZyb20pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5zZXJ0QWhlYWQod29ya2luZywgaiwgc3Bhbi5jb3B5KG5leHQuZnJvbSwgc3Bhbi50bykpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHdvcmtpbmc7XG59XG5mdW5jdGlvbiBpbnNlcnRBaGVhZChhcnJheSwgaSwgZGVjbykge1xuICAgIHdoaWxlIChpIDwgYXJyYXkubGVuZ3RoICYmIGJ5UG9zKGRlY28sIGFycmF5W2ldKSA+IDApXG4gICAgICAgIGkrKztcbiAgICBhcnJheS5zcGxpY2UoaSwgMCwgZGVjbyk7XG59XG4vLyBHZXQgdGhlIGRlY29yYXRpb25zIGFzc29jaWF0ZWQgd2l0aCB0aGUgY3VycmVudCBwcm9wcyBvZiBhIHZpZXcuXG5mdW5jdGlvbiB2aWV3RGVjb3JhdGlvbnModmlldykge1xuICAgIGxldCBmb3VuZCA9IFtdO1xuICAgIHZpZXcuc29tZVByb3AoXCJkZWNvcmF0aW9uc1wiLCBmID0+IHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IGYodmlldy5zdGF0ZSk7XG4gICAgICAgIGlmIChyZXN1bHQgJiYgcmVzdWx0ICE9IGVtcHR5KVxuICAgICAgICAgICAgZm91bmQucHVzaChyZXN1bHQpO1xuICAgIH0pO1xuICAgIGlmICh2aWV3LmN1cnNvcldyYXBwZXIpXG4gICAgICAgIGZvdW5kLnB1c2goRGVjb3JhdGlvblNldC5jcmVhdGUodmlldy5zdGF0ZS5kb2MsIFt2aWV3LmN1cnNvcldyYXBwZXIuZGVjb10pKTtcbiAgICByZXR1cm4gRGVjb3JhdGlvbkdyb3VwLmZyb20oZm91bmQpO1xufVxuXG5jb25zdCBvYnNlcnZlT3B0aW9ucyA9IHtcbiAgICBjaGlsZExpc3Q6IHRydWUsXG4gICAgY2hhcmFjdGVyRGF0YTogdHJ1ZSxcbiAgICBjaGFyYWN0ZXJEYXRhT2xkVmFsdWU6IHRydWUsXG4gICAgYXR0cmlidXRlczogdHJ1ZSxcbiAgICBhdHRyaWJ1dGVPbGRWYWx1ZTogdHJ1ZSxcbiAgICBzdWJ0cmVlOiB0cnVlXG59O1xuLy8gSUUxMSBoYXMgdmVyeSBicm9rZW4gbXV0YXRpb24gb2JzZXJ2ZXJzLCBzbyB3ZSBhbHNvIGxpc3RlbiB0byBET01DaGFyYWN0ZXJEYXRhTW9kaWZpZWRcbmNvbnN0IHVzZUNoYXJEYXRhID0gaWUgJiYgaWVfdmVyc2lvbiA8PSAxMTtcbmNsYXNzIFNlbGVjdGlvblN0YXRlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5hbmNob3JOb2RlID0gbnVsbDtcbiAgICAgICAgdGhpcy5hbmNob3JPZmZzZXQgPSAwO1xuICAgICAgICB0aGlzLmZvY3VzTm9kZSA9IG51bGw7XG4gICAgICAgIHRoaXMuZm9jdXNPZmZzZXQgPSAwO1xuICAgIH1cbiAgICBzZXQoc2VsKSB7XG4gICAgICAgIHRoaXMuYW5jaG9yTm9kZSA9IHNlbC5hbmNob3JOb2RlO1xuICAgICAgICB0aGlzLmFuY2hvck9mZnNldCA9IHNlbC5hbmNob3JPZmZzZXQ7XG4gICAgICAgIHRoaXMuZm9jdXNOb2RlID0gc2VsLmZvY3VzTm9kZTtcbiAgICAgICAgdGhpcy5mb2N1c09mZnNldCA9IHNlbC5mb2N1c09mZnNldDtcbiAgICB9XG4gICAgY2xlYXIoKSB7XG4gICAgICAgIHRoaXMuYW5jaG9yTm9kZSA9IHRoaXMuZm9jdXNOb2RlID0gbnVsbDtcbiAgICB9XG4gICAgZXEoc2VsKSB7XG4gICAgICAgIHJldHVybiBzZWwuYW5jaG9yTm9kZSA9PSB0aGlzLmFuY2hvck5vZGUgJiYgc2VsLmFuY2hvck9mZnNldCA9PSB0aGlzLmFuY2hvck9mZnNldCAmJlxuICAgICAgICAgICAgc2VsLmZvY3VzTm9kZSA9PSB0aGlzLmZvY3VzTm9kZSAmJiBzZWwuZm9jdXNPZmZzZXQgPT0gdGhpcy5mb2N1c09mZnNldDtcbiAgICB9XG59XG5jbGFzcyBET01PYnNlcnZlciB7XG4gICAgY29uc3RydWN0b3IodmlldywgaGFuZGxlRE9NQ2hhbmdlKSB7XG4gICAgICAgIHRoaXMudmlldyA9IHZpZXc7XG4gICAgICAgIHRoaXMuaGFuZGxlRE9NQ2hhbmdlID0gaGFuZGxlRE9NQ2hhbmdlO1xuICAgICAgICB0aGlzLnF1ZXVlID0gW107XG4gICAgICAgIHRoaXMuZmx1c2hpbmdTb29uID0gLTE7XG4gICAgICAgIHRoaXMub2JzZXJ2ZXIgPSBudWxsO1xuICAgICAgICB0aGlzLmN1cnJlbnRTZWxlY3Rpb24gPSBuZXcgU2VsZWN0aW9uU3RhdGU7XG4gICAgICAgIHRoaXMub25DaGFyRGF0YSA9IG51bGw7XG4gICAgICAgIHRoaXMuc3VwcHJlc3NpbmdTZWxlY3Rpb25VcGRhdGVzID0gZmFsc2U7XG4gICAgICAgIHRoaXMub2JzZXJ2ZXIgPSB3aW5kb3cuTXV0YXRpb25PYnNlcnZlciAmJlxuICAgICAgICAgICAgbmV3IHdpbmRvdy5NdXRhdGlvbk9ic2VydmVyKG11dGF0aW9ucyA9PiB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtdXRhdGlvbnMubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucXVldWUucHVzaChtdXRhdGlvbnNbaV0pO1xuICAgICAgICAgICAgICAgIC8vIElFMTEgd2lsbCBzb21ldGltZXMgKG9uIGJhY2tzcGFjaW5nIG91dCBhIHNpbmdsZSBjaGFyYWN0ZXJcbiAgICAgICAgICAgICAgICAvLyB0ZXh0IG5vZGUgYWZ0ZXIgYSBCUiBub2RlKSBjYWxsIHRoZSBvYnNlcnZlciBjYWxsYmFja1xuICAgICAgICAgICAgICAgIC8vIGJlZm9yZSBhY3R1YWxseSB1cGRhdGluZyB0aGUgRE9NLCB3aGljaCB3aWxsIGNhdXNlXG4gICAgICAgICAgICAgICAgLy8gUHJvc2VNaXJyb3IgdG8gbWlzcyB0aGUgY2hhbmdlIChzZWUgIzkzMClcbiAgICAgICAgICAgICAgICBpZiAoaWUgJiYgaWVfdmVyc2lvbiA8PSAxMSAmJiBtdXRhdGlvbnMuc29tZShtID0+IG0udHlwZSA9PSBcImNoaWxkTGlzdFwiICYmIG0ucmVtb3ZlZE5vZGVzLmxlbmd0aCB8fFxuICAgICAgICAgICAgICAgICAgICBtLnR5cGUgPT0gXCJjaGFyYWN0ZXJEYXRhXCIgJiYgbS5vbGRWYWx1ZS5sZW5ndGggPiBtLnRhcmdldC5ub2RlVmFsdWUubGVuZ3RoKSlcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mbHVzaFNvb24oKTtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmx1c2goKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICBpZiAodXNlQ2hhckRhdGEpIHtcbiAgICAgICAgICAgIHRoaXMub25DaGFyRGF0YSA9IGUgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMucXVldWUucHVzaCh7IHRhcmdldDogZS50YXJnZXQsIHR5cGU6IFwiY2hhcmFjdGVyRGF0YVwiLCBvbGRWYWx1ZTogZS5wcmV2VmFsdWUgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy5mbHVzaFNvb24oKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vblNlbGVjdGlvbkNoYW5nZSA9IHRoaXMub25TZWxlY3Rpb25DaGFuZ2UuYmluZCh0aGlzKTtcbiAgICB9XG4gICAgZmx1c2hTb29uKCkge1xuICAgICAgICBpZiAodGhpcy5mbHVzaGluZ1Nvb24gPCAwKVxuICAgICAgICAgICAgdGhpcy5mbHVzaGluZ1Nvb24gPSB3aW5kb3cuc2V0VGltZW91dCgoKSA9PiB7IHRoaXMuZmx1c2hpbmdTb29uID0gLTE7IHRoaXMuZmx1c2goKTsgfSwgMjApO1xuICAgIH1cbiAgICBmb3JjZUZsdXNoKCkge1xuICAgICAgICBpZiAodGhpcy5mbHVzaGluZ1Nvb24gPiAtMSkge1xuICAgICAgICAgICAgd2luZG93LmNsZWFyVGltZW91dCh0aGlzLmZsdXNoaW5nU29vbik7XG4gICAgICAgICAgICB0aGlzLmZsdXNoaW5nU29vbiA9IC0xO1xuICAgICAgICAgICAgdGhpcy5mbHVzaCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHN0YXJ0KCkge1xuICAgICAgICBpZiAodGhpcy5vYnNlcnZlcilcbiAgICAgICAgICAgIHRoaXMub2JzZXJ2ZXIub2JzZXJ2ZSh0aGlzLnZpZXcuZG9tLCBvYnNlcnZlT3B0aW9ucyk7XG4gICAgICAgIGlmICh0aGlzLm9uQ2hhckRhdGEpXG4gICAgICAgICAgICB0aGlzLnZpZXcuZG9tLmFkZEV2ZW50TGlzdGVuZXIoXCJET01DaGFyYWN0ZXJEYXRhTW9kaWZpZWRcIiwgdGhpcy5vbkNoYXJEYXRhKTtcbiAgICAgICAgdGhpcy5jb25uZWN0U2VsZWN0aW9uKCk7XG4gICAgfVxuICAgIHN0b3AoKSB7XG4gICAgICAgIGlmICh0aGlzLm9ic2VydmVyKSB7XG4gICAgICAgICAgICBsZXQgdGFrZSA9IHRoaXMub2JzZXJ2ZXIudGFrZVJlY29yZHMoKTtcbiAgICAgICAgICAgIGlmICh0YWtlLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGFrZS5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5xdWV1ZS5wdXNoKHRha2VbaV0pO1xuICAgICAgICAgICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHRoaXMuZmx1c2goKSwgMjApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5vYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMub25DaGFyRGF0YSlcbiAgICAgICAgICAgIHRoaXMudmlldy5kb20ucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIkRPTUNoYXJhY3RlckRhdGFNb2RpZmllZFwiLCB0aGlzLm9uQ2hhckRhdGEpO1xuICAgICAgICB0aGlzLmRpc2Nvbm5lY3RTZWxlY3Rpb24oKTtcbiAgICB9XG4gICAgY29ubmVjdFNlbGVjdGlvbigpIHtcbiAgICAgICAgdGhpcy52aWV3LmRvbS5vd25lckRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJzZWxlY3Rpb25jaGFuZ2VcIiwgdGhpcy5vblNlbGVjdGlvbkNoYW5nZSk7XG4gICAgfVxuICAgIGRpc2Nvbm5lY3RTZWxlY3Rpb24oKSB7XG4gICAgICAgIHRoaXMudmlldy5kb20ub3duZXJEb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwic2VsZWN0aW9uY2hhbmdlXCIsIHRoaXMub25TZWxlY3Rpb25DaGFuZ2UpO1xuICAgIH1cbiAgICBzdXBwcmVzc1NlbGVjdGlvblVwZGF0ZXMoKSB7XG4gICAgICAgIHRoaXMuc3VwcHJlc3NpbmdTZWxlY3Rpb25VcGRhdGVzID0gdHJ1ZTtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLnN1cHByZXNzaW5nU2VsZWN0aW9uVXBkYXRlcyA9IGZhbHNlLCA1MCk7XG4gICAgfVxuICAgIG9uU2VsZWN0aW9uQ2hhbmdlKCkge1xuICAgICAgICBpZiAoIWhhc0ZvY3VzQW5kU2VsZWN0aW9uKHRoaXMudmlldykpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmICh0aGlzLnN1cHByZXNzaW5nU2VsZWN0aW9uVXBkYXRlcylcbiAgICAgICAgICAgIHJldHVybiBzZWxlY3Rpb25Ub0RPTSh0aGlzLnZpZXcpO1xuICAgICAgICAvLyBEZWxldGlvbnMgb24gSUUxMSBmaXJlIHRoZWlyIGV2ZW50cyBpbiB0aGUgd3Jvbmcgb3JkZXIsIGdpdmluZ1xuICAgICAgICAvLyB1cyBhIHNlbGVjdGlvbiBjaGFuZ2UgZXZlbnQgYmVmb3JlIHRoZSBET00gY2hhbmdlcyBhcmVcbiAgICAgICAgLy8gcmVwb3J0ZWQuXG4gICAgICAgIGlmIChpZSAmJiBpZV92ZXJzaW9uIDw9IDExICYmICF0aGlzLnZpZXcuc3RhdGUuc2VsZWN0aW9uLmVtcHR5KSB7XG4gICAgICAgICAgICBsZXQgc2VsID0gdGhpcy52aWV3LmRvbVNlbGVjdGlvbigpO1xuICAgICAgICAgICAgLy8gU2VsZWN0aW9uLmlzQ29sbGFwc2VkIGlzbid0IHJlbGlhYmxlIG9uIElFXG4gICAgICAgICAgICBpZiAoc2VsLmZvY3VzTm9kZSAmJiBpc0VxdWl2YWxlbnRQb3NpdGlvbihzZWwuZm9jdXNOb2RlLCBzZWwuZm9jdXNPZmZzZXQsIHNlbC5hbmNob3JOb2RlLCBzZWwuYW5jaG9yT2Zmc2V0KSlcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5mbHVzaFNvb24oKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmZsdXNoKCk7XG4gICAgfVxuICAgIHNldEN1clNlbGVjdGlvbigpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50U2VsZWN0aW9uLnNldCh0aGlzLnZpZXcuZG9tU2VsZWN0aW9uKCkpO1xuICAgIH1cbiAgICBpZ25vcmVTZWxlY3Rpb25DaGFuZ2Uoc2VsKSB7XG4gICAgICAgIGlmIChzZWwucmFuZ2VDb3VudCA9PSAwKVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIGxldCBjb250YWluZXIgPSBzZWwuZ2V0UmFuZ2VBdCgwKS5jb21tb25BbmNlc3RvckNvbnRhaW5lcjtcbiAgICAgICAgbGV0IGRlc2MgPSB0aGlzLnZpZXcuZG9jVmlldy5uZWFyZXN0RGVzYyhjb250YWluZXIpO1xuICAgICAgICBpZiAoZGVzYyAmJiBkZXNjLmlnbm9yZU11dGF0aW9uKHtcbiAgICAgICAgICAgIHR5cGU6IFwic2VsZWN0aW9uXCIsXG4gICAgICAgICAgICB0YXJnZXQ6IGNvbnRhaW5lci5ub2RlVHlwZSA9PSAzID8gY29udGFpbmVyLnBhcmVudE5vZGUgOiBjb250YWluZXJcbiAgICAgICAgfSkpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0Q3VyU2VsZWN0aW9uKCk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmbHVzaCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLnZpZXcuZG9jVmlldyB8fCB0aGlzLmZsdXNoaW5nU29vbiA+IC0xKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBsZXQgbXV0YXRpb25zID0gdGhpcy5vYnNlcnZlciA/IHRoaXMub2JzZXJ2ZXIudGFrZVJlY29yZHMoKSA6IFtdO1xuICAgICAgICBpZiAodGhpcy5xdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIG11dGF0aW9ucyA9IHRoaXMucXVldWUuY29uY2F0KG11dGF0aW9ucyk7XG4gICAgICAgICAgICB0aGlzLnF1ZXVlLmxlbmd0aCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHNlbCA9IHRoaXMudmlldy5kb21TZWxlY3Rpb24oKTtcbiAgICAgICAgbGV0IG5ld1NlbCA9ICF0aGlzLnN1cHByZXNzaW5nU2VsZWN0aW9uVXBkYXRlcyAmJiAhdGhpcy5jdXJyZW50U2VsZWN0aW9uLmVxKHNlbCkgJiYgaGFzRm9jdXNBbmRTZWxlY3Rpb24odGhpcy52aWV3KSAmJiAhdGhpcy5pZ25vcmVTZWxlY3Rpb25DaGFuZ2Uoc2VsKTtcbiAgICAgICAgbGV0IGZyb20gPSAtMSwgdG8gPSAtMSwgdHlwZU92ZXIgPSBmYWxzZSwgYWRkZWQgPSBbXTtcbiAgICAgICAgaWYgKHRoaXMudmlldy5lZGl0YWJsZSkge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtdXRhdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZWdpc3Rlck11dGF0aW9uKG11dGF0aW9uc1tpXSwgYWRkZWQpO1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgZnJvbSA9IGZyb20gPCAwID8gcmVzdWx0LmZyb20gOiBNYXRoLm1pbihyZXN1bHQuZnJvbSwgZnJvbSk7XG4gICAgICAgICAgICAgICAgICAgIHRvID0gdG8gPCAwID8gcmVzdWx0LnRvIDogTWF0aC5tYXgocmVzdWx0LnRvLCB0byk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQudHlwZU92ZXIpXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlT3ZlciA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChnZWNrbyAmJiBhZGRlZC5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICBsZXQgYnJzID0gYWRkZWQuZmlsdGVyKG4gPT4gbi5ub2RlTmFtZSA9PSBcIkJSXCIpO1xuICAgICAgICAgICAgaWYgKGJycy5sZW5ndGggPT0gMikge1xuICAgICAgICAgICAgICAgIGxldCBhID0gYnJzWzBdLCBiID0gYnJzWzFdO1xuICAgICAgICAgICAgICAgIGlmIChhLnBhcmVudE5vZGUgJiYgYS5wYXJlbnROb2RlLnBhcmVudE5vZGUgPT0gYi5wYXJlbnROb2RlKVxuICAgICAgICAgICAgICAgICAgICBiLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgYS5yZW1vdmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZnJvbSA+IC0xIHx8IG5ld1NlbCkge1xuICAgICAgICAgICAgaWYgKGZyb20gPiAtMSkge1xuICAgICAgICAgICAgICAgIHRoaXMudmlldy5kb2NWaWV3Lm1hcmtEaXJ0eShmcm9tLCB0byk7XG4gICAgICAgICAgICAgICAgY2hlY2tDU1ModGhpcy52aWV3KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuaGFuZGxlRE9NQ2hhbmdlKGZyb20sIHRvLCB0eXBlT3ZlciwgYWRkZWQpO1xuICAgICAgICAgICAgaWYgKHRoaXMudmlldy5kb2NWaWV3ICYmIHRoaXMudmlldy5kb2NWaWV3LmRpcnR5KVxuICAgICAgICAgICAgICAgIHRoaXMudmlldy51cGRhdGVTdGF0ZSh0aGlzLnZpZXcuc3RhdGUpO1xuICAgICAgICAgICAgZWxzZSBpZiAoIXRoaXMuY3VycmVudFNlbGVjdGlvbi5lcShzZWwpKVxuICAgICAgICAgICAgICAgIHNlbGVjdGlvblRvRE9NKHRoaXMudmlldyk7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRTZWxlY3Rpb24uc2V0KHNlbCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVnaXN0ZXJNdXRhdGlvbihtdXQsIGFkZGVkKSB7XG4gICAgICAgIC8vIElnbm9yZSBtdXRhdGlvbnMgaW5zaWRlIG5vZGVzIHRoYXQgd2VyZSBhbHJlYWR5IG5vdGVkIGFzIGluc2VydGVkXG4gICAgICAgIGlmIChhZGRlZC5pbmRleE9mKG11dC50YXJnZXQpID4gLTEpXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgbGV0IGRlc2MgPSB0aGlzLnZpZXcuZG9jVmlldy5uZWFyZXN0RGVzYyhtdXQudGFyZ2V0KTtcbiAgICAgICAgaWYgKG11dC50eXBlID09IFwiYXR0cmlidXRlc1wiICYmXG4gICAgICAgICAgICAoZGVzYyA9PSB0aGlzLnZpZXcuZG9jVmlldyB8fCBtdXQuYXR0cmlidXRlTmFtZSA9PSBcImNvbnRlbnRlZGl0YWJsZVwiIHx8XG4gICAgICAgICAgICAgICAgLy8gRmlyZWZveCBzb21ldGltZXMgZmlyZXMgc3B1cmlvdXMgZXZlbnRzIGZvciBudWxsL2VtcHR5IHN0eWxlc1xuICAgICAgICAgICAgICAgIChtdXQuYXR0cmlidXRlTmFtZSA9PSBcInN0eWxlXCIgJiYgIW11dC5vbGRWYWx1ZSAmJiAhbXV0LnRhcmdldC5nZXRBdHRyaWJ1dGUoXCJzdHlsZVwiKSkpKVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIGlmICghZGVzYyB8fCBkZXNjLmlnbm9yZU11dGF0aW9uKG11dCkpXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgaWYgKG11dC50eXBlID09IFwiY2hpbGRMaXN0XCIpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbXV0LmFkZGVkTm9kZXMubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICAgICAgYWRkZWQucHVzaChtdXQuYWRkZWROb2Rlc1tpXSk7XG4gICAgICAgICAgICBpZiAoZGVzYy5jb250ZW50RE9NICYmIGRlc2MuY29udGVudERPTSAhPSBkZXNjLmRvbSAmJiAhZGVzYy5jb250ZW50RE9NLmNvbnRhaW5zKG11dC50YXJnZXQpKVxuICAgICAgICAgICAgICAgIHJldHVybiB7IGZyb206IGRlc2MucG9zQmVmb3JlLCB0bzogZGVzYy5wb3NBZnRlciB9O1xuICAgICAgICAgICAgbGV0IHByZXYgPSBtdXQucHJldmlvdXNTaWJsaW5nLCBuZXh0ID0gbXV0Lm5leHRTaWJsaW5nO1xuICAgICAgICAgICAgaWYgKGllICYmIGllX3ZlcnNpb24gPD0gMTEgJiYgbXV0LmFkZGVkTm9kZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgLy8gSUUxMSBnaXZlcyB1cyBpbmNvcnJlY3QgbmV4dC9wcmV2IHNpYmxpbmdzIGZvciBzb21lXG4gICAgICAgICAgICAgICAgLy8gaW5zZXJ0aW9ucywgc28gaWYgdGhlcmUgYXJlIGFkZGVkIG5vZGVzLCByZWNvbXB1dGUgdGhvc2VcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG11dC5hZGRlZE5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCB7IHByZXZpb3VzU2libGluZywgbmV4dFNpYmxpbmcgfSA9IG11dC5hZGRlZE5vZGVzW2ldO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXByZXZpb3VzU2libGluZyB8fCBBcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKG11dC5hZGRlZE5vZGVzLCBwcmV2aW91c1NpYmxpbmcpIDwgMClcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXYgPSBwcmV2aW91c1NpYmxpbmc7XG4gICAgICAgICAgICAgICAgICAgIGlmICghbmV4dFNpYmxpbmcgfHwgQXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChtdXQuYWRkZWROb2RlcywgbmV4dFNpYmxpbmcpIDwgMClcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHQgPSBuZXh0U2libGluZztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgZnJvbU9mZnNldCA9IHByZXYgJiYgcHJldi5wYXJlbnROb2RlID09IG11dC50YXJnZXRcbiAgICAgICAgICAgICAgICA/IGRvbUluZGV4KHByZXYpICsgMSA6IDA7XG4gICAgICAgICAgICBsZXQgZnJvbSA9IGRlc2MubG9jYWxQb3NGcm9tRE9NKG11dC50YXJnZXQsIGZyb21PZmZzZXQsIC0xKTtcbiAgICAgICAgICAgIGxldCB0b09mZnNldCA9IG5leHQgJiYgbmV4dC5wYXJlbnROb2RlID09IG11dC50YXJnZXRcbiAgICAgICAgICAgICAgICA/IGRvbUluZGV4KG5leHQpIDogbXV0LnRhcmdldC5jaGlsZE5vZGVzLmxlbmd0aDtcbiAgICAgICAgICAgIGxldCB0byA9IGRlc2MubG9jYWxQb3NGcm9tRE9NKG11dC50YXJnZXQsIHRvT2Zmc2V0LCAxKTtcbiAgICAgICAgICAgIHJldHVybiB7IGZyb20sIHRvIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobXV0LnR5cGUgPT0gXCJhdHRyaWJ1dGVzXCIpIHtcbiAgICAgICAgICAgIHJldHVybiB7IGZyb206IGRlc2MucG9zQXRTdGFydCAtIGRlc2MuYm9yZGVyLCB0bzogZGVzYy5wb3NBdEVuZCArIGRlc2MuYm9yZGVyIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7IC8vIFwiY2hhcmFjdGVyRGF0YVwiXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGZyb206IGRlc2MucG9zQXRTdGFydCxcbiAgICAgICAgICAgICAgICB0bzogZGVzYy5wb3NBdEVuZCxcbiAgICAgICAgICAgICAgICAvLyBBbiBldmVudCB3YXMgZ2VuZXJhdGVkIGZvciBhIHRleHQgY2hhbmdlIHRoYXQgZGlkbid0IGNoYW5nZVxuICAgICAgICAgICAgICAgIC8vIGFueSB0ZXh0LiBNYXJrIHRoZSBkb20gY2hhbmdlIHRvIGZhbGwgYmFjayB0byBhc3N1bWluZyB0aGVcbiAgICAgICAgICAgICAgICAvLyBzZWxlY3Rpb24gd2FzIHR5cGVkIG92ZXIgd2l0aCBhbiBpZGVudGljYWwgdmFsdWUgaWYgaXQgY2FuJ3RcbiAgICAgICAgICAgICAgICAvLyBmaW5kIGFub3RoZXIgY2hhbmdlLlxuICAgICAgICAgICAgICAgIHR5cGVPdmVyOiBtdXQudGFyZ2V0Lm5vZGVWYWx1ZSA9PSBtdXQub2xkVmFsdWVcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG59XG5sZXQgY3NzQ2hlY2tlZCA9IGZhbHNlO1xuZnVuY3Rpb24gY2hlY2tDU1Modmlldykge1xuICAgIGlmIChjc3NDaGVja2VkKVxuICAgICAgICByZXR1cm47XG4gICAgY3NzQ2hlY2tlZCA9IHRydWU7XG4gICAgaWYgKGdldENvbXB1dGVkU3R5bGUodmlldy5kb20pLndoaXRlU3BhY2UgPT0gXCJub3JtYWxcIilcbiAgICAgICAgY29uc29sZVtcIndhcm5cIl0oXCJQcm9zZU1pcnJvciBleHBlY3RzIHRoZSBDU1Mgd2hpdGUtc3BhY2UgcHJvcGVydHkgdG8gYmUgc2V0LCBwcmVmZXJhYmx5IHRvICdwcmUtd3JhcCcuIEl0IGlzIHJlY29tbWVuZGVkIHRvIGxvYWQgc3R5bGUvcHJvc2VtaXJyb3IuY3NzIGZyb20gdGhlIHByb3NlbWlycm9yLXZpZXcgcGFja2FnZS5cIik7XG59XG5cbi8vIE5vdGUgdGhhdCBhbGwgcmVmZXJlbmNpbmcgYW5kIHBhcnNpbmcgaXMgZG9uZSB3aXRoIHRoZVxuLy8gc3RhcnQtb2Ytb3BlcmF0aW9uIHNlbGVjdGlvbiBhbmQgZG9jdW1lbnQsIHNpbmNlIHRoYXQncyB0aGUgb25lXG4vLyB0aGF0IHRoZSBET00gcmVwcmVzZW50cy4gSWYgYW55IGNoYW5nZXMgY2FtZSBpbiBpbiB0aGUgbWVhbnRpbWUsXG4vLyB0aGUgbW9kaWZpY2F0aW9uIGlzIG1hcHBlZCBvdmVyIHRob3NlIGJlZm9yZSBpdCBpcyBhcHBsaWVkLCBpblxuLy8gcmVhZERPTUNoYW5nZS5cbmZ1bmN0aW9uIHBhcnNlQmV0d2Vlbih2aWV3LCBmcm9tXywgdG9fKSB7XG4gICAgbGV0IHsgbm9kZTogcGFyZW50LCBmcm9tT2Zmc2V0LCB0b09mZnNldCwgZnJvbSwgdG8gfSA9IHZpZXcuZG9jVmlldy5wYXJzZVJhbmdlKGZyb21fLCB0b18pO1xuICAgIGxldCBkb21TZWwgPSB2aWV3LmRvbVNlbGVjdGlvbigpO1xuICAgIGxldCBmaW5kO1xuICAgIGxldCBhbmNob3IgPSBkb21TZWwuYW5jaG9yTm9kZTtcbiAgICBpZiAoYW5jaG9yICYmIHZpZXcuZG9tLmNvbnRhaW5zKGFuY2hvci5ub2RlVHlwZSA9PSAxID8gYW5jaG9yIDogYW5jaG9yLnBhcmVudE5vZGUpKSB7XG4gICAgICAgIGZpbmQgPSBbeyBub2RlOiBhbmNob3IsIG9mZnNldDogZG9tU2VsLmFuY2hvck9mZnNldCB9XTtcbiAgICAgICAgaWYgKCFzZWxlY3Rpb25Db2xsYXBzZWQoZG9tU2VsKSlcbiAgICAgICAgICAgIGZpbmQucHVzaCh7IG5vZGU6IGRvbVNlbC5mb2N1c05vZGUsIG9mZnNldDogZG9tU2VsLmZvY3VzT2Zmc2V0IH0pO1xuICAgIH1cbiAgICAvLyBXb3JrIGFyb3VuZCBpc3N1ZSBpbiBDaHJvbWUgd2hlcmUgYmFja3NwYWNpbmcgc29tZXRpbWVzIHJlcGxhY2VzXG4gICAgLy8gdGhlIGRlbGV0ZWQgY29udGVudCB3aXRoIGEgcmFuZG9tIEJSIG5vZGUgKGlzc3VlcyAjNzk5LCAjODMxKVxuICAgIGlmIChjaHJvbWUgJiYgdmlldy5pbnB1dC5sYXN0S2V5Q29kZSA9PT0gOCkge1xuICAgICAgICBmb3IgKGxldCBvZmYgPSB0b09mZnNldDsgb2ZmID4gZnJvbU9mZnNldDsgb2ZmLS0pIHtcbiAgICAgICAgICAgIGxldCBub2RlID0gcGFyZW50LmNoaWxkTm9kZXNbb2ZmIC0gMV0sIGRlc2MgPSBub2RlLnBtVmlld0Rlc2M7XG4gICAgICAgICAgICBpZiAobm9kZS5ub2RlTmFtZSA9PSBcIkJSXCIgJiYgIWRlc2MpIHtcbiAgICAgICAgICAgICAgICB0b09mZnNldCA9IG9mZjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghZGVzYyB8fCBkZXNjLnNpemUpXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbGV0IHN0YXJ0RG9jID0gdmlldy5zdGF0ZS5kb2M7XG4gICAgbGV0IHBhcnNlciA9IHZpZXcuc29tZVByb3AoXCJkb21QYXJzZXJcIikgfHwgRE9NUGFyc2VyLmZyb21TY2hlbWEodmlldy5zdGF0ZS5zY2hlbWEpO1xuICAgIGxldCAkZnJvbSA9IHN0YXJ0RG9jLnJlc29sdmUoZnJvbSk7XG4gICAgbGV0IHNlbCA9IG51bGwsIGRvYyA9IHBhcnNlci5wYXJzZShwYXJlbnQsIHtcbiAgICAgICAgdG9wTm9kZTogJGZyb20ucGFyZW50LFxuICAgICAgICB0b3BNYXRjaDogJGZyb20ucGFyZW50LmNvbnRlbnRNYXRjaEF0KCRmcm9tLmluZGV4KCkpLFxuICAgICAgICB0b3BPcGVuOiB0cnVlLFxuICAgICAgICBmcm9tOiBmcm9tT2Zmc2V0LFxuICAgICAgICB0bzogdG9PZmZzZXQsXG4gICAgICAgIHByZXNlcnZlV2hpdGVzcGFjZTogJGZyb20ucGFyZW50LnR5cGUud2hpdGVzcGFjZSA9PSBcInByZVwiID8gXCJmdWxsXCIgOiB0cnVlLFxuICAgICAgICBmaW5kUG9zaXRpb25zOiBmaW5kLFxuICAgICAgICBydWxlRnJvbU5vZGUsXG4gICAgICAgIGNvbnRleHQ6ICRmcm9tXG4gICAgfSk7XG4gICAgaWYgKGZpbmQgJiYgZmluZFswXS5wb3MgIT0gbnVsbCkge1xuICAgICAgICBsZXQgYW5jaG9yID0gZmluZFswXS5wb3MsIGhlYWQgPSBmaW5kWzFdICYmIGZpbmRbMV0ucG9zO1xuICAgICAgICBpZiAoaGVhZCA9PSBudWxsKVxuICAgICAgICAgICAgaGVhZCA9IGFuY2hvcjtcbiAgICAgICAgc2VsID0geyBhbmNob3I6IGFuY2hvciArIGZyb20sIGhlYWQ6IGhlYWQgKyBmcm9tIH07XG4gICAgfVxuICAgIHJldHVybiB7IGRvYywgc2VsLCBmcm9tLCB0byB9O1xufVxuZnVuY3Rpb24gcnVsZUZyb21Ob2RlKGRvbSkge1xuICAgIGxldCBkZXNjID0gZG9tLnBtVmlld0Rlc2M7XG4gICAgaWYgKGRlc2MpIHtcbiAgICAgICAgcmV0dXJuIGRlc2MucGFyc2VSdWxlKCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGRvbS5ub2RlTmFtZSA9PSBcIkJSXCIgJiYgZG9tLnBhcmVudE5vZGUpIHtcbiAgICAgICAgLy8gU2FmYXJpIHJlcGxhY2VzIHRoZSBsaXN0IGl0ZW0gb3IgdGFibGUgY2VsbCB3aXRoIGEgQlJcbiAgICAgICAgLy8gZGlyZWN0bHkgaW4gdGhlIGxpc3Qgbm9kZSAoPyEpIGlmIHlvdSBkZWxldGUgdGhlIGxhc3RcbiAgICAgICAgLy8gY2hhcmFjdGVyIGluIGEgbGlzdCBpdGVtIG9yIHRhYmxlIGNlbGwgKCM3MDgsICM4NjIpXG4gICAgICAgIGlmIChzYWZhcmkgJiYgL14odWx8b2wpJC9pLnRlc3QoZG9tLnBhcmVudE5vZGUubm9kZU5hbWUpKSB7XG4gICAgICAgICAgICBsZXQgc2tpcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgICBza2lwLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaVwiKSk7XG4gICAgICAgICAgICByZXR1cm4geyBza2lwIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZG9tLnBhcmVudE5vZGUubGFzdENoaWxkID09IGRvbSB8fCBzYWZhcmkgJiYgL14odHJ8dGFibGUpJC9pLnRlc3QoZG9tLnBhcmVudE5vZGUubm9kZU5hbWUpKSB7XG4gICAgICAgICAgICByZXR1cm4geyBpZ25vcmU6IHRydWUgfTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChkb20ubm9kZU5hbWUgPT0gXCJJTUdcIiAmJiBkb20uZ2V0QXR0cmlidXRlKFwibWFyay1wbGFjZWhvbGRlclwiKSkge1xuICAgICAgICByZXR1cm4geyBpZ25vcmU6IHRydWUgfTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiByZWFkRE9NQ2hhbmdlKHZpZXcsIGZyb20sIHRvLCB0eXBlT3ZlciwgYWRkZWROb2Rlcykge1xuICAgIGlmIChmcm9tIDwgMCkge1xuICAgICAgICBsZXQgb3JpZ2luID0gdmlldy5pbnB1dC5sYXN0U2VsZWN0aW9uVGltZSA+IERhdGUubm93KCkgLSA1MCA/IHZpZXcuaW5wdXQubGFzdFNlbGVjdGlvbk9yaWdpbiA6IG51bGw7XG4gICAgICAgIGxldCBuZXdTZWwgPSBzZWxlY3Rpb25Gcm9tRE9NKHZpZXcsIG9yaWdpbik7XG4gICAgICAgIGlmIChuZXdTZWwgJiYgIXZpZXcuc3RhdGUuc2VsZWN0aW9uLmVxKG5ld1NlbCkpIHtcbiAgICAgICAgICAgIGxldCB0ciA9IHZpZXcuc3RhdGUudHIuc2V0U2VsZWN0aW9uKG5ld1NlbCk7XG4gICAgICAgICAgICBpZiAob3JpZ2luID09IFwicG9pbnRlclwiKVxuICAgICAgICAgICAgICAgIHRyLnNldE1ldGEoXCJwb2ludGVyXCIsIHRydWUpO1xuICAgICAgICAgICAgZWxzZSBpZiAob3JpZ2luID09IFwia2V5XCIpXG4gICAgICAgICAgICAgICAgdHIuc2Nyb2xsSW50b1ZpZXcoKTtcbiAgICAgICAgICAgIHZpZXcuZGlzcGF0Y2godHIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0ICRiZWZvcmUgPSB2aWV3LnN0YXRlLmRvYy5yZXNvbHZlKGZyb20pO1xuICAgIGxldCBzaGFyZWQgPSAkYmVmb3JlLnNoYXJlZERlcHRoKHRvKTtcbiAgICBmcm9tID0gJGJlZm9yZS5iZWZvcmUoc2hhcmVkICsgMSk7XG4gICAgdG8gPSB2aWV3LnN0YXRlLmRvYy5yZXNvbHZlKHRvKS5hZnRlcihzaGFyZWQgKyAxKTtcbiAgICBsZXQgc2VsID0gdmlldy5zdGF0ZS5zZWxlY3Rpb247XG4gICAgbGV0IHBhcnNlID0gcGFyc2VCZXR3ZWVuKHZpZXcsIGZyb20sIHRvKTtcbiAgICAvLyBDaHJvbWUgc29tZXRpbWVzIGxlYXZlcyB0aGUgY3Vyc29yIGJlZm9yZSB0aGUgaW5zZXJ0ZWQgdGV4dCB3aGVuXG4gICAgLy8gY29tcG9zaW5nIGFmdGVyIGEgY3Vyc29yIHdyYXBwZXIuIFRoaXMgbW92ZXMgaXQgZm9yd2FyZC5cbiAgICBpZiAoY2hyb21lICYmIHZpZXcuY3Vyc29yV3JhcHBlciAmJiBwYXJzZS5zZWwgJiYgcGFyc2Uuc2VsLmFuY2hvciA9PSB2aWV3LmN1cnNvcldyYXBwZXIuZGVjby5mcm9tKSB7XG4gICAgICAgIGxldCB0ZXh0ID0gdmlldy5jdXJzb3JXcmFwcGVyLmRlY28udHlwZS50b0RPTS5uZXh0U2libGluZztcbiAgICAgICAgbGV0IHNpemUgPSB0ZXh0ICYmIHRleHQubm9kZVZhbHVlID8gdGV4dC5ub2RlVmFsdWUubGVuZ3RoIDogMTtcbiAgICAgICAgcGFyc2Uuc2VsID0geyBhbmNob3I6IHBhcnNlLnNlbC5hbmNob3IgKyBzaXplLCBoZWFkOiBwYXJzZS5zZWwuYW5jaG9yICsgc2l6ZSB9O1xuICAgIH1cbiAgICBsZXQgZG9jID0gdmlldy5zdGF0ZS5kb2MsIGNvbXBhcmUgPSBkb2Muc2xpY2UocGFyc2UuZnJvbSwgcGFyc2UudG8pO1xuICAgIGxldCBwcmVmZXJyZWRQb3MsIHByZWZlcnJlZFNpZGU7XG4gICAgLy8gUHJlZmVyIGFuY2hvcmluZyB0byBlbmQgd2hlbiBCYWNrc3BhY2UgaXMgcHJlc3NlZFxuICAgIGlmICh2aWV3LmlucHV0Lmxhc3RLZXlDb2RlID09PSA4ICYmIERhdGUubm93KCkgLSAxMDAgPCB2aWV3LmlucHV0Lmxhc3RLZXlDb2RlVGltZSkge1xuICAgICAgICBwcmVmZXJyZWRQb3MgPSB2aWV3LnN0YXRlLnNlbGVjdGlvbi50bztcbiAgICAgICAgcHJlZmVycmVkU2lkZSA9IFwiZW5kXCI7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBwcmVmZXJyZWRQb3MgPSB2aWV3LnN0YXRlLnNlbGVjdGlvbi5mcm9tO1xuICAgICAgICBwcmVmZXJyZWRTaWRlID0gXCJzdGFydFwiO1xuICAgIH1cbiAgICB2aWV3LmlucHV0Lmxhc3RLZXlDb2RlID0gbnVsbDtcbiAgICBsZXQgY2hhbmdlID0gZmluZERpZmYoY29tcGFyZS5jb250ZW50LCBwYXJzZS5kb2MuY29udGVudCwgcGFyc2UuZnJvbSwgcHJlZmVycmVkUG9zLCBwcmVmZXJyZWRTaWRlKTtcbiAgICBpZiAoKGlvcyAmJiB2aWV3LmlucHV0Lmxhc3RJT1NFbnRlciA+IERhdGUubm93KCkgLSAyMjUgfHwgYW5kcm9pZCkgJiZcbiAgICAgICAgYWRkZWROb2Rlcy5zb21lKG4gPT4gbi5ub2RlTmFtZSA9PSBcIkRJVlwiIHx8IG4ubm9kZU5hbWUgPT0gXCJQXCIpICYmXG4gICAgICAgICghY2hhbmdlIHx8IGNoYW5nZS5lbmRBID49IGNoYW5nZS5lbmRCKSAmJlxuICAgICAgICB2aWV3LnNvbWVQcm9wKFwiaGFuZGxlS2V5RG93blwiLCBmID0+IGYodmlldywga2V5RXZlbnQoMTMsIFwiRW50ZXJcIikpKSkge1xuICAgICAgICB2aWV3LmlucHV0Lmxhc3RJT1NFbnRlciA9IDA7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCFjaGFuZ2UpIHtcbiAgICAgICAgaWYgKHR5cGVPdmVyICYmIHNlbCBpbnN0YW5jZW9mIFRleHRTZWxlY3Rpb24gJiYgIXNlbC5lbXB0eSAmJiBzZWwuJGhlYWQuc2FtZVBhcmVudChzZWwuJGFuY2hvcikgJiZcbiAgICAgICAgICAgICF2aWV3LmNvbXBvc2luZyAmJiAhKHBhcnNlLnNlbCAmJiBwYXJzZS5zZWwuYW5jaG9yICE9IHBhcnNlLnNlbC5oZWFkKSkge1xuICAgICAgICAgICAgY2hhbmdlID0geyBzdGFydDogc2VsLmZyb20sIGVuZEE6IHNlbC50bywgZW5kQjogc2VsLnRvIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAocGFyc2Uuc2VsKSB7XG4gICAgICAgICAgICAgICAgbGV0IHNlbCA9IHJlc29sdmVTZWxlY3Rpb24odmlldywgdmlldy5zdGF0ZS5kb2MsIHBhcnNlLnNlbCk7XG4gICAgICAgICAgICAgICAgaWYgKHNlbCAmJiAhc2VsLmVxKHZpZXcuc3RhdGUuc2VsZWN0aW9uKSlcbiAgICAgICAgICAgICAgICAgICAgdmlldy5kaXNwYXRjaCh2aWV3LnN0YXRlLnRyLnNldFNlbGVjdGlvbihzZWwpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cbiAgICB2aWV3LmlucHV0LmRvbUNoYW5nZUNvdW50Kys7XG4gICAgLy8gSGFuZGxlIHRoZSBjYXNlIHdoZXJlIG92ZXJ3cml0aW5nIGEgc2VsZWN0aW9uIGJ5IHR5cGluZyBtYXRjaGVzXG4gICAgLy8gdGhlIHN0YXJ0IG9yIGVuZCBvZiB0aGUgc2VsZWN0ZWQgY29udGVudCwgY3JlYXRpbmcgYSBjaGFuZ2VcbiAgICAvLyB0aGF0J3Mgc21hbGxlciB0aGFuIHdoYXQgd2FzIGFjdHVhbGx5IG92ZXJ3cml0dGVuLlxuICAgIGlmICh2aWV3LnN0YXRlLnNlbGVjdGlvbi5mcm9tIDwgdmlldy5zdGF0ZS5zZWxlY3Rpb24udG8gJiZcbiAgICAgICAgY2hhbmdlLnN0YXJ0ID09IGNoYW5nZS5lbmRCICYmXG4gICAgICAgIHZpZXcuc3RhdGUuc2VsZWN0aW9uIGluc3RhbmNlb2YgVGV4dFNlbGVjdGlvbikge1xuICAgICAgICBpZiAoY2hhbmdlLnN0YXJ0ID4gdmlldy5zdGF0ZS5zZWxlY3Rpb24uZnJvbSAmJiBjaGFuZ2Uuc3RhcnQgPD0gdmlldy5zdGF0ZS5zZWxlY3Rpb24uZnJvbSArIDIgJiZcbiAgICAgICAgICAgIHZpZXcuc3RhdGUuc2VsZWN0aW9uLmZyb20gPj0gcGFyc2UuZnJvbSkge1xuICAgICAgICAgICAgY2hhbmdlLnN0YXJ0ID0gdmlldy5zdGF0ZS5zZWxlY3Rpb24uZnJvbTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjaGFuZ2UuZW5kQSA8IHZpZXcuc3RhdGUuc2VsZWN0aW9uLnRvICYmIGNoYW5nZS5lbmRBID49IHZpZXcuc3RhdGUuc2VsZWN0aW9uLnRvIC0gMiAmJlxuICAgICAgICAgICAgdmlldy5zdGF0ZS5zZWxlY3Rpb24udG8gPD0gcGFyc2UudG8pIHtcbiAgICAgICAgICAgIGNoYW5nZS5lbmRCICs9ICh2aWV3LnN0YXRlLnNlbGVjdGlvbi50byAtIGNoYW5nZS5lbmRBKTtcbiAgICAgICAgICAgIGNoYW5nZS5lbmRBID0gdmlldy5zdGF0ZS5zZWxlY3Rpb24udG87XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gSUUxMSB3aWxsIGluc2VydCBhIG5vbi1icmVha2luZyBzcGFjZSBfYWhlYWRfIG9mIHRoZSBzcGFjZSBhZnRlclxuICAgIC8vIHRoZSBjdXJzb3Igc3BhY2Ugd2hlbiBhZGRpbmcgYSBzcGFjZSBiZWZvcmUgYW5vdGhlciBzcGFjZS4gV2hlblxuICAgIC8vIHRoYXQgaGFwcGVuZWQsIGFkanVzdCB0aGUgY2hhbmdlIHRvIGNvdmVyIHRoZSBzcGFjZSBpbnN0ZWFkLlxuICAgIGlmIChpZSAmJiBpZV92ZXJzaW9uIDw9IDExICYmIGNoYW5nZS5lbmRCID09IGNoYW5nZS5zdGFydCArIDEgJiZcbiAgICAgICAgY2hhbmdlLmVuZEEgPT0gY2hhbmdlLnN0YXJ0ICYmIGNoYW5nZS5zdGFydCA+IHBhcnNlLmZyb20gJiZcbiAgICAgICAgcGFyc2UuZG9jLnRleHRCZXR3ZWVuKGNoYW5nZS5zdGFydCAtIHBhcnNlLmZyb20gLSAxLCBjaGFuZ2Uuc3RhcnQgLSBwYXJzZS5mcm9tICsgMSkgPT0gXCIgXFx1MDBhMFwiKSB7XG4gICAgICAgIGNoYW5nZS5zdGFydC0tO1xuICAgICAgICBjaGFuZ2UuZW5kQS0tO1xuICAgICAgICBjaGFuZ2UuZW5kQi0tO1xuICAgIH1cbiAgICBsZXQgJGZyb20gPSBwYXJzZS5kb2MucmVzb2x2ZU5vQ2FjaGUoY2hhbmdlLnN0YXJ0IC0gcGFyc2UuZnJvbSk7XG4gICAgbGV0ICR0byA9IHBhcnNlLmRvYy5yZXNvbHZlTm9DYWNoZShjaGFuZ2UuZW5kQiAtIHBhcnNlLmZyb20pO1xuICAgIGxldCAkZnJvbUEgPSBkb2MucmVzb2x2ZShjaGFuZ2Uuc3RhcnQpO1xuICAgIGxldCBpbmxpbmVDaGFuZ2UgPSAkZnJvbS5zYW1lUGFyZW50KCR0bykgJiYgJGZyb20ucGFyZW50LmlubGluZUNvbnRlbnQgJiYgJGZyb21BLmVuZCgpID49IGNoYW5nZS5lbmRBO1xuICAgIGxldCBuZXh0U2VsO1xuICAgIC8vIElmIHRoaXMgbG9va3MgbGlrZSB0aGUgZWZmZWN0IG9mIHByZXNzaW5nIEVudGVyIChvciB3YXMgcmVjb3JkZWRcbiAgICAvLyBhcyBiZWluZyBhbiBpT1MgZW50ZXIgcHJlc3MpLCBqdXN0IGRpc3BhdGNoIGFuIEVudGVyIGtleSBpbnN0ZWFkLlxuICAgIGlmICgoKGlvcyAmJiB2aWV3LmlucHV0Lmxhc3RJT1NFbnRlciA+IERhdGUubm93KCkgLSAyMjUgJiZcbiAgICAgICAgKCFpbmxpbmVDaGFuZ2UgfHwgYWRkZWROb2Rlcy5zb21lKG4gPT4gbi5ub2RlTmFtZSA9PSBcIkRJVlwiIHx8IG4ubm9kZU5hbWUgPT0gXCJQXCIpKSkgfHxcbiAgICAgICAgKCFpbmxpbmVDaGFuZ2UgJiYgJGZyb20ucG9zIDwgcGFyc2UuZG9jLmNvbnRlbnQuc2l6ZSAmJlxuICAgICAgICAgICAgKG5leHRTZWwgPSBTZWxlY3Rpb24uZmluZEZyb20ocGFyc2UuZG9jLnJlc29sdmUoJGZyb20ucG9zICsgMSksIDEsIHRydWUpKSAmJlxuICAgICAgICAgICAgbmV4dFNlbC5oZWFkID09ICR0by5wb3MpKSAmJlxuICAgICAgICB2aWV3LnNvbWVQcm9wKFwiaGFuZGxlS2V5RG93blwiLCBmID0+IGYodmlldywga2V5RXZlbnQoMTMsIFwiRW50ZXJcIikpKSkge1xuICAgICAgICB2aWV3LmlucHV0Lmxhc3RJT1NFbnRlciA9IDA7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gU2FtZSBmb3IgYmFja3NwYWNlXG4gICAgaWYgKHZpZXcuc3RhdGUuc2VsZWN0aW9uLmFuY2hvciA+IGNoYW5nZS5zdGFydCAmJlxuICAgICAgICBsb29rc0xpa2VKb2luKGRvYywgY2hhbmdlLnN0YXJ0LCBjaGFuZ2UuZW5kQSwgJGZyb20sICR0bykgJiZcbiAgICAgICAgdmlldy5zb21lUHJvcChcImhhbmRsZUtleURvd25cIiwgZiA9PiBmKHZpZXcsIGtleUV2ZW50KDgsIFwiQmFja3NwYWNlXCIpKSkpIHtcbiAgICAgICAgaWYgKGFuZHJvaWQgJiYgY2hyb21lKVxuICAgICAgICAgICAgdmlldy5kb21PYnNlcnZlci5zdXBwcmVzc1NlbGVjdGlvblVwZGF0ZXMoKTsgLy8gIzgyMFxuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIENocm9tZSBBbmRyb2lkIHdpbGwgb2NjYXNpb25hbGx5LCBkdXJpbmcgY29tcG9zaXRpb24sIGRlbGV0ZSB0aGVcbiAgICAvLyBlbnRpcmUgY29tcG9zaXRpb24gYW5kIHRoZW4gaW1tZWRpYXRlbHkgaW5zZXJ0IGl0IGFnYWluLiBUaGlzIGlzXG4gICAgLy8gdXNlZCB0byBkZXRlY3QgdGhhdCBzaXR1YXRpb24uXG4gICAgaWYgKGNocm9tZSAmJiBhbmRyb2lkICYmIGNoYW5nZS5lbmRCID09IGNoYW5nZS5zdGFydClcbiAgICAgICAgdmlldy5pbnB1dC5sYXN0QW5kcm9pZERlbGV0ZSA9IERhdGUubm93KCk7XG4gICAgLy8gVGhpcyB0cmllcyB0byBkZXRlY3QgQW5kcm9pZCB2aXJ0dWFsIGtleWJvYXJkXG4gICAgLy8gZW50ZXItYW5kLXBpY2stc3VnZ2VzdGlvbiBhY3Rpb24uIFRoYXQgc29tZXRpbWVzIChzZWUgaXNzdWVcbiAgICAvLyAjMTA1OSkgZmlyc3QgZmlyZXMgYSBET00gbXV0YXRpb24sIGJlZm9yZSBtb3ZpbmcgdGhlIHNlbGVjdGlvbiB0b1xuICAgIC8vIHRoZSBuZXdseSBjcmVhdGVkIGJsb2NrLiBBbmQgdGhlbiwgYmVjYXVzZSBQcm9zZU1pcnJvciBjbGVhbnMgdXBcbiAgICAvLyB0aGUgRE9NIHNlbGVjdGlvbiwgaXQgZ2l2ZXMgdXAgbW92aW5nIHRoZSBzZWxlY3Rpb24gZW50aXJlbHksXG4gICAgLy8gbGVhdmluZyB0aGUgY3Vyc29yIGluIHRoZSB3cm9uZyBwbGFjZS4gV2hlbiB0aGF0IGhhcHBlbnMsIHdlIGRyb3BcbiAgICAvLyB0aGUgbmV3IHBhcmFncmFwaCBmcm9tIHRoZSBpbml0aWFsIGNoYW5nZSwgYW5kIGZpcmUgYSBzaW11bGF0ZWRcbiAgICAvLyBlbnRlciBrZXkgYWZ0ZXJ3YXJkcy5cbiAgICBpZiAoYW5kcm9pZCAmJiAhaW5saW5lQ2hhbmdlICYmICRmcm9tLnN0YXJ0KCkgIT0gJHRvLnN0YXJ0KCkgJiYgJHRvLnBhcmVudE9mZnNldCA9PSAwICYmICRmcm9tLmRlcHRoID09ICR0by5kZXB0aCAmJlxuICAgICAgICBwYXJzZS5zZWwgJiYgcGFyc2Uuc2VsLmFuY2hvciA9PSBwYXJzZS5zZWwuaGVhZCAmJiBwYXJzZS5zZWwuaGVhZCA9PSBjaGFuZ2UuZW5kQSkge1xuICAgICAgICBjaGFuZ2UuZW5kQiAtPSAyO1xuICAgICAgICAkdG8gPSBwYXJzZS5kb2MucmVzb2x2ZU5vQ2FjaGUoY2hhbmdlLmVuZEIgLSBwYXJzZS5mcm9tKTtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICB2aWV3LnNvbWVQcm9wKFwiaGFuZGxlS2V5RG93blwiLCBmdW5jdGlvbiAoZikgeyByZXR1cm4gZih2aWV3LCBrZXlFdmVudCgxMywgXCJFbnRlclwiKSk7IH0pO1xuICAgICAgICB9LCAyMCk7XG4gICAgfVxuICAgIGxldCBjaEZyb20gPSBjaGFuZ2Uuc3RhcnQsIGNoVG8gPSBjaGFuZ2UuZW5kQTtcbiAgICBsZXQgdHIsIHN0b3JlZE1hcmtzLCBtYXJrQ2hhbmdlO1xuICAgIGlmIChpbmxpbmVDaGFuZ2UpIHtcbiAgICAgICAgaWYgKCRmcm9tLnBvcyA9PSAkdG8ucG9zKSB7IC8vIERlbGV0aW9uXG4gICAgICAgICAgICAvLyBJRTExIHNvbWV0aW1lcyB3ZWlyZGx5IG1vdmVzIHRoZSBET00gc2VsZWN0aW9uIGFyb3VuZCBhZnRlclxuICAgICAgICAgICAgLy8gYmFja3NwYWNpbmcgb3V0IHRoZSBmaXJzdCBlbGVtZW50IGluIGEgdGV4dGJsb2NrXG4gICAgICAgICAgICBpZiAoaWUgJiYgaWVfdmVyc2lvbiA8PSAxMSAmJiAkZnJvbS5wYXJlbnRPZmZzZXQgPT0gMCkge1xuICAgICAgICAgICAgICAgIHZpZXcuZG9tT2JzZXJ2ZXIuc3VwcHJlc3NTZWxlY3Rpb25VcGRhdGVzKCk7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiBzZWxlY3Rpb25Ub0RPTSh2aWV3KSwgMjApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHIgPSB2aWV3LnN0YXRlLnRyLmRlbGV0ZShjaEZyb20sIGNoVG8pO1xuICAgICAgICAgICAgc3RvcmVkTWFya3MgPSBkb2MucmVzb2x2ZShjaGFuZ2Uuc3RhcnQpLm1hcmtzQWNyb3NzKGRvYy5yZXNvbHZlKGNoYW5nZS5lbmRBKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIC8vIEFkZGluZyBvciByZW1vdmluZyBhIG1hcmtcbiAgICAgICAgY2hhbmdlLmVuZEEgPT0gY2hhbmdlLmVuZEIgJiZcbiAgICAgICAgICAgIChtYXJrQ2hhbmdlID0gaXNNYXJrQ2hhbmdlKCRmcm9tLnBhcmVudC5jb250ZW50LmN1dCgkZnJvbS5wYXJlbnRPZmZzZXQsICR0by5wYXJlbnRPZmZzZXQpLCAkZnJvbUEucGFyZW50LmNvbnRlbnQuY3V0KCRmcm9tQS5wYXJlbnRPZmZzZXQsIGNoYW5nZS5lbmRBIC0gJGZyb21BLnN0YXJ0KCkpKSkpIHtcbiAgICAgICAgICAgIHRyID0gdmlldy5zdGF0ZS50cjtcbiAgICAgICAgICAgIGlmIChtYXJrQ2hhbmdlLnR5cGUgPT0gXCJhZGRcIilcbiAgICAgICAgICAgICAgICB0ci5hZGRNYXJrKGNoRnJvbSwgY2hUbywgbWFya0NoYW5nZS5tYXJrKTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICB0ci5yZW1vdmVNYXJrKGNoRnJvbSwgY2hUbywgbWFya0NoYW5nZS5tYXJrKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgkZnJvbS5wYXJlbnQuY2hpbGQoJGZyb20uaW5kZXgoKSkuaXNUZXh0ICYmICRmcm9tLmluZGV4KCkgPT0gJHRvLmluZGV4KCkgLSAoJHRvLnRleHRPZmZzZXQgPyAwIDogMSkpIHtcbiAgICAgICAgICAgIC8vIEJvdGggcG9zaXRpb25zIGluIHRoZSBzYW1lIHRleHQgbm9kZSAtLSBzaW1wbHkgaW5zZXJ0IHRleHRcbiAgICAgICAgICAgIGxldCB0ZXh0ID0gJGZyb20ucGFyZW50LnRleHRCZXR3ZWVuKCRmcm9tLnBhcmVudE9mZnNldCwgJHRvLnBhcmVudE9mZnNldCk7XG4gICAgICAgICAgICBpZiAodmlldy5zb21lUHJvcChcImhhbmRsZVRleHRJbnB1dFwiLCBmID0+IGYodmlldywgY2hGcm9tLCBjaFRvLCB0ZXh0KSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgdHIgPSB2aWV3LnN0YXRlLnRyLmluc2VydFRleHQodGV4dCwgY2hGcm9tLCBjaFRvKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoIXRyKVxuICAgICAgICB0ciA9IHZpZXcuc3RhdGUudHIucmVwbGFjZShjaEZyb20sIGNoVG8sIHBhcnNlLmRvYy5zbGljZShjaGFuZ2Uuc3RhcnQgLSBwYXJzZS5mcm9tLCBjaGFuZ2UuZW5kQiAtIHBhcnNlLmZyb20pKTtcbiAgICBpZiAocGFyc2Uuc2VsKSB7XG4gICAgICAgIGxldCBzZWwgPSByZXNvbHZlU2VsZWN0aW9uKHZpZXcsIHRyLmRvYywgcGFyc2Uuc2VsKTtcbiAgICAgICAgLy8gQ2hyb21lIEFuZHJvaWQgd2lsbCBzb21ldGltZXMsIGR1cmluZyBjb21wb3NpdGlvbiwgcmVwb3J0IHRoZVxuICAgICAgICAvLyBzZWxlY3Rpb24gaW4gdGhlIHdyb25nIHBsYWNlLiBJZiBpdCBsb29rcyBsaWtlIHRoYXQgaXNcbiAgICAgICAgLy8gaGFwcGVuaW5nLCBkb24ndCB1cGRhdGUgdGhlIHNlbGVjdGlvbi5cbiAgICAgICAgLy8gRWRnZSBqdXN0IGRvZXNuJ3QgbW92ZSB0aGUgY3Vyc29yIGZvcndhcmQgd2hlbiB5b3Ugc3RhcnQgdHlwaW5nXG4gICAgICAgIC8vIGluIGFuIGVtcHR5IGJsb2NrIG9yIGJldHdlZW4gYnIgbm9kZXMuXG4gICAgICAgIGlmIChzZWwgJiYgIShjaHJvbWUgJiYgYW5kcm9pZCAmJiB2aWV3LmNvbXBvc2luZyAmJiBzZWwuZW1wdHkgJiZcbiAgICAgICAgICAgIChjaGFuZ2Uuc3RhcnQgIT0gY2hhbmdlLmVuZEIgfHwgdmlldy5pbnB1dC5sYXN0QW5kcm9pZERlbGV0ZSA8IERhdGUubm93KCkgLSAxMDApICYmXG4gICAgICAgICAgICAoc2VsLmhlYWQgPT0gY2hGcm9tIHx8IHNlbC5oZWFkID09IHRyLm1hcHBpbmcubWFwKGNoVG8pIC0gMSkgfHxcbiAgICAgICAgICAgIGllICYmIHNlbC5lbXB0eSAmJiBzZWwuaGVhZCA9PSBjaEZyb20pKVxuICAgICAgICAgICAgdHIuc2V0U2VsZWN0aW9uKHNlbCk7XG4gICAgfVxuICAgIGlmIChzdG9yZWRNYXJrcylcbiAgICAgICAgdHIuZW5zdXJlTWFya3Moc3RvcmVkTWFya3MpO1xuICAgIHZpZXcuZGlzcGF0Y2godHIuc2Nyb2xsSW50b1ZpZXcoKSk7XG59XG5mdW5jdGlvbiByZXNvbHZlU2VsZWN0aW9uKHZpZXcsIGRvYywgcGFyc2VkU2VsKSB7XG4gICAgaWYgKE1hdGgubWF4KHBhcnNlZFNlbC5hbmNob3IsIHBhcnNlZFNlbC5oZWFkKSA+IGRvYy5jb250ZW50LnNpemUpXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIHJldHVybiBzZWxlY3Rpb25CZXR3ZWVuKHZpZXcsIGRvYy5yZXNvbHZlKHBhcnNlZFNlbC5hbmNob3IpLCBkb2MucmVzb2x2ZShwYXJzZWRTZWwuaGVhZCkpO1xufVxuLy8gR2l2ZW4gdHdvIHNhbWUtbGVuZ3RoLCBub24tZW1wdHkgZnJhZ21lbnRzIG9mIGlubGluZSBjb250ZW50LFxuLy8gZGV0ZXJtaW5lIHdoZXRoZXIgdGhlIGZpcnN0IGNvdWxkIGJlIGNyZWF0ZWQgZnJvbSB0aGUgc2Vjb25kIGJ5XG4vLyByZW1vdmluZyBvciBhZGRpbmcgYSBzaW5nbGUgbWFyayB0eXBlLlxuZnVuY3Rpb24gaXNNYXJrQ2hhbmdlKGN1ciwgcHJldikge1xuICAgIGxldCBjdXJNYXJrcyA9IGN1ci5maXJzdENoaWxkLm1hcmtzLCBwcmV2TWFya3MgPSBwcmV2LmZpcnN0Q2hpbGQubWFya3M7XG4gICAgbGV0IGFkZGVkID0gY3VyTWFya3MsIHJlbW92ZWQgPSBwcmV2TWFya3MsIHR5cGUsIG1hcmssIHVwZGF0ZTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHByZXZNYXJrcy5sZW5ndGg7IGkrKylcbiAgICAgICAgYWRkZWQgPSBwcmV2TWFya3NbaV0ucmVtb3ZlRnJvbVNldChhZGRlZCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjdXJNYXJrcy5sZW5ndGg7IGkrKylcbiAgICAgICAgcmVtb3ZlZCA9IGN1ck1hcmtzW2ldLnJlbW92ZUZyb21TZXQocmVtb3ZlZCk7XG4gICAgaWYgKGFkZGVkLmxlbmd0aCA9PSAxICYmIHJlbW92ZWQubGVuZ3RoID09IDApIHtcbiAgICAgICAgbWFyayA9IGFkZGVkWzBdO1xuICAgICAgICB0eXBlID0gXCJhZGRcIjtcbiAgICAgICAgdXBkYXRlID0gKG5vZGUpID0+IG5vZGUubWFyayhtYXJrLmFkZFRvU2V0KG5vZGUubWFya3MpKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoYWRkZWQubGVuZ3RoID09IDAgJiYgcmVtb3ZlZC5sZW5ndGggPT0gMSkge1xuICAgICAgICBtYXJrID0gcmVtb3ZlZFswXTtcbiAgICAgICAgdHlwZSA9IFwicmVtb3ZlXCI7XG4gICAgICAgIHVwZGF0ZSA9IChub2RlKSA9PiBub2RlLm1hcmsobWFyay5yZW1vdmVGcm9tU2V0KG5vZGUubWFya3MpKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBsZXQgdXBkYXRlZCA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHJldi5jaGlsZENvdW50OyBpKyspXG4gICAgICAgIHVwZGF0ZWQucHVzaCh1cGRhdGUocHJldi5jaGlsZChpKSkpO1xuICAgIGlmIChGcmFnbWVudC5mcm9tKHVwZGF0ZWQpLmVxKGN1cikpXG4gICAgICAgIHJldHVybiB7IG1hcmssIHR5cGUgfTtcbn1cbmZ1bmN0aW9uIGxvb2tzTGlrZUpvaW4ob2xkLCBzdGFydCwgZW5kLCAkbmV3U3RhcnQsICRuZXdFbmQpIHtcbiAgICBpZiAoISRuZXdTdGFydC5wYXJlbnQuaXNUZXh0YmxvY2sgfHxcbiAgICAgICAgLy8gVGhlIGNvbnRlbnQgbXVzdCBoYXZlIHNocnVua1xuICAgICAgICBlbmQgLSBzdGFydCA8PSAkbmV3RW5kLnBvcyAtICRuZXdTdGFydC5wb3MgfHxcbiAgICAgICAgLy8gbmV3RW5kIG11c3QgcG9pbnQgZGlyZWN0bHkgYXQgb3IgYWZ0ZXIgdGhlIGVuZCBvZiB0aGUgYmxvY2sgdGhhdCBuZXdTdGFydCBwb2ludHMgaW50b1xuICAgICAgICBza2lwQ2xvc2luZ0FuZE9wZW5pbmcoJG5ld1N0YXJ0LCB0cnVlLCBmYWxzZSkgPCAkbmV3RW5kLnBvcylcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGxldCAkc3RhcnQgPSBvbGQucmVzb2x2ZShzdGFydCk7XG4gICAgLy8gU3RhcnQgbXVzdCBiZSBhdCB0aGUgZW5kIG9mIGEgYmxvY2tcbiAgICBpZiAoJHN0YXJ0LnBhcmVudE9mZnNldCA8ICRzdGFydC5wYXJlbnQuY29udGVudC5zaXplIHx8ICEkc3RhcnQucGFyZW50LmlzVGV4dGJsb2NrKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgbGV0ICRuZXh0ID0gb2xkLnJlc29sdmUoc2tpcENsb3NpbmdBbmRPcGVuaW5nKCRzdGFydCwgdHJ1ZSwgdHJ1ZSkpO1xuICAgIC8vIFRoZSBuZXh0IHRleHRibG9jayBtdXN0IHN0YXJ0IGJlZm9yZSBlbmQgYW5kIGVuZCBuZWFyIGl0XG4gICAgaWYgKCEkbmV4dC5wYXJlbnQuaXNUZXh0YmxvY2sgfHwgJG5leHQucG9zID4gZW5kIHx8XG4gICAgICAgIHNraXBDbG9zaW5nQW5kT3BlbmluZygkbmV4dCwgdHJ1ZSwgZmFsc2UpIDwgZW5kKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgLy8gVGhlIGZyYWdtZW50cyBhZnRlciB0aGUgam9pbiBwb2ludCBtdXN0IG1hdGNoXG4gICAgcmV0dXJuICRuZXdTdGFydC5wYXJlbnQuY29udGVudC5jdXQoJG5ld1N0YXJ0LnBhcmVudE9mZnNldCkuZXEoJG5leHQucGFyZW50LmNvbnRlbnQpO1xufVxuZnVuY3Rpb24gc2tpcENsb3NpbmdBbmRPcGVuaW5nKCRwb3MsIGZyb21FbmQsIG1heU9wZW4pIHtcbiAgICBsZXQgZGVwdGggPSAkcG9zLmRlcHRoLCBlbmQgPSBmcm9tRW5kID8gJHBvcy5lbmQoKSA6ICRwb3MucG9zO1xuICAgIHdoaWxlIChkZXB0aCA+IDAgJiYgKGZyb21FbmQgfHwgJHBvcy5pbmRleEFmdGVyKGRlcHRoKSA9PSAkcG9zLm5vZGUoZGVwdGgpLmNoaWxkQ291bnQpKSB7XG4gICAgICAgIGRlcHRoLS07XG4gICAgICAgIGVuZCsrO1xuICAgICAgICBmcm9tRW5kID0gZmFsc2U7XG4gICAgfVxuICAgIGlmIChtYXlPcGVuKSB7XG4gICAgICAgIGxldCBuZXh0ID0gJHBvcy5ub2RlKGRlcHRoKS5tYXliZUNoaWxkKCRwb3MuaW5kZXhBZnRlcihkZXB0aCkpO1xuICAgICAgICB3aGlsZSAobmV4dCAmJiAhbmV4dC5pc0xlYWYpIHtcbiAgICAgICAgICAgIG5leHQgPSBuZXh0LmZpcnN0Q2hpbGQ7XG4gICAgICAgICAgICBlbmQrKztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZW5kO1xufVxuZnVuY3Rpb24gZmluZERpZmYoYSwgYiwgcG9zLCBwcmVmZXJyZWRQb3MsIHByZWZlcnJlZFNpZGUpIHtcbiAgICBsZXQgc3RhcnQgPSBhLmZpbmREaWZmU3RhcnQoYiwgcG9zKTtcbiAgICBpZiAoc3RhcnQgPT0gbnVsbClcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgbGV0IHsgYTogZW5kQSwgYjogZW5kQiB9ID0gYS5maW5kRGlmZkVuZChiLCBwb3MgKyBhLnNpemUsIHBvcyArIGIuc2l6ZSk7XG4gICAgaWYgKHByZWZlcnJlZFNpZGUgPT0gXCJlbmRcIikge1xuICAgICAgICBsZXQgYWRqdXN0ID0gTWF0aC5tYXgoMCwgc3RhcnQgLSBNYXRoLm1pbihlbmRBLCBlbmRCKSk7XG4gICAgICAgIHByZWZlcnJlZFBvcyAtPSBlbmRBICsgYWRqdXN0IC0gc3RhcnQ7XG4gICAgfVxuICAgIGlmIChlbmRBIDwgc3RhcnQgJiYgYS5zaXplIDwgYi5zaXplKSB7XG4gICAgICAgIGxldCBtb3ZlID0gcHJlZmVycmVkUG9zIDw9IHN0YXJ0ICYmIHByZWZlcnJlZFBvcyA+PSBlbmRBID8gc3RhcnQgLSBwcmVmZXJyZWRQb3MgOiAwO1xuICAgICAgICBzdGFydCAtPSBtb3ZlO1xuICAgICAgICBlbmRCID0gc3RhcnQgKyAoZW5kQiAtIGVuZEEpO1xuICAgICAgICBlbmRBID0gc3RhcnQ7XG4gICAgfVxuICAgIGVsc2UgaWYgKGVuZEIgPCBzdGFydCkge1xuICAgICAgICBsZXQgbW92ZSA9IHByZWZlcnJlZFBvcyA8PSBzdGFydCAmJiBwcmVmZXJyZWRQb3MgPj0gZW5kQiA/IHN0YXJ0IC0gcHJlZmVycmVkUG9zIDogMDtcbiAgICAgICAgc3RhcnQgLT0gbW92ZTtcbiAgICAgICAgZW5kQSA9IHN0YXJ0ICsgKGVuZEEgLSBlbmRCKTtcbiAgICAgICAgZW5kQiA9IHN0YXJ0O1xuICAgIH1cbiAgICByZXR1cm4geyBzdGFydCwgZW5kQSwgZW5kQiB9O1xufVxuXG4vKipcbkBpbnRlcm5hbFxuKi9cbmNvbnN0IF9fc2VyaWFsaXplRm9yQ2xpcGJvYXJkID0gc2VyaWFsaXplRm9yQ2xpcGJvYXJkO1xuLyoqXG5AaW50ZXJuYWxcbiovXG5jb25zdCBfX3BhcnNlRnJvbUNsaXBib2FyZCA9IHBhcnNlRnJvbUNsaXBib2FyZDtcbi8qKlxuQGludGVybmFsXG4qL1xuY29uc3QgX19lbmRDb21wb3NpdGlvbiA9IGVuZENvbXBvc2l0aW9uO1xuLyoqXG5BbiBlZGl0b3IgdmlldyBtYW5hZ2VzIHRoZSBET00gc3RydWN0dXJlIHRoYXQgcmVwcmVzZW50cyBhblxuZWRpdGFibGUgZG9jdW1lbnQuIEl0cyBzdGF0ZSBhbmQgYmVoYXZpb3IgYXJlIGRldGVybWluZWQgYnkgaXRzXG5bcHJvcHNdKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyN2aWV3LkRpcmVjdEVkaXRvclByb3BzKS5cbiovXG5jbGFzcyBFZGl0b3JWaWV3IHtcbiAgICAvKipcbiAgICBDcmVhdGUgYSB2aWV3LiBgcGxhY2VgIG1heSBiZSBhIERPTSBub2RlIHRoYXQgdGhlIGVkaXRvciBzaG91bGRcbiAgICBiZSBhcHBlbmRlZCB0bywgYSBmdW5jdGlvbiB0aGF0IHdpbGwgcGxhY2UgaXQgaW50byB0aGUgZG9jdW1lbnQsXG4gICAgb3IgYW4gb2JqZWN0IHdob3NlIGBtb3VudGAgcHJvcGVydHkgaG9sZHMgdGhlIG5vZGUgdG8gdXNlIGFzIHRoZVxuICAgIGRvY3VtZW50IGNvbnRhaW5lci4gSWYgaXQgaXMgYG51bGxgLCB0aGUgZWRpdG9yIHdpbGwgbm90IGJlXG4gICAgYWRkZWQgdG8gdGhlIGRvY3VtZW50LlxuICAgICovXG4gICAgY29uc3RydWN0b3IocGxhY2UsIHByb3BzKSB7XG4gICAgICAgIHRoaXMuX3Jvb3QgPSBudWxsO1xuICAgICAgICAvKipcbiAgICAgICAgQGludGVybmFsXG4gICAgICAgICovXG4gICAgICAgIHRoaXMuZm9jdXNlZCA9IGZhbHNlO1xuICAgICAgICAvKipcbiAgICAgICAgS2x1ZGdlIHVzZWQgdG8gd29yayBhcm91bmQgYSBDaHJvbWUgYnVnIEBpbnRlcm5hbFxuICAgICAgICAqL1xuICAgICAgICB0aGlzLnRyYWNrV3JpdGVzID0gbnVsbDtcbiAgICAgICAgdGhpcy5tb3VudGVkID0gZmFsc2U7XG4gICAgICAgIC8qKlxuICAgICAgICBAaW50ZXJuYWxcbiAgICAgICAgKi9cbiAgICAgICAgdGhpcy5tYXJrQ3Vyc29yID0gbnVsbDtcbiAgICAgICAgLyoqXG4gICAgICAgIEBpbnRlcm5hbFxuICAgICAgICAqL1xuICAgICAgICB0aGlzLmN1cnNvcldyYXBwZXIgPSBudWxsO1xuICAgICAgICAvKipcbiAgICAgICAgQGludGVybmFsXG4gICAgICAgICovXG4gICAgICAgIHRoaXMubGFzdFNlbGVjdGVkVmlld0Rlc2MgPSB1bmRlZmluZWQ7XG4gICAgICAgIC8qKlxuICAgICAgICBAaW50ZXJuYWxcbiAgICAgICAgKi9cbiAgICAgICAgdGhpcy5pbnB1dCA9IG5ldyBJbnB1dFN0YXRlO1xuICAgICAgICB0aGlzLnByZXZEaXJlY3RQbHVnaW5zID0gW107XG4gICAgICAgIHRoaXMucGx1Z2luVmlld3MgPSBbXTtcbiAgICAgICAgLyoqXG4gICAgICAgIFdoZW4gZWRpdG9yIGNvbnRlbnQgaXMgYmVpbmcgZHJhZ2dlZCwgdGhpcyBvYmplY3QgY29udGFpbnNcbiAgICAgICAgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGRyYWdnZWQgc2xpY2UgYW5kIHdoZXRoZXIgaXQgaXMgYmVpbmdcbiAgICAgICAgY29waWVkIG9yIG1vdmVkLiBBdCBhbnkgb3RoZXIgdGltZSwgaXQgaXMgbnVsbC5cbiAgICAgICAgKi9cbiAgICAgICAgdGhpcy5kcmFnZ2luZyA9IG51bGw7XG4gICAgICAgIHRoaXMuX3Byb3BzID0gcHJvcHM7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBwcm9wcy5zdGF0ZTtcbiAgICAgICAgdGhpcy5kaXJlY3RQbHVnaW5zID0gcHJvcHMucGx1Z2lucyB8fCBbXTtcbiAgICAgICAgdGhpcy5kaXJlY3RQbHVnaW5zLmZvckVhY2goY2hlY2tTdGF0ZUNvbXBvbmVudCk7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2ggPSB0aGlzLmRpc3BhdGNoLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuZG9tID0gKHBsYWNlICYmIHBsYWNlLm1vdW50KSB8fCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBpZiAocGxhY2UpIHtcbiAgICAgICAgICAgIGlmIChwbGFjZS5hcHBlbmRDaGlsZClcbiAgICAgICAgICAgICAgICBwbGFjZS5hcHBlbmRDaGlsZCh0aGlzLmRvbSk7XG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgcGxhY2UgPT0gXCJmdW5jdGlvblwiKVxuICAgICAgICAgICAgICAgIHBsYWNlKHRoaXMuZG9tKTtcbiAgICAgICAgICAgIGVsc2UgaWYgKHBsYWNlLm1vdW50KVxuICAgICAgICAgICAgICAgIHRoaXMubW91bnRlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lZGl0YWJsZSA9IGdldEVkaXRhYmxlKHRoaXMpO1xuICAgICAgICB1cGRhdGVDdXJzb3JXcmFwcGVyKHRoaXMpO1xuICAgICAgICB0aGlzLm5vZGVWaWV3cyA9IGJ1aWxkTm9kZVZpZXdzKHRoaXMpO1xuICAgICAgICB0aGlzLmRvY1ZpZXcgPSBkb2NWaWV3RGVzYyh0aGlzLnN0YXRlLmRvYywgY29tcHV0ZURvY0RlY28odGhpcyksIHZpZXdEZWNvcmF0aW9ucyh0aGlzKSwgdGhpcy5kb20sIHRoaXMpO1xuICAgICAgICB0aGlzLmRvbU9ic2VydmVyID0gbmV3IERPTU9ic2VydmVyKHRoaXMsIChmcm9tLCB0bywgdHlwZU92ZXIsIGFkZGVkKSA9PiByZWFkRE9NQ2hhbmdlKHRoaXMsIGZyb20sIHRvLCB0eXBlT3ZlciwgYWRkZWQpKTtcbiAgICAgICAgdGhpcy5kb21PYnNlcnZlci5zdGFydCgpO1xuICAgICAgICBpbml0SW5wdXQodGhpcyk7XG4gICAgICAgIHRoaXMudXBkYXRlUGx1Z2luVmlld3MoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgSG9sZHMgYHRydWVgIHdoZW4gYVxuICAgIFtjb21wb3NpdGlvbl0oaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3VpZXZlbnRzLyNldmVudHMtY29tcG9zaXRpb25ldmVudHMpXG4gICAgaXMgYWN0aXZlLlxuICAgICovXG4gICAgZ2V0IGNvbXBvc2luZygpIHsgcmV0dXJuIHRoaXMuaW5wdXQuY29tcG9zaW5nOyB9XG4gICAgLyoqXG4gICAgVGhlIHZpZXcncyBjdXJyZW50IFtwcm9wc10oaHR0cHM6Ly9wcm9zZW1pcnJvci5uZXQvZG9jcy9yZWYvI3ZpZXcuRWRpdG9yUHJvcHMpLlxuICAgICovXG4gICAgZ2V0IHByb3BzKCkge1xuICAgICAgICBpZiAodGhpcy5fcHJvcHMuc3RhdGUgIT0gdGhpcy5zdGF0ZSkge1xuICAgICAgICAgICAgbGV0IHByZXYgPSB0aGlzLl9wcm9wcztcbiAgICAgICAgICAgIHRoaXMuX3Byb3BzID0ge307XG4gICAgICAgICAgICBmb3IgKGxldCBuYW1lIGluIHByZXYpXG4gICAgICAgICAgICAgICAgdGhpcy5fcHJvcHNbbmFtZV0gPSBwcmV2W25hbWVdO1xuICAgICAgICAgICAgdGhpcy5fcHJvcHMuc3RhdGUgPSB0aGlzLnN0YXRlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9wcm9wcztcbiAgICB9XG4gICAgLyoqXG4gICAgVXBkYXRlIHRoZSB2aWV3J3MgcHJvcHMuIFdpbGwgaW1tZWRpYXRlbHkgY2F1c2UgYW4gdXBkYXRlIHRvXG4gICAgdGhlIERPTS5cbiAgICAqL1xuICAgIHVwZGF0ZShwcm9wcykge1xuICAgICAgICBpZiAocHJvcHMuaGFuZGxlRE9NRXZlbnRzICE9IHRoaXMuX3Byb3BzLmhhbmRsZURPTUV2ZW50cylcbiAgICAgICAgICAgIGVuc3VyZUxpc3RlbmVycyh0aGlzKTtcbiAgICAgICAgdGhpcy5fcHJvcHMgPSBwcm9wcztcbiAgICAgICAgaWYgKHByb3BzLnBsdWdpbnMpIHtcbiAgICAgICAgICAgIHByb3BzLnBsdWdpbnMuZm9yRWFjaChjaGVja1N0YXRlQ29tcG9uZW50KTtcbiAgICAgICAgICAgIHRoaXMuZGlyZWN0UGx1Z2lucyA9IHByb3BzLnBsdWdpbnM7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy51cGRhdGVTdGF0ZUlubmVyKHByb3BzLnN0YXRlLCB0cnVlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgVXBkYXRlIHRoZSB2aWV3IGJ5IHVwZGF0aW5nIGV4aXN0aW5nIHByb3BzIG9iamVjdCB3aXRoIHRoZSBvYmplY3RcbiAgICBnaXZlbiBhcyBhcmd1bWVudC4gRXF1aXZhbGVudCB0byBgdmlldy51cGRhdGUoT2JqZWN0LmFzc2lnbih7fSxcbiAgICB2aWV3LnByb3BzLCBwcm9wcykpYC5cbiAgICAqL1xuICAgIHNldFByb3BzKHByb3BzKSB7XG4gICAgICAgIGxldCB1cGRhdGVkID0ge307XG4gICAgICAgIGZvciAobGV0IG5hbWUgaW4gdGhpcy5fcHJvcHMpXG4gICAgICAgICAgICB1cGRhdGVkW25hbWVdID0gdGhpcy5fcHJvcHNbbmFtZV07XG4gICAgICAgIHVwZGF0ZWQuc3RhdGUgPSB0aGlzLnN0YXRlO1xuICAgICAgICBmb3IgKGxldCBuYW1lIGluIHByb3BzKVxuICAgICAgICAgICAgdXBkYXRlZFtuYW1lXSA9IHByb3BzW25hbWVdO1xuICAgICAgICB0aGlzLnVwZGF0ZSh1cGRhdGVkKTtcbiAgICB9XG4gICAgLyoqXG4gICAgVXBkYXRlIHRoZSBlZGl0b3IncyBgc3RhdGVgIHByb3AsIHdpdGhvdXQgdG91Y2hpbmcgYW55IG9mIHRoZVxuICAgIG90aGVyIHByb3BzLlxuICAgICovXG4gICAgdXBkYXRlU3RhdGUoc3RhdGUpIHtcbiAgICAgICAgdGhpcy51cGRhdGVTdGF0ZUlubmVyKHN0YXRlLCB0aGlzLnN0YXRlLnBsdWdpbnMgIT0gc3RhdGUucGx1Z2lucyk7XG4gICAgfVxuICAgIHVwZGF0ZVN0YXRlSW5uZXIoc3RhdGUsIHJlY29uZmlndXJlZCkge1xuICAgICAgICBsZXQgcHJldiA9IHRoaXMuc3RhdGUsIHJlZHJhdyA9IGZhbHNlLCB1cGRhdGVTZWwgPSBmYWxzZTtcbiAgICAgICAgLy8gV2hlbiBzdG9yZWQgbWFya3MgYXJlIGFkZGVkLCBzdG9wIGNvbXBvc2l0aW9uLCBzbyB0aGF0IHRoZXkgY2FuXG4gICAgICAgIC8vIGJlIGRpc3BsYXllZC5cbiAgICAgICAgaWYgKHN0YXRlLnN0b3JlZE1hcmtzICYmIHRoaXMuY29tcG9zaW5nKSB7XG4gICAgICAgICAgICBjbGVhckNvbXBvc2l0aW9uKHRoaXMpO1xuICAgICAgICAgICAgdXBkYXRlU2VsID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnN0YXRlID0gc3RhdGU7XG4gICAgICAgIGlmIChyZWNvbmZpZ3VyZWQpIHtcbiAgICAgICAgICAgIGxldCBub2RlVmlld3MgPSBidWlsZE5vZGVWaWV3cyh0aGlzKTtcbiAgICAgICAgICAgIGlmIChjaGFuZ2VkTm9kZVZpZXdzKG5vZGVWaWV3cywgdGhpcy5ub2RlVmlld3MpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ub2RlVmlld3MgPSBub2RlVmlld3M7XG4gICAgICAgICAgICAgICAgcmVkcmF3ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVuc3VyZUxpc3RlbmVycyh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmVkaXRhYmxlID0gZ2V0RWRpdGFibGUodGhpcyk7XG4gICAgICAgIHVwZGF0ZUN1cnNvcldyYXBwZXIodGhpcyk7XG4gICAgICAgIGxldCBpbm5lckRlY28gPSB2aWV3RGVjb3JhdGlvbnModGhpcyksIG91dGVyRGVjbyA9IGNvbXB1dGVEb2NEZWNvKHRoaXMpO1xuICAgICAgICBsZXQgc2Nyb2xsID0gcmVjb25maWd1cmVkID8gXCJyZXNldFwiXG4gICAgICAgICAgICA6IHN0YXRlLnNjcm9sbFRvU2VsZWN0aW9uID4gcHJldi5zY3JvbGxUb1NlbGVjdGlvbiA/IFwidG8gc2VsZWN0aW9uXCIgOiBcInByZXNlcnZlXCI7XG4gICAgICAgIGxldCB1cGRhdGVEb2MgPSByZWRyYXcgfHwgIXRoaXMuZG9jVmlldy5tYXRjaGVzTm9kZShzdGF0ZS5kb2MsIG91dGVyRGVjbywgaW5uZXJEZWNvKTtcbiAgICAgICAgaWYgKHVwZGF0ZURvYyB8fCAhc3RhdGUuc2VsZWN0aW9uLmVxKHByZXYuc2VsZWN0aW9uKSlcbiAgICAgICAgICAgIHVwZGF0ZVNlbCA9IHRydWU7XG4gICAgICAgIGxldCBvbGRTY3JvbGxQb3MgPSBzY3JvbGwgPT0gXCJwcmVzZXJ2ZVwiICYmIHVwZGF0ZVNlbCAmJiB0aGlzLmRvbS5zdHlsZS5vdmVyZmxvd0FuY2hvciA9PSBudWxsICYmIHN0b3JlU2Nyb2xsUG9zKHRoaXMpO1xuICAgICAgICBpZiAodXBkYXRlU2VsKSB7XG4gICAgICAgICAgICB0aGlzLmRvbU9ic2VydmVyLnN0b3AoKTtcbiAgICAgICAgICAgIC8vIFdvcmsgYXJvdW5kIGFuIGlzc3VlIGluIENocm9tZSwgSUUsIGFuZCBFZGdlIHdoZXJlIGNoYW5naW5nXG4gICAgICAgICAgICAvLyB0aGUgRE9NIGFyb3VuZCBhbiBhY3RpdmUgc2VsZWN0aW9uIHB1dHMgaXQgaW50byBhIGJyb2tlblxuICAgICAgICAgICAgLy8gc3RhdGUgd2hlcmUgdGhlIHRoaW5nIHRoZSB1c2VyIHNlZXMgZGlmZmVycyBmcm9tIHRoZVxuICAgICAgICAgICAgLy8gc2VsZWN0aW9uIHJlcG9ydGVkIGJ5IHRoZSBTZWxlY3Rpb24gb2JqZWN0ICgjNzEwLCAjOTczLFxuICAgICAgICAgICAgLy8gIzEwMTEsICMxMDEzLCAjMTAzNSkuXG4gICAgICAgICAgICBsZXQgZm9yY2VTZWxVcGRhdGUgPSB1cGRhdGVEb2MgJiYgKGllIHx8IGNocm9tZSkgJiYgIXRoaXMuY29tcG9zaW5nICYmXG4gICAgICAgICAgICAgICAgIXByZXYuc2VsZWN0aW9uLmVtcHR5ICYmICFzdGF0ZS5zZWxlY3Rpb24uZW1wdHkgJiYgc2VsZWN0aW9uQ29udGV4dENoYW5nZWQocHJldi5zZWxlY3Rpb24sIHN0YXRlLnNlbGVjdGlvbik7XG4gICAgICAgICAgICBpZiAodXBkYXRlRG9jKSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlIG5vZGUgdGhhdCB0aGUgc2VsZWN0aW9uIHBvaW50cyBpbnRvIGlzIHdyaXR0ZW4gdG8sXG4gICAgICAgICAgICAgICAgLy8gQ2hyb21lIHNvbWV0aW1lcyBzdGFydHMgbWlzcmVwb3J0aW5nIHRoZSBzZWxlY3Rpb24sIHNvIHRoaXNcbiAgICAgICAgICAgICAgICAvLyB0cmFja3MgdGhhdCBhbmQgZm9yY2VzIGEgc2VsZWN0aW9uIHJlc2V0IHdoZW4gb3VyIHVwZGF0ZVxuICAgICAgICAgICAgICAgIC8vIGRpZCB3cml0ZSB0byB0aGUgbm9kZS5cbiAgICAgICAgICAgICAgICBsZXQgY2hyb21lS2x1ZGdlID0gY2hyb21lID8gKHRoaXMudHJhY2tXcml0ZXMgPSB0aGlzLmRvbVNlbGVjdGlvbigpLmZvY3VzTm9kZSkgOiBudWxsO1xuICAgICAgICAgICAgICAgIGlmIChyZWRyYXcgfHwgIXRoaXMuZG9jVmlldy51cGRhdGUoc3RhdGUuZG9jLCBvdXRlckRlY28sIGlubmVyRGVjbywgdGhpcykpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kb2NWaWV3LnVwZGF0ZU91dGVyRGVjbyhbXSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZG9jVmlldy5kZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZG9jVmlldyA9IGRvY1ZpZXdEZXNjKHN0YXRlLmRvYywgb3V0ZXJEZWNvLCBpbm5lckRlY28sIHRoaXMuZG9tLCB0aGlzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGNocm9tZUtsdWRnZSAmJiAhdGhpcy50cmFja1dyaXRlcylcbiAgICAgICAgICAgICAgICAgICAgZm9yY2VTZWxVcGRhdGUgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gV29yayBhcm91bmQgZm9yIGFuIGlzc3VlIHdoZXJlIGFuIHVwZGF0ZSBhcnJpdmluZyByaWdodCBiZXR3ZWVuXG4gICAgICAgICAgICAvLyBhIERPTSBzZWxlY3Rpb24gY2hhbmdlIGFuZCB0aGUgXCJzZWxlY3Rpb25jaGFuZ2VcIiBldmVudCBmb3IgaXRcbiAgICAgICAgICAgIC8vIGNhbiBjYXVzZSBhIHNwdXJpb3VzIERPTSBzZWxlY3Rpb24gdXBkYXRlLCBkaXNydXB0aW5nIG1vdXNlXG4gICAgICAgICAgICAvLyBkcmFnIHNlbGVjdGlvbi5cbiAgICAgICAgICAgIGlmIChmb3JjZVNlbFVwZGF0ZSB8fFxuICAgICAgICAgICAgICAgICEodGhpcy5pbnB1dC5tb3VzZURvd24gJiYgdGhpcy5kb21PYnNlcnZlci5jdXJyZW50U2VsZWN0aW9uLmVxKHRoaXMuZG9tU2VsZWN0aW9uKCkpICYmIGFuY2hvckluUmlnaHRQbGFjZSh0aGlzKSkpIHtcbiAgICAgICAgICAgICAgICBzZWxlY3Rpb25Ub0RPTSh0aGlzLCBmb3JjZVNlbFVwZGF0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzeW5jTm9kZVNlbGVjdGlvbih0aGlzLCBzdGF0ZS5zZWxlY3Rpb24pO1xuICAgICAgICAgICAgICAgIHRoaXMuZG9tT2JzZXJ2ZXIuc2V0Q3VyU2VsZWN0aW9uKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmRvbU9ic2VydmVyLnN0YXJ0KCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy51cGRhdGVQbHVnaW5WaWV3cyhwcmV2KTtcbiAgICAgICAgaWYgKHNjcm9sbCA9PSBcInJlc2V0XCIpIHtcbiAgICAgICAgICAgIHRoaXMuZG9tLnNjcm9sbFRvcCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoc2Nyb2xsID09IFwidG8gc2VsZWN0aW9uXCIpIHtcbiAgICAgICAgICAgIGxldCBzdGFydERPTSA9IHRoaXMuZG9tU2VsZWN0aW9uKCkuZm9jdXNOb2RlO1xuICAgICAgICAgICAgaWYgKHRoaXMuc29tZVByb3AoXCJoYW5kbGVTY3JvbGxUb1NlbGVjdGlvblwiLCBmID0+IGYodGhpcykpKSA7XG4gICAgICAgICAgICBlbHNlIGlmIChzdGF0ZS5zZWxlY3Rpb24gaW5zdGFuY2VvZiBOb2RlU2VsZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgbGV0IHRhcmdldCA9IHRoaXMuZG9jVmlldy5kb21BZnRlclBvcyhzdGF0ZS5zZWxlY3Rpb24uZnJvbSk7XG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldC5ub2RlVHlwZSA9PSAxKVxuICAgICAgICAgICAgICAgICAgICBzY3JvbGxSZWN0SW50b1ZpZXcodGhpcywgdGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLCBzdGFydERPTSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzY3JvbGxSZWN0SW50b1ZpZXcodGhpcywgdGhpcy5jb29yZHNBdFBvcyhzdGF0ZS5zZWxlY3Rpb24uaGVhZCwgMSksIHN0YXJ0RE9NKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChvbGRTY3JvbGxQb3MpIHtcbiAgICAgICAgICAgIHJlc2V0U2Nyb2xsUG9zKG9sZFNjcm9sbFBvcyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZGVzdHJveVBsdWdpblZpZXdzKCkge1xuICAgICAgICBsZXQgdmlldztcbiAgICAgICAgd2hpbGUgKHZpZXcgPSB0aGlzLnBsdWdpblZpZXdzLnBvcCgpKVxuICAgICAgICAgICAgaWYgKHZpZXcuZGVzdHJveSlcbiAgICAgICAgICAgICAgICB2aWV3LmRlc3Ryb3koKTtcbiAgICB9XG4gICAgdXBkYXRlUGx1Z2luVmlld3MocHJldlN0YXRlKSB7XG4gICAgICAgIGlmICghcHJldlN0YXRlIHx8IHByZXZTdGF0ZS5wbHVnaW5zICE9IHRoaXMuc3RhdGUucGx1Z2lucyB8fCB0aGlzLmRpcmVjdFBsdWdpbnMgIT0gdGhpcy5wcmV2RGlyZWN0UGx1Z2lucykge1xuICAgICAgICAgICAgdGhpcy5wcmV2RGlyZWN0UGx1Z2lucyA9IHRoaXMuZGlyZWN0UGx1Z2lucztcbiAgICAgICAgICAgIHRoaXMuZGVzdHJveVBsdWdpblZpZXdzKCk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZGlyZWN0UGx1Z2lucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGxldCBwbHVnaW4gPSB0aGlzLmRpcmVjdFBsdWdpbnNbaV07XG4gICAgICAgICAgICAgICAgaWYgKHBsdWdpbi5zcGVjLnZpZXcpXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luVmlld3MucHVzaChwbHVnaW4uc3BlYy52aWV3KHRoaXMpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zdGF0ZS5wbHVnaW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IHBsdWdpbiA9IHRoaXMuc3RhdGUucGx1Z2luc1tpXTtcbiAgICAgICAgICAgICAgICBpZiAocGx1Z2luLnNwZWMudmlldylcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW5WaWV3cy5wdXNoKHBsdWdpbi5zcGVjLnZpZXcodGhpcykpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnBsdWdpblZpZXdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IHBsdWdpblZpZXcgPSB0aGlzLnBsdWdpblZpZXdzW2ldO1xuICAgICAgICAgICAgICAgIGlmIChwbHVnaW5WaWV3LnVwZGF0ZSlcbiAgICAgICAgICAgICAgICAgICAgcGx1Z2luVmlldy51cGRhdGUodGhpcywgcHJldlN0YXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBzb21lUHJvcChwcm9wTmFtZSwgZikge1xuICAgICAgICBsZXQgcHJvcCA9IHRoaXMuX3Byb3BzICYmIHRoaXMuX3Byb3BzW3Byb3BOYW1lXSwgdmFsdWU7XG4gICAgICAgIGlmIChwcm9wICE9IG51bGwgJiYgKHZhbHVlID0gZiA/IGYocHJvcCkgOiBwcm9wKSlcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmRpcmVjdFBsdWdpbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBwcm9wID0gdGhpcy5kaXJlY3RQbHVnaW5zW2ldLnByb3BzW3Byb3BOYW1lXTtcbiAgICAgICAgICAgIGlmIChwcm9wICE9IG51bGwgJiYgKHZhbHVlID0gZiA/IGYocHJvcCkgOiBwcm9wKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHBsdWdpbnMgPSB0aGlzLnN0YXRlLnBsdWdpbnM7XG4gICAgICAgIGlmIChwbHVnaW5zKVxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwbHVnaW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IHByb3AgPSBwbHVnaW5zW2ldLnByb3BzW3Byb3BOYW1lXTtcbiAgICAgICAgICAgICAgICBpZiAocHJvcCAhPSBudWxsICYmICh2YWx1ZSA9IGYgPyBmKHByb3ApIDogcHJvcCkpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgUXVlcnkgd2hldGhlciB0aGUgdmlldyBoYXMgZm9jdXMuXG4gICAgKi9cbiAgICBoYXNGb2N1cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucm9vdC5hY3RpdmVFbGVtZW50ID09IHRoaXMuZG9tO1xuICAgIH1cbiAgICAvKipcbiAgICBGb2N1cyB0aGUgZWRpdG9yLlxuICAgICovXG4gICAgZm9jdXMoKSB7XG4gICAgICAgIHRoaXMuZG9tT2JzZXJ2ZXIuc3RvcCgpO1xuICAgICAgICBpZiAodGhpcy5lZGl0YWJsZSlcbiAgICAgICAgICAgIGZvY3VzUHJldmVudFNjcm9sbCh0aGlzLmRvbSk7XG4gICAgICAgIHNlbGVjdGlvblRvRE9NKHRoaXMpO1xuICAgICAgICB0aGlzLmRvbU9ic2VydmVyLnN0YXJ0KCk7XG4gICAgfVxuICAgIC8qKlxuICAgIEdldCB0aGUgZG9jdW1lbnQgcm9vdCBpbiB3aGljaCB0aGUgZWRpdG9yIGV4aXN0cy4gVGhpcyB3aWxsXG4gICAgdXN1YWxseSBiZSB0aGUgdG9wLWxldmVsIGBkb2N1bWVudGAsIGJ1dCBtaWdodCBiZSBhIFtzaGFkb3dcbiAgICBET01dKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL1dlYl9Db21wb25lbnRzL1NoYWRvd19ET00pXG4gICAgcm9vdCBpZiB0aGUgZWRpdG9yIGlzIGluc2lkZSBvbmUuXG4gICAgKi9cbiAgICBnZXQgcm9vdCgpIHtcbiAgICAgICAgbGV0IGNhY2hlZCA9IHRoaXMuX3Jvb3Q7XG4gICAgICAgIGlmIChjYWNoZWQgPT0gbnVsbClcbiAgICAgICAgICAgIGZvciAobGV0IHNlYXJjaCA9IHRoaXMuZG9tLnBhcmVudE5vZGU7IHNlYXJjaDsgc2VhcmNoID0gc2VhcmNoLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2VhcmNoLm5vZGVUeXBlID09IDkgfHwgKHNlYXJjaC5ub2RlVHlwZSA9PSAxMSAmJiBzZWFyY2guaG9zdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzZWFyY2guZ2V0U2VsZWN0aW9uKVxuICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmdldFByb3RvdHlwZU9mKHNlYXJjaCkuZ2V0U2VsZWN0aW9uID0gKCkgPT4gc2VhcmNoLm93bmVyRG9jdW1lbnQuZ2V0U2VsZWN0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9yb290ID0gc2VhcmNoO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNhY2hlZCB8fCBkb2N1bWVudDtcbiAgICB9XG4gICAgLyoqXG4gICAgR2l2ZW4gYSBwYWlyIG9mIHZpZXdwb3J0IGNvb3JkaW5hdGVzLCByZXR1cm4gdGhlIGRvY3VtZW50XG4gICAgcG9zaXRpb24gdGhhdCBjb3JyZXNwb25kcyB0byB0aGVtLiBNYXkgcmV0dXJuIG51bGwgaWYgdGhlIGdpdmVuXG4gICAgY29vcmRpbmF0ZXMgYXJlbid0IGluc2lkZSBvZiB0aGUgZWRpdG9yLiBXaGVuIGFuIG9iamVjdCBpc1xuICAgIHJldHVybmVkLCBpdHMgYHBvc2AgcHJvcGVydHkgaXMgdGhlIHBvc2l0aW9uIG5lYXJlc3QgdG8gdGhlXG4gICAgY29vcmRpbmF0ZXMsIGFuZCBpdHMgYGluc2lkZWAgcHJvcGVydHkgaG9sZHMgdGhlIHBvc2l0aW9uIG9mIHRoZVxuICAgIGlubmVyIG5vZGUgdGhhdCB0aGUgcG9zaXRpb24gZmFsbHMgaW5zaWRlIG9mLCBvciAtMSBpZiBpdCBpcyBhdFxuICAgIHRoZSB0b3AgbGV2ZWwsIG5vdCBpbiBhbnkgbm9kZS5cbiAgICAqL1xuICAgIHBvc0F0Q29vcmRzKGNvb3Jkcykge1xuICAgICAgICByZXR1cm4gcG9zQXRDb29yZHModGhpcywgY29vcmRzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgUmV0dXJucyB0aGUgdmlld3BvcnQgcmVjdGFuZ2xlIGF0IGEgZ2l2ZW4gZG9jdW1lbnQgcG9zaXRpb24uXG4gICAgYGxlZnRgIGFuZCBgcmlnaHRgIHdpbGwgYmUgdGhlIHNhbWUgbnVtYmVyLCBhcyB0aGlzIHJldHVybnMgYVxuICAgIGZsYXQgY3Vyc29yLWlzaCByZWN0YW5nbGUuIElmIHRoZSBwb3NpdGlvbiBpcyBiZXR3ZWVuIHR3byB0aGluZ3NcbiAgICB0aGF0IGFyZW4ndCBkaXJlY3RseSBhZGphY2VudCwgYHNpZGVgIGRldGVybWluZXMgd2hpY2ggZWxlbWVudFxuICAgIGlzIHVzZWQuIFdoZW4gPCAwLCB0aGUgZWxlbWVudCBiZWZvcmUgdGhlIHBvc2l0aW9uIGlzIHVzZWQsXG4gICAgb3RoZXJ3aXNlIHRoZSBlbGVtZW50IGFmdGVyLlxuICAgICovXG4gICAgY29vcmRzQXRQb3MocG9zLCBzaWRlID0gMSkge1xuICAgICAgICByZXR1cm4gY29vcmRzQXRQb3ModGhpcywgcG9zLCBzaWRlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgRmluZCB0aGUgRE9NIHBvc2l0aW9uIHRoYXQgY29ycmVzcG9uZHMgdG8gdGhlIGdpdmVuIGRvY3VtZW50XG4gICAgcG9zaXRpb24uIFdoZW4gYHNpZGVgIGlzIG5lZ2F0aXZlLCBmaW5kIHRoZSBwb3NpdGlvbiBhcyBjbG9zZSBhc1xuICAgIHBvc3NpYmxlIHRvIHRoZSBjb250ZW50IGJlZm9yZSB0aGUgcG9zaXRpb24uIFdoZW4gcG9zaXRpdmUsXG4gICAgcHJlZmVyIHBvc2l0aW9ucyBjbG9zZSB0byB0aGUgY29udGVudCBhZnRlciB0aGUgcG9zaXRpb24uIFdoZW5cbiAgICB6ZXJvLCBwcmVmZXIgYXMgc2hhbGxvdyBhIHBvc2l0aW9uIGFzIHBvc3NpYmxlLlxuICAgIFxuICAgIE5vdGUgdGhhdCB5b3Ugc2hvdWxkICoqbm90KiogbXV0YXRlIHRoZSBlZGl0b3IncyBpbnRlcm5hbCBET00sXG4gICAgb25seSBpbnNwZWN0IGl0IChhbmQgZXZlbiB0aGF0IGlzIHVzdWFsbHkgbm90IG5lY2Vzc2FyeSkuXG4gICAgKi9cbiAgICBkb21BdFBvcyhwb3MsIHNpZGUgPSAwKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRvY1ZpZXcuZG9tRnJvbVBvcyhwb3MsIHNpZGUpO1xuICAgIH1cbiAgICAvKipcbiAgICBGaW5kIHRoZSBET00gbm9kZSB0aGF0IHJlcHJlc2VudHMgdGhlIGRvY3VtZW50IG5vZGUgYWZ0ZXIgdGhlXG4gICAgZ2l2ZW4gcG9zaXRpb24uIE1heSByZXR1cm4gYG51bGxgIHdoZW4gdGhlIHBvc2l0aW9uIGRvZXNuJ3QgcG9pbnRcbiAgICBpbiBmcm9udCBvZiBhIG5vZGUgb3IgaWYgdGhlIG5vZGUgaXMgaW5zaWRlIGFuIG9wYXF1ZSBub2RlIHZpZXcuXG4gICAgXG4gICAgVGhpcyBpcyBpbnRlbmRlZCB0byBiZSBhYmxlIHRvIGNhbGwgdGhpbmdzIGxpa2VcbiAgICBgZ2V0Qm91bmRpbmdDbGllbnRSZWN0YCBvbiB0aGF0IERPTSBub2RlLiBEbyAqKm5vdCoqIG11dGF0ZSB0aGVcbiAgICBlZGl0b3IgRE9NIGRpcmVjdGx5LCBvciBhZGQgc3R5bGluZyB0aGlzIHdheSwgc2luY2UgdGhhdCB3aWxsIGJlXG4gICAgaW1tZWRpYXRlbHkgb3ZlcnJpZGVuIGJ5IHRoZSBlZGl0b3IgYXMgaXQgcmVkcmF3cyB0aGUgbm9kZS5cbiAgICAqL1xuICAgIG5vZGVET00ocG9zKSB7XG4gICAgICAgIGxldCBkZXNjID0gdGhpcy5kb2NWaWV3LmRlc2NBdChwb3MpO1xuICAgICAgICByZXR1cm4gZGVzYyA/IGRlc2Mubm9kZURPTSA6IG51bGw7XG4gICAgfVxuICAgIC8qKlxuICAgIEZpbmQgdGhlIGRvY3VtZW50IHBvc2l0aW9uIHRoYXQgY29ycmVzcG9uZHMgdG8gYSBnaXZlbiBET01cbiAgICBwb3NpdGlvbi4gKFdoZW5ldmVyIHBvc3NpYmxlLCBpdCBpcyBwcmVmZXJhYmxlIHRvIGluc3BlY3QgdGhlXG4gICAgZG9jdW1lbnQgc3RydWN0dXJlIGRpcmVjdGx5LCByYXRoZXIgdGhhbiBwb2tpbmcgYXJvdW5kIGluIHRoZVxuICAgIERPTSwgYnV0IHNvbWV0aW1lc+KAlGZvciBleGFtcGxlIHdoZW4gaW50ZXJwcmV0aW5nIGFuIGV2ZW50XG4gICAgdGFyZ2V04oCUeW91IGRvbid0IGhhdmUgYSBjaG9pY2UuKVxuICAgIFxuICAgIFRoZSBgYmlhc2AgcGFyYW1ldGVyIGNhbiBiZSB1c2VkIHRvIGluZmx1ZW5jZSB3aGljaCBzaWRlIG9mIGEgRE9NXG4gICAgbm9kZSB0byB1c2Ugd2hlbiB0aGUgcG9zaXRpb24gaXMgaW5zaWRlIGEgbGVhZiBub2RlLlxuICAgICovXG4gICAgcG9zQXRET00obm9kZSwgb2Zmc2V0LCBiaWFzID0gLTEpIHtcbiAgICAgICAgbGV0IHBvcyA9IHRoaXMuZG9jVmlldy5wb3NGcm9tRE9NKG5vZGUsIG9mZnNldCwgYmlhcyk7XG4gICAgICAgIGlmIChwb3MgPT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiRE9NIHBvc2l0aW9uIG5vdCBpbnNpZGUgdGhlIGVkaXRvclwiKTtcbiAgICAgICAgcmV0dXJuIHBvcztcbiAgICB9XG4gICAgLyoqXG4gICAgRmluZCBvdXQgd2hldGhlciB0aGUgc2VsZWN0aW9uIGlzIGF0IHRoZSBlbmQgb2YgYSB0ZXh0YmxvY2sgd2hlblxuICAgIG1vdmluZyBpbiBhIGdpdmVuIGRpcmVjdGlvbi4gV2hlbiwgZm9yIGV4YW1wbGUsIGdpdmVuIGBcImxlZnRcImAsXG4gICAgaXQgd2lsbCByZXR1cm4gdHJ1ZSBpZiBtb3ZpbmcgbGVmdCBmcm9tIHRoZSBjdXJyZW50IGN1cnNvclxuICAgIHBvc2l0aW9uIHdvdWxkIGxlYXZlIHRoYXQgcG9zaXRpb24ncyBwYXJlbnQgdGV4dGJsb2NrLiBXaWxsIGFwcGx5XG4gICAgdG8gdGhlIHZpZXcncyBjdXJyZW50IHN0YXRlIGJ5IGRlZmF1bHQsIGJ1dCBpdCBpcyBwb3NzaWJsZSB0b1xuICAgIHBhc3MgYSBkaWZmZXJlbnQgc3RhdGUuXG4gICAgKi9cbiAgICBlbmRPZlRleHRibG9jayhkaXIsIHN0YXRlKSB7XG4gICAgICAgIHJldHVybiBlbmRPZlRleHRibG9jayh0aGlzLCBzdGF0ZSB8fCB0aGlzLnN0YXRlLCBkaXIpO1xuICAgIH1cbiAgICAvKipcbiAgICBSZW1vdmVzIHRoZSBlZGl0b3IgZnJvbSB0aGUgRE9NIGFuZCBkZXN0cm95cyBhbGwgW25vZGVcbiAgICB2aWV3c10oaHR0cHM6Ly9wcm9zZW1pcnJvci5uZXQvZG9jcy9yZWYvI3ZpZXcuTm9kZVZpZXcpLlxuICAgICovXG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmRvY1ZpZXcpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGRlc3Ryb3lJbnB1dCh0aGlzKTtcbiAgICAgICAgdGhpcy5kZXN0cm95UGx1Z2luVmlld3MoKTtcbiAgICAgICAgaWYgKHRoaXMubW91bnRlZCkge1xuICAgICAgICAgICAgdGhpcy5kb2NWaWV3LnVwZGF0ZSh0aGlzLnN0YXRlLmRvYywgW10sIHZpZXdEZWNvcmF0aW9ucyh0aGlzKSwgdGhpcyk7XG4gICAgICAgICAgICB0aGlzLmRvbS50ZXh0Q29udGVudCA9IFwiXCI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5kb20ucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgdGhpcy5kb20ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmRvbSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kb2NWaWV3LmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5kb2NWaWV3ID0gbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgVGhpcyBpcyB0cnVlIHdoZW4gdGhlIHZpZXcgaGFzIGJlZW5cbiAgICBbZGVzdHJveWVkXShodHRwczovL3Byb3NlbWlycm9yLm5ldC9kb2NzL3JlZi8jdmlldy5FZGl0b3JWaWV3LmRlc3Ryb3kpIChhbmQgdGh1cyBzaG91bGQgbm90IGJlXG4gICAgdXNlZCBhbnltb3JlKS5cbiAgICAqL1xuICAgIGdldCBpc0Rlc3Ryb3llZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZG9jVmlldyA9PSBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICBVc2VkIGZvciB0ZXN0aW5nLlxuICAgICovXG4gICAgZGlzcGF0Y2hFdmVudChldmVudCkge1xuICAgICAgICByZXR1cm4gZGlzcGF0Y2hFdmVudCh0aGlzLCBldmVudCk7XG4gICAgfVxuICAgIC8qKlxuICAgIERpc3BhdGNoIGEgdHJhbnNhY3Rpb24uIFdpbGwgY2FsbFxuICAgIFtgZGlzcGF0Y2hUcmFuc2FjdGlvbmBdKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyN2aWV3LkRpcmVjdEVkaXRvclByb3BzLmRpc3BhdGNoVHJhbnNhY3Rpb24pXG4gICAgd2hlbiBnaXZlbiwgYW5kIG90aGVyd2lzZSBkZWZhdWx0cyB0byBhcHBseWluZyB0aGUgdHJhbnNhY3Rpb24gdG9cbiAgICB0aGUgY3VycmVudCBzdGF0ZSBhbmQgY2FsbGluZ1xuICAgIFtgdXBkYXRlU3RhdGVgXShodHRwczovL3Byb3NlbWlycm9yLm5ldC9kb2NzL3JlZi8jdmlldy5FZGl0b3JWaWV3LnVwZGF0ZVN0YXRlKSB3aXRoIHRoZSByZXN1bHQuXG4gICAgVGhpcyBtZXRob2QgaXMgYm91bmQgdG8gdGhlIHZpZXcgaW5zdGFuY2UsIHNvIHRoYXQgaXQgY2FuIGJlXG4gICAgZWFzaWx5IHBhc3NlZCBhcm91bmQuXG4gICAgKi9cbiAgICBkaXNwYXRjaCh0cikge1xuICAgICAgICBsZXQgZGlzcGF0Y2hUcmFuc2FjdGlvbiA9IHRoaXMuX3Byb3BzLmRpc3BhdGNoVHJhbnNhY3Rpb247XG4gICAgICAgIGlmIChkaXNwYXRjaFRyYW5zYWN0aW9uKVxuICAgICAgICAgICAgZGlzcGF0Y2hUcmFuc2FjdGlvbi5jYWxsKHRoaXMsIHRyKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgdGhpcy51cGRhdGVTdGF0ZSh0aGlzLnN0YXRlLmFwcGx5KHRyKSk7XG4gICAgfVxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgZG9tU2VsZWN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yb290LmdldFNlbGVjdGlvbigpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNvbXB1dGVEb2NEZWNvKHZpZXcpIHtcbiAgICBsZXQgYXR0cnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIGF0dHJzLmNsYXNzID0gXCJQcm9zZU1pcnJvclwiO1xuICAgIGF0dHJzLmNvbnRlbnRlZGl0YWJsZSA9IFN0cmluZyh2aWV3LmVkaXRhYmxlKTtcbiAgICBhdHRycy50cmFuc2xhdGUgPSBcIm5vXCI7XG4gICAgdmlldy5zb21lUHJvcChcImF0dHJpYnV0ZXNcIiwgdmFsdWUgPT4ge1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09IFwiZnVuY3Rpb25cIilcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWUodmlldy5zdGF0ZSk7XG4gICAgICAgIGlmICh2YWx1ZSlcbiAgICAgICAgICAgIGZvciAobGV0IGF0dHIgaW4gdmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoYXR0ciA9PSBcImNsYXNzXCIpXG4gICAgICAgICAgICAgICAgICAgIGF0dHJzLmNsYXNzICs9IFwiIFwiICsgdmFsdWVbYXR0cl07XG4gICAgICAgICAgICAgICAgaWYgKGF0dHIgPT0gXCJzdHlsZVwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGF0dHJzLnN0eWxlID0gKGF0dHJzLnN0eWxlID8gYXR0cnMuc3R5bGUgKyBcIjtcIiA6IFwiXCIpICsgdmFsdWVbYXR0cl07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKCFhdHRyc1thdHRyXSAmJiBhdHRyICE9IFwiY29udGVudGVkaXRhYmxlXCIgJiYgYXR0ciAhPSBcIm5vZGVOYW1lXCIpXG4gICAgICAgICAgICAgICAgICAgIGF0dHJzW2F0dHJdID0gU3RyaW5nKHZhbHVlW2F0dHJdKTtcbiAgICAgICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gW0RlY29yYXRpb24ubm9kZSgwLCB2aWV3LnN0YXRlLmRvYy5jb250ZW50LnNpemUsIGF0dHJzKV07XG59XG5mdW5jdGlvbiB1cGRhdGVDdXJzb3JXcmFwcGVyKHZpZXcpIHtcbiAgICBpZiAodmlldy5tYXJrQ3Vyc29yKSB7XG4gICAgICAgIGxldCBkb20gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW1nXCIpO1xuICAgICAgICBkb20uY2xhc3NOYW1lID0gXCJQcm9zZU1pcnJvci1zZXBhcmF0b3JcIjtcbiAgICAgICAgZG9tLnNldEF0dHJpYnV0ZShcIm1hcmstcGxhY2Vob2xkZXJcIiwgXCJ0cnVlXCIpO1xuICAgICAgICBkb20uc2V0QXR0cmlidXRlKFwiYWx0XCIsIFwiXCIpO1xuICAgICAgICB2aWV3LmN1cnNvcldyYXBwZXIgPSB7IGRvbSwgZGVjbzogRGVjb3JhdGlvbi53aWRnZXQodmlldy5zdGF0ZS5zZWxlY3Rpb24uaGVhZCwgZG9tLCB7IHJhdzogdHJ1ZSwgbWFya3M6IHZpZXcubWFya0N1cnNvciB9KSB9O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdmlldy5jdXJzb3JXcmFwcGVyID0gbnVsbDtcbiAgICB9XG59XG5mdW5jdGlvbiBnZXRFZGl0YWJsZSh2aWV3KSB7XG4gICAgcmV0dXJuICF2aWV3LnNvbWVQcm9wKFwiZWRpdGFibGVcIiwgdmFsdWUgPT4gdmFsdWUodmlldy5zdGF0ZSkgPT09IGZhbHNlKTtcbn1cbmZ1bmN0aW9uIHNlbGVjdGlvbkNvbnRleHRDaGFuZ2VkKHNlbDEsIHNlbDIpIHtcbiAgICBsZXQgZGVwdGggPSBNYXRoLm1pbihzZWwxLiRhbmNob3Iuc2hhcmVkRGVwdGgoc2VsMS5oZWFkKSwgc2VsMi4kYW5jaG9yLnNoYXJlZERlcHRoKHNlbDIuaGVhZCkpO1xuICAgIHJldHVybiBzZWwxLiRhbmNob3Iuc3RhcnQoZGVwdGgpICE9IHNlbDIuJGFuY2hvci5zdGFydChkZXB0aCk7XG59XG5mdW5jdGlvbiBidWlsZE5vZGVWaWV3cyh2aWV3KSB7XG4gICAgbGV0IHJlc3VsdCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgZnVuY3Rpb24gYWRkKG9iaikge1xuICAgICAgICBmb3IgKGxldCBwcm9wIGluIG9iailcbiAgICAgICAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHJlc3VsdCwgcHJvcCkpXG4gICAgICAgICAgICAgICAgcmVzdWx0W3Byb3BdID0gb2JqW3Byb3BdO1xuICAgIH1cbiAgICB2aWV3LnNvbWVQcm9wKFwibm9kZVZpZXdzXCIsIGFkZCk7XG4gICAgdmlldy5zb21lUHJvcChcIm1hcmtWaWV3c1wiLCBhZGQpO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBjaGFuZ2VkTm9kZVZpZXdzKGEsIGIpIHtcbiAgICBsZXQgbkEgPSAwLCBuQiA9IDA7XG4gICAgZm9yIChsZXQgcHJvcCBpbiBhKSB7XG4gICAgICAgIGlmIChhW3Byb3BdICE9IGJbcHJvcF0pXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgbkErKztcbiAgICB9XG4gICAgZm9yIChsZXQgXyBpbiBiKVxuICAgICAgICBuQisrO1xuICAgIHJldHVybiBuQSAhPSBuQjtcbn1cbmZ1bmN0aW9uIGNoZWNrU3RhdGVDb21wb25lbnQocGx1Z2luKSB7XG4gICAgaWYgKHBsdWdpbi5zcGVjLnN0YXRlIHx8IHBsdWdpbi5zcGVjLmZpbHRlclRyYW5zYWN0aW9uIHx8IHBsdWdpbi5zcGVjLmFwcGVuZFRyYW5zYWN0aW9uKVxuICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlBsdWdpbnMgcGFzc2VkIGRpcmVjdGx5IHRvIHRoZSB2aWV3IG11c3Qgbm90IGhhdmUgYSBzdGF0ZSBjb21wb25lbnRcIik7XG59XG5cbmV4cG9ydCB7IERlY29yYXRpb24sIERlY29yYXRpb25TZXQsIEVkaXRvclZpZXcsIF9fZW5kQ29tcG9zaXRpb24sIF9fcGFyc2VGcm9tQ2xpcGJvYXJkLCBfX3NlcmlhbGl6ZUZvckNsaXBib2FyZCB9O1xuIiwiZXhwb3J0IHZhciBiYXNlID0ge1xuICA4OiBcIkJhY2tzcGFjZVwiLFxuICA5OiBcIlRhYlwiLFxuICAxMDogXCJFbnRlclwiLFxuICAxMjogXCJOdW1Mb2NrXCIsXG4gIDEzOiBcIkVudGVyXCIsXG4gIDE2OiBcIlNoaWZ0XCIsXG4gIDE3OiBcIkNvbnRyb2xcIixcbiAgMTg6IFwiQWx0XCIsXG4gIDIwOiBcIkNhcHNMb2NrXCIsXG4gIDI3OiBcIkVzY2FwZVwiLFxuICAzMjogXCIgXCIsXG4gIDMzOiBcIlBhZ2VVcFwiLFxuICAzNDogXCJQYWdlRG93blwiLFxuICAzNTogXCJFbmRcIixcbiAgMzY6IFwiSG9tZVwiLFxuICAzNzogXCJBcnJvd0xlZnRcIixcbiAgMzg6IFwiQXJyb3dVcFwiLFxuICAzOTogXCJBcnJvd1JpZ2h0XCIsXG4gIDQwOiBcIkFycm93RG93blwiLFxuICA0NDogXCJQcmludFNjcmVlblwiLFxuICA0NTogXCJJbnNlcnRcIixcbiAgNDY6IFwiRGVsZXRlXCIsXG4gIDU5OiBcIjtcIixcbiAgNjE6IFwiPVwiLFxuICA5MTogXCJNZXRhXCIsXG4gIDkyOiBcIk1ldGFcIixcbiAgMTA2OiBcIipcIixcbiAgMTA3OiBcIitcIixcbiAgMTA4OiBcIixcIixcbiAgMTA5OiBcIi1cIixcbiAgMTEwOiBcIi5cIixcbiAgMTExOiBcIi9cIixcbiAgMTQ0OiBcIk51bUxvY2tcIixcbiAgMTQ1OiBcIlNjcm9sbExvY2tcIixcbiAgMTYwOiBcIlNoaWZ0XCIsXG4gIDE2MTogXCJTaGlmdFwiLFxuICAxNjI6IFwiQ29udHJvbFwiLFxuICAxNjM6IFwiQ29udHJvbFwiLFxuICAxNjQ6IFwiQWx0XCIsXG4gIDE2NTogXCJBbHRcIixcbiAgMTczOiBcIi1cIixcbiAgMTg2OiBcIjtcIixcbiAgMTg3OiBcIj1cIixcbiAgMTg4OiBcIixcIixcbiAgMTg5OiBcIi1cIixcbiAgMTkwOiBcIi5cIixcbiAgMTkxOiBcIi9cIixcbiAgMTkyOiBcImBcIixcbiAgMjE5OiBcIltcIixcbiAgMjIwOiBcIlxcXFxcIixcbiAgMjIxOiBcIl1cIixcbiAgMjIyOiBcIidcIixcbiAgMjI5OiBcInFcIlxufVxuXG5leHBvcnQgdmFyIHNoaWZ0ID0ge1xuICA0ODogXCIpXCIsXG4gIDQ5OiBcIiFcIixcbiAgNTA6IFwiQFwiLFxuICA1MTogXCIjXCIsXG4gIDUyOiBcIiRcIixcbiAgNTM6IFwiJVwiLFxuICA1NDogXCJeXCIsXG4gIDU1OiBcIiZcIixcbiAgNTY6IFwiKlwiLFxuICA1NzogXCIoXCIsXG4gIDU5OiBcIjpcIixcbiAgNjE6IFwiK1wiLFxuICAxNzM6IFwiX1wiLFxuICAxODY6IFwiOlwiLFxuICAxODc6IFwiK1wiLFxuICAxODg6IFwiPFwiLFxuICAxODk6IFwiX1wiLFxuICAxOTA6IFwiPlwiLFxuICAxOTE6IFwiP1wiLFxuICAxOTI6IFwiflwiLFxuICAyMTk6IFwie1wiLFxuICAyMjA6IFwifFwiLFxuICAyMjE6IFwifVwiLFxuICAyMjI6IFwiXFxcIlwiLFxuICAyMjk6IFwiUVwiXG59XG5cbnZhciBjaHJvbWUgPSB0eXBlb2YgbmF2aWdhdG9yICE9IFwidW5kZWZpbmVkXCIgJiYgL0Nocm9tZVxcLyhcXGQrKS8uZXhlYyhuYXZpZ2F0b3IudXNlckFnZW50KVxudmFyIHNhZmFyaSA9IHR5cGVvZiBuYXZpZ2F0b3IgIT0gXCJ1bmRlZmluZWRcIiAmJiAvQXBwbGUgQ29tcHV0ZXIvLnRlc3QobmF2aWdhdG9yLnZlbmRvcilcbnZhciBnZWNrbyA9IHR5cGVvZiBuYXZpZ2F0b3IgIT0gXCJ1bmRlZmluZWRcIiAmJiAvR2Vja29cXC9cXGQrLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpXG52YXIgbWFjID0gdHlwZW9mIG5hdmlnYXRvciAhPSBcInVuZGVmaW5lZFwiICYmIC9NYWMvLnRlc3QobmF2aWdhdG9yLnBsYXRmb3JtKVxudmFyIGllID0gdHlwZW9mIG5hdmlnYXRvciAhPSBcInVuZGVmaW5lZFwiICYmIC9NU0lFIFxcZHxUcmlkZW50XFwvKD86WzctOV18XFxkezIsfSlcXC4uKnJ2OihcXGQrKS8uZXhlYyhuYXZpZ2F0b3IudXNlckFnZW50KVxudmFyIGJyb2tlbk1vZGlmaWVyTmFtZXMgPSBjaHJvbWUgJiYgKG1hYyB8fCArY2hyb21lWzFdIDwgNTcpIHx8IGdlY2tvICYmIG1hY1xuXG4vLyBGaWxsIGluIHRoZSBkaWdpdCBrZXlzXG5mb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIGJhc2VbNDggKyBpXSA9IGJhc2VbOTYgKyBpXSA9IFN0cmluZyhpKVxuXG4vLyBUaGUgZnVuY3Rpb24ga2V5c1xuZm9yICh2YXIgaSA9IDE7IGkgPD0gMjQ7IGkrKykgYmFzZVtpICsgMTExXSA9IFwiRlwiICsgaVxuXG4vLyBBbmQgdGhlIGFscGhhYmV0aWMga2V5c1xuZm9yICh2YXIgaSA9IDY1OyBpIDw9IDkwOyBpKyspIHtcbiAgYmFzZVtpXSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoaSArIDMyKVxuICBzaGlmdFtpXSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoaSlcbn1cblxuLy8gRm9yIGVhY2ggY29kZSB0aGF0IGRvZXNuJ3QgaGF2ZSBhIHNoaWZ0LWVxdWl2YWxlbnQsIGNvcHkgdGhlIGJhc2UgbmFtZVxuZm9yICh2YXIgY29kZSBpbiBiYXNlKSBpZiAoIXNoaWZ0Lmhhc093blByb3BlcnR5KGNvZGUpKSBzaGlmdFtjb2RlXSA9IGJhc2VbY29kZV1cblxuZXhwb3J0IGZ1bmN0aW9uIGtleU5hbWUoZXZlbnQpIHtcbiAgLy8gRG9uJ3QgdHJ1c3QgZXZlbnQua2V5IGluIENocm9tZSB3aGVuIHRoZXJlIGFyZSBtb2RpZmllcnMgdW50aWxcbiAgLy8gdGhleSBmaXggaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NjMzODM4XG4gIHZhciBpZ25vcmVLZXkgPSBicm9rZW5Nb2RpZmllck5hbWVzICYmIChldmVudC5jdHJsS2V5IHx8IGV2ZW50LmFsdEtleSB8fCBldmVudC5tZXRhS2V5KSB8fFxuICAgIChzYWZhcmkgfHwgaWUpICYmIGV2ZW50LnNoaWZ0S2V5ICYmIGV2ZW50LmtleSAmJiBldmVudC5rZXkubGVuZ3RoID09IDFcbiAgdmFyIG5hbWUgPSAoIWlnbm9yZUtleSAmJiBldmVudC5rZXkpIHx8XG4gICAgKGV2ZW50LnNoaWZ0S2V5ID8gc2hpZnQgOiBiYXNlKVtldmVudC5rZXlDb2RlXSB8fFxuICAgIGV2ZW50LmtleSB8fCBcIlVuaWRlbnRpZmllZFwiXG4gIC8vIEVkZ2Ugc29tZXRpbWVzIHByb2R1Y2VzIHdyb25nIG5hbWVzIChJc3N1ZSAjMylcbiAgaWYgKG5hbWUgPT0gXCJFc2NcIikgbmFtZSA9IFwiRXNjYXBlXCJcbiAgaWYgKG5hbWUgPT0gXCJEZWxcIikgbmFtZSA9IFwiRGVsZXRlXCJcbiAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubWljcm9zb2Z0LmNvbS9lbi11cy9taWNyb3NvZnQtZWRnZS9wbGF0Zm9ybS9pc3N1ZXMvODg2MDU3MS9cbiAgaWYgKG5hbWUgPT0gXCJMZWZ0XCIpIG5hbWUgPSBcIkFycm93TGVmdFwiXG4gIGlmIChuYW1lID09IFwiVXBcIikgbmFtZSA9IFwiQXJyb3dVcFwiXG4gIGlmIChuYW1lID09IFwiUmlnaHRcIikgbmFtZSA9IFwiQXJyb3dSaWdodFwiXG4gIGlmIChuYW1lID09IFwiRG93blwiKSBuYW1lID0gXCJBcnJvd0Rvd25cIlxuICByZXR1cm4gbmFtZVxufVxuIiwiaW1wb3J0IHsga2V5TmFtZSwgYmFzZSB9IGZyb20gJ3czYy1rZXluYW1lJztcbmltcG9ydCB7IFBsdWdpbiB9IGZyb20gJ3Byb3NlbWlycm9yLXN0YXRlJztcblxuY29uc3QgbWFjID0gdHlwZW9mIG5hdmlnYXRvciAhPSBcInVuZGVmaW5lZFwiID8gL01hY3xpUChob25lfFtvYV1kKS8udGVzdChuYXZpZ2F0b3IucGxhdGZvcm0pIDogZmFsc2U7XG5mdW5jdGlvbiBub3JtYWxpemVLZXlOYW1lKG5hbWUpIHtcbiAgICBsZXQgcGFydHMgPSBuYW1lLnNwbGl0KC8tKD8hJCkvKSwgcmVzdWx0ID0gcGFydHNbcGFydHMubGVuZ3RoIC0gMV07XG4gICAgaWYgKHJlc3VsdCA9PSBcIlNwYWNlXCIpXG4gICAgICAgIHJlc3VsdCA9IFwiIFwiO1xuICAgIGxldCBhbHQsIGN0cmwsIHNoaWZ0LCBtZXRhO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFydHMubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgIGxldCBtb2QgPSBwYXJ0c1tpXTtcbiAgICAgICAgaWYgKC9eKGNtZHxtZXRhfG0pJC9pLnRlc3QobW9kKSlcbiAgICAgICAgICAgIG1ldGEgPSB0cnVlO1xuICAgICAgICBlbHNlIGlmICgvXmEobHQpPyQvaS50ZXN0KG1vZCkpXG4gICAgICAgICAgICBhbHQgPSB0cnVlO1xuICAgICAgICBlbHNlIGlmICgvXihjfGN0cmx8Y29udHJvbCkkL2kudGVzdChtb2QpKVxuICAgICAgICAgICAgY3RybCA9IHRydWU7XG4gICAgICAgIGVsc2UgaWYgKC9ecyhoaWZ0KT8kL2kudGVzdChtb2QpKVxuICAgICAgICAgICAgc2hpZnQgPSB0cnVlO1xuICAgICAgICBlbHNlIGlmICgvXm1vZCQvaS50ZXN0KG1vZCkpIHtcbiAgICAgICAgICAgIGlmIChtYWMpXG4gICAgICAgICAgICAgICAgbWV0YSA9IHRydWU7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgY3RybCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5yZWNvZ25pemVkIG1vZGlmaWVyIG5hbWU6IFwiICsgbW9kKTtcbiAgICB9XG4gICAgaWYgKGFsdClcbiAgICAgICAgcmVzdWx0ID0gXCJBbHQtXCIgKyByZXN1bHQ7XG4gICAgaWYgKGN0cmwpXG4gICAgICAgIHJlc3VsdCA9IFwiQ3RybC1cIiArIHJlc3VsdDtcbiAgICBpZiAobWV0YSlcbiAgICAgICAgcmVzdWx0ID0gXCJNZXRhLVwiICsgcmVzdWx0O1xuICAgIGlmIChzaGlmdClcbiAgICAgICAgcmVzdWx0ID0gXCJTaGlmdC1cIiArIHJlc3VsdDtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gbm9ybWFsaXplKG1hcCkge1xuICAgIGxldCBjb3B5ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICBmb3IgKGxldCBwcm9wIGluIG1hcClcbiAgICAgICAgY29weVtub3JtYWxpemVLZXlOYW1lKHByb3ApXSA9IG1hcFtwcm9wXTtcbiAgICByZXR1cm4gY29weTtcbn1cbmZ1bmN0aW9uIG1vZGlmaWVycyhuYW1lLCBldmVudCwgc2hpZnQpIHtcbiAgICBpZiAoZXZlbnQuYWx0S2V5KVxuICAgICAgICBuYW1lID0gXCJBbHQtXCIgKyBuYW1lO1xuICAgIGlmIChldmVudC5jdHJsS2V5KVxuICAgICAgICBuYW1lID0gXCJDdHJsLVwiICsgbmFtZTtcbiAgICBpZiAoZXZlbnQubWV0YUtleSlcbiAgICAgICAgbmFtZSA9IFwiTWV0YS1cIiArIG5hbWU7XG4gICAgaWYgKHNoaWZ0ICE9PSBmYWxzZSAmJiBldmVudC5zaGlmdEtleSlcbiAgICAgICAgbmFtZSA9IFwiU2hpZnQtXCIgKyBuYW1lO1xuICAgIHJldHVybiBuYW1lO1xufVxuLyoqXG5DcmVhdGUgYSBrZXltYXAgcGx1Z2luIGZvciB0aGUgZ2l2ZW4gc2V0IG9mIGJpbmRpbmdzLlxuXG5CaW5kaW5ncyBzaG91bGQgbWFwIGtleSBuYW1lcyB0byBbY29tbWFuZF0oaHR0cHM6Ly9wcm9zZW1pcnJvci5uZXQvZG9jcy9yZWYvI2NvbW1hbmRzKS1zdHlsZVxuZnVuY3Rpb25zLCB3aGljaCB3aWxsIGJlIGNhbGxlZCB3aXRoIGAoRWRpdG9yU3RhdGUsIGRpc3BhdGNoLFxuRWRpdG9yVmlldylgIGFyZ3VtZW50cywgYW5kIHNob3VsZCByZXR1cm4gdHJ1ZSB3aGVuIHRoZXkndmUgaGFuZGxlZFxudGhlIGtleS4gTm90ZSB0aGF0IHRoZSB2aWV3IGFyZ3VtZW50IGlzbid0IHBhcnQgb2YgdGhlIGNvbW1hbmRcbnByb3RvY29sLCBidXQgY2FuIGJlIHVzZWQgYXMgYW4gZXNjYXBlIGhhdGNoIGlmIGEgYmluZGluZyBuZWVkcyB0b1xuZGlyZWN0bHkgaW50ZXJhY3Qgd2l0aCB0aGUgVUkuXG5cbktleSBuYW1lcyBtYXkgYmUgc3RyaW5ncyBsaWtlIGBcIlNoaWZ0LUN0cmwtRW50ZXJcImDigJRhIGtleVxuaWRlbnRpZmllciBwcmVmaXhlZCB3aXRoIHplcm8gb3IgbW9yZSBtb2RpZmllcnMuIEtleSBpZGVudGlmaWVyc1xuYXJlIGJhc2VkIG9uIHRoZSBzdHJpbmdzIHRoYXQgY2FuIGFwcGVhciBpblxuW2BLZXlFdmVudC5rZXlgXShodHRwczpkZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0tleWJvYXJkRXZlbnQva2V5KS5cblVzZSBsb3dlcmNhc2UgbGV0dGVycyB0byByZWZlciB0byBsZXR0ZXIga2V5cyAob3IgdXBwZXJjYXNlIGxldHRlcnNcbmlmIHlvdSB3YW50IHNoaWZ0IHRvIGJlIGhlbGQpLiBZb3UgbWF5IHVzZSBgXCJTcGFjZVwiYCBhcyBhbiBhbGlhc1xuZm9yIHRoZSBgXCIgXCJgIG5hbWUuXG5cbk1vZGlmaWVycyBjYW4gYmUgZ2l2ZW4gaW4gYW55IG9yZGVyLiBgU2hpZnQtYCAob3IgYHMtYCksIGBBbHQtYCAob3JcbmBhLWApLCBgQ3RybC1gIChvciBgYy1gIG9yIGBDb250cm9sLWApIGFuZCBgQ21kLWAgKG9yIGBtLWAgb3JcbmBNZXRhLWApIGFyZSByZWNvZ25pemVkLiBGb3IgY2hhcmFjdGVycyB0aGF0IGFyZSBjcmVhdGVkIGJ5IGhvbGRpbmdcbnNoaWZ0LCB0aGUgYFNoaWZ0LWAgcHJlZml4IGlzIGltcGxpZWQsIGFuZCBzaG91bGQgbm90IGJlIGFkZGVkXG5leHBsaWNpdGx5LlxuXG5Zb3UgY2FuIHVzZSBgTW9kLWAgYXMgYSBzaG9ydGhhbmQgZm9yIGBDbWQtYCBvbiBNYWMgYW5kIGBDdHJsLWAgb25cbm90aGVyIHBsYXRmb3Jtcy5cblxuWW91IGNhbiBhZGQgbXVsdGlwbGUga2V5bWFwIHBsdWdpbnMgdG8gYW4gZWRpdG9yLiBUaGUgb3JkZXIgaW5cbndoaWNoIHRoZXkgYXBwZWFyIGRldGVybWluZXMgdGhlaXIgcHJlY2VkZW5jZSAodGhlIG9uZXMgZWFybHkgaW5cbnRoZSBhcnJheSBnZXQgdG8gZGlzcGF0Y2ggZmlyc3QpLlxuKi9cbmZ1bmN0aW9uIGtleW1hcChiaW5kaW5ncykge1xuICAgIHJldHVybiBuZXcgUGx1Z2luKHsgcHJvcHM6IHsgaGFuZGxlS2V5RG93bjoga2V5ZG93bkhhbmRsZXIoYmluZGluZ3MpIH0gfSk7XG59XG4vKipcbkdpdmVuIGEgc2V0IG9mIGJpbmRpbmdzICh1c2luZyB0aGUgc2FtZSBmb3JtYXQgYXNcbltga2V5bWFwYF0oaHR0cHM6Ly9wcm9zZW1pcnJvci5uZXQvZG9jcy9yZWYvI2tleW1hcC5rZXltYXApKSwgcmV0dXJuIGEgW2tleWRvd25cbmhhbmRsZXJdKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyN2aWV3LkVkaXRvclByb3BzLmhhbmRsZUtleURvd24pIHRoYXQgaGFuZGxlcyB0aGVtLlxuKi9cbmZ1bmN0aW9uIGtleWRvd25IYW5kbGVyKGJpbmRpbmdzKSB7XG4gICAgbGV0IG1hcCA9IG5vcm1hbGl6ZShiaW5kaW5ncyk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh2aWV3LCBldmVudCkge1xuICAgICAgICBsZXQgbmFtZSA9IGtleU5hbWUoZXZlbnQpLCBpc0NoYXIgPSBuYW1lLmxlbmd0aCA9PSAxICYmIG5hbWUgIT0gXCIgXCIsIGJhc2VOYW1lO1xuICAgICAgICBsZXQgZGlyZWN0ID0gbWFwW21vZGlmaWVycyhuYW1lLCBldmVudCwgIWlzQ2hhcildO1xuICAgICAgICBpZiAoZGlyZWN0ICYmIGRpcmVjdCh2aWV3LnN0YXRlLCB2aWV3LmRpc3BhdGNoLCB2aWV3KSlcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICBpZiAoaXNDaGFyICYmIChldmVudC5zaGlmdEtleSB8fCBldmVudC5hbHRLZXkgfHwgZXZlbnQubWV0YUtleSB8fCBuYW1lLmNoYXJDb2RlQXQoMCkgPiAxMjcpICYmXG4gICAgICAgICAgICAoYmFzZU5hbWUgPSBiYXNlW2V2ZW50LmtleUNvZGVdKSAmJiBiYXNlTmFtZSAhPSBuYW1lKSB7XG4gICAgICAgICAgICAvLyBUcnkgZmFsbGluZyBiYWNrIHRvIHRoZSBrZXlDb2RlIHdoZW4gdGhlcmUncyBhIG1vZGlmaWVyXG4gICAgICAgICAgICAvLyBhY3RpdmUgb3IgdGhlIGNoYXJhY3RlciBwcm9kdWNlZCBpc24ndCBBU0NJSSwgYW5kIG91ciB0YWJsZVxuICAgICAgICAgICAgLy8gcHJvZHVjZXMgYSBkaWZmZXJlbnQgbmFtZSBmcm9tIHRoZSB0aGUga2V5Q29kZS4gU2VlICM2NjgsXG4gICAgICAgICAgICAvLyAjMTA2MFxuICAgICAgICAgICAgbGV0IGZyb21Db2RlID0gbWFwW21vZGlmaWVycyhiYXNlTmFtZSwgZXZlbnQsIHRydWUpXTtcbiAgICAgICAgICAgIGlmIChmcm9tQ29kZSAmJiBmcm9tQ29kZSh2aWV3LnN0YXRlLCB2aWV3LmRpc3BhdGNoLCB2aWV3KSlcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc0NoYXIgJiYgZXZlbnQuc2hpZnRLZXkpIHtcbiAgICAgICAgICAgIC8vIE90aGVyd2lzZSwgaWYgc2hpZnQgaXMgYWN0aXZlLCBhbHNvIHRyeSB0aGUgYmluZGluZyB3aXRoIHRoZVxuICAgICAgICAgICAgLy8gU2hpZnQtIHByZWZpeCBlbmFibGVkLiBTZWUgIzk5N1xuICAgICAgICAgICAgbGV0IHdpdGhTaGlmdCA9IG1hcFttb2RpZmllcnMobmFtZSwgZXZlbnQsIHRydWUpXTtcbiAgICAgICAgICAgIGlmICh3aXRoU2hpZnQgJiYgd2l0aFNoaWZ0KHZpZXcuc3RhdGUsIHZpZXcuZGlzcGF0Y2gsIHZpZXcpKVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xufVxuXG5leHBvcnQgeyBrZXlkb3duSGFuZGxlciwga2V5bWFwIH07XG4iLCJpbXBvcnQgeyBsaWZ0VGFyZ2V0LCByZXBsYWNlU3RlcCwgY2FuSm9pbiwgam9pblBvaW50LCBjYW5TcGxpdCwgUmVwbGFjZUFyb3VuZFN0ZXAsIGZpbmRXcmFwcGluZyB9IGZyb20gJ3Byb3NlbWlycm9yLXRyYW5zZm9ybSc7XG5pbXBvcnQgeyBTbGljZSwgRnJhZ21lbnQgfSBmcm9tICdwcm9zZW1pcnJvci1tb2RlbCc7XG5pbXBvcnQgeyBOb2RlU2VsZWN0aW9uLCBTZWxlY3Rpb24sIEFsbFNlbGVjdGlvbiwgVGV4dFNlbGVjdGlvbiB9IGZyb20gJ3Byb3NlbWlycm9yLXN0YXRlJztcblxuLyoqXG5EZWxldGUgdGhlIHNlbGVjdGlvbiwgaWYgdGhlcmUgaXMgb25lLlxuKi9cbmNvbnN0IGRlbGV0ZVNlbGVjdGlvbiA9IChzdGF0ZSwgZGlzcGF0Y2gpID0+IHtcbiAgICBpZiAoc3RhdGUuc2VsZWN0aW9uLmVtcHR5KVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgaWYgKGRpc3BhdGNoKVxuICAgICAgICBkaXNwYXRjaChzdGF0ZS50ci5kZWxldGVTZWxlY3Rpb24oKS5zY3JvbGxJbnRvVmlldygpKTtcbiAgICByZXR1cm4gdHJ1ZTtcbn07XG4vKipcbklmIHRoZSBzZWxlY3Rpb24gaXMgZW1wdHkgYW5kIGF0IHRoZSBzdGFydCBvZiBhIHRleHRibG9jaywgdHJ5IHRvXG5yZWR1Y2UgdGhlIGRpc3RhbmNlIGJldHdlZW4gdGhhdCBibG9jayBhbmQgdGhlIG9uZSBiZWZvcmUgaXTigJRpZlxudGhlcmUncyBhIGJsb2NrIGRpcmVjdGx5IGJlZm9yZSBpdCB0aGF0IGNhbiBiZSBqb2luZWQsIGpvaW4gdGhlbS5cbklmIG5vdCwgdHJ5IHRvIG1vdmUgdGhlIHNlbGVjdGVkIGJsb2NrIGNsb3NlciB0byB0aGUgbmV4dCBvbmUgaW5cbnRoZSBkb2N1bWVudCBzdHJ1Y3R1cmUgYnkgbGlmdGluZyBpdCBvdXQgb2YgaXRzIHBhcmVudCBvciBtb3ZpbmcgaXRcbmludG8gYSBwYXJlbnQgb2YgdGhlIHByZXZpb3VzIGJsb2NrLiBXaWxsIHVzZSB0aGUgdmlldyBmb3IgYWNjdXJhdGVcbihiaWRpLWF3YXJlKSBzdGFydC1vZi10ZXh0YmxvY2sgZGV0ZWN0aW9uIGlmIGdpdmVuLlxuKi9cbmNvbnN0IGpvaW5CYWNrd2FyZCA9IChzdGF0ZSwgZGlzcGF0Y2gsIHZpZXcpID0+IHtcbiAgICBsZXQgeyAkY3Vyc29yIH0gPSBzdGF0ZS5zZWxlY3Rpb247XG4gICAgaWYgKCEkY3Vyc29yIHx8ICh2aWV3ID8gIXZpZXcuZW5kT2ZUZXh0YmxvY2soXCJiYWNrd2FyZFwiLCBzdGF0ZSlcbiAgICAgICAgOiAkY3Vyc29yLnBhcmVudE9mZnNldCA+IDApKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgbGV0ICRjdXQgPSBmaW5kQ3V0QmVmb3JlKCRjdXJzb3IpO1xuICAgIC8vIElmIHRoZXJlIGlzIG5vIG5vZGUgYmVmb3JlIHRoaXMsIHRyeSB0byBsaWZ0XG4gICAgaWYgKCEkY3V0KSB7XG4gICAgICAgIGxldCByYW5nZSA9ICRjdXJzb3IuYmxvY2tSYW5nZSgpLCB0YXJnZXQgPSByYW5nZSAmJiBsaWZ0VGFyZ2V0KHJhbmdlKTtcbiAgICAgICAgaWYgKHRhcmdldCA9PSBudWxsKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAoZGlzcGF0Y2gpXG4gICAgICAgICAgICBkaXNwYXRjaChzdGF0ZS50ci5saWZ0KHJhbmdlLCB0YXJnZXQpLnNjcm9sbEludG9WaWV3KCkpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgbGV0IGJlZm9yZSA9ICRjdXQubm9kZUJlZm9yZTtcbiAgICAvLyBBcHBseSB0aGUgam9pbmluZyBhbGdvcml0aG1cbiAgICBpZiAoIWJlZm9yZS50eXBlLnNwZWMuaXNvbGF0aW5nICYmIGRlbGV0ZUJhcnJpZXIoc3RhdGUsICRjdXQsIGRpc3BhdGNoKSlcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgLy8gSWYgdGhlIG5vZGUgYmVsb3cgaGFzIG5vIGNvbnRlbnQgYW5kIHRoZSBub2RlIGFib3ZlIGlzXG4gICAgLy8gc2VsZWN0YWJsZSwgZGVsZXRlIHRoZSBub2RlIGJlbG93IGFuZCBzZWxlY3QgdGhlIG9uZSBhYm92ZS5cbiAgICBpZiAoJGN1cnNvci5wYXJlbnQuY29udGVudC5zaXplID09IDAgJiZcbiAgICAgICAgKHRleHRibG9ja0F0KGJlZm9yZSwgXCJlbmRcIikgfHwgTm9kZVNlbGVjdGlvbi5pc1NlbGVjdGFibGUoYmVmb3JlKSkpIHtcbiAgICAgICAgbGV0IGRlbFN0ZXAgPSByZXBsYWNlU3RlcChzdGF0ZS5kb2MsICRjdXJzb3IuYmVmb3JlKCksICRjdXJzb3IuYWZ0ZXIoKSwgU2xpY2UuZW1wdHkpO1xuICAgICAgICBpZiAoZGVsU3RlcCAmJiBkZWxTdGVwLnNsaWNlLnNpemUgPCBkZWxTdGVwLnRvIC0gZGVsU3RlcC5mcm9tKSB7XG4gICAgICAgICAgICBpZiAoZGlzcGF0Y2gpIHtcbiAgICAgICAgICAgICAgICBsZXQgdHIgPSBzdGF0ZS50ci5zdGVwKGRlbFN0ZXApO1xuICAgICAgICAgICAgICAgIHRyLnNldFNlbGVjdGlvbih0ZXh0YmxvY2tBdChiZWZvcmUsIFwiZW5kXCIpID8gU2VsZWN0aW9uLmZpbmRGcm9tKHRyLmRvYy5yZXNvbHZlKHRyLm1hcHBpbmcubWFwKCRjdXQucG9zLCAtMSkpLCAtMSlcbiAgICAgICAgICAgICAgICAgICAgOiBOb2RlU2VsZWN0aW9uLmNyZWF0ZSh0ci5kb2MsICRjdXQucG9zIC0gYmVmb3JlLm5vZGVTaXplKSk7XG4gICAgICAgICAgICAgICAgZGlzcGF0Y2godHIuc2Nyb2xsSW50b1ZpZXcoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBJZiB0aGUgbm9kZSBiZWZvcmUgaXMgYW4gYXRvbSwgZGVsZXRlIGl0XG4gICAgaWYgKGJlZm9yZS5pc0F0b20gJiYgJGN1dC5kZXB0aCA9PSAkY3Vyc29yLmRlcHRoIC0gMSkge1xuICAgICAgICBpZiAoZGlzcGF0Y2gpXG4gICAgICAgICAgICBkaXNwYXRjaChzdGF0ZS50ci5kZWxldGUoJGN1dC5wb3MgLSBiZWZvcmUubm9kZVNpemUsICRjdXQucG9zKS5zY3JvbGxJbnRvVmlldygpKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn07XG5mdW5jdGlvbiB0ZXh0YmxvY2tBdChub2RlLCBzaWRlLCBvbmx5ID0gZmFsc2UpIHtcbiAgICBmb3IgKGxldCBzY2FuID0gbm9kZTsgc2Nhbjsgc2NhbiA9IChzaWRlID09IFwic3RhcnRcIiA/IHNjYW4uZmlyc3RDaGlsZCA6IHNjYW4ubGFzdENoaWxkKSkge1xuICAgICAgICBpZiAoc2Nhbi5pc1RleHRibG9jaylcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICBpZiAob25seSAmJiBzY2FuLmNoaWxkQ291bnQgIT0gMSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuLyoqXG5XaGVuIHRoZSBzZWxlY3Rpb24gaXMgZW1wdHkgYW5kIGF0IHRoZSBzdGFydCBvZiBhIHRleHRibG9jaywgc2VsZWN0XG50aGUgbm9kZSBiZWZvcmUgdGhhdCB0ZXh0YmxvY2ssIGlmIHBvc3NpYmxlLiBUaGlzIGlzIGludGVuZGVkIHRvIGJlXG5ib3VuZCB0byBrZXlzIGxpa2UgYmFja3NwYWNlLCBhZnRlclxuW2Bqb2luQmFja3dhcmRgXShodHRwczovL3Byb3NlbWlycm9yLm5ldC9kb2NzL3JlZi8jY29tbWFuZHMuam9pbkJhY2t3YXJkKSBvciBvdGhlciBkZWxldGluZ1xuY29tbWFuZHMsIGFzIGEgZmFsbC1iYWNrIGJlaGF2aW9yIHdoZW4gdGhlIHNjaGVtYSBkb2Vzbid0IGFsbG93XG5kZWxldGlvbiBhdCB0aGUgc2VsZWN0ZWQgcG9pbnQuXG4qL1xuY29uc3Qgc2VsZWN0Tm9kZUJhY2t3YXJkID0gKHN0YXRlLCBkaXNwYXRjaCwgdmlldykgPT4ge1xuICAgIGxldCB7ICRoZWFkLCBlbXB0eSB9ID0gc3RhdGUuc2VsZWN0aW9uLCAkY3V0ID0gJGhlYWQ7XG4gICAgaWYgKCFlbXB0eSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGlmICgkaGVhZC5wYXJlbnQuaXNUZXh0YmxvY2spIHtcbiAgICAgICAgaWYgKHZpZXcgPyAhdmlldy5lbmRPZlRleHRibG9jayhcImJhY2t3YXJkXCIsIHN0YXRlKSA6ICRoZWFkLnBhcmVudE9mZnNldCA+IDApXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICRjdXQgPSBmaW5kQ3V0QmVmb3JlKCRoZWFkKTtcbiAgICB9XG4gICAgbGV0IG5vZGUgPSAkY3V0ICYmICRjdXQubm9kZUJlZm9yZTtcbiAgICBpZiAoIW5vZGUgfHwgIU5vZGVTZWxlY3Rpb24uaXNTZWxlY3RhYmxlKG5vZGUpKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgaWYgKGRpc3BhdGNoKVxuICAgICAgICBkaXNwYXRjaChzdGF0ZS50ci5zZXRTZWxlY3Rpb24oTm9kZVNlbGVjdGlvbi5jcmVhdGUoc3RhdGUuZG9jLCAkY3V0LnBvcyAtIG5vZGUubm9kZVNpemUpKS5zY3JvbGxJbnRvVmlldygpKTtcbiAgICByZXR1cm4gdHJ1ZTtcbn07XG5mdW5jdGlvbiBmaW5kQ3V0QmVmb3JlKCRwb3MpIHtcbiAgICBpZiAoISRwb3MucGFyZW50LnR5cGUuc3BlYy5pc29sYXRpbmcpXG4gICAgICAgIGZvciAobGV0IGkgPSAkcG9zLmRlcHRoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgIGlmICgkcG9zLmluZGV4KGkpID4gMClcbiAgICAgICAgICAgICAgICByZXR1cm4gJHBvcy5kb2MucmVzb2x2ZSgkcG9zLmJlZm9yZShpICsgMSkpO1xuICAgICAgICAgICAgaWYgKCRwb3Mubm9kZShpKS50eXBlLnNwZWMuaXNvbGF0aW5nKVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG4vKipcbklmIHRoZSBzZWxlY3Rpb24gaXMgZW1wdHkgYW5kIHRoZSBjdXJzb3IgaXMgYXQgdGhlIGVuZCBvZiBhXG50ZXh0YmxvY2ssIHRyeSB0byByZWR1Y2Ugb3IgcmVtb3ZlIHRoZSBib3VuZGFyeSBiZXR3ZWVuIHRoYXQgYmxvY2tcbmFuZCB0aGUgb25lIGFmdGVyIGl0LCBlaXRoZXIgYnkgam9pbmluZyB0aGVtIG9yIGJ5IG1vdmluZyB0aGUgb3RoZXJcbmJsb2NrIGNsb3NlciB0byB0aGlzIG9uZSBpbiB0aGUgdHJlZSBzdHJ1Y3R1cmUuIFdpbGwgdXNlIHRoZSB2aWV3XG5mb3IgYWNjdXJhdGUgc3RhcnQtb2YtdGV4dGJsb2NrIGRldGVjdGlvbiBpZiBnaXZlbi5cbiovXG5jb25zdCBqb2luRm9yd2FyZCA9IChzdGF0ZSwgZGlzcGF0Y2gsIHZpZXcpID0+IHtcbiAgICBsZXQgeyAkY3Vyc29yIH0gPSBzdGF0ZS5zZWxlY3Rpb247XG4gICAgaWYgKCEkY3Vyc29yIHx8ICh2aWV3ID8gIXZpZXcuZW5kT2ZUZXh0YmxvY2soXCJmb3J3YXJkXCIsIHN0YXRlKVxuICAgICAgICA6ICRjdXJzb3IucGFyZW50T2Zmc2V0IDwgJGN1cnNvci5wYXJlbnQuY29udGVudC5zaXplKSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGxldCAkY3V0ID0gZmluZEN1dEFmdGVyKCRjdXJzb3IpO1xuICAgIC8vIElmIHRoZXJlIGlzIG5vIG5vZGUgYWZ0ZXIgdGhpcywgdGhlcmUncyBub3RoaW5nIHRvIGRvXG4gICAgaWYgKCEkY3V0KVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgbGV0IGFmdGVyID0gJGN1dC5ub2RlQWZ0ZXI7XG4gICAgLy8gVHJ5IHRoZSBqb2luaW5nIGFsZ29yaXRobVxuICAgIGlmIChkZWxldGVCYXJyaWVyKHN0YXRlLCAkY3V0LCBkaXNwYXRjaCkpXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIC8vIElmIHRoZSBub2RlIGFib3ZlIGhhcyBubyBjb250ZW50IGFuZCB0aGUgbm9kZSBiZWxvdyBpc1xuICAgIC8vIHNlbGVjdGFibGUsIGRlbGV0ZSB0aGUgbm9kZSBhYm92ZSBhbmQgc2VsZWN0IHRoZSBvbmUgYmVsb3cuXG4gICAgaWYgKCRjdXJzb3IucGFyZW50LmNvbnRlbnQuc2l6ZSA9PSAwICYmXG4gICAgICAgICh0ZXh0YmxvY2tBdChhZnRlciwgXCJzdGFydFwiKSB8fCBOb2RlU2VsZWN0aW9uLmlzU2VsZWN0YWJsZShhZnRlcikpKSB7XG4gICAgICAgIGxldCBkZWxTdGVwID0gcmVwbGFjZVN0ZXAoc3RhdGUuZG9jLCAkY3Vyc29yLmJlZm9yZSgpLCAkY3Vyc29yLmFmdGVyKCksIFNsaWNlLmVtcHR5KTtcbiAgICAgICAgaWYgKGRlbFN0ZXAgJiYgZGVsU3RlcC5zbGljZS5zaXplIDwgZGVsU3RlcC50byAtIGRlbFN0ZXAuZnJvbSkge1xuICAgICAgICAgICAgaWYgKGRpc3BhdGNoKSB7XG4gICAgICAgICAgICAgICAgbGV0IHRyID0gc3RhdGUudHIuc3RlcChkZWxTdGVwKTtcbiAgICAgICAgICAgICAgICB0ci5zZXRTZWxlY3Rpb24odGV4dGJsb2NrQXQoYWZ0ZXIsIFwic3RhcnRcIikgPyBTZWxlY3Rpb24uZmluZEZyb20odHIuZG9jLnJlc29sdmUodHIubWFwcGluZy5tYXAoJGN1dC5wb3MpKSwgMSlcbiAgICAgICAgICAgICAgICAgICAgOiBOb2RlU2VsZWN0aW9uLmNyZWF0ZSh0ci5kb2MsIHRyLm1hcHBpbmcubWFwKCRjdXQucG9zKSkpO1xuICAgICAgICAgICAgICAgIGRpc3BhdGNoKHRyLnNjcm9sbEludG9WaWV3KCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gSWYgdGhlIG5leHQgbm9kZSBpcyBhbiBhdG9tLCBkZWxldGUgaXRcbiAgICBpZiAoYWZ0ZXIuaXNBdG9tICYmICRjdXQuZGVwdGggPT0gJGN1cnNvci5kZXB0aCAtIDEpIHtcbiAgICAgICAgaWYgKGRpc3BhdGNoKVxuICAgICAgICAgICAgZGlzcGF0Y2goc3RhdGUudHIuZGVsZXRlKCRjdXQucG9zLCAkY3V0LnBvcyArIGFmdGVyLm5vZGVTaXplKS5zY3JvbGxJbnRvVmlldygpKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn07XG4vKipcbldoZW4gdGhlIHNlbGVjdGlvbiBpcyBlbXB0eSBhbmQgYXQgdGhlIGVuZCBvZiBhIHRleHRibG9jaywgc2VsZWN0XG50aGUgbm9kZSBjb21pbmcgYWZ0ZXIgdGhhdCB0ZXh0YmxvY2ssIGlmIHBvc3NpYmxlLiBUaGlzIGlzIGludGVuZGVkXG50byBiZSBib3VuZCB0byBrZXlzIGxpa2UgZGVsZXRlLCBhZnRlclxuW2Bqb2luRm9yd2FyZGBdKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyNjb21tYW5kcy5qb2luRm9yd2FyZCkgYW5kIHNpbWlsYXIgZGVsZXRpbmdcbmNvbW1hbmRzLCB0byBwcm92aWRlIGEgZmFsbC1iYWNrIGJlaGF2aW9yIHdoZW4gdGhlIHNjaGVtYSBkb2Vzbid0XG5hbGxvdyBkZWxldGlvbiBhdCB0aGUgc2VsZWN0ZWQgcG9pbnQuXG4qL1xuY29uc3Qgc2VsZWN0Tm9kZUZvcndhcmQgPSAoc3RhdGUsIGRpc3BhdGNoLCB2aWV3KSA9PiB7XG4gICAgbGV0IHsgJGhlYWQsIGVtcHR5IH0gPSBzdGF0ZS5zZWxlY3Rpb24sICRjdXQgPSAkaGVhZDtcbiAgICBpZiAoIWVtcHR5KVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgaWYgKCRoZWFkLnBhcmVudC5pc1RleHRibG9jaykge1xuICAgICAgICBpZiAodmlldyA/ICF2aWV3LmVuZE9mVGV4dGJsb2NrKFwiZm9yd2FyZFwiLCBzdGF0ZSkgOiAkaGVhZC5wYXJlbnRPZmZzZXQgPCAkaGVhZC5wYXJlbnQuY29udGVudC5zaXplKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAkY3V0ID0gZmluZEN1dEFmdGVyKCRoZWFkKTtcbiAgICB9XG4gICAgbGV0IG5vZGUgPSAkY3V0ICYmICRjdXQubm9kZUFmdGVyO1xuICAgIGlmICghbm9kZSB8fCAhTm9kZVNlbGVjdGlvbi5pc1NlbGVjdGFibGUobm9kZSkpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBpZiAoZGlzcGF0Y2gpXG4gICAgICAgIGRpc3BhdGNoKHN0YXRlLnRyLnNldFNlbGVjdGlvbihOb2RlU2VsZWN0aW9uLmNyZWF0ZShzdGF0ZS5kb2MsICRjdXQucG9zKSkuc2Nyb2xsSW50b1ZpZXcoKSk7XG4gICAgcmV0dXJuIHRydWU7XG59O1xuZnVuY3Rpb24gZmluZEN1dEFmdGVyKCRwb3MpIHtcbiAgICBpZiAoISRwb3MucGFyZW50LnR5cGUuc3BlYy5pc29sYXRpbmcpXG4gICAgICAgIGZvciAobGV0IGkgPSAkcG9zLmRlcHRoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgIGxldCBwYXJlbnQgPSAkcG9zLm5vZGUoaSk7XG4gICAgICAgICAgICBpZiAoJHBvcy5pbmRleChpKSArIDEgPCBwYXJlbnQuY2hpbGRDb3VudClcbiAgICAgICAgICAgICAgICByZXR1cm4gJHBvcy5kb2MucmVzb2x2ZSgkcG9zLmFmdGVyKGkgKyAxKSk7XG4gICAgICAgICAgICBpZiAocGFyZW50LnR5cGUuc3BlYy5pc29sYXRpbmcpXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbi8qKlxuSm9pbiB0aGUgc2VsZWN0ZWQgYmxvY2sgb3IsIGlmIHRoZXJlIGlzIGEgdGV4dCBzZWxlY3Rpb24sIHRoZVxuY2xvc2VzdCBhbmNlc3RvciBibG9jayBvZiB0aGUgc2VsZWN0aW9uIHRoYXQgY2FuIGJlIGpvaW5lZCwgd2l0aFxudGhlIHNpYmxpbmcgYWJvdmUgaXQuXG4qL1xuY29uc3Qgam9pblVwID0gKHN0YXRlLCBkaXNwYXRjaCkgPT4ge1xuICAgIGxldCBzZWwgPSBzdGF0ZS5zZWxlY3Rpb24sIG5vZGVTZWwgPSBzZWwgaW5zdGFuY2VvZiBOb2RlU2VsZWN0aW9uLCBwb2ludDtcbiAgICBpZiAobm9kZVNlbCkge1xuICAgICAgICBpZiAoc2VsLm5vZGUuaXNUZXh0YmxvY2sgfHwgIWNhbkpvaW4oc3RhdGUuZG9jLCBzZWwuZnJvbSkpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIHBvaW50ID0gc2VsLmZyb207XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBwb2ludCA9IGpvaW5Qb2ludChzdGF0ZS5kb2MsIHNlbC5mcm9tLCAtMSk7XG4gICAgICAgIGlmIChwb2ludCA9PSBudWxsKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoZGlzcGF0Y2gpIHtcbiAgICAgICAgbGV0IHRyID0gc3RhdGUudHIuam9pbihwb2ludCk7XG4gICAgICAgIGlmIChub2RlU2VsKVxuICAgICAgICAgICAgdHIuc2V0U2VsZWN0aW9uKE5vZGVTZWxlY3Rpb24uY3JlYXRlKHRyLmRvYywgcG9pbnQgLSBzdGF0ZS5kb2MucmVzb2x2ZShwb2ludCkubm9kZUJlZm9yZS5ub2RlU2l6ZSkpO1xuICAgICAgICBkaXNwYXRjaCh0ci5zY3JvbGxJbnRvVmlldygpKTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59O1xuLyoqXG5Kb2luIHRoZSBzZWxlY3RlZCBibG9jaywgb3IgdGhlIGNsb3Nlc3QgYW5jZXN0b3Igb2YgdGhlIHNlbGVjdGlvblxudGhhdCBjYW4gYmUgam9pbmVkLCB3aXRoIHRoZSBzaWJsaW5nIGFmdGVyIGl0LlxuKi9cbmNvbnN0IGpvaW5Eb3duID0gKHN0YXRlLCBkaXNwYXRjaCkgPT4ge1xuICAgIGxldCBzZWwgPSBzdGF0ZS5zZWxlY3Rpb24sIHBvaW50O1xuICAgIGlmIChzZWwgaW5zdGFuY2VvZiBOb2RlU2VsZWN0aW9uKSB7XG4gICAgICAgIGlmIChzZWwubm9kZS5pc1RleHRibG9jayB8fCAhY2FuSm9pbihzdGF0ZS5kb2MsIHNlbC50bykpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIHBvaW50ID0gc2VsLnRvO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcG9pbnQgPSBqb2luUG9pbnQoc3RhdGUuZG9jLCBzZWwudG8sIDEpO1xuICAgICAgICBpZiAocG9pbnQgPT0gbnVsbClcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGRpc3BhdGNoKVxuICAgICAgICBkaXNwYXRjaChzdGF0ZS50ci5qb2luKHBvaW50KS5zY3JvbGxJbnRvVmlldygpKTtcbiAgICByZXR1cm4gdHJ1ZTtcbn07XG4vKipcbkxpZnQgdGhlIHNlbGVjdGVkIGJsb2NrLCBvciB0aGUgY2xvc2VzdCBhbmNlc3RvciBibG9jayBvZiB0aGVcbnNlbGVjdGlvbiB0aGF0IGNhbiBiZSBsaWZ0ZWQsIG91dCBvZiBpdHMgcGFyZW50IG5vZGUuXG4qL1xuY29uc3QgbGlmdCA9IChzdGF0ZSwgZGlzcGF0Y2gpID0+IHtcbiAgICBsZXQgeyAkZnJvbSwgJHRvIH0gPSBzdGF0ZS5zZWxlY3Rpb247XG4gICAgbGV0IHJhbmdlID0gJGZyb20uYmxvY2tSYW5nZSgkdG8pLCB0YXJnZXQgPSByYW5nZSAmJiBsaWZ0VGFyZ2V0KHJhbmdlKTtcbiAgICBpZiAodGFyZ2V0ID09IG51bGwpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBpZiAoZGlzcGF0Y2gpXG4gICAgICAgIGRpc3BhdGNoKHN0YXRlLnRyLmxpZnQocmFuZ2UsIHRhcmdldCkuc2Nyb2xsSW50b1ZpZXcoKSk7XG4gICAgcmV0dXJuIHRydWU7XG59O1xuLyoqXG5JZiB0aGUgc2VsZWN0aW9uIGlzIGluIGEgbm9kZSB3aG9zZSB0eXBlIGhhcyBhIHRydXRoeVxuW2Bjb2RlYF0oaHR0cHM6Ly9wcm9zZW1pcnJvci5uZXQvZG9jcy9yZWYvI21vZGVsLk5vZGVTcGVjLmNvZGUpIHByb3BlcnR5IGluIGl0cyBzcGVjLCByZXBsYWNlIHRoZVxuc2VsZWN0aW9uIHdpdGggYSBuZXdsaW5lIGNoYXJhY3Rlci5cbiovXG5jb25zdCBuZXdsaW5lSW5Db2RlID0gKHN0YXRlLCBkaXNwYXRjaCkgPT4ge1xuICAgIGxldCB7ICRoZWFkLCAkYW5jaG9yIH0gPSBzdGF0ZS5zZWxlY3Rpb247XG4gICAgaWYgKCEkaGVhZC5wYXJlbnQudHlwZS5zcGVjLmNvZGUgfHwgISRoZWFkLnNhbWVQYXJlbnQoJGFuY2hvcikpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBpZiAoZGlzcGF0Y2gpXG4gICAgICAgIGRpc3BhdGNoKHN0YXRlLnRyLmluc2VydFRleHQoXCJcXG5cIikuc2Nyb2xsSW50b1ZpZXcoKSk7XG4gICAgcmV0dXJuIHRydWU7XG59O1xuZnVuY3Rpb24gZGVmYXVsdEJsb2NrQXQobWF0Y2gpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1hdGNoLmVkZ2VDb3VudDsgaSsrKSB7XG4gICAgICAgIGxldCB7IHR5cGUgfSA9IG1hdGNoLmVkZ2UoaSk7XG4gICAgICAgIGlmICh0eXBlLmlzVGV4dGJsb2NrICYmICF0eXBlLmhhc1JlcXVpcmVkQXR0cnMoKSlcbiAgICAgICAgICAgIHJldHVybiB0eXBlO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbi8qKlxuV2hlbiB0aGUgc2VsZWN0aW9uIGlzIGluIGEgbm9kZSB3aXRoIGEgdHJ1dGh5XG5bYGNvZGVgXShodHRwczovL3Byb3NlbWlycm9yLm5ldC9kb2NzL3JlZi8jbW9kZWwuTm9kZVNwZWMuY29kZSkgcHJvcGVydHkgaW4gaXRzIHNwZWMsIGNyZWF0ZSBhXG5kZWZhdWx0IGJsb2NrIGFmdGVyIHRoZSBjb2RlIGJsb2NrLCBhbmQgbW92ZSB0aGUgY3Vyc29yIHRoZXJlLlxuKi9cbmNvbnN0IGV4aXRDb2RlID0gKHN0YXRlLCBkaXNwYXRjaCkgPT4ge1xuICAgIGxldCB7ICRoZWFkLCAkYW5jaG9yIH0gPSBzdGF0ZS5zZWxlY3Rpb247XG4gICAgaWYgKCEkaGVhZC5wYXJlbnQudHlwZS5zcGVjLmNvZGUgfHwgISRoZWFkLnNhbWVQYXJlbnQoJGFuY2hvcikpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBsZXQgYWJvdmUgPSAkaGVhZC5ub2RlKC0xKSwgYWZ0ZXIgPSAkaGVhZC5pbmRleEFmdGVyKC0xKSwgdHlwZSA9IGRlZmF1bHRCbG9ja0F0KGFib3ZlLmNvbnRlbnRNYXRjaEF0KGFmdGVyKSk7XG4gICAgaWYgKCF0eXBlIHx8ICFhYm92ZS5jYW5SZXBsYWNlV2l0aChhZnRlciwgYWZ0ZXIsIHR5cGUpKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgaWYgKGRpc3BhdGNoKSB7XG4gICAgICAgIGxldCBwb3MgPSAkaGVhZC5hZnRlcigpLCB0ciA9IHN0YXRlLnRyLnJlcGxhY2VXaXRoKHBvcywgcG9zLCB0eXBlLmNyZWF0ZUFuZEZpbGwoKSk7XG4gICAgICAgIHRyLnNldFNlbGVjdGlvbihTZWxlY3Rpb24ubmVhcih0ci5kb2MucmVzb2x2ZShwb3MpLCAxKSk7XG4gICAgICAgIGRpc3BhdGNoKHRyLnNjcm9sbEludG9WaWV3KCkpO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn07XG4vKipcbklmIGEgYmxvY2sgbm9kZSBpcyBzZWxlY3RlZCwgY3JlYXRlIGFuIGVtcHR5IHBhcmFncmFwaCBiZWZvcmUgKGlmXG5pdCBpcyBpdHMgcGFyZW50J3MgZmlyc3QgY2hpbGQpIG9yIGFmdGVyIGl0LlxuKi9cbmNvbnN0IGNyZWF0ZVBhcmFncmFwaE5lYXIgPSAoc3RhdGUsIGRpc3BhdGNoKSA9PiB7XG4gICAgbGV0IHNlbCA9IHN0YXRlLnNlbGVjdGlvbiwgeyAkZnJvbSwgJHRvIH0gPSBzZWw7XG4gICAgaWYgKHNlbCBpbnN0YW5jZW9mIEFsbFNlbGVjdGlvbiB8fCAkZnJvbS5wYXJlbnQuaW5saW5lQ29udGVudCB8fCAkdG8ucGFyZW50LmlubGluZUNvbnRlbnQpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBsZXQgdHlwZSA9IGRlZmF1bHRCbG9ja0F0KCR0by5wYXJlbnQuY29udGVudE1hdGNoQXQoJHRvLmluZGV4QWZ0ZXIoKSkpO1xuICAgIGlmICghdHlwZSB8fCAhdHlwZS5pc1RleHRibG9jaylcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChkaXNwYXRjaCkge1xuICAgICAgICBsZXQgc2lkZSA9ICghJGZyb20ucGFyZW50T2Zmc2V0ICYmICR0by5pbmRleCgpIDwgJHRvLnBhcmVudC5jaGlsZENvdW50ID8gJGZyb20gOiAkdG8pLnBvcztcbiAgICAgICAgbGV0IHRyID0gc3RhdGUudHIuaW5zZXJ0KHNpZGUsIHR5cGUuY3JlYXRlQW5kRmlsbCgpKTtcbiAgICAgICAgdHIuc2V0U2VsZWN0aW9uKFRleHRTZWxlY3Rpb24uY3JlYXRlKHRyLmRvYywgc2lkZSArIDEpKTtcbiAgICAgICAgZGlzcGF0Y2godHIuc2Nyb2xsSW50b1ZpZXcoKSk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufTtcbi8qKlxuSWYgdGhlIGN1cnNvciBpcyBpbiBhbiBlbXB0eSB0ZXh0YmxvY2sgdGhhdCBjYW4gYmUgbGlmdGVkLCBsaWZ0IHRoZVxuYmxvY2suXG4qL1xuY29uc3QgbGlmdEVtcHR5QmxvY2sgPSAoc3RhdGUsIGRpc3BhdGNoKSA9PiB7XG4gICAgbGV0IHsgJGN1cnNvciB9ID0gc3RhdGUuc2VsZWN0aW9uO1xuICAgIGlmICghJGN1cnNvciB8fCAkY3Vyc29yLnBhcmVudC5jb250ZW50LnNpemUpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBpZiAoJGN1cnNvci5kZXB0aCA+IDEgJiYgJGN1cnNvci5hZnRlcigpICE9ICRjdXJzb3IuZW5kKC0xKSkge1xuICAgICAgICBsZXQgYmVmb3JlID0gJGN1cnNvci5iZWZvcmUoKTtcbiAgICAgICAgaWYgKGNhblNwbGl0KHN0YXRlLmRvYywgYmVmb3JlKSkge1xuICAgICAgICAgICAgaWYgKGRpc3BhdGNoKVxuICAgICAgICAgICAgICAgIGRpc3BhdGNoKHN0YXRlLnRyLnNwbGl0KGJlZm9yZSkuc2Nyb2xsSW50b1ZpZXcoKSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBsZXQgcmFuZ2UgPSAkY3Vyc29yLmJsb2NrUmFuZ2UoKSwgdGFyZ2V0ID0gcmFuZ2UgJiYgbGlmdFRhcmdldChyYW5nZSk7XG4gICAgaWYgKHRhcmdldCA9PSBudWxsKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgaWYgKGRpc3BhdGNoKVxuICAgICAgICBkaXNwYXRjaChzdGF0ZS50ci5saWZ0KHJhbmdlLCB0YXJnZXQpLnNjcm9sbEludG9WaWV3KCkpO1xuICAgIHJldHVybiB0cnVlO1xufTtcbi8qKlxuU3BsaXQgdGhlIHBhcmVudCBibG9jayBvZiB0aGUgc2VsZWN0aW9uLiBJZiB0aGUgc2VsZWN0aW9uIGlzIGEgdGV4dFxuc2VsZWN0aW9uLCBhbHNvIGRlbGV0ZSBpdHMgY29udGVudC5cbiovXG5jb25zdCBzcGxpdEJsb2NrID0gKHN0YXRlLCBkaXNwYXRjaCkgPT4ge1xuICAgIGxldCB7ICRmcm9tLCAkdG8gfSA9IHN0YXRlLnNlbGVjdGlvbjtcbiAgICBpZiAoc3RhdGUuc2VsZWN0aW9uIGluc3RhbmNlb2YgTm9kZVNlbGVjdGlvbiAmJiBzdGF0ZS5zZWxlY3Rpb24ubm9kZS5pc0Jsb2NrKSB7XG4gICAgICAgIGlmICghJGZyb20ucGFyZW50T2Zmc2V0IHx8ICFjYW5TcGxpdChzdGF0ZS5kb2MsICRmcm9tLnBvcykpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGlmIChkaXNwYXRjaClcbiAgICAgICAgICAgIGRpc3BhdGNoKHN0YXRlLnRyLnNwbGl0KCRmcm9tLnBvcykuc2Nyb2xsSW50b1ZpZXcoKSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoISRmcm9tLnBhcmVudC5pc0Jsb2NrKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgaWYgKGRpc3BhdGNoKSB7XG4gICAgICAgIGxldCBhdEVuZCA9ICR0by5wYXJlbnRPZmZzZXQgPT0gJHRvLnBhcmVudC5jb250ZW50LnNpemU7XG4gICAgICAgIGxldCB0ciA9IHN0YXRlLnRyO1xuICAgICAgICBpZiAoc3RhdGUuc2VsZWN0aW9uIGluc3RhbmNlb2YgVGV4dFNlbGVjdGlvbiB8fCBzdGF0ZS5zZWxlY3Rpb24gaW5zdGFuY2VvZiBBbGxTZWxlY3Rpb24pXG4gICAgICAgICAgICB0ci5kZWxldGVTZWxlY3Rpb24oKTtcbiAgICAgICAgbGV0IGRlZmx0ID0gJGZyb20uZGVwdGggPT0gMCA/IG51bGwgOiBkZWZhdWx0QmxvY2tBdCgkZnJvbS5ub2RlKC0xKS5jb250ZW50TWF0Y2hBdCgkZnJvbS5pbmRleEFmdGVyKC0xKSkpO1xuICAgICAgICBsZXQgdHlwZXMgPSBhdEVuZCAmJiBkZWZsdCA/IFt7IHR5cGU6IGRlZmx0IH1dIDogdW5kZWZpbmVkO1xuICAgICAgICBsZXQgY2FuID0gY2FuU3BsaXQodHIuZG9jLCB0ci5tYXBwaW5nLm1hcCgkZnJvbS5wb3MpLCAxLCB0eXBlcyk7XG4gICAgICAgIGlmICghdHlwZXMgJiYgIWNhbiAmJiBjYW5TcGxpdCh0ci5kb2MsIHRyLm1hcHBpbmcubWFwKCRmcm9tLnBvcyksIDEsIGRlZmx0ID8gW3sgdHlwZTogZGVmbHQgfV0gOiB1bmRlZmluZWQpKSB7XG4gICAgICAgICAgICBpZiAoZGVmbHQpXG4gICAgICAgICAgICAgICAgdHlwZXMgPSBbeyB0eXBlOiBkZWZsdCB9XTtcbiAgICAgICAgICAgIGNhbiA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNhbikge1xuICAgICAgICAgICAgdHIuc3BsaXQodHIubWFwcGluZy5tYXAoJGZyb20ucG9zKSwgMSwgdHlwZXMpO1xuICAgICAgICAgICAgaWYgKCFhdEVuZCAmJiAhJGZyb20ucGFyZW50T2Zmc2V0ICYmICRmcm9tLnBhcmVudC50eXBlICE9IGRlZmx0KSB7XG4gICAgICAgICAgICAgICAgbGV0IGZpcnN0ID0gdHIubWFwcGluZy5tYXAoJGZyb20uYmVmb3JlKCkpLCAkZmlyc3QgPSB0ci5kb2MucmVzb2x2ZShmaXJzdCk7XG4gICAgICAgICAgICAgICAgaWYgKGRlZmx0ICYmICRmcm9tLm5vZGUoLTEpLmNhblJlcGxhY2VXaXRoKCRmaXJzdC5pbmRleCgpLCAkZmlyc3QuaW5kZXgoKSArIDEsIGRlZmx0KSlcbiAgICAgICAgICAgICAgICAgICAgdHIuc2V0Tm9kZU1hcmt1cCh0ci5tYXBwaW5nLm1hcCgkZnJvbS5iZWZvcmUoKSksIGRlZmx0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBkaXNwYXRjaCh0ci5zY3JvbGxJbnRvVmlldygpKTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59O1xuLyoqXG5BY3RzIGxpa2UgW2BzcGxpdEJsb2NrYF0oaHR0cHM6Ly9wcm9zZW1pcnJvci5uZXQvZG9jcy9yZWYvI2NvbW1hbmRzLnNwbGl0QmxvY2spLCBidXQgd2l0aG91dFxucmVzZXR0aW5nIHRoZSBzZXQgb2YgYWN0aXZlIG1hcmtzIGF0IHRoZSBjdXJzb3IuXG4qL1xuY29uc3Qgc3BsaXRCbG9ja0tlZXBNYXJrcyA9IChzdGF0ZSwgZGlzcGF0Y2gpID0+IHtcbiAgICByZXR1cm4gc3BsaXRCbG9jayhzdGF0ZSwgZGlzcGF0Y2ggJiYgKHRyID0+IHtcbiAgICAgICAgbGV0IG1hcmtzID0gc3RhdGUuc3RvcmVkTWFya3MgfHwgKHN0YXRlLnNlbGVjdGlvbi4kdG8ucGFyZW50T2Zmc2V0ICYmIHN0YXRlLnNlbGVjdGlvbi4kZnJvbS5tYXJrcygpKTtcbiAgICAgICAgaWYgKG1hcmtzKVxuICAgICAgICAgICAgdHIuZW5zdXJlTWFya3MobWFya3MpO1xuICAgICAgICBkaXNwYXRjaCh0cik7XG4gICAgfSkpO1xufTtcbi8qKlxuTW92ZSB0aGUgc2VsZWN0aW9uIHRvIHRoZSBub2RlIHdyYXBwaW5nIHRoZSBjdXJyZW50IHNlbGVjdGlvbiwgaWZcbmFueS4gKFdpbGwgbm90IHNlbGVjdCB0aGUgZG9jdW1lbnQgbm9kZS4pXG4qL1xuY29uc3Qgc2VsZWN0UGFyZW50Tm9kZSA9IChzdGF0ZSwgZGlzcGF0Y2gpID0+IHtcbiAgICBsZXQgeyAkZnJvbSwgdG8gfSA9IHN0YXRlLnNlbGVjdGlvbiwgcG9zO1xuICAgIGxldCBzYW1lID0gJGZyb20uc2hhcmVkRGVwdGgodG8pO1xuICAgIGlmIChzYW1lID09IDApXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBwb3MgPSAkZnJvbS5iZWZvcmUoc2FtZSk7XG4gICAgaWYgKGRpc3BhdGNoKVxuICAgICAgICBkaXNwYXRjaChzdGF0ZS50ci5zZXRTZWxlY3Rpb24oTm9kZVNlbGVjdGlvbi5jcmVhdGUoc3RhdGUuZG9jLCBwb3MpKSk7XG4gICAgcmV0dXJuIHRydWU7XG59O1xuLyoqXG5TZWxlY3QgdGhlIHdob2xlIGRvY3VtZW50LlxuKi9cbmNvbnN0IHNlbGVjdEFsbCA9IChzdGF0ZSwgZGlzcGF0Y2gpID0+IHtcbiAgICBpZiAoZGlzcGF0Y2gpXG4gICAgICAgIGRpc3BhdGNoKHN0YXRlLnRyLnNldFNlbGVjdGlvbihuZXcgQWxsU2VsZWN0aW9uKHN0YXRlLmRvYykpKTtcbiAgICByZXR1cm4gdHJ1ZTtcbn07XG5mdW5jdGlvbiBqb2luTWF5YmVDbGVhcihzdGF0ZSwgJHBvcywgZGlzcGF0Y2gpIHtcbiAgICBsZXQgYmVmb3JlID0gJHBvcy5ub2RlQmVmb3JlLCBhZnRlciA9ICRwb3Mubm9kZUFmdGVyLCBpbmRleCA9ICRwb3MuaW5kZXgoKTtcbiAgICBpZiAoIWJlZm9yZSB8fCAhYWZ0ZXIgfHwgIWJlZm9yZS50eXBlLmNvbXBhdGlibGVDb250ZW50KGFmdGVyLnR5cGUpKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgaWYgKCFiZWZvcmUuY29udGVudC5zaXplICYmICRwb3MucGFyZW50LmNhblJlcGxhY2UoaW5kZXggLSAxLCBpbmRleCkpIHtcbiAgICAgICAgaWYgKGRpc3BhdGNoKVxuICAgICAgICAgICAgZGlzcGF0Y2goc3RhdGUudHIuZGVsZXRlKCRwb3MucG9zIC0gYmVmb3JlLm5vZGVTaXplLCAkcG9zLnBvcykuc2Nyb2xsSW50b1ZpZXcoKSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoISRwb3MucGFyZW50LmNhblJlcGxhY2UoaW5kZXgsIGluZGV4ICsgMSkgfHwgIShhZnRlci5pc1RleHRibG9jayB8fCBjYW5Kb2luKHN0YXRlLmRvYywgJHBvcy5wb3MpKSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChkaXNwYXRjaClcbiAgICAgICAgZGlzcGF0Y2goc3RhdGUudHJcbiAgICAgICAgICAgIC5jbGVhckluY29tcGF0aWJsZSgkcG9zLnBvcywgYmVmb3JlLnR5cGUsIGJlZm9yZS5jb250ZW50TWF0Y2hBdChiZWZvcmUuY2hpbGRDb3VudCkpXG4gICAgICAgICAgICAuam9pbigkcG9zLnBvcylcbiAgICAgICAgICAgIC5zY3JvbGxJbnRvVmlldygpKTtcbiAgICByZXR1cm4gdHJ1ZTtcbn1cbmZ1bmN0aW9uIGRlbGV0ZUJhcnJpZXIoc3RhdGUsICRjdXQsIGRpc3BhdGNoKSB7XG4gICAgbGV0IGJlZm9yZSA9ICRjdXQubm9kZUJlZm9yZSwgYWZ0ZXIgPSAkY3V0Lm5vZGVBZnRlciwgY29ubiwgbWF0Y2g7XG4gICAgaWYgKGJlZm9yZS50eXBlLnNwZWMuaXNvbGF0aW5nIHx8IGFmdGVyLnR5cGUuc3BlYy5pc29sYXRpbmcpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBpZiAoam9pbk1heWJlQ2xlYXIoc3RhdGUsICRjdXQsIGRpc3BhdGNoKSlcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgbGV0IGNhbkRlbEFmdGVyID0gJGN1dC5wYXJlbnQuY2FuUmVwbGFjZSgkY3V0LmluZGV4KCksICRjdXQuaW5kZXgoKSArIDEpO1xuICAgIGlmIChjYW5EZWxBZnRlciAmJlxuICAgICAgICAoY29ubiA9IChtYXRjaCA9IGJlZm9yZS5jb250ZW50TWF0Y2hBdChiZWZvcmUuY2hpbGRDb3VudCkpLmZpbmRXcmFwcGluZyhhZnRlci50eXBlKSkgJiZcbiAgICAgICAgbWF0Y2gubWF0Y2hUeXBlKGNvbm5bMF0gfHwgYWZ0ZXIudHlwZSkudmFsaWRFbmQpIHtcbiAgICAgICAgaWYgKGRpc3BhdGNoKSB7XG4gICAgICAgICAgICBsZXQgZW5kID0gJGN1dC5wb3MgKyBhZnRlci5ub2RlU2l6ZSwgd3JhcCA9IEZyYWdtZW50LmVtcHR5O1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IGNvbm4ubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pXG4gICAgICAgICAgICAgICAgd3JhcCA9IEZyYWdtZW50LmZyb20oY29ubltpXS5jcmVhdGUobnVsbCwgd3JhcCkpO1xuICAgICAgICAgICAgd3JhcCA9IEZyYWdtZW50LmZyb20oYmVmb3JlLmNvcHkod3JhcCkpO1xuICAgICAgICAgICAgbGV0IHRyID0gc3RhdGUudHIuc3RlcChuZXcgUmVwbGFjZUFyb3VuZFN0ZXAoJGN1dC5wb3MgLSAxLCBlbmQsICRjdXQucG9zLCBlbmQsIG5ldyBTbGljZSh3cmFwLCAxLCAwKSwgY29ubi5sZW5ndGgsIHRydWUpKTtcbiAgICAgICAgICAgIGxldCBqb2luQXQgPSBlbmQgKyAyICogY29ubi5sZW5ndGg7XG4gICAgICAgICAgICBpZiAoY2FuSm9pbih0ci5kb2MsIGpvaW5BdCkpXG4gICAgICAgICAgICAgICAgdHIuam9pbihqb2luQXQpO1xuICAgICAgICAgICAgZGlzcGF0Y2godHIuc2Nyb2xsSW50b1ZpZXcoKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGxldCBzZWxBZnRlciA9IFNlbGVjdGlvbi5maW5kRnJvbSgkY3V0LCAxKTtcbiAgICBsZXQgcmFuZ2UgPSBzZWxBZnRlciAmJiBzZWxBZnRlci4kZnJvbS5ibG9ja1JhbmdlKHNlbEFmdGVyLiR0byksIHRhcmdldCA9IHJhbmdlICYmIGxpZnRUYXJnZXQocmFuZ2UpO1xuICAgIGlmICh0YXJnZXQgIT0gbnVsbCAmJiB0YXJnZXQgPj0gJGN1dC5kZXB0aCkge1xuICAgICAgICBpZiAoZGlzcGF0Y2gpXG4gICAgICAgICAgICBkaXNwYXRjaChzdGF0ZS50ci5saWZ0KHJhbmdlLCB0YXJnZXQpLnNjcm9sbEludG9WaWV3KCkpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKGNhbkRlbEFmdGVyICYmIHRleHRibG9ja0F0KGFmdGVyLCBcInN0YXJ0XCIsIHRydWUpICYmIHRleHRibG9ja0F0KGJlZm9yZSwgXCJlbmRcIikpIHtcbiAgICAgICAgbGV0IGF0ID0gYmVmb3JlLCB3cmFwID0gW107XG4gICAgICAgIGZvciAoOzspIHtcbiAgICAgICAgICAgIHdyYXAucHVzaChhdCk7XG4gICAgICAgICAgICBpZiAoYXQuaXNUZXh0YmxvY2spXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBhdCA9IGF0Lmxhc3RDaGlsZDtcbiAgICAgICAgfVxuICAgICAgICBsZXQgYWZ0ZXJUZXh0ID0gYWZ0ZXIsIGFmdGVyRGVwdGggPSAxO1xuICAgICAgICBmb3IgKDsgIWFmdGVyVGV4dC5pc1RleHRibG9jazsgYWZ0ZXJUZXh0ID0gYWZ0ZXJUZXh0LmZpcnN0Q2hpbGQpXG4gICAgICAgICAgICBhZnRlckRlcHRoKys7XG4gICAgICAgIGlmIChhdC5jYW5SZXBsYWNlKGF0LmNoaWxkQ291bnQsIGF0LmNoaWxkQ291bnQsIGFmdGVyVGV4dC5jb250ZW50KSkge1xuICAgICAgICAgICAgaWYgKGRpc3BhdGNoKSB7XG4gICAgICAgICAgICAgICAgbGV0IGVuZCA9IEZyYWdtZW50LmVtcHR5O1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSB3cmFwLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKVxuICAgICAgICAgICAgICAgICAgICBlbmQgPSBGcmFnbWVudC5mcm9tKHdyYXBbaV0uY29weShlbmQpKTtcbiAgICAgICAgICAgICAgICBsZXQgdHIgPSBzdGF0ZS50ci5zdGVwKG5ldyBSZXBsYWNlQXJvdW5kU3RlcCgkY3V0LnBvcyAtIHdyYXAubGVuZ3RoLCAkY3V0LnBvcyArIGFmdGVyLm5vZGVTaXplLCAkY3V0LnBvcyArIGFmdGVyRGVwdGgsICRjdXQucG9zICsgYWZ0ZXIubm9kZVNpemUgLSBhZnRlckRlcHRoLCBuZXcgU2xpY2UoZW5kLCB3cmFwLmxlbmd0aCwgMCksIDAsIHRydWUpKTtcbiAgICAgICAgICAgICAgICBkaXNwYXRjaCh0ci5zY3JvbGxJbnRvVmlldygpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIHNlbGVjdFRleHRibG9ja1NpZGUoc2lkZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc3RhdGUsIGRpc3BhdGNoKSB7XG4gICAgICAgIGxldCBzZWwgPSBzdGF0ZS5zZWxlY3Rpb24sICRwb3MgPSBzaWRlIDwgMCA/IHNlbC4kZnJvbSA6IHNlbC4kdG87XG4gICAgICAgIGxldCBkZXB0aCA9ICRwb3MuZGVwdGg7XG4gICAgICAgIHdoaWxlICgkcG9zLm5vZGUoZGVwdGgpLmlzSW5saW5lKSB7XG4gICAgICAgICAgICBpZiAoIWRlcHRoKVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIGRlcHRoLS07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCEkcG9zLm5vZGUoZGVwdGgpLmlzVGV4dGJsb2NrKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAoZGlzcGF0Y2gpXG4gICAgICAgICAgICBkaXNwYXRjaChzdGF0ZS50ci5zZXRTZWxlY3Rpb24oVGV4dFNlbGVjdGlvbi5jcmVhdGUoc3RhdGUuZG9jLCBzaWRlIDwgMCA/ICRwb3Muc3RhcnQoZGVwdGgpIDogJHBvcy5lbmQoZGVwdGgpKSkpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xufVxuLyoqXG5Nb3ZlcyB0aGUgY3Vyc29yIHRvIHRoZSBzdGFydCBvZiBjdXJyZW50IHRleHQgYmxvY2suXG4qL1xuY29uc3Qgc2VsZWN0VGV4dGJsb2NrU3RhcnQgPSBzZWxlY3RUZXh0YmxvY2tTaWRlKC0xKTtcbi8qKlxuTW92ZXMgdGhlIGN1cnNvciB0byB0aGUgZW5kIG9mIGN1cnJlbnQgdGV4dCBibG9jay5cbiovXG5jb25zdCBzZWxlY3RUZXh0YmxvY2tFbmQgPSBzZWxlY3RUZXh0YmxvY2tTaWRlKDEpO1xuLy8gUGFyYW1ldGVyaXplZCBjb21tYW5kc1xuLyoqXG5XcmFwIHRoZSBzZWxlY3Rpb24gaW4gYSBub2RlIG9mIHRoZSBnaXZlbiB0eXBlIHdpdGggdGhlIGdpdmVuXG5hdHRyaWJ1dGVzLlxuKi9cbmZ1bmN0aW9uIHdyYXBJbihub2RlVHlwZSwgYXR0cnMgPSBudWxsKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzdGF0ZSwgZGlzcGF0Y2gpIHtcbiAgICAgICAgbGV0IHsgJGZyb20sICR0byB9ID0gc3RhdGUuc2VsZWN0aW9uO1xuICAgICAgICBsZXQgcmFuZ2UgPSAkZnJvbS5ibG9ja1JhbmdlKCR0byksIHdyYXBwaW5nID0gcmFuZ2UgJiYgZmluZFdyYXBwaW5nKHJhbmdlLCBub2RlVHlwZSwgYXR0cnMpO1xuICAgICAgICBpZiAoIXdyYXBwaW5nKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAoZGlzcGF0Y2gpXG4gICAgICAgICAgICBkaXNwYXRjaChzdGF0ZS50ci53cmFwKHJhbmdlLCB3cmFwcGluZykuc2Nyb2xsSW50b1ZpZXcoKSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG59XG4vKipcblJldHVybnMgYSBjb21tYW5kIHRoYXQgdHJpZXMgdG8gc2V0IHRoZSBzZWxlY3RlZCB0ZXh0YmxvY2tzIHRvIHRoZVxuZ2l2ZW4gbm9kZSB0eXBlIHdpdGggdGhlIGdpdmVuIGF0dHJpYnV0ZXMuXG4qL1xuZnVuY3Rpb24gc2V0QmxvY2tUeXBlKG5vZGVUeXBlLCBhdHRycyA9IG51bGwpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHN0YXRlLCBkaXNwYXRjaCkge1xuICAgICAgICBsZXQgeyBmcm9tLCB0byB9ID0gc3RhdGUuc2VsZWN0aW9uO1xuICAgICAgICBsZXQgYXBwbGljYWJsZSA9IGZhbHNlO1xuICAgICAgICBzdGF0ZS5kb2Mubm9kZXNCZXR3ZWVuKGZyb20sIHRvLCAobm9kZSwgcG9zKSA9PiB7XG4gICAgICAgICAgICBpZiAoYXBwbGljYWJsZSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICBpZiAoIW5vZGUuaXNUZXh0YmxvY2sgfHwgbm9kZS5oYXNNYXJrdXAobm9kZVR5cGUsIGF0dHJzKSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBpZiAobm9kZS50eXBlID09IG5vZGVUeXBlKSB7XG4gICAgICAgICAgICAgICAgYXBwbGljYWJsZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBsZXQgJHBvcyA9IHN0YXRlLmRvYy5yZXNvbHZlKHBvcyksIGluZGV4ID0gJHBvcy5pbmRleCgpO1xuICAgICAgICAgICAgICAgIGFwcGxpY2FibGUgPSAkcG9zLnBhcmVudC5jYW5SZXBsYWNlV2l0aChpbmRleCwgaW5kZXggKyAxLCBub2RlVHlwZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIWFwcGxpY2FibGUpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGlmIChkaXNwYXRjaClcbiAgICAgICAgICAgIGRpc3BhdGNoKHN0YXRlLnRyLnNldEJsb2NrVHlwZShmcm9tLCB0bywgbm9kZVR5cGUsIGF0dHJzKS5zY3JvbGxJbnRvVmlldygpKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIG1hcmtBcHBsaWVzKGRvYywgcmFuZ2VzLCB0eXBlKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCByYW5nZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IHsgJGZyb20sICR0byB9ID0gcmFuZ2VzW2ldO1xuICAgICAgICBsZXQgY2FuID0gJGZyb20uZGVwdGggPT0gMCA/IGRvYy50eXBlLmFsbG93c01hcmtUeXBlKHR5cGUpIDogZmFsc2U7XG4gICAgICAgIGRvYy5ub2Rlc0JldHdlZW4oJGZyb20ucG9zLCAkdG8ucG9zLCBub2RlID0+IHtcbiAgICAgICAgICAgIGlmIChjYW4pXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgY2FuID0gbm9kZS5pbmxpbmVDb250ZW50ICYmIG5vZGUudHlwZS5hbGxvd3NNYXJrVHlwZSh0eXBlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChjYW4pXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuLyoqXG5DcmVhdGUgYSBjb21tYW5kIGZ1bmN0aW9uIHRoYXQgdG9nZ2xlcyB0aGUgZ2l2ZW4gbWFyayB3aXRoIHRoZVxuZ2l2ZW4gYXR0cmlidXRlcy4gV2lsbCByZXR1cm4gYGZhbHNlYCB3aGVuIHRoZSBjdXJyZW50IHNlbGVjdGlvblxuZG9lc24ndCBzdXBwb3J0IHRoYXQgbWFyay4gVGhpcyB3aWxsIHJlbW92ZSB0aGUgbWFyayBpZiBhbnkgbWFya3Ncbm9mIHRoYXQgdHlwZSBleGlzdCBpbiB0aGUgc2VsZWN0aW9uLCBvciBhZGQgaXQgb3RoZXJ3aXNlLiBJZiB0aGVcbnNlbGVjdGlvbiBpcyBlbXB0eSwgdGhpcyBhcHBsaWVzIHRvIHRoZSBbc3RvcmVkXG5tYXJrc10oaHR0cHM6Ly9wcm9zZW1pcnJvci5uZXQvZG9jcy9yZWYvI3N0YXRlLkVkaXRvclN0YXRlLnN0b3JlZE1hcmtzKSBpbnN0ZWFkIG9mIGEgcmFuZ2Ugb2YgdGhlXG5kb2N1bWVudC5cbiovXG5mdW5jdGlvbiB0b2dnbGVNYXJrKG1hcmtUeXBlLCBhdHRycyA9IG51bGwpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHN0YXRlLCBkaXNwYXRjaCkge1xuICAgICAgICBsZXQgeyBlbXB0eSwgJGN1cnNvciwgcmFuZ2VzIH0gPSBzdGF0ZS5zZWxlY3Rpb247XG4gICAgICAgIGlmICgoZW1wdHkgJiYgISRjdXJzb3IpIHx8ICFtYXJrQXBwbGllcyhzdGF0ZS5kb2MsIHJhbmdlcywgbWFya1R5cGUpKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAoZGlzcGF0Y2gpIHtcbiAgICAgICAgICAgIGlmICgkY3Vyc29yKSB7XG4gICAgICAgICAgICAgICAgaWYgKG1hcmtUeXBlLmlzSW5TZXQoc3RhdGUuc3RvcmVkTWFya3MgfHwgJGN1cnNvci5tYXJrcygpKSlcbiAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2goc3RhdGUudHIucmVtb3ZlU3RvcmVkTWFyayhtYXJrVHlwZSkpO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2goc3RhdGUudHIuYWRkU3RvcmVkTWFyayhtYXJrVHlwZS5jcmVhdGUoYXR0cnMpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBsZXQgaGFzID0gZmFsc2UsIHRyID0gc3RhdGUudHI7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7ICFoYXMgJiYgaSA8IHJhbmdlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgeyAkZnJvbSwgJHRvIH0gPSByYW5nZXNbaV07XG4gICAgICAgICAgICAgICAgICAgIGhhcyA9IHN0YXRlLmRvYy5yYW5nZUhhc01hcmsoJGZyb20ucG9zLCAkdG8ucG9zLCBtYXJrVHlwZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmFuZ2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCB7ICRmcm9tLCAkdG8gfSA9IHJhbmdlc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGhhcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHIucmVtb3ZlTWFyaygkZnJvbS5wb3MsICR0by5wb3MsIG1hcmtUeXBlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBmcm9tID0gJGZyb20ucG9zLCB0byA9ICR0by5wb3MsIHN0YXJ0ID0gJGZyb20ubm9kZUFmdGVyLCBlbmQgPSAkdG8ubm9kZUJlZm9yZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzcGFjZVN0YXJ0ID0gc3RhcnQgJiYgc3RhcnQuaXNUZXh0ID8gL15cXHMqLy5leGVjKHN0YXJ0LnRleHQpWzBdLmxlbmd0aCA6IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgc3BhY2VFbmQgPSBlbmQgJiYgZW5kLmlzVGV4dCA/IC9cXHMqJC8uZXhlYyhlbmQudGV4dClbMF0ubGVuZ3RoIDogMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmcm9tICsgc3BhY2VTdGFydCA8IHRvKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSArPSBzcGFjZVN0YXJ0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIC09IHNwYWNlRW5kO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdHIuYWRkTWFyayhmcm9tLCB0bywgbWFya1R5cGUuY3JlYXRlKGF0dHJzKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZGlzcGF0Y2godHIuc2Nyb2xsSW50b1ZpZXcoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHdyYXBEaXNwYXRjaEZvckpvaW4oZGlzcGF0Y2gsIGlzSm9pbmFibGUpIHtcbiAgICByZXR1cm4gKHRyKSA9PiB7XG4gICAgICAgIGlmICghdHIuaXNHZW5lcmljKVxuICAgICAgICAgICAgcmV0dXJuIGRpc3BhdGNoKHRyKTtcbiAgICAgICAgbGV0IHJhbmdlcyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRyLm1hcHBpbmcubWFwcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IG1hcCA9IHRyLm1hcHBpbmcubWFwc1tpXTtcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgcmFuZ2VzLmxlbmd0aDsgaisrKVxuICAgICAgICAgICAgICAgIHJhbmdlc1tqXSA9IG1hcC5tYXAocmFuZ2VzW2pdKTtcbiAgICAgICAgICAgIG1hcC5mb3JFYWNoKChfcywgX2UsIGZyb20sIHRvKSA9PiByYW5nZXMucHVzaChmcm9tLCB0bykpO1xuICAgICAgICB9XG4gICAgICAgIC8vIEZpZ3VyZSBvdXQgd2hpY2ggam9pbmFibGUgcG9pbnRzIGV4aXN0IGluc2lkZSB0aG9zZSByYW5nZXMsXG4gICAgICAgIC8vIGJ5IGNoZWNraW5nIGFsbCBub2RlIGJvdW5kYXJpZXMgaW4gdGhlaXIgcGFyZW50IG5vZGVzLlxuICAgICAgICBsZXQgam9pbmFibGUgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByYW5nZXMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICAgICAgICAgIGxldCBmcm9tID0gcmFuZ2VzW2ldLCB0byA9IHJhbmdlc1tpICsgMV07XG4gICAgICAgICAgICBsZXQgJGZyb20gPSB0ci5kb2MucmVzb2x2ZShmcm9tKSwgZGVwdGggPSAkZnJvbS5zaGFyZWREZXB0aCh0byksIHBhcmVudCA9ICRmcm9tLm5vZGUoZGVwdGgpO1xuICAgICAgICAgICAgZm9yIChsZXQgaW5kZXggPSAkZnJvbS5pbmRleEFmdGVyKGRlcHRoKSwgcG9zID0gJGZyb20uYWZ0ZXIoZGVwdGggKyAxKTsgcG9zIDw9IHRvOyArK2luZGV4KSB7XG4gICAgICAgICAgICAgICAgbGV0IGFmdGVyID0gcGFyZW50Lm1heWJlQ2hpbGQoaW5kZXgpO1xuICAgICAgICAgICAgICAgIGlmICghYWZ0ZXIpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGlmIChpbmRleCAmJiBqb2luYWJsZS5pbmRleE9mKHBvcykgPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGJlZm9yZSA9IHBhcmVudC5jaGlsZChpbmRleCAtIDEpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYmVmb3JlLnR5cGUgPT0gYWZ0ZXIudHlwZSAmJiBpc0pvaW5hYmxlKGJlZm9yZSwgYWZ0ZXIpKVxuICAgICAgICAgICAgICAgICAgICAgICAgam9pbmFibGUucHVzaChwb3MpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwb3MgKz0gYWZ0ZXIubm9kZVNpemU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gSm9pbiB0aGUgam9pbmFibGUgcG9pbnRzXG4gICAgICAgIGpvaW5hYmxlLnNvcnQoKGEsIGIpID0+IGEgLSBiKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IGpvaW5hYmxlLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICBpZiAoY2FuSm9pbih0ci5kb2MsIGpvaW5hYmxlW2ldKSlcbiAgICAgICAgICAgICAgICB0ci5qb2luKGpvaW5hYmxlW2ldKTtcbiAgICAgICAgfVxuICAgICAgICBkaXNwYXRjaCh0cik7XG4gICAgfTtcbn1cbi8qKlxuV3JhcCBhIGNvbW1hbmQgc28gdGhhdCwgd2hlbiBpdCBwcm9kdWNlcyBhIHRyYW5zZm9ybSB0aGF0IGNhdXNlc1xudHdvIGpvaW5hYmxlIG5vZGVzIHRvIGVuZCB1cCBuZXh0IHRvIGVhY2ggb3RoZXIsIHRob3NlIGFyZSBqb2luZWQuXG5Ob2RlcyBhcmUgY29uc2lkZXJlZCBqb2luYWJsZSB3aGVuIHRoZXkgYXJlIG9mIHRoZSBzYW1lIHR5cGUgYW5kXG53aGVuIHRoZSBgaXNKb2luYWJsZWAgcHJlZGljYXRlIHJldHVybnMgdHJ1ZSBmb3IgdGhlbSBvciwgaWYgYW5cbmFycmF5IG9mIHN0cmluZ3Mgd2FzIHBhc3NlZCwgaWYgdGhlaXIgbm9kZSB0eXBlIG5hbWUgaXMgaW4gdGhhdFxuYXJyYXkuXG4qL1xuZnVuY3Rpb24gYXV0b0pvaW4oY29tbWFuZCwgaXNKb2luYWJsZSkge1xuICAgIGxldCBjYW5Kb2luID0gQXJyYXkuaXNBcnJheShpc0pvaW5hYmxlKSA/IChub2RlKSA9PiBpc0pvaW5hYmxlLmluZGV4T2Yobm9kZS50eXBlLm5hbWUpID4gLTFcbiAgICAgICAgOiBpc0pvaW5hYmxlO1xuICAgIHJldHVybiAoc3RhdGUsIGRpc3BhdGNoLCB2aWV3KSA9PiBjb21tYW5kKHN0YXRlLCBkaXNwYXRjaCAmJiB3cmFwRGlzcGF0Y2hGb3JKb2luKGRpc3BhdGNoLCBjYW5Kb2luKSwgdmlldyk7XG59XG4vKipcbkNvbWJpbmUgYSBudW1iZXIgb2YgY29tbWFuZCBmdW5jdGlvbnMgaW50byBhIHNpbmdsZSBmdW5jdGlvbiAod2hpY2hcbmNhbGxzIHRoZW0gb25lIGJ5IG9uZSB1bnRpbCBvbmUgcmV0dXJucyB0cnVlKS5cbiovXG5mdW5jdGlvbiBjaGFpbkNvbW1hbmRzKC4uLmNvbW1hbmRzKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzdGF0ZSwgZGlzcGF0Y2gsIHZpZXcpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb21tYW5kcy5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgIGlmIChjb21tYW5kc1tpXShzdGF0ZSwgZGlzcGF0Y2gsIHZpZXcpKVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbn1cbmxldCBiYWNrc3BhY2UgPSBjaGFpbkNvbW1hbmRzKGRlbGV0ZVNlbGVjdGlvbiwgam9pbkJhY2t3YXJkLCBzZWxlY3ROb2RlQmFja3dhcmQpO1xubGV0IGRlbCA9IGNoYWluQ29tbWFuZHMoZGVsZXRlU2VsZWN0aW9uLCBqb2luRm9yd2FyZCwgc2VsZWN0Tm9kZUZvcndhcmQpO1xuLyoqXG5BIGJhc2ljIGtleW1hcCBjb250YWluaW5nIGJpbmRpbmdzIG5vdCBzcGVjaWZpYyB0byBhbnkgc2NoZW1hLlxuQmluZHMgdGhlIGZvbGxvd2luZyBrZXlzICh3aGVuIG11bHRpcGxlIGNvbW1hbmRzIGFyZSBsaXN0ZWQsIHRoZXlcbmFyZSBjaGFpbmVkIHdpdGggW2BjaGFpbkNvbW1hbmRzYF0oaHR0cHM6Ly9wcm9zZW1pcnJvci5uZXQvZG9jcy9yZWYvI2NvbW1hbmRzLmNoYWluQ29tbWFuZHMpKTpcblxuKiAqKkVudGVyKiogdG8gYG5ld2xpbmVJbkNvZGVgLCBgY3JlYXRlUGFyYWdyYXBoTmVhcmAsIGBsaWZ0RW1wdHlCbG9ja2AsIGBzcGxpdEJsb2NrYFxuKiAqKk1vZC1FbnRlcioqIHRvIGBleGl0Q29kZWBcbiogKipCYWNrc3BhY2UqKiBhbmQgKipNb2QtQmFja3NwYWNlKiogdG8gYGRlbGV0ZVNlbGVjdGlvbmAsIGBqb2luQmFja3dhcmRgLCBgc2VsZWN0Tm9kZUJhY2t3YXJkYFxuKiAqKkRlbGV0ZSoqIGFuZCAqKk1vZC1EZWxldGUqKiB0byBgZGVsZXRlU2VsZWN0aW9uYCwgYGpvaW5Gb3J3YXJkYCwgYHNlbGVjdE5vZGVGb3J3YXJkYFxuKiAqKk1vZC1EZWxldGUqKiB0byBgZGVsZXRlU2VsZWN0aW9uYCwgYGpvaW5Gb3J3YXJkYCwgYHNlbGVjdE5vZGVGb3J3YXJkYFxuKiAqKk1vZC1hKiogdG8gYHNlbGVjdEFsbGBcbiovXG5jb25zdCBwY0Jhc2VLZXltYXAgPSB7XG4gICAgXCJFbnRlclwiOiBjaGFpbkNvbW1hbmRzKG5ld2xpbmVJbkNvZGUsIGNyZWF0ZVBhcmFncmFwaE5lYXIsIGxpZnRFbXB0eUJsb2NrLCBzcGxpdEJsb2NrKSxcbiAgICBcIk1vZC1FbnRlclwiOiBleGl0Q29kZSxcbiAgICBcIkJhY2tzcGFjZVwiOiBiYWNrc3BhY2UsXG4gICAgXCJNb2QtQmFja3NwYWNlXCI6IGJhY2tzcGFjZSxcbiAgICBcIlNoaWZ0LUJhY2tzcGFjZVwiOiBiYWNrc3BhY2UsXG4gICAgXCJEZWxldGVcIjogZGVsLFxuICAgIFwiTW9kLURlbGV0ZVwiOiBkZWwsXG4gICAgXCJNb2QtYVwiOiBzZWxlY3RBbGxcbn07XG4vKipcbkEgY29weSBvZiBgcGNCYXNlS2V5bWFwYCB0aGF0IGFsc28gYmluZHMgKipDdHJsLWgqKiBsaWtlIEJhY2tzcGFjZSxcbioqQ3RybC1kKiogbGlrZSBEZWxldGUsICoqQWx0LUJhY2tzcGFjZSoqIGxpa2UgQ3RybC1CYWNrc3BhY2UsIGFuZFxuKipDdHJsLUFsdC1CYWNrc3BhY2UqKiwgKipBbHQtRGVsZXRlKiosIGFuZCAqKkFsdC1kKiogbGlrZVxuQ3RybC1EZWxldGUuXG4qL1xuY29uc3QgbWFjQmFzZUtleW1hcCA9IHtcbiAgICBcIkN0cmwtaFwiOiBwY0Jhc2VLZXltYXBbXCJCYWNrc3BhY2VcIl0sXG4gICAgXCJBbHQtQmFja3NwYWNlXCI6IHBjQmFzZUtleW1hcFtcIk1vZC1CYWNrc3BhY2VcIl0sXG4gICAgXCJDdHJsLWRcIjogcGNCYXNlS2V5bWFwW1wiRGVsZXRlXCJdLFxuICAgIFwiQ3RybC1BbHQtQmFja3NwYWNlXCI6IHBjQmFzZUtleW1hcFtcIk1vZC1EZWxldGVcIl0sXG4gICAgXCJBbHQtRGVsZXRlXCI6IHBjQmFzZUtleW1hcFtcIk1vZC1EZWxldGVcIl0sXG4gICAgXCJBbHQtZFwiOiBwY0Jhc2VLZXltYXBbXCJNb2QtRGVsZXRlXCJdLFxuICAgIFwiQ3RybC1hXCI6IHNlbGVjdFRleHRibG9ja1N0YXJ0LFxuICAgIFwiQ3RybC1lXCI6IHNlbGVjdFRleHRibG9ja0VuZFxufTtcbmZvciAobGV0IGtleSBpbiBwY0Jhc2VLZXltYXApXG4gICAgbWFjQmFzZUtleW1hcFtrZXldID0gcGNCYXNlS2V5bWFwW2tleV07XG5jb25zdCBtYWMgPSB0eXBlb2YgbmF2aWdhdG9yICE9IFwidW5kZWZpbmVkXCIgPyAvTWFjfGlQKGhvbmV8W29hXWQpLy50ZXN0KG5hdmlnYXRvci5wbGF0Zm9ybSlcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgOiB0eXBlb2Ygb3MgIT0gXCJ1bmRlZmluZWRcIiAmJiBvcy5wbGF0Zm9ybSA/IG9zLnBsYXRmb3JtKCkgPT0gXCJkYXJ3aW5cIiA6IGZhbHNlO1xuLyoqXG5EZXBlbmRpbmcgb24gdGhlIGRldGVjdGVkIHBsYXRmb3JtLCB0aGlzIHdpbGwgaG9sZFxuW2BwY0Jhc2VrZXltYXBgXShodHRwczovL3Byb3NlbWlycm9yLm5ldC9kb2NzL3JlZi8jY29tbWFuZHMucGNCYXNlS2V5bWFwKSBvclxuW2BtYWNCYXNlS2V5bWFwYF0oaHR0cHM6Ly9wcm9zZW1pcnJvci5uZXQvZG9jcy9yZWYvI2NvbW1hbmRzLm1hY0Jhc2VLZXltYXApLlxuKi9cbmNvbnN0IGJhc2VLZXltYXAgPSBtYWMgPyBtYWNCYXNlS2V5bWFwIDogcGNCYXNlS2V5bWFwO1xuXG5leHBvcnQgeyBhdXRvSm9pbiwgYmFzZUtleW1hcCwgY2hhaW5Db21tYW5kcywgY3JlYXRlUGFyYWdyYXBoTmVhciwgZGVsZXRlU2VsZWN0aW9uLCBleGl0Q29kZSwgam9pbkJhY2t3YXJkLCBqb2luRG93biwgam9pbkZvcndhcmQsIGpvaW5VcCwgbGlmdCwgbGlmdEVtcHR5QmxvY2ssIG1hY0Jhc2VLZXltYXAsIG5ld2xpbmVJbkNvZGUsIHBjQmFzZUtleW1hcCwgc2VsZWN0QWxsLCBzZWxlY3ROb2RlQmFja3dhcmQsIHNlbGVjdE5vZGVGb3J3YXJkLCBzZWxlY3RQYXJlbnROb2RlLCBzZWxlY3RUZXh0YmxvY2tFbmQsIHNlbGVjdFRleHRibG9ja1N0YXJ0LCBzZXRCbG9ja1R5cGUsIHNwbGl0QmxvY2ssIHNwbGl0QmxvY2tLZWVwTWFya3MsIHRvZ2dsZU1hcmssIHdyYXBJbiB9O1xuIiwiaW1wb3J0IHsgUGx1Z2luLCBQbHVnaW5LZXksIFRleHRTZWxlY3Rpb24sIFNlbGVjdGlvbiwgTm9kZVNlbGVjdGlvbiwgRWRpdG9yU3RhdGUgfSBmcm9tICdwcm9zZW1pcnJvci1zdGF0ZSc7XG5pbXBvcnQgeyBFZGl0b3JWaWV3IH0gZnJvbSAncHJvc2VtaXJyb3Itdmlldyc7XG5pbXBvcnQgeyBrZXltYXAgfSBmcm9tICdwcm9zZW1pcnJvci1rZXltYXAnO1xuaW1wb3J0IHsgU2NoZW1hLCBGcmFnbWVudCwgRE9NUGFyc2VyLCBTbGljZSwgRE9NU2VyaWFsaXplciwgTm9kZSBhcyBOb2RlJDEgfSBmcm9tICdwcm9zZW1pcnJvci1tb2RlbCc7XG5pbXBvcnQgeyBsaWZ0VGFyZ2V0LCBSZXBsYWNlU3RlcCwgUmVwbGFjZUFyb3VuZFN0ZXAsIGNhblNwbGl0LCBjYW5Kb2luLCBUcmFuc2Zvcm0sIGZpbmRXcmFwcGluZyB9IGZyb20gJ3Byb3NlbWlycm9yLXRyYW5zZm9ybSc7XG5pbXBvcnQgeyBjcmVhdGVQYXJhZ3JhcGhOZWFyIGFzIGNyZWF0ZVBhcmFncmFwaE5lYXIkMSwgZGVsZXRlU2VsZWN0aW9uIGFzIGRlbGV0ZVNlbGVjdGlvbiQxLCBleGl0Q29kZSBhcyBleGl0Q29kZSQxLCBqb2luQmFja3dhcmQgYXMgam9pbkJhY2t3YXJkJDEsIGpvaW5Gb3J3YXJkIGFzIGpvaW5Gb3J3YXJkJDEsIGxpZnQgYXMgbGlmdCQxLCBsaWZ0RW1wdHlCbG9jayBhcyBsaWZ0RW1wdHlCbG9jayQxLCBuZXdsaW5lSW5Db2RlIGFzIG5ld2xpbmVJbkNvZGUkMSwgc2VsZWN0Tm9kZUJhY2t3YXJkIGFzIHNlbGVjdE5vZGVCYWNrd2FyZCQxLCBzZWxlY3ROb2RlRm9yd2FyZCBhcyBzZWxlY3ROb2RlRm9yd2FyZCQxLCBzZWxlY3RQYXJlbnROb2RlIGFzIHNlbGVjdFBhcmVudE5vZGUkMSwgc2VsZWN0VGV4dGJsb2NrRW5kIGFzIHNlbGVjdFRleHRibG9ja0VuZCQxLCBzZWxlY3RUZXh0YmxvY2tTdGFydCBhcyBzZWxlY3RUZXh0YmxvY2tTdGFydCQxLCBzZXRCbG9ja1R5cGUsIHdyYXBJbiBhcyB3cmFwSW4kMSB9IGZyb20gJ3Byb3NlbWlycm9yLWNvbW1hbmRzJztcbmltcG9ydCB7IGxpZnRMaXN0SXRlbSBhcyBsaWZ0TGlzdEl0ZW0kMSwgc2lua0xpc3RJdGVtIGFzIHNpbmtMaXN0SXRlbSQxLCB3cmFwSW5MaXN0IGFzIHdyYXBJbkxpc3QkMSB9IGZyb20gJ3Byb3NlbWlycm9yLXNjaGVtYS1saXN0JztcblxuZnVuY3Rpb24gY3JlYXRlQ2hhaW5hYmxlU3RhdGUoY29uZmlnKSB7XHJcbiAgICBjb25zdCB7IHN0YXRlLCB0cmFuc2FjdGlvbiB9ID0gY29uZmlnO1xyXG4gICAgbGV0IHsgc2VsZWN0aW9uIH0gPSB0cmFuc2FjdGlvbjtcclxuICAgIGxldCB7IGRvYyB9ID0gdHJhbnNhY3Rpb247XHJcbiAgICBsZXQgeyBzdG9yZWRNYXJrcyB9ID0gdHJhbnNhY3Rpb247XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIC4uLnN0YXRlLFxyXG4gICAgICAgIGFwcGx5OiBzdGF0ZS5hcHBseS5iaW5kKHN0YXRlKSxcclxuICAgICAgICBhcHBseVRyYW5zYWN0aW9uOiBzdGF0ZS5hcHBseVRyYW5zYWN0aW9uLmJpbmQoc3RhdGUpLFxyXG4gICAgICAgIGZpbHRlclRyYW5zYWN0aW9uOiBzdGF0ZS5maWx0ZXJUcmFuc2FjdGlvbixcclxuICAgICAgICBwbHVnaW5zOiBzdGF0ZS5wbHVnaW5zLFxyXG4gICAgICAgIHNjaGVtYTogc3RhdGUuc2NoZW1hLFxyXG4gICAgICAgIHJlY29uZmlndXJlOiBzdGF0ZS5yZWNvbmZpZ3VyZS5iaW5kKHN0YXRlKSxcclxuICAgICAgICB0b0pTT046IHN0YXRlLnRvSlNPTi5iaW5kKHN0YXRlKSxcclxuICAgICAgICBnZXQgc3RvcmVkTWFya3MoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBzdG9yZWRNYXJrcztcclxuICAgICAgICB9LFxyXG4gICAgICAgIGdldCBzZWxlY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBzZWxlY3Rpb247XHJcbiAgICAgICAgfSxcclxuICAgICAgICBnZXQgZG9jKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZG9jO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZ2V0IHRyKCkge1xyXG4gICAgICAgICAgICBzZWxlY3Rpb24gPSB0cmFuc2FjdGlvbi5zZWxlY3Rpb247XHJcbiAgICAgICAgICAgIGRvYyA9IHRyYW5zYWN0aW9uLmRvYztcclxuICAgICAgICAgICAgc3RvcmVkTWFya3MgPSB0cmFuc2FjdGlvbi5zdG9yZWRNYXJrcztcclxuICAgICAgICAgICAgcmV0dXJuIHRyYW5zYWN0aW9uO1xyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG59XG5cbmNsYXNzIENvbW1hbmRNYW5hZ2VyIHtcclxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcbiAgICAgICAgdGhpcy5lZGl0b3IgPSBwcm9wcy5lZGl0b3I7XHJcbiAgICAgICAgdGhpcy5yYXdDb21tYW5kcyA9IHRoaXMuZWRpdG9yLmV4dGVuc2lvbk1hbmFnZXIuY29tbWFuZHM7XHJcbiAgICAgICAgdGhpcy5jdXN0b21TdGF0ZSA9IHByb3BzLnN0YXRlO1xyXG4gICAgfVxyXG4gICAgZ2V0IGhhc0N1c3RvbVN0YXRlKCkge1xyXG4gICAgICAgIHJldHVybiAhIXRoaXMuY3VzdG9tU3RhdGU7XHJcbiAgICB9XHJcbiAgICBnZXQgc3RhdGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY3VzdG9tU3RhdGUgfHwgdGhpcy5lZGl0b3Iuc3RhdGU7XHJcbiAgICB9XHJcbiAgICBnZXQgY29tbWFuZHMoKSB7XHJcbiAgICAgICAgY29uc3QgeyByYXdDb21tYW5kcywgZWRpdG9yLCBzdGF0ZSB9ID0gdGhpcztcclxuICAgICAgICBjb25zdCB7IHZpZXcgfSA9IGVkaXRvcjtcclxuICAgICAgICBjb25zdCB7IHRyIH0gPSBzdGF0ZTtcclxuICAgICAgICBjb25zdCBwcm9wcyA9IHRoaXMuYnVpbGRQcm9wcyh0cik7XHJcbiAgICAgICAgcmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhPYmplY3RcclxuICAgICAgICAgICAgLmVudHJpZXMocmF3Q29tbWFuZHMpXHJcbiAgICAgICAgICAgIC5tYXAoKFtuYW1lLCBjb21tYW5kXSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBtZXRob2QgPSAoLi4uYXJncykgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY2FsbGJhY2sgPSBjb21tYW5kKC4uLmFyZ3MpKHByb3BzKTtcclxuICAgICAgICAgICAgICAgIGlmICghdHIuZ2V0TWV0YSgncHJldmVudERpc3BhdGNoJykgJiYgIXRoaXMuaGFzQ3VzdG9tU3RhdGUpIHtcclxuICAgICAgICAgICAgICAgICAgICB2aWV3LmRpc3BhdGNoKHRyKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjaztcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgcmV0dXJuIFtuYW1lLCBtZXRob2RdO1xyXG4gICAgICAgIH0pKTtcclxuICAgIH1cclxuICAgIGdldCBjaGFpbigpIHtcclxuICAgICAgICByZXR1cm4gKCkgPT4gdGhpcy5jcmVhdGVDaGFpbigpO1xyXG4gICAgfVxyXG4gICAgZ2V0IGNhbigpIHtcclxuICAgICAgICByZXR1cm4gKCkgPT4gdGhpcy5jcmVhdGVDYW4oKTtcclxuICAgIH1cclxuICAgIGNyZWF0ZUNoYWluKHN0YXJ0VHIsIHNob3VsZERpc3BhdGNoID0gdHJ1ZSkge1xyXG4gICAgICAgIGNvbnN0IHsgcmF3Q29tbWFuZHMsIGVkaXRvciwgc3RhdGUgfSA9IHRoaXM7XHJcbiAgICAgICAgY29uc3QgeyB2aWV3IH0gPSBlZGl0b3I7XHJcbiAgICAgICAgY29uc3QgY2FsbGJhY2tzID0gW107XHJcbiAgICAgICAgY29uc3QgaGFzU3RhcnRUcmFuc2FjdGlvbiA9ICEhc3RhcnRUcjtcclxuICAgICAgICBjb25zdCB0ciA9IHN0YXJ0VHIgfHwgc3RhdGUudHI7XHJcbiAgICAgICAgY29uc3QgcnVuID0gKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIWhhc1N0YXJ0VHJhbnNhY3Rpb25cclxuICAgICAgICAgICAgICAgICYmIHNob3VsZERpc3BhdGNoXHJcbiAgICAgICAgICAgICAgICAmJiAhdHIuZ2V0TWV0YSgncHJldmVudERpc3BhdGNoJylcclxuICAgICAgICAgICAgICAgICYmICF0aGlzLmhhc0N1c3RvbVN0YXRlKSB7XHJcbiAgICAgICAgICAgICAgICB2aWV3LmRpc3BhdGNoKHRyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2tzLmV2ZXJ5KGNhbGxiYWNrID0+IGNhbGxiYWNrID09PSB0cnVlKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIGNvbnN0IGNoYWluID0ge1xyXG4gICAgICAgICAgICAuLi5PYmplY3QuZnJvbUVudHJpZXMoT2JqZWN0LmVudHJpZXMocmF3Q29tbWFuZHMpLm1hcCgoW25hbWUsIGNvbW1hbmRdKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjaGFpbmVkQ29tbWFuZCA9ICguLi5hcmdzKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJvcHMgPSB0aGlzLmJ1aWxkUHJvcHModHIsIHNob3VsZERpc3BhdGNoKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjYWxsYmFjayA9IGNvbW1hbmQoLi4uYXJncykocHJvcHMpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2hhaW47XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtuYW1lLCBjaGFpbmVkQ29tbWFuZF07XHJcbiAgICAgICAgICAgIH0pKSxcclxuICAgICAgICAgICAgcnVuLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIGNoYWluO1xyXG4gICAgfVxyXG4gICAgY3JlYXRlQ2FuKHN0YXJ0VHIpIHtcclxuICAgICAgICBjb25zdCB7IHJhd0NvbW1hbmRzLCBzdGF0ZSB9ID0gdGhpcztcclxuICAgICAgICBjb25zdCBkaXNwYXRjaCA9IHVuZGVmaW5lZDtcclxuICAgICAgICBjb25zdCB0ciA9IHN0YXJ0VHIgfHwgc3RhdGUudHI7XHJcbiAgICAgICAgY29uc3QgcHJvcHMgPSB0aGlzLmJ1aWxkUHJvcHModHIsIGRpc3BhdGNoKTtcclxuICAgICAgICBjb25zdCBmb3JtYXR0ZWRDb21tYW5kcyA9IE9iamVjdC5mcm9tRW50cmllcyhPYmplY3RcclxuICAgICAgICAgICAgLmVudHJpZXMocmF3Q29tbWFuZHMpXHJcbiAgICAgICAgICAgIC5tYXAoKFtuYW1lLCBjb21tYW5kXSkgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gW25hbWUsICguLi5hcmdzKSA9PiBjb21tYW5kKC4uLmFyZ3MpKHsgLi4ucHJvcHMsIGRpc3BhdGNoIH0pXTtcclxuICAgICAgICB9KSk7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgLi4uZm9ybWF0dGVkQ29tbWFuZHMsXHJcbiAgICAgICAgICAgIGNoYWluOiAoKSA9PiB0aGlzLmNyZWF0ZUNoYWluKHRyLCBkaXNwYXRjaCksXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIGJ1aWxkUHJvcHModHIsIHNob3VsZERpc3BhdGNoID0gdHJ1ZSkge1xyXG4gICAgICAgIGNvbnN0IHsgcmF3Q29tbWFuZHMsIGVkaXRvciwgc3RhdGUgfSA9IHRoaXM7XHJcbiAgICAgICAgY29uc3QgeyB2aWV3IH0gPSBlZGl0b3I7XHJcbiAgICAgICAgaWYgKHN0YXRlLnN0b3JlZE1hcmtzKSB7XHJcbiAgICAgICAgICAgIHRyLnNldFN0b3JlZE1hcmtzKHN0YXRlLnN0b3JlZE1hcmtzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcHJvcHMgPSB7XHJcbiAgICAgICAgICAgIHRyLFxyXG4gICAgICAgICAgICBlZGl0b3IsXHJcbiAgICAgICAgICAgIHZpZXcsXHJcbiAgICAgICAgICAgIHN0YXRlOiBjcmVhdGVDaGFpbmFibGVTdGF0ZSh7XHJcbiAgICAgICAgICAgICAgICBzdGF0ZSxcclxuICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uOiB0cixcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgIGRpc3BhdGNoOiBzaG91bGREaXNwYXRjaFxyXG4gICAgICAgICAgICAgICAgPyAoKSA9PiB1bmRlZmluZWRcclxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICBjaGFpbjogKCkgPT4gdGhpcy5jcmVhdGVDaGFpbih0ciksXHJcbiAgICAgICAgICAgIGNhbjogKCkgPT4gdGhpcy5jcmVhdGVDYW4odHIpLFxyXG4gICAgICAgICAgICBnZXQgY29tbWFuZHMoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKE9iamVjdFxyXG4gICAgICAgICAgICAgICAgICAgIC5lbnRyaWVzKHJhd0NvbW1hbmRzKVxyXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoKFtuYW1lLCBjb21tYW5kXSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbbmFtZSwgKC4uLmFyZ3MpID0+IGNvbW1hbmQoLi4uYXJncykocHJvcHMpXTtcclxuICAgICAgICAgICAgICAgIH0pKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBwcm9wcztcclxuICAgIH1cclxufVxuXG5jbGFzcyBFdmVudEVtaXR0ZXIge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5jYWxsYmFja3MgPSB7fTtcclxuICAgIH1cclxuICAgIG9uKGV2ZW50LCBmbikge1xyXG4gICAgICAgIGlmICghdGhpcy5jYWxsYmFja3NbZXZlbnRdKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2FsbGJhY2tzW2V2ZW50XSA9IFtdO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmNhbGxiYWNrc1tldmVudF0ucHVzaChmbik7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICBlbWl0KGV2ZW50LCAuLi5hcmdzKSB7XHJcbiAgICAgICAgY29uc3QgY2FsbGJhY2tzID0gdGhpcy5jYWxsYmFja3NbZXZlbnRdO1xyXG4gICAgICAgIGlmIChjYWxsYmFja3MpIHtcclxuICAgICAgICAgICAgY2FsbGJhY2tzLmZvckVhY2goY2FsbGJhY2sgPT4gY2FsbGJhY2suYXBwbHkodGhpcywgYXJncykpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICAgIG9mZihldmVudCwgZm4pIHtcclxuICAgICAgICBjb25zdCBjYWxsYmFja3MgPSB0aGlzLmNhbGxiYWNrc1tldmVudF07XHJcbiAgICAgICAgaWYgKGNhbGxiYWNrcykge1xyXG4gICAgICAgICAgICBpZiAoZm4pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2FsbGJhY2tzW2V2ZW50XSA9IGNhbGxiYWNrcy5maWx0ZXIoY2FsbGJhY2sgPT4gY2FsbGJhY2sgIT09IGZuKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmNhbGxiYWNrc1tldmVudF07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICByZW1vdmVBbGxMaXN0ZW5lcnMoKSB7XHJcbiAgICAgICAgdGhpcy5jYWxsYmFja3MgPSB7fTtcclxuICAgIH1cclxufVxuXG5mdW5jdGlvbiBnZXRFeHRlbnNpb25GaWVsZChleHRlbnNpb24sIGZpZWxkLCBjb250ZXh0KSB7XHJcbiAgICBpZiAoZXh0ZW5zaW9uLmNvbmZpZ1tmaWVsZF0gPT09IHVuZGVmaW5lZCAmJiBleHRlbnNpb24ucGFyZW50KSB7XHJcbiAgICAgICAgcmV0dXJuIGdldEV4dGVuc2lvbkZpZWxkKGV4dGVuc2lvbi5wYXJlbnQsIGZpZWxkLCBjb250ZXh0KTtcclxuICAgIH1cclxuICAgIGlmICh0eXBlb2YgZXh0ZW5zaW9uLmNvbmZpZ1tmaWVsZF0gPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICBjb25zdCB2YWx1ZSA9IGV4dGVuc2lvbi5jb25maWdbZmllbGRdLmJpbmQoe1xyXG4gICAgICAgICAgICAuLi5jb250ZXh0LFxyXG4gICAgICAgICAgICBwYXJlbnQ6IGV4dGVuc2lvbi5wYXJlbnRcclxuICAgICAgICAgICAgICAgID8gZ2V0RXh0ZW5zaW9uRmllbGQoZXh0ZW5zaW9uLnBhcmVudCwgZmllbGQsIGNvbnRleHQpXHJcbiAgICAgICAgICAgICAgICA6IG51bGwsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGV4dGVuc2lvbi5jb25maWdbZmllbGRdO1xyXG59XG5cbmZ1bmN0aW9uIHNwbGl0RXh0ZW5zaW9ucyhleHRlbnNpb25zKSB7XHJcbiAgICBjb25zdCBiYXNlRXh0ZW5zaW9ucyA9IGV4dGVuc2lvbnMuZmlsdGVyKGV4dGVuc2lvbiA9PiBleHRlbnNpb24udHlwZSA9PT0gJ2V4dGVuc2lvbicpO1xyXG4gICAgY29uc3Qgbm9kZUV4dGVuc2lvbnMgPSBleHRlbnNpb25zLmZpbHRlcihleHRlbnNpb24gPT4gZXh0ZW5zaW9uLnR5cGUgPT09ICdub2RlJyk7XHJcbiAgICBjb25zdCBtYXJrRXh0ZW5zaW9ucyA9IGV4dGVuc2lvbnMuZmlsdGVyKGV4dGVuc2lvbiA9PiBleHRlbnNpb24udHlwZSA9PT0gJ21hcmsnKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgYmFzZUV4dGVuc2lvbnMsXHJcbiAgICAgICAgbm9kZUV4dGVuc2lvbnMsXHJcbiAgICAgICAgbWFya0V4dGVuc2lvbnMsXHJcbiAgICB9O1xyXG59XG5cbi8qKlxyXG4gKiBHZXQgYSBsaXN0IG9mIGFsbCBleHRlbnNpb24gYXR0cmlidXRlcyBkZWZpbmVkIGluIGBhZGRBdHRyaWJ1dGVgIGFuZCBgYWRkR2xvYmFsQXR0cmlidXRlYC5cclxuICogQHBhcmFtIGV4dGVuc2lvbnMgTGlzdCBvZiBleHRlbnNpb25zXHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRBdHRyaWJ1dGVzRnJvbUV4dGVuc2lvbnMoZXh0ZW5zaW9ucykge1xyXG4gICAgY29uc3QgZXh0ZW5zaW9uQXR0cmlidXRlcyA9IFtdO1xyXG4gICAgY29uc3QgeyBub2RlRXh0ZW5zaW9ucywgbWFya0V4dGVuc2lvbnMgfSA9IHNwbGl0RXh0ZW5zaW9ucyhleHRlbnNpb25zKTtcclxuICAgIGNvbnN0IG5vZGVBbmRNYXJrRXh0ZW5zaW9ucyA9IFsuLi5ub2RlRXh0ZW5zaW9ucywgLi4ubWFya0V4dGVuc2lvbnNdO1xyXG4gICAgY29uc3QgZGVmYXVsdEF0dHJpYnV0ZSA9IHtcclxuICAgICAgICBkZWZhdWx0OiBudWxsLFxyXG4gICAgICAgIHJlbmRlcmVkOiB0cnVlLFxyXG4gICAgICAgIHJlbmRlckhUTUw6IG51bGwsXHJcbiAgICAgICAgcGFyc2VIVE1MOiBudWxsLFxyXG4gICAgICAgIGtlZXBPblNwbGl0OiB0cnVlLFxyXG4gICAgICAgIGlzUmVxdWlyZWQ6IGZhbHNlLFxyXG4gICAgfTtcclxuICAgIGV4dGVuc2lvbnMuZm9yRWFjaChleHRlbnNpb24gPT4ge1xyXG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSB7XHJcbiAgICAgICAgICAgIG5hbWU6IGV4dGVuc2lvbi5uYW1lLFxyXG4gICAgICAgICAgICBvcHRpb25zOiBleHRlbnNpb24ub3B0aW9ucyxcclxuICAgICAgICAgICAgc3RvcmFnZTogZXh0ZW5zaW9uLnN0b3JhZ2UsXHJcbiAgICAgICAgfTtcclxuICAgICAgICBjb25zdCBhZGRHbG9iYWxBdHRyaWJ1dGVzID0gZ2V0RXh0ZW5zaW9uRmllbGQoZXh0ZW5zaW9uLCAnYWRkR2xvYmFsQXR0cmlidXRlcycsIGNvbnRleHQpO1xyXG4gICAgICAgIGlmICghYWRkR2xvYmFsQXR0cmlidXRlcykge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFRPRE86IHJlbW92ZSBgYXMgR2xvYmFsQXR0cmlidXRlc2BcclxuICAgICAgICBjb25zdCBnbG9iYWxBdHRyaWJ1dGVzID0gYWRkR2xvYmFsQXR0cmlidXRlcygpO1xyXG4gICAgICAgIGdsb2JhbEF0dHJpYnV0ZXMuZm9yRWFjaChnbG9iYWxBdHRyaWJ1dGUgPT4ge1xyXG4gICAgICAgICAgICBnbG9iYWxBdHRyaWJ1dGUudHlwZXMuZm9yRWFjaCh0eXBlID0+IHtcclxuICAgICAgICAgICAgICAgIE9iamVjdFxyXG4gICAgICAgICAgICAgICAgICAgIC5lbnRyaWVzKGdsb2JhbEF0dHJpYnV0ZS5hdHRyaWJ1dGVzKVxyXG4gICAgICAgICAgICAgICAgICAgIC5mb3JFYWNoKChbbmFtZSwgYXR0cmlidXRlXSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGV4dGVuc2lvbkF0dHJpYnV0ZXMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uZGVmYXVsdEF0dHJpYnV0ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLmF0dHJpYnV0ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgbm9kZUFuZE1hcmtFeHRlbnNpb25zLmZvckVhY2goZXh0ZW5zaW9uID0+IHtcclxuICAgICAgICBjb25zdCBjb250ZXh0ID0ge1xyXG4gICAgICAgICAgICBuYW1lOiBleHRlbnNpb24ubmFtZSxcclxuICAgICAgICAgICAgb3B0aW9uczogZXh0ZW5zaW9uLm9wdGlvbnMsXHJcbiAgICAgICAgICAgIHN0b3JhZ2U6IGV4dGVuc2lvbi5zdG9yYWdlLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgY29uc3QgYWRkQXR0cmlidXRlcyA9IGdldEV4dGVuc2lvbkZpZWxkKGV4dGVuc2lvbiwgJ2FkZEF0dHJpYnV0ZXMnLCBjb250ZXh0KTtcclxuICAgICAgICBpZiAoIWFkZEF0dHJpYnV0ZXMpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBUT0RPOiByZW1vdmUgYGFzIEF0dHJpYnV0ZXNgXHJcbiAgICAgICAgY29uc3QgYXR0cmlidXRlcyA9IGFkZEF0dHJpYnV0ZXMoKTtcclxuICAgICAgICBPYmplY3RcclxuICAgICAgICAgICAgLmVudHJpZXMoYXR0cmlidXRlcylcclxuICAgICAgICAgICAgLmZvckVhY2goKFtuYW1lLCBhdHRyaWJ1dGVdKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IG1lcmdlZEF0dHIgPSB7XHJcbiAgICAgICAgICAgICAgICAuLi5kZWZhdWx0QXR0cmlidXRlLFxyXG4gICAgICAgICAgICAgICAgLi4uYXR0cmlidXRlLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBpZiAoYXR0cmlidXRlLmlzUmVxdWlyZWQgJiYgYXR0cmlidXRlLmRlZmF1bHQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIG1lcmdlZEF0dHIuZGVmYXVsdDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBleHRlbnNpb25BdHRyaWJ1dGVzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgdHlwZTogZXh0ZW5zaW9uLm5hbWUsXHJcbiAgICAgICAgICAgICAgICBuYW1lLFxyXG4gICAgICAgICAgICAgICAgYXR0cmlidXRlOiBtZXJnZWRBdHRyLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIGV4dGVuc2lvbkF0dHJpYnV0ZXM7XHJcbn1cblxuZnVuY3Rpb24gZ2V0Tm9kZVR5cGUobmFtZU9yVHlwZSwgc2NoZW1hKSB7XHJcbiAgICBpZiAodHlwZW9mIG5hbWVPclR5cGUgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgaWYgKCFzY2hlbWEubm9kZXNbbmFtZU9yVHlwZV0pIHtcclxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoYFRoZXJlIGlzIG5vIG5vZGUgdHlwZSBuYW1lZCAnJHtuYW1lT3JUeXBlfScuIE1heWJlIHlvdSBmb3Jnb3QgdG8gYWRkIHRoZSBleHRlbnNpb24/YCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzY2hlbWEubm9kZXNbbmFtZU9yVHlwZV07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmFtZU9yVHlwZTtcclxufVxuXG5mdW5jdGlvbiBtZXJnZUF0dHJpYnV0ZXMoLi4ub2JqZWN0cykge1xyXG4gICAgcmV0dXJuIG9iamVjdHNcclxuICAgICAgICAuZmlsdGVyKGl0ZW0gPT4gISFpdGVtKVxyXG4gICAgICAgIC5yZWR1Y2UoKGl0ZW1zLCBpdGVtKSA9PiB7XHJcbiAgICAgICAgY29uc3QgbWVyZ2VkQXR0cmlidXRlcyA9IHsgLi4uaXRlbXMgfTtcclxuICAgICAgICBPYmplY3QuZW50cmllcyhpdGVtKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcclxuICAgICAgICAgICAgY29uc3QgZXhpc3RzID0gbWVyZ2VkQXR0cmlidXRlc1trZXldO1xyXG4gICAgICAgICAgICBpZiAoIWV4aXN0cykge1xyXG4gICAgICAgICAgICAgICAgbWVyZ2VkQXR0cmlidXRlc1trZXldID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGtleSA9PT0gJ2NsYXNzJykge1xyXG4gICAgICAgICAgICAgICAgbWVyZ2VkQXR0cmlidXRlc1trZXldID0gW21lcmdlZEF0dHJpYnV0ZXNba2V5XSwgdmFsdWVdLmpvaW4oJyAnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChrZXkgPT09ICdzdHlsZScpIHtcclxuICAgICAgICAgICAgICAgIG1lcmdlZEF0dHJpYnV0ZXNba2V5XSA9IFttZXJnZWRBdHRyaWJ1dGVzW2tleV0sIHZhbHVlXS5qb2luKCc7ICcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbWVyZ2VkQXR0cmlidXRlc1trZXldID0gdmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gbWVyZ2VkQXR0cmlidXRlcztcclxuICAgIH0sIHt9KTtcclxufVxuXG5mdW5jdGlvbiBnZXRSZW5kZXJlZEF0dHJpYnV0ZXMobm9kZU9yTWFyaywgZXh0ZW5zaW9uQXR0cmlidXRlcykge1xyXG4gICAgcmV0dXJuIGV4dGVuc2lvbkF0dHJpYnV0ZXNcclxuICAgICAgICAuZmlsdGVyKGl0ZW0gPT4gaXRlbS5hdHRyaWJ1dGUucmVuZGVyZWQpXHJcbiAgICAgICAgLm1hcChpdGVtID0+IHtcclxuICAgICAgICBpZiAoIWl0ZW0uYXR0cmlidXRlLnJlbmRlckhUTUwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIFtpdGVtLm5hbWVdOiBub2RlT3JNYXJrLmF0dHJzW2l0ZW0ubmFtZV0sXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBpdGVtLmF0dHJpYnV0ZS5yZW5kZXJIVE1MKG5vZGVPck1hcmsuYXR0cnMpIHx8IHt9O1xyXG4gICAgfSlcclxuICAgICAgICAucmVkdWNlKChhdHRyaWJ1dGVzLCBhdHRyaWJ1dGUpID0+IG1lcmdlQXR0cmlidXRlcyhhdHRyaWJ1dGVzLCBhdHRyaWJ1dGUpLCB7fSk7XHJcbn1cblxuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJztcclxufVxuXG4vKipcclxuICogT3B0aW9uYWxseSBjYWxscyBgdmFsdWVgIGFzIGEgZnVuY3Rpb24uXHJcbiAqIE90aGVyd2lzZSBpdCBpcyByZXR1cm5lZCBkaXJlY3RseS5cclxuICogQHBhcmFtIHZhbHVlIEZ1bmN0aW9uIG9yIGFueSB2YWx1ZS5cclxuICogQHBhcmFtIGNvbnRleHQgT3B0aW9uYWwgY29udGV4dCB0byBiaW5kIHRvIGZ1bmN0aW9uLlxyXG4gKiBAcGFyYW0gcHJvcHMgT3B0aW9uYWwgcHJvcHMgdG8gcGFzcyB0byBmdW5jdGlvbi5cclxuICovXHJcbmZ1bmN0aW9uIGNhbGxPclJldHVybih2YWx1ZSwgY29udGV4dCA9IHVuZGVmaW5lZCwgLi4ucHJvcHMpIHtcclxuICAgIGlmIChpc0Z1bmN0aW9uKHZhbHVlKSkge1xyXG4gICAgICAgIGlmIChjb250ZXh0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS5iaW5kKGNvbnRleHQpKC4uLnByb3BzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlKC4uLnByb3BzKTtcclxuICAgIH1cclxuICAgIHJldHVybiB2YWx1ZTtcclxufVxuXG5mdW5jdGlvbiBpc0VtcHR5T2JqZWN0KHZhbHVlID0ge30pIHtcclxuICAgIHJldHVybiBPYmplY3Qua2V5cyh2YWx1ZSkubGVuZ3RoID09PSAwICYmIHZhbHVlLmNvbnN0cnVjdG9yID09PSBPYmplY3Q7XHJcbn1cblxuZnVuY3Rpb24gZnJvbVN0cmluZyh2YWx1ZSkge1xyXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpIHtcclxuICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICB9XHJcbiAgICBpZiAodmFsdWUubWF0Y2goL15bKy1dPyg/OlxcZCpcXC4pP1xcZCskLykpIHtcclxuICAgICAgICByZXR1cm4gTnVtYmVyKHZhbHVlKTtcclxuICAgIH1cclxuICAgIGlmICh2YWx1ZSA9PT0gJ3RydWUnKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICBpZiAodmFsdWUgPT09ICdmYWxzZScpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdmFsdWU7XHJcbn1cblxuLyoqXHJcbiAqIFRoaXMgZnVuY3Rpb24gbWVyZ2VzIGV4dGVuc2lvbiBhdHRyaWJ1dGVzIGludG8gcGFyc2VydWxlIGF0dHJpYnV0ZXMgKGBhdHRyc2Agb3IgYGdldEF0dHJzYCkuXHJcbiAqIENhbmNlbHMgd2hlbiBgZ2V0QXR0cnNgIHJldHVybmVkIGBmYWxzZWAuXHJcbiAqIEBwYXJhbSBwYXJzZVJ1bGUgUHJvc2VNaXJyb3IgUGFyc2VSdWxlXHJcbiAqIEBwYXJhbSBleHRlbnNpb25BdHRyaWJ1dGVzIExpc3Qgb2YgYXR0cmlidXRlcyB0byBpbmplY3RcclxuICovXHJcbmZ1bmN0aW9uIGluamVjdEV4dGVuc2lvbkF0dHJpYnV0ZXNUb1BhcnNlUnVsZShwYXJzZVJ1bGUsIGV4dGVuc2lvbkF0dHJpYnV0ZXMpIHtcclxuICAgIGlmIChwYXJzZVJ1bGUuc3R5bGUpIHtcclxuICAgICAgICByZXR1cm4gcGFyc2VSdWxlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICAuLi5wYXJzZVJ1bGUsXHJcbiAgICAgICAgZ2V0QXR0cnM6IG5vZGUgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBvbGRBdHRyaWJ1dGVzID0gcGFyc2VSdWxlLmdldEF0dHJzXHJcbiAgICAgICAgICAgICAgICA/IHBhcnNlUnVsZS5nZXRBdHRycyhub2RlKVxyXG4gICAgICAgICAgICAgICAgOiBwYXJzZVJ1bGUuYXR0cnM7XHJcbiAgICAgICAgICAgIGlmIChvbGRBdHRyaWJ1dGVzID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IG5ld0F0dHJpYnV0ZXMgPSBleHRlbnNpb25BdHRyaWJ1dGVzLnJlZHVjZSgoaXRlbXMsIGl0ZW0pID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gaXRlbS5hdHRyaWJ1dGUucGFyc2VIVE1MXHJcbiAgICAgICAgICAgICAgICAgICAgPyBpdGVtLmF0dHJpYnV0ZS5wYXJzZUhUTUwobm9kZSlcclxuICAgICAgICAgICAgICAgICAgICA6IGZyb21TdHJpbmcobm9kZS5nZXRBdHRyaWJ1dGUoaXRlbS5uYW1lKSk7XHJcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpdGVtcztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgLi4uaXRlbXMsXHJcbiAgICAgICAgICAgICAgICAgICAgW2l0ZW0ubmFtZV06IHZhbHVlLFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfSwge30pO1xyXG4gICAgICAgICAgICByZXR1cm4geyAuLi5vbGRBdHRyaWJ1dGVzLCAuLi5uZXdBdHRyaWJ1dGVzIH07XHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbn1cblxuZnVuY3Rpb24gY2xlYW5VcFNjaGVtYUl0ZW0oZGF0YSkge1xyXG4gICAgcmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhPYmplY3QuZW50cmllcyhkYXRhKS5maWx0ZXIoKFtrZXksIHZhbHVlXSkgPT4ge1xyXG4gICAgICAgIGlmIChrZXkgPT09ICdhdHRycycgJiYgaXNFbXB0eU9iamVjdCh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09IHVuZGVmaW5lZDtcclxuICAgIH0pKTtcclxufVxyXG5mdW5jdGlvbiBnZXRTY2hlbWFCeVJlc29sdmVkRXh0ZW5zaW9ucyhleHRlbnNpb25zKSB7XHJcbiAgICB2YXIgX2E7XHJcbiAgICBjb25zdCBhbGxBdHRyaWJ1dGVzID0gZ2V0QXR0cmlidXRlc0Zyb21FeHRlbnNpb25zKGV4dGVuc2lvbnMpO1xyXG4gICAgY29uc3QgeyBub2RlRXh0ZW5zaW9ucywgbWFya0V4dGVuc2lvbnMgfSA9IHNwbGl0RXh0ZW5zaW9ucyhleHRlbnNpb25zKTtcclxuICAgIGNvbnN0IHRvcE5vZGUgPSAoX2EgPSBub2RlRXh0ZW5zaW9ucy5maW5kKGV4dGVuc2lvbiA9PiBnZXRFeHRlbnNpb25GaWVsZChleHRlbnNpb24sICd0b3BOb2RlJykpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubmFtZTtcclxuICAgIGNvbnN0IG5vZGVzID0gT2JqZWN0LmZyb21FbnRyaWVzKG5vZGVFeHRlbnNpb25zLm1hcChleHRlbnNpb24gPT4ge1xyXG4gICAgICAgIGNvbnN0IGV4dGVuc2lvbkF0dHJpYnV0ZXMgPSBhbGxBdHRyaWJ1dGVzLmZpbHRlcihhdHRyaWJ1dGUgPT4gYXR0cmlidXRlLnR5cGUgPT09IGV4dGVuc2lvbi5uYW1lKTtcclxuICAgICAgICBjb25zdCBjb250ZXh0ID0ge1xyXG4gICAgICAgICAgICBuYW1lOiBleHRlbnNpb24ubmFtZSxcclxuICAgICAgICAgICAgb3B0aW9uczogZXh0ZW5zaW9uLm9wdGlvbnMsXHJcbiAgICAgICAgICAgIHN0b3JhZ2U6IGV4dGVuc2lvbi5zdG9yYWdlLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgY29uc3QgZXh0cmFOb2RlRmllbGRzID0gZXh0ZW5zaW9ucy5yZWR1Y2UoKGZpZWxkcywgZSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBleHRlbmROb2RlU2NoZW1hID0gZ2V0RXh0ZW5zaW9uRmllbGQoZSwgJ2V4dGVuZE5vZGVTY2hlbWEnLCBjb250ZXh0KTtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIC4uLmZpZWxkcyxcclxuICAgICAgICAgICAgICAgIC4uLihleHRlbmROb2RlU2NoZW1hID8gZXh0ZW5kTm9kZVNjaGVtYShleHRlbnNpb24pIDoge30pLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH0sIHt9KTtcclxuICAgICAgICBjb25zdCBzY2hlbWEgPSBjbGVhblVwU2NoZW1hSXRlbSh7XHJcbiAgICAgICAgICAgIC4uLmV4dHJhTm9kZUZpZWxkcyxcclxuICAgICAgICAgICAgY29udGVudDogY2FsbE9yUmV0dXJuKGdldEV4dGVuc2lvbkZpZWxkKGV4dGVuc2lvbiwgJ2NvbnRlbnQnLCBjb250ZXh0KSksXHJcbiAgICAgICAgICAgIG1hcmtzOiBjYWxsT3JSZXR1cm4oZ2V0RXh0ZW5zaW9uRmllbGQoZXh0ZW5zaW9uLCAnbWFya3MnLCBjb250ZXh0KSksXHJcbiAgICAgICAgICAgIGdyb3VwOiBjYWxsT3JSZXR1cm4oZ2V0RXh0ZW5zaW9uRmllbGQoZXh0ZW5zaW9uLCAnZ3JvdXAnLCBjb250ZXh0KSksXHJcbiAgICAgICAgICAgIGlubGluZTogY2FsbE9yUmV0dXJuKGdldEV4dGVuc2lvbkZpZWxkKGV4dGVuc2lvbiwgJ2lubGluZScsIGNvbnRleHQpKSxcclxuICAgICAgICAgICAgYXRvbTogY2FsbE9yUmV0dXJuKGdldEV4dGVuc2lvbkZpZWxkKGV4dGVuc2lvbiwgJ2F0b20nLCBjb250ZXh0KSksXHJcbiAgICAgICAgICAgIHNlbGVjdGFibGU6IGNhbGxPclJldHVybihnZXRFeHRlbnNpb25GaWVsZChleHRlbnNpb24sICdzZWxlY3RhYmxlJywgY29udGV4dCkpLFxyXG4gICAgICAgICAgICBkcmFnZ2FibGU6IGNhbGxPclJldHVybihnZXRFeHRlbnNpb25GaWVsZChleHRlbnNpb24sICdkcmFnZ2FibGUnLCBjb250ZXh0KSksXHJcbiAgICAgICAgICAgIGNvZGU6IGNhbGxPclJldHVybihnZXRFeHRlbnNpb25GaWVsZChleHRlbnNpb24sICdjb2RlJywgY29udGV4dCkpLFxyXG4gICAgICAgICAgICBkZWZpbmluZzogY2FsbE9yUmV0dXJuKGdldEV4dGVuc2lvbkZpZWxkKGV4dGVuc2lvbiwgJ2RlZmluaW5nJywgY29udGV4dCkpLFxyXG4gICAgICAgICAgICBpc29sYXRpbmc6IGNhbGxPclJldHVybihnZXRFeHRlbnNpb25GaWVsZChleHRlbnNpb24sICdpc29sYXRpbmcnLCBjb250ZXh0KSksXHJcbiAgICAgICAgICAgIGF0dHJzOiBPYmplY3QuZnJvbUVudHJpZXMoZXh0ZW5zaW9uQXR0cmlidXRlcy5tYXAoZXh0ZW5zaW9uQXR0cmlidXRlID0+IHtcclxuICAgICAgICAgICAgICAgIHZhciBfYTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbZXh0ZW5zaW9uQXR0cmlidXRlLm5hbWUsIHsgZGVmYXVsdDogKF9hID0gZXh0ZW5zaW9uQXR0cmlidXRlID09PSBudWxsIHx8IGV4dGVuc2lvbkF0dHJpYnV0ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZXh0ZW5zaW9uQXR0cmlidXRlLmF0dHJpYnV0ZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmRlZmF1bHQgfV07XHJcbiAgICAgICAgICAgIH0pKSxcclxuICAgICAgICB9KTtcclxuICAgICAgICBjb25zdCBwYXJzZUhUTUwgPSBjYWxsT3JSZXR1cm4oZ2V0RXh0ZW5zaW9uRmllbGQoZXh0ZW5zaW9uLCAncGFyc2VIVE1MJywgY29udGV4dCkpO1xyXG4gICAgICAgIGlmIChwYXJzZUhUTUwpIHtcclxuICAgICAgICAgICAgc2NoZW1hLnBhcnNlRE9NID0gcGFyc2VIVE1MXHJcbiAgICAgICAgICAgICAgICAubWFwKHBhcnNlUnVsZSA9PiBpbmplY3RFeHRlbnNpb25BdHRyaWJ1dGVzVG9QYXJzZVJ1bGUocGFyc2VSdWxlLCBleHRlbnNpb25BdHRyaWJ1dGVzKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHJlbmRlckhUTUwgPSBnZXRFeHRlbnNpb25GaWVsZChleHRlbnNpb24sICdyZW5kZXJIVE1MJywgY29udGV4dCk7XHJcbiAgICAgICAgaWYgKHJlbmRlckhUTUwpIHtcclxuICAgICAgICAgICAgc2NoZW1hLnRvRE9NID0gbm9kZSA9PiByZW5kZXJIVE1MKHtcclxuICAgICAgICAgICAgICAgIG5vZGUsXHJcbiAgICAgICAgICAgICAgICBIVE1MQXR0cmlidXRlczogZ2V0UmVuZGVyZWRBdHRyaWJ1dGVzKG5vZGUsIGV4dGVuc2lvbkF0dHJpYnV0ZXMpLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcmVuZGVyVGV4dCA9IGdldEV4dGVuc2lvbkZpZWxkKGV4dGVuc2lvbiwgJ3JlbmRlclRleHQnLCBjb250ZXh0KTtcclxuICAgICAgICBpZiAocmVuZGVyVGV4dCkge1xyXG4gICAgICAgICAgICBzY2hlbWEudG9UZXh0ID0gcmVuZGVyVGV4dDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFtleHRlbnNpb24ubmFtZSwgc2NoZW1hXTtcclxuICAgIH0pKTtcclxuICAgIGNvbnN0IG1hcmtzID0gT2JqZWN0LmZyb21FbnRyaWVzKG1hcmtFeHRlbnNpb25zLm1hcChleHRlbnNpb24gPT4ge1xyXG4gICAgICAgIGNvbnN0IGV4dGVuc2lvbkF0dHJpYnV0ZXMgPSBhbGxBdHRyaWJ1dGVzLmZpbHRlcihhdHRyaWJ1dGUgPT4gYXR0cmlidXRlLnR5cGUgPT09IGV4dGVuc2lvbi5uYW1lKTtcclxuICAgICAgICBjb25zdCBjb250ZXh0ID0ge1xyXG4gICAgICAgICAgICBuYW1lOiBleHRlbnNpb24ubmFtZSxcclxuICAgICAgICAgICAgb3B0aW9uczogZXh0ZW5zaW9uLm9wdGlvbnMsXHJcbiAgICAgICAgICAgIHN0b3JhZ2U6IGV4dGVuc2lvbi5zdG9yYWdlLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgY29uc3QgZXh0cmFNYXJrRmllbGRzID0gZXh0ZW5zaW9ucy5yZWR1Y2UoKGZpZWxkcywgZSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBleHRlbmRNYXJrU2NoZW1hID0gZ2V0RXh0ZW5zaW9uRmllbGQoZSwgJ2V4dGVuZE1hcmtTY2hlbWEnLCBjb250ZXh0KTtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIC4uLmZpZWxkcyxcclxuICAgICAgICAgICAgICAgIC4uLihleHRlbmRNYXJrU2NoZW1hID8gZXh0ZW5kTWFya1NjaGVtYShleHRlbnNpb24pIDoge30pLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH0sIHt9KTtcclxuICAgICAgICBjb25zdCBzY2hlbWEgPSBjbGVhblVwU2NoZW1hSXRlbSh7XHJcbiAgICAgICAgICAgIC4uLmV4dHJhTWFya0ZpZWxkcyxcclxuICAgICAgICAgICAgaW5jbHVzaXZlOiBjYWxsT3JSZXR1cm4oZ2V0RXh0ZW5zaW9uRmllbGQoZXh0ZW5zaW9uLCAnaW5jbHVzaXZlJywgY29udGV4dCkpLFxyXG4gICAgICAgICAgICBleGNsdWRlczogY2FsbE9yUmV0dXJuKGdldEV4dGVuc2lvbkZpZWxkKGV4dGVuc2lvbiwgJ2V4Y2x1ZGVzJywgY29udGV4dCkpLFxyXG4gICAgICAgICAgICBncm91cDogY2FsbE9yUmV0dXJuKGdldEV4dGVuc2lvbkZpZWxkKGV4dGVuc2lvbiwgJ2dyb3VwJywgY29udGV4dCkpLFxyXG4gICAgICAgICAgICBzcGFubmluZzogY2FsbE9yUmV0dXJuKGdldEV4dGVuc2lvbkZpZWxkKGV4dGVuc2lvbiwgJ3NwYW5uaW5nJywgY29udGV4dCkpLFxyXG4gICAgICAgICAgICBjb2RlOiBjYWxsT3JSZXR1cm4oZ2V0RXh0ZW5zaW9uRmllbGQoZXh0ZW5zaW9uLCAnY29kZScsIGNvbnRleHQpKSxcclxuICAgICAgICAgICAgYXR0cnM6IE9iamVjdC5mcm9tRW50cmllcyhleHRlbnNpb25BdHRyaWJ1dGVzLm1hcChleHRlbnNpb25BdHRyaWJ1dGUgPT4ge1xyXG4gICAgICAgICAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtleHRlbnNpb25BdHRyaWJ1dGUubmFtZSwgeyBkZWZhdWx0OiAoX2EgPSBleHRlbnNpb25BdHRyaWJ1dGUgPT09IG51bGwgfHwgZXh0ZW5zaW9uQXR0cmlidXRlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBleHRlbnNpb25BdHRyaWJ1dGUuYXR0cmlidXRlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZGVmYXVsdCB9XTtcclxuICAgICAgICAgICAgfSkpLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGNvbnN0IHBhcnNlSFRNTCA9IGNhbGxPclJldHVybihnZXRFeHRlbnNpb25GaWVsZChleHRlbnNpb24sICdwYXJzZUhUTUwnLCBjb250ZXh0KSk7XHJcbiAgICAgICAgaWYgKHBhcnNlSFRNTCkge1xyXG4gICAgICAgICAgICBzY2hlbWEucGFyc2VET00gPSBwYXJzZUhUTUxcclxuICAgICAgICAgICAgICAgIC5tYXAocGFyc2VSdWxlID0+IGluamVjdEV4dGVuc2lvbkF0dHJpYnV0ZXNUb1BhcnNlUnVsZShwYXJzZVJ1bGUsIGV4dGVuc2lvbkF0dHJpYnV0ZXMpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcmVuZGVySFRNTCA9IGdldEV4dGVuc2lvbkZpZWxkKGV4dGVuc2lvbiwgJ3JlbmRlckhUTUwnLCBjb250ZXh0KTtcclxuICAgICAgICBpZiAocmVuZGVySFRNTCkge1xyXG4gICAgICAgICAgICBzY2hlbWEudG9ET00gPSBtYXJrID0+IHJlbmRlckhUTUwoe1xyXG4gICAgICAgICAgICAgICAgbWFyayxcclxuICAgICAgICAgICAgICAgIEhUTUxBdHRyaWJ1dGVzOiBnZXRSZW5kZXJlZEF0dHJpYnV0ZXMobWFyaywgZXh0ZW5zaW9uQXR0cmlidXRlcyksXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gW2V4dGVuc2lvbi5uYW1lLCBzY2hlbWFdO1xyXG4gICAgfSkpO1xyXG4gICAgcmV0dXJuIG5ldyBTY2hlbWEoe1xyXG4gICAgICAgIHRvcE5vZGUsXHJcbiAgICAgICAgbm9kZXMsXHJcbiAgICAgICAgbWFya3MsXHJcbiAgICB9KTtcclxufVxuXG5mdW5jdGlvbiBnZXRTY2hlbWFUeXBlQnlOYW1lKG5hbWUsIHNjaGVtYSkge1xyXG4gICAgcmV0dXJuIHNjaGVtYS5ub2Rlc1tuYW1lXSB8fCBzY2hlbWEubWFya3NbbmFtZV0gfHwgbnVsbDtcclxufVxuXG5mdW5jdGlvbiBpc0V4dGVuc2lvblJ1bGVzRW5hYmxlZChleHRlbnNpb24sIGVuYWJsZWQpIHtcclxuICAgIGlmIChBcnJheS5pc0FycmF5KGVuYWJsZWQpKSB7XHJcbiAgICAgICAgcmV0dXJuIGVuYWJsZWQuc29tZShlbmFibGVkRXh0ZW5zaW9uID0+IHtcclxuICAgICAgICAgICAgY29uc3QgbmFtZSA9IHR5cGVvZiBlbmFibGVkRXh0ZW5zaW9uID09PSAnc3RyaW5nJ1xyXG4gICAgICAgICAgICAgICAgPyBlbmFibGVkRXh0ZW5zaW9uXHJcbiAgICAgICAgICAgICAgICA6IGVuYWJsZWRFeHRlbnNpb24ubmFtZTtcclxuICAgICAgICAgICAgcmV0dXJuIG5hbWUgPT09IGV4dGVuc2lvbi5uYW1lO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGVuYWJsZWQ7XHJcbn1cblxuY29uc3QgZ2V0VGV4dENvbnRlbnRGcm9tTm9kZXMgPSAoJGZyb20sIG1heE1hdGNoID0gNTAwKSA9PiB7XHJcbiAgICBsZXQgdGV4dEJlZm9yZSA9ICcnO1xyXG4gICAgJGZyb20ucGFyZW50Lm5vZGVzQmV0d2VlbihNYXRoLm1heCgwLCAkZnJvbS5wYXJlbnRPZmZzZXQgLSBtYXhNYXRjaCksICRmcm9tLnBhcmVudE9mZnNldCwgKG5vZGUsIHBvcywgcGFyZW50LCBpbmRleCkgPT4ge1xyXG4gICAgICAgIHZhciBfYSwgX2IsIF9jO1xyXG4gICAgICAgIHRleHRCZWZvcmUgKz0gKChfYiA9IChfYSA9IG5vZGUudHlwZS5zcGVjKS50b1RleHQpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKF9hLCB7XHJcbiAgICAgICAgICAgIG5vZGUsIHBvcywgcGFyZW50LCBpbmRleCxcclxuICAgICAgICB9KSkgfHwgKChfYyA9ICRmcm9tLm5vZGVCZWZvcmUpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy50ZXh0KSB8fCAnJWxlYWYlJztcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHRleHRCZWZvcmU7XHJcbn07XG5cbmZ1bmN0aW9uIGlzUmVnRXhwKHZhbHVlKSB7XHJcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgUmVnRXhwXSc7XHJcbn1cblxuY2xhc3MgSW5wdXRSdWxlIHtcclxuICAgIGNvbnN0cnVjdG9yKGNvbmZpZykge1xyXG4gICAgICAgIHRoaXMuZmluZCA9IGNvbmZpZy5maW5kO1xyXG4gICAgICAgIHRoaXMuaGFuZGxlciA9IGNvbmZpZy5oYW5kbGVyO1xyXG4gICAgfVxyXG59XHJcbmNvbnN0IGlucHV0UnVsZU1hdGNoZXJIYW5kbGVyID0gKHRleHQsIGZpbmQpID0+IHtcclxuICAgIGlmIChpc1JlZ0V4cChmaW5kKSkge1xyXG4gICAgICAgIHJldHVybiBmaW5kLmV4ZWModGV4dCk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBpbnB1dFJ1bGVNYXRjaCA9IGZpbmQodGV4dCk7XHJcbiAgICBpZiAoIWlucHV0UnVsZU1hdGNoKSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICBjb25zdCByZXN1bHQgPSBbXTtcclxuICAgIHJlc3VsdC5wdXNoKGlucHV0UnVsZU1hdGNoLnRleHQpO1xyXG4gICAgcmVzdWx0LmluZGV4ID0gaW5wdXRSdWxlTWF0Y2guaW5kZXg7XHJcbiAgICByZXN1bHQuaW5wdXQgPSB0ZXh0O1xyXG4gICAgcmVzdWx0LmRhdGEgPSBpbnB1dFJ1bGVNYXRjaC5kYXRhO1xyXG4gICAgaWYgKGlucHV0UnVsZU1hdGNoLnJlcGxhY2VXaXRoKSB7XHJcbiAgICAgICAgaWYgKCFpbnB1dFJ1bGVNYXRjaC50ZXh0LmluY2x1ZGVzKGlucHV0UnVsZU1hdGNoLnJlcGxhY2VXaXRoKSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ1t0aXB0YXAgd2Fybl06IFwiaW5wdXRSdWxlTWF0Y2gucmVwbGFjZVdpdGhcIiBtdXN0IGJlIHBhcnQgb2YgXCJpbnB1dFJ1bGVNYXRjaC50ZXh0XCIuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJlc3VsdC5wdXNoKGlucHV0UnVsZU1hdGNoLnJlcGxhY2VXaXRoKTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn07XHJcbmZ1bmN0aW9uIHJ1biQxKGNvbmZpZykge1xyXG4gICAgdmFyIF9hO1xyXG4gICAgY29uc3QgeyBlZGl0b3IsIGZyb20sIHRvLCB0ZXh0LCBydWxlcywgcGx1Z2luLCB9ID0gY29uZmlnO1xyXG4gICAgY29uc3QgeyB2aWV3IH0gPSBlZGl0b3I7XHJcbiAgICBpZiAodmlldy5jb21wb3NpbmcpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBjb25zdCAkZnJvbSA9IHZpZXcuc3RhdGUuZG9jLnJlc29sdmUoZnJvbSk7XHJcbiAgICBpZiAoXHJcbiAgICAvLyBjaGVjayBmb3IgY29kZSBub2RlXHJcbiAgICAkZnJvbS5wYXJlbnQudHlwZS5zcGVjLmNvZGVcclxuICAgICAgICAvLyBjaGVjayBmb3IgY29kZSBtYXJrXHJcbiAgICAgICAgfHwgISEoKF9hID0gKCRmcm9tLm5vZGVCZWZvcmUgfHwgJGZyb20ubm9kZUFmdGVyKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm1hcmtzLmZpbmQobWFyayA9PiBtYXJrLnR5cGUuc3BlYy5jb2RlKSkpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBsZXQgbWF0Y2hlZCA9IGZhbHNlO1xyXG4gICAgY29uc3QgdGV4dEJlZm9yZSA9IGdldFRleHRDb250ZW50RnJvbU5vZGVzKCRmcm9tKSArIHRleHQ7XHJcbiAgICBydWxlcy5mb3JFYWNoKHJ1bGUgPT4ge1xyXG4gICAgICAgIGlmIChtYXRjaGVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgbWF0Y2ggPSBpbnB1dFJ1bGVNYXRjaGVySGFuZGxlcih0ZXh0QmVmb3JlLCBydWxlLmZpbmQpO1xyXG4gICAgICAgIGlmICghbWF0Y2gpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCB0ciA9IHZpZXcuc3RhdGUudHI7XHJcbiAgICAgICAgY29uc3Qgc3RhdGUgPSBjcmVhdGVDaGFpbmFibGVTdGF0ZSh7XHJcbiAgICAgICAgICAgIHN0YXRlOiB2aWV3LnN0YXRlLFxyXG4gICAgICAgICAgICB0cmFuc2FjdGlvbjogdHIsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgY29uc3QgcmFuZ2UgPSB7XHJcbiAgICAgICAgICAgIGZyb206IGZyb20gLSAobWF0Y2hbMF0ubGVuZ3RoIC0gdGV4dC5sZW5ndGgpLFxyXG4gICAgICAgICAgICB0byxcclxuICAgICAgICB9O1xyXG4gICAgICAgIGNvbnN0IHsgY29tbWFuZHMsIGNoYWluLCBjYW4gfSA9IG5ldyBDb21tYW5kTWFuYWdlcih7XHJcbiAgICAgICAgICAgIGVkaXRvcixcclxuICAgICAgICAgICAgc3RhdGUsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgY29uc3QgaGFuZGxlciA9IHJ1bGUuaGFuZGxlcih7XHJcbiAgICAgICAgICAgIHN0YXRlLFxyXG4gICAgICAgICAgICByYW5nZSxcclxuICAgICAgICAgICAgbWF0Y2gsXHJcbiAgICAgICAgICAgIGNvbW1hbmRzLFxyXG4gICAgICAgICAgICBjaGFpbixcclxuICAgICAgICAgICAgY2FuLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8vIHN0b3AgaWYgdGhlcmUgYXJlIG5vIGNoYW5nZXNcclxuICAgICAgICBpZiAoaGFuZGxlciA9PT0gbnVsbCB8fCAhdHIuc3RlcHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gc3RvcmUgdHJhbnNmb3JtIGFzIG1ldGEgZGF0YVxyXG4gICAgICAgIC8vIHNvIHdlIGNhbiB1bmRvIGlucHV0IHJ1bGVzIHdpdGhpbiB0aGUgYHVuZG9JbnB1dFJ1bGVzYCBjb21tYW5kXHJcbiAgICAgICAgdHIuc2V0TWV0YShwbHVnaW4sIHtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cixcclxuICAgICAgICAgICAgZnJvbSxcclxuICAgICAgICAgICAgdG8sXHJcbiAgICAgICAgICAgIHRleHQsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdmlldy5kaXNwYXRjaCh0cik7XHJcbiAgICAgICAgbWF0Y2hlZCA9IHRydWU7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBtYXRjaGVkO1xyXG59XHJcbi8qKlxyXG4gKiBDcmVhdGUgYW4gaW5wdXQgcnVsZXMgcGx1Z2luLiBXaGVuIGVuYWJsZWQsIGl0IHdpbGwgY2F1c2UgdGV4dFxyXG4gKiBpbnB1dCB0aGF0IG1hdGNoZXMgYW55IG9mIHRoZSBnaXZlbiBydWxlcyB0byB0cmlnZ2VyIHRoZSBydWxl4oCZc1xyXG4gKiBhY3Rpb24uXHJcbiAqL1xyXG5mdW5jdGlvbiBpbnB1dFJ1bGVzUGx1Z2luKHByb3BzKSB7XHJcbiAgICBjb25zdCB7IGVkaXRvciwgcnVsZXMgfSA9IHByb3BzO1xyXG4gICAgY29uc3QgcGx1Z2luID0gbmV3IFBsdWdpbih7XHJcbiAgICAgICAgc3RhdGU6IHtcclxuICAgICAgICAgICAgaW5pdCgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBhcHBseSh0ciwgcHJldikge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc3RvcmVkID0gdHIuZ2V0TWV0YShwbHVnaW4pO1xyXG4gICAgICAgICAgICAgICAgaWYgKHN0b3JlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzdG9yZWQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHIuc2VsZWN0aW9uU2V0IHx8IHRyLmRvY0NoYW5nZWRcclxuICAgICAgICAgICAgICAgICAgICA/IG51bGxcclxuICAgICAgICAgICAgICAgICAgICA6IHByZXY7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSxcclxuICAgICAgICBwcm9wczoge1xyXG4gICAgICAgICAgICBoYW5kbGVUZXh0SW5wdXQodmlldywgZnJvbSwgdG8sIHRleHQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBydW4kMSh7XHJcbiAgICAgICAgICAgICAgICAgICAgZWRpdG9yLFxyXG4gICAgICAgICAgICAgICAgICAgIGZyb20sXHJcbiAgICAgICAgICAgICAgICAgICAgdG8sXHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dCxcclxuICAgICAgICAgICAgICAgICAgICBydWxlcyxcclxuICAgICAgICAgICAgICAgICAgICBwbHVnaW4sXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgaGFuZGxlRE9NRXZlbnRzOiB7XHJcbiAgICAgICAgICAgICAgICBjb21wb3NpdGlvbmVuZDogdmlldyA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgJGN1cnNvciB9ID0gdmlldy5zdGF0ZS5zZWxlY3Rpb247XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkY3Vyc29yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBydW4kMSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWRpdG9yLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb206ICRjdXJzb3IucG9zLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvOiAkY3Vyc29yLnBvcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiAnJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBydWxlcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbHVnaW4sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIC8vIGFkZCBzdXBwb3J0IGZvciBpbnB1dCBydWxlcyB0byB0cmlnZ2VyIG9uIGVudGVyXHJcbiAgICAgICAgICAgIC8vIHRoaXMgaXMgdXNlZnVsIGZvciBleGFtcGxlIGZvciBjb2RlIGJsb2Nrc1xyXG4gICAgICAgICAgICBoYW5kbGVLZXlEb3duKHZpZXcsIGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQua2V5ICE9PSAnRW50ZXInKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgeyAkY3Vyc29yIH0gPSB2aWV3LnN0YXRlLnNlbGVjdGlvbjtcclxuICAgICAgICAgICAgICAgIGlmICgkY3Vyc29yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJ1biQxKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWRpdG9yLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmcm9tOiAkY3Vyc29yLnBvcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG86ICRjdXJzb3IucG9zLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiAnXFxuJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcnVsZXMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsdWdpbixcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBpc0lucHV0UnVsZXM6IHRydWUsXHJcbiAgICB9KTtcclxuICAgIHJldHVybiBwbHVnaW47XHJcbn1cblxuZnVuY3Rpb24gaXNOdW1iZXIodmFsdWUpIHtcclxuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInO1xyXG59XG5cbmNsYXNzIFBhc3RlUnVsZSB7XHJcbiAgICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcclxuICAgICAgICB0aGlzLmZpbmQgPSBjb25maWcuZmluZDtcclxuICAgICAgICB0aGlzLmhhbmRsZXIgPSBjb25maWcuaGFuZGxlcjtcclxuICAgIH1cclxufVxyXG5jb25zdCBwYXN0ZVJ1bGVNYXRjaGVySGFuZGxlciA9ICh0ZXh0LCBmaW5kKSA9PiB7XHJcbiAgICBpZiAoaXNSZWdFeHAoZmluZCkpIHtcclxuICAgICAgICByZXR1cm4gWy4uLnRleHQubWF0Y2hBbGwoZmluZCldO1xyXG4gICAgfVxyXG4gICAgY29uc3QgbWF0Y2hlcyA9IGZpbmQodGV4dCk7XHJcbiAgICBpZiAoIW1hdGNoZXMpIHtcclxuICAgICAgICByZXR1cm4gW107XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbWF0Y2hlcy5tYXAocGFzdGVSdWxlTWF0Y2ggPT4ge1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xyXG4gICAgICAgIHJlc3VsdC5wdXNoKHBhc3RlUnVsZU1hdGNoLnRleHQpO1xyXG4gICAgICAgIHJlc3VsdC5pbmRleCA9IHBhc3RlUnVsZU1hdGNoLmluZGV4O1xyXG4gICAgICAgIHJlc3VsdC5pbnB1dCA9IHRleHQ7XHJcbiAgICAgICAgcmVzdWx0LmRhdGEgPSBwYXN0ZVJ1bGVNYXRjaC5kYXRhO1xyXG4gICAgICAgIGlmIChwYXN0ZVJ1bGVNYXRjaC5yZXBsYWNlV2l0aCkge1xyXG4gICAgICAgICAgICBpZiAoIXBhc3RlUnVsZU1hdGNoLnRleHQuaW5jbHVkZXMocGFzdGVSdWxlTWF0Y2gucmVwbGFjZVdpdGgpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ1t0aXB0YXAgd2Fybl06IFwicGFzdGVSdWxlTWF0Y2gucmVwbGFjZVdpdGhcIiBtdXN0IGJlIHBhcnQgb2YgXCJwYXN0ZVJ1bGVNYXRjaC50ZXh0XCIuJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmVzdWx0LnB1c2gocGFzdGVSdWxlTWF0Y2gucmVwbGFjZVdpdGgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfSk7XHJcbn07XHJcbmZ1bmN0aW9uIHJ1bihjb25maWcpIHtcclxuICAgIGNvbnN0IHsgZWRpdG9yLCBzdGF0ZSwgZnJvbSwgdG8sIHJ1bGUsIH0gPSBjb25maWc7XHJcbiAgICBjb25zdCB7IGNvbW1hbmRzLCBjaGFpbiwgY2FuIH0gPSBuZXcgQ29tbWFuZE1hbmFnZXIoe1xyXG4gICAgICAgIGVkaXRvcixcclxuICAgICAgICBzdGF0ZSxcclxuICAgIH0pO1xyXG4gICAgY29uc3QgaGFuZGxlcnMgPSBbXTtcclxuICAgIHN0YXRlLmRvYy5ub2Rlc0JldHdlZW4oZnJvbSwgdG8sIChub2RlLCBwb3MpID0+IHtcclxuICAgICAgICBpZiAoIW5vZGUuaXNUZXh0YmxvY2sgfHwgbm9kZS50eXBlLnNwZWMuY29kZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHJlc29sdmVkRnJvbSA9IE1hdGgubWF4KGZyb20sIHBvcyk7XHJcbiAgICAgICAgY29uc3QgcmVzb2x2ZWRUbyA9IE1hdGgubWluKHRvLCBwb3MgKyBub2RlLmNvbnRlbnQuc2l6ZSk7XHJcbiAgICAgICAgY29uc3QgdGV4dFRvTWF0Y2ggPSBub2RlLnRleHRCZXR3ZWVuKHJlc29sdmVkRnJvbSAtIHBvcywgcmVzb2x2ZWRUbyAtIHBvcywgdW5kZWZpbmVkLCAnXFx1ZmZmYycpO1xyXG4gICAgICAgIGNvbnN0IG1hdGNoZXMgPSBwYXN0ZVJ1bGVNYXRjaGVySGFuZGxlcih0ZXh0VG9NYXRjaCwgcnVsZS5maW5kKTtcclxuICAgICAgICBtYXRjaGVzLmZvckVhY2gobWF0Y2ggPT4ge1xyXG4gICAgICAgICAgICBpZiAobWF0Y2guaW5kZXggPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0ID0gcmVzb2x2ZWRGcm9tICsgbWF0Y2guaW5kZXggKyAxO1xyXG4gICAgICAgICAgICBjb25zdCBlbmQgPSBzdGFydCArIG1hdGNoWzBdLmxlbmd0aDtcclxuICAgICAgICAgICAgY29uc3QgcmFuZ2UgPSB7XHJcbiAgICAgICAgICAgICAgICBmcm9tOiBzdGF0ZS50ci5tYXBwaW5nLm1hcChzdGFydCksXHJcbiAgICAgICAgICAgICAgICB0bzogc3RhdGUudHIubWFwcGluZy5tYXAoZW5kKSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgY29uc3QgaGFuZGxlciA9IHJ1bGUuaGFuZGxlcih7XHJcbiAgICAgICAgICAgICAgICBzdGF0ZSxcclxuICAgICAgICAgICAgICAgIHJhbmdlLFxyXG4gICAgICAgICAgICAgICAgbWF0Y2gsXHJcbiAgICAgICAgICAgICAgICBjb21tYW5kcyxcclxuICAgICAgICAgICAgICAgIGNoYWluLFxyXG4gICAgICAgICAgICAgICAgY2FuLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgaGFuZGxlcnMucHVzaChoYW5kbGVyKTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgY29uc3Qgc3VjY2VzcyA9IGhhbmRsZXJzLmV2ZXJ5KGhhbmRsZXIgPT4gaGFuZGxlciAhPT0gbnVsbCk7XHJcbiAgICByZXR1cm4gc3VjY2VzcztcclxufVxyXG4vKipcclxuICogQ3JlYXRlIGFuIHBhc3RlIHJ1bGVzIHBsdWdpbi4gV2hlbiBlbmFibGVkLCBpdCB3aWxsIGNhdXNlIHBhc3RlZFxyXG4gKiB0ZXh0IHRoYXQgbWF0Y2hlcyBhbnkgb2YgdGhlIGdpdmVuIHJ1bGVzIHRvIHRyaWdnZXIgdGhlIHJ1bGXigJlzXHJcbiAqIGFjdGlvbi5cclxuICovXHJcbmZ1bmN0aW9uIHBhc3RlUnVsZXNQbHVnaW4ocHJvcHMpIHtcclxuICAgIGNvbnN0IHsgZWRpdG9yLCBydWxlcyB9ID0gcHJvcHM7XHJcbiAgICBsZXQgZHJhZ1NvdXJjZUVsZW1lbnQgPSBudWxsO1xyXG4gICAgbGV0IGlzUGFzdGVkRnJvbVByb3NlTWlycm9yID0gZmFsc2U7XHJcbiAgICBsZXQgaXNEcm9wcGVkRnJvbVByb3NlTWlycm9yID0gZmFsc2U7XHJcbiAgICBjb25zdCBwbHVnaW5zID0gcnVsZXMubWFwKHJ1bGUgPT4ge1xyXG4gICAgICAgIHJldHVybiBuZXcgUGx1Z2luKHtcclxuICAgICAgICAgICAgLy8gd2UgcmVnaXN0ZXIgYSBnbG9iYWwgZHJhZyBoYW5kbGVyIHRvIHRyYWNrIHRoZSBjdXJyZW50IGRyYWcgc291cmNlIGVsZW1lbnRcclxuICAgICAgICAgICAgdmlldyh2aWV3KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBoYW5kbGVEcmFnc3RhcnQgPSAoZXZlbnQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgICAgICAgICAgICAgZHJhZ1NvdXJjZUVsZW1lbnQgPSAoKF9hID0gdmlldy5kb20ucGFyZW50RWxlbWVudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNvbnRhaW5zKGV2ZW50LnRhcmdldCkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gdmlldy5kb20ucGFyZW50RWxlbWVudFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA6IG51bGw7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdzdGFydCcsIGhhbmRsZURyYWdzdGFydCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGRlc3Ryb3koKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdkcmFnc3RhcnQnLCBoYW5kbGVEcmFnc3RhcnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBwcm9wczoge1xyXG4gICAgICAgICAgICAgICAgaGFuZGxlRE9NRXZlbnRzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZHJvcDogdmlldyA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzRHJvcHBlZEZyb21Qcm9zZU1pcnJvciA9IGRyYWdTb3VyY2VFbGVtZW50ID09PSB2aWV3LmRvbS5wYXJlbnRFbGVtZW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBwYXN0ZTogKHZpZXcsIGV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfYTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaHRtbCA9IChfYSA9IGV2ZW50LmNsaXBib2FyZERhdGEpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5nZXREYXRhKCd0ZXh0L2h0bWwnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXNQYXN0ZWRGcm9tUHJvc2VNaXJyb3IgPSAhIShodG1sID09PSBudWxsIHx8IGh0bWwgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGh0bWwuaW5jbHVkZXMoJ2RhdGEtcG0tc2xpY2UnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgYXBwZW5kVHJhbnNhY3Rpb246ICh0cmFuc2FjdGlvbnMsIG9sZFN0YXRlLCBzdGF0ZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdHJhbnNhY3Rpb24gPSB0cmFuc2FjdGlvbnNbMF07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpc1Bhc3RlID0gdHJhbnNhY3Rpb24uZ2V0TWV0YSgndWlFdmVudCcpID09PSAncGFzdGUnICYmICFpc1Bhc3RlZEZyb21Qcm9zZU1pcnJvcjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGlzRHJvcCA9IHRyYW5zYWN0aW9uLmdldE1ldGEoJ3VpRXZlbnQnKSA9PT0gJ2Ryb3AnICYmICFpc0Ryb3BwZWRGcm9tUHJvc2VNaXJyb3I7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWlzUGFzdGUgJiYgIWlzRHJvcCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIHN0b3AgaWYgdGhlcmUgaXMgbm8gY2hhbmdlZCByYW5nZVxyXG4gICAgICAgICAgICAgICAgY29uc3QgZnJvbSA9IG9sZFN0YXRlLmRvYy5jb250ZW50LmZpbmREaWZmU3RhcnQoc3RhdGUuZG9jLmNvbnRlbnQpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdG8gPSBvbGRTdGF0ZS5kb2MuY29udGVudC5maW5kRGlmZkVuZChzdGF0ZS5kb2MuY29udGVudCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWlzTnVtYmVyKGZyb20pIHx8ICF0byB8fCBmcm9tID09PSB0by5iKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gYnVpbGQgYSBjaGFpbmFibGUgc3RhdGVcclxuICAgICAgICAgICAgICAgIC8vIHNvIHdlIGNhbiB1c2UgYSBzaW5nbGUgdHJhbnNhY3Rpb24gZm9yIGFsbCBwYXN0ZSBydWxlc1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdHIgPSBzdGF0ZS50cjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNoYWluYWJsZVN0YXRlID0gY3JlYXRlQ2hhaW5hYmxlU3RhdGUoe1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLFxyXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uOiB0cixcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaGFuZGxlciA9IHJ1bih7XHJcbiAgICAgICAgICAgICAgICAgICAgZWRpdG9yLFxyXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlOiBjaGFpbmFibGVTdGF0ZSxcclxuICAgICAgICAgICAgICAgICAgICBmcm9tOiBNYXRoLm1heChmcm9tIC0gMSwgMCksXHJcbiAgICAgICAgICAgICAgICAgICAgdG86IHRvLmIsXHJcbiAgICAgICAgICAgICAgICAgICAgcnVsZSxcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgLy8gc3RvcCBpZiB0aGVyZSBhcmUgbm8gY2hhbmdlc1xyXG4gICAgICAgICAgICAgICAgaWYgKCFoYW5kbGVyIHx8ICF0ci5zdGVwcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHI7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBwbHVnaW5zO1xyXG59XG5cbmZ1bmN0aW9uIGZpbmREdXBsaWNhdGVzKGl0ZW1zKSB7XHJcbiAgICBjb25zdCBmaWx0ZXJlZCA9IGl0ZW1zLmZpbHRlcigoZWwsIGluZGV4KSA9PiBpdGVtcy5pbmRleE9mKGVsKSAhPT0gaW5kZXgpO1xyXG4gICAgcmV0dXJuIFsuLi5uZXcgU2V0KGZpbHRlcmVkKV07XHJcbn1cblxuY2xhc3MgRXh0ZW5zaW9uTWFuYWdlciB7XHJcbiAgICBjb25zdHJ1Y3RvcihleHRlbnNpb25zLCBlZGl0b3IpIHtcclxuICAgICAgICB0aGlzLnNwbGl0dGFibGVNYXJrcyA9IFtdO1xyXG4gICAgICAgIHRoaXMuZWRpdG9yID0gZWRpdG9yO1xyXG4gICAgICAgIHRoaXMuZXh0ZW5zaW9ucyA9IEV4dGVuc2lvbk1hbmFnZXIucmVzb2x2ZShleHRlbnNpb25zKTtcclxuICAgICAgICB0aGlzLnNjaGVtYSA9IGdldFNjaGVtYUJ5UmVzb2x2ZWRFeHRlbnNpb25zKHRoaXMuZXh0ZW5zaW9ucyk7XHJcbiAgICAgICAgdGhpcy5leHRlbnNpb25zLmZvckVhY2goZXh0ZW5zaW9uID0+IHtcclxuICAgICAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgICAgICAvLyBzdG9yZSBleHRlbnNpb24gc3RvcmFnZSBpbiBlZGl0b3JcclxuICAgICAgICAgICAgdGhpcy5lZGl0b3IuZXh0ZW5zaW9uU3RvcmFnZVtleHRlbnNpb24ubmFtZV0gPSBleHRlbnNpb24uc3RvcmFnZTtcclxuICAgICAgICAgICAgY29uc3QgY29udGV4dCA9IHtcclxuICAgICAgICAgICAgICAgIG5hbWU6IGV4dGVuc2lvbi5uYW1lLFxyXG4gICAgICAgICAgICAgICAgb3B0aW9uczogZXh0ZW5zaW9uLm9wdGlvbnMsXHJcbiAgICAgICAgICAgICAgICBzdG9yYWdlOiBleHRlbnNpb24uc3RvcmFnZSxcclxuICAgICAgICAgICAgICAgIGVkaXRvcjogdGhpcy5lZGl0b3IsXHJcbiAgICAgICAgICAgICAgICB0eXBlOiBnZXRTY2hlbWFUeXBlQnlOYW1lKGV4dGVuc2lvbi5uYW1lLCB0aGlzLnNjaGVtYSksXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGlmIChleHRlbnNpb24udHlwZSA9PT0gJ21hcmsnKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBrZWVwT25TcGxpdCA9IChfYSA9IGNhbGxPclJldHVybihnZXRFeHRlbnNpb25GaWVsZChleHRlbnNpb24sICdrZWVwT25TcGxpdCcsIGNvbnRleHQpKSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGlmIChrZWVwT25TcGxpdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3BsaXR0YWJsZU1hcmtzLnB1c2goZXh0ZW5zaW9uLm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IG9uQmVmb3JlQ3JlYXRlID0gZ2V0RXh0ZW5zaW9uRmllbGQoZXh0ZW5zaW9uLCAnb25CZWZvcmVDcmVhdGUnLCBjb250ZXh0KTtcclxuICAgICAgICAgICAgaWYgKG9uQmVmb3JlQ3JlYXRlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVkaXRvci5vbignYmVmb3JlQ3JlYXRlJywgb25CZWZvcmVDcmVhdGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IG9uQ3JlYXRlID0gZ2V0RXh0ZW5zaW9uRmllbGQoZXh0ZW5zaW9uLCAnb25DcmVhdGUnLCBjb250ZXh0KTtcclxuICAgICAgICAgICAgaWYgKG9uQ3JlYXRlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVkaXRvci5vbignY3JlYXRlJywgb25DcmVhdGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IG9uVXBkYXRlID0gZ2V0RXh0ZW5zaW9uRmllbGQoZXh0ZW5zaW9uLCAnb25VcGRhdGUnLCBjb250ZXh0KTtcclxuICAgICAgICAgICAgaWYgKG9uVXBkYXRlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVkaXRvci5vbigndXBkYXRlJywgb25VcGRhdGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IG9uU2VsZWN0aW9uVXBkYXRlID0gZ2V0RXh0ZW5zaW9uRmllbGQoZXh0ZW5zaW9uLCAnb25TZWxlY3Rpb25VcGRhdGUnLCBjb250ZXh0KTtcclxuICAgICAgICAgICAgaWYgKG9uU2VsZWN0aW9uVXBkYXRlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVkaXRvci5vbignc2VsZWN0aW9uVXBkYXRlJywgb25TZWxlY3Rpb25VcGRhdGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IG9uVHJhbnNhY3Rpb24gPSBnZXRFeHRlbnNpb25GaWVsZChleHRlbnNpb24sICdvblRyYW5zYWN0aW9uJywgY29udGV4dCk7XHJcbiAgICAgICAgICAgIGlmIChvblRyYW5zYWN0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVkaXRvci5vbigndHJhbnNhY3Rpb24nLCBvblRyYW5zYWN0aW9uKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBvbkZvY3VzID0gZ2V0RXh0ZW5zaW9uRmllbGQoZXh0ZW5zaW9uLCAnb25Gb2N1cycsIGNvbnRleHQpO1xyXG4gICAgICAgICAgICBpZiAob25Gb2N1cykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lZGl0b3Iub24oJ2ZvY3VzJywgb25Gb2N1cyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3Qgb25CbHVyID0gZ2V0RXh0ZW5zaW9uRmllbGQoZXh0ZW5zaW9uLCAnb25CbHVyJywgY29udGV4dCk7XHJcbiAgICAgICAgICAgIGlmIChvbkJsdXIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZWRpdG9yLm9uKCdibHVyJywgb25CbHVyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBvbkRlc3Ryb3kgPSBnZXRFeHRlbnNpb25GaWVsZChleHRlbnNpb24sICdvbkRlc3Ryb3knLCBjb250ZXh0KTtcclxuICAgICAgICAgICAgaWYgKG9uRGVzdHJveSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lZGl0b3Iub24oJ2Rlc3Ryb3knLCBvbkRlc3Ryb3kpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgcmVzb2x2ZShleHRlbnNpb25zKSB7XHJcbiAgICAgICAgY29uc3QgcmVzb2x2ZWRFeHRlbnNpb25zID0gRXh0ZW5zaW9uTWFuYWdlci5zb3J0KEV4dGVuc2lvbk1hbmFnZXIuZmxhdHRlbihleHRlbnNpb25zKSk7XHJcbiAgICAgICAgY29uc3QgZHVwbGljYXRlZE5hbWVzID0gZmluZER1cGxpY2F0ZXMocmVzb2x2ZWRFeHRlbnNpb25zLm1hcChleHRlbnNpb24gPT4gZXh0ZW5zaW9uLm5hbWUpKTtcclxuICAgICAgICBpZiAoZHVwbGljYXRlZE5hbWVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYFt0aXB0YXAgd2Fybl06IER1cGxpY2F0ZSBleHRlbnNpb24gbmFtZXMgZm91bmQ6IFske2R1cGxpY2F0ZWROYW1lcy5tYXAoaXRlbSA9PiBgJyR7aXRlbX0nYCkuam9pbignLCAnKX1dLiBUaGlzIGNhbiBsZWFkIHRvIGlzc3Vlcy5gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc29sdmVkRXh0ZW5zaW9ucztcclxuICAgIH1cclxuICAgIHN0YXRpYyBmbGF0dGVuKGV4dGVuc2lvbnMpIHtcclxuICAgICAgICByZXR1cm4gZXh0ZW5zaW9uc1xyXG4gICAgICAgICAgICAubWFwKGV4dGVuc2lvbiA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbnRleHQgPSB7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiBleHRlbnNpb24ubmFtZSxcclxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IGV4dGVuc2lvbi5vcHRpb25zLFxyXG4gICAgICAgICAgICAgICAgc3RvcmFnZTogZXh0ZW5zaW9uLnN0b3JhZ2UsXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGNvbnN0IGFkZEV4dGVuc2lvbnMgPSBnZXRFeHRlbnNpb25GaWVsZChleHRlbnNpb24sICdhZGRFeHRlbnNpb25zJywgY29udGV4dCk7XHJcbiAgICAgICAgICAgIGlmIChhZGRFeHRlbnNpb25zKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICAgICAgICAgIGV4dGVuc2lvbixcclxuICAgICAgICAgICAgICAgICAgICAuLi50aGlzLmZsYXR0ZW4oYWRkRXh0ZW5zaW9ucygpKSxcclxuICAgICAgICAgICAgICAgIF07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGV4dGVuc2lvbjtcclxuICAgICAgICB9KVxyXG4gICAgICAgICAgICAvLyBgSW5maW5pdHlgIHdpbGwgYnJlYWsgVHlwZVNjcmlwdCBzbyB3ZSBzZXQgYSBudW1iZXIgdGhhdCBpcyBwcm9iYWJseSBoaWdoIGVub3VnaFxyXG4gICAgICAgICAgICAuZmxhdCgxMCk7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgc29ydChleHRlbnNpb25zKSB7XHJcbiAgICAgICAgY29uc3QgZGVmYXVsdFByaW9yaXR5ID0gMTAwO1xyXG4gICAgICAgIHJldHVybiBleHRlbnNpb25zLnNvcnQoKGEsIGIpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgcHJpb3JpdHlBID0gZ2V0RXh0ZW5zaW9uRmllbGQoYSwgJ3ByaW9yaXR5JykgfHwgZGVmYXVsdFByaW9yaXR5O1xyXG4gICAgICAgICAgICBjb25zdCBwcmlvcml0eUIgPSBnZXRFeHRlbnNpb25GaWVsZChiLCAncHJpb3JpdHknKSB8fCBkZWZhdWx0UHJpb3JpdHk7XHJcbiAgICAgICAgICAgIGlmIChwcmlvcml0eUEgPiBwcmlvcml0eUIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAocHJpb3JpdHlBIDwgcHJpb3JpdHlCKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGdldCBjb21tYW5kcygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5leHRlbnNpb25zLnJlZHVjZSgoY29tbWFuZHMsIGV4dGVuc2lvbikgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBjb250ZXh0ID0ge1xyXG4gICAgICAgICAgICAgICAgbmFtZTogZXh0ZW5zaW9uLm5hbWUsXHJcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBleHRlbnNpb24ub3B0aW9ucyxcclxuICAgICAgICAgICAgICAgIHN0b3JhZ2U6IGV4dGVuc2lvbi5zdG9yYWdlLFxyXG4gICAgICAgICAgICAgICAgZWRpdG9yOiB0aGlzLmVkaXRvcixcclxuICAgICAgICAgICAgICAgIHR5cGU6IGdldFNjaGVtYVR5cGVCeU5hbWUoZXh0ZW5zaW9uLm5hbWUsIHRoaXMuc2NoZW1hKSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgY29uc3QgYWRkQ29tbWFuZHMgPSBnZXRFeHRlbnNpb25GaWVsZChleHRlbnNpb24sICdhZGRDb21tYW5kcycsIGNvbnRleHQpO1xyXG4gICAgICAgICAgICBpZiAoIWFkZENvbW1hbmRzKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tbWFuZHM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIC4uLmNvbW1hbmRzLFxyXG4gICAgICAgICAgICAgICAgLi4uYWRkQ29tbWFuZHMoKSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9LCB7fSk7XHJcbiAgICB9XHJcbiAgICBnZXQgcGx1Z2lucygpIHtcclxuICAgICAgICBjb25zdCB7IGVkaXRvciB9ID0gdGhpcztcclxuICAgICAgICAvLyBXaXRoIFByb3NlTWlycm9yLCBmaXJzdCBwbHVnaW5zIHdpdGhpbiBhbiBhcnJheSBhcmUgZXhlY3V0ZWQgZmlyc3QuXHJcbiAgICAgICAgLy8gSW4gdGlwdGFwLCB3ZSBwcm92aWRlIHRoZSBhYmlsaXR5IHRvIG92ZXJyaWRlIHBsdWdpbnMsXHJcbiAgICAgICAgLy8gc28gaXQgZmVlbHMgbW9yZSBuYXR1cmFsIHRvIHJ1biBwbHVnaW5zIGF0IHRoZSBlbmQgb2YgYW4gYXJyYXkgZmlyc3QuXHJcbiAgICAgICAgLy8gVGhhdOKAmXMgd2h5IHdlIGhhdmUgdG8gcmV2ZXJzZSB0aGUgYGV4dGVuc2lvbnNgIGFycmF5IGFuZCBzb3J0IGFnYWluXHJcbiAgICAgICAgLy8gYmFzZWQgb24gdGhlIGBwcmlvcml0eWAgb3B0aW9uLlxyXG4gICAgICAgIGNvbnN0IGV4dGVuc2lvbnMgPSBFeHRlbnNpb25NYW5hZ2VyLnNvcnQoWy4uLnRoaXMuZXh0ZW5zaW9uc10ucmV2ZXJzZSgpKTtcclxuICAgICAgICBjb25zdCBpbnB1dFJ1bGVzID0gW107XHJcbiAgICAgICAgY29uc3QgcGFzdGVSdWxlcyA9IFtdO1xyXG4gICAgICAgIGNvbnN0IGFsbFBsdWdpbnMgPSBleHRlbnNpb25zXHJcbiAgICAgICAgICAgIC5tYXAoZXh0ZW5zaW9uID0+IHtcclxuICAgICAgICAgICAgY29uc3QgY29udGV4dCA9IHtcclxuICAgICAgICAgICAgICAgIG5hbWU6IGV4dGVuc2lvbi5uYW1lLFxyXG4gICAgICAgICAgICAgICAgb3B0aW9uczogZXh0ZW5zaW9uLm9wdGlvbnMsXHJcbiAgICAgICAgICAgICAgICBzdG9yYWdlOiBleHRlbnNpb24uc3RvcmFnZSxcclxuICAgICAgICAgICAgICAgIGVkaXRvcixcclxuICAgICAgICAgICAgICAgIHR5cGU6IGdldFNjaGVtYVR5cGVCeU5hbWUoZXh0ZW5zaW9uLm5hbWUsIHRoaXMuc2NoZW1hKSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgY29uc3QgcGx1Z2lucyA9IFtdO1xyXG4gICAgICAgICAgICBjb25zdCBhZGRLZXlib2FyZFNob3J0Y3V0cyA9IGdldEV4dGVuc2lvbkZpZWxkKGV4dGVuc2lvbiwgJ2FkZEtleWJvYXJkU2hvcnRjdXRzJywgY29udGV4dCk7XHJcbiAgICAgICAgICAgIGlmIChhZGRLZXlib2FyZFNob3J0Y3V0cykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYmluZGluZ3MgPSBPYmplY3QuZnJvbUVudHJpZXMoT2JqZWN0XHJcbiAgICAgICAgICAgICAgICAgICAgLmVudHJpZXMoYWRkS2V5Ym9hcmRTaG9ydGN1dHMoKSlcclxuICAgICAgICAgICAgICAgICAgICAubWFwKChbc2hvcnRjdXQsIG1ldGhvZF0pID0+IHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW3Nob3J0Y3V0LCAoKSA9PiBtZXRob2QoeyBlZGl0b3IgfSldO1xyXG4gICAgICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qga2V5TWFwUGx1Z2luID0ga2V5bWFwKGJpbmRpbmdzKTtcclxuICAgICAgICAgICAgICAgIHBsdWdpbnMucHVzaChrZXlNYXBQbHVnaW4pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IGFkZElucHV0UnVsZXMgPSBnZXRFeHRlbnNpb25GaWVsZChleHRlbnNpb24sICdhZGRJbnB1dFJ1bGVzJywgY29udGV4dCk7XHJcbiAgICAgICAgICAgIGlmIChpc0V4dGVuc2lvblJ1bGVzRW5hYmxlZChleHRlbnNpb24sIGVkaXRvci5vcHRpb25zLmVuYWJsZUlucHV0UnVsZXMpICYmIGFkZElucHV0UnVsZXMpIHtcclxuICAgICAgICAgICAgICAgIGlucHV0UnVsZXMucHVzaCguLi5hZGRJbnB1dFJ1bGVzKCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IGFkZFBhc3RlUnVsZXMgPSBnZXRFeHRlbnNpb25GaWVsZChleHRlbnNpb24sICdhZGRQYXN0ZVJ1bGVzJywgY29udGV4dCk7XHJcbiAgICAgICAgICAgIGlmIChpc0V4dGVuc2lvblJ1bGVzRW5hYmxlZChleHRlbnNpb24sIGVkaXRvci5vcHRpb25zLmVuYWJsZVBhc3RlUnVsZXMpICYmIGFkZFBhc3RlUnVsZXMpIHtcclxuICAgICAgICAgICAgICAgIHBhc3RlUnVsZXMucHVzaCguLi5hZGRQYXN0ZVJ1bGVzKCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IGFkZFByb3NlTWlycm9yUGx1Z2lucyA9IGdldEV4dGVuc2lvbkZpZWxkKGV4dGVuc2lvbiwgJ2FkZFByb3NlTWlycm9yUGx1Z2lucycsIGNvbnRleHQpO1xyXG4gICAgICAgICAgICBpZiAoYWRkUHJvc2VNaXJyb3JQbHVnaW5zKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwcm9zZU1pcnJvclBsdWdpbnMgPSBhZGRQcm9zZU1pcnJvclBsdWdpbnMoKTtcclxuICAgICAgICAgICAgICAgIHBsdWdpbnMucHVzaCguLi5wcm9zZU1pcnJvclBsdWdpbnMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBwbHVnaW5zO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5mbGF0KCk7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgaW5wdXRSdWxlc1BsdWdpbih7XHJcbiAgICAgICAgICAgICAgICBlZGl0b3IsXHJcbiAgICAgICAgICAgICAgICBydWxlczogaW5wdXRSdWxlcyxcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgIC4uLnBhc3RlUnVsZXNQbHVnaW4oe1xyXG4gICAgICAgICAgICAgICAgZWRpdG9yLFxyXG4gICAgICAgICAgICAgICAgcnVsZXM6IHBhc3RlUnVsZXMsXHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAuLi5hbGxQbHVnaW5zLFxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbiAgICBnZXQgYXR0cmlidXRlcygpIHtcclxuICAgICAgICByZXR1cm4gZ2V0QXR0cmlidXRlc0Zyb21FeHRlbnNpb25zKHRoaXMuZXh0ZW5zaW9ucyk7XHJcbiAgICB9XHJcbiAgICBnZXQgbm9kZVZpZXdzKCkge1xyXG4gICAgICAgIGNvbnN0IHsgZWRpdG9yIH0gPSB0aGlzO1xyXG4gICAgICAgIGNvbnN0IHsgbm9kZUV4dGVuc2lvbnMgfSA9IHNwbGl0RXh0ZW5zaW9ucyh0aGlzLmV4dGVuc2lvbnMpO1xyXG4gICAgICAgIHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMobm9kZUV4dGVuc2lvbnNcclxuICAgICAgICAgICAgLmZpbHRlcihleHRlbnNpb24gPT4gISFnZXRFeHRlbnNpb25GaWVsZChleHRlbnNpb24sICdhZGROb2RlVmlldycpKVxyXG4gICAgICAgICAgICAubWFwKGV4dGVuc2lvbiA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGV4dGVuc2lvbkF0dHJpYnV0ZXMgPSB0aGlzLmF0dHJpYnV0ZXMuZmlsdGVyKGF0dHJpYnV0ZSA9PiBhdHRyaWJ1dGUudHlwZSA9PT0gZXh0ZW5zaW9uLm5hbWUpO1xyXG4gICAgICAgICAgICBjb25zdCBjb250ZXh0ID0ge1xyXG4gICAgICAgICAgICAgICAgbmFtZTogZXh0ZW5zaW9uLm5hbWUsXHJcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBleHRlbnNpb24ub3B0aW9ucyxcclxuICAgICAgICAgICAgICAgIHN0b3JhZ2U6IGV4dGVuc2lvbi5zdG9yYWdlLFxyXG4gICAgICAgICAgICAgICAgZWRpdG9yLFxyXG4gICAgICAgICAgICAgICAgdHlwZTogZ2V0Tm9kZVR5cGUoZXh0ZW5zaW9uLm5hbWUsIHRoaXMuc2NoZW1hKSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgY29uc3QgYWRkTm9kZVZpZXcgPSBnZXRFeHRlbnNpb25GaWVsZChleHRlbnNpb24sICdhZGROb2RlVmlldycsIGNvbnRleHQpO1xyXG4gICAgICAgICAgICBpZiAoIWFkZE5vZGVWaWV3KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3Qgbm9kZXZpZXcgPSAobm9kZSwgdmlldywgZ2V0UG9zLCBkZWNvcmF0aW9ucykgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgSFRNTEF0dHJpYnV0ZXMgPSBnZXRSZW5kZXJlZEF0dHJpYnV0ZXMobm9kZSwgZXh0ZW5zaW9uQXR0cmlidXRlcyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYWRkTm9kZVZpZXcoKSh7XHJcbiAgICAgICAgICAgICAgICAgICAgZWRpdG9yLFxyXG4gICAgICAgICAgICAgICAgICAgIG5vZGUsXHJcbiAgICAgICAgICAgICAgICAgICAgZ2V0UG9zLFxyXG4gICAgICAgICAgICAgICAgICAgIGRlY29yYXRpb25zLFxyXG4gICAgICAgICAgICAgICAgICAgIEhUTUxBdHRyaWJ1dGVzLFxyXG4gICAgICAgICAgICAgICAgICAgIGV4dGVuc2lvbixcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICByZXR1cm4gW2V4dGVuc2lvbi5uYW1lLCBub2Rldmlld107XHJcbiAgICAgICAgfSkpO1xyXG4gICAgfVxyXG59XG5cbi8vIHNlZTogaHR0cHM6Ly9naXRodWIuY29tL21lc3F1ZWViL2lzLXdoYXQvYmxvYi84OGQ2ZTRjYTkyZmIyYmFhYjYwMDNjNTRlMDJlZWRmNGU3MjllNWFiL3NyYy9pbmRleC50c1xyXG5mdW5jdGlvbiBnZXRUeXBlKHZhbHVlKSB7XHJcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKS5zbGljZSg4LCAtMSk7XHJcbn1cclxuZnVuY3Rpb24gaXNQbGFpbk9iamVjdCh2YWx1ZSkge1xyXG4gICAgaWYgKGdldFR5cGUodmFsdWUpICE9PSAnT2JqZWN0Jykge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIHJldHVybiB2YWx1ZS5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0ICYmIE9iamVjdC5nZXRQcm90b3R5cGVPZih2YWx1ZSkgPT09IE9iamVjdC5wcm90b3R5cGU7XHJcbn1cblxuZnVuY3Rpb24gbWVyZ2VEZWVwKHRhcmdldCwgc291cmNlKSB7XHJcbiAgICBjb25zdCBvdXRwdXQgPSB7IC4uLnRhcmdldCB9O1xyXG4gICAgaWYgKGlzUGxhaW5PYmplY3QodGFyZ2V0KSAmJiBpc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcclxuICAgICAgICBPYmplY3Qua2V5cyhzb3VyY2UpLmZvckVhY2goa2V5ID0+IHtcclxuICAgICAgICAgICAgaWYgKGlzUGxhaW5PYmplY3Qoc291cmNlW2tleV0pKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIShrZXkgaW4gdGFyZ2V0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24ob3V0cHV0LCB7IFtrZXldOiBzb3VyY2Vba2V5XSB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIG91dHB1dFtrZXldID0gbWVyZ2VEZWVwKHRhcmdldFtrZXldLCBzb3VyY2Vba2V5XSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKG91dHB1dCwgeyBba2V5XTogc291cmNlW2tleV0gfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiBvdXRwdXQ7XHJcbn1cblxuY2xhc3MgRXh0ZW5zaW9uIHtcclxuICAgIGNvbnN0cnVjdG9yKGNvbmZpZyA9IHt9KSB7XHJcbiAgICAgICAgdGhpcy50eXBlID0gJ2V4dGVuc2lvbic7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gJ2V4dGVuc2lvbic7XHJcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuY2hpbGQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuY29uZmlnID0ge1xyXG4gICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWUsXHJcbiAgICAgICAgICAgIGRlZmF1bHRPcHRpb25zOiB7fSxcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuY29uZmlnID0ge1xyXG4gICAgICAgICAgICAuLi50aGlzLmNvbmZpZyxcclxuICAgICAgICAgICAgLi4uY29uZmlnLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5uYW1lID0gdGhpcy5jb25maWcubmFtZTtcclxuICAgICAgICBpZiAoY29uZmlnLmRlZmF1bHRPcHRpb25zKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgW3RpcHRhcCB3YXJuXTogQlJFQUtJTkcgQ0hBTkdFOiBcImRlZmF1bHRPcHRpb25zXCIgaXMgZGVwcmVjYXRlZC4gUGxlYXNlIHVzZSBcImFkZE9wdGlvbnNcIiBpbnN0ZWFkLiBGb3VuZCBpbiBleHRlbnNpb246IFwiJHt0aGlzLm5hbWV9XCIuYCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFRPRE86IHJlbW92ZSBgYWRkT3B0aW9uc2AgZmFsbGJhY2tcclxuICAgICAgICB0aGlzLm9wdGlvbnMgPSB0aGlzLmNvbmZpZy5kZWZhdWx0T3B0aW9ucztcclxuICAgICAgICBpZiAodGhpcy5jb25maWcuYWRkT3B0aW9ucykge1xyXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMgPSBjYWxsT3JSZXR1cm4oZ2V0RXh0ZW5zaW9uRmllbGQodGhpcywgJ2FkZE9wdGlvbnMnLCB7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWUsXHJcbiAgICAgICAgICAgIH0pKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5zdG9yYWdlID0gY2FsbE9yUmV0dXJuKGdldEV4dGVuc2lvbkZpZWxkKHRoaXMsICdhZGRTdG9yYWdlJywge1xyXG4gICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWUsXHJcbiAgICAgICAgICAgIG9wdGlvbnM6IHRoaXMub3B0aW9ucyxcclxuICAgICAgICB9KSkgfHwge307XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgY3JlYXRlKGNvbmZpZyA9IHt9KSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBFeHRlbnNpb24oY29uZmlnKTtcclxuICAgIH1cclxuICAgIGNvbmZpZ3VyZShvcHRpb25zID0ge30pIHtcclxuICAgICAgICAvLyByZXR1cm4gYSBuZXcgaW5zdGFuY2Ugc28gd2UgY2FuIHVzZSB0aGUgc2FtZSBleHRlbnNpb25cclxuICAgICAgICAvLyB3aXRoIGRpZmZlcmVudCBjYWxscyBvZiBgY29uZmlndXJlYFxyXG4gICAgICAgIGNvbnN0IGV4dGVuc2lvbiA9IHRoaXMuZXh0ZW5kKCk7XHJcbiAgICAgICAgZXh0ZW5zaW9uLm9wdGlvbnMgPSBtZXJnZURlZXAodGhpcy5vcHRpb25zLCBvcHRpb25zKTtcclxuICAgICAgICBleHRlbnNpb24uc3RvcmFnZSA9IGNhbGxPclJldHVybihnZXRFeHRlbnNpb25GaWVsZChleHRlbnNpb24sICdhZGRTdG9yYWdlJywge1xyXG4gICAgICAgICAgICBuYW1lOiBleHRlbnNpb24ubmFtZSxcclxuICAgICAgICAgICAgb3B0aW9uczogZXh0ZW5zaW9uLm9wdGlvbnMsXHJcbiAgICAgICAgfSkpO1xyXG4gICAgICAgIHJldHVybiBleHRlbnNpb247XHJcbiAgICB9XHJcbiAgICBleHRlbmQoZXh0ZW5kZWRDb25maWcgPSB7fSkge1xyXG4gICAgICAgIGNvbnN0IGV4dGVuc2lvbiA9IG5ldyBFeHRlbnNpb24oZXh0ZW5kZWRDb25maWcpO1xyXG4gICAgICAgIGV4dGVuc2lvbi5wYXJlbnQgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuY2hpbGQgPSBleHRlbnNpb247XHJcbiAgICAgICAgZXh0ZW5zaW9uLm5hbWUgPSBleHRlbmRlZENvbmZpZy5uYW1lXHJcbiAgICAgICAgICAgID8gZXh0ZW5kZWRDb25maWcubmFtZVxyXG4gICAgICAgICAgICA6IGV4dGVuc2lvbi5wYXJlbnQubmFtZTtcclxuICAgICAgICBpZiAoZXh0ZW5kZWRDb25maWcuZGVmYXVsdE9wdGlvbnMpIHtcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKGBbdGlwdGFwIHdhcm5dOiBCUkVBS0lORyBDSEFOR0U6IFwiZGVmYXVsdE9wdGlvbnNcIiBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIFwiYWRkT3B0aW9uc1wiIGluc3RlYWQuIEZvdW5kIGluIGV4dGVuc2lvbjogXCIke2V4dGVuc2lvbi5uYW1lfVwiLmApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBleHRlbnNpb24ub3B0aW9ucyA9IGNhbGxPclJldHVybihnZXRFeHRlbnNpb25GaWVsZChleHRlbnNpb24sICdhZGRPcHRpb25zJywge1xyXG4gICAgICAgICAgICBuYW1lOiBleHRlbnNpb24ubmFtZSxcclxuICAgICAgICB9KSk7XHJcbiAgICAgICAgZXh0ZW5zaW9uLnN0b3JhZ2UgPSBjYWxsT3JSZXR1cm4oZ2V0RXh0ZW5zaW9uRmllbGQoZXh0ZW5zaW9uLCAnYWRkU3RvcmFnZScsIHtcclxuICAgICAgICAgICAgbmFtZTogZXh0ZW5zaW9uLm5hbWUsXHJcbiAgICAgICAgICAgIG9wdGlvbnM6IGV4dGVuc2lvbi5vcHRpb25zLFxyXG4gICAgICAgIH0pKTtcclxuICAgICAgICByZXR1cm4gZXh0ZW5zaW9uO1xyXG4gICAgfVxyXG59XG5cbmZ1bmN0aW9uIGdldFRleHRCZXR3ZWVuKHN0YXJ0Tm9kZSwgcmFuZ2UsIG9wdGlvbnMpIHtcclxuICAgIGNvbnN0IHsgZnJvbSwgdG8gfSA9IHJhbmdlO1xyXG4gICAgY29uc3QgeyBibG9ja1NlcGFyYXRvciA9ICdcXG5cXG4nLCB0ZXh0U2VyaWFsaXplcnMgPSB7fSwgfSA9IG9wdGlvbnMgfHwge307XHJcbiAgICBsZXQgdGV4dCA9ICcnO1xyXG4gICAgbGV0IHNlcGFyYXRlZCA9IHRydWU7XHJcbiAgICBzdGFydE5vZGUubm9kZXNCZXR3ZWVuKGZyb20sIHRvLCAobm9kZSwgcG9zLCBwYXJlbnQsIGluZGV4KSA9PiB7XHJcbiAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgIGNvbnN0IHRleHRTZXJpYWxpemVyID0gdGV4dFNlcmlhbGl6ZXJzID09PSBudWxsIHx8IHRleHRTZXJpYWxpemVycyA9PT0gdm9pZCAwID8gdm9pZCAwIDogdGV4dFNlcmlhbGl6ZXJzW25vZGUudHlwZS5uYW1lXTtcclxuICAgICAgICBpZiAodGV4dFNlcmlhbGl6ZXIpIHtcclxuICAgICAgICAgICAgaWYgKG5vZGUuaXNCbG9jayAmJiAhc2VwYXJhdGVkKSB7XHJcbiAgICAgICAgICAgICAgICB0ZXh0ICs9IGJsb2NrU2VwYXJhdG9yO1xyXG4gICAgICAgICAgICAgICAgc2VwYXJhdGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAocGFyZW50KSB7XHJcbiAgICAgICAgICAgICAgICB0ZXh0ICs9IHRleHRTZXJpYWxpemVyKHtcclxuICAgICAgICAgICAgICAgICAgICBub2RlLFxyXG4gICAgICAgICAgICAgICAgICAgIHBvcyxcclxuICAgICAgICAgICAgICAgICAgICBwYXJlbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgaW5kZXgsXHJcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2UsXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChub2RlLmlzVGV4dCkge1xyXG4gICAgICAgICAgICB0ZXh0ICs9IChfYSA9IG5vZGUgPT09IG51bGwgfHwgbm9kZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogbm9kZS50ZXh0KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc2xpY2UoTWF0aC5tYXgoZnJvbSwgcG9zKSAtIHBvcywgdG8gLSBwb3MpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXHJcbiAgICAgICAgICAgIHNlcGFyYXRlZCA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChub2RlLmlzQmxvY2sgJiYgIXNlcGFyYXRlZCkge1xyXG4gICAgICAgICAgICB0ZXh0ICs9IGJsb2NrU2VwYXJhdG9yO1xyXG4gICAgICAgICAgICBzZXBhcmF0ZWQgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHRleHQ7XHJcbn1cblxuZnVuY3Rpb24gZ2V0VGV4dFNlcmlhbGl6ZXJzRnJvbVNjaGVtYShzY2hlbWEpIHtcclxuICAgIHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMoT2JqZWN0XHJcbiAgICAgICAgLmVudHJpZXMoc2NoZW1hLm5vZGVzKVxyXG4gICAgICAgIC5maWx0ZXIoKFssIG5vZGVdKSA9PiBub2RlLnNwZWMudG9UZXh0KVxyXG4gICAgICAgIC5tYXAoKFtuYW1lLCBub2RlXSkgPT4gW25hbWUsIG5vZGUuc3BlYy50b1RleHRdKSk7XHJcbn1cblxuY29uc3QgQ2xpcGJvYXJkVGV4dFNlcmlhbGl6ZXIgPSBFeHRlbnNpb24uY3JlYXRlKHtcclxuICAgIG5hbWU6ICdjbGlwYm9hcmRUZXh0U2VyaWFsaXplcicsXHJcbiAgICBhZGRQcm9zZU1pcnJvclBsdWdpbnMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgbmV3IFBsdWdpbih7XHJcbiAgICAgICAgICAgICAgICBrZXk6IG5ldyBQbHVnaW5LZXkoJ2NsaXBib2FyZFRleHRTZXJpYWxpemVyJyksXHJcbiAgICAgICAgICAgICAgICBwcm9wczoge1xyXG4gICAgICAgICAgICAgICAgICAgIGNsaXBib2FyZFRleHRTZXJpYWxpemVyOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgZWRpdG9yIH0gPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB7IHN0YXRlLCBzY2hlbWEgfSA9IGVkaXRvcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBkb2MsIHNlbGVjdGlvbiB9ID0gc3RhdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgcmFuZ2VzIH0gPSBzZWxlY3Rpb247XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZyb20gPSBNYXRoLm1pbiguLi5yYW5nZXMubWFwKHJhbmdlID0+IHJhbmdlLiRmcm9tLnBvcykpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0byA9IE1hdGgubWF4KC4uLnJhbmdlcy5tYXAocmFuZ2UgPT4gcmFuZ2UuJHRvLnBvcykpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZXh0U2VyaWFsaXplcnMgPSBnZXRUZXh0U2VyaWFsaXplcnNGcm9tU2NoZW1hKHNjaGVtYSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJhbmdlID0geyBmcm9tLCB0byB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2V0VGV4dEJldHdlZW4oZG9jLCByYW5nZSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dFNlcmlhbGl6ZXJzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgXTtcclxuICAgIH0sXHJcbn0pO1xuXG5jb25zdCBibHVyID0gKCkgPT4gKHsgZWRpdG9yLCB2aWV3IH0pID0+IHtcclxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XHJcbiAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgIGlmICghZWRpdG9yLmlzRGVzdHJveWVkKSB7XHJcbiAgICAgICAgICAgIHZpZXcuZG9tLmJsdXIoKTtcclxuICAgICAgICAgICAgLy8gQnJvd3NlcnMgc2hvdWxkIHJlbW92ZSB0aGUgY2FyZXQgb24gYmx1ciBidXQgc2FmYXJpIGRvZXMgbm90LlxyXG4gICAgICAgICAgICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS91ZWJlcmRvc2lzL3RpcHRhcC9pc3N1ZXMvMjQwNVxyXG4gICAgICAgICAgICAoX2EgPSB3aW5kb3cgPT09IG51bGwgfHwgd2luZG93ID09PSB2b2lkIDAgPyB2b2lkIDAgOiB3aW5kb3cuZ2V0U2VsZWN0aW9uKCkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5yZW1vdmVBbGxSYW5nZXMoKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIHJldHVybiB0cnVlO1xyXG59O1xuXG5jb25zdCBjbGVhckNvbnRlbnQgPSAoZW1pdFVwZGF0ZSA9IGZhbHNlKSA9PiAoeyBjb21tYW5kcyB9KSA9PiB7XHJcbiAgICByZXR1cm4gY29tbWFuZHMuc2V0Q29udGVudCgnJywgZW1pdFVwZGF0ZSk7XHJcbn07XG5cbmNvbnN0IGNsZWFyTm9kZXMgPSAoKSA9PiAoeyBzdGF0ZSwgdHIsIGRpc3BhdGNoIH0pID0+IHtcclxuICAgIGNvbnN0IHsgc2VsZWN0aW9uIH0gPSB0cjtcclxuICAgIGNvbnN0IHsgcmFuZ2VzIH0gPSBzZWxlY3Rpb247XHJcbiAgICBpZiAoIWRpc3BhdGNoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICByYW5nZXMuZm9yRWFjaCgoeyAkZnJvbSwgJHRvIH0pID0+IHtcclxuICAgICAgICBzdGF0ZS5kb2Mubm9kZXNCZXR3ZWVuKCRmcm9tLnBvcywgJHRvLnBvcywgKG5vZGUsIHBvcykgPT4ge1xyXG4gICAgICAgICAgICBpZiAobm9kZS50eXBlLmlzVGV4dCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IHsgZG9jLCBtYXBwaW5nIH0gPSB0cjtcclxuICAgICAgICAgICAgY29uc3QgJG1hcHBlZEZyb20gPSBkb2MucmVzb2x2ZShtYXBwaW5nLm1hcChwb3MpKTtcclxuICAgICAgICAgICAgY29uc3QgJG1hcHBlZFRvID0gZG9jLnJlc29sdmUobWFwcGluZy5tYXAocG9zICsgbm9kZS5ub2RlU2l6ZSkpO1xyXG4gICAgICAgICAgICBjb25zdCBub2RlUmFuZ2UgPSAkbWFwcGVkRnJvbS5ibG9ja1JhbmdlKCRtYXBwZWRUbyk7XHJcbiAgICAgICAgICAgIGlmICghbm9kZVJhbmdlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgdGFyZ2V0TGlmdERlcHRoID0gbGlmdFRhcmdldChub2RlUmFuZ2UpO1xyXG4gICAgICAgICAgICBpZiAobm9kZS50eXBlLmlzVGV4dGJsb2NrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB7IGRlZmF1bHRUeXBlIH0gPSAkbWFwcGVkRnJvbS5wYXJlbnQuY29udGVudE1hdGNoQXQoJG1hcHBlZEZyb20uaW5kZXgoKSk7XHJcbiAgICAgICAgICAgICAgICB0ci5zZXROb2RlTWFya3VwKG5vZGVSYW5nZS5zdGFydCwgZGVmYXVsdFR5cGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0YXJnZXRMaWZ0RGVwdGggfHwgdGFyZ2V0TGlmdERlcHRoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICB0ci5saWZ0KG5vZGVSYW5nZSwgdGFyZ2V0TGlmdERlcHRoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufTtcblxuY29uc3QgY29tbWFuZCA9IGZuID0+IHByb3BzID0+IHtcclxuICAgIHJldHVybiBmbihwcm9wcyk7XHJcbn07XG5cbmNvbnN0IGNyZWF0ZVBhcmFncmFwaE5lYXIgPSAoKSA9PiAoeyBzdGF0ZSwgZGlzcGF0Y2ggfSkgPT4ge1xyXG4gICAgcmV0dXJuIGNyZWF0ZVBhcmFncmFwaE5lYXIkMShzdGF0ZSwgZGlzcGF0Y2gpO1xyXG59O1xuXG5jb25zdCBkZWxldGVOb2RlID0gdHlwZU9yTmFtZSA9PiAoeyB0ciwgc3RhdGUsIGRpc3BhdGNoIH0pID0+IHtcclxuICAgIGNvbnN0IHR5cGUgPSBnZXROb2RlVHlwZSh0eXBlT3JOYW1lLCBzdGF0ZS5zY2hlbWEpO1xyXG4gICAgY29uc3QgJHBvcyA9IHRyLnNlbGVjdGlvbi4kYW5jaG9yO1xyXG4gICAgZm9yIChsZXQgZGVwdGggPSAkcG9zLmRlcHRoOyBkZXB0aCA+IDA7IGRlcHRoIC09IDEpIHtcclxuICAgICAgICBjb25zdCBub2RlID0gJHBvcy5ub2RlKGRlcHRoKTtcclxuICAgICAgICBpZiAobm9kZS50eXBlID09PSB0eXBlKSB7XHJcbiAgICAgICAgICAgIGlmIChkaXNwYXRjaCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZnJvbSA9ICRwb3MuYmVmb3JlKGRlcHRoKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRvID0gJHBvcy5hZnRlcihkZXB0aCk7XHJcbiAgICAgICAgICAgICAgICB0ci5kZWxldGUoZnJvbSwgdG8pLnNjcm9sbEludG9WaWV3KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG59O1xuXG5jb25zdCBkZWxldGVSYW5nZSA9IHJhbmdlID0+ICh7IHRyLCBkaXNwYXRjaCB9KSA9PiB7XHJcbiAgICBjb25zdCB7IGZyb20sIHRvIH0gPSByYW5nZTtcclxuICAgIGlmIChkaXNwYXRjaCkge1xyXG4gICAgICAgIHRyLmRlbGV0ZShmcm9tLCB0byk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufTtcblxuY29uc3QgZGVsZXRlU2VsZWN0aW9uID0gKCkgPT4gKHsgc3RhdGUsIGRpc3BhdGNoIH0pID0+IHtcclxuICAgIHJldHVybiBkZWxldGVTZWxlY3Rpb24kMShzdGF0ZSwgZGlzcGF0Y2gpO1xyXG59O1xuXG5jb25zdCBlbnRlciA9ICgpID0+ICh7IGNvbW1hbmRzIH0pID0+IHtcclxuICAgIHJldHVybiBjb21tYW5kcy5rZXlib2FyZFNob3J0Y3V0KCdFbnRlcicpO1xyXG59O1xuXG5jb25zdCBleGl0Q29kZSA9ICgpID0+ICh7IHN0YXRlLCBkaXNwYXRjaCB9KSA9PiB7XHJcbiAgICByZXR1cm4gZXhpdENvZGUkMShzdGF0ZSwgZGlzcGF0Y2gpO1xyXG59O1xuXG4vKipcclxuICogQ2hlY2sgaWYgb2JqZWN0MSBpbmNsdWRlcyBvYmplY3QyXHJcbiAqIEBwYXJhbSBvYmplY3QxIE9iamVjdFxyXG4gKiBAcGFyYW0gb2JqZWN0MiBPYmplY3RcclxuICovXHJcbmZ1bmN0aW9uIG9iamVjdEluY2x1ZGVzKG9iamVjdDEsIG9iamVjdDIsIG9wdGlvbnMgPSB7IHN0cmljdDogdHJ1ZSB9KSB7XHJcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0Mik7XHJcbiAgICBpZiAoIWtleXMubGVuZ3RoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4ga2V5cy5ldmVyeShrZXkgPT4ge1xyXG4gICAgICAgIGlmIChvcHRpb25zLnN0cmljdCkge1xyXG4gICAgICAgICAgICByZXR1cm4gb2JqZWN0MltrZXldID09PSBvYmplY3QxW2tleV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChpc1JlZ0V4cChvYmplY3QyW2tleV0pKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBvYmplY3QyW2tleV0udGVzdChvYmplY3QxW2tleV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gb2JqZWN0MltrZXldID09PSBvYmplY3QxW2tleV07XHJcbiAgICB9KTtcclxufVxuXG5mdW5jdGlvbiBmaW5kTWFya0luU2V0KG1hcmtzLCB0eXBlLCBhdHRyaWJ1dGVzID0ge30pIHtcclxuICAgIHJldHVybiBtYXJrcy5maW5kKGl0ZW0gPT4ge1xyXG4gICAgICAgIHJldHVybiBpdGVtLnR5cGUgPT09IHR5cGUgJiYgb2JqZWN0SW5jbHVkZXMoaXRlbS5hdHRycywgYXR0cmlidXRlcyk7XHJcbiAgICB9KTtcclxufVxyXG5mdW5jdGlvbiBpc01hcmtJblNldChtYXJrcywgdHlwZSwgYXR0cmlidXRlcyA9IHt9KSB7XHJcbiAgICByZXR1cm4gISFmaW5kTWFya0luU2V0KG1hcmtzLCB0eXBlLCBhdHRyaWJ1dGVzKTtcclxufVxyXG5mdW5jdGlvbiBnZXRNYXJrUmFuZ2UoJHBvcywgdHlwZSwgYXR0cmlidXRlcyA9IHt9KSB7XHJcbiAgICBpZiAoISRwb3MgfHwgIXR5cGUpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBsZXQgc3RhcnQgPSAkcG9zLnBhcmVudC5jaGlsZEFmdGVyKCRwb3MucGFyZW50T2Zmc2V0KTtcclxuICAgIGlmICgkcG9zLnBhcmVudE9mZnNldCA9PT0gc3RhcnQub2Zmc2V0ICYmIHN0YXJ0Lm9mZnNldCAhPT0gMCkge1xyXG4gICAgICAgIHN0YXJ0ID0gJHBvcy5wYXJlbnQuY2hpbGRCZWZvcmUoJHBvcy5wYXJlbnRPZmZzZXQpO1xyXG4gICAgfVxyXG4gICAgaWYgKCFzdGFydC5ub2RlKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgY29uc3QgbWFyayA9IGZpbmRNYXJrSW5TZXQoWy4uLnN0YXJ0Lm5vZGUubWFya3NdLCB0eXBlLCBhdHRyaWJ1dGVzKTtcclxuICAgIGlmICghbWFyaykge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGxldCBzdGFydEluZGV4ID0gc3RhcnQuaW5kZXg7XHJcbiAgICBsZXQgc3RhcnRQb3MgPSAkcG9zLnN0YXJ0KCkgKyBzdGFydC5vZmZzZXQ7XHJcbiAgICBsZXQgZW5kSW5kZXggPSBzdGFydEluZGV4ICsgMTtcclxuICAgIGxldCBlbmRQb3MgPSBzdGFydFBvcyArIHN0YXJ0Lm5vZGUubm9kZVNpemU7XHJcbiAgICBmaW5kTWFya0luU2V0KFsuLi5zdGFydC5ub2RlLm1hcmtzXSwgdHlwZSwgYXR0cmlidXRlcyk7XHJcbiAgICB3aGlsZSAoc3RhcnRJbmRleCA+IDAgJiYgbWFyay5pc0luU2V0KCRwb3MucGFyZW50LmNoaWxkKHN0YXJ0SW5kZXggLSAxKS5tYXJrcykpIHtcclxuICAgICAgICBzdGFydEluZGV4IC09IDE7XHJcbiAgICAgICAgc3RhcnRQb3MgLT0gJHBvcy5wYXJlbnQuY2hpbGQoc3RhcnRJbmRleCkubm9kZVNpemU7XHJcbiAgICB9XHJcbiAgICB3aGlsZSAoZW5kSW5kZXggPCAkcG9zLnBhcmVudC5jaGlsZENvdW50XHJcbiAgICAgICAgJiYgaXNNYXJrSW5TZXQoWy4uLiRwb3MucGFyZW50LmNoaWxkKGVuZEluZGV4KS5tYXJrc10sIHR5cGUsIGF0dHJpYnV0ZXMpKSB7XHJcbiAgICAgICAgZW5kUG9zICs9ICRwb3MucGFyZW50LmNoaWxkKGVuZEluZGV4KS5ub2RlU2l6ZTtcclxuICAgICAgICBlbmRJbmRleCArPSAxO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBmcm9tOiBzdGFydFBvcyxcclxuICAgICAgICB0bzogZW5kUG9zLFxyXG4gICAgfTtcclxufVxuXG5mdW5jdGlvbiBnZXRNYXJrVHlwZShuYW1lT3JUeXBlLCBzY2hlbWEpIHtcclxuICAgIGlmICh0eXBlb2YgbmFtZU9yVHlwZSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICBpZiAoIXNjaGVtYS5tYXJrc1tuYW1lT3JUeXBlXSkge1xyXG4gICAgICAgICAgICB0aHJvdyBFcnJvcihgVGhlcmUgaXMgbm8gbWFyayB0eXBlIG5hbWVkICcke25hbWVPclR5cGV9Jy4gTWF5YmUgeW91IGZvcmdvdCB0byBhZGQgdGhlIGV4dGVuc2lvbj9gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHNjaGVtYS5tYXJrc1tuYW1lT3JUeXBlXTtcclxuICAgIH1cclxuICAgIHJldHVybiBuYW1lT3JUeXBlO1xyXG59XG5cbmNvbnN0IGV4dGVuZE1hcmtSYW5nZSA9ICh0eXBlT3JOYW1lLCBhdHRyaWJ1dGVzID0ge30pID0+ICh7IHRyLCBzdGF0ZSwgZGlzcGF0Y2ggfSkgPT4ge1xyXG4gICAgY29uc3QgdHlwZSA9IGdldE1hcmtUeXBlKHR5cGVPck5hbWUsIHN0YXRlLnNjaGVtYSk7XHJcbiAgICBjb25zdCB7IGRvYywgc2VsZWN0aW9uIH0gPSB0cjtcclxuICAgIGNvbnN0IHsgJGZyb20sIGZyb20sIHRvIH0gPSBzZWxlY3Rpb247XHJcbiAgICBpZiAoZGlzcGF0Y2gpIHtcclxuICAgICAgICBjb25zdCByYW5nZSA9IGdldE1hcmtSYW5nZSgkZnJvbSwgdHlwZSwgYXR0cmlidXRlcyk7XHJcbiAgICAgICAgaWYgKHJhbmdlICYmIHJhbmdlLmZyb20gPD0gZnJvbSAmJiByYW5nZS50byA+PSB0bykge1xyXG4gICAgICAgICAgICBjb25zdCBuZXdTZWxlY3Rpb24gPSBUZXh0U2VsZWN0aW9uLmNyZWF0ZShkb2MsIHJhbmdlLmZyb20sIHJhbmdlLnRvKTtcclxuICAgICAgICAgICAgdHIuc2V0U2VsZWN0aW9uKG5ld1NlbGVjdGlvbik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbn07XG5cbmNvbnN0IGZpcnN0ID0gY29tbWFuZHMgPT4gcHJvcHMgPT4ge1xyXG4gICAgY29uc3QgaXRlbXMgPSB0eXBlb2YgY29tbWFuZHMgPT09ICdmdW5jdGlvbidcclxuICAgICAgICA/IGNvbW1hbmRzKHByb3BzKVxyXG4gICAgICAgIDogY29tbWFuZHM7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgaSArPSAxKSB7XHJcbiAgICAgICAgaWYgKGl0ZW1zW2ldKHByb3BzKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbn07XG5cbmZ1bmN0aW9uIGlzQ2xhc3ModmFsdWUpIHtcclxuICAgIHZhciBfYTtcclxuICAgIGlmICgoKF9hID0gdmFsdWUuY29uc3RydWN0b3IpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS50b1N0cmluZygpLnN1YnN0cmluZygwLCA1KSkgIT09ICdjbGFzcycpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufVxuXG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xyXG4gICAgcmV0dXJuICh2YWx1ZVxyXG4gICAgICAgICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCdcclxuICAgICAgICAmJiAhQXJyYXkuaXNBcnJheSh2YWx1ZSlcclxuICAgICAgICAmJiAhaXNDbGFzcyh2YWx1ZSkpO1xyXG59XG5cbmZ1bmN0aW9uIGlzVGV4dFNlbGVjdGlvbih2YWx1ZSkge1xyXG4gICAgcmV0dXJuIGlzT2JqZWN0KHZhbHVlKSAmJiB2YWx1ZSBpbnN0YW5jZW9mIFRleHRTZWxlY3Rpb247XHJcbn1cblxuZnVuY3Rpb24gbWluTWF4KHZhbHVlID0gMCwgbWluID0gMCwgbWF4ID0gMCkge1xyXG4gICAgcmV0dXJuIE1hdGgubWluKE1hdGgubWF4KHZhbHVlLCBtaW4pLCBtYXgpO1xyXG59XG5cbmZ1bmN0aW9uIHJlc29sdmVGb2N1c1Bvc2l0aW9uKGRvYywgcG9zaXRpb24gPSBudWxsKSB7XHJcbiAgICBpZiAoIXBvc2l0aW9uKSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICBjb25zdCBzZWxlY3Rpb25BdFN0YXJ0ID0gU2VsZWN0aW9uLmF0U3RhcnQoZG9jKTtcclxuICAgIGNvbnN0IHNlbGVjdGlvbkF0RW5kID0gU2VsZWN0aW9uLmF0RW5kKGRvYyk7XHJcbiAgICBpZiAocG9zaXRpb24gPT09ICdzdGFydCcgfHwgcG9zaXRpb24gPT09IHRydWUpIHtcclxuICAgICAgICByZXR1cm4gc2VsZWN0aW9uQXRTdGFydDtcclxuICAgIH1cclxuICAgIGlmIChwb3NpdGlvbiA9PT0gJ2VuZCcpIHtcclxuICAgICAgICByZXR1cm4gc2VsZWN0aW9uQXRFbmQ7XHJcbiAgICB9XHJcbiAgICBjb25zdCBtaW5Qb3MgPSBzZWxlY3Rpb25BdFN0YXJ0LmZyb207XHJcbiAgICBjb25zdCBtYXhQb3MgPSBzZWxlY3Rpb25BdEVuZC50bztcclxuICAgIGlmIChwb3NpdGlvbiA9PT0gJ2FsbCcpIHtcclxuICAgICAgICByZXR1cm4gVGV4dFNlbGVjdGlvbi5jcmVhdGUoZG9jLCBtaW5NYXgoMCwgbWluUG9zLCBtYXhQb3MpLCBtaW5NYXgoZG9jLmNvbnRlbnQuc2l6ZSwgbWluUG9zLCBtYXhQb3MpKTtcclxuICAgIH1cclxuICAgIHJldHVybiBUZXh0U2VsZWN0aW9uLmNyZWF0ZShkb2MsIG1pbk1heChwb3NpdGlvbiwgbWluUG9zLCBtYXhQb3MpLCBtaW5NYXgocG9zaXRpb24sIG1pblBvcywgbWF4UG9zKSk7XHJcbn1cblxuZnVuY3Rpb24gaXNpT1MoKSB7XHJcbiAgICByZXR1cm4gW1xyXG4gICAgICAgICdpUGFkIFNpbXVsYXRvcicsXHJcbiAgICAgICAgJ2lQaG9uZSBTaW11bGF0b3InLFxyXG4gICAgICAgICdpUG9kIFNpbXVsYXRvcicsXHJcbiAgICAgICAgJ2lQYWQnLFxyXG4gICAgICAgICdpUGhvbmUnLFxyXG4gICAgICAgICdpUG9kJyxcclxuICAgIF0uaW5jbHVkZXMobmF2aWdhdG9yLnBsYXRmb3JtKVxyXG4gICAgICAgIC8vIGlQYWQgb24gaU9TIDEzIGRldGVjdGlvblxyXG4gICAgICAgIHx8IChuYXZpZ2F0b3IudXNlckFnZW50LmluY2x1ZGVzKCdNYWMnKSAmJiAnb250b3VjaGVuZCcgaW4gZG9jdW1lbnQpO1xyXG59XG5cbmNvbnN0IGZvY3VzID0gKHBvc2l0aW9uID0gbnVsbCwgb3B0aW9ucyA9IHt9KSA9PiAoeyBlZGl0b3IsIHZpZXcsIHRyLCBkaXNwYXRjaCwgfSkgPT4ge1xyXG4gICAgb3B0aW9ucyA9IHtcclxuICAgICAgICBzY3JvbGxJbnRvVmlldzogdHJ1ZSxcclxuICAgICAgICAuLi5vcHRpb25zLFxyXG4gICAgfTtcclxuICAgIGNvbnN0IGRlbGF5ZWRGb2N1cyA9ICgpID0+IHtcclxuICAgICAgICAvLyBmb2N1cyB3aXRoaW4gYHJlcXVlc3RBbmltYXRpb25GcmFtZWAgYnJlYWtzIGZvY3VzIG9uIGlPU1xyXG4gICAgICAgIC8vIHNvIHdlIGhhdmUgdG8gY2FsbCB0aGlzXHJcbiAgICAgICAgaWYgKGlzaU9TKCkpIHtcclxuICAgICAgICAgICAgdmlldy5kb20uZm9jdXMoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gRm9yIFJlYWN0IHdlIGhhdmUgdG8gZm9jdXMgYXN5bmNocm9ub3VzbHkuIE90aGVyd2lzZSB3aWxkIHRoaW5ncyBoYXBwZW4uXHJcbiAgICAgICAgLy8gc2VlOiBodHRwczovL2dpdGh1Yi5jb20vdWViZXJkb3Npcy90aXB0YXAvaXNzdWVzLzE1MjBcclxuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIWVkaXRvci5pc0Rlc3Ryb3llZCkge1xyXG4gICAgICAgICAgICAgICAgdmlldy5mb2N1cygpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5zY3JvbGxJbnRvVmlldykge1xyXG4gICAgICAgICAgICAgICAgICAgIGVkaXRvci5jb21tYW5kcy5zY3JvbGxJbnRvVmlldygpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgaWYgKCh2aWV3Lmhhc0ZvY3VzKCkgJiYgcG9zaXRpb24gPT09IG51bGwpIHx8IHBvc2l0aW9uID09PSBmYWxzZSkge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgLy8gd2UgZG9u4oCZdCB0cnkgdG8gcmVzb2x2ZSBhIE5vZGVTZWxlY3Rpb24gb3IgQ2VsbFNlbGVjdGlvblxyXG4gICAgaWYgKGRpc3BhdGNoICYmIHBvc2l0aW9uID09PSBudWxsICYmICFpc1RleHRTZWxlY3Rpb24oZWRpdG9yLnN0YXRlLnNlbGVjdGlvbikpIHtcclxuICAgICAgICBkZWxheWVkRm9jdXMoKTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIC8vIHBhc3MgdGhyb3VnaCB0ci5kb2MgaW5zdGVhZCBvZiBlZGl0b3Iuc3RhdGUuZG9jXHJcbiAgICAvLyBzaW5jZSB0cmFuc2FjdGlvbnMgY291bGQgY2hhbmdlIHRoZSBlZGl0b3JzIHN0YXRlIGJlZm9yZSB0aGlzIGNvbW1hbmQgaGFzIGJlZW4gcnVuXHJcbiAgICBjb25zdCBzZWxlY3Rpb24gPSByZXNvbHZlRm9jdXNQb3NpdGlvbih0ci5kb2MsIHBvc2l0aW9uKSB8fCBlZGl0b3Iuc3RhdGUuc2VsZWN0aW9uO1xyXG4gICAgY29uc3QgaXNTYW1lU2VsZWN0aW9uID0gZWRpdG9yLnN0YXRlLnNlbGVjdGlvbi5lcShzZWxlY3Rpb24pO1xyXG4gICAgaWYgKGRpc3BhdGNoKSB7XHJcbiAgICAgICAgaWYgKCFpc1NhbWVTZWxlY3Rpb24pIHtcclxuICAgICAgICAgICAgdHIuc2V0U2VsZWN0aW9uKHNlbGVjdGlvbik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGB0ci5zZXRTZWxlY3Rpb25gIHJlc2V0cyB0aGUgc3RvcmVkIG1hcmtzXHJcbiAgICAgICAgLy8gc28gd2XigJlsbCByZXN0b3JlIHRoZW0gaWYgdGhlIHNlbGVjdGlvbiBpcyB0aGUgc2FtZSBhcyBiZWZvcmVcclxuICAgICAgICBpZiAoaXNTYW1lU2VsZWN0aW9uICYmIHRyLnN0b3JlZE1hcmtzKSB7XHJcbiAgICAgICAgICAgIHRyLnNldFN0b3JlZE1hcmtzKHRyLnN0b3JlZE1hcmtzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZGVsYXllZEZvY3VzKCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufTtcblxuY29uc3QgZm9yRWFjaCA9IChpdGVtcywgZm4pID0+IHByb3BzID0+IHtcclxuICAgIHJldHVybiBpdGVtcy5ldmVyeSgoaXRlbSwgaW5kZXgpID0+IGZuKGl0ZW0sIHsgLi4ucHJvcHMsIGluZGV4IH0pKTtcclxufTtcblxuY29uc3QgaW5zZXJ0Q29udGVudCA9ICh2YWx1ZSwgb3B0aW9ucykgPT4gKHsgdHIsIGNvbW1hbmRzIH0pID0+IHtcclxuICAgIHJldHVybiBjb21tYW5kcy5pbnNlcnRDb250ZW50QXQoeyBmcm9tOiB0ci5zZWxlY3Rpb24uZnJvbSwgdG86IHRyLnNlbGVjdGlvbi50byB9LCB2YWx1ZSwgb3B0aW9ucyk7XHJcbn07XG5cbmZ1bmN0aW9uIGVsZW1lbnRGcm9tU3RyaW5nKHZhbHVlKSB7XHJcbiAgICAvLyBhZGQgYSB3cmFwcGVyIHRvIHByZXNlcnZlIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHdoaXRlc3BhY2VcclxuICAgIGNvbnN0IHdyYXBwZWRWYWx1ZSA9IGA8Ym9keT4ke3ZhbHVlfTwvYm9keT5gO1xyXG4gICAgcmV0dXJuIG5ldyB3aW5kb3cuRE9NUGFyc2VyKCkucGFyc2VGcm9tU3RyaW5nKHdyYXBwZWRWYWx1ZSwgJ3RleHQvaHRtbCcpLmJvZHk7XHJcbn1cblxuZnVuY3Rpb24gY3JlYXRlTm9kZUZyb21Db250ZW50KGNvbnRlbnQsIHNjaGVtYSwgb3B0aW9ucykge1xyXG4gICAgb3B0aW9ucyA9IHtcclxuICAgICAgICBzbGljZTogdHJ1ZSxcclxuICAgICAgICBwYXJzZU9wdGlvbnM6IHt9LFxyXG4gICAgICAgIC4uLm9wdGlvbnMsXHJcbiAgICB9O1xyXG4gICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnb2JqZWN0JyAmJiBjb250ZW50ICE9PSBudWxsKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY29udGVudCkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBGcmFnbWVudC5mcm9tQXJyYXkoY29udGVudC5tYXAoaXRlbSA9PiBzY2hlbWEubm9kZUZyb21KU09OKGl0ZW0pKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHNjaGVtYS5ub2RlRnJvbUpTT04oY29udGVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ1t0aXB0YXAgd2Fybl06IEludmFsaWQgY29udGVudC4nLCAnUGFzc2VkIHZhbHVlOicsIGNvbnRlbnQsICdFcnJvcjonLCBlcnJvcik7XHJcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVOb2RlRnJvbUNvbnRlbnQoJycsIHNjaGVtYSwgb3B0aW9ucyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgIGNvbnN0IHBhcnNlciA9IERPTVBhcnNlci5mcm9tU2NoZW1hKHNjaGVtYSk7XHJcbiAgICAgICAgcmV0dXJuIG9wdGlvbnMuc2xpY2VcclxuICAgICAgICAgICAgPyBwYXJzZXIucGFyc2VTbGljZShlbGVtZW50RnJvbVN0cmluZyhjb250ZW50KSwgb3B0aW9ucy5wYXJzZU9wdGlvbnMpLmNvbnRlbnRcclxuICAgICAgICAgICAgOiBwYXJzZXIucGFyc2UoZWxlbWVudEZyb21TdHJpbmcoY29udGVudCksIG9wdGlvbnMucGFyc2VPcHRpb25zKTtcclxuICAgIH1cclxuICAgIHJldHVybiBjcmVhdGVOb2RlRnJvbUNvbnRlbnQoJycsIHNjaGVtYSwgb3B0aW9ucyk7XHJcbn1cblxuLy8gc291cmNlOiBodHRwczovL2dpdGh1Yi5jb20vUHJvc2VNaXJyb3IvcHJvc2VtaXJyb3Itc3RhdGUvYmxvYi9tYXN0ZXIvc3JjL3NlbGVjdGlvbi5qcyNMNDY2XHJcbmZ1bmN0aW9uIHNlbGVjdGlvblRvSW5zZXJ0aW9uRW5kKHRyLCBzdGFydExlbiwgYmlhcykge1xyXG4gICAgY29uc3QgbGFzdCA9IHRyLnN0ZXBzLmxlbmd0aCAtIDE7XHJcbiAgICBpZiAobGFzdCA8IHN0YXJ0TGVuKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgY29uc3Qgc3RlcCA9IHRyLnN0ZXBzW2xhc3RdO1xyXG4gICAgaWYgKCEoc3RlcCBpbnN0YW5jZW9mIFJlcGxhY2VTdGVwIHx8IHN0ZXAgaW5zdGFuY2VvZiBSZXBsYWNlQXJvdW5kU3RlcCkpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBjb25zdCBtYXAgPSB0ci5tYXBwaW5nLm1hcHNbbGFzdF07XHJcbiAgICBsZXQgZW5kID0gMDtcclxuICAgIG1hcC5mb3JFYWNoKChfZnJvbSwgX3RvLCBfbmV3RnJvbSwgbmV3VG8pID0+IHtcclxuICAgICAgICBpZiAoZW5kID09PSAwKSB7XHJcbiAgICAgICAgICAgIGVuZCA9IG5ld1RvO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgdHIuc2V0U2VsZWN0aW9uKFNlbGVjdGlvbi5uZWFyKHRyLmRvYy5yZXNvbHZlKGVuZCksIGJpYXMpKTtcclxufVxuXG5jb25zdCBpc0ZyYWdtZW50ID0gKG5vZGVPckZyYWdtZW50KSA9PiB7XHJcbiAgICByZXR1cm4gbm9kZU9yRnJhZ21lbnQudG9TdHJpbmcoKS5zdGFydHNXaXRoKCc8Jyk7XHJcbn07XHJcbmNvbnN0IGluc2VydENvbnRlbnRBdCA9IChwb3NpdGlvbiwgdmFsdWUsIG9wdGlvbnMpID0+ICh7IHRyLCBkaXNwYXRjaCwgZWRpdG9yIH0pID0+IHtcclxuICAgIGlmIChkaXNwYXRjaCkge1xyXG4gICAgICAgIG9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgIHBhcnNlT3B0aW9uczoge30sXHJcbiAgICAgICAgICAgIHVwZGF0ZVNlbGVjdGlvbjogdHJ1ZSxcclxuICAgICAgICAgICAgLi4ub3B0aW9ucyxcclxuICAgICAgICB9O1xyXG4gICAgICAgIGNvbnN0IGNvbnRlbnQgPSBjcmVhdGVOb2RlRnJvbUNvbnRlbnQodmFsdWUsIGVkaXRvci5zY2hlbWEsIHtcclxuICAgICAgICAgICAgcGFyc2VPcHRpb25zOiB7XHJcbiAgICAgICAgICAgICAgICBwcmVzZXJ2ZVdoaXRlc3BhY2U6ICdmdWxsJyxcclxuICAgICAgICAgICAgICAgIC4uLm9wdGlvbnMucGFyc2VPcHRpb25zLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8vIGRvbuKAmXQgZGlzcGF0Y2ggYW4gZW1wdHkgZnJhZ21lbnQgYmVjYXVzZSB0aGlzIGNhbiBsZWFkIHRvIHN0cmFuZ2UgZXJyb3JzXHJcbiAgICAgICAgaWYgKGNvbnRlbnQudG9TdHJpbmcoKSA9PT0gJzw+Jykge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IHsgZnJvbSwgdG8gfSA9IHR5cGVvZiBwb3NpdGlvbiA9PT0gJ251bWJlcidcclxuICAgICAgICAgICAgPyB7IGZyb206IHBvc2l0aW9uLCB0bzogcG9zaXRpb24gfVxyXG4gICAgICAgICAgICA6IHBvc2l0aW9uO1xyXG4gICAgICAgIGxldCBpc09ubHlUZXh0Q29udGVudCA9IHRydWU7XHJcbiAgICAgICAgbGV0IGlzT25seUJsb2NrQ29udGVudCA9IHRydWU7XHJcbiAgICAgICAgY29uc3Qgbm9kZXMgPSBpc0ZyYWdtZW50KGNvbnRlbnQpXHJcbiAgICAgICAgICAgID8gY29udGVudFxyXG4gICAgICAgICAgICA6IFtjb250ZW50XTtcclxuICAgICAgICBub2Rlcy5mb3JFYWNoKG5vZGUgPT4ge1xyXG4gICAgICAgICAgICAvLyBjaGVjayBpZiBhZGRlZCBub2RlIGlzIHZhbGlkXHJcbiAgICAgICAgICAgIG5vZGUuY2hlY2soKTtcclxuICAgICAgICAgICAgaXNPbmx5VGV4dENvbnRlbnQgPSBpc09ubHlUZXh0Q29udGVudFxyXG4gICAgICAgICAgICAgICAgPyBub2RlLmlzVGV4dCAmJiBub2RlLm1hcmtzLmxlbmd0aCA9PT0gMFxyXG4gICAgICAgICAgICAgICAgOiBmYWxzZTtcclxuICAgICAgICAgICAgaXNPbmx5QmxvY2tDb250ZW50ID0gaXNPbmx5QmxvY2tDb250ZW50XHJcbiAgICAgICAgICAgICAgICA/IG5vZGUuaXNCbG9ja1xyXG4gICAgICAgICAgICAgICAgOiBmYWxzZTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyBjaGVjayBpZiB3ZSBjYW4gcmVwbGFjZSB0aGUgd3JhcHBpbmcgbm9kZSBieVxyXG4gICAgICAgIC8vIHRoZSBuZXdseSBpbnNlcnRlZCBjb250ZW50XHJcbiAgICAgICAgLy8gZXhhbXBsZTpcclxuICAgICAgICAvLyByZXBsYWNlIGFuIGVtcHR5IHBhcmFncmFwaCBieSBhbiBpbnNlcnRlZCBpbWFnZVxyXG4gICAgICAgIC8vIGluc3RlYWQgb2YgaW5zZXJ0aW5nIHRoZSBpbWFnZSBiZWxvdyB0aGUgcGFyYWdyYXBoXHJcbiAgICAgICAgaWYgKGZyb20gPT09IHRvICYmIGlzT25seUJsb2NrQ29udGVudCkge1xyXG4gICAgICAgICAgICBjb25zdCB7IHBhcmVudCB9ID0gdHIuZG9jLnJlc29sdmUoZnJvbSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGlzRW1wdHlUZXh0QmxvY2sgPSBwYXJlbnQuaXNUZXh0YmxvY2tcclxuICAgICAgICAgICAgICAgICYmICFwYXJlbnQudHlwZS5zcGVjLmNvZGVcclxuICAgICAgICAgICAgICAgICYmICFwYXJlbnQuY2hpbGRDb3VudDtcclxuICAgICAgICAgICAgaWYgKGlzRW1wdHlUZXh0QmxvY2spIHtcclxuICAgICAgICAgICAgICAgIGZyb20gLT0gMTtcclxuICAgICAgICAgICAgICAgIHRvICs9IDE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gaWYgdGhlcmUgaXMgb25seSBwbGFpbiB0ZXh0IHdlIGhhdmUgdG8gdXNlIGBpbnNlcnRUZXh0YFxyXG4gICAgICAgIC8vIGJlY2F1c2UgdGhpcyB3aWxsIGtlZXAgdGhlIGN1cnJlbnQgbWFya3NcclxuICAgICAgICBpZiAoaXNPbmx5VGV4dENvbnRlbnQpIHtcclxuICAgICAgICAgICAgdHIuaW5zZXJ0VGV4dCh2YWx1ZSwgZnJvbSwgdG8pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdHIucmVwbGFjZVdpdGgoZnJvbSwgdG8sIGNvbnRlbnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBzZXQgY3Vyc29yIGF0IGVuZCBvZiBpbnNlcnRlZCBjb250ZW50XHJcbiAgICAgICAgaWYgKG9wdGlvbnMudXBkYXRlU2VsZWN0aW9uKSB7XHJcbiAgICAgICAgICAgIHNlbGVjdGlvblRvSW5zZXJ0aW9uRW5kKHRyLCB0ci5zdGVwcy5sZW5ndGggLSAxLCAtMSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbn07XG5cbmNvbnN0IGpvaW5CYWNrd2FyZCA9ICgpID0+ICh7IHN0YXRlLCBkaXNwYXRjaCB9KSA9PiB7XHJcbiAgICByZXR1cm4gam9pbkJhY2t3YXJkJDEoc3RhdGUsIGRpc3BhdGNoKTtcclxufTtcblxuY29uc3Qgam9pbkZvcndhcmQgPSAoKSA9PiAoeyBzdGF0ZSwgZGlzcGF0Y2ggfSkgPT4ge1xyXG4gICAgcmV0dXJuIGpvaW5Gb3J3YXJkJDEoc3RhdGUsIGRpc3BhdGNoKTtcclxufTtcblxuZnVuY3Rpb24gaXNNYWNPUygpIHtcclxuICAgIHJldHVybiB0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJ1xyXG4gICAgICAgID8gL01hYy8udGVzdChuYXZpZ2F0b3IucGxhdGZvcm0pXHJcbiAgICAgICAgOiBmYWxzZTtcclxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVLZXlOYW1lKG5hbWUpIHtcclxuICAgIGNvbnN0IHBhcnRzID0gbmFtZS5zcGxpdCgvLSg/ISQpLyk7XHJcbiAgICBsZXQgcmVzdWx0ID0gcGFydHNbcGFydHMubGVuZ3RoIC0gMV07XHJcbiAgICBpZiAocmVzdWx0ID09PSAnU3BhY2UnKSB7XHJcbiAgICAgICAgcmVzdWx0ID0gJyAnO1xyXG4gICAgfVxyXG4gICAgbGV0IGFsdDtcclxuICAgIGxldCBjdHJsO1xyXG4gICAgbGV0IHNoaWZ0O1xyXG4gICAgbGV0IG1ldGE7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhcnRzLmxlbmd0aCAtIDE7IGkgKz0gMSkge1xyXG4gICAgICAgIGNvbnN0IG1vZCA9IHBhcnRzW2ldO1xyXG4gICAgICAgIGlmICgvXihjbWR8bWV0YXxtKSQvaS50ZXN0KG1vZCkpIHtcclxuICAgICAgICAgICAgbWV0YSA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKC9eYShsdCk/JC9pLnRlc3QobW9kKSkge1xyXG4gICAgICAgICAgICBhbHQgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICgvXihjfGN0cmx8Y29udHJvbCkkL2kudGVzdChtb2QpKSB7XHJcbiAgICAgICAgICAgIGN0cmwgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICgvXnMoaGlmdCk/JC9pLnRlc3QobW9kKSkge1xyXG4gICAgICAgICAgICBzaGlmdCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKC9ebW9kJC9pLnRlc3QobW9kKSkge1xyXG4gICAgICAgICAgICBpZiAoaXNpT1MoKSB8fCBpc01hY09TKCkpIHtcclxuICAgICAgICAgICAgICAgIG1ldGEgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY3RybCA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5yZWNvZ25pemVkIG1vZGlmaWVyIG5hbWU6ICR7bW9kfWApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmIChhbHQpIHtcclxuICAgICAgICByZXN1bHQgPSBgQWx0LSR7cmVzdWx0fWA7XHJcbiAgICB9XHJcbiAgICBpZiAoY3RybCkge1xyXG4gICAgICAgIHJlc3VsdCA9IGBDdHJsLSR7cmVzdWx0fWA7XHJcbiAgICB9XHJcbiAgICBpZiAobWV0YSkge1xyXG4gICAgICAgIHJlc3VsdCA9IGBNZXRhLSR7cmVzdWx0fWA7XHJcbiAgICB9XHJcbiAgICBpZiAoc2hpZnQpIHtcclxuICAgICAgICByZXN1bHQgPSBgU2hpZnQtJHtyZXN1bHR9YDtcclxuICAgIH1cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuY29uc3Qga2V5Ym9hcmRTaG9ydGN1dCA9IG5hbWUgPT4gKHsgZWRpdG9yLCB2aWV3LCB0ciwgZGlzcGF0Y2gsIH0pID0+IHtcclxuICAgIGNvbnN0IGtleXMgPSBub3JtYWxpemVLZXlOYW1lKG5hbWUpLnNwbGl0KC8tKD8hJCkvKTtcclxuICAgIGNvbnN0IGtleSA9IGtleXMuZmluZChpdGVtID0+ICFbJ0FsdCcsICdDdHJsJywgJ01ldGEnLCAnU2hpZnQnXS5pbmNsdWRlcyhpdGVtKSk7XHJcbiAgICBjb25zdCBldmVudCA9IG5ldyBLZXlib2FyZEV2ZW50KCdrZXlkb3duJywge1xyXG4gICAgICAgIGtleToga2V5ID09PSAnU3BhY2UnXHJcbiAgICAgICAgICAgID8gJyAnXHJcbiAgICAgICAgICAgIDoga2V5LFxyXG4gICAgICAgIGFsdEtleToga2V5cy5pbmNsdWRlcygnQWx0JyksXHJcbiAgICAgICAgY3RybEtleToga2V5cy5pbmNsdWRlcygnQ3RybCcpLFxyXG4gICAgICAgIG1ldGFLZXk6IGtleXMuaW5jbHVkZXMoJ01ldGEnKSxcclxuICAgICAgICBzaGlmdEtleToga2V5cy5pbmNsdWRlcygnU2hpZnQnKSxcclxuICAgICAgICBidWJibGVzOiB0cnVlLFxyXG4gICAgICAgIGNhbmNlbGFibGU6IHRydWUsXHJcbiAgICB9KTtcclxuICAgIGNvbnN0IGNhcHR1cmVkVHJhbnNhY3Rpb24gPSBlZGl0b3IuY2FwdHVyZVRyYW5zYWN0aW9uKCgpID0+IHtcclxuICAgICAgICB2aWV3LnNvbWVQcm9wKCdoYW5kbGVLZXlEb3duJywgZiA9PiBmKHZpZXcsIGV2ZW50KSk7XHJcbiAgICB9KTtcclxuICAgIGNhcHR1cmVkVHJhbnNhY3Rpb24gPT09IG51bGwgfHwgY2FwdHVyZWRUcmFuc2FjdGlvbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogY2FwdHVyZWRUcmFuc2FjdGlvbi5zdGVwcy5mb3JFYWNoKHN0ZXAgPT4ge1xyXG4gICAgICAgIGNvbnN0IG5ld1N0ZXAgPSBzdGVwLm1hcCh0ci5tYXBwaW5nKTtcclxuICAgICAgICBpZiAobmV3U3RlcCAmJiBkaXNwYXRjaCkge1xyXG4gICAgICAgICAgICB0ci5tYXliZVN0ZXAobmV3U3RlcCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufTtcblxuZnVuY3Rpb24gaXNOb2RlQWN0aXZlKHN0YXRlLCB0eXBlT3JOYW1lLCBhdHRyaWJ1dGVzID0ge30pIHtcclxuICAgIGNvbnN0IHsgZnJvbSwgdG8sIGVtcHR5IH0gPSBzdGF0ZS5zZWxlY3Rpb247XHJcbiAgICBjb25zdCB0eXBlID0gdHlwZU9yTmFtZVxyXG4gICAgICAgID8gZ2V0Tm9kZVR5cGUodHlwZU9yTmFtZSwgc3RhdGUuc2NoZW1hKVxyXG4gICAgICAgIDogbnVsbDtcclxuICAgIGNvbnN0IG5vZGVSYW5nZXMgPSBbXTtcclxuICAgIHN0YXRlLmRvYy5ub2Rlc0JldHdlZW4oZnJvbSwgdG8sIChub2RlLCBwb3MpID0+IHtcclxuICAgICAgICBpZiAobm9kZS5pc1RleHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCByZWxhdGl2ZUZyb20gPSBNYXRoLm1heChmcm9tLCBwb3MpO1xyXG4gICAgICAgIGNvbnN0IHJlbGF0aXZlVG8gPSBNYXRoLm1pbih0bywgcG9zICsgbm9kZS5ub2RlU2l6ZSk7XHJcbiAgICAgICAgbm9kZVJhbmdlcy5wdXNoKHtcclxuICAgICAgICAgICAgbm9kZSxcclxuICAgICAgICAgICAgZnJvbTogcmVsYXRpdmVGcm9tLFxyXG4gICAgICAgICAgICB0bzogcmVsYXRpdmVUbyxcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgY29uc3Qgc2VsZWN0aW9uUmFuZ2UgPSB0byAtIGZyb207XHJcbiAgICBjb25zdCBtYXRjaGVkTm9kZVJhbmdlcyA9IG5vZGVSYW5nZXNcclxuICAgICAgICAuZmlsdGVyKG5vZGVSYW5nZSA9PiB7XHJcbiAgICAgICAgaWYgKCF0eXBlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHlwZS5uYW1lID09PSBub2RlUmFuZ2Uubm9kZS50eXBlLm5hbWU7XHJcbiAgICB9KVxyXG4gICAgICAgIC5maWx0ZXIobm9kZVJhbmdlID0+IG9iamVjdEluY2x1ZGVzKG5vZGVSYW5nZS5ub2RlLmF0dHJzLCBhdHRyaWJ1dGVzLCB7IHN0cmljdDogZmFsc2UgfSkpO1xyXG4gICAgaWYgKGVtcHR5KSB7XHJcbiAgICAgICAgcmV0dXJuICEhbWF0Y2hlZE5vZGVSYW5nZXMubGVuZ3RoO1xyXG4gICAgfVxyXG4gICAgY29uc3QgcmFuZ2UgPSBtYXRjaGVkTm9kZVJhbmdlc1xyXG4gICAgICAgIC5yZWR1Y2UoKHN1bSwgbm9kZVJhbmdlKSA9PiBzdW0gKyBub2RlUmFuZ2UudG8gLSBub2RlUmFuZ2UuZnJvbSwgMCk7XHJcbiAgICByZXR1cm4gcmFuZ2UgPj0gc2VsZWN0aW9uUmFuZ2U7XHJcbn1cblxuY29uc3QgbGlmdCA9ICh0eXBlT3JOYW1lLCBhdHRyaWJ1dGVzID0ge30pID0+ICh7IHN0YXRlLCBkaXNwYXRjaCB9KSA9PiB7XHJcbiAgICBjb25zdCB0eXBlID0gZ2V0Tm9kZVR5cGUodHlwZU9yTmFtZSwgc3RhdGUuc2NoZW1hKTtcclxuICAgIGNvbnN0IGlzQWN0aXZlID0gaXNOb2RlQWN0aXZlKHN0YXRlLCB0eXBlLCBhdHRyaWJ1dGVzKTtcclxuICAgIGlmICghaXNBY3RpdmUpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbGlmdCQxKHN0YXRlLCBkaXNwYXRjaCk7XHJcbn07XG5cbmNvbnN0IGxpZnRFbXB0eUJsb2NrID0gKCkgPT4gKHsgc3RhdGUsIGRpc3BhdGNoIH0pID0+IHtcclxuICAgIHJldHVybiBsaWZ0RW1wdHlCbG9jayQxKHN0YXRlLCBkaXNwYXRjaCk7XHJcbn07XG5cbmNvbnN0IGxpZnRMaXN0SXRlbSA9IHR5cGVPck5hbWUgPT4gKHsgc3RhdGUsIGRpc3BhdGNoIH0pID0+IHtcclxuICAgIGNvbnN0IHR5cGUgPSBnZXROb2RlVHlwZSh0eXBlT3JOYW1lLCBzdGF0ZS5zY2hlbWEpO1xyXG4gICAgcmV0dXJuIGxpZnRMaXN0SXRlbSQxKHR5cGUpKHN0YXRlLCBkaXNwYXRjaCk7XHJcbn07XG5cbmNvbnN0IG5ld2xpbmVJbkNvZGUgPSAoKSA9PiAoeyBzdGF0ZSwgZGlzcGF0Y2ggfSkgPT4ge1xyXG4gICAgcmV0dXJuIG5ld2xpbmVJbkNvZGUkMShzdGF0ZSwgZGlzcGF0Y2gpO1xyXG59O1xuXG5mdW5jdGlvbiBnZXRTY2hlbWFUeXBlTmFtZUJ5TmFtZShuYW1lLCBzY2hlbWEpIHtcclxuICAgIGlmIChzY2hlbWEubm9kZXNbbmFtZV0pIHtcclxuICAgICAgICByZXR1cm4gJ25vZGUnO1xyXG4gICAgfVxyXG4gICAgaWYgKHNjaGVtYS5tYXJrc1tuYW1lXSkge1xyXG4gICAgICAgIHJldHVybiAnbWFyayc7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxufVxuXG4vKipcclxuICogUmVtb3ZlIGEgcHJvcGVydHkgb3IgYW4gYXJyYXkgb2YgcHJvcGVydGllcyBmcm9tIGFuIG9iamVjdFxyXG4gKiBAcGFyYW0gb2JqIE9iamVjdFxyXG4gKiBAcGFyYW0ga2V5IEtleSB0byByZW1vdmVcclxuICovXHJcbmZ1bmN0aW9uIGRlbGV0ZVByb3BzKG9iaiwgcHJvcE9yUHJvcHMpIHtcclxuICAgIGNvbnN0IHByb3BzID0gdHlwZW9mIHByb3BPclByb3BzID09PSAnc3RyaW5nJ1xyXG4gICAgICAgID8gW3Byb3BPclByb3BzXVxyXG4gICAgICAgIDogcHJvcE9yUHJvcHM7XHJcbiAgICByZXR1cm4gT2JqZWN0XHJcbiAgICAgICAgLmtleXMob2JqKVxyXG4gICAgICAgIC5yZWR1Y2UoKG5ld09iaiwgcHJvcCkgPT4ge1xyXG4gICAgICAgIGlmICghcHJvcHMuaW5jbHVkZXMocHJvcCkpIHtcclxuICAgICAgICAgICAgbmV3T2JqW3Byb3BdID0gb2JqW3Byb3BdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV3T2JqO1xyXG4gICAgfSwge30pO1xyXG59XG5cbmNvbnN0IHJlc2V0QXR0cmlidXRlcyA9ICh0eXBlT3JOYW1lLCBhdHRyaWJ1dGVzKSA9PiAoeyB0ciwgc3RhdGUsIGRpc3BhdGNoIH0pID0+IHtcclxuICAgIGxldCBub2RlVHlwZSA9IG51bGw7XHJcbiAgICBsZXQgbWFya1R5cGUgPSBudWxsO1xyXG4gICAgY29uc3Qgc2NoZW1hVHlwZSA9IGdldFNjaGVtYVR5cGVOYW1lQnlOYW1lKHR5cGVvZiB0eXBlT3JOYW1lID09PSAnc3RyaW5nJ1xyXG4gICAgICAgID8gdHlwZU9yTmFtZVxyXG4gICAgICAgIDogdHlwZU9yTmFtZS5uYW1lLCBzdGF0ZS5zY2hlbWEpO1xyXG4gICAgaWYgKCFzY2hlbWFUeXBlKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgaWYgKHNjaGVtYVR5cGUgPT09ICdub2RlJykge1xyXG4gICAgICAgIG5vZGVUeXBlID0gZ2V0Tm9kZVR5cGUodHlwZU9yTmFtZSwgc3RhdGUuc2NoZW1hKTtcclxuICAgIH1cclxuICAgIGlmIChzY2hlbWFUeXBlID09PSAnbWFyaycpIHtcclxuICAgICAgICBtYXJrVHlwZSA9IGdldE1hcmtUeXBlKHR5cGVPck5hbWUsIHN0YXRlLnNjaGVtYSk7XHJcbiAgICB9XHJcbiAgICBpZiAoZGlzcGF0Y2gpIHtcclxuICAgICAgICB0ci5zZWxlY3Rpb24ucmFuZ2VzLmZvckVhY2gocmFuZ2UgPT4ge1xyXG4gICAgICAgICAgICBzdGF0ZS5kb2Mubm9kZXNCZXR3ZWVuKHJhbmdlLiRmcm9tLnBvcywgcmFuZ2UuJHRvLnBvcywgKG5vZGUsIHBvcykgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKG5vZGVUeXBlICYmIG5vZGVUeXBlID09PSBub2RlLnR5cGUpIHtcclxuICAgICAgICAgICAgICAgICAgICB0ci5zZXROb2RlTWFya3VwKHBvcywgdW5kZWZpbmVkLCBkZWxldGVQcm9wcyhub2RlLmF0dHJzLCBhdHRyaWJ1dGVzKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAobWFya1R5cGUgJiYgbm9kZS5tYXJrcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBub2RlLm1hcmtzLmZvckVhY2gobWFyayA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXJrVHlwZSA9PT0gbWFyay50eXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ci5hZGRNYXJrKHBvcywgcG9zICsgbm9kZS5ub2RlU2l6ZSwgbWFya1R5cGUuY3JlYXRlKGRlbGV0ZVByb3BzKG1hcmsuYXR0cnMsIGF0dHJpYnV0ZXMpKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufTtcblxuY29uc3Qgc2Nyb2xsSW50b1ZpZXcgPSAoKSA9PiAoeyB0ciwgZGlzcGF0Y2ggfSkgPT4ge1xyXG4gICAgaWYgKGRpc3BhdGNoKSB7XHJcbiAgICAgICAgdHIuc2Nyb2xsSW50b1ZpZXcoKTtcclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG59O1xuXG5jb25zdCBzZWxlY3RBbGwgPSAoKSA9PiAoeyB0ciwgY29tbWFuZHMgfSkgPT4ge1xyXG4gICAgcmV0dXJuIGNvbW1hbmRzLnNldFRleHRTZWxlY3Rpb24oe1xyXG4gICAgICAgIGZyb206IDAsXHJcbiAgICAgICAgdG86IHRyLmRvYy5jb250ZW50LnNpemUsXHJcbiAgICB9KTtcclxufTtcblxuY29uc3Qgc2VsZWN0Tm9kZUJhY2t3YXJkID0gKCkgPT4gKHsgc3RhdGUsIGRpc3BhdGNoIH0pID0+IHtcclxuICAgIHJldHVybiBzZWxlY3ROb2RlQmFja3dhcmQkMShzdGF0ZSwgZGlzcGF0Y2gpO1xyXG59O1xuXG5jb25zdCBzZWxlY3ROb2RlRm9yd2FyZCA9ICgpID0+ICh7IHN0YXRlLCBkaXNwYXRjaCB9KSA9PiB7XHJcbiAgICByZXR1cm4gc2VsZWN0Tm9kZUZvcndhcmQkMShzdGF0ZSwgZGlzcGF0Y2gpO1xyXG59O1xuXG5jb25zdCBzZWxlY3RQYXJlbnROb2RlID0gKCkgPT4gKHsgc3RhdGUsIGRpc3BhdGNoIH0pID0+IHtcclxuICAgIHJldHVybiBzZWxlY3RQYXJlbnROb2RlJDEoc3RhdGUsIGRpc3BhdGNoKTtcclxufTtcblxuLy8gQHRzLWlnbm9yZVxyXG5jb25zdCBzZWxlY3RUZXh0YmxvY2tFbmQgPSAoKSA9PiAoeyBzdGF0ZSwgZGlzcGF0Y2ggfSkgPT4ge1xyXG4gICAgcmV0dXJuIHNlbGVjdFRleHRibG9ja0VuZCQxKHN0YXRlLCBkaXNwYXRjaCk7XHJcbn07XG5cbi8vIEB0cy1pZ25vcmVcclxuY29uc3Qgc2VsZWN0VGV4dGJsb2NrU3RhcnQgPSAoKSA9PiAoeyBzdGF0ZSwgZGlzcGF0Y2ggfSkgPT4ge1xyXG4gICAgcmV0dXJuIHNlbGVjdFRleHRibG9ja1N0YXJ0JDEoc3RhdGUsIGRpc3BhdGNoKTtcclxufTtcblxuZnVuY3Rpb24gY3JlYXRlRG9jdW1lbnQoY29udGVudCwgc2NoZW1hLCBwYXJzZU9wdGlvbnMgPSB7fSkge1xyXG4gICAgcmV0dXJuIGNyZWF0ZU5vZGVGcm9tQ29udGVudChjb250ZW50LCBzY2hlbWEsIHsgc2xpY2U6IGZhbHNlLCBwYXJzZU9wdGlvbnMgfSk7XHJcbn1cblxuY29uc3Qgc2V0Q29udGVudCA9IChjb250ZW50LCBlbWl0VXBkYXRlID0gZmFsc2UsIHBhcnNlT3B0aW9ucyA9IHt9KSA9PiAoeyB0ciwgZWRpdG9yLCBkaXNwYXRjaCB9KSA9PiB7XHJcbiAgICBjb25zdCB7IGRvYyB9ID0gdHI7XHJcbiAgICBjb25zdCBkb2N1bWVudCA9IGNyZWF0ZURvY3VtZW50KGNvbnRlbnQsIGVkaXRvci5zY2hlbWEsIHBhcnNlT3B0aW9ucyk7XHJcbiAgICBpZiAoZGlzcGF0Y2gpIHtcclxuICAgICAgICB0ci5yZXBsYWNlV2l0aCgwLCBkb2MuY29udGVudC5zaXplLCBkb2N1bWVudClcclxuICAgICAgICAgICAgLnNldE1ldGEoJ3ByZXZlbnRVcGRhdGUnLCAhZW1pdFVwZGF0ZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufTtcblxuZnVuY3Rpb24gZ2V0TWFya0F0dHJpYnV0ZXMoc3RhdGUsIHR5cGVPck5hbWUpIHtcclxuICAgIGNvbnN0IHR5cGUgPSBnZXRNYXJrVHlwZSh0eXBlT3JOYW1lLCBzdGF0ZS5zY2hlbWEpO1xyXG4gICAgY29uc3QgeyBmcm9tLCB0bywgZW1wdHkgfSA9IHN0YXRlLnNlbGVjdGlvbjtcclxuICAgIGNvbnN0IG1hcmtzID0gW107XHJcbiAgICBpZiAoZW1wdHkpIHtcclxuICAgICAgICBpZiAoc3RhdGUuc3RvcmVkTWFya3MpIHtcclxuICAgICAgICAgICAgbWFya3MucHVzaCguLi5zdGF0ZS5zdG9yZWRNYXJrcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG1hcmtzLnB1c2goLi4uc3RhdGUuc2VsZWN0aW9uLiRoZWFkLm1hcmtzKCkpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgc3RhdGUuZG9jLm5vZGVzQmV0d2Vlbihmcm9tLCB0bywgbm9kZSA9PiB7XHJcbiAgICAgICAgICAgIG1hcmtzLnB1c2goLi4ubm9kZS5tYXJrcyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBtYXJrID0gbWFya3MuZmluZChtYXJrSXRlbSA9PiBtYXJrSXRlbS50eXBlLm5hbWUgPT09IHR5cGUubmFtZSk7XHJcbiAgICBpZiAoIW1hcmspIHtcclxuICAgICAgICByZXR1cm4ge307XHJcbiAgICB9XHJcbiAgICByZXR1cm4geyAuLi5tYXJrLmF0dHJzIH07XHJcbn1cblxuY29uc3Qgc2V0TWFyayA9ICh0eXBlT3JOYW1lLCBhdHRyaWJ1dGVzID0ge30pID0+ICh7IHRyLCBzdGF0ZSwgZGlzcGF0Y2ggfSkgPT4ge1xyXG4gICAgY29uc3QgeyBzZWxlY3Rpb24gfSA9IHRyO1xyXG4gICAgY29uc3QgeyBlbXB0eSwgcmFuZ2VzIH0gPSBzZWxlY3Rpb247XHJcbiAgICBjb25zdCB0eXBlID0gZ2V0TWFya1R5cGUodHlwZU9yTmFtZSwgc3RhdGUuc2NoZW1hKTtcclxuICAgIGlmIChkaXNwYXRjaCkge1xyXG4gICAgICAgIGlmIChlbXB0eSkge1xyXG4gICAgICAgICAgICBjb25zdCBvbGRBdHRyaWJ1dGVzID0gZ2V0TWFya0F0dHJpYnV0ZXMoc3RhdGUsIHR5cGUpO1xyXG4gICAgICAgICAgICB0ci5hZGRTdG9yZWRNYXJrKHR5cGUuY3JlYXRlKHtcclxuICAgICAgICAgICAgICAgIC4uLm9sZEF0dHJpYnV0ZXMsXHJcbiAgICAgICAgICAgICAgICAuLi5hdHRyaWJ1dGVzLFxyXG4gICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByYW5nZXMuZm9yRWFjaChyYW5nZSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBmcm9tID0gcmFuZ2UuJGZyb20ucG9zO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdG8gPSByYW5nZS4kdG8ucG9zO1xyXG4gICAgICAgICAgICAgICAgc3RhdGUuZG9jLm5vZGVzQmV0d2Vlbihmcm9tLCB0bywgKG5vZGUsIHBvcykgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRyaW1tZWRGcm9tID0gTWF0aC5tYXgocG9zLCBmcm9tKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0cmltbWVkVG8gPSBNYXRoLm1pbihwb3MgKyBub2RlLm5vZGVTaXplLCB0byk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc29tZUhhc01hcmsgPSBub2RlLm1hcmtzLmZpbmQobWFyayA9PiBtYXJrLnR5cGUgPT09IHR5cGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZXJlIGlzIGFscmVhZHkgYSBtYXJrIG9mIHRoaXMgdHlwZVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHdlIGtub3cgdGhhdCB3ZSBoYXZlIHRvIG1lcmdlIGl0cyBhdHRyaWJ1dGVzXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gb3RoZXJ3aXNlIHdlIGFkZCBhIGZyZXNoIG5ldyBtYXJrXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNvbWVIYXNNYXJrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUubWFya3MuZm9yRWFjaChtYXJrID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSBtYXJrLnR5cGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ci5hZGRNYXJrKHRyaW1tZWRGcm9tLCB0cmltbWVkVG8sIHR5cGUuY3JlYXRlKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4ubWFyay5hdHRycyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uYXR0cmlidXRlcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHIuYWRkTWFyayh0cmltbWVkRnJvbSwgdHJpbW1lZFRvLCB0eXBlLmNyZWF0ZShhdHRyaWJ1dGVzKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG59O1xuXG5jb25zdCBzZXRNZXRhID0gKGtleSwgdmFsdWUpID0+ICh7IHRyIH0pID0+IHtcclxuICAgIHRyLnNldE1ldGEoa2V5LCB2YWx1ZSk7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufTtcblxuY29uc3Qgc2V0Tm9kZSA9ICh0eXBlT3JOYW1lLCBhdHRyaWJ1dGVzID0ge30pID0+ICh7IHN0YXRlLCBkaXNwYXRjaCwgY2hhaW4gfSkgPT4ge1xyXG4gICAgY29uc3QgdHlwZSA9IGdldE5vZGVUeXBlKHR5cGVPck5hbWUsIHN0YXRlLnNjaGVtYSk7XHJcbiAgICAvLyBUT0RPOiB1c2UgYSBmYWxsYmFjayBsaWtlIGluc2VydENvbnRlbnQ/XHJcbiAgICBpZiAoIXR5cGUuaXNUZXh0YmxvY2spIHtcclxuICAgICAgICBjb25zb2xlLndhcm4oJ1t0aXB0YXAgd2Fybl06IEN1cnJlbnRseSBcInNldE5vZGUoKVwiIG9ubHkgc3VwcG9ydHMgdGV4dCBibG9jayBub2Rlcy4nKTtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY2hhaW4oKVxyXG4gICAgICAgIC8vIHRyeSB0byBjb252ZXJ0IG5vZGUgdG8gZGVmYXVsdCBub2RlIGlmIG5lZWRlZFxyXG4gICAgICAgIC5jb21tYW5kKCh7IGNvbW1hbmRzIH0pID0+IHtcclxuICAgICAgICBjb25zdCBjYW5TZXRCbG9jayA9IHNldEJsb2NrVHlwZSh0eXBlLCBhdHRyaWJ1dGVzKShzdGF0ZSk7XHJcbiAgICAgICAgaWYgKGNhblNldEJsb2NrKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY29tbWFuZHMuY2xlYXJOb2RlcygpO1xyXG4gICAgfSlcclxuICAgICAgICAuY29tbWFuZCgoeyBzdGF0ZTogdXBkYXRlZFN0YXRlIH0pID0+IHtcclxuICAgICAgICByZXR1cm4gc2V0QmxvY2tUeXBlKHR5cGUsIGF0dHJpYnV0ZXMpKHVwZGF0ZWRTdGF0ZSwgZGlzcGF0Y2gpO1xyXG4gICAgfSlcclxuICAgICAgICAucnVuKCk7XHJcbn07XG5cbmNvbnN0IHNldE5vZGVTZWxlY3Rpb24gPSBwb3NpdGlvbiA9PiAoeyB0ciwgZGlzcGF0Y2ggfSkgPT4ge1xyXG4gICAgaWYgKGRpc3BhdGNoKSB7XHJcbiAgICAgICAgY29uc3QgeyBkb2MgfSA9IHRyO1xyXG4gICAgICAgIGNvbnN0IG1pblBvcyA9IFNlbGVjdGlvbi5hdFN0YXJ0KGRvYykuZnJvbTtcclxuICAgICAgICBjb25zdCBtYXhQb3MgPSBTZWxlY3Rpb24uYXRFbmQoZG9jKS50bztcclxuICAgICAgICBjb25zdCByZXNvbHZlZFBvcyA9IG1pbk1heChwb3NpdGlvbiwgbWluUG9zLCBtYXhQb3MpO1xyXG4gICAgICAgIGNvbnN0IHNlbGVjdGlvbiA9IE5vZGVTZWxlY3Rpb24uY3JlYXRlKGRvYywgcmVzb2x2ZWRQb3MpO1xyXG4gICAgICAgIHRyLnNldFNlbGVjdGlvbihzZWxlY3Rpb24pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbn07XG5cbmNvbnN0IHNldFRleHRTZWxlY3Rpb24gPSBwb3NpdGlvbiA9PiAoeyB0ciwgZGlzcGF0Y2ggfSkgPT4ge1xyXG4gICAgaWYgKGRpc3BhdGNoKSB7XHJcbiAgICAgICAgY29uc3QgeyBkb2MgfSA9IHRyO1xyXG4gICAgICAgIGNvbnN0IHsgZnJvbSwgdG8gfSA9IHR5cGVvZiBwb3NpdGlvbiA9PT0gJ251bWJlcidcclxuICAgICAgICAgICAgPyB7IGZyb206IHBvc2l0aW9uLCB0bzogcG9zaXRpb24gfVxyXG4gICAgICAgICAgICA6IHBvc2l0aW9uO1xyXG4gICAgICAgIGNvbnN0IG1pblBvcyA9IFRleHRTZWxlY3Rpb24uYXRTdGFydChkb2MpLmZyb207XHJcbiAgICAgICAgY29uc3QgbWF4UG9zID0gVGV4dFNlbGVjdGlvbi5hdEVuZChkb2MpLnRvO1xyXG4gICAgICAgIGNvbnN0IHJlc29sdmVkRnJvbSA9IG1pbk1heChmcm9tLCBtaW5Qb3MsIG1heFBvcyk7XHJcbiAgICAgICAgY29uc3QgcmVzb2x2ZWRFbmQgPSBtaW5NYXgodG8sIG1pblBvcywgbWF4UG9zKTtcclxuICAgICAgICBjb25zdCBzZWxlY3Rpb24gPSBUZXh0U2VsZWN0aW9uLmNyZWF0ZShkb2MsIHJlc29sdmVkRnJvbSwgcmVzb2x2ZWRFbmQpO1xyXG4gICAgICAgIHRyLnNldFNlbGVjdGlvbihzZWxlY3Rpb24pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbn07XG5cbmNvbnN0IHNpbmtMaXN0SXRlbSA9IHR5cGVPck5hbWUgPT4gKHsgc3RhdGUsIGRpc3BhdGNoIH0pID0+IHtcclxuICAgIGNvbnN0IHR5cGUgPSBnZXROb2RlVHlwZSh0eXBlT3JOYW1lLCBzdGF0ZS5zY2hlbWEpO1xyXG4gICAgcmV0dXJuIHNpbmtMaXN0SXRlbSQxKHR5cGUpKHN0YXRlLCBkaXNwYXRjaCk7XHJcbn07XG5cbmZ1bmN0aW9uIGdldFNwbGl0dGVkQXR0cmlidXRlcyhleHRlbnNpb25BdHRyaWJ1dGVzLCB0eXBlTmFtZSwgYXR0cmlidXRlcykge1xyXG4gICAgcmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhPYmplY3RcclxuICAgICAgICAuZW50cmllcyhhdHRyaWJ1dGVzKVxyXG4gICAgICAgIC5maWx0ZXIoKFtuYW1lXSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGV4dGVuc2lvbkF0dHJpYnV0ZSA9IGV4dGVuc2lvbkF0dHJpYnV0ZXMuZmluZChpdGVtID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIGl0ZW0udHlwZSA9PT0gdHlwZU5hbWUgJiYgaXRlbS5uYW1lID09PSBuYW1lO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmICghZXh0ZW5zaW9uQXR0cmlidXRlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGV4dGVuc2lvbkF0dHJpYnV0ZS5hdHRyaWJ1dGUua2VlcE9uU3BsaXQ7XHJcbiAgICB9KSk7XHJcbn1cblxuZnVuY3Rpb24gZGVmYXVsdEJsb2NrQXQkMShtYXRjaCkge1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtYXRjaC5lZGdlQ291bnQ7IGkgKz0gMSkge1xyXG4gICAgICAgIGNvbnN0IHsgdHlwZSB9ID0gbWF0Y2guZWRnZShpKTtcclxuICAgICAgICBpZiAodHlwZS5pc1RleHRibG9jayAmJiAhdHlwZS5oYXNSZXF1aXJlZEF0dHJzKCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHR5cGU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbn1cclxuZnVuY3Rpb24gZW5zdXJlTWFya3Moc3RhdGUsIHNwbGl0dGFibGVNYXJrcykge1xyXG4gICAgY29uc3QgbWFya3MgPSBzdGF0ZS5zdG9yZWRNYXJrc1xyXG4gICAgICAgIHx8IChzdGF0ZS5zZWxlY3Rpb24uJHRvLnBhcmVudE9mZnNldCAmJiBzdGF0ZS5zZWxlY3Rpb24uJGZyb20ubWFya3MoKSk7XHJcbiAgICBpZiAobWFya3MpIHtcclxuICAgICAgICBjb25zdCBmaWx0ZXJlZE1hcmtzID0gbWFya3MuZmlsdGVyKG1hcmsgPT4gc3BsaXR0YWJsZU1hcmtzID09PSBudWxsIHx8IHNwbGl0dGFibGVNYXJrcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogc3BsaXR0YWJsZU1hcmtzLmluY2x1ZGVzKG1hcmsudHlwZS5uYW1lKSk7XHJcbiAgICAgICAgc3RhdGUudHIuZW5zdXJlTWFya3MoZmlsdGVyZWRNYXJrcyk7XHJcbiAgICB9XHJcbn1cclxuY29uc3Qgc3BsaXRCbG9jayA9ICh7IGtlZXBNYXJrcyA9IHRydWUgfSA9IHt9KSA9PiAoeyB0ciwgc3RhdGUsIGRpc3BhdGNoLCBlZGl0b3IsIH0pID0+IHtcclxuICAgIGNvbnN0IHsgc2VsZWN0aW9uLCBkb2MgfSA9IHRyO1xyXG4gICAgY29uc3QgeyAkZnJvbSwgJHRvIH0gPSBzZWxlY3Rpb247XHJcbiAgICBjb25zdCBleHRlbnNpb25BdHRyaWJ1dGVzID0gZWRpdG9yLmV4dGVuc2lvbk1hbmFnZXIuYXR0cmlidXRlcztcclxuICAgIGNvbnN0IG5ld0F0dHJpYnV0ZXMgPSBnZXRTcGxpdHRlZEF0dHJpYnV0ZXMoZXh0ZW5zaW9uQXR0cmlidXRlcywgJGZyb20ubm9kZSgpLnR5cGUubmFtZSwgJGZyb20ubm9kZSgpLmF0dHJzKTtcclxuICAgIGlmIChzZWxlY3Rpb24gaW5zdGFuY2VvZiBOb2RlU2VsZWN0aW9uICYmIHNlbGVjdGlvbi5ub2RlLmlzQmxvY2spIHtcclxuICAgICAgICBpZiAoISRmcm9tLnBhcmVudE9mZnNldCB8fCAhY2FuU3BsaXQoZG9jLCAkZnJvbS5wb3MpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGRpc3BhdGNoKSB7XHJcbiAgICAgICAgICAgIGlmIChrZWVwTWFya3MpIHtcclxuICAgICAgICAgICAgICAgIGVuc3VyZU1hcmtzKHN0YXRlLCBlZGl0b3IuZXh0ZW5zaW9uTWFuYWdlci5zcGxpdHRhYmxlTWFya3MpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRyLnNwbGl0KCRmcm9tLnBvcykuc2Nyb2xsSW50b1ZpZXcoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICBpZiAoISRmcm9tLnBhcmVudC5pc0Jsb2NrKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgaWYgKGRpc3BhdGNoKSB7XHJcbiAgICAgICAgY29uc3QgYXRFbmQgPSAkdG8ucGFyZW50T2Zmc2V0ID09PSAkdG8ucGFyZW50LmNvbnRlbnQuc2l6ZTtcclxuICAgICAgICBpZiAoc2VsZWN0aW9uIGluc3RhbmNlb2YgVGV4dFNlbGVjdGlvbikge1xyXG4gICAgICAgICAgICB0ci5kZWxldGVTZWxlY3Rpb24oKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgZGVmbHQgPSAkZnJvbS5kZXB0aCA9PT0gMFxyXG4gICAgICAgICAgICA/IHVuZGVmaW5lZFxyXG4gICAgICAgICAgICA6IGRlZmF1bHRCbG9ja0F0JDEoJGZyb20ubm9kZSgtMSkuY29udGVudE1hdGNoQXQoJGZyb20uaW5kZXhBZnRlcigtMSkpKTtcclxuICAgICAgICBsZXQgdHlwZXMgPSBhdEVuZCAmJiBkZWZsdFxyXG4gICAgICAgICAgICA/IFt7XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogZGVmbHQsXHJcbiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IG5ld0F0dHJpYnV0ZXMsXHJcbiAgICAgICAgICAgICAgICB9XVxyXG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcclxuICAgICAgICBsZXQgY2FuID0gY2FuU3BsaXQodHIuZG9jLCB0ci5tYXBwaW5nLm1hcCgkZnJvbS5wb3MpLCAxLCB0eXBlcyk7XHJcbiAgICAgICAgaWYgKCF0eXBlc1xyXG4gICAgICAgICAgICAmJiAhY2FuXHJcbiAgICAgICAgICAgICYmIGNhblNwbGl0KHRyLmRvYywgdHIubWFwcGluZy5tYXAoJGZyb20ucG9zKSwgMSwgZGVmbHQgPyBbeyB0eXBlOiBkZWZsdCB9XSA6IHVuZGVmaW5lZCkpIHtcclxuICAgICAgICAgICAgY2FuID0gdHJ1ZTtcclxuICAgICAgICAgICAgdHlwZXMgPSBkZWZsdFxyXG4gICAgICAgICAgICAgICAgPyBbe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBkZWZsdCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IG5ld0F0dHJpYnV0ZXMsXHJcbiAgICAgICAgICAgICAgICAgICAgfV1cclxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY2FuKSB7XHJcbiAgICAgICAgICAgIHRyLnNwbGl0KHRyLm1hcHBpbmcubWFwKCRmcm9tLnBvcyksIDEsIHR5cGVzKTtcclxuICAgICAgICAgICAgaWYgKGRlZmx0XHJcbiAgICAgICAgICAgICAgICAmJiAhYXRFbmRcclxuICAgICAgICAgICAgICAgICYmICEkZnJvbS5wYXJlbnRPZmZzZXRcclxuICAgICAgICAgICAgICAgICYmICRmcm9tLnBhcmVudC50eXBlICE9PSBkZWZsdCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZmlyc3QgPSB0ci5tYXBwaW5nLm1hcCgkZnJvbS5iZWZvcmUoKSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCAkZmlyc3QgPSB0ci5kb2MucmVzb2x2ZShmaXJzdCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoJGZyb20ubm9kZSgtMSkuY2FuUmVwbGFjZVdpdGgoJGZpcnN0LmluZGV4KCksICRmaXJzdC5pbmRleCgpICsgMSwgZGVmbHQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHIuc2V0Tm9kZU1hcmt1cCh0ci5tYXBwaW5nLm1hcCgkZnJvbS5iZWZvcmUoKSksIGRlZmx0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoa2VlcE1hcmtzKSB7XHJcbiAgICAgICAgICAgIGVuc3VyZU1hcmtzKHN0YXRlLCBlZGl0b3IuZXh0ZW5zaW9uTWFuYWdlci5zcGxpdHRhYmxlTWFya3MpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0ci5zY3JvbGxJbnRvVmlldygpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbn07XG5cbmNvbnN0IHNwbGl0TGlzdEl0ZW0gPSB0eXBlT3JOYW1lID0+ICh7IHRyLCBzdGF0ZSwgZGlzcGF0Y2gsIGVkaXRvciwgfSkgPT4ge1xyXG4gICAgdmFyIF9hO1xyXG4gICAgY29uc3QgdHlwZSA9IGdldE5vZGVUeXBlKHR5cGVPck5hbWUsIHN0YXRlLnNjaGVtYSk7XHJcbiAgICBjb25zdCB7ICRmcm9tLCAkdG8gfSA9IHN0YXRlLnNlbGVjdGlvbjtcclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxyXG4gICAgY29uc3Qgbm9kZSA9IHN0YXRlLnNlbGVjdGlvbi5ub2RlO1xyXG4gICAgaWYgKChub2RlICYmIG5vZGUuaXNCbG9jaykgfHwgJGZyb20uZGVwdGggPCAyIHx8ICEkZnJvbS5zYW1lUGFyZW50KCR0bykpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBjb25zdCBncmFuZFBhcmVudCA9ICRmcm9tLm5vZGUoLTEpO1xyXG4gICAgaWYgKGdyYW5kUGFyZW50LnR5cGUgIT09IHR5cGUpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBjb25zdCBleHRlbnNpb25BdHRyaWJ1dGVzID0gZWRpdG9yLmV4dGVuc2lvbk1hbmFnZXIuYXR0cmlidXRlcztcclxuICAgIGlmICgkZnJvbS5wYXJlbnQuY29udGVudC5zaXplID09PSAwICYmICRmcm9tLm5vZGUoLTEpLmNoaWxkQ291bnQgPT09ICRmcm9tLmluZGV4QWZ0ZXIoLTEpKSB7XHJcbiAgICAgICAgLy8gSW4gYW4gZW1wdHkgYmxvY2suIElmIHRoaXMgaXMgYSBuZXN0ZWQgbGlzdCwgdGhlIHdyYXBwaW5nXHJcbiAgICAgICAgLy8gbGlzdCBpdGVtIHNob3VsZCBiZSBzcGxpdC4gT3RoZXJ3aXNlLCBiYWlsIG91dCBhbmQgbGV0IG5leHRcclxuICAgICAgICAvLyBjb21tYW5kIGhhbmRsZSBsaWZ0aW5nLlxyXG4gICAgICAgIGlmICgkZnJvbS5kZXB0aCA9PT0gMlxyXG4gICAgICAgICAgICB8fCAkZnJvbS5ub2RlKC0zKS50eXBlICE9PSB0eXBlXHJcbiAgICAgICAgICAgIHx8ICRmcm9tLmluZGV4KC0yKSAhPT0gJGZyb20ubm9kZSgtMikuY2hpbGRDb3VudCAtIDEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZGlzcGF0Y2gpIHtcclxuICAgICAgICAgICAgbGV0IHdyYXAgPSBGcmFnbWVudC5lbXB0eTtcclxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXHJcbiAgICAgICAgICAgIGNvbnN0IGRlcHRoQmVmb3JlID0gJGZyb20uaW5kZXgoLTEpXHJcbiAgICAgICAgICAgICAgICA/IDFcclxuICAgICAgICAgICAgICAgIDogJGZyb20uaW5kZXgoLTIpXHJcbiAgICAgICAgICAgICAgICAgICAgPyAyXHJcbiAgICAgICAgICAgICAgICAgICAgOiAzO1xyXG4gICAgICAgICAgICAvLyBCdWlsZCBhIGZyYWdtZW50IGNvbnRhaW5pbmcgZW1wdHkgdmVyc2lvbnMgb2YgdGhlIHN0cnVjdHVyZVxyXG4gICAgICAgICAgICAvLyBmcm9tIHRoZSBvdXRlciBsaXN0IGl0ZW0gdG8gdGhlIHBhcmVudCBub2RlIG9mIHRoZSBjdXJzb3JcclxuICAgICAgICAgICAgZm9yIChsZXQgZCA9ICRmcm9tLmRlcHRoIC0gZGVwdGhCZWZvcmU7IGQgPj0gJGZyb20uZGVwdGggLSAzOyBkIC09IDEpIHtcclxuICAgICAgICAgICAgICAgIHdyYXAgPSBGcmFnbWVudC5mcm9tKCRmcm9tLm5vZGUoZCkuY29weSh3cmFwKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXHJcbiAgICAgICAgICAgIGNvbnN0IGRlcHRoQWZ0ZXIgPSAkZnJvbS5pbmRleEFmdGVyKC0xKSA8ICRmcm9tLm5vZGUoLTIpLmNoaWxkQ291bnRcclxuICAgICAgICAgICAgICAgID8gMVxyXG4gICAgICAgICAgICAgICAgOiAkZnJvbS5pbmRleEFmdGVyKC0yKSA8ICRmcm9tLm5vZGUoLTMpLmNoaWxkQ291bnRcclxuICAgICAgICAgICAgICAgICAgICA/IDJcclxuICAgICAgICAgICAgICAgICAgICA6IDM7XHJcbiAgICAgICAgICAgIC8vIEFkZCBhIHNlY29uZCBsaXN0IGl0ZW0gd2l0aCBhbiBlbXB0eSBkZWZhdWx0IHN0YXJ0IG5vZGVcclxuICAgICAgICAgICAgY29uc3QgbmV3TmV4dFR5cGVBdHRyaWJ1dGVzID0gZ2V0U3BsaXR0ZWRBdHRyaWJ1dGVzKGV4dGVuc2lvbkF0dHJpYnV0ZXMsICRmcm9tLm5vZGUoKS50eXBlLm5hbWUsICRmcm9tLm5vZGUoKS5hdHRycyk7XHJcbiAgICAgICAgICAgIGNvbnN0IG5leHRUeXBlID0gKChfYSA9IHR5cGUuY29udGVudE1hdGNoLmRlZmF1bHRUeXBlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY3JlYXRlQW5kRmlsbChuZXdOZXh0VHlwZUF0dHJpYnV0ZXMpKSB8fCB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIHdyYXAgPSB3cmFwLmFwcGVuZChGcmFnbWVudC5mcm9tKHR5cGUuY3JlYXRlQW5kRmlsbChudWxsLCBuZXh0VHlwZSkgfHwgdW5kZWZpbmVkKSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0ID0gJGZyb20uYmVmb3JlKCRmcm9tLmRlcHRoIC0gKGRlcHRoQmVmb3JlIC0gMSkpO1xyXG4gICAgICAgICAgICB0ci5yZXBsYWNlKHN0YXJ0LCAkZnJvbS5hZnRlcigtZGVwdGhBZnRlciksIG5ldyBTbGljZSh3cmFwLCA0IC0gZGVwdGhCZWZvcmUsIDApKTtcclxuICAgICAgICAgICAgbGV0IHNlbCA9IC0xO1xyXG4gICAgICAgICAgICB0ci5kb2Mubm9kZXNCZXR3ZWVuKHN0YXJ0LCB0ci5kb2MuY29udGVudC5zaXplLCAobiwgcG9zKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2VsID4gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAobi5pc1RleHRibG9jayAmJiBuLmNvbnRlbnQuc2l6ZSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbCA9IHBvcyArIDE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBpZiAoc2VsID4gLTEpIHtcclxuICAgICAgICAgICAgICAgIHRyLnNldFNlbGVjdGlvbihUZXh0U2VsZWN0aW9uLm5lYXIodHIuZG9jLnJlc29sdmUoc2VsKSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRyLnNjcm9sbEludG9WaWV3KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgY29uc3QgbmV4dFR5cGUgPSAkdG8ucG9zID09PSAkZnJvbS5lbmQoKVxyXG4gICAgICAgID8gZ3JhbmRQYXJlbnQuY29udGVudE1hdGNoQXQoMCkuZGVmYXVsdFR5cGVcclxuICAgICAgICA6IG51bGw7XHJcbiAgICBjb25zdCBuZXdUeXBlQXR0cmlidXRlcyA9IGdldFNwbGl0dGVkQXR0cmlidXRlcyhleHRlbnNpb25BdHRyaWJ1dGVzLCBncmFuZFBhcmVudC50eXBlLm5hbWUsIGdyYW5kUGFyZW50LmF0dHJzKTtcclxuICAgIGNvbnN0IG5ld05leHRUeXBlQXR0cmlidXRlcyA9IGdldFNwbGl0dGVkQXR0cmlidXRlcyhleHRlbnNpb25BdHRyaWJ1dGVzLCAkZnJvbS5ub2RlKCkudHlwZS5uYW1lLCAkZnJvbS5ub2RlKCkuYXR0cnMpO1xyXG4gICAgdHIuZGVsZXRlKCRmcm9tLnBvcywgJHRvLnBvcyk7XHJcbiAgICBjb25zdCB0eXBlcyA9IG5leHRUeXBlXHJcbiAgICAgICAgPyBbeyB0eXBlLCBhdHRyczogbmV3VHlwZUF0dHJpYnV0ZXMgfSwgeyB0eXBlOiBuZXh0VHlwZSwgYXR0cnM6IG5ld05leHRUeXBlQXR0cmlidXRlcyB9XVxyXG4gICAgICAgIDogW3sgdHlwZSwgYXR0cnM6IG5ld1R5cGVBdHRyaWJ1dGVzIH1dO1xyXG4gICAgaWYgKCFjYW5TcGxpdCh0ci5kb2MsICRmcm9tLnBvcywgMikpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBpZiAoZGlzcGF0Y2gpIHtcclxuICAgICAgICB0ci5zcGxpdCgkZnJvbS5wb3MsIDIsIHR5cGVzKS5zY3JvbGxJbnRvVmlldygpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbn07XG5cbmZ1bmN0aW9uIGZpbmRQYXJlbnROb2RlQ2xvc2VzdFRvUG9zKCRwb3MsIHByZWRpY2F0ZSkge1xyXG4gICAgZm9yIChsZXQgaSA9ICRwb3MuZGVwdGg7IGkgPiAwOyBpIC09IDEpIHtcclxuICAgICAgICBjb25zdCBub2RlID0gJHBvcy5ub2RlKGkpO1xyXG4gICAgICAgIGlmIChwcmVkaWNhdGUobm9kZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHBvczogaSA+IDAgPyAkcG9zLmJlZm9yZShpKSA6IDAsXHJcbiAgICAgICAgICAgICAgICBzdGFydDogJHBvcy5zdGFydChpKSxcclxuICAgICAgICAgICAgICAgIGRlcHRoOiBpLFxyXG4gICAgICAgICAgICAgICAgbm9kZSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cblxuZnVuY3Rpb24gZmluZFBhcmVudE5vZGUocHJlZGljYXRlKSB7XHJcbiAgICByZXR1cm4gKHNlbGVjdGlvbikgPT4gZmluZFBhcmVudE5vZGVDbG9zZXN0VG9Qb3Moc2VsZWN0aW9uLiRmcm9tLCBwcmVkaWNhdGUpO1xyXG59XG5cbmZ1bmN0aW9uIGlzTGlzdChuYW1lLCBleHRlbnNpb25zKSB7XHJcbiAgICBjb25zdCB7IG5vZGVFeHRlbnNpb25zIH0gPSBzcGxpdEV4dGVuc2lvbnMoZXh0ZW5zaW9ucyk7XHJcbiAgICBjb25zdCBleHRlbnNpb24gPSBub2RlRXh0ZW5zaW9ucy5maW5kKGl0ZW0gPT4gaXRlbS5uYW1lID09PSBuYW1lKTtcclxuICAgIGlmICghZXh0ZW5zaW9uKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgY29uc3QgY29udGV4dCA9IHtcclxuICAgICAgICBuYW1lOiBleHRlbnNpb24ubmFtZSxcclxuICAgICAgICBvcHRpb25zOiBleHRlbnNpb24ub3B0aW9ucyxcclxuICAgICAgICBzdG9yYWdlOiBleHRlbnNpb24uc3RvcmFnZSxcclxuICAgIH07XHJcbiAgICBjb25zdCBncm91cCA9IGNhbGxPclJldHVybihnZXRFeHRlbnNpb25GaWVsZChleHRlbnNpb24sICdncm91cCcsIGNvbnRleHQpKTtcclxuICAgIGlmICh0eXBlb2YgZ3JvdXAgIT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGdyb3VwLnNwbGl0KCcgJykuaW5jbHVkZXMoJ2xpc3QnKTtcclxufVxuXG5jb25zdCBqb2luTGlzdEJhY2t3YXJkcyA9ICh0ciwgbGlzdFR5cGUpID0+IHtcclxuICAgIGNvbnN0IGxpc3QgPSBmaW5kUGFyZW50Tm9kZShub2RlID0+IG5vZGUudHlwZSA9PT0gbGlzdFR5cGUpKHRyLnNlbGVjdGlvbik7XHJcbiAgICBpZiAoIWxpc3QpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIGNvbnN0IGJlZm9yZSA9IHRyLmRvYy5yZXNvbHZlKE1hdGgubWF4KDAsIGxpc3QucG9zIC0gMSkpLmJlZm9yZShsaXN0LmRlcHRoKTtcclxuICAgIGlmIChiZWZvcmUgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgY29uc3Qgbm9kZUJlZm9yZSA9IHRyLmRvYy5ub2RlQXQoYmVmb3JlKTtcclxuICAgIGNvbnN0IGNhbkpvaW5CYWNrd2FyZHMgPSBsaXN0Lm5vZGUudHlwZSA9PT0gKG5vZGVCZWZvcmUgPT09IG51bGwgfHwgbm9kZUJlZm9yZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogbm9kZUJlZm9yZS50eXBlKVxyXG4gICAgICAgICYmIGNhbkpvaW4odHIuZG9jLCBsaXN0LnBvcyk7XHJcbiAgICBpZiAoIWNhbkpvaW5CYWNrd2FyZHMpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIHRyLmpvaW4obGlzdC5wb3MpO1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbn07XHJcbmNvbnN0IGpvaW5MaXN0Rm9yd2FyZHMgPSAodHIsIGxpc3RUeXBlKSA9PiB7XHJcbiAgICBjb25zdCBsaXN0ID0gZmluZFBhcmVudE5vZGUobm9kZSA9PiBub2RlLnR5cGUgPT09IGxpc3RUeXBlKSh0ci5zZWxlY3Rpb24pO1xyXG4gICAgaWYgKCFsaXN0KSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICBjb25zdCBhZnRlciA9IHRyLmRvYy5yZXNvbHZlKGxpc3Quc3RhcnQpLmFmdGVyKGxpc3QuZGVwdGgpO1xyXG4gICAgaWYgKGFmdGVyID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIGNvbnN0IG5vZGVBZnRlciA9IHRyLmRvYy5ub2RlQXQoYWZ0ZXIpO1xyXG4gICAgY29uc3QgY2FuSm9pbkZvcndhcmRzID0gbGlzdC5ub2RlLnR5cGUgPT09IChub2RlQWZ0ZXIgPT09IG51bGwgfHwgbm9kZUFmdGVyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBub2RlQWZ0ZXIudHlwZSlcclxuICAgICAgICAmJiBjYW5Kb2luKHRyLmRvYywgYWZ0ZXIpO1xyXG4gICAgaWYgKCFjYW5Kb2luRm9yd2FyZHMpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIHRyLmpvaW4oYWZ0ZXIpO1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbn07XHJcbmNvbnN0IHRvZ2dsZUxpc3QgPSAobGlzdFR5cGVPck5hbWUsIGl0ZW1UeXBlT3JOYW1lKSA9PiAoeyBlZGl0b3IsIHRyLCBzdGF0ZSwgZGlzcGF0Y2gsIGNoYWluLCBjb21tYW5kcywgY2FuLCB9KSA9PiB7XHJcbiAgICBjb25zdCB7IGV4dGVuc2lvbnMgfSA9IGVkaXRvci5leHRlbnNpb25NYW5hZ2VyO1xyXG4gICAgY29uc3QgbGlzdFR5cGUgPSBnZXROb2RlVHlwZShsaXN0VHlwZU9yTmFtZSwgc3RhdGUuc2NoZW1hKTtcclxuICAgIGNvbnN0IGl0ZW1UeXBlID0gZ2V0Tm9kZVR5cGUoaXRlbVR5cGVPck5hbWUsIHN0YXRlLnNjaGVtYSk7XHJcbiAgICBjb25zdCB7IHNlbGVjdGlvbiB9ID0gc3RhdGU7XHJcbiAgICBjb25zdCB7ICRmcm9tLCAkdG8gfSA9IHNlbGVjdGlvbjtcclxuICAgIGNvbnN0IHJhbmdlID0gJGZyb20uYmxvY2tSYW5nZSgkdG8pO1xyXG4gICAgaWYgKCFyYW5nZSkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIGNvbnN0IHBhcmVudExpc3QgPSBmaW5kUGFyZW50Tm9kZShub2RlID0+IGlzTGlzdChub2RlLnR5cGUubmFtZSwgZXh0ZW5zaW9ucykpKHNlbGVjdGlvbik7XHJcbiAgICBpZiAocmFuZ2UuZGVwdGggPj0gMSAmJiBwYXJlbnRMaXN0ICYmIHJhbmdlLmRlcHRoIC0gcGFyZW50TGlzdC5kZXB0aCA8PSAxKSB7XHJcbiAgICAgICAgLy8gcmVtb3ZlIGxpc3RcclxuICAgICAgICBpZiAocGFyZW50TGlzdC5ub2RlLnR5cGUgPT09IGxpc3RUeXBlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjb21tYW5kcy5saWZ0TGlzdEl0ZW0oaXRlbVR5cGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBjaGFuZ2UgbGlzdCB0eXBlXHJcbiAgICAgICAgaWYgKGlzTGlzdChwYXJlbnRMaXN0Lm5vZGUudHlwZS5uYW1lLCBleHRlbnNpb25zKVxyXG4gICAgICAgICAgICAmJiBsaXN0VHlwZS52YWxpZENvbnRlbnQocGFyZW50TGlzdC5ub2RlLmNvbnRlbnQpXHJcbiAgICAgICAgICAgICYmIGRpc3BhdGNoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjaGFpbigpXHJcbiAgICAgICAgICAgICAgICAuY29tbWFuZCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0ci5zZXROb2RlTWFya3VwKHBhcmVudExpc3QucG9zLCBsaXN0VHlwZSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC5jb21tYW5kKCgpID0+IGpvaW5MaXN0QmFja3dhcmRzKHRyLCBsaXN0VHlwZSkpXHJcbiAgICAgICAgICAgICAgICAuY29tbWFuZCgoKSA9PiBqb2luTGlzdEZvcndhcmRzKHRyLCBsaXN0VHlwZSkpXHJcbiAgICAgICAgICAgICAgICAucnVuKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNoYWluKClcclxuICAgICAgICAvLyB0cnkgdG8gY29udmVydCBub2RlIHRvIGRlZmF1bHQgbm9kZSBpZiBuZWVkZWRcclxuICAgICAgICAuY29tbWFuZCgoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgY2FuV3JhcEluTGlzdCA9IGNhbigpLndyYXBJbkxpc3QobGlzdFR5cGUpO1xyXG4gICAgICAgIGlmIChjYW5XcmFwSW5MaXN0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY29tbWFuZHMuY2xlYXJOb2RlcygpO1xyXG4gICAgfSlcclxuICAgICAgICAud3JhcEluTGlzdChsaXN0VHlwZSlcclxuICAgICAgICAuY29tbWFuZCgoKSA9PiBqb2luTGlzdEJhY2t3YXJkcyh0ciwgbGlzdFR5cGUpKVxyXG4gICAgICAgIC5jb21tYW5kKCgpID0+IGpvaW5MaXN0Rm9yd2FyZHModHIsIGxpc3RUeXBlKSlcclxuICAgICAgICAucnVuKCk7XHJcbn07XG5cbmZ1bmN0aW9uIGlzTWFya0FjdGl2ZShzdGF0ZSwgdHlwZU9yTmFtZSwgYXR0cmlidXRlcyA9IHt9KSB7XHJcbiAgICBjb25zdCB7IGVtcHR5LCByYW5nZXMgfSA9IHN0YXRlLnNlbGVjdGlvbjtcclxuICAgIGNvbnN0IHR5cGUgPSB0eXBlT3JOYW1lXHJcbiAgICAgICAgPyBnZXRNYXJrVHlwZSh0eXBlT3JOYW1lLCBzdGF0ZS5zY2hlbWEpXHJcbiAgICAgICAgOiBudWxsO1xyXG4gICAgaWYgKGVtcHR5KSB7XHJcbiAgICAgICAgcmV0dXJuICEhKHN0YXRlLnN0b3JlZE1hcmtzIHx8IHN0YXRlLnNlbGVjdGlvbi4kZnJvbS5tYXJrcygpKVxyXG4gICAgICAgICAgICAuZmlsdGVyKG1hcmsgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIXR5cGUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0eXBlLm5hbWUgPT09IG1hcmsudHlwZS5uYW1lO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5maW5kKG1hcmsgPT4gb2JqZWN0SW5jbHVkZXMobWFyay5hdHRycywgYXR0cmlidXRlcywgeyBzdHJpY3Q6IGZhbHNlIH0pKTtcclxuICAgIH1cclxuICAgIGxldCBzZWxlY3Rpb25SYW5nZSA9IDA7XHJcbiAgICBjb25zdCBtYXJrUmFuZ2VzID0gW107XHJcbiAgICByYW5nZXMuZm9yRWFjaCgoeyAkZnJvbSwgJHRvIH0pID0+IHtcclxuICAgICAgICBjb25zdCBmcm9tID0gJGZyb20ucG9zO1xyXG4gICAgICAgIGNvbnN0IHRvID0gJHRvLnBvcztcclxuICAgICAgICBzdGF0ZS5kb2Mubm9kZXNCZXR3ZWVuKGZyb20sIHRvLCAobm9kZSwgcG9zKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICghbm9kZS5pc1RleHQgJiYgIW5vZGUubWFya3MubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgcmVsYXRpdmVGcm9tID0gTWF0aC5tYXgoZnJvbSwgcG9zKTtcclxuICAgICAgICAgICAgY29uc3QgcmVsYXRpdmVUbyA9IE1hdGgubWluKHRvLCBwb3MgKyBub2RlLm5vZGVTaXplKTtcclxuICAgICAgICAgICAgY29uc3QgcmFuZ2UgPSByZWxhdGl2ZVRvIC0gcmVsYXRpdmVGcm9tO1xyXG4gICAgICAgICAgICBzZWxlY3Rpb25SYW5nZSArPSByYW5nZTtcclxuICAgICAgICAgICAgbWFya1Jhbmdlcy5wdXNoKC4uLm5vZGUubWFya3MubWFwKG1hcmsgPT4gKHtcclxuICAgICAgICAgICAgICAgIG1hcmssXHJcbiAgICAgICAgICAgICAgICBmcm9tOiByZWxhdGl2ZUZyb20sXHJcbiAgICAgICAgICAgICAgICB0bzogcmVsYXRpdmVUbyxcclxuICAgICAgICAgICAgfSkpKTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgaWYgKHNlbGVjdGlvblJhbmdlID09PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgLy8gY2FsY3VsYXRlIHJhbmdlIG9mIG1hdGNoZWQgbWFya1xyXG4gICAgY29uc3QgbWF0Y2hlZFJhbmdlID0gbWFya1Jhbmdlc1xyXG4gICAgICAgIC5maWx0ZXIobWFya1JhbmdlID0+IHtcclxuICAgICAgICBpZiAoIXR5cGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0eXBlLm5hbWUgPT09IG1hcmtSYW5nZS5tYXJrLnR5cGUubmFtZTtcclxuICAgIH0pXHJcbiAgICAgICAgLmZpbHRlcihtYXJrUmFuZ2UgPT4gb2JqZWN0SW5jbHVkZXMobWFya1JhbmdlLm1hcmsuYXR0cnMsIGF0dHJpYnV0ZXMsIHsgc3RyaWN0OiBmYWxzZSB9KSlcclxuICAgICAgICAucmVkdWNlKChzdW0sIG1hcmtSYW5nZSkgPT4gc3VtICsgbWFya1JhbmdlLnRvIC0gbWFya1JhbmdlLmZyb20sIDApO1xyXG4gICAgLy8gY2FsY3VsYXRlIHJhbmdlIG9mIG1hcmtzIHRoYXQgZXhjbHVkZXMgdGhlIHNlYXJjaGVkIG1hcmtcclxuICAgIC8vIGZvciBleGFtcGxlIGBjb2RlYCBkb2VzbuKAmXQgYWxsb3cgYW55IG90aGVyIG1hcmtzXHJcbiAgICBjb25zdCBleGNsdWRlZFJhbmdlID0gbWFya1Jhbmdlc1xyXG4gICAgICAgIC5maWx0ZXIobWFya1JhbmdlID0+IHtcclxuICAgICAgICBpZiAoIXR5cGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBtYXJrUmFuZ2UubWFyay50eXBlICE9PSB0eXBlXHJcbiAgICAgICAgICAgICYmIG1hcmtSYW5nZS5tYXJrLnR5cGUuZXhjbHVkZXModHlwZSk7XHJcbiAgICB9KVxyXG4gICAgICAgIC5yZWR1Y2UoKHN1bSwgbWFya1JhbmdlKSA9PiBzdW0gKyBtYXJrUmFuZ2UudG8gLSBtYXJrUmFuZ2UuZnJvbSwgMCk7XHJcbiAgICAvLyB3ZSBvbmx5IGluY2x1ZGUgdGhlIHJlc3VsdCBvZiBgZXhjbHVkZWRSYW5nZWBcclxuICAgIC8vIGlmIHRoZXJlIGlzIGEgbWF0Y2ggYXQgYWxsXHJcbiAgICBjb25zdCByYW5nZSA9IG1hdGNoZWRSYW5nZSA+IDBcclxuICAgICAgICA/IG1hdGNoZWRSYW5nZSArIGV4Y2x1ZGVkUmFuZ2VcclxuICAgICAgICA6IG1hdGNoZWRSYW5nZTtcclxuICAgIHJldHVybiByYW5nZSA+PSBzZWxlY3Rpb25SYW5nZTtcclxufVxuXG5jb25zdCB0b2dnbGVNYXJrID0gKHR5cGVPck5hbWUsIGF0dHJpYnV0ZXMgPSB7fSwgb3B0aW9ucyA9IHt9KSA9PiAoeyBzdGF0ZSwgY29tbWFuZHMgfSkgPT4ge1xyXG4gICAgY29uc3QgeyBleHRlbmRFbXB0eU1hcmtSYW5nZSA9IGZhbHNlIH0gPSBvcHRpb25zO1xyXG4gICAgY29uc3QgdHlwZSA9IGdldE1hcmtUeXBlKHR5cGVPck5hbWUsIHN0YXRlLnNjaGVtYSk7XHJcbiAgICBjb25zdCBpc0FjdGl2ZSA9IGlzTWFya0FjdGl2ZShzdGF0ZSwgdHlwZSwgYXR0cmlidXRlcyk7XHJcbiAgICBpZiAoaXNBY3RpdmUpIHtcclxuICAgICAgICByZXR1cm4gY29tbWFuZHMudW5zZXRNYXJrKHR5cGUsIHsgZXh0ZW5kRW1wdHlNYXJrUmFuZ2UgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY29tbWFuZHMuc2V0TWFyayh0eXBlLCBhdHRyaWJ1dGVzKTtcclxufTtcblxuY29uc3QgdG9nZ2xlTm9kZSA9ICh0eXBlT3JOYW1lLCB0b2dnbGVUeXBlT3JOYW1lLCBhdHRyaWJ1dGVzID0ge30pID0+ICh7IHN0YXRlLCBjb21tYW5kcyB9KSA9PiB7XHJcbiAgICBjb25zdCB0eXBlID0gZ2V0Tm9kZVR5cGUodHlwZU9yTmFtZSwgc3RhdGUuc2NoZW1hKTtcclxuICAgIGNvbnN0IHRvZ2dsZVR5cGUgPSBnZXROb2RlVHlwZSh0b2dnbGVUeXBlT3JOYW1lLCBzdGF0ZS5zY2hlbWEpO1xyXG4gICAgY29uc3QgaXNBY3RpdmUgPSBpc05vZGVBY3RpdmUoc3RhdGUsIHR5cGUsIGF0dHJpYnV0ZXMpO1xyXG4gICAgaWYgKGlzQWN0aXZlKSB7XHJcbiAgICAgICAgcmV0dXJuIGNvbW1hbmRzLnNldE5vZGUodG9nZ2xlVHlwZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY29tbWFuZHMuc2V0Tm9kZSh0eXBlLCBhdHRyaWJ1dGVzKTtcclxufTtcblxuY29uc3QgdG9nZ2xlV3JhcCA9ICh0eXBlT3JOYW1lLCBhdHRyaWJ1dGVzID0ge30pID0+ICh7IHN0YXRlLCBjb21tYW5kcyB9KSA9PiB7XHJcbiAgICBjb25zdCB0eXBlID0gZ2V0Tm9kZVR5cGUodHlwZU9yTmFtZSwgc3RhdGUuc2NoZW1hKTtcclxuICAgIGNvbnN0IGlzQWN0aXZlID0gaXNOb2RlQWN0aXZlKHN0YXRlLCB0eXBlLCBhdHRyaWJ1dGVzKTtcclxuICAgIGlmIChpc0FjdGl2ZSkge1xyXG4gICAgICAgIHJldHVybiBjb21tYW5kcy5saWZ0KHR5cGUpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNvbW1hbmRzLndyYXBJbih0eXBlLCBhdHRyaWJ1dGVzKTtcclxufTtcblxuY29uc3QgdW5kb0lucHV0UnVsZSA9ICgpID0+ICh7IHN0YXRlLCBkaXNwYXRjaCB9KSA9PiB7XHJcbiAgICBjb25zdCBwbHVnaW5zID0gc3RhdGUucGx1Z2lucztcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGx1Z2lucy5sZW5ndGg7IGkgKz0gMSkge1xyXG4gICAgICAgIGNvbnN0IHBsdWdpbiA9IHBsdWdpbnNbaV07XHJcbiAgICAgICAgbGV0IHVuZG9hYmxlO1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcclxuICAgICAgICBpZiAocGx1Z2luLnNwZWMuaXNJbnB1dFJ1bGVzICYmICh1bmRvYWJsZSA9IHBsdWdpbi5nZXRTdGF0ZShzdGF0ZSkpKSB7XHJcbiAgICAgICAgICAgIGlmIChkaXNwYXRjaCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdHIgPSBzdGF0ZS50cjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRvVW5kbyA9IHVuZG9hYmxlLnRyYW5zZm9ybTtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSB0b1VuZG8uc3RlcHMubGVuZ3RoIC0gMTsgaiA+PSAwOyBqIC09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICB0ci5zdGVwKHRvVW5kby5zdGVwc1tqXS5pbnZlcnQodG9VbmRvLmRvY3Nbal0pKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh1bmRvYWJsZS50ZXh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbWFya3MgPSB0ci5kb2MucmVzb2x2ZSh1bmRvYWJsZS5mcm9tKS5tYXJrcygpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRyLnJlcGxhY2VXaXRoKHVuZG9hYmxlLmZyb20sIHVuZG9hYmxlLnRvLCBzdGF0ZS5zY2hlbWEudGV4dCh1bmRvYWJsZS50ZXh0LCBtYXJrcykpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHIuZGVsZXRlKHVuZG9hYmxlLmZyb20sIHVuZG9hYmxlLnRvKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbn07XG5cbmNvbnN0IHVuc2V0QWxsTWFya3MgPSAoKSA9PiAoeyB0ciwgZGlzcGF0Y2ggfSkgPT4ge1xyXG4gICAgY29uc3QgeyBzZWxlY3Rpb24gfSA9IHRyO1xyXG4gICAgY29uc3QgeyBlbXB0eSwgcmFuZ2VzIH0gPSBzZWxlY3Rpb247XHJcbiAgICBpZiAoZW1wdHkpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIGlmIChkaXNwYXRjaCkge1xyXG4gICAgICAgIHJhbmdlcy5mb3JFYWNoKHJhbmdlID0+IHtcclxuICAgICAgICAgICAgdHIucmVtb3ZlTWFyayhyYW5nZS4kZnJvbS5wb3MsIHJhbmdlLiR0by5wb3MpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbn07XG5cbmNvbnN0IHVuc2V0TWFyayA9ICh0eXBlT3JOYW1lLCBvcHRpb25zID0ge30pID0+ICh7IHRyLCBzdGF0ZSwgZGlzcGF0Y2ggfSkgPT4ge1xyXG4gICAgdmFyIF9hO1xyXG4gICAgY29uc3QgeyBleHRlbmRFbXB0eU1hcmtSYW5nZSA9IGZhbHNlIH0gPSBvcHRpb25zO1xyXG4gICAgY29uc3QgeyBzZWxlY3Rpb24gfSA9IHRyO1xyXG4gICAgY29uc3QgdHlwZSA9IGdldE1hcmtUeXBlKHR5cGVPck5hbWUsIHN0YXRlLnNjaGVtYSk7XHJcbiAgICBjb25zdCB7ICRmcm9tLCBlbXB0eSwgcmFuZ2VzIH0gPSBzZWxlY3Rpb247XHJcbiAgICBpZiAoIWRpc3BhdGNoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICBpZiAoZW1wdHkgJiYgZXh0ZW5kRW1wdHlNYXJrUmFuZ2UpIHtcclxuICAgICAgICBsZXQgeyBmcm9tLCB0byB9ID0gc2VsZWN0aW9uO1xyXG4gICAgICAgIGNvbnN0IGF0dHJzID0gKF9hID0gJGZyb20ubWFya3MoKS5maW5kKG1hcmsgPT4gbWFyay50eXBlID09PSB0eXBlKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmF0dHJzO1xyXG4gICAgICAgIGNvbnN0IHJhbmdlID0gZ2V0TWFya1JhbmdlKCRmcm9tLCB0eXBlLCBhdHRycyk7XHJcbiAgICAgICAgaWYgKHJhbmdlKSB7XHJcbiAgICAgICAgICAgIGZyb20gPSByYW5nZS5mcm9tO1xyXG4gICAgICAgICAgICB0byA9IHJhbmdlLnRvO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0ci5yZW1vdmVNYXJrKGZyb20sIHRvLCB0eXBlKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJhbmdlcy5mb3JFYWNoKHJhbmdlID0+IHtcclxuICAgICAgICAgICAgdHIucmVtb3ZlTWFyayhyYW5nZS4kZnJvbS5wb3MsIHJhbmdlLiR0by5wb3MsIHR5cGUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgdHIucmVtb3ZlU3RvcmVkTWFyayh0eXBlKTtcclxuICAgIHJldHVybiB0cnVlO1xyXG59O1xuXG5jb25zdCB1cGRhdGVBdHRyaWJ1dGVzID0gKHR5cGVPck5hbWUsIGF0dHJpYnV0ZXMgPSB7fSkgPT4gKHsgdHIsIHN0YXRlLCBkaXNwYXRjaCB9KSA9PiB7XHJcbiAgICBsZXQgbm9kZVR5cGUgPSBudWxsO1xyXG4gICAgbGV0IG1hcmtUeXBlID0gbnVsbDtcclxuICAgIGNvbnN0IHNjaGVtYVR5cGUgPSBnZXRTY2hlbWFUeXBlTmFtZUJ5TmFtZSh0eXBlb2YgdHlwZU9yTmFtZSA9PT0gJ3N0cmluZydcclxuICAgICAgICA/IHR5cGVPck5hbWVcclxuICAgICAgICA6IHR5cGVPck5hbWUubmFtZSwgc3RhdGUuc2NoZW1hKTtcclxuICAgIGlmICghc2NoZW1hVHlwZSkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIGlmIChzY2hlbWFUeXBlID09PSAnbm9kZScpIHtcclxuICAgICAgICBub2RlVHlwZSA9IGdldE5vZGVUeXBlKHR5cGVPck5hbWUsIHN0YXRlLnNjaGVtYSk7XHJcbiAgICB9XHJcbiAgICBpZiAoc2NoZW1hVHlwZSA9PT0gJ21hcmsnKSB7XHJcbiAgICAgICAgbWFya1R5cGUgPSBnZXRNYXJrVHlwZSh0eXBlT3JOYW1lLCBzdGF0ZS5zY2hlbWEpO1xyXG4gICAgfVxyXG4gICAgaWYgKGRpc3BhdGNoKSB7XHJcbiAgICAgICAgdHIuc2VsZWN0aW9uLnJhbmdlcy5mb3JFYWNoKHJhbmdlID0+IHtcclxuICAgICAgICAgICAgY29uc3QgZnJvbSA9IHJhbmdlLiRmcm9tLnBvcztcclxuICAgICAgICAgICAgY29uc3QgdG8gPSByYW5nZS4kdG8ucG9zO1xyXG4gICAgICAgICAgICBzdGF0ZS5kb2Mubm9kZXNCZXR3ZWVuKGZyb20sIHRvLCAobm9kZSwgcG9zKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAobm9kZVR5cGUgJiYgbm9kZVR5cGUgPT09IG5vZGUudHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRyLnNldE5vZGVNYXJrdXAocG9zLCB1bmRlZmluZWQsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLi4ubm9kZS5hdHRycyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgLi4uYXR0cmlidXRlcyxcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChtYXJrVHlwZSAmJiBub2RlLm1hcmtzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5vZGUubWFya3MuZm9yRWFjaChtYXJrID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hcmtUeXBlID09PSBtYXJrLnR5cGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRyaW1tZWRGcm9tID0gTWF0aC5tYXgocG9zLCBmcm9tKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRyaW1tZWRUbyA9IE1hdGgubWluKHBvcyArIG5vZGUubm9kZVNpemUsIHRvKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyLmFkZE1hcmsodHJpbW1lZEZyb20sIHRyaW1tZWRUbywgbWFya1R5cGUuY3JlYXRlKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5tYXJrLmF0dHJzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLmF0dHJpYnV0ZXMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufTtcblxuY29uc3Qgd3JhcEluID0gKHR5cGVPck5hbWUsIGF0dHJpYnV0ZXMgPSB7fSkgPT4gKHsgc3RhdGUsIGRpc3BhdGNoIH0pID0+IHtcclxuICAgIGNvbnN0IHR5cGUgPSBnZXROb2RlVHlwZSh0eXBlT3JOYW1lLCBzdGF0ZS5zY2hlbWEpO1xyXG4gICAgcmV0dXJuIHdyYXBJbiQxKHR5cGUsIGF0dHJpYnV0ZXMpKHN0YXRlLCBkaXNwYXRjaCk7XHJcbn07XG5cbmNvbnN0IHdyYXBJbkxpc3QgPSAodHlwZU9yTmFtZSwgYXR0cmlidXRlcyA9IHt9KSA9PiAoeyBzdGF0ZSwgZGlzcGF0Y2ggfSkgPT4ge1xyXG4gICAgY29uc3QgdHlwZSA9IGdldE5vZGVUeXBlKHR5cGVPck5hbWUsIHN0YXRlLnNjaGVtYSk7XHJcbiAgICByZXR1cm4gd3JhcEluTGlzdCQxKHR5cGUsIGF0dHJpYnV0ZXMpKHN0YXRlLCBkaXNwYXRjaCk7XHJcbn07XG5cbnZhciBjb21tYW5kcyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbiAgX19wcm90b19fOiBudWxsLFxuICBibHVyOiBibHVyLFxuICBjbGVhckNvbnRlbnQ6IGNsZWFyQ29udGVudCxcbiAgY2xlYXJOb2RlczogY2xlYXJOb2RlcyxcbiAgY29tbWFuZDogY29tbWFuZCxcbiAgY3JlYXRlUGFyYWdyYXBoTmVhcjogY3JlYXRlUGFyYWdyYXBoTmVhcixcbiAgZGVsZXRlTm9kZTogZGVsZXRlTm9kZSxcbiAgZGVsZXRlUmFuZ2U6IGRlbGV0ZVJhbmdlLFxuICBkZWxldGVTZWxlY3Rpb246IGRlbGV0ZVNlbGVjdGlvbixcbiAgZW50ZXI6IGVudGVyLFxuICBleGl0Q29kZTogZXhpdENvZGUsXG4gIGV4dGVuZE1hcmtSYW5nZTogZXh0ZW5kTWFya1JhbmdlLFxuICBmaXJzdDogZmlyc3QsXG4gIGZvY3VzOiBmb2N1cyxcbiAgZm9yRWFjaDogZm9yRWFjaCxcbiAgaW5zZXJ0Q29udGVudDogaW5zZXJ0Q29udGVudCxcbiAgaW5zZXJ0Q29udGVudEF0OiBpbnNlcnRDb250ZW50QXQsXG4gIGpvaW5CYWNrd2FyZDogam9pbkJhY2t3YXJkLFxuICBqb2luRm9yd2FyZDogam9pbkZvcndhcmQsXG4gIGtleWJvYXJkU2hvcnRjdXQ6IGtleWJvYXJkU2hvcnRjdXQsXG4gIGxpZnQ6IGxpZnQsXG4gIGxpZnRFbXB0eUJsb2NrOiBsaWZ0RW1wdHlCbG9jayxcbiAgbGlmdExpc3RJdGVtOiBsaWZ0TGlzdEl0ZW0sXG4gIG5ld2xpbmVJbkNvZGU6IG5ld2xpbmVJbkNvZGUsXG4gIHJlc2V0QXR0cmlidXRlczogcmVzZXRBdHRyaWJ1dGVzLFxuICBzY3JvbGxJbnRvVmlldzogc2Nyb2xsSW50b1ZpZXcsXG4gIHNlbGVjdEFsbDogc2VsZWN0QWxsLFxuICBzZWxlY3ROb2RlQmFja3dhcmQ6IHNlbGVjdE5vZGVCYWNrd2FyZCxcbiAgc2VsZWN0Tm9kZUZvcndhcmQ6IHNlbGVjdE5vZGVGb3J3YXJkLFxuICBzZWxlY3RQYXJlbnROb2RlOiBzZWxlY3RQYXJlbnROb2RlLFxuICBzZWxlY3RUZXh0YmxvY2tFbmQ6IHNlbGVjdFRleHRibG9ja0VuZCxcbiAgc2VsZWN0VGV4dGJsb2NrU3RhcnQ6IHNlbGVjdFRleHRibG9ja1N0YXJ0LFxuICBzZXRDb250ZW50OiBzZXRDb250ZW50LFxuICBzZXRNYXJrOiBzZXRNYXJrLFxuICBzZXRNZXRhOiBzZXRNZXRhLFxuICBzZXROb2RlOiBzZXROb2RlLFxuICBzZXROb2RlU2VsZWN0aW9uOiBzZXROb2RlU2VsZWN0aW9uLFxuICBzZXRUZXh0U2VsZWN0aW9uOiBzZXRUZXh0U2VsZWN0aW9uLFxuICBzaW5rTGlzdEl0ZW06IHNpbmtMaXN0SXRlbSxcbiAgc3BsaXRCbG9jazogc3BsaXRCbG9jayxcbiAgc3BsaXRMaXN0SXRlbTogc3BsaXRMaXN0SXRlbSxcbiAgdG9nZ2xlTGlzdDogdG9nZ2xlTGlzdCxcbiAgdG9nZ2xlTWFyazogdG9nZ2xlTWFyayxcbiAgdG9nZ2xlTm9kZTogdG9nZ2xlTm9kZSxcbiAgdG9nZ2xlV3JhcDogdG9nZ2xlV3JhcCxcbiAgdW5kb0lucHV0UnVsZTogdW5kb0lucHV0UnVsZSxcbiAgdW5zZXRBbGxNYXJrczogdW5zZXRBbGxNYXJrcyxcbiAgdW5zZXRNYXJrOiB1bnNldE1hcmssXG4gIHVwZGF0ZUF0dHJpYnV0ZXM6IHVwZGF0ZUF0dHJpYnV0ZXMsXG4gIHdyYXBJbjogd3JhcEluLFxuICB3cmFwSW5MaXN0OiB3cmFwSW5MaXN0XG59KTtcblxuY29uc3QgQ29tbWFuZHMgPSBFeHRlbnNpb24uY3JlYXRlKHtcclxuICAgIG5hbWU6ICdjb21tYW5kcycsXHJcbiAgICBhZGRDb21tYW5kcygpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAuLi5jb21tYW5kcyxcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxufSk7XG5cbmNvbnN0IEVkaXRhYmxlID0gRXh0ZW5zaW9uLmNyZWF0ZSh7XHJcbiAgICBuYW1lOiAnZWRpdGFibGUnLFxyXG4gICAgYWRkUHJvc2VNaXJyb3JQbHVnaW5zKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIG5ldyBQbHVnaW4oe1xyXG4gICAgICAgICAgICAgICAga2V5OiBuZXcgUGx1Z2luS2V5KCdlZGl0YWJsZScpLFxyXG4gICAgICAgICAgICAgICAgcHJvcHM6IHtcclxuICAgICAgICAgICAgICAgICAgICBlZGl0YWJsZTogKCkgPT4gdGhpcy5lZGl0b3Iub3B0aW9ucy5lZGl0YWJsZSxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgIF07XHJcbiAgICB9LFxyXG59KTtcblxuY29uc3QgRm9jdXNFdmVudHMgPSBFeHRlbnNpb24uY3JlYXRlKHtcclxuICAgIG5hbWU6ICdmb2N1c0V2ZW50cycsXHJcbiAgICBhZGRQcm9zZU1pcnJvclBsdWdpbnMoKSB7XHJcbiAgICAgICAgY29uc3QgeyBlZGl0b3IgfSA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgbmV3IFBsdWdpbih7XHJcbiAgICAgICAgICAgICAgICBrZXk6IG5ldyBQbHVnaW5LZXkoJ2ZvY3VzRXZlbnRzJyksXHJcbiAgICAgICAgICAgICAgICBwcm9wczoge1xyXG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZURPTUV2ZW50czoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb2N1czogKHZpZXcsIGV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlZGl0b3IuaXNGb2N1c2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRyYW5zYWN0aW9uID0gZWRpdG9yLnN0YXRlLnRyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnNldE1ldGEoJ2ZvY3VzJywgeyBldmVudCB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRNZXRhKCdhZGRUb0hpc3RvcnknLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWV3LmRpc3BhdGNoKHRyYW5zYWN0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYmx1cjogKHZpZXcsIGV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlZGl0b3IuaXNGb2N1c2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0cmFuc2FjdGlvbiA9IGVkaXRvci5zdGF0ZS50clxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRNZXRhKCdibHVyJywgeyBldmVudCB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRNZXRhKCdhZGRUb0hpc3RvcnknLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWV3LmRpc3BhdGNoKHRyYW5zYWN0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgXTtcclxuICAgIH0sXHJcbn0pO1xuXG5jb25zdCBLZXltYXAgPSBFeHRlbnNpb24uY3JlYXRlKHtcclxuICAgIG5hbWU6ICdrZXltYXAnLFxyXG4gICAgYWRkS2V5Ym9hcmRTaG9ydGN1dHMoKSB7XHJcbiAgICAgICAgY29uc3QgaGFuZGxlQmFja3NwYWNlID0gKCkgPT4gdGhpcy5lZGl0b3IuY29tbWFuZHMuZmlyc3QoKHsgY29tbWFuZHMgfSkgPT4gW1xyXG4gICAgICAgICAgICAoKSA9PiBjb21tYW5kcy51bmRvSW5wdXRSdWxlKCksXHJcbiAgICAgICAgICAgIC8vIG1heWJlIGNvbnZlcnQgZmlyc3QgdGV4dCBibG9jayBub2RlIHRvIGRlZmF1bHQgbm9kZVxyXG4gICAgICAgICAgICAoKSA9PiBjb21tYW5kcy5jb21tYW5kKCh7IHRyIH0pID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHsgc2VsZWN0aW9uLCBkb2MgfSA9IHRyO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgeyBlbXB0eSwgJGFuY2hvciB9ID0gc2VsZWN0aW9uO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgeyBwb3MsIHBhcmVudCB9ID0gJGFuY2hvcjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGlzQXRTdGFydCA9IFNlbGVjdGlvbi5hdFN0YXJ0KGRvYykuZnJvbSA9PT0gcG9zO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFlbXB0eVxyXG4gICAgICAgICAgICAgICAgICAgIHx8ICFpc0F0U3RhcnRcclxuICAgICAgICAgICAgICAgICAgICB8fCAhcGFyZW50LnR5cGUuaXNUZXh0YmxvY2tcclxuICAgICAgICAgICAgICAgICAgICB8fCBwYXJlbnQudGV4dENvbnRlbnQubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1hbmRzLmNsZWFyTm9kZXMoKTtcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgICgpID0+IGNvbW1hbmRzLmRlbGV0ZVNlbGVjdGlvbigpLFxyXG4gICAgICAgICAgICAoKSA9PiBjb21tYW5kcy5qb2luQmFja3dhcmQoKSxcclxuICAgICAgICAgICAgKCkgPT4gY29tbWFuZHMuc2VsZWN0Tm9kZUJhY2t3YXJkKCksXHJcbiAgICAgICAgXSk7XHJcbiAgICAgICAgY29uc3QgaGFuZGxlRGVsZXRlID0gKCkgPT4gdGhpcy5lZGl0b3IuY29tbWFuZHMuZmlyc3QoKHsgY29tbWFuZHMgfSkgPT4gW1xyXG4gICAgICAgICAgICAoKSA9PiBjb21tYW5kcy5kZWxldGVTZWxlY3Rpb24oKSxcclxuICAgICAgICAgICAgKCkgPT4gY29tbWFuZHMuam9pbkZvcndhcmQoKSxcclxuICAgICAgICAgICAgKCkgPT4gY29tbWFuZHMuc2VsZWN0Tm9kZUZvcndhcmQoKSxcclxuICAgICAgICBdKTtcclxuICAgICAgICBjb25zdCBoYW5kbGVFbnRlciA9ICgpID0+IHRoaXMuZWRpdG9yLmNvbW1hbmRzLmZpcnN0KCh7IGNvbW1hbmRzIH0pID0+IFtcclxuICAgICAgICAgICAgKCkgPT4gY29tbWFuZHMubmV3bGluZUluQ29kZSgpLFxyXG4gICAgICAgICAgICAoKSA9PiBjb21tYW5kcy5jcmVhdGVQYXJhZ3JhcGhOZWFyKCksXHJcbiAgICAgICAgICAgICgpID0+IGNvbW1hbmRzLmxpZnRFbXB0eUJsb2NrKCksXHJcbiAgICAgICAgICAgICgpID0+IGNvbW1hbmRzLnNwbGl0QmxvY2soKSxcclxuICAgICAgICBdKTtcclxuICAgICAgICBjb25zdCBiYXNlS2V5bWFwID0ge1xyXG4gICAgICAgICAgICBFbnRlcjogaGFuZGxlRW50ZXIsXHJcbiAgICAgICAgICAgICdNb2QtRW50ZXInOiAoKSA9PiB0aGlzLmVkaXRvci5jb21tYW5kcy5leGl0Q29kZSgpLFxyXG4gICAgICAgICAgICBCYWNrc3BhY2U6IGhhbmRsZUJhY2tzcGFjZSxcclxuICAgICAgICAgICAgJ01vZC1CYWNrc3BhY2UnOiBoYW5kbGVCYWNrc3BhY2UsXHJcbiAgICAgICAgICAgICdTaGlmdC1CYWNrc3BhY2UnOiBoYW5kbGVCYWNrc3BhY2UsXHJcbiAgICAgICAgICAgIERlbGV0ZTogaGFuZGxlRGVsZXRlLFxyXG4gICAgICAgICAgICAnTW9kLURlbGV0ZSc6IGhhbmRsZURlbGV0ZSxcclxuICAgICAgICAgICAgJ01vZC1hJzogKCkgPT4gdGhpcy5lZGl0b3IuY29tbWFuZHMuc2VsZWN0QWxsKCksXHJcbiAgICAgICAgfTtcclxuICAgICAgICBjb25zdCBwY0tleW1hcCA9IHtcclxuICAgICAgICAgICAgLi4uYmFzZUtleW1hcCxcclxuICAgICAgICB9O1xyXG4gICAgICAgIGNvbnN0IG1hY0tleW1hcCA9IHtcclxuICAgICAgICAgICAgLi4uYmFzZUtleW1hcCxcclxuICAgICAgICAgICAgJ0N0cmwtaCc6IGhhbmRsZUJhY2tzcGFjZSxcclxuICAgICAgICAgICAgJ0FsdC1CYWNrc3BhY2UnOiBoYW5kbGVCYWNrc3BhY2UsXHJcbiAgICAgICAgICAgICdDdHJsLWQnOiBoYW5kbGVEZWxldGUsXHJcbiAgICAgICAgICAgICdDdHJsLUFsdC1CYWNrc3BhY2UnOiBoYW5kbGVEZWxldGUsXHJcbiAgICAgICAgICAgICdBbHQtRGVsZXRlJzogaGFuZGxlRGVsZXRlLFxyXG4gICAgICAgICAgICAnQWx0LWQnOiBoYW5kbGVEZWxldGUsXHJcbiAgICAgICAgICAgICdDdHJsLWEnOiAoKSA9PiB0aGlzLmVkaXRvci5jb21tYW5kcy5zZWxlY3RUZXh0YmxvY2tTdGFydCgpLFxyXG4gICAgICAgICAgICAnQ3RybC1lJzogKCkgPT4gdGhpcy5lZGl0b3IuY29tbWFuZHMuc2VsZWN0VGV4dGJsb2NrRW5kKCksXHJcbiAgICAgICAgfTtcclxuICAgICAgICBpZiAoaXNpT1MoKSB8fCBpc01hY09TKCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG1hY0tleW1hcDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHBjS2V5bWFwO1xyXG4gICAgfSxcclxuICAgIGFkZFByb3NlTWlycm9yUGx1Z2lucygpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICAvLyBXaXRoIHRoaXMgcGx1Z2luIHdlIGNoZWNrIGlmIHRoZSB3aG9sZSBkb2N1bWVudCB3YXMgc2VsZWN0ZWQgYW5kIGRlbGV0ZWQuXHJcbiAgICAgICAgICAgIC8vIEluIHRoaXMgY2FzZSB3ZSB3aWxsIGFkZGl0aW9uYWxseSBjYWxsIGBjbGVhck5vZGVzKClgIHRvIGNvbnZlcnQgZS5nLiBhIGhlYWRpbmdcclxuICAgICAgICAgICAgLy8gdG8gYSBwYXJhZ3JhcGggaWYgbmVjZXNzYXJ5LlxyXG4gICAgICAgICAgICAvLyBUaGlzIGlzIGFuIGFsdGVybmF0aXZlIHRvIFByb3NlTWlycm9yJ3MgYEFsbFNlbGVjdGlvbmAsIHdoaWNoIGRvZXNu4oCZdCB3b3JrIHdlbGxcclxuICAgICAgICAgICAgLy8gd2l0aCBtYW55IG90aGVyIGNvbW1hbmRzLlxyXG4gICAgICAgICAgICBuZXcgUGx1Z2luKHtcclxuICAgICAgICAgICAgICAgIGtleTogbmV3IFBsdWdpbktleSgnY2xlYXJEb2N1bWVudCcpLFxyXG4gICAgICAgICAgICAgICAgYXBwZW5kVHJhbnNhY3Rpb246ICh0cmFuc2FjdGlvbnMsIG9sZFN0YXRlLCBuZXdTdGF0ZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRvY0NoYW5nZXMgPSB0cmFuc2FjdGlvbnMuc29tZSh0cmFuc2FjdGlvbiA9PiB0cmFuc2FjdGlvbi5kb2NDaGFuZ2VkKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAmJiAhb2xkU3RhdGUuZG9jLmVxKG5ld1N0YXRlLmRvYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFkb2NDaGFuZ2VzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBlbXB0eSwgZnJvbSwgdG8gfSA9IG9sZFN0YXRlLnNlbGVjdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBhbGxGcm9tID0gU2VsZWN0aW9uLmF0U3RhcnQob2xkU3RhdGUuZG9jKS5mcm9tO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFsbEVuZCA9IFNlbGVjdGlvbi5hdEVuZChvbGRTdGF0ZS5kb2MpLnRvO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFsbFdhc1NlbGVjdGVkID0gZnJvbSA9PT0gYWxsRnJvbSAmJiB0byA9PT0gYWxsRW5kO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGlzRW1wdHkgPSBuZXdTdGF0ZS5kb2MudGV4dEJldHdlZW4oMCwgbmV3U3RhdGUuZG9jLmNvbnRlbnQuc2l6ZSwgJyAnLCAnICcpLmxlbmd0aCA9PT0gMDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZW1wdHkgfHwgIWFsbFdhc1NlbGVjdGVkIHx8ICFpc0VtcHR5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdHIgPSBuZXdTdGF0ZS50cjtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdGF0ZSA9IGNyZWF0ZUNoYWluYWJsZVN0YXRlKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGU6IG5ld1N0YXRlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbjogdHIsXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBjb21tYW5kcyB9ID0gbmV3IENvbW1hbmRNYW5hZ2VyKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWRpdG9yOiB0aGlzLmVkaXRvcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUsXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29tbWFuZHMuY2xlYXJOb2RlcygpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdHIuc3RlcHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRyO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgXTtcclxuICAgIH0sXHJcbn0pO1xuXG5jb25zdCBUYWJpbmRleCA9IEV4dGVuc2lvbi5jcmVhdGUoe1xyXG4gICAgbmFtZTogJ3RhYmluZGV4JyxcclxuICAgIGFkZFByb3NlTWlycm9yUGx1Z2lucygpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICBuZXcgUGx1Z2luKHtcclxuICAgICAgICAgICAgICAgIGtleTogbmV3IFBsdWdpbktleSgndGFiaW5kZXgnKSxcclxuICAgICAgICAgICAgICAgIHByb3BzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlczogdGhpcy5lZGl0b3IuaXNFZGl0YWJsZSA/IHsgdGFiaW5kZXg6ICcwJyB9IDoge30sXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICBdO1xyXG4gICAgfSxcclxufSk7XG5cbnZhciBleHRlbnNpb25zID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuICBfX3Byb3RvX186IG51bGwsXG4gIENsaXBib2FyZFRleHRTZXJpYWxpemVyOiBDbGlwYm9hcmRUZXh0U2VyaWFsaXplcixcbiAgQ29tbWFuZHM6IENvbW1hbmRzLFxuICBFZGl0YWJsZTogRWRpdGFibGUsXG4gIEZvY3VzRXZlbnRzOiBGb2N1c0V2ZW50cyxcbiAgS2V5bWFwOiBLZXltYXAsXG4gIFRhYmluZGV4OiBUYWJpbmRleFxufSk7XG5cbmZ1bmN0aW9uIGdldE5vZGVBdHRyaWJ1dGVzKHN0YXRlLCB0eXBlT3JOYW1lKSB7XHJcbiAgICBjb25zdCB0eXBlID0gZ2V0Tm9kZVR5cGUodHlwZU9yTmFtZSwgc3RhdGUuc2NoZW1hKTtcclxuICAgIGNvbnN0IHsgZnJvbSwgdG8gfSA9IHN0YXRlLnNlbGVjdGlvbjtcclxuICAgIGNvbnN0IG5vZGVzID0gW107XHJcbiAgICBzdGF0ZS5kb2Mubm9kZXNCZXR3ZWVuKGZyb20sIHRvLCBub2RlID0+IHtcclxuICAgICAgICBub2Rlcy5wdXNoKG5vZGUpO1xyXG4gICAgfSk7XHJcbiAgICBjb25zdCBub2RlID0gbm9kZXNcclxuICAgICAgICAucmV2ZXJzZSgpXHJcbiAgICAgICAgLmZpbmQobm9kZUl0ZW0gPT4gbm9kZUl0ZW0udHlwZS5uYW1lID09PSB0eXBlLm5hbWUpO1xyXG4gICAgaWYgKCFub2RlKSB7XHJcbiAgICAgICAgcmV0dXJuIHt9O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHsgLi4ubm9kZS5hdHRycyB9O1xyXG59XG5cbmZ1bmN0aW9uIGdldEF0dHJpYnV0ZXMoc3RhdGUsIHR5cGVPck5hbWUpIHtcclxuICAgIGNvbnN0IHNjaGVtYVR5cGUgPSBnZXRTY2hlbWFUeXBlTmFtZUJ5TmFtZSh0eXBlb2YgdHlwZU9yTmFtZSA9PT0gJ3N0cmluZydcclxuICAgICAgICA/IHR5cGVPck5hbWVcclxuICAgICAgICA6IHR5cGVPck5hbWUubmFtZSwgc3RhdGUuc2NoZW1hKTtcclxuICAgIGlmIChzY2hlbWFUeXBlID09PSAnbm9kZScpIHtcclxuICAgICAgICByZXR1cm4gZ2V0Tm9kZUF0dHJpYnV0ZXMoc3RhdGUsIHR5cGVPck5hbWUpO1xyXG4gICAgfVxyXG4gICAgaWYgKHNjaGVtYVR5cGUgPT09ICdtYXJrJykge1xyXG4gICAgICAgIHJldHVybiBnZXRNYXJrQXR0cmlidXRlcyhzdGF0ZSwgdHlwZU9yTmFtZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4ge307XHJcbn1cblxuZnVuY3Rpb24gZ2V0SFRNTEZyb21GcmFnbWVudChmcmFnbWVudCwgc2NoZW1hKSB7XHJcbiAgICBjb25zdCBkb2N1bWVudEZyYWdtZW50ID0gRE9NU2VyaWFsaXplclxyXG4gICAgICAgIC5mcm9tU2NoZW1hKHNjaGVtYSlcclxuICAgICAgICAuc2VyaWFsaXplRnJhZ21lbnQoZnJhZ21lbnQpO1xyXG4gICAgY29uc3QgdGVtcG9yYXJ5RG9jdW1lbnQgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoKTtcclxuICAgIGNvbnN0IGNvbnRhaW5lciA9IHRlbXBvcmFyeURvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGRvY3VtZW50RnJhZ21lbnQpO1xyXG4gICAgcmV0dXJuIGNvbnRhaW5lci5pbm5lckhUTUw7XHJcbn1cblxuZnVuY3Rpb24gZ2V0VGV4dChub2RlLCBvcHRpb25zKSB7XHJcbiAgICBjb25zdCByYW5nZSA9IHtcclxuICAgICAgICBmcm9tOiAwLFxyXG4gICAgICAgIHRvOiBub2RlLmNvbnRlbnQuc2l6ZSxcclxuICAgIH07XHJcbiAgICByZXR1cm4gZ2V0VGV4dEJldHdlZW4obm9kZSwgcmFuZ2UsIG9wdGlvbnMpO1xyXG59XG5cbmZ1bmN0aW9uIGlzQWN0aXZlKHN0YXRlLCBuYW1lLCBhdHRyaWJ1dGVzID0ge30pIHtcclxuICAgIGlmICghbmFtZSkge1xyXG4gICAgICAgIHJldHVybiBpc05vZGVBY3RpdmUoc3RhdGUsIG51bGwsIGF0dHJpYnV0ZXMpIHx8IGlzTWFya0FjdGl2ZShzdGF0ZSwgbnVsbCwgYXR0cmlidXRlcyk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBzY2hlbWFUeXBlID0gZ2V0U2NoZW1hVHlwZU5hbWVCeU5hbWUobmFtZSwgc3RhdGUuc2NoZW1hKTtcclxuICAgIGlmIChzY2hlbWFUeXBlID09PSAnbm9kZScpIHtcclxuICAgICAgICByZXR1cm4gaXNOb2RlQWN0aXZlKHN0YXRlLCBuYW1lLCBhdHRyaWJ1dGVzKTtcclxuICAgIH1cclxuICAgIGlmIChzY2hlbWFUeXBlID09PSAnbWFyaycpIHtcclxuICAgICAgICByZXR1cm4gaXNNYXJrQWN0aXZlKHN0YXRlLCBuYW1lLCBhdHRyaWJ1dGVzKTtcclxuICAgIH1cclxuICAgIHJldHVybiBmYWxzZTtcclxufVxuXG5mdW5jdGlvbiBpc05vZGVFbXB0eShub2RlKSB7XHJcbiAgICB2YXIgX2E7XHJcbiAgICBjb25zdCBkZWZhdWx0Q29udGVudCA9IChfYSA9IG5vZGUudHlwZS5jcmVhdGVBbmRGaWxsKCkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS50b0pTT04oKTtcclxuICAgIGNvbnN0IGNvbnRlbnQgPSBub2RlLnRvSlNPTigpO1xyXG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGRlZmF1bHRDb250ZW50KSA9PT0gSlNPTi5zdHJpbmdpZnkoY29udGVudCk7XHJcbn1cblxuY29uc3Qgc3R5bGUgPSBgLlByb3NlTWlycm9yIHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xufVxuXG4uUHJvc2VNaXJyb3Ige1xuICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7XG4gIHdoaXRlLXNwYWNlOiBwcmUtd3JhcDtcbiAgd2hpdGUtc3BhY2U6IGJyZWFrLXNwYWNlcztcbiAgLXdlYmtpdC1mb250LXZhcmlhbnQtbGlnYXR1cmVzOiBub25lO1xuICBmb250LXZhcmlhbnQtbGlnYXR1cmVzOiBub25lO1xuICBmb250LWZlYXR1cmUtc2V0dGluZ3M6IFwibGlnYVwiIDA7IC8qIHRoZSBhYm92ZSBkb2Vzbid0IHNlZW0gdG8gd29yayBpbiBFZGdlICovXG59XG5cbi5Qcm9zZU1pcnJvciBbY29udGVudGVkaXRhYmxlPVwiZmFsc2VcIl0ge1xuICB3aGl0ZS1zcGFjZTogbm9ybWFsO1xufVxuXG4uUHJvc2VNaXJyb3IgW2NvbnRlbnRlZGl0YWJsZT1cImZhbHNlXCJdIFtjb250ZW50ZWRpdGFibGU9XCJ0cnVlXCJdIHtcbiAgd2hpdGUtc3BhY2U6IHByZS13cmFwO1xufVxuXG4uUHJvc2VNaXJyb3IgcHJlIHtcbiAgd2hpdGUtc3BhY2U6IHByZS13cmFwO1xufVxuXG5pbWcuUHJvc2VNaXJyb3Itc2VwYXJhdG9yIHtcbiAgZGlzcGxheTogaW5saW5lICFpbXBvcnRhbnQ7XG4gIGJvcmRlcjogbm9uZSAhaW1wb3J0YW50O1xuICBtYXJnaW46IDAgIWltcG9ydGFudDtcbiAgd2lkdGg6IDFweCAhaW1wb3J0YW50O1xuICBoZWlnaHQ6IDFweCAhaW1wb3J0YW50O1xufVxuXG4uUHJvc2VNaXJyb3ItZ2FwY3Vyc29yIHtcbiAgZGlzcGxheTogbm9uZTtcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgbWFyZ2luOiAwO1xufVxuXG4uUHJvc2VNaXJyb3ItZ2FwY3Vyc29yOmFmdGVyIHtcbiAgY29udGVudDogXCJcIjtcbiAgZGlzcGxheTogYmxvY2s7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiAtMnB4O1xuICB3aWR0aDogMjBweDtcbiAgYm9yZGVyLXRvcDogMXB4IHNvbGlkIGJsYWNrO1xuICBhbmltYXRpb246IFByb3NlTWlycm9yLWN1cnNvci1ibGluayAxLjFzIHN0ZXBzKDIsIHN0YXJ0KSBpbmZpbml0ZTtcbn1cblxuQGtleWZyYW1lcyBQcm9zZU1pcnJvci1jdXJzb3ItYmxpbmsge1xuICB0byB7XG4gICAgdmlzaWJpbGl0eTogaGlkZGVuO1xuICB9XG59XG5cbi5Qcm9zZU1pcnJvci1oaWRlc2VsZWN0aW9uICo6OnNlbGVjdGlvbiB7XG4gIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xufVxuXG4uUHJvc2VNaXJyb3ItaGlkZXNlbGVjdGlvbiAqOjotbW96LXNlbGVjdGlvbiB7XG4gIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xufVxuXG4uUHJvc2VNaXJyb3ItaGlkZXNlbGVjdGlvbiAqIHtcbiAgY2FyZXQtY29sb3I6IHRyYW5zcGFyZW50O1xufVxuXG4uUHJvc2VNaXJyb3ItZm9jdXNlZCAuUHJvc2VNaXJyb3ItZ2FwY3Vyc29yIHtcbiAgZGlzcGxheTogYmxvY2s7XG59XG5cbi50aXBweS1ib3hbZGF0YS1hbmltYXRpb249ZmFkZV1bZGF0YS1zdGF0ZT1oaWRkZW5dIHtcbiAgb3BhY2l0eTogMFxufWA7XG5cbmZ1bmN0aW9uIGNyZWF0ZVN0eWxlVGFnKHN0eWxlLCBub25jZSkge1xyXG4gICAgY29uc3QgdGlwVGFwU3R5bGVUYWcgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdzdHlsZVtkYXRhLXRpcHRhcC1zdHlsZV0nKTtcclxuICAgIGlmICh0aXBUYXBTdHlsZVRhZyAhPT0gbnVsbCkge1xyXG4gICAgICAgIHJldHVybiB0aXBUYXBTdHlsZVRhZztcclxuICAgIH1cclxuICAgIGNvbnN0IHN0eWxlTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XHJcbiAgICBpZiAobm9uY2UpIHtcclxuICAgICAgICBzdHlsZU5vZGUuc2V0QXR0cmlidXRlKCdub25jZScsIG5vbmNlKTtcclxuICAgIH1cclxuICAgIHN0eWxlTm9kZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtdGlwdGFwLXN0eWxlJywgJycpO1xyXG4gICAgc3R5bGVOb2RlLmlubmVySFRNTCA9IHN0eWxlO1xyXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXS5hcHBlbmRDaGlsZChzdHlsZU5vZGUpO1xyXG4gICAgcmV0dXJuIHN0eWxlTm9kZTtcclxufVxuXG5jbGFzcyBFZGl0b3IgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xyXG4gICAgY29uc3RydWN0b3Iob3B0aW9ucyA9IHt9KSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB0aGlzLmlzRm9jdXNlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuZXh0ZW5zaW9uU3RvcmFnZSA9IHt9O1xyXG4gICAgICAgIHRoaXMub3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgZWxlbWVudDogZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JyksXHJcbiAgICAgICAgICAgIGNvbnRlbnQ6ICcnLFxyXG4gICAgICAgICAgICBpbmplY3RDU1M6IHRydWUsXHJcbiAgICAgICAgICAgIGluamVjdE5vbmNlOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgIGV4dGVuc2lvbnM6IFtdLFxyXG4gICAgICAgICAgICBhdXRvZm9jdXM6IGZhbHNlLFxyXG4gICAgICAgICAgICBlZGl0YWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgZWRpdG9yUHJvcHM6IHt9LFxyXG4gICAgICAgICAgICBwYXJzZU9wdGlvbnM6IHt9LFxyXG4gICAgICAgICAgICBlbmFibGVJbnB1dFJ1bGVzOiB0cnVlLFxyXG4gICAgICAgICAgICBlbmFibGVQYXN0ZVJ1bGVzOiB0cnVlLFxyXG4gICAgICAgICAgICBlbmFibGVDb3JlRXh0ZW5zaW9uczogdHJ1ZSxcclxuICAgICAgICAgICAgb25CZWZvcmVDcmVhdGU6ICgpID0+IG51bGwsXHJcbiAgICAgICAgICAgIG9uQ3JlYXRlOiAoKSA9PiBudWxsLFxyXG4gICAgICAgICAgICBvblVwZGF0ZTogKCkgPT4gbnVsbCxcclxuICAgICAgICAgICAgb25TZWxlY3Rpb25VcGRhdGU6ICgpID0+IG51bGwsXHJcbiAgICAgICAgICAgIG9uVHJhbnNhY3Rpb246ICgpID0+IG51bGwsXHJcbiAgICAgICAgICAgIG9uRm9jdXM6ICgpID0+IG51bGwsXHJcbiAgICAgICAgICAgIG9uQmx1cjogKCkgPT4gbnVsbCxcclxuICAgICAgICAgICAgb25EZXN0cm95OiAoKSA9PiBudWxsLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5pc0NhcHR1cmluZ1RyYW5zYWN0aW9uID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5jYXB0dXJlZFRyYW5zYWN0aW9uID0gbnVsbDtcclxuICAgICAgICB0aGlzLnNldE9wdGlvbnMob3B0aW9ucyk7XHJcbiAgICAgICAgdGhpcy5jcmVhdGVFeHRlbnNpb25NYW5hZ2VyKCk7XHJcbiAgICAgICAgdGhpcy5jcmVhdGVDb21tYW5kTWFuYWdlcigpO1xyXG4gICAgICAgIHRoaXMuY3JlYXRlU2NoZW1hKCk7XHJcbiAgICAgICAgdGhpcy5vbignYmVmb3JlQ3JlYXRlJywgdGhpcy5vcHRpb25zLm9uQmVmb3JlQ3JlYXRlKTtcclxuICAgICAgICB0aGlzLmVtaXQoJ2JlZm9yZUNyZWF0ZScsIHsgZWRpdG9yOiB0aGlzIH0pO1xyXG4gICAgICAgIHRoaXMuY3JlYXRlVmlldygpO1xyXG4gICAgICAgIHRoaXMuaW5qZWN0Q1NTKCk7XHJcbiAgICAgICAgdGhpcy5vbignY3JlYXRlJywgdGhpcy5vcHRpb25zLm9uQ3JlYXRlKTtcclxuICAgICAgICB0aGlzLm9uKCd1cGRhdGUnLCB0aGlzLm9wdGlvbnMub25VcGRhdGUpO1xyXG4gICAgICAgIHRoaXMub24oJ3NlbGVjdGlvblVwZGF0ZScsIHRoaXMub3B0aW9ucy5vblNlbGVjdGlvblVwZGF0ZSk7XHJcbiAgICAgICAgdGhpcy5vbigndHJhbnNhY3Rpb24nLCB0aGlzLm9wdGlvbnMub25UcmFuc2FjdGlvbik7XHJcbiAgICAgICAgdGhpcy5vbignZm9jdXMnLCB0aGlzLm9wdGlvbnMub25Gb2N1cyk7XHJcbiAgICAgICAgdGhpcy5vbignYmx1cicsIHRoaXMub3B0aW9ucy5vbkJsdXIpO1xyXG4gICAgICAgIHRoaXMub24oJ2Rlc3Ryb3knLCB0aGlzLm9wdGlvbnMub25EZXN0cm95KTtcclxuICAgICAgICB3aW5kb3cuc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmlzRGVzdHJveWVkKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5jb21tYW5kcy5mb2N1cyh0aGlzLm9wdGlvbnMuYXV0b2ZvY3VzKTtcclxuICAgICAgICAgICAgdGhpcy5lbWl0KCdjcmVhdGUnLCB7IGVkaXRvcjogdGhpcyB9KTtcclxuICAgICAgICB9LCAwKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGUgZWRpdG9yIHN0b3JhZ2UuXHJcbiAgICAgKi9cclxuICAgIGdldCBzdG9yYWdlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmV4dGVuc2lvblN0b3JhZ2U7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEFuIG9iamVjdCBvZiBhbGwgcmVnaXN0ZXJlZCBjb21tYW5kcy5cclxuICAgICAqL1xyXG4gICAgZ2V0IGNvbW1hbmRzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbW1hbmRNYW5hZ2VyLmNvbW1hbmRzO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGUgYSBjb21tYW5kIGNoYWluIHRvIGNhbGwgbXVsdGlwbGUgY29tbWFuZHMgYXQgb25jZS5cclxuICAgICAqL1xyXG4gICAgY2hhaW4oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tbWFuZE1hbmFnZXIuY2hhaW4oKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ2hlY2sgaWYgYSBjb21tYW5kIG9yIGEgY29tbWFuZCBjaGFpbiBjYW4gYmUgZXhlY3V0ZWQuIFdpdGhvdXQgZXhlY3V0aW5nIGl0LlxyXG4gICAgICovXHJcbiAgICBjYW4oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tbWFuZE1hbmFnZXIuY2FuKCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEluamVjdCBDU1Mgc3R5bGVzLlxyXG4gICAgICovXHJcbiAgICBpbmplY3RDU1MoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5pbmplY3RDU1MgJiYgZG9jdW1lbnQpIHtcclxuICAgICAgICAgICAgdGhpcy5jc3MgPSBjcmVhdGVTdHlsZVRhZyhzdHlsZSwgdGhpcy5vcHRpb25zLmluamVjdE5vbmNlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFVwZGF0ZSBlZGl0b3Igb3B0aW9ucy5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBBIGxpc3Qgb2Ygb3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBzZXRPcHRpb25zKG9wdGlvbnMgPSB7fSkge1xyXG4gICAgICAgIHRoaXMub3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgLi4udGhpcy5vcHRpb25zLFxyXG4gICAgICAgICAgICAuLi5vcHRpb25zLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgaWYgKCF0aGlzLnZpZXcgfHwgIXRoaXMuc3RhdGUgfHwgdGhpcy5pc0Rlc3Ryb3llZCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZWRpdG9yUHJvcHMpIHtcclxuICAgICAgICAgICAgdGhpcy52aWV3LnNldFByb3BzKHRoaXMub3B0aW9ucy5lZGl0b3JQcm9wcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMudmlldy51cGRhdGVTdGF0ZSh0aGlzLnN0YXRlKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVXBkYXRlIGVkaXRhYmxlIHN0YXRlIG9mIHRoZSBlZGl0b3IuXHJcbiAgICAgKi9cclxuICAgIHNldEVkaXRhYmxlKGVkaXRhYmxlKSB7XHJcbiAgICAgICAgdGhpcy5zZXRPcHRpb25zKHsgZWRpdGFibGUgfSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgd2hldGhlciB0aGUgZWRpdG9yIGlzIGVkaXRhYmxlLlxyXG4gICAgICovXHJcbiAgICBnZXQgaXNFZGl0YWJsZSgpIHtcclxuICAgICAgICAvLyBzaW5jZSBwbHVnaW5zIGFyZSBhcHBsaWVkIGFmdGVyIGNyZWF0aW5nIHRoZSB2aWV3XHJcbiAgICAgICAgLy8gYGVkaXRhYmxlYCBpcyBhbHdheXMgYHRydWVgIGZvciBvbmUgdGljay5cclxuICAgICAgICAvLyB0aGF04oCZcyB3aHkgd2UgYWxzbyBoYXZlIHRvIGNoZWNrIGZvciBgb3B0aW9ucy5lZGl0YWJsZWBcclxuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmVkaXRhYmxlXHJcbiAgICAgICAgICAgICYmIHRoaXMudmlld1xyXG4gICAgICAgICAgICAmJiB0aGlzLnZpZXcuZWRpdGFibGU7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhlIGVkaXRvciBzdGF0ZS5cclxuICAgICAqL1xyXG4gICAgZ2V0IHN0YXRlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnZpZXcuc3RhdGU7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJlZ2lzdGVyIGEgUHJvc2VNaXJyb3IgcGx1Z2luLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBwbHVnaW4gQSBQcm9zZU1pcnJvciBwbHVnaW5cclxuICAgICAqIEBwYXJhbSBoYW5kbGVQbHVnaW5zIENvbnRyb2wgaG93IHRvIG1lcmdlIHRoZSBwbHVnaW4gaW50byB0aGUgZXhpc3RpbmcgcGx1Z2lucy5cclxuICAgICAqL1xyXG4gICAgcmVnaXN0ZXJQbHVnaW4ocGx1Z2luLCBoYW5kbGVQbHVnaW5zKSB7XHJcbiAgICAgICAgY29uc3QgcGx1Z2lucyA9IGlzRnVuY3Rpb24oaGFuZGxlUGx1Z2lucylcclxuICAgICAgICAgICAgPyBoYW5kbGVQbHVnaW5zKHBsdWdpbiwgWy4uLnRoaXMuc3RhdGUucGx1Z2luc10pXHJcbiAgICAgICAgICAgIDogWy4uLnRoaXMuc3RhdGUucGx1Z2lucywgcGx1Z2luXTtcclxuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMuc3RhdGUucmVjb25maWd1cmUoeyBwbHVnaW5zIH0pO1xyXG4gICAgICAgIHRoaXMudmlldy51cGRhdGVTdGF0ZShzdGF0ZSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFVucmVnaXN0ZXIgYSBQcm9zZU1pcnJvciBwbHVnaW4uXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIG5hbWVPclBsdWdpbktleSBUaGUgcGx1Z2lucyBuYW1lXHJcbiAgICAgKi9cclxuICAgIHVucmVnaXN0ZXJQbHVnaW4obmFtZU9yUGx1Z2luS2V5KSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNEZXN0cm95ZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBuYW1lID0gdHlwZW9mIG5hbWVPclBsdWdpbktleSA9PT0gJ3N0cmluZydcclxuICAgICAgICAgICAgPyBgJHtuYW1lT3JQbHVnaW5LZXl9JGBcclxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICA6IG5hbWVPclBsdWdpbktleS5rZXk7XHJcbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnN0YXRlLnJlY29uZmlndXJlKHtcclxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICBwbHVnaW5zOiB0aGlzLnN0YXRlLnBsdWdpbnMuZmlsdGVyKHBsdWdpbiA9PiAhcGx1Z2luLmtleS5zdGFydHNXaXRoKG5hbWUpKSxcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnZpZXcudXBkYXRlU3RhdGUoc3RhdGUpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGFuIGV4dGVuc2lvbiBtYW5hZ2VyLlxyXG4gICAgICovXHJcbiAgICBjcmVhdGVFeHRlbnNpb25NYW5hZ2VyKCkge1xyXG4gICAgICAgIGNvbnN0IGNvcmVFeHRlbnNpb25zID0gdGhpcy5vcHRpb25zLmVuYWJsZUNvcmVFeHRlbnNpb25zXHJcbiAgICAgICAgICAgID8gT2JqZWN0LnZhbHVlcyhleHRlbnNpb25zKVxyXG4gICAgICAgICAgICA6IFtdO1xyXG4gICAgICAgIGNvbnN0IGFsbEV4dGVuc2lvbnMgPSBbLi4uY29yZUV4dGVuc2lvbnMsIC4uLnRoaXMub3B0aW9ucy5leHRlbnNpb25zXS5maWx0ZXIoZXh0ZW5zaW9uID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIFsnZXh0ZW5zaW9uJywgJ25vZGUnLCAnbWFyayddLmluY2x1ZGVzKGV4dGVuc2lvbiA9PT0gbnVsbCB8fCBleHRlbnNpb24gPT09IHZvaWQgMCA/IHZvaWQgMCA6IGV4dGVuc2lvbi50eXBlKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmV4dGVuc2lvbk1hbmFnZXIgPSBuZXcgRXh0ZW5zaW9uTWFuYWdlcihhbGxFeHRlbnNpb25zLCB0aGlzKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhbiBjb21tYW5kIG1hbmFnZXIuXHJcbiAgICAgKi9cclxuICAgIGNyZWF0ZUNvbW1hbmRNYW5hZ2VyKCkge1xyXG4gICAgICAgIHRoaXMuY29tbWFuZE1hbmFnZXIgPSBuZXcgQ29tbWFuZE1hbmFnZXIoe1xyXG4gICAgICAgICAgICBlZGl0b3I6IHRoaXMsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBQcm9zZU1pcnJvciBzY2hlbWEuXHJcbiAgICAgKi9cclxuICAgIGNyZWF0ZVNjaGVtYSgpIHtcclxuICAgICAgICB0aGlzLnNjaGVtYSA9IHRoaXMuZXh0ZW5zaW9uTWFuYWdlci5zY2hlbWE7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBQcm9zZU1pcnJvciB2aWV3LlxyXG4gICAgICovXHJcbiAgICBjcmVhdGVWaWV3KCkge1xyXG4gICAgICAgIGNvbnN0IGRvYyA9IGNyZWF0ZURvY3VtZW50KHRoaXMub3B0aW9ucy5jb250ZW50LCB0aGlzLnNjaGVtYSwgdGhpcy5vcHRpb25zLnBhcnNlT3B0aW9ucyk7XHJcbiAgICAgICAgY29uc3Qgc2VsZWN0aW9uID0gcmVzb2x2ZUZvY3VzUG9zaXRpb24oZG9jLCB0aGlzLm9wdGlvbnMuYXV0b2ZvY3VzKTtcclxuICAgICAgICB0aGlzLnZpZXcgPSBuZXcgRWRpdG9yVmlldyh0aGlzLm9wdGlvbnMuZWxlbWVudCwge1xyXG4gICAgICAgICAgICAuLi50aGlzLm9wdGlvbnMuZWRpdG9yUHJvcHMsXHJcbiAgICAgICAgICAgIGRpc3BhdGNoVHJhbnNhY3Rpb246IHRoaXMuZGlzcGF0Y2hUcmFuc2FjdGlvbi5iaW5kKHRoaXMpLFxyXG4gICAgICAgICAgICBzdGF0ZTogRWRpdG9yU3RhdGUuY3JlYXRlKHtcclxuICAgICAgICAgICAgICAgIGRvYyxcclxuICAgICAgICAgICAgICAgIHNlbGVjdGlvbjogc2VsZWN0aW9uIHx8IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy8gYGVkaXRvci52aWV3YCBpcyBub3QgeWV0IGF2YWlsYWJsZSBhdCB0aGlzIHRpbWUuXHJcbiAgICAgICAgLy8gVGhlcmVmb3JlIHdlIHdpbGwgYWRkIGFsbCBwbHVnaW5zIGFuZCBub2RlIHZpZXdzIGRpcmVjdGx5IGFmdGVyd2FyZHMuXHJcbiAgICAgICAgY29uc3QgbmV3U3RhdGUgPSB0aGlzLnN0YXRlLnJlY29uZmlndXJlKHtcclxuICAgICAgICAgICAgcGx1Z2luczogdGhpcy5leHRlbnNpb25NYW5hZ2VyLnBsdWdpbnMsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy52aWV3LnVwZGF0ZVN0YXRlKG5ld1N0YXRlKTtcclxuICAgICAgICB0aGlzLmNyZWF0ZU5vZGVWaWV3cygpO1xyXG4gICAgICAgIC8vIExldOKAmXMgc3RvcmUgdGhlIGVkaXRvciBpbnN0YW5jZSBpbiB0aGUgRE9NIGVsZW1lbnQuXHJcbiAgICAgICAgLy8gU28gd2XigJlsbCBoYXZlIGFjY2VzcyB0byBpdCBmb3IgdGVzdHMuXHJcbiAgICAgICAgY29uc3QgZG9tID0gdGhpcy52aWV3LmRvbTtcclxuICAgICAgICBkb20uZWRpdG9yID0gdGhpcztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhbGwgbm9kZSB2aWV3cy5cclxuICAgICAqL1xyXG4gICAgY3JlYXRlTm9kZVZpZXdzKCkge1xyXG4gICAgICAgIHRoaXMudmlldy5zZXRQcm9wcyh7XHJcbiAgICAgICAgICAgIG5vZGVWaWV3czogdGhpcy5leHRlbnNpb25NYW5hZ2VyLm5vZGVWaWV3cyxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGNhcHR1cmVUcmFuc2FjdGlvbihmbikge1xyXG4gICAgICAgIHRoaXMuaXNDYXB0dXJpbmdUcmFuc2FjdGlvbiA9IHRydWU7XHJcbiAgICAgICAgZm4oKTtcclxuICAgICAgICB0aGlzLmlzQ2FwdHVyaW5nVHJhbnNhY3Rpb24gPSBmYWxzZTtcclxuICAgICAgICBjb25zdCB0ciA9IHRoaXMuY2FwdHVyZWRUcmFuc2FjdGlvbjtcclxuICAgICAgICB0aGlzLmNhcHR1cmVkVHJhbnNhY3Rpb24gPSBudWxsO1xyXG4gICAgICAgIHJldHVybiB0cjtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVGhlIGNhbGxiYWNrIG92ZXIgd2hpY2ggdG8gc2VuZCB0cmFuc2FjdGlvbnMgKHN0YXRlIHVwZGF0ZXMpIHByb2R1Y2VkIGJ5IHRoZSB2aWV3LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB0cmFuc2FjdGlvbiBBbiBlZGl0b3Igc3RhdGUgdHJhbnNhY3Rpb25cclxuICAgICAqL1xyXG4gICAgZGlzcGF0Y2hUcmFuc2FjdGlvbih0cmFuc2FjdGlvbikge1xyXG4gICAgICAgIGlmICh0aGlzLmlzQ2FwdHVyaW5nVHJhbnNhY3Rpb24pIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmNhcHR1cmVkVHJhbnNhY3Rpb24pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2FwdHVyZWRUcmFuc2FjdGlvbiA9IHRyYW5zYWN0aW9uO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRyYW5zYWN0aW9uLnN0ZXBzLmZvckVhY2goc3RlcCA9PiB7IHZhciBfYTsgcmV0dXJuIChfYSA9IHRoaXMuY2FwdHVyZWRUcmFuc2FjdGlvbikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnN0ZXAoc3RlcCk7IH0pO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5zdGF0ZS5hcHBseSh0cmFuc2FjdGlvbik7XHJcbiAgICAgICAgY29uc3Qgc2VsZWN0aW9uSGFzQ2hhbmdlZCA9ICF0aGlzLnN0YXRlLnNlbGVjdGlvbi5lcShzdGF0ZS5zZWxlY3Rpb24pO1xyXG4gICAgICAgIHRoaXMudmlldy51cGRhdGVTdGF0ZShzdGF0ZSk7XHJcbiAgICAgICAgdGhpcy5lbWl0KCd0cmFuc2FjdGlvbicsIHtcclxuICAgICAgICAgICAgZWRpdG9yOiB0aGlzLFxyXG4gICAgICAgICAgICB0cmFuc2FjdGlvbixcclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAoc2VsZWN0aW9uSGFzQ2hhbmdlZCkge1xyXG4gICAgICAgICAgICB0aGlzLmVtaXQoJ3NlbGVjdGlvblVwZGF0ZScsIHtcclxuICAgICAgICAgICAgICAgIGVkaXRvcjogdGhpcyxcclxuICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgZm9jdXMgPSB0cmFuc2FjdGlvbi5nZXRNZXRhKCdmb2N1cycpO1xyXG4gICAgICAgIGNvbnN0IGJsdXIgPSB0cmFuc2FjdGlvbi5nZXRNZXRhKCdibHVyJyk7XHJcbiAgICAgICAgaWYgKGZvY3VzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZW1pdCgnZm9jdXMnLCB7XHJcbiAgICAgICAgICAgICAgICBlZGl0b3I6IHRoaXMsXHJcbiAgICAgICAgICAgICAgICBldmVudDogZm9jdXMuZXZlbnQsXHJcbiAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbixcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChibHVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZW1pdCgnYmx1cicsIHtcclxuICAgICAgICAgICAgICAgIGVkaXRvcjogdGhpcyxcclxuICAgICAgICAgICAgICAgIGV2ZW50OiBibHVyLmV2ZW50LFxyXG4gICAgICAgICAgICAgICAgdHJhbnNhY3Rpb24sXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXRyYW5zYWN0aW9uLmRvY0NoYW5nZWQgfHwgdHJhbnNhY3Rpb24uZ2V0TWV0YSgncHJldmVudFVwZGF0ZScpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5lbWl0KCd1cGRhdGUnLCB7XHJcbiAgICAgICAgICAgIGVkaXRvcjogdGhpcyxcclxuICAgICAgICAgICAgdHJhbnNhY3Rpb24sXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEdldCBhdHRyaWJ1dGVzIG9mIHRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgbm9kZSBvciBtYXJrLlxyXG4gICAgICovXHJcbiAgICBnZXRBdHRyaWJ1dGVzKG5hbWVPclR5cGUpIHtcclxuICAgICAgICByZXR1cm4gZ2V0QXR0cmlidXRlcyh0aGlzLnN0YXRlLCBuYW1lT3JUeXBlKTtcclxuICAgIH1cclxuICAgIGlzQWN0aXZlKG5hbWVPckF0dHJpYnV0ZXMsIGF0dHJpYnV0ZXNPclVuZGVmaW5lZCkge1xyXG4gICAgICAgIGNvbnN0IG5hbWUgPSB0eXBlb2YgbmFtZU9yQXR0cmlidXRlcyA9PT0gJ3N0cmluZydcclxuICAgICAgICAgICAgPyBuYW1lT3JBdHRyaWJ1dGVzXHJcbiAgICAgICAgICAgIDogbnVsbDtcclxuICAgICAgICBjb25zdCBhdHRyaWJ1dGVzID0gdHlwZW9mIG5hbWVPckF0dHJpYnV0ZXMgPT09ICdzdHJpbmcnXHJcbiAgICAgICAgICAgID8gYXR0cmlidXRlc09yVW5kZWZpbmVkXHJcbiAgICAgICAgICAgIDogbmFtZU9yQXR0cmlidXRlcztcclxuICAgICAgICByZXR1cm4gaXNBY3RpdmUodGhpcy5zdGF0ZSwgbmFtZSwgYXR0cmlidXRlcyk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEdldCB0aGUgZG9jdW1lbnQgYXMgSlNPTi5cclxuICAgICAqL1xyXG4gICAgZ2V0SlNPTigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZS5kb2MudG9KU09OKCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEdldCB0aGUgZG9jdW1lbnQgYXMgSFRNTC5cclxuICAgICAqL1xyXG4gICAgZ2V0SFRNTCgpIHtcclxuICAgICAgICByZXR1cm4gZ2V0SFRNTEZyb21GcmFnbWVudCh0aGlzLnN0YXRlLmRvYy5jb250ZW50LCB0aGlzLnNjaGVtYSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEdldCB0aGUgZG9jdW1lbnQgYXMgdGV4dC5cclxuICAgICAqL1xyXG4gICAgZ2V0VGV4dChvcHRpb25zKSB7XHJcbiAgICAgICAgY29uc3QgeyBibG9ja1NlcGFyYXRvciA9ICdcXG5cXG4nLCB0ZXh0U2VyaWFsaXplcnMgPSB7fSwgfSA9IG9wdGlvbnMgfHwge307XHJcbiAgICAgICAgcmV0dXJuIGdldFRleHQodGhpcy5zdGF0ZS5kb2MsIHtcclxuICAgICAgICAgICAgYmxvY2tTZXBhcmF0b3IsXHJcbiAgICAgICAgICAgIHRleHRTZXJpYWxpemVyczoge1xyXG4gICAgICAgICAgICAgICAgLi4udGV4dFNlcmlhbGl6ZXJzLFxyXG4gICAgICAgICAgICAgICAgLi4uZ2V0VGV4dFNlcmlhbGl6ZXJzRnJvbVNjaGVtYSh0aGlzLnNjaGVtYSksXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENoZWNrIGlmIHRoZXJlIGlzIG5vIGNvbnRlbnQuXHJcbiAgICAgKi9cclxuICAgIGdldCBpc0VtcHR5KCkge1xyXG4gICAgICAgIHJldHVybiBpc05vZGVFbXB0eSh0aGlzLnN0YXRlLmRvYyk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEdldCB0aGUgbnVtYmVyIG9mIGNoYXJhY3RlcnMgZm9yIHRoZSBjdXJyZW50IGRvY3VtZW50LlxyXG4gICAgICpcclxuICAgICAqIEBkZXByZWNhdGVkXHJcbiAgICAgKi9cclxuICAgIGdldENoYXJhY3RlckNvdW50KCkge1xyXG4gICAgICAgIGNvbnNvbGUud2FybignW3RpcHRhcCB3YXJuXTogXCJlZGl0b3IuZ2V0Q2hhcmFjdGVyQ291bnQoKVwiIGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgXCJlZGl0b3Iuc3RvcmFnZS5jaGFyYWN0ZXJDb3VudC5jaGFyYWN0ZXJzKClcIiBpbnN0ZWFkLicpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnN0YXRlLmRvYy5jb250ZW50LnNpemUgLSAyO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBEZXN0cm95IHRoZSBlZGl0b3IuXHJcbiAgICAgKi9cclxuICAgIGRlc3Ryb3koKSB7XHJcbiAgICAgICAgdGhpcy5lbWl0KCdkZXN0cm95Jyk7XHJcbiAgICAgICAgaWYgKHRoaXMudmlldykge1xyXG4gICAgICAgICAgICB0aGlzLnZpZXcuZGVzdHJveSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDaGVjayBpZiB0aGUgZWRpdG9yIGlzIGFscmVhZHkgZGVzdHJveWVkLlxyXG4gICAgICovXHJcbiAgICBnZXQgaXNEZXN0cm95ZWQoKSB7XHJcbiAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICByZXR1cm4gISgoX2EgPSB0aGlzLnZpZXcpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5kb2NWaWV3KTtcclxuICAgIH1cclxufVxuXG4vKipcclxuICogUmV0dXJucyBhIG5ldyBgVHJhbnNmb3JtYCBiYXNlZCBvbiBhbGwgc3RlcHMgb2YgdGhlIHBhc3NlZCB0cmFuc2FjdGlvbnMuXHJcbiAqL1xyXG5mdW5jdGlvbiBjb21iaW5lVHJhbnNhY3Rpb25TdGVwcyhvbGREb2MsIHRyYW5zYWN0aW9ucykge1xyXG4gICAgY29uc3QgdHJhbnNmb3JtID0gbmV3IFRyYW5zZm9ybShvbGREb2MpO1xyXG4gICAgdHJhbnNhY3Rpb25zLmZvckVhY2godHJhbnNhY3Rpb24gPT4ge1xyXG4gICAgICAgIHRyYW5zYWN0aW9uLnN0ZXBzLmZvckVhY2goc3RlcCA9PiB7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybS5zdGVwKHN0ZXApO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gdHJhbnNmb3JtO1xyXG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRCbG9ja0F0KG1hdGNoKSB7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1hdGNoLmVkZ2VDb3VudDsgaSArPSAxKSB7XHJcbiAgICAgICAgY29uc3QgeyB0eXBlIH0gPSBtYXRjaC5lZGdlKGkpO1xyXG4gICAgICAgIGlmICh0eXBlLmlzVGV4dGJsb2NrICYmICF0eXBlLmhhc1JlcXVpcmVkQXR0cnMoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHlwZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxufVxuXG5mdW5jdGlvbiBmaW5kQ2hpbGRyZW4obm9kZSwgcHJlZGljYXRlKSB7XHJcbiAgICBjb25zdCBub2Rlc1dpdGhQb3MgPSBbXTtcclxuICAgIG5vZGUuZGVzY2VuZGFudHMoKGNoaWxkLCBwb3MpID0+IHtcclxuICAgICAgICBpZiAocHJlZGljYXRlKGNoaWxkKSkge1xyXG4gICAgICAgICAgICBub2Rlc1dpdGhQb3MucHVzaCh7XHJcbiAgICAgICAgICAgICAgICBub2RlOiBjaGlsZCxcclxuICAgICAgICAgICAgICAgIHBvcyxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gbm9kZXNXaXRoUG9zO1xyXG59XG5cbi8qKlxyXG4gKiBTYW1lIGFzIGBmaW5kQ2hpbGRyZW5gIGJ1dCBzZWFyY2hlcyBvbmx5IHdpdGhpbiBhIGByYW5nZWAuXHJcbiAqL1xyXG5mdW5jdGlvbiBmaW5kQ2hpbGRyZW5JblJhbmdlKG5vZGUsIHJhbmdlLCBwcmVkaWNhdGUpIHtcclxuICAgIGNvbnN0IG5vZGVzV2l0aFBvcyA9IFtdO1xyXG4gICAgLy8gaWYgKHJhbmdlLmZyb20gPT09IHJhbmdlLnRvKSB7XHJcbiAgICAvLyAgIGNvbnN0IG5vZGVBdCA9IG5vZGUubm9kZUF0KHJhbmdlLmZyb20pXHJcbiAgICAvLyAgIGlmIChub2RlQXQpIHtcclxuICAgIC8vICAgICBub2Rlc1dpdGhQb3MucHVzaCh7XHJcbiAgICAvLyAgICAgICBub2RlOiBub2RlQXQsXHJcbiAgICAvLyAgICAgICBwb3M6IHJhbmdlLmZyb20sXHJcbiAgICAvLyAgICAgfSlcclxuICAgIC8vICAgfVxyXG4gICAgLy8gfVxyXG4gICAgbm9kZS5ub2Rlc0JldHdlZW4ocmFuZ2UuZnJvbSwgcmFuZ2UudG8sIChjaGlsZCwgcG9zKSA9PiB7XHJcbiAgICAgICAgaWYgKHByZWRpY2F0ZShjaGlsZCkpIHtcclxuICAgICAgICAgICAgbm9kZXNXaXRoUG9zLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgbm9kZTogY2hpbGQsXHJcbiAgICAgICAgICAgICAgICBwb3MsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIG5vZGVzV2l0aFBvcztcclxufVxuXG5mdW5jdGlvbiBnZXRTY2hlbWEoZXh0ZW5zaW9ucykge1xyXG4gICAgY29uc3QgcmVzb2x2ZWRFeHRlbnNpb25zID0gRXh0ZW5zaW9uTWFuYWdlci5yZXNvbHZlKGV4dGVuc2lvbnMpO1xyXG4gICAgcmV0dXJuIGdldFNjaGVtYUJ5UmVzb2x2ZWRFeHRlbnNpb25zKHJlc29sdmVkRXh0ZW5zaW9ucyk7XHJcbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGVIVE1MKGRvYywgZXh0ZW5zaW9ucykge1xyXG4gICAgY29uc3Qgc2NoZW1hID0gZ2V0U2NoZW1hKGV4dGVuc2lvbnMpO1xyXG4gICAgY29uc3QgY29udGVudE5vZGUgPSBOb2RlJDEuZnJvbUpTT04oc2NoZW1hLCBkb2MpO1xyXG4gICAgcmV0dXJuIGdldEhUTUxGcm9tRnJhZ21lbnQoY29udGVudE5vZGUuY29udGVudCwgc2NoZW1hKTtcclxufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZUpTT04oaHRtbCwgZXh0ZW5zaW9ucykge1xyXG4gICAgY29uc3Qgc2NoZW1hID0gZ2V0U2NoZW1hKGV4dGVuc2lvbnMpO1xyXG4gICAgY29uc3QgZG9tID0gZWxlbWVudEZyb21TdHJpbmcoaHRtbCk7XHJcbiAgICByZXR1cm4gRE9NUGFyc2VyLmZyb21TY2hlbWEoc2NoZW1hKVxyXG4gICAgICAgIC5wYXJzZShkb20pXHJcbiAgICAgICAgLnRvSlNPTigpO1xyXG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlVGV4dChkb2MsIGV4dGVuc2lvbnMsIG9wdGlvbnMpIHtcclxuICAgIGNvbnN0IHsgYmxvY2tTZXBhcmF0b3IgPSAnXFxuXFxuJywgdGV4dFNlcmlhbGl6ZXJzID0ge30sIH0gPSBvcHRpb25zIHx8IHt9O1xyXG4gICAgY29uc3Qgc2NoZW1hID0gZ2V0U2NoZW1hKGV4dGVuc2lvbnMpO1xyXG4gICAgY29uc3QgY29udGVudE5vZGUgPSBOb2RlJDEuZnJvbUpTT04oc2NoZW1hLCBkb2MpO1xyXG4gICAgcmV0dXJuIGdldFRleHQoY29udGVudE5vZGUsIHtcclxuICAgICAgICBibG9ja1NlcGFyYXRvcixcclxuICAgICAgICB0ZXh0U2VyaWFsaXplcnM6IHtcclxuICAgICAgICAgICAgLi4udGV4dFNlcmlhbGl6ZXJzLFxyXG4gICAgICAgICAgICAuLi5nZXRUZXh0U2VyaWFsaXplcnNGcm9tU2NoZW1hKHNjaGVtYSksXHJcbiAgICAgICAgfSxcclxuICAgIH0pO1xyXG59XG5cbi8qKlxyXG4gKiBSZW1vdmVzIGR1cGxpY2F0ZWQgdmFsdWVzIHdpdGhpbiBhbiBhcnJheS5cclxuICogU3VwcG9ydHMgbnVtYmVycywgc3RyaW5ncyBhbmQgb2JqZWN0cy5cclxuICovXHJcbmZ1bmN0aW9uIHJlbW92ZUR1cGxpY2F0ZXMoYXJyYXksIGJ5ID0gSlNPTi5zdHJpbmdpZnkpIHtcclxuICAgIGNvbnN0IHNlZW4gPSB7fTtcclxuICAgIHJldHVybiBhcnJheS5maWx0ZXIoaXRlbSA9PiB7XHJcbiAgICAgICAgY29uc3Qga2V5ID0gYnkoaXRlbSk7XHJcbiAgICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzZWVuLCBrZXkpXHJcbiAgICAgICAgICAgID8gZmFsc2VcclxuICAgICAgICAgICAgOiAoc2VlbltrZXldID0gdHJ1ZSk7XHJcbiAgICB9KTtcclxufVxuXG4vKipcclxuICogUmVtb3ZlcyBkdXBsaWNhdGVkIHJhbmdlcyBhbmQgcmFuZ2VzIHRoYXQgYXJlXHJcbiAqIGZ1bGx5IGNhcHR1cmVkIGJ5IG90aGVyIHJhbmdlcy5cclxuICovXHJcbmZ1bmN0aW9uIHNpbXBsaWZ5Q2hhbmdlZFJhbmdlcyhjaGFuZ2VzKSB7XHJcbiAgICBjb25zdCB1bmlxdWVDaGFuZ2VzID0gcmVtb3ZlRHVwbGljYXRlcyhjaGFuZ2VzKTtcclxuICAgIHJldHVybiB1bmlxdWVDaGFuZ2VzLmxlbmd0aCA9PT0gMVxyXG4gICAgICAgID8gdW5pcXVlQ2hhbmdlc1xyXG4gICAgICAgIDogdW5pcXVlQ2hhbmdlcy5maWx0ZXIoKGNoYW5nZSwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgcmVzdCA9IHVuaXF1ZUNoYW5nZXMuZmlsdGVyKChfLCBpKSA9PiBpICE9PSBpbmRleCk7XHJcbiAgICAgICAgICAgIHJldHVybiAhcmVzdC5zb21lKG90aGVyQ2hhbmdlID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjaGFuZ2Uub2xkUmFuZ2UuZnJvbSA+PSBvdGhlckNoYW5nZS5vbGRSYW5nZS5mcm9tXHJcbiAgICAgICAgICAgICAgICAgICAgJiYgY2hhbmdlLm9sZFJhbmdlLnRvIDw9IG90aGVyQ2hhbmdlLm9sZFJhbmdlLnRvXHJcbiAgICAgICAgICAgICAgICAgICAgJiYgY2hhbmdlLm5ld1JhbmdlLmZyb20gPj0gb3RoZXJDaGFuZ2UubmV3UmFuZ2UuZnJvbVxyXG4gICAgICAgICAgICAgICAgICAgICYmIGNoYW5nZS5uZXdSYW5nZS50byA8PSBvdGhlckNoYW5nZS5uZXdSYW5nZS50bztcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybnMgYSBsaXN0IG9mIGNoYW5nZWQgcmFuZ2VzXHJcbiAqIGJhc2VkIG9uIHRoZSBmaXJzdCBhbmQgbGFzdCBzdGF0ZSBvZiBhbGwgc3RlcHMuXHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRDaGFuZ2VkUmFuZ2VzKHRyYW5zZm9ybSkge1xyXG4gICAgY29uc3QgeyBtYXBwaW5nLCBzdGVwcyB9ID0gdHJhbnNmb3JtO1xyXG4gICAgY29uc3QgY2hhbmdlcyA9IFtdO1xyXG4gICAgbWFwcGluZy5tYXBzLmZvckVhY2goKHN0ZXBNYXAsIGluZGV4KSA9PiB7XHJcbiAgICAgICAgY29uc3QgcmFuZ2VzID0gW107XHJcbiAgICAgICAgLy8gVGhpcyBhY2NvdW50cyBmb3Igc3RlcCBjaGFuZ2VzIHdoZXJlIG5vIHJhbmdlIHdhcyBhY3R1YWxseSBhbHRlcmVkXHJcbiAgICAgICAgLy8gZS5nLiB3aGVuIHNldHRpbmcgYSBtYXJrLCBub2RlIGF0dHJpYnV0ZSwgZXRjLlxyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBpZiAoIXN0ZXBNYXAucmFuZ2VzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBjb25zdCB7IGZyb20sIHRvIH0gPSBzdGVwc1tpbmRleF07XHJcbiAgICAgICAgICAgIGlmIChmcm9tID09PSB1bmRlZmluZWQgfHwgdG8gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJhbmdlcy5wdXNoKHsgZnJvbSwgdG8gfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBzdGVwTWFwLmZvckVhY2goKGZyb20sIHRvKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByYW5nZXMucHVzaCh7IGZyb20sIHRvIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmFuZ2VzLmZvckVhY2goKHsgZnJvbSwgdG8gfSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBuZXdTdGFydCA9IG1hcHBpbmcuc2xpY2UoaW5kZXgpLm1hcChmcm9tLCAtMSk7XHJcbiAgICAgICAgICAgIGNvbnN0IG5ld0VuZCA9IG1hcHBpbmcuc2xpY2UoaW5kZXgpLm1hcCh0byk7XHJcbiAgICAgICAgICAgIGNvbnN0IG9sZFN0YXJ0ID0gbWFwcGluZy5pbnZlcnQoKS5tYXAobmV3U3RhcnQsIC0xKTtcclxuICAgICAgICAgICAgY29uc3Qgb2xkRW5kID0gbWFwcGluZy5pbnZlcnQoKS5tYXAobmV3RW5kKTtcclxuICAgICAgICAgICAgY2hhbmdlcy5wdXNoKHtcclxuICAgICAgICAgICAgICAgIG9sZFJhbmdlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZnJvbTogb2xkU3RhcnQsXHJcbiAgICAgICAgICAgICAgICAgICAgdG86IG9sZEVuZCxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBuZXdSYW5nZToge1xyXG4gICAgICAgICAgICAgICAgICAgIGZyb206IG5ld1N0YXJ0LFxyXG4gICAgICAgICAgICAgICAgICAgIHRvOiBuZXdFbmQsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHNpbXBsaWZ5Q2hhbmdlZFJhbmdlcyhjaGFuZ2VzKTtcclxufVxuXG5mdW5jdGlvbiBnZXREZWJ1Z0pTT04obm9kZSwgc3RhcnRPZmZzZXQgPSAwKSB7XHJcbiAgICBjb25zdCBpc1RvcE5vZGUgPSBub2RlLnR5cGUgPT09IG5vZGUudHlwZS5zY2hlbWEudG9wTm9kZVR5cGU7XHJcbiAgICBjb25zdCBpbmNyZW1lbnQgPSBpc1RvcE5vZGUgPyAwIDogMTtcclxuICAgIGNvbnN0IGZyb20gPSBzdGFydE9mZnNldDtcclxuICAgIGNvbnN0IHRvID0gZnJvbSArIG5vZGUubm9kZVNpemU7XHJcbiAgICBjb25zdCBtYXJrcyA9IG5vZGUubWFya3MubWFwKG1hcmsgPT4ge1xyXG4gICAgICAgIGNvbnN0IG91dHB1dCA9IHtcclxuICAgICAgICAgICAgdHlwZTogbWFyay50eXBlLm5hbWUsXHJcbiAgICAgICAgfTtcclxuICAgICAgICBpZiAoT2JqZWN0LmtleXMobWFyay5hdHRycykubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIG91dHB1dC5hdHRycyA9IHsgLi4ubWFyay5hdHRycyB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gb3V0cHV0O1xyXG4gICAgfSk7XHJcbiAgICBjb25zdCBhdHRycyA9IHsgLi4ubm9kZS5hdHRycyB9O1xyXG4gICAgY29uc3Qgb3V0cHV0ID0ge1xyXG4gICAgICAgIHR5cGU6IG5vZGUudHlwZS5uYW1lLFxyXG4gICAgICAgIGZyb20sXHJcbiAgICAgICAgdG8sXHJcbiAgICB9O1xyXG4gICAgaWYgKE9iamVjdC5rZXlzKGF0dHJzKS5sZW5ndGgpIHtcclxuICAgICAgICBvdXRwdXQuYXR0cnMgPSBhdHRycztcclxuICAgIH1cclxuICAgIGlmIChtYXJrcy5sZW5ndGgpIHtcclxuICAgICAgICBvdXRwdXQubWFya3MgPSBtYXJrcztcclxuICAgIH1cclxuICAgIGlmIChub2RlLmNvbnRlbnQuY2hpbGRDb3VudCkge1xyXG4gICAgICAgIG91dHB1dC5jb250ZW50ID0gW107XHJcbiAgICAgICAgbm9kZS5mb3JFYWNoKChjaGlsZCwgb2Zmc2V0KSA9PiB7XHJcbiAgICAgICAgICAgIHZhciBfYTtcclxuICAgICAgICAgICAgKF9hID0gb3V0cHV0LmNvbnRlbnQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5wdXNoKGdldERlYnVnSlNPTihjaGlsZCwgc3RhcnRPZmZzZXQgKyBvZmZzZXQgKyBpbmNyZW1lbnQpKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGlmIChub2RlLnRleHQpIHtcclxuICAgICAgICBvdXRwdXQudGV4dCA9IG5vZGUudGV4dDtcclxuICAgIH1cclxuICAgIHJldHVybiBvdXRwdXQ7XHJcbn1cblxuZnVuY3Rpb24gZ2V0TWFya3NCZXR3ZWVuKGZyb20sIHRvLCBkb2MpIHtcclxuICAgIGNvbnN0IG1hcmtzID0gW107XHJcbiAgICAvLyBnZXQgYWxsIGluY2x1c2l2ZSBtYXJrcyBvbiBlbXB0eSBzZWxlY3Rpb25cclxuICAgIGlmIChmcm9tID09PSB0bykge1xyXG4gICAgICAgIGRvY1xyXG4gICAgICAgICAgICAucmVzb2x2ZShmcm9tKVxyXG4gICAgICAgICAgICAubWFya3MoKVxyXG4gICAgICAgICAgICAuZm9yRWFjaChtYXJrID0+IHtcclxuICAgICAgICAgICAgY29uc3QgJHBvcyA9IGRvYy5yZXNvbHZlKGZyb20gLSAxKTtcclxuICAgICAgICAgICAgY29uc3QgcmFuZ2UgPSBnZXRNYXJrUmFuZ2UoJHBvcywgbWFyay50eXBlKTtcclxuICAgICAgICAgICAgaWYgKCFyYW5nZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG1hcmtzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgbWFyayxcclxuICAgICAgICAgICAgICAgIC4uLnJhbmdlLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGRvYy5ub2Rlc0JldHdlZW4oZnJvbSwgdG8sIChub2RlLCBwb3MpID0+IHtcclxuICAgICAgICAgICAgbWFya3MucHVzaCguLi5ub2RlLm1hcmtzLm1hcChtYXJrID0+ICh7XHJcbiAgICAgICAgICAgICAgICBmcm9tOiBwb3MsXHJcbiAgICAgICAgICAgICAgICB0bzogcG9zICsgbm9kZS5ub2RlU2l6ZSxcclxuICAgICAgICAgICAgICAgIG1hcmssXHJcbiAgICAgICAgICAgIH0pKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbWFya3M7XHJcbn1cblxuZnVuY3Rpb24gaXNOb2RlU2VsZWN0aW9uKHZhbHVlKSB7XHJcbiAgICByZXR1cm4gaXNPYmplY3QodmFsdWUpICYmIHZhbHVlIGluc3RhbmNlb2YgTm9kZVNlbGVjdGlvbjtcclxufVxuXG5mdW5jdGlvbiBwb3NUb0RPTVJlY3QodmlldywgZnJvbSwgdG8pIHtcclxuICAgIGNvbnN0IG1pblBvcyA9IDA7XHJcbiAgICBjb25zdCBtYXhQb3MgPSB2aWV3LnN0YXRlLmRvYy5jb250ZW50LnNpemU7XHJcbiAgICBjb25zdCByZXNvbHZlZEZyb20gPSBtaW5NYXgoZnJvbSwgbWluUG9zLCBtYXhQb3MpO1xyXG4gICAgY29uc3QgcmVzb2x2ZWRFbmQgPSBtaW5NYXgodG8sIG1pblBvcywgbWF4UG9zKTtcclxuICAgIGNvbnN0IHN0YXJ0ID0gdmlldy5jb29yZHNBdFBvcyhyZXNvbHZlZEZyb20pO1xyXG4gICAgY29uc3QgZW5kID0gdmlldy5jb29yZHNBdFBvcyhyZXNvbHZlZEVuZCwgLTEpO1xyXG4gICAgY29uc3QgdG9wID0gTWF0aC5taW4oc3RhcnQudG9wLCBlbmQudG9wKTtcclxuICAgIGNvbnN0IGJvdHRvbSA9IE1hdGgubWF4KHN0YXJ0LmJvdHRvbSwgZW5kLmJvdHRvbSk7XHJcbiAgICBjb25zdCBsZWZ0ID0gTWF0aC5taW4oc3RhcnQubGVmdCwgZW5kLmxlZnQpO1xyXG4gICAgY29uc3QgcmlnaHQgPSBNYXRoLm1heChzdGFydC5yaWdodCwgZW5kLnJpZ2h0KTtcclxuICAgIGNvbnN0IHdpZHRoID0gcmlnaHQgLSBsZWZ0O1xyXG4gICAgY29uc3QgaGVpZ2h0ID0gYm90dG9tIC0gdG9wO1xyXG4gICAgY29uc3QgeCA9IGxlZnQ7XHJcbiAgICBjb25zdCB5ID0gdG9wO1xyXG4gICAgY29uc3QgZGF0YSA9IHtcclxuICAgICAgICB0b3AsXHJcbiAgICAgICAgYm90dG9tLFxyXG4gICAgICAgIGxlZnQsXHJcbiAgICAgICAgcmlnaHQsXHJcbiAgICAgICAgd2lkdGgsXHJcbiAgICAgICAgaGVpZ2h0LFxyXG4gICAgICAgIHgsXHJcbiAgICAgICAgeSxcclxuICAgIH07XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIC4uLmRhdGEsXHJcbiAgICAgICAgdG9KU09OOiAoKSA9PiBkYXRhLFxyXG4gICAgfTtcclxufVxuXG4vKipcclxuICogQnVpbGQgYW4gaW5wdXQgcnVsZSB0aGF0IGFkZHMgYSBtYXJrIHdoZW4gdGhlXHJcbiAqIG1hdGNoZWQgdGV4dCBpcyB0eXBlZCBpbnRvIGl0LlxyXG4gKi9cclxuZnVuY3Rpb24gbWFya0lucHV0UnVsZShjb25maWcpIHtcclxuICAgIHJldHVybiBuZXcgSW5wdXRSdWxlKHtcclxuICAgICAgICBmaW5kOiBjb25maWcuZmluZCxcclxuICAgICAgICBoYW5kbGVyOiAoeyBzdGF0ZSwgcmFuZ2UsIG1hdGNoIH0pID0+IHtcclxuICAgICAgICAgICAgY29uc3QgYXR0cmlidXRlcyA9IGNhbGxPclJldHVybihjb25maWcuZ2V0QXR0cmlidXRlcywgdW5kZWZpbmVkLCBtYXRjaCk7XHJcbiAgICAgICAgICAgIGlmIChhdHRyaWJ1dGVzID09PSBmYWxzZSB8fCBhdHRyaWJ1dGVzID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCB7IHRyIH0gPSBzdGF0ZTtcclxuICAgICAgICAgICAgY29uc3QgY2FwdHVyZUdyb3VwID0gbWF0Y2hbbWF0Y2gubGVuZ3RoIC0gMV07XHJcbiAgICAgICAgICAgIGNvbnN0IGZ1bGxNYXRjaCA9IG1hdGNoWzBdO1xyXG4gICAgICAgICAgICBsZXQgbWFya0VuZCA9IHJhbmdlLnRvO1xyXG4gICAgICAgICAgICBpZiAoY2FwdHVyZUdyb3VwKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzdGFydFNwYWNlcyA9IGZ1bGxNYXRjaC5zZWFyY2goL1xcUy8pO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdGV4dFN0YXJ0ID0gcmFuZ2UuZnJvbSArIGZ1bGxNYXRjaC5pbmRleE9mKGNhcHR1cmVHcm91cCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ZXh0RW5kID0gdGV4dFN0YXJ0ICsgY2FwdHVyZUdyb3VwLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGV4Y2x1ZGVkTWFya3MgPSBnZXRNYXJrc0JldHdlZW4ocmFuZ2UuZnJvbSwgcmFuZ2UudG8sIHN0YXRlLmRvYylcclxuICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKGl0ZW0gPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBleGNsdWRlZCA9IGl0ZW0ubWFyay50eXBlLmV4Y2x1ZGVkO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBleGNsdWRlZC5maW5kKHR5cGUgPT4gdHlwZSA9PT0gY29uZmlnLnR5cGUgJiYgdHlwZSAhPT0gaXRlbS5tYXJrLnR5cGUpO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKGl0ZW0gPT4gaXRlbS50byA+IHRleHRTdGFydCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXhjbHVkZWRNYXJrcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0ZXh0RW5kIDwgcmFuZ2UudG8pIHtcclxuICAgICAgICAgICAgICAgICAgICB0ci5kZWxldGUodGV4dEVuZCwgcmFuZ2UudG8pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRleHRTdGFydCA+IHJhbmdlLmZyb20pIHtcclxuICAgICAgICAgICAgICAgICAgICB0ci5kZWxldGUocmFuZ2UuZnJvbSArIHN0YXJ0U3BhY2VzLCB0ZXh0U3RhcnQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgbWFya0VuZCA9IHJhbmdlLmZyb20gKyBzdGFydFNwYWNlcyArIGNhcHR1cmVHcm91cC5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICB0ci5hZGRNYXJrKHJhbmdlLmZyb20gKyBzdGFydFNwYWNlcywgbWFya0VuZCwgY29uZmlnLnR5cGUuY3JlYXRlKGF0dHJpYnV0ZXMgfHwge30pKTtcclxuICAgICAgICAgICAgICAgIHRyLnJlbW92ZVN0b3JlZE1hcmsoY29uZmlnLnR5cGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgIH0pO1xyXG59XG5cbi8qKlxyXG4gKiBCdWlsZCBhbiBpbnB1dCBydWxlIHRoYXQgYWRkcyBhIG5vZGUgd2hlbiB0aGVcclxuICogbWF0Y2hlZCB0ZXh0IGlzIHR5cGVkIGludG8gaXQuXHJcbiAqL1xyXG5mdW5jdGlvbiBub2RlSW5wdXRSdWxlKGNvbmZpZykge1xyXG4gICAgcmV0dXJuIG5ldyBJbnB1dFJ1bGUoe1xyXG4gICAgICAgIGZpbmQ6IGNvbmZpZy5maW5kLFxyXG4gICAgICAgIGhhbmRsZXI6ICh7IHN0YXRlLCByYW5nZSwgbWF0Y2ggfSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBhdHRyaWJ1dGVzID0gY2FsbE9yUmV0dXJuKGNvbmZpZy5nZXRBdHRyaWJ1dGVzLCB1bmRlZmluZWQsIG1hdGNoKSB8fCB7fTtcclxuICAgICAgICAgICAgY29uc3QgeyB0ciB9ID0gc3RhdGU7XHJcbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0ID0gcmFuZ2UuZnJvbTtcclxuICAgICAgICAgICAgbGV0IGVuZCA9IHJhbmdlLnRvO1xyXG4gICAgICAgICAgICBpZiAobWF0Y2hbMV0pIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG9mZnNldCA9IG1hdGNoWzBdLmxhc3RJbmRleE9mKG1hdGNoWzFdKTtcclxuICAgICAgICAgICAgICAgIGxldCBtYXRjaFN0YXJ0ID0gc3RhcnQgKyBvZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICBpZiAobWF0Y2hTdGFydCA+IGVuZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG1hdGNoU3RhcnQgPSBlbmQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBlbmQgPSBtYXRjaFN0YXJ0ICsgbWF0Y2hbMV0ubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gaW5zZXJ0IGxhc3QgdHlwZWQgY2hhcmFjdGVyXHJcbiAgICAgICAgICAgICAgICBjb25zdCBsYXN0Q2hhciA9IG1hdGNoWzBdW21hdGNoWzBdLmxlbmd0aCAtIDFdO1xyXG4gICAgICAgICAgICAgICAgdHIuaW5zZXJ0VGV4dChsYXN0Q2hhciwgc3RhcnQgKyBtYXRjaFswXS5sZW5ndGggLSAxKTtcclxuICAgICAgICAgICAgICAgIC8vIGluc2VydCBub2RlIGZyb20gaW5wdXQgcnVsZVxyXG4gICAgICAgICAgICAgICAgdHIucmVwbGFjZVdpdGgobWF0Y2hTdGFydCwgZW5kLCBjb25maWcudHlwZS5jcmVhdGUoYXR0cmlidXRlcykpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKG1hdGNoWzBdKSB7XHJcbiAgICAgICAgICAgICAgICB0ci5yZXBsYWNlV2l0aChzdGFydCwgZW5kLCBjb25maWcudHlwZS5jcmVhdGUoYXR0cmlidXRlcykpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgIH0pO1xyXG59XG5cbi8qKlxyXG4gKiBCdWlsZCBhbiBpbnB1dCBydWxlIHRoYXQgY2hhbmdlcyB0aGUgdHlwZSBvZiBhIHRleHRibG9jayB3aGVuIHRoZVxyXG4gKiBtYXRjaGVkIHRleHQgaXMgdHlwZWQgaW50byBpdC4gV2hlbiB1c2luZyBhIHJlZ3VsYXIgZXhwcmVzaW9uIHlvdeKAmWxsXHJcbiAqIHByb2JhYmx5IHdhbnQgdGhlIHJlZ2V4cCB0byBzdGFydCB3aXRoIGBeYCwgc28gdGhhdCB0aGUgcGF0dGVybiBjYW5cclxuICogb25seSBvY2N1ciBhdCB0aGUgc3RhcnQgb2YgYSB0ZXh0YmxvY2suXHJcbiAqL1xyXG5mdW5jdGlvbiB0ZXh0YmxvY2tUeXBlSW5wdXRSdWxlKGNvbmZpZykge1xyXG4gICAgcmV0dXJuIG5ldyBJbnB1dFJ1bGUoe1xyXG4gICAgICAgIGZpbmQ6IGNvbmZpZy5maW5kLFxyXG4gICAgICAgIGhhbmRsZXI6ICh7IHN0YXRlLCByYW5nZSwgbWF0Y2ggfSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCAkc3RhcnQgPSBzdGF0ZS5kb2MucmVzb2x2ZShyYW5nZS5mcm9tKTtcclxuICAgICAgICAgICAgY29uc3QgYXR0cmlidXRlcyA9IGNhbGxPclJldHVybihjb25maWcuZ2V0QXR0cmlidXRlcywgdW5kZWZpbmVkLCBtYXRjaCkgfHwge307XHJcbiAgICAgICAgICAgIGlmICghJHN0YXJ0Lm5vZGUoLTEpLmNhblJlcGxhY2VXaXRoKCRzdGFydC5pbmRleCgtMSksICRzdGFydC5pbmRleEFmdGVyKC0xKSwgY29uZmlnLnR5cGUpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzdGF0ZS50clxyXG4gICAgICAgICAgICAgICAgLmRlbGV0ZShyYW5nZS5mcm9tLCByYW5nZS50bylcclxuICAgICAgICAgICAgICAgIC5zZXRCbG9ja1R5cGUocmFuZ2UuZnJvbSwgcmFuZ2UuZnJvbSwgY29uZmlnLnR5cGUsIGF0dHJpYnV0ZXMpO1xyXG4gICAgICAgIH0sXHJcbiAgICB9KTtcclxufVxuXG4vKipcclxuICogQnVpbGQgYW4gaW5wdXQgcnVsZSB0aGF0IHJlcGxhY2VzIHRleHQgd2hlbiB0aGVcclxuICogbWF0Y2hlZCB0ZXh0IGlzIHR5cGVkIGludG8gaXQuXHJcbiAqL1xyXG5mdW5jdGlvbiB0ZXh0SW5wdXRSdWxlKGNvbmZpZykge1xyXG4gICAgcmV0dXJuIG5ldyBJbnB1dFJ1bGUoe1xyXG4gICAgICAgIGZpbmQ6IGNvbmZpZy5maW5kLFxyXG4gICAgICAgIGhhbmRsZXI6ICh7IHN0YXRlLCByYW5nZSwgbWF0Y2ggfSkgPT4ge1xyXG4gICAgICAgICAgICBsZXQgaW5zZXJ0ID0gY29uZmlnLnJlcGxhY2U7XHJcbiAgICAgICAgICAgIGxldCBzdGFydCA9IHJhbmdlLmZyb207XHJcbiAgICAgICAgICAgIGNvbnN0IGVuZCA9IHJhbmdlLnRvO1xyXG4gICAgICAgICAgICBpZiAobWF0Y2hbMV0pIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG9mZnNldCA9IG1hdGNoWzBdLmxhc3RJbmRleE9mKG1hdGNoWzFdKTtcclxuICAgICAgICAgICAgICAgIGluc2VydCArPSBtYXRjaFswXS5zbGljZShvZmZzZXQgKyBtYXRjaFsxXS5sZW5ndGgpO1xyXG4gICAgICAgICAgICAgICAgc3RhcnQgKz0gb2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY3V0T2ZmID0gc3RhcnQgLSBlbmQ7XHJcbiAgICAgICAgICAgICAgICBpZiAoY3V0T2ZmID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGluc2VydCA9IG1hdGNoWzBdLnNsaWNlKG9mZnNldCAtIGN1dE9mZiwgb2Zmc2V0KSArIGluc2VydDtcclxuICAgICAgICAgICAgICAgICAgICBzdGFydCA9IGVuZDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzdGF0ZS50ci5pbnNlcnRUZXh0KGluc2VydCwgc3RhcnQsIGVuZCk7XHJcbiAgICAgICAgfSxcclxuICAgIH0pO1xyXG59XG5cbi8qKlxyXG4gKiBCdWlsZCBhbiBpbnB1dCBydWxlIGZvciBhdXRvbWF0aWNhbGx5IHdyYXBwaW5nIGEgdGV4dGJsb2NrIHdoZW4gYVxyXG4gKiBnaXZlbiBzdHJpbmcgaXMgdHlwZWQuIFdoZW4gdXNpbmcgYSByZWd1bGFyIGV4cHJlc2lvbiB5b3XigJlsbFxyXG4gKiBwcm9iYWJseSB3YW50IHRoZSByZWdleHAgdG8gc3RhcnQgd2l0aCBgXmAsIHNvIHRoYXQgdGhlIHBhdHRlcm4gY2FuXHJcbiAqIG9ubHkgb2NjdXIgYXQgdGhlIHN0YXJ0IG9mIGEgdGV4dGJsb2NrLlxyXG4gKlxyXG4gKiBgdHlwZWAgaXMgdGhlIHR5cGUgb2Ygbm9kZSB0byB3cmFwIGluLlxyXG4gKlxyXG4gKiBCeSBkZWZhdWx0LCBpZiB0aGVyZeKAmXMgYSBub2RlIHdpdGggdGhlIHNhbWUgdHlwZSBhYm92ZSB0aGUgbmV3bHlcclxuICogd3JhcHBlZCBub2RlLCB0aGUgcnVsZSB3aWxsIHRyeSB0byBqb2luIHRob3NlXHJcbiAqIHR3byBub2Rlcy4gWW91IGNhbiBwYXNzIGEgam9pbiBwcmVkaWNhdGUsIHdoaWNoIHRha2VzIGEgcmVndWxhclxyXG4gKiBleHByZXNzaW9uIG1hdGNoIGFuZCB0aGUgbm9kZSBiZWZvcmUgdGhlIHdyYXBwZWQgbm9kZSwgYW5kIGNhblxyXG4gKiByZXR1cm4gYSBib29sZWFuIHRvIGluZGljYXRlIHdoZXRoZXIgYSBqb2luIHNob3VsZCBoYXBwZW4uXHJcbiAqL1xyXG5mdW5jdGlvbiB3cmFwcGluZ0lucHV0UnVsZShjb25maWcpIHtcclxuICAgIHJldHVybiBuZXcgSW5wdXRSdWxlKHtcclxuICAgICAgICBmaW5kOiBjb25maWcuZmluZCxcclxuICAgICAgICBoYW5kbGVyOiAoeyBzdGF0ZSwgcmFuZ2UsIG1hdGNoIH0pID0+IHtcclxuICAgICAgICAgICAgY29uc3QgYXR0cmlidXRlcyA9IGNhbGxPclJldHVybihjb25maWcuZ2V0QXR0cmlidXRlcywgdW5kZWZpbmVkLCBtYXRjaCkgfHwge307XHJcbiAgICAgICAgICAgIGNvbnN0IHRyID0gc3RhdGUudHIuZGVsZXRlKHJhbmdlLmZyb20sIHJhbmdlLnRvKTtcclxuICAgICAgICAgICAgY29uc3QgJHN0YXJ0ID0gdHIuZG9jLnJlc29sdmUocmFuZ2UuZnJvbSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGJsb2NrUmFuZ2UgPSAkc3RhcnQuYmxvY2tSYW5nZSgpO1xyXG4gICAgICAgICAgICBjb25zdCB3cmFwcGluZyA9IGJsb2NrUmFuZ2UgJiYgZmluZFdyYXBwaW5nKGJsb2NrUmFuZ2UsIGNvbmZpZy50eXBlLCBhdHRyaWJ1dGVzKTtcclxuICAgICAgICAgICAgaWYgKCF3cmFwcGluZykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdHIud3JhcChibG9ja1JhbmdlLCB3cmFwcGluZyk7XHJcbiAgICAgICAgICAgIGNvbnN0IGJlZm9yZSA9IHRyLmRvYy5yZXNvbHZlKHJhbmdlLmZyb20gLSAxKS5ub2RlQmVmb3JlO1xyXG4gICAgICAgICAgICBpZiAoYmVmb3JlXHJcbiAgICAgICAgICAgICAgICAmJiBiZWZvcmUudHlwZSA9PT0gY29uZmlnLnR5cGVcclxuICAgICAgICAgICAgICAgICYmIGNhbkpvaW4odHIuZG9jLCByYW5nZS5mcm9tIC0gMSlcclxuICAgICAgICAgICAgICAgICYmICghY29uZmlnLmpvaW5QcmVkaWNhdGUgfHwgY29uZmlnLmpvaW5QcmVkaWNhdGUobWF0Y2gsIGJlZm9yZSkpKSB7XHJcbiAgICAgICAgICAgICAgICB0ci5qb2luKHJhbmdlLmZyb20gLSAxKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICB9KTtcclxufVxuXG5jbGFzcyBNYXJrIHtcclxuICAgIGNvbnN0cnVjdG9yKGNvbmZpZyA9IHt9KSB7XHJcbiAgICAgICAgdGhpcy50eXBlID0gJ21hcmsnO1xyXG4gICAgICAgIHRoaXMubmFtZSA9ICdtYXJrJztcclxuICAgICAgICB0aGlzLnBhcmVudCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5jaGlsZCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5jb25maWcgPSB7XHJcbiAgICAgICAgICAgIG5hbWU6IHRoaXMubmFtZSxcclxuICAgICAgICAgICAgZGVmYXVsdE9wdGlvbnM6IHt9LFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5jb25maWcgPSB7XHJcbiAgICAgICAgICAgIC4uLnRoaXMuY29uZmlnLFxyXG4gICAgICAgICAgICAuLi5jb25maWcsXHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLm5hbWUgPSB0aGlzLmNvbmZpZy5uYW1lO1xyXG4gICAgICAgIGlmIChjb25maWcuZGVmYXVsdE9wdGlvbnMpIHtcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKGBbdGlwdGFwIHdhcm5dOiBCUkVBS0lORyBDSEFOR0U6IFwiZGVmYXVsdE9wdGlvbnNcIiBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIFwiYWRkT3B0aW9uc1wiIGluc3RlYWQuIEZvdW5kIGluIGV4dGVuc2lvbjogXCIke3RoaXMubmFtZX1cIi5gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gVE9ETzogcmVtb3ZlIGBhZGRPcHRpb25zYCBmYWxsYmFja1xyXG4gICAgICAgIHRoaXMub3B0aW9ucyA9IHRoaXMuY29uZmlnLmRlZmF1bHRPcHRpb25zO1xyXG4gICAgICAgIGlmICh0aGlzLmNvbmZpZy5hZGRPcHRpb25zKSB7XHJcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucyA9IGNhbGxPclJldHVybihnZXRFeHRlbnNpb25GaWVsZCh0aGlzLCAnYWRkT3B0aW9ucycsIHtcclxuICAgICAgICAgICAgICAgIG5hbWU6IHRoaXMubmFtZSxcclxuICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnN0b3JhZ2UgPSBjYWxsT3JSZXR1cm4oZ2V0RXh0ZW5zaW9uRmllbGQodGhpcywgJ2FkZFN0b3JhZ2UnLCB7XHJcbiAgICAgICAgICAgIG5hbWU6IHRoaXMubmFtZSxcclxuICAgICAgICAgICAgb3B0aW9uczogdGhpcy5vcHRpb25zLFxyXG4gICAgICAgIH0pKSB8fCB7fTtcclxuICAgIH1cclxuICAgIHN0YXRpYyBjcmVhdGUoY29uZmlnID0ge30pIHtcclxuICAgICAgICByZXR1cm4gbmV3IE1hcmsoY29uZmlnKTtcclxuICAgIH1cclxuICAgIGNvbmZpZ3VyZShvcHRpb25zID0ge30pIHtcclxuICAgICAgICAvLyByZXR1cm4gYSBuZXcgaW5zdGFuY2Ugc28gd2UgY2FuIHVzZSB0aGUgc2FtZSBleHRlbnNpb25cclxuICAgICAgICAvLyB3aXRoIGRpZmZlcmVudCBjYWxscyBvZiBgY29uZmlndXJlYFxyXG4gICAgICAgIGNvbnN0IGV4dGVuc2lvbiA9IHRoaXMuZXh0ZW5kKCk7XHJcbiAgICAgICAgZXh0ZW5zaW9uLm9wdGlvbnMgPSBtZXJnZURlZXAodGhpcy5vcHRpb25zLCBvcHRpb25zKTtcclxuICAgICAgICBleHRlbnNpb24uc3RvcmFnZSA9IGNhbGxPclJldHVybihnZXRFeHRlbnNpb25GaWVsZChleHRlbnNpb24sICdhZGRTdG9yYWdlJywge1xyXG4gICAgICAgICAgICBuYW1lOiBleHRlbnNpb24ubmFtZSxcclxuICAgICAgICAgICAgb3B0aW9uczogZXh0ZW5zaW9uLm9wdGlvbnMsXHJcbiAgICAgICAgfSkpO1xyXG4gICAgICAgIHJldHVybiBleHRlbnNpb247XHJcbiAgICB9XHJcbiAgICBleHRlbmQoZXh0ZW5kZWRDb25maWcgPSB7fSkge1xyXG4gICAgICAgIGNvbnN0IGV4dGVuc2lvbiA9IG5ldyBNYXJrKGV4dGVuZGVkQ29uZmlnKTtcclxuICAgICAgICBleHRlbnNpb24ucGFyZW50ID0gdGhpcztcclxuICAgICAgICB0aGlzLmNoaWxkID0gZXh0ZW5zaW9uO1xyXG4gICAgICAgIGV4dGVuc2lvbi5uYW1lID0gZXh0ZW5kZWRDb25maWcubmFtZVxyXG4gICAgICAgICAgICA/IGV4dGVuZGVkQ29uZmlnLm5hbWVcclxuICAgICAgICAgICAgOiBleHRlbnNpb24ucGFyZW50Lm5hbWU7XHJcbiAgICAgICAgaWYgKGV4dGVuZGVkQ29uZmlnLmRlZmF1bHRPcHRpb25zKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgW3RpcHRhcCB3YXJuXTogQlJFQUtJTkcgQ0hBTkdFOiBcImRlZmF1bHRPcHRpb25zXCIgaXMgZGVwcmVjYXRlZC4gUGxlYXNlIHVzZSBcImFkZE9wdGlvbnNcIiBpbnN0ZWFkLiBGb3VuZCBpbiBleHRlbnNpb246IFwiJHtleHRlbnNpb24ubmFtZX1cIi5gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZXh0ZW5zaW9uLm9wdGlvbnMgPSBjYWxsT3JSZXR1cm4oZ2V0RXh0ZW5zaW9uRmllbGQoZXh0ZW5zaW9uLCAnYWRkT3B0aW9ucycsIHtcclxuICAgICAgICAgICAgbmFtZTogZXh0ZW5zaW9uLm5hbWUsXHJcbiAgICAgICAgfSkpO1xyXG4gICAgICAgIGV4dGVuc2lvbi5zdG9yYWdlID0gY2FsbE9yUmV0dXJuKGdldEV4dGVuc2lvbkZpZWxkKGV4dGVuc2lvbiwgJ2FkZFN0b3JhZ2UnLCB7XHJcbiAgICAgICAgICAgIG5hbWU6IGV4dGVuc2lvbi5uYW1lLFxyXG4gICAgICAgICAgICBvcHRpb25zOiBleHRlbnNpb24ub3B0aW9ucyxcclxuICAgICAgICB9KSk7XHJcbiAgICAgICAgcmV0dXJuIGV4dGVuc2lvbjtcclxuICAgIH1cclxufVxuXG5jbGFzcyBOb2RlIHtcclxuICAgIGNvbnN0cnVjdG9yKGNvbmZpZyA9IHt9KSB7XHJcbiAgICAgICAgdGhpcy50eXBlID0gJ25vZGUnO1xyXG4gICAgICAgIHRoaXMubmFtZSA9ICdub2RlJztcclxuICAgICAgICB0aGlzLnBhcmVudCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5jaGlsZCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5jb25maWcgPSB7XHJcbiAgICAgICAgICAgIG5hbWU6IHRoaXMubmFtZSxcclxuICAgICAgICAgICAgZGVmYXVsdE9wdGlvbnM6IHt9LFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5jb25maWcgPSB7XHJcbiAgICAgICAgICAgIC4uLnRoaXMuY29uZmlnLFxyXG4gICAgICAgICAgICAuLi5jb25maWcsXHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLm5hbWUgPSB0aGlzLmNvbmZpZy5uYW1lO1xyXG4gICAgICAgIGlmIChjb25maWcuZGVmYXVsdE9wdGlvbnMpIHtcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKGBbdGlwdGFwIHdhcm5dOiBCUkVBS0lORyBDSEFOR0U6IFwiZGVmYXVsdE9wdGlvbnNcIiBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIFwiYWRkT3B0aW9uc1wiIGluc3RlYWQuIEZvdW5kIGluIGV4dGVuc2lvbjogXCIke3RoaXMubmFtZX1cIi5gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gVE9ETzogcmVtb3ZlIGBhZGRPcHRpb25zYCBmYWxsYmFja1xyXG4gICAgICAgIHRoaXMub3B0aW9ucyA9IHRoaXMuY29uZmlnLmRlZmF1bHRPcHRpb25zO1xyXG4gICAgICAgIGlmICh0aGlzLmNvbmZpZy5hZGRPcHRpb25zKSB7XHJcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucyA9IGNhbGxPclJldHVybihnZXRFeHRlbnNpb25GaWVsZCh0aGlzLCAnYWRkT3B0aW9ucycsIHtcclxuICAgICAgICAgICAgICAgIG5hbWU6IHRoaXMubmFtZSxcclxuICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnN0b3JhZ2UgPSBjYWxsT3JSZXR1cm4oZ2V0RXh0ZW5zaW9uRmllbGQodGhpcywgJ2FkZFN0b3JhZ2UnLCB7XHJcbiAgICAgICAgICAgIG5hbWU6IHRoaXMubmFtZSxcclxuICAgICAgICAgICAgb3B0aW9uczogdGhpcy5vcHRpb25zLFxyXG4gICAgICAgIH0pKSB8fCB7fTtcclxuICAgIH1cclxuICAgIHN0YXRpYyBjcmVhdGUoY29uZmlnID0ge30pIHtcclxuICAgICAgICByZXR1cm4gbmV3IE5vZGUoY29uZmlnKTtcclxuICAgIH1cclxuICAgIGNvbmZpZ3VyZShvcHRpb25zID0ge30pIHtcclxuICAgICAgICAvLyByZXR1cm4gYSBuZXcgaW5zdGFuY2Ugc28gd2UgY2FuIHVzZSB0aGUgc2FtZSBleHRlbnNpb25cclxuICAgICAgICAvLyB3aXRoIGRpZmZlcmVudCBjYWxscyBvZiBgY29uZmlndXJlYFxyXG4gICAgICAgIGNvbnN0IGV4dGVuc2lvbiA9IHRoaXMuZXh0ZW5kKCk7XHJcbiAgICAgICAgZXh0ZW5zaW9uLm9wdGlvbnMgPSBtZXJnZURlZXAodGhpcy5vcHRpb25zLCBvcHRpb25zKTtcclxuICAgICAgICBleHRlbnNpb24uc3RvcmFnZSA9IGNhbGxPclJldHVybihnZXRFeHRlbnNpb25GaWVsZChleHRlbnNpb24sICdhZGRTdG9yYWdlJywge1xyXG4gICAgICAgICAgICBuYW1lOiBleHRlbnNpb24ubmFtZSxcclxuICAgICAgICAgICAgb3B0aW9uczogZXh0ZW5zaW9uLm9wdGlvbnMsXHJcbiAgICAgICAgfSkpO1xyXG4gICAgICAgIHJldHVybiBleHRlbnNpb247XHJcbiAgICB9XHJcbiAgICBleHRlbmQoZXh0ZW5kZWRDb25maWcgPSB7fSkge1xyXG4gICAgICAgIGNvbnN0IGV4dGVuc2lvbiA9IG5ldyBOb2RlKGV4dGVuZGVkQ29uZmlnKTtcclxuICAgICAgICBleHRlbnNpb24ucGFyZW50ID0gdGhpcztcclxuICAgICAgICB0aGlzLmNoaWxkID0gZXh0ZW5zaW9uO1xyXG4gICAgICAgIGV4dGVuc2lvbi5uYW1lID0gZXh0ZW5kZWRDb25maWcubmFtZVxyXG4gICAgICAgICAgICA/IGV4dGVuZGVkQ29uZmlnLm5hbWVcclxuICAgICAgICAgICAgOiBleHRlbnNpb24ucGFyZW50Lm5hbWU7XHJcbiAgICAgICAgaWYgKGV4dGVuZGVkQ29uZmlnLmRlZmF1bHRPcHRpb25zKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgW3RpcHRhcCB3YXJuXTogQlJFQUtJTkcgQ0hBTkdFOiBcImRlZmF1bHRPcHRpb25zXCIgaXMgZGVwcmVjYXRlZC4gUGxlYXNlIHVzZSBcImFkZE9wdGlvbnNcIiBpbnN0ZWFkLiBGb3VuZCBpbiBleHRlbnNpb246IFwiJHtleHRlbnNpb24ubmFtZX1cIi5gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZXh0ZW5zaW9uLm9wdGlvbnMgPSBjYWxsT3JSZXR1cm4oZ2V0RXh0ZW5zaW9uRmllbGQoZXh0ZW5zaW9uLCAnYWRkT3B0aW9ucycsIHtcclxuICAgICAgICAgICAgbmFtZTogZXh0ZW5zaW9uLm5hbWUsXHJcbiAgICAgICAgfSkpO1xyXG4gICAgICAgIGV4dGVuc2lvbi5zdG9yYWdlID0gY2FsbE9yUmV0dXJuKGdldEV4dGVuc2lvbkZpZWxkKGV4dGVuc2lvbiwgJ2FkZFN0b3JhZ2UnLCB7XHJcbiAgICAgICAgICAgIG5hbWU6IGV4dGVuc2lvbi5uYW1lLFxyXG4gICAgICAgICAgICBvcHRpb25zOiBleHRlbnNpb24ub3B0aW9ucyxcclxuICAgICAgICB9KSk7XHJcbiAgICAgICAgcmV0dXJuIGV4dGVuc2lvbjtcclxuICAgIH1cclxufVxuXG5jbGFzcyBOb2RlVmlldyB7XHJcbiAgICBjb25zdHJ1Y3Rvcihjb21wb25lbnQsIHByb3BzLCBvcHRpb25zKSB7XHJcbiAgICAgICAgdGhpcy5pc0RyYWdnaW5nID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5jb21wb25lbnQgPSBjb21wb25lbnQ7XHJcbiAgICAgICAgdGhpcy5lZGl0b3IgPSBwcm9wcy5lZGl0b3I7XHJcbiAgICAgICAgdGhpcy5vcHRpb25zID0ge1xyXG4gICAgICAgICAgICBzdG9wRXZlbnQ6IG51bGwsXHJcbiAgICAgICAgICAgIGlnbm9yZU11dGF0aW9uOiBudWxsLFxyXG4gICAgICAgICAgICAuLi5vcHRpb25zLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5leHRlbnNpb24gPSBwcm9wcy5leHRlbnNpb247XHJcbiAgICAgICAgdGhpcy5ub2RlID0gcHJvcHMubm9kZTtcclxuICAgICAgICB0aGlzLmRlY29yYXRpb25zID0gcHJvcHMuZGVjb3JhdGlvbnM7XHJcbiAgICAgICAgdGhpcy5nZXRQb3MgPSBwcm9wcy5nZXRQb3M7XHJcbiAgICAgICAgdGhpcy5tb3VudCgpO1xyXG4gICAgfVxyXG4gICAgbW91bnQoKSB7XHJcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgZ2V0IGRvbSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5lZGl0b3Iudmlldy5kb207XHJcbiAgICB9XHJcbiAgICBnZXQgY29udGVudERPTSgpIHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICAgIG9uRHJhZ1N0YXJ0KGV2ZW50KSB7XHJcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZSwgX2YsIF9nO1xyXG4gICAgICAgIGNvbnN0IHsgdmlldyB9ID0gdGhpcy5lZGl0b3I7XHJcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xyXG4gICAgICAgIC8vIGdldCB0aGUgZHJhZyBoYW5kbGUgZWxlbWVudFxyXG4gICAgICAgIC8vIGBjbG9zZXN0YCBpcyBub3QgYXZhaWxhYmxlIGZvciB0ZXh0IG5vZGVzIHNvIHdlIG1heSBoYXZlIHRvIHVzZSBpdHMgcGFyZW50XHJcbiAgICAgICAgY29uc3QgZHJhZ0hhbmRsZSA9IHRhcmdldC5ub2RlVHlwZSA9PT0gM1xyXG4gICAgICAgICAgICA/IChfYSA9IHRhcmdldC5wYXJlbnRFbGVtZW50KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2xvc2VzdCgnW2RhdGEtZHJhZy1oYW5kbGVdJylcclxuICAgICAgICAgICAgOiB0YXJnZXQuY2xvc2VzdCgnW2RhdGEtZHJhZy1oYW5kbGVdJyk7XHJcbiAgICAgICAgaWYgKCF0aGlzLmRvbVxyXG4gICAgICAgICAgICB8fCAoKF9iID0gdGhpcy5jb250ZW50RE9NKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY29udGFpbnModGFyZ2V0KSlcclxuICAgICAgICAgICAgfHwgIWRyYWdIYW5kbGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgeCA9IDA7XHJcbiAgICAgICAgbGV0IHkgPSAwO1xyXG4gICAgICAgIC8vIGNhbGN1bGF0ZSBvZmZzZXQgZm9yIGRyYWcgZWxlbWVudCBpZiB3ZSB1c2UgYSBkaWZmZXJlbnQgZHJhZyBoYW5kbGUgZWxlbWVudFxyXG4gICAgICAgIGlmICh0aGlzLmRvbSAhPT0gZHJhZ0hhbmRsZSkge1xyXG4gICAgICAgICAgICBjb25zdCBkb21Cb3ggPSB0aGlzLmRvbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICAgICAgY29uc3QgaGFuZGxlQm94ID0gZHJhZ0hhbmRsZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICAgICAgLy8gSW4gUmVhY3QsIHdlIGhhdmUgdG8gZ28gdGhyb3VnaCBuYXRpdmVFdmVudCB0byByZWFjaCBvZmZzZXRYL29mZnNldFkuXHJcbiAgICAgICAgICAgIGNvbnN0IG9mZnNldFggPSAoX2MgPSBldmVudC5vZmZzZXRYKSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiAoX2QgPSBldmVudC5uYXRpdmVFdmVudCkgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLm9mZnNldFg7XHJcbiAgICAgICAgICAgIGNvbnN0IG9mZnNldFkgPSAoX2UgPSBldmVudC5vZmZzZXRZKSAhPT0gbnVsbCAmJiBfZSAhPT0gdm9pZCAwID8gX2UgOiAoX2YgPSBldmVudC5uYXRpdmVFdmVudCkgPT09IG51bGwgfHwgX2YgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9mLm9mZnNldFk7XHJcbiAgICAgICAgICAgIHggPSBoYW5kbGVCb3gueCAtIGRvbUJveC54ICsgb2Zmc2V0WDtcclxuICAgICAgICAgICAgeSA9IGhhbmRsZUJveC55IC0gZG9tQm94LnkgKyBvZmZzZXRZO1xyXG4gICAgICAgIH1cclxuICAgICAgICAoX2cgPSBldmVudC5kYXRhVHJhbnNmZXIpID09PSBudWxsIHx8IF9nID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZy5zZXREcmFnSW1hZ2UodGhpcy5kb20sIHgsIHkpO1xyXG4gICAgICAgIC8vIHdlIG5lZWQgdG8gdGVsbCBQcm9zZU1pcnJvciB0aGF0IHdlIHdhbnQgdG8gbW92ZSB0aGUgd2hvbGUgbm9kZVxyXG4gICAgICAgIC8vIHNvIHdlIGNyZWF0ZSBhIE5vZGVTZWxlY3Rpb25cclxuICAgICAgICBjb25zdCBzZWxlY3Rpb24gPSBOb2RlU2VsZWN0aW9uLmNyZWF0ZSh2aWV3LnN0YXRlLmRvYywgdGhpcy5nZXRQb3MoKSk7XHJcbiAgICAgICAgY29uc3QgdHJhbnNhY3Rpb24gPSB2aWV3LnN0YXRlLnRyLnNldFNlbGVjdGlvbihzZWxlY3Rpb24pO1xyXG4gICAgICAgIHZpZXcuZGlzcGF0Y2godHJhbnNhY3Rpb24pO1xyXG4gICAgfVxyXG4gICAgc3RvcEV2ZW50KGV2ZW50KSB7XHJcbiAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgIGlmICghdGhpcy5kb20pIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHlwZW9mIHRoaXMub3B0aW9ucy5zdG9wRXZlbnQgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5zdG9wRXZlbnQoeyBldmVudCB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xyXG4gICAgICAgIGNvbnN0IGlzSW5FbGVtZW50ID0gdGhpcy5kb20uY29udGFpbnModGFyZ2V0KSAmJiAhKChfYSA9IHRoaXMuY29udGVudERPTSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNvbnRhaW5zKHRhcmdldCkpO1xyXG4gICAgICAgIC8vIGFueSBldmVudCBmcm9tIGNoaWxkIG5vZGVzIHNob3VsZCBiZSBoYW5kbGVkIGJ5IFByb3NlTWlycm9yXHJcbiAgICAgICAgaWYgKCFpc0luRWxlbWVudCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGlzRHJvcEV2ZW50ID0gZXZlbnQudHlwZSA9PT0gJ2Ryb3AnO1xyXG4gICAgICAgIGNvbnN0IGlzSW5wdXQgPSBbJ0lOUFVUJywgJ0JVVFRPTicsICdTRUxFQ1QnLCAnVEVYVEFSRUEnXS5pbmNsdWRlcyh0YXJnZXQudGFnTmFtZSlcclxuICAgICAgICAgICAgfHwgdGFyZ2V0LmlzQ29udGVudEVkaXRhYmxlO1xyXG4gICAgICAgIC8vIGFueSBpbnB1dCBldmVudCB3aXRoaW4gbm9kZSB2aWV3cyBzaG91bGQgYmUgaWdub3JlZCBieSBQcm9zZU1pcnJvclxyXG4gICAgICAgIGlmIChpc0lucHV0ICYmICFpc0Ryb3BFdmVudCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgeyBpc0VkaXRhYmxlIH0gPSB0aGlzLmVkaXRvcjtcclxuICAgICAgICBjb25zdCB7IGlzRHJhZ2dpbmcgfSA9IHRoaXM7XHJcbiAgICAgICAgY29uc3QgaXNEcmFnZ2FibGUgPSAhIXRoaXMubm9kZS50eXBlLnNwZWMuZHJhZ2dhYmxlO1xyXG4gICAgICAgIGNvbnN0IGlzU2VsZWN0YWJsZSA9IE5vZGVTZWxlY3Rpb24uaXNTZWxlY3RhYmxlKHRoaXMubm9kZSk7XHJcbiAgICAgICAgY29uc3QgaXNDb3B5RXZlbnQgPSBldmVudC50eXBlID09PSAnY29weSc7XHJcbiAgICAgICAgY29uc3QgaXNQYXN0ZUV2ZW50ID0gZXZlbnQudHlwZSA9PT0gJ3Bhc3RlJztcclxuICAgICAgICBjb25zdCBpc0N1dEV2ZW50ID0gZXZlbnQudHlwZSA9PT0gJ2N1dCc7XHJcbiAgICAgICAgY29uc3QgaXNDbGlja0V2ZW50ID0gZXZlbnQudHlwZSA9PT0gJ21vdXNlZG93bic7XHJcbiAgICAgICAgY29uc3QgaXNEcmFnRXZlbnQgPSBldmVudC50eXBlLnN0YXJ0c1dpdGgoJ2RyYWcnKTtcclxuICAgICAgICAvLyBQcm9zZU1pcnJvciB0cmllcyB0byBkcmFnIHNlbGVjdGFibGUgbm9kZXNcclxuICAgICAgICAvLyBldmVuIGlmIGBkcmFnZ2FibGVgIGlzIHNldCB0byBgZmFsc2VgXHJcbiAgICAgICAgLy8gdGhpcyBmaXggcHJldmVudHMgdGhhdFxyXG4gICAgICAgIGlmICghaXNEcmFnZ2FibGUgJiYgaXNTZWxlY3RhYmxlICYmIGlzRHJhZ0V2ZW50KSB7XHJcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChpc0RyYWdnYWJsZSAmJiBpc0RyYWdFdmVudCAmJiAhaXNEcmFnZ2luZykge1xyXG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHdlIGhhdmUgdG8gc3RvcmUgdGhhdCBkcmFnZ2luZyBzdGFydGVkXHJcbiAgICAgICAgaWYgKGlzRHJhZ2dhYmxlICYmIGlzRWRpdGFibGUgJiYgIWlzRHJhZ2dpbmcgJiYgaXNDbGlja0V2ZW50KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRyYWdIYW5kbGUgPSB0YXJnZXQuY2xvc2VzdCgnW2RhdGEtZHJhZy1oYW5kbGVdJyk7XHJcbiAgICAgICAgICAgIGNvbnN0IGlzVmFsaWREcmFnSGFuZGxlID0gZHJhZ0hhbmRsZVxyXG4gICAgICAgICAgICAgICAgJiYgKHRoaXMuZG9tID09PSBkcmFnSGFuZGxlIHx8ICh0aGlzLmRvbS5jb250YWlucyhkcmFnSGFuZGxlKSkpO1xyXG4gICAgICAgICAgICBpZiAoaXNWYWxpZERyYWdIYW5kbGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaXNEcmFnZ2luZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdkcmFnZW5kJywgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNEcmFnZ2luZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfSwgeyBvbmNlOiB0cnVlIH0pO1xyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmlzRHJhZ2dpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH0sIHsgb25jZTogdHJ1ZSB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyB0aGVzZSBldmVudHMgYXJlIGhhbmRsZWQgYnkgcHJvc2VtaXJyb3JcclxuICAgICAgICBpZiAoaXNEcmFnZ2luZ1xyXG4gICAgICAgICAgICB8fCBpc0Ryb3BFdmVudFxyXG4gICAgICAgICAgICB8fCBpc0NvcHlFdmVudFxyXG4gICAgICAgICAgICB8fCBpc1Bhc3RlRXZlbnRcclxuICAgICAgICAgICAgfHwgaXNDdXRFdmVudFxyXG4gICAgICAgICAgICB8fCAoaXNDbGlja0V2ZW50ICYmIGlzU2VsZWN0YWJsZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIGlnbm9yZU11dGF0aW9uKG11dGF0aW9uKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmRvbSB8fCAhdGhpcy5jb250ZW50RE9NKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHlwZW9mIHRoaXMub3B0aW9ucy5pZ25vcmVNdXRhdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmlnbm9yZU11dGF0aW9uKHsgbXV0YXRpb24gfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGEgbGVhZi9hdG9tIG5vZGUgaXMgbGlrZSBhIGJsYWNrIGJveCBmb3IgUHJvc2VNaXJyb3JcclxuICAgICAgICAvLyBhbmQgc2hvdWxkIGJlIGZ1bGx5IGhhbmRsZWQgYnkgdGhlIG5vZGUgdmlld1xyXG4gICAgICAgIGlmICh0aGlzLm5vZGUuaXNMZWFmIHx8IHRoaXMubm9kZS5pc0F0b20pIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFByb3NlTWlycm9yIHNob3VsZCBoYW5kbGUgYW55IHNlbGVjdGlvbnNcclxuICAgICAgICBpZiAobXV0YXRpb24udHlwZSA9PT0gJ3NlbGVjdGlvbicpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyB0cnkgdG8gcHJldmVudCBhIGJ1ZyBvbiBpT1MgdGhhdCB3aWxsIGJyZWFrIG5vZGUgdmlld3Mgb24gZW50ZXJcclxuICAgICAgICAvLyB0aGlzIGlzIGJlY2F1c2UgUHJvc2VNaXJyb3IgY2Fu4oCZdCBwcmV2ZW50RGlzcGF0Y2ggb24gZW50ZXJcclxuICAgICAgICAvLyB0aGlzIHdpbGwgbGVhZCB0byBhIHJlLXJlbmRlciBvZiB0aGUgbm9kZSB2aWV3IG9uIGVudGVyXHJcbiAgICAgICAgLy8gc2VlOiBodHRwczovL2dpdGh1Yi5jb20vdWViZXJkb3Npcy90aXB0YXAvaXNzdWVzLzEyMTRcclxuICAgICAgICBpZiAodGhpcy5kb20uY29udGFpbnMobXV0YXRpb24udGFyZ2V0KVxyXG4gICAgICAgICAgICAmJiBtdXRhdGlvbi50eXBlID09PSAnY2hpbGRMaXN0J1xyXG4gICAgICAgICAgICAmJiBpc2lPUygpXHJcbiAgICAgICAgICAgICYmIHRoaXMuZWRpdG9yLmlzRm9jdXNlZCkge1xyXG4gICAgICAgICAgICBjb25zdCBjaGFuZ2VkTm9kZXMgPSBbXHJcbiAgICAgICAgICAgICAgICAuLi5BcnJheS5mcm9tKG11dGF0aW9uLmFkZGVkTm9kZXMpLFxyXG4gICAgICAgICAgICAgICAgLi4uQXJyYXkuZnJvbShtdXRhdGlvbi5yZW1vdmVkTm9kZXMpLFxyXG4gICAgICAgICAgICBdO1xyXG4gICAgICAgICAgICAvLyB3ZeKAmWxsIGNoZWNrIGlmIGV2ZXJ5IGNoYW5nZWQgbm9kZSBpcyBjb250ZW50RWRpdGFibGVcclxuICAgICAgICAgICAgLy8gdG8gbWFrZSBzdXJlIGl04oCZcyBwcm9iYWJseSBtdXRhdGVkIGJ5IFByb3NlTWlycm9yXHJcbiAgICAgICAgICAgIGlmIChjaGFuZ2VkTm9kZXMuZXZlcnkobm9kZSA9PiBub2RlLmlzQ29udGVudEVkaXRhYmxlKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHdlIHdpbGwgYWxsb3cgbXV0YXRpb24gY29udGVudERPTSB3aXRoIGF0dHJpYnV0ZXNcclxuICAgICAgICAvLyBzbyB3ZSBjYW4gZm9yIGV4YW1wbGUgYWRkaW5nIGNsYXNzZXMgd2l0aGluIG91ciBub2RlIHZpZXdcclxuICAgICAgICBpZiAodGhpcy5jb250ZW50RE9NID09PSBtdXRhdGlvbi50YXJnZXQgJiYgbXV0YXRpb24udHlwZSA9PT0gJ2F0dHJpYnV0ZXMnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBQcm9zZU1pcnJvciBzaG91bGQgaGFuZGxlIGFueSBjaGFuZ2VzIHdpdGhpbiBjb250ZW50RE9NXHJcbiAgICAgICAgaWYgKHRoaXMuY29udGVudERPTS5jb250YWlucyhtdXRhdGlvbi50YXJnZXQpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICB1cGRhdGVBdHRyaWJ1dGVzKGF0dHJpYnV0ZXMpIHtcclxuICAgICAgICB0aGlzLmVkaXRvci5jb21tYW5kcy5jb21tYW5kKCh7IHRyIH0pID0+IHtcclxuICAgICAgICAgICAgY29uc3QgcG9zID0gdGhpcy5nZXRQb3MoKTtcclxuICAgICAgICAgICAgdHIuc2V0Tm9kZU1hcmt1cChwb3MsIHVuZGVmaW5lZCwge1xyXG4gICAgICAgICAgICAgICAgLi4udGhpcy5ub2RlLmF0dHJzLFxyXG4gICAgICAgICAgICAgICAgLi4uYXR0cmlidXRlcyxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgZGVsZXRlTm9kZSgpIHtcclxuICAgICAgICBjb25zdCBmcm9tID0gdGhpcy5nZXRQb3MoKTtcclxuICAgICAgICBjb25zdCB0byA9IGZyb20gKyB0aGlzLm5vZGUubm9kZVNpemU7XHJcbiAgICAgICAgdGhpcy5lZGl0b3IuY29tbWFuZHMuZGVsZXRlUmFuZ2UoeyBmcm9tLCB0byB9KTtcclxuICAgIH1cclxufVxuXG4vKipcclxuICogQnVpbGQgYW4gcGFzdGUgcnVsZSB0aGF0IGFkZHMgYSBtYXJrIHdoZW4gdGhlXHJcbiAqIG1hdGNoZWQgdGV4dCBpcyBwYXN0ZWQgaW50byBpdC5cclxuICovXHJcbmZ1bmN0aW9uIG1hcmtQYXN0ZVJ1bGUoY29uZmlnKSB7XHJcbiAgICByZXR1cm4gbmV3IFBhc3RlUnVsZSh7XHJcbiAgICAgICAgZmluZDogY29uZmlnLmZpbmQsXHJcbiAgICAgICAgaGFuZGxlcjogKHsgc3RhdGUsIHJhbmdlLCBtYXRjaCB9KSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBjYWxsT3JSZXR1cm4oY29uZmlnLmdldEF0dHJpYnV0ZXMsIHVuZGVmaW5lZCwgbWF0Y2gpO1xyXG4gICAgICAgICAgICBpZiAoYXR0cmlidXRlcyA9PT0gZmFsc2UgfHwgYXR0cmlidXRlcyA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgeyB0ciB9ID0gc3RhdGU7XHJcbiAgICAgICAgICAgIGNvbnN0IGNhcHR1cmVHcm91cCA9IG1hdGNoW21hdGNoLmxlbmd0aCAtIDFdO1xyXG4gICAgICAgICAgICBjb25zdCBmdWxsTWF0Y2ggPSBtYXRjaFswXTtcclxuICAgICAgICAgICAgbGV0IG1hcmtFbmQgPSByYW5nZS50bztcclxuICAgICAgICAgICAgaWYgKGNhcHR1cmVHcm91cCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc3RhcnRTcGFjZXMgPSBmdWxsTWF0Y2guc2VhcmNoKC9cXFMvKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRleHRTdGFydCA9IHJhbmdlLmZyb20gKyBmdWxsTWF0Y2guaW5kZXhPZihjYXB0dXJlR3JvdXApO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdGV4dEVuZCA9IHRleHRTdGFydCArIGNhcHR1cmVHcm91cC5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBleGNsdWRlZE1hcmtzID0gZ2V0TWFya3NCZXR3ZWVuKHJhbmdlLmZyb20sIHJhbmdlLnRvLCBzdGF0ZS5kb2MpXHJcbiAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihpdGVtID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZXhjbHVkZWQgPSBpdGVtLm1hcmsudHlwZS5leGNsdWRlZDtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXhjbHVkZWQuZmluZCh0eXBlID0+IHR5cGUgPT09IGNvbmZpZy50eXBlICYmIHR5cGUgIT09IGl0ZW0ubWFyay50eXBlKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihpdGVtID0+IGl0ZW0udG8gPiB0ZXh0U3RhcnQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGV4Y2x1ZGVkTWFya3MubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodGV4dEVuZCA8IHJhbmdlLnRvKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHIuZGVsZXRlKHRleHRFbmQsIHJhbmdlLnRvKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0ZXh0U3RhcnQgPiByYW5nZS5mcm9tKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHIuZGVsZXRlKHJhbmdlLmZyb20gKyBzdGFydFNwYWNlcywgdGV4dFN0YXJ0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIG1hcmtFbmQgPSByYW5nZS5mcm9tICsgc3RhcnRTcGFjZXMgKyBjYXB0dXJlR3JvdXAubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgdHIuYWRkTWFyayhyYW5nZS5mcm9tICsgc3RhcnRTcGFjZXMsIG1hcmtFbmQsIGNvbmZpZy50eXBlLmNyZWF0ZShhdHRyaWJ1dGVzIHx8IHt9KSk7XHJcbiAgICAgICAgICAgICAgICB0ci5yZW1vdmVTdG9yZWRNYXJrKGNvbmZpZy50eXBlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICB9KTtcclxufVxuXG4vLyBzb3VyY2U6IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS82OTY5NDg2XHJcbmZ1bmN0aW9uIGVzY2FwZUZvclJlZ0V4KHN0cmluZykge1xyXG4gICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9bLS9cXFxcXiQqKz8uKCl8W1xcXXt9XS9nLCAnXFxcXCQmJyk7XHJcbn1cblxuLyoqXHJcbiAqIEJ1aWxkIGFuIHBhc3RlIHJ1bGUgdGhhdCBhZGRzIGEgbm9kZSB3aGVuIHRoZVxyXG4gKiBtYXRjaGVkIHRleHQgaXMgcGFzdGVkIGludG8gaXQuXHJcbiAqL1xyXG5mdW5jdGlvbiBub2RlUGFzdGVSdWxlKGNvbmZpZykge1xyXG4gICAgcmV0dXJuIG5ldyBQYXN0ZVJ1bGUoe1xyXG4gICAgICAgIGZpbmQ6IGNvbmZpZy5maW5kLFxyXG4gICAgICAgIGhhbmRsZXIoeyBtYXRjaCwgY2hhaW4sIHJhbmdlIH0pIHtcclxuICAgICAgICAgICAgY29uc3QgYXR0cmlidXRlcyA9IGNhbGxPclJldHVybihjb25maWcuZ2V0QXR0cmlidXRlcywgdW5kZWZpbmVkLCBtYXRjaCk7XHJcbiAgICAgICAgICAgIGlmIChhdHRyaWJ1dGVzID09PSBmYWxzZSB8fCBhdHRyaWJ1dGVzID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAobWF0Y2guaW5wdXQpIHtcclxuICAgICAgICAgICAgICAgIGNoYWluKClcclxuICAgICAgICAgICAgICAgICAgICAuZGVsZXRlUmFuZ2UocmFuZ2UpXHJcbiAgICAgICAgICAgICAgICAgICAgLmluc2VydENvbnRlbnQoe1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IGNvbmZpZy50eXBlLm5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IGF0dHJpYnV0ZXMsXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICB9KTtcclxufVxuXG4vKipcclxuICogQnVpbGQgYW4gcGFzdGUgcnVsZSB0aGF0IHJlcGxhY2VzIHRleHQgd2hlbiB0aGVcclxuICogbWF0Y2hlZCB0ZXh0IGlzIHBhc3RlZCBpbnRvIGl0LlxyXG4gKi9cclxuZnVuY3Rpb24gdGV4dFBhc3RlUnVsZShjb25maWcpIHtcclxuICAgIHJldHVybiBuZXcgUGFzdGVSdWxlKHtcclxuICAgICAgICBmaW5kOiBjb25maWcuZmluZCxcclxuICAgICAgICBoYW5kbGVyOiAoeyBzdGF0ZSwgcmFuZ2UsIG1hdGNoIH0pID0+IHtcclxuICAgICAgICAgICAgbGV0IGluc2VydCA9IGNvbmZpZy5yZXBsYWNlO1xyXG4gICAgICAgICAgICBsZXQgc3RhcnQgPSByYW5nZS5mcm9tO1xyXG4gICAgICAgICAgICBjb25zdCBlbmQgPSByYW5nZS50bztcclxuICAgICAgICAgICAgaWYgKG1hdGNoWzFdKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvZmZzZXQgPSBtYXRjaFswXS5sYXN0SW5kZXhPZihtYXRjaFsxXSk7XHJcbiAgICAgICAgICAgICAgICBpbnNlcnQgKz0gbWF0Y2hbMF0uc2xpY2Uob2Zmc2V0ICsgbWF0Y2hbMV0ubGVuZ3RoKTtcclxuICAgICAgICAgICAgICAgIHN0YXJ0ICs9IG9mZnNldDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGN1dE9mZiA9IHN0YXJ0IC0gZW5kO1xyXG4gICAgICAgICAgICAgICAgaWYgKGN1dE9mZiA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBpbnNlcnQgPSBtYXRjaFswXS5zbGljZShvZmZzZXQgLSBjdXRPZmYsIG9mZnNldCkgKyBpbnNlcnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSBlbmQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc3RhdGUudHIuaW5zZXJ0VGV4dChpbnNlcnQsIHN0YXJ0LCBlbmQpO1xyXG4gICAgICAgIH0sXHJcbiAgICB9KTtcclxufVxuXG5jbGFzcyBUcmFja2VyIHtcclxuICAgIGNvbnN0cnVjdG9yKHRyYW5zYWN0aW9uKSB7XHJcbiAgICAgICAgdGhpcy50cmFuc2FjdGlvbiA9IHRyYW5zYWN0aW9uO1xyXG4gICAgICAgIHRoaXMuY3VycmVudFN0ZXAgPSB0aGlzLnRyYW5zYWN0aW9uLnN0ZXBzLmxlbmd0aDtcclxuICAgIH1cclxuICAgIG1hcChwb3NpdGlvbikge1xyXG4gICAgICAgIGxldCBkZWxldGVkID0gZmFsc2U7XHJcbiAgICAgICAgY29uc3QgbWFwcGVkUG9zaXRpb24gPSB0aGlzLnRyYW5zYWN0aW9uLnN0ZXBzXHJcbiAgICAgICAgICAgIC5zbGljZSh0aGlzLmN1cnJlbnRTdGVwKVxyXG4gICAgICAgICAgICAucmVkdWNlKChuZXdQb3NpdGlvbiwgc3RlcCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBtYXBSZXN1bHQgPSBzdGVwXHJcbiAgICAgICAgICAgICAgICAuZ2V0TWFwKClcclxuICAgICAgICAgICAgICAgIC5tYXBSZXN1bHQobmV3UG9zaXRpb24pO1xyXG4gICAgICAgICAgICBpZiAobWFwUmVzdWx0LmRlbGV0ZWQpIHtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBtYXBSZXN1bHQucG9zO1xyXG4gICAgICAgIH0sIHBvc2l0aW9uKTtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBwb3NpdGlvbjogbWFwcGVkUG9zaXRpb24sXHJcbiAgICAgICAgICAgIGRlbGV0ZWQsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxuXG5leHBvcnQgeyBDb21tYW5kTWFuYWdlciwgRWRpdG9yLCBFeHRlbnNpb24sIElucHV0UnVsZSwgTWFyaywgTm9kZSwgTm9kZVZpZXcsIFBhc3RlUnVsZSwgVHJhY2tlciwgY2FsbE9yUmV0dXJuLCBjb21iaW5lVHJhbnNhY3Rpb25TdGVwcywgZGVmYXVsdEJsb2NrQXQsIGVzY2FwZUZvclJlZ0V4LCBleHRlbnNpb25zLCBmaW5kQ2hpbGRyZW4sIGZpbmRDaGlsZHJlbkluUmFuZ2UsIGZpbmRQYXJlbnROb2RlLCBmaW5kUGFyZW50Tm9kZUNsb3Nlc3RUb1BvcywgZ2VuZXJhdGVIVE1MLCBnZW5lcmF0ZUpTT04sIGdlbmVyYXRlVGV4dCwgZ2V0QXR0cmlidXRlcywgZ2V0Q2hhbmdlZFJhbmdlcywgZ2V0RGVidWdKU09OLCBnZXRFeHRlbnNpb25GaWVsZCwgZ2V0SFRNTEZyb21GcmFnbWVudCwgZ2V0TWFya0F0dHJpYnV0ZXMsIGdldE1hcmtSYW5nZSwgZ2V0TWFya1R5cGUsIGdldE1hcmtzQmV0d2VlbiwgZ2V0Tm9kZUF0dHJpYnV0ZXMsIGdldE5vZGVUeXBlLCBnZXRTY2hlbWEsIGdldFRleHQsIGdldFRleHRCZXR3ZWVuLCBnZXRUZXh0Q29udGVudEZyb21Ob2RlcywgZ2V0VGV4dFNlcmlhbGl6ZXJzRnJvbVNjaGVtYSwgaW5wdXRSdWxlc1BsdWdpbiwgaXNBY3RpdmUsIGlzTGlzdCwgaXNNYXJrQWN0aXZlLCBpc05vZGVBY3RpdmUsIGlzTm9kZUVtcHR5LCBpc05vZGVTZWxlY3Rpb24sIGlzVGV4dFNlbGVjdGlvbiwgbWFya0lucHV0UnVsZSwgbWFya1Bhc3RlUnVsZSwgbWVyZ2VBdHRyaWJ1dGVzLCBub2RlSW5wdXRSdWxlLCBub2RlUGFzdGVSdWxlLCBwYXN0ZVJ1bGVzUGx1Z2luLCBwb3NUb0RPTVJlY3QsIHRleHRJbnB1dFJ1bGUsIHRleHRQYXN0ZVJ1bGUsIHRleHRibG9ja1R5cGVJbnB1dFJ1bGUsIHdyYXBwaW5nSW5wdXRSdWxlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD10aXB0YXAtY29yZS5lc20uanMubWFwXG4iLCJpbXBvcnQgeyBmaW5kV3JhcHBpbmcsIFJlcGxhY2VBcm91bmRTdGVwLCBjYW5TcGxpdCwgbGlmdFRhcmdldCB9IGZyb20gJ3Byb3NlbWlycm9yLXRyYW5zZm9ybSc7XG5pbXBvcnQgeyBOb2RlUmFuZ2UsIEZyYWdtZW50LCBTbGljZSB9IGZyb20gJ3Byb3NlbWlycm9yLW1vZGVsJztcbmltcG9ydCB7IFNlbGVjdGlvbiB9IGZyb20gJ3Byb3NlbWlycm9yLXN0YXRlJztcblxuY29uc3Qgb2xET00gPSBbXCJvbFwiLCAwXSwgdWxET00gPSBbXCJ1bFwiLCAwXSwgbGlET00gPSBbXCJsaVwiLCAwXTtcbi8qKlxuQW4gb3JkZXJlZCBsaXN0IFtub2RlIHNwZWNdKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyNtb2RlbC5Ob2RlU3BlYykuIEhhcyBhIHNpbmdsZVxuYXR0cmlidXRlLCBgb3JkZXJgLCB3aGljaCBkZXRlcm1pbmVzIHRoZSBudW1iZXIgYXQgd2hpY2ggdGhlIGxpc3RcbnN0YXJ0cyBjb3VudGluZywgYW5kIGRlZmF1bHRzIHRvIDEuIFJlcHJlc2VudGVkIGFzIGFuIGA8b2w+YFxuZWxlbWVudC5cbiovXG5jb25zdCBvcmRlcmVkTGlzdCA9IHtcbiAgICBhdHRyczogeyBvcmRlcjogeyBkZWZhdWx0OiAxIH0gfSxcbiAgICBwYXJzZURPTTogW3sgdGFnOiBcIm9sXCIsIGdldEF0dHJzKGRvbSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IG9yZGVyOiBkb20uaGFzQXR0cmlidXRlKFwic3RhcnRcIikgPyArZG9tLmdldEF0dHJpYnV0ZShcInN0YXJ0XCIpIDogMSB9O1xuICAgICAgICAgICAgfSB9XSxcbiAgICB0b0RPTShub2RlKSB7XG4gICAgICAgIHJldHVybiBub2RlLmF0dHJzLm9yZGVyID09IDEgPyBvbERPTSA6IFtcIm9sXCIsIHsgc3RhcnQ6IG5vZGUuYXR0cnMub3JkZXIgfSwgMF07XG4gICAgfVxufTtcbi8qKlxuQSBidWxsZXQgbGlzdCBub2RlIHNwZWMsIHJlcHJlc2VudGVkIGluIHRoZSBET00gYXMgYDx1bD5gLlxuKi9cbmNvbnN0IGJ1bGxldExpc3QgPSB7XG4gICAgcGFyc2VET006IFt7IHRhZzogXCJ1bFwiIH1dLFxuICAgIHRvRE9NKCkgeyByZXR1cm4gdWxET007IH1cbn07XG4vKipcbkEgbGlzdCBpdGVtIChgPGxpPmApIHNwZWMuXG4qL1xuY29uc3QgbGlzdEl0ZW0gPSB7XG4gICAgcGFyc2VET006IFt7IHRhZzogXCJsaVwiIH1dLFxuICAgIHRvRE9NKCkgeyByZXR1cm4gbGlET007IH0sXG4gICAgZGVmaW5pbmc6IHRydWVcbn07XG5mdW5jdGlvbiBhZGQob2JqLCBwcm9wcykge1xuICAgIGxldCBjb3B5ID0ge307XG4gICAgZm9yIChsZXQgcHJvcCBpbiBvYmopXG4gICAgICAgIGNvcHlbcHJvcF0gPSBvYmpbcHJvcF07XG4gICAgZm9yIChsZXQgcHJvcCBpbiBwcm9wcylcbiAgICAgICAgY29weVtwcm9wXSA9IHByb3BzW3Byb3BdO1xuICAgIHJldHVybiBjb3B5O1xufVxuLyoqXG5Db252ZW5pZW5jZSBmdW5jdGlvbiBmb3IgYWRkaW5nIGxpc3QtcmVsYXRlZCBub2RlIHR5cGVzIHRvIGEgbWFwXG5zcGVjaWZ5aW5nIHRoZSBub2RlcyBmb3IgYSBzY2hlbWEuIEFkZHNcbltgb3JkZXJlZExpc3RgXShodHRwczovL3Byb3NlbWlycm9yLm5ldC9kb2NzL3JlZi8jc2NoZW1hLWxpc3Qub3JkZXJlZExpc3QpIGFzIGBcIm9yZGVyZWRfbGlzdFwiYCxcbltgYnVsbGV0TGlzdGBdKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyNzY2hlbWEtbGlzdC5idWxsZXRMaXN0KSBhcyBgXCJidWxsZXRfbGlzdFwiYCwgYW5kXG5bYGxpc3RJdGVtYF0oaHR0cHM6Ly9wcm9zZW1pcnJvci5uZXQvZG9jcy9yZWYvI3NjaGVtYS1saXN0Lmxpc3RJdGVtKSBhcyBgXCJsaXN0X2l0ZW1cImAuXG5cbmBpdGVtQ29udGVudGAgZGV0ZXJtaW5lcyB0aGUgY29udGVudCBleHByZXNzaW9uIGZvciB0aGUgbGlzdCBpdGVtcy5cbklmIHlvdSB3YW50IHRoZSBjb21tYW5kcyBkZWZpbmVkIGluIHRoaXMgbW9kdWxlIHRvIGFwcGx5IHRvIHlvdXJcbmxpc3Qgc3RydWN0dXJlLCBpdCBzaG91bGQgaGF2ZSBhIHNoYXBlIGxpa2UgYFwicGFyYWdyYXBoIGJsb2NrKlwiYCBvclxuYFwicGFyYWdyYXBoIChvcmRlcmVkX2xpc3QgfCBidWxsZXRfbGlzdCkqXCJgLiBgbGlzdEdyb3VwYCBjYW4gYmVcbmdpdmVuIHRvIGFzc2lnbiBhIGdyb3VwIG5hbWUgdG8gdGhlIGxpc3Qgbm9kZSB0eXBlcywgZm9yIGV4YW1wbGVcbmBcImJsb2NrXCJgLlxuKi9cbmZ1bmN0aW9uIGFkZExpc3ROb2Rlcyhub2RlcywgaXRlbUNvbnRlbnQsIGxpc3RHcm91cCkge1xuICAgIHJldHVybiBub2Rlcy5hcHBlbmQoe1xuICAgICAgICBvcmRlcmVkX2xpc3Q6IGFkZChvcmRlcmVkTGlzdCwgeyBjb250ZW50OiBcImxpc3RfaXRlbStcIiwgZ3JvdXA6IGxpc3RHcm91cCB9KSxcbiAgICAgICAgYnVsbGV0X2xpc3Q6IGFkZChidWxsZXRMaXN0LCB7IGNvbnRlbnQ6IFwibGlzdF9pdGVtK1wiLCBncm91cDogbGlzdEdyb3VwIH0pLFxuICAgICAgICBsaXN0X2l0ZW06IGFkZChsaXN0SXRlbSwgeyBjb250ZW50OiBpdGVtQ29udGVudCB9KVxuICAgIH0pO1xufVxuLyoqXG5SZXR1cm5zIGEgY29tbWFuZCBmdW5jdGlvbiB0aGF0IHdyYXBzIHRoZSBzZWxlY3Rpb24gaW4gYSBsaXN0IHdpdGhcbnRoZSBnaXZlbiB0eXBlIGFuIGF0dHJpYnV0ZXMuIElmIGBkaXNwYXRjaGAgaXMgbnVsbCwgb25seSByZXR1cm4gYVxudmFsdWUgdG8gaW5kaWNhdGUgd2hldGhlciB0aGlzIGlzIHBvc3NpYmxlLCBidXQgZG9uJ3QgYWN0dWFsbHlcbnBlcmZvcm0gdGhlIGNoYW5nZS5cbiovXG5mdW5jdGlvbiB3cmFwSW5MaXN0KGxpc3RUeXBlLCBhdHRycyA9IG51bGwpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHN0YXRlLCBkaXNwYXRjaCkge1xuICAgICAgICBsZXQgeyAkZnJvbSwgJHRvIH0gPSBzdGF0ZS5zZWxlY3Rpb247XG4gICAgICAgIGxldCByYW5nZSA9ICRmcm9tLmJsb2NrUmFuZ2UoJHRvKSwgZG9Kb2luID0gZmFsc2UsIG91dGVyUmFuZ2UgPSByYW5nZTtcbiAgICAgICAgaWYgKCFyYW5nZSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgLy8gVGhpcyBpcyBhdCB0aGUgdG9wIG9mIGFuIGV4aXN0aW5nIGxpc3QgaXRlbVxuICAgICAgICBpZiAocmFuZ2UuZGVwdGggPj0gMiAmJiAkZnJvbS5ub2RlKHJhbmdlLmRlcHRoIC0gMSkudHlwZS5jb21wYXRpYmxlQ29udGVudChsaXN0VHlwZSkgJiYgcmFuZ2Uuc3RhcnRJbmRleCA9PSAwKSB7XG4gICAgICAgICAgICAvLyBEb24ndCBkbyBhbnl0aGluZyBpZiB0aGlzIGlzIHRoZSB0b3Agb2YgdGhlIGxpc3RcbiAgICAgICAgICAgIGlmICgkZnJvbS5pbmRleChyYW5nZS5kZXB0aCAtIDEpID09IDApXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgbGV0ICRpbnNlcnQgPSBzdGF0ZS5kb2MucmVzb2x2ZShyYW5nZS5zdGFydCAtIDIpO1xuICAgICAgICAgICAgb3V0ZXJSYW5nZSA9IG5ldyBOb2RlUmFuZ2UoJGluc2VydCwgJGluc2VydCwgcmFuZ2UuZGVwdGgpO1xuICAgICAgICAgICAgaWYgKHJhbmdlLmVuZEluZGV4IDwgcmFuZ2UucGFyZW50LmNoaWxkQ291bnQpXG4gICAgICAgICAgICAgICAgcmFuZ2UgPSBuZXcgTm9kZVJhbmdlKCRmcm9tLCBzdGF0ZS5kb2MucmVzb2x2ZSgkdG8uZW5kKHJhbmdlLmRlcHRoKSksIHJhbmdlLmRlcHRoKTtcbiAgICAgICAgICAgIGRvSm9pbiA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHdyYXAgPSBmaW5kV3JhcHBpbmcob3V0ZXJSYW5nZSwgbGlzdFR5cGUsIGF0dHJzLCByYW5nZSk7XG4gICAgICAgIGlmICghd3JhcClcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgaWYgKGRpc3BhdGNoKVxuICAgICAgICAgICAgZGlzcGF0Y2goZG9XcmFwSW5MaXN0KHN0YXRlLnRyLCByYW5nZSwgd3JhcCwgZG9Kb2luLCBsaXN0VHlwZSkuc2Nyb2xsSW50b1ZpZXcoKSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG59XG5mdW5jdGlvbiBkb1dyYXBJbkxpc3QodHIsIHJhbmdlLCB3cmFwcGVycywgam9pbkJlZm9yZSwgbGlzdFR5cGUpIHtcbiAgICBsZXQgY29udGVudCA9IEZyYWdtZW50LmVtcHR5O1xuICAgIGZvciAobGV0IGkgPSB3cmFwcGVycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSlcbiAgICAgICAgY29udGVudCA9IEZyYWdtZW50LmZyb20od3JhcHBlcnNbaV0udHlwZS5jcmVhdGUod3JhcHBlcnNbaV0uYXR0cnMsIGNvbnRlbnQpKTtcbiAgICB0ci5zdGVwKG5ldyBSZXBsYWNlQXJvdW5kU3RlcChyYW5nZS5zdGFydCAtIChqb2luQmVmb3JlID8gMiA6IDApLCByYW5nZS5lbmQsIHJhbmdlLnN0YXJ0LCByYW5nZS5lbmQsIG5ldyBTbGljZShjb250ZW50LCAwLCAwKSwgd3JhcHBlcnMubGVuZ3RoLCB0cnVlKSk7XG4gICAgbGV0IGZvdW5kID0gMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHdyYXBwZXJzLmxlbmd0aDsgaSsrKVxuICAgICAgICBpZiAod3JhcHBlcnNbaV0udHlwZSA9PSBsaXN0VHlwZSlcbiAgICAgICAgICAgIGZvdW5kID0gaSArIDE7XG4gICAgbGV0IHNwbGl0RGVwdGggPSB3cmFwcGVycy5sZW5ndGggLSBmb3VuZDtcbiAgICBsZXQgc3BsaXRQb3MgPSByYW5nZS5zdGFydCArIHdyYXBwZXJzLmxlbmd0aCAtIChqb2luQmVmb3JlID8gMiA6IDApLCBwYXJlbnQgPSByYW5nZS5wYXJlbnQ7XG4gICAgZm9yIChsZXQgaSA9IHJhbmdlLnN0YXJ0SW5kZXgsIGUgPSByYW5nZS5lbmRJbmRleCwgZmlyc3QgPSB0cnVlOyBpIDwgZTsgaSsrLCBmaXJzdCA9IGZhbHNlKSB7XG4gICAgICAgIGlmICghZmlyc3QgJiYgY2FuU3BsaXQodHIuZG9jLCBzcGxpdFBvcywgc3BsaXREZXB0aCkpIHtcbiAgICAgICAgICAgIHRyLnNwbGl0KHNwbGl0UG9zLCBzcGxpdERlcHRoKTtcbiAgICAgICAgICAgIHNwbGl0UG9zICs9IDIgKiBzcGxpdERlcHRoO1xuICAgICAgICB9XG4gICAgICAgIHNwbGl0UG9zICs9IHBhcmVudC5jaGlsZChpKS5ub2RlU2l6ZTtcbiAgICB9XG4gICAgcmV0dXJuIHRyO1xufVxuLyoqXG5CdWlsZCBhIGNvbW1hbmQgdGhhdCBzcGxpdHMgYSBub24tZW1wdHkgdGV4dGJsb2NrIGF0IHRoZSB0b3AgbGV2ZWxcbm9mIGEgbGlzdCBpdGVtIGJ5IGFsc28gc3BsaXR0aW5nIHRoYXQgbGlzdCBpdGVtLlxuKi9cbmZ1bmN0aW9uIHNwbGl0TGlzdEl0ZW0oaXRlbVR5cGUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHN0YXRlLCBkaXNwYXRjaCkge1xuICAgICAgICBsZXQgeyAkZnJvbSwgJHRvLCBub2RlIH0gPSBzdGF0ZS5zZWxlY3Rpb247XG4gICAgICAgIGlmICgobm9kZSAmJiBub2RlLmlzQmxvY2spIHx8ICRmcm9tLmRlcHRoIDwgMiB8fCAhJGZyb20uc2FtZVBhcmVudCgkdG8pKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBsZXQgZ3JhbmRQYXJlbnQgPSAkZnJvbS5ub2RlKC0xKTtcbiAgICAgICAgaWYgKGdyYW5kUGFyZW50LnR5cGUgIT0gaXRlbVR5cGUpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGlmICgkZnJvbS5wYXJlbnQuY29udGVudC5zaXplID09IDAgJiYgJGZyb20ubm9kZSgtMSkuY2hpbGRDb3VudCA9PSAkZnJvbS5pbmRleEFmdGVyKC0xKSkge1xuICAgICAgICAgICAgLy8gSW4gYW4gZW1wdHkgYmxvY2suIElmIHRoaXMgaXMgYSBuZXN0ZWQgbGlzdCwgdGhlIHdyYXBwaW5nXG4gICAgICAgICAgICAvLyBsaXN0IGl0ZW0gc2hvdWxkIGJlIHNwbGl0LiBPdGhlcndpc2UsIGJhaWwgb3V0IGFuZCBsZXQgbmV4dFxuICAgICAgICAgICAgLy8gY29tbWFuZCBoYW5kbGUgbGlmdGluZy5cbiAgICAgICAgICAgIGlmICgkZnJvbS5kZXB0aCA9PSAzIHx8ICRmcm9tLm5vZGUoLTMpLnR5cGUgIT0gaXRlbVR5cGUgfHxcbiAgICAgICAgICAgICAgICAkZnJvbS5pbmRleCgtMikgIT0gJGZyb20ubm9kZSgtMikuY2hpbGRDb3VudCAtIDEpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgaWYgKGRpc3BhdGNoKSB7XG4gICAgICAgICAgICAgICAgbGV0IHdyYXAgPSBGcmFnbWVudC5lbXB0eTtcbiAgICAgICAgICAgICAgICBsZXQgZGVwdGhCZWZvcmUgPSAkZnJvbS5pbmRleCgtMSkgPyAxIDogJGZyb20uaW5kZXgoLTIpID8gMiA6IDM7XG4gICAgICAgICAgICAgICAgLy8gQnVpbGQgYSBmcmFnbWVudCBjb250YWluaW5nIGVtcHR5IHZlcnNpb25zIG9mIHRoZSBzdHJ1Y3R1cmVcbiAgICAgICAgICAgICAgICAvLyBmcm9tIHRoZSBvdXRlciBsaXN0IGl0ZW0gdG8gdGhlIHBhcmVudCBub2RlIG9mIHRoZSBjdXJzb3JcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBkID0gJGZyb20uZGVwdGggLSBkZXB0aEJlZm9yZTsgZCA+PSAkZnJvbS5kZXB0aCAtIDM7IGQtLSlcbiAgICAgICAgICAgICAgICAgICAgd3JhcCA9IEZyYWdtZW50LmZyb20oJGZyb20ubm9kZShkKS5jb3B5KHdyYXApKTtcbiAgICAgICAgICAgICAgICBsZXQgZGVwdGhBZnRlciA9ICRmcm9tLmluZGV4QWZ0ZXIoLTEpIDwgJGZyb20ubm9kZSgtMikuY2hpbGRDb3VudCA/IDFcbiAgICAgICAgICAgICAgICAgICAgOiAkZnJvbS5pbmRleEFmdGVyKC0yKSA8ICRmcm9tLm5vZGUoLTMpLmNoaWxkQ291bnQgPyAyIDogMztcbiAgICAgICAgICAgICAgICAvLyBBZGQgYSBzZWNvbmQgbGlzdCBpdGVtIHdpdGggYW4gZW1wdHkgZGVmYXVsdCBzdGFydCBub2RlXG4gICAgICAgICAgICAgICAgd3JhcCA9IHdyYXAuYXBwZW5kKEZyYWdtZW50LmZyb20oaXRlbVR5cGUuY3JlYXRlQW5kRmlsbCgpKSk7XG4gICAgICAgICAgICAgICAgbGV0IHN0YXJ0ID0gJGZyb20uYmVmb3JlKCRmcm9tLmRlcHRoIC0gKGRlcHRoQmVmb3JlIC0gMSkpO1xuICAgICAgICAgICAgICAgIGxldCB0ciA9IHN0YXRlLnRyLnJlcGxhY2Uoc3RhcnQsICRmcm9tLmFmdGVyKC1kZXB0aEFmdGVyKSwgbmV3IFNsaWNlKHdyYXAsIDQgLSBkZXB0aEJlZm9yZSwgMCkpO1xuICAgICAgICAgICAgICAgIGxldCBzZWwgPSAtMTtcbiAgICAgICAgICAgICAgICB0ci5kb2Mubm9kZXNCZXR3ZWVuKHN0YXJ0LCB0ci5kb2MuY29udGVudC5zaXplLCAobm9kZSwgcG9zKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWwgPiAtMSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUuaXNUZXh0YmxvY2sgJiYgbm9kZS5jb250ZW50LnNpemUgPT0gMClcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbCA9IHBvcyArIDE7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKHNlbCA+IC0xKVxuICAgICAgICAgICAgICAgICAgICB0ci5zZXRTZWxlY3Rpb24oU2VsZWN0aW9uLm5lYXIodHIuZG9jLnJlc29sdmUoc2VsKSkpO1xuICAgICAgICAgICAgICAgIGRpc3BhdGNoKHRyLnNjcm9sbEludG9WaWV3KCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IG5leHRUeXBlID0gJHRvLnBvcyA9PSAkZnJvbS5lbmQoKSA/IGdyYW5kUGFyZW50LmNvbnRlbnRNYXRjaEF0KDApLmRlZmF1bHRUeXBlIDogbnVsbDtcbiAgICAgICAgbGV0IHRyID0gc3RhdGUudHIuZGVsZXRlKCRmcm9tLnBvcywgJHRvLnBvcyk7XG4gICAgICAgIGxldCB0eXBlcyA9IG5leHRUeXBlID8gW251bGwsIHsgdHlwZTogbmV4dFR5cGUgfV0gOiB1bmRlZmluZWQ7XG4gICAgICAgIGlmICghY2FuU3BsaXQodHIuZG9jLCAkZnJvbS5wb3MsIDIsIHR5cGVzKSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgaWYgKGRpc3BhdGNoKVxuICAgICAgICAgICAgZGlzcGF0Y2godHIuc3BsaXQoJGZyb20ucG9zLCAyLCB0eXBlcykuc2Nyb2xsSW50b1ZpZXcoKSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG59XG4vKipcbkNyZWF0ZSBhIGNvbW1hbmQgdG8gbGlmdCB0aGUgbGlzdCBpdGVtIGFyb3VuZCB0aGUgc2VsZWN0aW9uIHVwIGludG9cbmEgd3JhcHBpbmcgbGlzdC5cbiovXG5mdW5jdGlvbiBsaWZ0TGlzdEl0ZW0oaXRlbVR5cGUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHN0YXRlLCBkaXNwYXRjaCkge1xuICAgICAgICBsZXQgeyAkZnJvbSwgJHRvIH0gPSBzdGF0ZS5zZWxlY3Rpb247XG4gICAgICAgIGxldCByYW5nZSA9ICRmcm9tLmJsb2NrUmFuZ2UoJHRvLCBub2RlID0+IG5vZGUuY2hpbGRDb3VudCA+IDAgJiYgbm9kZS5maXJzdENoaWxkLnR5cGUgPT0gaXRlbVR5cGUpO1xuICAgICAgICBpZiAoIXJhbmdlKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAoIWRpc3BhdGNoKVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIGlmICgkZnJvbS5ub2RlKHJhbmdlLmRlcHRoIC0gMSkudHlwZSA9PSBpdGVtVHlwZSkgLy8gSW5zaWRlIGEgcGFyZW50IGxpc3RcbiAgICAgICAgICAgIHJldHVybiBsaWZ0VG9PdXRlckxpc3Qoc3RhdGUsIGRpc3BhdGNoLCBpdGVtVHlwZSwgcmFuZ2UpO1xuICAgICAgICBlbHNlIC8vIE91dGVyIGxpc3Qgbm9kZVxuICAgICAgICAgICAgcmV0dXJuIGxpZnRPdXRPZkxpc3Qoc3RhdGUsIGRpc3BhdGNoLCByYW5nZSk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGxpZnRUb091dGVyTGlzdChzdGF0ZSwgZGlzcGF0Y2gsIGl0ZW1UeXBlLCByYW5nZSkge1xuICAgIGxldCB0ciA9IHN0YXRlLnRyLCBlbmQgPSByYW5nZS5lbmQsIGVuZE9mTGlzdCA9IHJhbmdlLiR0by5lbmQocmFuZ2UuZGVwdGgpO1xuICAgIGlmIChlbmQgPCBlbmRPZkxpc3QpIHtcbiAgICAgICAgLy8gVGhlcmUgYXJlIHNpYmxpbmdzIGFmdGVyIHRoZSBsaWZ0ZWQgaXRlbXMsIHdoaWNoIG11c3QgYmVjb21lXG4gICAgICAgIC8vIGNoaWxkcmVuIG9mIHRoZSBsYXN0IGl0ZW1cbiAgICAgICAgdHIuc3RlcChuZXcgUmVwbGFjZUFyb3VuZFN0ZXAoZW5kIC0gMSwgZW5kT2ZMaXN0LCBlbmQsIGVuZE9mTGlzdCwgbmV3IFNsaWNlKEZyYWdtZW50LmZyb20oaXRlbVR5cGUuY3JlYXRlKG51bGwsIHJhbmdlLnBhcmVudC5jb3B5KCkpKSwgMSwgMCksIDEsIHRydWUpKTtcbiAgICAgICAgcmFuZ2UgPSBuZXcgTm9kZVJhbmdlKHRyLmRvYy5yZXNvbHZlKHJhbmdlLiRmcm9tLnBvcyksIHRyLmRvYy5yZXNvbHZlKGVuZE9mTGlzdCksIHJhbmdlLmRlcHRoKTtcbiAgICB9XG4gICAgZGlzcGF0Y2godHIubGlmdChyYW5nZSwgbGlmdFRhcmdldChyYW5nZSkpLnNjcm9sbEludG9WaWV3KCkpO1xuICAgIHJldHVybiB0cnVlO1xufVxuZnVuY3Rpb24gbGlmdE91dE9mTGlzdChzdGF0ZSwgZGlzcGF0Y2gsIHJhbmdlKSB7XG4gICAgbGV0IHRyID0gc3RhdGUudHIsIGxpc3QgPSByYW5nZS5wYXJlbnQ7XG4gICAgLy8gTWVyZ2UgdGhlIGxpc3QgaXRlbXMgaW50byBhIHNpbmdsZSBiaWcgaXRlbVxuICAgIGZvciAobGV0IHBvcyA9IHJhbmdlLmVuZCwgaSA9IHJhbmdlLmVuZEluZGV4IC0gMSwgZSA9IHJhbmdlLnN0YXJ0SW5kZXg7IGkgPiBlOyBpLS0pIHtcbiAgICAgICAgcG9zIC09IGxpc3QuY2hpbGQoaSkubm9kZVNpemU7XG4gICAgICAgIHRyLmRlbGV0ZShwb3MgLSAxLCBwb3MgKyAxKTtcbiAgICB9XG4gICAgbGV0ICRzdGFydCA9IHRyLmRvYy5yZXNvbHZlKHJhbmdlLnN0YXJ0KSwgaXRlbSA9ICRzdGFydC5ub2RlQWZ0ZXI7XG4gICAgaWYgKHRyLm1hcHBpbmcubWFwKHJhbmdlLmVuZCkgIT0gcmFuZ2Uuc3RhcnQgKyAkc3RhcnQubm9kZUFmdGVyLm5vZGVTaXplKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgbGV0IGF0U3RhcnQgPSByYW5nZS5zdGFydEluZGV4ID09IDAsIGF0RW5kID0gcmFuZ2UuZW5kSW5kZXggPT0gbGlzdC5jaGlsZENvdW50O1xuICAgIGxldCBwYXJlbnQgPSAkc3RhcnQubm9kZSgtMSksIGluZGV4QmVmb3JlID0gJHN0YXJ0LmluZGV4KC0xKTtcbiAgICBpZiAoIXBhcmVudC5jYW5SZXBsYWNlKGluZGV4QmVmb3JlICsgKGF0U3RhcnQgPyAwIDogMSksIGluZGV4QmVmb3JlICsgMSwgaXRlbS5jb250ZW50LmFwcGVuZChhdEVuZCA/IEZyYWdtZW50LmVtcHR5IDogRnJhZ21lbnQuZnJvbShsaXN0KSkpKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgbGV0IHN0YXJ0ID0gJHN0YXJ0LnBvcywgZW5kID0gc3RhcnQgKyBpdGVtLm5vZGVTaXplO1xuICAgIC8vIFN0cmlwIG9mZiB0aGUgc3Vycm91bmRpbmcgbGlzdC4gQXQgdGhlIHNpZGVzIHdoZXJlIHdlJ3JlIG5vdCBhdFxuICAgIC8vIHRoZSBlbmQgb2YgdGhlIGxpc3QsIHRoZSBleGlzdGluZyBsaXN0IGlzIGNsb3NlZC4gQXQgc2lkZXMgd2hlcmVcbiAgICAvLyB0aGlzIGlzIHRoZSBlbmQsIGl0IGlzIG92ZXJ3cml0dGVuIHRvIGl0cyBlbmQuXG4gICAgdHIuc3RlcChuZXcgUmVwbGFjZUFyb3VuZFN0ZXAoc3RhcnQgLSAoYXRTdGFydCA/IDEgOiAwKSwgZW5kICsgKGF0RW5kID8gMSA6IDApLCBzdGFydCArIDEsIGVuZCAtIDEsIG5ldyBTbGljZSgoYXRTdGFydCA/IEZyYWdtZW50LmVtcHR5IDogRnJhZ21lbnQuZnJvbShsaXN0LmNvcHkoRnJhZ21lbnQuZW1wdHkpKSlcbiAgICAgICAgLmFwcGVuZChhdEVuZCA/IEZyYWdtZW50LmVtcHR5IDogRnJhZ21lbnQuZnJvbShsaXN0LmNvcHkoRnJhZ21lbnQuZW1wdHkpKSksIGF0U3RhcnQgPyAwIDogMSwgYXRFbmQgPyAwIDogMSksIGF0U3RhcnQgPyAwIDogMSkpO1xuICAgIGRpc3BhdGNoKHRyLnNjcm9sbEludG9WaWV3KCkpO1xuICAgIHJldHVybiB0cnVlO1xufVxuLyoqXG5DcmVhdGUgYSBjb21tYW5kIHRvIHNpbmsgdGhlIGxpc3QgaXRlbSBhcm91bmQgdGhlIHNlbGVjdGlvbiBkb3duXG5pbnRvIGFuIGlubmVyIGxpc3QuXG4qL1xuZnVuY3Rpb24gc2lua0xpc3RJdGVtKGl0ZW1UeXBlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzdGF0ZSwgZGlzcGF0Y2gpIHtcbiAgICAgICAgbGV0IHsgJGZyb20sICR0byB9ID0gc3RhdGUuc2VsZWN0aW9uO1xuICAgICAgICBsZXQgcmFuZ2UgPSAkZnJvbS5ibG9ja1JhbmdlKCR0bywgbm9kZSA9PiBub2RlLmNoaWxkQ291bnQgPiAwICYmIG5vZGUuZmlyc3RDaGlsZC50eXBlID09IGl0ZW1UeXBlKTtcbiAgICAgICAgaWYgKCFyYW5nZSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgbGV0IHN0YXJ0SW5kZXggPSByYW5nZS5zdGFydEluZGV4O1xuICAgICAgICBpZiAoc3RhcnRJbmRleCA9PSAwKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBsZXQgcGFyZW50ID0gcmFuZ2UucGFyZW50LCBub2RlQmVmb3JlID0gcGFyZW50LmNoaWxkKHN0YXJ0SW5kZXggLSAxKTtcbiAgICAgICAgaWYgKG5vZGVCZWZvcmUudHlwZSAhPSBpdGVtVHlwZSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgaWYgKGRpc3BhdGNoKSB7XG4gICAgICAgICAgICBsZXQgbmVzdGVkQmVmb3JlID0gbm9kZUJlZm9yZS5sYXN0Q2hpbGQgJiYgbm9kZUJlZm9yZS5sYXN0Q2hpbGQudHlwZSA9PSBwYXJlbnQudHlwZTtcbiAgICAgICAgICAgIGxldCBpbm5lciA9IEZyYWdtZW50LmZyb20obmVzdGVkQmVmb3JlID8gaXRlbVR5cGUuY3JlYXRlKCkgOiBudWxsKTtcbiAgICAgICAgICAgIGxldCBzbGljZSA9IG5ldyBTbGljZShGcmFnbWVudC5mcm9tKGl0ZW1UeXBlLmNyZWF0ZShudWxsLCBGcmFnbWVudC5mcm9tKHBhcmVudC50eXBlLmNyZWF0ZShudWxsLCBpbm5lcikpKSksIG5lc3RlZEJlZm9yZSA/IDMgOiAxLCAwKTtcbiAgICAgICAgICAgIGxldCBiZWZvcmUgPSByYW5nZS5zdGFydCwgYWZ0ZXIgPSByYW5nZS5lbmQ7XG4gICAgICAgICAgICBkaXNwYXRjaChzdGF0ZS50ci5zdGVwKG5ldyBSZXBsYWNlQXJvdW5kU3RlcChiZWZvcmUgLSAobmVzdGVkQmVmb3JlID8gMyA6IDEpLCBhZnRlciwgYmVmb3JlLCBhZnRlciwgc2xpY2UsIDEsIHRydWUpKVxuICAgICAgICAgICAgICAgIC5zY3JvbGxJbnRvVmlldygpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xufVxuXG5leHBvcnQgeyBhZGRMaXN0Tm9kZXMsIGJ1bGxldExpc3QsIGxpZnRMaXN0SXRlbSwgbGlzdEl0ZW0sIG9yZGVyZWRMaXN0LCBzaW5rTGlzdEl0ZW0sIHNwbGl0TGlzdEl0ZW0sIHdyYXBJbkxpc3QgfTtcbiIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKSxcbiAgICByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgRGF0YVZpZXcgPSBnZXROYXRpdmUocm9vdCwgJ0RhdGFWaWV3Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gRGF0YVZpZXc7XG4iLCJ2YXIgaGFzaENsZWFyID0gcmVxdWlyZSgnLi9faGFzaENsZWFyJyksXG4gICAgaGFzaERlbGV0ZSA9IHJlcXVpcmUoJy4vX2hhc2hEZWxldGUnKSxcbiAgICBoYXNoR2V0ID0gcmVxdWlyZSgnLi9faGFzaEdldCcpLFxuICAgIGhhc2hIYXMgPSByZXF1aXJlKCcuL19oYXNoSGFzJyksXG4gICAgaGFzaFNldCA9IHJlcXVpcmUoJy4vX2hhc2hTZXQnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgaGFzaCBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIEhhc2goZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgSGFzaGAuXG5IYXNoLnByb3RvdHlwZS5jbGVhciA9IGhhc2hDbGVhcjtcbkhhc2gucHJvdG90eXBlWydkZWxldGUnXSA9IGhhc2hEZWxldGU7XG5IYXNoLnByb3RvdHlwZS5nZXQgPSBoYXNoR2V0O1xuSGFzaC5wcm90b3R5cGUuaGFzID0gaGFzaEhhcztcbkhhc2gucHJvdG90eXBlLnNldCA9IGhhc2hTZXQ7XG5cbm1vZHVsZS5leHBvcnRzID0gSGFzaDtcbiIsInZhciBsaXN0Q2FjaGVDbGVhciA9IHJlcXVpcmUoJy4vX2xpc3RDYWNoZUNsZWFyJyksXG4gICAgbGlzdENhY2hlRGVsZXRlID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlRGVsZXRlJyksXG4gICAgbGlzdENhY2hlR2V0ID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlR2V0JyksXG4gICAgbGlzdENhY2hlSGFzID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlSGFzJyksXG4gICAgbGlzdENhY2hlU2V0ID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlU2V0Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBsaXN0IGNhY2hlIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gTGlzdENhY2hlKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYExpc3RDYWNoZWAuXG5MaXN0Q2FjaGUucHJvdG90eXBlLmNsZWFyID0gbGlzdENhY2hlQ2xlYXI7XG5MaXN0Q2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IGxpc3RDYWNoZURlbGV0ZTtcbkxpc3RDYWNoZS5wcm90b3R5cGUuZ2V0ID0gbGlzdENhY2hlR2V0O1xuTGlzdENhY2hlLnByb3RvdHlwZS5oYXMgPSBsaXN0Q2FjaGVIYXM7XG5MaXN0Q2FjaGUucHJvdG90eXBlLnNldCA9IGxpc3RDYWNoZVNldDtcblxubW9kdWxlLmV4cG9ydHMgPSBMaXN0Q2FjaGU7XG4iLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyksXG4gICAgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIE1hcCA9IGdldE5hdGl2ZShyb290LCAnTWFwJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gTWFwO1xuIiwidmFyIG1hcENhY2hlQ2xlYXIgPSByZXF1aXJlKCcuL19tYXBDYWNoZUNsZWFyJyksXG4gICAgbWFwQ2FjaGVEZWxldGUgPSByZXF1aXJlKCcuL19tYXBDYWNoZURlbGV0ZScpLFxuICAgIG1hcENhY2hlR2V0ID0gcmVxdWlyZSgnLi9fbWFwQ2FjaGVHZXQnKSxcbiAgICBtYXBDYWNoZUhhcyA9IHJlcXVpcmUoJy4vX21hcENhY2hlSGFzJyksXG4gICAgbWFwQ2FjaGVTZXQgPSByZXF1aXJlKCcuL19tYXBDYWNoZVNldCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBtYXAgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gTWFwQ2FjaGUoZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgTWFwQ2FjaGVgLlxuTWFwQ2FjaGUucHJvdG90eXBlLmNsZWFyID0gbWFwQ2FjaGVDbGVhcjtcbk1hcENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBtYXBDYWNoZURlbGV0ZTtcbk1hcENhY2hlLnByb3RvdHlwZS5nZXQgPSBtYXBDYWNoZUdldDtcbk1hcENhY2hlLnByb3RvdHlwZS5oYXMgPSBtYXBDYWNoZUhhcztcbk1hcENhY2hlLnByb3RvdHlwZS5zZXQgPSBtYXBDYWNoZVNldDtcblxubW9kdWxlLmV4cG9ydHMgPSBNYXBDYWNoZTtcbiIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKSxcbiAgICByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgUHJvbWlzZSA9IGdldE5hdGl2ZShyb290LCAnUHJvbWlzZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFByb21pc2U7XG4iLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyksXG4gICAgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIFNldCA9IGdldE5hdGl2ZShyb290LCAnU2V0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gU2V0O1xuIiwidmFyIE1hcENhY2hlID0gcmVxdWlyZSgnLi9fTWFwQ2FjaGUnKSxcbiAgICBzZXRDYWNoZUFkZCA9IHJlcXVpcmUoJy4vX3NldENhY2hlQWRkJyksXG4gICAgc2V0Q2FjaGVIYXMgPSByZXF1aXJlKCcuL19zZXRDYWNoZUhhcycpO1xuXG4vKipcbiAqXG4gKiBDcmVhdGVzIGFuIGFycmF5IGNhY2hlIG9iamVjdCB0byBzdG9yZSB1bmlxdWUgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIFNldENhY2hlKHZhbHVlcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHZhbHVlcyA9PSBudWxsID8gMCA6IHZhbHVlcy5sZW5ndGg7XG5cbiAgdGhpcy5fX2RhdGFfXyA9IG5ldyBNYXBDYWNoZTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB0aGlzLmFkZCh2YWx1ZXNbaW5kZXhdKTtcbiAgfVxufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgU2V0Q2FjaGVgLlxuU2V0Q2FjaGUucHJvdG90eXBlLmFkZCA9IFNldENhY2hlLnByb3RvdHlwZS5wdXNoID0gc2V0Q2FjaGVBZGQ7XG5TZXRDYWNoZS5wcm90b3R5cGUuaGFzID0gc2V0Q2FjaGVIYXM7XG5cbm1vZHVsZS5leHBvcnRzID0gU2V0Q2FjaGU7XG4iLCJ2YXIgTGlzdENhY2hlID0gcmVxdWlyZSgnLi9fTGlzdENhY2hlJyksXG4gICAgc3RhY2tDbGVhciA9IHJlcXVpcmUoJy4vX3N0YWNrQ2xlYXInKSxcbiAgICBzdGFja0RlbGV0ZSA9IHJlcXVpcmUoJy4vX3N0YWNrRGVsZXRlJyksXG4gICAgc3RhY2tHZXQgPSByZXF1aXJlKCcuL19zdGFja0dldCcpLFxuICAgIHN0YWNrSGFzID0gcmVxdWlyZSgnLi9fc3RhY2tIYXMnKSxcbiAgICBzdGFja1NldCA9IHJlcXVpcmUoJy4vX3N0YWNrU2V0Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIHN0YWNrIGNhY2hlIG9iamVjdCB0byBzdG9yZSBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIFN0YWNrKGVudHJpZXMpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fID0gbmV3IExpc3RDYWNoZShlbnRyaWVzKTtcbiAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgU3RhY2tgLlxuU3RhY2sucHJvdG90eXBlLmNsZWFyID0gc3RhY2tDbGVhcjtcblN0YWNrLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBzdGFja0RlbGV0ZTtcblN0YWNrLnByb3RvdHlwZS5nZXQgPSBzdGFja0dldDtcblN0YWNrLnByb3RvdHlwZS5oYXMgPSBzdGFja0hhcztcblN0YWNrLnByb3RvdHlwZS5zZXQgPSBzdGFja1NldDtcblxubW9kdWxlLmV4cG9ydHMgPSBTdGFjaztcbiIsInZhciByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBTeW1ib2wgPSByb290LlN5bWJvbDtcblxubW9kdWxlLmV4cG9ydHMgPSBTeW1ib2w7XG4iLCJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgVWludDhBcnJheSA9IHJvb3QuVWludDhBcnJheTtcblxubW9kdWxlLmV4cG9ydHMgPSBVaW50OEFycmF5O1xuIiwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpLFxuICAgIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBXZWFrTWFwID0gZ2V0TmF0aXZlKHJvb3QsICdXZWFrTWFwJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gV2Vha01hcDtcbiIsIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmZvckVhY2hgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICovXG5mdW5jdGlvbiBhcnJheUVhY2goYXJyYXksIGl0ZXJhdGVlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBpZiAoaXRlcmF0ZWUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpID09PSBmYWxzZSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBhcnJheTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheUVhY2g7XG4iLCIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5maWx0ZXJgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmaWx0ZXJlZCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gYXJyYXlGaWx0ZXIoYXJyYXksIHByZWRpY2F0ZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgcmVzdWx0ID0gW107XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gdmFsdWU7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlGaWx0ZXI7XG4iLCJ2YXIgYmFzZVRpbWVzID0gcmVxdWlyZSgnLi9fYmFzZVRpbWVzJyksXG4gICAgaXNBcmd1bWVudHMgPSByZXF1aXJlKCcuL2lzQXJndW1lbnRzJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpLFxuICAgIGlzQnVmZmVyID0gcmVxdWlyZSgnLi9pc0J1ZmZlcicpLFxuICAgIGlzSW5kZXggPSByZXF1aXJlKCcuL19pc0luZGV4JyksXG4gICAgaXNUeXBlZEFycmF5ID0gcmVxdWlyZSgnLi9pc1R5cGVkQXJyYXknKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIHRoZSBhcnJheS1saWtlIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtib29sZWFufSBpbmhlcml0ZWQgU3BlY2lmeSByZXR1cm5pbmcgaW5oZXJpdGVkIHByb3BlcnR5IG5hbWVzLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gYXJyYXlMaWtlS2V5cyh2YWx1ZSwgaW5oZXJpdGVkKSB7XG4gIHZhciBpc0FyciA9IGlzQXJyYXkodmFsdWUpLFxuICAgICAgaXNBcmcgPSAhaXNBcnIgJiYgaXNBcmd1bWVudHModmFsdWUpLFxuICAgICAgaXNCdWZmID0gIWlzQXJyICYmICFpc0FyZyAmJiBpc0J1ZmZlcih2YWx1ZSksXG4gICAgICBpc1R5cGUgPSAhaXNBcnIgJiYgIWlzQXJnICYmICFpc0J1ZmYgJiYgaXNUeXBlZEFycmF5KHZhbHVlKSxcbiAgICAgIHNraXBJbmRleGVzID0gaXNBcnIgfHwgaXNBcmcgfHwgaXNCdWZmIHx8IGlzVHlwZSxcbiAgICAgIHJlc3VsdCA9IHNraXBJbmRleGVzID8gYmFzZVRpbWVzKHZhbHVlLmxlbmd0aCwgU3RyaW5nKSA6IFtdLFxuICAgICAgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aDtcblxuICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICBpZiAoKGluaGVyaXRlZCB8fCBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBrZXkpKSAmJlxuICAgICAgICAhKHNraXBJbmRleGVzICYmIChcbiAgICAgICAgICAgLy8gU2FmYXJpIDkgaGFzIGVudW1lcmFibGUgYGFyZ3VtZW50cy5sZW5ndGhgIGluIHN0cmljdCBtb2RlLlxuICAgICAgICAgICBrZXkgPT0gJ2xlbmd0aCcgfHxcbiAgICAgICAgICAgLy8gTm9kZS5qcyAwLjEwIGhhcyBlbnVtZXJhYmxlIG5vbi1pbmRleCBwcm9wZXJ0aWVzIG9uIGJ1ZmZlcnMuXG4gICAgICAgICAgIChpc0J1ZmYgJiYgKGtleSA9PSAnb2Zmc2V0JyB8fCBrZXkgPT0gJ3BhcmVudCcpKSB8fFxuICAgICAgICAgICAvLyBQaGFudG9tSlMgMiBoYXMgZW51bWVyYWJsZSBub24taW5kZXggcHJvcGVydGllcyBvbiB0eXBlZCBhcnJheXMuXG4gICAgICAgICAgIChpc1R5cGUgJiYgKGtleSA9PSAnYnVmZmVyJyB8fCBrZXkgPT0gJ2J5dGVMZW5ndGgnIHx8IGtleSA9PSAnYnl0ZU9mZnNldCcpKSB8fFxuICAgICAgICAgICAvLyBTa2lwIGluZGV4IHByb3BlcnRpZXMuXG4gICAgICAgICAgIGlzSW5kZXgoa2V5LCBsZW5ndGgpXG4gICAgICAgICkpKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFycmF5TGlrZUtleXM7XG4iLCIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5tYXBgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZVxuICogc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gYXJyYXlNYXAoYXJyYXksIGl0ZXJhdGVlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgcmVzdWx0W2luZGV4XSA9IGl0ZXJhdGVlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFycmF5TWFwO1xuIiwiLyoqXG4gKiBBcHBlbmRzIHRoZSBlbGVtZW50cyBvZiBgdmFsdWVzYCB0byBgYXJyYXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gYXBwZW5kLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gKi9cbmZ1bmN0aW9uIGFycmF5UHVzaChhcnJheSwgdmFsdWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgIG9mZnNldCA9IGFycmF5Lmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGFycmF5W29mZnNldCArIGluZGV4XSA9IHZhbHVlc1tpbmRleF07XG4gIH1cbiAgcmV0dXJuIGFycmF5O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFycmF5UHVzaDtcbiIsIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnNvbWVgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZVxuICogc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW55IGVsZW1lbnQgcGFzc2VzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gKiAgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBhcnJheVNvbWUoYXJyYXksIHByZWRpY2F0ZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgaWYgKHByZWRpY2F0ZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlTb21lO1xuIiwidmFyIGJhc2VBc3NpZ25WYWx1ZSA9IHJlcXVpcmUoJy4vX2Jhc2VBc3NpZ25WYWx1ZScpLFxuICAgIGVxID0gcmVxdWlyZSgnLi9lcScpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEFzc2lnbnMgYHZhbHVlYCB0byBga2V5YCBvZiBgb2JqZWN0YCBpZiB0aGUgZXhpc3RpbmcgdmFsdWUgaXMgbm90IGVxdWl2YWxlbnRcbiAqIHVzaW5nIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAqL1xuZnVuY3Rpb24gYXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHZhciBvYmpWYWx1ZSA9IG9iamVjdFtrZXldO1xuICBpZiAoIShoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSAmJiBlcShvYmpWYWx1ZSwgdmFsdWUpKSB8fFxuICAgICAgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkpIHtcbiAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFzc2lnblZhbHVlO1xuIiwidmFyIGVxID0gcmVxdWlyZSgnLi9lcScpO1xuXG4vKipcbiAqIEdldHMgdGhlIGluZGV4IGF0IHdoaWNoIHRoZSBga2V5YCBpcyBmb3VuZCBpbiBgYXJyYXlgIG9mIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0geyp9IGtleSBUaGUga2V5IHRvIHNlYXJjaCBmb3IuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICovXG5mdW5jdGlvbiBhc3NvY0luZGV4T2YoYXJyYXksIGtleSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICBpZiAoZXEoYXJyYXlbbGVuZ3RoXVswXSwga2V5KSkge1xuICAgICAgcmV0dXJuIGxlbmd0aDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFzc29jSW5kZXhPZjtcbiIsInZhciBjb3B5T2JqZWN0ID0gcmVxdWlyZSgnLi9fY29weU9iamVjdCcpLFxuICAgIGtleXMgPSByZXF1aXJlKCcuL2tleXMnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5hc3NpZ25gIHdpdGhvdXQgc3VwcG9ydCBmb3IgbXVsdGlwbGUgc291cmNlc1xuICogb3IgYGN1c3RvbWl6ZXJgIGZ1bmN0aW9ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VBc3NpZ24ob2JqZWN0LCBzb3VyY2UpIHtcbiAgcmV0dXJuIG9iamVjdCAmJiBjb3B5T2JqZWN0KHNvdXJjZSwga2V5cyhzb3VyY2UpLCBvYmplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VBc3NpZ247XG4iLCJ2YXIgY29weU9iamVjdCA9IHJlcXVpcmUoJy4vX2NvcHlPYmplY3QnKSxcbiAgICBrZXlzSW4gPSByZXF1aXJlKCcuL2tleXNJbicpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmFzc2lnbkluYCB3aXRob3V0IHN1cHBvcnQgZm9yIG11bHRpcGxlIHNvdXJjZXNcbiAqIG9yIGBjdXN0b21pemVyYCBmdW5jdGlvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG5mdW5jdGlvbiBiYXNlQXNzaWduSW4ob2JqZWN0LCBzb3VyY2UpIHtcbiAgcmV0dXJuIG9iamVjdCAmJiBjb3B5T2JqZWN0KHNvdXJjZSwga2V5c0luKHNvdXJjZSksIG9iamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUFzc2lnbkluO1xuIiwidmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fZGVmaW5lUHJvcGVydHknKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgYXNzaWduVmFsdWVgIGFuZCBgYXNzaWduTWVyZ2VWYWx1ZWAgd2l0aG91dFxuICogdmFsdWUgY2hlY2tzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSA9PSAnX19wcm90b19fJyAmJiBkZWZpbmVQcm9wZXJ0eSkge1xuICAgIGRlZmluZVByb3BlcnR5KG9iamVjdCwga2V5LCB7XG4gICAgICAnY29uZmlndXJhYmxlJzogdHJ1ZSxcbiAgICAgICdlbnVtZXJhYmxlJzogdHJ1ZSxcbiAgICAgICd2YWx1ZSc6IHZhbHVlLFxuICAgICAgJ3dyaXRhYmxlJzogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlQXNzaWduVmFsdWU7XG4iLCJ2YXIgU3RhY2sgPSByZXF1aXJlKCcuL19TdGFjaycpLFxuICAgIGFycmF5RWFjaCA9IHJlcXVpcmUoJy4vX2FycmF5RWFjaCcpLFxuICAgIGFzc2lnblZhbHVlID0gcmVxdWlyZSgnLi9fYXNzaWduVmFsdWUnKSxcbiAgICBiYXNlQXNzaWduID0gcmVxdWlyZSgnLi9fYmFzZUFzc2lnbicpLFxuICAgIGJhc2VBc3NpZ25JbiA9IHJlcXVpcmUoJy4vX2Jhc2VBc3NpZ25JbicpLFxuICAgIGNsb25lQnVmZmVyID0gcmVxdWlyZSgnLi9fY2xvbmVCdWZmZXInKSxcbiAgICBjb3B5QXJyYXkgPSByZXF1aXJlKCcuL19jb3B5QXJyYXknKSxcbiAgICBjb3B5U3ltYm9scyA9IHJlcXVpcmUoJy4vX2NvcHlTeW1ib2xzJyksXG4gICAgY29weVN5bWJvbHNJbiA9IHJlcXVpcmUoJy4vX2NvcHlTeW1ib2xzSW4nKSxcbiAgICBnZXRBbGxLZXlzID0gcmVxdWlyZSgnLi9fZ2V0QWxsS2V5cycpLFxuICAgIGdldEFsbEtleXNJbiA9IHJlcXVpcmUoJy4vX2dldEFsbEtleXNJbicpLFxuICAgIGdldFRhZyA9IHJlcXVpcmUoJy4vX2dldFRhZycpLFxuICAgIGluaXRDbG9uZUFycmF5ID0gcmVxdWlyZSgnLi9faW5pdENsb25lQXJyYXknKSxcbiAgICBpbml0Q2xvbmVCeVRhZyA9IHJlcXVpcmUoJy4vX2luaXRDbG9uZUJ5VGFnJyksXG4gICAgaW5pdENsb25lT2JqZWN0ID0gcmVxdWlyZSgnLi9faW5pdENsb25lT2JqZWN0JyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpLFxuICAgIGlzQnVmZmVyID0gcmVxdWlyZSgnLi9pc0J1ZmZlcicpLFxuICAgIGlzTWFwID0gcmVxdWlyZSgnLi9pc01hcCcpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpLFxuICAgIGlzU2V0ID0gcmVxdWlyZSgnLi9pc1NldCcpLFxuICAgIGtleXMgPSByZXF1aXJlKCcuL2tleXMnKSxcbiAgICBrZXlzSW4gPSByZXF1aXJlKCcuL2tleXNJbicpO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciBjbG9uaW5nLiAqL1xudmFyIENMT05FX0RFRVBfRkxBRyA9IDEsXG4gICAgQ0xPTkVfRkxBVF9GTEFHID0gMixcbiAgICBDTE9ORV9TWU1CT0xTX0ZMQUcgPSA0O1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nLFxuICAgIGFycmF5VGFnID0gJ1tvYmplY3QgQXJyYXldJyxcbiAgICBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXScsXG4gICAgZXJyb3JUYWcgPSAnW29iamVjdCBFcnJvcl0nLFxuICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgIGdlblRhZyA9ICdbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXScsXG4gICAgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgbnVtYmVyVGFnID0gJ1tvYmplY3QgTnVtYmVyXScsXG4gICAgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XScsXG4gICAgcmVnZXhwVGFnID0gJ1tvYmplY3QgUmVnRXhwXScsXG4gICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgc3RyaW5nVGFnID0gJ1tvYmplY3QgU3RyaW5nXScsXG4gICAgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXScsXG4gICAgd2Vha01hcFRhZyA9ICdbb2JqZWN0IFdlYWtNYXBdJztcblxudmFyIGFycmF5QnVmZmVyVGFnID0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJyxcbiAgICBkYXRhVmlld1RhZyA9ICdbb2JqZWN0IERhdGFWaWV3XScsXG4gICAgZmxvYXQzMlRhZyA9ICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nLFxuICAgIGZsb2F0NjRUYWcgPSAnW29iamVjdCBGbG9hdDY0QXJyYXldJyxcbiAgICBpbnQ4VGFnID0gJ1tvYmplY3QgSW50OEFycmF5XScsXG4gICAgaW50MTZUYWcgPSAnW29iamVjdCBJbnQxNkFycmF5XScsXG4gICAgaW50MzJUYWcgPSAnW29iamVjdCBJbnQzMkFycmF5XScsXG4gICAgdWludDhUYWcgPSAnW29iamVjdCBVaW50OEFycmF5XScsXG4gICAgdWludDhDbGFtcGVkVGFnID0gJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJyxcbiAgICB1aW50MTZUYWcgPSAnW29iamVjdCBVaW50MTZBcnJheV0nLFxuICAgIHVpbnQzMlRhZyA9ICdbb2JqZWN0IFVpbnQzMkFycmF5XSc7XG5cbi8qKiBVc2VkIHRvIGlkZW50aWZ5IGB0b1N0cmluZ1RhZ2AgdmFsdWVzIHN1cHBvcnRlZCBieSBgXy5jbG9uZWAuICovXG52YXIgY2xvbmVhYmxlVGFncyA9IHt9O1xuY2xvbmVhYmxlVGFnc1thcmdzVGFnXSA9IGNsb25lYWJsZVRhZ3NbYXJyYXlUYWddID1cbmNsb25lYWJsZVRhZ3NbYXJyYXlCdWZmZXJUYWddID0gY2xvbmVhYmxlVGFnc1tkYXRhVmlld1RhZ10gPVxuY2xvbmVhYmxlVGFnc1tib29sVGFnXSA9IGNsb25lYWJsZVRhZ3NbZGF0ZVRhZ10gPVxuY2xvbmVhYmxlVGFnc1tmbG9hdDMyVGFnXSA9IGNsb25lYWJsZVRhZ3NbZmxvYXQ2NFRhZ10gPVxuY2xvbmVhYmxlVGFnc1tpbnQ4VGFnXSA9IGNsb25lYWJsZVRhZ3NbaW50MTZUYWddID1cbmNsb25lYWJsZVRhZ3NbaW50MzJUYWddID0gY2xvbmVhYmxlVGFnc1ttYXBUYWddID1cbmNsb25lYWJsZVRhZ3NbbnVtYmVyVGFnXSA9IGNsb25lYWJsZVRhZ3Nbb2JqZWN0VGFnXSA9XG5jbG9uZWFibGVUYWdzW3JlZ2V4cFRhZ10gPSBjbG9uZWFibGVUYWdzW3NldFRhZ10gPVxuY2xvbmVhYmxlVGFnc1tzdHJpbmdUYWddID0gY2xvbmVhYmxlVGFnc1tzeW1ib2xUYWddID1cbmNsb25lYWJsZVRhZ3NbdWludDhUYWddID0gY2xvbmVhYmxlVGFnc1t1aW50OENsYW1wZWRUYWddID1cbmNsb25lYWJsZVRhZ3NbdWludDE2VGFnXSA9IGNsb25lYWJsZVRhZ3NbdWludDMyVGFnXSA9IHRydWU7XG5jbG9uZWFibGVUYWdzW2Vycm9yVGFnXSA9IGNsb25lYWJsZVRhZ3NbZnVuY1RhZ10gPVxuY2xvbmVhYmxlVGFnc1t3ZWFrTWFwVGFnXSA9IGZhbHNlO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNsb25lYCBhbmQgYF8uY2xvbmVEZWVwYCB3aGljaCB0cmFja3NcbiAqIHRyYXZlcnNlZCBvYmplY3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjbG9uZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy5cbiAqICAxIC0gRGVlcCBjbG9uZVxuICogIDIgLSBGbGF0dGVuIGluaGVyaXRlZCBwcm9wZXJ0aWVzXG4gKiAgNCAtIENsb25lIHN5bWJvbHNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNsb25pbmcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2tleV0gVGhlIGtleSBvZiBgdmFsdWVgLlxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBwYXJlbnQgb2JqZWN0IG9mIGB2YWx1ZWAuXG4gKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIG9iamVjdHMgYW5kIHRoZWlyIGNsb25lIGNvdW50ZXJwYXJ0cy5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBjbG9uZWQgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGJhc2VDbG9uZSh2YWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwga2V5LCBvYmplY3QsIHN0YWNrKSB7XG4gIHZhciByZXN1bHQsXG4gICAgICBpc0RlZXAgPSBiaXRtYXNrICYgQ0xPTkVfREVFUF9GTEFHLFxuICAgICAgaXNGbGF0ID0gYml0bWFzayAmIENMT05FX0ZMQVRfRkxBRyxcbiAgICAgIGlzRnVsbCA9IGJpdG1hc2sgJiBDTE9ORV9TWU1CT0xTX0ZMQUc7XG5cbiAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICByZXN1bHQgPSBvYmplY3QgPyBjdXN0b21pemVyKHZhbHVlLCBrZXksIG9iamVjdCwgc3RhY2spIDogY3VzdG9taXplcih2YWx1ZSk7XG4gIH1cbiAgaWYgKHJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICB2YXIgaXNBcnIgPSBpc0FycmF5KHZhbHVlKTtcbiAgaWYgKGlzQXJyKSB7XG4gICAgcmVzdWx0ID0gaW5pdENsb25lQXJyYXkodmFsdWUpO1xuICAgIGlmICghaXNEZWVwKSB7XG4gICAgICByZXR1cm4gY29weUFycmF5KHZhbHVlLCByZXN1bHQpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgdGFnID0gZ2V0VGFnKHZhbHVlKSxcbiAgICAgICAgaXNGdW5jID0gdGFnID09IGZ1bmNUYWcgfHwgdGFnID09IGdlblRhZztcblxuICAgIGlmIChpc0J1ZmZlcih2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjbG9uZUJ1ZmZlcih2YWx1ZSwgaXNEZWVwKTtcbiAgICB9XG4gICAgaWYgKHRhZyA9PSBvYmplY3RUYWcgfHwgdGFnID09IGFyZ3NUYWcgfHwgKGlzRnVuYyAmJiAhb2JqZWN0KSkge1xuICAgICAgcmVzdWx0ID0gKGlzRmxhdCB8fCBpc0Z1bmMpID8ge30gOiBpbml0Q2xvbmVPYmplY3QodmFsdWUpO1xuICAgICAgaWYgKCFpc0RlZXApIHtcbiAgICAgICAgcmV0dXJuIGlzRmxhdFxuICAgICAgICAgID8gY29weVN5bWJvbHNJbih2YWx1ZSwgYmFzZUFzc2lnbkluKHJlc3VsdCwgdmFsdWUpKVxuICAgICAgICAgIDogY29weVN5bWJvbHModmFsdWUsIGJhc2VBc3NpZ24ocmVzdWx0LCB2YWx1ZSkpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIWNsb25lYWJsZVRhZ3NbdGFnXSkge1xuICAgICAgICByZXR1cm4gb2JqZWN0ID8gdmFsdWUgOiB7fTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdCA9IGluaXRDbG9uZUJ5VGFnKHZhbHVlLCB0YWcsIGlzRGVlcCk7XG4gICAgfVxuICB9XG4gIC8vIENoZWNrIGZvciBjaXJjdWxhciByZWZlcmVuY2VzIGFuZCByZXR1cm4gaXRzIGNvcnJlc3BvbmRpbmcgY2xvbmUuXG4gIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KHZhbHVlKTtcbiAgaWYgKHN0YWNrZWQpIHtcbiAgICByZXR1cm4gc3RhY2tlZDtcbiAgfVxuICBzdGFjay5zZXQodmFsdWUsIHJlc3VsdCk7XG5cbiAgaWYgKGlzU2V0KHZhbHVlKSkge1xuICAgIHZhbHVlLmZvckVhY2goZnVuY3Rpb24oc3ViVmFsdWUpIHtcbiAgICAgIHJlc3VsdC5hZGQoYmFzZUNsb25lKHN1YlZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdWJWYWx1ZSwgdmFsdWUsIHN0YWNrKSk7XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAoaXNNYXAodmFsdWUpKSB7XG4gICAgdmFsdWUuZm9yRWFjaChmdW5jdGlvbihzdWJWYWx1ZSwga2V5KSB7XG4gICAgICByZXN1bHQuc2V0KGtleSwgYmFzZUNsb25lKHN1YlZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBrZXksIHZhbHVlLCBzdGFjaykpO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIGtleXNGdW5jID0gaXNGdWxsXG4gICAgPyAoaXNGbGF0ID8gZ2V0QWxsS2V5c0luIDogZ2V0QWxsS2V5cylcbiAgICA6IChpc0ZsYXQgPyBrZXlzSW4gOiBrZXlzKTtcblxuICB2YXIgcHJvcHMgPSBpc0FyciA/IHVuZGVmaW5lZCA6IGtleXNGdW5jKHZhbHVlKTtcbiAgYXJyYXlFYWNoKHByb3BzIHx8IHZhbHVlLCBmdW5jdGlvbihzdWJWYWx1ZSwga2V5KSB7XG4gICAgaWYgKHByb3BzKSB7XG4gICAgICBrZXkgPSBzdWJWYWx1ZTtcbiAgICAgIHN1YlZhbHVlID0gdmFsdWVba2V5XTtcbiAgICB9XG4gICAgLy8gUmVjdXJzaXZlbHkgcG9wdWxhdGUgY2xvbmUgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICBhc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgYmFzZUNsb25lKHN1YlZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBrZXksIHZhbHVlLCBzdGFjaykpO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlQ2xvbmU7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0Jyk7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdENyZWF0ZSA9IE9iamVjdC5jcmVhdGU7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY3JlYXRlYCB3aXRob3V0IHN1cHBvcnQgZm9yIGFzc2lnbmluZ1xuICogcHJvcGVydGllcyB0byB0aGUgY3JlYXRlZCBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm90byBUaGUgb2JqZWN0IHRvIGluaGVyaXQgZnJvbS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gKi9cbnZhciBiYXNlQ3JlYXRlID0gKGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBvYmplY3QoKSB7fVxuICByZXR1cm4gZnVuY3Rpb24ocHJvdG8pIHtcbiAgICBpZiAoIWlzT2JqZWN0KHByb3RvKSkge1xuICAgICAgcmV0dXJuIHt9O1xuICAgIH1cbiAgICBpZiAob2JqZWN0Q3JlYXRlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0Q3JlYXRlKHByb3RvKTtcbiAgICB9XG4gICAgb2JqZWN0LnByb3RvdHlwZSA9IHByb3RvO1xuICAgIHZhciByZXN1bHQgPSBuZXcgb2JqZWN0O1xuICAgIG9iamVjdC5wcm90b3R5cGUgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn0oKSk7XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUNyZWF0ZTtcbiIsInZhciBiYXNlRm9yT3duID0gcmVxdWlyZSgnLi9fYmFzZUZvck93bicpLFxuICAgIGNyZWF0ZUJhc2VFYWNoID0gcmVxdWlyZSgnLi9fY3JlYXRlQmFzZUVhY2gnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mb3JFYWNoYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIGBjb2xsZWN0aW9uYC5cbiAqL1xudmFyIGJhc2VFYWNoID0gY3JlYXRlQmFzZUVhY2goYmFzZUZvck93bik7XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUVhY2g7XG4iLCJ2YXIgY3JlYXRlQmFzZUZvciA9IHJlcXVpcmUoJy4vX2NyZWF0ZUJhc2VGb3InKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgYmFzZUZvck93bmAgd2hpY2ggaXRlcmF0ZXMgb3ZlciBgb2JqZWN0YFxuICogcHJvcGVydGllcyByZXR1cm5lZCBieSBga2V5c0Z1bmNgIGFuZCBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGVhY2ggcHJvcGVydHkuXG4gKiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXQgaXRlcmF0aW9uIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBgb2JqZWN0YC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbnZhciBiYXNlRm9yID0gY3JlYXRlQmFzZUZvcigpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VGb3I7XG4iLCJ2YXIgYmFzZUZvciA9IHJlcXVpcmUoJy4vX2Jhc2VGb3InKSxcbiAgICBrZXlzID0gcmVxdWlyZSgnLi9rZXlzJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9yT3duYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gYmFzZUZvck93bihvYmplY3QsIGl0ZXJhdGVlKSB7XG4gIHJldHVybiBvYmplY3QgJiYgYmFzZUZvcihvYmplY3QsIGl0ZXJhdGVlLCBrZXlzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlRm9yT3duO1xuIiwidmFyIGNhc3RQYXRoID0gcmVxdWlyZSgnLi9fY2FzdFBhdGgnKSxcbiAgICB0b0tleSA9IHJlcXVpcmUoJy4vX3RvS2V5Jyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZ2V0YCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZmF1bHQgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICovXG5mdW5jdGlvbiBiYXNlR2V0KG9iamVjdCwgcGF0aCkge1xuICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcblxuICB2YXIgaW5kZXggPSAwLFxuICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGg7XG5cbiAgd2hpbGUgKG9iamVjdCAhPSBudWxsICYmIGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgb2JqZWN0ID0gb2JqZWN0W3RvS2V5KHBhdGhbaW5kZXgrK10pXTtcbiAgfVxuICByZXR1cm4gKGluZGV4ICYmIGluZGV4ID09IGxlbmd0aCkgPyBvYmplY3QgOiB1bmRlZmluZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUdldDtcbiIsInZhciBhcnJheVB1c2ggPSByZXF1aXJlKCcuL19hcnJheVB1c2gnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5Jyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldEFsbEtleXNgIGFuZCBgZ2V0QWxsS2V5c0luYCB3aGljaCB1c2VzXG4gKiBga2V5c0Z1bmNgIGFuZCBgc3ltYm9sc0Z1bmNgIHRvIGdldCB0aGUgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmRcbiAqIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYG9iamVjdGAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBzeW1ib2xzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzRnVuYywgc3ltYm9sc0Z1bmMpIHtcbiAgdmFyIHJlc3VsdCA9IGtleXNGdW5jKG9iamVjdCk7XG4gIHJldHVybiBpc0FycmF5KG9iamVjdCkgPyByZXN1bHQgOiBhcnJheVB1c2gocmVzdWx0LCBzeW1ib2xzRnVuYyhvYmplY3QpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlR2V0QWxsS2V5cztcbiIsInZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19TeW1ib2wnKSxcbiAgICBnZXRSYXdUYWcgPSByZXF1aXJlKCcuL19nZXRSYXdUYWcnKSxcbiAgICBvYmplY3RUb1N0cmluZyA9IHJlcXVpcmUoJy4vX29iamVjdFRvU3RyaW5nJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBudWxsVGFnID0gJ1tvYmplY3QgTnVsbF0nLFxuICAgIHVuZGVmaW5lZFRhZyA9ICdbb2JqZWN0IFVuZGVmaW5lZF0nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0VGFnYCB3aXRob3V0IGZhbGxiYWNrcyBmb3IgYnVnZ3kgZW52aXJvbm1lbnRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXRUYWcodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZFRhZyA6IG51bGxUYWc7XG4gIH1cbiAgcmV0dXJuIChzeW1Ub1N0cmluZ1RhZyAmJiBzeW1Ub1N0cmluZ1RhZyBpbiBPYmplY3QodmFsdWUpKVxuICAgID8gZ2V0UmF3VGFnKHZhbHVlKVxuICAgIDogb2JqZWN0VG9TdHJpbmcodmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VHZXRUYWc7XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmhhc0luYCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IGtleSBUaGUga2V5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSGFzSW4ob2JqZWN0LCBrZXkpIHtcbiAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGtleSBpbiBPYmplY3Qob2JqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSGFzSW47XG4iLCJ2YXIgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzQXJndW1lbnRzYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBgYXJndW1lbnRzYCBvYmplY3QsXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc0FyZ3VtZW50cyh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBhcmdzVGFnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJc0FyZ3VtZW50cztcbiIsInZhciBiYXNlSXNFcXVhbERlZXAgPSByZXF1aXJlKCcuL19iYXNlSXNFcXVhbERlZXAnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzRXF1YWxgIHdoaWNoIHN1cHBvcnRzIHBhcnRpYWwgY29tcGFyaXNvbnNcbiAqIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHtib29sZWFufSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLlxuICogIDEgLSBVbm9yZGVyZWQgY29tcGFyaXNvblxuICogIDIgLSBQYXJ0aWFsIGNvbXBhcmlzb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBgdmFsdWVgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNFcXVhbCh2YWx1ZSwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSB7XG4gIGlmICh2YWx1ZSA9PT0gb3RoZXIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAodmFsdWUgPT0gbnVsbCB8fCBvdGhlciA9PSBudWxsIHx8ICghaXNPYmplY3RMaWtlKHZhbHVlKSAmJiAhaXNPYmplY3RMaWtlKG90aGVyKSkpIHtcbiAgICByZXR1cm4gdmFsdWUgIT09IHZhbHVlICYmIG90aGVyICE9PSBvdGhlcjtcbiAgfVxuICByZXR1cm4gYmFzZUlzRXF1YWxEZWVwKHZhbHVlLCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgYmFzZUlzRXF1YWwsIHN0YWNrKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNFcXVhbDtcbiIsInZhciBTdGFjayA9IHJlcXVpcmUoJy4vX1N0YWNrJyksXG4gICAgZXF1YWxBcnJheXMgPSByZXF1aXJlKCcuL19lcXVhbEFycmF5cycpLFxuICAgIGVxdWFsQnlUYWcgPSByZXF1aXJlKCcuL19lcXVhbEJ5VGFnJyksXG4gICAgZXF1YWxPYmplY3RzID0gcmVxdWlyZSgnLi9fZXF1YWxPYmplY3RzJyksXG4gICAgZ2V0VGFnID0gcmVxdWlyZSgnLi9fZ2V0VGFnJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpLFxuICAgIGlzQnVmZmVyID0gcmVxdWlyZSgnLi9pc0J1ZmZlcicpLFxuICAgIGlzVHlwZWRBcnJheSA9IHJlcXVpcmUoJy4vaXNUeXBlZEFycmF5Jyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xudmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJyxcbiAgICBhcnJheVRhZyA9ICdbb2JqZWN0IEFycmF5XScsXG4gICAgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XSc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbGAgZm9yIGFycmF5cyBhbmQgb2JqZWN0cyB3aGljaCBwZXJmb3Jtc1xuICogZGVlcCBjb21wYXJpc29ucyBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzIGVuYWJsaW5nIG9iamVjdHMgd2l0aCBjaXJjdWxhclxuICogcmVmZXJlbmNlcyB0byBiZSBjb21wYXJlZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzRXF1YWxEZWVwKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgdmFyIG9iaklzQXJyID0gaXNBcnJheShvYmplY3QpLFxuICAgICAgb3RoSXNBcnIgPSBpc0FycmF5KG90aGVyKSxcbiAgICAgIG9ialRhZyA9IG9iaklzQXJyID8gYXJyYXlUYWcgOiBnZXRUYWcob2JqZWN0KSxcbiAgICAgIG90aFRhZyA9IG90aElzQXJyID8gYXJyYXlUYWcgOiBnZXRUYWcob3RoZXIpO1xuXG4gIG9ialRhZyA9IG9ialRhZyA9PSBhcmdzVGFnID8gb2JqZWN0VGFnIDogb2JqVGFnO1xuICBvdGhUYWcgPSBvdGhUYWcgPT0gYXJnc1RhZyA/IG9iamVjdFRhZyA6IG90aFRhZztcblxuICB2YXIgb2JqSXNPYmogPSBvYmpUYWcgPT0gb2JqZWN0VGFnLFxuICAgICAgb3RoSXNPYmogPSBvdGhUYWcgPT0gb2JqZWN0VGFnLFxuICAgICAgaXNTYW1lVGFnID0gb2JqVGFnID09IG90aFRhZztcblxuICBpZiAoaXNTYW1lVGFnICYmIGlzQnVmZmVyKG9iamVjdCkpIHtcbiAgICBpZiAoIWlzQnVmZmVyKG90aGVyKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBvYmpJc0FyciA9IHRydWU7XG4gICAgb2JqSXNPYmogPSBmYWxzZTtcbiAgfVxuICBpZiAoaXNTYW1lVGFnICYmICFvYmpJc09iaikge1xuICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgcmV0dXJuIChvYmpJc0FyciB8fCBpc1R5cGVkQXJyYXkob2JqZWN0KSlcbiAgICAgID8gZXF1YWxBcnJheXMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaylcbiAgICAgIDogZXF1YWxCeVRhZyhvYmplY3QsIG90aGVyLCBvYmpUYWcsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spO1xuICB9XG4gIGlmICghKGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRykpIHtcbiAgICB2YXIgb2JqSXNXcmFwcGVkID0gb2JqSXNPYmogJiYgaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsICdfX3dyYXBwZWRfXycpLFxuICAgICAgICBvdGhJc1dyYXBwZWQgPSBvdGhJc09iaiAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG90aGVyLCAnX193cmFwcGVkX18nKTtcblxuICAgIGlmIChvYmpJc1dyYXBwZWQgfHwgb3RoSXNXcmFwcGVkKSB7XG4gICAgICB2YXIgb2JqVW53cmFwcGVkID0gb2JqSXNXcmFwcGVkID8gb2JqZWN0LnZhbHVlKCkgOiBvYmplY3QsXG4gICAgICAgICAgb3RoVW53cmFwcGVkID0gb3RoSXNXcmFwcGVkID8gb3RoZXIudmFsdWUoKSA6IG90aGVyO1xuXG4gICAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgICAgcmV0dXJuIGVxdWFsRnVuYyhvYmpVbndyYXBwZWQsIG90aFVud3JhcHBlZCwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spO1xuICAgIH1cbiAgfVxuICBpZiAoIWlzU2FtZVRhZykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICByZXR1cm4gZXF1YWxPYmplY3RzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJc0VxdWFsRGVlcDtcbiIsInZhciBnZXRUYWcgPSByZXF1aXJlKCcuL19nZXRUYWcnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgbWFwVGFnID0gJ1tvYmplY3QgTWFwXSc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNNYXBgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbWFwLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc01hcCh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBnZXRUYWcodmFsdWUpID09IG1hcFRhZztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNNYXA7XG4iLCJ2YXIgU3RhY2sgPSByZXF1aXJlKCcuL19TdGFjaycpLFxuICAgIGJhc2VJc0VxdWFsID0gcmVxdWlyZSgnLi9fYmFzZUlzRXF1YWwnKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG52YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxLFxuICAgIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcgPSAyO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTWF0Y2hgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICogQHBhcmFtIHtBcnJheX0gbWF0Y2hEYXRhIFRoZSBwcm9wZXJ0eSBuYW1lcywgdmFsdWVzLCBhbmQgY29tcGFyZSBmbGFncyB0byBtYXRjaC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBvYmplY3RgIGlzIGEgbWF0Y2gsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzTWF0Y2gob2JqZWN0LCBzb3VyY2UsIG1hdGNoRGF0YSwgY3VzdG9taXplcikge1xuICB2YXIgaW5kZXggPSBtYXRjaERhdGEubGVuZ3RoLFxuICAgICAgbGVuZ3RoID0gaW5kZXgsXG4gICAgICBub0N1c3RvbWl6ZXIgPSAhY3VzdG9taXplcjtcblxuICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICByZXR1cm4gIWxlbmd0aDtcbiAgfVxuICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICB2YXIgZGF0YSA9IG1hdGNoRGF0YVtpbmRleF07XG4gICAgaWYgKChub0N1c3RvbWl6ZXIgJiYgZGF0YVsyXSlcbiAgICAgICAgICA/IGRhdGFbMV0gIT09IG9iamVjdFtkYXRhWzBdXVxuICAgICAgICAgIDogIShkYXRhWzBdIGluIG9iamVjdClcbiAgICAgICAgKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgZGF0YSA9IG1hdGNoRGF0YVtpbmRleF07XG4gICAgdmFyIGtleSA9IGRhdGFbMF0sXG4gICAgICAgIG9ialZhbHVlID0gb2JqZWN0W2tleV0sXG4gICAgICAgIHNyY1ZhbHVlID0gZGF0YVsxXTtcblxuICAgIGlmIChub0N1c3RvbWl6ZXIgJiYgZGF0YVsyXSkge1xuICAgICAgaWYgKG9ialZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBzdGFjayA9IG5ldyBTdGFjaztcbiAgICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QsIHNvdXJjZSwgc3RhY2spO1xuICAgICAgfVxuICAgICAgaWYgKCEocmVzdWx0ID09PSB1bmRlZmluZWRcbiAgICAgICAgICAgID8gYmFzZUlzRXF1YWwoc3JjVmFsdWUsIG9ialZhbHVlLCBDT01QQVJFX1BBUlRJQUxfRkxBRyB8IENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcsIGN1c3RvbWl6ZXIsIHN0YWNrKVxuICAgICAgICAgICAgOiByZXN1bHRcbiAgICAgICAgICApKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzTWF0Y2g7XG4iLCJ2YXIgaXNGdW5jdGlvbiA9IHJlcXVpcmUoJy4vaXNGdW5jdGlvbicpLFxuICAgIGlzTWFza2VkID0gcmVxdWlyZSgnLi9faXNNYXNrZWQnKSxcbiAgICBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKSxcbiAgICB0b1NvdXJjZSA9IHJlcXVpcmUoJy4vX3RvU291cmNlJyk7XG5cbi8qKlxuICogVXNlZCB0byBtYXRjaCBgUmVnRXhwYFxuICogW3N5bnRheCBjaGFyYWN0ZXJzXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1wYXR0ZXJucykuXG4gKi9cbnZhciByZVJlZ0V4cENoYXIgPSAvW1xcXFxeJC4qKz8oKVtcXF17fXxdL2c7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBob3N0IGNvbnN0cnVjdG9ycyAoU2FmYXJpKS4gKi9cbnZhciByZUlzSG9zdEN0b3IgPSAvXlxcW29iamVjdCAuKz9Db25zdHJ1Y3RvclxcXSQvO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlLFxuICAgIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xudmFyIGZ1bmNUb1N0cmluZyA9IGZ1bmNQcm90by50b1N0cmluZztcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGlmIGEgbWV0aG9kIGlzIG5hdGl2ZS4gKi9cbnZhciByZUlzTmF0aXZlID0gUmVnRXhwKCdeJyArXG4gIGZ1bmNUb1N0cmluZy5jYWxsKGhhc093blByb3BlcnR5KS5yZXBsYWNlKHJlUmVnRXhwQ2hhciwgJ1xcXFwkJicpXG4gIC5yZXBsYWNlKC9oYXNPd25Qcm9wZXJ0eXwoZnVuY3Rpb24pLio/KD89XFxcXFxcKCl8IGZvciAuKz8oPz1cXFxcXFxdKS9nLCAnJDEuKj8nKSArICckJ1xuKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc05hdGl2ZWAgd2l0aG91dCBiYWQgc2hpbSBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBuYXRpdmUgZnVuY3Rpb24sXG4gKiAgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNOYXRpdmUodmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkgfHwgaXNNYXNrZWQodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBwYXR0ZXJuID0gaXNGdW5jdGlvbih2YWx1ZSkgPyByZUlzTmF0aXZlIDogcmVJc0hvc3RDdG9yO1xuICByZXR1cm4gcGF0dGVybi50ZXN0KHRvU291cmNlKHZhbHVlKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzTmF0aXZlO1xuIiwidmFyIGdldFRhZyA9IHJlcXVpcmUoJy4vX2dldFRhZycpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBzZXRUYWcgPSAnW29iamVjdCBTZXRdJztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc1NldGAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzZXQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzU2V0KHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGdldFRhZyh2YWx1ZSkgPT0gc2V0VGFnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJc1NldDtcbiIsInZhciBiYXNlR2V0VGFnID0gcmVxdWlyZSgnLi9fYmFzZUdldFRhZycpLFxuICAgIGlzTGVuZ3RoID0gcmVxdWlyZSgnLi9pc0xlbmd0aCcpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhcmdzVGFnID0gJ1tvYmplY3QgQXJndW1lbnRzXScsXG4gICAgYXJyYXlUYWcgPSAnW29iamVjdCBBcnJheV0nLFxuICAgIGJvb2xUYWcgPSAnW29iamVjdCBCb29sZWFuXScsXG4gICAgZGF0ZVRhZyA9ICdbb2JqZWN0IERhdGVdJyxcbiAgICBlcnJvclRhZyA9ICdbb2JqZWN0IEVycm9yXScsXG4gICAgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG4gICAgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgbnVtYmVyVGFnID0gJ1tvYmplY3QgTnVtYmVyXScsXG4gICAgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XScsXG4gICAgcmVnZXhwVGFnID0gJ1tvYmplY3QgUmVnRXhwXScsXG4gICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgc3RyaW5nVGFnID0gJ1tvYmplY3QgU3RyaW5nXScsXG4gICAgd2Vha01hcFRhZyA9ICdbb2JqZWN0IFdlYWtNYXBdJztcblxudmFyIGFycmF5QnVmZmVyVGFnID0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJyxcbiAgICBkYXRhVmlld1RhZyA9ICdbb2JqZWN0IERhdGFWaWV3XScsXG4gICAgZmxvYXQzMlRhZyA9ICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nLFxuICAgIGZsb2F0NjRUYWcgPSAnW29iamVjdCBGbG9hdDY0QXJyYXldJyxcbiAgICBpbnQ4VGFnID0gJ1tvYmplY3QgSW50OEFycmF5XScsXG4gICAgaW50MTZUYWcgPSAnW29iamVjdCBJbnQxNkFycmF5XScsXG4gICAgaW50MzJUYWcgPSAnW29iamVjdCBJbnQzMkFycmF5XScsXG4gICAgdWludDhUYWcgPSAnW29iamVjdCBVaW50OEFycmF5XScsXG4gICAgdWludDhDbGFtcGVkVGFnID0gJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJyxcbiAgICB1aW50MTZUYWcgPSAnW29iamVjdCBVaW50MTZBcnJheV0nLFxuICAgIHVpbnQzMlRhZyA9ICdbb2JqZWN0IFVpbnQzMkFycmF5XSc7XG5cbi8qKiBVc2VkIHRvIGlkZW50aWZ5IGB0b1N0cmluZ1RhZ2AgdmFsdWVzIG9mIHR5cGVkIGFycmF5cy4gKi9cbnZhciB0eXBlZEFycmF5VGFncyA9IHt9O1xudHlwZWRBcnJheVRhZ3NbZmxvYXQzMlRhZ10gPSB0eXBlZEFycmF5VGFnc1tmbG9hdDY0VGFnXSA9XG50eXBlZEFycmF5VGFnc1tpbnQ4VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2ludDE2VGFnXSA9XG50eXBlZEFycmF5VGFnc1tpbnQzMlRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50OFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbdWludDhDbGFtcGVkVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQxNlRhZ10gPVxudHlwZWRBcnJheVRhZ3NbdWludDMyVGFnXSA9IHRydWU7XG50eXBlZEFycmF5VGFnc1thcmdzVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2FycmF5VGFnXSA9XG50eXBlZEFycmF5VGFnc1thcnJheUJ1ZmZlclRhZ10gPSB0eXBlZEFycmF5VGFnc1tib29sVGFnXSA9XG50eXBlZEFycmF5VGFnc1tkYXRhVmlld1RhZ10gPSB0eXBlZEFycmF5VGFnc1tkYXRlVGFnXSA9XG50eXBlZEFycmF5VGFnc1tlcnJvclRhZ10gPSB0eXBlZEFycmF5VGFnc1tmdW5jVGFnXSA9XG50eXBlZEFycmF5VGFnc1ttYXBUYWddID0gdHlwZWRBcnJheVRhZ3NbbnVtYmVyVGFnXSA9XG50eXBlZEFycmF5VGFnc1tvYmplY3RUYWddID0gdHlwZWRBcnJheVRhZ3NbcmVnZXhwVGFnXSA9XG50eXBlZEFycmF5VGFnc1tzZXRUYWddID0gdHlwZWRBcnJheVRhZ3Nbc3RyaW5nVGFnXSA9XG50eXBlZEFycmF5VGFnc1t3ZWFrTWFwVGFnXSA9IGZhbHNlO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzVHlwZWRBcnJheWAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB0eXBlZCBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNUeXBlZEFycmF5KHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmXG4gICAgaXNMZW5ndGgodmFsdWUubGVuZ3RoKSAmJiAhIXR5cGVkQXJyYXlUYWdzW2Jhc2VHZXRUYWcodmFsdWUpXTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNUeXBlZEFycmF5O1xuIiwidmFyIGJhc2VNYXRjaGVzID0gcmVxdWlyZSgnLi9fYmFzZU1hdGNoZXMnKSxcbiAgICBiYXNlTWF0Y2hlc1Byb3BlcnR5ID0gcmVxdWlyZSgnLi9fYmFzZU1hdGNoZXNQcm9wZXJ0eScpLFxuICAgIGlkZW50aXR5ID0gcmVxdWlyZSgnLi9pZGVudGl0eScpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBwcm9wZXJ0eSA9IHJlcXVpcmUoJy4vcHJvcGVydHknKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pdGVyYXRlZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gW3ZhbHVlPV8uaWRlbnRpdHldIFRoZSB2YWx1ZSB0byBjb252ZXJ0IHRvIGFuIGl0ZXJhdGVlLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBpdGVyYXRlZS5cbiAqL1xuZnVuY3Rpb24gYmFzZUl0ZXJhdGVlKHZhbHVlKSB7XG4gIC8vIERvbid0IHN0b3JlIHRoZSBgdHlwZW9mYCByZXN1bHQgaW4gYSB2YXJpYWJsZSB0byBhdm9pZCBhIEpJVCBidWcgaW4gU2FmYXJpIDkuXG4gIC8vIFNlZSBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTU2MDM0IGZvciBtb3JlIGRldGFpbHMuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiBpZGVudGl0eTtcbiAgfVxuICBpZiAodHlwZW9mIHZhbHVlID09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIGlzQXJyYXkodmFsdWUpXG4gICAgICA/IGJhc2VNYXRjaGVzUHJvcGVydHkodmFsdWVbMF0sIHZhbHVlWzFdKVxuICAgICAgOiBiYXNlTWF0Y2hlcyh2YWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHByb3BlcnR5KHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXRlcmF0ZWU7XG4iLCJ2YXIgaXNQcm90b3R5cGUgPSByZXF1aXJlKCcuL19pc1Byb3RvdHlwZScpLFxuICAgIG5hdGl2ZUtleXMgPSByZXF1aXJlKCcuL19uYXRpdmVLZXlzJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ua2V5c2Agd2hpY2ggZG9lc24ndCB0cmVhdCBzcGFyc2UgYXJyYXlzIGFzIGRlbnNlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBiYXNlS2V5cyhvYmplY3QpIHtcbiAgaWYgKCFpc1Byb3RvdHlwZShvYmplY3QpKSB7XG4gICAgcmV0dXJuIG5hdGl2ZUtleXMob2JqZWN0KTtcbiAgfVxuICB2YXIgcmVzdWx0ID0gW107XG4gIGZvciAodmFyIGtleSBpbiBPYmplY3Qob2JqZWN0KSkge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSAmJiBrZXkgIT0gJ2NvbnN0cnVjdG9yJykge1xuICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlS2V5cztcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKSxcbiAgICBpc1Byb3RvdHlwZSA9IHJlcXVpcmUoJy4vX2lzUHJvdG90eXBlJyksXG4gICAgbmF0aXZlS2V5c0luID0gcmVxdWlyZSgnLi9fbmF0aXZlS2V5c0luJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ua2V5c0luYCB3aGljaCBkb2Vzbid0IHRyZWF0IHNwYXJzZSBhcnJheXMgYXMgZGVuc2UuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VLZXlzSW4ob2JqZWN0KSB7XG4gIGlmICghaXNPYmplY3Qob2JqZWN0KSkge1xuICAgIHJldHVybiBuYXRpdmVLZXlzSW4ob2JqZWN0KTtcbiAgfVxuICB2YXIgaXNQcm90byA9IGlzUHJvdG90eXBlKG9iamVjdCksXG4gICAgICByZXN1bHQgPSBbXTtcblxuICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgaWYgKCEoa2V5ID09ICdjb25zdHJ1Y3RvcicgJiYgKGlzUHJvdG8gfHwgIWhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUtleXNJbjtcbiIsInZhciBiYXNlRWFjaCA9IHJlcXVpcmUoJy4vX2Jhc2VFYWNoJyksXG4gICAgaXNBcnJheUxpa2UgPSByZXF1aXJlKCcuL2lzQXJyYXlMaWtlJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWFwYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGJhc2VNYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBpc0FycmF5TGlrZShjb2xsZWN0aW9uKSA/IEFycmF5KGNvbGxlY3Rpb24ubGVuZ3RoKSA6IFtdO1xuXG4gIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pIHtcbiAgICByZXN1bHRbKytpbmRleF0gPSBpdGVyYXRlZSh2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZU1hcDtcbiIsInZhciBiYXNlSXNNYXRjaCA9IHJlcXVpcmUoJy4vX2Jhc2VJc01hdGNoJyksXG4gICAgZ2V0TWF0Y2hEYXRhID0gcmVxdWlyZSgnLi9fZ2V0TWF0Y2hEYXRhJyksXG4gICAgbWF0Y2hlc1N0cmljdENvbXBhcmFibGUgPSByZXF1aXJlKCcuL19tYXRjaGVzU3RyaWN0Q29tcGFyYWJsZScpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hdGNoZXNgIHdoaWNoIGRvZXNuJ3QgY2xvbmUgYHNvdXJjZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlTWF0Y2hlcyhzb3VyY2UpIHtcbiAgdmFyIG1hdGNoRGF0YSA9IGdldE1hdGNoRGF0YShzb3VyY2UpO1xuICBpZiAobWF0Y2hEYXRhLmxlbmd0aCA9PSAxICYmIG1hdGNoRGF0YVswXVsyXSkge1xuICAgIHJldHVybiBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZShtYXRjaERhdGFbMF1bMF0sIG1hdGNoRGF0YVswXVsxXSk7XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHJldHVybiBvYmplY3QgPT09IHNvdXJjZSB8fCBiYXNlSXNNYXRjaChvYmplY3QsIHNvdXJjZSwgbWF0Y2hEYXRhKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlTWF0Y2hlcztcbiIsInZhciBiYXNlSXNFcXVhbCA9IHJlcXVpcmUoJy4vX2Jhc2VJc0VxdWFsJyksXG4gICAgZ2V0ID0gcmVxdWlyZSgnLi9nZXQnKSxcbiAgICBoYXNJbiA9IHJlcXVpcmUoJy4vaGFzSW4nKSxcbiAgICBpc0tleSA9IHJlcXVpcmUoJy4vX2lzS2V5JyksXG4gICAgaXNTdHJpY3RDb21wYXJhYmxlID0gcmVxdWlyZSgnLi9faXNTdHJpY3RDb21wYXJhYmxlJyksXG4gICAgbWF0Y2hlc1N0cmljdENvbXBhcmFibGUgPSByZXF1aXJlKCcuL19tYXRjaGVzU3RyaWN0Q29tcGFyYWJsZScpLFxuICAgIHRvS2V5ID0gcmVxdWlyZSgnLi9fdG9LZXknKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG52YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxLFxuICAgIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcgPSAyO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hdGNoZXNQcm9wZXJ0eWAgd2hpY2ggZG9lc24ndCBjbG9uZSBgc3JjVmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgdmFsdWUgdG8gbWF0Y2guXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlTWF0Y2hlc1Byb3BlcnR5KHBhdGgsIHNyY1ZhbHVlKSB7XG4gIGlmIChpc0tleShwYXRoKSAmJiBpc1N0cmljdENvbXBhcmFibGUoc3JjVmFsdWUpKSB7XG4gICAgcmV0dXJuIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlKHRvS2V5KHBhdGgpLCBzcmNWYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHZhciBvYmpWYWx1ZSA9IGdldChvYmplY3QsIHBhdGgpO1xuICAgIHJldHVybiAob2JqVmFsdWUgPT09IHVuZGVmaW5lZCAmJiBvYmpWYWx1ZSA9PT0gc3JjVmFsdWUpXG4gICAgICA/IGhhc0luKG9iamVjdCwgcGF0aClcbiAgICAgIDogYmFzZUlzRXF1YWwoc3JjVmFsdWUsIG9ialZhbHVlLCBDT01QQVJFX1BBUlRJQUxfRkxBRyB8IENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VNYXRjaGVzUHJvcGVydHk7XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnByb3BlcnR5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VQcm9wZXJ0eShrZXkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VQcm9wZXJ0eTtcbiIsInZhciBiYXNlR2V0ID0gcmVxdWlyZSgnLi9fYmFzZUdldCcpO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZVByb3BlcnR5YCB3aGljaCBzdXBwb3J0cyBkZWVwIHBhdGhzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VQcm9wZXJ0eURlZXAocGF0aCkge1xuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgcmV0dXJuIGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlUHJvcGVydHlEZWVwO1xuIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50aW1lc2Agd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzXG4gKiBvciBtYXggYXJyYXkgbGVuZ3RoIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiB0aW1lcyB0byBpbnZva2UgYGl0ZXJhdGVlYC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHJlc3VsdHMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VUaW1lcyhuLCBpdGVyYXRlZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IEFycmF5KG4pO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbikge1xuICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShpbmRleCk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlVGltZXM7XG4iLCJ2YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fU3ltYm9sJyksXG4gICAgYXJyYXlNYXAgPSByZXF1aXJlKCcuL19hcnJheU1hcCcpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc1N5bWJvbCA9IHJlcXVpcmUoJy4vaXNTeW1ib2wnKTtcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgSU5GSU5JVFkgPSAxIC8gMDtcblxuLyoqIFVzZWQgdG8gY29udmVydCBzeW1ib2xzIHRvIHByaW1pdGl2ZXMgYW5kIHN0cmluZ3MuICovXG52YXIgc3ltYm9sUHJvdG8gPSBTeW1ib2wgPyBTeW1ib2wucHJvdG90eXBlIDogdW5kZWZpbmVkLFxuICAgIHN5bWJvbFRvU3RyaW5nID0gc3ltYm9sUHJvdG8gPyBzeW1ib2xQcm90by50b1N0cmluZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50b1N0cmluZ2Agd2hpY2ggZG9lc24ndCBjb252ZXJ0IG51bGxpc2hcbiAqIHZhbHVlcyB0byBlbXB0eSBzdHJpbmdzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBiYXNlVG9TdHJpbmcodmFsdWUpIHtcbiAgLy8gRXhpdCBlYXJseSBmb3Igc3RyaW5ncyB0byBhdm9pZCBhIHBlcmZvcm1hbmNlIGhpdCBpbiBzb21lIGVudmlyb25tZW50cy5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAvLyBSZWN1cnNpdmVseSBjb252ZXJ0IHZhbHVlcyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgIHJldHVybiBhcnJheU1hcCh2YWx1ZSwgYmFzZVRvU3RyaW5nKSArICcnO1xuICB9XG4gIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gc3ltYm9sVG9TdHJpbmcgPyBzeW1ib2xUb1N0cmluZy5jYWxsKHZhbHVlKSA6ICcnO1xuICB9XG4gIHZhciByZXN1bHQgPSAodmFsdWUgKyAnJyk7XG4gIHJldHVybiAocmVzdWx0ID09ICcwJyAmJiAoMSAvIHZhbHVlKSA9PSAtSU5GSU5JVFkpID8gJy0wJyA6IHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlVG9TdHJpbmc7XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuYXJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIHN0b3JpbmcgbWV0YWRhdGEuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhcCBhcmd1bWVudHMgZm9yLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FwcGVkIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlVW5hcnkoZnVuYykge1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gZnVuYyh2YWx1ZSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVVuYXJ5O1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYSBgY2FjaGVgIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBjYWNoZSBUaGUgY2FjaGUgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gY2FjaGVIYXMoY2FjaGUsIGtleSkge1xuICByZXR1cm4gY2FjaGUuaGFzKGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2FjaGVIYXM7XG4iLCJ2YXIgaWRlbnRpdHkgPSByZXF1aXJlKCcuL2lkZW50aXR5Jyk7XG5cbi8qKlxuICogQ2FzdHMgYHZhbHVlYCB0byBgaWRlbnRpdHlgIGlmIGl0J3Mgbm90IGEgZnVuY3Rpb24uXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgY2FzdCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY2FzdEZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ2Z1bmN0aW9uJyA/IHZhbHVlIDogaWRlbnRpdHk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2FzdEZ1bmN0aW9uO1xuIiwidmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc0tleSA9IHJlcXVpcmUoJy4vX2lzS2V5JyksXG4gICAgc3RyaW5nVG9QYXRoID0gcmVxdWlyZSgnLi9fc3RyaW5nVG9QYXRoJyksXG4gICAgdG9TdHJpbmcgPSByZXF1aXJlKCcuL3RvU3RyaW5nJyk7XG5cbi8qKlxuICogQ2FzdHMgYHZhbHVlYCB0byBhIHBhdGggYXJyYXkgaWYgaXQncyBub3Qgb25lLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkga2V5cyBvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY2FzdCBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICovXG5mdW5jdGlvbiBjYXN0UGF0aCh2YWx1ZSwgb2JqZWN0KSB7XG4gIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICByZXR1cm4gaXNLZXkodmFsdWUsIG9iamVjdCkgPyBbdmFsdWVdIDogc3RyaW5nVG9QYXRoKHRvU3RyaW5nKHZhbHVlKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2FzdFBhdGg7XG4iLCJ2YXIgVWludDhBcnJheSA9IHJlcXVpcmUoJy4vX1VpbnQ4QXJyYXknKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgY2xvbmUgb2YgYGFycmF5QnVmZmVyYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheUJ1ZmZlcn0gYXJyYXlCdWZmZXIgVGhlIGFycmF5IGJ1ZmZlciB0byBjbG9uZS5cbiAqIEByZXR1cm5zIHtBcnJheUJ1ZmZlcn0gUmV0dXJucyB0aGUgY2xvbmVkIGFycmF5IGJ1ZmZlci5cbiAqL1xuZnVuY3Rpb24gY2xvbmVBcnJheUJ1ZmZlcihhcnJheUJ1ZmZlcikge1xuICB2YXIgcmVzdWx0ID0gbmV3IGFycmF5QnVmZmVyLmNvbnN0cnVjdG9yKGFycmF5QnVmZmVyLmJ5dGVMZW5ndGgpO1xuICBuZXcgVWludDhBcnJheShyZXN1bHQpLnNldChuZXcgVWludDhBcnJheShhcnJheUJ1ZmZlcikpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNsb25lQXJyYXlCdWZmZXI7XG4iLCJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cbnZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xudmFyIGZyZWVNb2R1bGUgPSBmcmVlRXhwb3J0cyAmJiB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblxuLyoqIERldGVjdCB0aGUgcG9wdWxhciBDb21tb25KUyBleHRlbnNpb24gYG1vZHVsZS5leHBvcnRzYC4gKi9cbnZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBCdWZmZXIgPSBtb2R1bGVFeHBvcnRzID8gcm9vdC5CdWZmZXIgOiB1bmRlZmluZWQsXG4gICAgYWxsb2NVbnNhZmUgPSBCdWZmZXIgPyBCdWZmZXIuYWxsb2NVbnNhZmUgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mICBgYnVmZmVyYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtCdWZmZXJ9IGJ1ZmZlciBUaGUgYnVmZmVyIHRvIGNsb25lLlxuICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAqIEByZXR1cm5zIHtCdWZmZXJ9IFJldHVybnMgdGhlIGNsb25lZCBidWZmZXIuXG4gKi9cbmZ1bmN0aW9uIGNsb25lQnVmZmVyKGJ1ZmZlciwgaXNEZWVwKSB7XG4gIGlmIChpc0RlZXApIHtcbiAgICByZXR1cm4gYnVmZmVyLnNsaWNlKCk7XG4gIH1cbiAgdmFyIGxlbmd0aCA9IGJ1ZmZlci5sZW5ndGgsXG4gICAgICByZXN1bHQgPSBhbGxvY1Vuc2FmZSA/IGFsbG9jVW5zYWZlKGxlbmd0aCkgOiBuZXcgYnVmZmVyLmNvbnN0cnVjdG9yKGxlbmd0aCk7XG5cbiAgYnVmZmVyLmNvcHkocmVzdWx0KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjbG9uZUJ1ZmZlcjtcbiIsInZhciBjbG9uZUFycmF5QnVmZmVyID0gcmVxdWlyZSgnLi9fY2xvbmVBcnJheUJ1ZmZlcicpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgZGF0YVZpZXdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gZGF0YVZpZXcgVGhlIGRhdGEgdmlldyB0byBjbG9uZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgZGF0YSB2aWV3LlxuICovXG5mdW5jdGlvbiBjbG9uZURhdGFWaWV3KGRhdGFWaWV3LCBpc0RlZXApIHtcbiAgdmFyIGJ1ZmZlciA9IGlzRGVlcCA/IGNsb25lQXJyYXlCdWZmZXIoZGF0YVZpZXcuYnVmZmVyKSA6IGRhdGFWaWV3LmJ1ZmZlcjtcbiAgcmV0dXJuIG5ldyBkYXRhVmlldy5jb25zdHJ1Y3RvcihidWZmZXIsIGRhdGFWaWV3LmJ5dGVPZmZzZXQsIGRhdGFWaWV3LmJ5dGVMZW5ndGgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNsb25lRGF0YVZpZXc7XG4iLCIvKiogVXNlZCB0byBtYXRjaCBgUmVnRXhwYCBmbGFncyBmcm9tIHRoZWlyIGNvZXJjZWQgc3RyaW5nIHZhbHVlcy4gKi9cbnZhciByZUZsYWdzID0gL1xcdyokLztcblxuLyoqXG4gKiBDcmVhdGVzIGEgY2xvbmUgb2YgYHJlZ2V4cGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSByZWdleHAgVGhlIHJlZ2V4cCB0byBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCByZWdleHAuXG4gKi9cbmZ1bmN0aW9uIGNsb25lUmVnRXhwKHJlZ2V4cCkge1xuICB2YXIgcmVzdWx0ID0gbmV3IHJlZ2V4cC5jb25zdHJ1Y3RvcihyZWdleHAuc291cmNlLCByZUZsYWdzLmV4ZWMocmVnZXhwKSk7XG4gIHJlc3VsdC5sYXN0SW5kZXggPSByZWdleHAubGFzdEluZGV4O1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNsb25lUmVnRXhwO1xuIiwidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpO1xuXG4vKiogVXNlZCB0byBjb252ZXJ0IHN5bWJvbHMgdG8gcHJpbWl0aXZlcyBhbmQgc3RyaW5ncy4gKi9cbnZhciBzeW1ib2xQcm90byA9IFN5bWJvbCA/IFN5bWJvbC5wcm90b3R5cGUgOiB1bmRlZmluZWQsXG4gICAgc3ltYm9sVmFsdWVPZiA9IHN5bWJvbFByb3RvID8gc3ltYm9sUHJvdG8udmFsdWVPZiA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBDcmVhdGVzIGEgY2xvbmUgb2YgdGhlIGBzeW1ib2xgIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHN5bWJvbCBUaGUgc3ltYm9sIG9iamVjdCB0byBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCBzeW1ib2wgb2JqZWN0LlxuICovXG5mdW5jdGlvbiBjbG9uZVN5bWJvbChzeW1ib2wpIHtcbiAgcmV0dXJuIHN5bWJvbFZhbHVlT2YgPyBPYmplY3Qoc3ltYm9sVmFsdWVPZi5jYWxsKHN5bWJvbCkpIDoge307XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2xvbmVTeW1ib2w7XG4iLCJ2YXIgY2xvbmVBcnJheUJ1ZmZlciA9IHJlcXVpcmUoJy4vX2Nsb25lQXJyYXlCdWZmZXInKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgY2xvbmUgb2YgYHR5cGVkQXJyYXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gdHlwZWRBcnJheSBUaGUgdHlwZWQgYXJyYXkgdG8gY2xvbmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHR5cGVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBjbG9uZVR5cGVkQXJyYXkodHlwZWRBcnJheSwgaXNEZWVwKSB7XG4gIHZhciBidWZmZXIgPSBpc0RlZXAgPyBjbG9uZUFycmF5QnVmZmVyKHR5cGVkQXJyYXkuYnVmZmVyKSA6IHR5cGVkQXJyYXkuYnVmZmVyO1xuICByZXR1cm4gbmV3IHR5cGVkQXJyYXkuY29uc3RydWN0b3IoYnVmZmVyLCB0eXBlZEFycmF5LmJ5dGVPZmZzZXQsIHR5cGVkQXJyYXkubGVuZ3RoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjbG9uZVR5cGVkQXJyYXk7XG4iLCIvKipcbiAqIENvcGllcyB0aGUgdmFsdWVzIG9mIGBzb3VyY2VgIHRvIGBhcnJheWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IHNvdXJjZSBUaGUgYXJyYXkgdG8gY29weSB2YWx1ZXMgZnJvbS5cbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheT1bXV0gVGhlIGFycmF5IHRvIGNvcHkgdmFsdWVzIHRvLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gKi9cbmZ1bmN0aW9uIGNvcHlBcnJheShzb3VyY2UsIGFycmF5KSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gc291cmNlLmxlbmd0aDtcblxuICBhcnJheSB8fCAoYXJyYXkgPSBBcnJheShsZW5ndGgpKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBhcnJheVtpbmRleF0gPSBzb3VyY2VbaW5kZXhdO1xuICB9XG4gIHJldHVybiBhcnJheTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjb3B5QXJyYXk7XG4iLCJ2YXIgYXNzaWduVmFsdWUgPSByZXF1aXJlKCcuL19hc3NpZ25WYWx1ZScpLFxuICAgIGJhc2VBc3NpZ25WYWx1ZSA9IHJlcXVpcmUoJy4vX2Jhc2VBc3NpZ25WYWx1ZScpO1xuXG4vKipcbiAqIENvcGllcyBwcm9wZXJ0aWVzIG9mIGBzb3VyY2VgIHRvIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb20uXG4gKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgaWRlbnRpZmllcnMgdG8gY29weS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0PXt9XSBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyB0by5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvcGllZCB2YWx1ZXMuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG5mdW5jdGlvbiBjb3B5T2JqZWN0KHNvdXJjZSwgcHJvcHMsIG9iamVjdCwgY3VzdG9taXplcikge1xuICB2YXIgaXNOZXcgPSAhb2JqZWN0O1xuICBvYmplY3QgfHwgKG9iamVjdCA9IHt9KTtcblxuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBrZXkgPSBwcm9wc1tpbmRleF07XG5cbiAgICB2YXIgbmV3VmFsdWUgPSBjdXN0b21pemVyXG4gICAgICA/IGN1c3RvbWl6ZXIob2JqZWN0W2tleV0sIHNvdXJjZVtrZXldLCBrZXksIG9iamVjdCwgc291cmNlKVxuICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICBpZiAobmV3VmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgbmV3VmFsdWUgPSBzb3VyY2Vba2V5XTtcbiAgICB9XG4gICAgaWYgKGlzTmV3KSB7XG4gICAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXNzaWduVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG9iamVjdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjb3B5T2JqZWN0O1xuIiwidmFyIGNvcHlPYmplY3QgPSByZXF1aXJlKCcuL19jb3B5T2JqZWN0JyksXG4gICAgZ2V0U3ltYm9scyA9IHJlcXVpcmUoJy4vX2dldFN5bWJvbHMnKTtcblxuLyoqXG4gKiBDb3BpZXMgb3duIHN5bWJvbHMgb2YgYHNvdXJjZWAgdG8gYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgZnJvbS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0PXt9XSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyB0by5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbmZ1bmN0aW9uIGNvcHlTeW1ib2xzKHNvdXJjZSwgb2JqZWN0KSB7XG4gIHJldHVybiBjb3B5T2JqZWN0KHNvdXJjZSwgZ2V0U3ltYm9scyhzb3VyY2UpLCBvYmplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvcHlTeW1ib2xzO1xuIiwidmFyIGNvcHlPYmplY3QgPSByZXF1aXJlKCcuL19jb3B5T2JqZWN0JyksXG4gICAgZ2V0U3ltYm9sc0luID0gcmVxdWlyZSgnLi9fZ2V0U3ltYm9sc0luJyk7XG5cbi8qKlxuICogQ29waWVzIG93biBhbmQgaW5oZXJpdGVkIHN5bWJvbHMgb2YgYHNvdXJjZWAgdG8gYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgZnJvbS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0PXt9XSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyB0by5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbmZ1bmN0aW9uIGNvcHlTeW1ib2xzSW4oc291cmNlLCBvYmplY3QpIHtcbiAgcmV0dXJuIGNvcHlPYmplY3Qoc291cmNlLCBnZXRTeW1ib2xzSW4oc291cmNlKSwgb2JqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjb3B5U3ltYm9sc0luO1xuIiwidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBvdmVycmVhY2hpbmcgY29yZS1qcyBzaGltcy4gKi9cbnZhciBjb3JlSnNEYXRhID0gcm9vdFsnX19jb3JlLWpzX3NoYXJlZF9fJ107XG5cbm1vZHVsZS5leHBvcnRzID0gY29yZUpzRGF0YTtcbiIsInZhciBpc0FycmF5TGlrZSA9IHJlcXVpcmUoJy4vaXNBcnJheUxpa2UnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgYGJhc2VFYWNoYCBvciBgYmFzZUVhY2hSaWdodGAgZnVuY3Rpb24uXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVhY2hGdW5jIFRoZSBmdW5jdGlvbiB0byBpdGVyYXRlIG92ZXIgYSBjb2xsZWN0aW9uLlxuICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBiYXNlIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjcmVhdGVCYXNlRWFjaChlYWNoRnVuYywgZnJvbVJpZ2h0KSB7XG4gIHJldHVybiBmdW5jdGlvbihjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICAgIHJldHVybiBjb2xsZWN0aW9uO1xuICAgIH1cbiAgICBpZiAoIWlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pKSB7XG4gICAgICByZXR1cm4gZWFjaEZ1bmMoY29sbGVjdGlvbiwgaXRlcmF0ZWUpO1xuICAgIH1cbiAgICB2YXIgbGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGgsXG4gICAgICAgIGluZGV4ID0gZnJvbVJpZ2h0ID8gbGVuZ3RoIDogLTEsXG4gICAgICAgIGl0ZXJhYmxlID0gT2JqZWN0KGNvbGxlY3Rpb24pO1xuXG4gICAgd2hpbGUgKChmcm9tUmlnaHQgPyBpbmRleC0tIDogKytpbmRleCA8IGxlbmd0aCkpIHtcbiAgICAgIGlmIChpdGVyYXRlZShpdGVyYWJsZVtpbmRleF0sIGluZGV4LCBpdGVyYWJsZSkgPT09IGZhbHNlKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY29sbGVjdGlvbjtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVCYXNlRWFjaDtcbiIsIi8qKlxuICogQ3JlYXRlcyBhIGJhc2UgZnVuY3Rpb24gZm9yIG1ldGhvZHMgbGlrZSBgXy5mb3JJbmAgYW5kIGBfLmZvck93bmAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYmFzZSBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQmFzZUZvcihmcm9tUmlnaHQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCwgaXRlcmF0ZWUsIGtleXNGdW5jKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGl0ZXJhYmxlID0gT2JqZWN0KG9iamVjdCksXG4gICAgICAgIHByb3BzID0ga2V5c0Z1bmMob2JqZWN0KSxcbiAgICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICB2YXIga2V5ID0gcHJvcHNbZnJvbVJpZ2h0ID8gbGVuZ3RoIDogKytpbmRleF07XG4gICAgICBpZiAoaXRlcmF0ZWUoaXRlcmFibGVba2V5XSwga2V5LCBpdGVyYWJsZSkgPT09IGZhbHNlKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb2JqZWN0O1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZUJhc2VGb3I7XG4iLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyk7XG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IChmdW5jdGlvbigpIHtcbiAgdHJ5IHtcbiAgICB2YXIgZnVuYyA9IGdldE5hdGl2ZShPYmplY3QsICdkZWZpbmVQcm9wZXJ0eScpO1xuICAgIGZ1bmMoe30sICcnLCB7fSk7XG4gICAgcmV0dXJuIGZ1bmM7XG4gIH0gY2F0Y2ggKGUpIHt9XG59KCkpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmluZVByb3BlcnR5O1xuIiwidmFyIFNldENhY2hlID0gcmVxdWlyZSgnLi9fU2V0Q2FjaGUnKSxcbiAgICBhcnJheVNvbWUgPSByZXF1aXJlKCcuL19hcnJheVNvbWUnKSxcbiAgICBjYWNoZUhhcyA9IHJlcXVpcmUoJy4vX2NhY2hlSGFzJyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xudmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMSxcbiAgICBDT01QQVJFX1VOT1JERVJFRF9GTEFHID0gMjtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIGFycmF5cyB3aXRoIHN1cHBvcnQgZm9yXG4gKiBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjb21wYXJlLlxuICogQHBhcmFtIHtBcnJheX0gb3RoZXIgVGhlIG90aGVyIGFycmF5IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBhcnJheWAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYXJyYXlzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGVxdWFsQXJyYXlzKGFycmF5LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHLFxuICAgICAgYXJyTGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgb3RoTGVuZ3RoID0gb3RoZXIubGVuZ3RoO1xuXG4gIGlmIChhcnJMZW5ndGggIT0gb3RoTGVuZ3RoICYmICEoaXNQYXJ0aWFsICYmIG90aExlbmd0aCA+IGFyckxlbmd0aCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLy8gQ2hlY2sgdGhhdCBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgdmFyIGFyclN0YWNrZWQgPSBzdGFjay5nZXQoYXJyYXkpO1xuICB2YXIgb3RoU3RhY2tlZCA9IHN0YWNrLmdldChvdGhlcik7XG4gIGlmIChhcnJTdGFja2VkICYmIG90aFN0YWNrZWQpIHtcbiAgICByZXR1cm4gYXJyU3RhY2tlZCA9PSBvdGhlciAmJiBvdGhTdGFja2VkID09IGFycmF5O1xuICB9XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gdHJ1ZSxcbiAgICAgIHNlZW4gPSAoYml0bWFzayAmIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcpID8gbmV3IFNldENhY2hlIDogdW5kZWZpbmVkO1xuXG4gIHN0YWNrLnNldChhcnJheSwgb3RoZXIpO1xuICBzdGFjay5zZXQob3RoZXIsIGFycmF5KTtcblxuICAvLyBJZ25vcmUgbm9uLWluZGV4IHByb3BlcnRpZXMuXG4gIHdoaWxlICgrK2luZGV4IDwgYXJyTGVuZ3RoKSB7XG4gICAgdmFyIGFyclZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICBvdGhWYWx1ZSA9IG90aGVyW2luZGV4XTtcblxuICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICB2YXIgY29tcGFyZWQgPSBpc1BhcnRpYWxcbiAgICAgICAgPyBjdXN0b21pemVyKG90aFZhbHVlLCBhcnJWYWx1ZSwgaW5kZXgsIG90aGVyLCBhcnJheSwgc3RhY2spXG4gICAgICAgIDogY3VzdG9taXplcihhcnJWYWx1ZSwgb3RoVmFsdWUsIGluZGV4LCBhcnJheSwgb3RoZXIsIHN0YWNrKTtcbiAgICB9XG4gICAgaWYgKGNvbXBhcmVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmIChjb21wYXJlZCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgaWYgKHNlZW4pIHtcbiAgICAgIGlmICghYXJyYXlTb21lKG90aGVyLCBmdW5jdGlvbihvdGhWYWx1ZSwgb3RoSW5kZXgpIHtcbiAgICAgICAgICAgIGlmICghY2FjaGVIYXMoc2Vlbiwgb3RoSW5kZXgpICYmXG4gICAgICAgICAgICAgICAgKGFyclZhbHVlID09PSBvdGhWYWx1ZSB8fCBlcXVhbEZ1bmMoYXJyVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykpKSB7XG4gICAgICAgICAgICAgIHJldHVybiBzZWVuLnB1c2gob3RoSW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pKSB7XG4gICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCEoXG4gICAgICAgICAgYXJyVmFsdWUgPT09IG90aFZhbHVlIHx8XG4gICAgICAgICAgICBlcXVhbEZ1bmMoYXJyVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaylcbiAgICAgICAgKSkge1xuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgc3RhY2tbJ2RlbGV0ZSddKGFycmF5KTtcbiAgc3RhY2tbJ2RlbGV0ZSddKG90aGVyKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlcXVhbEFycmF5cztcbiIsInZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19TeW1ib2wnKSxcbiAgICBVaW50OEFycmF5ID0gcmVxdWlyZSgnLi9fVWludDhBcnJheScpLFxuICAgIGVxID0gcmVxdWlyZSgnLi9lcScpLFxuICAgIGVxdWFsQXJyYXlzID0gcmVxdWlyZSgnLi9fZXF1YWxBcnJheXMnKSxcbiAgICBtYXBUb0FycmF5ID0gcmVxdWlyZSgnLi9fbWFwVG9BcnJheScpLFxuICAgIHNldFRvQXJyYXkgPSByZXF1aXJlKCcuL19zZXRUb0FycmF5Jyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xudmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMSxcbiAgICBDT01QQVJFX1VOT1JERVJFRF9GTEFHID0gMjtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGJvb2xUYWcgPSAnW29iamVjdCBCb29sZWFuXScsXG4gICAgZGF0ZVRhZyA9ICdbb2JqZWN0IERhdGVdJyxcbiAgICBlcnJvclRhZyA9ICdbb2JqZWN0IEVycm9yXScsXG4gICAgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgbnVtYmVyVGFnID0gJ1tvYmplY3QgTnVtYmVyXScsXG4gICAgcmVnZXhwVGFnID0gJ1tvYmplY3QgUmVnRXhwXScsXG4gICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgc3RyaW5nVGFnID0gJ1tvYmplY3QgU3RyaW5nXScsXG4gICAgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXSc7XG5cbnZhciBhcnJheUJ1ZmZlclRhZyA9ICdbb2JqZWN0IEFycmF5QnVmZmVyXScsXG4gICAgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nO1xuXG4vKiogVXNlZCB0byBjb252ZXJ0IHN5bWJvbHMgdG8gcHJpbWl0aXZlcyBhbmQgc3RyaW5ncy4gKi9cbnZhciBzeW1ib2xQcm90byA9IFN5bWJvbCA/IFN5bWJvbC5wcm90b3R5cGUgOiB1bmRlZmluZWQsXG4gICAgc3ltYm9sVmFsdWVPZiA9IHN5bWJvbFByb3RvID8gc3ltYm9sUHJvdG8udmFsdWVPZiA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIGNvbXBhcmluZyBvYmplY3RzIG9mXG4gKiB0aGUgc2FtZSBgdG9TdHJpbmdUYWdgLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIGZ1bmN0aW9uIG9ubHkgc3VwcG9ydHMgY29tcGFyaW5nIHZhbHVlcyB3aXRoIHRhZ3Mgb2ZcbiAqIGBCb29sZWFuYCwgYERhdGVgLCBgRXJyb3JgLCBgTnVtYmVyYCwgYFJlZ0V4cGAsIG9yIGBTdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGFnIFRoZSBgdG9TdHJpbmdUYWdgIG9mIHRoZSBvYmplY3RzIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gZXF1YWxCeVRhZyhvYmplY3QsIG90aGVyLCB0YWcsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgc3dpdGNoICh0YWcpIHtcbiAgICBjYXNlIGRhdGFWaWV3VGFnOlxuICAgICAgaWYgKChvYmplY3QuYnl0ZUxlbmd0aCAhPSBvdGhlci5ieXRlTGVuZ3RoKSB8fFxuICAgICAgICAgIChvYmplY3QuYnl0ZU9mZnNldCAhPSBvdGhlci5ieXRlT2Zmc2V0KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBvYmplY3QgPSBvYmplY3QuYnVmZmVyO1xuICAgICAgb3RoZXIgPSBvdGhlci5idWZmZXI7XG5cbiAgICBjYXNlIGFycmF5QnVmZmVyVGFnOlxuICAgICAgaWYgKChvYmplY3QuYnl0ZUxlbmd0aCAhPSBvdGhlci5ieXRlTGVuZ3RoKSB8fFxuICAgICAgICAgICFlcXVhbEZ1bmMobmV3IFVpbnQ4QXJyYXkob2JqZWN0KSwgbmV3IFVpbnQ4QXJyYXkob3RoZXIpKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcblxuICAgIGNhc2UgYm9vbFRhZzpcbiAgICBjYXNlIGRhdGVUYWc6XG4gICAgY2FzZSBudW1iZXJUYWc6XG4gICAgICAvLyBDb2VyY2UgYm9vbGVhbnMgdG8gYDFgIG9yIGAwYCBhbmQgZGF0ZXMgdG8gbWlsbGlzZWNvbmRzLlxuICAgICAgLy8gSW52YWxpZCBkYXRlcyBhcmUgY29lcmNlZCB0byBgTmFOYC5cbiAgICAgIHJldHVybiBlcSgrb2JqZWN0LCArb3RoZXIpO1xuXG4gICAgY2FzZSBlcnJvclRhZzpcbiAgICAgIHJldHVybiBvYmplY3QubmFtZSA9PSBvdGhlci5uYW1lICYmIG9iamVjdC5tZXNzYWdlID09IG90aGVyLm1lc3NhZ2U7XG5cbiAgICBjYXNlIHJlZ2V4cFRhZzpcbiAgICBjYXNlIHN0cmluZ1RhZzpcbiAgICAgIC8vIENvZXJjZSByZWdleGVzIHRvIHN0cmluZ3MgYW5kIHRyZWF0IHN0cmluZ3MsIHByaW1pdGl2ZXMgYW5kIG9iamVjdHMsXG4gICAgICAvLyBhcyBlcXVhbC4gU2VlIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1yZWdleHAucHJvdG90eXBlLnRvc3RyaW5nXG4gICAgICAvLyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgcmV0dXJuIG9iamVjdCA9PSAob3RoZXIgKyAnJyk7XG5cbiAgICBjYXNlIG1hcFRhZzpcbiAgICAgIHZhciBjb252ZXJ0ID0gbWFwVG9BcnJheTtcblxuICAgIGNhc2Ugc2V0VGFnOlxuICAgICAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRztcbiAgICAgIGNvbnZlcnQgfHwgKGNvbnZlcnQgPSBzZXRUb0FycmF5KTtcblxuICAgICAgaWYgKG9iamVjdC5zaXplICE9IG90aGVyLnNpemUgJiYgIWlzUGFydGlhbCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICAvLyBBc3N1bWUgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gICAgICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldChvYmplY3QpO1xuICAgICAgaWYgKHN0YWNrZWQpIHtcbiAgICAgICAgcmV0dXJuIHN0YWNrZWQgPT0gb3RoZXI7XG4gICAgICB9XG4gICAgICBiaXRtYXNrIHw9IENPTVBBUkVfVU5PUkRFUkVEX0ZMQUc7XG5cbiAgICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgc3RhY2suc2V0KG9iamVjdCwgb3RoZXIpO1xuICAgICAgdmFyIHJlc3VsdCA9IGVxdWFsQXJyYXlzKGNvbnZlcnQob2JqZWN0KSwgY29udmVydChvdGhlciksIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spO1xuICAgICAgc3RhY2tbJ2RlbGV0ZSddKG9iamVjdCk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuXG4gICAgY2FzZSBzeW1ib2xUYWc6XG4gICAgICBpZiAoc3ltYm9sVmFsdWVPZikge1xuICAgICAgICByZXR1cm4gc3ltYm9sVmFsdWVPZi5jYWxsKG9iamVjdCkgPT0gc3ltYm9sVmFsdWVPZi5jYWxsKG90aGVyKTtcbiAgICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXF1YWxCeVRhZztcbiIsInZhciBnZXRBbGxLZXlzID0gcmVxdWlyZSgnLi9fZ2V0QWxsS2V5cycpO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDE7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBvYmplY3RzIHdpdGggc3VwcG9ydCBmb3JcbiAqIHBhcnRpYWwgZGVlcCBjb21wYXJpc29ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGVxdWFsT2JqZWN0cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcsXG4gICAgICBvYmpQcm9wcyA9IGdldEFsbEtleXMob2JqZWN0KSxcbiAgICAgIG9iakxlbmd0aCA9IG9ialByb3BzLmxlbmd0aCxcbiAgICAgIG90aFByb3BzID0gZ2V0QWxsS2V5cyhvdGhlciksXG4gICAgICBvdGhMZW5ndGggPSBvdGhQcm9wcy5sZW5ndGg7XG5cbiAgaWYgKG9iakxlbmd0aCAhPSBvdGhMZW5ndGggJiYgIWlzUGFydGlhbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgaW5kZXggPSBvYmpMZW5ndGg7XG4gIHdoaWxlIChpbmRleC0tKSB7XG4gICAgdmFyIGtleSA9IG9ialByb3BzW2luZGV4XTtcbiAgICBpZiAoIShpc1BhcnRpYWwgPyBrZXkgaW4gb3RoZXIgOiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG90aGVyLCBrZXkpKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICAvLyBDaGVjayB0aGF0IGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICB2YXIgb2JqU3RhY2tlZCA9IHN0YWNrLmdldChvYmplY3QpO1xuICB2YXIgb3RoU3RhY2tlZCA9IHN0YWNrLmdldChvdGhlcik7XG4gIGlmIChvYmpTdGFja2VkICYmIG90aFN0YWNrZWQpIHtcbiAgICByZXR1cm4gb2JqU3RhY2tlZCA9PSBvdGhlciAmJiBvdGhTdGFja2VkID09IG9iamVjdDtcbiAgfVxuICB2YXIgcmVzdWx0ID0gdHJ1ZTtcbiAgc3RhY2suc2V0KG9iamVjdCwgb3RoZXIpO1xuICBzdGFjay5zZXQob3RoZXIsIG9iamVjdCk7XG5cbiAgdmFyIHNraXBDdG9yID0gaXNQYXJ0aWFsO1xuICB3aGlsZSAoKytpbmRleCA8IG9iakxlbmd0aCkge1xuICAgIGtleSA9IG9ialByb3BzW2luZGV4XTtcbiAgICB2YXIgb2JqVmFsdWUgPSBvYmplY3Rba2V5XSxcbiAgICAgICAgb3RoVmFsdWUgPSBvdGhlcltrZXldO1xuXG4gICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgIHZhciBjb21wYXJlZCA9IGlzUGFydGlhbFxuICAgICAgICA/IGN1c3RvbWl6ZXIob3RoVmFsdWUsIG9ialZhbHVlLCBrZXksIG90aGVyLCBvYmplY3QsIHN0YWNrKVxuICAgICAgICA6IGN1c3RvbWl6ZXIob2JqVmFsdWUsIG90aFZhbHVlLCBrZXksIG9iamVjdCwgb3RoZXIsIHN0YWNrKTtcbiAgICB9XG4gICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBvYmplY3RzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgaWYgKCEoY29tcGFyZWQgPT09IHVuZGVmaW5lZFxuICAgICAgICAgID8gKG9ialZhbHVlID09PSBvdGhWYWx1ZSB8fCBlcXVhbEZ1bmMob2JqVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykpXG4gICAgICAgICAgOiBjb21wYXJlZFxuICAgICAgICApKSB7XG4gICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBza2lwQ3RvciB8fCAoc2tpcEN0b3IgPSBrZXkgPT0gJ2NvbnN0cnVjdG9yJyk7XG4gIH1cbiAgaWYgKHJlc3VsdCAmJiAhc2tpcEN0b3IpIHtcbiAgICB2YXIgb2JqQ3RvciA9IG9iamVjdC5jb25zdHJ1Y3RvcixcbiAgICAgICAgb3RoQ3RvciA9IG90aGVyLmNvbnN0cnVjdG9yO1xuXG4gICAgLy8gTm9uIGBPYmplY3RgIG9iamVjdCBpbnN0YW5jZXMgd2l0aCBkaWZmZXJlbnQgY29uc3RydWN0b3JzIGFyZSBub3QgZXF1YWwuXG4gICAgaWYgKG9iakN0b3IgIT0gb3RoQ3RvciAmJlxuICAgICAgICAoJ2NvbnN0cnVjdG9yJyBpbiBvYmplY3QgJiYgJ2NvbnN0cnVjdG9yJyBpbiBvdGhlcikgJiZcbiAgICAgICAgISh0eXBlb2Ygb2JqQ3RvciA9PSAnZnVuY3Rpb24nICYmIG9iakN0b3IgaW5zdGFuY2VvZiBvYmpDdG9yICYmXG4gICAgICAgICAgdHlwZW9mIG90aEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBvdGhDdG9yIGluc3RhbmNlb2Ygb3RoQ3RvcikpIHtcbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgIH1cbiAgfVxuICBzdGFja1snZGVsZXRlJ10ob2JqZWN0KTtcbiAgc3RhY2tbJ2RlbGV0ZSddKG90aGVyKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlcXVhbE9iamVjdHM7XG4iLCIvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZyZWVHbG9iYWw7XG4iLCJ2YXIgYmFzZUdldEFsbEtleXMgPSByZXF1aXJlKCcuL19iYXNlR2V0QWxsS2V5cycpLFxuICAgIGdldFN5bWJvbHMgPSByZXF1aXJlKCcuL19nZXRTeW1ib2xzJyksXG4gICAga2V5cyA9IHJlcXVpcmUoJy4va2V5cycpO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygb3duIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gKi9cbmZ1bmN0aW9uIGdldEFsbEtleXMob2JqZWN0KSB7XG4gIHJldHVybiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXMsIGdldFN5bWJvbHMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEFsbEtleXM7XG4iLCJ2YXIgYmFzZUdldEFsbEtleXMgPSByZXF1aXJlKCcuL19iYXNlR2V0QWxsS2V5cycpLFxuICAgIGdldFN5bWJvbHNJbiA9IHJlcXVpcmUoJy4vX2dldFN5bWJvbHNJbicpLFxuICAgIGtleXNJbiA9IHJlcXVpcmUoJy4va2V5c0luJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZFxuICogc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAqL1xuZnVuY3Rpb24gZ2V0QWxsS2V5c0luKG9iamVjdCkge1xuICByZXR1cm4gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzSW4sIGdldFN5bWJvbHNJbik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0QWxsS2V5c0luO1xuIiwidmFyIGlzS2V5YWJsZSA9IHJlcXVpcmUoJy4vX2lzS2V5YWJsZScpO1xuXG4vKipcbiAqIEdldHMgdGhlIGRhdGEgZm9yIGBtYXBgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSByZWZlcmVuY2Uga2V5LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1hcCBkYXRhLlxuICovXG5mdW5jdGlvbiBnZXRNYXBEYXRhKG1hcCwga2V5KSB7XG4gIHZhciBkYXRhID0gbWFwLl9fZGF0YV9fO1xuICByZXR1cm4gaXNLZXlhYmxlKGtleSlcbiAgICA/IGRhdGFbdHlwZW9mIGtleSA9PSAnc3RyaW5nJyA/ICdzdHJpbmcnIDogJ2hhc2gnXVxuICAgIDogZGF0YS5tYXA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0TWFwRGF0YTtcbiIsInZhciBpc1N0cmljdENvbXBhcmFibGUgPSByZXF1aXJlKCcuL19pc1N0cmljdENvbXBhcmFibGUnKSxcbiAgICBrZXlzID0gcmVxdWlyZSgnLi9rZXlzJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgcHJvcGVydHkgbmFtZXMsIHZhbHVlcywgYW5kIGNvbXBhcmUgZmxhZ3Mgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbWF0Y2ggZGF0YSBvZiBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gZ2V0TWF0Y2hEYXRhKG9iamVjdCkge1xuICB2YXIgcmVzdWx0ID0ga2V5cyhvYmplY3QpLFxuICAgICAgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aDtcblxuICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICB2YXIga2V5ID0gcmVzdWx0W2xlbmd0aF0sXG4gICAgICAgIHZhbHVlID0gb2JqZWN0W2tleV07XG5cbiAgICByZXN1bHRbbGVuZ3RoXSA9IFtrZXksIHZhbHVlLCBpc1N0cmljdENvbXBhcmFibGUodmFsdWUpXTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldE1hdGNoRGF0YTtcbiIsInZhciBiYXNlSXNOYXRpdmUgPSByZXF1aXJlKCcuL19iYXNlSXNOYXRpdmUnKSxcbiAgICBnZXRWYWx1ZSA9IHJlcXVpcmUoJy4vX2dldFZhbHVlJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgbmF0aXZlIGZ1bmN0aW9uIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIG1ldGhvZCB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZnVuY3Rpb24gaWYgaXQncyBuYXRpdmUsIGVsc2UgYHVuZGVmaW5lZGAuXG4gKi9cbmZ1bmN0aW9uIGdldE5hdGl2ZShvYmplY3QsIGtleSkge1xuICB2YXIgdmFsdWUgPSBnZXRWYWx1ZShvYmplY3QsIGtleSk7XG4gIHJldHVybiBiYXNlSXNOYXRpdmUodmFsdWUpID8gdmFsdWUgOiB1bmRlZmluZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0TmF0aXZlO1xuIiwidmFyIG92ZXJBcmcgPSByZXF1aXJlKCcuL19vdmVyQXJnJyk7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIGdldFByb3RvdHlwZSA9IG92ZXJBcmcoT2JqZWN0LmdldFByb3RvdHlwZU9mLCBPYmplY3QpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFByb3RvdHlwZTtcbiIsInZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19TeW1ib2wnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUdldFRhZ2Agd2hpY2ggaWdub3JlcyBgU3ltYm9sLnRvU3RyaW5nVGFnYCB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmF3IGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGdldFJhd1RhZyh2YWx1ZSkge1xuICB2YXIgaXNPd24gPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBzeW1Ub1N0cmluZ1RhZyksXG4gICAgICB0YWcgPSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG5cbiAgdHJ5IHtcbiAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB1bmRlZmluZWQ7XG4gICAgdmFyIHVubWFza2VkID0gdHJ1ZTtcbiAgfSBjYXRjaCAoZSkge31cblxuICB2YXIgcmVzdWx0ID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIGlmICh1bm1hc2tlZCkge1xuICAgIGlmIChpc093bikge1xuICAgICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdGFnO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGUgdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFJhd1RhZztcbiIsInZhciBhcnJheUZpbHRlciA9IHJlcXVpcmUoJy4vX2FycmF5RmlsdGVyJyksXG4gICAgc3R1YkFycmF5ID0gcmVxdWlyZSgnLi9zdHViQXJyYXknKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgcHJvcGVydHlJc0VudW1lcmFibGUgPSBvYmplY3RQcm90by5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZUdldFN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2Ygc3ltYm9scy5cbiAqL1xudmFyIGdldFN5bWJvbHMgPSAhbmF0aXZlR2V0U3ltYm9scyA/IHN0dWJBcnJheSA6IGZ1bmN0aW9uKG9iamVjdCkge1xuICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gIHJldHVybiBhcnJheUZpbHRlcihuYXRpdmVHZXRTeW1ib2xzKG9iamVjdCksIGZ1bmN0aW9uKHN5bWJvbCkge1xuICAgIHJldHVybiBwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKG9iamVjdCwgc3ltYm9sKTtcbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFN5bWJvbHM7XG4iLCJ2YXIgYXJyYXlQdXNoID0gcmVxdWlyZSgnLi9fYXJyYXlQdXNoJyksXG4gICAgZ2V0UHJvdG90eXBlID0gcmVxdWlyZSgnLi9fZ2V0UHJvdG90eXBlJyksXG4gICAgZ2V0U3ltYm9scyA9IHJlcXVpcmUoJy4vX2dldFN5bWJvbHMnKSxcbiAgICBzdHViQXJyYXkgPSByZXF1aXJlKCcuL3N0dWJBcnJheScpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlR2V0U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHN5bWJvbHMuXG4gKi9cbnZhciBnZXRTeW1ib2xzSW4gPSAhbmF0aXZlR2V0U3ltYm9scyA/IHN0dWJBcnJheSA6IGZ1bmN0aW9uKG9iamVjdCkge1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHdoaWxlIChvYmplY3QpIHtcbiAgICBhcnJheVB1c2gocmVzdWx0LCBnZXRTeW1ib2xzKG9iamVjdCkpO1xuICAgIG9iamVjdCA9IGdldFByb3RvdHlwZShvYmplY3QpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFN5bWJvbHNJbjtcbiIsInZhciBEYXRhVmlldyA9IHJlcXVpcmUoJy4vX0RhdGFWaWV3JyksXG4gICAgTWFwID0gcmVxdWlyZSgnLi9fTWFwJyksXG4gICAgUHJvbWlzZSA9IHJlcXVpcmUoJy4vX1Byb21pc2UnKSxcbiAgICBTZXQgPSByZXF1aXJlKCcuL19TZXQnKSxcbiAgICBXZWFrTWFwID0gcmVxdWlyZSgnLi9fV2Vha01hcCcpLFxuICAgIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgdG9Tb3VyY2UgPSByZXF1aXJlKCcuL190b1NvdXJjZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XScsXG4gICAgcHJvbWlzZVRhZyA9ICdbb2JqZWN0IFByb21pc2VdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICB3ZWFrTWFwVGFnID0gJ1tvYmplY3QgV2Vha01hcF0nO1xuXG52YXIgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgbWFwcywgc2V0cywgYW5kIHdlYWttYXBzLiAqL1xudmFyIGRhdGFWaWV3Q3RvclN0cmluZyA9IHRvU291cmNlKERhdGFWaWV3KSxcbiAgICBtYXBDdG9yU3RyaW5nID0gdG9Tb3VyY2UoTWFwKSxcbiAgICBwcm9taXNlQ3RvclN0cmluZyA9IHRvU291cmNlKFByb21pc2UpLFxuICAgIHNldEN0b3JTdHJpbmcgPSB0b1NvdXJjZShTZXQpLFxuICAgIHdlYWtNYXBDdG9yU3RyaW5nID0gdG9Tb3VyY2UoV2Vha01hcCk7XG5cbi8qKlxuICogR2V0cyB0aGUgYHRvU3RyaW5nVGFnYCBvZiBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gKi9cbnZhciBnZXRUYWcgPSBiYXNlR2V0VGFnO1xuXG4vLyBGYWxsYmFjayBmb3IgZGF0YSB2aWV3cywgbWFwcywgc2V0cywgYW5kIHdlYWsgbWFwcyBpbiBJRSAxMSBhbmQgcHJvbWlzZXMgaW4gTm9kZS5qcyA8IDYuXG5pZiAoKERhdGFWaWV3ICYmIGdldFRhZyhuZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKDEpKSkgIT0gZGF0YVZpZXdUYWcpIHx8XG4gICAgKE1hcCAmJiBnZXRUYWcobmV3IE1hcCkgIT0gbWFwVGFnKSB8fFxuICAgIChQcm9taXNlICYmIGdldFRhZyhQcm9taXNlLnJlc29sdmUoKSkgIT0gcHJvbWlzZVRhZykgfHxcbiAgICAoU2V0ICYmIGdldFRhZyhuZXcgU2V0KSAhPSBzZXRUYWcpIHx8XG4gICAgKFdlYWtNYXAgJiYgZ2V0VGFnKG5ldyBXZWFrTWFwKSAhPSB3ZWFrTWFwVGFnKSkge1xuICBnZXRUYWcgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHZhciByZXN1bHQgPSBiYXNlR2V0VGFnKHZhbHVlKSxcbiAgICAgICAgQ3RvciA9IHJlc3VsdCA9PSBvYmplY3RUYWcgPyB2YWx1ZS5jb25zdHJ1Y3RvciA6IHVuZGVmaW5lZCxcbiAgICAgICAgY3RvclN0cmluZyA9IEN0b3IgPyB0b1NvdXJjZShDdG9yKSA6ICcnO1xuXG4gICAgaWYgKGN0b3JTdHJpbmcpIHtcbiAgICAgIHN3aXRjaCAoY3RvclN0cmluZykge1xuICAgICAgICBjYXNlIGRhdGFWaWV3Q3RvclN0cmluZzogcmV0dXJuIGRhdGFWaWV3VGFnO1xuICAgICAgICBjYXNlIG1hcEN0b3JTdHJpbmc6IHJldHVybiBtYXBUYWc7XG4gICAgICAgIGNhc2UgcHJvbWlzZUN0b3JTdHJpbmc6IHJldHVybiBwcm9taXNlVGFnO1xuICAgICAgICBjYXNlIHNldEN0b3JTdHJpbmc6IHJldHVybiBzZXRUYWc7XG4gICAgICAgIGNhc2Ugd2Vha01hcEN0b3JTdHJpbmc6IHJldHVybiB3ZWFrTWFwVGFnO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFRhZztcbiIsIi8qKlxuICogR2V0cyB0aGUgdmFsdWUgYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGdldFZhbHVlKG9iamVjdCwga2V5KSB7XG4gIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFZhbHVlO1xuIiwidmFyIGNhc3RQYXRoID0gcmVxdWlyZSgnLi9fY2FzdFBhdGgnKSxcbiAgICBpc0FyZ3VtZW50cyA9IHJlcXVpcmUoJy4vaXNBcmd1bWVudHMnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNJbmRleCA9IHJlcXVpcmUoJy4vX2lzSW5kZXgnKSxcbiAgICBpc0xlbmd0aCA9IHJlcXVpcmUoJy4vaXNMZW5ndGgnKSxcbiAgICB0b0tleSA9IHJlcXVpcmUoJy4vX3RvS2V5Jyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGBwYXRoYCBleGlzdHMgb24gYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHRvIGNoZWNrLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaGFzRnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2sgcHJvcGVydGllcy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgcGF0aGAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGhhc1BhdGgob2JqZWN0LCBwYXRoLCBoYXNGdW5jKSB7XG4gIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuXG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGgsXG4gICAgICByZXN1bHQgPSBmYWxzZTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBrZXkgPSB0b0tleShwYXRoW2luZGV4XSk7XG4gICAgaWYgKCEocmVzdWx0ID0gb2JqZWN0ICE9IG51bGwgJiYgaGFzRnVuYyhvYmplY3QsIGtleSkpKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgb2JqZWN0ID0gb2JqZWN0W2tleV07XG4gIH1cbiAgaWYgKHJlc3VsdCB8fCArK2luZGV4ICE9IGxlbmd0aCkge1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgbGVuZ3RoID0gb2JqZWN0ID09IG51bGwgPyAwIDogb2JqZWN0Lmxlbmd0aDtcbiAgcmV0dXJuICEhbGVuZ3RoICYmIGlzTGVuZ3RoKGxlbmd0aCkgJiYgaXNJbmRleChrZXksIGxlbmd0aCkgJiZcbiAgICAoaXNBcnJheShvYmplY3QpIHx8IGlzQXJndW1lbnRzKG9iamVjdCkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc1BhdGg7XG4iLCJ2YXIgbmF0aXZlQ3JlYXRlID0gcmVxdWlyZSgnLi9fbmF0aXZlQ3JlYXRlJyk7XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgaGFzaC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKi9cbmZ1bmN0aW9uIGhhc2hDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IG5hdGl2ZUNyZWF0ZSA/IG5hdGl2ZUNyZWF0ZShudWxsKSA6IHt9O1xuICB0aGlzLnNpemUgPSAwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc2hDbGVhcjtcbiIsIi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGhhc2guXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7T2JqZWN0fSBoYXNoIFRoZSBoYXNoIHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNoRGVsZXRlKGtleSkge1xuICB2YXIgcmVzdWx0ID0gdGhpcy5oYXMoa2V5KSAmJiBkZWxldGUgdGhpcy5fX2RhdGFfX1trZXldO1xuICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzaERlbGV0ZTtcbiIsInZhciBuYXRpdmVDcmVhdGUgPSByZXF1aXJlKCcuL19uYXRpdmVDcmVhdGUnKTtcblxuLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEdldHMgdGhlIGhhc2ggdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gaGFzaEdldChrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICBpZiAobmF0aXZlQ3JlYXRlKSB7XG4gICAgdmFyIHJlc3VsdCA9IGRhdGFba2V5XTtcbiAgICByZXR1cm4gcmVzdWx0ID09PSBIQVNIX1VOREVGSU5FRCA/IHVuZGVmaW5lZCA6IHJlc3VsdDtcbiAgfVxuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpID8gZGF0YVtrZXldIDogdW5kZWZpbmVkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc2hHZXQ7XG4iLCJ2YXIgbmF0aXZlQ3JlYXRlID0gcmVxdWlyZSgnLi9fbmF0aXZlQ3JlYXRlJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgaGFzaCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzaEhhcyhrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICByZXR1cm4gbmF0aXZlQ3JlYXRlID8gKGRhdGFba2V5XSAhPT0gdW5kZWZpbmVkKSA6IGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNoSGFzO1xuIiwidmFyIG5hdGl2ZUNyZWF0ZSA9IHJlcXVpcmUoJy4vX25hdGl2ZUNyZWF0ZScpO1xuXG4vKiogVXNlZCB0byBzdGFuZC1pbiBmb3IgYHVuZGVmaW5lZGAgaGFzaCB2YWx1ZXMuICovXG52YXIgSEFTSF9VTkRFRklORUQgPSAnX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfXyc7XG5cbi8qKlxuICogU2V0cyB0aGUgaGFzaCBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGhhc2ggaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIGhhc2hTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIHRoaXMuc2l6ZSArPSB0aGlzLmhhcyhrZXkpID8gMCA6IDE7XG4gIGRhdGFba2V5XSA9IChuYXRpdmVDcmVhdGUgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCkgPyBIQVNIX1VOREVGSU5FRCA6IHZhbHVlO1xuICByZXR1cm4gdGhpcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNoU2V0O1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBJbml0aWFsaXplcyBhbiBhcnJheSBjbG9uZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNsb25lLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBpbml0aWFsaXplZCBjbG9uZS5cbiAqL1xuZnVuY3Rpb24gaW5pdENsb25lQXJyYXkoYXJyYXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgIHJlc3VsdCA9IG5ldyBhcnJheS5jb25zdHJ1Y3RvcihsZW5ndGgpO1xuXG4gIC8vIEFkZCBwcm9wZXJ0aWVzIGFzc2lnbmVkIGJ5IGBSZWdFeHAjZXhlY2AuXG4gIGlmIChsZW5ndGggJiYgdHlwZW9mIGFycmF5WzBdID09ICdzdHJpbmcnICYmIGhhc093blByb3BlcnR5LmNhbGwoYXJyYXksICdpbmRleCcpKSB7XG4gICAgcmVzdWx0LmluZGV4ID0gYXJyYXkuaW5kZXg7XG4gICAgcmVzdWx0LmlucHV0ID0gYXJyYXkuaW5wdXQ7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbml0Q2xvbmVBcnJheTtcbiIsInZhciBjbG9uZUFycmF5QnVmZmVyID0gcmVxdWlyZSgnLi9fY2xvbmVBcnJheUJ1ZmZlcicpLFxuICAgIGNsb25lRGF0YVZpZXcgPSByZXF1aXJlKCcuL19jbG9uZURhdGFWaWV3JyksXG4gICAgY2xvbmVSZWdFeHAgPSByZXF1aXJlKCcuL19jbG9uZVJlZ0V4cCcpLFxuICAgIGNsb25lU3ltYm9sID0gcmVxdWlyZSgnLi9fY2xvbmVTeW1ib2wnKSxcbiAgICBjbG9uZVR5cGVkQXJyYXkgPSByZXF1aXJlKCcuL19jbG9uZVR5cGVkQXJyYXknKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGJvb2xUYWcgPSAnW29iamVjdCBCb29sZWFuXScsXG4gICAgZGF0ZVRhZyA9ICdbb2JqZWN0IERhdGVdJyxcbiAgICBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICBudW1iZXJUYWcgPSAnW29iamVjdCBOdW1iZXJdJyxcbiAgICByZWdleHBUYWcgPSAnW29iamVjdCBSZWdFeHBdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJyxcbiAgICBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJztcblxudmFyIGFycmF5QnVmZmVyVGFnID0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJyxcbiAgICBkYXRhVmlld1RhZyA9ICdbb2JqZWN0IERhdGFWaWV3XScsXG4gICAgZmxvYXQzMlRhZyA9ICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nLFxuICAgIGZsb2F0NjRUYWcgPSAnW29iamVjdCBGbG9hdDY0QXJyYXldJyxcbiAgICBpbnQ4VGFnID0gJ1tvYmplY3QgSW50OEFycmF5XScsXG4gICAgaW50MTZUYWcgPSAnW29iamVjdCBJbnQxNkFycmF5XScsXG4gICAgaW50MzJUYWcgPSAnW29iamVjdCBJbnQzMkFycmF5XScsXG4gICAgdWludDhUYWcgPSAnW29iamVjdCBVaW50OEFycmF5XScsXG4gICAgdWludDhDbGFtcGVkVGFnID0gJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJyxcbiAgICB1aW50MTZUYWcgPSAnW29iamVjdCBVaW50MTZBcnJheV0nLFxuICAgIHVpbnQzMlRhZyA9ICdbb2JqZWN0IFVpbnQzMkFycmF5XSc7XG5cbi8qKlxuICogSW5pdGlhbGl6ZXMgYW4gb2JqZWN0IGNsb25lIGJhc2VkIG9uIGl0cyBgdG9TdHJpbmdUYWdgLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIGZ1bmN0aW9uIG9ubHkgc3VwcG9ydHMgY2xvbmluZyB2YWx1ZXMgd2l0aCB0YWdzIG9mXG4gKiBgQm9vbGVhbmAsIGBEYXRlYCwgYEVycm9yYCwgYE1hcGAsIGBOdW1iZXJgLCBgUmVnRXhwYCwgYFNldGAsIG9yIGBTdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY2xvbmUuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGFnIFRoZSBgdG9TdHJpbmdUYWdgIG9mIHRoZSBvYmplY3QgdG8gY2xvbmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaW5pdGlhbGl6ZWQgY2xvbmUuXG4gKi9cbmZ1bmN0aW9uIGluaXRDbG9uZUJ5VGFnKG9iamVjdCwgdGFnLCBpc0RlZXApIHtcbiAgdmFyIEN0b3IgPSBvYmplY3QuY29uc3RydWN0b3I7XG4gIHN3aXRjaCAodGFnKSB7XG4gICAgY2FzZSBhcnJheUJ1ZmZlclRhZzpcbiAgICAgIHJldHVybiBjbG9uZUFycmF5QnVmZmVyKG9iamVjdCk7XG5cbiAgICBjYXNlIGJvb2xUYWc6XG4gICAgY2FzZSBkYXRlVGFnOlxuICAgICAgcmV0dXJuIG5ldyBDdG9yKCtvYmplY3QpO1xuXG4gICAgY2FzZSBkYXRhVmlld1RhZzpcbiAgICAgIHJldHVybiBjbG9uZURhdGFWaWV3KG9iamVjdCwgaXNEZWVwKTtcblxuICAgIGNhc2UgZmxvYXQzMlRhZzogY2FzZSBmbG9hdDY0VGFnOlxuICAgIGNhc2UgaW50OFRhZzogY2FzZSBpbnQxNlRhZzogY2FzZSBpbnQzMlRhZzpcbiAgICBjYXNlIHVpbnQ4VGFnOiBjYXNlIHVpbnQ4Q2xhbXBlZFRhZzogY2FzZSB1aW50MTZUYWc6IGNhc2UgdWludDMyVGFnOlxuICAgICAgcmV0dXJuIGNsb25lVHlwZWRBcnJheShvYmplY3QsIGlzRGVlcCk7XG5cbiAgICBjYXNlIG1hcFRhZzpcbiAgICAgIHJldHVybiBuZXcgQ3RvcjtcblxuICAgIGNhc2UgbnVtYmVyVGFnOlxuICAgIGNhc2Ugc3RyaW5nVGFnOlxuICAgICAgcmV0dXJuIG5ldyBDdG9yKG9iamVjdCk7XG5cbiAgICBjYXNlIHJlZ2V4cFRhZzpcbiAgICAgIHJldHVybiBjbG9uZVJlZ0V4cChvYmplY3QpO1xuXG4gICAgY2FzZSBzZXRUYWc6XG4gICAgICByZXR1cm4gbmV3IEN0b3I7XG5cbiAgICBjYXNlIHN5bWJvbFRhZzpcbiAgICAgIHJldHVybiBjbG9uZVN5bWJvbChvYmplY3QpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5pdENsb25lQnlUYWc7XG4iLCJ2YXIgYmFzZUNyZWF0ZSA9IHJlcXVpcmUoJy4vX2Jhc2VDcmVhdGUnKSxcbiAgICBnZXRQcm90b3R5cGUgPSByZXF1aXJlKCcuL19nZXRQcm90b3R5cGUnKSxcbiAgICBpc1Byb3RvdHlwZSA9IHJlcXVpcmUoJy4vX2lzUHJvdG90eXBlJyk7XG5cbi8qKlxuICogSW5pdGlhbGl6ZXMgYW4gb2JqZWN0IGNsb25lLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY2xvbmUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBpbml0aWFsaXplZCBjbG9uZS5cbiAqL1xuZnVuY3Rpb24gaW5pdENsb25lT2JqZWN0KG9iamVjdCkge1xuICByZXR1cm4gKHR5cGVvZiBvYmplY3QuY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNQcm90b3R5cGUob2JqZWN0KSlcbiAgICA/IGJhc2VDcmVhdGUoZ2V0UHJvdG90eXBlKG9iamVjdCkpXG4gICAgOiB7fTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbml0Q2xvbmVPYmplY3Q7XG4iLCIvKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IHVuc2lnbmVkIGludGVnZXIgdmFsdWVzLiAqL1xudmFyIHJlSXNVaW50ID0gL14oPzowfFsxLTldXFxkKikkLztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgaW5kZXguXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9TUFYX1NBRkVfSU5URUdFUl0gVGhlIHVwcGVyIGJvdW5kcyBvZiBhIHZhbGlkIGluZGV4LlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBpbmRleCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0luZGV4KHZhbHVlLCBsZW5ndGgpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIGxlbmd0aCA9IGxlbmd0aCA9PSBudWxsID8gTUFYX1NBRkVfSU5URUdFUiA6IGxlbmd0aDtcblxuICByZXR1cm4gISFsZW5ndGggJiZcbiAgICAodHlwZSA9PSAnbnVtYmVyJyB8fFxuICAgICAgKHR5cGUgIT0gJ3N5bWJvbCcgJiYgcmVJc1VpbnQudGVzdCh2YWx1ZSkpKSAmJlxuICAgICAgICAodmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8IGxlbmd0aCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNJbmRleDtcbiIsInZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNTeW1ib2wgPSByZXF1aXJlKCcuL2lzU3ltYm9sJyk7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIHByb3BlcnR5IG5hbWVzIHdpdGhpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbnZhciByZUlzRGVlcFByb3AgPSAvXFwufFxcWyg/OlteW1xcXV0qfChbXCInXSkoPzooPyFcXDEpW15cXFxcXXxcXFxcLikqP1xcMSlcXF0vLFxuICAgIHJlSXNQbGFpblByb3AgPSAvXlxcdyokLztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHByb3BlcnR5IG5hbWUgYW5kIG5vdCBhIHByb3BlcnR5IHBhdGguXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkga2V5cyBvbi5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvcGVydHkgbmFtZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0tleSh2YWx1ZSwgb2JqZWN0KSB7XG4gIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgaWYgKHR5cGUgPT0gJ251bWJlcicgfHwgdHlwZSA9PSAnc3ltYm9sJyB8fCB0eXBlID09ICdib29sZWFuJyB8fFxuICAgICAgdmFsdWUgPT0gbnVsbCB8fCBpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gcmVJc1BsYWluUHJvcC50ZXN0KHZhbHVlKSB8fCAhcmVJc0RlZXBQcm9wLnRlc3QodmFsdWUpIHx8XG4gICAgKG9iamVjdCAhPSBudWxsICYmIHZhbHVlIGluIE9iamVjdChvYmplY3QpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0tleTtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUgZm9yIHVzZSBhcyB1bmlxdWUgb2JqZWN0IGtleS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0tleWFibGUodmFsdWUpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIHJldHVybiAodHlwZSA9PSAnc3RyaW5nJyB8fCB0eXBlID09ICdudW1iZXInIHx8IHR5cGUgPT0gJ3N5bWJvbCcgfHwgdHlwZSA9PSAnYm9vbGVhbicpXG4gICAgPyAodmFsdWUgIT09ICdfX3Byb3RvX18nKVxuICAgIDogKHZhbHVlID09PSBudWxsKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0tleWFibGU7XG4iLCJ2YXIgY29yZUpzRGF0YSA9IHJlcXVpcmUoJy4vX2NvcmVKc0RhdGEnKTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG1ldGhvZHMgbWFzcXVlcmFkaW5nIGFzIG5hdGl2ZS4gKi9cbnZhciBtYXNrU3JjS2V5ID0gKGZ1bmN0aW9uKCkge1xuICB2YXIgdWlkID0gL1teLl0rJC8uZXhlYyhjb3JlSnNEYXRhICYmIGNvcmVKc0RhdGEua2V5cyAmJiBjb3JlSnNEYXRhLmtleXMuSUVfUFJPVE8gfHwgJycpO1xuICByZXR1cm4gdWlkID8gKCdTeW1ib2woc3JjKV8xLicgKyB1aWQpIDogJyc7XG59KCkpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgZnVuY2AgaGFzIGl0cyBzb3VyY2UgbWFza2VkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgZnVuY2AgaXMgbWFza2VkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzTWFza2VkKGZ1bmMpIHtcbiAgcmV0dXJuICEhbWFza1NyY0tleSAmJiAobWFza1NyY0tleSBpbiBmdW5jKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc01hc2tlZDtcbiIsIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGEgcHJvdG90eXBlIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHByb3RvdHlwZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc1Byb3RvdHlwZSh2YWx1ZSkge1xuICB2YXIgQ3RvciA9IHZhbHVlICYmIHZhbHVlLmNvbnN0cnVjdG9yLFxuICAgICAgcHJvdG8gPSAodHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBDdG9yLnByb3RvdHlwZSkgfHwgb2JqZWN0UHJvdG87XG5cbiAgcmV0dXJuIHZhbHVlID09PSBwcm90bztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1Byb3RvdHlwZTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSBmb3Igc3RyaWN0IGVxdWFsaXR5IGNvbXBhcmlzb25zLCBpLmUuIGA9PT1gLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlmIHN1aXRhYmxlIGZvciBzdHJpY3RcbiAqICBlcXVhbGl0eSBjb21wYXJpc29ucywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc1N0cmljdENvbXBhcmFibGUodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZSAmJiAhaXNPYmplY3QodmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzU3RyaWN0Q29tcGFyYWJsZTtcbiIsIi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBbXTtcbiAgdGhpcy5zaXplID0gMDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0Q2FjaGVDbGVhcjtcbiIsInZhciBhc3NvY0luZGV4T2YgPSByZXF1aXJlKCcuL19hc3NvY0luZGV4T2YnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHNwbGljZSA9IGFycmF5UHJvdG8uc3BsaWNlO1xuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBsaXN0IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVEZWxldGUoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgaWYgKGluZGV4IDwgMCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgbGFzdEluZGV4ID0gZGF0YS5sZW5ndGggLSAxO1xuICBpZiAoaW5kZXggPT0gbGFzdEluZGV4KSB7XG4gICAgZGF0YS5wb3AoKTtcbiAgfSBlbHNlIHtcbiAgICBzcGxpY2UuY2FsbChkYXRhLCBpbmRleCwgMSk7XG4gIH1cbiAgLS10aGlzLnNpemU7XG4gIHJldHVybiB0cnVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGxpc3RDYWNoZURlbGV0ZTtcbiIsInZhciBhc3NvY0luZGV4T2YgPSByZXF1aXJlKCcuL19hc3NvY0luZGV4T2YnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlR2V0KGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIHJldHVybiBpbmRleCA8IDAgPyB1bmRlZmluZWQgOiBkYXRhW2luZGV4XVsxXTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0Q2FjaGVHZXQ7XG4iLCJ2YXIgYXNzb2NJbmRleE9mID0gcmVxdWlyZSgnLi9fYXNzb2NJbmRleE9mJyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVIYXMoa2V5KSB7XG4gIHJldHVybiBhc3NvY0luZGV4T2YodGhpcy5fX2RhdGFfXywga2V5KSA+IC0xO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGxpc3RDYWNoZUhhcztcbiIsInZhciBhc3NvY0luZGV4T2YgPSByZXF1aXJlKCcuL19hc3NvY0luZGV4T2YnKTtcblxuLyoqXG4gKiBTZXRzIHRoZSBsaXN0IGNhY2hlIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBsaXN0IGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIGlmIChpbmRleCA8IDApIHtcbiAgICArK3RoaXMuc2l6ZTtcbiAgICBkYXRhLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgfSBlbHNlIHtcbiAgICBkYXRhW2luZGV4XVsxXSA9IHZhbHVlO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGxpc3RDYWNoZVNldDtcbiIsInZhciBIYXNoID0gcmVxdWlyZSgnLi9fSGFzaCcpLFxuICAgIExpc3RDYWNoZSA9IHJlcXVpcmUoJy4vX0xpc3RDYWNoZScpLFxuICAgIE1hcCA9IHJlcXVpcmUoJy4vX01hcCcpO1xuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIG1hcC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUNsZWFyKCkge1xuICB0aGlzLnNpemUgPSAwO1xuICB0aGlzLl9fZGF0YV9fID0ge1xuICAgICdoYXNoJzogbmV3IEhhc2gsXG4gICAgJ21hcCc6IG5ldyAoTWFwIHx8IExpc3RDYWNoZSksXG4gICAgJ3N0cmluZyc6IG5ldyBIYXNoXG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwQ2FjaGVDbGVhcjtcbiIsInZhciBnZXRNYXBEYXRhID0gcmVxdWlyZSgnLi9fZ2V0TWFwRGF0YScpO1xuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBtYXAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVEZWxldGUoa2V5KSB7XG4gIHZhciByZXN1bHQgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSlbJ2RlbGV0ZSddKGtleSk7XG4gIHRoaXMuc2l6ZSAtPSByZXN1bHQgPyAxIDogMDtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBDYWNoZURlbGV0ZTtcbiIsInZhciBnZXRNYXBEYXRhID0gcmVxdWlyZSgnLi9fZ2V0TWFwRGF0YScpO1xuXG4vKipcbiAqIEdldHMgdGhlIG1hcCB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVHZXQoa2V5KSB7XG4gIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuZ2V0KGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwQ2FjaGVHZXQ7XG4iLCJ2YXIgZ2V0TWFwRGF0YSA9IHJlcXVpcmUoJy4vX2dldE1hcERhdGEnKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYSBtYXAgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUhhcyhrZXkpIHtcbiAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5oYXMoa2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBDYWNoZUhhcztcbiIsInZhciBnZXRNYXBEYXRhID0gcmVxdWlyZSgnLi9fZ2V0TWFwRGF0YScpO1xuXG4vKipcbiAqIFNldHMgdGhlIG1hcCBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBtYXAgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSksXG4gICAgICBzaXplID0gZGF0YS5zaXplO1xuXG4gIGRhdGEuc2V0KGtleSwgdmFsdWUpO1xuICB0aGlzLnNpemUgKz0gZGF0YS5zaXplID09IHNpemUgPyAwIDogMTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwQ2FjaGVTZXQ7XG4iLCIvKipcbiAqIENvbnZlcnRzIGBtYXBgIHRvIGl0cyBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBrZXktdmFsdWUgcGFpcnMuXG4gKi9cbmZ1bmN0aW9uIG1hcFRvQXJyYXkobWFwKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gQXJyYXkobWFwLnNpemUpO1xuXG4gIG1hcC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICByZXN1bHRbKytpbmRleF0gPSBba2V5LCB2YWx1ZV07XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcFRvQXJyYXk7XG4iLCIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgbWF0Y2hlc1Byb3BlcnR5YCBmb3Igc291cmNlIHZhbHVlcyBzdWl0YWJsZVxuICogZm9yIHN0cmljdCBlcXVhbGl0eSBjb21wYXJpc29ucywgaS5lLiBgPT09YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSB2YWx1ZSB0byBtYXRjaC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlKGtleSwgc3JjVmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gb2JqZWN0W2tleV0gPT09IHNyY1ZhbHVlICYmXG4gICAgICAoc3JjVmFsdWUgIT09IHVuZGVmaW5lZCB8fCAoa2V5IGluIE9iamVjdChvYmplY3QpKSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWF0Y2hlc1N0cmljdENvbXBhcmFibGU7XG4iLCJ2YXIgbWVtb2l6ZSA9IHJlcXVpcmUoJy4vbWVtb2l6ZScpO1xuXG4vKiogVXNlZCBhcyB0aGUgbWF4aW11bSBtZW1vaXplIGNhY2hlIHNpemUuICovXG52YXIgTUFYX01FTU9JWkVfU0laRSA9IDUwMDtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ubWVtb2l6ZWAgd2hpY2ggY2xlYXJzIHRoZSBtZW1vaXplZCBmdW5jdGlvbidzXG4gKiBjYWNoZSB3aGVuIGl0IGV4Y2VlZHMgYE1BWF9NRU1PSVpFX1NJWkVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBoYXZlIGl0cyBvdXRwdXQgbWVtb2l6ZWQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBtZW1vaXplZCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gbWVtb2l6ZUNhcHBlZChmdW5jKSB7XG4gIHZhciByZXN1bHQgPSBtZW1vaXplKGZ1bmMsIGZ1bmN0aW9uKGtleSkge1xuICAgIGlmIChjYWNoZS5zaXplID09PSBNQVhfTUVNT0laRV9TSVpFKSB7XG4gICAgICBjYWNoZS5jbGVhcigpO1xuICAgIH1cbiAgICByZXR1cm4ga2V5O1xuICB9KTtcblxuICB2YXIgY2FjaGUgPSByZXN1bHQuY2FjaGU7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWVtb2l6ZUNhcHBlZDtcbiIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIG5hdGl2ZUNyZWF0ZSA9IGdldE5hdGl2ZShPYmplY3QsICdjcmVhdGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBuYXRpdmVDcmVhdGU7XG4iLCJ2YXIgb3ZlckFyZyA9IHJlcXVpcmUoJy4vX292ZXJBcmcnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZUtleXMgPSBvdmVyQXJnKE9iamVjdC5rZXlzLCBPYmplY3QpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5hdGl2ZUtleXM7XG4iLCIvKipcbiAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZVxuICogW2BPYmplY3Qua2V5c2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5rZXlzKVxuICogZXhjZXB0IHRoYXQgaXQgaW5jbHVkZXMgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydGllcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gbmF0aXZlS2V5c0luKG9iamVjdCkge1xuICB2YXIgcmVzdWx0ID0gW107XG4gIGlmIChvYmplY3QgIT0gbnVsbCkge1xuICAgIGZvciAodmFyIGtleSBpbiBPYmplY3Qob2JqZWN0KSkge1xuICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBuYXRpdmVLZXlzSW47XG4iLCJ2YXIgZnJlZUdsb2JhbCA9IHJlcXVpcmUoJy4vX2ZyZWVHbG9iYWwnKTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cbnZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xudmFyIGZyZWVNb2R1bGUgPSBmcmVlRXhwb3J0cyAmJiB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblxuLyoqIERldGVjdCB0aGUgcG9wdWxhciBDb21tb25KUyBleHRlbnNpb24gYG1vZHVsZS5leHBvcnRzYC4gKi9cbnZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHByb2Nlc3NgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlUHJvY2VzcyA9IG1vZHVsZUV4cG9ydHMgJiYgZnJlZUdsb2JhbC5wcm9jZXNzO1xuXG4vKiogVXNlZCB0byBhY2Nlc3MgZmFzdGVyIE5vZGUuanMgaGVscGVycy4gKi9cbnZhciBub2RlVXRpbCA9IChmdW5jdGlvbigpIHtcbiAgdHJ5IHtcbiAgICAvLyBVc2UgYHV0aWwudHlwZXNgIGZvciBOb2RlLmpzIDEwKy5cbiAgICB2YXIgdHlwZXMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUucmVxdWlyZSAmJiBmcmVlTW9kdWxlLnJlcXVpcmUoJ3V0aWwnKS50eXBlcztcblxuICAgIGlmICh0eXBlcykge1xuICAgICAgcmV0dXJuIHR5cGVzO1xuICAgIH1cblxuICAgIC8vIExlZ2FjeSBgcHJvY2Vzcy5iaW5kaW5nKCd1dGlsJylgIGZvciBOb2RlLmpzIDwgMTAuXG4gICAgcmV0dXJuIGZyZWVQcm9jZXNzICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcgJiYgZnJlZVByb2Nlc3MuYmluZGluZygndXRpbCcpO1xuICB9IGNhdGNoIChlKSB7fVxufSgpKTtcblxubW9kdWxlLmV4cG9ydHMgPSBub2RlVXRpbDtcbiIsIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcgdXNpbmcgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG9iamVjdFRvU3RyaW5nO1xuIiwiLyoqXG4gKiBDcmVhdGVzIGEgdW5hcnkgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGl0cyBhcmd1bWVudCB0cmFuc2Zvcm1lZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHRyYW5zZm9ybSBUaGUgYXJndW1lbnQgdHJhbnNmb3JtLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIG92ZXJBcmcoZnVuYywgdHJhbnNmb3JtKSB7XG4gIHJldHVybiBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gZnVuYyh0cmFuc2Zvcm0oYXJnKSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gb3ZlckFyZztcbiIsInZhciBmcmVlR2xvYmFsID0gcmVxdWlyZSgnLi9fZnJlZUdsb2JhbCcpO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHNlbGZgLiAqL1xudmFyIGZyZWVTZWxmID0gdHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZiAmJiBzZWxmLk9iamVjdCA9PT0gT2JqZWN0ICYmIHNlbGY7XG5cbi8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xudmFyIHJvb3QgPSBmcmVlR2xvYmFsIHx8IGZyZWVTZWxmIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gcm9vdDtcbiIsIi8qKiBVc2VkIHRvIHN0YW5kLWluIGZvciBgdW5kZWZpbmVkYCBoYXNoIHZhbHVlcy4gKi9cbnZhciBIQVNIX1VOREVGSU5FRCA9ICdfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fJztcblxuLyoqXG4gKiBBZGRzIGB2YWx1ZWAgdG8gdGhlIGFycmF5IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBhZGRcbiAqIEBtZW1iZXJPZiBTZXRDYWNoZVxuICogQGFsaWFzIHB1c2hcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNhY2hlLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIHNldENhY2hlQWRkKHZhbHVlKSB7XG4gIHRoaXMuX19kYXRhX18uc2V0KHZhbHVlLCBIQVNIX1VOREVGSU5FRCk7XG4gIHJldHVybiB0aGlzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldENhY2hlQWRkO1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBpbiB0aGUgYXJyYXkgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIFNldENhY2hlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBzZXRDYWNoZUhhcyh2YWx1ZSkge1xuICByZXR1cm4gdGhpcy5fX2RhdGFfXy5oYXModmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldENhY2hlSGFzO1xuIiwiLyoqXG4gKiBDb252ZXJ0cyBgc2V0YCB0byBhbiBhcnJheSBvZiBpdHMgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gc2V0IFRoZSBzZXQgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgdmFsdWVzLlxuICovXG5mdW5jdGlvbiBzZXRUb0FycmF5KHNldCkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IEFycmF5KHNldC5zaXplKTtcblxuICBzZXQuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJlc3VsdFsrK2luZGV4XSA9IHZhbHVlO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRUb0FycmF5O1xuIiwidmFyIExpc3RDYWNoZSA9IHJlcXVpcmUoJy4vX0xpc3RDYWNoZScpO1xuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIHN0YWNrLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIFN0YWNrXG4gKi9cbmZ1bmN0aW9uIHN0YWNrQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBuZXcgTGlzdENhY2hlO1xuICB0aGlzLnNpemUgPSAwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YWNrQ2xlYXI7XG4iLCIvKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBzdGFjay5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBzdGFja0RlbGV0ZShrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgcmVzdWx0ID0gZGF0YVsnZGVsZXRlJ10oa2V5KTtcblxuICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RhY2tEZWxldGU7XG4iLCIvKipcbiAqIEdldHMgdGhlIHN0YWNrIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBzdGFja0dldChrZXkpIHtcbiAgcmV0dXJuIHRoaXMuX19kYXRhX18uZ2V0KGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RhY2tHZXQ7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBhIHN0YWNrIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gc3RhY2tIYXMoa2V5KSB7XG4gIHJldHVybiB0aGlzLl9fZGF0YV9fLmhhcyhrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YWNrSGFzO1xuIiwidmFyIExpc3RDYWNoZSA9IHJlcXVpcmUoJy4vX0xpc3RDYWNoZScpLFxuICAgIE1hcCA9IHJlcXVpcmUoJy4vX01hcCcpLFxuICAgIE1hcENhY2hlID0gcmVxdWlyZSgnLi9fTWFwQ2FjaGUnKTtcblxuLyoqIFVzZWQgYXMgdGhlIHNpemUgdG8gZW5hYmxlIGxhcmdlIGFycmF5IG9wdGltaXphdGlvbnMuICovXG52YXIgTEFSR0VfQVJSQVlfU0laRSA9IDIwMDtcblxuLyoqXG4gKiBTZXRzIHRoZSBzdGFjayBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBzdGFjayBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gc3RhY2tTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIGlmIChkYXRhIGluc3RhbmNlb2YgTGlzdENhY2hlKSB7XG4gICAgdmFyIHBhaXJzID0gZGF0YS5fX2RhdGFfXztcbiAgICBpZiAoIU1hcCB8fCAocGFpcnMubGVuZ3RoIDwgTEFSR0VfQVJSQVlfU0laRSAtIDEpKSB7XG4gICAgICBwYWlycy5wdXNoKFtrZXksIHZhbHVlXSk7XG4gICAgICB0aGlzLnNpemUgPSArK2RhdGEuc2l6ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBkYXRhID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBNYXBDYWNoZShwYWlycyk7XG4gIH1cbiAgZGF0YS5zZXQoa2V5LCB2YWx1ZSk7XG4gIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RhY2tTZXQ7XG4iLCJ2YXIgbWVtb2l6ZUNhcHBlZCA9IHJlcXVpcmUoJy4vX21lbW9pemVDYXBwZWQnKTtcblxuLyoqIFVzZWQgdG8gbWF0Y2ggcHJvcGVydHkgbmFtZXMgd2l0aGluIHByb3BlcnR5IHBhdGhzLiAqL1xudmFyIHJlUHJvcE5hbWUgPSAvW14uW1xcXV0rfFxcWyg/OigtP1xcZCsoPzpcXC5cXGQrKT8pfChbXCInXSkoKD86KD8hXFwyKVteXFxcXF18XFxcXC4pKj8pXFwyKVxcXXwoPz0oPzpcXC58XFxbXFxdKSg/OlxcLnxcXFtcXF18JCkpL2c7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIGJhY2tzbGFzaGVzIGluIHByb3BlcnR5IHBhdGhzLiAqL1xudmFyIHJlRXNjYXBlQ2hhciA9IC9cXFxcKFxcXFwpPy9nO1xuXG4vKipcbiAqIENvbnZlcnRzIGBzdHJpbmdgIHRvIGEgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHByb3BlcnR5IHBhdGggYXJyYXkuXG4gKi9cbnZhciBzdHJpbmdUb1BhdGggPSBtZW1vaXplQ2FwcGVkKGZ1bmN0aW9uKHN0cmluZykge1xuICB2YXIgcmVzdWx0ID0gW107XG4gIGlmIChzdHJpbmcuY2hhckNvZGVBdCgwKSA9PT0gNDYgLyogLiAqLykge1xuICAgIHJlc3VsdC5wdXNoKCcnKTtcbiAgfVxuICBzdHJpbmcucmVwbGFjZShyZVByb3BOYW1lLCBmdW5jdGlvbihtYXRjaCwgbnVtYmVyLCBxdW90ZSwgc3ViU3RyaW5nKSB7XG4gICAgcmVzdWx0LnB1c2gocXVvdGUgPyBzdWJTdHJpbmcucmVwbGFjZShyZUVzY2FwZUNoYXIsICckMScpIDogKG51bWJlciB8fCBtYXRjaCkpO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHN0cmluZ1RvUGF0aDtcbiIsInZhciBpc1N5bWJvbCA9IHJlcXVpcmUoJy4vaXNTeW1ib2wnKTtcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgSU5GSU5JVFkgPSAxIC8gMDtcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIGtleSBpZiBpdCdzIG5vdCBhIHN0cmluZyBvciBzeW1ib2wuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7c3RyaW5nfHN5bWJvbH0gUmV0dXJucyB0aGUga2V5LlxuICovXG5mdW5jdGlvbiB0b0tleSh2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8IGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICB2YXIgcmVzdWx0ID0gKHZhbHVlICsgJycpO1xuICByZXR1cm4gKHJlc3VsdCA9PSAnMCcgJiYgKDEgLyB2YWx1ZSkgPT0gLUlORklOSVRZKSA/ICctMCcgOiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdG9LZXk7XG4iLCIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKipcbiAqIENvbnZlcnRzIGBmdW5jYCB0byBpdHMgc291cmNlIGNvZGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzb3VyY2UgY29kZS5cbiAqL1xuZnVuY3Rpb24gdG9Tb3VyY2UoZnVuYykge1xuICBpZiAoZnVuYyAhPSBudWxsKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBmdW5jVG9TdHJpbmcuY2FsbChmdW5jKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gKGZ1bmMgKyAnJyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxuICByZXR1cm4gJyc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdG9Tb3VyY2U7XG4iLCJ2YXIgYmFzZUNsb25lID0gcmVxdWlyZSgnLi9fYmFzZUNsb25lJyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIGNsb25pbmcuICovXG52YXIgQ0xPTkVfREVFUF9GTEFHID0gMSxcbiAgICBDTE9ORV9TWU1CT0xTX0ZMQUcgPSA0O1xuXG4vKipcbiAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uY2xvbmVgIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IGNsb25lcyBgdmFsdWVgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMS4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byByZWN1cnNpdmVseSBjbG9uZS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBkZWVwIGNsb25lZCB2YWx1ZS5cbiAqIEBzZWUgXy5jbG9uZVxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0cyA9IFt7ICdhJzogMSB9LCB7ICdiJzogMiB9XTtcbiAqXG4gKiB2YXIgZGVlcCA9IF8uY2xvbmVEZWVwKG9iamVjdHMpO1xuICogY29uc29sZS5sb2coZGVlcFswXSA9PT0gb2JqZWN0c1swXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBjbG9uZURlZXAodmFsdWUpIHtcbiAgcmV0dXJuIGJhc2VDbG9uZSh2YWx1ZSwgQ0xPTkVfREVFUF9GTEFHIHwgQ0xPTkVfU1lNQk9MU19GTEFHKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjbG9uZURlZXA7XG4iLCIvKipcbiAqIFBlcmZvcm1zIGFcbiAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gKiBjb21wYXJpc29uIGJldHdlZW4gdHdvIHZhbHVlcyB0byBkZXRlcm1pbmUgaWYgdGhleSBhcmUgZXF1aXZhbGVudC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAqIHZhciBvdGhlciA9IHsgJ2EnOiAxIH07XG4gKlxuICogXy5lcShvYmplY3QsIG9iamVjdCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5lcShvYmplY3QsIG90aGVyKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5lcSgnYScsICdhJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5lcSgnYScsIE9iamVjdCgnYScpKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5lcShOYU4sIE5hTik7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGVxKHZhbHVlLCBvdGhlcikge1xuICByZXR1cm4gdmFsdWUgPT09IG90aGVyIHx8ICh2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlcTtcbiIsInZhciBiYXNlRm9yT3duID0gcmVxdWlyZSgnLi9fYmFzZUZvck93bicpLFxuICAgIGNhc3RGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2Nhc3RGdW5jdGlvbicpO1xuXG4vKipcbiAqIEl0ZXJhdGVzIG92ZXIgb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2YgYW4gb2JqZWN0IGFuZFxuICogaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBlYWNoIHByb3BlcnR5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRocmVlXG4gKiBhcmd1bWVudHM6ICh2YWx1ZSwga2V5LCBvYmplY3QpLiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXQgaXRlcmF0aW9uXG4gKiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4zLjBcbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKiBAc2VlIF8uZm9yT3duUmlnaHRcbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gRm9vKCkge1xuICogICB0aGlzLmEgPSAxO1xuICogICB0aGlzLmIgPSAyO1xuICogfVxuICpcbiAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gKlxuICogXy5mb3JPd24obmV3IEZvbywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICogICBjb25zb2xlLmxvZyhrZXkpO1xuICogfSk7XG4gKiAvLyA9PiBMb2dzICdhJyB0aGVuICdiJyAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKS5cbiAqL1xuZnVuY3Rpb24gZm9yT3duKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgcmV0dXJuIG9iamVjdCAmJiBiYXNlRm9yT3duKG9iamVjdCwgY2FzdEZ1bmN0aW9uKGl0ZXJhdGVlKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZm9yT3duO1xuIiwidmFyIGJhc2VHZXQgPSByZXF1aXJlKCcuL19iYXNlR2V0Jyk7XG5cbi8qKlxuICogR2V0cyB0aGUgdmFsdWUgYXQgYHBhdGhgIG9mIGBvYmplY3RgLiBJZiB0aGUgcmVzb2x2ZWQgdmFsdWUgaXNcbiAqIGB1bmRlZmluZWRgLCB0aGUgYGRlZmF1bHRWYWx1ZWAgaXMgcmV0dXJuZWQgaW4gaXRzIHBsYWNlLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy43LjBcbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcGFyYW0geyp9IFtkZWZhdWx0VmFsdWVdIFRoZSB2YWx1ZSByZXR1cm5lZCBmb3IgYHVuZGVmaW5lZGAgcmVzb2x2ZWQgdmFsdWVzLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDMgfSB9XSB9O1xuICpcbiAqIF8uZ2V0KG9iamVjdCwgJ2FbMF0uYi5jJyk7XG4gKiAvLyA9PiAzXG4gKlxuICogXy5nZXQob2JqZWN0LCBbJ2EnLCAnMCcsICdiJywgJ2MnXSk7XG4gKiAvLyA9PiAzXG4gKlxuICogXy5nZXQob2JqZWN0LCAnYS5iLmMnLCAnZGVmYXVsdCcpO1xuICogLy8gPT4gJ2RlZmF1bHQnXG4gKi9cbmZ1bmN0aW9uIGdldChvYmplY3QsIHBhdGgsIGRlZmF1bHRWYWx1ZSkge1xuICB2YXIgcmVzdWx0ID0gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG4gIHJldHVybiByZXN1bHQgPT09IHVuZGVmaW5lZCA/IGRlZmF1bHRWYWx1ZSA6IHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXQ7XG4iLCJ2YXIgYmFzZUhhc0luID0gcmVxdWlyZSgnLi9fYmFzZUhhc0luJyksXG4gICAgaGFzUGF0aCA9IHJlcXVpcmUoJy4vX2hhc1BhdGgnKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHBhdGhgIGlzIGEgZGlyZWN0IG9yIGluaGVyaXRlZCBwcm9wZXJ0eSBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgcGF0aGAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSBfLmNyZWF0ZSh7ICdhJzogXy5jcmVhdGUoeyAnYic6IDIgfSkgfSk7XG4gKlxuICogXy5oYXNJbihvYmplY3QsICdhJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5oYXNJbihvYmplY3QsICdhLmInKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmhhc0luKG9iamVjdCwgWydhJywgJ2InXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5oYXNJbihvYmplY3QsICdiJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBoYXNJbihvYmplY3QsIHBhdGgpIHtcbiAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGhhc1BhdGgob2JqZWN0LCBwYXRoLCBiYXNlSGFzSW4pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc0luO1xuIiwiLyoqXG4gKiBUaGlzIG1ldGhvZCByZXR1cm5zIHRoZSBmaXJzdCBhcmd1bWVudCBpdCByZWNlaXZlcy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHBhcmFtIHsqfSB2YWx1ZSBBbnkgdmFsdWUuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyBgdmFsdWVgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAqXG4gKiBjb25zb2xlLmxvZyhfLmlkZW50aXR5KG9iamVjdCkgPT09IG9iamVjdCk7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGlkZW50aXR5KHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpZGVudGl0eTtcbiIsInZhciBiYXNlSXNBcmd1bWVudHMgPSByZXF1aXJlKCcuL19iYXNlSXNBcmd1bWVudHMnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IG9iamVjdFByb3RvLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhbiBgYXJndW1lbnRzYCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LFxuICogIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJndW1lbnRzKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNBcmd1bWVudHMgPSBiYXNlSXNBcmd1bWVudHMoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPyBiYXNlSXNBcmd1bWVudHMgOiBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCAnY2FsbGVlJykgJiZcbiAgICAhcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBpc0FyZ3VtZW50cztcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhbiBgQXJyYXlgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXkoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXkoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheSgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzQXJyYXk7XG4iLCJ2YXIgaXNGdW5jdGlvbiA9IHJlcXVpcmUoJy4vaXNGdW5jdGlvbicpLFxuICAgIGlzTGVuZ3RoID0gcmVxdWlyZSgnLi9pc0xlbmd0aCcpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UuIEEgdmFsdWUgaXMgY29uc2lkZXJlZCBhcnJheS1saWtlIGlmIGl0J3NcbiAqIG5vdCBhIGZ1bmN0aW9uIGFuZCBoYXMgYSBgdmFsdWUubGVuZ3RoYCB0aGF0J3MgYW4gaW50ZWdlciBncmVhdGVyIHRoYW4gb3JcbiAqIGVxdWFsIHRvIGAwYCBhbmQgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIGBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUmAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKCdhYmMnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICFpc0Z1bmN0aW9uKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0FycmF5TGlrZTtcbiIsInZhciByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpLFxuICAgIHN0dWJGYWxzZSA9IHJlcXVpcmUoJy4vc3R1YkZhbHNlJyk7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZXhwb3J0c2AuICovXG52YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYC4gKi9cbnZhciBmcmVlTW9kdWxlID0gZnJlZUV4cG9ydHMgJiYgdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiYgIW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGU7XG5cbi8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG52YXIgbW9kdWxlRXhwb3J0cyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5leHBvcnRzID09PSBmcmVlRXhwb3J0cztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgQnVmZmVyID0gbW9kdWxlRXhwb3J0cyA/IHJvb3QuQnVmZmVyIDogdW5kZWZpbmVkO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlSXNCdWZmZXIgPSBCdWZmZXIgPyBCdWZmZXIuaXNCdWZmZXIgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBidWZmZXIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjMuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBidWZmZXIsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0J1ZmZlcihuZXcgQnVmZmVyKDIpKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQnVmZmVyKG5ldyBVaW50OEFycmF5KDIpKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0J1ZmZlciA9IG5hdGl2ZUlzQnVmZmVyIHx8IHN0dWJGYWxzZTtcblxubW9kdWxlLmV4cG9ydHMgPSBpc0J1ZmZlcjtcbiIsInZhciBiYXNlR2V0VGFnID0gcmVxdWlyZSgnLi9fYmFzZUdldFRhZycpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXN5bmNUYWcgPSAnW29iamVjdCBBc3luY0Z1bmN0aW9uXScsXG4gICAgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG4gICAgZ2VuVGFnID0gJ1tvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dJyxcbiAgICBwcm94eVRhZyA9ICdbb2JqZWN0IFByb3h5XSc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBGdW5jdGlvbmAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZnVuY3Rpb24sIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0Z1bmN0aW9uKF8pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNGdW5jdGlvbigvYWJjLyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIFRoZSB1c2Ugb2YgYE9iamVjdCN0b1N0cmluZ2AgYXZvaWRzIGlzc3VlcyB3aXRoIHRoZSBgdHlwZW9mYCBvcGVyYXRvclxuICAvLyBpbiBTYWZhcmkgOSB3aGljaCByZXR1cm5zICdvYmplY3QnIGZvciB0eXBlZCBhcnJheXMgYW5kIG90aGVyIGNvbnN0cnVjdG9ycy5cbiAgdmFyIHRhZyA9IGJhc2VHZXRUYWcodmFsdWUpO1xuICByZXR1cm4gdGFnID09IGZ1bmNUYWcgfHwgdGFnID09IGdlblRhZyB8fCB0YWcgPT0gYXN5bmNUYWcgfHwgdGFnID09IHByb3h5VGFnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRnVuY3Rpb247XG4iLCIvKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgbGVuZ3RoLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uXG4gKiBbYFRvTGVuZ3RoYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdG9sZW5ndGgpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgbGVuZ3RoLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNMZW5ndGgoMyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0xlbmd0aChOdW1iZXIuTUlOX1ZBTFVFKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0xlbmd0aChJbmZpbml0eSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNMZW5ndGgoJzMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTGVuZ3RoKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiZcbiAgICB2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDw9IE1BWF9TQUZFX0lOVEVHRVI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNMZW5ndGg7XG4iLCJ2YXIgYmFzZUlzTWFwID0gcmVxdWlyZSgnLi9fYmFzZUlzTWFwJyksXG4gICAgYmFzZVVuYXJ5ID0gcmVxdWlyZSgnLi9fYmFzZVVuYXJ5JyksXG4gICAgbm9kZVV0aWwgPSByZXF1aXJlKCcuL19ub2RlVXRpbCcpO1xuXG4vKiBOb2RlLmpzIGhlbHBlciByZWZlcmVuY2VzLiAqL1xudmFyIG5vZGVJc01hcCA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzTWFwO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgTWFwYCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjMuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBtYXAsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc01hcChuZXcgTWFwKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzTWFwKG5ldyBXZWFrTWFwKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc01hcCA9IG5vZGVJc01hcCA/IGJhc2VVbmFyeShub2RlSXNNYXApIDogYmFzZUlzTWFwO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzTWFwO1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyB0aGVcbiAqIFtsYW5ndWFnZSB0eXBlXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtZWNtYXNjcmlwdC1sYW5ndWFnZS10eXBlcylcbiAqIG9mIGBPYmplY3RgLiAoZS5nLiBhcnJheXMsIGZ1bmN0aW9ucywgb2JqZWN0cywgcmVnZXhlcywgYG5ldyBOdW1iZXIoMClgLCBhbmQgYG5ldyBTdHJpbmcoJycpYClcbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdCh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoXy5ub29wKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmICh0eXBlID09ICdvYmplY3QnIHx8IHR5cGUgPT0gJ2Z1bmN0aW9uJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNPYmplY3Q7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90IGBudWxsYFxuICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc09iamVjdExpa2U7XG4iLCJ2YXIgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICBnZXRQcm90b3R5cGUgPSByZXF1aXJlKCcuL19nZXRQcm90b3R5cGUnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XSc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGUsXG4gICAgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKiogVXNlZCB0byBpbmZlciB0aGUgYE9iamVjdGAgY29uc3RydWN0b3IuICovXG52YXIgb2JqZWN0Q3RvclN0cmluZyA9IGZ1bmNUb1N0cmluZy5jYWxsKE9iamVjdCk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBwbGFpbiBvYmplY3QsIHRoYXQgaXMsIGFuIG9iamVjdCBjcmVhdGVkIGJ5IHRoZVxuICogYE9iamVjdGAgY29uc3RydWN0b3Igb3Igb25lIHdpdGggYSBgW1tQcm90b3R5cGVdXWAgb2YgYG51bGxgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC44LjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5hID0gMTtcbiAqIH1cbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QobmV3IEZvbyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QoeyAneCc6IDAsICd5JzogMCB9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QoT2JqZWN0LmNyZWF0ZShudWxsKSk7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdExpa2UodmFsdWUpIHx8IGJhc2VHZXRUYWcodmFsdWUpICE9IG9iamVjdFRhZykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgcHJvdG8gPSBnZXRQcm90b3R5cGUodmFsdWUpO1xuICBpZiAocHJvdG8gPT09IG51bGwpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICB2YXIgQ3RvciA9IGhhc093blByb3BlcnR5LmNhbGwocHJvdG8sICdjb25zdHJ1Y3RvcicpICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuICByZXR1cm4gdHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBDdG9yIGluc3RhbmNlb2YgQ3RvciAmJlxuICAgIGZ1bmNUb1N0cmluZy5jYWxsKEN0b3IpID09IG9iamVjdEN0b3JTdHJpbmc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNQbGFpbk9iamVjdDtcbiIsInZhciBiYXNlSXNTZXQgPSByZXF1aXJlKCcuL19iYXNlSXNTZXQnKSxcbiAgICBiYXNlVW5hcnkgPSByZXF1aXJlKCcuL19iYXNlVW5hcnknKSxcbiAgICBub2RlVXRpbCA9IHJlcXVpcmUoJy4vX25vZGVVdGlsJyk7XG5cbi8qIE5vZGUuanMgaGVscGVyIHJlZmVyZW5jZXMuICovXG52YXIgbm9kZUlzU2V0ID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNTZXQ7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTZXRgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMy4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHNldCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzU2V0KG5ldyBTZXQpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNTZXQobmV3IFdlYWtTZXQpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzU2V0ID0gbm9kZUlzU2V0ID8gYmFzZVVuYXJ5KG5vZGVJc1NldCkgOiBiYXNlSXNTZXQ7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNTZXQ7XG4iLCJ2YXIgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIHN0cmluZ1RhZyA9ICdbb2JqZWN0IFN0cmluZ10nO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU3RyaW5nYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc3RyaW5nLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNTdHJpbmcoJ2FiYycpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNTdHJpbmcoMSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8XG4gICAgKCFpc0FycmF5KHZhbHVlKSAmJiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IHN0cmluZ1RhZyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNTdHJpbmc7XG4iLCJ2YXIgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXSc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTeW1ib2xgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzeW1ib2wsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1N5bWJvbChTeW1ib2wuaXRlcmF0b3IpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNTeW1ib2woJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTeW1ib2wodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnc3ltYm9sJyB8fFxuICAgIChpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IHN5bWJvbFRhZyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNTeW1ib2w7XG4iLCJ2YXIgYmFzZUlzVHlwZWRBcnJheSA9IHJlcXVpcmUoJy4vX2Jhc2VJc1R5cGVkQXJyYXknKSxcbiAgICBiYXNlVW5hcnkgPSByZXF1aXJlKCcuL19iYXNlVW5hcnknKSxcbiAgICBub2RlVXRpbCA9IHJlcXVpcmUoJy4vX25vZGVVdGlsJyk7XG5cbi8qIE5vZGUuanMgaGVscGVyIHJlZmVyZW5jZXMuICovXG52YXIgbm9kZUlzVHlwZWRBcnJheSA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzVHlwZWRBcnJheTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgdHlwZWQgYXJyYXkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB0eXBlZCBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzVHlwZWRBcnJheShuZXcgVWludDhBcnJheSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1R5cGVkQXJyYXkoW10pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzVHlwZWRBcnJheSA9IG5vZGVJc1R5cGVkQXJyYXkgPyBiYXNlVW5hcnkobm9kZUlzVHlwZWRBcnJheSkgOiBiYXNlSXNUeXBlZEFycmF5O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzVHlwZWRBcnJheTtcbiIsInZhciBhcnJheUxpa2VLZXlzID0gcmVxdWlyZSgnLi9fYXJyYXlMaWtlS2V5cycpLFxuICAgIGJhc2VLZXlzID0gcmVxdWlyZSgnLi9fYmFzZUtleXMnKSxcbiAgICBpc0FycmF5TGlrZSA9IHJlcXVpcmUoJy4vaXNBcnJheUxpa2UnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiBgb2JqZWN0YC5cbiAqXG4gKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy4gU2VlIHRoZVxuICogW0VTIHNwZWNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5rZXlzKVxuICogZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYSA9IDE7XG4gKiAgIHRoaXMuYiA9IDI7XG4gKiB9XG4gKlxuICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAqXG4gKiBfLmtleXMobmV3IEZvbyk7XG4gKiAvLyA9PiBbJ2EnLCAnYiddIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gKlxuICogXy5rZXlzKCdoaScpO1xuICogLy8gPT4gWycwJywgJzEnXVxuICovXG5mdW5jdGlvbiBrZXlzKG9iamVjdCkge1xuICByZXR1cm4gaXNBcnJheUxpa2Uob2JqZWN0KSA/IGFycmF5TGlrZUtleXMob2JqZWN0KSA6IGJhc2VLZXlzKG9iamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ga2V5cztcbiIsInZhciBhcnJheUxpa2VLZXlzID0gcmVxdWlyZSgnLi9fYXJyYXlMaWtlS2V5cycpLFxuICAgIGJhc2VLZXlzSW4gPSByZXF1aXJlKCcuL19iYXNlS2V5c0luJyksXG4gICAgaXNBcnJheUxpa2UgPSByZXF1aXJlKCcuL2lzQXJyYXlMaWtlJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiBgb2JqZWN0YC5cbiAqXG4gKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuMC4wXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYSA9IDE7XG4gKiAgIHRoaXMuYiA9IDI7XG4gKiB9XG4gKlxuICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAqXG4gKiBfLmtleXNJbihuZXcgRm9vKTtcbiAqIC8vID0+IFsnYScsICdiJywgJ2MnXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICovXG5mdW5jdGlvbiBrZXlzSW4ob2JqZWN0KSB7XG4gIHJldHVybiBpc0FycmF5TGlrZShvYmplY3QpID8gYXJyYXlMaWtlS2V5cyhvYmplY3QsIHRydWUpIDogYmFzZUtleXNJbihvYmplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGtleXNJbjtcbiIsInZhciBhcnJheU1hcCA9IHJlcXVpcmUoJy4vX2FycmF5TWFwJyksXG4gICAgYmFzZUl0ZXJhdGVlID0gcmVxdWlyZSgnLi9fYmFzZUl0ZXJhdGVlJyksXG4gICAgYmFzZU1hcCA9IHJlcXVpcmUoJy4vX2Jhc2VNYXAnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB2YWx1ZXMgYnkgcnVubmluZyBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gIHRocnVcbiAqIGBpdGVyYXRlZWAuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOlxuICogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICpcbiAqIE1hbnkgbG9kYXNoIG1ldGhvZHMgYXJlIGd1YXJkZWQgdG8gd29yayBhcyBpdGVyYXRlZXMgZm9yIG1ldGhvZHMgbGlrZVxuICogYF8uZXZlcnlgLCBgXy5maWx0ZXJgLCBgXy5tYXBgLCBgXy5tYXBWYWx1ZXNgLCBgXy5yZWplY3RgLCBhbmQgYF8uc29tZWAuXG4gKlxuICogVGhlIGd1YXJkZWQgbWV0aG9kcyBhcmU6XG4gKiBgYXJ5YCwgYGNodW5rYCwgYGN1cnJ5YCwgYGN1cnJ5UmlnaHRgLCBgZHJvcGAsIGBkcm9wUmlnaHRgLCBgZXZlcnlgLFxuICogYGZpbGxgLCBgaW52ZXJ0YCwgYHBhcnNlSW50YCwgYHJhbmRvbWAsIGByYW5nZWAsIGByYW5nZVJpZ2h0YCwgYHJlcGVhdGAsXG4gKiBgc2FtcGxlU2l6ZWAsIGBzbGljZWAsIGBzb21lYCwgYHNvcnRCeWAsIGBzcGxpdGAsIGB0YWtlYCwgYHRha2VSaWdodGAsXG4gKiBgdGVtcGxhdGVgLCBgdHJpbWAsIGB0cmltRW5kYCwgYHRyaW1TdGFydGAsIGFuZCBgd29yZHNgXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICogICByZXR1cm4gbiAqIG47XG4gKiB9XG4gKlxuICogXy5tYXAoWzQsIDhdLCBzcXVhcmUpO1xuICogLy8gPT4gWzE2LCA2NF1cbiAqXG4gKiBfLm1hcCh7ICdhJzogNCwgJ2InOiA4IH0sIHNxdWFyZSk7XG4gKiAvLyA9PiBbMTYsIDY0XSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICpcbiAqIHZhciB1c2VycyA9IFtcbiAqICAgeyAndXNlcic6ICdiYXJuZXknIH0sXG4gKiAgIHsgJ3VzZXInOiAnZnJlZCcgfVxuICogXTtcbiAqXG4gKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAqIF8ubWFwKHVzZXJzLCAndXNlcicpO1xuICogLy8gPT4gWydiYXJuZXknLCAnZnJlZCddXG4gKi9cbmZ1bmN0aW9uIG1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheU1hcCA6IGJhc2VNYXA7XG4gIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGJhc2VJdGVyYXRlZShpdGVyYXRlZSwgMykpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcDtcbiIsInZhciBNYXBDYWNoZSA9IHJlcXVpcmUoJy4vX01hcENhY2hlJyk7XG5cbi8qKiBFcnJvciBtZXNzYWdlIGNvbnN0YW50cy4gKi9cbnZhciBGVU5DX0VSUk9SX1RFWFQgPSAnRXhwZWN0ZWQgYSBmdW5jdGlvbic7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgbWVtb2l6ZXMgdGhlIHJlc3VsdCBvZiBgZnVuY2AuIElmIGByZXNvbHZlcmAgaXNcbiAqIHByb3ZpZGVkLCBpdCBkZXRlcm1pbmVzIHRoZSBjYWNoZSBrZXkgZm9yIHN0b3JpbmcgdGhlIHJlc3VsdCBiYXNlZCBvbiB0aGVcbiAqIGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uIEJ5IGRlZmF1bHQsIHRoZSBmaXJzdCBhcmd1bWVudFxuICogcHJvdmlkZWQgdG8gdGhlIG1lbW9pemVkIGZ1bmN0aW9uIGlzIHVzZWQgYXMgdGhlIG1hcCBjYWNoZSBrZXkuIFRoZSBgZnVuY2BcbiAqIGlzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlIG1lbW9pemVkIGZ1bmN0aW9uLlxuICpcbiAqICoqTm90ZToqKiBUaGUgY2FjaGUgaXMgZXhwb3NlZCBhcyB0aGUgYGNhY2hlYCBwcm9wZXJ0eSBvbiB0aGUgbWVtb2l6ZWRcbiAqIGZ1bmN0aW9uLiBJdHMgY3JlYXRpb24gbWF5IGJlIGN1c3RvbWl6ZWQgYnkgcmVwbGFjaW5nIHRoZSBgXy5tZW1vaXplLkNhY2hlYFxuICogY29uc3RydWN0b3Igd2l0aCBvbmUgd2hvc2UgaW5zdGFuY2VzIGltcGxlbWVudCB0aGVcbiAqIFtgTWFwYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcHJvcGVydGllcy1vZi10aGUtbWFwLXByb3RvdHlwZS1vYmplY3QpXG4gKiBtZXRob2QgaW50ZXJmYWNlIG9mIGBjbGVhcmAsIGBkZWxldGVgLCBgZ2V0YCwgYGhhc2AsIGFuZCBgc2V0YC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGhhdmUgaXRzIG91dHB1dCBtZW1vaXplZC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtyZXNvbHZlcl0gVGhlIGZ1bmN0aW9uIHRvIHJlc29sdmUgdGhlIGNhY2hlIGtleS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG1lbW9pemVkIGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiB9O1xuICogdmFyIG90aGVyID0geyAnYyc6IDMsICdkJzogNCB9O1xuICpcbiAqIHZhciB2YWx1ZXMgPSBfLm1lbW9pemUoXy52YWx1ZXMpO1xuICogdmFsdWVzKG9iamVjdCk7XG4gKiAvLyA9PiBbMSwgMl1cbiAqXG4gKiB2YWx1ZXMob3RoZXIpO1xuICogLy8gPT4gWzMsIDRdXG4gKlxuICogb2JqZWN0LmEgPSAyO1xuICogdmFsdWVzKG9iamVjdCk7XG4gKiAvLyA9PiBbMSwgMl1cbiAqXG4gKiAvLyBNb2RpZnkgdGhlIHJlc3VsdCBjYWNoZS5cbiAqIHZhbHVlcy5jYWNoZS5zZXQob2JqZWN0LCBbJ2EnLCAnYiddKTtcbiAqIHZhbHVlcyhvYmplY3QpO1xuICogLy8gPT4gWydhJywgJ2InXVxuICpcbiAqIC8vIFJlcGxhY2UgYF8ubWVtb2l6ZS5DYWNoZWAuXG4gKiBfLm1lbW9pemUuQ2FjaGUgPSBXZWFrTWFwO1xuICovXG5mdW5jdGlvbiBtZW1vaXplKGZ1bmMsIHJlc29sdmVyKSB7XG4gIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nIHx8IChyZXNvbHZlciAhPSBudWxsICYmIHR5cGVvZiByZXNvbHZlciAhPSAnZnVuY3Rpb24nKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgfVxuICB2YXIgbWVtb2l6ZWQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAga2V5ID0gcmVzb2x2ZXIgPyByZXNvbHZlci5hcHBseSh0aGlzLCBhcmdzKSA6IGFyZ3NbMF0sXG4gICAgICAgIGNhY2hlID0gbWVtb2l6ZWQuY2FjaGU7XG5cbiAgICBpZiAoY2FjaGUuaGFzKGtleSkpIHtcbiAgICAgIHJldHVybiBjYWNoZS5nZXQoa2V5KTtcbiAgICB9XG4gICAgdmFyIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgbWVtb2l6ZWQuY2FjaGUgPSBjYWNoZS5zZXQoa2V5LCByZXN1bHQpIHx8IGNhY2hlO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIG1lbW9pemVkLmNhY2hlID0gbmV3IChtZW1vaXplLkNhY2hlIHx8IE1hcENhY2hlKTtcbiAgcmV0dXJuIG1lbW9pemVkO1xufVxuXG4vLyBFeHBvc2UgYE1hcENhY2hlYC5cbm1lbW9pemUuQ2FjaGUgPSBNYXBDYWNoZTtcblxubW9kdWxlLmV4cG9ydHMgPSBtZW1vaXplO1xuIiwidmFyIGJhc2VQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2Jhc2VQcm9wZXJ0eScpLFxuICAgIGJhc2VQcm9wZXJ0eURlZXAgPSByZXF1aXJlKCcuL19iYXNlUHJvcGVydHlEZWVwJyksXG4gICAgaXNLZXkgPSByZXF1aXJlKCcuL19pc0tleScpLFxuICAgIHRvS2V5ID0gcmVxdWlyZSgnLi9fdG9LZXknKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSB2YWx1ZSBhdCBgcGF0aGAgb2YgYSBnaXZlbiBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAyLjQuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdHMgPSBbXG4gKiAgIHsgJ2EnOiB7ICdiJzogMiB9IH0sXG4gKiAgIHsgJ2EnOiB7ICdiJzogMSB9IH1cbiAqIF07XG4gKlxuICogXy5tYXAob2JqZWN0cywgXy5wcm9wZXJ0eSgnYS5iJykpO1xuICogLy8gPT4gWzIsIDFdXG4gKlxuICogXy5tYXAoXy5zb3J0Qnkob2JqZWN0cywgXy5wcm9wZXJ0eShbJ2EnLCAnYiddKSksICdhLmInKTtcbiAqIC8vID0+IFsxLCAyXVxuICovXG5mdW5jdGlvbiBwcm9wZXJ0eShwYXRoKSB7XG4gIHJldHVybiBpc0tleShwYXRoKSA/IGJhc2VQcm9wZXJ0eSh0b0tleShwYXRoKSkgOiBiYXNlUHJvcGVydHlEZWVwKHBhdGgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHByb3BlcnR5O1xuIiwiLyoqXG4gKiBUaGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGVtcHR5IGFycmF5LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4xMy4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZW1wdHkgYXJyYXkuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBhcnJheXMgPSBfLnRpbWVzKDIsIF8uc3R1YkFycmF5KTtcbiAqXG4gKiBjb25zb2xlLmxvZyhhcnJheXMpO1xuICogLy8gPT4gW1tdLCBbXV1cbiAqXG4gKiBjb25zb2xlLmxvZyhhcnJheXNbMF0gPT09IGFycmF5c1sxXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBzdHViQXJyYXkoKSB7XG4gIHJldHVybiBbXTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHViQXJyYXk7XG4iLCIvKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgYGZhbHNlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMTMuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udGltZXMoMiwgXy5zdHViRmFsc2UpO1xuICogLy8gPT4gW2ZhbHNlLCBmYWxzZV1cbiAqL1xuZnVuY3Rpb24gc3R1YkZhbHNlKCkge1xuICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3R1YkZhbHNlO1xuIiwidmFyIGJhc2VUb1N0cmluZyA9IHJlcXVpcmUoJy4vX2Jhc2VUb1N0cmluZycpO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcuIEFuIGVtcHR5IHN0cmluZyBpcyByZXR1cm5lZCBmb3IgYG51bGxgXG4gKiBhbmQgYHVuZGVmaW5lZGAgdmFsdWVzLiBUaGUgc2lnbiBvZiBgLTBgIGlzIHByZXNlcnZlZC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udG9TdHJpbmcobnVsbCk7XG4gKiAvLyA9PiAnJ1xuICpcbiAqIF8udG9TdHJpbmcoLTApO1xuICogLy8gPT4gJy0wJ1xuICpcbiAqIF8udG9TdHJpbmcoWzEsIDIsIDNdKTtcbiAqIC8vID0+ICcxLDIsMydcbiAqL1xuZnVuY3Rpb24gdG9TdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09IG51bGwgPyAnJyA6IGJhc2VUb1N0cmluZyh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdG9TdHJpbmc7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gcmVxdWlyZSgnLi9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQnKTtcblxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbigpIHt9XG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0KCkge31cbmVtcHR5RnVuY3Rpb25XaXRoUmVzZXQucmVzZXRXYXJuaW5nQ2FjaGUgPSBlbXB0eUZ1bmN0aW9uO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBzaGltKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgc2VjcmV0KSB7XG4gICAgaWYgKHNlY3JldCA9PT0gUmVhY3RQcm9wVHlwZXNTZWNyZXQpIHtcbiAgICAgIC8vIEl0IGlzIHN0aWxsIHNhZmUgd2hlbiBjYWxsZWQgZnJvbSBSZWFjdC5cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcihcbiAgICAgICdDYWxsaW5nIFByb3BUeXBlcyB2YWxpZGF0b3JzIGRpcmVjdGx5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGBwcm9wLXR5cGVzYCBwYWNrYWdlLiAnICtcbiAgICAgICdVc2UgUHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzKCkgdG8gY2FsbCB0aGVtLiAnICtcbiAgICAgICdSZWFkIG1vcmUgYXQgaHR0cDovL2ZiLm1lL3VzZS1jaGVjay1wcm9wLXR5cGVzJ1xuICAgICk7XG4gICAgZXJyLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgdGhyb3cgZXJyO1xuICB9O1xuICBzaGltLmlzUmVxdWlyZWQgPSBzaGltO1xuICBmdW5jdGlvbiBnZXRTaGltKCkge1xuICAgIHJldHVybiBzaGltO1xuICB9O1xuICAvLyBJbXBvcnRhbnQhXG4gIC8vIEtlZXAgdGhpcyBsaXN0IGluIHN5bmMgd2l0aCBwcm9kdWN0aW9uIHZlcnNpb24gaW4gYC4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMuanNgLlxuICB2YXIgUmVhY3RQcm9wVHlwZXMgPSB7XG4gICAgYXJyYXk6IHNoaW0sXG4gICAgYmlnaW50OiBzaGltLFxuICAgIGJvb2w6IHNoaW0sXG4gICAgZnVuYzogc2hpbSxcbiAgICBudW1iZXI6IHNoaW0sXG4gICAgb2JqZWN0OiBzaGltLFxuICAgIHN0cmluZzogc2hpbSxcbiAgICBzeW1ib2w6IHNoaW0sXG5cbiAgICBhbnk6IHNoaW0sXG4gICAgYXJyYXlPZjogZ2V0U2hpbSxcbiAgICBlbGVtZW50OiBzaGltLFxuICAgIGVsZW1lbnRUeXBlOiBzaGltLFxuICAgIGluc3RhbmNlT2Y6IGdldFNoaW0sXG4gICAgbm9kZTogc2hpbSxcbiAgICBvYmplY3RPZjogZ2V0U2hpbSxcbiAgICBvbmVPZjogZ2V0U2hpbSxcbiAgICBvbmVPZlR5cGU6IGdldFNoaW0sXG4gICAgc2hhcGU6IGdldFNoaW0sXG4gICAgZXhhY3Q6IGdldFNoaW0sXG5cbiAgICBjaGVja1Byb3BUeXBlczogZW1wdHlGdW5jdGlvbldpdGhSZXNldCxcbiAgICByZXNldFdhcm5pbmdDYWNoZTogZW1wdHlGdW5jdGlvblxuICB9O1xuXG4gIFJlYWN0UHJvcFR5cGVzLlByb3BUeXBlcyA9IFJlYWN0UHJvcFR5cGVzO1xuXG4gIHJldHVybiBSZWFjdFByb3BUeXBlcztcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBSZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcblxuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBkZXZlbG9wbWVudCBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICB2YXIgdGhyb3dPbkRpcmVjdEFjY2VzcyA9IHRydWU7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFR5cGVDaGVja2VycycpKFJlYWN0SXMuaXNFbGVtZW50LCB0aHJvd09uRGlyZWN0QWNjZXNzKTtcbn0gZWxzZSB7XG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IHByb2R1Y3Rpb24gYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcycpKCk7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gJ1NFQ1JFVF9ET19OT1RfUEFTU19USElTX09SX1lPVV9XSUxMX0JFX0ZJUkVEJztcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFByb3BUeXBlc1NlY3JldDtcbiIsImV4cG9ydCB2YXIgY2FsY3VsYXRlQ2hhbmdlID0gZnVuY3Rpb24gY2FsY3VsYXRlQ2hhbmdlKGUsIGhzbCwgZGlyZWN0aW9uLCBpbml0aWFsQSwgY29udGFpbmVyKSB7XG4gIHZhciBjb250YWluZXJXaWR0aCA9IGNvbnRhaW5lci5jbGllbnRXaWR0aDtcbiAgdmFyIGNvbnRhaW5lckhlaWdodCA9IGNvbnRhaW5lci5jbGllbnRIZWlnaHQ7XG4gIHZhciB4ID0gdHlwZW9mIGUucGFnZVggPT09ICdudW1iZXInID8gZS5wYWdlWCA6IGUudG91Y2hlc1swXS5wYWdlWDtcbiAgdmFyIHkgPSB0eXBlb2YgZS5wYWdlWSA9PT0gJ251bWJlcicgPyBlLnBhZ2VZIDogZS50b3VjaGVzWzBdLnBhZ2VZO1xuICB2YXIgbGVmdCA9IHggLSAoY29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgKyB3aW5kb3cucGFnZVhPZmZzZXQpO1xuICB2YXIgdG9wID0geSAtIChjb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wICsgd2luZG93LnBhZ2VZT2Zmc2V0KTtcblxuICBpZiAoZGlyZWN0aW9uID09PSAndmVydGljYWwnKSB7XG4gICAgdmFyIGEgPSB2b2lkIDA7XG4gICAgaWYgKHRvcCA8IDApIHtcbiAgICAgIGEgPSAwO1xuICAgIH0gZWxzZSBpZiAodG9wID4gY29udGFpbmVySGVpZ2h0KSB7XG4gICAgICBhID0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgYSA9IE1hdGgucm91bmQodG9wICogMTAwIC8gY29udGFpbmVySGVpZ2h0KSAvIDEwMDtcbiAgICB9XG5cbiAgICBpZiAoaHNsLmEgIT09IGEpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGg6IGhzbC5oLFxuICAgICAgICBzOiBoc2wucyxcbiAgICAgICAgbDogaHNsLmwsXG4gICAgICAgIGE6IGEsXG4gICAgICAgIHNvdXJjZTogJ3JnYidcbiAgICAgIH07XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBfYSA9IHZvaWQgMDtcbiAgICBpZiAobGVmdCA8IDApIHtcbiAgICAgIF9hID0gMDtcbiAgICB9IGVsc2UgaWYgKGxlZnQgPiBjb250YWluZXJXaWR0aCkge1xuICAgICAgX2EgPSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICBfYSA9IE1hdGgucm91bmQobGVmdCAqIDEwMCAvIGNvbnRhaW5lcldpZHRoKSAvIDEwMDtcbiAgICB9XG5cbiAgICBpZiAoaW5pdGlhbEEgIT09IF9hKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBoOiBoc2wuaCxcbiAgICAgICAgczogaHNsLnMsXG4gICAgICAgIGw6IGhzbC5sLFxuICAgICAgICBhOiBfYSxcbiAgICAgICAgc291cmNlOiAncmdiJ1xuICAgICAgfTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59OyIsInZhciBjaGVja2JvYXJkQ2FjaGUgPSB7fTtcblxuZXhwb3J0IHZhciByZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoYzEsIGMyLCBzaXplLCBzZXJ2ZXJDYW52YXMpIHtcbiAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gJ3VuZGVmaW5lZCcgJiYgIXNlcnZlckNhbnZhcykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHZhciBjYW52YXMgPSBzZXJ2ZXJDYW52YXMgPyBuZXcgc2VydmVyQ2FudmFzKCkgOiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgY2FudmFzLndpZHRoID0gc2l6ZSAqIDI7XG4gIGNhbnZhcy5oZWlnaHQgPSBzaXplICogMjtcbiAgdmFyIGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICBpZiAoIWN0eCkge1xuICAgIHJldHVybiBudWxsO1xuICB9IC8vIElmIG5vIGNvbnRleHQgY2FuIGJlIGZvdW5kLCByZXR1cm4gZWFybHkuXG4gIGN0eC5maWxsU3R5bGUgPSBjMTtcbiAgY3R4LmZpbGxSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XG4gIGN0eC5maWxsU3R5bGUgPSBjMjtcbiAgY3R4LmZpbGxSZWN0KDAsIDAsIHNpemUsIHNpemUpO1xuICBjdHgudHJhbnNsYXRlKHNpemUsIHNpemUpO1xuICBjdHguZmlsbFJlY3QoMCwgMCwgc2l6ZSwgc2l6ZSk7XG4gIHJldHVybiBjYW52YXMudG9EYXRhVVJMKCk7XG59O1xuXG5leHBvcnQgdmFyIGdldCA9IGZ1bmN0aW9uIGdldChjMSwgYzIsIHNpemUsIHNlcnZlckNhbnZhcykge1xuICB2YXIga2V5ID0gYzEgKyAnLScgKyBjMiArICctJyArIHNpemUgKyAoc2VydmVyQ2FudmFzID8gJy1zZXJ2ZXInIDogJycpO1xuXG4gIGlmIChjaGVja2JvYXJkQ2FjaGVba2V5XSkge1xuICAgIHJldHVybiBjaGVja2JvYXJkQ2FjaGVba2V5XTtcbiAgfVxuXG4gIHZhciBjaGVja2JvYXJkID0gcmVuZGVyKGMxLCBjMiwgc2l6ZSwgc2VydmVyQ2FudmFzKTtcbiAgY2hlY2tib2FyZENhY2hlW2tleV0gPSBjaGVja2JvYXJkO1xuICByZXR1cm4gY2hlY2tib2FyZDtcbn07IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuaW1wb3J0IFJlYWN0LCB7IGlzVmFsaWRFbGVtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHJlYWN0Q1NTIGZyb20gJ3JlYWN0Y3NzJztcbmltcG9ydCAqIGFzIGNoZWNrYm9hcmQgZnJvbSAnLi4vLi4vaGVscGVycy9jaGVja2JvYXJkJztcblxuZXhwb3J0IHZhciBDaGVja2JvYXJkID0gZnVuY3Rpb24gQ2hlY2tib2FyZChfcmVmKSB7XG4gIHZhciB3aGl0ZSA9IF9yZWYud2hpdGUsXG4gICAgICBncmV5ID0gX3JlZi5ncmV5LFxuICAgICAgc2l6ZSA9IF9yZWYuc2l6ZSxcbiAgICAgIHJlbmRlcmVycyA9IF9yZWYucmVuZGVyZXJzLFxuICAgICAgYm9yZGVyUmFkaXVzID0gX3JlZi5ib3JkZXJSYWRpdXMsXG4gICAgICBib3hTaGFkb3cgPSBfcmVmLmJveFNoYWRvdyxcbiAgICAgIGNoaWxkcmVuID0gX3JlZi5jaGlsZHJlbjtcblxuICB2YXIgc3R5bGVzID0gcmVhY3RDU1Moe1xuICAgICdkZWZhdWx0Jzoge1xuICAgICAgZ3JpZDoge1xuICAgICAgICBib3JkZXJSYWRpdXM6IGJvcmRlclJhZGl1cyxcbiAgICAgICAgYm94U2hhZG93OiBib3hTaGFkb3csXG4gICAgICAgIGFic29sdXRlOiAnMHB4IDBweCAwcHggMHB4JyxcbiAgICAgICAgYmFja2dyb3VuZDogJ3VybCgnICsgY2hlY2tib2FyZC5nZXQod2hpdGUsIGdyZXksIHNpemUsIHJlbmRlcmVycy5jYW52YXMpICsgJykgY2VudGVyIGxlZnQnXG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGlzVmFsaWRFbGVtZW50KGNoaWxkcmVuKSA/IFJlYWN0LmNsb25lRWxlbWVudChjaGlsZHJlbiwgX2V4dGVuZHMoe30sIGNoaWxkcmVuLnByb3BzLCB7IHN0eWxlOiBfZXh0ZW5kcyh7fSwgY2hpbGRyZW4ucHJvcHMuc3R5bGUsIHN0eWxlcy5ncmlkKSB9KSkgOiBSZWFjdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IHN0eWxlOiBzdHlsZXMuZ3JpZCB9KTtcbn07XG5cbkNoZWNrYm9hcmQuZGVmYXVsdFByb3BzID0ge1xuICBzaXplOiA4LFxuICB3aGl0ZTogJ3RyYW5zcGFyZW50JyxcbiAgZ3JleTogJ3JnYmEoMCwwLDAsLjA4KScsXG4gIHJlbmRlcmVyczoge31cbn07XG5cbmV4cG9ydCBkZWZhdWx0IENoZWNrYm9hcmQ7IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50LCBQdXJlQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHJlYWN0Q1NTIGZyb20gJ3JlYWN0Y3NzJztcbmltcG9ydCAqIGFzIGFscGhhIGZyb20gJy4uLy4uL2hlbHBlcnMvYWxwaGEnO1xuXG5pbXBvcnQgQ2hlY2tib2FyZCBmcm9tICcuL0NoZWNrYm9hcmQnO1xuXG5leHBvcnQgdmFyIEFscGhhID0gZnVuY3Rpb24gKF9yZWYpIHtcbiAgX2luaGVyaXRzKEFscGhhLCBfcmVmKTtcblxuICBmdW5jdGlvbiBBbHBoYSgpIHtcbiAgICB2YXIgX3JlZjI7XG5cbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEFscGhhKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9yZWYyID0gQWxwaGEuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihBbHBoYSkpLmNhbGwuYXBwbHkoX3JlZjIsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5oYW5kbGVDaGFuZ2UgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgdmFyIGNoYW5nZSA9IGFscGhhLmNhbGN1bGF0ZUNoYW5nZShlLCBfdGhpcy5wcm9wcy5oc2wsIF90aGlzLnByb3BzLmRpcmVjdGlvbiwgX3RoaXMucHJvcHMuYSwgX3RoaXMuY29udGFpbmVyKTtcbiAgICAgIGNoYW5nZSAmJiB0eXBlb2YgX3RoaXMucHJvcHMub25DaGFuZ2UgPT09ICdmdW5jdGlvbicgJiYgX3RoaXMucHJvcHMub25DaGFuZ2UoY2hhbmdlLCBlKTtcbiAgICB9LCBfdGhpcy5oYW5kbGVNb3VzZURvd24gPSBmdW5jdGlvbiAoZSkge1xuICAgICAgX3RoaXMuaGFuZGxlQ2hhbmdlKGUpO1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIF90aGlzLmhhbmRsZUNoYW5nZSk7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIF90aGlzLmhhbmRsZU1vdXNlVXApO1xuICAgIH0sIF90aGlzLmhhbmRsZU1vdXNlVXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy51bmJpbmRFdmVudExpc3RlbmVycygpO1xuICAgIH0sIF90aGlzLnVuYmluZEV2ZW50TGlzdGVuZXJzID0gZnVuY3Rpb24gKCkge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIF90aGlzLmhhbmRsZUNoYW5nZSk7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIF90aGlzLmhhbmRsZU1vdXNlVXApO1xuICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEFscGhhLCBbe1xuICAgIGtleTogJ2NvbXBvbmVudFdpbGxVbm1vdW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICB0aGlzLnVuYmluZEV2ZW50TGlzdGVuZXJzKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciByZ2IgPSB0aGlzLnByb3BzLnJnYjtcbiAgICAgIHZhciBzdHlsZXMgPSByZWFjdENTUyh7XG4gICAgICAgICdkZWZhdWx0Jzoge1xuICAgICAgICAgIGFscGhhOiB7XG4gICAgICAgICAgICBhYnNvbHV0ZTogJzBweCAwcHggMHB4IDBweCcsXG4gICAgICAgICAgICBib3JkZXJSYWRpdXM6IHRoaXMucHJvcHMucmFkaXVzXG4gICAgICAgICAgfSxcbiAgICAgICAgICBjaGVja2JvYXJkOiB7XG4gICAgICAgICAgICBhYnNvbHV0ZTogJzBweCAwcHggMHB4IDBweCcsXG4gICAgICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICAgICAgICBib3JkZXJSYWRpdXM6IHRoaXMucHJvcHMucmFkaXVzXG4gICAgICAgICAgfSxcbiAgICAgICAgICBncmFkaWVudDoge1xuICAgICAgICAgICAgYWJzb2x1dGU6ICcwcHggMHB4IDBweCAwcHgnLFxuICAgICAgICAgICAgYmFja2dyb3VuZDogJ2xpbmVhci1ncmFkaWVudCh0byByaWdodCwgcmdiYSgnICsgcmdiLnIgKyAnLCcgKyByZ2IuZyArICcsJyArIHJnYi5iICsgJywgMCkgMCUsXFxuICAgICAgICAgICByZ2JhKCcgKyByZ2IuciArICcsJyArIHJnYi5nICsgJywnICsgcmdiLmIgKyAnLCAxKSAxMDAlKScsXG4gICAgICAgICAgICBib3hTaGFkb3c6IHRoaXMucHJvcHMuc2hhZG93LFxuICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiB0aGlzLnByb3BzLnJhZGl1c1xuICAgICAgICAgIH0sXG4gICAgICAgICAgY29udGFpbmVyOiB7XG4gICAgICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICAgICAgbWFyZ2luOiAnMCAzcHgnXG4gICAgICAgICAgfSxcbiAgICAgICAgICBwb2ludGVyOiB7XG4gICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICAgIGxlZnQ6IHJnYi5hICogMTAwICsgJyUnXG4gICAgICAgICAgfSxcbiAgICAgICAgICBzbGlkZXI6IHtcbiAgICAgICAgICAgIHdpZHRoOiAnNHB4JyxcbiAgICAgICAgICAgIGJvcmRlclJhZGl1czogJzFweCcsXG4gICAgICAgICAgICBoZWlnaHQ6ICc4cHgnLFxuICAgICAgICAgICAgYm94U2hhZG93OiAnMCAwIDJweCByZ2JhKDAsIDAsIDAsIC42KScsXG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiAnI2ZmZicsXG4gICAgICAgICAgICBtYXJnaW5Ub3A6ICcxcHgnLFxuICAgICAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWCgtMnB4KSdcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgICd2ZXJ0aWNhbCc6IHtcbiAgICAgICAgICBncmFkaWVudDoge1xuICAgICAgICAgICAgYmFja2dyb3VuZDogJ2xpbmVhci1ncmFkaWVudCh0byBib3R0b20sIHJnYmEoJyArIHJnYi5yICsgJywnICsgcmdiLmcgKyAnLCcgKyByZ2IuYiArICcsIDApIDAlLFxcbiAgICAgICAgICAgcmdiYSgnICsgcmdiLnIgKyAnLCcgKyByZ2IuZyArICcsJyArIHJnYi5iICsgJywgMSkgMTAwJSknXG4gICAgICAgICAgfSxcbiAgICAgICAgICBwb2ludGVyOiB7XG4gICAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgICAgdG9wOiByZ2IuYSAqIDEwMCArICclJ1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgJ292ZXJ3cml0ZSc6IF9leHRlbmRzKHt9LCB0aGlzLnByb3BzLnN0eWxlKVxuICAgICAgfSwge1xuICAgICAgICB2ZXJ0aWNhbDogdGhpcy5wcm9wcy5kaXJlY3Rpb24gPT09ICd2ZXJ0aWNhbCcsXG4gICAgICAgIG92ZXJ3cml0ZTogdHJ1ZVxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgeyBzdHlsZTogc3R5bGVzLmFscGhhIH0sXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmNoZWNrYm9hcmQgfSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KENoZWNrYm9hcmQsIHsgcmVuZGVyZXJzOiB0aGlzLnByb3BzLnJlbmRlcmVycyB9KVxuICAgICAgICApLFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IHN0eWxlOiBzdHlsZXMuZ3JhZGllbnQgfSksXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAge1xuICAgICAgICAgICAgc3R5bGU6IHN0eWxlcy5jb250YWluZXIsXG4gICAgICAgICAgICByZWY6IGZ1bmN0aW9uIHJlZihjb250YWluZXIpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMi5jb250YWluZXIgPSBjb250YWluZXI7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb25Nb3VzZURvd246IHRoaXMuaGFuZGxlTW91c2VEb3duLFxuICAgICAgICAgICAgb25Ub3VjaE1vdmU6IHRoaXMuaGFuZGxlQ2hhbmdlLFxuICAgICAgICAgICAgb25Ub3VjaFN0YXJ0OiB0aGlzLmhhbmRsZUNoYW5nZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLnBvaW50ZXIgfSxcbiAgICAgICAgICAgIHRoaXMucHJvcHMucG9pbnRlciA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQodGhpcy5wcm9wcy5wb2ludGVyLCB0aGlzLnByb3BzKSA6IFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgc3R5bGU6IHN0eWxlcy5zbGlkZXIgfSlcbiAgICAgICAgICApXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEFscGhhO1xufShQdXJlQ29tcG9uZW50IHx8IENvbXBvbmVudCk7XG5cbmV4cG9ydCBkZWZhdWx0IEFscGhhOyIsInZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCwgUHVyZUNvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCByZWFjdENTUyBmcm9tICdyZWFjdGNzcyc7XG5cbnZhciBERUZBVUxUX0FSUk9XX09GRlNFVCA9IDE7XG5cbnZhciBVUF9LRVlfQ09ERSA9IDM4O1xudmFyIERPV05fS0VZX0NPREUgPSA0MDtcbnZhciBWQUxJRF9LRVlfQ09ERVMgPSBbVVBfS0VZX0NPREUsIERPV05fS0VZX0NPREVdO1xudmFyIGlzVmFsaWRLZXlDb2RlID0gZnVuY3Rpb24gaXNWYWxpZEtleUNvZGUoa2V5Q29kZSkge1xuICByZXR1cm4gVkFMSURfS0VZX0NPREVTLmluZGV4T2Yoa2V5Q29kZSkgPiAtMTtcbn07XG52YXIgZ2V0TnVtYmVyVmFsdWUgPSBmdW5jdGlvbiBnZXROdW1iZXJWYWx1ZSh2YWx1ZSkge1xuICByZXR1cm4gTnVtYmVyKFN0cmluZyh2YWx1ZSkucmVwbGFjZSgvJS9nLCAnJykpO1xufTtcblxudmFyIGlkQ291bnRlciA9IDE7XG5cbmV4cG9ydCB2YXIgRWRpdGFibGVJbnB1dCA9IGZ1bmN0aW9uIChfcmVmKSB7XG4gIF9pbmhlcml0cyhFZGl0YWJsZUlucHV0LCBfcmVmKTtcblxuICBmdW5jdGlvbiBFZGl0YWJsZUlucHV0KHByb3BzKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEVkaXRhYmxlSW5wdXQpO1xuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKEVkaXRhYmxlSW5wdXQuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihFZGl0YWJsZUlucHV0KSkuY2FsbCh0aGlzKSk7XG5cbiAgICBfdGhpcy5oYW5kbGVCbHVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF90aGlzLnN0YXRlLmJsdXJWYWx1ZSkge1xuICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7IHZhbHVlOiBfdGhpcy5zdGF0ZS5ibHVyVmFsdWUsIGJsdXJWYWx1ZTogbnVsbCB9KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlQ2hhbmdlID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIF90aGlzLnNldFVwZGF0ZWRWYWx1ZShlLnRhcmdldC52YWx1ZSwgZSk7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUtleURvd24gPSBmdW5jdGlvbiAoZSkge1xuICAgICAgLy8gSW4gY2FzZSBgZS50YXJnZXQudmFsdWVgIGlzIGEgcGVyY2VudGFnZSByZW1vdmUgdGhlIGAlYCBjaGFyYWN0ZXJcbiAgICAgIC8vIGFuZCB1cGRhdGUgYWNjb3JkaW5nbHkgd2l0aCBhIHBlcmNlbnRhZ2VcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9jYXNlc2FuZGJlcmcvcmVhY3QtY29sb3IvaXNzdWVzLzM4M1xuICAgICAgdmFyIHZhbHVlID0gZ2V0TnVtYmVyVmFsdWUoZS50YXJnZXQudmFsdWUpO1xuICAgICAgaWYgKCFpc05hTih2YWx1ZSkgJiYgaXNWYWxpZEtleUNvZGUoZS5rZXlDb2RlKSkge1xuICAgICAgICB2YXIgb2Zmc2V0ID0gX3RoaXMuZ2V0QXJyb3dPZmZzZXQoKTtcbiAgICAgICAgdmFyIHVwZGF0ZWRWYWx1ZSA9IGUua2V5Q29kZSA9PT0gVVBfS0VZX0NPREUgPyB2YWx1ZSArIG9mZnNldCA6IHZhbHVlIC0gb2Zmc2V0O1xuXG4gICAgICAgIF90aGlzLnNldFVwZGF0ZWRWYWx1ZSh1cGRhdGVkVmFsdWUsIGUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVEcmFnID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5kcmFnTGFiZWwpIHtcbiAgICAgICAgdmFyIG5ld1ZhbHVlID0gTWF0aC5yb3VuZChfdGhpcy5wcm9wcy52YWx1ZSArIGUubW92ZW1lbnRYKTtcbiAgICAgICAgaWYgKG5ld1ZhbHVlID49IDAgJiYgbmV3VmFsdWUgPD0gX3RoaXMucHJvcHMuZHJhZ01heCkge1xuICAgICAgICAgIF90aGlzLnByb3BzLm9uQ2hhbmdlICYmIF90aGlzLnByb3BzLm9uQ2hhbmdlKF90aGlzLmdldFZhbHVlT2JqZWN0V2l0aExhYmVsKG5ld1ZhbHVlKSwgZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlTW91c2VEb3duID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5kcmFnTGFiZWwpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBfdGhpcy5oYW5kbGVEcmFnKGUpO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgX3RoaXMuaGFuZGxlRHJhZyk7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgX3RoaXMuaGFuZGxlTW91c2VVcCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZU1vdXNlVXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy51bmJpbmRFdmVudExpc3RlbmVycygpO1xuICAgIH07XG5cbiAgICBfdGhpcy51bmJpbmRFdmVudExpc3RlbmVycyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBfdGhpcy5oYW5kbGVEcmFnKTtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgX3RoaXMuaGFuZGxlTW91c2VVcCk7XG4gICAgfTtcblxuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgdmFsdWU6IFN0cmluZyhwcm9wcy52YWx1ZSkudG9VcHBlckNhc2UoKSxcbiAgICAgIGJsdXJWYWx1ZTogU3RyaW5nKHByb3BzLnZhbHVlKS50b1VwcGVyQ2FzZSgpXG4gICAgfTtcblxuICAgIF90aGlzLmlucHV0SWQgPSAncmMtZWRpdGFibGUtaW5wdXQtJyArIGlkQ291bnRlcisrO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhFZGl0YWJsZUlucHV0LCBbe1xuICAgIGtleTogJ2NvbXBvbmVudERpZFVwZGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMsIHByZXZTdGF0ZSkge1xuICAgICAgaWYgKHRoaXMucHJvcHMudmFsdWUgIT09IHRoaXMuc3RhdGUudmFsdWUgJiYgKHByZXZQcm9wcy52YWx1ZSAhPT0gdGhpcy5wcm9wcy52YWx1ZSB8fCBwcmV2U3RhdGUudmFsdWUgIT09IHRoaXMuc3RhdGUudmFsdWUpKSB7XG4gICAgICAgIGlmICh0aGlzLmlucHV0ID09PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50KSB7XG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGJsdXJWYWx1ZTogU3RyaW5nKHRoaXMucHJvcHMudmFsdWUpLnRvVXBwZXJDYXNlKCkgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHZhbHVlOiBTdHJpbmcodGhpcy5wcm9wcy52YWx1ZSkudG9VcHBlckNhc2UoKSwgYmx1clZhbHVlOiAhdGhpcy5zdGF0ZS5ibHVyVmFsdWUgJiYgU3RyaW5nKHRoaXMucHJvcHMudmFsdWUpLnRvVXBwZXJDYXNlKCkgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnRXaWxsVW5tb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgdGhpcy51bmJpbmRFdmVudExpc3RlbmVycygpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldFZhbHVlT2JqZWN0V2l0aExhYmVsJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VmFsdWVPYmplY3RXaXRoTGFiZWwodmFsdWUpIHtcbiAgICAgIHJldHVybiBfZGVmaW5lUHJvcGVydHkoe30sIHRoaXMucHJvcHMubGFiZWwsIHZhbHVlKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRBcnJvd09mZnNldCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEFycm93T2Zmc2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMuYXJyb3dPZmZzZXQgfHwgREVGQVVMVF9BUlJPV19PRkZTRVQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2V0VXBkYXRlZFZhbHVlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0VXBkYXRlZFZhbHVlKHZhbHVlLCBlKSB7XG4gICAgICB2YXIgb25DaGFuZ2VWYWx1ZSA9IHRoaXMucHJvcHMubGFiZWwgPyB0aGlzLmdldFZhbHVlT2JqZWN0V2l0aExhYmVsKHZhbHVlKSA6IHZhbHVlO1xuICAgICAgdGhpcy5wcm9wcy5vbkNoYW5nZSAmJiB0aGlzLnByb3BzLm9uQ2hhbmdlKG9uQ2hhbmdlVmFsdWUsIGUpO1xuXG4gICAgICB0aGlzLnNldFN0YXRlKHsgdmFsdWU6IHZhbHVlIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgc3R5bGVzID0gcmVhY3RDU1Moe1xuICAgICAgICAnZGVmYXVsdCc6IHtcbiAgICAgICAgICB3cmFwOiB7XG4gICAgICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgJ3VzZXItb3ZlcnJpZGUnOiB7XG4gICAgICAgICAgd3JhcDogdGhpcy5wcm9wcy5zdHlsZSAmJiB0aGlzLnByb3BzLnN0eWxlLndyYXAgPyB0aGlzLnByb3BzLnN0eWxlLndyYXAgOiB7fSxcbiAgICAgICAgICBpbnB1dDogdGhpcy5wcm9wcy5zdHlsZSAmJiB0aGlzLnByb3BzLnN0eWxlLmlucHV0ID8gdGhpcy5wcm9wcy5zdHlsZS5pbnB1dCA6IHt9LFxuICAgICAgICAgIGxhYmVsOiB0aGlzLnByb3BzLnN0eWxlICYmIHRoaXMucHJvcHMuc3R5bGUubGFiZWwgPyB0aGlzLnByb3BzLnN0eWxlLmxhYmVsIDoge31cbiAgICAgICAgfSxcbiAgICAgICAgJ2RyYWdMYWJlbC10cnVlJzoge1xuICAgICAgICAgIGxhYmVsOiB7XG4gICAgICAgICAgICBjdXJzb3I6ICdldy1yZXNpemUnXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgICd1c2VyLW92ZXJyaWRlJzogdHJ1ZVxuICAgICAgfSwgdGhpcy5wcm9wcyk7XG5cbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgeyBzdHlsZTogc3R5bGVzLndyYXAgfSxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudCgnaW5wdXQnLCB7XG4gICAgICAgICAgaWQ6IHRoaXMuaW5wdXRJZCxcbiAgICAgICAgICBzdHlsZTogc3R5bGVzLmlucHV0LFxuICAgICAgICAgIHJlZjogZnVuY3Rpb24gcmVmKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMyLmlucHV0ID0gaW5wdXQ7XG4gICAgICAgICAgfSxcbiAgICAgICAgICB2YWx1ZTogdGhpcy5zdGF0ZS52YWx1ZSxcbiAgICAgICAgICBvbktleURvd246IHRoaXMuaGFuZGxlS2V5RG93bixcbiAgICAgICAgICBvbkNoYW5nZTogdGhpcy5oYW5kbGVDaGFuZ2UsXG4gICAgICAgICAgb25CbHVyOiB0aGlzLmhhbmRsZUJsdXIsXG4gICAgICAgICAgcGxhY2Vob2xkZXI6IHRoaXMucHJvcHMucGxhY2Vob2xkZXIsXG4gICAgICAgICAgc3BlbGxDaGVjazogJ2ZhbHNlJ1xuICAgICAgICB9KSxcbiAgICAgICAgdGhpcy5wcm9wcy5sYWJlbCAmJiAhdGhpcy5wcm9wcy5oaWRlTGFiZWwgPyBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdsYWJlbCcsXG4gICAgICAgICAge1xuICAgICAgICAgICAgaHRtbEZvcjogdGhpcy5pbnB1dElkLFxuICAgICAgICAgICAgc3R5bGU6IHN0eWxlcy5sYWJlbCxcbiAgICAgICAgICAgIG9uTW91c2VEb3duOiB0aGlzLmhhbmRsZU1vdXNlRG93blxuICAgICAgICAgIH0sXG4gICAgICAgICAgdGhpcy5wcm9wcy5sYWJlbFxuICAgICAgICApIDogbnVsbFxuICAgICAgKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gRWRpdGFibGVJbnB1dDtcbn0oUHVyZUNvbXBvbmVudCB8fCBDb21wb25lbnQpO1xuXG5leHBvcnQgZGVmYXVsdCBFZGl0YWJsZUlucHV0OyIsImV4cG9ydCB2YXIgY2FsY3VsYXRlQ2hhbmdlID0gZnVuY3Rpb24gY2FsY3VsYXRlQ2hhbmdlKGUsIGRpcmVjdGlvbiwgaHNsLCBjb250YWluZXIpIHtcbiAgdmFyIGNvbnRhaW5lcldpZHRoID0gY29udGFpbmVyLmNsaWVudFdpZHRoO1xuICB2YXIgY29udGFpbmVySGVpZ2h0ID0gY29udGFpbmVyLmNsaWVudEhlaWdodDtcbiAgdmFyIHggPSB0eXBlb2YgZS5wYWdlWCA9PT0gJ251bWJlcicgPyBlLnBhZ2VYIDogZS50b3VjaGVzWzBdLnBhZ2VYO1xuICB2YXIgeSA9IHR5cGVvZiBlLnBhZ2VZID09PSAnbnVtYmVyJyA/IGUucGFnZVkgOiBlLnRvdWNoZXNbMF0ucGFnZVk7XG4gIHZhciBsZWZ0ID0geCAtIChjb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCArIHdpbmRvdy5wYWdlWE9mZnNldCk7XG4gIHZhciB0b3AgPSB5IC0gKGNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AgKyB3aW5kb3cucGFnZVlPZmZzZXQpO1xuXG4gIGlmIChkaXJlY3Rpb24gPT09ICd2ZXJ0aWNhbCcpIHtcbiAgICB2YXIgaCA9IHZvaWQgMDtcbiAgICBpZiAodG9wIDwgMCkge1xuICAgICAgaCA9IDM1OTtcbiAgICB9IGVsc2UgaWYgKHRvcCA+IGNvbnRhaW5lckhlaWdodCkge1xuICAgICAgaCA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBwZXJjZW50ID0gLSh0b3AgKiAxMDAgLyBjb250YWluZXJIZWlnaHQpICsgMTAwO1xuICAgICAgaCA9IDM2MCAqIHBlcmNlbnQgLyAxMDA7XG4gICAgfVxuXG4gICAgaWYgKGhzbC5oICE9PSBoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBoOiBoLFxuICAgICAgICBzOiBoc2wucyxcbiAgICAgICAgbDogaHNsLmwsXG4gICAgICAgIGE6IGhzbC5hLFxuICAgICAgICBzb3VyY2U6ICdoc2wnXG4gICAgICB9O1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgX2ggPSB2b2lkIDA7XG4gICAgaWYgKGxlZnQgPCAwKSB7XG4gICAgICBfaCA9IDA7XG4gICAgfSBlbHNlIGlmIChsZWZ0ID4gY29udGFpbmVyV2lkdGgpIHtcbiAgICAgIF9oID0gMzU5O1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgX3BlcmNlbnQgPSBsZWZ0ICogMTAwIC8gY29udGFpbmVyV2lkdGg7XG4gICAgICBfaCA9IDM2MCAqIF9wZXJjZW50IC8gMTAwO1xuICAgIH1cblxuICAgIGlmIChoc2wuaCAhPT0gX2gpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGg6IF9oLFxuICAgICAgICBzOiBoc2wucyxcbiAgICAgICAgbDogaHNsLmwsXG4gICAgICAgIGE6IGhzbC5hLFxuICAgICAgICBzb3VyY2U6ICdoc2wnXG4gICAgICB9O1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn07IiwidmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50LCBQdXJlQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHJlYWN0Q1NTIGZyb20gJ3JlYWN0Y3NzJztcbmltcG9ydCAqIGFzIGh1ZSBmcm9tICcuLi8uLi9oZWxwZXJzL2h1ZSc7XG5cbmV4cG9ydCB2YXIgSHVlID0gZnVuY3Rpb24gKF9yZWYpIHtcbiAgX2luaGVyaXRzKEh1ZSwgX3JlZik7XG5cbiAgZnVuY3Rpb24gSHVlKCkge1xuICAgIHZhciBfcmVmMjtcblxuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSHVlKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9yZWYyID0gSHVlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoSHVlKSkuY2FsbC5hcHBseShfcmVmMiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLmhhbmRsZUNoYW5nZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICB2YXIgY2hhbmdlID0gaHVlLmNhbGN1bGF0ZUNoYW5nZShlLCBfdGhpcy5wcm9wcy5kaXJlY3Rpb24sIF90aGlzLnByb3BzLmhzbCwgX3RoaXMuY29udGFpbmVyKTtcbiAgICAgIGNoYW5nZSAmJiB0eXBlb2YgX3RoaXMucHJvcHMub25DaGFuZ2UgPT09ICdmdW5jdGlvbicgJiYgX3RoaXMucHJvcHMub25DaGFuZ2UoY2hhbmdlLCBlKTtcbiAgICB9LCBfdGhpcy5oYW5kbGVNb3VzZURvd24gPSBmdW5jdGlvbiAoZSkge1xuICAgICAgX3RoaXMuaGFuZGxlQ2hhbmdlKGUpO1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIF90aGlzLmhhbmRsZUNoYW5nZSk7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIF90aGlzLmhhbmRsZU1vdXNlVXApO1xuICAgIH0sIF90aGlzLmhhbmRsZU1vdXNlVXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy51bmJpbmRFdmVudExpc3RlbmVycygpO1xuICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEh1ZSwgW3tcbiAgICBrZXk6ICdjb21wb25lbnRXaWxsVW5tb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgdGhpcy51bmJpbmRFdmVudExpc3RlbmVycygpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3VuYmluZEV2ZW50TGlzdGVuZXJzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdW5iaW5kRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5oYW5kbGVDaGFuZ2UpO1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCB0aGlzLmhhbmRsZU1vdXNlVXApO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgX3Byb3BzJGRpcmVjdGlvbiA9IHRoaXMucHJvcHMuZGlyZWN0aW9uLFxuICAgICAgICAgIGRpcmVjdGlvbiA9IF9wcm9wcyRkaXJlY3Rpb24gPT09IHVuZGVmaW5lZCA/ICdob3Jpem9udGFsJyA6IF9wcm9wcyRkaXJlY3Rpb247XG5cblxuICAgICAgdmFyIHN0eWxlcyA9IHJlYWN0Q1NTKHtcbiAgICAgICAgJ2RlZmF1bHQnOiB7XG4gICAgICAgICAgaHVlOiB7XG4gICAgICAgICAgICBhYnNvbHV0ZTogJzBweCAwcHggMHB4IDBweCcsXG4gICAgICAgICAgICBib3JkZXJSYWRpdXM6IHRoaXMucHJvcHMucmFkaXVzLFxuICAgICAgICAgICAgYm94U2hhZG93OiB0aGlzLnByb3BzLnNoYWRvd1xuICAgICAgICAgIH0sXG4gICAgICAgICAgY29udGFpbmVyOiB7XG4gICAgICAgICAgICBwYWRkaW5nOiAnMCAycHgnLFxuICAgICAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgICAgIGJvcmRlclJhZGl1czogdGhpcy5wcm9wcy5yYWRpdXNcbiAgICAgICAgICB9LFxuICAgICAgICAgIHBvaW50ZXI6IHtcbiAgICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICAgICAgbGVmdDogdGhpcy5wcm9wcy5oc2wuaCAqIDEwMCAvIDM2MCArICclJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgc2xpZGVyOiB7XG4gICAgICAgICAgICBtYXJnaW5Ub3A6ICcxcHgnLFxuICAgICAgICAgICAgd2lkdGg6ICc0cHgnLFxuICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiAnMXB4JyxcbiAgICAgICAgICAgIGhlaWdodDogJzhweCcsXG4gICAgICAgICAgICBib3hTaGFkb3c6ICcwIDAgMnB4IHJnYmEoMCwgMCwgMCwgLjYpJyxcbiAgICAgICAgICAgIGJhY2tncm91bmQ6ICcjZmZmJyxcbiAgICAgICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVgoLTJweCknXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAndmVydGljYWwnOiB7XG4gICAgICAgICAgcG9pbnRlcjoge1xuICAgICAgICAgICAgbGVmdDogJzBweCcsXG4gICAgICAgICAgICB0b3A6IC0odGhpcy5wcm9wcy5oc2wuaCAqIDEwMCAvIDM2MCkgKyAxMDAgKyAnJSdcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sIHsgdmVydGljYWw6IGRpcmVjdGlvbiA9PT0gJ3ZlcnRpY2FsJyB9KTtcblxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7IHN0eWxlOiBzdHlsZXMuaHVlIH0sXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiAnaHVlLScgKyBkaXJlY3Rpb24sXG4gICAgICAgICAgICBzdHlsZTogc3R5bGVzLmNvbnRhaW5lcixcbiAgICAgICAgICAgIHJlZjogZnVuY3Rpb24gcmVmKGNvbnRhaW5lcikge1xuICAgICAgICAgICAgICByZXR1cm4gX3RoaXMyLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvbk1vdXNlRG93bjogdGhpcy5oYW5kbGVNb3VzZURvd24sXG4gICAgICAgICAgICBvblRvdWNoTW92ZTogdGhpcy5oYW5kbGVDaGFuZ2UsXG4gICAgICAgICAgICBvblRvdWNoU3RhcnQ6IHRoaXMuaGFuZGxlQ2hhbmdlXG4gICAgICAgICAgfSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgJ3N0eWxlJyxcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAnXFxuICAgICAgICAgICAgLmh1ZS1ob3Jpem9udGFsIHtcXG4gICAgICAgICAgICAgIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCh0byByaWdodCwgI2YwMCAwJSwgI2ZmMCAxNyUsICMwZjBcXG4gICAgICAgICAgICAgICAgMzMlLCAjMGZmIDUwJSwgIzAwZiA2NyUsICNmMGYgODMlLCAjZjAwIDEwMCUpO1xcbiAgICAgICAgICAgICAgYmFja2dyb3VuZDogLXdlYmtpdC1saW5lYXItZ3JhZGllbnQodG8gcmlnaHQsICNmMDAgMCUsICNmZjBcXG4gICAgICAgICAgICAgICAgMTclLCAjMGYwIDMzJSwgIzBmZiA1MCUsICMwMGYgNjclLCAjZjBmIDgzJSwgI2YwMCAxMDAlKTtcXG4gICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgLmh1ZS12ZXJ0aWNhbCB7XFxuICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQodG8gdG9wLCAjZjAwIDAlLCAjZmYwIDE3JSwgIzBmMCAzMyUsXFxuICAgICAgICAgICAgICAgICMwZmYgNTAlLCAjMDBmIDY3JSwgI2YwZiA4MyUsICNmMDAgMTAwJSk7XFxuICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAtd2Via2l0LWxpbmVhci1ncmFkaWVudCh0byB0b3AsICNmMDAgMCUsICNmZjAgMTclLFxcbiAgICAgICAgICAgICAgICAjMGYwIDMzJSwgIzBmZiA1MCUsICMwMGYgNjclLCAjZjBmIDgzJSwgI2YwMCAxMDAlKTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICdcbiAgICAgICAgICApLFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy5wb2ludGVyIH0sXG4gICAgICAgICAgICB0aGlzLnByb3BzLnBvaW50ZXIgPyBSZWFjdC5jcmVhdGVFbGVtZW50KHRoaXMucHJvcHMucG9pbnRlciwgdGhpcy5wcm9wcykgOiBSZWFjdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IHN0eWxlOiBzdHlsZXMuc2xpZGVyIH0pXG4gICAgICAgICAgKVxuICAgICAgICApXG4gICAgICApO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBIdWU7XG59KFB1cmVDb21wb25lbnQgfHwgQ29tcG9uZW50KTtcblxuZXhwb3J0IGRlZmF1bHQgSHVlOyIsIi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBbXTtcbiAgdGhpcy5zaXplID0gMDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbGlzdENhY2hlQ2xlYXI7XG4iLCIvKipcbiAqIFBlcmZvcm1zIGFcbiAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gKiBjb21wYXJpc29uIGJldHdlZW4gdHdvIHZhbHVlcyB0byBkZXRlcm1pbmUgaWYgdGhleSBhcmUgZXF1aXZhbGVudC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAqIHZhciBvdGhlciA9IHsgJ2EnOiAxIH07XG4gKlxuICogXy5lcShvYmplY3QsIG9iamVjdCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5lcShvYmplY3QsIG90aGVyKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5lcSgnYScsICdhJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5lcSgnYScsIE9iamVjdCgnYScpKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5lcShOYU4sIE5hTik7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGVxKHZhbHVlLCBvdGhlcikge1xuICByZXR1cm4gdmFsdWUgPT09IG90aGVyIHx8ICh2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZXE7XG4iLCJpbXBvcnQgZXEgZnJvbSAnLi9lcS5qcyc7XG5cbi8qKlxuICogR2V0cyB0aGUgaW5kZXggYXQgd2hpY2ggdGhlIGBrZXlgIGlzIGZvdW5kIGluIGBhcnJheWAgb2Yga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7Kn0ga2V5IFRoZSBrZXkgdG8gc2VhcmNoIGZvci5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gKi9cbmZ1bmN0aW9uIGFzc29jSW5kZXhPZihhcnJheSwga2V5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gIHdoaWxlIChsZW5ndGgtLSkge1xuICAgIGlmIChlcShhcnJheVtsZW5ndGhdWzBdLCBrZXkpKSB7XG4gICAgICByZXR1cm4gbGVuZ3RoO1xuICAgIH1cbiAgfVxuICByZXR1cm4gLTE7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFzc29jSW5kZXhPZjtcbiIsImltcG9ydCBhc3NvY0luZGV4T2YgZnJvbSAnLi9fYXNzb2NJbmRleE9mLmpzJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHNwbGljZSA9IGFycmF5UHJvdG8uc3BsaWNlO1xuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBsaXN0IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVEZWxldGUoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgaWYgKGluZGV4IDwgMCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgbGFzdEluZGV4ID0gZGF0YS5sZW5ndGggLSAxO1xuICBpZiAoaW5kZXggPT0gbGFzdEluZGV4KSB7XG4gICAgZGF0YS5wb3AoKTtcbiAgfSBlbHNlIHtcbiAgICBzcGxpY2UuY2FsbChkYXRhLCBpbmRleCwgMSk7XG4gIH1cbiAgLS10aGlzLnNpemU7XG4gIHJldHVybiB0cnVlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBsaXN0Q2FjaGVEZWxldGU7XG4iLCJpbXBvcnQgbGlzdENhY2hlQ2xlYXIgZnJvbSAnLi9fbGlzdENhY2hlQ2xlYXIuanMnO1xuaW1wb3J0IGxpc3RDYWNoZURlbGV0ZSBmcm9tICcuL19saXN0Q2FjaGVEZWxldGUuanMnO1xuaW1wb3J0IGxpc3RDYWNoZUdldCBmcm9tICcuL19saXN0Q2FjaGVHZXQuanMnO1xuaW1wb3J0IGxpc3RDYWNoZUhhcyBmcm9tICcuL19saXN0Q2FjaGVIYXMuanMnO1xuaW1wb3J0IGxpc3RDYWNoZVNldCBmcm9tICcuL19saXN0Q2FjaGVTZXQuanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gbGlzdCBjYWNoZSBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIExpc3RDYWNoZShlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBMaXN0Q2FjaGVgLlxuTGlzdENhY2hlLnByb3RvdHlwZS5jbGVhciA9IGxpc3RDYWNoZUNsZWFyO1xuTGlzdENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBsaXN0Q2FjaGVEZWxldGU7XG5MaXN0Q2FjaGUucHJvdG90eXBlLmdldCA9IGxpc3RDYWNoZUdldDtcbkxpc3RDYWNoZS5wcm90b3R5cGUuaGFzID0gbGlzdENhY2hlSGFzO1xuTGlzdENhY2hlLnByb3RvdHlwZS5zZXQgPSBsaXN0Q2FjaGVTZXQ7XG5cbmV4cG9ydCBkZWZhdWx0IExpc3RDYWNoZTtcbiIsImltcG9ydCBhc3NvY0luZGV4T2YgZnJvbSAnLi9fYXNzb2NJbmRleE9mLmpzJztcblxuLyoqXG4gKiBHZXRzIHRoZSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlR2V0KGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIHJldHVybiBpbmRleCA8IDAgPyB1bmRlZmluZWQgOiBkYXRhW2luZGV4XVsxXTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbGlzdENhY2hlR2V0O1xuIiwiaW1wb3J0IGFzc29jSW5kZXhPZiBmcm9tICcuL19hc3NvY0luZGV4T2YuanMnO1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlSGFzKGtleSkge1xuICByZXR1cm4gYXNzb2NJbmRleE9mKHRoaXMuX19kYXRhX18sIGtleSkgPiAtMTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbGlzdENhY2hlSGFzO1xuIiwiaW1wb3J0IGFzc29jSW5kZXhPZiBmcm9tICcuL19hc3NvY0luZGV4T2YuanMnO1xuXG4vKipcbiAqIFNldHMgdGhlIGxpc3QgY2FjaGUgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGxpc3QgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgaWYgKGluZGV4IDwgMCkge1xuICAgICsrdGhpcy5zaXplO1xuICAgIGRhdGEucHVzaChba2V5LCB2YWx1ZV0pO1xuICB9IGVsc2Uge1xuICAgIGRhdGFbaW5kZXhdWzFdID0gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGxpc3RDYWNoZVNldDtcbiIsIi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsICYmIGdsb2JhbC5PYmplY3QgPT09IE9iamVjdCAmJiBnbG9iYWw7XG5cbmV4cG9ydCBkZWZhdWx0IGZyZWVHbG9iYWw7XG4iLCJpbXBvcnQgZnJlZUdsb2JhbCBmcm9tICcuL19mcmVlR2xvYmFsLmpzJztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBzZWxmYC4gKi9cbnZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmO1xuXG4vKiogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdC4gKi9cbnZhciByb290ID0gZnJlZUdsb2JhbCB8fCBmcmVlU2VsZiB8fCBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG5leHBvcnQgZGVmYXVsdCByb290O1xuIiwiaW1wb3J0IHJvb3QgZnJvbSAnLi9fcm9vdC5qcyc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIFN5bWJvbCA9IHJvb3QuU3ltYm9sO1xuXG5leHBvcnQgZGVmYXVsdCBTeW1ib2w7XG4iLCJpbXBvcnQgU3ltYm9sIGZyb20gJy4vX1N5bWJvbC5qcyc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VHZXRUYWdgIHdoaWNoIGlnbm9yZXMgYFN5bWJvbC50b1N0cmluZ1RhZ2AgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJhdyBgdG9TdHJpbmdUYWdgLlxuICovXG5mdW5jdGlvbiBnZXRSYXdUYWcodmFsdWUpIHtcbiAgdmFyIGlzT3duID0gaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgc3ltVG9TdHJpbmdUYWcpLFxuICAgICAgdGFnID0gdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuXG4gIHRyeSB7XG4gICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdW5kZWZpbmVkO1xuICAgIHZhciB1bm1hc2tlZCA9IHRydWU7XG4gIH0gY2F0Y2ggKGUpIHt9XG5cbiAgdmFyIHJlc3VsdCA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICBpZiAodW5tYXNrZWQpIHtcbiAgICBpZiAoaXNPd24pIHtcbiAgICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHRhZztcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlIHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZ2V0UmF3VGFnO1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZyB1c2luZyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG9iamVjdFRvU3RyaW5nO1xuIiwiaW1wb3J0IFN5bWJvbCBmcm9tICcuL19TeW1ib2wuanMnO1xuaW1wb3J0IGdldFJhd1RhZyBmcm9tICcuL19nZXRSYXdUYWcuanMnO1xuaW1wb3J0IG9iamVjdFRvU3RyaW5nIGZyb20gJy4vX29iamVjdFRvU3RyaW5nLmpzJztcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG51bGxUYWcgPSAnW29iamVjdCBOdWxsXScsXG4gICAgdW5kZWZpbmVkVGFnID0gJ1tvYmplY3QgVW5kZWZpbmVkXSc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRUYWdgIHdpdGhvdXQgZmFsbGJhY2tzIGZvciBidWdneSBlbnZpcm9ubWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldFRhZyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkVGFnIDogbnVsbFRhZztcbiAgfVxuICByZXR1cm4gKHN5bVRvU3RyaW5nVGFnICYmIHN5bVRvU3RyaW5nVGFnIGluIE9iamVjdCh2YWx1ZSkpXG4gICAgPyBnZXRSYXdUYWcodmFsdWUpXG4gICAgOiBvYmplY3RUb1N0cmluZyh2YWx1ZSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VHZXRUYWc7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHRoZVxuICogW2xhbmd1YWdlIHR5cGVdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzKVxuICogb2YgYE9iamVjdGAuIChlLmcuIGFycmF5cywgZnVuY3Rpb25zLCBvYmplY3RzLCByZWdleGVzLCBgbmV3IE51bWJlcigwKWAsIGFuZCBgbmV3IFN0cmluZygnJylgKVxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0KHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChfLm5vb3ApO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgKHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnZnVuY3Rpb24nKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNPYmplY3Q7XG4iLCJpbXBvcnQgYmFzZUdldFRhZyBmcm9tICcuL19iYXNlR2V0VGFnLmpzJztcbmltcG9ydCBpc09iamVjdCBmcm9tICcuL2lzT2JqZWN0LmpzJztcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFzeW5jVGFnID0gJ1tvYmplY3QgQXN5bmNGdW5jdGlvbl0nLFxuICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgIGdlblRhZyA9ICdbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXScsXG4gICAgcHJveHlUYWcgPSAnW29iamVjdCBQcm94eV0nO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgRnVuY3Rpb25gIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGZ1bmN0aW9uLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNGdW5jdGlvbihfKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzRnVuY3Rpb24oL2FiYy8pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvLyBUaGUgdXNlIG9mIGBPYmplY3QjdG9TdHJpbmdgIGF2b2lkcyBpc3N1ZXMgd2l0aCB0aGUgYHR5cGVvZmAgb3BlcmF0b3JcbiAgLy8gaW4gU2FmYXJpIDkgd2hpY2ggcmV0dXJucyAnb2JqZWN0JyBmb3IgdHlwZWQgYXJyYXlzIGFuZCBvdGhlciBjb25zdHJ1Y3RvcnMuXG4gIHZhciB0YWcgPSBiYXNlR2V0VGFnKHZhbHVlKTtcbiAgcmV0dXJuIHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWcgfHwgdGFnID09IGFzeW5jVGFnIHx8IHRhZyA9PSBwcm94eVRhZztcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNGdW5jdGlvbjtcbiIsImltcG9ydCByb290IGZyb20gJy4vX3Jvb3QuanMnO1xuXG4vKiogVXNlZCB0byBkZXRlY3Qgb3ZlcnJlYWNoaW5nIGNvcmUtanMgc2hpbXMuICovXG52YXIgY29yZUpzRGF0YSA9IHJvb3RbJ19fY29yZS1qc19zaGFyZWRfXyddO1xuXG5leHBvcnQgZGVmYXVsdCBjb3JlSnNEYXRhO1xuIiwiaW1wb3J0IGNvcmVKc0RhdGEgZnJvbSAnLi9fY29yZUpzRGF0YS5qcyc7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBtZXRob2RzIG1hc3F1ZXJhZGluZyBhcyBuYXRpdmUuICovXG52YXIgbWFza1NyY0tleSA9IChmdW5jdGlvbigpIHtcbiAgdmFyIHVpZCA9IC9bXi5dKyQvLmV4ZWMoY29yZUpzRGF0YSAmJiBjb3JlSnNEYXRhLmtleXMgJiYgY29yZUpzRGF0YS5rZXlzLklFX1BST1RPIHx8ICcnKTtcbiAgcmV0dXJuIHVpZCA/ICgnU3ltYm9sKHNyYylfMS4nICsgdWlkKSA6ICcnO1xufSgpKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYGZ1bmNgIGhhcyBpdHMgc291cmNlIG1hc2tlZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGZ1bmNgIGlzIG1hc2tlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc01hc2tlZChmdW5jKSB7XG4gIHJldHVybiAhIW1hc2tTcmNLZXkgJiYgKG1hc2tTcmNLZXkgaW4gZnVuYyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzTWFza2VkO1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xudmFyIGZ1bmNUb1N0cmluZyA9IGZ1bmNQcm90by50b1N0cmluZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgZnVuY2AgdG8gaXRzIHNvdXJjZSBjb2RlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc291cmNlIGNvZGUuXG4gKi9cbmZ1bmN0aW9uIHRvU291cmNlKGZ1bmMpIHtcbiAgaWYgKGZ1bmMgIT0gbnVsbCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gZnVuY1RvU3RyaW5nLmNhbGwoZnVuYyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgICB0cnkge1xuICAgICAgcmV0dXJuIChmdW5jICsgJycpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH1cbiAgcmV0dXJuICcnO1xufVxuXG5leHBvcnQgZGVmYXVsdCB0b1NvdXJjZTtcbiIsImltcG9ydCBpc0Z1bmN0aW9uIGZyb20gJy4vaXNGdW5jdGlvbi5qcyc7XG5pbXBvcnQgaXNNYXNrZWQgZnJvbSAnLi9faXNNYXNrZWQuanMnO1xuaW1wb3J0IGlzT2JqZWN0IGZyb20gJy4vaXNPYmplY3QuanMnO1xuaW1wb3J0IHRvU291cmNlIGZyb20gJy4vX3RvU291cmNlLmpzJztcblxuLyoqXG4gKiBVc2VkIHRvIG1hdGNoIGBSZWdFeHBgXG4gKiBbc3ludGF4IGNoYXJhY3RlcnNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXBhdHRlcm5zKS5cbiAqL1xudmFyIHJlUmVnRXhwQ2hhciA9IC9bXFxcXF4kLiorPygpW1xcXXt9fF0vZztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGhvc3QgY29uc3RydWN0b3JzIChTYWZhcmkpLiAqL1xudmFyIHJlSXNIb3N0Q3RvciA9IC9eXFxbb2JqZWN0IC4rP0NvbnN0cnVjdG9yXFxdJC87XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGUsXG4gICAgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKiogVXNlZCB0byBkZXRlY3QgaWYgYSBtZXRob2QgaXMgbmF0aXZlLiAqL1xudmFyIHJlSXNOYXRpdmUgPSBSZWdFeHAoJ14nICtcbiAgZnVuY1RvU3RyaW5nLmNhbGwoaGFzT3duUHJvcGVydHkpLnJlcGxhY2UocmVSZWdFeHBDaGFyLCAnXFxcXCQmJylcbiAgLnJlcGxhY2UoL2hhc093blByb3BlcnR5fChmdW5jdGlvbikuKj8oPz1cXFxcXFwoKXwgZm9yIC4rPyg/PVxcXFxcXF0pL2csICckMS4qPycpICsgJyQnXG4pO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTmF0aXZlYCB3aXRob3V0IGJhZCBzaGltIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG5hdGl2ZSBmdW5jdGlvbixcbiAqICBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc05hdGl2ZSh2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSB8fCBpc01hc2tlZCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHBhdHRlcm4gPSBpc0Z1bmN0aW9uKHZhbHVlKSA/IHJlSXNOYXRpdmUgOiByZUlzSG9zdEN0b3I7XG4gIHJldHVybiBwYXR0ZXJuLnRlc3QodG9Tb3VyY2UodmFsdWUpKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUlzTmF0aXZlO1xuIiwiaW1wb3J0IGJhc2VJc05hdGl2ZSBmcm9tICcuL19iYXNlSXNOYXRpdmUuanMnO1xuaW1wb3J0IGdldFZhbHVlIGZyb20gJy4vX2dldFZhbHVlLmpzJztcblxuLyoqXG4gKiBHZXRzIHRoZSBuYXRpdmUgZnVuY3Rpb24gYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgbWV0aG9kIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBpZiBpdCdzIG5hdGl2ZSwgZWxzZSBgdW5kZWZpbmVkYC5cbiAqL1xuZnVuY3Rpb24gZ2V0TmF0aXZlKG9iamVjdCwga2V5KSB7XG4gIHZhciB2YWx1ZSA9IGdldFZhbHVlKG9iamVjdCwga2V5KTtcbiAgcmV0dXJuIGJhc2VJc05hdGl2ZSh2YWx1ZSkgPyB2YWx1ZSA6IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZ2V0TmF0aXZlO1xuIiwiLyoqXG4gKiBHZXRzIHRoZSB2YWx1ZSBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gZ2V0VmFsdWUob2JqZWN0LCBrZXkpIHtcbiAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldFZhbHVlO1xuIiwiaW1wb3J0IGdldE5hdGl2ZSBmcm9tICcuL19nZXROYXRpdmUuanMnO1xuaW1wb3J0IHJvb3QgZnJvbSAnLi9fcm9vdC5qcyc7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBNYXAgPSBnZXROYXRpdmUocm9vdCwgJ01hcCcpO1xuXG5leHBvcnQgZGVmYXVsdCBNYXA7XG4iLCJpbXBvcnQgZ2V0TmF0aXZlIGZyb20gJy4vX2dldE5hdGl2ZS5qcyc7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBuYXRpdmVDcmVhdGUgPSBnZXROYXRpdmUoT2JqZWN0LCAnY3JlYXRlJyk7XG5cbmV4cG9ydCBkZWZhdWx0IG5hdGl2ZUNyZWF0ZTtcbiIsImltcG9ydCBuYXRpdmVDcmVhdGUgZnJvbSAnLi9fbmF0aXZlQ3JlYXRlLmpzJztcblxuLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEdldHMgdGhlIGhhc2ggdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gaGFzaEdldChrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICBpZiAobmF0aXZlQ3JlYXRlKSB7XG4gICAgdmFyIHJlc3VsdCA9IGRhdGFba2V5XTtcbiAgICByZXR1cm4gcmVzdWx0ID09PSBIQVNIX1VOREVGSU5FRCA/IHVuZGVmaW5lZCA6IHJlc3VsdDtcbiAgfVxuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpID8gZGF0YVtrZXldIDogdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBoYXNoR2V0O1xuIiwiaW1wb3J0IG5hdGl2ZUNyZWF0ZSBmcm9tICcuL19uYXRpdmVDcmVhdGUuanMnO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIGhhc2ggdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGhhc2hIYXMoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgcmV0dXJuIG5hdGl2ZUNyZWF0ZSA/IChkYXRhW2tleV0gIT09IHVuZGVmaW5lZCkgOiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGRhdGEsIGtleSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGhhc2hIYXM7XG4iLCJpbXBvcnQgaGFzaENsZWFyIGZyb20gJy4vX2hhc2hDbGVhci5qcyc7XG5pbXBvcnQgaGFzaERlbGV0ZSBmcm9tICcuL19oYXNoRGVsZXRlLmpzJztcbmltcG9ydCBoYXNoR2V0IGZyb20gJy4vX2hhc2hHZXQuanMnO1xuaW1wb3J0IGhhc2hIYXMgZnJvbSAnLi9faGFzaEhhcy5qcyc7XG5pbXBvcnQgaGFzaFNldCBmcm9tICcuL19oYXNoU2V0LmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgaGFzaCBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIEhhc2goZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgSGFzaGAuXG5IYXNoLnByb3RvdHlwZS5jbGVhciA9IGhhc2hDbGVhcjtcbkhhc2gucHJvdG90eXBlWydkZWxldGUnXSA9IGhhc2hEZWxldGU7XG5IYXNoLnByb3RvdHlwZS5nZXQgPSBoYXNoR2V0O1xuSGFzaC5wcm90b3R5cGUuaGFzID0gaGFzaEhhcztcbkhhc2gucHJvdG90eXBlLnNldCA9IGhhc2hTZXQ7XG5cbmV4cG9ydCBkZWZhdWx0IEhhc2g7XG4iLCJpbXBvcnQgbmF0aXZlQ3JlYXRlIGZyb20gJy4vX25hdGl2ZUNyZWF0ZS5qcyc7XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgaGFzaC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKi9cbmZ1bmN0aW9uIGhhc2hDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IG5hdGl2ZUNyZWF0ZSA/IG5hdGl2ZUNyZWF0ZShudWxsKSA6IHt9O1xuICB0aGlzLnNpemUgPSAwO1xufVxuXG5leHBvcnQgZGVmYXVsdCBoYXNoQ2xlYXI7XG4iLCIvKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBoYXNoLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge09iamVjdH0gaGFzaCBUaGUgaGFzaCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzaERlbGV0ZShrZXkpIHtcbiAgdmFyIHJlc3VsdCA9IHRoaXMuaGFzKGtleSkgJiYgZGVsZXRlIHRoaXMuX19kYXRhX19ba2V5XTtcbiAgdGhpcy5zaXplIC09IHJlc3VsdCA/IDEgOiAwO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBoYXNoRGVsZXRlO1xuIiwiaW1wb3J0IG5hdGl2ZUNyZWF0ZSBmcm9tICcuL19uYXRpdmVDcmVhdGUuanMnO1xuXG4vKiogVXNlZCB0byBzdGFuZC1pbiBmb3IgYHVuZGVmaW5lZGAgaGFzaCB2YWx1ZXMuICovXG52YXIgSEFTSF9VTkRFRklORUQgPSAnX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfXyc7XG5cbi8qKlxuICogU2V0cyB0aGUgaGFzaCBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGhhc2ggaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIGhhc2hTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIHRoaXMuc2l6ZSArPSB0aGlzLmhhcyhrZXkpID8gMCA6IDE7XG4gIGRhdGFba2V5XSA9IChuYXRpdmVDcmVhdGUgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCkgPyBIQVNIX1VOREVGSU5FRCA6IHZhbHVlO1xuICByZXR1cm4gdGhpcztcbn1cblxuZXhwb3J0IGRlZmF1bHQgaGFzaFNldDtcbiIsImltcG9ydCBpc0tleWFibGUgZnJvbSAnLi9faXNLZXlhYmxlLmpzJztcblxuLyoqXG4gKiBHZXRzIHRoZSBkYXRhIGZvciBgbWFwYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUgcmVmZXJlbmNlIGtleS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXAgZGF0YS5cbiAqL1xuZnVuY3Rpb24gZ2V0TWFwRGF0YShtYXAsIGtleSkge1xuICB2YXIgZGF0YSA9IG1hcC5fX2RhdGFfXztcbiAgcmV0dXJuIGlzS2V5YWJsZShrZXkpXG4gICAgPyBkYXRhW3R5cGVvZiBrZXkgPT0gJ3N0cmluZycgPyAnc3RyaW5nJyA6ICdoYXNoJ11cbiAgICA6IGRhdGEubWFwO1xufVxuXG5leHBvcnQgZGVmYXVsdCBnZXRNYXBEYXRhO1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSBmb3IgdXNlIGFzIHVuaXF1ZSBvYmplY3Qga2V5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzS2V5YWJsZSh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuICh0eXBlID09ICdzdHJpbmcnIHx8IHR5cGUgPT0gJ251bWJlcicgfHwgdHlwZSA9PSAnc3ltYm9sJyB8fCB0eXBlID09ICdib29sZWFuJylcbiAgICA/ICh2YWx1ZSAhPT0gJ19fcHJvdG9fXycpXG4gICAgOiAodmFsdWUgPT09IG51bGwpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc0tleWFibGU7XG4iLCJpbXBvcnQgbWFwQ2FjaGVDbGVhciBmcm9tICcuL19tYXBDYWNoZUNsZWFyLmpzJztcbmltcG9ydCBtYXBDYWNoZURlbGV0ZSBmcm9tICcuL19tYXBDYWNoZURlbGV0ZS5qcyc7XG5pbXBvcnQgbWFwQ2FjaGVHZXQgZnJvbSAnLi9fbWFwQ2FjaGVHZXQuanMnO1xuaW1wb3J0IG1hcENhY2hlSGFzIGZyb20gJy4vX21hcENhY2hlSGFzLmpzJztcbmltcG9ydCBtYXBDYWNoZVNldCBmcm9tICcuL19tYXBDYWNoZVNldC5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG1hcCBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBNYXBDYWNoZShlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBNYXBDYWNoZWAuXG5NYXBDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBtYXBDYWNoZUNsZWFyO1xuTWFwQ2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IG1hcENhY2hlRGVsZXRlO1xuTWFwQ2FjaGUucHJvdG90eXBlLmdldCA9IG1hcENhY2hlR2V0O1xuTWFwQ2FjaGUucHJvdG90eXBlLmhhcyA9IG1hcENhY2hlSGFzO1xuTWFwQ2FjaGUucHJvdG90eXBlLnNldCA9IG1hcENhY2hlU2V0O1xuXG5leHBvcnQgZGVmYXVsdCBNYXBDYWNoZTtcbiIsImltcG9ydCBIYXNoIGZyb20gJy4vX0hhc2guanMnO1xuaW1wb3J0IExpc3RDYWNoZSBmcm9tICcuL19MaXN0Q2FjaGUuanMnO1xuaW1wb3J0IE1hcCBmcm9tICcuL19NYXAuanMnO1xuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIG1hcC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUNsZWFyKCkge1xuICB0aGlzLnNpemUgPSAwO1xuICB0aGlzLl9fZGF0YV9fID0ge1xuICAgICdoYXNoJzogbmV3IEhhc2gsXG4gICAgJ21hcCc6IG5ldyAoTWFwIHx8IExpc3RDYWNoZSksXG4gICAgJ3N0cmluZyc6IG5ldyBIYXNoXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1hcENhY2hlQ2xlYXI7XG4iLCJpbXBvcnQgZ2V0TWFwRGF0YSBmcm9tICcuL19nZXRNYXBEYXRhLmpzJztcblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbWFwLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlRGVsZXRlKGtleSkge1xuICB2YXIgcmVzdWx0ID0gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpWydkZWxldGUnXShrZXkpO1xuICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1hcENhY2hlRGVsZXRlO1xuIiwiaW1wb3J0IGdldE1hcERhdGEgZnJvbSAnLi9fZ2V0TWFwRGF0YS5qcyc7XG5cbi8qKlxuICogR2V0cyB0aGUgbWFwIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUdldChrZXkpIHtcbiAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5nZXQoa2V5KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWFwQ2FjaGVHZXQ7XG4iLCJpbXBvcnQgZ2V0TWFwRGF0YSBmcm9tICcuL19nZXRNYXBEYXRhLmpzJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYSBtYXAgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUhhcyhrZXkpIHtcbiAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5oYXMoa2V5KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWFwQ2FjaGVIYXM7XG4iLCJpbXBvcnQgZ2V0TWFwRGF0YSBmcm9tICcuL19nZXRNYXBEYXRhLmpzJztcblxuLyoqXG4gKiBTZXRzIHRoZSBtYXAgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbWFwIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLFxuICAgICAgc2l6ZSA9IGRhdGEuc2l6ZTtcblxuICBkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgdGhpcy5zaXplICs9IGRhdGEuc2l6ZSA9PSBzaXplID8gMCA6IDE7XG4gIHJldHVybiB0aGlzO1xufVxuXG5leHBvcnQgZGVmYXVsdCBtYXBDYWNoZVNldDtcbiIsImltcG9ydCBMaXN0Q2FjaGUgZnJvbSAnLi9fTGlzdENhY2hlLmpzJztcbmltcG9ydCBzdGFja0NsZWFyIGZyb20gJy4vX3N0YWNrQ2xlYXIuanMnO1xuaW1wb3J0IHN0YWNrRGVsZXRlIGZyb20gJy4vX3N0YWNrRGVsZXRlLmpzJztcbmltcG9ydCBzdGFja0dldCBmcm9tICcuL19zdGFja0dldC5qcyc7XG5pbXBvcnQgc3RhY2tIYXMgZnJvbSAnLi9fc3RhY2tIYXMuanMnO1xuaW1wb3J0IHN0YWNrU2V0IGZyb20gJy4vX3N0YWNrU2V0LmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgc3RhY2sgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gU3RhY2soZW50cmllcykge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18gPSBuZXcgTGlzdENhY2hlKGVudHJpZXMpO1xuICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBTdGFja2AuXG5TdGFjay5wcm90b3R5cGUuY2xlYXIgPSBzdGFja0NsZWFyO1xuU3RhY2sucHJvdG90eXBlWydkZWxldGUnXSA9IHN0YWNrRGVsZXRlO1xuU3RhY2sucHJvdG90eXBlLmdldCA9IHN0YWNrR2V0O1xuU3RhY2sucHJvdG90eXBlLmhhcyA9IHN0YWNrSGFzO1xuU3RhY2sucHJvdG90eXBlLnNldCA9IHN0YWNrU2V0O1xuXG5leHBvcnQgZGVmYXVsdCBTdGFjaztcbiIsImltcG9ydCBMaXN0Q2FjaGUgZnJvbSAnLi9fTGlzdENhY2hlLmpzJztcblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBzdGFjay5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBTdGFja1xuICovXG5mdW5jdGlvbiBzdGFja0NsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0gbmV3IExpc3RDYWNoZTtcbiAgdGhpcy5zaXplID0gMDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc3RhY2tDbGVhcjtcbiIsIi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIHN0YWNrLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrRGVsZXRlKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICByZXN1bHQgPSBkYXRhWydkZWxldGUnXShrZXkpO1xuXG4gIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc3RhY2tEZWxldGU7XG4iLCIvKipcbiAqIEdldHMgdGhlIHN0YWNrIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBzdGFja0dldChrZXkpIHtcbiAgcmV0dXJuIHRoaXMuX19kYXRhX18uZ2V0KGtleSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHN0YWNrR2V0O1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYSBzdGFjayB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrSGFzKGtleSkge1xuICByZXR1cm4gdGhpcy5fX2RhdGFfXy5oYXMoa2V5KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc3RhY2tIYXM7XG4iLCJpbXBvcnQgTGlzdENhY2hlIGZyb20gJy4vX0xpc3RDYWNoZS5qcyc7XG5pbXBvcnQgTWFwIGZyb20gJy4vX01hcC5qcyc7XG5pbXBvcnQgTWFwQ2FjaGUgZnJvbSAnLi9fTWFwQ2FjaGUuanMnO1xuXG4vKiogVXNlZCBhcyB0aGUgc2l6ZSB0byBlbmFibGUgbGFyZ2UgYXJyYXkgb3B0aW1pemF0aW9ucy4gKi9cbnZhciBMQVJHRV9BUlJBWV9TSVpFID0gMjAwO1xuXG4vKipcbiAqIFNldHMgdGhlIHN0YWNrIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIHN0YWNrIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBzdGFja1NldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgaWYgKGRhdGEgaW5zdGFuY2VvZiBMaXN0Q2FjaGUpIHtcbiAgICB2YXIgcGFpcnMgPSBkYXRhLl9fZGF0YV9fO1xuICAgIGlmICghTWFwIHx8IChwYWlycy5sZW5ndGggPCBMQVJHRV9BUlJBWV9TSVpFIC0gMSkpIHtcbiAgICAgIHBhaXJzLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgICAgIHRoaXMuc2l6ZSA9ICsrZGF0YS5zaXplO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGRhdGEgPSB0aGlzLl9fZGF0YV9fID0gbmV3IE1hcENhY2hlKHBhaXJzKTtcbiAgfVxuICBkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICByZXR1cm4gdGhpcztcbn1cblxuZXhwb3J0IGRlZmF1bHQgc3RhY2tTZXQ7XG4iLCJpbXBvcnQgZ2V0TmF0aXZlIGZyb20gJy4vX2dldE5hdGl2ZS5qcyc7XG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IChmdW5jdGlvbigpIHtcbiAgdHJ5IHtcbiAgICB2YXIgZnVuYyA9IGdldE5hdGl2ZShPYmplY3QsICdkZWZpbmVQcm9wZXJ0eScpO1xuICAgIGZ1bmMoe30sICcnLCB7fSk7XG4gICAgcmV0dXJuIGZ1bmM7XG4gIH0gY2F0Y2ggKGUpIHt9XG59KCkpO1xuXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVQcm9wZXJ0eTtcbiIsImltcG9ydCBkZWZpbmVQcm9wZXJ0eSBmcm9tICcuL19kZWZpbmVQcm9wZXJ0eS5qcyc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGFzc2lnblZhbHVlYCBhbmQgYGFzc2lnbk1lcmdlVmFsdWVgIHdpdGhvdXRcbiAqIHZhbHVlIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYXNzaWduLlxuICovXG5mdW5jdGlvbiBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgPT0gJ19fcHJvdG9fXycgJiYgZGVmaW5lUHJvcGVydHkpIHtcbiAgICBkZWZpbmVQcm9wZXJ0eShvYmplY3QsIGtleSwge1xuICAgICAgJ2NvbmZpZ3VyYWJsZSc6IHRydWUsXG4gICAgICAnZW51bWVyYWJsZSc6IHRydWUsXG4gICAgICAndmFsdWUnOiB2YWx1ZSxcbiAgICAgICd3cml0YWJsZSc6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VBc3NpZ25WYWx1ZTtcbiIsImltcG9ydCBiYXNlQXNzaWduVmFsdWUgZnJvbSAnLi9fYmFzZUFzc2lnblZhbHVlLmpzJztcbmltcG9ydCBlcSBmcm9tICcuL2VxLmpzJztcblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGFzc2lnblZhbHVlYCBleGNlcHQgdGhhdCBpdCBkb2Vzbid0IGFzc2lnblxuICogYHVuZGVmaW5lZGAgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gKi9cbmZ1bmN0aW9uIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIGlmICgodmFsdWUgIT09IHVuZGVmaW5lZCAmJiAhZXEob2JqZWN0W2tleV0sIHZhbHVlKSkgfHxcbiAgICAgICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpKSB7XG4gICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgYXNzaWduTWVyZ2VWYWx1ZTtcbiIsImltcG9ydCBjcmVhdGVCYXNlRm9yIGZyb20gJy4vX2NyZWF0ZUJhc2VGb3IuanMnO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBiYXNlRm9yT3duYCB3aGljaCBpdGVyYXRlcyBvdmVyIGBvYmplY3RgXG4gKiBwcm9wZXJ0aWVzIHJldHVybmVkIGJ5IGBrZXlzRnVuY2AgYW5kIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAqIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb24gZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGBvYmplY3RgLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xudmFyIGJhc2VGb3IgPSBjcmVhdGVCYXNlRm9yKCk7XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VGb3I7XG4iLCIvKipcbiAqIENyZWF0ZXMgYSBiYXNlIGZ1bmN0aW9uIGZvciBtZXRob2RzIGxpa2UgYF8uZm9ySW5gIGFuZCBgXy5mb3JPd25gLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJhc2UgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJhc2VGb3IoZnJvbVJpZ2h0KSB7XG4gIHJldHVybiBmdW5jdGlvbihvYmplY3QsIGl0ZXJhdGVlLCBrZXlzRnVuYykge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBpdGVyYWJsZSA9IE9iamVjdChvYmplY3QpLFxuICAgICAgICBwcm9wcyA9IGtleXNGdW5jKG9iamVjdCksXG4gICAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgdmFyIGtleSA9IHByb3BzW2Zyb21SaWdodCA/IGxlbmd0aCA6ICsraW5kZXhdO1xuICAgICAgaWYgKGl0ZXJhdGVlKGl0ZXJhYmxlW2tleV0sIGtleSwgaXRlcmFibGUpID09PSBmYWxzZSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG9iamVjdDtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQmFzZUZvcjtcbiIsImltcG9ydCByb290IGZyb20gJy4vX3Jvb3QuanMnO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xudmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgJiYgZXhwb3J0cyAmJiAhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYG1vZHVsZWAuICovXG52YXIgZnJlZU1vZHVsZSA9IGZyZWVFeHBvcnRzICYmIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXG4vKiogRGV0ZWN0IHRoZSBwb3B1bGFyIENvbW1vbkpTIGV4dGVuc2lvbiBgbW9kdWxlLmV4cG9ydHNgLiAqL1xudmFyIG1vZHVsZUV4cG9ydHMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUuZXhwb3J0cyA9PT0gZnJlZUV4cG9ydHM7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIEJ1ZmZlciA9IG1vZHVsZUV4cG9ydHMgPyByb290LkJ1ZmZlciA6IHVuZGVmaW5lZCxcbiAgICBhbGxvY1Vuc2FmZSA9IEJ1ZmZlciA/IEJ1ZmZlci5hbGxvY1Vuc2FmZSA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBDcmVhdGVzIGEgY2xvbmUgb2YgIGBidWZmZXJgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0J1ZmZlcn0gYnVmZmVyIFRoZSBidWZmZXIgdG8gY2xvbmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICogQHJldHVybnMge0J1ZmZlcn0gUmV0dXJucyB0aGUgY2xvbmVkIGJ1ZmZlci5cbiAqL1xuZnVuY3Rpb24gY2xvbmVCdWZmZXIoYnVmZmVyLCBpc0RlZXApIHtcbiAgaWYgKGlzRGVlcCkge1xuICAgIHJldHVybiBidWZmZXIuc2xpY2UoKTtcbiAgfVxuICB2YXIgbGVuZ3RoID0gYnVmZmVyLmxlbmd0aCxcbiAgICAgIHJlc3VsdCA9IGFsbG9jVW5zYWZlID8gYWxsb2NVbnNhZmUobGVuZ3RoKSA6IG5ldyBidWZmZXIuY29uc3RydWN0b3IobGVuZ3RoKTtcblxuICBidWZmZXIuY29weShyZXN1bHQpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbG9uZUJ1ZmZlcjtcbiIsImltcG9ydCByb290IGZyb20gJy4vX3Jvb3QuanMnO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBVaW50OEFycmF5ID0gcm9vdC5VaW50OEFycmF5O1xuXG5leHBvcnQgZGVmYXVsdCBVaW50OEFycmF5O1xuIiwiaW1wb3J0IGNsb25lQXJyYXlCdWZmZXIgZnJvbSAnLi9fY2xvbmVBcnJheUJ1ZmZlci5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mIGB0eXBlZEFycmF5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHR5cGVkQXJyYXkgVGhlIHR5cGVkIGFycmF5IHRvIGNsb25lLlxuICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCB0eXBlZCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gY2xvbmVUeXBlZEFycmF5KHR5cGVkQXJyYXksIGlzRGVlcCkge1xuICB2YXIgYnVmZmVyID0gaXNEZWVwID8gY2xvbmVBcnJheUJ1ZmZlcih0eXBlZEFycmF5LmJ1ZmZlcikgOiB0eXBlZEFycmF5LmJ1ZmZlcjtcbiAgcmV0dXJuIG5ldyB0eXBlZEFycmF5LmNvbnN0cnVjdG9yKGJ1ZmZlciwgdHlwZWRBcnJheS5ieXRlT2Zmc2V0LCB0eXBlZEFycmF5Lmxlbmd0aCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsb25lVHlwZWRBcnJheTtcbiIsImltcG9ydCBVaW50OEFycmF5IGZyb20gJy4vX1VpbnQ4QXJyYXkuanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgYXJyYXlCdWZmZXJgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5QnVmZmVyfSBhcnJheUJ1ZmZlciBUaGUgYXJyYXkgYnVmZmVyIHRvIGNsb25lLlxuICogQHJldHVybnMge0FycmF5QnVmZmVyfSBSZXR1cm5zIHRoZSBjbG9uZWQgYXJyYXkgYnVmZmVyLlxuICovXG5mdW5jdGlvbiBjbG9uZUFycmF5QnVmZmVyKGFycmF5QnVmZmVyKSB7XG4gIHZhciByZXN1bHQgPSBuZXcgYXJyYXlCdWZmZXIuY29uc3RydWN0b3IoYXJyYXlCdWZmZXIuYnl0ZUxlbmd0aCk7XG4gIG5ldyBVaW50OEFycmF5KHJlc3VsdCkuc2V0KG5ldyBVaW50OEFycmF5KGFycmF5QnVmZmVyKSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsb25lQXJyYXlCdWZmZXI7XG4iLCJpbXBvcnQgaXNPYmplY3QgZnJvbSAnLi9pc09iamVjdC5qcyc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdENyZWF0ZSA9IE9iamVjdC5jcmVhdGU7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY3JlYXRlYCB3aXRob3V0IHN1cHBvcnQgZm9yIGFzc2lnbmluZ1xuICogcHJvcGVydGllcyB0byB0aGUgY3JlYXRlZCBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm90byBUaGUgb2JqZWN0IHRvIGluaGVyaXQgZnJvbS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gKi9cbnZhciBiYXNlQ3JlYXRlID0gKGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBvYmplY3QoKSB7fVxuICByZXR1cm4gZnVuY3Rpb24ocHJvdG8pIHtcbiAgICBpZiAoIWlzT2JqZWN0KHByb3RvKSkge1xuICAgICAgcmV0dXJuIHt9O1xuICAgIH1cbiAgICBpZiAob2JqZWN0Q3JlYXRlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0Q3JlYXRlKHByb3RvKTtcbiAgICB9XG4gICAgb2JqZWN0LnByb3RvdHlwZSA9IHByb3RvO1xuICAgIHZhciByZXN1bHQgPSBuZXcgb2JqZWN0O1xuICAgIG9iamVjdC5wcm90b3R5cGUgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn0oKSk7XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VDcmVhdGU7XG4iLCIvKipcbiAqIENyZWF0ZXMgYSB1bmFyeSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggaXRzIGFyZ3VtZW50IHRyYW5zZm9ybWVkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gdHJhbnNmb3JtIFRoZSBhcmd1bWVudCB0cmFuc2Zvcm0uXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gb3ZlckFyZyhmdW5jLCB0cmFuc2Zvcm0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiBmdW5jKHRyYW5zZm9ybShhcmcpKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgb3ZlckFyZztcbiIsImltcG9ydCBvdmVyQXJnIGZyb20gJy4vX292ZXJBcmcuanMnO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBnZXRQcm90b3R5cGUgPSBvdmVyQXJnKE9iamVjdC5nZXRQcm90b3R5cGVPZiwgT2JqZWN0KTtcblxuZXhwb3J0IGRlZmF1bHQgZ2V0UHJvdG90eXBlO1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYSBwcm90b3R5cGUgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvdG90eXBlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzUHJvdG90eXBlKHZhbHVlKSB7XG4gIHZhciBDdG9yID0gdmFsdWUgJiYgdmFsdWUuY29uc3RydWN0b3IsXG4gICAgICBwcm90byA9ICh0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IucHJvdG90eXBlKSB8fCBvYmplY3RQcm90bztcblxuICByZXR1cm4gdmFsdWUgPT09IHByb3RvO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc1Byb3RvdHlwZTtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdExpa2Uoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc09iamVjdExpa2UobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc09iamVjdExpa2U7XG4iLCJpbXBvcnQgYmFzZUdldFRhZyBmcm9tICcuL19iYXNlR2V0VGFnLmpzJztcbmltcG9ydCBpc09iamVjdExpa2UgZnJvbSAnLi9pc09iamVjdExpa2UuanMnO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzQXJndW1lbnRzYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBgYXJndW1lbnRzYCBvYmplY3QsXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc0FyZ3VtZW50cyh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBhcmdzVGFnO1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlSXNBcmd1bWVudHM7XG4iLCJpbXBvcnQgYmFzZUlzQXJndW1lbnRzIGZyb20gJy4vX2Jhc2VJc0FyZ3VtZW50cy5qcyc7XG5pbXBvcnQgaXNPYmplY3RMaWtlIGZyb20gJy4vaXNPYmplY3RMaWtlLmpzJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgcHJvcGVydHlJc0VudW1lcmFibGUgPSBvYmplY3RQcm90by5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAqICBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcmd1bWVudHMoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FyZ3VtZW50cyhbMSwgMiwgM10pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQXJndW1lbnRzID0gYmFzZUlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID8gYmFzZUlzQXJndW1lbnRzIDogZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpICYmXG4gICAgIXByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwodmFsdWUsICdjYWxsZWUnKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGlzQXJndW1lbnRzO1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGFuIGBBcnJheWAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcnJheShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0FycmF5KCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0FycmF5KF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5cbmV4cG9ydCBkZWZhdWx0IGlzQXJyYXk7XG4iLCIvKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgbGVuZ3RoLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uXG4gKiBbYFRvTGVuZ3RoYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdG9sZW5ndGgpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgbGVuZ3RoLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNMZW5ndGgoMyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0xlbmd0aChOdW1iZXIuTUlOX1ZBTFVFKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0xlbmd0aChJbmZpbml0eSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNMZW5ndGgoJzMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTGVuZ3RoKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiZcbiAgICB2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDw9IE1BWF9TQUZFX0lOVEVHRVI7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzTGVuZ3RoO1xuIiwiaW1wb3J0IGlzRnVuY3Rpb24gZnJvbSAnLi9pc0Z1bmN0aW9uLmpzJztcbmltcG9ydCBpc0xlbmd0aCBmcm9tICcuL2lzTGVuZ3RoLmpzJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLiBBIHZhbHVlIGlzIGNvbnNpZGVyZWQgYXJyYXktbGlrZSBpZiBpdCdzXG4gKiBub3QgYSBmdW5jdGlvbiBhbmQgaGFzIGEgYHZhbHVlLmxlbmd0aGAgdGhhdCdzIGFuIGludGVnZXIgZ3JlYXRlciB0aGFuIG9yXG4gKiBlcXVhbCB0byBgMGAgYW5kIGxlc3MgdGhhbiBvciBlcXVhbCB0byBgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZSgnYWJjJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUxpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgaXNMZW5ndGgodmFsdWUubGVuZ3RoKSAmJiAhaXNGdW5jdGlvbih2YWx1ZSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzQXJyYXlMaWtlO1xuIiwiaW1wb3J0IHJvb3QgZnJvbSAnLi9fcm9vdC5qcyc7XG5pbXBvcnQgc3R1YkZhbHNlIGZyb20gJy4vc3R1YkZhbHNlLmpzJztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cbnZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xudmFyIGZyZWVNb2R1bGUgPSBmcmVlRXhwb3J0cyAmJiB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblxuLyoqIERldGVjdCB0aGUgcG9wdWxhciBDb21tb25KUyBleHRlbnNpb24gYG1vZHVsZS5leHBvcnRzYC4gKi9cbnZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBCdWZmZXIgPSBtb2R1bGVFeHBvcnRzID8gcm9vdC5CdWZmZXIgOiB1bmRlZmluZWQ7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVJc0J1ZmZlciA9IEJ1ZmZlciA/IEJ1ZmZlci5pc0J1ZmZlciA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlci5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMy4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlciwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQnVmZmVyKG5ldyBCdWZmZXIoMikpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNCdWZmZXIobmV3IFVpbnQ4QXJyYXkoMikpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQnVmZmVyID0gbmF0aXZlSXNCdWZmZXIgfHwgc3R1YkZhbHNlO1xuXG5leHBvcnQgZGVmYXVsdCBpc0J1ZmZlcjtcbiIsIi8qKlxuICogVGhpcyBtZXRob2QgcmV0dXJucyBgZmFsc2VgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4xMy4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50aW1lcygyLCBfLnN0dWJGYWxzZSk7XG4gKiAvLyA9PiBbZmFsc2UsIGZhbHNlXVxuICovXG5mdW5jdGlvbiBzdHViRmFsc2UoKSB7XG4gIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc3R1YkZhbHNlO1xuIiwiaW1wb3J0IGJhc2VHZXRUYWcgZnJvbSAnLi9fYmFzZUdldFRhZy5qcyc7XG5pbXBvcnQgZ2V0UHJvdG90eXBlIGZyb20gJy4vX2dldFByb3RvdHlwZS5qcyc7XG5pbXBvcnQgaXNPYmplY3RMaWtlIGZyb20gJy4vaXNPYmplY3RMaWtlLmpzJztcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlLFxuICAgIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xudmFyIGZ1bmNUb1N0cmluZyA9IGZ1bmNQcm90by50b1N0cmluZztcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqIFVzZWQgdG8gaW5mZXIgdGhlIGBPYmplY3RgIGNvbnN0cnVjdG9yLiAqL1xudmFyIG9iamVjdEN0b3JTdHJpbmcgPSBmdW5jVG9TdHJpbmcuY2FsbChPYmplY3QpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCB0aGF0IGlzLCBhbiBvYmplY3QgY3JlYXRlZCBieSB0aGVcbiAqIGBPYmplY3RgIGNvbnN0cnVjdG9yIG9yIG9uZSB3aXRoIGEgYFtbUHJvdG90eXBlXV1gIG9mIGBudWxsYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuOC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHBsYWluIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYSA9IDE7XG4gKiB9XG4gKlxuICogXy5pc1BsYWluT2JqZWN0KG5ldyBGb28pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc1BsYWluT2JqZWN0KHsgJ3gnOiAwLCAneSc6IDAgfSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1BsYWluT2JqZWN0KE9iamVjdC5jcmVhdGUobnVsbCkpO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3RMaWtlKHZhbHVlKSB8fCBiYXNlR2V0VGFnKHZhbHVlKSAhPSBvYmplY3RUYWcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHByb3RvID0gZ2V0UHJvdG90eXBlKHZhbHVlKTtcbiAgaWYgKHByb3RvID09PSBudWxsKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgdmFyIEN0b3IgPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHByb3RvLCAnY29uc3RydWN0b3InKSAmJiBwcm90by5jb25zdHJ1Y3RvcjtcbiAgcmV0dXJuIHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiYgQ3RvciBpbnN0YW5jZW9mIEN0b3IgJiZcbiAgICBmdW5jVG9TdHJpbmcuY2FsbChDdG9yKSA9PSBvYmplY3RDdG9yU3RyaW5nO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc1BsYWluT2JqZWN0O1xuIiwiaW1wb3J0IGJhc2VHZXRUYWcgZnJvbSAnLi9fYmFzZUdldFRhZy5qcyc7XG5pbXBvcnQgaXNMZW5ndGggZnJvbSAnLi9pc0xlbmd0aC5qcyc7XG5pbXBvcnQgaXNPYmplY3RMaWtlIGZyb20gJy4vaXNPYmplY3RMaWtlLmpzJztcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJyxcbiAgICBhcnJheVRhZyA9ICdbb2JqZWN0IEFycmF5XScsXG4gICAgYm9vbFRhZyA9ICdbb2JqZWN0IEJvb2xlYW5dJyxcbiAgICBkYXRlVGFnID0gJ1tvYmplY3QgRGF0ZV0nLFxuICAgIGVycm9yVGFnID0gJ1tvYmplY3QgRXJyb3JdJyxcbiAgICBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICBudW1iZXJUYWcgPSAnW29iamVjdCBOdW1iZXJdJyxcbiAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJyxcbiAgICByZWdleHBUYWcgPSAnW29iamVjdCBSZWdFeHBdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJyxcbiAgICB3ZWFrTWFwVGFnID0gJ1tvYmplY3QgV2Vha01hcF0nO1xuXG52YXIgYXJyYXlCdWZmZXJUYWcgPSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nLFxuICAgIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJyxcbiAgICBmbG9hdDMyVGFnID0gJ1tvYmplY3QgRmxvYXQzMkFycmF5XScsXG4gICAgZmxvYXQ2NFRhZyA9ICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nLFxuICAgIGludDhUYWcgPSAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICBpbnQxNlRhZyA9ICdbb2JqZWN0IEludDE2QXJyYXldJyxcbiAgICBpbnQzMlRhZyA9ICdbb2JqZWN0IEludDMyQXJyYXldJyxcbiAgICB1aW50OFRhZyA9ICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICB1aW50OENsYW1wZWRUYWcgPSAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nLFxuICAgIHVpbnQxNlRhZyA9ICdbb2JqZWN0IFVpbnQxNkFycmF5XScsXG4gICAgdWludDMyVGFnID0gJ1tvYmplY3QgVWludDMyQXJyYXldJztcblxuLyoqIFVzZWQgdG8gaWRlbnRpZnkgYHRvU3RyaW5nVGFnYCB2YWx1ZXMgb2YgdHlwZWQgYXJyYXlzLiAqL1xudmFyIHR5cGVkQXJyYXlUYWdzID0ge307XG50eXBlZEFycmF5VGFnc1tmbG9hdDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Zsb2F0NjRUYWddID1cbnR5cGVkQXJyYXlUYWdzW2ludDhUYWddID0gdHlwZWRBcnJheVRhZ3NbaW50MTZUYWddID1cbnR5cGVkQXJyYXlUYWdzW2ludDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQ4VGFnXSA9XG50eXBlZEFycmF5VGFnc1t1aW50OENsYW1wZWRUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDE2VGFnXSA9XG50eXBlZEFycmF5VGFnc1t1aW50MzJUYWddID0gdHJ1ZTtcbnR5cGVkQXJyYXlUYWdzW2FyZ3NUYWddID0gdHlwZWRBcnJheVRhZ3NbYXJyYXlUYWddID1cbnR5cGVkQXJyYXlUYWdzW2FycmF5QnVmZmVyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Jvb2xUYWddID1cbnR5cGVkQXJyYXlUYWdzW2RhdGFWaWV3VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2RhdGVUYWddID1cbnR5cGVkQXJyYXlUYWdzW2Vycm9yVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Z1bmNUYWddID1cbnR5cGVkQXJyYXlUYWdzW21hcFRhZ10gPSB0eXBlZEFycmF5VGFnc1tudW1iZXJUYWddID1cbnR5cGVkQXJyYXlUYWdzW29iamVjdFRhZ10gPSB0eXBlZEFycmF5VGFnc1tyZWdleHBUYWddID1cbnR5cGVkQXJyYXlUYWdzW3NldFRhZ10gPSB0eXBlZEFycmF5VGFnc1tzdHJpbmdUYWddID1cbnR5cGVkQXJyYXlUYWdzW3dlYWtNYXBUYWddID0gZmFsc2U7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNUeXBlZEFycmF5YCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHR5cGVkIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc1R5cGVkQXJyYXkodmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiZcbiAgICBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICEhdHlwZWRBcnJheVRhZ3NbYmFzZUdldFRhZyh2YWx1ZSldO1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlSXNUeXBlZEFycmF5O1xuIiwiaW1wb3J0IGZyZWVHbG9iYWwgZnJvbSAnLi9fZnJlZUdsb2JhbC5qcyc7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZXhwb3J0c2AuICovXG52YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYC4gKi9cbnZhciBmcmVlTW9kdWxlID0gZnJlZUV4cG9ydHMgJiYgdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiYgIW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGU7XG5cbi8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG52YXIgbW9kdWxlRXhwb3J0cyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5leHBvcnRzID09PSBmcmVlRXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBwcm9jZXNzYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZVByb2Nlc3MgPSBtb2R1bGVFeHBvcnRzICYmIGZyZWVHbG9iYWwucHJvY2VzcztcblxuLyoqIFVzZWQgdG8gYWNjZXNzIGZhc3RlciBOb2RlLmpzIGhlbHBlcnMuICovXG52YXIgbm9kZVV0aWwgPSAoZnVuY3Rpb24oKSB7XG4gIHRyeSB7XG4gICAgLy8gVXNlIGB1dGlsLnR5cGVzYCBmb3IgTm9kZS5qcyAxMCsuXG4gICAgdmFyIHR5cGVzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLnJlcXVpcmUgJiYgZnJlZU1vZHVsZS5yZXF1aXJlKCd1dGlsJykudHlwZXM7XG5cbiAgICBpZiAodHlwZXMpIHtcbiAgICAgIHJldHVybiB0eXBlcztcbiAgICB9XG5cbiAgICAvLyBMZWdhY3kgYHByb2Nlc3MuYmluZGluZygndXRpbCcpYCBmb3IgTm9kZS5qcyA8IDEwLlxuICAgIHJldHVybiBmcmVlUHJvY2VzcyAmJiBmcmVlUHJvY2Vzcy5iaW5kaW5nICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcoJ3V0aWwnKTtcbiAgfSBjYXRjaCAoZSkge31cbn0oKSk7XG5cbmV4cG9ydCBkZWZhdWx0IG5vZGVVdGlsO1xuIiwiaW1wb3J0IGJhc2VJc1R5cGVkQXJyYXkgZnJvbSAnLi9fYmFzZUlzVHlwZWRBcnJheS5qcyc7XG5pbXBvcnQgYmFzZVVuYXJ5IGZyb20gJy4vX2Jhc2VVbmFyeS5qcyc7XG5pbXBvcnQgbm9kZVV0aWwgZnJvbSAnLi9fbm9kZVV0aWwuanMnO1xuXG4vKiBOb2RlLmpzIGhlbHBlciByZWZlcmVuY2VzLiAqL1xudmFyIG5vZGVJc1R5cGVkQXJyYXkgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc1R5cGVkQXJyYXk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIHR5cGVkIGFycmF5LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1R5cGVkQXJyYXkobmV3IFVpbnQ4QXJyYXkpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNUeXBlZEFycmF5KFtdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc1R5cGVkQXJyYXkgPSBub2RlSXNUeXBlZEFycmF5ID8gYmFzZVVuYXJ5KG5vZGVJc1R5cGVkQXJyYXkpIDogYmFzZUlzVHlwZWRBcnJheTtcblxuZXhwb3J0IGRlZmF1bHQgaXNUeXBlZEFycmF5O1xuIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51bmFyeWAgd2l0aG91dCBzdXBwb3J0IGZvciBzdG9yaW5nIG1ldGFkYXRhLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYXAgYXJndW1lbnRzIGZvci5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhcHBlZCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZVVuYXJ5KGZ1bmMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmModmFsdWUpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlVW5hcnk7XG4iLCIvKipcbiAqIEdldHMgdGhlIHZhbHVlIGF0IGBrZXlgLCB1bmxlc3MgYGtleWAgaXMgXCJfX3Byb3RvX19cIiBvciBcImNvbnN0cnVjdG9yXCIuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHByb3BlcnR5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBzYWZlR2V0KG9iamVjdCwga2V5KSB7XG4gIGlmIChrZXkgPT09ICdjb25zdHJ1Y3RvcicgJiYgdHlwZW9mIG9iamVjdFtrZXldID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGtleSA9PSAnX19wcm90b19fJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHJldHVybiBvYmplY3Rba2V5XTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc2FmZUdldDtcbiIsImltcG9ydCBiYXNlQXNzaWduVmFsdWUgZnJvbSAnLi9fYmFzZUFzc2lnblZhbHVlLmpzJztcbmltcG9ydCBlcSBmcm9tICcuL2VxLmpzJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBBc3NpZ25zIGB2YWx1ZWAgdG8gYGtleWAgb2YgYG9iamVjdGAgaWYgdGhlIGV4aXN0aW5nIHZhbHVlIGlzIG5vdCBlcXVpdmFsZW50XG4gKiB1c2luZyBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gKi9cbmZ1bmN0aW9uIGFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICB2YXIgb2JqVmFsdWUgPSBvYmplY3Rba2V5XTtcbiAgaWYgKCEoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiYgZXEob2JqVmFsdWUsIHZhbHVlKSkgfHxcbiAgICAgICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpKSB7XG4gICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgYXNzaWduVmFsdWU7XG4iLCIvKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IHVuc2lnbmVkIGludGVnZXIgdmFsdWVzLiAqL1xudmFyIHJlSXNVaW50ID0gL14oPzowfFsxLTldXFxkKikkLztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgaW5kZXguXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9TUFYX1NBRkVfSU5URUdFUl0gVGhlIHVwcGVyIGJvdW5kcyBvZiBhIHZhbGlkIGluZGV4LlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBpbmRleCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0luZGV4KHZhbHVlLCBsZW5ndGgpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIGxlbmd0aCA9IGxlbmd0aCA9PSBudWxsID8gTUFYX1NBRkVfSU5URUdFUiA6IGxlbmd0aDtcblxuICByZXR1cm4gISFsZW5ndGggJiZcbiAgICAodHlwZSA9PSAnbnVtYmVyJyB8fFxuICAgICAgKHR5cGUgIT0gJ3N5bWJvbCcgJiYgcmVJc1VpbnQudGVzdCh2YWx1ZSkpKSAmJlxuICAgICAgICAodmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8IGxlbmd0aCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzSW5kZXg7XG4iLCJpbXBvcnQgYmFzZVRpbWVzIGZyb20gJy4vX2Jhc2VUaW1lcy5qcyc7XG5pbXBvcnQgaXNBcmd1bWVudHMgZnJvbSAnLi9pc0FyZ3VtZW50cy5qcyc7XG5pbXBvcnQgaXNBcnJheSBmcm9tICcuL2lzQXJyYXkuanMnO1xuaW1wb3J0IGlzQnVmZmVyIGZyb20gJy4vaXNCdWZmZXIuanMnO1xuaW1wb3J0IGlzSW5kZXggZnJvbSAnLi9faXNJbmRleC5qcyc7XG5pbXBvcnQgaXNUeXBlZEFycmF5IGZyb20gJy4vaXNUeXBlZEFycmF5LmpzJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIHRoZSBhcnJheS1saWtlIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtib29sZWFufSBpbmhlcml0ZWQgU3BlY2lmeSByZXR1cm5pbmcgaW5oZXJpdGVkIHByb3BlcnR5IG5hbWVzLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gYXJyYXlMaWtlS2V5cyh2YWx1ZSwgaW5oZXJpdGVkKSB7XG4gIHZhciBpc0FyciA9IGlzQXJyYXkodmFsdWUpLFxuICAgICAgaXNBcmcgPSAhaXNBcnIgJiYgaXNBcmd1bWVudHModmFsdWUpLFxuICAgICAgaXNCdWZmID0gIWlzQXJyICYmICFpc0FyZyAmJiBpc0J1ZmZlcih2YWx1ZSksXG4gICAgICBpc1R5cGUgPSAhaXNBcnIgJiYgIWlzQXJnICYmICFpc0J1ZmYgJiYgaXNUeXBlZEFycmF5KHZhbHVlKSxcbiAgICAgIHNraXBJbmRleGVzID0gaXNBcnIgfHwgaXNBcmcgfHwgaXNCdWZmIHx8IGlzVHlwZSxcbiAgICAgIHJlc3VsdCA9IHNraXBJbmRleGVzID8gYmFzZVRpbWVzKHZhbHVlLmxlbmd0aCwgU3RyaW5nKSA6IFtdLFxuICAgICAgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aDtcblxuICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICBpZiAoKGluaGVyaXRlZCB8fCBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBrZXkpKSAmJlxuICAgICAgICAhKHNraXBJbmRleGVzICYmIChcbiAgICAgICAgICAgLy8gU2FmYXJpIDkgaGFzIGVudW1lcmFibGUgYGFyZ3VtZW50cy5sZW5ndGhgIGluIHN0cmljdCBtb2RlLlxuICAgICAgICAgICBrZXkgPT0gJ2xlbmd0aCcgfHxcbiAgICAgICAgICAgLy8gTm9kZS5qcyAwLjEwIGhhcyBlbnVtZXJhYmxlIG5vbi1pbmRleCBwcm9wZXJ0aWVzIG9uIGJ1ZmZlcnMuXG4gICAgICAgICAgIChpc0J1ZmYgJiYgKGtleSA9PSAnb2Zmc2V0JyB8fCBrZXkgPT0gJ3BhcmVudCcpKSB8fFxuICAgICAgICAgICAvLyBQaGFudG9tSlMgMiBoYXMgZW51bWVyYWJsZSBub24taW5kZXggcHJvcGVydGllcyBvbiB0eXBlZCBhcnJheXMuXG4gICAgICAgICAgIChpc1R5cGUgJiYgKGtleSA9PSAnYnVmZmVyJyB8fCBrZXkgPT0gJ2J5dGVMZW5ndGgnIHx8IGtleSA9PSAnYnl0ZU9mZnNldCcpKSB8fFxuICAgICAgICAgICAvLyBTa2lwIGluZGV4IHByb3BlcnRpZXMuXG4gICAgICAgICAgIGlzSW5kZXgoa2V5LCBsZW5ndGgpXG4gICAgICAgICkpKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBhcnJheUxpa2VLZXlzO1xuIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50aW1lc2Agd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzXG4gKiBvciBtYXggYXJyYXkgbGVuZ3RoIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiB0aW1lcyB0byBpbnZva2UgYGl0ZXJhdGVlYC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHJlc3VsdHMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VUaW1lcyhuLCBpdGVyYXRlZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IEFycmF5KG4pO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbikge1xuICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShpbmRleCk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZVRpbWVzO1xuIiwiaW1wb3J0IGlzT2JqZWN0IGZyb20gJy4vaXNPYmplY3QuanMnO1xuaW1wb3J0IGlzUHJvdG90eXBlIGZyb20gJy4vX2lzUHJvdG90eXBlLmpzJztcbmltcG9ydCBuYXRpdmVLZXlzSW4gZnJvbSAnLi9fbmF0aXZlS2V5c0luLmpzJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5rZXlzSW5gIHdoaWNoIGRvZXNuJ3QgdHJlYXQgc3BhcnNlIGFycmF5cyBhcyBkZW5zZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gYmFzZUtleXNJbihvYmplY3QpIHtcbiAgaWYgKCFpc09iamVjdChvYmplY3QpKSB7XG4gICAgcmV0dXJuIG5hdGl2ZUtleXNJbihvYmplY3QpO1xuICB9XG4gIHZhciBpc1Byb3RvID0gaXNQcm90b3R5cGUob2JqZWN0KSxcbiAgICAgIHJlc3VsdCA9IFtdO1xuXG4gIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICBpZiAoIShrZXkgPT0gJ2NvbnN0cnVjdG9yJyAmJiAoaXNQcm90byB8fCAhaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpKSkge1xuICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUtleXNJbjtcbiIsIi8qKlxuICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlXG4gKiBbYE9iamVjdC5rZXlzYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LmtleXMpXG4gKiBleGNlcHQgdGhhdCBpdCBpbmNsdWRlcyBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0aWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBuYXRpdmVLZXlzSW4ob2JqZWN0KSB7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgaWYgKG9iamVjdCAhPSBudWxsKSB7XG4gICAgZm9yICh2YXIga2V5IGluIE9iamVjdChvYmplY3QpKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBuYXRpdmVLZXlzSW47XG4iLCJpbXBvcnQgYXJyYXlMaWtlS2V5cyBmcm9tICcuL19hcnJheUxpa2VLZXlzLmpzJztcbmltcG9ydCBiYXNlS2V5c0luIGZyb20gJy4vX2Jhc2VLZXlzSW4uanMnO1xuaW1wb3J0IGlzQXJyYXlMaWtlIGZyb20gJy4vaXNBcnJheUxpa2UuanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgYG9iamVjdGAuXG4gKlxuICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gRm9vKCkge1xuICogICB0aGlzLmEgPSAxO1xuICogICB0aGlzLmIgPSAyO1xuICogfVxuICpcbiAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gKlxuICogXy5rZXlzSW4obmV3IEZvbyk7XG4gKiAvLyA9PiBbJ2EnLCAnYicsICdjJ10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAqL1xuZnVuY3Rpb24ga2V5c0luKG9iamVjdCkge1xuICByZXR1cm4gaXNBcnJheUxpa2Uob2JqZWN0KSA/IGFycmF5TGlrZUtleXMob2JqZWN0LCB0cnVlKSA6IGJhc2VLZXlzSW4ob2JqZWN0KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQga2V5c0luO1xuIiwiaW1wb3J0IGNvcHlPYmplY3QgZnJvbSAnLi9fY29weU9iamVjdC5qcyc7XG5pbXBvcnQga2V5c0luIGZyb20gJy4va2V5c0luLmpzJztcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgcGxhaW4gb2JqZWN0IGZsYXR0ZW5pbmcgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nXG4gKiBrZXllZCBwcm9wZXJ0aWVzIG9mIGB2YWx1ZWAgdG8gb3duIHByb3BlcnRpZXMgb2YgdGhlIHBsYWluIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBwbGFpbiBvYmplY3QuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5iID0gMjtcbiAqIH1cbiAqXG4gKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICpcbiAqIF8uYXNzaWduKHsgJ2EnOiAxIH0sIG5ldyBGb28pO1xuICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gKlxuICogXy5hc3NpZ24oeyAnYSc6IDEgfSwgXy50b1BsYWluT2JqZWN0KG5ldyBGb28pKTtcbiAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMyB9XG4gKi9cbmZ1bmN0aW9uIHRvUGxhaW5PYmplY3QodmFsdWUpIHtcbiAgcmV0dXJuIGNvcHlPYmplY3QodmFsdWUsIGtleXNJbih2YWx1ZSkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCB0b1BsYWluT2JqZWN0O1xuIiwiaW1wb3J0IGFzc2lnblZhbHVlIGZyb20gJy4vX2Fzc2lnblZhbHVlLmpzJztcbmltcG9ydCBiYXNlQXNzaWduVmFsdWUgZnJvbSAnLi9fYmFzZUFzc2lnblZhbHVlLmpzJztcblxuLyoqXG4gKiBDb3BpZXMgcHJvcGVydGllcyBvZiBgc291cmNlYCB0byBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tLlxuICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IGlkZW50aWZpZXJzIHRvIGNvcHkuXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgdG8uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb3BpZWQgdmFsdWVzLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gY29weU9iamVjdChzb3VyY2UsIHByb3BzLCBvYmplY3QsIGN1c3RvbWl6ZXIpIHtcbiAgdmFyIGlzTmV3ID0gIW9iamVjdDtcbiAgb2JqZWN0IHx8IChvYmplY3QgPSB7fSk7XG5cbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIga2V5ID0gcHJvcHNbaW5kZXhdO1xuXG4gICAgdmFyIG5ld1ZhbHVlID0gY3VzdG9taXplclxuICAgICAgPyBjdXN0b21pemVyKG9iamVjdFtrZXldLCBzb3VyY2Vba2V5XSwga2V5LCBvYmplY3QsIHNvdXJjZSlcbiAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgaWYgKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIG5ld1ZhbHVlID0gc291cmNlW2tleV07XG4gICAgfVxuICAgIGlmIChpc05ldykge1xuICAgICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBvYmplY3Q7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvcHlPYmplY3Q7XG4iLCJpbXBvcnQgYXNzaWduTWVyZ2VWYWx1ZSBmcm9tICcuL19hc3NpZ25NZXJnZVZhbHVlLmpzJztcbmltcG9ydCBjbG9uZUJ1ZmZlciBmcm9tICcuL19jbG9uZUJ1ZmZlci5qcyc7XG5pbXBvcnQgY2xvbmVUeXBlZEFycmF5IGZyb20gJy4vX2Nsb25lVHlwZWRBcnJheS5qcyc7XG5pbXBvcnQgY29weUFycmF5IGZyb20gJy4vX2NvcHlBcnJheS5qcyc7XG5pbXBvcnQgaW5pdENsb25lT2JqZWN0IGZyb20gJy4vX2luaXRDbG9uZU9iamVjdC5qcyc7XG5pbXBvcnQgaXNBcmd1bWVudHMgZnJvbSAnLi9pc0FyZ3VtZW50cy5qcyc7XG5pbXBvcnQgaXNBcnJheSBmcm9tICcuL2lzQXJyYXkuanMnO1xuaW1wb3J0IGlzQXJyYXlMaWtlT2JqZWN0IGZyb20gJy4vaXNBcnJheUxpa2VPYmplY3QuanMnO1xuaW1wb3J0IGlzQnVmZmVyIGZyb20gJy4vaXNCdWZmZXIuanMnO1xuaW1wb3J0IGlzRnVuY3Rpb24gZnJvbSAnLi9pc0Z1bmN0aW9uLmpzJztcbmltcG9ydCBpc09iamVjdCBmcm9tICcuL2lzT2JqZWN0LmpzJztcbmltcG9ydCBpc1BsYWluT2JqZWN0IGZyb20gJy4vaXNQbGFpbk9iamVjdC5qcyc7XG5pbXBvcnQgaXNUeXBlZEFycmF5IGZyb20gJy4vaXNUeXBlZEFycmF5LmpzJztcbmltcG9ydCBzYWZlR2V0IGZyb20gJy4vX3NhZmVHZXQuanMnO1xuaW1wb3J0IHRvUGxhaW5PYmplY3QgZnJvbSAnLi90b1BsYWluT2JqZWN0LmpzJztcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VNZXJnZWAgZm9yIGFycmF5cyBhbmQgb2JqZWN0cyB3aGljaCBwZXJmb3Jtc1xuICogZGVlcCBtZXJnZXMgYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cyBlbmFibGluZyBvYmplY3RzIHdpdGggY2lyY3VsYXJcbiAqIHJlZmVyZW5jZXMgdG8gYmUgbWVyZ2VkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBtZXJnZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBzcmNJbmRleCBUaGUgaW5kZXggb2YgYHNvdXJjZWAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBtZXJnZUZ1bmMgVGhlIGZ1bmN0aW9uIHRvIG1lcmdlIHZhbHVlcy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgc291cmNlIHZhbHVlcyBhbmQgdGhlaXIgbWVyZ2VkXG4gKiAgY291bnRlcnBhcnRzLlxuICovXG5mdW5jdGlvbiBiYXNlTWVyZ2VEZWVwKG9iamVjdCwgc291cmNlLCBrZXksIHNyY0luZGV4LCBtZXJnZUZ1bmMsIGN1c3RvbWl6ZXIsIHN0YWNrKSB7XG4gIHZhciBvYmpWYWx1ZSA9IHNhZmVHZXQob2JqZWN0LCBrZXkpLFxuICAgICAgc3JjVmFsdWUgPSBzYWZlR2V0KHNvdXJjZSwga2V5KSxcbiAgICAgIHN0YWNrZWQgPSBzdGFjay5nZXQoc3JjVmFsdWUpO1xuXG4gIGlmIChzdGFja2VkKSB7XG4gICAgYXNzaWduTWVyZ2VWYWx1ZShvYmplY3QsIGtleSwgc3RhY2tlZCk7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBuZXdWYWx1ZSA9IGN1c3RvbWl6ZXJcbiAgICA/IGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlLCAoa2V5ICsgJycpLCBvYmplY3QsIHNvdXJjZSwgc3RhY2spXG4gICAgOiB1bmRlZmluZWQ7XG5cbiAgdmFyIGlzQ29tbW9uID0gbmV3VmFsdWUgPT09IHVuZGVmaW5lZDtcblxuICBpZiAoaXNDb21tb24pIHtcbiAgICB2YXIgaXNBcnIgPSBpc0FycmF5KHNyY1ZhbHVlKSxcbiAgICAgICAgaXNCdWZmID0gIWlzQXJyICYmIGlzQnVmZmVyKHNyY1ZhbHVlKSxcbiAgICAgICAgaXNUeXBlZCA9ICFpc0FyciAmJiAhaXNCdWZmICYmIGlzVHlwZWRBcnJheShzcmNWYWx1ZSk7XG5cbiAgICBuZXdWYWx1ZSA9IHNyY1ZhbHVlO1xuICAgIGlmIChpc0FyciB8fCBpc0J1ZmYgfHwgaXNUeXBlZCkge1xuICAgICAgaWYgKGlzQXJyYXkob2JqVmFsdWUpKSB7XG4gICAgICAgIG5ld1ZhbHVlID0gb2JqVmFsdWU7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChpc0FycmF5TGlrZU9iamVjdChvYmpWYWx1ZSkpIHtcbiAgICAgICAgbmV3VmFsdWUgPSBjb3B5QXJyYXkob2JqVmFsdWUpO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoaXNCdWZmKSB7XG4gICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgIG5ld1ZhbHVlID0gY2xvbmVCdWZmZXIoc3JjVmFsdWUsIHRydWUpO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoaXNUeXBlZCkge1xuICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICBuZXdWYWx1ZSA9IGNsb25lVHlwZWRBcnJheShzcmNWYWx1ZSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgbmV3VmFsdWUgPSBbXTtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoaXNQbGFpbk9iamVjdChzcmNWYWx1ZSkgfHwgaXNBcmd1bWVudHMoc3JjVmFsdWUpKSB7XG4gICAgICBuZXdWYWx1ZSA9IG9ialZhbHVlO1xuICAgICAgaWYgKGlzQXJndW1lbnRzKG9ialZhbHVlKSkge1xuICAgICAgICBuZXdWYWx1ZSA9IHRvUGxhaW5PYmplY3Qob2JqVmFsdWUpO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoIWlzT2JqZWN0KG9ialZhbHVlKSB8fCBpc0Z1bmN0aW9uKG9ialZhbHVlKSkge1xuICAgICAgICBuZXdWYWx1ZSA9IGluaXRDbG9uZU9iamVjdChzcmNWYWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICB9XG4gIH1cbiAgaWYgKGlzQ29tbW9uKSB7XG4gICAgLy8gUmVjdXJzaXZlbHkgbWVyZ2Ugb2JqZWN0cyBhbmQgYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgc3RhY2suc2V0KHNyY1ZhbHVlLCBuZXdWYWx1ZSk7XG4gICAgbWVyZ2VGdW5jKG5ld1ZhbHVlLCBzcmNWYWx1ZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIsIHN0YWNrKTtcbiAgICBzdGFja1snZGVsZXRlJ10oc3JjVmFsdWUpO1xuICB9XG4gIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZU1lcmdlRGVlcDtcbiIsImltcG9ydCBpc0FycmF5TGlrZSBmcm9tICcuL2lzQXJyYXlMaWtlLmpzJztcbmltcG9ydCBpc09iamVjdExpa2UgZnJvbSAnLi9pc09iamVjdExpa2UuanMnO1xuXG4vKipcbiAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaXNBcnJheUxpa2VgIGV4Y2VwdCB0aGF0IGl0IGFsc28gY2hlY2tzIGlmIGB2YWx1ZWBcbiAqIGlzIGFuIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheS1saWtlIG9iamVjdCxcbiAqICBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcnJheUxpa2VPYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlT2JqZWN0KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2VPYmplY3QoJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXlMaWtlT2JqZWN0KF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5TGlrZU9iamVjdCh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBpc0FycmF5TGlrZSh2YWx1ZSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzQXJyYXlMaWtlT2JqZWN0O1xuIiwiLyoqXG4gKiBDb3BpZXMgdGhlIHZhbHVlcyBvZiBgc291cmNlYCB0byBgYXJyYXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBzb3VyY2UgVGhlIGFycmF5IHRvIGNvcHkgdmFsdWVzIGZyb20uXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXk9W11dIFRoZSBhcnJheSB0byBjb3B5IHZhbHVlcyB0by5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICovXG5mdW5jdGlvbiBjb3B5QXJyYXkoc291cmNlLCBhcnJheSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHNvdXJjZS5sZW5ndGg7XG5cbiAgYXJyYXkgfHwgKGFycmF5ID0gQXJyYXkobGVuZ3RoKSk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgYXJyYXlbaW5kZXhdID0gc291cmNlW2luZGV4XTtcbiAgfVxuICByZXR1cm4gYXJyYXk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvcHlBcnJheTtcbiIsImltcG9ydCBiYXNlQ3JlYXRlIGZyb20gJy4vX2Jhc2VDcmVhdGUuanMnO1xuaW1wb3J0IGdldFByb3RvdHlwZSBmcm9tICcuL19nZXRQcm90b3R5cGUuanMnO1xuaW1wb3J0IGlzUHJvdG90eXBlIGZyb20gJy4vX2lzUHJvdG90eXBlLmpzJztcblxuLyoqXG4gKiBJbml0aWFsaXplcyBhbiBvYmplY3QgY2xvbmUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGluaXRpYWxpemVkIGNsb25lLlxuICovXG5mdW5jdGlvbiBpbml0Q2xvbmVPYmplY3Qob2JqZWN0KSB7XG4gIHJldHVybiAodHlwZW9mIG9iamVjdC5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmICFpc1Byb3RvdHlwZShvYmplY3QpKVxuICAgID8gYmFzZUNyZWF0ZShnZXRQcm90b3R5cGUob2JqZWN0KSlcbiAgICA6IHt9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBpbml0Q2xvbmVPYmplY3Q7XG4iLCJpbXBvcnQgU3RhY2sgZnJvbSAnLi9fU3RhY2suanMnO1xuaW1wb3J0IGFzc2lnbk1lcmdlVmFsdWUgZnJvbSAnLi9fYXNzaWduTWVyZ2VWYWx1ZS5qcyc7XG5pbXBvcnQgYmFzZUZvciBmcm9tICcuL19iYXNlRm9yLmpzJztcbmltcG9ydCBiYXNlTWVyZ2VEZWVwIGZyb20gJy4vX2Jhc2VNZXJnZURlZXAuanMnO1xuaW1wb3J0IGlzT2JqZWN0IGZyb20gJy4vaXNPYmplY3QuanMnO1xuaW1wb3J0IGtleXNJbiBmcm9tICcuL2tleXNJbi5qcyc7XG5pbXBvcnQgc2FmZUdldCBmcm9tICcuL19zYWZlR2V0LmpzJztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tZXJnZWAgd2l0aG91dCBzdXBwb3J0IGZvciBtdWx0aXBsZSBzb3VyY2VzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICogQHBhcmFtIHtudW1iZXJ9IHNyY0luZGV4IFRoZSBpbmRleCBvZiBgc291cmNlYC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIG1lcmdlZCB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIHNvdXJjZSB2YWx1ZXMgYW5kIHRoZWlyIG1lcmdlZFxuICogIGNvdW50ZXJwYXJ0cy5cbiAqL1xuZnVuY3Rpb24gYmFzZU1lcmdlKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCwgY3VzdG9taXplciwgc3RhY2spIHtcbiAgaWYgKG9iamVjdCA9PT0gc291cmNlKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGJhc2VGb3Ioc291cmNlLCBmdW5jdGlvbihzcmNWYWx1ZSwga2V5KSB7XG4gICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICBpZiAoaXNPYmplY3Qoc3JjVmFsdWUpKSB7XG4gICAgICBiYXNlTWVyZ2VEZWVwKG9iamVjdCwgc291cmNlLCBrZXksIHNyY0luZGV4LCBiYXNlTWVyZ2UsIGN1c3RvbWl6ZXIsIHN0YWNrKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB2YXIgbmV3VmFsdWUgPSBjdXN0b21pemVyXG4gICAgICAgID8gY3VzdG9taXplcihzYWZlR2V0KG9iamVjdCwga2V5KSwgc3JjVmFsdWUsIChrZXkgKyAnJyksIG9iamVjdCwgc291cmNlLCBzdGFjaylcbiAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgIGlmIChuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG5ld1ZhbHVlID0gc3JjVmFsdWU7XG4gICAgICB9XG4gICAgICBhc3NpZ25NZXJnZVZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgfVxuICB9LCBrZXlzSW4pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlTWVyZ2U7XG4iLCIvKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgdGhlIGZpcnN0IGFyZ3VtZW50IGl0IHJlY2VpdmVzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcGFyYW0geyp9IHZhbHVlIEFueSB2YWx1ZS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIGB2YWx1ZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICpcbiAqIGNvbnNvbGUubG9nKF8uaWRlbnRpdHkob2JqZWN0KSA9PT0gb2JqZWN0KTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gaWRlbnRpdHkodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpZGVudGl0eTtcbiIsIi8qKlxuICogQSBmYXN0ZXIgYWx0ZXJuYXRpdmUgdG8gYEZ1bmN0aW9uI2FwcGx5YCwgdGhpcyBmdW5jdGlvbiBpbnZva2VzIGBmdW5jYFxuICogd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgYHRoaXNBcmdgIGFuZCB0aGUgYXJndW1lbnRzIG9mIGBhcmdzYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaW52b2tlLlxuICogQHBhcmFtIHsqfSB0aGlzQXJnIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gKiBAcGFyYW0ge0FycmF5fSBhcmdzIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIGBmdW5jYCB3aXRoLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc3VsdCBvZiBgZnVuY2AuXG4gKi9cbmZ1bmN0aW9uIGFwcGx5KGZ1bmMsIHRoaXNBcmcsIGFyZ3MpIHtcbiAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgIGNhc2UgMDogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnKTtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgYXJnc1swXSk7XG4gICAgY2FzZSAyOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgfVxuICByZXR1cm4gZnVuYy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYXBwbHk7XG4iLCJpbXBvcnQgYXBwbHkgZnJvbSAnLi9fYXBwbHkuanMnO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlTWF4ID0gTWF0aC5tYXg7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlUmVzdGAgd2hpY2ggdHJhbnNmb3JtcyB0aGUgcmVzdCBhcnJheS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9ZnVuYy5sZW5ndGgtMV0gVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSByZXN0IHBhcmFtZXRlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHRyYW5zZm9ybSBUaGUgcmVzdCBhcnJheSB0cmFuc2Zvcm0uXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gb3ZlclJlc3QoZnVuYywgc3RhcnQsIHRyYW5zZm9ybSkge1xuICBzdGFydCA9IG5hdGl2ZU1heChzdGFydCA9PT0gdW5kZWZpbmVkID8gKGZ1bmMubGVuZ3RoIC0gMSkgOiBzdGFydCwgMCk7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWF4KGFyZ3MubGVuZ3RoIC0gc3RhcnQsIDApLFxuICAgICAgICBhcnJheSA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgYXJyYXlbaW5kZXhdID0gYXJnc1tzdGFydCArIGluZGV4XTtcbiAgICB9XG4gICAgaW5kZXggPSAtMTtcbiAgICB2YXIgb3RoZXJBcmdzID0gQXJyYXkoc3RhcnQgKyAxKTtcbiAgICB3aGlsZSAoKytpbmRleCA8IHN0YXJ0KSB7XG4gICAgICBvdGhlckFyZ3NbaW5kZXhdID0gYXJnc1tpbmRleF07XG4gICAgfVxuICAgIG90aGVyQXJnc1tzdGFydF0gPSB0cmFuc2Zvcm0oYXJyYXkpO1xuICAgIHJldHVybiBhcHBseShmdW5jLCB0aGlzLCBvdGhlckFyZ3MpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBvdmVyUmVzdDtcbiIsImltcG9ydCBjb25zdGFudCBmcm9tICcuL2NvbnN0YW50LmpzJztcbmltcG9ydCBkZWZpbmVQcm9wZXJ0eSBmcm9tICcuL19kZWZpbmVQcm9wZXJ0eS5qcyc7XG5pbXBvcnQgaWRlbnRpdHkgZnJvbSAnLi9pZGVudGl0eS5qcyc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYHNldFRvU3RyaW5nYCB3aXRob3V0IHN1cHBvcnQgZm9yIGhvdCBsb29wIHNob3J0aW5nLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBzdHJpbmcgVGhlIGB0b1N0cmluZ2AgcmVzdWx0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBmdW5jYC5cbiAqL1xudmFyIGJhc2VTZXRUb1N0cmluZyA9ICFkZWZpbmVQcm9wZXJ0eSA/IGlkZW50aXR5IDogZnVuY3Rpb24oZnVuYywgc3RyaW5nKSB7XG4gIHJldHVybiBkZWZpbmVQcm9wZXJ0eShmdW5jLCAndG9TdHJpbmcnLCB7XG4gICAgJ2NvbmZpZ3VyYWJsZSc6IHRydWUsXG4gICAgJ2VudW1lcmFibGUnOiBmYWxzZSxcbiAgICAndmFsdWUnOiBjb25zdGFudChzdHJpbmcpLFxuICAgICd3cml0YWJsZSc6IHRydWVcbiAgfSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBiYXNlU2V0VG9TdHJpbmc7XG4iLCIvKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYHZhbHVlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDIuNC4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcmV0dXJuIGZyb20gdGhlIG5ldyBmdW5jdGlvbi5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNvbnN0YW50IGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0cyA9IF8udGltZXMoMiwgXy5jb25zdGFudCh7ICdhJzogMSB9KSk7XG4gKlxuICogY29uc29sZS5sb2cob2JqZWN0cyk7XG4gKiAvLyA9PiBbeyAnYSc6IDEgfSwgeyAnYSc6IDEgfV1cbiAqXG4gKiBjb25zb2xlLmxvZyhvYmplY3RzWzBdID09PSBvYmplY3RzWzFdKTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gY29uc3RhbnQodmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY29uc3RhbnQ7XG4iLCIvKiogVXNlZCB0byBkZXRlY3QgaG90IGZ1bmN0aW9ucyBieSBudW1iZXIgb2YgY2FsbHMgd2l0aGluIGEgc3BhbiBvZiBtaWxsaXNlY29uZHMuICovXG52YXIgSE9UX0NPVU5UID0gODAwLFxuICAgIEhPVF9TUEFOID0gMTY7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVOb3cgPSBEYXRlLm5vdztcblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCdsbCBzaG9ydCBvdXQgYW5kIGludm9rZSBgaWRlbnRpdHlgIGluc3RlYWRcbiAqIG9mIGBmdW5jYCB3aGVuIGl0J3MgY2FsbGVkIGBIT1RfQ09VTlRgIG9yIG1vcmUgdGltZXMgaW4gYEhPVF9TUEFOYFxuICogbWlsbGlzZWNvbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZXN0cmljdC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNob3J0YWJsZSBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gc2hvcnRPdXQoZnVuYykge1xuICB2YXIgY291bnQgPSAwLFxuICAgICAgbGFzdENhbGxlZCA9IDA7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdGFtcCA9IG5hdGl2ZU5vdygpLFxuICAgICAgICByZW1haW5pbmcgPSBIT1RfU1BBTiAtIChzdGFtcCAtIGxhc3RDYWxsZWQpO1xuXG4gICAgbGFzdENhbGxlZCA9IHN0YW1wO1xuICAgIGlmIChyZW1haW5pbmcgPiAwKSB7XG4gICAgICBpZiAoKytjb3VudCA+PSBIT1RfQ09VTlQpIHtcbiAgICAgICAgcmV0dXJuIGFyZ3VtZW50c1swXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY291bnQgPSAwO1xuICAgIH1cbiAgICByZXR1cm4gZnVuYy5hcHBseSh1bmRlZmluZWQsIGFyZ3VtZW50cyk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IHNob3J0T3V0O1xuIiwiaW1wb3J0IGJhc2VTZXRUb1N0cmluZyBmcm9tICcuL19iYXNlU2V0VG9TdHJpbmcuanMnO1xuaW1wb3J0IHNob3J0T3V0IGZyb20gJy4vX3Nob3J0T3V0LmpzJztcblxuLyoqXG4gKiBTZXRzIHRoZSBgdG9TdHJpbmdgIG1ldGhvZCBvZiBgZnVuY2AgdG8gcmV0dXJuIGBzdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBzdHJpbmcgVGhlIGB0b1N0cmluZ2AgcmVzdWx0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBmdW5jYC5cbiAqL1xudmFyIHNldFRvU3RyaW5nID0gc2hvcnRPdXQoYmFzZVNldFRvU3RyaW5nKTtcblxuZXhwb3J0IGRlZmF1bHQgc2V0VG9TdHJpbmc7XG4iLCJpbXBvcnQgaWRlbnRpdHkgZnJvbSAnLi9pZGVudGl0eS5qcyc7XG5pbXBvcnQgb3ZlclJlc3QgZnJvbSAnLi9fb3ZlclJlc3QuanMnO1xuaW1wb3J0IHNldFRvU3RyaW5nIGZyb20gJy4vX3NldFRvU3RyaW5nLmpzJztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yZXN0YCB3aGljaCBkb2Vzbid0IHZhbGlkYXRlIG9yIGNvZXJjZSBhcmd1bWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PWZ1bmMubGVuZ3RoLTFdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgcmVzdCBwYXJhbWV0ZXIuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZVJlc3QoZnVuYywgc3RhcnQpIHtcbiAgcmV0dXJuIHNldFRvU3RyaW5nKG92ZXJSZXN0KGZ1bmMsIHN0YXJ0LCBpZGVudGl0eSksIGZ1bmMgKyAnJyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VSZXN0O1xuIiwiaW1wb3J0IGJhc2VNZXJnZSBmcm9tICcuL19iYXNlTWVyZ2UuanMnO1xuaW1wb3J0IGNyZWF0ZUFzc2lnbmVyIGZyb20gJy4vX2NyZWF0ZUFzc2lnbmVyLmpzJztcblxuLyoqXG4gKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmFzc2lnbmAgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgbWVyZ2VzIG93biBhbmRcbiAqIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIHNvdXJjZSBvYmplY3RzIGludG8gdGhlXG4gKiBkZXN0aW5hdGlvbiBvYmplY3QuIFNvdXJjZSBwcm9wZXJ0aWVzIHRoYXQgcmVzb2x2ZSB0byBgdW5kZWZpbmVkYCBhcmVcbiAqIHNraXBwZWQgaWYgYSBkZXN0aW5hdGlvbiB2YWx1ZSBleGlzdHMuIEFycmF5IGFuZCBwbGFpbiBvYmplY3QgcHJvcGVydGllc1xuICogYXJlIG1lcmdlZCByZWN1cnNpdmVseS4gT3RoZXIgb2JqZWN0cyBhbmQgdmFsdWUgdHlwZXMgYXJlIG92ZXJyaWRkZW4gYnlcbiAqIGFzc2lnbm1lbnQuIFNvdXJjZSBvYmplY3RzIGFyZSBhcHBsaWVkIGZyb20gbGVmdCB0byByaWdodC4gU3Vic2VxdWVudFxuICogc291cmNlcyBvdmVyd3JpdGUgcHJvcGVydHkgYXNzaWdubWVudHMgb2YgcHJldmlvdXMgc291cmNlcy5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuNS4wXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZXNdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7XG4gKiAgICdhJzogW3sgJ2InOiAyIH0sIHsgJ2QnOiA0IH1dXG4gKiB9O1xuICpcbiAqIHZhciBvdGhlciA9IHtcbiAqICAgJ2EnOiBbeyAnYyc6IDMgfSwgeyAnZSc6IDUgfV1cbiAqIH07XG4gKlxuICogXy5tZXJnZShvYmplY3QsIG90aGVyKTtcbiAqIC8vID0+IHsgJ2EnOiBbeyAnYic6IDIsICdjJzogMyB9LCB7ICdkJzogNCwgJ2UnOiA1IH1dIH1cbiAqL1xudmFyIG1lcmdlID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4KSB7XG4gIGJhc2VNZXJnZShvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IG1lcmdlO1xuIiwiaW1wb3J0IGJhc2VSZXN0IGZyb20gJy4vX2Jhc2VSZXN0LmpzJztcbmltcG9ydCBpc0l0ZXJhdGVlQ2FsbCBmcm9tICcuL19pc0l0ZXJhdGVlQ2FsbC5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8uYXNzaWduYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gYXNzaWduZXIgVGhlIGZ1bmN0aW9uIHRvIGFzc2lnbiB2YWx1ZXMuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhc3NpZ25lciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQXNzaWduZXIoYXNzaWduZXIpIHtcbiAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKG9iamVjdCwgc291cmNlcykge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBzb3VyY2VzLmxlbmd0aCxcbiAgICAgICAgY3VzdG9taXplciA9IGxlbmd0aCA+IDEgPyBzb3VyY2VzW2xlbmd0aCAtIDFdIDogdW5kZWZpbmVkLFxuICAgICAgICBndWFyZCA9IGxlbmd0aCA+IDIgPyBzb3VyY2VzWzJdIDogdW5kZWZpbmVkO1xuXG4gICAgY3VzdG9taXplciA9IChhc3NpZ25lci5sZW5ndGggPiAzICYmIHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicpXG4gICAgICA/IChsZW5ndGgtLSwgY3VzdG9taXplcilcbiAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKHNvdXJjZXNbMF0sIHNvdXJjZXNbMV0sIGd1YXJkKSkge1xuICAgICAgY3VzdG9taXplciA9IGxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiBjdXN0b21pemVyO1xuICAgICAgbGVuZ3RoID0gMTtcbiAgICB9XG4gICAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIHZhciBzb3VyY2UgPSBzb3VyY2VzW2luZGV4XTtcbiAgICAgIGlmIChzb3VyY2UpIHtcbiAgICAgICAgYXNzaWduZXIob2JqZWN0LCBzb3VyY2UsIGluZGV4LCBjdXN0b21pemVyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG9iamVjdDtcbiAgfSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUFzc2lnbmVyO1xuIiwiaW1wb3J0IGVxIGZyb20gJy4vZXEuanMnO1xuaW1wb3J0IGlzQXJyYXlMaWtlIGZyb20gJy4vaXNBcnJheUxpa2UuanMnO1xuaW1wb3J0IGlzSW5kZXggZnJvbSAnLi9faXNJbmRleC5qcyc7XG5pbXBvcnQgaXNPYmplY3QgZnJvbSAnLi9pc09iamVjdC5qcyc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIHRoZSBnaXZlbiBhcmd1bWVudHMgYXJlIGZyb20gYW4gaXRlcmF0ZWUgY2FsbC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgcG90ZW50aWFsIGl0ZXJhdGVlIHZhbHVlIGFyZ3VtZW50LlxuICogQHBhcmFtIHsqfSBpbmRleCBUaGUgcG90ZW50aWFsIGl0ZXJhdGVlIGluZGV4IG9yIGtleSBhcmd1bWVudC5cbiAqIEBwYXJhbSB7Kn0gb2JqZWN0IFRoZSBwb3RlbnRpYWwgaXRlcmF0ZWUgb2JqZWN0IGFyZ3VtZW50LlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBhcmd1bWVudHMgYXJlIGZyb20gYW4gaXRlcmF0ZWUgY2FsbCxcbiAqICBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzSXRlcmF0ZWVDYWxsKHZhbHVlLCBpbmRleCwgb2JqZWN0KSB7XG4gIGlmICghaXNPYmplY3Qob2JqZWN0KSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgdHlwZSA9IHR5cGVvZiBpbmRleDtcbiAgaWYgKHR5cGUgPT0gJ251bWJlcidcbiAgICAgICAgPyAoaXNBcnJheUxpa2Uob2JqZWN0KSAmJiBpc0luZGV4KGluZGV4LCBvYmplY3QubGVuZ3RoKSlcbiAgICAgICAgOiAodHlwZSA9PSAnc3RyaW5nJyAmJiBpbmRleCBpbiBvYmplY3QpXG4gICAgICApIHtcbiAgICByZXR1cm4gZXEob2JqZWN0W2luZGV4XSwgdmFsdWUpO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNJdGVyYXRlZUNhbGw7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCByZWFjdENTUyBmcm9tICdyZWFjdGNzcyc7XG5pbXBvcnQgbWVyZ2UgZnJvbSAnbG9kYXNoLWVzL21lcmdlJztcblxuZXhwb3J0IHZhciBSYWlzZWQgPSBmdW5jdGlvbiBSYWlzZWQoX3JlZikge1xuICB2YXIgekRlcHRoID0gX3JlZi56RGVwdGgsXG4gICAgICByYWRpdXMgPSBfcmVmLnJhZGl1cyxcbiAgICAgIGJhY2tncm91bmQgPSBfcmVmLmJhY2tncm91bmQsXG4gICAgICBjaGlsZHJlbiA9IF9yZWYuY2hpbGRyZW4sXG4gICAgICBfcmVmJHN0eWxlcyA9IF9yZWYuc3R5bGVzLFxuICAgICAgcGFzc2VkU3R5bGVzID0gX3JlZiRzdHlsZXMgPT09IHVuZGVmaW5lZCA/IHt9IDogX3JlZiRzdHlsZXM7XG5cbiAgdmFyIHN0eWxlcyA9IHJlYWN0Q1NTKG1lcmdlKHtcbiAgICAnZGVmYXVsdCc6IHtcbiAgICAgIHdyYXA6IHtcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snXG4gICAgICB9LFxuICAgICAgY29udGVudDoge1xuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xuICAgICAgfSxcbiAgICAgIGJnOiB7XG4gICAgICAgIGFic29sdXRlOiAnMHB4IDBweCAwcHggMHB4JyxcbiAgICAgICAgYm94U2hhZG93OiAnMCAnICsgekRlcHRoICsgJ3B4ICcgKyB6RGVwdGggKiA0ICsgJ3B4IHJnYmEoMCwwLDAsLjI0KScsXG4gICAgICAgIGJvcmRlclJhZGl1czogcmFkaXVzLFxuICAgICAgICBiYWNrZ3JvdW5kOiBiYWNrZ3JvdW5kXG4gICAgICB9XG4gICAgfSxcbiAgICAnekRlcHRoLTAnOiB7XG4gICAgICBiZzoge1xuICAgICAgICBib3hTaGFkb3c6ICdub25lJ1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAnekRlcHRoLTEnOiB7XG4gICAgICBiZzoge1xuICAgICAgICBib3hTaGFkb3c6ICcwIDJweCAxMHB4IHJnYmEoMCwwLDAsLjEyKSwgMCAycHggNXB4IHJnYmEoMCwwLDAsLjE2KSdcbiAgICAgIH1cbiAgICB9LFxuICAgICd6RGVwdGgtMic6IHtcbiAgICAgIGJnOiB7XG4gICAgICAgIGJveFNoYWRvdzogJzAgNnB4IDIwcHggcmdiYSgwLDAsMCwuMTkpLCAwIDhweCAxN3B4IHJnYmEoMCwwLDAsLjIpJ1xuICAgICAgfVxuICAgIH0sXG4gICAgJ3pEZXB0aC0zJzoge1xuICAgICAgYmc6IHtcbiAgICAgICAgYm94U2hhZG93OiAnMCAxN3B4IDUwcHggcmdiYSgwLDAsMCwuMTkpLCAwIDEycHggMTVweCByZ2JhKDAsMCwwLC4yNCknXG4gICAgICB9XG4gICAgfSxcbiAgICAnekRlcHRoLTQnOiB7XG4gICAgICBiZzoge1xuICAgICAgICBib3hTaGFkb3c6ICcwIDI1cHggNTVweCByZ2JhKDAsMCwwLC4yMSksIDAgMTZweCAyOHB4IHJnYmEoMCwwLDAsLjIyKSdcbiAgICAgIH1cbiAgICB9LFxuICAgICd6RGVwdGgtNSc6IHtcbiAgICAgIGJnOiB7XG4gICAgICAgIGJveFNoYWRvdzogJzAgNDBweCA3N3B4IHJnYmEoMCwwLDAsLjIyKSwgMCAyN3B4IDI0cHggcmdiYSgwLDAsMCwuMiknXG4gICAgICB9XG4gICAgfSxcbiAgICAnc3F1YXJlJzoge1xuICAgICAgYmc6IHtcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAnMCdcbiAgICAgIH1cbiAgICB9LFxuICAgICdjaXJjbGUnOiB7XG4gICAgICBiZzoge1xuICAgICAgICBib3JkZXJSYWRpdXM6ICc1MCUnXG4gICAgICB9XG4gICAgfVxuICB9LCBwYXNzZWRTdHlsZXMpLCB7ICd6RGVwdGgtMSc6IHpEZXB0aCA9PT0gMSB9KTtcblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAnZGl2JyxcbiAgICB7IHN0eWxlOiBzdHlsZXMud3JhcCB9LFxuICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgc3R5bGU6IHN0eWxlcy5iZyB9KSxcbiAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICB7IHN0eWxlOiBzdHlsZXMuY29udGVudCB9LFxuICAgICAgY2hpbGRyZW5cbiAgICApXG4gICk7XG59O1xuXG5SYWlzZWQucHJvcFR5cGVzID0ge1xuICBiYWNrZ3JvdW5kOiBQcm9wVHlwZXMuc3RyaW5nLFxuICB6RGVwdGg6IFByb3BUeXBlcy5vbmVPZihbMCwgMSwgMiwgMywgNCwgNV0pLFxuICByYWRpdXM6IFByb3BUeXBlcy5udW1iZXIsXG4gIHN0eWxlczogUHJvcFR5cGVzLm9iamVjdFxufTtcblxuUmFpc2VkLmRlZmF1bHRQcm9wcyA9IHtcbiAgYmFja2dyb3VuZDogJyNmZmYnLFxuICB6RGVwdGg6IDEsXG4gIHJhZGl1czogMixcbiAgc3R5bGVzOiB7fVxufTtcblxuZXhwb3J0IGRlZmF1bHQgUmFpc2VkOyIsImltcG9ydCByb290IGZyb20gJy4vX3Jvb3QuanMnO1xuXG4vKipcbiAqIEdldHMgdGhlIHRpbWVzdGFtcCBvZiB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0aGF0IGhhdmUgZWxhcHNlZCBzaW5jZVxuICogdGhlIFVuaXggZXBvY2ggKDEgSmFudWFyeSAxOTcwIDAwOjAwOjAwIFVUQykuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAyLjQuMFxuICogQGNhdGVnb3J5IERhdGVcbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRpbWVzdGFtcC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5kZWZlcihmdW5jdGlvbihzdGFtcCkge1xuICogICBjb25zb2xlLmxvZyhfLm5vdygpIC0gc3RhbXApO1xuICogfSwgXy5ub3coKSk7XG4gKiAvLyA9PiBMb2dzIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGl0IHRvb2sgZm9yIHRoZSBkZWZlcnJlZCBpbnZvY2F0aW9uLlxuICovXG52YXIgbm93ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiByb290LkRhdGUubm93KCk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBub3c7XG4iLCIvKiogVXNlZCB0byBtYXRjaCBhIHNpbmdsZSB3aGl0ZXNwYWNlIGNoYXJhY3Rlci4gKi9cbnZhciByZVdoaXRlc3BhY2UgPSAvXFxzLztcblxuLyoqXG4gKiBVc2VkIGJ5IGBfLnRyaW1gIGFuZCBgXy50cmltRW5kYCB0byBnZXQgdGhlIGluZGV4IG9mIHRoZSBsYXN0IG5vbi13aGl0ZXNwYWNlXG4gKiBjaGFyYWN0ZXIgb2YgYHN0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGxhc3Qgbm9uLXdoaXRlc3BhY2UgY2hhcmFjdGVyLlxuICovXG5mdW5jdGlvbiB0cmltbWVkRW5kSW5kZXgoc3RyaW5nKSB7XG4gIHZhciBpbmRleCA9IHN0cmluZy5sZW5ndGg7XG5cbiAgd2hpbGUgKGluZGV4LS0gJiYgcmVXaGl0ZXNwYWNlLnRlc3Qoc3RyaW5nLmNoYXJBdChpbmRleCkpKSB7fVxuICByZXR1cm4gaW5kZXg7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHRyaW1tZWRFbmRJbmRleDtcbiIsImltcG9ydCB0cmltbWVkRW5kSW5kZXggZnJvbSAnLi9fdHJpbW1lZEVuZEluZGV4LmpzJztcblxuLyoqIFVzZWQgdG8gbWF0Y2ggbGVhZGluZyB3aGl0ZXNwYWNlLiAqL1xudmFyIHJlVHJpbVN0YXJ0ID0gL15cXHMrLztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50cmltYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIHRyaW0uXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB0cmltbWVkIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gYmFzZVRyaW0oc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmdcbiAgICA/IHN0cmluZy5zbGljZSgwLCB0cmltbWVkRW5kSW5kZXgoc3RyaW5nKSArIDEpLnJlcGxhY2UocmVUcmltU3RhcnQsICcnKVxuICAgIDogc3RyaW5nO1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlVHJpbTtcbiIsImltcG9ydCBiYXNlR2V0VGFnIGZyb20gJy4vX2Jhc2VHZXRUYWcuanMnO1xuaW1wb3J0IGlzT2JqZWN0TGlrZSBmcm9tICcuL2lzT2JqZWN0TGlrZS5qcyc7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFN5bWJvbGAgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHN5bWJvbCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzU3ltYm9sKFN5bWJvbC5pdGVyYXRvcik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1N5bWJvbCgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N5bWJvbCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzeW1ib2wnIHx8XG4gICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gc3ltYm9sVGFnKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNTeW1ib2w7XG4iLCJpbXBvcnQgYmFzZVRyaW0gZnJvbSAnLi9fYmFzZVRyaW0uanMnO1xuaW1wb3J0IGlzT2JqZWN0IGZyb20gJy4vaXNPYmplY3QuanMnO1xuaW1wb3J0IGlzU3ltYm9sIGZyb20gJy4vaXNTeW1ib2wuanMnO1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBOQU4gPSAwIC8gMDtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGJhZCBzaWduZWQgaGV4YWRlY2ltYWwgc3RyaW5nIHZhbHVlcy4gKi9cbnZhciByZUlzQmFkSGV4ID0gL15bLStdMHhbMC05YS1mXSskL2k7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBiaW5hcnkgc3RyaW5nIHZhbHVlcy4gKi9cbnZhciByZUlzQmluYXJ5ID0gL14wYlswMV0rJC9pO1xuXG4vKiogVXNlZCB0byBkZXRlY3Qgb2N0YWwgc3RyaW5nIHZhbHVlcy4gKi9cbnZhciByZUlzT2N0YWwgPSAvXjBvWzAtN10rJC9pO1xuXG4vKiogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgd2l0aG91dCBhIGRlcGVuZGVuY3kgb24gYHJvb3RgLiAqL1xudmFyIGZyZWVQYXJzZUludCA9IHBhcnNlSW50O1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBudW1iZXIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBudW1iZXIuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udG9OdW1iZXIoMy4yKTtcbiAqIC8vID0+IDMuMlxuICpcbiAqIF8udG9OdW1iZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiA1ZS0zMjRcbiAqXG4gKiBfLnRvTnVtYmVyKEluZmluaXR5KTtcbiAqIC8vID0+IEluZmluaXR5XG4gKlxuICogXy50b051bWJlcignMy4yJyk7XG4gKiAvLyA9PiAzLjJcbiAqL1xuZnVuY3Rpb24gdG9OdW1iZXIodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgcmV0dXJuIE5BTjtcbiAgfVxuICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgdmFyIG90aGVyID0gdHlwZW9mIHZhbHVlLnZhbHVlT2YgPT0gJ2Z1bmN0aW9uJyA/IHZhbHVlLnZhbHVlT2YoKSA6IHZhbHVlO1xuICAgIHZhbHVlID0gaXNPYmplY3Qob3RoZXIpID8gKG90aGVyICsgJycpIDogb3RoZXI7XG4gIH1cbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gMCA/IHZhbHVlIDogK3ZhbHVlO1xuICB9XG4gIHZhbHVlID0gYmFzZVRyaW0odmFsdWUpO1xuICB2YXIgaXNCaW5hcnkgPSByZUlzQmluYXJ5LnRlc3QodmFsdWUpO1xuICByZXR1cm4gKGlzQmluYXJ5IHx8IHJlSXNPY3RhbC50ZXN0KHZhbHVlKSlcbiAgICA/IGZyZWVQYXJzZUludCh2YWx1ZS5zbGljZSgyKSwgaXNCaW5hcnkgPyAyIDogOClcbiAgICA6IChyZUlzQmFkSGV4LnRlc3QodmFsdWUpID8gTkFOIDogK3ZhbHVlKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdG9OdW1iZXI7XG4iLCJpbXBvcnQgaXNPYmplY3QgZnJvbSAnLi9pc09iamVjdC5qcyc7XG5pbXBvcnQgbm93IGZyb20gJy4vbm93LmpzJztcbmltcG9ydCB0b051bWJlciBmcm9tICcuL3RvTnVtYmVyLmpzJztcblxuLyoqIEVycm9yIG1lc3NhZ2UgY29uc3RhbnRzLiAqL1xudmFyIEZVTkNfRVJST1JfVEVYVCA9ICdFeHBlY3RlZCBhIGZ1bmN0aW9uJztcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZU1heCA9IE1hdGgubWF4LFxuICAgIG5hdGl2ZU1pbiA9IE1hdGgubWluO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBkZWJvdW5jZWQgZnVuY3Rpb24gdGhhdCBkZWxheXMgaW52b2tpbmcgYGZ1bmNgIHVudGlsIGFmdGVyIGB3YWl0YFxuICogbWlsbGlzZWNvbmRzIGhhdmUgZWxhcHNlZCBzaW5jZSB0aGUgbGFzdCB0aW1lIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gd2FzXG4gKiBpbnZva2VkLiBUaGUgZGVib3VuY2VkIGZ1bmN0aW9uIGNvbWVzIHdpdGggYSBgY2FuY2VsYCBtZXRob2QgdG8gY2FuY2VsXG4gKiBkZWxheWVkIGBmdW5jYCBpbnZvY2F0aW9ucyBhbmQgYSBgZmx1c2hgIG1ldGhvZCB0byBpbW1lZGlhdGVseSBpbnZva2UgdGhlbS5cbiAqIFByb3ZpZGUgYG9wdGlvbnNgIHRvIGluZGljYXRlIHdoZXRoZXIgYGZ1bmNgIHNob3VsZCBiZSBpbnZva2VkIG9uIHRoZVxuICogbGVhZGluZyBhbmQvb3IgdHJhaWxpbmcgZWRnZSBvZiB0aGUgYHdhaXRgIHRpbWVvdXQuIFRoZSBgZnVuY2AgaXMgaW52b2tlZFxuICogd2l0aCB0aGUgbGFzdCBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIGRlYm91bmNlZCBmdW5jdGlvbi4gU3Vic2VxdWVudFxuICogY2FsbHMgdG8gdGhlIGRlYm91bmNlZCBmdW5jdGlvbiByZXR1cm4gdGhlIHJlc3VsdCBvZiB0aGUgbGFzdCBgZnVuY2BcbiAqIGludm9jYXRpb24uXG4gKlxuICogKipOb3RlOioqIElmIGBsZWFkaW5nYCBhbmQgYHRyYWlsaW5nYCBvcHRpb25zIGFyZSBgdHJ1ZWAsIGBmdW5jYCBpc1xuICogaW52b2tlZCBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dCBvbmx5IGlmIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb25cbiAqIGlzIGludm9rZWQgbW9yZSB0aGFuIG9uY2UgZHVyaW5nIHRoZSBgd2FpdGAgdGltZW91dC5cbiAqXG4gKiBJZiBgd2FpdGAgaXMgYDBgIGFuZCBgbGVhZGluZ2AgaXMgYGZhbHNlYCwgYGZ1bmNgIGludm9jYXRpb24gaXMgZGVmZXJyZWRcbiAqIHVudGlsIHRvIHRoZSBuZXh0IHRpY2ssIHNpbWlsYXIgdG8gYHNldFRpbWVvdXRgIHdpdGggYSB0aW1lb3V0IG9mIGAwYC5cbiAqXG4gKiBTZWUgW0RhdmlkIENvcmJhY2hvJ3MgYXJ0aWNsZV0oaHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS9kZWJvdW5jaW5nLXRocm90dGxpbmctZXhwbGFpbmVkLWV4YW1wbGVzLylcbiAqIGZvciBkZXRhaWxzIG92ZXIgdGhlIGRpZmZlcmVuY2VzIGJldHdlZW4gYF8uZGVib3VuY2VgIGFuZCBgXy50aHJvdHRsZWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWJvdW5jZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbd2FpdD0wXSBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkZWxheS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5sZWFkaW5nPWZhbHNlXVxuICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIGxlYWRpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5tYXhXYWl0XVxuICogIFRoZSBtYXhpbXVtIHRpbWUgYGZ1bmNgIGlzIGFsbG93ZWQgdG8gYmUgZGVsYXllZCBiZWZvcmUgaXQncyBpbnZva2VkLlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy50cmFpbGluZz10cnVlXVxuICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBkZWJvdW5jZWQgZnVuY3Rpb24uXG4gKiBAZXhhbXBsZVxuICpcbiAqIC8vIEF2b2lkIGNvc3RseSBjYWxjdWxhdGlvbnMgd2hpbGUgdGhlIHdpbmRvdyBzaXplIGlzIGluIGZsdXguXG4gKiBqUXVlcnkod2luZG93KS5vbigncmVzaXplJywgXy5kZWJvdW5jZShjYWxjdWxhdGVMYXlvdXQsIDE1MCkpO1xuICpcbiAqIC8vIEludm9rZSBgc2VuZE1haWxgIHdoZW4gY2xpY2tlZCwgZGVib3VuY2luZyBzdWJzZXF1ZW50IGNhbGxzLlxuICogalF1ZXJ5KGVsZW1lbnQpLm9uKCdjbGljaycsIF8uZGVib3VuY2Uoc2VuZE1haWwsIDMwMCwge1xuICogICAnbGVhZGluZyc6IHRydWUsXG4gKiAgICd0cmFpbGluZyc6IGZhbHNlXG4gKiB9KSk7XG4gKlxuICogLy8gRW5zdXJlIGBiYXRjaExvZ2AgaXMgaW52b2tlZCBvbmNlIGFmdGVyIDEgc2Vjb25kIG9mIGRlYm91bmNlZCBjYWxscy5cbiAqIHZhciBkZWJvdW5jZWQgPSBfLmRlYm91bmNlKGJhdGNoTG9nLCAyNTAsIHsgJ21heFdhaXQnOiAxMDAwIH0pO1xuICogdmFyIHNvdXJjZSA9IG5ldyBFdmVudFNvdXJjZSgnL3N0cmVhbScpO1xuICogalF1ZXJ5KHNvdXJjZSkub24oJ21lc3NhZ2UnLCBkZWJvdW5jZWQpO1xuICpcbiAqIC8vIENhbmNlbCB0aGUgdHJhaWxpbmcgZGVib3VuY2VkIGludm9jYXRpb24uXG4gKiBqUXVlcnkod2luZG93KS5vbigncG9wc3RhdGUnLCBkZWJvdW5jZWQuY2FuY2VsKTtcbiAqL1xuZnVuY3Rpb24gZGVib3VuY2UoZnVuYywgd2FpdCwgb3B0aW9ucykge1xuICB2YXIgbGFzdEFyZ3MsXG4gICAgICBsYXN0VGhpcyxcbiAgICAgIG1heFdhaXQsXG4gICAgICByZXN1bHQsXG4gICAgICB0aW1lcklkLFxuICAgICAgbGFzdENhbGxUaW1lLFxuICAgICAgbGFzdEludm9rZVRpbWUgPSAwLFxuICAgICAgbGVhZGluZyA9IGZhbHNlLFxuICAgICAgbWF4aW5nID0gZmFsc2UsXG4gICAgICB0cmFpbGluZyA9IHRydWU7XG5cbiAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gIH1cbiAgd2FpdCA9IHRvTnVtYmVyKHdhaXQpIHx8IDA7XG4gIGlmIChpc09iamVjdChvcHRpb25zKSkge1xuICAgIGxlYWRpbmcgPSAhIW9wdGlvbnMubGVhZGluZztcbiAgICBtYXhpbmcgPSAnbWF4V2FpdCcgaW4gb3B0aW9ucztcbiAgICBtYXhXYWl0ID0gbWF4aW5nID8gbmF0aXZlTWF4KHRvTnVtYmVyKG9wdGlvbnMubWF4V2FpdCkgfHwgMCwgd2FpdCkgOiBtYXhXYWl0O1xuICAgIHRyYWlsaW5nID0gJ3RyYWlsaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLnRyYWlsaW5nIDogdHJhaWxpbmc7XG4gIH1cblxuICBmdW5jdGlvbiBpbnZva2VGdW5jKHRpbWUpIHtcbiAgICB2YXIgYXJncyA9IGxhc3RBcmdzLFxuICAgICAgICB0aGlzQXJnID0gbGFzdFRoaXM7XG5cbiAgICBsYXN0QXJncyA9IGxhc3RUaGlzID0gdW5kZWZpbmVkO1xuICAgIGxhc3RJbnZva2VUaW1lID0gdGltZTtcbiAgICByZXN1bHQgPSBmdW5jLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiBsZWFkaW5nRWRnZSh0aW1lKSB7XG4gICAgLy8gUmVzZXQgYW55IGBtYXhXYWl0YCB0aW1lci5cbiAgICBsYXN0SW52b2tlVGltZSA9IHRpbWU7XG4gICAgLy8gU3RhcnQgdGhlIHRpbWVyIGZvciB0aGUgdHJhaWxpbmcgZWRnZS5cbiAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgIC8vIEludm9rZSB0aGUgbGVhZGluZyBlZGdlLlxuICAgIHJldHVybiBsZWFkaW5nID8gaW52b2tlRnVuYyh0aW1lKSA6IHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbWFpbmluZ1dhaXQodGltZSkge1xuICAgIHZhciB0aW1lU2luY2VMYXN0Q2FsbCA9IHRpbWUgLSBsYXN0Q2FsbFRpbWUsXG4gICAgICAgIHRpbWVTaW5jZUxhc3RJbnZva2UgPSB0aW1lIC0gbGFzdEludm9rZVRpbWUsXG4gICAgICAgIHRpbWVXYWl0aW5nID0gd2FpdCAtIHRpbWVTaW5jZUxhc3RDYWxsO1xuXG4gICAgcmV0dXJuIG1heGluZ1xuICAgICAgPyBuYXRpdmVNaW4odGltZVdhaXRpbmcsIG1heFdhaXQgLSB0aW1lU2luY2VMYXN0SW52b2tlKVxuICAgICAgOiB0aW1lV2FpdGluZztcbiAgfVxuXG4gIGZ1bmN0aW9uIHNob3VsZEludm9rZSh0aW1lKSB7XG4gICAgdmFyIHRpbWVTaW5jZUxhc3RDYWxsID0gdGltZSAtIGxhc3RDYWxsVGltZSxcbiAgICAgICAgdGltZVNpbmNlTGFzdEludm9rZSA9IHRpbWUgLSBsYXN0SW52b2tlVGltZTtcblxuICAgIC8vIEVpdGhlciB0aGlzIGlzIHRoZSBmaXJzdCBjYWxsLCBhY3Rpdml0eSBoYXMgc3RvcHBlZCBhbmQgd2UncmUgYXQgdGhlXG4gICAgLy8gdHJhaWxpbmcgZWRnZSwgdGhlIHN5c3RlbSB0aW1lIGhhcyBnb25lIGJhY2t3YXJkcyBhbmQgd2UncmUgdHJlYXRpbmdcbiAgICAvLyBpdCBhcyB0aGUgdHJhaWxpbmcgZWRnZSwgb3Igd2UndmUgaGl0IHRoZSBgbWF4V2FpdGAgbGltaXQuXG4gICAgcmV0dXJuIChsYXN0Q2FsbFRpbWUgPT09IHVuZGVmaW5lZCB8fCAodGltZVNpbmNlTGFzdENhbGwgPj0gd2FpdCkgfHxcbiAgICAgICh0aW1lU2luY2VMYXN0Q2FsbCA8IDApIHx8IChtYXhpbmcgJiYgdGltZVNpbmNlTGFzdEludm9rZSA+PSBtYXhXYWl0KSk7XG4gIH1cblxuICBmdW5jdGlvbiB0aW1lckV4cGlyZWQoKSB7XG4gICAgdmFyIHRpbWUgPSBub3coKTtcbiAgICBpZiAoc2hvdWxkSW52b2tlKHRpbWUpKSB7XG4gICAgICByZXR1cm4gdHJhaWxpbmdFZGdlKHRpbWUpO1xuICAgIH1cbiAgICAvLyBSZXN0YXJ0IHRoZSB0aW1lci5cbiAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHJlbWFpbmluZ1dhaXQodGltZSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJhaWxpbmdFZGdlKHRpbWUpIHtcbiAgICB0aW1lcklkID0gdW5kZWZpbmVkO1xuXG4gICAgLy8gT25seSBpbnZva2UgaWYgd2UgaGF2ZSBgbGFzdEFyZ3NgIHdoaWNoIG1lYW5zIGBmdW5jYCBoYXMgYmVlblxuICAgIC8vIGRlYm91bmNlZCBhdCBsZWFzdCBvbmNlLlxuICAgIGlmICh0cmFpbGluZyAmJiBsYXN0QXJncykge1xuICAgICAgcmV0dXJuIGludm9rZUZ1bmModGltZSk7XG4gICAgfVxuICAgIGxhc3RBcmdzID0gbGFzdFRoaXMgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNhbmNlbCgpIHtcbiAgICBpZiAodGltZXJJZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGltZXJJZCk7XG4gICAgfVxuICAgIGxhc3RJbnZva2VUaW1lID0gMDtcbiAgICBsYXN0QXJncyA9IGxhc3RDYWxsVGltZSA9IGxhc3RUaGlzID0gdGltZXJJZCA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZsdXNoKCkge1xuICAgIHJldHVybiB0aW1lcklkID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiB0cmFpbGluZ0VkZ2Uobm93KCkpO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVib3VuY2VkKCkge1xuICAgIHZhciB0aW1lID0gbm93KCksXG4gICAgICAgIGlzSW52b2tpbmcgPSBzaG91bGRJbnZva2UodGltZSk7XG5cbiAgICBsYXN0QXJncyA9IGFyZ3VtZW50cztcbiAgICBsYXN0VGhpcyA9IHRoaXM7XG4gICAgbGFzdENhbGxUaW1lID0gdGltZTtcblxuICAgIGlmIChpc0ludm9raW5nKSB7XG4gICAgICBpZiAodGltZXJJZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBsZWFkaW5nRWRnZShsYXN0Q2FsbFRpbWUpO1xuICAgICAgfVxuICAgICAgaWYgKG1heGluZykge1xuICAgICAgICAvLyBIYW5kbGUgaW52b2NhdGlvbnMgaW4gYSB0aWdodCBsb29wLlxuICAgICAgICBjbGVhclRpbWVvdXQodGltZXJJZCk7XG4gICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgICAgIHJldHVybiBpbnZva2VGdW5jKGxhc3RDYWxsVGltZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0aW1lcklkID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgZGVib3VuY2VkLmNhbmNlbCA9IGNhbmNlbDtcbiAgZGVib3VuY2VkLmZsdXNoID0gZmx1c2g7XG4gIHJldHVybiBkZWJvdW5jZWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGRlYm91bmNlO1xuIiwiZXhwb3J0IHZhciBjYWxjdWxhdGVDaGFuZ2UgPSBmdW5jdGlvbiBjYWxjdWxhdGVDaGFuZ2UoZSwgaHNsLCBjb250YWluZXIpIHtcbiAgdmFyIF9jb250YWluZXIkZ2V0Qm91bmRpbiA9IGNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgIGNvbnRhaW5lcldpZHRoID0gX2NvbnRhaW5lciRnZXRCb3VuZGluLndpZHRoLFxuICAgICAgY29udGFpbmVySGVpZ2h0ID0gX2NvbnRhaW5lciRnZXRCb3VuZGluLmhlaWdodDtcblxuICB2YXIgeCA9IHR5cGVvZiBlLnBhZ2VYID09PSAnbnVtYmVyJyA/IGUucGFnZVggOiBlLnRvdWNoZXNbMF0ucGFnZVg7XG4gIHZhciB5ID0gdHlwZW9mIGUucGFnZVkgPT09ICdudW1iZXInID8gZS5wYWdlWSA6IGUudG91Y2hlc1swXS5wYWdlWTtcbiAgdmFyIGxlZnQgPSB4IC0gKGNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0ICsgd2luZG93LnBhZ2VYT2Zmc2V0KTtcbiAgdmFyIHRvcCA9IHkgLSAoY29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcCArIHdpbmRvdy5wYWdlWU9mZnNldCk7XG5cbiAgaWYgKGxlZnQgPCAwKSB7XG4gICAgbGVmdCA9IDA7XG4gIH0gZWxzZSBpZiAobGVmdCA+IGNvbnRhaW5lcldpZHRoKSB7XG4gICAgbGVmdCA9IGNvbnRhaW5lcldpZHRoO1xuICB9XG5cbiAgaWYgKHRvcCA8IDApIHtcbiAgICB0b3AgPSAwO1xuICB9IGVsc2UgaWYgKHRvcCA+IGNvbnRhaW5lckhlaWdodCkge1xuICAgIHRvcCA9IGNvbnRhaW5lckhlaWdodDtcbiAgfVxuXG4gIHZhciBzYXR1cmF0aW9uID0gbGVmdCAvIGNvbnRhaW5lcldpZHRoO1xuICB2YXIgYnJpZ2h0ID0gMSAtIHRvcCAvIGNvbnRhaW5lckhlaWdodDtcblxuICByZXR1cm4ge1xuICAgIGg6IGhzbC5oLFxuICAgIHM6IHNhdHVyYXRpb24sXG4gICAgdjogYnJpZ2h0LFxuICAgIGE6IGhzbC5hLFxuICAgIHNvdXJjZTogJ2hzdidcbiAgfTtcbn07IiwidmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50LCBQdXJlQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHJlYWN0Q1NTIGZyb20gJ3JlYWN0Y3NzJztcbmltcG9ydCB0aHJvdHRsZSBmcm9tICdsb2Rhc2gtZXMvdGhyb3R0bGUnO1xuaW1wb3J0ICogYXMgc2F0dXJhdGlvbiBmcm9tICcuLi8uLi9oZWxwZXJzL3NhdHVyYXRpb24nO1xuXG5leHBvcnQgdmFyIFNhdHVyYXRpb24gPSBmdW5jdGlvbiAoX3JlZikge1xuICBfaW5oZXJpdHMoU2F0dXJhdGlvbiwgX3JlZik7XG5cbiAgZnVuY3Rpb24gU2F0dXJhdGlvbihwcm9wcykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTYXR1cmF0aW9uKTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChTYXR1cmF0aW9uLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoU2F0dXJhdGlvbikpLmNhbGwodGhpcywgcHJvcHMpKTtcblxuICAgIF90aGlzLmhhbmRsZUNoYW5nZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICB0eXBlb2YgX3RoaXMucHJvcHMub25DaGFuZ2UgPT09ICdmdW5jdGlvbicgJiYgX3RoaXMudGhyb3R0bGUoX3RoaXMucHJvcHMub25DaGFuZ2UsIHNhdHVyYXRpb24uY2FsY3VsYXRlQ2hhbmdlKGUsIF90aGlzLnByb3BzLmhzbCwgX3RoaXMuY29udGFpbmVyKSwgZSk7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZU1vdXNlRG93biA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICBfdGhpcy5oYW5kbGVDaGFuZ2UoZSk7XG4gICAgICB2YXIgcmVuZGVyV2luZG93ID0gX3RoaXMuZ2V0Q29udGFpbmVyUmVuZGVyV2luZG93KCk7XG4gICAgICByZW5kZXJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgX3RoaXMuaGFuZGxlQ2hhbmdlKTtcbiAgICAgIHJlbmRlcldpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgX3RoaXMuaGFuZGxlTW91c2VVcCk7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZU1vdXNlVXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy51bmJpbmRFdmVudExpc3RlbmVycygpO1xuICAgIH07XG5cbiAgICBfdGhpcy50aHJvdHRsZSA9IHRocm90dGxlKGZ1bmN0aW9uIChmbiwgZGF0YSwgZSkge1xuICAgICAgZm4oZGF0YSwgZSk7XG4gICAgfSwgNTApO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhTYXR1cmF0aW9uLCBbe1xuICAgIGtleTogJ2NvbXBvbmVudFdpbGxVbm1vdW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICB0aGlzLnRocm90dGxlLmNhbmNlbCgpO1xuICAgICAgdGhpcy51bmJpbmRFdmVudExpc3RlbmVycygpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldENvbnRhaW5lclJlbmRlcldpbmRvdycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldENvbnRhaW5lclJlbmRlcldpbmRvdygpIHtcbiAgICAgIHZhciBjb250YWluZXIgPSB0aGlzLmNvbnRhaW5lcjtcblxuICAgICAgdmFyIHJlbmRlcldpbmRvdyA9IHdpbmRvdztcbiAgICAgIHdoaWxlICghcmVuZGVyV2luZG93LmRvY3VtZW50LmNvbnRhaW5zKGNvbnRhaW5lcikgJiYgcmVuZGVyV2luZG93LnBhcmVudCAhPT0gcmVuZGVyV2luZG93KSB7XG4gICAgICAgIHJlbmRlcldpbmRvdyA9IHJlbmRlcldpbmRvdy5wYXJlbnQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVuZGVyV2luZG93O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3VuYmluZEV2ZW50TGlzdGVuZXJzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdW5iaW5kRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgICB2YXIgcmVuZGVyV2luZG93ID0gdGhpcy5nZXRDb250YWluZXJSZW5kZXJXaW5kb3coKTtcbiAgICAgIHJlbmRlcldpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLmhhbmRsZUNoYW5nZSk7XG4gICAgICByZW5kZXJXaW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRoaXMuaGFuZGxlTW91c2VVcCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBfcmVmMiA9IHRoaXMucHJvcHMuc3R5bGUgfHwge30sXG4gICAgICAgICAgY29sb3IgPSBfcmVmMi5jb2xvcixcbiAgICAgICAgICB3aGl0ZSA9IF9yZWYyLndoaXRlLFxuICAgICAgICAgIGJsYWNrID0gX3JlZjIuYmxhY2ssXG4gICAgICAgICAgcG9pbnRlciA9IF9yZWYyLnBvaW50ZXIsXG4gICAgICAgICAgY2lyY2xlID0gX3JlZjIuY2lyY2xlO1xuXG4gICAgICB2YXIgc3R5bGVzID0gcmVhY3RDU1Moe1xuICAgICAgICAnZGVmYXVsdCc6IHtcbiAgICAgICAgICBjb2xvcjoge1xuICAgICAgICAgICAgYWJzb2x1dGU6ICcwcHggMHB4IDBweCAwcHgnLFxuICAgICAgICAgICAgYmFja2dyb3VuZDogJ2hzbCgnICsgdGhpcy5wcm9wcy5oc2wuaCArICcsMTAwJSwgNTAlKScsXG4gICAgICAgICAgICBib3JkZXJSYWRpdXM6IHRoaXMucHJvcHMucmFkaXVzXG4gICAgICAgICAgfSxcbiAgICAgICAgICB3aGl0ZToge1xuICAgICAgICAgICAgYWJzb2x1dGU6ICcwcHggMHB4IDBweCAwcHgnLFxuICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiB0aGlzLnByb3BzLnJhZGl1c1xuICAgICAgICAgIH0sXG4gICAgICAgICAgYmxhY2s6IHtcbiAgICAgICAgICAgIGFic29sdXRlOiAnMHB4IDBweCAwcHggMHB4JyxcbiAgICAgICAgICAgIGJveFNoYWRvdzogdGhpcy5wcm9wcy5zaGFkb3csXG4gICAgICAgICAgICBib3JkZXJSYWRpdXM6IHRoaXMucHJvcHMucmFkaXVzXG4gICAgICAgICAgfSxcbiAgICAgICAgICBwb2ludGVyOiB7XG4gICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICAgIHRvcDogLSh0aGlzLnByb3BzLmhzdi52ICogMTAwKSArIDEwMCArICclJyxcbiAgICAgICAgICAgIGxlZnQ6IHRoaXMucHJvcHMuaHN2LnMgKiAxMDAgKyAnJScsXG4gICAgICAgICAgICBjdXJzb3I6ICdkZWZhdWx0J1xuICAgICAgICAgIH0sXG4gICAgICAgICAgY2lyY2xlOiB7XG4gICAgICAgICAgICB3aWR0aDogJzRweCcsXG4gICAgICAgICAgICBoZWlnaHQ6ICc0cHgnLFxuICAgICAgICAgICAgYm94U2hhZG93OiAnMCAwIDAgMS41cHggI2ZmZiwgaW5zZXQgMCAwIDFweCAxcHggcmdiYSgwLDAsMCwuMyksXFxuICAgICAgICAgICAgMCAwIDFweCAycHggcmdiYSgwLDAsMCwuNCknLFxuICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiAnNTAlJyxcbiAgICAgICAgICAgIGN1cnNvcjogJ2hhbmQnLFxuICAgICAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKC0ycHgsIC0ycHgpJ1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgJ2N1c3RvbSc6IHtcbiAgICAgICAgICBjb2xvcjogY29sb3IsXG4gICAgICAgICAgd2hpdGU6IHdoaXRlLFxuICAgICAgICAgIGJsYWNrOiBibGFjayxcbiAgICAgICAgICBwb2ludGVyOiBwb2ludGVyLFxuICAgICAgICAgIGNpcmNsZTogY2lyY2xlXG4gICAgICAgIH1cbiAgICAgIH0sIHsgJ2N1c3RvbSc6ICEhdGhpcy5wcm9wcy5zdHlsZSB9KTtcblxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7XG4gICAgICAgICAgc3R5bGU6IHN0eWxlcy5jb2xvcixcbiAgICAgICAgICByZWY6IGZ1bmN0aW9uIHJlZihjb250YWluZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpczIuY29udGFpbmVyID0gY29udGFpbmVyO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgb25Nb3VzZURvd246IHRoaXMuaGFuZGxlTW91c2VEb3duLFxuICAgICAgICAgIG9uVG91Y2hNb3ZlOiB0aGlzLmhhbmRsZUNoYW5nZSxcbiAgICAgICAgICBvblRvdWNoU3RhcnQ6IHRoaXMuaGFuZGxlQ2hhbmdlXG4gICAgICAgIH0sXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ3N0eWxlJyxcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgICdcXG4gICAgICAgICAgLnNhdHVyYXRpb24td2hpdGUge1xcbiAgICAgICAgICAgIGJhY2tncm91bmQ6IC13ZWJraXQtbGluZWFyLWdyYWRpZW50KHRvIHJpZ2h0LCAjZmZmLCByZ2JhKDI1NSwyNTUsMjU1LDApKTtcXG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQodG8gcmlnaHQsICNmZmYsIHJnYmEoMjU1LDI1NSwyNTUsMCkpO1xcbiAgICAgICAgICB9XFxuICAgICAgICAgIC5zYXR1cmF0aW9uLWJsYWNrIHtcXG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiAtd2Via2l0LWxpbmVhci1ncmFkaWVudCh0byB0b3AsICMwMDAsIHJnYmEoMCwwLDAsMCkpO1xcbiAgICAgICAgICAgIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCh0byB0b3AsICMwMDAsIHJnYmEoMCwwLDAsMCkpO1xcbiAgICAgICAgICB9XFxuICAgICAgICAnXG4gICAgICAgICksXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgeyBzdHlsZTogc3R5bGVzLndoaXRlLCBjbGFzc05hbWU6ICdzYXR1cmF0aW9uLXdoaXRlJyB9LFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgc3R5bGU6IHN0eWxlcy5ibGFjaywgY2xhc3NOYW1lOiAnc2F0dXJhdGlvbi1ibGFjaycgfSksXG4gICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLnBvaW50ZXIgfSxcbiAgICAgICAgICAgIHRoaXMucHJvcHMucG9pbnRlciA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQodGhpcy5wcm9wcy5wb2ludGVyLCB0aGlzLnByb3BzKSA6IFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgc3R5bGU6IHN0eWxlcy5jaXJjbGUgfSlcbiAgICAgICAgICApXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFNhdHVyYXRpb247XG59KFB1cmVDb21wb25lbnQgfHwgQ29tcG9uZW50KTtcblxuZXhwb3J0IGRlZmF1bHQgU2F0dXJhdGlvbjsiLCJpbXBvcnQgZGVib3VuY2UgZnJvbSAnLi9kZWJvdW5jZS5qcyc7XG5pbXBvcnQgaXNPYmplY3QgZnJvbSAnLi9pc09iamVjdC5qcyc7XG5cbi8qKiBFcnJvciBtZXNzYWdlIGNvbnN0YW50cy4gKi9cbnZhciBGVU5DX0VSUk9SX1RFWFQgPSAnRXhwZWN0ZWQgYSBmdW5jdGlvbic7XG5cbi8qKlxuICogQ3JlYXRlcyBhIHRocm90dGxlZCBmdW5jdGlvbiB0aGF0IG9ubHkgaW52b2tlcyBgZnVuY2AgYXQgbW9zdCBvbmNlIHBlclxuICogZXZlcnkgYHdhaXRgIG1pbGxpc2Vjb25kcy4gVGhlIHRocm90dGxlZCBmdW5jdGlvbiBjb21lcyB3aXRoIGEgYGNhbmNlbGBcbiAqIG1ldGhvZCB0byBjYW5jZWwgZGVsYXllZCBgZnVuY2AgaW52b2NhdGlvbnMgYW5kIGEgYGZsdXNoYCBtZXRob2QgdG9cbiAqIGltbWVkaWF0ZWx5IGludm9rZSB0aGVtLiBQcm92aWRlIGBvcHRpb25zYCB0byBpbmRpY2F0ZSB3aGV0aGVyIGBmdW5jYFxuICogc2hvdWxkIGJlIGludm9rZWQgb24gdGhlIGxlYWRpbmcgYW5kL29yIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIGB3YWl0YFxuICogdGltZW91dC4gVGhlIGBmdW5jYCBpcyBpbnZva2VkIHdpdGggdGhlIGxhc3QgYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZVxuICogdGhyb3R0bGVkIGZ1bmN0aW9uLiBTdWJzZXF1ZW50IGNhbGxzIHRvIHRoZSB0aHJvdHRsZWQgZnVuY3Rpb24gcmV0dXJuIHRoZVxuICogcmVzdWx0IG9mIHRoZSBsYXN0IGBmdW5jYCBpbnZvY2F0aW9uLlxuICpcbiAqICoqTm90ZToqKiBJZiBgbGVhZGluZ2AgYW5kIGB0cmFpbGluZ2Agb3B0aW9ucyBhcmUgYHRydWVgLCBgZnVuY2AgaXNcbiAqIGludm9rZWQgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQgb25seSBpZiB0aGUgdGhyb3R0bGVkIGZ1bmN0aW9uXG4gKiBpcyBpbnZva2VkIG1vcmUgdGhhbiBvbmNlIGR1cmluZyB0aGUgYHdhaXRgIHRpbWVvdXQuXG4gKlxuICogSWYgYHdhaXRgIGlzIGAwYCBhbmQgYGxlYWRpbmdgIGlzIGBmYWxzZWAsIGBmdW5jYCBpbnZvY2F0aW9uIGlzIGRlZmVycmVkXG4gKiB1bnRpbCB0byB0aGUgbmV4dCB0aWNrLCBzaW1pbGFyIHRvIGBzZXRUaW1lb3V0YCB3aXRoIGEgdGltZW91dCBvZiBgMGAuXG4gKlxuICogU2VlIFtEYXZpZCBDb3JiYWNobydzIGFydGljbGVdKGh0dHBzOi8vY3NzLXRyaWNrcy5jb20vZGVib3VuY2luZy10aHJvdHRsaW5nLWV4cGxhaW5lZC1leGFtcGxlcy8pXG4gKiBmb3IgZGV0YWlscyBvdmVyIHRoZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIGBfLnRocm90dGxlYCBhbmQgYF8uZGVib3VuY2VgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gdGhyb3R0bGUuXG4gKiBAcGFyYW0ge251bWJlcn0gW3dhaXQ9MF0gVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gdGhyb3R0bGUgaW52b2NhdGlvbnMgdG8uXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMubGVhZGluZz10cnVlXVxuICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIGxlYWRpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudHJhaWxpbmc9dHJ1ZV1cbiAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgdGhyb3R0bGVkIGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiAvLyBBdm9pZCBleGNlc3NpdmVseSB1cGRhdGluZyB0aGUgcG9zaXRpb24gd2hpbGUgc2Nyb2xsaW5nLlxuICogalF1ZXJ5KHdpbmRvdykub24oJ3Njcm9sbCcsIF8udGhyb3R0bGUodXBkYXRlUG9zaXRpb24sIDEwMCkpO1xuICpcbiAqIC8vIEludm9rZSBgcmVuZXdUb2tlbmAgd2hlbiB0aGUgY2xpY2sgZXZlbnQgaXMgZmlyZWQsIGJ1dCBub3QgbW9yZSB0aGFuIG9uY2UgZXZlcnkgNSBtaW51dGVzLlxuICogdmFyIHRocm90dGxlZCA9IF8udGhyb3R0bGUocmVuZXdUb2tlbiwgMzAwMDAwLCB7ICd0cmFpbGluZyc6IGZhbHNlIH0pO1xuICogalF1ZXJ5KGVsZW1lbnQpLm9uKCdjbGljaycsIHRocm90dGxlZCk7XG4gKlxuICogLy8gQ2FuY2VsIHRoZSB0cmFpbGluZyB0aHJvdHRsZWQgaW52b2NhdGlvbi5cbiAqIGpRdWVyeSh3aW5kb3cpLm9uKCdwb3BzdGF0ZScsIHRocm90dGxlZC5jYW5jZWwpO1xuICovXG5mdW5jdGlvbiB0aHJvdHRsZShmdW5jLCB3YWl0LCBvcHRpb25zKSB7XG4gIHZhciBsZWFkaW5nID0gdHJ1ZSxcbiAgICAgIHRyYWlsaW5nID0gdHJ1ZTtcblxuICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgfVxuICBpZiAoaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICBsZWFkaW5nID0gJ2xlYWRpbmcnIGluIG9wdGlvbnMgPyAhIW9wdGlvbnMubGVhZGluZyA6IGxlYWRpbmc7XG4gICAgdHJhaWxpbmcgPSAndHJhaWxpbmcnIGluIG9wdGlvbnMgPyAhIW9wdGlvbnMudHJhaWxpbmcgOiB0cmFpbGluZztcbiAgfVxuICByZXR1cm4gZGVib3VuY2UoZnVuYywgd2FpdCwge1xuICAgICdsZWFkaW5nJzogbGVhZGluZyxcbiAgICAnbWF4V2FpdCc6IHdhaXQsXG4gICAgJ3RyYWlsaW5nJzogdHJhaWxpbmdcbiAgfSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHRocm90dGxlO1xuIiwiLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZm9yRWFjaGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gKi9cbmZ1bmN0aW9uIGFycmF5RWFjaChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGlmIChpdGVyYXRlZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkgPT09IGZhbHNlKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGFycmF5O1xufVxuXG5leHBvcnQgZGVmYXVsdCBhcnJheUVhY2g7XG4iLCJpbXBvcnQgb3ZlckFyZyBmcm9tICcuL19vdmVyQXJnLmpzJztcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZUtleXMgPSBvdmVyQXJnKE9iamVjdC5rZXlzLCBPYmplY3QpO1xuXG5leHBvcnQgZGVmYXVsdCBuYXRpdmVLZXlzO1xuIiwiaW1wb3J0IGlzUHJvdG90eXBlIGZyb20gJy4vX2lzUHJvdG90eXBlLmpzJztcbmltcG9ydCBuYXRpdmVLZXlzIGZyb20gJy4vX25hdGl2ZUtleXMuanMnO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmtleXNgIHdoaWNoIGRvZXNuJ3QgdHJlYXQgc3BhcnNlIGFycmF5cyBhcyBkZW5zZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gYmFzZUtleXMob2JqZWN0KSB7XG4gIGlmICghaXNQcm90b3R5cGUob2JqZWN0KSkge1xuICAgIHJldHVybiBuYXRpdmVLZXlzKG9iamVjdCk7XG4gIH1cbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gT2JqZWN0KG9iamVjdCkpIHtcbiAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiYga2V5ICE9ICdjb25zdHJ1Y3RvcicpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VLZXlzO1xuIiwiaW1wb3J0IGFycmF5TGlrZUtleXMgZnJvbSAnLi9fYXJyYXlMaWtlS2V5cy5qcyc7XG5pbXBvcnQgYmFzZUtleXMgZnJvbSAnLi9fYmFzZUtleXMuanMnO1xuaW1wb3J0IGlzQXJyYXlMaWtlIGZyb20gJy4vaXNBcnJheUxpa2UuanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIGBvYmplY3RgLlxuICpcbiAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLiBTZWUgdGhlXG4gKiBbRVMgc3BlY10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LmtleXMpXG4gKiBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5hID0gMTtcbiAqICAgdGhpcy5iID0gMjtcbiAqIH1cbiAqXG4gKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICpcbiAqIF8ua2V5cyhuZXcgRm9vKTtcbiAqIC8vID0+IFsnYScsICdiJ10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAqXG4gKiBfLmtleXMoJ2hpJyk7XG4gKiAvLyA9PiBbJzAnLCAnMSddXG4gKi9cbmZ1bmN0aW9uIGtleXMob2JqZWN0KSB7XG4gIHJldHVybiBpc0FycmF5TGlrZShvYmplY3QpID8gYXJyYXlMaWtlS2V5cyhvYmplY3QpIDogYmFzZUtleXMob2JqZWN0KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQga2V5cztcbiIsImltcG9ydCBiYXNlRm9yT3duIGZyb20gJy4vX2Jhc2VGb3JPd24uanMnO1xuaW1wb3J0IGNyZWF0ZUJhc2VFYWNoIGZyb20gJy4vX2NyZWF0ZUJhc2VFYWNoLmpzJztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mb3JFYWNoYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIGBjb2xsZWN0aW9uYC5cbiAqL1xudmFyIGJhc2VFYWNoID0gY3JlYXRlQmFzZUVhY2goYmFzZUZvck93bik7XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VFYWNoO1xuIiwiaW1wb3J0IGlzQXJyYXlMaWtlIGZyb20gJy4vaXNBcnJheUxpa2UuanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBgYmFzZUVhY2hgIG9yIGBiYXNlRWFjaFJpZ2h0YCBmdW5jdGlvbi5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZWFjaEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGl0ZXJhdGUgb3ZlciBhIGNvbGxlY3Rpb24uXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJhc2UgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJhc2VFYWNoKGVhY2hGdW5jLCBmcm9tUmlnaHQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGNvbGxlY3Rpb247XG4gICAgfVxuICAgIGlmICghaXNBcnJheUxpa2UoY29sbGVjdGlvbikpIHtcbiAgICAgIHJldHVybiBlYWNoRnVuYyhjb2xsZWN0aW9uLCBpdGVyYXRlZSk7XG4gICAgfVxuICAgIHZhciBsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aCxcbiAgICAgICAgaW5kZXggPSBmcm9tUmlnaHQgPyBsZW5ndGggOiAtMSxcbiAgICAgICAgaXRlcmFibGUgPSBPYmplY3QoY29sbGVjdGlvbik7XG5cbiAgICB3aGlsZSAoKGZyb21SaWdodCA/IGluZGV4LS0gOiArK2luZGV4IDwgbGVuZ3RoKSkge1xuICAgICAgaWYgKGl0ZXJhdGVlKGl0ZXJhYmxlW2luZGV4XSwgaW5kZXgsIGl0ZXJhYmxlKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjb2xsZWN0aW9uO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVCYXNlRWFjaDtcbiIsImltcG9ydCBiYXNlRm9yIGZyb20gJy4vX2Jhc2VGb3IuanMnO1xuaW1wb3J0IGtleXMgZnJvbSAnLi9rZXlzLmpzJztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mb3JPd25gIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG5mdW5jdGlvbiBiYXNlRm9yT3duKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgcmV0dXJuIG9iamVjdCAmJiBiYXNlRm9yKG9iamVjdCwgaXRlcmF0ZWUsIGtleXMpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlRm9yT3duO1xuIiwiaW1wb3J0IGFycmF5RWFjaCBmcm9tICcuL19hcnJheUVhY2guanMnO1xuaW1wb3J0IGJhc2VFYWNoIGZyb20gJy4vX2Jhc2VFYWNoLmpzJztcbmltcG9ydCBjYXN0RnVuY3Rpb24gZnJvbSAnLi9fY2FzdEZ1bmN0aW9uLmpzJztcbmltcG9ydCBpc0FycmF5IGZyb20gJy4vaXNBcnJheS5qcyc7XG5cbi8qKlxuICogSXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAgYW5kIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgZWFjaCBlbGVtZW50LlxuICogVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAqIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb24gZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAqXG4gKiAqKk5vdGU6KiogQXMgd2l0aCBvdGhlciBcIkNvbGxlY3Rpb25zXCIgbWV0aG9kcywgb2JqZWN0cyB3aXRoIGEgXCJsZW5ndGhcIlxuICogcHJvcGVydHkgYXJlIGl0ZXJhdGVkIGxpa2UgYXJyYXlzLiBUbyBhdm9pZCB0aGlzIGJlaGF2aW9yIHVzZSBgXy5mb3JJbmBcbiAqIG9yIGBfLmZvck93bmAgZm9yIG9iamVjdCBpdGVyYXRpb24uXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGFsaWFzIGVhY2hcbiAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgYGNvbGxlY3Rpb25gLlxuICogQHNlZSBfLmZvckVhY2hSaWdodFxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmZvckVhY2goWzEsIDJdLCBmdW5jdGlvbih2YWx1ZSkge1xuICogICBjb25zb2xlLmxvZyh2YWx1ZSk7XG4gKiB9KTtcbiAqIC8vID0+IExvZ3MgYDFgIHRoZW4gYDJgLlxuICpcbiAqIF8uZm9yRWFjaCh7ICdhJzogMSwgJ2InOiAyIH0sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAqICAgY29uc29sZS5sb2coa2V5KTtcbiAqIH0pO1xuICogLy8gPT4gTG9ncyAnYScgdGhlbiAnYicgKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZCkuXG4gKi9cbmZ1bmN0aW9uIGZvckVhY2goY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlFYWNoIDogYmFzZUVhY2g7XG4gIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGNhc3RGdW5jdGlvbihpdGVyYXRlZSkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmb3JFYWNoO1xuIiwiaW1wb3J0IGlkZW50aXR5IGZyb20gJy4vaWRlbnRpdHkuanMnO1xuXG4vKipcbiAqIENhc3RzIGB2YWx1ZWAgdG8gYGlkZW50aXR5YCBpZiBpdCdzIG5vdCBhIGZ1bmN0aW9uLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGNhc3QgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNhc3RGdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdmdW5jdGlvbicgPyB2YWx1ZSA6IGlkZW50aXR5O1xufVxuXG5leHBvcnQgZGVmYXVsdCBjYXN0RnVuY3Rpb247XG4iLCJpbXBvcnQgZWFjaCBmcm9tICdsb2Rhc2gtZXMvZWFjaCc7XG5pbXBvcnQgdGlueWNvbG9yIGZyb20gJ3Rpbnljb2xvcjInO1xuXG5leHBvcnQgdmFyIHNpbXBsZUNoZWNrRm9yVmFsaWRDb2xvciA9IGZ1bmN0aW9uIHNpbXBsZUNoZWNrRm9yVmFsaWRDb2xvcihkYXRhKSB7XG4gIHZhciBrZXlzVG9DaGVjayA9IFsncicsICdnJywgJ2InLCAnYScsICdoJywgJ3MnLCAnbCcsICd2J107XG4gIHZhciBjaGVja2VkID0gMDtcbiAgdmFyIHBhc3NlZCA9IDA7XG4gIGVhY2goa2V5c1RvQ2hlY2ssIGZ1bmN0aW9uIChsZXR0ZXIpIHtcbiAgICBpZiAoZGF0YVtsZXR0ZXJdKSB7XG4gICAgICBjaGVja2VkICs9IDE7XG4gICAgICBpZiAoIWlzTmFOKGRhdGFbbGV0dGVyXSkpIHtcbiAgICAgICAgcGFzc2VkICs9IDE7XG4gICAgICB9XG4gICAgICBpZiAobGV0dGVyID09PSAncycgfHwgbGV0dGVyID09PSAnbCcpIHtcbiAgICAgICAgdmFyIHBlcmNlbnRQYXR0ID0gL15cXGQrJSQvO1xuICAgICAgICBpZiAocGVyY2VudFBhdHQudGVzdChkYXRhW2xldHRlcl0pKSB7XG4gICAgICAgICAgcGFzc2VkICs9IDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICByZXR1cm4gY2hlY2tlZCA9PT0gcGFzc2VkID8gZGF0YSA6IGZhbHNlO1xufTtcblxuZXhwb3J0IHZhciB0b1N0YXRlID0gZnVuY3Rpb24gdG9TdGF0ZShkYXRhLCBvbGRIdWUpIHtcbiAgdmFyIGNvbG9yID0gZGF0YS5oZXggPyB0aW55Y29sb3IoZGF0YS5oZXgpIDogdGlueWNvbG9yKGRhdGEpO1xuICB2YXIgaHNsID0gY29sb3IudG9Ic2woKTtcbiAgdmFyIGhzdiA9IGNvbG9yLnRvSHN2KCk7XG4gIHZhciByZ2IgPSBjb2xvci50b1JnYigpO1xuICB2YXIgaGV4ID0gY29sb3IudG9IZXgoKTtcbiAgaWYgKGhzbC5zID09PSAwKSB7XG4gICAgaHNsLmggPSBvbGRIdWUgfHwgMDtcbiAgICBoc3YuaCA9IG9sZEh1ZSB8fCAwO1xuICB9XG4gIHZhciB0cmFuc3BhcmVudCA9IGhleCA9PT0gJzAwMDAwMCcgJiYgcmdiLmEgPT09IDA7XG5cbiAgcmV0dXJuIHtcbiAgICBoc2w6IGhzbCxcbiAgICBoZXg6IHRyYW5zcGFyZW50ID8gJ3RyYW5zcGFyZW50JyA6ICcjJyArIGhleCxcbiAgICByZ2I6IHJnYixcbiAgICBoc3Y6IGhzdixcbiAgICBvbGRIdWU6IGRhdGEuaCB8fCBvbGRIdWUgfHwgaHNsLmgsXG4gICAgc291cmNlOiBkYXRhLnNvdXJjZVxuICB9O1xufTtcblxuZXhwb3J0IHZhciBpc1ZhbGlkSGV4ID0gZnVuY3Rpb24gaXNWYWxpZEhleChoZXgpIHtcbiAgaWYgKGhleCA9PT0gJ3RyYW5zcGFyZW50Jykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIC8vIGRpc2FibGUgaGV4NCBhbmQgaGV4OFxuICB2YXIgbGggPSBTdHJpbmcoaGV4KS5jaGFyQXQoMCkgPT09ICcjJyA/IDEgOiAwO1xuICByZXR1cm4gaGV4Lmxlbmd0aCAhPT0gNCArIGxoICYmIGhleC5sZW5ndGggPCA3ICsgbGggJiYgdGlueWNvbG9yKGhleCkuaXNWYWxpZCgpO1xufTtcblxuZXhwb3J0IHZhciBnZXRDb250cmFzdGluZ0NvbG9yID0gZnVuY3Rpb24gZ2V0Q29udHJhc3RpbmdDb2xvcihkYXRhKSB7XG4gIGlmICghZGF0YSkge1xuICAgIHJldHVybiAnI2ZmZic7XG4gIH1cbiAgdmFyIGNvbCA9IHRvU3RhdGUoZGF0YSk7XG4gIGlmIChjb2wuaGV4ID09PSAndHJhbnNwYXJlbnQnKSB7XG4gICAgcmV0dXJuICdyZ2JhKDAsMCwwLDAuNCknO1xuICB9XG4gIHZhciB5aXEgPSAoY29sLnJnYi5yICogMjk5ICsgY29sLnJnYi5nICogNTg3ICsgY29sLnJnYi5iICogMTE0KSAvIDEwMDA7XG4gIHJldHVybiB5aXEgPj0gMTI4ID8gJyMwMDAnIDogJyNmZmYnO1xufTtcblxuZXhwb3J0IHZhciByZWQgPSB7XG4gIGhzbDogeyBhOiAxLCBoOiAwLCBsOiAwLjUsIHM6IDEgfSxcbiAgaGV4OiAnI2ZmMDAwMCcsXG4gIHJnYjogeyByOiAyNTUsIGc6IDAsIGI6IDAsIGE6IDEgfSxcbiAgaHN2OiB7IGg6IDAsIHM6IDEsIHY6IDEsIGE6IDEgfVxufTtcblxuZXhwb3J0IHZhciBpc3ZhbGlkQ29sb3JTdHJpbmcgPSBmdW5jdGlvbiBpc3ZhbGlkQ29sb3JTdHJpbmcoc3RyaW5nLCB0eXBlKSB7XG4gIHZhciBzdHJpbmdXaXRob3V0RGVncmVlID0gc3RyaW5nLnJlcGxhY2UoJ8KwJywgJycpO1xuICByZXR1cm4gdGlueWNvbG9yKHR5cGUgKyAnICgnICsgc3RyaW5nV2l0aG91dERlZ3JlZSArICcpJykuX29rO1xufTsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQsIFB1cmVDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgZGVib3VuY2UgZnJvbSAnbG9kYXNoLWVzL2RlYm91bmNlJztcbmltcG9ydCAqIGFzIGNvbG9yIGZyb20gJy4uLy4uL2hlbHBlcnMvY29sb3InO1xuXG5leHBvcnQgdmFyIENvbG9yV3JhcCA9IGZ1bmN0aW9uIENvbG9yV3JhcChQaWNrZXIpIHtcbiAgdmFyIENvbG9yUGlja2VyID0gZnVuY3Rpb24gKF9yZWYpIHtcbiAgICBfaW5oZXJpdHMoQ29sb3JQaWNrZXIsIF9yZWYpO1xuXG4gICAgZnVuY3Rpb24gQ29sb3JQaWNrZXIocHJvcHMpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb2xvclBpY2tlcik7XG5cbiAgICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChDb2xvclBpY2tlci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKENvbG9yUGlja2VyKSkuY2FsbCh0aGlzKSk7XG5cbiAgICAgIF90aGlzLmhhbmRsZUNoYW5nZSA9IGZ1bmN0aW9uIChkYXRhLCBldmVudCkge1xuICAgICAgICB2YXIgaXNWYWxpZENvbG9yID0gY29sb3Iuc2ltcGxlQ2hlY2tGb3JWYWxpZENvbG9yKGRhdGEpO1xuICAgICAgICBpZiAoaXNWYWxpZENvbG9yKSB7XG4gICAgICAgICAgdmFyIGNvbG9ycyA9IGNvbG9yLnRvU3RhdGUoZGF0YSwgZGF0YS5oIHx8IF90aGlzLnN0YXRlLm9sZEh1ZSk7XG4gICAgICAgICAgX3RoaXMuc2V0U3RhdGUoY29sb3JzKTtcbiAgICAgICAgICBfdGhpcy5wcm9wcy5vbkNoYW5nZUNvbXBsZXRlICYmIF90aGlzLmRlYm91bmNlKF90aGlzLnByb3BzLm9uQ2hhbmdlQ29tcGxldGUsIGNvbG9ycywgZXZlbnQpO1xuICAgICAgICAgIF90aGlzLnByb3BzLm9uQ2hhbmdlICYmIF90aGlzLnByb3BzLm9uQ2hhbmdlKGNvbG9ycywgZXZlbnQpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBfdGhpcy5oYW5kbGVTd2F0Y2hIb3ZlciA9IGZ1bmN0aW9uIChkYXRhLCBldmVudCkge1xuICAgICAgICB2YXIgaXNWYWxpZENvbG9yID0gY29sb3Iuc2ltcGxlQ2hlY2tGb3JWYWxpZENvbG9yKGRhdGEpO1xuICAgICAgICBpZiAoaXNWYWxpZENvbG9yKSB7XG4gICAgICAgICAgdmFyIGNvbG9ycyA9IGNvbG9yLnRvU3RhdGUoZGF0YSwgZGF0YS5oIHx8IF90aGlzLnN0YXRlLm9sZEh1ZSk7XG4gICAgICAgICAgX3RoaXMucHJvcHMub25Td2F0Y2hIb3ZlciAmJiBfdGhpcy5wcm9wcy5vblN3YXRjaEhvdmVyKGNvbG9ycywgZXZlbnQpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBfdGhpcy5zdGF0ZSA9IF9leHRlbmRzKHt9LCBjb2xvci50b1N0YXRlKHByb3BzLmNvbG9yLCAwKSk7XG5cbiAgICAgIF90aGlzLmRlYm91bmNlID0gZGVib3VuY2UoZnVuY3Rpb24gKGZuLCBkYXRhLCBldmVudCkge1xuICAgICAgICBmbihkYXRhLCBldmVudCk7XG4gICAgICB9LCAxMDApO1xuICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhDb2xvclBpY2tlciwgW3tcbiAgICAgIGtleTogJ3JlbmRlcicsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICB2YXIgb3B0aW9uYWxFdmVudHMgPSB7fTtcbiAgICAgICAgaWYgKHRoaXMucHJvcHMub25Td2F0Y2hIb3Zlcikge1xuICAgICAgICAgIG9wdGlvbmFsRXZlbnRzLm9uU3dhdGNoSG92ZXIgPSB0aGlzLmhhbmRsZVN3YXRjaEhvdmVyO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUGlja2VyLCBfZXh0ZW5kcyh7fSwgdGhpcy5wcm9wcywgdGhpcy5zdGF0ZSwge1xuICAgICAgICAgIG9uQ2hhbmdlOiB0aGlzLmhhbmRsZUNoYW5nZVxuICAgICAgICB9LCBvcHRpb25hbEV2ZW50cykpO1xuICAgICAgfVxuICAgIH1dLCBbe1xuICAgICAga2V5OiAnZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMobmV4dFByb3BzLCBzdGF0ZSkge1xuICAgICAgICByZXR1cm4gX2V4dGVuZHMoe30sIGNvbG9yLnRvU3RhdGUobmV4dFByb3BzLmNvbG9yLCBzdGF0ZS5vbGRIdWUpKTtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gQ29sb3JQaWNrZXI7XG4gIH0oUHVyZUNvbXBvbmVudCB8fCBDb21wb25lbnQpO1xuXG4gIENvbG9yUGlja2VyLnByb3BUeXBlcyA9IF9leHRlbmRzKHt9LCBQaWNrZXIucHJvcFR5cGVzKTtcblxuICBDb2xvclBpY2tlci5kZWZhdWx0UHJvcHMgPSBfZXh0ZW5kcyh7fSwgUGlja2VyLmRlZmF1bHRQcm9wcywge1xuICAgIGNvbG9yOiB7XG4gICAgICBoOiAyNTAsXG4gICAgICBzOiAwLjUwLFxuICAgICAgbDogMC4yMCxcbiAgICAgIGE6IDFcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBDb2xvclBpY2tlcjtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IENvbG9yV3JhcDsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLWludmFsaWQtdGhpcyAqL1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuZXhwb3J0IHZhciBoYW5kbGVGb2N1cyA9IGZ1bmN0aW9uIGhhbmRsZUZvY3VzKENvbXBvbmVudCkge1xuICB2YXIgU3BhbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJ3NwYW4nO1xuICByZXR1cm4gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoRm9jdXMsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gRm9jdXMoKSB7XG4gICAgICB2YXIgX3JlZjtcblxuICAgICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEZvY3VzKTtcblxuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX3JlZiA9IEZvY3VzLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoRm9jdXMpKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5zdGF0ZSA9IHsgZm9jdXM6IGZhbHNlIH0sIF90aGlzLmhhbmRsZUZvY3VzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMuc2V0U3RhdGUoeyBmb2N1czogdHJ1ZSB9KTtcbiAgICAgIH0sIF90aGlzLmhhbmRsZUJsdXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5zZXRTdGF0ZSh7IGZvY3VzOiBmYWxzZSB9KTtcbiAgICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhGb2N1cywgW3tcbiAgICAgIGtleTogJ3JlbmRlcicsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICBTcGFuLFxuICAgICAgICAgIHsgb25Gb2N1czogdGhpcy5oYW5kbGVGb2N1cywgb25CbHVyOiB0aGlzLmhhbmRsZUJsdXIgfSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe30sIHRoaXMucHJvcHMsIHRoaXMuc3RhdGUpKVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBGb2N1cztcbiAgfShSZWFjdC5Db21wb25lbnQpO1xufTsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHJlYWN0Q1NTIGZyb20gJ3JlYWN0Y3NzJztcbmltcG9ydCB7IGhhbmRsZUZvY3VzIH0gZnJvbSAnLi4vLi4vaGVscGVycy9pbnRlcmFjdGlvbic7XG5cbmltcG9ydCBDaGVja2JvYXJkIGZyb20gJy4vQ2hlY2tib2FyZCc7XG5cbnZhciBFTlRFUiA9IDEzO1xuXG5leHBvcnQgdmFyIFN3YXRjaCA9IGZ1bmN0aW9uIFN3YXRjaChfcmVmKSB7XG4gIHZhciBjb2xvciA9IF9yZWYuY29sb3IsXG4gICAgICBzdHlsZSA9IF9yZWYuc3R5bGUsXG4gICAgICBfcmVmJG9uQ2xpY2sgPSBfcmVmLm9uQ2xpY2ssXG4gICAgICBvbkNsaWNrID0gX3JlZiRvbkNsaWNrID09PSB1bmRlZmluZWQgPyBmdW5jdGlvbiAoKSB7fSA6IF9yZWYkb25DbGljayxcbiAgICAgIG9uSG92ZXIgPSBfcmVmLm9uSG92ZXIsXG4gICAgICBfcmVmJHRpdGxlID0gX3JlZi50aXRsZSxcbiAgICAgIHRpdGxlID0gX3JlZiR0aXRsZSA9PT0gdW5kZWZpbmVkID8gY29sb3IgOiBfcmVmJHRpdGxlLFxuICAgICAgY2hpbGRyZW4gPSBfcmVmLmNoaWxkcmVuLFxuICAgICAgZm9jdXMgPSBfcmVmLmZvY3VzLFxuICAgICAgX3JlZiRmb2N1c1N0eWxlID0gX3JlZi5mb2N1c1N0eWxlLFxuICAgICAgZm9jdXNTdHlsZSA9IF9yZWYkZm9jdXNTdHlsZSA9PT0gdW5kZWZpbmVkID8ge30gOiBfcmVmJGZvY3VzU3R5bGU7XG5cbiAgdmFyIHRyYW5zcGFyZW50ID0gY29sb3IgPT09ICd0cmFuc3BhcmVudCc7XG4gIHZhciBzdHlsZXMgPSByZWFjdENTUyh7XG4gICAgZGVmYXVsdDoge1xuICAgICAgc3dhdGNoOiBfZXh0ZW5kcyh7XG4gICAgICAgIGJhY2tncm91bmQ6IGNvbG9yLFxuICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgY3Vyc29yOiAncG9pbnRlcicsXG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICBvdXRsaW5lOiAnbm9uZSdcbiAgICAgIH0sIHN0eWxlLCBmb2N1cyA/IGZvY3VzU3R5bGUgOiB7fSlcbiAgICB9XG4gIH0pO1xuXG4gIHZhciBoYW5kbGVDbGljayA9IGZ1bmN0aW9uIGhhbmRsZUNsaWNrKGUpIHtcbiAgICByZXR1cm4gb25DbGljayhjb2xvciwgZSk7XG4gIH07XG4gIHZhciBoYW5kbGVLZXlEb3duID0gZnVuY3Rpb24gaGFuZGxlS2V5RG93bihlKSB7XG4gICAgcmV0dXJuIGUua2V5Q29kZSA9PT0gRU5URVIgJiYgb25DbGljayhjb2xvciwgZSk7XG4gIH07XG4gIHZhciBoYW5kbGVIb3ZlciA9IGZ1bmN0aW9uIGhhbmRsZUhvdmVyKGUpIHtcbiAgICByZXR1cm4gb25Ib3Zlcihjb2xvciwgZSk7XG4gIH07XG5cbiAgdmFyIG9wdGlvbmFsRXZlbnRzID0ge307XG4gIGlmIChvbkhvdmVyKSB7XG4gICAgb3B0aW9uYWxFdmVudHMub25Nb3VzZU92ZXIgPSBoYW5kbGVIb3ZlcjtcbiAgfVxuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICdkaXYnLFxuICAgIF9leHRlbmRzKHtcbiAgICAgIHN0eWxlOiBzdHlsZXMuc3dhdGNoLFxuICAgICAgb25DbGljazogaGFuZGxlQ2xpY2ssXG4gICAgICB0aXRsZTogdGl0bGUsXG4gICAgICB0YWJJbmRleDogMCxcbiAgICAgIG9uS2V5RG93bjogaGFuZGxlS2V5RG93blxuICAgIH0sIG9wdGlvbmFsRXZlbnRzKSxcbiAgICBjaGlsZHJlbixcbiAgICB0cmFuc3BhcmVudCAmJiBSZWFjdC5jcmVhdGVFbGVtZW50KENoZWNrYm9hcmQsIHtcbiAgICAgIGJvcmRlclJhZGl1czogc3R5bGVzLnN3YXRjaC5ib3JkZXJSYWRpdXMsXG4gICAgICBib3hTaGFkb3c6ICdpbnNldCAwIDAgMCAxcHggcmdiYSgwLDAsMCwwLjEpJ1xuICAgIH0pXG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBoYW5kbGVGb2N1cyhTd2F0Y2gpOyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgcmVhY3RDU1MgZnJvbSAncmVhY3Rjc3MnO1xuXG5pbXBvcnQgeyBDb2xvcldyYXAsIEFscGhhIH0gZnJvbSAnLi4vY29tbW9uJztcbmltcG9ydCBBbHBoYVBvaW50ZXIgZnJvbSAnLi9BbHBoYVBvaW50ZXInO1xuXG5leHBvcnQgdmFyIEFscGhhUGlja2VyID0gZnVuY3Rpb24gQWxwaGFQaWNrZXIoX3JlZikge1xuICB2YXIgcmdiID0gX3JlZi5yZ2IsXG4gICAgICBoc2wgPSBfcmVmLmhzbCxcbiAgICAgIHdpZHRoID0gX3JlZi53aWR0aCxcbiAgICAgIGhlaWdodCA9IF9yZWYuaGVpZ2h0LFxuICAgICAgb25DaGFuZ2UgPSBfcmVmLm9uQ2hhbmdlLFxuICAgICAgZGlyZWN0aW9uID0gX3JlZi5kaXJlY3Rpb24sXG4gICAgICBzdHlsZSA9IF9yZWYuc3R5bGUsXG4gICAgICByZW5kZXJlcnMgPSBfcmVmLnJlbmRlcmVycyxcbiAgICAgIHBvaW50ZXIgPSBfcmVmLnBvaW50ZXIsXG4gICAgICBfcmVmJGNsYXNzTmFtZSA9IF9yZWYuY2xhc3NOYW1lLFxuICAgICAgY2xhc3NOYW1lID0gX3JlZiRjbGFzc05hbWUgPT09IHVuZGVmaW5lZCA/ICcnIDogX3JlZiRjbGFzc05hbWU7XG5cbiAgdmFyIHN0eWxlcyA9IHJlYWN0Q1NTKHtcbiAgICAnZGVmYXVsdCc6IHtcbiAgICAgIHBpY2tlcjoge1xuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgICBoZWlnaHQ6IGhlaWdodFxuICAgICAgfSxcbiAgICAgIGFscGhhOiB7XG4gICAgICAgIHJhZGl1czogJzJweCcsXG4gICAgICAgIHN0eWxlOiBzdHlsZVxuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgJ2RpdicsXG4gICAgeyBzdHlsZTogc3R5bGVzLnBpY2tlciwgY2xhc3NOYW1lOiAnYWxwaGEtcGlja2VyICcgKyBjbGFzc05hbWUgfSxcbiAgICBSZWFjdC5jcmVhdGVFbGVtZW50KEFscGhhLCBfZXh0ZW5kcyh7fSwgc3R5bGVzLmFscGhhLCB7XG4gICAgICByZ2I6IHJnYixcbiAgICAgIGhzbDogaHNsLFxuICAgICAgcG9pbnRlcjogcG9pbnRlcixcbiAgICAgIHJlbmRlcmVyczogcmVuZGVyZXJzLFxuICAgICAgb25DaGFuZ2U6IG9uQ2hhbmdlLFxuICAgICAgZGlyZWN0aW9uOiBkaXJlY3Rpb25cbiAgICB9KSlcbiAgKTtcbn07XG5cbkFscGhhUGlja2VyLmRlZmF1bHRQcm9wcyA9IHtcbiAgd2lkdGg6ICczMTZweCcsXG4gIGhlaWdodDogJzE2cHgnLFxuICBkaXJlY3Rpb246ICdob3Jpem9udGFsJyxcbiAgcG9pbnRlcjogQWxwaGFQb2ludGVyXG59O1xuXG5leHBvcnQgZGVmYXVsdCBDb2xvcldyYXAoQWxwaGFQaWNrZXIpOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgcmVhY3RDU1MgZnJvbSAncmVhY3Rjc3MnO1xuXG5leHBvcnQgdmFyIEFscGhhUG9pbnRlciA9IGZ1bmN0aW9uIEFscGhhUG9pbnRlcihfcmVmKSB7XG4gIHZhciBkaXJlY3Rpb24gPSBfcmVmLmRpcmVjdGlvbjtcblxuICB2YXIgc3R5bGVzID0gcmVhY3RDU1Moe1xuICAgICdkZWZhdWx0Jzoge1xuICAgICAgcGlja2VyOiB7XG4gICAgICAgIHdpZHRoOiAnMThweCcsXG4gICAgICAgIGhlaWdodDogJzE4cHgnLFxuICAgICAgICBib3JkZXJSYWRpdXM6ICc1MCUnLFxuICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoLTlweCwgLTFweCknLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdyZ2IoMjQ4LCAyNDgsIDI0OCknLFxuICAgICAgICBib3hTaGFkb3c6ICcwIDFweCA0cHggMCByZ2JhKDAsIDAsIDAsIDAuMzcpJ1xuICAgICAgfVxuICAgIH0sXG4gICAgJ3ZlcnRpY2FsJzoge1xuICAgICAgcGlja2VyOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgtM3B4LCAtOXB4KSdcbiAgICAgIH1cbiAgICB9XG4gIH0sIHsgdmVydGljYWw6IGRpcmVjdGlvbiA9PT0gJ3ZlcnRpY2FsJyB9KTtcblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBzdHlsZTogc3R5bGVzLnBpY2tlciB9KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEFscGhhUG9pbnRlcjsiLCIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5tYXBgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZVxuICogc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gYXJyYXlNYXAoYXJyYXksIGl0ZXJhdGVlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgcmVzdWx0W2luZGV4XSA9IGl0ZXJhdGVlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBhcnJheU1hcDtcbiIsImltcG9ydCBNYXBDYWNoZSBmcm9tICcuL19NYXBDYWNoZS5qcyc7XG5pbXBvcnQgc2V0Q2FjaGVBZGQgZnJvbSAnLi9fc2V0Q2FjaGVBZGQuanMnO1xuaW1wb3J0IHNldENhY2hlSGFzIGZyb20gJy4vX3NldENhY2hlSGFzLmpzJztcblxuLyoqXG4gKlxuICogQ3JlYXRlcyBhbiBhcnJheSBjYWNoZSBvYmplY3QgdG8gc3RvcmUgdW5pcXVlIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBTZXRDYWNoZSh2YWx1ZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSB2YWx1ZXMgPT0gbnVsbCA/IDAgOiB2YWx1ZXMubGVuZ3RoO1xuXG4gIHRoaXMuX19kYXRhX18gPSBuZXcgTWFwQ2FjaGU7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdGhpcy5hZGQodmFsdWVzW2luZGV4XSk7XG4gIH1cbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYFNldENhY2hlYC5cblNldENhY2hlLnByb3RvdHlwZS5hZGQgPSBTZXRDYWNoZS5wcm90b3R5cGUucHVzaCA9IHNldENhY2hlQWRkO1xuU2V0Q2FjaGUucHJvdG90eXBlLmhhcyA9IHNldENhY2hlSGFzO1xuXG5leHBvcnQgZGVmYXVsdCBTZXRDYWNoZTtcbiIsIi8qKiBVc2VkIHRvIHN0YW5kLWluIGZvciBgdW5kZWZpbmVkYCBoYXNoIHZhbHVlcy4gKi9cbnZhciBIQVNIX1VOREVGSU5FRCA9ICdfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fJztcblxuLyoqXG4gKiBBZGRzIGB2YWx1ZWAgdG8gdGhlIGFycmF5IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBhZGRcbiAqIEBtZW1iZXJPZiBTZXRDYWNoZVxuICogQGFsaWFzIHB1c2hcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNhY2hlLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIHNldENhY2hlQWRkKHZhbHVlKSB7XG4gIHRoaXMuX19kYXRhX18uc2V0KHZhbHVlLCBIQVNIX1VOREVGSU5FRCk7XG4gIHJldHVybiB0aGlzO1xufVxuXG5leHBvcnQgZGVmYXVsdCBzZXRDYWNoZUFkZDtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgaW4gdGhlIGFycmF5IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBTZXRDYWNoZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gc2V0Q2FjaGVIYXModmFsdWUpIHtcbiAgcmV0dXJuIHRoaXMuX19kYXRhX18uaGFzKHZhbHVlKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc2V0Q2FjaGVIYXM7XG4iLCIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zb21lYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWVcbiAqIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFueSBlbGVtZW50IHBhc3NlcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICogIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYXJyYXlTb21lKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGlmIChwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBhcnJheVNvbWU7XG4iLCJpbXBvcnQgU2V0Q2FjaGUgZnJvbSAnLi9fU2V0Q2FjaGUuanMnO1xuaW1wb3J0IGFycmF5U29tZSBmcm9tICcuL19hcnJheVNvbWUuanMnO1xuaW1wb3J0IGNhY2hlSGFzIGZyb20gJy4vX2NhY2hlSGFzLmpzJztcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG52YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxLFxuICAgIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcgPSAyO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3IgYXJyYXlzIHdpdGggc3VwcG9ydCBmb3JcbiAqIHBhcnRpYWwgZGVlcCBjb21wYXJpc29ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge0FycmF5fSBvdGhlciBUaGUgb3RoZXIgYXJyYXkgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYGFycmF5YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBhcnJheXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gZXF1YWxBcnJheXMoYXJyYXksIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcsXG4gICAgICBhcnJMZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICBvdGhMZW5ndGggPSBvdGhlci5sZW5ndGg7XG5cbiAgaWYgKGFyckxlbmd0aCAhPSBvdGhMZW5ndGggJiYgIShpc1BhcnRpYWwgJiYgb3RoTGVuZ3RoID4gYXJyTGVuZ3RoKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvLyBDaGVjayB0aGF0IGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICB2YXIgYXJyU3RhY2tlZCA9IHN0YWNrLmdldChhcnJheSk7XG4gIHZhciBvdGhTdGFja2VkID0gc3RhY2suZ2V0KG90aGVyKTtcbiAgaWYgKGFyclN0YWNrZWQgJiYgb3RoU3RhY2tlZCkge1xuICAgIHJldHVybiBhcnJTdGFja2VkID09IG90aGVyICYmIG90aFN0YWNrZWQgPT0gYXJyYXk7XG4gIH1cbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSB0cnVlLFxuICAgICAgc2VlbiA9IChiaXRtYXNrICYgQ09NUEFSRV9VTk9SREVSRURfRkxBRykgPyBuZXcgU2V0Q2FjaGUgOiB1bmRlZmluZWQ7XG5cbiAgc3RhY2suc2V0KGFycmF5LCBvdGhlcik7XG4gIHN0YWNrLnNldChvdGhlciwgYXJyYXkpO1xuXG4gIC8vIElnbm9yZSBub24taW5kZXggcHJvcGVydGllcy5cbiAgd2hpbGUgKCsraW5kZXggPCBhcnJMZW5ndGgpIHtcbiAgICB2YXIgYXJyVmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgIG90aFZhbHVlID0gb3RoZXJbaW5kZXhdO1xuXG4gICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgIHZhciBjb21wYXJlZCA9IGlzUGFydGlhbFxuICAgICAgICA/IGN1c3RvbWl6ZXIob3RoVmFsdWUsIGFyclZhbHVlLCBpbmRleCwgb3RoZXIsIGFycmF5LCBzdGFjaylcbiAgICAgICAgOiBjdXN0b21pemVyKGFyclZhbHVlLCBvdGhWYWx1ZSwgaW5kZXgsIGFycmF5LCBvdGhlciwgc3RhY2spO1xuICAgIH1cbiAgICBpZiAoY29tcGFyZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKGNvbXBhcmVkKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICBpZiAoc2Vlbikge1xuICAgICAgaWYgKCFhcnJheVNvbWUob3RoZXIsIGZ1bmN0aW9uKG90aFZhbHVlLCBvdGhJbmRleCkge1xuICAgICAgICAgICAgaWYgKCFjYWNoZUhhcyhzZWVuLCBvdGhJbmRleCkgJiZcbiAgICAgICAgICAgICAgICAoYXJyVmFsdWUgPT09IG90aFZhbHVlIHx8IGVxdWFsRnVuYyhhcnJWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHNlZW4ucHVzaChvdGhJbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSkpIHtcbiAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIShcbiAgICAgICAgICBhcnJWYWx1ZSA9PT0gb3RoVmFsdWUgfHxcbiAgICAgICAgICAgIGVxdWFsRnVuYyhhcnJWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKVxuICAgICAgICApKSB7XG4gICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICBzdGFja1snZGVsZXRlJ10oYXJyYXkpO1xuICBzdGFja1snZGVsZXRlJ10ob3RoZXIpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBlcXVhbEFycmF5cztcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGEgYGNhY2hlYCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gY2FjaGUgVGhlIGNhY2hlIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGNhY2hlSGFzKGNhY2hlLCBrZXkpIHtcbiAgcmV0dXJuIGNhY2hlLmhhcyhrZXkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjYWNoZUhhcztcbiIsIi8qKlxuICogQ29udmVydHMgYG1hcGAgdG8gaXRzIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGtleS12YWx1ZSBwYWlycy5cbiAqL1xuZnVuY3Rpb24gbWFwVG9BcnJheShtYXApIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBBcnJheShtYXAuc2l6ZSk7XG5cbiAgbWFwLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgIHJlc3VsdFsrK2luZGV4XSA9IFtrZXksIHZhbHVlXTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1hcFRvQXJyYXk7XG4iLCIvKipcbiAqIENvbnZlcnRzIGBzZXRgIHRvIGFuIGFycmF5IG9mIGl0cyB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzZXQgVGhlIHNldCB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB2YWx1ZXMuXG4gKi9cbmZ1bmN0aW9uIHNldFRvQXJyYXkoc2V0KSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gQXJyYXkoc2V0LnNpemUpO1xuXG4gIHNldC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmVzdWx0WysraW5kZXhdID0gdmFsdWU7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBzZXRUb0FycmF5O1xuIiwiaW1wb3J0IFN5bWJvbCBmcm9tICcuL19TeW1ib2wuanMnO1xuaW1wb3J0IFVpbnQ4QXJyYXkgZnJvbSAnLi9fVWludDhBcnJheS5qcyc7XG5pbXBvcnQgZXEgZnJvbSAnLi9lcS5qcyc7XG5pbXBvcnQgZXF1YWxBcnJheXMgZnJvbSAnLi9fZXF1YWxBcnJheXMuanMnO1xuaW1wb3J0IG1hcFRvQXJyYXkgZnJvbSAnLi9fbWFwVG9BcnJheS5qcyc7XG5pbXBvcnQgc2V0VG9BcnJheSBmcm9tICcuL19zZXRUb0FycmF5LmpzJztcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG52YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxLFxuICAgIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcgPSAyO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYm9vbFRhZyA9ICdbb2JqZWN0IEJvb2xlYW5dJyxcbiAgICBkYXRlVGFnID0gJ1tvYmplY3QgRGF0ZV0nLFxuICAgIGVycm9yVGFnID0gJ1tvYmplY3QgRXJyb3JdJyxcbiAgICBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICBudW1iZXJUYWcgPSAnW29iamVjdCBOdW1iZXJdJyxcbiAgICByZWdleHBUYWcgPSAnW29iamVjdCBSZWdFeHBdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJyxcbiAgICBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJztcblxudmFyIGFycmF5QnVmZmVyVGFnID0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJyxcbiAgICBkYXRhVmlld1RhZyA9ICdbb2JqZWN0IERhdGFWaWV3XSc7XG5cbi8qKiBVc2VkIHRvIGNvbnZlcnQgc3ltYm9scyB0byBwcmltaXRpdmVzIGFuZCBzdHJpbmdzLiAqL1xudmFyIHN5bWJvbFByb3RvID0gU3ltYm9sID8gU3ltYm9sLnByb3RvdHlwZSA6IHVuZGVmaW5lZCxcbiAgICBzeW1ib2xWYWx1ZU9mID0gc3ltYm9sUHJvdG8gPyBzeW1ib2xQcm90by52YWx1ZU9mIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3IgY29tcGFyaW5nIG9iamVjdHMgb2ZcbiAqIHRoZSBzYW1lIGB0b1N0cmluZ1RhZ2AuXG4gKlxuICogKipOb3RlOioqIFRoaXMgZnVuY3Rpb24gb25seSBzdXBwb3J0cyBjb21wYXJpbmcgdmFsdWVzIHdpdGggdGFncyBvZlxuICogYEJvb2xlYW5gLCBgRGF0ZWAsIGBFcnJvcmAsIGBOdW1iZXJgLCBgUmVnRXhwYCwgb3IgYFN0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0YWcgVGhlIGB0b1N0cmluZ1RhZ2Agb2YgdGhlIG9iamVjdHMgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBlcXVhbEJ5VGFnKG9iamVjdCwgb3RoZXIsIHRhZywgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICBzd2l0Y2ggKHRhZykge1xuICAgIGNhc2UgZGF0YVZpZXdUYWc6XG4gICAgICBpZiAoKG9iamVjdC5ieXRlTGVuZ3RoICE9IG90aGVyLmJ5dGVMZW5ndGgpIHx8XG4gICAgICAgICAgKG9iamVjdC5ieXRlT2Zmc2V0ICE9IG90aGVyLmJ5dGVPZmZzZXQpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIG9iamVjdCA9IG9iamVjdC5idWZmZXI7XG4gICAgICBvdGhlciA9IG90aGVyLmJ1ZmZlcjtcblxuICAgIGNhc2UgYXJyYXlCdWZmZXJUYWc6XG4gICAgICBpZiAoKG9iamVjdC5ieXRlTGVuZ3RoICE9IG90aGVyLmJ5dGVMZW5ndGgpIHx8XG4gICAgICAgICAgIWVxdWFsRnVuYyhuZXcgVWludDhBcnJheShvYmplY3QpLCBuZXcgVWludDhBcnJheShvdGhlcikpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgY2FzZSBib29sVGFnOlxuICAgIGNhc2UgZGF0ZVRhZzpcbiAgICBjYXNlIG51bWJlclRhZzpcbiAgICAgIC8vIENvZXJjZSBib29sZWFucyB0byBgMWAgb3IgYDBgIGFuZCBkYXRlcyB0byBtaWxsaXNlY29uZHMuXG4gICAgICAvLyBJbnZhbGlkIGRhdGVzIGFyZSBjb2VyY2VkIHRvIGBOYU5gLlxuICAgICAgcmV0dXJuIGVxKCtvYmplY3QsICtvdGhlcik7XG5cbiAgICBjYXNlIGVycm9yVGFnOlxuICAgICAgcmV0dXJuIG9iamVjdC5uYW1lID09IG90aGVyLm5hbWUgJiYgb2JqZWN0Lm1lc3NhZ2UgPT0gb3RoZXIubWVzc2FnZTtcblxuICAgIGNhc2UgcmVnZXhwVGFnOlxuICAgIGNhc2Ugc3RyaW5nVGFnOlxuICAgICAgLy8gQ29lcmNlIHJlZ2V4ZXMgdG8gc3RyaW5ncyBhbmQgdHJlYXQgc3RyaW5ncywgcHJpbWl0aXZlcyBhbmQgb2JqZWN0cyxcbiAgICAgIC8vIGFzIGVxdWFsLiBTZWUgaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXJlZ2V4cC5wcm90b3R5cGUudG9zdHJpbmdcbiAgICAgIC8vIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICByZXR1cm4gb2JqZWN0ID09IChvdGhlciArICcnKTtcblxuICAgIGNhc2UgbWFwVGFnOlxuICAgICAgdmFyIGNvbnZlcnQgPSBtYXBUb0FycmF5O1xuXG4gICAgY2FzZSBzZXRUYWc6XG4gICAgICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHO1xuICAgICAgY29udmVydCB8fCAoY29udmVydCA9IHNldFRvQXJyYXkpO1xuXG4gICAgICBpZiAob2JqZWN0LnNpemUgIT0gb3RoZXIuc2l6ZSAmJiAhaXNQYXJ0aWFsKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIC8vIEFzc3VtZSBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgICAgIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KG9iamVjdCk7XG4gICAgICBpZiAoc3RhY2tlZCkge1xuICAgICAgICByZXR1cm4gc3RhY2tlZCA9PSBvdGhlcjtcbiAgICAgIH1cbiAgICAgIGJpdG1hc2sgfD0gQ09NUEFSRV9VTk9SREVSRURfRkxBRztcblxuICAgICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBvYmplY3RzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICBzdGFjay5zZXQob2JqZWN0LCBvdGhlcik7XG4gICAgICB2YXIgcmVzdWx0ID0gZXF1YWxBcnJheXMoY29udmVydChvYmplY3QpLCBjb252ZXJ0KG90aGVyKSwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG4gICAgICBzdGFja1snZGVsZXRlJ10ob2JqZWN0KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG5cbiAgICBjYXNlIHN5bWJvbFRhZzpcbiAgICAgIGlmIChzeW1ib2xWYWx1ZU9mKSB7XG4gICAgICAgIHJldHVybiBzeW1ib2xWYWx1ZU9mLmNhbGwob2JqZWN0KSA9PSBzeW1ib2xWYWx1ZU9mLmNhbGwob3RoZXIpO1xuICAgICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZXF1YWxCeVRhZztcbiIsImltcG9ydCBhcnJheUZpbHRlciBmcm9tICcuL19hcnJheUZpbHRlci5qcyc7XG5pbXBvcnQgc3R1YkFycmF5IGZyb20gJy4vc3R1YkFycmF5LmpzJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgcHJvcGVydHlJc0VudW1lcmFibGUgPSBvYmplY3RQcm90by5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZUdldFN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2Ygc3ltYm9scy5cbiAqL1xudmFyIGdldFN5bWJvbHMgPSAhbmF0aXZlR2V0U3ltYm9scyA/IHN0dWJBcnJheSA6IGZ1bmN0aW9uKG9iamVjdCkge1xuICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gIHJldHVybiBhcnJheUZpbHRlcihuYXRpdmVHZXRTeW1ib2xzKG9iamVjdCksIGZ1bmN0aW9uKHN5bWJvbCkge1xuICAgIHJldHVybiBwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKG9iamVjdCwgc3ltYm9sKTtcbiAgfSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBnZXRTeW1ib2xzO1xuIiwiLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZmlsdGVyYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGFycmF5RmlsdGVyKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgIHJlc3VsdCA9IFtdO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBhcnJheSkpIHtcbiAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBhcnJheUZpbHRlcjtcbiIsIi8qKlxuICogVGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBlbXB0eSBhcnJheS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMTMuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGVtcHR5IGFycmF5LlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgYXJyYXlzID0gXy50aW1lcygyLCBfLnN0dWJBcnJheSk7XG4gKlxuICogY29uc29sZS5sb2coYXJyYXlzKTtcbiAqIC8vID0+IFtbXSwgW11dXG4gKlxuICogY29uc29sZS5sb2coYXJyYXlzWzBdID09PSBhcnJheXNbMV0pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gc3R1YkFycmF5KCkge1xuICByZXR1cm4gW107XG59XG5cbmV4cG9ydCBkZWZhdWx0IHN0dWJBcnJheTtcbiIsImltcG9ydCBiYXNlR2V0QWxsS2V5cyBmcm9tICcuL19iYXNlR2V0QWxsS2V5cy5qcyc7XG5pbXBvcnQgZ2V0U3ltYm9scyBmcm9tICcuL19nZXRTeW1ib2xzLmpzJztcbmltcG9ydCBrZXlzIGZyb20gJy4va2V5cy5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAqL1xuZnVuY3Rpb24gZ2V0QWxsS2V5cyhvYmplY3QpIHtcbiAgcmV0dXJuIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5cywgZ2V0U3ltYm9scyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldEFsbEtleXM7XG4iLCJpbXBvcnQgYXJyYXlQdXNoIGZyb20gJy4vX2FycmF5UHVzaC5qcyc7XG5pbXBvcnQgaXNBcnJheSBmcm9tICcuL2lzQXJyYXkuanMnO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRBbGxLZXlzYCBhbmQgYGdldEFsbEtleXNJbmAgd2hpY2ggdXNlc1xuICogYGtleXNGdW5jYCBhbmQgYHN5bWJvbHNGdW5jYCB0byBnZXQgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kXG4gKiBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGBvYmplY3RgLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gc3ltYm9sc0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5c0Z1bmMsIHN5bWJvbHNGdW5jKSB7XG4gIHZhciByZXN1bHQgPSBrZXlzRnVuYyhvYmplY3QpO1xuICByZXR1cm4gaXNBcnJheShvYmplY3QpID8gcmVzdWx0IDogYXJyYXlQdXNoKHJlc3VsdCwgc3ltYm9sc0Z1bmMob2JqZWN0KSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VHZXRBbGxLZXlzO1xuIiwiLyoqXG4gKiBBcHBlbmRzIHRoZSBlbGVtZW50cyBvZiBgdmFsdWVzYCB0byBgYXJyYXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gYXBwZW5kLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gKi9cbmZ1bmN0aW9uIGFycmF5UHVzaChhcnJheSwgdmFsdWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgIG9mZnNldCA9IGFycmF5Lmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGFycmF5W29mZnNldCArIGluZGV4XSA9IHZhbHVlc1tpbmRleF07XG4gIH1cbiAgcmV0dXJuIGFycmF5O1xufVxuXG5leHBvcnQgZGVmYXVsdCBhcnJheVB1c2g7XG4iLCJpbXBvcnQgZ2V0QWxsS2V5cyBmcm9tICcuL19nZXRBbGxLZXlzLmpzJztcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG52YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3Igb2JqZWN0cyB3aXRoIHN1cHBvcnQgZm9yXG4gKiBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBlcXVhbE9iamVjdHMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHLFxuICAgICAgb2JqUHJvcHMgPSBnZXRBbGxLZXlzKG9iamVjdCksXG4gICAgICBvYmpMZW5ndGggPSBvYmpQcm9wcy5sZW5ndGgsXG4gICAgICBvdGhQcm9wcyA9IGdldEFsbEtleXMob3RoZXIpLFxuICAgICAgb3RoTGVuZ3RoID0gb3RoUHJvcHMubGVuZ3RoO1xuXG4gIGlmIChvYmpMZW5ndGggIT0gb3RoTGVuZ3RoICYmICFpc1BhcnRpYWwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIGluZGV4ID0gb2JqTGVuZ3RoO1xuICB3aGlsZSAoaW5kZXgtLSkge1xuICAgIHZhciBrZXkgPSBvYmpQcm9wc1tpbmRleF07XG4gICAgaWYgKCEoaXNQYXJ0aWFsID8ga2V5IGluIG90aGVyIDogaGFzT3duUHJvcGVydHkuY2FsbChvdGhlciwga2V5KSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgLy8gQ2hlY2sgdGhhdCBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgdmFyIG9ialN0YWNrZWQgPSBzdGFjay5nZXQob2JqZWN0KTtcbiAgdmFyIG90aFN0YWNrZWQgPSBzdGFjay5nZXQob3RoZXIpO1xuICBpZiAob2JqU3RhY2tlZCAmJiBvdGhTdGFja2VkKSB7XG4gICAgcmV0dXJuIG9ialN0YWNrZWQgPT0gb3RoZXIgJiYgb3RoU3RhY2tlZCA9PSBvYmplY3Q7XG4gIH1cbiAgdmFyIHJlc3VsdCA9IHRydWU7XG4gIHN0YWNrLnNldChvYmplY3QsIG90aGVyKTtcbiAgc3RhY2suc2V0KG90aGVyLCBvYmplY3QpO1xuXG4gIHZhciBza2lwQ3RvciA9IGlzUGFydGlhbDtcbiAgd2hpbGUgKCsraW5kZXggPCBvYmpMZW5ndGgpIHtcbiAgICBrZXkgPSBvYmpQcm9wc1tpbmRleF07XG4gICAgdmFyIG9ialZhbHVlID0gb2JqZWN0W2tleV0sXG4gICAgICAgIG90aFZhbHVlID0gb3RoZXJba2V5XTtcblxuICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICB2YXIgY29tcGFyZWQgPSBpc1BhcnRpYWxcbiAgICAgICAgPyBjdXN0b21pemVyKG90aFZhbHVlLCBvYmpWYWx1ZSwga2V5LCBvdGhlciwgb2JqZWN0LCBzdGFjaylcbiAgICAgICAgOiBjdXN0b21pemVyKG9ialZhbHVlLCBvdGhWYWx1ZSwga2V5LCBvYmplY3QsIG90aGVyLCBzdGFjayk7XG4gICAgfVxuICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgIGlmICghKGNvbXBhcmVkID09PSB1bmRlZmluZWRcbiAgICAgICAgICA/IChvYmpWYWx1ZSA9PT0gb3RoVmFsdWUgfHwgZXF1YWxGdW5jKG9ialZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spKVxuICAgICAgICAgIDogY29tcGFyZWRcbiAgICAgICAgKSkge1xuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgc2tpcEN0b3IgfHwgKHNraXBDdG9yID0ga2V5ID09ICdjb25zdHJ1Y3RvcicpO1xuICB9XG4gIGlmIChyZXN1bHQgJiYgIXNraXBDdG9yKSB7XG4gICAgdmFyIG9iakN0b3IgPSBvYmplY3QuY29uc3RydWN0b3IsXG4gICAgICAgIG90aEN0b3IgPSBvdGhlci5jb25zdHJ1Y3RvcjtcblxuICAgIC8vIE5vbiBgT2JqZWN0YCBvYmplY3QgaW5zdGFuY2VzIHdpdGggZGlmZmVyZW50IGNvbnN0cnVjdG9ycyBhcmUgbm90IGVxdWFsLlxuICAgIGlmIChvYmpDdG9yICE9IG90aEN0b3IgJiZcbiAgICAgICAgKCdjb25zdHJ1Y3RvcicgaW4gb2JqZWN0ICYmICdjb25zdHJ1Y3RvcicgaW4gb3RoZXIpICYmXG4gICAgICAgICEodHlwZW9mIG9iakN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBvYmpDdG9yIGluc3RhbmNlb2Ygb2JqQ3RvciAmJlxuICAgICAgICAgIHR5cGVvZiBvdGhDdG9yID09ICdmdW5jdGlvbicgJiYgb3RoQ3RvciBpbnN0YW5jZW9mIG90aEN0b3IpKSB7XG4gICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICB9XG4gIH1cbiAgc3RhY2tbJ2RlbGV0ZSddKG9iamVjdCk7XG4gIHN0YWNrWydkZWxldGUnXShvdGhlcik7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGVxdWFsT2JqZWN0cztcbiIsImltcG9ydCBnZXROYXRpdmUgZnJvbSAnLi9fZ2V0TmF0aXZlLmpzJztcbmltcG9ydCByb290IGZyb20gJy4vX3Jvb3QuanMnO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgRGF0YVZpZXcgPSBnZXROYXRpdmUocm9vdCwgJ0RhdGFWaWV3Jyk7XG5cbmV4cG9ydCBkZWZhdWx0IERhdGFWaWV3O1xuIiwiaW1wb3J0IGdldE5hdGl2ZSBmcm9tICcuL19nZXROYXRpdmUuanMnO1xuaW1wb3J0IHJvb3QgZnJvbSAnLi9fcm9vdC5qcyc7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBQcm9taXNlID0gZ2V0TmF0aXZlKHJvb3QsICdQcm9taXNlJyk7XG5cbmV4cG9ydCBkZWZhdWx0IFByb21pc2U7XG4iLCJpbXBvcnQgZ2V0TmF0aXZlIGZyb20gJy4vX2dldE5hdGl2ZS5qcyc7XG5pbXBvcnQgcm9vdCBmcm9tICcuL19yb290LmpzJztcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIFNldCA9IGdldE5hdGl2ZShyb290LCAnU2V0Jyk7XG5cbmV4cG9ydCBkZWZhdWx0IFNldDtcbiIsImltcG9ydCBnZXROYXRpdmUgZnJvbSAnLi9fZ2V0TmF0aXZlLmpzJztcbmltcG9ydCByb290IGZyb20gJy4vX3Jvb3QuanMnO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgV2Vha01hcCA9IGdldE5hdGl2ZShyb290LCAnV2Vha01hcCcpO1xuXG5leHBvcnQgZGVmYXVsdCBXZWFrTWFwO1xuIiwiaW1wb3J0IERhdGFWaWV3IGZyb20gJy4vX0RhdGFWaWV3LmpzJztcbmltcG9ydCBNYXAgZnJvbSAnLi9fTWFwLmpzJztcbmltcG9ydCBQcm9taXNlIGZyb20gJy4vX1Byb21pc2UuanMnO1xuaW1wb3J0IFNldCBmcm9tICcuL19TZXQuanMnO1xuaW1wb3J0IFdlYWtNYXAgZnJvbSAnLi9fV2Vha01hcC5qcyc7XG5pbXBvcnQgYmFzZUdldFRhZyBmcm9tICcuL19iYXNlR2V0VGFnLmpzJztcbmltcG9ydCB0b1NvdXJjZSBmcm9tICcuL190b1NvdXJjZS5qcyc7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJyxcbiAgICBwcm9taXNlVGFnID0gJ1tvYmplY3QgUHJvbWlzZV0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgIHdlYWtNYXBUYWcgPSAnW29iamVjdCBXZWFrTWFwXSc7XG5cbnZhciBkYXRhVmlld1RhZyA9ICdbb2JqZWN0IERhdGFWaWV3XSc7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBtYXBzLCBzZXRzLCBhbmQgd2Vha21hcHMuICovXG52YXIgZGF0YVZpZXdDdG9yU3RyaW5nID0gdG9Tb3VyY2UoRGF0YVZpZXcpLFxuICAgIG1hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShNYXApLFxuICAgIHByb21pc2VDdG9yU3RyaW5nID0gdG9Tb3VyY2UoUHJvbWlzZSksXG4gICAgc2V0Q3RvclN0cmluZyA9IHRvU291cmNlKFNldCksXG4gICAgd2Vha01hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShXZWFrTWFwKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBgdG9TdHJpbmdUYWdgIG9mIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xudmFyIGdldFRhZyA9IGJhc2VHZXRUYWc7XG5cbi8vIEZhbGxiYWNrIGZvciBkYXRhIHZpZXdzLCBtYXBzLCBzZXRzLCBhbmQgd2VhayBtYXBzIGluIElFIDExIGFuZCBwcm9taXNlcyBpbiBOb2RlLmpzIDwgNi5cbmlmICgoRGF0YVZpZXcgJiYgZ2V0VGFnKG5ldyBEYXRhVmlldyhuZXcgQXJyYXlCdWZmZXIoMSkpKSAhPSBkYXRhVmlld1RhZykgfHxcbiAgICAoTWFwICYmIGdldFRhZyhuZXcgTWFwKSAhPSBtYXBUYWcpIHx8XG4gICAgKFByb21pc2UgJiYgZ2V0VGFnKFByb21pc2UucmVzb2x2ZSgpKSAhPSBwcm9taXNlVGFnKSB8fFxuICAgIChTZXQgJiYgZ2V0VGFnKG5ldyBTZXQpICE9IHNldFRhZykgfHxcbiAgICAoV2Vha01hcCAmJiBnZXRUYWcobmV3IFdlYWtNYXApICE9IHdlYWtNYXBUYWcpKSB7XG4gIGdldFRhZyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgdmFyIHJlc3VsdCA9IGJhc2VHZXRUYWcodmFsdWUpLFxuICAgICAgICBDdG9yID0gcmVzdWx0ID09IG9iamVjdFRhZyA/IHZhbHVlLmNvbnN0cnVjdG9yIDogdW5kZWZpbmVkLFxuICAgICAgICBjdG9yU3RyaW5nID0gQ3RvciA/IHRvU291cmNlKEN0b3IpIDogJyc7XG5cbiAgICBpZiAoY3RvclN0cmluZykge1xuICAgICAgc3dpdGNoIChjdG9yU3RyaW5nKSB7XG4gICAgICAgIGNhc2UgZGF0YVZpZXdDdG9yU3RyaW5nOiByZXR1cm4gZGF0YVZpZXdUYWc7XG4gICAgICAgIGNhc2UgbWFwQ3RvclN0cmluZzogcmV0dXJuIG1hcFRhZztcbiAgICAgICAgY2FzZSBwcm9taXNlQ3RvclN0cmluZzogcmV0dXJuIHByb21pc2VUYWc7XG4gICAgICAgIGNhc2Ugc2V0Q3RvclN0cmluZzogcmV0dXJuIHNldFRhZztcbiAgICAgICAgY2FzZSB3ZWFrTWFwQ3RvclN0cmluZzogcmV0dXJuIHdlYWtNYXBUYWc7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldFRhZztcbiIsImltcG9ydCBTdGFjayBmcm9tICcuL19TdGFjay5qcyc7XG5pbXBvcnQgZXF1YWxBcnJheXMgZnJvbSAnLi9fZXF1YWxBcnJheXMuanMnO1xuaW1wb3J0IGVxdWFsQnlUYWcgZnJvbSAnLi9fZXF1YWxCeVRhZy5qcyc7XG5pbXBvcnQgZXF1YWxPYmplY3RzIGZyb20gJy4vX2VxdWFsT2JqZWN0cy5qcyc7XG5pbXBvcnQgZ2V0VGFnIGZyb20gJy4vX2dldFRhZy5qcyc7XG5pbXBvcnQgaXNBcnJheSBmcm9tICcuL2lzQXJyYXkuanMnO1xuaW1wb3J0IGlzQnVmZmVyIGZyb20gJy4vaXNCdWZmZXIuanMnO1xuaW1wb3J0IGlzVHlwZWRBcnJheSBmcm9tICcuL2lzVHlwZWRBcnJheS5qcyc7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xudmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJyxcbiAgICBhcnJheVRhZyA9ICdbb2JqZWN0IEFycmF5XScsXG4gICAgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XSc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbGAgZm9yIGFycmF5cyBhbmQgb2JqZWN0cyB3aGljaCBwZXJmb3Jtc1xuICogZGVlcCBjb21wYXJpc29ucyBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzIGVuYWJsaW5nIG9iamVjdHMgd2l0aCBjaXJjdWxhclxuICogcmVmZXJlbmNlcyB0byBiZSBjb21wYXJlZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzRXF1YWxEZWVwKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgdmFyIG9iaklzQXJyID0gaXNBcnJheShvYmplY3QpLFxuICAgICAgb3RoSXNBcnIgPSBpc0FycmF5KG90aGVyKSxcbiAgICAgIG9ialRhZyA9IG9iaklzQXJyID8gYXJyYXlUYWcgOiBnZXRUYWcob2JqZWN0KSxcbiAgICAgIG90aFRhZyA9IG90aElzQXJyID8gYXJyYXlUYWcgOiBnZXRUYWcob3RoZXIpO1xuXG4gIG9ialRhZyA9IG9ialRhZyA9PSBhcmdzVGFnID8gb2JqZWN0VGFnIDogb2JqVGFnO1xuICBvdGhUYWcgPSBvdGhUYWcgPT0gYXJnc1RhZyA/IG9iamVjdFRhZyA6IG90aFRhZztcblxuICB2YXIgb2JqSXNPYmogPSBvYmpUYWcgPT0gb2JqZWN0VGFnLFxuICAgICAgb3RoSXNPYmogPSBvdGhUYWcgPT0gb2JqZWN0VGFnLFxuICAgICAgaXNTYW1lVGFnID0gb2JqVGFnID09IG90aFRhZztcblxuICBpZiAoaXNTYW1lVGFnICYmIGlzQnVmZmVyKG9iamVjdCkpIHtcbiAgICBpZiAoIWlzQnVmZmVyKG90aGVyKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBvYmpJc0FyciA9IHRydWU7XG4gICAgb2JqSXNPYmogPSBmYWxzZTtcbiAgfVxuICBpZiAoaXNTYW1lVGFnICYmICFvYmpJc09iaikge1xuICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgcmV0dXJuIChvYmpJc0FyciB8fCBpc1R5cGVkQXJyYXkob2JqZWN0KSlcbiAgICAgID8gZXF1YWxBcnJheXMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaylcbiAgICAgIDogZXF1YWxCeVRhZyhvYmplY3QsIG90aGVyLCBvYmpUYWcsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spO1xuICB9XG4gIGlmICghKGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRykpIHtcbiAgICB2YXIgb2JqSXNXcmFwcGVkID0gb2JqSXNPYmogJiYgaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsICdfX3dyYXBwZWRfXycpLFxuICAgICAgICBvdGhJc1dyYXBwZWQgPSBvdGhJc09iaiAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG90aGVyLCAnX193cmFwcGVkX18nKTtcblxuICAgIGlmIChvYmpJc1dyYXBwZWQgfHwgb3RoSXNXcmFwcGVkKSB7XG4gICAgICB2YXIgb2JqVW53cmFwcGVkID0gb2JqSXNXcmFwcGVkID8gb2JqZWN0LnZhbHVlKCkgOiBvYmplY3QsXG4gICAgICAgICAgb3RoVW53cmFwcGVkID0gb3RoSXNXcmFwcGVkID8gb3RoZXIudmFsdWUoKSA6IG90aGVyO1xuXG4gICAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgICAgcmV0dXJuIGVxdWFsRnVuYyhvYmpVbndyYXBwZWQsIG90aFVud3JhcHBlZCwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spO1xuICAgIH1cbiAgfVxuICBpZiAoIWlzU2FtZVRhZykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICByZXR1cm4gZXF1YWxPYmplY3RzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spO1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlSXNFcXVhbERlZXA7XG4iLCJpbXBvcnQgYmFzZUlzRXF1YWxEZWVwIGZyb20gJy4vX2Jhc2VJc0VxdWFsRGVlcC5qcyc7XG5pbXBvcnQgaXNPYmplY3RMaWtlIGZyb20gJy4vaXNPYmplY3RMaWtlLmpzJztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0VxdWFsYCB3aGljaCBzdXBwb3J0cyBwYXJ0aWFsIGNvbXBhcmlzb25zXG4gKiBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy5cbiAqICAxIC0gVW5vcmRlcmVkIGNvbXBhcmlzb25cbiAqICAyIC0gUGFydGlhbCBjb21wYXJpc29uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgYHZhbHVlYCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzRXF1YWwodmFsdWUsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykge1xuICBpZiAodmFsdWUgPT09IG90aGVyKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKHZhbHVlID09IG51bGwgfHwgb3RoZXIgPT0gbnVsbCB8fCAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgIWlzT2JqZWN0TGlrZShvdGhlcikpKSB7XG4gICAgcmV0dXJuIHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXI7XG4gIH1cbiAgcmV0dXJuIGJhc2VJc0VxdWFsRGVlcCh2YWx1ZSwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGJhc2VJc0VxdWFsLCBzdGFjayk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VJc0VxdWFsO1xuIiwiaW1wb3J0IGlzT2JqZWN0IGZyb20gJy4vaXNPYmplY3QuanMnO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlIGZvciBzdHJpY3QgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGkuZS4gYD09PWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaWYgc3VpdGFibGUgZm9yIHN0cmljdFxuICogIGVxdWFsaXR5IGNvbXBhcmlzb25zLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzU3RyaWN0Q29tcGFyYWJsZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT09IHZhbHVlICYmICFpc09iamVjdCh2YWx1ZSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzU3RyaWN0Q29tcGFyYWJsZTtcbiIsIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBtYXRjaGVzUHJvcGVydHlgIGZvciBzb3VyY2UgdmFsdWVzIHN1aXRhYmxlXG4gKiBmb3Igc3RyaWN0IGVxdWFsaXR5IGNvbXBhcmlzb25zLCBpLmUuIGA9PT1gLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHZhbHVlIHRvIG1hdGNoLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gbWF0Y2hlc1N0cmljdENvbXBhcmFibGUoa2V5LCBzcmNWYWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBvYmplY3Rba2V5XSA9PT0gc3JjVmFsdWUgJiZcbiAgICAgIChzcmNWYWx1ZSAhPT0gdW5kZWZpbmVkIHx8IChrZXkgaW4gT2JqZWN0KG9iamVjdCkpKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWF0Y2hlc1N0cmljdENvbXBhcmFibGU7XG4iLCJpbXBvcnQgYmFzZUlzTWF0Y2ggZnJvbSAnLi9fYmFzZUlzTWF0Y2guanMnO1xuaW1wb3J0IGdldE1hdGNoRGF0YSBmcm9tICcuL19nZXRNYXRjaERhdGEuanMnO1xuaW1wb3J0IG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlIGZyb20gJy4vX21hdGNoZXNTdHJpY3RDb21wYXJhYmxlLmpzJztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tYXRjaGVzYCB3aGljaCBkb2Vzbid0IGNsb25lIGBzb3VyY2VgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZU1hdGNoZXMoc291cmNlKSB7XG4gIHZhciBtYXRjaERhdGEgPSBnZXRNYXRjaERhdGEoc291cmNlKTtcbiAgaWYgKG1hdGNoRGF0YS5sZW5ndGggPT0gMSAmJiBtYXRjaERhdGFbMF1bMl0pIHtcbiAgICByZXR1cm4gbWF0Y2hlc1N0cmljdENvbXBhcmFibGUobWF0Y2hEYXRhWzBdWzBdLCBtYXRjaERhdGFbMF1bMV0pO1xuICB9XG4gIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICByZXR1cm4gb2JqZWN0ID09PSBzb3VyY2UgfHwgYmFzZUlzTWF0Y2gob2JqZWN0LCBzb3VyY2UsIG1hdGNoRGF0YSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VNYXRjaGVzO1xuIiwiaW1wb3J0IGlzU3RyaWN0Q29tcGFyYWJsZSBmcm9tICcuL19pc1N0cmljdENvbXBhcmFibGUuanMnO1xuaW1wb3J0IGtleXMgZnJvbSAnLi9rZXlzLmpzJztcblxuLyoqXG4gKiBHZXRzIHRoZSBwcm9wZXJ0eSBuYW1lcywgdmFsdWVzLCBhbmQgY29tcGFyZSBmbGFncyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBtYXRjaCBkYXRhIG9mIGBvYmplY3RgLlxuICovXG5mdW5jdGlvbiBnZXRNYXRjaERhdGEob2JqZWN0KSB7XG4gIHZhciByZXN1bHQgPSBrZXlzKG9iamVjdCksXG4gICAgICBsZW5ndGggPSByZXN1bHQubGVuZ3RoO1xuXG4gIHdoaWxlIChsZW5ndGgtLSkge1xuICAgIHZhciBrZXkgPSByZXN1bHRbbGVuZ3RoXSxcbiAgICAgICAgdmFsdWUgPSBvYmplY3Rba2V5XTtcblxuICAgIHJlc3VsdFtsZW5ndGhdID0gW2tleSwgdmFsdWUsIGlzU3RyaWN0Q29tcGFyYWJsZSh2YWx1ZSldO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldE1hdGNoRGF0YTtcbiIsImltcG9ydCBTdGFjayBmcm9tICcuL19TdGFjay5qcyc7XG5pbXBvcnQgYmFzZUlzRXF1YWwgZnJvbSAnLi9fYmFzZUlzRXF1YWwuanMnO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDEsXG4gICAgQ09NUEFSRV9VTk9SREVSRURfRkxBRyA9IDI7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNNYXRjaGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gKiBAcGFyYW0ge0FycmF5fSBtYXRjaERhdGEgVGhlIHByb3BlcnR5IG5hbWVzLCB2YWx1ZXMsIGFuZCBjb21wYXJlIGZsYWdzIHRvIG1hdGNoLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgaXMgYSBtYXRjaCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNNYXRjaChvYmplY3QsIHNvdXJjZSwgbWF0Y2hEYXRhLCBjdXN0b21pemVyKSB7XG4gIHZhciBpbmRleCA9IG1hdGNoRGF0YS5sZW5ndGgsXG4gICAgICBsZW5ndGggPSBpbmRleCxcbiAgICAgIG5vQ3VzdG9taXplciA9ICFjdXN0b21pemVyO1xuXG4gIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgIHJldHVybiAhbGVuZ3RoO1xuICB9XG4gIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICB3aGlsZSAoaW5kZXgtLSkge1xuICAgIHZhciBkYXRhID0gbWF0Y2hEYXRhW2luZGV4XTtcbiAgICBpZiAoKG5vQ3VzdG9taXplciAmJiBkYXRhWzJdKVxuICAgICAgICAgID8gZGF0YVsxXSAhPT0gb2JqZWN0W2RhdGFbMF1dXG4gICAgICAgICAgOiAhKGRhdGFbMF0gaW4gb2JqZWN0KVxuICAgICAgICApIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBkYXRhID0gbWF0Y2hEYXRhW2luZGV4XTtcbiAgICB2YXIga2V5ID0gZGF0YVswXSxcbiAgICAgICAgb2JqVmFsdWUgPSBvYmplY3Rba2V5XSxcbiAgICAgICAgc3JjVmFsdWUgPSBkYXRhWzFdO1xuXG4gICAgaWYgKG5vQ3VzdG9taXplciAmJiBkYXRhWzJdKSB7XG4gICAgICBpZiAob2JqVmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHN0YWNrID0gbmV3IFN0YWNrO1xuICAgICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlLCBzdGFjayk7XG4gICAgICB9XG4gICAgICBpZiAoIShyZXN1bHQgPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBiYXNlSXNFcXVhbChzcmNWYWx1ZSwgb2JqVmFsdWUsIENPTVBBUkVfUEFSVElBTF9GTEFHIHwgQ09NUEFSRV9VTk9SREVSRURfRkxBRywgY3VzdG9taXplciwgc3RhY2spXG4gICAgICAgICAgICA6IHJlc3VsdFxuICAgICAgICAgICkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUlzTWF0Y2g7XG4iLCJpbXBvcnQgaXNBcnJheSBmcm9tICcuL2lzQXJyYXkuanMnO1xuaW1wb3J0IGlzU3ltYm9sIGZyb20gJy4vaXNTeW1ib2wuanMnO1xuXG4vKiogVXNlZCB0byBtYXRjaCBwcm9wZXJ0eSBuYW1lcyB3aXRoaW4gcHJvcGVydHkgcGF0aHMuICovXG52YXIgcmVJc0RlZXBQcm9wID0gL1xcLnxcXFsoPzpbXltcXF1dKnwoW1wiJ10pKD86KD8hXFwxKVteXFxcXF18XFxcXC4pKj9cXDEpXFxdLyxcbiAgICByZUlzUGxhaW5Qcm9wID0gL15cXHcqJC87XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBwcm9wZXJ0eSBuYW1lIGFuZCBub3QgYSBwcm9wZXJ0eSBwYXRoLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5IGtleXMgb24uXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHByb3BlcnR5IG5hbWUsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNLZXkodmFsdWUsIG9iamVjdCkge1xuICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIGlmICh0eXBlID09ICdudW1iZXInIHx8IHR5cGUgPT0gJ3N5bWJvbCcgfHwgdHlwZSA9PSAnYm9vbGVhbicgfHxcbiAgICAgIHZhbHVlID09IG51bGwgfHwgaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIHJlSXNQbGFpblByb3AudGVzdCh2YWx1ZSkgfHwgIXJlSXNEZWVwUHJvcC50ZXN0KHZhbHVlKSB8fFxuICAgIChvYmplY3QgIT0gbnVsbCAmJiB2YWx1ZSBpbiBPYmplY3Qob2JqZWN0KSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzS2V5O1xuIiwiaW1wb3J0IE1hcENhY2hlIGZyb20gJy4vX01hcENhY2hlLmpzJztcblxuLyoqIEVycm9yIG1lc3NhZ2UgY29uc3RhbnRzLiAqL1xudmFyIEZVTkNfRVJST1JfVEVYVCA9ICdFeHBlY3RlZCBhIGZ1bmN0aW9uJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBtZW1vaXplcyB0aGUgcmVzdWx0IG9mIGBmdW5jYC4gSWYgYHJlc29sdmVyYCBpc1xuICogcHJvdmlkZWQsIGl0IGRldGVybWluZXMgdGhlIGNhY2hlIGtleSBmb3Igc3RvcmluZyB0aGUgcmVzdWx0IGJhc2VkIG9uIHRoZVxuICogYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZSBtZW1vaXplZCBmdW5jdGlvbi4gQnkgZGVmYXVsdCwgdGhlIGZpcnN0IGFyZ3VtZW50XG4gKiBwcm92aWRlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24gaXMgdXNlZCBhcyB0aGUgbWFwIGNhY2hlIGtleS4gVGhlIGBmdW5jYFxuICogaXMgaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gKlxuICogKipOb3RlOioqIFRoZSBjYWNoZSBpcyBleHBvc2VkIGFzIHRoZSBgY2FjaGVgIHByb3BlcnR5IG9uIHRoZSBtZW1vaXplZFxuICogZnVuY3Rpb24uIEl0cyBjcmVhdGlvbiBtYXkgYmUgY3VzdG9taXplZCBieSByZXBsYWNpbmcgdGhlIGBfLm1lbW9pemUuQ2FjaGVgXG4gKiBjb25zdHJ1Y3RvciB3aXRoIG9uZSB3aG9zZSBpbnN0YW5jZXMgaW1wbGVtZW50IHRoZVxuICogW2BNYXBgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1wcm9wZXJ0aWVzLW9mLXRoZS1tYXAtcHJvdG90eXBlLW9iamVjdClcbiAqIG1ldGhvZCBpbnRlcmZhY2Ugb2YgYGNsZWFyYCwgYGRlbGV0ZWAsIGBnZXRgLCBgaGFzYCwgYW5kIGBzZXRgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaGF2ZSBpdHMgb3V0cHV0IG1lbW9pemVkLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW3Jlc29sdmVyXSBUaGUgZnVuY3Rpb24gdG8gcmVzb2x2ZSB0aGUgY2FjaGUga2V5LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAyIH07XG4gKiB2YXIgb3RoZXIgPSB7ICdjJzogMywgJ2QnOiA0IH07XG4gKlxuICogdmFyIHZhbHVlcyA9IF8ubWVtb2l6ZShfLnZhbHVlcyk7XG4gKiB2YWx1ZXMob2JqZWN0KTtcbiAqIC8vID0+IFsxLCAyXVxuICpcbiAqIHZhbHVlcyhvdGhlcik7XG4gKiAvLyA9PiBbMywgNF1cbiAqXG4gKiBvYmplY3QuYSA9IDI7XG4gKiB2YWx1ZXMob2JqZWN0KTtcbiAqIC8vID0+IFsxLCAyXVxuICpcbiAqIC8vIE1vZGlmeSB0aGUgcmVzdWx0IGNhY2hlLlxuICogdmFsdWVzLmNhY2hlLnNldChvYmplY3QsIFsnYScsICdiJ10pO1xuICogdmFsdWVzKG9iamVjdCk7XG4gKiAvLyA9PiBbJ2EnLCAnYiddXG4gKlxuICogLy8gUmVwbGFjZSBgXy5tZW1vaXplLkNhY2hlYC5cbiAqIF8ubWVtb2l6ZS5DYWNoZSA9IFdlYWtNYXA7XG4gKi9cbmZ1bmN0aW9uIG1lbW9pemUoZnVuYywgcmVzb2x2ZXIpIHtcbiAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicgfHwgKHJlc29sdmVyICE9IG51bGwgJiYgdHlwZW9mIHJlc29sdmVyICE9ICdmdW5jdGlvbicpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICB9XG4gIHZhciBtZW1vaXplZCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICBrZXkgPSByZXNvbHZlciA/IHJlc29sdmVyLmFwcGx5KHRoaXMsIGFyZ3MpIDogYXJnc1swXSxcbiAgICAgICAgY2FjaGUgPSBtZW1vaXplZC5jYWNoZTtcblxuICAgIGlmIChjYWNoZS5oYXMoa2V5KSkge1xuICAgICAgcmV0dXJuIGNhY2hlLmdldChrZXkpO1xuICAgIH1cbiAgICB2YXIgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICBtZW1vaXplZC5jYWNoZSA9IGNhY2hlLnNldChrZXksIHJlc3VsdCkgfHwgY2FjaGU7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbiAgbWVtb2l6ZWQuY2FjaGUgPSBuZXcgKG1lbW9pemUuQ2FjaGUgfHwgTWFwQ2FjaGUpO1xuICByZXR1cm4gbWVtb2l6ZWQ7XG59XG5cbi8vIEV4cG9zZSBgTWFwQ2FjaGVgLlxubWVtb2l6ZS5DYWNoZSA9IE1hcENhY2hlO1xuXG5leHBvcnQgZGVmYXVsdCBtZW1vaXplO1xuIiwiaW1wb3J0IG1lbW9pemVDYXBwZWQgZnJvbSAnLi9fbWVtb2l6ZUNhcHBlZC5qcyc7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIHByb3BlcnR5IG5hbWVzIHdpdGhpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbnZhciByZVByb3BOYW1lID0gL1teLltcXF1dK3xcXFsoPzooLT9cXGQrKD86XFwuXFxkKyk/KXwoW1wiJ10pKCg/Oig/IVxcMilbXlxcXFxdfFxcXFwuKSo/KVxcMilcXF18KD89KD86XFwufFxcW1xcXSkoPzpcXC58XFxbXFxdfCQpKS9nO1xuXG4vKiogVXNlZCB0byBtYXRjaCBiYWNrc2xhc2hlcyBpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbnZhciByZUVzY2FwZUNoYXIgPSAvXFxcXChcXFxcKT8vZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgc3RyaW5nYCB0byBhIHByb3BlcnR5IHBhdGggYXJyYXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICovXG52YXIgc3RyaW5nVG9QYXRoID0gbWVtb2l6ZUNhcHBlZChmdW5jdGlvbihzdHJpbmcpIHtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBpZiAoc3RyaW5nLmNoYXJDb2RlQXQoMCkgPT09IDQ2IC8qIC4gKi8pIHtcbiAgICByZXN1bHQucHVzaCgnJyk7XG4gIH1cbiAgc3RyaW5nLnJlcGxhY2UocmVQcm9wTmFtZSwgZnVuY3Rpb24obWF0Y2gsIG51bWJlciwgcXVvdGUsIHN1YlN0cmluZykge1xuICAgIHJlc3VsdC5wdXNoKHF1b3RlID8gc3ViU3RyaW5nLnJlcGxhY2UocmVFc2NhcGVDaGFyLCAnJDEnKSA6IChudW1iZXIgfHwgbWF0Y2gpKTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgc3RyaW5nVG9QYXRoO1xuIiwiaW1wb3J0IG1lbW9pemUgZnJvbSAnLi9tZW1vaXplLmpzJztcblxuLyoqIFVzZWQgYXMgdGhlIG1heGltdW0gbWVtb2l6ZSBjYWNoZSBzaXplLiAqL1xudmFyIE1BWF9NRU1PSVpFX1NJWkUgPSA1MDA7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLm1lbW9pemVgIHdoaWNoIGNsZWFycyB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24nc1xuICogY2FjaGUgd2hlbiBpdCBleGNlZWRzIGBNQVhfTUVNT0laRV9TSVpFYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaGF2ZSBpdHMgb3V0cHV0IG1lbW9pemVkLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIG1lbW9pemVDYXBwZWQoZnVuYykge1xuICB2YXIgcmVzdWx0ID0gbWVtb2l6ZShmdW5jLCBmdW5jdGlvbihrZXkpIHtcbiAgICBpZiAoY2FjaGUuc2l6ZSA9PT0gTUFYX01FTU9JWkVfU0laRSkge1xuICAgICAgY2FjaGUuY2xlYXIoKTtcbiAgICB9XG4gICAgcmV0dXJuIGtleTtcbiAgfSk7XG5cbiAgdmFyIGNhY2hlID0gcmVzdWx0LmNhY2hlO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBtZW1vaXplQ2FwcGVkO1xuIiwiaW1wb3J0IFN5bWJvbCBmcm9tICcuL19TeW1ib2wuanMnO1xuaW1wb3J0IGFycmF5TWFwIGZyb20gJy4vX2FycmF5TWFwLmpzJztcbmltcG9ydCBpc0FycmF5IGZyb20gJy4vaXNBcnJheS5qcyc7XG5pbXBvcnQgaXNTeW1ib2wgZnJvbSAnLi9pc1N5bWJvbC5qcyc7XG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIElORklOSVRZID0gMSAvIDA7XG5cbi8qKiBVc2VkIHRvIGNvbnZlcnQgc3ltYm9scyB0byBwcmltaXRpdmVzIGFuZCBzdHJpbmdzLiAqL1xudmFyIHN5bWJvbFByb3RvID0gU3ltYm9sID8gU3ltYm9sLnByb3RvdHlwZSA6IHVuZGVmaW5lZCxcbiAgICBzeW1ib2xUb1N0cmluZyA9IHN5bWJvbFByb3RvID8gc3ltYm9sUHJvdG8udG9TdHJpbmcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udG9TdHJpbmdgIHdoaWNoIGRvZXNuJ3QgY29udmVydCBudWxsaXNoXG4gKiB2YWx1ZXMgdG8gZW1wdHkgc3RyaW5ncy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gYmFzZVRvU3RyaW5nKHZhbHVlKSB7XG4gIC8vIEV4aXQgZWFybHkgZm9yIHN0cmluZ3MgdG8gYXZvaWQgYSBwZXJmb3JtYW5jZSBoaXQgaW4gc29tZSBlbnZpcm9ubWVudHMuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgLy8gUmVjdXJzaXZlbHkgY29udmVydCB2YWx1ZXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICByZXR1cm4gYXJyYXlNYXAodmFsdWUsIGJhc2VUb1N0cmluZykgKyAnJztcbiAgfVxuICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgcmV0dXJuIHN5bWJvbFRvU3RyaW5nID8gc3ltYm9sVG9TdHJpbmcuY2FsbCh2YWx1ZSkgOiAnJztcbiAgfVxuICB2YXIgcmVzdWx0ID0gKHZhbHVlICsgJycpO1xuICByZXR1cm4gKHJlc3VsdCA9PSAnMCcgJiYgKDEgLyB2YWx1ZSkgPT0gLUlORklOSVRZKSA/ICctMCcgOiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VUb1N0cmluZztcbiIsImltcG9ydCBiYXNlVG9TdHJpbmcgZnJvbSAnLi9fYmFzZVRvU3RyaW5nLmpzJztcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nLiBBbiBlbXB0eSBzdHJpbmcgaXMgcmV0dXJuZWQgZm9yIGBudWxsYFxuICogYW5kIGB1bmRlZmluZWRgIHZhbHVlcy4gVGhlIHNpZ24gb2YgYC0wYCBpcyBwcmVzZXJ2ZWQuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvU3RyaW5nKG51bGwpO1xuICogLy8gPT4gJydcbiAqXG4gKiBfLnRvU3RyaW5nKC0wKTtcbiAqIC8vID0+ICctMCdcbiAqXG4gKiBfLnRvU3RyaW5nKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiAnMSwyLDMnXG4gKi9cbmZ1bmN0aW9uIHRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9PSBudWxsID8gJycgOiBiYXNlVG9TdHJpbmcodmFsdWUpO1xufVxuXG5leHBvcnQgZGVmYXVsdCB0b1N0cmluZztcbiIsImltcG9ydCBpc0FycmF5IGZyb20gJy4vaXNBcnJheS5qcyc7XG5pbXBvcnQgaXNLZXkgZnJvbSAnLi9faXNLZXkuanMnO1xuaW1wb3J0IHN0cmluZ1RvUGF0aCBmcm9tICcuL19zdHJpbmdUb1BhdGguanMnO1xuaW1wb3J0IHRvU3RyaW5nIGZyb20gJy4vdG9TdHJpbmcuanMnO1xuXG4vKipcbiAqIENhc3RzIGB2YWx1ZWAgdG8gYSBwYXRoIGFycmF5IGlmIGl0J3Mgbm90IG9uZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5IGtleXMgb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNhc3QgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gY2FzdFBhdGgodmFsdWUsIG9iamVjdCkge1xuICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIGlzS2V5KHZhbHVlLCBvYmplY3QpID8gW3ZhbHVlXSA6IHN0cmluZ1RvUGF0aCh0b1N0cmluZyh2YWx1ZSkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjYXN0UGF0aDtcbiIsImltcG9ydCBpc1N5bWJvbCBmcm9tICcuL2lzU3ltYm9sLmpzJztcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgSU5GSU5JVFkgPSAxIC8gMDtcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIGtleSBpZiBpdCdzIG5vdCBhIHN0cmluZyBvciBzeW1ib2wuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7c3RyaW5nfHN5bWJvbH0gUmV0dXJucyB0aGUga2V5LlxuICovXG5mdW5jdGlvbiB0b0tleSh2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8IGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICB2YXIgcmVzdWx0ID0gKHZhbHVlICsgJycpO1xuICByZXR1cm4gKHJlc3VsdCA9PSAnMCcgJiYgKDEgLyB2YWx1ZSkgPT0gLUlORklOSVRZKSA/ICctMCcgOiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHRvS2V5O1xuIiwiaW1wb3J0IGNhc3RQYXRoIGZyb20gJy4vX2Nhc3RQYXRoLmpzJztcbmltcG9ydCB0b0tleSBmcm9tICcuL190b0tleS5qcyc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZ2V0YCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZmF1bHQgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICovXG5mdW5jdGlvbiBiYXNlR2V0KG9iamVjdCwgcGF0aCkge1xuICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcblxuICB2YXIgaW5kZXggPSAwLFxuICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGg7XG5cbiAgd2hpbGUgKG9iamVjdCAhPSBudWxsICYmIGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgb2JqZWN0ID0gb2JqZWN0W3RvS2V5KHBhdGhbaW5kZXgrK10pXTtcbiAgfVxuICByZXR1cm4gKGluZGV4ICYmIGluZGV4ID09IGxlbmd0aCkgPyBvYmplY3QgOiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VHZXQ7XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmhhc0luYCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IGtleSBUaGUga2V5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSGFzSW4ob2JqZWN0LCBrZXkpIHtcbiAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGtleSBpbiBPYmplY3Qob2JqZWN0KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUhhc0luO1xuIiwiaW1wb3J0IGJhc2VIYXNJbiBmcm9tICcuL19iYXNlSGFzSW4uanMnO1xuaW1wb3J0IGhhc1BhdGggZnJvbSAnLi9faGFzUGF0aC5qcyc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGBwYXRoYCBpcyBhIGRpcmVjdCBvciBpbmhlcml0ZWQgcHJvcGVydHkgb2YgYG9iamVjdGAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHBhdGhgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0gXy5jcmVhdGUoeyAnYSc6IF8uY3JlYXRlKHsgJ2InOiAyIH0pIH0pO1xuICpcbiAqIF8uaGFzSW4ob2JqZWN0LCAnYScpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaGFzSW4ob2JqZWN0LCAnYS5iJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5oYXNJbihvYmplY3QsIFsnYScsICdiJ10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaGFzSW4ob2JqZWN0LCAnYicpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaGFzSW4ob2JqZWN0LCBwYXRoKSB7XG4gIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBoYXNQYXRoKG9iamVjdCwgcGF0aCwgYmFzZUhhc0luKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaGFzSW47XG4iLCJpbXBvcnQgY2FzdFBhdGggZnJvbSAnLi9fY2FzdFBhdGguanMnO1xuaW1wb3J0IGlzQXJndW1lbnRzIGZyb20gJy4vaXNBcmd1bWVudHMuanMnO1xuaW1wb3J0IGlzQXJyYXkgZnJvbSAnLi9pc0FycmF5LmpzJztcbmltcG9ydCBpc0luZGV4IGZyb20gJy4vX2lzSW5kZXguanMnO1xuaW1wb3J0IGlzTGVuZ3RoIGZyb20gJy4vaXNMZW5ndGguanMnO1xuaW1wb3J0IHRvS2V5IGZyb20gJy4vX3RvS2V5LmpzJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHBhdGhgIGV4aXN0cyBvbiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggdG8gY2hlY2suXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYXNGdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjayBwcm9wZXJ0aWVzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBwYXRoYCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzUGF0aChvYmplY3QsIHBhdGgsIGhhc0Z1bmMpIHtcbiAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG5cbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aCxcbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGtleSA9IHRvS2V5KHBhdGhbaW5kZXhdKTtcbiAgICBpZiAoIShyZXN1bHQgPSBvYmplY3QgIT0gbnVsbCAmJiBoYXNGdW5jKG9iamVjdCwga2V5KSkpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBvYmplY3QgPSBvYmplY3Rba2V5XTtcbiAgfVxuICBpZiAocmVzdWx0IHx8ICsraW5kZXggIT0gbGVuZ3RoKSB7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBsZW5ndGggPSBvYmplY3QgPT0gbnVsbCA/IDAgOiBvYmplY3QubGVuZ3RoO1xuICByZXR1cm4gISFsZW5ndGggJiYgaXNMZW5ndGgobGVuZ3RoKSAmJiBpc0luZGV4KGtleSwgbGVuZ3RoKSAmJlxuICAgIChpc0FycmF5KG9iamVjdCkgfHwgaXNBcmd1bWVudHMob2JqZWN0KSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGhhc1BhdGg7XG4iLCJpbXBvcnQgYmFzZUlzRXF1YWwgZnJvbSAnLi9fYmFzZUlzRXF1YWwuanMnO1xuaW1wb3J0IGdldCBmcm9tICcuL2dldC5qcyc7XG5pbXBvcnQgaGFzSW4gZnJvbSAnLi9oYXNJbi5qcyc7XG5pbXBvcnQgaXNLZXkgZnJvbSAnLi9faXNLZXkuanMnO1xuaW1wb3J0IGlzU3RyaWN0Q29tcGFyYWJsZSBmcm9tICcuL19pc1N0cmljdENvbXBhcmFibGUuanMnO1xuaW1wb3J0IG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlIGZyb20gJy4vX21hdGNoZXNTdHJpY3RDb21wYXJhYmxlLmpzJztcbmltcG9ydCB0b0tleSBmcm9tICcuL190b0tleS5qcyc7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xudmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMSxcbiAgICBDT01QQVJFX1VOT1JERVJFRF9GTEFHID0gMjtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tYXRjaGVzUHJvcGVydHlgIHdoaWNoIGRvZXNuJ3QgY2xvbmUgYHNyY1ZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHZhbHVlIHRvIG1hdGNoLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZU1hdGNoZXNQcm9wZXJ0eShwYXRoLCBzcmNWYWx1ZSkge1xuICBpZiAoaXNLZXkocGF0aCkgJiYgaXNTdHJpY3RDb21wYXJhYmxlKHNyY1ZhbHVlKSkge1xuICAgIHJldHVybiBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZSh0b0tleShwYXRoKSwgc3JjVmFsdWUpO1xuICB9XG4gIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIgb2JqVmFsdWUgPSBnZXQob2JqZWN0LCBwYXRoKTtcbiAgICByZXR1cm4gKG9ialZhbHVlID09PSB1bmRlZmluZWQgJiYgb2JqVmFsdWUgPT09IHNyY1ZhbHVlKVxuICAgICAgPyBoYXNJbihvYmplY3QsIHBhdGgpXG4gICAgICA6IGJhc2VJc0VxdWFsKHNyY1ZhbHVlLCBvYmpWYWx1ZSwgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgfCBDT01QQVJFX1VOT1JERVJFRF9GTEFHKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZU1hdGNoZXNQcm9wZXJ0eTtcbiIsImltcG9ydCBiYXNlR2V0IGZyb20gJy4vX2Jhc2VHZXQuanMnO1xuXG4vKipcbiAqIEdldHMgdGhlIHZhbHVlIGF0IGBwYXRoYCBvZiBgb2JqZWN0YC4gSWYgdGhlIHJlc29sdmVkIHZhbHVlIGlzXG4gKiBgdW5kZWZpbmVkYCwgdGhlIGBkZWZhdWx0VmFsdWVgIGlzIHJldHVybmVkIGluIGl0cyBwbGFjZS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuNy4wXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHBhcmFtIHsqfSBbZGVmYXVsdFZhbHVlXSBUaGUgdmFsdWUgcmV0dXJuZWQgZm9yIGB1bmRlZmluZWRgIHJlc29sdmVkIHZhbHVlcy5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfV0gfTtcbiAqXG4gKiBfLmdldChvYmplY3QsICdhWzBdLmIuYycpO1xuICogLy8gPT4gM1xuICpcbiAqIF8uZ2V0KG9iamVjdCwgWydhJywgJzAnLCAnYicsICdjJ10pO1xuICogLy8gPT4gM1xuICpcbiAqIF8uZ2V0KG9iamVjdCwgJ2EuYi5jJywgJ2RlZmF1bHQnKTtcbiAqIC8vID0+ICdkZWZhdWx0J1xuICovXG5mdW5jdGlvbiBnZXQob2JqZWN0LCBwYXRoLCBkZWZhdWx0VmFsdWUpIHtcbiAgdmFyIHJlc3VsdCA9IG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogYmFzZUdldChvYmplY3QsIHBhdGgpO1xuICByZXR1cm4gcmVzdWx0ID09PSB1bmRlZmluZWQgPyBkZWZhdWx0VmFsdWUgOiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldDtcbiIsImltcG9ydCBiYXNlUHJvcGVydHkgZnJvbSAnLi9fYmFzZVByb3BlcnR5LmpzJztcbmltcG9ydCBiYXNlUHJvcGVydHlEZWVwIGZyb20gJy4vX2Jhc2VQcm9wZXJ0eURlZXAuanMnO1xuaW1wb3J0IGlzS2V5IGZyb20gJy4vX2lzS2V5LmpzJztcbmltcG9ydCB0b0tleSBmcm9tICcuL190b0tleS5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgdmFsdWUgYXQgYHBhdGhgIG9mIGEgZ2l2ZW4gb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMi40LjBcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3RzID0gW1xuICogICB7ICdhJzogeyAnYic6IDIgfSB9LFxuICogICB7ICdhJzogeyAnYic6IDEgfSB9XG4gKiBdO1xuICpcbiAqIF8ubWFwKG9iamVjdHMsIF8ucHJvcGVydHkoJ2EuYicpKTtcbiAqIC8vID0+IFsyLCAxXVxuICpcbiAqIF8ubWFwKF8uc29ydEJ5KG9iamVjdHMsIF8ucHJvcGVydHkoWydhJywgJ2InXSkpLCAnYS5iJyk7XG4gKiAvLyA9PiBbMSwgMl1cbiAqL1xuZnVuY3Rpb24gcHJvcGVydHkocGF0aCkge1xuICByZXR1cm4gaXNLZXkocGF0aCkgPyBiYXNlUHJvcGVydHkodG9LZXkocGF0aCkpIDogYmFzZVByb3BlcnR5RGVlcChwYXRoKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgcHJvcGVydHk7XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnByb3BlcnR5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VQcm9wZXJ0eShrZXkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlUHJvcGVydHk7XG4iLCJpbXBvcnQgYmFzZUdldCBmcm9tICcuL19iYXNlR2V0LmpzJztcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VQcm9wZXJ0eWAgd2hpY2ggc3VwcG9ydHMgZGVlcCBwYXRocy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlUHJvcGVydHlEZWVwKHBhdGgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHJldHVybiBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VQcm9wZXJ0eURlZXA7XG4iLCJpbXBvcnQgYmFzZUVhY2ggZnJvbSAnLi9fYmFzZUVhY2guanMnO1xuaW1wb3J0IGlzQXJyYXlMaWtlIGZyb20gJy4vaXNBcnJheUxpa2UuanMnO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hcGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBiYXNlTWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gaXNBcnJheUxpa2UoY29sbGVjdGlvbikgPyBBcnJheShjb2xsZWN0aW9uLmxlbmd0aCkgOiBbXTtcblxuICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSB7XG4gICAgcmVzdWx0WysraW5kZXhdID0gaXRlcmF0ZWUodmFsdWUsIGtleSwgY29sbGVjdGlvbik7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlTWFwO1xuIiwiaW1wb3J0IGFycmF5TWFwIGZyb20gJy4vX2FycmF5TWFwLmpzJztcbmltcG9ydCBiYXNlSXRlcmF0ZWUgZnJvbSAnLi9fYmFzZUl0ZXJhdGVlLmpzJztcbmltcG9ydCBiYXNlTWFwIGZyb20gJy4vX2Jhc2VNYXAuanMnO1xuaW1wb3J0IGlzQXJyYXkgZnJvbSAnLi9pc0FycmF5LmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHZhbHVlcyBieSBydW5uaW5nIGVhY2ggZWxlbWVudCBpbiBgY29sbGVjdGlvbmAgdGhydVxuICogYGl0ZXJhdGVlYC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6XG4gKiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gKlxuICogTWFueSBsb2Rhc2ggbWV0aG9kcyBhcmUgZ3VhcmRlZCB0byB3b3JrIGFzIGl0ZXJhdGVlcyBmb3IgbWV0aG9kcyBsaWtlXG4gKiBgXy5ldmVyeWAsIGBfLmZpbHRlcmAsIGBfLm1hcGAsIGBfLm1hcFZhbHVlc2AsIGBfLnJlamVjdGAsIGFuZCBgXy5zb21lYC5cbiAqXG4gKiBUaGUgZ3VhcmRlZCBtZXRob2RzIGFyZTpcbiAqIGBhcnlgLCBgY2h1bmtgLCBgY3VycnlgLCBgY3VycnlSaWdodGAsIGBkcm9wYCwgYGRyb3BSaWdodGAsIGBldmVyeWAsXG4gKiBgZmlsbGAsIGBpbnZlcnRgLCBgcGFyc2VJbnRgLCBgcmFuZG9tYCwgYHJhbmdlYCwgYHJhbmdlUmlnaHRgLCBgcmVwZWF0YCxcbiAqIGBzYW1wbGVTaXplYCwgYHNsaWNlYCwgYHNvbWVgLCBgc29ydEJ5YCwgYHNwbGl0YCwgYHRha2VgLCBgdGFrZVJpZ2h0YCxcbiAqIGB0ZW1wbGF0ZWAsIGB0cmltYCwgYHRyaW1FbmRgLCBgdHJpbVN0YXJ0YCwgYW5kIGB3b3Jkc2BcbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgYXJyYXkuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIHNxdWFyZShuKSB7XG4gKiAgIHJldHVybiBuICogbjtcbiAqIH1cbiAqXG4gKiBfLm1hcChbNCwgOF0sIHNxdWFyZSk7XG4gKiAvLyA9PiBbMTYsIDY0XVxuICpcbiAqIF8ubWFwKHsgJ2EnOiA0LCAnYic6IDggfSwgc3F1YXJlKTtcbiAqIC8vID0+IFsxNiwgNjRdIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gKlxuICogdmFyIHVzZXJzID0gW1xuICogICB7ICd1c2VyJzogJ2Jhcm5leScgfSxcbiAqICAgeyAndXNlcic6ICdmcmVkJyB9XG4gKiBdO1xuICpcbiAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICogXy5tYXAodXNlcnMsICd1c2VyJyk7XG4gKiAvLyA9PiBbJ2Jhcm5leScsICdmcmVkJ11cbiAqL1xuZnVuY3Rpb24gbWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5TWFwIDogYmFzZU1hcDtcbiAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgYmFzZUl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1hcDtcbiIsImltcG9ydCBiYXNlTWF0Y2hlcyBmcm9tICcuL19iYXNlTWF0Y2hlcy5qcyc7XG5pbXBvcnQgYmFzZU1hdGNoZXNQcm9wZXJ0eSBmcm9tICcuL19iYXNlTWF0Y2hlc1Byb3BlcnR5LmpzJztcbmltcG9ydCBpZGVudGl0eSBmcm9tICcuL2lkZW50aXR5LmpzJztcbmltcG9ydCBpc0FycmF5IGZyb20gJy4vaXNBcnJheS5qcyc7XG5pbXBvcnQgcHJvcGVydHkgZnJvbSAnLi9wcm9wZXJ0eS5qcyc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXRlcmF0ZWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IFt2YWx1ZT1fLmlkZW50aXR5XSBUaGUgdmFsdWUgdG8gY29udmVydCB0byBhbiBpdGVyYXRlZS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgaXRlcmF0ZWUuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJdGVyYXRlZSh2YWx1ZSkge1xuICAvLyBEb24ndCBzdG9yZSB0aGUgYHR5cGVvZmAgcmVzdWx0IGluIGEgdmFyaWFibGUgdG8gYXZvaWQgYSBKSVQgYnVnIGluIFNhZmFyaSA5LlxuICAvLyBTZWUgaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTE1NjAzNCBmb3IgbW9yZSBkZXRhaWxzLlxuICBpZiAodHlwZW9mIHZhbHVlID09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gaWRlbnRpdHk7XG4gIH1cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBpc0FycmF5KHZhbHVlKVxuICAgICAgPyBiYXNlTWF0Y2hlc1Byb3BlcnR5KHZhbHVlWzBdLCB2YWx1ZVsxXSlcbiAgICAgIDogYmFzZU1hdGNoZXModmFsdWUpO1xuICB9XG4gIHJldHVybiBwcm9wZXJ0eSh2YWx1ZSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VJdGVyYXRlZTtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgcmVhY3RDU1MgZnJvbSAncmVhY3Rjc3MnO1xuaW1wb3J0IG1hcCBmcm9tICdsb2Rhc2gtZXMvbWFwJztcblxuaW1wb3J0IHsgU3dhdGNoIH0gZnJvbSAnLi4vY29tbW9uJztcblxuZXhwb3J0IHZhciBCbG9ja1N3YXRjaGVzID0gZnVuY3Rpb24gQmxvY2tTd2F0Y2hlcyhfcmVmKSB7XG4gIHZhciBjb2xvcnMgPSBfcmVmLmNvbG9ycyxcbiAgICAgIG9uQ2xpY2sgPSBfcmVmLm9uQ2xpY2ssXG4gICAgICBvblN3YXRjaEhvdmVyID0gX3JlZi5vblN3YXRjaEhvdmVyO1xuXG4gIHZhciBzdHlsZXMgPSByZWFjdENTUyh7XG4gICAgJ2RlZmF1bHQnOiB7XG4gICAgICBzd2F0Y2hlczoge1xuICAgICAgICBtYXJnaW5SaWdodDogJy0xMHB4J1xuICAgICAgfSxcbiAgICAgIHN3YXRjaDoge1xuICAgICAgICB3aWR0aDogJzIycHgnLFxuICAgICAgICBoZWlnaHQ6ICcyMnB4JyxcbiAgICAgICAgZmxvYXQ6ICdsZWZ0JyxcbiAgICAgICAgbWFyZ2luUmlnaHQ6ICcxMHB4JyxcbiAgICAgICAgbWFyZ2luQm90dG9tOiAnMTBweCcsXG4gICAgICAgIGJvcmRlclJhZGl1czogJzRweCdcbiAgICAgIH0sXG4gICAgICBjbGVhcjoge1xuICAgICAgICBjbGVhcjogJ2JvdGgnXG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAnZGl2JyxcbiAgICB7IHN0eWxlOiBzdHlsZXMuc3dhdGNoZXMgfSxcbiAgICBtYXAoY29sb3JzLCBmdW5jdGlvbiAoYykge1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoU3dhdGNoLCB7XG4gICAgICAgIGtleTogYyxcbiAgICAgICAgY29sb3I6IGMsXG4gICAgICAgIHN0eWxlOiBzdHlsZXMuc3dhdGNoLFxuICAgICAgICBvbkNsaWNrOiBvbkNsaWNrLFxuICAgICAgICBvbkhvdmVyOiBvblN3YXRjaEhvdmVyLFxuICAgICAgICBmb2N1c1N0eWxlOiB7XG4gICAgICAgICAgYm94U2hhZG93OiAnMCAwIDRweCAnICsgY1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KSxcbiAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IHN0eWxlOiBzdHlsZXMuY2xlYXIgfSlcbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEJsb2NrU3dhdGNoZXM7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgcmVhY3RDU1MgZnJvbSAncmVhY3Rjc3MnO1xuaW1wb3J0IG1lcmdlIGZyb20gJ2xvZGFzaC1lcy9tZXJnZSc7XG5pbXBvcnQgKiBhcyBjb2xvciBmcm9tICcuLi8uLi9oZWxwZXJzL2NvbG9yJztcblxuaW1wb3J0IHsgQ29sb3JXcmFwLCBFZGl0YWJsZUlucHV0LCBDaGVja2JvYXJkIH0gZnJvbSAnLi4vY29tbW9uJztcbmltcG9ydCBCbG9ja1N3YXRjaGVzIGZyb20gJy4vQmxvY2tTd2F0Y2hlcyc7XG5cbmV4cG9ydCB2YXIgQmxvY2sgPSBmdW5jdGlvbiBCbG9jayhfcmVmKSB7XG4gIHZhciBvbkNoYW5nZSA9IF9yZWYub25DaGFuZ2UsXG4gICAgICBvblN3YXRjaEhvdmVyID0gX3JlZi5vblN3YXRjaEhvdmVyLFxuICAgICAgaGV4ID0gX3JlZi5oZXgsXG4gICAgICBjb2xvcnMgPSBfcmVmLmNvbG9ycyxcbiAgICAgIHdpZHRoID0gX3JlZi53aWR0aCxcbiAgICAgIHRyaWFuZ2xlID0gX3JlZi50cmlhbmdsZSxcbiAgICAgIF9yZWYkc3R5bGVzID0gX3JlZi5zdHlsZXMsXG4gICAgICBwYXNzZWRTdHlsZXMgPSBfcmVmJHN0eWxlcyA9PT0gdW5kZWZpbmVkID8ge30gOiBfcmVmJHN0eWxlcyxcbiAgICAgIF9yZWYkY2xhc3NOYW1lID0gX3JlZi5jbGFzc05hbWUsXG4gICAgICBjbGFzc05hbWUgPSBfcmVmJGNsYXNzTmFtZSA9PT0gdW5kZWZpbmVkID8gJycgOiBfcmVmJGNsYXNzTmFtZTtcblxuICB2YXIgdHJhbnNwYXJlbnQgPSBoZXggPT09ICd0cmFuc3BhcmVudCc7XG4gIHZhciBoYW5kbGVDaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVDaGFuZ2UoaGV4Q29kZSwgZSkge1xuICAgIGNvbG9yLmlzVmFsaWRIZXgoaGV4Q29kZSkgJiYgb25DaGFuZ2Uoe1xuICAgICAgaGV4OiBoZXhDb2RlLFxuICAgICAgc291cmNlOiAnaGV4J1xuICAgIH0sIGUpO1xuICB9O1xuXG4gIHZhciBzdHlsZXMgPSByZWFjdENTUyhtZXJnZSh7XG4gICAgJ2RlZmF1bHQnOiB7XG4gICAgICBjYXJkOiB7XG4gICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgYmFja2dyb3VuZDogJyNmZmYnLFxuICAgICAgICBib3hTaGFkb3c6ICcwIDFweCByZ2JhKDAsMCwwLC4xKScsXG4gICAgICAgIGJvcmRlclJhZGl1czogJzZweCcsXG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnXG4gICAgICB9LFxuICAgICAgaGVhZDoge1xuICAgICAgICBoZWlnaHQ6ICcxMTBweCcsXG4gICAgICAgIGJhY2tncm91bmQ6IGhleCxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAnNnB4IDZweCAwIDAnLFxuICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnXG4gICAgICB9LFxuICAgICAgYm9keToge1xuICAgICAgICBwYWRkaW5nOiAnMTBweCdcbiAgICAgIH0sXG4gICAgICBsYWJlbDoge1xuICAgICAgICBmb250U2l6ZTogJzE4cHgnLFxuICAgICAgICBjb2xvcjogY29sb3IuZ2V0Q29udHJhc3RpbmdDb2xvcihoZXgpLFxuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xuICAgICAgfSxcbiAgICAgIHRyaWFuZ2xlOiB7XG4gICAgICAgIHdpZHRoOiAnMHB4JyxcbiAgICAgICAgaGVpZ2h0OiAnMHB4JyxcbiAgICAgICAgYm9yZGVyU3R5bGU6ICdzb2xpZCcsXG4gICAgICAgIGJvcmRlcldpZHRoOiAnMCAxMHB4IDEwcHggMTBweCcsXG4gICAgICAgIGJvcmRlckNvbG9yOiAndHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQgJyArIGhleCArICcgdHJhbnNwYXJlbnQnLFxuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgdG9wOiAnLTEwcHgnLFxuICAgICAgICBsZWZ0OiAnNTAlJyxcbiAgICAgICAgbWFyZ2luTGVmdDogJy0xMHB4J1xuICAgICAgfSxcbiAgICAgIGlucHV0OiB7XG4gICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgIGZvbnRTaXplOiAnMTJweCcsXG4gICAgICAgIGNvbG9yOiAnIzY2NicsXG4gICAgICAgIGJvcmRlcjogJzBweCcsXG4gICAgICAgIG91dGxpbmU6ICdub25lJyxcbiAgICAgICAgaGVpZ2h0OiAnMjJweCcsXG4gICAgICAgIGJveFNoYWRvdzogJ2luc2V0IDAgMCAwIDFweCAjZGRkJyxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAnNHB4JyxcbiAgICAgICAgcGFkZGluZzogJzAgN3B4JyxcbiAgICAgICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCdcbiAgICAgIH1cbiAgICB9LFxuICAgICdoaWRlLXRyaWFuZ2xlJzoge1xuICAgICAgdHJpYW5nbGU6IHtcbiAgICAgICAgZGlzcGxheTogJ25vbmUnXG4gICAgICB9XG4gICAgfVxuICB9LCBwYXNzZWRTdHlsZXMpLCB7ICdoaWRlLXRyaWFuZ2xlJzogdHJpYW5nbGUgPT09ICdoaWRlJyB9KTtcblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAnZGl2JyxcbiAgICB7IHN0eWxlOiBzdHlsZXMuY2FyZCwgY2xhc3NOYW1lOiAnYmxvY2stcGlja2VyICcgKyBjbGFzc05hbWUgfSxcbiAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IHN0eWxlOiBzdHlsZXMudHJpYW5nbGUgfSksXG4gICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgeyBzdHlsZTogc3R5bGVzLmhlYWQgfSxcbiAgICAgIHRyYW5zcGFyZW50ICYmIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ2hlY2tib2FyZCwgeyBib3JkZXJSYWRpdXM6ICc2cHggNnB4IDAgMCcgfSksXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgeyBzdHlsZTogc3R5bGVzLmxhYmVsIH0sXG4gICAgICAgIGhleFxuICAgICAgKVxuICAgICksXG4gICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgeyBzdHlsZTogc3R5bGVzLmJvZHkgfSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQmxvY2tTd2F0Y2hlcywgeyBjb2xvcnM6IGNvbG9ycywgb25DbGljazogaGFuZGxlQ2hhbmdlLCBvblN3YXRjaEhvdmVyOiBvblN3YXRjaEhvdmVyIH0pLFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChFZGl0YWJsZUlucHV0LCB7XG4gICAgICAgIHN0eWxlOiB7IGlucHV0OiBzdHlsZXMuaW5wdXQgfSxcbiAgICAgICAgdmFsdWU6IGhleCxcbiAgICAgICAgb25DaGFuZ2U6IGhhbmRsZUNoYW5nZVxuICAgICAgfSlcbiAgICApXG4gICk7XG59O1xuXG5CbG9jay5wcm9wVHlwZXMgPSB7XG4gIHdpZHRoOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMubnVtYmVyXSksXG4gIGNvbG9yczogUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnN0cmluZyksXG4gIHRyaWFuZ2xlOiBQcm9wVHlwZXMub25lT2YoWyd0b3AnLCAnaGlkZSddKSxcbiAgc3R5bGVzOiBQcm9wVHlwZXMub2JqZWN0XG59O1xuXG5CbG9jay5kZWZhdWx0UHJvcHMgPSB7XG4gIHdpZHRoOiAxNzAsXG4gIGNvbG9yczogWycjRDlFM0YwJywgJyNGNDczNzMnLCAnIzY5NzY4OScsICcjMzdENjdBJywgJyMyQ0NDRTQnLCAnIzU1NTU1NScsICcjZGNlNzc1JywgJyNmZjhhNjUnLCAnI2JhNjhjOCddLFxuICB0cmlhbmdsZTogJ3RvcCcsXG4gIHN0eWxlczoge31cbn07XG5cbmV4cG9ydCBkZWZhdWx0IENvbG9yV3JhcChCbG9jayk7IiwiZXhwb3J0IHZhciByZWQgPSB7XCI1MFwiOlwiI2ZmZWJlZVwiLFwiMTAwXCI6XCIjZmZjZGQyXCIsXCIyMDBcIjpcIiNlZjlhOWFcIixcIjMwMFwiOlwiI2U1NzM3M1wiLFwiNDAwXCI6XCIjZWY1MzUwXCIsXCI1MDBcIjpcIiNmNDQzMzZcIixcIjYwMFwiOlwiI2U1MzkzNVwiLFwiNzAwXCI6XCIjZDMyZjJmXCIsXCI4MDBcIjpcIiNjNjI4MjhcIixcIjkwMFwiOlwiI2I3MWMxY1wiLFwiYTEwMFwiOlwiI2ZmOGE4MFwiLFwiYTIwMFwiOlwiI2ZmNTI1MlwiLFwiYTQwMFwiOlwiI2ZmMTc0NFwiLFwiYTcwMFwiOlwiI2Q1MDAwMFwifTtcbmV4cG9ydCB2YXIgcGluayA9IHtcIjUwXCI6XCIjZmNlNGVjXCIsXCIxMDBcIjpcIiNmOGJiZDBcIixcIjIwMFwiOlwiI2Y0OGZiMVwiLFwiMzAwXCI6XCIjZjA2MjkyXCIsXCI0MDBcIjpcIiNlYzQwN2FcIixcIjUwMFwiOlwiI2U5MWU2M1wiLFwiNjAwXCI6XCIjZDgxYjYwXCIsXCI3MDBcIjpcIiNjMjE4NWJcIixcIjgwMFwiOlwiI2FkMTQ1N1wiLFwiOTAwXCI6XCIjODgwZTRmXCIsXCJhMTAwXCI6XCIjZmY4MGFiXCIsXCJhMjAwXCI6XCIjZmY0MDgxXCIsXCJhNDAwXCI6XCIjZjUwMDU3XCIsXCJhNzAwXCI6XCIjYzUxMTYyXCJ9O1xuZXhwb3J0IHZhciBwdXJwbGUgPSB7XCI1MFwiOlwiI2YzZTVmNVwiLFwiMTAwXCI6XCIjZTFiZWU3XCIsXCIyMDBcIjpcIiNjZTkzZDhcIixcIjMwMFwiOlwiI2JhNjhjOFwiLFwiNDAwXCI6XCIjYWI0N2JjXCIsXCI1MDBcIjpcIiM5YzI3YjBcIixcIjYwMFwiOlwiIzhlMjRhYVwiLFwiNzAwXCI6XCIjN2IxZmEyXCIsXCI4MDBcIjpcIiM2YTFiOWFcIixcIjkwMFwiOlwiIzRhMTQ4Y1wiLFwiYTEwMFwiOlwiI2VhODBmY1wiLFwiYTIwMFwiOlwiI2UwNDBmYlwiLFwiYTQwMFwiOlwiI2Q1MDBmOVwiLFwiYTcwMFwiOlwiI2FhMDBmZlwifTtcbmV4cG9ydCB2YXIgZGVlcFB1cnBsZSA9IHtcIjUwXCI6XCIjZWRlN2Y2XCIsXCIxMDBcIjpcIiNkMWM0ZTlcIixcIjIwMFwiOlwiI2IzOWRkYlwiLFwiMzAwXCI6XCIjOTU3NWNkXCIsXCI0MDBcIjpcIiM3ZTU3YzJcIixcIjUwMFwiOlwiIzY3M2FiN1wiLFwiNjAwXCI6XCIjNWUzNWIxXCIsXCI3MDBcIjpcIiM1MTJkYThcIixcIjgwMFwiOlwiIzQ1MjdhMFwiLFwiOTAwXCI6XCIjMzExYjkyXCIsXCJhMTAwXCI6XCIjYjM4OGZmXCIsXCJhMjAwXCI6XCIjN2M0ZGZmXCIsXCJhNDAwXCI6XCIjNjUxZmZmXCIsXCJhNzAwXCI6XCIjNjIwMGVhXCJ9O1xuZXhwb3J0IHZhciBpbmRpZ28gPSB7XCI1MFwiOlwiI2U4ZWFmNlwiLFwiMTAwXCI6XCIjYzVjYWU5XCIsXCIyMDBcIjpcIiM5ZmE4ZGFcIixcIjMwMFwiOlwiIzc5ODZjYlwiLFwiNDAwXCI6XCIjNWM2YmMwXCIsXCI1MDBcIjpcIiMzZjUxYjVcIixcIjYwMFwiOlwiIzM5NDlhYlwiLFwiNzAwXCI6XCIjMzAzZjlmXCIsXCI4MDBcIjpcIiMyODM1OTNcIixcIjkwMFwiOlwiIzFhMjM3ZVwiLFwiYTEwMFwiOlwiIzhjOWVmZlwiLFwiYTIwMFwiOlwiIzUzNmRmZVwiLFwiYTQwMFwiOlwiIzNkNWFmZVwiLFwiYTcwMFwiOlwiIzMwNGZmZVwifTtcbmV4cG9ydCB2YXIgYmx1ZSA9IHtcIjUwXCI6XCIjZTNmMmZkXCIsXCIxMDBcIjpcIiNiYmRlZmJcIixcIjIwMFwiOlwiIzkwY2FmOVwiLFwiMzAwXCI6XCIjNjRiNWY2XCIsXCI0MDBcIjpcIiM0MmE1ZjVcIixcIjUwMFwiOlwiIzIxOTZmM1wiLFwiNjAwXCI6XCIjMWU4OGU1XCIsXCI3MDBcIjpcIiMxOTc2ZDJcIixcIjgwMFwiOlwiIzE1NjVjMFwiLFwiOTAwXCI6XCIjMGQ0N2ExXCIsXCJhMTAwXCI6XCIjODJiMWZmXCIsXCJhMjAwXCI6XCIjNDQ4YWZmXCIsXCJhNDAwXCI6XCIjMjk3OWZmXCIsXCJhNzAwXCI6XCIjMjk2MmZmXCJ9O1xuZXhwb3J0IHZhciBsaWdodEJsdWUgPSB7XCI1MFwiOlwiI2UxZjVmZVwiLFwiMTAwXCI6XCIjYjNlNWZjXCIsXCIyMDBcIjpcIiM4MWQ0ZmFcIixcIjMwMFwiOlwiIzRmYzNmN1wiLFwiNDAwXCI6XCIjMjliNmY2XCIsXCI1MDBcIjpcIiMwM2E5ZjRcIixcIjYwMFwiOlwiIzAzOWJlNVwiLFwiNzAwXCI6XCIjMDI4OGQxXCIsXCI4MDBcIjpcIiMwMjc3YmRcIixcIjkwMFwiOlwiIzAxNTc5YlwiLFwiYTEwMFwiOlwiIzgwZDhmZlwiLFwiYTIwMFwiOlwiIzQwYzRmZlwiLFwiYTQwMFwiOlwiIzAwYjBmZlwiLFwiYTcwMFwiOlwiIzAwOTFlYVwifTtcbmV4cG9ydCB2YXIgY3lhbiA9IHtcIjUwXCI6XCIjZTBmN2ZhXCIsXCIxMDBcIjpcIiNiMmViZjJcIixcIjIwMFwiOlwiIzgwZGVlYVwiLFwiMzAwXCI6XCIjNGRkMGUxXCIsXCI0MDBcIjpcIiMyNmM2ZGFcIixcIjUwMFwiOlwiIzAwYmNkNFwiLFwiNjAwXCI6XCIjMDBhY2MxXCIsXCI3MDBcIjpcIiMwMDk3YTdcIixcIjgwMFwiOlwiIzAwODM4ZlwiLFwiOTAwXCI6XCIjMDA2MDY0XCIsXCJhMTAwXCI6XCIjODRmZmZmXCIsXCJhMjAwXCI6XCIjMThmZmZmXCIsXCJhNDAwXCI6XCIjMDBlNWZmXCIsXCJhNzAwXCI6XCIjMDBiOGQ0XCJ9O1xuZXhwb3J0IHZhciB0ZWFsID0ge1wiNTBcIjpcIiNlMGYyZjFcIixcIjEwMFwiOlwiI2IyZGZkYlwiLFwiMjAwXCI6XCIjODBjYmM0XCIsXCIzMDBcIjpcIiM0ZGI2YWNcIixcIjQwMFwiOlwiIzI2YTY5YVwiLFwiNTAwXCI6XCIjMDA5Njg4XCIsXCI2MDBcIjpcIiMwMDg5N2JcIixcIjcwMFwiOlwiIzAwNzk2YlwiLFwiODAwXCI6XCIjMDA2OTVjXCIsXCI5MDBcIjpcIiMwMDRkNDBcIixcImExMDBcIjpcIiNhN2ZmZWJcIixcImEyMDBcIjpcIiM2NGZmZGFcIixcImE0MDBcIjpcIiMxZGU5YjZcIixcImE3MDBcIjpcIiMwMGJmYTVcIn07XG5leHBvcnQgdmFyIGdyZWVuID0ge1wiNTBcIjpcIiNlOGY1ZTlcIixcIjEwMFwiOlwiI2M4ZTZjOVwiLFwiMjAwXCI6XCIjYTVkNmE3XCIsXCIzMDBcIjpcIiM4MWM3ODRcIixcIjQwMFwiOlwiIzY2YmI2YVwiLFwiNTAwXCI6XCIjNGNhZjUwXCIsXCI2MDBcIjpcIiM0M2EwNDdcIixcIjcwMFwiOlwiIzM4OGUzY1wiLFwiODAwXCI6XCIjMmU3ZDMyXCIsXCI5MDBcIjpcIiMxYjVlMjBcIixcImExMDBcIjpcIiNiOWY2Y2FcIixcImEyMDBcIjpcIiM2OWYwYWVcIixcImE0MDBcIjpcIiMwMGU2NzZcIixcImE3MDBcIjpcIiMwMGM4NTNcIn07XG5leHBvcnQgdmFyIGxpZ2h0R3JlZW4gPSB7XCI1MFwiOlwiI2YxZjhlOVwiLFwiMTAwXCI6XCIjZGNlZGM4XCIsXCIyMDBcIjpcIiNjNWUxYTVcIixcIjMwMFwiOlwiI2FlZDU4MVwiLFwiNDAwXCI6XCIjOWNjYzY1XCIsXCI1MDBcIjpcIiM4YmMzNGFcIixcIjYwMFwiOlwiIzdjYjM0MlwiLFwiNzAwXCI6XCIjNjg5ZjM4XCIsXCI4MDBcIjpcIiM1NThiMmZcIixcIjkwMFwiOlwiIzMzNjkxZVwiLFwiYTEwMFwiOlwiI2NjZmY5MFwiLFwiYTIwMFwiOlwiI2IyZmY1OVwiLFwiYTQwMFwiOlwiIzc2ZmYwM1wiLFwiYTcwMFwiOlwiIzY0ZGQxN1wifTtcbmV4cG9ydCB2YXIgbGltZSA9IHtcIjUwXCI6XCIjZjlmYmU3XCIsXCIxMDBcIjpcIiNmMGY0YzNcIixcIjIwMFwiOlwiI2U2ZWU5Y1wiLFwiMzAwXCI6XCIjZGNlNzc1XCIsXCI0MDBcIjpcIiNkNGUxNTdcIixcIjUwMFwiOlwiI2NkZGMzOVwiLFwiNjAwXCI6XCIjYzBjYTMzXCIsXCI3MDBcIjpcIiNhZmI0MmJcIixcIjgwMFwiOlwiIzllOWQyNFwiLFwiOTAwXCI6XCIjODI3NzE3XCIsXCJhMTAwXCI6XCIjZjRmZjgxXCIsXCJhMjAwXCI6XCIjZWVmZjQxXCIsXCJhNDAwXCI6XCIjYzZmZjAwXCIsXCJhNzAwXCI6XCIjYWVlYTAwXCJ9O1xuZXhwb3J0IHZhciB5ZWxsb3cgPSB7XCI1MFwiOlwiI2ZmZmRlN1wiLFwiMTAwXCI6XCIjZmZmOWM0XCIsXCIyMDBcIjpcIiNmZmY1OWRcIixcIjMwMFwiOlwiI2ZmZjE3NlwiLFwiNDAwXCI6XCIjZmZlZTU4XCIsXCI1MDBcIjpcIiNmZmViM2JcIixcIjYwMFwiOlwiI2ZkZDgzNVwiLFwiNzAwXCI6XCIjZmJjMDJkXCIsXCI4MDBcIjpcIiNmOWE4MjVcIixcIjkwMFwiOlwiI2Y1N2YxN1wiLFwiYTEwMFwiOlwiI2ZmZmY4ZFwiLFwiYTIwMFwiOlwiI2ZmZmYwMFwiLFwiYTQwMFwiOlwiI2ZmZWEwMFwiLFwiYTcwMFwiOlwiI2ZmZDYwMFwifTtcbmV4cG9ydCB2YXIgYW1iZXIgPSB7XCI1MFwiOlwiI2ZmZjhlMVwiLFwiMTAwXCI6XCIjZmZlY2IzXCIsXCIyMDBcIjpcIiNmZmUwODJcIixcIjMwMFwiOlwiI2ZmZDU0ZlwiLFwiNDAwXCI6XCIjZmZjYTI4XCIsXCI1MDBcIjpcIiNmZmMxMDdcIixcIjYwMFwiOlwiI2ZmYjMwMFwiLFwiNzAwXCI6XCIjZmZhMDAwXCIsXCI4MDBcIjpcIiNmZjhmMDBcIixcIjkwMFwiOlwiI2ZmNmYwMFwiLFwiYTEwMFwiOlwiI2ZmZTU3ZlwiLFwiYTIwMFwiOlwiI2ZmZDc0MFwiLFwiYTQwMFwiOlwiI2ZmYzQwMFwiLFwiYTcwMFwiOlwiI2ZmYWIwMFwifTtcbmV4cG9ydCB2YXIgb3JhbmdlID0ge1wiNTBcIjpcIiNmZmYzZTBcIixcIjEwMFwiOlwiI2ZmZTBiMlwiLFwiMjAwXCI6XCIjZmZjYzgwXCIsXCIzMDBcIjpcIiNmZmI3NGRcIixcIjQwMFwiOlwiI2ZmYTcyNlwiLFwiNTAwXCI6XCIjZmY5ODAwXCIsXCI2MDBcIjpcIiNmYjhjMDBcIixcIjcwMFwiOlwiI2Y1N2MwMFwiLFwiODAwXCI6XCIjZWY2YzAwXCIsXCI5MDBcIjpcIiNlNjUxMDBcIixcImExMDBcIjpcIiNmZmQxODBcIixcImEyMDBcIjpcIiNmZmFiNDBcIixcImE0MDBcIjpcIiNmZjkxMDBcIixcImE3MDBcIjpcIiNmZjZkMDBcIn07XG5leHBvcnQgdmFyIGRlZXBPcmFuZ2UgPSB7XCI1MFwiOlwiI2ZiZTllN1wiLFwiMTAwXCI6XCIjZmZjY2JjXCIsXCIyMDBcIjpcIiNmZmFiOTFcIixcIjMwMFwiOlwiI2ZmOGE2NVwiLFwiNDAwXCI6XCIjZmY3MDQzXCIsXCI1MDBcIjpcIiNmZjU3MjJcIixcIjYwMFwiOlwiI2Y0NTExZVwiLFwiNzAwXCI6XCIjZTY0YTE5XCIsXCI4MDBcIjpcIiNkODQzMTVcIixcIjkwMFwiOlwiI2JmMzYwY1wiLFwiYTEwMFwiOlwiI2ZmOWU4MFwiLFwiYTIwMFwiOlwiI2ZmNmU0MFwiLFwiYTQwMFwiOlwiI2ZmM2QwMFwiLFwiYTcwMFwiOlwiI2RkMmMwMFwifTtcbmV4cG9ydCB2YXIgYnJvd24gPSB7XCI1MFwiOlwiI2VmZWJlOVwiLFwiMTAwXCI6XCIjZDdjY2M4XCIsXCIyMDBcIjpcIiNiY2FhYTRcIixcIjMwMFwiOlwiI2ExODg3ZlwiLFwiNDAwXCI6XCIjOGQ2ZTYzXCIsXCI1MDBcIjpcIiM3OTU1NDhcIixcIjYwMFwiOlwiIzZkNGM0MVwiLFwiNzAwXCI6XCIjNWQ0MDM3XCIsXCI4MDBcIjpcIiM0ZTM0MmVcIixcIjkwMFwiOlwiIzNlMjcyM1wifTtcbmV4cG9ydCB2YXIgZ3JleSA9IHtcIjUwXCI6XCIjZmFmYWZhXCIsXCIxMDBcIjpcIiNmNWY1ZjVcIixcIjIwMFwiOlwiI2VlZWVlZVwiLFwiMzAwXCI6XCIjZTBlMGUwXCIsXCI0MDBcIjpcIiNiZGJkYmRcIixcIjUwMFwiOlwiIzllOWU5ZVwiLFwiNjAwXCI6XCIjNzU3NTc1XCIsXCI3MDBcIjpcIiM2MTYxNjFcIixcIjgwMFwiOlwiIzQyNDI0MlwiLFwiOTAwXCI6XCIjMjEyMTIxXCJ9O1xuZXhwb3J0IHZhciBibHVlR3JleSA9IHtcIjUwXCI6XCIjZWNlZmYxXCIsXCIxMDBcIjpcIiNjZmQ4ZGNcIixcIjIwMFwiOlwiI2IwYmVjNVwiLFwiMzAwXCI6XCIjOTBhNGFlXCIsXCI0MDBcIjpcIiM3ODkwOWNcIixcIjUwMFwiOlwiIzYwN2Q4YlwiLFwiNjAwXCI6XCIjNTQ2ZTdhXCIsXCI3MDBcIjpcIiM0NTVhNjRcIixcIjgwMFwiOlwiIzM3NDc0ZlwiLFwiOTAwXCI6XCIjMjYzMjM4XCJ9O1xuZXhwb3J0IHZhciBkYXJrVGV4dCA9IHtcInByaW1hcnlcIjpcInJnYmEoMCwgMCwgMCwgMC44NylcIixcInNlY29uZGFyeVwiOlwicmdiYSgwLCAwLCAwLCAwLjU0KVwiLFwiZGlzYWJsZWRcIjpcInJnYmEoMCwgMCwgMCwgMC4zOClcIixcImRpdmlkZXJzXCI6XCJyZ2JhKDAsIDAsIDAsIDAuMTIpXCJ9O1xuZXhwb3J0IHZhciBsaWdodFRleHQgPSB7XCJwcmltYXJ5XCI6XCJyZ2JhKDI1NSwgMjU1LCAyNTUsIDEpXCIsXCJzZWNvbmRhcnlcIjpcInJnYmEoMjU1LCAyNTUsIDI1NSwgMC43KVwiLFwiZGlzYWJsZWRcIjpcInJnYmEoMjU1LCAyNTUsIDI1NSwgMC41KVwiLFwiZGl2aWRlcnNcIjpcInJnYmEoMjU1LCAyNTUsIDI1NSwgMC4xMilcIn07XG5leHBvcnQgdmFyIGRhcmtJY29ucyA9IHtcImFjdGl2ZVwiOlwicmdiYSgwLCAwLCAwLCAwLjU0KVwiLFwiaW5hY3RpdmVcIjpcInJnYmEoMCwgMCwgMCwgMC4zOClcIn07XG5leHBvcnQgdmFyIGxpZ2h0SWNvbnMgPSB7XCJhY3RpdmVcIjpcInJnYmEoMjU1LCAyNTUsIDI1NSwgMSlcIixcImluYWN0aXZlXCI6XCJyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSlcIn07XG5leHBvcnQgdmFyIHdoaXRlID0gXCIjZmZmZmZmXCI7XG5leHBvcnQgdmFyIGJsYWNrID0gXCIjMDAwMDAwXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgcmVkOiByZWQsXG4gIHBpbms6IHBpbmssXG4gIHB1cnBsZTogcHVycGxlLFxuICBkZWVwUHVycGxlOiBkZWVwUHVycGxlLFxuICBpbmRpZ286IGluZGlnbyxcbiAgYmx1ZTogYmx1ZSxcbiAgbGlnaHRCbHVlOiBsaWdodEJsdWUsXG4gIGN5YW46IGN5YW4sXG4gIHRlYWw6IHRlYWwsXG4gIGdyZWVuOiBncmVlbixcbiAgbGlnaHRHcmVlbjogbGlnaHRHcmVlbixcbiAgbGltZTogbGltZSxcbiAgeWVsbG93OiB5ZWxsb3csXG4gIGFtYmVyOiBhbWJlcixcbiAgb3JhbmdlOiBvcmFuZ2UsXG4gIGRlZXBPcmFuZ2U6IGRlZXBPcmFuZ2UsXG4gIGJyb3duOiBicm93bixcbiAgZ3JleTogZ3JleSxcbiAgYmx1ZUdyZXk6IGJsdWVHcmV5LFxuICBkYXJrVGV4dDogZGFya1RleHQsXG4gIGxpZ2h0VGV4dDogbGlnaHRUZXh0LFxuICBkYXJrSWNvbnM6IGRhcmtJY29ucyxcbiAgbGlnaHRJY29uczogbGlnaHRJY29ucyxcbiAgd2hpdGU6IHdoaXRlLFxuICBibGFjazogYmxhY2tcbn07XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHJlYWN0Q1NTLCB7IGhhbmRsZUhvdmVyIH0gZnJvbSAncmVhY3Rjc3MnO1xuXG5pbXBvcnQgeyBTd2F0Y2ggfSBmcm9tICcuLi9jb21tb24nO1xuXG5leHBvcnQgdmFyIENpcmNsZVN3YXRjaCA9IGZ1bmN0aW9uIENpcmNsZVN3YXRjaChfcmVmKSB7XG4gIHZhciBjb2xvciA9IF9yZWYuY29sb3IsXG4gICAgICBvbkNsaWNrID0gX3JlZi5vbkNsaWNrLFxuICAgICAgb25Td2F0Y2hIb3ZlciA9IF9yZWYub25Td2F0Y2hIb3ZlcixcbiAgICAgIGhvdmVyID0gX3JlZi5ob3ZlcixcbiAgICAgIGFjdGl2ZSA9IF9yZWYuYWN0aXZlLFxuICAgICAgY2lyY2xlU2l6ZSA9IF9yZWYuY2lyY2xlU2l6ZSxcbiAgICAgIGNpcmNsZVNwYWNpbmcgPSBfcmVmLmNpcmNsZVNwYWNpbmc7XG5cbiAgdmFyIHN0eWxlcyA9IHJlYWN0Q1NTKHtcbiAgICAnZGVmYXVsdCc6IHtcbiAgICAgIHN3YXRjaDoge1xuICAgICAgICB3aWR0aDogY2lyY2xlU2l6ZSxcbiAgICAgICAgaGVpZ2h0OiBjaXJjbGVTaXplLFxuICAgICAgICBtYXJnaW5SaWdodDogY2lyY2xlU3BhY2luZyxcbiAgICAgICAgbWFyZ2luQm90dG9tOiBjaXJjbGVTcGFjaW5nLFxuICAgICAgICB0cmFuc2Zvcm06ICdzY2FsZSgxKScsXG4gICAgICAgIHRyYW5zaXRpb246ICcxMDBtcyB0cmFuc2Zvcm0gZWFzZSdcbiAgICAgIH0sXG4gICAgICBTd2F0Y2g6IHtcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAnNTAlJyxcbiAgICAgICAgYmFja2dyb3VuZDogJ3RyYW5zcGFyZW50JyxcbiAgICAgICAgYm94U2hhZG93OiAnaW5zZXQgMCAwIDAgJyArIChjaXJjbGVTaXplIC8gMiArIDEpICsgJ3B4ICcgKyBjb2xvcixcbiAgICAgICAgdHJhbnNpdGlvbjogJzEwMG1zIGJveC1zaGFkb3cgZWFzZSdcbiAgICAgIH1cbiAgICB9LFxuICAgICdob3Zlcic6IHtcbiAgICAgIHN3YXRjaDoge1xuICAgICAgICB0cmFuc2Zvcm06ICdzY2FsZSgxLjIpJ1xuICAgICAgfVxuICAgIH0sXG4gICAgJ2FjdGl2ZSc6IHtcbiAgICAgIFN3YXRjaDoge1xuICAgICAgICBib3hTaGFkb3c6ICdpbnNldCAwIDAgMCAzcHggJyArIGNvbG9yXG4gICAgICB9XG4gICAgfVxuICB9LCB7IGhvdmVyOiBob3ZlciwgYWN0aXZlOiBhY3RpdmUgfSk7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgJ2RpdicsXG4gICAgeyBzdHlsZTogc3R5bGVzLnN3YXRjaCB9LFxuICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoU3dhdGNoLCB7XG4gICAgICBzdHlsZTogc3R5bGVzLlN3YXRjaCxcbiAgICAgIGNvbG9yOiBjb2xvcixcbiAgICAgIG9uQ2xpY2s6IG9uQ2xpY2ssXG4gICAgICBvbkhvdmVyOiBvblN3YXRjaEhvdmVyLFxuICAgICAgZm9jdXNTdHlsZTogeyBib3hTaGFkb3c6IHN0eWxlcy5Td2F0Y2guYm94U2hhZG93ICsgJywgMCAwIDVweCAnICsgY29sb3IgfVxuICAgIH0pXG4gICk7XG59O1xuXG5DaXJjbGVTd2F0Y2guZGVmYXVsdFByb3BzID0ge1xuICBjaXJjbGVTaXplOiAyOCxcbiAgY2lyY2xlU3BhY2luZzogMTRcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGhhbmRsZUhvdmVyKENpcmNsZVN3YXRjaCk7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgcmVhY3RDU1MgZnJvbSAncmVhY3Rjc3MnO1xuaW1wb3J0IG1hcCBmcm9tICdsb2Rhc2gtZXMvbWFwJztcbmltcG9ydCBtZXJnZSBmcm9tICdsb2Rhc2gtZXMvbWVyZ2UnO1xuaW1wb3J0ICogYXMgbWF0ZXJpYWwgZnJvbSAnbWF0ZXJpYWwtY29sb3JzJztcblxuaW1wb3J0IHsgQ29sb3JXcmFwIH0gZnJvbSAnLi4vY29tbW9uJztcbmltcG9ydCBDaXJjbGVTd2F0Y2ggZnJvbSAnLi9DaXJjbGVTd2F0Y2gnO1xuXG5leHBvcnQgdmFyIENpcmNsZSA9IGZ1bmN0aW9uIENpcmNsZShfcmVmKSB7XG4gIHZhciB3aWR0aCA9IF9yZWYud2lkdGgsXG4gICAgICBvbkNoYW5nZSA9IF9yZWYub25DaGFuZ2UsXG4gICAgICBvblN3YXRjaEhvdmVyID0gX3JlZi5vblN3YXRjaEhvdmVyLFxuICAgICAgY29sb3JzID0gX3JlZi5jb2xvcnMsXG4gICAgICBoZXggPSBfcmVmLmhleCxcbiAgICAgIGNpcmNsZVNpemUgPSBfcmVmLmNpcmNsZVNpemUsXG4gICAgICBfcmVmJHN0eWxlcyA9IF9yZWYuc3R5bGVzLFxuICAgICAgcGFzc2VkU3R5bGVzID0gX3JlZiRzdHlsZXMgPT09IHVuZGVmaW5lZCA/IHt9IDogX3JlZiRzdHlsZXMsXG4gICAgICBjaXJjbGVTcGFjaW5nID0gX3JlZi5jaXJjbGVTcGFjaW5nLFxuICAgICAgX3JlZiRjbGFzc05hbWUgPSBfcmVmLmNsYXNzTmFtZSxcbiAgICAgIGNsYXNzTmFtZSA9IF9yZWYkY2xhc3NOYW1lID09PSB1bmRlZmluZWQgPyAnJyA6IF9yZWYkY2xhc3NOYW1lO1xuXG4gIHZhciBzdHlsZXMgPSByZWFjdENTUyhtZXJnZSh7XG4gICAgJ2RlZmF1bHQnOiB7XG4gICAgICBjYXJkOiB7XG4gICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICBmbGV4V3JhcDogJ3dyYXAnLFxuICAgICAgICBtYXJnaW5SaWdodDogLWNpcmNsZVNwYWNpbmcsXG4gICAgICAgIG1hcmdpbkJvdHRvbTogLWNpcmNsZVNwYWNpbmdcbiAgICAgIH1cbiAgICB9XG4gIH0sIHBhc3NlZFN0eWxlcykpO1xuXG4gIHZhciBoYW5kbGVDaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVDaGFuZ2UoaGV4Q29kZSwgZSkge1xuICAgIHJldHVybiBvbkNoYW5nZSh7IGhleDogaGV4Q29kZSwgc291cmNlOiAnaGV4JyB9LCBlKTtcbiAgfTtcblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAnZGl2JyxcbiAgICB7IHN0eWxlOiBzdHlsZXMuY2FyZCwgY2xhc3NOYW1lOiAnY2lyY2xlLXBpY2tlciAnICsgY2xhc3NOYW1lIH0sXG4gICAgbWFwKGNvbG9ycywgZnVuY3Rpb24gKGMpIHtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENpcmNsZVN3YXRjaCwge1xuICAgICAgICBrZXk6IGMsXG4gICAgICAgIGNvbG9yOiBjLFxuICAgICAgICBvbkNsaWNrOiBoYW5kbGVDaGFuZ2UsXG4gICAgICAgIG9uU3dhdGNoSG92ZXI6IG9uU3dhdGNoSG92ZXIsXG4gICAgICAgIGFjdGl2ZTogaGV4ID09PSBjLnRvTG93ZXJDYXNlKCksXG4gICAgICAgIGNpcmNsZVNpemU6IGNpcmNsZVNpemUsXG4gICAgICAgIGNpcmNsZVNwYWNpbmc6IGNpcmNsZVNwYWNpbmdcbiAgICAgIH0pO1xuICAgIH0pXG4gICk7XG59O1xuXG5DaXJjbGUucHJvcFR5cGVzID0ge1xuICB3aWR0aDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm51bWJlcl0pLFxuICBjaXJjbGVTaXplOiBQcm9wVHlwZXMubnVtYmVyLFxuICBjaXJjbGVTcGFjaW5nOiBQcm9wVHlwZXMubnVtYmVyLFxuICBzdHlsZXM6IFByb3BUeXBlcy5vYmplY3Rcbn07XG5cbkNpcmNsZS5kZWZhdWx0UHJvcHMgPSB7XG4gIHdpZHRoOiAyNTIsXG4gIGNpcmNsZVNpemU6IDI4LFxuICBjaXJjbGVTcGFjaW5nOiAxNCxcbiAgY29sb3JzOiBbbWF0ZXJpYWwucmVkWyc1MDAnXSwgbWF0ZXJpYWwucGlua1snNTAwJ10sIG1hdGVyaWFsLnB1cnBsZVsnNTAwJ10sIG1hdGVyaWFsLmRlZXBQdXJwbGVbJzUwMCddLCBtYXRlcmlhbC5pbmRpZ29bJzUwMCddLCBtYXRlcmlhbC5ibHVlWyc1MDAnXSwgbWF0ZXJpYWwubGlnaHRCbHVlWyc1MDAnXSwgbWF0ZXJpYWwuY3lhblsnNTAwJ10sIG1hdGVyaWFsLnRlYWxbJzUwMCddLCBtYXRlcmlhbC5ncmVlblsnNTAwJ10sIG1hdGVyaWFsLmxpZ2h0R3JlZW5bJzUwMCddLCBtYXRlcmlhbC5saW1lWyc1MDAnXSwgbWF0ZXJpYWwueWVsbG93Wyc1MDAnXSwgbWF0ZXJpYWwuYW1iZXJbJzUwMCddLCBtYXRlcmlhbC5vcmFuZ2VbJzUwMCddLCBtYXRlcmlhbC5kZWVwT3JhbmdlWyc1MDAnXSwgbWF0ZXJpYWwuYnJvd25bJzUwMCddLCBtYXRlcmlhbC5ibHVlR3JleVsnNTAwJ11dLFxuICBzdHlsZXM6IHt9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBDb2xvcldyYXAoQ2lyY2xlKTsiLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGB1bmRlZmluZWRgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGB1bmRlZmluZWRgLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNVbmRlZmluZWQodm9pZCAwKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzVW5kZWZpbmVkKG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzVW5kZWZpbmVkO1xuIiwidmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG4vKiBlc2xpbnQtZGlzYWJsZSByZWFjdC9uby1kaWQtbW91bnQtc2V0LXN0YXRlLCBuby1wYXJhbS1yZWFzc2lnbiAqL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHJlYWN0Q1NTIGZyb20gJ3JlYWN0Y3NzJztcbmltcG9ydCAqIGFzIGNvbG9yIGZyb20gJy4uLy4uL2hlbHBlcnMvY29sb3InO1xuaW1wb3J0IGlzVW5kZWZpbmVkIGZyb20gJ2xvZGFzaC1lcy9pc1VuZGVmaW5lZCc7XG5cbmltcG9ydCB7IEVkaXRhYmxlSW5wdXQgfSBmcm9tICcuLi9jb21tb24nO1xuaW1wb3J0IFVuZm9sZE1vcmVIb3Jpem9udGFsSWNvbiBmcm9tICdAaWNvbnMvbWF0ZXJpYWwvVW5mb2xkTW9yZUhvcml6b250YWxJY29uJztcblxuZXhwb3J0IHZhciBDaHJvbWVGaWVsZHMgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoQ2hyb21lRmllbGRzLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBDaHJvbWVGaWVsZHMocHJvcHMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ2hyb21lRmllbGRzKTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChDaHJvbWVGaWVsZHMuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihDaHJvbWVGaWVsZHMpKS5jYWxsKHRoaXMpKTtcblxuICAgIF90aGlzLnRvZ2dsZVZpZXdzID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF90aGlzLnN0YXRlLnZpZXcgPT09ICdoZXgnKSB7XG4gICAgICAgIF90aGlzLnNldFN0YXRlKHsgdmlldzogJ3JnYicgfSk7XG4gICAgICB9IGVsc2UgaWYgKF90aGlzLnN0YXRlLnZpZXcgPT09ICdyZ2InKSB7XG4gICAgICAgIF90aGlzLnNldFN0YXRlKHsgdmlldzogJ2hzbCcgfSk7XG4gICAgICB9IGVsc2UgaWYgKF90aGlzLnN0YXRlLnZpZXcgPT09ICdoc2wnKSB7XG4gICAgICAgIGlmIChfdGhpcy5wcm9wcy5oc2wuYSA9PT0gMSkge1xuICAgICAgICAgIF90aGlzLnNldFN0YXRlKHsgdmlldzogJ2hleCcgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX3RoaXMuc2V0U3RhdGUoeyB2aWV3OiAncmdiJyB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVDaGFuZ2UgPSBmdW5jdGlvbiAoZGF0YSwgZSkge1xuICAgICAgaWYgKGRhdGEuaGV4KSB7XG4gICAgICAgIGNvbG9yLmlzVmFsaWRIZXgoZGF0YS5oZXgpICYmIF90aGlzLnByb3BzLm9uQ2hhbmdlKHtcbiAgICAgICAgICBoZXg6IGRhdGEuaGV4LFxuICAgICAgICAgIHNvdXJjZTogJ2hleCdcbiAgICAgICAgfSwgZSk7XG4gICAgICB9IGVsc2UgaWYgKGRhdGEuciB8fCBkYXRhLmcgfHwgZGF0YS5iKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uQ2hhbmdlKHtcbiAgICAgICAgICByOiBkYXRhLnIgfHwgX3RoaXMucHJvcHMucmdiLnIsXG4gICAgICAgICAgZzogZGF0YS5nIHx8IF90aGlzLnByb3BzLnJnYi5nLFxuICAgICAgICAgIGI6IGRhdGEuYiB8fCBfdGhpcy5wcm9wcy5yZ2IuYixcbiAgICAgICAgICBzb3VyY2U6ICdyZ2InXG4gICAgICAgIH0sIGUpO1xuICAgICAgfSBlbHNlIGlmIChkYXRhLmEpIHtcbiAgICAgICAgaWYgKGRhdGEuYSA8IDApIHtcbiAgICAgICAgICBkYXRhLmEgPSAwO1xuICAgICAgICB9IGVsc2UgaWYgKGRhdGEuYSA+IDEpIHtcbiAgICAgICAgICBkYXRhLmEgPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXMucHJvcHMub25DaGFuZ2Uoe1xuICAgICAgICAgIGg6IF90aGlzLnByb3BzLmhzbC5oLFxuICAgICAgICAgIHM6IF90aGlzLnByb3BzLmhzbC5zLFxuICAgICAgICAgIGw6IF90aGlzLnByb3BzLmhzbC5sLFxuICAgICAgICAgIGE6IE1hdGgucm91bmQoZGF0YS5hICogMTAwKSAvIDEwMCxcbiAgICAgICAgICBzb3VyY2U6ICdyZ2InXG4gICAgICAgIH0sIGUpO1xuICAgICAgfSBlbHNlIGlmIChkYXRhLmggfHwgZGF0YS5zIHx8IGRhdGEubCkge1xuICAgICAgICAvLyBSZW1vdmUgYW55IG9jY3VyYW5jZXMgb2YgJyUnLlxuICAgICAgICBpZiAodHlwZW9mIGRhdGEucyA9PT0gJ3N0cmluZycgJiYgZGF0YS5zLmluY2x1ZGVzKCclJykpIHtcbiAgICAgICAgICBkYXRhLnMgPSBkYXRhLnMucmVwbGFjZSgnJScsICcnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGRhdGEubCA9PT0gJ3N0cmluZycgJiYgZGF0YS5sLmluY2x1ZGVzKCclJykpIHtcbiAgICAgICAgICBkYXRhLmwgPSBkYXRhLmwucmVwbGFjZSgnJScsICcnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFdlIHN0b3JlIEhTTCBhcyBhIHVuaXQgaW50ZXJ2YWwgc28gd2UgbmVlZCB0byBvdmVycmlkZSB0aGUgMSBpbnB1dCB0byAwLjAxXG4gICAgICAgIGlmIChkYXRhLnMgPT0gMSkge1xuICAgICAgICAgIGRhdGEucyA9IDAuMDE7XG4gICAgICAgIH0gZWxzZSBpZiAoZGF0YS5sID09IDEpIHtcbiAgICAgICAgICBkYXRhLmwgPSAwLjAxO1xuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXMucHJvcHMub25DaGFuZ2Uoe1xuICAgICAgICAgIGg6IGRhdGEuaCB8fCBfdGhpcy5wcm9wcy5oc2wuaCxcbiAgICAgICAgICBzOiBOdW1iZXIoIWlzVW5kZWZpbmVkKGRhdGEucykgPyBkYXRhLnMgOiBfdGhpcy5wcm9wcy5oc2wucyksXG4gICAgICAgICAgbDogTnVtYmVyKCFpc1VuZGVmaW5lZChkYXRhLmwpID8gZGF0YS5sIDogX3RoaXMucHJvcHMuaHNsLmwpLFxuICAgICAgICAgIHNvdXJjZTogJ2hzbCdcbiAgICAgICAgfSwgZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLnNob3dIaWdobGlnaHQgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgZS5jdXJyZW50VGFyZ2V0LnN0eWxlLmJhY2tncm91bmQgPSAnI2VlZSc7XG4gICAgfTtcblxuICAgIF90aGlzLmhpZGVIaWdobGlnaHQgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgZS5jdXJyZW50VGFyZ2V0LnN0eWxlLmJhY2tncm91bmQgPSAndHJhbnNwYXJlbnQnO1xuICAgIH07XG5cbiAgICBpZiAocHJvcHMuaHNsLmEgIT09IDEgJiYgcHJvcHMudmlldyA9PT0gXCJoZXhcIikge1xuICAgICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICAgIHZpZXc6IFwicmdiXCJcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgICB2aWV3OiBwcm9wcy52aWV3XG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoQ2hyb21lRmllbGRzLCBbe1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgc3R5bGVzID0gcmVhY3RDU1Moe1xuICAgICAgICAnZGVmYXVsdCc6IHtcbiAgICAgICAgICB3cmFwOiB7XG4gICAgICAgICAgICBwYWRkaW5nVG9wOiAnMTZweCcsXG4gICAgICAgICAgICBkaXNwbGF5OiAnZmxleCdcbiAgICAgICAgICB9LFxuICAgICAgICAgIGZpZWxkczoge1xuICAgICAgICAgICAgZmxleDogJzEnLFxuICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgbWFyZ2luTGVmdDogJy02cHgnXG4gICAgICAgICAgfSxcbiAgICAgICAgICBmaWVsZDoge1xuICAgICAgICAgICAgcGFkZGluZ0xlZnQ6ICc2cHgnLFxuICAgICAgICAgICAgd2lkdGg6ICcxMDAlJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgYWxwaGE6IHtcbiAgICAgICAgICAgIHBhZGRpbmdMZWZ0OiAnNnB4JyxcbiAgICAgICAgICAgIHdpZHRoOiAnMTAwJSdcbiAgICAgICAgICB9LFxuICAgICAgICAgIHRvZ2dsZToge1xuICAgICAgICAgICAgd2lkdGg6ICczMnB4JyxcbiAgICAgICAgICAgIHRleHRBbGlnbjogJ3JpZ2h0JyxcbiAgICAgICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnXG4gICAgICAgICAgfSxcbiAgICAgICAgICBpY29uOiB7XG4gICAgICAgICAgICBtYXJnaW5SaWdodDogJy00cHgnLFxuICAgICAgICAgICAgbWFyZ2luVG9wOiAnMTJweCcsXG4gICAgICAgICAgICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgICAgICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnXG4gICAgICAgICAgfSxcbiAgICAgICAgICBpY29uSGlnaGxpZ2h0OiB7XG4gICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICAgIHdpZHRoOiAnMjRweCcsXG4gICAgICAgICAgICBoZWlnaHQ6ICcyOHB4JyxcbiAgICAgICAgICAgIGJhY2tncm91bmQ6ICcjZWVlJyxcbiAgICAgICAgICAgIGJvcmRlclJhZGl1czogJzRweCcsXG4gICAgICAgICAgICB0b3A6ICcxMHB4JyxcbiAgICAgICAgICAgIGxlZnQ6ICcxMnB4JyxcbiAgICAgICAgICAgIGRpc3BsYXk6ICdub25lJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgaW5wdXQ6IHtcbiAgICAgICAgICAgIGZvbnRTaXplOiAnMTFweCcsXG4gICAgICAgICAgICBjb2xvcjogJyMzMzMnLFxuICAgICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICAgIGJvcmRlclJhZGl1czogJzJweCcsXG4gICAgICAgICAgICBib3JkZXI6ICdub25lJyxcbiAgICAgICAgICAgIGJveFNoYWRvdzogJ2luc2V0IDAgMCAwIDFweCAjZGFkYWRhJyxcbiAgICAgICAgICAgIGhlaWdodDogJzIxcHgnLFxuICAgICAgICAgICAgdGV4dEFsaWduOiAnY2VudGVyJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgbGFiZWw6IHtcbiAgICAgICAgICAgIHRleHRUcmFuc2Zvcm06ICd1cHBlcmNhc2UnLFxuICAgICAgICAgICAgZm9udFNpemU6ICcxMXB4JyxcbiAgICAgICAgICAgIGxpbmVIZWlnaHQ6ICcxMXB4JyxcbiAgICAgICAgICAgIGNvbG9yOiAnIzk2OTY5NicsXG4gICAgICAgICAgICB0ZXh0QWxpZ246ICdjZW50ZXInLFxuICAgICAgICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgICAgICAgIG1hcmdpblRvcDogJzEycHgnXG4gICAgICAgICAgfSxcbiAgICAgICAgICBzdmc6IHtcbiAgICAgICAgICAgIGZpbGw6ICcjMzMzJyxcbiAgICAgICAgICAgIHdpZHRoOiAnMjRweCcsXG4gICAgICAgICAgICBoZWlnaHQ6ICcyNHB4JyxcbiAgICAgICAgICAgIGJvcmRlcjogJzFweCB0cmFuc3BhcmVudCBzb2xpZCcsXG4gICAgICAgICAgICBib3JkZXJSYWRpdXM6ICc1cHgnXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAnZGlzYWJsZUFscGhhJzoge1xuICAgICAgICAgIGFscGhhOiB7XG4gICAgICAgICAgICBkaXNwbGF5OiAnbm9uZSdcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sIHRoaXMucHJvcHMsIHRoaXMuc3RhdGUpO1xuXG4gICAgICB2YXIgZmllbGRzID0gdm9pZCAwO1xuICAgICAgaWYgKHRoaXMuc3RhdGUudmlldyA9PT0gJ2hleCcpIHtcbiAgICAgICAgZmllbGRzID0gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuZmllbGRzLCBjbGFzc05hbWU6ICdmbGV4Ym94LWZpeCcgfSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuZmllbGQgfSxcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWRpdGFibGVJbnB1dCwge1xuICAgICAgICAgICAgICBzdHlsZTogeyBpbnB1dDogc3R5bGVzLmlucHV0LCBsYWJlbDogc3R5bGVzLmxhYmVsIH0sXG4gICAgICAgICAgICAgIGxhYmVsOiAnaGV4JywgdmFsdWU6IHRoaXMucHJvcHMuaGV4LFxuICAgICAgICAgICAgICBvbkNoYW5nZTogdGhpcy5oYW5kbGVDaGFuZ2VcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLnN0YXRlLnZpZXcgPT09ICdyZ2InKSB7XG4gICAgICAgIGZpZWxkcyA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmZpZWxkcywgY2xhc3NOYW1lOiAnZmxleGJveC1maXgnIH0sXG4gICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmZpZWxkIH0sXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KEVkaXRhYmxlSW5wdXQsIHtcbiAgICAgICAgICAgICAgc3R5bGU6IHsgaW5wdXQ6IHN0eWxlcy5pbnB1dCwgbGFiZWw6IHN0eWxlcy5sYWJlbCB9LFxuICAgICAgICAgICAgICBsYWJlbDogJ3InLFxuICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5wcm9wcy5yZ2IucixcbiAgICAgICAgICAgICAgb25DaGFuZ2U6IHRoaXMuaGFuZGxlQ2hhbmdlXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICksXG4gICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmZpZWxkIH0sXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KEVkaXRhYmxlSW5wdXQsIHtcbiAgICAgICAgICAgICAgc3R5bGU6IHsgaW5wdXQ6IHN0eWxlcy5pbnB1dCwgbGFiZWw6IHN0eWxlcy5sYWJlbCB9LFxuICAgICAgICAgICAgICBsYWJlbDogJ2cnLFxuICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5wcm9wcy5yZ2IuZyxcbiAgICAgICAgICAgICAgb25DaGFuZ2U6IHRoaXMuaGFuZGxlQ2hhbmdlXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICksXG4gICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmZpZWxkIH0sXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KEVkaXRhYmxlSW5wdXQsIHtcbiAgICAgICAgICAgICAgc3R5bGU6IHsgaW5wdXQ6IHN0eWxlcy5pbnB1dCwgbGFiZWw6IHN0eWxlcy5sYWJlbCB9LFxuICAgICAgICAgICAgICBsYWJlbDogJ2InLFxuICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5wcm9wcy5yZ2IuYixcbiAgICAgICAgICAgICAgb25DaGFuZ2U6IHRoaXMuaGFuZGxlQ2hhbmdlXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICksXG4gICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmFscGhhIH0sXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KEVkaXRhYmxlSW5wdXQsIHtcbiAgICAgICAgICAgICAgc3R5bGU6IHsgaW5wdXQ6IHN0eWxlcy5pbnB1dCwgbGFiZWw6IHN0eWxlcy5sYWJlbCB9LFxuICAgICAgICAgICAgICBsYWJlbDogJ2EnLFxuICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5wcm9wcy5yZ2IuYSxcbiAgICAgICAgICAgICAgYXJyb3dPZmZzZXQ6IDAuMDEsXG4gICAgICAgICAgICAgIG9uQ2hhbmdlOiB0aGlzLmhhbmRsZUNoYW5nZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuc3RhdGUudmlldyA9PT0gJ2hzbCcpIHtcbiAgICAgICAgZmllbGRzID0gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuZmllbGRzLCBjbGFzc05hbWU6ICdmbGV4Ym94LWZpeCcgfSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuZmllbGQgfSxcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWRpdGFibGVJbnB1dCwge1xuICAgICAgICAgICAgICBzdHlsZTogeyBpbnB1dDogc3R5bGVzLmlucHV0LCBsYWJlbDogc3R5bGVzLmxhYmVsIH0sXG4gICAgICAgICAgICAgIGxhYmVsOiAnaCcsXG4gICAgICAgICAgICAgIHZhbHVlOiBNYXRoLnJvdW5kKHRoaXMucHJvcHMuaHNsLmgpLFxuICAgICAgICAgICAgICBvbkNoYW5nZTogdGhpcy5oYW5kbGVDaGFuZ2VcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgKSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuZmllbGQgfSxcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWRpdGFibGVJbnB1dCwge1xuICAgICAgICAgICAgICBzdHlsZTogeyBpbnB1dDogc3R5bGVzLmlucHV0LCBsYWJlbDogc3R5bGVzLmxhYmVsIH0sXG4gICAgICAgICAgICAgIGxhYmVsOiAncycsXG4gICAgICAgICAgICAgIHZhbHVlOiBNYXRoLnJvdW5kKHRoaXMucHJvcHMuaHNsLnMgKiAxMDApICsgJyUnLFxuICAgICAgICAgICAgICBvbkNoYW5nZTogdGhpcy5oYW5kbGVDaGFuZ2VcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgKSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuZmllbGQgfSxcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWRpdGFibGVJbnB1dCwge1xuICAgICAgICAgICAgICBzdHlsZTogeyBpbnB1dDogc3R5bGVzLmlucHV0LCBsYWJlbDogc3R5bGVzLmxhYmVsIH0sXG4gICAgICAgICAgICAgIGxhYmVsOiAnbCcsXG4gICAgICAgICAgICAgIHZhbHVlOiBNYXRoLnJvdW5kKHRoaXMucHJvcHMuaHNsLmwgKiAxMDApICsgJyUnLFxuICAgICAgICAgICAgICBvbkNoYW5nZTogdGhpcy5oYW5kbGVDaGFuZ2VcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgKSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuYWxwaGEgfSxcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWRpdGFibGVJbnB1dCwge1xuICAgICAgICAgICAgICBzdHlsZTogeyBpbnB1dDogc3R5bGVzLmlucHV0LCBsYWJlbDogc3R5bGVzLmxhYmVsIH0sXG4gICAgICAgICAgICAgIGxhYmVsOiAnYScsXG4gICAgICAgICAgICAgIHZhbHVlOiB0aGlzLnByb3BzLmhzbC5hLFxuICAgICAgICAgICAgICBhcnJvd09mZnNldDogMC4wMSxcbiAgICAgICAgICAgICAgb25DaGFuZ2U6IHRoaXMuaGFuZGxlQ2hhbmdlXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7IHN0eWxlOiBzdHlsZXMud3JhcCwgY2xhc3NOYW1lOiAnZmxleGJveC1maXgnIH0sXG4gICAgICAgIGZpZWxkcyxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMudG9nZ2xlIH0sXG4gICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmljb24sIG9uQ2xpY2s6IHRoaXMudG9nZ2xlVmlld3MsIHJlZjogZnVuY3Rpb24gcmVmKGljb24pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMyLmljb24gPSBpY29uO1xuICAgICAgICAgICAgICB9IH0sXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFVuZm9sZE1vcmVIb3Jpem9udGFsSWNvbiwge1xuICAgICAgICAgICAgICBzdHlsZTogc3R5bGVzLnN2ZyxcbiAgICAgICAgICAgICAgb25Nb3VzZU92ZXI6IHRoaXMuc2hvd0hpZ2hsaWdodCxcbiAgICAgICAgICAgICAgb25Nb3VzZUVudGVyOiB0aGlzLnNob3dIaWdobGlnaHQsXG4gICAgICAgICAgICAgIG9uTW91c2VPdXQ6IHRoaXMuaGlkZUhpZ2hsaWdodFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICApXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuICB9XSwgW3tcbiAgICBrZXk6ICdnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMobmV4dFByb3BzLCBzdGF0ZSkge1xuICAgICAgaWYgKG5leHRQcm9wcy5oc2wuYSAhPT0gMSAmJiBzdGF0ZS52aWV3ID09PSAnaGV4Jykge1xuICAgICAgICByZXR1cm4geyB2aWV3OiAncmdiJyB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIENocm9tZUZpZWxkcztcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuQ2hyb21lRmllbGRzLmRlZmF1bHRQcm9wcyA9IHtcbiAgdmlldzogXCJoZXhcIlxufTtcblxuZXhwb3J0IGRlZmF1bHQgQ2hyb21lRmllbGRzOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgcmVhY3RDU1MgZnJvbSAncmVhY3Rjc3MnO1xuXG5leHBvcnQgdmFyIENocm9tZVBvaW50ZXIgPSBmdW5jdGlvbiBDaHJvbWVQb2ludGVyKCkge1xuICB2YXIgc3R5bGVzID0gcmVhY3RDU1Moe1xuICAgICdkZWZhdWx0Jzoge1xuICAgICAgcGlja2VyOiB7XG4gICAgICAgIHdpZHRoOiAnMTJweCcsXG4gICAgICAgIGhlaWdodDogJzEycHgnLFxuICAgICAgICBib3JkZXJSYWRpdXM6ICc2cHgnLFxuICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoLTZweCwgLTFweCknLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdyZ2IoMjQ4LCAyNDgsIDI0OCknLFxuICAgICAgICBib3hTaGFkb3c6ICcwIDFweCA0cHggMCByZ2JhKDAsIDAsIDAsIDAuMzcpJ1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgc3R5bGU6IHN0eWxlcy5waWNrZXIgfSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBDaHJvbWVQb2ludGVyOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgcmVhY3RDU1MgZnJvbSAncmVhY3Rjc3MnO1xuXG5leHBvcnQgdmFyIENocm9tZVBvaW50ZXJDaXJjbGUgPSBmdW5jdGlvbiBDaHJvbWVQb2ludGVyQ2lyY2xlKCkge1xuICB2YXIgc3R5bGVzID0gcmVhY3RDU1Moe1xuICAgICdkZWZhdWx0Jzoge1xuICAgICAgcGlja2VyOiB7XG4gICAgICAgIHdpZHRoOiAnMTJweCcsXG4gICAgICAgIGhlaWdodDogJzEycHgnLFxuICAgICAgICBib3JkZXJSYWRpdXM6ICc2cHgnLFxuICAgICAgICBib3hTaGFkb3c6ICdpbnNldCAwIDAgMCAxcHggI2ZmZicsXG4gICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgtNnB4LCAtNnB4KSdcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IHN0eWxlOiBzdHlsZXMucGlja2VyIH0pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgQ2hyb21lUG9pbnRlckNpcmNsZTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCByZWFjdENTUyBmcm9tICdyZWFjdGNzcyc7XG5pbXBvcnQgbWVyZ2UgZnJvbSAnbG9kYXNoLWVzL21lcmdlJztcblxuaW1wb3J0IHsgQ29sb3JXcmFwLCBTYXR1cmF0aW9uLCBIdWUsIEFscGhhLCBDaGVja2JvYXJkIH0gZnJvbSAnLi4vY29tbW9uJztcbmltcG9ydCBDaHJvbWVGaWVsZHMgZnJvbSAnLi9DaHJvbWVGaWVsZHMnO1xuaW1wb3J0IENocm9tZVBvaW50ZXIgZnJvbSAnLi9DaHJvbWVQb2ludGVyJztcbmltcG9ydCBDaHJvbWVQb2ludGVyQ2lyY2xlIGZyb20gJy4vQ2hyb21lUG9pbnRlckNpcmNsZSc7XG5cbmV4cG9ydCB2YXIgQ2hyb21lID0gZnVuY3Rpb24gQ2hyb21lKF9yZWYpIHtcbiAgdmFyIHdpZHRoID0gX3JlZi53aWR0aCxcbiAgICAgIG9uQ2hhbmdlID0gX3JlZi5vbkNoYW5nZSxcbiAgICAgIGRpc2FibGVBbHBoYSA9IF9yZWYuZGlzYWJsZUFscGhhLFxuICAgICAgcmdiID0gX3JlZi5yZ2IsXG4gICAgICBoc2wgPSBfcmVmLmhzbCxcbiAgICAgIGhzdiA9IF9yZWYuaHN2LFxuICAgICAgaGV4ID0gX3JlZi5oZXgsXG4gICAgICByZW5kZXJlcnMgPSBfcmVmLnJlbmRlcmVycyxcbiAgICAgIF9yZWYkc3R5bGVzID0gX3JlZi5zdHlsZXMsXG4gICAgICBwYXNzZWRTdHlsZXMgPSBfcmVmJHN0eWxlcyA9PT0gdW5kZWZpbmVkID8ge30gOiBfcmVmJHN0eWxlcyxcbiAgICAgIF9yZWYkY2xhc3NOYW1lID0gX3JlZi5jbGFzc05hbWUsXG4gICAgICBjbGFzc05hbWUgPSBfcmVmJGNsYXNzTmFtZSA9PT0gdW5kZWZpbmVkID8gJycgOiBfcmVmJGNsYXNzTmFtZSxcbiAgICAgIGRlZmF1bHRWaWV3ID0gX3JlZi5kZWZhdWx0VmlldztcblxuICB2YXIgc3R5bGVzID0gcmVhY3RDU1MobWVyZ2Uoe1xuICAgICdkZWZhdWx0Jzoge1xuICAgICAgcGlja2VyOiB7XG4gICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgYmFja2dyb3VuZDogJyNmZmYnLFxuICAgICAgICBib3JkZXJSYWRpdXM6ICcycHgnLFxuICAgICAgICBib3hTaGFkb3c6ICcwIDAgMnB4IHJnYmEoMCwwLDAsLjMpLCAwIDRweCA4cHggcmdiYSgwLDAsMCwuMyknLFxuICAgICAgICBib3hTaXppbmc6ICdpbml0aWFsJyxcbiAgICAgICAgZm9udEZhbWlseTogJ01lbmxvJ1xuICAgICAgfSxcbiAgICAgIHNhdHVyYXRpb246IHtcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgcGFkZGluZ0JvdHRvbTogJzU1JScsXG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICBib3JkZXJSYWRpdXM6ICcycHggMnB4IDAgMCcsXG4gICAgICAgIG92ZXJmbG93OiAnaGlkZGVuJ1xuICAgICAgfSxcbiAgICAgIFNhdHVyYXRpb246IHtcbiAgICAgICAgcmFkaXVzOiAnMnB4IDJweCAwIDAnXG4gICAgICB9LFxuICAgICAgYm9keToge1xuICAgICAgICBwYWRkaW5nOiAnMTZweCAxNnB4IDEycHgnXG4gICAgICB9LFxuICAgICAgY29udHJvbHM6IHtcbiAgICAgICAgZGlzcGxheTogJ2ZsZXgnXG4gICAgICB9LFxuICAgICAgY29sb3I6IHtcbiAgICAgICAgd2lkdGg6ICczMnB4J1xuICAgICAgfSxcbiAgICAgIHN3YXRjaDoge1xuICAgICAgICBtYXJnaW5Ub3A6ICc2cHgnLFxuICAgICAgICB3aWR0aDogJzE2cHgnLFxuICAgICAgICBoZWlnaHQ6ICcxNnB4JyxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAnOHB4JyxcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgIG92ZXJmbG93OiAnaGlkZGVuJ1xuICAgICAgfSxcbiAgICAgIGFjdGl2ZToge1xuICAgICAgICBhYnNvbHV0ZTogJzBweCAwcHggMHB4IDBweCcsXG4gICAgICAgIGJvcmRlclJhZGl1czogJzhweCcsXG4gICAgICAgIGJveFNoYWRvdzogJ2luc2V0IDAgMCAwIDFweCByZ2JhKDAsMCwwLC4xKScsXG4gICAgICAgIGJhY2tncm91bmQ6ICdyZ2JhKCcgKyByZ2IuciArICcsICcgKyByZ2IuZyArICcsICcgKyByZ2IuYiArICcsICcgKyByZ2IuYSArICcpJyxcbiAgICAgICAgekluZGV4OiAnMidcbiAgICAgIH0sXG4gICAgICB0b2dnbGVzOiB7XG4gICAgICAgIGZsZXg6ICcxJ1xuICAgICAgfSxcbiAgICAgIGh1ZToge1xuICAgICAgICBoZWlnaHQ6ICcxMHB4JyxcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgIG1hcmdpbkJvdHRvbTogJzhweCdcbiAgICAgIH0sXG4gICAgICBIdWU6IHtcbiAgICAgICAgcmFkaXVzOiAnMnB4J1xuICAgICAgfSxcbiAgICAgIGFscGhhOiB7XG4gICAgICAgIGhlaWdodDogJzEwcHgnLFxuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xuICAgICAgfSxcbiAgICAgIEFscGhhOiB7XG4gICAgICAgIHJhZGl1czogJzJweCdcbiAgICAgIH1cbiAgICB9LFxuICAgICdkaXNhYmxlQWxwaGEnOiB7XG4gICAgICBjb2xvcjoge1xuICAgICAgICB3aWR0aDogJzIycHgnXG4gICAgICB9LFxuICAgICAgYWxwaGE6IHtcbiAgICAgICAgZGlzcGxheTogJ25vbmUnXG4gICAgICB9LFxuICAgICAgaHVlOiB7XG4gICAgICAgIG1hcmdpbkJvdHRvbTogJzBweCdcbiAgICAgIH0sXG4gICAgICBzd2F0Y2g6IHtcbiAgICAgICAgd2lkdGg6ICcxMHB4JyxcbiAgICAgICAgaGVpZ2h0OiAnMTBweCcsXG4gICAgICAgIG1hcmdpblRvcDogJzBweCdcbiAgICAgIH1cbiAgICB9XG4gIH0sIHBhc3NlZFN0eWxlcyksIHsgZGlzYWJsZUFscGhhOiBkaXNhYmxlQWxwaGEgfSk7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgJ2RpdicsXG4gICAgeyBzdHlsZTogc3R5bGVzLnBpY2tlciwgY2xhc3NOYW1lOiAnY2hyb21lLXBpY2tlciAnICsgY2xhc3NOYW1lIH0sXG4gICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgeyBzdHlsZTogc3R5bGVzLnNhdHVyYXRpb24gfSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoU2F0dXJhdGlvbiwge1xuICAgICAgICBzdHlsZTogc3R5bGVzLlNhdHVyYXRpb24sXG4gICAgICAgIGhzbDogaHNsLFxuICAgICAgICBoc3Y6IGhzdixcbiAgICAgICAgcG9pbnRlcjogQ2hyb21lUG9pbnRlckNpcmNsZSxcbiAgICAgICAgb25DaGFuZ2U6IG9uQ2hhbmdlXG4gICAgICB9KVxuICAgICksXG4gICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgeyBzdHlsZTogc3R5bGVzLmJvZHkgfSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7IHN0eWxlOiBzdHlsZXMuY29udHJvbHMsIGNsYXNzTmFtZTogJ2ZsZXhib3gtZml4JyB9LFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdkaXYnLFxuICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy5jb2xvciB9LFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy5zd2F0Y2ggfSxcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgc3R5bGU6IHN0eWxlcy5hY3RpdmUgfSksXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KENoZWNrYm9hcmQsIHsgcmVuZGVyZXJzOiByZW5kZXJlcnMgfSlcbiAgICAgICAgICApXG4gICAgICAgICksXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgeyBzdHlsZTogc3R5bGVzLnRvZ2dsZXMgfSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuaHVlIH0sXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KEh1ZSwge1xuICAgICAgICAgICAgICBzdHlsZTogc3R5bGVzLkh1ZSxcbiAgICAgICAgICAgICAgaHNsOiBoc2wsXG4gICAgICAgICAgICAgIHBvaW50ZXI6IENocm9tZVBvaW50ZXIsXG4gICAgICAgICAgICAgIG9uQ2hhbmdlOiBvbkNoYW5nZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICApLFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy5hbHBoYSB9LFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChBbHBoYSwge1xuICAgICAgICAgICAgICBzdHlsZTogc3R5bGVzLkFscGhhLFxuICAgICAgICAgICAgICByZ2I6IHJnYixcbiAgICAgICAgICAgICAgaHNsOiBoc2wsXG4gICAgICAgICAgICAgIHBvaW50ZXI6IENocm9tZVBvaW50ZXIsXG4gICAgICAgICAgICAgIHJlbmRlcmVyczogcmVuZGVyZXJzLFxuICAgICAgICAgICAgICBvbkNoYW5nZTogb25DaGFuZ2VcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgKVxuICAgICAgICApXG4gICAgICApLFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChDaHJvbWVGaWVsZHMsIHtcbiAgICAgICAgcmdiOiByZ2IsXG4gICAgICAgIGhzbDogaHNsLFxuICAgICAgICBoZXg6IGhleCxcbiAgICAgICAgdmlldzogZGVmYXVsdFZpZXcsXG4gICAgICAgIG9uQ2hhbmdlOiBvbkNoYW5nZSxcbiAgICAgICAgZGlzYWJsZUFscGhhOiBkaXNhYmxlQWxwaGFcbiAgICAgIH0pXG4gICAgKVxuICApO1xufTtcblxuQ2hyb21lLnByb3BUeXBlcyA9IHtcbiAgd2lkdGg6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5udW1iZXJdKSxcbiAgZGlzYWJsZUFscGhhOiBQcm9wVHlwZXMuYm9vbCxcbiAgc3R5bGVzOiBQcm9wVHlwZXMub2JqZWN0LFxuICBkZWZhdWx0VmlldzogUHJvcFR5cGVzLm9uZU9mKFtcImhleFwiLCBcInJnYlwiLCBcImhzbFwiXSlcbn07XG5cbkNocm9tZS5kZWZhdWx0UHJvcHMgPSB7XG4gIHdpZHRoOiAyMjUsXG4gIGRpc2FibGVBbHBoYTogZmFsc2UsXG4gIHN0eWxlczoge31cbn07XG5cbmV4cG9ydCBkZWZhdWx0IENvbG9yV3JhcChDaHJvbWUpOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgcmVhY3RDU1MgZnJvbSAncmVhY3Rjc3MnO1xuaW1wb3J0ICogYXMgY29sb3JVdGlscyBmcm9tICcuLi8uLi9oZWxwZXJzL2NvbG9yJztcblxuaW1wb3J0IHsgU3dhdGNoIH0gZnJvbSAnLi4vY29tbW9uJztcblxuZXhwb3J0IHZhciBDb21wYWN0Q29sb3IgPSBmdW5jdGlvbiBDb21wYWN0Q29sb3IoX3JlZikge1xuICB2YXIgY29sb3IgPSBfcmVmLmNvbG9yLFxuICAgICAgX3JlZiRvbkNsaWNrID0gX3JlZi5vbkNsaWNrLFxuICAgICAgb25DbGljayA9IF9yZWYkb25DbGljayA9PT0gdW5kZWZpbmVkID8gZnVuY3Rpb24gKCkge30gOiBfcmVmJG9uQ2xpY2ssXG4gICAgICBvblN3YXRjaEhvdmVyID0gX3JlZi5vblN3YXRjaEhvdmVyLFxuICAgICAgYWN0aXZlID0gX3JlZi5hY3RpdmU7XG5cbiAgdmFyIHN0eWxlcyA9IHJlYWN0Q1NTKHtcbiAgICAnZGVmYXVsdCc6IHtcbiAgICAgIGNvbG9yOiB7XG4gICAgICAgIGJhY2tncm91bmQ6IGNvbG9yLFxuICAgICAgICB3aWR0aDogJzE1cHgnLFxuICAgICAgICBoZWlnaHQ6ICcxNXB4JyxcbiAgICAgICAgZmxvYXQ6ICdsZWZ0JyxcbiAgICAgICAgbWFyZ2luUmlnaHQ6ICc1cHgnLFxuICAgICAgICBtYXJnaW5Cb3R0b206ICc1cHgnLFxuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgY3Vyc29yOiAncG9pbnRlcidcbiAgICAgIH0sXG4gICAgICBkb3Q6IHtcbiAgICAgICAgYWJzb2x1dGU6ICc1cHggNXB4IDVweCA1cHgnLFxuICAgICAgICBiYWNrZ3JvdW5kOiBjb2xvclV0aWxzLmdldENvbnRyYXN0aW5nQ29sb3IoY29sb3IpLFxuICAgICAgICBib3JkZXJSYWRpdXM6ICc1MCUnLFxuICAgICAgICBvcGFjaXR5OiAnMCdcbiAgICAgIH1cbiAgICB9LFxuICAgICdhY3RpdmUnOiB7XG4gICAgICBkb3Q6IHtcbiAgICAgICAgb3BhY2l0eTogJzEnXG4gICAgICB9XG4gICAgfSxcbiAgICAnY29sb3ItI0ZGRkZGRic6IHtcbiAgICAgIGNvbG9yOiB7XG4gICAgICAgIGJveFNoYWRvdzogJ2luc2V0IDAgMCAwIDFweCAjZGRkJ1xuICAgICAgfSxcbiAgICAgIGRvdDoge1xuICAgICAgICBiYWNrZ3JvdW5kOiAnIzAwMCdcbiAgICAgIH1cbiAgICB9LFxuICAgICd0cmFuc3BhcmVudCc6IHtcbiAgICAgIGRvdDoge1xuICAgICAgICBiYWNrZ3JvdW5kOiAnIzAwMCdcbiAgICAgIH1cbiAgICB9XG4gIH0sIHsgYWN0aXZlOiBhY3RpdmUsICdjb2xvci0jRkZGRkZGJzogY29sb3IgPT09ICcjRkZGRkZGJywgJ3RyYW5zcGFyZW50JzogY29sb3IgPT09ICd0cmFuc3BhcmVudCcgfSk7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgU3dhdGNoLFxuICAgIHtcbiAgICAgIHN0eWxlOiBzdHlsZXMuY29sb3IsXG4gICAgICBjb2xvcjogY29sb3IsXG4gICAgICBvbkNsaWNrOiBvbkNsaWNrLFxuICAgICAgb25Ib3Zlcjogb25Td2F0Y2hIb3ZlcixcbiAgICAgIGZvY3VzU3R5bGU6IHsgYm94U2hhZG93OiAnMCAwIDRweCAnICsgY29sb3IgfVxuICAgIH0sXG4gICAgUmVhY3QuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBzdHlsZTogc3R5bGVzLmRvdCB9KVxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgQ29tcGFjdENvbG9yOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgcmVhY3RDU1MgZnJvbSAncmVhY3Rjc3MnO1xuXG5pbXBvcnQgeyBFZGl0YWJsZUlucHV0IH0gZnJvbSAnLi4vY29tbW9uJztcblxuZXhwb3J0IHZhciBDb21wYWN0RmllbGRzID0gZnVuY3Rpb24gQ29tcGFjdEZpZWxkcyhfcmVmKSB7XG4gIHZhciBoZXggPSBfcmVmLmhleCxcbiAgICAgIHJnYiA9IF9yZWYucmdiLFxuICAgICAgb25DaGFuZ2UgPSBfcmVmLm9uQ2hhbmdlO1xuXG4gIHZhciBzdHlsZXMgPSByZWFjdENTUyh7XG4gICAgJ2RlZmF1bHQnOiB7XG4gICAgICBmaWVsZHM6IHtcbiAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICBwYWRkaW5nQm90dG9tOiAnNnB4JyxcbiAgICAgICAgcGFkZGluZ1JpZ2h0OiAnNXB4JyxcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbiAgICAgIH0sXG4gICAgICBhY3RpdmU6IHtcbiAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgIHRvcDogJzZweCcsXG4gICAgICAgIGxlZnQ6ICc1cHgnLFxuICAgICAgICBoZWlnaHQ6ICc5cHgnLFxuICAgICAgICB3aWR0aDogJzlweCcsXG4gICAgICAgIGJhY2tncm91bmQ6IGhleFxuICAgICAgfSxcbiAgICAgIEhFWHdyYXA6IHtcbiAgICAgICAgZmxleDogJzYnLFxuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xuICAgICAgfSxcbiAgICAgIEhFWGlucHV0OiB7XG4gICAgICAgIHdpZHRoOiAnODAlJyxcbiAgICAgICAgcGFkZGluZzogJzBweCcsXG4gICAgICAgIHBhZGRpbmdMZWZ0OiAnMjAlJyxcbiAgICAgICAgYm9yZGVyOiAnbm9uZScsXG4gICAgICAgIG91dGxpbmU6ICdub25lJyxcbiAgICAgICAgYmFja2dyb3VuZDogJ25vbmUnLFxuICAgICAgICBmb250U2l6ZTogJzEycHgnLFxuICAgICAgICBjb2xvcjogJyMzMzMnLFxuICAgICAgICBoZWlnaHQ6ICcxNnB4J1xuICAgICAgfSxcbiAgICAgIEhFWGxhYmVsOiB7XG4gICAgICAgIGRpc3BsYXk6ICdub25lJ1xuICAgICAgfSxcbiAgICAgIFJHQndyYXA6IHtcbiAgICAgICAgZmxleDogJzMnLFxuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xuICAgICAgfSxcbiAgICAgIFJHQmlucHV0OiB7XG4gICAgICAgIHdpZHRoOiAnNzAlJyxcbiAgICAgICAgcGFkZGluZzogJzBweCcsXG4gICAgICAgIHBhZGRpbmdMZWZ0OiAnMzAlJyxcbiAgICAgICAgYm9yZGVyOiAnbm9uZScsXG4gICAgICAgIG91dGxpbmU6ICdub25lJyxcbiAgICAgICAgYmFja2dyb3VuZDogJ25vbmUnLFxuICAgICAgICBmb250U2l6ZTogJzEycHgnLFxuICAgICAgICBjb2xvcjogJyMzMzMnLFxuICAgICAgICBoZWlnaHQ6ICcxNnB4J1xuICAgICAgfSxcbiAgICAgIFJHQmxhYmVsOiB7XG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICB0b3A6ICczcHgnLFxuICAgICAgICBsZWZ0OiAnMHB4JyxcbiAgICAgICAgbGluZUhlaWdodDogJzE2cHgnLFxuICAgICAgICB0ZXh0VHJhbnNmb3JtOiAndXBwZXJjYXNlJyxcbiAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcbiAgICAgICAgY29sb3I6ICcjOTk5J1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgdmFyIGhhbmRsZUNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUNoYW5nZShkYXRhLCBlKSB7XG4gICAgaWYgKGRhdGEuciB8fCBkYXRhLmcgfHwgZGF0YS5iKSB7XG4gICAgICBvbkNoYW5nZSh7XG4gICAgICAgIHI6IGRhdGEuciB8fCByZ2IucixcbiAgICAgICAgZzogZGF0YS5nIHx8IHJnYi5nLFxuICAgICAgICBiOiBkYXRhLmIgfHwgcmdiLmIsXG4gICAgICAgIHNvdXJjZTogJ3JnYidcbiAgICAgIH0sIGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvbkNoYW5nZSh7XG4gICAgICAgIGhleDogZGF0YS5oZXgsXG4gICAgICAgIHNvdXJjZTogJ2hleCdcbiAgICAgIH0sIGUpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAnZGl2JyxcbiAgICB7IHN0eWxlOiBzdHlsZXMuZmllbGRzLCBjbGFzc05hbWU6ICdmbGV4Ym94LWZpeCcgfSxcbiAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IHN0eWxlOiBzdHlsZXMuYWN0aXZlIH0pLFxuICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWRpdGFibGVJbnB1dCwge1xuICAgICAgc3R5bGU6IHsgd3JhcDogc3R5bGVzLkhFWHdyYXAsIGlucHV0OiBzdHlsZXMuSEVYaW5wdXQsIGxhYmVsOiBzdHlsZXMuSEVYbGFiZWwgfSxcbiAgICAgIGxhYmVsOiAnaGV4JyxcbiAgICAgIHZhbHVlOiBoZXgsXG4gICAgICBvbkNoYW5nZTogaGFuZGxlQ2hhbmdlXG4gICAgfSksXG4gICAgUmVhY3QuY3JlYXRlRWxlbWVudChFZGl0YWJsZUlucHV0LCB7XG4gICAgICBzdHlsZTogeyB3cmFwOiBzdHlsZXMuUkdCd3JhcCwgaW5wdXQ6IHN0eWxlcy5SR0JpbnB1dCwgbGFiZWw6IHN0eWxlcy5SR0JsYWJlbCB9LFxuICAgICAgbGFiZWw6ICdyJyxcbiAgICAgIHZhbHVlOiByZ2IucixcbiAgICAgIG9uQ2hhbmdlOiBoYW5kbGVDaGFuZ2VcbiAgICB9KSxcbiAgICBSZWFjdC5jcmVhdGVFbGVtZW50KEVkaXRhYmxlSW5wdXQsIHtcbiAgICAgIHN0eWxlOiB7IHdyYXA6IHN0eWxlcy5SR0J3cmFwLCBpbnB1dDogc3R5bGVzLlJHQmlucHV0LCBsYWJlbDogc3R5bGVzLlJHQmxhYmVsIH0sXG4gICAgICBsYWJlbDogJ2cnLFxuICAgICAgdmFsdWU6IHJnYi5nLFxuICAgICAgb25DaGFuZ2U6IGhhbmRsZUNoYW5nZVxuICAgIH0pLFxuICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWRpdGFibGVJbnB1dCwge1xuICAgICAgc3R5bGU6IHsgd3JhcDogc3R5bGVzLlJHQndyYXAsIGlucHV0OiBzdHlsZXMuUkdCaW5wdXQsIGxhYmVsOiBzdHlsZXMuUkdCbGFiZWwgfSxcbiAgICAgIGxhYmVsOiAnYicsXG4gICAgICB2YWx1ZTogcmdiLmIsXG4gICAgICBvbkNoYW5nZTogaGFuZGxlQ2hhbmdlXG4gICAgfSlcbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IENvbXBhY3RGaWVsZHM7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgcmVhY3RDU1MgZnJvbSAncmVhY3Rjc3MnO1xuaW1wb3J0IG1hcCBmcm9tICdsb2Rhc2gtZXMvbWFwJztcbmltcG9ydCBtZXJnZSBmcm9tICdsb2Rhc2gtZXMvbWVyZ2UnO1xuaW1wb3J0ICogYXMgY29sb3IgZnJvbSAnLi4vLi4vaGVscGVycy9jb2xvcic7XG5cbmltcG9ydCB7IENvbG9yV3JhcCwgUmFpc2VkIH0gZnJvbSAnLi4vY29tbW9uJztcbmltcG9ydCBDb21wYWN0Q29sb3IgZnJvbSAnLi9Db21wYWN0Q29sb3InO1xuaW1wb3J0IENvbXBhY3RGaWVsZHMgZnJvbSAnLi9Db21wYWN0RmllbGRzJztcblxuZXhwb3J0IHZhciBDb21wYWN0ID0gZnVuY3Rpb24gQ29tcGFjdChfcmVmKSB7XG4gIHZhciBvbkNoYW5nZSA9IF9yZWYub25DaGFuZ2UsXG4gICAgICBvblN3YXRjaEhvdmVyID0gX3JlZi5vblN3YXRjaEhvdmVyLFxuICAgICAgY29sb3JzID0gX3JlZi5jb2xvcnMsXG4gICAgICBoZXggPSBfcmVmLmhleCxcbiAgICAgIHJnYiA9IF9yZWYucmdiLFxuICAgICAgX3JlZiRzdHlsZXMgPSBfcmVmLnN0eWxlcyxcbiAgICAgIHBhc3NlZFN0eWxlcyA9IF9yZWYkc3R5bGVzID09PSB1bmRlZmluZWQgPyB7fSA6IF9yZWYkc3R5bGVzLFxuICAgICAgX3JlZiRjbGFzc05hbWUgPSBfcmVmLmNsYXNzTmFtZSxcbiAgICAgIGNsYXNzTmFtZSA9IF9yZWYkY2xhc3NOYW1lID09PSB1bmRlZmluZWQgPyAnJyA6IF9yZWYkY2xhc3NOYW1lO1xuXG4gIHZhciBzdHlsZXMgPSByZWFjdENTUyhtZXJnZSh7XG4gICAgJ2RlZmF1bHQnOiB7XG4gICAgICBDb21wYWN0OiB7XG4gICAgICAgIGJhY2tncm91bmQ6ICcjZjZmNmY2JyxcbiAgICAgICAgcmFkaXVzOiAnNHB4J1xuICAgICAgfSxcbiAgICAgIGNvbXBhY3Q6IHtcbiAgICAgICAgcGFkZGluZ1RvcDogJzVweCcsXG4gICAgICAgIHBhZGRpbmdMZWZ0OiAnNXB4JyxcbiAgICAgICAgYm94U2l6aW5nOiAnaW5pdGlhbCcsXG4gICAgICAgIHdpZHRoOiAnMjQwcHgnXG4gICAgICB9LFxuICAgICAgY2xlYXI6IHtcbiAgICAgICAgY2xlYXI6ICdib3RoJ1xuICAgICAgfVxuICAgIH1cbiAgfSwgcGFzc2VkU3R5bGVzKSk7XG5cbiAgdmFyIGhhbmRsZUNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUNoYW5nZShkYXRhLCBlKSB7XG4gICAgaWYgKGRhdGEuaGV4KSB7XG4gICAgICBjb2xvci5pc1ZhbGlkSGV4KGRhdGEuaGV4KSAmJiBvbkNoYW5nZSh7XG4gICAgICAgIGhleDogZGF0YS5oZXgsXG4gICAgICAgIHNvdXJjZTogJ2hleCdcbiAgICAgIH0sIGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvbkNoYW5nZShkYXRhLCBlKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgUmFpc2VkLFxuICAgIHsgc3R5bGU6IHN0eWxlcy5Db21wYWN0LCBzdHlsZXM6IHBhc3NlZFN0eWxlcyB9LFxuICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIHsgc3R5bGU6IHN0eWxlcy5jb21wYWN0LCBjbGFzc05hbWU6ICdjb21wYWN0LXBpY2tlciAnICsgY2xhc3NOYW1lIH0sXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgbWFwKGNvbG9ycywgZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wYWN0Q29sb3IsIHtcbiAgICAgICAgICAgIGtleTogYyxcbiAgICAgICAgICAgIGNvbG9yOiBjLFxuICAgICAgICAgICAgYWN0aXZlOiBjLnRvTG93ZXJDYXNlKCkgPT09IGhleCxcbiAgICAgICAgICAgIG9uQ2xpY2s6IGhhbmRsZUNoYW5nZSxcbiAgICAgICAgICAgIG9uU3dhdGNoSG92ZXI6IG9uU3dhdGNoSG92ZXJcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSksXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgc3R5bGU6IHN0eWxlcy5jbGVhciB9KVxuICAgICAgKSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcGFjdEZpZWxkcywgeyBoZXg6IGhleCwgcmdiOiByZ2IsIG9uQ2hhbmdlOiBoYW5kbGVDaGFuZ2UgfSlcbiAgICApXG4gICk7XG59O1xuXG5Db21wYWN0LnByb3BUeXBlcyA9IHtcbiAgY29sb3JzOiBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuc3RyaW5nKSxcbiAgc3R5bGVzOiBQcm9wVHlwZXMub2JqZWN0XG59O1xuXG5Db21wYWN0LmRlZmF1bHRQcm9wcyA9IHtcbiAgY29sb3JzOiBbJyM0RDRENEQnLCAnIzk5OTk5OScsICcjRkZGRkZGJywgJyNGNDRFM0InLCAnI0ZFOTIwMCcsICcjRkNEQzAwJywgJyNEQkRGMDAnLCAnI0E0REQwMCcsICcjNjhDQ0NBJywgJyM3M0Q4RkYnLCAnI0FFQTFGRicsICcjRkRBMUZGJywgJyMzMzMzMzMnLCAnIzgwODA4MCcsICcjY2NjY2NjJywgJyNEMzMxMTUnLCAnI0UyNzMwMCcsICcjRkNDNDAwJywgJyNCMEJDMDAnLCAnIzY4QkMwMCcsICcjMTZBNUE1JywgJyMwMDlDRTAnLCAnIzdCNjRGRicsICcjRkEyOEZGJywgJyMwMDAwMDAnLCAnIzY2NjY2NicsICcjQjNCM0IzJywgJyM5RjA1MDAnLCAnI0M0NTEwMCcsICcjRkI5RTAwJywgJyM4MDg5MDAnLCAnIzE5NEQzMycsICcjMEM3OTdEJywgJyMwMDYyQjEnLCAnIzY1MzI5NCcsICcjQUIxNDlFJ10sXG4gIHN0eWxlczoge31cbn07XG5cbmV4cG9ydCBkZWZhdWx0IENvbG9yV3JhcChDb21wYWN0KTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHJlYWN0Q1NTLCB7IGhhbmRsZUhvdmVyIH0gZnJvbSAncmVhY3Rjc3MnO1xuXG5pbXBvcnQgeyBTd2F0Y2ggfSBmcm9tICcuLi9jb21tb24nO1xuXG5leHBvcnQgdmFyIEdpdGh1YlN3YXRjaCA9IGZ1bmN0aW9uIEdpdGh1YlN3YXRjaChfcmVmKSB7XG4gIHZhciBob3ZlciA9IF9yZWYuaG92ZXIsXG4gICAgICBjb2xvciA9IF9yZWYuY29sb3IsXG4gICAgICBvbkNsaWNrID0gX3JlZi5vbkNsaWNrLFxuICAgICAgb25Td2F0Y2hIb3ZlciA9IF9yZWYub25Td2F0Y2hIb3ZlcjtcblxuICB2YXIgaG92ZXJTd2F0Y2ggPSB7XG4gICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgekluZGV4OiAnMicsXG4gICAgb3V0bGluZTogJzJweCBzb2xpZCAjZmZmJyxcbiAgICBib3hTaGFkb3c6ICcwIDAgNXB4IDJweCByZ2JhKDAsMCwwLDAuMjUpJ1xuICB9O1xuXG4gIHZhciBzdHlsZXMgPSByZWFjdENTUyh7XG4gICAgJ2RlZmF1bHQnOiB7XG4gICAgICBzd2F0Y2g6IHtcbiAgICAgICAgd2lkdGg6ICcyNXB4JyxcbiAgICAgICAgaGVpZ2h0OiAnMjVweCcsXG4gICAgICAgIGZvbnRTaXplOiAnMCdcbiAgICAgIH1cbiAgICB9LFxuICAgICdob3Zlcic6IHtcbiAgICAgIHN3YXRjaDogaG92ZXJTd2F0Y2hcbiAgICB9XG4gIH0sIHsgaG92ZXI6IGhvdmVyIH0pO1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICdkaXYnLFxuICAgIHsgc3R5bGU6IHN0eWxlcy5zd2F0Y2ggfSxcbiAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFN3YXRjaCwge1xuICAgICAgY29sb3I6IGNvbG9yLFxuICAgICAgb25DbGljazogb25DbGljayxcbiAgICAgIG9uSG92ZXI6IG9uU3dhdGNoSG92ZXIsXG4gICAgICBmb2N1c1N0eWxlOiBob3ZlclN3YXRjaFxuICAgIH0pXG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBoYW5kbGVIb3ZlcihHaXRodWJTd2F0Y2gpOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHJlYWN0Q1NTIGZyb20gJ3JlYWN0Y3NzJztcbmltcG9ydCBtYXAgZnJvbSAnbG9kYXNoLWVzL21hcCc7XG5pbXBvcnQgbWVyZ2UgZnJvbSAnbG9kYXNoLWVzL21lcmdlJztcblxuaW1wb3J0IHsgQ29sb3JXcmFwIH0gZnJvbSAnLi4vY29tbW9uJztcbmltcG9ydCBHaXRodWJTd2F0Y2ggZnJvbSAnLi9HaXRodWJTd2F0Y2gnO1xuXG5leHBvcnQgdmFyIEdpdGh1YiA9IGZ1bmN0aW9uIEdpdGh1YihfcmVmKSB7XG4gIHZhciB3aWR0aCA9IF9yZWYud2lkdGgsXG4gICAgICBjb2xvcnMgPSBfcmVmLmNvbG9ycyxcbiAgICAgIG9uQ2hhbmdlID0gX3JlZi5vbkNoYW5nZSxcbiAgICAgIG9uU3dhdGNoSG92ZXIgPSBfcmVmLm9uU3dhdGNoSG92ZXIsXG4gICAgICB0cmlhbmdsZSA9IF9yZWYudHJpYW5nbGUsXG4gICAgICBfcmVmJHN0eWxlcyA9IF9yZWYuc3R5bGVzLFxuICAgICAgcGFzc2VkU3R5bGVzID0gX3JlZiRzdHlsZXMgPT09IHVuZGVmaW5lZCA/IHt9IDogX3JlZiRzdHlsZXMsXG4gICAgICBfcmVmJGNsYXNzTmFtZSA9IF9yZWYuY2xhc3NOYW1lLFxuICAgICAgY2xhc3NOYW1lID0gX3JlZiRjbGFzc05hbWUgPT09IHVuZGVmaW5lZCA/ICcnIDogX3JlZiRjbGFzc05hbWU7XG5cbiAgdmFyIHN0eWxlcyA9IHJlYWN0Q1NTKG1lcmdlKHtcbiAgICAnZGVmYXVsdCc6IHtcbiAgICAgIGNhcmQ6IHtcbiAgICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgICBiYWNrZ3JvdW5kOiAnI2ZmZicsXG4gICAgICAgIGJvcmRlcjogJzFweCBzb2xpZCByZ2JhKDAsMCwwLDAuMiknLFxuICAgICAgICBib3hTaGFkb3c6ICcwIDNweCAxMnB4IHJnYmEoMCwwLDAsMC4xNSknLFxuICAgICAgICBib3JkZXJSYWRpdXM6ICc0cHgnLFxuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgcGFkZGluZzogJzVweCcsXG4gICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgZmxleFdyYXA6ICd3cmFwJ1xuICAgICAgfSxcbiAgICAgIHRyaWFuZ2xlOiB7XG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICBib3JkZXI6ICc3cHggc29saWQgdHJhbnNwYXJlbnQnLFxuICAgICAgICBib3JkZXJCb3R0b21Db2xvcjogJyNmZmYnXG4gICAgICB9LFxuICAgICAgdHJpYW5nbGVTaGFkb3c6IHtcbiAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgIGJvcmRlcjogJzhweCBzb2xpZCB0cmFuc3BhcmVudCcsXG4gICAgICAgIGJvcmRlckJvdHRvbUNvbG9yOiAncmdiYSgwLDAsMCwwLjE1KSdcbiAgICAgIH1cbiAgICB9LFxuICAgICdoaWRlLXRyaWFuZ2xlJzoge1xuICAgICAgdHJpYW5nbGU6IHtcbiAgICAgICAgZGlzcGxheTogJ25vbmUnXG4gICAgICB9LFxuICAgICAgdHJpYW5nbGVTaGFkb3c6IHtcbiAgICAgICAgZGlzcGxheTogJ25vbmUnXG4gICAgICB9XG4gICAgfSxcbiAgICAndG9wLWxlZnQtdHJpYW5nbGUnOiB7XG4gICAgICB0cmlhbmdsZToge1xuICAgICAgICB0b3A6ICctMTRweCcsXG4gICAgICAgIGxlZnQ6ICcxMHB4J1xuICAgICAgfSxcbiAgICAgIHRyaWFuZ2xlU2hhZG93OiB7XG4gICAgICAgIHRvcDogJy0xNnB4JyxcbiAgICAgICAgbGVmdDogJzlweCdcbiAgICAgIH1cbiAgICB9LFxuICAgICd0b3AtcmlnaHQtdHJpYW5nbGUnOiB7XG4gICAgICB0cmlhbmdsZToge1xuICAgICAgICB0b3A6ICctMTRweCcsXG4gICAgICAgIHJpZ2h0OiAnMTBweCdcbiAgICAgIH0sXG4gICAgICB0cmlhbmdsZVNoYWRvdzoge1xuICAgICAgICB0b3A6ICctMTZweCcsXG4gICAgICAgIHJpZ2h0OiAnOXB4J1xuICAgICAgfVxuICAgIH0sXG4gICAgJ2JvdHRvbS1sZWZ0LXRyaWFuZ2xlJzoge1xuICAgICAgdHJpYW5nbGU6IHtcbiAgICAgICAgdG9wOiAnMzVweCcsXG4gICAgICAgIGxlZnQ6ICcxMHB4JyxcbiAgICAgICAgdHJhbnNmb3JtOiAncm90YXRlKDE4MGRlZyknXG4gICAgICB9LFxuICAgICAgdHJpYW5nbGVTaGFkb3c6IHtcbiAgICAgICAgdG9wOiAnMzdweCcsXG4gICAgICAgIGxlZnQ6ICc5cHgnLFxuICAgICAgICB0cmFuc2Zvcm06ICdyb3RhdGUoMTgwZGVnKSdcbiAgICAgIH1cbiAgICB9LFxuICAgICdib3R0b20tcmlnaHQtdHJpYW5nbGUnOiB7XG4gICAgICB0cmlhbmdsZToge1xuICAgICAgICB0b3A6ICczNXB4JyxcbiAgICAgICAgcmlnaHQ6ICcxMHB4JyxcbiAgICAgICAgdHJhbnNmb3JtOiAncm90YXRlKDE4MGRlZyknXG4gICAgICB9LFxuICAgICAgdHJpYW5nbGVTaGFkb3c6IHtcbiAgICAgICAgdG9wOiAnMzdweCcsXG4gICAgICAgIHJpZ2h0OiAnOXB4JyxcbiAgICAgICAgdHJhbnNmb3JtOiAncm90YXRlKDE4MGRlZyknXG4gICAgICB9XG4gICAgfVxuICB9LCBwYXNzZWRTdHlsZXMpLCB7XG4gICAgJ2hpZGUtdHJpYW5nbGUnOiB0cmlhbmdsZSA9PT0gJ2hpZGUnLFxuICAgICd0b3AtbGVmdC10cmlhbmdsZSc6IHRyaWFuZ2xlID09PSAndG9wLWxlZnQnLFxuICAgICd0b3AtcmlnaHQtdHJpYW5nbGUnOiB0cmlhbmdsZSA9PT0gJ3RvcC1yaWdodCcsXG4gICAgJ2JvdHRvbS1sZWZ0LXRyaWFuZ2xlJzogdHJpYW5nbGUgPT09ICdib3R0b20tbGVmdCcsXG4gICAgJ2JvdHRvbS1yaWdodC10cmlhbmdsZSc6IHRyaWFuZ2xlID09PSAnYm90dG9tLXJpZ2h0J1xuICB9KTtcblxuICB2YXIgaGFuZGxlQ2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlQ2hhbmdlKGhleCwgZSkge1xuICAgIHJldHVybiBvbkNoYW5nZSh7IGhleDogaGV4LCBzb3VyY2U6ICdoZXgnIH0sIGUpO1xuICB9O1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICdkaXYnLFxuICAgIHsgc3R5bGU6IHN0eWxlcy5jYXJkLCBjbGFzc05hbWU6ICdnaXRodWItcGlja2VyICcgKyBjbGFzc05hbWUgfSxcbiAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IHN0eWxlOiBzdHlsZXMudHJpYW5nbGVTaGFkb3cgfSksXG4gICAgUmVhY3QuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBzdHlsZTogc3R5bGVzLnRyaWFuZ2xlIH0pLFxuICAgIG1hcChjb2xvcnMsIGZ1bmN0aW9uIChjKSB7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChHaXRodWJTd2F0Y2gsIHtcbiAgICAgICAgY29sb3I6IGMsXG4gICAgICAgIGtleTogYyxcbiAgICAgICAgb25DbGljazogaGFuZGxlQ2hhbmdlLFxuICAgICAgICBvblN3YXRjaEhvdmVyOiBvblN3YXRjaEhvdmVyXG4gICAgICB9KTtcbiAgICB9KVxuICApO1xufTtcblxuR2l0aHViLnByb3BUeXBlcyA9IHtcbiAgd2lkdGg6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5udW1iZXJdKSxcbiAgY29sb3JzOiBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuc3RyaW5nKSxcbiAgdHJpYW5nbGU6IFByb3BUeXBlcy5vbmVPZihbJ2hpZGUnLCAndG9wLWxlZnQnLCAndG9wLXJpZ2h0JywgJ2JvdHRvbS1sZWZ0JywgJ2JvdHRvbS1yaWdodCddKSxcbiAgc3R5bGVzOiBQcm9wVHlwZXMub2JqZWN0XG59O1xuXG5HaXRodWIuZGVmYXVsdFByb3BzID0ge1xuICB3aWR0aDogMjAwLFxuICBjb2xvcnM6IFsnI0I4MDAwMCcsICcjREIzRTAwJywgJyNGQ0NCMDAnLCAnIzAwOEIwMicsICcjMDA2Qjc2JywgJyMxMjczREUnLCAnIzAwNERDRicsICcjNTMwMEVCJywgJyNFQjk2OTQnLCAnI0ZBRDBDMycsICcjRkVGM0JEJywgJyNDMUUxQzUnLCAnI0JFREFEQycsICcjQzRERUY2JywgJyNCRUQzRjMnLCAnI0Q0QzRGQiddLFxuICB0cmlhbmdsZTogJ3RvcC1sZWZ0JyxcbiAgc3R5bGVzOiB7fVxufTtcblxuZXhwb3J0IGRlZmF1bHQgQ29sb3JXcmFwKEdpdGh1Yik7IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgcmVhY3RDU1MgZnJvbSAncmVhY3Rjc3MnO1xuaW1wb3J0IG1lcmdlIGZyb20gJ2xvZGFzaC1lcy9tZXJnZSc7XG5cbmltcG9ydCB7IENvbG9yV3JhcCwgSHVlIH0gZnJvbSAnLi4vY29tbW9uJztcbmltcG9ydCBIdWVQb2ludGVyIGZyb20gJy4vSHVlUG9pbnRlcic7XG5cbmV4cG9ydCB2YXIgSHVlUGlja2VyID0gZnVuY3Rpb24gSHVlUGlja2VyKF9yZWYpIHtcbiAgdmFyIHdpZHRoID0gX3JlZi53aWR0aCxcbiAgICAgIGhlaWdodCA9IF9yZWYuaGVpZ2h0LFxuICAgICAgb25DaGFuZ2UgPSBfcmVmLm9uQ2hhbmdlLFxuICAgICAgaHNsID0gX3JlZi5oc2wsXG4gICAgICBkaXJlY3Rpb24gPSBfcmVmLmRpcmVjdGlvbixcbiAgICAgIHBvaW50ZXIgPSBfcmVmLnBvaW50ZXIsXG4gICAgICBfcmVmJHN0eWxlcyA9IF9yZWYuc3R5bGVzLFxuICAgICAgcGFzc2VkU3R5bGVzID0gX3JlZiRzdHlsZXMgPT09IHVuZGVmaW5lZCA/IHt9IDogX3JlZiRzdHlsZXMsXG4gICAgICBfcmVmJGNsYXNzTmFtZSA9IF9yZWYuY2xhc3NOYW1lLFxuICAgICAgY2xhc3NOYW1lID0gX3JlZiRjbGFzc05hbWUgPT09IHVuZGVmaW5lZCA/ICcnIDogX3JlZiRjbGFzc05hbWU7XG5cbiAgdmFyIHN0eWxlcyA9IHJlYWN0Q1NTKG1lcmdlKHtcbiAgICAnZGVmYXVsdCc6IHtcbiAgICAgIHBpY2tlcjoge1xuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgICBoZWlnaHQ6IGhlaWdodFxuICAgICAgfSxcbiAgICAgIGh1ZToge1xuICAgICAgICByYWRpdXM6ICcycHgnXG4gICAgICB9XG4gICAgfVxuICB9LCBwYXNzZWRTdHlsZXMpKTtcblxuICAvLyBPdmVyd3JpdGUgdG8gcHJvdmlkZSBwdXJlIGh1ZSBjb2xvclxuICB2YXIgaGFuZGxlQ2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlQ2hhbmdlKGRhdGEpIHtcbiAgICByZXR1cm4gb25DaGFuZ2UoeyBhOiAxLCBoOiBkYXRhLmgsIGw6IDAuNSwgczogMSB9KTtcbiAgfTtcblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAnZGl2JyxcbiAgICB7IHN0eWxlOiBzdHlsZXMucGlja2VyLCBjbGFzc05hbWU6ICdodWUtcGlja2VyICcgKyBjbGFzc05hbWUgfSxcbiAgICBSZWFjdC5jcmVhdGVFbGVtZW50KEh1ZSwgX2V4dGVuZHMoe30sIHN0eWxlcy5odWUsIHtcbiAgICAgIGhzbDogaHNsLFxuICAgICAgcG9pbnRlcjogcG9pbnRlcixcbiAgICAgIG9uQ2hhbmdlOiBoYW5kbGVDaGFuZ2UsXG4gICAgICBkaXJlY3Rpb246IGRpcmVjdGlvblxuICAgIH0pKVxuICApO1xufTtcblxuSHVlUGlja2VyLnByb3BUeXBlcyA9IHtcbiAgc3R5bGVzOiBQcm9wVHlwZXMub2JqZWN0XG59O1xuSHVlUGlja2VyLmRlZmF1bHRQcm9wcyA9IHtcbiAgd2lkdGg6ICczMTZweCcsXG4gIGhlaWdodDogJzE2cHgnLFxuICBkaXJlY3Rpb246ICdob3Jpem9udGFsJyxcbiAgcG9pbnRlcjogSHVlUG9pbnRlcixcbiAgc3R5bGVzOiB7fVxufTtcblxuZXhwb3J0IGRlZmF1bHQgQ29sb3JXcmFwKEh1ZVBpY2tlcik7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCByZWFjdENTUyBmcm9tICdyZWFjdGNzcyc7XG5cbmV4cG9ydCB2YXIgU2xpZGVyUG9pbnRlciA9IGZ1bmN0aW9uIFNsaWRlclBvaW50ZXIoX3JlZikge1xuICB2YXIgZGlyZWN0aW9uID0gX3JlZi5kaXJlY3Rpb247XG5cbiAgdmFyIHN0eWxlcyA9IHJlYWN0Q1NTKHtcbiAgICAnZGVmYXVsdCc6IHtcbiAgICAgIHBpY2tlcjoge1xuICAgICAgICB3aWR0aDogJzE4cHgnLFxuICAgICAgICBoZWlnaHQ6ICcxOHB4JyxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAnNTAlJyxcbiAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKC05cHgsIC0xcHgpJyxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAncmdiKDI0OCwgMjQ4LCAyNDgpJyxcbiAgICAgICAgYm94U2hhZG93OiAnMCAxcHggNHB4IDAgcmdiYSgwLCAwLCAwLCAwLjM3KSdcbiAgICAgIH1cbiAgICB9LFxuICAgICd2ZXJ0aWNhbCc6IHtcbiAgICAgIHBpY2tlcjoge1xuICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoLTNweCwgLTlweCknXG4gICAgICB9XG4gICAgfVxuICB9LCB7IHZlcnRpY2FsOiBkaXJlY3Rpb24gPT09ICd2ZXJ0aWNhbCcgfSk7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgc3R5bGU6IHN0eWxlcy5waWNrZXIgfSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBTbGlkZXJQb2ludGVyOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgcmVhY3RDU1MgZnJvbSAncmVhY3Rjc3MnO1xuaW1wb3J0IG1lcmdlIGZyb20gJ2xvZGFzaC1lcy9tZXJnZSc7XG5pbXBvcnQgKiBhcyBjb2xvciBmcm9tICcuLi8uLi9oZWxwZXJzL2NvbG9yJztcblxuaW1wb3J0IHsgQ29sb3JXcmFwLCBFZGl0YWJsZUlucHV0LCBSYWlzZWQgfSBmcm9tICcuLi9jb21tb24nO1xuXG5leHBvcnQgdmFyIE1hdGVyaWFsID0gZnVuY3Rpb24gTWF0ZXJpYWwoX3JlZikge1xuICB2YXIgb25DaGFuZ2UgPSBfcmVmLm9uQ2hhbmdlLFxuICAgICAgaGV4ID0gX3JlZi5oZXgsXG4gICAgICByZ2IgPSBfcmVmLnJnYixcbiAgICAgIF9yZWYkc3R5bGVzID0gX3JlZi5zdHlsZXMsXG4gICAgICBwYXNzZWRTdHlsZXMgPSBfcmVmJHN0eWxlcyA9PT0gdW5kZWZpbmVkID8ge30gOiBfcmVmJHN0eWxlcyxcbiAgICAgIF9yZWYkY2xhc3NOYW1lID0gX3JlZi5jbGFzc05hbWUsXG4gICAgICBjbGFzc05hbWUgPSBfcmVmJGNsYXNzTmFtZSA9PT0gdW5kZWZpbmVkID8gJycgOiBfcmVmJGNsYXNzTmFtZTtcblxuICB2YXIgc3R5bGVzID0gcmVhY3RDU1MobWVyZ2Uoe1xuICAgICdkZWZhdWx0Jzoge1xuICAgICAgbWF0ZXJpYWw6IHtcbiAgICAgICAgd2lkdGg6ICc5OHB4JyxcbiAgICAgICAgaGVpZ2h0OiAnOThweCcsXG4gICAgICAgIHBhZGRpbmc6ICcxNnB4JyxcbiAgICAgICAgZm9udEZhbWlseTogJ1JvYm90bydcbiAgICAgIH0sXG4gICAgICBIRVh3cmFwOiB7XG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnXG4gICAgICB9LFxuICAgICAgSEVYaW5wdXQ6IHtcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgbWFyZ2luVG9wOiAnMTJweCcsXG4gICAgICAgIGZvbnRTaXplOiAnMTVweCcsXG4gICAgICAgIGNvbG9yOiAnIzMzMycsXG4gICAgICAgIHBhZGRpbmc6ICcwcHgnLFxuICAgICAgICBib3JkZXI6ICcwcHgnLFxuICAgICAgICBib3JkZXJCb3R0b206ICcycHggc29saWQgJyArIGhleCxcbiAgICAgICAgb3V0bGluZTogJ25vbmUnLFxuICAgICAgICBoZWlnaHQ6ICczMHB4J1xuICAgICAgfSxcbiAgICAgIEhFWGxhYmVsOiB7XG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICB0b3A6ICcwcHgnLFxuICAgICAgICBsZWZ0OiAnMHB4JyxcbiAgICAgICAgZm9udFNpemU6ICcxMXB4JyxcbiAgICAgICAgY29sb3I6ICcjOTk5OTk5JyxcbiAgICAgICAgdGV4dFRyYW5zZm9ybTogJ2NhcGl0YWxpemUnXG4gICAgICB9LFxuICAgICAgSGV4OiB7XG4gICAgICAgIHN0eWxlOiB7fVxuICAgICAgfSxcbiAgICAgIFJHQndyYXA6IHtcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbiAgICAgIH0sXG4gICAgICBSR0JpbnB1dDoge1xuICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICBtYXJnaW5Ub3A6ICcxMnB4JyxcbiAgICAgICAgZm9udFNpemU6ICcxNXB4JyxcbiAgICAgICAgY29sb3I6ICcjMzMzJyxcbiAgICAgICAgcGFkZGluZzogJzBweCcsXG4gICAgICAgIGJvcmRlcjogJzBweCcsXG4gICAgICAgIGJvcmRlckJvdHRvbTogJzFweCBzb2xpZCAjZWVlJyxcbiAgICAgICAgb3V0bGluZTogJ25vbmUnLFxuICAgICAgICBoZWlnaHQ6ICczMHB4J1xuICAgICAgfSxcbiAgICAgIFJHQmxhYmVsOiB7XG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICB0b3A6ICcwcHgnLFxuICAgICAgICBsZWZ0OiAnMHB4JyxcbiAgICAgICAgZm9udFNpemU6ICcxMXB4JyxcbiAgICAgICAgY29sb3I6ICcjOTk5OTk5JyxcbiAgICAgICAgdGV4dFRyYW5zZm9ybTogJ2NhcGl0YWxpemUnXG4gICAgICB9LFxuICAgICAgc3BsaXQ6IHtcbiAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICBtYXJnaW5SaWdodDogJy0xMHB4JyxcbiAgICAgICAgcGFkZGluZ1RvcDogJzExcHgnXG4gICAgICB9LFxuICAgICAgdGhpcmQ6IHtcbiAgICAgICAgZmxleDogJzEnLFxuICAgICAgICBwYWRkaW5nUmlnaHQ6ICcxMHB4J1xuICAgICAgfVxuICAgIH1cbiAgfSwgcGFzc2VkU3R5bGVzKSk7XG5cbiAgdmFyIGhhbmRsZUNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUNoYW5nZShkYXRhLCBlKSB7XG4gICAgaWYgKGRhdGEuaGV4KSB7XG4gICAgICBjb2xvci5pc1ZhbGlkSGV4KGRhdGEuaGV4KSAmJiBvbkNoYW5nZSh7XG4gICAgICAgIGhleDogZGF0YS5oZXgsXG4gICAgICAgIHNvdXJjZTogJ2hleCdcbiAgICAgIH0sIGUpO1xuICAgIH0gZWxzZSBpZiAoZGF0YS5yIHx8IGRhdGEuZyB8fCBkYXRhLmIpIHtcbiAgICAgIG9uQ2hhbmdlKHtcbiAgICAgICAgcjogZGF0YS5yIHx8IHJnYi5yLFxuICAgICAgICBnOiBkYXRhLmcgfHwgcmdiLmcsXG4gICAgICAgIGI6IGRhdGEuYiB8fCByZ2IuYixcbiAgICAgICAgc291cmNlOiAncmdiJ1xuICAgICAgfSwgZSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgIFJhaXNlZCxcbiAgICB7IHN0eWxlczogcGFzc2VkU3R5bGVzIH0sXG4gICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgeyBzdHlsZTogc3R5bGVzLm1hdGVyaWFsLCBjbGFzc05hbWU6ICdtYXRlcmlhbC1waWNrZXIgJyArIGNsYXNzTmFtZSB9LFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChFZGl0YWJsZUlucHV0LCB7XG4gICAgICAgIHN0eWxlOiB7IHdyYXA6IHN0eWxlcy5IRVh3cmFwLCBpbnB1dDogc3R5bGVzLkhFWGlucHV0LCBsYWJlbDogc3R5bGVzLkhFWGxhYmVsIH0sXG4gICAgICAgIGxhYmVsOiAnaGV4JyxcbiAgICAgICAgdmFsdWU6IGhleCxcbiAgICAgICAgb25DaGFuZ2U6IGhhbmRsZUNoYW5nZVxuICAgICAgfSksXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgeyBzdHlsZTogc3R5bGVzLnNwbGl0LCBjbGFzc05hbWU6ICdmbGV4Ym94LWZpeCcgfSxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMudGhpcmQgfSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KEVkaXRhYmxlSW5wdXQsIHtcbiAgICAgICAgICAgIHN0eWxlOiB7IHdyYXA6IHN0eWxlcy5SR0J3cmFwLCBpbnB1dDogc3R5bGVzLlJHQmlucHV0LCBsYWJlbDogc3R5bGVzLlJHQmxhYmVsIH0sXG4gICAgICAgICAgICBsYWJlbDogJ3InLCB2YWx1ZTogcmdiLnIsXG4gICAgICAgICAgICBvbkNoYW5nZTogaGFuZGxlQ2hhbmdlXG4gICAgICAgICAgfSlcbiAgICAgICAgKSxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMudGhpcmQgfSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KEVkaXRhYmxlSW5wdXQsIHtcbiAgICAgICAgICAgIHN0eWxlOiB7IHdyYXA6IHN0eWxlcy5SR0J3cmFwLCBpbnB1dDogc3R5bGVzLlJHQmlucHV0LCBsYWJlbDogc3R5bGVzLlJHQmxhYmVsIH0sXG4gICAgICAgICAgICBsYWJlbDogJ2cnLFxuICAgICAgICAgICAgdmFsdWU6IHJnYi5nLFxuICAgICAgICAgICAgb25DaGFuZ2U6IGhhbmRsZUNoYW5nZVxuICAgICAgICAgIH0pXG4gICAgICAgICksXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgeyBzdHlsZTogc3R5bGVzLnRoaXJkIH0sXG4gICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChFZGl0YWJsZUlucHV0LCB7XG4gICAgICAgICAgICBzdHlsZTogeyB3cmFwOiBzdHlsZXMuUkdCd3JhcCwgaW5wdXQ6IHN0eWxlcy5SR0JpbnB1dCwgbGFiZWw6IHN0eWxlcy5SR0JsYWJlbCB9LFxuICAgICAgICAgICAgbGFiZWw6ICdiJyxcbiAgICAgICAgICAgIHZhbHVlOiByZ2IuYixcbiAgICAgICAgICAgIG9uQ2hhbmdlOiBoYW5kbGVDaGFuZ2VcbiAgICAgICAgICB9KVxuICAgICAgICApXG4gICAgICApXG4gICAgKVxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgQ29sb3JXcmFwKE1hdGVyaWFsKTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHJlYWN0Q1NTIGZyb20gJ3JlYWN0Y3NzJztcbmltcG9ydCAqIGFzIGNvbG9yIGZyb20gJy4uLy4uL2hlbHBlcnMvY29sb3InO1xuXG5pbXBvcnQgeyBFZGl0YWJsZUlucHV0IH0gZnJvbSAnLi4vY29tbW9uJztcblxuZXhwb3J0IHZhciBQaG90b3Nob3BQaWNrZXIgPSBmdW5jdGlvbiBQaG90b3Nob3BQaWNrZXIoX3JlZikge1xuICB2YXIgb25DaGFuZ2UgPSBfcmVmLm9uQ2hhbmdlLFxuICAgICAgcmdiID0gX3JlZi5yZ2IsXG4gICAgICBoc3YgPSBfcmVmLmhzdixcbiAgICAgIGhleCA9IF9yZWYuaGV4O1xuXG4gIHZhciBzdHlsZXMgPSByZWFjdENTUyh7XG4gICAgJ2RlZmF1bHQnOiB7XG4gICAgICBmaWVsZHM6IHtcbiAgICAgICAgcGFkZGluZ1RvcDogJzVweCcsXG4gICAgICAgIHBhZGRpbmdCb3R0b206ICc5cHgnLFxuICAgICAgICB3aWR0aDogJzgwcHgnLFxuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xuICAgICAgfSxcbiAgICAgIGRpdmlkZXI6IHtcbiAgICAgICAgaGVpZ2h0OiAnNXB4J1xuICAgICAgfSxcbiAgICAgIFJHQndyYXA6IHtcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbiAgICAgIH0sXG4gICAgICBSR0JpbnB1dDoge1xuICAgICAgICBtYXJnaW5MZWZ0OiAnNDAlJyxcbiAgICAgICAgd2lkdGg6ICc0MCUnLFxuICAgICAgICBoZWlnaHQ6ICcxOHB4JyxcbiAgICAgICAgYm9yZGVyOiAnMXB4IHNvbGlkICM4ODg4ODgnLFxuICAgICAgICBib3hTaGFkb3c6ICdpbnNldCAwIDFweCAxcHggcmdiYSgwLDAsMCwuMSksIDAgMXB4IDAgMCAjRUNFQ0VDJyxcbiAgICAgICAgbWFyZ2luQm90dG9tOiAnNXB4JyxcbiAgICAgICAgZm9udFNpemU6ICcxM3B4JyxcbiAgICAgICAgcGFkZGluZ0xlZnQ6ICczcHgnLFxuICAgICAgICBtYXJnaW5SaWdodDogJzEwcHgnXG4gICAgICB9LFxuICAgICAgUkdCbGFiZWw6IHtcbiAgICAgICAgbGVmdDogJzBweCcsXG4gICAgICAgIHRvcDogJzBweCcsXG4gICAgICAgIHdpZHRoOiAnMzRweCcsXG4gICAgICAgIHRleHRUcmFuc2Zvcm06ICd1cHBlcmNhc2UnLFxuICAgICAgICBmb250U2l6ZTogJzEzcHgnLFxuICAgICAgICBoZWlnaHQ6ICcxOHB4JyxcbiAgICAgICAgbGluZUhlaWdodDogJzIycHgnLFxuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJ1xuICAgICAgfSxcbiAgICAgIEhFWHdyYXA6IHtcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbiAgICAgIH0sXG4gICAgICBIRVhpbnB1dDoge1xuICAgICAgICBtYXJnaW5MZWZ0OiAnMjAlJyxcbiAgICAgICAgd2lkdGg6ICc4MCUnLFxuICAgICAgICBoZWlnaHQ6ICcxOHB4JyxcbiAgICAgICAgYm9yZGVyOiAnMXB4IHNvbGlkICM4ODg4ODgnLFxuICAgICAgICBib3hTaGFkb3c6ICdpbnNldCAwIDFweCAxcHggcmdiYSgwLDAsMCwuMSksIDAgMXB4IDAgMCAjRUNFQ0VDJyxcbiAgICAgICAgbWFyZ2luQm90dG9tOiAnNnB4JyxcbiAgICAgICAgZm9udFNpemU6ICcxM3B4JyxcbiAgICAgICAgcGFkZGluZ0xlZnQ6ICczcHgnXG4gICAgICB9LFxuICAgICAgSEVYbGFiZWw6IHtcbiAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgIHRvcDogJzBweCcsXG4gICAgICAgIGxlZnQ6ICcwcHgnLFxuICAgICAgICB3aWR0aDogJzE0cHgnLFxuICAgICAgICB0ZXh0VHJhbnNmb3JtOiAndXBwZXJjYXNlJyxcbiAgICAgICAgZm9udFNpemU6ICcxM3B4JyxcbiAgICAgICAgaGVpZ2h0OiAnMThweCcsXG4gICAgICAgIGxpbmVIZWlnaHQ6ICcyMnB4J1xuICAgICAgfSxcbiAgICAgIGZpZWxkU3ltYm9sczoge1xuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgdG9wOiAnNXB4JyxcbiAgICAgICAgcmlnaHQ6ICctN3B4JyxcbiAgICAgICAgZm9udFNpemU6ICcxM3B4J1xuICAgICAgfSxcbiAgICAgIHN5bWJvbDoge1xuICAgICAgICBoZWlnaHQ6ICcyMHB4JyxcbiAgICAgICAgbGluZUhlaWdodDogJzIycHgnLFxuICAgICAgICBwYWRkaW5nQm90dG9tOiAnN3B4J1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgdmFyIGhhbmRsZUNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUNoYW5nZShkYXRhLCBlKSB7XG4gICAgaWYgKGRhdGFbJyMnXSkge1xuICAgICAgY29sb3IuaXNWYWxpZEhleChkYXRhWycjJ10pICYmIG9uQ2hhbmdlKHtcbiAgICAgICAgaGV4OiBkYXRhWycjJ10sXG4gICAgICAgIHNvdXJjZTogJ2hleCdcbiAgICAgIH0sIGUpO1xuICAgIH0gZWxzZSBpZiAoZGF0YS5yIHx8IGRhdGEuZyB8fCBkYXRhLmIpIHtcbiAgICAgIG9uQ2hhbmdlKHtcbiAgICAgICAgcjogZGF0YS5yIHx8IHJnYi5yLFxuICAgICAgICBnOiBkYXRhLmcgfHwgcmdiLmcsXG4gICAgICAgIGI6IGRhdGEuYiB8fCByZ2IuYixcbiAgICAgICAgc291cmNlOiAncmdiJ1xuICAgICAgfSwgZSk7XG4gICAgfSBlbHNlIGlmIChkYXRhLmggfHwgZGF0YS5zIHx8IGRhdGEudikge1xuICAgICAgb25DaGFuZ2Uoe1xuICAgICAgICBoOiBkYXRhLmggfHwgaHN2LmgsXG4gICAgICAgIHM6IGRhdGEucyB8fCBoc3YucyxcbiAgICAgICAgdjogZGF0YS52IHx8IGhzdi52LFxuICAgICAgICBzb3VyY2U6ICdoc3YnXG4gICAgICB9LCBlKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgJ2RpdicsXG4gICAgeyBzdHlsZTogc3R5bGVzLmZpZWxkcyB9LFxuICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWRpdGFibGVJbnB1dCwge1xuICAgICAgc3R5bGU6IHsgd3JhcDogc3R5bGVzLlJHQndyYXAsIGlucHV0OiBzdHlsZXMuUkdCaW5wdXQsIGxhYmVsOiBzdHlsZXMuUkdCbGFiZWwgfSxcbiAgICAgIGxhYmVsOiAnaCcsXG4gICAgICB2YWx1ZTogTWF0aC5yb3VuZChoc3YuaCksXG4gICAgICBvbkNoYW5nZTogaGFuZGxlQ2hhbmdlXG4gICAgfSksXG4gICAgUmVhY3QuY3JlYXRlRWxlbWVudChFZGl0YWJsZUlucHV0LCB7XG4gICAgICBzdHlsZTogeyB3cmFwOiBzdHlsZXMuUkdCd3JhcCwgaW5wdXQ6IHN0eWxlcy5SR0JpbnB1dCwgbGFiZWw6IHN0eWxlcy5SR0JsYWJlbCB9LFxuICAgICAgbGFiZWw6ICdzJyxcbiAgICAgIHZhbHVlOiBNYXRoLnJvdW5kKGhzdi5zICogMTAwKSxcbiAgICAgIG9uQ2hhbmdlOiBoYW5kbGVDaGFuZ2VcbiAgICB9KSxcbiAgICBSZWFjdC5jcmVhdGVFbGVtZW50KEVkaXRhYmxlSW5wdXQsIHtcbiAgICAgIHN0eWxlOiB7IHdyYXA6IHN0eWxlcy5SR0J3cmFwLCBpbnB1dDogc3R5bGVzLlJHQmlucHV0LCBsYWJlbDogc3R5bGVzLlJHQmxhYmVsIH0sXG4gICAgICBsYWJlbDogJ3YnLFxuICAgICAgdmFsdWU6IE1hdGgucm91bmQoaHN2LnYgKiAxMDApLFxuICAgICAgb25DaGFuZ2U6IGhhbmRsZUNoYW5nZVxuICAgIH0pLFxuICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgc3R5bGU6IHN0eWxlcy5kaXZpZGVyIH0pLFxuICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWRpdGFibGVJbnB1dCwge1xuICAgICAgc3R5bGU6IHsgd3JhcDogc3R5bGVzLlJHQndyYXAsIGlucHV0OiBzdHlsZXMuUkdCaW5wdXQsIGxhYmVsOiBzdHlsZXMuUkdCbGFiZWwgfSxcbiAgICAgIGxhYmVsOiAncicsXG4gICAgICB2YWx1ZTogcmdiLnIsXG4gICAgICBvbkNoYW5nZTogaGFuZGxlQ2hhbmdlXG4gICAgfSksXG4gICAgUmVhY3QuY3JlYXRlRWxlbWVudChFZGl0YWJsZUlucHV0LCB7XG4gICAgICBzdHlsZTogeyB3cmFwOiBzdHlsZXMuUkdCd3JhcCwgaW5wdXQ6IHN0eWxlcy5SR0JpbnB1dCwgbGFiZWw6IHN0eWxlcy5SR0JsYWJlbCB9LFxuICAgICAgbGFiZWw6ICdnJyxcbiAgICAgIHZhbHVlOiByZ2IuZyxcbiAgICAgIG9uQ2hhbmdlOiBoYW5kbGVDaGFuZ2VcbiAgICB9KSxcbiAgICBSZWFjdC5jcmVhdGVFbGVtZW50KEVkaXRhYmxlSW5wdXQsIHtcbiAgICAgIHN0eWxlOiB7IHdyYXA6IHN0eWxlcy5SR0J3cmFwLCBpbnB1dDogc3R5bGVzLlJHQmlucHV0LCBsYWJlbDogc3R5bGVzLlJHQmxhYmVsIH0sXG4gICAgICBsYWJlbDogJ2InLFxuICAgICAgdmFsdWU6IHJnYi5iLFxuICAgICAgb25DaGFuZ2U6IGhhbmRsZUNoYW5nZVxuICAgIH0pLFxuICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgc3R5bGU6IHN0eWxlcy5kaXZpZGVyIH0pLFxuICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWRpdGFibGVJbnB1dCwge1xuICAgICAgc3R5bGU6IHsgd3JhcDogc3R5bGVzLkhFWHdyYXAsIGlucHV0OiBzdHlsZXMuSEVYaW5wdXQsIGxhYmVsOiBzdHlsZXMuSEVYbGFiZWwgfSxcbiAgICAgIGxhYmVsOiAnIycsXG4gICAgICB2YWx1ZTogaGV4LnJlcGxhY2UoJyMnLCAnJyksXG4gICAgICBvbkNoYW5nZTogaGFuZGxlQ2hhbmdlXG4gICAgfSksXG4gICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgeyBzdHlsZTogc3R5bGVzLmZpZWxkU3ltYm9scyB9LFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHsgc3R5bGU6IHN0eWxlcy5zeW1ib2wgfSxcbiAgICAgICAgJ1xceEIwJ1xuICAgICAgKSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7IHN0eWxlOiBzdHlsZXMuc3ltYm9sIH0sXG4gICAgICAgICclJ1xuICAgICAgKSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7IHN0eWxlOiBzdHlsZXMuc3ltYm9sIH0sXG4gICAgICAgICclJ1xuICAgICAgKVxuICAgIClcbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFBob3Rvc2hvcFBpY2tlcjsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHJlYWN0Q1NTIGZyb20gJ3JlYWN0Y3NzJztcblxuZXhwb3J0IHZhciBQaG90b3Nob3BQb2ludGVyQ2lyY2xlID0gZnVuY3Rpb24gUGhvdG9zaG9wUG9pbnRlckNpcmNsZShfcmVmKSB7XG4gIHZhciBoc2wgPSBfcmVmLmhzbDtcblxuICB2YXIgc3R5bGVzID0gcmVhY3RDU1Moe1xuICAgICdkZWZhdWx0Jzoge1xuICAgICAgcGlja2VyOiB7XG4gICAgICAgIHdpZHRoOiAnMTJweCcsXG4gICAgICAgIGhlaWdodDogJzEycHgnLFxuICAgICAgICBib3JkZXJSYWRpdXM6ICc2cHgnLFxuICAgICAgICBib3hTaGFkb3c6ICdpbnNldCAwIDAgMCAxcHggI2ZmZicsXG4gICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgtNnB4LCAtNnB4KSdcbiAgICAgIH1cbiAgICB9LFxuICAgICdibGFjay1vdXRsaW5lJzoge1xuICAgICAgcGlja2VyOiB7XG4gICAgICAgIGJveFNoYWRvdzogJ2luc2V0IDAgMCAwIDFweCAjMDAwJ1xuICAgICAgfVxuICAgIH1cbiAgfSwgeyAnYmxhY2stb3V0bGluZSc6IGhzbC5sID4gMC41IH0pO1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IHN0eWxlOiBzdHlsZXMucGlja2VyIH0pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgUGhvdG9zaG9wUG9pbnRlckNpcmNsZTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHJlYWN0Q1NTIGZyb20gJ3JlYWN0Y3NzJztcblxuZXhwb3J0IHZhciBQaG90b3Nob3BQb2ludGVyQ2lyY2xlID0gZnVuY3Rpb24gUGhvdG9zaG9wUG9pbnRlckNpcmNsZSgpIHtcbiAgdmFyIHN0eWxlcyA9IHJlYWN0Q1NTKHtcbiAgICAnZGVmYXVsdCc6IHtcbiAgICAgIHRyaWFuZ2xlOiB7XG4gICAgICAgIHdpZHRoOiAwLFxuICAgICAgICBoZWlnaHQ6IDAsXG4gICAgICAgIGJvcmRlclN0eWxlOiAnc29saWQnLFxuICAgICAgICBib3JkZXJXaWR0aDogJzRweCAwIDRweCA2cHgnLFxuICAgICAgICBib3JkZXJDb2xvcjogJ3RyYW5zcGFyZW50IHRyYW5zcGFyZW50IHRyYW5zcGFyZW50ICNmZmYnLFxuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgdG9wOiAnMXB4JyxcbiAgICAgICAgbGVmdDogJzFweCdcbiAgICAgIH0sXG4gICAgICB0cmlhbmdsZUJvcmRlcjoge1xuICAgICAgICB3aWR0aDogMCxcbiAgICAgICAgaGVpZ2h0OiAwLFxuICAgICAgICBib3JkZXJTdHlsZTogJ3NvbGlkJyxcbiAgICAgICAgYm9yZGVyV2lkdGg6ICc1cHggMCA1cHggOHB4JyxcbiAgICAgICAgYm9yZGVyQ29sb3I6ICd0cmFuc3BhcmVudCB0cmFuc3BhcmVudCB0cmFuc3BhcmVudCAjNTU1J1xuICAgICAgfSxcblxuICAgICAgbGVmdDoge1xuICAgICAgICBFeHRlbmQ6ICd0cmlhbmdsZUJvcmRlcicsXG4gICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgtMTNweCwgLTRweCknXG4gICAgICB9LFxuICAgICAgbGVmdEluc2lkZToge1xuICAgICAgICBFeHRlbmQ6ICd0cmlhbmdsZScsXG4gICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgtOHB4LCAtNXB4KSdcbiAgICAgIH0sXG5cbiAgICAgIHJpZ2h0OiB7XG4gICAgICAgIEV4dGVuZDogJ3RyaWFuZ2xlQm9yZGVyJyxcbiAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKDIwcHgsIC0xNHB4KSByb3RhdGUoMTgwZGVnKSdcbiAgICAgIH0sXG4gICAgICByaWdodEluc2lkZToge1xuICAgICAgICBFeHRlbmQ6ICd0cmlhbmdsZScsXG4gICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgtOHB4LCAtNXB4KSdcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICdkaXYnLFxuICAgIHsgc3R5bGU6IHN0eWxlcy5wb2ludGVyIH0sXG4gICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgeyBzdHlsZTogc3R5bGVzLmxlZnQgfSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgc3R5bGU6IHN0eWxlcy5sZWZ0SW5zaWRlIH0pXG4gICAgKSxcbiAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICB7IHN0eWxlOiBzdHlsZXMucmlnaHQgfSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgc3R5bGU6IHN0eWxlcy5yaWdodEluc2lkZSB9KVxuICAgIClcbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFBob3Rvc2hvcFBvaW50ZXJDaXJjbGU7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCByZWFjdENTUyBmcm9tICdyZWFjdGNzcyc7XG5cbmV4cG9ydCB2YXIgUGhvdG9zaG9wQnV0dG9uID0gZnVuY3Rpb24gUGhvdG9zaG9wQnV0dG9uKF9yZWYpIHtcbiAgdmFyIG9uQ2xpY2sgPSBfcmVmLm9uQ2xpY2ssXG4gICAgICBsYWJlbCA9IF9yZWYubGFiZWwsXG4gICAgICBjaGlsZHJlbiA9IF9yZWYuY2hpbGRyZW4sXG4gICAgICBhY3RpdmUgPSBfcmVmLmFjdGl2ZTtcblxuICB2YXIgc3R5bGVzID0gcmVhY3RDU1Moe1xuICAgICdkZWZhdWx0Jzoge1xuICAgICAgYnV0dG9uOiB7XG4gICAgICAgIGJhY2tncm91bmRJbWFnZTogJ2xpbmVhci1ncmFkaWVudCgtMTgwZGVnLCAjRkZGRkZGIDAlLCAjRTZFNkU2IDEwMCUpJyxcbiAgICAgICAgYm9yZGVyOiAnMXB4IHNvbGlkICM4Nzg3ODcnLFxuICAgICAgICBib3JkZXJSYWRpdXM6ICcycHgnLFxuICAgICAgICBoZWlnaHQ6ICcyMHB4JyxcbiAgICAgICAgYm94U2hhZG93OiAnMCAxcHggMCAwICNFQUVBRUEnLFxuICAgICAgICBmb250U2l6ZTogJzE0cHgnLFxuICAgICAgICBjb2xvcjogJyMwMDAnLFxuICAgICAgICBsaW5lSGVpZ2h0OiAnMjBweCcsXG4gICAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgICAgIG1hcmdpbkJvdHRvbTogJzEwcHgnLFxuICAgICAgICBjdXJzb3I6ICdwb2ludGVyJ1xuICAgICAgfVxuICAgIH0sXG4gICAgJ2FjdGl2ZSc6IHtcbiAgICAgIGJ1dHRvbjoge1xuICAgICAgICBib3hTaGFkb3c6ICcwIDAgMCAxcHggIzg3ODc4NydcbiAgICAgIH1cbiAgICB9XG4gIH0sIHsgYWN0aXZlOiBhY3RpdmUgfSk7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgJ2RpdicsXG4gICAgeyBzdHlsZTogc3R5bGVzLmJ1dHRvbiwgb25DbGljazogb25DbGljayB9LFxuICAgIGxhYmVsIHx8IGNoaWxkcmVuXG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBQaG90b3Nob3BCdXR0b247IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCByZWFjdENTUyBmcm9tICdyZWFjdGNzcyc7XG5cbmV4cG9ydCB2YXIgUGhvdG9zaG9wUHJldmlld3MgPSBmdW5jdGlvbiBQaG90b3Nob3BQcmV2aWV3cyhfcmVmKSB7XG4gIHZhciByZ2IgPSBfcmVmLnJnYixcbiAgICAgIGN1cnJlbnRDb2xvciA9IF9yZWYuY3VycmVudENvbG9yO1xuXG4gIHZhciBzdHlsZXMgPSByZWFjdENTUyh7XG4gICAgJ2RlZmF1bHQnOiB7XG4gICAgICBzd2F0Y2hlczoge1xuICAgICAgICBib3JkZXI6ICcxcHggc29saWQgI0IzQjNCMycsXG4gICAgICAgIGJvcmRlckJvdHRvbTogJzFweCBzb2xpZCAjRjBGMEYwJyxcbiAgICAgICAgbWFyZ2luQm90dG9tOiAnMnB4JyxcbiAgICAgICAgbWFyZ2luVG9wOiAnMXB4J1xuICAgICAgfSxcbiAgICAgIG5ldzoge1xuICAgICAgICBoZWlnaHQ6ICczNHB4JyxcbiAgICAgICAgYmFja2dyb3VuZDogJ3JnYignICsgcmdiLnIgKyAnLCcgKyByZ2IuZyArICcsICcgKyByZ2IuYiArICcpJyxcbiAgICAgICAgYm94U2hhZG93OiAnaW5zZXQgMXB4IDAgMCAjMDAwLCBpbnNldCAtMXB4IDAgMCAjMDAwLCBpbnNldCAwIDFweCAwICMwMDAnXG4gICAgICB9LFxuICAgICAgY3VycmVudDoge1xuICAgICAgICBoZWlnaHQ6ICczNHB4JyxcbiAgICAgICAgYmFja2dyb3VuZDogY3VycmVudENvbG9yLFxuICAgICAgICBib3hTaGFkb3c6ICdpbnNldCAxcHggMCAwICMwMDAsIGluc2V0IC0xcHggMCAwICMwMDAsIGluc2V0IDAgLTFweCAwICMwMDAnXG4gICAgICB9LFxuICAgICAgbGFiZWw6IHtcbiAgICAgICAgZm9udFNpemU6ICcxNHB4JyxcbiAgICAgICAgY29sb3I6ICcjMDAwJyxcbiAgICAgICAgdGV4dEFsaWduOiAnY2VudGVyJ1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgJ2RpdicsXG4gICAgbnVsbCxcbiAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICB7IHN0eWxlOiBzdHlsZXMubGFiZWwgfSxcbiAgICAgICduZXcnXG4gICAgKSxcbiAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICB7IHN0eWxlOiBzdHlsZXMuc3dhdGNoZXMgfSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgc3R5bGU6IHN0eWxlcy5uZXcgfSksXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IHN0eWxlOiBzdHlsZXMuY3VycmVudCB9KVxuICAgICksXG4gICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgeyBzdHlsZTogc3R5bGVzLmxhYmVsIH0sXG4gICAgICAnY3VycmVudCdcbiAgICApXG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBQaG90b3Nob3BQcmV2aWV3czsiLCJ2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHJlYWN0Q1NTIGZyb20gJ3JlYWN0Y3NzJztcbmltcG9ydCBtZXJnZSBmcm9tICdsb2Rhc2gtZXMvbWVyZ2UnO1xuXG5pbXBvcnQgeyBDb2xvcldyYXAsIFNhdHVyYXRpb24sIEh1ZSB9IGZyb20gJy4uL2NvbW1vbic7XG5pbXBvcnQgUGhvdG9zaG9wRmllbGRzIGZyb20gJy4vUGhvdG9zaG9wRmllbGRzJztcbmltcG9ydCBQaG90b3Nob3BQb2ludGVyQ2lyY2xlIGZyb20gJy4vUGhvdG9zaG9wUG9pbnRlckNpcmNsZSc7XG5pbXBvcnQgUGhvdG9zaG9wUG9pbnRlciBmcm9tICcuL1Bob3Rvc2hvcFBvaW50ZXInO1xuaW1wb3J0IFBob3Rvc2hvcEJ1dHRvbiBmcm9tICcuL1Bob3Rvc2hvcEJ1dHRvbic7XG5pbXBvcnQgUGhvdG9zaG9wUHJldmlld3MgZnJvbSAnLi9QaG90b3Nob3BQcmV2aWV3cyc7XG5cbmV4cG9ydCB2YXIgUGhvdG9zaG9wID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFBob3Rvc2hvcCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUGhvdG9zaG9wKHByb3BzKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBob3Rvc2hvcCk7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoUGhvdG9zaG9wLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoUGhvdG9zaG9wKSkuY2FsbCh0aGlzKSk7XG5cbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGN1cnJlbnRDb2xvcjogcHJvcHMuaGV4XG4gICAgfTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoUGhvdG9zaG9wLCBbe1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIF9wcm9wcyRzdHlsZXMgPSBfcHJvcHMuc3R5bGVzLFxuICAgICAgICAgIHBhc3NlZFN0eWxlcyA9IF9wcm9wcyRzdHlsZXMgPT09IHVuZGVmaW5lZCA/IHt9IDogX3Byb3BzJHN0eWxlcyxcbiAgICAgICAgICBfcHJvcHMkY2xhc3NOYW1lID0gX3Byb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgICBjbGFzc05hbWUgPSBfcHJvcHMkY2xhc3NOYW1lID09PSB1bmRlZmluZWQgPyAnJyA6IF9wcm9wcyRjbGFzc05hbWU7XG5cbiAgICAgIHZhciBzdHlsZXMgPSByZWFjdENTUyhtZXJnZSh7XG4gICAgICAgICdkZWZhdWx0Jzoge1xuICAgICAgICAgIHBpY2tlcjoge1xuICAgICAgICAgICAgYmFja2dyb3VuZDogJyNEQ0RDREMnLFxuICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiAnNHB4JyxcbiAgICAgICAgICAgIGJveFNoYWRvdzogJzAgMCAwIDFweCByZ2JhKDAsMCwwLC4yNSksIDAgOHB4IDE2cHggcmdiYSgwLDAsMCwuMTUpJyxcbiAgICAgICAgICAgIGJveFNpemluZzogJ2luaXRpYWwnLFxuICAgICAgICAgICAgd2lkdGg6ICc1MTNweCdcbiAgICAgICAgICB9LFxuICAgICAgICAgIGhlYWQ6IHtcbiAgICAgICAgICAgIGJhY2tncm91bmRJbWFnZTogJ2xpbmVhci1ncmFkaWVudCgtMTgwZGVnLCAjRjBGMEYwIDAlLCAjRDRENEQ0IDEwMCUpJyxcbiAgICAgICAgICAgIGJvcmRlckJvdHRvbTogJzFweCBzb2xpZCAjQjFCMUIxJyxcbiAgICAgICAgICAgIGJveFNoYWRvdzogJ2luc2V0IDAgMXB4IDAgMCByZ2JhKDI1NSwyNTUsMjU1LC4yKSwgaW5zZXQgMCAtMXB4IDAgMCByZ2JhKDAsMCwwLC4wMiknLFxuICAgICAgICAgICAgaGVpZ2h0OiAnMjNweCcsXG4gICAgICAgICAgICBsaW5lSGVpZ2h0OiAnMjRweCcsXG4gICAgICAgICAgICBib3JkZXJSYWRpdXM6ICc0cHggNHB4IDAgMCcsXG4gICAgICAgICAgICBmb250U2l6ZTogJzEzcHgnLFxuICAgICAgICAgICAgY29sb3I6ICcjNEQ0RDREJyxcbiAgICAgICAgICAgIHRleHRBbGlnbjogJ2NlbnRlcidcbiAgICAgICAgICB9LFxuICAgICAgICAgIGJvZHk6IHtcbiAgICAgICAgICAgIHBhZGRpbmc6ICcxNXB4IDE1cHggMCcsXG4gICAgICAgICAgICBkaXNwbGF5OiAnZmxleCdcbiAgICAgICAgICB9LFxuICAgICAgICAgIHNhdHVyYXRpb246IHtcbiAgICAgICAgICAgIHdpZHRoOiAnMjU2cHgnLFxuICAgICAgICAgICAgaGVpZ2h0OiAnMjU2cHgnLFxuICAgICAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgICAgICBib3JkZXI6ICcycHggc29saWQgI0IzQjNCMycsXG4gICAgICAgICAgICBib3JkZXJCb3R0b206ICcycHggc29saWQgI0YwRjBGMCcsXG4gICAgICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbidcbiAgICAgICAgICB9LFxuICAgICAgICAgIGh1ZToge1xuICAgICAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgICAgICBoZWlnaHQ6ICcyNTZweCcsXG4gICAgICAgICAgICB3aWR0aDogJzE5cHgnLFxuICAgICAgICAgICAgbWFyZ2luTGVmdDogJzEwcHgnLFxuICAgICAgICAgICAgYm9yZGVyOiAnMnB4IHNvbGlkICNCM0IzQjMnLFxuICAgICAgICAgICAgYm9yZGVyQm90dG9tOiAnMnB4IHNvbGlkICNGMEYwRjAnXG4gICAgICAgICAgfSxcbiAgICAgICAgICBjb250cm9sczoge1xuICAgICAgICAgICAgd2lkdGg6ICcxODBweCcsXG4gICAgICAgICAgICBtYXJnaW5MZWZ0OiAnMTBweCdcbiAgICAgICAgICB9LFxuICAgICAgICAgIHRvcDoge1xuICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnXG4gICAgICAgICAgfSxcbiAgICAgICAgICBwcmV2aWV3czoge1xuICAgICAgICAgICAgd2lkdGg6ICc2MHB4J1xuICAgICAgICAgIH0sXG4gICAgICAgICAgYWN0aW9uczoge1xuICAgICAgICAgICAgZmxleDogJzEnLFxuICAgICAgICAgICAgbWFyZ2luTGVmdDogJzIwcHgnXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LCBwYXNzZWRTdHlsZXMpKTtcblxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7IHN0eWxlOiBzdHlsZXMucGlja2VyLCBjbGFzc05hbWU6ICdwaG90b3Nob3AtcGlja2VyICcgKyBjbGFzc05hbWUgfSxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuaGVhZCB9LFxuICAgICAgICAgIHRoaXMucHJvcHMuaGVhZGVyXG4gICAgICAgICksXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmJvZHksIGNsYXNzTmFtZTogJ2ZsZXhib3gtZml4JyB9LFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy5zYXR1cmF0aW9uIH0sXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFNhdHVyYXRpb24sIHtcbiAgICAgICAgICAgICAgaHNsOiB0aGlzLnByb3BzLmhzbCxcbiAgICAgICAgICAgICAgaHN2OiB0aGlzLnByb3BzLmhzdixcbiAgICAgICAgICAgICAgcG9pbnRlcjogUGhvdG9zaG9wUG9pbnRlckNpcmNsZSxcbiAgICAgICAgICAgICAgb25DaGFuZ2U6IHRoaXMucHJvcHMub25DaGFuZ2VcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgKSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuaHVlIH0sXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KEh1ZSwge1xuICAgICAgICAgICAgICBkaXJlY3Rpb246ICd2ZXJ0aWNhbCcsXG4gICAgICAgICAgICAgIGhzbDogdGhpcy5wcm9wcy5oc2wsXG4gICAgICAgICAgICAgIHBvaW50ZXI6IFBob3Rvc2hvcFBvaW50ZXIsXG4gICAgICAgICAgICAgIG9uQ2hhbmdlOiB0aGlzLnByb3BzLm9uQ2hhbmdlXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICksXG4gICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmNvbnRyb2xzIH0sXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLnRvcCwgY2xhc3NOYW1lOiAnZmxleGJveC1maXgnIH0sXG4gICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLnByZXZpZXdzIH0sXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChQaG90b3Nob3BQcmV2aWV3cywge1xuICAgICAgICAgICAgICAgICAgcmdiOiB0aGlzLnByb3BzLnJnYixcbiAgICAgICAgICAgICAgICAgIGN1cnJlbnRDb2xvcjogdGhpcy5zdGF0ZS5jdXJyZW50Q29sb3JcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy5hY3Rpb25zIH0sXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChQaG90b3Nob3BCdXR0b24sIHsgbGFiZWw6ICdPSycsIG9uQ2xpY2s6IHRoaXMucHJvcHMub25BY2NlcHQsIGFjdGl2ZTogdHJ1ZSB9KSxcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFBob3Rvc2hvcEJ1dHRvbiwgeyBsYWJlbDogJ0NhbmNlbCcsIG9uQ2xpY2s6IHRoaXMucHJvcHMub25DYW5jZWwgfSksXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChQaG90b3Nob3BGaWVsZHMsIHtcbiAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlOiB0aGlzLnByb3BzLm9uQ2hhbmdlLFxuICAgICAgICAgICAgICAgICAgcmdiOiB0aGlzLnByb3BzLnJnYixcbiAgICAgICAgICAgICAgICAgIGhzdjogdGhpcy5wcm9wcy5oc3YsXG4gICAgICAgICAgICAgICAgICBoZXg6IHRoaXMucHJvcHMuaGV4XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKVxuICAgICAgICAgIClcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUGhvdG9zaG9wO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5QaG90b3Nob3AucHJvcFR5cGVzID0ge1xuICBoZWFkZXI6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHN0eWxlczogUHJvcFR5cGVzLm9iamVjdFxufTtcblxuUGhvdG9zaG9wLmRlZmF1bHRQcm9wcyA9IHtcbiAgaGVhZGVyOiAnQ29sb3IgUGlja2VyJyxcbiAgc3R5bGVzOiB7fVxufTtcblxuZXhwb3J0IGRlZmF1bHQgQ29sb3JXcmFwKFBob3Rvc2hvcCk7IiwiLyogZXNsaW50LWRpc2FibGUgbm8tcGFyYW0tcmVhc3NpZ24gKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCByZWFjdENTUyBmcm9tICdyZWFjdGNzcyc7XG5pbXBvcnQgKiBhcyBjb2xvciBmcm9tICcuLi8uLi9oZWxwZXJzL2NvbG9yJztcblxuaW1wb3J0IHsgRWRpdGFibGVJbnB1dCB9IGZyb20gJy4uL2NvbW1vbic7XG5cbmV4cG9ydCB2YXIgU2tldGNoRmllbGRzID0gZnVuY3Rpb24gU2tldGNoRmllbGRzKF9yZWYpIHtcbiAgdmFyIG9uQ2hhbmdlID0gX3JlZi5vbkNoYW5nZSxcbiAgICAgIHJnYiA9IF9yZWYucmdiLFxuICAgICAgaHNsID0gX3JlZi5oc2wsXG4gICAgICBoZXggPSBfcmVmLmhleCxcbiAgICAgIGRpc2FibGVBbHBoYSA9IF9yZWYuZGlzYWJsZUFscGhhO1xuXG4gIHZhciBzdHlsZXMgPSByZWFjdENTUyh7XG4gICAgJ2RlZmF1bHQnOiB7XG4gICAgICBmaWVsZHM6IHtcbiAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICBwYWRkaW5nVG9wOiAnNHB4J1xuICAgICAgfSxcbiAgICAgIHNpbmdsZToge1xuICAgICAgICBmbGV4OiAnMScsXG4gICAgICAgIHBhZGRpbmdMZWZ0OiAnNnB4J1xuICAgICAgfSxcbiAgICAgIGFscGhhOiB7XG4gICAgICAgIGZsZXg6ICcxJyxcbiAgICAgICAgcGFkZGluZ0xlZnQ6ICc2cHgnXG4gICAgICB9LFxuICAgICAgZG91YmxlOiB7XG4gICAgICAgIGZsZXg6ICcyJ1xuICAgICAgfSxcbiAgICAgIGlucHV0OiB7XG4gICAgICAgIHdpZHRoOiAnODAlJyxcbiAgICAgICAgcGFkZGluZzogJzRweCAxMCUgM3B4JyxcbiAgICAgICAgYm9yZGVyOiAnbm9uZScsXG4gICAgICAgIGJveFNoYWRvdzogJ2luc2V0IDAgMCAwIDFweCAjY2NjJyxcbiAgICAgICAgZm9udFNpemU6ICcxMXB4J1xuICAgICAgfSxcbiAgICAgIGxhYmVsOiB7XG4gICAgICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgICAgIGZvbnRTaXplOiAnMTFweCcsXG4gICAgICAgIGNvbG9yOiAnIzIyMicsXG4gICAgICAgIHBhZGRpbmdUb3A6ICczcHgnLFxuICAgICAgICBwYWRkaW5nQm90dG9tOiAnNHB4JyxcbiAgICAgICAgdGV4dFRyYW5zZm9ybTogJ2NhcGl0YWxpemUnXG4gICAgICB9XG4gICAgfSxcbiAgICAnZGlzYWJsZUFscGhhJzoge1xuICAgICAgYWxwaGE6IHtcbiAgICAgICAgZGlzcGxheTogJ25vbmUnXG4gICAgICB9XG4gICAgfVxuICB9LCB7IGRpc2FibGVBbHBoYTogZGlzYWJsZUFscGhhIH0pO1xuXG4gIHZhciBoYW5kbGVDaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVDaGFuZ2UoZGF0YSwgZSkge1xuICAgIGlmIChkYXRhLmhleCkge1xuICAgICAgY29sb3IuaXNWYWxpZEhleChkYXRhLmhleCkgJiYgb25DaGFuZ2Uoe1xuICAgICAgICBoZXg6IGRhdGEuaGV4LFxuICAgICAgICBzb3VyY2U6ICdoZXgnXG4gICAgICB9LCBlKTtcbiAgICB9IGVsc2UgaWYgKGRhdGEuciB8fCBkYXRhLmcgfHwgZGF0YS5iKSB7XG4gICAgICBvbkNoYW5nZSh7XG4gICAgICAgIHI6IGRhdGEuciB8fCByZ2IucixcbiAgICAgICAgZzogZGF0YS5nIHx8IHJnYi5nLFxuICAgICAgICBiOiBkYXRhLmIgfHwgcmdiLmIsXG4gICAgICAgIGE6IHJnYi5hLFxuICAgICAgICBzb3VyY2U6ICdyZ2InXG4gICAgICB9LCBlKTtcbiAgICB9IGVsc2UgaWYgKGRhdGEuYSkge1xuICAgICAgaWYgKGRhdGEuYSA8IDApIHtcbiAgICAgICAgZGF0YS5hID0gMDtcbiAgICAgIH0gZWxzZSBpZiAoZGF0YS5hID4gMTAwKSB7XG4gICAgICAgIGRhdGEuYSA9IDEwMDtcbiAgICAgIH1cblxuICAgICAgZGF0YS5hIC89IDEwMDtcbiAgICAgIG9uQ2hhbmdlKHtcbiAgICAgICAgaDogaHNsLmgsXG4gICAgICAgIHM6IGhzbC5zLFxuICAgICAgICBsOiBoc2wubCxcbiAgICAgICAgYTogZGF0YS5hLFxuICAgICAgICBzb3VyY2U6ICdyZ2InXG4gICAgICB9LCBlKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgJ2RpdicsXG4gICAgeyBzdHlsZTogc3R5bGVzLmZpZWxkcywgY2xhc3NOYW1lOiAnZmxleGJveC1maXgnIH0sXG4gICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgeyBzdHlsZTogc3R5bGVzLmRvdWJsZSB9LFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChFZGl0YWJsZUlucHV0LCB7XG4gICAgICAgIHN0eWxlOiB7IGlucHV0OiBzdHlsZXMuaW5wdXQsIGxhYmVsOiBzdHlsZXMubGFiZWwgfSxcbiAgICAgICAgbGFiZWw6ICdoZXgnLFxuICAgICAgICB2YWx1ZTogaGV4LnJlcGxhY2UoJyMnLCAnJyksXG4gICAgICAgIG9uQ2hhbmdlOiBoYW5kbGVDaGFuZ2VcbiAgICAgIH0pXG4gICAgKSxcbiAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICB7IHN0eWxlOiBzdHlsZXMuc2luZ2xlIH0sXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KEVkaXRhYmxlSW5wdXQsIHtcbiAgICAgICAgc3R5bGU6IHsgaW5wdXQ6IHN0eWxlcy5pbnB1dCwgbGFiZWw6IHN0eWxlcy5sYWJlbCB9LFxuICAgICAgICBsYWJlbDogJ3InLFxuICAgICAgICB2YWx1ZTogcmdiLnIsXG4gICAgICAgIG9uQ2hhbmdlOiBoYW5kbGVDaGFuZ2UsXG4gICAgICAgIGRyYWdMYWJlbDogJ3RydWUnLFxuICAgICAgICBkcmFnTWF4OiAnMjU1J1xuICAgICAgfSlcbiAgICApLFxuICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIHsgc3R5bGU6IHN0eWxlcy5zaW5nbGUgfSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWRpdGFibGVJbnB1dCwge1xuICAgICAgICBzdHlsZTogeyBpbnB1dDogc3R5bGVzLmlucHV0LCBsYWJlbDogc3R5bGVzLmxhYmVsIH0sXG4gICAgICAgIGxhYmVsOiAnZycsXG4gICAgICAgIHZhbHVlOiByZ2IuZyxcbiAgICAgICAgb25DaGFuZ2U6IGhhbmRsZUNoYW5nZSxcbiAgICAgICAgZHJhZ0xhYmVsOiAndHJ1ZScsXG4gICAgICAgIGRyYWdNYXg6ICcyNTUnXG4gICAgICB9KVxuICAgICksXG4gICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgeyBzdHlsZTogc3R5bGVzLnNpbmdsZSB9LFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChFZGl0YWJsZUlucHV0LCB7XG4gICAgICAgIHN0eWxlOiB7IGlucHV0OiBzdHlsZXMuaW5wdXQsIGxhYmVsOiBzdHlsZXMubGFiZWwgfSxcbiAgICAgICAgbGFiZWw6ICdiJyxcbiAgICAgICAgdmFsdWU6IHJnYi5iLFxuICAgICAgICBvbkNoYW5nZTogaGFuZGxlQ2hhbmdlLFxuICAgICAgICBkcmFnTGFiZWw6ICd0cnVlJyxcbiAgICAgICAgZHJhZ01heDogJzI1NSdcbiAgICAgIH0pXG4gICAgKSxcbiAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICB7IHN0eWxlOiBzdHlsZXMuYWxwaGEgfSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWRpdGFibGVJbnB1dCwge1xuICAgICAgICBzdHlsZTogeyBpbnB1dDogc3R5bGVzLmlucHV0LCBsYWJlbDogc3R5bGVzLmxhYmVsIH0sXG4gICAgICAgIGxhYmVsOiAnYScsXG4gICAgICAgIHZhbHVlOiBNYXRoLnJvdW5kKHJnYi5hICogMTAwKSxcbiAgICAgICAgb25DaGFuZ2U6IGhhbmRsZUNoYW5nZSxcbiAgICAgICAgZHJhZ0xhYmVsOiAndHJ1ZScsXG4gICAgICAgIGRyYWdNYXg6ICcxMDAnXG4gICAgICB9KVxuICAgIClcbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFNrZXRjaEZpZWxkczsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCByZWFjdENTUyBmcm9tICdyZWFjdGNzcyc7XG5cbmltcG9ydCB7IFN3YXRjaCB9IGZyb20gJy4uL2NvbW1vbic7XG5cbmV4cG9ydCB2YXIgU2tldGNoUHJlc2V0Q29sb3JzID0gZnVuY3Rpb24gU2tldGNoUHJlc2V0Q29sb3JzKF9yZWYpIHtcbiAgdmFyIGNvbG9ycyA9IF9yZWYuY29sb3JzLFxuICAgICAgX3JlZiRvbkNsaWNrID0gX3JlZi5vbkNsaWNrLFxuICAgICAgb25DbGljayA9IF9yZWYkb25DbGljayA9PT0gdW5kZWZpbmVkID8gZnVuY3Rpb24gKCkge30gOiBfcmVmJG9uQ2xpY2ssXG4gICAgICBvblN3YXRjaEhvdmVyID0gX3JlZi5vblN3YXRjaEhvdmVyO1xuXG4gIHZhciBzdHlsZXMgPSByZWFjdENTUyh7XG4gICAgJ2RlZmF1bHQnOiB7XG4gICAgICBjb2xvcnM6IHtcbiAgICAgICAgbWFyZ2luOiAnMCAtMTBweCcsXG4gICAgICAgIHBhZGRpbmc6ICcxMHB4IDAgMCAxMHB4JyxcbiAgICAgICAgYm9yZGVyVG9wOiAnMXB4IHNvbGlkICNlZWUnLFxuICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgIGZsZXhXcmFwOiAnd3JhcCcsXG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnXG4gICAgICB9LFxuICAgICAgc3dhdGNoV3JhcDoge1xuICAgICAgICB3aWR0aDogJzE2cHgnLFxuICAgICAgICBoZWlnaHQ6ICcxNnB4JyxcbiAgICAgICAgbWFyZ2luOiAnMCAxMHB4IDEwcHggMCdcbiAgICAgIH0sXG4gICAgICBzd2F0Y2g6IHtcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAnM3B4JyxcbiAgICAgICAgYm94U2hhZG93OiAnaW5zZXQgMCAwIDAgMXB4IHJnYmEoMCwwLDAsLjE1KSdcbiAgICAgIH1cbiAgICB9LFxuICAgICduby1wcmVzZXRzJzoge1xuICAgICAgY29sb3JzOiB7XG4gICAgICAgIGRpc3BsYXk6ICdub25lJ1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgICduby1wcmVzZXRzJzogIWNvbG9ycyB8fCAhY29sb3JzLmxlbmd0aFxuICB9KTtcblxuICB2YXIgaGFuZGxlQ2xpY2sgPSBmdW5jdGlvbiBoYW5kbGVDbGljayhoZXgsIGUpIHtcbiAgICBvbkNsaWNrKHtcbiAgICAgIGhleDogaGV4LFxuICAgICAgc291cmNlOiAnaGV4J1xuICAgIH0sIGUpO1xuICB9O1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICdkaXYnLFxuICAgIHsgc3R5bGU6IHN0eWxlcy5jb2xvcnMsIGNsYXNzTmFtZTogJ2ZsZXhib3gtZml4JyB9LFxuICAgIGNvbG9ycy5tYXAoZnVuY3Rpb24gKGNvbG9yT2JqT3JTdHJpbmcpIHtcbiAgICAgIHZhciBjID0gdHlwZW9mIGNvbG9yT2JqT3JTdHJpbmcgPT09ICdzdHJpbmcnID8geyBjb2xvcjogY29sb3JPYmpPclN0cmluZyB9IDogY29sb3JPYmpPclN0cmluZztcbiAgICAgIHZhciBrZXkgPSAnJyArIGMuY29sb3IgKyAoYy50aXRsZSB8fCAnJyk7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHsga2V5OiBrZXksIHN0eWxlOiBzdHlsZXMuc3dhdGNoV3JhcCB9LFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFN3YXRjaCwgX2V4dGVuZHMoe30sIGMsIHtcbiAgICAgICAgICBzdHlsZTogc3R5bGVzLnN3YXRjaCxcbiAgICAgICAgICBvbkNsaWNrOiBoYW5kbGVDbGljayxcbiAgICAgICAgICBvbkhvdmVyOiBvblN3YXRjaEhvdmVyLFxuICAgICAgICAgIGZvY3VzU3R5bGU6IHtcbiAgICAgICAgICAgIGJveFNoYWRvdzogJ2luc2V0IDAgMCAwIDFweCByZ2JhKDAsMCwwLC4xNSksIDAgMCA0cHggJyArIGMuY29sb3JcbiAgICAgICAgICB9XG4gICAgICAgIH0pKVxuICAgICAgKTtcbiAgICB9KVxuICApO1xufTtcblxuU2tldGNoUHJlc2V0Q29sb3JzLnByb3BUeXBlcyA9IHtcbiAgY29sb3JzOiBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGNvbG9yOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHRpdGxlOiBQcm9wVHlwZXMuc3RyaW5nXG4gIH0pXSkpLmlzUmVxdWlyZWRcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFNrZXRjaFByZXNldENvbG9yczsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCByZWFjdENTUyBmcm9tICdyZWFjdGNzcyc7XG5pbXBvcnQgbWVyZ2UgZnJvbSAnbG9kYXNoLWVzL21lcmdlJztcblxuaW1wb3J0IHsgQ29sb3JXcmFwLCBTYXR1cmF0aW9uLCBIdWUsIEFscGhhLCBDaGVja2JvYXJkIH0gZnJvbSAnLi4vY29tbW9uJztcbmltcG9ydCBTa2V0Y2hGaWVsZHMgZnJvbSAnLi9Ta2V0Y2hGaWVsZHMnO1xuaW1wb3J0IFNrZXRjaFByZXNldENvbG9ycyBmcm9tICcuL1NrZXRjaFByZXNldENvbG9ycyc7XG5cbmV4cG9ydCB2YXIgU2tldGNoID0gZnVuY3Rpb24gU2tldGNoKF9yZWYpIHtcbiAgdmFyIHdpZHRoID0gX3JlZi53aWR0aCxcbiAgICAgIHJnYiA9IF9yZWYucmdiLFxuICAgICAgaGV4ID0gX3JlZi5oZXgsXG4gICAgICBoc3YgPSBfcmVmLmhzdixcbiAgICAgIGhzbCA9IF9yZWYuaHNsLFxuICAgICAgb25DaGFuZ2UgPSBfcmVmLm9uQ2hhbmdlLFxuICAgICAgb25Td2F0Y2hIb3ZlciA9IF9yZWYub25Td2F0Y2hIb3ZlcixcbiAgICAgIGRpc2FibGVBbHBoYSA9IF9yZWYuZGlzYWJsZUFscGhhLFxuICAgICAgcHJlc2V0Q29sb3JzID0gX3JlZi5wcmVzZXRDb2xvcnMsXG4gICAgICByZW5kZXJlcnMgPSBfcmVmLnJlbmRlcmVycyxcbiAgICAgIF9yZWYkc3R5bGVzID0gX3JlZi5zdHlsZXMsXG4gICAgICBwYXNzZWRTdHlsZXMgPSBfcmVmJHN0eWxlcyA9PT0gdW5kZWZpbmVkID8ge30gOiBfcmVmJHN0eWxlcyxcbiAgICAgIF9yZWYkY2xhc3NOYW1lID0gX3JlZi5jbGFzc05hbWUsXG4gICAgICBjbGFzc05hbWUgPSBfcmVmJGNsYXNzTmFtZSA9PT0gdW5kZWZpbmVkID8gJycgOiBfcmVmJGNsYXNzTmFtZTtcblxuICB2YXIgc3R5bGVzID0gcmVhY3RDU1MobWVyZ2Uoe1xuICAgICdkZWZhdWx0JzogX2V4dGVuZHMoe1xuICAgICAgcGlja2VyOiB7XG4gICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgcGFkZGluZzogJzEwcHggMTBweCAwJyxcbiAgICAgICAgYm94U2l6aW5nOiAnaW5pdGlhbCcsXG4gICAgICAgIGJhY2tncm91bmQ6ICcjZmZmJyxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAnNHB4JyxcbiAgICAgICAgYm94U2hhZG93OiAnMCAwIDAgMXB4IHJnYmEoMCwwLDAsLjE1KSwgMCA4cHggMTZweCByZ2JhKDAsMCwwLC4xNSknXG4gICAgICB9LFxuICAgICAgc2F0dXJhdGlvbjoge1xuICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICBwYWRkaW5nQm90dG9tOiAnNzUlJyxcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgIG92ZXJmbG93OiAnaGlkZGVuJ1xuICAgICAgfSxcbiAgICAgIFNhdHVyYXRpb246IHtcbiAgICAgICAgcmFkaXVzOiAnM3B4JyxcbiAgICAgICAgc2hhZG93OiAnaW5zZXQgMCAwIDAgMXB4IHJnYmEoMCwwLDAsLjE1KSwgaW5zZXQgMCAwIDRweCByZ2JhKDAsMCwwLC4yNSknXG4gICAgICB9LFxuICAgICAgY29udHJvbHM6IHtcbiAgICAgICAgZGlzcGxheTogJ2ZsZXgnXG4gICAgICB9LFxuICAgICAgc2xpZGVyczoge1xuICAgICAgICBwYWRkaW5nOiAnNHB4IDAnLFxuICAgICAgICBmbGV4OiAnMSdcbiAgICAgIH0sXG4gICAgICBjb2xvcjoge1xuICAgICAgICB3aWR0aDogJzI0cHgnLFxuICAgICAgICBoZWlnaHQ6ICcyNHB4JyxcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgIG1hcmdpblRvcDogJzRweCcsXG4gICAgICAgIG1hcmdpbkxlZnQ6ICc0cHgnLFxuICAgICAgICBib3JkZXJSYWRpdXM6ICczcHgnXG4gICAgICB9LFxuICAgICAgYWN0aXZlQ29sb3I6IHtcbiAgICAgICAgYWJzb2x1dGU6ICcwcHggMHB4IDBweCAwcHgnLFxuICAgICAgICBib3JkZXJSYWRpdXM6ICcycHgnLFxuICAgICAgICBiYWNrZ3JvdW5kOiAncmdiYSgnICsgcmdiLnIgKyAnLCcgKyByZ2IuZyArICcsJyArIHJnYi5iICsgJywnICsgcmdiLmEgKyAnKScsXG4gICAgICAgIGJveFNoYWRvdzogJ2luc2V0IDAgMCAwIDFweCByZ2JhKDAsMCwwLC4xNSksIGluc2V0IDAgMCA0cHggcmdiYSgwLDAsMCwuMjUpJ1xuICAgICAgfSxcbiAgICAgIGh1ZToge1xuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgaGVpZ2h0OiAnMTBweCcsXG4gICAgICAgIG92ZXJmbG93OiAnaGlkZGVuJ1xuICAgICAgfSxcbiAgICAgIEh1ZToge1xuICAgICAgICByYWRpdXM6ICcycHgnLFxuICAgICAgICBzaGFkb3c6ICdpbnNldCAwIDAgMCAxcHggcmdiYSgwLDAsMCwuMTUpLCBpbnNldCAwIDAgNHB4IHJnYmEoMCwwLDAsLjI1KSdcbiAgICAgIH0sXG5cbiAgICAgIGFscGhhOiB7XG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICBoZWlnaHQ6ICcxMHB4JyxcbiAgICAgICAgbWFyZ2luVG9wOiAnNHB4JyxcbiAgICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nXG4gICAgICB9LFxuICAgICAgQWxwaGE6IHtcbiAgICAgICAgcmFkaXVzOiAnMnB4JyxcbiAgICAgICAgc2hhZG93OiAnaW5zZXQgMCAwIDAgMXB4IHJnYmEoMCwwLDAsLjE1KSwgaW5zZXQgMCAwIDRweCByZ2JhKDAsMCwwLC4yNSknXG4gICAgICB9XG4gICAgfSwgcGFzc2VkU3R5bGVzKSxcbiAgICAnZGlzYWJsZUFscGhhJzoge1xuICAgICAgY29sb3I6IHtcbiAgICAgICAgaGVpZ2h0OiAnMTBweCdcbiAgICAgIH0sXG4gICAgICBodWU6IHtcbiAgICAgICAgaGVpZ2h0OiAnMTBweCdcbiAgICAgIH0sXG4gICAgICBhbHBoYToge1xuICAgICAgICBkaXNwbGF5OiAnbm9uZSdcbiAgICAgIH1cbiAgICB9XG4gIH0sIHBhc3NlZFN0eWxlcyksIHsgZGlzYWJsZUFscGhhOiBkaXNhYmxlQWxwaGEgfSk7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgJ2RpdicsXG4gICAgeyBzdHlsZTogc3R5bGVzLnBpY2tlciwgY2xhc3NOYW1lOiAnc2tldGNoLXBpY2tlciAnICsgY2xhc3NOYW1lIH0sXG4gICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgeyBzdHlsZTogc3R5bGVzLnNhdHVyYXRpb24gfSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoU2F0dXJhdGlvbiwge1xuICAgICAgICBzdHlsZTogc3R5bGVzLlNhdHVyYXRpb24sXG4gICAgICAgIGhzbDogaHNsLFxuICAgICAgICBoc3Y6IGhzdixcbiAgICAgICAgb25DaGFuZ2U6IG9uQ2hhbmdlXG4gICAgICB9KVxuICAgICksXG4gICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgeyBzdHlsZTogc3R5bGVzLmNvbnRyb2xzLCBjbGFzc05hbWU6ICdmbGV4Ym94LWZpeCcgfSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7IHN0eWxlOiBzdHlsZXMuc2xpZGVycyB9LFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdkaXYnLFxuICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy5odWUgfSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KEh1ZSwge1xuICAgICAgICAgICAgc3R5bGU6IHN0eWxlcy5IdWUsXG4gICAgICAgICAgICBoc2w6IGhzbCxcbiAgICAgICAgICAgIG9uQ2hhbmdlOiBvbkNoYW5nZVxuICAgICAgICAgIH0pXG4gICAgICAgICksXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmFscGhhIH0sXG4gICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChBbHBoYSwge1xuICAgICAgICAgICAgc3R5bGU6IHN0eWxlcy5BbHBoYSxcbiAgICAgICAgICAgIHJnYjogcmdiLFxuICAgICAgICAgICAgaHNsOiBoc2wsXG4gICAgICAgICAgICByZW5kZXJlcnM6IHJlbmRlcmVycyxcbiAgICAgICAgICAgIG9uQ2hhbmdlOiBvbkNoYW5nZVxuICAgICAgICAgIH0pXG4gICAgICAgIClcbiAgICAgICksXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgeyBzdHlsZTogc3R5bGVzLmNvbG9yIH0sXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ2hlY2tib2FyZCwgbnVsbCksXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgc3R5bGU6IHN0eWxlcy5hY3RpdmVDb2xvciB9KVxuICAgICAgKVxuICAgICksXG4gICAgUmVhY3QuY3JlYXRlRWxlbWVudChTa2V0Y2hGaWVsZHMsIHtcbiAgICAgIHJnYjogcmdiLFxuICAgICAgaHNsOiBoc2wsXG4gICAgICBoZXg6IGhleCxcbiAgICAgIG9uQ2hhbmdlOiBvbkNoYW5nZSxcbiAgICAgIGRpc2FibGVBbHBoYTogZGlzYWJsZUFscGhhXG4gICAgfSksXG4gICAgUmVhY3QuY3JlYXRlRWxlbWVudChTa2V0Y2hQcmVzZXRDb2xvcnMsIHtcbiAgICAgIGNvbG9yczogcHJlc2V0Q29sb3JzLFxuICAgICAgb25DbGljazogb25DaGFuZ2UsXG4gICAgICBvblN3YXRjaEhvdmVyOiBvblN3YXRjaEhvdmVyXG4gICAgfSlcbiAgKTtcbn07XG5cblNrZXRjaC5wcm9wVHlwZXMgPSB7XG4gIGRpc2FibGVBbHBoYTogUHJvcFR5cGVzLmJvb2wsXG4gIHdpZHRoOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMubnVtYmVyXSksXG4gIHN0eWxlczogUHJvcFR5cGVzLm9iamVjdFxufTtcblxuU2tldGNoLmRlZmF1bHRQcm9wcyA9IHtcbiAgZGlzYWJsZUFscGhhOiBmYWxzZSxcbiAgd2lkdGg6IDIwMCxcbiAgc3R5bGVzOiB7fSxcbiAgcHJlc2V0Q29sb3JzOiBbJyNEMDAyMUInLCAnI0Y1QTYyMycsICcjRjhFNzFDJywgJyM4QjU3MkEnLCAnIzdFRDMyMScsICcjNDE3NTA1JywgJyNCRDEwRTAnLCAnIzkwMTNGRScsICcjNEE5MEUyJywgJyM1MEUzQzInLCAnI0I4RTk4NicsICcjMDAwMDAwJywgJyM0QTRBNEEnLCAnIzlCOUI5QicsICcjRkZGRkZGJ11cbn07XG5cbmV4cG9ydCBkZWZhdWx0IENvbG9yV3JhcChTa2V0Y2gpOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgcmVhY3RDU1MgZnJvbSAncmVhY3Rjc3MnO1xuXG5leHBvcnQgdmFyIFNsaWRlclN3YXRjaCA9IGZ1bmN0aW9uIFNsaWRlclN3YXRjaChfcmVmKSB7XG4gIHZhciBoc2wgPSBfcmVmLmhzbCxcbiAgICAgIG9mZnNldCA9IF9yZWYub2Zmc2V0LFxuICAgICAgX3JlZiRvbkNsaWNrID0gX3JlZi5vbkNsaWNrLFxuICAgICAgb25DbGljayA9IF9yZWYkb25DbGljayA9PT0gdW5kZWZpbmVkID8gZnVuY3Rpb24gKCkge30gOiBfcmVmJG9uQ2xpY2ssXG4gICAgICBhY3RpdmUgPSBfcmVmLmFjdGl2ZSxcbiAgICAgIGZpcnN0ID0gX3JlZi5maXJzdCxcbiAgICAgIGxhc3QgPSBfcmVmLmxhc3Q7XG5cbiAgdmFyIHN0eWxlcyA9IHJlYWN0Q1NTKHtcbiAgICAnZGVmYXVsdCc6IHtcbiAgICAgIHN3YXRjaDoge1xuICAgICAgICBoZWlnaHQ6ICcxMnB4JyxcbiAgICAgICAgYmFja2dyb3VuZDogJ2hzbCgnICsgaHNsLmggKyAnLCA1MCUsICcgKyBvZmZzZXQgKiAxMDAgKyAnJSknLFxuICAgICAgICBjdXJzb3I6ICdwb2ludGVyJ1xuICAgICAgfVxuICAgIH0sXG4gICAgJ2ZpcnN0Jzoge1xuICAgICAgc3dhdGNoOiB7XG4gICAgICAgIGJvcmRlclJhZGl1czogJzJweCAwIDAgMnB4J1xuICAgICAgfVxuICAgIH0sXG4gICAgJ2xhc3QnOiB7XG4gICAgICBzd2F0Y2g6IHtcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAnMCAycHggMnB4IDAnXG4gICAgICB9XG4gICAgfSxcbiAgICAnYWN0aXZlJzoge1xuICAgICAgc3dhdGNoOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlWSgxLjgpJyxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAnMy42cHgvMnB4J1xuICAgICAgfVxuICAgIH1cbiAgfSwgeyBhY3RpdmU6IGFjdGl2ZSwgZmlyc3Q6IGZpcnN0LCBsYXN0OiBsYXN0IH0pO1xuXG4gIHZhciBoYW5kbGVDbGljayA9IGZ1bmN0aW9uIGhhbmRsZUNsaWNrKGUpIHtcbiAgICByZXR1cm4gb25DbGljayh7XG4gICAgICBoOiBoc2wuaCxcbiAgICAgIHM6IDAuNSxcbiAgICAgIGw6IG9mZnNldCxcbiAgICAgIHNvdXJjZTogJ2hzbCdcbiAgICB9LCBlKTtcbiAgfTtcblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBzdHlsZTogc3R5bGVzLnN3YXRjaCwgb25DbGljazogaGFuZGxlQ2xpY2sgfSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBTbGlkZXJTd2F0Y2g7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCByZWFjdENTUyBmcm9tICdyZWFjdGNzcyc7XG5cbmltcG9ydCBTbGlkZXJTd2F0Y2ggZnJvbSAnLi9TbGlkZXJTd2F0Y2gnO1xuXG5leHBvcnQgdmFyIFNsaWRlclN3YXRjaGVzID0gZnVuY3Rpb24gU2xpZGVyU3dhdGNoZXMoX3JlZikge1xuICB2YXIgb25DbGljayA9IF9yZWYub25DbGljayxcbiAgICAgIGhzbCA9IF9yZWYuaHNsO1xuXG4gIHZhciBzdHlsZXMgPSByZWFjdENTUyh7XG4gICAgJ2RlZmF1bHQnOiB7XG4gICAgICBzd2F0Y2hlczoge1xuICAgICAgICBtYXJnaW5Ub3A6ICcyMHB4J1xuICAgICAgfSxcbiAgICAgIHN3YXRjaDoge1xuICAgICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgICAgd2lkdGg6ICcyMCUnLFxuICAgICAgICBwYWRkaW5nUmlnaHQ6ICcxcHgnLFxuICAgICAgICBmbG9hdDogJ2xlZnQnXG4gICAgICB9LFxuICAgICAgY2xlYXI6IHtcbiAgICAgICAgY2xlYXI6ICdib3RoJ1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgLy8gQWNjZXB0aWJsZSBkaWZmZXJlbmNlIGluIGZsb2F0aW5nIHBvaW50IGVxdWFsaXR5XG4gIHZhciBlcHNpbG9uID0gMC4xO1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICdkaXYnLFxuICAgIHsgc3R5bGU6IHN0eWxlcy5zd2F0Y2hlcyB9LFxuICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIHsgc3R5bGU6IHN0eWxlcy5zd2F0Y2ggfSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoU2xpZGVyU3dhdGNoLCB7XG4gICAgICAgIGhzbDogaHNsLFxuICAgICAgICBvZmZzZXQ6ICcuODAnLFxuICAgICAgICBhY3RpdmU6IE1hdGguYWJzKGhzbC5sIC0gMC44MCkgPCBlcHNpbG9uICYmIE1hdGguYWJzKGhzbC5zIC0gMC41MCkgPCBlcHNpbG9uLFxuICAgICAgICBvbkNsaWNrOiBvbkNsaWNrLFxuICAgICAgICBmaXJzdDogdHJ1ZVxuICAgICAgfSlcbiAgICApLFxuICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIHsgc3R5bGU6IHN0eWxlcy5zd2F0Y2ggfSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoU2xpZGVyU3dhdGNoLCB7XG4gICAgICAgIGhzbDogaHNsLFxuICAgICAgICBvZmZzZXQ6ICcuNjUnLFxuICAgICAgICBhY3RpdmU6IE1hdGguYWJzKGhzbC5sIC0gMC42NSkgPCBlcHNpbG9uICYmIE1hdGguYWJzKGhzbC5zIC0gMC41MCkgPCBlcHNpbG9uLFxuICAgICAgICBvbkNsaWNrOiBvbkNsaWNrXG4gICAgICB9KVxuICAgICksXG4gICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgeyBzdHlsZTogc3R5bGVzLnN3YXRjaCB9LFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChTbGlkZXJTd2F0Y2gsIHtcbiAgICAgICAgaHNsOiBoc2wsXG4gICAgICAgIG9mZnNldDogJy41MCcsXG4gICAgICAgIGFjdGl2ZTogTWF0aC5hYnMoaHNsLmwgLSAwLjUwKSA8IGVwc2lsb24gJiYgTWF0aC5hYnMoaHNsLnMgLSAwLjUwKSA8IGVwc2lsb24sXG4gICAgICAgIG9uQ2xpY2s6IG9uQ2xpY2tcbiAgICAgIH0pXG4gICAgKSxcbiAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICB7IHN0eWxlOiBzdHlsZXMuc3dhdGNoIH0sXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFNsaWRlclN3YXRjaCwge1xuICAgICAgICBoc2w6IGhzbCxcbiAgICAgICAgb2Zmc2V0OiAnLjM1JyxcbiAgICAgICAgYWN0aXZlOiBNYXRoLmFicyhoc2wubCAtIDAuMzUpIDwgZXBzaWxvbiAmJiBNYXRoLmFicyhoc2wucyAtIDAuNTApIDwgZXBzaWxvbixcbiAgICAgICAgb25DbGljazogb25DbGlja1xuICAgICAgfSlcbiAgICApLFxuICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIHsgc3R5bGU6IHN0eWxlcy5zd2F0Y2ggfSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoU2xpZGVyU3dhdGNoLCB7XG4gICAgICAgIGhzbDogaHNsLFxuICAgICAgICBvZmZzZXQ6ICcuMjAnLFxuICAgICAgICBhY3RpdmU6IE1hdGguYWJzKGhzbC5sIC0gMC4yMCkgPCBlcHNpbG9uICYmIE1hdGguYWJzKGhzbC5zIC0gMC41MCkgPCBlcHNpbG9uLFxuICAgICAgICBvbkNsaWNrOiBvbkNsaWNrLFxuICAgICAgICBsYXN0OiB0cnVlXG4gICAgICB9KVxuICAgICksXG4gICAgUmVhY3QuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBzdHlsZTogc3R5bGVzLmNsZWFyIH0pXG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBTbGlkZXJTd2F0Y2hlczsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCByZWFjdENTUyBmcm9tICdyZWFjdGNzcyc7XG5pbXBvcnQgbWVyZ2UgZnJvbSAnbG9kYXNoLWVzL21lcmdlJztcblxuaW1wb3J0IHsgQ29sb3JXcmFwLCBIdWUgfSBmcm9tICcuLi9jb21tb24nO1xuaW1wb3J0IFNsaWRlclN3YXRjaGVzIGZyb20gJy4vU2xpZGVyU3dhdGNoZXMnO1xuaW1wb3J0IFNsaWRlclBvaW50ZXIgZnJvbSAnLi9TbGlkZXJQb2ludGVyJztcblxuZXhwb3J0IHZhciBTbGlkZXIgPSBmdW5jdGlvbiBTbGlkZXIoX3JlZikge1xuICB2YXIgaHNsID0gX3JlZi5oc2wsXG4gICAgICBvbkNoYW5nZSA9IF9yZWYub25DaGFuZ2UsXG4gICAgICBwb2ludGVyID0gX3JlZi5wb2ludGVyLFxuICAgICAgX3JlZiRzdHlsZXMgPSBfcmVmLnN0eWxlcyxcbiAgICAgIHBhc3NlZFN0eWxlcyA9IF9yZWYkc3R5bGVzID09PSB1bmRlZmluZWQgPyB7fSA6IF9yZWYkc3R5bGVzLFxuICAgICAgX3JlZiRjbGFzc05hbWUgPSBfcmVmLmNsYXNzTmFtZSxcbiAgICAgIGNsYXNzTmFtZSA9IF9yZWYkY2xhc3NOYW1lID09PSB1bmRlZmluZWQgPyAnJyA6IF9yZWYkY2xhc3NOYW1lO1xuXG4gIHZhciBzdHlsZXMgPSByZWFjdENTUyhtZXJnZSh7XG4gICAgJ2RlZmF1bHQnOiB7XG4gICAgICBodWU6IHtcbiAgICAgICAgaGVpZ2h0OiAnMTJweCcsXG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnXG4gICAgICB9LFxuICAgICAgSHVlOiB7XG4gICAgICAgIHJhZGl1czogJzJweCdcbiAgICAgIH1cbiAgICB9XG4gIH0sIHBhc3NlZFN0eWxlcykpO1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICdkaXYnLFxuICAgIHsgc3R5bGU6IHN0eWxlcy53cmFwIHx8IHt9LCBjbGFzc05hbWU6ICdzbGlkZXItcGlja2VyICcgKyBjbGFzc05hbWUgfSxcbiAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICB7IHN0eWxlOiBzdHlsZXMuaHVlIH0sXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KEh1ZSwge1xuICAgICAgICBzdHlsZTogc3R5bGVzLkh1ZSxcbiAgICAgICAgaHNsOiBoc2wsXG4gICAgICAgIHBvaW50ZXI6IHBvaW50ZXIsXG4gICAgICAgIG9uQ2hhbmdlOiBvbkNoYW5nZVxuICAgICAgfSlcbiAgICApLFxuICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIHsgc3R5bGU6IHN0eWxlcy5zd2F0Y2hlcyB9LFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChTbGlkZXJTd2F0Y2hlcywgeyBoc2w6IGhzbCwgb25DbGljazogb25DaGFuZ2UgfSlcbiAgICApXG4gICk7XG59O1xuXG5TbGlkZXIucHJvcFR5cGVzID0ge1xuICBzdHlsZXM6IFByb3BUeXBlcy5vYmplY3Rcbn07XG5TbGlkZXIuZGVmYXVsdFByb3BzID0ge1xuICBwb2ludGVyOiBTbGlkZXJQb2ludGVyLFxuICBzdHlsZXM6IHt9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBDb2xvcldyYXAoU2xpZGVyKTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHJlYWN0Q1NTIGZyb20gJ3JlYWN0Y3NzJztcblxuZXhwb3J0IHZhciBTbGlkZXJQb2ludGVyID0gZnVuY3Rpb24gU2xpZGVyUG9pbnRlcigpIHtcbiAgdmFyIHN0eWxlcyA9IHJlYWN0Q1NTKHtcbiAgICAnZGVmYXVsdCc6IHtcbiAgICAgIHBpY2tlcjoge1xuICAgICAgICB3aWR0aDogJzE0cHgnLFxuICAgICAgICBoZWlnaHQ6ICcxNHB4JyxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAnNnB4JyxcbiAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKC03cHgsIC0xcHgpJyxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAncmdiKDI0OCwgMjQ4LCAyNDgpJyxcbiAgICAgICAgYm94U2hhZG93OiAnMCAxcHggNHB4IDAgcmdiYSgwLCAwLCAwLCAwLjM3KSdcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IHN0eWxlOiBzdHlsZXMucGlja2VyIH0pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgU2xpZGVyUG9pbnRlcjsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHJlYWN0Q1NTIGZyb20gJ3JlYWN0Y3NzJztcbmltcG9ydCAqIGFzIGNvbG9yVXRpbHMgZnJvbSAnLi4vLi4vaGVscGVycy9jb2xvcic7XG5cbmltcG9ydCB7IFN3YXRjaCB9IGZyb20gJy4uL2NvbW1vbic7XG5pbXBvcnQgQ2hlY2tJY29uIGZyb20gJ0BpY29ucy9tYXRlcmlhbC9DaGVja0ljb24nO1xuXG5leHBvcnQgdmFyIFN3YXRjaGVzQ29sb3IgPSBmdW5jdGlvbiBTd2F0Y2hlc0NvbG9yKF9yZWYpIHtcbiAgdmFyIGNvbG9yID0gX3JlZi5jb2xvcixcbiAgICAgIF9yZWYkb25DbGljayA9IF9yZWYub25DbGljayxcbiAgICAgIG9uQ2xpY2sgPSBfcmVmJG9uQ2xpY2sgPT09IHVuZGVmaW5lZCA/IGZ1bmN0aW9uICgpIHt9IDogX3JlZiRvbkNsaWNrLFxuICAgICAgb25Td2F0Y2hIb3ZlciA9IF9yZWYub25Td2F0Y2hIb3ZlcixcbiAgICAgIGZpcnN0ID0gX3JlZi5maXJzdCxcbiAgICAgIGxhc3QgPSBfcmVmLmxhc3QsXG4gICAgICBhY3RpdmUgPSBfcmVmLmFjdGl2ZTtcblxuICB2YXIgc3R5bGVzID0gcmVhY3RDU1Moe1xuICAgICdkZWZhdWx0Jzoge1xuICAgICAgY29sb3I6IHtcbiAgICAgICAgd2lkdGg6ICc0MHB4JyxcbiAgICAgICAgaGVpZ2h0OiAnMjRweCcsXG4gICAgICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgICAgICBiYWNrZ3JvdW5kOiBjb2xvcixcbiAgICAgICAgbWFyZ2luQm90dG9tOiAnMXB4J1xuICAgICAgfSxcbiAgICAgIGNoZWNrOiB7XG4gICAgICAgIGNvbG9yOiBjb2xvclV0aWxzLmdldENvbnRyYXN0aW5nQ29sb3IoY29sb3IpLFxuICAgICAgICBtYXJnaW5MZWZ0OiAnOHB4JyxcbiAgICAgICAgZGlzcGxheTogJ25vbmUnXG4gICAgICB9XG4gICAgfSxcbiAgICAnZmlyc3QnOiB7XG4gICAgICBjb2xvcjoge1xuICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICAgIGJvcmRlclJhZGl1czogJzJweCAycHggMCAwJ1xuICAgICAgfVxuICAgIH0sXG4gICAgJ2xhc3QnOiB7XG4gICAgICBjb2xvcjoge1xuICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICAgIGJvcmRlclJhZGl1czogJzAgMCAycHggMnB4J1xuICAgICAgfVxuICAgIH0sXG4gICAgJ2FjdGl2ZSc6IHtcbiAgICAgIGNoZWNrOiB7XG4gICAgICAgIGRpc3BsYXk6ICdibG9jaydcbiAgICAgIH1cbiAgICB9LFxuICAgICdjb2xvci0jRkZGRkZGJzoge1xuICAgICAgY29sb3I6IHtcbiAgICAgICAgYm94U2hhZG93OiAnaW5zZXQgMCAwIDAgMXB4ICNkZGQnXG4gICAgICB9LFxuICAgICAgY2hlY2s6IHtcbiAgICAgICAgY29sb3I6ICcjMzMzJ1xuICAgICAgfVxuICAgIH0sXG4gICAgJ3RyYW5zcGFyZW50Jzoge1xuICAgICAgY2hlY2s6IHtcbiAgICAgICAgY29sb3I6ICcjMzMzJ1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGZpcnN0OiBmaXJzdCxcbiAgICBsYXN0OiBsYXN0LFxuICAgIGFjdGl2ZTogYWN0aXZlLFxuICAgICdjb2xvci0jRkZGRkZGJzogY29sb3IgPT09ICcjRkZGRkZGJyxcbiAgICAndHJhbnNwYXJlbnQnOiBjb2xvciA9PT0gJ3RyYW5zcGFyZW50J1xuICB9KTtcblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICBTd2F0Y2gsXG4gICAge1xuICAgICAgY29sb3I6IGNvbG9yLFxuICAgICAgc3R5bGU6IHN0eWxlcy5jb2xvcixcbiAgICAgIG9uQ2xpY2s6IG9uQ2xpY2ssXG4gICAgICBvbkhvdmVyOiBvblN3YXRjaEhvdmVyLFxuICAgICAgZm9jdXNTdHlsZTogeyBib3hTaGFkb3c6ICcwIDAgNHB4ICcgKyBjb2xvciB9XG4gICAgfSxcbiAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICB7IHN0eWxlOiBzdHlsZXMuY2hlY2sgfSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ2hlY2tJY29uLCBudWxsKVxuICAgIClcbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFN3YXRjaGVzQ29sb3I7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCByZWFjdENTUyBmcm9tICdyZWFjdGNzcyc7XG5pbXBvcnQgbWFwIGZyb20gJ2xvZGFzaC1lcy9tYXAnO1xuXG5pbXBvcnQgU3dhdGNoZXNDb2xvciBmcm9tICcuL1N3YXRjaGVzQ29sb3InO1xuXG5leHBvcnQgdmFyIFN3YXRjaGVzR3JvdXAgPSBmdW5jdGlvbiBTd2F0Y2hlc0dyb3VwKF9yZWYpIHtcbiAgdmFyIG9uQ2xpY2sgPSBfcmVmLm9uQ2xpY2ssXG4gICAgICBvblN3YXRjaEhvdmVyID0gX3JlZi5vblN3YXRjaEhvdmVyLFxuICAgICAgZ3JvdXAgPSBfcmVmLmdyb3VwLFxuICAgICAgYWN0aXZlID0gX3JlZi5hY3RpdmU7XG5cbiAgdmFyIHN0eWxlcyA9IHJlYWN0Q1NTKHtcbiAgICAnZGVmYXVsdCc6IHtcbiAgICAgIGdyb3VwOiB7XG4gICAgICAgIHBhZGRpbmdCb3R0b206ICcxMHB4JyxcbiAgICAgICAgd2lkdGg6ICc0MHB4JyxcbiAgICAgICAgZmxvYXQ6ICdsZWZ0JyxcbiAgICAgICAgbWFyZ2luUmlnaHQ6ICcxMHB4J1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgJ2RpdicsXG4gICAgeyBzdHlsZTogc3R5bGVzLmdyb3VwIH0sXG4gICAgbWFwKGdyb3VwLCBmdW5jdGlvbiAoY29sb3IsIGkpIHtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFN3YXRjaGVzQ29sb3IsIHtcbiAgICAgICAga2V5OiBjb2xvcixcbiAgICAgICAgY29sb3I6IGNvbG9yLFxuICAgICAgICBhY3RpdmU6IGNvbG9yLnRvTG93ZXJDYXNlKCkgPT09IGFjdGl2ZSxcbiAgICAgICAgZmlyc3Q6IGkgPT09IDAsXG4gICAgICAgIGxhc3Q6IGkgPT09IGdyb3VwLmxlbmd0aCAtIDEsXG4gICAgICAgIG9uQ2xpY2s6IG9uQ2xpY2ssXG4gICAgICAgIG9uU3dhdGNoSG92ZXI6IG9uU3dhdGNoSG92ZXJcbiAgICAgIH0pO1xuICAgIH0pXG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBTd2F0Y2hlc0dyb3VwOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHJlYWN0Q1NTIGZyb20gJ3JlYWN0Y3NzJztcbmltcG9ydCBtYXAgZnJvbSAnbG9kYXNoLWVzL21hcCc7XG5pbXBvcnQgbWVyZ2UgZnJvbSAnbG9kYXNoLWVzL21lcmdlJztcbmltcG9ydCAqIGFzIG1hdGVyaWFsIGZyb20gJ21hdGVyaWFsLWNvbG9ycyc7XG5cbmltcG9ydCB7IENvbG9yV3JhcCwgUmFpc2VkIH0gZnJvbSAnLi4vY29tbW9uJztcbmltcG9ydCBTd2F0Y2hlc0dyb3VwIGZyb20gJy4vU3dhdGNoZXNHcm91cCc7XG5cbmV4cG9ydCB2YXIgU3dhdGNoZXMgPSBmdW5jdGlvbiBTd2F0Y2hlcyhfcmVmKSB7XG4gIHZhciB3aWR0aCA9IF9yZWYud2lkdGgsXG4gICAgICBoZWlnaHQgPSBfcmVmLmhlaWdodCxcbiAgICAgIG9uQ2hhbmdlID0gX3JlZi5vbkNoYW5nZSxcbiAgICAgIG9uU3dhdGNoSG92ZXIgPSBfcmVmLm9uU3dhdGNoSG92ZXIsXG4gICAgICBjb2xvcnMgPSBfcmVmLmNvbG9ycyxcbiAgICAgIGhleCA9IF9yZWYuaGV4LFxuICAgICAgX3JlZiRzdHlsZXMgPSBfcmVmLnN0eWxlcyxcbiAgICAgIHBhc3NlZFN0eWxlcyA9IF9yZWYkc3R5bGVzID09PSB1bmRlZmluZWQgPyB7fSA6IF9yZWYkc3R5bGVzLFxuICAgICAgX3JlZiRjbGFzc05hbWUgPSBfcmVmLmNsYXNzTmFtZSxcbiAgICAgIGNsYXNzTmFtZSA9IF9yZWYkY2xhc3NOYW1lID09PSB1bmRlZmluZWQgPyAnJyA6IF9yZWYkY2xhc3NOYW1lO1xuXG4gIHZhciBzdHlsZXMgPSByZWFjdENTUyhtZXJnZSh7XG4gICAgJ2RlZmF1bHQnOiB7XG4gICAgICBwaWNrZXI6IHtcbiAgICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgICBoZWlnaHQ6IGhlaWdodFxuICAgICAgfSxcbiAgICAgIG92ZXJmbG93OiB7XG4gICAgICAgIGhlaWdodDogaGVpZ2h0LFxuICAgICAgICBvdmVyZmxvd1k6ICdzY3JvbGwnXG4gICAgICB9LFxuICAgICAgYm9keToge1xuICAgICAgICBwYWRkaW5nOiAnMTZweCAwIDZweCAxNnB4J1xuICAgICAgfSxcbiAgICAgIGNsZWFyOiB7XG4gICAgICAgIGNsZWFyOiAnYm90aCdcbiAgICAgIH1cbiAgICB9XG4gIH0sIHBhc3NlZFN0eWxlcykpO1xuXG4gIHZhciBoYW5kbGVDaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVDaGFuZ2UoZGF0YSwgZSkge1xuICAgIHJldHVybiBvbkNoYW5nZSh7IGhleDogZGF0YSwgc291cmNlOiAnaGV4JyB9LCBlKTtcbiAgfTtcblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAnZGl2JyxcbiAgICB7IHN0eWxlOiBzdHlsZXMucGlja2VyLCBjbGFzc05hbWU6ICdzd2F0Y2hlcy1waWNrZXIgJyArIGNsYXNzTmFtZSB9LFxuICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBSYWlzZWQsXG4gICAgICBudWxsLFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHsgc3R5bGU6IHN0eWxlcy5vdmVyZmxvdyB9LFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdkaXYnLFxuICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy5ib2R5IH0sXG4gICAgICAgICAgbWFwKGNvbG9ycywgZnVuY3Rpb24gKGdyb3VwKSB7XG4gICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChTd2F0Y2hlc0dyb3VwLCB7XG4gICAgICAgICAgICAgIGtleTogZ3JvdXAudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgZ3JvdXA6IGdyb3VwLFxuICAgICAgICAgICAgICBhY3RpdmU6IGhleCxcbiAgICAgICAgICAgICAgb25DbGljazogaGFuZGxlQ2hhbmdlLFxuICAgICAgICAgICAgICBvblN3YXRjaEhvdmVyOiBvblN3YXRjaEhvdmVyXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IHN0eWxlOiBzdHlsZXMuY2xlYXIgfSlcbiAgICAgICAgKVxuICAgICAgKVxuICAgIClcbiAgKTtcbn07XG5cblN3YXRjaGVzLnByb3BUeXBlcyA9IHtcbiAgd2lkdGg6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5udW1iZXJdKSxcbiAgaGVpZ2h0OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMubnVtYmVyXSksXG4gIGNvbG9yczogUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnN0cmluZykpLFxuICBzdHlsZXM6IFByb3BUeXBlcy5vYmplY3RcblxuICAvKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG59O1N3YXRjaGVzLmRlZmF1bHRQcm9wcyA9IHtcbiAgd2lkdGg6IDMyMCxcbiAgaGVpZ2h0OiAyNDAsXG4gIGNvbG9yczogW1ttYXRlcmlhbC5yZWRbJzkwMCddLCBtYXRlcmlhbC5yZWRbJzcwMCddLCBtYXRlcmlhbC5yZWRbJzUwMCddLCBtYXRlcmlhbC5yZWRbJzMwMCddLCBtYXRlcmlhbC5yZWRbJzEwMCddXSwgW21hdGVyaWFsLnBpbmtbJzkwMCddLCBtYXRlcmlhbC5waW5rWyc3MDAnXSwgbWF0ZXJpYWwucGlua1snNTAwJ10sIG1hdGVyaWFsLnBpbmtbJzMwMCddLCBtYXRlcmlhbC5waW5rWycxMDAnXV0sIFttYXRlcmlhbC5wdXJwbGVbJzkwMCddLCBtYXRlcmlhbC5wdXJwbGVbJzcwMCddLCBtYXRlcmlhbC5wdXJwbGVbJzUwMCddLCBtYXRlcmlhbC5wdXJwbGVbJzMwMCddLCBtYXRlcmlhbC5wdXJwbGVbJzEwMCddXSwgW21hdGVyaWFsLmRlZXBQdXJwbGVbJzkwMCddLCBtYXRlcmlhbC5kZWVwUHVycGxlWyc3MDAnXSwgbWF0ZXJpYWwuZGVlcFB1cnBsZVsnNTAwJ10sIG1hdGVyaWFsLmRlZXBQdXJwbGVbJzMwMCddLCBtYXRlcmlhbC5kZWVwUHVycGxlWycxMDAnXV0sIFttYXRlcmlhbC5pbmRpZ29bJzkwMCddLCBtYXRlcmlhbC5pbmRpZ29bJzcwMCddLCBtYXRlcmlhbC5pbmRpZ29bJzUwMCddLCBtYXRlcmlhbC5pbmRpZ29bJzMwMCddLCBtYXRlcmlhbC5pbmRpZ29bJzEwMCddXSwgW21hdGVyaWFsLmJsdWVbJzkwMCddLCBtYXRlcmlhbC5ibHVlWyc3MDAnXSwgbWF0ZXJpYWwuYmx1ZVsnNTAwJ10sIG1hdGVyaWFsLmJsdWVbJzMwMCddLCBtYXRlcmlhbC5ibHVlWycxMDAnXV0sIFttYXRlcmlhbC5saWdodEJsdWVbJzkwMCddLCBtYXRlcmlhbC5saWdodEJsdWVbJzcwMCddLCBtYXRlcmlhbC5saWdodEJsdWVbJzUwMCddLCBtYXRlcmlhbC5saWdodEJsdWVbJzMwMCddLCBtYXRlcmlhbC5saWdodEJsdWVbJzEwMCddXSwgW21hdGVyaWFsLmN5YW5bJzkwMCddLCBtYXRlcmlhbC5jeWFuWyc3MDAnXSwgbWF0ZXJpYWwuY3lhblsnNTAwJ10sIG1hdGVyaWFsLmN5YW5bJzMwMCddLCBtYXRlcmlhbC5jeWFuWycxMDAnXV0sIFttYXRlcmlhbC50ZWFsWyc5MDAnXSwgbWF0ZXJpYWwudGVhbFsnNzAwJ10sIG1hdGVyaWFsLnRlYWxbJzUwMCddLCBtYXRlcmlhbC50ZWFsWyczMDAnXSwgbWF0ZXJpYWwudGVhbFsnMTAwJ11dLCBbJyMxOTREMzMnLCBtYXRlcmlhbC5ncmVlblsnNzAwJ10sIG1hdGVyaWFsLmdyZWVuWyc1MDAnXSwgbWF0ZXJpYWwuZ3JlZW5bJzMwMCddLCBtYXRlcmlhbC5ncmVlblsnMTAwJ11dLCBbbWF0ZXJpYWwubGlnaHRHcmVlblsnOTAwJ10sIG1hdGVyaWFsLmxpZ2h0R3JlZW5bJzcwMCddLCBtYXRlcmlhbC5saWdodEdyZWVuWyc1MDAnXSwgbWF0ZXJpYWwubGlnaHRHcmVlblsnMzAwJ10sIG1hdGVyaWFsLmxpZ2h0R3JlZW5bJzEwMCddXSwgW21hdGVyaWFsLmxpbWVbJzkwMCddLCBtYXRlcmlhbC5saW1lWyc3MDAnXSwgbWF0ZXJpYWwubGltZVsnNTAwJ10sIG1hdGVyaWFsLmxpbWVbJzMwMCddLCBtYXRlcmlhbC5saW1lWycxMDAnXV0sIFttYXRlcmlhbC55ZWxsb3dbJzkwMCddLCBtYXRlcmlhbC55ZWxsb3dbJzcwMCddLCBtYXRlcmlhbC55ZWxsb3dbJzUwMCddLCBtYXRlcmlhbC55ZWxsb3dbJzMwMCddLCBtYXRlcmlhbC55ZWxsb3dbJzEwMCddXSwgW21hdGVyaWFsLmFtYmVyWyc5MDAnXSwgbWF0ZXJpYWwuYW1iZXJbJzcwMCddLCBtYXRlcmlhbC5hbWJlclsnNTAwJ10sIG1hdGVyaWFsLmFtYmVyWyczMDAnXSwgbWF0ZXJpYWwuYW1iZXJbJzEwMCddXSwgW21hdGVyaWFsLm9yYW5nZVsnOTAwJ10sIG1hdGVyaWFsLm9yYW5nZVsnNzAwJ10sIG1hdGVyaWFsLm9yYW5nZVsnNTAwJ10sIG1hdGVyaWFsLm9yYW5nZVsnMzAwJ10sIG1hdGVyaWFsLm9yYW5nZVsnMTAwJ11dLCBbbWF0ZXJpYWwuZGVlcE9yYW5nZVsnOTAwJ10sIG1hdGVyaWFsLmRlZXBPcmFuZ2VbJzcwMCddLCBtYXRlcmlhbC5kZWVwT3JhbmdlWyc1MDAnXSwgbWF0ZXJpYWwuZGVlcE9yYW5nZVsnMzAwJ10sIG1hdGVyaWFsLmRlZXBPcmFuZ2VbJzEwMCddXSwgW21hdGVyaWFsLmJyb3duWyc5MDAnXSwgbWF0ZXJpYWwuYnJvd25bJzcwMCddLCBtYXRlcmlhbC5icm93blsnNTAwJ10sIG1hdGVyaWFsLmJyb3duWyczMDAnXSwgbWF0ZXJpYWwuYnJvd25bJzEwMCddXSwgW21hdGVyaWFsLmJsdWVHcmV5Wyc5MDAnXSwgbWF0ZXJpYWwuYmx1ZUdyZXlbJzcwMCddLCBtYXRlcmlhbC5ibHVlR3JleVsnNTAwJ10sIG1hdGVyaWFsLmJsdWVHcmV5WyczMDAnXSwgbWF0ZXJpYWwuYmx1ZUdyZXlbJzEwMCddXSwgWycjMDAwMDAwJywgJyM1MjUyNTInLCAnIzk2OTY5NicsICcjRDlEOUQ5JywgJyNGRkZGRkYnXV0sXG4gIHN0eWxlczoge31cbn07XG5cbmV4cG9ydCBkZWZhdWx0IENvbG9yV3JhcChTd2F0Y2hlcyk7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgcmVhY3RDU1MgZnJvbSAncmVhY3Rjc3MnO1xuaW1wb3J0IG1hcCBmcm9tICdsb2Rhc2gtZXMvbWFwJztcbmltcG9ydCBtZXJnZSBmcm9tICdsb2Rhc2gtZXMvbWVyZ2UnO1xuaW1wb3J0ICogYXMgY29sb3IgZnJvbSAnLi4vLi4vaGVscGVycy9jb2xvcic7XG5cbmltcG9ydCB7IENvbG9yV3JhcCwgRWRpdGFibGVJbnB1dCwgU3dhdGNoIH0gZnJvbSAnLi4vY29tbW9uJztcblxuZXhwb3J0IHZhciBUd2l0dGVyID0gZnVuY3Rpb24gVHdpdHRlcihfcmVmKSB7XG4gIHZhciBvbkNoYW5nZSA9IF9yZWYub25DaGFuZ2UsXG4gICAgICBvblN3YXRjaEhvdmVyID0gX3JlZi5vblN3YXRjaEhvdmVyLFxuICAgICAgaGV4ID0gX3JlZi5oZXgsXG4gICAgICBjb2xvcnMgPSBfcmVmLmNvbG9ycyxcbiAgICAgIHdpZHRoID0gX3JlZi53aWR0aCxcbiAgICAgIHRyaWFuZ2xlID0gX3JlZi50cmlhbmdsZSxcbiAgICAgIF9yZWYkc3R5bGVzID0gX3JlZi5zdHlsZXMsXG4gICAgICBwYXNzZWRTdHlsZXMgPSBfcmVmJHN0eWxlcyA9PT0gdW5kZWZpbmVkID8ge30gOiBfcmVmJHN0eWxlcyxcbiAgICAgIF9yZWYkY2xhc3NOYW1lID0gX3JlZi5jbGFzc05hbWUsXG4gICAgICBjbGFzc05hbWUgPSBfcmVmJGNsYXNzTmFtZSA9PT0gdW5kZWZpbmVkID8gJycgOiBfcmVmJGNsYXNzTmFtZTtcblxuICB2YXIgc3R5bGVzID0gcmVhY3RDU1MobWVyZ2Uoe1xuICAgICdkZWZhdWx0Jzoge1xuICAgICAgY2FyZDoge1xuICAgICAgICB3aWR0aDogd2lkdGgsXG4gICAgICAgIGJhY2tncm91bmQ6ICcjZmZmJyxcbiAgICAgICAgYm9yZGVyOiAnMCBzb2xpZCByZ2JhKDAsMCwwLDAuMjUpJyxcbiAgICAgICAgYm94U2hhZG93OiAnMCAxcHggNHB4IHJnYmEoMCwwLDAsMC4yNSknLFxuICAgICAgICBib3JkZXJSYWRpdXM6ICc0cHgnLFxuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xuICAgICAgfSxcbiAgICAgIGJvZHk6IHtcbiAgICAgICAgcGFkZGluZzogJzE1cHggOXB4IDlweCAxNXB4J1xuICAgICAgfSxcbiAgICAgIGxhYmVsOiB7XG4gICAgICAgIGZvbnRTaXplOiAnMThweCcsXG4gICAgICAgIGNvbG9yOiAnI2ZmZidcbiAgICAgIH0sXG4gICAgICB0cmlhbmdsZToge1xuICAgICAgICB3aWR0aDogJzBweCcsXG4gICAgICAgIGhlaWdodDogJzBweCcsXG4gICAgICAgIGJvcmRlclN0eWxlOiAnc29saWQnLFxuICAgICAgICBib3JkZXJXaWR0aDogJzAgOXB4IDEwcHggOXB4JyxcbiAgICAgICAgYm9yZGVyQ29sb3I6ICd0cmFuc3BhcmVudCB0cmFuc3BhcmVudCAjZmZmIHRyYW5zcGFyZW50JyxcbiAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZSdcbiAgICAgIH0sXG4gICAgICB0cmlhbmdsZVNoYWRvdzoge1xuICAgICAgICB3aWR0aDogJzBweCcsXG4gICAgICAgIGhlaWdodDogJzBweCcsXG4gICAgICAgIGJvcmRlclN0eWxlOiAnc29saWQnLFxuICAgICAgICBib3JkZXJXaWR0aDogJzAgOXB4IDEwcHggOXB4JyxcbiAgICAgICAgYm9yZGVyQ29sb3I6ICd0cmFuc3BhcmVudCB0cmFuc3BhcmVudCByZ2JhKDAsMCwwLC4xKSB0cmFuc3BhcmVudCcsXG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnXG4gICAgICB9LFxuICAgICAgaGFzaDoge1xuICAgICAgICBiYWNrZ3JvdW5kOiAnI0YwRjBGMCcsXG4gICAgICAgIGhlaWdodDogJzMwcHgnLFxuICAgICAgICB3aWR0aDogJzMwcHgnLFxuICAgICAgICBib3JkZXJSYWRpdXM6ICc0cHggMCAwIDRweCcsXG4gICAgICAgIGZsb2F0OiAnbGVmdCcsXG4gICAgICAgIGNvbG9yOiAnIzk4QTFBNCcsXG4gICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJ1xuICAgICAgfSxcbiAgICAgIGlucHV0OiB7XG4gICAgICAgIHdpZHRoOiAnMTAwcHgnLFxuICAgICAgICBmb250U2l6ZTogJzE0cHgnLFxuICAgICAgICBjb2xvcjogJyM2NjYnLFxuICAgICAgICBib3JkZXI6ICcwcHgnLFxuICAgICAgICBvdXRsaW5lOiAnbm9uZScsXG4gICAgICAgIGhlaWdodDogJzI4cHgnLFxuICAgICAgICBib3hTaGFkb3c6ICdpbnNldCAwIDAgMCAxcHggI0YwRjBGMCcsXG4gICAgICAgIGJveFNpemluZzogJ2NvbnRlbnQtYm94JyxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAnMCA0cHggNHB4IDAnLFxuICAgICAgICBmbG9hdDogJ2xlZnQnLFxuICAgICAgICBwYWRkaW5nTGVmdDogJzhweCdcbiAgICAgIH0sXG4gICAgICBzd2F0Y2g6IHtcbiAgICAgICAgd2lkdGg6ICczMHB4JyxcbiAgICAgICAgaGVpZ2h0OiAnMzBweCcsXG4gICAgICAgIGZsb2F0OiAnbGVmdCcsXG4gICAgICAgIGJvcmRlclJhZGl1czogJzRweCcsXG4gICAgICAgIG1hcmdpbjogJzAgNnB4IDZweCAwJ1xuICAgICAgfSxcbiAgICAgIGNsZWFyOiB7XG4gICAgICAgIGNsZWFyOiAnYm90aCdcbiAgICAgIH1cbiAgICB9LFxuICAgICdoaWRlLXRyaWFuZ2xlJzoge1xuICAgICAgdHJpYW5nbGU6IHtcbiAgICAgICAgZGlzcGxheTogJ25vbmUnXG4gICAgICB9LFxuICAgICAgdHJpYW5nbGVTaGFkb3c6IHtcbiAgICAgICAgZGlzcGxheTogJ25vbmUnXG4gICAgICB9XG4gICAgfSxcbiAgICAndG9wLWxlZnQtdHJpYW5nbGUnOiB7XG4gICAgICB0cmlhbmdsZToge1xuICAgICAgICB0b3A6ICctMTBweCcsXG4gICAgICAgIGxlZnQ6ICcxMnB4J1xuICAgICAgfSxcbiAgICAgIHRyaWFuZ2xlU2hhZG93OiB7XG4gICAgICAgIHRvcDogJy0xMXB4JyxcbiAgICAgICAgbGVmdDogJzEycHgnXG4gICAgICB9XG4gICAgfSxcbiAgICAndG9wLXJpZ2h0LXRyaWFuZ2xlJzoge1xuICAgICAgdHJpYW5nbGU6IHtcbiAgICAgICAgdG9wOiAnLTEwcHgnLFxuICAgICAgICByaWdodDogJzEycHgnXG4gICAgICB9LFxuICAgICAgdHJpYW5nbGVTaGFkb3c6IHtcbiAgICAgICAgdG9wOiAnLTExcHgnLFxuICAgICAgICByaWdodDogJzEycHgnXG4gICAgICB9XG4gICAgfVxuICB9LCBwYXNzZWRTdHlsZXMpLCB7XG4gICAgJ2hpZGUtdHJpYW5nbGUnOiB0cmlhbmdsZSA9PT0gJ2hpZGUnLFxuICAgICd0b3AtbGVmdC10cmlhbmdsZSc6IHRyaWFuZ2xlID09PSAndG9wLWxlZnQnLFxuICAgICd0b3AtcmlnaHQtdHJpYW5nbGUnOiB0cmlhbmdsZSA9PT0gJ3RvcC1yaWdodCdcbiAgfSk7XG5cbiAgdmFyIGhhbmRsZUNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUNoYW5nZShoZXhjb2RlLCBlKSB7XG4gICAgY29sb3IuaXNWYWxpZEhleChoZXhjb2RlKSAmJiBvbkNoYW5nZSh7XG4gICAgICBoZXg6IGhleGNvZGUsXG4gICAgICBzb3VyY2U6ICdoZXgnXG4gICAgfSwgZSk7XG4gIH07XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgJ2RpdicsXG4gICAgeyBzdHlsZTogc3R5bGVzLmNhcmQsIGNsYXNzTmFtZTogJ3R3aXR0ZXItcGlja2VyICcgKyBjbGFzc05hbWUgfSxcbiAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IHN0eWxlOiBzdHlsZXMudHJpYW5nbGVTaGFkb3cgfSksXG4gICAgUmVhY3QuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBzdHlsZTogc3R5bGVzLnRyaWFuZ2xlIH0pLFxuICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIHsgc3R5bGU6IHN0eWxlcy5ib2R5IH0sXG4gICAgICBtYXAoY29sb3JzLCBmdW5jdGlvbiAoYywgaSkge1xuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChTd2F0Y2gsIHtcbiAgICAgICAgICBrZXk6IGksXG4gICAgICAgICAgY29sb3I6IGMsXG4gICAgICAgICAgaGV4OiBjLFxuICAgICAgICAgIHN0eWxlOiBzdHlsZXMuc3dhdGNoLFxuICAgICAgICAgIG9uQ2xpY2s6IGhhbmRsZUNoYW5nZSxcbiAgICAgICAgICBvbkhvdmVyOiBvblN3YXRjaEhvdmVyLFxuICAgICAgICAgIGZvY3VzU3R5bGU6IHtcbiAgICAgICAgICAgIGJveFNoYWRvdzogJzAgMCA0cHggJyArIGNcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSksXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgeyBzdHlsZTogc3R5bGVzLmhhc2ggfSxcbiAgICAgICAgJyMnXG4gICAgICApLFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChFZGl0YWJsZUlucHV0LCB7XG4gICAgICAgIGxhYmVsOiBudWxsLFxuICAgICAgICBzdHlsZTogeyBpbnB1dDogc3R5bGVzLmlucHV0IH0sXG4gICAgICAgIHZhbHVlOiBoZXgucmVwbGFjZSgnIycsICcnKSxcbiAgICAgICAgb25DaGFuZ2U6IGhhbmRsZUNoYW5nZVxuICAgICAgfSksXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IHN0eWxlOiBzdHlsZXMuY2xlYXIgfSlcbiAgICApXG4gICk7XG59O1xuXG5Ud2l0dGVyLnByb3BUeXBlcyA9IHtcbiAgd2lkdGg6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5udW1iZXJdKSxcbiAgdHJpYW5nbGU6IFByb3BUeXBlcy5vbmVPZihbJ2hpZGUnLCAndG9wLWxlZnQnLCAndG9wLXJpZ2h0J10pLFxuICBjb2xvcnM6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5zdHJpbmcpLFxuICBzdHlsZXM6IFByb3BUeXBlcy5vYmplY3Rcbn07XG5cblR3aXR0ZXIuZGVmYXVsdFByb3BzID0ge1xuICB3aWR0aDogMjc2LFxuICBjb2xvcnM6IFsnI0ZGNjkwMCcsICcjRkNCOTAwJywgJyM3QkRDQjUnLCAnIzAwRDA4NCcsICcjOEVEMUZDJywgJyMwNjkzRTMnLCAnI0FCQjhDMycsICcjRUIxNDRDJywgJyNGNzhEQTcnLCAnIzk5MDBFRiddLFxuICB0cmlhbmdsZTogJ3RvcC1sZWZ0JyxcbiAgc3R5bGVzOiB7fVxufTtcblxuZXhwb3J0IGRlZmF1bHQgQ29sb3JXcmFwKFR3aXR0ZXIpOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgcmVhY3RDU1MgZnJvbSAncmVhY3Rjc3MnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuZXhwb3J0IHZhciBHb29nbGVQb2ludGVyQ2lyY2xlID0gZnVuY3Rpb24gR29vZ2xlUG9pbnRlckNpcmNsZShwcm9wcykge1xuICB2YXIgc3R5bGVzID0gcmVhY3RDU1Moe1xuICAgICdkZWZhdWx0Jzoge1xuICAgICAgcGlja2VyOiB7XG4gICAgICAgIHdpZHRoOiAnMjBweCcsXG4gICAgICAgIGhlaWdodDogJzIwcHgnLFxuICAgICAgICBib3JkZXJSYWRpdXM6ICcyMnB4JyxcbiAgICAgICAgYm9yZGVyOiAnMnB4ICNmZmYgc29saWQnLFxuICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoLTEycHgsIC0xM3B4KScsXG4gICAgICAgIGJhY2tncm91bmQ6ICdoc2woJyArIE1hdGgucm91bmQocHJvcHMuaHNsLmgpICsgJywgJyArIE1hdGgucm91bmQocHJvcHMuaHNsLnMgKiAxMDApICsgJyUsICcgKyBNYXRoLnJvdW5kKHByb3BzLmhzbC5sICogMTAwKSArICclKSdcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IHN0eWxlOiBzdHlsZXMucGlja2VyIH0pO1xufTtcblxuR29vZ2xlUG9pbnRlckNpcmNsZS5wcm9wVHlwZXMgPSB7XG4gIGhzbDogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBoOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIHM6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgbDogUHJvcFR5cGVzLm51bWJlcixcbiAgICBhOiBQcm9wVHlwZXMubnVtYmVyXG4gIH0pXG59O1xuXG5Hb29nbGVQb2ludGVyQ2lyY2xlLmRlZmF1bHRQcm9wcyA9IHtcbiAgaHNsOiB7IGE6IDEsIGg6IDI0OS45NCwgbDogMC4yLCBzOiAwLjUwIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IEdvb2dsZVBvaW50ZXJDaXJjbGU7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCByZWFjdENTUyBmcm9tICdyZWFjdGNzcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5leHBvcnQgdmFyIEdvb2dsZVBvaW50ZXIgPSBmdW5jdGlvbiBHb29nbGVQb2ludGVyKHByb3BzKSB7XG4gIHZhciBzdHlsZXMgPSByZWFjdENTUyh7XG4gICAgJ2RlZmF1bHQnOiB7XG4gICAgICBwaWNrZXI6IHtcbiAgICAgICAgd2lkdGg6ICcyMHB4JyxcbiAgICAgICAgaGVpZ2h0OiAnMjBweCcsXG4gICAgICAgIGJvcmRlclJhZGl1czogJzIycHgnLFxuICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoLTEwcHgsIC03cHgpJyxcbiAgICAgICAgYmFja2dyb3VuZDogJ2hzbCgnICsgTWF0aC5yb3VuZChwcm9wcy5oc2wuaCkgKyAnLCAxMDAlLCA1MCUpJyxcbiAgICAgICAgYm9yZGVyOiAnMnB4IHdoaXRlIHNvbGlkJ1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgc3R5bGU6IHN0eWxlcy5waWNrZXIgfSk7XG59O1xuXG5Hb29nbGVQb2ludGVyLnByb3BUeXBlcyA9IHtcbiAgaHNsOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGg6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgczogUHJvcFR5cGVzLm51bWJlcixcbiAgICBsOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGE6IFByb3BUeXBlcy5udW1iZXJcbiAgfSlcbn07XG5cbkdvb2dsZVBvaW50ZXIuZGVmYXVsdFByb3BzID0ge1xuICBoc2w6IHsgYTogMSwgaDogMjQ5Ljk0LCBsOiAwLjIsIHM6IDAuNTAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgR29vZ2xlUG9pbnRlcjsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHJlYWN0Q1NTIGZyb20gJ3JlYWN0Y3NzJztcbmltcG9ydCAqIGFzIGNvbG9yIGZyb20gJy4uLy4uL2hlbHBlcnMvY29sb3InO1xuaW1wb3J0IHsgRWRpdGFibGVJbnB1dCB9IGZyb20gJy4uL2NvbW1vbic7XG5cbmV4cG9ydCB2YXIgR29vZ2xlRmllbGRzID0gZnVuY3Rpb24gR29vZ2xlRmllbGRzKF9yZWYpIHtcbiAgdmFyIG9uQ2hhbmdlID0gX3JlZi5vbkNoYW5nZSxcbiAgICAgIHJnYiA9IF9yZWYucmdiLFxuICAgICAgaHNsID0gX3JlZi5oc2wsXG4gICAgICBoZXggPSBfcmVmLmhleCxcbiAgICAgIGhzdiA9IF9yZWYuaHN2O1xuXG5cbiAgdmFyIGhhbmRsZUNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUNoYW5nZShkYXRhLCBlKSB7XG4gICAgaWYgKGRhdGEuaGV4KSB7XG4gICAgICBjb2xvci5pc1ZhbGlkSGV4KGRhdGEuaGV4KSAmJiBvbkNoYW5nZSh7XG4gICAgICAgIGhleDogZGF0YS5oZXgsXG4gICAgICAgIHNvdXJjZTogJ2hleCdcbiAgICAgIH0sIGUpO1xuICAgIH0gZWxzZSBpZiAoZGF0YS5yZ2IpIHtcbiAgICAgIHZhciB2YWx1ZXMgPSBkYXRhLnJnYi5zcGxpdCgnLCcpO1xuICAgICAgY29sb3IuaXN2YWxpZENvbG9yU3RyaW5nKGRhdGEucmdiLCAncmdiJykgJiYgb25DaGFuZ2Uoe1xuICAgICAgICByOiB2YWx1ZXNbMF0sXG4gICAgICAgIGc6IHZhbHVlc1sxXSxcbiAgICAgICAgYjogdmFsdWVzWzJdLFxuICAgICAgICBhOiAxLFxuICAgICAgICBzb3VyY2U6ICdyZ2InXG4gICAgICB9LCBlKTtcbiAgICB9IGVsc2UgaWYgKGRhdGEuaHN2KSB7XG4gICAgICB2YXIgX3ZhbHVlcyA9IGRhdGEuaHN2LnNwbGl0KCcsJyk7XG4gICAgICBpZiAoY29sb3IuaXN2YWxpZENvbG9yU3RyaW5nKGRhdGEuaHN2LCAnaHN2JykpIHtcbiAgICAgICAgX3ZhbHVlc1syXSA9IF92YWx1ZXNbMl0ucmVwbGFjZSgnJScsICcnKTtcbiAgICAgICAgX3ZhbHVlc1sxXSA9IF92YWx1ZXNbMV0ucmVwbGFjZSgnJScsICcnKTtcbiAgICAgICAgX3ZhbHVlc1swXSA9IF92YWx1ZXNbMF0ucmVwbGFjZSgnwrAnLCAnJyk7XG4gICAgICAgIGlmIChfdmFsdWVzWzFdID09IDEpIHtcbiAgICAgICAgICBfdmFsdWVzWzFdID0gMC4wMTtcbiAgICAgICAgfSBlbHNlIGlmIChfdmFsdWVzWzJdID09IDEpIHtcbiAgICAgICAgICBfdmFsdWVzWzJdID0gMC4wMTtcbiAgICAgICAgfVxuICAgICAgICBvbkNoYW5nZSh7XG4gICAgICAgICAgaDogTnVtYmVyKF92YWx1ZXNbMF0pLFxuICAgICAgICAgIHM6IE51bWJlcihfdmFsdWVzWzFdKSxcbiAgICAgICAgICB2OiBOdW1iZXIoX3ZhbHVlc1syXSksXG4gICAgICAgICAgc291cmNlOiAnaHN2J1xuICAgICAgICB9LCBlKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGRhdGEuaHNsKSB7XG4gICAgICB2YXIgX3ZhbHVlczIgPSBkYXRhLmhzbC5zcGxpdCgnLCcpO1xuICAgICAgaWYgKGNvbG9yLmlzdmFsaWRDb2xvclN0cmluZyhkYXRhLmhzbCwgJ2hzbCcpKSB7XG4gICAgICAgIF92YWx1ZXMyWzJdID0gX3ZhbHVlczJbMl0ucmVwbGFjZSgnJScsICcnKTtcbiAgICAgICAgX3ZhbHVlczJbMV0gPSBfdmFsdWVzMlsxXS5yZXBsYWNlKCclJywgJycpO1xuICAgICAgICBfdmFsdWVzMlswXSA9IF92YWx1ZXMyWzBdLnJlcGxhY2UoJ8KwJywgJycpO1xuICAgICAgICBpZiAoaHN2VmFsdWVbMV0gPT0gMSkge1xuICAgICAgICAgIGhzdlZhbHVlWzFdID0gMC4wMTtcbiAgICAgICAgfSBlbHNlIGlmIChoc3ZWYWx1ZVsyXSA9PSAxKSB7XG4gICAgICAgICAgaHN2VmFsdWVbMl0gPSAwLjAxO1xuICAgICAgICB9XG4gICAgICAgIG9uQ2hhbmdlKHtcbiAgICAgICAgICBoOiBOdW1iZXIoX3ZhbHVlczJbMF0pLFxuICAgICAgICAgIHM6IE51bWJlcihfdmFsdWVzMlsxXSksXG4gICAgICAgICAgdjogTnVtYmVyKF92YWx1ZXMyWzJdKSxcbiAgICAgICAgICBzb3VyY2U6ICdoc2wnXG4gICAgICAgIH0sIGUpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICB2YXIgc3R5bGVzID0gcmVhY3RDU1Moe1xuICAgICdkZWZhdWx0Jzoge1xuICAgICAgd3JhcDoge1xuICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgIGhlaWdodDogJzEwMHB4JyxcbiAgICAgICAgbWFyZ2luVG9wOiAnNHB4J1xuICAgICAgfSxcbiAgICAgIGZpZWxkczoge1xuICAgICAgICB3aWR0aDogJzEwMCUnXG4gICAgICB9LFxuICAgICAgY29sdW1uOiB7XG4gICAgICAgIHBhZGRpbmdUb3A6ICcxMHB4JyxcbiAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICBqdXN0aWZ5Q29udGVudDogJ3NwYWNlLWJldHdlZW4nXG4gICAgICB9LFxuICAgICAgZG91YmxlOiB7XG4gICAgICAgIHBhZGRpbmc6ICcwcHggNC40cHgnLFxuICAgICAgICBib3hTaXppbmc6ICdib3JkZXItYm94J1xuICAgICAgfSxcbiAgICAgIGlucHV0OiB7XG4gICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgIGhlaWdodDogJzM4cHgnLFxuICAgICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgICAgcGFkZGluZzogJzRweCAxMCUgM3B4JyxcbiAgICAgICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICAgICAgYm9yZGVyOiAnMXB4IHNvbGlkICNkYWRjZTAnLFxuICAgICAgICBmb250U2l6ZTogJzExcHgnLFxuICAgICAgICB0ZXh0VHJhbnNmb3JtOiAnbG93ZXJjYXNlJyxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAnNXB4JyxcbiAgICAgICAgb3V0bGluZTogJ25vbmUnLFxuICAgICAgICBmb250RmFtaWx5OiAnUm9ib3RvLEFyaWFsLHNhbnMtc2VyaWYnXG4gICAgICB9LFxuICAgICAgaW5wdXQyOiB7XG4gICAgICAgIGhlaWdodDogJzM4cHgnLFxuICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICBib3JkZXI6ICcxcHggc29saWQgI2RhZGNlMCcsXG4gICAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgICAgICBmb250U2l6ZTogJzExcHgnLFxuICAgICAgICB0ZXh0VHJhbnNmb3JtOiAnbG93ZXJjYXNlJyxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAnNXB4JyxcbiAgICAgICAgb3V0bGluZTogJ25vbmUnLFxuICAgICAgICBwYWRkaW5nTGVmdDogJzEwcHgnLFxuICAgICAgICBmb250RmFtaWx5OiAnUm9ib3RvLEFyaWFsLHNhbnMtc2VyaWYnXG4gICAgICB9LFxuICAgICAgbGFiZWw6IHtcbiAgICAgICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcbiAgICAgICAgYmFja2dyb3VuZDogJyNmZmYnLFxuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgdGV4dFRyYW5zZm9ybTogJ3VwcGVyY2FzZScsXG4gICAgICAgIGNvbG9yOiAnIzNjNDA0MycsXG4gICAgICAgIHdpZHRoOiAnMzVweCcsXG4gICAgICAgIHRvcDogJy02cHgnLFxuICAgICAgICBsZWZ0OiAnMCcsXG4gICAgICAgIHJpZ2h0OiAnMCcsXG4gICAgICAgIG1hcmdpbkxlZnQ6ICdhdXRvJyxcbiAgICAgICAgbWFyZ2luUmlnaHQ6ICdhdXRvJyxcbiAgICAgICAgZm9udEZhbWlseTogJ1JvYm90byxBcmlhbCxzYW5zLXNlcmlmJ1xuICAgICAgfSxcbiAgICAgIGxhYmVsMjoge1xuICAgICAgICBsZWZ0OiAnMTBweCcsXG4gICAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgICAgIGZvbnRTaXplOiAnMTJweCcsXG4gICAgICAgIGJhY2tncm91bmQ6ICcjZmZmJyxcbiAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgIHRleHRUcmFuc2Zvcm06ICd1cHBlcmNhc2UnLFxuICAgICAgICBjb2xvcjogJyMzYzQwNDMnLFxuICAgICAgICB3aWR0aDogJzMycHgnLFxuICAgICAgICB0b3A6ICctNnB4JyxcbiAgICAgICAgZm9udEZhbWlseTogJ1JvYm90byxBcmlhbCxzYW5zLXNlcmlmJ1xuICAgICAgfSxcbiAgICAgIHNpbmdsZToge1xuICAgICAgICBmbGV4R3JvdzogJzEnLFxuICAgICAgICBtYXJnaW46ICcwcHggNC40cHgnXG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICB2YXIgcmdiVmFsdWUgPSByZ2IuciArICcsICcgKyByZ2IuZyArICcsICcgKyByZ2IuYjtcbiAgdmFyIGhzbFZhbHVlID0gTWF0aC5yb3VuZChoc2wuaCkgKyAnXFx4QjAsICcgKyBNYXRoLnJvdW5kKGhzbC5zICogMTAwKSArICclLCAnICsgTWF0aC5yb3VuZChoc2wubCAqIDEwMCkgKyAnJSc7XG4gIHZhciBoc3ZWYWx1ZSA9IE1hdGgucm91bmQoaHN2LmgpICsgJ1xceEIwLCAnICsgTWF0aC5yb3VuZChoc3YucyAqIDEwMCkgKyAnJSwgJyArIE1hdGgucm91bmQoaHN2LnYgKiAxMDApICsgJyUnO1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICdkaXYnLFxuICAgIHsgc3R5bGU6IHN0eWxlcy53cmFwLCBjbGFzc05hbWU6ICdmbGV4Ym94LWZpeCcgfSxcbiAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICB7IHN0eWxlOiBzdHlsZXMuZmllbGRzIH0sXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgeyBzdHlsZTogc3R5bGVzLmRvdWJsZSB9LFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KEVkaXRhYmxlSW5wdXQsIHtcbiAgICAgICAgICBzdHlsZTogeyBpbnB1dDogc3R5bGVzLmlucHV0LCBsYWJlbDogc3R5bGVzLmxhYmVsIH0sXG4gICAgICAgICAgbGFiZWw6ICdoZXgnLFxuICAgICAgICAgIHZhbHVlOiBoZXgsXG4gICAgICAgICAgb25DaGFuZ2U6IGhhbmRsZUNoYW5nZVxuICAgICAgICB9KVxuICAgICAgKSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7IHN0eWxlOiBzdHlsZXMuY29sdW1uIH0sXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgeyBzdHlsZTogc3R5bGVzLnNpbmdsZSB9LFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWRpdGFibGVJbnB1dCwge1xuICAgICAgICAgICAgc3R5bGU6IHsgaW5wdXQ6IHN0eWxlcy5pbnB1dDIsIGxhYmVsOiBzdHlsZXMubGFiZWwyIH0sXG4gICAgICAgICAgICBsYWJlbDogJ3JnYicsXG4gICAgICAgICAgICB2YWx1ZTogcmdiVmFsdWUsXG4gICAgICAgICAgICBvbkNoYW5nZTogaGFuZGxlQ2hhbmdlXG4gICAgICAgICAgfSlcbiAgICAgICAgKSxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuc2luZ2xlIH0sXG4gICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChFZGl0YWJsZUlucHV0LCB7XG4gICAgICAgICAgICBzdHlsZTogeyBpbnB1dDogc3R5bGVzLmlucHV0MiwgbGFiZWw6IHN0eWxlcy5sYWJlbDIgfSxcbiAgICAgICAgICAgIGxhYmVsOiAnaHN2JyxcbiAgICAgICAgICAgIHZhbHVlOiBoc3ZWYWx1ZSxcbiAgICAgICAgICAgIG9uQ2hhbmdlOiBoYW5kbGVDaGFuZ2VcbiAgICAgICAgICB9KVxuICAgICAgICApLFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdkaXYnLFxuICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy5zaW5nbGUgfSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KEVkaXRhYmxlSW5wdXQsIHtcbiAgICAgICAgICAgIHN0eWxlOiB7IGlucHV0OiBzdHlsZXMuaW5wdXQyLCBsYWJlbDogc3R5bGVzLmxhYmVsMiB9LFxuICAgICAgICAgICAgbGFiZWw6ICdoc2wnLFxuICAgICAgICAgICAgdmFsdWU6IGhzbFZhbHVlLFxuICAgICAgICAgICAgb25DaGFuZ2U6IGhhbmRsZUNoYW5nZVxuICAgICAgICAgIH0pXG4gICAgICAgIClcbiAgICAgIClcbiAgICApXG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBHb29nbGVGaWVsZHM7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgcmVhY3RDU1MgZnJvbSAncmVhY3Rjc3MnO1xuaW1wb3J0IG1lcmdlIGZyb20gJ2xvZGFzaC1lcy9tZXJnZSc7XG5cbmltcG9ydCB7IENvbG9yV3JhcCwgU2F0dXJhdGlvbiwgSHVlIH0gZnJvbSAnLi4vY29tbW9uJztcbmltcG9ydCBHb29nbGVQb2ludGVyQ2lyY2xlIGZyb20gJy4vR29vZ2xlUG9pbnRlckNpcmNsZSc7XG5pbXBvcnQgR29vZ2xlUG9pbnRlciBmcm9tICcuL0dvb2dsZVBvaW50ZXInO1xuaW1wb3J0IEdvb2dsZUZpZWxkcyBmcm9tICcuL0dvb2dsZUZpZWxkcyc7XG5cbmV4cG9ydCB2YXIgR29vZ2xlID0gZnVuY3Rpb24gR29vZ2xlKF9yZWYpIHtcbiAgdmFyIHdpZHRoID0gX3JlZi53aWR0aCxcbiAgICAgIG9uQ2hhbmdlID0gX3JlZi5vbkNoYW5nZSxcbiAgICAgIHJnYiA9IF9yZWYucmdiLFxuICAgICAgaHNsID0gX3JlZi5oc2wsXG4gICAgICBoc3YgPSBfcmVmLmhzdixcbiAgICAgIGhleCA9IF9yZWYuaGV4LFxuICAgICAgaGVhZGVyID0gX3JlZi5oZWFkZXIsXG4gICAgICBfcmVmJHN0eWxlcyA9IF9yZWYuc3R5bGVzLFxuICAgICAgcGFzc2VkU3R5bGVzID0gX3JlZiRzdHlsZXMgPT09IHVuZGVmaW5lZCA/IHt9IDogX3JlZiRzdHlsZXMsXG4gICAgICBfcmVmJGNsYXNzTmFtZSA9IF9yZWYuY2xhc3NOYW1lLFxuICAgICAgY2xhc3NOYW1lID0gX3JlZiRjbGFzc05hbWUgPT09IHVuZGVmaW5lZCA/ICcnIDogX3JlZiRjbGFzc05hbWU7XG5cbiAgdmFyIHN0eWxlcyA9IHJlYWN0Q1NTKG1lcmdlKHtcbiAgICAnZGVmYXVsdCc6IHtcbiAgICAgIHBpY2tlcjoge1xuICAgICAgICB3aWR0aDogd2lkdGgsXG4gICAgICAgIGJhY2tncm91bmQ6ICcjZmZmJyxcbiAgICAgICAgYm9yZGVyOiAnMXB4IHNvbGlkICNkZmUxZTUnLFxuICAgICAgICBib3hTaXppbmc6ICdpbml0aWFsJyxcbiAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICBmbGV4V3JhcDogJ3dyYXAnLFxuICAgICAgICBib3JkZXJSYWRpdXM6ICc4cHggOHB4IDBweCAwcHgnXG4gICAgICB9LFxuICAgICAgaGVhZDoge1xuICAgICAgICBoZWlnaHQ6ICc1N3B4JyxcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgcGFkZGluZ1RvcDogJzE2cHgnLFxuICAgICAgICBwYWRkaW5nQm90dG9tOiAnMTZweCcsXG4gICAgICAgIHBhZGRpbmdMZWZ0OiAnMTZweCcsXG4gICAgICAgIGZvbnRTaXplOiAnMjBweCcsXG4gICAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgICAgICBmb250RmFtaWx5OiAnUm9ib3RvLVJlZ3VsYXIsSGVsdmV0aWNhTmV1ZSxBcmlhbCxzYW5zLXNlcmlmJ1xuICAgICAgfSxcbiAgICAgIHNhdHVyYXRpb246IHtcbiAgICAgICAgd2lkdGg6ICc3MCUnLFxuICAgICAgICBwYWRkaW5nOiAnMHB4JyxcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgIG92ZXJmbG93OiAnaGlkZGVuJ1xuICAgICAgfSxcbiAgICAgIHN3YXRjaDoge1xuICAgICAgICB3aWR0aDogJzMwJScsXG4gICAgICAgIGhlaWdodDogJzIyOHB4JyxcbiAgICAgICAgcGFkZGluZzogJzBweCcsXG4gICAgICAgIGJhY2tncm91bmQ6ICdyZ2JhKCcgKyByZ2IuciArICcsICcgKyByZ2IuZyArICcsICcgKyByZ2IuYiArICcsIDEpJyxcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgIG92ZXJmbG93OiAnaGlkZGVuJ1xuICAgICAgfSxcbiAgICAgIGJvZHk6IHtcbiAgICAgICAgbWFyZ2luOiAnYXV0bycsXG4gICAgICAgIHdpZHRoOiAnOTUlJ1xuICAgICAgfSxcbiAgICAgIGNvbnRyb2xzOiB7XG4gICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgICAgIGhlaWdodDogJzUycHgnLFxuICAgICAgICBwYWRkaW5nVG9wOiAnMjJweCdcbiAgICAgIH0sXG4gICAgICBjb2xvcjoge1xuICAgICAgICB3aWR0aDogJzMycHgnXG4gICAgICB9LFxuICAgICAgaHVlOiB7XG4gICAgICAgIGhlaWdodDogJzhweCcsXG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICBtYXJnaW46ICcwcHggMTZweCAwcHggMTZweCcsXG4gICAgICAgIHdpZHRoOiAnMTAwJSdcbiAgICAgIH0sXG4gICAgICBIdWU6IHtcbiAgICAgICAgcmFkaXVzOiAnMnB4J1xuICAgICAgfVxuICAgIH1cbiAgfSwgcGFzc2VkU3R5bGVzKSk7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICdkaXYnLFxuICAgIHsgc3R5bGU6IHN0eWxlcy5waWNrZXIsIGNsYXNzTmFtZTogJ2dvb2dsZS1waWNrZXIgJyArIGNsYXNzTmFtZSB9LFxuICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIHsgc3R5bGU6IHN0eWxlcy5oZWFkIH0sXG4gICAgICBoZWFkZXJcbiAgICApLFxuICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgc3R5bGU6IHN0eWxlcy5zd2F0Y2ggfSksXG4gICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgeyBzdHlsZTogc3R5bGVzLnNhdHVyYXRpb24gfSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoU2F0dXJhdGlvbiwge1xuICAgICAgICBoc2w6IGhzbCxcbiAgICAgICAgaHN2OiBoc3YsXG4gICAgICAgIHBvaW50ZXI6IEdvb2dsZVBvaW50ZXJDaXJjbGUsXG4gICAgICAgIG9uQ2hhbmdlOiBvbkNoYW5nZVxuICAgICAgfSlcbiAgICApLFxuICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIHsgc3R5bGU6IHN0eWxlcy5ib2R5IH0sXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgeyBzdHlsZTogc3R5bGVzLmNvbnRyb2xzLCBjbGFzc05hbWU6ICdmbGV4Ym94LWZpeCcgfSxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuaHVlIH0sXG4gICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChIdWUsIHtcbiAgICAgICAgICAgIHN0eWxlOiBzdHlsZXMuSHVlLFxuICAgICAgICAgICAgaHNsOiBoc2wsXG4gICAgICAgICAgICByYWRpdXM6ICc0cHgnLFxuICAgICAgICAgICAgcG9pbnRlcjogR29vZ2xlUG9pbnRlcixcbiAgICAgICAgICAgIG9uQ2hhbmdlOiBvbkNoYW5nZVxuICAgICAgICAgIH0pXG4gICAgICAgIClcbiAgICAgICksXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KEdvb2dsZUZpZWxkcywge1xuICAgICAgICByZ2I6IHJnYixcbiAgICAgICAgaHNsOiBoc2wsXG4gICAgICAgIGhleDogaGV4LFxuICAgICAgICBoc3Y6IGhzdixcbiAgICAgICAgb25DaGFuZ2U6IG9uQ2hhbmdlXG4gICAgICB9KVxuICAgIClcbiAgKTtcbn07XG5cbkdvb2dsZS5wcm9wVHlwZXMgPSB7XG4gIHdpZHRoOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMubnVtYmVyXSksXG4gIHN0eWxlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgaGVhZGVyOiBQcm9wVHlwZXMuc3RyaW5nXG5cbn07XG5cbkdvb2dsZS5kZWZhdWx0UHJvcHMgPSB7XG4gIHdpZHRoOiA2NTIsXG4gIHN0eWxlczoge30sXG4gIGhlYWRlcjogJ0NvbG9yIHBpY2tlcidcbn07XG5cbmV4cG9ydCBkZWZhdWx0IENvbG9yV3JhcChHb29nbGUpOyIsIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHJlYWN0LnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0Jzt2YXIgbD1TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKSxuPVN5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIikscD1TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIikscT1TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIikscj1TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIiksdD1TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIiksdT1TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKSx2PVN5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKSx3PVN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKSx4PVN5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpLHk9U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIiksej1TeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gQShhKXtpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhKXJldHVybiBudWxsO2E9eiYmYVt6XXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfVxudmFyIEI9e2lzTW91bnRlZDpmdW5jdGlvbigpe3JldHVybiExfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbigpe319LEM9T2JqZWN0LmFzc2lnbixEPXt9O2Z1bmN0aW9uIEUoYSxiLGUpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9RDt0aGlzLnVwZGF0ZXI9ZXx8Qn1FLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PXt9O1xuRS5wcm90b3R5cGUuc2V0U3RhdGU9ZnVuY3Rpb24oYSxiKXtpZihcIm9iamVjdFwiIT09dHlwZW9mIGEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZudWxsIT1hKXRocm93IEVycm9yKFwic2V0U3RhdGUoLi4uKTogdGFrZXMgYW4gb2JqZWN0IG9mIHN0YXRlIHZhcmlhYmxlcyB0byB1cGRhdGUgb3IgYSBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGFuIG9iamVjdCBvZiBzdGF0ZSB2YXJpYWJsZXMuXCIpO3RoaXMudXBkYXRlci5lbnF1ZXVlU2V0U3RhdGUodGhpcyxhLGIsXCJzZXRTdGF0ZVwiKX07RS5wcm90b3R5cGUuZm9yY2VVcGRhdGU9ZnVuY3Rpb24oYSl7dGhpcy51cGRhdGVyLmVucXVldWVGb3JjZVVwZGF0ZSh0aGlzLGEsXCJmb3JjZVVwZGF0ZVwiKX07ZnVuY3Rpb24gRigpe31GLnByb3RvdHlwZT1FLnByb3RvdHlwZTtmdW5jdGlvbiBHKGEsYixlKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUQ7dGhpcy51cGRhdGVyPWV8fEJ9dmFyIEg9Ry5wcm90b3R5cGU9bmV3IEY7XG5ILmNvbnN0cnVjdG9yPUc7QyhILEUucHJvdG90eXBlKTtILmlzUHVyZVJlYWN0Q29tcG9uZW50PSEwO3ZhciBJPUFycmF5LmlzQXJyYXksSj1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LEs9e2N1cnJlbnQ6bnVsbH0sTD17a2V5OiEwLHJlZjohMCxfX3NlbGY6ITAsX19zb3VyY2U6ITB9O1xuZnVuY3Rpb24gTShhLGIsZSl7dmFyIGQsYz17fSxrPW51bGwsaD1udWxsO2lmKG51bGwhPWIpZm9yKGQgaW4gdm9pZCAwIT09Yi5yZWYmJihoPWIucmVmKSx2b2lkIDAhPT1iLmtleSYmKGs9XCJcIitiLmtleSksYilKLmNhbGwoYixkKSYmIUwuaGFzT3duUHJvcGVydHkoZCkmJihjW2RdPWJbZF0pO3ZhciBnPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZyljLmNoaWxkcmVuPWU7ZWxzZSBpZigxPGcpe2Zvcih2YXIgZj1BcnJheShnKSxtPTA7bTxnO20rKylmW21dPWFyZ3VtZW50c1ttKzJdO2MuY2hpbGRyZW49Zn1pZihhJiZhLmRlZmF1bHRQcm9wcylmb3IoZCBpbiBnPWEuZGVmYXVsdFByb3BzLGcpdm9pZCAwPT09Y1tkXSYmKGNbZF09Z1tkXSk7cmV0dXJueyQkdHlwZW9mOmwsdHlwZTphLGtleTprLHJlZjpoLHByb3BzOmMsX293bmVyOksuY3VycmVudH19XG5mdW5jdGlvbiBOKGEsYil7cmV0dXJueyQkdHlwZW9mOmwsdHlwZTphLnR5cGUsa2V5OmIscmVmOmEucmVmLHByb3BzOmEucHJvcHMsX293bmVyOmEuX293bmVyfX1mdW5jdGlvbiBPKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1sfWZ1bmN0aW9uIGVzY2FwZShhKXt2YXIgYj17XCI9XCI6XCI9MFwiLFwiOlwiOlwiPTJcIn07cmV0dXJuXCIkXCIrYS5yZXBsYWNlKC9bPTpdL2csZnVuY3Rpb24oYSl7cmV0dXJuIGJbYV19KX12YXIgUD0vXFwvKy9nO2Z1bmN0aW9uIFEoYSxiKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZudWxsIT1hLmtleT9lc2NhcGUoXCJcIithLmtleSk6Yi50b1N0cmluZygzNil9XG5mdW5jdGlvbiBSKGEsYixlLGQsYyl7dmFyIGs9dHlwZW9mIGE7aWYoXCJ1bmRlZmluZWRcIj09PWt8fFwiYm9vbGVhblwiPT09aylhPW51bGw7dmFyIGg9ITE7aWYobnVsbD09PWEpaD0hMDtlbHNlIHN3aXRjaChrKXtjYXNlIFwic3RyaW5nXCI6Y2FzZSBcIm51bWJlclwiOmg9ITA7YnJlYWs7Y2FzZSBcIm9iamVjdFwiOnN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIGw6Y2FzZSBuOmg9ITB9fWlmKGgpcmV0dXJuIGg9YSxjPWMoaCksYT1cIlwiPT09ZD9cIi5cIitRKGgsMCk6ZCxJKGMpPyhlPVwiXCIsbnVsbCE9YSYmKGU9YS5yZXBsYWNlKFAsXCIkJi9cIikrXCIvXCIpLFIoYyxiLGUsXCJcIixmdW5jdGlvbihhKXtyZXR1cm4gYX0pKTpudWxsIT1jJiYoTyhjKSYmKGM9TihjLGUrKCFjLmtleXx8aCYmaC5rZXk9PT1jLmtleT9cIlwiOihcIlwiK2Mua2V5KS5yZXBsYWNlKFAsXCIkJi9cIikrXCIvXCIpK2EpKSxiLnB1c2goYykpLDE7aD0wO2Q9XCJcIj09PWQ/XCIuXCI6ZCtcIjpcIjtpZihJKGEpKWZvcih2YXIgZz0wO2c8YS5sZW5ndGg7ZysrKXtrPVxuYVtnXTt2YXIgZj1kK1EoayxnKTtoKz1SKGssYixlLGYsYyl9ZWxzZSBpZihmPUEoYSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGYpZm9yKGE9Zi5jYWxsKGEpLGc9MDshKGs9YS5uZXh0KCkpLmRvbmU7KWs9ay52YWx1ZSxmPWQrUShrLGcrKyksaCs9UihrLGIsZSxmLGMpO2Vsc2UgaWYoXCJvYmplY3RcIj09PWspdGhyb3cgYj1TdHJpbmcoYSksRXJyb3IoXCJPYmplY3RzIGFyZSBub3QgdmFsaWQgYXMgYSBSZWFjdCBjaGlsZCAoZm91bmQ6IFwiKyhcIltvYmplY3QgT2JqZWN0XVwiPT09Yj9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGEpLmpvaW4oXCIsIFwiKStcIn1cIjpiKStcIikuIElmIHlvdSBtZWFudCB0byByZW5kZXIgYSBjb2xsZWN0aW9uIG9mIGNoaWxkcmVuLCB1c2UgYW4gYXJyYXkgaW5zdGVhZC5cIik7cmV0dXJuIGh9XG5mdW5jdGlvbiBTKGEsYixlKXtpZihudWxsPT1hKXJldHVybiBhO3ZhciBkPVtdLGM9MDtSKGEsZCxcIlwiLFwiXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGIuY2FsbChlLGEsYysrKX0pO3JldHVybiBkfWZ1bmN0aW9uIFQoYSl7aWYoLTE9PT1hLl9zdGF0dXMpe3ZhciBiPWEuX3Jlc3VsdDtiPWIoKTtiLnRoZW4oZnVuY3Rpb24oYil7aWYoMD09PWEuX3N0YXR1c3x8LTE9PT1hLl9zdGF0dXMpYS5fc3RhdHVzPTEsYS5fcmVzdWx0PWJ9LGZ1bmN0aW9uKGIpe2lmKDA9PT1hLl9zdGF0dXN8fC0xPT09YS5fc3RhdHVzKWEuX3N0YXR1cz0yLGEuX3Jlc3VsdD1ifSk7LTE9PT1hLl9zdGF0dXMmJihhLl9zdGF0dXM9MCxhLl9yZXN1bHQ9Yil9aWYoMT09PWEuX3N0YXR1cylyZXR1cm4gYS5fcmVzdWx0LmRlZmF1bHQ7dGhyb3cgYS5fcmVzdWx0O31cbnZhciBVPXtjdXJyZW50Om51bGx9LFY9e3RyYW5zaXRpb246bnVsbH0sVz17UmVhY3RDdXJyZW50RGlzcGF0Y2hlcjpVLFJlYWN0Q3VycmVudEJhdGNoQ29uZmlnOlYsUmVhY3RDdXJyZW50T3duZXI6S307ZXhwb3J0cy5DaGlsZHJlbj17bWFwOlMsZm9yRWFjaDpmdW5jdGlvbihhLGIsZSl7UyhhLGZ1bmN0aW9uKCl7Yi5hcHBseSh0aGlzLGFyZ3VtZW50cyl9LGUpfSxjb3VudDpmdW5jdGlvbihhKXt2YXIgYj0wO1MoYSxmdW5jdGlvbigpe2IrK30pO3JldHVybiBifSx0b0FycmF5OmZ1bmN0aW9uKGEpe3JldHVybiBTKGEsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KXx8W119LG9ubHk6ZnVuY3Rpb24oYSl7aWYoIU8oYSkpdGhyb3cgRXJyb3IoXCJSZWFjdC5DaGlsZHJlbi5vbmx5IGV4cGVjdGVkIHRvIHJlY2VpdmUgYSBzaW5nbGUgUmVhY3QgZWxlbWVudCBjaGlsZC5cIik7cmV0dXJuIGF9fTtleHBvcnRzLkNvbXBvbmVudD1FO2V4cG9ydHMuRnJhZ21lbnQ9cDtcbmV4cG9ydHMuUHJvZmlsZXI9cjtleHBvcnRzLlB1cmVDb21wb25lbnQ9RztleHBvcnRzLlN0cmljdE1vZGU9cTtleHBvcnRzLlN1c3BlbnNlPXc7ZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD1XO1xuZXhwb3J0cy5jbG9uZUVsZW1lbnQ9ZnVuY3Rpb24oYSxiLGUpe2lmKG51bGw9PT1hfHx2b2lkIDA9PT1hKXRocm93IEVycm9yKFwiUmVhY3QuY2xvbmVFbGVtZW50KC4uLik6IFRoZSBhcmd1bWVudCBtdXN0IGJlIGEgUmVhY3QgZWxlbWVudCwgYnV0IHlvdSBwYXNzZWQgXCIrYStcIi5cIik7dmFyIGQ9Qyh7fSxhLnByb3BzKSxjPWEua2V5LGs9YS5yZWYsaD1hLl9vd25lcjtpZihudWxsIT1iKXt2b2lkIDAhPT1iLnJlZiYmKGs9Yi5yZWYsaD1LLmN1cnJlbnQpO3ZvaWQgMCE9PWIua2V5JiYoYz1cIlwiK2Iua2V5KTtpZihhLnR5cGUmJmEudHlwZS5kZWZhdWx0UHJvcHMpdmFyIGc9YS50eXBlLmRlZmF1bHRQcm9wcztmb3IoZiBpbiBiKUouY2FsbChiLGYpJiYhTC5oYXNPd25Qcm9wZXJ0eShmKSYmKGRbZl09dm9pZCAwPT09YltmXSYmdm9pZCAwIT09Zz9nW2ZdOmJbZl0pfXZhciBmPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZilkLmNoaWxkcmVuPWU7ZWxzZSBpZigxPGYpe2c9QXJyYXkoZik7XG5mb3IodmFyIG09MDttPGY7bSsrKWdbbV09YXJndW1lbnRzW20rMl07ZC5jaGlsZHJlbj1nfXJldHVybnskJHR5cGVvZjpsLHR5cGU6YS50eXBlLGtleTpjLHJlZjprLHByb3BzOmQsX293bmVyOmh9fTtleHBvcnRzLmNyZWF0ZUNvbnRleHQ9ZnVuY3Rpb24oYSl7YT17JCR0eXBlb2Y6dSxfY3VycmVudFZhbHVlOmEsX2N1cnJlbnRWYWx1ZTI6YSxfdGhyZWFkQ291bnQ6MCxQcm92aWRlcjpudWxsLENvbnN1bWVyOm51bGwsX2RlZmF1bHRWYWx1ZTpudWxsLF9nbG9iYWxOYW1lOm51bGx9O2EuUHJvdmlkZXI9eyQkdHlwZW9mOnQsX2NvbnRleHQ6YX07cmV0dXJuIGEuQ29uc3VtZXI9YX07ZXhwb3J0cy5jcmVhdGVFbGVtZW50PU07ZXhwb3J0cy5jcmVhdGVGYWN0b3J5PWZ1bmN0aW9uKGEpe3ZhciBiPU0uYmluZChudWxsLGEpO2IudHlwZT1hO3JldHVybiBifTtleHBvcnRzLmNyZWF0ZVJlZj1mdW5jdGlvbigpe3JldHVybntjdXJyZW50Om51bGx9fTtcbmV4cG9ydHMuZm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6dixyZW5kZXI6YX19O2V4cG9ydHMuaXNWYWxpZEVsZW1lbnQ9TztleHBvcnRzLmxhenk9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnksX3BheWxvYWQ6e19zdGF0dXM6LTEsX3Jlc3VsdDphfSxfaW5pdDpUfX07ZXhwb3J0cy5tZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJueyQkdHlwZW9mOngsdHlwZTphLGNvbXBhcmU6dm9pZCAwPT09Yj9udWxsOmJ9fTtleHBvcnRzLnN0YXJ0VHJhbnNpdGlvbj1mdW5jdGlvbihhKXt2YXIgYj1WLnRyYW5zaXRpb247Vi50cmFuc2l0aW9uPXt9O3RyeXthKCl9ZmluYWxseXtWLnRyYW5zaXRpb249Yn19O2V4cG9ydHMudW5zdGFibGVfYWN0PWZ1bmN0aW9uKCl7dGhyb3cgRXJyb3IoXCJhY3QoLi4uKSBpcyBub3Qgc3VwcG9ydGVkIGluIHByb2R1Y3Rpb24gYnVpbGRzIG9mIFJlYWN0LlwiKTt9O1xuZXhwb3J0cy51c2VDYWxsYmFjaz1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlQ2FsbGJhY2soYSxiKX07ZXhwb3J0cy51c2VDb250ZXh0PWZ1bmN0aW9uKGEpe3JldHVybiBVLmN1cnJlbnQudXNlQ29udGV4dChhKX07ZXhwb3J0cy51c2VEZWJ1Z1ZhbHVlPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVzZURlZmVycmVkVmFsdWU9ZnVuY3Rpb24oYSl7cmV0dXJuIFUuY3VycmVudC51c2VEZWZlcnJlZFZhbHVlKGEpfTtleHBvcnRzLnVzZUVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlRWZmZWN0KGEsYil9O2V4cG9ydHMudXNlSWQ9ZnVuY3Rpb24oKXtyZXR1cm4gVS5jdXJyZW50LnVzZUlkKCl9O2V4cG9ydHMudXNlSW1wZXJhdGl2ZUhhbmRsZT1mdW5jdGlvbihhLGIsZSl7cmV0dXJuIFUuY3VycmVudC51c2VJbXBlcmF0aXZlSGFuZGxlKGEsYixlKX07XG5leHBvcnRzLnVzZUluc2VydGlvbkVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlSW5zZXJ0aW9uRWZmZWN0KGEsYil9O2V4cG9ydHMudXNlTGF5b3V0RWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFUuY3VycmVudC51c2VMYXlvdXRFZmZlY3QoYSxiKX07ZXhwb3J0cy51c2VNZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFUuY3VycmVudC51c2VNZW1vKGEsYil9O2V4cG9ydHMudXNlUmVkdWNlcj1mdW5jdGlvbihhLGIsZSl7cmV0dXJuIFUuY3VycmVudC51c2VSZWR1Y2VyKGEsYixlKX07ZXhwb3J0cy51c2VSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIFUuY3VycmVudC51c2VSZWYoYSl9O2V4cG9ydHMudXNlU3RhdGU9ZnVuY3Rpb24oYSl7cmV0dXJuIFUuY3VycmVudC51c2VTdGF0ZShhKX07ZXhwb3J0cy51c2VTeW5jRXh0ZXJuYWxTdG9yZT1mdW5jdGlvbihhLGIsZSl7cmV0dXJuIFUuY3VycmVudC51c2VTeW5jRXh0ZXJuYWxTdG9yZShhLGIsZSl9O1xuZXhwb3J0cy51c2VUcmFuc2l0aW9uPWZ1bmN0aW9uKCl7cmV0dXJuIFUuY3VycmVudC51c2VUcmFuc2l0aW9uKCl9O2V4cG9ydHMudmVyc2lvbj1cIjE4LjIuMFwiO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmF1dG9wcmVmaXggPSB1bmRlZmluZWQ7XG5cbnZhciBfZm9yT3duMiA9IHJlcXVpcmUoJ2xvZGFzaC9mb3JPd24nKTtcblxudmFyIF9mb3JPd24zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZm9yT3duMik7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciB0cmFuc2Zvcm1zID0ge1xuICBib3JkZXJSYWRpdXM6IGZ1bmN0aW9uIGJvcmRlclJhZGl1cyh2YWx1ZSkge1xuICAgIHJldHVybiB7XG4gICAgICBtc0JvcmRlclJhZGl1czogdmFsdWUsXG4gICAgICBNb3pCb3JkZXJSYWRpdXM6IHZhbHVlLFxuICAgICAgT0JvcmRlclJhZGl1czogdmFsdWUsXG4gICAgICBXZWJraXRCb3JkZXJSYWRpdXM6IHZhbHVlLFxuICAgICAgYm9yZGVyUmFkaXVzOiB2YWx1ZVxuICAgIH07XG4gIH0sXG4gIGJveFNoYWRvdzogZnVuY3Rpb24gYm94U2hhZG93KHZhbHVlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1zQm94U2hhZG93OiB2YWx1ZSxcbiAgICAgIE1vekJveFNoYWRvdzogdmFsdWUsXG4gICAgICBPQm94U2hhZG93OiB2YWx1ZSxcbiAgICAgIFdlYmtpdEJveFNoYWRvdzogdmFsdWUsXG4gICAgICBib3hTaGFkb3c6IHZhbHVlXG4gICAgfTtcbiAgfSxcbiAgdXNlclNlbGVjdDogZnVuY3Rpb24gdXNlclNlbGVjdCh2YWx1ZSkge1xuICAgIHJldHVybiB7XG4gICAgICBXZWJraXRUb3VjaENhbGxvdXQ6IHZhbHVlLFxuICAgICAgS2h0bWxVc2VyU2VsZWN0OiB2YWx1ZSxcbiAgICAgIE1velVzZXJTZWxlY3Q6IHZhbHVlLFxuICAgICAgbXNVc2VyU2VsZWN0OiB2YWx1ZSxcbiAgICAgIFdlYmtpdFVzZXJTZWxlY3Q6IHZhbHVlLFxuICAgICAgdXNlclNlbGVjdDogdmFsdWVcbiAgICB9O1xuICB9LFxuXG4gIGZsZXg6IGZ1bmN0aW9uIGZsZXgodmFsdWUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgV2Via2l0Qm94RmxleDogdmFsdWUsXG4gICAgICBNb3pCb3hGbGV4OiB2YWx1ZSxcbiAgICAgIFdlYmtpdEZsZXg6IHZhbHVlLFxuICAgICAgbXNGbGV4OiB2YWx1ZSxcbiAgICAgIGZsZXg6IHZhbHVlXG4gICAgfTtcbiAgfSxcbiAgZmxleEJhc2lzOiBmdW5jdGlvbiBmbGV4QmFzaXModmFsdWUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgV2Via2l0RmxleEJhc2lzOiB2YWx1ZSxcbiAgICAgIGZsZXhCYXNpczogdmFsdWVcbiAgICB9O1xuICB9LFxuICBqdXN0aWZ5Q29udGVudDogZnVuY3Rpb24ganVzdGlmeUNvbnRlbnQodmFsdWUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgV2Via2l0SnVzdGlmeUNvbnRlbnQ6IHZhbHVlLFxuICAgICAganVzdGlmeUNvbnRlbnQ6IHZhbHVlXG4gICAgfTtcbiAgfSxcblxuICB0cmFuc2l0aW9uOiBmdW5jdGlvbiB0cmFuc2l0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1zVHJhbnNpdGlvbjogdmFsdWUsXG4gICAgICBNb3pUcmFuc2l0aW9uOiB2YWx1ZSxcbiAgICAgIE9UcmFuc2l0aW9uOiB2YWx1ZSxcbiAgICAgIFdlYmtpdFRyYW5zaXRpb246IHZhbHVlLFxuICAgICAgdHJhbnNpdGlvbjogdmFsdWVcbiAgICB9O1xuICB9LFxuXG4gIHRyYW5zZm9ybTogZnVuY3Rpb24gdHJhbnNmb3JtKHZhbHVlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1zVHJhbnNmb3JtOiB2YWx1ZSxcbiAgICAgIE1velRyYW5zZm9ybTogdmFsdWUsXG4gICAgICBPVHJhbnNmb3JtOiB2YWx1ZSxcbiAgICAgIFdlYmtpdFRyYW5zZm9ybTogdmFsdWUsXG4gICAgICB0cmFuc2Zvcm06IHZhbHVlXG4gICAgfTtcbiAgfSxcbiAgYWJzb2x1dGU6IGZ1bmN0aW9uIGFic29sdXRlKHZhbHVlKSB7XG4gICAgdmFyIGRpcmVjdGlvbiA9IHZhbHVlICYmIHZhbHVlLnNwbGl0KCcgJyk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgdG9wOiBkaXJlY3Rpb24gJiYgZGlyZWN0aW9uWzBdLFxuICAgICAgcmlnaHQ6IGRpcmVjdGlvbiAmJiBkaXJlY3Rpb25bMV0sXG4gICAgICBib3R0b206IGRpcmVjdGlvbiAmJiBkaXJlY3Rpb25bMl0sXG4gICAgICBsZWZ0OiBkaXJlY3Rpb24gJiYgZGlyZWN0aW9uWzNdXG4gICAgfTtcbiAgfSxcbiAgZXh0ZW5kOiBmdW5jdGlvbiBleHRlbmQobmFtZSwgb3RoZXJFbGVtZW50U3R5bGVzKSB7XG4gICAgdmFyIG90aGVyU3R5bGUgPSBvdGhlckVsZW1lbnRTdHlsZXNbbmFtZV07XG4gICAgaWYgKG90aGVyU3R5bGUpIHtcbiAgICAgIHJldHVybiBvdGhlclN0eWxlO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgJ2V4dGVuZCc6IG5hbWVcbiAgICB9O1xuICB9XG59O1xuXG52YXIgYXV0b3ByZWZpeCA9IGV4cG9ydHMuYXV0b3ByZWZpeCA9IGZ1bmN0aW9uIGF1dG9wcmVmaXgoZWxlbWVudHMpIHtcbiAgdmFyIHByZWZpeGVkID0ge307XG4gICgwLCBfZm9yT3duMy5kZWZhdWx0KShlbGVtZW50cywgZnVuY3Rpb24gKHN0eWxlcywgZWxlbWVudCkge1xuICAgIHZhciBleHBhbmRlZCA9IHt9O1xuICAgICgwLCBfZm9yT3duMy5kZWZhdWx0KShzdHlsZXMsIGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgICB2YXIgdHJhbnNmb3JtID0gdHJhbnNmb3Jtc1trZXldO1xuICAgICAgaWYgKHRyYW5zZm9ybSkge1xuICAgICAgICBleHBhbmRlZCA9IF9leHRlbmRzKHt9LCBleHBhbmRlZCwgdHJhbnNmb3JtKHZhbHVlKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBleHBhbmRlZFtrZXldID0gdmFsdWU7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcHJlZml4ZWRbZWxlbWVudF0gPSBleHBhbmRlZDtcbiAgfSk7XG4gIHJldHVybiBwcmVmaXhlZDtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGF1dG9wcmVmaXg7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5hY3RpdmUgPSB1bmRlZmluZWQ7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgYWN0aXZlID0gZXhwb3J0cy5hY3RpdmUgPSBmdW5jdGlvbiBhY3RpdmUoQ29tcG9uZW50KSB7XG4gIHZhciBTcGFuID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAnc3Bhbic7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKEFjdGl2ZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBBY3RpdmUoKSB7XG4gICAgICB2YXIgX3JlZjtcblxuICAgICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEFjdGl2ZSk7XG5cbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9yZWYgPSBBY3RpdmUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihBY3RpdmUpKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5zdGF0ZSA9IHsgYWN0aXZlOiBmYWxzZSB9LCBfdGhpcy5oYW5kbGVNb3VzZURvd24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5zZXRTdGF0ZSh7IGFjdGl2ZTogdHJ1ZSB9KTtcbiAgICAgIH0sIF90aGlzLmhhbmRsZU1vdXNlVXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5zZXRTdGF0ZSh7IGFjdGl2ZTogZmFsc2UgfSk7XG4gICAgICB9LCBfdGhpcy5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICBTcGFuLFxuICAgICAgICAgIHsgb25Nb3VzZURvd246IF90aGlzLmhhbmRsZU1vdXNlRG93biwgb25Nb3VzZVVwOiBfdGhpcy5oYW5kbGVNb3VzZVVwIH0sXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgX3RoaXMucHJvcHMsIF90aGlzLnN0YXRlKSlcbiAgICAgICAgKTtcbiAgICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICAgIH1cblxuICAgIHJldHVybiBBY3RpdmU7XG4gIH0oX3JlYWN0Mi5kZWZhdWx0LkNvbXBvbmVudCk7XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBhY3RpdmU7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5ob3ZlciA9IHVuZGVmaW5lZDtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBob3ZlciA9IGV4cG9ydHMuaG92ZXIgPSBmdW5jdGlvbiBob3ZlcihDb21wb25lbnQpIHtcbiAgdmFyIFNwYW4gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICdzcGFuJztcblxuICByZXR1cm4gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoSG92ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gSG92ZXIoKSB7XG4gICAgICB2YXIgX3JlZjtcblxuICAgICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEhvdmVyKTtcblxuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX3JlZiA9IEhvdmVyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoSG92ZXIpKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5zdGF0ZSA9IHsgaG92ZXI6IGZhbHNlIH0sIF90aGlzLmhhbmRsZU1vdXNlT3ZlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLnNldFN0YXRlKHsgaG92ZXI6IHRydWUgfSk7XG4gICAgICB9LCBfdGhpcy5oYW5kbGVNb3VzZU91dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLnNldFN0YXRlKHsgaG92ZXI6IGZhbHNlIH0pO1xuICAgICAgfSwgX3RoaXMucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgU3BhbixcbiAgICAgICAgICB7IG9uTW91c2VPdmVyOiBfdGhpcy5oYW5kbGVNb3VzZU92ZXIsIG9uTW91c2VPdXQ6IF90aGlzLmhhbmRsZU1vdXNlT3V0IH0sXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgX3RoaXMucHJvcHMsIF90aGlzLnN0YXRlKSlcbiAgICAgICAgKTtcbiAgICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICAgIH1cblxuICAgIHJldHVybiBIb3ZlcjtcbiAgfShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KTtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGhvdmVyOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZmxhdHRlbk5hbWVzID0gdW5kZWZpbmVkO1xuXG52YXIgX2lzU3RyaW5nMiA9IHJlcXVpcmUoJ2xvZGFzaC9pc1N0cmluZycpO1xuXG52YXIgX2lzU3RyaW5nMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lzU3RyaW5nMik7XG5cbnZhciBfZm9yT3duMiA9IHJlcXVpcmUoJ2xvZGFzaC9mb3JPd24nKTtcblxudmFyIF9mb3JPd24zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZm9yT3duMik7XG5cbnZhciBfaXNQbGFpbk9iamVjdDIgPSByZXF1aXJlKCdsb2Rhc2gvaXNQbGFpbk9iamVjdCcpO1xuXG52YXIgX2lzUGxhaW5PYmplY3QzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaXNQbGFpbk9iamVjdDIpO1xuXG52YXIgX21hcDIgPSByZXF1aXJlKCdsb2Rhc2gvbWFwJyk7XG5cbnZhciBfbWFwMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21hcDIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgZmxhdHRlbk5hbWVzID0gZXhwb3J0cy5mbGF0dGVuTmFtZXMgPSBmdW5jdGlvbiBmbGF0dGVuTmFtZXMoKSB7XG4gIHZhciB0aGluZ3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IFtdO1xuXG4gIHZhciBuYW1lcyA9IFtdO1xuXG4gICgwLCBfbWFwMy5kZWZhdWx0KSh0aGluZ3MsIGZ1bmN0aW9uICh0aGluZykge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHRoaW5nKSkge1xuICAgICAgZmxhdHRlbk5hbWVzKHRoaW5nKS5tYXAoZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIG5hbWVzLnB1c2gobmFtZSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKCgwLCBfaXNQbGFpbk9iamVjdDMuZGVmYXVsdCkodGhpbmcpKSB7XG4gICAgICAoMCwgX2Zvck93bjMuZGVmYXVsdCkodGhpbmcsIGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgICAgIHZhbHVlID09PSB0cnVlICYmIG5hbWVzLnB1c2goa2V5KTtcbiAgICAgICAgbmFtZXMucHVzaChrZXkgKyAnLScgKyB2YWx1ZSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKCgwLCBfaXNTdHJpbmczLmRlZmF1bHQpKHRoaW5nKSkge1xuICAgICAgbmFtZXMucHVzaCh0aGluZyk7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gbmFtZXM7XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBmbGF0dGVuTmFtZXM7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5SZWFjdENTUyA9IGV4cG9ydHMubG9vcCA9IGV4cG9ydHMuaGFuZGxlQWN0aXZlID0gZXhwb3J0cy5oYW5kbGVIb3ZlciA9IGV4cG9ydHMuaG92ZXIgPSB1bmRlZmluZWQ7XG5cbnZhciBfZmxhdHRlbk5hbWVzID0gcmVxdWlyZSgnLi9mbGF0dGVuTmFtZXMnKTtcblxudmFyIF9mbGF0dGVuTmFtZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZmxhdHRlbk5hbWVzKTtcblxudmFyIF9tZXJnZUNsYXNzZXMgPSByZXF1aXJlKCcuL21lcmdlQ2xhc3NlcycpO1xuXG52YXIgX21lcmdlQ2xhc3NlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9tZXJnZUNsYXNzZXMpO1xuXG52YXIgX2F1dG9wcmVmaXggPSByZXF1aXJlKCcuL2F1dG9wcmVmaXgnKTtcblxudmFyIF9hdXRvcHJlZml4MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2F1dG9wcmVmaXgpO1xuXG52YXIgX2hvdmVyMiA9IHJlcXVpcmUoJy4vY29tcG9uZW50cy9ob3ZlcicpO1xuXG52YXIgX2hvdmVyMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2hvdmVyMik7XG5cbnZhciBfYWN0aXZlID0gcmVxdWlyZSgnLi9jb21wb25lbnRzL2FjdGl2ZScpO1xuXG52YXIgX2FjdGl2ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9hY3RpdmUpO1xuXG52YXIgX2xvb3AyID0gcmVxdWlyZSgnLi9sb29wJyk7XG5cbnZhciBfbG9vcDMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9sb29wMik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuaG92ZXIgPSBfaG92ZXIzLmRlZmF1bHQ7XG5leHBvcnRzLmhhbmRsZUhvdmVyID0gX2hvdmVyMy5kZWZhdWx0O1xuZXhwb3J0cy5oYW5kbGVBY3RpdmUgPSBfYWN0aXZlMi5kZWZhdWx0O1xuZXhwb3J0cy5sb29wID0gX2xvb3AzLmRlZmF1bHQ7XG52YXIgUmVhY3RDU1MgPSBleHBvcnRzLlJlYWN0Q1NTID0gZnVuY3Rpb24gUmVhY3RDU1MoY2xhc3Nlcykge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYWN0aXZhdGlvbnMgPSBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYWN0aXZhdGlvbnNbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgdmFyIGFjdGl2ZU5hbWVzID0gKDAsIF9mbGF0dGVuTmFtZXMyLmRlZmF1bHQpKGFjdGl2YXRpb25zKTtcbiAgdmFyIG1lcmdlZCA9ICgwLCBfbWVyZ2VDbGFzc2VzMi5kZWZhdWx0KShjbGFzc2VzLCBhY3RpdmVOYW1lcyk7XG4gIHJldHVybiAoMCwgX2F1dG9wcmVmaXgyLmRlZmF1bHQpKG1lcmdlZCk7XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBSZWFjdENTUzsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG52YXIgbG9vcGFibGUgPSBmdW5jdGlvbiBsb29wYWJsZShpLCBsZW5ndGgpIHtcbiAgdmFyIHByb3BzID0ge307XG4gIHZhciBzZXRQcm9wID0gZnVuY3Rpb24gc2V0UHJvcChuYW1lKSB7XG4gICAgdmFyIHZhbHVlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB0cnVlO1xuXG4gICAgcHJvcHNbbmFtZV0gPSB2YWx1ZTtcbiAgfTtcblxuICBpID09PSAwICYmIHNldFByb3AoJ2ZpcnN0LWNoaWxkJyk7XG4gIGkgPT09IGxlbmd0aCAtIDEgJiYgc2V0UHJvcCgnbGFzdC1jaGlsZCcpO1xuICAoaSA9PT0gMCB8fCBpICUgMiA9PT0gMCkgJiYgc2V0UHJvcCgnZXZlbicpO1xuICBNYXRoLmFicyhpICUgMikgPT09IDEgJiYgc2V0UHJvcCgnb2RkJyk7XG4gIHNldFByb3AoJ250aC1jaGlsZCcsIGkpO1xuXG4gIHJldHVybiBwcm9wcztcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGxvb3BhYmxlOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMubWVyZ2VDbGFzc2VzID0gdW5kZWZpbmVkO1xuXG52YXIgX2Zvck93bjIgPSByZXF1aXJlKCdsb2Rhc2gvZm9yT3duJyk7XG5cbnZhciBfZm9yT3duMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Zvck93bjIpO1xuXG52YXIgX2Nsb25lRGVlcDIgPSByZXF1aXJlKCdsb2Rhc2gvY2xvbmVEZWVwJyk7XG5cbnZhciBfY2xvbmVEZWVwMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Nsb25lRGVlcDIpO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgbWVyZ2VDbGFzc2VzID0gZXhwb3J0cy5tZXJnZUNsYXNzZXMgPSBmdW5jdGlvbiBtZXJnZUNsYXNzZXMoY2xhc3Nlcykge1xuICB2YXIgYWN0aXZlTmFtZXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IFtdO1xuXG4gIHZhciBzdHlsZXMgPSBjbGFzc2VzLmRlZmF1bHQgJiYgKDAsIF9jbG9uZURlZXAzLmRlZmF1bHQpKGNsYXNzZXMuZGVmYXVsdCkgfHwge307XG4gIGFjdGl2ZU5hbWVzLm1hcChmdW5jdGlvbiAobmFtZSkge1xuICAgIHZhciB0b01lcmdlID0gY2xhc3Nlc1tuYW1lXTtcbiAgICBpZiAodG9NZXJnZSkge1xuICAgICAgKDAsIF9mb3JPd24zLmRlZmF1bHQpKHRvTWVyZ2UsIGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgICAgIGlmICghc3R5bGVzW2tleV0pIHtcbiAgICAgICAgICBzdHlsZXNba2V5XSA9IHt9O1xuICAgICAgICB9XG5cbiAgICAgICAgc3R5bGVzW2tleV0gPSBfZXh0ZW5kcyh7fSwgc3R5bGVzW2tleV0sIHRvTWVyZ2Vba2V5XSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmFtZTtcbiAgfSk7XG4gIHJldHVybiBzdHlsZXM7XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBtZXJnZUNsYXNzZXM7IiwiLy8gVGlueUNvbG9yIHYxLjQuMlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2Jncmlucy9UaW55Q29sb3Jcbi8vIEJyaWFuIEdyaW5zdGVhZCwgTUlUIExpY2Vuc2VcblxuKGZ1bmN0aW9uKE1hdGgpIHtcblxudmFyIHRyaW1MZWZ0ID0gL15cXHMrLyxcbiAgICB0cmltUmlnaHQgPSAvXFxzKyQvLFxuICAgIHRpbnlDb3VudGVyID0gMCxcbiAgICBtYXRoUm91bmQgPSBNYXRoLnJvdW5kLFxuICAgIG1hdGhNaW4gPSBNYXRoLm1pbixcbiAgICBtYXRoTWF4ID0gTWF0aC5tYXgsXG4gICAgbWF0aFJhbmRvbSA9IE1hdGgucmFuZG9tO1xuXG5mdW5jdGlvbiB0aW55Y29sb3IgKGNvbG9yLCBvcHRzKSB7XG5cbiAgICBjb2xvciA9IChjb2xvcikgPyBjb2xvciA6ICcnO1xuICAgIG9wdHMgPSBvcHRzIHx8IHsgfTtcblxuICAgIC8vIElmIGlucHV0IGlzIGFscmVhZHkgYSB0aW55Y29sb3IsIHJldHVybiBpdHNlbGZcbiAgICBpZiAoY29sb3IgaW5zdGFuY2VvZiB0aW55Y29sb3IpIHtcbiAgICAgICByZXR1cm4gY29sb3I7XG4gICAgfVxuICAgIC8vIElmIHdlIGFyZSBjYWxsZWQgYXMgYSBmdW5jdGlvbiwgY2FsbCB1c2luZyBuZXcgaW5zdGVhZFxuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiB0aW55Y29sb3IpKSB7XG4gICAgICAgIHJldHVybiBuZXcgdGlueWNvbG9yKGNvbG9yLCBvcHRzKTtcbiAgICB9XG5cbiAgICB2YXIgcmdiID0gaW5wdXRUb1JHQihjb2xvcik7XG4gICAgdGhpcy5fb3JpZ2luYWxJbnB1dCA9IGNvbG9yLFxuICAgIHRoaXMuX3IgPSByZ2IucixcbiAgICB0aGlzLl9nID0gcmdiLmcsXG4gICAgdGhpcy5fYiA9IHJnYi5iLFxuICAgIHRoaXMuX2EgPSByZ2IuYSxcbiAgICB0aGlzLl9yb3VuZEEgPSBtYXRoUm91bmQoMTAwKnRoaXMuX2EpIC8gMTAwLFxuICAgIHRoaXMuX2Zvcm1hdCA9IG9wdHMuZm9ybWF0IHx8IHJnYi5mb3JtYXQ7XG4gICAgdGhpcy5fZ3JhZGllbnRUeXBlID0gb3B0cy5ncmFkaWVudFR5cGU7XG5cbiAgICAvLyBEb24ndCBsZXQgdGhlIHJhbmdlIG9mIFswLDI1NV0gY29tZSBiYWNrIGluIFswLDFdLlxuICAgIC8vIFBvdGVudGlhbGx5IGxvc2UgYSBsaXR0bGUgYml0IG9mIHByZWNpc2lvbiBoZXJlLCBidXQgd2lsbCBmaXggaXNzdWVzIHdoZXJlXG4gICAgLy8gLjUgZ2V0cyBpbnRlcnByZXRlZCBhcyBoYWxmIG9mIHRoZSB0b3RhbCwgaW5zdGVhZCBvZiBoYWxmIG9mIDFcbiAgICAvLyBJZiBpdCB3YXMgc3VwcG9zZWQgdG8gYmUgMTI4LCB0aGlzIHdhcyBhbHJlYWR5IHRha2VuIGNhcmUgb2YgYnkgYGlucHV0VG9SZ2JgXG4gICAgaWYgKHRoaXMuX3IgPCAxKSB7IHRoaXMuX3IgPSBtYXRoUm91bmQodGhpcy5fcik7IH1cbiAgICBpZiAodGhpcy5fZyA8IDEpIHsgdGhpcy5fZyA9IG1hdGhSb3VuZCh0aGlzLl9nKTsgfVxuICAgIGlmICh0aGlzLl9iIDwgMSkgeyB0aGlzLl9iID0gbWF0aFJvdW5kKHRoaXMuX2IpOyB9XG5cbiAgICB0aGlzLl9vayA9IHJnYi5vaztcbiAgICB0aGlzLl90Y19pZCA9IHRpbnlDb3VudGVyKys7XG59XG5cbnRpbnljb2xvci5wcm90b3R5cGUgPSB7XG4gICAgaXNEYXJrOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0QnJpZ2h0bmVzcygpIDwgMTI4O1xuICAgIH0sXG4gICAgaXNMaWdodDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAhdGhpcy5pc0RhcmsoKTtcbiAgICB9LFxuICAgIGlzVmFsaWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fb2s7XG4gICAgfSxcbiAgICBnZXRPcmlnaW5hbElucHV0OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9vcmlnaW5hbElucHV0O1xuICAgIH0sXG4gICAgZ2V0Rm9ybWF0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Zvcm1hdDtcbiAgICB9LFxuICAgIGdldEFscGhhOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2E7XG4gICAgfSxcbiAgICBnZXRCcmlnaHRuZXNzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgLy9odHRwOi8vd3d3LnczLm9yZy9UUi9BRVJUI2NvbG9yLWNvbnRyYXN0XG4gICAgICAgIHZhciByZ2IgPSB0aGlzLnRvUmdiKCk7XG4gICAgICAgIHJldHVybiAocmdiLnIgKiAyOTkgKyByZ2IuZyAqIDU4NyArIHJnYi5iICogMTE0KSAvIDEwMDA7XG4gICAgfSxcbiAgICBnZXRMdW1pbmFuY2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICAvL2h0dHA6Ly93d3cudzMub3JnL1RSLzIwMDgvUkVDLVdDQUcyMC0yMDA4MTIxMS8jcmVsYXRpdmVsdW1pbmFuY2VkZWZcbiAgICAgICAgdmFyIHJnYiA9IHRoaXMudG9SZ2IoKTtcbiAgICAgICAgdmFyIFJzUkdCLCBHc1JHQiwgQnNSR0IsIFIsIEcsIEI7XG4gICAgICAgIFJzUkdCID0gcmdiLnIvMjU1O1xuICAgICAgICBHc1JHQiA9IHJnYi5nLzI1NTtcbiAgICAgICAgQnNSR0IgPSByZ2IuYi8yNTU7XG5cbiAgICAgICAgaWYgKFJzUkdCIDw9IDAuMDM5MjgpIHtSID0gUnNSR0IgLyAxMi45Mjt9IGVsc2Uge1IgPSBNYXRoLnBvdygoKFJzUkdCICsgMC4wNTUpIC8gMS4wNTUpLCAyLjQpO31cbiAgICAgICAgaWYgKEdzUkdCIDw9IDAuMDM5MjgpIHtHID0gR3NSR0IgLyAxMi45Mjt9IGVsc2Uge0cgPSBNYXRoLnBvdygoKEdzUkdCICsgMC4wNTUpIC8gMS4wNTUpLCAyLjQpO31cbiAgICAgICAgaWYgKEJzUkdCIDw9IDAuMDM5MjgpIHtCID0gQnNSR0IgLyAxMi45Mjt9IGVsc2Uge0IgPSBNYXRoLnBvdygoKEJzUkdCICsgMC4wNTUpIC8gMS4wNTUpLCAyLjQpO31cbiAgICAgICAgcmV0dXJuICgwLjIxMjYgKiBSKSArICgwLjcxNTIgKiBHKSArICgwLjA3MjIgKiBCKTtcbiAgICB9LFxuICAgIHNldEFscGhhOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICB0aGlzLl9hID0gYm91bmRBbHBoYSh2YWx1ZSk7XG4gICAgICAgIHRoaXMuX3JvdW5kQSA9IG1hdGhSb3VuZCgxMDAqdGhpcy5fYSkgLyAxMDA7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgdG9Ic3Y6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgaHN2ID0gcmdiVG9Ic3YodGhpcy5fciwgdGhpcy5fZywgdGhpcy5fYik7XG4gICAgICAgIHJldHVybiB7IGg6IGhzdi5oICogMzYwLCBzOiBoc3YucywgdjogaHN2LnYsIGE6IHRoaXMuX2EgfTtcbiAgICB9LFxuICAgIHRvSHN2U3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGhzdiA9IHJnYlRvSHN2KHRoaXMuX3IsIHRoaXMuX2csIHRoaXMuX2IpO1xuICAgICAgICB2YXIgaCA9IG1hdGhSb3VuZChoc3YuaCAqIDM2MCksIHMgPSBtYXRoUm91bmQoaHN2LnMgKiAxMDApLCB2ID0gbWF0aFJvdW5kKGhzdi52ICogMTAwKTtcbiAgICAgICAgcmV0dXJuICh0aGlzLl9hID09IDEpID9cbiAgICAgICAgICBcImhzdihcIiAgKyBoICsgXCIsIFwiICsgcyArIFwiJSwgXCIgKyB2ICsgXCIlKVwiIDpcbiAgICAgICAgICBcImhzdmEoXCIgKyBoICsgXCIsIFwiICsgcyArIFwiJSwgXCIgKyB2ICsgXCIlLCBcIisgdGhpcy5fcm91bmRBICsgXCIpXCI7XG4gICAgfSxcbiAgICB0b0hzbDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBoc2wgPSByZ2JUb0hzbCh0aGlzLl9yLCB0aGlzLl9nLCB0aGlzLl9iKTtcbiAgICAgICAgcmV0dXJuIHsgaDogaHNsLmggKiAzNjAsIHM6IGhzbC5zLCBsOiBoc2wubCwgYTogdGhpcy5fYSB9O1xuICAgIH0sXG4gICAgdG9Ic2xTdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgaHNsID0gcmdiVG9Ic2wodGhpcy5fciwgdGhpcy5fZywgdGhpcy5fYik7XG4gICAgICAgIHZhciBoID0gbWF0aFJvdW5kKGhzbC5oICogMzYwKSwgcyA9IG1hdGhSb3VuZChoc2wucyAqIDEwMCksIGwgPSBtYXRoUm91bmQoaHNsLmwgKiAxMDApO1xuICAgICAgICByZXR1cm4gKHRoaXMuX2EgPT0gMSkgP1xuICAgICAgICAgIFwiaHNsKFwiICArIGggKyBcIiwgXCIgKyBzICsgXCIlLCBcIiArIGwgKyBcIiUpXCIgOlxuICAgICAgICAgIFwiaHNsYShcIiArIGggKyBcIiwgXCIgKyBzICsgXCIlLCBcIiArIGwgKyBcIiUsIFwiKyB0aGlzLl9yb3VuZEEgKyBcIilcIjtcbiAgICB9LFxuICAgIHRvSGV4OiBmdW5jdGlvbihhbGxvdzNDaGFyKSB7XG4gICAgICAgIHJldHVybiByZ2JUb0hleCh0aGlzLl9yLCB0aGlzLl9nLCB0aGlzLl9iLCBhbGxvdzNDaGFyKTtcbiAgICB9LFxuICAgIHRvSGV4U3RyaW5nOiBmdW5jdGlvbihhbGxvdzNDaGFyKSB7XG4gICAgICAgIHJldHVybiAnIycgKyB0aGlzLnRvSGV4KGFsbG93M0NoYXIpO1xuICAgIH0sXG4gICAgdG9IZXg4OiBmdW5jdGlvbihhbGxvdzRDaGFyKSB7XG4gICAgICAgIHJldHVybiByZ2JhVG9IZXgodGhpcy5fciwgdGhpcy5fZywgdGhpcy5fYiwgdGhpcy5fYSwgYWxsb3c0Q2hhcik7XG4gICAgfSxcbiAgICB0b0hleDhTdHJpbmc6IGZ1bmN0aW9uKGFsbG93NENoYXIpIHtcbiAgICAgICAgcmV0dXJuICcjJyArIHRoaXMudG9IZXg4KGFsbG93NENoYXIpO1xuICAgIH0sXG4gICAgdG9SZ2I6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4geyByOiBtYXRoUm91bmQodGhpcy5fciksIGc6IG1hdGhSb3VuZCh0aGlzLl9nKSwgYjogbWF0aFJvdW5kKHRoaXMuX2IpLCBhOiB0aGlzLl9hIH07XG4gICAgfSxcbiAgICB0b1JnYlN0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAodGhpcy5fYSA9PSAxKSA/XG4gICAgICAgICAgXCJyZ2IoXCIgICsgbWF0aFJvdW5kKHRoaXMuX3IpICsgXCIsIFwiICsgbWF0aFJvdW5kKHRoaXMuX2cpICsgXCIsIFwiICsgbWF0aFJvdW5kKHRoaXMuX2IpICsgXCIpXCIgOlxuICAgICAgICAgIFwicmdiYShcIiArIG1hdGhSb3VuZCh0aGlzLl9yKSArIFwiLCBcIiArIG1hdGhSb3VuZCh0aGlzLl9nKSArIFwiLCBcIiArIG1hdGhSb3VuZCh0aGlzLl9iKSArIFwiLCBcIiArIHRoaXMuX3JvdW5kQSArIFwiKVwiO1xuICAgIH0sXG4gICAgdG9QZXJjZW50YWdlUmdiOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHsgcjogbWF0aFJvdW5kKGJvdW5kMDEodGhpcy5fciwgMjU1KSAqIDEwMCkgKyBcIiVcIiwgZzogbWF0aFJvdW5kKGJvdW5kMDEodGhpcy5fZywgMjU1KSAqIDEwMCkgKyBcIiVcIiwgYjogbWF0aFJvdW5kKGJvdW5kMDEodGhpcy5fYiwgMjU1KSAqIDEwMCkgKyBcIiVcIiwgYTogdGhpcy5fYSB9O1xuICAgIH0sXG4gICAgdG9QZXJjZW50YWdlUmdiU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLl9hID09IDEpID9cbiAgICAgICAgICBcInJnYihcIiAgKyBtYXRoUm91bmQoYm91bmQwMSh0aGlzLl9yLCAyNTUpICogMTAwKSArIFwiJSwgXCIgKyBtYXRoUm91bmQoYm91bmQwMSh0aGlzLl9nLCAyNTUpICogMTAwKSArIFwiJSwgXCIgKyBtYXRoUm91bmQoYm91bmQwMSh0aGlzLl9iLCAyNTUpICogMTAwKSArIFwiJSlcIiA6XG4gICAgICAgICAgXCJyZ2JhKFwiICsgbWF0aFJvdW5kKGJvdW5kMDEodGhpcy5fciwgMjU1KSAqIDEwMCkgKyBcIiUsIFwiICsgbWF0aFJvdW5kKGJvdW5kMDEodGhpcy5fZywgMjU1KSAqIDEwMCkgKyBcIiUsIFwiICsgbWF0aFJvdW5kKGJvdW5kMDEodGhpcy5fYiwgMjU1KSAqIDEwMCkgKyBcIiUsIFwiICsgdGhpcy5fcm91bmRBICsgXCIpXCI7XG4gICAgfSxcbiAgICB0b05hbWU6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5fYSA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIFwidHJhbnNwYXJlbnRcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl9hIDwgMSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGhleE5hbWVzW3JnYlRvSGV4KHRoaXMuX3IsIHRoaXMuX2csIHRoaXMuX2IsIHRydWUpXSB8fCBmYWxzZTtcbiAgICB9LFxuICAgIHRvRmlsdGVyOiBmdW5jdGlvbihzZWNvbmRDb2xvcikge1xuICAgICAgICB2YXIgaGV4OFN0cmluZyA9ICcjJyArIHJnYmFUb0FyZ2JIZXgodGhpcy5fciwgdGhpcy5fZywgdGhpcy5fYiwgdGhpcy5fYSk7XG4gICAgICAgIHZhciBzZWNvbmRIZXg4U3RyaW5nID0gaGV4OFN0cmluZztcbiAgICAgICAgdmFyIGdyYWRpZW50VHlwZSA9IHRoaXMuX2dyYWRpZW50VHlwZSA/IFwiR3JhZGllbnRUeXBlID0gMSwgXCIgOiBcIlwiO1xuXG4gICAgICAgIGlmIChzZWNvbmRDb2xvcikge1xuICAgICAgICAgICAgdmFyIHMgPSB0aW55Y29sb3Ioc2Vjb25kQ29sb3IpO1xuICAgICAgICAgICAgc2Vjb25kSGV4OFN0cmluZyA9ICcjJyArIHJnYmFUb0FyZ2JIZXgocy5fciwgcy5fZywgcy5fYiwgcy5fYSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gXCJwcm9naWQ6RFhJbWFnZVRyYW5zZm9ybS5NaWNyb3NvZnQuZ3JhZGllbnQoXCIrZ3JhZGllbnRUeXBlK1wic3RhcnRDb2xvcnN0cj1cIitoZXg4U3RyaW5nK1wiLGVuZENvbG9yc3RyPVwiK3NlY29uZEhleDhTdHJpbmcrXCIpXCI7XG4gICAgfSxcbiAgICB0b1N0cmluZzogZnVuY3Rpb24oZm9ybWF0KSB7XG4gICAgICAgIHZhciBmb3JtYXRTZXQgPSAhIWZvcm1hdDtcbiAgICAgICAgZm9ybWF0ID0gZm9ybWF0IHx8IHRoaXMuX2Zvcm1hdDtcblxuICAgICAgICB2YXIgZm9ybWF0dGVkU3RyaW5nID0gZmFsc2U7XG4gICAgICAgIHZhciBoYXNBbHBoYSA9IHRoaXMuX2EgPCAxICYmIHRoaXMuX2EgPj0gMDtcbiAgICAgICAgdmFyIG5lZWRzQWxwaGFGb3JtYXQgPSAhZm9ybWF0U2V0ICYmIGhhc0FscGhhICYmIChmb3JtYXQgPT09IFwiaGV4XCIgfHwgZm9ybWF0ID09PSBcImhleDZcIiB8fCBmb3JtYXQgPT09IFwiaGV4M1wiIHx8IGZvcm1hdCA9PT0gXCJoZXg0XCIgfHwgZm9ybWF0ID09PSBcImhleDhcIiB8fCBmb3JtYXQgPT09IFwibmFtZVwiKTtcblxuICAgICAgICBpZiAobmVlZHNBbHBoYUZvcm1hdCkge1xuICAgICAgICAgICAgLy8gU3BlY2lhbCBjYXNlIGZvciBcInRyYW5zcGFyZW50XCIsIGFsbCBvdGhlciBub24tYWxwaGEgZm9ybWF0c1xuICAgICAgICAgICAgLy8gd2lsbCByZXR1cm4gcmdiYSB3aGVuIHRoZXJlIGlzIHRyYW5zcGFyZW5jeS5cbiAgICAgICAgICAgIGlmIChmb3JtYXQgPT09IFwibmFtZVwiICYmIHRoaXMuX2EgPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy50b05hbWUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRvUmdiU3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gXCJyZ2JcIikge1xuICAgICAgICAgICAgZm9ybWF0dGVkU3RyaW5nID0gdGhpcy50b1JnYlN0cmluZygpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmb3JtYXQgPT09IFwicHJnYlwiKSB7XG4gICAgICAgICAgICBmb3JtYXR0ZWRTdHJpbmcgPSB0aGlzLnRvUGVyY2VudGFnZVJnYlN0cmluZygpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmb3JtYXQgPT09IFwiaGV4XCIgfHwgZm9ybWF0ID09PSBcImhleDZcIikge1xuICAgICAgICAgICAgZm9ybWF0dGVkU3RyaW5nID0gdGhpcy50b0hleFN0cmluZygpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmb3JtYXQgPT09IFwiaGV4M1wiKSB7XG4gICAgICAgICAgICBmb3JtYXR0ZWRTdHJpbmcgPSB0aGlzLnRvSGV4U3RyaW5nKHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmb3JtYXQgPT09IFwiaGV4NFwiKSB7XG4gICAgICAgICAgICBmb3JtYXR0ZWRTdHJpbmcgPSB0aGlzLnRvSGV4OFN0cmluZyh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZm9ybWF0ID09PSBcImhleDhcIikge1xuICAgICAgICAgICAgZm9ybWF0dGVkU3RyaW5nID0gdGhpcy50b0hleDhTdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZm9ybWF0ID09PSBcIm5hbWVcIikge1xuICAgICAgICAgICAgZm9ybWF0dGVkU3RyaW5nID0gdGhpcy50b05hbWUoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZm9ybWF0ID09PSBcImhzbFwiKSB7XG4gICAgICAgICAgICBmb3JtYXR0ZWRTdHJpbmcgPSB0aGlzLnRvSHNsU3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gXCJoc3ZcIikge1xuICAgICAgICAgICAgZm9ybWF0dGVkU3RyaW5nID0gdGhpcy50b0hzdlN0cmluZygpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZvcm1hdHRlZFN0cmluZyB8fCB0aGlzLnRvSGV4U3RyaW5nKCk7XG4gICAgfSxcbiAgICBjbG9uZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aW55Y29sb3IodGhpcy50b1N0cmluZygpKTtcbiAgICB9LFxuXG4gICAgX2FwcGx5TW9kaWZpY2F0aW9uOiBmdW5jdGlvbihmbiwgYXJncykge1xuICAgICAgICB2YXIgY29sb3IgPSBmbi5hcHBseShudWxsLCBbdGhpc10uY29uY2F0KFtdLnNsaWNlLmNhbGwoYXJncykpKTtcbiAgICAgICAgdGhpcy5fciA9IGNvbG9yLl9yO1xuICAgICAgICB0aGlzLl9nID0gY29sb3IuX2c7XG4gICAgICAgIHRoaXMuX2IgPSBjb2xvci5fYjtcbiAgICAgICAgdGhpcy5zZXRBbHBoYShjb2xvci5fYSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgbGlnaHRlbjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hcHBseU1vZGlmaWNhdGlvbihsaWdodGVuLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgYnJpZ2h0ZW46IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYXBwbHlNb2RpZmljYXRpb24oYnJpZ2h0ZW4sIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBkYXJrZW46IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYXBwbHlNb2RpZmljYXRpb24oZGFya2VuLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgZGVzYXR1cmF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hcHBseU1vZGlmaWNhdGlvbihkZXNhdHVyYXRlLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgc2F0dXJhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYXBwbHlNb2RpZmljYXRpb24oc2F0dXJhdGUsIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBncmV5c2NhbGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYXBwbHlNb2RpZmljYXRpb24oZ3JleXNjYWxlLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgc3BpbjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hcHBseU1vZGlmaWNhdGlvbihzcGluLCBhcmd1bWVudHMpO1xuICAgIH0sXG5cbiAgICBfYXBwbHlDb21iaW5hdGlvbjogZnVuY3Rpb24oZm4sIGFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIGZuLmFwcGx5KG51bGwsIFt0aGlzXS5jb25jYXQoW10uc2xpY2UuY2FsbChhcmdzKSkpO1xuICAgIH0sXG4gICAgYW5hbG9nb3VzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FwcGx5Q29tYmluYXRpb24oYW5hbG9nb3VzLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgY29tcGxlbWVudDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hcHBseUNvbWJpbmF0aW9uKGNvbXBsZW1lbnQsIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBtb25vY2hyb21hdGljOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FwcGx5Q29tYmluYXRpb24obW9ub2Nocm9tYXRpYywgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIHNwbGl0Y29tcGxlbWVudDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hcHBseUNvbWJpbmF0aW9uKHNwbGl0Y29tcGxlbWVudCwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIHRyaWFkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FwcGx5Q29tYmluYXRpb24odHJpYWQsIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICB0ZXRyYWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYXBwbHlDb21iaW5hdGlvbih0ZXRyYWQsIGFyZ3VtZW50cyk7XG4gICAgfVxufTtcblxuLy8gSWYgaW5wdXQgaXMgYW4gb2JqZWN0LCBmb3JjZSAxIGludG8gXCIxLjBcIiB0byBoYW5kbGUgcmF0aW9zIHByb3Blcmx5XG4vLyBTdHJpbmcgaW5wdXQgcmVxdWlyZXMgXCIxLjBcIiBhcyBpbnB1dCwgc28gMSB3aWxsIGJlIHRyZWF0ZWQgYXMgMVxudGlueWNvbG9yLmZyb21SYXRpbyA9IGZ1bmN0aW9uKGNvbG9yLCBvcHRzKSB7XG4gICAgaWYgKHR5cGVvZiBjb2xvciA9PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIHZhciBuZXdDb2xvciA9IHt9O1xuICAgICAgICBmb3IgKHZhciBpIGluIGNvbG9yKSB7XG4gICAgICAgICAgICBpZiAoY29sb3IuaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoaSA9PT0gXCJhXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3Q29sb3JbaV0gPSBjb2xvcltpXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld0NvbG9yW2ldID0gY29udmVydFRvUGVyY2VudGFnZShjb2xvcltpXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbG9yID0gbmV3Q29sb3I7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRpbnljb2xvcihjb2xvciwgb3B0cyk7XG59O1xuXG4vLyBHaXZlbiBhIHN0cmluZyBvciBvYmplY3QsIGNvbnZlcnQgdGhhdCBpbnB1dCB0byBSR0Jcbi8vIFBvc3NpYmxlIHN0cmluZyBpbnB1dHM6XG4vL1xuLy8gICAgIFwicmVkXCJcbi8vICAgICBcIiNmMDBcIiBvciBcImYwMFwiXG4vLyAgICAgXCIjZmYwMDAwXCIgb3IgXCJmZjAwMDBcIlxuLy8gICAgIFwiI2ZmMDAwMDAwXCIgb3IgXCJmZjAwMDAwMFwiXG4vLyAgICAgXCJyZ2IgMjU1IDAgMFwiIG9yIFwicmdiICgyNTUsIDAsIDApXCJcbi8vICAgICBcInJnYiAxLjAgMCAwXCIgb3IgXCJyZ2IgKDEsIDAsIDApXCJcbi8vICAgICBcInJnYmEgKDI1NSwgMCwgMCwgMSlcIiBvciBcInJnYmEgMjU1LCAwLCAwLCAxXCJcbi8vICAgICBcInJnYmEgKDEuMCwgMCwgMCwgMSlcIiBvciBcInJnYmEgMS4wLCAwLCAwLCAxXCJcbi8vICAgICBcImhzbCgwLCAxMDAlLCA1MCUpXCIgb3IgXCJoc2wgMCAxMDAlIDUwJVwiXG4vLyAgICAgXCJoc2xhKDAsIDEwMCUsIDUwJSwgMSlcIiBvciBcImhzbGEgMCAxMDAlIDUwJSwgMVwiXG4vLyAgICAgXCJoc3YoMCwgMTAwJSwgMTAwJSlcIiBvciBcImhzdiAwIDEwMCUgMTAwJVwiXG4vL1xuZnVuY3Rpb24gaW5wdXRUb1JHQihjb2xvcikge1xuXG4gICAgdmFyIHJnYiA9IHsgcjogMCwgZzogMCwgYjogMCB9O1xuICAgIHZhciBhID0gMTtcbiAgICB2YXIgcyA9IG51bGw7XG4gICAgdmFyIHYgPSBudWxsO1xuICAgIHZhciBsID0gbnVsbDtcbiAgICB2YXIgb2sgPSBmYWxzZTtcbiAgICB2YXIgZm9ybWF0ID0gZmFsc2U7XG5cbiAgICBpZiAodHlwZW9mIGNvbG9yID09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgY29sb3IgPSBzdHJpbmdJbnB1dFRvT2JqZWN0KGNvbG9yKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGNvbG9yID09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgaWYgKGlzVmFsaWRDU1NVbml0KGNvbG9yLnIpICYmIGlzVmFsaWRDU1NVbml0KGNvbG9yLmcpICYmIGlzVmFsaWRDU1NVbml0KGNvbG9yLmIpKSB7XG4gICAgICAgICAgICByZ2IgPSByZ2JUb1JnYihjb2xvci5yLCBjb2xvci5nLCBjb2xvci5iKTtcbiAgICAgICAgICAgIG9rID0gdHJ1ZTtcbiAgICAgICAgICAgIGZvcm1hdCA9IFN0cmluZyhjb2xvci5yKS5zdWJzdHIoLTEpID09PSBcIiVcIiA/IFwicHJnYlwiIDogXCJyZ2JcIjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc1ZhbGlkQ1NTVW5pdChjb2xvci5oKSAmJiBpc1ZhbGlkQ1NTVW5pdChjb2xvci5zKSAmJiBpc1ZhbGlkQ1NTVW5pdChjb2xvci52KSkge1xuICAgICAgICAgICAgcyA9IGNvbnZlcnRUb1BlcmNlbnRhZ2UoY29sb3Iucyk7XG4gICAgICAgICAgICB2ID0gY29udmVydFRvUGVyY2VudGFnZShjb2xvci52KTtcbiAgICAgICAgICAgIHJnYiA9IGhzdlRvUmdiKGNvbG9yLmgsIHMsIHYpO1xuICAgICAgICAgICAgb2sgPSB0cnVlO1xuICAgICAgICAgICAgZm9ybWF0ID0gXCJoc3ZcIjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc1ZhbGlkQ1NTVW5pdChjb2xvci5oKSAmJiBpc1ZhbGlkQ1NTVW5pdChjb2xvci5zKSAmJiBpc1ZhbGlkQ1NTVW5pdChjb2xvci5sKSkge1xuICAgICAgICAgICAgcyA9IGNvbnZlcnRUb1BlcmNlbnRhZ2UoY29sb3Iucyk7XG4gICAgICAgICAgICBsID0gY29udmVydFRvUGVyY2VudGFnZShjb2xvci5sKTtcbiAgICAgICAgICAgIHJnYiA9IGhzbFRvUmdiKGNvbG9yLmgsIHMsIGwpO1xuICAgICAgICAgICAgb2sgPSB0cnVlO1xuICAgICAgICAgICAgZm9ybWF0ID0gXCJoc2xcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb2xvci5oYXNPd25Qcm9wZXJ0eShcImFcIikpIHtcbiAgICAgICAgICAgIGEgPSBjb2xvci5hO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYSA9IGJvdW5kQWxwaGEoYSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBvazogb2ssXG4gICAgICAgIGZvcm1hdDogY29sb3IuZm9ybWF0IHx8IGZvcm1hdCxcbiAgICAgICAgcjogbWF0aE1pbigyNTUsIG1hdGhNYXgocmdiLnIsIDApKSxcbiAgICAgICAgZzogbWF0aE1pbigyNTUsIG1hdGhNYXgocmdiLmcsIDApKSxcbiAgICAgICAgYjogbWF0aE1pbigyNTUsIG1hdGhNYXgocmdiLmIsIDApKSxcbiAgICAgICAgYTogYVxuICAgIH07XG59XG5cblxuLy8gQ29udmVyc2lvbiBGdW5jdGlvbnNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8vIGByZ2JUb0hzbGAsIGByZ2JUb0hzdmAsIGBoc2xUb1JnYmAsIGBoc3ZUb1JnYmAgbW9kaWZpZWQgZnJvbTpcbi8vIDxodHRwOi8vbWppamFja3Nvbi5jb20vMjAwOC8wMi9yZ2ItdG8taHNsLWFuZC1yZ2ItdG8taHN2LWNvbG9yLW1vZGVsLWNvbnZlcnNpb24tYWxnb3JpdGhtcy1pbi1qYXZhc2NyaXB0PlxuXG4vLyBgcmdiVG9SZ2JgXG4vLyBIYW5kbGUgYm91bmRzIC8gcGVyY2VudGFnZSBjaGVja2luZyB0byBjb25mb3JtIHRvIENTUyBjb2xvciBzcGVjXG4vLyA8aHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1jb2xvci8+XG4vLyAqQXNzdW1lczoqIHIsIGcsIGIgaW4gWzAsIDI1NV0gb3IgWzAsIDFdXG4vLyAqUmV0dXJuczoqIHsgciwgZywgYiB9IGluIFswLCAyNTVdXG5mdW5jdGlvbiByZ2JUb1JnYihyLCBnLCBiKXtcbiAgICByZXR1cm4ge1xuICAgICAgICByOiBib3VuZDAxKHIsIDI1NSkgKiAyNTUsXG4gICAgICAgIGc6IGJvdW5kMDEoZywgMjU1KSAqIDI1NSxcbiAgICAgICAgYjogYm91bmQwMShiLCAyNTUpICogMjU1XG4gICAgfTtcbn1cblxuLy8gYHJnYlRvSHNsYFxuLy8gQ29udmVydHMgYW4gUkdCIGNvbG9yIHZhbHVlIHRvIEhTTC5cbi8vICpBc3N1bWVzOiogciwgZywgYW5kIGIgYXJlIGNvbnRhaW5lZCBpbiBbMCwgMjU1XSBvciBbMCwgMV1cbi8vICpSZXR1cm5zOiogeyBoLCBzLCBsIH0gaW4gWzAsMV1cbmZ1bmN0aW9uIHJnYlRvSHNsKHIsIGcsIGIpIHtcblxuICAgIHIgPSBib3VuZDAxKHIsIDI1NSk7XG4gICAgZyA9IGJvdW5kMDEoZywgMjU1KTtcbiAgICBiID0gYm91bmQwMShiLCAyNTUpO1xuXG4gICAgdmFyIG1heCA9IG1hdGhNYXgociwgZywgYiksIG1pbiA9IG1hdGhNaW4ociwgZywgYik7XG4gICAgdmFyIGgsIHMsIGwgPSAobWF4ICsgbWluKSAvIDI7XG5cbiAgICBpZihtYXggPT0gbWluKSB7XG4gICAgICAgIGggPSBzID0gMDsgLy8gYWNocm9tYXRpY1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdmFyIGQgPSBtYXggLSBtaW47XG4gICAgICAgIHMgPSBsID4gMC41ID8gZCAvICgyIC0gbWF4IC0gbWluKSA6IGQgLyAobWF4ICsgbWluKTtcbiAgICAgICAgc3dpdGNoKG1heCkge1xuICAgICAgICAgICAgY2FzZSByOiBoID0gKGcgLSBiKSAvIGQgKyAoZyA8IGIgPyA2IDogMCk7IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBnOiBoID0gKGIgLSByKSAvIGQgKyAyOyBicmVhaztcbiAgICAgICAgICAgIGNhc2UgYjogaCA9IChyIC0gZykgLyBkICsgNDsgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBoIC89IDY7XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgaDogaCwgczogcywgbDogbCB9O1xufVxuXG4vLyBgaHNsVG9SZ2JgXG4vLyBDb252ZXJ0cyBhbiBIU0wgY29sb3IgdmFsdWUgdG8gUkdCLlxuLy8gKkFzc3VtZXM6KiBoIGlzIGNvbnRhaW5lZCBpbiBbMCwgMV0gb3IgWzAsIDM2MF0gYW5kIHMgYW5kIGwgYXJlIGNvbnRhaW5lZCBbMCwgMV0gb3IgWzAsIDEwMF1cbi8vICpSZXR1cm5zOiogeyByLCBnLCBiIH0gaW4gdGhlIHNldCBbMCwgMjU1XVxuZnVuY3Rpb24gaHNsVG9SZ2IoaCwgcywgbCkge1xuICAgIHZhciByLCBnLCBiO1xuXG4gICAgaCA9IGJvdW5kMDEoaCwgMzYwKTtcbiAgICBzID0gYm91bmQwMShzLCAxMDApO1xuICAgIGwgPSBib3VuZDAxKGwsIDEwMCk7XG5cbiAgICBmdW5jdGlvbiBodWUycmdiKHAsIHEsIHQpIHtcbiAgICAgICAgaWYodCA8IDApIHQgKz0gMTtcbiAgICAgICAgaWYodCA+IDEpIHQgLT0gMTtcbiAgICAgICAgaWYodCA8IDEvNikgcmV0dXJuIHAgKyAocSAtIHApICogNiAqIHQ7XG4gICAgICAgIGlmKHQgPCAxLzIpIHJldHVybiBxO1xuICAgICAgICBpZih0IDwgMi8zKSByZXR1cm4gcCArIChxIC0gcCkgKiAoMi8zIC0gdCkgKiA2O1xuICAgICAgICByZXR1cm4gcDtcbiAgICB9XG5cbiAgICBpZihzID09PSAwKSB7XG4gICAgICAgIHIgPSBnID0gYiA9IGw7IC8vIGFjaHJvbWF0aWNcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHZhciBxID0gbCA8IDAuNSA/IGwgKiAoMSArIHMpIDogbCArIHMgLSBsICogcztcbiAgICAgICAgdmFyIHAgPSAyICogbCAtIHE7XG4gICAgICAgIHIgPSBodWUycmdiKHAsIHEsIGggKyAxLzMpO1xuICAgICAgICBnID0gaHVlMnJnYihwLCBxLCBoKTtcbiAgICAgICAgYiA9IGh1ZTJyZ2IocCwgcSwgaCAtIDEvMyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgcjogciAqIDI1NSwgZzogZyAqIDI1NSwgYjogYiAqIDI1NSB9O1xufVxuXG4vLyBgcmdiVG9Ic3ZgXG4vLyBDb252ZXJ0cyBhbiBSR0IgY29sb3IgdmFsdWUgdG8gSFNWXG4vLyAqQXNzdW1lczoqIHIsIGcsIGFuZCBiIGFyZSBjb250YWluZWQgaW4gdGhlIHNldCBbMCwgMjU1XSBvciBbMCwgMV1cbi8vICpSZXR1cm5zOiogeyBoLCBzLCB2IH0gaW4gWzAsMV1cbmZ1bmN0aW9uIHJnYlRvSHN2KHIsIGcsIGIpIHtcblxuICAgIHIgPSBib3VuZDAxKHIsIDI1NSk7XG4gICAgZyA9IGJvdW5kMDEoZywgMjU1KTtcbiAgICBiID0gYm91bmQwMShiLCAyNTUpO1xuXG4gICAgdmFyIG1heCA9IG1hdGhNYXgociwgZywgYiksIG1pbiA9IG1hdGhNaW4ociwgZywgYik7XG4gICAgdmFyIGgsIHMsIHYgPSBtYXg7XG5cbiAgICB2YXIgZCA9IG1heCAtIG1pbjtcbiAgICBzID0gbWF4ID09PSAwID8gMCA6IGQgLyBtYXg7XG5cbiAgICBpZihtYXggPT0gbWluKSB7XG4gICAgICAgIGggPSAwOyAvLyBhY2hyb21hdGljXG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBzd2l0Y2gobWF4KSB7XG4gICAgICAgICAgICBjYXNlIHI6IGggPSAoZyAtIGIpIC8gZCArIChnIDwgYiA/IDYgOiAwKTsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGc6IGggPSAoYiAtIHIpIC8gZCArIDI7IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBiOiBoID0gKHIgLSBnKSAvIGQgKyA0OyBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBoIC89IDY7XG4gICAgfVxuICAgIHJldHVybiB7IGg6IGgsIHM6IHMsIHY6IHYgfTtcbn1cblxuLy8gYGhzdlRvUmdiYFxuLy8gQ29udmVydHMgYW4gSFNWIGNvbG9yIHZhbHVlIHRvIFJHQi5cbi8vICpBc3N1bWVzOiogaCBpcyBjb250YWluZWQgaW4gWzAsIDFdIG9yIFswLCAzNjBdIGFuZCBzIGFuZCB2IGFyZSBjb250YWluZWQgaW4gWzAsIDFdIG9yIFswLCAxMDBdXG4vLyAqUmV0dXJuczoqIHsgciwgZywgYiB9IGluIHRoZSBzZXQgWzAsIDI1NV1cbiBmdW5jdGlvbiBoc3ZUb1JnYihoLCBzLCB2KSB7XG5cbiAgICBoID0gYm91bmQwMShoLCAzNjApICogNjtcbiAgICBzID0gYm91bmQwMShzLCAxMDApO1xuICAgIHYgPSBib3VuZDAxKHYsIDEwMCk7XG5cbiAgICB2YXIgaSA9IE1hdGguZmxvb3IoaCksXG4gICAgICAgIGYgPSBoIC0gaSxcbiAgICAgICAgcCA9IHYgKiAoMSAtIHMpLFxuICAgICAgICBxID0gdiAqICgxIC0gZiAqIHMpLFxuICAgICAgICB0ID0gdiAqICgxIC0gKDEgLSBmKSAqIHMpLFxuICAgICAgICBtb2QgPSBpICUgNixcbiAgICAgICAgciA9IFt2LCBxLCBwLCBwLCB0LCB2XVttb2RdLFxuICAgICAgICBnID0gW3QsIHYsIHYsIHEsIHAsIHBdW21vZF0sXG4gICAgICAgIGIgPSBbcCwgcCwgdCwgdiwgdiwgcV1bbW9kXTtcblxuICAgIHJldHVybiB7IHI6IHIgKiAyNTUsIGc6IGcgKiAyNTUsIGI6IGIgKiAyNTUgfTtcbn1cblxuLy8gYHJnYlRvSGV4YFxuLy8gQ29udmVydHMgYW4gUkdCIGNvbG9yIHRvIGhleFxuLy8gQXNzdW1lcyByLCBnLCBhbmQgYiBhcmUgY29udGFpbmVkIGluIHRoZSBzZXQgWzAsIDI1NV1cbi8vIFJldHVybnMgYSAzIG9yIDYgY2hhcmFjdGVyIGhleFxuZnVuY3Rpb24gcmdiVG9IZXgociwgZywgYiwgYWxsb3czQ2hhcikge1xuXG4gICAgdmFyIGhleCA9IFtcbiAgICAgICAgcGFkMihtYXRoUm91bmQocikudG9TdHJpbmcoMTYpKSxcbiAgICAgICAgcGFkMihtYXRoUm91bmQoZykudG9TdHJpbmcoMTYpKSxcbiAgICAgICAgcGFkMihtYXRoUm91bmQoYikudG9TdHJpbmcoMTYpKVxuICAgIF07XG5cbiAgICAvLyBSZXR1cm4gYSAzIGNoYXJhY3RlciBoZXggaWYgcG9zc2libGVcbiAgICBpZiAoYWxsb3czQ2hhciAmJiBoZXhbMF0uY2hhckF0KDApID09IGhleFswXS5jaGFyQXQoMSkgJiYgaGV4WzFdLmNoYXJBdCgwKSA9PSBoZXhbMV0uY2hhckF0KDEpICYmIGhleFsyXS5jaGFyQXQoMCkgPT0gaGV4WzJdLmNoYXJBdCgxKSkge1xuICAgICAgICByZXR1cm4gaGV4WzBdLmNoYXJBdCgwKSArIGhleFsxXS5jaGFyQXQoMCkgKyBoZXhbMl0uY2hhckF0KDApO1xuICAgIH1cblxuICAgIHJldHVybiBoZXguam9pbihcIlwiKTtcbn1cblxuLy8gYHJnYmFUb0hleGBcbi8vIENvbnZlcnRzIGFuIFJHQkEgY29sb3IgcGx1cyBhbHBoYSB0cmFuc3BhcmVuY3kgdG8gaGV4XG4vLyBBc3N1bWVzIHIsIGcsIGIgYXJlIGNvbnRhaW5lZCBpbiB0aGUgc2V0IFswLCAyNTVdIGFuZFxuLy8gYSBpbiBbMCwgMV0uIFJldHVybnMgYSA0IG9yIDggY2hhcmFjdGVyIHJnYmEgaGV4XG5mdW5jdGlvbiByZ2JhVG9IZXgociwgZywgYiwgYSwgYWxsb3c0Q2hhcikge1xuXG4gICAgdmFyIGhleCA9IFtcbiAgICAgICAgcGFkMihtYXRoUm91bmQocikudG9TdHJpbmcoMTYpKSxcbiAgICAgICAgcGFkMihtYXRoUm91bmQoZykudG9TdHJpbmcoMTYpKSxcbiAgICAgICAgcGFkMihtYXRoUm91bmQoYikudG9TdHJpbmcoMTYpKSxcbiAgICAgICAgcGFkMihjb252ZXJ0RGVjaW1hbFRvSGV4KGEpKVxuICAgIF07XG5cbiAgICAvLyBSZXR1cm4gYSA0IGNoYXJhY3RlciBoZXggaWYgcG9zc2libGVcbiAgICBpZiAoYWxsb3c0Q2hhciAmJiBoZXhbMF0uY2hhckF0KDApID09IGhleFswXS5jaGFyQXQoMSkgJiYgaGV4WzFdLmNoYXJBdCgwKSA9PSBoZXhbMV0uY2hhckF0KDEpICYmIGhleFsyXS5jaGFyQXQoMCkgPT0gaGV4WzJdLmNoYXJBdCgxKSAmJiBoZXhbM10uY2hhckF0KDApID09IGhleFszXS5jaGFyQXQoMSkpIHtcbiAgICAgICAgcmV0dXJuIGhleFswXS5jaGFyQXQoMCkgKyBoZXhbMV0uY2hhckF0KDApICsgaGV4WzJdLmNoYXJBdCgwKSArIGhleFszXS5jaGFyQXQoMCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGhleC5qb2luKFwiXCIpO1xufVxuXG4vLyBgcmdiYVRvQXJnYkhleGBcbi8vIENvbnZlcnRzIGFuIFJHQkEgY29sb3IgdG8gYW4gQVJHQiBIZXg4IHN0cmluZ1xuLy8gUmFyZWx5IHVzZWQsIGJ1dCByZXF1aXJlZCBmb3IgXCJ0b0ZpbHRlcigpXCJcbmZ1bmN0aW9uIHJnYmFUb0FyZ2JIZXgociwgZywgYiwgYSkge1xuXG4gICAgdmFyIGhleCA9IFtcbiAgICAgICAgcGFkMihjb252ZXJ0RGVjaW1hbFRvSGV4KGEpKSxcbiAgICAgICAgcGFkMihtYXRoUm91bmQocikudG9TdHJpbmcoMTYpKSxcbiAgICAgICAgcGFkMihtYXRoUm91bmQoZykudG9TdHJpbmcoMTYpKSxcbiAgICAgICAgcGFkMihtYXRoUm91bmQoYikudG9TdHJpbmcoMTYpKVxuICAgIF07XG5cbiAgICByZXR1cm4gaGV4LmpvaW4oXCJcIik7XG59XG5cbi8vIGBlcXVhbHNgXG4vLyBDYW4gYmUgY2FsbGVkIHdpdGggYW55IHRpbnljb2xvciBpbnB1dFxudGlueWNvbG9yLmVxdWFscyA9IGZ1bmN0aW9uIChjb2xvcjEsIGNvbG9yMikge1xuICAgIGlmICghY29sb3IxIHx8ICFjb2xvcjIpIHsgcmV0dXJuIGZhbHNlOyB9XG4gICAgcmV0dXJuIHRpbnljb2xvcihjb2xvcjEpLnRvUmdiU3RyaW5nKCkgPT0gdGlueWNvbG9yKGNvbG9yMikudG9SZ2JTdHJpbmcoKTtcbn07XG5cbnRpbnljb2xvci5yYW5kb20gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGlueWNvbG9yLmZyb21SYXRpbyh7XG4gICAgICAgIHI6IG1hdGhSYW5kb20oKSxcbiAgICAgICAgZzogbWF0aFJhbmRvbSgpLFxuICAgICAgICBiOiBtYXRoUmFuZG9tKClcbiAgICB9KTtcbn07XG5cblxuLy8gTW9kaWZpY2F0aW9uIEZ1bmN0aW9uc1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gVGhhbmtzIHRvIGxlc3MuanMgZm9yIHNvbWUgb2YgdGhlIGJhc2ljcyBoZXJlXG4vLyA8aHR0cHM6Ly9naXRodWIuY29tL2Nsb3VkaGVhZC9sZXNzLmpzL2Jsb2IvbWFzdGVyL2xpYi9sZXNzL2Z1bmN0aW9ucy5qcz5cblxuZnVuY3Rpb24gZGVzYXR1cmF0ZShjb2xvciwgYW1vdW50KSB7XG4gICAgYW1vdW50ID0gKGFtb3VudCA9PT0gMCkgPyAwIDogKGFtb3VudCB8fCAxMCk7XG4gICAgdmFyIGhzbCA9IHRpbnljb2xvcihjb2xvcikudG9Ic2woKTtcbiAgICBoc2wucyAtPSBhbW91bnQgLyAxMDA7XG4gICAgaHNsLnMgPSBjbGFtcDAxKGhzbC5zKTtcbiAgICByZXR1cm4gdGlueWNvbG9yKGhzbCk7XG59XG5cbmZ1bmN0aW9uIHNhdHVyYXRlKGNvbG9yLCBhbW91bnQpIHtcbiAgICBhbW91bnQgPSAoYW1vdW50ID09PSAwKSA/IDAgOiAoYW1vdW50IHx8IDEwKTtcbiAgICB2YXIgaHNsID0gdGlueWNvbG9yKGNvbG9yKS50b0hzbCgpO1xuICAgIGhzbC5zICs9IGFtb3VudCAvIDEwMDtcbiAgICBoc2wucyA9IGNsYW1wMDEoaHNsLnMpO1xuICAgIHJldHVybiB0aW55Y29sb3IoaHNsKTtcbn1cblxuZnVuY3Rpb24gZ3JleXNjYWxlKGNvbG9yKSB7XG4gICAgcmV0dXJuIHRpbnljb2xvcihjb2xvcikuZGVzYXR1cmF0ZSgxMDApO1xufVxuXG5mdW5jdGlvbiBsaWdodGVuIChjb2xvciwgYW1vdW50KSB7XG4gICAgYW1vdW50ID0gKGFtb3VudCA9PT0gMCkgPyAwIDogKGFtb3VudCB8fCAxMCk7XG4gICAgdmFyIGhzbCA9IHRpbnljb2xvcihjb2xvcikudG9Ic2woKTtcbiAgICBoc2wubCArPSBhbW91bnQgLyAxMDA7XG4gICAgaHNsLmwgPSBjbGFtcDAxKGhzbC5sKTtcbiAgICByZXR1cm4gdGlueWNvbG9yKGhzbCk7XG59XG5cbmZ1bmN0aW9uIGJyaWdodGVuKGNvbG9yLCBhbW91bnQpIHtcbiAgICBhbW91bnQgPSAoYW1vdW50ID09PSAwKSA/IDAgOiAoYW1vdW50IHx8IDEwKTtcbiAgICB2YXIgcmdiID0gdGlueWNvbG9yKGNvbG9yKS50b1JnYigpO1xuICAgIHJnYi5yID0gbWF0aE1heCgwLCBtYXRoTWluKDI1NSwgcmdiLnIgLSBtYXRoUm91bmQoMjU1ICogLSAoYW1vdW50IC8gMTAwKSkpKTtcbiAgICByZ2IuZyA9IG1hdGhNYXgoMCwgbWF0aE1pbigyNTUsIHJnYi5nIC0gbWF0aFJvdW5kKDI1NSAqIC0gKGFtb3VudCAvIDEwMCkpKSk7XG4gICAgcmdiLmIgPSBtYXRoTWF4KDAsIG1hdGhNaW4oMjU1LCByZ2IuYiAtIG1hdGhSb3VuZCgyNTUgKiAtIChhbW91bnQgLyAxMDApKSkpO1xuICAgIHJldHVybiB0aW55Y29sb3IocmdiKTtcbn1cblxuZnVuY3Rpb24gZGFya2VuIChjb2xvciwgYW1vdW50KSB7XG4gICAgYW1vdW50ID0gKGFtb3VudCA9PT0gMCkgPyAwIDogKGFtb3VudCB8fCAxMCk7XG4gICAgdmFyIGhzbCA9IHRpbnljb2xvcihjb2xvcikudG9Ic2woKTtcbiAgICBoc2wubCAtPSBhbW91bnQgLyAxMDA7XG4gICAgaHNsLmwgPSBjbGFtcDAxKGhzbC5sKTtcbiAgICByZXR1cm4gdGlueWNvbG9yKGhzbCk7XG59XG5cbi8vIFNwaW4gdGFrZXMgYSBwb3NpdGl2ZSBvciBuZWdhdGl2ZSBhbW91bnQgd2l0aGluIFstMzYwLCAzNjBdIGluZGljYXRpbmcgdGhlIGNoYW5nZSBvZiBodWUuXG4vLyBWYWx1ZXMgb3V0c2lkZSBvZiB0aGlzIHJhbmdlIHdpbGwgYmUgd3JhcHBlZCBpbnRvIHRoaXMgcmFuZ2UuXG5mdW5jdGlvbiBzcGluKGNvbG9yLCBhbW91bnQpIHtcbiAgICB2YXIgaHNsID0gdGlueWNvbG9yKGNvbG9yKS50b0hzbCgpO1xuICAgIHZhciBodWUgPSAoaHNsLmggKyBhbW91bnQpICUgMzYwO1xuICAgIGhzbC5oID0gaHVlIDwgMCA/IDM2MCArIGh1ZSA6IGh1ZTtcbiAgICByZXR1cm4gdGlueWNvbG9yKGhzbCk7XG59XG5cbi8vIENvbWJpbmF0aW9uIEZ1bmN0aW9uc1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBUaGFua3MgdG8galF1ZXJ5IHhDb2xvciBmb3Igc29tZSBvZiB0aGUgaWRlYXMgYmVoaW5kIHRoZXNlXG4vLyA8aHR0cHM6Ly9naXRodWIuY29tL2luZnVzaW9uL2pRdWVyeS14Y29sb3IvYmxvYi9tYXN0ZXIvanF1ZXJ5Lnhjb2xvci5qcz5cblxuZnVuY3Rpb24gY29tcGxlbWVudChjb2xvcikge1xuICAgIHZhciBoc2wgPSB0aW55Y29sb3IoY29sb3IpLnRvSHNsKCk7XG4gICAgaHNsLmggPSAoaHNsLmggKyAxODApICUgMzYwO1xuICAgIHJldHVybiB0aW55Y29sb3IoaHNsKTtcbn1cblxuZnVuY3Rpb24gdHJpYWQoY29sb3IpIHtcbiAgICB2YXIgaHNsID0gdGlueWNvbG9yKGNvbG9yKS50b0hzbCgpO1xuICAgIHZhciBoID0gaHNsLmg7XG4gICAgcmV0dXJuIFtcbiAgICAgICAgdGlueWNvbG9yKGNvbG9yKSxcbiAgICAgICAgdGlueWNvbG9yKHsgaDogKGggKyAxMjApICUgMzYwLCBzOiBoc2wucywgbDogaHNsLmwgfSksXG4gICAgICAgIHRpbnljb2xvcih7IGg6IChoICsgMjQwKSAlIDM2MCwgczogaHNsLnMsIGw6IGhzbC5sIH0pXG4gICAgXTtcbn1cblxuZnVuY3Rpb24gdGV0cmFkKGNvbG9yKSB7XG4gICAgdmFyIGhzbCA9IHRpbnljb2xvcihjb2xvcikudG9Ic2woKTtcbiAgICB2YXIgaCA9IGhzbC5oO1xuICAgIHJldHVybiBbXG4gICAgICAgIHRpbnljb2xvcihjb2xvciksXG4gICAgICAgIHRpbnljb2xvcih7IGg6IChoICsgOTApICUgMzYwLCBzOiBoc2wucywgbDogaHNsLmwgfSksXG4gICAgICAgIHRpbnljb2xvcih7IGg6IChoICsgMTgwKSAlIDM2MCwgczogaHNsLnMsIGw6IGhzbC5sIH0pLFxuICAgICAgICB0aW55Y29sb3IoeyBoOiAoaCArIDI3MCkgJSAzNjAsIHM6IGhzbC5zLCBsOiBoc2wubCB9KVxuICAgIF07XG59XG5cbmZ1bmN0aW9uIHNwbGl0Y29tcGxlbWVudChjb2xvcikge1xuICAgIHZhciBoc2wgPSB0aW55Y29sb3IoY29sb3IpLnRvSHNsKCk7XG4gICAgdmFyIGggPSBoc2wuaDtcbiAgICByZXR1cm4gW1xuICAgICAgICB0aW55Y29sb3IoY29sb3IpLFxuICAgICAgICB0aW55Y29sb3IoeyBoOiAoaCArIDcyKSAlIDM2MCwgczogaHNsLnMsIGw6IGhzbC5sfSksXG4gICAgICAgIHRpbnljb2xvcih7IGg6IChoICsgMjE2KSAlIDM2MCwgczogaHNsLnMsIGw6IGhzbC5sfSlcbiAgICBdO1xufVxuXG5mdW5jdGlvbiBhbmFsb2dvdXMoY29sb3IsIHJlc3VsdHMsIHNsaWNlcykge1xuICAgIHJlc3VsdHMgPSByZXN1bHRzIHx8IDY7XG4gICAgc2xpY2VzID0gc2xpY2VzIHx8IDMwO1xuXG4gICAgdmFyIGhzbCA9IHRpbnljb2xvcihjb2xvcikudG9Ic2woKTtcbiAgICB2YXIgcGFydCA9IDM2MCAvIHNsaWNlcztcbiAgICB2YXIgcmV0ID0gW3Rpbnljb2xvcihjb2xvcildO1xuXG4gICAgZm9yIChoc2wuaCA9ICgoaHNsLmggLSAocGFydCAqIHJlc3VsdHMgPj4gMSkpICsgNzIwKSAlIDM2MDsgLS1yZXN1bHRzOyApIHtcbiAgICAgICAgaHNsLmggPSAoaHNsLmggKyBwYXJ0KSAlIDM2MDtcbiAgICAgICAgcmV0LnB1c2godGlueWNvbG9yKGhzbCkpO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBtb25vY2hyb21hdGljKGNvbG9yLCByZXN1bHRzKSB7XG4gICAgcmVzdWx0cyA9IHJlc3VsdHMgfHwgNjtcbiAgICB2YXIgaHN2ID0gdGlueWNvbG9yKGNvbG9yKS50b0hzdigpO1xuICAgIHZhciBoID0gaHN2LmgsIHMgPSBoc3YucywgdiA9IGhzdi52O1xuICAgIHZhciByZXQgPSBbXTtcbiAgICB2YXIgbW9kaWZpY2F0aW9uID0gMSAvIHJlc3VsdHM7XG5cbiAgICB3aGlsZSAocmVzdWx0cy0tKSB7XG4gICAgICAgIHJldC5wdXNoKHRpbnljb2xvcih7IGg6IGgsIHM6IHMsIHY6IHZ9KSk7XG4gICAgICAgIHYgPSAodiArIG1vZGlmaWNhdGlvbikgJSAxO1xuICAgIH1cblxuICAgIHJldHVybiByZXQ7XG59XG5cbi8vIFV0aWxpdHkgRnVuY3Rpb25zXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxudGlueWNvbG9yLm1peCA9IGZ1bmN0aW9uKGNvbG9yMSwgY29sb3IyLCBhbW91bnQpIHtcbiAgICBhbW91bnQgPSAoYW1vdW50ID09PSAwKSA/IDAgOiAoYW1vdW50IHx8IDUwKTtcblxuICAgIHZhciByZ2IxID0gdGlueWNvbG9yKGNvbG9yMSkudG9SZ2IoKTtcbiAgICB2YXIgcmdiMiA9IHRpbnljb2xvcihjb2xvcjIpLnRvUmdiKCk7XG5cbiAgICB2YXIgcCA9IGFtb3VudCAvIDEwMDtcblxuICAgIHZhciByZ2JhID0ge1xuICAgICAgICByOiAoKHJnYjIuciAtIHJnYjEucikgKiBwKSArIHJnYjEucixcbiAgICAgICAgZzogKChyZ2IyLmcgLSByZ2IxLmcpICogcCkgKyByZ2IxLmcsXG4gICAgICAgIGI6ICgocmdiMi5iIC0gcmdiMS5iKSAqIHApICsgcmdiMS5iLFxuICAgICAgICBhOiAoKHJnYjIuYSAtIHJnYjEuYSkgKiBwKSArIHJnYjEuYVxuICAgIH07XG5cbiAgICByZXR1cm4gdGlueWNvbG9yKHJnYmEpO1xufTtcblxuXG4vLyBSZWFkYWJpbGl0eSBGdW5jdGlvbnNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gPGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMDgvUkVDLVdDQUcyMC0yMDA4MTIxMS8jY29udHJhc3QtcmF0aW9kZWYgKFdDQUcgVmVyc2lvbiAyKVxuXG4vLyBgY29udHJhc3RgXG4vLyBBbmFseXplIHRoZSAyIGNvbG9ycyBhbmQgcmV0dXJucyB0aGUgY29sb3IgY29udHJhc3QgZGVmaW5lZCBieSAoV0NBRyBWZXJzaW9uIDIpXG50aW55Y29sb3IucmVhZGFiaWxpdHkgPSBmdW5jdGlvbihjb2xvcjEsIGNvbG9yMikge1xuICAgIHZhciBjMSA9IHRpbnljb2xvcihjb2xvcjEpO1xuICAgIHZhciBjMiA9IHRpbnljb2xvcihjb2xvcjIpO1xuICAgIHJldHVybiAoTWF0aC5tYXgoYzEuZ2V0THVtaW5hbmNlKCksYzIuZ2V0THVtaW5hbmNlKCkpKzAuMDUpIC8gKE1hdGgubWluKGMxLmdldEx1bWluYW5jZSgpLGMyLmdldEx1bWluYW5jZSgpKSswLjA1KTtcbn07XG5cbi8vIGBpc1JlYWRhYmxlYFxuLy8gRW5zdXJlIHRoYXQgZm9yZWdyb3VuZCBhbmQgYmFja2dyb3VuZCBjb2xvciBjb21iaW5hdGlvbnMgbWVldCBXQ0FHMiBndWlkZWxpbmVzLlxuLy8gVGhlIHRoaXJkIGFyZ3VtZW50IGlzIGFuIG9wdGlvbmFsIE9iamVjdC5cbi8vICAgICAgdGhlICdsZXZlbCcgcHJvcGVydHkgc3RhdGVzICdBQScgb3IgJ0FBQScgLSBpZiBtaXNzaW5nIG9yIGludmFsaWQsIGl0IGRlZmF1bHRzIHRvICdBQSc7XG4vLyAgICAgIHRoZSAnc2l6ZScgcHJvcGVydHkgc3RhdGVzICdsYXJnZScgb3IgJ3NtYWxsJyAtIGlmIG1pc3Npbmcgb3IgaW52YWxpZCwgaXQgZGVmYXVsdHMgdG8gJ3NtYWxsJy5cbi8vIElmIHRoZSBlbnRpcmUgb2JqZWN0IGlzIGFic2VudCwgaXNSZWFkYWJsZSBkZWZhdWx0cyB0byB7bGV2ZWw6XCJBQVwiLHNpemU6XCJzbWFsbFwifS5cblxuLy8gKkV4YW1wbGUqXG4vLyAgICB0aW55Y29sb3IuaXNSZWFkYWJsZShcIiMwMDBcIiwgXCIjMTExXCIpID0+IGZhbHNlXG4vLyAgICB0aW55Y29sb3IuaXNSZWFkYWJsZShcIiMwMDBcIiwgXCIjMTExXCIse2xldmVsOlwiQUFcIixzaXplOlwibGFyZ2VcIn0pID0+IGZhbHNlXG50aW55Y29sb3IuaXNSZWFkYWJsZSA9IGZ1bmN0aW9uKGNvbG9yMSwgY29sb3IyLCB3Y2FnMikge1xuICAgIHZhciByZWFkYWJpbGl0eSA9IHRpbnljb2xvci5yZWFkYWJpbGl0eShjb2xvcjEsIGNvbG9yMik7XG4gICAgdmFyIHdjYWcyUGFybXMsIG91dDtcblxuICAgIG91dCA9IGZhbHNlO1xuXG4gICAgd2NhZzJQYXJtcyA9IHZhbGlkYXRlV0NBRzJQYXJtcyh3Y2FnMik7XG4gICAgc3dpdGNoICh3Y2FnMlBhcm1zLmxldmVsICsgd2NhZzJQYXJtcy5zaXplKSB7XG4gICAgICAgIGNhc2UgXCJBQXNtYWxsXCI6XG4gICAgICAgIGNhc2UgXCJBQUFsYXJnZVwiOlxuICAgICAgICAgICAgb3V0ID0gcmVhZGFiaWxpdHkgPj0gNC41O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJBQWxhcmdlXCI6XG4gICAgICAgICAgICBvdXQgPSByZWFkYWJpbGl0eSA+PSAzO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJBQUFzbWFsbFwiOlxuICAgICAgICAgICAgb3V0ID0gcmVhZGFiaWxpdHkgPj0gNztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gb3V0O1xuXG59O1xuXG4vLyBgbW9zdFJlYWRhYmxlYFxuLy8gR2l2ZW4gYSBiYXNlIGNvbG9yIGFuZCBhIGxpc3Qgb2YgcG9zc2libGUgZm9yZWdyb3VuZCBvciBiYWNrZ3JvdW5kXG4vLyBjb2xvcnMgZm9yIHRoYXQgYmFzZSwgcmV0dXJucyB0aGUgbW9zdCByZWFkYWJsZSBjb2xvci5cbi8vIE9wdGlvbmFsbHkgcmV0dXJucyBCbGFjayBvciBXaGl0ZSBpZiB0aGUgbW9zdCByZWFkYWJsZSBjb2xvciBpcyB1bnJlYWRhYmxlLlxuLy8gKkV4YW1wbGUqXG4vLyAgICB0aW55Y29sb3IubW9zdFJlYWRhYmxlKHRpbnljb2xvci5tb3N0UmVhZGFibGUoXCIjMTIzXCIsIFtcIiMxMjRcIiwgXCIjMTI1XCJdLHtpbmNsdWRlRmFsbGJhY2tDb2xvcnM6ZmFsc2V9KS50b0hleFN0cmluZygpOyAvLyBcIiMxMTIyNTVcIlxuLy8gICAgdGlueWNvbG9yLm1vc3RSZWFkYWJsZSh0aW55Y29sb3IubW9zdFJlYWRhYmxlKFwiIzEyM1wiLCBbXCIjMTI0XCIsIFwiIzEyNVwiXSx7aW5jbHVkZUZhbGxiYWNrQ29sb3JzOnRydWV9KS50b0hleFN0cmluZygpOyAgLy8gXCIjZmZmZmZmXCJcbi8vICAgIHRpbnljb2xvci5tb3N0UmVhZGFibGUoXCIjYTgwMTVhXCIsIFtcIiNmYWYzZjNcIl0se2luY2x1ZGVGYWxsYmFja0NvbG9yczp0cnVlLGxldmVsOlwiQUFBXCIsc2l6ZTpcImxhcmdlXCJ9KS50b0hleFN0cmluZygpOyAvLyBcIiNmYWYzZjNcIlxuLy8gICAgdGlueWNvbG9yLm1vc3RSZWFkYWJsZShcIiNhODAxNWFcIiwgW1wiI2ZhZjNmM1wiXSx7aW5jbHVkZUZhbGxiYWNrQ29sb3JzOnRydWUsbGV2ZWw6XCJBQUFcIixzaXplOlwic21hbGxcIn0pLnRvSGV4U3RyaW5nKCk7IC8vIFwiI2ZmZmZmZlwiXG50aW55Y29sb3IubW9zdFJlYWRhYmxlID0gZnVuY3Rpb24oYmFzZUNvbG9yLCBjb2xvckxpc3QsIGFyZ3MpIHtcbiAgICB2YXIgYmVzdENvbG9yID0gbnVsbDtcbiAgICB2YXIgYmVzdFNjb3JlID0gMDtcbiAgICB2YXIgcmVhZGFiaWxpdHk7XG4gICAgdmFyIGluY2x1ZGVGYWxsYmFja0NvbG9ycywgbGV2ZWwsIHNpemUgO1xuICAgIGFyZ3MgPSBhcmdzIHx8IHt9O1xuICAgIGluY2x1ZGVGYWxsYmFja0NvbG9ycyA9IGFyZ3MuaW5jbHVkZUZhbGxiYWNrQ29sb3JzIDtcbiAgICBsZXZlbCA9IGFyZ3MubGV2ZWw7XG4gICAgc2l6ZSA9IGFyZ3Muc2l6ZTtcblxuICAgIGZvciAodmFyIGk9IDA7IGkgPCBjb2xvckxpc3QubGVuZ3RoIDsgaSsrKSB7XG4gICAgICAgIHJlYWRhYmlsaXR5ID0gdGlueWNvbG9yLnJlYWRhYmlsaXR5KGJhc2VDb2xvciwgY29sb3JMaXN0W2ldKTtcbiAgICAgICAgaWYgKHJlYWRhYmlsaXR5ID4gYmVzdFNjb3JlKSB7XG4gICAgICAgICAgICBiZXN0U2NvcmUgPSByZWFkYWJpbGl0eTtcbiAgICAgICAgICAgIGJlc3RDb2xvciA9IHRpbnljb2xvcihjb2xvckxpc3RbaV0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRpbnljb2xvci5pc1JlYWRhYmxlKGJhc2VDb2xvciwgYmVzdENvbG9yLCB7XCJsZXZlbFwiOmxldmVsLFwic2l6ZVwiOnNpemV9KSB8fCAhaW5jbHVkZUZhbGxiYWNrQ29sb3JzKSB7XG4gICAgICAgIHJldHVybiBiZXN0Q29sb3I7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBhcmdzLmluY2x1ZGVGYWxsYmFja0NvbG9ycz1mYWxzZTtcbiAgICAgICAgcmV0dXJuIHRpbnljb2xvci5tb3N0UmVhZGFibGUoYmFzZUNvbG9yLFtcIiNmZmZcIiwgXCIjMDAwXCJdLGFyZ3MpO1xuICAgIH1cbn07XG5cblxuLy8gQmlnIExpc3Qgb2YgQ29sb3JzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS1cbi8vIDxodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLWNvbG9yLyNzdmctY29sb3I+XG52YXIgbmFtZXMgPSB0aW55Y29sb3IubmFtZXMgPSB7XG4gICAgYWxpY2VibHVlOiBcImYwZjhmZlwiLFxuICAgIGFudGlxdWV3aGl0ZTogXCJmYWViZDdcIixcbiAgICBhcXVhOiBcIjBmZlwiLFxuICAgIGFxdWFtYXJpbmU6IFwiN2ZmZmQ0XCIsXG4gICAgYXp1cmU6IFwiZjBmZmZmXCIsXG4gICAgYmVpZ2U6IFwiZjVmNWRjXCIsXG4gICAgYmlzcXVlOiBcImZmZTRjNFwiLFxuICAgIGJsYWNrOiBcIjAwMFwiLFxuICAgIGJsYW5jaGVkYWxtb25kOiBcImZmZWJjZFwiLFxuICAgIGJsdWU6IFwiMDBmXCIsXG4gICAgYmx1ZXZpb2xldDogXCI4YTJiZTJcIixcbiAgICBicm93bjogXCJhNTJhMmFcIixcbiAgICBidXJseXdvb2Q6IFwiZGViODg3XCIsXG4gICAgYnVybnRzaWVubmE6IFwiZWE3ZTVkXCIsXG4gICAgY2FkZXRibHVlOiBcIjVmOWVhMFwiLFxuICAgIGNoYXJ0cmV1c2U6IFwiN2ZmZjAwXCIsXG4gICAgY2hvY29sYXRlOiBcImQyNjkxZVwiLFxuICAgIGNvcmFsOiBcImZmN2Y1MFwiLFxuICAgIGNvcm5mbG93ZXJibHVlOiBcIjY0OTVlZFwiLFxuICAgIGNvcm5zaWxrOiBcImZmZjhkY1wiLFxuICAgIGNyaW1zb246IFwiZGMxNDNjXCIsXG4gICAgY3lhbjogXCIwZmZcIixcbiAgICBkYXJrYmx1ZTogXCIwMDAwOGJcIixcbiAgICBkYXJrY3lhbjogXCIwMDhiOGJcIixcbiAgICBkYXJrZ29sZGVucm9kOiBcImI4ODYwYlwiLFxuICAgIGRhcmtncmF5OiBcImE5YTlhOVwiLFxuICAgIGRhcmtncmVlbjogXCIwMDY0MDBcIixcbiAgICBkYXJrZ3JleTogXCJhOWE5YTlcIixcbiAgICBkYXJra2hha2k6IFwiYmRiNzZiXCIsXG4gICAgZGFya21hZ2VudGE6IFwiOGIwMDhiXCIsXG4gICAgZGFya29saXZlZ3JlZW46IFwiNTU2YjJmXCIsXG4gICAgZGFya29yYW5nZTogXCJmZjhjMDBcIixcbiAgICBkYXJrb3JjaGlkOiBcIjk5MzJjY1wiLFxuICAgIGRhcmtyZWQ6IFwiOGIwMDAwXCIsXG4gICAgZGFya3NhbG1vbjogXCJlOTk2N2FcIixcbiAgICBkYXJrc2VhZ3JlZW46IFwiOGZiYzhmXCIsXG4gICAgZGFya3NsYXRlYmx1ZTogXCI0ODNkOGJcIixcbiAgICBkYXJrc2xhdGVncmF5OiBcIjJmNGY0ZlwiLFxuICAgIGRhcmtzbGF0ZWdyZXk6IFwiMmY0ZjRmXCIsXG4gICAgZGFya3R1cnF1b2lzZTogXCIwMGNlZDFcIixcbiAgICBkYXJrdmlvbGV0OiBcIjk0MDBkM1wiLFxuICAgIGRlZXBwaW5rOiBcImZmMTQ5M1wiLFxuICAgIGRlZXBza3libHVlOiBcIjAwYmZmZlwiLFxuICAgIGRpbWdyYXk6IFwiNjk2OTY5XCIsXG4gICAgZGltZ3JleTogXCI2OTY5NjlcIixcbiAgICBkb2RnZXJibHVlOiBcIjFlOTBmZlwiLFxuICAgIGZpcmVicmljazogXCJiMjIyMjJcIixcbiAgICBmbG9yYWx3aGl0ZTogXCJmZmZhZjBcIixcbiAgICBmb3Jlc3RncmVlbjogXCIyMjhiMjJcIixcbiAgICBmdWNoc2lhOiBcImYwZlwiLFxuICAgIGdhaW5zYm9ybzogXCJkY2RjZGNcIixcbiAgICBnaG9zdHdoaXRlOiBcImY4ZjhmZlwiLFxuICAgIGdvbGQ6IFwiZmZkNzAwXCIsXG4gICAgZ29sZGVucm9kOiBcImRhYTUyMFwiLFxuICAgIGdyYXk6IFwiODA4MDgwXCIsXG4gICAgZ3JlZW46IFwiMDA4MDAwXCIsXG4gICAgZ3JlZW55ZWxsb3c6IFwiYWRmZjJmXCIsXG4gICAgZ3JleTogXCI4MDgwODBcIixcbiAgICBob25leWRldzogXCJmMGZmZjBcIixcbiAgICBob3RwaW5rOiBcImZmNjliNFwiLFxuICAgIGluZGlhbnJlZDogXCJjZDVjNWNcIixcbiAgICBpbmRpZ286IFwiNGIwMDgyXCIsXG4gICAgaXZvcnk6IFwiZmZmZmYwXCIsXG4gICAga2hha2k6IFwiZjBlNjhjXCIsXG4gICAgbGF2ZW5kZXI6IFwiZTZlNmZhXCIsXG4gICAgbGF2ZW5kZXJibHVzaDogXCJmZmYwZjVcIixcbiAgICBsYXduZ3JlZW46IFwiN2NmYzAwXCIsXG4gICAgbGVtb25jaGlmZm9uOiBcImZmZmFjZFwiLFxuICAgIGxpZ2h0Ymx1ZTogXCJhZGQ4ZTZcIixcbiAgICBsaWdodGNvcmFsOiBcImYwODA4MFwiLFxuICAgIGxpZ2h0Y3lhbjogXCJlMGZmZmZcIixcbiAgICBsaWdodGdvbGRlbnJvZHllbGxvdzogXCJmYWZhZDJcIixcbiAgICBsaWdodGdyYXk6IFwiZDNkM2QzXCIsXG4gICAgbGlnaHRncmVlbjogXCI5MGVlOTBcIixcbiAgICBsaWdodGdyZXk6IFwiZDNkM2QzXCIsXG4gICAgbGlnaHRwaW5rOiBcImZmYjZjMVwiLFxuICAgIGxpZ2h0c2FsbW9uOiBcImZmYTA3YVwiLFxuICAgIGxpZ2h0c2VhZ3JlZW46IFwiMjBiMmFhXCIsXG4gICAgbGlnaHRza3libHVlOiBcIjg3Y2VmYVwiLFxuICAgIGxpZ2h0c2xhdGVncmF5OiBcIjc4OVwiLFxuICAgIGxpZ2h0c2xhdGVncmV5OiBcIjc4OVwiLFxuICAgIGxpZ2h0c3RlZWxibHVlOiBcImIwYzRkZVwiLFxuICAgIGxpZ2h0eWVsbG93OiBcImZmZmZlMFwiLFxuICAgIGxpbWU6IFwiMGYwXCIsXG4gICAgbGltZWdyZWVuOiBcIjMyY2QzMlwiLFxuICAgIGxpbmVuOiBcImZhZjBlNlwiLFxuICAgIG1hZ2VudGE6IFwiZjBmXCIsXG4gICAgbWFyb29uOiBcIjgwMDAwMFwiLFxuICAgIG1lZGl1bWFxdWFtYXJpbmU6IFwiNjZjZGFhXCIsXG4gICAgbWVkaXVtYmx1ZTogXCIwMDAwY2RcIixcbiAgICBtZWRpdW1vcmNoaWQ6IFwiYmE1NWQzXCIsXG4gICAgbWVkaXVtcHVycGxlOiBcIjkzNzBkYlwiLFxuICAgIG1lZGl1bXNlYWdyZWVuOiBcIjNjYjM3MVwiLFxuICAgIG1lZGl1bXNsYXRlYmx1ZTogXCI3YjY4ZWVcIixcbiAgICBtZWRpdW1zcHJpbmdncmVlbjogXCIwMGZhOWFcIixcbiAgICBtZWRpdW10dXJxdW9pc2U6IFwiNDhkMWNjXCIsXG4gICAgbWVkaXVtdmlvbGV0cmVkOiBcImM3MTU4NVwiLFxuICAgIG1pZG5pZ2h0Ymx1ZTogXCIxOTE5NzBcIixcbiAgICBtaW50Y3JlYW06IFwiZjVmZmZhXCIsXG4gICAgbWlzdHlyb3NlOiBcImZmZTRlMVwiLFxuICAgIG1vY2Nhc2luOiBcImZmZTRiNVwiLFxuICAgIG5hdmFqb3doaXRlOiBcImZmZGVhZFwiLFxuICAgIG5hdnk6IFwiMDAwMDgwXCIsXG4gICAgb2xkbGFjZTogXCJmZGY1ZTZcIixcbiAgICBvbGl2ZTogXCI4MDgwMDBcIixcbiAgICBvbGl2ZWRyYWI6IFwiNmI4ZTIzXCIsXG4gICAgb3JhbmdlOiBcImZmYTUwMFwiLFxuICAgIG9yYW5nZXJlZDogXCJmZjQ1MDBcIixcbiAgICBvcmNoaWQ6IFwiZGE3MGQ2XCIsXG4gICAgcGFsZWdvbGRlbnJvZDogXCJlZWU4YWFcIixcbiAgICBwYWxlZ3JlZW46IFwiOThmYjk4XCIsXG4gICAgcGFsZXR1cnF1b2lzZTogXCJhZmVlZWVcIixcbiAgICBwYWxldmlvbGV0cmVkOiBcImRiNzA5M1wiLFxuICAgIHBhcGF5YXdoaXA6IFwiZmZlZmQ1XCIsXG4gICAgcGVhY2hwdWZmOiBcImZmZGFiOVwiLFxuICAgIHBlcnU6IFwiY2Q4NTNmXCIsXG4gICAgcGluazogXCJmZmMwY2JcIixcbiAgICBwbHVtOiBcImRkYTBkZFwiLFxuICAgIHBvd2RlcmJsdWU6IFwiYjBlMGU2XCIsXG4gICAgcHVycGxlOiBcIjgwMDA4MFwiLFxuICAgIHJlYmVjY2FwdXJwbGU6IFwiNjYzMzk5XCIsXG4gICAgcmVkOiBcImYwMFwiLFxuICAgIHJvc3licm93bjogXCJiYzhmOGZcIixcbiAgICByb3lhbGJsdWU6IFwiNDE2OWUxXCIsXG4gICAgc2FkZGxlYnJvd246IFwiOGI0NTEzXCIsXG4gICAgc2FsbW9uOiBcImZhODA3MlwiLFxuICAgIHNhbmR5YnJvd246IFwiZjRhNDYwXCIsXG4gICAgc2VhZ3JlZW46IFwiMmU4YjU3XCIsXG4gICAgc2Vhc2hlbGw6IFwiZmZmNWVlXCIsXG4gICAgc2llbm5hOiBcImEwNTIyZFwiLFxuICAgIHNpbHZlcjogXCJjMGMwYzBcIixcbiAgICBza3libHVlOiBcIjg3Y2VlYlwiLFxuICAgIHNsYXRlYmx1ZTogXCI2YTVhY2RcIixcbiAgICBzbGF0ZWdyYXk6IFwiNzA4MDkwXCIsXG4gICAgc2xhdGVncmV5OiBcIjcwODA5MFwiLFxuICAgIHNub3c6IFwiZmZmYWZhXCIsXG4gICAgc3ByaW5nZ3JlZW46IFwiMDBmZjdmXCIsXG4gICAgc3RlZWxibHVlOiBcIjQ2ODJiNFwiLFxuICAgIHRhbjogXCJkMmI0OGNcIixcbiAgICB0ZWFsOiBcIjAwODA4MFwiLFxuICAgIHRoaXN0bGU6IFwiZDhiZmQ4XCIsXG4gICAgdG9tYXRvOiBcImZmNjM0N1wiLFxuICAgIHR1cnF1b2lzZTogXCI0MGUwZDBcIixcbiAgICB2aW9sZXQ6IFwiZWU4MmVlXCIsXG4gICAgd2hlYXQ6IFwiZjVkZWIzXCIsXG4gICAgd2hpdGU6IFwiZmZmXCIsXG4gICAgd2hpdGVzbW9rZTogXCJmNWY1ZjVcIixcbiAgICB5ZWxsb3c6IFwiZmYwXCIsXG4gICAgeWVsbG93Z3JlZW46IFwiOWFjZDMyXCJcbn07XG5cbi8vIE1ha2UgaXQgZWFzeSB0byBhY2Nlc3MgY29sb3JzIHZpYSBgaGV4TmFtZXNbaGV4XWBcbnZhciBoZXhOYW1lcyA9IHRpbnljb2xvci5oZXhOYW1lcyA9IGZsaXAobmFtZXMpO1xuXG5cbi8vIFV0aWxpdGllc1xuLy8gLS0tLS0tLS0tXG5cbi8vIGB7ICduYW1lMSc6ICd2YWwxJyB9YCBiZWNvbWVzIGB7ICd2YWwxJzogJ25hbWUxJyB9YFxuZnVuY3Rpb24gZmxpcChvKSB7XG4gICAgdmFyIGZsaXBwZWQgPSB7IH07XG4gICAgZm9yICh2YXIgaSBpbiBvKSB7XG4gICAgICAgIGlmIChvLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICAgICAgICBmbGlwcGVkW29baV1dID0gaTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmxpcHBlZDtcbn1cblxuLy8gUmV0dXJuIGEgdmFsaWQgYWxwaGEgdmFsdWUgWzAsMV0gd2l0aCBhbGwgaW52YWxpZCB2YWx1ZXMgYmVpbmcgc2V0IHRvIDFcbmZ1bmN0aW9uIGJvdW5kQWxwaGEoYSkge1xuICAgIGEgPSBwYXJzZUZsb2F0KGEpO1xuXG4gICAgaWYgKGlzTmFOKGEpIHx8IGEgPCAwIHx8IGEgPiAxKSB7XG4gICAgICAgIGEgPSAxO1xuICAgIH1cblxuICAgIHJldHVybiBhO1xufVxuXG4vLyBUYWtlIGlucHV0IGZyb20gWzAsIG5dIGFuZCByZXR1cm4gaXQgYXMgWzAsIDFdXG5mdW5jdGlvbiBib3VuZDAxKG4sIG1heCkge1xuICAgIGlmIChpc09uZVBvaW50WmVybyhuKSkgeyBuID0gXCIxMDAlXCI7IH1cblxuICAgIHZhciBwcm9jZXNzUGVyY2VudCA9IGlzUGVyY2VudGFnZShuKTtcbiAgICBuID0gbWF0aE1pbihtYXgsIG1hdGhNYXgoMCwgcGFyc2VGbG9hdChuKSkpO1xuXG4gICAgLy8gQXV0b21hdGljYWxseSBjb252ZXJ0IHBlcmNlbnRhZ2UgaW50byBudW1iZXJcbiAgICBpZiAocHJvY2Vzc1BlcmNlbnQpIHtcbiAgICAgICAgbiA9IHBhcnNlSW50KG4gKiBtYXgsIDEwKSAvIDEwMDtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgZmxvYXRpbmcgcG9pbnQgcm91bmRpbmcgZXJyb3JzXG4gICAgaWYgKChNYXRoLmFicyhuIC0gbWF4KSA8IDAuMDAwMDAxKSkge1xuICAgICAgICByZXR1cm4gMTtcbiAgICB9XG5cbiAgICAvLyBDb252ZXJ0IGludG8gWzAsIDFdIHJhbmdlIGlmIGl0IGlzbid0IGFscmVhZHlcbiAgICByZXR1cm4gKG4gJSBtYXgpIC8gcGFyc2VGbG9hdChtYXgpO1xufVxuXG4vLyBGb3JjZSBhIG51bWJlciBiZXR3ZWVuIDAgYW5kIDFcbmZ1bmN0aW9uIGNsYW1wMDEodmFsKSB7XG4gICAgcmV0dXJuIG1hdGhNaW4oMSwgbWF0aE1heCgwLCB2YWwpKTtcbn1cblxuLy8gUGFyc2UgYSBiYXNlLTE2IGhleCB2YWx1ZSBpbnRvIGEgYmFzZS0xMCBpbnRlZ2VyXG5mdW5jdGlvbiBwYXJzZUludEZyb21IZXgodmFsKSB7XG4gICAgcmV0dXJuIHBhcnNlSW50KHZhbCwgMTYpO1xufVxuXG4vLyBOZWVkIHRvIGhhbmRsZSAxLjAgYXMgMTAwJSwgc2luY2Ugb25jZSBpdCBpcyBhIG51bWJlciwgdGhlcmUgaXMgbm8gZGlmZmVyZW5jZSBiZXR3ZWVuIGl0IGFuZCAxXG4vLyA8aHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy83NDIyMDcyL2phdmFzY3JpcHQtaG93LXRvLWRldGVjdC1udW1iZXItYXMtYS1kZWNpbWFsLWluY2x1ZGluZy0xLTA+XG5mdW5jdGlvbiBpc09uZVBvaW50WmVybyhuKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBuID09IFwic3RyaW5nXCIgJiYgbi5pbmRleE9mKCcuJykgIT0gLTEgJiYgcGFyc2VGbG9hdChuKSA9PT0gMTtcbn1cblxuLy8gQ2hlY2sgdG8gc2VlIGlmIHN0cmluZyBwYXNzZWQgaW4gaXMgYSBwZXJjZW50YWdlXG5mdW5jdGlvbiBpc1BlcmNlbnRhZ2Uobikge1xuICAgIHJldHVybiB0eXBlb2YgbiA9PT0gXCJzdHJpbmdcIiAmJiBuLmluZGV4T2YoJyUnKSAhPSAtMTtcbn1cblxuLy8gRm9yY2UgYSBoZXggdmFsdWUgdG8gaGF2ZSAyIGNoYXJhY3RlcnNcbmZ1bmN0aW9uIHBhZDIoYykge1xuICAgIHJldHVybiBjLmxlbmd0aCA9PSAxID8gJzAnICsgYyA6ICcnICsgYztcbn1cblxuLy8gUmVwbGFjZSBhIGRlY2ltYWwgd2l0aCBpdCdzIHBlcmNlbnRhZ2UgdmFsdWVcbmZ1bmN0aW9uIGNvbnZlcnRUb1BlcmNlbnRhZ2Uobikge1xuICAgIGlmIChuIDw9IDEpIHtcbiAgICAgICAgbiA9IChuICogMTAwKSArIFwiJVwiO1xuICAgIH1cblxuICAgIHJldHVybiBuO1xufVxuXG4vLyBDb252ZXJ0cyBhIGRlY2ltYWwgdG8gYSBoZXggdmFsdWVcbmZ1bmN0aW9uIGNvbnZlcnREZWNpbWFsVG9IZXgoZCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKHBhcnNlRmxvYXQoZCkgKiAyNTUpLnRvU3RyaW5nKDE2KTtcbn1cbi8vIENvbnZlcnRzIGEgaGV4IHZhbHVlIHRvIGEgZGVjaW1hbFxuZnVuY3Rpb24gY29udmVydEhleFRvRGVjaW1hbChoKSB7XG4gICAgcmV0dXJuIChwYXJzZUludEZyb21IZXgoaCkgLyAyNTUpO1xufVxuXG52YXIgbWF0Y2hlcnMgPSAoZnVuY3Rpb24oKSB7XG5cbiAgICAvLyA8aHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy12YWx1ZXMvI2ludGVnZXJzPlxuICAgIHZhciBDU1NfSU5URUdFUiA9IFwiWy1cXFxcK10/XFxcXGQrJT9cIjtcblxuICAgIC8vIDxodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXZhbHVlcy8jbnVtYmVyLXZhbHVlPlxuICAgIHZhciBDU1NfTlVNQkVSID0gXCJbLVxcXFwrXT9cXFxcZCpcXFxcLlxcXFxkKyU/XCI7XG5cbiAgICAvLyBBbGxvdyBwb3NpdGl2ZS9uZWdhdGl2ZSBpbnRlZ2VyL251bWJlci4gIERvbid0IGNhcHR1cmUgdGhlIGVpdGhlci9vciwganVzdCB0aGUgZW50aXJlIG91dGNvbWUuXG4gICAgdmFyIENTU19VTklUID0gXCIoPzpcIiArIENTU19OVU1CRVIgKyBcIil8KD86XCIgKyBDU1NfSU5URUdFUiArIFwiKVwiO1xuXG4gICAgLy8gQWN0dWFsIG1hdGNoaW5nLlxuICAgIC8vIFBhcmVudGhlc2VzIGFuZCBjb21tYXMgYXJlIG9wdGlvbmFsLCBidXQgbm90IHJlcXVpcmVkLlxuICAgIC8vIFdoaXRlc3BhY2UgY2FuIHRha2UgdGhlIHBsYWNlIG9mIGNvbW1hcyBvciBvcGVuaW5nIHBhcmVuXG4gICAgdmFyIFBFUk1JU1NJVkVfTUFUQ0gzID0gXCJbXFxcXHN8XFxcXChdKyhcIiArIENTU19VTklUICsgXCIpWyx8XFxcXHNdKyhcIiArIENTU19VTklUICsgXCIpWyx8XFxcXHNdKyhcIiArIENTU19VTklUICsgXCIpXFxcXHMqXFxcXCk/XCI7XG4gICAgdmFyIFBFUk1JU1NJVkVfTUFUQ0g0ID0gXCJbXFxcXHN8XFxcXChdKyhcIiArIENTU19VTklUICsgXCIpWyx8XFxcXHNdKyhcIiArIENTU19VTklUICsgXCIpWyx8XFxcXHNdKyhcIiArIENTU19VTklUICsgXCIpWyx8XFxcXHNdKyhcIiArIENTU19VTklUICsgXCIpXFxcXHMqXFxcXCk/XCI7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBDU1NfVU5JVDogbmV3IFJlZ0V4cChDU1NfVU5JVCksXG4gICAgICAgIHJnYjogbmV3IFJlZ0V4cChcInJnYlwiICsgUEVSTUlTU0lWRV9NQVRDSDMpLFxuICAgICAgICByZ2JhOiBuZXcgUmVnRXhwKFwicmdiYVwiICsgUEVSTUlTU0lWRV9NQVRDSDQpLFxuICAgICAgICBoc2w6IG5ldyBSZWdFeHAoXCJoc2xcIiArIFBFUk1JU1NJVkVfTUFUQ0gzKSxcbiAgICAgICAgaHNsYTogbmV3IFJlZ0V4cChcImhzbGFcIiArIFBFUk1JU1NJVkVfTUFUQ0g0KSxcbiAgICAgICAgaHN2OiBuZXcgUmVnRXhwKFwiaHN2XCIgKyBQRVJNSVNTSVZFX01BVENIMyksXG4gICAgICAgIGhzdmE6IG5ldyBSZWdFeHAoXCJoc3ZhXCIgKyBQRVJNSVNTSVZFX01BVENINCksXG4gICAgICAgIGhleDM6IC9eIz8oWzAtOWEtZkEtRl17MX0pKFswLTlhLWZBLUZdezF9KShbMC05YS1mQS1GXXsxfSkkLyxcbiAgICAgICAgaGV4NjogL14jPyhbMC05YS1mQS1GXXsyfSkoWzAtOWEtZkEtRl17Mn0pKFswLTlhLWZBLUZdezJ9KSQvLFxuICAgICAgICBoZXg0OiAvXiM/KFswLTlhLWZBLUZdezF9KShbMC05YS1mQS1GXXsxfSkoWzAtOWEtZkEtRl17MX0pKFswLTlhLWZBLUZdezF9KSQvLFxuICAgICAgICBoZXg4OiAvXiM/KFswLTlhLWZBLUZdezJ9KShbMC05YS1mQS1GXXsyfSkoWzAtOWEtZkEtRl17Mn0pKFswLTlhLWZBLUZdezJ9KSQvXG4gICAgfTtcbn0pKCk7XG5cbi8vIGBpc1ZhbGlkQ1NTVW5pdGBcbi8vIFRha2UgaW4gYSBzaW5nbGUgc3RyaW5nIC8gbnVtYmVyIGFuZCBjaGVjayB0byBzZWUgaWYgaXQgbG9va3MgbGlrZSBhIENTUyB1bml0XG4vLyAoc2VlIGBtYXRjaGVyc2AgYWJvdmUgZm9yIGRlZmluaXRpb24pLlxuZnVuY3Rpb24gaXNWYWxpZENTU1VuaXQoY29sb3IpIHtcbiAgICByZXR1cm4gISFtYXRjaGVycy5DU1NfVU5JVC5leGVjKGNvbG9yKTtcbn1cblxuLy8gYHN0cmluZ0lucHV0VG9PYmplY3RgXG4vLyBQZXJtaXNzaXZlIHN0cmluZyBwYXJzaW5nLiAgVGFrZSBpbiBhIG51bWJlciBvZiBmb3JtYXRzLCBhbmQgb3V0cHV0IGFuIG9iamVjdFxuLy8gYmFzZWQgb24gZGV0ZWN0ZWQgZm9ybWF0LiAgUmV0dXJucyBgeyByLCBnLCBiIH1gIG9yIGB7IGgsIHMsIGwgfWAgb3IgYHsgaCwgcywgdn1gXG5mdW5jdGlvbiBzdHJpbmdJbnB1dFRvT2JqZWN0KGNvbG9yKSB7XG5cbiAgICBjb2xvciA9IGNvbG9yLnJlcGxhY2UodHJpbUxlZnQsJycpLnJlcGxhY2UodHJpbVJpZ2h0LCAnJykudG9Mb3dlckNhc2UoKTtcbiAgICB2YXIgbmFtZWQgPSBmYWxzZTtcbiAgICBpZiAobmFtZXNbY29sb3JdKSB7XG4gICAgICAgIGNvbG9yID0gbmFtZXNbY29sb3JdO1xuICAgICAgICBuYW1lZCA9IHRydWU7XG4gICAgfVxuICAgIGVsc2UgaWYgKGNvbG9yID09ICd0cmFuc3BhcmVudCcpIHtcbiAgICAgICAgcmV0dXJuIHsgcjogMCwgZzogMCwgYjogMCwgYTogMCwgZm9ybWF0OiBcIm5hbWVcIiB9O1xuICAgIH1cblxuICAgIC8vIFRyeSB0byBtYXRjaCBzdHJpbmcgaW5wdXQgdXNpbmcgcmVndWxhciBleHByZXNzaW9ucy5cbiAgICAvLyBLZWVwIG1vc3Qgb2YgdGhlIG51bWJlciBib3VuZGluZyBvdXQgb2YgdGhpcyBmdW5jdGlvbiAtIGRvbid0IHdvcnJ5IGFib3V0IFswLDFdIG9yIFswLDEwMF0gb3IgWzAsMzYwXVxuICAgIC8vIEp1c3QgcmV0dXJuIGFuIG9iamVjdCBhbmQgbGV0IHRoZSBjb252ZXJzaW9uIGZ1bmN0aW9ucyBoYW5kbGUgdGhhdC5cbiAgICAvLyBUaGlzIHdheSB0aGUgcmVzdWx0IHdpbGwgYmUgdGhlIHNhbWUgd2hldGhlciB0aGUgdGlueWNvbG9yIGlzIGluaXRpYWxpemVkIHdpdGggc3RyaW5nIG9yIG9iamVjdC5cbiAgICB2YXIgbWF0Y2g7XG4gICAgaWYgKChtYXRjaCA9IG1hdGNoZXJzLnJnYi5leGVjKGNvbG9yKSkpIHtcbiAgICAgICAgcmV0dXJuIHsgcjogbWF0Y2hbMV0sIGc6IG1hdGNoWzJdLCBiOiBtYXRjaFszXSB9O1xuICAgIH1cbiAgICBpZiAoKG1hdGNoID0gbWF0Y2hlcnMucmdiYS5leGVjKGNvbG9yKSkpIHtcbiAgICAgICAgcmV0dXJuIHsgcjogbWF0Y2hbMV0sIGc6IG1hdGNoWzJdLCBiOiBtYXRjaFszXSwgYTogbWF0Y2hbNF0gfTtcbiAgICB9XG4gICAgaWYgKChtYXRjaCA9IG1hdGNoZXJzLmhzbC5leGVjKGNvbG9yKSkpIHtcbiAgICAgICAgcmV0dXJuIHsgaDogbWF0Y2hbMV0sIHM6IG1hdGNoWzJdLCBsOiBtYXRjaFszXSB9O1xuICAgIH1cbiAgICBpZiAoKG1hdGNoID0gbWF0Y2hlcnMuaHNsYS5leGVjKGNvbG9yKSkpIHtcbiAgICAgICAgcmV0dXJuIHsgaDogbWF0Y2hbMV0sIHM6IG1hdGNoWzJdLCBsOiBtYXRjaFszXSwgYTogbWF0Y2hbNF0gfTtcbiAgICB9XG4gICAgaWYgKChtYXRjaCA9IG1hdGNoZXJzLmhzdi5leGVjKGNvbG9yKSkpIHtcbiAgICAgICAgcmV0dXJuIHsgaDogbWF0Y2hbMV0sIHM6IG1hdGNoWzJdLCB2OiBtYXRjaFszXSB9O1xuICAgIH1cbiAgICBpZiAoKG1hdGNoID0gbWF0Y2hlcnMuaHN2YS5leGVjKGNvbG9yKSkpIHtcbiAgICAgICAgcmV0dXJuIHsgaDogbWF0Y2hbMV0sIHM6IG1hdGNoWzJdLCB2OiBtYXRjaFszXSwgYTogbWF0Y2hbNF0gfTtcbiAgICB9XG4gICAgaWYgKChtYXRjaCA9IG1hdGNoZXJzLmhleDguZXhlYyhjb2xvcikpKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByOiBwYXJzZUludEZyb21IZXgobWF0Y2hbMV0pLFxuICAgICAgICAgICAgZzogcGFyc2VJbnRGcm9tSGV4KG1hdGNoWzJdKSxcbiAgICAgICAgICAgIGI6IHBhcnNlSW50RnJvbUhleChtYXRjaFszXSksXG4gICAgICAgICAgICBhOiBjb252ZXJ0SGV4VG9EZWNpbWFsKG1hdGNoWzRdKSxcbiAgICAgICAgICAgIGZvcm1hdDogbmFtZWQgPyBcIm5hbWVcIiA6IFwiaGV4OFwiXG4gICAgICAgIH07XG4gICAgfVxuICAgIGlmICgobWF0Y2ggPSBtYXRjaGVycy5oZXg2LmV4ZWMoY29sb3IpKSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcjogcGFyc2VJbnRGcm9tSGV4KG1hdGNoWzFdKSxcbiAgICAgICAgICAgIGc6IHBhcnNlSW50RnJvbUhleChtYXRjaFsyXSksXG4gICAgICAgICAgICBiOiBwYXJzZUludEZyb21IZXgobWF0Y2hbM10pLFxuICAgICAgICAgICAgZm9ybWF0OiBuYW1lZCA/IFwibmFtZVwiIDogXCJoZXhcIlxuICAgICAgICB9O1xuICAgIH1cbiAgICBpZiAoKG1hdGNoID0gbWF0Y2hlcnMuaGV4NC5leGVjKGNvbG9yKSkpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHI6IHBhcnNlSW50RnJvbUhleChtYXRjaFsxXSArICcnICsgbWF0Y2hbMV0pLFxuICAgICAgICAgICAgZzogcGFyc2VJbnRGcm9tSGV4KG1hdGNoWzJdICsgJycgKyBtYXRjaFsyXSksXG4gICAgICAgICAgICBiOiBwYXJzZUludEZyb21IZXgobWF0Y2hbM10gKyAnJyArIG1hdGNoWzNdKSxcbiAgICAgICAgICAgIGE6IGNvbnZlcnRIZXhUb0RlY2ltYWwobWF0Y2hbNF0gKyAnJyArIG1hdGNoWzRdKSxcbiAgICAgICAgICAgIGZvcm1hdDogbmFtZWQgPyBcIm5hbWVcIiA6IFwiaGV4OFwiXG4gICAgICAgIH07XG4gICAgfVxuICAgIGlmICgobWF0Y2ggPSBtYXRjaGVycy5oZXgzLmV4ZWMoY29sb3IpKSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcjogcGFyc2VJbnRGcm9tSGV4KG1hdGNoWzFdICsgJycgKyBtYXRjaFsxXSksXG4gICAgICAgICAgICBnOiBwYXJzZUludEZyb21IZXgobWF0Y2hbMl0gKyAnJyArIG1hdGNoWzJdKSxcbiAgICAgICAgICAgIGI6IHBhcnNlSW50RnJvbUhleChtYXRjaFszXSArICcnICsgbWF0Y2hbM10pLFxuICAgICAgICAgICAgZm9ybWF0OiBuYW1lZCA/IFwibmFtZVwiIDogXCJoZXhcIlxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVXQ0FHMlBhcm1zKHBhcm1zKSB7XG4gICAgLy8gcmV0dXJuIHZhbGlkIFdDQUcyIHBhcm1zIGZvciBpc1JlYWRhYmxlLlxuICAgIC8vIElmIGlucHV0IHBhcm1zIGFyZSBpbnZhbGlkLCByZXR1cm4ge1wibGV2ZWxcIjpcIkFBXCIsIFwic2l6ZVwiOlwic21hbGxcIn1cbiAgICB2YXIgbGV2ZWwsIHNpemU7XG4gICAgcGFybXMgPSBwYXJtcyB8fCB7XCJsZXZlbFwiOlwiQUFcIiwgXCJzaXplXCI6XCJzbWFsbFwifTtcbiAgICBsZXZlbCA9IChwYXJtcy5sZXZlbCB8fCBcIkFBXCIpLnRvVXBwZXJDYXNlKCk7XG4gICAgc2l6ZSA9IChwYXJtcy5zaXplIHx8IFwic21hbGxcIikudG9Mb3dlckNhc2UoKTtcbiAgICBpZiAobGV2ZWwgIT09IFwiQUFcIiAmJiBsZXZlbCAhPT0gXCJBQUFcIikge1xuICAgICAgICBsZXZlbCA9IFwiQUFcIjtcbiAgICB9XG4gICAgaWYgKHNpemUgIT09IFwic21hbGxcIiAmJiBzaXplICE9PSBcImxhcmdlXCIpIHtcbiAgICAgICAgc2l6ZSA9IFwic21hbGxcIjtcbiAgICB9XG4gICAgcmV0dXJuIHtcImxldmVsXCI6bGV2ZWwsIFwic2l6ZVwiOnNpemV9O1xufVxuXG4vLyBOb2RlOiBFeHBvcnQgZnVuY3Rpb25cbmlmICh0eXBlb2YgbW9kdWxlICE9PSBcInVuZGVmaW5lZFwiICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSB0aW55Y29sb3I7XG59XG4vLyBBTUQvcmVxdWlyZWpzOiBEZWZpbmUgdGhlIG1vZHVsZVxuZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKGZ1bmN0aW9uICgpIHtyZXR1cm4gdGlueWNvbG9yO30pO1xufVxuLy8gQnJvd3NlcjogRXhwb3NlIHRvIHdpbmRvd1xuZWxzZSB7XG4gICAgd2luZG93LnRpbnljb2xvciA9IHRpbnljb2xvcjtcbn1cblxufSkoTWF0aCk7XG4iLCIvKiFcbiAqIFZpZXdlci5qcyB2MS4xMC41XG4gKiBodHRwczovL2Zlbmd5dWFuY2hlbi5naXRodWIuaW8vdmlld2VyanNcbiAqXG4gKiBDb3B5cmlnaHQgMjAxNS1wcmVzZW50IENoZW4gRmVuZ3l1YW5cbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICpcbiAqIERhdGU6IDIwMjItMDQtMDVUMDg6MjE6MDIuNDkxWlxuICovXG5cbihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpIDpcbiAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDpcbiAgKGdsb2JhbCA9IHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbFRoaXMgOiBnbG9iYWwgfHwgc2VsZiwgZ2xvYmFsLlZpZXdlciA9IGZhY3RvcnkoKSk7XG59KSh0aGlzLCAoZnVuY3Rpb24gKCkgeyAndXNlIHN0cmljdCc7XG5cbiAgZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7XG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpO1xuXG4gICAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICAgIHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpO1xuICAgICAgZW51bWVyYWJsZU9ubHkgJiYgKHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlO1xuICAgICAgfSkpLCBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGtleXM7XG4gIH1cblxuICBmdW5jdGlvbiBfb2JqZWN0U3ByZWFkMih0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IG51bGwgIT0gYXJndW1lbnRzW2ldID8gYXJndW1lbnRzW2ldIDoge307XG4gICAgICBpICUgMiA/IG93bktleXMoT2JqZWN0KHNvdXJjZSksICEwKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7XG4gICAgICB9KSA6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKSA6IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH1cblxuICBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICAgIFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjtcblxuICAgIHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG9iaikge1xuICAgICAgcmV0dXJuIHR5cGVvZiBvYmo7XG4gICAgfSA6IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgIHJldHVybiBvYmogJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7XG4gICAgfSwgX3R5cGVvZihvYmopO1xuICB9XG5cbiAgZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICAgIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb25zdHJ1Y3RvciwgXCJwcm90b3R5cGVcIiwge1xuICAgICAgd3JpdGFibGU6IGZhbHNlXG4gICAgfSk7XG4gICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICB9XG5cbiAgZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICAgIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gb2JqO1xuICB9XG5cbiAgdmFyIERFRkFVTFRTID0ge1xuICAgIC8qKlxuICAgICAqIEVuYWJsZSBhIG1vZGFsIGJhY2tkcm9wLCBzcGVjaWZ5IGBzdGF0aWNgIGZvciBhIGJhY2tkcm9wXG4gICAgICogd2hpY2ggZG9lc24ndCBjbG9zZSB0aGUgbW9kYWwgb24gY2xpY2suXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgYmFja2Ryb3A6IHRydWUsXG5cbiAgICAvKipcbiAgICAgKiBTaG93IHRoZSBidXR0b24gb24gdGhlIHRvcC1yaWdodCBvZiB0aGUgdmlld2VyLlxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIGJ1dHRvbjogdHJ1ZSxcblxuICAgIC8qKlxuICAgICAqIFNob3cgdGhlIG5hdmJhci5cbiAgICAgKiBAdHlwZSB7Ym9vbGVhbiB8IG51bWJlcn1cbiAgICAgKi9cbiAgICBuYXZiYXI6IHRydWUsXG5cbiAgICAvKipcbiAgICAgKiBTcGVjaWZ5IHRoZSB2aXNpYmlsaXR5IGFuZCB0aGUgY29udGVudCBvZiB0aGUgdGl0bGUuXG4gICAgICogQHR5cGUge2Jvb2xlYW4gfCBudW1iZXIgfCBGdW5jdGlvbiB8IEFycmF5fVxuICAgICAqL1xuICAgIHRpdGxlOiB0cnVlLFxuXG4gICAgLyoqXG4gICAgICogU2hvdyB0aGUgdG9vbGJhci5cbiAgICAgKiBAdHlwZSB7Ym9vbGVhbiB8IG51bWJlciB8IE9iamVjdH1cbiAgICAgKi9cbiAgICB0b29sYmFyOiB0cnVlLFxuXG4gICAgLyoqXG4gICAgICogQ3VzdG9tIGNsYXNzIG5hbWUocykgdG8gYWRkIHRvIHRoZSB2aWV3ZXIncyByb290IGVsZW1lbnQuXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICBjbGFzc05hbWU6ICcnLFxuXG4gICAgLyoqXG4gICAgICogRGVmaW5lIHdoZXJlIHRvIHB1dCB0aGUgdmlld2VyIGluIG1vZGFsIG1vZGUuXG4gICAgICogQHR5cGUge3N0cmluZyB8IEVsZW1lbnR9XG4gICAgICovXG4gICAgY29udGFpbmVyOiAnYm9keScsXG5cbiAgICAvKipcbiAgICAgKiBGaWx0ZXIgdGhlIGltYWdlcyBmb3Igdmlld2luZy4gUmV0dXJuIHRydWUgaWYgdGhlIGltYWdlIGlzIHZpZXdhYmxlLlxuICAgICAqIEB0eXBlIHtGdW5jdGlvbn1cbiAgICAgKi9cbiAgICBmaWx0ZXI6IG51bGwsXG5cbiAgICAvKipcbiAgICAgKiBFbmFibGUgdG8gcmVxdWVzdCBmdWxsc2NyZWVuIHdoZW4gcGxheS5cbiAgICAgKiB7QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0Z1bGxzY3JlZW5PcHRpb25zfVxuICAgICAqIEB0eXBlIHtib29sZWFufEZ1bGxzY3JlZW5PcHRpb25zfVxuICAgICAqL1xuICAgIGZ1bGxzY3JlZW46IHRydWUsXG5cbiAgICAvKipcbiAgICAgKiBEZWZpbmUgdGhlIGV4dHJhIGF0dHJpYnV0ZXMgdG8gaW5oZXJpdCBmcm9tIHRoZSBvcmlnaW5hbCBpbWFnZS5cbiAgICAgKiBAdHlwZSB7QXJyYXl9XG4gICAgICovXG4gICAgaW5oZXJpdGVkQXR0cmlidXRlczogWydjcm9zc09yaWdpbicsICdkZWNvZGluZycsICdpc01hcCcsICdsb2FkaW5nJywgJ3JlZmVycmVyUG9saWN5JywgJ3NpemVzJywgJ3NyY3NldCcsICd1c2VNYXAnXSxcblxuICAgIC8qKlxuICAgICAqIERlZmluZSB0aGUgaW5pdGlhbCBpbmRleCBvZiBpbWFnZSBmb3Igdmlld2luZy5cbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIGluaXRpYWxWaWV3SW5kZXg6IDAsXG5cbiAgICAvKipcbiAgICAgKiBFbmFibGUgaW5saW5lIG1vZGUuXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgaW5saW5lOiBmYWxzZSxcblxuICAgIC8qKlxuICAgICAqIFRoZSBhbW91bnQgb2YgdGltZSB0byBkZWxheSBiZXR3ZWVuIGF1dG9tYXRpY2FsbHkgY3ljbGluZyBhbiBpbWFnZSB3aGVuIHBsYXlpbmcuXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICBpbnRlcnZhbDogNTAwMCxcblxuICAgIC8qKlxuICAgICAqIEVuYWJsZSBrZXlib2FyZCBzdXBwb3J0LlxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIGtleWJvYXJkOiB0cnVlLFxuXG4gICAgLyoqXG4gICAgICogRm9jdXMgdGhlIHZpZXdlciB3aGVuIGluaXRpYWxpemVkLlxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIGZvY3VzOiB0cnVlLFxuXG4gICAgLyoqXG4gICAgICogSW5kaWNhdGUgaWYgc2hvdyBhIGxvYWRpbmcgc3Bpbm5lciB3aGVuIGxvYWQgaW1hZ2Ugb3Igbm90LlxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIGxvYWRpbmc6IHRydWUsXG5cbiAgICAvKipcbiAgICAgKiBJbmRpY2F0ZSBpZiBlbmFibGUgbG9vcCB2aWV3aW5nIG9yIG5vdC5cbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBsb29wOiB0cnVlLFxuXG4gICAgLyoqXG4gICAgICogTWluIHdpZHRoIG9mIHRoZSB2aWV3ZXIgaW4gaW5saW5lIG1vZGUuXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICBtaW5XaWR0aDogMjAwLFxuXG4gICAgLyoqXG4gICAgICogTWluIGhlaWdodCBvZiB0aGUgdmlld2VyIGluIGlubGluZSBtb2RlLlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgbWluSGVpZ2h0OiAxMDAsXG5cbiAgICAvKipcbiAgICAgKiBFbmFibGUgdG8gbW92ZSB0aGUgaW1hZ2UuXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgbW92YWJsZTogdHJ1ZSxcblxuICAgIC8qKlxuICAgICAqIEVuYWJsZSB0byByb3RhdGUgdGhlIGltYWdlLlxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIHJvdGF0YWJsZTogdHJ1ZSxcblxuICAgIC8qKlxuICAgICAqIEVuYWJsZSB0byBzY2FsZSB0aGUgaW1hZ2UuXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgc2NhbGFibGU6IHRydWUsXG5cbiAgICAvKipcbiAgICAgKiBFbmFibGUgdG8gem9vbSB0aGUgaW1hZ2UuXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgem9vbWFibGU6IHRydWUsXG5cbiAgICAvKipcbiAgICAgKiBFbmFibGUgdG8gem9vbSB0aGUgY3VycmVudCBpbWFnZSBieSBkcmFnZ2luZyBvbiB0aGUgdG91Y2ggc2NyZWVuLlxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIHpvb21PblRvdWNoOiB0cnVlLFxuXG4gICAgLyoqXG4gICAgICogRW5hYmxlIHRvIHpvb20gdGhlIGltYWdlIGJ5IHdoZWVsaW5nIG1vdXNlLlxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIHpvb21PbldoZWVsOiB0cnVlLFxuXG4gICAgLyoqXG4gICAgICogRW5hYmxlIHRvIHNsaWRlIHRvIHRoZSBuZXh0IG9yIHByZXZpb3VzIGltYWdlIGJ5IHN3aXBpbmcgb24gdGhlIHRvdWNoIHNjcmVlbi5cbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBzbGlkZU9uVG91Y2g6IHRydWUsXG5cbiAgICAvKipcbiAgICAgKiBJbmRpY2F0ZSBpZiB0b2dnbGUgdGhlIGltYWdlIHNpemUgYmV0d2VlbiBpdHMgbmF0dXJhbCBzaXplXG4gICAgICogYW5kIGluaXRpYWwgc2l6ZSB3aGVuIGRvdWJsZSBjbGljayBvbiB0aGUgaW1hZ2Ugb3Igbm90LlxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIHRvZ2dsZU9uRGJsY2xpY2s6IHRydWUsXG5cbiAgICAvKipcbiAgICAgKiBTaG93IHRoZSB0b29sdGlwIHdpdGggaW1hZ2UgcmF0aW8gKHBlcmNlbnRhZ2UpIHdoZW4gem9vbSBpbiBvciB6b29tIG91dC5cbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0b29sdGlwOiB0cnVlLFxuXG4gICAgLyoqXG4gICAgICogRW5hYmxlIENTUzMgVHJhbnNpdGlvbiBmb3Igc29tZSBzcGVjaWFsIGVsZW1lbnRzLlxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIHRyYW5zaXRpb246IHRydWUsXG5cbiAgICAvKipcbiAgICAgKiBEZWZpbmUgdGhlIENTUyBgei1pbmRleGAgdmFsdWUgb2Ygdmlld2VyIGluIG1vZGFsIG1vZGUuXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB6SW5kZXg6IDIwMTUsXG5cbiAgICAvKipcbiAgICAgKiBEZWZpbmUgdGhlIENTUyBgei1pbmRleGAgdmFsdWUgb2Ygdmlld2VyIGluIGlubGluZSBtb2RlLlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgekluZGV4SW5saW5lOiAwLFxuXG4gICAgLyoqXG4gICAgICogRGVmaW5lIHRoZSByYXRpbyB3aGVuIHpvb20gdGhlIGltYWdlIGJ5IHdoZWVsaW5nIG1vdXNlLlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgem9vbVJhdGlvOiAwLjEsXG5cbiAgICAvKipcbiAgICAgKiBEZWZpbmUgdGhlIG1pbiByYXRpbyBvZiB0aGUgaW1hZ2Ugd2hlbiB6b29tIG91dC5cbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIG1pblpvb21SYXRpbzogMC4wMSxcblxuICAgIC8qKlxuICAgICAqIERlZmluZSB0aGUgbWF4IHJhdGlvIG9mIHRoZSBpbWFnZSB3aGVuIHpvb20gaW4uXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICBtYXhab29tUmF0aW86IDEwMCxcblxuICAgIC8qKlxuICAgICAqIERlZmluZSB3aGVyZSB0byBnZXQgdGhlIG9yaWdpbmFsIGltYWdlIFVSTCBmb3Igdmlld2luZy5cbiAgICAgKiBAdHlwZSB7c3RyaW5nIHwgRnVuY3Rpb259XG4gICAgICovXG4gICAgdXJsOiAnc3JjJyxcblxuICAgIC8qKlxuICAgICAqIEV2ZW50IHNob3J0Y3V0cy5cbiAgICAgKiBAdHlwZSB7RnVuY3Rpb259XG4gICAgICovXG4gICAgcmVhZHk6IG51bGwsXG4gICAgc2hvdzogbnVsbCxcbiAgICBzaG93bjogbnVsbCxcbiAgICBoaWRlOiBudWxsLFxuICAgIGhpZGRlbjogbnVsbCxcbiAgICB2aWV3OiBudWxsLFxuICAgIHZpZXdlZDogbnVsbCxcbiAgICBtb3ZlOiBudWxsLFxuICAgIG1vdmVkOiBudWxsLFxuICAgIHJvdGF0ZTogbnVsbCxcbiAgICByb3RhdGVkOiBudWxsLFxuICAgIHNjYWxlOiBudWxsLFxuICAgIHNjYWxlZDogbnVsbCxcbiAgICB6b29tOiBudWxsLFxuICAgIHpvb21lZDogbnVsbCxcbiAgICBwbGF5OiBudWxsLFxuICAgIHN0b3A6IG51bGxcbiAgfTtcblxuICB2YXIgVEVNUExBVEUgPSAnPGRpdiBjbGFzcz1cInZpZXdlci1jb250YWluZXJcIiB0YWJpbmRleD1cIi0xXCIgdG91Y2gtYWN0aW9uPVwibm9uZVwiPicgKyAnPGRpdiBjbGFzcz1cInZpZXdlci1jYW52YXNcIj48L2Rpdj4nICsgJzxkaXYgY2xhc3M9XCJ2aWV3ZXItZm9vdGVyXCI+JyArICc8ZGl2IGNsYXNzPVwidmlld2VyLXRpdGxlXCI+PC9kaXY+JyArICc8ZGl2IGNsYXNzPVwidmlld2VyLXRvb2xiYXJcIj48L2Rpdj4nICsgJzxkaXYgY2xhc3M9XCJ2aWV3ZXItbmF2YmFyXCI+JyArICc8dWwgY2xhc3M9XCJ2aWV3ZXItbGlzdFwiIHJvbGU9XCJuYXZpZ2F0aW9uXCI+PC91bD4nICsgJzwvZGl2PicgKyAnPC9kaXY+JyArICc8ZGl2IGNsYXNzPVwidmlld2VyLXRvb2x0aXBcIiByb2xlPVwiYWxlcnRcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2Rpdj4nICsgJzxkaXYgY2xhc3M9XCJ2aWV3ZXItYnV0dG9uXCIgZGF0YS12aWV3ZXItYWN0aW9uPVwibWl4XCIgcm9sZT1cImJ1dHRvblwiPjwvZGl2PicgKyAnPGRpdiBjbGFzcz1cInZpZXdlci1wbGF5ZXJcIj48L2Rpdj4nICsgJzwvZGl2Pic7XG5cbiAgdmFyIElTX0JST1dTRVIgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50ICE9PSAndW5kZWZpbmVkJztcbiAgdmFyIFdJTkRPVyA9IElTX0JST1dTRVIgPyB3aW5kb3cgOiB7fTtcbiAgdmFyIElTX1RPVUNIX0RFVklDRSA9IElTX0JST1dTRVIgJiYgV0lORE9XLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudCA/ICdvbnRvdWNoc3RhcnQnIGluIFdJTkRPVy5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgOiBmYWxzZTtcbiAgdmFyIEhBU19QT0lOVEVSX0VWRU5UID0gSVNfQlJPV1NFUiA/ICdQb2ludGVyRXZlbnQnIGluIFdJTkRPVyA6IGZhbHNlO1xuICB2YXIgTkFNRVNQQUNFID0gJ3ZpZXdlcic7IC8vIEFjdGlvbnNcblxuICB2YXIgQUNUSU9OX01PVkUgPSAnbW92ZSc7XG4gIHZhciBBQ1RJT05fU1dJVENIID0gJ3N3aXRjaCc7XG4gIHZhciBBQ1RJT05fWk9PTSA9ICd6b29tJzsgLy8gQ2xhc3Nlc1xuXG4gIHZhciBDTEFTU19BQ1RJVkUgPSBcIlwiLmNvbmNhdChOQU1FU1BBQ0UsIFwiLWFjdGl2ZVwiKTtcbiAgdmFyIENMQVNTX0NMT1NFID0gXCJcIi5jb25jYXQoTkFNRVNQQUNFLCBcIi1jbG9zZVwiKTtcbiAgdmFyIENMQVNTX0ZBREUgPSBcIlwiLmNvbmNhdChOQU1FU1BBQ0UsIFwiLWZhZGVcIik7XG4gIHZhciBDTEFTU19GSVhFRCA9IFwiXCIuY29uY2F0KE5BTUVTUEFDRSwgXCItZml4ZWRcIik7XG4gIHZhciBDTEFTU19GVUxMU0NSRUVOID0gXCJcIi5jb25jYXQoTkFNRVNQQUNFLCBcIi1mdWxsc2NyZWVuXCIpO1xuICB2YXIgQ0xBU1NfRlVMTFNDUkVFTl9FWElUID0gXCJcIi5jb25jYXQoTkFNRVNQQUNFLCBcIi1mdWxsc2NyZWVuLWV4aXRcIik7XG4gIHZhciBDTEFTU19ISURFID0gXCJcIi5jb25jYXQoTkFNRVNQQUNFLCBcIi1oaWRlXCIpO1xuICB2YXIgQ0xBU1NfSElERV9NRF9ET1dOID0gXCJcIi5jb25jYXQoTkFNRVNQQUNFLCBcIi1oaWRlLW1kLWRvd25cIik7XG4gIHZhciBDTEFTU19ISURFX1NNX0RPV04gPSBcIlwiLmNvbmNhdChOQU1FU1BBQ0UsIFwiLWhpZGUtc20tZG93blwiKTtcbiAgdmFyIENMQVNTX0hJREVfWFNfRE9XTiA9IFwiXCIuY29uY2F0KE5BTUVTUEFDRSwgXCItaGlkZS14cy1kb3duXCIpO1xuICB2YXIgQ0xBU1NfSU4gPSBcIlwiLmNvbmNhdChOQU1FU1BBQ0UsIFwiLWluXCIpO1xuICB2YXIgQ0xBU1NfSU5WSVNJQkxFID0gXCJcIi5jb25jYXQoTkFNRVNQQUNFLCBcIi1pbnZpc2libGVcIik7XG4gIHZhciBDTEFTU19MT0FESU5HID0gXCJcIi5jb25jYXQoTkFNRVNQQUNFLCBcIi1sb2FkaW5nXCIpO1xuICB2YXIgQ0xBU1NfTU9WRSA9IFwiXCIuY29uY2F0KE5BTUVTUEFDRSwgXCItbW92ZVwiKTtcbiAgdmFyIENMQVNTX09QRU4gPSBcIlwiLmNvbmNhdChOQU1FU1BBQ0UsIFwiLW9wZW5cIik7XG4gIHZhciBDTEFTU19TSE9XID0gXCJcIi5jb25jYXQoTkFNRVNQQUNFLCBcIi1zaG93XCIpO1xuICB2YXIgQ0xBU1NfVFJBTlNJVElPTiA9IFwiXCIuY29uY2F0KE5BTUVTUEFDRSwgXCItdHJhbnNpdGlvblwiKTsgLy8gTmF0aXZlIGV2ZW50c1xuXG4gIHZhciBFVkVOVF9DTElDSyA9ICdjbGljayc7XG4gIHZhciBFVkVOVF9EQkxDTElDSyA9ICdkYmxjbGljayc7XG4gIHZhciBFVkVOVF9EUkFHX1NUQVJUID0gJ2RyYWdzdGFydCc7XG4gIHZhciBFVkVOVF9GT0NVU0lOID0gJ2ZvY3VzaW4nO1xuICB2YXIgRVZFTlRfS0VZX0RPV04gPSAna2V5ZG93bic7XG4gIHZhciBFVkVOVF9MT0FEID0gJ2xvYWQnO1xuICB2YXIgRVZFTlRfRVJST1IgPSAnZXJyb3InO1xuICB2YXIgRVZFTlRfVE9VQ0hfRU5EID0gSVNfVE9VQ0hfREVWSUNFID8gJ3RvdWNoZW5kIHRvdWNoY2FuY2VsJyA6ICdtb3VzZXVwJztcbiAgdmFyIEVWRU5UX1RPVUNIX01PVkUgPSBJU19UT1VDSF9ERVZJQ0UgPyAndG91Y2htb3ZlJyA6ICdtb3VzZW1vdmUnO1xuICB2YXIgRVZFTlRfVE9VQ0hfU1RBUlQgPSBJU19UT1VDSF9ERVZJQ0UgPyAndG91Y2hzdGFydCcgOiAnbW91c2Vkb3duJztcbiAgdmFyIEVWRU5UX1BPSU5URVJfRE9XTiA9IEhBU19QT0lOVEVSX0VWRU5UID8gJ3BvaW50ZXJkb3duJyA6IEVWRU5UX1RPVUNIX1NUQVJUO1xuICB2YXIgRVZFTlRfUE9JTlRFUl9NT1ZFID0gSEFTX1BPSU5URVJfRVZFTlQgPyAncG9pbnRlcm1vdmUnIDogRVZFTlRfVE9VQ0hfTU9WRTtcbiAgdmFyIEVWRU5UX1BPSU5URVJfVVAgPSBIQVNfUE9JTlRFUl9FVkVOVCA/ICdwb2ludGVydXAgcG9pbnRlcmNhbmNlbCcgOiBFVkVOVF9UT1VDSF9FTkQ7XG4gIHZhciBFVkVOVF9SRVNJWkUgPSAncmVzaXplJztcbiAgdmFyIEVWRU5UX1RSQU5TSVRJT05fRU5EID0gJ3RyYW5zaXRpb25lbmQnO1xuICB2YXIgRVZFTlRfV0hFRUwgPSAnd2hlZWwnOyAvLyBDdXN0b20gZXZlbnRzXG5cbiAgdmFyIEVWRU5UX1JFQURZID0gJ3JlYWR5JztcbiAgdmFyIEVWRU5UX1NIT1cgPSAnc2hvdyc7XG4gIHZhciBFVkVOVF9TSE9XTiA9ICdzaG93bic7XG4gIHZhciBFVkVOVF9ISURFID0gJ2hpZGUnO1xuICB2YXIgRVZFTlRfSElEREVOID0gJ2hpZGRlbic7XG4gIHZhciBFVkVOVF9WSUVXID0gJ3ZpZXcnO1xuICB2YXIgRVZFTlRfVklFV0VEID0gJ3ZpZXdlZCc7XG4gIHZhciBFVkVOVF9NT1ZFID0gJ21vdmUnO1xuICB2YXIgRVZFTlRfTU9WRUQgPSAnbW92ZWQnO1xuICB2YXIgRVZFTlRfUk9UQVRFID0gJ3JvdGF0ZSc7XG4gIHZhciBFVkVOVF9ST1RBVEVEID0gJ3JvdGF0ZWQnO1xuICB2YXIgRVZFTlRfU0NBTEUgPSAnc2NhbGUnO1xuICB2YXIgRVZFTlRfU0NBTEVEID0gJ3NjYWxlZCc7XG4gIHZhciBFVkVOVF9aT09NID0gJ3pvb20nO1xuICB2YXIgRVZFTlRfWk9PTUVEID0gJ3pvb21lZCc7XG4gIHZhciBFVkVOVF9QTEFZID0gJ3BsYXknO1xuICB2YXIgRVZFTlRfU1RPUCA9ICdzdG9wJzsgLy8gRGF0YSBrZXlzXG5cbiAgdmFyIERBVEFfQUNUSU9OID0gXCJcIi5jb25jYXQoTkFNRVNQQUNFLCBcIkFjdGlvblwiKTsgLy8gUmVnRXhwc1xuXG4gIHZhciBSRUdFWFBfU1BBQ0VTID0gL1xcc1xccyovOyAvLyBNaXNjXG5cbiAgdmFyIEJVVFRPTlMgPSBbJ3pvb20taW4nLCAnem9vbS1vdXQnLCAnb25lLXRvLW9uZScsICdyZXNldCcsICdwcmV2JywgJ3BsYXknLCAnbmV4dCcsICdyb3RhdGUtbGVmdCcsICdyb3RhdGUtcmlnaHQnLCAnZmxpcC1ob3Jpem9udGFsJywgJ2ZsaXAtdmVydGljYWwnXTtcblxuICAvKipcbiAgICogQ2hlY2sgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIGEgc3RyaW5nLlxuICAgKiBAcGFyYW0geyp9IHZhbHVlIC0gVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIGEgc3RyaW5nLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGlzU3RyaW5nKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZyc7XG4gIH1cbiAgLyoqXG4gICAqIENoZWNrIGlmIHRoZSBnaXZlbiB2YWx1ZSBpcyBub3QgYSBudW1iZXIuXG4gICAqL1xuXG4gIHZhciBpc05hTiA9IE51bWJlci5pc05hTiB8fCBXSU5ET1cuaXNOYU47XG4gIC8qKlxuICAgKiBDaGVjayBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgYSBudW1iZXIuXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgLSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgYSBudW1iZXIsIGVsc2UgYGZhbHNlYC5cbiAgICovXG5cbiAgZnVuY3Rpb24gaXNOdW1iZXIodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJiAhaXNOYU4odmFsdWUpO1xuICB9XG4gIC8qKlxuICAgKiBDaGVjayBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgdW5kZWZpbmVkLlxuICAgKiBAcGFyYW0geyp9IHZhbHVlIC0gVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIHVuZGVmaW5lZCwgZWxzZSBgZmFsc2VgLlxuICAgKi9cblxuICBmdW5jdGlvbiBpc1VuZGVmaW5lZCh2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnO1xuICB9XG4gIC8qKlxuICAgKiBDaGVjayBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgYW4gb2JqZWN0LlxuICAgKiBAcGFyYW0geyp9IHZhbHVlIC0gVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIGFuIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgKi9cblxuICBmdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICAgIHJldHVybiBfdHlwZW9mKHZhbHVlKSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgIT09IG51bGw7XG4gIH1cbiAgdmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbiAgLyoqXG4gICAqIENoZWNrIGlmIHRoZSBnaXZlbiB2YWx1ZSBpcyBhIHBsYWluIG9iamVjdC5cbiAgICogQHBhcmFtIHsqfSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBnaXZlbiB2YWx1ZSBpcyBhIHBsYWluIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgKi9cblxuICBmdW5jdGlvbiBpc1BsYWluT2JqZWN0KHZhbHVlKSB7XG4gICAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgdmFyIF9jb25zdHJ1Y3RvciA9IHZhbHVlLmNvbnN0cnVjdG9yO1xuICAgICAgdmFyIHByb3RvdHlwZSA9IF9jb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gICAgICByZXR1cm4gX2NvbnN0cnVjdG9yICYmIHByb3RvdHlwZSAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKHByb3RvdHlwZSwgJ2lzUHJvdG90eXBlT2YnKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ2hlY2sgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIGEgZnVuY3Rpb24uXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgLSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgYSBmdW5jdGlvbiwgZWxzZSBgZmFsc2VgLlxuICAgKi9cblxuICBmdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJztcbiAgfVxuICAvKipcbiAgICogSXRlcmF0ZSB0aGUgZ2l2ZW4gZGF0YS5cbiAgICogQHBhcmFtIHsqfSBkYXRhIC0gVGhlIGRhdGEgdG8gaXRlcmF0ZS5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgLSBUaGUgcHJvY2VzcyBmdW5jdGlvbiBmb3IgZWFjaCBlbGVtZW50LlxuICAgKiBAcmV0dXJucyB7Kn0gVGhlIG9yaWdpbmFsIGRhdGEuXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGZvckVhY2goZGF0YSwgY2FsbGJhY2spIHtcbiAgICBpZiAoZGF0YSAmJiBpc0Z1bmN0aW9uKGNhbGxiYWNrKSkge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZGF0YSkgfHwgaXNOdW1iZXIoZGF0YS5sZW5ndGgpXG4gICAgICAvKiBhcnJheS1saWtlICovXG4gICAgICApIHtcbiAgICAgICAgdmFyIGxlbmd0aCA9IGRhdGEubGVuZ3RoO1xuICAgICAgICB2YXIgaTtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICBpZiAoY2FsbGJhY2suY2FsbChkYXRhLCBkYXRhW2ldLCBpLCBkYXRhKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpc09iamVjdChkYXRhKSkge1xuICAgICAgICBPYmplY3Qua2V5cyhkYXRhKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICBjYWxsYmFjay5jYWxsKGRhdGEsIGRhdGFba2V5XSwga2V5LCBkYXRhKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cbiAgLyoqXG4gICAqIEV4dGVuZCB0aGUgZ2l2ZW4gb2JqZWN0LlxuICAgKiBAcGFyYW0geyp9IG9iaiAtIFRoZSBvYmplY3QgdG8gYmUgZXh0ZW5kZWQuXG4gICAqIEBwYXJhbSB7Kn0gYXJncyAtIFRoZSByZXN0IG9iamVjdHMgd2hpY2ggd2lsbCBiZSBtZXJnZWQgdG8gdGhlIGZpcnN0IG9iamVjdC5cbiAgICogQHJldHVybnMge09iamVjdH0gVGhlIGV4dGVuZGVkIG9iamVjdC5cbiAgICovXG5cbiAgdmFyIGFzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gYXNzaWduKG9iaikge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIGlmIChpc09iamVjdChvYmopICYmIGFyZ3MubGVuZ3RoID4gMCkge1xuICAgICAgYXJncy5mb3JFYWNoKGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgICAgaWYgKGlzT2JqZWN0KGFyZykpIHtcbiAgICAgICAgICBPYmplY3Qua2V5cyhhcmcpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgb2JqW2tleV0gPSBhcmdba2V5XTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG9iajtcbiAgfTtcbiAgdmFyIFJFR0VYUF9TVUZGSVggPSAvXig/OndpZHRofGhlaWdodHxsZWZ0fHRvcHxtYXJnaW5MZWZ0fG1hcmdpblRvcCkkLztcbiAgLyoqXG4gICAqIEFwcGx5IHN0eWxlcyB0byB0aGUgZ2l2ZW4gZWxlbWVudC5cbiAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IC0gVGhlIHRhcmdldCBlbGVtZW50LlxuICAgKiBAcGFyYW0ge09iamVjdH0gc3R5bGVzIC0gVGhlIHN0eWxlcyBmb3IgYXBwbHlpbmcuXG4gICAqL1xuXG4gIGZ1bmN0aW9uIHNldFN0eWxlKGVsZW1lbnQsIHN0eWxlcykge1xuICAgIHZhciBzdHlsZSA9IGVsZW1lbnQuc3R5bGU7XG4gICAgZm9yRWFjaChzdHlsZXMsIGZ1bmN0aW9uICh2YWx1ZSwgcHJvcGVydHkpIHtcbiAgICAgIGlmIChSRUdFWFBfU1VGRklYLnRlc3QocHJvcGVydHkpICYmIGlzTnVtYmVyKHZhbHVlKSkge1xuICAgICAgICB2YWx1ZSArPSAncHgnO1xuICAgICAgfVxuXG4gICAgICBzdHlsZVtwcm9wZXJ0eV0gPSB2YWx1ZTtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogRXNjYXBlIGEgc3RyaW5nIGZvciB1c2luZyBpbiBIVE1MLlxuICAgKiBAcGFyYW0ge1N0cmluZ30gdmFsdWUgLSBUaGUgc3RyaW5nIHRvIGVzY2FwZS5cbiAgICogQHJldHVybnMge1N0cmluZ30gUmV0dXJucyB0aGUgZXNjYXBlZCBzdHJpbmcuXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGVzY2FwZUhUTUxFbnRpdGllcyh2YWx1ZSkge1xuICAgIHJldHVybiBpc1N0cmluZyh2YWx1ZSkgPyB2YWx1ZS5yZXBsYWNlKC8mKD8hYW1wO3xxdW90O3wjMzk7fGx0O3xndDspL2csICcmYW1wOycpLnJlcGxhY2UoL1wiL2csICcmcXVvdDsnKS5yZXBsYWNlKC8nL2csICcmIzM5OycpLnJlcGxhY2UoLzwvZywgJyZsdDsnKS5yZXBsYWNlKC8+L2csICcmZ3Q7JykgOiB2YWx1ZTtcbiAgfVxuICAvKipcbiAgICogQ2hlY2sgaWYgdGhlIGdpdmVuIGVsZW1lbnQgaGFzIGEgc3BlY2lhbCBjbGFzcy5cbiAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IC0gVGhlIGVsZW1lbnQgdG8gY2hlY2suXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSAtIFRoZSBjbGFzcyB0byBzZWFyY2guXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgc3BlY2lhbCBjbGFzcyB3YXMgZm91bmQuXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGhhc0NsYXNzKGVsZW1lbnQsIHZhbHVlKSB7XG4gICAgaWYgKCFlbGVtZW50IHx8ICF2YWx1ZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiBlbGVtZW50LmNsYXNzTGlzdCA/IGVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKHZhbHVlKSA6IGVsZW1lbnQuY2xhc3NOYW1lLmluZGV4T2YodmFsdWUpID4gLTE7XG4gIH1cbiAgLyoqXG4gICAqIEFkZCBjbGFzc2VzIHRvIHRoZSBnaXZlbiBlbGVtZW50LlxuICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgLSBUaGUgdGFyZ2V0IGVsZW1lbnQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSAtIFRoZSBjbGFzc2VzIHRvIGJlIGFkZGVkLlxuICAgKi9cblxuICBmdW5jdGlvbiBhZGRDbGFzcyhlbGVtZW50LCB2YWx1ZSkge1xuICAgIGlmICghZWxlbWVudCB8fCAhdmFsdWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoaXNOdW1iZXIoZWxlbWVudC5sZW5ndGgpKSB7XG4gICAgICBmb3JFYWNoKGVsZW1lbnQsIGZ1bmN0aW9uIChlbGVtKSB7XG4gICAgICAgIGFkZENsYXNzKGVsZW0sIHZhbHVlKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChlbGVtZW50LmNsYXNzTGlzdCkge1xuICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKHZhbHVlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgY2xhc3NOYW1lID0gZWxlbWVudC5jbGFzc05hbWUudHJpbSgpO1xuXG4gICAgaWYgKCFjbGFzc05hbWUpIHtcbiAgICAgIGVsZW1lbnQuY2xhc3NOYW1lID0gdmFsdWU7XG4gICAgfSBlbHNlIGlmIChjbGFzc05hbWUuaW5kZXhPZih2YWx1ZSkgPCAwKSB7XG4gICAgICBlbGVtZW50LmNsYXNzTmFtZSA9IFwiXCIuY29uY2F0KGNsYXNzTmFtZSwgXCIgXCIpLmNvbmNhdCh2YWx1ZSk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBSZW1vdmUgY2xhc3NlcyBmcm9tIHRoZSBnaXZlbiBlbGVtZW50LlxuICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgLSBUaGUgdGFyZ2V0IGVsZW1lbnQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSAtIFRoZSBjbGFzc2VzIHRvIGJlIHJlbW92ZWQuXG4gICAqL1xuXG4gIGZ1bmN0aW9uIHJlbW92ZUNsYXNzKGVsZW1lbnQsIHZhbHVlKSB7XG4gICAgaWYgKCFlbGVtZW50IHx8ICF2YWx1ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChpc051bWJlcihlbGVtZW50Lmxlbmd0aCkpIHtcbiAgICAgIGZvckVhY2goZWxlbWVudCwgZnVuY3Rpb24gKGVsZW0pIHtcbiAgICAgICAgcmVtb3ZlQ2xhc3MoZWxlbSwgdmFsdWUpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGVsZW1lbnQuY2xhc3NMaXN0KSB7XG4gICAgICBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUodmFsdWUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChlbGVtZW50LmNsYXNzTmFtZS5pbmRleE9mKHZhbHVlKSA+PSAwKSB7XG4gICAgICBlbGVtZW50LmNsYXNzTmFtZSA9IGVsZW1lbnQuY2xhc3NOYW1lLnJlcGxhY2UodmFsdWUsICcnKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEFkZCBvciByZW1vdmUgY2xhc3NlcyBmcm9tIHRoZSBnaXZlbiBlbGVtZW50LlxuICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgLSBUaGUgdGFyZ2V0IGVsZW1lbnQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSAtIFRoZSBjbGFzc2VzIHRvIGJlIHRvZ2dsZWQuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gYWRkZWQgLSBBZGQgb25seS5cbiAgICovXG5cbiAgZnVuY3Rpb24gdG9nZ2xlQ2xhc3MoZWxlbWVudCwgdmFsdWUsIGFkZGVkKSB7XG4gICAgaWYgKCF2YWx1ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChpc051bWJlcihlbGVtZW50Lmxlbmd0aCkpIHtcbiAgICAgIGZvckVhY2goZWxlbWVudCwgZnVuY3Rpb24gKGVsZW0pIHtcbiAgICAgICAgdG9nZ2xlQ2xhc3MoZWxlbSwgdmFsdWUsIGFkZGVkKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gSUUxMC0xMSBkb2Vzbid0IHN1cHBvcnQgdGhlIHNlY29uZCBwYXJhbWV0ZXIgb2YgYGNsYXNzTGlzdC50b2dnbGVgXG5cblxuICAgIGlmIChhZGRlZCkge1xuICAgICAgYWRkQ2xhc3MoZWxlbWVudCwgdmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZW1vdmVDbGFzcyhlbGVtZW50LCB2YWx1ZSk7XG4gICAgfVxuICB9XG4gIHZhciBSRUdFWFBfSFlQSEVOQVRFID0gLyhbYS16XFxkXSkoW0EtWl0pL2c7XG4gIC8qKlxuICAgKiBUcmFuc2Zvcm0gdGhlIGdpdmVuIHN0cmluZyBmcm9tIGNhbWVsQ2FzZSB0byBrZWJhYi1jYXNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byB0cmFuc2Zvcm0uXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSB0cmFuc2Zvcm1lZCB2YWx1ZS5cbiAgICovXG5cbiAgZnVuY3Rpb24gaHlwaGVuYXRlKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlLnJlcGxhY2UoUkVHRVhQX0hZUEhFTkFURSwgJyQxLSQyJykudG9Mb3dlckNhc2UoKTtcbiAgfVxuICAvKipcbiAgICogR2V0IGRhdGEgZnJvbSB0aGUgZ2l2ZW4gZWxlbWVudC5cbiAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IC0gVGhlIHRhcmdldCBlbGVtZW50LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSBkYXRhIGtleSB0byBnZXQuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBkYXRhIHZhbHVlLlxuICAgKi9cblxuICBmdW5jdGlvbiBnZXREYXRhKGVsZW1lbnQsIG5hbWUpIHtcbiAgICBpZiAoaXNPYmplY3QoZWxlbWVudFtuYW1lXSkpIHtcbiAgICAgIHJldHVybiBlbGVtZW50W25hbWVdO1xuICAgIH1cblxuICAgIGlmIChlbGVtZW50LmRhdGFzZXQpIHtcbiAgICAgIHJldHVybiBlbGVtZW50LmRhdGFzZXRbbmFtZV07XG4gICAgfVxuXG4gICAgcmV0dXJuIGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1cIi5jb25jYXQoaHlwaGVuYXRlKG5hbWUpKSk7XG4gIH1cbiAgLyoqXG4gICAqIFNldCBkYXRhIHRvIHRoZSBnaXZlbiBlbGVtZW50LlxuICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgLSBUaGUgdGFyZ2V0IGVsZW1lbnQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gVGhlIGRhdGEga2V5IHRvIHNldC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGRhdGEgLSBUaGUgZGF0YSB2YWx1ZS5cbiAgICovXG5cbiAgZnVuY3Rpb24gc2V0RGF0YShlbGVtZW50LCBuYW1lLCBkYXRhKSB7XG4gICAgaWYgKGlzT2JqZWN0KGRhdGEpKSB7XG4gICAgICBlbGVtZW50W25hbWVdID0gZGF0YTtcbiAgICB9IGVsc2UgaWYgKGVsZW1lbnQuZGF0YXNldCkge1xuICAgICAgZWxlbWVudC5kYXRhc2V0W25hbWVdID0gZGF0YTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJkYXRhLVwiLmNvbmNhdChoeXBoZW5hdGUobmFtZSkpLCBkYXRhKTtcbiAgICB9XG4gIH1cblxuICB2YXIgb25jZVN1cHBvcnRlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3VwcG9ydGVkID0gZmFsc2U7XG5cbiAgICBpZiAoSVNfQlJPV1NFUikge1xuICAgICAgdmFyIG9uY2UgPSBmYWxzZTtcblxuICAgICAgdmFyIGxpc3RlbmVyID0gZnVuY3Rpb24gbGlzdGVuZXIoKSB7fTtcblxuICAgICAgdmFyIG9wdGlvbnMgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdvbmNlJywge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICBzdXBwb3J0ZWQgPSB0cnVlO1xuICAgICAgICAgIHJldHVybiBvbmNlO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGlzIHNldHRlciBjYW4gZml4IGEgYFR5cGVFcnJvcmAgaW4gc3RyaWN0IG1vZGVcbiAgICAgICAgICoge0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0Vycm9ycy9HZXR0ZXJfb25seX1cbiAgICAgICAgICogQHBhcmFtIHtib29sZWFufSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byBzZXRcbiAgICAgICAgICovXG4gICAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICAgICAgb25jZSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIFdJTkRPVy5hZGRFdmVudExpc3RlbmVyKCd0ZXN0JywgbGlzdGVuZXIsIG9wdGlvbnMpO1xuICAgICAgV0lORE9XLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Rlc3QnLCBsaXN0ZW5lciwgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN1cHBvcnRlZDtcbiAgfSgpO1xuICAvKipcbiAgICogUmVtb3ZlIGV2ZW50IGxpc3RlbmVyIGZyb20gdGhlIHRhcmdldCBlbGVtZW50LlxuICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgLSBUaGUgZXZlbnQgdGFyZ2V0LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSAtIFRoZSBldmVudCB0eXBlKHMpLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciAtIFRoZSBldmVudCBsaXN0ZW5lci5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBUaGUgZXZlbnQgb3B0aW9ucy5cbiAgICovXG5cblxuICBmdW5jdGlvbiByZW1vdmVMaXN0ZW5lcihlbGVtZW50LCB0eXBlLCBsaXN0ZW5lcikge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiB7fTtcbiAgICB2YXIgaGFuZGxlciA9IGxpc3RlbmVyO1xuICAgIHR5cGUudHJpbSgpLnNwbGl0KFJFR0VYUF9TUEFDRVMpLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoIW9uY2VTdXBwb3J0ZWQpIHtcbiAgICAgICAgdmFyIGxpc3RlbmVycyA9IGVsZW1lbnQubGlzdGVuZXJzO1xuXG4gICAgICAgIGlmIChsaXN0ZW5lcnMgJiYgbGlzdGVuZXJzW2V2ZW50XSAmJiBsaXN0ZW5lcnNbZXZlbnRdW2xpc3RlbmVyXSkge1xuICAgICAgICAgIGhhbmRsZXIgPSBsaXN0ZW5lcnNbZXZlbnRdW2xpc3RlbmVyXTtcbiAgICAgICAgICBkZWxldGUgbGlzdGVuZXJzW2V2ZW50XVtsaXN0ZW5lcl07XG5cbiAgICAgICAgICBpZiAoT2JqZWN0LmtleXMobGlzdGVuZXJzW2V2ZW50XSkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBkZWxldGUgbGlzdGVuZXJzW2V2ZW50XTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoT2JqZWN0LmtleXMobGlzdGVuZXJzKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGRlbGV0ZSBlbGVtZW50Lmxpc3RlbmVycztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVyLCBvcHRpb25zKTtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogQWRkIGV2ZW50IGxpc3RlbmVyIHRvIHRoZSB0YXJnZXQgZWxlbWVudC5cbiAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IC0gVGhlIGV2ZW50IHRhcmdldC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgLSBUaGUgZXZlbnQgdHlwZShzKS5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbGlzdGVuZXIgLSBUaGUgZXZlbnQgbGlzdGVuZXIuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gVGhlIGV2ZW50IG9wdGlvbnMuXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGFkZExpc3RlbmVyKGVsZW1lbnQsIHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IHt9O1xuICAgIHZhciBfaGFuZGxlciA9IGxpc3RlbmVyO1xuICAgIHR5cGUudHJpbSgpLnNwbGl0KFJFR0VYUF9TUEFDRVMpLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAob3B0aW9ucy5vbmNlICYmICFvbmNlU3VwcG9ydGVkKSB7XG4gICAgICAgIHZhciBfZWxlbWVudCRsaXN0ZW5lcnMgPSBlbGVtZW50Lmxpc3RlbmVycyxcbiAgICAgICAgICAgIGxpc3RlbmVycyA9IF9lbGVtZW50JGxpc3RlbmVycyA9PT0gdm9pZCAwID8ge30gOiBfZWxlbWVudCRsaXN0ZW5lcnM7XG5cbiAgICAgICAgX2hhbmRsZXIgPSBmdW5jdGlvbiBoYW5kbGVyKCkge1xuICAgICAgICAgIGRlbGV0ZSBsaXN0ZW5lcnNbZXZlbnRdW2xpc3RlbmVyXTtcbiAgICAgICAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIF9oYW5kbGVyLCBvcHRpb25zKTtcblxuICAgICAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGxpc3RlbmVyLmFwcGx5KGVsZW1lbnQsIGFyZ3MpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmICghbGlzdGVuZXJzW2V2ZW50XSkge1xuICAgICAgICAgIGxpc3RlbmVyc1tldmVudF0gPSB7fTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsaXN0ZW5lcnNbZXZlbnRdW2xpc3RlbmVyXSkge1xuICAgICAgICAgIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgbGlzdGVuZXJzW2V2ZW50XVtsaXN0ZW5lcl0sIG9wdGlvbnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGlzdGVuZXJzW2V2ZW50XVtsaXN0ZW5lcl0gPSBfaGFuZGxlcjtcbiAgICAgICAgZWxlbWVudC5saXN0ZW5lcnMgPSBsaXN0ZW5lcnM7XG4gICAgICB9XG5cbiAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgX2hhbmRsZXIsIG9wdGlvbnMpO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBEaXNwYXRjaCBldmVudCBvbiB0aGUgdGFyZ2V0IGVsZW1lbnQuXG4gICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCAtIFRoZSBldmVudCB0YXJnZXQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIC0gVGhlIGV2ZW50IHR5cGUocykuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhIC0gVGhlIGFkZGl0aW9uYWwgZXZlbnQgZGF0YS5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBUaGUgYWRkaXRpb25hbCBldmVudCBvcHRpb25zLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gSW5kaWNhdGUgaWYgdGhlIGV2ZW50IGlzIGRlZmF1bHQgcHJldmVudGVkIG9yIG5vdC5cbiAgICovXG5cbiAgZnVuY3Rpb24gZGlzcGF0Y2hFdmVudChlbGVtZW50LCB0eXBlLCBkYXRhLCBvcHRpb25zKSB7XG4gICAgdmFyIGV2ZW50OyAvLyBFdmVudCBhbmQgQ3VzdG9tRXZlbnQgb24gSUU5LTExIGFyZSBnbG9iYWwgb2JqZWN0cywgbm90IGNvbnN0cnVjdG9yc1xuXG4gICAgaWYgKGlzRnVuY3Rpb24oRXZlbnQpICYmIGlzRnVuY3Rpb24oQ3VzdG9tRXZlbnQpKSB7XG4gICAgICBldmVudCA9IG5ldyBDdXN0b21FdmVudCh0eXBlLCBfb2JqZWN0U3ByZWFkMih7XG4gICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICAgIGNhbmNlbGFibGU6IHRydWUsXG4gICAgICAgIGRldGFpbDogZGF0YVxuICAgICAgfSwgb3B0aW9ucykpO1xuICAgIH0gZWxzZSB7XG4gICAgICBldmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdDdXN0b21FdmVudCcpO1xuICAgICAgZXZlbnQuaW5pdEN1c3RvbUV2ZW50KHR5cGUsIHRydWUsIHRydWUsIGRhdGEpO1xuICAgIH1cblxuICAgIHJldHVybiBlbGVtZW50LmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgdGhlIG9mZnNldCBiYXNlIG9uIHRoZSBkb2N1bWVudC5cbiAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IC0gVGhlIHRhcmdldCBlbGVtZW50LlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgb2Zmc2V0IGRhdGEuXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGdldE9mZnNldChlbGVtZW50KSB7XG4gICAgdmFyIGJveCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxlZnQ6IGJveC5sZWZ0ICsgKHdpbmRvdy5wYWdlWE9mZnNldCAtIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRMZWZ0KSxcbiAgICAgIHRvcDogYm94LnRvcCArICh3aW5kb3cucGFnZVlPZmZzZXQgLSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50VG9wKVxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0cmFuc2Zvcm1zIGJhc2Ugb24gdGhlIGdpdmVuIG9iamVjdC5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9iaiAtIFRoZSB0YXJnZXQgb2JqZWN0LlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBBIHN0cmluZyBjb250YWlucyB0cmFuc2Zvcm0gdmFsdWVzLlxuICAgKi9cblxuICBmdW5jdGlvbiBnZXRUcmFuc2Zvcm1zKF9yZWYpIHtcbiAgICB2YXIgcm90YXRlID0gX3JlZi5yb3RhdGUsXG4gICAgICAgIHNjYWxlWCA9IF9yZWYuc2NhbGVYLFxuICAgICAgICBzY2FsZVkgPSBfcmVmLnNjYWxlWSxcbiAgICAgICAgdHJhbnNsYXRlWCA9IF9yZWYudHJhbnNsYXRlWCxcbiAgICAgICAgdHJhbnNsYXRlWSA9IF9yZWYudHJhbnNsYXRlWTtcbiAgICB2YXIgdmFsdWVzID0gW107XG5cbiAgICBpZiAoaXNOdW1iZXIodHJhbnNsYXRlWCkgJiYgdHJhbnNsYXRlWCAhPT0gMCkge1xuICAgICAgdmFsdWVzLnB1c2goXCJ0cmFuc2xhdGVYKFwiLmNvbmNhdCh0cmFuc2xhdGVYLCBcInB4KVwiKSk7XG4gICAgfVxuXG4gICAgaWYgKGlzTnVtYmVyKHRyYW5zbGF0ZVkpICYmIHRyYW5zbGF0ZVkgIT09IDApIHtcbiAgICAgIHZhbHVlcy5wdXNoKFwidHJhbnNsYXRlWShcIi5jb25jYXQodHJhbnNsYXRlWSwgXCJweClcIikpO1xuICAgIH0gLy8gUm90YXRlIHNob3VsZCBjb21lIGZpcnN0IGJlZm9yZSBzY2FsZSB0byBtYXRjaCBvcmllbnRhdGlvbiB0cmFuc2Zvcm1cblxuXG4gICAgaWYgKGlzTnVtYmVyKHJvdGF0ZSkgJiYgcm90YXRlICE9PSAwKSB7XG4gICAgICB2YWx1ZXMucHVzaChcInJvdGF0ZShcIi5jb25jYXQocm90YXRlLCBcImRlZylcIikpO1xuICAgIH1cblxuICAgIGlmIChpc051bWJlcihzY2FsZVgpICYmIHNjYWxlWCAhPT0gMSkge1xuICAgICAgdmFsdWVzLnB1c2goXCJzY2FsZVgoXCIuY29uY2F0KHNjYWxlWCwgXCIpXCIpKTtcbiAgICB9XG5cbiAgICBpZiAoaXNOdW1iZXIoc2NhbGVZKSAmJiBzY2FsZVkgIT09IDEpIHtcbiAgICAgIHZhbHVlcy5wdXNoKFwic2NhbGVZKFwiLmNvbmNhdChzY2FsZVksIFwiKVwiKSk7XG4gICAgfVxuXG4gICAgdmFyIHRyYW5zZm9ybSA9IHZhbHVlcy5sZW5ndGggPyB2YWx1ZXMuam9pbignICcpIDogJ25vbmUnO1xuICAgIHJldHVybiB7XG4gICAgICBXZWJraXRUcmFuc2Zvcm06IHRyYW5zZm9ybSxcbiAgICAgIG1zVHJhbnNmb3JtOiB0cmFuc2Zvcm0sXG4gICAgICB0cmFuc2Zvcm06IHRyYW5zZm9ybVxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIEdldCBhbiBpbWFnZSBuYW1lIGZyb20gYW4gaW1hZ2UgdXJsLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIC0gVGhlIHRhcmdldCB1cmwuXG4gICAqIEBleGFtcGxlXG4gICAqIC8vIHBpY3R1cmUuanBnXG4gICAqIGdldEltYWdlTmFtZUZyb21VUkwoJ2h0dHBzOi8vZG9tYWluLmNvbS9wYXRoL3RvL3BpY3R1cmUuanBnP3NpemU9MTI4MMOXOTYwJylcbiAgICogQHJldHVybnMge3N0cmluZ30gQSBzdHJpbmcgY29udGFpbnMgdGhlIGltYWdlIG5hbWUuXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGdldEltYWdlTmFtZUZyb21VUkwodXJsKSB7XG4gICAgcmV0dXJuIGlzU3RyaW5nKHVybCkgPyBkZWNvZGVVUklDb21wb25lbnQodXJsLnJlcGxhY2UoL14uKlxcLy8sICcnKS5yZXBsYWNlKC9bPyYjXS4qJC8sICcnKSkgOiAnJztcbiAgfVxuICB2YXIgSVNfU0FGQVJJID0gV0lORE9XLm5hdmlnYXRvciAmJiAvKE1hY2ludG9zaHxpUGhvbmV8aVBvZHxpUGFkKS4qQXBwbGVXZWJLaXQvaS50ZXN0KFdJTkRPVy5uYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgLyoqXG4gICAqIEdldCBhbiBpbWFnZSdzIG5hdHVyYWwgc2l6ZXMuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpbWFnZSAtIFRoZSB0YXJnZXQgaW1hZ2UuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gVGhlIHZpZXdlciBvcHRpb25zLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayAtIFRoZSBjYWxsYmFjayBmdW5jdGlvbi5cbiAgICogQHJldHVybnMge0hUTUxJbWFnZUVsZW1lbnR9IFRoZSBuZXcgaW1hZ2UuXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGdldEltYWdlTmF0dXJhbFNpemVzKGltYWdlLCBvcHRpb25zLCBjYWxsYmFjaykge1xuICAgIHZhciBuZXdJbWFnZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpOyAvLyBNb2Rlcm4gYnJvd3NlcnMgKGV4Y2VwdCBTYWZhcmkpXG5cbiAgICBpZiAoaW1hZ2UubmF0dXJhbFdpZHRoICYmICFJU19TQUZBUkkpIHtcbiAgICAgIGNhbGxiYWNrKGltYWdlLm5hdHVyYWxXaWR0aCwgaW1hZ2UubmF0dXJhbEhlaWdodCk7XG4gICAgICByZXR1cm4gbmV3SW1hZ2U7XG4gICAgfVxuXG4gICAgdmFyIGJvZHkgPSBkb2N1bWVudC5ib2R5IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblxuICAgIG5ld0ltYWdlLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGNhbGxiYWNrKG5ld0ltYWdlLndpZHRoLCBuZXdJbWFnZS5oZWlnaHQpO1xuXG4gICAgICBpZiAoIUlTX1NBRkFSSSkge1xuICAgICAgICBib2R5LnJlbW92ZUNoaWxkKG5ld0ltYWdlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZm9yRWFjaChvcHRpb25zLmluaGVyaXRlZEF0dHJpYnV0ZXMsIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICB2YXIgdmFsdWUgPSBpbWFnZS5nZXRBdHRyaWJ1dGUobmFtZSk7XG5cbiAgICAgIGlmICh2YWx1ZSAhPT0gbnVsbCkge1xuICAgICAgICBuZXdJbWFnZS5zZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIG5ld0ltYWdlLnNyYyA9IGltYWdlLnNyYzsgLy8gaU9TIFNhZmFyaSB3aWxsIGNvbnZlcnQgdGhlIGltYWdlIGF1dG9tYXRpY2FsbHlcbiAgICAvLyB3aXRoIGl0cyBvcmllbnRhdGlvbiBvbmNlIGFwcGVuZCBpdCBpbnRvIERPTVxuXG4gICAgaWYgKCFJU19TQUZBUkkpIHtcbiAgICAgIG5ld0ltYWdlLnN0eWxlLmNzc1RleHQgPSAnbGVmdDowOycgKyAnbWF4LWhlaWdodDpub25lIWltcG9ydGFudDsnICsgJ21heC13aWR0aDpub25lIWltcG9ydGFudDsnICsgJ21pbi1oZWlnaHQ6MCFpbXBvcnRhbnQ7JyArICdtaW4td2lkdGg6MCFpbXBvcnRhbnQ7JyArICdvcGFjaXR5OjA7JyArICdwb3NpdGlvbjphYnNvbHV0ZTsnICsgJ3RvcDowOycgKyAnei1pbmRleDotMTsnO1xuICAgICAgYm9keS5hcHBlbmRDaGlsZChuZXdJbWFnZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ld0ltYWdlO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgdGhlIHJlbGF0ZWQgY2xhc3MgbmFtZSBvZiBhIHJlc3BvbnNpdmUgdHlwZSBudW1iZXIuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIC0gVGhlIHJlc3BvbnNpdmUgdHlwZS5cbiAgICogQHJldHVybnMge3N0cmluZ30gVGhlIHJlbGF0ZWQgY2xhc3MgbmFtZS5cbiAgICovXG5cbiAgZnVuY3Rpb24gZ2V0UmVzcG9uc2l2ZUNsYXNzKHR5cGUpIHtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgcmV0dXJuIENMQVNTX0hJREVfWFNfRE9XTjtcblxuICAgICAgY2FzZSAzOlxuICAgICAgICByZXR1cm4gQ0xBU1NfSElERV9TTV9ET1dOO1xuXG4gICAgICBjYXNlIDQ6XG4gICAgICAgIHJldHVybiBDTEFTU19ISURFX01EX0RPV047XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgbWF4IHJhdGlvIG9mIGEgZ3JvdXAgb2YgcG9pbnRlcnMuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwb2ludGVycyAtIFRoZSB0YXJnZXQgcG9pbnRlcnMuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSByZXN1bHQgcmF0aW8uXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGdldE1heFpvb21SYXRpbyhwb2ludGVycykge1xuICAgIHZhciBwb2ludGVyczIgPSBfb2JqZWN0U3ByZWFkMih7fSwgcG9pbnRlcnMpO1xuXG4gICAgdmFyIHJhdGlvcyA9IFtdO1xuICAgIGZvckVhY2gocG9pbnRlcnMsIGZ1bmN0aW9uIChwb2ludGVyLCBwb2ludGVySWQpIHtcbiAgICAgIGRlbGV0ZSBwb2ludGVyczJbcG9pbnRlcklkXTtcbiAgICAgIGZvckVhY2gocG9pbnRlcnMyLCBmdW5jdGlvbiAocG9pbnRlcjIpIHtcbiAgICAgICAgdmFyIHgxID0gTWF0aC5hYnMocG9pbnRlci5zdGFydFggLSBwb2ludGVyMi5zdGFydFgpO1xuICAgICAgICB2YXIgeTEgPSBNYXRoLmFicyhwb2ludGVyLnN0YXJ0WSAtIHBvaW50ZXIyLnN0YXJ0WSk7XG4gICAgICAgIHZhciB4MiA9IE1hdGguYWJzKHBvaW50ZXIuZW5kWCAtIHBvaW50ZXIyLmVuZFgpO1xuICAgICAgICB2YXIgeTIgPSBNYXRoLmFicyhwb2ludGVyLmVuZFkgLSBwb2ludGVyMi5lbmRZKTtcbiAgICAgICAgdmFyIHoxID0gTWF0aC5zcXJ0KHgxICogeDEgKyB5MSAqIHkxKTtcbiAgICAgICAgdmFyIHoyID0gTWF0aC5zcXJ0KHgyICogeDIgKyB5MiAqIHkyKTtcbiAgICAgICAgdmFyIHJhdGlvID0gKHoyIC0gejEpIC8gejE7XG4gICAgICAgIHJhdGlvcy5wdXNoKHJhdGlvKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJhdGlvcy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gTWF0aC5hYnMoYSkgPCBNYXRoLmFicyhiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmF0aW9zWzBdO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgYSBwb2ludGVyIGZyb20gYW4gZXZlbnQgb2JqZWN0LlxuICAgKiBAcGFyYW0ge09iamVjdH0gZXZlbnQgLSBUaGUgdGFyZ2V0IGV2ZW50IG9iamVjdC5cbiAgICogQHBhcmFtIHtib29sZWFufSBlbmRPbmx5IC0gSW5kaWNhdGVzIGlmIG9ubHkgcmV0dXJucyB0aGUgZW5kIHBvaW50IGNvb3JkaW5hdGUgb3Igbm90LlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgcmVzdWx0IHBvaW50ZXIgY29udGFpbnMgc3RhcnQgYW5kL29yIGVuZCBwb2ludCBjb29yZGluYXRlcy5cbiAgICovXG5cbiAgZnVuY3Rpb24gZ2V0UG9pbnRlcihfcmVmMiwgZW5kT25seSkge1xuICAgIHZhciBwYWdlWCA9IF9yZWYyLnBhZ2VYLFxuICAgICAgICBwYWdlWSA9IF9yZWYyLnBhZ2VZO1xuICAgIHZhciBlbmQgPSB7XG4gICAgICBlbmRYOiBwYWdlWCxcbiAgICAgIGVuZFk6IHBhZ2VZXG4gICAgfTtcbiAgICByZXR1cm4gZW5kT25seSA/IGVuZCA6IF9vYmplY3RTcHJlYWQyKHtcbiAgICAgIHRpbWVTdGFtcDogRGF0ZS5ub3coKSxcbiAgICAgIHN0YXJ0WDogcGFnZVgsXG4gICAgICBzdGFydFk6IHBhZ2VZXG4gICAgfSwgZW5kKTtcbiAgfVxuICAvKipcbiAgICogR2V0IHRoZSBjZW50ZXIgcG9pbnQgY29vcmRpbmF0ZSBvZiBhIGdyb3VwIG9mIHBvaW50ZXJzLlxuICAgKiBAcGFyYW0ge09iamVjdH0gcG9pbnRlcnMgLSBUaGUgdGFyZ2V0IHBvaW50ZXJzLlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgY2VudGVyIHBvaW50IGNvb3JkaW5hdGUuXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGdldFBvaW50ZXJzQ2VudGVyKHBvaW50ZXJzKSB7XG4gICAgdmFyIHBhZ2VYID0gMDtcbiAgICB2YXIgcGFnZVkgPSAwO1xuICAgIHZhciBjb3VudCA9IDA7XG4gICAgZm9yRWFjaChwb2ludGVycywgZnVuY3Rpb24gKF9yZWYzKSB7XG4gICAgICB2YXIgc3RhcnRYID0gX3JlZjMuc3RhcnRYLFxuICAgICAgICAgIHN0YXJ0WSA9IF9yZWYzLnN0YXJ0WTtcbiAgICAgIHBhZ2VYICs9IHN0YXJ0WDtcbiAgICAgIHBhZ2VZICs9IHN0YXJ0WTtcbiAgICAgIGNvdW50ICs9IDE7XG4gICAgfSk7XG4gICAgcGFnZVggLz0gY291bnQ7XG4gICAgcGFnZVkgLz0gY291bnQ7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhZ2VYOiBwYWdlWCxcbiAgICAgIHBhZ2VZOiBwYWdlWVxuICAgIH07XG4gIH1cblxuICB2YXIgcmVuZGVyID0ge1xuICAgIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdGhpcy5pbml0Q29udGFpbmVyKCk7XG4gICAgICB0aGlzLmluaXRWaWV3ZXIoKTtcbiAgICAgIHRoaXMuaW5pdExpc3QoKTtcbiAgICAgIHRoaXMucmVuZGVyVmlld2VyKCk7XG4gICAgfSxcbiAgICBpbml0Qm9keTogZnVuY3Rpb24gaW5pdEJvZHkoKSB7XG4gICAgICB2YXIgb3duZXJEb2N1bWVudCA9IHRoaXMuZWxlbWVudC5vd25lckRvY3VtZW50O1xuICAgICAgdmFyIGJvZHkgPSBvd25lckRvY3VtZW50LmJvZHkgfHwgb3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICB0aGlzLmJvZHkgPSBib2R5O1xuICAgICAgdGhpcy5zY3JvbGxiYXJXaWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoIC0gb3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGg7XG4gICAgICB0aGlzLmluaXRpYWxCb2R5UGFkZGluZ1JpZ2h0ID0gYm9keS5zdHlsZS5wYWRkaW5nUmlnaHQ7XG4gICAgICB0aGlzLmluaXRpYWxCb2R5Q29tcHV0ZWRQYWRkaW5nUmlnaHQgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShib2R5KS5wYWRkaW5nUmlnaHQ7XG4gICAgfSxcbiAgICBpbml0Q29udGFpbmVyOiBmdW5jdGlvbiBpbml0Q29udGFpbmVyKCkge1xuICAgICAgdGhpcy5jb250YWluZXJEYXRhID0ge1xuICAgICAgICB3aWR0aDogd2luZG93LmlubmVyV2lkdGgsXG4gICAgICAgIGhlaWdodDogd2luZG93LmlubmVySGVpZ2h0XG4gICAgICB9O1xuICAgIH0sXG4gICAgaW5pdFZpZXdlcjogZnVuY3Rpb24gaW5pdFZpZXdlcigpIHtcbiAgICAgIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zLFxuICAgICAgICAgIHBhcmVudCA9IHRoaXMucGFyZW50O1xuICAgICAgdmFyIHZpZXdlckRhdGE7XG5cbiAgICAgIGlmIChvcHRpb25zLmlubGluZSkge1xuICAgICAgICB2aWV3ZXJEYXRhID0ge1xuICAgICAgICAgIHdpZHRoOiBNYXRoLm1heChwYXJlbnQub2Zmc2V0V2lkdGgsIG9wdGlvbnMubWluV2lkdGgpLFxuICAgICAgICAgIGhlaWdodDogTWF0aC5tYXgocGFyZW50Lm9mZnNldEhlaWdodCwgb3B0aW9ucy5taW5IZWlnaHQpXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMucGFyZW50RGF0YSA9IHZpZXdlckRhdGE7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmZ1bGxlZCB8fCAhdmlld2VyRGF0YSkge1xuICAgICAgICB2aWV3ZXJEYXRhID0gdGhpcy5jb250YWluZXJEYXRhO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnZpZXdlckRhdGEgPSBhc3NpZ24oe30sIHZpZXdlckRhdGEpO1xuICAgIH0sXG4gICAgcmVuZGVyVmlld2VyOiBmdW5jdGlvbiByZW5kZXJWaWV3ZXIoKSB7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmlubGluZSAmJiAhdGhpcy5mdWxsZWQpIHtcbiAgICAgICAgc2V0U3R5bGUodGhpcy52aWV3ZXIsIHRoaXMudmlld2VyRGF0YSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBpbml0TGlzdDogZnVuY3Rpb24gaW5pdExpc3QoKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICB2YXIgZWxlbWVudCA9IHRoaXMuZWxlbWVudCxcbiAgICAgICAgICBvcHRpb25zID0gdGhpcy5vcHRpb25zLFxuICAgICAgICAgIGxpc3QgPSB0aGlzLmxpc3Q7XG4gICAgICB2YXIgaXRlbXMgPSBbXTsgLy8gaW5pdExpc3QgbWF5IGJlIGNhbGxlZCBpbiB0aGlzLnVwZGF0ZSwgc28gc2hvdWxkIGtlZXAgaWRlbXBvdGVudFxuXG4gICAgICBsaXN0LmlubmVySFRNTCA9ICcnO1xuICAgICAgZm9yRWFjaCh0aGlzLmltYWdlcywgZnVuY3Rpb24gKGltYWdlLCBpbmRleCkge1xuICAgICAgICB2YXIgc3JjID0gaW1hZ2Uuc3JjO1xuICAgICAgICB2YXIgYWx0ID0gaW1hZ2UuYWx0IHx8IGdldEltYWdlTmFtZUZyb21VUkwoc3JjKTtcblxuICAgICAgICB2YXIgdXJsID0gX3RoaXMuZ2V0SW1hZ2VVUkwoaW1hZ2UpO1xuXG4gICAgICAgIGlmIChzcmMgfHwgdXJsKSB7XG4gICAgICAgICAgdmFyIGl0ZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpO1xuICAgICAgICAgIHZhciBpbWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcbiAgICAgICAgICBmb3JFYWNoKG9wdGlvbnMuaW5oZXJpdGVkQXR0cmlidXRlcywgZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IGltYWdlLmdldEF0dHJpYnV0ZShuYW1lKTtcblxuICAgICAgICAgICAgaWYgKHZhbHVlICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgIGltZy5zZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGltZy5zcmMgPSBzcmMgfHwgdXJsO1xuICAgICAgICAgIGltZy5hbHQgPSBhbHQ7XG4gICAgICAgICAgaW1nLnNldEF0dHJpYnV0ZSgnZGF0YS1vcmlnaW5hbC11cmwnLCB1cmwgfHwgc3JjKTtcbiAgICAgICAgICBpdGVtLnNldEF0dHJpYnV0ZSgnZGF0YS1pbmRleCcsIGluZGV4KTtcbiAgICAgICAgICBpdGVtLnNldEF0dHJpYnV0ZSgnZGF0YS12aWV3ZXItYWN0aW9uJywgJ3ZpZXcnKTtcbiAgICAgICAgICBpdGVtLnNldEF0dHJpYnV0ZSgncm9sZScsICdidXR0b24nKTtcblxuICAgICAgICAgIGlmIChvcHRpb25zLmtleWJvYXJkKSB7XG4gICAgICAgICAgICBpdGVtLnNldEF0dHJpYnV0ZSgndGFiaW5kZXgnLCAwKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpdGVtLmFwcGVuZENoaWxkKGltZyk7XG4gICAgICAgICAgbGlzdC5hcHBlbmRDaGlsZChpdGVtKTtcbiAgICAgICAgICBpdGVtcy5wdXNoKGl0ZW0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHRoaXMuaXRlbXMgPSBpdGVtcztcbiAgICAgIGZvckVhY2goaXRlbXMsIGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHZhciBpbWFnZSA9IGl0ZW0uZmlyc3RFbGVtZW50Q2hpbGQ7XG4gICAgICAgIHZhciBvbkxvYWQ7XG4gICAgICAgIHZhciBvbkVycm9yO1xuICAgICAgICBzZXREYXRhKGltYWdlLCAnZmlsbGVkJywgdHJ1ZSk7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMubG9hZGluZykge1xuICAgICAgICAgIGFkZENsYXNzKGl0ZW0sIENMQVNTX0xPQURJTkcpO1xuICAgICAgICB9XG5cbiAgICAgICAgYWRkTGlzdGVuZXIoaW1hZ2UsIEVWRU5UX0xPQUQsIG9uTG9hZCA9IGZ1bmN0aW9uIG9uTG9hZChldmVudCkge1xuICAgICAgICAgIHJlbW92ZUxpc3RlbmVyKGltYWdlLCBFVkVOVF9FUlJPUiwgb25FcnJvcik7XG5cbiAgICAgICAgICBpZiAob3B0aW9ucy5sb2FkaW5nKSB7XG4gICAgICAgICAgICByZW1vdmVDbGFzcyhpdGVtLCBDTEFTU19MT0FESU5HKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBfdGhpcy5sb2FkSW1hZ2UoZXZlbnQpO1xuICAgICAgICB9LCB7XG4gICAgICAgICAgb25jZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgYWRkTGlzdGVuZXIoaW1hZ2UsIEVWRU5UX0VSUk9SLCBvbkVycm9yID0gZnVuY3Rpb24gb25FcnJvcigpIHtcbiAgICAgICAgICByZW1vdmVMaXN0ZW5lcihpbWFnZSwgRVZFTlRfTE9BRCwgb25Mb2FkKTtcblxuICAgICAgICAgIGlmIChvcHRpb25zLmxvYWRpbmcpIHtcbiAgICAgICAgICAgIHJlbW92ZUNsYXNzKGl0ZW0sIENMQVNTX0xPQURJTkcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwge1xuICAgICAgICAgIG9uY2U6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgaWYgKG9wdGlvbnMudHJhbnNpdGlvbikge1xuICAgICAgICBhZGRMaXN0ZW5lcihlbGVtZW50LCBFVkVOVF9WSUVXRUQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBhZGRDbGFzcyhsaXN0LCBDTEFTU19UUkFOU0lUSU9OKTtcbiAgICAgICAgfSwge1xuICAgICAgICAgIG9uY2U6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICByZW5kZXJMaXN0OiBmdW5jdGlvbiByZW5kZXJMaXN0KCkge1xuICAgICAgdmFyIGluZGV4ID0gdGhpcy5pbmRleDtcbiAgICAgIHZhciBpdGVtID0gdGhpcy5pdGVtc1tpbmRleF07XG5cbiAgICAgIGlmICghaXRlbSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBuZXh0ID0gaXRlbS5uZXh0RWxlbWVudFNpYmxpbmc7XG4gICAgICB2YXIgZ3V0dGVyID0gcGFyc2VJbnQod2luZG93LmdldENvbXB1dGVkU3R5bGUobmV4dCB8fCBpdGVtKS5tYXJnaW5MZWZ0LCAxMCk7XG4gICAgICB2YXIgb2Zmc2V0V2lkdGggPSBpdGVtLm9mZnNldFdpZHRoO1xuICAgICAgdmFyIG91dGVyV2lkdGggPSBvZmZzZXRXaWR0aCArIGd1dHRlcjsgLy8gUGxhY2UgdGhlIGFjdGl2ZSBpdGVtIGluIHRoZSBjZW50ZXIgb2YgdGhlIHNjcmVlblxuXG4gICAgICBzZXRTdHlsZSh0aGlzLmxpc3QsIGFzc2lnbih7XG4gICAgICAgIHdpZHRoOiBvdXRlcldpZHRoICogdGhpcy5sZW5ndGggLSBndXR0ZXJcbiAgICAgIH0sIGdldFRyYW5zZm9ybXMoe1xuICAgICAgICB0cmFuc2xhdGVYOiAodGhpcy52aWV3ZXJEYXRhLndpZHRoIC0gb2Zmc2V0V2lkdGgpIC8gMiAtIG91dGVyV2lkdGggKiBpbmRleFxuICAgICAgfSkpKTtcbiAgICB9LFxuICAgIHJlc2V0TGlzdDogZnVuY3Rpb24gcmVzZXRMaXN0KCkge1xuICAgICAgdmFyIGxpc3QgPSB0aGlzLmxpc3Q7XG4gICAgICBsaXN0LmlubmVySFRNTCA9ICcnO1xuICAgICAgcmVtb3ZlQ2xhc3MobGlzdCwgQ0xBU1NfVFJBTlNJVElPTik7XG4gICAgICBzZXRTdHlsZShsaXN0LCBnZXRUcmFuc2Zvcm1zKHtcbiAgICAgICAgdHJhbnNsYXRlWDogMFxuICAgICAgfSkpO1xuICAgIH0sXG4gICAgaW5pdEltYWdlOiBmdW5jdGlvbiBpbml0SW1hZ2UoZG9uZSkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zLFxuICAgICAgICAgIGltYWdlID0gdGhpcy5pbWFnZSxcbiAgICAgICAgICB2aWV3ZXJEYXRhID0gdGhpcy52aWV3ZXJEYXRhO1xuICAgICAgdmFyIGZvb3RlckhlaWdodCA9IHRoaXMuZm9vdGVyLm9mZnNldEhlaWdodDtcbiAgICAgIHZhciB2aWV3ZXJXaWR0aCA9IHZpZXdlckRhdGEud2lkdGg7XG4gICAgICB2YXIgdmlld2VySGVpZ2h0ID0gTWF0aC5tYXgodmlld2VyRGF0YS5oZWlnaHQgLSBmb290ZXJIZWlnaHQsIGZvb3RlckhlaWdodCk7XG4gICAgICB2YXIgb2xkSW1hZ2VEYXRhID0gdGhpcy5pbWFnZURhdGEgfHwge307XG4gICAgICB2YXIgc2l6aW5nSW1hZ2U7XG4gICAgICB0aGlzLmltYWdlSW5pdGlhbGl6aW5nID0ge1xuICAgICAgICBhYm9ydDogZnVuY3Rpb24gYWJvcnQoKSB7XG4gICAgICAgICAgc2l6aW5nSW1hZ2Uub25sb2FkID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHNpemluZ0ltYWdlID0gZ2V0SW1hZ2VOYXR1cmFsU2l6ZXMoaW1hZ2UsIG9wdGlvbnMsIGZ1bmN0aW9uIChuYXR1cmFsV2lkdGgsIG5hdHVyYWxIZWlnaHQpIHtcbiAgICAgICAgdmFyIGFzcGVjdFJhdGlvID0gbmF0dXJhbFdpZHRoIC8gbmF0dXJhbEhlaWdodDtcbiAgICAgICAgdmFyIHdpZHRoID0gdmlld2VyV2lkdGg7XG4gICAgICAgIHZhciBoZWlnaHQgPSB2aWV3ZXJIZWlnaHQ7XG4gICAgICAgIF90aGlzMi5pbWFnZUluaXRpYWxpemluZyA9IGZhbHNlO1xuXG4gICAgICAgIGlmICh2aWV3ZXJIZWlnaHQgKiBhc3BlY3RSYXRpbyA+IHZpZXdlcldpZHRoKSB7XG4gICAgICAgICAgaGVpZ2h0ID0gdmlld2VyV2lkdGggLyBhc3BlY3RSYXRpbztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB3aWR0aCA9IHZpZXdlckhlaWdodCAqIGFzcGVjdFJhdGlvO1xuICAgICAgICB9XG5cbiAgICAgICAgd2lkdGggPSBNYXRoLm1pbih3aWR0aCAqIDAuOSwgbmF0dXJhbFdpZHRoKTtcbiAgICAgICAgaGVpZ2h0ID0gTWF0aC5taW4oaGVpZ2h0ICogMC45LCBuYXR1cmFsSGVpZ2h0KTtcbiAgICAgICAgdmFyIGxlZnQgPSAodmlld2VyV2lkdGggLSB3aWR0aCkgLyAyO1xuICAgICAgICB2YXIgdG9wID0gKHZpZXdlckhlaWdodCAtIGhlaWdodCkgLyAyO1xuICAgICAgICB2YXIgaW1hZ2VEYXRhID0ge1xuICAgICAgICAgIGxlZnQ6IGxlZnQsXG4gICAgICAgICAgdG9wOiB0b3AsXG4gICAgICAgICAgeDogbGVmdCxcbiAgICAgICAgICB5OiB0b3AsXG4gICAgICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgICAgIGhlaWdodDogaGVpZ2h0LFxuICAgICAgICAgIG9sZFJhdGlvOiAxLFxuICAgICAgICAgIHJhdGlvOiB3aWR0aCAvIG5hdHVyYWxXaWR0aCxcbiAgICAgICAgICBhc3BlY3RSYXRpbzogYXNwZWN0UmF0aW8sXG4gICAgICAgICAgbmF0dXJhbFdpZHRoOiBuYXR1cmFsV2lkdGgsXG4gICAgICAgICAgbmF0dXJhbEhlaWdodDogbmF0dXJhbEhlaWdodFxuICAgICAgICB9O1xuICAgICAgICB2YXIgaW5pdGlhbEltYWdlRGF0YSA9IGFzc2lnbih7fSwgaW1hZ2VEYXRhKTtcblxuICAgICAgICBpZiAob3B0aW9ucy5yb3RhdGFibGUpIHtcbiAgICAgICAgICBpbWFnZURhdGEucm90YXRlID0gb2xkSW1hZ2VEYXRhLnJvdGF0ZSB8fCAwO1xuICAgICAgICAgIGluaXRpYWxJbWFnZURhdGEucm90YXRlID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLnNjYWxhYmxlKSB7XG4gICAgICAgICAgaW1hZ2VEYXRhLnNjYWxlWCA9IG9sZEltYWdlRGF0YS5zY2FsZVggfHwgMTtcbiAgICAgICAgICBpbWFnZURhdGEuc2NhbGVZID0gb2xkSW1hZ2VEYXRhLnNjYWxlWSB8fCAxO1xuICAgICAgICAgIGluaXRpYWxJbWFnZURhdGEuc2NhbGVYID0gMTtcbiAgICAgICAgICBpbml0aWFsSW1hZ2VEYXRhLnNjYWxlWSA9IDE7XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpczIuaW1hZ2VEYXRhID0gaW1hZ2VEYXRhO1xuICAgICAgICBfdGhpczIuaW5pdGlhbEltYWdlRGF0YSA9IGluaXRpYWxJbWFnZURhdGE7XG5cbiAgICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgICBkb25lKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sXG4gICAgcmVuZGVySW1hZ2U6IGZ1bmN0aW9uIHJlbmRlckltYWdlKGRvbmUpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICB2YXIgaW1hZ2UgPSB0aGlzLmltYWdlLFxuICAgICAgICAgIGltYWdlRGF0YSA9IHRoaXMuaW1hZ2VEYXRhO1xuICAgICAgc2V0U3R5bGUoaW1hZ2UsIGFzc2lnbih7XG4gICAgICAgIHdpZHRoOiBpbWFnZURhdGEud2lkdGgsXG4gICAgICAgIGhlaWdodDogaW1hZ2VEYXRhLmhlaWdodCxcbiAgICAgICAgLy8gWFhYOiBOb3QgdG8gdXNlIHRyYW5zbGF0ZVgvWSB0byBhdm9pZCBpbWFnZSBzaGFraW5nIHdoZW4gem9vbWluZ1xuICAgICAgICBtYXJnaW5MZWZ0OiBpbWFnZURhdGEueCxcbiAgICAgICAgbWFyZ2luVG9wOiBpbWFnZURhdGEueVxuICAgICAgfSwgZ2V0VHJhbnNmb3JtcyhpbWFnZURhdGEpKSk7XG5cbiAgICAgIGlmIChkb25lKSB7XG4gICAgICAgIGlmICgodGhpcy52aWV3aW5nIHx8IHRoaXMubW92aW5nIHx8IHRoaXMucm90YXRpbmcgfHwgdGhpcy5zY2FsaW5nIHx8IHRoaXMuem9vbWluZykgJiYgdGhpcy5vcHRpb25zLnRyYW5zaXRpb24gJiYgaGFzQ2xhc3MoaW1hZ2UsIENMQVNTX1RSQU5TSVRJT04pKSB7XG4gICAgICAgICAgdmFyIG9uVHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uIG9uVHJhbnNpdGlvbkVuZCgpIHtcbiAgICAgICAgICAgIF90aGlzMy5pbWFnZVJlbmRlcmluZyA9IGZhbHNlO1xuICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICAgIH07XG5cbiAgICAgICAgICB0aGlzLmltYWdlUmVuZGVyaW5nID0ge1xuICAgICAgICAgICAgYWJvcnQ6IGZ1bmN0aW9uIGFib3J0KCkge1xuICAgICAgICAgICAgICByZW1vdmVMaXN0ZW5lcihpbWFnZSwgRVZFTlRfVFJBTlNJVElPTl9FTkQsIG9uVHJhbnNpdGlvbkVuZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgICBhZGRMaXN0ZW5lcihpbWFnZSwgRVZFTlRfVFJBTlNJVElPTl9FTkQsIG9uVHJhbnNpdGlvbkVuZCwge1xuICAgICAgICAgICAgb25jZTogdHJ1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgcmVzZXRJbWFnZTogZnVuY3Rpb24gcmVzZXRJbWFnZSgpIHtcbiAgICAgIC8vIHRoaXMuaW1hZ2Ugb25seSBkZWZpbmVkIGFmdGVyIHZpZXdlZFxuICAgICAgaWYgKHRoaXMudmlld2luZyB8fCB0aGlzLnZpZXdlZCkge1xuICAgICAgICB2YXIgaW1hZ2UgPSB0aGlzLmltYWdlO1xuXG4gICAgICAgIGlmICh0aGlzLnZpZXdpbmcpIHtcbiAgICAgICAgICB0aGlzLnZpZXdpbmcuYWJvcnQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGltYWdlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoaW1hZ2UpO1xuICAgICAgICB0aGlzLmltYWdlID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdmFyIGV2ZW50cyA9IHtcbiAgICBiaW5kOiBmdW5jdGlvbiBiaW5kKCkge1xuICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMsXG4gICAgICAgICAgdmlld2VyID0gdGhpcy52aWV3ZXIsXG4gICAgICAgICAgY2FudmFzID0gdGhpcy5jYW52YXM7XG4gICAgICB2YXIgZG9jdW1lbnQgPSB0aGlzLmVsZW1lbnQub3duZXJEb2N1bWVudDtcbiAgICAgIGFkZExpc3RlbmVyKHZpZXdlciwgRVZFTlRfQ0xJQ0ssIHRoaXMub25DbGljayA9IHRoaXMuY2xpY2suYmluZCh0aGlzKSk7XG4gICAgICBhZGRMaXN0ZW5lcih2aWV3ZXIsIEVWRU5UX0RSQUdfU1RBUlQsIHRoaXMub25EcmFnU3RhcnQgPSB0aGlzLmRyYWdzdGFydC5iaW5kKHRoaXMpKTtcbiAgICAgIGFkZExpc3RlbmVyKGNhbnZhcywgRVZFTlRfUE9JTlRFUl9ET1dOLCB0aGlzLm9uUG9pbnRlckRvd24gPSB0aGlzLnBvaW50ZXJkb3duLmJpbmQodGhpcykpO1xuICAgICAgYWRkTGlzdGVuZXIoZG9jdW1lbnQsIEVWRU5UX1BPSU5URVJfTU9WRSwgdGhpcy5vblBvaW50ZXJNb3ZlID0gdGhpcy5wb2ludGVybW92ZS5iaW5kKHRoaXMpKTtcbiAgICAgIGFkZExpc3RlbmVyKGRvY3VtZW50LCBFVkVOVF9QT0lOVEVSX1VQLCB0aGlzLm9uUG9pbnRlclVwID0gdGhpcy5wb2ludGVydXAuYmluZCh0aGlzKSk7XG4gICAgICBhZGRMaXN0ZW5lcihkb2N1bWVudCwgRVZFTlRfS0VZX0RPV04sIHRoaXMub25LZXlEb3duID0gdGhpcy5rZXlkb3duLmJpbmQodGhpcykpO1xuICAgICAgYWRkTGlzdGVuZXIod2luZG93LCBFVkVOVF9SRVNJWkUsIHRoaXMub25SZXNpemUgPSB0aGlzLnJlc2l6ZS5iaW5kKHRoaXMpKTtcblxuICAgICAgaWYgKG9wdGlvbnMuem9vbWFibGUgJiYgb3B0aW9ucy56b29tT25XaGVlbCkge1xuICAgICAgICBhZGRMaXN0ZW5lcih2aWV3ZXIsIEVWRU5UX1dIRUVMLCB0aGlzLm9uV2hlZWwgPSB0aGlzLndoZWVsLmJpbmQodGhpcyksIHtcbiAgICAgICAgICBwYXNzaXZlOiBmYWxzZSxcbiAgICAgICAgICBjYXB0dXJlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAob3B0aW9ucy50b2dnbGVPbkRibGNsaWNrKSB7XG4gICAgICAgIGFkZExpc3RlbmVyKGNhbnZhcywgRVZFTlRfREJMQ0xJQ0ssIHRoaXMub25EYmxjbGljayA9IHRoaXMuZGJsY2xpY2suYmluZCh0aGlzKSk7XG4gICAgICB9XG4gICAgfSxcbiAgICB1bmJpbmQ6IGZ1bmN0aW9uIHVuYmluZCgpIHtcbiAgICAgIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zLFxuICAgICAgICAgIHZpZXdlciA9IHRoaXMudmlld2VyLFxuICAgICAgICAgIGNhbnZhcyA9IHRoaXMuY2FudmFzO1xuICAgICAgdmFyIGRvY3VtZW50ID0gdGhpcy5lbGVtZW50Lm93bmVyRG9jdW1lbnQ7XG4gICAgICByZW1vdmVMaXN0ZW5lcih2aWV3ZXIsIEVWRU5UX0NMSUNLLCB0aGlzLm9uQ2xpY2spO1xuICAgICAgcmVtb3ZlTGlzdGVuZXIodmlld2VyLCBFVkVOVF9EUkFHX1NUQVJULCB0aGlzLm9uRHJhZ1N0YXJ0KTtcbiAgICAgIHJlbW92ZUxpc3RlbmVyKGNhbnZhcywgRVZFTlRfUE9JTlRFUl9ET1dOLCB0aGlzLm9uUG9pbnRlckRvd24pO1xuICAgICAgcmVtb3ZlTGlzdGVuZXIoZG9jdW1lbnQsIEVWRU5UX1BPSU5URVJfTU9WRSwgdGhpcy5vblBvaW50ZXJNb3ZlKTtcbiAgICAgIHJlbW92ZUxpc3RlbmVyKGRvY3VtZW50LCBFVkVOVF9QT0lOVEVSX1VQLCB0aGlzLm9uUG9pbnRlclVwKTtcbiAgICAgIHJlbW92ZUxpc3RlbmVyKGRvY3VtZW50LCBFVkVOVF9LRVlfRE9XTiwgdGhpcy5vbktleURvd24pO1xuICAgICAgcmVtb3ZlTGlzdGVuZXIod2luZG93LCBFVkVOVF9SRVNJWkUsIHRoaXMub25SZXNpemUpO1xuXG4gICAgICBpZiAob3B0aW9ucy56b29tYWJsZSAmJiBvcHRpb25zLnpvb21PbldoZWVsKSB7XG4gICAgICAgIHJlbW92ZUxpc3RlbmVyKHZpZXdlciwgRVZFTlRfV0hFRUwsIHRoaXMub25XaGVlbCwge1xuICAgICAgICAgIHBhc3NpdmU6IGZhbHNlLFxuICAgICAgICAgIGNhcHR1cmU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRpb25zLnRvZ2dsZU9uRGJsY2xpY2spIHtcbiAgICAgICAgcmVtb3ZlTGlzdGVuZXIoY2FudmFzLCBFVkVOVF9EQkxDTElDSywgdGhpcy5vbkRibGNsaWNrKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdmFyIGhhbmRsZXJzID0ge1xuICAgIGNsaWNrOiBmdW5jdGlvbiBjbGljayhldmVudCkge1xuICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMsXG4gICAgICAgICAgaW1hZ2VEYXRhID0gdGhpcy5pbWFnZURhdGE7XG4gICAgICB2YXIgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xuICAgICAgdmFyIGFjdGlvbiA9IGdldERhdGEodGFyZ2V0LCBEQVRBX0FDVElPTik7XG5cbiAgICAgIGlmICghYWN0aW9uICYmIHRhcmdldC5sb2NhbE5hbWUgPT09ICdpbWcnICYmIHRhcmdldC5wYXJlbnRFbGVtZW50LmxvY2FsTmFtZSA9PT0gJ2xpJykge1xuICAgICAgICB0YXJnZXQgPSB0YXJnZXQucGFyZW50RWxlbWVudDtcbiAgICAgICAgYWN0aW9uID0gZ2V0RGF0YSh0YXJnZXQsIERBVEFfQUNUSU9OKTtcbiAgICAgIH0gLy8gQ2FuY2VsIHRoZSBlbXVsYXRlZCBjbGljayB3aGVuIHRoZSBuYXRpdmUgY2xpY2sgZXZlbnQgd2FzIHRyaWdnZXJlZC5cblxuXG4gICAgICBpZiAoSVNfVE9VQ0hfREVWSUNFICYmIGV2ZW50LmlzVHJ1c3RlZCAmJiB0YXJnZXQgPT09IHRoaXMuY2FudmFzKSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLmNsaWNrQ2FudmFzVGltZW91dCk7XG4gICAgICB9XG5cbiAgICAgIHN3aXRjaCAoYWN0aW9uKSB7XG4gICAgICAgIGNhc2UgJ21peCc6XG4gICAgICAgICAgaWYgKHRoaXMucGxheWVkKSB7XG4gICAgICAgICAgICB0aGlzLnN0b3AoKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKG9wdGlvbnMuaW5saW5lKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5mdWxsZWQpIHtcbiAgICAgICAgICAgICAgdGhpcy5leGl0KCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aGlzLmZ1bGwoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnaGlkZSc6XG4gICAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAndmlldyc6XG4gICAgICAgICAgdGhpcy52aWV3KGdldERhdGEodGFyZ2V0LCAnaW5kZXgnKSk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnem9vbS1pbic6XG4gICAgICAgICAgdGhpcy56b29tKDAuMSwgdHJ1ZSk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnem9vbS1vdXQnOlxuICAgICAgICAgIHRoaXMuem9vbSgtMC4xLCB0cnVlKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdvbmUtdG8tb25lJzpcbiAgICAgICAgICB0aGlzLnRvZ2dsZSgpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ3Jlc2V0JzpcbiAgICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAncHJldic6XG4gICAgICAgICAgdGhpcy5wcmV2KG9wdGlvbnMubG9vcCk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAncGxheSc6XG4gICAgICAgICAgdGhpcy5wbGF5KG9wdGlvbnMuZnVsbHNjcmVlbik7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnbmV4dCc6XG4gICAgICAgICAgdGhpcy5uZXh0KG9wdGlvbnMubG9vcCk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAncm90YXRlLWxlZnQnOlxuICAgICAgICAgIHRoaXMucm90YXRlKC05MCk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAncm90YXRlLXJpZ2h0JzpcbiAgICAgICAgICB0aGlzLnJvdGF0ZSg5MCk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnZmxpcC1ob3Jpem9udGFsJzpcbiAgICAgICAgICB0aGlzLnNjYWxlWCgtaW1hZ2VEYXRhLnNjYWxlWCB8fCAtMSk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnZmxpcC12ZXJ0aWNhbCc6XG4gICAgICAgICAgdGhpcy5zY2FsZVkoLWltYWdlRGF0YS5zY2FsZVkgfHwgLTEpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgaWYgKHRoaXMucGxheWVkKSB7XG4gICAgICAgICAgICB0aGlzLnN0b3AoKTtcbiAgICAgICAgICB9XG5cbiAgICAgIH1cbiAgICB9LFxuICAgIGRibGNsaWNrOiBmdW5jdGlvbiBkYmxjbGljayhldmVudCkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgaWYgKHRoaXMudmlld2VkICYmIGV2ZW50LnRhcmdldCA9PT0gdGhpcy5pbWFnZSkge1xuICAgICAgICAvLyBDYW5jZWwgdGhlIGVtdWxhdGVkIGRvdWJsZSBjbGljayB3aGVuIHRoZSBuYXRpdmUgZGJsY2xpY2sgZXZlbnQgd2FzIHRyaWdnZXJlZC5cbiAgICAgICAgaWYgKElTX1RPVUNIX0RFVklDRSAmJiBldmVudC5pc1RydXN0ZWQpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5kb3VibGVDbGlja0ltYWdlVGltZW91dCk7XG4gICAgICAgIH0gLy8gWFhYOiBObyBwYWdlWC9ZIHByb3BlcnRpZXMgaW4gY3VzdG9tIGV2ZW50LCBmYWxsYmFjayB0byB0aGUgb3JpZ2luYWwgZXZlbnQuXG5cblxuICAgICAgICB0aGlzLnRvZ2dsZShldmVudC5pc1RydXN0ZWQgPyBldmVudCA6IGV2ZW50LmRldGFpbCAmJiBldmVudC5kZXRhaWwub3JpZ2luYWxFdmVudCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBsb2FkOiBmdW5jdGlvbiBsb2FkKCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgaWYgKHRoaXMudGltZW91dCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0KTtcbiAgICAgICAgdGhpcy50aW1lb3V0ID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHZhciBlbGVtZW50ID0gdGhpcy5lbGVtZW50LFxuICAgICAgICAgIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMsXG4gICAgICAgICAgaW1hZ2UgPSB0aGlzLmltYWdlLFxuICAgICAgICAgIGluZGV4ID0gdGhpcy5pbmRleCxcbiAgICAgICAgICB2aWV3ZXJEYXRhID0gdGhpcy52aWV3ZXJEYXRhO1xuICAgICAgcmVtb3ZlQ2xhc3MoaW1hZ2UsIENMQVNTX0lOVklTSUJMRSk7XG5cbiAgICAgIGlmIChvcHRpb25zLmxvYWRpbmcpIHtcbiAgICAgICAgcmVtb3ZlQ2xhc3ModGhpcy5jYW52YXMsIENMQVNTX0xPQURJTkcpO1xuICAgICAgfVxuXG4gICAgICBpbWFnZS5zdHlsZS5jc3NUZXh0ID0gJ2hlaWdodDowOycgKyBcIm1hcmdpbi1sZWZ0OlwiLmNvbmNhdCh2aWV3ZXJEYXRhLndpZHRoIC8gMiwgXCJweDtcIikgKyBcIm1hcmdpbi10b3A6XCIuY29uY2F0KHZpZXdlckRhdGEuaGVpZ2h0IC8gMiwgXCJweDtcIikgKyAnbWF4LXdpZHRoOm5vbmUhaW1wb3J0YW50OycgKyAncG9zaXRpb246cmVsYXRpdmU7JyArICd3aWR0aDowOyc7XG4gICAgICB0aGlzLmluaXRJbWFnZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRvZ2dsZUNsYXNzKGltYWdlLCBDTEFTU19NT1ZFLCBvcHRpb25zLm1vdmFibGUpO1xuICAgICAgICB0b2dnbGVDbGFzcyhpbWFnZSwgQ0xBU1NfVFJBTlNJVElPTiwgb3B0aW9ucy50cmFuc2l0aW9uKTtcblxuICAgICAgICBfdGhpcy5yZW5kZXJJbWFnZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMudmlld2VkID0gdHJ1ZTtcbiAgICAgICAgICBfdGhpcy52aWV3aW5nID0gZmFsc2U7XG5cbiAgICAgICAgICBpZiAoaXNGdW5jdGlvbihvcHRpb25zLnZpZXdlZCkpIHtcbiAgICAgICAgICAgIGFkZExpc3RlbmVyKGVsZW1lbnQsIEVWRU5UX1ZJRVdFRCwgb3B0aW9ucy52aWV3ZWQsIHtcbiAgICAgICAgICAgICAgb25jZTogdHJ1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZGlzcGF0Y2hFdmVudChlbGVtZW50LCBFVkVOVF9WSUVXRUQsIHtcbiAgICAgICAgICAgIG9yaWdpbmFsSW1hZ2U6IF90aGlzLmltYWdlc1tpbmRleF0sXG4gICAgICAgICAgICBpbmRleDogaW5kZXgsXG4gICAgICAgICAgICBpbWFnZTogaW1hZ2VcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICBjYW5jZWxhYmxlOiBmYWxzZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgbG9hZEltYWdlOiBmdW5jdGlvbiBsb2FkSW1hZ2UoZXZlbnQpIHtcbiAgICAgIHZhciBpbWFnZSA9IGV2ZW50LnRhcmdldDtcbiAgICAgIHZhciBwYXJlbnQgPSBpbWFnZS5wYXJlbnROb2RlO1xuICAgICAgdmFyIHBhcmVudFdpZHRoID0gcGFyZW50Lm9mZnNldFdpZHRoIHx8IDMwO1xuICAgICAgdmFyIHBhcmVudEhlaWdodCA9IHBhcmVudC5vZmZzZXRIZWlnaHQgfHwgNTA7XG4gICAgICB2YXIgZmlsbGVkID0gISFnZXREYXRhKGltYWdlLCAnZmlsbGVkJyk7XG4gICAgICBnZXRJbWFnZU5hdHVyYWxTaXplcyhpbWFnZSwgdGhpcy5vcHRpb25zLCBmdW5jdGlvbiAobmF0dXJhbFdpZHRoLCBuYXR1cmFsSGVpZ2h0KSB7XG4gICAgICAgIHZhciBhc3BlY3RSYXRpbyA9IG5hdHVyYWxXaWR0aCAvIG5hdHVyYWxIZWlnaHQ7XG4gICAgICAgIHZhciB3aWR0aCA9IHBhcmVudFdpZHRoO1xuICAgICAgICB2YXIgaGVpZ2h0ID0gcGFyZW50SGVpZ2h0O1xuXG4gICAgICAgIGlmIChwYXJlbnRIZWlnaHQgKiBhc3BlY3RSYXRpbyA+IHBhcmVudFdpZHRoKSB7XG4gICAgICAgICAgaWYgKGZpbGxlZCkge1xuICAgICAgICAgICAgd2lkdGggPSBwYXJlbnRIZWlnaHQgKiBhc3BlY3RSYXRpbztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaGVpZ2h0ID0gcGFyZW50V2lkdGggLyBhc3BlY3RSYXRpbztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoZmlsbGVkKSB7XG4gICAgICAgICAgaGVpZ2h0ID0gcGFyZW50V2lkdGggLyBhc3BlY3RSYXRpbztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB3aWR0aCA9IHBhcmVudEhlaWdodCAqIGFzcGVjdFJhdGlvO1xuICAgICAgICB9XG5cbiAgICAgICAgc2V0U3R5bGUoaW1hZ2UsIGFzc2lnbih7XG4gICAgICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgICAgIGhlaWdodDogaGVpZ2h0XG4gICAgICAgIH0sIGdldFRyYW5zZm9ybXMoe1xuICAgICAgICAgIHRyYW5zbGF0ZVg6IChwYXJlbnRXaWR0aCAtIHdpZHRoKSAvIDIsXG4gICAgICAgICAgdHJhbnNsYXRlWTogKHBhcmVudEhlaWdodCAtIGhlaWdodCkgLyAyXG4gICAgICAgIH0pKSk7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGtleWRvd246IGZ1bmN0aW9uIGtleWRvd24oZXZlbnQpIHtcbiAgICAgIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuXG4gICAgICBpZiAoIW9wdGlvbnMua2V5Ym9hcmQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIga2V5Q29kZSA9IGV2ZW50LmtleUNvZGUgfHwgZXZlbnQud2hpY2ggfHwgZXZlbnQuY2hhckNvZGU7XG5cbiAgICAgIHN3aXRjaCAoa2V5Q29kZSkge1xuICAgICAgICAvLyBFbnRlclxuICAgICAgICBjYXNlIDEzOlxuICAgICAgICAgIGlmICh0aGlzLnZpZXdlci5jb250YWlucyhldmVudC50YXJnZXQpKSB7XG4gICAgICAgICAgICB0aGlzLmNsaWNrKGV2ZW50KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLmZ1bGxlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHN3aXRjaCAoa2V5Q29kZSkge1xuICAgICAgICAvLyBFc2NhcGVcbiAgICAgICAgY2FzZSAyNzpcbiAgICAgICAgICBpZiAodGhpcy5wbGF5ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuc3RvcCgpO1xuICAgICAgICAgIH0gZWxzZSBpZiAob3B0aW9ucy5pbmxpbmUpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmZ1bGxlZCkge1xuICAgICAgICAgICAgICB0aGlzLmV4aXQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIC8vIFNwYWNlXG5cbiAgICAgICAgY2FzZSAzMjpcbiAgICAgICAgICBpZiAodGhpcy5wbGF5ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuc3RvcCgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICAvLyBBcnJvd0xlZnRcblxuICAgICAgICBjYXNlIDM3OlxuICAgICAgICAgIHRoaXMucHJldihvcHRpb25zLmxvb3ApO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICAvLyBBcnJvd1VwXG5cbiAgICAgICAgY2FzZSAzODpcbiAgICAgICAgICAvLyBQcmV2ZW50IHNjcm9sbCBvbiBGaXJlZm94XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsgLy8gWm9vbSBpblxuXG4gICAgICAgICAgdGhpcy56b29tKG9wdGlvbnMuem9vbVJhdGlvLCB0cnVlKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgLy8gQXJyb3dSaWdodFxuXG4gICAgICAgIGNhc2UgMzk6XG4gICAgICAgICAgdGhpcy5uZXh0KG9wdGlvbnMubG9vcCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIC8vIEFycm93RG93blxuXG4gICAgICAgIGNhc2UgNDA6XG4gICAgICAgICAgLy8gUHJldmVudCBzY3JvbGwgb24gRmlyZWZveFxuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7IC8vIFpvb20gb3V0XG5cbiAgICAgICAgICB0aGlzLnpvb20oLW9wdGlvbnMuem9vbVJhdGlvLCB0cnVlKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgLy8gQ3RybCArIDBcblxuICAgICAgICBjYXNlIDQ4OiAvLyBGYWxsIHRocm91Z2hcbiAgICAgICAgLy8gQ3RybCArIDFcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWZhbGx0aHJvdWdoXG5cbiAgICAgICAgY2FzZSA0OTpcbiAgICAgICAgICBpZiAoZXZlbnQuY3RybEtleSkge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIHRoaXMudG9nZ2xlKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfSxcbiAgICBkcmFnc3RhcnQ6IGZ1bmN0aW9uIGRyYWdzdGFydChldmVudCkge1xuICAgICAgaWYgKGV2ZW50LnRhcmdldC5sb2NhbE5hbWUgPT09ICdpbWcnKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBwb2ludGVyZG93bjogZnVuY3Rpb24gcG9pbnRlcmRvd24oZXZlbnQpIHtcbiAgICAgIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zLFxuICAgICAgICAgIHBvaW50ZXJzID0gdGhpcy5wb2ludGVycztcbiAgICAgIHZhciBidXR0b25zID0gZXZlbnQuYnV0dG9ucyxcbiAgICAgICAgICBidXR0b24gPSBldmVudC5idXR0b247XG5cbiAgICAgIGlmICghdGhpcy52aWV3ZWQgfHwgdGhpcy5zaG93aW5nIHx8IHRoaXMudmlld2luZyB8fCB0aGlzLmhpZGluZyAvLyBIYW5kbGUgbW91c2UgZXZlbnQgYW5kIHBvaW50ZXIgZXZlbnQgYW5kIGlnbm9yZSB0b3VjaCBldmVudFxuICAgICAgfHwgKGV2ZW50LnR5cGUgPT09ICdtb3VzZWRvd24nIHx8IGV2ZW50LnR5cGUgPT09ICdwb2ludGVyZG93bicgJiYgZXZlbnQucG9pbnRlclR5cGUgPT09ICdtb3VzZScpICYmICggLy8gTm8gcHJpbWFyeSBidXR0b24gKFVzdWFsbHkgdGhlIGxlZnQgYnV0dG9uKVxuICAgICAgaXNOdW1iZXIoYnV0dG9ucykgJiYgYnV0dG9ucyAhPT0gMSB8fCBpc051bWJlcihidXR0b24pICYmIGJ1dHRvbiAhPT0gMCAvLyBPcGVuIGNvbnRleHQgbWVudVxuICAgICAgfHwgZXZlbnQuY3RybEtleSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSAvLyBQcmV2ZW50IGRlZmF1bHQgYmVoYXZpb3VycyBhcyBwYWdlIHpvb21pbmcgaW4gdG91Y2ggZGV2aWNlcy5cblxuXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICBpZiAoZXZlbnQuY2hhbmdlZFRvdWNoZXMpIHtcbiAgICAgICAgZm9yRWFjaChldmVudC5jaGFuZ2VkVG91Y2hlcywgZnVuY3Rpb24gKHRvdWNoKSB7XG4gICAgICAgICAgcG9pbnRlcnNbdG91Y2guaWRlbnRpZmllcl0gPSBnZXRQb2ludGVyKHRvdWNoKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwb2ludGVyc1tldmVudC5wb2ludGVySWQgfHwgMF0gPSBnZXRQb2ludGVyKGV2ZW50KTtcbiAgICAgIH1cblxuICAgICAgdmFyIGFjdGlvbiA9IG9wdGlvbnMubW92YWJsZSA/IEFDVElPTl9NT1ZFIDogZmFsc2U7XG5cbiAgICAgIGlmIChvcHRpb25zLnpvb21PblRvdWNoICYmIG9wdGlvbnMuem9vbWFibGUgJiYgT2JqZWN0LmtleXMocG9pbnRlcnMpLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgYWN0aW9uID0gQUNUSU9OX1pPT007XG4gICAgICB9IGVsc2UgaWYgKG9wdGlvbnMuc2xpZGVPblRvdWNoICYmIChldmVudC5wb2ludGVyVHlwZSA9PT0gJ3RvdWNoJyB8fCBldmVudC50eXBlID09PSAndG91Y2hzdGFydCcpICYmIHRoaXMuaXNTd2l0Y2hhYmxlKCkpIHtcbiAgICAgICAgYWN0aW9uID0gQUNUSU9OX1NXSVRDSDtcbiAgICAgIH1cblxuICAgICAgaWYgKG9wdGlvbnMudHJhbnNpdGlvbiAmJiAoYWN0aW9uID09PSBBQ1RJT05fTU9WRSB8fCBhY3Rpb24gPT09IEFDVElPTl9aT09NKSkge1xuICAgICAgICByZW1vdmVDbGFzcyh0aGlzLmltYWdlLCBDTEFTU19UUkFOU0lUSU9OKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5hY3Rpb24gPSBhY3Rpb247XG4gICAgfSxcbiAgICBwb2ludGVybW92ZTogZnVuY3Rpb24gcG9pbnRlcm1vdmUoZXZlbnQpIHtcbiAgICAgIHZhciBwb2ludGVycyA9IHRoaXMucG9pbnRlcnMsXG4gICAgICAgICAgYWN0aW9uID0gdGhpcy5hY3Rpb247XG5cbiAgICAgIGlmICghdGhpcy52aWV3ZWQgfHwgIWFjdGlvbikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgIGlmIChldmVudC5jaGFuZ2VkVG91Y2hlcykge1xuICAgICAgICBmb3JFYWNoKGV2ZW50LmNoYW5nZWRUb3VjaGVzLCBmdW5jdGlvbiAodG91Y2gpIHtcbiAgICAgICAgICBhc3NpZ24ocG9pbnRlcnNbdG91Y2guaWRlbnRpZmllcl0gfHwge30sIGdldFBvaW50ZXIodG91Y2gsIHRydWUpKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhc3NpZ24ocG9pbnRlcnNbZXZlbnQucG9pbnRlcklkIHx8IDBdIHx8IHt9LCBnZXRQb2ludGVyKGV2ZW50LCB0cnVlKSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuY2hhbmdlKGV2ZW50KTtcbiAgICB9LFxuICAgIHBvaW50ZXJ1cDogZnVuY3Rpb24gcG9pbnRlcnVwKGV2ZW50KSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMsXG4gICAgICAgICAgYWN0aW9uID0gdGhpcy5hY3Rpb24sXG4gICAgICAgICAgcG9pbnRlcnMgPSB0aGlzLnBvaW50ZXJzO1xuICAgICAgdmFyIHBvaW50ZXI7XG5cbiAgICAgIGlmIChldmVudC5jaGFuZ2VkVG91Y2hlcykge1xuICAgICAgICBmb3JFYWNoKGV2ZW50LmNoYW5nZWRUb3VjaGVzLCBmdW5jdGlvbiAodG91Y2gpIHtcbiAgICAgICAgICBwb2ludGVyID0gcG9pbnRlcnNbdG91Y2guaWRlbnRpZmllcl07XG4gICAgICAgICAgZGVsZXRlIHBvaW50ZXJzW3RvdWNoLmlkZW50aWZpZXJdO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBvaW50ZXIgPSBwb2ludGVyc1tldmVudC5wb2ludGVySWQgfHwgMF07XG4gICAgICAgIGRlbGV0ZSBwb2ludGVyc1tldmVudC5wb2ludGVySWQgfHwgMF07XG4gICAgICB9XG5cbiAgICAgIGlmICghYWN0aW9uKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgaWYgKG9wdGlvbnMudHJhbnNpdGlvbiAmJiAoYWN0aW9uID09PSBBQ1RJT05fTU9WRSB8fCBhY3Rpb24gPT09IEFDVElPTl9aT09NKSkge1xuICAgICAgICBhZGRDbGFzcyh0aGlzLmltYWdlLCBDTEFTU19UUkFOU0lUSU9OKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5hY3Rpb24gPSBmYWxzZTsgLy8gRW11bGF0ZSBjbGljayBhbmQgZG91YmxlIGNsaWNrIGluIHRvdWNoIGRldmljZXMgdG8gc3VwcG9ydCBiYWNrZHJvcCBhbmQgaW1hZ2Ugem9vbWluZyAoIzIxMCkuXG5cbiAgICAgIGlmIChJU19UT1VDSF9ERVZJQ0UgJiYgYWN0aW9uICE9PSBBQ1RJT05fWk9PTSAmJiBwb2ludGVyICYmIERhdGUubm93KCkgLSBwb2ludGVyLnRpbWVTdGFtcCA8IDUwMCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5jbGlja0NhbnZhc1RpbWVvdXQpO1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5kb3VibGVDbGlja0ltYWdlVGltZW91dCk7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMudG9nZ2xlT25EYmxjbGljayAmJiB0aGlzLnZpZXdlZCAmJiBldmVudC50YXJnZXQgPT09IHRoaXMuaW1hZ2UpIHtcbiAgICAgICAgICBpZiAodGhpcy5pbWFnZUNsaWNrZWQpIHtcbiAgICAgICAgICAgIHRoaXMuaW1hZ2VDbGlja2VkID0gZmFsc2U7IC8vIFRoaXMgdGltZW91dCB3aWxsIGJlIGNsZWFyZWQgbGF0ZXIgd2hlbiBhIG5hdGl2ZSBkYmxjbGljayBldmVudCBpcyB0cmlnZ2VyaW5nXG5cbiAgICAgICAgICAgIHRoaXMuZG91YmxlQ2xpY2tJbWFnZVRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgZGlzcGF0Y2hFdmVudChfdGhpczIuaW1hZ2UsIEVWRU5UX0RCTENMSUNLLCB7XG4gICAgICAgICAgICAgICAgb3JpZ2luYWxFdmVudDogZXZlbnRcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LCA1MCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaW1hZ2VDbGlja2VkID0gdHJ1ZTsgLy8gVGhlIGRlZmF1bHQgdGltaW5nIG9mIGEgZG91YmxlIGNsaWNrIGluIFdpbmRvd3MgaXMgNTAwIG1zXG5cbiAgICAgICAgICAgIHRoaXMuZG91YmxlQ2xpY2tJbWFnZVRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgX3RoaXMyLmltYWdlQ2xpY2tlZCA9IGZhbHNlO1xuICAgICAgICAgICAgfSwgNTAwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5pbWFnZUNsaWNrZWQgPSBmYWxzZTtcblxuICAgICAgICAgIGlmIChvcHRpb25zLmJhY2tkcm9wICYmIG9wdGlvbnMuYmFja2Ryb3AgIT09ICdzdGF0aWMnICYmIGV2ZW50LnRhcmdldCA9PT0gdGhpcy5jYW52YXMpIHtcbiAgICAgICAgICAgIC8vIFRoaXMgdGltZW91dCB3aWxsIGJlIGNsZWFyZWQgbGF0ZXIgd2hlbiBhIG5hdGl2ZSBjbGljayBldmVudCBpcyB0cmlnZ2VyaW5nXG4gICAgICAgICAgICB0aGlzLmNsaWNrQ2FudmFzVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBkaXNwYXRjaEV2ZW50KF90aGlzMi5jYW52YXMsIEVWRU5UX0NMSUNLLCB7XG4gICAgICAgICAgICAgICAgb3JpZ2luYWxFdmVudDogZXZlbnRcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LCA1MCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICByZXNpemU6IGZ1bmN0aW9uIHJlc2l6ZSgpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICBpZiAoIXRoaXMuaXNTaG93biB8fCB0aGlzLmhpZGluZykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmZ1bGxlZCkge1xuICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgIHRoaXMuaW5pdEJvZHkoKTtcbiAgICAgICAgdGhpcy5vcGVuKCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuaW5pdENvbnRhaW5lcigpO1xuICAgICAgdGhpcy5pbml0Vmlld2VyKCk7XG4gICAgICB0aGlzLnJlbmRlclZpZXdlcigpO1xuICAgICAgdGhpcy5yZW5kZXJMaXN0KCk7XG5cbiAgICAgIGlmICh0aGlzLnZpZXdlZCkge1xuICAgICAgICB0aGlzLmluaXRJbWFnZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMzLnJlbmRlckltYWdlKCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5wbGF5ZWQpIHtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5mdWxsc2NyZWVuICYmIHRoaXMuZnVsbGVkICYmICEoZG9jdW1lbnQuZnVsbHNjcmVlbkVsZW1lbnQgfHwgZG9jdW1lbnQud2Via2l0RnVsbHNjcmVlbkVsZW1lbnQgfHwgZG9jdW1lbnQubW96RnVsbFNjcmVlbkVsZW1lbnQgfHwgZG9jdW1lbnQubXNGdWxsc2NyZWVuRWxlbWVudCkpIHtcbiAgICAgICAgICB0aGlzLnN0b3AoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBmb3JFYWNoKHRoaXMucGxheWVyLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdpbWcnKSwgZnVuY3Rpb24gKGltYWdlKSB7XG4gICAgICAgICAgYWRkTGlzdGVuZXIoaW1hZ2UsIEVWRU5UX0xPQUQsIF90aGlzMy5sb2FkSW1hZ2UuYmluZChfdGhpczMpLCB7XG4gICAgICAgICAgICBvbmNlOiB0cnVlXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZGlzcGF0Y2hFdmVudChpbWFnZSwgRVZFTlRfTE9BRCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG4gICAgd2hlZWw6IGZ1bmN0aW9uIHdoZWVsKGV2ZW50KSB7XG4gICAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgICAgaWYgKCF0aGlzLnZpZXdlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7IC8vIExpbWl0IHdoZWVsIHNwZWVkIHRvIHByZXZlbnQgem9vbSB0b28gZmFzdFxuXG4gICAgICBpZiAodGhpcy53aGVlbGluZykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMud2hlZWxpbmcgPSB0cnVlO1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzNC53aGVlbGluZyA9IGZhbHNlO1xuICAgICAgfSwgNTApO1xuICAgICAgdmFyIHJhdGlvID0gTnVtYmVyKHRoaXMub3B0aW9ucy56b29tUmF0aW8pIHx8IDAuMTtcbiAgICAgIHZhciBkZWx0YSA9IDE7XG5cbiAgICAgIGlmIChldmVudC5kZWx0YVkpIHtcbiAgICAgICAgZGVsdGEgPSBldmVudC5kZWx0YVkgPiAwID8gMSA6IC0xO1xuICAgICAgfSBlbHNlIGlmIChldmVudC53aGVlbERlbHRhKSB7XG4gICAgICAgIGRlbHRhID0gLWV2ZW50LndoZWVsRGVsdGEgLyAxMjA7XG4gICAgICB9IGVsc2UgaWYgKGV2ZW50LmRldGFpbCkge1xuICAgICAgICBkZWx0YSA9IGV2ZW50LmRldGFpbCA+IDAgPyAxIDogLTE7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuem9vbSgtZGVsdGEgKiByYXRpbywgdHJ1ZSwgZXZlbnQpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgbWV0aG9kcyA9IHtcbiAgICAvKiogU2hvdyB0aGUgdmlld2VyIChvbmx5IGF2YWlsYWJsZSBpbiBtb2RhbCBtb2RlKVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2ltbWVkaWF0ZT1mYWxzZV0gLSBJbmRpY2F0ZXMgaWYgc2hvdyB0aGUgdmlld2VyIGltbWVkaWF0ZWx5IG9yIG5vdC5cbiAgICAgKiBAcmV0dXJucyB7Vmlld2VyfSB0aGlzXG4gICAgICovXG4gICAgc2hvdzogZnVuY3Rpb24gc2hvdygpIHtcbiAgICAgIHZhciBpbW1lZGlhdGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuICAgICAgdmFyIGVsZW1lbnQgPSB0aGlzLmVsZW1lbnQsXG4gICAgICAgICAgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcblxuICAgICAgaWYgKG9wdGlvbnMuaW5saW5lIHx8IHRoaXMuc2hvd2luZyB8fCB0aGlzLmlzU2hvd24gfHwgdGhpcy5zaG93aW5nKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMucmVhZHkpIHtcbiAgICAgICAgdGhpcy5idWlsZCgpO1xuXG4gICAgICAgIGlmICh0aGlzLnJlYWR5KSB7XG4gICAgICAgICAgdGhpcy5zaG93KGltbWVkaWF0ZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgaWYgKGlzRnVuY3Rpb24ob3B0aW9ucy5zaG93KSkge1xuICAgICAgICBhZGRMaXN0ZW5lcihlbGVtZW50LCBFVkVOVF9TSE9XLCBvcHRpb25zLnNob3csIHtcbiAgICAgICAgICBvbmNlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoZGlzcGF0Y2hFdmVudChlbGVtZW50LCBFVkVOVF9TSE9XKSA9PT0gZmFsc2UgfHwgIXRoaXMucmVhZHkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmhpZGluZykge1xuICAgICAgICB0aGlzLnRyYW5zaXRpb25pbmcuYWJvcnQoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zaG93aW5nID0gdHJ1ZTtcbiAgICAgIHRoaXMub3BlbigpO1xuICAgICAgdmFyIHZpZXdlciA9IHRoaXMudmlld2VyO1xuICAgICAgcmVtb3ZlQ2xhc3Modmlld2VyLCBDTEFTU19ISURFKTtcbiAgICAgIHZpZXdlci5zZXRBdHRyaWJ1dGUoJ3JvbGUnLCAnZGlhbG9nJyk7XG4gICAgICB2aWV3ZXIuc2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsbGVkYnknLCB0aGlzLnRpdGxlLmlkKTtcbiAgICAgIHZpZXdlci5zZXRBdHRyaWJ1dGUoJ2FyaWEtbW9kYWwnLCB0cnVlKTtcbiAgICAgIHZpZXdlci5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJyk7XG5cbiAgICAgIGlmIChvcHRpb25zLnRyYW5zaXRpb24gJiYgIWltbWVkaWF0ZSkge1xuICAgICAgICB2YXIgc2hvd24gPSB0aGlzLnNob3duLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMudHJhbnNpdGlvbmluZyA9IHtcbiAgICAgICAgICBhYm9ydDogZnVuY3Rpb24gYWJvcnQoKSB7XG4gICAgICAgICAgICByZW1vdmVMaXN0ZW5lcih2aWV3ZXIsIEVWRU5UX1RSQU5TSVRJT05fRU5ELCBzaG93bik7XG4gICAgICAgICAgICByZW1vdmVDbGFzcyh2aWV3ZXIsIENMQVNTX0lOKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGFkZENsYXNzKHZpZXdlciwgQ0xBU1NfVFJBTlNJVElPTik7IC8vIEZvcmNlIHJlZmxvdyB0byBlbmFibGUgQ1NTMyB0cmFuc2l0aW9uXG5cbiAgICAgICAgdmlld2VyLmluaXRpYWxPZmZzZXRXaWR0aCA9IHZpZXdlci5vZmZzZXRXaWR0aDtcbiAgICAgICAgYWRkTGlzdGVuZXIodmlld2VyLCBFVkVOVF9UUkFOU0lUSU9OX0VORCwgc2hvd24sIHtcbiAgICAgICAgICBvbmNlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBhZGRDbGFzcyh2aWV3ZXIsIENMQVNTX0lOKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFkZENsYXNzKHZpZXdlciwgQ0xBU1NfSU4pO1xuICAgICAgICB0aGlzLnNob3duKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBIaWRlIHRoZSB2aWV3ZXIgKG9ubHkgYXZhaWxhYmxlIGluIG1vZGFsIG1vZGUpXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaW1tZWRpYXRlPWZhbHNlXSAtIEluZGljYXRlcyBpZiBoaWRlIHRoZSB2aWV3ZXIgaW1tZWRpYXRlbHkgb3Igbm90LlxuICAgICAqIEByZXR1cm5zIHtWaWV3ZXJ9IHRoaXNcbiAgICAgKi9cbiAgICBoaWRlOiBmdW5jdGlvbiBoaWRlKCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgdmFyIGltbWVkaWF0ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZmFsc2U7XG4gICAgICB2YXIgZWxlbWVudCA9IHRoaXMuZWxlbWVudCxcbiAgICAgICAgICBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuXG4gICAgICBpZiAob3B0aW9ucy5pbmxpbmUgfHwgdGhpcy5oaWRpbmcgfHwgISh0aGlzLmlzU2hvd24gfHwgdGhpcy5zaG93aW5nKSkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgaWYgKGlzRnVuY3Rpb24ob3B0aW9ucy5oaWRlKSkge1xuICAgICAgICBhZGRMaXN0ZW5lcihlbGVtZW50LCBFVkVOVF9ISURFLCBvcHRpb25zLmhpZGUsIHtcbiAgICAgICAgICBvbmNlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoZGlzcGF0Y2hFdmVudChlbGVtZW50LCBFVkVOVF9ISURFKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnNob3dpbmcpIHtcbiAgICAgICAgdGhpcy50cmFuc2l0aW9uaW5nLmFib3J0KCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuaGlkaW5nID0gdHJ1ZTtcblxuICAgICAgaWYgKHRoaXMucGxheWVkKSB7XG4gICAgICAgIHRoaXMuc3RvcCgpO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLnZpZXdpbmcpIHtcbiAgICAgICAgdGhpcy52aWV3aW5nLmFib3J0KCk7XG4gICAgICB9XG5cbiAgICAgIHZhciB2aWV3ZXIgPSB0aGlzLnZpZXdlcixcbiAgICAgICAgICBpbWFnZSA9IHRoaXMuaW1hZ2U7XG5cbiAgICAgIHZhciBoaWRlSW1tZWRpYXRlbHkgPSBmdW5jdGlvbiBoaWRlSW1tZWRpYXRlbHkoKSB7XG4gICAgICAgIHJlbW92ZUNsYXNzKHZpZXdlciwgQ0xBU1NfSU4pO1xuXG4gICAgICAgIF90aGlzLmhpZGRlbigpO1xuICAgICAgfTtcblxuICAgICAgaWYgKG9wdGlvbnMudHJhbnNpdGlvbiAmJiAhaW1tZWRpYXRlKSB7XG4gICAgICAgIHZhciBvblZpZXdlclRyYW5zaXRpb25FbmQgPSBmdW5jdGlvbiBvblZpZXdlclRyYW5zaXRpb25FbmQoZXZlbnQpIHtcbiAgICAgICAgICAvLyBJZ25vcmUgYWxsIHByb3BhZ2F0aW5nIGB0cmFuc2l0aW9uZW5kYCBldmVudHMgKCMyNzUpLlxuICAgICAgICAgIGlmIChldmVudCAmJiBldmVudC50YXJnZXQgPT09IHZpZXdlcikge1xuICAgICAgICAgICAgcmVtb3ZlTGlzdGVuZXIodmlld2VyLCBFVkVOVF9UUkFOU0lUSU9OX0VORCwgb25WaWV3ZXJUcmFuc2l0aW9uRW5kKTtcblxuICAgICAgICAgICAgX3RoaXMuaGlkZGVuKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBvbkltYWdlVHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uIG9uSW1hZ2VUcmFuc2l0aW9uRW5kKCkge1xuICAgICAgICAgIC8vIEluIGNhc2Ugb2Ygc2hvdyB0aGUgdmlld2VyIGJ5IGB2aWV3ZXIuc2hvdyh0cnVlKWAgcHJldmlvdXNseSAoIzQwNykuXG4gICAgICAgICAgaWYgKGhhc0NsYXNzKHZpZXdlciwgQ0xBU1NfVFJBTlNJVElPTikpIHtcbiAgICAgICAgICAgIGFkZExpc3RlbmVyKHZpZXdlciwgRVZFTlRfVFJBTlNJVElPTl9FTkQsIG9uVmlld2VyVHJhbnNpdGlvbkVuZCk7XG4gICAgICAgICAgICByZW1vdmVDbGFzcyh2aWV3ZXIsIENMQVNTX0lOKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaGlkZUltbWVkaWF0ZWx5KCk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMudHJhbnNpdGlvbmluZyA9IHtcbiAgICAgICAgICBhYm9ydDogZnVuY3Rpb24gYWJvcnQoKSB7XG4gICAgICAgICAgICBpZiAoX3RoaXMudmlld2VkICYmIGhhc0NsYXNzKGltYWdlLCBDTEFTU19UUkFOU0lUSU9OKSkge1xuICAgICAgICAgICAgICByZW1vdmVMaXN0ZW5lcihpbWFnZSwgRVZFTlRfVFJBTlNJVElPTl9FTkQsIG9uSW1hZ2VUcmFuc2l0aW9uRW5kKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaGFzQ2xhc3Modmlld2VyLCBDTEFTU19UUkFOU0lUSU9OKSkge1xuICAgICAgICAgICAgICByZW1vdmVMaXN0ZW5lcih2aWV3ZXIsIEVWRU5UX1RSQU5TSVRJT05fRU5ELCBvblZpZXdlclRyYW5zaXRpb25FbmQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfTsgLy8gSW4gY2FzZSBvZiBoaWRpbmcgdGhlIHZpZXdlciB3aGVuIGhvbGRpbmcgb24gdGhlIGltYWdlICgjMjU1KSxcbiAgICAgICAgLy8gbm90ZSB0aGF0IHRoZSBgQ0xBU1NfVFJBTlNJVElPTmAgY2xhc3Mgd2lsbCBiZSByZW1vdmVkIG9uIHBvaW50ZXIgZG93bi5cblxuICAgICAgICBpZiAodGhpcy52aWV3ZWQgJiYgaGFzQ2xhc3MoaW1hZ2UsIENMQVNTX1RSQU5TSVRJT04pKSB7XG4gICAgICAgICAgYWRkTGlzdGVuZXIoaW1hZ2UsIEVWRU5UX1RSQU5TSVRJT05fRU5ELCBvbkltYWdlVHJhbnNpdGlvbkVuZCwge1xuICAgICAgICAgICAgb25jZTogdHJ1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHRoaXMuem9vbVRvKDAsIGZhbHNlLCBudWxsLCB0cnVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvbkltYWdlVHJhbnNpdGlvbkVuZCgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBoaWRlSW1tZWRpYXRlbHkoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFZpZXcgb25lIG9mIHRoZSBpbWFnZXMgd2l0aCBpbWFnZSdzIGluZGV4XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IC0gVGhlIGluZGV4IG9mIHRoZSBpbWFnZSB0byB2aWV3LlxuICAgICAqIEByZXR1cm5zIHtWaWV3ZXJ9IHRoaXNcbiAgICAgKi9cbiAgICB2aWV3OiBmdW5jdGlvbiB2aWV3KCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBpbmRleCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogdGhpcy5vcHRpb25zLmluaXRpYWxWaWV3SW5kZXg7XG4gICAgICBpbmRleCA9IE51bWJlcihpbmRleCkgfHwgMDtcblxuICAgICAgaWYgKHRoaXMuaGlkaW5nIHx8IHRoaXMucGxheWVkIHx8IGluZGV4IDwgMCB8fCBpbmRleCA+PSB0aGlzLmxlbmd0aCB8fCB0aGlzLnZpZXdlZCAmJiBpbmRleCA9PT0gdGhpcy5pbmRleCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLmlzU2hvd24pIHtcbiAgICAgICAgdGhpcy5pbmRleCA9IGluZGV4O1xuICAgICAgICByZXR1cm4gdGhpcy5zaG93KCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnZpZXdpbmcpIHtcbiAgICAgICAgdGhpcy52aWV3aW5nLmFib3J0KCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBlbGVtZW50ID0gdGhpcy5lbGVtZW50LFxuICAgICAgICAgIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMsXG4gICAgICAgICAgdGl0bGUgPSB0aGlzLnRpdGxlLFxuICAgICAgICAgIGNhbnZhcyA9IHRoaXMuY2FudmFzO1xuICAgICAgdmFyIGl0ZW0gPSB0aGlzLml0ZW1zW2luZGV4XTtcbiAgICAgIHZhciBpbWcgPSBpdGVtLnF1ZXJ5U2VsZWN0b3IoJ2ltZycpO1xuICAgICAgdmFyIHVybCA9IGdldERhdGEoaW1nLCAnb3JpZ2luYWxVcmwnKTtcbiAgICAgIHZhciBhbHQgPSBpbWcuZ2V0QXR0cmlidXRlKCdhbHQnKTtcbiAgICAgIHZhciBpbWFnZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuICAgICAgZm9yRWFjaChvcHRpb25zLmluaGVyaXRlZEF0dHJpYnV0ZXMsIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGltZy5nZXRBdHRyaWJ1dGUobmFtZSk7XG5cbiAgICAgICAgaWYgKHZhbHVlICE9PSBudWxsKSB7XG4gICAgICAgICAgaW1hZ2Uuc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpbWFnZS5zcmMgPSB1cmw7XG4gICAgICBpbWFnZS5hbHQgPSBhbHQ7XG5cbiAgICAgIGlmIChpc0Z1bmN0aW9uKG9wdGlvbnMudmlldykpIHtcbiAgICAgICAgYWRkTGlzdGVuZXIoZWxlbWVudCwgRVZFTlRfVklFVywgb3B0aW9ucy52aWV3LCB7XG4gICAgICAgICAgb25jZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKGRpc3BhdGNoRXZlbnQoZWxlbWVudCwgRVZFTlRfVklFVywge1xuICAgICAgICBvcmlnaW5hbEltYWdlOiB0aGlzLmltYWdlc1tpbmRleF0sXG4gICAgICAgIGluZGV4OiBpbmRleCxcbiAgICAgICAgaW1hZ2U6IGltYWdlXG4gICAgICB9KSA9PT0gZmFsc2UgfHwgIXRoaXMuaXNTaG93biB8fCB0aGlzLmhpZGluZyB8fCB0aGlzLnBsYXllZCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgdmFyIGFjdGl2ZUl0ZW0gPSB0aGlzLml0ZW1zW3RoaXMuaW5kZXhdO1xuXG4gICAgICBpZiAoYWN0aXZlSXRlbSkge1xuICAgICAgICByZW1vdmVDbGFzcyhhY3RpdmVJdGVtLCBDTEFTU19BQ1RJVkUpO1xuICAgICAgICBhY3RpdmVJdGVtLnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1zZWxlY3RlZCcpO1xuICAgICAgfVxuXG4gICAgICBhZGRDbGFzcyhpdGVtLCBDTEFTU19BQ1RJVkUpO1xuICAgICAgaXRlbS5zZXRBdHRyaWJ1dGUoJ2FyaWEtc2VsZWN0ZWQnLCB0cnVlKTtcblxuICAgICAgaWYgKG9wdGlvbnMuZm9jdXMpIHtcbiAgICAgICAgaXRlbS5mb2N1cygpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmltYWdlID0gaW1hZ2U7XG4gICAgICB0aGlzLnZpZXdlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5pbmRleCA9IGluZGV4O1xuICAgICAgdGhpcy5pbWFnZURhdGEgPSB7fTtcbiAgICAgIGFkZENsYXNzKGltYWdlLCBDTEFTU19JTlZJU0lCTEUpO1xuXG4gICAgICBpZiAob3B0aW9ucy5sb2FkaW5nKSB7XG4gICAgICAgIGFkZENsYXNzKGNhbnZhcywgQ0xBU1NfTE9BRElORyk7XG4gICAgICB9XG5cbiAgICAgIGNhbnZhcy5pbm5lckhUTUwgPSAnJztcbiAgICAgIGNhbnZhcy5hcHBlbmRDaGlsZChpbWFnZSk7IC8vIENlbnRlciBjdXJyZW50IGl0ZW1cblxuICAgICAgdGhpcy5yZW5kZXJMaXN0KCk7IC8vIENsZWFyIHRpdGxlXG5cbiAgICAgIHRpdGxlLmlubmVySFRNTCA9ICcnOyAvLyBHZW5lcmF0ZSB0aXRsZSBhZnRlciB2aWV3ZWRcblxuICAgICAgdmFyIG9uVmlld2VkID0gZnVuY3Rpb24gb25WaWV3ZWQoKSB7XG4gICAgICAgIHZhciBpbWFnZURhdGEgPSBfdGhpczIuaW1hZ2VEYXRhO1xuICAgICAgICB2YXIgcmVuZGVyID0gQXJyYXkuaXNBcnJheShvcHRpb25zLnRpdGxlKSA/IG9wdGlvbnMudGl0bGVbMV0gOiBvcHRpb25zLnRpdGxlO1xuICAgICAgICB0aXRsZS5pbm5lckhUTUwgPSBlc2NhcGVIVE1MRW50aXRpZXMoaXNGdW5jdGlvbihyZW5kZXIpID8gcmVuZGVyLmNhbGwoX3RoaXMyLCBpbWFnZSwgaW1hZ2VEYXRhKSA6IFwiXCIuY29uY2F0KGFsdCwgXCIgKFwiKS5jb25jYXQoaW1hZ2VEYXRhLm5hdHVyYWxXaWR0aCwgXCIgXFx4RDcgXCIpLmNvbmNhdChpbWFnZURhdGEubmF0dXJhbEhlaWdodCwgXCIpXCIpKTtcbiAgICAgIH07XG5cbiAgICAgIHZhciBvbkxvYWQ7XG4gICAgICB2YXIgb25FcnJvcjtcbiAgICAgIGFkZExpc3RlbmVyKGVsZW1lbnQsIEVWRU5UX1ZJRVdFRCwgb25WaWV3ZWQsIHtcbiAgICAgICAgb25jZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgICB0aGlzLnZpZXdpbmcgPSB7XG4gICAgICAgIGFib3J0OiBmdW5jdGlvbiBhYm9ydCgpIHtcbiAgICAgICAgICByZW1vdmVMaXN0ZW5lcihlbGVtZW50LCBFVkVOVF9WSUVXRUQsIG9uVmlld2VkKTtcblxuICAgICAgICAgIGlmIChpbWFnZS5jb21wbGV0ZSkge1xuICAgICAgICAgICAgaWYgKF90aGlzMi5pbWFnZVJlbmRlcmluZykge1xuICAgICAgICAgICAgICBfdGhpczIuaW1hZ2VSZW5kZXJpbmcuYWJvcnQoKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoX3RoaXMyLmltYWdlSW5pdGlhbGl6aW5nKSB7XG4gICAgICAgICAgICAgIF90aGlzMi5pbWFnZUluaXRpYWxpemluZy5hYm9ydCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBDYW5jZWwgZG93bmxvYWQgdG8gc2F2ZSBiYW5kd2lkdGguXG4gICAgICAgICAgICBpbWFnZS5zcmMgPSAnJztcbiAgICAgICAgICAgIHJlbW92ZUxpc3RlbmVyKGltYWdlLCBFVkVOVF9MT0FELCBvbkxvYWQpO1xuXG4gICAgICAgICAgICBpZiAoX3RoaXMyLnRpbWVvdXQpIHtcbiAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KF90aGlzMi50aW1lb3V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGlmIChpbWFnZS5jb21wbGV0ZSkge1xuICAgICAgICB0aGlzLmxvYWQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFkZExpc3RlbmVyKGltYWdlLCBFVkVOVF9MT0FELCBvbkxvYWQgPSBmdW5jdGlvbiBvbkxvYWQoKSB7XG4gICAgICAgICAgcmVtb3ZlTGlzdGVuZXIoaW1hZ2UsIEVWRU5UX0VSUk9SLCBvbkVycm9yKTtcblxuICAgICAgICAgIF90aGlzMi5sb2FkKCk7XG4gICAgICAgIH0sIHtcbiAgICAgICAgICBvbmNlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBhZGRMaXN0ZW5lcihpbWFnZSwgRVZFTlRfRVJST1IsIG9uRXJyb3IgPSBmdW5jdGlvbiBvbkVycm9yKCkge1xuICAgICAgICAgIHJlbW92ZUxpc3RlbmVyKGltYWdlLCBFVkVOVF9MT0FELCBvbkxvYWQpO1xuXG4gICAgICAgICAgaWYgKF90aGlzMi50aW1lb3V0KSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQoX3RoaXMyLnRpbWVvdXQpO1xuICAgICAgICAgICAgX3RoaXMyLnRpbWVvdXQgPSBmYWxzZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZW1vdmVDbGFzcyhpbWFnZSwgQ0xBU1NfSU5WSVNJQkxFKTtcblxuICAgICAgICAgIGlmIChvcHRpb25zLmxvYWRpbmcpIHtcbiAgICAgICAgICAgIHJlbW92ZUNsYXNzKF90aGlzMi5jYW52YXMsIENMQVNTX0xPQURJTkcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwge1xuICAgICAgICAgIG9uY2U6IHRydWVcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHRoaXMudGltZW91dCkge1xuICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXQpO1xuICAgICAgICB9IC8vIE1ha2UgdGhlIGltYWdlIHZpc2libGUgaWYgaXQgZmFpbHMgdG8gbG9hZCB3aXRoaW4gMXNcblxuXG4gICAgICAgIHRoaXMudGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJlbW92ZUNsYXNzKGltYWdlLCBDTEFTU19JTlZJU0lCTEUpO1xuICAgICAgICAgIF90aGlzMi50aW1lb3V0ID0gZmFsc2U7XG4gICAgICAgIH0sIDEwMDApO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVmlldyB0aGUgcHJldmlvdXMgaW1hZ2VcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtsb29wPWZhbHNlXSAtIEluZGljYXRlIGlmIHZpZXcgdGhlIGxhc3Qgb25lXG4gICAgICogd2hlbiBpdCBpcyB0aGUgZmlyc3Qgb25lIGF0IHByZXNlbnQuXG4gICAgICogQHJldHVybnMge1ZpZXdlcn0gdGhpc1xuICAgICAqL1xuICAgIHByZXY6IGZ1bmN0aW9uIHByZXYoKSB7XG4gICAgICB2YXIgbG9vcCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZmFsc2U7XG4gICAgICB2YXIgaW5kZXggPSB0aGlzLmluZGV4IC0gMTtcblxuICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICBpbmRleCA9IGxvb3AgPyB0aGlzLmxlbmd0aCAtIDEgOiAwO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnZpZXcoaW5kZXgpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFZpZXcgdGhlIG5leHQgaW1hZ2VcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtsb29wPWZhbHNlXSAtIEluZGljYXRlIGlmIHZpZXcgdGhlIGZpcnN0IG9uZVxuICAgICAqIHdoZW4gaXQgaXMgdGhlIGxhc3Qgb25lIGF0IHByZXNlbnQuXG4gICAgICogQHJldHVybnMge1ZpZXdlcn0gdGhpc1xuICAgICAqL1xuICAgIG5leHQ6IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICB2YXIgbG9vcCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZmFsc2U7XG4gICAgICB2YXIgbWF4SW5kZXggPSB0aGlzLmxlbmd0aCAtIDE7XG4gICAgICB2YXIgaW5kZXggPSB0aGlzLmluZGV4ICsgMTtcblxuICAgICAgaWYgKGluZGV4ID4gbWF4SW5kZXgpIHtcbiAgICAgICAgaW5kZXggPSBsb29wID8gMCA6IG1heEluZGV4O1xuICAgICAgfVxuXG4gICAgICB0aGlzLnZpZXcoaW5kZXgpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIE1vdmUgdGhlIGltYWdlIHdpdGggcmVsYXRpdmUgb2Zmc2V0cy5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0geCAtIFRoZSBtb3ZpbmcgZGlzdGFuY2UgaW4gdGhlIGhvcml6b250YWwgZGlyZWN0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbeT14XSBUaGUgbW92aW5nIGRpc3RhbmNlIGluIHRoZSB2ZXJ0aWNhbCBkaXJlY3Rpb24uXG4gICAgICogQHJldHVybnMge1ZpZXdlcn0gdGhpc1xuICAgICAqL1xuICAgIG1vdmU6IGZ1bmN0aW9uIG1vdmUoeCkge1xuICAgICAgdmFyIHkgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHg7XG4gICAgICB2YXIgaW1hZ2VEYXRhID0gdGhpcy5pbWFnZURhdGE7XG4gICAgICB0aGlzLm1vdmVUbyhpc1VuZGVmaW5lZCh4KSA/IHggOiBpbWFnZURhdGEueCArIE51bWJlcih4KSwgaXNVbmRlZmluZWQoeSkgPyB5IDogaW1hZ2VEYXRhLnkgKyBOdW1iZXIoeSkpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIE1vdmUgdGhlIGltYWdlIHRvIGFuIGFic29sdXRlIHBvaW50LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB4IC0gVGhlIG5ldyBwb3NpdGlvbiBpbiB0aGUgaG9yaXpvbnRhbCBkaXJlY3Rpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFt5PXhdIC0gVGhlIG5ldyBwb3NpdGlvbiBpbiB0aGUgdmVydGljYWwgZGlyZWN0aW9uLlxuICAgICAqIEBwYXJhbSB7RXZlbnR9IFtfb3JpZ2luYWxFdmVudD1udWxsXSAtIFRoZSBvcmlnaW5hbCBldmVudCBpZiBhbnkuXG4gICAgICogQHJldHVybnMge1ZpZXdlcn0gdGhpc1xuICAgICAqL1xuICAgIG1vdmVUbzogZnVuY3Rpb24gbW92ZVRvKHgpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICB2YXIgeSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogeDtcblxuICAgICAgdmFyIF9vcmlnaW5hbEV2ZW50ID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBudWxsO1xuXG4gICAgICB2YXIgZWxlbWVudCA9IHRoaXMuZWxlbWVudCxcbiAgICAgICAgICBvcHRpb25zID0gdGhpcy5vcHRpb25zLFxuICAgICAgICAgIGltYWdlRGF0YSA9IHRoaXMuaW1hZ2VEYXRhO1xuICAgICAgeCA9IE51bWJlcih4KTtcbiAgICAgIHkgPSBOdW1iZXIoeSk7XG5cbiAgICAgIGlmICh0aGlzLnZpZXdlZCAmJiAhdGhpcy5wbGF5ZWQgJiYgb3B0aW9ucy5tb3ZhYmxlKSB7XG4gICAgICAgIHZhciBvbGRYID0gaW1hZ2VEYXRhLng7XG4gICAgICAgIHZhciBvbGRZID0gaW1hZ2VEYXRhLnk7XG4gICAgICAgIHZhciBjaGFuZ2VkID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKGlzTnVtYmVyKHgpKSB7XG4gICAgICAgICAgY2hhbmdlZCA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgeCA9IG9sZFg7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNOdW1iZXIoeSkpIHtcbiAgICAgICAgICBjaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB5ID0gb2xkWTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjaGFuZ2VkKSB7XG4gICAgICAgICAgaWYgKGlzRnVuY3Rpb24ob3B0aW9ucy5tb3ZlKSkge1xuICAgICAgICAgICAgYWRkTGlzdGVuZXIoZWxlbWVudCwgRVZFTlRfTU9WRSwgb3B0aW9ucy5tb3ZlLCB7XG4gICAgICAgICAgICAgIG9uY2U6IHRydWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChkaXNwYXRjaEV2ZW50KGVsZW1lbnQsIEVWRU5UX01PVkUsIHtcbiAgICAgICAgICAgIHg6IHgsXG4gICAgICAgICAgICB5OiB5LFxuICAgICAgICAgICAgb2xkWDogb2xkWCxcbiAgICAgICAgICAgIG9sZFk6IG9sZFksXG4gICAgICAgICAgICBvcmlnaW5hbEV2ZW50OiBfb3JpZ2luYWxFdmVudFxuICAgICAgICAgIH0pID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaW1hZ2VEYXRhLnggPSB4O1xuICAgICAgICAgIGltYWdlRGF0YS55ID0geTtcbiAgICAgICAgICBpbWFnZURhdGEubGVmdCA9IHg7XG4gICAgICAgICAgaW1hZ2VEYXRhLnRvcCA9IHk7XG4gICAgICAgICAgdGhpcy5tb3ZpbmcgPSB0cnVlO1xuICAgICAgICAgIHRoaXMucmVuZGVySW1hZ2UoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMzLm1vdmluZyA9IGZhbHNlO1xuXG4gICAgICAgICAgICBpZiAoaXNGdW5jdGlvbihvcHRpb25zLm1vdmVkKSkge1xuICAgICAgICAgICAgICBhZGRMaXN0ZW5lcihlbGVtZW50LCBFVkVOVF9NT1ZFRCwgb3B0aW9ucy5tb3ZlZCwge1xuICAgICAgICAgICAgICAgIG9uY2U6IHRydWVcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRpc3BhdGNoRXZlbnQoZWxlbWVudCwgRVZFTlRfTU9WRUQsIHtcbiAgICAgICAgICAgICAgeDogeCxcbiAgICAgICAgICAgICAgeTogeSxcbiAgICAgICAgICAgICAgb2xkWDogb2xkWCxcbiAgICAgICAgICAgICAgb2xkWTogb2xkWSxcbiAgICAgICAgICAgICAgb3JpZ2luYWxFdmVudDogX29yaWdpbmFsRXZlbnRcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgY2FuY2VsYWJsZTogZmFsc2VcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSb3RhdGUgdGhlIGltYWdlIHdpdGggYSByZWxhdGl2ZSBkZWdyZWUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGRlZ3JlZSAtIFRoZSByb3RhdGUgZGVncmVlLlxuICAgICAqIEByZXR1cm5zIHtWaWV3ZXJ9IHRoaXNcbiAgICAgKi9cbiAgICByb3RhdGU6IGZ1bmN0aW9uIHJvdGF0ZShkZWdyZWUpIHtcbiAgICAgIHRoaXMucm90YXRlVG8oKHRoaXMuaW1hZ2VEYXRhLnJvdGF0ZSB8fCAwKSArIE51bWJlcihkZWdyZWUpKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSb3RhdGUgdGhlIGltYWdlIHRvIGFuIGFic29sdXRlIGRlZ3JlZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZGVncmVlIC0gVGhlIHJvdGF0ZSBkZWdyZWUuXG4gICAgICogQHJldHVybnMge1ZpZXdlcn0gdGhpc1xuICAgICAqL1xuICAgIHJvdGF0ZVRvOiBmdW5jdGlvbiByb3RhdGVUbyhkZWdyZWUpIHtcbiAgICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgICB2YXIgZWxlbWVudCA9IHRoaXMuZWxlbWVudCxcbiAgICAgICAgICBvcHRpb25zID0gdGhpcy5vcHRpb25zLFxuICAgICAgICAgIGltYWdlRGF0YSA9IHRoaXMuaW1hZ2VEYXRhO1xuICAgICAgZGVncmVlID0gTnVtYmVyKGRlZ3JlZSk7XG5cbiAgICAgIGlmIChpc051bWJlcihkZWdyZWUpICYmIHRoaXMudmlld2VkICYmICF0aGlzLnBsYXllZCAmJiBvcHRpb25zLnJvdGF0YWJsZSkge1xuICAgICAgICB2YXIgb2xkRGVncmVlID0gaW1hZ2VEYXRhLnJvdGF0ZTtcblxuICAgICAgICBpZiAoaXNGdW5jdGlvbihvcHRpb25zLnJvdGF0ZSkpIHtcbiAgICAgICAgICBhZGRMaXN0ZW5lcihlbGVtZW50LCBFVkVOVF9ST1RBVEUsIG9wdGlvbnMucm90YXRlLCB7XG4gICAgICAgICAgICBvbmNlOiB0cnVlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZGlzcGF0Y2hFdmVudChlbGVtZW50LCBFVkVOVF9ST1RBVEUsIHtcbiAgICAgICAgICBkZWdyZWU6IGRlZ3JlZSxcbiAgICAgICAgICBvbGREZWdyZWU6IG9sZERlZ3JlZVxuICAgICAgICB9KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIGltYWdlRGF0YS5yb3RhdGUgPSBkZWdyZWU7XG4gICAgICAgIHRoaXMucm90YXRpbmcgPSB0cnVlO1xuICAgICAgICB0aGlzLnJlbmRlckltYWdlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpczQucm90YXRpbmcgPSBmYWxzZTtcblxuICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKG9wdGlvbnMucm90YXRlZCkpIHtcbiAgICAgICAgICAgIGFkZExpc3RlbmVyKGVsZW1lbnQsIEVWRU5UX1JPVEFURUQsIG9wdGlvbnMucm90YXRlZCwge1xuICAgICAgICAgICAgICBvbmNlOiB0cnVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkaXNwYXRjaEV2ZW50KGVsZW1lbnQsIEVWRU5UX1JPVEFURUQsIHtcbiAgICAgICAgICAgIGRlZ3JlZTogZGVncmVlLFxuICAgICAgICAgICAgb2xkRGVncmVlOiBvbGREZWdyZWVcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICBjYW5jZWxhYmxlOiBmYWxzZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNjYWxlIHRoZSBpbWFnZSBvbiB0aGUgeC1heGlzLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzY2FsZVggLSBUaGUgc2NhbGUgcmF0aW8gb24gdGhlIHgtYXhpcy5cbiAgICAgKiBAcmV0dXJucyB7Vmlld2VyfSB0aGlzXG4gICAgICovXG4gICAgc2NhbGVYOiBmdW5jdGlvbiBzY2FsZVgoX3NjYWxlWCkge1xuICAgICAgdGhpcy5zY2FsZShfc2NhbGVYLCB0aGlzLmltYWdlRGF0YS5zY2FsZVkpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNjYWxlIHRoZSBpbWFnZSBvbiB0aGUgeS1heGlzLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzY2FsZVkgLSBUaGUgc2NhbGUgcmF0aW8gb24gdGhlIHktYXhpcy5cbiAgICAgKiBAcmV0dXJucyB7Vmlld2VyfSB0aGlzXG4gICAgICovXG4gICAgc2NhbGVZOiBmdW5jdGlvbiBzY2FsZVkoX3NjYWxlWSkge1xuICAgICAgdGhpcy5zY2FsZSh0aGlzLmltYWdlRGF0YS5zY2FsZVgsIF9zY2FsZVkpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNjYWxlIHRoZSBpbWFnZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc2NhbGVYIC0gVGhlIHNjYWxlIHJhdGlvIG9uIHRoZSB4LWF4aXMuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzY2FsZVk9c2NhbGVYXSAtIFRoZSBzY2FsZSByYXRpbyBvbiB0aGUgeS1heGlzLlxuICAgICAqIEByZXR1cm5zIHtWaWV3ZXJ9IHRoaXNcbiAgICAgKi9cbiAgICBzY2FsZTogZnVuY3Rpb24gc2NhbGUoc2NhbGVYKSB7XG4gICAgICB2YXIgX3RoaXM1ID0gdGhpcztcblxuICAgICAgdmFyIHNjYWxlWSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogc2NhbGVYO1xuICAgICAgdmFyIGVsZW1lbnQgPSB0aGlzLmVsZW1lbnQsXG4gICAgICAgICAgb3B0aW9ucyA9IHRoaXMub3B0aW9ucyxcbiAgICAgICAgICBpbWFnZURhdGEgPSB0aGlzLmltYWdlRGF0YTtcbiAgICAgIHNjYWxlWCA9IE51bWJlcihzY2FsZVgpO1xuICAgICAgc2NhbGVZID0gTnVtYmVyKHNjYWxlWSk7XG5cbiAgICAgIGlmICh0aGlzLnZpZXdlZCAmJiAhdGhpcy5wbGF5ZWQgJiYgb3B0aW9ucy5zY2FsYWJsZSkge1xuICAgICAgICB2YXIgb2xkU2NhbGVYID0gaW1hZ2VEYXRhLnNjYWxlWDtcbiAgICAgICAgdmFyIG9sZFNjYWxlWSA9IGltYWdlRGF0YS5zY2FsZVk7XG4gICAgICAgIHZhciBjaGFuZ2VkID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKGlzTnVtYmVyKHNjYWxlWCkpIHtcbiAgICAgICAgICBjaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzY2FsZVggPSBvbGRTY2FsZVg7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNOdW1iZXIoc2NhbGVZKSkge1xuICAgICAgICAgIGNoYW5nZWQgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNjYWxlWSA9IG9sZFNjYWxlWTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjaGFuZ2VkKSB7XG4gICAgICAgICAgaWYgKGlzRnVuY3Rpb24ob3B0aW9ucy5zY2FsZSkpIHtcbiAgICAgICAgICAgIGFkZExpc3RlbmVyKGVsZW1lbnQsIEVWRU5UX1NDQUxFLCBvcHRpb25zLnNjYWxlLCB7XG4gICAgICAgICAgICAgIG9uY2U6IHRydWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChkaXNwYXRjaEV2ZW50KGVsZW1lbnQsIEVWRU5UX1NDQUxFLCB7XG4gICAgICAgICAgICBzY2FsZVg6IHNjYWxlWCxcbiAgICAgICAgICAgIHNjYWxlWTogc2NhbGVZLFxuICAgICAgICAgICAgb2xkU2NhbGVYOiBvbGRTY2FsZVgsXG4gICAgICAgICAgICBvbGRTY2FsZVk6IG9sZFNjYWxlWVxuICAgICAgICAgIH0pID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaW1hZ2VEYXRhLnNjYWxlWCA9IHNjYWxlWDtcbiAgICAgICAgICBpbWFnZURhdGEuc2NhbGVZID0gc2NhbGVZO1xuICAgICAgICAgIHRoaXMuc2NhbGluZyA9IHRydWU7XG4gICAgICAgICAgdGhpcy5yZW5kZXJJbWFnZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpczUuc2NhbGluZyA9IGZhbHNlO1xuXG4gICAgICAgICAgICBpZiAoaXNGdW5jdGlvbihvcHRpb25zLnNjYWxlZCkpIHtcbiAgICAgICAgICAgICAgYWRkTGlzdGVuZXIoZWxlbWVudCwgRVZFTlRfU0NBTEVELCBvcHRpb25zLnNjYWxlZCwge1xuICAgICAgICAgICAgICAgIG9uY2U6IHRydWVcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRpc3BhdGNoRXZlbnQoZWxlbWVudCwgRVZFTlRfU0NBTEVELCB7XG4gICAgICAgICAgICAgIHNjYWxlWDogc2NhbGVYLFxuICAgICAgICAgICAgICBzY2FsZVk6IHNjYWxlWSxcbiAgICAgICAgICAgICAgb2xkU2NhbGVYOiBvbGRTY2FsZVgsXG4gICAgICAgICAgICAgIG9sZFNjYWxlWTogb2xkU2NhbGVZXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgIGNhbmNlbGFibGU6IGZhbHNlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogWm9vbSB0aGUgaW1hZ2Ugd2l0aCBhIHJlbGF0aXZlIHJhdGlvLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSByYXRpbyAtIFRoZSB0YXJnZXQgcmF0aW8uXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaGFzVG9vbHRpcD1mYWxzZV0gLSBJbmRpY2F0ZXMgaWYgaXQgaGFzIGEgdG9vbHRpcCBvciBub3QuXG4gICAgICogQHBhcmFtIHtFdmVudH0gW19vcmlnaW5hbEV2ZW50PW51bGxdIC0gVGhlIG9yaWdpbmFsIGV2ZW50IGlmIGFueS5cbiAgICAgKiBAcmV0dXJucyB7Vmlld2VyfSB0aGlzXG4gICAgICovXG4gICAgem9vbTogZnVuY3Rpb24gem9vbShyYXRpbykge1xuICAgICAgdmFyIGhhc1Rvb2x0aXAgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGZhbHNlO1xuXG4gICAgICB2YXIgX29yaWdpbmFsRXZlbnQgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IG51bGw7XG5cbiAgICAgIHZhciBpbWFnZURhdGEgPSB0aGlzLmltYWdlRGF0YTtcbiAgICAgIHJhdGlvID0gTnVtYmVyKHJhdGlvKTtcblxuICAgICAgaWYgKHJhdGlvIDwgMCkge1xuICAgICAgICByYXRpbyA9IDEgLyAoMSAtIHJhdGlvKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJhdGlvID0gMSArIHJhdGlvO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnpvb21UbyhpbWFnZURhdGEud2lkdGggKiByYXRpbyAvIGltYWdlRGF0YS5uYXR1cmFsV2lkdGgsIGhhc1Rvb2x0aXAsIF9vcmlnaW5hbEV2ZW50KTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBab29tIHRoZSBpbWFnZSB0byBhbiBhYnNvbHV0ZSByYXRpby5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcmF0aW8gLSBUaGUgdGFyZ2V0IHJhdGlvLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2hhc1Rvb2x0aXA9ZmFsc2VdIC0gSW5kaWNhdGVzIGlmIGl0IGhhcyBhIHRvb2x0aXAgb3Igbm90LlxuICAgICAqIEBwYXJhbSB7RXZlbnR9IFtfb3JpZ2luYWxFdmVudD1udWxsXSAtIFRoZSBvcmlnaW5hbCBldmVudCBpZiBhbnkuXG4gICAgICogQHBhcmFtIHtFdmVudH0gW196b29tYWJsZT1mYWxzZV0gLSBJbmRpY2F0ZXMgaWYgdGhlIGN1cnJlbnQgem9vbSBpcyBhdmFpbGFibGUgb3Igbm90LlxuICAgICAqIEByZXR1cm5zIHtWaWV3ZXJ9IHRoaXNcbiAgICAgKi9cbiAgICB6b29tVG86IGZ1bmN0aW9uIHpvb21UbyhyYXRpbykge1xuICAgICAgdmFyIF90aGlzNiA9IHRoaXM7XG5cbiAgICAgIHZhciBoYXNUb29sdGlwID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmYWxzZTtcblxuICAgICAgdmFyIF9vcmlnaW5hbEV2ZW50ID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBudWxsO1xuXG4gICAgICB2YXIgX3pvb21hYmxlID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiBmYWxzZTtcblxuICAgICAgdmFyIGVsZW1lbnQgPSB0aGlzLmVsZW1lbnQsXG4gICAgICAgICAgb3B0aW9ucyA9IHRoaXMub3B0aW9ucyxcbiAgICAgICAgICBwb2ludGVycyA9IHRoaXMucG9pbnRlcnMsXG4gICAgICAgICAgaW1hZ2VEYXRhID0gdGhpcy5pbWFnZURhdGE7XG4gICAgICB2YXIgeCA9IGltYWdlRGF0YS54LFxuICAgICAgICAgIHkgPSBpbWFnZURhdGEueSxcbiAgICAgICAgICB3aWR0aCA9IGltYWdlRGF0YS53aWR0aCxcbiAgICAgICAgICBoZWlnaHQgPSBpbWFnZURhdGEuaGVpZ2h0LFxuICAgICAgICAgIG5hdHVyYWxXaWR0aCA9IGltYWdlRGF0YS5uYXR1cmFsV2lkdGgsXG4gICAgICAgICAgbmF0dXJhbEhlaWdodCA9IGltYWdlRGF0YS5uYXR1cmFsSGVpZ2h0O1xuICAgICAgcmF0aW8gPSBNYXRoLm1heCgwLCByYXRpbyk7XG5cbiAgICAgIGlmIChpc051bWJlcihyYXRpbykgJiYgdGhpcy52aWV3ZWQgJiYgIXRoaXMucGxheWVkICYmIChfem9vbWFibGUgfHwgb3B0aW9ucy56b29tYWJsZSkpIHtcbiAgICAgICAgaWYgKCFfem9vbWFibGUpIHtcbiAgICAgICAgICB2YXIgbWluWm9vbVJhdGlvID0gTWF0aC5tYXgoMC4wMSwgb3B0aW9ucy5taW5ab29tUmF0aW8pO1xuICAgICAgICAgIHZhciBtYXhab29tUmF0aW8gPSBNYXRoLm1pbigxMDAsIG9wdGlvbnMubWF4Wm9vbVJhdGlvKTtcbiAgICAgICAgICByYXRpbyA9IE1hdGgubWluKE1hdGgubWF4KHJhdGlvLCBtaW5ab29tUmF0aW8pLCBtYXhab29tUmF0aW8pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF9vcmlnaW5hbEV2ZW50KSB7XG4gICAgICAgICAgc3dpdGNoIChfb3JpZ2luYWxFdmVudC50eXBlKSB7XG4gICAgICAgICAgICBjYXNlICd3aGVlbCc6XG4gICAgICAgICAgICAgIGlmIChvcHRpb25zLnpvb21SYXRpbyA+PSAwLjA1NSAmJiByYXRpbyA+IDAuOTUgJiYgcmF0aW8gPCAxLjA1KSB7XG4gICAgICAgICAgICAgICAgcmF0aW8gPSAxO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJ3BvaW50ZXJtb3ZlJzpcbiAgICAgICAgICAgIGNhc2UgJ3RvdWNobW92ZSc6XG4gICAgICAgICAgICBjYXNlICdtb3VzZW1vdmUnOlxuICAgICAgICAgICAgICBpZiAocmF0aW8gPiAwLjk5ICYmIHJhdGlvIDwgMS4wMSkge1xuICAgICAgICAgICAgICAgIHJhdGlvID0gMTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBuZXdXaWR0aCA9IG5hdHVyYWxXaWR0aCAqIHJhdGlvO1xuICAgICAgICB2YXIgbmV3SGVpZ2h0ID0gbmF0dXJhbEhlaWdodCAqIHJhdGlvO1xuICAgICAgICB2YXIgb2Zmc2V0V2lkdGggPSBuZXdXaWR0aCAtIHdpZHRoO1xuICAgICAgICB2YXIgb2Zmc2V0SGVpZ2h0ID0gbmV3SGVpZ2h0IC0gaGVpZ2h0O1xuICAgICAgICB2YXIgb2xkUmF0aW8gPSBpbWFnZURhdGEucmF0aW87XG5cbiAgICAgICAgaWYgKGlzRnVuY3Rpb24ob3B0aW9ucy56b29tKSkge1xuICAgICAgICAgIGFkZExpc3RlbmVyKGVsZW1lbnQsIEVWRU5UX1pPT00sIG9wdGlvbnMuem9vbSwge1xuICAgICAgICAgICAgb25jZTogdHJ1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRpc3BhdGNoRXZlbnQoZWxlbWVudCwgRVZFTlRfWk9PTSwge1xuICAgICAgICAgIHJhdGlvOiByYXRpbyxcbiAgICAgICAgICBvbGRSYXRpbzogb2xkUmF0aW8sXG4gICAgICAgICAgb3JpZ2luYWxFdmVudDogX29yaWdpbmFsRXZlbnRcbiAgICAgICAgfSkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnpvb21pbmcgPSB0cnVlO1xuXG4gICAgICAgIGlmIChfb3JpZ2luYWxFdmVudCkge1xuICAgICAgICAgIHZhciBvZmZzZXQgPSBnZXRPZmZzZXQodGhpcy52aWV3ZXIpO1xuICAgICAgICAgIHZhciBjZW50ZXIgPSBwb2ludGVycyAmJiBPYmplY3Qua2V5cyhwb2ludGVycykubGVuZ3RoID4gMCA/IGdldFBvaW50ZXJzQ2VudGVyKHBvaW50ZXJzKSA6IHtcbiAgICAgICAgICAgIHBhZ2VYOiBfb3JpZ2luYWxFdmVudC5wYWdlWCxcbiAgICAgICAgICAgIHBhZ2VZOiBfb3JpZ2luYWxFdmVudC5wYWdlWVxuICAgICAgICAgIH07IC8vIFpvb20gZnJvbSB0aGUgdHJpZ2dlcmluZyBwb2ludCBvZiB0aGUgZXZlbnRcblxuICAgICAgICAgIGltYWdlRGF0YS54IC09IG9mZnNldFdpZHRoICogKChjZW50ZXIucGFnZVggLSBvZmZzZXQubGVmdCAtIHgpIC8gd2lkdGgpO1xuICAgICAgICAgIGltYWdlRGF0YS55IC09IG9mZnNldEhlaWdodCAqICgoY2VudGVyLnBhZ2VZIC0gb2Zmc2V0LnRvcCAtIHkpIC8gaGVpZ2h0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBab29tIGZyb20gdGhlIGNlbnRlciBvZiB0aGUgaW1hZ2VcbiAgICAgICAgICBpbWFnZURhdGEueCAtPSBvZmZzZXRXaWR0aCAvIDI7XG4gICAgICAgICAgaW1hZ2VEYXRhLnkgLT0gb2Zmc2V0SGVpZ2h0IC8gMjtcbiAgICAgICAgfVxuXG4gICAgICAgIGltYWdlRGF0YS5sZWZ0ID0gaW1hZ2VEYXRhLng7XG4gICAgICAgIGltYWdlRGF0YS50b3AgPSBpbWFnZURhdGEueTtcbiAgICAgICAgaW1hZ2VEYXRhLndpZHRoID0gbmV3V2lkdGg7XG4gICAgICAgIGltYWdlRGF0YS5oZWlnaHQgPSBuZXdIZWlnaHQ7XG4gICAgICAgIGltYWdlRGF0YS5vbGRSYXRpbyA9IG9sZFJhdGlvO1xuICAgICAgICBpbWFnZURhdGEucmF0aW8gPSByYXRpbztcbiAgICAgICAgdGhpcy5yZW5kZXJJbWFnZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXM2Lnpvb21pbmcgPSBmYWxzZTtcblxuICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKG9wdGlvbnMuem9vbWVkKSkge1xuICAgICAgICAgICAgYWRkTGlzdGVuZXIoZWxlbWVudCwgRVZFTlRfWk9PTUVELCBvcHRpb25zLnpvb21lZCwge1xuICAgICAgICAgICAgICBvbmNlOiB0cnVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkaXNwYXRjaEV2ZW50KGVsZW1lbnQsIEVWRU5UX1pPT01FRCwge1xuICAgICAgICAgICAgcmF0aW86IHJhdGlvLFxuICAgICAgICAgICAgb2xkUmF0aW86IG9sZFJhdGlvLFxuICAgICAgICAgICAgb3JpZ2luYWxFdmVudDogX29yaWdpbmFsRXZlbnRcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICBjYW5jZWxhYmxlOiBmYWxzZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoaGFzVG9vbHRpcCkge1xuICAgICAgICAgIHRoaXMudG9vbHRpcCgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBQbGF5IHRoZSBpbWFnZXNcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW58RnVsbHNjcmVlbk9wdGlvbnN9IFtmdWxsc2NyZWVuPWZhbHNlXSAtIEluZGljYXRlIGlmIHJlcXVlc3QgZnVsbHNjcmVlbiBvciBub3QuXG4gICAgICogQHJldHVybnMge1ZpZXdlcn0gdGhpc1xuICAgICAqL1xuICAgIHBsYXk6IGZ1bmN0aW9uIHBsYXkoKSB7XG4gICAgICB2YXIgX3RoaXM3ID0gdGhpcztcblxuICAgICAgdmFyIGZ1bGxzY3JlZW4gPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuXG4gICAgICBpZiAoIXRoaXMuaXNTaG93biB8fCB0aGlzLnBsYXllZCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgdmFyIGVsZW1lbnQgPSB0aGlzLmVsZW1lbnQsXG4gICAgICAgICAgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcblxuICAgICAgaWYgKGlzRnVuY3Rpb24ob3B0aW9ucy5wbGF5KSkge1xuICAgICAgICBhZGRMaXN0ZW5lcihlbGVtZW50LCBFVkVOVF9QTEFZLCBvcHRpb25zLnBsYXksIHtcbiAgICAgICAgICBvbmNlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoZGlzcGF0Y2hFdmVudChlbGVtZW50LCBFVkVOVF9QTEFZKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHZhciBwbGF5ZXIgPSB0aGlzLnBsYXllcjtcbiAgICAgIHZhciBvbkxvYWQgPSB0aGlzLmxvYWRJbWFnZS5iaW5kKHRoaXMpO1xuICAgICAgdmFyIGxpc3QgPSBbXTtcbiAgICAgIHZhciB0b3RhbCA9IDA7XG4gICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgdGhpcy5wbGF5ZWQgPSB0cnVlO1xuICAgICAgdGhpcy5vbkxvYWRXaGVuUGxheSA9IG9uTG9hZDtcblxuICAgICAgaWYgKGZ1bGxzY3JlZW4pIHtcbiAgICAgICAgdGhpcy5yZXF1ZXN0RnVsbHNjcmVlbihmdWxsc2NyZWVuKTtcbiAgICAgIH1cblxuICAgICAgYWRkQ2xhc3MocGxheWVyLCBDTEFTU19TSE9XKTtcbiAgICAgIGZvckVhY2godGhpcy5pdGVtcywgZnVuY3Rpb24gKGl0ZW0sIGkpIHtcbiAgICAgICAgdmFyIGltZyA9IGl0ZW0ucXVlcnlTZWxlY3RvcignaW1nJyk7XG4gICAgICAgIHZhciBpbWFnZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuICAgICAgICBpbWFnZS5zcmMgPSBnZXREYXRhKGltZywgJ29yaWdpbmFsVXJsJyk7XG4gICAgICAgIGltYWdlLmFsdCA9IGltZy5nZXRBdHRyaWJ1dGUoJ2FsdCcpO1xuICAgICAgICBpbWFnZS5yZWZlcnJlclBvbGljeSA9IGltZy5yZWZlcnJlclBvbGljeTtcbiAgICAgICAgdG90YWwgKz0gMTtcbiAgICAgICAgYWRkQ2xhc3MoaW1hZ2UsIENMQVNTX0ZBREUpO1xuICAgICAgICB0b2dnbGVDbGFzcyhpbWFnZSwgQ0xBU1NfVFJBTlNJVElPTiwgb3B0aW9ucy50cmFuc2l0aW9uKTtcblxuICAgICAgICBpZiAoaGFzQ2xhc3MoaXRlbSwgQ0xBU1NfQUNUSVZFKSkge1xuICAgICAgICAgIGFkZENsYXNzKGltYWdlLCBDTEFTU19JTik7XG4gICAgICAgICAgaW5kZXggPSBpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGlzdC5wdXNoKGltYWdlKTtcbiAgICAgICAgYWRkTGlzdGVuZXIoaW1hZ2UsIEVWRU5UX0xPQUQsIG9uTG9hZCwge1xuICAgICAgICAgIG9uY2U6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIHBsYXllci5hcHBlbmRDaGlsZChpbWFnZSk7XG4gICAgICB9KTtcblxuICAgICAgaWYgKGlzTnVtYmVyKG9wdGlvbnMuaW50ZXJ2YWwpICYmIG9wdGlvbnMuaW50ZXJ2YWwgPiAwKSB7XG4gICAgICAgIHZhciBwbGF5ID0gZnVuY3Rpb24gcGxheSgpIHtcbiAgICAgICAgICBfdGhpczcucGxheWluZyA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmVtb3ZlQ2xhc3MobGlzdFtpbmRleF0sIENMQVNTX0lOKTtcbiAgICAgICAgICAgIGluZGV4ICs9IDE7XG4gICAgICAgICAgICBpbmRleCA9IGluZGV4IDwgdG90YWwgPyBpbmRleCA6IDA7XG4gICAgICAgICAgICBhZGRDbGFzcyhsaXN0W2luZGV4XSwgQ0xBU1NfSU4pO1xuICAgICAgICAgICAgcGxheSgpO1xuICAgICAgICAgIH0sIG9wdGlvbnMuaW50ZXJ2YWwpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmICh0b3RhbCA+IDEpIHtcbiAgICAgICAgICBwbGF5KCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICAvLyBTdG9wIHBsYXlcbiAgICBzdG9wOiBmdW5jdGlvbiBzdG9wKCkge1xuICAgICAgdmFyIF90aGlzOCA9IHRoaXM7XG5cbiAgICAgIGlmICghdGhpcy5wbGF5ZWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHZhciBlbGVtZW50ID0gdGhpcy5lbGVtZW50LFxuICAgICAgICAgIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cbiAgICAgIGlmIChpc0Z1bmN0aW9uKG9wdGlvbnMuc3RvcCkpIHtcbiAgICAgICAgYWRkTGlzdGVuZXIoZWxlbWVudCwgRVZFTlRfU1RPUCwgb3B0aW9ucy5zdG9wLCB7XG4gICAgICAgICAgb25jZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKGRpc3BhdGNoRXZlbnQoZWxlbWVudCwgRVZFTlRfU1RPUCkgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICB2YXIgcGxheWVyID0gdGhpcy5wbGF5ZXI7XG4gICAgICB0aGlzLnBsYXllZCA9IGZhbHNlO1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMucGxheWluZyk7XG4gICAgICBmb3JFYWNoKHBsYXllci5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaW1nJyksIGZ1bmN0aW9uIChpbWFnZSkge1xuICAgICAgICByZW1vdmVMaXN0ZW5lcihpbWFnZSwgRVZFTlRfTE9BRCwgX3RoaXM4Lm9uTG9hZFdoZW5QbGF5KTtcbiAgICAgIH0pO1xuICAgICAgcmVtb3ZlQ2xhc3MocGxheWVyLCBDTEFTU19TSE9XKTtcbiAgICAgIHBsYXllci5pbm5lckhUTUwgPSAnJztcbiAgICAgIHRoaXMuZXhpdEZ1bGxzY3JlZW4oKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgLy8gRW50ZXIgbW9kYWwgbW9kZSAob25seSBhdmFpbGFibGUgaW4gaW5saW5lIG1vZGUpXG4gICAgZnVsbDogZnVuY3Rpb24gZnVsbCgpIHtcbiAgICAgIHZhciBfdGhpczkgPSB0aGlzO1xuXG4gICAgICB2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucyxcbiAgICAgICAgICB2aWV3ZXIgPSB0aGlzLnZpZXdlcixcbiAgICAgICAgICBpbWFnZSA9IHRoaXMuaW1hZ2UsXG4gICAgICAgICAgbGlzdCA9IHRoaXMubGlzdDtcblxuICAgICAgaWYgKCF0aGlzLmlzU2hvd24gfHwgdGhpcy5wbGF5ZWQgfHwgdGhpcy5mdWxsZWQgfHwgIW9wdGlvbnMuaW5saW5lKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmZ1bGxlZCA9IHRydWU7XG4gICAgICB0aGlzLm9wZW4oKTtcbiAgICAgIGFkZENsYXNzKHRoaXMuYnV0dG9uLCBDTEFTU19GVUxMU0NSRUVOX0VYSVQpO1xuXG4gICAgICBpZiAob3B0aW9ucy50cmFuc2l0aW9uKSB7XG4gICAgICAgIHJlbW92ZUNsYXNzKGxpc3QsIENMQVNTX1RSQU5TSVRJT04pO1xuXG4gICAgICAgIGlmICh0aGlzLnZpZXdlZCkge1xuICAgICAgICAgIHJlbW92ZUNsYXNzKGltYWdlLCBDTEFTU19UUkFOU0lUSU9OKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBhZGRDbGFzcyh2aWV3ZXIsIENMQVNTX0ZJWEVEKTtcbiAgICAgIHZpZXdlci5zZXRBdHRyaWJ1dGUoJ3JvbGUnLCAnZGlhbG9nJyk7XG4gICAgICB2aWV3ZXIuc2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsbGVkYnknLCB0aGlzLnRpdGxlLmlkKTtcbiAgICAgIHZpZXdlci5zZXRBdHRyaWJ1dGUoJ2FyaWEtbW9kYWwnLCB0cnVlKTtcbiAgICAgIHZpZXdlci5yZW1vdmVBdHRyaWJ1dGUoJ3N0eWxlJyk7XG4gICAgICBzZXRTdHlsZSh2aWV3ZXIsIHtcbiAgICAgICAgekluZGV4OiBvcHRpb25zLnpJbmRleFxuICAgICAgfSk7XG5cbiAgICAgIGlmIChvcHRpb25zLmZvY3VzKSB7XG4gICAgICAgIHRoaXMuZW5mb3JjZUZvY3VzKCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuaW5pdENvbnRhaW5lcigpO1xuICAgICAgdGhpcy52aWV3ZXJEYXRhID0gYXNzaWduKHt9LCB0aGlzLmNvbnRhaW5lckRhdGEpO1xuICAgICAgdGhpcy5yZW5kZXJMaXN0KCk7XG5cbiAgICAgIGlmICh0aGlzLnZpZXdlZCkge1xuICAgICAgICB0aGlzLmluaXRJbWFnZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXM5LnJlbmRlckltYWdlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLnRyYW5zaXRpb24pIHtcbiAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgYWRkQ2xhc3MoaW1hZ2UsIENMQVNTX1RSQU5TSVRJT04pO1xuICAgICAgICAgICAgICAgIGFkZENsYXNzKGxpc3QsIENMQVNTX1RSQU5TSVRJT04pO1xuICAgICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgLy8gRXhpdCBtb2RhbCBtb2RlIChvbmx5IGF2YWlsYWJsZSBpbiBpbmxpbmUgbW9kZSlcbiAgICBleGl0OiBmdW5jdGlvbiBleGl0KCkge1xuICAgICAgdmFyIF90aGlzMTAgPSB0aGlzO1xuXG4gICAgICB2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucyxcbiAgICAgICAgICB2aWV3ZXIgPSB0aGlzLnZpZXdlcixcbiAgICAgICAgICBpbWFnZSA9IHRoaXMuaW1hZ2UsXG4gICAgICAgICAgbGlzdCA9IHRoaXMubGlzdDtcblxuICAgICAgaWYgKCF0aGlzLmlzU2hvd24gfHwgdGhpcy5wbGF5ZWQgfHwgIXRoaXMuZnVsbGVkIHx8ICFvcHRpb25zLmlubGluZSkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgdGhpcy5mdWxsZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgIHJlbW92ZUNsYXNzKHRoaXMuYnV0dG9uLCBDTEFTU19GVUxMU0NSRUVOX0VYSVQpO1xuXG4gICAgICBpZiAob3B0aW9ucy50cmFuc2l0aW9uKSB7XG4gICAgICAgIHJlbW92ZUNsYXNzKGxpc3QsIENMQVNTX1RSQU5TSVRJT04pO1xuXG4gICAgICAgIGlmICh0aGlzLnZpZXdlZCkge1xuICAgICAgICAgIHJlbW92ZUNsYXNzKGltYWdlLCBDTEFTU19UUkFOU0lUSU9OKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAob3B0aW9ucy5mb2N1cykge1xuICAgICAgICB0aGlzLmNsZWFyRW5mb3JjZUZvY3VzKCk7XG4gICAgICB9XG5cbiAgICAgIHZpZXdlci5yZW1vdmVBdHRyaWJ1dGUoJ3JvbGUnKTtcbiAgICAgIHZpZXdlci5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtbGFiZWxsZWRieScpO1xuICAgICAgdmlld2VyLnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1tb2RhbCcpO1xuICAgICAgcmVtb3ZlQ2xhc3Modmlld2VyLCBDTEFTU19GSVhFRCk7XG4gICAgICBzZXRTdHlsZSh2aWV3ZXIsIHtcbiAgICAgICAgekluZGV4OiBvcHRpb25zLnpJbmRleElubGluZVxuICAgICAgfSk7XG4gICAgICB0aGlzLnZpZXdlckRhdGEgPSBhc3NpZ24oe30sIHRoaXMucGFyZW50RGF0YSk7XG4gICAgICB0aGlzLnJlbmRlclZpZXdlcigpO1xuICAgICAgdGhpcy5yZW5kZXJMaXN0KCk7XG5cbiAgICAgIGlmICh0aGlzLnZpZXdlZCkge1xuICAgICAgICB0aGlzLmluaXRJbWFnZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMxMC5yZW5kZXJJbWFnZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy50cmFuc2l0aW9uKSB7XG4gICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGFkZENsYXNzKGltYWdlLCBDTEFTU19UUkFOU0lUSU9OKTtcbiAgICAgICAgICAgICAgICBhZGRDbGFzcyhsaXN0LCBDTEFTU19UUkFOU0lUSU9OKTtcbiAgICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIC8vIFNob3cgdGhlIGN1cnJlbnQgcmF0aW8gb2YgdGhlIGltYWdlIHdpdGggcGVyY2VudGFnZVxuICAgIHRvb2x0aXA6IGZ1bmN0aW9uIHRvb2x0aXAoKSB7XG4gICAgICB2YXIgX3RoaXMxMSA9IHRoaXM7XG5cbiAgICAgIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zLFxuICAgICAgICAgIHRvb2x0aXBCb3ggPSB0aGlzLnRvb2x0aXBCb3gsXG4gICAgICAgICAgaW1hZ2VEYXRhID0gdGhpcy5pbWFnZURhdGE7XG5cbiAgICAgIGlmICghdGhpcy52aWV3ZWQgfHwgdGhpcy5wbGF5ZWQgfHwgIW9wdGlvbnMudG9vbHRpcCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgdG9vbHRpcEJveC50ZXh0Q29udGVudCA9IFwiXCIuY29uY2F0KE1hdGgucm91bmQoaW1hZ2VEYXRhLnJhdGlvICogMTAwKSwgXCIlXCIpO1xuXG4gICAgICBpZiAoIXRoaXMudG9vbHRpcHBpbmcpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMudHJhbnNpdGlvbikge1xuICAgICAgICAgIGlmICh0aGlzLmZhZGluZykge1xuICAgICAgICAgICAgZGlzcGF0Y2hFdmVudCh0b29sdGlwQm94LCBFVkVOVF9UUkFOU0lUSU9OX0VORCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYWRkQ2xhc3ModG9vbHRpcEJveCwgQ0xBU1NfU0hPVyk7XG4gICAgICAgICAgYWRkQ2xhc3ModG9vbHRpcEJveCwgQ0xBU1NfRkFERSk7XG4gICAgICAgICAgYWRkQ2xhc3ModG9vbHRpcEJveCwgQ0xBU1NfVFJBTlNJVElPTik7XG4gICAgICAgICAgdG9vbHRpcEJveC5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJyk7IC8vIEZvcmNlIHJlZmxvdyB0byBlbmFibGUgQ1NTMyB0cmFuc2l0aW9uXG5cbiAgICAgICAgICB0b29sdGlwQm94LmluaXRpYWxPZmZzZXRXaWR0aCA9IHRvb2x0aXBCb3gub2Zmc2V0V2lkdGg7XG4gICAgICAgICAgYWRkQ2xhc3ModG9vbHRpcEJveCwgQ0xBU1NfSU4pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFkZENsYXNzKHRvb2x0aXBCb3gsIENMQVNTX1NIT1cpO1xuICAgICAgICAgIHRvb2x0aXBCb3gucmVtb3ZlQXR0cmlidXRlKCdhcmlhLWhpZGRlbicpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy50b29sdGlwcGluZyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMudG9vbHRpcHBpbmcgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMudHJhbnNpdGlvbikge1xuICAgICAgICAgIGFkZExpc3RlbmVyKHRvb2x0aXBCb3gsIEVWRU5UX1RSQU5TSVRJT05fRU5ELCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZW1vdmVDbGFzcyh0b29sdGlwQm94LCBDTEFTU19TSE9XKTtcbiAgICAgICAgICAgIHJlbW92ZUNsYXNzKHRvb2x0aXBCb3gsIENMQVNTX0ZBREUpO1xuICAgICAgICAgICAgcmVtb3ZlQ2xhc3ModG9vbHRpcEJveCwgQ0xBU1NfVFJBTlNJVElPTik7XG4gICAgICAgICAgICB0b29sdGlwQm94LnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCB0cnVlKTtcbiAgICAgICAgICAgIF90aGlzMTEuZmFkaW5nID0gZmFsc2U7XG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgb25jZTogdHJ1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJlbW92ZUNsYXNzKHRvb2x0aXBCb3gsIENMQVNTX0lOKTtcbiAgICAgICAgICBfdGhpczExLmZhZGluZyA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVtb3ZlQ2xhc3ModG9vbHRpcEJveCwgQ0xBU1NfU0hPVyk7XG4gICAgICAgICAgdG9vbHRpcEJveC5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgdHJ1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpczExLnRvb2x0aXBwaW5nID0gZmFsc2U7XG4gICAgICB9LCAxMDAwKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBUb2dnbGUgdGhlIGltYWdlIHNpemUgYmV0d2VlbiBpdHMgY3VycmVudCBzaXplIGFuZCBuYXR1cmFsIHNpemVcbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBbX29yaWdpbmFsRXZlbnQ9bnVsbF0gLSBUaGUgb3JpZ2luYWwgZXZlbnQgaWYgYW55LlxuICAgICAqIEByZXR1cm5zIHtWaWV3ZXJ9IHRoaXNcbiAgICAgKi9cbiAgICB0b2dnbGU6IGZ1bmN0aW9uIHRvZ2dsZSgpIHtcbiAgICAgIHZhciBfb3JpZ2luYWxFdmVudCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogbnVsbDtcblxuICAgICAgaWYgKHRoaXMuaW1hZ2VEYXRhLnJhdGlvID09PSAxKSB7XG4gICAgICAgIHRoaXMuem9vbVRvKHRoaXMuaW1hZ2VEYXRhLm9sZFJhdGlvLCB0cnVlLCBfb3JpZ2luYWxFdmVudCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnpvb21UbygxLCB0cnVlLCBfb3JpZ2luYWxFdmVudCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgLy8gUmVzZXQgdGhlIGltYWdlIHRvIGl0cyBpbml0aWFsIHN0YXRlXG4gICAgcmVzZXQ6IGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgICAgaWYgKHRoaXMudmlld2VkICYmICF0aGlzLnBsYXllZCkge1xuICAgICAgICB0aGlzLmltYWdlRGF0YSA9IGFzc2lnbih7fSwgdGhpcy5pbml0aWFsSW1hZ2VEYXRhKTtcbiAgICAgICAgdGhpcy5yZW5kZXJJbWFnZSgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIC8vIFVwZGF0ZSB2aWV3ZXIgd2hlbiBpbWFnZXMgY2hhbmdlZFxuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgICAgdmFyIF90aGlzMTIgPSB0aGlzO1xuXG4gICAgICB2YXIgZWxlbWVudCA9IHRoaXMuZWxlbWVudCxcbiAgICAgICAgICBvcHRpb25zID0gdGhpcy5vcHRpb25zLFxuICAgICAgICAgIGlzSW1nID0gdGhpcy5pc0ltZzsgLy8gRGVzdHJveSB2aWV3ZXIgaWYgdGhlIHRhcmdldCBpbWFnZSB3YXMgZGVsZXRlZFxuXG4gICAgICBpZiAoaXNJbWcgJiYgIWVsZW1lbnQucGFyZW50Tm9kZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5kZXN0cm95KCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBpbWFnZXMgPSBbXTtcbiAgICAgIGZvckVhY2goaXNJbWcgPyBbZWxlbWVudF0gOiBlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2ltZycpLCBmdW5jdGlvbiAoaW1hZ2UpIHtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24ob3B0aW9ucy5maWx0ZXIpKSB7XG4gICAgICAgICAgaWYgKG9wdGlvbnMuZmlsdGVyLmNhbGwoX3RoaXMxMiwgaW1hZ2UpKSB7XG4gICAgICAgICAgICBpbWFnZXMucHVzaChpbWFnZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKF90aGlzMTIuZ2V0SW1hZ2VVUkwoaW1hZ2UpKSB7XG4gICAgICAgICAgaW1hZ2VzLnB1c2goaW1hZ2UpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgaWYgKCFpbWFnZXMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmltYWdlcyA9IGltYWdlcztcbiAgICAgIHRoaXMubGVuZ3RoID0gaW1hZ2VzLmxlbmd0aDtcblxuICAgICAgaWYgKHRoaXMucmVhZHkpIHtcbiAgICAgICAgdmFyIGNoYW5nZWRJbmRleGVzID0gW107XG4gICAgICAgIGZvckVhY2godGhpcy5pdGVtcywgZnVuY3Rpb24gKGl0ZW0sIGkpIHtcbiAgICAgICAgICB2YXIgaW1nID0gaXRlbS5xdWVyeVNlbGVjdG9yKCdpbWcnKTtcbiAgICAgICAgICB2YXIgaW1hZ2UgPSBpbWFnZXNbaV07XG5cbiAgICAgICAgICBpZiAoaW1hZ2UgJiYgaW1nKSB7XG4gICAgICAgICAgICBpZiAoaW1hZ2Uuc3JjICE9PSBpbWcuc3JjIC8vIFRpdGxlIGNoYW5nZWQgKCM0MDgpXG4gICAgICAgICAgICB8fCBpbWFnZS5hbHQgIT09IGltZy5hbHQpIHtcbiAgICAgICAgICAgICAgY2hhbmdlZEluZGV4ZXMucHVzaChpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2hhbmdlZEluZGV4ZXMucHVzaChpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBzZXRTdHlsZSh0aGlzLmxpc3QsIHtcbiAgICAgICAgICB3aWR0aDogJ2F1dG8nXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmluaXRMaXN0KCk7XG5cbiAgICAgICAgaWYgKHRoaXMuaXNTaG93bikge1xuICAgICAgICAgIGlmICh0aGlzLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKHRoaXMudmlld2VkKSB7XG4gICAgICAgICAgICAgIHZhciBjaGFuZ2VkSW5kZXggPSBjaGFuZ2VkSW5kZXhlcy5pbmRleE9mKHRoaXMuaW5kZXgpO1xuXG4gICAgICAgICAgICAgIGlmIChjaGFuZ2VkSW5kZXggPj0gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMudmlld2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3KE1hdGgubWF4KE1hdGgubWluKHRoaXMuaW5kZXggLSBjaGFuZ2VkSW5kZXgsIHRoaXMubGVuZ3RoIC0gMSksIDApKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgYWN0aXZlSXRlbSA9IHRoaXMuaXRlbXNbdGhpcy5pbmRleF07IC8vIFJlYWN0aXZhdGUgdGhlIGN1cnJlbnQgdmlld2luZyBpdGVtIGFmdGVyIHJlc2V0IHRoZSBsaXN0LlxuXG4gICAgICAgICAgICAgICAgYWRkQ2xhc3MoYWN0aXZlSXRlbSwgQ0xBU1NfQUNUSVZFKTtcbiAgICAgICAgICAgICAgICBhY3RpdmVJdGVtLnNldEF0dHJpYnV0ZSgnYXJpYS1zZWxlY3RlZCcsIHRydWUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaW1hZ2UgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy52aWV3ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuaW5kZXggPSAwO1xuICAgICAgICAgICAgdGhpcy5pbWFnZURhdGEgPSB7fTtcbiAgICAgICAgICAgIHRoaXMuY2FudmFzLmlubmVySFRNTCA9ICcnO1xuICAgICAgICAgICAgdGhpcy50aXRsZS5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuYnVpbGQoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICAvLyBEZXN0cm95IHRoZSB2aWV3ZXJcbiAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgdmFyIGVsZW1lbnQgPSB0aGlzLmVsZW1lbnQsXG4gICAgICAgICAgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcblxuICAgICAgaWYgKCFlbGVtZW50W05BTUVTUEFDRV0pIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuZGVzdHJveWVkID0gdHJ1ZTtcblxuICAgICAgaWYgKHRoaXMucmVhZHkpIHtcbiAgICAgICAgaWYgKHRoaXMucGxheWVkKSB7XG4gICAgICAgICAgdGhpcy5zdG9wKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucy5pbmxpbmUpIHtcbiAgICAgICAgICBpZiAodGhpcy5mdWxsZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZXhpdCgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMudW5iaW5kKCk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5pc1Nob3duKSB7XG4gICAgICAgICAgaWYgKHRoaXMudmlld2luZykge1xuICAgICAgICAgICAgaWYgKHRoaXMuaW1hZ2VSZW5kZXJpbmcpIHtcbiAgICAgICAgICAgICAgdGhpcy5pbWFnZVJlbmRlcmluZy5hYm9ydCgpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmltYWdlSW5pdGlhbGl6aW5nKSB7XG4gICAgICAgICAgICAgIHRoaXMuaW1hZ2VJbml0aWFsaXppbmcuYWJvcnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodGhpcy5oaWRpbmcpIHtcbiAgICAgICAgICAgIHRoaXMudHJhbnNpdGlvbmluZy5hYm9ydCgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMuaGlkZGVuKCk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5zaG93aW5nKSB7XG4gICAgICAgICAgdGhpcy50cmFuc2l0aW9uaW5nLmFib3J0KCk7XG4gICAgICAgICAgdGhpcy5oaWRkZW4oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucmVhZHkgPSBmYWxzZTtcbiAgICAgICAgdGhpcy52aWV3ZXIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLnZpZXdlcik7XG4gICAgICB9IGVsc2UgaWYgKG9wdGlvbnMuaW5saW5lKSB7XG4gICAgICAgIGlmICh0aGlzLmRlbGF5aW5nKSB7XG4gICAgICAgICAgdGhpcy5kZWxheWluZy5hYm9ydCgpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaW5pdGlhbGl6aW5nKSB7XG4gICAgICAgICAgdGhpcy5pbml0aWFsaXppbmcuYWJvcnQoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoIW9wdGlvbnMuaW5saW5lKSB7XG4gICAgICAgIHJlbW92ZUxpc3RlbmVyKGVsZW1lbnQsIEVWRU5UX0NMSUNLLCB0aGlzLm9uU3RhcnQpO1xuICAgICAgfVxuXG4gICAgICBlbGVtZW50W05BTUVTUEFDRV0gPSB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH07XG5cbiAgdmFyIG90aGVycyA9IHtcbiAgICBnZXRJbWFnZVVSTDogZnVuY3Rpb24gZ2V0SW1hZ2VVUkwoaW1hZ2UpIHtcbiAgICAgIHZhciB1cmwgPSB0aGlzLm9wdGlvbnMudXJsO1xuXG4gICAgICBpZiAoaXNTdHJpbmcodXJsKSkge1xuICAgICAgICB1cmwgPSBpbWFnZS5nZXRBdHRyaWJ1dGUodXJsKTtcbiAgICAgIH0gZWxzZSBpZiAoaXNGdW5jdGlvbih1cmwpKSB7XG4gICAgICAgIHVybCA9IHVybC5jYWxsKHRoaXMsIGltYWdlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHVybCA9ICcnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdXJsO1xuICAgIH0sXG4gICAgZW5mb3JjZUZvY3VzOiBmdW5jdGlvbiBlbmZvcmNlRm9jdXMoKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICB0aGlzLmNsZWFyRW5mb3JjZUZvY3VzKCk7XG4gICAgICBhZGRMaXN0ZW5lcihkb2N1bWVudCwgRVZFTlRfRk9DVVNJTiwgdGhpcy5vbkZvY3VzaW4gPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgdmFyIHZpZXdlciA9IF90aGlzLnZpZXdlcjtcbiAgICAgICAgdmFyIHRhcmdldCA9IGV2ZW50LnRhcmdldDtcblxuICAgICAgICBpZiAodGFyZ2V0ID09PSBkb2N1bWVudCB8fCB0YXJnZXQgPT09IHZpZXdlciB8fCB2aWV3ZXIuY29udGFpbnModGFyZ2V0KSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHdoaWxlICh0YXJnZXQpIHtcbiAgICAgICAgICAvLyBBdm9pZCBjb25mbGljdHMgd2l0aCBvdGhlciBtb2RhbHMgKCM0NzQsICM1NDApXG4gICAgICAgICAgaWYgKHRhcmdldC5nZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JykgIT09IG51bGwgfHwgdGFyZ2V0LmdldEF0dHJpYnV0ZSgnYXJpYS1tb2RhbCcpID09PSAndHJ1ZScpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0YXJnZXQgPSB0YXJnZXQucGFyZW50RWxlbWVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZpZXdlci5mb2N1cygpO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBjbGVhckVuZm9yY2VGb2N1czogZnVuY3Rpb24gY2xlYXJFbmZvcmNlRm9jdXMoKSB7XG4gICAgICBpZiAodGhpcy5vbkZvY3VzaW4pIHtcbiAgICAgICAgcmVtb3ZlTGlzdGVuZXIoZG9jdW1lbnQsIEVWRU5UX0ZPQ1VTSU4sIHRoaXMub25Gb2N1c2luKTtcbiAgICAgICAgdGhpcy5vbkZvY3VzaW4gPSBudWxsO1xuICAgICAgfVxuICAgIH0sXG4gICAgb3BlbjogZnVuY3Rpb24gb3BlbigpIHtcbiAgICAgIHZhciBib2R5ID0gdGhpcy5ib2R5O1xuICAgICAgYWRkQ2xhc3MoYm9keSwgQ0xBU1NfT1BFTik7XG4gICAgICBib2R5LnN0eWxlLnBhZGRpbmdSaWdodCA9IFwiXCIuY29uY2F0KHRoaXMuc2Nyb2xsYmFyV2lkdGggKyAocGFyc2VGbG9hdCh0aGlzLmluaXRpYWxCb2R5Q29tcHV0ZWRQYWRkaW5nUmlnaHQpIHx8IDApLCBcInB4XCIpO1xuICAgIH0sXG4gICAgY2xvc2U6IGZ1bmN0aW9uIGNsb3NlKCkge1xuICAgICAgdmFyIGJvZHkgPSB0aGlzLmJvZHk7XG4gICAgICByZW1vdmVDbGFzcyhib2R5LCBDTEFTU19PUEVOKTtcbiAgICAgIGJvZHkuc3R5bGUucGFkZGluZ1JpZ2h0ID0gdGhpcy5pbml0aWFsQm9keVBhZGRpbmdSaWdodDtcbiAgICB9LFxuICAgIHNob3duOiBmdW5jdGlvbiBzaG93bigpIHtcbiAgICAgIHZhciBlbGVtZW50ID0gdGhpcy5lbGVtZW50LFxuICAgICAgICAgIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMsXG4gICAgICAgICAgdmlld2VyID0gdGhpcy52aWV3ZXI7XG4gICAgICB0aGlzLmZ1bGxlZCA9IHRydWU7XG4gICAgICB0aGlzLmlzU2hvd24gPSB0cnVlO1xuICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICAgIHRoaXMuYmluZCgpO1xuICAgICAgdGhpcy5zaG93aW5nID0gZmFsc2U7XG5cbiAgICAgIGlmIChvcHRpb25zLmZvY3VzKSB7XG4gICAgICAgIHZpZXdlci5mb2N1cygpO1xuICAgICAgICB0aGlzLmVuZm9yY2VGb2N1cygpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNGdW5jdGlvbihvcHRpb25zLnNob3duKSkge1xuICAgICAgICBhZGRMaXN0ZW5lcihlbGVtZW50LCBFVkVOVF9TSE9XTiwgb3B0aW9ucy5zaG93biwge1xuICAgICAgICAgIG9uY2U6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChkaXNwYXRjaEV2ZW50KGVsZW1lbnQsIEVWRU5UX1NIT1dOKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5yZWFkeSAmJiB0aGlzLmlzU2hvd24gJiYgIXRoaXMuaGlkaW5nKSB7XG4gICAgICAgIHRoaXMudmlldyh0aGlzLmluZGV4KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGhpZGRlbjogZnVuY3Rpb24gaGlkZGVuKCkge1xuICAgICAgdmFyIGVsZW1lbnQgPSB0aGlzLmVsZW1lbnQsXG4gICAgICAgICAgb3B0aW9ucyA9IHRoaXMub3B0aW9ucyxcbiAgICAgICAgICB2aWV3ZXIgPSB0aGlzLnZpZXdlcjtcblxuICAgICAgaWYgKG9wdGlvbnMuZnVjdXMpIHtcbiAgICAgICAgdGhpcy5jbGVhckVuZm9yY2VGb2N1cygpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmZ1bGxlZCA9IGZhbHNlO1xuICAgICAgdGhpcy52aWV3ZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuaXNTaG93biA9IGZhbHNlO1xuICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgdGhpcy51bmJpbmQoKTtcbiAgICAgIGFkZENsYXNzKHZpZXdlciwgQ0xBU1NfSElERSk7XG4gICAgICB2aWV3ZXIucmVtb3ZlQXR0cmlidXRlKCdyb2xlJyk7XG4gICAgICB2aWV3ZXIucmVtb3ZlQXR0cmlidXRlKCdhcmlhLWxhYmVsbGVkYnknKTtcbiAgICAgIHZpZXdlci5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtbW9kYWwnKTtcbiAgICAgIHZpZXdlci5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgdHJ1ZSk7XG4gICAgICB0aGlzLnJlc2V0TGlzdCgpO1xuICAgICAgdGhpcy5yZXNldEltYWdlKCk7XG4gICAgICB0aGlzLmhpZGluZyA9IGZhbHNlO1xuXG4gICAgICBpZiAoIXRoaXMuZGVzdHJveWVkKSB7XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKG9wdGlvbnMuaGlkZGVuKSkge1xuICAgICAgICAgIGFkZExpc3RlbmVyKGVsZW1lbnQsIEVWRU5UX0hJRERFTiwgb3B0aW9ucy5oaWRkZW4sIHtcbiAgICAgICAgICAgIG9uY2U6IHRydWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRpc3BhdGNoRXZlbnQoZWxlbWVudCwgRVZFTlRfSElEREVOLCBudWxsLCB7XG4gICAgICAgICAgY2FuY2VsYWJsZTogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICByZXF1ZXN0RnVsbHNjcmVlbjogZnVuY3Rpb24gcmVxdWVzdEZ1bGxzY3JlZW4ob3B0aW9ucykge1xuICAgICAgdmFyIGRvY3VtZW50ID0gdGhpcy5lbGVtZW50Lm93bmVyRG9jdW1lbnQ7XG5cbiAgICAgIGlmICh0aGlzLmZ1bGxlZCAmJiAhKGRvY3VtZW50LmZ1bGxzY3JlZW5FbGVtZW50IHx8IGRvY3VtZW50LndlYmtpdEZ1bGxzY3JlZW5FbGVtZW50IHx8IGRvY3VtZW50Lm1vekZ1bGxTY3JlZW5FbGVtZW50IHx8IGRvY3VtZW50Lm1zRnVsbHNjcmVlbkVsZW1lbnQpKSB7XG4gICAgICAgIHZhciBkb2N1bWVudEVsZW1lbnQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7IC8vIEVsZW1lbnQucmVxdWVzdEZ1bGxzY3JlZW4oKVxuXG4gICAgICAgIGlmIChkb2N1bWVudEVsZW1lbnQucmVxdWVzdEZ1bGxzY3JlZW4pIHtcbiAgICAgICAgICAvLyBBdm9pZCBUeXBlRXJyb3Igd2hlbiBjb252ZXJ0IGBvcHRpb25zYCB0byBkaWN0aW9uYXJ5XG4gICAgICAgICAgaWYgKGlzUGxhaW5PYmplY3Qob3B0aW9ucykpIHtcbiAgICAgICAgICAgIGRvY3VtZW50RWxlbWVudC5yZXF1ZXN0RnVsbHNjcmVlbihvcHRpb25zKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZG9jdW1lbnRFbGVtZW50LnJlcXVlc3RGdWxsc2NyZWVuKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGRvY3VtZW50RWxlbWVudC53ZWJraXRSZXF1ZXN0RnVsbHNjcmVlbikge1xuICAgICAgICAgIGRvY3VtZW50RWxlbWVudC53ZWJraXRSZXF1ZXN0RnVsbHNjcmVlbihFbGVtZW50LkFMTE9XX0tFWUJPQVJEX0lOUFVUKTtcbiAgICAgICAgfSBlbHNlIGlmIChkb2N1bWVudEVsZW1lbnQubW96UmVxdWVzdEZ1bGxTY3JlZW4pIHtcbiAgICAgICAgICBkb2N1bWVudEVsZW1lbnQubW96UmVxdWVzdEZ1bGxTY3JlZW4oKTtcbiAgICAgICAgfSBlbHNlIGlmIChkb2N1bWVudEVsZW1lbnQubXNSZXF1ZXN0RnVsbHNjcmVlbikge1xuICAgICAgICAgIGRvY3VtZW50RWxlbWVudC5tc1JlcXVlc3RGdWxsc2NyZWVuKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGV4aXRGdWxsc2NyZWVuOiBmdW5jdGlvbiBleGl0RnVsbHNjcmVlbigpIHtcbiAgICAgIHZhciBkb2N1bWVudCA9IHRoaXMuZWxlbWVudC5vd25lckRvY3VtZW50O1xuXG4gICAgICBpZiAodGhpcy5mdWxsZWQgJiYgKGRvY3VtZW50LmZ1bGxzY3JlZW5FbGVtZW50IHx8IGRvY3VtZW50LndlYmtpdEZ1bGxzY3JlZW5FbGVtZW50IHx8IGRvY3VtZW50Lm1vekZ1bGxTY3JlZW5FbGVtZW50IHx8IGRvY3VtZW50Lm1zRnVsbHNjcmVlbkVsZW1lbnQpKSB7XG4gICAgICAgIC8vIERvY3VtZW50LmV4aXRGdWxsc2NyZWVuKClcbiAgICAgICAgaWYgKGRvY3VtZW50LmV4aXRGdWxsc2NyZWVuKSB7XG4gICAgICAgICAgZG9jdW1lbnQuZXhpdEZ1bGxzY3JlZW4oKTtcbiAgICAgICAgfSBlbHNlIGlmIChkb2N1bWVudC53ZWJraXRFeGl0RnVsbHNjcmVlbikge1xuICAgICAgICAgIGRvY3VtZW50LndlYmtpdEV4aXRGdWxsc2NyZWVuKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoZG9jdW1lbnQubW96Q2FuY2VsRnVsbFNjcmVlbikge1xuICAgICAgICAgIGRvY3VtZW50Lm1vekNhbmNlbEZ1bGxTY3JlZW4oKTtcbiAgICAgICAgfSBlbHNlIGlmIChkb2N1bWVudC5tc0V4aXRGdWxsc2NyZWVuKSB7XG4gICAgICAgICAgZG9jdW1lbnQubXNFeGl0RnVsbHNjcmVlbigpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBjaGFuZ2U6IGZ1bmN0aW9uIGNoYW5nZShldmVudCkge1xuICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMsXG4gICAgICAgICAgcG9pbnRlcnMgPSB0aGlzLnBvaW50ZXJzO1xuICAgICAgdmFyIHBvaW50ZXIgPSBwb2ludGVyc1tPYmplY3Qua2V5cyhwb2ludGVycylbMF1dOyAvLyBJbiB0aGUgY2FzZSBvZiB0aGUgYHBvaW50ZXJzYCBvYmplY3QgaXMgZW1wdHkgKCM0MjEpXG5cbiAgICAgIGlmICghcG9pbnRlcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBvZmZzZXRYID0gcG9pbnRlci5lbmRYIC0gcG9pbnRlci5zdGFydFg7XG4gICAgICB2YXIgb2Zmc2V0WSA9IHBvaW50ZXIuZW5kWSAtIHBvaW50ZXIuc3RhcnRZO1xuXG4gICAgICBzd2l0Y2ggKHRoaXMuYWN0aW9uKSB7XG4gICAgICAgIC8vIE1vdmUgdGhlIGN1cnJlbnQgaW1hZ2VcbiAgICAgICAgY2FzZSBBQ1RJT05fTU9WRTpcbiAgICAgICAgICB0aGlzLm1vdmUob2Zmc2V0WCwgb2Zmc2V0WSwgZXZlbnQpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICAvLyBab29tIHRoZSBjdXJyZW50IGltYWdlXG5cbiAgICAgICAgY2FzZSBBQ1RJT05fWk9PTTpcbiAgICAgICAgICB0aGlzLnpvb20oZ2V0TWF4Wm9vbVJhdGlvKHBvaW50ZXJzKSwgZmFsc2UsIGV2ZW50KTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIEFDVElPTl9TV0lUQ0g6XG4gICAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5hY3Rpb24gPSAnc3dpdGNoZWQnO1xuICAgICAgICAgICAgdmFyIGFic29sdXRlT2Zmc2V0WCA9IE1hdGguYWJzKG9mZnNldFgpO1xuXG4gICAgICAgICAgICBpZiAoYWJzb2x1dGVPZmZzZXRYID4gMSAmJiBhYnNvbHV0ZU9mZnNldFggPiBNYXRoLmFicyhvZmZzZXRZKSkge1xuICAgICAgICAgICAgICAvLyBFbXB0eSBgcG9pbnRlcnNgIGFzIGB0b3VjaGVuZGAgZXZlbnQgd2lsbCBub3QgYmUgZmlyZWQgYWZ0ZXIgc3dpcGVkIGluIGlPUyBicm93c2Vycy5cbiAgICAgICAgICAgICAgdGhpcy5wb2ludGVycyA9IHt9O1xuXG4gICAgICAgICAgICAgIGlmIChvZmZzZXRYID4gMSkge1xuICAgICAgICAgICAgICAgIHRoaXMucHJldihvcHRpb25zLmxvb3ApO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKG9mZnNldFggPCAtMSkge1xuICAgICAgICAgICAgICAgIHRoaXMubmV4dChvcHRpb25zLmxvb3ApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgIH0gLy8gT3ZlcnJpZGVcblxuXG4gICAgICBmb3JFYWNoKHBvaW50ZXJzLCBmdW5jdGlvbiAocCkge1xuICAgICAgICBwLnN0YXJ0WCA9IHAuZW5kWDtcbiAgICAgICAgcC5zdGFydFkgPSBwLmVuZFk7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGlzU3dpdGNoYWJsZTogZnVuY3Rpb24gaXNTd2l0Y2hhYmxlKCkge1xuICAgICAgdmFyIGltYWdlRGF0YSA9IHRoaXMuaW1hZ2VEYXRhLFxuICAgICAgICAgIHZpZXdlckRhdGEgPSB0aGlzLnZpZXdlckRhdGE7XG4gICAgICByZXR1cm4gdGhpcy5sZW5ndGggPiAxICYmIGltYWdlRGF0YS54ID49IDAgJiYgaW1hZ2VEYXRhLnkgPj0gMCAmJiBpbWFnZURhdGEud2lkdGggPD0gdmlld2VyRGF0YS53aWR0aCAmJiBpbWFnZURhdGEuaGVpZ2h0IDw9IHZpZXdlckRhdGEuaGVpZ2h0O1xuICAgIH1cbiAgfTtcblxuICB2YXIgQW5vdGhlclZpZXdlciA9IFdJTkRPVy5WaWV3ZXI7XG5cbiAgdmFyIGdldFVuaXF1ZUlEID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlkICs9IDE7XG4gICAgICByZXR1cm4gaWQ7XG4gICAgfTtcbiAgfSgtMSk7XG5cbiAgdmFyIFZpZXdlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IFZpZXdlci5cbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgLSBUaGUgdGFyZ2V0IGVsZW1lbnQgZm9yIHZpZXdpbmcuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSAtIFRoZSBjb25maWd1cmF0aW9uIG9wdGlvbnMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gVmlld2VyKGVsZW1lbnQpIHtcbiAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcblxuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFZpZXdlcik7XG5cbiAgICAgIGlmICghZWxlbWVudCB8fCBlbGVtZW50Lm5vZGVUeXBlICE9PSAxKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIGZpcnN0IGFyZ3VtZW50IGlzIHJlcXVpcmVkIGFuZCBtdXN0IGJlIGFuIGVsZW1lbnQuJyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICB0aGlzLm9wdGlvbnMgPSBhc3NpZ24oe30sIERFRkFVTFRTLCBpc1BsYWluT2JqZWN0KG9wdGlvbnMpICYmIG9wdGlvbnMpO1xuICAgICAgdGhpcy5hY3Rpb24gPSBmYWxzZTtcbiAgICAgIHRoaXMuZmFkaW5nID0gZmFsc2U7XG4gICAgICB0aGlzLmZ1bGxlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5oaWRpbmcgPSBmYWxzZTtcbiAgICAgIHRoaXMuaW1hZ2VDbGlja2VkID0gZmFsc2U7XG4gICAgICB0aGlzLmltYWdlRGF0YSA9IHt9O1xuICAgICAgdGhpcy5pbmRleCA9IHRoaXMub3B0aW9ucy5pbml0aWFsVmlld0luZGV4O1xuICAgICAgdGhpcy5pc0ltZyA9IGZhbHNlO1xuICAgICAgdGhpcy5pc1Nob3duID0gZmFsc2U7XG4gICAgICB0aGlzLmxlbmd0aCA9IDA7XG4gICAgICB0aGlzLm1vdmluZyA9IGZhbHNlO1xuICAgICAgdGhpcy5wbGF5ZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMucGxheWluZyA9IGZhbHNlO1xuICAgICAgdGhpcy5wb2ludGVycyA9IHt9O1xuICAgICAgdGhpcy5yZWFkeSA9IGZhbHNlO1xuICAgICAgdGhpcy5yb3RhdGluZyA9IGZhbHNlO1xuICAgICAgdGhpcy5zY2FsaW5nID0gZmFsc2U7XG4gICAgICB0aGlzLnNob3dpbmcgPSBmYWxzZTtcbiAgICAgIHRoaXMudGltZW91dCA9IGZhbHNlO1xuICAgICAgdGhpcy50b29sdGlwcGluZyA9IGZhbHNlO1xuICAgICAgdGhpcy52aWV3ZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMudmlld2luZyA9IGZhbHNlO1xuICAgICAgdGhpcy53aGVlbGluZyA9IGZhbHNlO1xuICAgICAgdGhpcy56b29taW5nID0gZmFsc2U7XG4gICAgICB0aGlzLmlkID0gZ2V0VW5pcXVlSUQoKTtcbiAgICAgIHRoaXMuaW5pdCgpO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhWaWV3ZXIsIFt7XG4gICAgICBrZXk6IFwiaW5pdFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgdmFyIGVsZW1lbnQgPSB0aGlzLmVsZW1lbnQsXG4gICAgICAgICAgICBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuXG4gICAgICAgIGlmIChlbGVtZW50W05BTUVTUEFDRV0pIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBlbGVtZW50W05BTUVTUEFDRV0gPSB0aGlzOyAvLyBUaGUgYGZvY3VzYCBvcHRpb24gcmVxdWlyZXMgdGhlIGBrZXlib2FyZGAgb3B0aW9uIHNldCB0byBgdHJ1ZWAuXG5cbiAgICAgICAgaWYgKG9wdGlvbnMuZm9jdXMgJiYgIW9wdGlvbnMua2V5Ym9hcmQpIHtcbiAgICAgICAgICBvcHRpb25zLmZvY3VzID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaXNJbWcgPSBlbGVtZW50LmxvY2FsTmFtZSA9PT0gJ2ltZyc7XG4gICAgICAgIHZhciBpbWFnZXMgPSBbXTtcbiAgICAgICAgZm9yRWFjaChpc0ltZyA/IFtlbGVtZW50XSA6IGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnaW1nJyksIGZ1bmN0aW9uIChpbWFnZSkge1xuICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKG9wdGlvbnMuZmlsdGVyKSkge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuZmlsdGVyLmNhbGwoX3RoaXMsIGltYWdlKSkge1xuICAgICAgICAgICAgICBpbWFnZXMucHVzaChpbWFnZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChfdGhpcy5nZXRJbWFnZVVSTChpbWFnZSkpIHtcbiAgICAgICAgICAgIGltYWdlcy5wdXNoKGltYWdlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmlzSW1nID0gaXNJbWc7XG4gICAgICAgIHRoaXMubGVuZ3RoID0gaW1hZ2VzLmxlbmd0aDtcbiAgICAgICAgdGhpcy5pbWFnZXMgPSBpbWFnZXM7XG4gICAgICAgIHRoaXMuaW5pdEJvZHkoKTsgLy8gT3ZlcnJpZGUgYHRyYW5zaXRpb25gIG9wdGlvbiBpZiBpdCBpcyBub3Qgc3VwcG9ydGVkXG5cbiAgICAgICAgaWYgKGlzVW5kZWZpbmVkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoTkFNRVNQQUNFKS5zdHlsZS50cmFuc2l0aW9uKSkge1xuICAgICAgICAgIG9wdGlvbnMudHJhbnNpdGlvbiA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuaW5saW5lKSB7XG4gICAgICAgICAgdmFyIGNvdW50ID0gMDtcblxuICAgICAgICAgIHZhciBwcm9ncmVzcyA9IGZ1bmN0aW9uIHByb2dyZXNzKCkge1xuICAgICAgICAgICAgY291bnQgKz0gMTtcblxuICAgICAgICAgICAgaWYgKGNvdW50ID09PSBfdGhpcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgdmFyIHRpbWVvdXQ7XG4gICAgICAgICAgICAgIF90aGlzLmluaXRpYWxpemluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICBfdGhpcy5kZWxheWluZyA9IHtcbiAgICAgICAgICAgICAgICBhYm9ydDogZnVuY3Rpb24gYWJvcnQoKSB7XG4gICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9OyAvLyBidWlsZCBhc3luY2hyb25vdXNseSB0byBrZWVwIGB0aGlzLnZpZXdlcmAgaXMgYWNjZXNzaWJsZSBpbiBgcmVhZHlgIGV2ZW50IGhhbmRsZXIuXG5cbiAgICAgICAgICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF90aGlzLmRlbGF5aW5nID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICBfdGhpcy5idWlsZCgpO1xuICAgICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgdGhpcy5pbml0aWFsaXppbmcgPSB7XG4gICAgICAgICAgICBhYm9ydDogZnVuY3Rpb24gYWJvcnQoKSB7XG4gICAgICAgICAgICAgIGZvckVhY2goaW1hZ2VzLCBmdW5jdGlvbiAoaW1hZ2UpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWltYWdlLmNvbXBsZXRlKSB7XG4gICAgICAgICAgICAgICAgICByZW1vdmVMaXN0ZW5lcihpbWFnZSwgRVZFTlRfTE9BRCwgcHJvZ3Jlc3MpO1xuICAgICAgICAgICAgICAgICAgcmVtb3ZlTGlzdGVuZXIoaW1hZ2UsIEVWRU5UX0VSUk9SLCBwcm9ncmVzcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICAgIGZvckVhY2goaW1hZ2VzLCBmdW5jdGlvbiAoaW1hZ2UpIHtcbiAgICAgICAgICAgIGlmIChpbWFnZS5jb21wbGV0ZSkge1xuICAgICAgICAgICAgICBwcm9ncmVzcygpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdmFyIG9uTG9hZDtcbiAgICAgICAgICAgICAgdmFyIG9uRXJyb3I7XG4gICAgICAgICAgICAgIGFkZExpc3RlbmVyKGltYWdlLCBFVkVOVF9MT0FELCBvbkxvYWQgPSBmdW5jdGlvbiBvbkxvYWQoKSB7XG4gICAgICAgICAgICAgICAgcmVtb3ZlTGlzdGVuZXIoaW1hZ2UsIEVWRU5UX0VSUk9SLCBvbkVycm9yKTtcbiAgICAgICAgICAgICAgICBwcm9ncmVzcygpO1xuICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgb25jZTogdHJ1ZVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgYWRkTGlzdGVuZXIoaW1hZ2UsIEVWRU5UX0VSUk9SLCBvbkVycm9yID0gZnVuY3Rpb24gb25FcnJvcigpIHtcbiAgICAgICAgICAgICAgICByZW1vdmVMaXN0ZW5lcihpbWFnZSwgRVZFTlRfTE9BRCwgb25Mb2FkKTtcbiAgICAgICAgICAgICAgICBwcm9ncmVzcygpO1xuICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgb25jZTogdHJ1ZVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhZGRMaXN0ZW5lcihlbGVtZW50LCBFVkVOVF9DTElDSywgdGhpcy5vblN0YXJ0ID0gZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgICAgICAgIHZhciB0YXJnZXQgPSBfcmVmLnRhcmdldDtcblxuICAgICAgICAgICAgaWYgKHRhcmdldC5sb2NhbE5hbWUgPT09ICdpbWcnICYmICghaXNGdW5jdGlvbihvcHRpb25zLmZpbHRlcikgfHwgb3B0aW9ucy5maWx0ZXIuY2FsbChfdGhpcywgdGFyZ2V0KSkpIHtcbiAgICAgICAgICAgICAgX3RoaXMudmlldyhfdGhpcy5pbWFnZXMuaW5kZXhPZih0YXJnZXQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJidWlsZFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGJ1aWxkKCkge1xuICAgICAgICBpZiAodGhpcy5yZWFkeSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBlbGVtZW50ID0gdGhpcy5lbGVtZW50LFxuICAgICAgICAgICAgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgdmFyIHBhcmVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTtcbiAgICAgICAgdmFyIHRlbXBsYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHRlbXBsYXRlLmlubmVySFRNTCA9IFRFTVBMQVRFO1xuICAgICAgICB2YXIgdmlld2VyID0gdGVtcGxhdGUucXVlcnlTZWxlY3RvcihcIi5cIi5jb25jYXQoTkFNRVNQQUNFLCBcIi1jb250YWluZXJcIikpO1xuICAgICAgICB2YXIgdGl0bGUgPSB2aWV3ZXIucXVlcnlTZWxlY3RvcihcIi5cIi5jb25jYXQoTkFNRVNQQUNFLCBcIi10aXRsZVwiKSk7XG4gICAgICAgIHZhciB0b29sYmFyID0gdmlld2VyLnF1ZXJ5U2VsZWN0b3IoXCIuXCIuY29uY2F0KE5BTUVTUEFDRSwgXCItdG9vbGJhclwiKSk7XG4gICAgICAgIHZhciBuYXZiYXIgPSB2aWV3ZXIucXVlcnlTZWxlY3RvcihcIi5cIi5jb25jYXQoTkFNRVNQQUNFLCBcIi1uYXZiYXJcIikpO1xuICAgICAgICB2YXIgYnV0dG9uID0gdmlld2VyLnF1ZXJ5U2VsZWN0b3IoXCIuXCIuY29uY2F0KE5BTUVTUEFDRSwgXCItYnV0dG9uXCIpKTtcbiAgICAgICAgdmFyIGNhbnZhcyA9IHZpZXdlci5xdWVyeVNlbGVjdG9yKFwiLlwiLmNvbmNhdChOQU1FU1BBQ0UsIFwiLWNhbnZhc1wiKSk7XG4gICAgICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICAgICAgICB0aGlzLnZpZXdlciA9IHZpZXdlcjtcbiAgICAgICAgdGhpcy50aXRsZSA9IHRpdGxlO1xuICAgICAgICB0aGlzLnRvb2xiYXIgPSB0b29sYmFyO1xuICAgICAgICB0aGlzLm5hdmJhciA9IG5hdmJhcjtcbiAgICAgICAgdGhpcy5idXR0b24gPSBidXR0b247XG4gICAgICAgIHRoaXMuY2FudmFzID0gY2FudmFzO1xuICAgICAgICB0aGlzLmZvb3RlciA9IHZpZXdlci5xdWVyeVNlbGVjdG9yKFwiLlwiLmNvbmNhdChOQU1FU1BBQ0UsIFwiLWZvb3RlclwiKSk7XG4gICAgICAgIHRoaXMudG9vbHRpcEJveCA9IHZpZXdlci5xdWVyeVNlbGVjdG9yKFwiLlwiLmNvbmNhdChOQU1FU1BBQ0UsIFwiLXRvb2x0aXBcIikpO1xuICAgICAgICB0aGlzLnBsYXllciA9IHZpZXdlci5xdWVyeVNlbGVjdG9yKFwiLlwiLmNvbmNhdChOQU1FU1BBQ0UsIFwiLXBsYXllclwiKSk7XG4gICAgICAgIHRoaXMubGlzdCA9IHZpZXdlci5xdWVyeVNlbGVjdG9yKFwiLlwiLmNvbmNhdChOQU1FU1BBQ0UsIFwiLWxpc3RcIikpO1xuICAgICAgICB2aWV3ZXIuaWQgPSBcIlwiLmNvbmNhdChOQU1FU1BBQ0UpLmNvbmNhdCh0aGlzLmlkKTtcbiAgICAgICAgdGl0bGUuaWQgPSBcIlwiLmNvbmNhdChOQU1FU1BBQ0UsIFwiVGl0bGVcIikuY29uY2F0KHRoaXMuaWQpO1xuICAgICAgICBhZGRDbGFzcyh0aXRsZSwgIW9wdGlvbnMudGl0bGUgPyBDTEFTU19ISURFIDogZ2V0UmVzcG9uc2l2ZUNsYXNzKEFycmF5LmlzQXJyYXkob3B0aW9ucy50aXRsZSkgPyBvcHRpb25zLnRpdGxlWzBdIDogb3B0aW9ucy50aXRsZSkpO1xuICAgICAgICBhZGRDbGFzcyhuYXZiYXIsICFvcHRpb25zLm5hdmJhciA/IENMQVNTX0hJREUgOiBnZXRSZXNwb25zaXZlQ2xhc3Mob3B0aW9ucy5uYXZiYXIpKTtcbiAgICAgICAgdG9nZ2xlQ2xhc3MoYnV0dG9uLCBDTEFTU19ISURFLCAhb3B0aW9ucy5idXR0b24pO1xuXG4gICAgICAgIGlmIChvcHRpb25zLmtleWJvYXJkKSB7XG4gICAgICAgICAgYnV0dG9uLnNldEF0dHJpYnV0ZSgndGFiaW5kZXgnLCAwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLmJhY2tkcm9wKSB7XG4gICAgICAgICAgYWRkQ2xhc3Modmlld2VyLCBcIlwiLmNvbmNhdChOQU1FU1BBQ0UsIFwiLWJhY2tkcm9wXCIpKTtcblxuICAgICAgICAgIGlmICghb3B0aW9ucy5pbmxpbmUgJiYgb3B0aW9ucy5iYWNrZHJvcCAhPT0gJ3N0YXRpYycpIHtcbiAgICAgICAgICAgIHNldERhdGEoY2FudmFzLCBEQVRBX0FDVElPTiwgJ2hpZGUnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNTdHJpbmcob3B0aW9ucy5jbGFzc05hbWUpICYmIG9wdGlvbnMuY2xhc3NOYW1lKSB7XG4gICAgICAgICAgLy8gSW4gY2FzZSB0aGVyZSBhcmUgbXVsdGlwbGUgY2xhc3MgbmFtZXNcbiAgICAgICAgICBvcHRpb25zLmNsYXNzTmFtZS5zcGxpdChSRUdFWFBfU1BBQ0VTKS5mb3JFYWNoKGZ1bmN0aW9uIChjbGFzc05hbWUpIHtcbiAgICAgICAgICAgIGFkZENsYXNzKHZpZXdlciwgY2xhc3NOYW1lKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLnRvb2xiYXIpIHtcbiAgICAgICAgICB2YXIgbGlzdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3VsJyk7XG4gICAgICAgICAgdmFyIGN1c3RvbSA9IGlzUGxhaW5PYmplY3Qob3B0aW9ucy50b29sYmFyKTtcbiAgICAgICAgICB2YXIgem9vbUJ1dHRvbnMgPSBCVVRUT05TLnNsaWNlKDAsIDMpO1xuICAgICAgICAgIHZhciByb3RhdGVCdXR0b25zID0gQlVUVE9OUy5zbGljZSg3LCA5KTtcbiAgICAgICAgICB2YXIgc2NhbGVCdXR0b25zID0gQlVUVE9OUy5zbGljZSg5KTtcblxuICAgICAgICAgIGlmICghY3VzdG9tKSB7XG4gICAgICAgICAgICBhZGRDbGFzcyh0b29sYmFyLCBnZXRSZXNwb25zaXZlQ2xhc3Mob3B0aW9ucy50b29sYmFyKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZm9yRWFjaChjdXN0b20gPyBvcHRpb25zLnRvb2xiYXIgOiBCVVRUT05TLCBmdW5jdGlvbiAodmFsdWUsIGluZGV4KSB7XG4gICAgICAgICAgICB2YXIgZGVlcCA9IGN1c3RvbSAmJiBpc1BsYWluT2JqZWN0KHZhbHVlKTtcbiAgICAgICAgICAgIHZhciBuYW1lID0gY3VzdG9tID8gaHlwaGVuYXRlKGluZGV4KSA6IHZhbHVlO1xuICAgICAgICAgICAgdmFyIHNob3cgPSBkZWVwICYmICFpc1VuZGVmaW5lZCh2YWx1ZS5zaG93KSA/IHZhbHVlLnNob3cgOiB2YWx1ZTtcblxuICAgICAgICAgICAgaWYgKCFzaG93IHx8ICFvcHRpb25zLnpvb21hYmxlICYmIHpvb21CdXR0b25zLmluZGV4T2YobmFtZSkgIT09IC0xIHx8ICFvcHRpb25zLnJvdGF0YWJsZSAmJiByb3RhdGVCdXR0b25zLmluZGV4T2YobmFtZSkgIT09IC0xIHx8ICFvcHRpb25zLnNjYWxhYmxlICYmIHNjYWxlQnV0dG9ucy5pbmRleE9mKG5hbWUpICE9PSAtMSkge1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBzaXplID0gZGVlcCAmJiAhaXNVbmRlZmluZWQodmFsdWUuc2l6ZSkgPyB2YWx1ZS5zaXplIDogdmFsdWU7XG4gICAgICAgICAgICB2YXIgY2xpY2sgPSBkZWVwICYmICFpc1VuZGVmaW5lZCh2YWx1ZS5jbGljaykgPyB2YWx1ZS5jbGljayA6IHZhbHVlO1xuICAgICAgICAgICAgdmFyIGl0ZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpO1xuXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5rZXlib2FyZCkge1xuICAgICAgICAgICAgICBpdGVtLnNldEF0dHJpYnV0ZSgndGFiaW5kZXgnLCAwKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaXRlbS5zZXRBdHRyaWJ1dGUoJ3JvbGUnLCAnYnV0dG9uJyk7XG4gICAgICAgICAgICBhZGRDbGFzcyhpdGVtLCBcIlwiLmNvbmNhdChOQU1FU1BBQ0UsIFwiLVwiKS5jb25jYXQobmFtZSkpO1xuXG4gICAgICAgICAgICBpZiAoIWlzRnVuY3Rpb24oY2xpY2spKSB7XG4gICAgICAgICAgICAgIHNldERhdGEoaXRlbSwgREFUQV9BQ1RJT04sIG5hbWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoaXNOdW1iZXIoc2hvdykpIHtcbiAgICAgICAgICAgICAgYWRkQ2xhc3MoaXRlbSwgZ2V0UmVzcG9uc2l2ZUNsYXNzKHNob3cpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKFsnc21hbGwnLCAnbGFyZ2UnXS5pbmRleE9mKHNpemUpICE9PSAtMSkge1xuICAgICAgICAgICAgICBhZGRDbGFzcyhpdGVtLCBcIlwiLmNvbmNhdChOQU1FU1BBQ0UsIFwiLVwiKS5jb25jYXQoc2l6ZSkpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChuYW1lID09PSAncGxheScpIHtcbiAgICAgICAgICAgICAgYWRkQ2xhc3MoaXRlbSwgXCJcIi5jb25jYXQoTkFNRVNQQUNFLCBcIi1sYXJnZVwiKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKGNsaWNrKSkge1xuICAgICAgICAgICAgICBhZGRMaXN0ZW5lcihpdGVtLCBFVkVOVF9DTElDSywgY2xpY2spO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsaXN0LmFwcGVuZENoaWxkKGl0ZW0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHRvb2xiYXIuYXBwZW5kQ2hpbGQobGlzdCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYWRkQ2xhc3ModG9vbGJhciwgQ0xBU1NfSElERSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIW9wdGlvbnMucm90YXRhYmxlKSB7XG4gICAgICAgICAgdmFyIHJvdGF0ZXMgPSB0b29sYmFyLnF1ZXJ5U2VsZWN0b3JBbGwoJ2xpW2NsYXNzKj1cInJvdGF0ZVwiXScpO1xuICAgICAgICAgIGFkZENsYXNzKHJvdGF0ZXMsIENMQVNTX0lOVklTSUJMRSk7XG4gICAgICAgICAgZm9yRWFjaChyb3RhdGVzLCBmdW5jdGlvbiAocm90YXRlKSB7XG4gICAgICAgICAgICB0b29sYmFyLmFwcGVuZENoaWxkKHJvdGF0ZSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucy5pbmxpbmUpIHtcbiAgICAgICAgICBhZGRDbGFzcyhidXR0b24sIENMQVNTX0ZVTExTQ1JFRU4pO1xuICAgICAgICAgIHNldFN0eWxlKHZpZXdlciwge1xuICAgICAgICAgICAgekluZGV4OiBvcHRpb25zLnpJbmRleElubGluZVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaWYgKHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHBhcmVudCkucG9zaXRpb24gPT09ICdzdGF0aWMnKSB7XG4gICAgICAgICAgICBzZXRTdHlsZShwYXJlbnQsIHtcbiAgICAgICAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUodmlld2VyLCBlbGVtZW50Lm5leHRTaWJsaW5nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhZGRDbGFzcyhidXR0b24sIENMQVNTX0NMT1NFKTtcbiAgICAgICAgICBhZGRDbGFzcyh2aWV3ZXIsIENMQVNTX0ZJWEVEKTtcbiAgICAgICAgICBhZGRDbGFzcyh2aWV3ZXIsIENMQVNTX0ZBREUpO1xuICAgICAgICAgIGFkZENsYXNzKHZpZXdlciwgQ0xBU1NfSElERSk7XG4gICAgICAgICAgc2V0U3R5bGUodmlld2VyLCB7XG4gICAgICAgICAgICB6SW5kZXg6IG9wdGlvbnMuekluZGV4XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdmFyIGNvbnRhaW5lciA9IG9wdGlvbnMuY29udGFpbmVyO1xuXG4gICAgICAgICAgaWYgKGlzU3RyaW5nKGNvbnRhaW5lcikpIHtcbiAgICAgICAgICAgIGNvbnRhaW5lciA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5xdWVyeVNlbGVjdG9yKGNvbnRhaW5lcik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCFjb250YWluZXIpIHtcbiAgICAgICAgICAgIGNvbnRhaW5lciA9IHRoaXMuYm9keTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQodmlld2VyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLmlubGluZSkge1xuICAgICAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgICAgICAgdGhpcy5iaW5kKCk7XG4gICAgICAgICAgdGhpcy5pc1Nob3duID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucmVhZHkgPSB0cnVlO1xuXG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKG9wdGlvbnMucmVhZHkpKSB7XG4gICAgICAgICAgYWRkTGlzdGVuZXIoZWxlbWVudCwgRVZFTlRfUkVBRFksIG9wdGlvbnMucmVhZHksIHtcbiAgICAgICAgICAgIG9uY2U6IHRydWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkaXNwYXRjaEV2ZW50KGVsZW1lbnQsIEVWRU5UX1JFQURZKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICB0aGlzLnJlYWR5ID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMucmVhZHkgJiYgb3B0aW9ucy5pbmxpbmUpIHtcbiAgICAgICAgICB0aGlzLnZpZXcodGhpcy5pbmRleCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8qKlxuICAgICAgICogR2V0IHRoZSBubyBjb25mbGljdCB2aWV3ZXIgY2xhc3MuXG4gICAgICAgKiBAcmV0dXJucyB7Vmlld2VyfSBUaGUgdmlld2VyIGNsYXNzLlxuICAgICAgICovXG5cbiAgICB9XSwgW3tcbiAgICAgIGtleTogXCJub0NvbmZsaWN0XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gbm9Db25mbGljdCgpIHtcbiAgICAgICAgd2luZG93LlZpZXdlciA9IEFub3RoZXJWaWV3ZXI7XG4gICAgICAgIHJldHVybiBWaWV3ZXI7XG4gICAgICB9XG4gICAgICAvKipcbiAgICAgICAqIENoYW5nZSB0aGUgZGVmYXVsdCBvcHRpb25zLlxuICAgICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBUaGUgbmV3IGRlZmF1bHQgb3B0aW9ucy5cbiAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAga2V5OiBcInNldERlZmF1bHRzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0RGVmYXVsdHMob3B0aW9ucykge1xuICAgICAgICBhc3NpZ24oREVGQVVMVFMsIGlzUGxhaW5PYmplY3Qob3B0aW9ucykgJiYgb3B0aW9ucyk7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIFZpZXdlcjtcbiAgfSgpO1xuXG4gIGFzc2lnbihWaWV3ZXIucHJvdG90eXBlLCByZW5kZXIsIGV2ZW50cywgaGFuZGxlcnMsIG1ldGhvZHMsIG90aGVycyk7XG5cbiAgcmV0dXJuIFZpZXdlcjtcblxufSkpO1xuIiwiZnVuY3Rpb24gbm9uZSgpIHt9XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gIHJldHVybiBzZWxlY3RvciA9PSBudWxsID8gbm9uZSA6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpO1xuICB9O1xufVxuIiwiLy8gR2l2ZW4gc29tZXRoaW5nIGFycmF5IGxpa2UgKG9yIG51bGwpLCByZXR1cm5zIHNvbWV0aGluZyB0aGF0IGlzIHN0cmljdGx5IGFuXG4vLyBhcnJheS4gVGhpcyBpcyB1c2VkIHRvIGVuc3VyZSB0aGF0IGFycmF5LWxpa2Ugb2JqZWN0cyBwYXNzZWQgdG8gZDMuc2VsZWN0QWxsXG4vLyBvciBzZWxlY3Rpb24uc2VsZWN0QWxsIGFyZSBjb252ZXJ0ZWQgaW50byBwcm9wZXIgYXJyYXlzIHdoZW4gY3JlYXRpbmcgYVxuLy8gc2VsZWN0aW9uOyB3ZSBkb27igJl0IGV2ZXIgd2FudCB0byBjcmVhdGUgYSBzZWxlY3Rpb24gYmFja2VkIGJ5IGEgbGl2ZVxuLy8gSFRNTENvbGxlY3Rpb24gb3IgTm9kZUxpc3QuIEhvd2V2ZXIsIG5vdGUgdGhhdCBzZWxlY3Rpb24uc2VsZWN0QWxsIHdpbGwgdXNlIGFcbi8vIHN0YXRpYyBOb2RlTGlzdCBhcyBhIGdyb3VwLCBzaW5jZSBpdCBzYWZlbHkgZGVyaXZlZCBmcm9tIHF1ZXJ5U2VsZWN0b3JBbGwuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhcnJheSh4KSB7XG4gIHJldHVybiB4ID09IG51bGwgPyBbXSA6IEFycmF5LmlzQXJyYXkoeCkgPyB4IDogQXJyYXkuZnJvbSh4KTtcbn1cbiIsImZ1bmN0aW9uIGVtcHR5KCkge1xuICByZXR1cm4gW107XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gIHJldHVybiBzZWxlY3RvciA9PSBudWxsID8gZW1wdHkgOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5tYXRjaGVzKHNlbGVjdG9yKTtcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNoaWxkTWF0Y2hlcihzZWxlY3Rvcikge1xuICByZXR1cm4gZnVuY3Rpb24obm9kZSkge1xuICAgIHJldHVybiBub2RlLm1hdGNoZXMoc2VsZWN0b3IpO1xuICB9O1xufVxuXG4iLCJpbXBvcnQge2NoaWxkTWF0Y2hlcn0gZnJvbSBcIi4uL21hdGNoZXIuanNcIjtcblxudmFyIGZpbmQgPSBBcnJheS5wcm90b3R5cGUuZmluZDtcblxuZnVuY3Rpb24gY2hpbGRGaW5kKG1hdGNoKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZmluZC5jYWxsKHRoaXMuY2hpbGRyZW4sIG1hdGNoKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY2hpbGRGaXJzdCgpIHtcbiAgcmV0dXJuIHRoaXMuZmlyc3RFbGVtZW50Q2hpbGQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG1hdGNoKSB7XG4gIHJldHVybiB0aGlzLnNlbGVjdChtYXRjaCA9PSBudWxsID8gY2hpbGRGaXJzdFxuICAgICAgOiBjaGlsZEZpbmQodHlwZW9mIG1hdGNoID09PSBcImZ1bmN0aW9uXCIgPyBtYXRjaCA6IGNoaWxkTWF0Y2hlcihtYXRjaCkpKTtcbn1cbiIsImltcG9ydCB7Y2hpbGRNYXRjaGVyfSBmcm9tIFwiLi4vbWF0Y2hlci5qc1wiO1xuXG52YXIgZmlsdGVyID0gQXJyYXkucHJvdG90eXBlLmZpbHRlcjtcblxuZnVuY3Rpb24gY2hpbGRyZW4oKSB7XG4gIHJldHVybiBBcnJheS5mcm9tKHRoaXMuY2hpbGRyZW4pO1xufVxuXG5mdW5jdGlvbiBjaGlsZHJlbkZpbHRlcihtYXRjaCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGZpbHRlci5jYWxsKHRoaXMuY2hpbGRyZW4sIG1hdGNoKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obWF0Y2gpIHtcbiAgcmV0dXJuIHRoaXMuc2VsZWN0QWxsKG1hdGNoID09IG51bGwgPyBjaGlsZHJlblxuICAgICAgOiBjaGlsZHJlbkZpbHRlcih0eXBlb2YgbWF0Y2ggPT09IFwiZnVuY3Rpb25cIiA/IG1hdGNoIDogY2hpbGRNYXRjaGVyKG1hdGNoKSkpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odXBkYXRlKSB7XG4gIHJldHVybiBuZXcgQXJyYXkodXBkYXRlLmxlbmd0aCk7XG59XG4iLCJpbXBvcnQgc3BhcnNlIGZyb20gXCIuL3NwYXJzZS5qc1wiO1xuaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFNlbGVjdGlvbih0aGlzLl9lbnRlciB8fCB0aGlzLl9ncm91cHMubWFwKHNwYXJzZSksIHRoaXMuX3BhcmVudHMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gRW50ZXJOb2RlKHBhcmVudCwgZGF0dW0pIHtcbiAgdGhpcy5vd25lckRvY3VtZW50ID0gcGFyZW50Lm93bmVyRG9jdW1lbnQ7XG4gIHRoaXMubmFtZXNwYWNlVVJJID0gcGFyZW50Lm5hbWVzcGFjZVVSSTtcbiAgdGhpcy5fbmV4dCA9IG51bGw7XG4gIHRoaXMuX3BhcmVudCA9IHBhcmVudDtcbiAgdGhpcy5fX2RhdGFfXyA9IGRhdHVtO1xufVxuXG5FbnRlck5vZGUucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogRW50ZXJOb2RlLFxuICBhcHBlbmRDaGlsZDogZnVuY3Rpb24oY2hpbGQpIHsgcmV0dXJuIHRoaXMuX3BhcmVudC5pbnNlcnRCZWZvcmUoY2hpbGQsIHRoaXMuX25leHQpOyB9LFxuICBpbnNlcnRCZWZvcmU6IGZ1bmN0aW9uKGNoaWxkLCBuZXh0KSB7IHJldHVybiB0aGlzLl9wYXJlbnQuaW5zZXJ0QmVmb3JlKGNoaWxkLCBuZXh0KTsgfSxcbiAgcXVlcnlTZWxlY3RvcjogZnVuY3Rpb24oc2VsZWN0b3IpIHsgcmV0dXJuIHRoaXMuX3BhcmVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTsgfSxcbiAgcXVlcnlTZWxlY3RvckFsbDogZnVuY3Rpb24oc2VsZWN0b3IpIHsgcmV0dXJuIHRoaXMuX3BhcmVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTsgfVxufTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufVxuIiwiaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4LmpzXCI7XG5pbXBvcnQge0VudGVyTm9kZX0gZnJvbSBcIi4vZW50ZXIuanNcIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi4vY29uc3RhbnQuanNcIjtcblxuZnVuY3Rpb24gYmluZEluZGV4KHBhcmVudCwgZ3JvdXAsIGVudGVyLCB1cGRhdGUsIGV4aXQsIGRhdGEpIHtcbiAgdmFyIGkgPSAwLFxuICAgICAgbm9kZSxcbiAgICAgIGdyb3VwTGVuZ3RoID0gZ3JvdXAubGVuZ3RoLFxuICAgICAgZGF0YUxlbmd0aCA9IGRhdGEubGVuZ3RoO1xuXG4gIC8vIFB1dCBhbnkgbm9uLW51bGwgbm9kZXMgdGhhdCBmaXQgaW50byB1cGRhdGUuXG4gIC8vIFB1dCBhbnkgbnVsbCBub2RlcyBpbnRvIGVudGVyLlxuICAvLyBQdXQgYW55IHJlbWFpbmluZyBkYXRhIGludG8gZW50ZXIuXG4gIGZvciAoOyBpIDwgZGF0YUxlbmd0aDsgKytpKSB7XG4gICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgbm9kZS5fX2RhdGFfXyA9IGRhdGFbaV07XG4gICAgICB1cGRhdGVbaV0gPSBub2RlO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbnRlcltpXSA9IG5ldyBFbnRlck5vZGUocGFyZW50LCBkYXRhW2ldKTtcbiAgICB9XG4gIH1cblxuICAvLyBQdXQgYW55IG5vbi1udWxsIG5vZGVzIHRoYXQgZG9u4oCZdCBmaXQgaW50byBleGl0LlxuICBmb3IgKDsgaSA8IGdyb3VwTGVuZ3RoOyArK2kpIHtcbiAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICBleGl0W2ldID0gbm9kZTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYmluZEtleShwYXJlbnQsIGdyb3VwLCBlbnRlciwgdXBkYXRlLCBleGl0LCBkYXRhLCBrZXkpIHtcbiAgdmFyIGksXG4gICAgICBub2RlLFxuICAgICAgbm9kZUJ5S2V5VmFsdWUgPSBuZXcgTWFwLFxuICAgICAgZ3JvdXBMZW5ndGggPSBncm91cC5sZW5ndGgsXG4gICAgICBkYXRhTGVuZ3RoID0gZGF0YS5sZW5ndGgsXG4gICAgICBrZXlWYWx1ZXMgPSBuZXcgQXJyYXkoZ3JvdXBMZW5ndGgpLFxuICAgICAga2V5VmFsdWU7XG5cbiAgLy8gQ29tcHV0ZSB0aGUga2V5IGZvciBlYWNoIG5vZGUuXG4gIC8vIElmIG11bHRpcGxlIG5vZGVzIGhhdmUgdGhlIHNhbWUga2V5LCB0aGUgZHVwbGljYXRlcyBhcmUgYWRkZWQgdG8gZXhpdC5cbiAgZm9yIChpID0gMDsgaSA8IGdyb3VwTGVuZ3RoOyArK2kpIHtcbiAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICBrZXlWYWx1ZXNbaV0gPSBrZXlWYWx1ZSA9IGtleS5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSArIFwiXCI7XG4gICAgICBpZiAobm9kZUJ5S2V5VmFsdWUuaGFzKGtleVZhbHVlKSkge1xuICAgICAgICBleGl0W2ldID0gbm9kZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGVCeUtleVZhbHVlLnNldChrZXlWYWx1ZSwgbm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gQ29tcHV0ZSB0aGUga2V5IGZvciBlYWNoIGRhdHVtLlxuICAvLyBJZiB0aGVyZSBhIG5vZGUgYXNzb2NpYXRlZCB3aXRoIHRoaXMga2V5LCBqb2luIGFuZCBhZGQgaXQgdG8gdXBkYXRlLlxuICAvLyBJZiB0aGVyZSBpcyBub3QgKG9yIHRoZSBrZXkgaXMgYSBkdXBsaWNhdGUpLCBhZGQgaXQgdG8gZW50ZXIuXG4gIGZvciAoaSA9IDA7IGkgPCBkYXRhTGVuZ3RoOyArK2kpIHtcbiAgICBrZXlWYWx1ZSA9IGtleS5jYWxsKHBhcmVudCwgZGF0YVtpXSwgaSwgZGF0YSkgKyBcIlwiO1xuICAgIGlmIChub2RlID0gbm9kZUJ5S2V5VmFsdWUuZ2V0KGtleVZhbHVlKSkge1xuICAgICAgdXBkYXRlW2ldID0gbm9kZTtcbiAgICAgIG5vZGUuX19kYXRhX18gPSBkYXRhW2ldO1xuICAgICAgbm9kZUJ5S2V5VmFsdWUuZGVsZXRlKGtleVZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZW50ZXJbaV0gPSBuZXcgRW50ZXJOb2RlKHBhcmVudCwgZGF0YVtpXSk7XG4gICAgfVxuICB9XG5cbiAgLy8gQWRkIGFueSByZW1haW5pbmcgbm9kZXMgdGhhdCB3ZXJlIG5vdCBib3VuZCB0byBkYXRhIHRvIGV4aXQuXG4gIGZvciAoaSA9IDA7IGkgPCBncm91cExlbmd0aDsgKytpKSB7XG4gICAgaWYgKChub2RlID0gZ3JvdXBbaV0pICYmIChub2RlQnlLZXlWYWx1ZS5nZXQoa2V5VmFsdWVzW2ldKSA9PT0gbm9kZSkpIHtcbiAgICAgIGV4aXRbaV0gPSBub2RlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBkYXR1bShub2RlKSB7XG4gIHJldHVybiBub2RlLl9fZGF0YV9fO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIEFycmF5LmZyb20odGhpcywgZGF0dW0pO1xuXG4gIHZhciBiaW5kID0ga2V5ID8gYmluZEtleSA6IGJpbmRJbmRleCxcbiAgICAgIHBhcmVudHMgPSB0aGlzLl9wYXJlbnRzLFxuICAgICAgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzO1xuXG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdmFsdWUgPSBjb25zdGFudCh2YWx1ZSk7XG5cbiAgZm9yICh2YXIgbSA9IGdyb3Vwcy5sZW5ndGgsIHVwZGF0ZSA9IG5ldyBBcnJheShtKSwgZW50ZXIgPSBuZXcgQXJyYXkobSksIGV4aXQgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgdmFyIHBhcmVudCA9IHBhcmVudHNbal0sXG4gICAgICAgIGdyb3VwID0gZ3JvdXBzW2pdLFxuICAgICAgICBncm91cExlbmd0aCA9IGdyb3VwLmxlbmd0aCxcbiAgICAgICAgZGF0YSA9IGFycmF5bGlrZSh2YWx1ZS5jYWxsKHBhcmVudCwgcGFyZW50ICYmIHBhcmVudC5fX2RhdGFfXywgaiwgcGFyZW50cykpLFxuICAgICAgICBkYXRhTGVuZ3RoID0gZGF0YS5sZW5ndGgsXG4gICAgICAgIGVudGVyR3JvdXAgPSBlbnRlcltqXSA9IG5ldyBBcnJheShkYXRhTGVuZ3RoKSxcbiAgICAgICAgdXBkYXRlR3JvdXAgPSB1cGRhdGVbal0gPSBuZXcgQXJyYXkoZGF0YUxlbmd0aCksXG4gICAgICAgIGV4aXRHcm91cCA9IGV4aXRbal0gPSBuZXcgQXJyYXkoZ3JvdXBMZW5ndGgpO1xuXG4gICAgYmluZChwYXJlbnQsIGdyb3VwLCBlbnRlckdyb3VwLCB1cGRhdGVHcm91cCwgZXhpdEdyb3VwLCBkYXRhLCBrZXkpO1xuXG4gICAgLy8gTm93IGNvbm5lY3QgdGhlIGVudGVyIG5vZGVzIHRvIHRoZWlyIGZvbGxvd2luZyB1cGRhdGUgbm9kZSwgc3VjaCB0aGF0XG4gICAgLy8gYXBwZW5kQ2hpbGQgY2FuIGluc2VydCB0aGUgbWF0ZXJpYWxpemVkIGVudGVyIG5vZGUgYmVmb3JlIHRoaXMgbm9kZSxcbiAgICAvLyByYXRoZXIgdGhhbiBhdCB0aGUgZW5kIG9mIHRoZSBwYXJlbnQgbm9kZS5cbiAgICBmb3IgKHZhciBpMCA9IDAsIGkxID0gMCwgcHJldmlvdXMsIG5leHQ7IGkwIDwgZGF0YUxlbmd0aDsgKytpMCkge1xuICAgICAgaWYgKHByZXZpb3VzID0gZW50ZXJHcm91cFtpMF0pIHtcbiAgICAgICAgaWYgKGkwID49IGkxKSBpMSA9IGkwICsgMTtcbiAgICAgICAgd2hpbGUgKCEobmV4dCA9IHVwZGF0ZUdyb3VwW2kxXSkgJiYgKytpMSA8IGRhdGFMZW5ndGgpO1xuICAgICAgICBwcmV2aW91cy5fbmV4dCA9IG5leHQgfHwgbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB1cGRhdGUgPSBuZXcgU2VsZWN0aW9uKHVwZGF0ZSwgcGFyZW50cyk7XG4gIHVwZGF0ZS5fZW50ZXIgPSBlbnRlcjtcbiAgdXBkYXRlLl9leGl0ID0gZXhpdDtcbiAgcmV0dXJuIHVwZGF0ZTtcbn1cblxuLy8gR2l2ZW4gc29tZSBkYXRhLCB0aGlzIHJldHVybnMgYW4gYXJyYXktbGlrZSB2aWV3IG9mIGl0OiBhbiBvYmplY3QgdGhhdFxuLy8gZXhwb3NlcyBhIGxlbmd0aCBwcm9wZXJ0eSBhbmQgYWxsb3dzIG51bWVyaWMgaW5kZXhpbmcuIE5vdGUgdGhhdCB1bmxpa2Vcbi8vIHNlbGVjdEFsbCwgdGhpcyBpc27igJl0IHdvcnJpZWQgYWJvdXQg4oCcbGl2ZeKAnSBjb2xsZWN0aW9ucyBiZWNhdXNlIHRoZSByZXN1bHRpbmdcbi8vIGFycmF5IHdpbGwgb25seSBiZSB1c2VkIGJyaWVmbHkgd2hpbGUgZGF0YSBpcyBiZWluZyBib3VuZC4gKEl0IGlzIHBvc3NpYmxlIHRvXG4vLyBjYXVzZSB0aGUgZGF0YSB0byBjaGFuZ2Ugd2hpbGUgaXRlcmF0aW5nIGJ5IHVzaW5nIGEga2V5IGZ1bmN0aW9uLCBidXQgcGxlYXNlXG4vLyBkb27igJl0OyB3ZeKAmWQgcmF0aGVyIGF2b2lkIGEgZ3JhdHVpdG91cyBjb3B5LilcbmZ1bmN0aW9uIGFycmF5bGlrZShkYXRhKSB7XG4gIHJldHVybiB0eXBlb2YgZGF0YSA9PT0gXCJvYmplY3RcIiAmJiBcImxlbmd0aFwiIGluIGRhdGFcbiAgICA/IGRhdGEgLy8gQXJyYXksIFR5cGVkQXJyYXksIE5vZGVMaXN0LCBhcnJheS1saWtlXG4gICAgOiBBcnJheS5mcm9tKGRhdGEpOyAvLyBNYXAsIFNldCwgaXRlcmFibGUsIHN0cmluZywgb3IgYW55dGhpbmcgZWxzZVxufVxuIiwiaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNvbXBhcmUpIHtcbiAgaWYgKCFjb21wYXJlKSBjb21wYXJlID0gYXNjZW5kaW5nO1xuXG4gIGZ1bmN0aW9uIGNvbXBhcmVOb2RlKGEsIGIpIHtcbiAgICByZXR1cm4gYSAmJiBiID8gY29tcGFyZShhLl9fZGF0YV9fLCBiLl9fZGF0YV9fKSA6ICFhIC0gIWI7XG4gIH1cblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzb3J0Z3JvdXBzID0gbmV3IEFycmF5KG0pLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBzb3J0Z3JvdXAgPSBzb3J0Z3JvdXBzW2pdID0gbmV3IEFycmF5KG4pLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICBzb3J0Z3JvdXBbaV0gPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgICBzb3J0Z3JvdXAuc29ydChjb21wYXJlTm9kZSk7XG4gIH1cblxuICByZXR1cm4gbmV3IFNlbGVjdGlvbihzb3J0Z3JvdXBzLCB0aGlzLl9wYXJlbnRzKS5vcmRlcigpO1xufVxuXG5mdW5jdGlvbiBhc2NlbmRpbmcoYSwgYikge1xuICByZXR1cm4gYSA8IGIgPyAtMSA6IGEgPiBiID8gMSA6IGEgPj0gYiA/IDAgOiBOYU47XG59XG4iLCJleHBvcnQgdmFyIHhodG1sID0gXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgc3ZnOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsXG4gIHhodG1sOiB4aHRtbCxcbiAgeGxpbms6IFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLFxuICB4bWw6IFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIsXG4gIHhtbG5zOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAveG1sbnMvXCJcbn07XG4iLCJpbXBvcnQgbmFtZXNwYWNlcyBmcm9tIFwiLi9uYW1lc3BhY2VzLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUpIHtcbiAgdmFyIHByZWZpeCA9IG5hbWUgKz0gXCJcIiwgaSA9IHByZWZpeC5pbmRleE9mKFwiOlwiKTtcbiAgaWYgKGkgPj0gMCAmJiAocHJlZml4ID0gbmFtZS5zbGljZSgwLCBpKSkgIT09IFwieG1sbnNcIikgbmFtZSA9IG5hbWUuc2xpY2UoaSArIDEpO1xuICByZXR1cm4gbmFtZXNwYWNlcy5oYXNPd25Qcm9wZXJ0eShwcmVmaXgpID8ge3NwYWNlOiBuYW1lc3BhY2VzW3ByZWZpeF0sIGxvY2FsOiBuYW1lfSA6IG5hbWU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG59XG4iLCJpbXBvcnQgbmFtZXNwYWNlIGZyb20gXCIuLi9uYW1lc3BhY2UuanNcIjtcblxuZnVuY3Rpb24gYXR0clJlbW92ZShuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0clJlbW92ZU5TKGZ1bGxuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJDb25zdGFudChuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyQ29uc3RhbnROUyhmdWxsbmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsLCB2YWx1ZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJGdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmICh2ID09IG51bGwpIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgIGVsc2UgdGhpcy5zZXRBdHRyaWJ1dGUobmFtZSwgdik7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJGdW5jdGlvbk5TKGZ1bGxuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmICh2ID09IG51bGwpIHRoaXMucmVtb3ZlQXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgICBlbHNlIHRoaXMuc2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsLCB2KTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgdmFyIGZ1bGxuYW1lID0gbmFtZXNwYWNlKG5hbWUpO1xuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIHZhciBub2RlID0gdGhpcy5ub2RlKCk7XG4gICAgcmV0dXJuIGZ1bGxuYW1lLmxvY2FsXG4gICAgICAgID8gbm9kZS5nZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpXG4gICAgICAgIDogbm9kZS5nZXRBdHRyaWJ1dGUoZnVsbG5hbWUpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuZWFjaCgodmFsdWUgPT0gbnVsbFxuICAgICAgPyAoZnVsbG5hbWUubG9jYWwgPyBhdHRyUmVtb3ZlTlMgOiBhdHRyUmVtb3ZlKSA6ICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgPyAoZnVsbG5hbWUubG9jYWwgPyBhdHRyRnVuY3Rpb25OUyA6IGF0dHJGdW5jdGlvbilcbiAgICAgIDogKGZ1bGxuYW1lLmxvY2FsID8gYXR0ckNvbnN0YW50TlMgOiBhdHRyQ29uc3RhbnQpKSkoZnVsbG5hbWUsIHZhbHVlKSk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihub2RlKSB7XG4gIHJldHVybiAobm9kZS5vd25lckRvY3VtZW50ICYmIG5vZGUub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldykgLy8gbm9kZSBpcyBhIE5vZGVcbiAgICAgIHx8IChub2RlLmRvY3VtZW50ICYmIG5vZGUpIC8vIG5vZGUgaXMgYSBXaW5kb3dcbiAgICAgIHx8IG5vZGUuZGVmYXVsdFZpZXc7IC8vIG5vZGUgaXMgYSBEb2N1bWVudFxufVxuIiwiaW1wb3J0IGRlZmF1bHRWaWV3IGZyb20gXCIuLi93aW5kb3cuanNcIjtcblxuZnVuY3Rpb24gc3R5bGVSZW1vdmUobmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3R5bGVDb25zdGFudChuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgdmFsdWUsIHByaW9yaXR5KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3R5bGVGdW5jdGlvbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAodiA9PSBudWxsKSB0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpO1xuICAgIGVsc2UgdGhpcy5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCB2LCBwcmlvcml0eSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDFcbiAgICAgID8gdGhpcy5lYWNoKCh2YWx1ZSA9PSBudWxsXG4gICAgICAgICAgICA/IHN0eWxlUmVtb3ZlIDogdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICAgID8gc3R5bGVGdW5jdGlvblxuICAgICAgICAgICAgOiBzdHlsZUNvbnN0YW50KShuYW1lLCB2YWx1ZSwgcHJpb3JpdHkgPT0gbnVsbCA/IFwiXCIgOiBwcmlvcml0eSkpXG4gICAgICA6IHN0eWxlVmFsdWUodGhpcy5ub2RlKCksIG5hbWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3R5bGVWYWx1ZShub2RlLCBuYW1lKSB7XG4gIHJldHVybiBub2RlLnN0eWxlLmdldFByb3BlcnR5VmFsdWUobmFtZSlcbiAgICAgIHx8IGRlZmF1bHRWaWV3KG5vZGUpLmdldENvbXB1dGVkU3R5bGUobm9kZSwgbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZShuYW1lKTtcbn1cbiIsImZ1bmN0aW9uIHByb3BlcnR5UmVtb3ZlKG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIGRlbGV0ZSB0aGlzW25hbWVdO1xuICB9O1xufVxuXG5mdW5jdGlvbiBwcm9wZXJ0eUNvbnN0YW50KG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzW25hbWVdID0gdmFsdWU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHByb3BlcnR5RnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAodiA9PSBudWxsKSBkZWxldGUgdGhpc1tuYW1lXTtcbiAgICBlbHNlIHRoaXNbbmFtZV0gPSB2O1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDFcbiAgICAgID8gdGhpcy5lYWNoKCh2YWx1ZSA9PSBudWxsXG4gICAgICAgICAgPyBwcm9wZXJ0eVJlbW92ZSA6IHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyBwcm9wZXJ0eUZ1bmN0aW9uXG4gICAgICAgICAgOiBwcm9wZXJ0eUNvbnN0YW50KShuYW1lLCB2YWx1ZSkpXG4gICAgICA6IHRoaXMubm9kZSgpW25hbWVdO1xufVxuIiwiZnVuY3Rpb24gY2xhc3NBcnJheShzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy50cmltKCkuc3BsaXQoL158XFxzKy8pO1xufVxuXG5mdW5jdGlvbiBjbGFzc0xpc3Qobm9kZSkge1xuICByZXR1cm4gbm9kZS5jbGFzc0xpc3QgfHwgbmV3IENsYXNzTGlzdChub2RlKTtcbn1cblxuZnVuY3Rpb24gQ2xhc3NMaXN0KG5vZGUpIHtcbiAgdGhpcy5fbm9kZSA9IG5vZGU7XG4gIHRoaXMuX25hbWVzID0gY2xhc3NBcnJheShub2RlLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpIHx8IFwiXCIpO1xufVxuXG5DbGFzc0xpc3QucHJvdG90eXBlID0ge1xuICBhZGQ6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICB2YXIgaSA9IHRoaXMuX25hbWVzLmluZGV4T2YobmFtZSk7XG4gICAgaWYgKGkgPCAwKSB7XG4gICAgICB0aGlzLl9uYW1lcy5wdXNoKG5hbWUpO1xuICAgICAgdGhpcy5fbm9kZS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCB0aGlzLl9uYW1lcy5qb2luKFwiIFwiKSk7XG4gICAgfVxuICB9LFxuICByZW1vdmU6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICB2YXIgaSA9IHRoaXMuX25hbWVzLmluZGV4T2YobmFtZSk7XG4gICAgaWYgKGkgPj0gMCkge1xuICAgICAgdGhpcy5fbmFtZXMuc3BsaWNlKGksIDEpO1xuICAgICAgdGhpcy5fbm9kZS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCB0aGlzLl9uYW1lcy5qb2luKFwiIFwiKSk7XG4gICAgfVxuICB9LFxuICBjb250YWluczogZnVuY3Rpb24obmFtZSkge1xuICAgIHJldHVybiB0aGlzLl9uYW1lcy5pbmRleE9mKG5hbWUpID49IDA7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGNsYXNzZWRBZGQobm9kZSwgbmFtZXMpIHtcbiAgdmFyIGxpc3QgPSBjbGFzc0xpc3Qobm9kZSksIGkgPSAtMSwgbiA9IG5hbWVzLmxlbmd0aDtcbiAgd2hpbGUgKCsraSA8IG4pIGxpc3QuYWRkKG5hbWVzW2ldKTtcbn1cblxuZnVuY3Rpb24gY2xhc3NlZFJlbW92ZShub2RlLCBuYW1lcykge1xuICB2YXIgbGlzdCA9IGNsYXNzTGlzdChub2RlKSwgaSA9IC0xLCBuID0gbmFtZXMubGVuZ3RoO1xuICB3aGlsZSAoKytpIDwgbikgbGlzdC5yZW1vdmUobmFtZXNbaV0pO1xufVxuXG5mdW5jdGlvbiBjbGFzc2VkVHJ1ZShuYW1lcykge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgY2xhc3NlZEFkZCh0aGlzLCBuYW1lcyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNsYXNzZWRGYWxzZShuYW1lcykge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgY2xhc3NlZFJlbW92ZSh0aGlzLCBuYW1lcyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNsYXNzZWRGdW5jdGlvbihuYW1lcywgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICh2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpID8gY2xhc3NlZEFkZCA6IGNsYXNzZWRSZW1vdmUpKHRoaXMsIG5hbWVzKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgdmFyIG5hbWVzID0gY2xhc3NBcnJheShuYW1lICsgXCJcIik7XG5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgdmFyIGxpc3QgPSBjbGFzc0xpc3QodGhpcy5ub2RlKCkpLCBpID0gLTEsIG4gPSBuYW1lcy5sZW5ndGg7XG4gICAgd2hpbGUgKCsraSA8IG4pIGlmICghbGlzdC5jb250YWlucyhuYW1lc1tpXSkpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLmVhY2goKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICA/IGNsYXNzZWRGdW5jdGlvbiA6IHZhbHVlXG4gICAgICA/IGNsYXNzZWRUcnVlXG4gICAgICA6IGNsYXNzZWRGYWxzZSkobmFtZXMsIHZhbHVlKSk7XG59XG4iLCJmdW5jdGlvbiB0ZXh0UmVtb3ZlKCkge1xuICB0aGlzLnRleHRDb250ZW50ID0gXCJcIjtcbn1cblxuZnVuY3Rpb24gdGV4dENvbnN0YW50KHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnRleHRDb250ZW50ID0gdmFsdWU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHRleHRGdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHRoaXMudGV4dENvbnRlbnQgPSB2ID09IG51bGwgPyBcIlwiIDogdjtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgID8gdGhpcy5lYWNoKHZhbHVlID09IG51bGxcbiAgICAgICAgICA/IHRleHRSZW1vdmUgOiAodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IHRleHRGdW5jdGlvblxuICAgICAgICAgIDogdGV4dENvbnN0YW50KSh2YWx1ZSkpXG4gICAgICA6IHRoaXMubm9kZSgpLnRleHRDb250ZW50O1xufVxuIiwiZnVuY3Rpb24gaHRtbFJlbW92ZSgpIHtcbiAgdGhpcy5pbm5lckhUTUwgPSBcIlwiO1xufVxuXG5mdW5jdGlvbiBodG1sQ29uc3RhbnQodmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuaW5uZXJIVE1MID0gdmFsdWU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGh0bWxGdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHRoaXMuaW5uZXJIVE1MID0gdiA9PSBudWxsID8gXCJcIiA6IHY7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMuZWFjaCh2YWx1ZSA9PSBudWxsXG4gICAgICAgICAgPyBodG1sUmVtb3ZlIDogKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyBodG1sRnVuY3Rpb25cbiAgICAgICAgICA6IGh0bWxDb25zdGFudCkodmFsdWUpKVxuICAgICAgOiB0aGlzLm5vZGUoKS5pbm5lckhUTUw7XG59XG4iLCJmdW5jdGlvbiByYWlzZSgpIHtcbiAgaWYgKHRoaXMubmV4dFNpYmxpbmcpIHRoaXMucGFyZW50Tm9kZS5hcHBlbmRDaGlsZCh0aGlzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmVhY2gocmFpc2UpO1xufVxuIiwiZnVuY3Rpb24gbG93ZXIoKSB7XG4gIGlmICh0aGlzLnByZXZpb3VzU2libGluZykgdGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzLCB0aGlzLnBhcmVudE5vZGUuZmlyc3RDaGlsZCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5lYWNoKGxvd2VyKTtcbn1cbiIsImltcG9ydCBuYW1lc3BhY2UgZnJvbSBcIi4vbmFtZXNwYWNlLmpzXCI7XG5pbXBvcnQge3hodG1sfSBmcm9tIFwiLi9uYW1lc3BhY2VzLmpzXCI7XG5cbmZ1bmN0aW9uIGNyZWF0b3JJbmhlcml0KG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBkb2N1bWVudCA9IHRoaXMub3duZXJEb2N1bWVudCxcbiAgICAgICAgdXJpID0gdGhpcy5uYW1lc3BhY2VVUkk7XG4gICAgcmV0dXJuIHVyaSA9PT0geGh0bWwgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50Lm5hbWVzcGFjZVVSSSA9PT0geGh0bWxcbiAgICAgICAgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KG5hbWUpXG4gICAgICAgIDogZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKHVyaSwgbmFtZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNyZWF0b3JGaXhlZChmdWxsbmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMub3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSkge1xuICB2YXIgZnVsbG5hbWUgPSBuYW1lc3BhY2UobmFtZSk7XG4gIHJldHVybiAoZnVsbG5hbWUubG9jYWxcbiAgICAgID8gY3JlYXRvckZpeGVkXG4gICAgICA6IGNyZWF0b3JJbmhlcml0KShmdWxsbmFtZSk7XG59XG4iLCJpbXBvcnQgY3JlYXRvciBmcm9tIFwiLi4vY3JlYXRvci5qc1wiO1xuaW1wb3J0IHNlbGVjdG9yIGZyb20gXCIuLi9zZWxlY3Rvci5qc1wiO1xuXG5mdW5jdGlvbiBjb25zdGFudE51bGwoKSB7XG4gIHJldHVybiBudWxsO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCBiZWZvcmUpIHtcbiAgdmFyIGNyZWF0ZSA9IHR5cGVvZiBuYW1lID09PSBcImZ1bmN0aW9uXCIgPyBuYW1lIDogY3JlYXRvcihuYW1lKSxcbiAgICAgIHNlbGVjdCA9IGJlZm9yZSA9PSBudWxsID8gY29uc3RhbnROdWxsIDogdHlwZW9mIGJlZm9yZSA9PT0gXCJmdW5jdGlvblwiID8gYmVmb3JlIDogc2VsZWN0b3IoYmVmb3JlKTtcbiAgcmV0dXJuIHRoaXMuc2VsZWN0KGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmluc2VydEJlZm9yZShjcmVhdGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSwgc2VsZWN0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgbnVsbCk7XG4gIH0pO1xufVxuIiwiZnVuY3Rpb24gcmVtb3ZlKCkge1xuICB2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuICBpZiAocGFyZW50KSBwYXJlbnQucmVtb3ZlQ2hpbGQodGhpcyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5lYWNoKHJlbW92ZSk7XG59XG4iLCJmdW5jdGlvbiBzZWxlY3Rpb25fY2xvbmVTaGFsbG93KCkge1xuICB2YXIgY2xvbmUgPSB0aGlzLmNsb25lTm9kZShmYWxzZSksIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcbiAgcmV0dXJuIHBhcmVudCA/IHBhcmVudC5pbnNlcnRCZWZvcmUoY2xvbmUsIHRoaXMubmV4dFNpYmxpbmcpIDogY2xvbmU7XG59XG5cbmZ1bmN0aW9uIHNlbGVjdGlvbl9jbG9uZURlZXAoKSB7XG4gIHZhciBjbG9uZSA9IHRoaXMuY2xvbmVOb2RlKHRydWUpLCBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XG4gIHJldHVybiBwYXJlbnQgPyBwYXJlbnQuaW5zZXJ0QmVmb3JlKGNsb25lLCB0aGlzLm5leHRTaWJsaW5nKSA6IGNsb25lO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihkZWVwKSB7XG4gIHJldHVybiB0aGlzLnNlbGVjdChkZWVwID8gc2VsZWN0aW9uX2Nsb25lRGVlcCA6IHNlbGVjdGlvbl9jbG9uZVNoYWxsb3cpO1xufVxuIiwiZnVuY3Rpb24gY29udGV4dExpc3RlbmVyKGxpc3RlbmVyKSB7XG4gIHJldHVybiBmdW5jdGlvbihldmVudCkge1xuICAgIGxpc3RlbmVyLmNhbGwodGhpcywgZXZlbnQsIHRoaXMuX19kYXRhX18pO1xuICB9O1xufVxuXG5mdW5jdGlvbiBwYXJzZVR5cGVuYW1lcyh0eXBlbmFtZXMpIHtcbiAgcmV0dXJuIHR5cGVuYW1lcy50cmltKCkuc3BsaXQoL158XFxzKy8pLm1hcChmdW5jdGlvbih0KSB7XG4gICAgdmFyIG5hbWUgPSBcIlwiLCBpID0gdC5pbmRleE9mKFwiLlwiKTtcbiAgICBpZiAoaSA+PSAwKSBuYW1lID0gdC5zbGljZShpICsgMSksIHQgPSB0LnNsaWNlKDAsIGkpO1xuICAgIHJldHVybiB7dHlwZTogdCwgbmFtZTogbmFtZX07XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBvblJlbW92ZSh0eXBlbmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG9uID0gdGhpcy5fX29uO1xuICAgIGlmICghb24pIHJldHVybjtcbiAgICBmb3IgKHZhciBqID0gMCwgaSA9IC0xLCBtID0gb24ubGVuZ3RoLCBvOyBqIDwgbTsgKytqKSB7XG4gICAgICBpZiAobyA9IG9uW2pdLCAoIXR5cGVuYW1lLnR5cGUgfHwgby50eXBlID09PSB0eXBlbmFtZS50eXBlKSAmJiBvLm5hbWUgPT09IHR5cGVuYW1lLm5hbWUpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKG8udHlwZSwgby5saXN0ZW5lciwgby5vcHRpb25zKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9uWysraV0gPSBvO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoKytpKSBvbi5sZW5ndGggPSBpO1xuICAgIGVsc2UgZGVsZXRlIHRoaXMuX19vbjtcbiAgfTtcbn1cblxuZnVuY3Rpb24gb25BZGQodHlwZW5hbWUsIHZhbHVlLCBvcHRpb25zKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgb24gPSB0aGlzLl9fb24sIG8sIGxpc3RlbmVyID0gY29udGV4dExpc3RlbmVyKHZhbHVlKTtcbiAgICBpZiAob24pIGZvciAodmFyIGogPSAwLCBtID0gb24ubGVuZ3RoOyBqIDwgbTsgKytqKSB7XG4gICAgICBpZiAoKG8gPSBvbltqXSkudHlwZSA9PT0gdHlwZW5hbWUudHlwZSAmJiBvLm5hbWUgPT09IHR5cGVuYW1lLm5hbWUpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKG8udHlwZSwgby5saXN0ZW5lciwgby5vcHRpb25zKTtcbiAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKG8udHlwZSwgby5saXN0ZW5lciA9IGxpc3RlbmVyLCBvLm9wdGlvbnMgPSBvcHRpb25zKTtcbiAgICAgICAgby52YWx1ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcih0eXBlbmFtZS50eXBlLCBsaXN0ZW5lciwgb3B0aW9ucyk7XG4gICAgbyA9IHt0eXBlOiB0eXBlbmFtZS50eXBlLCBuYW1lOiB0eXBlbmFtZS5uYW1lLCB2YWx1ZTogdmFsdWUsIGxpc3RlbmVyOiBsaXN0ZW5lciwgb3B0aW9uczogb3B0aW9uc307XG4gICAgaWYgKCFvbikgdGhpcy5fX29uID0gW29dO1xuICAgIGVsc2Ugb24ucHVzaChvKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odHlwZW5hbWUsIHZhbHVlLCBvcHRpb25zKSB7XG4gIHZhciB0eXBlbmFtZXMgPSBwYXJzZVR5cGVuYW1lcyh0eXBlbmFtZSArIFwiXCIpLCBpLCBuID0gdHlwZW5hbWVzLmxlbmd0aCwgdDtcblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICB2YXIgb24gPSB0aGlzLm5vZGUoKS5fX29uO1xuICAgIGlmIChvbikgZm9yICh2YXIgaiA9IDAsIG0gPSBvbi5sZW5ndGgsIG87IGogPCBtOyArK2opIHtcbiAgICAgIGZvciAoaSA9IDAsIG8gPSBvbltqXTsgaSA8IG47ICsraSkge1xuICAgICAgICBpZiAoKHQgPSB0eXBlbmFtZXNbaV0pLnR5cGUgPT09IG8udHlwZSAmJiB0Lm5hbWUgPT09IG8ubmFtZSkge1xuICAgICAgICAgIHJldHVybiBvLnZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuXG4gIG9uID0gdmFsdWUgPyBvbkFkZCA6IG9uUmVtb3ZlO1xuICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB0aGlzLmVhY2gob24odHlwZW5hbWVzW2ldLCB2YWx1ZSwgb3B0aW9ucykpO1xuICByZXR1cm4gdGhpcztcbn1cbiIsImltcG9ydCBkZWZhdWx0VmlldyBmcm9tIFwiLi4vd2luZG93LmpzXCI7XG5cbmZ1bmN0aW9uIGRpc3BhdGNoRXZlbnQobm9kZSwgdHlwZSwgcGFyYW1zKSB7XG4gIHZhciB3aW5kb3cgPSBkZWZhdWx0Vmlldyhub2RlKSxcbiAgICAgIGV2ZW50ID0gd2luZG93LkN1c3RvbUV2ZW50O1xuXG4gIGlmICh0eXBlb2YgZXZlbnQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGV2ZW50ID0gbmV3IGV2ZW50KHR5cGUsIHBhcmFtcyk7XG4gIH0gZWxzZSB7XG4gICAgZXZlbnQgPSB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJFdmVudFwiKTtcbiAgICBpZiAocGFyYW1zKSBldmVudC5pbml0RXZlbnQodHlwZSwgcGFyYW1zLmJ1YmJsZXMsIHBhcmFtcy5jYW5jZWxhYmxlKSwgZXZlbnQuZGV0YWlsID0gcGFyYW1zLmRldGFpbDtcbiAgICBlbHNlIGV2ZW50LmluaXRFdmVudCh0eXBlLCBmYWxzZSwgZmFsc2UpO1xuICB9XG5cbiAgbm9kZS5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbn1cblxuZnVuY3Rpb24gZGlzcGF0Y2hDb25zdGFudCh0eXBlLCBwYXJhbXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkaXNwYXRjaEV2ZW50KHRoaXMsIHR5cGUsIHBhcmFtcyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGRpc3BhdGNoRnVuY3Rpb24odHlwZSwgcGFyYW1zKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZGlzcGF0Y2hFdmVudCh0aGlzLCB0eXBlLCBwYXJhbXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHR5cGUsIHBhcmFtcykge1xuICByZXR1cm4gdGhpcy5lYWNoKCh0eXBlb2YgcGFyYW1zID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gZGlzcGF0Y2hGdW5jdGlvblxuICAgICAgOiBkaXNwYXRjaENvbnN0YW50KSh0eXBlLCBwYXJhbXMpKTtcbn1cbiIsImltcG9ydCBzZWxlY3Rpb25fc2VsZWN0IGZyb20gXCIuL3NlbGVjdC5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9zZWxlY3RBbGwgZnJvbSBcIi4vc2VsZWN0QWxsLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3NlbGVjdENoaWxkIGZyb20gXCIuL3NlbGVjdENoaWxkLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3NlbGVjdENoaWxkcmVuIGZyb20gXCIuL3NlbGVjdENoaWxkcmVuLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2ZpbHRlciBmcm9tIFwiLi9maWx0ZXIuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fZGF0YSBmcm9tIFwiLi9kYXRhLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2VudGVyIGZyb20gXCIuL2VudGVyLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2V4aXQgZnJvbSBcIi4vZXhpdC5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9qb2luIGZyb20gXCIuL2pvaW4uanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fbWVyZ2UgZnJvbSBcIi4vbWVyZ2UuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fb3JkZXIgZnJvbSBcIi4vb3JkZXIuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fc29ydCBmcm9tIFwiLi9zb3J0LmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2NhbGwgZnJvbSBcIi4vY2FsbC5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9ub2RlcyBmcm9tIFwiLi9ub2Rlcy5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9ub2RlIGZyb20gXCIuL25vZGUuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fc2l6ZSBmcm9tIFwiLi9zaXplLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2VtcHR5IGZyb20gXCIuL2VtcHR5LmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2VhY2ggZnJvbSBcIi4vZWFjaC5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9hdHRyIGZyb20gXCIuL2F0dHIuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fc3R5bGUgZnJvbSBcIi4vc3R5bGUuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fcHJvcGVydHkgZnJvbSBcIi4vcHJvcGVydHkuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fY2xhc3NlZCBmcm9tIFwiLi9jbGFzc2VkLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3RleHQgZnJvbSBcIi4vdGV4dC5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9odG1sIGZyb20gXCIuL2h0bWwuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fcmFpc2UgZnJvbSBcIi4vcmFpc2UuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fbG93ZXIgZnJvbSBcIi4vbG93ZXIuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fYXBwZW5kIGZyb20gXCIuL2FwcGVuZC5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9pbnNlcnQgZnJvbSBcIi4vaW5zZXJ0LmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3JlbW92ZSBmcm9tIFwiLi9yZW1vdmUuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fY2xvbmUgZnJvbSBcIi4vY2xvbmUuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fZGF0dW0gZnJvbSBcIi4vZGF0dW0uanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fb24gZnJvbSBcIi4vb24uanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fZGlzcGF0Y2ggZnJvbSBcIi4vZGlzcGF0Y2guanNcIjtcbmltcG9ydCBzZWxlY3Rpb25faXRlcmF0b3IgZnJvbSBcIi4vaXRlcmF0b3IuanNcIjtcblxuZXhwb3J0IHZhciByb290ID0gW251bGxdO1xuXG5leHBvcnQgZnVuY3Rpb24gU2VsZWN0aW9uKGdyb3VwcywgcGFyZW50cykge1xuICB0aGlzLl9ncm91cHMgPSBncm91cHM7XG4gIHRoaXMuX3BhcmVudHMgPSBwYXJlbnRzO1xufVxuXG5mdW5jdGlvbiBzZWxlY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKFtbZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50XV0sIHJvb3QpO1xufVxuXG5mdW5jdGlvbiBzZWxlY3Rpb25fc2VsZWN0aW9uKCkge1xuICByZXR1cm4gdGhpcztcbn1cblxuU2VsZWN0aW9uLnByb3RvdHlwZSA9IHNlbGVjdGlvbi5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBTZWxlY3Rpb24sXG4gIHNlbGVjdDogc2VsZWN0aW9uX3NlbGVjdCxcbiAgc2VsZWN0QWxsOiBzZWxlY3Rpb25fc2VsZWN0QWxsLFxuICBzZWxlY3RDaGlsZDogc2VsZWN0aW9uX3NlbGVjdENoaWxkLFxuICBzZWxlY3RDaGlsZHJlbjogc2VsZWN0aW9uX3NlbGVjdENoaWxkcmVuLFxuICBmaWx0ZXI6IHNlbGVjdGlvbl9maWx0ZXIsXG4gIGRhdGE6IHNlbGVjdGlvbl9kYXRhLFxuICBlbnRlcjogc2VsZWN0aW9uX2VudGVyLFxuICBleGl0OiBzZWxlY3Rpb25fZXhpdCxcbiAgam9pbjogc2VsZWN0aW9uX2pvaW4sXG4gIG1lcmdlOiBzZWxlY3Rpb25fbWVyZ2UsXG4gIHNlbGVjdGlvbjogc2VsZWN0aW9uX3NlbGVjdGlvbixcbiAgb3JkZXI6IHNlbGVjdGlvbl9vcmRlcixcbiAgc29ydDogc2VsZWN0aW9uX3NvcnQsXG4gIGNhbGw6IHNlbGVjdGlvbl9jYWxsLFxuICBub2Rlczogc2VsZWN0aW9uX25vZGVzLFxuICBub2RlOiBzZWxlY3Rpb25fbm9kZSxcbiAgc2l6ZTogc2VsZWN0aW9uX3NpemUsXG4gIGVtcHR5OiBzZWxlY3Rpb25fZW1wdHksXG4gIGVhY2g6IHNlbGVjdGlvbl9lYWNoLFxuICBhdHRyOiBzZWxlY3Rpb25fYXR0cixcbiAgc3R5bGU6IHNlbGVjdGlvbl9zdHlsZSxcbiAgcHJvcGVydHk6IHNlbGVjdGlvbl9wcm9wZXJ0eSxcbiAgY2xhc3NlZDogc2VsZWN0aW9uX2NsYXNzZWQsXG4gIHRleHQ6IHNlbGVjdGlvbl90ZXh0LFxuICBodG1sOiBzZWxlY3Rpb25faHRtbCxcbiAgcmFpc2U6IHNlbGVjdGlvbl9yYWlzZSxcbiAgbG93ZXI6IHNlbGVjdGlvbl9sb3dlcixcbiAgYXBwZW5kOiBzZWxlY3Rpb25fYXBwZW5kLFxuICBpbnNlcnQ6IHNlbGVjdGlvbl9pbnNlcnQsXG4gIHJlbW92ZTogc2VsZWN0aW9uX3JlbW92ZSxcbiAgY2xvbmU6IHNlbGVjdGlvbl9jbG9uZSxcbiAgZGF0dW06IHNlbGVjdGlvbl9kYXR1bSxcbiAgb246IHNlbGVjdGlvbl9vbixcbiAgZGlzcGF0Y2g6IHNlbGVjdGlvbl9kaXNwYXRjaCxcbiAgW1N5bWJvbC5pdGVyYXRvcl06IHNlbGVjdGlvbl9pdGVyYXRvclxufTtcblxuZXhwb3J0IGRlZmF1bHQgc2VsZWN0aW9uO1xuIiwiaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4LmpzXCI7XG5pbXBvcnQgc2VsZWN0b3IgZnJvbSBcIi4uL3NlbGVjdG9yLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdCkge1xuICBpZiAodHlwZW9mIHNlbGVjdCAhPT0gXCJmdW5jdGlvblwiKSBzZWxlY3QgPSBzZWxlY3RvcihzZWxlY3QpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc3ViZ3JvdXAgPSBzdWJncm91cHNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIHN1Ym5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgKHN1Ym5vZGUgPSBzZWxlY3QuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCkpKSB7XG4gICAgICAgIGlmIChcIl9fZGF0YV9fXCIgaW4gbm9kZSkgc3Vibm9kZS5fX2RhdGFfXyA9IG5vZGUuX19kYXRhX187XG4gICAgICAgIHN1Ymdyb3VwW2ldID0gc3Vibm9kZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFNlbGVjdGlvbihzdWJncm91cHMsIHRoaXMuX3BhcmVudHMpO1xufVxuIiwiaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4LmpzXCI7XG5pbXBvcnQgYXJyYXkgZnJvbSBcIi4uL2FycmF5LmpzXCI7XG5pbXBvcnQgc2VsZWN0b3JBbGwgZnJvbSBcIi4uL3NlbGVjdG9yQWxsLmpzXCI7XG5cbmZ1bmN0aW9uIGFycmF5QWxsKHNlbGVjdCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGFycmF5KHNlbGVjdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0KSB7XG4gIGlmICh0eXBlb2Ygc2VsZWN0ID09PSBcImZ1bmN0aW9uXCIpIHNlbGVjdCA9IGFycmF5QWxsKHNlbGVjdCk7XG4gIGVsc2Ugc2VsZWN0ID0gc2VsZWN0b3JBbGwoc2VsZWN0KTtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzdWJncm91cHMgPSBbXSwgcGFyZW50cyA9IFtdLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICBzdWJncm91cHMucHVzaChzZWxlY3QuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCkpO1xuICAgICAgICBwYXJlbnRzLnB1c2gobm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oc3ViZ3JvdXBzLCBwYXJlbnRzKTtcbn1cbiIsImltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleC5qc1wiO1xuaW1wb3J0IG1hdGNoZXIgZnJvbSBcIi4uL21hdGNoZXIuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obWF0Y2gpIHtcbiAgaWYgKHR5cGVvZiBtYXRjaCAhPT0gXCJmdW5jdGlvblwiKSBtYXRjaCA9IG1hdGNoZXIobWF0Y2gpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc3ViZ3JvdXAgPSBzdWJncm91cHNbal0gPSBbXSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiBtYXRjaC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSkge1xuICAgICAgICBzdWJncm91cC5wdXNoKG5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHN1Ymdyb3VwcywgdGhpcy5fcGFyZW50cyk7XG59XG4iLCJpbXBvcnQgc3BhcnNlIGZyb20gXCIuL3NwYXJzZS5qc1wiO1xuaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFNlbGVjdGlvbih0aGlzLl9leGl0IHx8IHRoaXMuX2dyb3Vwcy5tYXAoc3BhcnNlKSwgdGhpcy5fcGFyZW50cyk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihvbmVudGVyLCBvbnVwZGF0ZSwgb25leGl0KSB7XG4gIHZhciBlbnRlciA9IHRoaXMuZW50ZXIoKSwgdXBkYXRlID0gdGhpcywgZXhpdCA9IHRoaXMuZXhpdCgpO1xuICBpZiAodHlwZW9mIG9uZW50ZXIgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGVudGVyID0gb25lbnRlcihlbnRlcik7XG4gICAgaWYgKGVudGVyKSBlbnRlciA9IGVudGVyLnNlbGVjdGlvbigpO1xuICB9IGVsc2Uge1xuICAgIGVudGVyID0gZW50ZXIuYXBwZW5kKG9uZW50ZXIgKyBcIlwiKTtcbiAgfVxuICBpZiAob251cGRhdGUgIT0gbnVsbCkge1xuICAgIHVwZGF0ZSA9IG9udXBkYXRlKHVwZGF0ZSk7XG4gICAgaWYgKHVwZGF0ZSkgdXBkYXRlID0gdXBkYXRlLnNlbGVjdGlvbigpO1xuICB9XG4gIGlmIChvbmV4aXQgPT0gbnVsbCkgZXhpdC5yZW1vdmUoKTsgZWxzZSBvbmV4aXQoZXhpdCk7XG4gIHJldHVybiBlbnRlciAmJiB1cGRhdGUgPyBlbnRlci5tZXJnZSh1cGRhdGUpLm9yZGVyKCkgOiB1cGRhdGU7XG59XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXguanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29udGV4dCkge1xuICB2YXIgc2VsZWN0aW9uID0gY29udGV4dC5zZWxlY3Rpb24gPyBjb250ZXh0LnNlbGVjdGlvbigpIDogY29udGV4dDtcblxuICBmb3IgKHZhciBncm91cHMwID0gdGhpcy5fZ3JvdXBzLCBncm91cHMxID0gc2VsZWN0aW9uLl9ncm91cHMsIG0wID0gZ3JvdXBzMC5sZW5ndGgsIG0xID0gZ3JvdXBzMS5sZW5ndGgsIG0gPSBNYXRoLm1pbihtMCwgbTEpLCBtZXJnZXMgPSBuZXcgQXJyYXkobTApLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwMCA9IGdyb3VwczBbal0sIGdyb3VwMSA9IGdyb3VwczFbal0sIG4gPSBncm91cDAubGVuZ3RoLCBtZXJnZSA9IG1lcmdlc1tqXSA9IG5ldyBBcnJheShuKSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXAwW2ldIHx8IGdyb3VwMVtpXSkge1xuICAgICAgICBtZXJnZVtpXSA9IG5vZGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZm9yICg7IGogPCBtMDsgKytqKSB7XG4gICAgbWVyZ2VzW2pdID0gZ3JvdXBzMFtqXTtcbiAgfVxuXG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKG1lcmdlcywgdGhpcy5fcGFyZW50cyk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIGogPSAtMSwgbSA9IGdyb3Vwcy5sZW5ndGg7ICsraiA8IG07KSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIGkgPSBncm91cC5sZW5ndGggLSAxLCBuZXh0ID0gZ3JvdXBbaV0sIG5vZGU7IC0taSA+PSAwOykge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICBpZiAobmV4dCAmJiBub2RlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKG5leHQpIF4gNCkgbmV4dC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShub2RlLCBuZXh0KTtcbiAgICAgICAgbmV4dCA9IG5vZGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIGNhbGxiYWNrID0gYXJndW1lbnRzWzBdO1xuICBhcmd1bWVudHNbMF0gPSB0aGlzO1xuICBjYWxsYmFjay5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICByZXR1cm4gdGhpcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgaiA9IDAsIG0gPSBncm91cHMubGVuZ3RoOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIGkgPSAwLCBuID0gZ3JvdXAubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICB2YXIgbm9kZSA9IGdyb3VwW2ldO1xuICAgICAgaWYgKG5vZGUpIHJldHVybiBub2RlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIGxldCBzaXplID0gMDtcbiAgZm9yIChjb25zdCBub2RlIG9mIHRoaXMpICsrc2l6ZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICByZXR1cm4gc2l6ZTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gIXRoaXMubm9kZSgpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY2FsbGJhY2spIHtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIGogPSAwLCBtID0gZ3JvdXBzLmxlbmd0aDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBpID0gMCwgbiA9IGdyb3VwLmxlbmd0aCwgbm9kZTsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkgY2FsbGJhY2suY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJpbXBvcnQgY3JlYXRvciBmcm9tIFwiLi4vY3JlYXRvci5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lKSB7XG4gIHZhciBjcmVhdGUgPSB0eXBlb2YgbmFtZSA9PT0gXCJmdW5jdGlvblwiID8gbmFtZSA6IGNyZWF0b3IobmFtZSk7XG4gIHJldHVybiB0aGlzLnNlbGVjdChmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5hcHBlbmRDaGlsZChjcmVhdGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH0pO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgID8gdGhpcy5wcm9wZXJ0eShcIl9fZGF0YV9fXCIsIHZhbHVlKVxuICAgICAgOiB0aGlzLm5vZGUoKS5fX2RhdGFfXztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKigpIHtcbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBqID0gMCwgbSA9IGdyb3Vwcy5sZW5ndGg7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgaSA9IDAsIG4gPSBncm91cC5sZW5ndGgsIG5vZGU7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHlpZWxkIG5vZGU7XG4gICAgfVxuICB9XG59XG4iLCJ2YXIgbm9vcCA9IHt2YWx1ZTogKCkgPT4ge319O1xuXG5mdW5jdGlvbiBkaXNwYXRjaCgpIHtcbiAgZm9yICh2YXIgaSA9IDAsIG4gPSBhcmd1bWVudHMubGVuZ3RoLCBfID0ge30sIHQ7IGkgPCBuOyArK2kpIHtcbiAgICBpZiAoISh0ID0gYXJndW1lbnRzW2ldICsgXCJcIikgfHwgKHQgaW4gXykgfHwgL1tcXHMuXS8udGVzdCh0KSkgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCB0eXBlOiBcIiArIHQpO1xuICAgIF9bdF0gPSBbXTtcbiAgfVxuICByZXR1cm4gbmV3IERpc3BhdGNoKF8pO1xufVxuXG5mdW5jdGlvbiBEaXNwYXRjaChfKSB7XG4gIHRoaXMuXyA9IF87XG59XG5cbmZ1bmN0aW9uIHBhcnNlVHlwZW5hbWVzKHR5cGVuYW1lcywgdHlwZXMpIHtcbiAgcmV0dXJuIHR5cGVuYW1lcy50cmltKCkuc3BsaXQoL158XFxzKy8pLm1hcChmdW5jdGlvbih0KSB7XG4gICAgdmFyIG5hbWUgPSBcIlwiLCBpID0gdC5pbmRleE9mKFwiLlwiKTtcbiAgICBpZiAoaSA+PSAwKSBuYW1lID0gdC5zbGljZShpICsgMSksIHQgPSB0LnNsaWNlKDAsIGkpO1xuICAgIGlmICh0ICYmICF0eXBlcy5oYXNPd25Qcm9wZXJ0eSh0KSkgdGhyb3cgbmV3IEVycm9yKFwidW5rbm93biB0eXBlOiBcIiArIHQpO1xuICAgIHJldHVybiB7dHlwZTogdCwgbmFtZTogbmFtZX07XG4gIH0pO1xufVxuXG5EaXNwYXRjaC5wcm90b3R5cGUgPSBkaXNwYXRjaC5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBEaXNwYXRjaCxcbiAgb246IGZ1bmN0aW9uKHR5cGVuYW1lLCBjYWxsYmFjaykge1xuICAgIHZhciBfID0gdGhpcy5fLFxuICAgICAgICBUID0gcGFyc2VUeXBlbmFtZXModHlwZW5hbWUgKyBcIlwiLCBfKSxcbiAgICAgICAgdCxcbiAgICAgICAgaSA9IC0xLFxuICAgICAgICBuID0gVC5sZW5ndGg7XG5cbiAgICAvLyBJZiBubyBjYWxsYmFjayB3YXMgc3BlY2lmaWVkLCByZXR1cm4gdGhlIGNhbGxiYWNrIG9mIHRoZSBnaXZlbiB0eXBlIGFuZCBuYW1lLlxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgICAgd2hpbGUgKCsraSA8IG4pIGlmICgodCA9ICh0eXBlbmFtZSA9IFRbaV0pLnR5cGUpICYmICh0ID0gZ2V0KF9bdF0sIHR5cGVuYW1lLm5hbWUpKSkgcmV0dXJuIHQ7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gSWYgYSB0eXBlIHdhcyBzcGVjaWZpZWQsIHNldCB0aGUgY2FsbGJhY2sgZm9yIHRoZSBnaXZlbiB0eXBlIGFuZCBuYW1lLlxuICAgIC8vIE90aGVyd2lzZSwgaWYgYSBudWxsIGNhbGxiYWNrIHdhcyBzcGVjaWZpZWQsIHJlbW92ZSBjYWxsYmFja3Mgb2YgdGhlIGdpdmVuIG5hbWUuXG4gICAgaWYgKGNhbGxiYWNrICE9IG51bGwgJiYgdHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgY2FsbGJhY2s6IFwiICsgY2FsbGJhY2spO1xuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBpZiAodCA9ICh0eXBlbmFtZSA9IFRbaV0pLnR5cGUpIF9bdF0gPSBzZXQoX1t0XSwgdHlwZW5hbWUubmFtZSwgY2FsbGJhY2spO1xuICAgICAgZWxzZSBpZiAoY2FsbGJhY2sgPT0gbnVsbCkgZm9yICh0IGluIF8pIF9bdF0gPSBzZXQoX1t0XSwgdHlwZW5hbWUubmFtZSwgbnVsbCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIGNvcHk6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBjb3B5ID0ge30sIF8gPSB0aGlzLl87XG4gICAgZm9yICh2YXIgdCBpbiBfKSBjb3B5W3RdID0gX1t0XS5zbGljZSgpO1xuICAgIHJldHVybiBuZXcgRGlzcGF0Y2goY29weSk7XG4gIH0sXG4gIGNhbGw6IGZ1bmN0aW9uKHR5cGUsIHRoYXQpIHtcbiAgICBpZiAoKG4gPSBhcmd1bWVudHMubGVuZ3RoIC0gMikgPiAwKSBmb3IgKHZhciBhcmdzID0gbmV3IEFycmF5KG4pLCBpID0gMCwgbiwgdDsgaSA8IG47ICsraSkgYXJnc1tpXSA9IGFyZ3VtZW50c1tpICsgMl07XG4gICAgaWYgKCF0aGlzLl8uaGFzT3duUHJvcGVydHkodHlwZSkpIHRocm93IG5ldyBFcnJvcihcInVua25vd24gdHlwZTogXCIgKyB0eXBlKTtcbiAgICBmb3IgKHQgPSB0aGlzLl9bdHlwZV0sIGkgPSAwLCBuID0gdC5sZW5ndGg7IGkgPCBuOyArK2kpIHRbaV0udmFsdWUuYXBwbHkodGhhdCwgYXJncyk7XG4gIH0sXG4gIGFwcGx5OiBmdW5jdGlvbih0eXBlLCB0aGF0LCBhcmdzKSB7XG4gICAgaWYgKCF0aGlzLl8uaGFzT3duUHJvcGVydHkodHlwZSkpIHRocm93IG5ldyBFcnJvcihcInVua25vd24gdHlwZTogXCIgKyB0eXBlKTtcbiAgICBmb3IgKHZhciB0ID0gdGhpcy5fW3R5cGVdLCBpID0gMCwgbiA9IHQubGVuZ3RoOyBpIDwgbjsgKytpKSB0W2ldLnZhbHVlLmFwcGx5KHRoYXQsIGFyZ3MpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBnZXQodHlwZSwgbmFtZSkge1xuICBmb3IgKHZhciBpID0gMCwgbiA9IHR5cGUubGVuZ3RoLCBjOyBpIDwgbjsgKytpKSB7XG4gICAgaWYgKChjID0gdHlwZVtpXSkubmFtZSA9PT0gbmFtZSkge1xuICAgICAgcmV0dXJuIGMudmFsdWU7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHNldCh0eXBlLCBuYW1lLCBjYWxsYmFjaykge1xuICBmb3IgKHZhciBpID0gMCwgbiA9IHR5cGUubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgaWYgKHR5cGVbaV0ubmFtZSA9PT0gbmFtZSkge1xuICAgICAgdHlwZVtpXSA9IG5vb3AsIHR5cGUgPSB0eXBlLnNsaWNlKDAsIGkpLmNvbmNhdCh0eXBlLnNsaWNlKGkgKyAxKSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgaWYgKGNhbGxiYWNrICE9IG51bGwpIHR5cGUucHVzaCh7bmFtZTogbmFtZSwgdmFsdWU6IGNhbGxiYWNrfSk7XG4gIHJldHVybiB0eXBlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBkaXNwYXRjaDtcbiIsInZhciBmcmFtZSA9IDAsIC8vIGlzIGFuIGFuaW1hdGlvbiBmcmFtZSBwZW5kaW5nP1xuICAgIHRpbWVvdXQgPSAwLCAvLyBpcyBhIHRpbWVvdXQgcGVuZGluZz9cbiAgICBpbnRlcnZhbCA9IDAsIC8vIGFyZSBhbnkgdGltZXJzIGFjdGl2ZT9cbiAgICBwb2tlRGVsYXkgPSAxMDAwLCAvLyBob3cgZnJlcXVlbnRseSB3ZSBjaGVjayBmb3IgY2xvY2sgc2tld1xuICAgIHRhc2tIZWFkLFxuICAgIHRhc2tUYWlsLFxuICAgIGNsb2NrTGFzdCA9IDAsXG4gICAgY2xvY2tOb3cgPSAwLFxuICAgIGNsb2NrU2tldyA9IDAsXG4gICAgY2xvY2sgPSB0eXBlb2YgcGVyZm9ybWFuY2UgPT09IFwib2JqZWN0XCIgJiYgcGVyZm9ybWFuY2Uubm93ID8gcGVyZm9ybWFuY2UgOiBEYXRlLFxuICAgIHNldEZyYW1lID0gdHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIiAmJiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lID8gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZS5iaW5kKHdpbmRvdykgOiBmdW5jdGlvbihmKSB7IHNldFRpbWVvdXQoZiwgMTcpOyB9O1xuXG5leHBvcnQgZnVuY3Rpb24gbm93KCkge1xuICByZXR1cm4gY2xvY2tOb3cgfHwgKHNldEZyYW1lKGNsZWFyTm93KSwgY2xvY2tOb3cgPSBjbG9jay5ub3coKSArIGNsb2NrU2tldyk7XG59XG5cbmZ1bmN0aW9uIGNsZWFyTm93KCkge1xuICBjbG9ja05vdyA9IDA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBUaW1lcigpIHtcbiAgdGhpcy5fY2FsbCA9XG4gIHRoaXMuX3RpbWUgPVxuICB0aGlzLl9uZXh0ID0gbnVsbDtcbn1cblxuVGltZXIucHJvdG90eXBlID0gdGltZXIucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogVGltZXIsXG4gIHJlc3RhcnQ6IGZ1bmN0aW9uKGNhbGxiYWNrLCBkZWxheSwgdGltZSkge1xuICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcImNhbGxiYWNrIGlzIG5vdCBhIGZ1bmN0aW9uXCIpO1xuICAgIHRpbWUgPSAodGltZSA9PSBudWxsID8gbm93KCkgOiArdGltZSkgKyAoZGVsYXkgPT0gbnVsbCA/IDAgOiArZGVsYXkpO1xuICAgIGlmICghdGhpcy5fbmV4dCAmJiB0YXNrVGFpbCAhPT0gdGhpcykge1xuICAgICAgaWYgKHRhc2tUYWlsKSB0YXNrVGFpbC5fbmV4dCA9IHRoaXM7XG4gICAgICBlbHNlIHRhc2tIZWFkID0gdGhpcztcbiAgICAgIHRhc2tUYWlsID0gdGhpcztcbiAgICB9XG4gICAgdGhpcy5fY2FsbCA9IGNhbGxiYWNrO1xuICAgIHRoaXMuX3RpbWUgPSB0aW1lO1xuICAgIHNsZWVwKCk7XG4gIH0sXG4gIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9jYWxsKSB7XG4gICAgICB0aGlzLl9jYWxsID0gbnVsbDtcbiAgICAgIHRoaXMuX3RpbWUgPSBJbmZpbml0eTtcbiAgICAgIHNsZWVwKCk7XG4gICAgfVxuICB9XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gdGltZXIoY2FsbGJhY2ssIGRlbGF5LCB0aW1lKSB7XG4gIHZhciB0ID0gbmV3IFRpbWVyO1xuICB0LnJlc3RhcnQoY2FsbGJhY2ssIGRlbGF5LCB0aW1lKTtcbiAgcmV0dXJuIHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0aW1lckZsdXNoKCkge1xuICBub3coKTsgLy8gR2V0IHRoZSBjdXJyZW50IHRpbWUsIGlmIG5vdCBhbHJlYWR5IHNldC5cbiAgKytmcmFtZTsgLy8gUHJldGVuZCB3ZeKAmXZlIHNldCBhbiBhbGFybSwgaWYgd2UgaGF2ZW7igJl0IGFscmVhZHkuXG4gIHZhciB0ID0gdGFza0hlYWQsIGU7XG4gIHdoaWxlICh0KSB7XG4gICAgaWYgKChlID0gY2xvY2tOb3cgLSB0Ll90aW1lKSA+PSAwKSB0Ll9jYWxsLmNhbGwodW5kZWZpbmVkLCBlKTtcbiAgICB0ID0gdC5fbmV4dDtcbiAgfVxuICAtLWZyYW1lO1xufVxuXG5mdW5jdGlvbiB3YWtlKCkge1xuICBjbG9ja05vdyA9IChjbG9ja0xhc3QgPSBjbG9jay5ub3coKSkgKyBjbG9ja1NrZXc7XG4gIGZyYW1lID0gdGltZW91dCA9IDA7XG4gIHRyeSB7XG4gICAgdGltZXJGbHVzaCgpO1xuICB9IGZpbmFsbHkge1xuICAgIGZyYW1lID0gMDtcbiAgICBuYXAoKTtcbiAgICBjbG9ja05vdyA9IDA7XG4gIH1cbn1cblxuZnVuY3Rpb24gcG9rZSgpIHtcbiAgdmFyIG5vdyA9IGNsb2NrLm5vdygpLCBkZWxheSA9IG5vdyAtIGNsb2NrTGFzdDtcbiAgaWYgKGRlbGF5ID4gcG9rZURlbGF5KSBjbG9ja1NrZXcgLT0gZGVsYXksIGNsb2NrTGFzdCA9IG5vdztcbn1cblxuZnVuY3Rpb24gbmFwKCkge1xuICB2YXIgdDAsIHQxID0gdGFza0hlYWQsIHQyLCB0aW1lID0gSW5maW5pdHk7XG4gIHdoaWxlICh0MSkge1xuICAgIGlmICh0MS5fY2FsbCkge1xuICAgICAgaWYgKHRpbWUgPiB0MS5fdGltZSkgdGltZSA9IHQxLl90aW1lO1xuICAgICAgdDAgPSB0MSwgdDEgPSB0MS5fbmV4dDtcbiAgICB9IGVsc2Uge1xuICAgICAgdDIgPSB0MS5fbmV4dCwgdDEuX25leHQgPSBudWxsO1xuICAgICAgdDEgPSB0MCA/IHQwLl9uZXh0ID0gdDIgOiB0YXNrSGVhZCA9IHQyO1xuICAgIH1cbiAgfVxuICB0YXNrVGFpbCA9IHQwO1xuICBzbGVlcCh0aW1lKTtcbn1cblxuZnVuY3Rpb24gc2xlZXAodGltZSkge1xuICBpZiAoZnJhbWUpIHJldHVybjsgLy8gU29vbmVzdCBhbGFybSBhbHJlYWR5IHNldCwgb3Igd2lsbCBiZS5cbiAgaWYgKHRpbWVvdXQpIHRpbWVvdXQgPSBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gIHZhciBkZWxheSA9IHRpbWUgLSBjbG9ja05vdzsgLy8gU3RyaWN0bHkgbGVzcyB0aGFuIGlmIHdlIHJlY29tcHV0ZWQgY2xvY2tOb3cuXG4gIGlmIChkZWxheSA+IDI0KSB7XG4gICAgaWYgKHRpbWUgPCBJbmZpbml0eSkgdGltZW91dCA9IHNldFRpbWVvdXQod2FrZSwgdGltZSAtIGNsb2NrLm5vdygpIC0gY2xvY2tTa2V3KTtcbiAgICBpZiAoaW50ZXJ2YWwpIGludGVydmFsID0gY2xlYXJJbnRlcnZhbChpbnRlcnZhbCk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKCFpbnRlcnZhbCkgY2xvY2tMYXN0ID0gY2xvY2subm93KCksIGludGVydmFsID0gc2V0SW50ZXJ2YWwocG9rZSwgcG9rZURlbGF5KTtcbiAgICBmcmFtZSA9IDEsIHNldEZyYW1lKHdha2UpO1xuICB9XG59XG4iLCJpbXBvcnQge1RpbWVyfSBmcm9tIFwiLi90aW1lci5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjYWxsYmFjaywgZGVsYXksIHRpbWUpIHtcbiAgdmFyIHQgPSBuZXcgVGltZXI7XG4gIGRlbGF5ID0gZGVsYXkgPT0gbnVsbCA/IDAgOiArZGVsYXk7XG4gIHQucmVzdGFydChlbGFwc2VkID0+IHtcbiAgICB0LnN0b3AoKTtcbiAgICBjYWxsYmFjayhlbGFwc2VkICsgZGVsYXkpO1xuICB9LCBkZWxheSwgdGltZSk7XG4gIHJldHVybiB0O1xufVxuIiwiaW1wb3J0IHtkaXNwYXRjaH0gZnJvbSBcImQzLWRpc3BhdGNoXCI7XG5pbXBvcnQge3RpbWVyLCB0aW1lb3V0fSBmcm9tIFwiZDMtdGltZXJcIjtcblxudmFyIGVtcHR5T24gPSBkaXNwYXRjaChcInN0YXJ0XCIsIFwiZW5kXCIsIFwiY2FuY2VsXCIsIFwiaW50ZXJydXB0XCIpO1xudmFyIGVtcHR5VHdlZW4gPSBbXTtcblxuZXhwb3J0IHZhciBDUkVBVEVEID0gMDtcbmV4cG9ydCB2YXIgU0NIRURVTEVEID0gMTtcbmV4cG9ydCB2YXIgU1RBUlRJTkcgPSAyO1xuZXhwb3J0IHZhciBTVEFSVEVEID0gMztcbmV4cG9ydCB2YXIgUlVOTklORyA9IDQ7XG5leHBvcnQgdmFyIEVORElORyA9IDU7XG5leHBvcnQgdmFyIEVOREVEID0gNjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obm9kZSwgbmFtZSwgaWQsIGluZGV4LCBncm91cCwgdGltaW5nKSB7XG4gIHZhciBzY2hlZHVsZXMgPSBub2RlLl9fdHJhbnNpdGlvbjtcbiAgaWYgKCFzY2hlZHVsZXMpIG5vZGUuX190cmFuc2l0aW9uID0ge307XG4gIGVsc2UgaWYgKGlkIGluIHNjaGVkdWxlcykgcmV0dXJuO1xuICBjcmVhdGUobm9kZSwgaWQsIHtcbiAgICBuYW1lOiBuYW1lLFxuICAgIGluZGV4OiBpbmRleCwgLy8gRm9yIGNvbnRleHQgZHVyaW5nIGNhbGxiYWNrLlxuICAgIGdyb3VwOiBncm91cCwgLy8gRm9yIGNvbnRleHQgZHVyaW5nIGNhbGxiYWNrLlxuICAgIG9uOiBlbXB0eU9uLFxuICAgIHR3ZWVuOiBlbXB0eVR3ZWVuLFxuICAgIHRpbWU6IHRpbWluZy50aW1lLFxuICAgIGRlbGF5OiB0aW1pbmcuZGVsYXksXG4gICAgZHVyYXRpb246IHRpbWluZy5kdXJhdGlvbixcbiAgICBlYXNlOiB0aW1pbmcuZWFzZSxcbiAgICB0aW1lcjogbnVsbCxcbiAgICBzdGF0ZTogQ1JFQVRFRFxuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluaXQobm9kZSwgaWQpIHtcbiAgdmFyIHNjaGVkdWxlID0gZ2V0KG5vZGUsIGlkKTtcbiAgaWYgKHNjaGVkdWxlLnN0YXRlID4gQ1JFQVRFRCkgdGhyb3cgbmV3IEVycm9yKFwidG9vIGxhdGU7IGFscmVhZHkgc2NoZWR1bGVkXCIpO1xuICByZXR1cm4gc2NoZWR1bGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXQobm9kZSwgaWQpIHtcbiAgdmFyIHNjaGVkdWxlID0gZ2V0KG5vZGUsIGlkKTtcbiAgaWYgKHNjaGVkdWxlLnN0YXRlID4gU1RBUlRFRCkgdGhyb3cgbmV3IEVycm9yKFwidG9vIGxhdGU7IGFscmVhZHkgcnVubmluZ1wiKTtcbiAgcmV0dXJuIHNjaGVkdWxlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0KG5vZGUsIGlkKSB7XG4gIHZhciBzY2hlZHVsZSA9IG5vZGUuX190cmFuc2l0aW9uO1xuICBpZiAoIXNjaGVkdWxlIHx8ICEoc2NoZWR1bGUgPSBzY2hlZHVsZVtpZF0pKSB0aHJvdyBuZXcgRXJyb3IoXCJ0cmFuc2l0aW9uIG5vdCBmb3VuZFwiKTtcbiAgcmV0dXJuIHNjaGVkdWxlO1xufVxuXG5mdW5jdGlvbiBjcmVhdGUobm9kZSwgaWQsIHNlbGYpIHtcbiAgdmFyIHNjaGVkdWxlcyA9IG5vZGUuX190cmFuc2l0aW9uLFxuICAgICAgdHdlZW47XG5cbiAgLy8gSW5pdGlhbGl6ZSB0aGUgc2VsZiB0aW1lciB3aGVuIHRoZSB0cmFuc2l0aW9uIGlzIGNyZWF0ZWQuXG4gIC8vIE5vdGUgdGhlIGFjdHVhbCBkZWxheSBpcyBub3Qga25vd24gdW50aWwgdGhlIGZpcnN0IGNhbGxiYWNrIVxuICBzY2hlZHVsZXNbaWRdID0gc2VsZjtcbiAgc2VsZi50aW1lciA9IHRpbWVyKHNjaGVkdWxlLCAwLCBzZWxmLnRpbWUpO1xuXG4gIGZ1bmN0aW9uIHNjaGVkdWxlKGVsYXBzZWQpIHtcbiAgICBzZWxmLnN0YXRlID0gU0NIRURVTEVEO1xuICAgIHNlbGYudGltZXIucmVzdGFydChzdGFydCwgc2VsZi5kZWxheSwgc2VsZi50aW1lKTtcblxuICAgIC8vIElmIHRoZSBlbGFwc2VkIGRlbGF5IGlzIGxlc3MgdGhhbiBvdXIgZmlyc3Qgc2xlZXAsIHN0YXJ0IGltbWVkaWF0ZWx5LlxuICAgIGlmIChzZWxmLmRlbGF5IDw9IGVsYXBzZWQpIHN0YXJ0KGVsYXBzZWQgLSBzZWxmLmRlbGF5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHN0YXJ0KGVsYXBzZWQpIHtcbiAgICB2YXIgaSwgaiwgbiwgbztcblxuICAgIC8vIElmIHRoZSBzdGF0ZSBpcyBub3QgU0NIRURVTEVELCB0aGVuIHdlIHByZXZpb3VzbHkgZXJyb3JlZCBvbiBzdGFydC5cbiAgICBpZiAoc2VsZi5zdGF0ZSAhPT0gU0NIRURVTEVEKSByZXR1cm4gc3RvcCgpO1xuXG4gICAgZm9yIChpIGluIHNjaGVkdWxlcykge1xuICAgICAgbyA9IHNjaGVkdWxlc1tpXTtcbiAgICAgIGlmIChvLm5hbWUgIT09IHNlbGYubmFtZSkgY29udGludWU7XG5cbiAgICAgIC8vIFdoaWxlIHRoaXMgZWxlbWVudCBhbHJlYWR5IGhhcyBhIHN0YXJ0aW5nIHRyYW5zaXRpb24gZHVyaW5nIHRoaXMgZnJhbWUsXG4gICAgICAvLyBkZWZlciBzdGFydGluZyBhbiBpbnRlcnJ1cHRpbmcgdHJhbnNpdGlvbiB1bnRpbCB0aGF0IHRyYW5zaXRpb24gaGFzIGFcbiAgICAgIC8vIGNoYW5jZSB0byB0aWNrIChhbmQgcG9zc2libHkgZW5kKTsgc2VlIGQzL2QzLXRyYW5zaXRpb24jNTQhXG4gICAgICBpZiAoby5zdGF0ZSA9PT0gU1RBUlRFRCkgcmV0dXJuIHRpbWVvdXQoc3RhcnQpO1xuXG4gICAgICAvLyBJbnRlcnJ1cHQgdGhlIGFjdGl2ZSB0cmFuc2l0aW9uLCBpZiBhbnkuXG4gICAgICBpZiAoby5zdGF0ZSA9PT0gUlVOTklORykge1xuICAgICAgICBvLnN0YXRlID0gRU5ERUQ7XG4gICAgICAgIG8udGltZXIuc3RvcCgpO1xuICAgICAgICBvLm9uLmNhbGwoXCJpbnRlcnJ1cHRcIiwgbm9kZSwgbm9kZS5fX2RhdGFfXywgby5pbmRleCwgby5ncm91cCk7XG4gICAgICAgIGRlbGV0ZSBzY2hlZHVsZXNbaV07XG4gICAgICB9XG5cbiAgICAgIC8vIENhbmNlbCBhbnkgcHJlLWVtcHRlZCB0cmFuc2l0aW9ucy5cbiAgICAgIGVsc2UgaWYgKCtpIDwgaWQpIHtcbiAgICAgICAgby5zdGF0ZSA9IEVOREVEO1xuICAgICAgICBvLnRpbWVyLnN0b3AoKTtcbiAgICAgICAgby5vbi5jYWxsKFwiY2FuY2VsXCIsIG5vZGUsIG5vZGUuX19kYXRhX18sIG8uaW5kZXgsIG8uZ3JvdXApO1xuICAgICAgICBkZWxldGUgc2NoZWR1bGVzW2ldO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIERlZmVyIHRoZSBmaXJzdCB0aWNrIHRvIGVuZCBvZiB0aGUgY3VycmVudCBmcmFtZTsgc2VlIGQzL2QzIzE1NzYuXG4gICAgLy8gTm90ZSB0aGUgdHJhbnNpdGlvbiBtYXkgYmUgY2FuY2VsZWQgYWZ0ZXIgc3RhcnQgYW5kIGJlZm9yZSB0aGUgZmlyc3QgdGljayFcbiAgICAvLyBOb3RlIHRoaXMgbXVzdCBiZSBzY2hlZHVsZWQgYmVmb3JlIHRoZSBzdGFydCBldmVudDsgc2VlIGQzL2QzLXRyYW5zaXRpb24jMTYhXG4gICAgLy8gQXNzdW1pbmcgdGhpcyBpcyBzdWNjZXNzZnVsLCBzdWJzZXF1ZW50IGNhbGxiYWNrcyBnbyBzdHJhaWdodCB0byB0aWNrLlxuICAgIHRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoc2VsZi5zdGF0ZSA9PT0gU1RBUlRFRCkge1xuICAgICAgICBzZWxmLnN0YXRlID0gUlVOTklORztcbiAgICAgICAgc2VsZi50aW1lci5yZXN0YXJ0KHRpY2ssIHNlbGYuZGVsYXksIHNlbGYudGltZSk7XG4gICAgICAgIHRpY2soZWxhcHNlZCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBEaXNwYXRjaCB0aGUgc3RhcnQgZXZlbnQuXG4gICAgLy8gTm90ZSB0aGlzIG11c3QgYmUgZG9uZSBiZWZvcmUgdGhlIHR3ZWVuIGFyZSBpbml0aWFsaXplZC5cbiAgICBzZWxmLnN0YXRlID0gU1RBUlRJTkc7XG4gICAgc2VsZi5vbi5jYWxsKFwic3RhcnRcIiwgbm9kZSwgbm9kZS5fX2RhdGFfXywgc2VsZi5pbmRleCwgc2VsZi5ncm91cCk7XG4gICAgaWYgKHNlbGYuc3RhdGUgIT09IFNUQVJUSU5HKSByZXR1cm47IC8vIGludGVycnVwdGVkXG4gICAgc2VsZi5zdGF0ZSA9IFNUQVJURUQ7XG5cbiAgICAvLyBJbml0aWFsaXplIHRoZSB0d2VlbiwgZGVsZXRpbmcgbnVsbCB0d2Vlbi5cbiAgICB0d2VlbiA9IG5ldyBBcnJheShuID0gc2VsZi50d2Vlbi5sZW5ndGgpO1xuICAgIGZvciAoaSA9IDAsIGogPSAtMTsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG8gPSBzZWxmLnR3ZWVuW2ldLnZhbHVlLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgc2VsZi5pbmRleCwgc2VsZi5ncm91cCkpIHtcbiAgICAgICAgdHdlZW5bKytqXSA9IG87XG4gICAgICB9XG4gICAgfVxuICAgIHR3ZWVuLmxlbmd0aCA9IGogKyAxO1xuICB9XG5cbiAgZnVuY3Rpb24gdGljayhlbGFwc2VkKSB7XG4gICAgdmFyIHQgPSBlbGFwc2VkIDwgc2VsZi5kdXJhdGlvbiA/IHNlbGYuZWFzZS5jYWxsKG51bGwsIGVsYXBzZWQgLyBzZWxmLmR1cmF0aW9uKSA6IChzZWxmLnRpbWVyLnJlc3RhcnQoc3RvcCksIHNlbGYuc3RhdGUgPSBFTkRJTkcsIDEpLFxuICAgICAgICBpID0gLTEsXG4gICAgICAgIG4gPSB0d2Vlbi5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgdHdlZW5baV0uY2FsbChub2RlLCB0KTtcbiAgICB9XG5cbiAgICAvLyBEaXNwYXRjaCB0aGUgZW5kIGV2ZW50LlxuICAgIGlmIChzZWxmLnN0YXRlID09PSBFTkRJTkcpIHtcbiAgICAgIHNlbGYub24uY2FsbChcImVuZFwiLCBub2RlLCBub2RlLl9fZGF0YV9fLCBzZWxmLmluZGV4LCBzZWxmLmdyb3VwKTtcbiAgICAgIHN0b3AoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzdG9wKCkge1xuICAgIHNlbGYuc3RhdGUgPSBFTkRFRDtcbiAgICBzZWxmLnRpbWVyLnN0b3AoKTtcbiAgICBkZWxldGUgc2NoZWR1bGVzW2lkXTtcbiAgICBmb3IgKHZhciBpIGluIHNjaGVkdWxlcykgcmV0dXJuOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgZGVsZXRlIG5vZGUuX190cmFuc2l0aW9uO1xuICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHJldHVybiBhID0gK2EsIGIgPSArYiwgZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBhICogKDEgLSB0KSArIGIgKiB0O1xuICB9O1xufVxuIiwidmFyIGRlZ3JlZXMgPSAxODAgLyBNYXRoLlBJO1xuXG5leHBvcnQgdmFyIGlkZW50aXR5ID0ge1xuICB0cmFuc2xhdGVYOiAwLFxuICB0cmFuc2xhdGVZOiAwLFxuICByb3RhdGU6IDAsXG4gIHNrZXdYOiAwLFxuICBzY2FsZVg6IDEsXG4gIHNjYWxlWTogMVxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYiwgYywgZCwgZSwgZikge1xuICB2YXIgc2NhbGVYLCBzY2FsZVksIHNrZXdYO1xuICBpZiAoc2NhbGVYID0gTWF0aC5zcXJ0KGEgKiBhICsgYiAqIGIpKSBhIC89IHNjYWxlWCwgYiAvPSBzY2FsZVg7XG4gIGlmIChza2V3WCA9IGEgKiBjICsgYiAqIGQpIGMgLT0gYSAqIHNrZXdYLCBkIC09IGIgKiBza2V3WDtcbiAgaWYgKHNjYWxlWSA9IE1hdGguc3FydChjICogYyArIGQgKiBkKSkgYyAvPSBzY2FsZVksIGQgLz0gc2NhbGVZLCBza2V3WCAvPSBzY2FsZVk7XG4gIGlmIChhICogZCA8IGIgKiBjKSBhID0gLWEsIGIgPSAtYiwgc2tld1ggPSAtc2tld1gsIHNjYWxlWCA9IC1zY2FsZVg7XG4gIHJldHVybiB7XG4gICAgdHJhbnNsYXRlWDogZSxcbiAgICB0cmFuc2xhdGVZOiBmLFxuICAgIHJvdGF0ZTogTWF0aC5hdGFuMihiLCBhKSAqIGRlZ3JlZXMsXG4gICAgc2tld1g6IE1hdGguYXRhbihza2V3WCkgKiBkZWdyZWVzLFxuICAgIHNjYWxlWDogc2NhbGVYLFxuICAgIHNjYWxlWTogc2NhbGVZXG4gIH07XG59XG4iLCJpbXBvcnQgZGVjb21wb3NlLCB7aWRlbnRpdHl9IGZyb20gXCIuL2RlY29tcG9zZS5qc1wiO1xuXG52YXIgc3ZnTm9kZTtcblxuLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZWYgKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUNzcyh2YWx1ZSkge1xuICBjb25zdCBtID0gbmV3ICh0eXBlb2YgRE9NTWF0cml4ID09PSBcImZ1bmN0aW9uXCIgPyBET01NYXRyaXggOiBXZWJLaXRDU1NNYXRyaXgpKHZhbHVlICsgXCJcIik7XG4gIHJldHVybiBtLmlzSWRlbnRpdHkgPyBpZGVudGl0eSA6IGRlY29tcG9zZShtLmEsIG0uYiwgbS5jLCBtLmQsIG0uZSwgbS5mKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlU3ZnKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSByZXR1cm4gaWRlbnRpdHk7XG4gIGlmICghc3ZnTm9kZSkgc3ZnTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsIFwiZ1wiKTtcbiAgc3ZnTm9kZS5zZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIiwgdmFsdWUpO1xuICBpZiAoISh2YWx1ZSA9IHN2Z05vZGUudHJhbnNmb3JtLmJhc2VWYWwuY29uc29saWRhdGUoKSkpIHJldHVybiBpZGVudGl0eTtcbiAgdmFsdWUgPSB2YWx1ZS5tYXRyaXg7XG4gIHJldHVybiBkZWNvbXBvc2UodmFsdWUuYSwgdmFsdWUuYiwgdmFsdWUuYywgdmFsdWUuZCwgdmFsdWUuZSwgdmFsdWUuZik7XG59XG4iLCJpbXBvcnQgbnVtYmVyIGZyb20gXCIuLi9udW1iZXIuanNcIjtcbmltcG9ydCB7cGFyc2VDc3MsIHBhcnNlU3ZnfSBmcm9tIFwiLi9wYXJzZS5qc1wiO1xuXG5mdW5jdGlvbiBpbnRlcnBvbGF0ZVRyYW5zZm9ybShwYXJzZSwgcHhDb21tYSwgcHhQYXJlbiwgZGVnUGFyZW4pIHtcblxuICBmdW5jdGlvbiBwb3Aocykge1xuICAgIHJldHVybiBzLmxlbmd0aCA/IHMucG9wKCkgKyBcIiBcIiA6IFwiXCI7XG4gIH1cblxuICBmdW5jdGlvbiB0cmFuc2xhdGUoeGEsIHlhLCB4YiwgeWIsIHMsIHEpIHtcbiAgICBpZiAoeGEgIT09IHhiIHx8IHlhICE9PSB5Yikge1xuICAgICAgdmFyIGkgPSBzLnB1c2goXCJ0cmFuc2xhdGUoXCIsIG51bGwsIHB4Q29tbWEsIG51bGwsIHB4UGFyZW4pO1xuICAgICAgcS5wdXNoKHtpOiBpIC0gNCwgeDogbnVtYmVyKHhhLCB4Yil9LCB7aTogaSAtIDIsIHg6IG51bWJlcih5YSwgeWIpfSk7XG4gICAgfSBlbHNlIGlmICh4YiB8fCB5Yikge1xuICAgICAgcy5wdXNoKFwidHJhbnNsYXRlKFwiICsgeGIgKyBweENvbW1hICsgeWIgKyBweFBhcmVuKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByb3RhdGUoYSwgYiwgcywgcSkge1xuICAgIGlmIChhICE9PSBiKSB7XG4gICAgICBpZiAoYSAtIGIgPiAxODApIGIgKz0gMzYwOyBlbHNlIGlmIChiIC0gYSA+IDE4MCkgYSArPSAzNjA7IC8vIHNob3J0ZXN0IHBhdGhcbiAgICAgIHEucHVzaCh7aTogcy5wdXNoKHBvcChzKSArIFwicm90YXRlKFwiLCBudWxsLCBkZWdQYXJlbikgLSAyLCB4OiBudW1iZXIoYSwgYil9KTtcbiAgICB9IGVsc2UgaWYgKGIpIHtcbiAgICAgIHMucHVzaChwb3AocykgKyBcInJvdGF0ZShcIiArIGIgKyBkZWdQYXJlbik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2tld1goYSwgYiwgcywgcSkge1xuICAgIGlmIChhICE9PSBiKSB7XG4gICAgICBxLnB1c2goe2k6IHMucHVzaChwb3AocykgKyBcInNrZXdYKFwiLCBudWxsLCBkZWdQYXJlbikgLSAyLCB4OiBudW1iZXIoYSwgYil9KTtcbiAgICB9IGVsc2UgaWYgKGIpIHtcbiAgICAgIHMucHVzaChwb3AocykgKyBcInNrZXdYKFwiICsgYiArIGRlZ1BhcmVuKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzY2FsZSh4YSwgeWEsIHhiLCB5YiwgcywgcSkge1xuICAgIGlmICh4YSAhPT0geGIgfHwgeWEgIT09IHliKSB7XG4gICAgICB2YXIgaSA9IHMucHVzaChwb3AocykgKyBcInNjYWxlKFwiLCBudWxsLCBcIixcIiwgbnVsbCwgXCIpXCIpO1xuICAgICAgcS5wdXNoKHtpOiBpIC0gNCwgeDogbnVtYmVyKHhhLCB4Yil9LCB7aTogaSAtIDIsIHg6IG51bWJlcih5YSwgeWIpfSk7XG4gICAgfSBlbHNlIGlmICh4YiAhPT0gMSB8fCB5YiAhPT0gMSkge1xuICAgICAgcy5wdXNoKHBvcChzKSArIFwic2NhbGUoXCIgKyB4YiArIFwiLFwiICsgeWIgKyBcIilcIik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKGEsIGIpIHtcbiAgICB2YXIgcyA9IFtdLCAvLyBzdHJpbmcgY29uc3RhbnRzIGFuZCBwbGFjZWhvbGRlcnNcbiAgICAgICAgcSA9IFtdOyAvLyBudW1iZXIgaW50ZXJwb2xhdG9yc1xuICAgIGEgPSBwYXJzZShhKSwgYiA9IHBhcnNlKGIpO1xuICAgIHRyYW5zbGF0ZShhLnRyYW5zbGF0ZVgsIGEudHJhbnNsYXRlWSwgYi50cmFuc2xhdGVYLCBiLnRyYW5zbGF0ZVksIHMsIHEpO1xuICAgIHJvdGF0ZShhLnJvdGF0ZSwgYi5yb3RhdGUsIHMsIHEpO1xuICAgIHNrZXdYKGEuc2tld1gsIGIuc2tld1gsIHMsIHEpO1xuICAgIHNjYWxlKGEuc2NhbGVYLCBhLnNjYWxlWSwgYi5zY2FsZVgsIGIuc2NhbGVZLCBzLCBxKTtcbiAgICBhID0gYiA9IG51bGw7IC8vIGdjXG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgIHZhciBpID0gLTEsIG4gPSBxLmxlbmd0aCwgbztcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBzWyhvID0gcVtpXSkuaV0gPSBvLngodCk7XG4gICAgICByZXR1cm4gcy5qb2luKFwiXCIpO1xuICAgIH07XG4gIH07XG59XG5cbmV4cG9ydCB2YXIgaW50ZXJwb2xhdGVUcmFuc2Zvcm1Dc3MgPSBpbnRlcnBvbGF0ZVRyYW5zZm9ybShwYXJzZUNzcywgXCJweCwgXCIsIFwicHgpXCIsIFwiZGVnKVwiKTtcbmV4cG9ydCB2YXIgaW50ZXJwb2xhdGVUcmFuc2Zvcm1TdmcgPSBpbnRlcnBvbGF0ZVRyYW5zZm9ybShwYXJzZVN2ZywgXCIsIFwiLCBcIilcIiwgXCIpXCIpO1xuIiwiaW1wb3J0IHtnZXQsIHNldH0gZnJvbSBcIi4vc2NoZWR1bGUuanNcIjtcblxuZnVuY3Rpb24gdHdlZW5SZW1vdmUoaWQsIG5hbWUpIHtcbiAgdmFyIHR3ZWVuMCwgdHdlZW4xO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNjaGVkdWxlID0gc2V0KHRoaXMsIGlkKSxcbiAgICAgICAgdHdlZW4gPSBzY2hlZHVsZS50d2VlbjtcblxuICAgIC8vIElmIHRoaXMgbm9kZSBzaGFyZWQgdHdlZW4gd2l0aCB0aGUgcHJldmlvdXMgbm9kZSxcbiAgICAvLyBqdXN0IGFzc2lnbiB0aGUgdXBkYXRlZCBzaGFyZWQgdHdlZW4gYW5kIHdl4oCZcmUgZG9uZSFcbiAgICAvLyBPdGhlcndpc2UsIGNvcHktb24td3JpdGUuXG4gICAgaWYgKHR3ZWVuICE9PSB0d2VlbjApIHtcbiAgICAgIHR3ZWVuMSA9IHR3ZWVuMCA9IHR3ZWVuO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIG4gPSB0d2VlbjEubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGlmICh0d2VlbjFbaV0ubmFtZSA9PT0gbmFtZSkge1xuICAgICAgICAgIHR3ZWVuMSA9IHR3ZWVuMS5zbGljZSgpO1xuICAgICAgICAgIHR3ZWVuMS5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBzY2hlZHVsZS50d2VlbiA9IHR3ZWVuMTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdHdlZW5GdW5jdGlvbihpZCwgbmFtZSwgdmFsdWUpIHtcbiAgdmFyIHR3ZWVuMCwgdHdlZW4xO1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzY2hlZHVsZSA9IHNldCh0aGlzLCBpZCksXG4gICAgICAgIHR3ZWVuID0gc2NoZWR1bGUudHdlZW47XG5cbiAgICAvLyBJZiB0aGlzIG5vZGUgc2hhcmVkIHR3ZWVuIHdpdGggdGhlIHByZXZpb3VzIG5vZGUsXG4gICAgLy8ganVzdCBhc3NpZ24gdGhlIHVwZGF0ZWQgc2hhcmVkIHR3ZWVuIGFuZCB3ZeKAmXJlIGRvbmUhXG4gICAgLy8gT3RoZXJ3aXNlLCBjb3B5LW9uLXdyaXRlLlxuICAgIGlmICh0d2VlbiAhPT0gdHdlZW4wKSB7XG4gICAgICB0d2VlbjEgPSAodHdlZW4wID0gdHdlZW4pLnNsaWNlKCk7XG4gICAgICBmb3IgKHZhciB0ID0ge25hbWU6IG5hbWUsIHZhbHVlOiB2YWx1ZX0sIGkgPSAwLCBuID0gdHdlZW4xLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgICBpZiAodHdlZW4xW2ldLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgICB0d2VlbjFbaV0gPSB0O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoaSA9PT0gbikgdHdlZW4xLnB1c2godCk7XG4gICAgfVxuXG4gICAgc2NoZWR1bGUudHdlZW4gPSB0d2VlbjE7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHZhciBpZCA9IHRoaXMuX2lkO1xuXG4gIG5hbWUgKz0gXCJcIjtcblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICB2YXIgdHdlZW4gPSBnZXQodGhpcy5ub2RlKCksIGlkKS50d2VlbjtcbiAgICBmb3IgKHZhciBpID0gMCwgbiA9IHR3ZWVuLmxlbmd0aCwgdDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKCh0ID0gdHdlZW5baV0pLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHQudmFsdWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuZWFjaCgodmFsdWUgPT0gbnVsbCA/IHR3ZWVuUmVtb3ZlIDogdHdlZW5GdW5jdGlvbikoaWQsIG5hbWUsIHZhbHVlKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0d2VlblZhbHVlKHRyYW5zaXRpb24sIG5hbWUsIHZhbHVlKSB7XG4gIHZhciBpZCA9IHRyYW5zaXRpb24uX2lkO1xuXG4gIHRyYW5zaXRpb24uZWFjaChmdW5jdGlvbigpIHtcbiAgICB2YXIgc2NoZWR1bGUgPSBzZXQodGhpcywgaWQpO1xuICAgIChzY2hlZHVsZS52YWx1ZSB8fCAoc2NoZWR1bGUudmFsdWUgPSB7fSkpW25hbWVdID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICByZXR1cm4gZ2V0KG5vZGUsIGlkKS52YWx1ZVtuYW1lXTtcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNvbnN0cnVjdG9yLCBmYWN0b3J5LCBwcm90b3R5cGUpIHtcbiAgY29uc3RydWN0b3IucHJvdG90eXBlID0gZmFjdG9yeS5wcm90b3R5cGUgPSBwcm90b3R5cGU7XG4gIHByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGNvbnN0cnVjdG9yO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXh0ZW5kKHBhcmVudCwgZGVmaW5pdGlvbikge1xuICB2YXIgcHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShwYXJlbnQucHJvdG90eXBlKTtcbiAgZm9yICh2YXIga2V5IGluIGRlZmluaXRpb24pIHByb3RvdHlwZVtrZXldID0gZGVmaW5pdGlvbltrZXldO1xuICByZXR1cm4gcHJvdG90eXBlO1xufVxuIiwiaW1wb3J0IGRlZmluZSwge2V4dGVuZH0gZnJvbSBcIi4vZGVmaW5lLmpzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBDb2xvcigpIHt9XG5cbmV4cG9ydCB2YXIgZGFya2VyID0gMC43O1xuZXhwb3J0IHZhciBicmlnaHRlciA9IDEgLyBkYXJrZXI7XG5cbnZhciByZUkgPSBcIlxcXFxzKihbKy1dP1xcXFxkKylcXFxccypcIixcbiAgICByZU4gPSBcIlxcXFxzKihbKy1dPyg/OlxcXFxkKlxcXFwuKT9cXFxcZCsoPzpbZUVdWystXT9cXFxcZCspPylcXFxccypcIixcbiAgICByZVAgPSBcIlxcXFxzKihbKy1dPyg/OlxcXFxkKlxcXFwuKT9cXFxcZCsoPzpbZUVdWystXT9cXFxcZCspPyklXFxcXHMqXCIsXG4gICAgcmVIZXggPSAvXiMoWzAtOWEtZl17Myw4fSkkLyxcbiAgICByZVJnYkludGVnZXIgPSBuZXcgUmVnRXhwKGBecmdiXFxcXCgke3JlSX0sJHtyZUl9LCR7cmVJfVxcXFwpJGApLFxuICAgIHJlUmdiUGVyY2VudCA9IG5ldyBSZWdFeHAoYF5yZ2JcXFxcKCR7cmVQfSwke3JlUH0sJHtyZVB9XFxcXCkkYCksXG4gICAgcmVSZ2JhSW50ZWdlciA9IG5ldyBSZWdFeHAoYF5yZ2JhXFxcXCgke3JlSX0sJHtyZUl9LCR7cmVJfSwke3JlTn1cXFxcKSRgKSxcbiAgICByZVJnYmFQZXJjZW50ID0gbmV3IFJlZ0V4cChgXnJnYmFcXFxcKCR7cmVQfSwke3JlUH0sJHtyZVB9LCR7cmVOfVxcXFwpJGApLFxuICAgIHJlSHNsUGVyY2VudCA9IG5ldyBSZWdFeHAoYF5oc2xcXFxcKCR7cmVOfSwke3JlUH0sJHtyZVB9XFxcXCkkYCksXG4gICAgcmVIc2xhUGVyY2VudCA9IG5ldyBSZWdFeHAoYF5oc2xhXFxcXCgke3JlTn0sJHtyZVB9LCR7cmVQfSwke3JlTn1cXFxcKSRgKTtcblxudmFyIG5hbWVkID0ge1xuICBhbGljZWJsdWU6IDB4ZjBmOGZmLFxuICBhbnRpcXVld2hpdGU6IDB4ZmFlYmQ3LFxuICBhcXVhOiAweDAwZmZmZixcbiAgYXF1YW1hcmluZTogMHg3ZmZmZDQsXG4gIGF6dXJlOiAweGYwZmZmZixcbiAgYmVpZ2U6IDB4ZjVmNWRjLFxuICBiaXNxdWU6IDB4ZmZlNGM0LFxuICBibGFjazogMHgwMDAwMDAsXG4gIGJsYW5jaGVkYWxtb25kOiAweGZmZWJjZCxcbiAgYmx1ZTogMHgwMDAwZmYsXG4gIGJsdWV2aW9sZXQ6IDB4OGEyYmUyLFxuICBicm93bjogMHhhNTJhMmEsXG4gIGJ1cmx5d29vZDogMHhkZWI4ODcsXG4gIGNhZGV0Ymx1ZTogMHg1ZjllYTAsXG4gIGNoYXJ0cmV1c2U6IDB4N2ZmZjAwLFxuICBjaG9jb2xhdGU6IDB4ZDI2OTFlLFxuICBjb3JhbDogMHhmZjdmNTAsXG4gIGNvcm5mbG93ZXJibHVlOiAweDY0OTVlZCxcbiAgY29ybnNpbGs6IDB4ZmZmOGRjLFxuICBjcmltc29uOiAweGRjMTQzYyxcbiAgY3lhbjogMHgwMGZmZmYsXG4gIGRhcmtibHVlOiAweDAwMDA4YixcbiAgZGFya2N5YW46IDB4MDA4YjhiLFxuICBkYXJrZ29sZGVucm9kOiAweGI4ODYwYixcbiAgZGFya2dyYXk6IDB4YTlhOWE5LFxuICBkYXJrZ3JlZW46IDB4MDA2NDAwLFxuICBkYXJrZ3JleTogMHhhOWE5YTksXG4gIGRhcmtraGFraTogMHhiZGI3NmIsXG4gIGRhcmttYWdlbnRhOiAweDhiMDA4YixcbiAgZGFya29saXZlZ3JlZW46IDB4NTU2YjJmLFxuICBkYXJrb3JhbmdlOiAweGZmOGMwMCxcbiAgZGFya29yY2hpZDogMHg5OTMyY2MsXG4gIGRhcmtyZWQ6IDB4OGIwMDAwLFxuICBkYXJrc2FsbW9uOiAweGU5OTY3YSxcbiAgZGFya3NlYWdyZWVuOiAweDhmYmM4ZixcbiAgZGFya3NsYXRlYmx1ZTogMHg0ODNkOGIsXG4gIGRhcmtzbGF0ZWdyYXk6IDB4MmY0ZjRmLFxuICBkYXJrc2xhdGVncmV5OiAweDJmNGY0ZixcbiAgZGFya3R1cnF1b2lzZTogMHgwMGNlZDEsXG4gIGRhcmt2aW9sZXQ6IDB4OTQwMGQzLFxuICBkZWVwcGluazogMHhmZjE0OTMsXG4gIGRlZXBza3libHVlOiAweDAwYmZmZixcbiAgZGltZ3JheTogMHg2OTY5NjksXG4gIGRpbWdyZXk6IDB4Njk2OTY5LFxuICBkb2RnZXJibHVlOiAweDFlOTBmZixcbiAgZmlyZWJyaWNrOiAweGIyMjIyMixcbiAgZmxvcmFsd2hpdGU6IDB4ZmZmYWYwLFxuICBmb3Jlc3RncmVlbjogMHgyMjhiMjIsXG4gIGZ1Y2hzaWE6IDB4ZmYwMGZmLFxuICBnYWluc2Jvcm86IDB4ZGNkY2RjLFxuICBnaG9zdHdoaXRlOiAweGY4ZjhmZixcbiAgZ29sZDogMHhmZmQ3MDAsXG4gIGdvbGRlbnJvZDogMHhkYWE1MjAsXG4gIGdyYXk6IDB4ODA4MDgwLFxuICBncmVlbjogMHgwMDgwMDAsXG4gIGdyZWVueWVsbG93OiAweGFkZmYyZixcbiAgZ3JleTogMHg4MDgwODAsXG4gIGhvbmV5ZGV3OiAweGYwZmZmMCxcbiAgaG90cGluazogMHhmZjY5YjQsXG4gIGluZGlhbnJlZDogMHhjZDVjNWMsXG4gIGluZGlnbzogMHg0YjAwODIsXG4gIGl2b3J5OiAweGZmZmZmMCxcbiAga2hha2k6IDB4ZjBlNjhjLFxuICBsYXZlbmRlcjogMHhlNmU2ZmEsXG4gIGxhdmVuZGVyYmx1c2g6IDB4ZmZmMGY1LFxuICBsYXduZ3JlZW46IDB4N2NmYzAwLFxuICBsZW1vbmNoaWZmb246IDB4ZmZmYWNkLFxuICBsaWdodGJsdWU6IDB4YWRkOGU2LFxuICBsaWdodGNvcmFsOiAweGYwODA4MCxcbiAgbGlnaHRjeWFuOiAweGUwZmZmZixcbiAgbGlnaHRnb2xkZW5yb2R5ZWxsb3c6IDB4ZmFmYWQyLFxuICBsaWdodGdyYXk6IDB4ZDNkM2QzLFxuICBsaWdodGdyZWVuOiAweDkwZWU5MCxcbiAgbGlnaHRncmV5OiAweGQzZDNkMyxcbiAgbGlnaHRwaW5rOiAweGZmYjZjMSxcbiAgbGlnaHRzYWxtb246IDB4ZmZhMDdhLFxuICBsaWdodHNlYWdyZWVuOiAweDIwYjJhYSxcbiAgbGlnaHRza3libHVlOiAweDg3Y2VmYSxcbiAgbGlnaHRzbGF0ZWdyYXk6IDB4Nzc4ODk5LFxuICBsaWdodHNsYXRlZ3JleTogMHg3Nzg4OTksXG4gIGxpZ2h0c3RlZWxibHVlOiAweGIwYzRkZSxcbiAgbGlnaHR5ZWxsb3c6IDB4ZmZmZmUwLFxuICBsaW1lOiAweDAwZmYwMCxcbiAgbGltZWdyZWVuOiAweDMyY2QzMixcbiAgbGluZW46IDB4ZmFmMGU2LFxuICBtYWdlbnRhOiAweGZmMDBmZixcbiAgbWFyb29uOiAweDgwMDAwMCxcbiAgbWVkaXVtYXF1YW1hcmluZTogMHg2NmNkYWEsXG4gIG1lZGl1bWJsdWU6IDB4MDAwMGNkLFxuICBtZWRpdW1vcmNoaWQ6IDB4YmE1NWQzLFxuICBtZWRpdW1wdXJwbGU6IDB4OTM3MGRiLFxuICBtZWRpdW1zZWFncmVlbjogMHgzY2IzNzEsXG4gIG1lZGl1bXNsYXRlYmx1ZTogMHg3YjY4ZWUsXG4gIG1lZGl1bXNwcmluZ2dyZWVuOiAweDAwZmE5YSxcbiAgbWVkaXVtdHVycXVvaXNlOiAweDQ4ZDFjYyxcbiAgbWVkaXVtdmlvbGV0cmVkOiAweGM3MTU4NSxcbiAgbWlkbmlnaHRibHVlOiAweDE5MTk3MCxcbiAgbWludGNyZWFtOiAweGY1ZmZmYSxcbiAgbWlzdHlyb3NlOiAweGZmZTRlMSxcbiAgbW9jY2FzaW46IDB4ZmZlNGI1LFxuICBuYXZham93aGl0ZTogMHhmZmRlYWQsXG4gIG5hdnk6IDB4MDAwMDgwLFxuICBvbGRsYWNlOiAweGZkZjVlNixcbiAgb2xpdmU6IDB4ODA4MDAwLFxuICBvbGl2ZWRyYWI6IDB4NmI4ZTIzLFxuICBvcmFuZ2U6IDB4ZmZhNTAwLFxuICBvcmFuZ2VyZWQ6IDB4ZmY0NTAwLFxuICBvcmNoaWQ6IDB4ZGE3MGQ2LFxuICBwYWxlZ29sZGVucm9kOiAweGVlZThhYSxcbiAgcGFsZWdyZWVuOiAweDk4ZmI5OCxcbiAgcGFsZXR1cnF1b2lzZTogMHhhZmVlZWUsXG4gIHBhbGV2aW9sZXRyZWQ6IDB4ZGI3MDkzLFxuICBwYXBheWF3aGlwOiAweGZmZWZkNSxcbiAgcGVhY2hwdWZmOiAweGZmZGFiOSxcbiAgcGVydTogMHhjZDg1M2YsXG4gIHBpbms6IDB4ZmZjMGNiLFxuICBwbHVtOiAweGRkYTBkZCxcbiAgcG93ZGVyYmx1ZTogMHhiMGUwZTYsXG4gIHB1cnBsZTogMHg4MDAwODAsXG4gIHJlYmVjY2FwdXJwbGU6IDB4NjYzMzk5LFxuICByZWQ6IDB4ZmYwMDAwLFxuICByb3N5YnJvd246IDB4YmM4ZjhmLFxuICByb3lhbGJsdWU6IDB4NDE2OWUxLFxuICBzYWRkbGVicm93bjogMHg4YjQ1MTMsXG4gIHNhbG1vbjogMHhmYTgwNzIsXG4gIHNhbmR5YnJvd246IDB4ZjRhNDYwLFxuICBzZWFncmVlbjogMHgyZThiNTcsXG4gIHNlYXNoZWxsOiAweGZmZjVlZSxcbiAgc2llbm5hOiAweGEwNTIyZCxcbiAgc2lsdmVyOiAweGMwYzBjMCxcbiAgc2t5Ymx1ZTogMHg4N2NlZWIsXG4gIHNsYXRlYmx1ZTogMHg2YTVhY2QsXG4gIHNsYXRlZ3JheTogMHg3MDgwOTAsXG4gIHNsYXRlZ3JleTogMHg3MDgwOTAsXG4gIHNub3c6IDB4ZmZmYWZhLFxuICBzcHJpbmdncmVlbjogMHgwMGZmN2YsXG4gIHN0ZWVsYmx1ZTogMHg0NjgyYjQsXG4gIHRhbjogMHhkMmI0OGMsXG4gIHRlYWw6IDB4MDA4MDgwLFxuICB0aGlzdGxlOiAweGQ4YmZkOCxcbiAgdG9tYXRvOiAweGZmNjM0NyxcbiAgdHVycXVvaXNlOiAweDQwZTBkMCxcbiAgdmlvbGV0OiAweGVlODJlZSxcbiAgd2hlYXQ6IDB4ZjVkZWIzLFxuICB3aGl0ZTogMHhmZmZmZmYsXG4gIHdoaXRlc21va2U6IDB4ZjVmNWY1LFxuICB5ZWxsb3c6IDB4ZmZmZjAwLFxuICB5ZWxsb3dncmVlbjogMHg5YWNkMzJcbn07XG5cbmRlZmluZShDb2xvciwgY29sb3IsIHtcbiAgY29weShjaGFubmVscykge1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKG5ldyB0aGlzLmNvbnN0cnVjdG9yLCB0aGlzLCBjaGFubmVscyk7XG4gIH0sXG4gIGRpc3BsYXlhYmxlKCkge1xuICAgIHJldHVybiB0aGlzLnJnYigpLmRpc3BsYXlhYmxlKCk7XG4gIH0sXG4gIGhleDogY29sb3JfZm9ybWF0SGV4LCAvLyBEZXByZWNhdGVkISBVc2UgY29sb3IuZm9ybWF0SGV4LlxuICBmb3JtYXRIZXg6IGNvbG9yX2Zvcm1hdEhleCxcbiAgZm9ybWF0SGV4ODogY29sb3JfZm9ybWF0SGV4OCxcbiAgZm9ybWF0SHNsOiBjb2xvcl9mb3JtYXRIc2wsXG4gIGZvcm1hdFJnYjogY29sb3JfZm9ybWF0UmdiLFxuICB0b1N0cmluZzogY29sb3JfZm9ybWF0UmdiXG59KTtcblxuZnVuY3Rpb24gY29sb3JfZm9ybWF0SGV4KCkge1xuICByZXR1cm4gdGhpcy5yZ2IoKS5mb3JtYXRIZXgoKTtcbn1cblxuZnVuY3Rpb24gY29sb3JfZm9ybWF0SGV4OCgpIHtcbiAgcmV0dXJuIHRoaXMucmdiKCkuZm9ybWF0SGV4OCgpO1xufVxuXG5mdW5jdGlvbiBjb2xvcl9mb3JtYXRIc2woKSB7XG4gIHJldHVybiBoc2xDb252ZXJ0KHRoaXMpLmZvcm1hdEhzbCgpO1xufVxuXG5mdW5jdGlvbiBjb2xvcl9mb3JtYXRSZ2IoKSB7XG4gIHJldHVybiB0aGlzLnJnYigpLmZvcm1hdFJnYigpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb2xvcihmb3JtYXQpIHtcbiAgdmFyIG0sIGw7XG4gIGZvcm1hdCA9IChmb3JtYXQgKyBcIlwiKS50cmltKCkudG9Mb3dlckNhc2UoKTtcbiAgcmV0dXJuIChtID0gcmVIZXguZXhlYyhmb3JtYXQpKSA/IChsID0gbVsxXS5sZW5ndGgsIG0gPSBwYXJzZUludChtWzFdLCAxNiksIGwgPT09IDYgPyByZ2JuKG0pIC8vICNmZjAwMDBcbiAgICAgIDogbCA9PT0gMyA/IG5ldyBSZ2IoKG0gPj4gOCAmIDB4ZikgfCAobSA+PiA0ICYgMHhmMCksIChtID4+IDQgJiAweGYpIHwgKG0gJiAweGYwKSwgKChtICYgMHhmKSA8PCA0KSB8IChtICYgMHhmKSwgMSkgLy8gI2YwMFxuICAgICAgOiBsID09PSA4ID8gcmdiYShtID4+IDI0ICYgMHhmZiwgbSA+PiAxNiAmIDB4ZmYsIG0gPj4gOCAmIDB4ZmYsIChtICYgMHhmZikgLyAweGZmKSAvLyAjZmYwMDAwMDBcbiAgICAgIDogbCA9PT0gNCA/IHJnYmEoKG0gPj4gMTIgJiAweGYpIHwgKG0gPj4gOCAmIDB4ZjApLCAobSA+PiA4ICYgMHhmKSB8IChtID4+IDQgJiAweGYwKSwgKG0gPj4gNCAmIDB4ZikgfCAobSAmIDB4ZjApLCAoKChtICYgMHhmKSA8PCA0KSB8IChtICYgMHhmKSkgLyAweGZmKSAvLyAjZjAwMFxuICAgICAgOiBudWxsKSAvLyBpbnZhbGlkIGhleFxuICAgICAgOiAobSA9IHJlUmdiSW50ZWdlci5leGVjKGZvcm1hdCkpID8gbmV3IFJnYihtWzFdLCBtWzJdLCBtWzNdLCAxKSAvLyByZ2IoMjU1LCAwLCAwKVxuICAgICAgOiAobSA9IHJlUmdiUGVyY2VudC5leGVjKGZvcm1hdCkpID8gbmV3IFJnYihtWzFdICogMjU1IC8gMTAwLCBtWzJdICogMjU1IC8gMTAwLCBtWzNdICogMjU1IC8gMTAwLCAxKSAvLyByZ2IoMTAwJSwgMCUsIDAlKVxuICAgICAgOiAobSA9IHJlUmdiYUludGVnZXIuZXhlYyhmb3JtYXQpKSA/IHJnYmEobVsxXSwgbVsyXSwgbVszXSwgbVs0XSkgLy8gcmdiYSgyNTUsIDAsIDAsIDEpXG4gICAgICA6IChtID0gcmVSZ2JhUGVyY2VudC5leGVjKGZvcm1hdCkpID8gcmdiYShtWzFdICogMjU1IC8gMTAwLCBtWzJdICogMjU1IC8gMTAwLCBtWzNdICogMjU1IC8gMTAwLCBtWzRdKSAvLyByZ2IoMTAwJSwgMCUsIDAlLCAxKVxuICAgICAgOiAobSA9IHJlSHNsUGVyY2VudC5leGVjKGZvcm1hdCkpID8gaHNsYShtWzFdLCBtWzJdIC8gMTAwLCBtWzNdIC8gMTAwLCAxKSAvLyBoc2woMTIwLCA1MCUsIDUwJSlcbiAgICAgIDogKG0gPSByZUhzbGFQZXJjZW50LmV4ZWMoZm9ybWF0KSkgPyBoc2xhKG1bMV0sIG1bMl0gLyAxMDAsIG1bM10gLyAxMDAsIG1bNF0pIC8vIGhzbGEoMTIwLCA1MCUsIDUwJSwgMSlcbiAgICAgIDogbmFtZWQuaGFzT3duUHJvcGVydHkoZm9ybWF0KSA/IHJnYm4obmFtZWRbZm9ybWF0XSkgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbiAgICAgIDogZm9ybWF0ID09PSBcInRyYW5zcGFyZW50XCIgPyBuZXcgUmdiKE5hTiwgTmFOLCBOYU4sIDApXG4gICAgICA6IG51bGw7XG59XG5cbmZ1bmN0aW9uIHJnYm4obikge1xuICByZXR1cm4gbmV3IFJnYihuID4+IDE2ICYgMHhmZiwgbiA+PiA4ICYgMHhmZiwgbiAmIDB4ZmYsIDEpO1xufVxuXG5mdW5jdGlvbiByZ2JhKHIsIGcsIGIsIGEpIHtcbiAgaWYgKGEgPD0gMCkgciA9IGcgPSBiID0gTmFOO1xuICByZXR1cm4gbmV3IFJnYihyLCBnLCBiLCBhKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJnYkNvbnZlcnQobykge1xuICBpZiAoIShvIGluc3RhbmNlb2YgQ29sb3IpKSBvID0gY29sb3Iobyk7XG4gIGlmICghbykgcmV0dXJuIG5ldyBSZ2I7XG4gIG8gPSBvLnJnYigpO1xuICByZXR1cm4gbmV3IFJnYihvLnIsIG8uZywgby5iLCBvLm9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmdiKHIsIGcsIGIsIG9wYWNpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyByZ2JDb252ZXJ0KHIpIDogbmV3IFJnYihyLCBnLCBiLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBSZ2IociwgZywgYiwgb3BhY2l0eSkge1xuICB0aGlzLnIgPSArcjtcbiAgdGhpcy5nID0gK2c7XG4gIHRoaXMuYiA9ICtiO1xuICB0aGlzLm9wYWNpdHkgPSArb3BhY2l0eTtcbn1cblxuZGVmaW5lKFJnYiwgcmdiLCBleHRlbmQoQ29sb3IsIHtcbiAgYnJpZ2h0ZXIoaykge1xuICAgIGsgPSBrID09IG51bGwgPyBicmlnaHRlciA6IE1hdGgucG93KGJyaWdodGVyLCBrKTtcbiAgICByZXR1cm4gbmV3IFJnYih0aGlzLnIgKiBrLCB0aGlzLmcgKiBrLCB0aGlzLmIgKiBrLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICBkYXJrZXIoaykge1xuICAgIGsgPSBrID09IG51bGwgPyBkYXJrZXIgOiBNYXRoLnBvdyhkYXJrZXIsIGspO1xuICAgIHJldHVybiBuZXcgUmdiKHRoaXMuciAqIGssIHRoaXMuZyAqIGssIHRoaXMuYiAqIGssIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIHJnYigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgY2xhbXAoKSB7XG4gICAgcmV0dXJuIG5ldyBSZ2IoY2xhbXBpKHRoaXMuciksIGNsYW1waSh0aGlzLmcpLCBjbGFtcGkodGhpcy5iKSwgY2xhbXBhKHRoaXMub3BhY2l0eSkpO1xuICB9LFxuICBkaXNwbGF5YWJsZSgpIHtcbiAgICByZXR1cm4gKC0wLjUgPD0gdGhpcy5yICYmIHRoaXMuciA8IDI1NS41KVxuICAgICAgICAmJiAoLTAuNSA8PSB0aGlzLmcgJiYgdGhpcy5nIDwgMjU1LjUpXG4gICAgICAgICYmICgtMC41IDw9IHRoaXMuYiAmJiB0aGlzLmIgPCAyNTUuNSlcbiAgICAgICAgJiYgKDAgPD0gdGhpcy5vcGFjaXR5ICYmIHRoaXMub3BhY2l0eSA8PSAxKTtcbiAgfSxcbiAgaGV4OiByZ2JfZm9ybWF0SGV4LCAvLyBEZXByZWNhdGVkISBVc2UgY29sb3IuZm9ybWF0SGV4LlxuICBmb3JtYXRIZXg6IHJnYl9mb3JtYXRIZXgsXG4gIGZvcm1hdEhleDg6IHJnYl9mb3JtYXRIZXg4LFxuICBmb3JtYXRSZ2I6IHJnYl9mb3JtYXRSZ2IsXG4gIHRvU3RyaW5nOiByZ2JfZm9ybWF0UmdiXG59KSk7XG5cbmZ1bmN0aW9uIHJnYl9mb3JtYXRIZXgoKSB7XG4gIHJldHVybiBgIyR7aGV4KHRoaXMucil9JHtoZXgodGhpcy5nKX0ke2hleCh0aGlzLmIpfWA7XG59XG5cbmZ1bmN0aW9uIHJnYl9mb3JtYXRIZXg4KCkge1xuICByZXR1cm4gYCMke2hleCh0aGlzLnIpfSR7aGV4KHRoaXMuZyl9JHtoZXgodGhpcy5iKX0ke2hleCgoaXNOYU4odGhpcy5vcGFjaXR5KSA/IDEgOiB0aGlzLm9wYWNpdHkpICogMjU1KX1gO1xufVxuXG5mdW5jdGlvbiByZ2JfZm9ybWF0UmdiKCkge1xuICBjb25zdCBhID0gY2xhbXBhKHRoaXMub3BhY2l0eSk7XG4gIHJldHVybiBgJHthID09PSAxID8gXCJyZ2IoXCIgOiBcInJnYmEoXCJ9JHtjbGFtcGkodGhpcy5yKX0sICR7Y2xhbXBpKHRoaXMuZyl9LCAke2NsYW1waSh0aGlzLmIpfSR7YSA9PT0gMSA/IFwiKVwiIDogYCwgJHthfSlgfWA7XG59XG5cbmZ1bmN0aW9uIGNsYW1wYShvcGFjaXR5KSB7XG4gIHJldHVybiBpc05hTihvcGFjaXR5KSA/IDEgOiBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCBvcGFjaXR5KSk7XG59XG5cbmZ1bmN0aW9uIGNsYW1waSh2YWx1ZSkge1xuICByZXR1cm4gTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCBNYXRoLnJvdW5kKHZhbHVlKSB8fCAwKSk7XG59XG5cbmZ1bmN0aW9uIGhleCh2YWx1ZSkge1xuICB2YWx1ZSA9IGNsYW1waSh2YWx1ZSk7XG4gIHJldHVybiAodmFsdWUgPCAxNiA/IFwiMFwiIDogXCJcIikgKyB2YWx1ZS50b1N0cmluZygxNik7XG59XG5cbmZ1bmN0aW9uIGhzbGEoaCwgcywgbCwgYSkge1xuICBpZiAoYSA8PSAwKSBoID0gcyA9IGwgPSBOYU47XG4gIGVsc2UgaWYgKGwgPD0gMCB8fCBsID49IDEpIGggPSBzID0gTmFOO1xuICBlbHNlIGlmIChzIDw9IDApIGggPSBOYU47XG4gIHJldHVybiBuZXcgSHNsKGgsIHMsIGwsIGEpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaHNsQ29udmVydChvKSB7XG4gIGlmIChvIGluc3RhbmNlb2YgSHNsKSByZXR1cm4gbmV3IEhzbChvLmgsIG8ucywgby5sLCBvLm9wYWNpdHkpO1xuICBpZiAoIShvIGluc3RhbmNlb2YgQ29sb3IpKSBvID0gY29sb3Iobyk7XG4gIGlmICghbykgcmV0dXJuIG5ldyBIc2w7XG4gIGlmIChvIGluc3RhbmNlb2YgSHNsKSByZXR1cm4gbztcbiAgbyA9IG8ucmdiKCk7XG4gIHZhciByID0gby5yIC8gMjU1LFxuICAgICAgZyA9IG8uZyAvIDI1NSxcbiAgICAgIGIgPSBvLmIgLyAyNTUsXG4gICAgICBtaW4gPSBNYXRoLm1pbihyLCBnLCBiKSxcbiAgICAgIG1heCA9IE1hdGgubWF4KHIsIGcsIGIpLFxuICAgICAgaCA9IE5hTixcbiAgICAgIHMgPSBtYXggLSBtaW4sXG4gICAgICBsID0gKG1heCArIG1pbikgLyAyO1xuICBpZiAocykge1xuICAgIGlmIChyID09PSBtYXgpIGggPSAoZyAtIGIpIC8gcyArIChnIDwgYikgKiA2O1xuICAgIGVsc2UgaWYgKGcgPT09IG1heCkgaCA9IChiIC0gcikgLyBzICsgMjtcbiAgICBlbHNlIGggPSAociAtIGcpIC8gcyArIDQ7XG4gICAgcyAvPSBsIDwgMC41ID8gbWF4ICsgbWluIDogMiAtIG1heCAtIG1pbjtcbiAgICBoICo9IDYwO1xuICB9IGVsc2Uge1xuICAgIHMgPSBsID4gMCAmJiBsIDwgMSA/IDAgOiBoO1xuICB9XG4gIHJldHVybiBuZXcgSHNsKGgsIHMsIGwsIG8ub3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoc2woaCwgcywgbCwgb3BhY2l0eSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IGhzbENvbnZlcnQoaCkgOiBuZXcgSHNsKGgsIHMsIGwsIG9wYWNpdHkgPT0gbnVsbCA/IDEgOiBvcGFjaXR5KTtcbn1cblxuZnVuY3Rpb24gSHNsKGgsIHMsIGwsIG9wYWNpdHkpIHtcbiAgdGhpcy5oID0gK2g7XG4gIHRoaXMucyA9ICtzO1xuICB0aGlzLmwgPSArbDtcbiAgdGhpcy5vcGFjaXR5ID0gK29wYWNpdHk7XG59XG5cbmRlZmluZShIc2wsIGhzbCwgZXh0ZW5kKENvbG9yLCB7XG4gIGJyaWdodGVyKGspIHtcbiAgICBrID0gayA9PSBudWxsID8gYnJpZ2h0ZXIgOiBNYXRoLnBvdyhicmlnaHRlciwgayk7XG4gICAgcmV0dXJuIG5ldyBIc2wodGhpcy5oLCB0aGlzLnMsIHRoaXMubCAqIGssIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIGRhcmtlcihrKSB7XG4gICAgayA9IGsgPT0gbnVsbCA/IGRhcmtlciA6IE1hdGgucG93KGRhcmtlciwgayk7XG4gICAgcmV0dXJuIG5ldyBIc2wodGhpcy5oLCB0aGlzLnMsIHRoaXMubCAqIGssIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIHJnYigpIHtcbiAgICB2YXIgaCA9IHRoaXMuaCAlIDM2MCArICh0aGlzLmggPCAwKSAqIDM2MCxcbiAgICAgICAgcyA9IGlzTmFOKGgpIHx8IGlzTmFOKHRoaXMucykgPyAwIDogdGhpcy5zLFxuICAgICAgICBsID0gdGhpcy5sLFxuICAgICAgICBtMiA9IGwgKyAobCA8IDAuNSA/IGwgOiAxIC0gbCkgKiBzLFxuICAgICAgICBtMSA9IDIgKiBsIC0gbTI7XG4gICAgcmV0dXJuIG5ldyBSZ2IoXG4gICAgICBoc2wycmdiKGggPj0gMjQwID8gaCAtIDI0MCA6IGggKyAxMjAsIG0xLCBtMiksXG4gICAgICBoc2wycmdiKGgsIG0xLCBtMiksXG4gICAgICBoc2wycmdiKGggPCAxMjAgPyBoICsgMjQwIDogaCAtIDEyMCwgbTEsIG0yKSxcbiAgICAgIHRoaXMub3BhY2l0eVxuICAgICk7XG4gIH0sXG4gIGNsYW1wKCkge1xuICAgIHJldHVybiBuZXcgSHNsKGNsYW1waCh0aGlzLmgpLCBjbGFtcHQodGhpcy5zKSwgY2xhbXB0KHRoaXMubCksIGNsYW1wYSh0aGlzLm9wYWNpdHkpKTtcbiAgfSxcbiAgZGlzcGxheWFibGUoKSB7XG4gICAgcmV0dXJuICgwIDw9IHRoaXMucyAmJiB0aGlzLnMgPD0gMSB8fCBpc05hTih0aGlzLnMpKVxuICAgICAgICAmJiAoMCA8PSB0aGlzLmwgJiYgdGhpcy5sIDw9IDEpXG4gICAgICAgICYmICgwIDw9IHRoaXMub3BhY2l0eSAmJiB0aGlzLm9wYWNpdHkgPD0gMSk7XG4gIH0sXG4gIGZvcm1hdEhzbCgpIHtcbiAgICBjb25zdCBhID0gY2xhbXBhKHRoaXMub3BhY2l0eSk7XG4gICAgcmV0dXJuIGAke2EgPT09IDEgPyBcImhzbChcIiA6IFwiaHNsYShcIn0ke2NsYW1waCh0aGlzLmgpfSwgJHtjbGFtcHQodGhpcy5zKSAqIDEwMH0lLCAke2NsYW1wdCh0aGlzLmwpICogMTAwfSUke2EgPT09IDEgPyBcIilcIiA6IGAsICR7YX0pYH1gO1xuICB9XG59KSk7XG5cbmZ1bmN0aW9uIGNsYW1waCh2YWx1ZSkge1xuICB2YWx1ZSA9ICh2YWx1ZSB8fCAwKSAlIDM2MDtcbiAgcmV0dXJuIHZhbHVlIDwgMCA/IHZhbHVlICsgMzYwIDogdmFsdWU7XG59XG5cbmZ1bmN0aW9uIGNsYW1wdCh2YWx1ZSkge1xuICByZXR1cm4gTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgdmFsdWUgfHwgMCkpO1xufVxuXG4vKiBGcm9tIEZ2RCAxMy4zNywgQ1NTIENvbG9yIE1vZHVsZSBMZXZlbCAzICovXG5mdW5jdGlvbiBoc2wycmdiKGgsIG0xLCBtMikge1xuICByZXR1cm4gKGggPCA2MCA/IG0xICsgKG0yIC0gbTEpICogaCAvIDYwXG4gICAgICA6IGggPCAxODAgPyBtMlxuICAgICAgOiBoIDwgMjQwID8gbTEgKyAobTIgLSBtMSkgKiAoMjQwIC0gaCkgLyA2MFxuICAgICAgOiBtMSkgKiAyNTU7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gYmFzaXModDEsIHYwLCB2MSwgdjIsIHYzKSB7XG4gIHZhciB0MiA9IHQxICogdDEsIHQzID0gdDIgKiB0MTtcbiAgcmV0dXJuICgoMSAtIDMgKiB0MSArIDMgKiB0MiAtIHQzKSAqIHYwXG4gICAgICArICg0IC0gNiAqIHQyICsgMyAqIHQzKSAqIHYxXG4gICAgICArICgxICsgMyAqIHQxICsgMyAqIHQyIC0gMyAqIHQzKSAqIHYyXG4gICAgICArIHQzICogdjMpIC8gNjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWVzKSB7XG4gIHZhciBuID0gdmFsdWVzLmxlbmd0aCAtIDE7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgdmFyIGkgPSB0IDw9IDAgPyAodCA9IDApIDogdCA+PSAxID8gKHQgPSAxLCBuIC0gMSkgOiBNYXRoLmZsb29yKHQgKiBuKSxcbiAgICAgICAgdjEgPSB2YWx1ZXNbaV0sXG4gICAgICAgIHYyID0gdmFsdWVzW2kgKyAxXSxcbiAgICAgICAgdjAgPSBpID4gMCA/IHZhbHVlc1tpIC0gMV0gOiAyICogdjEgLSB2MixcbiAgICAgICAgdjMgPSBpIDwgbiAtIDEgPyB2YWx1ZXNbaSArIDJdIDogMiAqIHYyIC0gdjE7XG4gICAgcmV0dXJuIGJhc2lzKCh0IC0gaSAvIG4pICogbiwgdjAsIHYxLCB2MiwgdjMpO1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgeCA9PiAoKSA9PiB4O1xuIiwiaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50LmpzXCI7XG5cbmZ1bmN0aW9uIGxpbmVhcihhLCBkKSB7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIGEgKyB0ICogZDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZXhwb25lbnRpYWwoYSwgYiwgeSkge1xuICByZXR1cm4gYSA9IE1hdGgucG93KGEsIHkpLCBiID0gTWF0aC5wb3coYiwgeSkgLSBhLCB5ID0gMSAvIHksIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gTWF0aC5wb3coYSArIHQgKiBiLCB5KTtcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGh1ZShhLCBiKSB7XG4gIHZhciBkID0gYiAtIGE7XG4gIHJldHVybiBkID8gbGluZWFyKGEsIGQgPiAxODAgfHwgZCA8IC0xODAgPyBkIC0gMzYwICogTWF0aC5yb3VuZChkIC8gMzYwKSA6IGQpIDogY29uc3RhbnQoaXNOYU4oYSkgPyBiIDogYSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnYW1tYSh5KSB7XG4gIHJldHVybiAoeSA9ICt5KSA9PT0gMSA/IG5vZ2FtbWEgOiBmdW5jdGlvbihhLCBiKSB7XG4gICAgcmV0dXJuIGIgLSBhID8gZXhwb25lbnRpYWwoYSwgYiwgeSkgOiBjb25zdGFudChpc05hTihhKSA/IGIgOiBhKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbm9nYW1tYShhLCBiKSB7XG4gIHZhciBkID0gYiAtIGE7XG4gIHJldHVybiBkID8gbGluZWFyKGEsIGQpIDogY29uc3RhbnQoaXNOYU4oYSkgPyBiIDogYSk7XG59XG4iLCJpbXBvcnQge3JnYiBhcyBjb2xvclJnYn0gZnJvbSBcImQzLWNvbG9yXCI7XG5pbXBvcnQgYmFzaXMgZnJvbSBcIi4vYmFzaXMuanNcIjtcbmltcG9ydCBiYXNpc0Nsb3NlZCBmcm9tIFwiLi9iYXNpc0Nsb3NlZC5qc1wiO1xuaW1wb3J0IG5vZ2FtbWEsIHtnYW1tYX0gZnJvbSBcIi4vY29sb3IuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIHJnYkdhbW1hKHkpIHtcbiAgdmFyIGNvbG9yID0gZ2FtbWEoeSk7XG5cbiAgZnVuY3Rpb24gcmdiKHN0YXJ0LCBlbmQpIHtcbiAgICB2YXIgciA9IGNvbG9yKChzdGFydCA9IGNvbG9yUmdiKHN0YXJ0KSkuciwgKGVuZCA9IGNvbG9yUmdiKGVuZCkpLnIpLFxuICAgICAgICBnID0gY29sb3Ioc3RhcnQuZywgZW5kLmcpLFxuICAgICAgICBiID0gY29sb3Ioc3RhcnQuYiwgZW5kLmIpLFxuICAgICAgICBvcGFjaXR5ID0gbm9nYW1tYShzdGFydC5vcGFjaXR5LCBlbmQub3BhY2l0eSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgIHN0YXJ0LnIgPSByKHQpO1xuICAgICAgc3RhcnQuZyA9IGcodCk7XG4gICAgICBzdGFydC5iID0gYih0KTtcbiAgICAgIHN0YXJ0Lm9wYWNpdHkgPSBvcGFjaXR5KHQpO1xuICAgICAgcmV0dXJuIHN0YXJ0ICsgXCJcIjtcbiAgICB9O1xuICB9XG5cbiAgcmdiLmdhbW1hID0gcmdiR2FtbWE7XG5cbiAgcmV0dXJuIHJnYjtcbn0pKDEpO1xuXG5mdW5jdGlvbiByZ2JTcGxpbmUoc3BsaW5lKSB7XG4gIHJldHVybiBmdW5jdGlvbihjb2xvcnMpIHtcbiAgICB2YXIgbiA9IGNvbG9ycy5sZW5ndGgsXG4gICAgICAgIHIgPSBuZXcgQXJyYXkobiksXG4gICAgICAgIGcgPSBuZXcgQXJyYXkobiksXG4gICAgICAgIGIgPSBuZXcgQXJyYXkobiksXG4gICAgICAgIGksIGNvbG9yO1xuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGNvbG9yID0gY29sb3JSZ2IoY29sb3JzW2ldKTtcbiAgICAgIHJbaV0gPSBjb2xvci5yIHx8IDA7XG4gICAgICBnW2ldID0gY29sb3IuZyB8fCAwO1xuICAgICAgYltpXSA9IGNvbG9yLmIgfHwgMDtcbiAgICB9XG4gICAgciA9IHNwbGluZShyKTtcbiAgICBnID0gc3BsaW5lKGcpO1xuICAgIGIgPSBzcGxpbmUoYik7XG4gICAgY29sb3Iub3BhY2l0eSA9IDE7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgIGNvbG9yLnIgPSByKHQpO1xuICAgICAgY29sb3IuZyA9IGcodCk7XG4gICAgICBjb2xvci5iID0gYih0KTtcbiAgICAgIHJldHVybiBjb2xvciArIFwiXCI7XG4gICAgfTtcbiAgfTtcbn1cblxuZXhwb3J0IHZhciByZ2JCYXNpcyA9IHJnYlNwbGluZShiYXNpcyk7XG5leHBvcnQgdmFyIHJnYkJhc2lzQ2xvc2VkID0gcmdiU3BsaW5lKGJhc2lzQ2xvc2VkKTtcbiIsImltcG9ydCB7YmFzaXN9IGZyb20gXCIuL2Jhc2lzLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlcykge1xuICB2YXIgbiA9IHZhbHVlcy5sZW5ndGg7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgdmFyIGkgPSBNYXRoLmZsb29yKCgodCAlPSAxKSA8IDAgPyArK3QgOiB0KSAqIG4pLFxuICAgICAgICB2MCA9IHZhbHVlc1soaSArIG4gLSAxKSAlIG5dLFxuICAgICAgICB2MSA9IHZhbHVlc1tpICUgbl0sXG4gICAgICAgIHYyID0gdmFsdWVzWyhpICsgMSkgJSBuXSxcbiAgICAgICAgdjMgPSB2YWx1ZXNbKGkgKyAyKSAlIG5dO1xuICAgIHJldHVybiBiYXNpcygodCAtIGkgLyBuKSAqIG4sIHYwLCB2MSwgdjIsIHYzKTtcbiAgfTtcbn1cbiIsImltcG9ydCBudW1iZXIgZnJvbSBcIi4vbnVtYmVyLmpzXCI7XG5cbnZhciByZUEgPSAvWy0rXT8oPzpcXGQrXFwuP1xcZCp8XFwuP1xcZCspKD86W2VFXVstK10/XFxkKyk/L2csXG4gICAgcmVCID0gbmV3IFJlZ0V4cChyZUEuc291cmNlLCBcImdcIik7XG5cbmZ1bmN0aW9uIHplcm8oYikge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGI7XG4gIH07XG59XG5cbmZ1bmN0aW9uIG9uZShiKSB7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIGIodCkgKyBcIlwiO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciBiaSA9IHJlQS5sYXN0SW5kZXggPSByZUIubGFzdEluZGV4ID0gMCwgLy8gc2NhbiBpbmRleCBmb3IgbmV4dCBudW1iZXIgaW4gYlxuICAgICAgYW0sIC8vIGN1cnJlbnQgbWF0Y2ggaW4gYVxuICAgICAgYm0sIC8vIGN1cnJlbnQgbWF0Y2ggaW4gYlxuICAgICAgYnMsIC8vIHN0cmluZyBwcmVjZWRpbmcgY3VycmVudCBudW1iZXIgaW4gYiwgaWYgYW55XG4gICAgICBpID0gLTEsIC8vIGluZGV4IGluIHNcbiAgICAgIHMgPSBbXSwgLy8gc3RyaW5nIGNvbnN0YW50cyBhbmQgcGxhY2Vob2xkZXJzXG4gICAgICBxID0gW107IC8vIG51bWJlciBpbnRlcnBvbGF0b3JzXG5cbiAgLy8gQ29lcmNlIGlucHV0cyB0byBzdHJpbmdzLlxuICBhID0gYSArIFwiXCIsIGIgPSBiICsgXCJcIjtcblxuICAvLyBJbnRlcnBvbGF0ZSBwYWlycyBvZiBudW1iZXJzIGluIGEgJiBiLlxuICB3aGlsZSAoKGFtID0gcmVBLmV4ZWMoYSkpXG4gICAgICAmJiAoYm0gPSByZUIuZXhlYyhiKSkpIHtcbiAgICBpZiAoKGJzID0gYm0uaW5kZXgpID4gYmkpIHsgLy8gYSBzdHJpbmcgcHJlY2VkZXMgdGhlIG5leHQgbnVtYmVyIGluIGJcbiAgICAgIGJzID0gYi5zbGljZShiaSwgYnMpO1xuICAgICAgaWYgKHNbaV0pIHNbaV0gKz0gYnM7IC8vIGNvYWxlc2NlIHdpdGggcHJldmlvdXMgc3RyaW5nXG4gICAgICBlbHNlIHNbKytpXSA9IGJzO1xuICAgIH1cbiAgICBpZiAoKGFtID0gYW1bMF0pID09PSAoYm0gPSBibVswXSkpIHsgLy8gbnVtYmVycyBpbiBhICYgYiBtYXRjaFxuICAgICAgaWYgKHNbaV0pIHNbaV0gKz0gYm07IC8vIGNvYWxlc2NlIHdpdGggcHJldmlvdXMgc3RyaW5nXG4gICAgICBlbHNlIHNbKytpXSA9IGJtO1xuICAgIH0gZWxzZSB7IC8vIGludGVycG9sYXRlIG5vbi1tYXRjaGluZyBudW1iZXJzXG4gICAgICBzWysraV0gPSBudWxsO1xuICAgICAgcS5wdXNoKHtpOiBpLCB4OiBudW1iZXIoYW0sIGJtKX0pO1xuICAgIH1cbiAgICBiaSA9IHJlQi5sYXN0SW5kZXg7XG4gIH1cblxuICAvLyBBZGQgcmVtYWlucyBvZiBiLlxuICBpZiAoYmkgPCBiLmxlbmd0aCkge1xuICAgIGJzID0gYi5zbGljZShiaSk7XG4gICAgaWYgKHNbaV0pIHNbaV0gKz0gYnM7IC8vIGNvYWxlc2NlIHdpdGggcHJldmlvdXMgc3RyaW5nXG4gICAgZWxzZSBzWysraV0gPSBicztcbiAgfVxuXG4gIC8vIFNwZWNpYWwgb3B0aW1pemF0aW9uIGZvciBvbmx5IGEgc2luZ2xlIG1hdGNoLlxuICAvLyBPdGhlcndpc2UsIGludGVycG9sYXRlIGVhY2ggb2YgdGhlIG51bWJlcnMgYW5kIHJlam9pbiB0aGUgc3RyaW5nLlxuICByZXR1cm4gcy5sZW5ndGggPCAyID8gKHFbMF1cbiAgICAgID8gb25lKHFbMF0ueClcbiAgICAgIDogemVybyhiKSlcbiAgICAgIDogKGIgPSBxLmxlbmd0aCwgZnVuY3Rpb24odCkge1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBvOyBpIDwgYjsgKytpKSBzWyhvID0gcVtpXSkuaV0gPSBvLngodCk7XG4gICAgICAgICAgcmV0dXJuIHMuam9pbihcIlwiKTtcbiAgICAgICAgfSk7XG59XG4iLCJpbXBvcnQge2NvbG9yfSBmcm9tIFwiZDMtY29sb3JcIjtcbmltcG9ydCB7aW50ZXJwb2xhdGVOdW1iZXIsIGludGVycG9sYXRlUmdiLCBpbnRlcnBvbGF0ZVN0cmluZ30gZnJvbSBcImQzLWludGVycG9sYXRlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIGM7XG4gIHJldHVybiAodHlwZW9mIGIgPT09IFwibnVtYmVyXCIgPyBpbnRlcnBvbGF0ZU51bWJlclxuICAgICAgOiBiIGluc3RhbmNlb2YgY29sb3IgPyBpbnRlcnBvbGF0ZVJnYlxuICAgICAgOiAoYyA9IGNvbG9yKGIpKSA/IChiID0gYywgaW50ZXJwb2xhdGVSZ2IpXG4gICAgICA6IGludGVycG9sYXRlU3RyaW5nKShhLCBiKTtcbn1cbiIsImltcG9ydCB7aW50ZXJwb2xhdGVUcmFuc2Zvcm1TdmcgYXMgaW50ZXJwb2xhdGVUcmFuc2Zvcm19IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuaW1wb3J0IHtuYW1lc3BhY2V9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7dHdlZW5WYWx1ZX0gZnJvbSBcIi4vdHdlZW4uanNcIjtcbmltcG9ydCBpbnRlcnBvbGF0ZSBmcm9tIFwiLi9pbnRlcnBvbGF0ZS5qc1wiO1xuXG5mdW5jdGlvbiBhdHRyUmVtb3ZlKG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyUmVtb3ZlTlMoZnVsbG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckNvbnN0YW50KG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZTEpIHtcbiAgdmFyIHN0cmluZzAwLFxuICAgICAgc3RyaW5nMSA9IHZhbHVlMSArIFwiXCIsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RyaW5nMCA9IHRoaXMuZ2V0QXR0cmlidXRlKG5hbWUpO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyQ29uc3RhbnROUyhmdWxsbmFtZSwgaW50ZXJwb2xhdGUsIHZhbHVlMSkge1xuICB2YXIgc3RyaW5nMDAsXG4gICAgICBzdHJpbmcxID0gdmFsdWUxICsgXCJcIixcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdHJpbmcwID0gdGhpcy5nZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyRnVuY3Rpb24obmFtZSwgaW50ZXJwb2xhdGUsIHZhbHVlKSB7XG4gIHZhciBzdHJpbmcwMCxcbiAgICAgIHN0cmluZzEwLFxuICAgICAgaW50ZXJwb2xhdGUwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN0cmluZzAsIHZhbHVlMSA9IHZhbHVlKHRoaXMpLCBzdHJpbmcxO1xuICAgIGlmICh2YWx1ZTEgPT0gbnVsbCkgcmV0dXJuIHZvaWQgdGhpcy5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgc3RyaW5nMCA9IHRoaXMuZ2V0QXR0cmlidXRlKG5hbWUpO1xuICAgIHN0cmluZzEgPSB2YWx1ZTEgKyBcIlwiO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwICYmIHN0cmluZzEgPT09IHN0cmluZzEwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogKHN0cmluZzEwID0gc3RyaW5nMSwgaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckZ1bmN0aW9uTlMoZnVsbG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZSkge1xuICB2YXIgc3RyaW5nMDAsXG4gICAgICBzdHJpbmcxMCxcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdHJpbmcwLCB2YWx1ZTEgPSB2YWx1ZSh0aGlzKSwgc3RyaW5nMTtcbiAgICBpZiAodmFsdWUxID09IG51bGwpIHJldHVybiB2b2lkIHRoaXMucmVtb3ZlQXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgICBzdHJpbmcwID0gdGhpcy5nZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICAgIHN0cmluZzEgPSB2YWx1ZTEgKyBcIlwiO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwICYmIHN0cmluZzEgPT09IHN0cmluZzEwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogKHN0cmluZzEwID0gc3RyaW5nMSwgaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgdmFyIGZ1bGxuYW1lID0gbmFtZXNwYWNlKG5hbWUpLCBpID0gZnVsbG5hbWUgPT09IFwidHJhbnNmb3JtXCIgPyBpbnRlcnBvbGF0ZVRyYW5zZm9ybSA6IGludGVycG9sYXRlO1xuICByZXR1cm4gdGhpcy5hdHRyVHdlZW4obmFtZSwgdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gKGZ1bGxuYW1lLmxvY2FsID8gYXR0ckZ1bmN0aW9uTlMgOiBhdHRyRnVuY3Rpb24pKGZ1bGxuYW1lLCBpLCB0d2VlblZhbHVlKHRoaXMsIFwiYXR0ci5cIiArIG5hbWUsIHZhbHVlKSlcbiAgICAgIDogdmFsdWUgPT0gbnVsbCA/IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJSZW1vdmVOUyA6IGF0dHJSZW1vdmUpKGZ1bGxuYW1lKVxuICAgICAgOiAoZnVsbG5hbWUubG9jYWwgPyBhdHRyQ29uc3RhbnROUyA6IGF0dHJDb25zdGFudCkoZnVsbG5hbWUsIGksIHZhbHVlKSk7XG59XG4iLCJpbXBvcnQge25hbWVzcGFjZX0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuXG5mdW5jdGlvbiBhdHRySW50ZXJwb2xhdGUobmFtZSwgaSkge1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKG5hbWUsIGkuY2FsbCh0aGlzLCB0KSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJJbnRlcnBvbGF0ZU5TKGZ1bGxuYW1lLCBpKSB7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwsIGkuY2FsbCh0aGlzLCB0KSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJUd2Vlbk5TKGZ1bGxuYW1lLCB2YWx1ZSkge1xuICB2YXIgdDAsIGkwO1xuICBmdW5jdGlvbiB0d2VlbigpIHtcbiAgICB2YXIgaSA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKGkgIT09IGkwKSB0MCA9IChpMCA9IGkpICYmIGF0dHJJbnRlcnBvbGF0ZU5TKGZ1bGxuYW1lLCBpKTtcbiAgICByZXR1cm4gdDA7XG4gIH1cbiAgdHdlZW4uX3ZhbHVlID0gdmFsdWU7XG4gIHJldHVybiB0d2Vlbjtcbn1cblxuZnVuY3Rpb24gYXR0clR3ZWVuKG5hbWUsIHZhbHVlKSB7XG4gIHZhciB0MCwgaTA7XG4gIGZ1bmN0aW9uIHR3ZWVuKCkge1xuICAgIHZhciBpID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAoaSAhPT0gaTApIHQwID0gKGkwID0gaSkgJiYgYXR0ckludGVycG9sYXRlKG5hbWUsIGkpO1xuICAgIHJldHVybiB0MDtcbiAgfVxuICB0d2Vlbi5fdmFsdWUgPSB2YWx1ZTtcbiAgcmV0dXJuIHR3ZWVuO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICB2YXIga2V5ID0gXCJhdHRyLlwiICsgbmFtZTtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSByZXR1cm4gKGtleSA9IHRoaXMudHdlZW4oa2V5KSkgJiYga2V5Ll92YWx1ZTtcbiAgaWYgKHZhbHVlID09IG51bGwpIHJldHVybiB0aGlzLnR3ZWVuKGtleSwgbnVsbCk7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yO1xuICB2YXIgZnVsbG5hbWUgPSBuYW1lc3BhY2UobmFtZSk7XG4gIHJldHVybiB0aGlzLnR3ZWVuKGtleSwgKGZ1bGxuYW1lLmxvY2FsID8gYXR0clR3ZWVuTlMgOiBhdHRyVHdlZW4pKGZ1bGxuYW1lLCB2YWx1ZSkpO1xufVxuIiwiaW1wb3J0IHtnZXQsIGluaXR9IGZyb20gXCIuL3NjaGVkdWxlLmpzXCI7XG5cbmZ1bmN0aW9uIGRlbGF5RnVuY3Rpb24oaWQsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBpbml0KHRoaXMsIGlkKS5kZWxheSA9ICt2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBkZWxheUNvbnN0YW50KGlkLCB2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPSArdmFsdWUsIGZ1bmN0aW9uKCkge1xuICAgIGluaXQodGhpcywgaWQpLmRlbGF5ID0gdmFsdWU7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHZhciBpZCA9IHRoaXMuX2lkO1xuXG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMuZWFjaCgodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IGRlbGF5RnVuY3Rpb25cbiAgICAgICAgICA6IGRlbGF5Q29uc3RhbnQpKGlkLCB2YWx1ZSkpXG4gICAgICA6IGdldCh0aGlzLm5vZGUoKSwgaWQpLmRlbGF5O1xufVxuIiwiaW1wb3J0IHtnZXQsIHNldH0gZnJvbSBcIi4vc2NoZWR1bGUuanNcIjtcblxuZnVuY3Rpb24gZHVyYXRpb25GdW5jdGlvbihpZCwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHNldCh0aGlzLCBpZCkuZHVyYXRpb24gPSArdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZHVyYXRpb25Db25zdGFudChpZCwgdmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID0gK3ZhbHVlLCBmdW5jdGlvbigpIHtcbiAgICBzZXQodGhpcywgaWQpLmR1cmF0aW9uID0gdmFsdWU7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHZhciBpZCA9IHRoaXMuX2lkO1xuXG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMuZWFjaCgodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IGR1cmF0aW9uRnVuY3Rpb25cbiAgICAgICAgICA6IGR1cmF0aW9uQ29uc3RhbnQpKGlkLCB2YWx1ZSkpXG4gICAgICA6IGdldCh0aGlzLm5vZGUoKSwgaWQpLmR1cmF0aW9uO1xufVxuIiwiaW1wb3J0IHtnZXQsIHNldH0gZnJvbSBcIi4vc2NoZWR1bGUuanNcIjtcblxuZnVuY3Rpb24gZWFzZUNvbnN0YW50KGlkLCB2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHNldCh0aGlzLCBpZCkuZWFzZSA9IHZhbHVlO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICB2YXIgaWQgPSB0aGlzLl9pZDtcblxuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLmVhY2goZWFzZUNvbnN0YW50KGlkLCB2YWx1ZSkpXG4gICAgICA6IGdldCh0aGlzLm5vZGUoKSwgaWQpLmVhc2U7XG59XG4iLCJpbXBvcnQge2dldCwgc2V0LCBpbml0fSBmcm9tIFwiLi9zY2hlZHVsZS5qc1wiO1xuXG5mdW5jdGlvbiBzdGFydChuYW1lKSB7XG4gIHJldHVybiAobmFtZSArIFwiXCIpLnRyaW0oKS5zcGxpdCgvXnxcXHMrLykuZXZlcnkoZnVuY3Rpb24odCkge1xuICAgIHZhciBpID0gdC5pbmRleE9mKFwiLlwiKTtcbiAgICBpZiAoaSA+PSAwKSB0ID0gdC5zbGljZSgwLCBpKTtcbiAgICByZXR1cm4gIXQgfHwgdCA9PT0gXCJzdGFydFwiO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gb25GdW5jdGlvbihpZCwgbmFtZSwgbGlzdGVuZXIpIHtcbiAgdmFyIG9uMCwgb24xLCBzaXQgPSBzdGFydChuYW1lKSA/IGluaXQgOiBzZXQ7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2NoZWR1bGUgPSBzaXQodGhpcywgaWQpLFxuICAgICAgICBvbiA9IHNjaGVkdWxlLm9uO1xuXG4gICAgLy8gSWYgdGhpcyBub2RlIHNoYXJlZCBhIGRpc3BhdGNoIHdpdGggdGhlIHByZXZpb3VzIG5vZGUsXG4gICAgLy8ganVzdCBhc3NpZ24gdGhlIHVwZGF0ZWQgc2hhcmVkIGRpc3BhdGNoIGFuZCB3ZeKAmXJlIGRvbmUhXG4gICAgLy8gT3RoZXJ3aXNlLCBjb3B5LW9uLXdyaXRlLlxuICAgIGlmIChvbiAhPT0gb24wKSAob24xID0gKG9uMCA9IG9uKS5jb3B5KCkpLm9uKG5hbWUsIGxpc3RlbmVyKTtcblxuICAgIHNjaGVkdWxlLm9uID0gb24xO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCBsaXN0ZW5lcikge1xuICB2YXIgaWQgPSB0aGlzLl9pZDtcblxuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA8IDJcbiAgICAgID8gZ2V0KHRoaXMubm9kZSgpLCBpZCkub24ub24obmFtZSlcbiAgICAgIDogdGhpcy5lYWNoKG9uRnVuY3Rpb24oaWQsIG5hbWUsIGxpc3RlbmVyKSk7XG59XG4iLCJpbXBvcnQge3NlbGVjdGlvbn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuXG52YXIgU2VsZWN0aW9uID0gc2VsZWN0aW9uLnByb3RvdHlwZS5jb25zdHJ1Y3RvcjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHRoaXMuX2dyb3VwcywgdGhpcy5fcGFyZW50cyk7XG59XG4iLCJpbXBvcnQge2ludGVycG9sYXRlVHJhbnNmb3JtQ3NzIGFzIGludGVycG9sYXRlVHJhbnNmb3JtfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcbmltcG9ydCB7c3R5bGV9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7c2V0fSBmcm9tIFwiLi9zY2hlZHVsZS5qc1wiO1xuaW1wb3J0IHt0d2VlblZhbHVlfSBmcm9tIFwiLi90d2Vlbi5qc1wiO1xuaW1wb3J0IGludGVycG9sYXRlIGZyb20gXCIuL2ludGVycG9sYXRlLmpzXCI7XG5cbmZ1bmN0aW9uIHN0eWxlTnVsbChuYW1lLCBpbnRlcnBvbGF0ZSkge1xuICB2YXIgc3RyaW5nMDAsXG4gICAgICBzdHJpbmcxMCxcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdHJpbmcwID0gc3R5bGUodGhpcywgbmFtZSksXG4gICAgICAgIHN0cmluZzEgPSAodGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKSwgc3R5bGUodGhpcywgbmFtZSkpO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwICYmIHN0cmluZzEgPT09IHN0cmluZzEwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCBzdHJpbmcxMCA9IHN0cmluZzEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZVJlbW92ZShuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZUNvbnN0YW50KG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZTEpIHtcbiAgdmFyIHN0cmluZzAwLFxuICAgICAgc3RyaW5nMSA9IHZhbHVlMSArIFwiXCIsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RyaW5nMCA9IHN0eWxlKHRoaXMsIG5hbWUpO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZUZ1bmN0aW9uKG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZSkge1xuICB2YXIgc3RyaW5nMDAsXG4gICAgICBzdHJpbmcxMCxcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdHJpbmcwID0gc3R5bGUodGhpcywgbmFtZSksXG4gICAgICAgIHZhbHVlMSA9IHZhbHVlKHRoaXMpLFxuICAgICAgICBzdHJpbmcxID0gdmFsdWUxICsgXCJcIjtcbiAgICBpZiAodmFsdWUxID09IG51bGwpIHN0cmluZzEgPSB2YWx1ZTEgPSAodGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKSwgc3R5bGUodGhpcywgbmFtZSkpO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwICYmIHN0cmluZzEgPT09IHN0cmluZzEwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogKHN0cmluZzEwID0gc3RyaW5nMSwgaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3R5bGVNYXliZVJlbW92ZShpZCwgbmFtZSkge1xuICB2YXIgb24wLCBvbjEsIGxpc3RlbmVyMCwga2V5ID0gXCJzdHlsZS5cIiArIG5hbWUsIGV2ZW50ID0gXCJlbmQuXCIgKyBrZXksIHJlbW92ZTtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzY2hlZHVsZSA9IHNldCh0aGlzLCBpZCksXG4gICAgICAgIG9uID0gc2NoZWR1bGUub24sXG4gICAgICAgIGxpc3RlbmVyID0gc2NoZWR1bGUudmFsdWVba2V5XSA9PSBudWxsID8gcmVtb3ZlIHx8IChyZW1vdmUgPSBzdHlsZVJlbW92ZShuYW1lKSkgOiB1bmRlZmluZWQ7XG5cbiAgICAvLyBJZiB0aGlzIG5vZGUgc2hhcmVkIGEgZGlzcGF0Y2ggd2l0aCB0aGUgcHJldmlvdXMgbm9kZSxcbiAgICAvLyBqdXN0IGFzc2lnbiB0aGUgdXBkYXRlZCBzaGFyZWQgZGlzcGF0Y2ggYW5kIHdl4oCZcmUgZG9uZSFcbiAgICAvLyBPdGhlcndpc2UsIGNvcHktb24td3JpdGUuXG4gICAgaWYgKG9uICE9PSBvbjAgfHwgbGlzdGVuZXIwICE9PSBsaXN0ZW5lcikgKG9uMSA9IChvbjAgPSBvbikuY29weSgpKS5vbihldmVudCwgbGlzdGVuZXIwID0gbGlzdGVuZXIpO1xuXG4gICAgc2NoZWR1bGUub24gPSBvbjE7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICB2YXIgaSA9IChuYW1lICs9IFwiXCIpID09PSBcInRyYW5zZm9ybVwiID8gaW50ZXJwb2xhdGVUcmFuc2Zvcm0gOiBpbnRlcnBvbGF0ZTtcbiAgcmV0dXJuIHZhbHVlID09IG51bGwgPyB0aGlzXG4gICAgICAuc3R5bGVUd2VlbihuYW1lLCBzdHlsZU51bGwobmFtZSwgaSkpXG4gICAgICAub24oXCJlbmQuc3R5bGUuXCIgKyBuYW1lLCBzdHlsZVJlbW92ZShuYW1lKSlcbiAgICA6IHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiID8gdGhpc1xuICAgICAgLnN0eWxlVHdlZW4obmFtZSwgc3R5bGVGdW5jdGlvbihuYW1lLCBpLCB0d2VlblZhbHVlKHRoaXMsIFwic3R5bGUuXCIgKyBuYW1lLCB2YWx1ZSkpKVxuICAgICAgLmVhY2goc3R5bGVNYXliZVJlbW92ZSh0aGlzLl9pZCwgbmFtZSkpXG4gICAgOiB0aGlzXG4gICAgICAuc3R5bGVUd2VlbihuYW1lLCBzdHlsZUNvbnN0YW50KG5hbWUsIGksIHZhbHVlKSwgcHJpb3JpdHkpXG4gICAgICAub24oXCJlbmQuc3R5bGUuXCIgKyBuYW1lLCBudWxsKTtcbn1cbiIsImZ1bmN0aW9uIHN0eWxlSW50ZXJwb2xhdGUobmFtZSwgaSwgcHJpb3JpdHkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICB0aGlzLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIGkuY2FsbCh0aGlzLCB0KSwgcHJpb3JpdHkpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZVR3ZWVuKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICB2YXIgdCwgaTA7XG4gIGZ1bmN0aW9uIHR3ZWVuKCkge1xuICAgIHZhciBpID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAoaSAhPT0gaTApIHQgPSAoaTAgPSBpKSAmJiBzdHlsZUludGVycG9sYXRlKG5hbWUsIGksIHByaW9yaXR5KTtcbiAgICByZXR1cm4gdDtcbiAgfVxuICB0d2Vlbi5fdmFsdWUgPSB2YWx1ZTtcbiAgcmV0dXJuIHR3ZWVuO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgdmFyIGtleSA9IFwic3R5bGUuXCIgKyAobmFtZSArPSBcIlwiKTtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSByZXR1cm4gKGtleSA9IHRoaXMudHdlZW4oa2V5KSkgJiYga2V5Ll92YWx1ZTtcbiAgaWYgKHZhbHVlID09IG51bGwpIHJldHVybiB0aGlzLnR3ZWVuKGtleSwgbnVsbCk7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yO1xuICByZXR1cm4gdGhpcy50d2VlbihrZXksIHN0eWxlVHdlZW4obmFtZSwgdmFsdWUsIHByaW9yaXR5ID09IG51bGwgPyBcIlwiIDogcHJpb3JpdHkpKTtcbn1cbiIsImZ1bmN0aW9uIHRleHRJbnRlcnBvbGF0ZShpKSB7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgdGhpcy50ZXh0Q29udGVudCA9IGkuY2FsbCh0aGlzLCB0KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdGV4dFR3ZWVuKHZhbHVlKSB7XG4gIHZhciB0MCwgaTA7XG4gIGZ1bmN0aW9uIHR3ZWVuKCkge1xuICAgIHZhciBpID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAoaSAhPT0gaTApIHQwID0gKGkwID0gaSkgJiYgdGV4dEludGVycG9sYXRlKGkpO1xuICAgIHJldHVybiB0MDtcbiAgfVxuICB0d2Vlbi5fdmFsdWUgPSB2YWx1ZTtcbiAgcmV0dXJuIHR3ZWVuO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICB2YXIga2V5ID0gXCJ0ZXh0XCI7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMSkgcmV0dXJuIChrZXkgPSB0aGlzLnR3ZWVuKGtleSkpICYmIGtleS5fdmFsdWU7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSByZXR1cm4gdGhpcy50d2VlbihrZXksIG51bGwpO1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgcmV0dXJuIHRoaXMudHdlZW4oa2V5LCB0ZXh0VHdlZW4odmFsdWUpKTtcbn1cbiIsImltcG9ydCB7c2VsZWN0aW9ufSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9hdHRyIGZyb20gXCIuL2F0dHIuanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX2F0dHJUd2VlbiBmcm9tIFwiLi9hdHRyVHdlZW4uanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX2RlbGF5IGZyb20gXCIuL2RlbGF5LmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9kdXJhdGlvbiBmcm9tIFwiLi9kdXJhdGlvbi5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fZWFzZSBmcm9tIFwiLi9lYXNlLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9lYXNlVmFyeWluZyBmcm9tIFwiLi9lYXNlVmFyeWluZy5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fZmlsdGVyIGZyb20gXCIuL2ZpbHRlci5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fbWVyZ2UgZnJvbSBcIi4vbWVyZ2UuanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX29uIGZyb20gXCIuL29uLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9yZW1vdmUgZnJvbSBcIi4vcmVtb3ZlLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zZWxlY3QgZnJvbSBcIi4vc2VsZWN0LmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zZWxlY3RBbGwgZnJvbSBcIi4vc2VsZWN0QWxsLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zZWxlY3Rpb24gZnJvbSBcIi4vc2VsZWN0aW9uLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zdHlsZSBmcm9tIFwiLi9zdHlsZS5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fc3R5bGVUd2VlbiBmcm9tIFwiLi9zdHlsZVR3ZWVuLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl90ZXh0IGZyb20gXCIuL3RleHQuanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX3RleHRUd2VlbiBmcm9tIFwiLi90ZXh0VHdlZW4uanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX3RyYW5zaXRpb24gZnJvbSBcIi4vdHJhbnNpdGlvbi5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fdHdlZW4gZnJvbSBcIi4vdHdlZW4uanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX2VuZCBmcm9tIFwiLi9lbmQuanNcIjtcblxudmFyIGlkID0gMDtcblxuZXhwb3J0IGZ1bmN0aW9uIFRyYW5zaXRpb24oZ3JvdXBzLCBwYXJlbnRzLCBuYW1lLCBpZCkge1xuICB0aGlzLl9ncm91cHMgPSBncm91cHM7XG4gIHRoaXMuX3BhcmVudHMgPSBwYXJlbnRzO1xuICB0aGlzLl9uYW1lID0gbmFtZTtcbiAgdGhpcy5faWQgPSBpZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdHJhbnNpdGlvbihuYW1lKSB7XG4gIHJldHVybiBzZWxlY3Rpb24oKS50cmFuc2l0aW9uKG5hbWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbmV3SWQoKSB7XG4gIHJldHVybiArK2lkO1xufVxuXG52YXIgc2VsZWN0aW9uX3Byb3RvdHlwZSA9IHNlbGVjdGlvbi5wcm90b3R5cGU7XG5cblRyYW5zaXRpb24ucHJvdG90eXBlID0gdHJhbnNpdGlvbi5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBUcmFuc2l0aW9uLFxuICBzZWxlY3Q6IHRyYW5zaXRpb25fc2VsZWN0LFxuICBzZWxlY3RBbGw6IHRyYW5zaXRpb25fc2VsZWN0QWxsLFxuICBzZWxlY3RDaGlsZDogc2VsZWN0aW9uX3Byb3RvdHlwZS5zZWxlY3RDaGlsZCxcbiAgc2VsZWN0Q2hpbGRyZW46IHNlbGVjdGlvbl9wcm90b3R5cGUuc2VsZWN0Q2hpbGRyZW4sXG4gIGZpbHRlcjogdHJhbnNpdGlvbl9maWx0ZXIsXG4gIG1lcmdlOiB0cmFuc2l0aW9uX21lcmdlLFxuICBzZWxlY3Rpb246IHRyYW5zaXRpb25fc2VsZWN0aW9uLFxuICB0cmFuc2l0aW9uOiB0cmFuc2l0aW9uX3RyYW5zaXRpb24sXG4gIGNhbGw6IHNlbGVjdGlvbl9wcm90b3R5cGUuY2FsbCxcbiAgbm9kZXM6IHNlbGVjdGlvbl9wcm90b3R5cGUubm9kZXMsXG4gIG5vZGU6IHNlbGVjdGlvbl9wcm90b3R5cGUubm9kZSxcbiAgc2l6ZTogc2VsZWN0aW9uX3Byb3RvdHlwZS5zaXplLFxuICBlbXB0eTogc2VsZWN0aW9uX3Byb3RvdHlwZS5lbXB0eSxcbiAgZWFjaDogc2VsZWN0aW9uX3Byb3RvdHlwZS5lYWNoLFxuICBvbjogdHJhbnNpdGlvbl9vbixcbiAgYXR0cjogdHJhbnNpdGlvbl9hdHRyLFxuICBhdHRyVHdlZW46IHRyYW5zaXRpb25fYXR0clR3ZWVuLFxuICBzdHlsZTogdHJhbnNpdGlvbl9zdHlsZSxcbiAgc3R5bGVUd2VlbjogdHJhbnNpdGlvbl9zdHlsZVR3ZWVuLFxuICB0ZXh0OiB0cmFuc2l0aW9uX3RleHQsXG4gIHRleHRUd2VlbjogdHJhbnNpdGlvbl90ZXh0VHdlZW4sXG4gIHJlbW92ZTogdHJhbnNpdGlvbl9yZW1vdmUsXG4gIHR3ZWVuOiB0cmFuc2l0aW9uX3R3ZWVuLFxuICBkZWxheTogdHJhbnNpdGlvbl9kZWxheSxcbiAgZHVyYXRpb246IHRyYW5zaXRpb25fZHVyYXRpb24sXG4gIGVhc2U6IHRyYW5zaXRpb25fZWFzZSxcbiAgZWFzZVZhcnlpbmc6IHRyYW5zaXRpb25fZWFzZVZhcnlpbmcsXG4gIGVuZDogdHJhbnNpdGlvbl9lbmQsXG4gIFtTeW1ib2wuaXRlcmF0b3JdOiBzZWxlY3Rpb25fcHJvdG90eXBlW1N5bWJvbC5pdGVyYXRvcl1cbn07XG4iLCJpbXBvcnQge3NlbGVjdG9yfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge1RyYW5zaXRpb259IGZyb20gXCIuL2luZGV4LmpzXCI7XG5pbXBvcnQgc2NoZWR1bGUsIHtnZXR9IGZyb20gXCIuL3NjaGVkdWxlLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdCkge1xuICB2YXIgbmFtZSA9IHRoaXMuX25hbWUsXG4gICAgICBpZCA9IHRoaXMuX2lkO1xuXG4gIGlmICh0eXBlb2Ygc2VsZWN0ICE9PSBcImZ1bmN0aW9uXCIpIHNlbGVjdCA9IHNlbGVjdG9yKHNlbGVjdCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gbmV3IEFycmF5KG0pLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBzdWJncm91cCA9IHN1Ymdyb3Vwc1tqXSA9IG5ldyBBcnJheShuKSwgbm9kZSwgc3Vibm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiAoc3Vibm9kZSA9IHNlbGVjdC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSkpIHtcbiAgICAgICAgaWYgKFwiX19kYXRhX19cIiBpbiBub2RlKSBzdWJub2RlLl9fZGF0YV9fID0gbm9kZS5fX2RhdGFfXztcbiAgICAgICAgc3ViZ3JvdXBbaV0gPSBzdWJub2RlO1xuICAgICAgICBzY2hlZHVsZShzdWJncm91cFtpXSwgbmFtZSwgaWQsIGksIHN1Ymdyb3VwLCBnZXQobm9kZSwgaWQpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFRyYW5zaXRpb24oc3ViZ3JvdXBzLCB0aGlzLl9wYXJlbnRzLCBuYW1lLCBpZCk7XG59XG4iLCJpbXBvcnQge3NlbGVjdG9yQWxsfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge1RyYW5zaXRpb259IGZyb20gXCIuL2luZGV4LmpzXCI7XG5pbXBvcnQgc2NoZWR1bGUsIHtnZXR9IGZyb20gXCIuL3NjaGVkdWxlLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdCkge1xuICB2YXIgbmFtZSA9IHRoaXMuX25hbWUsXG4gICAgICBpZCA9IHRoaXMuX2lkO1xuXG4gIGlmICh0eXBlb2Ygc2VsZWN0ICE9PSBcImZ1bmN0aW9uXCIpIHNlbGVjdCA9IHNlbGVjdG9yQWxsKHNlbGVjdCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gW10sIHBhcmVudHMgPSBbXSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgZm9yICh2YXIgY2hpbGRyZW4gPSBzZWxlY3QuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCksIGNoaWxkLCBpbmhlcml0ID0gZ2V0KG5vZGUsIGlkKSwgayA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGsgPCBsOyArK2spIHtcbiAgICAgICAgICBpZiAoY2hpbGQgPSBjaGlsZHJlbltrXSkge1xuICAgICAgICAgICAgc2NoZWR1bGUoY2hpbGQsIG5hbWUsIGlkLCBrLCBjaGlsZHJlbiwgaW5oZXJpdCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHN1Ymdyb3Vwcy5wdXNoKGNoaWxkcmVuKTtcbiAgICAgICAgcGFyZW50cy5wdXNoKG5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgVHJhbnNpdGlvbihzdWJncm91cHMsIHBhcmVudHMsIG5hbWUsIGlkKTtcbn1cbiIsImltcG9ydCB7bWF0Y2hlcn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHtUcmFuc2l0aW9ufSBmcm9tIFwiLi9pbmRleC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihtYXRjaCkge1xuICBpZiAodHlwZW9mIG1hdGNoICE9PSBcImZ1bmN0aW9uXCIpIG1hdGNoID0gbWF0Y2hlcihtYXRjaCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gbmV3IEFycmF5KG0pLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBzdWJncm91cCA9IHN1Ymdyb3Vwc1tqXSA9IFtdLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKChub2RlID0gZ3JvdXBbaV0pICYmIG1hdGNoLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApKSB7XG4gICAgICAgIHN1Ymdyb3VwLnB1c2gobm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKHN1Ymdyb3VwcywgdGhpcy5fcGFyZW50cywgdGhpcy5fbmFtZSwgdGhpcy5faWQpO1xufVxuIiwiaW1wb3J0IHtUcmFuc2l0aW9ufSBmcm9tIFwiLi9pbmRleC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih0cmFuc2l0aW9uKSB7XG4gIGlmICh0cmFuc2l0aW9uLl9pZCAhPT0gdGhpcy5faWQpIHRocm93IG5ldyBFcnJvcjtcblxuICBmb3IgKHZhciBncm91cHMwID0gdGhpcy5fZ3JvdXBzLCBncm91cHMxID0gdHJhbnNpdGlvbi5fZ3JvdXBzLCBtMCA9IGdyb3VwczAubGVuZ3RoLCBtMSA9IGdyb3VwczEubGVuZ3RoLCBtID0gTWF0aC5taW4obTAsIG0xKSwgbWVyZ2VzID0gbmV3IEFycmF5KG0wKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cDAgPSBncm91cHMwW2pdLCBncm91cDEgPSBncm91cHMxW2pdLCBuID0gZ3JvdXAwLmxlbmd0aCwgbWVyZ2UgPSBtZXJnZXNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwMFtpXSB8fCBncm91cDFbaV0pIHtcbiAgICAgICAgbWVyZ2VbaV0gPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBqIDwgbTA7ICsraikge1xuICAgIG1lcmdlc1tqXSA9IGdyb3VwczBbal07XG4gIH1cblxuICByZXR1cm4gbmV3IFRyYW5zaXRpb24obWVyZ2VzLCB0aGlzLl9wYXJlbnRzLCB0aGlzLl9uYW1lLCB0aGlzLl9pZCk7XG59XG4iLCJpbXBvcnQge1RyYW5zaXRpb24sIG5ld0lkfSBmcm9tIFwiLi9pbmRleC5qc1wiO1xuaW1wb3J0IHNjaGVkdWxlLCB7Z2V0fSBmcm9tIFwiLi9zY2hlZHVsZS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIG5hbWUgPSB0aGlzLl9uYW1lLFxuICAgICAgaWQwID0gdGhpcy5faWQsXG4gICAgICBpZDEgPSBuZXdJZCgpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIHZhciBpbmhlcml0ID0gZ2V0KG5vZGUsIGlkMCk7XG4gICAgICAgIHNjaGVkdWxlKG5vZGUsIG5hbWUsIGlkMSwgaSwgZ3JvdXAsIHtcbiAgICAgICAgICB0aW1lOiBpbmhlcml0LnRpbWUgKyBpbmhlcml0LmRlbGF5ICsgaW5oZXJpdC5kdXJhdGlvbixcbiAgICAgICAgICBkZWxheTogMCxcbiAgICAgICAgICBkdXJhdGlvbjogaW5oZXJpdC5kdXJhdGlvbixcbiAgICAgICAgICBlYXNlOiBpbmhlcml0LmVhc2VcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKGdyb3VwcywgdGhpcy5fcGFyZW50cywgbmFtZSwgaWQxKTtcbn1cbiIsImltcG9ydCB7dHdlZW5WYWx1ZX0gZnJvbSBcIi4vdHdlZW4uanNcIjtcblxuZnVuY3Rpb24gdGV4dENvbnN0YW50KHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnRleHRDb250ZW50ID0gdmFsdWU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHRleHRGdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlMSA9IHZhbHVlKHRoaXMpO1xuICAgIHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTEgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZTE7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiB0aGlzLnR3ZWVuKFwidGV4dFwiLCB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgPyB0ZXh0RnVuY3Rpb24odHdlZW5WYWx1ZSh0aGlzLCBcInRleHRcIiwgdmFsdWUpKVxuICAgICAgOiB0ZXh0Q29uc3RhbnQodmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSArIFwiXCIpKTtcbn1cbiIsImZ1bmN0aW9uIHJlbW92ZUZ1bmN0aW9uKGlkKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuICAgIGZvciAodmFyIGkgaW4gdGhpcy5fX3RyYW5zaXRpb24pIGlmICgraSAhPT0gaWQpIHJldHVybjtcbiAgICBpZiAocGFyZW50KSBwYXJlbnQucmVtb3ZlQ2hpbGQodGhpcyk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5vbihcImVuZC5yZW1vdmVcIiwgcmVtb3ZlRnVuY3Rpb24odGhpcy5faWQpKTtcbn1cbiIsImltcG9ydCB7c2V0fSBmcm9tIFwiLi9zY2hlZHVsZS5qc1wiO1xuXG5mdW5jdGlvbiBlYXNlVmFyeWluZyhpZCwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAodHlwZW9mIHYgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yO1xuICAgIHNldCh0aGlzLCBpZCkuZWFzZSA9IHY7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yO1xuICByZXR1cm4gdGhpcy5lYWNoKGVhc2VWYXJ5aW5nKHRoaXMuX2lkLCB2YWx1ZSkpO1xufVxuIiwiaW1wb3J0IHtzZXR9IGZyb20gXCIuL3NjaGVkdWxlLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgb24wLCBvbjEsIHRoYXQgPSB0aGlzLCBpZCA9IHRoYXQuX2lkLCBzaXplID0gdGhhdC5zaXplKCk7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgY2FuY2VsID0ge3ZhbHVlOiByZWplY3R9LFxuICAgICAgICBlbmQgPSB7dmFsdWU6IGZ1bmN0aW9uKCkgeyBpZiAoLS1zaXplID09PSAwKSByZXNvbHZlKCk7IH19O1xuXG4gICAgdGhhdC5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNjaGVkdWxlID0gc2V0KHRoaXMsIGlkKSxcbiAgICAgICAgICBvbiA9IHNjaGVkdWxlLm9uO1xuXG4gICAgICAvLyBJZiB0aGlzIG5vZGUgc2hhcmVkIGEgZGlzcGF0Y2ggd2l0aCB0aGUgcHJldmlvdXMgbm9kZSxcbiAgICAgIC8vIGp1c3QgYXNzaWduIHRoZSB1cGRhdGVkIHNoYXJlZCBkaXNwYXRjaCBhbmQgd2XigJlyZSBkb25lIVxuICAgICAgLy8gT3RoZXJ3aXNlLCBjb3B5LW9uLXdyaXRlLlxuICAgICAgaWYgKG9uICE9PSBvbjApIHtcbiAgICAgICAgb24xID0gKG9uMCA9IG9uKS5jb3B5KCk7XG4gICAgICAgIG9uMS5fLmNhbmNlbC5wdXNoKGNhbmNlbCk7XG4gICAgICAgIG9uMS5fLmludGVycnVwdC5wdXNoKGNhbmNlbCk7XG4gICAgICAgIG9uMS5fLmVuZC5wdXNoKGVuZCk7XG4gICAgICB9XG5cbiAgICAgIHNjaGVkdWxlLm9uID0gb24xO1xuICAgIH0pO1xuXG4gICAgLy8gVGhlIHNlbGVjdGlvbiB3YXMgZW1wdHksIHJlc29sdmUgZW5kIGltbWVkaWF0ZWx5XG4gICAgaWYgKHNpemUgPT09IDApIHJlc29sdmUoKTtcbiAgfSk7XG59XG4iLCJpbXBvcnQge1RyYW5zaXRpb24sIG5ld0lkfSBmcm9tIFwiLi4vdHJhbnNpdGlvbi9pbmRleC5qc1wiO1xuaW1wb3J0IHNjaGVkdWxlIGZyb20gXCIuLi90cmFuc2l0aW9uL3NjaGVkdWxlLmpzXCI7XG5pbXBvcnQge2Vhc2VDdWJpY0luT3V0fSBmcm9tIFwiZDMtZWFzZVwiO1xuaW1wb3J0IHtub3d9IGZyb20gXCJkMy10aW1lclwiO1xuXG52YXIgZGVmYXVsdFRpbWluZyA9IHtcbiAgdGltZTogbnVsbCwgLy8gU2V0IG9uIHVzZS5cbiAgZGVsYXk6IDAsXG4gIGR1cmF0aW9uOiAyNTAsXG4gIGVhc2U6IGVhc2VDdWJpY0luT3V0XG59O1xuXG5mdW5jdGlvbiBpbmhlcml0KG5vZGUsIGlkKSB7XG4gIHZhciB0aW1pbmc7XG4gIHdoaWxlICghKHRpbWluZyA9IG5vZGUuX190cmFuc2l0aW9uKSB8fCAhKHRpbWluZyA9IHRpbWluZ1tpZF0pKSB7XG4gICAgaWYgKCEobm9kZSA9IG5vZGUucGFyZW50Tm9kZSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgdHJhbnNpdGlvbiAke2lkfSBub3QgZm91bmRgKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRpbWluZztcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSkge1xuICB2YXIgaWQsXG4gICAgICB0aW1pbmc7XG5cbiAgaWYgKG5hbWUgaW5zdGFuY2VvZiBUcmFuc2l0aW9uKSB7XG4gICAgaWQgPSBuYW1lLl9pZCwgbmFtZSA9IG5hbWUuX25hbWU7XG4gIH0gZWxzZSB7XG4gICAgaWQgPSBuZXdJZCgpLCAodGltaW5nID0gZGVmYXVsdFRpbWluZykudGltZSA9IG5vdygpLCBuYW1lID0gbmFtZSA9PSBudWxsID8gbnVsbCA6IG5hbWUgKyBcIlwiO1xuICB9XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgc2NoZWR1bGUobm9kZSwgbmFtZSwgaWQsIGksIGdyb3VwLCB0aW1pbmcgfHwgaW5oZXJpdChub2RlLCBpZCkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgVHJhbnNpdGlvbihncm91cHMsIHRoaXMuX3BhcmVudHMsIG5hbWUsIGlkKTtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBjdWJpY0luKHQpIHtcbiAgcmV0dXJuIHQgKiB0ICogdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGN1YmljT3V0KHQpIHtcbiAgcmV0dXJuIC0tdCAqIHQgKiB0ICsgMTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGN1YmljSW5PdXQodCkge1xuICByZXR1cm4gKCh0ICo9IDIpIDw9IDEgPyB0ICogdCAqIHQgOiAodCAtPSAyKSAqIHQgKiB0ICsgMikgLyAyO1xufVxuIiwiaW1wb3J0IHtzZWxlY3Rpb259IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCBzZWxlY3Rpb25faW50ZXJydXB0IGZyb20gXCIuL2ludGVycnVwdC5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl90cmFuc2l0aW9uIGZyb20gXCIuL3RyYW5zaXRpb24uanNcIjtcblxuc2VsZWN0aW9uLnByb3RvdHlwZS5pbnRlcnJ1cHQgPSBzZWxlY3Rpb25faW50ZXJydXB0O1xuc2VsZWN0aW9uLnByb3RvdHlwZS50cmFuc2l0aW9uID0gc2VsZWN0aW9uX3RyYW5zaXRpb247XG4iLCJpbXBvcnQgaW50ZXJydXB0IGZyb20gXCIuLi9pbnRlcnJ1cHQuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSkge1xuICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgIGludGVycnVwdCh0aGlzLCBuYW1lKTtcbiAgfSk7XG59XG4iLCJpbXBvcnQge1NUQVJUSU5HLCBFTkRJTkcsIEVOREVEfSBmcm9tIFwiLi90cmFuc2l0aW9uL3NjaGVkdWxlLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5vZGUsIG5hbWUpIHtcbiAgdmFyIHNjaGVkdWxlcyA9IG5vZGUuX190cmFuc2l0aW9uLFxuICAgICAgc2NoZWR1bGUsXG4gICAgICBhY3RpdmUsXG4gICAgICBlbXB0eSA9IHRydWUsXG4gICAgICBpO1xuXG4gIGlmICghc2NoZWR1bGVzKSByZXR1cm47XG5cbiAgbmFtZSA9IG5hbWUgPT0gbnVsbCA/IG51bGwgOiBuYW1lICsgXCJcIjtcblxuICBmb3IgKGkgaW4gc2NoZWR1bGVzKSB7XG4gICAgaWYgKChzY2hlZHVsZSA9IHNjaGVkdWxlc1tpXSkubmFtZSAhPT0gbmFtZSkgeyBlbXB0eSA9IGZhbHNlOyBjb250aW51ZTsgfVxuICAgIGFjdGl2ZSA9IHNjaGVkdWxlLnN0YXRlID4gU1RBUlRJTkcgJiYgc2NoZWR1bGUuc3RhdGUgPCBFTkRJTkc7XG4gICAgc2NoZWR1bGUuc3RhdGUgPSBFTkRFRDtcbiAgICBzY2hlZHVsZS50aW1lci5zdG9wKCk7XG4gICAgc2NoZWR1bGUub24uY2FsbChhY3RpdmUgPyBcImludGVycnVwdFwiIDogXCJjYW5jZWxcIiwgbm9kZSwgbm9kZS5fX2RhdGFfXywgc2NoZWR1bGUuaW5kZXgsIHNjaGVkdWxlLmdyb3VwKTtcbiAgICBkZWxldGUgc2NoZWR1bGVzW2ldO1xuICB9XG5cbiAgaWYgKGVtcHR5KSBkZWxldGUgbm9kZS5fX3RyYW5zaXRpb247XG59XG4iLCJpbXBvcnQge2Rpc3BhdGNofSBmcm9tIFwiZDMtZGlzcGF0Y2hcIjtcbmltcG9ydCB7ZHJhZ0Rpc2FibGUsIGRyYWdFbmFibGV9IGZyb20gXCJkMy1kcmFnXCI7XG5pbXBvcnQge2ludGVycG9sYXRlfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcbmltcG9ydCB7cG9pbnRlciwgc2VsZWN0fSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge2ludGVycnVwdH0gZnJvbSBcImQzLXRyYW5zaXRpb25cIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudC5qc1wiO1xuaW1wb3J0IEJydXNoRXZlbnQgZnJvbSBcIi4vZXZlbnQuanNcIjtcbmltcG9ydCBub2V2ZW50LCB7bm9wcm9wYWdhdGlvbn0gZnJvbSBcIi4vbm9ldmVudC5qc1wiO1xuXG52YXIgTU9ERV9EUkFHID0ge25hbWU6IFwiZHJhZ1wifSxcbiAgICBNT0RFX1NQQUNFID0ge25hbWU6IFwic3BhY2VcIn0sXG4gICAgTU9ERV9IQU5ETEUgPSB7bmFtZTogXCJoYW5kbGVcIn0sXG4gICAgTU9ERV9DRU5URVIgPSB7bmFtZTogXCJjZW50ZXJcIn07XG5cbmNvbnN0IHthYnMsIG1heCwgbWlufSA9IE1hdGg7XG5cbmZ1bmN0aW9uIG51bWJlcjEoZSkge1xuICByZXR1cm4gWytlWzBdLCArZVsxXV07XG59XG5cbmZ1bmN0aW9uIG51bWJlcjIoZSkge1xuICByZXR1cm4gW251bWJlcjEoZVswXSksIG51bWJlcjEoZVsxXSldO1xufVxuXG52YXIgWCA9IHtcbiAgbmFtZTogXCJ4XCIsXG4gIGhhbmRsZXM6IFtcIndcIiwgXCJlXCJdLm1hcCh0eXBlKSxcbiAgaW5wdXQ6IGZ1bmN0aW9uKHgsIGUpIHsgcmV0dXJuIHggPT0gbnVsbCA/IG51bGwgOiBbWyt4WzBdLCBlWzBdWzFdXSwgWyt4WzFdLCBlWzFdWzFdXV07IH0sXG4gIG91dHB1dDogZnVuY3Rpb24oeHkpIHsgcmV0dXJuIHh5ICYmIFt4eVswXVswXSwgeHlbMV1bMF1dOyB9XG59O1xuXG52YXIgWSA9IHtcbiAgbmFtZTogXCJ5XCIsXG4gIGhhbmRsZXM6IFtcIm5cIiwgXCJzXCJdLm1hcCh0eXBlKSxcbiAgaW5wdXQ6IGZ1bmN0aW9uKHksIGUpIHsgcmV0dXJuIHkgPT0gbnVsbCA/IG51bGwgOiBbW2VbMF1bMF0sICt5WzBdXSwgW2VbMV1bMF0sICt5WzFdXV07IH0sXG4gIG91dHB1dDogZnVuY3Rpb24oeHkpIHsgcmV0dXJuIHh5ICYmIFt4eVswXVsxXSwgeHlbMV1bMV1dOyB9XG59O1xuXG52YXIgWFkgPSB7XG4gIG5hbWU6IFwieHlcIixcbiAgaGFuZGxlczogW1wiblwiLCBcIndcIiwgXCJlXCIsIFwic1wiLCBcIm53XCIsIFwibmVcIiwgXCJzd1wiLCBcInNlXCJdLm1hcCh0eXBlKSxcbiAgaW5wdXQ6IGZ1bmN0aW9uKHh5KSB7IHJldHVybiB4eSA9PSBudWxsID8gbnVsbCA6IG51bWJlcjIoeHkpOyB9LFxuICBvdXRwdXQ6IGZ1bmN0aW9uKHh5KSB7IHJldHVybiB4eTsgfVxufTtcblxudmFyIGN1cnNvcnMgPSB7XG4gIG92ZXJsYXk6IFwiY3Jvc3NoYWlyXCIsXG4gIHNlbGVjdGlvbjogXCJtb3ZlXCIsXG4gIG46IFwibnMtcmVzaXplXCIsXG4gIGU6IFwiZXctcmVzaXplXCIsXG4gIHM6IFwibnMtcmVzaXplXCIsXG4gIHc6IFwiZXctcmVzaXplXCIsXG4gIG53OiBcIm53c2UtcmVzaXplXCIsXG4gIG5lOiBcIm5lc3ctcmVzaXplXCIsXG4gIHNlOiBcIm53c2UtcmVzaXplXCIsXG4gIHN3OiBcIm5lc3ctcmVzaXplXCJcbn07XG5cbnZhciBmbGlwWCA9IHtcbiAgZTogXCJ3XCIsXG4gIHc6IFwiZVwiLFxuICBudzogXCJuZVwiLFxuICBuZTogXCJud1wiLFxuICBzZTogXCJzd1wiLFxuICBzdzogXCJzZVwiXG59O1xuXG52YXIgZmxpcFkgPSB7XG4gIG46IFwic1wiLFxuICBzOiBcIm5cIixcbiAgbnc6IFwic3dcIixcbiAgbmU6IFwic2VcIixcbiAgc2U6IFwibmVcIixcbiAgc3c6IFwibndcIlxufTtcblxudmFyIHNpZ25zWCA9IHtcbiAgb3ZlcmxheTogKzEsXG4gIHNlbGVjdGlvbjogKzEsXG4gIG46IG51bGwsXG4gIGU6ICsxLFxuICBzOiBudWxsLFxuICB3OiAtMSxcbiAgbnc6IC0xLFxuICBuZTogKzEsXG4gIHNlOiArMSxcbiAgc3c6IC0xXG59O1xuXG52YXIgc2lnbnNZID0ge1xuICBvdmVybGF5OiArMSxcbiAgc2VsZWN0aW9uOiArMSxcbiAgbjogLTEsXG4gIGU6IG51bGwsXG4gIHM6ICsxLFxuICB3OiBudWxsLFxuICBudzogLTEsXG4gIG5lOiAtMSxcbiAgc2U6ICsxLFxuICBzdzogKzFcbn07XG5cbmZ1bmN0aW9uIHR5cGUodCkge1xuICByZXR1cm4ge3R5cGU6IHR9O1xufVxuXG4vLyBJZ25vcmUgcmlnaHQtY2xpY2ssIHNpbmNlIHRoYXQgc2hvdWxkIG9wZW4gdGhlIGNvbnRleHQgbWVudS5cbmZ1bmN0aW9uIGRlZmF1bHRGaWx0ZXIoZXZlbnQpIHtcbiAgcmV0dXJuICFldmVudC5jdHJsS2V5ICYmICFldmVudC5idXR0b247XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRFeHRlbnQoKSB7XG4gIHZhciBzdmcgPSB0aGlzLm93bmVyU1ZHRWxlbWVudCB8fCB0aGlzO1xuICBpZiAoc3ZnLmhhc0F0dHJpYnV0ZShcInZpZXdCb3hcIikpIHtcbiAgICBzdmcgPSBzdmcudmlld0JveC5iYXNlVmFsO1xuICAgIHJldHVybiBbW3N2Zy54LCBzdmcueV0sIFtzdmcueCArIHN2Zy53aWR0aCwgc3ZnLnkgKyBzdmcuaGVpZ2h0XV07XG4gIH1cbiAgcmV0dXJuIFtbMCwgMF0sIFtzdmcud2lkdGguYmFzZVZhbC52YWx1ZSwgc3ZnLmhlaWdodC5iYXNlVmFsLnZhbHVlXV07XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRUb3VjaGFibGUoKSB7XG4gIHJldHVybiBuYXZpZ2F0b3IubWF4VG91Y2hQb2ludHMgfHwgKFwib250b3VjaHN0YXJ0XCIgaW4gdGhpcyk7XG59XG5cbi8vIExpa2UgZDMubG9jYWwsIGJ1dCB3aXRoIHRoZSBuYW1lIOKAnF9fYnJ1c2jigJ0gcmF0aGVyIHRoYW4gYXV0by1nZW5lcmF0ZWQuXG5mdW5jdGlvbiBsb2NhbChub2RlKSB7XG4gIHdoaWxlICghbm9kZS5fX2JydXNoKSBpZiAoIShub2RlID0gbm9kZS5wYXJlbnROb2RlKSkgcmV0dXJuO1xuICByZXR1cm4gbm9kZS5fX2JydXNoO1xufVxuXG5mdW5jdGlvbiBlbXB0eShleHRlbnQpIHtcbiAgcmV0dXJuIGV4dGVudFswXVswXSA9PT0gZXh0ZW50WzFdWzBdXG4gICAgICB8fCBleHRlbnRbMF1bMV0gPT09IGV4dGVudFsxXVsxXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJydXNoU2VsZWN0aW9uKG5vZGUpIHtcbiAgdmFyIHN0YXRlID0gbm9kZS5fX2JydXNoO1xuICByZXR1cm4gc3RhdGUgPyBzdGF0ZS5kaW0ub3V0cHV0KHN0YXRlLnNlbGVjdGlvbikgOiBudWxsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYnJ1c2hYKCkge1xuICByZXR1cm4gYnJ1c2goWCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBicnVzaFkoKSB7XG4gIHJldHVybiBicnVzaChZKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBicnVzaChYWSk7XG59XG5cbmZ1bmN0aW9uIGJydXNoKGRpbSkge1xuICB2YXIgZXh0ZW50ID0gZGVmYXVsdEV4dGVudCxcbiAgICAgIGZpbHRlciA9IGRlZmF1bHRGaWx0ZXIsXG4gICAgICB0b3VjaGFibGUgPSBkZWZhdWx0VG91Y2hhYmxlLFxuICAgICAga2V5cyA9IHRydWUsXG4gICAgICBsaXN0ZW5lcnMgPSBkaXNwYXRjaChcInN0YXJ0XCIsIFwiYnJ1c2hcIiwgXCJlbmRcIiksXG4gICAgICBoYW5kbGVTaXplID0gNixcbiAgICAgIHRvdWNoZW5kaW5nO1xuXG4gIGZ1bmN0aW9uIGJydXNoKGdyb3VwKSB7XG4gICAgdmFyIG92ZXJsYXkgPSBncm91cFxuICAgICAgICAucHJvcGVydHkoXCJfX2JydXNoXCIsIGluaXRpYWxpemUpXG4gICAgICAuc2VsZWN0QWxsKFwiLm92ZXJsYXlcIilcbiAgICAgIC5kYXRhKFt0eXBlKFwib3ZlcmxheVwiKV0pO1xuXG4gICAgb3ZlcmxheS5lbnRlcigpLmFwcGVuZChcInJlY3RcIilcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcIm92ZXJsYXlcIilcbiAgICAgICAgLmF0dHIoXCJwb2ludGVyLWV2ZW50c1wiLCBcImFsbFwiKVxuICAgICAgICAuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzLm92ZXJsYXkpXG4gICAgICAubWVyZ2Uob3ZlcmxheSlcbiAgICAgICAgLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGV4dGVudCA9IGxvY2FsKHRoaXMpLmV4dGVudDtcbiAgICAgICAgICBzZWxlY3QodGhpcylcbiAgICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIGV4dGVudFswXVswXSlcbiAgICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIGV4dGVudFswXVsxXSlcbiAgICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBleHRlbnRbMV1bMF0gLSBleHRlbnRbMF1bMF0pXG4gICAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGV4dGVudFsxXVsxXSAtIGV4dGVudFswXVsxXSk7XG4gICAgICAgIH0pO1xuXG4gICAgZ3JvdXAuc2VsZWN0QWxsKFwiLnNlbGVjdGlvblwiKVxuICAgICAgLmRhdGEoW3R5cGUoXCJzZWxlY3Rpb25cIildKVxuICAgICAgLmVudGVyKCkuYXBwZW5kKFwicmVjdFwiKVxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwic2VsZWN0aW9uXCIpXG4gICAgICAgIC5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnMuc2VsZWN0aW9uKVxuICAgICAgICAuYXR0cihcImZpbGxcIiwgXCIjNzc3XCIpXG4gICAgICAgIC5hdHRyKFwiZmlsbC1vcGFjaXR5XCIsIDAuMylcbiAgICAgICAgLmF0dHIoXCJzdHJva2VcIiwgXCIjZmZmXCIpXG4gICAgICAgIC5hdHRyKFwic2hhcGUtcmVuZGVyaW5nXCIsIFwiY3Jpc3BFZGdlc1wiKTtcblxuICAgIHZhciBoYW5kbGUgPSBncm91cC5zZWxlY3RBbGwoXCIuaGFuZGxlXCIpXG4gICAgICAuZGF0YShkaW0uaGFuZGxlcywgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC50eXBlOyB9KTtcblxuICAgIGhhbmRsZS5leGl0KCkucmVtb3ZlKCk7XG5cbiAgICBoYW5kbGUuZW50ZXIoKS5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gXCJoYW5kbGUgaGFuZGxlLS1cIiArIGQudHlwZTsgfSlcbiAgICAgICAgLmF0dHIoXCJjdXJzb3JcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gY3Vyc29yc1tkLnR5cGVdOyB9KTtcblxuICAgIGdyb3VwXG4gICAgICAgIC5lYWNoKHJlZHJhdylcbiAgICAgICAgLmF0dHIoXCJmaWxsXCIsIFwibm9uZVwiKVxuICAgICAgICAuYXR0cihcInBvaW50ZXItZXZlbnRzXCIsIFwiYWxsXCIpXG4gICAgICAgIC5vbihcIm1vdXNlZG93bi5icnVzaFwiLCBzdGFydGVkKVxuICAgICAgLmZpbHRlcih0b3VjaGFibGUpXG4gICAgICAgIC5vbihcInRvdWNoc3RhcnQuYnJ1c2hcIiwgc3RhcnRlZClcbiAgICAgICAgLm9uKFwidG91Y2htb3ZlLmJydXNoXCIsIHRvdWNobW92ZWQpXG4gICAgICAgIC5vbihcInRvdWNoZW5kLmJydXNoIHRvdWNoY2FuY2VsLmJydXNoXCIsIHRvdWNoZW5kZWQpXG4gICAgICAgIC5zdHlsZShcInRvdWNoLWFjdGlvblwiLCBcIm5vbmVcIilcbiAgICAgICAgLnN0eWxlKFwiLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yXCIsIFwicmdiYSgwLDAsMCwwKVwiKTtcbiAgfVxuXG4gIGJydXNoLm1vdmUgPSBmdW5jdGlvbihncm91cCwgc2VsZWN0aW9uLCBldmVudCkge1xuICAgIGlmIChncm91cC50d2Vlbikge1xuICAgICAgZ3JvdXBcbiAgICAgICAgICAub24oXCJzdGFydC5icnVzaFwiLCBmdW5jdGlvbihldmVudCkgeyBlbWl0dGVyKHRoaXMsIGFyZ3VtZW50cykuYmVmb3Jlc3RhcnQoKS5zdGFydChldmVudCk7IH0pXG4gICAgICAgICAgLm9uKFwiaW50ZXJydXB0LmJydXNoIGVuZC5icnVzaFwiLCBmdW5jdGlvbihldmVudCkgeyBlbWl0dGVyKHRoaXMsIGFyZ3VtZW50cykuZW5kKGV2ZW50KTsgfSlcbiAgICAgICAgICAudHdlZW4oXCJicnVzaFwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcyxcbiAgICAgICAgICAgICAgICBzdGF0ZSA9IHRoYXQuX19icnVzaCxcbiAgICAgICAgICAgICAgICBlbWl0ID0gZW1pdHRlcih0aGF0LCBhcmd1bWVudHMpLFxuICAgICAgICAgICAgICAgIHNlbGVjdGlvbjAgPSBzdGF0ZS5zZWxlY3Rpb24sXG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uMSA9IGRpbS5pbnB1dCh0eXBlb2Ygc2VsZWN0aW9uID09PSBcImZ1bmN0aW9uXCIgPyBzZWxlY3Rpb24uYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IHNlbGVjdGlvbiwgc3RhdGUuZXh0ZW50KSxcbiAgICAgICAgICAgICAgICBpID0gaW50ZXJwb2xhdGUoc2VsZWN0aW9uMCwgc2VsZWN0aW9uMSk7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHR3ZWVuKHQpIHtcbiAgICAgICAgICAgICAgc3RhdGUuc2VsZWN0aW9uID0gdCA9PT0gMSAmJiBzZWxlY3Rpb24xID09PSBudWxsID8gbnVsbCA6IGkodCk7XG4gICAgICAgICAgICAgIHJlZHJhdy5jYWxsKHRoYXQpO1xuICAgICAgICAgICAgICBlbWl0LmJydXNoKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBzZWxlY3Rpb24wICE9PSBudWxsICYmIHNlbGVjdGlvbjEgIT09IG51bGwgPyB0d2VlbiA6IHR3ZWVuKDEpO1xuICAgICAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBncm91cFxuICAgICAgICAgIC5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzLFxuICAgICAgICAgICAgICAgIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgICAgICAgc3RhdGUgPSB0aGF0Ll9fYnJ1c2gsXG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uMSA9IGRpbS5pbnB1dCh0eXBlb2Ygc2VsZWN0aW9uID09PSBcImZ1bmN0aW9uXCIgPyBzZWxlY3Rpb24uYXBwbHkodGhhdCwgYXJncykgOiBzZWxlY3Rpb24sIHN0YXRlLmV4dGVudCksXG4gICAgICAgICAgICAgICAgZW1pdCA9IGVtaXR0ZXIodGhhdCwgYXJncykuYmVmb3Jlc3RhcnQoKTtcblxuICAgICAgICAgICAgaW50ZXJydXB0KHRoYXQpO1xuICAgICAgICAgICAgc3RhdGUuc2VsZWN0aW9uID0gc2VsZWN0aW9uMSA9PT0gbnVsbCA/IG51bGwgOiBzZWxlY3Rpb24xO1xuICAgICAgICAgICAgcmVkcmF3LmNhbGwodGhhdCk7XG4gICAgICAgICAgICBlbWl0LnN0YXJ0KGV2ZW50KS5icnVzaChldmVudCkuZW5kKGV2ZW50KTtcbiAgICAgICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgYnJ1c2guY2xlYXIgPSBmdW5jdGlvbihncm91cCwgZXZlbnQpIHtcbiAgICBicnVzaC5tb3ZlKGdyb3VwLCBudWxsLCBldmVudCk7XG4gIH07XG5cbiAgZnVuY3Rpb24gcmVkcmF3KCkge1xuICAgIHZhciBncm91cCA9IHNlbGVjdCh0aGlzKSxcbiAgICAgICAgc2VsZWN0aW9uID0gbG9jYWwodGhpcykuc2VsZWN0aW9uO1xuXG4gICAgaWYgKHNlbGVjdGlvbikge1xuICAgICAgZ3JvdXAuc2VsZWN0QWxsKFwiLnNlbGVjdGlvblwiKVxuICAgICAgICAgIC5zdHlsZShcImRpc3BsYXlcIiwgbnVsbClcbiAgICAgICAgICAuYXR0cihcInhcIiwgc2VsZWN0aW9uWzBdWzBdKVxuICAgICAgICAgIC5hdHRyKFwieVwiLCBzZWxlY3Rpb25bMF1bMV0pXG4gICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBzZWxlY3Rpb25bMV1bMF0gLSBzZWxlY3Rpb25bMF1bMF0pXG4gICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgc2VsZWN0aW9uWzFdWzFdIC0gc2VsZWN0aW9uWzBdWzFdKTtcblxuICAgICAgZ3JvdXAuc2VsZWN0QWxsKFwiLmhhbmRsZVwiKVxuICAgICAgICAgIC5zdHlsZShcImRpc3BsYXlcIiwgbnVsbClcbiAgICAgICAgICAuYXR0cihcInhcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC50eXBlW2QudHlwZS5sZW5ndGggLSAxXSA9PT0gXCJlXCIgPyBzZWxlY3Rpb25bMV1bMF0gLSBoYW5kbGVTaXplIC8gMiA6IHNlbGVjdGlvblswXVswXSAtIGhhbmRsZVNpemUgLyAyOyB9KVxuICAgICAgICAgIC5hdHRyKFwieVwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLnR5cGVbMF0gPT09IFwic1wiID8gc2VsZWN0aW9uWzFdWzFdIC0gaGFuZGxlU2l6ZSAvIDIgOiBzZWxlY3Rpb25bMF1bMV0gLSBoYW5kbGVTaXplIC8gMjsgfSlcbiAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQudHlwZSA9PT0gXCJuXCIgfHwgZC50eXBlID09PSBcInNcIiA/IHNlbGVjdGlvblsxXVswXSAtIHNlbGVjdGlvblswXVswXSArIGhhbmRsZVNpemUgOiBoYW5kbGVTaXplOyB9KVxuICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQudHlwZSA9PT0gXCJlXCIgfHwgZC50eXBlID09PSBcIndcIiA/IHNlbGVjdGlvblsxXVsxXSAtIHNlbGVjdGlvblswXVsxXSArIGhhbmRsZVNpemUgOiBoYW5kbGVTaXplOyB9KTtcbiAgICB9XG5cbiAgICBlbHNlIHtcbiAgICAgIGdyb3VwLnNlbGVjdEFsbChcIi5zZWxlY3Rpb24sLmhhbmRsZVwiKVxuICAgICAgICAgIC5zdHlsZShcImRpc3BsYXlcIiwgXCJub25lXCIpXG4gICAgICAgICAgLmF0dHIoXCJ4XCIsIG51bGwpXG4gICAgICAgICAgLmF0dHIoXCJ5XCIsIG51bGwpXG4gICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBudWxsKVxuICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIG51bGwpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGVtaXR0ZXIodGhhdCwgYXJncywgY2xlYW4pIHtcbiAgICB2YXIgZW1pdCA9IHRoYXQuX19icnVzaC5lbWl0dGVyO1xuICAgIHJldHVybiBlbWl0ICYmICghY2xlYW4gfHwgIWVtaXQuY2xlYW4pID8gZW1pdCA6IG5ldyBFbWl0dGVyKHRoYXQsIGFyZ3MsIGNsZWFuKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIEVtaXR0ZXIodGhhdCwgYXJncywgY2xlYW4pIHtcbiAgICB0aGlzLnRoYXQgPSB0aGF0O1xuICAgIHRoaXMuYXJncyA9IGFyZ3M7XG4gICAgdGhpcy5zdGF0ZSA9IHRoYXQuX19icnVzaDtcbiAgICB0aGlzLmFjdGl2ZSA9IDA7XG4gICAgdGhpcy5jbGVhbiA9IGNsZWFuO1xuICB9XG5cbiAgRW1pdHRlci5wcm90b3R5cGUgPSB7XG4gICAgYmVmb3Jlc3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKCsrdGhpcy5hY3RpdmUgPT09IDEpIHRoaXMuc3RhdGUuZW1pdHRlciA9IHRoaXMsIHRoaXMuc3RhcnRpbmcgPSB0cnVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBzdGFydDogZnVuY3Rpb24oZXZlbnQsIG1vZGUpIHtcbiAgICAgIGlmICh0aGlzLnN0YXJ0aW5nKSB0aGlzLnN0YXJ0aW5nID0gZmFsc2UsIHRoaXMuZW1pdChcInN0YXJ0XCIsIGV2ZW50LCBtb2RlKTtcbiAgICAgIGVsc2UgdGhpcy5lbWl0KFwiYnJ1c2hcIiwgZXZlbnQpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBicnVzaDogZnVuY3Rpb24oZXZlbnQsIG1vZGUpIHtcbiAgICAgIHRoaXMuZW1pdChcImJydXNoXCIsIGV2ZW50LCBtb2RlKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgZW5kOiBmdW5jdGlvbihldmVudCwgbW9kZSkge1xuICAgICAgaWYgKC0tdGhpcy5hY3RpdmUgPT09IDApIGRlbGV0ZSB0aGlzLnN0YXRlLmVtaXR0ZXIsIHRoaXMuZW1pdChcImVuZFwiLCBldmVudCwgbW9kZSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGVtaXQ6IGZ1bmN0aW9uKHR5cGUsIGV2ZW50LCBtb2RlKSB7XG4gICAgICB2YXIgZCA9IHNlbGVjdCh0aGlzLnRoYXQpLmRhdHVtKCk7XG4gICAgICBsaXN0ZW5lcnMuY2FsbChcbiAgICAgICAgdHlwZSxcbiAgICAgICAgdGhpcy50aGF0LFxuICAgICAgICBuZXcgQnJ1c2hFdmVudCh0eXBlLCB7XG4gICAgICAgICAgc291cmNlRXZlbnQ6IGV2ZW50LFxuICAgICAgICAgIHRhcmdldDogYnJ1c2gsXG4gICAgICAgICAgc2VsZWN0aW9uOiBkaW0ub3V0cHV0KHRoaXMuc3RhdGUuc2VsZWN0aW9uKSxcbiAgICAgICAgICBtb2RlLFxuICAgICAgICAgIGRpc3BhdGNoOiBsaXN0ZW5lcnNcbiAgICAgICAgfSksXG4gICAgICAgIGRcbiAgICAgICk7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIHN0YXJ0ZWQoZXZlbnQpIHtcbiAgICBpZiAodG91Y2hlbmRpbmcgJiYgIWV2ZW50LnRvdWNoZXMpIHJldHVybjtcbiAgICBpZiAoIWZpbHRlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSByZXR1cm47XG5cbiAgICB2YXIgdGhhdCA9IHRoaXMsXG4gICAgICAgIHR5cGUgPSBldmVudC50YXJnZXQuX19kYXRhX18udHlwZSxcbiAgICAgICAgbW9kZSA9IChrZXlzICYmIGV2ZW50Lm1ldGFLZXkgPyB0eXBlID0gXCJvdmVybGF5XCIgOiB0eXBlKSA9PT0gXCJzZWxlY3Rpb25cIiA/IE1PREVfRFJBRyA6IChrZXlzICYmIGV2ZW50LmFsdEtleSA/IE1PREVfQ0VOVEVSIDogTU9ERV9IQU5ETEUpLFxuICAgICAgICBzaWduWCA9IGRpbSA9PT0gWSA/IG51bGwgOiBzaWduc1hbdHlwZV0sXG4gICAgICAgIHNpZ25ZID0gZGltID09PSBYID8gbnVsbCA6IHNpZ25zWVt0eXBlXSxcbiAgICAgICAgc3RhdGUgPSBsb2NhbCh0aGF0KSxcbiAgICAgICAgZXh0ZW50ID0gc3RhdGUuZXh0ZW50LFxuICAgICAgICBzZWxlY3Rpb24gPSBzdGF0ZS5zZWxlY3Rpb24sXG4gICAgICAgIFcgPSBleHRlbnRbMF1bMF0sIHcwLCB3MSxcbiAgICAgICAgTiA9IGV4dGVudFswXVsxXSwgbjAsIG4xLFxuICAgICAgICBFID0gZXh0ZW50WzFdWzBdLCBlMCwgZTEsXG4gICAgICAgIFMgPSBleHRlbnRbMV1bMV0sIHMwLCBzMSxcbiAgICAgICAgZHggPSAwLFxuICAgICAgICBkeSA9IDAsXG4gICAgICAgIG1vdmluZyxcbiAgICAgICAgc2hpZnRpbmcgPSBzaWduWCAmJiBzaWduWSAmJiBrZXlzICYmIGV2ZW50LnNoaWZ0S2V5LFxuICAgICAgICBsb2NrWCxcbiAgICAgICAgbG9ja1ksXG4gICAgICAgIHBvaW50cyA9IEFycmF5LmZyb20oZXZlbnQudG91Y2hlcyB8fCBbZXZlbnRdLCB0ID0+IHtcbiAgICAgICAgICBjb25zdCBpID0gdC5pZGVudGlmaWVyO1xuICAgICAgICAgIHQgPSBwb2ludGVyKHQsIHRoYXQpO1xuICAgICAgICAgIHQucG9pbnQwID0gdC5zbGljZSgpO1xuICAgICAgICAgIHQuaWRlbnRpZmllciA9IGk7XG4gICAgICAgICAgcmV0dXJuIHQ7XG4gICAgICAgIH0pO1xuXG4gICAgaW50ZXJydXB0KHRoYXQpO1xuICAgIHZhciBlbWl0ID0gZW1pdHRlcih0aGF0LCBhcmd1bWVudHMsIHRydWUpLmJlZm9yZXN0YXJ0KCk7XG5cbiAgICBpZiAodHlwZSA9PT0gXCJvdmVybGF5XCIpIHtcbiAgICAgIGlmIChzZWxlY3Rpb24pIG1vdmluZyA9IHRydWU7XG4gICAgICBjb25zdCBwdHMgPSBbcG9pbnRzWzBdLCBwb2ludHNbMV0gfHwgcG9pbnRzWzBdXTtcbiAgICAgIHN0YXRlLnNlbGVjdGlvbiA9IHNlbGVjdGlvbiA9IFtbXG4gICAgICAgICAgdzAgPSBkaW0gPT09IFkgPyBXIDogbWluKHB0c1swXVswXSwgcHRzWzFdWzBdKSxcbiAgICAgICAgICBuMCA9IGRpbSA9PT0gWCA/IE4gOiBtaW4ocHRzWzBdWzFdLCBwdHNbMV1bMV0pXG4gICAgICAgIF0sIFtcbiAgICAgICAgICBlMCA9IGRpbSA9PT0gWSA/IEUgOiBtYXgocHRzWzBdWzBdLCBwdHNbMV1bMF0pLFxuICAgICAgICAgIHMwID0gZGltID09PSBYID8gUyA6IG1heChwdHNbMF1bMV0sIHB0c1sxXVsxXSlcbiAgICAgICAgXV07XG4gICAgICBpZiAocG9pbnRzLmxlbmd0aCA+IDEpIG1vdmUoZXZlbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB3MCA9IHNlbGVjdGlvblswXVswXTtcbiAgICAgIG4wID0gc2VsZWN0aW9uWzBdWzFdO1xuICAgICAgZTAgPSBzZWxlY3Rpb25bMV1bMF07XG4gICAgICBzMCA9IHNlbGVjdGlvblsxXVsxXTtcbiAgICB9XG5cbiAgICB3MSA9IHcwO1xuICAgIG4xID0gbjA7XG4gICAgZTEgPSBlMDtcbiAgICBzMSA9IHMwO1xuXG4gICAgdmFyIGdyb3VwID0gc2VsZWN0KHRoYXQpXG4gICAgICAgIC5hdHRyKFwicG9pbnRlci1ldmVudHNcIiwgXCJub25lXCIpO1xuXG4gICAgdmFyIG92ZXJsYXkgPSBncm91cC5zZWxlY3RBbGwoXCIub3ZlcmxheVwiKVxuICAgICAgICAuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzW3R5cGVdKTtcblxuICAgIGlmIChldmVudC50b3VjaGVzKSB7XG4gICAgICBlbWl0Lm1vdmVkID0gbW92ZWQ7XG4gICAgICBlbWl0LmVuZGVkID0gZW5kZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB2aWV3ID0gc2VsZWN0KGV2ZW50LnZpZXcpXG4gICAgICAgICAgLm9uKFwibW91c2Vtb3ZlLmJydXNoXCIsIG1vdmVkLCB0cnVlKVxuICAgICAgICAgIC5vbihcIm1vdXNldXAuYnJ1c2hcIiwgZW5kZWQsIHRydWUpO1xuICAgICAgaWYgKGtleXMpIHZpZXdcbiAgICAgICAgICAub24oXCJrZXlkb3duLmJydXNoXCIsIGtleWRvd25lZCwgdHJ1ZSlcbiAgICAgICAgICAub24oXCJrZXl1cC5icnVzaFwiLCBrZXl1cHBlZCwgdHJ1ZSlcblxuICAgICAgZHJhZ0Rpc2FibGUoZXZlbnQudmlldyk7XG4gICAgfVxuXG4gICAgcmVkcmF3LmNhbGwodGhhdCk7XG4gICAgZW1pdC5zdGFydChldmVudCwgbW9kZS5uYW1lKTtcblxuICAgIGZ1bmN0aW9uIG1vdmVkKGV2ZW50KSB7XG4gICAgICBmb3IgKGNvbnN0IHAgb2YgZXZlbnQuY2hhbmdlZFRvdWNoZXMgfHwgW2V2ZW50XSkge1xuICAgICAgICBmb3IgKGNvbnN0IGQgb2YgcG9pbnRzKVxuICAgICAgICAgIGlmIChkLmlkZW50aWZpZXIgPT09IHAuaWRlbnRpZmllcikgZC5jdXIgPSBwb2ludGVyKHAsIHRoYXQpO1xuICAgICAgfVxuICAgICAgaWYgKHNoaWZ0aW5nICYmICFsb2NrWCAmJiAhbG9ja1kgJiYgcG9pbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBjb25zdCBwb2ludCA9IHBvaW50c1swXTtcbiAgICAgICAgaWYgKGFicyhwb2ludC5jdXJbMF0gLSBwb2ludFswXSkgPiBhYnMocG9pbnQuY3VyWzFdIC0gcG9pbnRbMV0pKVxuICAgICAgICAgIGxvY2tZID0gdHJ1ZTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgIGxvY2tYID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGZvciAoY29uc3QgcG9pbnQgb2YgcG9pbnRzKVxuICAgICAgICBpZiAocG9pbnQuY3VyKSBwb2ludFswXSA9IHBvaW50LmN1clswXSwgcG9pbnRbMV0gPSBwb2ludC5jdXJbMV07XG4gICAgICBtb3ZpbmcgPSB0cnVlO1xuICAgICAgbm9ldmVudChldmVudCk7XG4gICAgICBtb3ZlKGV2ZW50KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb3ZlKGV2ZW50KSB7XG4gICAgICBjb25zdCBwb2ludCA9IHBvaW50c1swXSwgcG9pbnQwID0gcG9pbnQucG9pbnQwO1xuICAgICAgdmFyIHQ7XG5cbiAgICAgIGR4ID0gcG9pbnRbMF0gLSBwb2ludDBbMF07XG4gICAgICBkeSA9IHBvaW50WzFdIC0gcG9pbnQwWzFdO1xuXG4gICAgICBzd2l0Y2ggKG1vZGUpIHtcbiAgICAgICAgY2FzZSBNT0RFX1NQQUNFOlxuICAgICAgICBjYXNlIE1PREVfRFJBRzoge1xuICAgICAgICAgIGlmIChzaWduWCkgZHggPSBtYXgoVyAtIHcwLCBtaW4oRSAtIGUwLCBkeCkpLCB3MSA9IHcwICsgZHgsIGUxID0gZTAgKyBkeDtcbiAgICAgICAgICBpZiAoc2lnblkpIGR5ID0gbWF4KE4gLSBuMCwgbWluKFMgLSBzMCwgZHkpKSwgbjEgPSBuMCArIGR5LCBzMSA9IHMwICsgZHk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBNT0RFX0hBTkRMRToge1xuICAgICAgICAgIGlmIChwb2ludHNbMV0pIHtcbiAgICAgICAgICAgIGlmIChzaWduWCkgdzEgPSBtYXgoVywgbWluKEUsIHBvaW50c1swXVswXSkpLCBlMSA9IG1heChXLCBtaW4oRSwgcG9pbnRzWzFdWzBdKSksIHNpZ25YID0gMTtcbiAgICAgICAgICAgIGlmIChzaWduWSkgbjEgPSBtYXgoTiwgbWluKFMsIHBvaW50c1swXVsxXSkpLCBzMSA9IG1heChOLCBtaW4oUywgcG9pbnRzWzFdWzFdKSksIHNpZ25ZID0gMTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHNpZ25YIDwgMCkgZHggPSBtYXgoVyAtIHcwLCBtaW4oRSAtIHcwLCBkeCkpLCB3MSA9IHcwICsgZHgsIGUxID0gZTA7XG4gICAgICAgICAgICBlbHNlIGlmIChzaWduWCA+IDApIGR4ID0gbWF4KFcgLSBlMCwgbWluKEUgLSBlMCwgZHgpKSwgdzEgPSB3MCwgZTEgPSBlMCArIGR4O1xuICAgICAgICAgICAgaWYgKHNpZ25ZIDwgMCkgZHkgPSBtYXgoTiAtIG4wLCBtaW4oUyAtIG4wLCBkeSkpLCBuMSA9IG4wICsgZHksIHMxID0gczA7XG4gICAgICAgICAgICBlbHNlIGlmIChzaWduWSA+IDApIGR5ID0gbWF4KE4gLSBzMCwgbWluKFMgLSBzMCwgZHkpKSwgbjEgPSBuMCwgczEgPSBzMCArIGR5O1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIE1PREVfQ0VOVEVSOiB7XG4gICAgICAgICAgaWYgKHNpZ25YKSB3MSA9IG1heChXLCBtaW4oRSwgdzAgLSBkeCAqIHNpZ25YKSksIGUxID0gbWF4KFcsIG1pbihFLCBlMCArIGR4ICogc2lnblgpKTtcbiAgICAgICAgICBpZiAoc2lnblkpIG4xID0gbWF4KE4sIG1pbihTLCBuMCAtIGR5ICogc2lnblkpKSwgczEgPSBtYXgoTiwgbWluKFMsIHMwICsgZHkgKiBzaWduWSkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChlMSA8IHcxKSB7XG4gICAgICAgIHNpZ25YICo9IC0xO1xuICAgICAgICB0ID0gdzAsIHcwID0gZTAsIGUwID0gdDtcbiAgICAgICAgdCA9IHcxLCB3MSA9IGUxLCBlMSA9IHQ7XG4gICAgICAgIGlmICh0eXBlIGluIGZsaXBYKSBvdmVybGF5LmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29yc1t0eXBlID0gZmxpcFhbdHlwZV1dKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHMxIDwgbjEpIHtcbiAgICAgICAgc2lnblkgKj0gLTE7XG4gICAgICAgIHQgPSBuMCwgbjAgPSBzMCwgczAgPSB0O1xuICAgICAgICB0ID0gbjEsIG4xID0gczEsIHMxID0gdDtcbiAgICAgICAgaWYgKHR5cGUgaW4gZmxpcFkpIG92ZXJsYXkuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzW3R5cGUgPSBmbGlwWVt0eXBlXV0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUuc2VsZWN0aW9uKSBzZWxlY3Rpb24gPSBzdGF0ZS5zZWxlY3Rpb247IC8vIE1heSBiZSBzZXQgYnkgYnJ1c2gubW92ZSFcbiAgICAgIGlmIChsb2NrWCkgdzEgPSBzZWxlY3Rpb25bMF1bMF0sIGUxID0gc2VsZWN0aW9uWzFdWzBdO1xuICAgICAgaWYgKGxvY2tZKSBuMSA9IHNlbGVjdGlvblswXVsxXSwgczEgPSBzZWxlY3Rpb25bMV1bMV07XG5cbiAgICAgIGlmIChzZWxlY3Rpb25bMF1bMF0gIT09IHcxXG4gICAgICAgICAgfHwgc2VsZWN0aW9uWzBdWzFdICE9PSBuMVxuICAgICAgICAgIHx8IHNlbGVjdGlvblsxXVswXSAhPT0gZTFcbiAgICAgICAgICB8fCBzZWxlY3Rpb25bMV1bMV0gIT09IHMxKSB7XG4gICAgICAgIHN0YXRlLnNlbGVjdGlvbiA9IFtbdzEsIG4xXSwgW2UxLCBzMV1dO1xuICAgICAgICByZWRyYXcuY2FsbCh0aGF0KTtcbiAgICAgICAgZW1pdC5icnVzaChldmVudCwgbW9kZS5uYW1lKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBlbmRlZChldmVudCkge1xuICAgICAgbm9wcm9wYWdhdGlvbihldmVudCk7XG4gICAgICBpZiAoZXZlbnQudG91Y2hlcykge1xuICAgICAgICBpZiAoZXZlbnQudG91Y2hlcy5sZW5ndGgpIHJldHVybjtcbiAgICAgICAgaWYgKHRvdWNoZW5kaW5nKSBjbGVhclRpbWVvdXQodG91Y2hlbmRpbmcpO1xuICAgICAgICB0b3VjaGVuZGluZyA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IHRvdWNoZW5kaW5nID0gbnVsbDsgfSwgNTAwKTsgLy8gR2hvc3QgY2xpY2tzIGFyZSBkZWxheWVkIVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZHJhZ0VuYWJsZShldmVudC52aWV3LCBtb3ZpbmcpO1xuICAgICAgICB2aWV3Lm9uKFwia2V5ZG93bi5icnVzaCBrZXl1cC5icnVzaCBtb3VzZW1vdmUuYnJ1c2ggbW91c2V1cC5icnVzaFwiLCBudWxsKTtcbiAgICAgIH1cbiAgICAgIGdyb3VwLmF0dHIoXCJwb2ludGVyLWV2ZW50c1wiLCBcImFsbFwiKTtcbiAgICAgIG92ZXJsYXkuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzLm92ZXJsYXkpO1xuICAgICAgaWYgKHN0YXRlLnNlbGVjdGlvbikgc2VsZWN0aW9uID0gc3RhdGUuc2VsZWN0aW9uOyAvLyBNYXkgYmUgc2V0IGJ5IGJydXNoLm1vdmUgKG9uIHN0YXJ0KSFcbiAgICAgIGlmIChlbXB0eShzZWxlY3Rpb24pKSBzdGF0ZS5zZWxlY3Rpb24gPSBudWxsLCByZWRyYXcuY2FsbCh0aGF0KTtcbiAgICAgIGVtaXQuZW5kKGV2ZW50LCBtb2RlLm5hbWUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGtleWRvd25lZChldmVudCkge1xuICAgICAgc3dpdGNoIChldmVudC5rZXlDb2RlKSB7XG4gICAgICAgIGNhc2UgMTY6IHsgLy8gU0hJRlRcbiAgICAgICAgICBzaGlmdGluZyA9IHNpZ25YICYmIHNpZ25ZO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgMTg6IHsgLy8gQUxUXG4gICAgICAgICAgaWYgKG1vZGUgPT09IE1PREVfSEFORExFKSB7XG4gICAgICAgICAgICBpZiAoc2lnblgpIGUwID0gZTEgLSBkeCAqIHNpZ25YLCB3MCA9IHcxICsgZHggKiBzaWduWDtcbiAgICAgICAgICAgIGlmIChzaWduWSkgczAgPSBzMSAtIGR5ICogc2lnblksIG4wID0gbjEgKyBkeSAqIHNpZ25ZO1xuICAgICAgICAgICAgbW9kZSA9IE1PREVfQ0VOVEVSO1xuICAgICAgICAgICAgbW92ZShldmVudCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgMzI6IHsgLy8gU1BBQ0U7IHRha2VzIHByaW9yaXR5IG92ZXIgQUxUXG4gICAgICAgICAgaWYgKG1vZGUgPT09IE1PREVfSEFORExFIHx8IG1vZGUgPT09IE1PREVfQ0VOVEVSKSB7XG4gICAgICAgICAgICBpZiAoc2lnblggPCAwKSBlMCA9IGUxIC0gZHg7IGVsc2UgaWYgKHNpZ25YID4gMCkgdzAgPSB3MSAtIGR4O1xuICAgICAgICAgICAgaWYgKHNpZ25ZIDwgMCkgczAgPSBzMSAtIGR5OyBlbHNlIGlmIChzaWduWSA+IDApIG4wID0gbjEgLSBkeTtcbiAgICAgICAgICAgIG1vZGUgPSBNT0RFX1NQQUNFO1xuICAgICAgICAgICAgb3ZlcmxheS5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnMuc2VsZWN0aW9uKTtcbiAgICAgICAgICAgIG1vdmUoZXZlbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiByZXR1cm47XG4gICAgICB9XG4gICAgICBub2V2ZW50KGV2ZW50KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBrZXl1cHBlZChldmVudCkge1xuICAgICAgc3dpdGNoIChldmVudC5rZXlDb2RlKSB7XG4gICAgICAgIGNhc2UgMTY6IHsgLy8gU0hJRlRcbiAgICAgICAgICBpZiAoc2hpZnRpbmcpIHtcbiAgICAgICAgICAgIGxvY2tYID0gbG9ja1kgPSBzaGlmdGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgbW92ZShldmVudCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgMTg6IHsgLy8gQUxUXG4gICAgICAgICAgaWYgKG1vZGUgPT09IE1PREVfQ0VOVEVSKSB7XG4gICAgICAgICAgICBpZiAoc2lnblggPCAwKSBlMCA9IGUxOyBlbHNlIGlmIChzaWduWCA+IDApIHcwID0gdzE7XG4gICAgICAgICAgICBpZiAoc2lnblkgPCAwKSBzMCA9IHMxOyBlbHNlIGlmIChzaWduWSA+IDApIG4wID0gbjE7XG4gICAgICAgICAgICBtb2RlID0gTU9ERV9IQU5ETEU7XG4gICAgICAgICAgICBtb3ZlKGV2ZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAzMjogeyAvLyBTUEFDRVxuICAgICAgICAgIGlmIChtb2RlID09PSBNT0RFX1NQQUNFKSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQuYWx0S2V5KSB7XG4gICAgICAgICAgICAgIGlmIChzaWduWCkgZTAgPSBlMSAtIGR4ICogc2lnblgsIHcwID0gdzEgKyBkeCAqIHNpZ25YO1xuICAgICAgICAgICAgICBpZiAoc2lnblkpIHMwID0gczEgLSBkeSAqIHNpZ25ZLCBuMCA9IG4xICsgZHkgKiBzaWduWTtcbiAgICAgICAgICAgICAgbW9kZSA9IE1PREVfQ0VOVEVSO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKHNpZ25YIDwgMCkgZTAgPSBlMTsgZWxzZSBpZiAoc2lnblggPiAwKSB3MCA9IHcxO1xuICAgICAgICAgICAgICBpZiAoc2lnblkgPCAwKSBzMCA9IHMxOyBlbHNlIGlmIChzaWduWSA+IDApIG4wID0gbjE7XG4gICAgICAgICAgICAgIG1vZGUgPSBNT0RFX0hBTkRMRTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG92ZXJsYXkuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzW3R5cGVdKTtcbiAgICAgICAgICAgIG1vdmUoZXZlbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiByZXR1cm47XG4gICAgICB9XG4gICAgICBub2V2ZW50KGV2ZW50KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB0b3VjaG1vdmVkKGV2ZW50KSB7XG4gICAgZW1pdHRlcih0aGlzLCBhcmd1bWVudHMpLm1vdmVkKGV2ZW50KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRvdWNoZW5kZWQoZXZlbnQpIHtcbiAgICBlbWl0dGVyKHRoaXMsIGFyZ3VtZW50cykuZW5kZWQoZXZlbnQpO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5pdGlhbGl6ZSgpIHtcbiAgICB2YXIgc3RhdGUgPSB0aGlzLl9fYnJ1c2ggfHwge3NlbGVjdGlvbjogbnVsbH07XG4gICAgc3RhdGUuZXh0ZW50ID0gbnVtYmVyMihleHRlbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gICAgc3RhdGUuZGltID0gZGltO1xuICAgIHJldHVybiBzdGF0ZTtcbiAgfVxuXG4gIGJydXNoLmV4dGVudCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChleHRlbnQgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KG51bWJlcjIoXykpLCBicnVzaCkgOiBleHRlbnQ7XG4gIH07XG5cbiAgYnJ1c2guZmlsdGVyID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGZpbHRlciA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoISFfKSwgYnJ1c2gpIDogZmlsdGVyO1xuICB9O1xuXG4gIGJydXNoLnRvdWNoYWJsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0b3VjaGFibGUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCEhXyksIGJydXNoKSA6IHRvdWNoYWJsZTtcbiAgfTtcblxuICBicnVzaC5oYW5kbGVTaXplID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGhhbmRsZVNpemUgPSArXywgYnJ1c2gpIDogaGFuZGxlU2l6ZTtcbiAgfTtcblxuICBicnVzaC5rZXlNb2RpZmllcnMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoa2V5cyA9ICEhXywgYnJ1c2gpIDoga2V5cztcbiAgfTtcblxuICBicnVzaC5vbiA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZSA9IGxpc3RlbmVycy5vbi5hcHBseShsaXN0ZW5lcnMsIGFyZ3VtZW50cyk7XG4gICAgcmV0dXJuIHZhbHVlID09PSBsaXN0ZW5lcnMgPyBicnVzaCA6IHZhbHVlO1xuICB9O1xuXG4gIHJldHVybiBicnVzaDtcbn1cbiIsImltcG9ydCB7U2VsZWN0aW9uLCByb290fSBmcm9tIFwiLi9zZWxlY3Rpb24vaW5kZXguanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgcmV0dXJuIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIlxuICAgICAgPyBuZXcgU2VsZWN0aW9uKFtbZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3RvcildXSwgW2RvY3VtZW50LmRvY3VtZW50RWxlbWVudF0pXG4gICAgICA6IG5ldyBTZWxlY3Rpb24oW1tzZWxlY3Rvcl1dLCByb290KTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGV2ZW50KSB7XG4gIGxldCBzb3VyY2VFdmVudDtcbiAgd2hpbGUgKHNvdXJjZUV2ZW50ID0gZXZlbnQuc291cmNlRXZlbnQpIGV2ZW50ID0gc291cmNlRXZlbnQ7XG4gIHJldHVybiBldmVudDtcbn1cbiIsImltcG9ydCBzb3VyY2VFdmVudCBmcm9tIFwiLi9zb3VyY2VFdmVudC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihldmVudCwgbm9kZSkge1xuICBldmVudCA9IHNvdXJjZUV2ZW50KGV2ZW50KTtcbiAgaWYgKG5vZGUgPT09IHVuZGVmaW5lZCkgbm9kZSA9IGV2ZW50LmN1cnJlbnRUYXJnZXQ7XG4gIGlmIChub2RlKSB7XG4gICAgdmFyIHN2ZyA9IG5vZGUub3duZXJTVkdFbGVtZW50IHx8IG5vZGU7XG4gICAgaWYgKHN2Zy5jcmVhdGVTVkdQb2ludCkge1xuICAgICAgdmFyIHBvaW50ID0gc3ZnLmNyZWF0ZVNWR1BvaW50KCk7XG4gICAgICBwb2ludC54ID0gZXZlbnQuY2xpZW50WCwgcG9pbnQueSA9IGV2ZW50LmNsaWVudFk7XG4gICAgICBwb2ludCA9IHBvaW50Lm1hdHJpeFRyYW5zZm9ybShub2RlLmdldFNjcmVlbkNUTSgpLmludmVyc2UoKSk7XG4gICAgICByZXR1cm4gW3BvaW50LngsIHBvaW50LnldO1xuICAgIH1cbiAgICBpZiAobm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QpIHtcbiAgICAgIHZhciByZWN0ID0gbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIHJldHVybiBbZXZlbnQuY2xpZW50WCAtIHJlY3QubGVmdCAtIG5vZGUuY2xpZW50TGVmdCwgZXZlbnQuY2xpZW50WSAtIHJlY3QudG9wIC0gbm9kZS5jbGllbnRUb3BdO1xuICAgIH1cbiAgfVxuICByZXR1cm4gW2V2ZW50LnBhZ2VYLCBldmVudC5wYWdlWV07XG59XG4iLCIvLyBUaGVzZSBhcmUgdHlwaWNhbGx5IHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCBub2V2ZW50IHRvIGVuc3VyZSB0aGF0IHdlIGNhblxuLy8gcHJldmVudERlZmF1bHQgb24gdGhlIGV2ZW50LlxuZXhwb3J0IGNvbnN0IG5vbnBhc3NpdmUgPSB7cGFzc2l2ZTogZmFsc2V9O1xuZXhwb3J0IGNvbnN0IG5vbnBhc3NpdmVjYXB0dXJlID0ge2NhcHR1cmU6IHRydWUsIHBhc3NpdmU6IGZhbHNlfTtcblxuZXhwb3J0IGZ1bmN0aW9uIG5vcHJvcGFnYXRpb24oZXZlbnQpIHtcbiAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGV2ZW50KSB7XG4gIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgeCA9PiAoKSA9PiB4O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gRHJhZ0V2ZW50KHR5cGUsIHtcbiAgc291cmNlRXZlbnQsXG4gIHN1YmplY3QsXG4gIHRhcmdldCxcbiAgaWRlbnRpZmllcixcbiAgYWN0aXZlLFxuICB4LCB5LCBkeCwgZHksXG4gIGRpc3BhdGNoXG59KSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHtcbiAgICB0eXBlOiB7dmFsdWU6IHR5cGUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZX0sXG4gICAgc291cmNlRXZlbnQ6IHt2YWx1ZTogc291cmNlRXZlbnQsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZX0sXG4gICAgc3ViamVjdDoge3ZhbHVlOiBzdWJqZWN0LCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWV9LFxuICAgIHRhcmdldDoge3ZhbHVlOiB0YXJnZXQsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZX0sXG4gICAgaWRlbnRpZmllcjoge3ZhbHVlOiBpZGVudGlmaWVyLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWV9LFxuICAgIGFjdGl2ZToge3ZhbHVlOiBhY3RpdmUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZX0sXG4gICAgeDoge3ZhbHVlOiB4LCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWV9LFxuICAgIHk6IHt2YWx1ZTogeSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlfSxcbiAgICBkeDoge3ZhbHVlOiBkeCwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlfSxcbiAgICBkeToge3ZhbHVlOiBkeSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlfSxcbiAgICBfOiB7dmFsdWU6IGRpc3BhdGNofVxuICB9KTtcbn1cblxuRHJhZ0V2ZW50LnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uKCkge1xuICB2YXIgdmFsdWUgPSB0aGlzLl8ub24uYXBwbHkodGhpcy5fLCBhcmd1bWVudHMpO1xuICByZXR1cm4gdmFsdWUgPT09IHRoaXMuXyA/IHRoaXMgOiB2YWx1ZTtcbn07XG4iLCJpbXBvcnQge2Rpc3BhdGNofSBmcm9tIFwiZDMtZGlzcGF0Y2hcIjtcbmltcG9ydCB7c2VsZWN0LCBwb2ludGVyfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQgbm9kcmFnLCB7eWVzZHJhZ30gZnJvbSBcIi4vbm9kcmFnLmpzXCI7XG5pbXBvcnQgbm9ldmVudCwge25vbnBhc3NpdmUsIG5vbnBhc3NpdmVjYXB0dXJlLCBub3Byb3BhZ2F0aW9ufSBmcm9tIFwiLi9ub2V2ZW50LmpzXCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnQuanNcIjtcbmltcG9ydCBEcmFnRXZlbnQgZnJvbSBcIi4vZXZlbnQuanNcIjtcblxuLy8gSWdub3JlIHJpZ2h0LWNsaWNrLCBzaW5jZSB0aGF0IHNob3VsZCBvcGVuIHRoZSBjb250ZXh0IG1lbnUuXG5mdW5jdGlvbiBkZWZhdWx0RmlsdGVyKGV2ZW50KSB7XG4gIHJldHVybiAhZXZlbnQuY3RybEtleSAmJiAhZXZlbnQuYnV0dG9uO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0Q29udGFpbmVyKCkge1xuICByZXR1cm4gdGhpcy5wYXJlbnROb2RlO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0U3ViamVjdChldmVudCwgZCkge1xuICByZXR1cm4gZCA9PSBudWxsID8ge3g6IGV2ZW50LngsIHk6IGV2ZW50Lnl9IDogZDtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdFRvdWNoYWJsZSgpIHtcbiAgcmV0dXJuIG5hdmlnYXRvci5tYXhUb3VjaFBvaW50cyB8fCAoXCJvbnRvdWNoc3RhcnRcIiBpbiB0aGlzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBmaWx0ZXIgPSBkZWZhdWx0RmlsdGVyLFxuICAgICAgY29udGFpbmVyID0gZGVmYXVsdENvbnRhaW5lcixcbiAgICAgIHN1YmplY3QgPSBkZWZhdWx0U3ViamVjdCxcbiAgICAgIHRvdWNoYWJsZSA9IGRlZmF1bHRUb3VjaGFibGUsXG4gICAgICBnZXN0dXJlcyA9IHt9LFxuICAgICAgbGlzdGVuZXJzID0gZGlzcGF0Y2goXCJzdGFydFwiLCBcImRyYWdcIiwgXCJlbmRcIiksXG4gICAgICBhY3RpdmUgPSAwLFxuICAgICAgbW91c2Vkb3dueCxcbiAgICAgIG1vdXNlZG93bnksXG4gICAgICBtb3VzZW1vdmluZyxcbiAgICAgIHRvdWNoZW5kaW5nLFxuICAgICAgY2xpY2tEaXN0YW5jZTIgPSAwO1xuXG4gIGZ1bmN0aW9uIGRyYWcoc2VsZWN0aW9uKSB7XG4gICAgc2VsZWN0aW9uXG4gICAgICAgIC5vbihcIm1vdXNlZG93bi5kcmFnXCIsIG1vdXNlZG93bmVkKVxuICAgICAgLmZpbHRlcih0b3VjaGFibGUpXG4gICAgICAgIC5vbihcInRvdWNoc3RhcnQuZHJhZ1wiLCB0b3VjaHN0YXJ0ZWQpXG4gICAgICAgIC5vbihcInRvdWNobW92ZS5kcmFnXCIsIHRvdWNobW92ZWQsIG5vbnBhc3NpdmUpXG4gICAgICAgIC5vbihcInRvdWNoZW5kLmRyYWcgdG91Y2hjYW5jZWwuZHJhZ1wiLCB0b3VjaGVuZGVkKVxuICAgICAgICAuc3R5bGUoXCJ0b3VjaC1hY3Rpb25cIiwgXCJub25lXCIpXG4gICAgICAgIC5zdHlsZShcIi13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvclwiLCBcInJnYmEoMCwwLDAsMClcIik7XG4gIH1cblxuICBmdW5jdGlvbiBtb3VzZWRvd25lZChldmVudCwgZCkge1xuICAgIGlmICh0b3VjaGVuZGluZyB8fCAhZmlsdGVyLmNhbGwodGhpcywgZXZlbnQsIGQpKSByZXR1cm47XG4gICAgdmFyIGdlc3R1cmUgPSBiZWZvcmVzdGFydCh0aGlzLCBjb250YWluZXIuY2FsbCh0aGlzLCBldmVudCwgZCksIGV2ZW50LCBkLCBcIm1vdXNlXCIpO1xuICAgIGlmICghZ2VzdHVyZSkgcmV0dXJuO1xuICAgIHNlbGVjdChldmVudC52aWV3KVxuICAgICAgLm9uKFwibW91c2Vtb3ZlLmRyYWdcIiwgbW91c2Vtb3ZlZCwgbm9ucGFzc2l2ZWNhcHR1cmUpXG4gICAgICAub24oXCJtb3VzZXVwLmRyYWdcIiwgbW91c2V1cHBlZCwgbm9ucGFzc2l2ZWNhcHR1cmUpO1xuICAgIG5vZHJhZyhldmVudC52aWV3KTtcbiAgICBub3Byb3BhZ2F0aW9uKGV2ZW50KTtcbiAgICBtb3VzZW1vdmluZyA9IGZhbHNlO1xuICAgIG1vdXNlZG93bnggPSBldmVudC5jbGllbnRYO1xuICAgIG1vdXNlZG93bnkgPSBldmVudC5jbGllbnRZO1xuICAgIGdlc3R1cmUoXCJzdGFydFwiLCBldmVudCk7XG4gIH1cblxuICBmdW5jdGlvbiBtb3VzZW1vdmVkKGV2ZW50KSB7XG4gICAgbm9ldmVudChldmVudCk7XG4gICAgaWYgKCFtb3VzZW1vdmluZykge1xuICAgICAgdmFyIGR4ID0gZXZlbnQuY2xpZW50WCAtIG1vdXNlZG93bngsIGR5ID0gZXZlbnQuY2xpZW50WSAtIG1vdXNlZG93bnk7XG4gICAgICBtb3VzZW1vdmluZyA9IGR4ICogZHggKyBkeSAqIGR5ID4gY2xpY2tEaXN0YW5jZTI7XG4gICAgfVxuICAgIGdlc3R1cmVzLm1vdXNlKFwiZHJhZ1wiLCBldmVudCk7XG4gIH1cblxuICBmdW5jdGlvbiBtb3VzZXVwcGVkKGV2ZW50KSB7XG4gICAgc2VsZWN0KGV2ZW50LnZpZXcpLm9uKFwibW91c2Vtb3ZlLmRyYWcgbW91c2V1cC5kcmFnXCIsIG51bGwpO1xuICAgIHllc2RyYWcoZXZlbnQudmlldywgbW91c2Vtb3ZpbmcpO1xuICAgIG5vZXZlbnQoZXZlbnQpO1xuICAgIGdlc3R1cmVzLm1vdXNlKFwiZW5kXCIsIGV2ZW50KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRvdWNoc3RhcnRlZChldmVudCwgZCkge1xuICAgIGlmICghZmlsdGVyLmNhbGwodGhpcywgZXZlbnQsIGQpKSByZXR1cm47XG4gICAgdmFyIHRvdWNoZXMgPSBldmVudC5jaGFuZ2VkVG91Y2hlcyxcbiAgICAgICAgYyA9IGNvbnRhaW5lci5jYWxsKHRoaXMsIGV2ZW50LCBkKSxcbiAgICAgICAgbiA9IHRvdWNoZXMubGVuZ3RoLCBpLCBnZXN0dXJlO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKGdlc3R1cmUgPSBiZWZvcmVzdGFydCh0aGlzLCBjLCBldmVudCwgZCwgdG91Y2hlc1tpXS5pZGVudGlmaWVyLCB0b3VjaGVzW2ldKSkge1xuICAgICAgICBub3Byb3BhZ2F0aW9uKGV2ZW50KTtcbiAgICAgICAgZ2VzdHVyZShcInN0YXJ0XCIsIGV2ZW50LCB0b3VjaGVzW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB0b3VjaG1vdmVkKGV2ZW50KSB7XG4gICAgdmFyIHRvdWNoZXMgPSBldmVudC5jaGFuZ2VkVG91Y2hlcyxcbiAgICAgICAgbiA9IHRvdWNoZXMubGVuZ3RoLCBpLCBnZXN0dXJlO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKGdlc3R1cmUgPSBnZXN0dXJlc1t0b3VjaGVzW2ldLmlkZW50aWZpZXJdKSB7XG4gICAgICAgIG5vZXZlbnQoZXZlbnQpO1xuICAgICAgICBnZXN0dXJlKFwiZHJhZ1wiLCBldmVudCwgdG91Y2hlc1tpXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdG91Y2hlbmRlZChldmVudCkge1xuICAgIHZhciB0b3VjaGVzID0gZXZlbnQuY2hhbmdlZFRvdWNoZXMsXG4gICAgICAgIG4gPSB0b3VjaGVzLmxlbmd0aCwgaSwgZ2VzdHVyZTtcblxuICAgIGlmICh0b3VjaGVuZGluZykgY2xlYXJUaW1lb3V0KHRvdWNoZW5kaW5nKTtcbiAgICB0b3VjaGVuZGluZyA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IHRvdWNoZW5kaW5nID0gbnVsbDsgfSwgNTAwKTsgLy8gR2hvc3QgY2xpY2tzIGFyZSBkZWxheWVkIVxuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChnZXN0dXJlID0gZ2VzdHVyZXNbdG91Y2hlc1tpXS5pZGVudGlmaWVyXSkge1xuICAgICAgICBub3Byb3BhZ2F0aW9uKGV2ZW50KTtcbiAgICAgICAgZ2VzdHVyZShcImVuZFwiLCBldmVudCwgdG91Y2hlc1tpXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gYmVmb3Jlc3RhcnQodGhhdCwgY29udGFpbmVyLCBldmVudCwgZCwgaWRlbnRpZmllciwgdG91Y2gpIHtcbiAgICB2YXIgZGlzcGF0Y2ggPSBsaXN0ZW5lcnMuY29weSgpLFxuICAgICAgICBwID0gcG9pbnRlcih0b3VjaCB8fCBldmVudCwgY29udGFpbmVyKSwgZHgsIGR5LFxuICAgICAgICBzO1xuXG4gICAgaWYgKChzID0gc3ViamVjdC5jYWxsKHRoYXQsIG5ldyBEcmFnRXZlbnQoXCJiZWZvcmVzdGFydFwiLCB7XG4gICAgICAgIHNvdXJjZUV2ZW50OiBldmVudCxcbiAgICAgICAgdGFyZ2V0OiBkcmFnLFxuICAgICAgICBpZGVudGlmaWVyLFxuICAgICAgICBhY3RpdmUsXG4gICAgICAgIHg6IHBbMF0sXG4gICAgICAgIHk6IHBbMV0sXG4gICAgICAgIGR4OiAwLFxuICAgICAgICBkeTogMCxcbiAgICAgICAgZGlzcGF0Y2hcbiAgICAgIH0pLCBkKSkgPT0gbnVsbCkgcmV0dXJuO1xuXG4gICAgZHggPSBzLnggLSBwWzBdIHx8IDA7XG4gICAgZHkgPSBzLnkgLSBwWzFdIHx8IDA7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gZ2VzdHVyZSh0eXBlLCBldmVudCwgdG91Y2gpIHtcbiAgICAgIHZhciBwMCA9IHAsIG47XG4gICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSBcInN0YXJ0XCI6IGdlc3R1cmVzW2lkZW50aWZpZXJdID0gZ2VzdHVyZSwgbiA9IGFjdGl2ZSsrOyBicmVhaztcbiAgICAgICAgY2FzZSBcImVuZFwiOiBkZWxldGUgZ2VzdHVyZXNbaWRlbnRpZmllcl0sIC0tYWN0aXZlOyAvLyBmYWxscyB0aHJvdWdoXG4gICAgICAgIGNhc2UgXCJkcmFnXCI6IHAgPSBwb2ludGVyKHRvdWNoIHx8IGV2ZW50LCBjb250YWluZXIpLCBuID0gYWN0aXZlOyBicmVhaztcbiAgICAgIH1cbiAgICAgIGRpc3BhdGNoLmNhbGwoXG4gICAgICAgIHR5cGUsXG4gICAgICAgIHRoYXQsXG4gICAgICAgIG5ldyBEcmFnRXZlbnQodHlwZSwge1xuICAgICAgICAgIHNvdXJjZUV2ZW50OiBldmVudCxcbiAgICAgICAgICBzdWJqZWN0OiBzLFxuICAgICAgICAgIHRhcmdldDogZHJhZyxcbiAgICAgICAgICBpZGVudGlmaWVyLFxuICAgICAgICAgIGFjdGl2ZTogbixcbiAgICAgICAgICB4OiBwWzBdICsgZHgsXG4gICAgICAgICAgeTogcFsxXSArIGR5LFxuICAgICAgICAgIGR4OiBwWzBdIC0gcDBbMF0sXG4gICAgICAgICAgZHk6IHBbMV0gLSBwMFsxXSxcbiAgICAgICAgICBkaXNwYXRjaFxuICAgICAgICB9KSxcbiAgICAgICAgZFxuICAgICAgKTtcbiAgICB9O1xuICB9XG5cbiAgZHJhZy5maWx0ZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZmlsdGVyID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCghIV8pLCBkcmFnKSA6IGZpbHRlcjtcbiAgfTtcblxuICBkcmFnLmNvbnRhaW5lciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjb250YWluZXIgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KF8pLCBkcmFnKSA6IGNvbnRhaW5lcjtcbiAgfTtcblxuICBkcmFnLnN1YmplY3QgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc3ViamVjdCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoXyksIGRyYWcpIDogc3ViamVjdDtcbiAgfTtcblxuICBkcmFnLnRvdWNoYWJsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0b3VjaGFibGUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCEhXyksIGRyYWcpIDogdG91Y2hhYmxlO1xuICB9O1xuXG4gIGRyYWcub24gPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmFsdWUgPSBsaXN0ZW5lcnMub24uYXBwbHkobGlzdGVuZXJzLCBhcmd1bWVudHMpO1xuICAgIHJldHVybiB2YWx1ZSA9PT0gbGlzdGVuZXJzID8gZHJhZyA6IHZhbHVlO1xuICB9O1xuXG4gIGRyYWcuY2xpY2tEaXN0YW5jZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjbGlja0Rpc3RhbmNlMiA9IChfID0gK18pICogXywgZHJhZykgOiBNYXRoLnNxcnQoY2xpY2tEaXN0YW5jZTIpO1xuICB9O1xuXG4gIHJldHVybiBkcmFnO1xufVxuIiwiaW1wb3J0IHtzZWxlY3R9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCBub2V2ZW50LCB7bm9ucGFzc2l2ZWNhcHR1cmV9IGZyb20gXCIuL25vZXZlbnQuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmlldykge1xuICB2YXIgcm9vdCA9IHZpZXcuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LFxuICAgICAgc2VsZWN0aW9uID0gc2VsZWN0KHZpZXcpLm9uKFwiZHJhZ3N0YXJ0LmRyYWdcIiwgbm9ldmVudCwgbm9ucGFzc2l2ZWNhcHR1cmUpO1xuICBpZiAoXCJvbnNlbGVjdHN0YXJ0XCIgaW4gcm9vdCkge1xuICAgIHNlbGVjdGlvbi5vbihcInNlbGVjdHN0YXJ0LmRyYWdcIiwgbm9ldmVudCwgbm9ucGFzc2l2ZWNhcHR1cmUpO1xuICB9IGVsc2Uge1xuICAgIHJvb3QuX19ub3NlbGVjdCA9IHJvb3Quc3R5bGUuTW96VXNlclNlbGVjdDtcbiAgICByb290LnN0eWxlLk1velVzZXJTZWxlY3QgPSBcIm5vbmVcIjtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24geWVzZHJhZyh2aWV3LCBub2NsaWNrKSB7XG4gIHZhciByb290ID0gdmlldy5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsXG4gICAgICBzZWxlY3Rpb24gPSBzZWxlY3Qodmlldykub24oXCJkcmFnc3RhcnQuZHJhZ1wiLCBudWxsKTtcbiAgaWYgKG5vY2xpY2spIHtcbiAgICBzZWxlY3Rpb24ub24oXCJjbGljay5kcmFnXCIsIG5vZXZlbnQsIG5vbnBhc3NpdmVjYXB0dXJlKTtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyBzZWxlY3Rpb24ub24oXCJjbGljay5kcmFnXCIsIG51bGwpOyB9LCAwKTtcbiAgfVxuICBpZiAoXCJvbnNlbGVjdHN0YXJ0XCIgaW4gcm9vdCkge1xuICAgIHNlbGVjdGlvbi5vbihcInNlbGVjdHN0YXJ0LmRyYWdcIiwgbnVsbCk7XG4gIH0gZWxzZSB7XG4gICAgcm9vdC5zdHlsZS5Nb3pVc2VyU2VsZWN0ID0gcm9vdC5fX25vc2VsZWN0O1xuICAgIGRlbGV0ZSByb290Ll9fbm9zZWxlY3Q7XG4gIH1cbn1cbiIsImNvbnN0IHBpID0gTWF0aC5QSSxcbiAgICB0YXUgPSAyICogcGksXG4gICAgZXBzaWxvbiA9IDFlLTYsXG4gICAgdGF1RXBzaWxvbiA9IHRhdSAtIGVwc2lsb247XG5cbmZ1bmN0aW9uIFBhdGgoKSB7XG4gIHRoaXMuX3gwID0gdGhpcy5feTAgPSAvLyBzdGFydCBvZiBjdXJyZW50IHN1YnBhdGhcbiAgdGhpcy5feDEgPSB0aGlzLl95MSA9IG51bGw7IC8vIGVuZCBvZiBjdXJyZW50IHN1YnBhdGhcbiAgdGhpcy5fID0gXCJcIjtcbn1cblxuZnVuY3Rpb24gcGF0aCgpIHtcbiAgcmV0dXJuIG5ldyBQYXRoO1xufVxuXG5QYXRoLnByb3RvdHlwZSA9IHBhdGgucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogUGF0aCxcbiAgbW92ZVRvOiBmdW5jdGlvbih4LCB5KSB7XG4gICAgdGhpcy5fICs9IFwiTVwiICsgKHRoaXMuX3gwID0gdGhpcy5feDEgPSAreCkgKyBcIixcIiArICh0aGlzLl95MCA9IHRoaXMuX3kxID0gK3kpO1xuICB9LFxuICBjbG9zZVBhdGg6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl94MSAhPT0gbnVsbCkge1xuICAgICAgdGhpcy5feDEgPSB0aGlzLl94MCwgdGhpcy5feTEgPSB0aGlzLl95MDtcbiAgICAgIHRoaXMuXyArPSBcIlpcIjtcbiAgICB9XG4gIH0sXG4gIGxpbmVUbzogZnVuY3Rpb24oeCwgeSkge1xuICAgIHRoaXMuXyArPSBcIkxcIiArICh0aGlzLl94MSA9ICt4KSArIFwiLFwiICsgKHRoaXMuX3kxID0gK3kpO1xuICB9LFxuICBxdWFkcmF0aWNDdXJ2ZVRvOiBmdW5jdGlvbih4MSwgeTEsIHgsIHkpIHtcbiAgICB0aGlzLl8gKz0gXCJRXCIgKyAoK3gxKSArIFwiLFwiICsgKCt5MSkgKyBcIixcIiArICh0aGlzLl94MSA9ICt4KSArIFwiLFwiICsgKHRoaXMuX3kxID0gK3kpO1xuICB9LFxuICBiZXppZXJDdXJ2ZVRvOiBmdW5jdGlvbih4MSwgeTEsIHgyLCB5MiwgeCwgeSkge1xuICAgIHRoaXMuXyArPSBcIkNcIiArICgreDEpICsgXCIsXCIgKyAoK3kxKSArIFwiLFwiICsgKCt4MikgKyBcIixcIiArICgreTIpICsgXCIsXCIgKyAodGhpcy5feDEgPSAreCkgKyBcIixcIiArICh0aGlzLl95MSA9ICt5KTtcbiAgfSxcbiAgYXJjVG86IGZ1bmN0aW9uKHgxLCB5MSwgeDIsIHkyLCByKSB7XG4gICAgeDEgPSAreDEsIHkxID0gK3kxLCB4MiA9ICt4MiwgeTIgPSAreTIsIHIgPSArcjtcbiAgICB2YXIgeDAgPSB0aGlzLl94MSxcbiAgICAgICAgeTAgPSB0aGlzLl95MSxcbiAgICAgICAgeDIxID0geDIgLSB4MSxcbiAgICAgICAgeTIxID0geTIgLSB5MSxcbiAgICAgICAgeDAxID0geDAgLSB4MSxcbiAgICAgICAgeTAxID0geTAgLSB5MSxcbiAgICAgICAgbDAxXzIgPSB4MDEgKiB4MDEgKyB5MDEgKiB5MDE7XG5cbiAgICAvLyBJcyB0aGUgcmFkaXVzIG5lZ2F0aXZlPyBFcnJvci5cbiAgICBpZiAociA8IDApIHRocm93IG5ldyBFcnJvcihcIm5lZ2F0aXZlIHJhZGl1czogXCIgKyByKTtcblxuICAgIC8vIElzIHRoaXMgcGF0aCBlbXB0eT8gTW92ZSB0byAoeDEseTEpLlxuICAgIGlmICh0aGlzLl94MSA9PT0gbnVsbCkge1xuICAgICAgdGhpcy5fICs9IFwiTVwiICsgKHRoaXMuX3gxID0geDEpICsgXCIsXCIgKyAodGhpcy5feTEgPSB5MSk7XG4gICAgfVxuXG4gICAgLy8gT3IsIGlzICh4MSx5MSkgY29pbmNpZGVudCB3aXRoICh4MCx5MCk/IERvIG5vdGhpbmcuXG4gICAgZWxzZSBpZiAoIShsMDFfMiA+IGVwc2lsb24pKTtcblxuICAgIC8vIE9yLCBhcmUgKHgwLHkwKSwgKHgxLHkxKSBhbmQgKHgyLHkyKSBjb2xsaW5lYXI/XG4gICAgLy8gRXF1aXZhbGVudGx5LCBpcyAoeDEseTEpIGNvaW5jaWRlbnQgd2l0aCAoeDIseTIpP1xuICAgIC8vIE9yLCBpcyB0aGUgcmFkaXVzIHplcm8/IExpbmUgdG8gKHgxLHkxKS5cbiAgICBlbHNlIGlmICghKE1hdGguYWJzKHkwMSAqIHgyMSAtIHkyMSAqIHgwMSkgPiBlcHNpbG9uKSB8fCAhcikge1xuICAgICAgdGhpcy5fICs9IFwiTFwiICsgKHRoaXMuX3gxID0geDEpICsgXCIsXCIgKyAodGhpcy5feTEgPSB5MSk7XG4gICAgfVxuXG4gICAgLy8gT3RoZXJ3aXNlLCBkcmF3IGFuIGFyYyFcbiAgICBlbHNlIHtcbiAgICAgIHZhciB4MjAgPSB4MiAtIHgwLFxuICAgICAgICAgIHkyMCA9IHkyIC0geTAsXG4gICAgICAgICAgbDIxXzIgPSB4MjEgKiB4MjEgKyB5MjEgKiB5MjEsXG4gICAgICAgICAgbDIwXzIgPSB4MjAgKiB4MjAgKyB5MjAgKiB5MjAsXG4gICAgICAgICAgbDIxID0gTWF0aC5zcXJ0KGwyMV8yKSxcbiAgICAgICAgICBsMDEgPSBNYXRoLnNxcnQobDAxXzIpLFxuICAgICAgICAgIGwgPSByICogTWF0aC50YW4oKHBpIC0gTWF0aC5hY29zKChsMjFfMiArIGwwMV8yIC0gbDIwXzIpIC8gKDIgKiBsMjEgKiBsMDEpKSkgLyAyKSxcbiAgICAgICAgICB0MDEgPSBsIC8gbDAxLFxuICAgICAgICAgIHQyMSA9IGwgLyBsMjE7XG5cbiAgICAgIC8vIElmIHRoZSBzdGFydCB0YW5nZW50IGlzIG5vdCBjb2luY2lkZW50IHdpdGggKHgwLHkwKSwgbGluZSB0by5cbiAgICAgIGlmIChNYXRoLmFicyh0MDEgLSAxKSA+IGVwc2lsb24pIHtcbiAgICAgICAgdGhpcy5fICs9IFwiTFwiICsgKHgxICsgdDAxICogeDAxKSArIFwiLFwiICsgKHkxICsgdDAxICogeTAxKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fICs9IFwiQVwiICsgciArIFwiLFwiICsgciArIFwiLDAsMCxcIiArICgrKHkwMSAqIHgyMCA+IHgwMSAqIHkyMCkpICsgXCIsXCIgKyAodGhpcy5feDEgPSB4MSArIHQyMSAqIHgyMSkgKyBcIixcIiArICh0aGlzLl95MSA9IHkxICsgdDIxICogeTIxKTtcbiAgICB9XG4gIH0sXG4gIGFyYzogZnVuY3Rpb24oeCwgeSwgciwgYTAsIGExLCBjY3cpIHtcbiAgICB4ID0gK3gsIHkgPSAreSwgciA9ICtyLCBjY3cgPSAhIWNjdztcbiAgICB2YXIgZHggPSByICogTWF0aC5jb3MoYTApLFxuICAgICAgICBkeSA9IHIgKiBNYXRoLnNpbihhMCksXG4gICAgICAgIHgwID0geCArIGR4LFxuICAgICAgICB5MCA9IHkgKyBkeSxcbiAgICAgICAgY3cgPSAxIF4gY2N3LFxuICAgICAgICBkYSA9IGNjdyA/IGEwIC0gYTEgOiBhMSAtIGEwO1xuXG4gICAgLy8gSXMgdGhlIHJhZGl1cyBuZWdhdGl2ZT8gRXJyb3IuXG4gICAgaWYgKHIgPCAwKSB0aHJvdyBuZXcgRXJyb3IoXCJuZWdhdGl2ZSByYWRpdXM6IFwiICsgcik7XG5cbiAgICAvLyBJcyB0aGlzIHBhdGggZW1wdHk/IE1vdmUgdG8gKHgwLHkwKS5cbiAgICBpZiAodGhpcy5feDEgPT09IG51bGwpIHtcbiAgICAgIHRoaXMuXyArPSBcIk1cIiArIHgwICsgXCIsXCIgKyB5MDtcbiAgICB9XG5cbiAgICAvLyBPciwgaXMgKHgwLHkwKSBub3QgY29pbmNpZGVudCB3aXRoIHRoZSBwcmV2aW91cyBwb2ludD8gTGluZSB0byAoeDAseTApLlxuICAgIGVsc2UgaWYgKE1hdGguYWJzKHRoaXMuX3gxIC0geDApID4gZXBzaWxvbiB8fCBNYXRoLmFicyh0aGlzLl95MSAtIHkwKSA+IGVwc2lsb24pIHtcbiAgICAgIHRoaXMuXyArPSBcIkxcIiArIHgwICsgXCIsXCIgKyB5MDtcbiAgICB9XG5cbiAgICAvLyBJcyB0aGlzIGFyYyBlbXB0eT8gV2XigJlyZSBkb25lLlxuICAgIGlmICghcikgcmV0dXJuO1xuXG4gICAgLy8gRG9lcyB0aGUgYW5nbGUgZ28gdGhlIHdyb25nIHdheT8gRmxpcCB0aGUgZGlyZWN0aW9uLlxuICAgIGlmIChkYSA8IDApIGRhID0gZGEgJSB0YXUgKyB0YXU7XG5cbiAgICAvLyBJcyB0aGlzIGEgY29tcGxldGUgY2lyY2xlPyBEcmF3IHR3byBhcmNzIHRvIGNvbXBsZXRlIHRoZSBjaXJjbGUuXG4gICAgaWYgKGRhID4gdGF1RXBzaWxvbikge1xuICAgICAgdGhpcy5fICs9IFwiQVwiICsgciArIFwiLFwiICsgciArIFwiLDAsMSxcIiArIGN3ICsgXCIsXCIgKyAoeCAtIGR4KSArIFwiLFwiICsgKHkgLSBkeSkgKyBcIkFcIiArIHIgKyBcIixcIiArIHIgKyBcIiwwLDEsXCIgKyBjdyArIFwiLFwiICsgKHRoaXMuX3gxID0geDApICsgXCIsXCIgKyAodGhpcy5feTEgPSB5MCk7XG4gICAgfVxuXG4gICAgLy8gSXMgdGhpcyBhcmMgbm9uLWVtcHR5PyBEcmF3IGFuIGFyYyFcbiAgICBlbHNlIGlmIChkYSA+IGVwc2lsb24pIHtcbiAgICAgIHRoaXMuXyArPSBcIkFcIiArIHIgKyBcIixcIiArIHIgKyBcIiwwLFwiICsgKCsoZGEgPj0gcGkpKSArIFwiLFwiICsgY3cgKyBcIixcIiArICh0aGlzLl94MSA9IHggKyByICogTWF0aC5jb3MoYTEpKSArIFwiLFwiICsgKHRoaXMuX3kxID0geSArIHIgKiBNYXRoLnNpbihhMSkpO1xuICAgIH1cbiAgfSxcbiAgcmVjdDogZnVuY3Rpb24oeCwgeSwgdywgaCkge1xuICAgIHRoaXMuXyArPSBcIk1cIiArICh0aGlzLl94MCA9IHRoaXMuX3gxID0gK3gpICsgXCIsXCIgKyAodGhpcy5feTAgPSB0aGlzLl95MSA9ICt5KSArIFwiaFwiICsgKCt3KSArIFwidlwiICsgKCtoKSArIFwiaFwiICsgKC13KSArIFwiWlwiO1xuICB9LFxuICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuXztcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgcGF0aDtcbiIsImltcG9ydCBjcmVhdG9yIGZyb20gXCIuL2NyZWF0b3IuanNcIjtcbmltcG9ydCBzZWxlY3QgZnJvbSBcIi4vc2VsZWN0LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUpIHtcbiAgcmV0dXJuIHNlbGVjdChjcmVhdG9yKG5hbWUpLmNhbGwoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSk7XG59XG4iLCJpbXBvcnQgcG9pbnRlciBmcm9tIFwiLi9wb2ludGVyLmpzXCI7XG5pbXBvcnQgc291cmNlRXZlbnQgZnJvbSBcIi4vc291cmNlRXZlbnQuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZXZlbnRzLCBub2RlKSB7XG4gIGlmIChldmVudHMudGFyZ2V0KSB7IC8vIGkuZS4sIGluc3RhbmNlb2YgRXZlbnQsIG5vdCBUb3VjaExpc3Qgb3IgaXRlcmFibGVcbiAgICBldmVudHMgPSBzb3VyY2VFdmVudChldmVudHMpO1xuICAgIGlmIChub2RlID09PSB1bmRlZmluZWQpIG5vZGUgPSBldmVudHMuY3VycmVudFRhcmdldDtcbiAgICBldmVudHMgPSBldmVudHMudG91Y2hlcyB8fCBbZXZlbnRzXTtcbiAgfVxuICByZXR1cm4gQXJyYXkuZnJvbShldmVudHMsIGV2ZW50ID0+IHBvaW50ZXIoZXZlbnQsIG5vZGUpKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGNvbnN0YW50KCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufVxuIiwiZnVuY3Rpb24gTGluZWFyKGNvbnRleHQpIHtcbiAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG59XG5cbkxpbmVhci5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IDA7XG4gIH0sXG4gIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gIH0sXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fcG9pbnQgPSAwO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5fbGluZSB8fCAodGhpcy5fbGluZSAhPT0gMCAmJiB0aGlzLl9wb2ludCA9PT0gMSkpIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgdGhpcy5fbGluZSA9IDEgLSB0aGlzLl9saW5lO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHggPSAreCwgeSA9ICt5O1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMDogdGhpcy5fcG9pbnQgPSAxOyB0aGlzLl9saW5lID8gdGhpcy5fY29udGV4dC5saW5lVG8oeCwgeSkgOiB0aGlzLl9jb250ZXh0Lm1vdmVUbyh4LCB5KTsgYnJlYWs7XG4gICAgICBjYXNlIDE6IHRoaXMuX3BvaW50ID0gMjsgLy8gZmFsbHMgdGhyb3VnaFxuICAgICAgZGVmYXVsdDogdGhpcy5fY29udGV4dC5saW5lVG8oeCwgeSk7IGJyZWFrO1xuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29udGV4dCkge1xuICByZXR1cm4gbmV3IExpbmVhcihjb250ZXh0KTtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiB4KHApIHtcbiAgcmV0dXJuIHBbMF07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB5KHApIHtcbiAgcmV0dXJuIHBbMV07XG59XG4iLCJpbXBvcnQge3BhdGh9IGZyb20gXCJkMy1wYXRoXCI7XG5pbXBvcnQgYXJyYXkgZnJvbSBcIi4vYXJyYXkuanNcIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudC5qc1wiO1xuaW1wb3J0IGN1cnZlTGluZWFyIGZyb20gXCIuL2N1cnZlL2xpbmVhci5qc1wiO1xuaW1wb3J0IHt4IGFzIHBvaW50WCwgeSBhcyBwb2ludFl9IGZyb20gXCIuL3BvaW50LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgsIHkpIHtcbiAgdmFyIGRlZmluZWQgPSBjb25zdGFudCh0cnVlKSxcbiAgICAgIGNvbnRleHQgPSBudWxsLFxuICAgICAgY3VydmUgPSBjdXJ2ZUxpbmVhcixcbiAgICAgIG91dHB1dCA9IG51bGw7XG5cbiAgeCA9IHR5cGVvZiB4ID09PSBcImZ1bmN0aW9uXCIgPyB4IDogKHggPT09IHVuZGVmaW5lZCkgPyBwb2ludFggOiBjb25zdGFudCh4KTtcbiAgeSA9IHR5cGVvZiB5ID09PSBcImZ1bmN0aW9uXCIgPyB5IDogKHkgPT09IHVuZGVmaW5lZCkgPyBwb2ludFkgOiBjb25zdGFudCh5KTtcblxuICBmdW5jdGlvbiBsaW5lKGRhdGEpIHtcbiAgICB2YXIgaSxcbiAgICAgICAgbiA9IChkYXRhID0gYXJyYXkoZGF0YSkpLmxlbmd0aCxcbiAgICAgICAgZCxcbiAgICAgICAgZGVmaW5lZDAgPSBmYWxzZSxcbiAgICAgICAgYnVmZmVyO1xuXG4gICAgaWYgKGNvbnRleHQgPT0gbnVsbCkgb3V0cHV0ID0gY3VydmUoYnVmZmVyID0gcGF0aCgpKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPD0gbjsgKytpKSB7XG4gICAgICBpZiAoIShpIDwgbiAmJiBkZWZpbmVkKGQgPSBkYXRhW2ldLCBpLCBkYXRhKSkgPT09IGRlZmluZWQwKSB7XG4gICAgICAgIGlmIChkZWZpbmVkMCA9ICFkZWZpbmVkMCkgb3V0cHV0LmxpbmVTdGFydCgpO1xuICAgICAgICBlbHNlIG91dHB1dC5saW5lRW5kKCk7XG4gICAgICB9XG4gICAgICBpZiAoZGVmaW5lZDApIG91dHB1dC5wb2ludCgreChkLCBpLCBkYXRhKSwgK3koZCwgaSwgZGF0YSkpO1xuICAgIH1cblxuICAgIGlmIChidWZmZXIpIHJldHVybiBvdXRwdXQgPSBudWxsLCBidWZmZXIgKyBcIlwiIHx8IG51bGw7XG4gIH1cblxuICBsaW5lLnggPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBsaW5lKSA6IHg7XG4gIH07XG5cbiAgbGluZS55ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHkgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgbGluZSkgOiB5O1xuICB9O1xuXG4gIGxpbmUuZGVmaW5lZCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkZWZpbmVkID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCghIV8pLCBsaW5lKSA6IGRlZmluZWQ7XG4gIH07XG5cbiAgbGluZS5jdXJ2ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjdXJ2ZSA9IF8sIGNvbnRleHQgIT0gbnVsbCAmJiAob3V0cHV0ID0gY3VydmUoY29udGV4dCkpLCBsaW5lKSA6IGN1cnZlO1xuICB9O1xuXG4gIGxpbmUuY29udGV4dCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChfID09IG51bGwgPyBjb250ZXh0ID0gb3V0cHV0ID0gbnVsbCA6IG91dHB1dCA9IGN1cnZlKGNvbnRleHQgPSBfKSwgbGluZSkgOiBjb250ZXh0O1xuICB9O1xuXG4gIHJldHVybiBsaW5lO1xufVxuIiwiZXhwb3J0IHZhciBzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gdHlwZW9mIHggPT09IFwib2JqZWN0XCIgJiYgXCJsZW5ndGhcIiBpbiB4XG4gICAgPyB4IC8vIEFycmF5LCBUeXBlZEFycmF5LCBOb2RlTGlzdCwgYXJyYXktbGlrZVxuICAgIDogQXJyYXkuZnJvbSh4KTsgLy8gTWFwLCBTZXQsIGl0ZXJhYmxlLCBzdHJpbmcsIG9yIGFueXRoaW5nIGVsc2Vcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBUcmFuc2Zvcm0oaywgeCwgeSkge1xuICB0aGlzLmsgPSBrO1xuICB0aGlzLnggPSB4O1xuICB0aGlzLnkgPSB5O1xufVxuXG5UcmFuc2Zvcm0ucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogVHJhbnNmb3JtLFxuICBzY2FsZTogZnVuY3Rpb24oaykge1xuICAgIHJldHVybiBrID09PSAxID8gdGhpcyA6IG5ldyBUcmFuc2Zvcm0odGhpcy5rICogaywgdGhpcy54LCB0aGlzLnkpO1xuICB9LFxuICB0cmFuc2xhdGU6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICByZXR1cm4geCA9PT0gMCAmIHkgPT09IDAgPyB0aGlzIDogbmV3IFRyYW5zZm9ybSh0aGlzLmssIHRoaXMueCArIHRoaXMuayAqIHgsIHRoaXMueSArIHRoaXMuayAqIHkpO1xuICB9LFxuICBhcHBseTogZnVuY3Rpb24ocG9pbnQpIHtcbiAgICByZXR1cm4gW3BvaW50WzBdICogdGhpcy5rICsgdGhpcy54LCBwb2ludFsxXSAqIHRoaXMuayArIHRoaXMueV07XG4gIH0sXG4gIGFwcGx5WDogZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiB4ICogdGhpcy5rICsgdGhpcy54O1xuICB9LFxuICBhcHBseVk6IGZ1bmN0aW9uKHkpIHtcbiAgICByZXR1cm4geSAqIHRoaXMuayArIHRoaXMueTtcbiAgfSxcbiAgaW52ZXJ0OiBmdW5jdGlvbihsb2NhdGlvbikge1xuICAgIHJldHVybiBbKGxvY2F0aW9uWzBdIC0gdGhpcy54KSAvIHRoaXMuaywgKGxvY2F0aW9uWzFdIC0gdGhpcy55KSAvIHRoaXMua107XG4gIH0sXG4gIGludmVydFg6IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gKHggLSB0aGlzLngpIC8gdGhpcy5rO1xuICB9LFxuICBpbnZlcnRZOiBmdW5jdGlvbih5KSB7XG4gICAgcmV0dXJuICh5IC0gdGhpcy55KSAvIHRoaXMuaztcbiAgfSxcbiAgcmVzY2FsZVg6IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4geC5jb3B5KCkuZG9tYWluKHgucmFuZ2UoKS5tYXAodGhpcy5pbnZlcnRYLCB0aGlzKS5tYXAoeC5pbnZlcnQsIHgpKTtcbiAgfSxcbiAgcmVzY2FsZVk6IGZ1bmN0aW9uKHkpIHtcbiAgICByZXR1cm4geS5jb3B5KCkuZG9tYWluKHkucmFuZ2UoKS5tYXAodGhpcy5pbnZlcnRZLCB0aGlzKS5tYXAoeS5pbnZlcnQsIHkpKTtcbiAgfSxcbiAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBcInRyYW5zbGF0ZShcIiArIHRoaXMueCArIFwiLFwiICsgdGhpcy55ICsgXCIpIHNjYWxlKFwiICsgdGhpcy5rICsgXCIpXCI7XG4gIH1cbn07XG5cbmV4cG9ydCB2YXIgaWRlbnRpdHkgPSBuZXcgVHJhbnNmb3JtKDEsIDAsIDApO1xuXG50cmFuc2Zvcm0ucHJvdG90eXBlID0gVHJhbnNmb3JtLnByb3RvdHlwZTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdHJhbnNmb3JtKG5vZGUpIHtcbiAgd2hpbGUgKCFub2RlLl9fem9vbSkgaWYgKCEobm9kZSA9IG5vZGUucGFyZW50Tm9kZSkpIHJldHVybiBpZGVudGl0eTtcbiAgcmV0dXJuIG5vZGUuX196b29tO1xufVxuIiwiLy8gOjotIFBlcnNpc3RlbnQgZGF0YSBzdHJ1Y3R1cmUgcmVwcmVzZW50aW5nIGFuIG9yZGVyZWQgbWFwcGluZyBmcm9tXG4vLyBzdHJpbmdzIHRvIHZhbHVlcywgd2l0aCBzb21lIGNvbnZlbmllbnQgdXBkYXRlIG1ldGhvZHMuXG5mdW5jdGlvbiBPcmRlcmVkTWFwKGNvbnRlbnQpIHtcbiAgdGhpcy5jb250ZW50ID0gY29udGVudDtcbn1cblxuT3JkZXJlZE1hcC5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBPcmRlcmVkTWFwLFxuXG4gIGZpbmQ6IGZ1bmN0aW9uKGtleSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5jb250ZW50Lmxlbmd0aDsgaSArPSAyKVxuICAgICAgaWYgKHRoaXMuY29udGVudFtpXSA9PT0ga2V5KSByZXR1cm4gaVxuICAgIHJldHVybiAtMVxuICB9LFxuXG4gIC8vIDo6IChzdHJpbmcpIOKGkiA/YW55XG4gIC8vIFJldHJpZXZlIHRoZSB2YWx1ZSBzdG9yZWQgdW5kZXIgYGtleWAsIG9yIHJldHVybiB1bmRlZmluZWQgd2hlblxuICAvLyBubyBzdWNoIGtleSBleGlzdHMuXG4gIGdldDogZnVuY3Rpb24oa2V5KSB7XG4gICAgdmFyIGZvdW5kID0gdGhpcy5maW5kKGtleSk7XG4gICAgcmV0dXJuIGZvdW5kID09IC0xID8gdW5kZWZpbmVkIDogdGhpcy5jb250ZW50W2ZvdW5kICsgMV1cbiAgfSxcblxuICAvLyA6OiAoc3RyaW5nLCBhbnksID9zdHJpbmcpIOKGkiBPcmRlcmVkTWFwXG4gIC8vIENyZWF0ZSBhIG5ldyBtYXAgYnkgcmVwbGFjaW5nIHRoZSB2YWx1ZSBvZiBga2V5YCB3aXRoIGEgbmV3XG4gIC8vIHZhbHVlLCBvciBhZGRpbmcgYSBiaW5kaW5nIHRvIHRoZSBlbmQgb2YgdGhlIG1hcC4gSWYgYG5ld0tleWAgaXNcbiAgLy8gZ2l2ZW4sIHRoZSBrZXkgb2YgdGhlIGJpbmRpbmcgd2lsbCBiZSByZXBsYWNlZCB3aXRoIHRoYXQga2V5LlxuICB1cGRhdGU6IGZ1bmN0aW9uKGtleSwgdmFsdWUsIG5ld0tleSkge1xuICAgIHZhciBzZWxmID0gbmV3S2V5ICYmIG5ld0tleSAhPSBrZXkgPyB0aGlzLnJlbW92ZShuZXdLZXkpIDogdGhpcztcbiAgICB2YXIgZm91bmQgPSBzZWxmLmZpbmQoa2V5KSwgY29udGVudCA9IHNlbGYuY29udGVudC5zbGljZSgpO1xuICAgIGlmIChmb3VuZCA9PSAtMSkge1xuICAgICAgY29udGVudC5wdXNoKG5ld0tleSB8fCBrZXksIHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29udGVudFtmb3VuZCArIDFdID0gdmFsdWU7XG4gICAgICBpZiAobmV3S2V5KSBjb250ZW50W2ZvdW5kXSA9IG5ld0tleTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBPcmRlcmVkTWFwKGNvbnRlbnQpXG4gIH0sXG5cbiAgLy8gOjogKHN0cmluZykg4oaSIE9yZGVyZWRNYXBcbiAgLy8gUmV0dXJuIGEgbWFwIHdpdGggdGhlIGdpdmVuIGtleSByZW1vdmVkLCBpZiBpdCBleGlzdGVkLlxuICByZW1vdmU6IGZ1bmN0aW9uKGtleSkge1xuICAgIHZhciBmb3VuZCA9IHRoaXMuZmluZChrZXkpO1xuICAgIGlmIChmb3VuZCA9PSAtMSkgcmV0dXJuIHRoaXNcbiAgICB2YXIgY29udGVudCA9IHRoaXMuY29udGVudC5zbGljZSgpO1xuICAgIGNvbnRlbnQuc3BsaWNlKGZvdW5kLCAyKTtcbiAgICByZXR1cm4gbmV3IE9yZGVyZWRNYXAoY29udGVudClcbiAgfSxcblxuICAvLyA6OiAoc3RyaW5nLCBhbnkpIOKGkiBPcmRlcmVkTWFwXG4gIC8vIEFkZCBhIG5ldyBrZXkgdG8gdGhlIHN0YXJ0IG9mIHRoZSBtYXAuXG4gIGFkZFRvU3RhcnQ6IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICByZXR1cm4gbmV3IE9yZGVyZWRNYXAoW2tleSwgdmFsdWVdLmNvbmNhdCh0aGlzLnJlbW92ZShrZXkpLmNvbnRlbnQpKVxuICB9LFxuXG4gIC8vIDo6IChzdHJpbmcsIGFueSkg4oaSIE9yZGVyZWRNYXBcbiAgLy8gQWRkIGEgbmV3IGtleSB0byB0aGUgZW5kIG9mIHRoZSBtYXAuXG4gIGFkZFRvRW5kOiBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgdmFyIGNvbnRlbnQgPSB0aGlzLnJlbW92ZShrZXkpLmNvbnRlbnQuc2xpY2UoKTtcbiAgICBjb250ZW50LnB1c2goa2V5LCB2YWx1ZSk7XG4gICAgcmV0dXJuIG5ldyBPcmRlcmVkTWFwKGNvbnRlbnQpXG4gIH0sXG5cbiAgLy8gOjogKHN0cmluZywgc3RyaW5nLCBhbnkpIOKGkiBPcmRlcmVkTWFwXG4gIC8vIEFkZCBhIGtleSBhZnRlciB0aGUgZ2l2ZW4ga2V5LiBJZiBgcGxhY2VgIGlzIG5vdCBmb3VuZCwgdGhlIG5ld1xuICAvLyBrZXkgaXMgYWRkZWQgdG8gdGhlIGVuZC5cbiAgYWRkQmVmb3JlOiBmdW5jdGlvbihwbGFjZSwga2V5LCB2YWx1ZSkge1xuICAgIHZhciB3aXRob3V0ID0gdGhpcy5yZW1vdmUoa2V5KSwgY29udGVudCA9IHdpdGhvdXQuY29udGVudC5zbGljZSgpO1xuICAgIHZhciBmb3VuZCA9IHdpdGhvdXQuZmluZChwbGFjZSk7XG4gICAgY29udGVudC5zcGxpY2UoZm91bmQgPT0gLTEgPyBjb250ZW50Lmxlbmd0aCA6IGZvdW5kLCAwLCBrZXksIHZhbHVlKTtcbiAgICByZXR1cm4gbmV3IE9yZGVyZWRNYXAoY29udGVudClcbiAgfSxcblxuICAvLyA6OiAoKGtleTogc3RyaW5nLCB2YWx1ZTogYW55KSlcbiAgLy8gQ2FsbCB0aGUgZ2l2ZW4gZnVuY3Rpb24gZm9yIGVhY2gga2V5L3ZhbHVlIHBhaXIgaW4gdGhlIG1hcCwgaW5cbiAgLy8gb3JkZXIuXG4gIGZvckVhY2g6IGZ1bmN0aW9uKGYpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuY29udGVudC5sZW5ndGg7IGkgKz0gMilcbiAgICAgIGYodGhpcy5jb250ZW50W2ldLCB0aGlzLmNvbnRlbnRbaSArIDFdKTtcbiAgfSxcblxuICAvLyA6OiAodW5pb248T2JqZWN0LCBPcmRlcmVkTWFwPikg4oaSIE9yZGVyZWRNYXBcbiAgLy8gQ3JlYXRlIGEgbmV3IG1hcCBieSBwcmVwZW5kaW5nIHRoZSBrZXlzIGluIHRoaXMgbWFwIHRoYXQgZG9uJ3RcbiAgLy8gYXBwZWFyIGluIGBtYXBgIGJlZm9yZSB0aGUga2V5cyBpbiBgbWFwYC5cbiAgcHJlcGVuZDogZnVuY3Rpb24obWFwKSB7XG4gICAgbWFwID0gT3JkZXJlZE1hcC5mcm9tKG1hcCk7XG4gICAgaWYgKCFtYXAuc2l6ZSkgcmV0dXJuIHRoaXNcbiAgICByZXR1cm4gbmV3IE9yZGVyZWRNYXAobWFwLmNvbnRlbnQuY29uY2F0KHRoaXMuc3VidHJhY3QobWFwKS5jb250ZW50KSlcbiAgfSxcblxuICAvLyA6OiAodW5pb248T2JqZWN0LCBPcmRlcmVkTWFwPikg4oaSIE9yZGVyZWRNYXBcbiAgLy8gQ3JlYXRlIGEgbmV3IG1hcCBieSBhcHBlbmRpbmcgdGhlIGtleXMgaW4gdGhpcyBtYXAgdGhhdCBkb24ndFxuICAvLyBhcHBlYXIgaW4gYG1hcGAgYWZ0ZXIgdGhlIGtleXMgaW4gYG1hcGAuXG4gIGFwcGVuZDogZnVuY3Rpb24obWFwKSB7XG4gICAgbWFwID0gT3JkZXJlZE1hcC5mcm9tKG1hcCk7XG4gICAgaWYgKCFtYXAuc2l6ZSkgcmV0dXJuIHRoaXNcbiAgICByZXR1cm4gbmV3IE9yZGVyZWRNYXAodGhpcy5zdWJ0cmFjdChtYXApLmNvbnRlbnQuY29uY2F0KG1hcC5jb250ZW50KSlcbiAgfSxcblxuICAvLyA6OiAodW5pb248T2JqZWN0LCBPcmRlcmVkTWFwPikg4oaSIE9yZGVyZWRNYXBcbiAgLy8gQ3JlYXRlIGEgbWFwIGNvbnRhaW5pbmcgYWxsIHRoZSBrZXlzIGluIHRoaXMgbWFwIHRoYXQgZG9uJ3RcbiAgLy8gYXBwZWFyIGluIGBtYXBgLlxuICBzdWJ0cmFjdDogZnVuY3Rpb24obWFwKSB7XG4gICAgdmFyIHJlc3VsdCA9IHRoaXM7XG4gICAgbWFwID0gT3JkZXJlZE1hcC5mcm9tKG1hcCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtYXAuY29udGVudC5sZW5ndGg7IGkgKz0gMilcbiAgICAgIHJlc3VsdCA9IHJlc3VsdC5yZW1vdmUobWFwLmNvbnRlbnRbaV0pO1xuICAgIHJldHVybiByZXN1bHRcbiAgfSxcblxuICAvLyA6OiBudW1iZXJcbiAgLy8gVGhlIGFtb3VudCBvZiBrZXlzIGluIHRoaXMgbWFwLlxuICBnZXQgc2l6ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZW50Lmxlbmd0aCA+PiAxXG4gIH1cbn07XG5cbi8vIDo6ICg/dW5pb248T2JqZWN0LCBPcmRlcmVkTWFwPikg4oaSIE9yZGVyZWRNYXBcbi8vIFJldHVybiBhIG1hcCB3aXRoIHRoZSBnaXZlbiBjb250ZW50LiBJZiBudWxsLCBjcmVhdGUgYW4gZW1wdHlcbi8vIG1hcC4gSWYgZ2l2ZW4gYW4gb3JkZXJlZCBtYXAsIHJldHVybiB0aGF0IG1hcCBpdHNlbGYuIElmIGdpdmVuIGFuXG4vLyBvYmplY3QsIGNyZWF0ZSBhIG1hcCBmcm9tIHRoZSBvYmplY3QncyBwcm9wZXJ0aWVzLlxuT3JkZXJlZE1hcC5mcm9tID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgaWYgKHZhbHVlIGluc3RhbmNlb2YgT3JkZXJlZE1hcCkgcmV0dXJuIHZhbHVlXG4gIHZhciBjb250ZW50ID0gW107XG4gIGlmICh2YWx1ZSkgZm9yICh2YXIgcHJvcCBpbiB2YWx1ZSkgY29udGVudC5wdXNoKHByb3AsIHZhbHVlW3Byb3BdKTtcbiAgcmV0dXJuIG5ldyBPcmRlcmVkTWFwKGNvbnRlbnQpXG59O1xuXG5leHBvcnQgZGVmYXVsdCBPcmRlcmVkTWFwO1xuIiwiaW1wb3J0IE9yZGVyZWRNYXAgZnJvbSAnb3JkZXJlZG1hcCc7XG5cbmZ1bmN0aW9uIGZpbmREaWZmU3RhcnQoYSwgYiwgcG9zKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7OyBpKyspIHtcbiAgICAgICAgaWYgKGkgPT0gYS5jaGlsZENvdW50IHx8IGkgPT0gYi5jaGlsZENvdW50KVxuICAgICAgICAgICAgcmV0dXJuIGEuY2hpbGRDb3VudCA9PSBiLmNoaWxkQ291bnQgPyBudWxsIDogcG9zO1xuICAgICAgICBsZXQgY2hpbGRBID0gYS5jaGlsZChpKSwgY2hpbGRCID0gYi5jaGlsZChpKTtcbiAgICAgICAgaWYgKGNoaWxkQSA9PSBjaGlsZEIpIHtcbiAgICAgICAgICAgIHBvcyArPSBjaGlsZEEubm9kZVNpemU7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWNoaWxkQS5zYW1lTWFya3VwKGNoaWxkQikpXG4gICAgICAgICAgICByZXR1cm4gcG9zO1xuICAgICAgICBpZiAoY2hpbGRBLmlzVGV4dCAmJiBjaGlsZEEudGV4dCAhPSBjaGlsZEIudGV4dCkge1xuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGNoaWxkQS50ZXh0W2pdID09IGNoaWxkQi50ZXh0W2pdOyBqKyspXG4gICAgICAgICAgICAgICAgcG9zKys7XG4gICAgICAgICAgICByZXR1cm4gcG9zO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjaGlsZEEuY29udGVudC5zaXplIHx8IGNoaWxkQi5jb250ZW50LnNpemUpIHtcbiAgICAgICAgICAgIGxldCBpbm5lciA9IGZpbmREaWZmU3RhcnQoY2hpbGRBLmNvbnRlbnQsIGNoaWxkQi5jb250ZW50LCBwb3MgKyAxKTtcbiAgICAgICAgICAgIGlmIChpbm5lciAhPSBudWxsKVxuICAgICAgICAgICAgICAgIHJldHVybiBpbm5lcjtcbiAgICAgICAgfVxuICAgICAgICBwb3MgKz0gY2hpbGRBLm5vZGVTaXplO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGZpbmREaWZmRW5kKGEsIGIsIHBvc0EsIHBvc0IpIHtcbiAgICBmb3IgKGxldCBpQSA9IGEuY2hpbGRDb3VudCwgaUIgPSBiLmNoaWxkQ291bnQ7Oykge1xuICAgICAgICBpZiAoaUEgPT0gMCB8fCBpQiA9PSAwKVxuICAgICAgICAgICAgcmV0dXJuIGlBID09IGlCID8gbnVsbCA6IHsgYTogcG9zQSwgYjogcG9zQiB9O1xuICAgICAgICBsZXQgY2hpbGRBID0gYS5jaGlsZCgtLWlBKSwgY2hpbGRCID0gYi5jaGlsZCgtLWlCKSwgc2l6ZSA9IGNoaWxkQS5ub2RlU2l6ZTtcbiAgICAgICAgaWYgKGNoaWxkQSA9PSBjaGlsZEIpIHtcbiAgICAgICAgICAgIHBvc0EgLT0gc2l6ZTtcbiAgICAgICAgICAgIHBvc0IgLT0gc2l6ZTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICghY2hpbGRBLnNhbWVNYXJrdXAoY2hpbGRCKSlcbiAgICAgICAgICAgIHJldHVybiB7IGE6IHBvc0EsIGI6IHBvc0IgfTtcbiAgICAgICAgaWYgKGNoaWxkQS5pc1RleHQgJiYgY2hpbGRBLnRleHQgIT0gY2hpbGRCLnRleHQpIHtcbiAgICAgICAgICAgIGxldCBzYW1lID0gMCwgbWluU2l6ZSA9IE1hdGgubWluKGNoaWxkQS50ZXh0Lmxlbmd0aCwgY2hpbGRCLnRleHQubGVuZ3RoKTtcbiAgICAgICAgICAgIHdoaWxlIChzYW1lIDwgbWluU2l6ZSAmJiBjaGlsZEEudGV4dFtjaGlsZEEudGV4dC5sZW5ndGggLSBzYW1lIC0gMV0gPT0gY2hpbGRCLnRleHRbY2hpbGRCLnRleHQubGVuZ3RoIC0gc2FtZSAtIDFdKSB7XG4gICAgICAgICAgICAgICAgc2FtZSsrO1xuICAgICAgICAgICAgICAgIHBvc0EtLTtcbiAgICAgICAgICAgICAgICBwb3NCLS07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4geyBhOiBwb3NBLCBiOiBwb3NCIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNoaWxkQS5jb250ZW50LnNpemUgfHwgY2hpbGRCLmNvbnRlbnQuc2l6ZSkge1xuICAgICAgICAgICAgbGV0IGlubmVyID0gZmluZERpZmZFbmQoY2hpbGRBLmNvbnRlbnQsIGNoaWxkQi5jb250ZW50LCBwb3NBIC0gMSwgcG9zQiAtIDEpO1xuICAgICAgICAgICAgaWYgKGlubmVyKVxuICAgICAgICAgICAgICAgIHJldHVybiBpbm5lcjtcbiAgICAgICAgfVxuICAgICAgICBwb3NBIC09IHNpemU7XG4gICAgICAgIHBvc0IgLT0gc2l6ZTtcbiAgICB9XG59XG5cbi8qKlxuQSBmcmFnbWVudCByZXByZXNlbnRzIGEgbm9kZSdzIGNvbGxlY3Rpb24gb2YgY2hpbGQgbm9kZXMuXG5cbkxpa2Ugbm9kZXMsIGZyYWdtZW50cyBhcmUgcGVyc2lzdGVudCBkYXRhIHN0cnVjdHVyZXMsIGFuZCB5b3VcbnNob3VsZCBub3QgbXV0YXRlIHRoZW0gb3IgdGhlaXIgY29udGVudC4gUmF0aGVyLCB5b3UgY3JlYXRlIG5ld1xuaW5zdGFuY2VzIHdoZW5ldmVyIG5lZWRlZC4gVGhlIEFQSSB0cmllcyB0byBtYWtlIHRoaXMgZWFzeS5cbiovXG5jbGFzcyBGcmFnbWVudCB7XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIGNvbnRlbnQsIHNpemUpIHtcbiAgICAgICAgdGhpcy5jb250ZW50ID0gY29udGVudDtcbiAgICAgICAgdGhpcy5zaXplID0gc2l6ZSB8fCAwO1xuICAgICAgICBpZiAoc2l6ZSA9PSBudWxsKVxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb250ZW50Lmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgICAgIHRoaXMuc2l6ZSArPSBjb250ZW50W2ldLm5vZGVTaXplO1xuICAgIH1cbiAgICAvKipcbiAgICBJbnZva2UgYSBjYWxsYmFjayBmb3IgYWxsIGRlc2NlbmRhbnQgbm9kZXMgYmV0d2VlbiB0aGUgZ2l2ZW4gdHdvXG4gICAgcG9zaXRpb25zIChyZWxhdGl2ZSB0byBzdGFydCBvZiB0aGlzIGZyYWdtZW50KS4gRG9lc24ndCBkZXNjZW5kXG4gICAgaW50byBhIG5vZGUgd2hlbiB0aGUgY2FsbGJhY2sgcmV0dXJucyBgZmFsc2VgLlxuICAgICovXG4gICAgbm9kZXNCZXR3ZWVuKGZyb20sIHRvLCBmLCBub2RlU3RhcnQgPSAwLCBwYXJlbnQpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIHBvcyA9IDA7IHBvcyA8IHRvOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBjaGlsZCA9IHRoaXMuY29udGVudFtpXSwgZW5kID0gcG9zICsgY2hpbGQubm9kZVNpemU7XG4gICAgICAgICAgICBpZiAoZW5kID4gZnJvbSAmJiBmKGNoaWxkLCBub2RlU3RhcnQgKyBwb3MsIHBhcmVudCB8fCBudWxsLCBpKSAhPT0gZmFsc2UgJiYgY2hpbGQuY29udGVudC5zaXplKSB7XG4gICAgICAgICAgICAgICAgbGV0IHN0YXJ0ID0gcG9zICsgMTtcbiAgICAgICAgICAgICAgICBjaGlsZC5ub2Rlc0JldHdlZW4oTWF0aC5tYXgoMCwgZnJvbSAtIHN0YXJ0KSwgTWF0aC5taW4oY2hpbGQuY29udGVudC5zaXplLCB0byAtIHN0YXJ0KSwgZiwgbm9kZVN0YXJ0ICsgc3RhcnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcG9zID0gZW5kO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgIENhbGwgdGhlIGdpdmVuIGNhbGxiYWNrIGZvciBldmVyeSBkZXNjZW5kYW50IG5vZGUuIGBwb3NgIHdpbGwgYmVcbiAgICByZWxhdGl2ZSB0byB0aGUgc3RhcnQgb2YgdGhlIGZyYWdtZW50LiBUaGUgY2FsbGJhY2sgbWF5IHJldHVyblxuICAgIGBmYWxzZWAgdG8gcHJldmVudCB0cmF2ZXJzYWwgb2YgYSBnaXZlbiBub2RlJ3MgY2hpbGRyZW4uXG4gICAgKi9cbiAgICBkZXNjZW5kYW50cyhmKSB7XG4gICAgICAgIHRoaXMubm9kZXNCZXR3ZWVuKDAsIHRoaXMuc2l6ZSwgZik7XG4gICAgfVxuICAgIC8qKlxuICAgIEV4dHJhY3QgdGhlIHRleHQgYmV0d2VlbiBgZnJvbWAgYW5kIGB0b2AuIFNlZSB0aGUgc2FtZSBtZXRob2Qgb25cbiAgICBbYE5vZGVgXShodHRwczovL3Byb3NlbWlycm9yLm5ldC9kb2NzL3JlZi8jbW9kZWwuTm9kZS50ZXh0QmV0d2VlbikuXG4gICAgKi9cbiAgICB0ZXh0QmV0d2Vlbihmcm9tLCB0bywgYmxvY2tTZXBhcmF0b3IsIGxlYWZUZXh0KSB7XG4gICAgICAgIGxldCB0ZXh0ID0gXCJcIiwgc2VwYXJhdGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5ub2Rlc0JldHdlZW4oZnJvbSwgdG8sIChub2RlLCBwb3MpID0+IHtcbiAgICAgICAgICAgIGlmIChub2RlLmlzVGV4dCkge1xuICAgICAgICAgICAgICAgIHRleHQgKz0gbm9kZS50ZXh0LnNsaWNlKE1hdGgubWF4KGZyb20sIHBvcykgLSBwb3MsIHRvIC0gcG9zKTtcbiAgICAgICAgICAgICAgICBzZXBhcmF0ZWQgPSAhYmxvY2tTZXBhcmF0b3I7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChub2RlLmlzTGVhZikge1xuICAgICAgICAgICAgICAgIGlmIChsZWFmVGV4dCkge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0ICs9IHR5cGVvZiBsZWFmVGV4dCA9PT0gXCJmdW5jdGlvblwiID8gbGVhZlRleHQobm9kZSkgOiBsZWFmVGV4dDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAobm9kZS50eXBlLnNwZWMubGVhZlRleHQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dCArPSBub2RlLnR5cGUuc3BlYy5sZWFmVGV4dChub2RlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc2VwYXJhdGVkID0gIWJsb2NrU2VwYXJhdG9yO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoIXNlcGFyYXRlZCAmJiBub2RlLmlzQmxvY2spIHtcbiAgICAgICAgICAgICAgICB0ZXh0ICs9IGJsb2NrU2VwYXJhdG9yO1xuICAgICAgICAgICAgICAgIHNlcGFyYXRlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIDApO1xuICAgICAgICByZXR1cm4gdGV4dDtcbiAgICB9XG4gICAgLyoqXG4gICAgQ3JlYXRlIGEgbmV3IGZyYWdtZW50IGNvbnRhaW5pbmcgdGhlIGNvbWJpbmVkIGNvbnRlbnQgb2YgdGhpc1xuICAgIGZyYWdtZW50IGFuZCB0aGUgb3RoZXIuXG4gICAgKi9cbiAgICBhcHBlbmQob3RoZXIpIHtcbiAgICAgICAgaWYgKCFvdGhlci5zaXplKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIGlmICghdGhpcy5zaXplKVxuICAgICAgICAgICAgcmV0dXJuIG90aGVyO1xuICAgICAgICBsZXQgbGFzdCA9IHRoaXMubGFzdENoaWxkLCBmaXJzdCA9IG90aGVyLmZpcnN0Q2hpbGQsIGNvbnRlbnQgPSB0aGlzLmNvbnRlbnQuc2xpY2UoKSwgaSA9IDA7XG4gICAgICAgIGlmIChsYXN0LmlzVGV4dCAmJiBsYXN0LnNhbWVNYXJrdXAoZmlyc3QpKSB7XG4gICAgICAgICAgICBjb250ZW50W2NvbnRlbnQubGVuZ3RoIC0gMV0gPSBsYXN0LndpdGhUZXh0KGxhc3QudGV4dCArIGZpcnN0LnRleHQpO1xuICAgICAgICAgICAgaSA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICg7IGkgPCBvdGhlci5jb250ZW50Lmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgY29udGVudC5wdXNoKG90aGVyLmNvbnRlbnRbaV0pO1xuICAgICAgICByZXR1cm4gbmV3IEZyYWdtZW50KGNvbnRlbnQsIHRoaXMuc2l6ZSArIG90aGVyLnNpemUpO1xuICAgIH1cbiAgICAvKipcbiAgICBDdXQgb3V0IHRoZSBzdWItZnJhZ21lbnQgYmV0d2VlbiB0aGUgdHdvIGdpdmVuIHBvc2l0aW9ucy5cbiAgICAqL1xuICAgIGN1dChmcm9tLCB0byA9IHRoaXMuc2l6ZSkge1xuICAgICAgICBpZiAoZnJvbSA9PSAwICYmIHRvID09IHRoaXMuc2l6ZSlcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICBsZXQgcmVzdWx0ID0gW10sIHNpemUgPSAwO1xuICAgICAgICBpZiAodG8gPiBmcm9tKVxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIHBvcyA9IDA7IHBvcyA8IHRvOyBpKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgY2hpbGQgPSB0aGlzLmNvbnRlbnRbaV0sIGVuZCA9IHBvcyArIGNoaWxkLm5vZGVTaXplO1xuICAgICAgICAgICAgICAgIGlmIChlbmQgPiBmcm9tKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwb3MgPCBmcm9tIHx8IGVuZCA+IHRvKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGQuaXNUZXh0KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkID0gY2hpbGQuY3V0KE1hdGgubWF4KDAsIGZyb20gLSBwb3MpLCBNYXRoLm1pbihjaGlsZC50ZXh0Lmxlbmd0aCwgdG8gLSBwb3MpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZCA9IGNoaWxkLmN1dChNYXRoLm1heCgwLCBmcm9tIC0gcG9zIC0gMSksIE1hdGgubWluKGNoaWxkLmNvbnRlbnQuc2l6ZSwgdG8gLSBwb3MgLSAxKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goY2hpbGQpO1xuICAgICAgICAgICAgICAgICAgICBzaXplICs9IGNoaWxkLm5vZGVTaXplO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwb3MgPSBlbmQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgRnJhZ21lbnQocmVzdWx0LCBzaXplKTtcbiAgICB9XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBjdXRCeUluZGV4KGZyb20sIHRvKSB7XG4gICAgICAgIGlmIChmcm9tID09IHRvKVxuICAgICAgICAgICAgcmV0dXJuIEZyYWdtZW50LmVtcHR5O1xuICAgICAgICBpZiAoZnJvbSA9PSAwICYmIHRvID09IHRoaXMuY29udGVudC5sZW5ndGgpXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgcmV0dXJuIG5ldyBGcmFnbWVudCh0aGlzLmNvbnRlbnQuc2xpY2UoZnJvbSwgdG8pKTtcbiAgICB9XG4gICAgLyoqXG4gICAgQ3JlYXRlIGEgbmV3IGZyYWdtZW50IGluIHdoaWNoIHRoZSBub2RlIGF0IHRoZSBnaXZlbiBpbmRleCBpc1xuICAgIHJlcGxhY2VkIGJ5IHRoZSBnaXZlbiBub2RlLlxuICAgICovXG4gICAgcmVwbGFjZUNoaWxkKGluZGV4LCBub2RlKSB7XG4gICAgICAgIGxldCBjdXJyZW50ID0gdGhpcy5jb250ZW50W2luZGV4XTtcbiAgICAgICAgaWYgKGN1cnJlbnQgPT0gbm9kZSlcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICBsZXQgY29weSA9IHRoaXMuY29udGVudC5zbGljZSgpO1xuICAgICAgICBsZXQgc2l6ZSA9IHRoaXMuc2l6ZSArIG5vZGUubm9kZVNpemUgLSBjdXJyZW50Lm5vZGVTaXplO1xuICAgICAgICBjb3B5W2luZGV4XSA9IG5vZGU7XG4gICAgICAgIHJldHVybiBuZXcgRnJhZ21lbnQoY29weSwgc2l6ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgIENyZWF0ZSBhIG5ldyBmcmFnbWVudCBieSBwcmVwZW5kaW5nIHRoZSBnaXZlbiBub2RlIHRvIHRoaXNcbiAgICBmcmFnbWVudC5cbiAgICAqL1xuICAgIGFkZFRvU3RhcnQobm9kZSkge1xuICAgICAgICByZXR1cm4gbmV3IEZyYWdtZW50KFtub2RlXS5jb25jYXQodGhpcy5jb250ZW50KSwgdGhpcy5zaXplICsgbm9kZS5ub2RlU2l6ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgIENyZWF0ZSBhIG5ldyBmcmFnbWVudCBieSBhcHBlbmRpbmcgdGhlIGdpdmVuIG5vZGUgdG8gdGhpc1xuICAgIGZyYWdtZW50LlxuICAgICovXG4gICAgYWRkVG9FbmQobm9kZSkge1xuICAgICAgICByZXR1cm4gbmV3IEZyYWdtZW50KHRoaXMuY29udGVudC5jb25jYXQobm9kZSksIHRoaXMuc2l6ZSArIG5vZGUubm9kZVNpemUpO1xuICAgIH1cbiAgICAvKipcbiAgICBDb21wYXJlIHRoaXMgZnJhZ21lbnQgdG8gYW5vdGhlciBvbmUuXG4gICAgKi9cbiAgICBlcShvdGhlcikge1xuICAgICAgICBpZiAodGhpcy5jb250ZW50Lmxlbmd0aCAhPSBvdGhlci5jb250ZW50Lmxlbmd0aClcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmNvbnRlbnQubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICBpZiAoIXRoaXMuY29udGVudFtpXS5lcShvdGhlci5jb250ZW50W2ldKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICAvKipcbiAgICBUaGUgZmlyc3QgY2hpbGQgb2YgdGhlIGZyYWdtZW50LCBvciBgbnVsbGAgaWYgaXQgaXMgZW1wdHkuXG4gICAgKi9cbiAgICBnZXQgZmlyc3RDaGlsZCgpIHsgcmV0dXJuIHRoaXMuY29udGVudC5sZW5ndGggPyB0aGlzLmNvbnRlbnRbMF0gOiBudWxsOyB9XG4gICAgLyoqXG4gICAgVGhlIGxhc3QgY2hpbGQgb2YgdGhlIGZyYWdtZW50LCBvciBgbnVsbGAgaWYgaXQgaXMgZW1wdHkuXG4gICAgKi9cbiAgICBnZXQgbGFzdENoaWxkKCkgeyByZXR1cm4gdGhpcy5jb250ZW50Lmxlbmd0aCA/IHRoaXMuY29udGVudFt0aGlzLmNvbnRlbnQubGVuZ3RoIC0gMV0gOiBudWxsOyB9XG4gICAgLyoqXG4gICAgVGhlIG51bWJlciBvZiBjaGlsZCBub2RlcyBpbiB0aGlzIGZyYWdtZW50LlxuICAgICovXG4gICAgZ2V0IGNoaWxkQ291bnQoKSB7IHJldHVybiB0aGlzLmNvbnRlbnQubGVuZ3RoOyB9XG4gICAgLyoqXG4gICAgR2V0IHRoZSBjaGlsZCBub2RlIGF0IHRoZSBnaXZlbiBpbmRleC4gUmFpc2UgYW4gZXJyb3Igd2hlbiB0aGVcbiAgICBpbmRleCBpcyBvdXQgb2YgcmFuZ2UuXG4gICAgKi9cbiAgICBjaGlsZChpbmRleCkge1xuICAgICAgICBsZXQgZm91bmQgPSB0aGlzLmNvbnRlbnRbaW5kZXhdO1xuICAgICAgICBpZiAoIWZvdW5kKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJJbmRleCBcIiArIGluZGV4ICsgXCIgb3V0IG9mIHJhbmdlIGZvciBcIiArIHRoaXMpO1xuICAgICAgICByZXR1cm4gZm91bmQ7XG4gICAgfVxuICAgIC8qKlxuICAgIEdldCB0aGUgY2hpbGQgbm9kZSBhdCB0aGUgZ2l2ZW4gaW5kZXgsIGlmIGl0IGV4aXN0cy5cbiAgICAqL1xuICAgIG1heWJlQ2hpbGQoaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGVudFtpbmRleF0gfHwgbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgQ2FsbCBgZmAgZm9yIGV2ZXJ5IGNoaWxkIG5vZGUsIHBhc3NpbmcgdGhlIG5vZGUsIGl0cyBvZmZzZXRcbiAgICBpbnRvIHRoaXMgcGFyZW50IG5vZGUsIGFuZCBpdHMgaW5kZXguXG4gICAgKi9cbiAgICBmb3JFYWNoKGYpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIHAgPSAwOyBpIDwgdGhpcy5jb250ZW50Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgY2hpbGQgPSB0aGlzLmNvbnRlbnRbaV07XG4gICAgICAgICAgICBmKGNoaWxkLCBwLCBpKTtcbiAgICAgICAgICAgIHAgKz0gY2hpbGQubm9kZVNpemU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgRmluZCB0aGUgZmlyc3QgcG9zaXRpb24gYXQgd2hpY2ggdGhpcyBmcmFnbWVudCBhbmQgYW5vdGhlclxuICAgIGZyYWdtZW50IGRpZmZlciwgb3IgYG51bGxgIGlmIHRoZXkgYXJlIHRoZSBzYW1lLlxuICAgICovXG4gICAgZmluZERpZmZTdGFydChvdGhlciwgcG9zID0gMCkge1xuICAgICAgICByZXR1cm4gZmluZERpZmZTdGFydCh0aGlzLCBvdGhlciwgcG9zKTtcbiAgICB9XG4gICAgLyoqXG4gICAgRmluZCB0aGUgZmlyc3QgcG9zaXRpb24sIHNlYXJjaGluZyBmcm9tIHRoZSBlbmQsIGF0IHdoaWNoIHRoaXNcbiAgICBmcmFnbWVudCBhbmQgdGhlIGdpdmVuIGZyYWdtZW50IGRpZmZlciwgb3IgYG51bGxgIGlmIHRoZXkgYXJlXG4gICAgdGhlIHNhbWUuIFNpbmNlIHRoaXMgcG9zaXRpb24gd2lsbCBub3QgYmUgdGhlIHNhbWUgaW4gYm90aFxuICAgIG5vZGVzLCBhbiBvYmplY3Qgd2l0aCB0d28gc2VwYXJhdGUgcG9zaXRpb25zIGlzIHJldHVybmVkLlxuICAgICovXG4gICAgZmluZERpZmZFbmQob3RoZXIsIHBvcyA9IHRoaXMuc2l6ZSwgb3RoZXJQb3MgPSBvdGhlci5zaXplKSB7XG4gICAgICAgIHJldHVybiBmaW5kRGlmZkVuZCh0aGlzLCBvdGhlciwgcG9zLCBvdGhlclBvcyk7XG4gICAgfVxuICAgIC8qKlxuICAgIEZpbmQgdGhlIGluZGV4IGFuZCBpbm5lciBvZmZzZXQgY29ycmVzcG9uZGluZyB0byBhIGdpdmVuIHJlbGF0aXZlXG4gICAgcG9zaXRpb24gaW4gdGhpcyBmcmFnbWVudC4gVGhlIHJlc3VsdCBvYmplY3Qgd2lsbCBiZSByZXVzZWRcbiAgICAob3ZlcndyaXR0ZW4pIHRoZSBuZXh0IHRpbWUgdGhlIGZ1bmN0aW9uIGlzIGNhbGxlZC4gKE5vdCBwdWJsaWMuKVxuICAgICovXG4gICAgZmluZEluZGV4KHBvcywgcm91bmQgPSAtMSkge1xuICAgICAgICBpZiAocG9zID09IDApXG4gICAgICAgICAgICByZXR1cm4gcmV0SW5kZXgoMCwgcG9zKTtcbiAgICAgICAgaWYgKHBvcyA9PSB0aGlzLnNpemUpXG4gICAgICAgICAgICByZXR1cm4gcmV0SW5kZXgodGhpcy5jb250ZW50Lmxlbmd0aCwgcG9zKTtcbiAgICAgICAgaWYgKHBvcyA+IHRoaXMuc2l6ZSB8fCBwb3MgPCAwKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoYFBvc2l0aW9uICR7cG9zfSBvdXRzaWRlIG9mIGZyYWdtZW50ICgke3RoaXN9KWApO1xuICAgICAgICBmb3IgKGxldCBpID0gMCwgY3VyUG9zID0gMDs7IGkrKykge1xuICAgICAgICAgICAgbGV0IGN1ciA9IHRoaXMuY2hpbGQoaSksIGVuZCA9IGN1clBvcyArIGN1ci5ub2RlU2l6ZTtcbiAgICAgICAgICAgIGlmIChlbmQgPj0gcG9zKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVuZCA9PSBwb3MgfHwgcm91bmQgPiAwKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmV0SW5kZXgoaSArIDEsIGVuZCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJldEluZGV4KGksIGN1clBvcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdXJQb3MgPSBlbmQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgUmV0dXJuIGEgZGVidWdnaW5nIHN0cmluZyB0aGF0IGRlc2NyaWJlcyB0aGlzIGZyYWdtZW50LlxuICAgICovXG4gICAgdG9TdHJpbmcoKSB7IHJldHVybiBcIjxcIiArIHRoaXMudG9TdHJpbmdJbm5lcigpICsgXCI+XCI7IH1cbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIHRvU3RyaW5nSW5uZXIoKSB7IHJldHVybiB0aGlzLmNvbnRlbnQuam9pbihcIiwgXCIpOyB9XG4gICAgLyoqXG4gICAgQ3JlYXRlIGEgSlNPTi1zZXJpYWxpemVhYmxlIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgZnJhZ21lbnQuXG4gICAgKi9cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRlbnQubGVuZ3RoID8gdGhpcy5jb250ZW50Lm1hcChuID0+IG4udG9KU09OKCkpIDogbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgRGVzZXJpYWxpemUgYSBmcmFnbWVudCBmcm9tIGl0cyBKU09OIHJlcHJlc2VudGF0aW9uLlxuICAgICovXG4gICAgc3RhdGljIGZyb21KU09OKHNjaGVtYSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKCF2YWx1ZSlcbiAgICAgICAgICAgIHJldHVybiBGcmFnbWVudC5lbXB0eTtcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlKSlcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiSW52YWxpZCBpbnB1dCBmb3IgRnJhZ21lbnQuZnJvbUpTT05cIik7XG4gICAgICAgIHJldHVybiBuZXcgRnJhZ21lbnQodmFsdWUubWFwKHNjaGVtYS5ub2RlRnJvbUpTT04pKTtcbiAgICB9XG4gICAgLyoqXG4gICAgQnVpbGQgYSBmcmFnbWVudCBmcm9tIGFuIGFycmF5IG9mIG5vZGVzLiBFbnN1cmVzIHRoYXQgYWRqYWNlbnRcbiAgICB0ZXh0IG5vZGVzIHdpdGggdGhlIHNhbWUgbWFya3MgYXJlIGpvaW5lZCB0b2dldGhlci5cbiAgICAqL1xuICAgIHN0YXRpYyBmcm9tQXJyYXkoYXJyYXkpIHtcbiAgICAgICAgaWYgKCFhcnJheS5sZW5ndGgpXG4gICAgICAgICAgICByZXR1cm4gRnJhZ21lbnQuZW1wdHk7XG4gICAgICAgIGxldCBqb2luZWQsIHNpemUgPSAwO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgbm9kZSA9IGFycmF5W2ldO1xuICAgICAgICAgICAgc2l6ZSArPSBub2RlLm5vZGVTaXplO1xuICAgICAgICAgICAgaWYgKGkgJiYgbm9kZS5pc1RleHQgJiYgYXJyYXlbaSAtIDFdLnNhbWVNYXJrdXAobm9kZSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWpvaW5lZClcbiAgICAgICAgICAgICAgICAgICAgam9pbmVkID0gYXJyYXkuc2xpY2UoMCwgaSk7XG4gICAgICAgICAgICAgICAgam9pbmVkW2pvaW5lZC5sZW5ndGggLSAxXSA9IG5vZGVcbiAgICAgICAgICAgICAgICAgICAgLndpdGhUZXh0KGpvaW5lZFtqb2luZWQubGVuZ3RoIC0gMV0udGV4dCArIG5vZGUudGV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChqb2luZWQpIHtcbiAgICAgICAgICAgICAgICBqb2luZWQucHVzaChub2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IEZyYWdtZW50KGpvaW5lZCB8fCBhcnJheSwgc2l6ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgIENyZWF0ZSBhIGZyYWdtZW50IGZyb20gc29tZXRoaW5nIHRoYXQgY2FuIGJlIGludGVycHJldGVkIGFzIGFcbiAgICBzZXQgb2Ygbm9kZXMuIEZvciBgbnVsbGAsIGl0IHJldHVybnMgdGhlIGVtcHR5IGZyYWdtZW50LiBGb3IgYVxuICAgIGZyYWdtZW50LCB0aGUgZnJhZ21lbnQgaXRzZWxmLiBGb3IgYSBub2RlIG9yIGFycmF5IG9mIG5vZGVzLCBhXG4gICAgZnJhZ21lbnQgY29udGFpbmluZyB0aG9zZSBub2Rlcy5cbiAgICAqL1xuICAgIHN0YXRpYyBmcm9tKG5vZGVzKSB7XG4gICAgICAgIGlmICghbm9kZXMpXG4gICAgICAgICAgICByZXR1cm4gRnJhZ21lbnQuZW1wdHk7XG4gICAgICAgIGlmIChub2RlcyBpbnN0YW5jZW9mIEZyYWdtZW50KVxuICAgICAgICAgICAgcmV0dXJuIG5vZGVzO1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShub2RlcykpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5mcm9tQXJyYXkobm9kZXMpO1xuICAgICAgICBpZiAobm9kZXMuYXR0cnMpXG4gICAgICAgICAgICByZXR1cm4gbmV3IEZyYWdtZW50KFtub2Rlc10sIG5vZGVzLm5vZGVTaXplKTtcbiAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJDYW4gbm90IGNvbnZlcnQgXCIgKyBub2RlcyArIFwiIHRvIGEgRnJhZ21lbnRcIiArXG4gICAgICAgICAgICAobm9kZXMubm9kZXNCZXR3ZWVuID8gXCIgKGxvb2tzIGxpa2UgbXVsdGlwbGUgdmVyc2lvbnMgb2YgcHJvc2VtaXJyb3ItbW9kZWwgd2VyZSBsb2FkZWQpXCIgOiBcIlwiKSk7XG4gICAgfVxufVxuLyoqXG5BbiBlbXB0eSBmcmFnbWVudC4gSW50ZW5kZWQgdG8gYmUgcmV1c2VkIHdoZW5ldmVyIGEgbm9kZSBkb2Vzbid0XG5jb250YWluIGFueXRoaW5nIChyYXRoZXIgdGhhbiBhbGxvY2F0aW5nIGEgbmV3IGVtcHR5IGZyYWdtZW50IGZvclxuZWFjaCBsZWFmIG5vZGUpLlxuKi9cbkZyYWdtZW50LmVtcHR5ID0gbmV3IEZyYWdtZW50KFtdLCAwKTtcbmNvbnN0IGZvdW5kID0geyBpbmRleDogMCwgb2Zmc2V0OiAwIH07XG5mdW5jdGlvbiByZXRJbmRleChpbmRleCwgb2Zmc2V0KSB7XG4gICAgZm91bmQuaW5kZXggPSBpbmRleDtcbiAgICBmb3VuZC5vZmZzZXQgPSBvZmZzZXQ7XG4gICAgcmV0dXJuIGZvdW5kO1xufVxuXG5mdW5jdGlvbiBjb21wYXJlRGVlcChhLCBiKSB7XG4gICAgaWYgKGEgPT09IGIpXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIGlmICghKGEgJiYgdHlwZW9mIGEgPT0gXCJvYmplY3RcIikgfHxcbiAgICAgICAgIShiICYmIHR5cGVvZiBiID09IFwib2JqZWN0XCIpKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgbGV0IGFycmF5ID0gQXJyYXkuaXNBcnJheShhKTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShiKSAhPSBhcnJheSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChhcnJheSkge1xuICAgICAgICBpZiAoYS5sZW5ndGggIT0gYi5sZW5ndGgpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgIGlmICghY29tcGFyZURlZXAoYVtpXSwgYltpXSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZm9yIChsZXQgcCBpbiBhKVxuICAgICAgICAgICAgaWYgKCEocCBpbiBiKSB8fCAhY29tcGFyZURlZXAoYVtwXSwgYltwXSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBmb3IgKGxldCBwIGluIGIpXG4gICAgICAgICAgICBpZiAoIShwIGluIGEpKVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5cbi8qKlxuQSBtYXJrIGlzIGEgcGllY2Ugb2YgaW5mb3JtYXRpb24gdGhhdCBjYW4gYmUgYXR0YWNoZWQgdG8gYSBub2RlLFxuc3VjaCBhcyBpdCBiZWluZyBlbXBoYXNpemVkLCBpbiBjb2RlIGZvbnQsIG9yIGEgbGluay4gSXQgaGFzIGFcbnR5cGUgYW5kIG9wdGlvbmFsbHkgYSBzZXQgb2YgYXR0cmlidXRlcyB0aGF0IHByb3ZpZGUgZnVydGhlclxuaW5mb3JtYXRpb24gKHN1Y2ggYXMgdGhlIHRhcmdldCBvZiB0aGUgbGluaykuIE1hcmtzIGFyZSBjcmVhdGVkXG50aHJvdWdoIGEgYFNjaGVtYWAsIHdoaWNoIGNvbnRyb2xzIHdoaWNoIHR5cGVzIGV4aXN0IGFuZCB3aGljaFxuYXR0cmlidXRlcyB0aGV5IGhhdmUuXG4qL1xuY2xhc3MgTWFyayB7XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAvKipcbiAgICBUaGUgdHlwZSBvZiB0aGlzIG1hcmsuXG4gICAgKi9cbiAgICB0eXBlLCBcbiAgICAvKipcbiAgICBUaGUgYXR0cmlidXRlcyBhc3NvY2lhdGVkIHdpdGggdGhpcyBtYXJrLlxuICAgICovXG4gICAgYXR0cnMpIHtcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICAgICAgdGhpcy5hdHRycyA9IGF0dHJzO1xuICAgIH1cbiAgICAvKipcbiAgICBHaXZlbiBhIHNldCBvZiBtYXJrcywgY3JlYXRlIGEgbmV3IHNldCB3aGljaCBjb250YWlucyB0aGlzIG9uZSBhc1xuICAgIHdlbGwsIGluIHRoZSByaWdodCBwb3NpdGlvbi4gSWYgdGhpcyBtYXJrIGlzIGFscmVhZHkgaW4gdGhlIHNldCxcbiAgICB0aGUgc2V0IGl0c2VsZiBpcyByZXR1cm5lZC4gSWYgYW55IG1hcmtzIHRoYXQgYXJlIHNldCB0byBiZVxuICAgIFtleGNsdXNpdmVdKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyNtb2RlbC5NYXJrU3BlYy5leGNsdWRlcykgd2l0aCB0aGlzIG1hcmsgYXJlIHByZXNlbnQsXG4gICAgdGhvc2UgYXJlIHJlcGxhY2VkIGJ5IHRoaXMgb25lLlxuICAgICovXG4gICAgYWRkVG9TZXQoc2V0KSB7XG4gICAgICAgIGxldCBjb3B5LCBwbGFjZWQgPSBmYWxzZTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZXQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBvdGhlciA9IHNldFtpXTtcbiAgICAgICAgICAgIGlmICh0aGlzLmVxKG90aGVyKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gc2V0O1xuICAgICAgICAgICAgaWYgKHRoaXMudHlwZS5leGNsdWRlcyhvdGhlci50eXBlKSkge1xuICAgICAgICAgICAgICAgIGlmICghY29weSlcbiAgICAgICAgICAgICAgICAgICAgY29weSA9IHNldC5zbGljZSgwLCBpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKG90aGVyLnR5cGUuZXhjbHVkZXModGhpcy50eXBlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzZXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoIXBsYWNlZCAmJiBvdGhlci50eXBlLnJhbmsgPiB0aGlzLnR5cGUucmFuaykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWNvcHkpXG4gICAgICAgICAgICAgICAgICAgICAgICBjb3B5ID0gc2V0LnNsaWNlKDAsIGkpO1xuICAgICAgICAgICAgICAgICAgICBjb3B5LnB1c2godGhpcyk7XG4gICAgICAgICAgICAgICAgICAgIHBsYWNlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChjb3B5KVxuICAgICAgICAgICAgICAgICAgICBjb3B5LnB1c2gob3RoZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghY29weSlcbiAgICAgICAgICAgIGNvcHkgPSBzZXQuc2xpY2UoKTtcbiAgICAgICAgaWYgKCFwbGFjZWQpXG4gICAgICAgICAgICBjb3B5LnB1c2godGhpcyk7XG4gICAgICAgIHJldHVybiBjb3B5O1xuICAgIH1cbiAgICAvKipcbiAgICBSZW1vdmUgdGhpcyBtYXJrIGZyb20gdGhlIGdpdmVuIHNldCwgcmV0dXJuaW5nIGEgbmV3IHNldC4gSWYgdGhpc1xuICAgIG1hcmsgaXMgbm90IGluIHRoZSBzZXQsIHRoZSBzZXQgaXRzZWxmIGlzIHJldHVybmVkLlxuICAgICovXG4gICAgcmVtb3ZlRnJvbVNldChzZXQpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZXQubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICBpZiAodGhpcy5lcShzZXRbaV0pKVxuICAgICAgICAgICAgICAgIHJldHVybiBzZXQuc2xpY2UoMCwgaSkuY29uY2F0KHNldC5zbGljZShpICsgMSkpO1xuICAgICAgICByZXR1cm4gc2V0O1xuICAgIH1cbiAgICAvKipcbiAgICBUZXN0IHdoZXRoZXIgdGhpcyBtYXJrIGlzIGluIHRoZSBnaXZlbiBzZXQgb2YgbWFya3MuXG4gICAgKi9cbiAgICBpc0luU2V0KHNldCkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNldC5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgIGlmICh0aGlzLmVxKHNldFtpXSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLyoqXG4gICAgVGVzdCB3aGV0aGVyIHRoaXMgbWFyayBoYXMgdGhlIHNhbWUgdHlwZSBhbmQgYXR0cmlidXRlcyBhc1xuICAgIGFub3RoZXIgbWFyay5cbiAgICAqL1xuICAgIGVxKG90aGVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzID09IG90aGVyIHx8XG4gICAgICAgICAgICAodGhpcy50eXBlID09IG90aGVyLnR5cGUgJiYgY29tcGFyZURlZXAodGhpcy5hdHRycywgb3RoZXIuYXR0cnMpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgQ29udmVydCB0aGlzIG1hcmsgdG8gYSBKU09OLXNlcmlhbGl6ZWFibGUgcmVwcmVzZW50YXRpb24uXG4gICAgKi9cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIGxldCBvYmogPSB7IHR5cGU6IHRoaXMudHlwZS5uYW1lIH07XG4gICAgICAgIGZvciAobGV0IF8gaW4gdGhpcy5hdHRycykge1xuICAgICAgICAgICAgb2JqLmF0dHJzID0gdGhpcy5hdHRycztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfVxuICAgIC8qKlxuICAgIERlc2VyaWFsaXplIGEgbWFyayBmcm9tIEpTT04uXG4gICAgKi9cbiAgICBzdGF0aWMgZnJvbUpTT04oc2NoZW1hLCBqc29uKSB7XG4gICAgICAgIGlmICghanNvbilcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiSW52YWxpZCBpbnB1dCBmb3IgTWFyay5mcm9tSlNPTlwiKTtcbiAgICAgICAgbGV0IHR5cGUgPSBzY2hlbWEubWFya3NbanNvbi50eXBlXTtcbiAgICAgICAgaWYgKCF0eXBlKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoYFRoZXJlIGlzIG5vIG1hcmsgdHlwZSAke2pzb24udHlwZX0gaW4gdGhpcyBzY2hlbWFgKTtcbiAgICAgICAgcmV0dXJuIHR5cGUuY3JlYXRlKGpzb24uYXR0cnMpO1xuICAgIH1cbiAgICAvKipcbiAgICBUZXN0IHdoZXRoZXIgdHdvIHNldHMgb2YgbWFya3MgYXJlIGlkZW50aWNhbC5cbiAgICAqL1xuICAgIHN0YXRpYyBzYW1lU2V0KGEsIGIpIHtcbiAgICAgICAgaWYgKGEgPT0gYilcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICBpZiAoYS5sZW5ndGggIT0gYi5sZW5ndGgpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgIGlmICghYVtpXS5lcShiW2ldKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICAvKipcbiAgICBDcmVhdGUgYSBwcm9wZXJseSBzb3J0ZWQgbWFyayBzZXQgZnJvbSBudWxsLCBhIHNpbmdsZSBtYXJrLCBvciBhblxuICAgIHVuc29ydGVkIGFycmF5IG9mIG1hcmtzLlxuICAgICovXG4gICAgc3RhdGljIHNldEZyb20obWFya3MpIHtcbiAgICAgICAgaWYgKCFtYXJrcyB8fCBBcnJheS5pc0FycmF5KG1hcmtzKSAmJiBtYXJrcy5sZW5ndGggPT0gMClcbiAgICAgICAgICAgIHJldHVybiBNYXJrLm5vbmU7XG4gICAgICAgIGlmIChtYXJrcyBpbnN0YW5jZW9mIE1hcmspXG4gICAgICAgICAgICByZXR1cm4gW21hcmtzXTtcbiAgICAgICAgbGV0IGNvcHkgPSBtYXJrcy5zbGljZSgpO1xuICAgICAgICBjb3B5LnNvcnQoKGEsIGIpID0+IGEudHlwZS5yYW5rIC0gYi50eXBlLnJhbmspO1xuICAgICAgICByZXR1cm4gY29weTtcbiAgICB9XG59XG4vKipcblRoZSBlbXB0eSBzZXQgb2YgbWFya3MuXG4qL1xuTWFyay5ub25lID0gW107XG5cbi8qKlxuRXJyb3IgdHlwZSByYWlzZWQgYnkgW2BOb2RlLnJlcGxhY2VgXShodHRwczovL3Byb3NlbWlycm9yLm5ldC9kb2NzL3JlZi8jbW9kZWwuTm9kZS5yZXBsYWNlKSB3aGVuXG5naXZlbiBhbiBpbnZhbGlkIHJlcGxhY2VtZW50LlxuKi9cbmNsYXNzIFJlcGxhY2VFcnJvciBleHRlbmRzIEVycm9yIHtcbn1cbi8qXG5SZXBsYWNlRXJyb3IgPSBmdW5jdGlvbih0aGlzOiBhbnksIG1lc3NhZ2U6IHN0cmluZykge1xuICBsZXQgZXJyID0gRXJyb3IuY2FsbCh0aGlzLCBtZXNzYWdlKVxuICA7KGVyciBhcyBhbnkpLl9fcHJvdG9fXyA9IFJlcGxhY2VFcnJvci5wcm90b3R5cGVcbiAgcmV0dXJuIGVyclxufSBhcyBhbnlcblxuUmVwbGFjZUVycm9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKVxuUmVwbGFjZUVycm9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFJlcGxhY2VFcnJvclxuUmVwbGFjZUVycm9yLnByb3RvdHlwZS5uYW1lID0gXCJSZXBsYWNlRXJyb3JcIlxuKi9cbi8qKlxuQSBzbGljZSByZXByZXNlbnRzIGEgcGllY2UgY3V0IG91dCBvZiBhIGxhcmdlciBkb2N1bWVudC4gSXRcbnN0b3JlcyBub3Qgb25seSBhIGZyYWdtZW50LCBidXQgYWxzbyB0aGUgZGVwdGggdXAgdG8gd2hpY2ggbm9kZXMgb25cbmJvdGggc2lkZSBhcmUg4oCYb3BlbuKAmSAoY3V0IHRocm91Z2gpLlxuKi9cbmNsYXNzIFNsaWNlIHtcbiAgICAvKipcbiAgICBDcmVhdGUgYSBzbGljZS4gV2hlbiBzcGVjaWZ5aW5nIGEgbm9uLXplcm8gb3BlbiBkZXB0aCwgeW91IG11c3RcbiAgICBtYWtlIHN1cmUgdGhhdCB0aGVyZSBhcmUgbm9kZXMgb2YgYXQgbGVhc3QgdGhhdCBkZXB0aCBhdCB0aGVcbiAgICBhcHByb3ByaWF0ZSBzaWRlIG9mIHRoZSBmcmFnbWVudOKAlGkuZS4gaWYgdGhlIGZyYWdtZW50IGlzIGFuXG4gICAgZW1wdHkgcGFyYWdyYXBoIG5vZGUsIGBvcGVuU3RhcnRgIGFuZCBgb3BlbkVuZGAgY2FuJ3QgYmUgZ3JlYXRlclxuICAgIHRoYW4gMS5cbiAgICBcbiAgICBJdCBpcyBub3QgbmVjZXNzYXJ5IGZvciB0aGUgY29udGVudCBvZiBvcGVuIG5vZGVzIHRvIGNvbmZvcm0gdG9cbiAgICB0aGUgc2NoZW1hJ3MgY29udGVudCBjb25zdHJhaW50cywgdGhvdWdoIGl0IHNob3VsZCBiZSBhIHZhbGlkXG4gICAgc3RhcnQvZW5kL21pZGRsZSBmb3Igc3VjaCBhIG5vZGUsIGRlcGVuZGluZyBvbiB3aGljaCBzaWRlcyBhcmVcbiAgICBvcGVuLlxuICAgICovXG4gICAgY29uc3RydWN0b3IoXG4gICAgLyoqXG4gICAgVGhlIHNsaWNlJ3MgY29udGVudC5cbiAgICAqL1xuICAgIGNvbnRlbnQsIFxuICAgIC8qKlxuICAgIFRoZSBvcGVuIGRlcHRoIGF0IHRoZSBzdGFydCBvZiB0aGUgZnJhZ21lbnQuXG4gICAgKi9cbiAgICBvcGVuU3RhcnQsIFxuICAgIC8qKlxuICAgIFRoZSBvcGVuIGRlcHRoIGF0IHRoZSBlbmQuXG4gICAgKi9cbiAgICBvcGVuRW5kKSB7XG4gICAgICAgIHRoaXMuY29udGVudCA9IGNvbnRlbnQ7XG4gICAgICAgIHRoaXMub3BlblN0YXJ0ID0gb3BlblN0YXJ0O1xuICAgICAgICB0aGlzLm9wZW5FbmQgPSBvcGVuRW5kO1xuICAgIH1cbiAgICAvKipcbiAgICBUaGUgc2l6ZSB0aGlzIHNsaWNlIHdvdWxkIGFkZCB3aGVuIGluc2VydGVkIGludG8gYSBkb2N1bWVudC5cbiAgICAqL1xuICAgIGdldCBzaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb250ZW50LnNpemUgLSB0aGlzLm9wZW5TdGFydCAtIHRoaXMub3BlbkVuZDtcbiAgICB9XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBpbnNlcnRBdChwb3MsIGZyYWdtZW50KSB7XG4gICAgICAgIGxldCBjb250ZW50ID0gaW5zZXJ0SW50byh0aGlzLmNvbnRlbnQsIHBvcyArIHRoaXMub3BlblN0YXJ0LCBmcmFnbWVudCk7XG4gICAgICAgIHJldHVybiBjb250ZW50ICYmIG5ldyBTbGljZShjb250ZW50LCB0aGlzLm9wZW5TdGFydCwgdGhpcy5vcGVuRW5kKTtcbiAgICB9XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICByZW1vdmVCZXR3ZWVuKGZyb20sIHRvKSB7XG4gICAgICAgIHJldHVybiBuZXcgU2xpY2UocmVtb3ZlUmFuZ2UodGhpcy5jb250ZW50LCBmcm9tICsgdGhpcy5vcGVuU3RhcnQsIHRvICsgdGhpcy5vcGVuU3RhcnQpLCB0aGlzLm9wZW5TdGFydCwgdGhpcy5vcGVuRW5kKTtcbiAgICB9XG4gICAgLyoqXG4gICAgVGVzdHMgd2hldGhlciB0aGlzIHNsaWNlIGlzIGVxdWFsIHRvIGFub3RoZXIgc2xpY2UuXG4gICAgKi9cbiAgICBlcShvdGhlcikge1xuICAgICAgICByZXR1cm4gdGhpcy5jb250ZW50LmVxKG90aGVyLmNvbnRlbnQpICYmIHRoaXMub3BlblN0YXJ0ID09IG90aGVyLm9wZW5TdGFydCAmJiB0aGlzLm9wZW5FbmQgPT0gb3RoZXIub3BlbkVuZDtcbiAgICB9XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGVudCArIFwiKFwiICsgdGhpcy5vcGVuU3RhcnQgKyBcIixcIiArIHRoaXMub3BlbkVuZCArIFwiKVwiO1xuICAgIH1cbiAgICAvKipcbiAgICBDb252ZXJ0IGEgc2xpY2UgdG8gYSBKU09OLXNlcmlhbGl6YWJsZSByZXByZXNlbnRhdGlvbi5cbiAgICAqL1xuICAgIHRvSlNPTigpIHtcbiAgICAgICAgaWYgKCF0aGlzLmNvbnRlbnQuc2l6ZSlcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICBsZXQganNvbiA9IHsgY29udGVudDogdGhpcy5jb250ZW50LnRvSlNPTigpIH07XG4gICAgICAgIGlmICh0aGlzLm9wZW5TdGFydCA+IDApXG4gICAgICAgICAgICBqc29uLm9wZW5TdGFydCA9IHRoaXMub3BlblN0YXJ0O1xuICAgICAgICBpZiAodGhpcy5vcGVuRW5kID4gMClcbiAgICAgICAgICAgIGpzb24ub3BlbkVuZCA9IHRoaXMub3BlbkVuZDtcbiAgICAgICAgcmV0dXJuIGpzb247XG4gICAgfVxuICAgIC8qKlxuICAgIERlc2VyaWFsaXplIGEgc2xpY2UgZnJvbSBpdHMgSlNPTiByZXByZXNlbnRhdGlvbi5cbiAgICAqL1xuICAgIHN0YXRpYyBmcm9tSlNPTihzY2hlbWEsIGpzb24pIHtcbiAgICAgICAgaWYgKCFqc29uKVxuICAgICAgICAgICAgcmV0dXJuIFNsaWNlLmVtcHR5O1xuICAgICAgICBsZXQgb3BlblN0YXJ0ID0ganNvbi5vcGVuU3RhcnQgfHwgMCwgb3BlbkVuZCA9IGpzb24ub3BlbkVuZCB8fCAwO1xuICAgICAgICBpZiAodHlwZW9mIG9wZW5TdGFydCAhPSBcIm51bWJlclwiIHx8IHR5cGVvZiBvcGVuRW5kICE9IFwibnVtYmVyXCIpXG4gICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkludmFsaWQgaW5wdXQgZm9yIFNsaWNlLmZyb21KU09OXCIpO1xuICAgICAgICByZXR1cm4gbmV3IFNsaWNlKEZyYWdtZW50LmZyb21KU09OKHNjaGVtYSwganNvbi5jb250ZW50KSwgb3BlblN0YXJ0LCBvcGVuRW5kKTtcbiAgICB9XG4gICAgLyoqXG4gICAgQ3JlYXRlIGEgc2xpY2UgZnJvbSBhIGZyYWdtZW50IGJ5IHRha2luZyB0aGUgbWF4aW11bSBwb3NzaWJsZVxuICAgIG9wZW4gdmFsdWUgb24gYm90aCBzaWRlIG9mIHRoZSBmcmFnbWVudC5cbiAgICAqL1xuICAgIHN0YXRpYyBtYXhPcGVuKGZyYWdtZW50LCBvcGVuSXNvbGF0aW5nID0gdHJ1ZSkge1xuICAgICAgICBsZXQgb3BlblN0YXJ0ID0gMCwgb3BlbkVuZCA9IDA7XG4gICAgICAgIGZvciAobGV0IG4gPSBmcmFnbWVudC5maXJzdENoaWxkOyBuICYmICFuLmlzTGVhZiAmJiAob3Blbklzb2xhdGluZyB8fCAhbi50eXBlLnNwZWMuaXNvbGF0aW5nKTsgbiA9IG4uZmlyc3RDaGlsZClcbiAgICAgICAgICAgIG9wZW5TdGFydCsrO1xuICAgICAgICBmb3IgKGxldCBuID0gZnJhZ21lbnQubGFzdENoaWxkOyBuICYmICFuLmlzTGVhZiAmJiAob3Blbklzb2xhdGluZyB8fCAhbi50eXBlLnNwZWMuaXNvbGF0aW5nKTsgbiA9IG4ubGFzdENoaWxkKVxuICAgICAgICAgICAgb3BlbkVuZCsrO1xuICAgICAgICByZXR1cm4gbmV3IFNsaWNlKGZyYWdtZW50LCBvcGVuU3RhcnQsIG9wZW5FbmQpO1xuICAgIH1cbn1cbi8qKlxuVGhlIGVtcHR5IHNsaWNlLlxuKi9cblNsaWNlLmVtcHR5ID0gbmV3IFNsaWNlKEZyYWdtZW50LmVtcHR5LCAwLCAwKTtcbmZ1bmN0aW9uIHJlbW92ZVJhbmdlKGNvbnRlbnQsIGZyb20sIHRvKSB7XG4gICAgbGV0IHsgaW5kZXgsIG9mZnNldCB9ID0gY29udGVudC5maW5kSW5kZXgoZnJvbSksIGNoaWxkID0gY29udGVudC5tYXliZUNoaWxkKGluZGV4KTtcbiAgICBsZXQgeyBpbmRleDogaW5kZXhUbywgb2Zmc2V0OiBvZmZzZXRUbyB9ID0gY29udGVudC5maW5kSW5kZXgodG8pO1xuICAgIGlmIChvZmZzZXQgPT0gZnJvbSB8fCBjaGlsZC5pc1RleHQpIHtcbiAgICAgICAgaWYgKG9mZnNldFRvICE9IHRvICYmICFjb250ZW50LmNoaWxkKGluZGV4VG8pLmlzVGV4dClcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiUmVtb3Zpbmcgbm9uLWZsYXQgcmFuZ2VcIik7XG4gICAgICAgIHJldHVybiBjb250ZW50LmN1dCgwLCBmcm9tKS5hcHBlbmQoY29udGVudC5jdXQodG8pKTtcbiAgICB9XG4gICAgaWYgKGluZGV4ICE9IGluZGV4VG8pXG4gICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiUmVtb3Zpbmcgbm9uLWZsYXQgcmFuZ2VcIik7XG4gICAgcmV0dXJuIGNvbnRlbnQucmVwbGFjZUNoaWxkKGluZGV4LCBjaGlsZC5jb3B5KHJlbW92ZVJhbmdlKGNoaWxkLmNvbnRlbnQsIGZyb20gLSBvZmZzZXQgLSAxLCB0byAtIG9mZnNldCAtIDEpKSk7XG59XG5mdW5jdGlvbiBpbnNlcnRJbnRvKGNvbnRlbnQsIGRpc3QsIGluc2VydCwgcGFyZW50KSB7XG4gICAgbGV0IHsgaW5kZXgsIG9mZnNldCB9ID0gY29udGVudC5maW5kSW5kZXgoZGlzdCksIGNoaWxkID0gY29udGVudC5tYXliZUNoaWxkKGluZGV4KTtcbiAgICBpZiAob2Zmc2V0ID09IGRpc3QgfHwgY2hpbGQuaXNUZXh0KSB7XG4gICAgICAgIGlmIChwYXJlbnQgJiYgIXBhcmVudC5jYW5SZXBsYWNlKGluZGV4LCBpbmRleCwgaW5zZXJ0KSlcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICByZXR1cm4gY29udGVudC5jdXQoMCwgZGlzdCkuYXBwZW5kKGluc2VydCkuYXBwZW5kKGNvbnRlbnQuY3V0KGRpc3QpKTtcbiAgICB9XG4gICAgbGV0IGlubmVyID0gaW5zZXJ0SW50byhjaGlsZC5jb250ZW50LCBkaXN0IC0gb2Zmc2V0IC0gMSwgaW5zZXJ0KTtcbiAgICByZXR1cm4gaW5uZXIgJiYgY29udGVudC5yZXBsYWNlQ2hpbGQoaW5kZXgsIGNoaWxkLmNvcHkoaW5uZXIpKTtcbn1cbmZ1bmN0aW9uIHJlcGxhY2UoJGZyb20sICR0bywgc2xpY2UpIHtcbiAgICBpZiAoc2xpY2Uub3BlblN0YXJ0ID4gJGZyb20uZGVwdGgpXG4gICAgICAgIHRocm93IG5ldyBSZXBsYWNlRXJyb3IoXCJJbnNlcnRlZCBjb250ZW50IGRlZXBlciB0aGFuIGluc2VydGlvbiBwb3NpdGlvblwiKTtcbiAgICBpZiAoJGZyb20uZGVwdGggLSBzbGljZS5vcGVuU3RhcnQgIT0gJHRvLmRlcHRoIC0gc2xpY2Uub3BlbkVuZClcbiAgICAgICAgdGhyb3cgbmV3IFJlcGxhY2VFcnJvcihcIkluY29uc2lzdGVudCBvcGVuIGRlcHRoc1wiKTtcbiAgICByZXR1cm4gcmVwbGFjZU91dGVyKCRmcm9tLCAkdG8sIHNsaWNlLCAwKTtcbn1cbmZ1bmN0aW9uIHJlcGxhY2VPdXRlcigkZnJvbSwgJHRvLCBzbGljZSwgZGVwdGgpIHtcbiAgICBsZXQgaW5kZXggPSAkZnJvbS5pbmRleChkZXB0aCksIG5vZGUgPSAkZnJvbS5ub2RlKGRlcHRoKTtcbiAgICBpZiAoaW5kZXggPT0gJHRvLmluZGV4KGRlcHRoKSAmJiBkZXB0aCA8ICRmcm9tLmRlcHRoIC0gc2xpY2Uub3BlblN0YXJ0KSB7XG4gICAgICAgIGxldCBpbm5lciA9IHJlcGxhY2VPdXRlcigkZnJvbSwgJHRvLCBzbGljZSwgZGVwdGggKyAxKTtcbiAgICAgICAgcmV0dXJuIG5vZGUuY29weShub2RlLmNvbnRlbnQucmVwbGFjZUNoaWxkKGluZGV4LCBpbm5lcikpO1xuICAgIH1cbiAgICBlbHNlIGlmICghc2xpY2UuY29udGVudC5zaXplKSB7XG4gICAgICAgIHJldHVybiBjbG9zZShub2RlLCByZXBsYWNlVHdvV2F5KCRmcm9tLCAkdG8sIGRlcHRoKSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKCFzbGljZS5vcGVuU3RhcnQgJiYgIXNsaWNlLm9wZW5FbmQgJiYgJGZyb20uZGVwdGggPT0gZGVwdGggJiYgJHRvLmRlcHRoID09IGRlcHRoKSB7IC8vIFNpbXBsZSwgZmxhdCBjYXNlXG4gICAgICAgIGxldCBwYXJlbnQgPSAkZnJvbS5wYXJlbnQsIGNvbnRlbnQgPSBwYXJlbnQuY29udGVudDtcbiAgICAgICAgcmV0dXJuIGNsb3NlKHBhcmVudCwgY29udGVudC5jdXQoMCwgJGZyb20ucGFyZW50T2Zmc2V0KS5hcHBlbmQoc2xpY2UuY29udGVudCkuYXBwZW5kKGNvbnRlbnQuY3V0KCR0by5wYXJlbnRPZmZzZXQpKSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBsZXQgeyBzdGFydCwgZW5kIH0gPSBwcmVwYXJlU2xpY2VGb3JSZXBsYWNlKHNsaWNlLCAkZnJvbSk7XG4gICAgICAgIHJldHVybiBjbG9zZShub2RlLCByZXBsYWNlVGhyZWVXYXkoJGZyb20sIHN0YXJ0LCBlbmQsICR0bywgZGVwdGgpKTtcbiAgICB9XG59XG5mdW5jdGlvbiBjaGVja0pvaW4obWFpbiwgc3ViKSB7XG4gICAgaWYgKCFzdWIudHlwZS5jb21wYXRpYmxlQ29udGVudChtYWluLnR5cGUpKVxuICAgICAgICB0aHJvdyBuZXcgUmVwbGFjZUVycm9yKFwiQ2Fubm90IGpvaW4gXCIgKyBzdWIudHlwZS5uYW1lICsgXCIgb250byBcIiArIG1haW4udHlwZS5uYW1lKTtcbn1cbmZ1bmN0aW9uIGpvaW5hYmxlKCRiZWZvcmUsICRhZnRlciwgZGVwdGgpIHtcbiAgICBsZXQgbm9kZSA9ICRiZWZvcmUubm9kZShkZXB0aCk7XG4gICAgY2hlY2tKb2luKG5vZGUsICRhZnRlci5ub2RlKGRlcHRoKSk7XG4gICAgcmV0dXJuIG5vZGU7XG59XG5mdW5jdGlvbiBhZGROb2RlKGNoaWxkLCB0YXJnZXQpIHtcbiAgICBsZXQgbGFzdCA9IHRhcmdldC5sZW5ndGggLSAxO1xuICAgIGlmIChsYXN0ID49IDAgJiYgY2hpbGQuaXNUZXh0ICYmIGNoaWxkLnNhbWVNYXJrdXAodGFyZ2V0W2xhc3RdKSlcbiAgICAgICAgdGFyZ2V0W2xhc3RdID0gY2hpbGQud2l0aFRleHQodGFyZ2V0W2xhc3RdLnRleHQgKyBjaGlsZC50ZXh0KTtcbiAgICBlbHNlXG4gICAgICAgIHRhcmdldC5wdXNoKGNoaWxkKTtcbn1cbmZ1bmN0aW9uIGFkZFJhbmdlKCRzdGFydCwgJGVuZCwgZGVwdGgsIHRhcmdldCkge1xuICAgIGxldCBub2RlID0gKCRlbmQgfHwgJHN0YXJ0KS5ub2RlKGRlcHRoKTtcbiAgICBsZXQgc3RhcnRJbmRleCA9IDAsIGVuZEluZGV4ID0gJGVuZCA/ICRlbmQuaW5kZXgoZGVwdGgpIDogbm9kZS5jaGlsZENvdW50O1xuICAgIGlmICgkc3RhcnQpIHtcbiAgICAgICAgc3RhcnRJbmRleCA9ICRzdGFydC5pbmRleChkZXB0aCk7XG4gICAgICAgIGlmICgkc3RhcnQuZGVwdGggPiBkZXB0aCkge1xuICAgICAgICAgICAgc3RhcnRJbmRleCsrO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCRzdGFydC50ZXh0T2Zmc2V0KSB7XG4gICAgICAgICAgICBhZGROb2RlKCRzdGFydC5ub2RlQWZ0ZXIsIHRhcmdldCk7XG4gICAgICAgICAgICBzdGFydEluZGV4Kys7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IHN0YXJ0SW5kZXg7IGkgPCBlbmRJbmRleDsgaSsrKVxuICAgICAgICBhZGROb2RlKG5vZGUuY2hpbGQoaSksIHRhcmdldCk7XG4gICAgaWYgKCRlbmQgJiYgJGVuZC5kZXB0aCA9PSBkZXB0aCAmJiAkZW5kLnRleHRPZmZzZXQpXG4gICAgICAgIGFkZE5vZGUoJGVuZC5ub2RlQmVmb3JlLCB0YXJnZXQpO1xufVxuZnVuY3Rpb24gY2xvc2Uobm9kZSwgY29udGVudCkge1xuICAgIGlmICghbm9kZS50eXBlLnZhbGlkQ29udGVudChjb250ZW50KSlcbiAgICAgICAgdGhyb3cgbmV3IFJlcGxhY2VFcnJvcihcIkludmFsaWQgY29udGVudCBmb3Igbm9kZSBcIiArIG5vZGUudHlwZS5uYW1lKTtcbiAgICByZXR1cm4gbm9kZS5jb3B5KGNvbnRlbnQpO1xufVxuZnVuY3Rpb24gcmVwbGFjZVRocmVlV2F5KCRmcm9tLCAkc3RhcnQsICRlbmQsICR0bywgZGVwdGgpIHtcbiAgICBsZXQgb3BlblN0YXJ0ID0gJGZyb20uZGVwdGggPiBkZXB0aCAmJiBqb2luYWJsZSgkZnJvbSwgJHN0YXJ0LCBkZXB0aCArIDEpO1xuICAgIGxldCBvcGVuRW5kID0gJHRvLmRlcHRoID4gZGVwdGggJiYgam9pbmFibGUoJGVuZCwgJHRvLCBkZXB0aCArIDEpO1xuICAgIGxldCBjb250ZW50ID0gW107XG4gICAgYWRkUmFuZ2UobnVsbCwgJGZyb20sIGRlcHRoLCBjb250ZW50KTtcbiAgICBpZiAob3BlblN0YXJ0ICYmIG9wZW5FbmQgJiYgJHN0YXJ0LmluZGV4KGRlcHRoKSA9PSAkZW5kLmluZGV4KGRlcHRoKSkge1xuICAgICAgICBjaGVja0pvaW4ob3BlblN0YXJ0LCBvcGVuRW5kKTtcbiAgICAgICAgYWRkTm9kZShjbG9zZShvcGVuU3RhcnQsIHJlcGxhY2VUaHJlZVdheSgkZnJvbSwgJHN0YXJ0LCAkZW5kLCAkdG8sIGRlcHRoICsgMSkpLCBjb250ZW50KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGlmIChvcGVuU3RhcnQpXG4gICAgICAgICAgICBhZGROb2RlKGNsb3NlKG9wZW5TdGFydCwgcmVwbGFjZVR3b1dheSgkZnJvbSwgJHN0YXJ0LCBkZXB0aCArIDEpKSwgY29udGVudCk7XG4gICAgICAgIGFkZFJhbmdlKCRzdGFydCwgJGVuZCwgZGVwdGgsIGNvbnRlbnQpO1xuICAgICAgICBpZiAob3BlbkVuZClcbiAgICAgICAgICAgIGFkZE5vZGUoY2xvc2Uob3BlbkVuZCwgcmVwbGFjZVR3b1dheSgkZW5kLCAkdG8sIGRlcHRoICsgMSkpLCBjb250ZW50KTtcbiAgICB9XG4gICAgYWRkUmFuZ2UoJHRvLCBudWxsLCBkZXB0aCwgY29udGVudCk7XG4gICAgcmV0dXJuIG5ldyBGcmFnbWVudChjb250ZW50KTtcbn1cbmZ1bmN0aW9uIHJlcGxhY2VUd29XYXkoJGZyb20sICR0bywgZGVwdGgpIHtcbiAgICBsZXQgY29udGVudCA9IFtdO1xuICAgIGFkZFJhbmdlKG51bGwsICRmcm9tLCBkZXB0aCwgY29udGVudCk7XG4gICAgaWYgKCRmcm9tLmRlcHRoID4gZGVwdGgpIHtcbiAgICAgICAgbGV0IHR5cGUgPSBqb2luYWJsZSgkZnJvbSwgJHRvLCBkZXB0aCArIDEpO1xuICAgICAgICBhZGROb2RlKGNsb3NlKHR5cGUsIHJlcGxhY2VUd29XYXkoJGZyb20sICR0bywgZGVwdGggKyAxKSksIGNvbnRlbnQpO1xuICAgIH1cbiAgICBhZGRSYW5nZSgkdG8sIG51bGwsIGRlcHRoLCBjb250ZW50KTtcbiAgICByZXR1cm4gbmV3IEZyYWdtZW50KGNvbnRlbnQpO1xufVxuZnVuY3Rpb24gcHJlcGFyZVNsaWNlRm9yUmVwbGFjZShzbGljZSwgJGFsb25nKSB7XG4gICAgbGV0IGV4dHJhID0gJGFsb25nLmRlcHRoIC0gc2xpY2Uub3BlblN0YXJ0LCBwYXJlbnQgPSAkYWxvbmcubm9kZShleHRyYSk7XG4gICAgbGV0IG5vZGUgPSBwYXJlbnQuY29weShzbGljZS5jb250ZW50KTtcbiAgICBmb3IgKGxldCBpID0gZXh0cmEgLSAxOyBpID49IDA7IGktLSlcbiAgICAgICAgbm9kZSA9ICRhbG9uZy5ub2RlKGkpLmNvcHkoRnJhZ21lbnQuZnJvbShub2RlKSk7XG4gICAgcmV0dXJuIHsgc3RhcnQ6IG5vZGUucmVzb2x2ZU5vQ2FjaGUoc2xpY2Uub3BlblN0YXJ0ICsgZXh0cmEpLFxuICAgICAgICBlbmQ6IG5vZGUucmVzb2x2ZU5vQ2FjaGUobm9kZS5jb250ZW50LnNpemUgLSBzbGljZS5vcGVuRW5kIC0gZXh0cmEpIH07XG59XG5cbi8qKlxuWW91IGNhbiBbX3Jlc29sdmVfXShodHRwczovL3Byb3NlbWlycm9yLm5ldC9kb2NzL3JlZi8jbW9kZWwuTm9kZS5yZXNvbHZlKSBhIHBvc2l0aW9uIHRvIGdldCBtb3JlXG5pbmZvcm1hdGlvbiBhYm91dCBpdC4gT2JqZWN0cyBvZiB0aGlzIGNsYXNzIHJlcHJlc2VudCBzdWNoIGFcbnJlc29sdmVkIHBvc2l0aW9uLCBwcm92aWRpbmcgdmFyaW91cyBwaWVjZXMgb2YgY29udGV4dFxuaW5mb3JtYXRpb24sIGFuZCBzb21lIGhlbHBlciBtZXRob2RzLlxuXG5UaHJvdWdob3V0IHRoaXMgaW50ZXJmYWNlLCBtZXRob2RzIHRoYXQgdGFrZSBhbiBvcHRpb25hbCBgZGVwdGhgXG5wYXJhbWV0ZXIgd2lsbCBpbnRlcnByZXQgdW5kZWZpbmVkIGFzIGB0aGlzLmRlcHRoYCBhbmQgbmVnYXRpdmVcbm51bWJlcnMgYXMgYHRoaXMuZGVwdGggKyB2YWx1ZWAuXG4qL1xuY2xhc3MgUmVzb2x2ZWRQb3Mge1xuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgY29uc3RydWN0b3IoXG4gICAgLyoqXG4gICAgVGhlIHBvc2l0aW9uIHRoYXQgd2FzIHJlc29sdmVkLlxuICAgICovXG4gICAgcG9zLCBcbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIHBhdGgsIFxuICAgIC8qKlxuICAgIFRoZSBvZmZzZXQgdGhpcyBwb3NpdGlvbiBoYXMgaW50byBpdHMgcGFyZW50IG5vZGUuXG4gICAgKi9cbiAgICBwYXJlbnRPZmZzZXQpIHtcbiAgICAgICAgdGhpcy5wb3MgPSBwb3M7XG4gICAgICAgIHRoaXMucGF0aCA9IHBhdGg7XG4gICAgICAgIHRoaXMucGFyZW50T2Zmc2V0ID0gcGFyZW50T2Zmc2V0O1xuICAgICAgICB0aGlzLmRlcHRoID0gcGF0aC5sZW5ndGggLyAzIC0gMTtcbiAgICB9XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICByZXNvbHZlRGVwdGgodmFsKSB7XG4gICAgICAgIGlmICh2YWwgPT0gbnVsbClcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRlcHRoO1xuICAgICAgICBpZiAodmFsIDwgMClcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRlcHRoICsgdmFsO1xuICAgICAgICByZXR1cm4gdmFsO1xuICAgIH1cbiAgICAvKipcbiAgICBUaGUgcGFyZW50IG5vZGUgdGhhdCB0aGUgcG9zaXRpb24gcG9pbnRzIGludG8uIE5vdGUgdGhhdCBldmVuIGlmXG4gICAgYSBwb3NpdGlvbiBwb2ludHMgaW50byBhIHRleHQgbm9kZSwgdGhhdCBub2RlIGlzIG5vdCBjb25zaWRlcmVkXG4gICAgdGhlIHBhcmVudOKAlHRleHQgbm9kZXMgYXJlIOKAmGZsYXTigJkgaW4gdGhpcyBtb2RlbCwgYW5kIGhhdmUgbm8gY29udGVudC5cbiAgICAqL1xuICAgIGdldCBwYXJlbnQoKSB7IHJldHVybiB0aGlzLm5vZGUodGhpcy5kZXB0aCk7IH1cbiAgICAvKipcbiAgICBUaGUgcm9vdCBub2RlIGluIHdoaWNoIHRoZSBwb3NpdGlvbiB3YXMgcmVzb2x2ZWQuXG4gICAgKi9cbiAgICBnZXQgZG9jKCkgeyByZXR1cm4gdGhpcy5ub2RlKDApOyB9XG4gICAgLyoqXG4gICAgVGhlIGFuY2VzdG9yIG5vZGUgYXQgdGhlIGdpdmVuIGxldmVsLiBgcC5ub2RlKHAuZGVwdGgpYCBpcyB0aGVcbiAgICBzYW1lIGFzIGBwLnBhcmVudGAuXG4gICAgKi9cbiAgICBub2RlKGRlcHRoKSB7IHJldHVybiB0aGlzLnBhdGhbdGhpcy5yZXNvbHZlRGVwdGgoZGVwdGgpICogM107IH1cbiAgICAvKipcbiAgICBUaGUgaW5kZXggaW50byB0aGUgYW5jZXN0b3IgYXQgdGhlIGdpdmVuIGxldmVsLiBJZiB0aGlzIHBvaW50c1xuICAgIGF0IHRoZSAzcmQgbm9kZSBpbiB0aGUgMm5kIHBhcmFncmFwaCBvbiB0aGUgdG9wIGxldmVsLCBmb3JcbiAgICBleGFtcGxlLCBgcC5pbmRleCgwKWAgaXMgMSBhbmQgYHAuaW5kZXgoMSlgIGlzIDIuXG4gICAgKi9cbiAgICBpbmRleChkZXB0aCkgeyByZXR1cm4gdGhpcy5wYXRoW3RoaXMucmVzb2x2ZURlcHRoKGRlcHRoKSAqIDMgKyAxXTsgfVxuICAgIC8qKlxuICAgIFRoZSBpbmRleCBwb2ludGluZyBhZnRlciB0aGlzIHBvc2l0aW9uIGludG8gdGhlIGFuY2VzdG9yIGF0IHRoZVxuICAgIGdpdmVuIGxldmVsLlxuICAgICovXG4gICAgaW5kZXhBZnRlcihkZXB0aCkge1xuICAgICAgICBkZXB0aCA9IHRoaXMucmVzb2x2ZURlcHRoKGRlcHRoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5kZXgoZGVwdGgpICsgKGRlcHRoID09IHRoaXMuZGVwdGggJiYgIXRoaXMudGV4dE9mZnNldCA/IDAgOiAxKTtcbiAgICB9XG4gICAgLyoqXG4gICAgVGhlIChhYnNvbHV0ZSkgcG9zaXRpb24gYXQgdGhlIHN0YXJ0IG9mIHRoZSBub2RlIGF0IHRoZSBnaXZlblxuICAgIGxldmVsLlxuICAgICovXG4gICAgc3RhcnQoZGVwdGgpIHtcbiAgICAgICAgZGVwdGggPSB0aGlzLnJlc29sdmVEZXB0aChkZXB0aCk7XG4gICAgICAgIHJldHVybiBkZXB0aCA9PSAwID8gMCA6IHRoaXMucGF0aFtkZXB0aCAqIDMgLSAxXSArIDE7XG4gICAgfVxuICAgIC8qKlxuICAgIFRoZSAoYWJzb2x1dGUpIHBvc2l0aW9uIGF0IHRoZSBlbmQgb2YgdGhlIG5vZGUgYXQgdGhlIGdpdmVuXG4gICAgbGV2ZWwuXG4gICAgKi9cbiAgICBlbmQoZGVwdGgpIHtcbiAgICAgICAgZGVwdGggPSB0aGlzLnJlc29sdmVEZXB0aChkZXB0aCk7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXJ0KGRlcHRoKSArIHRoaXMubm9kZShkZXB0aCkuY29udGVudC5zaXplO1xuICAgIH1cbiAgICAvKipcbiAgICBUaGUgKGFic29sdXRlKSBwb3NpdGlvbiBkaXJlY3RseSBiZWZvcmUgdGhlIHdyYXBwaW5nIG5vZGUgYXQgdGhlXG4gICAgZ2l2ZW4gbGV2ZWwsIG9yLCB3aGVuIGBkZXB0aGAgaXMgYHRoaXMuZGVwdGggKyAxYCwgdGhlIG9yaWdpbmFsXG4gICAgcG9zaXRpb24uXG4gICAgKi9cbiAgICBiZWZvcmUoZGVwdGgpIHtcbiAgICAgICAgZGVwdGggPSB0aGlzLnJlc29sdmVEZXB0aChkZXB0aCk7XG4gICAgICAgIGlmICghZGVwdGgpXG4gICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlRoZXJlIGlzIG5vIHBvc2l0aW9uIGJlZm9yZSB0aGUgdG9wLWxldmVsIG5vZGVcIik7XG4gICAgICAgIHJldHVybiBkZXB0aCA9PSB0aGlzLmRlcHRoICsgMSA/IHRoaXMucG9zIDogdGhpcy5wYXRoW2RlcHRoICogMyAtIDFdO1xuICAgIH1cbiAgICAvKipcbiAgICBUaGUgKGFic29sdXRlKSBwb3NpdGlvbiBkaXJlY3RseSBhZnRlciB0aGUgd3JhcHBpbmcgbm9kZSBhdCB0aGVcbiAgICBnaXZlbiBsZXZlbCwgb3IgdGhlIG9yaWdpbmFsIHBvc2l0aW9uIHdoZW4gYGRlcHRoYCBpcyBgdGhpcy5kZXB0aCArIDFgLlxuICAgICovXG4gICAgYWZ0ZXIoZGVwdGgpIHtcbiAgICAgICAgZGVwdGggPSB0aGlzLnJlc29sdmVEZXB0aChkZXB0aCk7XG4gICAgICAgIGlmICghZGVwdGgpXG4gICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlRoZXJlIGlzIG5vIHBvc2l0aW9uIGFmdGVyIHRoZSB0b3AtbGV2ZWwgbm9kZVwiKTtcbiAgICAgICAgcmV0dXJuIGRlcHRoID09IHRoaXMuZGVwdGggKyAxID8gdGhpcy5wb3MgOiB0aGlzLnBhdGhbZGVwdGggKiAzIC0gMV0gKyB0aGlzLnBhdGhbZGVwdGggKiAzXS5ub2RlU2l6ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgV2hlbiB0aGlzIHBvc2l0aW9uIHBvaW50cyBpbnRvIGEgdGV4dCBub2RlLCB0aGlzIHJldHVybnMgdGhlXG4gICAgZGlzdGFuY2UgYmV0d2VlbiB0aGUgcG9zaXRpb24gYW5kIHRoZSBzdGFydCBvZiB0aGUgdGV4dCBub2RlLlxuICAgIFdpbGwgYmUgemVybyBmb3IgcG9zaXRpb25zIHRoYXQgcG9pbnQgYmV0d2VlbiBub2Rlcy5cbiAgICAqL1xuICAgIGdldCB0ZXh0T2Zmc2V0KCkgeyByZXR1cm4gdGhpcy5wb3MgLSB0aGlzLnBhdGhbdGhpcy5wYXRoLmxlbmd0aCAtIDFdOyB9XG4gICAgLyoqXG4gICAgR2V0IHRoZSBub2RlIGRpcmVjdGx5IGFmdGVyIHRoZSBwb3NpdGlvbiwgaWYgYW55LiBJZiB0aGUgcG9zaXRpb25cbiAgICBwb2ludHMgaW50byBhIHRleHQgbm9kZSwgb25seSB0aGUgcGFydCBvZiB0aGF0IG5vZGUgYWZ0ZXIgdGhlXG4gICAgcG9zaXRpb24gaXMgcmV0dXJuZWQuXG4gICAgKi9cbiAgICBnZXQgbm9kZUFmdGVyKCkge1xuICAgICAgICBsZXQgcGFyZW50ID0gdGhpcy5wYXJlbnQsIGluZGV4ID0gdGhpcy5pbmRleCh0aGlzLmRlcHRoKTtcbiAgICAgICAgaWYgKGluZGV4ID09IHBhcmVudC5jaGlsZENvdW50KVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIGxldCBkT2ZmID0gdGhpcy5wb3MgLSB0aGlzLnBhdGhbdGhpcy5wYXRoLmxlbmd0aCAtIDFdLCBjaGlsZCA9IHBhcmVudC5jaGlsZChpbmRleCk7XG4gICAgICAgIHJldHVybiBkT2ZmID8gcGFyZW50LmNoaWxkKGluZGV4KS5jdXQoZE9mZikgOiBjaGlsZDtcbiAgICB9XG4gICAgLyoqXG4gICAgR2V0IHRoZSBub2RlIGRpcmVjdGx5IGJlZm9yZSB0aGUgcG9zaXRpb24sIGlmIGFueS4gSWYgdGhlXG4gICAgcG9zaXRpb24gcG9pbnRzIGludG8gYSB0ZXh0IG5vZGUsIG9ubHkgdGhlIHBhcnQgb2YgdGhhdCBub2RlXG4gICAgYmVmb3JlIHRoZSBwb3NpdGlvbiBpcyByZXR1cm5lZC5cbiAgICAqL1xuICAgIGdldCBub2RlQmVmb3JlKCkge1xuICAgICAgICBsZXQgaW5kZXggPSB0aGlzLmluZGV4KHRoaXMuZGVwdGgpO1xuICAgICAgICBsZXQgZE9mZiA9IHRoaXMucG9zIC0gdGhpcy5wYXRoW3RoaXMucGF0aC5sZW5ndGggLSAxXTtcbiAgICAgICAgaWYgKGRPZmYpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJlbnQuY2hpbGQoaW5kZXgpLmN1dCgwLCBkT2ZmKTtcbiAgICAgICAgcmV0dXJuIGluZGV4ID09IDAgPyBudWxsIDogdGhpcy5wYXJlbnQuY2hpbGQoaW5kZXggLSAxKTtcbiAgICB9XG4gICAgLyoqXG4gICAgR2V0IHRoZSBwb3NpdGlvbiBhdCB0aGUgZ2l2ZW4gaW5kZXggaW4gdGhlIHBhcmVudCBub2RlIGF0IHRoZVxuICAgIGdpdmVuIGRlcHRoICh3aGljaCBkZWZhdWx0cyB0byBgdGhpcy5kZXB0aGApLlxuICAgICovXG4gICAgcG9zQXRJbmRleChpbmRleCwgZGVwdGgpIHtcbiAgICAgICAgZGVwdGggPSB0aGlzLnJlc29sdmVEZXB0aChkZXB0aCk7XG4gICAgICAgIGxldCBub2RlID0gdGhpcy5wYXRoW2RlcHRoICogM10sIHBvcyA9IGRlcHRoID09IDAgPyAwIDogdGhpcy5wYXRoW2RlcHRoICogMyAtIDFdICsgMTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbmRleDsgaSsrKVxuICAgICAgICAgICAgcG9zICs9IG5vZGUuY2hpbGQoaSkubm9kZVNpemU7XG4gICAgICAgIHJldHVybiBwb3M7XG4gICAgfVxuICAgIC8qKlxuICAgIEdldCB0aGUgbWFya3MgYXQgdGhpcyBwb3NpdGlvbiwgZmFjdG9yaW5nIGluIHRoZSBzdXJyb3VuZGluZ1xuICAgIG1hcmtzJyBbYGluY2x1c2l2ZWBdKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyNtb2RlbC5NYXJrU3BlYy5pbmNsdXNpdmUpIHByb3BlcnR5LiBJZiB0aGVcbiAgICBwb3NpdGlvbiBpcyBhdCB0aGUgc3RhcnQgb2YgYSBub24tZW1wdHkgbm9kZSwgdGhlIG1hcmtzIG9mIHRoZVxuICAgIG5vZGUgYWZ0ZXIgaXQgKGlmIGFueSkgYXJlIHJldHVybmVkLlxuICAgICovXG4gICAgbWFya3MoKSB7XG4gICAgICAgIGxldCBwYXJlbnQgPSB0aGlzLnBhcmVudCwgaW5kZXggPSB0aGlzLmluZGV4KCk7XG4gICAgICAgIC8vIEluIGFuIGVtcHR5IHBhcmVudCwgcmV0dXJuIHRoZSBlbXB0eSBhcnJheVxuICAgICAgICBpZiAocGFyZW50LmNvbnRlbnQuc2l6ZSA9PSAwKVxuICAgICAgICAgICAgcmV0dXJuIE1hcmsubm9uZTtcbiAgICAgICAgLy8gV2hlbiBpbnNpZGUgYSB0ZXh0IG5vZGUsIGp1c3QgcmV0dXJuIHRoZSB0ZXh0IG5vZGUncyBtYXJrc1xuICAgICAgICBpZiAodGhpcy50ZXh0T2Zmc2V0KVxuICAgICAgICAgICAgcmV0dXJuIHBhcmVudC5jaGlsZChpbmRleCkubWFya3M7XG4gICAgICAgIGxldCBtYWluID0gcGFyZW50Lm1heWJlQ2hpbGQoaW5kZXggLSAxKSwgb3RoZXIgPSBwYXJlbnQubWF5YmVDaGlsZChpbmRleCk7XG4gICAgICAgIC8vIElmIHRoZSBgYWZ0ZXJgIGZsYWcgaXMgdHJ1ZSBvZiB0aGVyZSBpcyBubyBub2RlIGJlZm9yZSwgbWFrZVxuICAgICAgICAvLyB0aGUgbm9kZSBhZnRlciB0aGlzIHBvc2l0aW9uIHRoZSBtYWluIHJlZmVyZW5jZS5cbiAgICAgICAgaWYgKCFtYWluKSB7XG4gICAgICAgICAgICBsZXQgdG1wID0gbWFpbjtcbiAgICAgICAgICAgIG1haW4gPSBvdGhlcjtcbiAgICAgICAgICAgIG90aGVyID0gdG1wO1xuICAgICAgICB9XG4gICAgICAgIC8vIFVzZSBhbGwgbWFya3MgaW4gdGhlIG1haW4gbm9kZSwgZXhjZXB0IHRob3NlIHRoYXQgaGF2ZVxuICAgICAgICAvLyBgaW5jbHVzaXZlYCBzZXQgdG8gZmFsc2UgYW5kIGFyZSBub3QgcHJlc2VudCBpbiB0aGUgb3RoZXIgbm9kZS5cbiAgICAgICAgbGV0IG1hcmtzID0gbWFpbi5tYXJrcztcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtYXJrcy5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgIGlmIChtYXJrc1tpXS50eXBlLnNwZWMuaW5jbHVzaXZlID09PSBmYWxzZSAmJiAoIW90aGVyIHx8ICFtYXJrc1tpXS5pc0luU2V0KG90aGVyLm1hcmtzKSkpXG4gICAgICAgICAgICAgICAgbWFya3MgPSBtYXJrc1tpLS1dLnJlbW92ZUZyb21TZXQobWFya3MpO1xuICAgICAgICByZXR1cm4gbWFya3M7XG4gICAgfVxuICAgIC8qKlxuICAgIEdldCB0aGUgbWFya3MgYWZ0ZXIgdGhlIGN1cnJlbnQgcG9zaXRpb24sIGlmIGFueSwgZXhjZXB0IHRob3NlXG4gICAgdGhhdCBhcmUgbm9uLWluY2x1c2l2ZSBhbmQgbm90IHByZXNlbnQgYXQgcG9zaXRpb24gYCRlbmRgLiBUaGlzXG4gICAgaXMgbW9zdGx5IHVzZWZ1bCBmb3IgZ2V0dGluZyB0aGUgc2V0IG9mIG1hcmtzIHRvIHByZXNlcnZlIGFmdGVyIGFcbiAgICBkZWxldGlvbi4gV2lsbCByZXR1cm4gYG51bGxgIGlmIHRoaXMgcG9zaXRpb24gaXMgYXQgdGhlIGVuZCBvZlxuICAgIGl0cyBwYXJlbnQgbm9kZSBvciBpdHMgcGFyZW50IG5vZGUgaXNuJ3QgYSB0ZXh0YmxvY2sgKGluIHdoaWNoXG4gICAgY2FzZSBubyBtYXJrcyBzaG91bGQgYmUgcHJlc2VydmVkKS5cbiAgICAqL1xuICAgIG1hcmtzQWNyb3NzKCRlbmQpIHtcbiAgICAgICAgbGV0IGFmdGVyID0gdGhpcy5wYXJlbnQubWF5YmVDaGlsZCh0aGlzLmluZGV4KCkpO1xuICAgICAgICBpZiAoIWFmdGVyIHx8ICFhZnRlci5pc0lubGluZSlcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICBsZXQgbWFya3MgPSBhZnRlci5tYXJrcywgbmV4dCA9ICRlbmQucGFyZW50Lm1heWJlQ2hpbGQoJGVuZC5pbmRleCgpKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtYXJrcy5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgIGlmIChtYXJrc1tpXS50eXBlLnNwZWMuaW5jbHVzaXZlID09PSBmYWxzZSAmJiAoIW5leHQgfHwgIW1hcmtzW2ldLmlzSW5TZXQobmV4dC5tYXJrcykpKVxuICAgICAgICAgICAgICAgIG1hcmtzID0gbWFya3NbaS0tXS5yZW1vdmVGcm9tU2V0KG1hcmtzKTtcbiAgICAgICAgcmV0dXJuIG1hcmtzO1xuICAgIH1cbiAgICAvKipcbiAgICBUaGUgZGVwdGggdXAgdG8gd2hpY2ggdGhpcyBwb3NpdGlvbiBhbmQgdGhlIGdpdmVuIChub24tcmVzb2x2ZWQpXG4gICAgcG9zaXRpb24gc2hhcmUgdGhlIHNhbWUgcGFyZW50IG5vZGVzLlxuICAgICovXG4gICAgc2hhcmVkRGVwdGgocG9zKSB7XG4gICAgICAgIGZvciAobGV0IGRlcHRoID0gdGhpcy5kZXB0aDsgZGVwdGggPiAwOyBkZXB0aC0tKVxuICAgICAgICAgICAgaWYgKHRoaXMuc3RhcnQoZGVwdGgpIDw9IHBvcyAmJiB0aGlzLmVuZChkZXB0aCkgPj0gcG9zKVxuICAgICAgICAgICAgICAgIHJldHVybiBkZXB0aDtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIC8qKlxuICAgIFJldHVybnMgYSByYW5nZSBiYXNlZCBvbiB0aGUgcGxhY2Ugd2hlcmUgdGhpcyBwb3NpdGlvbiBhbmQgdGhlXG4gICAgZ2l2ZW4gcG9zaXRpb24gZGl2ZXJnZSBhcm91bmQgYmxvY2sgY29udGVudC4gSWYgYm90aCBwb2ludCBpbnRvXG4gICAgdGhlIHNhbWUgdGV4dGJsb2NrLCBmb3IgZXhhbXBsZSwgYSByYW5nZSBhcm91bmQgdGhhdCB0ZXh0YmxvY2tcbiAgICB3aWxsIGJlIHJldHVybmVkLiBJZiB0aGV5IHBvaW50IGludG8gZGlmZmVyZW50IGJsb2NrcywgdGhlIHJhbmdlXG4gICAgYXJvdW5kIHRob3NlIGJsb2NrcyBpbiB0aGVpciBzaGFyZWQgYW5jZXN0b3IgaXMgcmV0dXJuZWQuIFlvdSBjYW5cbiAgICBwYXNzIGluIGFuIG9wdGlvbmFsIHByZWRpY2F0ZSB0aGF0IHdpbGwgYmUgY2FsbGVkIHdpdGggYSBwYXJlbnRcbiAgICBub2RlIHRvIHNlZSBpZiBhIHJhbmdlIGludG8gdGhhdCBwYXJlbnQgaXMgYWNjZXB0YWJsZS5cbiAgICAqL1xuICAgIGJsb2NrUmFuZ2Uob3RoZXIgPSB0aGlzLCBwcmVkKSB7XG4gICAgICAgIGlmIChvdGhlci5wb3MgPCB0aGlzLnBvcylcbiAgICAgICAgICAgIHJldHVybiBvdGhlci5ibG9ja1JhbmdlKHRoaXMpO1xuICAgICAgICBmb3IgKGxldCBkID0gdGhpcy5kZXB0aCAtICh0aGlzLnBhcmVudC5pbmxpbmVDb250ZW50IHx8IHRoaXMucG9zID09IG90aGVyLnBvcyA/IDEgOiAwKTsgZCA+PSAwOyBkLS0pXG4gICAgICAgICAgICBpZiAob3RoZXIucG9zIDw9IHRoaXMuZW5kKGQpICYmICghcHJlZCB8fCBwcmVkKHRoaXMubm9kZShkKSkpKVxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgTm9kZVJhbmdlKHRoaXMsIG90aGVyLCBkKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIC8qKlxuICAgIFF1ZXJ5IHdoZXRoZXIgdGhlIGdpdmVuIHBvc2l0aW9uIHNoYXJlcyB0aGUgc2FtZSBwYXJlbnQgbm9kZS5cbiAgICAqL1xuICAgIHNhbWVQYXJlbnQob3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucG9zIC0gdGhpcy5wYXJlbnRPZmZzZXQgPT0gb3RoZXIucG9zIC0gb3RoZXIucGFyZW50T2Zmc2V0O1xuICAgIH1cbiAgICAvKipcbiAgICBSZXR1cm4gdGhlIGdyZWF0ZXIgb2YgdGhpcyBhbmQgdGhlIGdpdmVuIHBvc2l0aW9uLlxuICAgICovXG4gICAgbWF4KG90aGVyKSB7XG4gICAgICAgIHJldHVybiBvdGhlci5wb3MgPiB0aGlzLnBvcyA/IG90aGVyIDogdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgUmV0dXJuIHRoZSBzbWFsbGVyIG9mIHRoaXMgYW5kIHRoZSBnaXZlbiBwb3NpdGlvbi5cbiAgICAqL1xuICAgIG1pbihvdGhlcikge1xuICAgICAgICByZXR1cm4gb3RoZXIucG9zIDwgdGhpcy5wb3MgPyBvdGhlciA6IHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIGxldCBzdHIgPSBcIlwiO1xuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8PSB0aGlzLmRlcHRoOyBpKyspXG4gICAgICAgICAgICBzdHIgKz0gKHN0ciA/IFwiL1wiIDogXCJcIikgKyB0aGlzLm5vZGUoaSkudHlwZS5uYW1lICsgXCJfXCIgKyB0aGlzLmluZGV4KGkgLSAxKTtcbiAgICAgICAgcmV0dXJuIHN0ciArIFwiOlwiICsgdGhpcy5wYXJlbnRPZmZzZXQ7XG4gICAgfVxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgc3RhdGljIHJlc29sdmUoZG9jLCBwb3MpIHtcbiAgICAgICAgaWYgKCEocG9zID49IDAgJiYgcG9zIDw9IGRvYy5jb250ZW50LnNpemUpKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJQb3NpdGlvbiBcIiArIHBvcyArIFwiIG91dCBvZiByYW5nZVwiKTtcbiAgICAgICAgbGV0IHBhdGggPSBbXTtcbiAgICAgICAgbGV0IHN0YXJ0ID0gMCwgcGFyZW50T2Zmc2V0ID0gcG9zO1xuICAgICAgICBmb3IgKGxldCBub2RlID0gZG9jOzspIHtcbiAgICAgICAgICAgIGxldCB7IGluZGV4LCBvZmZzZXQgfSA9IG5vZGUuY29udGVudC5maW5kSW5kZXgocGFyZW50T2Zmc2V0KTtcbiAgICAgICAgICAgIGxldCByZW0gPSBwYXJlbnRPZmZzZXQgLSBvZmZzZXQ7XG4gICAgICAgICAgICBwYXRoLnB1c2gobm9kZSwgaW5kZXgsIHN0YXJ0ICsgb2Zmc2V0KTtcbiAgICAgICAgICAgIGlmICghcmVtKVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgbm9kZSA9IG5vZGUuY2hpbGQoaW5kZXgpO1xuICAgICAgICAgICAgaWYgKG5vZGUuaXNUZXh0KVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgcGFyZW50T2Zmc2V0ID0gcmVtIC0gMTtcbiAgICAgICAgICAgIHN0YXJ0ICs9IG9mZnNldCArIDE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBSZXNvbHZlZFBvcyhwb3MsIHBhdGgsIHBhcmVudE9mZnNldCk7XG4gICAgfVxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgc3RhdGljIHJlc29sdmVDYWNoZWQoZG9jLCBwb3MpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZXNvbHZlQ2FjaGUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBjYWNoZWQgPSByZXNvbHZlQ2FjaGVbaV07XG4gICAgICAgICAgICBpZiAoY2FjaGVkLnBvcyA9PSBwb3MgJiYgY2FjaGVkLmRvYyA9PSBkb2MpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhY2hlZDtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcmVzdWx0ID0gcmVzb2x2ZUNhY2hlW3Jlc29sdmVDYWNoZVBvc10gPSBSZXNvbHZlZFBvcy5yZXNvbHZlKGRvYywgcG9zKTtcbiAgICAgICAgcmVzb2x2ZUNhY2hlUG9zID0gKHJlc29sdmVDYWNoZVBvcyArIDEpICUgcmVzb2x2ZUNhY2hlU2l6ZTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5sZXQgcmVzb2x2ZUNhY2hlID0gW10sIHJlc29sdmVDYWNoZVBvcyA9IDAsIHJlc29sdmVDYWNoZVNpemUgPSAxMjtcbi8qKlxuUmVwcmVzZW50cyBhIGZsYXQgcmFuZ2Ugb2YgY29udGVudCwgaS5lLiBvbmUgdGhhdCBzdGFydHMgYW5kXG5lbmRzIGluIHRoZSBzYW1lIG5vZGUuXG4qL1xuY2xhc3MgTm9kZVJhbmdlIHtcbiAgICAvKipcbiAgICBDb25zdHJ1Y3QgYSBub2RlIHJhbmdlLiBgJGZyb21gIGFuZCBgJHRvYCBzaG91bGQgcG9pbnQgaW50byB0aGVcbiAgICBzYW1lIG5vZGUgdW50aWwgYXQgbGVhc3QgdGhlIGdpdmVuIGBkZXB0aGAsIHNpbmNlIGEgbm9kZSByYW5nZVxuICAgIGRlbm90ZXMgYW4gYWRqYWNlbnQgc2V0IG9mIG5vZGVzIGluIGEgc2luZ2xlIHBhcmVudCBub2RlLlxuICAgICovXG4gICAgY29uc3RydWN0b3IoXG4gICAgLyoqXG4gICAgQSByZXNvbHZlZCBwb3NpdGlvbiBhbG9uZyB0aGUgc3RhcnQgb2YgdGhlIGNvbnRlbnQuIE1heSBoYXZlIGFcbiAgICBgZGVwdGhgIGdyZWF0ZXIgdGhhbiB0aGlzIG9iamVjdCdzIGBkZXB0aGAgcHJvcGVydHksIHNpbmNlXG4gICAgdGhlc2UgYXJlIHRoZSBwb3NpdGlvbnMgdGhhdCB3ZXJlIHVzZWQgdG8gY29tcHV0ZSB0aGUgcmFuZ2UsXG4gICAgbm90IHJlLXJlc29sdmVkIHBvc2l0aW9ucyBkaXJlY3RseSBhdCBpdHMgYm91bmRhcmllcy5cbiAgICAqL1xuICAgICRmcm9tLCBcbiAgICAvKipcbiAgICBBIHBvc2l0aW9uIGFsb25nIHRoZSBlbmQgb2YgdGhlIGNvbnRlbnQuIFNlZVxuICAgIGNhdmVhdCBmb3IgW2AkZnJvbWBdKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyNtb2RlbC5Ob2RlUmFuZ2UuJGZyb20pLlxuICAgICovXG4gICAgJHRvLCBcbiAgICAvKipcbiAgICBUaGUgZGVwdGggb2YgdGhlIG5vZGUgdGhhdCB0aGlzIHJhbmdlIHBvaW50cyBpbnRvLlxuICAgICovXG4gICAgZGVwdGgpIHtcbiAgICAgICAgdGhpcy4kZnJvbSA9ICRmcm9tO1xuICAgICAgICB0aGlzLiR0byA9ICR0bztcbiAgICAgICAgdGhpcy5kZXB0aCA9IGRlcHRoO1xuICAgIH1cbiAgICAvKipcbiAgICBUaGUgcG9zaXRpb24gYXQgdGhlIHN0YXJ0IG9mIHRoZSByYW5nZS5cbiAgICAqL1xuICAgIGdldCBzdGFydCgpIHsgcmV0dXJuIHRoaXMuJGZyb20uYmVmb3JlKHRoaXMuZGVwdGggKyAxKTsgfVxuICAgIC8qKlxuICAgIFRoZSBwb3NpdGlvbiBhdCB0aGUgZW5kIG9mIHRoZSByYW5nZS5cbiAgICAqL1xuICAgIGdldCBlbmQoKSB7IHJldHVybiB0aGlzLiR0by5hZnRlcih0aGlzLmRlcHRoICsgMSk7IH1cbiAgICAvKipcbiAgICBUaGUgcGFyZW50IG5vZGUgdGhhdCB0aGUgcmFuZ2UgcG9pbnRzIGludG8uXG4gICAgKi9cbiAgICBnZXQgcGFyZW50KCkgeyByZXR1cm4gdGhpcy4kZnJvbS5ub2RlKHRoaXMuZGVwdGgpOyB9XG4gICAgLyoqXG4gICAgVGhlIHN0YXJ0IGluZGV4IG9mIHRoZSByYW5nZSBpbiB0aGUgcGFyZW50IG5vZGUuXG4gICAgKi9cbiAgICBnZXQgc3RhcnRJbmRleCgpIHsgcmV0dXJuIHRoaXMuJGZyb20uaW5kZXgodGhpcy5kZXB0aCk7IH1cbiAgICAvKipcbiAgICBUaGUgZW5kIGluZGV4IG9mIHRoZSByYW5nZSBpbiB0aGUgcGFyZW50IG5vZGUuXG4gICAgKi9cbiAgICBnZXQgZW5kSW5kZXgoKSB7IHJldHVybiB0aGlzLiR0by5pbmRleEFmdGVyKHRoaXMuZGVwdGgpOyB9XG59XG5cbmNvbnN0IGVtcHR5QXR0cnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuLyoqXG5UaGlzIGNsYXNzIHJlcHJlc2VudHMgYSBub2RlIGluIHRoZSB0cmVlIHRoYXQgbWFrZXMgdXAgYVxuUHJvc2VNaXJyb3IgZG9jdW1lbnQuIFNvIGEgZG9jdW1lbnQgaXMgYW4gaW5zdGFuY2Ugb2YgYE5vZGVgLCB3aXRoXG5jaGlsZHJlbiB0aGF0IGFyZSBhbHNvIGluc3RhbmNlcyBvZiBgTm9kZWAuXG5cbk5vZGVzIGFyZSBwZXJzaXN0ZW50IGRhdGEgc3RydWN0dXJlcy4gSW5zdGVhZCBvZiBjaGFuZ2luZyB0aGVtLCB5b3VcbmNyZWF0ZSBuZXcgb25lcyB3aXRoIHRoZSBjb250ZW50IHlvdSB3YW50LiBPbGQgb25lcyBrZWVwIHBvaW50aW5nXG5hdCB0aGUgb2xkIGRvY3VtZW50IHNoYXBlLiBUaGlzIGlzIG1hZGUgY2hlYXBlciBieSBzaGFyaW5nXG5zdHJ1Y3R1cmUgYmV0d2VlbiB0aGUgb2xkIGFuZCBuZXcgZGF0YSBhcyBtdWNoIGFzIHBvc3NpYmxlLCB3aGljaCBhXG50cmVlIHNoYXBlIGxpa2UgdGhpcyAod2l0aG91dCBiYWNrIHBvaW50ZXJzKSBtYWtlcyBlYXN5LlxuXG4qKkRvIG5vdCoqIGRpcmVjdGx5IG11dGF0ZSB0aGUgcHJvcGVydGllcyBvZiBhIGBOb2RlYCBvYmplY3QuIFNlZVxuW3RoZSBndWlkZV0oL2RvY3MvZ3VpZGUvI2RvYykgZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4qL1xuY2xhc3MgTm9kZSB7XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAvKipcbiAgICBUaGUgdHlwZSBvZiBub2RlIHRoYXQgdGhpcyBpcy5cbiAgICAqL1xuICAgIHR5cGUsIFxuICAgIC8qKlxuICAgIEFuIG9iamVjdCBtYXBwaW5nIGF0dHJpYnV0ZSBuYW1lcyB0byB2YWx1ZXMuIFRoZSBraW5kIG9mXG4gICAgYXR0cmlidXRlcyBhbGxvd2VkIGFuZCByZXF1aXJlZCBhcmVcbiAgICBbZGV0ZXJtaW5lZF0oaHR0cHM6Ly9wcm9zZW1pcnJvci5uZXQvZG9jcy9yZWYvI21vZGVsLk5vZGVTcGVjLmF0dHJzKSBieSB0aGUgbm9kZSB0eXBlLlxuICAgICovXG4gICAgYXR0cnMsIFxuICAgIC8vIEEgZnJhZ21lbnQgaG9sZGluZyB0aGUgbm9kZSdzIGNoaWxkcmVuLlxuICAgIGNvbnRlbnQsIFxuICAgIC8qKlxuICAgIFRoZSBtYXJrcyAodGhpbmdzIGxpa2Ugd2hldGhlciBpdCBpcyBlbXBoYXNpemVkIG9yIHBhcnQgb2YgYVxuICAgIGxpbmspIGFwcGxpZWQgdG8gdGhpcyBub2RlLlxuICAgICovXG4gICAgbWFya3MgPSBNYXJrLm5vbmUpIHtcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICAgICAgdGhpcy5hdHRycyA9IGF0dHJzO1xuICAgICAgICB0aGlzLm1hcmtzID0gbWFya3M7XG4gICAgICAgIHRoaXMuY29udGVudCA9IGNvbnRlbnQgfHwgRnJhZ21lbnQuZW1wdHk7XG4gICAgfVxuICAgIC8qKlxuICAgIFRoZSBzaXplIG9mIHRoaXMgbm9kZSwgYXMgZGVmaW5lZCBieSB0aGUgaW50ZWdlci1iYXNlZCBbaW5kZXhpbmdcbiAgICBzY2hlbWVdKC9kb2NzL2d1aWRlLyNkb2MuaW5kZXhpbmcpLiBGb3IgdGV4dCBub2RlcywgdGhpcyBpcyB0aGVcbiAgICBhbW91bnQgb2YgY2hhcmFjdGVycy4gRm9yIG90aGVyIGxlYWYgbm9kZXMsIGl0IGlzIG9uZS4gRm9yXG4gICAgbm9uLWxlYWYgbm9kZXMsIGl0IGlzIHRoZSBzaXplIG9mIHRoZSBjb250ZW50IHBsdXMgdHdvICh0aGVcbiAgICBzdGFydCBhbmQgZW5kIHRva2VuKS5cbiAgICAqL1xuICAgIGdldCBub2RlU2l6ZSgpIHsgcmV0dXJuIHRoaXMuaXNMZWFmID8gMSA6IDIgKyB0aGlzLmNvbnRlbnQuc2l6ZTsgfVxuICAgIC8qKlxuICAgIFRoZSBudW1iZXIgb2YgY2hpbGRyZW4gdGhhdCB0aGUgbm9kZSBoYXMuXG4gICAgKi9cbiAgICBnZXQgY2hpbGRDb3VudCgpIHsgcmV0dXJuIHRoaXMuY29udGVudC5jaGlsZENvdW50OyB9XG4gICAgLyoqXG4gICAgR2V0IHRoZSBjaGlsZCBub2RlIGF0IHRoZSBnaXZlbiBpbmRleC4gUmFpc2VzIGFuIGVycm9yIHdoZW4gdGhlXG4gICAgaW5kZXggaXMgb3V0IG9mIHJhbmdlLlxuICAgICovXG4gICAgY2hpbGQoaW5kZXgpIHsgcmV0dXJuIHRoaXMuY29udGVudC5jaGlsZChpbmRleCk7IH1cbiAgICAvKipcbiAgICBHZXQgdGhlIGNoaWxkIG5vZGUgYXQgdGhlIGdpdmVuIGluZGV4LCBpZiBpdCBleGlzdHMuXG4gICAgKi9cbiAgICBtYXliZUNoaWxkKGluZGV4KSB7IHJldHVybiB0aGlzLmNvbnRlbnQubWF5YmVDaGlsZChpbmRleCk7IH1cbiAgICAvKipcbiAgICBDYWxsIGBmYCBmb3IgZXZlcnkgY2hpbGQgbm9kZSwgcGFzc2luZyB0aGUgbm9kZSwgaXRzIG9mZnNldFxuICAgIGludG8gdGhpcyBwYXJlbnQgbm9kZSwgYW5kIGl0cyBpbmRleC5cbiAgICAqL1xuICAgIGZvckVhY2goZikgeyB0aGlzLmNvbnRlbnQuZm9yRWFjaChmKTsgfVxuICAgIC8qKlxuICAgIEludm9rZSBhIGNhbGxiYWNrIGZvciBhbGwgZGVzY2VuZGFudCBub2RlcyByZWN1cnNpdmVseSBiZXR3ZWVuXG4gICAgdGhlIGdpdmVuIHR3byBwb3NpdGlvbnMgdGhhdCBhcmUgcmVsYXRpdmUgdG8gc3RhcnQgb2YgdGhpc1xuICAgIG5vZGUncyBjb250ZW50LiBUaGUgY2FsbGJhY2sgaXMgaW52b2tlZCB3aXRoIHRoZSBub2RlLCBpdHNcbiAgICBwYXJlbnQtcmVsYXRpdmUgcG9zaXRpb24sIGl0cyBwYXJlbnQgbm9kZSwgYW5kIGl0cyBjaGlsZCBpbmRleC5cbiAgICBXaGVuIHRoZSBjYWxsYmFjayByZXR1cm5zIGZhbHNlIGZvciBhIGdpdmVuIG5vZGUsIHRoYXQgbm9kZSdzXG4gICAgY2hpbGRyZW4gd2lsbCBub3QgYmUgcmVjdXJzZWQgb3Zlci4gVGhlIGxhc3QgcGFyYW1ldGVyIGNhbiBiZVxuICAgIHVzZWQgdG8gc3BlY2lmeSBhIHN0YXJ0aW5nIHBvc2l0aW9uIHRvIGNvdW50IGZyb20uXG4gICAgKi9cbiAgICBub2Rlc0JldHdlZW4oZnJvbSwgdG8sIGYsIHN0YXJ0UG9zID0gMCkge1xuICAgICAgICB0aGlzLmNvbnRlbnQubm9kZXNCZXR3ZWVuKGZyb20sIHRvLCBmLCBzdGFydFBvcywgdGhpcyk7XG4gICAgfVxuICAgIC8qKlxuICAgIENhbGwgdGhlIGdpdmVuIGNhbGxiYWNrIGZvciBldmVyeSBkZXNjZW5kYW50IG5vZGUuIERvZXNuJ3RcbiAgICBkZXNjZW5kIGludG8gYSBub2RlIHdoZW4gdGhlIGNhbGxiYWNrIHJldHVybnMgYGZhbHNlYC5cbiAgICAqL1xuICAgIGRlc2NlbmRhbnRzKGYpIHtcbiAgICAgICAgdGhpcy5ub2Rlc0JldHdlZW4oMCwgdGhpcy5jb250ZW50LnNpemUsIGYpO1xuICAgIH1cbiAgICAvKipcbiAgICBDb25jYXRlbmF0ZXMgYWxsIHRoZSB0ZXh0IG5vZGVzIGZvdW5kIGluIHRoaXMgZnJhZ21lbnQgYW5kIGl0c1xuICAgIGNoaWxkcmVuLlxuICAgICovXG4gICAgZ2V0IHRleHRDb250ZW50KCkge1xuICAgICAgICByZXR1cm4gKHRoaXMuaXNMZWFmICYmIHRoaXMudHlwZS5zcGVjLmxlYWZUZXh0KVxuICAgICAgICAgICAgPyB0aGlzLnR5cGUuc3BlYy5sZWFmVGV4dCh0aGlzKVxuICAgICAgICAgICAgOiB0aGlzLnRleHRCZXR3ZWVuKDAsIHRoaXMuY29udGVudC5zaXplLCBcIlwiKTtcbiAgICB9XG4gICAgLyoqXG4gICAgR2V0IGFsbCB0ZXh0IGJldHdlZW4gcG9zaXRpb25zIGBmcm9tYCBhbmQgYHRvYC4gV2hlblxuICAgIGBibG9ja1NlcGFyYXRvcmAgaXMgZ2l2ZW4sIGl0IHdpbGwgYmUgaW5zZXJ0ZWQgdG8gc2VwYXJhdGUgdGV4dFxuICAgIGZyb20gZGlmZmVyZW50IGJsb2NrIG5vZGVzLiBJZiBgbGVhZlRleHRgIGlzIGdpdmVuLCBpdCdsbCBiZVxuICAgIGluc2VydGVkIGZvciBldmVyeSBub24tdGV4dCBsZWFmIG5vZGUgZW5jb3VudGVyZWQsIG90aGVyd2lzZVxuICAgIFtgbGVhZlRleHRgXShodHRwczovL3Byb3NlbWlycm9yLm5ldC9kb2NzL3JlZi8jbW9kZWwuTm9kZVNwZWNebGVhZlRleHQpIHdpbGwgYmUgdXNlZC5cbiAgICAqL1xuICAgIHRleHRCZXR3ZWVuKGZyb20sIHRvLCBibG9ja1NlcGFyYXRvciwgbGVhZlRleHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGVudC50ZXh0QmV0d2Vlbihmcm9tLCB0bywgYmxvY2tTZXBhcmF0b3IsIGxlYWZUZXh0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgUmV0dXJucyB0aGlzIG5vZGUncyBmaXJzdCBjaGlsZCwgb3IgYG51bGxgIGlmIHRoZXJlIGFyZSBub1xuICAgIGNoaWxkcmVuLlxuICAgICovXG4gICAgZ2V0IGZpcnN0Q2hpbGQoKSB7IHJldHVybiB0aGlzLmNvbnRlbnQuZmlyc3RDaGlsZDsgfVxuICAgIC8qKlxuICAgIFJldHVybnMgdGhpcyBub2RlJ3MgbGFzdCBjaGlsZCwgb3IgYG51bGxgIGlmIHRoZXJlIGFyZSBub1xuICAgIGNoaWxkcmVuLlxuICAgICovXG4gICAgZ2V0IGxhc3RDaGlsZCgpIHsgcmV0dXJuIHRoaXMuY29udGVudC5sYXN0Q2hpbGQ7IH1cbiAgICAvKipcbiAgICBUZXN0IHdoZXRoZXIgdHdvIG5vZGVzIHJlcHJlc2VudCB0aGUgc2FtZSBwaWVjZSBvZiBkb2N1bWVudC5cbiAgICAqL1xuICAgIGVxKG90aGVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzID09IG90aGVyIHx8ICh0aGlzLnNhbWVNYXJrdXAob3RoZXIpICYmIHRoaXMuY29udGVudC5lcShvdGhlci5jb250ZW50KSk7XG4gICAgfVxuICAgIC8qKlxuICAgIENvbXBhcmUgdGhlIG1hcmt1cCAodHlwZSwgYXR0cmlidXRlcywgYW5kIG1hcmtzKSBvZiB0aGlzIG5vZGUgdG9cbiAgICB0aG9zZSBvZiBhbm90aGVyLiBSZXR1cm5zIGB0cnVlYCBpZiBib3RoIGhhdmUgdGhlIHNhbWUgbWFya3VwLlxuICAgICovXG4gICAgc2FtZU1hcmt1cChvdGhlcikge1xuICAgICAgICByZXR1cm4gdGhpcy5oYXNNYXJrdXAob3RoZXIudHlwZSwgb3RoZXIuYXR0cnMsIG90aGVyLm1hcmtzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgQ2hlY2sgd2hldGhlciB0aGlzIG5vZGUncyBtYXJrdXAgY29ycmVzcG9uZCB0byB0aGUgZ2l2ZW4gdHlwZSxcbiAgICBhdHRyaWJ1dGVzLCBhbmQgbWFya3MuXG4gICAgKi9cbiAgICBoYXNNYXJrdXAodHlwZSwgYXR0cnMsIG1hcmtzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnR5cGUgPT0gdHlwZSAmJlxuICAgICAgICAgICAgY29tcGFyZURlZXAodGhpcy5hdHRycywgYXR0cnMgfHwgdHlwZS5kZWZhdWx0QXR0cnMgfHwgZW1wdHlBdHRycykgJiZcbiAgICAgICAgICAgIE1hcmsuc2FtZVNldCh0aGlzLm1hcmtzLCBtYXJrcyB8fCBNYXJrLm5vbmUpO1xuICAgIH1cbiAgICAvKipcbiAgICBDcmVhdGUgYSBuZXcgbm9kZSB3aXRoIHRoZSBzYW1lIG1hcmt1cCBhcyB0aGlzIG5vZGUsIGNvbnRhaW5pbmdcbiAgICB0aGUgZ2l2ZW4gY29udGVudCAob3IgZW1wdHksIGlmIG5vIGNvbnRlbnQgaXMgZ2l2ZW4pLlxuICAgICovXG4gICAgY29weShjb250ZW50ID0gbnVsbCkge1xuICAgICAgICBpZiAoY29udGVudCA9PSB0aGlzLmNvbnRlbnQpXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgcmV0dXJuIG5ldyBOb2RlKHRoaXMudHlwZSwgdGhpcy5hdHRycywgY29udGVudCwgdGhpcy5tYXJrcyk7XG4gICAgfVxuICAgIC8qKlxuICAgIENyZWF0ZSBhIGNvcHkgb2YgdGhpcyBub2RlLCB3aXRoIHRoZSBnaXZlbiBzZXQgb2YgbWFya3MgaW5zdGVhZFxuICAgIG9mIHRoZSBub2RlJ3Mgb3duIG1hcmtzLlxuICAgICovXG4gICAgbWFyayhtYXJrcykge1xuICAgICAgICByZXR1cm4gbWFya3MgPT0gdGhpcy5tYXJrcyA/IHRoaXMgOiBuZXcgTm9kZSh0aGlzLnR5cGUsIHRoaXMuYXR0cnMsIHRoaXMuY29udGVudCwgbWFya3MpO1xuICAgIH1cbiAgICAvKipcbiAgICBDcmVhdGUgYSBjb3B5IG9mIHRoaXMgbm9kZSB3aXRoIG9ubHkgdGhlIGNvbnRlbnQgYmV0d2VlbiB0aGVcbiAgICBnaXZlbiBwb3NpdGlvbnMuIElmIGB0b2AgaXMgbm90IGdpdmVuLCBpdCBkZWZhdWx0cyB0byB0aGUgZW5kIG9mXG4gICAgdGhlIG5vZGUuXG4gICAgKi9cbiAgICBjdXQoZnJvbSwgdG8gPSB0aGlzLmNvbnRlbnQuc2l6ZSkge1xuICAgICAgICBpZiAoZnJvbSA9PSAwICYmIHRvID09IHRoaXMuY29udGVudC5zaXplKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIHJldHVybiB0aGlzLmNvcHkodGhpcy5jb250ZW50LmN1dChmcm9tLCB0bykpO1xuICAgIH1cbiAgICAvKipcbiAgICBDdXQgb3V0IHRoZSBwYXJ0IG9mIHRoZSBkb2N1bWVudCBiZXR3ZWVuIHRoZSBnaXZlbiBwb3NpdGlvbnMsIGFuZFxuICAgIHJldHVybiBpdCBhcyBhIGBTbGljZWAgb2JqZWN0LlxuICAgICovXG4gICAgc2xpY2UoZnJvbSwgdG8gPSB0aGlzLmNvbnRlbnQuc2l6ZSwgaW5jbHVkZVBhcmVudHMgPSBmYWxzZSkge1xuICAgICAgICBpZiAoZnJvbSA9PSB0bylcbiAgICAgICAgICAgIHJldHVybiBTbGljZS5lbXB0eTtcbiAgICAgICAgbGV0ICRmcm9tID0gdGhpcy5yZXNvbHZlKGZyb20pLCAkdG8gPSB0aGlzLnJlc29sdmUodG8pO1xuICAgICAgICBsZXQgZGVwdGggPSBpbmNsdWRlUGFyZW50cyA/IDAgOiAkZnJvbS5zaGFyZWREZXB0aCh0byk7XG4gICAgICAgIGxldCBzdGFydCA9ICRmcm9tLnN0YXJ0KGRlcHRoKSwgbm9kZSA9ICRmcm9tLm5vZGUoZGVwdGgpO1xuICAgICAgICBsZXQgY29udGVudCA9IG5vZGUuY29udGVudC5jdXQoJGZyb20ucG9zIC0gc3RhcnQsICR0by5wb3MgLSBzdGFydCk7XG4gICAgICAgIHJldHVybiBuZXcgU2xpY2UoY29udGVudCwgJGZyb20uZGVwdGggLSBkZXB0aCwgJHRvLmRlcHRoIC0gZGVwdGgpO1xuICAgIH1cbiAgICAvKipcbiAgICBSZXBsYWNlIHRoZSBwYXJ0IG9mIHRoZSBkb2N1bWVudCBiZXR3ZWVuIHRoZSBnaXZlbiBwb3NpdGlvbnMgd2l0aFxuICAgIHRoZSBnaXZlbiBzbGljZS4gVGhlIHNsaWNlIG11c3QgJ2ZpdCcsIG1lYW5pbmcgaXRzIG9wZW4gc2lkZXNcbiAgICBtdXN0IGJlIGFibGUgdG8gY29ubmVjdCB0byB0aGUgc3Vycm91bmRpbmcgY29udGVudCwgYW5kIGl0c1xuICAgIGNvbnRlbnQgbm9kZXMgbXVzdCBiZSB2YWxpZCBjaGlsZHJlbiBmb3IgdGhlIG5vZGUgdGhleSBhcmUgcGxhY2VkXG4gICAgaW50by4gSWYgYW55IG9mIHRoaXMgaXMgdmlvbGF0ZWQsIGFuIGVycm9yIG9mIHR5cGVcbiAgICBbYFJlcGxhY2VFcnJvcmBdKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyNtb2RlbC5SZXBsYWNlRXJyb3IpIGlzIHRocm93bi5cbiAgICAqL1xuICAgIHJlcGxhY2UoZnJvbSwgdG8sIHNsaWNlKSB7XG4gICAgICAgIHJldHVybiByZXBsYWNlKHRoaXMucmVzb2x2ZShmcm9tKSwgdGhpcy5yZXNvbHZlKHRvKSwgc2xpY2UpO1xuICAgIH1cbiAgICAvKipcbiAgICBGaW5kIHRoZSBub2RlIGRpcmVjdGx5IGFmdGVyIHRoZSBnaXZlbiBwb3NpdGlvbi5cbiAgICAqL1xuICAgIG5vZGVBdChwb3MpIHtcbiAgICAgICAgZm9yIChsZXQgbm9kZSA9IHRoaXM7Oykge1xuICAgICAgICAgICAgbGV0IHsgaW5kZXgsIG9mZnNldCB9ID0gbm9kZS5jb250ZW50LmZpbmRJbmRleChwb3MpO1xuICAgICAgICAgICAgbm9kZSA9IG5vZGUubWF5YmVDaGlsZChpbmRleCk7XG4gICAgICAgICAgICBpZiAoIW5vZGUpXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICBpZiAob2Zmc2V0ID09IHBvcyB8fCBub2RlLmlzVGV4dClcbiAgICAgICAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgICAgICAgIHBvcyAtPSBvZmZzZXQgKyAxO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgIEZpbmQgdGhlIChkaXJlY3QpIGNoaWxkIG5vZGUgYWZ0ZXIgdGhlIGdpdmVuIG9mZnNldCwgaWYgYW55LFxuICAgIGFuZCByZXR1cm4gaXQgYWxvbmcgd2l0aCBpdHMgaW5kZXggYW5kIG9mZnNldCByZWxhdGl2ZSB0byB0aGlzXG4gICAgbm9kZS5cbiAgICAqL1xuICAgIGNoaWxkQWZ0ZXIocG9zKSB7XG4gICAgICAgIGxldCB7IGluZGV4LCBvZmZzZXQgfSA9IHRoaXMuY29udGVudC5maW5kSW5kZXgocG9zKTtcbiAgICAgICAgcmV0dXJuIHsgbm9kZTogdGhpcy5jb250ZW50Lm1heWJlQ2hpbGQoaW5kZXgpLCBpbmRleCwgb2Zmc2V0IH07XG4gICAgfVxuICAgIC8qKlxuICAgIEZpbmQgdGhlIChkaXJlY3QpIGNoaWxkIG5vZGUgYmVmb3JlIHRoZSBnaXZlbiBvZmZzZXQsIGlmIGFueSxcbiAgICBhbmQgcmV0dXJuIGl0IGFsb25nIHdpdGggaXRzIGluZGV4IGFuZCBvZmZzZXQgcmVsYXRpdmUgdG8gdGhpc1xuICAgIG5vZGUuXG4gICAgKi9cbiAgICBjaGlsZEJlZm9yZShwb3MpIHtcbiAgICAgICAgaWYgKHBvcyA9PSAwKVxuICAgICAgICAgICAgcmV0dXJuIHsgbm9kZTogbnVsbCwgaW5kZXg6IDAsIG9mZnNldDogMCB9O1xuICAgICAgICBsZXQgeyBpbmRleCwgb2Zmc2V0IH0gPSB0aGlzLmNvbnRlbnQuZmluZEluZGV4KHBvcyk7XG4gICAgICAgIGlmIChvZmZzZXQgPCBwb3MpXG4gICAgICAgICAgICByZXR1cm4geyBub2RlOiB0aGlzLmNvbnRlbnQuY2hpbGQoaW5kZXgpLCBpbmRleCwgb2Zmc2V0IH07XG4gICAgICAgIGxldCBub2RlID0gdGhpcy5jb250ZW50LmNoaWxkKGluZGV4IC0gMSk7XG4gICAgICAgIHJldHVybiB7IG5vZGUsIGluZGV4OiBpbmRleCAtIDEsIG9mZnNldDogb2Zmc2V0IC0gbm9kZS5ub2RlU2l6ZSB9O1xuICAgIH1cbiAgICAvKipcbiAgICBSZXNvbHZlIHRoZSBnaXZlbiBwb3NpdGlvbiBpbiB0aGUgZG9jdW1lbnQsIHJldHVybmluZyBhblxuICAgIFtvYmplY3RdKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyNtb2RlbC5SZXNvbHZlZFBvcykgd2l0aCBpbmZvcm1hdGlvbiBhYm91dCBpdHMgY29udGV4dC5cbiAgICAqL1xuICAgIHJlc29sdmUocG9zKSB7IHJldHVybiBSZXNvbHZlZFBvcy5yZXNvbHZlQ2FjaGVkKHRoaXMsIHBvcyk7IH1cbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIHJlc29sdmVOb0NhY2hlKHBvcykgeyByZXR1cm4gUmVzb2x2ZWRQb3MucmVzb2x2ZSh0aGlzLCBwb3MpOyB9XG4gICAgLyoqXG4gICAgVGVzdCB3aGV0aGVyIGEgZ2l2ZW4gbWFyayBvciBtYXJrIHR5cGUgb2NjdXJzIGluIHRoaXMgZG9jdW1lbnRcbiAgICBiZXR3ZWVuIHRoZSB0d28gZ2l2ZW4gcG9zaXRpb25zLlxuICAgICovXG4gICAgcmFuZ2VIYXNNYXJrKGZyb20sIHRvLCB0eXBlKSB7XG4gICAgICAgIGxldCBmb3VuZCA9IGZhbHNlO1xuICAgICAgICBpZiAodG8gPiBmcm9tKVxuICAgICAgICAgICAgdGhpcy5ub2Rlc0JldHdlZW4oZnJvbSwgdG8sIG5vZGUgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlLmlzSW5TZXQobm9kZS5tYXJrcykpXG4gICAgICAgICAgICAgICAgICAgIGZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gIWZvdW5kO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBmb3VuZDtcbiAgICB9XG4gICAgLyoqXG4gICAgVHJ1ZSB3aGVuIHRoaXMgaXMgYSBibG9jayAobm9uLWlubGluZSBub2RlKVxuICAgICovXG4gICAgZ2V0IGlzQmxvY2soKSB7IHJldHVybiB0aGlzLnR5cGUuaXNCbG9jazsgfVxuICAgIC8qKlxuICAgIFRydWUgd2hlbiB0aGlzIGlzIGEgdGV4dGJsb2NrIG5vZGUsIGEgYmxvY2sgbm9kZSB3aXRoIGlubGluZVxuICAgIGNvbnRlbnQuXG4gICAgKi9cbiAgICBnZXQgaXNUZXh0YmxvY2soKSB7IHJldHVybiB0aGlzLnR5cGUuaXNUZXh0YmxvY2s7IH1cbiAgICAvKipcbiAgICBUcnVlIHdoZW4gdGhpcyBub2RlIGFsbG93cyBpbmxpbmUgY29udGVudC5cbiAgICAqL1xuICAgIGdldCBpbmxpbmVDb250ZW50KCkgeyByZXR1cm4gdGhpcy50eXBlLmlubGluZUNvbnRlbnQ7IH1cbiAgICAvKipcbiAgICBUcnVlIHdoZW4gdGhpcyBpcyBhbiBpbmxpbmUgbm9kZSAoYSB0ZXh0IG5vZGUgb3IgYSBub2RlIHRoYXQgY2FuXG4gICAgYXBwZWFyIGFtb25nIHRleHQpLlxuICAgICovXG4gICAgZ2V0IGlzSW5saW5lKCkgeyByZXR1cm4gdGhpcy50eXBlLmlzSW5saW5lOyB9XG4gICAgLyoqXG4gICAgVHJ1ZSB3aGVuIHRoaXMgaXMgYSB0ZXh0IG5vZGUuXG4gICAgKi9cbiAgICBnZXQgaXNUZXh0KCkgeyByZXR1cm4gdGhpcy50eXBlLmlzVGV4dDsgfVxuICAgIC8qKlxuICAgIFRydWUgd2hlbiB0aGlzIGlzIGEgbGVhZiBub2RlLlxuICAgICovXG4gICAgZ2V0IGlzTGVhZigpIHsgcmV0dXJuIHRoaXMudHlwZS5pc0xlYWY7IH1cbiAgICAvKipcbiAgICBUcnVlIHdoZW4gdGhpcyBpcyBhbiBhdG9tLCBpLmUuIHdoZW4gaXQgZG9lcyBub3QgaGF2ZSBkaXJlY3RseVxuICAgIGVkaXRhYmxlIGNvbnRlbnQuIFRoaXMgaXMgdXN1YWxseSB0aGUgc2FtZSBhcyBgaXNMZWFmYCwgYnV0IGNhblxuICAgIGJlIGNvbmZpZ3VyZWQgd2l0aCB0aGUgW2BhdG9tYCBwcm9wZXJ0eV0oaHR0cHM6Ly9wcm9zZW1pcnJvci5uZXQvZG9jcy9yZWYvI21vZGVsLk5vZGVTcGVjLmF0b20pXG4gICAgb24gYSBub2RlJ3Mgc3BlYyAodHlwaWNhbGx5IHVzZWQgd2hlbiB0aGUgbm9kZSBpcyBkaXNwbGF5ZWQgYXNcbiAgICBhbiB1bmVkaXRhYmxlIFtub2RlIHZpZXddKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyN2aWV3Lk5vZGVWaWV3KSkuXG4gICAgKi9cbiAgICBnZXQgaXNBdG9tKCkgeyByZXR1cm4gdGhpcy50eXBlLmlzQXRvbTsgfVxuICAgIC8qKlxuICAgIFJldHVybiBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIG5vZGUgZm9yIGRlYnVnZ2luZ1xuICAgIHB1cnBvc2VzLlxuICAgICovXG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIGlmICh0aGlzLnR5cGUuc3BlYy50b0RlYnVnU3RyaW5nKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudHlwZS5zcGVjLnRvRGVidWdTdHJpbmcodGhpcyk7XG4gICAgICAgIGxldCBuYW1lID0gdGhpcy50eXBlLm5hbWU7XG4gICAgICAgIGlmICh0aGlzLmNvbnRlbnQuc2l6ZSlcbiAgICAgICAgICAgIG5hbWUgKz0gXCIoXCIgKyB0aGlzLmNvbnRlbnQudG9TdHJpbmdJbm5lcigpICsgXCIpXCI7XG4gICAgICAgIHJldHVybiB3cmFwTWFya3ModGhpcy5tYXJrcywgbmFtZSk7XG4gICAgfVxuICAgIC8qKlxuICAgIEdldCB0aGUgY29udGVudCBtYXRjaCBpbiB0aGlzIG5vZGUgYXQgdGhlIGdpdmVuIGluZGV4LlxuICAgICovXG4gICAgY29udGVudE1hdGNoQXQoaW5kZXgpIHtcbiAgICAgICAgbGV0IG1hdGNoID0gdGhpcy50eXBlLmNvbnRlbnRNYXRjaC5tYXRjaEZyYWdtZW50KHRoaXMuY29udGVudCwgMCwgaW5kZXgpO1xuICAgICAgICBpZiAoIW1hdGNoKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2FsbGVkIGNvbnRlbnRNYXRjaEF0IG9uIGEgbm9kZSB3aXRoIGludmFsaWQgY29udGVudFwiKTtcbiAgICAgICAgcmV0dXJuIG1hdGNoO1xuICAgIH1cbiAgICAvKipcbiAgICBUZXN0IHdoZXRoZXIgcmVwbGFjaW5nIHRoZSByYW5nZSBiZXR3ZWVuIGBmcm9tYCBhbmQgYHRvYCAoYnlcbiAgICBjaGlsZCBpbmRleCkgd2l0aCB0aGUgZ2l2ZW4gcmVwbGFjZW1lbnQgZnJhZ21lbnQgKHdoaWNoIGRlZmF1bHRzXG4gICAgdG8gdGhlIGVtcHR5IGZyYWdtZW50KSB3b3VsZCBsZWF2ZSB0aGUgbm9kZSdzIGNvbnRlbnQgdmFsaWQuIFlvdVxuICAgIGNhbiBvcHRpb25hbGx5IHBhc3MgYHN0YXJ0YCBhbmQgYGVuZGAgaW5kaWNlcyBpbnRvIHRoZVxuICAgIHJlcGxhY2VtZW50IGZyYWdtZW50LlxuICAgICovXG4gICAgY2FuUmVwbGFjZShmcm9tLCB0bywgcmVwbGFjZW1lbnQgPSBGcmFnbWVudC5lbXB0eSwgc3RhcnQgPSAwLCBlbmQgPSByZXBsYWNlbWVudC5jaGlsZENvdW50KSB7XG4gICAgICAgIGxldCBvbmUgPSB0aGlzLmNvbnRlbnRNYXRjaEF0KGZyb20pLm1hdGNoRnJhZ21lbnQocmVwbGFjZW1lbnQsIHN0YXJ0LCBlbmQpO1xuICAgICAgICBsZXQgdHdvID0gb25lICYmIG9uZS5tYXRjaEZyYWdtZW50KHRoaXMuY29udGVudCwgdG8pO1xuICAgICAgICBpZiAoIXR3byB8fCAhdHdvLnZhbGlkRW5kKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBmb3IgKGxldCBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkrKylcbiAgICAgICAgICAgIGlmICghdGhpcy50eXBlLmFsbG93c01hcmtzKHJlcGxhY2VtZW50LmNoaWxkKGkpLm1hcmtzKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICAvKipcbiAgICBUZXN0IHdoZXRoZXIgcmVwbGFjaW5nIHRoZSByYW5nZSBgZnJvbWAgdG8gYHRvYCAoYnkgaW5kZXgpIHdpdGhcbiAgICBhIG5vZGUgb2YgdGhlIGdpdmVuIHR5cGUgd291bGQgbGVhdmUgdGhlIG5vZGUncyBjb250ZW50IHZhbGlkLlxuICAgICovXG4gICAgY2FuUmVwbGFjZVdpdGgoZnJvbSwgdG8sIHR5cGUsIG1hcmtzKSB7XG4gICAgICAgIGlmIChtYXJrcyAmJiAhdGhpcy50eXBlLmFsbG93c01hcmtzKG1hcmtzKSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgbGV0IHN0YXJ0ID0gdGhpcy5jb250ZW50TWF0Y2hBdChmcm9tKS5tYXRjaFR5cGUodHlwZSk7XG4gICAgICAgIGxldCBlbmQgPSBzdGFydCAmJiBzdGFydC5tYXRjaEZyYWdtZW50KHRoaXMuY29udGVudCwgdG8pO1xuICAgICAgICByZXR1cm4gZW5kID8gZW5kLnZhbGlkRW5kIDogZmFsc2U7XG4gICAgfVxuICAgIC8qKlxuICAgIFRlc3Qgd2hldGhlciB0aGUgZ2l2ZW4gbm9kZSdzIGNvbnRlbnQgY291bGQgYmUgYXBwZW5kZWQgdG8gdGhpc1xuICAgIG5vZGUuIElmIHRoYXQgbm9kZSBpcyBlbXB0eSwgdGhpcyB3aWxsIG9ubHkgcmV0dXJuIHRydWUgaWYgdGhlcmVcbiAgICBpcyBhdCBsZWFzdCBvbmUgbm9kZSB0eXBlIHRoYXQgY2FuIGFwcGVhciBpbiBib3RoIG5vZGVzICh0byBhdm9pZFxuICAgIG1lcmdpbmcgY29tcGxldGVseSBpbmNvbXBhdGlibGUgbm9kZXMpLlxuICAgICovXG4gICAgY2FuQXBwZW5kKG90aGVyKSB7XG4gICAgICAgIGlmIChvdGhlci5jb250ZW50LnNpemUpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jYW5SZXBsYWNlKHRoaXMuY2hpbGRDb3VudCwgdGhpcy5jaGlsZENvdW50LCBvdGhlci5jb250ZW50KTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudHlwZS5jb21wYXRpYmxlQ29udGVudChvdGhlci50eXBlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgQ2hlY2sgd2hldGhlciB0aGlzIG5vZGUgYW5kIGl0cyBkZXNjZW5kYW50cyBjb25mb3JtIHRvIHRoZVxuICAgIHNjaGVtYSwgYW5kIHJhaXNlIGVycm9yIHdoZW4gdGhleSBkbyBub3QuXG4gICAgKi9cbiAgICBjaGVjaygpIHtcbiAgICAgICAgaWYgKCF0aGlzLnR5cGUudmFsaWRDb250ZW50KHRoaXMuY29udGVudCkpXG4gICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihgSW52YWxpZCBjb250ZW50IGZvciBub2RlICR7dGhpcy50eXBlLm5hbWV9OiAke3RoaXMuY29udGVudC50b1N0cmluZygpLnNsaWNlKDAsIDUwKX1gKTtcbiAgICAgICAgbGV0IGNvcHkgPSBNYXJrLm5vbmU7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5tYXJrcy5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgIGNvcHkgPSB0aGlzLm1hcmtzW2ldLmFkZFRvU2V0KGNvcHkpO1xuICAgICAgICBpZiAoIU1hcmsuc2FtZVNldChjb3B5LCB0aGlzLm1hcmtzKSlcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKGBJbnZhbGlkIGNvbGxlY3Rpb24gb2YgbWFya3MgZm9yIG5vZGUgJHt0aGlzLnR5cGUubmFtZX06ICR7dGhpcy5tYXJrcy5tYXAobSA9PiBtLnR5cGUubmFtZSl9YCk7XG4gICAgICAgIHRoaXMuY29udGVudC5mb3JFYWNoKG5vZGUgPT4gbm9kZS5jaGVjaygpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgUmV0dXJuIGEgSlNPTi1zZXJpYWxpemVhYmxlIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgbm9kZS5cbiAgICAqL1xuICAgIHRvSlNPTigpIHtcbiAgICAgICAgbGV0IG9iaiA9IHsgdHlwZTogdGhpcy50eXBlLm5hbWUgfTtcbiAgICAgICAgZm9yIChsZXQgXyBpbiB0aGlzLmF0dHJzKSB7XG4gICAgICAgICAgICBvYmouYXR0cnMgPSB0aGlzLmF0dHJzO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuY29udGVudC5zaXplKVxuICAgICAgICAgICAgb2JqLmNvbnRlbnQgPSB0aGlzLmNvbnRlbnQudG9KU09OKCk7XG4gICAgICAgIGlmICh0aGlzLm1hcmtzLmxlbmd0aClcbiAgICAgICAgICAgIG9iai5tYXJrcyA9IHRoaXMubWFya3MubWFwKG4gPT4gbi50b0pTT04oKSk7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfVxuICAgIC8qKlxuICAgIERlc2VyaWFsaXplIGEgbm9kZSBmcm9tIGl0cyBKU09OIHJlcHJlc2VudGF0aW9uLlxuICAgICovXG4gICAgc3RhdGljIGZyb21KU09OKHNjaGVtYSwganNvbikge1xuICAgICAgICBpZiAoIWpzb24pXG4gICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkludmFsaWQgaW5wdXQgZm9yIE5vZGUuZnJvbUpTT05cIik7XG4gICAgICAgIGxldCBtYXJrcyA9IG51bGw7XG4gICAgICAgIGlmIChqc29uLm1hcmtzKSB7XG4gICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoanNvbi5tYXJrcykpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJJbnZhbGlkIG1hcmsgZGF0YSBmb3IgTm9kZS5mcm9tSlNPTlwiKTtcbiAgICAgICAgICAgIG1hcmtzID0ganNvbi5tYXJrcy5tYXAoc2NoZW1hLm1hcmtGcm9tSlNPTik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGpzb24udHlwZSA9PSBcInRleHRcIikge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBqc29uLnRleHQgIT0gXCJzdHJpbmdcIilcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkludmFsaWQgdGV4dCBub2RlIGluIEpTT05cIik7XG4gICAgICAgICAgICByZXR1cm4gc2NoZW1hLnRleHQoanNvbi50ZXh0LCBtYXJrcyk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGNvbnRlbnQgPSBGcmFnbWVudC5mcm9tSlNPTihzY2hlbWEsIGpzb24uY29udGVudCk7XG4gICAgICAgIHJldHVybiBzY2hlbWEubm9kZVR5cGUoanNvbi50eXBlKS5jcmVhdGUoanNvbi5hdHRycywgY29udGVudCwgbWFya3MpO1xuICAgIH1cbn1cbk5vZGUucHJvdG90eXBlLnRleHQgPSB1bmRlZmluZWQ7XG5jbGFzcyBUZXh0Tm9kZSBleHRlbmRzIE5vZGUge1xuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgY29uc3RydWN0b3IodHlwZSwgYXR0cnMsIGNvbnRlbnQsIG1hcmtzKSB7XG4gICAgICAgIHN1cGVyKHR5cGUsIGF0dHJzLCBudWxsLCBtYXJrcyk7XG4gICAgICAgIGlmICghY29udGVudClcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiRW1wdHkgdGV4dCBub2RlcyBhcmUgbm90IGFsbG93ZWRcIik7XG4gICAgICAgIHRoaXMudGV4dCA9IGNvbnRlbnQ7XG4gICAgfVxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICBpZiAodGhpcy50eXBlLnNwZWMudG9EZWJ1Z1N0cmluZylcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnR5cGUuc3BlYy50b0RlYnVnU3RyaW5nKHRoaXMpO1xuICAgICAgICByZXR1cm4gd3JhcE1hcmtzKHRoaXMubWFya3MsIEpTT04uc3RyaW5naWZ5KHRoaXMudGV4dCkpO1xuICAgIH1cbiAgICBnZXQgdGV4dENvbnRlbnQoKSB7IHJldHVybiB0aGlzLnRleHQ7IH1cbiAgICB0ZXh0QmV0d2Vlbihmcm9tLCB0bykgeyByZXR1cm4gdGhpcy50ZXh0LnNsaWNlKGZyb20sIHRvKTsgfVxuICAgIGdldCBub2RlU2l6ZSgpIHsgcmV0dXJuIHRoaXMudGV4dC5sZW5ndGg7IH1cbiAgICBtYXJrKG1hcmtzKSB7XG4gICAgICAgIHJldHVybiBtYXJrcyA9PSB0aGlzLm1hcmtzID8gdGhpcyA6IG5ldyBUZXh0Tm9kZSh0aGlzLnR5cGUsIHRoaXMuYXR0cnMsIHRoaXMudGV4dCwgbWFya3MpO1xuICAgIH1cbiAgICB3aXRoVGV4dCh0ZXh0KSB7XG4gICAgICAgIGlmICh0ZXh0ID09IHRoaXMudGV4dClcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICByZXR1cm4gbmV3IFRleHROb2RlKHRoaXMudHlwZSwgdGhpcy5hdHRycywgdGV4dCwgdGhpcy5tYXJrcyk7XG4gICAgfVxuICAgIGN1dChmcm9tID0gMCwgdG8gPSB0aGlzLnRleHQubGVuZ3RoKSB7XG4gICAgICAgIGlmIChmcm9tID09IDAgJiYgdG8gPT0gdGhpcy50ZXh0Lmxlbmd0aClcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICByZXR1cm4gdGhpcy53aXRoVGV4dCh0aGlzLnRleHQuc2xpY2UoZnJvbSwgdG8pKTtcbiAgICB9XG4gICAgZXEob3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2FtZU1hcmt1cChvdGhlcikgJiYgdGhpcy50ZXh0ID09IG90aGVyLnRleHQ7XG4gICAgfVxuICAgIHRvSlNPTigpIHtcbiAgICAgICAgbGV0IGJhc2UgPSBzdXBlci50b0pTT04oKTtcbiAgICAgICAgYmFzZS50ZXh0ID0gdGhpcy50ZXh0O1xuICAgICAgICByZXR1cm4gYmFzZTtcbiAgICB9XG59XG5mdW5jdGlvbiB3cmFwTWFya3MobWFya3MsIHN0cikge1xuICAgIGZvciAobGV0IGkgPSBtYXJrcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSlcbiAgICAgICAgc3RyID0gbWFya3NbaV0udHlwZS5uYW1lICsgXCIoXCIgKyBzdHIgKyBcIilcIjtcbiAgICByZXR1cm4gc3RyO1xufVxuXG4vKipcbkluc3RhbmNlcyBvZiB0aGlzIGNsYXNzIHJlcHJlc2VudCBhIG1hdGNoIHN0YXRlIG9mIGEgbm9kZSB0eXBlJ3Ncbltjb250ZW50IGV4cHJlc3Npb25dKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyNtb2RlbC5Ob2RlU3BlYy5jb250ZW50KSwgYW5kIGNhbiBiZSB1c2VkIHRvXG5maW5kIG91dCB3aGV0aGVyIGZ1cnRoZXIgY29udGVudCBtYXRjaGVzIGhlcmUsIGFuZCB3aGV0aGVyIGEgZ2l2ZW5cbnBvc2l0aW9uIGlzIGEgdmFsaWQgZW5kIG9mIHRoZSBub2RlLlxuKi9cbmNsYXNzIENvbnRlbnRNYXRjaCB7XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAvKipcbiAgICBUcnVlIHdoZW4gdGhpcyBtYXRjaCBzdGF0ZSByZXByZXNlbnRzIGEgdmFsaWQgZW5kIG9mIHRoZSBub2RlLlxuICAgICovXG4gICAgdmFsaWRFbmQpIHtcbiAgICAgICAgdGhpcy52YWxpZEVuZCA9IHZhbGlkRW5kO1xuICAgICAgICAvKipcbiAgICAgICAgQGludGVybmFsXG4gICAgICAgICovXG4gICAgICAgIHRoaXMubmV4dCA9IFtdO1xuICAgICAgICAvKipcbiAgICAgICAgQGludGVybmFsXG4gICAgICAgICovXG4gICAgICAgIHRoaXMud3JhcENhY2hlID0gW107XG4gICAgfVxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgc3RhdGljIHBhcnNlKHN0cmluZywgbm9kZVR5cGVzKSB7XG4gICAgICAgIGxldCBzdHJlYW0gPSBuZXcgVG9rZW5TdHJlYW0oc3RyaW5nLCBub2RlVHlwZXMpO1xuICAgICAgICBpZiAoc3RyZWFtLm5leHQgPT0gbnVsbClcbiAgICAgICAgICAgIHJldHVybiBDb250ZW50TWF0Y2guZW1wdHk7XG4gICAgICAgIGxldCBleHByID0gcGFyc2VFeHByKHN0cmVhbSk7XG4gICAgICAgIGlmIChzdHJlYW0ubmV4dClcbiAgICAgICAgICAgIHN0cmVhbS5lcnIoXCJVbmV4cGVjdGVkIHRyYWlsaW5nIHRleHRcIik7XG4gICAgICAgIGxldCBtYXRjaCA9IGRmYShuZmEoZXhwcikpO1xuICAgICAgICBjaGVja0ZvckRlYWRFbmRzKG1hdGNoLCBzdHJlYW0pO1xuICAgICAgICByZXR1cm4gbWF0Y2g7XG4gICAgfVxuICAgIC8qKlxuICAgIE1hdGNoIGEgbm9kZSB0eXBlLCByZXR1cm5pbmcgYSBtYXRjaCBhZnRlciB0aGF0IG5vZGUgaWZcbiAgICBzdWNjZXNzZnVsLlxuICAgICovXG4gICAgbWF0Y2hUeXBlKHR5cGUpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm5leHQubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICBpZiAodGhpcy5uZXh0W2ldLnR5cGUgPT0gdHlwZSlcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5uZXh0W2ldLm5leHQ7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICBUcnkgdG8gbWF0Y2ggYSBmcmFnbWVudC4gUmV0dXJucyB0aGUgcmVzdWx0aW5nIG1hdGNoIHdoZW5cbiAgICBzdWNjZXNzZnVsLlxuICAgICovXG4gICAgbWF0Y2hGcmFnbWVudChmcmFnLCBzdGFydCA9IDAsIGVuZCA9IGZyYWcuY2hpbGRDb3VudCkge1xuICAgICAgICBsZXQgY3VyID0gdGhpcztcbiAgICAgICAgZm9yIChsZXQgaSA9IHN0YXJ0OyBjdXIgJiYgaSA8IGVuZDsgaSsrKVxuICAgICAgICAgICAgY3VyID0gY3VyLm1hdGNoVHlwZShmcmFnLmNoaWxkKGkpLnR5cGUpO1xuICAgICAgICByZXR1cm4gY3VyO1xuICAgIH1cbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIGdldCBpbmxpbmVDb250ZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5uZXh0Lmxlbmd0aCAmJiB0aGlzLm5leHRbMF0udHlwZS5pc0lubGluZTtcbiAgICB9XG4gICAgLyoqXG4gICAgR2V0IHRoZSBmaXJzdCBtYXRjaGluZyBub2RlIHR5cGUgYXQgdGhpcyBtYXRjaCBwb3NpdGlvbiB0aGF0IGNhblxuICAgIGJlIGdlbmVyYXRlZC5cbiAgICAqL1xuICAgIGdldCBkZWZhdWx0VHlwZSgpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm5leHQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCB7IHR5cGUgfSA9IHRoaXMubmV4dFtpXTtcbiAgICAgICAgICAgIGlmICghKHR5cGUuaXNUZXh0IHx8IHR5cGUuaGFzUmVxdWlyZWRBdHRycygpKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gdHlwZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBjb21wYXRpYmxlKG90aGVyKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5uZXh0Lmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBvdGhlci5uZXh0Lmxlbmd0aDsgaisrKVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm5leHRbaV0udHlwZSA9PSBvdGhlci5uZXh0W2pdLnR5cGUpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIC8qKlxuICAgIFRyeSB0byBtYXRjaCB0aGUgZ2l2ZW4gZnJhZ21lbnQsIGFuZCBpZiB0aGF0IGZhaWxzLCBzZWUgaWYgaXQgY2FuXG4gICAgYmUgbWFkZSB0byBtYXRjaCBieSBpbnNlcnRpbmcgbm9kZXMgaW4gZnJvbnQgb2YgaXQuIFdoZW5cbiAgICBzdWNjZXNzZnVsLCByZXR1cm4gYSBmcmFnbWVudCBvZiBpbnNlcnRlZCBub2RlcyAod2hpY2ggbWF5IGJlXG4gICAgZW1wdHkgaWYgbm90aGluZyBoYWQgdG8gYmUgaW5zZXJ0ZWQpLiBXaGVuIGB0b0VuZGAgaXMgdHJ1ZSwgb25seVxuICAgIHJldHVybiBhIGZyYWdtZW50IGlmIHRoZSByZXN1bHRpbmcgbWF0Y2ggZ29lcyB0byB0aGUgZW5kIG9mIHRoZVxuICAgIGNvbnRlbnQgZXhwcmVzc2lvbi5cbiAgICAqL1xuICAgIGZpbGxCZWZvcmUoYWZ0ZXIsIHRvRW5kID0gZmFsc2UsIHN0YXJ0SW5kZXggPSAwKSB7XG4gICAgICAgIGxldCBzZWVuID0gW3RoaXNdO1xuICAgICAgICBmdW5jdGlvbiBzZWFyY2gobWF0Y2gsIHR5cGVzKSB7XG4gICAgICAgICAgICBsZXQgZmluaXNoZWQgPSBtYXRjaC5tYXRjaEZyYWdtZW50KGFmdGVyLCBzdGFydEluZGV4KTtcbiAgICAgICAgICAgIGlmIChmaW5pc2hlZCAmJiAoIXRvRW5kIHx8IGZpbmlzaGVkLnZhbGlkRW5kKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gRnJhZ21lbnQuZnJvbSh0eXBlcy5tYXAodHAgPT4gdHAuY3JlYXRlQW5kRmlsbCgpKSk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1hdGNoLm5leHQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgeyB0eXBlLCBuZXh0IH0gPSBtYXRjaC5uZXh0W2ldO1xuICAgICAgICAgICAgICAgIGlmICghKHR5cGUuaXNUZXh0IHx8IHR5cGUuaGFzUmVxdWlyZWRBdHRycygpKSAmJiBzZWVuLmluZGV4T2YobmV4dCkgPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgc2Vlbi5wdXNoKG5leHQpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgZm91bmQgPSBzZWFyY2gobmV4dCwgdHlwZXMuY29uY2F0KHR5cGUpKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZvdW5kKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZvdW5kO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZWFyY2godGhpcywgW10pO1xuICAgIH1cbiAgICAvKipcbiAgICBGaW5kIGEgc2V0IG9mIHdyYXBwaW5nIG5vZGUgdHlwZXMgdGhhdCB3b3VsZCBhbGxvdyBhIG5vZGUgb2YgdGhlXG4gICAgZ2l2ZW4gdHlwZSB0byBhcHBlYXIgYXQgdGhpcyBwb3NpdGlvbi4gVGhlIHJlc3VsdCBtYXkgYmUgZW1wdHlcbiAgICAod2hlbiBpdCBmaXRzIGRpcmVjdGx5KSBhbmQgd2lsbCBiZSBudWxsIHdoZW4gbm8gc3VjaCB3cmFwcGluZ1xuICAgIGV4aXN0cy5cbiAgICAqL1xuICAgIGZpbmRXcmFwcGluZyh0YXJnZXQpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLndyYXBDYWNoZS5sZW5ndGg7IGkgKz0gMilcbiAgICAgICAgICAgIGlmICh0aGlzLndyYXBDYWNoZVtpXSA9PSB0YXJnZXQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMud3JhcENhY2hlW2kgKyAxXTtcbiAgICAgICAgbGV0IGNvbXB1dGVkID0gdGhpcy5jb21wdXRlV3JhcHBpbmcodGFyZ2V0KTtcbiAgICAgICAgdGhpcy53cmFwQ2FjaGUucHVzaCh0YXJnZXQsIGNvbXB1dGVkKTtcbiAgICAgICAgcmV0dXJuIGNvbXB1dGVkO1xuICAgIH1cbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIGNvbXB1dGVXcmFwcGluZyh0YXJnZXQpIHtcbiAgICAgICAgbGV0IHNlZW4gPSBPYmplY3QuY3JlYXRlKG51bGwpLCBhY3RpdmUgPSBbeyBtYXRjaDogdGhpcywgdHlwZTogbnVsbCwgdmlhOiBudWxsIH1dO1xuICAgICAgICB3aGlsZSAoYWN0aXZlLmxlbmd0aCkge1xuICAgICAgICAgICAgbGV0IGN1cnJlbnQgPSBhY3RpdmUuc2hpZnQoKSwgbWF0Y2ggPSBjdXJyZW50Lm1hdGNoO1xuICAgICAgICAgICAgaWYgKG1hdGNoLm1hdGNoVHlwZSh0YXJnZXQpKSB7XG4gICAgICAgICAgICAgICAgbGV0IHJlc3VsdCA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IG9iaiA9IGN1cnJlbnQ7IG9iai50eXBlOyBvYmogPSBvYmoudmlhKVxuICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChvYmoudHlwZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC5yZXZlcnNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1hdGNoLm5leHQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgeyB0eXBlLCBuZXh0IH0gPSBtYXRjaC5uZXh0W2ldO1xuICAgICAgICAgICAgICAgIGlmICghdHlwZS5pc0xlYWYgJiYgIXR5cGUuaGFzUmVxdWlyZWRBdHRycygpICYmICEodHlwZS5uYW1lIGluIHNlZW4pICYmICghY3VycmVudC50eXBlIHx8IG5leHQudmFsaWRFbmQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGFjdGl2ZS5wdXNoKHsgbWF0Y2g6IHR5cGUuY29udGVudE1hdGNoLCB0eXBlLCB2aWE6IGN1cnJlbnQgfSk7XG4gICAgICAgICAgICAgICAgICAgIHNlZW5bdHlwZS5uYW1lXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICBUaGUgbnVtYmVyIG9mIG91dGdvaW5nIGVkZ2VzIHRoaXMgbm9kZSBoYXMgaW4gdGhlIGZpbml0ZVxuICAgIGF1dG9tYXRvbiB0aGF0IGRlc2NyaWJlcyB0aGUgY29udGVudCBleHByZXNzaW9uLlxuICAgICovXG4gICAgZ2V0IGVkZ2VDb3VudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubmV4dC5sZW5ndGg7XG4gICAgfVxuICAgIC8qKlxuICAgIEdldCB0aGUgX25f4oCLdGggb3V0Z29pbmcgZWRnZSBmcm9tIHRoaXMgbm9kZSBpbiB0aGUgZmluaXRlXG4gICAgYXV0b21hdG9uIHRoYXQgZGVzY3JpYmVzIHRoZSBjb250ZW50IGV4cHJlc3Npb24uXG4gICAgKi9cbiAgICBlZGdlKG4pIHtcbiAgICAgICAgaWYgKG4gPj0gdGhpcy5uZXh0Lmxlbmd0aClcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKGBUaGVyZSdzIG5vICR7bn10aCBlZGdlIGluIHRoaXMgY29udGVudCBtYXRjaGApO1xuICAgICAgICByZXR1cm4gdGhpcy5uZXh0W25dO1xuICAgIH1cbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICBsZXQgc2VlbiA9IFtdO1xuICAgICAgICBmdW5jdGlvbiBzY2FuKG0pIHtcbiAgICAgICAgICAgIHNlZW4ucHVzaChtKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbS5uZXh0Lmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgICAgIGlmIChzZWVuLmluZGV4T2YobS5uZXh0W2ldLm5leHQpID09IC0xKVxuICAgICAgICAgICAgICAgICAgICBzY2FuKG0ubmV4dFtpXS5uZXh0KTtcbiAgICAgICAgfVxuICAgICAgICBzY2FuKHRoaXMpO1xuICAgICAgICByZXR1cm4gc2Vlbi5tYXAoKG0sIGkpID0+IHtcbiAgICAgICAgICAgIGxldCBvdXQgPSBpICsgKG0udmFsaWRFbmQgPyBcIipcIiA6IFwiIFwiKSArIFwiIFwiO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtLm5leHQubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICAgICAgb3V0ICs9IChpID8gXCIsIFwiIDogXCJcIikgKyBtLm5leHRbaV0udHlwZS5uYW1lICsgXCItPlwiICsgc2Vlbi5pbmRleE9mKG0ubmV4dFtpXS5uZXh0KTtcbiAgICAgICAgICAgIHJldHVybiBvdXQ7XG4gICAgICAgIH0pLmpvaW4oXCJcXG5cIik7XG4gICAgfVxufVxuLyoqXG5AaW50ZXJuYWxcbiovXG5Db250ZW50TWF0Y2guZW1wdHkgPSBuZXcgQ29udGVudE1hdGNoKHRydWUpO1xuY2xhc3MgVG9rZW5TdHJlYW0ge1xuICAgIGNvbnN0cnVjdG9yKHN0cmluZywgbm9kZVR5cGVzKSB7XG4gICAgICAgIHRoaXMuc3RyaW5nID0gc3RyaW5nO1xuICAgICAgICB0aGlzLm5vZGVUeXBlcyA9IG5vZGVUeXBlcztcbiAgICAgICAgdGhpcy5pbmxpbmUgPSBudWxsO1xuICAgICAgICB0aGlzLnBvcyA9IDA7XG4gICAgICAgIHRoaXMudG9rZW5zID0gc3RyaW5nLnNwbGl0KC9cXHMqKD89XFxifFxcV3wkKS8pO1xuICAgICAgICBpZiAodGhpcy50b2tlbnNbdGhpcy50b2tlbnMubGVuZ3RoIC0gMV0gPT0gXCJcIilcbiAgICAgICAgICAgIHRoaXMudG9rZW5zLnBvcCgpO1xuICAgICAgICBpZiAodGhpcy50b2tlbnNbMF0gPT0gXCJcIilcbiAgICAgICAgICAgIHRoaXMudG9rZW5zLnNoaWZ0KCk7XG4gICAgfVxuICAgIGdldCBuZXh0KCkgeyByZXR1cm4gdGhpcy50b2tlbnNbdGhpcy5wb3NdOyB9XG4gICAgZWF0KHRvaykgeyByZXR1cm4gdGhpcy5uZXh0ID09IHRvayAmJiAodGhpcy5wb3MrKyB8fCB0cnVlKTsgfVxuICAgIGVycihzdHIpIHsgdGhyb3cgbmV3IFN5bnRheEVycm9yKHN0ciArIFwiIChpbiBjb250ZW50IGV4cHJlc3Npb24gJ1wiICsgdGhpcy5zdHJpbmcgKyBcIicpXCIpOyB9XG59XG5mdW5jdGlvbiBwYXJzZUV4cHIoc3RyZWFtKSB7XG4gICAgbGV0IGV4cHJzID0gW107XG4gICAgZG8ge1xuICAgICAgICBleHBycy5wdXNoKHBhcnNlRXhwclNlcShzdHJlYW0pKTtcbiAgICB9IHdoaWxlIChzdHJlYW0uZWF0KFwifFwiKSk7XG4gICAgcmV0dXJuIGV4cHJzLmxlbmd0aCA9PSAxID8gZXhwcnNbMF0gOiB7IHR5cGU6IFwiY2hvaWNlXCIsIGV4cHJzIH07XG59XG5mdW5jdGlvbiBwYXJzZUV4cHJTZXEoc3RyZWFtKSB7XG4gICAgbGV0IGV4cHJzID0gW107XG4gICAgZG8ge1xuICAgICAgICBleHBycy5wdXNoKHBhcnNlRXhwclN1YnNjcmlwdChzdHJlYW0pKTtcbiAgICB9IHdoaWxlIChzdHJlYW0ubmV4dCAmJiBzdHJlYW0ubmV4dCAhPSBcIilcIiAmJiBzdHJlYW0ubmV4dCAhPSBcInxcIik7XG4gICAgcmV0dXJuIGV4cHJzLmxlbmd0aCA9PSAxID8gZXhwcnNbMF0gOiB7IHR5cGU6IFwic2VxXCIsIGV4cHJzIH07XG59XG5mdW5jdGlvbiBwYXJzZUV4cHJTdWJzY3JpcHQoc3RyZWFtKSB7XG4gICAgbGV0IGV4cHIgPSBwYXJzZUV4cHJBdG9tKHN0cmVhbSk7XG4gICAgZm9yICg7Oykge1xuICAgICAgICBpZiAoc3RyZWFtLmVhdChcIitcIikpXG4gICAgICAgICAgICBleHByID0geyB0eXBlOiBcInBsdXNcIiwgZXhwciB9O1xuICAgICAgICBlbHNlIGlmIChzdHJlYW0uZWF0KFwiKlwiKSlcbiAgICAgICAgICAgIGV4cHIgPSB7IHR5cGU6IFwic3RhclwiLCBleHByIH07XG4gICAgICAgIGVsc2UgaWYgKHN0cmVhbS5lYXQoXCI/XCIpKVxuICAgICAgICAgICAgZXhwciA9IHsgdHlwZTogXCJvcHRcIiwgZXhwciB9O1xuICAgICAgICBlbHNlIGlmIChzdHJlYW0uZWF0KFwie1wiKSlcbiAgICAgICAgICAgIGV4cHIgPSBwYXJzZUV4cHJSYW5nZShzdHJlYW0sIGV4cHIpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIGV4cHI7XG59XG5mdW5jdGlvbiBwYXJzZU51bShzdHJlYW0pIHtcbiAgICBpZiAoL1xcRC8udGVzdChzdHJlYW0ubmV4dCkpXG4gICAgICAgIHN0cmVhbS5lcnIoXCJFeHBlY3RlZCBudW1iZXIsIGdvdCAnXCIgKyBzdHJlYW0ubmV4dCArIFwiJ1wiKTtcbiAgICBsZXQgcmVzdWx0ID0gTnVtYmVyKHN0cmVhbS5uZXh0KTtcbiAgICBzdHJlYW0ucG9zKys7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIHBhcnNlRXhwclJhbmdlKHN0cmVhbSwgZXhwcikge1xuICAgIGxldCBtaW4gPSBwYXJzZU51bShzdHJlYW0pLCBtYXggPSBtaW47XG4gICAgaWYgKHN0cmVhbS5lYXQoXCIsXCIpKSB7XG4gICAgICAgIGlmIChzdHJlYW0ubmV4dCAhPSBcIn1cIilcbiAgICAgICAgICAgIG1heCA9IHBhcnNlTnVtKHN0cmVhbSk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIG1heCA9IC0xO1xuICAgIH1cbiAgICBpZiAoIXN0cmVhbS5lYXQoXCJ9XCIpKVxuICAgICAgICBzdHJlYW0uZXJyKFwiVW5jbG9zZWQgYnJhY2VkIHJhbmdlXCIpO1xuICAgIHJldHVybiB7IHR5cGU6IFwicmFuZ2VcIiwgbWluLCBtYXgsIGV4cHIgfTtcbn1cbmZ1bmN0aW9uIHJlc29sdmVOYW1lKHN0cmVhbSwgbmFtZSkge1xuICAgIGxldCB0eXBlcyA9IHN0cmVhbS5ub2RlVHlwZXMsIHR5cGUgPSB0eXBlc1tuYW1lXTtcbiAgICBpZiAodHlwZSlcbiAgICAgICAgcmV0dXJuIFt0eXBlXTtcbiAgICBsZXQgcmVzdWx0ID0gW107XG4gICAgZm9yIChsZXQgdHlwZU5hbWUgaW4gdHlwZXMpIHtcbiAgICAgICAgbGV0IHR5cGUgPSB0eXBlc1t0eXBlTmFtZV07XG4gICAgICAgIGlmICh0eXBlLmdyb3Vwcy5pbmRleE9mKG5hbWUpID4gLTEpXG4gICAgICAgICAgICByZXN1bHQucHVzaCh0eXBlKTtcbiAgICB9XG4gICAgaWYgKHJlc3VsdC5sZW5ndGggPT0gMClcbiAgICAgICAgc3RyZWFtLmVycihcIk5vIG5vZGUgdHlwZSBvciBncm91cCAnXCIgKyBuYW1lICsgXCInIGZvdW5kXCIpO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBwYXJzZUV4cHJBdG9tKHN0cmVhbSkge1xuICAgIGlmIChzdHJlYW0uZWF0KFwiKFwiKSkge1xuICAgICAgICBsZXQgZXhwciA9IHBhcnNlRXhwcihzdHJlYW0pO1xuICAgICAgICBpZiAoIXN0cmVhbS5lYXQoXCIpXCIpKVxuICAgICAgICAgICAgc3RyZWFtLmVycihcIk1pc3NpbmcgY2xvc2luZyBwYXJlblwiKTtcbiAgICAgICAgcmV0dXJuIGV4cHI7XG4gICAgfVxuICAgIGVsc2UgaWYgKCEvXFxXLy50ZXN0KHN0cmVhbS5uZXh0KSkge1xuICAgICAgICBsZXQgZXhwcnMgPSByZXNvbHZlTmFtZShzdHJlYW0sIHN0cmVhbS5uZXh0KS5tYXAodHlwZSA9PiB7XG4gICAgICAgICAgICBpZiAoc3RyZWFtLmlubGluZSA9PSBudWxsKVxuICAgICAgICAgICAgICAgIHN0cmVhbS5pbmxpbmUgPSB0eXBlLmlzSW5saW5lO1xuICAgICAgICAgICAgZWxzZSBpZiAoc3RyZWFtLmlubGluZSAhPSB0eXBlLmlzSW5saW5lKVxuICAgICAgICAgICAgICAgIHN0cmVhbS5lcnIoXCJNaXhpbmcgaW5saW5lIGFuZCBibG9jayBjb250ZW50XCIpO1xuICAgICAgICAgICAgcmV0dXJuIHsgdHlwZTogXCJuYW1lXCIsIHZhbHVlOiB0eXBlIH07XG4gICAgICAgIH0pO1xuICAgICAgICBzdHJlYW0ucG9zKys7XG4gICAgICAgIHJldHVybiBleHBycy5sZW5ndGggPT0gMSA/IGV4cHJzWzBdIDogeyB0eXBlOiBcImNob2ljZVwiLCBleHBycyB9O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgc3RyZWFtLmVycihcIlVuZXhwZWN0ZWQgdG9rZW4gJ1wiICsgc3RyZWFtLm5leHQgKyBcIidcIik7XG4gICAgfVxufVxuLyoqXG5Db25zdHJ1Y3QgYW4gTkZBIGZyb20gYW4gZXhwcmVzc2lvbiBhcyByZXR1cm5lZCBieSB0aGUgcGFyc2VyLiBUaGVcbk5GQSBpcyByZXByZXNlbnRlZCBhcyBhbiBhcnJheSBvZiBzdGF0ZXMsIHdoaWNoIGFyZSB0aGVtc2VsdmVzXG5hcnJheXMgb2YgZWRnZXMsIHdoaWNoIGFyZSBge3Rlcm0sIHRvfWAgb2JqZWN0cy4gVGhlIGZpcnN0IHN0YXRlIGlzXG50aGUgZW50cnkgc3RhdGUgYW5kIHRoZSBsYXN0IG5vZGUgaXMgdGhlIHN1Y2Nlc3Mgc3RhdGUuXG5cbk5vdGUgdGhhdCB1bmxpa2UgdHlwaWNhbCBORkFzLCB0aGUgZWRnZSBvcmRlcmluZyBpbiB0aGlzIG9uZSBpc1xuc2lnbmlmaWNhbnQsIGluIHRoYXQgaXQgaXMgdXNlZCB0byBjb250cnVjdCBmaWxsZXIgY29udGVudCB3aGVuXG5uZWNlc3NhcnkuXG4qL1xuZnVuY3Rpb24gbmZhKGV4cHIpIHtcbiAgICBsZXQgbmZhID0gW1tdXTtcbiAgICBjb25uZWN0KGNvbXBpbGUoZXhwciwgMCksIG5vZGUoKSk7XG4gICAgcmV0dXJuIG5mYTtcbiAgICBmdW5jdGlvbiBub2RlKCkgeyByZXR1cm4gbmZhLnB1c2goW10pIC0gMTsgfVxuICAgIGZ1bmN0aW9uIGVkZ2UoZnJvbSwgdG8sIHRlcm0pIHtcbiAgICAgICAgbGV0IGVkZ2UgPSB7IHRlcm0sIHRvIH07XG4gICAgICAgIG5mYVtmcm9tXS5wdXNoKGVkZ2UpO1xuICAgICAgICByZXR1cm4gZWRnZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gY29ubmVjdChlZGdlcywgdG8pIHtcbiAgICAgICAgZWRnZXMuZm9yRWFjaChlZGdlID0+IGVkZ2UudG8gPSB0byk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNvbXBpbGUoZXhwciwgZnJvbSkge1xuICAgICAgICBpZiAoZXhwci50eXBlID09IFwiY2hvaWNlXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBleHByLmV4cHJzLnJlZHVjZSgob3V0LCBleHByKSA9PiBvdXQuY29uY2F0KGNvbXBpbGUoZXhwciwgZnJvbSkpLCBbXSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZXhwci50eXBlID09IFwic2VxXCIpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOzsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IG5leHQgPSBjb21waWxlKGV4cHIuZXhwcnNbaV0sIGZyb20pO1xuICAgICAgICAgICAgICAgIGlmIChpID09IGV4cHIuZXhwcnMubGVuZ3RoIC0gMSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgICAgICAgICAgY29ubmVjdChuZXh0LCBmcm9tID0gbm9kZSgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChleHByLnR5cGUgPT0gXCJzdGFyXCIpIHtcbiAgICAgICAgICAgIGxldCBsb29wID0gbm9kZSgpO1xuICAgICAgICAgICAgZWRnZShmcm9tLCBsb29wKTtcbiAgICAgICAgICAgIGNvbm5lY3QoY29tcGlsZShleHByLmV4cHIsIGxvb3ApLCBsb29wKTtcbiAgICAgICAgICAgIHJldHVybiBbZWRnZShsb29wKV07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZXhwci50eXBlID09IFwicGx1c1wiKSB7XG4gICAgICAgICAgICBsZXQgbG9vcCA9IG5vZGUoKTtcbiAgICAgICAgICAgIGNvbm5lY3QoY29tcGlsZShleHByLmV4cHIsIGZyb20pLCBsb29wKTtcbiAgICAgICAgICAgIGNvbm5lY3QoY29tcGlsZShleHByLmV4cHIsIGxvb3ApLCBsb29wKTtcbiAgICAgICAgICAgIHJldHVybiBbZWRnZShsb29wKV07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZXhwci50eXBlID09IFwib3B0XCIpIHtcbiAgICAgICAgICAgIHJldHVybiBbZWRnZShmcm9tKV0uY29uY2F0KGNvbXBpbGUoZXhwci5leHByLCBmcm9tKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZXhwci50eXBlID09IFwicmFuZ2VcIikge1xuICAgICAgICAgICAgbGV0IGN1ciA9IGZyb207XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGV4cHIubWluOyBpKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgbmV4dCA9IG5vZGUoKTtcbiAgICAgICAgICAgICAgICBjb25uZWN0KGNvbXBpbGUoZXhwci5leHByLCBjdXIpLCBuZXh0KTtcbiAgICAgICAgICAgICAgICBjdXIgPSBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGV4cHIubWF4ID09IC0xKSB7XG4gICAgICAgICAgICAgICAgY29ubmVjdChjb21waWxlKGV4cHIuZXhwciwgY3VyKSwgY3VyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSBleHByLm1pbjsgaSA8IGV4cHIubWF4OyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG5leHQgPSBub2RlKCk7XG4gICAgICAgICAgICAgICAgICAgIGVkZ2UoY3VyLCBuZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgY29ubmVjdChjb21waWxlKGV4cHIuZXhwciwgY3VyKSwgbmV4dCk7XG4gICAgICAgICAgICAgICAgICAgIGN1ciA9IG5leHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFtlZGdlKGN1cildO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGV4cHIudHlwZSA9PSBcIm5hbWVcIikge1xuICAgICAgICAgICAgcmV0dXJuIFtlZGdlKGZyb20sIHVuZGVmaW5lZCwgZXhwci52YWx1ZSldO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBleHByIHR5cGVcIik7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBjbXAoYSwgYikgeyByZXR1cm4gYiAtIGE7IH1cbi8vIEdldCB0aGUgc2V0IG9mIG5vZGVzIHJlYWNoYWJsZSBieSBudWxsIGVkZ2VzIGZyb20gYG5vZGVgLiBPbWl0XG4vLyBub2RlcyB3aXRoIG9ubHkgYSBzaW5nbGUgbnVsbC1vdXQtZWRnZSwgc2luY2UgdGhleSBtYXkgbGVhZCB0b1xuLy8gbmVlZGxlc3MgZHVwbGljYXRlZCBub2Rlcy5cbmZ1bmN0aW9uIG51bGxGcm9tKG5mYSwgbm9kZSkge1xuICAgIGxldCByZXN1bHQgPSBbXTtcbiAgICBzY2FuKG5vZGUpO1xuICAgIHJldHVybiByZXN1bHQuc29ydChjbXApO1xuICAgIGZ1bmN0aW9uIHNjYW4obm9kZSkge1xuICAgICAgICBsZXQgZWRnZXMgPSBuZmFbbm9kZV07XG4gICAgICAgIGlmIChlZGdlcy5sZW5ndGggPT0gMSAmJiAhZWRnZXNbMF0udGVybSlcbiAgICAgICAgICAgIHJldHVybiBzY2FuKGVkZ2VzWzBdLnRvKTtcbiAgICAgICAgcmVzdWx0LnB1c2gobm9kZSk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZWRnZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCB7IHRlcm0sIHRvIH0gPSBlZGdlc1tpXTtcbiAgICAgICAgICAgIGlmICghdGVybSAmJiByZXN1bHQuaW5kZXhPZih0bykgPT0gLTEpXG4gICAgICAgICAgICAgICAgc2Nhbih0byk7XG4gICAgICAgIH1cbiAgICB9XG59XG4vLyBDb21waWxlcyBhbiBORkEgYXMgcHJvZHVjZWQgYnkgYG5mYWAgaW50byBhIERGQSwgbW9kZWxlZCBhcyBhIHNldFxuLy8gb2Ygc3RhdGUgb2JqZWN0cyAoYENvbnRlbnRNYXRjaGAgaW5zdGFuY2VzKSB3aXRoIHRyYW5zaXRpb25zXG4vLyBiZXR3ZWVuIHRoZW0uXG5mdW5jdGlvbiBkZmEobmZhKSB7XG4gICAgbGV0IGxhYmVsZWQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHJldHVybiBleHBsb3JlKG51bGxGcm9tKG5mYSwgMCkpO1xuICAgIGZ1bmN0aW9uIGV4cGxvcmUoc3RhdGVzKSB7XG4gICAgICAgIGxldCBvdXQgPSBbXTtcbiAgICAgICAgc3RhdGVzLmZvckVhY2gobm9kZSA9PiB7XG4gICAgICAgICAgICBuZmFbbm9kZV0uZm9yRWFjaCgoeyB0ZXJtLCB0byB9KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCF0ZXJtKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgbGV0IHNldDtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG91dC5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgICAgICAgICAgaWYgKG91dFtpXVswXSA9PSB0ZXJtKVxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0ID0gb3V0W2ldWzFdO1xuICAgICAgICAgICAgICAgIG51bGxGcm9tKG5mYSwgdG8pLmZvckVhY2gobm9kZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghc2V0KVxuICAgICAgICAgICAgICAgICAgICAgICAgb3V0LnB1c2goW3Rlcm0sIHNldCA9IFtdXSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZXQuaW5kZXhPZihub2RlKSA9PSAtMSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldC5wdXNoKG5vZGUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBsZXQgc3RhdGUgPSBsYWJlbGVkW3N0YXRlcy5qb2luKFwiLFwiKV0gPSBuZXcgQ29udGVudE1hdGNoKHN0YXRlcy5pbmRleE9mKG5mYS5sZW5ndGggLSAxKSA+IC0xKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvdXQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBzdGF0ZXMgPSBvdXRbaV1bMV0uc29ydChjbXApO1xuICAgICAgICAgICAgc3RhdGUubmV4dC5wdXNoKHsgdHlwZTogb3V0W2ldWzBdLCBuZXh0OiBsYWJlbGVkW3N0YXRlcy5qb2luKFwiLFwiKV0gfHwgZXhwbG9yZShzdGF0ZXMpIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9XG59XG5mdW5jdGlvbiBjaGVja0ZvckRlYWRFbmRzKG1hdGNoLCBzdHJlYW0pIHtcbiAgICBmb3IgKGxldCBpID0gMCwgd29yayA9IFttYXRjaF07IGkgPCB3b3JrLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCBzdGF0ZSA9IHdvcmtbaV0sIGRlYWQgPSAhc3RhdGUudmFsaWRFbmQsIG5vZGVzID0gW107XG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgc3RhdGUubmV4dC5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgbGV0IHsgdHlwZSwgbmV4dCB9ID0gc3RhdGUubmV4dFtqXTtcbiAgICAgICAgICAgIG5vZGVzLnB1c2godHlwZS5uYW1lKTtcbiAgICAgICAgICAgIGlmIChkZWFkICYmICEodHlwZS5pc1RleHQgfHwgdHlwZS5oYXNSZXF1aXJlZEF0dHJzKCkpKVxuICAgICAgICAgICAgICAgIGRlYWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmICh3b3JrLmluZGV4T2YobmV4dCkgPT0gLTEpXG4gICAgICAgICAgICAgICAgd29yay5wdXNoKG5leHQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkZWFkKVxuICAgICAgICAgICAgc3RyZWFtLmVycihcIk9ubHkgbm9uLWdlbmVyYXRhYmxlIG5vZGVzIChcIiArIG5vZGVzLmpvaW4oXCIsIFwiKSArIFwiKSBpbiBhIHJlcXVpcmVkIHBvc2l0aW9uIChzZWUgaHR0cHM6Ly9wcm9zZW1pcnJvci5uZXQvZG9jcy9ndWlkZS8jZ2VuZXJhdGFibGUpXCIpO1xuICAgIH1cbn1cblxuLy8gRm9yIG5vZGUgdHlwZXMgd2hlcmUgYWxsIGF0dHJzIGhhdmUgYSBkZWZhdWx0IHZhbHVlIChvciB3aGljaCBkb24ndFxuLy8gaGF2ZSBhbnkgYXR0cmlidXRlcyksIGJ1aWxkIHVwIGEgc2luZ2xlIHJldXNhYmxlIGRlZmF1bHQgYXR0cmlidXRlXG4vLyBvYmplY3QsIGFuZCB1c2UgaXQgZm9yIGFsbCBub2RlcyB0aGF0IGRvbid0IHNwZWNpZnkgc3BlY2lmaWNcbi8vIGF0dHJpYnV0ZXMuXG5mdW5jdGlvbiBkZWZhdWx0QXR0cnMoYXR0cnMpIHtcbiAgICBsZXQgZGVmYXVsdHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIGZvciAobGV0IGF0dHJOYW1lIGluIGF0dHJzKSB7XG4gICAgICAgIGxldCBhdHRyID0gYXR0cnNbYXR0ck5hbWVdO1xuICAgICAgICBpZiAoIWF0dHIuaGFzRGVmYXVsdClcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICBkZWZhdWx0c1thdHRyTmFtZV0gPSBhdHRyLmRlZmF1bHQ7XG4gICAgfVxuICAgIHJldHVybiBkZWZhdWx0cztcbn1cbmZ1bmN0aW9uIGNvbXB1dGVBdHRycyhhdHRycywgdmFsdWUpIHtcbiAgICBsZXQgYnVpbHQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIGZvciAobGV0IG5hbWUgaW4gYXR0cnMpIHtcbiAgICAgICAgbGV0IGdpdmVuID0gdmFsdWUgJiYgdmFsdWVbbmFtZV07XG4gICAgICAgIGlmIChnaXZlbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBsZXQgYXR0ciA9IGF0dHJzW25hbWVdO1xuICAgICAgICAgICAgaWYgKGF0dHIuaGFzRGVmYXVsdClcbiAgICAgICAgICAgICAgICBnaXZlbiA9IGF0dHIuZGVmYXVsdDtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIk5vIHZhbHVlIHN1cHBsaWVkIGZvciBhdHRyaWJ1dGUgXCIgKyBuYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBidWlsdFtuYW1lXSA9IGdpdmVuO1xuICAgIH1cbiAgICByZXR1cm4gYnVpbHQ7XG59XG5mdW5jdGlvbiBpbml0QXR0cnMoYXR0cnMpIHtcbiAgICBsZXQgcmVzdWx0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICBpZiAoYXR0cnMpXG4gICAgICAgIGZvciAobGV0IG5hbWUgaW4gYXR0cnMpXG4gICAgICAgICAgICByZXN1bHRbbmFtZV0gPSBuZXcgQXR0cmlidXRlKGF0dHJzW25hbWVdKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuLyoqXG5Ob2RlIHR5cGVzIGFyZSBvYmplY3RzIGFsbG9jYXRlZCBvbmNlIHBlciBgU2NoZW1hYCBhbmQgdXNlZCB0b1xuW3RhZ10oaHR0cHM6Ly9wcm9zZW1pcnJvci5uZXQvZG9jcy9yZWYvI21vZGVsLk5vZGUudHlwZSkgYE5vZGVgIGluc3RhbmNlcy4gVGhleSBjb250YWluIGluZm9ybWF0aW9uXG5hYm91dCB0aGUgbm9kZSB0eXBlLCBzdWNoIGFzIGl0cyBuYW1lIGFuZCB3aGF0IGtpbmQgb2Ygbm9kZSBpdFxucmVwcmVzZW50cy5cbiovXG5jbGFzcyBOb2RlVHlwZSB7XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAvKipcbiAgICBUaGUgbmFtZSB0aGUgbm9kZSB0eXBlIGhhcyBpbiB0aGlzIHNjaGVtYS5cbiAgICAqL1xuICAgIG5hbWUsIFxuICAgIC8qKlxuICAgIEEgbGluayBiYWNrIHRvIHRoZSBgU2NoZW1hYCB0aGUgbm9kZSB0eXBlIGJlbG9uZ3MgdG8uXG4gICAgKi9cbiAgICBzY2hlbWEsIFxuICAgIC8qKlxuICAgIFRoZSBzcGVjIHRoYXQgdGhpcyB0eXBlIGlzIGJhc2VkIG9uXG4gICAgKi9cbiAgICBzcGVjKSB7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMuc2NoZW1hID0gc2NoZW1hO1xuICAgICAgICB0aGlzLnNwZWMgPSBzcGVjO1xuICAgICAgICAvKipcbiAgICAgICAgVGhlIHNldCBvZiBtYXJrcyBhbGxvd2VkIGluIHRoaXMgbm9kZS4gYG51bGxgIG1lYW5zIGFsbCBtYXJrc1xuICAgICAgICBhcmUgYWxsb3dlZC5cbiAgICAgICAgKi9cbiAgICAgICAgdGhpcy5tYXJrU2V0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5ncm91cHMgPSBzcGVjLmdyb3VwID8gc3BlYy5ncm91cC5zcGxpdChcIiBcIikgOiBbXTtcbiAgICAgICAgdGhpcy5hdHRycyA9IGluaXRBdHRycyhzcGVjLmF0dHJzKTtcbiAgICAgICAgdGhpcy5kZWZhdWx0QXR0cnMgPSBkZWZhdWx0QXR0cnModGhpcy5hdHRycyk7XG4gICAgICAgIHRoaXMuY29udGVudE1hdGNoID0gbnVsbDtcbiAgICAgICAgdGhpcy5pbmxpbmVDb250ZW50ID0gbnVsbDtcbiAgICAgICAgdGhpcy5pc0Jsb2NrID0gIShzcGVjLmlubGluZSB8fCBuYW1lID09IFwidGV4dFwiKTtcbiAgICAgICAgdGhpcy5pc1RleHQgPSBuYW1lID09IFwidGV4dFwiO1xuICAgIH1cbiAgICAvKipcbiAgICBUcnVlIGlmIHRoaXMgaXMgYW4gaW5saW5lIHR5cGUuXG4gICAgKi9cbiAgICBnZXQgaXNJbmxpbmUoKSB7IHJldHVybiAhdGhpcy5pc0Jsb2NrOyB9XG4gICAgLyoqXG4gICAgVHJ1ZSBpZiB0aGlzIGlzIGEgdGV4dGJsb2NrIHR5cGUsIGEgYmxvY2sgdGhhdCBjb250YWlucyBpbmxpbmVcbiAgICBjb250ZW50LlxuICAgICovXG4gICAgZ2V0IGlzVGV4dGJsb2NrKCkgeyByZXR1cm4gdGhpcy5pc0Jsb2NrICYmIHRoaXMuaW5saW5lQ29udGVudDsgfVxuICAgIC8qKlxuICAgIFRydWUgZm9yIG5vZGUgdHlwZXMgdGhhdCBhbGxvdyBubyBjb250ZW50LlxuICAgICovXG4gICAgZ2V0IGlzTGVhZigpIHsgcmV0dXJuIHRoaXMuY29udGVudE1hdGNoID09IENvbnRlbnRNYXRjaC5lbXB0eTsgfVxuICAgIC8qKlxuICAgIFRydWUgd2hlbiB0aGlzIG5vZGUgaXMgYW4gYXRvbSwgaS5lLiB3aGVuIGl0IGRvZXMgbm90IGhhdmVcbiAgICBkaXJlY3RseSBlZGl0YWJsZSBjb250ZW50LlxuICAgICovXG4gICAgZ2V0IGlzQXRvbSgpIHsgcmV0dXJuIHRoaXMuaXNMZWFmIHx8ICEhdGhpcy5zcGVjLmF0b207IH1cbiAgICAvKipcbiAgICBUaGUgbm9kZSB0eXBlJ3MgW3doaXRlc3BhY2VdKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyNtb2RlbC5Ob2RlU3BlYy53aGl0ZXNwYWNlKSBvcHRpb24uXG4gICAgKi9cbiAgICBnZXQgd2hpdGVzcGFjZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3BlYy53aGl0ZXNwYWNlIHx8ICh0aGlzLnNwZWMuY29kZSA/IFwicHJlXCIgOiBcIm5vcm1hbFwiKTtcbiAgICB9XG4gICAgLyoqXG4gICAgVGVsbHMgeW91IHdoZXRoZXIgdGhpcyBub2RlIHR5cGUgaGFzIGFueSByZXF1aXJlZCBhdHRyaWJ1dGVzLlxuICAgICovXG4gICAgaGFzUmVxdWlyZWRBdHRycygpIHtcbiAgICAgICAgZm9yIChsZXQgbiBpbiB0aGlzLmF0dHJzKVxuICAgICAgICAgICAgaWYgKHRoaXMuYXR0cnNbbl0uaXNSZXF1aXJlZClcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvKipcbiAgICBJbmRpY2F0ZXMgd2hldGhlciB0aGlzIG5vZGUgYWxsb3dzIHNvbWUgb2YgdGhlIHNhbWUgY29udGVudCBhc1xuICAgIHRoZSBnaXZlbiBub2RlIHR5cGUuXG4gICAgKi9cbiAgICBjb21wYXRpYmxlQ29udGVudChvdGhlcikge1xuICAgICAgICByZXR1cm4gdGhpcyA9PSBvdGhlciB8fCB0aGlzLmNvbnRlbnRNYXRjaC5jb21wYXRpYmxlKG90aGVyLmNvbnRlbnRNYXRjaCk7XG4gICAgfVxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgY29tcHV0ZUF0dHJzKGF0dHJzKSB7XG4gICAgICAgIGlmICghYXR0cnMgJiYgdGhpcy5kZWZhdWx0QXR0cnMpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kZWZhdWx0QXR0cnM7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHJldHVybiBjb21wdXRlQXR0cnModGhpcy5hdHRycywgYXR0cnMpO1xuICAgIH1cbiAgICAvKipcbiAgICBDcmVhdGUgYSBgTm9kZWAgb2YgdGhpcyB0eXBlLiBUaGUgZ2l2ZW4gYXR0cmlidXRlcyBhcmVcbiAgICBjaGVja2VkIGFuZCBkZWZhdWx0ZWQgKHlvdSBjYW4gcGFzcyBgbnVsbGAgdG8gdXNlIHRoZSB0eXBlJ3NcbiAgICBkZWZhdWx0cyBlbnRpcmVseSwgaWYgbm8gcmVxdWlyZWQgYXR0cmlidXRlcyBleGlzdCkuIGBjb250ZW50YFxuICAgIG1heSBiZSBhIGBGcmFnbWVudGAsIGEgbm9kZSwgYW4gYXJyYXkgb2Ygbm9kZXMsIG9yXG4gICAgYG51bGxgLiBTaW1pbGFybHkgYG1hcmtzYCBtYXkgYmUgYG51bGxgIHRvIGRlZmF1bHQgdG8gdGhlIGVtcHR5XG4gICAgc2V0IG9mIG1hcmtzLlxuICAgICovXG4gICAgY3JlYXRlKGF0dHJzID0gbnVsbCwgY29udGVudCwgbWFya3MpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNUZXh0KVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm9kZVR5cGUuY3JlYXRlIGNhbid0IGNvbnN0cnVjdCB0ZXh0IG5vZGVzXCIpO1xuICAgICAgICByZXR1cm4gbmV3IE5vZGUodGhpcywgdGhpcy5jb21wdXRlQXR0cnMoYXR0cnMpLCBGcmFnbWVudC5mcm9tKGNvbnRlbnQpLCBNYXJrLnNldEZyb20obWFya3MpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgTGlrZSBbYGNyZWF0ZWBdKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyNtb2RlbC5Ob2RlVHlwZS5jcmVhdGUpLCBidXQgY2hlY2sgdGhlIGdpdmVuIGNvbnRlbnRcbiAgICBhZ2FpbnN0IHRoZSBub2RlIHR5cGUncyBjb250ZW50IHJlc3RyaWN0aW9ucywgYW5kIHRocm93IGFuIGVycm9yXG4gICAgaWYgaXQgZG9lc24ndCBtYXRjaC5cbiAgICAqL1xuICAgIGNyZWF0ZUNoZWNrZWQoYXR0cnMgPSBudWxsLCBjb250ZW50LCBtYXJrcykge1xuICAgICAgICBjb250ZW50ID0gRnJhZ21lbnQuZnJvbShjb250ZW50KTtcbiAgICAgICAgaWYgKCF0aGlzLnZhbGlkQ29udGVudChjb250ZW50KSlcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiSW52YWxpZCBjb250ZW50IGZvciBub2RlIFwiICsgdGhpcy5uYW1lKTtcbiAgICAgICAgcmV0dXJuIG5ldyBOb2RlKHRoaXMsIHRoaXMuY29tcHV0ZUF0dHJzKGF0dHJzKSwgY29udGVudCwgTWFyay5zZXRGcm9tKG1hcmtzKSk7XG4gICAgfVxuICAgIC8qKlxuICAgIExpa2UgW2BjcmVhdGVgXShodHRwczovL3Byb3NlbWlycm9yLm5ldC9kb2NzL3JlZi8jbW9kZWwuTm9kZVR5cGUuY3JlYXRlKSwgYnV0IHNlZSBpZiBpdCBpc1xuICAgIG5lY2Vzc2FyeSB0byBhZGQgbm9kZXMgdG8gdGhlIHN0YXJ0IG9yIGVuZCBvZiB0aGUgZ2l2ZW4gZnJhZ21lbnRcbiAgICB0byBtYWtlIGl0IGZpdCB0aGUgbm9kZS4gSWYgbm8gZml0dGluZyB3cmFwcGluZyBjYW4gYmUgZm91bmQsXG4gICAgcmV0dXJuIG51bGwuIE5vdGUgdGhhdCwgZHVlIHRvIHRoZSBmYWN0IHRoYXQgcmVxdWlyZWQgbm9kZXMgY2FuXG4gICAgYWx3YXlzIGJlIGNyZWF0ZWQsIHRoaXMgd2lsbCBhbHdheXMgc3VjY2VlZCBpZiB5b3UgcGFzcyBudWxsIG9yXG4gICAgYEZyYWdtZW50LmVtcHR5YCBhcyBjb250ZW50LlxuICAgICovXG4gICAgY3JlYXRlQW5kRmlsbChhdHRycyA9IG51bGwsIGNvbnRlbnQsIG1hcmtzKSB7XG4gICAgICAgIGF0dHJzID0gdGhpcy5jb21wdXRlQXR0cnMoYXR0cnMpO1xuICAgICAgICBjb250ZW50ID0gRnJhZ21lbnQuZnJvbShjb250ZW50KTtcbiAgICAgICAgaWYgKGNvbnRlbnQuc2l6ZSkge1xuICAgICAgICAgICAgbGV0IGJlZm9yZSA9IHRoaXMuY29udGVudE1hdGNoLmZpbGxCZWZvcmUoY29udGVudCk7XG4gICAgICAgICAgICBpZiAoIWJlZm9yZSlcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIGNvbnRlbnQgPSBiZWZvcmUuYXBwZW5kKGNvbnRlbnQpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBtYXRjaGVkID0gdGhpcy5jb250ZW50TWF0Y2gubWF0Y2hGcmFnbWVudChjb250ZW50KTtcbiAgICAgICAgbGV0IGFmdGVyID0gbWF0Y2hlZCAmJiBtYXRjaGVkLmZpbGxCZWZvcmUoRnJhZ21lbnQuZW1wdHksIHRydWUpO1xuICAgICAgICBpZiAoIWFmdGVyKVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIHJldHVybiBuZXcgTm9kZSh0aGlzLCBhdHRycywgY29udGVudC5hcHBlbmQoYWZ0ZXIpLCBNYXJrLnNldEZyb20obWFya3MpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgUmV0dXJucyB0cnVlIGlmIHRoZSBnaXZlbiBmcmFnbWVudCBpcyB2YWxpZCBjb250ZW50IGZvciB0aGlzIG5vZGVcbiAgICB0eXBlIHdpdGggdGhlIGdpdmVuIGF0dHJpYnV0ZXMuXG4gICAgKi9cbiAgICB2YWxpZENvbnRlbnQoY29udGVudCkge1xuICAgICAgICBsZXQgcmVzdWx0ID0gdGhpcy5jb250ZW50TWF0Y2gubWF0Y2hGcmFnbWVudChjb250ZW50KTtcbiAgICAgICAgaWYgKCFyZXN1bHQgfHwgIXJlc3VsdC52YWxpZEVuZClcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb250ZW50LmNoaWxkQ291bnQ7IGkrKylcbiAgICAgICAgICAgIGlmICghdGhpcy5hbGxvd3NNYXJrcyhjb250ZW50LmNoaWxkKGkpLm1hcmtzKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICAvKipcbiAgICBDaGVjayB3aGV0aGVyIHRoZSBnaXZlbiBtYXJrIHR5cGUgaXMgYWxsb3dlZCBpbiB0aGlzIG5vZGUuXG4gICAgKi9cbiAgICBhbGxvd3NNYXJrVHlwZShtYXJrVHlwZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5tYXJrU2V0ID09IG51bGwgfHwgdGhpcy5tYXJrU2V0LmluZGV4T2YobWFya1R5cGUpID4gLTE7XG4gICAgfVxuICAgIC8qKlxuICAgIFRlc3Qgd2hldGhlciB0aGUgZ2l2ZW4gc2V0IG9mIG1hcmtzIGFyZSBhbGxvd2VkIGluIHRoaXMgbm9kZS5cbiAgICAqL1xuICAgIGFsbG93c01hcmtzKG1hcmtzKSB7XG4gICAgICAgIGlmICh0aGlzLm1hcmtTZXQgPT0gbnVsbClcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1hcmtzLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgaWYgKCF0aGlzLmFsbG93c01hcmtUeXBlKG1hcmtzW2ldLnR5cGUpKVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIC8qKlxuICAgIFJlbW92ZXMgdGhlIG1hcmtzIHRoYXQgYXJlIG5vdCBhbGxvd2VkIGluIHRoaXMgbm9kZSBmcm9tIHRoZSBnaXZlbiBzZXQuXG4gICAgKi9cbiAgICBhbGxvd2VkTWFya3MobWFya3MpIHtcbiAgICAgICAgaWYgKHRoaXMubWFya1NldCA9PSBudWxsKVxuICAgICAgICAgICAgcmV0dXJuIG1hcmtzO1xuICAgICAgICBsZXQgY29weTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtYXJrcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmFsbG93c01hcmtUeXBlKG1hcmtzW2ldLnR5cGUpKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFjb3B5KVxuICAgICAgICAgICAgICAgICAgICBjb3B5ID0gbWFya3Muc2xpY2UoMCwgaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjb3B5KSB7XG4gICAgICAgICAgICAgICAgY29weS5wdXNoKG1hcmtzW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gIWNvcHkgPyBtYXJrcyA6IGNvcHkubGVuZ3RoID8gY29weSA6IE1hcmsubm9uZTtcbiAgICB9XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBzdGF0aWMgY29tcGlsZShub2Rlcywgc2NoZW1hKSB7XG4gICAgICAgIGxldCByZXN1bHQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICBub2Rlcy5mb3JFYWNoKChuYW1lLCBzcGVjKSA9PiByZXN1bHRbbmFtZV0gPSBuZXcgTm9kZVR5cGUobmFtZSwgc2NoZW1hLCBzcGVjKSk7XG4gICAgICAgIGxldCB0b3BUeXBlID0gc2NoZW1hLnNwZWMudG9wTm9kZSB8fCBcImRvY1wiO1xuICAgICAgICBpZiAoIXJlc3VsdFt0b3BUeXBlXSlcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiU2NoZW1hIGlzIG1pc3NpbmcgaXRzIHRvcCBub2RlIHR5cGUgKCdcIiArIHRvcFR5cGUgKyBcIicpXCIpO1xuICAgICAgICBpZiAoIXJlc3VsdC50ZXh0KVxuICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJFdmVyeSBzY2hlbWEgbmVlZHMgYSAndGV4dCcgdHlwZVwiKTtcbiAgICAgICAgZm9yIChsZXQgXyBpbiByZXN1bHQudGV4dC5hdHRycylcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiVGhlIHRleHQgbm9kZSB0eXBlIHNob3VsZCBub3QgaGF2ZSBhdHRyaWJ1dGVzXCIpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cbi8vIEF0dHJpYnV0ZSBkZXNjcmlwdG9yc1xuY2xhc3MgQXR0cmlidXRlIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuaGFzRGVmYXVsdCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvcHRpb25zLCBcImRlZmF1bHRcIik7XG4gICAgICAgIHRoaXMuZGVmYXVsdCA9IG9wdGlvbnMuZGVmYXVsdDtcbiAgICB9XG4gICAgZ2V0IGlzUmVxdWlyZWQoKSB7XG4gICAgICAgIHJldHVybiAhdGhpcy5oYXNEZWZhdWx0O1xuICAgIH1cbn1cbi8vIE1hcmtzXG4vKipcbkxpa2Ugbm9kZXMsIG1hcmtzICh3aGljaCBhcmUgYXNzb2NpYXRlZCB3aXRoIG5vZGVzIHRvIHNpZ25pZnlcbnRoaW5ncyBsaWtlIGVtcGhhc2lzIG9yIGJlaW5nIHBhcnQgb2YgYSBsaW5rKSBhcmVcblt0YWdnZWRdKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyNtb2RlbC5NYXJrLnR5cGUpIHdpdGggdHlwZSBvYmplY3RzLCB3aGljaCBhcmVcbmluc3RhbnRpYXRlZCBvbmNlIHBlciBgU2NoZW1hYC5cbiovXG5jbGFzcyBNYXJrVHlwZSB7XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAvKipcbiAgICBUaGUgbmFtZSBvZiB0aGUgbWFyayB0eXBlLlxuICAgICovXG4gICAgbmFtZSwgXG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICByYW5rLCBcbiAgICAvKipcbiAgICBUaGUgc2NoZW1hIHRoYXQgdGhpcyBtYXJrIHR5cGUgaW5zdGFuY2UgaXMgcGFydCBvZi5cbiAgICAqL1xuICAgIHNjaGVtYSwgXG4gICAgLyoqXG4gICAgVGhlIHNwZWMgb24gd2hpY2ggdGhlIHR5cGUgaXMgYmFzZWQuXG4gICAgKi9cbiAgICBzcGVjKSB7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMucmFuayA9IHJhbms7XG4gICAgICAgIHRoaXMuc2NoZW1hID0gc2NoZW1hO1xuICAgICAgICB0aGlzLnNwZWMgPSBzcGVjO1xuICAgICAgICB0aGlzLmF0dHJzID0gaW5pdEF0dHJzKHNwZWMuYXR0cnMpO1xuICAgICAgICB0aGlzLmV4Y2x1ZGVkID0gbnVsbDtcbiAgICAgICAgbGV0IGRlZmF1bHRzID0gZGVmYXVsdEF0dHJzKHRoaXMuYXR0cnMpO1xuICAgICAgICB0aGlzLmluc3RhbmNlID0gZGVmYXVsdHMgPyBuZXcgTWFyayh0aGlzLCBkZWZhdWx0cykgOiBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICBDcmVhdGUgYSBtYXJrIG9mIHRoaXMgdHlwZS4gYGF0dHJzYCBtYXkgYmUgYG51bGxgIG9yIGFuIG9iamVjdFxuICAgIGNvbnRhaW5pbmcgb25seSBzb21lIG9mIHRoZSBtYXJrJ3MgYXR0cmlidXRlcy4gVGhlIG90aGVycywgaWZcbiAgICB0aGV5IGhhdmUgZGVmYXVsdHMsIHdpbGwgYmUgYWRkZWQuXG4gICAgKi9cbiAgICBjcmVhdGUoYXR0cnMgPSBudWxsKSB7XG4gICAgICAgIGlmICghYXR0cnMgJiYgdGhpcy5pbnN0YW5jZSlcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmluc3RhbmNlO1xuICAgICAgICByZXR1cm4gbmV3IE1hcmsodGhpcywgY29tcHV0ZUF0dHJzKHRoaXMuYXR0cnMsIGF0dHJzKSk7XG4gICAgfVxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgc3RhdGljIGNvbXBpbGUobWFya3MsIHNjaGVtYSkge1xuICAgICAgICBsZXQgcmVzdWx0ID0gT2JqZWN0LmNyZWF0ZShudWxsKSwgcmFuayA9IDA7XG4gICAgICAgIG1hcmtzLmZvckVhY2goKG5hbWUsIHNwZWMpID0+IHJlc3VsdFtuYW1lXSA9IG5ldyBNYXJrVHlwZShuYW1lLCByYW5rKyssIHNjaGVtYSwgc3BlYykpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICAvKipcbiAgICBXaGVuIHRoZXJlIGlzIGEgbWFyayBvZiB0aGlzIHR5cGUgaW4gdGhlIGdpdmVuIHNldCwgYSBuZXcgc2V0XG4gICAgd2l0aG91dCBpdCBpcyByZXR1cm5lZC4gT3RoZXJ3aXNlLCB0aGUgaW5wdXQgc2V0IGlzIHJldHVybmVkLlxuICAgICovXG4gICAgcmVtb3ZlRnJvbVNldChzZXQpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZXQubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICBpZiAoc2V0W2ldLnR5cGUgPT0gdGhpcykge1xuICAgICAgICAgICAgICAgIHNldCA9IHNldC5zbGljZSgwLCBpKS5jb25jYXQoc2V0LnNsaWNlKGkgKyAxKSk7XG4gICAgICAgICAgICAgICAgaS0tO1xuICAgICAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2V0O1xuICAgIH1cbiAgICAvKipcbiAgICBUZXN0cyB3aGV0aGVyIHRoZXJlIGlzIGEgbWFyayBvZiB0aGlzIHR5cGUgaW4gdGhlIGdpdmVuIHNldC5cbiAgICAqL1xuICAgIGlzSW5TZXQoc2V0KSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2V0Lmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgaWYgKHNldFtpXS50eXBlID09IHRoaXMpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNldFtpXTtcbiAgICB9XG4gICAgLyoqXG4gICAgUXVlcmllcyB3aGV0aGVyIGEgZ2l2ZW4gbWFyayB0eXBlIGlzXG4gICAgW2V4Y2x1ZGVkXShodHRwczovL3Byb3NlbWlycm9yLm5ldC9kb2NzL3JlZi8jbW9kZWwuTWFya1NwZWMuZXhjbHVkZXMpIGJ5IHRoaXMgb25lLlxuICAgICovXG4gICAgZXhjbHVkZXMob3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZXhjbHVkZWQuaW5kZXhPZihvdGhlcikgPiAtMTtcbiAgICB9XG59XG4vKipcbkEgZG9jdW1lbnQgc2NoZW1hLiBIb2xkcyBbbm9kZV0oaHR0cHM6Ly9wcm9zZW1pcnJvci5uZXQvZG9jcy9yZWYvI21vZGVsLk5vZGVUeXBlKSBhbmQgW21hcmtcbnR5cGVdKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyNtb2RlbC5NYXJrVHlwZSkgb2JqZWN0cyBmb3IgdGhlIG5vZGVzIGFuZCBtYXJrcyB0aGF0IG1heVxub2NjdXIgaW4gY29uZm9ybWluZyBkb2N1bWVudHMsIGFuZCBwcm92aWRlcyBmdW5jdGlvbmFsaXR5IGZvclxuY3JlYXRpbmcgYW5kIGRlc2VyaWFsaXppbmcgc3VjaCBkb2N1bWVudHMuXG5cbldoZW4gZ2l2ZW4sIHRoZSB0eXBlIHBhcmFtZXRlcnMgcHJvdmlkZSB0aGUgbmFtZXMgb2YgdGhlIG5vZGVzIGFuZFxubWFya3MgaW4gdGhpcyBzY2hlbWEuXG4qL1xuY2xhc3MgU2NoZW1hIHtcbiAgICAvKipcbiAgICBDb25zdHJ1Y3QgYSBzY2hlbWEgZnJvbSBhIHNjaGVtYSBbc3BlY2lmaWNhdGlvbl0oaHR0cHM6Ly9wcm9zZW1pcnJvci5uZXQvZG9jcy9yZWYvI21vZGVsLlNjaGVtYVNwZWMpLlxuICAgICovXG4gICAgY29uc3RydWN0b3Ioc3BlYykge1xuICAgICAgICAvKipcbiAgICAgICAgQW4gb2JqZWN0IGZvciBzdG9yaW5nIHdoYXRldmVyIHZhbHVlcyBtb2R1bGVzIG1heSB3YW50IHRvXG4gICAgICAgIGNvbXB1dGUgYW5kIGNhY2hlIHBlciBzY2hlbWEuIChJZiB5b3Ugd2FudCB0byBzdG9yZSBzb21ldGhpbmdcbiAgICAgICAgaW4gaXQsIHRyeSB0byB1c2UgcHJvcGVydHkgbmFtZXMgdW5saWtlbHkgdG8gY2xhc2guKVxuICAgICAgICAqL1xuICAgICAgICB0aGlzLmNhY2hlZCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIHRoaXMuc3BlYyA9IHtcbiAgICAgICAgICAgIG5vZGVzOiBPcmRlcmVkTWFwLmZyb20oc3BlYy5ub2RlcyksXG4gICAgICAgICAgICBtYXJrczogT3JkZXJlZE1hcC5mcm9tKHNwZWMubWFya3MgfHwge30pLFxuICAgICAgICAgICAgdG9wTm9kZTogc3BlYy50b3BOb2RlXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMubm9kZXMgPSBOb2RlVHlwZS5jb21waWxlKHRoaXMuc3BlYy5ub2RlcywgdGhpcyk7XG4gICAgICAgIHRoaXMubWFya3MgPSBNYXJrVHlwZS5jb21waWxlKHRoaXMuc3BlYy5tYXJrcywgdGhpcyk7XG4gICAgICAgIGxldCBjb250ZW50RXhwckNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgZm9yIChsZXQgcHJvcCBpbiB0aGlzLm5vZGVzKSB7XG4gICAgICAgICAgICBpZiAocHJvcCBpbiB0aGlzLm1hcmtzKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKHByb3AgKyBcIiBjYW4gbm90IGJlIGJvdGggYSBub2RlIGFuZCBhIG1hcmtcIik7XG4gICAgICAgICAgICBsZXQgdHlwZSA9IHRoaXMubm9kZXNbcHJvcF0sIGNvbnRlbnRFeHByID0gdHlwZS5zcGVjLmNvbnRlbnQgfHwgXCJcIiwgbWFya0V4cHIgPSB0eXBlLnNwZWMubWFya3M7XG4gICAgICAgICAgICB0eXBlLmNvbnRlbnRNYXRjaCA9IGNvbnRlbnRFeHByQ2FjaGVbY29udGVudEV4cHJdIHx8XG4gICAgICAgICAgICAgICAgKGNvbnRlbnRFeHByQ2FjaGVbY29udGVudEV4cHJdID0gQ29udGVudE1hdGNoLnBhcnNlKGNvbnRlbnRFeHByLCB0aGlzLm5vZGVzKSk7XG4gICAgICAgICAgICB0eXBlLmlubGluZUNvbnRlbnQgPSB0eXBlLmNvbnRlbnRNYXRjaC5pbmxpbmVDb250ZW50O1xuICAgICAgICAgICAgdHlwZS5tYXJrU2V0ID0gbWFya0V4cHIgPT0gXCJfXCIgPyBudWxsIDpcbiAgICAgICAgICAgICAgICBtYXJrRXhwciA/IGdhdGhlck1hcmtzKHRoaXMsIG1hcmtFeHByLnNwbGl0KFwiIFwiKSkgOlxuICAgICAgICAgICAgICAgICAgICBtYXJrRXhwciA9PSBcIlwiIHx8ICF0eXBlLmlubGluZUNvbnRlbnQgPyBbXSA6IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgcHJvcCBpbiB0aGlzLm1hcmtzKSB7XG4gICAgICAgICAgICBsZXQgdHlwZSA9IHRoaXMubWFya3NbcHJvcF0sIGV4Y2wgPSB0eXBlLnNwZWMuZXhjbHVkZXM7XG4gICAgICAgICAgICB0eXBlLmV4Y2x1ZGVkID0gZXhjbCA9PSBudWxsID8gW3R5cGVdIDogZXhjbCA9PSBcIlwiID8gW10gOiBnYXRoZXJNYXJrcyh0aGlzLCBleGNsLnNwbGl0KFwiIFwiKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5ub2RlRnJvbUpTT04gPSB0aGlzLm5vZGVGcm9tSlNPTi5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLm1hcmtGcm9tSlNPTiA9IHRoaXMubWFya0Zyb21KU09OLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMudG9wTm9kZVR5cGUgPSB0aGlzLm5vZGVzW3RoaXMuc3BlYy50b3BOb2RlIHx8IFwiZG9jXCJdO1xuICAgICAgICB0aGlzLmNhY2hlZC53cmFwcGluZ3MgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIH1cbiAgICAvKipcbiAgICBDcmVhdGUgYSBub2RlIGluIHRoaXMgc2NoZW1hLiBUaGUgYHR5cGVgIG1heSBiZSBhIHN0cmluZyBvciBhXG4gICAgYE5vZGVUeXBlYCBpbnN0YW5jZS4gQXR0cmlidXRlcyB3aWxsIGJlIGV4dGVuZGVkIHdpdGggZGVmYXVsdHMsXG4gICAgYGNvbnRlbnRgIG1heSBiZSBhIGBGcmFnbWVudGAsIGBudWxsYCwgYSBgTm9kZWAsIG9yIGFuIGFycmF5IG9mXG4gICAgbm9kZXMuXG4gICAgKi9cbiAgICBub2RlKHR5cGUsIGF0dHJzID0gbnVsbCwgY29udGVudCwgbWFya3MpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0eXBlID09IFwic3RyaW5nXCIpXG4gICAgICAgICAgICB0eXBlID0gdGhpcy5ub2RlVHlwZSh0eXBlKTtcbiAgICAgICAgZWxzZSBpZiAoISh0eXBlIGluc3RhbmNlb2YgTm9kZVR5cGUpKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJJbnZhbGlkIG5vZGUgdHlwZTogXCIgKyB0eXBlKTtcbiAgICAgICAgZWxzZSBpZiAodHlwZS5zY2hlbWEgIT0gdGhpcylcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiTm9kZSB0eXBlIGZyb20gZGlmZmVyZW50IHNjaGVtYSB1c2VkIChcIiArIHR5cGUubmFtZSArIFwiKVwiKTtcbiAgICAgICAgcmV0dXJuIHR5cGUuY3JlYXRlQ2hlY2tlZChhdHRycywgY29udGVudCwgbWFya3MpO1xuICAgIH1cbiAgICAvKipcbiAgICBDcmVhdGUgYSB0ZXh0IG5vZGUgaW4gdGhlIHNjaGVtYS4gRW1wdHkgdGV4dCBub2RlcyBhcmUgbm90XG4gICAgYWxsb3dlZC5cbiAgICAqL1xuICAgIHRleHQodGV4dCwgbWFya3MpIHtcbiAgICAgICAgbGV0IHR5cGUgPSB0aGlzLm5vZGVzLnRleHQ7XG4gICAgICAgIHJldHVybiBuZXcgVGV4dE5vZGUodHlwZSwgdHlwZS5kZWZhdWx0QXR0cnMsIHRleHQsIE1hcmsuc2V0RnJvbShtYXJrcykpO1xuICAgIH1cbiAgICAvKipcbiAgICBDcmVhdGUgYSBtYXJrIHdpdGggdGhlIGdpdmVuIHR5cGUgYW5kIGF0dHJpYnV0ZXMuXG4gICAgKi9cbiAgICBtYXJrKHR5cGUsIGF0dHJzKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdHlwZSA9PSBcInN0cmluZ1wiKVxuICAgICAgICAgICAgdHlwZSA9IHRoaXMubWFya3NbdHlwZV07XG4gICAgICAgIHJldHVybiB0eXBlLmNyZWF0ZShhdHRycyk7XG4gICAgfVxuICAgIC8qKlxuICAgIERlc2VyaWFsaXplIGEgbm9kZSBmcm9tIGl0cyBKU09OIHJlcHJlc2VudGF0aW9uLiBUaGlzIG1ldGhvZCBpc1xuICAgIGJvdW5kLlxuICAgICovXG4gICAgbm9kZUZyb21KU09OKGpzb24pIHtcbiAgICAgICAgcmV0dXJuIE5vZGUuZnJvbUpTT04odGhpcywganNvbik7XG4gICAgfVxuICAgIC8qKlxuICAgIERlc2VyaWFsaXplIGEgbWFyayBmcm9tIGl0cyBKU09OIHJlcHJlc2VudGF0aW9uLiBUaGlzIG1ldGhvZCBpc1xuICAgIGJvdW5kLlxuICAgICovXG4gICAgbWFya0Zyb21KU09OKGpzb24pIHtcbiAgICAgICAgcmV0dXJuIE1hcmsuZnJvbUpTT04odGhpcywganNvbik7XG4gICAgfVxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgbm9kZVR5cGUobmFtZSkge1xuICAgICAgICBsZXQgZm91bmQgPSB0aGlzLm5vZGVzW25hbWVdO1xuICAgICAgICBpZiAoIWZvdW5kKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJVbmtub3duIG5vZGUgdHlwZTogXCIgKyBuYW1lKTtcbiAgICAgICAgcmV0dXJuIGZvdW5kO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGdhdGhlck1hcmtzKHNjaGVtYSwgbWFya3MpIHtcbiAgICBsZXQgZm91bmQgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1hcmtzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCBuYW1lID0gbWFya3NbaV0sIG1hcmsgPSBzY2hlbWEubWFya3NbbmFtZV0sIG9rID0gbWFyaztcbiAgICAgICAgaWYgKG1hcmspIHtcbiAgICAgICAgICAgIGZvdW5kLnB1c2gobWFyayk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBmb3IgKGxldCBwcm9wIGluIHNjaGVtYS5tYXJrcykge1xuICAgICAgICAgICAgICAgIGxldCBtYXJrID0gc2NoZW1hLm1hcmtzW3Byb3BdO1xuICAgICAgICAgICAgICAgIGlmIChuYW1lID09IFwiX1wiIHx8IChtYXJrLnNwZWMuZ3JvdXAgJiYgbWFyay5zcGVjLmdyb3VwLnNwbGl0KFwiIFwiKS5pbmRleE9mKG5hbWUpID4gLTEpKVxuICAgICAgICAgICAgICAgICAgICBmb3VuZC5wdXNoKG9rID0gbWFyayk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFvaylcbiAgICAgICAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcihcIlVua25vd24gbWFyayB0eXBlOiAnXCIgKyBtYXJrc1tpXSArIFwiJ1wiKTtcbiAgICB9XG4gICAgcmV0dXJuIGZvdW5kO1xufVxuXG4vKipcbkEgRE9NIHBhcnNlciByZXByZXNlbnRzIGEgc3RyYXRlZ3kgZm9yIHBhcnNpbmcgRE9NIGNvbnRlbnQgaW50byBhXG5Qcm9zZU1pcnJvciBkb2N1bWVudCBjb25mb3JtaW5nIHRvIGEgZ2l2ZW4gc2NoZW1hLiBJdHMgYmVoYXZpb3IgaXNcbmRlZmluZWQgYnkgYW4gYXJyYXkgb2YgW3J1bGVzXShodHRwczovL3Byb3NlbWlycm9yLm5ldC9kb2NzL3JlZi8jbW9kZWwuUGFyc2VSdWxlKS5cbiovXG5jbGFzcyBET01QYXJzZXIge1xuICAgIC8qKlxuICAgIENyZWF0ZSBhIHBhcnNlciB0aGF0IHRhcmdldHMgdGhlIGdpdmVuIHNjaGVtYSwgdXNpbmcgdGhlIGdpdmVuXG4gICAgcGFyc2luZyBydWxlcy5cbiAgICAqL1xuICAgIGNvbnN0cnVjdG9yKFxuICAgIC8qKlxuICAgIFRoZSBzY2hlbWEgaW50byB3aGljaCB0aGUgcGFyc2VyIHBhcnNlcy5cbiAgICAqL1xuICAgIHNjaGVtYSwgXG4gICAgLyoqXG4gICAgVGhlIHNldCBvZiBbcGFyc2UgcnVsZXNdKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyNtb2RlbC5QYXJzZVJ1bGUpIHRoYXQgdGhlIHBhcnNlclxuICAgIHVzZXMsIGluIG9yZGVyIG9mIHByZWNlZGVuY2UuXG4gICAgKi9cbiAgICBydWxlcykge1xuICAgICAgICB0aGlzLnNjaGVtYSA9IHNjaGVtYTtcbiAgICAgICAgdGhpcy5ydWxlcyA9IHJ1bGVzO1xuICAgICAgICAvKipcbiAgICAgICAgQGludGVybmFsXG4gICAgICAgICovXG4gICAgICAgIHRoaXMudGFncyA9IFtdO1xuICAgICAgICAvKipcbiAgICAgICAgQGludGVybmFsXG4gICAgICAgICovXG4gICAgICAgIHRoaXMuc3R5bGVzID0gW107XG4gICAgICAgIHJ1bGVzLmZvckVhY2gocnVsZSA9PiB7XG4gICAgICAgICAgICBpZiAocnVsZS50YWcpXG4gICAgICAgICAgICAgICAgdGhpcy50YWdzLnB1c2gocnVsZSk7XG4gICAgICAgICAgICBlbHNlIGlmIChydWxlLnN0eWxlKVxuICAgICAgICAgICAgICAgIHRoaXMuc3R5bGVzLnB1c2gocnVsZSk7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBPbmx5IG5vcm1hbGl6ZSBsaXN0IGVsZW1lbnRzIHdoZW4gbGlzdHMgaW4gdGhlIHNjaGVtYSBjYW4ndCBkaXJlY3RseSBjb250YWluIHRoZW1zZWx2ZXNcbiAgICAgICAgdGhpcy5ub3JtYWxpemVMaXN0cyA9ICF0aGlzLnRhZ3Muc29tZShyID0+IHtcbiAgICAgICAgICAgIGlmICghL14odWx8b2wpXFxiLy50ZXN0KHIudGFnKSB8fCAhci5ub2RlKVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIGxldCBub2RlID0gc2NoZW1hLm5vZGVzW3Iubm9kZV07XG4gICAgICAgICAgICByZXR1cm4gbm9kZS5jb250ZW50TWF0Y2gubWF0Y2hUeXBlKG5vZGUpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgUGFyc2UgYSBkb2N1bWVudCBmcm9tIHRoZSBjb250ZW50IG9mIGEgRE9NIG5vZGUuXG4gICAgKi9cbiAgICBwYXJzZShkb20sIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBsZXQgY29udGV4dCA9IG5ldyBQYXJzZUNvbnRleHQodGhpcywgb3B0aW9ucywgZmFsc2UpO1xuICAgICAgICBjb250ZXh0LmFkZEFsbChkb20sIG9wdGlvbnMuZnJvbSwgb3B0aW9ucy50byk7XG4gICAgICAgIHJldHVybiBjb250ZXh0LmZpbmlzaCgpO1xuICAgIH1cbiAgICAvKipcbiAgICBQYXJzZXMgdGhlIGNvbnRlbnQgb2YgdGhlIGdpdmVuIERPTSBub2RlLCBsaWtlXG4gICAgW2BwYXJzZWBdKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyNtb2RlbC5ET01QYXJzZXIucGFyc2UpLCBhbmQgdGFrZXMgdGhlIHNhbWUgc2V0IG9mXG4gICAgb3B0aW9ucy4gQnV0IHVubGlrZSB0aGF0IG1ldGhvZCwgd2hpY2ggcHJvZHVjZXMgYSB3aG9sZSBub2RlLFxuICAgIHRoaXMgb25lIHJldHVybnMgYSBzbGljZSB0aGF0IGlzIG9wZW4gYXQgdGhlIHNpZGVzLCBtZWFuaW5nIHRoYXRcbiAgICB0aGUgc2NoZW1hIGNvbnN0cmFpbnRzIGFyZW4ndCBhcHBsaWVkIHRvIHRoZSBzdGFydCBvZiBub2RlcyB0b1xuICAgIHRoZSBsZWZ0IG9mIHRoZSBpbnB1dCBhbmQgdGhlIGVuZCBvZiBub2RlcyBhdCB0aGUgZW5kLlxuICAgICovXG4gICAgcGFyc2VTbGljZShkb20sIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBsZXQgY29udGV4dCA9IG5ldyBQYXJzZUNvbnRleHQodGhpcywgb3B0aW9ucywgdHJ1ZSk7XG4gICAgICAgIGNvbnRleHQuYWRkQWxsKGRvbSwgb3B0aW9ucy5mcm9tLCBvcHRpb25zLnRvKTtcbiAgICAgICAgcmV0dXJuIFNsaWNlLm1heE9wZW4oY29udGV4dC5maW5pc2goKSk7XG4gICAgfVxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgbWF0Y2hUYWcoZG9tLCBjb250ZXh0LCBhZnRlcikge1xuICAgICAgICBmb3IgKGxldCBpID0gYWZ0ZXIgPyB0aGlzLnRhZ3MuaW5kZXhPZihhZnRlcikgKyAxIDogMDsgaSA8IHRoaXMudGFncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IHJ1bGUgPSB0aGlzLnRhZ3NbaV07XG4gICAgICAgICAgICBpZiAobWF0Y2hlcyhkb20sIHJ1bGUudGFnKSAmJlxuICAgICAgICAgICAgICAgIChydWxlLm5hbWVzcGFjZSA9PT0gdW5kZWZpbmVkIHx8IGRvbS5uYW1lc3BhY2VVUkkgPT0gcnVsZS5uYW1lc3BhY2UpICYmXG4gICAgICAgICAgICAgICAgKCFydWxlLmNvbnRleHQgfHwgY29udGV4dC5tYXRjaGVzQ29udGV4dChydWxlLmNvbnRleHQpKSkge1xuICAgICAgICAgICAgICAgIGlmIChydWxlLmdldEF0dHJzKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCByZXN1bHQgPSBydWxlLmdldEF0dHJzKGRvbSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgPT09IGZhbHNlKVxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIHJ1bGUuYXR0cnMgPSByZXN1bHQgfHwgdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcnVsZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIG1hdGNoU3R5bGUocHJvcCwgdmFsdWUsIGNvbnRleHQsIGFmdGVyKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSBhZnRlciA/IHRoaXMuc3R5bGVzLmluZGV4T2YoYWZ0ZXIpICsgMSA6IDA7IGkgPCB0aGlzLnN0eWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IHJ1bGUgPSB0aGlzLnN0eWxlc1tpXSwgc3R5bGUgPSBydWxlLnN0eWxlO1xuICAgICAgICAgICAgaWYgKHN0eWxlLmluZGV4T2YocHJvcCkgIT0gMCB8fFxuICAgICAgICAgICAgICAgIHJ1bGUuY29udGV4dCAmJiAhY29udGV4dC5tYXRjaGVzQ29udGV4dChydWxlLmNvbnRleHQpIHx8XG4gICAgICAgICAgICAgICAgLy8gVGVzdCB0aGF0IHRoZSBzdHlsZSBzdHJpbmcgZWl0aGVyIHByZWNpc2VseSBtYXRjaGVzIHRoZSBwcm9wLFxuICAgICAgICAgICAgICAgIC8vIG9yIGhhcyBhbiAnPScgc2lnbiBhZnRlciB0aGUgcHJvcCwgZm9sbG93ZWQgYnkgdGhlIGdpdmVuXG4gICAgICAgICAgICAgICAgLy8gdmFsdWUuXG4gICAgICAgICAgICAgICAgc3R5bGUubGVuZ3RoID4gcHJvcC5sZW5ndGggJiZcbiAgICAgICAgICAgICAgICAgICAgKHN0eWxlLmNoYXJDb2RlQXQocHJvcC5sZW5ndGgpICE9IDYxIHx8IHN0eWxlLnNsaWNlKHByb3AubGVuZ3RoICsgMSkgIT0gdmFsdWUpKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgaWYgKHJ1bGUuZ2V0QXR0cnMpIHtcbiAgICAgICAgICAgICAgICBsZXQgcmVzdWx0ID0gcnVsZS5nZXRBdHRycyh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gZmFsc2UpXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIHJ1bGUuYXR0cnMgPSByZXN1bHQgfHwgdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJ1bGU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBzdGF0aWMgc2NoZW1hUnVsZXMoc2NoZW1hKSB7XG4gICAgICAgIGxldCByZXN1bHQgPSBbXTtcbiAgICAgICAgZnVuY3Rpb24gaW5zZXJ0KHJ1bGUpIHtcbiAgICAgICAgICAgIGxldCBwcmlvcml0eSA9IHJ1bGUucHJpb3JpdHkgPT0gbnVsbCA/IDUwIDogcnVsZS5wcmlvcml0eSwgaSA9IDA7XG4gICAgICAgICAgICBmb3IgKDsgaSA8IHJlc3VsdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGxldCBuZXh0ID0gcmVzdWx0W2ldLCBuZXh0UHJpb3JpdHkgPSBuZXh0LnByaW9yaXR5ID09IG51bGwgPyA1MCA6IG5leHQucHJpb3JpdHk7XG4gICAgICAgICAgICAgICAgaWYgKG5leHRQcmlvcml0eSA8IHByaW9yaXR5KVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlc3VsdC5zcGxpY2UoaSwgMCwgcnVsZSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgbmFtZSBpbiBzY2hlbWEubWFya3MpIHtcbiAgICAgICAgICAgIGxldCBydWxlcyA9IHNjaGVtYS5tYXJrc1tuYW1lXS5zcGVjLnBhcnNlRE9NO1xuICAgICAgICAgICAgaWYgKHJ1bGVzKVxuICAgICAgICAgICAgICAgIHJ1bGVzLmZvckVhY2gocnVsZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGluc2VydChydWxlID0gY29weShydWxlKSk7XG4gICAgICAgICAgICAgICAgICAgIHJ1bGUubWFyayA9IG5hbWU7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgbmFtZSBpbiBzY2hlbWEubm9kZXMpIHtcbiAgICAgICAgICAgIGxldCBydWxlcyA9IHNjaGVtYS5ub2Rlc1tuYW1lXS5zcGVjLnBhcnNlRE9NO1xuICAgICAgICAgICAgaWYgKHJ1bGVzKVxuICAgICAgICAgICAgICAgIHJ1bGVzLmZvckVhY2gocnVsZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGluc2VydChydWxlID0gY29weShydWxlKSk7XG4gICAgICAgICAgICAgICAgICAgIHJ1bGUubm9kZSA9IG5hbWU7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLyoqXG4gICAgQ29uc3RydWN0IGEgRE9NIHBhcnNlciB1c2luZyB0aGUgcGFyc2luZyBydWxlcyBsaXN0ZWQgaW4gYVxuICAgIHNjaGVtYSdzIFtub2RlIHNwZWNzXShodHRwczovL3Byb3NlbWlycm9yLm5ldC9kb2NzL3JlZi8jbW9kZWwuTm9kZVNwZWMucGFyc2VET00pLCByZW9yZGVyZWQgYnlcbiAgICBbcHJpb3JpdHldKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyNtb2RlbC5QYXJzZVJ1bGUucHJpb3JpdHkpLlxuICAgICovXG4gICAgc3RhdGljIGZyb21TY2hlbWEoc2NoZW1hKSB7XG4gICAgICAgIHJldHVybiBzY2hlbWEuY2FjaGVkLmRvbVBhcnNlciB8fFxuICAgICAgICAgICAgKHNjaGVtYS5jYWNoZWQuZG9tUGFyc2VyID0gbmV3IERPTVBhcnNlcihzY2hlbWEsIERPTVBhcnNlci5zY2hlbWFSdWxlcyhzY2hlbWEpKSk7XG4gICAgfVxufVxuY29uc3QgYmxvY2tUYWdzID0ge1xuICAgIGFkZHJlc3M6IHRydWUsIGFydGljbGU6IHRydWUsIGFzaWRlOiB0cnVlLCBibG9ja3F1b3RlOiB0cnVlLCBjYW52YXM6IHRydWUsXG4gICAgZGQ6IHRydWUsIGRpdjogdHJ1ZSwgZGw6IHRydWUsIGZpZWxkc2V0OiB0cnVlLCBmaWdjYXB0aW9uOiB0cnVlLCBmaWd1cmU6IHRydWUsXG4gICAgZm9vdGVyOiB0cnVlLCBmb3JtOiB0cnVlLCBoMTogdHJ1ZSwgaDI6IHRydWUsIGgzOiB0cnVlLCBoNDogdHJ1ZSwgaDU6IHRydWUsXG4gICAgaDY6IHRydWUsIGhlYWRlcjogdHJ1ZSwgaGdyb3VwOiB0cnVlLCBocjogdHJ1ZSwgbGk6IHRydWUsIG5vc2NyaXB0OiB0cnVlLCBvbDogdHJ1ZSxcbiAgICBvdXRwdXQ6IHRydWUsIHA6IHRydWUsIHByZTogdHJ1ZSwgc2VjdGlvbjogdHJ1ZSwgdGFibGU6IHRydWUsIHRmb290OiB0cnVlLCB1bDogdHJ1ZVxufTtcbmNvbnN0IGlnbm9yZVRhZ3MgPSB7XG4gICAgaGVhZDogdHJ1ZSwgbm9zY3JpcHQ6IHRydWUsIG9iamVjdDogdHJ1ZSwgc2NyaXB0OiB0cnVlLCBzdHlsZTogdHJ1ZSwgdGl0bGU6IHRydWVcbn07XG5jb25zdCBsaXN0VGFncyA9IHsgb2w6IHRydWUsIHVsOiB0cnVlIH07XG4vLyBVc2luZyBhIGJpdGZpZWxkIGZvciBub2RlIGNvbnRleHQgb3B0aW9uc1xuY29uc3QgT1BUX1BSRVNFUlZFX1dTID0gMSwgT1BUX1BSRVNFUlZFX1dTX0ZVTEwgPSAyLCBPUFRfT1BFTl9MRUZUID0gNDtcbmZ1bmN0aW9uIHdzT3B0aW9uc0Zvcih0eXBlLCBwcmVzZXJ2ZVdoaXRlc3BhY2UsIGJhc2UpIHtcbiAgICBpZiAocHJlc2VydmVXaGl0ZXNwYWNlICE9IG51bGwpXG4gICAgICAgIHJldHVybiAocHJlc2VydmVXaGl0ZXNwYWNlID8gT1BUX1BSRVNFUlZFX1dTIDogMCkgfFxuICAgICAgICAgICAgKHByZXNlcnZlV2hpdGVzcGFjZSA9PT0gXCJmdWxsXCIgPyBPUFRfUFJFU0VSVkVfV1NfRlVMTCA6IDApO1xuICAgIHJldHVybiB0eXBlICYmIHR5cGUud2hpdGVzcGFjZSA9PSBcInByZVwiID8gT1BUX1BSRVNFUlZFX1dTIHwgT1BUX1BSRVNFUlZFX1dTX0ZVTEwgOiBiYXNlICYgfk9QVF9PUEVOX0xFRlQ7XG59XG5jbGFzcyBOb2RlQ29udGV4dCB7XG4gICAgY29uc3RydWN0b3IodHlwZSwgYXR0cnMsIFxuICAgIC8vIE1hcmtzIGFwcGxpZWQgdG8gdGhpcyBub2RlIGl0c2VsZlxuICAgIG1hcmtzLCBcbiAgICAvLyBNYXJrcyB0aGF0IGNhbid0IGFwcGx5IGhlcmUsIGJ1dCB3aWxsIGJlIHVzZWQgaW4gY2hpbGRyZW4gaWYgcG9zc2libGVcbiAgICBwZW5kaW5nTWFya3MsIHNvbGlkLCBtYXRjaCwgb3B0aW9ucykge1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICB0aGlzLmF0dHJzID0gYXR0cnM7XG4gICAgICAgIHRoaXMubWFya3MgPSBtYXJrcztcbiAgICAgICAgdGhpcy5wZW5kaW5nTWFya3MgPSBwZW5kaW5nTWFya3M7XG4gICAgICAgIHRoaXMuc29saWQgPSBzb2xpZDtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5jb250ZW50ID0gW107XG4gICAgICAgIC8vIE1hcmtzIGFwcGxpZWQgdG8gdGhlIG5vZGUncyBjaGlsZHJlblxuICAgICAgICB0aGlzLmFjdGl2ZU1hcmtzID0gTWFyay5ub25lO1xuICAgICAgICAvLyBOZXN0ZWQgTWFya3Mgd2l0aCBzYW1lIHR5cGVcbiAgICAgICAgdGhpcy5zdGFzaE1hcmtzID0gW107XG4gICAgICAgIHRoaXMubWF0Y2ggPSBtYXRjaCB8fCAob3B0aW9ucyAmIE9QVF9PUEVOX0xFRlQgPyBudWxsIDogdHlwZS5jb250ZW50TWF0Y2gpO1xuICAgIH1cbiAgICBmaW5kV3JhcHBpbmcobm9kZSkge1xuICAgICAgICBpZiAoIXRoaXMubWF0Y2gpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy50eXBlKVxuICAgICAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICAgIGxldCBmaWxsID0gdGhpcy50eXBlLmNvbnRlbnRNYXRjaC5maWxsQmVmb3JlKEZyYWdtZW50LmZyb20obm9kZSkpO1xuICAgICAgICAgICAgaWYgKGZpbGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1hdGNoID0gdGhpcy50eXBlLmNvbnRlbnRNYXRjaC5tYXRjaEZyYWdtZW50KGZpbGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbGV0IHN0YXJ0ID0gdGhpcy50eXBlLmNvbnRlbnRNYXRjaCwgd3JhcDtcbiAgICAgICAgICAgICAgICBpZiAod3JhcCA9IHN0YXJ0LmZpbmRXcmFwcGluZyhub2RlLnR5cGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWF0Y2ggPSBzdGFydDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdyYXA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMubWF0Y2guZmluZFdyYXBwaW5nKG5vZGUudHlwZSk7XG4gICAgfVxuICAgIGZpbmlzaChvcGVuRW5kKSB7XG4gICAgICAgIGlmICghKHRoaXMub3B0aW9ucyAmIE9QVF9QUkVTRVJWRV9XUykpIHsgLy8gU3RyaXAgdHJhaWxpbmcgd2hpdGVzcGFjZVxuICAgICAgICAgICAgbGV0IGxhc3QgPSB0aGlzLmNvbnRlbnRbdGhpcy5jb250ZW50Lmxlbmd0aCAtIDFdLCBtO1xuICAgICAgICAgICAgaWYgKGxhc3QgJiYgbGFzdC5pc1RleHQgJiYgKG0gPSAvWyBcXHRcXHJcXG5cXHUwMDBjXSskLy5leGVjKGxhc3QudGV4dCkpKSB7XG4gICAgICAgICAgICAgICAgbGV0IHRleHQgPSBsYXN0O1xuICAgICAgICAgICAgICAgIGlmIChsYXN0LnRleHQubGVuZ3RoID09IG1bMF0ubGVuZ3RoKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRlbnQucG9wKCk7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRlbnRbdGhpcy5jb250ZW50Lmxlbmd0aCAtIDFdID0gdGV4dC53aXRoVGV4dCh0ZXh0LnRleHQuc2xpY2UoMCwgdGV4dC50ZXh0Lmxlbmd0aCAtIG1bMF0ubGVuZ3RoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGNvbnRlbnQgPSBGcmFnbWVudC5mcm9tKHRoaXMuY29udGVudCk7XG4gICAgICAgIGlmICghb3BlbkVuZCAmJiB0aGlzLm1hdGNoKVxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuYXBwZW5kKHRoaXMubWF0Y2guZmlsbEJlZm9yZShGcmFnbWVudC5lbXB0eSwgdHJ1ZSkpO1xuICAgICAgICByZXR1cm4gdGhpcy50eXBlID8gdGhpcy50eXBlLmNyZWF0ZSh0aGlzLmF0dHJzLCBjb250ZW50LCB0aGlzLm1hcmtzKSA6IGNvbnRlbnQ7XG4gICAgfVxuICAgIHBvcEZyb21TdGFzaE1hcmsobWFyaykge1xuICAgICAgICBmb3IgKGxldCBpID0gdGhpcy5zdGFzaE1hcmtzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKVxuICAgICAgICAgICAgaWYgKG1hcmsuZXEodGhpcy5zdGFzaE1hcmtzW2ldKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zdGFzaE1hcmtzLnNwbGljZShpLCAxKVswXTtcbiAgICB9XG4gICAgYXBwbHlQZW5kaW5nKG5leHRUeXBlKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBwZW5kaW5nID0gdGhpcy5wZW5kaW5nTWFya3M7IGkgPCBwZW5kaW5nLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgbWFyayA9IHBlbmRpbmdbaV07XG4gICAgICAgICAgICBpZiAoKHRoaXMudHlwZSA/IHRoaXMudHlwZS5hbGxvd3NNYXJrVHlwZShtYXJrLnR5cGUpIDogbWFya01heUFwcGx5KG1hcmsudHlwZSwgbmV4dFR5cGUpKSAmJlxuICAgICAgICAgICAgICAgICFtYXJrLmlzSW5TZXQodGhpcy5hY3RpdmVNYXJrcykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFjdGl2ZU1hcmtzID0gbWFyay5hZGRUb1NldCh0aGlzLmFjdGl2ZU1hcmtzKTtcbiAgICAgICAgICAgICAgICB0aGlzLnBlbmRpbmdNYXJrcyA9IG1hcmsucmVtb3ZlRnJvbVNldCh0aGlzLnBlbmRpbmdNYXJrcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgaW5saW5lQ29udGV4dChub2RlKSB7XG4gICAgICAgIGlmICh0aGlzLnR5cGUpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy50eXBlLmlubGluZUNvbnRlbnQ7XG4gICAgICAgIGlmICh0aGlzLmNvbnRlbnQubGVuZ3RoKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29udGVudFswXS5pc0lubGluZTtcbiAgICAgICAgcmV0dXJuIG5vZGUucGFyZW50Tm9kZSAmJiAhYmxvY2tUYWdzLmhhc093blByb3BlcnR5KG5vZGUucGFyZW50Tm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKTtcbiAgICB9XG59XG5jbGFzcyBQYXJzZUNvbnRleHQge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgIC8vIFRoZSBwYXJzZXIgd2UgYXJlIHVzaW5nLlxuICAgIHBhcnNlciwgXG4gICAgLy8gVGhlIG9wdGlvbnMgcGFzc2VkIHRvIHRoaXMgcGFyc2UuXG4gICAgb3B0aW9ucywgaXNPcGVuKSB7XG4gICAgICAgIHRoaXMucGFyc2VyID0gcGFyc2VyO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLmlzT3BlbiA9IGlzT3BlbjtcbiAgICAgICAgdGhpcy5vcGVuID0gMDtcbiAgICAgICAgbGV0IHRvcE5vZGUgPSBvcHRpb25zLnRvcE5vZGUsIHRvcENvbnRleHQ7XG4gICAgICAgIGxldCB0b3BPcHRpb25zID0gd3NPcHRpb25zRm9yKG51bGwsIG9wdGlvbnMucHJlc2VydmVXaGl0ZXNwYWNlLCAwKSB8IChpc09wZW4gPyBPUFRfT1BFTl9MRUZUIDogMCk7XG4gICAgICAgIGlmICh0b3BOb2RlKVxuICAgICAgICAgICAgdG9wQ29udGV4dCA9IG5ldyBOb2RlQ29udGV4dCh0b3BOb2RlLnR5cGUsIHRvcE5vZGUuYXR0cnMsIE1hcmsubm9uZSwgTWFyay5ub25lLCB0cnVlLCBvcHRpb25zLnRvcE1hdGNoIHx8IHRvcE5vZGUudHlwZS5jb250ZW50TWF0Y2gsIHRvcE9wdGlvbnMpO1xuICAgICAgICBlbHNlIGlmIChpc09wZW4pXG4gICAgICAgICAgICB0b3BDb250ZXh0ID0gbmV3IE5vZGVDb250ZXh0KG51bGwsIG51bGwsIE1hcmsubm9uZSwgTWFyay5ub25lLCB0cnVlLCBudWxsLCB0b3BPcHRpb25zKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgdG9wQ29udGV4dCA9IG5ldyBOb2RlQ29udGV4dChwYXJzZXIuc2NoZW1hLnRvcE5vZGVUeXBlLCBudWxsLCBNYXJrLm5vbmUsIE1hcmsubm9uZSwgdHJ1ZSwgbnVsbCwgdG9wT3B0aW9ucyk7XG4gICAgICAgIHRoaXMubm9kZXMgPSBbdG9wQ29udGV4dF07XG4gICAgICAgIHRoaXMuZmluZCA9IG9wdGlvbnMuZmluZFBvc2l0aW9ucztcbiAgICAgICAgdGhpcy5uZWVkc0Jsb2NrID0gZmFsc2U7XG4gICAgfVxuICAgIGdldCB0b3AoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5vZGVzW3RoaXMub3Blbl07XG4gICAgfVxuICAgIC8vIEFkZCBhIERPTSBub2RlIHRvIHRoZSBjb250ZW50LiBUZXh0IGlzIGluc2VydGVkIGFzIHRleHQgbm9kZSxcbiAgICAvLyBvdGhlcndpc2UsIHRoZSBub2RlIGlzIHBhc3NlZCB0byBgYWRkRWxlbWVudGAgb3IsIGlmIGl0IGhhcyBhXG4gICAgLy8gYHN0eWxlYCBhdHRyaWJ1dGUsIGBhZGRFbGVtZW50V2l0aFN0eWxlc2AuXG4gICAgYWRkRE9NKGRvbSkge1xuICAgICAgICBpZiAoZG9tLm5vZGVUeXBlID09IDMpIHtcbiAgICAgICAgICAgIHRoaXMuYWRkVGV4dE5vZGUoZG9tKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChkb20ubm9kZVR5cGUgPT0gMSkge1xuICAgICAgICAgICAgbGV0IHN0eWxlID0gZG9tLmdldEF0dHJpYnV0ZShcInN0eWxlXCIpO1xuICAgICAgICAgICAgbGV0IG1hcmtzID0gc3R5bGUgPyB0aGlzLnJlYWRTdHlsZXMocGFyc2VTdHlsZXMoc3R5bGUpKSA6IG51bGwsIHRvcCA9IHRoaXMudG9wO1xuICAgICAgICAgICAgaWYgKG1hcmtzICE9IG51bGwpXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtYXJrcy5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRQZW5kaW5nTWFyayhtYXJrc1tpXSk7XG4gICAgICAgICAgICB0aGlzLmFkZEVsZW1lbnQoZG9tKTtcbiAgICAgICAgICAgIGlmIChtYXJrcyAhPSBudWxsKVxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWFya3MubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlUGVuZGluZ01hcmsobWFya3NbaV0sIHRvcCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYWRkVGV4dE5vZGUoZG9tKSB7XG4gICAgICAgIGxldCB2YWx1ZSA9IGRvbS5ub2RlVmFsdWU7XG4gICAgICAgIGxldCB0b3AgPSB0aGlzLnRvcDtcbiAgICAgICAgaWYgKHRvcC5vcHRpb25zICYgT1BUX1BSRVNFUlZFX1dTX0ZVTEwgfHxcbiAgICAgICAgICAgIHRvcC5pbmxpbmVDb250ZXh0KGRvbSkgfHxcbiAgICAgICAgICAgIC9bXiBcXHRcXHJcXG5cXHUwMDBjXS8udGVzdCh2YWx1ZSkpIHtcbiAgICAgICAgICAgIGlmICghKHRvcC5vcHRpb25zICYgT1BUX1BSRVNFUlZFX1dTKSkge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZSgvWyBcXHRcXHJcXG5cXHUwMDBjXSsvZywgXCIgXCIpO1xuICAgICAgICAgICAgICAgIC8vIElmIHRoaXMgc3RhcnRzIHdpdGggd2hpdGVzcGFjZSwgYW5kIHRoZXJlIGlzIG5vIG5vZGUgYmVmb3JlIGl0LCBvclxuICAgICAgICAgICAgICAgIC8vIGEgaGFyZCBicmVhaywgb3IgYSB0ZXh0IG5vZGUgdGhhdCBlbmRzIHdpdGggd2hpdGVzcGFjZSwgc3RyaXAgdGhlXG4gICAgICAgICAgICAgICAgLy8gbGVhZGluZyBzcGFjZS5cbiAgICAgICAgICAgICAgICBpZiAoL15bIFxcdFxcclxcblxcdTAwMGNdLy50ZXN0KHZhbHVlKSAmJiB0aGlzLm9wZW4gPT0gdGhpcy5ub2Rlcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBub2RlQmVmb3JlID0gdG9wLmNvbnRlbnRbdG9wLmNvbnRlbnQubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICAgICAgICAgIGxldCBkb21Ob2RlQmVmb3JlID0gZG9tLnByZXZpb3VzU2libGluZztcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFub2RlQmVmb3JlIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAoZG9tTm9kZUJlZm9yZSAmJiBkb21Ob2RlQmVmb3JlLm5vZGVOYW1lID09ICdCUicpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAobm9kZUJlZm9yZS5pc1RleHQgJiYgL1sgXFx0XFxyXFxuXFx1MDAwY10kLy50ZXN0KG5vZGVCZWZvcmUudGV4dCkpKVxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5zbGljZSgxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICghKHRvcC5vcHRpb25zICYgT1BUX1BSRVNFUlZFX1dTX0ZVTEwpKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9cXHI/XFxufFxcci9nLCBcIiBcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoL1xcclxcbj8vZywgXCJcXG5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodmFsdWUpXG4gICAgICAgICAgICAgICAgdGhpcy5pbnNlcnROb2RlKHRoaXMucGFyc2VyLnNjaGVtYS50ZXh0KHZhbHVlKSk7XG4gICAgICAgICAgICB0aGlzLmZpbmRJblRleHQoZG9tKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZmluZEluc2lkZShkb20pO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIFRyeSB0byBmaW5kIGEgaGFuZGxlciBmb3IgdGhlIGdpdmVuIHRhZyBhbmQgdXNlIHRoYXQgdG8gcGFyc2UuIElmXG4gICAgLy8gbm9uZSBpcyBmb3VuZCwgdGhlIGVsZW1lbnQncyBjb250ZW50IG5vZGVzIGFyZSBhZGRlZCBkaXJlY3RseS5cbiAgICBhZGRFbGVtZW50KGRvbSwgbWF0Y2hBZnRlcikge1xuICAgICAgICBsZXQgbmFtZSA9IGRvbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLCBydWxlSUQ7XG4gICAgICAgIGlmIChsaXN0VGFncy5oYXNPd25Qcm9wZXJ0eShuYW1lKSAmJiB0aGlzLnBhcnNlci5ub3JtYWxpemVMaXN0cylcbiAgICAgICAgICAgIG5vcm1hbGl6ZUxpc3QoZG9tKTtcbiAgICAgICAgbGV0IHJ1bGUgPSAodGhpcy5vcHRpb25zLnJ1bGVGcm9tTm9kZSAmJiB0aGlzLm9wdGlvbnMucnVsZUZyb21Ob2RlKGRvbSkpIHx8XG4gICAgICAgICAgICAocnVsZUlEID0gdGhpcy5wYXJzZXIubWF0Y2hUYWcoZG9tLCB0aGlzLCBtYXRjaEFmdGVyKSk7XG4gICAgICAgIGlmIChydWxlID8gcnVsZS5pZ25vcmUgOiBpZ25vcmVUYWdzLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgICAgICB0aGlzLmZpbmRJbnNpZGUoZG9tKTtcbiAgICAgICAgICAgIHRoaXMuaWdub3JlRmFsbGJhY2soZG9tKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghcnVsZSB8fCBydWxlLnNraXAgfHwgcnVsZS5jbG9zZVBhcmVudCkge1xuICAgICAgICAgICAgaWYgKHJ1bGUgJiYgcnVsZS5jbG9zZVBhcmVudClcbiAgICAgICAgICAgICAgICB0aGlzLm9wZW4gPSBNYXRoLm1heCgwLCB0aGlzLm9wZW4gLSAxKTtcbiAgICAgICAgICAgIGVsc2UgaWYgKHJ1bGUgJiYgcnVsZS5za2lwLm5vZGVUeXBlKVxuICAgICAgICAgICAgICAgIGRvbSA9IHJ1bGUuc2tpcDtcbiAgICAgICAgICAgIGxldCBzeW5jLCB0b3AgPSB0aGlzLnRvcCwgb2xkTmVlZHNCbG9jayA9IHRoaXMubmVlZHNCbG9jaztcbiAgICAgICAgICAgIGlmIChibG9ja1RhZ3MuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgICAgICAgICBzeW5jID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBpZiAoIXRvcC50eXBlKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLm5lZWRzQmxvY2sgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoIWRvbS5maXJzdENoaWxkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sZWFmRmFsbGJhY2soZG9tKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmFkZEFsbChkb20pO1xuICAgICAgICAgICAgaWYgKHN5bmMpXG4gICAgICAgICAgICAgICAgdGhpcy5zeW5jKHRvcCk7XG4gICAgICAgICAgICB0aGlzLm5lZWRzQmxvY2sgPSBvbGROZWVkc0Jsb2NrO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hZGRFbGVtZW50QnlSdWxlKGRvbSwgcnVsZSwgcnVsZS5jb25zdW1pbmcgPT09IGZhbHNlID8gcnVsZUlEIDogdW5kZWZpbmVkKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBDYWxsZWQgZm9yIGxlYWYgRE9NIG5vZGVzIHRoYXQgd291bGQgb3RoZXJ3aXNlIGJlIGlnbm9yZWRcbiAgICBsZWFmRmFsbGJhY2soZG9tKSB7XG4gICAgICAgIGlmIChkb20ubm9kZU5hbWUgPT0gXCJCUlwiICYmIHRoaXMudG9wLnR5cGUgJiYgdGhpcy50b3AudHlwZS5pbmxpbmVDb250ZW50KVxuICAgICAgICAgICAgdGhpcy5hZGRUZXh0Tm9kZShkb20ub3duZXJEb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShcIlxcblwiKSk7XG4gICAgfVxuICAgIC8vIENhbGxlZCBmb3IgaWdub3JlZCBub2Rlc1xuICAgIGlnbm9yZUZhbGxiYWNrKGRvbSkge1xuICAgICAgICAvLyBJZ25vcmVkIEJSIG5vZGVzIHNob3VsZCBhdCBsZWFzdCBjcmVhdGUgYW4gaW5saW5lIGNvbnRleHRcbiAgICAgICAgaWYgKGRvbS5ub2RlTmFtZSA9PSBcIkJSXCIgJiYgKCF0aGlzLnRvcC50eXBlIHx8ICF0aGlzLnRvcC50eXBlLmlubGluZUNvbnRlbnQpKVxuICAgICAgICAgICAgdGhpcy5maW5kUGxhY2UodGhpcy5wYXJzZXIuc2NoZW1hLnRleHQoXCItXCIpKTtcbiAgICB9XG4gICAgLy8gUnVuIGFueSBzdHlsZSBwYXJzZXIgYXNzb2NpYXRlZCB3aXRoIHRoZSBub2RlJ3Mgc3R5bGVzLiBFaXRoZXJcbiAgICAvLyByZXR1cm4gYW4gYXJyYXkgb2YgbWFya3MsIG9yIG51bGwgdG8gaW5kaWNhdGUgc29tZSBvZiB0aGUgc3R5bGVzXG4gICAgLy8gaGFkIGEgcnVsZSB3aXRoIGBpZ25vcmVgIHNldC5cbiAgICByZWFkU3R5bGVzKHN0eWxlcykge1xuICAgICAgICBsZXQgbWFya3MgPSBNYXJrLm5vbmU7XG4gICAgICAgIHN0eWxlOiBmb3IgKGxldCBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkgKz0gMikge1xuICAgICAgICAgICAgZm9yIChsZXQgYWZ0ZXIgPSB1bmRlZmluZWQ7Oykge1xuICAgICAgICAgICAgICAgIGxldCBydWxlID0gdGhpcy5wYXJzZXIubWF0Y2hTdHlsZShzdHlsZXNbaV0sIHN0eWxlc1tpICsgMV0sIHRoaXMsIGFmdGVyKTtcbiAgICAgICAgICAgICAgICBpZiAoIXJ1bGUpXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlIHN0eWxlO1xuICAgICAgICAgICAgICAgIGlmIChydWxlLmlnbm9yZSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgbWFya3MgPSB0aGlzLnBhcnNlci5zY2hlbWEubWFya3NbcnVsZS5tYXJrXS5jcmVhdGUocnVsZS5hdHRycykuYWRkVG9TZXQobWFya3MpO1xuICAgICAgICAgICAgICAgIGlmIChydWxlLmNvbnN1bWluZyA9PT0gZmFsc2UpXG4gICAgICAgICAgICAgICAgICAgIGFmdGVyID0gcnVsZTtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtYXJrcztcbiAgICB9XG4gICAgLy8gTG9vayB1cCBhIGhhbmRsZXIgZm9yIHRoZSBnaXZlbiBub2RlLiBJZiBub25lIGFyZSBmb3VuZCwgcmV0dXJuXG4gICAgLy8gZmFsc2UuIE90aGVyd2lzZSwgYXBwbHkgaXQsIHVzZSBpdHMgcmV0dXJuIHZhbHVlIHRvIGRyaXZlIHRoZSB3YXlcbiAgICAvLyB0aGUgbm9kZSdzIGNvbnRlbnQgaXMgd3JhcHBlZCwgYW5kIHJldHVybiB0cnVlLlxuICAgIGFkZEVsZW1lbnRCeVJ1bGUoZG9tLCBydWxlLCBjb250aW51ZUFmdGVyKSB7XG4gICAgICAgIGxldCBzeW5jLCBub2RlVHlwZSwgbWFyaztcbiAgICAgICAgaWYgKHJ1bGUubm9kZSkge1xuICAgICAgICAgICAgbm9kZVR5cGUgPSB0aGlzLnBhcnNlci5zY2hlbWEubm9kZXNbcnVsZS5ub2RlXTtcbiAgICAgICAgICAgIGlmICghbm9kZVR5cGUuaXNMZWFmKSB7XG4gICAgICAgICAgICAgICAgc3luYyA9IHRoaXMuZW50ZXIobm9kZVR5cGUsIHJ1bGUuYXR0cnMgfHwgbnVsbCwgcnVsZS5wcmVzZXJ2ZVdoaXRlc3BhY2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoIXRoaXMuaW5zZXJ0Tm9kZShub2RlVHlwZS5jcmVhdGUocnVsZS5hdHRycykpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sZWFmRmFsbGJhY2soZG9tKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxldCBtYXJrVHlwZSA9IHRoaXMucGFyc2VyLnNjaGVtYS5tYXJrc1tydWxlLm1hcmtdO1xuICAgICAgICAgICAgbWFyayA9IG1hcmtUeXBlLmNyZWF0ZShydWxlLmF0dHJzKTtcbiAgICAgICAgICAgIHRoaXMuYWRkUGVuZGluZ01hcmsobWFyayk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHN0YXJ0SW4gPSB0aGlzLnRvcDtcbiAgICAgICAgaWYgKG5vZGVUeXBlICYmIG5vZGVUeXBlLmlzTGVhZikge1xuICAgICAgICAgICAgdGhpcy5maW5kSW5zaWRlKGRvbSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoY29udGludWVBZnRlcikge1xuICAgICAgICAgICAgdGhpcy5hZGRFbGVtZW50KGRvbSwgY29udGludWVBZnRlcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocnVsZS5nZXRDb250ZW50KSB7XG4gICAgICAgICAgICB0aGlzLmZpbmRJbnNpZGUoZG9tKTtcbiAgICAgICAgICAgIHJ1bGUuZ2V0Q29udGVudChkb20sIHRoaXMucGFyc2VyLnNjaGVtYSkuZm9yRWFjaChub2RlID0+IHRoaXMuaW5zZXJ0Tm9kZShub2RlKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBsZXQgY29udGVudERPTSA9IGRvbTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcnVsZS5jb250ZW50RWxlbWVudCA9PSBcInN0cmluZ1wiKVxuICAgICAgICAgICAgICAgIGNvbnRlbnRET00gPSBkb20ucXVlcnlTZWxlY3RvcihydWxlLmNvbnRlbnRFbGVtZW50KTtcbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBydWxlLmNvbnRlbnRFbGVtZW50ID09IFwiZnVuY3Rpb25cIilcbiAgICAgICAgICAgICAgICBjb250ZW50RE9NID0gcnVsZS5jb250ZW50RWxlbWVudChkb20pO1xuICAgICAgICAgICAgZWxzZSBpZiAocnVsZS5jb250ZW50RWxlbWVudClcbiAgICAgICAgICAgICAgICBjb250ZW50RE9NID0gcnVsZS5jb250ZW50RWxlbWVudDtcbiAgICAgICAgICAgIHRoaXMuZmluZEFyb3VuZChkb20sIGNvbnRlbnRET00sIHRydWUpO1xuICAgICAgICAgICAgdGhpcy5hZGRBbGwoY29udGVudERPTSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN5bmMgJiYgdGhpcy5zeW5jKHN0YXJ0SW4pKVxuICAgICAgICAgICAgdGhpcy5vcGVuLS07XG4gICAgICAgIGlmIChtYXJrKVxuICAgICAgICAgICAgdGhpcy5yZW1vdmVQZW5kaW5nTWFyayhtYXJrLCBzdGFydEluKTtcbiAgICB9XG4gICAgLy8gQWRkIGFsbCBjaGlsZCBub2RlcyBiZXR3ZWVuIGBzdGFydEluZGV4YCBhbmQgYGVuZEluZGV4YCAob3IgdGhlXG4gICAgLy8gd2hvbGUgbm9kZSwgaWYgbm90IGdpdmVuKS4gSWYgYHN5bmNgIGlzIHBhc3NlZCwgdXNlIGl0IHRvXG4gICAgLy8gc3luY2hyb25pemUgYWZ0ZXIgZXZlcnkgYmxvY2sgZWxlbWVudC5cbiAgICBhZGRBbGwocGFyZW50LCBzdGFydEluZGV4LCBlbmRJbmRleCkge1xuICAgICAgICBsZXQgaW5kZXggPSBzdGFydEluZGV4IHx8IDA7XG4gICAgICAgIGZvciAobGV0IGRvbSA9IHN0YXJ0SW5kZXggPyBwYXJlbnQuY2hpbGROb2Rlc1tzdGFydEluZGV4XSA6IHBhcmVudC5maXJzdENoaWxkLCBlbmQgPSBlbmRJbmRleCA9PSBudWxsID8gbnVsbCA6IHBhcmVudC5jaGlsZE5vZGVzW2VuZEluZGV4XTsgZG9tICE9IGVuZDsgZG9tID0gZG9tLm5leHRTaWJsaW5nLCArK2luZGV4KSB7XG4gICAgICAgICAgICB0aGlzLmZpbmRBdFBvaW50KHBhcmVudCwgaW5kZXgpO1xuICAgICAgICAgICAgdGhpcy5hZGRET00oZG9tKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmZpbmRBdFBvaW50KHBhcmVudCwgaW5kZXgpO1xuICAgIH1cbiAgICAvLyBUcnkgdG8gZmluZCBhIHdheSB0byBmaXQgdGhlIGdpdmVuIG5vZGUgdHlwZSBpbnRvIHRoZSBjdXJyZW50XG4gICAgLy8gY29udGV4dC4gTWF5IGFkZCBpbnRlcm1lZGlhdGUgd3JhcHBlcnMgYW5kL29yIGxlYXZlIG5vbi1zb2xpZFxuICAgIC8vIG5vZGVzIHRoYXQgd2UncmUgaW4uXG4gICAgZmluZFBsYWNlKG5vZGUpIHtcbiAgICAgICAgbGV0IHJvdXRlLCBzeW5jO1xuICAgICAgICBmb3IgKGxldCBkZXB0aCA9IHRoaXMub3BlbjsgZGVwdGggPj0gMDsgZGVwdGgtLSkge1xuICAgICAgICAgICAgbGV0IGN4ID0gdGhpcy5ub2Rlc1tkZXB0aF07XG4gICAgICAgICAgICBsZXQgZm91bmQgPSBjeC5maW5kV3JhcHBpbmcobm9kZSk7XG4gICAgICAgICAgICBpZiAoZm91bmQgJiYgKCFyb3V0ZSB8fCByb3V0ZS5sZW5ndGggPiBmb3VuZC5sZW5ndGgpKSB7XG4gICAgICAgICAgICAgICAgcm91dGUgPSBmb3VuZDtcbiAgICAgICAgICAgICAgICBzeW5jID0gY3g7XG4gICAgICAgICAgICAgICAgaWYgKCFmb3VuZC5sZW5ndGgpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGN4LnNvbGlkKVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmICghcm91dGUpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIHRoaXMuc3luYyhzeW5jKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByb3V0ZS5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgIHRoaXMuZW50ZXJJbm5lcihyb3V0ZVtpXSwgbnVsbCwgZmFsc2UpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgLy8gVHJ5IHRvIGluc2VydCB0aGUgZ2l2ZW4gbm9kZSwgYWRqdXN0aW5nIHRoZSBjb250ZXh0IHdoZW4gbmVlZGVkLlxuICAgIGluc2VydE5vZGUobm9kZSkge1xuICAgICAgICBpZiAobm9kZS5pc0lubGluZSAmJiB0aGlzLm5lZWRzQmxvY2sgJiYgIXRoaXMudG9wLnR5cGUpIHtcbiAgICAgICAgICAgIGxldCBibG9jayA9IHRoaXMudGV4dGJsb2NrRnJvbUNvbnRleHQoKTtcbiAgICAgICAgICAgIGlmIChibG9jaylcbiAgICAgICAgICAgICAgICB0aGlzLmVudGVySW5uZXIoYmxvY2spO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmZpbmRQbGFjZShub2RlKSkge1xuICAgICAgICAgICAgdGhpcy5jbG9zZUV4dHJhKCk7XG4gICAgICAgICAgICBsZXQgdG9wID0gdGhpcy50b3A7XG4gICAgICAgICAgICB0b3AuYXBwbHlQZW5kaW5nKG5vZGUudHlwZSk7XG4gICAgICAgICAgICBpZiAodG9wLm1hdGNoKVxuICAgICAgICAgICAgICAgIHRvcC5tYXRjaCA9IHRvcC5tYXRjaC5tYXRjaFR5cGUobm9kZS50eXBlKTtcbiAgICAgICAgICAgIGxldCBtYXJrcyA9IHRvcC5hY3RpdmVNYXJrcztcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZS5tYXJrcy5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgICAgICBpZiAoIXRvcC50eXBlIHx8IHRvcC50eXBlLmFsbG93c01hcmtUeXBlKG5vZGUubWFya3NbaV0udHlwZSkpXG4gICAgICAgICAgICAgICAgICAgIG1hcmtzID0gbm9kZS5tYXJrc1tpXS5hZGRUb1NldChtYXJrcyk7XG4gICAgICAgICAgICB0b3AuY29udGVudC5wdXNoKG5vZGUubWFyayhtYXJrcykpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvLyBUcnkgdG8gc3RhcnQgYSBub2RlIG9mIHRoZSBnaXZlbiB0eXBlLCBhZGp1c3RpbmcgdGhlIGNvbnRleHQgd2hlblxuICAgIC8vIG5lY2Vzc2FyeS5cbiAgICBlbnRlcih0eXBlLCBhdHRycywgcHJlc2VydmVXUykge1xuICAgICAgICBsZXQgb2sgPSB0aGlzLmZpbmRQbGFjZSh0eXBlLmNyZWF0ZShhdHRycykpO1xuICAgICAgICBpZiAob2spXG4gICAgICAgICAgICB0aGlzLmVudGVySW5uZXIodHlwZSwgYXR0cnMsIHRydWUsIHByZXNlcnZlV1MpO1xuICAgICAgICByZXR1cm4gb2s7XG4gICAgfVxuICAgIC8vIE9wZW4gYSBub2RlIG9mIHRoZSBnaXZlbiB0eXBlXG4gICAgZW50ZXJJbm5lcih0eXBlLCBhdHRycyA9IG51bGwsIHNvbGlkID0gZmFsc2UsIHByZXNlcnZlV1MpIHtcbiAgICAgICAgdGhpcy5jbG9zZUV4dHJhKCk7XG4gICAgICAgIGxldCB0b3AgPSB0aGlzLnRvcDtcbiAgICAgICAgdG9wLmFwcGx5UGVuZGluZyh0eXBlKTtcbiAgICAgICAgdG9wLm1hdGNoID0gdG9wLm1hdGNoICYmIHRvcC5tYXRjaC5tYXRjaFR5cGUodHlwZSk7XG4gICAgICAgIGxldCBvcHRpb25zID0gd3NPcHRpb25zRm9yKHR5cGUsIHByZXNlcnZlV1MsIHRvcC5vcHRpb25zKTtcbiAgICAgICAgaWYgKCh0b3Aub3B0aW9ucyAmIE9QVF9PUEVOX0xFRlQpICYmIHRvcC5jb250ZW50Lmxlbmd0aCA9PSAwKVxuICAgICAgICAgICAgb3B0aW9ucyB8PSBPUFRfT1BFTl9MRUZUO1xuICAgICAgICB0aGlzLm5vZGVzLnB1c2gobmV3IE5vZGVDb250ZXh0KHR5cGUsIGF0dHJzLCB0b3AuYWN0aXZlTWFya3MsIHRvcC5wZW5kaW5nTWFya3MsIHNvbGlkLCBudWxsLCBvcHRpb25zKSk7XG4gICAgICAgIHRoaXMub3BlbisrO1xuICAgIH1cbiAgICAvLyBNYWtlIHN1cmUgYWxsIG5vZGVzIGFib3ZlIHRoaXMub3BlbiBhcmUgZmluaXNoZWQgYW5kIGFkZGVkIHRvXG4gICAgLy8gdGhlaXIgcGFyZW50c1xuICAgIGNsb3NlRXh0cmEob3BlbkVuZCA9IGZhbHNlKSB7XG4gICAgICAgIGxldCBpID0gdGhpcy5ub2Rlcy5sZW5ndGggLSAxO1xuICAgICAgICBpZiAoaSA+IHRoaXMub3Blbikge1xuICAgICAgICAgICAgZm9yICg7IGkgPiB0aGlzLm9wZW47IGktLSlcbiAgICAgICAgICAgICAgICB0aGlzLm5vZGVzW2kgLSAxXS5jb250ZW50LnB1c2godGhpcy5ub2Rlc1tpXS5maW5pc2gob3BlbkVuZCkpO1xuICAgICAgICAgICAgdGhpcy5ub2Rlcy5sZW5ndGggPSB0aGlzLm9wZW4gKyAxO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZpbmlzaCgpIHtcbiAgICAgICAgdGhpcy5vcGVuID0gMDtcbiAgICAgICAgdGhpcy5jbG9zZUV4dHJhKHRoaXMuaXNPcGVuKTtcbiAgICAgICAgcmV0dXJuIHRoaXMubm9kZXNbMF0uZmluaXNoKHRoaXMuaXNPcGVuIHx8IHRoaXMub3B0aW9ucy50b3BPcGVuKTtcbiAgICB9XG4gICAgc3luYyh0bykge1xuICAgICAgICBmb3IgKGxldCBpID0gdGhpcy5vcGVuOyBpID49IDA7IGktLSlcbiAgICAgICAgICAgIGlmICh0aGlzLm5vZGVzW2ldID09IHRvKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vcGVuID0gaTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBnZXQgY3VycmVudFBvcygpIHtcbiAgICAgICAgdGhpcy5jbG9zZUV4dHJhKCk7XG4gICAgICAgIGxldCBwb3MgPSAwO1xuICAgICAgICBmb3IgKGxldCBpID0gdGhpcy5vcGVuOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgbGV0IGNvbnRlbnQgPSB0aGlzLm5vZGVzW2ldLmNvbnRlbnQ7XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gY29udGVudC5sZW5ndGggLSAxOyBqID49IDA7IGotLSlcbiAgICAgICAgICAgICAgICBwb3MgKz0gY29udGVudFtqXS5ub2RlU2l6ZTtcbiAgICAgICAgICAgIGlmIChpKVxuICAgICAgICAgICAgICAgIHBvcysrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwb3M7XG4gICAgfVxuICAgIGZpbmRBdFBvaW50KHBhcmVudCwgb2Zmc2V0KSB7XG4gICAgICAgIGlmICh0aGlzLmZpbmQpXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZmluZC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmZpbmRbaV0ubm9kZSA9PSBwYXJlbnQgJiYgdGhpcy5maW5kW2ldLm9mZnNldCA9PSBvZmZzZXQpXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmluZFtpXS5wb3MgPSB0aGlzLmN1cnJlbnRQb3M7XG4gICAgICAgICAgICB9XG4gICAgfVxuICAgIGZpbmRJbnNpZGUocGFyZW50KSB7XG4gICAgICAgIGlmICh0aGlzLmZpbmQpXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZmluZC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmZpbmRbaV0ucG9zID09IG51bGwgJiYgcGFyZW50Lm5vZGVUeXBlID09IDEgJiYgcGFyZW50LmNvbnRhaW5zKHRoaXMuZmluZFtpXS5ub2RlKSlcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5maW5kW2ldLnBvcyA9IHRoaXMuY3VycmVudFBvcztcbiAgICAgICAgICAgIH1cbiAgICB9XG4gICAgZmluZEFyb3VuZChwYXJlbnQsIGNvbnRlbnQsIGJlZm9yZSkge1xuICAgICAgICBpZiAocGFyZW50ICE9IGNvbnRlbnQgJiYgdGhpcy5maW5kKVxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmZpbmQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5maW5kW2ldLnBvcyA9PSBudWxsICYmIHBhcmVudC5ub2RlVHlwZSA9PSAxICYmIHBhcmVudC5jb250YWlucyh0aGlzLmZpbmRbaV0ubm9kZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHBvcyA9IGNvbnRlbnQuY29tcGFyZURvY3VtZW50UG9zaXRpb24odGhpcy5maW5kW2ldLm5vZGUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocG9zICYgKGJlZm9yZSA/IDIgOiA0KSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmluZFtpXS5wb3MgPSB0aGlzLmN1cnJlbnRQb3M7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgIH1cbiAgICBmaW5kSW5UZXh0KHRleHROb2RlKSB7XG4gICAgICAgIGlmICh0aGlzLmZpbmQpXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZmluZC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmZpbmRbaV0ubm9kZSA9PSB0ZXh0Tm9kZSlcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5maW5kW2ldLnBvcyA9IHRoaXMuY3VycmVudFBvcyAtICh0ZXh0Tm9kZS5ub2RlVmFsdWUubGVuZ3RoIC0gdGhpcy5maW5kW2ldLm9mZnNldCk7XG4gICAgICAgICAgICB9XG4gICAgfVxuICAgIC8vIERldGVybWluZXMgd2hldGhlciB0aGUgZ2l2ZW4gY29udGV4dCBzdHJpbmcgbWF0Y2hlcyB0aGlzIGNvbnRleHQuXG4gICAgbWF0Y2hlc0NvbnRleHQoY29udGV4dCkge1xuICAgICAgICBpZiAoY29udGV4dC5pbmRleE9mKFwifFwiKSA+IC0xKVxuICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQuc3BsaXQoL1xccypcXHxcXHMqLykuc29tZSh0aGlzLm1hdGNoZXNDb250ZXh0LCB0aGlzKTtcbiAgICAgICAgbGV0IHBhcnRzID0gY29udGV4dC5zcGxpdChcIi9cIik7XG4gICAgICAgIGxldCBvcHRpb24gPSB0aGlzLm9wdGlvbnMuY29udGV4dDtcbiAgICAgICAgbGV0IHVzZVJvb3QgPSAhdGhpcy5pc09wZW4gJiYgKCFvcHRpb24gfHwgb3B0aW9uLnBhcmVudC50eXBlID09IHRoaXMubm9kZXNbMF0udHlwZSk7XG4gICAgICAgIGxldCBtaW5EZXB0aCA9IC0ob3B0aW9uID8gb3B0aW9uLmRlcHRoICsgMSA6IDApICsgKHVzZVJvb3QgPyAwIDogMSk7XG4gICAgICAgIGxldCBtYXRjaCA9IChpLCBkZXB0aCkgPT4ge1xuICAgICAgICAgICAgZm9yICg7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICAgICAgbGV0IHBhcnQgPSBwYXJ0c1tpXTtcbiAgICAgICAgICAgICAgICBpZiAocGFydCA9PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpID09IHBhcnRzLmxlbmd0aCAtIDEgfHwgaSA9PSAwKVxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoOyBkZXB0aCA+PSBtaW5EZXB0aDsgZGVwdGgtLSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaChpIC0gMSwgZGVwdGgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBsZXQgbmV4dCA9IGRlcHRoID4gMCB8fCAoZGVwdGggPT0gMCAmJiB1c2VSb290KSA/IHRoaXMubm9kZXNbZGVwdGhdLnR5cGVcbiAgICAgICAgICAgICAgICAgICAgICAgIDogb3B0aW9uICYmIGRlcHRoID49IG1pbkRlcHRoID8gb3B0aW9uLm5vZGUoZGVwdGggLSBtaW5EZXB0aCkudHlwZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFuZXh0IHx8IChuZXh0Lm5hbWUgIT0gcGFydCAmJiBuZXh0Lmdyb3Vwcy5pbmRleE9mKHBhcnQpID09IC0xKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgZGVwdGgtLTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIG1hdGNoKHBhcnRzLmxlbmd0aCAtIDEsIHRoaXMub3Blbik7XG4gICAgfVxuICAgIHRleHRibG9ja0Zyb21Db250ZXh0KCkge1xuICAgICAgICBsZXQgJGNvbnRleHQgPSB0aGlzLm9wdGlvbnMuY29udGV4dDtcbiAgICAgICAgaWYgKCRjb250ZXh0KVxuICAgICAgICAgICAgZm9yIChsZXQgZCA9ICRjb250ZXh0LmRlcHRoOyBkID49IDA7IGQtLSkge1xuICAgICAgICAgICAgICAgIGxldCBkZWZsdCA9ICRjb250ZXh0Lm5vZGUoZCkuY29udGVudE1hdGNoQXQoJGNvbnRleHQuaW5kZXhBZnRlcihkKSkuZGVmYXVsdFR5cGU7XG4gICAgICAgICAgICAgICAgaWYgKGRlZmx0ICYmIGRlZmx0LmlzVGV4dGJsb2NrICYmIGRlZmx0LmRlZmF1bHRBdHRycylcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRlZmx0O1xuICAgICAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBuYW1lIGluIHRoaXMucGFyc2VyLnNjaGVtYS5ub2Rlcykge1xuICAgICAgICAgICAgbGV0IHR5cGUgPSB0aGlzLnBhcnNlci5zY2hlbWEubm9kZXNbbmFtZV07XG4gICAgICAgICAgICBpZiAodHlwZS5pc1RleHRibG9jayAmJiB0eXBlLmRlZmF1bHRBdHRycylcbiAgICAgICAgICAgICAgICByZXR1cm4gdHlwZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhZGRQZW5kaW5nTWFyayhtYXJrKSB7XG4gICAgICAgIGxldCBmb3VuZCA9IGZpbmRTYW1lTWFya0luU2V0KG1hcmssIHRoaXMudG9wLnBlbmRpbmdNYXJrcyk7XG4gICAgICAgIGlmIChmb3VuZClcbiAgICAgICAgICAgIHRoaXMudG9wLnN0YXNoTWFya3MucHVzaChmb3VuZCk7XG4gICAgICAgIHRoaXMudG9wLnBlbmRpbmdNYXJrcyA9IG1hcmsuYWRkVG9TZXQodGhpcy50b3AucGVuZGluZ01hcmtzKTtcbiAgICB9XG4gICAgcmVtb3ZlUGVuZGluZ01hcmsobWFyaywgdXB0bykge1xuICAgICAgICBmb3IgKGxldCBkZXB0aCA9IHRoaXMub3BlbjsgZGVwdGggPj0gMDsgZGVwdGgtLSkge1xuICAgICAgICAgICAgbGV0IGxldmVsID0gdGhpcy5ub2Rlc1tkZXB0aF07XG4gICAgICAgICAgICBsZXQgZm91bmQgPSBsZXZlbC5wZW5kaW5nTWFya3MubGFzdEluZGV4T2YobWFyayk7XG4gICAgICAgICAgICBpZiAoZm91bmQgPiAtMSkge1xuICAgICAgICAgICAgICAgIGxldmVsLnBlbmRpbmdNYXJrcyA9IG1hcmsucmVtb3ZlRnJvbVNldChsZXZlbC5wZW5kaW5nTWFya3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbGV2ZWwuYWN0aXZlTWFya3MgPSBtYXJrLnJlbW92ZUZyb21TZXQobGV2ZWwuYWN0aXZlTWFya3MpO1xuICAgICAgICAgICAgICAgIGxldCBzdGFzaE1hcmsgPSBsZXZlbC5wb3BGcm9tU3Rhc2hNYXJrKG1hcmspO1xuICAgICAgICAgICAgICAgIGlmIChzdGFzaE1hcmsgJiYgbGV2ZWwudHlwZSAmJiBsZXZlbC50eXBlLmFsbG93c01hcmtUeXBlKHN0YXNoTWFyay50eXBlKSlcbiAgICAgICAgICAgICAgICAgICAgbGV2ZWwuYWN0aXZlTWFya3MgPSBzdGFzaE1hcmsuYWRkVG9TZXQobGV2ZWwuYWN0aXZlTWFya3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGxldmVsID09IHVwdG8pXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG59XG4vLyBLbHVkZ2UgdG8gd29yayBhcm91bmQgZGlyZWN0bHkgbmVzdGVkIGxpc3Qgbm9kZXMgcHJvZHVjZWQgYnkgc29tZVxuLy8gdG9vbHMgYW5kIGFsbG93ZWQgYnkgYnJvd3NlcnMgdG8gbWVhbiB0aGF0IHRoZSBuZXN0ZWQgbGlzdCBpc1xuLy8gYWN0dWFsbHkgcGFydCBvZiB0aGUgbGlzdCBpdGVtIGFib3ZlIGl0LlxuZnVuY3Rpb24gbm9ybWFsaXplTGlzdChkb20pIHtcbiAgICBmb3IgKGxldCBjaGlsZCA9IGRvbS5maXJzdENoaWxkLCBwcmV2SXRlbSA9IG51bGw7IGNoaWxkOyBjaGlsZCA9IGNoaWxkLm5leHRTaWJsaW5nKSB7XG4gICAgICAgIGxldCBuYW1lID0gY2hpbGQubm9kZVR5cGUgPT0gMSA/IGNoaWxkLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgOiBudWxsO1xuICAgICAgICBpZiAobmFtZSAmJiBsaXN0VGFncy5oYXNPd25Qcm9wZXJ0eShuYW1lKSAmJiBwcmV2SXRlbSkge1xuICAgICAgICAgICAgcHJldkl0ZW0uYXBwZW5kQ2hpbGQoY2hpbGQpO1xuICAgICAgICAgICAgY2hpbGQgPSBwcmV2SXRlbTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChuYW1lID09IFwibGlcIikge1xuICAgICAgICAgICAgcHJldkl0ZW0gPSBjaGlsZDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChuYW1lKSB7XG4gICAgICAgICAgICBwcmV2SXRlbSA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG59XG4vLyBBcHBseSBhIENTUyBzZWxlY3Rvci5cbmZ1bmN0aW9uIG1hdGNoZXMoZG9tLCBzZWxlY3Rvcikge1xuICAgIHJldHVybiAoZG9tLm1hdGNoZXMgfHwgZG9tLm1zTWF0Y2hlc1NlbGVjdG9yIHx8IGRvbS53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHwgZG9tLm1vek1hdGNoZXNTZWxlY3RvcikuY2FsbChkb20sIHNlbGVjdG9yKTtcbn1cbi8vIFRva2VuaXplIGEgc3R5bGUgYXR0cmlidXRlIGludG8gcHJvcGVydHkvdmFsdWUgcGFpcnMuXG5mdW5jdGlvbiBwYXJzZVN0eWxlcyhzdHlsZSkge1xuICAgIGxldCByZSA9IC9cXHMqKFtcXHctXSspXFxzKjpcXHMqKFteO10rKS9nLCBtLCByZXN1bHQgPSBbXTtcbiAgICB3aGlsZSAobSA9IHJlLmV4ZWMoc3R5bGUpKVxuICAgICAgICByZXN1bHQucHVzaChtWzFdLCBtWzJdLnRyaW0oKSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGNvcHkob2JqKSB7XG4gICAgbGV0IGNvcHkgPSB7fTtcbiAgICBmb3IgKGxldCBwcm9wIGluIG9iailcbiAgICAgICAgY29weVtwcm9wXSA9IG9ialtwcm9wXTtcbiAgICByZXR1cm4gY29weTtcbn1cbi8vIFVzZWQgd2hlbiBmaW5kaW5nIGEgbWFyayBhdCB0aGUgdG9wIGxldmVsIG9mIGEgZnJhZ21lbnQgcGFyc2UuXG4vLyBDaGVja3Mgd2hldGhlciBpdCB3b3VsZCBiZSByZWFzb25hYmxlIHRvIGFwcGx5IGEgZ2l2ZW4gbWFyayB0eXBlIHRvXG4vLyBhIGdpdmVuIG5vZGUsIGJ5IGxvb2tpbmcgYXQgdGhlIHdheSB0aGUgbWFyayBvY2N1cnMgaW4gdGhlIHNjaGVtYS5cbmZ1bmN0aW9uIG1hcmtNYXlBcHBseShtYXJrVHlwZSwgbm9kZVR5cGUpIHtcbiAgICBsZXQgbm9kZXMgPSBub2RlVHlwZS5zY2hlbWEubm9kZXM7XG4gICAgZm9yIChsZXQgbmFtZSBpbiBub2Rlcykge1xuICAgICAgICBsZXQgcGFyZW50ID0gbm9kZXNbbmFtZV07XG4gICAgICAgIGlmICghcGFyZW50LmFsbG93c01hcmtUeXBlKG1hcmtUeXBlKSlcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBsZXQgc2VlbiA9IFtdLCBzY2FuID0gKG1hdGNoKSA9PiB7XG4gICAgICAgICAgICBzZWVuLnB1c2gobWF0Y2gpO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtYXRjaC5lZGdlQ291bnQ7IGkrKykge1xuICAgICAgICAgICAgICAgIGxldCB7IHR5cGUsIG5leHQgfSA9IG1hdGNoLmVkZ2UoaSk7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGUgPT0gbm9kZVR5cGUpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIGlmIChzZWVuLmluZGV4T2YobmV4dCkgPCAwICYmIHNjYW4obmV4dCkpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBpZiAoc2NhbihwYXJlbnQuY29udGVudE1hdGNoKSlcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGZpbmRTYW1lTWFya0luU2V0KG1hcmssIHNldCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2V0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChtYXJrLmVxKHNldFtpXSkpXG4gICAgICAgICAgICByZXR1cm4gc2V0W2ldO1xuICAgIH1cbn1cblxuLyoqXG5BIERPTSBzZXJpYWxpemVyIGtub3dzIGhvdyB0byBjb252ZXJ0IFByb3NlTWlycm9yIG5vZGVzIGFuZFxubWFya3Mgb2YgdmFyaW91cyB0eXBlcyB0byBET00gbm9kZXMuXG4qL1xuY2xhc3MgRE9NU2VyaWFsaXplciB7XG4gICAgLyoqXG4gICAgQ3JlYXRlIGEgc2VyaWFsaXplci4gYG5vZGVzYCBzaG91bGQgbWFwIG5vZGUgbmFtZXMgdG8gZnVuY3Rpb25zXG4gICAgdGhhdCB0YWtlIGEgbm9kZSBhbmQgcmV0dXJuIGEgZGVzY3JpcHRpb24gb2YgdGhlIGNvcnJlc3BvbmRpbmdcbiAgICBET00uIGBtYXJrc2AgZG9lcyB0aGUgc2FtZSBmb3IgbWFyayBuYW1lcywgYnV0IGFsc28gZ2V0cyBhblxuICAgIGFyZ3VtZW50IHRoYXQgdGVsbHMgaXQgd2hldGhlciB0aGUgbWFyaydzIGNvbnRlbnQgaXMgYmxvY2sgb3JcbiAgICBpbmxpbmUgY29udGVudCAoZm9yIHR5cGljYWwgdXNlLCBpdCdsbCBhbHdheXMgYmUgaW5saW5lKS4gQSBtYXJrXG4gICAgc2VyaWFsaXplciBtYXkgYmUgYG51bGxgIHRvIGluZGljYXRlIHRoYXQgbWFya3Mgb2YgdGhhdCB0eXBlXG4gICAgc2hvdWxkIG5vdCBiZSBzZXJpYWxpemVkLlxuICAgICovXG4gICAgY29uc3RydWN0b3IoXG4gICAgLyoqXG4gICAgVGhlIG5vZGUgc2VyaWFsaXphdGlvbiBmdW5jdGlvbnMuXG4gICAgKi9cbiAgICBub2RlcywgXG4gICAgLyoqXG4gICAgVGhlIG1hcmsgc2VyaWFsaXphdGlvbiBmdW5jdGlvbnMuXG4gICAgKi9cbiAgICBtYXJrcykge1xuICAgICAgICB0aGlzLm5vZGVzID0gbm9kZXM7XG4gICAgICAgIHRoaXMubWFya3MgPSBtYXJrcztcbiAgICB9XG4gICAgLyoqXG4gICAgU2VyaWFsaXplIHRoZSBjb250ZW50IG9mIHRoaXMgZnJhZ21lbnQgdG8gYSBET00gZnJhZ21lbnQuIFdoZW5cbiAgICBub3QgaW4gdGhlIGJyb3dzZXIsIHRoZSBgZG9jdW1lbnRgIG9wdGlvbiwgY29udGFpbmluZyBhIERPTVxuICAgIGRvY3VtZW50LCBzaG91bGQgYmUgcGFzc2VkIHNvIHRoYXQgdGhlIHNlcmlhbGl6ZXIgY2FuIGNyZWF0ZVxuICAgIG5vZGVzLlxuICAgICovXG4gICAgc2VyaWFsaXplRnJhZ21lbnQoZnJhZ21lbnQsIG9wdGlvbnMgPSB7fSwgdGFyZ2V0KSB7XG4gICAgICAgIGlmICghdGFyZ2V0KVxuICAgICAgICAgICAgdGFyZ2V0ID0gZG9jKG9wdGlvbnMpLmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcbiAgICAgICAgbGV0IHRvcCA9IHRhcmdldCwgYWN0aXZlID0gW107XG4gICAgICAgIGZyYWdtZW50LmZvckVhY2gobm9kZSA9PiB7XG4gICAgICAgICAgICBpZiAoYWN0aXZlLmxlbmd0aCB8fCBub2RlLm1hcmtzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGxldCBrZWVwID0gMCwgcmVuZGVyZWQgPSAwO1xuICAgICAgICAgICAgICAgIHdoaWxlIChrZWVwIDwgYWN0aXZlLmxlbmd0aCAmJiByZW5kZXJlZCA8IG5vZGUubWFya3MubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBuZXh0ID0gbm9kZS5tYXJrc1tyZW5kZXJlZF07XG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5tYXJrc1tuZXh0LnR5cGUubmFtZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlcmVkKys7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoIW5leHQuZXEoYWN0aXZlW2tlZXBdWzBdKSB8fCBuZXh0LnR5cGUuc3BlYy5zcGFubmluZyA9PT0gZmFsc2UpXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAga2VlcCsrO1xuICAgICAgICAgICAgICAgICAgICByZW5kZXJlZCsrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB3aGlsZSAoa2VlcCA8IGFjdGl2ZS5sZW5ndGgpXG4gICAgICAgICAgICAgICAgICAgIHRvcCA9IGFjdGl2ZS5wb3AoKVsxXTtcbiAgICAgICAgICAgICAgICB3aGlsZSAocmVuZGVyZWQgPCBub2RlLm1hcmtzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgYWRkID0gbm9kZS5tYXJrc1tyZW5kZXJlZCsrXTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG1hcmtET00gPSB0aGlzLnNlcmlhbGl6ZU1hcmsoYWRkLCBub2RlLmlzSW5saW5lLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1hcmtET00pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2ZS5wdXNoKFthZGQsIHRvcF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9wLmFwcGVuZENoaWxkKG1hcmtET00uZG9tKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcCA9IG1hcmtET00uY29udGVudERPTSB8fCBtYXJrRE9NLmRvbTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRvcC5hcHBlbmRDaGlsZCh0aGlzLnNlcmlhbGl6ZU5vZGVJbm5lcihub2RlLCBvcHRpb25zKSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH1cbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIHNlcmlhbGl6ZU5vZGVJbm5lcihub2RlLCBvcHRpb25zKSB7XG4gICAgICAgIGxldCB7IGRvbSwgY29udGVudERPTSB9ID0gRE9NU2VyaWFsaXplci5yZW5kZXJTcGVjKGRvYyhvcHRpb25zKSwgdGhpcy5ub2Rlc1tub2RlLnR5cGUubmFtZV0obm9kZSkpO1xuICAgICAgICBpZiAoY29udGVudERPTSkge1xuICAgICAgICAgICAgaWYgKG5vZGUuaXNMZWFmKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiQ29udGVudCBob2xlIG5vdCBhbGxvd2VkIGluIGEgbGVhZiBub2RlIHNwZWNcIik7XG4gICAgICAgICAgICB0aGlzLnNlcmlhbGl6ZUZyYWdtZW50KG5vZGUuY29udGVudCwgb3B0aW9ucywgY29udGVudERPTSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRvbTtcbiAgICB9XG4gICAgLyoqXG4gICAgU2VyaWFsaXplIHRoaXMgbm9kZSB0byBhIERPTSBub2RlLiBUaGlzIGNhbiBiZSB1c2VmdWwgd2hlbiB5b3VcbiAgICBuZWVkIHRvIHNlcmlhbGl6ZSBhIHBhcnQgb2YgYSBkb2N1bWVudCwgYXMgb3Bwb3NlZCB0byB0aGUgd2hvbGVcbiAgICBkb2N1bWVudC4gVG8gc2VyaWFsaXplIGEgd2hvbGUgZG9jdW1lbnQsIHVzZVxuICAgIFtgc2VyaWFsaXplRnJhZ21lbnRgXShodHRwczovL3Byb3NlbWlycm9yLm5ldC9kb2NzL3JlZi8jbW9kZWwuRE9NU2VyaWFsaXplci5zZXJpYWxpemVGcmFnbWVudCkgb25cbiAgICBpdHMgW2NvbnRlbnRdKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyNtb2RlbC5Ob2RlLmNvbnRlbnQpLlxuICAgICovXG4gICAgc2VyaWFsaXplTm9kZShub2RlLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgbGV0IGRvbSA9IHRoaXMuc2VyaWFsaXplTm9kZUlubmVyKG5vZGUsIG9wdGlvbnMpO1xuICAgICAgICBmb3IgKGxldCBpID0gbm9kZS5tYXJrcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgbGV0IHdyYXAgPSB0aGlzLnNlcmlhbGl6ZU1hcmsobm9kZS5tYXJrc1tpXSwgbm9kZS5pc0lubGluZSwgb3B0aW9ucyk7XG4gICAgICAgICAgICBpZiAod3JhcCkge1xuICAgICAgICAgICAgICAgICh3cmFwLmNvbnRlbnRET00gfHwgd3JhcC5kb20pLmFwcGVuZENoaWxkKGRvbSk7XG4gICAgICAgICAgICAgICAgZG9tID0gd3JhcC5kb207XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRvbTtcbiAgICB9XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBzZXJpYWxpemVNYXJrKG1hcmssIGlubGluZSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIGxldCB0b0RPTSA9IHRoaXMubWFya3NbbWFyay50eXBlLm5hbWVdO1xuICAgICAgICByZXR1cm4gdG9ET00gJiYgRE9NU2VyaWFsaXplci5yZW5kZXJTcGVjKGRvYyhvcHRpb25zKSwgdG9ET00obWFyaywgaW5saW5lKSk7XG4gICAgfVxuICAgIC8qKlxuICAgIFJlbmRlciBhbiBbb3V0cHV0IHNwZWNdKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyNtb2RlbC5ET01PdXRwdXRTcGVjKSB0byBhIERPTSBub2RlLiBJZlxuICAgIHRoZSBzcGVjIGhhcyBhIGhvbGUgKHplcm8pIGluIGl0LCBgY29udGVudERPTWAgd2lsbCBwb2ludCBhdCB0aGVcbiAgICBub2RlIHdpdGggdGhlIGhvbGUuXG4gICAgKi9cbiAgICBzdGF0aWMgcmVuZGVyU3BlYyhkb2MsIHN0cnVjdHVyZSwgeG1sTlMgPSBudWxsKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc3RydWN0dXJlID09IFwic3RyaW5nXCIpXG4gICAgICAgICAgICByZXR1cm4geyBkb206IGRvYy5jcmVhdGVUZXh0Tm9kZShzdHJ1Y3R1cmUpIH07XG4gICAgICAgIGlmIChzdHJ1Y3R1cmUubm9kZVR5cGUgIT0gbnVsbClcbiAgICAgICAgICAgIHJldHVybiB7IGRvbTogc3RydWN0dXJlIH07XG4gICAgICAgIGlmIChzdHJ1Y3R1cmUuZG9tICYmIHN0cnVjdHVyZS5kb20ubm9kZVR5cGUgIT0gbnVsbClcbiAgICAgICAgICAgIHJldHVybiBzdHJ1Y3R1cmU7XG4gICAgICAgIGxldCB0YWdOYW1lID0gc3RydWN0dXJlWzBdLCBzcGFjZSA9IHRhZ05hbWUuaW5kZXhPZihcIiBcIik7XG4gICAgICAgIGlmIChzcGFjZSA+IDApIHtcbiAgICAgICAgICAgIHhtbE5TID0gdGFnTmFtZS5zbGljZSgwLCBzcGFjZSk7XG4gICAgICAgICAgICB0YWdOYW1lID0gdGFnTmFtZS5zbGljZShzcGFjZSArIDEpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBjb250ZW50RE9NO1xuICAgICAgICBsZXQgZG9tID0gKHhtbE5TID8gZG9jLmNyZWF0ZUVsZW1lbnROUyh4bWxOUywgdGFnTmFtZSkgOiBkb2MuY3JlYXRlRWxlbWVudCh0YWdOYW1lKSk7XG4gICAgICAgIGxldCBhdHRycyA9IHN0cnVjdHVyZVsxXSwgc3RhcnQgPSAxO1xuICAgICAgICBpZiAoYXR0cnMgJiYgdHlwZW9mIGF0dHJzID09IFwib2JqZWN0XCIgJiYgYXR0cnMubm9kZVR5cGUgPT0gbnVsbCAmJiAhQXJyYXkuaXNBcnJheShhdHRycykpIHtcbiAgICAgICAgICAgIHN0YXJ0ID0gMjtcbiAgICAgICAgICAgIGZvciAobGV0IG5hbWUgaW4gYXR0cnMpXG4gICAgICAgICAgICAgICAgaWYgKGF0dHJzW25hbWVdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHNwYWNlID0gbmFtZS5pbmRleE9mKFwiIFwiKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNwYWNlID4gMClcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvbS5zZXRBdHRyaWJ1dGVOUyhuYW1lLnNsaWNlKDAsIHNwYWNlKSwgbmFtZS5zbGljZShzcGFjZSArIDEpLCBhdHRyc1tuYW1lXSk7XG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvbS5zZXRBdHRyaWJ1dGUobmFtZSwgYXR0cnNbbmFtZV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBpID0gc3RhcnQ7IGkgPCBzdHJ1Y3R1cmUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBjaGlsZCA9IHN0cnVjdHVyZVtpXTtcbiAgICAgICAgICAgIGlmIChjaGlsZCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGlmIChpIDwgc3RydWN0dXJlLmxlbmd0aCAtIDEgfHwgaSA+IHN0YXJ0KVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkNvbnRlbnQgaG9sZSBtdXN0IGJlIHRoZSBvbmx5IGNoaWxkIG9mIGl0cyBwYXJlbnQgbm9kZVwiKTtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBkb20sIGNvbnRlbnRET006IGRvbSB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbGV0IHsgZG9tOiBpbm5lciwgY29udGVudERPTTogaW5uZXJDb250ZW50IH0gPSBET01TZXJpYWxpemVyLnJlbmRlclNwZWMoZG9jLCBjaGlsZCwgeG1sTlMpO1xuICAgICAgICAgICAgICAgIGRvbS5hcHBlbmRDaGlsZChpbm5lcik7XG4gICAgICAgICAgICAgICAgaWYgKGlubmVyQ29udGVudCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY29udGVudERPTSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiTXVsdGlwbGUgY29udGVudCBob2xlc1wiKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGVudERPTSA9IGlubmVyQ29udGVudDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgZG9tLCBjb250ZW50RE9NIH07XG4gICAgfVxuICAgIC8qKlxuICAgIEJ1aWxkIGEgc2VyaWFsaXplciB1c2luZyB0aGUgW2B0b0RPTWBdKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyNtb2RlbC5Ob2RlU3BlYy50b0RPTSlcbiAgICBwcm9wZXJ0aWVzIGluIGEgc2NoZW1hJ3Mgbm9kZSBhbmQgbWFyayBzcGVjcy5cbiAgICAqL1xuICAgIHN0YXRpYyBmcm9tU2NoZW1hKHNjaGVtYSkge1xuICAgICAgICByZXR1cm4gc2NoZW1hLmNhY2hlZC5kb21TZXJpYWxpemVyIHx8XG4gICAgICAgICAgICAoc2NoZW1hLmNhY2hlZC5kb21TZXJpYWxpemVyID0gbmV3IERPTVNlcmlhbGl6ZXIodGhpcy5ub2Rlc0Zyb21TY2hlbWEoc2NoZW1hKSwgdGhpcy5tYXJrc0Zyb21TY2hlbWEoc2NoZW1hKSkpO1xuICAgIH1cbiAgICAvKipcbiAgICBHYXRoZXIgdGhlIHNlcmlhbGl6ZXJzIGluIGEgc2NoZW1hJ3Mgbm9kZSBzcGVjcyBpbnRvIGFuIG9iamVjdC5cbiAgICBUaGlzIGNhbiBiZSB1c2VmdWwgYXMgYSBiYXNlIHRvIGJ1aWxkIGEgY3VzdG9tIHNlcmlhbGl6ZXIgZnJvbS5cbiAgICAqL1xuICAgIHN0YXRpYyBub2Rlc0Zyb21TY2hlbWEoc2NoZW1hKSB7XG4gICAgICAgIGxldCByZXN1bHQgPSBnYXRoZXJUb0RPTShzY2hlbWEubm9kZXMpO1xuICAgICAgICBpZiAoIXJlc3VsdC50ZXh0KVxuICAgICAgICAgICAgcmVzdWx0LnRleHQgPSBub2RlID0+IG5vZGUudGV4dDtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLyoqXG4gICAgR2F0aGVyIHRoZSBzZXJpYWxpemVycyBpbiBhIHNjaGVtYSdzIG1hcmsgc3BlY3MgaW50byBhbiBvYmplY3QuXG4gICAgKi9cbiAgICBzdGF0aWMgbWFya3NGcm9tU2NoZW1hKHNjaGVtYSkge1xuICAgICAgICByZXR1cm4gZ2F0aGVyVG9ET00oc2NoZW1hLm1hcmtzKTtcbiAgICB9XG59XG5mdW5jdGlvbiBnYXRoZXJUb0RPTShvYmopIHtcbiAgICBsZXQgcmVzdWx0ID0ge307XG4gICAgZm9yIChsZXQgbmFtZSBpbiBvYmopIHtcbiAgICAgICAgbGV0IHRvRE9NID0gb2JqW25hbWVdLnNwZWMudG9ET007XG4gICAgICAgIGlmICh0b0RPTSlcbiAgICAgICAgICAgIHJlc3VsdFtuYW1lXSA9IHRvRE9NO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gZG9jKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gb3B0aW9ucy5kb2N1bWVudCB8fCB3aW5kb3cuZG9jdW1lbnQ7XG59XG5cbmV4cG9ydCB7IENvbnRlbnRNYXRjaCwgRE9NUGFyc2VyLCBET01TZXJpYWxpemVyLCBGcmFnbWVudCwgTWFyaywgTWFya1R5cGUsIE5vZGUsIE5vZGVSYW5nZSwgTm9kZVR5cGUsIFJlcGxhY2VFcnJvciwgUmVzb2x2ZWRQb3MsIFNjaGVtYSwgU2xpY2UgfTtcbiIsImltcG9ydCB7IFNsaWNlLCBGcmFnbWVudCwgTWFyaywgTm9kZSB9IGZyb20gJ3Byb3NlbWlycm9yLW1vZGVsJztcbmltcG9ydCB7IFJlcGxhY2VTdGVwLCBSZXBsYWNlQXJvdW5kU3RlcCwgVHJhbnNmb3JtIH0gZnJvbSAncHJvc2VtaXJyb3ItdHJhbnNmb3JtJztcblxuY29uc3QgY2xhc3Nlc0J5SWQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuLyoqXG5TdXBlcmNsYXNzIGZvciBlZGl0b3Igc2VsZWN0aW9ucy4gRXZlcnkgc2VsZWN0aW9uIHR5cGUgc2hvdWxkXG5leHRlbmQgdGhpcy4gU2hvdWxkIG5vdCBiZSBpbnN0YW50aWF0ZWQgZGlyZWN0bHkuXG4qL1xuY2xhc3MgU2VsZWN0aW9uIHtcbiAgICAvKipcbiAgICBJbml0aWFsaXplIGEgc2VsZWN0aW9uIHdpdGggdGhlIGhlYWQgYW5kIGFuY2hvciBhbmQgcmFuZ2VzLiBJZiBub1xuICAgIHJhbmdlcyBhcmUgZ2l2ZW4sIGNvbnN0cnVjdHMgYSBzaW5nbGUgcmFuZ2UgYWNyb3NzIGAkYW5jaG9yYCBhbmRcbiAgICBgJGhlYWRgLlxuICAgICovXG4gICAgY29uc3RydWN0b3IoXG4gICAgLyoqXG4gICAgVGhlIHJlc29sdmVkIGFuY2hvciBvZiB0aGUgc2VsZWN0aW9uICh0aGUgc2lkZSB0aGF0IHN0YXlzIGluXG4gICAgcGxhY2Ugd2hlbiB0aGUgc2VsZWN0aW9uIGlzIG1vZGlmaWVkKS5cbiAgICAqL1xuICAgICRhbmNob3IsIFxuICAgIC8qKlxuICAgIFRoZSByZXNvbHZlZCBoZWFkIG9mIHRoZSBzZWxlY3Rpb24gKHRoZSBzaWRlIHRoYXQgbW92ZXMgd2hlblxuICAgIHRoZSBzZWxlY3Rpb24gaXMgbW9kaWZpZWQpLlxuICAgICovXG4gICAgJGhlYWQsIHJhbmdlcykge1xuICAgICAgICB0aGlzLiRhbmNob3IgPSAkYW5jaG9yO1xuICAgICAgICB0aGlzLiRoZWFkID0gJGhlYWQ7XG4gICAgICAgIHRoaXMucmFuZ2VzID0gcmFuZ2VzIHx8IFtuZXcgU2VsZWN0aW9uUmFuZ2UoJGFuY2hvci5taW4oJGhlYWQpLCAkYW5jaG9yLm1heCgkaGVhZCkpXTtcbiAgICB9XG4gICAgLyoqXG4gICAgVGhlIHNlbGVjdGlvbidzIGFuY2hvciwgYXMgYW4gdW5yZXNvbHZlZCBwb3NpdGlvbi5cbiAgICAqL1xuICAgIGdldCBhbmNob3IoKSB7IHJldHVybiB0aGlzLiRhbmNob3IucG9zOyB9XG4gICAgLyoqXG4gICAgVGhlIHNlbGVjdGlvbidzIGhlYWQuXG4gICAgKi9cbiAgICBnZXQgaGVhZCgpIHsgcmV0dXJuIHRoaXMuJGhlYWQucG9zOyB9XG4gICAgLyoqXG4gICAgVGhlIGxvd2VyIGJvdW5kIG9mIHRoZSBzZWxlY3Rpb24ncyBtYWluIHJhbmdlLlxuICAgICovXG4gICAgZ2V0IGZyb20oKSB7IHJldHVybiB0aGlzLiRmcm9tLnBvczsgfVxuICAgIC8qKlxuICAgIFRoZSB1cHBlciBib3VuZCBvZiB0aGUgc2VsZWN0aW9uJ3MgbWFpbiByYW5nZS5cbiAgICAqL1xuICAgIGdldCB0bygpIHsgcmV0dXJuIHRoaXMuJHRvLnBvczsgfVxuICAgIC8qKlxuICAgIFRoZSByZXNvbHZlZCBsb3dlciAgYm91bmQgb2YgdGhlIHNlbGVjdGlvbidzIG1haW4gcmFuZ2UuXG4gICAgKi9cbiAgICBnZXQgJGZyb20oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJhbmdlc1swXS4kZnJvbTtcbiAgICB9XG4gICAgLyoqXG4gICAgVGhlIHJlc29sdmVkIHVwcGVyIGJvdW5kIG9mIHRoZSBzZWxlY3Rpb24ncyBtYWluIHJhbmdlLlxuICAgICovXG4gICAgZ2V0ICR0bygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmFuZ2VzWzBdLiR0bztcbiAgICB9XG4gICAgLyoqXG4gICAgSW5kaWNhdGVzIHdoZXRoZXIgdGhlIHNlbGVjdGlvbiBjb250YWlucyBhbnkgY29udGVudC5cbiAgICAqL1xuICAgIGdldCBlbXB0eSgpIHtcbiAgICAgICAgbGV0IHJhbmdlcyA9IHRoaXMucmFuZ2VzO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJhbmdlcy5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgIGlmIChyYW5nZXNbaV0uJGZyb20ucG9zICE9IHJhbmdlc1tpXS4kdG8ucG9zKVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIC8qKlxuICAgIEdldCB0aGUgY29udGVudCBvZiB0aGlzIHNlbGVjdGlvbiBhcyBhIHNsaWNlLlxuICAgICovXG4gICAgY29udGVudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuJGZyb20uZG9jLnNsaWNlKHRoaXMuZnJvbSwgdGhpcy50bywgdHJ1ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgIFJlcGxhY2UgdGhlIHNlbGVjdGlvbiB3aXRoIGEgc2xpY2Ugb3IsIGlmIG5vIHNsaWNlIGlzIGdpdmVuLFxuICAgIGRlbGV0ZSB0aGUgc2VsZWN0aW9uLiBXaWxsIGFwcGVuZCB0byB0aGUgZ2l2ZW4gdHJhbnNhY3Rpb24uXG4gICAgKi9cbiAgICByZXBsYWNlKHRyLCBjb250ZW50ID0gU2xpY2UuZW1wdHkpIHtcbiAgICAgICAgLy8gUHV0IHRoZSBuZXcgc2VsZWN0aW9uIGF0IHRoZSBwb3NpdGlvbiBhZnRlciB0aGUgaW5zZXJ0ZWRcbiAgICAgICAgLy8gY29udGVudC4gV2hlbiB0aGF0IGVuZGVkIGluIGFuIGlubGluZSBub2RlLCBzZWFyY2ggYmFja3dhcmRzLFxuICAgICAgICAvLyB0byBnZXQgdGhlIHBvc2l0aW9uIGFmdGVyIHRoYXQgbm9kZS4gSWYgbm90LCBzZWFyY2ggZm9yd2FyZC5cbiAgICAgICAgbGV0IGxhc3ROb2RlID0gY29udGVudC5jb250ZW50Lmxhc3RDaGlsZCwgbGFzdFBhcmVudCA9IG51bGw7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29udGVudC5vcGVuRW5kOyBpKyspIHtcbiAgICAgICAgICAgIGxhc3RQYXJlbnQgPSBsYXN0Tm9kZTtcbiAgICAgICAgICAgIGxhc3ROb2RlID0gbGFzdE5vZGUubGFzdENoaWxkO1xuICAgICAgICB9XG4gICAgICAgIGxldCBtYXBGcm9tID0gdHIuc3RlcHMubGVuZ3RoLCByYW5nZXMgPSB0aGlzLnJhbmdlcztcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByYW5nZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCB7ICRmcm9tLCAkdG8gfSA9IHJhbmdlc1tpXSwgbWFwcGluZyA9IHRyLm1hcHBpbmcuc2xpY2UobWFwRnJvbSk7XG4gICAgICAgICAgICB0ci5yZXBsYWNlUmFuZ2UobWFwcGluZy5tYXAoJGZyb20ucG9zKSwgbWFwcGluZy5tYXAoJHRvLnBvcyksIGkgPyBTbGljZS5lbXB0eSA6IGNvbnRlbnQpO1xuICAgICAgICAgICAgaWYgKGkgPT0gMClcbiAgICAgICAgICAgICAgICBzZWxlY3Rpb25Ub0luc2VydGlvbkVuZCh0ciwgbWFwRnJvbSwgKGxhc3ROb2RlID8gbGFzdE5vZGUuaXNJbmxpbmUgOiBsYXN0UGFyZW50ICYmIGxhc3RQYXJlbnQuaXNUZXh0YmxvY2spID8gLTEgOiAxKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICBSZXBsYWNlIHRoZSBzZWxlY3Rpb24gd2l0aCB0aGUgZ2l2ZW4gbm9kZSwgYXBwZW5kaW5nIHRoZSBjaGFuZ2VzXG4gICAgdG8gdGhlIGdpdmVuIHRyYW5zYWN0aW9uLlxuICAgICovXG4gICAgcmVwbGFjZVdpdGgodHIsIG5vZGUpIHtcbiAgICAgICAgbGV0IG1hcEZyb20gPSB0ci5zdGVwcy5sZW5ndGgsIHJhbmdlcyA9IHRoaXMucmFuZ2VzO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJhbmdlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IHsgJGZyb20sICR0byB9ID0gcmFuZ2VzW2ldLCBtYXBwaW5nID0gdHIubWFwcGluZy5zbGljZShtYXBGcm9tKTtcbiAgICAgICAgICAgIGxldCBmcm9tID0gbWFwcGluZy5tYXAoJGZyb20ucG9zKSwgdG8gPSBtYXBwaW5nLm1hcCgkdG8ucG9zKTtcbiAgICAgICAgICAgIGlmIChpKSB7XG4gICAgICAgICAgICAgICAgdHIuZGVsZXRlUmFuZ2UoZnJvbSwgdG8pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdHIucmVwbGFjZVJhbmdlV2l0aChmcm9tLCB0bywgbm9kZSk7XG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uVG9JbnNlcnRpb25FbmQodHIsIG1hcEZyb20sIG5vZGUuaXNJbmxpbmUgPyAtMSA6IDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgIEZpbmQgYSB2YWxpZCBjdXJzb3Igb3IgbGVhZiBub2RlIHNlbGVjdGlvbiBzdGFydGluZyBhdCB0aGUgZ2l2ZW5cbiAgICBwb3NpdGlvbiBhbmQgc2VhcmNoaW5nIGJhY2sgaWYgYGRpcmAgaXMgbmVnYXRpdmUsIGFuZCBmb3J3YXJkIGlmXG4gICAgcG9zaXRpdmUuIFdoZW4gYHRleHRPbmx5YCBpcyB0cnVlLCBvbmx5IGNvbnNpZGVyIGN1cnNvclxuICAgIHNlbGVjdGlvbnMuIFdpbGwgcmV0dXJuIG51bGwgd2hlbiBubyB2YWxpZCBzZWxlY3Rpb24gcG9zaXRpb24gaXNcbiAgICBmb3VuZC5cbiAgICAqL1xuICAgIHN0YXRpYyBmaW5kRnJvbSgkcG9zLCBkaXIsIHRleHRPbmx5ID0gZmFsc2UpIHtcbiAgICAgICAgbGV0IGlubmVyID0gJHBvcy5wYXJlbnQuaW5saW5lQ29udGVudCA/IG5ldyBUZXh0U2VsZWN0aW9uKCRwb3MpXG4gICAgICAgICAgICA6IGZpbmRTZWxlY3Rpb25JbigkcG9zLm5vZGUoMCksICRwb3MucGFyZW50LCAkcG9zLnBvcywgJHBvcy5pbmRleCgpLCBkaXIsIHRleHRPbmx5KTtcbiAgICAgICAgaWYgKGlubmVyKVxuICAgICAgICAgICAgcmV0dXJuIGlubmVyO1xuICAgICAgICBmb3IgKGxldCBkZXB0aCA9ICRwb3MuZGVwdGggLSAxOyBkZXB0aCA+PSAwOyBkZXB0aC0tKSB7XG4gICAgICAgICAgICBsZXQgZm91bmQgPSBkaXIgPCAwXG4gICAgICAgICAgICAgICAgPyBmaW5kU2VsZWN0aW9uSW4oJHBvcy5ub2RlKDApLCAkcG9zLm5vZGUoZGVwdGgpLCAkcG9zLmJlZm9yZShkZXB0aCArIDEpLCAkcG9zLmluZGV4KGRlcHRoKSwgZGlyLCB0ZXh0T25seSlcbiAgICAgICAgICAgICAgICA6IGZpbmRTZWxlY3Rpb25JbigkcG9zLm5vZGUoMCksICRwb3Mubm9kZShkZXB0aCksICRwb3MuYWZ0ZXIoZGVwdGggKyAxKSwgJHBvcy5pbmRleChkZXB0aCkgKyAxLCBkaXIsIHRleHRPbmx5KTtcbiAgICAgICAgICAgIGlmIChmb3VuZClcbiAgICAgICAgICAgICAgICByZXR1cm4gZm91bmQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIC8qKlxuICAgIEZpbmQgYSB2YWxpZCBjdXJzb3Igb3IgbGVhZiBub2RlIHNlbGVjdGlvbiBuZWFyIHRoZSBnaXZlblxuICAgIHBvc2l0aW9uLiBTZWFyY2hlcyBmb3J3YXJkIGZpcnN0IGJ5IGRlZmF1bHQsIGJ1dCBpZiBgYmlhc2AgaXNcbiAgICBuZWdhdGl2ZSwgaXQgd2lsbCBzZWFyY2ggYmFja3dhcmRzIGZpcnN0LlxuICAgICovXG4gICAgc3RhdGljIG5lYXIoJHBvcywgYmlhcyA9IDEpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmluZEZyb20oJHBvcywgYmlhcykgfHwgdGhpcy5maW5kRnJvbSgkcG9zLCAtYmlhcykgfHwgbmV3IEFsbFNlbGVjdGlvbigkcG9zLm5vZGUoMCkpO1xuICAgIH1cbiAgICAvKipcbiAgICBGaW5kIHRoZSBjdXJzb3Igb3IgbGVhZiBub2RlIHNlbGVjdGlvbiBjbG9zZXN0IHRvIHRoZSBzdGFydCBvZlxuICAgIHRoZSBnaXZlbiBkb2N1bWVudC4gV2lsbCByZXR1cm4gYW5cbiAgICBbYEFsbFNlbGVjdGlvbmBdKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyNzdGF0ZS5BbGxTZWxlY3Rpb24pIGlmIG5vIHZhbGlkIHBvc2l0aW9uXG4gICAgZXhpc3RzLlxuICAgICovXG4gICAgc3RhdGljIGF0U3RhcnQoZG9jKSB7XG4gICAgICAgIHJldHVybiBmaW5kU2VsZWN0aW9uSW4oZG9jLCBkb2MsIDAsIDAsIDEpIHx8IG5ldyBBbGxTZWxlY3Rpb24oZG9jKTtcbiAgICB9XG4gICAgLyoqXG4gICAgRmluZCB0aGUgY3Vyc29yIG9yIGxlYWYgbm9kZSBzZWxlY3Rpb24gY2xvc2VzdCB0byB0aGUgZW5kIG9mIHRoZVxuICAgIGdpdmVuIGRvY3VtZW50LlxuICAgICovXG4gICAgc3RhdGljIGF0RW5kKGRvYykge1xuICAgICAgICByZXR1cm4gZmluZFNlbGVjdGlvbkluKGRvYywgZG9jLCBkb2MuY29udGVudC5zaXplLCBkb2MuY2hpbGRDb3VudCwgLTEpIHx8IG5ldyBBbGxTZWxlY3Rpb24oZG9jKTtcbiAgICB9XG4gICAgLyoqXG4gICAgRGVzZXJpYWxpemUgdGhlIEpTT04gcmVwcmVzZW50YXRpb24gb2YgYSBzZWxlY3Rpb24uIE11c3QgYmVcbiAgICBpbXBsZW1lbnRlZCBmb3IgY3VzdG9tIGNsYXNzZXMgKGFzIGEgc3RhdGljIGNsYXNzIG1ldGhvZCkuXG4gICAgKi9cbiAgICBzdGF0aWMgZnJvbUpTT04oZG9jLCBqc29uKSB7XG4gICAgICAgIGlmICghanNvbiB8fCAhanNvbi50eXBlKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJJbnZhbGlkIGlucHV0IGZvciBTZWxlY3Rpb24uZnJvbUpTT05cIik7XG4gICAgICAgIGxldCBjbHMgPSBjbGFzc2VzQnlJZFtqc29uLnR5cGVdO1xuICAgICAgICBpZiAoIWNscylcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKGBObyBzZWxlY3Rpb24gdHlwZSAke2pzb24udHlwZX0gZGVmaW5lZGApO1xuICAgICAgICByZXR1cm4gY2xzLmZyb21KU09OKGRvYywganNvbik7XG4gICAgfVxuICAgIC8qKlxuICAgIFRvIGJlIGFibGUgdG8gZGVzZXJpYWxpemUgc2VsZWN0aW9ucyBmcm9tIEpTT04sIGN1c3RvbSBzZWxlY3Rpb25cbiAgICBjbGFzc2VzIG11c3QgcmVnaXN0ZXIgdGhlbXNlbHZlcyB3aXRoIGFuIElEIHN0cmluZywgc28gdGhhdCB0aGV5XG4gICAgY2FuIGJlIGRpc2FtYmlndWF0ZWQuIFRyeSB0byBwaWNrIHNvbWV0aGluZyB0aGF0J3MgdW5saWtlbHkgdG9cbiAgICBjbGFzaCB3aXRoIGNsYXNzZXMgZnJvbSBvdGhlciBtb2R1bGVzLlxuICAgICovXG4gICAgc3RhdGljIGpzb25JRChpZCwgc2VsZWN0aW9uQ2xhc3MpIHtcbiAgICAgICAgaWYgKGlkIGluIGNsYXNzZXNCeUlkKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJEdXBsaWNhdGUgdXNlIG9mIHNlbGVjdGlvbiBKU09OIElEIFwiICsgaWQpO1xuICAgICAgICBjbGFzc2VzQnlJZFtpZF0gPSBzZWxlY3Rpb25DbGFzcztcbiAgICAgICAgc2VsZWN0aW9uQ2xhc3MucHJvdG90eXBlLmpzb25JRCA9IGlkO1xuICAgICAgICByZXR1cm4gc2VsZWN0aW9uQ2xhc3M7XG4gICAgfVxuICAgIC8qKlxuICAgIEdldCBhIFtib29rbWFya10oaHR0cHM6Ly9wcm9zZW1pcnJvci5uZXQvZG9jcy9yZWYvI3N0YXRlLlNlbGVjdGlvbkJvb2ttYXJrKSBmb3IgdGhpcyBzZWxlY3Rpb24sXG4gICAgd2hpY2ggaXMgYSB2YWx1ZSB0aGF0IGNhbiBiZSBtYXBwZWQgd2l0aG91dCBoYXZpbmcgYWNjZXNzIHRvIGFcbiAgICBjdXJyZW50IGRvY3VtZW50LCBhbmQgbGF0ZXIgcmVzb2x2ZWQgdG8gYSByZWFsIHNlbGVjdGlvbiBmb3IgYVxuICAgIGdpdmVuIGRvY3VtZW50IGFnYWluLiAoVGhpcyBpcyB1c2VkIG1vc3RseSBieSB0aGUgaGlzdG9yeSB0b1xuICAgIHRyYWNrIGFuZCByZXN0b3JlIG9sZCBzZWxlY3Rpb25zLikgVGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gb2ZcbiAgICB0aGlzIG1ldGhvZCBqdXN0IGNvbnZlcnRzIHRoZSBzZWxlY3Rpb24gdG8gYSB0ZXh0IHNlbGVjdGlvbiBhbmRcbiAgICByZXR1cm5zIHRoZSBib29rbWFyayBmb3IgdGhhdC5cbiAgICAqL1xuICAgIGdldEJvb2ttYXJrKCkge1xuICAgICAgICByZXR1cm4gVGV4dFNlbGVjdGlvbi5iZXR3ZWVuKHRoaXMuJGFuY2hvciwgdGhpcy4kaGVhZCkuZ2V0Qm9va21hcmsoKTtcbiAgICB9XG59XG5TZWxlY3Rpb24ucHJvdG90eXBlLnZpc2libGUgPSB0cnVlO1xuLyoqXG5SZXByZXNlbnRzIGEgc2VsZWN0ZWQgcmFuZ2UgaW4gYSBkb2N1bWVudC5cbiovXG5jbGFzcyBTZWxlY3Rpb25SYW5nZSB7XG4gICAgLyoqXG4gICAgQ3JlYXRlIGEgcmFuZ2UuXG4gICAgKi9cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAvKipcbiAgICBUaGUgbG93ZXIgYm91bmQgb2YgdGhlIHJhbmdlLlxuICAgICovXG4gICAgJGZyb20sIFxuICAgIC8qKlxuICAgIFRoZSB1cHBlciBib3VuZCBvZiB0aGUgcmFuZ2UuXG4gICAgKi9cbiAgICAkdG8pIHtcbiAgICAgICAgdGhpcy4kZnJvbSA9ICRmcm9tO1xuICAgICAgICB0aGlzLiR0byA9ICR0bztcbiAgICB9XG59XG5sZXQgd2FybmVkQWJvdXRUZXh0U2VsZWN0aW9uID0gZmFsc2U7XG5mdW5jdGlvbiBjaGVja1RleHRTZWxlY3Rpb24oJHBvcykge1xuICAgIGlmICghd2FybmVkQWJvdXRUZXh0U2VsZWN0aW9uICYmICEkcG9zLnBhcmVudC5pbmxpbmVDb250ZW50KSB7XG4gICAgICAgIHdhcm5lZEFib3V0VGV4dFNlbGVjdGlvbiA9IHRydWU7XG4gICAgICAgIGNvbnNvbGVbXCJ3YXJuXCJdKFwiVGV4dFNlbGVjdGlvbiBlbmRwb2ludCBub3QgcG9pbnRpbmcgaW50byBhIG5vZGUgd2l0aCBpbmxpbmUgY29udGVudCAoXCIgKyAkcG9zLnBhcmVudC50eXBlLm5hbWUgKyBcIilcIik7XG4gICAgfVxufVxuLyoqXG5BIHRleHQgc2VsZWN0aW9uIHJlcHJlc2VudHMgYSBjbGFzc2ljYWwgZWRpdG9yIHNlbGVjdGlvbiwgd2l0aCBhXG5oZWFkICh0aGUgbW92aW5nIHNpZGUpIGFuZCBhbmNob3IgKGltbW9iaWxlIHNpZGUpLCBib3RoIG9mIHdoaWNoXG5wb2ludCBpbnRvIHRleHRibG9jayBub2Rlcy4gSXQgY2FuIGJlIGVtcHR5IChhIHJlZ3VsYXIgY3Vyc29yXG5wb3NpdGlvbikuXG4qL1xuY2xhc3MgVGV4dFNlbGVjdGlvbiBleHRlbmRzIFNlbGVjdGlvbiB7XG4gICAgLyoqXG4gICAgQ29uc3RydWN0IGEgdGV4dCBzZWxlY3Rpb24gYmV0d2VlbiB0aGUgZ2l2ZW4gcG9pbnRzLlxuICAgICovXG4gICAgY29uc3RydWN0b3IoJGFuY2hvciwgJGhlYWQgPSAkYW5jaG9yKSB7XG4gICAgICAgIGNoZWNrVGV4dFNlbGVjdGlvbigkYW5jaG9yKTtcbiAgICAgICAgY2hlY2tUZXh0U2VsZWN0aW9uKCRoZWFkKTtcbiAgICAgICAgc3VwZXIoJGFuY2hvciwgJGhlYWQpO1xuICAgIH1cbiAgICAvKipcbiAgICBSZXR1cm5zIGEgcmVzb2x2ZWQgcG9zaXRpb24gaWYgdGhpcyBpcyBhIGN1cnNvciBzZWxlY3Rpb24gKGFuXG4gICAgZW1wdHkgdGV4dCBzZWxlY3Rpb24pLCBhbmQgbnVsbCBvdGhlcndpc2UuXG4gICAgKi9cbiAgICBnZXQgJGN1cnNvcigpIHsgcmV0dXJuIHRoaXMuJGFuY2hvci5wb3MgPT0gdGhpcy4kaGVhZC5wb3MgPyB0aGlzLiRoZWFkIDogbnVsbDsgfVxuICAgIG1hcChkb2MsIG1hcHBpbmcpIHtcbiAgICAgICAgbGV0ICRoZWFkID0gZG9jLnJlc29sdmUobWFwcGluZy5tYXAodGhpcy5oZWFkKSk7XG4gICAgICAgIGlmICghJGhlYWQucGFyZW50LmlubGluZUNvbnRlbnQpXG4gICAgICAgICAgICByZXR1cm4gU2VsZWN0aW9uLm5lYXIoJGhlYWQpO1xuICAgICAgICBsZXQgJGFuY2hvciA9IGRvYy5yZXNvbHZlKG1hcHBpbmcubWFwKHRoaXMuYW5jaG9yKSk7XG4gICAgICAgIHJldHVybiBuZXcgVGV4dFNlbGVjdGlvbigkYW5jaG9yLnBhcmVudC5pbmxpbmVDb250ZW50ID8gJGFuY2hvciA6ICRoZWFkLCAkaGVhZCk7XG4gICAgfVxuICAgIHJlcGxhY2UodHIsIGNvbnRlbnQgPSBTbGljZS5lbXB0eSkge1xuICAgICAgICBzdXBlci5yZXBsYWNlKHRyLCBjb250ZW50KTtcbiAgICAgICAgaWYgKGNvbnRlbnQgPT0gU2xpY2UuZW1wdHkpIHtcbiAgICAgICAgICAgIGxldCBtYXJrcyA9IHRoaXMuJGZyb20ubWFya3NBY3Jvc3ModGhpcy4kdG8pO1xuICAgICAgICAgICAgaWYgKG1hcmtzKVxuICAgICAgICAgICAgICAgIHRyLmVuc3VyZU1hcmtzKG1hcmtzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlcShvdGhlcikge1xuICAgICAgICByZXR1cm4gb3RoZXIgaW5zdGFuY2VvZiBUZXh0U2VsZWN0aW9uICYmIG90aGVyLmFuY2hvciA9PSB0aGlzLmFuY2hvciAmJiBvdGhlci5oZWFkID09IHRoaXMuaGVhZDtcbiAgICB9XG4gICAgZ2V0Qm9va21hcmsoKSB7XG4gICAgICAgIHJldHVybiBuZXcgVGV4dEJvb2ttYXJrKHRoaXMuYW5jaG9yLCB0aGlzLmhlYWQpO1xuICAgIH1cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIHJldHVybiB7IHR5cGU6IFwidGV4dFwiLCBhbmNob3I6IHRoaXMuYW5jaG9yLCBoZWFkOiB0aGlzLmhlYWQgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBzdGF0aWMgZnJvbUpTT04oZG9jLCBqc29uKSB7XG4gICAgICAgIGlmICh0eXBlb2YganNvbi5hbmNob3IgIT0gXCJudW1iZXJcIiB8fCB0eXBlb2YganNvbi5oZWFkICE9IFwibnVtYmVyXCIpXG4gICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkludmFsaWQgaW5wdXQgZm9yIFRleHRTZWxlY3Rpb24uZnJvbUpTT05cIik7XG4gICAgICAgIHJldHVybiBuZXcgVGV4dFNlbGVjdGlvbihkb2MucmVzb2x2ZShqc29uLmFuY2hvciksIGRvYy5yZXNvbHZlKGpzb24uaGVhZCkpO1xuICAgIH1cbiAgICAvKipcbiAgICBDcmVhdGUgYSB0ZXh0IHNlbGVjdGlvbiBmcm9tIG5vbi1yZXNvbHZlZCBwb3NpdGlvbnMuXG4gICAgKi9cbiAgICBzdGF0aWMgY3JlYXRlKGRvYywgYW5jaG9yLCBoZWFkID0gYW5jaG9yKSB7XG4gICAgICAgIGxldCAkYW5jaG9yID0gZG9jLnJlc29sdmUoYW5jaG9yKTtcbiAgICAgICAgcmV0dXJuIG5ldyB0aGlzKCRhbmNob3IsIGhlYWQgPT0gYW5jaG9yID8gJGFuY2hvciA6IGRvYy5yZXNvbHZlKGhlYWQpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgUmV0dXJuIGEgdGV4dCBzZWxlY3Rpb24gdGhhdCBzcGFucyB0aGUgZ2l2ZW4gcG9zaXRpb25zIG9yLCBpZlxuICAgIHRoZXkgYXJlbid0IHRleHQgcG9zaXRpb25zLCBmaW5kIGEgdGV4dCBzZWxlY3Rpb24gbmVhciB0aGVtLlxuICAgIGBiaWFzYCBkZXRlcm1pbmVzIHdoZXRoZXIgdGhlIG1ldGhvZCBzZWFyY2hlcyBmb3J3YXJkIChkZWZhdWx0KVxuICAgIG9yIGJhY2t3YXJkcyAobmVnYXRpdmUgbnVtYmVyKSBmaXJzdC4gV2lsbCBmYWxsIGJhY2sgdG8gY2FsbGluZ1xuICAgIFtgU2VsZWN0aW9uLm5lYXJgXShodHRwczovL3Byb3NlbWlycm9yLm5ldC9kb2NzL3JlZi8jc3RhdGUuU2VsZWN0aW9uXm5lYXIpIHdoZW4gdGhlIGRvY3VtZW50XG4gICAgZG9lc24ndCBjb250YWluIGEgdmFsaWQgdGV4dCBwb3NpdGlvbi5cbiAgICAqL1xuICAgIHN0YXRpYyBiZXR3ZWVuKCRhbmNob3IsICRoZWFkLCBiaWFzKSB7XG4gICAgICAgIGxldCBkUG9zID0gJGFuY2hvci5wb3MgLSAkaGVhZC5wb3M7XG4gICAgICAgIGlmICghYmlhcyB8fCBkUG9zKVxuICAgICAgICAgICAgYmlhcyA9IGRQb3MgPj0gMCA/IDEgOiAtMTtcbiAgICAgICAgaWYgKCEkaGVhZC5wYXJlbnQuaW5saW5lQ29udGVudCkge1xuICAgICAgICAgICAgbGV0IGZvdW5kID0gU2VsZWN0aW9uLmZpbmRGcm9tKCRoZWFkLCBiaWFzLCB0cnVlKSB8fCBTZWxlY3Rpb24uZmluZEZyb20oJGhlYWQsIC1iaWFzLCB0cnVlKTtcbiAgICAgICAgICAgIGlmIChmb3VuZClcbiAgICAgICAgICAgICAgICAkaGVhZCA9IGZvdW5kLiRoZWFkO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHJldHVybiBTZWxlY3Rpb24ubmVhcigkaGVhZCwgYmlhcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCEkYW5jaG9yLnBhcmVudC5pbmxpbmVDb250ZW50KSB7XG4gICAgICAgICAgICBpZiAoZFBvcyA9PSAwKSB7XG4gICAgICAgICAgICAgICAgJGFuY2hvciA9ICRoZWFkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgJGFuY2hvciA9IChTZWxlY3Rpb24uZmluZEZyb20oJGFuY2hvciwgLWJpYXMsIHRydWUpIHx8IFNlbGVjdGlvbi5maW5kRnJvbSgkYW5jaG9yLCBiaWFzLCB0cnVlKSkuJGFuY2hvcjtcbiAgICAgICAgICAgICAgICBpZiAoKCRhbmNob3IucG9zIDwgJGhlYWQucG9zKSAhPSAoZFBvcyA8IDApKVxuICAgICAgICAgICAgICAgICAgICAkYW5jaG9yID0gJGhlYWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBUZXh0U2VsZWN0aW9uKCRhbmNob3IsICRoZWFkKTtcbiAgICB9XG59XG5TZWxlY3Rpb24uanNvbklEKFwidGV4dFwiLCBUZXh0U2VsZWN0aW9uKTtcbmNsYXNzIFRleHRCb29rbWFyayB7XG4gICAgY29uc3RydWN0b3IoYW5jaG9yLCBoZWFkKSB7XG4gICAgICAgIHRoaXMuYW5jaG9yID0gYW5jaG9yO1xuICAgICAgICB0aGlzLmhlYWQgPSBoZWFkO1xuICAgIH1cbiAgICBtYXAobWFwcGluZykge1xuICAgICAgICByZXR1cm4gbmV3IFRleHRCb29rbWFyayhtYXBwaW5nLm1hcCh0aGlzLmFuY2hvciksIG1hcHBpbmcubWFwKHRoaXMuaGVhZCkpO1xuICAgIH1cbiAgICByZXNvbHZlKGRvYykge1xuICAgICAgICByZXR1cm4gVGV4dFNlbGVjdGlvbi5iZXR3ZWVuKGRvYy5yZXNvbHZlKHRoaXMuYW5jaG9yKSwgZG9jLnJlc29sdmUodGhpcy5oZWFkKSk7XG4gICAgfVxufVxuLyoqXG5BIG5vZGUgc2VsZWN0aW9uIGlzIGEgc2VsZWN0aW9uIHRoYXQgcG9pbnRzIGF0IGEgc2luZ2xlIG5vZGUuIEFsbFxubm9kZXMgbWFya2VkIFtzZWxlY3RhYmxlXShodHRwczovL3Byb3NlbWlycm9yLm5ldC9kb2NzL3JlZi8jbW9kZWwuTm9kZVNwZWMuc2VsZWN0YWJsZSkgY2FuIGJlIHRoZVxudGFyZ2V0IG9mIGEgbm9kZSBzZWxlY3Rpb24uIEluIHN1Y2ggYSBzZWxlY3Rpb24sIGBmcm9tYCBhbmQgYHRvYFxucG9pbnQgZGlyZWN0bHkgYmVmb3JlIGFuZCBhZnRlciB0aGUgc2VsZWN0ZWQgbm9kZSwgYGFuY2hvcmAgZXF1YWxzXG5gZnJvbWAsIGFuZCBgaGVhZGAgZXF1YWxzIGB0b2AuLlxuKi9cbmNsYXNzIE5vZGVTZWxlY3Rpb24gZXh0ZW5kcyBTZWxlY3Rpb24ge1xuICAgIC8qKlxuICAgIENyZWF0ZSBhIG5vZGUgc2VsZWN0aW9uLiBEb2VzIG5vdCB2ZXJpZnkgdGhlIHZhbGlkaXR5IG9mIGl0c1xuICAgIGFyZ3VtZW50LlxuICAgICovXG4gICAgY29uc3RydWN0b3IoJHBvcykge1xuICAgICAgICBsZXQgbm9kZSA9ICRwb3Mubm9kZUFmdGVyO1xuICAgICAgICBsZXQgJGVuZCA9ICRwb3Mubm9kZSgwKS5yZXNvbHZlKCRwb3MucG9zICsgbm9kZS5ub2RlU2l6ZSk7XG4gICAgICAgIHN1cGVyKCRwb3MsICRlbmQpO1xuICAgICAgICB0aGlzLm5vZGUgPSBub2RlO1xuICAgIH1cbiAgICBtYXAoZG9jLCBtYXBwaW5nKSB7XG4gICAgICAgIGxldCB7IGRlbGV0ZWQsIHBvcyB9ID0gbWFwcGluZy5tYXBSZXN1bHQodGhpcy5hbmNob3IpO1xuICAgICAgICBsZXQgJHBvcyA9IGRvYy5yZXNvbHZlKHBvcyk7XG4gICAgICAgIGlmIChkZWxldGVkKVxuICAgICAgICAgICAgcmV0dXJuIFNlbGVjdGlvbi5uZWFyKCRwb3MpO1xuICAgICAgICByZXR1cm4gbmV3IE5vZGVTZWxlY3Rpb24oJHBvcyk7XG4gICAgfVxuICAgIGNvbnRlbnQoKSB7XG4gICAgICAgIHJldHVybiBuZXcgU2xpY2UoRnJhZ21lbnQuZnJvbSh0aGlzLm5vZGUpLCAwLCAwKTtcbiAgICB9XG4gICAgZXEob3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIG90aGVyIGluc3RhbmNlb2YgTm9kZVNlbGVjdGlvbiAmJiBvdGhlci5hbmNob3IgPT0gdGhpcy5hbmNob3I7XG4gICAgfVxuICAgIHRvSlNPTigpIHtcbiAgICAgICAgcmV0dXJuIHsgdHlwZTogXCJub2RlXCIsIGFuY2hvcjogdGhpcy5hbmNob3IgfTtcbiAgICB9XG4gICAgZ2V0Qm9va21hcmsoKSB7IHJldHVybiBuZXcgTm9kZUJvb2ttYXJrKHRoaXMuYW5jaG9yKTsgfVxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgc3RhdGljIGZyb21KU09OKGRvYywganNvbikge1xuICAgICAgICBpZiAodHlwZW9mIGpzb24uYW5jaG9yICE9IFwibnVtYmVyXCIpXG4gICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkludmFsaWQgaW5wdXQgZm9yIE5vZGVTZWxlY3Rpb24uZnJvbUpTT05cIik7XG4gICAgICAgIHJldHVybiBuZXcgTm9kZVNlbGVjdGlvbihkb2MucmVzb2x2ZShqc29uLmFuY2hvcikpO1xuICAgIH1cbiAgICAvKipcbiAgICBDcmVhdGUgYSBub2RlIHNlbGVjdGlvbiBmcm9tIG5vbi1yZXNvbHZlZCBwb3NpdGlvbnMuXG4gICAgKi9cbiAgICBzdGF0aWMgY3JlYXRlKGRvYywgZnJvbSkge1xuICAgICAgICByZXR1cm4gbmV3IE5vZGVTZWxlY3Rpb24oZG9jLnJlc29sdmUoZnJvbSkpO1xuICAgIH1cbiAgICAvKipcbiAgICBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIGdpdmVuIG5vZGUgbWF5IGJlIHNlbGVjdGVkIGFzIGEgbm9kZVxuICAgIHNlbGVjdGlvbi5cbiAgICAqL1xuICAgIHN0YXRpYyBpc1NlbGVjdGFibGUobm9kZSkge1xuICAgICAgICByZXR1cm4gIW5vZGUuaXNUZXh0ICYmIG5vZGUudHlwZS5zcGVjLnNlbGVjdGFibGUgIT09IGZhbHNlO1xuICAgIH1cbn1cbk5vZGVTZWxlY3Rpb24ucHJvdG90eXBlLnZpc2libGUgPSBmYWxzZTtcblNlbGVjdGlvbi5qc29uSUQoXCJub2RlXCIsIE5vZGVTZWxlY3Rpb24pO1xuY2xhc3MgTm9kZUJvb2ttYXJrIHtcbiAgICBjb25zdHJ1Y3RvcihhbmNob3IpIHtcbiAgICAgICAgdGhpcy5hbmNob3IgPSBhbmNob3I7XG4gICAgfVxuICAgIG1hcChtYXBwaW5nKSB7XG4gICAgICAgIGxldCB7IGRlbGV0ZWQsIHBvcyB9ID0gbWFwcGluZy5tYXBSZXN1bHQodGhpcy5hbmNob3IpO1xuICAgICAgICByZXR1cm4gZGVsZXRlZCA/IG5ldyBUZXh0Qm9va21hcmsocG9zLCBwb3MpIDogbmV3IE5vZGVCb29rbWFyayhwb3MpO1xuICAgIH1cbiAgICByZXNvbHZlKGRvYykge1xuICAgICAgICBsZXQgJHBvcyA9IGRvYy5yZXNvbHZlKHRoaXMuYW5jaG9yKSwgbm9kZSA9ICRwb3Mubm9kZUFmdGVyO1xuICAgICAgICBpZiAobm9kZSAmJiBOb2RlU2VsZWN0aW9uLmlzU2VsZWN0YWJsZShub2RlKSlcbiAgICAgICAgICAgIHJldHVybiBuZXcgTm9kZVNlbGVjdGlvbigkcG9zKTtcbiAgICAgICAgcmV0dXJuIFNlbGVjdGlvbi5uZWFyKCRwb3MpO1xuICAgIH1cbn1cbi8qKlxuQSBzZWxlY3Rpb24gdHlwZSB0aGF0IHJlcHJlc2VudHMgc2VsZWN0aW5nIHRoZSB3aG9sZSBkb2N1bWVudFxuKHdoaWNoIGNhbiBub3QgbmVjZXNzYXJpbHkgYmUgZXhwcmVzc2VkIHdpdGggYSB0ZXh0IHNlbGVjdGlvbiwgd2hlblxudGhlcmUgYXJlIGZvciBleGFtcGxlIGxlYWYgYmxvY2sgbm9kZXMgYXQgdGhlIHN0YXJ0IG9yIGVuZCBvZiB0aGVcbmRvY3VtZW50KS5cbiovXG5jbGFzcyBBbGxTZWxlY3Rpb24gZXh0ZW5kcyBTZWxlY3Rpb24ge1xuICAgIC8qKlxuICAgIENyZWF0ZSBhbiBhbGwtc2VsZWN0aW9uIG92ZXIgdGhlIGdpdmVuIGRvY3VtZW50LlxuICAgICovXG4gICAgY29uc3RydWN0b3IoZG9jKSB7XG4gICAgICAgIHN1cGVyKGRvYy5yZXNvbHZlKDApLCBkb2MucmVzb2x2ZShkb2MuY29udGVudC5zaXplKSk7XG4gICAgfVxuICAgIHJlcGxhY2UodHIsIGNvbnRlbnQgPSBTbGljZS5lbXB0eSkge1xuICAgICAgICBpZiAoY29udGVudCA9PSBTbGljZS5lbXB0eSkge1xuICAgICAgICAgICAgdHIuZGVsZXRlKDAsIHRyLmRvYy5jb250ZW50LnNpemUpO1xuICAgICAgICAgICAgbGV0IHNlbCA9IFNlbGVjdGlvbi5hdFN0YXJ0KHRyLmRvYyk7XG4gICAgICAgICAgICBpZiAoIXNlbC5lcSh0ci5zZWxlY3Rpb24pKVxuICAgICAgICAgICAgICAgIHRyLnNldFNlbGVjdGlvbihzZWwpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc3VwZXIucmVwbGFjZSh0ciwgY29udGVudCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdG9KU09OKCkgeyByZXR1cm4geyB0eXBlOiBcImFsbFwiIH07IH1cbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIHN0YXRpYyBmcm9tSlNPTihkb2MpIHsgcmV0dXJuIG5ldyBBbGxTZWxlY3Rpb24oZG9jKTsgfVxuICAgIG1hcChkb2MpIHsgcmV0dXJuIG5ldyBBbGxTZWxlY3Rpb24oZG9jKTsgfVxuICAgIGVxKG90aGVyKSB7IHJldHVybiBvdGhlciBpbnN0YW5jZW9mIEFsbFNlbGVjdGlvbjsgfVxuICAgIGdldEJvb2ttYXJrKCkgeyByZXR1cm4gQWxsQm9va21hcms7IH1cbn1cblNlbGVjdGlvbi5qc29uSUQoXCJhbGxcIiwgQWxsU2VsZWN0aW9uKTtcbmNvbnN0IEFsbEJvb2ttYXJrID0ge1xuICAgIG1hcCgpIHsgcmV0dXJuIHRoaXM7IH0sXG4gICAgcmVzb2x2ZShkb2MpIHsgcmV0dXJuIG5ldyBBbGxTZWxlY3Rpb24oZG9jKTsgfVxufTtcbi8vIEZJWE1FIHdlJ2xsIG5lZWQgc29tZSBhd2FyZW5lc3Mgb2YgdGV4dCBkaXJlY3Rpb24gd2hlbiBzY2FubmluZyBmb3Igc2VsZWN0aW9uc1xuLy8gVHJ5IHRvIGZpbmQgYSBzZWxlY3Rpb24gaW5zaWRlIHRoZSBnaXZlbiBub2RlLiBgcG9zYCBwb2ludHMgYXQgdGhlXG4vLyBwb3NpdGlvbiB3aGVyZSB0aGUgc2VhcmNoIHN0YXJ0cy4gV2hlbiBgdGV4dGAgaXMgdHJ1ZSwgb25seSByZXR1cm5cbi8vIHRleHQgc2VsZWN0aW9ucy5cbmZ1bmN0aW9uIGZpbmRTZWxlY3Rpb25Jbihkb2MsIG5vZGUsIHBvcywgaW5kZXgsIGRpciwgdGV4dCA9IGZhbHNlKSB7XG4gICAgaWYgKG5vZGUuaW5saW5lQ29udGVudClcbiAgICAgICAgcmV0dXJuIFRleHRTZWxlY3Rpb24uY3JlYXRlKGRvYywgcG9zKTtcbiAgICBmb3IgKGxldCBpID0gaW5kZXggLSAoZGlyID4gMCA/IDAgOiAxKTsgZGlyID4gMCA/IGkgPCBub2RlLmNoaWxkQ291bnQgOiBpID49IDA7IGkgKz0gZGlyKSB7XG4gICAgICAgIGxldCBjaGlsZCA9IG5vZGUuY2hpbGQoaSk7XG4gICAgICAgIGlmICghY2hpbGQuaXNBdG9tKSB7XG4gICAgICAgICAgICBsZXQgaW5uZXIgPSBmaW5kU2VsZWN0aW9uSW4oZG9jLCBjaGlsZCwgcG9zICsgZGlyLCBkaXIgPCAwID8gY2hpbGQuY2hpbGRDb3VudCA6IDAsIGRpciwgdGV4dCk7XG4gICAgICAgICAgICBpZiAoaW5uZXIpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGlubmVyO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCF0ZXh0ICYmIE5vZGVTZWxlY3Rpb24uaXNTZWxlY3RhYmxlKGNoaWxkKSkge1xuICAgICAgICAgICAgcmV0dXJuIE5vZGVTZWxlY3Rpb24uY3JlYXRlKGRvYywgcG9zIC0gKGRpciA8IDAgPyBjaGlsZC5ub2RlU2l6ZSA6IDApKTtcbiAgICAgICAgfVxuICAgICAgICBwb3MgKz0gY2hpbGQubm9kZVNpemUgKiBkaXI7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gc2VsZWN0aW9uVG9JbnNlcnRpb25FbmQodHIsIHN0YXJ0TGVuLCBiaWFzKSB7XG4gICAgbGV0IGxhc3QgPSB0ci5zdGVwcy5sZW5ndGggLSAxO1xuICAgIGlmIChsYXN0IDwgc3RhcnRMZW4pXG4gICAgICAgIHJldHVybjtcbiAgICBsZXQgc3RlcCA9IHRyLnN0ZXBzW2xhc3RdO1xuICAgIGlmICghKHN0ZXAgaW5zdGFuY2VvZiBSZXBsYWNlU3RlcCB8fCBzdGVwIGluc3RhbmNlb2YgUmVwbGFjZUFyb3VuZFN0ZXApKVxuICAgICAgICByZXR1cm47XG4gICAgbGV0IG1hcCA9IHRyLm1hcHBpbmcubWFwc1tsYXN0XSwgZW5kO1xuICAgIG1hcC5mb3JFYWNoKChfZnJvbSwgX3RvLCBfbmV3RnJvbSwgbmV3VG8pID0+IHsgaWYgKGVuZCA9PSBudWxsKVxuICAgICAgICBlbmQgPSBuZXdUbzsgfSk7XG4gICAgdHIuc2V0U2VsZWN0aW9uKFNlbGVjdGlvbi5uZWFyKHRyLmRvYy5yZXNvbHZlKGVuZCksIGJpYXMpKTtcbn1cblxuY29uc3QgVVBEQVRFRF9TRUwgPSAxLCBVUERBVEVEX01BUktTID0gMiwgVVBEQVRFRF9TQ1JPTEwgPSA0O1xuLyoqXG5BbiBlZGl0b3Igc3RhdGUgdHJhbnNhY3Rpb24sIHdoaWNoIGNhbiBiZSBhcHBsaWVkIHRvIGEgc3RhdGUgdG9cbmNyZWF0ZSBhbiB1cGRhdGVkIHN0YXRlLiBVc2VcbltgRWRpdG9yU3RhdGUudHJgXShodHRwczovL3Byb3NlbWlycm9yLm5ldC9kb2NzL3JlZi8jc3RhdGUuRWRpdG9yU3RhdGUudHIpIHRvIGNyZWF0ZSBhbiBpbnN0YW5jZS5cblxuVHJhbnNhY3Rpb25zIHRyYWNrIGNoYW5nZXMgdG8gdGhlIGRvY3VtZW50ICh0aGV5IGFyZSBhIHN1YmNsYXNzIG9mXG5bYFRyYW5zZm9ybWBdKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyN0cmFuc2Zvcm0uVHJhbnNmb3JtKSksIGJ1dCBhbHNvIG90aGVyIHN0YXRlIGNoYW5nZXMsXG5saWtlIHNlbGVjdGlvbiB1cGRhdGVzIGFuZCBhZGp1c3RtZW50cyBvZiB0aGUgc2V0IG9mIFtzdG9yZWRcbm1hcmtzXShodHRwczovL3Byb3NlbWlycm9yLm5ldC9kb2NzL3JlZi8jc3RhdGUuRWRpdG9yU3RhdGUuc3RvcmVkTWFya3MpLiBJbiBhZGRpdGlvbiwgeW91IGNhbiBzdG9yZVxubWV0YWRhdGEgcHJvcGVydGllcyBpbiBhIHRyYW5zYWN0aW9uLCB3aGljaCBhcmUgZXh0cmEgcGllY2VzIG9mXG5pbmZvcm1hdGlvbiB0aGF0IGNsaWVudCBjb2RlIG9yIHBsdWdpbnMgY2FuIHVzZSB0byBkZXNjcmliZSB3aGF0IGFcbnRyYW5zYWN0aW9uIHJlcHJlc2VudHMsIHNvIHRoYXQgdGhleSBjYW4gdXBkYXRlIHRoZWlyIFtvd25cbnN0YXRlXShodHRwczovL3Byb3NlbWlycm9yLm5ldC9kb2NzL3JlZi8jc3RhdGUuU3RhdGVGaWVsZCkgYWNjb3JkaW5nbHkuXG5cblRoZSBbZWRpdG9yIHZpZXddKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyN2aWV3LkVkaXRvclZpZXcpIHVzZXMgYSBmZXcgbWV0YWRhdGEgcHJvcGVydGllczpcbml0IHdpbGwgYXR0YWNoIGEgcHJvcGVydHkgYFwicG9pbnRlclwiYCB3aXRoIHRoZSB2YWx1ZSBgdHJ1ZWAgdG9cbnNlbGVjdGlvbiB0cmFuc2FjdGlvbnMgZGlyZWN0bHkgY2F1c2VkIGJ5IG1vdXNlIG9yIHRvdWNoIGlucHV0LCBhbmRcbmEgYFwidWlFdmVudFwiYCBwcm9wZXJ0eSBvZiB0aGF0IG1heSBiZSBgXCJwYXN0ZVwiYCwgYFwiY3V0XCJgLCBvciBgXCJkcm9wXCJgLlxuKi9cbmNsYXNzIFRyYW5zYWN0aW9uIGV4dGVuZHMgVHJhbnNmb3JtIHtcbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHN0YXRlKSB7XG4gICAgICAgIHN1cGVyKHN0YXRlLmRvYyk7XG4gICAgICAgIC8vIFRoZSBzdGVwIGNvdW50IGZvciB3aGljaCB0aGUgY3VycmVudCBzZWxlY3Rpb24gaXMgdmFsaWQuXG4gICAgICAgIHRoaXMuY3VyU2VsZWN0aW9uRm9yID0gMDtcbiAgICAgICAgLy8gQml0ZmllbGQgdG8gdHJhY2sgd2hpY2ggYXNwZWN0cyBvZiB0aGUgc3RhdGUgd2VyZSB1cGRhdGVkIGJ5XG4gICAgICAgIC8vIHRoaXMgdHJhbnNhY3Rpb24uXG4gICAgICAgIHRoaXMudXBkYXRlZCA9IDA7XG4gICAgICAgIC8vIE9iamVjdCB1c2VkIHRvIHN0b3JlIG1ldGFkYXRhIHByb3BlcnRpZXMgZm9yIHRoZSB0cmFuc2FjdGlvbi5cbiAgICAgICAgdGhpcy5tZXRhID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgdGhpcy50aW1lID0gRGF0ZS5ub3coKTtcbiAgICAgICAgdGhpcy5jdXJTZWxlY3Rpb24gPSBzdGF0ZS5zZWxlY3Rpb247XG4gICAgICAgIHRoaXMuc3RvcmVkTWFya3MgPSBzdGF0ZS5zdG9yZWRNYXJrcztcbiAgICB9XG4gICAgLyoqXG4gICAgVGhlIHRyYW5zYWN0aW9uJ3MgY3VycmVudCBzZWxlY3Rpb24uIFRoaXMgZGVmYXVsdHMgdG8gdGhlIGVkaXRvclxuICAgIHNlbGVjdGlvbiBbbWFwcGVkXShodHRwczovL3Byb3NlbWlycm9yLm5ldC9kb2NzL3JlZi8jc3RhdGUuU2VsZWN0aW9uLm1hcCkgdGhyb3VnaCB0aGUgc3RlcHMgaW4gdGhlXG4gICAgdHJhbnNhY3Rpb24sIGJ1dCBjYW4gYmUgb3ZlcndyaXR0ZW4gd2l0aFxuICAgIFtgc2V0U2VsZWN0aW9uYF0oaHR0cHM6Ly9wcm9zZW1pcnJvci5uZXQvZG9jcy9yZWYvI3N0YXRlLlRyYW5zYWN0aW9uLnNldFNlbGVjdGlvbikuXG4gICAgKi9cbiAgICBnZXQgc2VsZWN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5jdXJTZWxlY3Rpb25Gb3IgPCB0aGlzLnN0ZXBzLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5jdXJTZWxlY3Rpb24gPSB0aGlzLmN1clNlbGVjdGlvbi5tYXAodGhpcy5kb2MsIHRoaXMubWFwcGluZy5zbGljZSh0aGlzLmN1clNlbGVjdGlvbkZvcikpO1xuICAgICAgICAgICAgdGhpcy5jdXJTZWxlY3Rpb25Gb3IgPSB0aGlzLnN0ZXBzLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5jdXJTZWxlY3Rpb247XG4gICAgfVxuICAgIC8qKlxuICAgIFVwZGF0ZSB0aGUgdHJhbnNhY3Rpb24ncyBjdXJyZW50IHNlbGVjdGlvbi4gV2lsbCBkZXRlcm1pbmUgdGhlXG4gICAgc2VsZWN0aW9uIHRoYXQgdGhlIGVkaXRvciBnZXRzIHdoZW4gdGhlIHRyYW5zYWN0aW9uIGlzIGFwcGxpZWQuXG4gICAgKi9cbiAgICBzZXRTZWxlY3Rpb24oc2VsZWN0aW9uKSB7XG4gICAgICAgIGlmIChzZWxlY3Rpb24uJGZyb20uZG9jICE9IHRoaXMuZG9jKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJTZWxlY3Rpb24gcGFzc2VkIHRvIHNldFNlbGVjdGlvbiBtdXN0IHBvaW50IGF0IHRoZSBjdXJyZW50IGRvY3VtZW50XCIpO1xuICAgICAgICB0aGlzLmN1clNlbGVjdGlvbiA9IHNlbGVjdGlvbjtcbiAgICAgICAgdGhpcy5jdXJTZWxlY3Rpb25Gb3IgPSB0aGlzLnN0ZXBzLmxlbmd0aDtcbiAgICAgICAgdGhpcy51cGRhdGVkID0gKHRoaXMudXBkYXRlZCB8IFVQREFURURfU0VMKSAmIH5VUERBVEVEX01BUktTO1xuICAgICAgICB0aGlzLnN0b3JlZE1hcmtzID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgIFdoZXRoZXIgdGhlIHNlbGVjdGlvbiB3YXMgZXhwbGljaXRseSB1cGRhdGVkIGJ5IHRoaXMgdHJhbnNhY3Rpb24uXG4gICAgKi9cbiAgICBnZXQgc2VsZWN0aW9uU2V0KCkge1xuICAgICAgICByZXR1cm4gKHRoaXMudXBkYXRlZCAmIFVQREFURURfU0VMKSA+IDA7XG4gICAgfVxuICAgIC8qKlxuICAgIFNldCB0aGUgY3VycmVudCBzdG9yZWQgbWFya3MuXG4gICAgKi9cbiAgICBzZXRTdG9yZWRNYXJrcyhtYXJrcykge1xuICAgICAgICB0aGlzLnN0b3JlZE1hcmtzID0gbWFya3M7XG4gICAgICAgIHRoaXMudXBkYXRlZCB8PSBVUERBVEVEX01BUktTO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgTWFrZSBzdXJlIHRoZSBjdXJyZW50IHN0b3JlZCBtYXJrcyBvciwgaWYgdGhhdCBpcyBudWxsLCB0aGUgbWFya3NcbiAgICBhdCB0aGUgc2VsZWN0aW9uLCBtYXRjaCB0aGUgZ2l2ZW4gc2V0IG9mIG1hcmtzLiBEb2VzIG5vdGhpbmcgaWZcbiAgICB0aGlzIGlzIGFscmVhZHkgdGhlIGNhc2UuXG4gICAgKi9cbiAgICBlbnN1cmVNYXJrcyhtYXJrcykge1xuICAgICAgICBpZiAoIU1hcmsuc2FtZVNldCh0aGlzLnN0b3JlZE1hcmtzIHx8IHRoaXMuc2VsZWN0aW9uLiRmcm9tLm1hcmtzKCksIG1hcmtzKSlcbiAgICAgICAgICAgIHRoaXMuc2V0U3RvcmVkTWFya3MobWFya3MpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgQWRkIGEgbWFyayB0byB0aGUgc2V0IG9mIHN0b3JlZCBtYXJrcy5cbiAgICAqL1xuICAgIGFkZFN0b3JlZE1hcmsobWFyaykge1xuICAgICAgICByZXR1cm4gdGhpcy5lbnN1cmVNYXJrcyhtYXJrLmFkZFRvU2V0KHRoaXMuc3RvcmVkTWFya3MgfHwgdGhpcy5zZWxlY3Rpb24uJGhlYWQubWFya3MoKSkpO1xuICAgIH1cbiAgICAvKipcbiAgICBSZW1vdmUgYSBtYXJrIG9yIG1hcmsgdHlwZSBmcm9tIHRoZSBzZXQgb2Ygc3RvcmVkIG1hcmtzLlxuICAgICovXG4gICAgcmVtb3ZlU3RvcmVkTWFyayhtYXJrKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVuc3VyZU1hcmtzKG1hcmsucmVtb3ZlRnJvbVNldCh0aGlzLnN0b3JlZE1hcmtzIHx8IHRoaXMuc2VsZWN0aW9uLiRoZWFkLm1hcmtzKCkpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgV2hldGhlciB0aGUgc3RvcmVkIG1hcmtzIHdlcmUgZXhwbGljaXRseSBzZXQgZm9yIHRoaXMgdHJhbnNhY3Rpb24uXG4gICAgKi9cbiAgICBnZXQgc3RvcmVkTWFya3NTZXQoKSB7XG4gICAgICAgIHJldHVybiAodGhpcy51cGRhdGVkICYgVVBEQVRFRF9NQVJLUykgPiAwO1xuICAgIH1cbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIGFkZFN0ZXAoc3RlcCwgZG9jKSB7XG4gICAgICAgIHN1cGVyLmFkZFN0ZXAoc3RlcCwgZG9jKTtcbiAgICAgICAgdGhpcy51cGRhdGVkID0gdGhpcy51cGRhdGVkICYgflVQREFURURfTUFSS1M7XG4gICAgICAgIHRoaXMuc3RvcmVkTWFya3MgPSBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICBVcGRhdGUgdGhlIHRpbWVzdGFtcCBmb3IgdGhlIHRyYW5zYWN0aW9uLlxuICAgICovXG4gICAgc2V0VGltZSh0aW1lKSB7XG4gICAgICAgIHRoaXMudGltZSA9IHRpbWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICBSZXBsYWNlIHRoZSBjdXJyZW50IHNlbGVjdGlvbiB3aXRoIHRoZSBnaXZlbiBzbGljZS5cbiAgICAqL1xuICAgIHJlcGxhY2VTZWxlY3Rpb24oc2xpY2UpIHtcbiAgICAgICAgdGhpcy5zZWxlY3Rpb24ucmVwbGFjZSh0aGlzLCBzbGljZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICBSZXBsYWNlIHRoZSBzZWxlY3Rpb24gd2l0aCB0aGUgZ2l2ZW4gbm9kZS4gV2hlbiBgaW5oZXJpdE1hcmtzYCBpc1xuICAgIHRydWUgYW5kIHRoZSBjb250ZW50IGlzIGlubGluZSwgaXQgaW5oZXJpdHMgdGhlIG1hcmtzIGZyb20gdGhlXG4gICAgcGxhY2Ugd2hlcmUgaXQgaXMgaW5zZXJ0ZWQuXG4gICAgKi9cbiAgICByZXBsYWNlU2VsZWN0aW9uV2l0aChub2RlLCBpbmhlcml0TWFya3MgPSB0cnVlKSB7XG4gICAgICAgIGxldCBzZWxlY3Rpb24gPSB0aGlzLnNlbGVjdGlvbjtcbiAgICAgICAgaWYgKGluaGVyaXRNYXJrcylcbiAgICAgICAgICAgIG5vZGUgPSBub2RlLm1hcmsodGhpcy5zdG9yZWRNYXJrcyB8fCAoc2VsZWN0aW9uLmVtcHR5ID8gc2VsZWN0aW9uLiRmcm9tLm1hcmtzKCkgOiAoc2VsZWN0aW9uLiRmcm9tLm1hcmtzQWNyb3NzKHNlbGVjdGlvbi4kdG8pIHx8IE1hcmsubm9uZSkpKTtcbiAgICAgICAgc2VsZWN0aW9uLnJlcGxhY2VXaXRoKHRoaXMsIG5vZGUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgRGVsZXRlIHRoZSBzZWxlY3Rpb24uXG4gICAgKi9cbiAgICBkZWxldGVTZWxlY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0aW9uLnJlcGxhY2UodGhpcyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICBSZXBsYWNlIHRoZSBnaXZlbiByYW5nZSwgb3IgdGhlIHNlbGVjdGlvbiBpZiBubyByYW5nZSBpcyBnaXZlbixcbiAgICB3aXRoIGEgdGV4dCBub2RlIGNvbnRhaW5pbmcgdGhlIGdpdmVuIHN0cmluZy5cbiAgICAqL1xuICAgIGluc2VydFRleHQodGV4dCwgZnJvbSwgdG8pIHtcbiAgICAgICAgbGV0IHNjaGVtYSA9IHRoaXMuZG9jLnR5cGUuc2NoZW1hO1xuICAgICAgICBpZiAoZnJvbSA9PSBudWxsKSB7XG4gICAgICAgICAgICBpZiAoIXRleHQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGVsZXRlU2VsZWN0aW9uKCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZXBsYWNlU2VsZWN0aW9uV2l0aChzY2hlbWEudGV4dCh0ZXh0KSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAodG8gPT0gbnVsbClcbiAgICAgICAgICAgICAgICB0byA9IGZyb207XG4gICAgICAgICAgICB0byA9IHRvID09IG51bGwgPyBmcm9tIDogdG87XG4gICAgICAgICAgICBpZiAoIXRleHQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGVsZXRlUmFuZ2UoZnJvbSwgdG8pO1xuICAgICAgICAgICAgbGV0IG1hcmtzID0gdGhpcy5zdG9yZWRNYXJrcztcbiAgICAgICAgICAgIGlmICghbWFya3MpIHtcbiAgICAgICAgICAgICAgICBsZXQgJGZyb20gPSB0aGlzLmRvYy5yZXNvbHZlKGZyb20pO1xuICAgICAgICAgICAgICAgIG1hcmtzID0gdG8gPT0gZnJvbSA/ICRmcm9tLm1hcmtzKCkgOiAkZnJvbS5tYXJrc0Fjcm9zcyh0aGlzLmRvYy5yZXNvbHZlKHRvKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnJlcGxhY2VSYW5nZVdpdGgoZnJvbSwgdG8sIHNjaGVtYS50ZXh0KHRleHQsIG1hcmtzKSk7XG4gICAgICAgICAgICBpZiAoIXRoaXMuc2VsZWN0aW9uLmVtcHR5KVxuICAgICAgICAgICAgICAgIHRoaXMuc2V0U2VsZWN0aW9uKFNlbGVjdGlvbi5uZWFyKHRoaXMuc2VsZWN0aW9uLiR0bykpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgU3RvcmUgYSBtZXRhZGF0YSBwcm9wZXJ0eSBpbiB0aGlzIHRyYW5zYWN0aW9uLCBrZXllZCBlaXRoZXIgYnlcbiAgICBuYW1lIG9yIGJ5IHBsdWdpbi5cbiAgICAqL1xuICAgIHNldE1ldGEoa2V5LCB2YWx1ZSkge1xuICAgICAgICB0aGlzLm1ldGFbdHlwZW9mIGtleSA9PSBcInN0cmluZ1wiID8ga2V5IDoga2V5LmtleV0gPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgIFJldHJpZXZlIGEgbWV0YWRhdGEgcHJvcGVydHkgZm9yIGEgZ2l2ZW4gbmFtZSBvciBwbHVnaW4uXG4gICAgKi9cbiAgICBnZXRNZXRhKGtleSkge1xuICAgICAgICByZXR1cm4gdGhpcy5tZXRhW3R5cGVvZiBrZXkgPT0gXCJzdHJpbmdcIiA/IGtleSA6IGtleS5rZXldO1xuICAgIH1cbiAgICAvKipcbiAgICBSZXR1cm5zIHRydWUgaWYgdGhpcyB0cmFuc2FjdGlvbiBkb2Vzbid0IGNvbnRhaW4gYW55IG1ldGFkYXRhLFxuICAgIGFuZCBjYW4gdGh1cyBzYWZlbHkgYmUgZXh0ZW5kZWQuXG4gICAgKi9cbiAgICBnZXQgaXNHZW5lcmljKCkge1xuICAgICAgICBmb3IgKGxldCBfIGluIHRoaXMubWV0YSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIC8qKlxuICAgIEluZGljYXRlIHRoYXQgdGhlIGVkaXRvciBzaG91bGQgc2Nyb2xsIHRoZSBzZWxlY3Rpb24gaW50byB2aWV3XG4gICAgd2hlbiB1cGRhdGVkIHRvIHRoZSBzdGF0ZSBwcm9kdWNlZCBieSB0aGlzIHRyYW5zYWN0aW9uLlxuICAgICovXG4gICAgc2Nyb2xsSW50b1ZpZXcoKSB7XG4gICAgICAgIHRoaXMudXBkYXRlZCB8PSBVUERBVEVEX1NDUk9MTDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgIFRydWUgd2hlbiB0aGlzIHRyYW5zYWN0aW9uIGhhcyBoYWQgYHNjcm9sbEludG9WaWV3YCBjYWxsZWQgb24gaXQuXG4gICAgKi9cbiAgICBnZXQgc2Nyb2xsZWRJbnRvVmlldygpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLnVwZGF0ZWQgJiBVUERBVEVEX1NDUk9MTCkgPiAwO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gYmluZChmLCBzZWxmKSB7XG4gICAgcmV0dXJuICFzZWxmIHx8ICFmID8gZiA6IGYuYmluZChzZWxmKTtcbn1cbmNsYXNzIEZpZWxkRGVzYyB7XG4gICAgY29uc3RydWN0b3IobmFtZSwgZGVzYywgc2VsZikge1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLmluaXQgPSBiaW5kKGRlc2MuaW5pdCwgc2VsZik7XG4gICAgICAgIHRoaXMuYXBwbHkgPSBiaW5kKGRlc2MuYXBwbHksIHNlbGYpO1xuICAgIH1cbn1cbmNvbnN0IGJhc2VGaWVsZHMgPSBbXG4gICAgbmV3IEZpZWxkRGVzYyhcImRvY1wiLCB7XG4gICAgICAgIGluaXQoY29uZmlnKSB7IHJldHVybiBjb25maWcuZG9jIHx8IGNvbmZpZy5zY2hlbWEudG9wTm9kZVR5cGUuY3JlYXRlQW5kRmlsbCgpOyB9LFxuICAgICAgICBhcHBseSh0cikgeyByZXR1cm4gdHIuZG9jOyB9XG4gICAgfSksXG4gICAgbmV3IEZpZWxkRGVzYyhcInNlbGVjdGlvblwiLCB7XG4gICAgICAgIGluaXQoY29uZmlnLCBpbnN0YW5jZSkgeyByZXR1cm4gY29uZmlnLnNlbGVjdGlvbiB8fCBTZWxlY3Rpb24uYXRTdGFydChpbnN0YW5jZS5kb2MpOyB9LFxuICAgICAgICBhcHBseSh0cikgeyByZXR1cm4gdHIuc2VsZWN0aW9uOyB9XG4gICAgfSksXG4gICAgbmV3IEZpZWxkRGVzYyhcInN0b3JlZE1hcmtzXCIsIHtcbiAgICAgICAgaW5pdChjb25maWcpIHsgcmV0dXJuIGNvbmZpZy5zdG9yZWRNYXJrcyB8fCBudWxsOyB9LFxuICAgICAgICBhcHBseSh0ciwgX21hcmtzLCBfb2xkLCBzdGF0ZSkgeyByZXR1cm4gc3RhdGUuc2VsZWN0aW9uLiRjdXJzb3IgPyB0ci5zdG9yZWRNYXJrcyA6IG51bGw7IH1cbiAgICB9KSxcbiAgICBuZXcgRmllbGREZXNjKFwic2Nyb2xsVG9TZWxlY3Rpb25cIiwge1xuICAgICAgICBpbml0KCkgeyByZXR1cm4gMDsgfSxcbiAgICAgICAgYXBwbHkodHIsIHByZXYpIHsgcmV0dXJuIHRyLnNjcm9sbGVkSW50b1ZpZXcgPyBwcmV2ICsgMSA6IHByZXY7IH1cbiAgICB9KVxuXTtcbi8vIE9iamVjdCB3cmFwcGluZyB0aGUgcGFydCBvZiBhIHN0YXRlIG9iamVjdCB0aGF0IHN0YXlzIHRoZSBzYW1lXG4vLyBhY3Jvc3MgdHJhbnNhY3Rpb25zLiBTdG9yZWQgaW4gdGhlIHN0YXRlJ3MgYGNvbmZpZ2AgcHJvcGVydHkuXG5jbGFzcyBDb25maWd1cmF0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihzY2hlbWEsIHBsdWdpbnMpIHtcbiAgICAgICAgdGhpcy5zY2hlbWEgPSBzY2hlbWE7XG4gICAgICAgIHRoaXMucGx1Z2lucyA9IFtdO1xuICAgICAgICB0aGlzLnBsdWdpbnNCeUtleSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIHRoaXMuZmllbGRzID0gYmFzZUZpZWxkcy5zbGljZSgpO1xuICAgICAgICBpZiAocGx1Z2lucylcbiAgICAgICAgICAgIHBsdWdpbnMuZm9yRWFjaChwbHVnaW4gPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnBsdWdpbnNCeUtleVtwbHVnaW4ua2V5XSlcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJBZGRpbmcgZGlmZmVyZW50IGluc3RhbmNlcyBvZiBhIGtleWVkIHBsdWdpbiAoXCIgKyBwbHVnaW4ua2V5ICsgXCIpXCIpO1xuICAgICAgICAgICAgICAgIHRoaXMucGx1Z2lucy5wdXNoKHBsdWdpbik7XG4gICAgICAgICAgICAgICAgdGhpcy5wbHVnaW5zQnlLZXlbcGx1Z2luLmtleV0gPSBwbHVnaW47XG4gICAgICAgICAgICAgICAgaWYgKHBsdWdpbi5zcGVjLnN0YXRlKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmZpZWxkcy5wdXNoKG5ldyBGaWVsZERlc2MocGx1Z2luLmtleSwgcGx1Z2luLnNwZWMuc3RhdGUsIHBsdWdpbikpO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxufVxuLyoqXG5UaGUgc3RhdGUgb2YgYSBQcm9zZU1pcnJvciBlZGl0b3IgaXMgcmVwcmVzZW50ZWQgYnkgYW4gb2JqZWN0IG9mXG50aGlzIHR5cGUuIEEgc3RhdGUgaXMgYSBwZXJzaXN0ZW50IGRhdGEgc3RydWN0dXJl4oCUaXQgaXNuJ3RcbnVwZGF0ZWQsIGJ1dCByYXRoZXIgYSBuZXcgc3RhdGUgdmFsdWUgaXMgY29tcHV0ZWQgZnJvbSBhbiBvbGQgb25lXG51c2luZyB0aGUgW2BhcHBseWBdKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyNzdGF0ZS5FZGl0b3JTdGF0ZS5hcHBseSkgbWV0aG9kLlxuXG5BIHN0YXRlIGhvbGRzIGEgbnVtYmVyIG9mIGJ1aWx0LWluIGZpZWxkcywgYW5kIHBsdWdpbnMgY2FuXG5bZGVmaW5lXShodHRwczovL3Byb3NlbWlycm9yLm5ldC9kb2NzL3JlZi8jc3RhdGUuUGx1Z2luU3BlYy5zdGF0ZSkgYWRkaXRpb25hbCBmaWVsZHMuXG4qL1xuY2xhc3MgRWRpdG9yU3RhdGUge1xuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgY29uc3RydWN0b3IoXG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBjb25maWcpIHtcbiAgICAgICAgdGhpcy5jb25maWcgPSBjb25maWc7XG4gICAgfVxuICAgIC8qKlxuICAgIFRoZSBzY2hlbWEgb2YgdGhlIHN0YXRlJ3MgZG9jdW1lbnQuXG4gICAgKi9cbiAgICBnZXQgc2NoZW1hKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb25maWcuc2NoZW1hO1xuICAgIH1cbiAgICAvKipcbiAgICBUaGUgcGx1Z2lucyB0aGF0IGFyZSBhY3RpdmUgaW4gdGhpcyBzdGF0ZS5cbiAgICAqL1xuICAgIGdldCBwbHVnaW5zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb25maWcucGx1Z2lucztcbiAgICB9XG4gICAgLyoqXG4gICAgQXBwbHkgdGhlIGdpdmVuIHRyYW5zYWN0aW9uIHRvIHByb2R1Y2UgYSBuZXcgc3RhdGUuXG4gICAgKi9cbiAgICBhcHBseSh0cikge1xuICAgICAgICByZXR1cm4gdGhpcy5hcHBseVRyYW5zYWN0aW9uKHRyKS5zdGF0ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgQGlnbm9yZVxuICAgICovXG4gICAgZmlsdGVyVHJhbnNhY3Rpb24odHIsIGlnbm9yZSA9IC0xKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5jb25maWcucGx1Z2lucy5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgIGlmIChpICE9IGlnbm9yZSkge1xuICAgICAgICAgICAgICAgIGxldCBwbHVnaW4gPSB0aGlzLmNvbmZpZy5wbHVnaW5zW2ldO1xuICAgICAgICAgICAgICAgIGlmIChwbHVnaW4uc3BlYy5maWx0ZXJUcmFuc2FjdGlvbiAmJiAhcGx1Z2luLnNwZWMuZmlsdGVyVHJhbnNhY3Rpb24uY2FsbChwbHVnaW4sIHRyLCB0aGlzKSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgVmVyYm9zZSB2YXJpYW50IG9mIFtgYXBwbHlgXShodHRwczovL3Byb3NlbWlycm9yLm5ldC9kb2NzL3JlZi8jc3RhdGUuRWRpdG9yU3RhdGUuYXBwbHkpIHRoYXRcbiAgICByZXR1cm5zIHRoZSBwcmVjaXNlIHRyYW5zYWN0aW9ucyB0aGF0IHdlcmUgYXBwbGllZCAod2hpY2ggbWlnaHRcbiAgICBiZSBpbmZsdWVuY2VkIGJ5IHRoZSBbdHJhbnNhY3Rpb25cbiAgICBob29rc10oaHR0cHM6Ly9wcm9zZW1pcnJvci5uZXQvZG9jcy9yZWYvI3N0YXRlLlBsdWdpblNwZWMuZmlsdGVyVHJhbnNhY3Rpb24pIG9mXG4gICAgcGx1Z2lucykgYWxvbmcgd2l0aCB0aGUgbmV3IHN0YXRlLlxuICAgICovXG4gICAgYXBwbHlUcmFuc2FjdGlvbihyb290VHIpIHtcbiAgICAgICAgaWYgKCF0aGlzLmZpbHRlclRyYW5zYWN0aW9uKHJvb3RUcikpXG4gICAgICAgICAgICByZXR1cm4geyBzdGF0ZTogdGhpcywgdHJhbnNhY3Rpb25zOiBbXSB9O1xuICAgICAgICBsZXQgdHJzID0gW3Jvb3RUcl0sIG5ld1N0YXRlID0gdGhpcy5hcHBseUlubmVyKHJvb3RUciksIHNlZW4gPSBudWxsO1xuICAgICAgICAvLyBUaGlzIGxvb3AgcmVwZWF0ZWRseSBnaXZlcyBwbHVnaW5zIGEgY2hhbmNlIHRvIHJlc3BvbmQgdG9cbiAgICAgICAgLy8gdHJhbnNhY3Rpb25zIGFzIG5ldyB0cmFuc2FjdGlvbnMgYXJlIGFkZGVkLCBtYWtpbmcgc3VyZSB0byBvbmx5XG4gICAgICAgIC8vIHBhc3MgdGhlIHRyYW5zYWN0aW9ucyB0aGUgcGx1Z2luIGRpZCBub3Qgc2VlIGJlZm9yZS5cbiAgICAgICAgZm9yICg7Oykge1xuICAgICAgICAgICAgbGV0IGhhdmVOZXcgPSBmYWxzZTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5jb25maWcucGx1Z2lucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGxldCBwbHVnaW4gPSB0aGlzLmNvbmZpZy5wbHVnaW5zW2ldO1xuICAgICAgICAgICAgICAgIGlmIChwbHVnaW4uc3BlYy5hcHBlbmRUcmFuc2FjdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBsZXQgbiA9IHNlZW4gPyBzZWVuW2ldLm4gOiAwLCBvbGRTdGF0ZSA9IHNlZW4gPyBzZWVuW2ldLnN0YXRlIDogdGhpcztcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRyID0gbiA8IHRycy5sZW5ndGggJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsdWdpbi5zcGVjLmFwcGVuZFRyYW5zYWN0aW9uLmNhbGwocGx1Z2luLCBuID8gdHJzLnNsaWNlKG4pIDogdHJzLCBvbGRTdGF0ZSwgbmV3U3RhdGUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodHIgJiYgbmV3U3RhdGUuZmlsdGVyVHJhbnNhY3Rpb24odHIsIGkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ci5zZXRNZXRhKFwiYXBwZW5kZWRUcmFuc2FjdGlvblwiLCByb290VHIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzZWVuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VlbiA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5jb25maWcucGx1Z2lucy5sZW5ndGg7IGorKylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vlbi5wdXNoKGogPCBpID8geyBzdGF0ZTogbmV3U3RhdGUsIG46IHRycy5sZW5ndGggfSA6IHsgc3RhdGU6IHRoaXMsIG46IDAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnMucHVzaCh0cik7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdTdGF0ZSA9IG5ld1N0YXRlLmFwcGx5SW5uZXIodHIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaGF2ZU5ldyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlZW4pXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWVuW2ldID0geyBzdGF0ZTogbmV3U3RhdGUsIG46IHRycy5sZW5ndGggfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWhhdmVOZXcpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgc3RhdGU6IG5ld1N0YXRlLCB0cmFuc2FjdGlvbnM6IHRycyB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgYXBwbHlJbm5lcih0cikge1xuICAgICAgICBpZiAoIXRyLmJlZm9yZS5lcSh0aGlzLmRvYykpXG4gICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkFwcGx5aW5nIGEgbWlzbWF0Y2hlZCB0cmFuc2FjdGlvblwiKTtcbiAgICAgICAgbGV0IG5ld0luc3RhbmNlID0gbmV3IEVkaXRvclN0YXRlKHRoaXMuY29uZmlnKSwgZmllbGRzID0gdGhpcy5jb25maWcuZmllbGRzO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZpZWxkcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IGZpZWxkID0gZmllbGRzW2ldO1xuICAgICAgICAgICAgbmV3SW5zdGFuY2VbZmllbGQubmFtZV0gPSBmaWVsZC5hcHBseSh0ciwgdGhpc1tmaWVsZC5uYW1lXSwgdGhpcywgbmV3SW5zdGFuY2UpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXdJbnN0YW5jZTtcbiAgICB9XG4gICAgLyoqXG4gICAgU3RhcnQgYSBbdHJhbnNhY3Rpb25dKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyNzdGF0ZS5UcmFuc2FjdGlvbikgZnJvbSB0aGlzIHN0YXRlLlxuICAgICovXG4gICAgZ2V0IHRyKCkgeyByZXR1cm4gbmV3IFRyYW5zYWN0aW9uKHRoaXMpOyB9XG4gICAgLyoqXG4gICAgQ3JlYXRlIGEgbmV3IHN0YXRlLlxuICAgICovXG4gICAgc3RhdGljIGNyZWF0ZShjb25maWcpIHtcbiAgICAgICAgbGV0ICRjb25maWcgPSBuZXcgQ29uZmlndXJhdGlvbihjb25maWcuZG9jID8gY29uZmlnLmRvYy50eXBlLnNjaGVtYSA6IGNvbmZpZy5zY2hlbWEsIGNvbmZpZy5wbHVnaW5zKTtcbiAgICAgICAgbGV0IGluc3RhbmNlID0gbmV3IEVkaXRvclN0YXRlKCRjb25maWcpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8ICRjb25maWcuZmllbGRzLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgaW5zdGFuY2VbJGNvbmZpZy5maWVsZHNbaV0ubmFtZV0gPSAkY29uZmlnLmZpZWxkc1tpXS5pbml0KGNvbmZpZywgaW5zdGFuY2UpO1xuICAgICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgfVxuICAgIC8qKlxuICAgIENyZWF0ZSBhIG5ldyBzdGF0ZSBiYXNlZCBvbiB0aGlzIG9uZSwgYnV0IHdpdGggYW4gYWRqdXN0ZWQgc2V0XG4gICAgb2YgYWN0aXZlIHBsdWdpbnMuIFN0YXRlIGZpZWxkcyB0aGF0IGV4aXN0IGluIGJvdGggc2V0cyBvZlxuICAgIHBsdWdpbnMgYXJlIGtlcHQgdW5jaGFuZ2VkLiBUaG9zZSB0aGF0IG5vIGxvbmdlciBleGlzdCBhcmVcbiAgICBkcm9wcGVkLCBhbmQgdGhvc2UgdGhhdCBhcmUgbmV3IGFyZSBpbml0aWFsaXplZCB1c2luZyB0aGVpclxuICAgIFtgaW5pdGBdKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyNzdGF0ZS5TdGF0ZUZpZWxkLmluaXQpIG1ldGhvZCwgcGFzc2luZyBpbiB0aGUgbmV3XG4gICAgY29uZmlndXJhdGlvbiBvYmplY3QuLlxuICAgICovXG4gICAgcmVjb25maWd1cmUoY29uZmlnKSB7XG4gICAgICAgIGxldCAkY29uZmlnID0gbmV3IENvbmZpZ3VyYXRpb24odGhpcy5zY2hlbWEsIGNvbmZpZy5wbHVnaW5zKTtcbiAgICAgICAgbGV0IGZpZWxkcyA9ICRjb25maWcuZmllbGRzLCBpbnN0YW5jZSA9IG5ldyBFZGl0b3JTdGF0ZSgkY29uZmlnKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaWVsZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBuYW1lID0gZmllbGRzW2ldLm5hbWU7XG4gICAgICAgICAgICBpbnN0YW5jZVtuYW1lXSA9IHRoaXMuaGFzT3duUHJvcGVydHkobmFtZSkgPyB0aGlzW25hbWVdIDogZmllbGRzW2ldLmluaXQoY29uZmlnLCBpbnN0YW5jZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgIH1cbiAgICAvKipcbiAgICBTZXJpYWxpemUgdGhpcyBzdGF0ZSB0byBKU09OLiBJZiB5b3Ugd2FudCB0byBzZXJpYWxpemUgdGhlIHN0YXRlXG4gICAgb2YgcGx1Z2lucywgcGFzcyBhbiBvYmplY3QgbWFwcGluZyBwcm9wZXJ0eSBuYW1lcyB0byB1c2UgaW4gdGhlXG4gICAgcmVzdWx0aW5nIEpTT04gb2JqZWN0IHRvIHBsdWdpbiBvYmplY3RzLiBUaGUgYXJndW1lbnQgbWF5IGFsc28gYmVcbiAgICBhIHN0cmluZyBvciBudW1iZXIsIGluIHdoaWNoIGNhc2UgaXQgaXMgaWdub3JlZCwgdG8gc3VwcG9ydCB0aGVcbiAgICB3YXkgYEpTT04uc3RyaW5naWZ5YCBjYWxscyBgdG9TdHJpbmdgIG1ldGhvZHMuXG4gICAgKi9cbiAgICB0b0pTT04ocGx1Z2luRmllbGRzKSB7XG4gICAgICAgIGxldCByZXN1bHQgPSB7IGRvYzogdGhpcy5kb2MudG9KU09OKCksIHNlbGVjdGlvbjogdGhpcy5zZWxlY3Rpb24udG9KU09OKCkgfTtcbiAgICAgICAgaWYgKHRoaXMuc3RvcmVkTWFya3MpXG4gICAgICAgICAgICByZXN1bHQuc3RvcmVkTWFya3MgPSB0aGlzLnN0b3JlZE1hcmtzLm1hcChtID0+IG0udG9KU09OKCkpO1xuICAgICAgICBpZiAocGx1Z2luRmllbGRzICYmIHR5cGVvZiBwbHVnaW5GaWVsZHMgPT0gJ29iamVjdCcpXG4gICAgICAgICAgICBmb3IgKGxldCBwcm9wIGluIHBsdWdpbkZpZWxkcykge1xuICAgICAgICAgICAgICAgIGlmIChwcm9wID09IFwiZG9jXCIgfHwgcHJvcCA9PSBcInNlbGVjdGlvblwiKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlRoZSBKU09OIGZpZWxkcyBgZG9jYCBhbmQgYHNlbGVjdGlvbmAgYXJlIHJlc2VydmVkXCIpO1xuICAgICAgICAgICAgICAgIGxldCBwbHVnaW4gPSBwbHVnaW5GaWVsZHNbcHJvcF0sIHN0YXRlID0gcGx1Z2luLnNwZWMuc3RhdGU7XG4gICAgICAgICAgICAgICAgaWYgKHN0YXRlICYmIHN0YXRlLnRvSlNPTilcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0W3Byb3BdID0gc3RhdGUudG9KU09OLmNhbGwocGx1Z2luLCB0aGlzW3BsdWdpbi5rZXldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLyoqXG4gICAgRGVzZXJpYWxpemUgYSBKU09OIHJlcHJlc2VudGF0aW9uIG9mIGEgc3RhdGUuIGBjb25maWdgIHNob3VsZFxuICAgIGhhdmUgYXQgbGVhc3QgYSBgc2NoZW1hYCBmaWVsZCwgYW5kIHNob3VsZCBjb250YWluIGFycmF5IG9mXG4gICAgcGx1Z2lucyB0byBpbml0aWFsaXplIHRoZSBzdGF0ZSB3aXRoLiBgcGx1Z2luRmllbGRzYCBjYW4gYmUgdXNlZFxuICAgIHRvIGRlc2VyaWFsaXplIHRoZSBzdGF0ZSBvZiBwbHVnaW5zLCBieSBhc3NvY2lhdGluZyBwbHVnaW5cbiAgICBpbnN0YW5jZXMgd2l0aCB0aGUgcHJvcGVydHkgbmFtZXMgdGhleSB1c2UgaW4gdGhlIEpTT04gb2JqZWN0LlxuICAgICovXG4gICAgc3RhdGljIGZyb21KU09OKGNvbmZpZywganNvbiwgcGx1Z2luRmllbGRzKSB7XG4gICAgICAgIGlmICghanNvbilcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiSW52YWxpZCBpbnB1dCBmb3IgRWRpdG9yU3RhdGUuZnJvbUpTT05cIik7XG4gICAgICAgIGlmICghY29uZmlnLnNjaGVtYSlcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiUmVxdWlyZWQgY29uZmlnIGZpZWxkICdzY2hlbWEnIG1pc3NpbmdcIik7XG4gICAgICAgIGxldCAkY29uZmlnID0gbmV3IENvbmZpZ3VyYXRpb24oY29uZmlnLnNjaGVtYSwgY29uZmlnLnBsdWdpbnMpO1xuICAgICAgICBsZXQgaW5zdGFuY2UgPSBuZXcgRWRpdG9yU3RhdGUoJGNvbmZpZyk7XG4gICAgICAgICRjb25maWcuZmllbGRzLmZvckVhY2goZmllbGQgPT4ge1xuICAgICAgICAgICAgaWYgKGZpZWxkLm5hbWUgPT0gXCJkb2NcIikge1xuICAgICAgICAgICAgICAgIGluc3RhbmNlLmRvYyA9IE5vZGUuZnJvbUpTT04oY29uZmlnLnNjaGVtYSwganNvbi5kb2MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZmllbGQubmFtZSA9PSBcInNlbGVjdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgaW5zdGFuY2Uuc2VsZWN0aW9uID0gU2VsZWN0aW9uLmZyb21KU09OKGluc3RhbmNlLmRvYywganNvbi5zZWxlY3Rpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZmllbGQubmFtZSA9PSBcInN0b3JlZE1hcmtzXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoanNvbi5zdG9yZWRNYXJrcylcbiAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2Uuc3RvcmVkTWFya3MgPSBqc29uLnN0b3JlZE1hcmtzLm1hcChjb25maWcuc2NoZW1hLm1hcmtGcm9tSlNPTik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAocGx1Z2luRmllbGRzKVxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBwcm9wIGluIHBsdWdpbkZpZWxkcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHBsdWdpbiA9IHBsdWdpbkZpZWxkc1twcm9wXSwgc3RhdGUgPSBwbHVnaW4uc3BlYy5zdGF0ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwbHVnaW4ua2V5ID09IGZpZWxkLm5hbWUgJiYgc3RhdGUgJiYgc3RhdGUuZnJvbUpTT04gJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoanNvbiwgcHJvcCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZVtmaWVsZC5uYW1lXSA9IHN0YXRlLmZyb21KU09OLmNhbGwocGx1Z2luLCBjb25maWcsIGpzb25bcHJvcF0sIGluc3RhbmNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpbnN0YW5jZVtmaWVsZC5uYW1lXSA9IGZpZWxkLmluaXQoY29uZmlnLCBpbnN0YW5jZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBiaW5kUHJvcHMob2JqLCBzZWxmLCB0YXJnZXQpIHtcbiAgICBmb3IgKGxldCBwcm9wIGluIG9iaikge1xuICAgICAgICBsZXQgdmFsID0gb2JqW3Byb3BdO1xuICAgICAgICBpZiAodmFsIGluc3RhbmNlb2YgRnVuY3Rpb24pXG4gICAgICAgICAgICB2YWwgPSB2YWwuYmluZChzZWxmKTtcbiAgICAgICAgZWxzZSBpZiAocHJvcCA9PSBcImhhbmRsZURPTUV2ZW50c1wiKVxuICAgICAgICAgICAgdmFsID0gYmluZFByb3BzKHZhbCwgc2VsZiwge30pO1xuICAgICAgICB0YXJnZXRbcHJvcF0gPSB2YWw7XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG59XG4vKipcblBsdWdpbnMgYnVuZGxlIGZ1bmN0aW9uYWxpdHkgdGhhdCBjYW4gYmUgYWRkZWQgdG8gYW4gZWRpdG9yLlxuVGhleSBhcmUgcGFydCBvZiB0aGUgW2VkaXRvciBzdGF0ZV0oaHR0cHM6Ly9wcm9zZW1pcnJvci5uZXQvZG9jcy9yZWYvI3N0YXRlLkVkaXRvclN0YXRlKSBhbmRcbm1heSBpbmZsdWVuY2UgdGhhdCBzdGF0ZSBhbmQgdGhlIHZpZXcgdGhhdCBjb250YWlucyBpdC5cbiovXG5jbGFzcyBQbHVnaW4ge1xuICAgIC8qKlxuICAgIENyZWF0ZSBhIHBsdWdpbi5cbiAgICAqL1xuICAgIGNvbnN0cnVjdG9yKFxuICAgIC8qKlxuICAgIFRoZSBwbHVnaW4ncyBbc3BlYyBvYmplY3RdKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyNzdGF0ZS5QbHVnaW5TcGVjKS5cbiAgICAqL1xuICAgIHNwZWMpIHtcbiAgICAgICAgdGhpcy5zcGVjID0gc3BlYztcbiAgICAgICAgLyoqXG4gICAgICAgIFRoZSBbcHJvcHNdKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyN2aWV3LkVkaXRvclByb3BzKSBleHBvcnRlZCBieSB0aGlzIHBsdWdpbi5cbiAgICAgICAgKi9cbiAgICAgICAgdGhpcy5wcm9wcyA9IHt9O1xuICAgICAgICBpZiAoc3BlYy5wcm9wcylcbiAgICAgICAgICAgIGJpbmRQcm9wcyhzcGVjLnByb3BzLCB0aGlzLCB0aGlzLnByb3BzKTtcbiAgICAgICAgdGhpcy5rZXkgPSBzcGVjLmtleSA/IHNwZWMua2V5LmtleSA6IGNyZWF0ZUtleShcInBsdWdpblwiKTtcbiAgICB9XG4gICAgLyoqXG4gICAgRXh0cmFjdCB0aGUgcGx1Z2luJ3Mgc3RhdGUgZmllbGQgZnJvbSBhbiBlZGl0b3Igc3RhdGUuXG4gICAgKi9cbiAgICBnZXRTdGF0ZShzdGF0ZSkgeyByZXR1cm4gc3RhdGVbdGhpcy5rZXldOyB9XG59XG5jb25zdCBrZXlzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbmZ1bmN0aW9uIGNyZWF0ZUtleShuYW1lKSB7XG4gICAgaWYgKG5hbWUgaW4ga2V5cylcbiAgICAgICAgcmV0dXJuIG5hbWUgKyBcIiRcIiArICsra2V5c1tuYW1lXTtcbiAgICBrZXlzW25hbWVdID0gMDtcbiAgICByZXR1cm4gbmFtZSArIFwiJFwiO1xufVxuLyoqXG5BIGtleSBpcyB1c2VkIHRvIFt0YWddKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyNzdGF0ZS5QbHVnaW5TcGVjLmtleSkgcGx1Z2lucyBpbiBhIHdheVxudGhhdCBtYWtlcyBpdCBwb3NzaWJsZSB0byBmaW5kIHRoZW0sIGdpdmVuIGFuIGVkaXRvciBzdGF0ZS5cbkFzc2lnbmluZyBhIGtleSBkb2VzIG1lYW4gb25seSBvbmUgcGx1Z2luIG9mIHRoYXQgdHlwZSBjYW4gYmVcbmFjdGl2ZSBpbiBhIHN0YXRlLlxuKi9cbmNsYXNzIFBsdWdpbktleSB7XG4gICAgLyoqXG4gICAgQ3JlYXRlIGEgcGx1Z2luIGtleS5cbiAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG5hbWUgPSBcImtleVwiKSB7IHRoaXMua2V5ID0gY3JlYXRlS2V5KG5hbWUpOyB9XG4gICAgLyoqXG4gICAgR2V0IHRoZSBhY3RpdmUgcGx1Z2luIHdpdGggdGhpcyBrZXksIGlmIGFueSwgZnJvbSBhbiBlZGl0b3JcbiAgICBzdGF0ZS5cbiAgICAqL1xuICAgIGdldChzdGF0ZSkgeyByZXR1cm4gc3RhdGUuY29uZmlnLnBsdWdpbnNCeUtleVt0aGlzLmtleV07IH1cbiAgICAvKipcbiAgICBHZXQgdGhlIHBsdWdpbidzIHN0YXRlIGZyb20gYW4gZWRpdG9yIHN0YXRlLlxuICAgICovXG4gICAgZ2V0U3RhdGUoc3RhdGUpIHsgcmV0dXJuIHN0YXRlW3RoaXMua2V5XTsgfVxufVxuXG5leHBvcnQgeyBBbGxTZWxlY3Rpb24sIEVkaXRvclN0YXRlLCBOb2RlU2VsZWN0aW9uLCBQbHVnaW4sIFBsdWdpbktleSwgU2VsZWN0aW9uLCBTZWxlY3Rpb25SYW5nZSwgVGV4dFNlbGVjdGlvbiwgVHJhbnNhY3Rpb24gfTtcbiIsImltcG9ydCB7IFJlcGxhY2VFcnJvciwgU2xpY2UsIEZyYWdtZW50LCBNYXJrVHlwZSB9IGZyb20gJ3Byb3NlbWlycm9yLW1vZGVsJztcblxuLy8gUmVjb3ZlcnkgdmFsdWVzIGVuY29kZSBhIHJhbmdlIGluZGV4IGFuZCBhbiBvZmZzZXQuIFRoZXkgYXJlXG4vLyByZXByZXNlbnRlZCBhcyBudW1iZXJzLCBiZWNhdXNlIHRvbnMgb2YgdGhlbSB3aWxsIGJlIGNyZWF0ZWQgd2hlblxuLy8gbWFwcGluZywgZm9yIGV4YW1wbGUsIGEgbGFyZ2UgbnVtYmVyIG9mIGRlY29yYXRpb25zLiBUaGUgbnVtYmVyJ3Ncbi8vIGxvd2VyIDE2IGJpdHMgcHJvdmlkZSB0aGUgaW5kZXgsIHRoZSByZW1haW5pbmcgYml0cyB0aGUgb2Zmc2V0LlxuLy9cbi8vIE5vdGU6IFdlIGludGVudGlvbmFsbHkgZG9uJ3QgdXNlIGJpdCBzaGlmdCBvcGVyYXRvcnMgdG8gZW4tIGFuZFxuLy8gZGVjb2RlIHRoZXNlLCBzaW5jZSB0aG9zZSBjbGlwIHRvIDMyIGJpdHMsIHdoaWNoIHdlIG1pZ2h0IGluIHJhcmVcbi8vIGNhc2VzIHdhbnQgdG8gb3ZlcmZsb3cuIEEgNjQtYml0IGZsb2F0IGNhbiByZXByZXNlbnQgNDgtYml0XG4vLyBpbnRlZ2VycyBwcmVjaXNlbHkuXG5jb25zdCBsb3dlcjE2ID0gMHhmZmZmO1xuY29uc3QgZmFjdG9yMTYgPSBNYXRoLnBvdygyLCAxNik7XG5mdW5jdGlvbiBtYWtlUmVjb3ZlcihpbmRleCwgb2Zmc2V0KSB7IHJldHVybiBpbmRleCArIG9mZnNldCAqIGZhY3RvcjE2OyB9XG5mdW5jdGlvbiByZWNvdmVySW5kZXgodmFsdWUpIHsgcmV0dXJuIHZhbHVlICYgbG93ZXIxNjsgfVxuZnVuY3Rpb24gcmVjb3Zlck9mZnNldCh2YWx1ZSkgeyByZXR1cm4gKHZhbHVlIC0gKHZhbHVlICYgbG93ZXIxNikpIC8gZmFjdG9yMTY7IH1cbmNvbnN0IERFTF9CRUZPUkUgPSAxLCBERUxfQUZURVIgPSAyLCBERUxfQUNST1NTID0gNCwgREVMX1NJREUgPSA4O1xuLyoqXG5BbiBvYmplY3QgcmVwcmVzZW50aW5nIGEgbWFwcGVkIHBvc2l0aW9uIHdpdGggZXh0cmFcbmluZm9ybWF0aW9uLlxuKi9cbmNsYXNzIE1hcFJlc3VsdCB7XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAvKipcbiAgICBUaGUgbWFwcGVkIHZlcnNpb24gb2YgdGhlIHBvc2l0aW9uLlxuICAgICovXG4gICAgcG9zLCBcbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIGRlbEluZm8sIFxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgcmVjb3Zlcikge1xuICAgICAgICB0aGlzLnBvcyA9IHBvcztcbiAgICAgICAgdGhpcy5kZWxJbmZvID0gZGVsSW5mbztcbiAgICAgICAgdGhpcy5yZWNvdmVyID0gcmVjb3ZlcjtcbiAgICB9XG4gICAgLyoqXG4gICAgVGVsbHMgeW91IHdoZXRoZXIgdGhlIHBvc2l0aW9uIHdhcyBkZWxldGVkLCB0aGF0IGlzLCB3aGV0aGVyIHRoZVxuICAgIHN0ZXAgcmVtb3ZlZCB0aGUgdG9rZW4gb24gdGhlIHNpZGUgcXVlcmllZCAodmlhIHRoZSBgYXNzb2NgKVxuICAgIGFyZ3VtZW50IGZyb20gdGhlIGRvY3VtZW50LlxuICAgICovXG4gICAgZ2V0IGRlbGV0ZWQoKSB7IHJldHVybiAodGhpcy5kZWxJbmZvICYgREVMX1NJREUpID4gMDsgfVxuICAgIC8qKlxuICAgIFRlbGxzIHlvdSB3aGV0aGVyIHRoZSB0b2tlbiBiZWZvcmUgdGhlIG1hcHBlZCBwb3NpdGlvbiB3YXMgZGVsZXRlZC5cbiAgICAqL1xuICAgIGdldCBkZWxldGVkQmVmb3JlKCkgeyByZXR1cm4gKHRoaXMuZGVsSW5mbyAmIChERUxfQkVGT1JFIHwgREVMX0FDUk9TUykpID4gMDsgfVxuICAgIC8qKlxuICAgIFRydWUgd2hlbiB0aGUgdG9rZW4gYWZ0ZXIgdGhlIG1hcHBlZCBwb3NpdGlvbiB3YXMgZGVsZXRlZC5cbiAgICAqL1xuICAgIGdldCBkZWxldGVkQWZ0ZXIoKSB7IHJldHVybiAodGhpcy5kZWxJbmZvICYgKERFTF9BRlRFUiB8IERFTF9BQ1JPU1MpKSA+IDA7IH1cbiAgICAvKipcbiAgICBUZWxscyB3aGV0aGVyIGFueSBvZiB0aGUgc3RlcHMgbWFwcGVkIHRocm91Z2ggZGVsZXRlcyBhY3Jvc3MgdGhlXG4gICAgcG9zaXRpb24gKGluY2x1ZGluZyBib3RoIHRoZSB0b2tlbiBiZWZvcmUgYW5kIGFmdGVyIHRoZVxuICAgIHBvc2l0aW9uKS5cbiAgICAqL1xuICAgIGdldCBkZWxldGVkQWNyb3NzKCkgeyByZXR1cm4gKHRoaXMuZGVsSW5mbyAmIERFTF9BQ1JPU1MpID4gMDsgfVxufVxuLyoqXG5BIG1hcCBkZXNjcmliaW5nIHRoZSBkZWxldGlvbnMgYW5kIGluc2VydGlvbnMgbWFkZSBieSBhIHN0ZXAsIHdoaWNoXG5jYW4gYmUgdXNlZCB0byBmaW5kIHRoZSBjb3JyZXNwb25kZW5jZSBiZXR3ZWVuIHBvc2l0aW9ucyBpbiB0aGVcbnByZS1zdGVwIHZlcnNpb24gb2YgYSBkb2N1bWVudCBhbmQgdGhlIHNhbWUgcG9zaXRpb24gaW4gdGhlXG5wb3N0LXN0ZXAgdmVyc2lvbi5cbiovXG5jbGFzcyBTdGVwTWFwIHtcbiAgICAvKipcbiAgICBDcmVhdGUgYSBwb3NpdGlvbiBtYXAuIFRoZSBtb2RpZmljYXRpb25zIHRvIHRoZSBkb2N1bWVudCBhcmVcbiAgICByZXByZXNlbnRlZCBhcyBhbiBhcnJheSBvZiBudW1iZXJzLCBpbiB3aGljaCBlYWNoIGdyb3VwIG9mIHRocmVlXG4gICAgcmVwcmVzZW50cyBhIG1vZGlmaWVkIGNodW5rIGFzIGBbc3RhcnQsIG9sZFNpemUsIG5ld1NpemVdYC5cbiAgICAqL1xuICAgIGNvbnN0cnVjdG9yKFxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgcmFuZ2VzLCBcbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIGludmVydGVkID0gZmFsc2UpIHtcbiAgICAgICAgdGhpcy5yYW5nZXMgPSByYW5nZXM7XG4gICAgICAgIHRoaXMuaW52ZXJ0ZWQgPSBpbnZlcnRlZDtcbiAgICAgICAgaWYgKCFyYW5nZXMubGVuZ3RoICYmIFN0ZXBNYXAuZW1wdHkpXG4gICAgICAgICAgICByZXR1cm4gU3RlcE1hcC5lbXB0eTtcbiAgICB9XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICByZWNvdmVyKHZhbHVlKSB7XG4gICAgICAgIGxldCBkaWZmID0gMCwgaW5kZXggPSByZWNvdmVySW5kZXgodmFsdWUpO1xuICAgICAgICBpZiAoIXRoaXMuaW52ZXJ0ZWQpXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGluZGV4OyBpKyspXG4gICAgICAgICAgICAgICAgZGlmZiArPSB0aGlzLnJhbmdlc1tpICogMyArIDJdIC0gdGhpcy5yYW5nZXNbaSAqIDMgKyAxXTtcbiAgICAgICAgcmV0dXJuIHRoaXMucmFuZ2VzW2luZGV4ICogM10gKyBkaWZmICsgcmVjb3Zlck9mZnNldCh2YWx1ZSk7XG4gICAgfVxuICAgIG1hcFJlc3VsdChwb3MsIGFzc29jID0gMSkgeyByZXR1cm4gdGhpcy5fbWFwKHBvcywgYXNzb2MsIGZhbHNlKTsgfVxuICAgIG1hcChwb3MsIGFzc29jID0gMSkgeyByZXR1cm4gdGhpcy5fbWFwKHBvcywgYXNzb2MsIHRydWUpOyB9XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBfbWFwKHBvcywgYXNzb2MsIHNpbXBsZSkge1xuICAgICAgICBsZXQgZGlmZiA9IDAsIG9sZEluZGV4ID0gdGhpcy5pbnZlcnRlZCA/IDIgOiAxLCBuZXdJbmRleCA9IHRoaXMuaW52ZXJ0ZWQgPyAxIDogMjtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJhbmdlcy5sZW5ndGg7IGkgKz0gMykge1xuICAgICAgICAgICAgbGV0IHN0YXJ0ID0gdGhpcy5yYW5nZXNbaV0gLSAodGhpcy5pbnZlcnRlZCA/IGRpZmYgOiAwKTtcbiAgICAgICAgICAgIGlmIChzdGFydCA+IHBvcylcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGxldCBvbGRTaXplID0gdGhpcy5yYW5nZXNbaSArIG9sZEluZGV4XSwgbmV3U2l6ZSA9IHRoaXMucmFuZ2VzW2kgKyBuZXdJbmRleF0sIGVuZCA9IHN0YXJ0ICsgb2xkU2l6ZTtcbiAgICAgICAgICAgIGlmIChwb3MgPD0gZW5kKSB7XG4gICAgICAgICAgICAgICAgbGV0IHNpZGUgPSAhb2xkU2l6ZSA/IGFzc29jIDogcG9zID09IHN0YXJ0ID8gLTEgOiBwb3MgPT0gZW5kID8gMSA6IGFzc29jO1xuICAgICAgICAgICAgICAgIGxldCByZXN1bHQgPSBzdGFydCArIGRpZmYgKyAoc2lkZSA8IDAgPyAwIDogbmV3U2l6ZSk7XG4gICAgICAgICAgICAgICAgaWYgKHNpbXBsZSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgICAgICBsZXQgcmVjb3ZlciA9IHBvcyA9PSAoYXNzb2MgPCAwID8gc3RhcnQgOiBlbmQpID8gbnVsbCA6IG1ha2VSZWNvdmVyKGkgLyAzLCBwb3MgLSBzdGFydCk7XG4gICAgICAgICAgICAgICAgbGV0IGRlbCA9IHBvcyA9PSBzdGFydCA/IERFTF9BRlRFUiA6IHBvcyA9PSBlbmQgPyBERUxfQkVGT1JFIDogREVMX0FDUk9TUztcbiAgICAgICAgICAgICAgICBpZiAoYXNzb2MgPCAwID8gcG9zICE9IHN0YXJ0IDogcG9zICE9IGVuZClcbiAgICAgICAgICAgICAgICAgICAgZGVsIHw9IERFTF9TSURFO1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgTWFwUmVzdWx0KHJlc3VsdCwgZGVsLCByZWNvdmVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRpZmYgKz0gbmV3U2l6ZSAtIG9sZFNpemU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNpbXBsZSA/IHBvcyArIGRpZmYgOiBuZXcgTWFwUmVzdWx0KHBvcyArIGRpZmYsIDAsIG51bGwpO1xuICAgIH1cbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIHRvdWNoZXMocG9zLCByZWNvdmVyKSB7XG4gICAgICAgIGxldCBkaWZmID0gMCwgaW5kZXggPSByZWNvdmVySW5kZXgocmVjb3Zlcik7XG4gICAgICAgIGxldCBvbGRJbmRleCA9IHRoaXMuaW52ZXJ0ZWQgPyAyIDogMSwgbmV3SW5kZXggPSB0aGlzLmludmVydGVkID8gMSA6IDI7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5yYW5nZXMubGVuZ3RoOyBpICs9IDMpIHtcbiAgICAgICAgICAgIGxldCBzdGFydCA9IHRoaXMucmFuZ2VzW2ldIC0gKHRoaXMuaW52ZXJ0ZWQgPyBkaWZmIDogMCk7XG4gICAgICAgICAgICBpZiAoc3RhcnQgPiBwb3MpXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBsZXQgb2xkU2l6ZSA9IHRoaXMucmFuZ2VzW2kgKyBvbGRJbmRleF0sIGVuZCA9IHN0YXJ0ICsgb2xkU2l6ZTtcbiAgICAgICAgICAgIGlmIChwb3MgPD0gZW5kICYmIGkgPT0gaW5kZXggKiAzKVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgZGlmZiArPSB0aGlzLnJhbmdlc1tpICsgbmV3SW5kZXhdIC0gb2xkU2l6ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIC8qKlxuICAgIENhbGxzIHRoZSBnaXZlbiBmdW5jdGlvbiBvbiBlYWNoIG9mIHRoZSBjaGFuZ2VkIHJhbmdlcyBpbmNsdWRlZCBpblxuICAgIHRoaXMgbWFwLlxuICAgICovXG4gICAgZm9yRWFjaChmKSB7XG4gICAgICAgIGxldCBvbGRJbmRleCA9IHRoaXMuaW52ZXJ0ZWQgPyAyIDogMSwgbmV3SW5kZXggPSB0aGlzLmludmVydGVkID8gMSA6IDI7XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBkaWZmID0gMDsgaSA8IHRoaXMucmFuZ2VzLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgICAgICAgICBsZXQgc3RhcnQgPSB0aGlzLnJhbmdlc1tpXSwgb2xkU3RhcnQgPSBzdGFydCAtICh0aGlzLmludmVydGVkID8gZGlmZiA6IDApLCBuZXdTdGFydCA9IHN0YXJ0ICsgKHRoaXMuaW52ZXJ0ZWQgPyAwIDogZGlmZik7XG4gICAgICAgICAgICBsZXQgb2xkU2l6ZSA9IHRoaXMucmFuZ2VzW2kgKyBvbGRJbmRleF0sIG5ld1NpemUgPSB0aGlzLnJhbmdlc1tpICsgbmV3SW5kZXhdO1xuICAgICAgICAgICAgZihvbGRTdGFydCwgb2xkU3RhcnQgKyBvbGRTaXplLCBuZXdTdGFydCwgbmV3U3RhcnQgKyBuZXdTaXplKTtcbiAgICAgICAgICAgIGRpZmYgKz0gbmV3U2l6ZSAtIG9sZFNpemU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgQ3JlYXRlIGFuIGludmVydGVkIHZlcnNpb24gb2YgdGhpcyBtYXAuIFRoZSByZXN1bHQgY2FuIGJlIHVzZWQgdG9cbiAgICBtYXAgcG9zaXRpb25zIGluIHRoZSBwb3N0LXN0ZXAgZG9jdW1lbnQgdG8gdGhlIHByZS1zdGVwIGRvY3VtZW50LlxuICAgICovXG4gICAgaW52ZXJ0KCkge1xuICAgICAgICByZXR1cm4gbmV3IFN0ZXBNYXAodGhpcy5yYW5nZXMsICF0aGlzLmludmVydGVkKTtcbiAgICB9XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLmludmVydGVkID8gXCItXCIgOiBcIlwiKSArIEpTT04uc3RyaW5naWZ5KHRoaXMucmFuZ2VzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgQ3JlYXRlIGEgbWFwIHRoYXQgbW92ZXMgYWxsIHBvc2l0aW9ucyBieSBvZmZzZXQgYG5gICh3aGljaCBtYXkgYmVcbiAgICBuZWdhdGl2ZSkuIFRoaXMgY2FuIGJlIHVzZWZ1bCB3aGVuIGFwcGx5aW5nIHN0ZXBzIG1lYW50IGZvciBhXG4gICAgc3ViLWRvY3VtZW50IHRvIGEgbGFyZ2VyIGRvY3VtZW50LCBvciB2aWNlLXZlcnNhLlxuICAgICovXG4gICAgc3RhdGljIG9mZnNldChuKSB7XG4gICAgICAgIHJldHVybiBuID09IDAgPyBTdGVwTWFwLmVtcHR5IDogbmV3IFN0ZXBNYXAobiA8IDAgPyBbMCwgLW4sIDBdIDogWzAsIDAsIG5dKTtcbiAgICB9XG59XG4vKipcbkEgU3RlcE1hcCB0aGF0IGNvbnRhaW5zIG5vIGNoYW5nZWQgcmFuZ2VzLlxuKi9cblN0ZXBNYXAuZW1wdHkgPSBuZXcgU3RlcE1hcChbXSk7XG4vKipcbkEgbWFwcGluZyByZXByZXNlbnRzIGEgcGlwZWxpbmUgb2YgemVybyBvciBtb3JlIFtzdGVwXG5tYXBzXShodHRwczovL3Byb3NlbWlycm9yLm5ldC9kb2NzL3JlZi8jdHJhbnNmb3JtLlN0ZXBNYXApLiBJdCBoYXMgc3BlY2lhbCBwcm92aXNpb25zIGZvciBsb3NzbGVzc2x5XG5oYW5kbGluZyBtYXBwaW5nIHBvc2l0aW9ucyB0aHJvdWdoIGEgc2VyaWVzIG9mIHN0ZXBzIGluIHdoaWNoIHNvbWVcbnN0ZXBzIGFyZSBpbnZlcnRlZCB2ZXJzaW9ucyBvZiBlYXJsaWVyIHN0ZXBzLiAoVGhpcyBjb21lcyB1cCB3aGVuXG7igJhbcmViYXNpbmddKC9kb2NzL2d1aWRlLyN0cmFuc2Zvcm0ucmViYXNpbmcp4oCZIHN0ZXBzIGZvclxuY29sbGFib3JhdGlvbiBvciBoaXN0b3J5IG1hbmFnZW1lbnQuKVxuKi9cbmNsYXNzIE1hcHBpbmcge1xuICAgIC8qKlxuICAgIENyZWF0ZSBhIG5ldyBtYXBwaW5nIHdpdGggdGhlIGdpdmVuIHBvc2l0aW9uIG1hcHMuXG4gICAgKi9cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAvKipcbiAgICBUaGUgc3RlcCBtYXBzIGluIHRoaXMgbWFwcGluZy5cbiAgICAqL1xuICAgIG1hcHMgPSBbXSwgXG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBtaXJyb3IsIFxuICAgIC8qKlxuICAgIFRoZSBzdGFydGluZyBwb3NpdGlvbiBpbiB0aGUgYG1hcHNgIGFycmF5LCB1c2VkIHdoZW4gYG1hcGAgb3JcbiAgICBgbWFwUmVzdWx0YCBpcyBjYWxsZWQuXG4gICAgKi9cbiAgICBmcm9tID0gMCwgXG4gICAgLyoqXG4gICAgVGhlIGVuZCBwb3NpdGlvbiBpbiB0aGUgYG1hcHNgIGFycmF5LlxuICAgICovXG4gICAgdG8gPSBtYXBzLmxlbmd0aCkge1xuICAgICAgICB0aGlzLm1hcHMgPSBtYXBzO1xuICAgICAgICB0aGlzLm1pcnJvciA9IG1pcnJvcjtcbiAgICAgICAgdGhpcy5mcm9tID0gZnJvbTtcbiAgICAgICAgdGhpcy50byA9IHRvO1xuICAgIH1cbiAgICAvKipcbiAgICBDcmVhdGUgYSBtYXBwaW5nIHRoYXQgbWFwcyBvbmx5IHRocm91Z2ggYSBwYXJ0IG9mIHRoaXMgb25lLlxuICAgICovXG4gICAgc2xpY2UoZnJvbSA9IDAsIHRvID0gdGhpcy5tYXBzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gbmV3IE1hcHBpbmcodGhpcy5tYXBzLCB0aGlzLm1pcnJvciwgZnJvbSwgdG8pO1xuICAgIH1cbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIGNvcHkoKSB7XG4gICAgICAgIHJldHVybiBuZXcgTWFwcGluZyh0aGlzLm1hcHMuc2xpY2UoKSwgdGhpcy5taXJyb3IgJiYgdGhpcy5taXJyb3Iuc2xpY2UoKSwgdGhpcy5mcm9tLCB0aGlzLnRvKTtcbiAgICB9XG4gICAgLyoqXG4gICAgQWRkIGEgc3RlcCBtYXAgdG8gdGhlIGVuZCBvZiB0aGlzIG1hcHBpbmcuIElmIGBtaXJyb3JzYCBpc1xuICAgIGdpdmVuLCBpdCBzaG91bGQgYmUgdGhlIGluZGV4IG9mIHRoZSBzdGVwIG1hcCB0aGF0IGlzIHRoZSBtaXJyb3JcbiAgICBpbWFnZSBvZiB0aGlzIG9uZS5cbiAgICAqL1xuICAgIGFwcGVuZE1hcChtYXAsIG1pcnJvcnMpIHtcbiAgICAgICAgdGhpcy50byA9IHRoaXMubWFwcy5wdXNoKG1hcCk7XG4gICAgICAgIGlmIChtaXJyb3JzICE9IG51bGwpXG4gICAgICAgICAgICB0aGlzLnNldE1pcnJvcih0aGlzLm1hcHMubGVuZ3RoIC0gMSwgbWlycm9ycyk7XG4gICAgfVxuICAgIC8qKlxuICAgIEFkZCBhbGwgdGhlIHN0ZXAgbWFwcyBpbiBhIGdpdmVuIG1hcHBpbmcgdG8gdGhpcyBvbmUgKHByZXNlcnZpbmdcbiAgICBtaXJyb3JpbmcgaW5mb3JtYXRpb24pLlxuICAgICovXG4gICAgYXBwZW5kTWFwcGluZyhtYXBwaW5nKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBzdGFydFNpemUgPSB0aGlzLm1hcHMubGVuZ3RoOyBpIDwgbWFwcGluZy5tYXBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgbWlyciA9IG1hcHBpbmcuZ2V0TWlycm9yKGkpO1xuICAgICAgICAgICAgdGhpcy5hcHBlbmRNYXAobWFwcGluZy5tYXBzW2ldLCBtaXJyICE9IG51bGwgJiYgbWlyciA8IGkgPyBzdGFydFNpemUgKyBtaXJyIDogdW5kZWZpbmVkKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICBGaW5kcyB0aGUgb2Zmc2V0IG9mIHRoZSBzdGVwIG1hcCB0aGF0IG1pcnJvcnMgdGhlIG1hcCBhdCB0aGVcbiAgICBnaXZlbiBvZmZzZXQsIGluIHRoaXMgbWFwcGluZyAoYXMgcGVyIHRoZSBzZWNvbmQgYXJndW1lbnQgdG9cbiAgICBgYXBwZW5kTWFwYCkuXG4gICAgKi9cbiAgICBnZXRNaXJyb3Iobikge1xuICAgICAgICBpZiAodGhpcy5taXJyb3IpXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubWlycm9yLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm1pcnJvcltpXSA9PSBuKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5taXJyb3JbaSArIChpICUgMiA/IC0xIDogMSldO1xuICAgIH1cbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIHNldE1pcnJvcihuLCBtKSB7XG4gICAgICAgIGlmICghdGhpcy5taXJyb3IpXG4gICAgICAgICAgICB0aGlzLm1pcnJvciA9IFtdO1xuICAgICAgICB0aGlzLm1pcnJvci5wdXNoKG4sIG0pO1xuICAgIH1cbiAgICAvKipcbiAgICBBcHBlbmQgdGhlIGludmVyc2Ugb2YgdGhlIGdpdmVuIG1hcHBpbmcgdG8gdGhpcyBvbmUuXG4gICAgKi9cbiAgICBhcHBlbmRNYXBwaW5nSW52ZXJ0ZWQobWFwcGluZykge1xuICAgICAgICBmb3IgKGxldCBpID0gbWFwcGluZy5tYXBzLmxlbmd0aCAtIDEsIHRvdGFsU2l6ZSA9IHRoaXMubWFwcy5sZW5ndGggKyBtYXBwaW5nLm1hcHMubGVuZ3RoOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgbGV0IG1pcnIgPSBtYXBwaW5nLmdldE1pcnJvcihpKTtcbiAgICAgICAgICAgIHRoaXMuYXBwZW5kTWFwKG1hcHBpbmcubWFwc1tpXS5pbnZlcnQoKSwgbWlyciAhPSBudWxsICYmIG1pcnIgPiBpID8gdG90YWxTaXplIC0gbWlyciAtIDEgOiB1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgIENyZWF0ZSBhbiBpbnZlcnRlZCB2ZXJzaW9uIG9mIHRoaXMgbWFwcGluZy5cbiAgICAqL1xuICAgIGludmVydCgpIHtcbiAgICAgICAgbGV0IGludmVyc2UgPSBuZXcgTWFwcGluZztcbiAgICAgICAgaW52ZXJzZS5hcHBlbmRNYXBwaW5nSW52ZXJ0ZWQodGhpcyk7XG4gICAgICAgIHJldHVybiBpbnZlcnNlO1xuICAgIH1cbiAgICAvKipcbiAgICBNYXAgYSBwb3NpdGlvbiB0aHJvdWdoIHRoaXMgbWFwcGluZy5cbiAgICAqL1xuICAgIG1hcChwb3MsIGFzc29jID0gMSkge1xuICAgICAgICBpZiAodGhpcy5taXJyb3IpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbWFwKHBvcywgYXNzb2MsIHRydWUpO1xuICAgICAgICBmb3IgKGxldCBpID0gdGhpcy5mcm9tOyBpIDwgdGhpcy50bzsgaSsrKVxuICAgICAgICAgICAgcG9zID0gdGhpcy5tYXBzW2ldLm1hcChwb3MsIGFzc29jKTtcbiAgICAgICAgcmV0dXJuIHBvcztcbiAgICB9XG4gICAgLyoqXG4gICAgTWFwIGEgcG9zaXRpb24gdGhyb3VnaCB0aGlzIG1hcHBpbmcsIHJldHVybmluZyBhIG1hcHBpbmdcbiAgICByZXN1bHQuXG4gICAgKi9cbiAgICBtYXBSZXN1bHQocG9zLCBhc3NvYyA9IDEpIHsgcmV0dXJuIHRoaXMuX21hcChwb3MsIGFzc29jLCBmYWxzZSk7IH1cbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIF9tYXAocG9zLCBhc3NvYywgc2ltcGxlKSB7XG4gICAgICAgIGxldCBkZWxJbmZvID0gMDtcbiAgICAgICAgZm9yIChsZXQgaSA9IHRoaXMuZnJvbTsgaSA8IHRoaXMudG87IGkrKykge1xuICAgICAgICAgICAgbGV0IG1hcCA9IHRoaXMubWFwc1tpXSwgcmVzdWx0ID0gbWFwLm1hcFJlc3VsdChwb3MsIGFzc29jKTtcbiAgICAgICAgICAgIGlmIChyZXN1bHQucmVjb3ZlciAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbGV0IGNvcnIgPSB0aGlzLmdldE1pcnJvcihpKTtcbiAgICAgICAgICAgICAgICBpZiAoY29yciAhPSBudWxsICYmIGNvcnIgPiBpICYmIGNvcnIgPCB0aGlzLnRvKSB7XG4gICAgICAgICAgICAgICAgICAgIGkgPSBjb3JyO1xuICAgICAgICAgICAgICAgICAgICBwb3MgPSB0aGlzLm1hcHNbY29ycl0ucmVjb3ZlcihyZXN1bHQucmVjb3Zlcik7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlbEluZm8gfD0gcmVzdWx0LmRlbEluZm87XG4gICAgICAgICAgICBwb3MgPSByZXN1bHQucG9zO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzaW1wbGUgPyBwb3MgOiBuZXcgTWFwUmVzdWx0KHBvcywgZGVsSW5mbywgbnVsbCk7XG4gICAgfVxufVxuXG5jb25zdCBzdGVwc0J5SUQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuLyoqXG5BIHN0ZXAgb2JqZWN0IHJlcHJlc2VudHMgYW4gYXRvbWljIGNoYW5nZS4gSXQgZ2VuZXJhbGx5IGFwcGxpZXNcbm9ubHkgdG8gdGhlIGRvY3VtZW50IGl0IHdhcyBjcmVhdGVkIGZvciwgc2luY2UgdGhlIHBvc2l0aW9uc1xuc3RvcmVkIGluIGl0IHdpbGwgb25seSBtYWtlIHNlbnNlIGZvciB0aGF0IGRvY3VtZW50LlxuXG5OZXcgc3RlcHMgYXJlIGRlZmluZWQgYnkgY3JlYXRpbmcgY2xhc3NlcyB0aGF0IGV4dGVuZCBgU3RlcGAsXG5vdmVycmlkaW5nIHRoZSBgYXBwbHlgLCBgaW52ZXJ0YCwgYG1hcGAsIGBnZXRNYXBgIGFuZCBgZnJvbUpTT05gXG5tZXRob2RzLCBhbmQgcmVnaXN0ZXJpbmcgeW91ciBjbGFzcyB3aXRoIGEgdW5pcXVlXG5KU09OLXNlcmlhbGl6YXRpb24gaWRlbnRpZmllciB1c2luZ1xuW2BTdGVwLmpzb25JRGBdKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyN0cmFuc2Zvcm0uU3RlcF5qc29uSUQpLlxuKi9cbmNsYXNzIFN0ZXAge1xuICAgIC8qKlxuICAgIEdldCB0aGUgc3RlcCBtYXAgdGhhdCByZXByZXNlbnRzIHRoZSBjaGFuZ2VzIG1hZGUgYnkgdGhpcyBzdGVwLFxuICAgIGFuZCB3aGljaCBjYW4gYmUgdXNlZCB0byB0cmFuc2Zvcm0gYmV0d2VlbiBwb3NpdGlvbnMgaW4gdGhlIG9sZFxuICAgIGFuZCB0aGUgbmV3IGRvY3VtZW50LlxuICAgICovXG4gICAgZ2V0TWFwKCkgeyByZXR1cm4gU3RlcE1hcC5lbXB0eTsgfVxuICAgIC8qKlxuICAgIFRyeSB0byBtZXJnZSB0aGlzIHN0ZXAgd2l0aCBhbm90aGVyIG9uZSwgdG8gYmUgYXBwbGllZCBkaXJlY3RseVxuICAgIGFmdGVyIGl0LiBSZXR1cm5zIHRoZSBtZXJnZWQgc3RlcCB3aGVuIHBvc3NpYmxlLCBudWxsIGlmIHRoZVxuICAgIHN0ZXBzIGNhbid0IGJlIG1lcmdlZC5cbiAgICAqL1xuICAgIG1lcmdlKG90aGVyKSB7IHJldHVybiBudWxsOyB9XG4gICAgLyoqXG4gICAgRGVzZXJpYWxpemUgYSBzdGVwIGZyb20gaXRzIEpTT04gcmVwcmVzZW50YXRpb24uIFdpbGwgY2FsbFxuICAgIHRocm91Z2ggdG8gdGhlIHN0ZXAgY2xhc3MnIG93biBpbXBsZW1lbnRhdGlvbiBvZiB0aGlzIG1ldGhvZC5cbiAgICAqL1xuICAgIHN0YXRpYyBmcm9tSlNPTihzY2hlbWEsIGpzb24pIHtcbiAgICAgICAgaWYgKCFqc29uIHx8ICFqc29uLnN0ZXBUeXBlKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJJbnZhbGlkIGlucHV0IGZvciBTdGVwLmZyb21KU09OXCIpO1xuICAgICAgICBsZXQgdHlwZSA9IHN0ZXBzQnlJRFtqc29uLnN0ZXBUeXBlXTtcbiAgICAgICAgaWYgKCF0eXBlKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoYE5vIHN0ZXAgdHlwZSAke2pzb24uc3RlcFR5cGV9IGRlZmluZWRgKTtcbiAgICAgICAgcmV0dXJuIHR5cGUuZnJvbUpTT04oc2NoZW1hLCBqc29uKTtcbiAgICB9XG4gICAgLyoqXG4gICAgVG8gYmUgYWJsZSB0byBzZXJpYWxpemUgc3RlcHMgdG8gSlNPTiwgZWFjaCBzdGVwIG5lZWRzIGEgc3RyaW5nXG4gICAgSUQgdG8gYXR0YWNoIHRvIGl0cyBKU09OIHJlcHJlc2VudGF0aW9uLiBVc2UgdGhpcyBtZXRob2QgdG9cbiAgICByZWdpc3RlciBhbiBJRCBmb3IgeW91ciBzdGVwIGNsYXNzZXMuIFRyeSB0byBwaWNrIHNvbWV0aGluZ1xuICAgIHRoYXQncyB1bmxpa2VseSB0byBjbGFzaCB3aXRoIHN0ZXBzIGZyb20gb3RoZXIgbW9kdWxlcy5cbiAgICAqL1xuICAgIHN0YXRpYyBqc29uSUQoaWQsIHN0ZXBDbGFzcykge1xuICAgICAgICBpZiAoaWQgaW4gc3RlcHNCeUlEKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJEdXBsaWNhdGUgdXNlIG9mIHN0ZXAgSlNPTiBJRCBcIiArIGlkKTtcbiAgICAgICAgc3RlcHNCeUlEW2lkXSA9IHN0ZXBDbGFzcztcbiAgICAgICAgc3RlcENsYXNzLnByb3RvdHlwZS5qc29uSUQgPSBpZDtcbiAgICAgICAgcmV0dXJuIHN0ZXBDbGFzcztcbiAgICB9XG59XG4vKipcblRoZSByZXN1bHQgb2YgW2FwcGx5aW5nXShodHRwczovL3Byb3NlbWlycm9yLm5ldC9kb2NzL3JlZi8jdHJhbnNmb3JtLlN0ZXAuYXBwbHkpIGEgc3RlcC4gQ29udGFpbnMgZWl0aGVyIGFcbm5ldyBkb2N1bWVudCBvciBhIGZhaWx1cmUgdmFsdWUuXG4qL1xuY2xhc3MgU3RlcFJlc3VsdCB7XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAvKipcbiAgICBUaGUgdHJhbnNmb3JtZWQgZG9jdW1lbnQsIGlmIHN1Y2Nlc3NmdWwuXG4gICAgKi9cbiAgICBkb2MsIFxuICAgIC8qKlxuICAgIFRoZSBmYWlsdXJlIG1lc3NhZ2UsIGlmIHVuc3VjY2Vzc2Z1bC5cbiAgICAqL1xuICAgIGZhaWxlZCkge1xuICAgICAgICB0aGlzLmRvYyA9IGRvYztcbiAgICAgICAgdGhpcy5mYWlsZWQgPSBmYWlsZWQ7XG4gICAgfVxuICAgIC8qKlxuICAgIENyZWF0ZSBhIHN1Y2Nlc3NmdWwgc3RlcCByZXN1bHQuXG4gICAgKi9cbiAgICBzdGF0aWMgb2soZG9jKSB7IHJldHVybiBuZXcgU3RlcFJlc3VsdChkb2MsIG51bGwpOyB9XG4gICAgLyoqXG4gICAgQ3JlYXRlIGEgZmFpbGVkIHN0ZXAgcmVzdWx0LlxuICAgICovXG4gICAgc3RhdGljIGZhaWwobWVzc2FnZSkgeyByZXR1cm4gbmV3IFN0ZXBSZXN1bHQobnVsbCwgbWVzc2FnZSk7IH1cbiAgICAvKipcbiAgICBDYWxsIFtgTm9kZS5yZXBsYWNlYF0oaHR0cHM6Ly9wcm9zZW1pcnJvci5uZXQvZG9jcy9yZWYvI21vZGVsLk5vZGUucmVwbGFjZSkgd2l0aCB0aGUgZ2l2ZW5cbiAgICBhcmd1bWVudHMuIENyZWF0ZSBhIHN1Y2Nlc3NmdWwgcmVzdWx0IGlmIGl0IHN1Y2NlZWRzLCBhbmQgYVxuICAgIGZhaWxlZCBvbmUgaWYgaXQgdGhyb3dzIGEgYFJlcGxhY2VFcnJvcmAuXG4gICAgKi9cbiAgICBzdGF0aWMgZnJvbVJlcGxhY2UoZG9jLCBmcm9tLCB0bywgc2xpY2UpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBTdGVwUmVzdWx0Lm9rKGRvYy5yZXBsYWNlKGZyb20sIHRvLCBzbGljZSkpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIFJlcGxhY2VFcnJvcilcbiAgICAgICAgICAgICAgICByZXR1cm4gU3RlcFJlc3VsdC5mYWlsKGUubWVzc2FnZSk7XG4gICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBtYXBGcmFnbWVudChmcmFnbWVudCwgZiwgcGFyZW50KSB7XG4gICAgbGV0IG1hcHBlZCA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZnJhZ21lbnQuY2hpbGRDb3VudDsgaSsrKSB7XG4gICAgICAgIGxldCBjaGlsZCA9IGZyYWdtZW50LmNoaWxkKGkpO1xuICAgICAgICBpZiAoY2hpbGQuY29udGVudC5zaXplKVxuICAgICAgICAgICAgY2hpbGQgPSBjaGlsZC5jb3B5KG1hcEZyYWdtZW50KGNoaWxkLmNvbnRlbnQsIGYsIGNoaWxkKSk7XG4gICAgICAgIGlmIChjaGlsZC5pc0lubGluZSlcbiAgICAgICAgICAgIGNoaWxkID0gZihjaGlsZCwgcGFyZW50LCBpKTtcbiAgICAgICAgbWFwcGVkLnB1c2goY2hpbGQpO1xuICAgIH1cbiAgICByZXR1cm4gRnJhZ21lbnQuZnJvbUFycmF5KG1hcHBlZCk7XG59XG4vKipcbkFkZCBhIG1hcmsgdG8gYWxsIGlubGluZSBjb250ZW50IGJldHdlZW4gdHdvIHBvc2l0aW9ucy5cbiovXG5jbGFzcyBBZGRNYXJrU3RlcCBleHRlbmRzIFN0ZXAge1xuICAgIC8qKlxuICAgIENyZWF0ZSBhIG1hcmsgc3RlcC5cbiAgICAqL1xuICAgIGNvbnN0cnVjdG9yKFxuICAgIC8qKlxuICAgIFRoZSBzdGFydCBvZiB0aGUgbWFya2VkIHJhbmdlLlxuICAgICovXG4gICAgZnJvbSwgXG4gICAgLyoqXG4gICAgVGhlIGVuZCBvZiB0aGUgbWFya2VkIHJhbmdlLlxuICAgICovXG4gICAgdG8sIFxuICAgIC8qKlxuICAgIFRoZSBtYXJrIHRvIGFkZC5cbiAgICAqL1xuICAgIG1hcmspIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5mcm9tID0gZnJvbTtcbiAgICAgICAgdGhpcy50byA9IHRvO1xuICAgICAgICB0aGlzLm1hcmsgPSBtYXJrO1xuICAgIH1cbiAgICBhcHBseShkb2MpIHtcbiAgICAgICAgbGV0IG9sZFNsaWNlID0gZG9jLnNsaWNlKHRoaXMuZnJvbSwgdGhpcy50byksICRmcm9tID0gZG9jLnJlc29sdmUodGhpcy5mcm9tKTtcbiAgICAgICAgbGV0IHBhcmVudCA9ICRmcm9tLm5vZGUoJGZyb20uc2hhcmVkRGVwdGgodGhpcy50bykpO1xuICAgICAgICBsZXQgc2xpY2UgPSBuZXcgU2xpY2UobWFwRnJhZ21lbnQob2xkU2xpY2UuY29udGVudCwgKG5vZGUsIHBhcmVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKCFub2RlLmlzQXRvbSB8fCAhcGFyZW50LnR5cGUuYWxsb3dzTWFya1R5cGUodGhpcy5tYXJrLnR5cGUpKVxuICAgICAgICAgICAgICAgIHJldHVybiBub2RlO1xuICAgICAgICAgICAgcmV0dXJuIG5vZGUubWFyayh0aGlzLm1hcmsuYWRkVG9TZXQobm9kZS5tYXJrcykpO1xuICAgICAgICB9LCBwYXJlbnQpLCBvbGRTbGljZS5vcGVuU3RhcnQsIG9sZFNsaWNlLm9wZW5FbmQpO1xuICAgICAgICByZXR1cm4gU3RlcFJlc3VsdC5mcm9tUmVwbGFjZShkb2MsIHRoaXMuZnJvbSwgdGhpcy50bywgc2xpY2UpO1xuICAgIH1cbiAgICBpbnZlcnQoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUmVtb3ZlTWFya1N0ZXAodGhpcy5mcm9tLCB0aGlzLnRvLCB0aGlzLm1hcmspO1xuICAgIH1cbiAgICBtYXAobWFwcGluZykge1xuICAgICAgICBsZXQgZnJvbSA9IG1hcHBpbmcubWFwUmVzdWx0KHRoaXMuZnJvbSwgMSksIHRvID0gbWFwcGluZy5tYXBSZXN1bHQodGhpcy50bywgLTEpO1xuICAgICAgICBpZiAoZnJvbS5kZWxldGVkICYmIHRvLmRlbGV0ZWQgfHwgZnJvbS5wb3MgPj0gdG8ucG9zKVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIHJldHVybiBuZXcgQWRkTWFya1N0ZXAoZnJvbS5wb3MsIHRvLnBvcywgdGhpcy5tYXJrKTtcbiAgICB9XG4gICAgbWVyZ2Uob3RoZXIpIHtcbiAgICAgICAgaWYgKG90aGVyIGluc3RhbmNlb2YgQWRkTWFya1N0ZXAgJiZcbiAgICAgICAgICAgIG90aGVyLm1hcmsuZXEodGhpcy5tYXJrKSAmJlxuICAgICAgICAgICAgdGhpcy5mcm9tIDw9IG90aGVyLnRvICYmIHRoaXMudG8gPj0gb3RoZXIuZnJvbSlcbiAgICAgICAgICAgIHJldHVybiBuZXcgQWRkTWFya1N0ZXAoTWF0aC5taW4odGhpcy5mcm9tLCBvdGhlci5mcm9tKSwgTWF0aC5tYXgodGhpcy50bywgb3RoZXIudG8pLCB0aGlzLm1hcmspO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdG9KU09OKCkge1xuICAgICAgICByZXR1cm4geyBzdGVwVHlwZTogXCJhZGRNYXJrXCIsIG1hcms6IHRoaXMubWFyay50b0pTT04oKSxcbiAgICAgICAgICAgIGZyb206IHRoaXMuZnJvbSwgdG86IHRoaXMudG8gfTtcbiAgICB9XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBzdGF0aWMgZnJvbUpTT04oc2NoZW1hLCBqc29uKSB7XG4gICAgICAgIGlmICh0eXBlb2YganNvbi5mcm9tICE9IFwibnVtYmVyXCIgfHwgdHlwZW9mIGpzb24udG8gIT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiSW52YWxpZCBpbnB1dCBmb3IgQWRkTWFya1N0ZXAuZnJvbUpTT05cIik7XG4gICAgICAgIHJldHVybiBuZXcgQWRkTWFya1N0ZXAoanNvbi5mcm9tLCBqc29uLnRvLCBzY2hlbWEubWFya0Zyb21KU09OKGpzb24ubWFyaykpO1xuICAgIH1cbn1cblN0ZXAuanNvbklEKFwiYWRkTWFya1wiLCBBZGRNYXJrU3RlcCk7XG4vKipcblJlbW92ZSBhIG1hcmsgZnJvbSBhbGwgaW5saW5lIGNvbnRlbnQgYmV0d2VlbiB0d28gcG9zaXRpb25zLlxuKi9cbmNsYXNzIFJlbW92ZU1hcmtTdGVwIGV4dGVuZHMgU3RlcCB7XG4gICAgLyoqXG4gICAgQ3JlYXRlIGEgbWFyay1yZW1vdmluZyBzdGVwLlxuICAgICovXG4gICAgY29uc3RydWN0b3IoXG4gICAgLyoqXG4gICAgVGhlIHN0YXJ0IG9mIHRoZSB1bm1hcmtlZCByYW5nZS5cbiAgICAqL1xuICAgIGZyb20sIFxuICAgIC8qKlxuICAgIFRoZSBlbmQgb2YgdGhlIHVubWFya2VkIHJhbmdlLlxuICAgICovXG4gICAgdG8sIFxuICAgIC8qKlxuICAgIFRoZSBtYXJrIHRvIHJlbW92ZS5cbiAgICAqL1xuICAgIG1hcmspIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5mcm9tID0gZnJvbTtcbiAgICAgICAgdGhpcy50byA9IHRvO1xuICAgICAgICB0aGlzLm1hcmsgPSBtYXJrO1xuICAgIH1cbiAgICBhcHBseShkb2MpIHtcbiAgICAgICAgbGV0IG9sZFNsaWNlID0gZG9jLnNsaWNlKHRoaXMuZnJvbSwgdGhpcy50byk7XG4gICAgICAgIGxldCBzbGljZSA9IG5ldyBTbGljZShtYXBGcmFnbWVudChvbGRTbGljZS5jb250ZW50LCBub2RlID0+IHtcbiAgICAgICAgICAgIHJldHVybiBub2RlLm1hcmsodGhpcy5tYXJrLnJlbW92ZUZyb21TZXQobm9kZS5tYXJrcykpO1xuICAgICAgICB9LCBkb2MpLCBvbGRTbGljZS5vcGVuU3RhcnQsIG9sZFNsaWNlLm9wZW5FbmQpO1xuICAgICAgICByZXR1cm4gU3RlcFJlc3VsdC5mcm9tUmVwbGFjZShkb2MsIHRoaXMuZnJvbSwgdGhpcy50bywgc2xpY2UpO1xuICAgIH1cbiAgICBpbnZlcnQoKSB7XG4gICAgICAgIHJldHVybiBuZXcgQWRkTWFya1N0ZXAodGhpcy5mcm9tLCB0aGlzLnRvLCB0aGlzLm1hcmspO1xuICAgIH1cbiAgICBtYXAobWFwcGluZykge1xuICAgICAgICBsZXQgZnJvbSA9IG1hcHBpbmcubWFwUmVzdWx0KHRoaXMuZnJvbSwgMSksIHRvID0gbWFwcGluZy5tYXBSZXN1bHQodGhpcy50bywgLTEpO1xuICAgICAgICBpZiAoZnJvbS5kZWxldGVkICYmIHRvLmRlbGV0ZWQgfHwgZnJvbS5wb3MgPj0gdG8ucG9zKVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIHJldHVybiBuZXcgUmVtb3ZlTWFya1N0ZXAoZnJvbS5wb3MsIHRvLnBvcywgdGhpcy5tYXJrKTtcbiAgICB9XG4gICAgbWVyZ2Uob3RoZXIpIHtcbiAgICAgICAgaWYgKG90aGVyIGluc3RhbmNlb2YgUmVtb3ZlTWFya1N0ZXAgJiZcbiAgICAgICAgICAgIG90aGVyLm1hcmsuZXEodGhpcy5tYXJrKSAmJlxuICAgICAgICAgICAgdGhpcy5mcm9tIDw9IG90aGVyLnRvICYmIHRoaXMudG8gPj0gb3RoZXIuZnJvbSlcbiAgICAgICAgICAgIHJldHVybiBuZXcgUmVtb3ZlTWFya1N0ZXAoTWF0aC5taW4odGhpcy5mcm9tLCBvdGhlci5mcm9tKSwgTWF0aC5tYXgodGhpcy50bywgb3RoZXIudG8pLCB0aGlzLm1hcmspO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdG9KU09OKCkge1xuICAgICAgICByZXR1cm4geyBzdGVwVHlwZTogXCJyZW1vdmVNYXJrXCIsIG1hcms6IHRoaXMubWFyay50b0pTT04oKSxcbiAgICAgICAgICAgIGZyb206IHRoaXMuZnJvbSwgdG86IHRoaXMudG8gfTtcbiAgICB9XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBzdGF0aWMgZnJvbUpTT04oc2NoZW1hLCBqc29uKSB7XG4gICAgICAgIGlmICh0eXBlb2YganNvbi5mcm9tICE9IFwibnVtYmVyXCIgfHwgdHlwZW9mIGpzb24udG8gIT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiSW52YWxpZCBpbnB1dCBmb3IgUmVtb3ZlTWFya1N0ZXAuZnJvbUpTT05cIik7XG4gICAgICAgIHJldHVybiBuZXcgUmVtb3ZlTWFya1N0ZXAoanNvbi5mcm9tLCBqc29uLnRvLCBzY2hlbWEubWFya0Zyb21KU09OKGpzb24ubWFyaykpO1xuICAgIH1cbn1cblN0ZXAuanNvbklEKFwicmVtb3ZlTWFya1wiLCBSZW1vdmVNYXJrU3RlcCk7XG5cbi8qKlxuUmVwbGFjZSBhIHBhcnQgb2YgdGhlIGRvY3VtZW50IHdpdGggYSBzbGljZSBvZiBuZXcgY29udGVudC5cbiovXG5jbGFzcyBSZXBsYWNlU3RlcCBleHRlbmRzIFN0ZXAge1xuICAgIC8qKlxuICAgIFRoZSBnaXZlbiBgc2xpY2VgIHNob3VsZCBmaXQgdGhlICdnYXAnIGJldHdlZW4gYGZyb21gIGFuZFxuICAgIGB0b2DigJR0aGUgZGVwdGhzIG11c3QgbGluZSB1cCwgYW5kIHRoZSBzdXJyb3VuZGluZyBub2RlcyBtdXN0IGJlXG4gICAgYWJsZSB0byBiZSBqb2luZWQgd2l0aCB0aGUgb3BlbiBzaWRlcyBvZiB0aGUgc2xpY2UuIFdoZW5cbiAgICBgc3RydWN0dXJlYCBpcyB0cnVlLCB0aGUgc3RlcCB3aWxsIGZhaWwgaWYgdGhlIGNvbnRlbnQgYmV0d2VlblxuICAgIGZyb20gYW5kIHRvIGlzIG5vdCBqdXN0IGEgc2VxdWVuY2Ugb2YgY2xvc2luZyBhbmQgdGhlbiBvcGVuaW5nXG4gICAgdG9rZW5zICh0aGlzIGlzIHRvIGd1YXJkIGFnYWluc3QgcmViYXNlZCByZXBsYWNlIHN0ZXBzXG4gICAgb3ZlcndyaXRpbmcgc29tZXRoaW5nIHRoZXkgd2VyZW4ndCBzdXBwb3NlZCB0bykuXG4gICAgKi9cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAvKipcbiAgICBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHJlcGxhY2VkIHJhbmdlLlxuICAgICovXG4gICAgZnJvbSwgXG4gICAgLyoqXG4gICAgVGhlIGVuZCBwb3NpdGlvbiBvZiB0aGUgcmVwbGFjZWQgcmFuZ2UuXG4gICAgKi9cbiAgICB0bywgXG4gICAgLyoqXG4gICAgVGhlIHNsaWNlIHRvIGluc2VydC5cbiAgICAqL1xuICAgIHNsaWNlLCBcbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIHN0cnVjdHVyZSA9IGZhbHNlKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuZnJvbSA9IGZyb207XG4gICAgICAgIHRoaXMudG8gPSB0bztcbiAgICAgICAgdGhpcy5zbGljZSA9IHNsaWNlO1xuICAgICAgICB0aGlzLnN0cnVjdHVyZSA9IHN0cnVjdHVyZTtcbiAgICB9XG4gICAgYXBwbHkoZG9jKSB7XG4gICAgICAgIGlmICh0aGlzLnN0cnVjdHVyZSAmJiBjb250ZW50QmV0d2Vlbihkb2MsIHRoaXMuZnJvbSwgdGhpcy50bykpXG4gICAgICAgICAgICByZXR1cm4gU3RlcFJlc3VsdC5mYWlsKFwiU3RydWN0dXJlIHJlcGxhY2Ugd291bGQgb3ZlcndyaXRlIGNvbnRlbnRcIik7XG4gICAgICAgIHJldHVybiBTdGVwUmVzdWx0LmZyb21SZXBsYWNlKGRvYywgdGhpcy5mcm9tLCB0aGlzLnRvLCB0aGlzLnNsaWNlKTtcbiAgICB9XG4gICAgZ2V0TWFwKCkge1xuICAgICAgICByZXR1cm4gbmV3IFN0ZXBNYXAoW3RoaXMuZnJvbSwgdGhpcy50byAtIHRoaXMuZnJvbSwgdGhpcy5zbGljZS5zaXplXSk7XG4gICAgfVxuICAgIGludmVydChkb2MpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSZXBsYWNlU3RlcCh0aGlzLmZyb20sIHRoaXMuZnJvbSArIHRoaXMuc2xpY2Uuc2l6ZSwgZG9jLnNsaWNlKHRoaXMuZnJvbSwgdGhpcy50bykpO1xuICAgIH1cbiAgICBtYXAobWFwcGluZykge1xuICAgICAgICBsZXQgZnJvbSA9IG1hcHBpbmcubWFwUmVzdWx0KHRoaXMuZnJvbSwgMSksIHRvID0gbWFwcGluZy5tYXBSZXN1bHQodGhpcy50bywgLTEpO1xuICAgICAgICBpZiAoZnJvbS5kZWxldGVkQWNyb3NzICYmIHRvLmRlbGV0ZWRBY3Jvc3MpXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgcmV0dXJuIG5ldyBSZXBsYWNlU3RlcChmcm9tLnBvcywgTWF0aC5tYXgoZnJvbS5wb3MsIHRvLnBvcyksIHRoaXMuc2xpY2UpO1xuICAgIH1cbiAgICBtZXJnZShvdGhlcikge1xuICAgICAgICBpZiAoIShvdGhlciBpbnN0YW5jZW9mIFJlcGxhY2VTdGVwKSB8fCBvdGhlci5zdHJ1Y3R1cmUgfHwgdGhpcy5zdHJ1Y3R1cmUpXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgaWYgKHRoaXMuZnJvbSArIHRoaXMuc2xpY2Uuc2l6ZSA9PSBvdGhlci5mcm9tICYmICF0aGlzLnNsaWNlLm9wZW5FbmQgJiYgIW90aGVyLnNsaWNlLm9wZW5TdGFydCkge1xuICAgICAgICAgICAgbGV0IHNsaWNlID0gdGhpcy5zbGljZS5zaXplICsgb3RoZXIuc2xpY2Uuc2l6ZSA9PSAwID8gU2xpY2UuZW1wdHlcbiAgICAgICAgICAgICAgICA6IG5ldyBTbGljZSh0aGlzLnNsaWNlLmNvbnRlbnQuYXBwZW5kKG90aGVyLnNsaWNlLmNvbnRlbnQpLCB0aGlzLnNsaWNlLm9wZW5TdGFydCwgb3RoZXIuc2xpY2Uub3BlbkVuZCk7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFJlcGxhY2VTdGVwKHRoaXMuZnJvbSwgdGhpcy50byArIChvdGhlci50byAtIG90aGVyLmZyb20pLCBzbGljZSwgdGhpcy5zdHJ1Y3R1cmUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG90aGVyLnRvID09IHRoaXMuZnJvbSAmJiAhdGhpcy5zbGljZS5vcGVuU3RhcnQgJiYgIW90aGVyLnNsaWNlLm9wZW5FbmQpIHtcbiAgICAgICAgICAgIGxldCBzbGljZSA9IHRoaXMuc2xpY2Uuc2l6ZSArIG90aGVyLnNsaWNlLnNpemUgPT0gMCA/IFNsaWNlLmVtcHR5XG4gICAgICAgICAgICAgICAgOiBuZXcgU2xpY2Uob3RoZXIuc2xpY2UuY29udGVudC5hcHBlbmQodGhpcy5zbGljZS5jb250ZW50KSwgb3RoZXIuc2xpY2Uub3BlblN0YXJ0LCB0aGlzLnNsaWNlLm9wZW5FbmQpO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBSZXBsYWNlU3RlcChvdGhlci5mcm9tLCB0aGlzLnRvLCBzbGljZSwgdGhpcy5zdHJ1Y3R1cmUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdG9KU09OKCkge1xuICAgICAgICBsZXQganNvbiA9IHsgc3RlcFR5cGU6IFwicmVwbGFjZVwiLCBmcm9tOiB0aGlzLmZyb20sIHRvOiB0aGlzLnRvIH07XG4gICAgICAgIGlmICh0aGlzLnNsaWNlLnNpemUpXG4gICAgICAgICAgICBqc29uLnNsaWNlID0gdGhpcy5zbGljZS50b0pTT04oKTtcbiAgICAgICAgaWYgKHRoaXMuc3RydWN0dXJlKVxuICAgICAgICAgICAganNvbi5zdHJ1Y3R1cmUgPSB0cnVlO1xuICAgICAgICByZXR1cm4ganNvbjtcbiAgICB9XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBzdGF0aWMgZnJvbUpTT04oc2NoZW1hLCBqc29uKSB7XG4gICAgICAgIGlmICh0eXBlb2YganNvbi5mcm9tICE9IFwibnVtYmVyXCIgfHwgdHlwZW9mIGpzb24udG8gIT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiSW52YWxpZCBpbnB1dCBmb3IgUmVwbGFjZVN0ZXAuZnJvbUpTT05cIik7XG4gICAgICAgIHJldHVybiBuZXcgUmVwbGFjZVN0ZXAoanNvbi5mcm9tLCBqc29uLnRvLCBTbGljZS5mcm9tSlNPTihzY2hlbWEsIGpzb24uc2xpY2UpLCAhIWpzb24uc3RydWN0dXJlKTtcbiAgICB9XG59XG5TdGVwLmpzb25JRChcInJlcGxhY2VcIiwgUmVwbGFjZVN0ZXApO1xuLyoqXG5SZXBsYWNlIGEgcGFydCBvZiB0aGUgZG9jdW1lbnQgd2l0aCBhIHNsaWNlIG9mIGNvbnRlbnQsIGJ1dFxucHJlc2VydmUgYSByYW5nZSBvZiB0aGUgcmVwbGFjZWQgY29udGVudCBieSBtb3ZpbmcgaXQgaW50byB0aGVcbnNsaWNlLlxuKi9cbmNsYXNzIFJlcGxhY2VBcm91bmRTdGVwIGV4dGVuZHMgU3RlcCB7XG4gICAgLyoqXG4gICAgQ3JlYXRlIGEgcmVwbGFjZS1hcm91bmQgc3RlcCB3aXRoIHRoZSBnaXZlbiByYW5nZSBhbmQgZ2FwLlxuICAgIGBpbnNlcnRgIHNob3VsZCBiZSB0aGUgcG9pbnQgaW4gdGhlIHNsaWNlIGludG8gd2hpY2ggdGhlIGNvbnRlbnRcbiAgICBvZiB0aGUgZ2FwIHNob3VsZCBiZSBtb3ZlZC4gYHN0cnVjdHVyZWAgaGFzIHRoZSBzYW1lIG1lYW5pbmcgYXNcbiAgICBpdCBoYXMgaW4gdGhlIFtgUmVwbGFjZVN0ZXBgXShodHRwczovL3Byb3NlbWlycm9yLm5ldC9kb2NzL3JlZi8jdHJhbnNmb3JtLlJlcGxhY2VTdGVwKSBjbGFzcy5cbiAgICAqL1xuICAgIGNvbnN0cnVjdG9yKFxuICAgIC8qKlxuICAgIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgcmVwbGFjZWQgcmFuZ2UuXG4gICAgKi9cbiAgICBmcm9tLCBcbiAgICAvKipcbiAgICBUaGUgZW5kIHBvc2l0aW9uIG9mIHRoZSByZXBsYWNlZCByYW5nZS5cbiAgICAqL1xuICAgIHRvLCBcbiAgICAvKipcbiAgICBUaGUgc3RhcnQgb2YgcHJlc2VydmVkIHJhbmdlLlxuICAgICovXG4gICAgZ2FwRnJvbSwgXG4gICAgLyoqXG4gICAgVGhlIGVuZCBvZiBwcmVzZXJ2ZWQgcmFuZ2UuXG4gICAgKi9cbiAgICBnYXBUbywgXG4gICAgLyoqXG4gICAgVGhlIHNsaWNlIHRvIGluc2VydC5cbiAgICAqL1xuICAgIHNsaWNlLCBcbiAgICAvKipcbiAgICBUaGUgcG9zaXRpb24gaW4gdGhlIHNsaWNlIHdoZXJlIHRoZSBwcmVzZXJ2ZWQgcmFuZ2Ugc2hvdWxkIGJlXG4gICAgaW5zZXJ0ZWQuXG4gICAgKi9cbiAgICBpbnNlcnQsIFxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgc3RydWN0dXJlID0gZmFsc2UpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5mcm9tID0gZnJvbTtcbiAgICAgICAgdGhpcy50byA9IHRvO1xuICAgICAgICB0aGlzLmdhcEZyb20gPSBnYXBGcm9tO1xuICAgICAgICB0aGlzLmdhcFRvID0gZ2FwVG87XG4gICAgICAgIHRoaXMuc2xpY2UgPSBzbGljZTtcbiAgICAgICAgdGhpcy5pbnNlcnQgPSBpbnNlcnQ7XG4gICAgICAgIHRoaXMuc3RydWN0dXJlID0gc3RydWN0dXJlO1xuICAgIH1cbiAgICBhcHBseShkb2MpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RydWN0dXJlICYmIChjb250ZW50QmV0d2Vlbihkb2MsIHRoaXMuZnJvbSwgdGhpcy5nYXBGcm9tKSB8fFxuICAgICAgICAgICAgY29udGVudEJldHdlZW4oZG9jLCB0aGlzLmdhcFRvLCB0aGlzLnRvKSkpXG4gICAgICAgICAgICByZXR1cm4gU3RlcFJlc3VsdC5mYWlsKFwiU3RydWN0dXJlIGdhcC1yZXBsYWNlIHdvdWxkIG92ZXJ3cml0ZSBjb250ZW50XCIpO1xuICAgICAgICBsZXQgZ2FwID0gZG9jLnNsaWNlKHRoaXMuZ2FwRnJvbSwgdGhpcy5nYXBUbyk7XG4gICAgICAgIGlmIChnYXAub3BlblN0YXJ0IHx8IGdhcC5vcGVuRW5kKVxuICAgICAgICAgICAgcmV0dXJuIFN0ZXBSZXN1bHQuZmFpbChcIkdhcCBpcyBub3QgYSBmbGF0IHJhbmdlXCIpO1xuICAgICAgICBsZXQgaW5zZXJ0ZWQgPSB0aGlzLnNsaWNlLmluc2VydEF0KHRoaXMuaW5zZXJ0LCBnYXAuY29udGVudCk7XG4gICAgICAgIGlmICghaW5zZXJ0ZWQpXG4gICAgICAgICAgICByZXR1cm4gU3RlcFJlc3VsdC5mYWlsKFwiQ29udGVudCBkb2VzIG5vdCBmaXQgaW4gZ2FwXCIpO1xuICAgICAgICByZXR1cm4gU3RlcFJlc3VsdC5mcm9tUmVwbGFjZShkb2MsIHRoaXMuZnJvbSwgdGhpcy50bywgaW5zZXJ0ZWQpO1xuICAgIH1cbiAgICBnZXRNYXAoKSB7XG4gICAgICAgIHJldHVybiBuZXcgU3RlcE1hcChbdGhpcy5mcm9tLCB0aGlzLmdhcEZyb20gLSB0aGlzLmZyb20sIHRoaXMuaW5zZXJ0LFxuICAgICAgICAgICAgdGhpcy5nYXBUbywgdGhpcy50byAtIHRoaXMuZ2FwVG8sIHRoaXMuc2xpY2Uuc2l6ZSAtIHRoaXMuaW5zZXJ0XSk7XG4gICAgfVxuICAgIGludmVydChkb2MpIHtcbiAgICAgICAgbGV0IGdhcCA9IHRoaXMuZ2FwVG8gLSB0aGlzLmdhcEZyb207XG4gICAgICAgIHJldHVybiBuZXcgUmVwbGFjZUFyb3VuZFN0ZXAodGhpcy5mcm9tLCB0aGlzLmZyb20gKyB0aGlzLnNsaWNlLnNpemUgKyBnYXAsIHRoaXMuZnJvbSArIHRoaXMuaW5zZXJ0LCB0aGlzLmZyb20gKyB0aGlzLmluc2VydCArIGdhcCwgZG9jLnNsaWNlKHRoaXMuZnJvbSwgdGhpcy50bykucmVtb3ZlQmV0d2Vlbih0aGlzLmdhcEZyb20gLSB0aGlzLmZyb20sIHRoaXMuZ2FwVG8gLSB0aGlzLmZyb20pLCB0aGlzLmdhcEZyb20gLSB0aGlzLmZyb20sIHRoaXMuc3RydWN0dXJlKTtcbiAgICB9XG4gICAgbWFwKG1hcHBpbmcpIHtcbiAgICAgICAgbGV0IGZyb20gPSBtYXBwaW5nLm1hcFJlc3VsdCh0aGlzLmZyb20sIDEpLCB0byA9IG1hcHBpbmcubWFwUmVzdWx0KHRoaXMudG8sIC0xKTtcbiAgICAgICAgbGV0IGdhcEZyb20gPSBtYXBwaW5nLm1hcCh0aGlzLmdhcEZyb20sIC0xKSwgZ2FwVG8gPSBtYXBwaW5nLm1hcCh0aGlzLmdhcFRvLCAxKTtcbiAgICAgICAgaWYgKChmcm9tLmRlbGV0ZWRBY3Jvc3MgJiYgdG8uZGVsZXRlZEFjcm9zcykgfHwgZ2FwRnJvbSA8IGZyb20ucG9zIHx8IGdhcFRvID4gdG8ucG9zKVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIHJldHVybiBuZXcgUmVwbGFjZUFyb3VuZFN0ZXAoZnJvbS5wb3MsIHRvLnBvcywgZ2FwRnJvbSwgZ2FwVG8sIHRoaXMuc2xpY2UsIHRoaXMuaW5zZXJ0LCB0aGlzLnN0cnVjdHVyZSk7XG4gICAgfVxuICAgIHRvSlNPTigpIHtcbiAgICAgICAgbGV0IGpzb24gPSB7IHN0ZXBUeXBlOiBcInJlcGxhY2VBcm91bmRcIiwgZnJvbTogdGhpcy5mcm9tLCB0bzogdGhpcy50byxcbiAgICAgICAgICAgIGdhcEZyb206IHRoaXMuZ2FwRnJvbSwgZ2FwVG86IHRoaXMuZ2FwVG8sIGluc2VydDogdGhpcy5pbnNlcnQgfTtcbiAgICAgICAgaWYgKHRoaXMuc2xpY2Uuc2l6ZSlcbiAgICAgICAgICAgIGpzb24uc2xpY2UgPSB0aGlzLnNsaWNlLnRvSlNPTigpO1xuICAgICAgICBpZiAodGhpcy5zdHJ1Y3R1cmUpXG4gICAgICAgICAgICBqc29uLnN0cnVjdHVyZSA9IHRydWU7XG4gICAgICAgIHJldHVybiBqc29uO1xuICAgIH1cbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIHN0YXRpYyBmcm9tSlNPTihzY2hlbWEsIGpzb24pIHtcbiAgICAgICAgaWYgKHR5cGVvZiBqc29uLmZyb20gIT0gXCJudW1iZXJcIiB8fCB0eXBlb2YganNvbi50byAhPSBcIm51bWJlclwiIHx8XG4gICAgICAgICAgICB0eXBlb2YganNvbi5nYXBGcm9tICE9IFwibnVtYmVyXCIgfHwgdHlwZW9mIGpzb24uZ2FwVG8gIT0gXCJudW1iZXJcIiB8fCB0eXBlb2YganNvbi5pbnNlcnQgIT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiSW52YWxpZCBpbnB1dCBmb3IgUmVwbGFjZUFyb3VuZFN0ZXAuZnJvbUpTT05cIik7XG4gICAgICAgIHJldHVybiBuZXcgUmVwbGFjZUFyb3VuZFN0ZXAoanNvbi5mcm9tLCBqc29uLnRvLCBqc29uLmdhcEZyb20sIGpzb24uZ2FwVG8sIFNsaWNlLmZyb21KU09OKHNjaGVtYSwganNvbi5zbGljZSksIGpzb24uaW5zZXJ0LCAhIWpzb24uc3RydWN0dXJlKTtcbiAgICB9XG59XG5TdGVwLmpzb25JRChcInJlcGxhY2VBcm91bmRcIiwgUmVwbGFjZUFyb3VuZFN0ZXApO1xuZnVuY3Rpb24gY29udGVudEJldHdlZW4oZG9jLCBmcm9tLCB0bykge1xuICAgIGxldCAkZnJvbSA9IGRvYy5yZXNvbHZlKGZyb20pLCBkaXN0ID0gdG8gLSBmcm9tLCBkZXB0aCA9ICRmcm9tLmRlcHRoO1xuICAgIHdoaWxlIChkaXN0ID4gMCAmJiBkZXB0aCA+IDAgJiYgJGZyb20uaW5kZXhBZnRlcihkZXB0aCkgPT0gJGZyb20ubm9kZShkZXB0aCkuY2hpbGRDb3VudCkge1xuICAgICAgICBkZXB0aC0tO1xuICAgICAgICBkaXN0LS07XG4gICAgfVxuICAgIGlmIChkaXN0ID4gMCkge1xuICAgICAgICBsZXQgbmV4dCA9ICRmcm9tLm5vZGUoZGVwdGgpLm1heWJlQ2hpbGQoJGZyb20uaW5kZXhBZnRlcihkZXB0aCkpO1xuICAgICAgICB3aGlsZSAoZGlzdCA+IDApIHtcbiAgICAgICAgICAgIGlmICghbmV4dCB8fCBuZXh0LmlzTGVhZilcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIG5leHQgPSBuZXh0LmZpcnN0Q2hpbGQ7XG4gICAgICAgICAgICBkaXN0LS07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBhZGRNYXJrKHRyLCBmcm9tLCB0bywgbWFyaykge1xuICAgIGxldCByZW1vdmVkID0gW10sIGFkZGVkID0gW107XG4gICAgbGV0IHJlbW92aW5nLCBhZGRpbmc7XG4gICAgdHIuZG9jLm5vZGVzQmV0d2Vlbihmcm9tLCB0bywgKG5vZGUsIHBvcywgcGFyZW50KSA9PiB7XG4gICAgICAgIGlmICghbm9kZS5pc0lubGluZSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgbGV0IG1hcmtzID0gbm9kZS5tYXJrcztcbiAgICAgICAgaWYgKCFtYXJrLmlzSW5TZXQobWFya3MpICYmIHBhcmVudC50eXBlLmFsbG93c01hcmtUeXBlKG1hcmsudHlwZSkpIHtcbiAgICAgICAgICAgIGxldCBzdGFydCA9IE1hdGgubWF4KHBvcywgZnJvbSksIGVuZCA9IE1hdGgubWluKHBvcyArIG5vZGUubm9kZVNpemUsIHRvKTtcbiAgICAgICAgICAgIGxldCBuZXdTZXQgPSBtYXJrLmFkZFRvU2V0KG1hcmtzKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWFya3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoIW1hcmtzW2ldLmlzSW5TZXQobmV3U2V0KSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVtb3ZpbmcgJiYgcmVtb3ZpbmcudG8gPT0gc3RhcnQgJiYgcmVtb3ZpbmcubWFyay5lcShtYXJrc1tpXSkpXG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmluZy50byA9IGVuZDtcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlZC5wdXNoKHJlbW92aW5nID0gbmV3IFJlbW92ZU1hcmtTdGVwKHN0YXJ0LCBlbmQsIG1hcmtzW2ldKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGFkZGluZyAmJiBhZGRpbmcudG8gPT0gc3RhcnQpXG4gICAgICAgICAgICAgICAgYWRkaW5nLnRvID0gZW5kO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIGFkZGVkLnB1c2goYWRkaW5nID0gbmV3IEFkZE1hcmtTdGVwKHN0YXJ0LCBlbmQsIG1hcmspKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJlbW92ZWQuZm9yRWFjaChzID0+IHRyLnN0ZXAocykpO1xuICAgIGFkZGVkLmZvckVhY2gocyA9PiB0ci5zdGVwKHMpKTtcbn1cbmZ1bmN0aW9uIHJlbW92ZU1hcmsodHIsIGZyb20sIHRvLCBtYXJrKSB7XG4gICAgbGV0IG1hdGNoZWQgPSBbXSwgc3RlcCA9IDA7XG4gICAgdHIuZG9jLm5vZGVzQmV0d2Vlbihmcm9tLCB0bywgKG5vZGUsIHBvcykgPT4ge1xuICAgICAgICBpZiAoIW5vZGUuaXNJbmxpbmUpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHN0ZXArKztcbiAgICAgICAgbGV0IHRvUmVtb3ZlID0gbnVsbDtcbiAgICAgICAgaWYgKG1hcmsgaW5zdGFuY2VvZiBNYXJrVHlwZSkge1xuICAgICAgICAgICAgbGV0IHNldCA9IG5vZGUubWFya3MsIGZvdW5kO1xuICAgICAgICAgICAgd2hpbGUgKGZvdW5kID0gbWFyay5pc0luU2V0KHNldCkpIHtcbiAgICAgICAgICAgICAgICAodG9SZW1vdmUgfHwgKHRvUmVtb3ZlID0gW10pKS5wdXNoKGZvdW5kKTtcbiAgICAgICAgICAgICAgICBzZXQgPSBmb3VuZC5yZW1vdmVGcm9tU2V0KHNldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobWFyaykge1xuICAgICAgICAgICAgaWYgKG1hcmsuaXNJblNldChub2RlLm1hcmtzKSlcbiAgICAgICAgICAgICAgICB0b1JlbW92ZSA9IFttYXJrXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRvUmVtb3ZlID0gbm9kZS5tYXJrcztcbiAgICAgICAgfVxuICAgICAgICBpZiAodG9SZW1vdmUgJiYgdG9SZW1vdmUubGVuZ3RoKSB7XG4gICAgICAgICAgICBsZXQgZW5kID0gTWF0aC5taW4ocG9zICsgbm9kZS5ub2RlU2l6ZSwgdG8pO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0b1JlbW92ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGxldCBzdHlsZSA9IHRvUmVtb3ZlW2ldLCBmb3VuZDtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IG1hdGNoZWQubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG0gPSBtYXRjaGVkW2pdO1xuICAgICAgICAgICAgICAgICAgICBpZiAobS5zdGVwID09IHN0ZXAgLSAxICYmIHN0eWxlLmVxKG1hdGNoZWRbal0uc3R5bGUpKVxuICAgICAgICAgICAgICAgICAgICAgICAgZm91bmQgPSBtO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZm91bmQpIHtcbiAgICAgICAgICAgICAgICAgICAgZm91bmQudG8gPSBlbmQ7XG4gICAgICAgICAgICAgICAgICAgIGZvdW5kLnN0ZXAgPSBzdGVwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2hlZC5wdXNoKHsgc3R5bGUsIGZyb206IE1hdGgubWF4KHBvcywgZnJvbSksIHRvOiBlbmQsIHN0ZXAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG4gICAgbWF0Y2hlZC5mb3JFYWNoKG0gPT4gdHIuc3RlcChuZXcgUmVtb3ZlTWFya1N0ZXAobS5mcm9tLCBtLnRvLCBtLnN0eWxlKSkpO1xufVxuZnVuY3Rpb24gY2xlYXJJbmNvbXBhdGlibGUodHIsIHBvcywgcGFyZW50VHlwZSwgbWF0Y2ggPSBwYXJlbnRUeXBlLmNvbnRlbnRNYXRjaCkge1xuICAgIGxldCBub2RlID0gdHIuZG9jLm5vZGVBdChwb3MpO1xuICAgIGxldCBkZWxTdGVwcyA9IFtdLCBjdXIgPSBwb3MgKyAxO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZS5jaGlsZENvdW50OyBpKyspIHtcbiAgICAgICAgbGV0IGNoaWxkID0gbm9kZS5jaGlsZChpKSwgZW5kID0gY3VyICsgY2hpbGQubm9kZVNpemU7XG4gICAgICAgIGxldCBhbGxvd2VkID0gbWF0Y2gubWF0Y2hUeXBlKGNoaWxkLnR5cGUpO1xuICAgICAgICBpZiAoIWFsbG93ZWQpIHtcbiAgICAgICAgICAgIGRlbFN0ZXBzLnB1c2gobmV3IFJlcGxhY2VTdGVwKGN1ciwgZW5kLCBTbGljZS5lbXB0eSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbWF0Y2ggPSBhbGxvd2VkO1xuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBjaGlsZC5tYXJrcy5sZW5ndGg7IGorKylcbiAgICAgICAgICAgICAgICBpZiAoIXBhcmVudFR5cGUuYWxsb3dzTWFya1R5cGUoY2hpbGQubWFya3Nbal0udHlwZSkpXG4gICAgICAgICAgICAgICAgICAgIHRyLnN0ZXAobmV3IFJlbW92ZU1hcmtTdGVwKGN1ciwgZW5kLCBjaGlsZC5tYXJrc1tqXSkpO1xuICAgICAgICB9XG4gICAgICAgIGN1ciA9IGVuZDtcbiAgICB9XG4gICAgaWYgKCFtYXRjaC52YWxpZEVuZCkge1xuICAgICAgICBsZXQgZmlsbCA9IG1hdGNoLmZpbGxCZWZvcmUoRnJhZ21lbnQuZW1wdHksIHRydWUpO1xuICAgICAgICB0ci5yZXBsYWNlKGN1ciwgY3VyLCBuZXcgU2xpY2UoZmlsbCwgMCwgMCkpO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gZGVsU3RlcHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pXG4gICAgICAgIHRyLnN0ZXAoZGVsU3RlcHNbaV0pO1xufVxuXG5mdW5jdGlvbiBjYW5DdXQobm9kZSwgc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiAoc3RhcnQgPT0gMCB8fCBub2RlLmNhblJlcGxhY2Uoc3RhcnQsIG5vZGUuY2hpbGRDb3VudCkpICYmXG4gICAgICAgIChlbmQgPT0gbm9kZS5jaGlsZENvdW50IHx8IG5vZGUuY2FuUmVwbGFjZSgwLCBlbmQpKTtcbn1cbi8qKlxuVHJ5IHRvIGZpbmQgYSB0YXJnZXQgZGVwdGggdG8gd2hpY2ggdGhlIGNvbnRlbnQgaW4gdGhlIGdpdmVuIHJhbmdlXG5jYW4gYmUgbGlmdGVkLiBXaWxsIG5vdCBnbyBhY3Jvc3Ncbltpc29sYXRpbmddKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyNtb2RlbC5Ob2RlU3BlYy5pc29sYXRpbmcpIHBhcmVudCBub2Rlcy5cbiovXG5mdW5jdGlvbiBsaWZ0VGFyZ2V0KHJhbmdlKSB7XG4gICAgbGV0IHBhcmVudCA9IHJhbmdlLnBhcmVudDtcbiAgICBsZXQgY29udGVudCA9IHBhcmVudC5jb250ZW50LmN1dEJ5SW5kZXgocmFuZ2Uuc3RhcnRJbmRleCwgcmFuZ2UuZW5kSW5kZXgpO1xuICAgIGZvciAobGV0IGRlcHRoID0gcmFuZ2UuZGVwdGg7OyAtLWRlcHRoKSB7XG4gICAgICAgIGxldCBub2RlID0gcmFuZ2UuJGZyb20ubm9kZShkZXB0aCk7XG4gICAgICAgIGxldCBpbmRleCA9IHJhbmdlLiRmcm9tLmluZGV4KGRlcHRoKSwgZW5kSW5kZXggPSByYW5nZS4kdG8uaW5kZXhBZnRlcihkZXB0aCk7XG4gICAgICAgIGlmIChkZXB0aCA8IHJhbmdlLmRlcHRoICYmIG5vZGUuY2FuUmVwbGFjZShpbmRleCwgZW5kSW5kZXgsIGNvbnRlbnQpKVxuICAgICAgICAgICAgcmV0dXJuIGRlcHRoO1xuICAgICAgICBpZiAoZGVwdGggPT0gMCB8fCBub2RlLnR5cGUuc3BlYy5pc29sYXRpbmcgfHwgIWNhbkN1dChub2RlLCBpbmRleCwgZW5kSW5kZXgpKVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gbGlmdCh0ciwgcmFuZ2UsIHRhcmdldCkge1xuICAgIGxldCB7ICRmcm9tLCAkdG8sIGRlcHRoIH0gPSByYW5nZTtcbiAgICBsZXQgZ2FwU3RhcnQgPSAkZnJvbS5iZWZvcmUoZGVwdGggKyAxKSwgZ2FwRW5kID0gJHRvLmFmdGVyKGRlcHRoICsgMSk7XG4gICAgbGV0IHN0YXJ0ID0gZ2FwU3RhcnQsIGVuZCA9IGdhcEVuZDtcbiAgICBsZXQgYmVmb3JlID0gRnJhZ21lbnQuZW1wdHksIG9wZW5TdGFydCA9IDA7XG4gICAgZm9yIChsZXQgZCA9IGRlcHRoLCBzcGxpdHRpbmcgPSBmYWxzZTsgZCA+IHRhcmdldDsgZC0tKVxuICAgICAgICBpZiAoc3BsaXR0aW5nIHx8ICRmcm9tLmluZGV4KGQpID4gMCkge1xuICAgICAgICAgICAgc3BsaXR0aW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIGJlZm9yZSA9IEZyYWdtZW50LmZyb20oJGZyb20ubm9kZShkKS5jb3B5KGJlZm9yZSkpO1xuICAgICAgICAgICAgb3BlblN0YXJ0Kys7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzdGFydC0tO1xuICAgICAgICB9XG4gICAgbGV0IGFmdGVyID0gRnJhZ21lbnQuZW1wdHksIG9wZW5FbmQgPSAwO1xuICAgIGZvciAobGV0IGQgPSBkZXB0aCwgc3BsaXR0aW5nID0gZmFsc2U7IGQgPiB0YXJnZXQ7IGQtLSlcbiAgICAgICAgaWYgKHNwbGl0dGluZyB8fCAkdG8uYWZ0ZXIoZCArIDEpIDwgJHRvLmVuZChkKSkge1xuICAgICAgICAgICAgc3BsaXR0aW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIGFmdGVyID0gRnJhZ21lbnQuZnJvbSgkdG8ubm9kZShkKS5jb3B5KGFmdGVyKSk7XG4gICAgICAgICAgICBvcGVuRW5kKys7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBlbmQrKztcbiAgICAgICAgfVxuICAgIHRyLnN0ZXAobmV3IFJlcGxhY2VBcm91bmRTdGVwKHN0YXJ0LCBlbmQsIGdhcFN0YXJ0LCBnYXBFbmQsIG5ldyBTbGljZShiZWZvcmUuYXBwZW5kKGFmdGVyKSwgb3BlblN0YXJ0LCBvcGVuRW5kKSwgYmVmb3JlLnNpemUgLSBvcGVuU3RhcnQsIHRydWUpKTtcbn1cbi8qKlxuVHJ5IHRvIGZpbmQgYSB2YWxpZCB3YXkgdG8gd3JhcCB0aGUgY29udGVudCBpbiB0aGUgZ2l2ZW4gcmFuZ2UgaW4gYVxubm9kZSBvZiB0aGUgZ2l2ZW4gdHlwZS4gTWF5IGludHJvZHVjZSBleHRyYSBub2RlcyBhcm91bmQgYW5kIGluc2lkZVxudGhlIHdyYXBwZXIgbm9kZSwgaWYgbmVjZXNzYXJ5LiBSZXR1cm5zIG51bGwgaWYgbm8gdmFsaWQgd3JhcHBpbmdcbmNvdWxkIGJlIGZvdW5kLiBXaGVuIGBpbm5lclJhbmdlYCBpcyBnaXZlbiwgdGhhdCByYW5nZSdzIGNvbnRlbnQgaXNcbnVzZWQgYXMgdGhlIGNvbnRlbnQgdG8gZml0IGludG8gdGhlIHdyYXBwaW5nLCBpbnN0ZWFkIG9mIHRoZVxuY29udGVudCBvZiBgcmFuZ2VgLlxuKi9cbmZ1bmN0aW9uIGZpbmRXcmFwcGluZyhyYW5nZSwgbm9kZVR5cGUsIGF0dHJzID0gbnVsbCwgaW5uZXJSYW5nZSA9IHJhbmdlKSB7XG4gICAgbGV0IGFyb3VuZCA9IGZpbmRXcmFwcGluZ091dHNpZGUocmFuZ2UsIG5vZGVUeXBlKTtcbiAgICBsZXQgaW5uZXIgPSBhcm91bmQgJiYgZmluZFdyYXBwaW5nSW5zaWRlKGlubmVyUmFuZ2UsIG5vZGVUeXBlKTtcbiAgICBpZiAoIWlubmVyKVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICByZXR1cm4gYXJvdW5kLm1hcCh3aXRoQXR0cnMpXG4gICAgICAgIC5jb25jYXQoeyB0eXBlOiBub2RlVHlwZSwgYXR0cnMgfSkuY29uY2F0KGlubmVyLm1hcCh3aXRoQXR0cnMpKTtcbn1cbmZ1bmN0aW9uIHdpdGhBdHRycyh0eXBlKSB7IHJldHVybiB7IHR5cGUsIGF0dHJzOiBudWxsIH07IH1cbmZ1bmN0aW9uIGZpbmRXcmFwcGluZ091dHNpZGUocmFuZ2UsIHR5cGUpIHtcbiAgICBsZXQgeyBwYXJlbnQsIHN0YXJ0SW5kZXgsIGVuZEluZGV4IH0gPSByYW5nZTtcbiAgICBsZXQgYXJvdW5kID0gcGFyZW50LmNvbnRlbnRNYXRjaEF0KHN0YXJ0SW5kZXgpLmZpbmRXcmFwcGluZyh0eXBlKTtcbiAgICBpZiAoIWFyb3VuZClcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgbGV0IG91dGVyID0gYXJvdW5kLmxlbmd0aCA/IGFyb3VuZFswXSA6IHR5cGU7XG4gICAgcmV0dXJuIHBhcmVudC5jYW5SZXBsYWNlV2l0aChzdGFydEluZGV4LCBlbmRJbmRleCwgb3V0ZXIpID8gYXJvdW5kIDogbnVsbDtcbn1cbmZ1bmN0aW9uIGZpbmRXcmFwcGluZ0luc2lkZShyYW5nZSwgdHlwZSkge1xuICAgIGxldCB7IHBhcmVudCwgc3RhcnRJbmRleCwgZW5kSW5kZXggfSA9IHJhbmdlO1xuICAgIGxldCBpbm5lciA9IHBhcmVudC5jaGlsZChzdGFydEluZGV4KTtcbiAgICBsZXQgaW5zaWRlID0gdHlwZS5jb250ZW50TWF0Y2guZmluZFdyYXBwaW5nKGlubmVyLnR5cGUpO1xuICAgIGlmICghaW5zaWRlKVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICBsZXQgbGFzdFR5cGUgPSBpbnNpZGUubGVuZ3RoID8gaW5zaWRlW2luc2lkZS5sZW5ndGggLSAxXSA6IHR5cGU7XG4gICAgbGV0IGlubmVyTWF0Y2ggPSBsYXN0VHlwZS5jb250ZW50TWF0Y2g7XG4gICAgZm9yIChsZXQgaSA9IHN0YXJ0SW5kZXg7IGlubmVyTWF0Y2ggJiYgaSA8IGVuZEluZGV4OyBpKyspXG4gICAgICAgIGlubmVyTWF0Y2ggPSBpbm5lck1hdGNoLm1hdGNoVHlwZShwYXJlbnQuY2hpbGQoaSkudHlwZSk7XG4gICAgaWYgKCFpbm5lck1hdGNoIHx8ICFpbm5lck1hdGNoLnZhbGlkRW5kKVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICByZXR1cm4gaW5zaWRlO1xufVxuZnVuY3Rpb24gd3JhcCh0ciwgcmFuZ2UsIHdyYXBwZXJzKSB7XG4gICAgbGV0IGNvbnRlbnQgPSBGcmFnbWVudC5lbXB0eTtcbiAgICBmb3IgKGxldCBpID0gd3JhcHBlcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgaWYgKGNvbnRlbnQuc2l6ZSkge1xuICAgICAgICAgICAgbGV0IG1hdGNoID0gd3JhcHBlcnNbaV0udHlwZS5jb250ZW50TWF0Y2gubWF0Y2hGcmFnbWVudChjb250ZW50KTtcbiAgICAgICAgICAgIGlmICghbWF0Y2ggfHwgIW1hdGNoLnZhbGlkRW5kKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiV3JhcHBlciB0eXBlIGdpdmVuIHRvIFRyYW5zZm9ybS53cmFwIGRvZXMgbm90IGZvcm0gdmFsaWQgY29udGVudCBvZiBpdHMgcGFyZW50IHdyYXBwZXJcIik7XG4gICAgICAgIH1cbiAgICAgICAgY29udGVudCA9IEZyYWdtZW50LmZyb20od3JhcHBlcnNbaV0udHlwZS5jcmVhdGUod3JhcHBlcnNbaV0uYXR0cnMsIGNvbnRlbnQpKTtcbiAgICB9XG4gICAgbGV0IHN0YXJ0ID0gcmFuZ2Uuc3RhcnQsIGVuZCA9IHJhbmdlLmVuZDtcbiAgICB0ci5zdGVwKG5ldyBSZXBsYWNlQXJvdW5kU3RlcChzdGFydCwgZW5kLCBzdGFydCwgZW5kLCBuZXcgU2xpY2UoY29udGVudCwgMCwgMCksIHdyYXBwZXJzLmxlbmd0aCwgdHJ1ZSkpO1xufVxuZnVuY3Rpb24gc2V0QmxvY2tUeXBlKHRyLCBmcm9tLCB0bywgdHlwZSwgYXR0cnMpIHtcbiAgICBpZiAoIXR5cGUuaXNUZXh0YmxvY2spXG4gICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiVHlwZSBnaXZlbiB0byBzZXRCbG9ja1R5cGUgc2hvdWxkIGJlIGEgdGV4dGJsb2NrXCIpO1xuICAgIGxldCBtYXBGcm9tID0gdHIuc3RlcHMubGVuZ3RoO1xuICAgIHRyLmRvYy5ub2Rlc0JldHdlZW4oZnJvbSwgdG8sIChub2RlLCBwb3MpID0+IHtcbiAgICAgICAgaWYgKG5vZGUuaXNUZXh0YmxvY2sgJiYgIW5vZGUuaGFzTWFya3VwKHR5cGUsIGF0dHJzKSAmJiBjYW5DaGFuZ2VUeXBlKHRyLmRvYywgdHIubWFwcGluZy5zbGljZShtYXBGcm9tKS5tYXAocG9zKSwgdHlwZSkpIHtcbiAgICAgICAgICAgIC8vIEVuc3VyZSBhbGwgbWFya3VwIHRoYXQgaXNuJ3QgYWxsb3dlZCBpbiB0aGUgbmV3IG5vZGUgdHlwZSBpcyBjbGVhcmVkXG4gICAgICAgICAgICB0ci5jbGVhckluY29tcGF0aWJsZSh0ci5tYXBwaW5nLnNsaWNlKG1hcEZyb20pLm1hcChwb3MsIDEpLCB0eXBlKTtcbiAgICAgICAgICAgIGxldCBtYXBwaW5nID0gdHIubWFwcGluZy5zbGljZShtYXBGcm9tKTtcbiAgICAgICAgICAgIGxldCBzdGFydE0gPSBtYXBwaW5nLm1hcChwb3MsIDEpLCBlbmRNID0gbWFwcGluZy5tYXAocG9zICsgbm9kZS5ub2RlU2l6ZSwgMSk7XG4gICAgICAgICAgICB0ci5zdGVwKG5ldyBSZXBsYWNlQXJvdW5kU3RlcChzdGFydE0sIGVuZE0sIHN0YXJ0TSArIDEsIGVuZE0gLSAxLCBuZXcgU2xpY2UoRnJhZ21lbnQuZnJvbSh0eXBlLmNyZWF0ZShhdHRycywgbnVsbCwgbm9kZS5tYXJrcykpLCAwLCAwKSwgMSwgdHJ1ZSkpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5mdW5jdGlvbiBjYW5DaGFuZ2VUeXBlKGRvYywgcG9zLCB0eXBlKSB7XG4gICAgbGV0ICRwb3MgPSBkb2MucmVzb2x2ZShwb3MpLCBpbmRleCA9ICRwb3MuaW5kZXgoKTtcbiAgICByZXR1cm4gJHBvcy5wYXJlbnQuY2FuUmVwbGFjZVdpdGgoaW5kZXgsIGluZGV4ICsgMSwgdHlwZSk7XG59XG4vKipcbkNoYW5nZSB0aGUgdHlwZSwgYXR0cmlidXRlcywgYW5kL29yIG1hcmtzIG9mIHRoZSBub2RlIGF0IGBwb3NgLlxuV2hlbiBgdHlwZWAgaXNuJ3QgZ2l2ZW4sIHRoZSBleGlzdGluZyBub2RlIHR5cGUgaXMgcHJlc2VydmVkLFxuKi9cbmZ1bmN0aW9uIHNldE5vZGVNYXJrdXAodHIsIHBvcywgdHlwZSwgYXR0cnMsIG1hcmtzKSB7XG4gICAgbGV0IG5vZGUgPSB0ci5kb2Mubm9kZUF0KHBvcyk7XG4gICAgaWYgKCFub2RlKVxuICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIk5vIG5vZGUgYXQgZ2l2ZW4gcG9zaXRpb25cIik7XG4gICAgaWYgKCF0eXBlKVxuICAgICAgICB0eXBlID0gbm9kZS50eXBlO1xuICAgIGxldCBuZXdOb2RlID0gdHlwZS5jcmVhdGUoYXR0cnMsIG51bGwsIG1hcmtzIHx8IG5vZGUubWFya3MpO1xuICAgIGlmIChub2RlLmlzTGVhZilcbiAgICAgICAgcmV0dXJuIHRyLnJlcGxhY2VXaXRoKHBvcywgcG9zICsgbm9kZS5ub2RlU2l6ZSwgbmV3Tm9kZSk7XG4gICAgaWYgKCF0eXBlLnZhbGlkQ29udGVudChub2RlLmNvbnRlbnQpKVxuICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkludmFsaWQgY29udGVudCBmb3Igbm9kZSB0eXBlIFwiICsgdHlwZS5uYW1lKTtcbiAgICB0ci5zdGVwKG5ldyBSZXBsYWNlQXJvdW5kU3RlcChwb3MsIHBvcyArIG5vZGUubm9kZVNpemUsIHBvcyArIDEsIHBvcyArIG5vZGUubm9kZVNpemUgLSAxLCBuZXcgU2xpY2UoRnJhZ21lbnQuZnJvbShuZXdOb2RlKSwgMCwgMCksIDEsIHRydWUpKTtcbn1cbi8qKlxuQ2hlY2sgd2hldGhlciBzcGxpdHRpbmcgYXQgdGhlIGdpdmVuIHBvc2l0aW9uIGlzIGFsbG93ZWQuXG4qL1xuZnVuY3Rpb24gY2FuU3BsaXQoZG9jLCBwb3MsIGRlcHRoID0gMSwgdHlwZXNBZnRlcikge1xuICAgIGxldCAkcG9zID0gZG9jLnJlc29sdmUocG9zKSwgYmFzZSA9ICRwb3MuZGVwdGggLSBkZXB0aDtcbiAgICBsZXQgaW5uZXJUeXBlID0gKHR5cGVzQWZ0ZXIgJiYgdHlwZXNBZnRlclt0eXBlc0FmdGVyLmxlbmd0aCAtIDFdKSB8fCAkcG9zLnBhcmVudDtcbiAgICBpZiAoYmFzZSA8IDAgfHwgJHBvcy5wYXJlbnQudHlwZS5zcGVjLmlzb2xhdGluZyB8fFxuICAgICAgICAhJHBvcy5wYXJlbnQuY2FuUmVwbGFjZSgkcG9zLmluZGV4KCksICRwb3MucGFyZW50LmNoaWxkQ291bnQpIHx8XG4gICAgICAgICFpbm5lclR5cGUudHlwZS52YWxpZENvbnRlbnQoJHBvcy5wYXJlbnQuY29udGVudC5jdXRCeUluZGV4KCRwb3MuaW5kZXgoKSwgJHBvcy5wYXJlbnQuY2hpbGRDb3VudCkpKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgZm9yIChsZXQgZCA9ICRwb3MuZGVwdGggLSAxLCBpID0gZGVwdGggLSAyOyBkID4gYmFzZTsgZC0tLCBpLS0pIHtcbiAgICAgICAgbGV0IG5vZGUgPSAkcG9zLm5vZGUoZCksIGluZGV4ID0gJHBvcy5pbmRleChkKTtcbiAgICAgICAgaWYgKG5vZGUudHlwZS5zcGVjLmlzb2xhdGluZylcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgbGV0IHJlc3QgPSBub2RlLmNvbnRlbnQuY3V0QnlJbmRleChpbmRleCwgbm9kZS5jaGlsZENvdW50KTtcbiAgICAgICAgbGV0IGFmdGVyID0gKHR5cGVzQWZ0ZXIgJiYgdHlwZXNBZnRlcltpXSkgfHwgbm9kZTtcbiAgICAgICAgaWYgKGFmdGVyICE9IG5vZGUpXG4gICAgICAgICAgICByZXN0ID0gcmVzdC5yZXBsYWNlQ2hpbGQoMCwgYWZ0ZXIudHlwZS5jcmVhdGUoYWZ0ZXIuYXR0cnMpKTtcbiAgICAgICAgaWYgKCFub2RlLmNhblJlcGxhY2UoaW5kZXggKyAxLCBub2RlLmNoaWxkQ291bnQpIHx8ICFhZnRlci50eXBlLnZhbGlkQ29udGVudChyZXN0KSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgbGV0IGluZGV4ID0gJHBvcy5pbmRleEFmdGVyKGJhc2UpO1xuICAgIGxldCBiYXNlVHlwZSA9IHR5cGVzQWZ0ZXIgJiYgdHlwZXNBZnRlclswXTtcbiAgICByZXR1cm4gJHBvcy5ub2RlKGJhc2UpLmNhblJlcGxhY2VXaXRoKGluZGV4LCBpbmRleCwgYmFzZVR5cGUgPyBiYXNlVHlwZS50eXBlIDogJHBvcy5ub2RlKGJhc2UgKyAxKS50eXBlKTtcbn1cbmZ1bmN0aW9uIHNwbGl0KHRyLCBwb3MsIGRlcHRoID0gMSwgdHlwZXNBZnRlcikge1xuICAgIGxldCAkcG9zID0gdHIuZG9jLnJlc29sdmUocG9zKSwgYmVmb3JlID0gRnJhZ21lbnQuZW1wdHksIGFmdGVyID0gRnJhZ21lbnQuZW1wdHk7XG4gICAgZm9yIChsZXQgZCA9ICRwb3MuZGVwdGgsIGUgPSAkcG9zLmRlcHRoIC0gZGVwdGgsIGkgPSBkZXB0aCAtIDE7IGQgPiBlOyBkLS0sIGktLSkge1xuICAgICAgICBiZWZvcmUgPSBGcmFnbWVudC5mcm9tKCRwb3Mubm9kZShkKS5jb3B5KGJlZm9yZSkpO1xuICAgICAgICBsZXQgdHlwZUFmdGVyID0gdHlwZXNBZnRlciAmJiB0eXBlc0FmdGVyW2ldO1xuICAgICAgICBhZnRlciA9IEZyYWdtZW50LmZyb20odHlwZUFmdGVyID8gdHlwZUFmdGVyLnR5cGUuY3JlYXRlKHR5cGVBZnRlci5hdHRycywgYWZ0ZXIpIDogJHBvcy5ub2RlKGQpLmNvcHkoYWZ0ZXIpKTtcbiAgICB9XG4gICAgdHIuc3RlcChuZXcgUmVwbGFjZVN0ZXAocG9zLCBwb3MsIG5ldyBTbGljZShiZWZvcmUuYXBwZW5kKGFmdGVyKSwgZGVwdGgsIGRlcHRoKSwgdHJ1ZSkpO1xufVxuLyoqXG5UZXN0IHdoZXRoZXIgdGhlIGJsb2NrcyBiZWZvcmUgYW5kIGFmdGVyIGEgZ2l2ZW4gcG9zaXRpb24gY2FuIGJlXG5qb2luZWQuXG4qL1xuZnVuY3Rpb24gY2FuSm9pbihkb2MsIHBvcykge1xuICAgIGxldCAkcG9zID0gZG9jLnJlc29sdmUocG9zKSwgaW5kZXggPSAkcG9zLmluZGV4KCk7XG4gICAgcmV0dXJuIGpvaW5hYmxlKCRwb3Mubm9kZUJlZm9yZSwgJHBvcy5ub2RlQWZ0ZXIpICYmXG4gICAgICAgICRwb3MucGFyZW50LmNhblJlcGxhY2UoaW5kZXgsIGluZGV4ICsgMSk7XG59XG5mdW5jdGlvbiBqb2luYWJsZShhLCBiKSB7XG4gICAgcmV0dXJuICEhKGEgJiYgYiAmJiAhYS5pc0xlYWYgJiYgYS5jYW5BcHBlbmQoYikpO1xufVxuLyoqXG5GaW5kIGFuIGFuY2VzdG9yIG9mIHRoZSBnaXZlbiBwb3NpdGlvbiB0aGF0IGNhbiBiZSBqb2luZWQgdG8gdGhlXG5ibG9jayBiZWZvcmUgKG9yIGFmdGVyIGlmIGBkaXJgIGlzIHBvc2l0aXZlKS4gUmV0dXJucyB0aGUgam9pbmFibGVcbnBvaW50LCBpZiBhbnkuXG4qL1xuZnVuY3Rpb24gam9pblBvaW50KGRvYywgcG9zLCBkaXIgPSAtMSkge1xuICAgIGxldCAkcG9zID0gZG9jLnJlc29sdmUocG9zKTtcbiAgICBmb3IgKGxldCBkID0gJHBvcy5kZXB0aDs7IGQtLSkge1xuICAgICAgICBsZXQgYmVmb3JlLCBhZnRlciwgaW5kZXggPSAkcG9zLmluZGV4KGQpO1xuICAgICAgICBpZiAoZCA9PSAkcG9zLmRlcHRoKSB7XG4gICAgICAgICAgICBiZWZvcmUgPSAkcG9zLm5vZGVCZWZvcmU7XG4gICAgICAgICAgICBhZnRlciA9ICRwb3Mubm9kZUFmdGVyO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGRpciA+IDApIHtcbiAgICAgICAgICAgIGJlZm9yZSA9ICRwb3Mubm9kZShkICsgMSk7XG4gICAgICAgICAgICBpbmRleCsrO1xuICAgICAgICAgICAgYWZ0ZXIgPSAkcG9zLm5vZGUoZCkubWF5YmVDaGlsZChpbmRleCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBiZWZvcmUgPSAkcG9zLm5vZGUoZCkubWF5YmVDaGlsZChpbmRleCAtIDEpO1xuICAgICAgICAgICAgYWZ0ZXIgPSAkcG9zLm5vZGUoZCArIDEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChiZWZvcmUgJiYgIWJlZm9yZS5pc1RleHRibG9jayAmJiBqb2luYWJsZShiZWZvcmUsIGFmdGVyKSAmJlxuICAgICAgICAgICAgJHBvcy5ub2RlKGQpLmNhblJlcGxhY2UoaW5kZXgsIGluZGV4ICsgMSkpXG4gICAgICAgICAgICByZXR1cm4gcG9zO1xuICAgICAgICBpZiAoZCA9PSAwKVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIHBvcyA9IGRpciA8IDAgPyAkcG9zLmJlZm9yZShkKSA6ICRwb3MuYWZ0ZXIoZCk7XG4gICAgfVxufVxuZnVuY3Rpb24gam9pbih0ciwgcG9zLCBkZXB0aCkge1xuICAgIGxldCBzdGVwID0gbmV3IFJlcGxhY2VTdGVwKHBvcyAtIGRlcHRoLCBwb3MgKyBkZXB0aCwgU2xpY2UuZW1wdHksIHRydWUpO1xuICAgIHRyLnN0ZXAoc3RlcCk7XG59XG4vKipcblRyeSB0byBmaW5kIGEgcG9pbnQgd2hlcmUgYSBub2RlIG9mIHRoZSBnaXZlbiB0eXBlIGNhbiBiZSBpbnNlcnRlZFxubmVhciBgcG9zYCwgYnkgc2VhcmNoaW5nIHVwIHRoZSBub2RlIGhpZXJhcmNoeSB3aGVuIGBwb3NgIGl0c2VsZlxuaXNuJ3QgYSB2YWxpZCBwbGFjZSBidXQgaXMgYXQgdGhlIHN0YXJ0IG9yIGVuZCBvZiBhIG5vZGUuIFJldHVyblxubnVsbCBpZiBubyBwb3NpdGlvbiB3YXMgZm91bmQuXG4qL1xuZnVuY3Rpb24gaW5zZXJ0UG9pbnQoZG9jLCBwb3MsIG5vZGVUeXBlKSB7XG4gICAgbGV0ICRwb3MgPSBkb2MucmVzb2x2ZShwb3MpO1xuICAgIGlmICgkcG9zLnBhcmVudC5jYW5SZXBsYWNlV2l0aCgkcG9zLmluZGV4KCksICRwb3MuaW5kZXgoKSwgbm9kZVR5cGUpKVxuICAgICAgICByZXR1cm4gcG9zO1xuICAgIGlmICgkcG9zLnBhcmVudE9mZnNldCA9PSAwKVxuICAgICAgICBmb3IgKGxldCBkID0gJHBvcy5kZXB0aCAtIDE7IGQgPj0gMDsgZC0tKSB7XG4gICAgICAgICAgICBsZXQgaW5kZXggPSAkcG9zLmluZGV4KGQpO1xuICAgICAgICAgICAgaWYgKCRwb3Mubm9kZShkKS5jYW5SZXBsYWNlV2l0aChpbmRleCwgaW5kZXgsIG5vZGVUeXBlKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gJHBvcy5iZWZvcmUoZCArIDEpO1xuICAgICAgICAgICAgaWYgKGluZGV4ID4gMClcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIGlmICgkcG9zLnBhcmVudE9mZnNldCA9PSAkcG9zLnBhcmVudC5jb250ZW50LnNpemUpXG4gICAgICAgIGZvciAobGV0IGQgPSAkcG9zLmRlcHRoIC0gMTsgZCA+PSAwOyBkLS0pIHtcbiAgICAgICAgICAgIGxldCBpbmRleCA9ICRwb3MuaW5kZXhBZnRlcihkKTtcbiAgICAgICAgICAgIGlmICgkcG9zLm5vZGUoZCkuY2FuUmVwbGFjZVdpdGgoaW5kZXgsIGluZGV4LCBub2RlVHlwZSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuICRwb3MuYWZ0ZXIoZCArIDEpO1xuICAgICAgICAgICAgaWYgKGluZGV4IDwgJHBvcy5ub2RlKGQpLmNoaWxkQ291bnQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbi8qKlxuRmluZHMgYSBwb3NpdGlvbiBhdCBvciBhcm91bmQgdGhlIGdpdmVuIHBvc2l0aW9uIHdoZXJlIHRoZSBnaXZlblxuc2xpY2UgY2FuIGJlIGluc2VydGVkLiBXaWxsIGxvb2sgYXQgcGFyZW50IG5vZGVzJyBuZWFyZXN0IGJvdW5kYXJ5XG5hbmQgdHJ5IHRoZXJlLCBldmVuIGlmIHRoZSBvcmlnaW5hbCBwb3NpdGlvbiB3YXNuJ3QgZGlyZWN0bHkgYXQgdGhlXG5zdGFydCBvciBlbmQgb2YgdGhhdCBub2RlLiBSZXR1cm5zIG51bGwgd2hlbiBubyBwb3NpdGlvbiB3YXMgZm91bmQuXG4qL1xuZnVuY3Rpb24gZHJvcFBvaW50KGRvYywgcG9zLCBzbGljZSkge1xuICAgIGxldCAkcG9zID0gZG9jLnJlc29sdmUocG9zKTtcbiAgICBpZiAoIXNsaWNlLmNvbnRlbnQuc2l6ZSlcbiAgICAgICAgcmV0dXJuIHBvcztcbiAgICBsZXQgY29udGVudCA9IHNsaWNlLmNvbnRlbnQ7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGljZS5vcGVuU3RhcnQ7IGkrKylcbiAgICAgICAgY29udGVudCA9IGNvbnRlbnQuZmlyc3RDaGlsZC5jb250ZW50O1xuICAgIGZvciAobGV0IHBhc3MgPSAxOyBwYXNzIDw9IChzbGljZS5vcGVuU3RhcnQgPT0gMCAmJiBzbGljZS5zaXplID8gMiA6IDEpOyBwYXNzKyspIHtcbiAgICAgICAgZm9yIChsZXQgZCA9ICRwb3MuZGVwdGg7IGQgPj0gMDsgZC0tKSB7XG4gICAgICAgICAgICBsZXQgYmlhcyA9IGQgPT0gJHBvcy5kZXB0aCA/IDAgOiAkcG9zLnBvcyA8PSAoJHBvcy5zdGFydChkICsgMSkgKyAkcG9zLmVuZChkICsgMSkpIC8gMiA/IC0xIDogMTtcbiAgICAgICAgICAgIGxldCBpbnNlcnRQb3MgPSAkcG9zLmluZGV4KGQpICsgKGJpYXMgPiAwID8gMSA6IDApO1xuICAgICAgICAgICAgbGV0IHBhcmVudCA9ICRwb3Mubm9kZShkKSwgZml0cyA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKHBhc3MgPT0gMSkge1xuICAgICAgICAgICAgICAgIGZpdHMgPSBwYXJlbnQuY2FuUmVwbGFjZShpbnNlcnRQb3MsIGluc2VydFBvcywgY29udGVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBsZXQgd3JhcHBpbmcgPSBwYXJlbnQuY29udGVudE1hdGNoQXQoaW5zZXJ0UG9zKS5maW5kV3JhcHBpbmcoY29udGVudC5maXJzdENoaWxkLnR5cGUpO1xuICAgICAgICAgICAgICAgIGZpdHMgPSB3cmFwcGluZyAmJiBwYXJlbnQuY2FuUmVwbGFjZVdpdGgoaW5zZXJ0UG9zLCBpbnNlcnRQb3MsIHdyYXBwaW5nWzBdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChmaXRzKVxuICAgICAgICAgICAgICAgIHJldHVybiBiaWFzID09IDAgPyAkcG9zLnBvcyA6IGJpYXMgPCAwID8gJHBvcy5iZWZvcmUoZCArIDEpIDogJHBvcy5hZnRlcihkICsgMSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxu4oCYRml04oCZIGEgc2xpY2UgaW50byBhIGdpdmVuIHBvc2l0aW9uIGluIHRoZSBkb2N1bWVudCwgcHJvZHVjaW5nIGFcbltzdGVwXShodHRwczovL3Byb3NlbWlycm9yLm5ldC9kb2NzL3JlZi8jdHJhbnNmb3JtLlN0ZXApIHRoYXQgaW5zZXJ0cyBpdC4gV2lsbCByZXR1cm4gbnVsbCBpZlxudGhlcmUncyBubyBtZWFuaW5nZnVsIHdheSB0byBpbnNlcnQgdGhlIHNsaWNlIGhlcmUsIG9yIGluc2VydGluZyBpdFxud291bGQgYmUgYSBuby1vcCAoYW4gZW1wdHkgc2xpY2Ugb3ZlciBhbiBlbXB0eSByYW5nZSkuXG4qL1xuZnVuY3Rpb24gcmVwbGFjZVN0ZXAoZG9jLCBmcm9tLCB0byA9IGZyb20sIHNsaWNlID0gU2xpY2UuZW1wdHkpIHtcbiAgICBpZiAoZnJvbSA9PSB0byAmJiAhc2xpY2Uuc2l6ZSlcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgbGV0ICRmcm9tID0gZG9jLnJlc29sdmUoZnJvbSksICR0byA9IGRvYy5yZXNvbHZlKHRvKTtcbiAgICAvLyBPcHRpbWl6YXRpb24gLS0gYXZvaWQgd29yayBpZiBpdCdzIG9idmlvdXMgdGhhdCBpdCdzIG5vdCBuZWVkZWQuXG4gICAgaWYgKGZpdHNUcml2aWFsbHkoJGZyb20sICR0bywgc2xpY2UpKVxuICAgICAgICByZXR1cm4gbmV3IFJlcGxhY2VTdGVwKGZyb20sIHRvLCBzbGljZSk7XG4gICAgcmV0dXJuIG5ldyBGaXR0ZXIoJGZyb20sICR0bywgc2xpY2UpLmZpdCgpO1xufVxuZnVuY3Rpb24gZml0c1RyaXZpYWxseSgkZnJvbSwgJHRvLCBzbGljZSkge1xuICAgIHJldHVybiAhc2xpY2Uub3BlblN0YXJ0ICYmICFzbGljZS5vcGVuRW5kICYmICRmcm9tLnN0YXJ0KCkgPT0gJHRvLnN0YXJ0KCkgJiZcbiAgICAgICAgJGZyb20ucGFyZW50LmNhblJlcGxhY2UoJGZyb20uaW5kZXgoKSwgJHRvLmluZGV4KCksIHNsaWNlLmNvbnRlbnQpO1xufVxuLy8gQWxnb3JpdGhtIGZvciAncGxhY2luZycgdGhlIGVsZW1lbnRzIG9mIGEgc2xpY2UgaW50byBhIGdhcDpcbi8vXG4vLyBXZSBjb25zaWRlciB0aGUgY29udGVudCBvZiBlYWNoIG5vZGUgdGhhdCBpcyBvcGVuIHRvIHRoZSBsZWZ0IHRvIGJlXG4vLyBpbmRlcGVuZGVudGx5IHBsYWNlYWJsZS4gSS5lLiBpbiA8cChcImZvb1wiKSwgcChcImJhclwiKT4sIHdoZW4gdGhlXG4vLyBwYXJhZ3JhcGggb24gdGhlIGxlZnQgaXMgb3BlbiwgXCJmb29cIiBjYW4gYmUgcGxhY2VkIChzb21ld2hlcmUgb25cbi8vIHRoZSBsZWZ0IHNpZGUgb2YgdGhlIHJlcGxhY2VtZW50IGdhcCkgaW5kZXBlbmRlbnRseSBmcm9tIHAoXCJiYXJcIikuXG4vL1xuLy8gVGhpcyBjbGFzcyB0cmFja3MgdGhlIHN0YXRlIG9mIHRoZSBwbGFjZW1lbnQgcHJvZ3Jlc3MgaW4gdGhlXG4vLyBmb2xsb3dpbmcgcHJvcGVydGllczpcbi8vXG4vLyAgLSBgZnJvbnRpZXJgIGhvbGRzIGEgc3RhY2sgb2YgYHt0eXBlLCBtYXRjaH1gIG9iamVjdHMgdGhhdFxuLy8gICAgcmVwcmVzZW50IHRoZSBvcGVuIHNpZGUgb2YgdGhlIHJlcGxhY2VtZW50LiBJdCBzdGFydHMgYXRcbi8vICAgIGAkZnJvbWAsIHRoZW4gbW92ZXMgZm9yd2FyZCBhcyBjb250ZW50IGlzIHBsYWNlZCwgYW5kIGlzIGZpbmFsbHlcbi8vICAgIHJlY29uY2lsZWQgd2l0aCBgJHRvYC5cbi8vXG4vLyAgLSBgdW5wbGFjZWRgIGlzIGEgc2xpY2UgdGhhdCByZXByZXNlbnRzIHRoZSBjb250ZW50IHRoYXQgaGFzbid0XG4vLyAgICBiZWVuIHBsYWNlZCB5ZXQuXG4vL1xuLy8gIC0gYHBsYWNlZGAgaXMgYSBmcmFnbWVudCBvZiBwbGFjZWQgY29udGVudC4gSXRzIG9wZW4tc3RhcnQgdmFsdWVcbi8vICAgIGlzIGltcGxpY2l0IGluIGAkZnJvbWAsIGFuZCBpdHMgb3Blbi1lbmQgdmFsdWUgaW4gYGZyb250aWVyYC5cbmNsYXNzIEZpdHRlciB7XG4gICAgY29uc3RydWN0b3IoJGZyb20sICR0bywgdW5wbGFjZWQpIHtcbiAgICAgICAgdGhpcy4kZnJvbSA9ICRmcm9tO1xuICAgICAgICB0aGlzLiR0byA9ICR0bztcbiAgICAgICAgdGhpcy51bnBsYWNlZCA9IHVucGxhY2VkO1xuICAgICAgICB0aGlzLmZyb250aWVyID0gW107XG4gICAgICAgIHRoaXMucGxhY2VkID0gRnJhZ21lbnQuZW1wdHk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDw9ICRmcm9tLmRlcHRoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBub2RlID0gJGZyb20ubm9kZShpKTtcbiAgICAgICAgICAgIHRoaXMuZnJvbnRpZXIucHVzaCh7XG4gICAgICAgICAgICAgICAgdHlwZTogbm9kZS50eXBlLFxuICAgICAgICAgICAgICAgIG1hdGNoOiBub2RlLmNvbnRlbnRNYXRjaEF0KCRmcm9tLmluZGV4QWZ0ZXIoaSkpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBpID0gJGZyb20uZGVwdGg7IGkgPiAwOyBpLS0pXG4gICAgICAgICAgICB0aGlzLnBsYWNlZCA9IEZyYWdtZW50LmZyb20oJGZyb20ubm9kZShpKS5jb3B5KHRoaXMucGxhY2VkKSk7XG4gICAgfVxuICAgIGdldCBkZXB0aCgpIHsgcmV0dXJuIHRoaXMuZnJvbnRpZXIubGVuZ3RoIC0gMTsgfVxuICAgIGZpdCgpIHtcbiAgICAgICAgLy8gQXMgbG9uZyBhcyB0aGVyZSdzIHVucGxhY2VkIGNvbnRlbnQsIHRyeSB0byBwbGFjZSBzb21lIG9mIGl0LlxuICAgICAgICAvLyBJZiB0aGF0IGZhaWxzLCBlaXRoZXIgaW5jcmVhc2UgdGhlIG9wZW4gc2NvcmUgb2YgdGhlIHVucGxhY2VkXG4gICAgICAgIC8vIHNsaWNlLCBvciBkcm9wIG5vZGVzIGZyb20gaXQsIGFuZCB0aGVuIHRyeSBhZ2Fpbi5cbiAgICAgICAgd2hpbGUgKHRoaXMudW5wbGFjZWQuc2l6ZSkge1xuICAgICAgICAgICAgbGV0IGZpdCA9IHRoaXMuZmluZEZpdHRhYmxlKCk7XG4gICAgICAgICAgICBpZiAoZml0KVxuICAgICAgICAgICAgICAgIHRoaXMucGxhY2VOb2RlcyhmaXQpO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHRoaXMub3Blbk1vcmUoKSB8fCB0aGlzLmRyb3BOb2RlKCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gV2hlbiB0aGVyZSdzIGlubGluZSBjb250ZW50IGRpcmVjdGx5IGFmdGVyIHRoZSBmcm9udGllciBfYW5kX1xuICAgICAgICAvLyBkaXJlY3RseSBhZnRlciBgdGhpcy4kdG9gLCB3ZSBtdXN0IGdlbmVyYXRlIGEgYFJlcGxhY2VBcm91bmRgXG4gICAgICAgIC8vIHN0ZXAgdGhhdCBwdWxscyB0aGF0IGNvbnRlbnQgaW50byB0aGUgbm9kZSBhZnRlciB0aGUgZnJvbnRpZXIuXG4gICAgICAgIC8vIFRoYXQgbWVhbnMgdGhlIGZpdHRpbmcgbXVzdCBiZSBkb25lIHRvIHRoZSBlbmQgb2YgdGhlIHRleHRibG9ja1xuICAgICAgICAvLyBub2RlIGFmdGVyIGB0aGlzLiR0b2AsIG5vdCBgdGhpcy4kdG9gIGl0c2VsZi5cbiAgICAgICAgbGV0IG1vdmVJbmxpbmUgPSB0aGlzLm11c3RNb3ZlSW5saW5lKCksIHBsYWNlZFNpemUgPSB0aGlzLnBsYWNlZC5zaXplIC0gdGhpcy5kZXB0aCAtIHRoaXMuJGZyb20uZGVwdGg7XG4gICAgICAgIGxldCAkZnJvbSA9IHRoaXMuJGZyb20sICR0byA9IHRoaXMuY2xvc2UobW92ZUlubGluZSA8IDAgPyB0aGlzLiR0byA6ICRmcm9tLmRvYy5yZXNvbHZlKG1vdmVJbmxpbmUpKTtcbiAgICAgICAgaWYgKCEkdG8pXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgLy8gSWYgY2xvc2luZyB0byBgJHRvYCBzdWNjZWVkZWQsIGNyZWF0ZSBhIHN0ZXBcbiAgICAgICAgbGV0IGNvbnRlbnQgPSB0aGlzLnBsYWNlZCwgb3BlblN0YXJ0ID0gJGZyb20uZGVwdGgsIG9wZW5FbmQgPSAkdG8uZGVwdGg7XG4gICAgICAgIHdoaWxlIChvcGVuU3RhcnQgJiYgb3BlbkVuZCAmJiBjb250ZW50LmNoaWxkQ291bnQgPT0gMSkgeyAvLyBOb3JtYWxpemUgYnkgZHJvcHBpbmcgb3BlbiBwYXJlbnQgbm9kZXNcbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50LmZpcnN0Q2hpbGQuY29udGVudDtcbiAgICAgICAgICAgIG9wZW5TdGFydC0tO1xuICAgICAgICAgICAgb3BlbkVuZC0tO1xuICAgICAgICB9XG4gICAgICAgIGxldCBzbGljZSA9IG5ldyBTbGljZShjb250ZW50LCBvcGVuU3RhcnQsIG9wZW5FbmQpO1xuICAgICAgICBpZiAobW92ZUlubGluZSA+IC0xKVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBSZXBsYWNlQXJvdW5kU3RlcCgkZnJvbS5wb3MsIG1vdmVJbmxpbmUsIHRoaXMuJHRvLnBvcywgdGhpcy4kdG8uZW5kKCksIHNsaWNlLCBwbGFjZWRTaXplKTtcbiAgICAgICAgaWYgKHNsaWNlLnNpemUgfHwgJGZyb20ucG9zICE9IHRoaXMuJHRvLnBvcykgLy8gRG9uJ3QgZ2VuZXJhdGUgbm8tb3Agc3RlcHNcbiAgICAgICAgICAgIHJldHVybiBuZXcgUmVwbGFjZVN0ZXAoJGZyb20ucG9zLCAkdG8ucG9zLCBzbGljZSk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICAvLyBGaW5kIGEgcG9zaXRpb24gb24gdGhlIHN0YXJ0IHNwaW5lIG9mIGB0aGlzLnVucGxhY2VkYCB0aGF0IGhhc1xuICAgIC8vIGNvbnRlbnQgdGhhdCBjYW4gYmUgbW92ZWQgc29tZXdoZXJlIG9uIHRoZSBmcm9udGllci4gUmV0dXJucyB0d29cbiAgICAvLyBkZXB0aHMsIG9uZSBmb3IgdGhlIHNsaWNlIGFuZCBvbmUgZm9yIHRoZSBmcm9udGllci5cbiAgICBmaW5kRml0dGFibGUoKSB7XG4gICAgICAgIC8vIE9ubHkgdHJ5IHdyYXBwaW5nIG5vZGVzIChwYXNzIDIpIGFmdGVyIGZpbmRpbmcgYSBwbGFjZSB3aXRob3V0XG4gICAgICAgIC8vIHdyYXBwaW5nIGZhaWxlZC5cbiAgICAgICAgZm9yIChsZXQgcGFzcyA9IDE7IHBhc3MgPD0gMjsgcGFzcysrKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBzbGljZURlcHRoID0gdGhpcy51bnBsYWNlZC5vcGVuU3RhcnQ7IHNsaWNlRGVwdGggPj0gMDsgc2xpY2VEZXB0aC0tKSB7XG4gICAgICAgICAgICAgICAgbGV0IGZyYWdtZW50LCBwYXJlbnQgPSBudWxsO1xuICAgICAgICAgICAgICAgIGlmIChzbGljZURlcHRoKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcmVudCA9IGNvbnRlbnRBdCh0aGlzLnVucGxhY2VkLmNvbnRlbnQsIHNsaWNlRGVwdGggLSAxKS5maXJzdENoaWxkO1xuICAgICAgICAgICAgICAgICAgICBmcmFnbWVudCA9IHBhcmVudC5jb250ZW50O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZnJhZ21lbnQgPSB0aGlzLnVucGxhY2VkLmNvbnRlbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxldCBmaXJzdCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgZnJvbnRpZXJEZXB0aCA9IHRoaXMuZGVwdGg7IGZyb250aWVyRGVwdGggPj0gMDsgZnJvbnRpZXJEZXB0aC0tKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCB7IHR5cGUsIG1hdGNoIH0gPSB0aGlzLmZyb250aWVyW2Zyb250aWVyRGVwdGhdLCB3cmFwLCBpbmplY3QgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAvLyBJbiBwYXNzIDEsIGlmIHRoZSBuZXh0IG5vZGUgbWF0Y2hlcywgb3IgdGhlcmUgaXMgbm8gbmV4dFxuICAgICAgICAgICAgICAgICAgICAvLyBub2RlIGJ1dCB0aGUgcGFyZW50cyBsb29rIGNvbXBhdGlibGUsIHdlJ3ZlIGZvdW5kIGFcbiAgICAgICAgICAgICAgICAgICAgLy8gcGxhY2UuXG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXNzID09IDEgJiYgKGZpcnN0ID8gbWF0Y2gubWF0Y2hUeXBlKGZpcnN0LnR5cGUpIHx8IChpbmplY3QgPSBtYXRjaC5maWxsQmVmb3JlKEZyYWdtZW50LmZyb20oZmlyc3QpLCBmYWxzZSkpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHBhcmVudCAmJiB0eXBlLmNvbXBhdGlibGVDb250ZW50KHBhcmVudC50eXBlKSkpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBzbGljZURlcHRoLCBmcm9udGllckRlcHRoLCBwYXJlbnQsIGluamVjdCB9O1xuICAgICAgICAgICAgICAgICAgICAvLyBJbiBwYXNzIDIsIGxvb2sgZm9yIGEgc2V0IG9mIHdyYXBwaW5nIG5vZGVzIHRoYXQgbWFrZVxuICAgICAgICAgICAgICAgICAgICAvLyBgZmlyc3RgIGZpdCBoZXJlLlxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChwYXNzID09IDIgJiYgZmlyc3QgJiYgKHdyYXAgPSBtYXRjaC5maW5kV3JhcHBpbmcoZmlyc3QudHlwZSkpKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgc2xpY2VEZXB0aCwgZnJvbnRpZXJEZXB0aCwgcGFyZW50LCB3cmFwIH07XG4gICAgICAgICAgICAgICAgICAgIC8vIERvbid0IGNvbnRpbnVlIGxvb2tpbmcgZnVydGhlciB1cCBpZiB0aGUgcGFyZW50IG5vZGVcbiAgICAgICAgICAgICAgICAgICAgLy8gd291bGQgZml0IGhlcmUuXG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJlbnQgJiYgbWF0Y2gubWF0Y2hUeXBlKHBhcmVudC50eXBlKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBvcGVuTW9yZSgpIHtcbiAgICAgICAgbGV0IHsgY29udGVudCwgb3BlblN0YXJ0LCBvcGVuRW5kIH0gPSB0aGlzLnVucGxhY2VkO1xuICAgICAgICBsZXQgaW5uZXIgPSBjb250ZW50QXQoY29udGVudCwgb3BlblN0YXJ0KTtcbiAgICAgICAgaWYgKCFpbm5lci5jaGlsZENvdW50IHx8IGlubmVyLmZpcnN0Q2hpbGQuaXNMZWFmKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB0aGlzLnVucGxhY2VkID0gbmV3IFNsaWNlKGNvbnRlbnQsIG9wZW5TdGFydCArIDEsIE1hdGgubWF4KG9wZW5FbmQsIGlubmVyLnNpemUgKyBvcGVuU3RhcnQgPj0gY29udGVudC5zaXplIC0gb3BlbkVuZCA/IG9wZW5TdGFydCArIDEgOiAwKSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBkcm9wTm9kZSgpIHtcbiAgICAgICAgbGV0IHsgY29udGVudCwgb3BlblN0YXJ0LCBvcGVuRW5kIH0gPSB0aGlzLnVucGxhY2VkO1xuICAgICAgICBsZXQgaW5uZXIgPSBjb250ZW50QXQoY29udGVudCwgb3BlblN0YXJ0KTtcbiAgICAgICAgaWYgKGlubmVyLmNoaWxkQ291bnQgPD0gMSAmJiBvcGVuU3RhcnQgPiAwKSB7XG4gICAgICAgICAgICBsZXQgb3BlbkF0RW5kID0gY29udGVudC5zaXplIC0gb3BlblN0YXJ0IDw9IG9wZW5TdGFydCArIGlubmVyLnNpemU7XG4gICAgICAgICAgICB0aGlzLnVucGxhY2VkID0gbmV3IFNsaWNlKGRyb3BGcm9tRnJhZ21lbnQoY29udGVudCwgb3BlblN0YXJ0IC0gMSwgMSksIG9wZW5TdGFydCAtIDEsIG9wZW5BdEVuZCA/IG9wZW5TdGFydCAtIDEgOiBvcGVuRW5kKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudW5wbGFjZWQgPSBuZXcgU2xpY2UoZHJvcEZyb21GcmFnbWVudChjb250ZW50LCBvcGVuU3RhcnQsIDEpLCBvcGVuU3RhcnQsIG9wZW5FbmQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIE1vdmUgY29udGVudCBmcm9tIHRoZSB1bnBsYWNlZCBzbGljZSBhdCBgc2xpY2VEZXB0aGAgdG8gdGhlXG4gICAgLy8gZnJvbnRpZXIgbm9kZSBhdCBgZnJvbnRpZXJEZXB0aGAuIENsb3NlIHRoYXQgZnJvbnRpZXIgbm9kZSB3aGVuXG4gICAgLy8gYXBwbGljYWJsZS5cbiAgICBwbGFjZU5vZGVzKHsgc2xpY2VEZXB0aCwgZnJvbnRpZXJEZXB0aCwgcGFyZW50LCBpbmplY3QsIHdyYXAgfSkge1xuICAgICAgICB3aGlsZSAodGhpcy5kZXB0aCA+IGZyb250aWVyRGVwdGgpXG4gICAgICAgICAgICB0aGlzLmNsb3NlRnJvbnRpZXJOb2RlKCk7XG4gICAgICAgIGlmICh3cmFwKVxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB3cmFwLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgICAgIHRoaXMub3BlbkZyb250aWVyTm9kZSh3cmFwW2ldKTtcbiAgICAgICAgbGV0IHNsaWNlID0gdGhpcy51bnBsYWNlZCwgZnJhZ21lbnQgPSBwYXJlbnQgPyBwYXJlbnQuY29udGVudCA6IHNsaWNlLmNvbnRlbnQ7XG4gICAgICAgIGxldCBvcGVuU3RhcnQgPSBzbGljZS5vcGVuU3RhcnQgLSBzbGljZURlcHRoO1xuICAgICAgICBsZXQgdGFrZW4gPSAwLCBhZGQgPSBbXTtcbiAgICAgICAgbGV0IHsgbWF0Y2gsIHR5cGUgfSA9IHRoaXMuZnJvbnRpZXJbZnJvbnRpZXJEZXB0aF07XG4gICAgICAgIGlmIChpbmplY3QpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5qZWN0LmNoaWxkQ291bnQ7IGkrKylcbiAgICAgICAgICAgICAgICBhZGQucHVzaChpbmplY3QuY2hpbGQoaSkpO1xuICAgICAgICAgICAgbWF0Y2ggPSBtYXRjaC5tYXRjaEZyYWdtZW50KGluamVjdCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ29tcHV0ZXMgdGhlIGFtb3VudCBvZiAoZW5kKSBvcGVuIG5vZGVzIGF0IHRoZSBlbmQgb2YgdGhlXG4gICAgICAgIC8vIGZyYWdtZW50LiBXaGVuIDAsIHRoZSBwYXJlbnQgaXMgb3BlbiwgYnV0IG5vIG1vcmUuIFdoZW5cbiAgICAgICAgLy8gbmVnYXRpdmUsIG5vdGhpbmcgaXMgb3Blbi5cbiAgICAgICAgbGV0IG9wZW5FbmRDb3VudCA9IChmcmFnbWVudC5zaXplICsgc2xpY2VEZXB0aCkgLSAoc2xpY2UuY29udGVudC5zaXplIC0gc2xpY2Uub3BlbkVuZCk7XG4gICAgICAgIC8vIFNjYW4gb3ZlciB0aGUgZnJhZ21lbnQsIGZpdHRpbmcgYXMgbWFueSBjaGlsZCBub2RlcyBhc1xuICAgICAgICAvLyBwb3NzaWJsZS5cbiAgICAgICAgd2hpbGUgKHRha2VuIDwgZnJhZ21lbnQuY2hpbGRDb3VudCkge1xuICAgICAgICAgICAgbGV0IG5leHQgPSBmcmFnbWVudC5jaGlsZCh0YWtlbiksIG1hdGNoZXMgPSBtYXRjaC5tYXRjaFR5cGUobmV4dC50eXBlKTtcbiAgICAgICAgICAgIGlmICghbWF0Y2hlcylcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIHRha2VuKys7XG4gICAgICAgICAgICBpZiAodGFrZW4gPiAxIHx8IG9wZW5TdGFydCA9PSAwIHx8IG5leHQuY29udGVudC5zaXplKSB7IC8vIERyb3AgZW1wdHkgb3BlbiBub2Rlc1xuICAgICAgICAgICAgICAgIG1hdGNoID0gbWF0Y2hlcztcbiAgICAgICAgICAgICAgICBhZGQucHVzaChjbG9zZU5vZGVTdGFydChuZXh0Lm1hcmsodHlwZS5hbGxvd2VkTWFya3MobmV4dC5tYXJrcykpLCB0YWtlbiA9PSAxID8gb3BlblN0YXJ0IDogMCwgdGFrZW4gPT0gZnJhZ21lbnQuY2hpbGRDb3VudCA/IG9wZW5FbmRDb3VudCA6IC0xKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHRvRW5kID0gdGFrZW4gPT0gZnJhZ21lbnQuY2hpbGRDb3VudDtcbiAgICAgICAgaWYgKCF0b0VuZClcbiAgICAgICAgICAgIG9wZW5FbmRDb3VudCA9IC0xO1xuICAgICAgICB0aGlzLnBsYWNlZCA9IGFkZFRvRnJhZ21lbnQodGhpcy5wbGFjZWQsIGZyb250aWVyRGVwdGgsIEZyYWdtZW50LmZyb20oYWRkKSk7XG4gICAgICAgIHRoaXMuZnJvbnRpZXJbZnJvbnRpZXJEZXB0aF0ubWF0Y2ggPSBtYXRjaDtcbiAgICAgICAgLy8gSWYgdGhlIHBhcmVudCB0eXBlcyBtYXRjaCwgYW5kIHRoZSBlbnRpcmUgbm9kZSB3YXMgbW92ZWQsIGFuZFxuICAgICAgICAvLyBpdCdzIG5vdCBvcGVuLCBjbG9zZSB0aGlzIGZyb250aWVyIG5vZGUgcmlnaHQgYXdheS5cbiAgICAgICAgaWYgKHRvRW5kICYmIG9wZW5FbmRDb3VudCA8IDAgJiYgcGFyZW50ICYmIHBhcmVudC50eXBlID09IHRoaXMuZnJvbnRpZXJbdGhpcy5kZXB0aF0udHlwZSAmJiB0aGlzLmZyb250aWVyLmxlbmd0aCA+IDEpXG4gICAgICAgICAgICB0aGlzLmNsb3NlRnJvbnRpZXJOb2RlKCk7XG4gICAgICAgIC8vIEFkZCBuZXcgZnJvbnRpZXIgbm9kZXMgZm9yIGFueSBvcGVuIG5vZGVzIGF0IHRoZSBlbmQuXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBjdXIgPSBmcmFnbWVudDsgaSA8IG9wZW5FbmRDb3VudDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgbm9kZSA9IGN1ci5sYXN0Q2hpbGQ7XG4gICAgICAgICAgICB0aGlzLmZyb250aWVyLnB1c2goeyB0eXBlOiBub2RlLnR5cGUsIG1hdGNoOiBub2RlLmNvbnRlbnRNYXRjaEF0KG5vZGUuY2hpbGRDb3VudCkgfSk7XG4gICAgICAgICAgICBjdXIgPSBub2RlLmNvbnRlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVXBkYXRlIGB0aGlzLnVucGxhY2VkYC4gRHJvcCB0aGUgZW50aXJlIG5vZGUgZnJvbSB3aGljaCB3ZVxuICAgICAgICAvLyBwbGFjZWQgaXQgd2UgZ290IHRvIGl0cyBlbmQsIG90aGVyd2lzZSBqdXN0IGRyb3AgdGhlIHBsYWNlZFxuICAgICAgICAvLyBub2Rlcy5cbiAgICAgICAgdGhpcy51bnBsYWNlZCA9ICF0b0VuZCA/IG5ldyBTbGljZShkcm9wRnJvbUZyYWdtZW50KHNsaWNlLmNvbnRlbnQsIHNsaWNlRGVwdGgsIHRha2VuKSwgc2xpY2Uub3BlblN0YXJ0LCBzbGljZS5vcGVuRW5kKVxuICAgICAgICAgICAgOiBzbGljZURlcHRoID09IDAgPyBTbGljZS5lbXB0eVxuICAgICAgICAgICAgICAgIDogbmV3IFNsaWNlKGRyb3BGcm9tRnJhZ21lbnQoc2xpY2UuY29udGVudCwgc2xpY2VEZXB0aCAtIDEsIDEpLCBzbGljZURlcHRoIC0gMSwgb3BlbkVuZENvdW50IDwgMCA/IHNsaWNlLm9wZW5FbmQgOiBzbGljZURlcHRoIC0gMSk7XG4gICAgfVxuICAgIG11c3RNb3ZlSW5saW5lKCkge1xuICAgICAgICBpZiAoIXRoaXMuJHRvLnBhcmVudC5pc1RleHRibG9jaylcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgbGV0IHRvcCA9IHRoaXMuZnJvbnRpZXJbdGhpcy5kZXB0aF0sIGxldmVsO1xuICAgICAgICBpZiAoIXRvcC50eXBlLmlzVGV4dGJsb2NrIHx8ICFjb250ZW50QWZ0ZXJGaXRzKHRoaXMuJHRvLCB0aGlzLiR0by5kZXB0aCwgdG9wLnR5cGUsIHRvcC5tYXRjaCwgZmFsc2UpIHx8XG4gICAgICAgICAgICAodGhpcy4kdG8uZGVwdGggPT0gdGhpcy5kZXB0aCAmJiAobGV2ZWwgPSB0aGlzLmZpbmRDbG9zZUxldmVsKHRoaXMuJHRvKSkgJiYgbGV2ZWwuZGVwdGggPT0gdGhpcy5kZXB0aCkpXG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIGxldCB7IGRlcHRoIH0gPSB0aGlzLiR0bywgYWZ0ZXIgPSB0aGlzLiR0by5hZnRlcihkZXB0aCk7XG4gICAgICAgIHdoaWxlIChkZXB0aCA+IDEgJiYgYWZ0ZXIgPT0gdGhpcy4kdG8uZW5kKC0tZGVwdGgpKVxuICAgICAgICAgICAgKythZnRlcjtcbiAgICAgICAgcmV0dXJuIGFmdGVyO1xuICAgIH1cbiAgICBmaW5kQ2xvc2VMZXZlbCgkdG8pIHtcbiAgICAgICAgc2NhbjogZm9yIChsZXQgaSA9IE1hdGgubWluKHRoaXMuZGVwdGgsICR0by5kZXB0aCk7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICBsZXQgeyBtYXRjaCwgdHlwZSB9ID0gdGhpcy5mcm9udGllcltpXTtcbiAgICAgICAgICAgIGxldCBkcm9wSW5uZXIgPSBpIDwgJHRvLmRlcHRoICYmICR0by5lbmQoaSArIDEpID09ICR0by5wb3MgKyAoJHRvLmRlcHRoIC0gKGkgKyAxKSk7XG4gICAgICAgICAgICBsZXQgZml0ID0gY29udGVudEFmdGVyRml0cygkdG8sIGksIHR5cGUsIG1hdGNoLCBkcm9wSW5uZXIpO1xuICAgICAgICAgICAgaWYgKCFmaXQpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICBmb3IgKGxldCBkID0gaSAtIDE7IGQgPj0gMDsgZC0tKSB7XG4gICAgICAgICAgICAgICAgbGV0IHsgbWF0Y2gsIHR5cGUgfSA9IHRoaXMuZnJvbnRpZXJbZF07XG4gICAgICAgICAgICAgICAgbGV0IG1hdGNoZXMgPSBjb250ZW50QWZ0ZXJGaXRzKCR0bywgZCwgdHlwZSwgbWF0Y2gsIHRydWUpO1xuICAgICAgICAgICAgICAgIGlmICghbWF0Y2hlcyB8fCBtYXRjaGVzLmNoaWxkQ291bnQpXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlIHNjYW47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4geyBkZXB0aDogaSwgZml0LCBtb3ZlOiBkcm9wSW5uZXIgPyAkdG8uZG9jLnJlc29sdmUoJHRvLmFmdGVyKGkgKyAxKSkgOiAkdG8gfTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjbG9zZSgkdG8pIHtcbiAgICAgICAgbGV0IGNsb3NlID0gdGhpcy5maW5kQ2xvc2VMZXZlbCgkdG8pO1xuICAgICAgICBpZiAoIWNsb3NlKVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIHdoaWxlICh0aGlzLmRlcHRoID4gY2xvc2UuZGVwdGgpXG4gICAgICAgICAgICB0aGlzLmNsb3NlRnJvbnRpZXJOb2RlKCk7XG4gICAgICAgIGlmIChjbG9zZS5maXQuY2hpbGRDb3VudClcbiAgICAgICAgICAgIHRoaXMucGxhY2VkID0gYWRkVG9GcmFnbWVudCh0aGlzLnBsYWNlZCwgY2xvc2UuZGVwdGgsIGNsb3NlLmZpdCk7XG4gICAgICAgICR0byA9IGNsb3NlLm1vdmU7XG4gICAgICAgIGZvciAobGV0IGQgPSBjbG9zZS5kZXB0aCArIDE7IGQgPD0gJHRvLmRlcHRoOyBkKyspIHtcbiAgICAgICAgICAgIGxldCBub2RlID0gJHRvLm5vZGUoZCksIGFkZCA9IG5vZGUudHlwZS5jb250ZW50TWF0Y2guZmlsbEJlZm9yZShub2RlLmNvbnRlbnQsIHRydWUsICR0by5pbmRleChkKSk7XG4gICAgICAgICAgICB0aGlzLm9wZW5Gcm9udGllck5vZGUobm9kZS50eXBlLCBub2RlLmF0dHJzLCBhZGQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAkdG87XG4gICAgfVxuICAgIG9wZW5Gcm9udGllck5vZGUodHlwZSwgYXR0cnMgPSBudWxsLCBjb250ZW50KSB7XG4gICAgICAgIGxldCB0b3AgPSB0aGlzLmZyb250aWVyW3RoaXMuZGVwdGhdO1xuICAgICAgICB0b3AubWF0Y2ggPSB0b3AubWF0Y2gubWF0Y2hUeXBlKHR5cGUpO1xuICAgICAgICB0aGlzLnBsYWNlZCA9IGFkZFRvRnJhZ21lbnQodGhpcy5wbGFjZWQsIHRoaXMuZGVwdGgsIEZyYWdtZW50LmZyb20odHlwZS5jcmVhdGUoYXR0cnMsIGNvbnRlbnQpKSk7XG4gICAgICAgIHRoaXMuZnJvbnRpZXIucHVzaCh7IHR5cGUsIG1hdGNoOiB0eXBlLmNvbnRlbnRNYXRjaCB9KTtcbiAgICB9XG4gICAgY2xvc2VGcm9udGllck5vZGUoKSB7XG4gICAgICAgIGxldCBvcGVuID0gdGhpcy5mcm9udGllci5wb3AoKTtcbiAgICAgICAgbGV0IGFkZCA9IG9wZW4ubWF0Y2guZmlsbEJlZm9yZShGcmFnbWVudC5lbXB0eSwgdHJ1ZSk7XG4gICAgICAgIGlmIChhZGQuY2hpbGRDb3VudClcbiAgICAgICAgICAgIHRoaXMucGxhY2VkID0gYWRkVG9GcmFnbWVudCh0aGlzLnBsYWNlZCwgdGhpcy5mcm9udGllci5sZW5ndGgsIGFkZCk7XG4gICAgfVxufVxuZnVuY3Rpb24gZHJvcEZyb21GcmFnbWVudChmcmFnbWVudCwgZGVwdGgsIGNvdW50KSB7XG4gICAgaWYgKGRlcHRoID09IDApXG4gICAgICAgIHJldHVybiBmcmFnbWVudC5jdXRCeUluZGV4KGNvdW50LCBmcmFnbWVudC5jaGlsZENvdW50KTtcbiAgICByZXR1cm4gZnJhZ21lbnQucmVwbGFjZUNoaWxkKDAsIGZyYWdtZW50LmZpcnN0Q2hpbGQuY29weShkcm9wRnJvbUZyYWdtZW50KGZyYWdtZW50LmZpcnN0Q2hpbGQuY29udGVudCwgZGVwdGggLSAxLCBjb3VudCkpKTtcbn1cbmZ1bmN0aW9uIGFkZFRvRnJhZ21lbnQoZnJhZ21lbnQsIGRlcHRoLCBjb250ZW50KSB7XG4gICAgaWYgKGRlcHRoID09IDApXG4gICAgICAgIHJldHVybiBmcmFnbWVudC5hcHBlbmQoY29udGVudCk7XG4gICAgcmV0dXJuIGZyYWdtZW50LnJlcGxhY2VDaGlsZChmcmFnbWVudC5jaGlsZENvdW50IC0gMSwgZnJhZ21lbnQubGFzdENoaWxkLmNvcHkoYWRkVG9GcmFnbWVudChmcmFnbWVudC5sYXN0Q2hpbGQuY29udGVudCwgZGVwdGggLSAxLCBjb250ZW50KSkpO1xufVxuZnVuY3Rpb24gY29udGVudEF0KGZyYWdtZW50LCBkZXB0aCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGVwdGg7IGkrKylcbiAgICAgICAgZnJhZ21lbnQgPSBmcmFnbWVudC5maXJzdENoaWxkLmNvbnRlbnQ7XG4gICAgcmV0dXJuIGZyYWdtZW50O1xufVxuZnVuY3Rpb24gY2xvc2VOb2RlU3RhcnQobm9kZSwgb3BlblN0YXJ0LCBvcGVuRW5kKSB7XG4gICAgaWYgKG9wZW5TdGFydCA8PSAwKVxuICAgICAgICByZXR1cm4gbm9kZTtcbiAgICBsZXQgZnJhZyA9IG5vZGUuY29udGVudDtcbiAgICBpZiAob3BlblN0YXJ0ID4gMSlcbiAgICAgICAgZnJhZyA9IGZyYWcucmVwbGFjZUNoaWxkKDAsIGNsb3NlTm9kZVN0YXJ0KGZyYWcuZmlyc3RDaGlsZCwgb3BlblN0YXJ0IC0gMSwgZnJhZy5jaGlsZENvdW50ID09IDEgPyBvcGVuRW5kIC0gMSA6IDApKTtcbiAgICBpZiAob3BlblN0YXJ0ID4gMCkge1xuICAgICAgICBmcmFnID0gbm9kZS50eXBlLmNvbnRlbnRNYXRjaC5maWxsQmVmb3JlKGZyYWcpLmFwcGVuZChmcmFnKTtcbiAgICAgICAgaWYgKG9wZW5FbmQgPD0gMClcbiAgICAgICAgICAgIGZyYWcgPSBmcmFnLmFwcGVuZChub2RlLnR5cGUuY29udGVudE1hdGNoLm1hdGNoRnJhZ21lbnQoZnJhZykuZmlsbEJlZm9yZShGcmFnbWVudC5lbXB0eSwgdHJ1ZSkpO1xuICAgIH1cbiAgICByZXR1cm4gbm9kZS5jb3B5KGZyYWcpO1xufVxuZnVuY3Rpb24gY29udGVudEFmdGVyRml0cygkdG8sIGRlcHRoLCB0eXBlLCBtYXRjaCwgb3Blbikge1xuICAgIGxldCBub2RlID0gJHRvLm5vZGUoZGVwdGgpLCBpbmRleCA9IG9wZW4gPyAkdG8uaW5kZXhBZnRlcihkZXB0aCkgOiAkdG8uaW5kZXgoZGVwdGgpO1xuICAgIGlmIChpbmRleCA9PSBub2RlLmNoaWxkQ291bnQgJiYgIXR5cGUuY29tcGF0aWJsZUNvbnRlbnQobm9kZS50eXBlKSlcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgbGV0IGZpdCA9IG1hdGNoLmZpbGxCZWZvcmUobm9kZS5jb250ZW50LCB0cnVlLCBpbmRleCk7XG4gICAgcmV0dXJuIGZpdCAmJiAhaW52YWxpZE1hcmtzKHR5cGUsIG5vZGUuY29udGVudCwgaW5kZXgpID8gZml0IDogbnVsbDtcbn1cbmZ1bmN0aW9uIGludmFsaWRNYXJrcyh0eXBlLCBmcmFnbWVudCwgc3RhcnQpIHtcbiAgICBmb3IgKGxldCBpID0gc3RhcnQ7IGkgPCBmcmFnbWVudC5jaGlsZENvdW50OyBpKyspXG4gICAgICAgIGlmICghdHlwZS5hbGxvd3NNYXJrcyhmcmFnbWVudC5jaGlsZChpKS5tYXJrcykpXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBkZWZpbmVzQ29udGVudCh0eXBlKSB7XG4gICAgcmV0dXJuIHR5cGUuc3BlYy5kZWZpbmluZyB8fCB0eXBlLnNwZWMuZGVmaW5pbmdGb3JDb250ZW50O1xufVxuZnVuY3Rpb24gcmVwbGFjZVJhbmdlKHRyLCBmcm9tLCB0bywgc2xpY2UpIHtcbiAgICBpZiAoIXNsaWNlLnNpemUpXG4gICAgICAgIHJldHVybiB0ci5kZWxldGVSYW5nZShmcm9tLCB0byk7XG4gICAgbGV0ICRmcm9tID0gdHIuZG9jLnJlc29sdmUoZnJvbSksICR0byA9IHRyLmRvYy5yZXNvbHZlKHRvKTtcbiAgICBpZiAoZml0c1RyaXZpYWxseSgkZnJvbSwgJHRvLCBzbGljZSkpXG4gICAgICAgIHJldHVybiB0ci5zdGVwKG5ldyBSZXBsYWNlU3RlcChmcm9tLCB0bywgc2xpY2UpKTtcbiAgICBsZXQgdGFyZ2V0RGVwdGhzID0gY292ZXJlZERlcHRocygkZnJvbSwgdHIuZG9jLnJlc29sdmUodG8pKTtcbiAgICAvLyBDYW4ndCByZXBsYWNlIHRoZSB3aG9sZSBkb2N1bWVudCwgc28gcmVtb3ZlIDAgaWYgaXQncyBwcmVzZW50XG4gICAgaWYgKHRhcmdldERlcHRoc1t0YXJnZXREZXB0aHMubGVuZ3RoIC0gMV0gPT0gMClcbiAgICAgICAgdGFyZ2V0RGVwdGhzLnBvcCgpO1xuICAgIC8vIE5lZ2F0aXZlIG51bWJlcnMgcmVwcmVzZW50IG5vdCBleHBhbnNpb24gb3ZlciB0aGUgd2hvbGUgbm9kZSBhdFxuICAgIC8vIHRoYXQgZGVwdGgsIGJ1dCByZXBsYWNpbmcgZnJvbSAkZnJvbS5iZWZvcmUoLUQpIHRvICR0by5wb3MuXG4gICAgbGV0IHByZWZlcnJlZFRhcmdldCA9IC0oJGZyb20uZGVwdGggKyAxKTtcbiAgICB0YXJnZXREZXB0aHMudW5zaGlmdChwcmVmZXJyZWRUYXJnZXQpO1xuICAgIC8vIFRoaXMgbG9vcCBwaWNrcyBhIHByZWZlcnJlZCB0YXJnZXQgZGVwdGgsIGlmIG9uZSBvZiB0aGUgY292ZXJpbmdcbiAgICAvLyBkZXB0aHMgaXMgbm90IG91dHNpZGUgb2YgYSBkZWZpbmluZyBub2RlLCBhbmQgYWRkcyBuZWdhdGl2ZVxuICAgIC8vIGRlcHRocyBmb3IgYW55IGRlcHRoIHRoYXQgaGFzICRmcm9tIGF0IGl0cyBzdGFydCBhbmQgZG9lcyBub3RcbiAgICAvLyBjcm9zcyBhIGRlZmluaW5nIG5vZGUuXG4gICAgZm9yIChsZXQgZCA9ICRmcm9tLmRlcHRoLCBwb3MgPSAkZnJvbS5wb3MgLSAxOyBkID4gMDsgZC0tLCBwb3MtLSkge1xuICAgICAgICBsZXQgc3BlYyA9ICRmcm9tLm5vZGUoZCkudHlwZS5zcGVjO1xuICAgICAgICBpZiAoc3BlYy5kZWZpbmluZyB8fCBzcGVjLmRlZmluaW5nQXNDb250ZXh0IHx8IHNwZWMuaXNvbGF0aW5nKVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGlmICh0YXJnZXREZXB0aHMuaW5kZXhPZihkKSA+IC0xKVxuICAgICAgICAgICAgcHJlZmVycmVkVGFyZ2V0ID0gZDtcbiAgICAgICAgZWxzZSBpZiAoJGZyb20uYmVmb3JlKGQpID09IHBvcylcbiAgICAgICAgICAgIHRhcmdldERlcHRocy5zcGxpY2UoMSwgMCwgLWQpO1xuICAgIH1cbiAgICAvLyBUcnkgdG8gZml0IGVhY2ggcG9zc2libGUgZGVwdGggb2YgdGhlIHNsaWNlIGludG8gZWFjaCBwb3NzaWJsZVxuICAgIC8vIHRhcmdldCBkZXB0aCwgc3RhcnRpbmcgd2l0aCB0aGUgcHJlZmVycmVkIGRlcHRocy5cbiAgICBsZXQgcHJlZmVycmVkVGFyZ2V0SW5kZXggPSB0YXJnZXREZXB0aHMuaW5kZXhPZihwcmVmZXJyZWRUYXJnZXQpO1xuICAgIGxldCBsZWZ0Tm9kZXMgPSBbXSwgcHJlZmVycmVkRGVwdGggPSBzbGljZS5vcGVuU3RhcnQ7XG4gICAgZm9yIChsZXQgY29udGVudCA9IHNsaWNlLmNvbnRlbnQsIGkgPSAwOzsgaSsrKSB7XG4gICAgICAgIGxldCBub2RlID0gY29udGVudC5maXJzdENoaWxkO1xuICAgICAgICBsZWZ0Tm9kZXMucHVzaChub2RlKTtcbiAgICAgICAgaWYgKGkgPT0gc2xpY2Uub3BlblN0YXJ0KVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNvbnRlbnQgPSBub2RlLmNvbnRlbnQ7XG4gICAgfVxuICAgIC8vIEJhY2sgdXAgcHJlZmVycmVkRGVwdGggdG8gY292ZXIgZGVmaW5pbmcgdGV4dGJsb2NrcyBkaXJlY3RseVxuICAgIC8vIGFib3ZlIGl0LCBwb3NzaWJseSBza2lwcGluZyBhIG5vbi1kZWZpbmluZyB0ZXh0YmxvY2suXG4gICAgZm9yIChsZXQgZCA9IHByZWZlcnJlZERlcHRoIC0gMTsgZCA+PSAwOyBkLS0pIHtcbiAgICAgICAgbGV0IHR5cGUgPSBsZWZ0Tm9kZXNbZF0udHlwZSwgZGVmID0gZGVmaW5lc0NvbnRlbnQodHlwZSk7XG4gICAgICAgIGlmIChkZWYgJiYgJGZyb20ubm9kZShwcmVmZXJyZWRUYXJnZXRJbmRleCkudHlwZSAhPSB0eXBlKVxuICAgICAgICAgICAgcHJlZmVycmVkRGVwdGggPSBkO1xuICAgICAgICBlbHNlIGlmIChkZWYgfHwgIXR5cGUuaXNUZXh0YmxvY2spXG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG4gICAgZm9yIChsZXQgaiA9IHNsaWNlLm9wZW5TdGFydDsgaiA+PSAwOyBqLS0pIHtcbiAgICAgICAgbGV0IG9wZW5EZXB0aCA9IChqICsgcHJlZmVycmVkRGVwdGggKyAxKSAlIChzbGljZS5vcGVuU3RhcnQgKyAxKTtcbiAgICAgICAgbGV0IGluc2VydCA9IGxlZnROb2Rlc1tvcGVuRGVwdGhdO1xuICAgICAgICBpZiAoIWluc2VydClcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRhcmdldERlcHRocy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgLy8gTG9vcCBvdmVyIHBvc3NpYmxlIGV4cGFuc2lvbiBsZXZlbHMsIHN0YXJ0aW5nIHdpdGggdGhlXG4gICAgICAgICAgICAvLyBwcmVmZXJyZWQgb25lXG4gICAgICAgICAgICBsZXQgdGFyZ2V0RGVwdGggPSB0YXJnZXREZXB0aHNbKGkgKyBwcmVmZXJyZWRUYXJnZXRJbmRleCkgJSB0YXJnZXREZXB0aHMubGVuZ3RoXSwgZXhwYW5kID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmICh0YXJnZXREZXB0aCA8IDApIHtcbiAgICAgICAgICAgICAgICBleHBhbmQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0YXJnZXREZXB0aCA9IC10YXJnZXREZXB0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBwYXJlbnQgPSAkZnJvbS5ub2RlKHRhcmdldERlcHRoIC0gMSksIGluZGV4ID0gJGZyb20uaW5kZXgodGFyZ2V0RGVwdGggLSAxKTtcbiAgICAgICAgICAgIGlmIChwYXJlbnQuY2FuUmVwbGFjZVdpdGgoaW5kZXgsIGluZGV4LCBpbnNlcnQudHlwZSwgaW5zZXJ0Lm1hcmtzKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gdHIucmVwbGFjZSgkZnJvbS5iZWZvcmUodGFyZ2V0RGVwdGgpLCBleHBhbmQgPyAkdG8uYWZ0ZXIodGFyZ2V0RGVwdGgpIDogdG8sIG5ldyBTbGljZShjbG9zZUZyYWdtZW50KHNsaWNlLmNvbnRlbnQsIDAsIHNsaWNlLm9wZW5TdGFydCwgb3BlbkRlcHRoKSwgb3BlbkRlcHRoLCBzbGljZS5vcGVuRW5kKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbGV0IHN0YXJ0U3RlcHMgPSB0ci5zdGVwcy5sZW5ndGg7XG4gICAgZm9yIChsZXQgaSA9IHRhcmdldERlcHRocy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICB0ci5yZXBsYWNlKGZyb20sIHRvLCBzbGljZSk7XG4gICAgICAgIGlmICh0ci5zdGVwcy5sZW5ndGggPiBzdGFydFN0ZXBzKVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGxldCBkZXB0aCA9IHRhcmdldERlcHRoc1tpXTtcbiAgICAgICAgaWYgKGRlcHRoIDwgMClcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBmcm9tID0gJGZyb20uYmVmb3JlKGRlcHRoKTtcbiAgICAgICAgdG8gPSAkdG8uYWZ0ZXIoZGVwdGgpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNsb3NlRnJhZ21lbnQoZnJhZ21lbnQsIGRlcHRoLCBvbGRPcGVuLCBuZXdPcGVuLCBwYXJlbnQpIHtcbiAgICBpZiAoZGVwdGggPCBvbGRPcGVuKSB7XG4gICAgICAgIGxldCBmaXJzdCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG4gICAgICAgIGZyYWdtZW50ID0gZnJhZ21lbnQucmVwbGFjZUNoaWxkKDAsIGZpcnN0LmNvcHkoY2xvc2VGcmFnbWVudChmaXJzdC5jb250ZW50LCBkZXB0aCArIDEsIG9sZE9wZW4sIG5ld09wZW4sIGZpcnN0KSkpO1xuICAgIH1cbiAgICBpZiAoZGVwdGggPiBuZXdPcGVuKSB7XG4gICAgICAgIGxldCBtYXRjaCA9IHBhcmVudC5jb250ZW50TWF0Y2hBdCgwKTtcbiAgICAgICAgbGV0IHN0YXJ0ID0gbWF0Y2guZmlsbEJlZm9yZShmcmFnbWVudCkuYXBwZW5kKGZyYWdtZW50KTtcbiAgICAgICAgZnJhZ21lbnQgPSBzdGFydC5hcHBlbmQobWF0Y2gubWF0Y2hGcmFnbWVudChzdGFydCkuZmlsbEJlZm9yZShGcmFnbWVudC5lbXB0eSwgdHJ1ZSkpO1xuICAgIH1cbiAgICByZXR1cm4gZnJhZ21lbnQ7XG59XG5mdW5jdGlvbiByZXBsYWNlUmFuZ2VXaXRoKHRyLCBmcm9tLCB0bywgbm9kZSkge1xuICAgIGlmICghbm9kZS5pc0lubGluZSAmJiBmcm9tID09IHRvICYmIHRyLmRvYy5yZXNvbHZlKGZyb20pLnBhcmVudC5jb250ZW50LnNpemUpIHtcbiAgICAgICAgbGV0IHBvaW50ID0gaW5zZXJ0UG9pbnQodHIuZG9jLCBmcm9tLCBub2RlLnR5cGUpO1xuICAgICAgICBpZiAocG9pbnQgIT0gbnVsbClcbiAgICAgICAgICAgIGZyb20gPSB0byA9IHBvaW50O1xuICAgIH1cbiAgICB0ci5yZXBsYWNlUmFuZ2UoZnJvbSwgdG8sIG5ldyBTbGljZShGcmFnbWVudC5mcm9tKG5vZGUpLCAwLCAwKSk7XG59XG5mdW5jdGlvbiBkZWxldGVSYW5nZSh0ciwgZnJvbSwgdG8pIHtcbiAgICBsZXQgJGZyb20gPSB0ci5kb2MucmVzb2x2ZShmcm9tKSwgJHRvID0gdHIuZG9jLnJlc29sdmUodG8pO1xuICAgIGxldCBjb3ZlcmVkID0gY292ZXJlZERlcHRocygkZnJvbSwgJHRvKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdmVyZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IGRlcHRoID0gY292ZXJlZFtpXSwgbGFzdCA9IGkgPT0gY292ZXJlZC5sZW5ndGggLSAxO1xuICAgICAgICBpZiAoKGxhc3QgJiYgZGVwdGggPT0gMCkgfHwgJGZyb20ubm9kZShkZXB0aCkudHlwZS5jb250ZW50TWF0Y2gudmFsaWRFbmQpXG4gICAgICAgICAgICByZXR1cm4gdHIuZGVsZXRlKCRmcm9tLnN0YXJ0KGRlcHRoKSwgJHRvLmVuZChkZXB0aCkpO1xuICAgICAgICBpZiAoZGVwdGggPiAwICYmIChsYXN0IHx8ICRmcm9tLm5vZGUoZGVwdGggLSAxKS5jYW5SZXBsYWNlKCRmcm9tLmluZGV4KGRlcHRoIC0gMSksICR0by5pbmRleEFmdGVyKGRlcHRoIC0gMSkpKSlcbiAgICAgICAgICAgIHJldHVybiB0ci5kZWxldGUoJGZyb20uYmVmb3JlKGRlcHRoKSwgJHRvLmFmdGVyKGRlcHRoKSk7XG4gICAgfVxuICAgIGZvciAobGV0IGQgPSAxOyBkIDw9ICRmcm9tLmRlcHRoICYmIGQgPD0gJHRvLmRlcHRoOyBkKyspIHtcbiAgICAgICAgaWYgKGZyb20gLSAkZnJvbS5zdGFydChkKSA9PSAkZnJvbS5kZXB0aCAtIGQgJiYgdG8gPiAkZnJvbS5lbmQoZCkgJiYgJHRvLmVuZChkKSAtIHRvICE9ICR0by5kZXB0aCAtIGQpXG4gICAgICAgICAgICByZXR1cm4gdHIuZGVsZXRlKCRmcm9tLmJlZm9yZShkKSwgdG8pO1xuICAgIH1cbiAgICB0ci5kZWxldGUoZnJvbSwgdG8pO1xufVxuLy8gUmV0dXJucyBhbiBhcnJheSBvZiBhbGwgZGVwdGhzIGZvciB3aGljaCAkZnJvbSAtICR0byBzcGFucyB0aGVcbi8vIHdob2xlIGNvbnRlbnQgb2YgdGhlIG5vZGVzIGF0IHRoYXQgZGVwdGguXG5mdW5jdGlvbiBjb3ZlcmVkRGVwdGhzKCRmcm9tLCAkdG8pIHtcbiAgICBsZXQgcmVzdWx0ID0gW10sIG1pbkRlcHRoID0gTWF0aC5taW4oJGZyb20uZGVwdGgsICR0by5kZXB0aCk7XG4gICAgZm9yIChsZXQgZCA9IG1pbkRlcHRoOyBkID49IDA7IGQtLSkge1xuICAgICAgICBsZXQgc3RhcnQgPSAkZnJvbS5zdGFydChkKTtcbiAgICAgICAgaWYgKHN0YXJ0IDwgJGZyb20ucG9zIC0gKCRmcm9tLmRlcHRoIC0gZCkgfHxcbiAgICAgICAgICAgICR0by5lbmQoZCkgPiAkdG8ucG9zICsgKCR0by5kZXB0aCAtIGQpIHx8XG4gICAgICAgICAgICAkZnJvbS5ub2RlKGQpLnR5cGUuc3BlYy5pc29sYXRpbmcgfHxcbiAgICAgICAgICAgICR0by5ub2RlKGQpLnR5cGUuc3BlYy5pc29sYXRpbmcpXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgaWYgKHN0YXJ0ID09ICR0by5zdGFydChkKSB8fFxuICAgICAgICAgICAgKGQgPT0gJGZyb20uZGVwdGggJiYgZCA9PSAkdG8uZGVwdGggJiYgJGZyb20ucGFyZW50LmlubGluZUNvbnRlbnQgJiYgJHRvLnBhcmVudC5pbmxpbmVDb250ZW50ICYmXG4gICAgICAgICAgICAgICAgZCAmJiAkdG8uc3RhcnQoZCAtIDEpID09IHN0YXJ0IC0gMSkpXG4gICAgICAgICAgICByZXN1bHQucHVzaChkKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG5AaW50ZXJuYWxcbiovXG5sZXQgVHJhbnNmb3JtRXJyb3IgPSBjbGFzcyBleHRlbmRzIEVycm9yIHtcbn07XG5UcmFuc2Zvcm1FcnJvciA9IGZ1bmN0aW9uIFRyYW5zZm9ybUVycm9yKG1lc3NhZ2UpIHtcbiAgICBsZXQgZXJyID0gRXJyb3IuY2FsbCh0aGlzLCBtZXNzYWdlKTtcbiAgICBlcnIuX19wcm90b19fID0gVHJhbnNmb3JtRXJyb3IucHJvdG90eXBlO1xuICAgIHJldHVybiBlcnI7XG59O1xuVHJhbnNmb3JtRXJyb3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShFcnJvci5wcm90b3R5cGUpO1xuVHJhbnNmb3JtRXJyb3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVHJhbnNmb3JtRXJyb3I7XG5UcmFuc2Zvcm1FcnJvci5wcm90b3R5cGUubmFtZSA9IFwiVHJhbnNmb3JtRXJyb3JcIjtcbi8qKlxuQWJzdHJhY3Rpb24gdG8gYnVpbGQgdXAgYW5kIHRyYWNrIGFuIGFycmF5IG9mXG5bc3RlcHNdKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyN0cmFuc2Zvcm0uU3RlcCkgcmVwcmVzZW50aW5nIGEgZG9jdW1lbnQgdHJhbnNmb3JtYXRpb24uXG5cbk1vc3QgdHJhbnNmb3JtaW5nIG1ldGhvZHMgcmV0dXJuIHRoZSBgVHJhbnNmb3JtYCBvYmplY3QgaXRzZWxmLCBzb1xudGhhdCB0aGV5IGNhbiBiZSBjaGFpbmVkLlxuKi9cbmNsYXNzIFRyYW5zZm9ybSB7XG4gICAgLyoqXG4gICAgQ3JlYXRlIGEgdHJhbnNmb3JtIHRoYXQgc3RhcnRzIHdpdGggdGhlIGdpdmVuIGRvY3VtZW50LlxuICAgICovXG4gICAgY29uc3RydWN0b3IoXG4gICAgLyoqXG4gICAgVGhlIGN1cnJlbnQgZG9jdW1lbnQgKHRoZSByZXN1bHQgb2YgYXBwbHlpbmcgdGhlIHN0ZXBzIGluIHRoZVxuICAgIHRyYW5zZm9ybSkuXG4gICAgKi9cbiAgICBkb2MpIHtcbiAgICAgICAgdGhpcy5kb2MgPSBkb2M7XG4gICAgICAgIC8qKlxuICAgICAgICBUaGUgc3RlcHMgaW4gdGhpcyB0cmFuc2Zvcm0uXG4gICAgICAgICovXG4gICAgICAgIHRoaXMuc3RlcHMgPSBbXTtcbiAgICAgICAgLyoqXG4gICAgICAgIFRoZSBkb2N1bWVudHMgYmVmb3JlIGVhY2ggb2YgdGhlIHN0ZXBzLlxuICAgICAgICAqL1xuICAgICAgICB0aGlzLmRvY3MgPSBbXTtcbiAgICAgICAgLyoqXG4gICAgICAgIEEgbWFwcGluZyB3aXRoIHRoZSBtYXBzIGZvciBlYWNoIG9mIHRoZSBzdGVwcyBpbiB0aGlzIHRyYW5zZm9ybS5cbiAgICAgICAgKi9cbiAgICAgICAgdGhpcy5tYXBwaW5nID0gbmV3IE1hcHBpbmc7XG4gICAgfVxuICAgIC8qKlxuICAgIFRoZSBzdGFydGluZyBkb2N1bWVudC5cbiAgICAqL1xuICAgIGdldCBiZWZvcmUoKSB7IHJldHVybiB0aGlzLmRvY3MubGVuZ3RoID8gdGhpcy5kb2NzWzBdIDogdGhpcy5kb2M7IH1cbiAgICAvKipcbiAgICBBcHBseSBhIG5ldyBzdGVwIGluIHRoaXMgdHJhbnNmb3JtLCBzYXZpbmcgdGhlIHJlc3VsdC4gVGhyb3dzIGFuXG4gICAgZXJyb3Igd2hlbiB0aGUgc3RlcCBmYWlscy5cbiAgICAqL1xuICAgIHN0ZXAoc3RlcCkge1xuICAgICAgICBsZXQgcmVzdWx0ID0gdGhpcy5tYXliZVN0ZXAoc3RlcCk7XG4gICAgICAgIGlmIChyZXN1bHQuZmFpbGVkKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFRyYW5zZm9ybUVycm9yKHJlc3VsdC5mYWlsZWQpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgVHJ5IHRvIGFwcGx5IGEgc3RlcCBpbiB0aGlzIHRyYW5zZm9ybWF0aW9uLCBpZ25vcmluZyBpdCBpZiBpdFxuICAgIGZhaWxzLiBSZXR1cm5zIHRoZSBzdGVwIHJlc3VsdC5cbiAgICAqL1xuICAgIG1heWJlU3RlcChzdGVwKSB7XG4gICAgICAgIGxldCByZXN1bHQgPSBzdGVwLmFwcGx5KHRoaXMuZG9jKTtcbiAgICAgICAgaWYgKCFyZXN1bHQuZmFpbGVkKVxuICAgICAgICAgICAgdGhpcy5hZGRTdGVwKHN0ZXAsIHJlc3VsdC5kb2MpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICAvKipcbiAgICBUcnVlIHdoZW4gdGhlIGRvY3VtZW50IGhhcyBiZWVuIGNoYW5nZWQgKHdoZW4gdGhlcmUgYXJlIGFueVxuICAgIHN0ZXBzKS5cbiAgICAqL1xuICAgIGdldCBkb2NDaGFuZ2VkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdGVwcy5sZW5ndGggPiAwO1xuICAgIH1cbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIGFkZFN0ZXAoc3RlcCwgZG9jKSB7XG4gICAgICAgIHRoaXMuZG9jcy5wdXNoKHRoaXMuZG9jKTtcbiAgICAgICAgdGhpcy5zdGVwcy5wdXNoKHN0ZXApO1xuICAgICAgICB0aGlzLm1hcHBpbmcuYXBwZW5kTWFwKHN0ZXAuZ2V0TWFwKCkpO1xuICAgICAgICB0aGlzLmRvYyA9IGRvYztcbiAgICB9XG4gICAgLyoqXG4gICAgUmVwbGFjZSB0aGUgcGFydCBvZiB0aGUgZG9jdW1lbnQgYmV0d2VlbiBgZnJvbWAgYW5kIGB0b2Agd2l0aCB0aGVcbiAgICBnaXZlbiBgc2xpY2VgLlxuICAgICovXG4gICAgcmVwbGFjZShmcm9tLCB0byA9IGZyb20sIHNsaWNlID0gU2xpY2UuZW1wdHkpIHtcbiAgICAgICAgbGV0IHN0ZXAgPSByZXBsYWNlU3RlcCh0aGlzLmRvYywgZnJvbSwgdG8sIHNsaWNlKTtcbiAgICAgICAgaWYgKHN0ZXApXG4gICAgICAgICAgICB0aGlzLnN0ZXAoc3RlcCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICBSZXBsYWNlIHRoZSBnaXZlbiByYW5nZSB3aXRoIHRoZSBnaXZlbiBjb250ZW50LCB3aGljaCBtYXkgYmUgYVxuICAgIGZyYWdtZW50LCBub2RlLCBvciBhcnJheSBvZiBub2Rlcy5cbiAgICAqL1xuICAgIHJlcGxhY2VXaXRoKGZyb20sIHRvLCBjb250ZW50KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlcGxhY2UoZnJvbSwgdG8sIG5ldyBTbGljZShGcmFnbWVudC5mcm9tKGNvbnRlbnQpLCAwLCAwKSk7XG4gICAgfVxuICAgIC8qKlxuICAgIERlbGV0ZSB0aGUgY29udGVudCBiZXR3ZWVuIHRoZSBnaXZlbiBwb3NpdGlvbnMuXG4gICAgKi9cbiAgICBkZWxldGUoZnJvbSwgdG8pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVwbGFjZShmcm9tLCB0bywgU2xpY2UuZW1wdHkpO1xuICAgIH1cbiAgICAvKipcbiAgICBJbnNlcnQgdGhlIGdpdmVuIGNvbnRlbnQgYXQgdGhlIGdpdmVuIHBvc2l0aW9uLlxuICAgICovXG4gICAgaW5zZXJ0KHBvcywgY29udGVudCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXBsYWNlV2l0aChwb3MsIHBvcywgY29udGVudCk7XG4gICAgfVxuICAgIC8qKlxuICAgIFJlcGxhY2UgYSByYW5nZSBvZiB0aGUgZG9jdW1lbnQgd2l0aCBhIGdpdmVuIHNsaWNlLCB1c2luZ1xuICAgIGBmcm9tYCwgYHRvYCwgYW5kIHRoZSBzbGljZSdzXG4gICAgW2BvcGVuU3RhcnRgXShodHRwczovL3Byb3NlbWlycm9yLm5ldC9kb2NzL3JlZi8jbW9kZWwuU2xpY2Uub3BlblN0YXJ0KSBwcm9wZXJ0eSBhcyBoaW50cywgcmF0aGVyXG4gICAgdGhhbiBmaXhlZCBzdGFydCBhbmQgZW5kIHBvaW50cy4gVGhpcyBtZXRob2QgbWF5IGdyb3cgdGhlXG4gICAgcmVwbGFjZWQgYXJlYSBvciBjbG9zZSBvcGVuIG5vZGVzIGluIHRoZSBzbGljZSBpbiBvcmRlciB0byBnZXQgYVxuICAgIGZpdCB0aGF0IGlzIG1vcmUgaW4gbGluZSB3aXRoIFdZU0lXWUcgZXhwZWN0YXRpb25zLCBieSBkcm9wcGluZ1xuICAgIGZ1bGx5IGNvdmVyZWQgcGFyZW50IG5vZGVzIG9mIHRoZSByZXBsYWNlZCByZWdpb24gd2hlbiB0aGV5IGFyZVxuICAgIG1hcmtlZCBbbm9uLWRlZmluaW5nIGFzXG4gICAgY29udGV4dF0oaHR0cHM6Ly9wcm9zZW1pcnJvci5uZXQvZG9jcy9yZWYvI21vZGVsLk5vZGVTcGVjLmRlZmluaW5nQXNDb250ZXh0KSwgb3IgaW5jbHVkaW5nIGFuXG4gICAgb3BlbiBwYXJlbnQgbm9kZSBmcm9tIHRoZSBzbGljZSB0aGF0IF9pc18gbWFya2VkIGFzIFtkZWZpbmluZ1xuICAgIGl0cyBjb250ZW50XShodHRwczovL3Byb3NlbWlycm9yLm5ldC9kb2NzL3JlZi8jbW9kZWwuTm9kZVNwZWMuZGVmaW5pbmdGb3JDb250ZW50KS5cbiAgICBcbiAgICBUaGlzIGlzIHRoZSBtZXRob2QsIGZvciBleGFtcGxlLCB0byBoYW5kbGUgcGFzdGUuIFRoZSBzaW1pbGFyXG4gICAgW2ByZXBsYWNlYF0oaHR0cHM6Ly9wcm9zZW1pcnJvci5uZXQvZG9jcy9yZWYvI3RyYW5zZm9ybS5UcmFuc2Zvcm0ucmVwbGFjZSkgbWV0aG9kIGlzIGEgbW9yZVxuICAgIHByaW1pdGl2ZSB0b29sIHdoaWNoIHdpbGwgX25vdF8gbW92ZSB0aGUgc3RhcnQgYW5kIGVuZCBvZiBpdHMgZ2l2ZW5cbiAgICByYW5nZSwgYW5kIGlzIHVzZWZ1bCBpbiBzaXR1YXRpb25zIHdoZXJlIHlvdSBuZWVkIG1vcmUgcHJlY2lzZVxuICAgIGNvbnRyb2wgb3ZlciB3aGF0IGhhcHBlbnMuXG4gICAgKi9cbiAgICByZXBsYWNlUmFuZ2UoZnJvbSwgdG8sIHNsaWNlKSB7XG4gICAgICAgIHJlcGxhY2VSYW5nZSh0aGlzLCBmcm9tLCB0bywgc2xpY2UpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgUmVwbGFjZSB0aGUgZ2l2ZW4gcmFuZ2Ugd2l0aCBhIG5vZGUsIGJ1dCB1c2UgYGZyb21gIGFuZCBgdG9gIGFzXG4gICAgaGludHMsIHJhdGhlciB0aGFuIHByZWNpc2UgcG9zaXRpb25zLiBXaGVuIGZyb20gYW5kIHRvIGFyZSB0aGUgc2FtZVxuICAgIGFuZCBhcmUgYXQgdGhlIHN0YXJ0IG9yIGVuZCBvZiBhIHBhcmVudCBub2RlIGluIHdoaWNoIHRoZSBnaXZlblxuICAgIG5vZGUgZG9lc24ndCBmaXQsIHRoaXMgbWV0aG9kIG1heSBfbW92ZV8gdGhlbSBvdXQgdG93YXJkcyBhIHBhcmVudFxuICAgIHRoYXQgZG9lcyBhbGxvdyB0aGUgZ2l2ZW4gbm9kZSB0byBiZSBwbGFjZWQuIFdoZW4gdGhlIGdpdmVuIHJhbmdlXG4gICAgY29tcGxldGVseSBjb3ZlcnMgYSBwYXJlbnQgbm9kZSwgdGhpcyBtZXRob2QgbWF5IGNvbXBsZXRlbHkgcmVwbGFjZVxuICAgIHRoYXQgcGFyZW50IG5vZGUuXG4gICAgKi9cbiAgICByZXBsYWNlUmFuZ2VXaXRoKGZyb20sIHRvLCBub2RlKSB7XG4gICAgICAgIHJlcGxhY2VSYW5nZVdpdGgodGhpcywgZnJvbSwgdG8sIG5vZGUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgRGVsZXRlIHRoZSBnaXZlbiByYW5nZSwgZXhwYW5kaW5nIGl0IHRvIGNvdmVyIGZ1bGx5IGNvdmVyZWRcbiAgICBwYXJlbnQgbm9kZXMgdW50aWwgYSB2YWxpZCByZXBsYWNlIGlzIGZvdW5kLlxuICAgICovXG4gICAgZGVsZXRlUmFuZ2UoZnJvbSwgdG8pIHtcbiAgICAgICAgZGVsZXRlUmFuZ2UodGhpcywgZnJvbSwgdG8pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgU3BsaXQgdGhlIGNvbnRlbnQgaW4gdGhlIGdpdmVuIHJhbmdlIG9mZiBmcm9tIGl0cyBwYXJlbnQsIGlmIHRoZXJlXG4gICAgaXMgc2libGluZyBjb250ZW50IGJlZm9yZSBvciBhZnRlciBpdCwgYW5kIG1vdmUgaXQgdXAgdGhlIHRyZWUgdG9cbiAgICB0aGUgZGVwdGggc3BlY2lmaWVkIGJ5IGB0YXJnZXRgLiBZb3UnbGwgcHJvYmFibHkgd2FudCB0byB1c2VcbiAgICBbYGxpZnRUYXJnZXRgXShodHRwczovL3Byb3NlbWlycm9yLm5ldC9kb2NzL3JlZi8jdHJhbnNmb3JtLmxpZnRUYXJnZXQpIHRvIGNvbXB1dGUgYHRhcmdldGAsIHRvIG1ha2VcbiAgICBzdXJlIHRoZSBsaWZ0IGlzIHZhbGlkLlxuICAgICovXG4gICAgbGlmdChyYW5nZSwgdGFyZ2V0KSB7XG4gICAgICAgIGxpZnQodGhpcywgcmFuZ2UsIHRhcmdldCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICBKb2luIHRoZSBibG9ja3MgYXJvdW5kIHRoZSBnaXZlbiBwb3NpdGlvbi4gSWYgZGVwdGggaXMgMiwgdGhlaXJcbiAgICBsYXN0IGFuZCBmaXJzdCBzaWJsaW5ncyBhcmUgYWxzbyBqb2luZWQsIGFuZCBzbyBvbi5cbiAgICAqL1xuICAgIGpvaW4ocG9zLCBkZXB0aCA9IDEpIHtcbiAgICAgICAgam9pbih0aGlzLCBwb3MsIGRlcHRoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgIFdyYXAgdGhlIGdpdmVuIFtyYW5nZV0oaHR0cHM6Ly9wcm9zZW1pcnJvci5uZXQvZG9jcy9yZWYvI21vZGVsLk5vZGVSYW5nZSkgaW4gdGhlIGdpdmVuIHNldCBvZiB3cmFwcGVycy5cbiAgICBUaGUgd3JhcHBlcnMgYXJlIGFzc3VtZWQgdG8gYmUgdmFsaWQgaW4gdGhpcyBwb3NpdGlvbiwgYW5kIHNob3VsZFxuICAgIHByb2JhYmx5IGJlIGNvbXB1dGVkIHdpdGggW2BmaW5kV3JhcHBpbmdgXShodHRwczovL3Byb3NlbWlycm9yLm5ldC9kb2NzL3JlZi8jdHJhbnNmb3JtLmZpbmRXcmFwcGluZykuXG4gICAgKi9cbiAgICB3cmFwKHJhbmdlLCB3cmFwcGVycykge1xuICAgICAgICB3cmFwKHRoaXMsIHJhbmdlLCB3cmFwcGVycyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICBTZXQgdGhlIHR5cGUgb2YgYWxsIHRleHRibG9ja3MgKHBhcnRseSkgYmV0d2VlbiBgZnJvbWAgYW5kIGB0b2AgdG9cbiAgICB0aGUgZ2l2ZW4gbm9kZSB0eXBlIHdpdGggdGhlIGdpdmVuIGF0dHJpYnV0ZXMuXG4gICAgKi9cbiAgICBzZXRCbG9ja1R5cGUoZnJvbSwgdG8gPSBmcm9tLCB0eXBlLCBhdHRycyA9IG51bGwpIHtcbiAgICAgICAgc2V0QmxvY2tUeXBlKHRoaXMsIGZyb20sIHRvLCB0eXBlLCBhdHRycyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICBDaGFuZ2UgdGhlIHR5cGUsIGF0dHJpYnV0ZXMsIGFuZC9vciBtYXJrcyBvZiB0aGUgbm9kZSBhdCBgcG9zYC5cbiAgICBXaGVuIGB0eXBlYCBpc24ndCBnaXZlbiwgdGhlIGV4aXN0aW5nIG5vZGUgdHlwZSBpcyBwcmVzZXJ2ZWQsXG4gICAgKi9cbiAgICBzZXROb2RlTWFya3VwKHBvcywgdHlwZSwgYXR0cnMgPSBudWxsLCBtYXJrcyA9IFtdKSB7XG4gICAgICAgIHNldE5vZGVNYXJrdXAodGhpcywgcG9zLCB0eXBlLCBhdHRycywgbWFya3MpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgU3BsaXQgdGhlIG5vZGUgYXQgdGhlIGdpdmVuIHBvc2l0aW9uLCBhbmQgb3B0aW9uYWxseSwgaWYgYGRlcHRoYCBpc1xuICAgIGdyZWF0ZXIgdGhhbiBvbmUsIGFueSBudW1iZXIgb2Ygbm9kZXMgYWJvdmUgdGhhdC4gQnkgZGVmYXVsdCwgdGhlXG4gICAgcGFydHMgc3BsaXQgb2ZmIHdpbGwgaW5oZXJpdCB0aGUgbm9kZSB0eXBlIG9mIHRoZSBvcmlnaW5hbCBub2RlLlxuICAgIFRoaXMgY2FuIGJlIGNoYW5nZWQgYnkgcGFzc2luZyBhbiBhcnJheSBvZiB0eXBlcyBhbmQgYXR0cmlidXRlcyB0b1xuICAgIHVzZSBhZnRlciB0aGUgc3BsaXQuXG4gICAgKi9cbiAgICBzcGxpdChwb3MsIGRlcHRoID0gMSwgdHlwZXNBZnRlcikge1xuICAgICAgICBzcGxpdCh0aGlzLCBwb3MsIGRlcHRoLCB0eXBlc0FmdGVyKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgIEFkZCB0aGUgZ2l2ZW4gbWFyayB0byB0aGUgaW5saW5lIGNvbnRlbnQgYmV0d2VlbiBgZnJvbWAgYW5kIGB0b2AuXG4gICAgKi9cbiAgICBhZGRNYXJrKGZyb20sIHRvLCBtYXJrKSB7XG4gICAgICAgIGFkZE1hcmsodGhpcywgZnJvbSwgdG8sIG1hcmspO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgUmVtb3ZlIG1hcmtzIGZyb20gaW5saW5lIG5vZGVzIGJldHdlZW4gYGZyb21gIGFuZCBgdG9gLiBXaGVuXG4gICAgYG1hcmtgIGlzIGEgc2luZ2xlIG1hcmssIHJlbW92ZSBwcmVjaXNlbHkgdGhhdCBtYXJrLiBXaGVuIGl0IGlzXG4gICAgYSBtYXJrIHR5cGUsIHJlbW92ZSBhbGwgbWFya3Mgb2YgdGhhdCB0eXBlLiBXaGVuIGl0IGlzIG51bGwsXG4gICAgcmVtb3ZlIGFsbCBtYXJrcyBvZiBhbnkgdHlwZS5cbiAgICAqL1xuICAgIHJlbW92ZU1hcmsoZnJvbSwgdG8sIG1hcmspIHtcbiAgICAgICAgcmVtb3ZlTWFyayh0aGlzLCBmcm9tLCB0bywgbWFyayk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICBSZW1vdmVzIGFsbCBtYXJrcyBhbmQgbm9kZXMgZnJvbSB0aGUgY29udGVudCBvZiB0aGUgbm9kZSBhdFxuICAgIGBwb3NgIHRoYXQgZG9uJ3QgbWF0Y2ggdGhlIGdpdmVuIG5ldyBwYXJlbnQgbm9kZSB0eXBlLiBBY2NlcHRzXG4gICAgYW4gb3B0aW9uYWwgc3RhcnRpbmcgW2NvbnRlbnQgbWF0Y2hdKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyNtb2RlbC5Db250ZW50TWF0Y2gpIGFzXG4gICAgdGhpcmQgYXJndW1lbnQuXG4gICAgKi9cbiAgICBjbGVhckluY29tcGF0aWJsZShwb3MsIHBhcmVudFR5cGUsIG1hdGNoKSB7XG4gICAgICAgIGNsZWFySW5jb21wYXRpYmxlKHRoaXMsIHBvcywgcGFyZW50VHlwZSwgbWF0Y2gpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG5cbmV4cG9ydCB7IEFkZE1hcmtTdGVwLCBNYXBSZXN1bHQsIE1hcHBpbmcsIFJlbW92ZU1hcmtTdGVwLCBSZXBsYWNlQXJvdW5kU3RlcCwgUmVwbGFjZVN0ZXAsIFN0ZXAsIFN0ZXBNYXAsIFN0ZXBSZXN1bHQsIFRyYW5zZm9ybSwgVHJhbnNmb3JtRXJyb3IsIGNhbkpvaW4sIGNhblNwbGl0LCBkcm9wUG9pbnQsIGZpbmRXcmFwcGluZywgaW5zZXJ0UG9pbnQsIGpvaW5Qb2ludCwgbGlmdFRhcmdldCwgcmVwbGFjZVN0ZXAgfTtcbiIsIi8qKlxuICogVXRpbGl0eSBtb2R1bGUgdG8gd29yayB3aXRoIGtleS12YWx1ZSBzdG9yZXMuXG4gKlxuICogQG1vZHVsZSBtYXBcbiAqL1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgTWFwIGluc3RhbmNlLlxuICpcbiAqIEBmdW5jdGlvblxuICogQHJldHVybiB7TWFwPGFueSwgYW55Pn1cbiAqXG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IGNyZWF0ZSA9ICgpID0+IG5ldyBNYXAoKVxuXG4vKipcbiAqIENvcHkgYSBNYXAgb2JqZWN0IGludG8gYSBmcmVzaCBNYXAgb2JqZWN0LlxuICpcbiAqIEBmdW5jdGlvblxuICogQHRlbXBsYXRlIFgsWVxuICogQHBhcmFtIHtNYXA8WCxZPn0gbVxuICogQHJldHVybiB7TWFwPFgsWT59XG4gKi9cbmV4cG9ydCBjb25zdCBjb3B5ID0gbSA9PiB7XG4gIGNvbnN0IHIgPSBjcmVhdGUoKVxuICBtLmZvckVhY2goKHYsIGspID0+IHsgci5zZXQoaywgdikgfSlcbiAgcmV0dXJuIHJcbn1cblxuLyoqXG4gKiBHZXQgbWFwIHByb3BlcnR5LiBDcmVhdGUgVCBpZiBwcm9wZXJ0eSBpcyB1bmRlZmluZWQgYW5kIHNldCBUIG9uIG1hcC5cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgbGlzdGVuZXJzID0gbWFwLnNldElmVW5kZWZpbmVkKGV2ZW50cywgJ2V2ZW50TmFtZScsIHNldC5jcmVhdGUpXG4gKiBsaXN0ZW5lcnMuYWRkKGxpc3RlbmVyKVxuICogYGBgXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAdGVtcGxhdGUgVCxLXG4gKiBAcGFyYW0ge01hcDxLLCBUPn0gbWFwXG4gKiBAcGFyYW0ge0t9IGtleVxuICogQHBhcmFtIHtmdW5jdGlvbigpOlR9IGNyZWF0ZVRcbiAqIEByZXR1cm4ge1R9XG4gKi9cbmV4cG9ydCBjb25zdCBzZXRJZlVuZGVmaW5lZCA9IChtYXAsIGtleSwgY3JlYXRlVCkgPT4ge1xuICBsZXQgc2V0ID0gbWFwLmdldChrZXkpXG4gIGlmIChzZXQgPT09IHVuZGVmaW5lZCkge1xuICAgIG1hcC5zZXQoa2V5LCBzZXQgPSBjcmVhdGVUKCkpXG4gIH1cbiAgcmV0dXJuIHNldFxufVxuXG4vKipcbiAqIENyZWF0ZXMgYW4gQXJyYXkgYW5kIHBvcHVsYXRlcyBpdCB3aXRoIHRoZSBjb250ZW50IG9mIGFsbCBrZXktdmFsdWUgcGFpcnMgdXNpbmcgdGhlIGBmKHZhbHVlLCBrZXkpYCBmdW5jdGlvbi5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEB0ZW1wbGF0ZSBLXG4gKiBAdGVtcGxhdGUgVlxuICogQHRlbXBsYXRlIFJcbiAqIEBwYXJhbSB7TWFwPEssVj59IG1cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oVixLKTpSfSBmXG4gKiBAcmV0dXJuIHtBcnJheTxSPn1cbiAqL1xuZXhwb3J0IGNvbnN0IG1hcCA9IChtLCBmKSA9PiB7XG4gIGNvbnN0IHJlcyA9IFtdXG4gIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIG0pIHtcbiAgICByZXMucHVzaChmKHZhbHVlLCBrZXkpKVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyoqXG4gKiBUZXN0cyB3aGV0aGVyIGFueSBrZXktdmFsdWUgcGFpcnMgcGFzcyB0aGUgdGVzdCBpbXBsZW1lbnRlZCBieSBgZih2YWx1ZSwga2V5KWAuXG4gKlxuICogQHRvZG8gc2hvdWxkIHJlbmFtZSB0byBzb21lIC0gc2ltaWxhcmx5IHRvIEFycmF5LnNvbWVcbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEB0ZW1wbGF0ZSBLXG4gKiBAdGVtcGxhdGUgVlxuICogQHBhcmFtIHtNYXA8SyxWPn0gbVxuICogQHBhcmFtIHtmdW5jdGlvbihWLEspOmJvb2xlYW59IGZcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBjb25zdCBhbnkgPSAobSwgZikgPT4ge1xuICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBtKSB7XG4gICAgaWYgKGYodmFsdWUsIGtleSkpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG4vKipcbiAqIFRlc3RzIHdoZXRoZXIgYWxsIGtleS12YWx1ZSBwYWlycyBwYXNzIHRoZSB0ZXN0IGltcGxlbWVudGVkIGJ5IGBmKHZhbHVlLCBrZXkpYC5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEB0ZW1wbGF0ZSBLXG4gKiBAdGVtcGxhdGUgVlxuICogQHBhcmFtIHtNYXA8SyxWPn0gbVxuICogQHBhcmFtIHtmdW5jdGlvbihWLEspOmJvb2xlYW59IGZcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBjb25zdCBhbGwgPSAobSwgZikgPT4ge1xuICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBtKSB7XG4gICAgaWYgKCFmKHZhbHVlLCBrZXkpKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWVcbn1cbiIsIi8qKlxuICogVXRpbGl0eSBtb2R1bGUgdG8gd29yayB3aXRoIHNldHMuXG4gKlxuICogQG1vZHVsZSBzZXRcbiAqL1xuXG5leHBvcnQgY29uc3QgY3JlYXRlID0gKCkgPT4gbmV3IFNldCgpXG5cbi8qKlxuICogQHRlbXBsYXRlIFRcbiAqIEBwYXJhbSB7U2V0PFQ+fSBzZXRcbiAqIEByZXR1cm4ge0FycmF5PFQ+fVxuICovXG5leHBvcnQgY29uc3QgdG9BcnJheSA9IHNldCA9PiBBcnJheS5mcm9tKHNldClcblxuLyoqXG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHtTZXQ8VD59IHNldFxuICogQHJldHVybiB7VH1cbiAqL1xuZXhwb3J0IGNvbnN0IGZpcnN0ID0gc2V0ID0+IHtcbiAgcmV0dXJuIHNldC52YWx1ZXMoKS5uZXh0KCkudmFsdWUgfHwgdW5kZWZpbmVkXG59XG5cbi8qKlxuICogQHRlbXBsYXRlIFRcbiAqIEBwYXJhbSB7SXRlcmFibGU8VD59IGVudHJpZXNcbiAqIEByZXR1cm4ge1NldDxUPn1cbiAqL1xuZXhwb3J0IGNvbnN0IGZyb20gPSBlbnRyaWVzID0+IHtcbiAgcmV0dXJuIG5ldyBTZXQoZW50cmllcylcbn1cbiIsIi8qKlxuICogVXRpbGl0eSBtb2R1bGUgdG8gd29yayB3aXRoIEFycmF5cy5cbiAqXG4gKiBAbW9kdWxlIGFycmF5XG4gKi9cblxuLyoqXG4gKiBSZXR1cm4gdGhlIGxhc3QgZWxlbWVudCBvZiBhbiBhcnJheS4gVGhlIGVsZW1lbnQgbXVzdCBleGlzdFxuICpcbiAqIEB0ZW1wbGF0ZSBMXG4gKiBAcGFyYW0ge0FycmF5PEw+fSBhcnJcbiAqIEByZXR1cm4ge0x9XG4gKi9cbmV4cG9ydCBjb25zdCBsYXN0ID0gYXJyID0+IGFyclthcnIubGVuZ3RoIC0gMV1cblxuLyoqXG4gKiBAdGVtcGxhdGUgQ1xuICogQHJldHVybiB7QXJyYXk8Qz59XG4gKi9cbmV4cG9ydCBjb25zdCBjcmVhdGUgPSAoKSA9PiAvKiogQHR5cGUge0FycmF5PEM+fSAqLyAoW10pXG5cbi8qKlxuICogQHRlbXBsYXRlIERcbiAqIEBwYXJhbSB7QXJyYXk8RD59IGFcbiAqIEByZXR1cm4ge0FycmF5PEQ+fVxuICovXG5leHBvcnQgY29uc3QgY29weSA9IGEgPT4gLyoqIEB0eXBlIHtBcnJheTxEPn0gKi8gKGEuc2xpY2UoKSlcblxuLyoqXG4gKiBBcHBlbmQgZWxlbWVudHMgZnJvbSBzcmMgdG8gZGVzdFxuICpcbiAqIEB0ZW1wbGF0ZSBNXG4gKiBAcGFyYW0ge0FycmF5PE0+fSBkZXN0XG4gKiBAcGFyYW0ge0FycmF5PE0+fSBzcmNcbiAqL1xuZXhwb3J0IGNvbnN0IGFwcGVuZFRvID0gKGRlc3QsIHNyYykgPT4ge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHNyYy5sZW5ndGg7IGkrKykge1xuICAgIGRlc3QucHVzaChzcmNbaV0pXG4gIH1cbn1cblxuLyoqXG4gKiBUcmFuc2Zvcm1zIHNvbWV0aGluZyBhcnJheS1saWtlIHRvIGFuIGFjdHVhbCBBcnJheS5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAcGFyYW0ge0FycmF5TGlrZTxUPnxJdGVyYWJsZTxUPn0gYXJyYXlsaWtlXG4gKiBAcmV0dXJuIHtUfVxuICovXG5leHBvcnQgY29uc3QgZnJvbSA9IEFycmF5LmZyb21cblxuLyoqXG4gKiBUcnVlIGlmZiBjb25kaXRpb24gaG9sZHMgb24gZXZlcnkgZWxlbWVudCBpbiB0aGUgQXJyYXkuXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAdGVtcGxhdGUgSVRFTVxuICpcbiAqIEBwYXJhbSB7QXJyYXk8SVRFTT59IGFyclxuICogQHBhcmFtIHtmdW5jdGlvbihJVEVNLCBudW1iZXIsIEFycmF5PElURU0+KTpib29sZWFufSBmXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgY29uc3QgZXZlcnkgPSAoYXJyLCBmKSA9PiBhcnIuZXZlcnkoZilcblxuLyoqXG4gKiBUcnVlIGlmZiBjb25kaXRpb24gaG9sZHMgb24gc29tZSBlbGVtZW50IGluIHRoZSBBcnJheS5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEB0ZW1wbGF0ZSBTXG4gKiBAcGFyYW0ge0FycmF5PFM+fSBhcnJcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oUywgbnVtYmVyLCBBcnJheTxTPik6Ym9vbGVhbn0gZlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGNvbnN0IHNvbWUgPSAoYXJyLCBmKSA9PiBhcnIuc29tZShmKVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBFTEVNXG4gKlxuICogQHBhcmFtIHtBcnJheTxFTEVNPn0gYVxuICogQHBhcmFtIHtBcnJheTxFTEVNPn0gYlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGNvbnN0IGVxdWFsRmxhdCA9IChhLCBiKSA9PiBhLmxlbmd0aCA9PT0gYi5sZW5ndGggJiYgZXZlcnkoYSwgKGl0ZW0sIGluZGV4KSA9PiBpdGVtID09PSBiW2luZGV4XSlcblxuLyoqXG4gKiBAdGVtcGxhdGUgRUxFTVxuICogQHBhcmFtIHtBcnJheTxBcnJheTxFTEVNPj59IGFyclxuICogQHJldHVybiB7QXJyYXk8RUxFTT59XG4gKi9cbmV4cG9ydCBjb25zdCBmbGF0dGVuID0gYXJyID0+IGFyci5yZWR1Y2UoKGFjYywgdmFsKSA9PiBhY2MuY29uY2F0KHZhbCksIFtdKVxuXG5leHBvcnQgY29uc3QgaXNBcnJheSA9IEFycmF5LmlzQXJyYXlcbiIsIi8qKlxuICogT2JzZXJ2YWJsZSBjbGFzcyBwcm90b3R5cGUuXG4gKlxuICogQG1vZHVsZSBvYnNlcnZhYmxlXG4gKi9cblxuaW1wb3J0ICogYXMgbWFwIGZyb20gJy4vbWFwLmpzJ1xuaW1wb3J0ICogYXMgc2V0IGZyb20gJy4vc2V0LmpzJ1xuaW1wb3J0ICogYXMgYXJyYXkgZnJvbSAnLi9hcnJheS5qcydcblxuLyoqXG4gKiBIYW5kbGVzIG5hbWVkIGV2ZW50cy5cbiAqXG4gKiBAdGVtcGxhdGUgTlxuICovXG5leHBvcnQgY2xhc3MgT2JzZXJ2YWJsZSB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICAvKipcbiAgICAgKiBTb21lIGRlc2MuXG4gICAgICogQHR5cGUge01hcDxOLCBhbnk+fVxuICAgICAqL1xuICAgIHRoaXMuX29ic2VydmVycyA9IG1hcC5jcmVhdGUoKVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Tn0gbmFtZVxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBmXG4gICAqL1xuICBvbiAobmFtZSwgZikge1xuICAgIG1hcC5zZXRJZlVuZGVmaW5lZCh0aGlzLl9vYnNlcnZlcnMsIG5hbWUsIHNldC5jcmVhdGUpLmFkZChmKVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Tn0gbmFtZVxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBmXG4gICAqL1xuICBvbmNlIChuYW1lLCBmKSB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtICB7Li4uYW55fSBhcmdzXG4gICAgICovXG4gICAgY29uc3QgX2YgPSAoLi4uYXJncykgPT4ge1xuICAgICAgdGhpcy5vZmYobmFtZSwgX2YpXG4gICAgICBmKC4uLmFyZ3MpXG4gICAgfVxuICAgIHRoaXMub24obmFtZSwgX2YpXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtOfSBuYW1lXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGZcbiAgICovXG4gIG9mZiAobmFtZSwgZikge1xuICAgIGNvbnN0IG9ic2VydmVycyA9IHRoaXMuX29ic2VydmVycy5nZXQobmFtZSlcbiAgICBpZiAob2JzZXJ2ZXJzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIG9ic2VydmVycy5kZWxldGUoZilcbiAgICAgIGlmIChvYnNlcnZlcnMuc2l6ZSA9PT0gMCkge1xuICAgICAgICB0aGlzLl9vYnNlcnZlcnMuZGVsZXRlKG5hbWUpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEVtaXQgYSBuYW1lZCBldmVudC4gQWxsIHJlZ2lzdGVyZWQgZXZlbnQgbGlzdGVuZXJzIHRoYXQgbGlzdGVuIHRvIHRoZVxuICAgKiBzcGVjaWZpZWQgbmFtZSB3aWxsIHJlY2VpdmUgdGhlIGV2ZW50LlxuICAgKlxuICAgKiBAdG9kbyBUaGlzIHNob3VsZCBjYXRjaCBleGNlcHRpb25zXG4gICAqXG4gICAqIEBwYXJhbSB7Tn0gbmFtZSBUaGUgZXZlbnQgbmFtZS5cbiAgICogQHBhcmFtIHtBcnJheTxhbnk+fSBhcmdzIFRoZSBhcmd1bWVudHMgdGhhdCBhcmUgYXBwbGllZCB0byB0aGUgZXZlbnQgbGlzdGVuZXIuXG4gICAqL1xuICBlbWl0IChuYW1lLCBhcmdzKSB7XG4gICAgLy8gY29weSBhbGwgbGlzdGVuZXJzIHRvIGFuIGFycmF5IGZpcnN0IHRvIG1ha2Ugc3VyZSB0aGF0IG5vIGV2ZW50IGlzIGVtaXR0ZWQgdG8gbGlzdGVuZXJzIHRoYXQgYXJlIHN1YnNjcmliZWQgd2hpbGUgdGhlIGV2ZW50IGhhbmRsZXIgaXMgY2FsbGVkLlxuICAgIHJldHVybiBhcnJheS5mcm9tKCh0aGlzLl9vYnNlcnZlcnMuZ2V0KG5hbWUpIHx8IG1hcC5jcmVhdGUoKSkudmFsdWVzKCkpLmZvckVhY2goZiA9PiBmKC4uLmFyZ3MpKVxuICB9XG5cbiAgZGVzdHJveSAoKSB7XG4gICAgdGhpcy5fb2JzZXJ2ZXJzID0gbWFwLmNyZWF0ZSgpXG4gIH1cbn1cbiIsIi8qKlxuICogQ29tbW9uIE1hdGggZXhwcmVzc2lvbnMuXG4gKlxuICogQG1vZHVsZSBtYXRoXG4gKi9cblxuZXhwb3J0IGNvbnN0IGZsb29yID0gTWF0aC5mbG9vclxuZXhwb3J0IGNvbnN0IGNlaWwgPSBNYXRoLmNlaWxcbmV4cG9ydCBjb25zdCBhYnMgPSBNYXRoLmFic1xuZXhwb3J0IGNvbnN0IGltdWwgPSBNYXRoLmltdWxcbmV4cG9ydCBjb25zdCByb3VuZCA9IE1hdGgucm91bmRcbmV4cG9ydCBjb25zdCBsb2cxMCA9IE1hdGgubG9nMTBcbmV4cG9ydCBjb25zdCBsb2cyID0gTWF0aC5sb2cyXG5leHBvcnQgY29uc3QgbG9nID0gTWF0aC5sb2dcbmV4cG9ydCBjb25zdCBzcXJ0ID0gTWF0aC5zcXJ0XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge251bWJlcn0gYVxuICogQHBhcmFtIHtudW1iZXJ9IGJcbiAqIEByZXR1cm4ge251bWJlcn0gVGhlIHN1bSBvZiBhIGFuZCBiXG4gKi9cbmV4cG9ydCBjb25zdCBhZGQgPSAoYSwgYikgPT4gYSArIGJcblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7bnVtYmVyfSBhXG4gKiBAcGFyYW0ge251bWJlcn0gYlxuICogQHJldHVybiB7bnVtYmVyfSBUaGUgc21hbGxlciBlbGVtZW50IG9mIGEgYW5kIGJcbiAqL1xuZXhwb3J0IGNvbnN0IG1pbiA9IChhLCBiKSA9PiBhIDwgYiA/IGEgOiBiXG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge251bWJlcn0gYVxuICogQHBhcmFtIHtudW1iZXJ9IGJcbiAqIEByZXR1cm4ge251bWJlcn0gVGhlIGJpZ2dlciBlbGVtZW50IG9mIGEgYW5kIGJcbiAqL1xuZXhwb3J0IGNvbnN0IG1heCA9IChhLCBiKSA9PiBhID4gYiA/IGEgOiBiXG5cbmV4cG9ydCBjb25zdCBpc05hTiA9IE51bWJlci5pc05hTlxuXG5leHBvcnQgY29uc3QgcG93ID0gTWF0aC5wb3dcbi8qKlxuICogQmFzZSAxMCBleHBvbmVudGlhbCBmdW5jdGlvbi4gUmV0dXJucyB0aGUgdmFsdWUgb2YgMTAgcmFpc2VkIHRvIHRoZSBwb3dlciBvZiBwb3cuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IGV4cFxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgZXhwMTAgPSBleHAgPT4gTWF0aC5wb3coMTAsIGV4cClcblxuZXhwb3J0IGNvbnN0IHNpZ24gPSBNYXRoLnNpZ25cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gblxuICogQHJldHVybiB7Ym9vbGVhbn0gV2V0aGVyIG4gaXMgbmVnYXRpdmUuIFRoaXMgZnVuY3Rpb24gYWxzbyBkaWZmZXJlbnRpYXRlcyBiZXR3ZWVuIC0wIGFuZCArMFxuICovXG5leHBvcnQgY29uc3QgaXNOZWdhdGl2ZVplcm8gPSBuID0+IG4gIT09IDAgPyBuIDwgMCA6IDEgLyBuIDwgMFxuIiwiLyoqXG4gKiBVdGlsaXR5IG1vZHVsZSB0byB3b3JrIHdpdGggc3RyaW5ncy5cbiAqXG4gKiBAbW9kdWxlIHN0cmluZ1xuICovXG5cbmV4cG9ydCBjb25zdCBmcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlXG5leHBvcnQgY29uc3QgZnJvbUNvZGVQb2ludCA9IFN0cmluZy5mcm9tQ29kZVBvaW50XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHNcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuY29uc3QgdG9Mb3dlckNhc2UgPSBzID0+IHMudG9Mb3dlckNhc2UoKVxuXG5jb25zdCB0cmltTGVmdFJlZ2V4ID0gL15cXHMqL2dcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gc1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgY29uc3QgdHJpbUxlZnQgPSBzID0+IHMucmVwbGFjZSh0cmltTGVmdFJlZ2V4LCAnJylcblxuY29uc3QgZnJvbUNhbWVsQ2FzZVJlZ2V4ID0gLyhbQS1aXSkvZ1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBzXG4gKiBAcGFyYW0ge3N0cmluZ30gc2VwYXJhdG9yXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBjb25zdCBmcm9tQ2FtZWxDYXNlID0gKHMsIHNlcGFyYXRvcikgPT4gdHJpbUxlZnQocy5yZXBsYWNlKGZyb21DYW1lbENhc2VSZWdleCwgbWF0Y2ggPT4gYCR7c2VwYXJhdG9yfSR7dG9Mb3dlckNhc2UobWF0Y2gpfWApKVxuXG4vKipcbiAqIENvbXB1dGUgdGhlIHV0ZjhCeXRlTGVuZ3RoXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCB1dGY4Qnl0ZUxlbmd0aCA9IHN0ciA9PiB1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoc3RyKSkubGVuZ3RoXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0clxuICogQHJldHVybiB7VWludDhBcnJheX1cbiAqL1xuZXhwb3J0IGNvbnN0IF9lbmNvZGVVdGY4UG9seWZpbGwgPSBzdHIgPT4ge1xuICBjb25zdCBlbmNvZGVkU3RyaW5nID0gdW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KHN0cikpXG4gIGNvbnN0IGxlbiA9IGVuY29kZWRTdHJpbmcubGVuZ3RoXG4gIGNvbnN0IGJ1ZiA9IG5ldyBVaW50OEFycmF5KGxlbilcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIGJ1ZltpXSA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoZW5jb2RlZFN0cmluZy5jb2RlUG9pbnRBdChpKSlcbiAgfVxuICByZXR1cm4gYnVmXG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5leHBvcnQgY29uc3QgdXRmOFRleHRFbmNvZGVyID0gLyoqIEB0eXBlIHtUZXh0RW5jb2Rlcn0gKi8gKHR5cGVvZiBUZXh0RW5jb2RlciAhPT0gJ3VuZGVmaW5lZCcgPyBuZXcgVGV4dEVuY29kZXIoKSA6IG51bGwpXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0clxuICogQHJldHVybiB7VWludDhBcnJheX1cbiAqL1xuZXhwb3J0IGNvbnN0IF9lbmNvZGVVdGY4TmF0aXZlID0gc3RyID0+IHV0ZjhUZXh0RW5jb2Rlci5lbmNvZGUoc3RyKVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge1VpbnQ4QXJyYXl9XG4gKi9cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5leHBvcnQgY29uc3QgZW5jb2RlVXRmOCA9IHV0ZjhUZXh0RW5jb2RlciA/IF9lbmNvZGVVdGY4TmF0aXZlIDogX2VuY29kZVV0ZjhQb2x5ZmlsbFxuXG4vKipcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gYnVmXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBjb25zdCBfZGVjb2RlVXRmOFBvbHlmaWxsID0gYnVmID0+IHtcbiAgbGV0IHJlbWFpbmluZ0xlbiA9IGJ1Zi5sZW5ndGhcbiAgbGV0IGVuY29kZWRTdHJpbmcgPSAnJ1xuICBsZXQgYnVmUG9zID0gMFxuICB3aGlsZSAocmVtYWluaW5nTGVuID4gMCkge1xuICAgIGNvbnN0IG5leHRMZW4gPSByZW1haW5pbmdMZW4gPCAxMDAwMCA/IHJlbWFpbmluZ0xlbiA6IDEwMDAwXG4gICAgY29uc3QgYnl0ZXMgPSBidWYuc3ViYXJyYXkoYnVmUG9zLCBidWZQb3MgKyBuZXh0TGVuKVxuICAgIGJ1ZlBvcyArPSBuZXh0TGVuXG4gICAgLy8gU3RhcnRpbmcgd2l0aCBFUzUuMSB3ZSBjYW4gc3VwcGx5IGEgZ2VuZXJpYyBhcnJheS1saWtlIG9iamVjdCBhcyBhcmd1bWVudHNcbiAgICBlbmNvZGVkU3RyaW5nICs9IFN0cmluZy5mcm9tQ29kZVBvaW50LmFwcGx5KG51bGwsIC8qKiBAdHlwZSB7YW55fSAqLyAoYnl0ZXMpKVxuICAgIHJlbWFpbmluZ0xlbiAtPSBuZXh0TGVuXG4gIH1cbiAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChlc2NhcGUoZW5jb2RlZFN0cmluZykpXG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5leHBvcnQgbGV0IHV0ZjhUZXh0RGVjb2RlciA9IHR5cGVvZiBUZXh0RGVjb2RlciA9PT0gJ3VuZGVmaW5lZCcgPyBudWxsIDogbmV3IFRleHREZWNvZGVyKCd1dGYtOCcsIHsgZmF0YWw6IHRydWUsIGlnbm9yZUJPTTogdHJ1ZSB9KVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuaWYgKHV0ZjhUZXh0RGVjb2RlciAmJiB1dGY4VGV4dERlY29kZXIuZGVjb2RlKG5ldyBVaW50OEFycmF5KCkpLmxlbmd0aCA9PT0gMSkge1xuICAvLyBTYWZhcmkgZG9lc24ndCBoYW5kbGUgQk9NIGNvcnJlY3RseS5cbiAgLy8gVGhpcyBmaXhlcyBhIGJ1ZyBpbiBTYWZhcmkgMTMuMC41IHdoZXJlIGl0IHByb2R1Y2VzIGEgQk9NIHRoZSBmaXJzdCB0aW1lIGl0IGlzIGNhbGxlZC5cbiAgLy8gdXRmOFRleHREZWNvZGVyLmRlY29kZShuZXcgVWludDhBcnJheSgpKS5sZW5ndGggPT09IDEgb24gdGhlIGZpcnN0IGNhbGwgYW5kXG4gIC8vIHV0ZjhUZXh0RGVjb2Rlci5kZWNvZGUobmV3IFVpbnQ4QXJyYXkoKSkubGVuZ3RoID09PSAxIG9uIHRoZSBzZWNvbmQgY2FsbFxuICAvLyBBbm90aGVyIGlzc3VlIGlzIHRoYXQgZnJvbSB0aGVuIG9uIG5vIEJPTSBjaGFycyBhcmUgcmVjb2duaXplZCBhbnltb3JlXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHV0ZjhUZXh0RGVjb2RlciA9IG51bGxcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IGJ1ZlxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgY29uc3QgX2RlY29kZVV0ZjhOYXRpdmUgPSBidWYgPT4gLyoqIEB0eXBlIHtUZXh0RGVjb2Rlcn0gKi8gKHV0ZjhUZXh0RGVjb2RlcikuZGVjb2RlKGJ1ZilcblxuLyoqXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IGJ1ZlxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZXhwb3J0IGNvbnN0IGRlY29kZVV0ZjggPSB1dGY4VGV4dERlY29kZXIgPyBfZGVjb2RlVXRmOE5hdGl2ZSA6IF9kZWNvZGVVdGY4UG9seWZpbGxcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIFRoZSBpbml0aWFsIHN0cmluZ1xuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IFN0YXJ0aW5nIHBvc2l0aW9uXG4gKiBAcGFyYW0ge251bWJlcn0gcmVtb3ZlIE51bWJlciBvZiBjaGFyYWN0ZXJzIHRvIHJlbW92ZVxuICogQHBhcmFtIHtzdHJpbmd9IGluc2VydCBOZXcgY29udGVudCB0byBpbnNlcnRcbiAqL1xuZXhwb3J0IGNvbnN0IHNwbGljZSA9IChzdHIsIGluZGV4LCByZW1vdmUsIGluc2VydCA9ICcnKSA9PiBzdHIuc2xpY2UoMCwgaW5kZXgpICsgaW5zZXJ0ICsgc3RyLnNsaWNlKGluZGV4ICsgcmVtb3ZlKVxuIiwiLyogZ2xvYmFsIGxvY2FsU3RvcmFnZSwgYWRkRXZlbnRMaXN0ZW5lciAqL1xuXG4vKipcbiAqIElzb21vcnBoaWMgdmFyaWFibGUgc3RvcmFnZS5cbiAqXG4gKiBVc2VzIExvY2FsU3RvcmFnZSBpbiB0aGUgYnJvd3NlciBhbmQgZmFsbHMgYmFjayB0byBpbi1tZW1vcnkgc3RvcmFnZS5cbiAqXG4gKiBAbW9kdWxlIHN0b3JhZ2VcbiAqL1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuY2xhc3MgVmFyU3RvcmFnZVBvbHlmaWxsIHtcbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHRoaXMubWFwID0gbmV3IE1hcCgpXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICAgKiBAcGFyYW0ge2FueX0gbmV3VmFsdWVcbiAgICovXG4gIHNldEl0ZW0gKGtleSwgbmV3VmFsdWUpIHtcbiAgICB0aGlzLm1hcC5zZXQoa2V5LCBuZXdWYWx1ZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gICAqL1xuICBnZXRJdGVtIChrZXkpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAuZ2V0KGtleSlcbiAgfVxufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuLyoqXG4gKiBAdHlwZSB7YW55fVxuICovXG5sZXQgX2xvY2FsU3RvcmFnZSA9IG5ldyBWYXJTdG9yYWdlUG9seWZpbGwoKVxubGV0IHVzZVBvbHlmaWxsID0gdHJ1ZVxuXG50cnkge1xuICAvLyBpZiB0aGUgc2FtZS1vcmlnaW4gcnVsZSBpcyB2aW9sYXRlZCwgYWNjZXNzaW5nIGxvY2FsU3RvcmFnZSBtaWdodCB0aHJvd24gYW4gZXJyb3JcbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgaWYgKHR5cGVvZiBsb2NhbFN0b3JhZ2UgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgX2xvY2FsU3RvcmFnZSA9IGxvY2FsU3RvcmFnZVxuICAgIHVzZVBvbHlmaWxsID0gZmFsc2VcbiAgfVxufSBjYXRjaCAoZSkgeyB9XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4vKipcbiAqIFRoaXMgaXMgYmFzaWNhbGx5IGxvY2FsU3RvcmFnZSBpbiBicm93c2VyLCBvciBhIHBvbHlmaWxsIGluIG5vZGVqc1xuICovXG5leHBvcnQgY29uc3QgdmFyU3RvcmFnZSA9IF9sb2NhbFN0b3JhZ2VcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbi8qKlxuICogQSBwb2x5ZmlsbCBmb3IgYGFkZEV2ZW50TGlzdGVuZXIoJ3N0b3JhZ2UnLCBldmVudCA9PiB7Li59KWAgdGhhdCBkb2VzIG5vdGhpbmcgaWYgdGhlIHBvbHlmaWxsIGlzIGJlaW5nIHVzZWQuXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbih7IGtleTogc3RyaW5nLCBuZXdWYWx1ZTogc3RyaW5nLCBvbGRWYWx1ZTogc3RyaW5nIH0pOiB2b2lkfSBldmVudEhhbmRsZXJcbiAqIEBmdW5jdGlvblxuICovXG5leHBvcnQgY29uc3Qgb25DaGFuZ2UgPSBldmVudEhhbmRsZXIgPT4gdXNlUG9seWZpbGwgfHwgYWRkRXZlbnRMaXN0ZW5lcignc3RvcmFnZScsIC8qKiBAdHlwZSB7YW55fSAqLyAoZXZlbnRIYW5kbGVyKSlcbiIsIi8qKlxuICogSXNvbW9ycGhpYyBtb2R1bGUgdG8gd29yayBhY2Nlc3MgdGhlIGVudmlyb25tZW50IChxdWVyeSBwYXJhbXMsIGVudiB2YXJpYWJsZXMpLlxuICpcbiAqIEBtb2R1bGUgbWFwXG4gKi9cblxuaW1wb3J0ICogYXMgbWFwIGZyb20gJy4vbWFwLmpzJ1xuaW1wb3J0ICogYXMgc3RyaW5nIGZyb20gJy4vc3RyaW5nLmpzJ1xuaW1wb3J0ICogYXMgY29uZGl0aW9ucyBmcm9tICcuL2NvbmRpdGlvbnMuanMnXG5pbXBvcnQgKiBhcyBzdG9yYWdlIGZyb20gJy4vc3RvcmFnZS5qcydcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbi8vIEB0cy1pZ25vcmVcbmV4cG9ydCBjb25zdCBpc05vZGUgPSB0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgcHJvY2Vzcy5yZWxlYXNlICYmIC9ub2RlfGlvXFwuanMvLnRlc3QocHJvY2Vzcy5yZWxlYXNlLm5hbWUpXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZXhwb3J0IGNvbnN0IGlzQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmICFpc05vZGVcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5leHBvcnQgY29uc3QgaXNNYWMgPSB0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyA/IC9NYWMvLnRlc3QobmF2aWdhdG9yLnBsYXRmb3JtKSA6IGZhbHNlXG5cbi8qKlxuICogQHR5cGUge01hcDxzdHJpbmcsc3RyaW5nPn1cbiAqL1xubGV0IHBhcmFtc1xuY29uc3QgYXJncyA9IFtdXG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5jb25zdCBjb21wdXRlUGFyYW1zID0gKCkgPT4ge1xuICBpZiAocGFyYW1zID09PSB1bmRlZmluZWQpIHtcbiAgICBpZiAoaXNOb2RlKSB7XG4gICAgICBwYXJhbXMgPSBtYXAuY3JlYXRlKClcbiAgICAgIGNvbnN0IHBhcmdzID0gcHJvY2Vzcy5hcmd2XG4gICAgICBsZXQgY3VyclBhcmFtTmFtZSA9IG51bGxcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHBhcmcgPSBwYXJnc1tpXVxuICAgICAgICBpZiAocGFyZ1swXSA9PT0gJy0nKSB7XG4gICAgICAgICAgaWYgKGN1cnJQYXJhbU5hbWUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHBhcmFtcy5zZXQoY3VyclBhcmFtTmFtZSwgJycpXG4gICAgICAgICAgfVxuICAgICAgICAgIGN1cnJQYXJhbU5hbWUgPSBwYXJnXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGN1cnJQYXJhbU5hbWUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHBhcmFtcy5zZXQoY3VyclBhcmFtTmFtZSwgcGFyZylcbiAgICAgICAgICAgIGN1cnJQYXJhbU5hbWUgPSBudWxsXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFyZ3MucHVzaChwYXJnKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGN1cnJQYXJhbU5hbWUgIT09IG51bGwpIHtcbiAgICAgICAgcGFyYW1zLnNldChjdXJyUGFyYW1OYW1lLCAnJylcbiAgICAgIH1cbiAgICAvLyBpbiBSZWFjdE5hdGl2ZSBmb3IgZXhhbXBsZSB0aGlzIHdvdWxkIG5vdCBiZSB0cnVlICh1bmxlc3MgY29ubmVjdGVkIHRvIHRoZSBSZW1vdGUgRGVidWdnZXIpXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgbG9jYXRpb24gPT09ICdvYmplY3QnKSB7XG4gICAgICBwYXJhbXMgPSBtYXAuY3JlYXRlKClcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgICAgOyhsb2NhdGlvbi5zZWFyY2ggfHwgJz8nKS5zbGljZSgxKS5zcGxpdCgnJicpLmZvckVhY2goa3YgPT4ge1xuICAgICAgICBpZiAoa3YubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgY29uc3QgW2tleSwgdmFsdWVdID0ga3Yuc3BsaXQoJz0nKVxuICAgICAgICAgIHBhcmFtcy5zZXQoYC0tJHtzdHJpbmcuZnJvbUNhbWVsQ2FzZShrZXksICctJyl9YCwgdmFsdWUpXG4gICAgICAgICAgcGFyYW1zLnNldChgLSR7c3RyaW5nLmZyb21DYW1lbENhc2Uoa2V5LCAnLScpfWAsIHZhbHVlKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0gZWxzZSB7XG4gICAgICBwYXJhbXMgPSBtYXAuY3JlYXRlKClcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHBhcmFtc1xufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZXhwb3J0IGNvbnN0IGhhc1BhcmFtID0gbmFtZSA9PiBjb21wdXRlUGFyYW1zKCkuaGFzKG5hbWUpXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAqIEBwYXJhbSB7c3RyaW5nfSBkZWZhdWx0VmFsXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5leHBvcnQgY29uc3QgZ2V0UGFyYW0gPSAobmFtZSwgZGVmYXVsdFZhbCkgPT4gY29tcHV0ZVBhcmFtcygpLmdldChuYW1lKSB8fCBkZWZhdWx0VmFsXG4vLyBleHBvcnQgY29uc3QgZ2V0QXJncyA9IG5hbWUgPT4gY29tcHV0ZVBhcmFtcygpICYmIGFyZ3NcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICogQHJldHVybiB7c3RyaW5nfG51bGx9XG4gKi9cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5leHBvcnQgY29uc3QgZ2V0VmFyaWFibGUgPSBuYW1lID0+IGlzTm9kZSA/IGNvbmRpdGlvbnMudW5kZWZpbmVkVG9OdWxsKHByb2Nlc3MuZW52W25hbWUudG9VcHBlckNhc2UoKV0pIDogY29uZGl0aW9ucy51bmRlZmluZWRUb051bGwoc3RvcmFnZS52YXJTdG9yYWdlLmdldEl0ZW0obmFtZSkpXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAqIEByZXR1cm4ge3N0cmluZ3xudWxsfVxuICovXG5leHBvcnQgY29uc3QgZ2V0Q29uZiA9IG5hbWUgPT4gY29tcHV0ZVBhcmFtcygpLmdldCgnLS0nICsgbmFtZSkgfHwgZ2V0VmFyaWFibGUobmFtZSlcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmV4cG9ydCBjb25zdCBoYXNDb25mID0gbmFtZSA9PiBoYXNQYXJhbSgnLS0nICsgbmFtZSkgfHwgZ2V0VmFyaWFibGUobmFtZSkgIT09IG51bGxcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmV4cG9ydCBjb25zdCBwcm9kdWN0aW9uID0gaGFzQ29uZigncHJvZHVjdGlvbicpXG4iLCIvKipcbiAqIE9mdGVuIHVzZWQgY29uZGl0aW9ucy5cbiAqXG4gKiBAbW9kdWxlIGNvbmRpdGlvbnNcbiAqL1xuXG4vKipcbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAcGFyYW0ge1R8bnVsbHx1bmRlZmluZWR9IHZcbiAqIEByZXR1cm4ge1R8bnVsbH1cbiAqL1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmV4cG9ydCBjb25zdCB1bmRlZmluZWRUb051bGwgPSB2ID0+IHYgPT09IHVuZGVmaW5lZCA/IG51bGwgOiB2XG4iLCIvKipcbiAqIFV0aWxpdHkgZnVuY3Rpb25zIHRvIHdvcmsgd2l0aCBidWZmZXJzIChVaW50OEFycmF5KS5cbiAqXG4gKiBAbW9kdWxlIGJ1ZmZlclxuICovXG5cbmltcG9ydCAqIGFzIHN0cmluZyBmcm9tICcuL3N0cmluZy5qcydcbmltcG9ydCAqIGFzIGVudiBmcm9tICcuL2Vudmlyb25tZW50LmpzJ1xuaW1wb3J0ICogYXMgZW5jb2RpbmcgZnJvbSAnLi9lbmNvZGluZy5qcydcbmltcG9ydCAqIGFzIGRlY29kaW5nIGZyb20gJy4vZGVjb2RpbmcuanMnXG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IGxlblxuICovXG5leHBvcnQgY29uc3QgY3JlYXRlVWludDhBcnJheUZyb21MZW4gPSBsZW4gPT4gbmV3IFVpbnQ4QXJyYXkobGVuKVxuXG4vKipcbiAqIENyZWF0ZSBVaW50OEFycmF5IHdpdGggaW5pdGlhbCBjb250ZW50IGZyb20gYnVmZmVyXG4gKlxuICogQHBhcmFtIHtBcnJheUJ1ZmZlcn0gYnVmZmVyXG4gKiBAcGFyYW0ge251bWJlcn0gYnl0ZU9mZnNldFxuICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aFxuICovXG5leHBvcnQgY29uc3QgY3JlYXRlVWludDhBcnJheVZpZXdGcm9tQXJyYXlCdWZmZXIgPSAoYnVmZmVyLCBieXRlT2Zmc2V0LCBsZW5ndGgpID0+IG5ldyBVaW50OEFycmF5KGJ1ZmZlciwgYnl0ZU9mZnNldCwgbGVuZ3RoKVxuXG4vKipcbiAqIENyZWF0ZSBVaW50OEFycmF5IHdpdGggaW5pdGlhbCBjb250ZW50IGZyb20gYnVmZmVyXG4gKlxuICogQHBhcmFtIHtBcnJheUJ1ZmZlcn0gYnVmZmVyXG4gKi9cbmV4cG9ydCBjb25zdCBjcmVhdGVVaW50OEFycmF5RnJvbUFycmF5QnVmZmVyID0gYnVmZmVyID0+IG5ldyBVaW50OEFycmF5KGJ1ZmZlcilcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbi8qKlxuICogQHBhcmFtIHtVaW50OEFycmF5fSBieXRlc1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5jb25zdCB0b0Jhc2U2NEJyb3dzZXIgPSBieXRlcyA9PiB7XG4gIGxldCBzID0gJydcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBieXRlcy5ieXRlTGVuZ3RoOyBpKyspIHtcbiAgICBzICs9IHN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZXNbaV0pXG4gIH1cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHJldHVybiBidG9hKHMpXG59XG5cbi8qKlxuICogQHBhcmFtIHtVaW50OEFycmF5fSBieXRlc1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5jb25zdCB0b0Jhc2U2NE5vZGUgPSBieXRlcyA9PiBCdWZmZXIuZnJvbShieXRlcy5idWZmZXIsIGJ5dGVzLmJ5dGVPZmZzZXQsIGJ5dGVzLmJ5dGVMZW5ndGgpLnRvU3RyaW5nKCdiYXNlNjQnKVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gc1xuICogQHJldHVybiB7VWludDhBcnJheX1cbiAqL1xuY29uc3QgZnJvbUJhc2U2NEJyb3dzZXIgPSBzID0+IHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIGNvbnN0IGEgPSBhdG9iKHMpXG4gIGNvbnN0IGJ5dGVzID0gY3JlYXRlVWludDhBcnJheUZyb21MZW4oYS5sZW5ndGgpXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgIGJ5dGVzW2ldID0gYS5jaGFyQ29kZUF0KGkpXG4gIH1cbiAgcmV0dXJuIGJ5dGVzXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHNcbiAqL1xuY29uc3QgZnJvbUJhc2U2NE5vZGUgPSBzID0+IHtcbiAgY29uc3QgYnVmID0gQnVmZmVyLmZyb20ocywgJ2Jhc2U2NCcpXG4gIHJldHVybiBuZXcgVWludDhBcnJheShidWYuYnVmZmVyLCBidWYuYnl0ZU9mZnNldCwgYnVmLmJ5dGVMZW5ndGgpXG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5leHBvcnQgY29uc3QgdG9CYXNlNjQgPSBlbnYuaXNCcm93c2VyID8gdG9CYXNlNjRCcm93c2VyIDogdG9CYXNlNjROb2RlXG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5leHBvcnQgY29uc3QgZnJvbUJhc2U2NCA9IGVudi5pc0Jyb3dzZXIgPyBmcm9tQmFzZTY0QnJvd3NlciA6IGZyb21CYXNlNjROb2RlXG5cbi8qKlxuICogQ29weSB0aGUgY29udGVudCBvZiBhbiBVaW50OEFycmF5IHZpZXcgdG8gYSBuZXcgQXJyYXlCdWZmZXIuXG4gKlxuICogQHBhcmFtIHtVaW50OEFycmF5fSB1aW50OEFycmF5XG4gKiBAcmV0dXJuIHtVaW50OEFycmF5fVxuICovXG5leHBvcnQgY29uc3QgY29weVVpbnQ4QXJyYXkgPSB1aW50OEFycmF5ID0+IHtcbiAgY29uc3QgbmV3QnVmID0gY3JlYXRlVWludDhBcnJheUZyb21MZW4odWludDhBcnJheS5ieXRlTGVuZ3RoKVxuICBuZXdCdWYuc2V0KHVpbnQ4QXJyYXkpXG4gIHJldHVybiBuZXdCdWZcbn1cblxuLyoqXG4gKiBFbmNvZGUgYW55dGhpbmcgYXMgYSBVSW50OEFycmF5LiBJdCdzIGEgcHVuIG9uIHR5cGVzY3JpcHRzJ3MgYGFueWAgdHlwZS5cbiAqIFNlZSBlbmNvZGluZy53cml0ZUFueSBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAqXG4gKiBAcGFyYW0ge2FueX0gZGF0YVxuICogQHJldHVybiB7VWludDhBcnJheX1cbiAqL1xuZXhwb3J0IGNvbnN0IGVuY29kZUFueSA9IGRhdGEgPT4ge1xuICBjb25zdCBlbmNvZGVyID0gZW5jb2RpbmcuY3JlYXRlRW5jb2RlcigpXG4gIGVuY29kaW5nLndyaXRlQW55KGVuY29kZXIsIGRhdGEpXG4gIHJldHVybiBlbmNvZGluZy50b1VpbnQ4QXJyYXkoZW5jb2Rlcilcbn1cblxuLyoqXG4gKiBEZWNvZGUgYW4gYW55LWVuY29kZWQgdmFsdWUuXG4gKlxuICogQHBhcmFtIHtVaW50OEFycmF5fSBidWZcbiAqIEByZXR1cm4ge2FueX1cbiAqL1xuZXhwb3J0IGNvbnN0IGRlY29kZUFueSA9IGJ1ZiA9PiBkZWNvZGluZy5yZWFkQW55KGRlY29kaW5nLmNyZWF0ZURlY29kZXIoYnVmKSlcbiIsIi8qIGVzbGludC1lbnYgYnJvd3NlciAqL1xuXG4vKipcbiAqIEJpbmFyeSBkYXRhIGNvbnN0YW50cy5cbiAqXG4gKiBAbW9kdWxlIGJpbmFyeVxuICovXG5cbi8qKlxuICogbi10aCBiaXQgYWN0aXZhdGVkLlxuICpcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBCSVQxID0gMVxuZXhwb3J0IGNvbnN0IEJJVDIgPSAyXG5leHBvcnQgY29uc3QgQklUMyA9IDRcbmV4cG9ydCBjb25zdCBCSVQ0ID0gOFxuZXhwb3J0IGNvbnN0IEJJVDUgPSAxNlxuZXhwb3J0IGNvbnN0IEJJVDYgPSAzMlxuZXhwb3J0IGNvbnN0IEJJVDcgPSA2NFxuZXhwb3J0IGNvbnN0IEJJVDggPSAxMjhcbmV4cG9ydCBjb25zdCBCSVQ5ID0gMjU2XG5leHBvcnQgY29uc3QgQklUMTAgPSA1MTJcbmV4cG9ydCBjb25zdCBCSVQxMSA9IDEwMjRcbmV4cG9ydCBjb25zdCBCSVQxMiA9IDIwNDhcbmV4cG9ydCBjb25zdCBCSVQxMyA9IDQwOTZcbmV4cG9ydCBjb25zdCBCSVQxNCA9IDgxOTJcbmV4cG9ydCBjb25zdCBCSVQxNSA9IDE2Mzg0XG5leHBvcnQgY29uc3QgQklUMTYgPSAzMjc2OFxuZXhwb3J0IGNvbnN0IEJJVDE3ID0gNjU1MzZcbmV4cG9ydCBjb25zdCBCSVQxOCA9IDEgPDwgMTdcbmV4cG9ydCBjb25zdCBCSVQxOSA9IDEgPDwgMThcbmV4cG9ydCBjb25zdCBCSVQyMCA9IDEgPDwgMTlcbmV4cG9ydCBjb25zdCBCSVQyMSA9IDEgPDwgMjBcbmV4cG9ydCBjb25zdCBCSVQyMiA9IDEgPDwgMjFcbmV4cG9ydCBjb25zdCBCSVQyMyA9IDEgPDwgMjJcbmV4cG9ydCBjb25zdCBCSVQyNCA9IDEgPDwgMjNcbmV4cG9ydCBjb25zdCBCSVQyNSA9IDEgPDwgMjRcbmV4cG9ydCBjb25zdCBCSVQyNiA9IDEgPDwgMjVcbmV4cG9ydCBjb25zdCBCSVQyNyA9IDEgPDwgMjZcbmV4cG9ydCBjb25zdCBCSVQyOCA9IDEgPDwgMjdcbmV4cG9ydCBjb25zdCBCSVQyOSA9IDEgPDwgMjhcbmV4cG9ydCBjb25zdCBCSVQzMCA9IDEgPDwgMjlcbmV4cG9ydCBjb25zdCBCSVQzMSA9IDEgPDwgMzBcbmV4cG9ydCBjb25zdCBCSVQzMiA9IDEgPDwgMzFcblxuLyoqXG4gKiBGaXJzdCBuIGJpdHMgYWN0aXZhdGVkLlxuICpcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBCSVRTMCA9IDBcbmV4cG9ydCBjb25zdCBCSVRTMSA9IDFcbmV4cG9ydCBjb25zdCBCSVRTMiA9IDNcbmV4cG9ydCBjb25zdCBCSVRTMyA9IDdcbmV4cG9ydCBjb25zdCBCSVRTNCA9IDE1XG5leHBvcnQgY29uc3QgQklUUzUgPSAzMVxuZXhwb3J0IGNvbnN0IEJJVFM2ID0gNjNcbmV4cG9ydCBjb25zdCBCSVRTNyA9IDEyN1xuZXhwb3J0IGNvbnN0IEJJVFM4ID0gMjU1XG5leHBvcnQgY29uc3QgQklUUzkgPSA1MTFcbmV4cG9ydCBjb25zdCBCSVRTMTAgPSAxMDIzXG5leHBvcnQgY29uc3QgQklUUzExID0gMjA0N1xuZXhwb3J0IGNvbnN0IEJJVFMxMiA9IDQwOTVcbmV4cG9ydCBjb25zdCBCSVRTMTMgPSA4MTkxXG5leHBvcnQgY29uc3QgQklUUzE0ID0gMTYzODNcbmV4cG9ydCBjb25zdCBCSVRTMTUgPSAzMjc2N1xuZXhwb3J0IGNvbnN0IEJJVFMxNiA9IDY1NTM1XG5leHBvcnQgY29uc3QgQklUUzE3ID0gQklUMTggLSAxXG5leHBvcnQgY29uc3QgQklUUzE4ID0gQklUMTkgLSAxXG5leHBvcnQgY29uc3QgQklUUzE5ID0gQklUMjAgLSAxXG5leHBvcnQgY29uc3QgQklUUzIwID0gQklUMjEgLSAxXG5leHBvcnQgY29uc3QgQklUUzIxID0gQklUMjIgLSAxXG5leHBvcnQgY29uc3QgQklUUzIyID0gQklUMjMgLSAxXG5leHBvcnQgY29uc3QgQklUUzIzID0gQklUMjQgLSAxXG5leHBvcnQgY29uc3QgQklUUzI0ID0gQklUMjUgLSAxXG5leHBvcnQgY29uc3QgQklUUzI1ID0gQklUMjYgLSAxXG5leHBvcnQgY29uc3QgQklUUzI2ID0gQklUMjcgLSAxXG5leHBvcnQgY29uc3QgQklUUzI3ID0gQklUMjggLSAxXG5leHBvcnQgY29uc3QgQklUUzI4ID0gQklUMjkgLSAxXG5leHBvcnQgY29uc3QgQklUUzI5ID0gQklUMzAgLSAxXG5leHBvcnQgY29uc3QgQklUUzMwID0gQklUMzEgLSAxXG4vKipcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBCSVRTMzEgPSAweDdGRkZGRkZGXG4vKipcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBCSVRTMzIgPSAweEZGRkZGRkZGXG4iLCIvKipcbiAqIFV0aWxpdHkgaGVscGVycyBmb3Igd29ya2luZyB3aXRoIG51bWJlcnMuXG4gKlxuICogQG1vZHVsZSBudW1iZXJcbiAqL1xuXG5pbXBvcnQgKiBhcyBtYXRoIGZyb20gJy4vbWF0aC5qcydcbmltcG9ydCAqIGFzIGJpbmFyeSBmcm9tICcuL2JpbmFyeS5qcydcblxuZXhwb3J0IGNvbnN0IE1BWF9TQUZFX0lOVEVHRVIgPSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUlxuZXhwb3J0IGNvbnN0IE1JTl9TQUZFX0lOVEVHRVIgPSBOdW1iZXIuTUlOX1NBRkVfSU5URUdFUlxuXG5leHBvcnQgY29uc3QgTE9XRVNUX0lOVDMyID0gMSA8PCAzMVxuLyoqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgSElHSEVTVF9JTlQzMiA9IGJpbmFyeS5CSVRTMzFcblxuLyoqXG4gKiBAbW9kdWxlIG51bWJlclxuICovXG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5leHBvcnQgY29uc3QgaXNJbnRlZ2VyID0gTnVtYmVyLmlzSW50ZWdlciB8fCAobnVtID0+IHR5cGVvZiBudW0gPT09ICdudW1iZXInICYmIGlzRmluaXRlKG51bSkgJiYgbWF0aC5mbG9vcihudW0pID09PSBudW0pXG5leHBvcnQgY29uc3QgaXNOYU4gPSBOdW1iZXIuaXNOYU5cbmV4cG9ydCBjb25zdCBwYXJzZUludCA9IE51bWJlci5wYXJzZUludFxuIiwiLyoqXG4gKiBFZmZpY2llbnQgc2NoZW1hLWxlc3MgYmluYXJ5IGVuY29kaW5nIHdpdGggc3VwcG9ydCBmb3IgdmFyaWFibGUgbGVuZ3RoIGVuY29kaW5nLlxuICpcbiAqIFVzZSBbbGliMC9lbmNvZGluZ10gd2l0aCBbbGliMC9kZWNvZGluZ10uIEV2ZXJ5IGVuY29kaW5nIGZ1bmN0aW9uIGhhcyBhIGNvcnJlc3BvbmRpbmcgZGVjb2RpbmcgZnVuY3Rpb24uXG4gKlxuICogRW5jb2RlcyBudW1iZXJzIGluIGxpdHRsZS1lbmRpYW4gb3JkZXIgKGxlYXN0IHRvIG1vc3Qgc2lnbmlmaWNhbnQgYnl0ZSBvcmRlcilcbiAqIGFuZCBpcyBjb21wYXRpYmxlIHdpdGggR29sYW5nJ3MgYmluYXJ5IGVuY29kaW5nIChodHRwczovL2dvbGFuZy5vcmcvcGtnL2VuY29kaW5nL2JpbmFyeS8pXG4gKiB3aGljaCBpcyBhbHNvIHVzZWQgaW4gUHJvdG9jb2wgQnVmZmVycy5cbiAqXG4gKiBgYGBqc1xuICogLy8gZW5jb2Rpbmcgc3RlcFxuICogY29uc3QgZW5jb2RlciA9IG5ldyBlbmNvZGluZy5jcmVhdGVFbmNvZGVyKClcbiAqIGVuY29kaW5nLndyaXRlVmFyVWludChlbmNvZGVyLCAyNTYpXG4gKiBlbmNvZGluZy53cml0ZVZhclN0cmluZyhlbmNvZGVyLCAnSGVsbG8gd29ybGQhJylcbiAqIGNvbnN0IGJ1ZiA9IGVuY29kaW5nLnRvVWludDhBcnJheShlbmNvZGVyKVxuICogYGBgXG4gKlxuICogYGBganNcbiAqIC8vIGRlY29kaW5nIHN0ZXBcbiAqIGNvbnN0IGRlY29kZXIgPSBuZXcgZGVjb2RpbmcuY3JlYXRlRGVjb2RlcihidWYpXG4gKiBkZWNvZGluZy5yZWFkVmFyVWludChkZWNvZGVyKSAvLyA9PiAyNTZcbiAqIGRlY29kaW5nLnJlYWRWYXJTdHJpbmcoZGVjb2RlcikgLy8gPT4gJ0hlbGxvIHdvcmxkISdcbiAqIGRlY29kaW5nLmhhc0NvbnRlbnQoZGVjb2RlcikgLy8gPT4gZmFsc2UgLSBhbGwgZGF0YSBpcyByZWFkXG4gKiBgYGBcbiAqXG4gKiBAbW9kdWxlIGVuY29kaW5nXG4gKi9cblxuaW1wb3J0ICogYXMgYnVmZmVyIGZyb20gJy4vYnVmZmVyLmpzJ1xuaW1wb3J0ICogYXMgbWF0aCBmcm9tICcuL21hdGguanMnXG5pbXBvcnQgKiBhcyBudW1iZXIgZnJvbSAnLi9udW1iZXIuanMnXG5pbXBvcnQgKiBhcyBiaW5hcnkgZnJvbSAnLi9iaW5hcnkuanMnXG5cbi8qKlxuICogQSBCaW5hcnlFbmNvZGVyIGhhbmRsZXMgdGhlIGVuY29kaW5nIHRvIGFuIFVpbnQ4QXJyYXkuXG4gKi9cbmV4cG9ydCBjbGFzcyBFbmNvZGVyIHtcbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHRoaXMuY3BvcyA9IDBcbiAgICB0aGlzLmNidWYgPSBuZXcgVWludDhBcnJheSgxMDApXG4gICAgLyoqXG4gICAgICogQHR5cGUge0FycmF5PFVpbnQ4QXJyYXk+fVxuICAgICAqL1xuICAgIHRoaXMuYnVmcyA9IFtdXG4gIH1cbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEByZXR1cm4ge0VuY29kZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBjcmVhdGVFbmNvZGVyID0gKCkgPT4gbmV3IEVuY29kZXIoKVxuXG4vKipcbiAqIFRoZSBjdXJyZW50IGxlbmd0aCBvZiB0aGUgZW5jb2RlZCBkYXRhLlxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtFbmNvZGVyfSBlbmNvZGVyXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBsZW5ndGggPSBlbmNvZGVyID0+IHtcbiAgbGV0IGxlbiA9IGVuY29kZXIuY3Bvc1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGVuY29kZXIuYnVmcy5sZW5ndGg7IGkrKykge1xuICAgIGxlbiArPSBlbmNvZGVyLmJ1ZnNbaV0ubGVuZ3RoXG4gIH1cbiAgcmV0dXJuIGxlblxufVxuXG4vKipcbiAqIFRyYW5zZm9ybSB0byBVaW50OEFycmF5LlxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtFbmNvZGVyfSBlbmNvZGVyXG4gKiBAcmV0dXJuIHtVaW50OEFycmF5fSBUaGUgY3JlYXRlZCBBcnJheUJ1ZmZlci5cbiAqL1xuZXhwb3J0IGNvbnN0IHRvVWludDhBcnJheSA9IGVuY29kZXIgPT4ge1xuICBjb25zdCB1aW50OGFyciA9IG5ldyBVaW50OEFycmF5KGxlbmd0aChlbmNvZGVyKSlcbiAgbGV0IGN1clBvcyA9IDBcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbmNvZGVyLmJ1ZnMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBkID0gZW5jb2Rlci5idWZzW2ldXG4gICAgdWludDhhcnIuc2V0KGQsIGN1clBvcylcbiAgICBjdXJQb3MgKz0gZC5sZW5ndGhcbiAgfVxuICB1aW50OGFyci5zZXQoYnVmZmVyLmNyZWF0ZVVpbnQ4QXJyYXlWaWV3RnJvbUFycmF5QnVmZmVyKGVuY29kZXIuY2J1Zi5idWZmZXIsIDAsIGVuY29kZXIuY3BvcyksIGN1clBvcylcbiAgcmV0dXJuIHVpbnQ4YXJyXG59XG5cbi8qKlxuICogVmVyaWZ5IHRoYXQgaXQgaXMgcG9zc2libGUgdG8gd3JpdGUgYGxlbmAgYnl0ZXMgd3RpaG91dCBjaGVja2luZy4gSWZcbiAqIG5lY2Vzc2FyeSwgYSBuZXcgQnVmZmVyIHdpdGggdGhlIHJlcXVpcmVkIGxlbmd0aCBpcyBhdHRhY2hlZC5cbiAqXG4gKiBAcGFyYW0ge0VuY29kZXJ9IGVuY29kZXJcbiAqIEBwYXJhbSB7bnVtYmVyfSBsZW5cbiAqL1xuY29uc3QgdmVyaWZ5TGVuID0gKGVuY29kZXIsIGxlbikgPT4ge1xuICBjb25zdCBidWZmZXJMZW4gPSBlbmNvZGVyLmNidWYubGVuZ3RoXG4gIGlmIChidWZmZXJMZW4gLSBlbmNvZGVyLmNwb3MgPCBsZW4pIHtcbiAgICBlbmNvZGVyLmJ1ZnMucHVzaChidWZmZXIuY3JlYXRlVWludDhBcnJheVZpZXdGcm9tQXJyYXlCdWZmZXIoZW5jb2Rlci5jYnVmLmJ1ZmZlciwgMCwgZW5jb2Rlci5jcG9zKSlcbiAgICBlbmNvZGVyLmNidWYgPSBuZXcgVWludDhBcnJheShtYXRoLm1heChidWZmZXJMZW4sIGxlbikgKiAyKVxuICAgIGVuY29kZXIuY3BvcyA9IDBcbiAgfVxufVxuXG4vKipcbiAqIFdyaXRlIG9uZSBieXRlIHRvIHRoZSBlbmNvZGVyLlxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtFbmNvZGVyfSBlbmNvZGVyXG4gKiBAcGFyYW0ge251bWJlcn0gbnVtIFRoZSBieXRlIHRoYXQgaXMgdG8gYmUgZW5jb2RlZC5cbiAqL1xuZXhwb3J0IGNvbnN0IHdyaXRlID0gKGVuY29kZXIsIG51bSkgPT4ge1xuICBjb25zdCBidWZmZXJMZW4gPSBlbmNvZGVyLmNidWYubGVuZ3RoXG4gIGlmIChlbmNvZGVyLmNwb3MgPT09IGJ1ZmZlckxlbikge1xuICAgIGVuY29kZXIuYnVmcy5wdXNoKGVuY29kZXIuY2J1ZilcbiAgICBlbmNvZGVyLmNidWYgPSBuZXcgVWludDhBcnJheShidWZmZXJMZW4gKiAyKVxuICAgIGVuY29kZXIuY3BvcyA9IDBcbiAgfVxuICBlbmNvZGVyLmNidWZbZW5jb2Rlci5jcG9zKytdID0gbnVtXG59XG5cbi8qKlxuICogV3JpdGUgb25lIGJ5dGUgYXQgYSBzcGVjaWZpYyBwb3NpdGlvbi5cbiAqIFBvc2l0aW9uIG11c3QgYWxyZWFkeSBiZSB3cml0dGVuIChpLmUuIGVuY29kZXIubGVuZ3RoID4gcG9zKVxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtFbmNvZGVyfSBlbmNvZGVyXG4gKiBAcGFyYW0ge251bWJlcn0gcG9zIFBvc2l0aW9uIHRvIHdoaWNoIHRvIHdyaXRlIGRhdGFcbiAqIEBwYXJhbSB7bnVtYmVyfSBudW0gVW5zaWduZWQgOC1iaXQgaW50ZWdlclxuICovXG5leHBvcnQgY29uc3Qgc2V0ID0gKGVuY29kZXIsIHBvcywgbnVtKSA9PiB7XG4gIGxldCBidWZmZXIgPSBudWxsXG4gIC8vIGl0ZXJhdGUgYWxsIGJ1ZmZlcnMgYW5kIGFkanVzdCBwb3NpdGlvblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGVuY29kZXIuYnVmcy5sZW5ndGggJiYgYnVmZmVyID09PSBudWxsOyBpKyspIHtcbiAgICBjb25zdCBiID0gZW5jb2Rlci5idWZzW2ldXG4gICAgaWYgKHBvcyA8IGIubGVuZ3RoKSB7XG4gICAgICBidWZmZXIgPSBiIC8vIGZvdW5kIGJ1ZmZlclxuICAgIH0gZWxzZSB7XG4gICAgICBwb3MgLT0gYi5sZW5ndGhcbiAgICB9XG4gIH1cbiAgaWYgKGJ1ZmZlciA9PT0gbnVsbCkge1xuICAgIC8vIHVzZSBjdXJyZW50IGJ1ZmZlclxuICAgIGJ1ZmZlciA9IGVuY29kZXIuY2J1ZlxuICB9XG4gIGJ1ZmZlcltwb3NdID0gbnVtXG59XG5cbi8qKlxuICogV3JpdGUgb25lIGJ5dGUgYXMgYW4gdW5zaWduZWQgaW50ZWdlci5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7RW5jb2Rlcn0gZW5jb2RlclxuICogQHBhcmFtIHtudW1iZXJ9IG51bSBUaGUgbnVtYmVyIHRoYXQgaXMgdG8gYmUgZW5jb2RlZC5cbiAqL1xuZXhwb3J0IGNvbnN0IHdyaXRlVWludDggPSB3cml0ZVxuXG4vKipcbiAqIFdyaXRlIG9uZSBieXRlIGFzIGFuIHVuc2lnbmVkIEludGVnZXIgYXQgYSBzcGVjaWZpYyBsb2NhdGlvbi5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7RW5jb2Rlcn0gZW5jb2RlclxuICogQHBhcmFtIHtudW1iZXJ9IHBvcyBUaGUgbG9jYXRpb24gd2hlcmUgdGhlIGRhdGEgd2lsbCBiZSB3cml0dGVuLlxuICogQHBhcmFtIHtudW1iZXJ9IG51bSBUaGUgbnVtYmVyIHRoYXQgaXMgdG8gYmUgZW5jb2RlZC5cbiAqL1xuZXhwb3J0IGNvbnN0IHNldFVpbnQ4ID0gc2V0XG5cbi8qKlxuICogV3JpdGUgdHdvIGJ5dGVzIGFzIGFuIHVuc2lnbmVkIGludGVnZXIuXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge0VuY29kZXJ9IGVuY29kZXJcbiAqIEBwYXJhbSB7bnVtYmVyfSBudW0gVGhlIG51bWJlciB0aGF0IGlzIHRvIGJlIGVuY29kZWQuXG4gKi9cbmV4cG9ydCBjb25zdCB3cml0ZVVpbnQxNiA9IChlbmNvZGVyLCBudW0pID0+IHtcbiAgd3JpdGUoZW5jb2RlciwgbnVtICYgYmluYXJ5LkJJVFM4KVxuICB3cml0ZShlbmNvZGVyLCAobnVtID4+PiA4KSAmIGJpbmFyeS5CSVRTOClcbn1cbi8qKlxuICogV3JpdGUgdHdvIGJ5dGVzIGFzIGFuIHVuc2lnbmVkIGludGVnZXIgYXQgYSBzcGVjaWZpYyBsb2NhdGlvbi5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7RW5jb2Rlcn0gZW5jb2RlclxuICogQHBhcmFtIHtudW1iZXJ9IHBvcyBUaGUgbG9jYXRpb24gd2hlcmUgdGhlIGRhdGEgd2lsbCBiZSB3cml0dGVuLlxuICogQHBhcmFtIHtudW1iZXJ9IG51bSBUaGUgbnVtYmVyIHRoYXQgaXMgdG8gYmUgZW5jb2RlZC5cbiAqL1xuZXhwb3J0IGNvbnN0IHNldFVpbnQxNiA9IChlbmNvZGVyLCBwb3MsIG51bSkgPT4ge1xuICBzZXQoZW5jb2RlciwgcG9zLCBudW0gJiBiaW5hcnkuQklUUzgpXG4gIHNldChlbmNvZGVyLCBwb3MgKyAxLCAobnVtID4+PiA4KSAmIGJpbmFyeS5CSVRTOClcbn1cblxuLyoqXG4gKiBXcml0ZSB0d28gYnl0ZXMgYXMgYW4gdW5zaWduZWQgaW50ZWdlclxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtFbmNvZGVyfSBlbmNvZGVyXG4gKiBAcGFyYW0ge251bWJlcn0gbnVtIFRoZSBudW1iZXIgdGhhdCBpcyB0byBiZSBlbmNvZGVkLlxuICovXG5leHBvcnQgY29uc3Qgd3JpdGVVaW50MzIgPSAoZW5jb2RlciwgbnVtKSA9PiB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgNDsgaSsrKSB7XG4gICAgd3JpdGUoZW5jb2RlciwgbnVtICYgYmluYXJ5LkJJVFM4KVxuICAgIG51bSA+Pj49IDhcbiAgfVxufVxuXG4vKipcbiAqIFdyaXRlIHR3byBieXRlcyBhcyBhbiB1bnNpZ25lZCBpbnRlZ2VyIGluIGJpZyBlbmRpYW4gb3JkZXIuXG4gKiAobW9zdCBzaWduaWZpY2FudCBieXRlIGZpcnN0KVxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtFbmNvZGVyfSBlbmNvZGVyXG4gKiBAcGFyYW0ge251bWJlcn0gbnVtIFRoZSBudW1iZXIgdGhhdCBpcyB0byBiZSBlbmNvZGVkLlxuICovXG5leHBvcnQgY29uc3Qgd3JpdGVVaW50MzJCaWdFbmRpYW4gPSAoZW5jb2RlciwgbnVtKSA9PiB7XG4gIGZvciAobGV0IGkgPSAzOyBpID49IDA7IGktLSkge1xuICAgIHdyaXRlKGVuY29kZXIsIChudW0gPj4+ICg4ICogaSkpICYgYmluYXJ5LkJJVFM4KVxuICB9XG59XG5cbi8qKlxuICogV3JpdGUgdHdvIGJ5dGVzIGFzIGFuIHVuc2lnbmVkIGludGVnZXIgYXQgYSBzcGVjaWZpYyBsb2NhdGlvbi5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7RW5jb2Rlcn0gZW5jb2RlclxuICogQHBhcmFtIHtudW1iZXJ9IHBvcyBUaGUgbG9jYXRpb24gd2hlcmUgdGhlIGRhdGEgd2lsbCBiZSB3cml0dGVuLlxuICogQHBhcmFtIHtudW1iZXJ9IG51bSBUaGUgbnVtYmVyIHRoYXQgaXMgdG8gYmUgZW5jb2RlZC5cbiAqL1xuZXhwb3J0IGNvbnN0IHNldFVpbnQzMiA9IChlbmNvZGVyLCBwb3MsIG51bSkgPT4ge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgIHNldChlbmNvZGVyLCBwb3MgKyBpLCBudW0gJiBiaW5hcnkuQklUUzgpXG4gICAgbnVtID4+Pj0gOFxuICB9XG59XG5cbi8qKlxuICogV3JpdGUgYSB2YXJpYWJsZSBsZW5ndGggdW5zaWduZWQgaW50ZWdlci5cbiAqXG4gKiBFbmNvZGVzIGludGVnZXJzIGluIHRoZSByYW5nZSBmcm9tIFswLCA0Mjk0OTY3Mjk1XSAvIFswLCAweGZmZmZmZmZmXS4gKG1heCAzMiBiaXQgdW5zaWduZWQgaW50ZWdlcilcbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7RW5jb2Rlcn0gZW5jb2RlclxuICogQHBhcmFtIHtudW1iZXJ9IG51bSBUaGUgbnVtYmVyIHRoYXQgaXMgdG8gYmUgZW5jb2RlZC5cbiAqL1xuZXhwb3J0IGNvbnN0IHdyaXRlVmFyVWludCA9IChlbmNvZGVyLCBudW0pID0+IHtcbiAgd2hpbGUgKG51bSA+IGJpbmFyeS5CSVRTNykge1xuICAgIHdyaXRlKGVuY29kZXIsIGJpbmFyeS5CSVQ4IHwgKGJpbmFyeS5CSVRTNyAmIG51bSkpXG4gICAgbnVtID4+Pj0gN1xuICB9XG4gIHdyaXRlKGVuY29kZXIsIGJpbmFyeS5CSVRTNyAmIG51bSlcbn1cblxuLyoqXG4gKiBXcml0ZSBhIHZhcmlhYmxlIGxlbmd0aCBpbnRlZ2VyLlxuICpcbiAqIEVuY29kZXMgaW50ZWdlcnMgaW4gdGhlIHJhbmdlIGZyb20gWy0yMTQ3NDgzNjQ4LCAtMjE0NzQ4MzY0N10uXG4gKlxuICogV2UgZG9uJ3QgdXNlIHppZy16YWcgZW5jb2RpbmcgYmVjYXVzZSB3ZSB3YW50IHRvIGtlZXAgdGhlIG9wdGlvbiBvcGVuXG4gKiB0byB1c2UgdGhlIHNhbWUgZnVuY3Rpb24gZm9yIEJpZ0ludCBhbmQgNTNiaXQgaW50ZWdlcnMgKGRvdWJsZXMpLlxuICpcbiAqIFdlIHVzZSB0aGUgN3RoIGJpdCBpbnN0ZWFkIGZvciBzaWduYWxpbmcgdGhhdCB0aGlzIGlzIGEgbmVnYXRpdmUgbnVtYmVyLlxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtFbmNvZGVyfSBlbmNvZGVyXG4gKiBAcGFyYW0ge251bWJlcn0gbnVtIFRoZSBudW1iZXIgdGhhdCBpcyB0byBiZSBlbmNvZGVkLlxuICovXG5leHBvcnQgY29uc3Qgd3JpdGVWYXJJbnQgPSAoZW5jb2RlciwgbnVtKSA9PiB7XG4gIGNvbnN0IGlzTmVnYXRpdmUgPSBtYXRoLmlzTmVnYXRpdmVaZXJvKG51bSlcbiAgaWYgKGlzTmVnYXRpdmUpIHtcbiAgICBudW0gPSAtbnVtXG4gIH1cbiAgLy8gICAgICAgICAgICAgfC0gd2hldGhlciB0byBjb250aW51ZSByZWFkaW5nICAgICAgICAgfC0gd2hldGhlciBpcyBuZWdhdGl2ZSAgICAgfC0gbnVtYmVyXG4gIHdyaXRlKGVuY29kZXIsIChudW0gPiBiaW5hcnkuQklUUzYgPyBiaW5hcnkuQklUOCA6IDApIHwgKGlzTmVnYXRpdmUgPyBiaW5hcnkuQklUNyA6IDApIHwgKGJpbmFyeS5CSVRTNiAmIG51bSkpXG4gIG51bSA+Pj49IDZcbiAgLy8gV2UgZG9uJ3QgbmVlZCB0byBjb25zaWRlciB0aGUgY2FzZSBvZiBudW0gPT09IDAgc28gd2UgY2FuIHVzZSBhIGRpZmZlcmVudFxuICAvLyBwYXR0ZXJuIGhlcmUgdGhhbiBhYm92ZS5cbiAgd2hpbGUgKG51bSA+IDApIHtcbiAgICB3cml0ZShlbmNvZGVyLCAobnVtID4gYmluYXJ5LkJJVFM3ID8gYmluYXJ5LkJJVDggOiAwKSB8IChiaW5hcnkuQklUUzcgJiBudW0pKVxuICAgIG51bSA+Pj49IDdcbiAgfVxufVxuXG4vKipcbiAqIFdyaXRlIGEgdmFyaWFibGUgbGVuZ3RoIHN0cmluZy5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7RW5jb2Rlcn0gZW5jb2RlclxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciBUaGUgc3RyaW5nIHRoYXQgaXMgdG8gYmUgZW5jb2RlZC5cbiAqL1xuZXhwb3J0IGNvbnN0IHdyaXRlVmFyU3RyaW5nID0gKGVuY29kZXIsIHN0cikgPT4ge1xuICBjb25zdCBlbmNvZGVkU3RyaW5nID0gdW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KHN0cikpXG4gIGNvbnN0IGxlbiA9IGVuY29kZWRTdHJpbmcubGVuZ3RoXG4gIHdyaXRlVmFyVWludChlbmNvZGVyLCBsZW4pXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICB3cml0ZShlbmNvZGVyLCAvKiogQHR5cGUge251bWJlcn0gKi8gKGVuY29kZWRTdHJpbmcuY29kZVBvaW50QXQoaSkpKVxuICB9XG59XG5cbi8qKlxuICogV3JpdGUgdGhlIGNvbnRlbnQgb2YgYW5vdGhlciBFbmNvZGVyLlxuICpcbiAqIEBUT0RPOiBjYW4gYmUgaW1wcm92ZWQhXG4gKiAgICAgICAgLSBOb3RlOiBTaG91bGQgY29uc2lkZXIgdGhhdCB3aGVuIGFwcGVuZGluZyBhIGxvdCBvZiBzbWFsbCBFbmNvZGVycywgd2Ugc2hvdWxkIHJhdGhlciBjbG9uZSB0aGFuIHJlZmVyZW5jaW5nIHRoZSBvbGQgc3RydWN0dXJlLlxuICogICAgICAgICAgICAgICAgRW5jb2RlcnMgc3RhcnQgd2l0aCBhIHJhdGhlciBiaWcgaW5pdGlhbCBidWZmZXIuXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge0VuY29kZXJ9IGVuY29kZXIgVGhlIGVuVWludDhBcnJcbiAqIEBwYXJhbSB7RW5jb2Rlcn0gYXBwZW5kIFRoZSBCaW5hcnlFbmNvZGVyIHRvIGJlIHdyaXR0ZW4uXG4gKi9cbmV4cG9ydCBjb25zdCB3cml0ZUJpbmFyeUVuY29kZXIgPSAoZW5jb2RlciwgYXBwZW5kKSA9PiB3cml0ZVVpbnQ4QXJyYXkoZW5jb2RlciwgdG9VaW50OEFycmF5KGFwcGVuZCkpXG5cbi8qKlxuICogQXBwZW5kIGZpeGVkLWxlbmd0aCBVaW50OEFycmF5IHRvIHRoZSBlbmNvZGVyLlxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtFbmNvZGVyfSBlbmNvZGVyXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IHVpbnQ4QXJyYXlcbiAqL1xuZXhwb3J0IGNvbnN0IHdyaXRlVWludDhBcnJheSA9IChlbmNvZGVyLCB1aW50OEFycmF5KSA9PiB7XG4gIGNvbnN0IGJ1ZmZlckxlbiA9IGVuY29kZXIuY2J1Zi5sZW5ndGhcbiAgY29uc3QgY3BvcyA9IGVuY29kZXIuY3Bvc1xuICBjb25zdCBsZWZ0Q29weUxlbiA9IG1hdGgubWluKGJ1ZmZlckxlbiAtIGNwb3MsIHVpbnQ4QXJyYXkubGVuZ3RoKVxuICBjb25zdCByaWdodENvcHlMZW4gPSB1aW50OEFycmF5Lmxlbmd0aCAtIGxlZnRDb3B5TGVuXG4gIGVuY29kZXIuY2J1Zi5zZXQodWludDhBcnJheS5zdWJhcnJheSgwLCBsZWZ0Q29weUxlbiksIGNwb3MpXG4gIGVuY29kZXIuY3BvcyArPSBsZWZ0Q29weUxlblxuICBpZiAocmlnaHRDb3B5TGVuID4gMCkge1xuICAgIC8vIFN0aWxsIHNvbWV0aGluZyB0byB3cml0ZSwgd3JpdGUgcmlnaHQgaGFsZi4uXG4gICAgLy8gQXBwZW5kIG5ldyBidWZmZXJcbiAgICBlbmNvZGVyLmJ1ZnMucHVzaChlbmNvZGVyLmNidWYpXG4gICAgLy8gbXVzdCBoYXZlIGF0IGxlYXN0IHNpemUgb2YgcmVtYWluaW5nIGJ1ZmZlclxuICAgIGVuY29kZXIuY2J1ZiA9IG5ldyBVaW50OEFycmF5KG1hdGgubWF4KGJ1ZmZlckxlbiAqIDIsIHJpZ2h0Q29weUxlbikpXG4gICAgLy8gY29weSBhcnJheVxuICAgIGVuY29kZXIuY2J1Zi5zZXQodWludDhBcnJheS5zdWJhcnJheShsZWZ0Q29weUxlbikpXG4gICAgZW5jb2Rlci5jcG9zID0gcmlnaHRDb3B5TGVuXG4gIH1cbn1cblxuLyoqXG4gKiBBcHBlbmQgYW4gVWludDhBcnJheSB0byBFbmNvZGVyLlxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtFbmNvZGVyfSBlbmNvZGVyXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IHVpbnQ4QXJyYXlcbiAqL1xuZXhwb3J0IGNvbnN0IHdyaXRlVmFyVWludDhBcnJheSA9IChlbmNvZGVyLCB1aW50OEFycmF5KSA9PiB7XG4gIHdyaXRlVmFyVWludChlbmNvZGVyLCB1aW50OEFycmF5LmJ5dGVMZW5ndGgpXG4gIHdyaXRlVWludDhBcnJheShlbmNvZGVyLCB1aW50OEFycmF5KVxufVxuXG4vKipcbiAqIENyZWF0ZSBhbiBEYXRhVmlldyBvZiB0aGUgbmV4dCBgbGVuYCBieXRlcy4gVXNlIGl0IHRvIHdyaXRlIGRhdGEgYWZ0ZXJcbiAqIGNhbGxpbmcgdGhpcyBmdW5jdGlvbi5cbiAqXG4gKiBgYGBqc1xuICogLy8gd3JpdGUgZmxvYXQzMiB1c2luZyBEYXRhVmlld1xuICogY29uc3QgZHYgPSB3cml0ZU9uRGF0YVZpZXcoZW5jb2RlciwgNClcbiAqIGR2LnNldEZsb2F0MzIoMCwgMS4xKVxuICogLy8gcmVhZCBmbG9hdDMyIHVzaW5nIERhdGFWaWV3XG4gKiBjb25zdCBkdiA9IHJlYWRGcm9tRGF0YVZpZXcoZW5jb2RlciwgNClcbiAqIGR2LmdldEZsb2F0MzIoMCkgLy8gPT4gMS4xMDAwMDAwMjM4NDE4NTggKGxlYXZpbmcgaXQgdG8gdGhlIHJlYWRlciB0byBmaW5kIG91dCB3aHkgdGhpcyBpcyB0aGUgY29ycmVjdCByZXN1bHQpXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge0VuY29kZXJ9IGVuY29kZXJcbiAqIEBwYXJhbSB7bnVtYmVyfSBsZW5cbiAqIEByZXR1cm4ge0RhdGFWaWV3fVxuICovXG5leHBvcnQgY29uc3Qgd3JpdGVPbkRhdGFWaWV3ID0gKGVuY29kZXIsIGxlbikgPT4ge1xuICB2ZXJpZnlMZW4oZW5jb2RlciwgbGVuKVxuICBjb25zdCBkdmlldyA9IG5ldyBEYXRhVmlldyhlbmNvZGVyLmNidWYuYnVmZmVyLCBlbmNvZGVyLmNwb3MsIGxlbilcbiAgZW5jb2Rlci5jcG9zICs9IGxlblxuICByZXR1cm4gZHZpZXdcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0VuY29kZXJ9IGVuY29kZXJcbiAqIEBwYXJhbSB7bnVtYmVyfSBudW1cbiAqL1xuZXhwb3J0IGNvbnN0IHdyaXRlRmxvYXQzMiA9IChlbmNvZGVyLCBudW0pID0+IHdyaXRlT25EYXRhVmlldyhlbmNvZGVyLCA0KS5zZXRGbG9hdDMyKDAsIG51bSwgZmFsc2UpXG5cbi8qKlxuICogQHBhcmFtIHtFbmNvZGVyfSBlbmNvZGVyXG4gKiBAcGFyYW0ge251bWJlcn0gbnVtXG4gKi9cbmV4cG9ydCBjb25zdCB3cml0ZUZsb2F0NjQgPSAoZW5jb2RlciwgbnVtKSA9PiB3cml0ZU9uRGF0YVZpZXcoZW5jb2RlciwgOCkuc2V0RmxvYXQ2NCgwLCBudW0sIGZhbHNlKVxuXG4vKipcbiAqIEBwYXJhbSB7RW5jb2Rlcn0gZW5jb2RlclxuICogQHBhcmFtIHtiaWdpbnR9IG51bVxuICovXG5leHBvcnQgY29uc3Qgd3JpdGVCaWdJbnQ2NCA9IChlbmNvZGVyLCBudW0pID0+IC8qKiBAdHlwZSB7YW55fSAqLyAod3JpdGVPbkRhdGFWaWV3KGVuY29kZXIsIDgpKS5zZXRCaWdJbnQ2NCgwLCBudW0sIGZhbHNlKVxuXG4vKipcbiAqIEBwYXJhbSB7RW5jb2Rlcn0gZW5jb2RlclxuICogQHBhcmFtIHtiaWdpbnR9IG51bVxuICovXG5leHBvcnQgY29uc3Qgd3JpdGVCaWdVaW50NjQgPSAoZW5jb2RlciwgbnVtKSA9PiAvKiogQHR5cGUge2FueX0gKi8gKHdyaXRlT25EYXRhVmlldyhlbmNvZGVyLCA4KSkuc2V0QmlnVWludDY0KDAsIG51bSwgZmFsc2UpXG5cbmNvbnN0IGZsb2F0VGVzdEJlZCA9IG5ldyBEYXRhVmlldyhuZXcgQXJyYXlCdWZmZXIoNCkpXG4vKipcbiAqIENoZWNrIGlmIGEgbnVtYmVyIGNhbiBiZSBlbmNvZGVkIGFzIGEgMzIgYml0IGZsb2F0LlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBudW1cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmNvbnN0IGlzRmxvYXQzMiA9IG51bSA9PiB7XG4gIGZsb2F0VGVzdEJlZC5zZXRGbG9hdDMyKDAsIG51bSlcbiAgcmV0dXJuIGZsb2F0VGVzdEJlZC5nZXRGbG9hdDMyKDApID09PSBudW1cbn1cblxuLyoqXG4gKiBFbmNvZGUgZGF0YSB3aXRoIGVmZmljaWVudCBiaW5hcnkgZm9ybWF0LlxuICpcbiAqIERpZmZlcmVuY2VzIHRvIEpTT046XG4gKiDigKIgVHJhbnNmb3JtcyBkYXRhIHRvIGEgYmluYXJ5IGZvcm1hdCAobm90IHRvIGEgc3RyaW5nKVxuICog4oCiIEVuY29kZXMgdW5kZWZpbmVkLCBOYU4sIGFuZCBBcnJheUJ1ZmZlciAodGhlc2UgY2FuJ3QgYmUgcmVwcmVzZW50ZWQgaW4gSlNPTilcbiAqIOKAoiBOdW1iZXJzIGFyZSBlZmZpY2llbnRseSBlbmNvZGVkIGVpdGhlciBhcyBhIHZhcmlhYmxlIGxlbmd0aCBpbnRlZ2VyLCBhcyBhXG4gKiAgIDMyIGJpdCBmbG9hdCwgYXMgYSA2NCBiaXQgZmxvYXQsIG9yIGFzIGEgNjQgYml0IGJpZ2ludC5cbiAqXG4gKiBFbmNvZGluZyB0YWJsZTpcbiAqXG4gKiB8IERhdGEgVHlwZSAgICAgICAgICAgfCBQcmVmaXggICB8IEVuY29kaW5nIE1ldGhvZCAgICB8IENvbW1lbnQgfFxuICogfCAtLS0tLS0tLS0tLS0tLS0tLS0tIHwgLS0tLS0tLS0gfCAtLS0tLS0tLS0tLS0tLS0tLS0gfCAtLS0tLS0tIHxcbiAqIHwgdW5kZWZpbmVkICAgICAgICAgICB8IDEyNyAgICAgIHwgICAgICAgICAgICAgICAgICAgIHwgRnVuY3Rpb25zLCBzeW1ib2wsIGFuZCBldmVyeXRoaW5nIHRoYXQgY2Fubm90IGJlIGlkZW50aWZpZWQgaXMgZW5jb2RlZCBhcyB1bmRlZmluZWQgfFxuICogfCBudWxsICAgICAgICAgICAgICAgIHwgMTI2ICAgICAgfCAgICAgICAgICAgICAgICAgICAgfCB8XG4gKiB8IGludGVnZXIgICAgICAgICAgICAgfCAxMjUgICAgICB8IHdyaXRlVmFySW50ICAgICAgICB8IE9ubHkgZW5jb2RlcyAzMiBiaXQgc2lnbmVkIGludGVnZXJzIHxcbiAqIHwgZmxvYXQzMiAgICAgICAgICAgICB8IDEyNCAgICAgIHwgd3JpdGVGbG9hdDMyICAgICAgIHwgfFxuICogfCBmbG9hdDY0ICAgICAgICAgICAgIHwgMTIzICAgICAgfCB3cml0ZUZsb2F0NjQgICAgICAgfCB8XG4gKiB8IGJpZ2ludCAgICAgICAgICAgICAgfCAxMjIgICAgICB8IHdyaXRlQmlnSW50NjQgICAgICB8IHxcbiAqIHwgYm9vbGVhbiAoZmFsc2UpICAgICB8IDEyMSAgICAgIHwgICAgICAgICAgICAgICAgICAgIHwgVHJ1ZSBhbmQgZmFsc2UgYXJlIGRpZmZlcmVudCBkYXRhIHR5cGVzIHNvIHdlIHNhdmUgdGhlIGZvbGxvd2luZyBieXRlIHxcbiAqIHwgYm9vbGVhbiAodHJ1ZSkgICAgICB8IDEyMCAgICAgIHwgICAgICAgICAgICAgICAgICAgIHwgLSAwYjAxMTExMDAwIHNvIHRoZSBsYXN0IGJpdCBkZXRlcm1pbmVzIHdoZXRoZXIgdHJ1ZSBvciBmYWxzZSB8XG4gKiB8IHN0cmluZyAgICAgICAgICAgICAgfCAxMTkgICAgICB8IHdyaXRlVmFyU3RyaW5nICAgICB8IHxcbiAqIHwgb2JqZWN0PHN0cmluZyxhbnk+ICB8IDExOCAgICAgIHwgY3VzdG9tICAgICAgICAgICAgIHwgV3JpdGVzIHtsZW5ndGh9IHRoZW4ge2xlbmd0aH0ga2V5LXZhbHVlIHBhaXJzIHxcbiAqIHwgYXJyYXk8YW55PiAgICAgICAgICB8IDExNyAgICAgIHwgY3VzdG9tICAgICAgICAgICAgIHwgV3JpdGVzIHtsZW5ndGh9IHRoZW4ge2xlbmd0aH0ganNvbiB2YWx1ZXMgfFxuICogfCBVaW50OEFycmF5ICAgICAgICAgIHwgMTE2ICAgICAgfCB3cml0ZVZhclVpbnQ4QXJyYXkgfCBXZSB1c2UgVWludDhBcnJheSBmb3IgYW55IGtpbmQgb2YgYmluYXJ5IGRhdGEgfFxuICpcbiAqIFJlYXNvbnMgZm9yIHRoZSBkZWNyZWFzaW5nIHByZWZpeDpcbiAqIFdlIG5lZWQgdGhlIGZpcnN0IGJpdCBmb3IgZXh0ZW5kYWJpbGl0eSAobGF0ZXIgd2UgbWF5IHdhbnQgdG8gZW5jb2RlIHRoZVxuICogcHJlZml4IHdpdGggd3JpdGVWYXJVaW50KS4gVGhlIHJlbWFpbmluZyA3IGJpdHMgYXJlIGRpdmlkZWQgYXMgZm9sbG93czpcbiAqIFswLTMwXSAgIHRoZSBiZWdpbm5pbmcgb2YgdGhlIGRhdGEgcmFuZ2UgaXMgdXNlZCBmb3IgY3VzdG9tIHB1cnBvc2VzXG4gKiAgICAgICAgICAoZGVmaW5lZCBieSB0aGUgZnVuY3Rpb24gdGhhdCB1c2VzIHRoaXMgbGlicmFyeSlcbiAqIFszMS0xMjddIHRoZSBlbmQgb2YgdGhlIGRhdGEgcmFuZ2UgaXMgdXNlZCBmb3IgZGF0YSBlbmNvZGluZyBieVxuICogICAgICAgICAgbGliMC9lbmNvZGluZy5qc1xuICpcbiAqIEBwYXJhbSB7RW5jb2Rlcn0gZW5jb2RlclxuICogQHBhcmFtIHt1bmRlZmluZWR8bnVsbHxudW1iZXJ8YmlnaW50fGJvb2xlYW58c3RyaW5nfE9iamVjdDxzdHJpbmcsYW55PnxBcnJheTxhbnk+fFVpbnQ4QXJyYXl9IGRhdGFcbiAqL1xuZXhwb3J0IGNvbnN0IHdyaXRlQW55ID0gKGVuY29kZXIsIGRhdGEpID0+IHtcbiAgc3dpdGNoICh0eXBlb2YgZGF0YSkge1xuICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICAvLyBUWVBFIDExOTogU1RSSU5HXG4gICAgICB3cml0ZShlbmNvZGVyLCAxMTkpXG4gICAgICB3cml0ZVZhclN0cmluZyhlbmNvZGVyLCBkYXRhKVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdudW1iZXInOlxuICAgICAgaWYgKG51bWJlci5pc0ludGVnZXIoZGF0YSkgJiYgbWF0aC5hYnMoZGF0YSkgPD0gYmluYXJ5LkJJVFMzMSkge1xuICAgICAgICAvLyBUWVBFIDEyNTogSU5URUdFUlxuICAgICAgICB3cml0ZShlbmNvZGVyLCAxMjUpXG4gICAgICAgIHdyaXRlVmFySW50KGVuY29kZXIsIGRhdGEpXG4gICAgICB9IGVsc2UgaWYgKGlzRmxvYXQzMihkYXRhKSkge1xuICAgICAgICAvLyBUWVBFIDEyNDogRkxPQVQzMlxuICAgICAgICB3cml0ZShlbmNvZGVyLCAxMjQpXG4gICAgICAgIHdyaXRlRmxvYXQzMihlbmNvZGVyLCBkYXRhKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gVFlQRSAxMjM6IEZMT0FUNjRcbiAgICAgICAgd3JpdGUoZW5jb2RlciwgMTIzKVxuICAgICAgICB3cml0ZUZsb2F0NjQoZW5jb2RlciwgZGF0YSlcbiAgICAgIH1cbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnYmlnaW50JzpcbiAgICAgIC8vIFRZUEUgMTIyOiBCaWdJbnRcbiAgICAgIHdyaXRlKGVuY29kZXIsIDEyMilcbiAgICAgIHdyaXRlQmlnSW50NjQoZW5jb2RlciwgZGF0YSlcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgIGlmIChkYXRhID09PSBudWxsKSB7XG4gICAgICAgIC8vIFRZUEUgMTI2OiBudWxsXG4gICAgICAgIHdyaXRlKGVuY29kZXIsIDEyNilcbiAgICAgIH0gZWxzZSBpZiAoZGF0YSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgIC8vIFRZUEUgMTE3OiBBcnJheVxuICAgICAgICB3cml0ZShlbmNvZGVyLCAxMTcpXG4gICAgICAgIHdyaXRlVmFyVWludChlbmNvZGVyLCBkYXRhLmxlbmd0aClcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgd3JpdGVBbnkoZW5jb2RlciwgZGF0YVtpXSlcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChkYXRhIGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgICAgICAvLyBUWVBFIDExNjogQXJyYXlCdWZmZXJcbiAgICAgICAgd3JpdGUoZW5jb2RlciwgMTE2KVxuICAgICAgICB3cml0ZVZhclVpbnQ4QXJyYXkoZW5jb2RlciwgZGF0YSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFRZUEUgMTE4OiBPYmplY3RcbiAgICAgICAgd3JpdGUoZW5jb2RlciwgMTE4KVxuICAgICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoZGF0YSlcbiAgICAgICAgd3JpdGVWYXJVaW50KGVuY29kZXIsIGtleXMubGVuZ3RoKVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBjb25zdCBrZXkgPSBrZXlzW2ldXG4gICAgICAgICAgd3JpdGVWYXJTdHJpbmcoZW5jb2Rlciwga2V5KVxuICAgICAgICAgIHdyaXRlQW55KGVuY29kZXIsIGRhdGFba2V5XSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdib29sZWFuJzpcbiAgICAgIC8vIFRZUEUgMTIwLzEyMTogYm9vbGVhbiAodHJ1ZS9mYWxzZSlcbiAgICAgIHdyaXRlKGVuY29kZXIsIGRhdGEgPyAxMjAgOiAxMjEpXG4gICAgICBicmVha1xuICAgIGRlZmF1bHQ6XG4gICAgICAvLyBUWVBFIDEyNzogdW5kZWZpbmVkXG4gICAgICB3cml0ZShlbmNvZGVyLCAxMjcpXG4gIH1cbn1cblxuLyoqXG4gKiBOb3cgY29tZSBhIGZldyBzdGF0ZWZ1bCBlbmNvZGVyIHRoYXQgaGF2ZSB0aGVpciBvd24gY2xhc3Nlcy5cbiAqL1xuXG4vKipcbiAqIEJhc2ljIFJ1biBMZW5ndGggRW5jb2RlciAtIGEgYmFzaWMgY29tcHJlc3Npb24gaW1wbGVtZW50YXRpb24uXG4gKlxuICogRW5jb2RlcyBbMSwxLDEsN10gdG8gWzEsMyw3LDFdICgzIHRpbWVzIDEsIDEgdGltZSA3KS4gVGhpcyBlbmNvZGVyIG1pZ2h0IGRvIG1vcmUgaGFybSB0aGFuIGdvb2QgaWYgdGhlcmUgYXJlIGEgbG90IG9mIHZhbHVlcyB0aGF0IGFyZSBub3QgcmVwZWF0ZWQuXG4gKlxuICogSXQgd2FzIG9yaWdpbmFsbHkgdXNlZCBmb3IgaW1hZ2UgY29tcHJlc3Npb24uIENvb2wgLi4gYXJ0aWNsZSBodHRwOi8vY3NicnVjZS5jb20vY2JtL3RyYW5zYWN0b3IvcGRmcy90cmFuc192N19pMDYucGRmXG4gKlxuICogQG5vdGUgVCBtdXN0IG5vdCBiZSBudWxsIVxuICpcbiAqIEB0ZW1wbGF0ZSBUXG4gKi9cbmV4cG9ydCBjbGFzcyBSbGVFbmNvZGVyIGV4dGVuZHMgRW5jb2RlciB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKEVuY29kZXIsIFQpOnZvaWR9IHdyaXRlclxuICAgKi9cbiAgY29uc3RydWN0b3IgKHdyaXRlcikge1xuICAgIHN1cGVyKClcbiAgICAvKipcbiAgICAgKiBUaGUgd3JpdGVyXG4gICAgICovXG4gICAgdGhpcy53ID0gd3JpdGVyXG4gICAgLyoqXG4gICAgICogQ3VycmVudCBzdGF0ZVxuICAgICAqIEB0eXBlIHtUfG51bGx9XG4gICAgICovXG4gICAgdGhpcy5zID0gbnVsbFxuICAgIHRoaXMuY291bnQgPSAwXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtUfSB2XG4gICAqL1xuICB3cml0ZSAodikge1xuICAgIGlmICh0aGlzLnMgPT09IHYpIHtcbiAgICAgIHRoaXMuY291bnQrK1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodGhpcy5jb3VudCA+IDApIHtcbiAgICAgICAgLy8gZmx1c2ggY291bnRlciwgdW5sZXNzIHRoaXMgaXMgdGhlIGZpcnN0IHZhbHVlIChjb3VudCA9IDApXG4gICAgICAgIHdyaXRlVmFyVWludCh0aGlzLCB0aGlzLmNvdW50IC0gMSkgLy8gc2luY2UgY291bnQgaXMgYWx3YXlzID4gMCwgd2UgY2FuIGRlY3JlbWVudCBieSBvbmUuIG5vbi1zdGFuZGFyZCBlbmNvZGluZyBmdHdcbiAgICAgIH1cbiAgICAgIHRoaXMuY291bnQgPSAxXG4gICAgICAvLyB3cml0ZSBmaXJzdCB2YWx1ZVxuICAgICAgdGhpcy53KHRoaXMsIHYpXG4gICAgICB0aGlzLnMgPSB2XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQmFzaWMgZGlmZiBkZWNvZGVyIHVzaW5nIHZhcmlhYmxlIGxlbmd0aCBlbmNvZGluZy5cbiAqXG4gKiBFbmNvZGVzIHRoZSB2YWx1ZXMgWzMsIDExMDAsIDExMDEsIDEwNTAsIDBdIHRvIFszLCAxMDk3LCAxLCAtNTEsIC0xMDUwXSB1c2luZyB3cml0ZVZhckludC5cbiAqL1xuZXhwb3J0IGNsYXNzIEludERpZmZFbmNvZGVyIGV4dGVuZHMgRW5jb2RlciB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnRcbiAgICovXG4gIGNvbnN0cnVjdG9yIChzdGFydCkge1xuICAgIHN1cGVyKClcbiAgICAvKipcbiAgICAgKiBDdXJyZW50IHN0YXRlXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLnMgPSBzdGFydFxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB2XG4gICAqL1xuICB3cml0ZSAodikge1xuICAgIHdyaXRlVmFySW50KHRoaXMsIHYgLSB0aGlzLnMpXG4gICAgdGhpcy5zID0gdlxuICB9XG59XG5cbi8qKlxuICogQSBjb21iaW5hdGlvbiBvZiBJbnREaWZmRW5jb2RlciBhbmQgUmxlRW5jb2Rlci5cbiAqXG4gKiBCYXNpY2FsbHkgZmlyc3Qgd3JpdGVzIHRoZSBJbnREaWZmRW5jb2RlciBhbmQgdGhlbiBjb3VudHMgZHVwbGljYXRlIGRpZmZzIHVzaW5nIFJsZUVuY29kaW5nLlxuICpcbiAqIEVuY29kZXMgdGhlIHZhbHVlcyBbMSwxLDEsMiwzLDQsNSw2XSBhcyBbMSwxLDAsMiwxLDVdIChSTEUoWzEsMCwwLDEsMSwxLDEsMV0pIOKHkiBSbGVJbnREaWZmWzEsMSwwLDIsMSw1XSlcbiAqL1xuZXhwb3J0IGNsYXNzIFJsZUludERpZmZFbmNvZGVyIGV4dGVuZHMgRW5jb2RlciB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnRcbiAgICovXG4gIGNvbnN0cnVjdG9yIChzdGFydCkge1xuICAgIHN1cGVyKClcbiAgICAvKipcbiAgICAgKiBDdXJyZW50IHN0YXRlXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLnMgPSBzdGFydFxuICAgIHRoaXMuY291bnQgPSAwXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IHZcbiAgICovXG4gIHdyaXRlICh2KSB7XG4gICAgaWYgKHRoaXMucyA9PT0gdiAmJiB0aGlzLmNvdW50ID4gMCkge1xuICAgICAgdGhpcy5jb3VudCsrXG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0aGlzLmNvdW50ID4gMCkge1xuICAgICAgICAvLyBmbHVzaCBjb3VudGVyLCB1bmxlc3MgdGhpcyBpcyB0aGUgZmlyc3QgdmFsdWUgKGNvdW50ID0gMClcbiAgICAgICAgd3JpdGVWYXJVaW50KHRoaXMsIHRoaXMuY291bnQgLSAxKSAvLyBzaW5jZSBjb3VudCBpcyBhbHdheXMgPiAwLCB3ZSBjYW4gZGVjcmVtZW50IGJ5IG9uZS4gbm9uLXN0YW5kYXJkIGVuY29kaW5nIGZ0d1xuICAgICAgfVxuICAgICAgdGhpcy5jb3VudCA9IDFcbiAgICAgIC8vIHdyaXRlIGZpcnN0IHZhbHVlXG4gICAgICB3cml0ZVZhckludCh0aGlzLCB2IC0gdGhpcy5zKVxuICAgICAgdGhpcy5zID0gdlxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7VWludE9wdFJsZUVuY29kZXJ9IGVuY29kZXJcbiAqL1xuY29uc3QgZmx1c2hVaW50T3B0UmxlRW5jb2RlciA9IGVuY29kZXIgPT4ge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAoZW5jb2Rlci5jb3VudCA+IDApIHtcbiAgICAvLyBmbHVzaCBjb3VudGVyLCB1bmxlc3MgdGhpcyBpcyB0aGUgZmlyc3QgdmFsdWUgKGNvdW50ID0gMClcbiAgICAvLyBjYXNlIDE6IGp1c3QgYSBzaW5nbGUgdmFsdWUuIHNldCBzaWduIHRvIHBvc2l0aXZlXG4gICAgLy8gY2FzZSAyOiB3cml0ZSBzZXZlcmFsIHZhbHVlcy4gc2V0IHNpZ24gdG8gbmVnYXRpdmUgdG8gaW5kaWNhdGUgdGhhdCB0aGVyZSBpcyBhIGxlbmd0aCBjb21pbmdcbiAgICB3cml0ZVZhckludChlbmNvZGVyLmVuY29kZXIsIGVuY29kZXIuY291bnQgPT09IDEgPyBlbmNvZGVyLnMgOiAtZW5jb2Rlci5zKVxuICAgIGlmIChlbmNvZGVyLmNvdW50ID4gMSkge1xuICAgICAgd3JpdGVWYXJVaW50KGVuY29kZXIuZW5jb2RlciwgZW5jb2Rlci5jb3VudCAtIDIpIC8vIHNpbmNlIGNvdW50IGlzIGFsd2F5cyA+IDEsIHdlIGNhbiBkZWNyZW1lbnQgYnkgb25lLiBub24tc3RhbmRhcmQgZW5jb2RpbmcgZnR3XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogT3B0aW1pemVkIFJsZSBlbmNvZGVyIHRoYXQgZG9lcyBub3Qgc3VmZmVyIGZyb20gdGhlIG1lbnRpb25lZCBwcm9ibGVtIG9mIHRoZSBiYXNpYyBSbGUgZW5jb2Rlci5cbiAqXG4gKiBJbnRlcm5hbGx5IHVzZXMgVmFySW50IGVuY29kZXIgdG8gd3JpdGUgdW5zaWduZWQgaW50ZWdlcnMuIElmIHRoZSBpbnB1dCBvY2N1cnMgbXVsdGlwbGUgdGltZXMsIHdlIHdyaXRlXG4gKiB3cml0ZSBpdCBhcyBhIG5lZ2F0aXZlIG51bWJlci4gVGhlIFVpbnRPcHRSbGVEZWNvZGVyIHRoZW4gdW5kZXJzdGFuZHMgdGhhdCBpdCBuZWVkcyB0byByZWFkIGEgY291bnQuXG4gKlxuICogRW5jb2RlcyBbMSwyLDMsMywzXSBhcyBbMSwyLC0zLDNdIChvbmNlIDEsIG9uY2UgMiwgdGhyZWUgdGltZXMgMylcbiAqL1xuZXhwb3J0IGNsYXNzIFVpbnRPcHRSbGVFbmNvZGVyIHtcbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHRoaXMuZW5jb2RlciA9IG5ldyBFbmNvZGVyKClcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMucyA9IDBcbiAgICB0aGlzLmNvdW50ID0gMFxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB2XG4gICAqL1xuICB3cml0ZSAodikge1xuICAgIGlmICh0aGlzLnMgPT09IHYpIHtcbiAgICAgIHRoaXMuY291bnQrK1xuICAgIH0gZWxzZSB7XG4gICAgICBmbHVzaFVpbnRPcHRSbGVFbmNvZGVyKHRoaXMpXG4gICAgICB0aGlzLmNvdW50ID0gMVxuICAgICAgdGhpcy5zID0gdlxuICAgIH1cbiAgfVxuXG4gIHRvVWludDhBcnJheSAoKSB7XG4gICAgZmx1c2hVaW50T3B0UmxlRW5jb2Rlcih0aGlzKVxuICAgIHJldHVybiB0b1VpbnQ4QXJyYXkodGhpcy5lbmNvZGVyKVxuICB9XG59XG5cbi8qKlxuICogSW5jcmVhc2luZyBVaW50IE9wdGltaXplZCBSTEUgRW5jb2RlclxuICpcbiAqIFRoZSBSTEUgZW5jb2RlciBjb3VudHMgdGhlIG51bWJlciBvZiBzYW1lIG9jY3VyZW5jZXMgb2YgdGhlIHNhbWUgdmFsdWUuXG4gKiBUaGUgSW5jVWludE9wdFJsZSBlbmNvZGVyIGNvdW50cyBpZiB0aGUgdmFsdWUgaW5jcmVhc2VzLlxuICogSS5lLiA3LCA4LCA5LCAxMCB3aWxsIGJlIGVuY29kZWQgYXMgWy03LCA0XS4gMSwgMywgNSB3aWxsIGJlIGVuY29kZWRcbiAqIGFzIFsxLCAzLCA1XS5cbiAqL1xuZXhwb3J0IGNsYXNzIEluY1VpbnRPcHRSbGVFbmNvZGVyIHtcbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHRoaXMuZW5jb2RlciA9IG5ldyBFbmNvZGVyKClcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMucyA9IDBcbiAgICB0aGlzLmNvdW50ID0gMFxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB2XG4gICAqL1xuICB3cml0ZSAodikge1xuICAgIGlmICh0aGlzLnMgKyB0aGlzLmNvdW50ID09PSB2KSB7XG4gICAgICB0aGlzLmNvdW50KytcbiAgICB9IGVsc2Uge1xuICAgICAgZmx1c2hVaW50T3B0UmxlRW5jb2Rlcih0aGlzKVxuICAgICAgdGhpcy5jb3VudCA9IDFcbiAgICAgIHRoaXMucyA9IHZcbiAgICB9XG4gIH1cblxuICB0b1VpbnQ4QXJyYXkgKCkge1xuICAgIGZsdXNoVWludE9wdFJsZUVuY29kZXIodGhpcylcbiAgICByZXR1cm4gdG9VaW50OEFycmF5KHRoaXMuZW5jb2RlcilcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7SW50RGlmZk9wdFJsZUVuY29kZXJ9IGVuY29kZXJcbiAqL1xuY29uc3QgZmx1c2hJbnREaWZmT3B0UmxlRW5jb2RlciA9IGVuY29kZXIgPT4ge1xuICBpZiAoZW5jb2Rlci5jb3VudCA+IDApIHtcbiAgICAvLyAgICAgICAgICAzMSBiaXQgbWFraW5nIHVwIHRoZSBkaWZmIHwgd2V0aGVyIHRvIHdyaXRlIHRoZSBjb3VudGVyXG4gICAgY29uc3QgZW5jb2RlZERpZmYgPSBlbmNvZGVyLmRpZmYgPDwgMSB8IChlbmNvZGVyLmNvdW50ID09PSAxID8gMCA6IDEpXG4gICAgLy8gZmx1c2ggY291bnRlciwgdW5sZXNzIHRoaXMgaXMgdGhlIGZpcnN0IHZhbHVlIChjb3VudCA9IDApXG4gICAgLy8gY2FzZSAxOiBqdXN0IGEgc2luZ2xlIHZhbHVlLiBzZXQgZmlyc3QgYml0IHRvIHBvc2l0aXZlXG4gICAgLy8gY2FzZSAyOiB3cml0ZSBzZXZlcmFsIHZhbHVlcy4gc2V0IGZpcnN0IGJpdCB0byBuZWdhdGl2ZSB0byBpbmRpY2F0ZSB0aGF0IHRoZXJlIGlzIGEgbGVuZ3RoIGNvbWluZ1xuICAgIHdyaXRlVmFySW50KGVuY29kZXIuZW5jb2RlciwgZW5jb2RlZERpZmYpXG4gICAgaWYgKGVuY29kZXIuY291bnQgPiAxKSB7XG4gICAgICB3cml0ZVZhclVpbnQoZW5jb2Rlci5lbmNvZGVyLCBlbmNvZGVyLmNvdW50IC0gMikgLy8gc2luY2UgY291bnQgaXMgYWx3YXlzID4gMSwgd2UgY2FuIGRlY3JlbWVudCBieSBvbmUuIG5vbi1zdGFuZGFyZCBlbmNvZGluZyBmdHdcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBBIGNvbWJpbmF0aW9uIG9mIHRoZSBJbnREaWZmRW5jb2RlciBhbmQgdGhlIFVpbnRPcHRSbGVFbmNvZGVyLlxuICpcbiAqIFRoZSBjb3VudCBhcHByb2FjaCBpcyBzaW1pbGFyIHRvIHRoZSBVaW50RGlmZk9wdFJsZUVuY29kZXIsIGJ1dCBpbnN0ZWFkIG9mIHVzaW5nIHRoZSBuZWdhdGl2ZSBiaXRmbGFnLCBpdCBlbmNvZGVzXG4gKiBpbiB0aGUgTFNCIHdoZXRoZXIgYSBjb3VudCBpcyB0byBiZSByZWFkLiBUaGVyZWZvcmUgdGhpcyBFbmNvZGVyIG9ubHkgc3VwcG9ydHMgMzEgYml0IGludGVnZXJzIVxuICpcbiAqIEVuY29kZXMgWzEsIDIsIDMsIDJdIGFzIFszLCAxLCA2LCAtMV0gKG1vcmUgc3BlY2lmaWNhbGx5IFsoMSA8PCAxKSB8IDEsICgzIDw8IDApIHwgMCwgLTFdKVxuICpcbiAqIEludGVybmFsbHkgdXNlcyB2YXJpYWJsZSBsZW5ndGggZW5jb2RpbmcuIENvbnRyYXJ5IHRvIG5vcm1hbCBVaW50VmFyIGVuY29kaW5nLCB0aGUgZmlyc3QgYnl0ZSBjb250YWluczpcbiAqICogMSBiaXQgdGhhdCBkZW5vdGVzIHdoZXRoZXIgdGhlIG5leHQgdmFsdWUgaXMgYSBjb3VudCAoTFNCKVxuICogKiAxIGJpdCB0aGF0IGRlbm90ZXMgd2hldGhlciB0aGlzIHZhbHVlIGlzIG5lZ2F0aXZlIChNU0IgLSAxKVxuICogKiAxIGJpdCB0aGF0IGRlbm90ZXMgd2hldGhlciB0byBjb250aW51ZSByZWFkaW5nIHRoZSB2YXJpYWJsZSBsZW5ndGggaW50ZWdlciAoTVNCKVxuICpcbiAqIFRoZXJlZm9yZSwgb25seSBmaXZlIGJpdHMgcmVtYWluIHRvIGVuY29kZSBkaWZmIHJhbmdlcy5cbiAqXG4gKiBVc2UgdGhpcyBFbmNvZGVyIG9ubHkgd2hlbiBhcHByb3ByaWF0ZS4gSW4gbW9zdCBjYXNlcywgdGhpcyBpcyBwcm9iYWJseSBhIGJhZCBpZGVhLlxuICovXG5leHBvcnQgY2xhc3MgSW50RGlmZk9wdFJsZUVuY29kZXIge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgdGhpcy5lbmNvZGVyID0gbmV3IEVuY29kZXIoKVxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5zID0gMFxuICAgIHRoaXMuY291bnQgPSAwXG4gICAgdGhpcy5kaWZmID0gMFxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB2XG4gICAqL1xuICB3cml0ZSAodikge1xuICAgIGlmICh0aGlzLmRpZmYgPT09IHYgLSB0aGlzLnMpIHtcbiAgICAgIHRoaXMucyA9IHZcbiAgICAgIHRoaXMuY291bnQrK1xuICAgIH0gZWxzZSB7XG4gICAgICBmbHVzaEludERpZmZPcHRSbGVFbmNvZGVyKHRoaXMpXG4gICAgICB0aGlzLmNvdW50ID0gMVxuICAgICAgdGhpcy5kaWZmID0gdiAtIHRoaXMuc1xuICAgICAgdGhpcy5zID0gdlxuICAgIH1cbiAgfVxuXG4gIHRvVWludDhBcnJheSAoKSB7XG4gICAgZmx1c2hJbnREaWZmT3B0UmxlRW5jb2Rlcih0aGlzKVxuICAgIHJldHVybiB0b1VpbnQ4QXJyYXkodGhpcy5lbmNvZGVyKVxuICB9XG59XG5cbi8qKlxuICogT3B0aW1pemVkIFN0cmluZyBFbmNvZGVyLlxuICpcbiAqIEVuY29kaW5nIG1hbnkgc21hbGwgc3RyaW5ncyBpbiBhIHNpbXBsZSBFbmNvZGVyIGlzIG5vdCB2ZXJ5IGVmZmljaWVudC4gVGhlIGZ1bmN0aW9uIGNhbGwgdG8gZGVjb2RlIGEgc3RyaW5nIHRha2VzIHNvbWUgdGltZSBhbmQgY3JlYXRlcyByZWZlcmVuY2VzIHRoYXQgbXVzdCBiZSBldmVudHVhbGx5IGRlbGV0ZWQuXG4gKiBJbiBwcmFjdGljZSwgd2hlbiBkZWNvZGluZyBzZXZlcmFsIG1pbGxpb24gc21hbGwgc3RyaW5ncywgdGhlIEdDIHdpbGwga2ljayBpbiBtb3JlIGFuZCBtb3JlIG9mdGVuIHRvIGNvbGxlY3Qgb3JwaGFuZWQgc3RyaW5nIG9iamVjdHMgKG9yIG1heWJlIHRoZXJlIGlzIGFub3RoZXIgcmVhc29uPykuXG4gKlxuICogVGhpcyBzdHJpbmcgZW5jb2RlciBzb2x2ZXMgdGhlIGFib3ZlIHByb2JsZW0uIEFsbCBzdHJpbmdzIGFyZSBjb25jYXRlbmF0ZWQgYW5kIHdyaXR0ZW4gYXMgYSBzaW5nbGUgc3RyaW5nIHVzaW5nIGEgc2luZ2xlIGVuY29kaW5nIGNhbGwuXG4gKlxuICogVGhlIGxlbmd0aHMgYXJlIGVuY29kZWQgdXNpbmcgYSBVaW50T3B0UmxlRW5jb2Rlci5cbiAqL1xuZXhwb3J0IGNsYXNzIFN0cmluZ0VuY29kZXIge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgLyoqXG4gICAgICogQHR5cGUge0FycmF5PHN0cmluZz59XG4gICAgICovXG4gICAgdGhpcy5zYXJyID0gW11cbiAgICB0aGlzLnMgPSAnJ1xuICAgIHRoaXMubGVuc0UgPSBuZXcgVWludE9wdFJsZUVuY29kZXIoKVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmdcbiAgICovXG4gIHdyaXRlIChzdHJpbmcpIHtcbiAgICB0aGlzLnMgKz0gc3RyaW5nXG4gICAgaWYgKHRoaXMucy5sZW5ndGggPiAxOSkge1xuICAgICAgdGhpcy5zYXJyLnB1c2godGhpcy5zKVxuICAgICAgdGhpcy5zID0gJydcbiAgICB9XG4gICAgdGhpcy5sZW5zRS53cml0ZShzdHJpbmcubGVuZ3RoKVxuICB9XG5cbiAgdG9VaW50OEFycmF5ICgpIHtcbiAgICBjb25zdCBlbmNvZGVyID0gbmV3IEVuY29kZXIoKVxuICAgIHRoaXMuc2Fyci5wdXNoKHRoaXMucylcbiAgICB0aGlzLnMgPSAnJ1xuICAgIHdyaXRlVmFyU3RyaW5nKGVuY29kZXIsIHRoaXMuc2Fyci5qb2luKCcnKSlcbiAgICB3cml0ZVVpbnQ4QXJyYXkoZW5jb2RlciwgdGhpcy5sZW5zRS50b1VpbnQ4QXJyYXkoKSlcbiAgICByZXR1cm4gdG9VaW50OEFycmF5KGVuY29kZXIpXG4gIH1cbn1cbiIsIi8qIGVzbGludC1lbnYgYnJvd3NlciAqL1xuZXhwb3J0IGNvbnN0IHBlcmZvcm1hbmNlID0gdHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgPyBudWxsIDogKHR5cGVvZiB3aW5kb3cucGVyZm9ybWFuY2UgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5wZXJmb3JtYW5jZSkgfHwgbnVsbFxuXG5jb25zdCBpc29DcnlwdG8gPSB0eXBlb2YgY3J5cHRvID09PSAndW5kZWZpbmVkJyA/IG51bGwgOiBjcnlwdG9cblxuLyoqXG4gKiBAdHlwZSB7ZnVuY3Rpb24obnVtYmVyKTpBcnJheUJ1ZmZlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IGNyeXB0b1JhbmRvbUJ1ZmZlciA9IGlzb0NyeXB0byAhPT0gbnVsbFxuICA/IGxlbiA9PiB7XG4gICAgLy8gYnJvd3NlclxuICAgIGNvbnN0IGJ1ZiA9IG5ldyBBcnJheUJ1ZmZlcihsZW4pXG4gICAgY29uc3QgYXJyID0gbmV3IFVpbnQ4QXJyYXkoYnVmKVxuICAgIGlzb0NyeXB0by5nZXRSYW5kb21WYWx1ZXMoYXJyKVxuICAgIHJldHVybiBidWZcbiAgfVxuICA6IGxlbiA9PiB7XG4gICAgLy8gcG9seWZpbGxcbiAgICBjb25zdCBidWYgPSBuZXcgQXJyYXlCdWZmZXIobGVuKVxuICAgIGNvbnN0IGFyciA9IG5ldyBVaW50OEFycmF5KGJ1ZilcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBhcnJbaV0gPSBNYXRoLmNlaWwoKE1hdGgucmFuZG9tKCkgKiAweEZGRkZGRkZGKSA+Pj4gMClcbiAgICB9XG4gICAgcmV0dXJuIGJ1ZlxuICB9XG4iLCJcbi8qKlxuICogSXNvbW9ycGhpYyBtb2R1bGUgZm9yIHRydWUgcmFuZG9tIG51bWJlcnMgLyBidWZmZXJzIC8gdXVpZHMuXG4gKlxuICogQXR0ZW50aW9uOiBmYWxscyBiYWNrIHRvIE1hdGgucmFuZG9tIGlmIHRoZSBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgY3J5cHRvLlxuICpcbiAqIEBtb2R1bGUgcmFuZG9tXG4gKi9cblxuaW1wb3J0ICogYXMgbWF0aCBmcm9tICcuL21hdGguanMnXG5pbXBvcnQgKiBhcyBiaW5hcnkgZnJvbSAnLi9iaW5hcnkuanMnXG5pbXBvcnQgeyBjcnlwdG9SYW5kb21CdWZmZXIgfSBmcm9tICcuL2lzb21vcnBoaWMuanMnXG5cbmV4cG9ydCBjb25zdCByYW5kID0gTWF0aC5yYW5kb21cblxuZXhwb3J0IGNvbnN0IHVpbnQzMiA9ICgpID0+IG5ldyBVaW50MzJBcnJheShjcnlwdG9SYW5kb21CdWZmZXIoNCkpWzBdXG5cbmV4cG9ydCBjb25zdCB1aW50NTMgPSAoKSA9PiB7XG4gIGNvbnN0IGFyciA9IG5ldyBVaW50MzJBcnJheShjcnlwdG9SYW5kb21CdWZmZXIoOCkpXG4gIHJldHVybiAoYXJyWzBdICYgYmluYXJ5LkJJVFMyMSkgKiAoYmluYXJ5LkJJVFMzMiArIDEpICsgKGFyclsxXSA+Pj4gMClcbn1cblxuLyoqXG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHtBcnJheTxUPn0gYXJyXG4gKiBAcmV0dXJuIHtUfVxuICovXG5leHBvcnQgY29uc3Qgb25lT2YgPSBhcnIgPT4gYXJyW21hdGguZmxvb3IocmFuZCgpICogYXJyLmxlbmd0aCldXG5cbi8vIEB0cy1pZ25vcmVcbmNvbnN0IHV1aWR2NFRlbXBsYXRlID0gWzFlN10gKyAtMWUzICsgLTRlMyArIC04ZTMgKyAtMWUxMVxuZXhwb3J0IGNvbnN0IHV1aWR2NCA9ICgpID0+IHV1aWR2NFRlbXBsYXRlLnJlcGxhY2UoL1swMThdL2csIC8qKiBAcGFyYW0ge251bWJlcn0gYyAqLyBjID0+XG4gIChjIF4gdWludDMyKCkgJiAxNSA+PiBjIC8gNCkudG9TdHJpbmcoMTYpXG4pXG4iLCIvKipcbiAqIEVycm9yIGhlbHBlcnMuXG4gKlxuICogQG1vZHVsZSBlcnJvclxuICovXG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBzXG4gKiBAcmV0dXJuIHtFcnJvcn1cbiAqL1xuZXhwb3J0IGNvbnN0IGNyZWF0ZSA9IHMgPT4gbmV3IEVycm9yKHMpXG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4vKipcbiAqIEB0aHJvd3Mge0Vycm9yfVxuICogQHJldHVybiB7bmV2ZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBtZXRob2RVbmltcGxlbWVudGVkID0gKCkgPT4ge1xuICB0aHJvdyBjcmVhdGUoJ01ldGhvZCB1bmltcGxlbWVudGVkJylcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbi8qKlxuICogQHRocm93cyB7RXJyb3J9XG4gKiBAcmV0dXJuIHtuZXZlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IHVuZXhwZWN0ZWRDYXNlID0gKCkgPT4ge1xuICB0aHJvdyBjcmVhdGUoJ1VuZXhwZWN0ZWQgY2FzZScpXG59XG4iLCIvKipcbiAqIENvbW1vbiBmdW5jdGlvbnMgYW5kIGZ1bmN0aW9uIGNhbGwgaGVscGVycy5cbiAqXG4gKiBAbW9kdWxlIGZ1bmN0aW9uXG4gKi9cblxuaW1wb3J0ICogYXMgYXJyYXkgZnJvbSAnLi9hcnJheS5qcydcbmltcG9ydCAqIGFzIG9iamVjdCBmcm9tICcuL29iamVjdC5qcydcblxuLyoqXG4gKiBDYWxscyBhbGwgZnVuY3Rpb25zIGluIGBmc2Agd2l0aCBhcmdzLiBPbmx5IHRocm93cyBhZnRlciBhbGwgZnVuY3Rpb25zIHdlcmUgY2FsbGVkLlxuICpcbiAqIEBwYXJhbSB7QXJyYXk8ZnVuY3Rpb24+fSBmc1xuICogQHBhcmFtIHtBcnJheTxhbnk+fSBhcmdzXG4gKi9cbmV4cG9ydCBjb25zdCBjYWxsQWxsID0gKGZzLCBhcmdzLCBpID0gMCkgPT4ge1xuICB0cnkge1xuICAgIGZvciAoOyBpIDwgZnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGZzW2ldKC4uLmFyZ3MpXG4gICAgfVxuICB9IGZpbmFsbHkge1xuICAgIGlmIChpIDwgZnMubGVuZ3RoKSB7XG4gICAgICBjYWxsQWxsKGZzLCBhcmdzLCBpICsgMSlcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IG5vcCA9ICgpID0+IHt9XG5cbi8qKlxuICogQHRlbXBsYXRlIFRcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKTpUfSBmXG4gKiBAcmV0dXJuIHtUfVxuICovXG5leHBvcnQgY29uc3QgYXBwbHkgPSBmID0+IGYoKVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBBXG4gKlxuICogQHBhcmFtIHtBfSBhXG4gKiBAcmV0dXJuIHtBfVxuICovXG5leHBvcnQgY29uc3QgaWQgPSBhID0+IGFcblxuLyoqXG4gKiBAdGVtcGxhdGUgVFxuICpcbiAqIEBwYXJhbSB7VH0gYVxuICogQHBhcmFtIHtUfSBiXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgY29uc3QgZXF1YWxpdHlTdHJpY3QgPSAoYSwgYikgPT4gYSA9PT0gYlxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBUXG4gKlxuICogQHBhcmFtIHtBcnJheTxUPnxvYmplY3R9IGFcbiAqIEBwYXJhbSB7QXJyYXk8VD58b2JqZWN0fSBiXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgY29uc3QgZXF1YWxpdHlGbGF0ID0gKGEsIGIpID0+IGEgPT09IGIgfHwgKGEgIT0gbnVsbCAmJiBiICE9IG51bGwgJiYgYS5jb25zdHJ1Y3RvciA9PT0gYi5jb25zdHJ1Y3RvciAmJiAoKGEgaW5zdGFuY2VvZiBBcnJheSAmJiBhcnJheS5lcXVhbEZsYXQoYSwgLyoqIEB0eXBlIHtBcnJheTxUPn0gKi8gKGIpKSkgfHwgKHR5cGVvZiBhID09PSAnb2JqZWN0JyAmJiBvYmplY3QuZXF1YWxGbGF0KGEsIGIpKSkpXG5cbi8qKlxuICogQHBhcmFtIHthbnl9IGFcbiAqIEBwYXJhbSB7YW55fSBiXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgY29uc3QgZXF1YWxpdHlEZWVwID0gKGEsIGIpID0+IHtcbiAgaWYgKGEgPT0gbnVsbCB8fCBiID09IG51bGwpIHtcbiAgICByZXR1cm4gZXF1YWxpdHlTdHJpY3QoYSwgYilcbiAgfVxuICBpZiAoYS5jb25zdHJ1Y3RvciAhPT0gYi5jb25zdHJ1Y3Rvcikge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG4gIGlmIChhID09PSBiKSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuICBzd2l0Y2ggKGEuY29uc3RydWN0b3IpIHtcbiAgICBjYXNlIEFycmF5QnVmZmVyOlxuICAgICAgYSA9IG5ldyBVaW50OEFycmF5KGEpXG4gICAgICBiID0gbmV3IFVpbnQ4QXJyYXkoYilcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZmFsbHRocm91Z2hcbiAgICBjYXNlIFVpbnQ4QXJyYXk6IHtcbiAgICAgIGlmIChhLmJ5dGVMZW5ndGggIT09IGIuYnl0ZUxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoYVtpXSAhPT0gYltpXSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBicmVha1xuICAgIH1cbiAgICBjYXNlIFNldDoge1xuICAgICAgaWYgKGEuc2l6ZSAhPT0gYi5zaXplKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgICAgZm9yIChjb25zdCB2YWx1ZSBvZiBhKSB7XG4gICAgICAgIGlmICghYi5oYXModmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJyZWFrXG4gICAgfVxuICAgIGNhc2UgTWFwOiB7XG4gICAgICBpZiAoYS5zaXplICE9PSBiLnNpemUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgICBmb3IgKGNvbnN0IGtleSBvZiBhLmtleXMoKSkge1xuICAgICAgICBpZiAoIWIuaGFzKGtleSkgfHwgIWVxdWFsaXR5RGVlcChhLmdldChrZXkpLCBiLmdldChrZXkpKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBicmVha1xuICAgIH1cbiAgICBjYXNlIE9iamVjdDpcbiAgICAgIGlmIChvYmplY3QubGVuZ3RoKGEpICE9PSBvYmplY3QubGVuZ3RoKGIpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgICAgZm9yIChjb25zdCBrZXkgaW4gYSkge1xuICAgICAgICBpZiAoIW9iamVjdC5oYXNQcm9wZXJ0eShhLCBrZXkpIHx8ICFlcXVhbGl0eURlZXAoYVtrZXldLCBiW2tleV0pKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJyZWFrXG4gICAgY2FzZSBBcnJheTpcbiAgICAgIGlmIChhLmxlbmd0aCAhPT0gYi5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKCFlcXVhbGl0eURlZXAoYVtpXSwgYltpXSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYnJlYWtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgcmV0dXJuIHRydWVcbn1cbiIsIi8qKlxuICogVXRpbGl0eSBtb2R1bGUgdG8gd29yayB3aXRoIEVjbWFTY3JpcHQgU3ltYm9scy5cbiAqXG4gKiBAbW9kdWxlIHN5bWJvbFxuICovXG5cbi8qKlxuICogUmV0dXJuIGZyZXNoIHN5bWJvbC5cbiAqXG4gKiBAcmV0dXJuIHtTeW1ib2x9XG4gKi9cbmV4cG9ydCBjb25zdCBjcmVhdGUgPSBTeW1ib2xcblxuLyoqXG4gKiBAcGFyYW0ge2FueX0gc1xuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGNvbnN0IGlzU3ltYm9sID0gcyA9PiB0eXBlb2YgcyA9PT0gJ3N5bWJvbCdcbiIsIi8qKlxuICogV29ya2luZyB3aXRoIHZhbHVlIHBhaXJzLlxuICpcbiAqIEBtb2R1bGUgcGFpclxuICovXG5cbi8qKlxuICogQHRlbXBsYXRlIEwsUlxuICovXG5leHBvcnQgY2xhc3MgUGFpciB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge0x9IGxlZnRcbiAgICogQHBhcmFtIHtSfSByaWdodFxuICAgKi9cbiAgY29uc3RydWN0b3IgKGxlZnQsIHJpZ2h0KSB7XG4gICAgdGhpcy5sZWZ0ID0gbGVmdFxuICAgIHRoaXMucmlnaHQgPSByaWdodFxuICB9XG59XG5cbi8qKlxuICogQHRlbXBsYXRlIEwsUlxuICogQHBhcmFtIHtMfSBsZWZ0XG4gKiBAcGFyYW0ge1J9IHJpZ2h0XG4gKiBAcmV0dXJuIHtQYWlyPEwsUj59XG4gKi9cbmV4cG9ydCBjb25zdCBjcmVhdGUgPSAobGVmdCwgcmlnaHQpID0+IG5ldyBQYWlyKGxlZnQsIHJpZ2h0KVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBMLFJcbiAqIEBwYXJhbSB7Un0gcmlnaHRcbiAqIEBwYXJhbSB7TH0gbGVmdFxuICogQHJldHVybiB7UGFpcjxMLFI+fVxuICovXG5leHBvcnQgY29uc3QgY3JlYXRlUmV2ZXJzZWQgPSAocmlnaHQsIGxlZnQpID0+IG5ldyBQYWlyKGxlZnQsIHJpZ2h0KVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBMLFJcbiAqIEBwYXJhbSB7QXJyYXk8UGFpcjxMLFI+Pn0gYXJyXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKEwsIFIpOmFueX0gZlxuICovXG5leHBvcnQgY29uc3QgZm9yRWFjaCA9IChhcnIsIGYpID0+IGFyci5mb3JFYWNoKHAgPT4gZihwLmxlZnQsIHAucmlnaHQpKVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBMLFIsWFxuICogQHBhcmFtIHtBcnJheTxQYWlyPEwsUj4+fSBhcnJcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oTCwgUik6WH0gZlxuICogQHJldHVybiB7QXJyYXk8WD59XG4gKi9cbmV4cG9ydCBjb25zdCBtYXAgPSAoYXJyLCBmKSA9PiBhcnIubWFwKHAgPT4gZihwLmxlZnQsIHAucmlnaHQpKVxuIiwiLyogZXNsaW50LWVudiBicm93c2VyICovXG5cbi8qKlxuICogVXRpbGl0eSBtb2R1bGUgdG8gd29yayB3aXRoIHRoZSBET00uXG4gKlxuICogQG1vZHVsZSBkb21cbiAqL1xuXG5pbXBvcnQgKiBhcyBwYWlyIGZyb20gJy4vcGFpci5qcydcbmltcG9ydCAqIGFzIG1hcCBmcm9tICcuL21hcC5qcydcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbi8qKlxuICogQHR5cGUge0RvY3VtZW50fVxuICovXG5leHBvcnQgY29uc3QgZG9jID0gLyoqIEB0eXBlIHtEb2N1bWVudH0gKi8gKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgPyBkb2N1bWVudCA6IHt9KVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKiBAcmV0dXJuIHtIVE1MRWxlbWVudH1cbiAqL1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmV4cG9ydCBjb25zdCBjcmVhdGVFbGVtZW50ID0gbmFtZSA9PiBkb2MuY3JlYXRlRWxlbWVudChuYW1lKVxuXG4vKipcbiAqIEByZXR1cm4ge0RvY3VtZW50RnJhZ21lbnR9XG4gKi9cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5leHBvcnQgY29uc3QgY3JlYXRlRG9jdW1lbnRGcmFnbWVudCA9ICgpID0+IGRvYy5jcmVhdGVEb2N1bWVudEZyYWdtZW50KClcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dFxuICogQHJldHVybiB7VGV4dH1cbiAqL1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmV4cG9ydCBjb25zdCBjcmVhdGVUZXh0Tm9kZSA9IHRleHQgPT4gZG9jLmNyZWF0ZVRleHROb2RlKHRleHQpXG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5leHBvcnQgY29uc3QgZG9tUGFyc2VyID0gLyoqIEB0eXBlIHtET01QYXJzZXJ9ICovICh0eXBlb2YgRE9NUGFyc2VyICE9PSAndW5kZWZpbmVkJyA/IG5ldyBET01QYXJzZXIoKSA6IG51bGwpXG5cbi8qKlxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0c1xuICovXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZXhwb3J0IGNvbnN0IGVtaXRDdXN0b21FdmVudCA9IChlbCwgbmFtZSwgb3B0cykgPT4gZWwuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQobmFtZSwgb3B0cykpXG5cbi8qKlxuICogQHBhcmFtIHtFbGVtZW50fSBlbFxuICogQHBhcmFtIHtBcnJheTxwYWlyLlBhaXI8c3RyaW5nLHN0cmluZ3xib29sZWFuPj59IGF0dHJzIEFycmF5IG9mIGtleS12YWx1ZSBwYWlyc1xuICogQHJldHVybiB7RWxlbWVudH1cbiAqL1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmV4cG9ydCBjb25zdCBzZXRBdHRyaWJ1dGVzID0gKGVsLCBhdHRycykgPT4ge1xuICBwYWlyLmZvckVhY2goYXR0cnMsIChrZXksIHZhbHVlKSA9PiB7XG4gICAgaWYgKHZhbHVlID09PSBmYWxzZSkge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKGtleSlcbiAgICB9IGVsc2UgaWYgKHZhbHVlID09PSB0cnVlKSB7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoa2V5LCAnJylcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgZWwuc2V0QXR0cmlidXRlKGtleSwgdmFsdWUpXG4gICAgfVxuICB9KVxuICByZXR1cm4gZWxcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsXG4gKiBAcGFyYW0ge01hcDxzdHJpbmcsIHN0cmluZz59IGF0dHJzIEFycmF5IG9mIGtleS12YWx1ZSBwYWlyc1xuICogQHJldHVybiB7RWxlbWVudH1cbiAqL1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmV4cG9ydCBjb25zdCBzZXRBdHRyaWJ1dGVzTWFwID0gKGVsLCBhdHRycykgPT4ge1xuICBhdHRycy5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiB7IGVsLnNldEF0dHJpYnV0ZShrZXksIHZhbHVlKSB9KVxuICByZXR1cm4gZWxcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0FycmF5PE5vZGU+fEhUTUxDb2xsZWN0aW9ufSBjaGlsZHJlblxuICogQHJldHVybiB7RG9jdW1lbnRGcmFnbWVudH1cbiAqL1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmV4cG9ydCBjb25zdCBmcmFnbWVudCA9IGNoaWxkcmVuID0+IHtcbiAgY29uc3QgZnJhZ21lbnQgPSBjcmVhdGVEb2N1bWVudEZyYWdtZW50KClcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgIGFwcGVuZENoaWxkKGZyYWdtZW50LCBjaGlsZHJlbltpXSlcbiAgfVxuICByZXR1cm4gZnJhZ21lbnRcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IHBhcmVudFxuICogQHBhcmFtIHtBcnJheTxOb2RlPn0gbm9kZXNcbiAqIEByZXR1cm4ge0VsZW1lbnR9XG4gKi9cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5leHBvcnQgY29uc3QgYXBwZW5kID0gKHBhcmVudCwgbm9kZXMpID0+IHtcbiAgYXBwZW5kQ2hpbGQocGFyZW50LCBmcmFnbWVudChub2RlcykpXG4gIHJldHVybiBwYXJlbnRcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbFxuICovXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZXhwb3J0IGNvbnN0IHJlbW92ZSA9IGVsID0+IGVsLnJlbW92ZSgpXG5cbi8qKlxuICogQHBhcmFtIHtFdmVudFRhcmdldH0gZWxcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKiBAcGFyYW0ge0V2ZW50TGlzdGVuZXJ9IGZcbiAqL1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmV4cG9ydCBjb25zdCBhZGRFdmVudExpc3RlbmVyID0gKGVsLCBuYW1lLCBmKSA9PiBlbC5hZGRFdmVudExpc3RlbmVyKG5hbWUsIGYpXG5cbi8qKlxuICogQHBhcmFtIHtFdmVudFRhcmdldH0gZWxcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKiBAcGFyYW0ge0V2ZW50TGlzdGVuZXJ9IGZcbiAqL1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmV4cG9ydCBjb25zdCByZW1vdmVFdmVudExpc3RlbmVyID0gKGVsLCBuYW1lLCBmKSA9PiBlbC5yZW1vdmVFdmVudExpc3RlbmVyKG5hbWUsIGYpXG5cbi8qKlxuICogQHBhcmFtIHtOb2RlfSBub2RlXG4gKiBAcGFyYW0ge0FycmF5PHBhaXIuUGFpcjxzdHJpbmcsRXZlbnRMaXN0ZW5lcj4+fSBsaXN0ZW5lcnNcbiAqIEByZXR1cm4ge05vZGV9XG4gKi9cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5leHBvcnQgY29uc3QgYWRkRXZlbnRMaXN0ZW5lcnMgPSAobm9kZSwgbGlzdGVuZXJzKSA9PiB7XG4gIHBhaXIuZm9yRWFjaChsaXN0ZW5lcnMsIChuYW1lLCBmKSA9PiBhZGRFdmVudExpc3RlbmVyKG5vZGUsIG5hbWUsIGYpKVxuICByZXR1cm4gbm9kZVxufVxuXG4vKipcbiAqIEBwYXJhbSB7Tm9kZX0gbm9kZVxuICogQHBhcmFtIHtBcnJheTxwYWlyLlBhaXI8c3RyaW5nLEV2ZW50TGlzdGVuZXI+Pn0gbGlzdGVuZXJzXG4gKiBAcmV0dXJuIHtOb2RlfVxuICovXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZXhwb3J0IGNvbnN0IHJlbW92ZUV2ZW50TGlzdGVuZXJzID0gKG5vZGUsIGxpc3RlbmVycykgPT4ge1xuICBwYWlyLmZvckVhY2gobGlzdGVuZXJzLCAobmFtZSwgZikgPT4gcmVtb3ZlRXZlbnRMaXN0ZW5lcihub2RlLCBuYW1lLCBmKSlcbiAgcmV0dXJuIG5vZGVcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICogQHBhcmFtIHtBcnJheTxwYWlyLlBhaXI8c3RyaW5nLHN0cmluZz58cGFpci5QYWlyPHN0cmluZyxib29sZWFuPj59IGF0dHJzIEFycmF5IG9mIGtleS12YWx1ZSBwYWlyc1xuICogQHBhcmFtIHtBcnJheTxOb2RlPn0gY2hpbGRyZW5cbiAqIEByZXR1cm4ge0VsZW1lbnR9XG4gKi9cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5leHBvcnQgY29uc3QgZWxlbWVudCA9IChuYW1lLCBhdHRycyA9IFtdLCBjaGlsZHJlbiA9IFtdKSA9PlxuICBhcHBlbmQoc2V0QXR0cmlidXRlcyhjcmVhdGVFbGVtZW50KG5hbWUpLCBhdHRycyksIGNoaWxkcmVuKVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aFxuICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodFxuICovXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZXhwb3J0IGNvbnN0IGNhbnZhcyA9ICh3aWR0aCwgaGVpZ2h0KSA9PiB7XG4gIGNvbnN0IGMgPSAvKiogQHR5cGUge0hUTUxDYW52YXNFbGVtZW50fSAqLyAoY3JlYXRlRWxlbWVudCgnY2FudmFzJykpXG4gIGMuaGVpZ2h0ID0gaGVpZ2h0XG4gIGMud2lkdGggPSB3aWR0aFxuICByZXR1cm4gY1xufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB0XG4gKiBAcmV0dXJuIHtUZXh0fVxuICovXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZXhwb3J0IGNvbnN0IHRleHQgPSBjcmVhdGVUZXh0Tm9kZVxuXG4vKipcbiAqIEBwYXJhbSB7cGFpci5QYWlyPHN0cmluZyxzdHJpbmc+fSBwYWlyXG4gKi9cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5leHBvcnQgY29uc3QgcGFpclRvU3R5bGVTdHJpbmcgPSBwYWlyID0+IGAke3BhaXIubGVmdH06JHtwYWlyLnJpZ2h0fTtgXG5cbi8qKlxuICogQHBhcmFtIHtBcnJheTxwYWlyLlBhaXI8c3RyaW5nLHN0cmluZz4+fSBwYWlyc1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZXhwb3J0IGNvbnN0IHBhaXJzVG9TdHlsZVN0cmluZyA9IHBhaXJzID0+IHBhaXJzLm1hcChwYWlyVG9TdHlsZVN0cmluZykuam9pbignJylcblxuLyoqXG4gKiBAcGFyYW0ge01hcDxzdHJpbmcsc3RyaW5nPn0gbVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZXhwb3J0IGNvbnN0IG1hcFRvU3R5bGVTdHJpbmcgPSBtID0+IG1hcC5tYXAobSwgKHZhbHVlLCBrZXkpID0+IGAke2tleX06JHt2YWx1ZX07YCkuam9pbignJylcblxuLyoqXG4gKiBAdG9kbyBzaG91bGQgYWx3YXlzIHF1ZXJ5IG9uIGEgZG9tIGVsZW1lbnRcbiAqXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fFNoYWRvd1Jvb3R9IGVsXG4gKiBAcGFyYW0ge3N0cmluZ30gcXVlcnlcbiAqIEByZXR1cm4ge0hUTUxFbGVtZW50IHwgbnVsbH1cbiAqL1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmV4cG9ydCBjb25zdCBxdWVyeVNlbGVjdG9yID0gKGVsLCBxdWVyeSkgPT4gZWwucXVlcnlTZWxlY3RvcihxdWVyeSlcblxuLyoqXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fFNoYWRvd1Jvb3R9IGVsXG4gKiBAcGFyYW0ge3N0cmluZ30gcXVlcnlcbiAqIEByZXR1cm4ge05vZGVMaXN0T2Y8SFRNTEVsZW1lbnQ+fVxuICovXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZXhwb3J0IGNvbnN0IHF1ZXJ5U2VsZWN0b3JBbGwgPSAoZWwsIHF1ZXJ5KSA9PiBlbC5xdWVyeVNlbGVjdG9yQWxsKHF1ZXJ5KVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBpZFxuICogQHJldHVybiB7SFRNTEVsZW1lbnR9XG4gKi9cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5leHBvcnQgY29uc3QgZ2V0RWxlbWVudEJ5SWQgPSBpZCA9PiAvKiogQHR5cGUge0hUTUxFbGVtZW50fSAqLyAoZG9jLmdldEVsZW1lbnRCeUlkKGlkKSlcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gaHRtbFxuICogQHJldHVybiB7SFRNTEVsZW1lbnR9XG4gKi9cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5jb25zdCBfcGFyc2UgPSBodG1sID0+IGRvbVBhcnNlci5wYXJzZUZyb21TdHJpbmcoYDxodG1sPjxib2R5PiR7aHRtbH08L2JvZHk+PC9odG1sPmAsICd0ZXh0L2h0bWwnKS5ib2R5XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IGh0bWxcbiAqIEByZXR1cm4ge0RvY3VtZW50RnJhZ21lbnR9XG4gKi9cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5leHBvcnQgY29uc3QgcGFyc2VGcmFnbWVudCA9IGh0bWwgPT4gZnJhZ21lbnQoLyoqIEB0eXBlIHthbnl9ICovIChfcGFyc2UoaHRtbCkuY2hpbGROb2RlcykpXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IGh0bWxcbiAqIEByZXR1cm4ge0hUTUxFbGVtZW50fVxuICovXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZXhwb3J0IGNvbnN0IHBhcnNlRWxlbWVudCA9IGh0bWwgPT4gLyoqIEB0eXBlIEhUTUxFbGVtZW50ICovIChfcGFyc2UoaHRtbCkuZmlyc3RFbGVtZW50Q2hpbGQpXG5cbi8qKlxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gb2xkRWxcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR8RG9jdW1lbnRGcmFnbWVudH0gbmV3RWxcbiAqL1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmV4cG9ydCBjb25zdCByZXBsYWNlV2l0aCA9IChvbGRFbCwgbmV3RWwpID0+IG9sZEVsLnJlcGxhY2VXaXRoKG5ld0VsKVxuXG4vKipcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHBhcmVudFxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxcbiAqIEBwYXJhbSB7Tm9kZXxudWxsfSByZWZcbiAqIEByZXR1cm4ge0hUTUxFbGVtZW50fVxuICovXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZXhwb3J0IGNvbnN0IGluc2VydEJlZm9yZSA9IChwYXJlbnQsIGVsLCByZWYpID0+IHBhcmVudC5pbnNlcnRCZWZvcmUoZWwsIHJlZilcblxuLyoqXG4gKiBAcGFyYW0ge05vZGV9IHBhcmVudFxuICogQHBhcmFtIHtOb2RlfSBjaGlsZFxuICogQHJldHVybiB7Tm9kZX1cbiAqL1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmV4cG9ydCBjb25zdCBhcHBlbmRDaGlsZCA9IChwYXJlbnQsIGNoaWxkKSA9PiBwYXJlbnQuYXBwZW5kQ2hpbGQoY2hpbGQpXG5cbmV4cG9ydCBjb25zdCBFTEVNRU5UX05PREUgPSBkb2MuRUxFTUVOVF9OT0RFXG5leHBvcnQgY29uc3QgVEVYVF9OT0RFID0gZG9jLlRFWFRfTk9ERVxuZXhwb3J0IGNvbnN0IENEQVRBX1NFQ1RJT05fTk9ERSA9IGRvYy5DREFUQV9TRUNUSU9OX05PREVcbmV4cG9ydCBjb25zdCBDT01NRU5UX05PREUgPSBkb2MuQ09NTUVOVF9OT0RFXG5leHBvcnQgY29uc3QgRE9DVU1FTlRfTk9ERSA9IGRvYy5ET0NVTUVOVF9OT0RFXG5leHBvcnQgY29uc3QgRE9DVU1FTlRfVFlQRV9OT0RFID0gZG9jLkRPQ1VNRU5UX1RZUEVfTk9ERVxuZXhwb3J0IGNvbnN0IERPQ1VNRU5UX0ZSQUdNRU5UX05PREUgPSBkb2MuRE9DVU1FTlRfRlJBR01FTlRfTk9ERVxuXG4vKipcbiAqIEBwYXJhbSB7YW55fSBub2RlXG4gKiBAcGFyYW0ge251bWJlcn0gdHlwZVxuICovXG5leHBvcnQgY29uc3QgY2hlY2tOb2RlVHlwZSA9IChub2RlLCB0eXBlKSA9PiBub2RlLm5vZGVUeXBlID09PSB0eXBlXG5cbi8qKlxuICogQHBhcmFtIHtOb2RlfSBwYXJlbnRcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGNoaWxkXG4gKi9cbmV4cG9ydCBjb25zdCBpc1BhcmVudE9mID0gKHBhcmVudCwgY2hpbGQpID0+IHtcbiAgbGV0IHAgPSBjaGlsZC5wYXJlbnROb2RlXG4gIHdoaWxlIChwICYmIHAgIT09IHBhcmVudCkge1xuICAgIHAgPSBwLnBhcmVudE5vZGVcbiAgfVxuICByZXR1cm4gcCA9PT0gcGFyZW50XG59XG4iLCIvKipcbiAqIFV0aWxpdHkgbW9kdWxlIHRvIHdvcmsgd2l0aCB0aW1lLlxuICpcbiAqIEBtb2R1bGUgdGltZVxuICovXG5cbmltcG9ydCAqIGFzIG1ldHJpYyBmcm9tICcuL21ldHJpYy5qcydcbmltcG9ydCAqIGFzIG1hdGggZnJvbSAnLi9tYXRoLmpzJ1xuXG4vKipcbiAqIFJldHVybiBjdXJyZW50IHRpbWUuXG4gKlxuICogQHJldHVybiB7RGF0ZX1cbiAqL1xuZXhwb3J0IGNvbnN0IGdldERhdGUgPSAoKSA9PiBuZXcgRGF0ZSgpXG5cbi8qKlxuICogUmV0dXJuIGN1cnJlbnQgdW5peCB0aW1lLlxuICpcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IGdldFVuaXhUaW1lID0gRGF0ZS5ub3dcblxuLyoqXG4gKiBUcmFuc2Zvcm0gdGltZSAoaW4gbXMpIHRvIGEgaHVtYW4gcmVhZGFibGUgZm9ybWF0LiBFLmcuIDExMDAgPT4gMS4xcy4gNjBzID0+IDFtaW4uIC4wMDEgPT4gMTDOvHMuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IGQgZHVyYXRpb24gaW4gbWlsbGlzZWNvbmRzXG4gKiBAcmV0dXJuIHtzdHJpbmd9IGh1bWFuaXplZCBhcHByb3hpbWF0aW9uIG9mIHRpbWVcbiAqL1xuZXhwb3J0IGNvbnN0IGh1bWFuaXplRHVyYXRpb24gPSBkID0+IHtcbiAgaWYgKGQgPCA2MDAwMCkge1xuICAgIGNvbnN0IHAgPSBtZXRyaWMucHJlZml4KGQsIC0xKVxuICAgIHJldHVybiBtYXRoLnJvdW5kKHAubiAqIDEwMCkgLyAxMDAgKyBwLnByZWZpeCArICdzJ1xuICB9XG4gIGQgPSBtYXRoLmZsb29yKGQgLyAxMDAwKVxuICBjb25zdCBzZWNvbmRzID0gZCAlIDYwXG4gIGNvbnN0IG1pbnV0ZXMgPSBtYXRoLmZsb29yKGQgLyA2MCkgJSA2MFxuICBjb25zdCBob3VycyA9IG1hdGguZmxvb3IoZCAvIDM2MDApICUgMjRcbiAgY29uc3QgZGF5cyA9IG1hdGguZmxvb3IoZCAvIDg2NDAwKVxuICBpZiAoZGF5cyA+IDApIHtcbiAgICByZXR1cm4gZGF5cyArICdkJyArICgoaG91cnMgPiAwIHx8IG1pbnV0ZXMgPiAzMCkgPyAnICcgKyAobWludXRlcyA+IDMwID8gaG91cnMgKyAxIDogaG91cnMpICsgJ2gnIDogJycpXG4gIH1cbiAgaWYgKGhvdXJzID4gMCkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcmV0dXJuIGhvdXJzICsgJ2gnICsgKChtaW51dGVzID4gMCB8fCBzZWNvbmRzID4gMzApID8gJyAnICsgKHNlY29uZHMgPiAzMCA/IG1pbnV0ZXMgKyAxIDogbWludXRlcykgKyAnbWluJyA6ICcnKVxuICB9XG4gIHJldHVybiBtaW51dGVzICsgJ21pbicgKyAoc2Vjb25kcyA+IDAgPyAnICcgKyBzZWNvbmRzICsgJ3MnIDogJycpXG59XG4iLCIvKipcbiAqIElzb21vcnBoaWMgbG9nZ2luZyBtb2R1bGUgd2l0aCBzdXBwb3J0IGZvciBjb2xvcnMhXG4gKlxuICogQG1vZHVsZSBsb2dnaW5nXG4gKi9cblxuaW1wb3J0ICogYXMgZW52IGZyb20gJy4vZW52aXJvbm1lbnQuanMnXG5pbXBvcnQgKiBhcyBzeW1ib2wgZnJvbSAnLi9zeW1ib2wuanMnXG5pbXBvcnQgKiBhcyBwYWlyIGZyb20gJy4vcGFpci5qcydcbmltcG9ydCAqIGFzIGRvbSBmcm9tICcuL2RvbS5qcydcbmltcG9ydCAqIGFzIGpzb24gZnJvbSAnLi9qc29uLmpzJ1xuaW1wb3J0ICogYXMgbWFwIGZyb20gJy4vbWFwLmpzJ1xuaW1wb3J0ICogYXMgZXZlbnRsb29wIGZyb20gJy4vZXZlbnRsb29wLmpzJ1xuaW1wb3J0ICogYXMgbWF0aCBmcm9tICcuL21hdGguanMnXG5pbXBvcnQgKiBhcyB0aW1lIGZyb20gJy4vdGltZS5qcydcbmltcG9ydCAqIGFzIGZ1bmMgZnJvbSAnLi9mdW5jdGlvbi5qcydcblxuZXhwb3J0IGNvbnN0IEJPTEQgPSBzeW1ib2wuY3JlYXRlKClcbmV4cG9ydCBjb25zdCBVTkJPTEQgPSBzeW1ib2wuY3JlYXRlKClcbmV4cG9ydCBjb25zdCBCTFVFID0gc3ltYm9sLmNyZWF0ZSgpXG5leHBvcnQgY29uc3QgR1JFWSA9IHN5bWJvbC5jcmVhdGUoKVxuZXhwb3J0IGNvbnN0IEdSRUVOID0gc3ltYm9sLmNyZWF0ZSgpXG5leHBvcnQgY29uc3QgUkVEID0gc3ltYm9sLmNyZWF0ZSgpXG5leHBvcnQgY29uc3QgUFVSUExFID0gc3ltYm9sLmNyZWF0ZSgpXG5leHBvcnQgY29uc3QgT1JBTkdFID0gc3ltYm9sLmNyZWF0ZSgpXG5leHBvcnQgY29uc3QgVU5DT0xPUiA9IHN5bWJvbC5jcmVhdGUoKVxuXG4vKipcbiAqIEB0eXBlIHtPYmplY3Q8U3ltYm9sLHBhaXIuUGFpcjxzdHJpbmcsc3RyaW5nPj59XG4gKi9cbmNvbnN0IF9icm93c2VyU3R5bGVNYXAgPSB7XG4gIFtCT0xEXTogcGFpci5jcmVhdGUoJ2ZvbnQtd2VpZ2h0JywgJ2JvbGQnKSxcbiAgW1VOQk9MRF06IHBhaXIuY3JlYXRlKCdmb250LXdlaWdodCcsICdub3JtYWwnKSxcbiAgW0JMVUVdOiBwYWlyLmNyZWF0ZSgnY29sb3InLCAnYmx1ZScpLFxuICBbR1JFRU5dOiBwYWlyLmNyZWF0ZSgnY29sb3InLCAnZ3JlZW4nKSxcbiAgW0dSRVldOiBwYWlyLmNyZWF0ZSgnY29sb3InLCAnZ3JleScpLFxuICBbUkVEXTogcGFpci5jcmVhdGUoJ2NvbG9yJywgJ3JlZCcpLFxuICBbUFVSUExFXTogcGFpci5jcmVhdGUoJ2NvbG9yJywgJ3B1cnBsZScpLFxuICBbT1JBTkdFXTogcGFpci5jcmVhdGUoJ2NvbG9yJywgJ29yYW5nZScpLCAvLyBub3Qgd2VsbCBzdXBwb3J0ZWQgaW4gY2hyb21lIHdoZW4gZGVidWdnaW5nIG5vZGUgd2l0aCBpbnNwZWN0b3IgLSBUT0RPOiBkZXByZWNhdGVcbiAgW1VOQ09MT1JdOiBwYWlyLmNyZWF0ZSgnY29sb3InLCAnYmxhY2snKVxufVxuXG5jb25zdCBfbm9kZVN0eWxlTWFwID0ge1xuICBbQk9MRF06ICdcXHUwMDFiWzFtJyxcbiAgW1VOQk9MRF06ICdcXHUwMDFiWzJtJyxcbiAgW0JMVUVdOiAnXFx4MWJbMzRtJyxcbiAgW0dSRUVOXTogJ1xceDFiWzMybScsXG4gIFtHUkVZXTogJ1xcdTAwMWJbMzdtJyxcbiAgW1JFRF06ICdcXHgxYlszMW0nLFxuICBbUFVSUExFXTogJ1xceDFiWzM1bScsXG4gIFtPUkFOR0VdOiAnXFx4MWJbMzg7NTsyMDhtJyxcbiAgW1VOQ09MT1JdOiAnXFx4MWJbMG0nXG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4vKipcbiAqIEBwYXJhbSB7QXJyYXk8c3RyaW5nfFN5bWJvbHxPYmplY3R8bnVtYmVyPn0gYXJnc1xuICogQHJldHVybiB7QXJyYXk8c3RyaW5nfG9iamVjdHxudW1iZXI+fVxuICovXG5jb25zdCBjb21wdXRlQnJvd3NlckxvZ2dpbmdBcmdzID0gYXJncyA9PiB7XG4gIGNvbnN0IHN0ckJ1aWxkZXIgPSBbXVxuICBjb25zdCBzdHlsZXMgPSBbXVxuICBjb25zdCBjdXJyZW50U3R5bGUgPSBtYXAuY3JlYXRlKClcbiAgLyoqXG4gICAqIEB0eXBlIHtBcnJheTxzdHJpbmd8T2JqZWN0fG51bWJlcj59XG4gICAqL1xuICBsZXQgbG9nQXJncyA9IFtdXG4gIC8vIHRyeSB3aXRoIGZvcm1hdHRpbmcgdW50aWwgd2UgZmluZCBzb21ldGhpbmcgdW5zdXBwb3J0ZWRcbiAgbGV0IGkgPSAwXG5cbiAgZm9yICg7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgYXJnID0gYXJnc1tpXVxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBjb25zdCBzdHlsZSA9IF9icm93c2VyU3R5bGVNYXBbYXJnXVxuICAgIGlmIChzdHlsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBjdXJyZW50U3R5bGUuc2V0KHN0eWxlLmxlZnQsIHN0eWxlLnJpZ2h0KVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoYXJnLmNvbnN0cnVjdG9yID09PSBTdHJpbmcgfHwgYXJnLmNvbnN0cnVjdG9yID09PSBOdW1iZXIpIHtcbiAgICAgICAgY29uc3Qgc3R5bGUgPSBkb20ubWFwVG9TdHlsZVN0cmluZyhjdXJyZW50U3R5bGUpXG4gICAgICAgIGlmIChpID4gMCB8fCBzdHlsZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgc3RyQnVpbGRlci5wdXNoKCclYycgKyBhcmcpXG4gICAgICAgICAgc3R5bGVzLnB1c2goc3R5bGUpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RyQnVpbGRlci5wdXNoKGFyZylcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoaSA+IDApIHtcbiAgICAvLyBjcmVhdGUgbG9nQXJncyB3aXRoIHdoYXQgd2UgaGF2ZSBzbyBmYXJcbiAgICBsb2dBcmdzID0gc3R5bGVzXG4gICAgbG9nQXJncy51bnNoaWZ0KHN0ckJ1aWxkZXIuam9pbignJykpXG4gIH1cbiAgLy8gYXBwZW5kIHRoZSByZXN0XG4gIGZvciAoOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGFyZyA9IGFyZ3NbaV1cbiAgICBpZiAoIShhcmcgaW5zdGFuY2VvZiBTeW1ib2wpKSB7XG4gICAgICBsb2dBcmdzLnB1c2goYXJnKVxuICAgIH1cbiAgfVxuICByZXR1cm4gbG9nQXJnc1xufVxuXG4vKipcbiAqIEBwYXJhbSB7QXJyYXk8c3RyaW5nfFN5bWJvbHxPYmplY3R8bnVtYmVyPn0gYXJnc1xuICogQHJldHVybiB7QXJyYXk8c3RyaW5nfG9iamVjdHxudW1iZXI+fVxuICovXG5jb25zdCBjb21wdXRlTm9kZUxvZ2dpbmdBcmdzID0gYXJncyA9PiB7XG4gIGNvbnN0IHN0ckJ1aWxkZXIgPSBbXVxuICBjb25zdCBsb2dBcmdzID0gW11cblxuICAvLyB0cnkgd2l0aCBmb3JtYXR0aW5nIHVudGlsIHdlIGZpbmQgc29tZXRoaW5nIHVuc3VwcG9ydGVkXG4gIGxldCBpID0gMFxuXG4gIGZvciAoOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGFyZyA9IGFyZ3NbaV1cbiAgICAvLyBAdHMtaWdub3JlXG4gICAgY29uc3Qgc3R5bGUgPSBfbm9kZVN0eWxlTWFwW2FyZ11cbiAgICBpZiAoc3R5bGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgc3RyQnVpbGRlci5wdXNoKHN0eWxlKVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoYXJnLmNvbnN0cnVjdG9yID09PSBTdHJpbmcgfHwgYXJnLmNvbnN0cnVjdG9yID09PSBOdW1iZXIpIHtcbiAgICAgICAgc3RyQnVpbGRlci5wdXNoKGFyZylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChpID4gMCkge1xuICAgIC8vIGNyZWF0ZSBsb2dBcmdzIHdpdGggd2hhdCB3ZSBoYXZlIHNvIGZhclxuICAgIHN0ckJ1aWxkZXIucHVzaCgnXFx4MWJbMG0nKVxuICAgIGxvZ0FyZ3MucHVzaChzdHJCdWlsZGVyLmpvaW4oJycpKVxuICB9XG4gIC8vIGFwcGVuZCB0aGUgcmVzdFxuICBmb3IgKDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBhcmcgPSBhcmdzW2ldXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAoIShhcmcgaW5zdGFuY2VvZiBTeW1ib2wpKSB7XG4gICAgICBsb2dBcmdzLnB1c2goYXJnKVxuICAgIH1cbiAgfVxuICByZXR1cm4gbG9nQXJnc1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuY29uc3QgY29tcHV0ZUxvZ2dpbmdBcmdzID0gZW52LmlzTm9kZSA/IGNvbXB1dGVOb2RlTG9nZ2luZ0FyZ3MgOiBjb21wdXRlQnJvd3NlckxvZ2dpbmdBcmdzXG5cbi8qKlxuICogQHBhcmFtIHtBcnJheTxzdHJpbmd8U3ltYm9sfE9iamVjdHxudW1iZXI+fSBhcmdzXG4gKi9cbmV4cG9ydCBjb25zdCBwcmludCA9ICguLi5hcmdzKSA9PiB7XG4gIGNvbnNvbGUubG9nKC4uLmNvbXB1dGVMb2dnaW5nQXJncyhhcmdzKSlcbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgdmNvbnNvbGVzLmZvckVhY2godmMgPT4gdmMucHJpbnQoYXJncykpXG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4vKipcbiAqIEBwYXJhbSB7QXJyYXk8c3RyaW5nfFN5bWJvbHxPYmplY3R8bnVtYmVyPn0gYXJnc1xuICovXG5leHBvcnQgY29uc3Qgd2FybiA9ICguLi5hcmdzKSA9PiB7XG4gIGNvbnNvbGUud2FybiguLi5jb21wdXRlTG9nZ2luZ0FyZ3MoYXJncykpXG4gIGFyZ3MudW5zaGlmdChPUkFOR0UpXG4gIHZjb25zb2xlcy5mb3JFYWNoKHZjID0+IHZjLnByaW50KGFyZ3MpKVxufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuLyoqXG4gKiBAcGFyYW0ge0Vycm9yfSBlcnJcbiAqL1xuZXhwb3J0IGNvbnN0IHByaW50RXJyb3IgPSBlcnIgPT4ge1xuICBjb25zb2xlLmVycm9yKGVycilcbiAgdmNvbnNvbGVzLmZvckVhY2godmMgPT4gdmMucHJpbnRFcnJvcihlcnIpKVxufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIGltYWdlIGxvY2F0aW9uXG4gKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0IGhlaWdodCBvZiB0aGUgaW1hZ2UgaW4gcGl4ZWxcbiAqL1xuZXhwb3J0IGNvbnN0IHByaW50SW1nID0gKHVybCwgaGVpZ2h0KSA9PiB7XG4gIGlmIChlbnYuaXNCcm93c2VyKSB7XG4gICAgY29uc29sZS5sb2coJyVjICAgICAgICAgICAgICAgICAgICAgICcsIGBmb250LXNpemU6ICR7aGVpZ2h0fXB4OyBiYWNrZ3JvdW5kLXNpemU6IGNvbnRhaW47IGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7IGJhY2tncm91bmQtaW1hZ2U6IHVybCgke3VybH0pYClcbiAgICAvLyBjb25zb2xlLmxvZygnJWMgICAgICAgICAgICAgICAgJywgYGZvbnQtc2l6ZTogJHtoZWlnaHR9eDsgYmFja2dyb3VuZDogdXJsKCR7dXJsfSkgbm8tcmVwZWF0O2ApXG4gIH1cbiAgdmNvbnNvbGVzLmZvckVhY2godmMgPT4gdmMucHJpbnRJbWcodXJsLCBoZWlnaHQpKVxufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZTY0XG4gKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0XG4gKi9cbmV4cG9ydCBjb25zdCBwcmludEltZ0Jhc2U2NCA9IChiYXNlNjQsIGhlaWdodCkgPT4gcHJpbnRJbWcoYGRhdGE6aW1hZ2UvZ2lmO2Jhc2U2NCwke2Jhc2U2NH1gLCBoZWlnaHQpXG5cbi8qKlxuICogQHBhcmFtIHtBcnJheTxzdHJpbmd8U3ltYm9sfE9iamVjdHxudW1iZXI+fSBhcmdzXG4gKi9cbmV4cG9ydCBjb25zdCBncm91cCA9ICguLi5hcmdzKSA9PiB7XG4gIGNvbnNvbGUuZ3JvdXAoLi4uY29tcHV0ZUxvZ2dpbmdBcmdzKGFyZ3MpKVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICB2Y29uc29sZXMuZm9yRWFjaCh2YyA9PiB2Yy5ncm91cChhcmdzKSlcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0FycmF5PHN0cmluZ3xTeW1ib2x8T2JqZWN0fG51bWJlcj59IGFyZ3NcbiAqL1xuZXhwb3J0IGNvbnN0IGdyb3VwQ29sbGFwc2VkID0gKC4uLmFyZ3MpID0+IHtcbiAgY29uc29sZS5ncm91cENvbGxhcHNlZCguLi5jb21wdXRlTG9nZ2luZ0FyZ3MoYXJncykpXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHZjb25zb2xlcy5mb3JFYWNoKHZjID0+IHZjLmdyb3VwQ29sbGFwc2VkKGFyZ3MpKVxufVxuXG5leHBvcnQgY29uc3QgZ3JvdXBFbmQgPSAoKSA9PiB7XG4gIGNvbnNvbGUuZ3JvdXBFbmQoKVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICB2Y29uc29sZXMuZm9yRWFjaCh2YyA9PiB2Yy5ncm91cEVuZCgpKVxufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuLyoqXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCk6Tm9kZX0gY3JlYXRlTm9kZVxuICovXG5leHBvcnQgY29uc3QgcHJpbnREb20gPSBjcmVhdGVOb2RlID0+XG4gIHZjb25zb2xlcy5mb3JFYWNoKHZjID0+IHZjLnByaW50RG9tKGNyZWF0ZU5vZGUoKSkpXG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4vKipcbiAqIEBwYXJhbSB7SFRNTENhbnZhc0VsZW1lbnR9IGNhbnZhc1xuICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodFxuICovXG5leHBvcnQgY29uc3QgcHJpbnRDYW52YXMgPSAoY2FudmFzLCBoZWlnaHQpID0+IHByaW50SW1nKGNhbnZhcy50b0RhdGFVUkwoKSwgaGVpZ2h0KVxuXG5leHBvcnQgY29uc3QgdmNvbnNvbGVzID0gbmV3IFNldCgpXG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4vKipcbiAqIEBwYXJhbSB7QXJyYXk8c3RyaW5nfFN5bWJvbHxPYmplY3R8bnVtYmVyPn0gYXJnc1xuICogQHJldHVybiB7QXJyYXk8RWxlbWVudD59XG4gKi9cbmNvbnN0IF9jb21wdXRlTGluZVNwYW5zID0gYXJncyA9PiB7XG4gIGNvbnN0IHNwYW5zID0gW11cbiAgY29uc3QgY3VycmVudFN0eWxlID0gbmV3IE1hcCgpXG4gIC8vIHRyeSB3aXRoIGZvcm1hdHRpbmcgdW50aWwgd2UgZmluZCBzb21ldGhpbmcgdW5zdXBwb3J0ZWRcbiAgbGV0IGkgPSAwXG4gIGZvciAoOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGFyZyA9IGFyZ3NbaV1cbiAgICAvLyBAdHMtaWdub3JlXG4gICAgY29uc3Qgc3R5bGUgPSBfYnJvd3NlclN0eWxlTWFwW2FyZ11cbiAgICBpZiAoc3R5bGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgY3VycmVudFN0eWxlLnNldChzdHlsZS5sZWZ0LCBzdHlsZS5yaWdodClcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGFyZy5jb25zdHJ1Y3RvciA9PT0gU3RyaW5nIHx8IGFyZy5jb25zdHJ1Y3RvciA9PT0gTnVtYmVyKSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgY29uc3Qgc3BhbiA9IGRvbS5lbGVtZW50KCdzcGFuJywgW3BhaXIuY3JlYXRlKCdzdHlsZScsIGRvbS5tYXBUb1N0eWxlU3RyaW5nKGN1cnJlbnRTdHlsZSkpXSwgW2RvbS50ZXh0KGFyZyldKVxuICAgICAgICBpZiAoc3Bhbi5pbm5lckhUTUwgPT09ICcnKSB7XG4gICAgICAgICAgc3Bhbi5pbm5lckhUTUwgPSAnJm5ic3A7J1xuICAgICAgICB9XG4gICAgICAgIHNwYW5zLnB1c2goc3BhbilcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8vIGFwcGVuZCB0aGUgcmVzdFxuICBmb3IgKDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICBsZXQgY29udGVudCA9IGFyZ3NbaV1cbiAgICBpZiAoIShjb250ZW50IGluc3RhbmNlb2YgU3ltYm9sKSkge1xuICAgICAgaWYgKGNvbnRlbnQuY29uc3RydWN0b3IgIT09IFN0cmluZyAmJiBjb250ZW50LmNvbnN0cnVjdG9yICE9PSBOdW1iZXIpIHtcbiAgICAgICAgY29udGVudCA9ICcgJyArIGpzb24uc3RyaW5naWZ5KGNvbnRlbnQpICsgJyAnXG4gICAgICB9XG4gICAgICBzcGFucy5wdXNoKGRvbS5lbGVtZW50KCdzcGFuJywgW10sIFtkb20udGV4dCgvKiogQHR5cGUge3N0cmluZ30gKi8gKGNvbnRlbnQpKV0pKVxuICAgIH1cbiAgfVxuICByZXR1cm4gc3BhbnNcbn1cblxuY29uc3QgbGluZVN0eWxlID0gJ2ZvbnQtZmFtaWx5Om1vbm9zcGFjZTtib3JkZXItYm90dG9tOjFweCBzb2xpZCAjZTJlMmUyO3BhZGRpbmc6MnB4OydcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmV4cG9ydCBjbGFzcyBWQ29uc29sZSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge0VsZW1lbnR9IGRvbVxuICAgKi9cbiAgY29uc3RydWN0b3IgKGRvbSkge1xuICAgIHRoaXMuZG9tID0gZG9tXG4gICAgLyoqXG4gICAgICogQHR5cGUge0VsZW1lbnR9XG4gICAgICovXG4gICAgdGhpcy5jY29udGFpbmVyID0gdGhpcy5kb21cbiAgICB0aGlzLmRlcHRoID0gMFxuICAgIHZjb25zb2xlcy5hZGQodGhpcylcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0FycmF5PHN0cmluZ3xTeW1ib2x8T2JqZWN0fG51bWJlcj59IGFyZ3NcbiAgICogQHBhcmFtIHtib29sZWFufSBjb2xsYXBzZWRcbiAgICovXG4gIGdyb3VwIChhcmdzLCBjb2xsYXBzZWQgPSBmYWxzZSkge1xuICAgIGV2ZW50bG9vcC5lbnF1ZXVlKCgpID0+IHtcbiAgICAgIGNvbnN0IHRyaWFuZ2xlRG93biA9IGRvbS5lbGVtZW50KCdzcGFuJywgW3BhaXIuY3JlYXRlKCdoaWRkZW4nLCBjb2xsYXBzZWQpLCBwYWlyLmNyZWF0ZSgnc3R5bGUnLCAnY29sb3I6Z3JleTtmb250LXNpemU6MTIwJTsnKV0sIFtkb20udGV4dCgn4pa8JyldKVxuICAgICAgY29uc3QgdHJpYW5nbGVSaWdodCA9IGRvbS5lbGVtZW50KCdzcGFuJywgW3BhaXIuY3JlYXRlKCdoaWRkZW4nLCAhY29sbGFwc2VkKSwgcGFpci5jcmVhdGUoJ3N0eWxlJywgJ2NvbG9yOmdyZXk7Zm9udC1zaXplOjEyNSU7JyldLCBbZG9tLnRleHQoJ+KWticpXSlcbiAgICAgIGNvbnN0IGNvbnRlbnQgPSBkb20uZWxlbWVudCgnZGl2JywgW3BhaXIuY3JlYXRlKCdzdHlsZScsIGAke2xpbmVTdHlsZX07cGFkZGluZy1sZWZ0OiR7dGhpcy5kZXB0aCAqIDEwfXB4YCldLCBbdHJpYW5nbGVEb3duLCB0cmlhbmdsZVJpZ2h0LCBkb20udGV4dCgnICcpXS5jb25jYXQoX2NvbXB1dGVMaW5lU3BhbnMoYXJncykpKVxuICAgICAgY29uc3QgbmV4dENvbnRhaW5lciA9IGRvbS5lbGVtZW50KCdkaXYnLCBbcGFpci5jcmVhdGUoJ2hpZGRlbicsIGNvbGxhcHNlZCldKVxuICAgICAgY29uc3QgbmV4dExpbmUgPSBkb20uZWxlbWVudCgnZGl2JywgW10sIFtjb250ZW50LCBuZXh0Q29udGFpbmVyXSlcbiAgICAgIGRvbS5hcHBlbmQodGhpcy5jY29udGFpbmVyLCBbbmV4dExpbmVdKVxuICAgICAgdGhpcy5jY29udGFpbmVyID0gbmV4dENvbnRhaW5lclxuICAgICAgdGhpcy5kZXB0aCsrXG4gICAgICAvLyB3aGVuIGhlYWRlciBpcyBjbGlja2VkLCBjb2xsYXBzZS91bmNvbGxhcHNlIGNvbnRhaW5lclxuICAgICAgZG9tLmFkZEV2ZW50TGlzdGVuZXIoY29udGVudCwgJ2NsaWNrJywgZXZlbnQgPT4ge1xuICAgICAgICBuZXh0Q29udGFpbmVyLnRvZ2dsZUF0dHJpYnV0ZSgnaGlkZGVuJylcbiAgICAgICAgdHJpYW5nbGVEb3duLnRvZ2dsZUF0dHJpYnV0ZSgnaGlkZGVuJylcbiAgICAgICAgdHJpYW5nbGVSaWdodC50b2dnbGVBdHRyaWJ1dGUoJ2hpZGRlbicpXG4gICAgICB9KVxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtBcnJheTxzdHJpbmd8U3ltYm9sfE9iamVjdHxudW1iZXI+fSBhcmdzXG4gICAqL1xuICBncm91cENvbGxhcHNlZCAoYXJncykge1xuICAgIHRoaXMuZ3JvdXAoYXJncywgdHJ1ZSlcbiAgfVxuXG4gIGdyb3VwRW5kICgpIHtcbiAgICBldmVudGxvb3AuZW5xdWV1ZSgoKSA9PiB7XG4gICAgICBpZiAodGhpcy5kZXB0aCA+IDApIHtcbiAgICAgICAgdGhpcy5kZXB0aC0tXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgdGhpcy5jY29udGFpbmVyID0gdGhpcy5jY29udGFpbmVyLnBhcmVudEVsZW1lbnQucGFyZW50RWxlbWVudFxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtBcnJheTxzdHJpbmd8U3ltYm9sfE9iamVjdHxudW1iZXI+fSBhcmdzXG4gICAqL1xuICBwcmludCAoYXJncykge1xuICAgIGV2ZW50bG9vcC5lbnF1ZXVlKCgpID0+IHtcbiAgICAgIGRvbS5hcHBlbmQodGhpcy5jY29udGFpbmVyLCBbZG9tLmVsZW1lbnQoJ2RpdicsIFtwYWlyLmNyZWF0ZSgnc3R5bGUnLCBgJHtsaW5lU3R5bGV9O3BhZGRpbmctbGVmdDoke3RoaXMuZGVwdGggKiAxMH1weGApXSwgX2NvbXB1dGVMaW5lU3BhbnMoYXJncykpXSlcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7RXJyb3J9IGVyclxuICAgKi9cbiAgcHJpbnRFcnJvciAoZXJyKSB7XG4gICAgdGhpcy5wcmludChbUkVELCBCT0xELCBlcnIudG9TdHJpbmcoKV0pXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVybFxuICAgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0XG4gICAqL1xuICBwcmludEltZyAodXJsLCBoZWlnaHQpIHtcbiAgICBldmVudGxvb3AuZW5xdWV1ZSgoKSA9PiB7XG4gICAgICBkb20uYXBwZW5kKHRoaXMuY2NvbnRhaW5lciwgW2RvbS5lbGVtZW50KCdpbWcnLCBbcGFpci5jcmVhdGUoJ3NyYycsIHVybCksIHBhaXIuY3JlYXRlKCdoZWlnaHQnLCBgJHttYXRoLnJvdW5kKGhlaWdodCAqIDEuNSl9cHhgKV0pXSlcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Tm9kZX0gbm9kZVxuICAgKi9cbiAgcHJpbnREb20gKG5vZGUpIHtcbiAgICBldmVudGxvb3AuZW5xdWV1ZSgoKSA9PiB7XG4gICAgICBkb20uYXBwZW5kKHRoaXMuY2NvbnRhaW5lciwgW25vZGVdKVxuICAgIH0pXG4gIH1cblxuICBkZXN0cm95ICgpIHtcbiAgICBldmVudGxvb3AuZW5xdWV1ZSgoKSA9PiB7XG4gICAgICB2Y29uc29sZXMuZGVsZXRlKHRoaXMpXG4gICAgfSlcbiAgfVxufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuLyoqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGRvbVxuICovXG5leHBvcnQgY29uc3QgY3JlYXRlVkNvbnNvbGUgPSBkb20gPT4gbmV3IFZDb25zb2xlKGRvbSlcblxuY29uc3QgbG9nZ2luZ0NvbG9ycyA9IFtHUkVFTiwgUFVSUExFLCBPUkFOR0UsIEJMVUVdXG5sZXQgbmV4dENvbG9yID0gMFxubGV0IGxhc3RMb2dnaW5nVGltZSA9IHRpbWUuZ2V0VW5peFRpbWUoKVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBtb2R1bGVOYW1lXG4gKiBAcmV0dXJuIHtmdW5jdGlvbiguLi5hbnkpOnZvaWR9XG4gKi9cbmV4cG9ydCBjb25zdCBjcmVhdGVNb2R1bGVMb2dnZXIgPSBtb2R1bGVOYW1lID0+IHtcbiAgY29uc3QgY29sb3IgPSBsb2dnaW5nQ29sb3JzW25leHRDb2xvcl1cbiAgY29uc3QgZGVidWdSZWdleFZhciA9IGVudi5nZXRWYXJpYWJsZSgnbG9nJylcbiAgY29uc3QgZG9Mb2dnaW5nID0gZGVidWdSZWdleFZhciAhPT0gbnVsbCAmJiAoZGVidWdSZWdleFZhciA9PT0gJyonIHx8IGRlYnVnUmVnZXhWYXIgPT09ICd0cnVlJyB8fCBuZXcgUmVnRXhwKGRlYnVnUmVnZXhWYXIsICdnaScpLnRlc3QobW9kdWxlTmFtZSkpXG4gIG5leHRDb2xvciA9IChuZXh0Q29sb3IgKyAxKSAlIGxvZ2dpbmdDb2xvcnMubGVuZ3RoXG4gIG1vZHVsZU5hbWUgKz0gJzogJ1xuXG4gIHJldHVybiAhZG9Mb2dnaW5nID8gZnVuYy5ub3AgOiAoLi4uYXJncykgPT4ge1xuICAgIGNvbnN0IHRpbWVOb3cgPSB0aW1lLmdldFVuaXhUaW1lKClcbiAgICBjb25zdCB0aW1lRGlmZiA9IHRpbWVOb3cgLSBsYXN0TG9nZ2luZ1RpbWVcbiAgICBsYXN0TG9nZ2luZ1RpbWUgPSB0aW1lTm93XG4gICAgcHJpbnQoY29sb3IsIG1vZHVsZU5hbWUsIFVOQ09MT1IsIC4uLmFyZ3MubWFwKGFyZyA9PiAodHlwZW9mIGFyZyA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIGFyZyA9PT0gJ3N5bWJvbCcpID8gYXJnIDogSlNPTi5zdHJpbmdpZnkoYXJnKSksIGNvbG9yLCAnICsnICsgdGltZURpZmYgKyAnbXMnKVxuICB9XG59XG4iLCIvKipcbiAqIFV0aWxpdHkgbW9kdWxlIHRvIGNyZWF0ZSBhbmQgbWFuaXB1bGF0ZSBJdGVyYXRvcnMuXG4gKlxuICogQG1vZHVsZSBpdGVyYXRvclxuICovXG5cbi8qKlxuICogQHRlbXBsYXRlIFQsUlxuICogQHBhcmFtIHtJdGVyYXRvcjxUPn0gaXRlcmF0b3JcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oVCk6Un0gZlxuICogQHJldHVybiB7SXRlcmFibGVJdGVyYXRvcjxSPn1cbiAqL1xuZXhwb3J0IGNvbnN0IG1hcEl0ZXJhdG9yID0gKGl0ZXJhdG9yLCBmKSA9PiAoe1xuICBbU3ltYm9sLml0ZXJhdG9yXSAoKSB7XG4gICAgcmV0dXJuIHRoaXNcbiAgfSxcbiAgLy8gQHRzLWlnbm9yZVxuICBuZXh0ICgpIHtcbiAgICBjb25zdCByID0gaXRlcmF0b3IubmV4dCgpXG4gICAgcmV0dXJuIHsgdmFsdWU6IHIuZG9uZSA/IHVuZGVmaW5lZCA6IGYoci52YWx1ZSksIGRvbmU6IHIuZG9uZSB9XG4gIH1cbn0pXG5cbi8qKlxuICogQHRlbXBsYXRlIFRcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKTpJdGVyYXRvclJlc3VsdDxUPn0gbmV4dFxuICogQHJldHVybiB7SXRlcmFibGVJdGVyYXRvcjxUPn1cbiAqL1xuZXhwb3J0IGNvbnN0IGNyZWF0ZUl0ZXJhdG9yID0gbmV4dCA9PiAoe1xuICAvKipcbiAgICogQHJldHVybiB7SXRlcmFibGVJdGVyYXRvcjxUPn1cbiAgICovXG4gIFtTeW1ib2wuaXRlcmF0b3JdICgpIHtcbiAgICByZXR1cm4gdGhpc1xuICB9LFxuICAvLyBAdHMtaWdub3JlXG4gIG5leHRcbn0pXG5cbi8qKlxuICogQHRlbXBsYXRlIFRcbiAqIEBwYXJhbSB7SXRlcmF0b3I8VD59IGl0ZXJhdG9yXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFQpOmJvb2xlYW59IGZpbHRlclxuICovXG5leHBvcnQgY29uc3QgaXRlcmF0b3JGaWx0ZXIgPSAoaXRlcmF0b3IsIGZpbHRlcikgPT4gY3JlYXRlSXRlcmF0b3IoKCkgPT4ge1xuICBsZXQgcmVzXG4gIGRvIHtcbiAgICByZXMgPSBpdGVyYXRvci5uZXh0KClcbiAgfSB3aGlsZSAoIXJlcy5kb25lICYmICFmaWx0ZXIocmVzLnZhbHVlKSlcbiAgcmV0dXJuIHJlc1xufSlcblxuLyoqXG4gKiBAdGVtcGxhdGUgVCxNXG4gKiBAcGFyYW0ge0l0ZXJhdG9yPFQ+fSBpdGVyYXRvclxuICogQHBhcmFtIHtmdW5jdGlvbihUKTpNfSBmbWFwXG4gKi9cbmV4cG9ydCBjb25zdCBpdGVyYXRvck1hcCA9IChpdGVyYXRvciwgZm1hcCkgPT4gY3JlYXRlSXRlcmF0b3IoKCkgPT4ge1xuICBjb25zdCB7IGRvbmUsIHZhbHVlIH0gPSBpdGVyYXRvci5uZXh0KClcbiAgcmV0dXJuIHsgZG9uZSwgdmFsdWU6IGRvbmUgPyB1bmRlZmluZWQgOiBmbWFwKHZhbHVlKSB9XG59KVxuIiwiLyoqXG4gKiBVdGlsaXR5IGZ1bmN0aW9ucyBmb3Igd29ya2luZyB3aXRoIEVjbWFTY3JpcHQgb2JqZWN0cy5cbiAqXG4gKiBAbW9kdWxlIG9iamVjdFxuICovXG5cbi8qKlxuICogQHJldHVybiB7T2JqZWN0PHN0cmluZyxhbnk+fSBvYmpcbiAqL1xuZXhwb3J0IGNvbnN0IGNyZWF0ZSA9ICgpID0+IE9iamVjdC5jcmVhdGUobnVsbClcblxuLyoqXG4gKiBPYmplY3QuYXNzaWduXG4gKi9cbmV4cG9ydCBjb25zdCBhc3NpZ24gPSBPYmplY3QuYXNzaWduXG5cbi8qKlxuICogQHBhcmFtIHtPYmplY3Q8c3RyaW5nLGFueT59IG9ialxuICovXG5leHBvcnQgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzXG5cbi8qKlxuICogQHBhcmFtIHtPYmplY3Q8c3RyaW5nLGFueT59IG9ialxuICogQHBhcmFtIHtmdW5jdGlvbihhbnksc3RyaW5nKTphbnl9IGZcbiAqL1xuZXhwb3J0IGNvbnN0IGZvckVhY2ggPSAob2JqLCBmKSA9PiB7XG4gIGZvciAoY29uc3Qga2V5IGluIG9iaikge1xuICAgIGYob2JqW2tleV0sIGtleSlcbiAgfVxufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBSXG4gKiBAcGFyYW0ge09iamVjdDxzdHJpbmcsYW55Pn0gb2JqXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKGFueSxzdHJpbmcpOlJ9IGZcbiAqIEByZXR1cm4ge0FycmF5PFI+fVxuICovXG5leHBvcnQgY29uc3QgbWFwID0gKG9iaiwgZikgPT4ge1xuICBjb25zdCByZXN1bHRzID0gW11cbiAgZm9yIChjb25zdCBrZXkgaW4gb2JqKSB7XG4gICAgcmVzdWx0cy5wdXNoKGYob2JqW2tleV0sIGtleSkpXG4gIH1cbiAgcmV0dXJuIHJlc3VsdHNcbn1cblxuLyoqXG4gKiBAcGFyYW0ge09iamVjdDxzdHJpbmcsYW55Pn0gb2JqXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBsZW5ndGggPSBvYmogPT4ga2V5cyhvYmopLmxlbmd0aFxuXG4vKipcbiAqIEBwYXJhbSB7T2JqZWN0PHN0cmluZyxhbnk+fSBvYmpcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oYW55LHN0cmluZyk6Ym9vbGVhbn0gZlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGNvbnN0IHNvbWUgPSAob2JqLCBmKSA9PiB7XG4gIGZvciAoY29uc3Qga2V5IGluIG9iaikge1xuICAgIGlmIChmKG9ialtrZXldLCBrZXkpKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2Vcbn1cblxuLyoqXG4gKiBAcGFyYW0ge09iamVjdDxzdHJpbmcsYW55Pn0gb2JqXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKGFueSxzdHJpbmcpOmJvb2xlYW59IGZcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBjb25zdCBldmVyeSA9IChvYmosIGYpID0+IHtcbiAgZm9yIChjb25zdCBrZXkgaW4gb2JqKSB7XG4gICAgaWYgKCFmKG9ialtrZXldLCBrZXkpKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWVcbn1cblxuLyoqXG4gKiBDYWxscyBgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eWAuXG4gKlxuICogQHBhcmFtIHthbnl9IG9ialxuICogQHBhcmFtIHtzdHJpbmd8c3ltYm9sfSBrZXlcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBjb25zdCBoYXNQcm9wZXJ0eSA9IChvYmosIGtleSkgPT4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KVxuXG4vKipcbiAqIEBwYXJhbSB7T2JqZWN0PHN0cmluZyxhbnk+fSBhXG4gKiBAcGFyYW0ge09iamVjdDxzdHJpbmcsYW55Pn0gYlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGNvbnN0IGVxdWFsRmxhdCA9IChhLCBiKSA9PiBhID09PSBiIHx8IChsZW5ndGgoYSkgPT09IGxlbmd0aChiKSAmJiBldmVyeShhLCAodmFsLCBrZXkpID0+ICh2YWwgIT09IHVuZGVmaW5lZCB8fCBoYXNQcm9wZXJ0eShiLCBrZXkpKSAmJiBiW2tleV0gPT09IHZhbCkpXG4iLCJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnbGliMC9vYnNlcnZhYmxlJztcbmltcG9ydCAqIGFzIGFycmF5IGZyb20gJ2xpYjAvYXJyYXknO1xuaW1wb3J0ICogYXMgbWF0aCBmcm9tICdsaWIwL21hdGgnO1xuaW1wb3J0ICogYXMgbWFwIGZyb20gJ2xpYjAvbWFwJztcbmltcG9ydCAqIGFzIGVuY29kaW5nIGZyb20gJ2xpYjAvZW5jb2RpbmcnO1xuaW1wb3J0ICogYXMgZGVjb2RpbmcgZnJvbSAnbGliMC9kZWNvZGluZyc7XG5pbXBvcnQgKiBhcyByYW5kb20gZnJvbSAnbGliMC9yYW5kb20nO1xuaW1wb3J0ICogYXMgcHJvbWlzZSBmcm9tICdsaWIwL3Byb21pc2UnO1xuaW1wb3J0ICogYXMgYnVmZmVyIGZyb20gJ2xpYjAvYnVmZmVyJztcbmltcG9ydCAqIGFzIGVycm9yIGZyb20gJ2xpYjAvZXJyb3InO1xuaW1wb3J0ICogYXMgYmluYXJ5IGZyb20gJ2xpYjAvYmluYXJ5JztcbmltcG9ydCAqIGFzIGYgZnJvbSAnbGliMC9mdW5jdGlvbic7XG5pbXBvcnQgeyBjYWxsQWxsIH0gZnJvbSAnbGliMC9mdW5jdGlvbic7XG5pbXBvcnQgKiBhcyBzZXQgZnJvbSAnbGliMC9zZXQnO1xuaW1wb3J0ICogYXMgbG9nZ2luZyBmcm9tICdsaWIwL2xvZ2dpbmcnO1xuaW1wb3J0ICogYXMgdGltZSBmcm9tICdsaWIwL3RpbWUnO1xuaW1wb3J0ICogYXMgaXRlcmF0b3IgZnJvbSAnbGliMC9pdGVyYXRvcic7XG5pbXBvcnQgKiBhcyBvYmplY3QgZnJvbSAnbGliMC9vYmplY3QnO1xuXG4vKipcbiAqIFRoaXMgaXMgYW4gYWJzdHJhY3QgaW50ZXJmYWNlIHRoYXQgYWxsIENvbm5lY3RvcnMgc2hvdWxkIGltcGxlbWVudCB0byBrZWVwIHRoZW0gaW50ZXJjaGFuZ2VhYmxlLlxuICpcbiAqIEBub3RlIFRoaXMgaW50ZXJmYWNlIGlzIGV4cGVyaW1lbnRhbCBhbmQgaXQgaXMgbm90IGFkdmlzZWQgdG8gYWN0dWFsbHkgaW5oZXJpdCB0aGlzIGNsYXNzLlxuICogICAgICAgSXQganVzdCBzZXJ2ZXMgYXMgdHlwaW5nIGluZm9ybWF0aW9uLlxuICpcbiAqIEBleHRlbmRzIHtPYnNlcnZhYmxlPGFueT59XG4gKi9cbmNsYXNzIEFic3RyYWN0Q29ubmVjdG9yIGV4dGVuZHMgT2JzZXJ2YWJsZSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge0RvY30geWRvY1xuICAgKiBAcGFyYW0ge2FueX0gYXdhcmVuZXNzXG4gICAqL1xuICBjb25zdHJ1Y3RvciAoeWRvYywgYXdhcmVuZXNzKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmRvYyA9IHlkb2M7XG4gICAgdGhpcy5hd2FyZW5lc3MgPSBhd2FyZW5lc3M7XG4gIH1cbn1cblxuY2xhc3MgRGVsZXRlSXRlbSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gY2xvY2tcbiAgICogQHBhcmFtIHtudW1iZXJ9IGxlblxuICAgKi9cbiAgY29uc3RydWN0b3IgKGNsb2NrLCBsZW4pIHtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMuY2xvY2sgPSBjbG9jaztcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMubGVuID0gbGVuO1xuICB9XG59XG5cbi8qKlxuICogV2Ugbm8gbG9uZ2VyIG1haW50YWluIGEgRGVsZXRlU3RvcmUuIERlbGV0ZVNldCBpcyBhIHRlbXBvcmFyeSBvYmplY3QgdGhhdCBpcyBjcmVhdGVkIHdoZW4gbmVlZGVkLlxuICogLSBXaGVuIGNyZWF0ZWQgaW4gYSB0cmFuc2FjdGlvbiwgaXQgbXVzdCBvbmx5IGJlIGFjY2Vzc2VkIGFmdGVyIHNvcnRpbmcsIGFuZCBtZXJnaW5nXG4gKiAgIC0gVGhpcyBEZWxldGVTZXQgaXMgc2VuZCB0byBvdGhlciBjbGllbnRzXG4gKiAtIFdlIGRvIG5vdCBjcmVhdGUgYSBEZWxldGVTZXQgd2hlbiB3ZSBzZW5kIGEgc3luYyBtZXNzYWdlLiBUaGUgRGVsZXRlU2V0IG1lc3NhZ2UgaXMgY3JlYXRlZCBkaXJlY3RseSBmcm9tIFN0cnVjdFN0b3JlXG4gKiAtIFdlIHJlYWQgYSBEZWxldGVTZXQgYXMgcGFydCBvZiBhIHN5bmMvdXBkYXRlIG1lc3NhZ2UuIEluIHRoaXMgY2FzZSB0aGUgRGVsZXRlU2V0IGlzIGFscmVhZHkgc29ydGVkIGFuZCBtZXJnZWQuXG4gKi9cbmNsYXNzIERlbGV0ZVNldCB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7TWFwPG51bWJlcixBcnJheTxEZWxldGVJdGVtPj59XG4gICAgICovXG4gICAgdGhpcy5jbGllbnRzID0gbmV3IE1hcCgpO1xuICB9XG59XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFsbCBzdHJ1Y3RzIHRoYXQgdGhlIERlbGV0ZVNldCBnYydzLlxuICpcbiAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gKiBAcGFyYW0ge0RlbGV0ZVNldH0gZHNcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oR0N8SXRlbSk6dm9pZH0gZlxuICpcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCBpdGVyYXRlRGVsZXRlZFN0cnVjdHMgPSAodHJhbnNhY3Rpb24sIGRzLCBmKSA9PlxuICBkcy5jbGllbnRzLmZvckVhY2goKGRlbGV0ZXMsIGNsaWVudGlkKSA9PiB7XG4gICAgY29uc3Qgc3RydWN0cyA9IC8qKiBAdHlwZSB7QXJyYXk8R0N8SXRlbT59ICovICh0cmFuc2FjdGlvbi5kb2Muc3RvcmUuY2xpZW50cy5nZXQoY2xpZW50aWQpKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRlbGV0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGRlbCA9IGRlbGV0ZXNbaV07XG4gICAgICBpdGVyYXRlU3RydWN0cyh0cmFuc2FjdGlvbiwgc3RydWN0cywgZGVsLmNsb2NrLCBkZWwubGVuLCBmKTtcbiAgICB9XG4gIH0pO1xuXG4vKipcbiAqIEBwYXJhbSB7QXJyYXk8RGVsZXRlSXRlbT59IGRpc1xuICogQHBhcmFtIHtudW1iZXJ9IGNsb2NrXG4gKiBAcmV0dXJuIHtudW1iZXJ8bnVsbH1cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IGZpbmRJbmRleERTID0gKGRpcywgY2xvY2spID0+IHtcbiAgbGV0IGxlZnQgPSAwO1xuICBsZXQgcmlnaHQgPSBkaXMubGVuZ3RoIC0gMTtcbiAgd2hpbGUgKGxlZnQgPD0gcmlnaHQpIHtcbiAgICBjb25zdCBtaWRpbmRleCA9IG1hdGguZmxvb3IoKGxlZnQgKyByaWdodCkgLyAyKTtcbiAgICBjb25zdCBtaWQgPSBkaXNbbWlkaW5kZXhdO1xuICAgIGNvbnN0IG1pZGNsb2NrID0gbWlkLmNsb2NrO1xuICAgIGlmIChtaWRjbG9jayA8PSBjbG9jaykge1xuICAgICAgaWYgKGNsb2NrIDwgbWlkY2xvY2sgKyBtaWQubGVuKSB7XG4gICAgICAgIHJldHVybiBtaWRpbmRleFxuICAgICAgfVxuICAgICAgbGVmdCA9IG1pZGluZGV4ICsgMTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmlnaHQgPSBtaWRpbmRleCAtIDE7XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7RGVsZXRlU2V0fSBkc1xuICogQHBhcmFtIHtJRH0gaWRcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCBpc0RlbGV0ZWQgPSAoZHMsIGlkKSA9PiB7XG4gIGNvbnN0IGRpcyA9IGRzLmNsaWVudHMuZ2V0KGlkLmNsaWVudCk7XG4gIHJldHVybiBkaXMgIT09IHVuZGVmaW5lZCAmJiBmaW5kSW5kZXhEUyhkaXMsIGlkLmNsb2NrKSAhPT0gbnVsbFxufTtcblxuLyoqXG4gKiBAcGFyYW0ge0RlbGV0ZVNldH0gZHNcbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IHNvcnRBbmRNZXJnZURlbGV0ZVNldCA9IGRzID0+IHtcbiAgZHMuY2xpZW50cy5mb3JFYWNoKGRlbHMgPT4ge1xuICAgIGRlbHMuc29ydCgoYSwgYikgPT4gYS5jbG9jayAtIGIuY2xvY2spO1xuICAgIC8vIG1lcmdlIGl0ZW1zIHdpdGhvdXQgZmlsdGVyaW5nIG9yIHNwbGljaW5nIHRoZSBhcnJheVxuICAgIC8vIGkgaXMgdGhlIGN1cnJlbnQgcG9pbnRlclxuICAgIC8vIGogcmVmZXJzIHRvIHRoZSBjdXJyZW50IGluc2VydCBwb3NpdGlvbiBmb3IgdGhlIHBvaW50ZWQgaXRlbVxuICAgIC8vIHRyeSB0byBtZXJnZSBkZWxzW2ldIGludG8gZGVsc1tqLTFdIG9yIHNldCBkZWxzW2pdPWRlbHNbaV1cbiAgICBsZXQgaSwgajtcbiAgICBmb3IgKGkgPSAxLCBqID0gMTsgaSA8IGRlbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGxlZnQgPSBkZWxzW2ogLSAxXTtcbiAgICAgIGNvbnN0IHJpZ2h0ID0gZGVsc1tpXTtcbiAgICAgIGlmIChsZWZ0LmNsb2NrICsgbGVmdC5sZW4gPj0gcmlnaHQuY2xvY2spIHtcbiAgICAgICAgbGVmdC5sZW4gPSBtYXRoLm1heChsZWZ0LmxlbiwgcmlnaHQuY2xvY2sgKyByaWdodC5sZW4gLSBsZWZ0LmNsb2NrKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChqIDwgaSkge1xuICAgICAgICAgIGRlbHNbal0gPSByaWdodDtcbiAgICAgICAgfVxuICAgICAgICBqKys7XG4gICAgICB9XG4gICAgfVxuICAgIGRlbHMubGVuZ3RoID0gajtcbiAgfSk7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7QXJyYXk8RGVsZXRlU2V0Pn0gZHNzXG4gKiBAcmV0dXJuIHtEZWxldGVTZXR9IEEgZnJlc2ggRGVsZXRlU2V0XG4gKi9cbmNvbnN0IG1lcmdlRGVsZXRlU2V0cyA9IGRzcyA9PiB7XG4gIGNvbnN0IG1lcmdlZCA9IG5ldyBEZWxldGVTZXQoKTtcbiAgZm9yIChsZXQgZHNzSSA9IDA7IGRzc0kgPCBkc3MubGVuZ3RoOyBkc3NJKyspIHtcbiAgICBkc3NbZHNzSV0uY2xpZW50cy5mb3JFYWNoKChkZWxzTGVmdCwgY2xpZW50KSA9PiB7XG4gICAgICBpZiAoIW1lcmdlZC5jbGllbnRzLmhhcyhjbGllbnQpKSB7XG4gICAgICAgIC8vIFdyaXRlIGFsbCBtaXNzaW5nIGtleXMgZnJvbSBjdXJyZW50IGRzIGFuZCBhbGwgZm9sbG93aW5nLlxuICAgICAgICAvLyBJZiBtZXJnZWQgYWxyZWFkeSBjb250YWlucyBgY2xpZW50YCBjdXJyZW50IGRzIGhhcyBhbHJlYWR5IGJlZW4gYWRkZWQuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAdHlwZSB7QXJyYXk8RGVsZXRlSXRlbT59XG4gICAgICAgICAqL1xuICAgICAgICBjb25zdCBkZWxzID0gZGVsc0xlZnQuc2xpY2UoKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IGRzc0kgKyAxOyBpIDwgZHNzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgYXJyYXkuYXBwZW5kVG8oZGVscywgZHNzW2ldLmNsaWVudHMuZ2V0KGNsaWVudCkgfHwgW10pO1xuICAgICAgICB9XG4gICAgICAgIG1lcmdlZC5jbGllbnRzLnNldChjbGllbnQsIGRlbHMpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIHNvcnRBbmRNZXJnZURlbGV0ZVNldChtZXJnZWQpO1xuICByZXR1cm4gbWVyZ2VkXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7RGVsZXRlU2V0fSBkc1xuICogQHBhcmFtIHtudW1iZXJ9IGNsaWVudFxuICogQHBhcmFtIHtudW1iZXJ9IGNsb2NrXG4gKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoXG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCBhZGRUb0RlbGV0ZVNldCA9IChkcywgY2xpZW50LCBjbG9jaywgbGVuZ3RoKSA9PiB7XG4gIG1hcC5zZXRJZlVuZGVmaW5lZChkcy5jbGllbnRzLCBjbGllbnQsICgpID0+IFtdKS5wdXNoKG5ldyBEZWxldGVJdGVtKGNsb2NrLCBsZW5ndGgpKTtcbn07XG5cbmNvbnN0IGNyZWF0ZURlbGV0ZVNldCA9ICgpID0+IG5ldyBEZWxldGVTZXQoKTtcblxuLyoqXG4gKiBAcGFyYW0ge1N0cnVjdFN0b3JlfSBzc1xuICogQHJldHVybiB7RGVsZXRlU2V0fSBNZXJnZWQgYW5kIHNvcnRlZCBEZWxldGVTZXRcbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IGNyZWF0ZURlbGV0ZVNldEZyb21TdHJ1Y3RTdG9yZSA9IHNzID0+IHtcbiAgY29uc3QgZHMgPSBjcmVhdGVEZWxldGVTZXQoKTtcbiAgc3MuY2xpZW50cy5mb3JFYWNoKChzdHJ1Y3RzLCBjbGllbnQpID0+IHtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7QXJyYXk8RGVsZXRlSXRlbT59XG4gICAgICovXG4gICAgY29uc3QgZHNpdGVtcyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RydWN0cy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3Qgc3RydWN0ID0gc3RydWN0c1tpXTtcbiAgICAgIGlmIChzdHJ1Y3QuZGVsZXRlZCkge1xuICAgICAgICBjb25zdCBjbG9jayA9IHN0cnVjdC5pZC5jbG9jaztcbiAgICAgICAgbGV0IGxlbiA9IHN0cnVjdC5sZW5ndGg7XG4gICAgICAgIGlmIChpICsgMSA8IHN0cnVjdHMubGVuZ3RoKSB7XG4gICAgICAgICAgZm9yIChsZXQgbmV4dCA9IHN0cnVjdHNbaSArIDFdOyBpICsgMSA8IHN0cnVjdHMubGVuZ3RoICYmIG5leHQuZGVsZXRlZDsgbmV4dCA9IHN0cnVjdHNbKytpICsgMV0pIHtcbiAgICAgICAgICAgIGxlbiArPSBuZXh0Lmxlbmd0aDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZHNpdGVtcy5wdXNoKG5ldyBEZWxldGVJdGVtKGNsb2NrLCBsZW4pKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGRzaXRlbXMubGVuZ3RoID4gMCkge1xuICAgICAgZHMuY2xpZW50cy5zZXQoY2xpZW50LCBkc2l0ZW1zKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gZHNcbn07XG5cbi8qKlxuICogQHBhcmFtIHtEU0VuY29kZXJWMSB8IERTRW5jb2RlclYyfSBlbmNvZGVyXG4gKiBAcGFyYW0ge0RlbGV0ZVNldH0gZHNcbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IHdyaXRlRGVsZXRlU2V0ID0gKGVuY29kZXIsIGRzKSA9PiB7XG4gIGVuY29kaW5nLndyaXRlVmFyVWludChlbmNvZGVyLnJlc3RFbmNvZGVyLCBkcy5jbGllbnRzLnNpemUpO1xuICBkcy5jbGllbnRzLmZvckVhY2goKGRzaXRlbXMsIGNsaWVudCkgPT4ge1xuICAgIGVuY29kZXIucmVzZXREc0N1clZhbCgpO1xuICAgIGVuY29kaW5nLndyaXRlVmFyVWludChlbmNvZGVyLnJlc3RFbmNvZGVyLCBjbGllbnQpO1xuICAgIGNvbnN0IGxlbiA9IGRzaXRlbXMubGVuZ3RoO1xuICAgIGVuY29kaW5nLndyaXRlVmFyVWludChlbmNvZGVyLnJlc3RFbmNvZGVyLCBsZW4pO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGNvbnN0IGl0ZW0gPSBkc2l0ZW1zW2ldO1xuICAgICAgZW5jb2Rlci53cml0ZURzQ2xvY2soaXRlbS5jbG9jayk7XG4gICAgICBlbmNvZGVyLndyaXRlRHNMZW4oaXRlbS5sZW4pO1xuICAgIH1cbiAgfSk7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7RFNEZWNvZGVyVjEgfCBEU0RlY29kZXJWMn0gZGVjb2RlclxuICogQHJldHVybiB7RGVsZXRlU2V0fVxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgcmVhZERlbGV0ZVNldCA9IGRlY29kZXIgPT4ge1xuICBjb25zdCBkcyA9IG5ldyBEZWxldGVTZXQoKTtcbiAgY29uc3QgbnVtQ2xpZW50cyA9IGRlY29kaW5nLnJlYWRWYXJVaW50KGRlY29kZXIucmVzdERlY29kZXIpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IG51bUNsaWVudHM7IGkrKykge1xuICAgIGRlY29kZXIucmVzZXREc0N1clZhbCgpO1xuICAgIGNvbnN0IGNsaWVudCA9IGRlY29kaW5nLnJlYWRWYXJVaW50KGRlY29kZXIucmVzdERlY29kZXIpO1xuICAgIGNvbnN0IG51bWJlck9mRGVsZXRlcyA9IGRlY29kaW5nLnJlYWRWYXJVaW50KGRlY29kZXIucmVzdERlY29kZXIpO1xuICAgIGlmIChudW1iZXJPZkRlbGV0ZXMgPiAwKSB7XG4gICAgICBjb25zdCBkc0ZpZWxkID0gbWFwLnNldElmVW5kZWZpbmVkKGRzLmNsaWVudHMsIGNsaWVudCwgKCkgPT4gW10pO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1iZXJPZkRlbGV0ZXM7IGkrKykge1xuICAgICAgICBkc0ZpZWxkLnB1c2gobmV3IERlbGV0ZUl0ZW0oZGVjb2Rlci5yZWFkRHNDbG9jaygpLCBkZWNvZGVyLnJlYWREc0xlbigpKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBkc1xufTtcblxuLyoqXG4gKiBAdG9kbyBZRGVjb2RlciBhbHNvIGNvbnRhaW5zIHJlZmVyZW5jZXMgdG8gU3RyaW5nIGFuZCBvdGhlciBEZWNvZGVycy4gV291bGQgbWFrZSBzZW5zZSB0byBleGNoYW5nZSBZRGVjb2Rlci50b1VpbnQ4QXJyYXkgZm9yIFlEZWNvZGVyLkRzVG9VaW50OEFycmF5KCkuLlxuICovXG5cbi8qKlxuICogQHBhcmFtIHtEU0RlY29kZXJWMSB8IERTRGVjb2RlclYyfSBkZWNvZGVyXG4gKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICogQHBhcmFtIHtTdHJ1Y3RTdG9yZX0gc3RvcmVcbiAqIEByZXR1cm4ge1VpbnQ4QXJyYXl8bnVsbH0gUmV0dXJucyBhIHYyIHVwZGF0ZSBjb250YWluaW5nIGFsbCBkZWxldGVzIHRoYXQgY291bGRuJ3QgYmUgYXBwbGllZCB5ZXQ7IG9yIG51bGwgaWYgYWxsIGRlbGV0ZXMgd2VyZSBhcHBsaWVkIHN1Y2Nlc3NmdWxseS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IHJlYWRBbmRBcHBseURlbGV0ZVNldCA9IChkZWNvZGVyLCB0cmFuc2FjdGlvbiwgc3RvcmUpID0+IHtcbiAgY29uc3QgdW5hcHBsaWVkRFMgPSBuZXcgRGVsZXRlU2V0KCk7XG4gIGNvbnN0IG51bUNsaWVudHMgPSBkZWNvZGluZy5yZWFkVmFyVWludChkZWNvZGVyLnJlc3REZWNvZGVyKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1DbGllbnRzOyBpKyspIHtcbiAgICBkZWNvZGVyLnJlc2V0RHNDdXJWYWwoKTtcbiAgICBjb25zdCBjbGllbnQgPSBkZWNvZGluZy5yZWFkVmFyVWludChkZWNvZGVyLnJlc3REZWNvZGVyKTtcbiAgICBjb25zdCBudW1iZXJPZkRlbGV0ZXMgPSBkZWNvZGluZy5yZWFkVmFyVWludChkZWNvZGVyLnJlc3REZWNvZGVyKTtcbiAgICBjb25zdCBzdHJ1Y3RzID0gc3RvcmUuY2xpZW50cy5nZXQoY2xpZW50KSB8fCBbXTtcbiAgICBjb25zdCBzdGF0ZSA9IGdldFN0YXRlKHN0b3JlLCBjbGllbnQpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtYmVyT2ZEZWxldGVzOyBpKyspIHtcbiAgICAgIGNvbnN0IGNsb2NrID0gZGVjb2Rlci5yZWFkRHNDbG9jaygpO1xuICAgICAgY29uc3QgY2xvY2tFbmQgPSBjbG9jayArIGRlY29kZXIucmVhZERzTGVuKCk7XG4gICAgICBpZiAoY2xvY2sgPCBzdGF0ZSkge1xuICAgICAgICBpZiAoc3RhdGUgPCBjbG9ja0VuZCkge1xuICAgICAgICAgIGFkZFRvRGVsZXRlU2V0KHVuYXBwbGllZERTLCBjbGllbnQsIHN0YXRlLCBjbG9ja0VuZCAtIHN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgaW5kZXggPSBmaW5kSW5kZXhTUyhzdHJ1Y3RzLCBjbG9jayk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXZSBjYW4gaWdub3JlIHRoZSBjYXNlIG9mIEdDIGFuZCBEZWxldGUgc3RydWN0cywgYmVjYXVzZSB3ZSBhcmUgZ29pbmcgdG8gc2tpcCB0aGVtXG4gICAgICAgICAqIEB0eXBlIHtJdGVtfVxuICAgICAgICAgKi9cbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBsZXQgc3RydWN0ID0gc3RydWN0c1tpbmRleF07XG4gICAgICAgIC8vIHNwbGl0IHRoZSBmaXJzdCBpdGVtIGlmIG5lY2Vzc2FyeVxuICAgICAgICBpZiAoIXN0cnVjdC5kZWxldGVkICYmIHN0cnVjdC5pZC5jbG9jayA8IGNsb2NrKSB7XG4gICAgICAgICAgc3RydWN0cy5zcGxpY2UoaW5kZXggKyAxLCAwLCBzcGxpdEl0ZW0odHJhbnNhY3Rpb24sIHN0cnVjdCwgY2xvY2sgLSBzdHJ1Y3QuaWQuY2xvY2spKTtcbiAgICAgICAgICBpbmRleCsrOyAvLyBpbmNyZWFzZSB3ZSBub3cgd2FudCB0byB1c2UgdGhlIG5leHQgc3RydWN0XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKGluZGV4IDwgc3RydWN0cy5sZW5ndGgpIHtcbiAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgc3RydWN0ID0gc3RydWN0c1tpbmRleCsrXTtcbiAgICAgICAgICBpZiAoc3RydWN0LmlkLmNsb2NrIDwgY2xvY2tFbmQpIHtcbiAgICAgICAgICAgIGlmICghc3RydWN0LmRlbGV0ZWQpIHtcbiAgICAgICAgICAgICAgaWYgKGNsb2NrRW5kIDwgc3RydWN0LmlkLmNsb2NrICsgc3RydWN0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHN0cnVjdHMuc3BsaWNlKGluZGV4LCAwLCBzcGxpdEl0ZW0odHJhbnNhY3Rpb24sIHN0cnVjdCwgY2xvY2tFbmQgLSBzdHJ1Y3QuaWQuY2xvY2spKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBzdHJ1Y3QuZGVsZXRlKHRyYW5zYWN0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFkZFRvRGVsZXRlU2V0KHVuYXBwbGllZERTLCBjbGllbnQsIGNsb2NrLCBjbG9ja0VuZCAtIGNsb2NrKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKHVuYXBwbGllZERTLmNsaWVudHMuc2l6ZSA+IDApIHtcbiAgICBjb25zdCBkcyA9IG5ldyBVcGRhdGVFbmNvZGVyVjIoKTtcbiAgICBlbmNvZGluZy53cml0ZVZhclVpbnQoZHMucmVzdEVuY29kZXIsIDApOyAvLyBlbmNvZGUgMCBzdHJ1Y3RzXG4gICAgd3JpdGVEZWxldGVTZXQoZHMsIHVuYXBwbGllZERTKTtcbiAgICByZXR1cm4gZHMudG9VaW50OEFycmF5KClcbiAgfVxuICByZXR1cm4gbnVsbFxufTtcblxuLyoqXG4gKiBAbW9kdWxlIFlcbiAqL1xuXG5jb25zdCBnZW5lcmF0ZU5ld0NsaWVudElkID0gcmFuZG9tLnVpbnQzMjtcblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBEb2NPcHRzXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IFtEb2NPcHRzLmdjPXRydWVdIERpc2FibGUgZ2FyYmFnZSBjb2xsZWN0aW9uIChkZWZhdWx0OiBnYz10cnVlKVxuICogQHByb3BlcnR5IHtmdW5jdGlvbihJdGVtKTpib29sZWFufSBbRG9jT3B0cy5nY0ZpbHRlcl0gV2lsbCBiZSBjYWxsZWQgYmVmb3JlIGFuIEl0ZW0gaXMgZ2FyYmFnZSBjb2xsZWN0ZWQuIFJldHVybiBmYWxzZSB0byBrZWVwIHRoZSBJdGVtLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtEb2NPcHRzLmd1aWRdIERlZmluZSBhIGdsb2JhbGx5IHVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGlzIGRvY3VtZW50XG4gKiBAcHJvcGVydHkge3N0cmluZyB8IG51bGx9IFtEb2NPcHRzLmNvbGxlY3Rpb25pZF0gQXNzb2NpYXRlIHRoaXMgZG9jdW1lbnQgd2l0aCBhIGNvbGxlY3Rpb24uIFRoaXMgb25seSBwbGF5cyBhIHJvbGUgaWYgeW91ciBwcm92aWRlciBoYXMgYSBjb25jZXB0IG9mIGNvbGxlY3Rpb24uXG4gKiBAcHJvcGVydHkge2FueX0gW0RvY09wdHMubWV0YV0gQW55IGtpbmQgb2YgbWV0YSBpbmZvcm1hdGlvbiB5b3Ugd2FudCB0byBhc3NvY2lhdGUgd2l0aCB0aGlzIGRvY3VtZW50LiBJZiB0aGlzIGlzIGEgc3ViZG9jdW1lbnQsIHJlbW90ZSBwZWVycyB3aWxsIHN0b3JlIHRoZSBtZXRhIGluZm9ybWF0aW9uIGFzIHdlbGwuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IFtEb2NPcHRzLmF1dG9Mb2FkXSBJZiBhIHN1YmRvY3VtZW50LCBhdXRvbWF0aWNhbGx5IGxvYWQgZG9jdW1lbnQuIElmIHRoaXMgaXMgYSBzdWJkb2N1bWVudCwgcmVtb3RlIHBlZXJzIHdpbGwgbG9hZCB0aGUgZG9jdW1lbnQgYXMgd2VsbCBhdXRvbWF0aWNhbGx5LlxuICogQHByb3BlcnR5IHtib29sZWFufSBbRG9jT3B0cy5zaG91bGRMb2FkXSBXaGV0aGVyIHRoZSBkb2N1bWVudCBzaG91bGQgYmUgc3luY2VkIGJ5IHRoZSBwcm92aWRlciBub3cuIFRoaXMgaXMgdG9nZ2xlZCB0byB0cnVlIHdoZW4geW91IGNhbGwgeWRvYy5sb2FkKClcbiAqL1xuXG4vKipcbiAqIEEgWWpzIGluc3RhbmNlIGhhbmRsZXMgdGhlIHN0YXRlIG9mIHNoYXJlZCBkYXRhLlxuICogQGV4dGVuZHMgT2JzZXJ2YWJsZTxzdHJpbmc+XG4gKi9cbmNsYXNzIERvYyBleHRlbmRzIE9ic2VydmFibGUge1xuICAvKipcbiAgICogQHBhcmFtIHtEb2NPcHRzfSBbb3B0c10gY29uZmlndXJhdGlvblxuICAgKi9cbiAgY29uc3RydWN0b3IgKHsgZ3VpZCA9IHJhbmRvbS51dWlkdjQoKSwgY29sbGVjdGlvbmlkID0gbnVsbCwgZ2MgPSB0cnVlLCBnY0ZpbHRlciA9ICgpID0+IHRydWUsIG1ldGEgPSBudWxsLCBhdXRvTG9hZCA9IGZhbHNlLCBzaG91bGRMb2FkID0gdHJ1ZSB9ID0ge30pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuZ2MgPSBnYztcbiAgICB0aGlzLmdjRmlsdGVyID0gZ2NGaWx0ZXI7XG4gICAgdGhpcy5jbGllbnRJRCA9IGdlbmVyYXRlTmV3Q2xpZW50SWQoKTtcbiAgICB0aGlzLmd1aWQgPSBndWlkO1xuICAgIHRoaXMuY29sbGVjdGlvbmlkID0gY29sbGVjdGlvbmlkO1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtNYXA8c3RyaW5nLCBBYnN0cmFjdFR5cGU8WUV2ZW50PGFueT4+Pn1cbiAgICAgKi9cbiAgICB0aGlzLnNoYXJlID0gbmV3IE1hcCgpO1xuICAgIHRoaXMuc3RvcmUgPSBuZXcgU3RydWN0U3RvcmUoKTtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7VHJhbnNhY3Rpb24gfCBudWxsfVxuICAgICAqL1xuICAgIHRoaXMuX3RyYW5zYWN0aW9uID0gbnVsbDtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7QXJyYXk8VHJhbnNhY3Rpb24+fVxuICAgICAqL1xuICAgIHRoaXMuX3RyYW5zYWN0aW9uQ2xlYW51cHMgPSBbXTtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7U2V0PERvYz59XG4gICAgICovXG4gICAgdGhpcy5zdWJkb2NzID0gbmV3IFNldCgpO1xuICAgIC8qKlxuICAgICAqIElmIHRoaXMgZG9jdW1lbnQgaXMgYSBzdWJkb2N1bWVudCAtIGEgZG9jdW1lbnQgaW50ZWdyYXRlZCBpbnRvIGFub3RoZXIgZG9jdW1lbnQgLSB0aGVuIF9pdGVtIGlzIGRlZmluZWQuXG4gICAgICogQHR5cGUge0l0ZW0/fVxuICAgICAqL1xuICAgIHRoaXMuX2l0ZW0gPSBudWxsO1xuICAgIHRoaXMuc2hvdWxkTG9hZCA9IHNob3VsZExvYWQ7XG4gICAgdGhpcy5hdXRvTG9hZCA9IGF1dG9Mb2FkO1xuICAgIHRoaXMubWV0YSA9IG1ldGE7XG4gICAgdGhpcy5pc0xvYWRlZCA9IGZhbHNlO1xuICAgIHRoaXMud2hlbkxvYWRlZCA9IHByb21pc2UuY3JlYXRlKHJlc29sdmUgPT4ge1xuICAgICAgdGhpcy5vbignbG9hZCcsICgpID0+IHtcbiAgICAgICAgdGhpcy5pc0xvYWRlZCA9IHRydWU7XG4gICAgICAgIHJlc29sdmUodGhpcyk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBOb3RpZnkgdGhlIHBhcmVudCBkb2N1bWVudCB0aGF0IHlvdSByZXF1ZXN0IHRvIGxvYWQgZGF0YSBpbnRvIHRoaXMgc3ViZG9jdW1lbnQgKGlmIGl0IGlzIGEgc3ViZG9jdW1lbnQpLlxuICAgKlxuICAgKiBgbG9hZCgpYCBtaWdodCBiZSB1c2VkIGluIHRoZSBmdXR1cmUgdG8gcmVxdWVzdCBhbnkgcHJvdmlkZXIgdG8gbG9hZCB0aGUgbW9zdCBjdXJyZW50IGRhdGEuXG4gICAqXG4gICAqIEl0IGlzIHNhZmUgdG8gY2FsbCBgbG9hZCgpYCBtdWx0aXBsZSB0aW1lcy5cbiAgICovXG4gIGxvYWQgKCkge1xuICAgIGNvbnN0IGl0ZW0gPSB0aGlzLl9pdGVtO1xuICAgIGlmIChpdGVtICE9PSBudWxsICYmICF0aGlzLnNob3VsZExvYWQpIHtcbiAgICAgIHRyYW5zYWN0KC8qKiBAdHlwZSB7YW55fSAqLyAoaXRlbS5wYXJlbnQpLmRvYywgdHJhbnNhY3Rpb24gPT4ge1xuICAgICAgICB0cmFuc2FjdGlvbi5zdWJkb2NzTG9hZGVkLmFkZCh0aGlzKTtcbiAgICAgIH0sIG51bGwsIHRydWUpO1xuICAgIH1cbiAgICB0aGlzLnNob3VsZExvYWQgPSB0cnVlO1xuICB9XG5cbiAgZ2V0U3ViZG9jcyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3ViZG9jc1xuICB9XG5cbiAgZ2V0U3ViZG9jR3VpZHMgKCkge1xuICAgIHJldHVybiBuZXcgU2V0KEFycmF5LmZyb20odGhpcy5zdWJkb2NzKS5tYXAoZG9jID0+IGRvYy5ndWlkKSlcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGFuZ2VzIHRoYXQgaGFwcGVuIGluc2lkZSBvZiBhIHRyYW5zYWN0aW9uIGFyZSBidW5kbGVkLiBUaGlzIG1lYW5zIHRoYXRcbiAgICogdGhlIG9ic2VydmVyIGZpcmVzIF9hZnRlcl8gdGhlIHRyYW5zYWN0aW9uIGlzIGZpbmlzaGVkIGFuZCB0aGF0IGFsbCBjaGFuZ2VzXG4gICAqIHRoYXQgaGFwcGVuZWQgaW5zaWRlIG9mIHRoZSB0cmFuc2FjdGlvbiBhcmUgc2VudCBhcyBvbmUgbWVzc2FnZSB0byB0aGVcbiAgICogb3RoZXIgcGVlcnMuXG4gICAqXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oVHJhbnNhY3Rpb24pOnZvaWR9IGYgVGhlIGZ1bmN0aW9uIHRoYXQgc2hvdWxkIGJlIGV4ZWN1dGVkIGFzIGEgdHJhbnNhY3Rpb25cbiAgICogQHBhcmFtIHthbnl9IFtvcmlnaW5dIE9yaWdpbiBvZiB3aG8gc3RhcnRlZCB0aGUgdHJhbnNhY3Rpb24uIFdpbGwgYmUgc3RvcmVkIG9uIHRyYW5zYWN0aW9uLm9yaWdpblxuICAgKlxuICAgKiBAcHVibGljXG4gICAqL1xuICB0cmFuc2FjdCAoZiwgb3JpZ2luID0gbnVsbCkge1xuICAgIHRyYW5zYWN0KHRoaXMsIGYsIG9yaWdpbik7XG4gIH1cblxuICAvKipcbiAgICogRGVmaW5lIGEgc2hhcmVkIGRhdGEgdHlwZS5cbiAgICpcbiAgICogTXVsdGlwbGUgY2FsbHMgb2YgYHkuZ2V0KG5hbWUsIFR5cGVDb25zdHJ1Y3RvcilgIHlpZWxkIHRoZSBzYW1lIHJlc3VsdFxuICAgKiBhbmQgZG8gbm90IG92ZXJ3cml0ZSBlYWNoIG90aGVyLiBJLmUuXG4gICAqIGB5LmRlZmluZShuYW1lLCBZLkFycmF5KSA9PT0geS5kZWZpbmUobmFtZSwgWS5BcnJheSlgXG4gICAqXG4gICAqIEFmdGVyIHRoaXMgbWV0aG9kIGlzIGNhbGxlZCwgdGhlIHR5cGUgaXMgYWxzbyBhdmFpbGFibGUgb24gYHkuc2hhcmUuZ2V0KG5hbWUpYC5cbiAgICpcbiAgICogKkJlc3QgUHJhY3RpY2VzOipcbiAgICogRGVmaW5lIGFsbCB0eXBlcyByaWdodCBhZnRlciB0aGUgWWpzIGluc3RhbmNlIGlzIGNyZWF0ZWQgYW5kIHN0b3JlIHRoZW0gaW4gYSBzZXBhcmF0ZSBvYmplY3QuXG4gICAqIEFsc28gdXNlIHRoZSB0eXBlZCBtZXRob2RzIGBnZXRUZXh0KG5hbWUpYCwgYGdldEFycmF5KG5hbWUpYCwgLi5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogICBjb25zdCB5ID0gbmV3IFkoLi4pXG4gICAqICAgY29uc3QgYXBwU3RhdGUgPSB7XG4gICAqICAgICBkb2N1bWVudDogeS5nZXRUZXh0KCdkb2N1bWVudCcpXG4gICAqICAgICBjb21tZW50czogeS5nZXRBcnJheSgnY29tbWVudHMnKVxuICAgKiAgIH1cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gVHlwZUNvbnN0cnVjdG9yIFRoZSBjb25zdHJ1Y3RvciBvZiB0aGUgdHlwZSBkZWZpbml0aW9uLiBFLmcuIFkuVGV4dCwgWS5BcnJheSwgWS5NYXAsIC4uLlxuICAgKiBAcmV0dXJuIHtBYnN0cmFjdFR5cGU8YW55Pn0gVGhlIGNyZWF0ZWQgdHlwZS4gQ29uc3RydWN0ZWQgd2l0aCBUeXBlQ29uc3RydWN0b3JcbiAgICpcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgZ2V0IChuYW1lLCBUeXBlQ29uc3RydWN0b3IgPSBBYnN0cmFjdFR5cGUpIHtcbiAgICBjb25zdCB0eXBlID0gbWFwLnNldElmVW5kZWZpbmVkKHRoaXMuc2hhcmUsIG5hbWUsICgpID0+IHtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIGNvbnN0IHQgPSBuZXcgVHlwZUNvbnN0cnVjdG9yKCk7XG4gICAgICB0Ll9pbnRlZ3JhdGUodGhpcywgbnVsbCk7XG4gICAgICByZXR1cm4gdFxuICAgIH0pO1xuICAgIGNvbnN0IENvbnN0ciA9IHR5cGUuY29uc3RydWN0b3I7XG4gICAgaWYgKFR5cGVDb25zdHJ1Y3RvciAhPT0gQWJzdHJhY3RUeXBlICYmIENvbnN0ciAhPT0gVHlwZUNvbnN0cnVjdG9yKSB7XG4gICAgICBpZiAoQ29uc3RyID09PSBBYnN0cmFjdFR5cGUpIHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBjb25zdCB0ID0gbmV3IFR5cGVDb25zdHJ1Y3RvcigpO1xuICAgICAgICB0Ll9tYXAgPSB0eXBlLl9tYXA7XG4gICAgICAgIHR5cGUuX21hcC5mb3JFYWNoKC8qKiBAcGFyYW0ge0l0ZW0/fSBuICovIG4gPT4ge1xuICAgICAgICAgIGZvciAoOyBuICE9PSBudWxsOyBuID0gbi5sZWZ0KSB7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICBuLnBhcmVudCA9IHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdC5fc3RhcnQgPSB0eXBlLl9zdGFydDtcbiAgICAgICAgZm9yIChsZXQgbiA9IHQuX3N0YXJ0OyBuICE9PSBudWxsOyBuID0gbi5yaWdodCkge1xuICAgICAgICAgIG4ucGFyZW50ID0gdDtcbiAgICAgICAgfVxuICAgICAgICB0Ll9sZW5ndGggPSB0eXBlLl9sZW5ndGg7XG4gICAgICAgIHRoaXMuc2hhcmUuc2V0KG5hbWUsIHQpO1xuICAgICAgICB0Ll9pbnRlZ3JhdGUodGhpcywgbnVsbCk7XG4gICAgICAgIHJldHVybiB0XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFR5cGUgd2l0aCB0aGUgbmFtZSAke25hbWV9IGhhcyBhbHJlYWR5IGJlZW4gZGVmaW5lZCB3aXRoIGEgZGlmZmVyZW50IGNvbnN0cnVjdG9yYClcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHR5cGVcbiAgfVxuXG4gIC8qKlxuICAgKiBAdGVtcGxhdGUgVFxuICAgKiBAcGFyYW0ge3N0cmluZ30gW25hbWVdXG4gICAqIEByZXR1cm4ge1lBcnJheTxUPn1cbiAgICpcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgZ2V0QXJyYXkgKG5hbWUgPSAnJykge1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICByZXR1cm4gdGhpcy5nZXQobmFtZSwgWUFycmF5KVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbbmFtZV1cbiAgICogQHJldHVybiB7WVRleHR9XG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIGdldFRleHQgKG5hbWUgPSAnJykge1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICByZXR1cm4gdGhpcy5nZXQobmFtZSwgWVRleHQpXG4gIH1cblxuICAvKipcbiAgICogQHRlbXBsYXRlIFRcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtuYW1lXVxuICAgKiBAcmV0dXJuIHtZTWFwPFQ+fVxuICAgKlxuICAgKiBAcHVibGljXG4gICAqL1xuICBnZXRNYXAgKG5hbWUgPSAnJykge1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICByZXR1cm4gdGhpcy5nZXQobmFtZSwgWU1hcClcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW25hbWVdXG4gICAqIEByZXR1cm4ge1lYbWxGcmFnbWVudH1cbiAgICpcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgZ2V0WG1sRnJhZ21lbnQgKG5hbWUgPSAnJykge1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICByZXR1cm4gdGhpcy5nZXQobmFtZSwgWVhtbEZyYWdtZW50KVxuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIHRoZSBlbnRpcmUgZG9jdW1lbnQgaW50byBhIGpzIG9iamVjdCwgcmVjdXJzaXZlbHkgdHJhdmVyc2luZyBlYWNoIHlqcyB0eXBlXG4gICAqIERvZXNuJ3QgbG9nIHR5cGVzIHRoYXQgaGF2ZSBub3QgYmVlbiBkZWZpbmVkICh1c2luZyB5ZG9jLmdldFR5cGUoLi4pKS5cbiAgICpcbiAgICogQGRlcHJlY2F0ZWQgRG8gbm90IHVzZSB0aGlzIG1ldGhvZCBhbmQgcmF0aGVyIGNhbGwgdG9KU09OIGRpcmVjdGx5IG9uIHRoZSBzaGFyZWQgdHlwZXMuXG4gICAqXG4gICAqIEByZXR1cm4ge09iamVjdDxzdHJpbmcsIGFueT59XG4gICAqL1xuICB0b0pTT04gKCkge1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtPYmplY3Q8c3RyaW5nLCBhbnk+fVxuICAgICAqL1xuICAgIGNvbnN0IGRvYyA9IHt9O1xuXG4gICAgdGhpcy5zaGFyZS5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiB7XG4gICAgICBkb2Nba2V5XSA9IHZhbHVlLnRvSlNPTigpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGRvY1xuICB9XG5cbiAgLyoqXG4gICAqIEVtaXQgYGRlc3Ryb3lgIGV2ZW50IGFuZCB1bnJlZ2lzdGVyIGFsbCBldmVudCBoYW5kbGVycy5cbiAgICovXG4gIGRlc3Ryb3kgKCkge1xuICAgIGFycmF5LmZyb20odGhpcy5zdWJkb2NzKS5mb3JFYWNoKHN1YmRvYyA9PiBzdWJkb2MuZGVzdHJveSgpKTtcbiAgICBjb25zdCBpdGVtID0gdGhpcy5faXRlbTtcbiAgICBpZiAoaXRlbSAhPT0gbnVsbCkge1xuICAgICAgdGhpcy5faXRlbSA9IG51bGw7XG4gICAgICBjb25zdCBjb250ZW50ID0gLyoqIEB0eXBlIHtDb250ZW50RG9jfSAqLyAoaXRlbS5jb250ZW50KTtcbiAgICAgIGNvbnRlbnQuZG9jID0gbmV3IERvYyh7IGd1aWQ6IHRoaXMuZ3VpZCwgLi4uY29udGVudC5vcHRzLCBzaG91bGRMb2FkOiBmYWxzZSB9KTtcbiAgICAgIGNvbnRlbnQuZG9jLl9pdGVtID0gaXRlbTtcbiAgICAgIHRyYW5zYWN0KC8qKiBAdHlwZSB7YW55fSAqLyAoaXRlbSkucGFyZW50LmRvYywgdHJhbnNhY3Rpb24gPT4ge1xuICAgICAgICBjb25zdCBkb2MgPSBjb250ZW50LmRvYztcbiAgICAgICAgaWYgKCFpdGVtLmRlbGV0ZWQpIHtcbiAgICAgICAgICB0cmFuc2FjdGlvbi5zdWJkb2NzQWRkZWQuYWRkKGRvYyk7XG4gICAgICAgIH1cbiAgICAgICAgdHJhbnNhY3Rpb24uc3ViZG9jc1JlbW92ZWQuYWRkKHRoaXMpO1xuICAgICAgfSwgbnVsbCwgdHJ1ZSk7XG4gICAgfVxuICAgIHRoaXMuZW1pdCgnZGVzdHJveWVkJywgW3RydWVdKTtcbiAgICB0aGlzLmVtaXQoJ2Rlc3Ryb3knLCBbdGhpc10pO1xuICAgIHN1cGVyLmRlc3Ryb3koKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oLi4uYW55KTphbnl9IGZcbiAgICovXG4gIG9uIChldmVudE5hbWUsIGYpIHtcbiAgICBzdXBlci5vbihldmVudE5hbWUsIGYpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWVcbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gZlxuICAgKi9cbiAgb2ZmIChldmVudE5hbWUsIGYpIHtcbiAgICBzdXBlci5vZmYoZXZlbnROYW1lLCBmKTtcbiAgfVxufVxuXG5jbGFzcyBEU0RlY29kZXJWMSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge2RlY29kaW5nLkRlY29kZXJ9IGRlY29kZXJcbiAgICovXG4gIGNvbnN0cnVjdG9yIChkZWNvZGVyKSB7XG4gICAgdGhpcy5yZXN0RGVjb2RlciA9IGRlY29kZXI7XG4gIH1cblxuICByZXNldERzQ3VyVmFsICgpIHtcbiAgICAvLyBub3BcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICByZWFkRHNDbG9jayAoKSB7XG4gICAgcmV0dXJuIGRlY29kaW5nLnJlYWRWYXJVaW50KHRoaXMucmVzdERlY29kZXIpXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgcmVhZERzTGVuICgpIHtcbiAgICByZXR1cm4gZGVjb2RpbmcucmVhZFZhclVpbnQodGhpcy5yZXN0RGVjb2RlcilcbiAgfVxufVxuXG5jbGFzcyBVcGRhdGVEZWNvZGVyVjEgZXh0ZW5kcyBEU0RlY29kZXJWMSB7XG4gIC8qKlxuICAgKiBAcmV0dXJuIHtJRH1cbiAgICovXG4gIHJlYWRMZWZ0SUQgKCkge1xuICAgIHJldHVybiBjcmVhdGVJRChkZWNvZGluZy5yZWFkVmFyVWludCh0aGlzLnJlc3REZWNvZGVyKSwgZGVjb2RpbmcucmVhZFZhclVpbnQodGhpcy5yZXN0RGVjb2RlcikpXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7SUR9XG4gICAqL1xuICByZWFkUmlnaHRJRCAoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUlEKGRlY29kaW5nLnJlYWRWYXJVaW50KHRoaXMucmVzdERlY29kZXIpLCBkZWNvZGluZy5yZWFkVmFyVWludCh0aGlzLnJlc3REZWNvZGVyKSlcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWFkIHRoZSBuZXh0IGNsaWVudCBpZC5cbiAgICogVXNlIHRoaXMgaW4gZmF2b3Igb2YgcmVhZElEIHdoZW5ldmVyIHBvc3NpYmxlIHRvIHJlZHVjZSB0aGUgbnVtYmVyIG9mIG9iamVjdHMgY3JlYXRlZC5cbiAgICovXG4gIHJlYWRDbGllbnQgKCkge1xuICAgIHJldHVybiBkZWNvZGluZy5yZWFkVmFyVWludCh0aGlzLnJlc3REZWNvZGVyKVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge251bWJlcn0gaW5mbyBBbiB1bnNpZ25lZCA4LWJpdCBpbnRlZ2VyXG4gICAqL1xuICByZWFkSW5mbyAoKSB7XG4gICAgcmV0dXJuIGRlY29kaW5nLnJlYWRVaW50OCh0aGlzLnJlc3REZWNvZGVyKVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIHJlYWRTdHJpbmcgKCkge1xuICAgIHJldHVybiBkZWNvZGluZy5yZWFkVmFyU3RyaW5nKHRoaXMucmVzdERlY29kZXIpXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gaXNLZXlcbiAgICovXG4gIHJlYWRQYXJlbnRJbmZvICgpIHtcbiAgICByZXR1cm4gZGVjb2RpbmcucmVhZFZhclVpbnQodGhpcy5yZXN0RGVjb2RlcikgPT09IDFcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IGluZm8gQW4gdW5zaWduZWQgOC1iaXQgaW50ZWdlclxuICAgKi9cbiAgcmVhZFR5cGVSZWYgKCkge1xuICAgIHJldHVybiBkZWNvZGluZy5yZWFkVmFyVWludCh0aGlzLnJlc3REZWNvZGVyKVxuICB9XG5cbiAgLyoqXG4gICAqIFdyaXRlIGxlbiBvZiBhIHN0cnVjdCAtIHdlbGwgc3VpdGVkIGZvciBPcHQgUkxFIGVuY29kZXIuXG4gICAqXG4gICAqIEByZXR1cm4ge251bWJlcn0gbGVuXG4gICAqL1xuICByZWFkTGVuICgpIHtcbiAgICByZXR1cm4gZGVjb2RpbmcucmVhZFZhclVpbnQodGhpcy5yZXN0RGVjb2RlcilcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHthbnl9XG4gICAqL1xuICByZWFkQW55ICgpIHtcbiAgICByZXR1cm4gZGVjb2RpbmcucmVhZEFueSh0aGlzLnJlc3REZWNvZGVyKVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge1VpbnQ4QXJyYXl9XG4gICAqL1xuICByZWFkQnVmICgpIHtcbiAgICByZXR1cm4gYnVmZmVyLmNvcHlVaW50OEFycmF5KGRlY29kaW5nLnJlYWRWYXJVaW50OEFycmF5KHRoaXMucmVzdERlY29kZXIpKVxuICB9XG5cbiAgLyoqXG4gICAqIExlZ2FjeSBpbXBsZW1lbnRhdGlvbiB1c2VzIEpTT04gcGFyc2UuIFdlIHVzZSBhbnktZGVjb2RpbmcgaW4gdjIuXG4gICAqXG4gICAqIEByZXR1cm4ge2FueX1cbiAgICovXG4gIHJlYWRKU09OICgpIHtcbiAgICByZXR1cm4gSlNPTi5wYXJzZShkZWNvZGluZy5yZWFkVmFyU3RyaW5nKHRoaXMucmVzdERlY29kZXIpKVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIHJlYWRLZXkgKCkge1xuICAgIHJldHVybiBkZWNvZGluZy5yZWFkVmFyU3RyaW5nKHRoaXMucmVzdERlY29kZXIpXG4gIH1cbn1cblxuY2xhc3MgRFNEZWNvZGVyVjIge1xuICAvKipcbiAgICogQHBhcmFtIHtkZWNvZGluZy5EZWNvZGVyfSBkZWNvZGVyXG4gICAqL1xuICBjb25zdHJ1Y3RvciAoZGVjb2Rlcikge1xuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5kc0N1cnJWYWwgPSAwO1xuICAgIHRoaXMucmVzdERlY29kZXIgPSBkZWNvZGVyO1xuICB9XG5cbiAgcmVzZXREc0N1clZhbCAoKSB7XG4gICAgdGhpcy5kc0N1cnJWYWwgPSAwO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIHJlYWREc0Nsb2NrICgpIHtcbiAgICB0aGlzLmRzQ3VyclZhbCArPSBkZWNvZGluZy5yZWFkVmFyVWludCh0aGlzLnJlc3REZWNvZGVyKTtcbiAgICByZXR1cm4gdGhpcy5kc0N1cnJWYWxcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICByZWFkRHNMZW4gKCkge1xuICAgIGNvbnN0IGRpZmYgPSBkZWNvZGluZy5yZWFkVmFyVWludCh0aGlzLnJlc3REZWNvZGVyKSArIDE7XG4gICAgdGhpcy5kc0N1cnJWYWwgKz0gZGlmZjtcbiAgICByZXR1cm4gZGlmZlxuICB9XG59XG5cbmNsYXNzIFVwZGF0ZURlY29kZXJWMiBleHRlbmRzIERTRGVjb2RlclYyIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7ZGVjb2RpbmcuRGVjb2Rlcn0gZGVjb2RlclxuICAgKi9cbiAgY29uc3RydWN0b3IgKGRlY29kZXIpIHtcbiAgICBzdXBlcihkZWNvZGVyKTtcbiAgICAvKipcbiAgICAgKiBMaXN0IG9mIGNhY2hlZCBrZXlzLiBJZiB0aGUga2V5c1tpZF0gZG9lcyBub3QgZXhpc3QsIHdlIHJlYWQgYSBuZXcga2V5XG4gICAgICogZnJvbSBzdHJpbmdFbmNvZGVyIGFuZCBwdXNoIGl0IHRvIGtleXMuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7QXJyYXk8c3RyaW5nPn1cbiAgICAgKi9cbiAgICB0aGlzLmtleXMgPSBbXTtcbiAgICBkZWNvZGluZy5yZWFkVmFyVWludChkZWNvZGVyKTsgLy8gcmVhZCBmZWF0dXJlIGZsYWcgLSBjdXJyZW50bHkgdW51c2VkXG4gICAgdGhpcy5rZXlDbG9ja0RlY29kZXIgPSBuZXcgZGVjb2RpbmcuSW50RGlmZk9wdFJsZURlY29kZXIoZGVjb2RpbmcucmVhZFZhclVpbnQ4QXJyYXkoZGVjb2RlcikpO1xuICAgIHRoaXMuY2xpZW50RGVjb2RlciA9IG5ldyBkZWNvZGluZy5VaW50T3B0UmxlRGVjb2RlcihkZWNvZGluZy5yZWFkVmFyVWludDhBcnJheShkZWNvZGVyKSk7XG4gICAgdGhpcy5sZWZ0Q2xvY2tEZWNvZGVyID0gbmV3IGRlY29kaW5nLkludERpZmZPcHRSbGVEZWNvZGVyKGRlY29kaW5nLnJlYWRWYXJVaW50OEFycmF5KGRlY29kZXIpKTtcbiAgICB0aGlzLnJpZ2h0Q2xvY2tEZWNvZGVyID0gbmV3IGRlY29kaW5nLkludERpZmZPcHRSbGVEZWNvZGVyKGRlY29kaW5nLnJlYWRWYXJVaW50OEFycmF5KGRlY29kZXIpKTtcbiAgICB0aGlzLmluZm9EZWNvZGVyID0gbmV3IGRlY29kaW5nLlJsZURlY29kZXIoZGVjb2RpbmcucmVhZFZhclVpbnQ4QXJyYXkoZGVjb2RlciksIGRlY29kaW5nLnJlYWRVaW50OCk7XG4gICAgdGhpcy5zdHJpbmdEZWNvZGVyID0gbmV3IGRlY29kaW5nLlN0cmluZ0RlY29kZXIoZGVjb2RpbmcucmVhZFZhclVpbnQ4QXJyYXkoZGVjb2RlcikpO1xuICAgIHRoaXMucGFyZW50SW5mb0RlY29kZXIgPSBuZXcgZGVjb2RpbmcuUmxlRGVjb2RlcihkZWNvZGluZy5yZWFkVmFyVWludDhBcnJheShkZWNvZGVyKSwgZGVjb2RpbmcucmVhZFVpbnQ4KTtcbiAgICB0aGlzLnR5cGVSZWZEZWNvZGVyID0gbmV3IGRlY29kaW5nLlVpbnRPcHRSbGVEZWNvZGVyKGRlY29kaW5nLnJlYWRWYXJVaW50OEFycmF5KGRlY29kZXIpKTtcbiAgICB0aGlzLmxlbkRlY29kZXIgPSBuZXcgZGVjb2RpbmcuVWludE9wdFJsZURlY29kZXIoZGVjb2RpbmcucmVhZFZhclVpbnQ4QXJyYXkoZGVjb2RlcikpO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge0lEfVxuICAgKi9cbiAgcmVhZExlZnRJRCAoKSB7XG4gICAgcmV0dXJuIG5ldyBJRCh0aGlzLmNsaWVudERlY29kZXIucmVhZCgpLCB0aGlzLmxlZnRDbG9ja0RlY29kZXIucmVhZCgpKVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge0lEfVxuICAgKi9cbiAgcmVhZFJpZ2h0SUQgKCkge1xuICAgIHJldHVybiBuZXcgSUQodGhpcy5jbGllbnREZWNvZGVyLnJlYWQoKSwgdGhpcy5yaWdodENsb2NrRGVjb2Rlci5yZWFkKCkpXG4gIH1cblxuICAvKipcbiAgICogUmVhZCB0aGUgbmV4dCBjbGllbnQgaWQuXG4gICAqIFVzZSB0aGlzIGluIGZhdm9yIG9mIHJlYWRJRCB3aGVuZXZlciBwb3NzaWJsZSB0byByZWR1Y2UgdGhlIG51bWJlciBvZiBvYmplY3RzIGNyZWF0ZWQuXG4gICAqL1xuICByZWFkQ2xpZW50ICgpIHtcbiAgICByZXR1cm4gdGhpcy5jbGllbnREZWNvZGVyLnJlYWQoKVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge251bWJlcn0gaW5mbyBBbiB1bnNpZ25lZCA4LWJpdCBpbnRlZ2VyXG4gICAqL1xuICByZWFkSW5mbyAoKSB7XG4gICAgcmV0dXJuIC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAodGhpcy5pbmZvRGVjb2Rlci5yZWFkKCkpXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgcmVhZFN0cmluZyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RyaW5nRGVjb2Rlci5yZWFkKClcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgcmVhZFBhcmVudEluZm8gKCkge1xuICAgIHJldHVybiB0aGlzLnBhcmVudEluZm9EZWNvZGVyLnJlYWQoKSA9PT0gMVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge251bWJlcn0gQW4gdW5zaWduZWQgOC1iaXQgaW50ZWdlclxuICAgKi9cbiAgcmVhZFR5cGVSZWYgKCkge1xuICAgIHJldHVybiB0aGlzLnR5cGVSZWZEZWNvZGVyLnJlYWQoKVxuICB9XG5cbiAgLyoqXG4gICAqIFdyaXRlIGxlbiBvZiBhIHN0cnVjdCAtIHdlbGwgc3VpdGVkIGZvciBPcHQgUkxFIGVuY29kZXIuXG4gICAqXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIHJlYWRMZW4gKCkge1xuICAgIHJldHVybiB0aGlzLmxlbkRlY29kZXIucmVhZCgpXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7YW55fVxuICAgKi9cbiAgcmVhZEFueSAoKSB7XG4gICAgcmV0dXJuIGRlY29kaW5nLnJlYWRBbnkodGhpcy5yZXN0RGVjb2RlcilcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtVaW50OEFycmF5fVxuICAgKi9cbiAgcmVhZEJ1ZiAoKSB7XG4gICAgcmV0dXJuIGRlY29kaW5nLnJlYWRWYXJVaW50OEFycmF5KHRoaXMucmVzdERlY29kZXIpXG4gIH1cblxuICAvKipcbiAgICogVGhpcyBpcyBtYWlubHkgaGVyZSBmb3IgbGVnYWN5IHB1cnBvc2VzLlxuICAgKlxuICAgKiBJbml0aWFsIHdlIGluY29kZWQgb2JqZWN0cyB1c2luZyBKU09OLiBOb3cgd2UgdXNlIHRoZSBtdWNoIGZhc3RlciBsaWIwL2FueS1lbmNvZGVyLiBUaGlzIG1ldGhvZCBtYWlubHkgZXhpc3RzIGZvciBsZWdhY3kgcHVycG9zZXMgZm9yIHRoZSB2MSBlbmNvZGVyLlxuICAgKlxuICAgKiBAcmV0dXJuIHthbnl9XG4gICAqL1xuICByZWFkSlNPTiAoKSB7XG4gICAgcmV0dXJuIGRlY29kaW5nLnJlYWRBbnkodGhpcy5yZXN0RGVjb2RlcilcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICByZWFkS2V5ICgpIHtcbiAgICBjb25zdCBrZXlDbG9jayA9IHRoaXMua2V5Q2xvY2tEZWNvZGVyLnJlYWQoKTtcbiAgICBpZiAoa2V5Q2xvY2sgPCB0aGlzLmtleXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdGhpcy5rZXlzW2tleUNsb2NrXVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBrZXkgPSB0aGlzLnN0cmluZ0RlY29kZXIucmVhZCgpO1xuICAgICAgdGhpcy5rZXlzLnB1c2goa2V5KTtcbiAgICAgIHJldHVybiBrZXlcbiAgICB9XG4gIH1cbn1cblxuY2xhc3MgRFNFbmNvZGVyVjEge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgdGhpcy5yZXN0RW5jb2RlciA9IGVuY29kaW5nLmNyZWF0ZUVuY29kZXIoKTtcbiAgfVxuXG4gIHRvVWludDhBcnJheSAoKSB7XG4gICAgcmV0dXJuIGVuY29kaW5nLnRvVWludDhBcnJheSh0aGlzLnJlc3RFbmNvZGVyKVxuICB9XG5cbiAgcmVzZXREc0N1clZhbCAoKSB7XG4gICAgLy8gbm9wXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IGNsb2NrXG4gICAqL1xuICB3cml0ZURzQ2xvY2sgKGNsb2NrKSB7XG4gICAgZW5jb2Rpbmcud3JpdGVWYXJVaW50KHRoaXMucmVzdEVuY29kZXIsIGNsb2NrKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gbGVuXG4gICAqL1xuICB3cml0ZURzTGVuIChsZW4pIHtcbiAgICBlbmNvZGluZy53cml0ZVZhclVpbnQodGhpcy5yZXN0RW5jb2RlciwgbGVuKTtcbiAgfVxufVxuXG5jbGFzcyBVcGRhdGVFbmNvZGVyVjEgZXh0ZW5kcyBEU0VuY29kZXJWMSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge0lEfSBpZFxuICAgKi9cbiAgd3JpdGVMZWZ0SUQgKGlkKSB7XG4gICAgZW5jb2Rpbmcud3JpdGVWYXJVaW50KHRoaXMucmVzdEVuY29kZXIsIGlkLmNsaWVudCk7XG4gICAgZW5jb2Rpbmcud3JpdGVWYXJVaW50KHRoaXMucmVzdEVuY29kZXIsIGlkLmNsb2NrKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0lEfSBpZFxuICAgKi9cbiAgd3JpdGVSaWdodElEIChpZCkge1xuICAgIGVuY29kaW5nLndyaXRlVmFyVWludCh0aGlzLnJlc3RFbmNvZGVyLCBpZC5jbGllbnQpO1xuICAgIGVuY29kaW5nLndyaXRlVmFyVWludCh0aGlzLnJlc3RFbmNvZGVyLCBpZC5jbG9jayk7XG4gIH1cblxuICAvKipcbiAgICogVXNlIHdyaXRlQ2xpZW50IGFuZCB3cml0ZUNsb2NrIGluc3RlYWQgb2Ygd3JpdGVJRCBpZiBwb3NzaWJsZS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGNsaWVudFxuICAgKi9cbiAgd3JpdGVDbGllbnQgKGNsaWVudCkge1xuICAgIGVuY29kaW5nLndyaXRlVmFyVWludCh0aGlzLnJlc3RFbmNvZGVyLCBjbGllbnQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpbmZvIEFuIHVuc2lnbmVkIDgtYml0IGludGVnZXJcbiAgICovXG4gIHdyaXRlSW5mbyAoaW5mbykge1xuICAgIGVuY29kaW5nLndyaXRlVWludDgodGhpcy5yZXN0RW5jb2RlciwgaW5mbyk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHNcbiAgICovXG4gIHdyaXRlU3RyaW5nIChzKSB7XG4gICAgZW5jb2Rpbmcud3JpdGVWYXJTdHJpbmcodGhpcy5yZXN0RW5jb2Rlciwgcyk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtib29sZWFufSBpc1lLZXlcbiAgICovXG4gIHdyaXRlUGFyZW50SW5mbyAoaXNZS2V5KSB7XG4gICAgZW5jb2Rpbmcud3JpdGVWYXJVaW50KHRoaXMucmVzdEVuY29kZXIsIGlzWUtleSA/IDEgOiAwKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gaW5mbyBBbiB1bnNpZ25lZCA4LWJpdCBpbnRlZ2VyXG4gICAqL1xuICB3cml0ZVR5cGVSZWYgKGluZm8pIHtcbiAgICBlbmNvZGluZy53cml0ZVZhclVpbnQodGhpcy5yZXN0RW5jb2RlciwgaW5mbyk7XG4gIH1cblxuICAvKipcbiAgICogV3JpdGUgbGVuIG9mIGEgc3RydWN0IC0gd2VsbCBzdWl0ZWQgZm9yIE9wdCBSTEUgZW5jb2Rlci5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IGxlblxuICAgKi9cbiAgd3JpdGVMZW4gKGxlbikge1xuICAgIGVuY29kaW5nLndyaXRlVmFyVWludCh0aGlzLnJlc3RFbmNvZGVyLCBsZW4pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7YW55fSBhbnlcbiAgICovXG4gIHdyaXRlQW55IChhbnkpIHtcbiAgICBlbmNvZGluZy53cml0ZUFueSh0aGlzLnJlc3RFbmNvZGVyLCBhbnkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7VWludDhBcnJheX0gYnVmXG4gICAqL1xuICB3cml0ZUJ1ZiAoYnVmKSB7XG4gICAgZW5jb2Rpbmcud3JpdGVWYXJVaW50OEFycmF5KHRoaXMucmVzdEVuY29kZXIsIGJ1Zik7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHthbnl9IGVtYmVkXG4gICAqL1xuICB3cml0ZUpTT04gKGVtYmVkKSB7XG4gICAgZW5jb2Rpbmcud3JpdGVWYXJTdHJpbmcodGhpcy5yZXN0RW5jb2RlciwgSlNPTi5zdHJpbmdpZnkoZW1iZWQpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gICAqL1xuICB3cml0ZUtleSAoa2V5KSB7XG4gICAgZW5jb2Rpbmcud3JpdGVWYXJTdHJpbmcodGhpcy5yZXN0RW5jb2Rlciwga2V5KTtcbiAgfVxufVxuXG5jbGFzcyBEU0VuY29kZXJWMiB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICB0aGlzLnJlc3RFbmNvZGVyID0gZW5jb2RpbmcuY3JlYXRlRW5jb2RlcigpOyAvLyBlbmNvZGVzIGFsbCB0aGUgcmVzdCAvIG5vbi1vcHRpbWl6ZWRcbiAgICB0aGlzLmRzQ3VyclZhbCA9IDA7XG4gIH1cblxuICB0b1VpbnQ4QXJyYXkgKCkge1xuICAgIHJldHVybiBlbmNvZGluZy50b1VpbnQ4QXJyYXkodGhpcy5yZXN0RW5jb2RlcilcbiAgfVxuXG4gIHJlc2V0RHNDdXJWYWwgKCkge1xuICAgIHRoaXMuZHNDdXJyVmFsID0gMDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gY2xvY2tcbiAgICovXG4gIHdyaXRlRHNDbG9jayAoY2xvY2spIHtcbiAgICBjb25zdCBkaWZmID0gY2xvY2sgLSB0aGlzLmRzQ3VyclZhbDtcbiAgICB0aGlzLmRzQ3VyclZhbCA9IGNsb2NrO1xuICAgIGVuY29kaW5nLndyaXRlVmFyVWludCh0aGlzLnJlc3RFbmNvZGVyLCBkaWZmKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gbGVuXG4gICAqL1xuICB3cml0ZURzTGVuIChsZW4pIHtcbiAgICBpZiAobGVuID09PSAwKSB7XG4gICAgICBlcnJvci51bmV4cGVjdGVkQ2FzZSgpO1xuICAgIH1cbiAgICBlbmNvZGluZy53cml0ZVZhclVpbnQodGhpcy5yZXN0RW5jb2RlciwgbGVuIC0gMSk7XG4gICAgdGhpcy5kc0N1cnJWYWwgKz0gbGVuO1xuICB9XG59XG5cbmNsYXNzIFVwZGF0ZUVuY29kZXJWMiBleHRlbmRzIERTRW5jb2RlclYyIHtcbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHN1cGVyKCk7XG4gICAgLyoqXG4gICAgICogQHR5cGUge01hcDxzdHJpbmcsbnVtYmVyPn1cbiAgICAgKi9cbiAgICB0aGlzLmtleU1hcCA9IG5ldyBNYXAoKTtcbiAgICAvKipcbiAgICAgKiBSZWZlcnMgdG8gdGhlIG5leHQgdW5pcWUga2V5LWlkZW50aWZpZXIgdG8gbWUgdXNlZC5cbiAgICAgKiBTZWUgd3JpdGVLZXkgbWV0aG9kIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICAgICAqXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLmtleUNsb2NrID0gMDtcbiAgICB0aGlzLmtleUNsb2NrRW5jb2RlciA9IG5ldyBlbmNvZGluZy5JbnREaWZmT3B0UmxlRW5jb2RlcigpO1xuICAgIHRoaXMuY2xpZW50RW5jb2RlciA9IG5ldyBlbmNvZGluZy5VaW50T3B0UmxlRW5jb2RlcigpO1xuICAgIHRoaXMubGVmdENsb2NrRW5jb2RlciA9IG5ldyBlbmNvZGluZy5JbnREaWZmT3B0UmxlRW5jb2RlcigpO1xuICAgIHRoaXMucmlnaHRDbG9ja0VuY29kZXIgPSBuZXcgZW5jb2RpbmcuSW50RGlmZk9wdFJsZUVuY29kZXIoKTtcbiAgICB0aGlzLmluZm9FbmNvZGVyID0gbmV3IGVuY29kaW5nLlJsZUVuY29kZXIoZW5jb2Rpbmcud3JpdGVVaW50OCk7XG4gICAgdGhpcy5zdHJpbmdFbmNvZGVyID0gbmV3IGVuY29kaW5nLlN0cmluZ0VuY29kZXIoKTtcbiAgICB0aGlzLnBhcmVudEluZm9FbmNvZGVyID0gbmV3IGVuY29kaW5nLlJsZUVuY29kZXIoZW5jb2Rpbmcud3JpdGVVaW50OCk7XG4gICAgdGhpcy50eXBlUmVmRW5jb2RlciA9IG5ldyBlbmNvZGluZy5VaW50T3B0UmxlRW5jb2RlcigpO1xuICAgIHRoaXMubGVuRW5jb2RlciA9IG5ldyBlbmNvZGluZy5VaW50T3B0UmxlRW5jb2RlcigpO1xuICB9XG5cbiAgdG9VaW50OEFycmF5ICgpIHtcbiAgICBjb25zdCBlbmNvZGVyID0gZW5jb2RpbmcuY3JlYXRlRW5jb2RlcigpO1xuICAgIGVuY29kaW5nLndyaXRlVmFyVWludChlbmNvZGVyLCAwKTsgLy8gdGhpcyBpcyBhIGZlYXR1cmUgZmxhZyB0aGF0IHdlIG1pZ2h0IHVzZSBpbiB0aGUgZnV0dXJlXG4gICAgZW5jb2Rpbmcud3JpdGVWYXJVaW50OEFycmF5KGVuY29kZXIsIHRoaXMua2V5Q2xvY2tFbmNvZGVyLnRvVWludDhBcnJheSgpKTtcbiAgICBlbmNvZGluZy53cml0ZVZhclVpbnQ4QXJyYXkoZW5jb2RlciwgdGhpcy5jbGllbnRFbmNvZGVyLnRvVWludDhBcnJheSgpKTtcbiAgICBlbmNvZGluZy53cml0ZVZhclVpbnQ4QXJyYXkoZW5jb2RlciwgdGhpcy5sZWZ0Q2xvY2tFbmNvZGVyLnRvVWludDhBcnJheSgpKTtcbiAgICBlbmNvZGluZy53cml0ZVZhclVpbnQ4QXJyYXkoZW5jb2RlciwgdGhpcy5yaWdodENsb2NrRW5jb2Rlci50b1VpbnQ4QXJyYXkoKSk7XG4gICAgZW5jb2Rpbmcud3JpdGVWYXJVaW50OEFycmF5KGVuY29kZXIsIGVuY29kaW5nLnRvVWludDhBcnJheSh0aGlzLmluZm9FbmNvZGVyKSk7XG4gICAgZW5jb2Rpbmcud3JpdGVWYXJVaW50OEFycmF5KGVuY29kZXIsIHRoaXMuc3RyaW5nRW5jb2Rlci50b1VpbnQ4QXJyYXkoKSk7XG4gICAgZW5jb2Rpbmcud3JpdGVWYXJVaW50OEFycmF5KGVuY29kZXIsIGVuY29kaW5nLnRvVWludDhBcnJheSh0aGlzLnBhcmVudEluZm9FbmNvZGVyKSk7XG4gICAgZW5jb2Rpbmcud3JpdGVWYXJVaW50OEFycmF5KGVuY29kZXIsIHRoaXMudHlwZVJlZkVuY29kZXIudG9VaW50OEFycmF5KCkpO1xuICAgIGVuY29kaW5nLndyaXRlVmFyVWludDhBcnJheShlbmNvZGVyLCB0aGlzLmxlbkVuY29kZXIudG9VaW50OEFycmF5KCkpO1xuICAgIC8vIEBub3RlIFRoZSByZXN0IGVuY29kZXIgaXMgYXBwZW5kZWQhIChub3RlIHRoZSBtaXNzaW5nIHZhcilcbiAgICBlbmNvZGluZy53cml0ZVVpbnQ4QXJyYXkoZW5jb2RlciwgZW5jb2RpbmcudG9VaW50OEFycmF5KHRoaXMucmVzdEVuY29kZXIpKTtcbiAgICByZXR1cm4gZW5jb2RpbmcudG9VaW50OEFycmF5KGVuY29kZXIpXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtJRH0gaWRcbiAgICovXG4gIHdyaXRlTGVmdElEIChpZCkge1xuICAgIHRoaXMuY2xpZW50RW5jb2Rlci53cml0ZShpZC5jbGllbnQpO1xuICAgIHRoaXMubGVmdENsb2NrRW5jb2Rlci53cml0ZShpZC5jbG9jayk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtJRH0gaWRcbiAgICovXG4gIHdyaXRlUmlnaHRJRCAoaWQpIHtcbiAgICB0aGlzLmNsaWVudEVuY29kZXIud3JpdGUoaWQuY2xpZW50KTtcbiAgICB0aGlzLnJpZ2h0Q2xvY2tFbmNvZGVyLndyaXRlKGlkLmNsb2NrKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gY2xpZW50XG4gICAqL1xuICB3cml0ZUNsaWVudCAoY2xpZW50KSB7XG4gICAgdGhpcy5jbGllbnRFbmNvZGVyLndyaXRlKGNsaWVudCk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IGluZm8gQW4gdW5zaWduZWQgOC1iaXQgaW50ZWdlclxuICAgKi9cbiAgd3JpdGVJbmZvIChpbmZvKSB7XG4gICAgdGhpcy5pbmZvRW5jb2Rlci53cml0ZShpbmZvKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gc1xuICAgKi9cbiAgd3JpdGVTdHJpbmcgKHMpIHtcbiAgICB0aGlzLnN0cmluZ0VuY29kZXIud3JpdGUocyk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtib29sZWFufSBpc1lLZXlcbiAgICovXG4gIHdyaXRlUGFyZW50SW5mbyAoaXNZS2V5KSB7XG4gICAgdGhpcy5wYXJlbnRJbmZvRW5jb2Rlci53cml0ZShpc1lLZXkgPyAxIDogMCk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IGluZm8gQW4gdW5zaWduZWQgOC1iaXQgaW50ZWdlclxuICAgKi9cbiAgd3JpdGVUeXBlUmVmIChpbmZvKSB7XG4gICAgdGhpcy50eXBlUmVmRW5jb2Rlci53cml0ZShpbmZvKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBXcml0ZSBsZW4gb2YgYSBzdHJ1Y3QgLSB3ZWxsIHN1aXRlZCBmb3IgT3B0IFJMRSBlbmNvZGVyLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gbGVuXG4gICAqL1xuICB3cml0ZUxlbiAobGVuKSB7XG4gICAgdGhpcy5sZW5FbmNvZGVyLndyaXRlKGxlbik7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHthbnl9IGFueVxuICAgKi9cbiAgd3JpdGVBbnkgKGFueSkge1xuICAgIGVuY29kaW5nLndyaXRlQW55KHRoaXMucmVzdEVuY29kZXIsIGFueSk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtVaW50OEFycmF5fSBidWZcbiAgICovXG4gIHdyaXRlQnVmIChidWYpIHtcbiAgICBlbmNvZGluZy53cml0ZVZhclVpbnQ4QXJyYXkodGhpcy5yZXN0RW5jb2RlciwgYnVmKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGlzIG1haW5seSBoZXJlIGZvciBsZWdhY3kgcHVycG9zZXMuXG4gICAqXG4gICAqIEluaXRpYWwgd2UgaW5jb2RlZCBvYmplY3RzIHVzaW5nIEpTT04uIE5vdyB3ZSB1c2UgdGhlIG11Y2ggZmFzdGVyIGxpYjAvYW55LWVuY29kZXIuIFRoaXMgbWV0aG9kIG1haW5seSBleGlzdHMgZm9yIGxlZ2FjeSBwdXJwb3NlcyBmb3IgdGhlIHYxIGVuY29kZXIuXG4gICAqXG4gICAqIEBwYXJhbSB7YW55fSBlbWJlZFxuICAgKi9cbiAgd3JpdGVKU09OIChlbWJlZCkge1xuICAgIGVuY29kaW5nLndyaXRlQW55KHRoaXMucmVzdEVuY29kZXIsIGVtYmVkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQcm9wZXJ0eSBrZXlzIGFyZSBvZnRlbiByZXVzZWQuIEZvciBleGFtcGxlLCBpbiB5LXByb3NlbWlycm9yIHRoZSBrZXkgYGJvbGRgIG1pZ2h0XG4gICAqIG9jY3VyIHZlcnkgb2Z0ZW4uIEZvciBhIDNkIGFwcGxpY2F0aW9uLCB0aGUga2V5IGBwb3NpdGlvbmAgbWlnaHQgb2NjdXIgdmVyeSBvZnRlbi5cbiAgICpcbiAgICogV2UgY2FjaGUgdGhlc2Uga2V5cyBpbiBhIE1hcCBhbmQgcmVmZXIgdG8gdGhlbSB2aWEgYSB1bmlxdWUgbnVtYmVyLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gICAqL1xuICB3cml0ZUtleSAoa2V5KSB7XG4gICAgY29uc3QgY2xvY2sgPSB0aGlzLmtleU1hcC5nZXQoa2V5KTtcbiAgICBpZiAoY2xvY2sgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLyoqXG4gICAgICAgKiBAdG9kbyB1bmNvbW1lbnQgdG8gaW50cm9kdWNlIHRoaXMgZmVhdHVyZSBmaW5hbGx5XG4gICAgICAgKlxuICAgICAgICogQmFja2dyb3VuZC4gVGhlIENvbnRlbnRGb3JtYXQgb2JqZWN0IHdhcyBhbHdheXMgZW5jb2RlZCB1c2luZyB3cml0ZUtleSwgYnV0IHRoZSBkZWNvZGVyIHVzZWQgdG8gdXNlIHJlYWRTdHJpbmcuXG4gICAgICAgKiBGdXJ0aGVybW9yZSwgSSBmb3Jnb3QgdG8gc2V0IHRoZSBrZXljbG9jay4gU28gZXZlcnl0aGluZyB3YXMgd29ya2luZyBmaW5lLlxuICAgICAgICpcbiAgICAgICAqIEhvd2V2ZXIsIHRoaXMgZmVhdHVyZSBoZXJlIGlzIGJhc2ljYWxseSB1c2VsZXNzIGFzIGl0IGlzIG5vdCBiZWluZyB1c2VkIChpdCBhY3R1YWxseSBvbmx5IGNvbnN1bWVzIGV4dHJhIG1lbW9yeSkuXG4gICAgICAgKlxuICAgICAgICogSSBkb24ndCBrbm93IHlldCBob3cgdG8gcmVpbnRyb2R1Y2UgdGhpcyBmZWF0dXJlLi5cbiAgICAgICAqXG4gICAgICAgKiBPbGRlciBjbGllbnRzIHdvbid0IGJlIGFibGUgdG8gcmVhZCB1cGRhdGVzIHdoZW4gd2UgcmVpbnRyb2R1Y2UgdGhpcyBmZWF0dXJlLiBTbyB0aGlzIHNob3VsZCBwcm9iYWJseSBiZSBkb25lIHVzaW5nIGEgZmxhZy5cbiAgICAgICAqXG4gICAgICAgKi9cbiAgICAgIC8vIHRoaXMua2V5TWFwLnNldChrZXksIHRoaXMua2V5Q2xvY2spXG4gICAgICB0aGlzLmtleUNsb2NrRW5jb2Rlci53cml0ZSh0aGlzLmtleUNsb2NrKyspO1xuICAgICAgdGhpcy5zdHJpbmdFbmNvZGVyLndyaXRlKGtleSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMua2V5Q2xvY2tFbmNvZGVyLndyaXRlKGNsb2NrKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge1VwZGF0ZUVuY29kZXJWMSB8IFVwZGF0ZUVuY29kZXJWMn0gZW5jb2RlclxuICogQHBhcmFtIHtBcnJheTxHQ3xJdGVtPn0gc3RydWN0cyBBbGwgc3RydWN0cyBieSBgY2xpZW50YFxuICogQHBhcmFtIHtudW1iZXJ9IGNsaWVudFxuICogQHBhcmFtIHtudW1iZXJ9IGNsb2NrIHdyaXRlIHN0cnVjdHMgc3RhcnRpbmcgd2l0aCBgSUQoY2xpZW50LGNsb2NrKWBcbiAqXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3Qgd3JpdGVTdHJ1Y3RzID0gKGVuY29kZXIsIHN0cnVjdHMsIGNsaWVudCwgY2xvY2spID0+IHtcbiAgLy8gd3JpdGUgZmlyc3QgaWRcbiAgY2xvY2sgPSBtYXRoLm1heChjbG9jaywgc3RydWN0c1swXS5pZC5jbG9jayk7IC8vIG1ha2Ugc3VyZSB0aGUgZmlyc3QgaWQgZXhpc3RzXG4gIGNvbnN0IHN0YXJ0TmV3U3RydWN0cyA9IGZpbmRJbmRleFNTKHN0cnVjdHMsIGNsb2NrKTtcbiAgLy8gd3JpdGUgIyBlbmNvZGVkIHN0cnVjdHNcbiAgZW5jb2Rpbmcud3JpdGVWYXJVaW50KGVuY29kZXIucmVzdEVuY29kZXIsIHN0cnVjdHMubGVuZ3RoIC0gc3RhcnROZXdTdHJ1Y3RzKTtcbiAgZW5jb2Rlci53cml0ZUNsaWVudChjbGllbnQpO1xuICBlbmNvZGluZy53cml0ZVZhclVpbnQoZW5jb2Rlci5yZXN0RW5jb2RlciwgY2xvY2spO1xuICBjb25zdCBmaXJzdFN0cnVjdCA9IHN0cnVjdHNbc3RhcnROZXdTdHJ1Y3RzXTtcbiAgLy8gd3JpdGUgZmlyc3Qgc3RydWN0IHdpdGggYW4gb2Zmc2V0XG4gIGZpcnN0U3RydWN0LndyaXRlKGVuY29kZXIsIGNsb2NrIC0gZmlyc3RTdHJ1Y3QuaWQuY2xvY2spO1xuICBmb3IgKGxldCBpID0gc3RhcnROZXdTdHJ1Y3RzICsgMTsgaSA8IHN0cnVjdHMubGVuZ3RoOyBpKyspIHtcbiAgICBzdHJ1Y3RzW2ldLndyaXRlKGVuY29kZXIsIDApO1xuICB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7VXBkYXRlRW5jb2RlclYxIHwgVXBkYXRlRW5jb2RlclYyfSBlbmNvZGVyXG4gKiBAcGFyYW0ge1N0cnVjdFN0b3JlfSBzdG9yZVxuICogQHBhcmFtIHtNYXA8bnVtYmVyLG51bWJlcj59IF9zbVxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3Qgd3JpdGVDbGllbnRzU3RydWN0cyA9IChlbmNvZGVyLCBzdG9yZSwgX3NtKSA9PiB7XG4gIC8vIHdlIGZpbHRlciBhbGwgdmFsaWQgX3NtIGVudHJpZXMgaW50byBzbVxuICBjb25zdCBzbSA9IG5ldyBNYXAoKTtcbiAgX3NtLmZvckVhY2goKGNsb2NrLCBjbGllbnQpID0+IHtcbiAgICAvLyBvbmx5IHdyaXRlIGlmIG5ldyBzdHJ1Y3RzIGFyZSBhdmFpbGFibGVcbiAgICBpZiAoZ2V0U3RhdGUoc3RvcmUsIGNsaWVudCkgPiBjbG9jaykge1xuICAgICAgc20uc2V0KGNsaWVudCwgY2xvY2spO1xuICAgIH1cbiAgfSk7XG4gIGdldFN0YXRlVmVjdG9yKHN0b3JlKS5mb3JFYWNoKChjbG9jaywgY2xpZW50KSA9PiB7XG4gICAgaWYgKCFfc20uaGFzKGNsaWVudCkpIHtcbiAgICAgIHNtLnNldChjbGllbnQsIDApO1xuICAgIH1cbiAgfSk7XG4gIC8vIHdyaXRlICMgc3RhdGVzIHRoYXQgd2VyZSB1cGRhdGVkXG4gIGVuY29kaW5nLndyaXRlVmFyVWludChlbmNvZGVyLnJlc3RFbmNvZGVyLCBzbS5zaXplKTtcbiAgLy8gV3JpdGUgaXRlbXMgd2l0aCBoaWdoZXIgY2xpZW50IGlkcyBmaXJzdFxuICAvLyBUaGlzIGhlYXZpbHkgaW1wcm92ZXMgdGhlIGNvbmZsaWN0IGFsZ29yaXRobS5cbiAgQXJyYXkuZnJvbShzbS5lbnRyaWVzKCkpLnNvcnQoKGEsIGIpID0+IGJbMF0gLSBhWzBdKS5mb3JFYWNoKChbY2xpZW50LCBjbG9ja10pID0+IHtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgd3JpdGVTdHJ1Y3RzKGVuY29kZXIsIHN0b3JlLmNsaWVudHMuZ2V0KGNsaWVudCksIGNsaWVudCwgY2xvY2spO1xuICB9KTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtVcGRhdGVEZWNvZGVyVjEgfCBVcGRhdGVEZWNvZGVyVjJ9IGRlY29kZXIgVGhlIGRlY29kZXIgb2JqZWN0IHRvIHJlYWQgZGF0YSBmcm9tLlxuICogQHBhcmFtIHtEb2N9IGRvY1xuICogQHJldHVybiB7TWFwPG51bWJlciwgeyBpOiBudW1iZXIsIHJlZnM6IEFycmF5PEl0ZW0gfCBHQz4gfT59XG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCByZWFkQ2xpZW50c1N0cnVjdFJlZnMgPSAoZGVjb2RlciwgZG9jKSA9PiB7XG4gIC8qKlxuICAgKiBAdHlwZSB7TWFwPG51bWJlciwgeyBpOiBudW1iZXIsIHJlZnM6IEFycmF5PEl0ZW0gfCBHQz4gfT59XG4gICAqL1xuICBjb25zdCBjbGllbnRSZWZzID0gbWFwLmNyZWF0ZSgpO1xuICBjb25zdCBudW1PZlN0YXRlVXBkYXRlcyA9IGRlY29kaW5nLnJlYWRWYXJVaW50KGRlY29kZXIucmVzdERlY29kZXIpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IG51bU9mU3RhdGVVcGRhdGVzOyBpKyspIHtcbiAgICBjb25zdCBudW1iZXJPZlN0cnVjdHMgPSBkZWNvZGluZy5yZWFkVmFyVWludChkZWNvZGVyLnJlc3REZWNvZGVyKTtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7QXJyYXk8R0N8SXRlbT59XG4gICAgICovXG4gICAgY29uc3QgcmVmcyA9IG5ldyBBcnJheShudW1iZXJPZlN0cnVjdHMpO1xuICAgIGNvbnN0IGNsaWVudCA9IGRlY29kZXIucmVhZENsaWVudCgpO1xuICAgIGxldCBjbG9jayA9IGRlY29kaW5nLnJlYWRWYXJVaW50KGRlY29kZXIucmVzdERlY29kZXIpO1xuICAgIC8vIGNvbnN0IHN0YXJ0ID0gcGVyZm9ybWFuY2Uubm93KClcbiAgICBjbGllbnRSZWZzLnNldChjbGllbnQsIHsgaTogMCwgcmVmcyB9KTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bWJlck9mU3RydWN0czsgaSsrKSB7XG4gICAgICBjb25zdCBpbmZvID0gZGVjb2Rlci5yZWFkSW5mbygpO1xuICAgICAgc3dpdGNoIChiaW5hcnkuQklUUzUgJiBpbmZvKSB7XG4gICAgICAgIGNhc2UgMDogeyAvLyBHQ1xuICAgICAgICAgIGNvbnN0IGxlbiA9IGRlY29kZXIucmVhZExlbigpO1xuICAgICAgICAgIHJlZnNbaV0gPSBuZXcgR0MoY3JlYXRlSUQoY2xpZW50LCBjbG9jayksIGxlbik7XG4gICAgICAgICAgY2xvY2sgKz0gbGVuO1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAxMDogeyAvLyBTa2lwIFN0cnVjdCAobm90aGluZyB0byBhcHBseSlcbiAgICAgICAgICAvLyBAdG9kbyB3ZSBjb3VsZCByZWR1Y2UgdGhlIGFtb3VudCBvZiBjaGVja3MgYnkgYWRkaW5nIFNraXAgc3RydWN0IHRvIGNsaWVudFJlZnMgc28gd2Uga25vdyB0aGF0IHNvbWV0aGluZyBpcyBtaXNzaW5nLlxuICAgICAgICAgIGNvbnN0IGxlbiA9IGRlY29kaW5nLnJlYWRWYXJVaW50KGRlY29kZXIucmVzdERlY29kZXIpO1xuICAgICAgICAgIHJlZnNbaV0gPSBuZXcgU2tpcChjcmVhdGVJRChjbGllbnQsIGNsb2NrKSwgbGVuKTtcbiAgICAgICAgICBjbG9jayArPSBsZW47XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiB7IC8vIEl0ZW0gd2l0aCBjb250ZW50XG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogVGhlIG9wdGltaXplZCBpbXBsZW1lbnRhdGlvbiBkb2Vzbid0IHVzZSBhbnkgdmFyaWFibGVzIGJlY2F1c2UgaW5saW5pbmcgdmFyaWFibGVzIGlzIGZhc3Rlci5cbiAgICAgICAgICAgKiBCZWxvdyBhIG5vbi1vcHRpbWl6ZWQgdmVyc2lvbiBpcyBzaG93biB0aGF0IGltcGxlbWVudHMgdGhlIGJhc2ljIGFsZ29yaXRobSB3aXRoXG4gICAgICAgICAgICogYSBmZXcgY29tbWVudHNcbiAgICAgICAgICAgKi9cbiAgICAgICAgICBjb25zdCBjYW50Q29weVBhcmVudEluZm8gPSAoaW5mbyAmIChiaW5hcnkuQklUNyB8IGJpbmFyeS5CSVQ4KSkgPT09IDA7XG4gICAgICAgICAgLy8gSWYgcGFyZW50ID0gbnVsbCBhbmQgbmVpdGhlciBsZWZ0IG5vciByaWdodCBhcmUgZGVmaW5lZCwgdGhlbiB3ZSBrbm93IHRoYXQgYHBhcmVudGAgaXMgY2hpbGQgb2YgYHlgXG4gICAgICAgICAgLy8gYW5kIHdlIHJlYWQgdGhlIG5leHQgc3RyaW5nIGFzIHBhcmVudFlLZXkuXG4gICAgICAgICAgLy8gSXQgaW5kaWNhdGVzIGhvdyB3ZSBzdG9yZS9yZXRyaWV2ZSBwYXJlbnQgZnJvbSBgeS5zaGFyZWBcbiAgICAgICAgICAvLyBAdHlwZSB7c3RyaW5nfG51bGx9XG4gICAgICAgICAgY29uc3Qgc3RydWN0ID0gbmV3IEl0ZW0oXG4gICAgICAgICAgICBjcmVhdGVJRChjbGllbnQsIGNsb2NrKSxcbiAgICAgICAgICAgIG51bGwsIC8vIGxlZnRkXG4gICAgICAgICAgICAoaW5mbyAmIGJpbmFyeS5CSVQ4KSA9PT0gYmluYXJ5LkJJVDggPyBkZWNvZGVyLnJlYWRMZWZ0SUQoKSA6IG51bGwsIC8vIG9yaWdpblxuICAgICAgICAgICAgbnVsbCwgLy8gcmlnaHRcbiAgICAgICAgICAgIChpbmZvICYgYmluYXJ5LkJJVDcpID09PSBiaW5hcnkuQklUNyA/IGRlY29kZXIucmVhZFJpZ2h0SUQoKSA6IG51bGwsIC8vIHJpZ2h0IG9yaWdpblxuICAgICAgICAgICAgY2FudENvcHlQYXJlbnRJbmZvID8gKGRlY29kZXIucmVhZFBhcmVudEluZm8oKSA/IGRvYy5nZXQoZGVjb2Rlci5yZWFkU3RyaW5nKCkpIDogZGVjb2Rlci5yZWFkTGVmdElEKCkpIDogbnVsbCwgLy8gcGFyZW50XG4gICAgICAgICAgICBjYW50Q29weVBhcmVudEluZm8gJiYgKGluZm8gJiBiaW5hcnkuQklUNikgPT09IGJpbmFyeS5CSVQ2ID8gZGVjb2Rlci5yZWFkU3RyaW5nKCkgOiBudWxsLCAvLyBwYXJlbnRTdWJcbiAgICAgICAgICAgIHJlYWRJdGVtQ29udGVudChkZWNvZGVyLCBpbmZvKSAvLyBpdGVtIGNvbnRlbnRcbiAgICAgICAgICApO1xuICAgICAgICAgIC8qIEEgbm9uLW9wdGltaXplZCBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgYWJvdmUgYWxnb3JpdGhtOlxuXG4gICAgICAgICAgLy8gVGhlIGl0ZW0gdGhhdCB3YXMgb3JpZ2luYWxseSB0byB0aGUgbGVmdCBvZiB0aGlzIGl0ZW0uXG4gICAgICAgICAgY29uc3Qgb3JpZ2luID0gKGluZm8gJiBiaW5hcnkuQklUOCkgPT09IGJpbmFyeS5CSVQ4ID8gZGVjb2Rlci5yZWFkTGVmdElEKCkgOiBudWxsXG4gICAgICAgICAgLy8gVGhlIGl0ZW0gdGhhdCB3YXMgb3JpZ2luYWxseSB0byB0aGUgcmlnaHQgb2YgdGhpcyBpdGVtLlxuICAgICAgICAgIGNvbnN0IHJpZ2h0T3JpZ2luID0gKGluZm8gJiBiaW5hcnkuQklUNykgPT09IGJpbmFyeS5CSVQ3ID8gZGVjb2Rlci5yZWFkUmlnaHRJRCgpIDogbnVsbFxuICAgICAgICAgIGNvbnN0IGNhbnRDb3B5UGFyZW50SW5mbyA9IChpbmZvICYgKGJpbmFyeS5CSVQ3IHwgYmluYXJ5LkJJVDgpKSA9PT0gMFxuICAgICAgICAgIGNvbnN0IGhhc1BhcmVudFlLZXkgPSBjYW50Q29weVBhcmVudEluZm8gPyBkZWNvZGVyLnJlYWRQYXJlbnRJbmZvKCkgOiBmYWxzZVxuICAgICAgICAgIC8vIElmIHBhcmVudCA9IG51bGwgYW5kIG5laXRoZXIgbGVmdCBub3IgcmlnaHQgYXJlIGRlZmluZWQsIHRoZW4gd2Uga25vdyB0aGF0IGBwYXJlbnRgIGlzIGNoaWxkIG9mIGB5YFxuICAgICAgICAgIC8vIGFuZCB3ZSByZWFkIHRoZSBuZXh0IHN0cmluZyBhcyBwYXJlbnRZS2V5LlxuICAgICAgICAgIC8vIEl0IGluZGljYXRlcyBob3cgd2Ugc3RvcmUvcmV0cmlldmUgcGFyZW50IGZyb20gYHkuc2hhcmVgXG4gICAgICAgICAgLy8gQHR5cGUge3N0cmluZ3xudWxsfVxuICAgICAgICAgIGNvbnN0IHBhcmVudFlLZXkgPSBjYW50Q29weVBhcmVudEluZm8gJiYgaGFzUGFyZW50WUtleSA/IGRlY29kZXIucmVhZFN0cmluZygpIDogbnVsbFxuXG4gICAgICAgICAgY29uc3Qgc3RydWN0ID0gbmV3IEl0ZW0oXG4gICAgICAgICAgICBjcmVhdGVJRChjbGllbnQsIGNsb2NrKSxcbiAgICAgICAgICAgIG51bGwsIC8vIGxlZnRkXG4gICAgICAgICAgICBvcmlnaW4sIC8vIG9yaWdpblxuICAgICAgICAgICAgbnVsbCwgLy8gcmlnaHRcbiAgICAgICAgICAgIHJpZ2h0T3JpZ2luLCAvLyByaWdodCBvcmlnaW5cbiAgICAgICAgICAgIGNhbnRDb3B5UGFyZW50SW5mbyAmJiAhaGFzUGFyZW50WUtleSA/IGRlY29kZXIucmVhZExlZnRJRCgpIDogKHBhcmVudFlLZXkgIT09IG51bGwgPyBkb2MuZ2V0KHBhcmVudFlLZXkpIDogbnVsbCksIC8vIHBhcmVudFxuICAgICAgICAgICAgY2FudENvcHlQYXJlbnRJbmZvICYmIChpbmZvICYgYmluYXJ5LkJJVDYpID09PSBiaW5hcnkuQklUNiA/IGRlY29kZXIucmVhZFN0cmluZygpIDogbnVsbCwgLy8gcGFyZW50U3ViXG4gICAgICAgICAgICByZWFkSXRlbUNvbnRlbnQoZGVjb2RlciwgaW5mbykgLy8gaXRlbSBjb250ZW50XG4gICAgICAgICAgKVxuICAgICAgICAgICovXG4gICAgICAgICAgcmVmc1tpXSA9IHN0cnVjdDtcbiAgICAgICAgICBjbG9jayArPSBzdHJ1Y3QubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIC8vIGNvbnNvbGUubG9nKCd0aW1lIHRvIHJlYWQ6ICcsIHBlcmZvcm1hbmNlLm5vdygpIC0gc3RhcnQpIC8vIEB0b2RvIHJlbW92ZVxuICB9XG4gIHJldHVybiBjbGllbnRSZWZzXG59O1xuXG4vKipcbiAqIFJlc3VtZSBjb21wdXRpbmcgc3RydWN0cyBnZW5lcmF0ZWQgYnkgc3RydWN0IHJlYWRlcnMuXG4gKlxuICogV2hpbGUgdGhlcmUgaXMgc29tZXRoaW5nIHRvIGRvLCB3ZSBpbnRlZ3JhdGUgc3RydWN0cyBpbiB0aGlzIG9yZGVyXG4gKiAxLiB0b3AgZWxlbWVudCBvbiBzdGFjaywgaWYgc3RhY2sgaXMgbm90IGVtcHR5XG4gKiAyLiBuZXh0IGVsZW1lbnQgZnJvbSBjdXJyZW50IHN0cnVjdCByZWFkZXIgKGlmIGVtcHR5LCB1c2UgbmV4dCBzdHJ1Y3QgcmVhZGVyKVxuICpcbiAqIElmIHN0cnVjdCBjYXVzYWxseSBkZXBlbmRzIG9uIGFub3RoZXIgc3RydWN0IChyZWYubWlzc2luZyksIHdlIHB1dCBuZXh0IHJlYWRlciBvZlxuICogYHJlZi5pZC5jbGllbnRgIG9uIHRvcCBvZiBzdGFjay5cbiAqXG4gKiBBdCBzb21lIHBvaW50IHdlIGZpbmQgYSBzdHJ1Y3QgdGhhdCBoYXMgbm8gY2F1c2FsIGRlcGVuZGVuY2llcyxcbiAqIHRoZW4gd2Ugc3RhcnQgZW1wdHlpbmcgdGhlIHN0YWNrLlxuICpcbiAqIEl0IGlzIG5vdCBwb3NzaWJsZSB0byBoYXZlIGNpcmNsZXM6IGkuZS4gc3RydWN0MSAoZnJvbSBjbGllbnQxKSBkZXBlbmRzIG9uIHN0cnVjdDIgKGZyb20gY2xpZW50MilcbiAqIGRlcGVuZHMgb24gc3RydWN0MyAoZnJvbSBjbGllbnQxKS4gVGhlcmVmb3JlIHRoZSBtYXggc3RhY2sgc2l6ZSBpcyBlcWF1bCB0byBgc3RydWN0UmVhZGVycy5sZW5ndGhgLlxuICpcbiAqIFRoaXMgbWV0aG9kIGlzIGltcGxlbWVudGVkIGluIGEgd2F5IHNvIHRoYXQgd2UgY2FuIHJlc3VtZSBjb21wdXRhdGlvbiBpZiB0aGlzIHVwZGF0ZVxuICogY2F1c2FsbHkgZGVwZW5kcyBvbiBhbm90aGVyIHVwZGF0ZS5cbiAqXG4gKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICogQHBhcmFtIHtTdHJ1Y3RTdG9yZX0gc3RvcmVcbiAqIEBwYXJhbSB7TWFwPG51bWJlciwgeyBpOiBudW1iZXIsIHJlZnM6IChHQyB8IEl0ZW0pW10gfT59IGNsaWVudHNTdHJ1Y3RSZWZzXG4gKiBAcmV0dXJuIHsgbnVsbCB8IHsgdXBkYXRlOiBVaW50OEFycmF5LCBtaXNzaW5nOiBNYXA8bnVtYmVyLG51bWJlcj4gfSB9XG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCBpbnRlZ3JhdGVTdHJ1Y3RzID0gKHRyYW5zYWN0aW9uLCBzdG9yZSwgY2xpZW50c1N0cnVjdFJlZnMpID0+IHtcbiAgLyoqXG4gICAqIEB0eXBlIHtBcnJheTxJdGVtIHwgR0M+fVxuICAgKi9cbiAgY29uc3Qgc3RhY2sgPSBbXTtcbiAgLy8gc29ydCB0aGVtIHNvIHRoYXQgd2UgdGFrZSB0aGUgaGlnaGVyIGlkIGZpcnN0LCBpbiBjYXNlIG9mIGNvbmZsaWN0cyB0aGUgbG93ZXIgaWQgd2lsbCBwcm9iYWJseSBub3QgY29uZmxpY3Qgd2l0aCB0aGUgaWQgZnJvbSB0aGUgaGlnaGVyIHVzZXIuXG4gIGxldCBjbGllbnRzU3RydWN0UmVmc0lkcyA9IEFycmF5LmZyb20oY2xpZW50c1N0cnVjdFJlZnMua2V5cygpKS5zb3J0KChhLCBiKSA9PiBhIC0gYik7XG4gIGlmIChjbGllbnRzU3RydWN0UmVmc0lkcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG4gIGNvbnN0IGdldE5leHRTdHJ1Y3RUYXJnZXQgPSAoKSA9PiB7XG4gICAgaWYgKGNsaWVudHNTdHJ1Y3RSZWZzSWRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG4gICAgbGV0IG5leHRTdHJ1Y3RzVGFyZ2V0ID0gLyoqIEB0eXBlIHt7aTpudW1iZXIscmVmczpBcnJheTxHQ3xJdGVtPn19ICovIChjbGllbnRzU3RydWN0UmVmcy5nZXQoY2xpZW50c1N0cnVjdFJlZnNJZHNbY2xpZW50c1N0cnVjdFJlZnNJZHMubGVuZ3RoIC0gMV0pKTtcbiAgICB3aGlsZSAobmV4dFN0cnVjdHNUYXJnZXQucmVmcy5sZW5ndGggPT09IG5leHRTdHJ1Y3RzVGFyZ2V0LmkpIHtcbiAgICAgIGNsaWVudHNTdHJ1Y3RSZWZzSWRzLnBvcCgpO1xuICAgICAgaWYgKGNsaWVudHNTdHJ1Y3RSZWZzSWRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgbmV4dFN0cnVjdHNUYXJnZXQgPSAvKiogQHR5cGUge3tpOm51bWJlcixyZWZzOkFycmF5PEdDfEl0ZW0+fX0gKi8gKGNsaWVudHNTdHJ1Y3RSZWZzLmdldChjbGllbnRzU3RydWN0UmVmc0lkc1tjbGllbnRzU3RydWN0UmVmc0lkcy5sZW5ndGggLSAxXSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG51bGxcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5leHRTdHJ1Y3RzVGFyZ2V0XG4gIH07XG4gIGxldCBjdXJTdHJ1Y3RzVGFyZ2V0ID0gZ2V0TmV4dFN0cnVjdFRhcmdldCgpO1xuICBpZiAoY3VyU3RydWN0c1RhcmdldCA9PT0gbnVsbCAmJiBzdGFjay5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtTdHJ1Y3RTdG9yZX1cbiAgICovXG4gIGNvbnN0IHJlc3RTdHJ1Y3RzID0gbmV3IFN0cnVjdFN0b3JlKCk7XG4gIGNvbnN0IG1pc3NpbmdTViA9IG5ldyBNYXAoKTtcbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBjbGllbnRcbiAgICogQHBhcmFtIHtudW1iZXJ9IGNsb2NrXG4gICAqL1xuICBjb25zdCB1cGRhdGVNaXNzaW5nU3YgPSAoY2xpZW50LCBjbG9jaykgPT4ge1xuICAgIGNvbnN0IG1jbG9jayA9IG1pc3NpbmdTVi5nZXQoY2xpZW50KTtcbiAgICBpZiAobWNsb2NrID09IG51bGwgfHwgbWNsb2NrID4gY2xvY2spIHtcbiAgICAgIG1pc3NpbmdTVi5zZXQoY2xpZW50LCBjbG9jayk7XG4gICAgfVxuICB9O1xuICAvKipcbiAgICogQHR5cGUge0dDfEl0ZW19XG4gICAqL1xuICBsZXQgc3RhY2tIZWFkID0gLyoqIEB0eXBlIHthbnl9ICovIChjdXJTdHJ1Y3RzVGFyZ2V0KS5yZWZzWy8qKiBAdHlwZSB7YW55fSAqLyAoY3VyU3RydWN0c1RhcmdldCkuaSsrXTtcbiAgLy8gY2FjaGluZyB0aGUgc3RhdGUgYmVjYXVzZSBpdCBpcyB1c2VkIHZlcnkgb2Z0ZW5cbiAgY29uc3Qgc3RhdGUgPSBuZXcgTWFwKCk7XG5cbiAgY29uc3QgYWRkU3RhY2tUb1Jlc3RTUyA9ICgpID0+IHtcbiAgICBmb3IgKGNvbnN0IGl0ZW0gb2Ygc3RhY2spIHtcbiAgICAgIGNvbnN0IGNsaWVudCA9IGl0ZW0uaWQuY2xpZW50O1xuICAgICAgY29uc3QgdW5hcHBsaWNhYmxlSXRlbXMgPSBjbGllbnRzU3RydWN0UmVmcy5nZXQoY2xpZW50KTtcbiAgICAgIGlmICh1bmFwcGxpY2FibGVJdGVtcykge1xuICAgICAgICAvLyBkZWNyZW1lbnQgYmVjYXVzZSB3ZSB3ZXJlbid0IGFibGUgdG8gYXBwbHkgcHJldmlvdXMgb3BlcmF0aW9uXG4gICAgICAgIHVuYXBwbGljYWJsZUl0ZW1zLmktLTtcbiAgICAgICAgcmVzdFN0cnVjdHMuY2xpZW50cy5zZXQoY2xpZW50LCB1bmFwcGxpY2FibGVJdGVtcy5yZWZzLnNsaWNlKHVuYXBwbGljYWJsZUl0ZW1zLmkpKTtcbiAgICAgICAgY2xpZW50c1N0cnVjdFJlZnMuZGVsZXRlKGNsaWVudCk7XG4gICAgICAgIHVuYXBwbGljYWJsZUl0ZW1zLmkgPSAwO1xuICAgICAgICB1bmFwcGxpY2FibGVJdGVtcy5yZWZzID0gW107XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBpdGVtIHdhcyB0aGUgbGFzdCBpdGVtIG9uIGNsaWVudHNTdHJ1Y3RSZWZzIGFuZCB0aGUgZmllbGQgd2FzIGFscmVhZHkgY2xlYXJlZC4gQWRkIGl0ZW0gdG8gcmVzdFN0cnVjdHMgYW5kIGNvbnRpbnVlXG4gICAgICAgIHJlc3RTdHJ1Y3RzLmNsaWVudHMuc2V0KGNsaWVudCwgW2l0ZW1dKTtcbiAgICAgIH1cbiAgICAgIC8vIHJlbW92ZSBjbGllbnQgZnJvbSBjbGllbnRzU3RydWN0UmVmc0lkcyB0byBwcmV2ZW50IHVzZXJzIGZyb20gYXBwbHlpbmcgdGhlIHNhbWUgdXBkYXRlIGFnYWluXG4gICAgICBjbGllbnRzU3RydWN0UmVmc0lkcyA9IGNsaWVudHNTdHJ1Y3RSZWZzSWRzLmZpbHRlcihjID0+IGMgIT09IGNsaWVudCk7XG4gICAgfVxuICAgIHN0YWNrLmxlbmd0aCA9IDA7XG4gIH07XG5cbiAgLy8gaXRlcmF0ZSBvdmVyIGFsbCBzdHJ1Y3QgcmVhZGVycyB1bnRpbCB3ZSBhcmUgZG9uZVxuICB3aGlsZSAodHJ1ZSkge1xuICAgIGlmIChzdGFja0hlYWQuY29uc3RydWN0b3IgIT09IFNraXApIHtcbiAgICAgIGNvbnN0IGxvY2FsQ2xvY2sgPSBtYXAuc2V0SWZVbmRlZmluZWQoc3RhdGUsIHN0YWNrSGVhZC5pZC5jbGllbnQsICgpID0+IGdldFN0YXRlKHN0b3JlLCBzdGFja0hlYWQuaWQuY2xpZW50KSk7XG4gICAgICBjb25zdCBvZmZzZXQgPSBsb2NhbENsb2NrIC0gc3RhY2tIZWFkLmlkLmNsb2NrO1xuICAgICAgaWYgKG9mZnNldCA8IDApIHtcbiAgICAgICAgLy8gdXBkYXRlIGZyb20gdGhlIHNhbWUgY2xpZW50IGlzIG1pc3NpbmdcbiAgICAgICAgc3RhY2sucHVzaChzdGFja0hlYWQpO1xuICAgICAgICB1cGRhdGVNaXNzaW5nU3Yoc3RhY2tIZWFkLmlkLmNsaWVudCwgc3RhY2tIZWFkLmlkLmNsb2NrIC0gMSk7XG4gICAgICAgIC8vIGhpZCBhIGRlYWQgd2FsbCwgYWRkIGFsbCBpdGVtcyBmcm9tIHN0YWNrIHRvIHJlc3RTU1xuICAgICAgICBhZGRTdGFja1RvUmVzdFNTKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBtaXNzaW5nID0gc3RhY2tIZWFkLmdldE1pc3NpbmcodHJhbnNhY3Rpb24sIHN0b3JlKTtcbiAgICAgICAgaWYgKG1pc3NpbmcgIT09IG51bGwpIHtcbiAgICAgICAgICBzdGFjay5wdXNoKHN0YWNrSGVhZCk7XG4gICAgICAgICAgLy8gZ2V0IHRoZSBzdHJ1Y3QgcmVhZGVyIHRoYXQgaGFzIHRoZSBtaXNzaW5nIHN0cnVjdFxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEB0eXBlIHt7IHJlZnM6IEFycmF5PEdDfEl0ZW0+LCBpOiBudW1iZXIgfX1cbiAgICAgICAgICAgKi9cbiAgICAgICAgICBjb25zdCBzdHJ1Y3RSZWZzID0gY2xpZW50c1N0cnVjdFJlZnMuZ2V0KC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAobWlzc2luZykpIHx8IHsgcmVmczogW10sIGk6IDAgfTtcbiAgICAgICAgICBpZiAoc3RydWN0UmVmcy5yZWZzLmxlbmd0aCA9PT0gc3RydWN0UmVmcy5pKSB7XG4gICAgICAgICAgICAvLyBUaGlzIHVwZGF0ZSBtZXNzYWdlIGNhdXNhbGx5IGRlcGVuZHMgb24gYW5vdGhlciB1cGRhdGUgbWVzc2FnZSB0aGF0IGRvZXNuJ3QgZXhpc3QgeWV0XG4gICAgICAgICAgICB1cGRhdGVNaXNzaW5nU3YoLyoqIEB0eXBlIHtudW1iZXJ9ICovIChtaXNzaW5nKSwgZ2V0U3RhdGUoc3RvcmUsIG1pc3NpbmcpKTtcbiAgICAgICAgICAgIGFkZFN0YWNrVG9SZXN0U1MoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3RhY2tIZWFkID0gc3RydWN0UmVmcy5yZWZzW3N0cnVjdFJlZnMuaSsrXTtcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKG9mZnNldCA9PT0gMCB8fCBvZmZzZXQgPCBzdGFja0hlYWQubGVuZ3RoKSB7XG4gICAgICAgICAgLy8gYWxsIGZpbmUsIGFwcGx5IHRoZSBzdGFja2hlYWRcbiAgICAgICAgICBzdGFja0hlYWQuaW50ZWdyYXRlKHRyYW5zYWN0aW9uLCBvZmZzZXQpO1xuICAgICAgICAgIHN0YXRlLnNldChzdGFja0hlYWQuaWQuY2xpZW50LCBzdGFja0hlYWQuaWQuY2xvY2sgKyBzdGFja0hlYWQubGVuZ3RoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICAvLyBpdGVyYXRlIHRvIG5leHQgc3RhY2tIZWFkXG4gICAgaWYgKHN0YWNrLmxlbmd0aCA+IDApIHtcbiAgICAgIHN0YWNrSGVhZCA9IC8qKiBAdHlwZSB7R0N8SXRlbX0gKi8gKHN0YWNrLnBvcCgpKTtcbiAgICB9IGVsc2UgaWYgKGN1clN0cnVjdHNUYXJnZXQgIT09IG51bGwgJiYgY3VyU3RydWN0c1RhcmdldC5pIDwgY3VyU3RydWN0c1RhcmdldC5yZWZzLmxlbmd0aCkge1xuICAgICAgc3RhY2tIZWFkID0gLyoqIEB0eXBlIHtHQ3xJdGVtfSAqLyAoY3VyU3RydWN0c1RhcmdldC5yZWZzW2N1clN0cnVjdHNUYXJnZXQuaSsrXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGN1clN0cnVjdHNUYXJnZXQgPSBnZXROZXh0U3RydWN0VGFyZ2V0KCk7XG4gICAgICBpZiAoY3VyU3RydWN0c1RhcmdldCA9PT0gbnVsbCkge1xuICAgICAgICAvLyB3ZSBhcmUgZG9uZSFcbiAgICAgICAgYnJlYWtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0YWNrSGVhZCA9IC8qKiBAdHlwZSB7R0N8SXRlbX0gKi8gKGN1clN0cnVjdHNUYXJnZXQucmVmc1tjdXJTdHJ1Y3RzVGFyZ2V0LmkrK10pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAocmVzdFN0cnVjdHMuY2xpZW50cy5zaXplID4gMCkge1xuICAgIGNvbnN0IGVuY29kZXIgPSBuZXcgVXBkYXRlRW5jb2RlclYyKCk7XG4gICAgd3JpdGVDbGllbnRzU3RydWN0cyhlbmNvZGVyLCByZXN0U3RydWN0cywgbmV3IE1hcCgpKTtcbiAgICAvLyB3cml0ZSBlbXB0eSBkZWxldGVzZXRcbiAgICAvLyB3cml0ZURlbGV0ZVNldChlbmNvZGVyLCBuZXcgRGVsZXRlU2V0KCkpXG4gICAgZW5jb2Rpbmcud3JpdGVWYXJVaW50KGVuY29kZXIucmVzdEVuY29kZXIsIDApOyAvLyA9PiBubyBuZWVkIGZvciBhbiBleHRyYSBmdW5jdGlvbiBjYWxsLCBqdXN0IHdyaXRlIDAgZGVsZXRlc1xuICAgIHJldHVybiB7IG1pc3Npbmc6IG1pc3NpbmdTViwgdXBkYXRlOiBlbmNvZGVyLnRvVWludDhBcnJheSgpIH1cbiAgfVxuICByZXR1cm4gbnVsbFxufTtcblxuLyoqXG4gKiBAcGFyYW0ge1VwZGF0ZUVuY29kZXJWMSB8IFVwZGF0ZUVuY29kZXJWMn0gZW5jb2RlclxuICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IHdyaXRlU3RydWN0c0Zyb21UcmFuc2FjdGlvbiA9IChlbmNvZGVyLCB0cmFuc2FjdGlvbikgPT4gd3JpdGVDbGllbnRzU3RydWN0cyhlbmNvZGVyLCB0cmFuc2FjdGlvbi5kb2Muc3RvcmUsIHRyYW5zYWN0aW9uLmJlZm9yZVN0YXRlKTtcblxuLyoqXG4gKiBSZWFkIGFuZCBhcHBseSBhIGRvY3VtZW50IHVwZGF0ZS5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGhhcyB0aGUgc2FtZSBlZmZlY3QgYXMgYGFwcGx5VXBkYXRlYCBidXQgYWNjZXB0cyBhbiBkZWNvZGVyLlxuICpcbiAqIEBwYXJhbSB7ZGVjb2RpbmcuRGVjb2Rlcn0gZGVjb2RlclxuICogQHBhcmFtIHtEb2N9IHlkb2NcbiAqIEBwYXJhbSB7YW55fSBbdHJhbnNhY3Rpb25PcmlnaW5dIFRoaXMgd2lsbCBiZSBzdG9yZWQgb24gYHRyYW5zYWN0aW9uLm9yaWdpbmAgYW5kIGAub24oJ3VwZGF0ZScsICh1cGRhdGUsIG9yaWdpbikpYFxuICogQHBhcmFtIHtVcGRhdGVEZWNvZGVyVjEgfCBVcGRhdGVEZWNvZGVyVjJ9IFtzdHJ1Y3REZWNvZGVyXVxuICpcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCByZWFkVXBkYXRlVjIgPSAoZGVjb2RlciwgeWRvYywgdHJhbnNhY3Rpb25PcmlnaW4sIHN0cnVjdERlY29kZXIgPSBuZXcgVXBkYXRlRGVjb2RlclYyKGRlY29kZXIpKSA9PlxuICB0cmFuc2FjdCh5ZG9jLCB0cmFuc2FjdGlvbiA9PiB7XG4gICAgLy8gZm9yY2UgdGhhdCB0cmFuc2FjdGlvbi5sb2NhbCBpcyBzZXQgdG8gbm9uLWxvY2FsXG4gICAgdHJhbnNhY3Rpb24ubG9jYWwgPSBmYWxzZTtcbiAgICBsZXQgcmV0cnkgPSBmYWxzZTtcbiAgICBjb25zdCBkb2MgPSB0cmFuc2FjdGlvbi5kb2M7XG4gICAgY29uc3Qgc3RvcmUgPSBkb2Muc3RvcmU7XG4gICAgLy8gbGV0IHN0YXJ0ID0gcGVyZm9ybWFuY2Uubm93KClcbiAgICBjb25zdCBzcyA9IHJlYWRDbGllbnRzU3RydWN0UmVmcyhzdHJ1Y3REZWNvZGVyLCBkb2MpO1xuICAgIC8vIGNvbnNvbGUubG9nKCd0aW1lIHRvIHJlYWQgc3RydWN0czogJywgcGVyZm9ybWFuY2Uubm93KCkgLSBzdGFydCkgLy8gQHRvZG8gcmVtb3ZlXG4gICAgLy8gc3RhcnQgPSBwZXJmb3JtYW5jZS5ub3coKVxuICAgIC8vIGNvbnNvbGUubG9nKCd0aW1lIHRvIG1lcmdlOiAnLCBwZXJmb3JtYW5jZS5ub3coKSAtIHN0YXJ0KSAvLyBAdG9kbyByZW1vdmVcbiAgICAvLyBzdGFydCA9IHBlcmZvcm1hbmNlLm5vdygpXG4gICAgY29uc3QgcmVzdFN0cnVjdHMgPSBpbnRlZ3JhdGVTdHJ1Y3RzKHRyYW5zYWN0aW9uLCBzdG9yZSwgc3MpO1xuICAgIGNvbnN0IHBlbmRpbmcgPSBzdG9yZS5wZW5kaW5nU3RydWN0cztcbiAgICBpZiAocGVuZGluZykge1xuICAgICAgLy8gY2hlY2sgaWYgd2UgY2FuIGFwcGx5IHNvbWV0aGluZ1xuICAgICAgZm9yIChjb25zdCBbY2xpZW50LCBjbG9ja10gb2YgcGVuZGluZy5taXNzaW5nKSB7XG4gICAgICAgIGlmIChjbG9jayA8IGdldFN0YXRlKHN0b3JlLCBjbGllbnQpKSB7XG4gICAgICAgICAgcmV0cnkgPSB0cnVlO1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChyZXN0U3RydWN0cykge1xuICAgICAgICAvLyBtZXJnZSByZXN0U3RydWN0cyBpbnRvIHN0b3JlLnBlbmRpbmdcbiAgICAgICAgZm9yIChjb25zdCBbY2xpZW50LCBjbG9ja10gb2YgcmVzdFN0cnVjdHMubWlzc2luZykge1xuICAgICAgICAgIGNvbnN0IG1jbG9jayA9IHBlbmRpbmcubWlzc2luZy5nZXQoY2xpZW50KTtcbiAgICAgICAgICBpZiAobWNsb2NrID09IG51bGwgfHwgbWNsb2NrID4gY2xvY2spIHtcbiAgICAgICAgICAgIHBlbmRpbmcubWlzc2luZy5zZXQoY2xpZW50LCBjbG9jayk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHBlbmRpbmcudXBkYXRlID0gbWVyZ2VVcGRhdGVzVjIoW3BlbmRpbmcudXBkYXRlLCByZXN0U3RydWN0cy51cGRhdGVdKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3RvcmUucGVuZGluZ1N0cnVjdHMgPSByZXN0U3RydWN0cztcbiAgICB9XG4gICAgLy8gY29uc29sZS5sb2coJ3RpbWUgdG8gaW50ZWdyYXRlOiAnLCBwZXJmb3JtYW5jZS5ub3coKSAtIHN0YXJ0KSAvLyBAdG9kbyByZW1vdmVcbiAgICAvLyBzdGFydCA9IHBlcmZvcm1hbmNlLm5vdygpXG4gICAgY29uc3QgZHNSZXN0ID0gcmVhZEFuZEFwcGx5RGVsZXRlU2V0KHN0cnVjdERlY29kZXIsIHRyYW5zYWN0aW9uLCBzdG9yZSk7XG4gICAgaWYgKHN0b3JlLnBlbmRpbmdEcykge1xuICAgICAgLy8gQHRvZG8gd2UgY291bGQgbWFrZSBhIGxvd2VyLWJvdW5kIHN0YXRlLXZlY3RvciBjaGVjayBhcyB3ZSBkbyBhYm92ZVxuICAgICAgY29uc3QgcGVuZGluZ0RTVXBkYXRlID0gbmV3IFVwZGF0ZURlY29kZXJWMihkZWNvZGluZy5jcmVhdGVEZWNvZGVyKHN0b3JlLnBlbmRpbmdEcykpO1xuICAgICAgZGVjb2RpbmcucmVhZFZhclVpbnQocGVuZGluZ0RTVXBkYXRlLnJlc3REZWNvZGVyKTsgLy8gcmVhZCAwIHN0cnVjdHMsIGJlY2F1c2Ugd2Ugb25seSBlbmNvZGUgZGVsZXRlcyBpbiBwZW5kaW5nZHN1cGRhdGVcbiAgICAgIGNvbnN0IGRzUmVzdDIgPSByZWFkQW5kQXBwbHlEZWxldGVTZXQocGVuZGluZ0RTVXBkYXRlLCB0cmFuc2FjdGlvbiwgc3RvcmUpO1xuICAgICAgaWYgKGRzUmVzdCAmJiBkc1Jlc3QyKSB7XG4gICAgICAgIC8vIGNhc2UgMTogZHMxICE9IG51bGwgJiYgZHMyICE9IG51bGxcbiAgICAgICAgc3RvcmUucGVuZGluZ0RzID0gbWVyZ2VVcGRhdGVzVjIoW2RzUmVzdCwgZHNSZXN0Ml0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gY2FzZSAyOiBkczEgIT0gbnVsbFxuICAgICAgICAvLyBjYXNlIDM6IGRzMiAhPSBudWxsXG4gICAgICAgIC8vIGNhc2UgNDogZHMxID09IG51bGwgJiYgZHMyID09IG51bGxcbiAgICAgICAgc3RvcmUucGVuZGluZ0RzID0gZHNSZXN0IHx8IGRzUmVzdDI7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEVpdGhlciBkc1Jlc3QgPT0gbnVsbCAmJiBwZW5kaW5nRHMgPT0gbnVsbCBPUiBkc1Jlc3QgIT0gbnVsbFxuICAgICAgc3RvcmUucGVuZGluZ0RzID0gZHNSZXN0O1xuICAgIH1cbiAgICAvLyBjb25zb2xlLmxvZygndGltZSB0byBjbGVhbnVwOiAnLCBwZXJmb3JtYW5jZS5ub3coKSAtIHN0YXJ0KSAvLyBAdG9kbyByZW1vdmVcbiAgICAvLyBzdGFydCA9IHBlcmZvcm1hbmNlLm5vdygpXG5cbiAgICAvLyBjb25zb2xlLmxvZygndGltZSB0byByZXN1bWUgZGVsZXRlIHJlYWRlcnM6ICcsIHBlcmZvcm1hbmNlLm5vdygpIC0gc3RhcnQpIC8vIEB0b2RvIHJlbW92ZVxuICAgIC8vIHN0YXJ0ID0gcGVyZm9ybWFuY2Uubm93KClcbiAgICBpZiAocmV0cnkpIHtcbiAgICAgIGNvbnN0IHVwZGF0ZSA9IC8qKiBAdHlwZSB7e3VwZGF0ZTogVWludDhBcnJheX19ICovIChzdG9yZS5wZW5kaW5nU3RydWN0cykudXBkYXRlO1xuICAgICAgc3RvcmUucGVuZGluZ1N0cnVjdHMgPSBudWxsO1xuICAgICAgYXBwbHlVcGRhdGVWMih0cmFuc2FjdGlvbi5kb2MsIHVwZGF0ZSk7XG4gICAgfVxuICB9LCB0cmFuc2FjdGlvbk9yaWdpbiwgZmFsc2UpO1xuXG4vKipcbiAqIFJlYWQgYW5kIGFwcGx5IGEgZG9jdW1lbnQgdXBkYXRlLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gaGFzIHRoZSBzYW1lIGVmZmVjdCBhcyBgYXBwbHlVcGRhdGVgIGJ1dCBhY2NlcHRzIGFuIGRlY29kZXIuXG4gKlxuICogQHBhcmFtIHtkZWNvZGluZy5EZWNvZGVyfSBkZWNvZGVyXG4gKiBAcGFyYW0ge0RvY30geWRvY1xuICogQHBhcmFtIHthbnl9IFt0cmFuc2FjdGlvbk9yaWdpbl0gVGhpcyB3aWxsIGJlIHN0b3JlZCBvbiBgdHJhbnNhY3Rpb24ub3JpZ2luYCBhbmQgYC5vbigndXBkYXRlJywgKHVwZGF0ZSwgb3JpZ2luKSlgXG4gKlxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IHJlYWRVcGRhdGUgPSAoZGVjb2RlciwgeWRvYywgdHJhbnNhY3Rpb25PcmlnaW4pID0+IHJlYWRVcGRhdGVWMihkZWNvZGVyLCB5ZG9jLCB0cmFuc2FjdGlvbk9yaWdpbiwgbmV3IFVwZGF0ZURlY29kZXJWMShkZWNvZGVyKSk7XG5cbi8qKlxuICogQXBwbHkgYSBkb2N1bWVudCB1cGRhdGUgY3JlYXRlZCBieSwgZm9yIGV4YW1wbGUsIGB5Lm9uKCd1cGRhdGUnLCB1cGRhdGUgPT4gLi4pYCBvciBgdXBkYXRlID0gZW5jb2RlU3RhdGVBc1VwZGF0ZSgpYC5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGhhcyB0aGUgc2FtZSBlZmZlY3QgYXMgYHJlYWRVcGRhdGVgIGJ1dCBhY2NlcHRzIGFuIFVpbnQ4QXJyYXkgaW5zdGVhZCBvZiBhIERlY29kZXIuXG4gKlxuICogQHBhcmFtIHtEb2N9IHlkb2NcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gdXBkYXRlXG4gKiBAcGFyYW0ge2FueX0gW3RyYW5zYWN0aW9uT3JpZ2luXSBUaGlzIHdpbGwgYmUgc3RvcmVkIG9uIGB0cmFuc2FjdGlvbi5vcmlnaW5gIGFuZCBgLm9uKCd1cGRhdGUnLCAodXBkYXRlLCBvcmlnaW4pKWBcbiAqIEBwYXJhbSB7dHlwZW9mIFVwZGF0ZURlY29kZXJWMSB8IHR5cGVvZiBVcGRhdGVEZWNvZGVyVjJ9IFtZRGVjb2Rlcl1cbiAqXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgYXBwbHlVcGRhdGVWMiA9ICh5ZG9jLCB1cGRhdGUsIHRyYW5zYWN0aW9uT3JpZ2luLCBZRGVjb2RlciA9IFVwZGF0ZURlY29kZXJWMikgPT4ge1xuICBjb25zdCBkZWNvZGVyID0gZGVjb2RpbmcuY3JlYXRlRGVjb2Rlcih1cGRhdGUpO1xuICByZWFkVXBkYXRlVjIoZGVjb2RlciwgeWRvYywgdHJhbnNhY3Rpb25PcmlnaW4sIG5ldyBZRGVjb2RlcihkZWNvZGVyKSk7XG59O1xuXG4vKipcbiAqIEFwcGx5IGEgZG9jdW1lbnQgdXBkYXRlIGNyZWF0ZWQgYnksIGZvciBleGFtcGxlLCBgeS5vbigndXBkYXRlJywgdXBkYXRlID0+IC4uKWAgb3IgYHVwZGF0ZSA9IGVuY29kZVN0YXRlQXNVcGRhdGUoKWAuXG4gKlxuICogVGhpcyBmdW5jdGlvbiBoYXMgdGhlIHNhbWUgZWZmZWN0IGFzIGByZWFkVXBkYXRlYCBidXQgYWNjZXB0cyBhbiBVaW50OEFycmF5IGluc3RlYWQgb2YgYSBEZWNvZGVyLlxuICpcbiAqIEBwYXJhbSB7RG9jfSB5ZG9jXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IHVwZGF0ZVxuICogQHBhcmFtIHthbnl9IFt0cmFuc2FjdGlvbk9yaWdpbl0gVGhpcyB3aWxsIGJlIHN0b3JlZCBvbiBgdHJhbnNhY3Rpb24ub3JpZ2luYCBhbmQgYC5vbigndXBkYXRlJywgKHVwZGF0ZSwgb3JpZ2luKSlgXG4gKlxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IGFwcGx5VXBkYXRlID0gKHlkb2MsIHVwZGF0ZSwgdHJhbnNhY3Rpb25PcmlnaW4pID0+IGFwcGx5VXBkYXRlVjIoeWRvYywgdXBkYXRlLCB0cmFuc2FjdGlvbk9yaWdpbiwgVXBkYXRlRGVjb2RlclYxKTtcblxuLyoqXG4gKiBXcml0ZSBhbGwgdGhlIGRvY3VtZW50IGFzIGEgc2luZ2xlIHVwZGF0ZSBtZXNzYWdlLiBJZiB5b3Ugc3BlY2lmeSB0aGUgc3RhdGUgb2YgdGhlIHJlbW90ZSBjbGllbnQgKGB0YXJnZXRTdGF0ZVZlY3RvcmApIGl0IHdpbGxcbiAqIG9ubHkgd3JpdGUgdGhlIG9wZXJhdGlvbnMgdGhhdCBhcmUgbWlzc2luZy5cbiAqXG4gKiBAcGFyYW0ge1VwZGF0ZUVuY29kZXJWMSB8IFVwZGF0ZUVuY29kZXJWMn0gZW5jb2RlclxuICogQHBhcmFtIHtEb2N9IGRvY1xuICogQHBhcmFtIHtNYXA8bnVtYmVyLG51bWJlcj59IFt0YXJnZXRTdGF0ZVZlY3Rvcl0gVGhlIHN0YXRlIG9mIHRoZSB0YXJnZXQgdGhhdCByZWNlaXZlcyB0aGUgdXBkYXRlLiBMZWF2ZSBlbXB0eSB0byB3cml0ZSBhbGwga25vd24gc3RydWN0c1xuICpcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCB3cml0ZVN0YXRlQXNVcGRhdGUgPSAoZW5jb2RlciwgZG9jLCB0YXJnZXRTdGF0ZVZlY3RvciA9IG5ldyBNYXAoKSkgPT4ge1xuICB3cml0ZUNsaWVudHNTdHJ1Y3RzKGVuY29kZXIsIGRvYy5zdG9yZSwgdGFyZ2V0U3RhdGVWZWN0b3IpO1xuICB3cml0ZURlbGV0ZVNldChlbmNvZGVyLCBjcmVhdGVEZWxldGVTZXRGcm9tU3RydWN0U3RvcmUoZG9jLnN0b3JlKSk7XG59O1xuXG4vKipcbiAqIFdyaXRlIGFsbCB0aGUgZG9jdW1lbnQgYXMgYSBzaW5nbGUgdXBkYXRlIG1lc3NhZ2UgdGhhdCBjYW4gYmUgYXBwbGllZCBvbiB0aGUgcmVtb3RlIGRvY3VtZW50LiBJZiB5b3Ugc3BlY2lmeSB0aGUgc3RhdGUgb2YgdGhlIHJlbW90ZSBjbGllbnQgKGB0YXJnZXRTdGF0ZWApIGl0IHdpbGxcbiAqIG9ubHkgd3JpdGUgdGhlIG9wZXJhdGlvbnMgdGhhdCBhcmUgbWlzc2luZy5cbiAqXG4gKiBVc2UgYHdyaXRlU3RhdGVBc1VwZGF0ZWAgaW5zdGVhZCBpZiB5b3UgYXJlIHdvcmtpbmcgd2l0aCBsaWIwL2VuY29kaW5nLmpzI0VuY29kZXJcbiAqXG4gKiBAcGFyYW0ge0RvY30gZG9jXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IFtlbmNvZGVkVGFyZ2V0U3RhdGVWZWN0b3JdIFRoZSBzdGF0ZSBvZiB0aGUgdGFyZ2V0IHRoYXQgcmVjZWl2ZXMgdGhlIHVwZGF0ZS4gTGVhdmUgZW1wdHkgdG8gd3JpdGUgYWxsIGtub3duIHN0cnVjdHNcbiAqIEBwYXJhbSB7VXBkYXRlRW5jb2RlclYxIHwgVXBkYXRlRW5jb2RlclYyfSBbZW5jb2Rlcl1cbiAqIEByZXR1cm4ge1VpbnQ4QXJyYXl9XG4gKlxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IGVuY29kZVN0YXRlQXNVcGRhdGVWMiA9IChkb2MsIGVuY29kZWRUYXJnZXRTdGF0ZVZlY3RvciA9IG5ldyBVaW50OEFycmF5KFswXSksIGVuY29kZXIgPSBuZXcgVXBkYXRlRW5jb2RlclYyKCkpID0+IHtcbiAgY29uc3QgdGFyZ2V0U3RhdGVWZWN0b3IgPSBkZWNvZGVTdGF0ZVZlY3RvcihlbmNvZGVkVGFyZ2V0U3RhdGVWZWN0b3IpO1xuICB3cml0ZVN0YXRlQXNVcGRhdGUoZW5jb2RlciwgZG9jLCB0YXJnZXRTdGF0ZVZlY3Rvcik7XG4gIGNvbnN0IHVwZGF0ZXMgPSBbZW5jb2Rlci50b1VpbnQ4QXJyYXkoKV07XG4gIC8vIGFsc28gYWRkIHRoZSBwZW5kaW5nIHVwZGF0ZXMgKGlmIHRoZXJlIGFyZSBhbnkpXG4gIGlmIChkb2Muc3RvcmUucGVuZGluZ0RzKSB7XG4gICAgdXBkYXRlcy5wdXNoKGRvYy5zdG9yZS5wZW5kaW5nRHMpO1xuICB9XG4gIGlmIChkb2Muc3RvcmUucGVuZGluZ1N0cnVjdHMpIHtcbiAgICB1cGRhdGVzLnB1c2goZGlmZlVwZGF0ZVYyKGRvYy5zdG9yZS5wZW5kaW5nU3RydWN0cy51cGRhdGUsIGVuY29kZWRUYXJnZXRTdGF0ZVZlY3RvcikpO1xuICB9XG4gIGlmICh1cGRhdGVzLmxlbmd0aCA+IDEpIHtcbiAgICBpZiAoZW5jb2Rlci5jb25zdHJ1Y3RvciA9PT0gVXBkYXRlRW5jb2RlclYxKSB7XG4gICAgICByZXR1cm4gbWVyZ2VVcGRhdGVzKHVwZGF0ZXMubWFwKCh1cGRhdGUsIGkpID0+IGkgPT09IDAgPyB1cGRhdGUgOiBjb252ZXJ0VXBkYXRlRm9ybWF0VjJUb1YxKHVwZGF0ZSkpKVxuICAgIH0gZWxzZSBpZiAoZW5jb2Rlci5jb25zdHJ1Y3RvciA9PT0gVXBkYXRlRW5jb2RlclYyKSB7XG4gICAgICByZXR1cm4gbWVyZ2VVcGRhdGVzVjIodXBkYXRlcylcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHVwZGF0ZXNbMF1cbn07XG5cbi8qKlxuICogV3JpdGUgYWxsIHRoZSBkb2N1bWVudCBhcyBhIHNpbmdsZSB1cGRhdGUgbWVzc2FnZSB0aGF0IGNhbiBiZSBhcHBsaWVkIG9uIHRoZSByZW1vdGUgZG9jdW1lbnQuIElmIHlvdSBzcGVjaWZ5IHRoZSBzdGF0ZSBvZiB0aGUgcmVtb3RlIGNsaWVudCAoYHRhcmdldFN0YXRlYCkgaXQgd2lsbFxuICogb25seSB3cml0ZSB0aGUgb3BlcmF0aW9ucyB0aGF0IGFyZSBtaXNzaW5nLlxuICpcbiAqIFVzZSBgd3JpdGVTdGF0ZUFzVXBkYXRlYCBpbnN0ZWFkIGlmIHlvdSBhcmUgd29ya2luZyB3aXRoIGxpYjAvZW5jb2RpbmcuanMjRW5jb2RlclxuICpcbiAqIEBwYXJhbSB7RG9jfSBkb2NcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gW2VuY29kZWRUYXJnZXRTdGF0ZVZlY3Rvcl0gVGhlIHN0YXRlIG9mIHRoZSB0YXJnZXQgdGhhdCByZWNlaXZlcyB0aGUgdXBkYXRlLiBMZWF2ZSBlbXB0eSB0byB3cml0ZSBhbGwga25vd24gc3RydWN0c1xuICogQHJldHVybiB7VWludDhBcnJheX1cbiAqXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgZW5jb2RlU3RhdGVBc1VwZGF0ZSA9IChkb2MsIGVuY29kZWRUYXJnZXRTdGF0ZVZlY3RvcikgPT4gZW5jb2RlU3RhdGVBc1VwZGF0ZVYyKGRvYywgZW5jb2RlZFRhcmdldFN0YXRlVmVjdG9yLCBuZXcgVXBkYXRlRW5jb2RlclYxKCkpO1xuXG4vKipcbiAqIFJlYWQgc3RhdGUgdmVjdG9yIGZyb20gRGVjb2RlciBhbmQgcmV0dXJuIGFzIE1hcFxuICpcbiAqIEBwYXJhbSB7RFNEZWNvZGVyVjEgfCBEU0RlY29kZXJWMn0gZGVjb2RlclxuICogQHJldHVybiB7TWFwPG51bWJlcixudW1iZXI+fSBNYXBzIGBjbGllbnRgIHRvIHRoZSBudW1iZXIgbmV4dCBleHBlY3RlZCBgY2xvY2tgIGZyb20gdGhhdCBjbGllbnQuXG4gKlxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IHJlYWRTdGF0ZVZlY3RvciA9IGRlY29kZXIgPT4ge1xuICBjb25zdCBzcyA9IG5ldyBNYXAoKTtcbiAgY29uc3Qgc3NMZW5ndGggPSBkZWNvZGluZy5yZWFkVmFyVWludChkZWNvZGVyLnJlc3REZWNvZGVyKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzc0xlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgY2xpZW50ID0gZGVjb2RpbmcucmVhZFZhclVpbnQoZGVjb2Rlci5yZXN0RGVjb2Rlcik7XG4gICAgY29uc3QgY2xvY2sgPSBkZWNvZGluZy5yZWFkVmFyVWludChkZWNvZGVyLnJlc3REZWNvZGVyKTtcbiAgICBzcy5zZXQoY2xpZW50LCBjbG9jayk7XG4gIH1cbiAgcmV0dXJuIHNzXG59O1xuXG4vKipcbiAqIFJlYWQgZGVjb2RlZFN0YXRlIGFuZCByZXR1cm4gU3RhdGUgYXMgTWFwLlxuICpcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gZGVjb2RlZFN0YXRlXG4gKiBAcmV0dXJuIHtNYXA8bnVtYmVyLG51bWJlcj59IE1hcHMgYGNsaWVudGAgdG8gdGhlIG51bWJlciBuZXh0IGV4cGVjdGVkIGBjbG9ja2AgZnJvbSB0aGF0IGNsaWVudC5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqL1xuLy8gZXhwb3J0IGNvbnN0IGRlY29kZVN0YXRlVmVjdG9yVjIgPSBkZWNvZGVkU3RhdGUgPT4gcmVhZFN0YXRlVmVjdG9yKG5ldyBEU0RlY29kZXJWMihkZWNvZGluZy5jcmVhdGVEZWNvZGVyKGRlY29kZWRTdGF0ZSkpKVxuXG4vKipcbiAqIFJlYWQgZGVjb2RlZFN0YXRlIGFuZCByZXR1cm4gU3RhdGUgYXMgTWFwLlxuICpcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gZGVjb2RlZFN0YXRlXG4gKiBAcmV0dXJuIHtNYXA8bnVtYmVyLG51bWJlcj59IE1hcHMgYGNsaWVudGAgdG8gdGhlIG51bWJlciBuZXh0IGV4cGVjdGVkIGBjbG9ja2AgZnJvbSB0aGF0IGNsaWVudC5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgZGVjb2RlU3RhdGVWZWN0b3IgPSBkZWNvZGVkU3RhdGUgPT4gcmVhZFN0YXRlVmVjdG9yKG5ldyBEU0RlY29kZXJWMShkZWNvZGluZy5jcmVhdGVEZWNvZGVyKGRlY29kZWRTdGF0ZSkpKTtcblxuLyoqXG4gKiBAcGFyYW0ge0RTRW5jb2RlclYxIHwgRFNFbmNvZGVyVjJ9IGVuY29kZXJcbiAqIEBwYXJhbSB7TWFwPG51bWJlcixudW1iZXI+fSBzdlxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IHdyaXRlU3RhdGVWZWN0b3IgPSAoZW5jb2Rlciwgc3YpID0+IHtcbiAgZW5jb2Rpbmcud3JpdGVWYXJVaW50KGVuY29kZXIucmVzdEVuY29kZXIsIHN2LnNpemUpO1xuICBBcnJheS5mcm9tKHN2LmVudHJpZXMoKSkuc29ydCgoYSwgYikgPT4gYlswXSAtIGFbMF0pLmZvckVhY2goKFtjbGllbnQsIGNsb2NrXSkgPT4ge1xuICAgIGVuY29kaW5nLndyaXRlVmFyVWludChlbmNvZGVyLnJlc3RFbmNvZGVyLCBjbGllbnQpOyAvLyBAdG9kbyB1c2UgYSBzcGVjaWFsIGNsaWVudCBkZWNvZGVyIHRoYXQgaXMgYmFzZWQgb24gbWFwcGluZ1xuICAgIGVuY29kaW5nLndyaXRlVmFyVWludChlbmNvZGVyLnJlc3RFbmNvZGVyLCBjbG9jayk7XG4gIH0pO1xuICByZXR1cm4gZW5jb2RlclxufTtcblxuLyoqXG4gKiBAcGFyYW0ge0RTRW5jb2RlclYxIHwgRFNFbmNvZGVyVjJ9IGVuY29kZXJcbiAqIEBwYXJhbSB7RG9jfSBkb2NcbiAqXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3Qgd3JpdGVEb2N1bWVudFN0YXRlVmVjdG9yID0gKGVuY29kZXIsIGRvYykgPT4gd3JpdGVTdGF0ZVZlY3RvcihlbmNvZGVyLCBnZXRTdGF0ZVZlY3Rvcihkb2Muc3RvcmUpKTtcblxuLyoqXG4gKiBFbmNvZGUgU3RhdGUgYXMgVWludDhBcnJheS5cbiAqXG4gKiBAcGFyYW0ge0RvY3xNYXA8bnVtYmVyLG51bWJlcj59IGRvY1xuICogQHBhcmFtIHtEU0VuY29kZXJWMSB8IERTRW5jb2RlclYyfSBbZW5jb2Rlcl1cbiAqIEByZXR1cm4ge1VpbnQ4QXJyYXl9XG4gKlxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IGVuY29kZVN0YXRlVmVjdG9yVjIgPSAoZG9jLCBlbmNvZGVyID0gbmV3IERTRW5jb2RlclYyKCkpID0+IHtcbiAgaWYgKGRvYyBpbnN0YW5jZW9mIE1hcCkge1xuICAgIHdyaXRlU3RhdGVWZWN0b3IoZW5jb2RlciwgZG9jKTtcbiAgfSBlbHNlIHtcbiAgICB3cml0ZURvY3VtZW50U3RhdGVWZWN0b3IoZW5jb2RlciwgZG9jKTtcbiAgfVxuICByZXR1cm4gZW5jb2Rlci50b1VpbnQ4QXJyYXkoKVxufTtcblxuLyoqXG4gKiBFbmNvZGUgU3RhdGUgYXMgVWludDhBcnJheS5cbiAqXG4gKiBAcGFyYW0ge0RvY3xNYXA8bnVtYmVyLG51bWJlcj59IGRvY1xuICogQHJldHVybiB7VWludDhBcnJheX1cbiAqXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgZW5jb2RlU3RhdGVWZWN0b3IgPSBkb2MgPT4gZW5jb2RlU3RhdGVWZWN0b3JWMihkb2MsIG5ldyBEU0VuY29kZXJWMSgpKTtcblxuLyoqXG4gKiBHZW5lcmFsIGV2ZW50IGhhbmRsZXIgaW1wbGVtZW50YXRpb24uXG4gKlxuICogQHRlbXBsYXRlIEFSRzAsIEFSRzFcbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5jbGFzcyBFdmVudEhhbmRsZXIge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgLyoqXG4gICAgICogQHR5cGUge0FycmF5PGZ1bmN0aW9uKEFSRzAsIEFSRzEpOnZvaWQ+fVxuICAgICAqL1xuICAgIHRoaXMubCA9IFtdO1xuICB9XG59XG5cbi8qKlxuICogQHRlbXBsYXRlIEFSRzAsQVJHMVxuICogQHJldHVybnMge0V2ZW50SGFuZGxlcjxBUkcwLEFSRzE+fVxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgY3JlYXRlRXZlbnRIYW5kbGVyID0gKCkgPT4gbmV3IEV2ZW50SGFuZGxlcigpO1xuXG4vKipcbiAqIEFkZHMgYW4gZXZlbnQgbGlzdGVuZXIgdGhhdCBpcyBjYWxsZWQgd2hlblxuICoge0BsaW5rIEV2ZW50SGFuZGxlciNjYWxsRXZlbnRMaXN0ZW5lcnN9IGlzIGNhbGxlZC5cbiAqXG4gKiBAdGVtcGxhdGUgQVJHMCxBUkcxXG4gKiBAcGFyYW0ge0V2ZW50SGFuZGxlcjxBUkcwLEFSRzE+fSBldmVudEhhbmRsZXJcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oQVJHMCxBUkcxKTp2b2lkfSBmIFRoZSBldmVudCBoYW5kbGVyLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgYWRkRXZlbnRIYW5kbGVyTGlzdGVuZXIgPSAoZXZlbnRIYW5kbGVyLCBmKSA9PlxuICBldmVudEhhbmRsZXIubC5wdXNoKGYpO1xuXG4vKipcbiAqIFJlbW92ZXMgYW4gZXZlbnQgbGlzdGVuZXIuXG4gKlxuICogQHRlbXBsYXRlIEFSRzAsQVJHMVxuICogQHBhcmFtIHtFdmVudEhhbmRsZXI8QVJHMCxBUkcxPn0gZXZlbnRIYW5kbGVyXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKEFSRzAsQVJHMSk6dm9pZH0gZiBUaGUgZXZlbnQgaGFuZGxlciB0aGF0IHdhcyBhZGRlZCB3aXRoXG4gKiAgICAgICAgICAgICAgICAgICAgIHtAbGluayBFdmVudEhhbmRsZXIjYWRkRXZlbnRMaXN0ZW5lcn1cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IHJlbW92ZUV2ZW50SGFuZGxlckxpc3RlbmVyID0gKGV2ZW50SGFuZGxlciwgZikgPT4ge1xuICBjb25zdCBsID0gZXZlbnRIYW5kbGVyLmw7XG4gIGNvbnN0IGxlbiA9IGwubGVuZ3RoO1xuICBldmVudEhhbmRsZXIubCA9IGwuZmlsdGVyKGcgPT4gZiAhPT0gZyk7XG4gIGlmIChsZW4gPT09IGV2ZW50SGFuZGxlci5sLmxlbmd0aCkge1xuICAgIGNvbnNvbGUuZXJyb3IoJ1t5anNdIFRyaWVkIHRvIHJlbW92ZSBldmVudCBoYW5kbGVyIHRoYXQgZG9lc25cXCd0IGV4aXN0LicpO1xuICB9XG59O1xuXG4vKipcbiAqIENhbGwgYWxsIGV2ZW50IGxpc3RlbmVycyB0aGF0IHdlcmUgYWRkZWQgdmlhXG4gKiB7QGxpbmsgRXZlbnRIYW5kbGVyI2FkZEV2ZW50TGlzdGVuZXJ9LlxuICpcbiAqIEB0ZW1wbGF0ZSBBUkcwLEFSRzFcbiAqIEBwYXJhbSB7RXZlbnRIYW5kbGVyPEFSRzAsQVJHMT59IGV2ZW50SGFuZGxlclxuICogQHBhcmFtIHtBUkcwfSBhcmcwXG4gKiBAcGFyYW0ge0FSRzF9IGFyZzFcbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IGNhbGxFdmVudEhhbmRsZXJMaXN0ZW5lcnMgPSAoZXZlbnRIYW5kbGVyLCBhcmcwLCBhcmcxKSA9PlxuICBmLmNhbGxBbGwoZXZlbnRIYW5kbGVyLmwsIFthcmcwLCBhcmcxXSk7XG5cbmNsYXNzIElEIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBjbGllbnQgY2xpZW50IGlkXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBjbG9jayB1bmlxdWUgcGVyIGNsaWVudCBpZCwgY29udGludW91cyBudW1iZXJcbiAgICovXG4gIGNvbnN0cnVjdG9yIChjbGllbnQsIGNsb2NrKSB7XG4gICAgLyoqXG4gICAgICogQ2xpZW50IGlkXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLmNsaWVudCA9IGNsaWVudDtcbiAgICAvKipcbiAgICAgKiB1bmlxdWUgcGVyIGNsaWVudCBpZCwgY29udGludW91cyBudW1iZXJcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMuY2xvY2sgPSBjbG9jaztcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7SUQgfCBudWxsfSBhXG4gKiBAcGFyYW0ge0lEIHwgbnVsbH0gYlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgY29tcGFyZUlEcyA9IChhLCBiKSA9PiBhID09PSBiIHx8IChhICE9PSBudWxsICYmIGIgIT09IG51bGwgJiYgYS5jbGllbnQgPT09IGIuY2xpZW50ICYmIGEuY2xvY2sgPT09IGIuY2xvY2spO1xuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSBjbGllbnRcbiAqIEBwYXJhbSB7bnVtYmVyfSBjbG9ja1xuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgY3JlYXRlSUQgPSAoY2xpZW50LCBjbG9jaykgPT4gbmV3IElEKGNsaWVudCwgY2xvY2spO1xuXG4vKipcbiAqIEBwYXJhbSB7ZW5jb2RpbmcuRW5jb2Rlcn0gZW5jb2RlclxuICogQHBhcmFtIHtJRH0gaWRcbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IHdyaXRlSUQgPSAoZW5jb2RlciwgaWQpID0+IHtcbiAgZW5jb2Rpbmcud3JpdGVWYXJVaW50KGVuY29kZXIsIGlkLmNsaWVudCk7XG4gIGVuY29kaW5nLndyaXRlVmFyVWludChlbmNvZGVyLCBpZC5jbG9jayk7XG59O1xuXG4vKipcbiAqIFJlYWQgSUQuXG4gKiAqIElmIGZpcnN0IHZhclVpbnQgcmVhZCBpcyAweEZGRkZGRiBhIFJvb3RJRCBpcyByZXR1cm5lZC5cbiAqICogT3RoZXJ3aXNlIGFuIElEIGlzIHJldHVybmVkXG4gKlxuICogQHBhcmFtIHtkZWNvZGluZy5EZWNvZGVyfSBkZWNvZGVyXG4gKiBAcmV0dXJuIHtJRH1cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IHJlYWRJRCA9IGRlY29kZXIgPT5cbiAgY3JlYXRlSUQoZGVjb2RpbmcucmVhZFZhclVpbnQoZGVjb2RlciksIGRlY29kaW5nLnJlYWRWYXJVaW50KGRlY29kZXIpKTtcblxuLyoqXG4gKiBUaGUgdG9wIHR5cGVzIGFyZSBtYXBwZWQgZnJvbSB5LnNoYXJlLmdldChrZXluYW1lKSA9PiB0eXBlLlxuICogYHR5cGVgIGRvZXMgbm90IHN0b3JlIGFueSBpbmZvcm1hdGlvbiBhYm91dCB0aGUgYGtleW5hbWVgLlxuICogVGhpcyBmdW5jdGlvbiBmaW5kcyB0aGUgY29ycmVjdCBga2V5bmFtZWAgZm9yIGB0eXBlYCBhbmQgdGhyb3dzIG90aGVyd2lzZS5cbiAqXG4gKiBAcGFyYW0ge0Fic3RyYWN0VHlwZTxhbnk+fSB0eXBlXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCBmaW5kUm9vdFR5cGVLZXkgPSB0eXBlID0+IHtcbiAgLy8gQHRzLWlnbm9yZSBfeSBtdXN0IGJlIGRlZmluZWQsIG90aGVyd2lzZSB1bmV4cGVjdGVkIGNhc2VcbiAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgdHlwZS5kb2Muc2hhcmUuZW50cmllcygpKSB7XG4gICAgaWYgKHZhbHVlID09PSB0eXBlKSB7XG4gICAgICByZXR1cm4ga2V5XG4gICAgfVxuICB9XG4gIHRocm93IGVycm9yLnVuZXhwZWN0ZWRDYXNlKClcbn07XG5cbi8qKlxuICogQ2hlY2sgaWYgYHBhcmVudGAgaXMgYSBwYXJlbnQgb2YgYGNoaWxkYC5cbiAqXG4gKiBAcGFyYW0ge0Fic3RyYWN0VHlwZTxhbnk+fSBwYXJlbnRcbiAqIEBwYXJhbSB7SXRlbXxudWxsfSBjaGlsZFxuICogQHJldHVybiB7Qm9vbGVhbn0gV2hldGhlciBgcGFyZW50YCBpcyBhIHBhcmVudCBvZiBgY2hpbGRgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgaXNQYXJlbnRPZiA9IChwYXJlbnQsIGNoaWxkKSA9PiB7XG4gIHdoaWxlIChjaGlsZCAhPT0gbnVsbCkge1xuICAgIGlmIChjaGlsZC5wYXJlbnQgPT09IHBhcmVudCkge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgY2hpbGQgPSAvKiogQHR5cGUge0Fic3RyYWN0VHlwZTxhbnk+fSAqLyAoY2hpbGQucGFyZW50KS5faXRlbTtcbiAgfVxuICByZXR1cm4gZmFsc2Vcbn07XG5cbi8qKlxuICogQ29udmVuaWVudCBoZWxwZXIgdG8gbG9nIHR5cGUgaW5mb3JtYXRpb24uXG4gKlxuICogRG8gbm90IHVzZSBpbiBwcm9kdWN0aXZlIHN5c3RlbXMgYXMgdGhlIG91dHB1dCBjYW4gYmUgaW1tZW5zZSFcbiAqXG4gKiBAcGFyYW0ge0Fic3RyYWN0VHlwZTxhbnk+fSB0eXBlXG4gKi9cbmNvbnN0IGxvZ1R5cGUgPSB0eXBlID0+IHtcbiAgY29uc3QgcmVzID0gW107XG4gIGxldCBuID0gdHlwZS5fc3RhcnQ7XG4gIHdoaWxlIChuKSB7XG4gICAgcmVzLnB1c2gobik7XG4gICAgbiA9IG4ucmlnaHQ7XG4gIH1cbiAgY29uc29sZS5sb2coJ0NoaWxkcmVuOiAnLCByZXMpO1xuICBjb25zb2xlLmxvZygnQ2hpbGRyZW4gY29udGVudDogJywgcmVzLmZpbHRlcihtID0+ICFtLmRlbGV0ZWQpLm1hcChtID0+IG0uY29udGVudCkpO1xufTtcblxuY2xhc3MgUGVybWFuZW50VXNlckRhdGEge1xuICAvKipcbiAgICogQHBhcmFtIHtEb2N9IGRvY1xuICAgKiBAcGFyYW0ge1lNYXA8YW55Pn0gW3N0b3JlVHlwZV1cbiAgICovXG4gIGNvbnN0cnVjdG9yIChkb2MsIHN0b3JlVHlwZSA9IGRvYy5nZXRNYXAoJ3VzZXJzJykpIHtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7TWFwPHN0cmluZyxEZWxldGVTZXQ+fVxuICAgICAqL1xuICAgIGNvbnN0IGRzcyA9IG5ldyBNYXAoKTtcbiAgICB0aGlzLnl1c2VycyA9IHN0b3JlVHlwZTtcbiAgICB0aGlzLmRvYyA9IGRvYztcbiAgICAvKipcbiAgICAgKiBNYXBzIGZyb20gY2xpZW50aWQgdG8gdXNlckRlc2NyaXB0aW9uXG4gICAgICpcbiAgICAgKiBAdHlwZSB7TWFwPG51bWJlcixzdHJpbmc+fVxuICAgICAqL1xuICAgIHRoaXMuY2xpZW50cyA9IG5ldyBNYXAoKTtcbiAgICB0aGlzLmRzcyA9IGRzcztcbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1lNYXA8YW55Pn0gdXNlclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1c2VyRGVzY3JpcHRpb25cbiAgICAgKi9cbiAgICBjb25zdCBpbml0VXNlciA9ICh1c2VyLCB1c2VyRGVzY3JpcHRpb24pID0+IHtcbiAgICAgIC8qKlxuICAgICAgICogQHR5cGUge1lBcnJheTxVaW50OEFycmF5Pn1cbiAgICAgICAqL1xuICAgICAgY29uc3QgZHMgPSB1c2VyLmdldCgnZHMnKTtcbiAgICAgIGNvbnN0IGlkcyA9IHVzZXIuZ2V0KCdpZHMnKTtcbiAgICAgIGNvbnN0IGFkZENsaWVudElkID0gLyoqIEBwYXJhbSB7bnVtYmVyfSBjbGllbnRpZCAqLyBjbGllbnRpZCA9PiB0aGlzLmNsaWVudHMuc2V0KGNsaWVudGlkLCB1c2VyRGVzY3JpcHRpb24pO1xuICAgICAgZHMub2JzZXJ2ZSgvKiogQHBhcmFtIHtZQXJyYXlFdmVudDxhbnk+fSBldmVudCAqLyBldmVudCA9PiB7XG4gICAgICAgIGV2ZW50LmNoYW5nZXMuYWRkZWQuZm9yRWFjaChpdGVtID0+IHtcbiAgICAgICAgICBpdGVtLmNvbnRlbnQuZ2V0Q29udGVudCgpLmZvckVhY2goZW5jb2RlZERzID0+IHtcbiAgICAgICAgICAgIGlmIChlbmNvZGVkRHMgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XG4gICAgICAgICAgICAgIHRoaXMuZHNzLnNldCh1c2VyRGVzY3JpcHRpb24sIG1lcmdlRGVsZXRlU2V0cyhbdGhpcy5kc3MuZ2V0KHVzZXJEZXNjcmlwdGlvbikgfHwgY3JlYXRlRGVsZXRlU2V0KCksIHJlYWREZWxldGVTZXQobmV3IERTRGVjb2RlclYxKGRlY29kaW5nLmNyZWF0ZURlY29kZXIoZW5jb2RlZERzKSkpXSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5kc3Muc2V0KHVzZXJEZXNjcmlwdGlvbiwgbWVyZ2VEZWxldGVTZXRzKGRzLm1hcChlbmNvZGVkRHMgPT4gcmVhZERlbGV0ZVNldChuZXcgRFNEZWNvZGVyVjEoZGVjb2RpbmcuY3JlYXRlRGVjb2RlcihlbmNvZGVkRHMpKSkpKSk7XG4gICAgICBpZHMub2JzZXJ2ZSgvKiogQHBhcmFtIHtZQXJyYXlFdmVudDxhbnk+fSBldmVudCAqLyBldmVudCA9PlxuICAgICAgICBldmVudC5jaGFuZ2VzLmFkZGVkLmZvckVhY2goaXRlbSA9PiBpdGVtLmNvbnRlbnQuZ2V0Q29udGVudCgpLmZvckVhY2goYWRkQ2xpZW50SWQpKVxuICAgICAgKTtcbiAgICAgIGlkcy5mb3JFYWNoKGFkZENsaWVudElkKTtcbiAgICB9O1xuICAgIC8vIG9ic2VydmUgdXNlcnNcbiAgICBzdG9yZVR5cGUub2JzZXJ2ZShldmVudCA9PiB7XG4gICAgICBldmVudC5rZXlzQ2hhbmdlZC5mb3JFYWNoKHVzZXJEZXNjcmlwdGlvbiA9PlxuICAgICAgICBpbml0VXNlcihzdG9yZVR5cGUuZ2V0KHVzZXJEZXNjcmlwdGlvbiksIHVzZXJEZXNjcmlwdGlvbilcbiAgICAgICk7XG4gICAgfSk7XG4gICAgLy8gYWRkIGludGlhbCBkYXRhXG4gICAgc3RvcmVUeXBlLmZvckVhY2goaW5pdFVzZXIpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7RG9jfSBkb2NcbiAgICogQHBhcmFtIHtudW1iZXJ9IGNsaWVudGlkXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1c2VyRGVzY3JpcHRpb25cbiAgICogQHBhcmFtIHtPYmplY3R9IFtjb25mXVxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKFRyYW5zYWN0aW9uLCBEZWxldGVTZXQpOmJvb2xlYW59IFtjb25mLmZpbHRlcl1cbiAgICovXG4gIHNldFVzZXJNYXBwaW5nIChkb2MsIGNsaWVudGlkLCB1c2VyRGVzY3JpcHRpb24sIHsgZmlsdGVyID0gKCkgPT4gdHJ1ZSB9ID0ge30pIHtcbiAgICBjb25zdCB1c2VycyA9IHRoaXMueXVzZXJzO1xuICAgIGxldCB1c2VyID0gdXNlcnMuZ2V0KHVzZXJEZXNjcmlwdGlvbik7XG4gICAgaWYgKCF1c2VyKSB7XG4gICAgICB1c2VyID0gbmV3IFlNYXAoKTtcbiAgICAgIHVzZXIuc2V0KCdpZHMnLCBuZXcgWUFycmF5KCkpO1xuICAgICAgdXNlci5zZXQoJ2RzJywgbmV3IFlBcnJheSgpKTtcbiAgICAgIHVzZXJzLnNldCh1c2VyRGVzY3JpcHRpb24sIHVzZXIpO1xuICAgIH1cbiAgICB1c2VyLmdldCgnaWRzJykucHVzaChbY2xpZW50aWRdKTtcbiAgICB1c2Vycy5vYnNlcnZlKGV2ZW50ID0+IHtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBjb25zdCB1c2VyT3ZlcndyaXRlID0gdXNlcnMuZ2V0KHVzZXJEZXNjcmlwdGlvbik7XG4gICAgICAgIGlmICh1c2VyT3ZlcndyaXRlICE9PSB1c2VyKSB7XG4gICAgICAgICAgLy8gdXNlciB3YXMgb3ZlcndyaXR0ZW4sIHBvcnQgYWxsIGRhdGEgb3ZlciB0byB0aGUgbmV4dCB1c2VyIG9iamVjdFxuICAgICAgICAgIC8vIEB0b2RvIEV4cGVyaW1lbnQgd2l0aCBZLlNldHMgaGVyZVxuICAgICAgICAgIHVzZXIgPSB1c2VyT3ZlcndyaXRlO1xuICAgICAgICAgIC8vIEB0b2RvIGl0ZXJhdGUgb3ZlciBvbGQgdHlwZVxuICAgICAgICAgIHRoaXMuY2xpZW50cy5mb3JFYWNoKChfdXNlckRlc2NyaXB0aW9uLCBjbGllbnRpZCkgPT4ge1xuICAgICAgICAgICAgaWYgKHVzZXJEZXNjcmlwdGlvbiA9PT0gX3VzZXJEZXNjcmlwdGlvbikge1xuICAgICAgICAgICAgICB1c2VyLmdldCgnaWRzJykucHVzaChbY2xpZW50aWRdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICBjb25zdCBlbmNvZGVyID0gbmV3IERTRW5jb2RlclYxKCk7XG4gICAgICAgICAgY29uc3QgZHMgPSB0aGlzLmRzcy5nZXQodXNlckRlc2NyaXB0aW9uKTtcbiAgICAgICAgICBpZiAoZHMpIHtcbiAgICAgICAgICAgIHdyaXRlRGVsZXRlU2V0KGVuY29kZXIsIGRzKTtcbiAgICAgICAgICAgIHVzZXIuZ2V0KCdkcycpLnB1c2goW2VuY29kZXIudG9VaW50OEFycmF5KCldKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sIDApO1xuICAgIH0pO1xuICAgIGRvYy5vbignYWZ0ZXJUcmFuc2FjdGlvbicsIC8qKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvbiAqLyB0cmFuc2FjdGlvbiA9PiB7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgY29uc3QgeWRzID0gdXNlci5nZXQoJ2RzJyk7XG4gICAgICAgIGNvbnN0IGRzID0gdHJhbnNhY3Rpb24uZGVsZXRlU2V0O1xuICAgICAgICBpZiAodHJhbnNhY3Rpb24ubG9jYWwgJiYgZHMuY2xpZW50cy5zaXplID4gMCAmJiBmaWx0ZXIodHJhbnNhY3Rpb24sIGRzKSkge1xuICAgICAgICAgIGNvbnN0IGVuY29kZXIgPSBuZXcgRFNFbmNvZGVyVjEoKTtcbiAgICAgICAgICB3cml0ZURlbGV0ZVNldChlbmNvZGVyLCBkcyk7XG4gICAgICAgICAgeWRzLnB1c2goW2VuY29kZXIudG9VaW50OEFycmF5KCldKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IGNsaWVudGlkXG4gICAqIEByZXR1cm4ge2FueX1cbiAgICovXG4gIGdldFVzZXJCeUNsaWVudElkIChjbGllbnRpZCkge1xuICAgIHJldHVybiB0aGlzLmNsaWVudHMuZ2V0KGNsaWVudGlkKSB8fCBudWxsXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtJRH0gaWRcbiAgICogQHJldHVybiB7c3RyaW5nIHwgbnVsbH1cbiAgICovXG4gIGdldFVzZXJCeURlbGV0ZWRJZCAoaWQpIHtcbiAgICBmb3IgKGNvbnN0IFt1c2VyRGVzY3JpcHRpb24sIGRzXSBvZiB0aGlzLmRzcy5lbnRyaWVzKCkpIHtcbiAgICAgIGlmIChpc0RlbGV0ZWQoZHMsIGlkKSkge1xuICAgICAgICByZXR1cm4gdXNlckRlc2NyaXB0aW9uXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsXG4gIH1cbn1cblxuLyoqXG4gKiBBIHJlbGF0aXZlIHBvc2l0aW9uIGlzIGJhc2VkIG9uIHRoZSBZanMgbW9kZWwgYW5kIGlzIG5vdCBhZmZlY3RlZCBieSBkb2N1bWVudCBjaGFuZ2VzLlxuICogRS5nLiBJZiB5b3UgcGxhY2UgYSByZWxhdGl2ZSBwb3NpdGlvbiBiZWZvcmUgYSBjZXJ0YWluIGNoYXJhY3RlciwgaXQgd2lsbCBhbHdheXMgcG9pbnQgdG8gdGhpcyBjaGFyYWN0ZXIuXG4gKiBJZiB5b3UgcGxhY2UgYSByZWxhdGl2ZSBwb3NpdGlvbiBhdCB0aGUgZW5kIG9mIGEgdHlwZSwgaXQgd2lsbCBhbHdheXMgcG9pbnQgdG8gdGhlIGVuZCBvZiB0aGUgdHlwZS5cbiAqXG4gKiBBIG51bWVyaWMgcG9zaXRpb24gaXMgb2Z0ZW4gdW5zdWl0ZWQgZm9yIHVzZXIgc2VsZWN0aW9ucywgYmVjYXVzZSBpdCBkb2VzIG5vdCBjaGFuZ2Ugd2hlbiBjb250ZW50IGlzIGluc2VydGVkXG4gKiBiZWZvcmUgb3IgYWZ0ZXIuXG4gKlxuICogYGBgSW5zZXJ0KDAsICd4JykoJ2F8YmMnKSA9ICd4YXxiYydgYGAgV2hlcmUgfCBpcyB0aGUgcmVsYXRpdmUgcG9zaXRpb24uXG4gKlxuICogT25lIG9mIHRoZSBwcm9wZXJ0aWVzIG11c3QgYmUgZGVmaW5lZC5cbiAqXG4gKiBAZXhhbXBsZVxuICogICAvLyBDdXJyZW50IGN1cnNvciBwb3NpdGlvbiBpcyBhdCBwb3NpdGlvbiAxMFxuICogICBjb25zdCByZWxhdGl2ZVBvc2l0aW9uID0gY3JlYXRlUmVsYXRpdmVQb3NpdGlvbkZyb21JbmRleCh5VGV4dCwgMTApXG4gKiAgIC8vIG1vZGlmeSB5VGV4dFxuICogICB5VGV4dC5pbnNlcnQoMCwgJ2FiYycpXG4gKiAgIHlUZXh0LmRlbGV0ZSgzLCAxMClcbiAqICAgLy8gQ29tcHV0ZSB0aGUgY3Vyc29yIHBvc2l0aW9uXG4gKiAgIGNvbnN0IGFic29sdXRlUG9zaXRpb24gPSBjcmVhdGVBYnNvbHV0ZVBvc2l0aW9uRnJvbVJlbGF0aXZlUG9zaXRpb24oeSwgcmVsYXRpdmVQb3NpdGlvbilcbiAqICAgYWJzb2x1dGVQb3NpdGlvbi50eXBlID09PSB5VGV4dCAvLyA9PiB0cnVlXG4gKiAgIGNvbnNvbGUubG9nKCdjdXJzb3IgbG9jYXRpb24gaXMgJyArIGFic29sdXRlUG9zaXRpb24uaW5kZXgpIC8vID0+IGN1cnNvciBsb2NhdGlvbiBpcyAzXG4gKlxuICovXG5jbGFzcyBSZWxhdGl2ZVBvc2l0aW9uIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7SUR8bnVsbH0gdHlwZVxuICAgKiBAcGFyYW0ge3N0cmluZ3xudWxsfSB0bmFtZVxuICAgKiBAcGFyYW0ge0lEfG51bGx9IGl0ZW1cbiAgICogQHBhcmFtIHtudW1iZXJ9IGFzc29jXG4gICAqL1xuICBjb25zdHJ1Y3RvciAodHlwZSwgdG5hbWUsIGl0ZW0sIGFzc29jID0gMCkge1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtJRHxudWxsfVxuICAgICAqL1xuICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgLyoqXG4gICAgICogQHR5cGUge3N0cmluZ3xudWxsfVxuICAgICAqL1xuICAgIHRoaXMudG5hbWUgPSB0bmFtZTtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7SUQgfCBudWxsfVxuICAgICAqL1xuICAgIHRoaXMuaXRlbSA9IGl0ZW07XG4gICAgLyoqXG4gICAgICogQSByZWxhdGl2ZSBwb3NpdGlvbiBpcyBhc3NvY2lhdGVkIHRvIGEgc3BlY2lmaWMgY2hhcmFjdGVyLiBCeSBkZWZhdWx0XG4gICAgICogYXNzb2MgPj0gMCwgdGhlIHJlbGF0aXZlIHBvc2l0aW9uIGlzIGFzc29jaWF0ZWQgdG8gdGhlIGNoYXJhY3RlclxuICAgICAqIGFmdGVyIHRoZSBtZWFudCBwb3NpdGlvbi5cbiAgICAgKiBJLmUuIHBvc2l0aW9uIDEgaW4gJ2FiJyBpcyBhc3NvY2lhdGVkIHRvIGNoYXJhY3RlciAnYicuXG4gICAgICpcbiAgICAgKiBJZiBhc3NvYyA8IDAsIHRoZW4gdGhlIHJlbGF0aXZlIHBvc2l0aW9uIGlzIGFzc29jaWF0ZWQgdG8gdGhlIGNhaGFyYWN0ZXJcbiAgICAgKiBiZWZvcmUgdGhlIG1lYW50IHBvc2l0aW9uLlxuICAgICAqXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLmFzc29jID0gYXNzb2M7XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge1JlbGF0aXZlUG9zaXRpb259IHJwb3NcbiAqIEByZXR1cm4ge2FueX1cbiAqL1xuY29uc3QgcmVsYXRpdmVQb3NpdGlvblRvSlNPTiA9IHJwb3MgPT4ge1xuICBjb25zdCBqc29uID0ge307XG4gIGlmIChycG9zLnR5cGUpIHtcbiAgICBqc29uLnR5cGUgPSBycG9zLnR5cGU7XG4gIH1cbiAgaWYgKHJwb3MudG5hbWUpIHtcbiAgICBqc29uLnRuYW1lID0gcnBvcy50bmFtZTtcbiAgfVxuICBpZiAocnBvcy5pdGVtKSB7XG4gICAganNvbi5pdGVtID0gcnBvcy5pdGVtO1xuICB9XG4gIGlmIChycG9zLmFzc29jICE9IG51bGwpIHtcbiAgICBqc29uLmFzc29jID0gcnBvcy5hc3NvYztcbiAgfVxuICByZXR1cm4ganNvblxufTtcblxuLyoqXG4gKiBAcGFyYW0ge2FueX0ganNvblxuICogQHJldHVybiB7UmVsYXRpdmVQb3NpdGlvbn1cbiAqXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgY3JlYXRlUmVsYXRpdmVQb3NpdGlvbkZyb21KU09OID0ganNvbiA9PiBuZXcgUmVsYXRpdmVQb3NpdGlvbihqc29uLnR5cGUgPT0gbnVsbCA/IG51bGwgOiBjcmVhdGVJRChqc29uLnR5cGUuY2xpZW50LCBqc29uLnR5cGUuY2xvY2spLCBqc29uLnRuYW1lIHx8IG51bGwsIGpzb24uaXRlbSA9PSBudWxsID8gbnVsbCA6IGNyZWF0ZUlEKGpzb24uaXRlbS5jbGllbnQsIGpzb24uaXRlbS5jbG9jayksIGpzb24uYXNzb2MgPT0gbnVsbCA/IDAgOiBqc29uLmFzc29jKTtcblxuY2xhc3MgQWJzb2x1dGVQb3NpdGlvbiB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge0Fic3RyYWN0VHlwZTxhbnk+fSB0eXBlXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICAgKiBAcGFyYW0ge251bWJlcn0gW2Fzc29jXVxuICAgKi9cbiAgY29uc3RydWN0b3IgKHR5cGUsIGluZGV4LCBhc3NvYyA9IDApIHtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7QWJzdHJhY3RUeXBlPGFueT59XG4gICAgICovXG4gICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMuaW5kZXggPSBpbmRleDtcbiAgICB0aGlzLmFzc29jID0gYXNzb2M7XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge0Fic3RyYWN0VHlwZTxhbnk+fSB0eXBlXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAqIEBwYXJhbSB7bnVtYmVyfSBbYXNzb2NdXG4gKlxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IGNyZWF0ZUFic29sdXRlUG9zaXRpb24gPSAodHlwZSwgaW5kZXgsIGFzc29jID0gMCkgPT4gbmV3IEFic29sdXRlUG9zaXRpb24odHlwZSwgaW5kZXgsIGFzc29jKTtcblxuLyoqXG4gKiBAcGFyYW0ge0Fic3RyYWN0VHlwZTxhbnk+fSB0eXBlXG4gKiBAcGFyYW0ge0lEfG51bGx9IGl0ZW1cbiAqIEBwYXJhbSB7bnVtYmVyfSBbYXNzb2NdXG4gKlxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IGNyZWF0ZVJlbGF0aXZlUG9zaXRpb24gPSAodHlwZSwgaXRlbSwgYXNzb2MpID0+IHtcbiAgbGV0IHR5cGVpZCA9IG51bGw7XG4gIGxldCB0bmFtZSA9IG51bGw7XG4gIGlmICh0eXBlLl9pdGVtID09PSBudWxsKSB7XG4gICAgdG5hbWUgPSBmaW5kUm9vdFR5cGVLZXkodHlwZSk7XG4gIH0gZWxzZSB7XG4gICAgdHlwZWlkID0gY3JlYXRlSUQodHlwZS5faXRlbS5pZC5jbGllbnQsIHR5cGUuX2l0ZW0uaWQuY2xvY2spO1xuICB9XG4gIHJldHVybiBuZXcgUmVsYXRpdmVQb3NpdGlvbih0eXBlaWQsIHRuYW1lLCBpdGVtLCBhc3NvYylcbn07XG5cbi8qKlxuICogQ3JlYXRlIGEgcmVsYXRpdmVQb3NpdGlvbiBiYXNlZCBvbiBhIGFic29sdXRlIHBvc2l0aW9uLlxuICpcbiAqIEBwYXJhbSB7QWJzdHJhY3RUeXBlPGFueT59IHR5cGUgVGhlIGJhc2UgdHlwZSAoZS5nLiBZVGV4dCBvciBZQXJyYXkpLlxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IFRoZSBhYnNvbHV0ZSBwb3NpdGlvbi5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbYXNzb2NdXG4gKiBAcmV0dXJuIHtSZWxhdGl2ZVBvc2l0aW9ufVxuICpcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCBjcmVhdGVSZWxhdGl2ZVBvc2l0aW9uRnJvbVR5cGVJbmRleCA9ICh0eXBlLCBpbmRleCwgYXNzb2MgPSAwKSA9PiB7XG4gIGxldCB0ID0gdHlwZS5fc3RhcnQ7XG4gIGlmIChhc3NvYyA8IDApIHtcbiAgICAvLyBhc3NvY2lhdGVkIHRvIHRoZSBsZWZ0IGNoYXJhY3RlciBvciB0aGUgYmVnaW5uaW5nIG9mIGEgdHlwZSwgaW5jcmVtZW50IGluZGV4IGlmIHBvc3NpYmxlLlxuICAgIGlmIChpbmRleCA9PT0gMCkge1xuICAgICAgcmV0dXJuIGNyZWF0ZVJlbGF0aXZlUG9zaXRpb24odHlwZSwgbnVsbCwgYXNzb2MpXG4gICAgfVxuICAgIGluZGV4LS07XG4gIH1cbiAgd2hpbGUgKHQgIT09IG51bGwpIHtcbiAgICBpZiAoIXQuZGVsZXRlZCAmJiB0LmNvdW50YWJsZSkge1xuICAgICAgaWYgKHQubGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgICAgLy8gY2FzZSAxOiBmb3VuZCBwb3NpdGlvbiBzb21ld2hlcmUgaW4gdGhlIGxpbmtlZCBsaXN0XG4gICAgICAgIHJldHVybiBjcmVhdGVSZWxhdGl2ZVBvc2l0aW9uKHR5cGUsIGNyZWF0ZUlEKHQuaWQuY2xpZW50LCB0LmlkLmNsb2NrICsgaW5kZXgpLCBhc3NvYylcbiAgICAgIH1cbiAgICAgIGluZGV4IC09IHQubGVuZ3RoO1xuICAgIH1cbiAgICBpZiAodC5yaWdodCA9PT0gbnVsbCAmJiBhc3NvYyA8IDApIHtcbiAgICAgIC8vIGxlZnQtYXNzb2NpYXRlZCBwb3NpdGlvbiwgcmV0dXJuIGxhc3QgYXZhaWxhYmxlIGlkXG4gICAgICByZXR1cm4gY3JlYXRlUmVsYXRpdmVQb3NpdGlvbih0eXBlLCB0Lmxhc3RJZCwgYXNzb2MpXG4gICAgfVxuICAgIHQgPSB0LnJpZ2h0O1xuICB9XG4gIHJldHVybiBjcmVhdGVSZWxhdGl2ZVBvc2l0aW9uKHR5cGUsIG51bGwsIGFzc29jKVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge2VuY29kaW5nLkVuY29kZXJ9IGVuY29kZXJcbiAqIEBwYXJhbSB7UmVsYXRpdmVQb3NpdGlvbn0gcnBvc1xuICpcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCB3cml0ZVJlbGF0aXZlUG9zaXRpb24gPSAoZW5jb2RlciwgcnBvcykgPT4ge1xuICBjb25zdCB7IHR5cGUsIHRuYW1lLCBpdGVtLCBhc3NvYyB9ID0gcnBvcztcbiAgaWYgKGl0ZW0gIT09IG51bGwpIHtcbiAgICBlbmNvZGluZy53cml0ZVZhclVpbnQoZW5jb2RlciwgMCk7XG4gICAgd3JpdGVJRChlbmNvZGVyLCBpdGVtKTtcbiAgfSBlbHNlIGlmICh0bmFtZSAhPT0gbnVsbCkge1xuICAgIC8vIGNhc2UgMjogZm91bmQgcG9zaXRpb24gYXQgdGhlIGVuZCBvZiB0aGUgbGlzdCBhbmQgdHlwZSBpcyBzdG9yZWQgaW4geS5zaGFyZVxuICAgIGVuY29kaW5nLndyaXRlVWludDgoZW5jb2RlciwgMSk7XG4gICAgZW5jb2Rpbmcud3JpdGVWYXJTdHJpbmcoZW5jb2RlciwgdG5hbWUpO1xuICB9IGVsc2UgaWYgKHR5cGUgIT09IG51bGwpIHtcbiAgICAvLyBjYXNlIDM6IGZvdW5kIHBvc2l0aW9uIGF0IHRoZSBlbmQgb2YgdGhlIGxpc3QgYW5kIHR5cGUgaXMgYXR0YWNoZWQgdG8gYW4gaXRlbVxuICAgIGVuY29kaW5nLndyaXRlVWludDgoZW5jb2RlciwgMik7XG4gICAgd3JpdGVJRChlbmNvZGVyLCB0eXBlKTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBlcnJvci51bmV4cGVjdGVkQ2FzZSgpXG4gIH1cbiAgZW5jb2Rpbmcud3JpdGVWYXJJbnQoZW5jb2RlciwgYXNzb2MpO1xuICByZXR1cm4gZW5jb2RlclxufTtcblxuLyoqXG4gKiBAcGFyYW0ge1JlbGF0aXZlUG9zaXRpb259IHJwb3NcbiAqIEByZXR1cm4ge1VpbnQ4QXJyYXl9XG4gKi9cbmNvbnN0IGVuY29kZVJlbGF0aXZlUG9zaXRpb24gPSBycG9zID0+IHtcbiAgY29uc3QgZW5jb2RlciA9IGVuY29kaW5nLmNyZWF0ZUVuY29kZXIoKTtcbiAgd3JpdGVSZWxhdGl2ZVBvc2l0aW9uKGVuY29kZXIsIHJwb3MpO1xuICByZXR1cm4gZW5jb2RpbmcudG9VaW50OEFycmF5KGVuY29kZXIpXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7ZGVjb2RpbmcuRGVjb2Rlcn0gZGVjb2RlclxuICogQHJldHVybiB7UmVsYXRpdmVQb3NpdGlvbn1cbiAqXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgcmVhZFJlbGF0aXZlUG9zaXRpb24gPSBkZWNvZGVyID0+IHtcbiAgbGV0IHR5cGUgPSBudWxsO1xuICBsZXQgdG5hbWUgPSBudWxsO1xuICBsZXQgaXRlbUlEID0gbnVsbDtcbiAgc3dpdGNoIChkZWNvZGluZy5yZWFkVmFyVWludChkZWNvZGVyKSkge1xuICAgIGNhc2UgMDpcbiAgICAgIC8vIGNhc2UgMTogZm91bmQgcG9zaXRpb24gc29tZXdoZXJlIGluIHRoZSBsaW5rZWQgbGlzdFxuICAgICAgaXRlbUlEID0gcmVhZElEKGRlY29kZXIpO1xuICAgICAgYnJlYWtcbiAgICBjYXNlIDE6XG4gICAgICAvLyBjYXNlIDI6IGZvdW5kIHBvc2l0aW9uIGF0IHRoZSBlbmQgb2YgdGhlIGxpc3QgYW5kIHR5cGUgaXMgc3RvcmVkIGluIHkuc2hhcmVcbiAgICAgIHRuYW1lID0gZGVjb2RpbmcucmVhZFZhclN0cmluZyhkZWNvZGVyKTtcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAyOiB7XG4gICAgICAvLyBjYXNlIDM6IGZvdW5kIHBvc2l0aW9uIGF0IHRoZSBlbmQgb2YgdGhlIGxpc3QgYW5kIHR5cGUgaXMgYXR0YWNoZWQgdG8gYW4gaXRlbVxuICAgICAgdHlwZSA9IHJlYWRJRChkZWNvZGVyKTtcbiAgICB9XG4gIH1cbiAgY29uc3QgYXNzb2MgPSBkZWNvZGluZy5oYXNDb250ZW50KGRlY29kZXIpID8gZGVjb2RpbmcucmVhZFZhckludChkZWNvZGVyKSA6IDA7XG4gIHJldHVybiBuZXcgUmVsYXRpdmVQb3NpdGlvbih0eXBlLCB0bmFtZSwgaXRlbUlELCBhc3NvYylcbn07XG5cbi8qKlxuICogQHBhcmFtIHtVaW50OEFycmF5fSB1aW50OEFycmF5XG4gKiBAcmV0dXJuIHtSZWxhdGl2ZVBvc2l0aW9ufVxuICovXG5jb25zdCBkZWNvZGVSZWxhdGl2ZVBvc2l0aW9uID0gdWludDhBcnJheSA9PiByZWFkUmVsYXRpdmVQb3NpdGlvbihkZWNvZGluZy5jcmVhdGVEZWNvZGVyKHVpbnQ4QXJyYXkpKTtcblxuLyoqXG4gKiBAcGFyYW0ge1JlbGF0aXZlUG9zaXRpb259IHJwb3NcbiAqIEBwYXJhbSB7RG9jfSBkb2NcbiAqIEByZXR1cm4ge0Fic29sdXRlUG9zaXRpb258bnVsbH1cbiAqXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgY3JlYXRlQWJzb2x1dGVQb3NpdGlvbkZyb21SZWxhdGl2ZVBvc2l0aW9uID0gKHJwb3MsIGRvYykgPT4ge1xuICBjb25zdCBzdG9yZSA9IGRvYy5zdG9yZTtcbiAgY29uc3QgcmlnaHRJRCA9IHJwb3MuaXRlbTtcbiAgY29uc3QgdHlwZUlEID0gcnBvcy50eXBlO1xuICBjb25zdCB0bmFtZSA9IHJwb3MudG5hbWU7XG4gIGNvbnN0IGFzc29jID0gcnBvcy5hc3NvYztcbiAgbGV0IHR5cGUgPSBudWxsO1xuICBsZXQgaW5kZXggPSAwO1xuICBpZiAocmlnaHRJRCAhPT0gbnVsbCkge1xuICAgIGlmIChnZXRTdGF0ZShzdG9yZSwgcmlnaHRJRC5jbGllbnQpIDw9IHJpZ2h0SUQuY2xvY2spIHtcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuICAgIGNvbnN0IHJlcyA9IGZvbGxvd1JlZG9uZShzdG9yZSwgcmlnaHRJRCk7XG4gICAgY29uc3QgcmlnaHQgPSByZXMuaXRlbTtcbiAgICBpZiAoIShyaWdodCBpbnN0YW5jZW9mIEl0ZW0pKSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cbiAgICB0eXBlID0gLyoqIEB0eXBlIHtBYnN0cmFjdFR5cGU8YW55Pn0gKi8gKHJpZ2h0LnBhcmVudCk7XG4gICAgaWYgKHR5cGUuX2l0ZW0gPT09IG51bGwgfHwgIXR5cGUuX2l0ZW0uZGVsZXRlZCkge1xuICAgICAgaW5kZXggPSAocmlnaHQuZGVsZXRlZCB8fCAhcmlnaHQuY291bnRhYmxlKSA/IDAgOiAocmVzLmRpZmYgKyAoYXNzb2MgPj0gMCA/IDAgOiAxKSk7IC8vIGFkanVzdCBwb3NpdGlvbiBiYXNlZCBvbiBsZWZ0IGFzc29jaWF0aW9uIGlmIG5lY2Vzc2FyeVxuICAgICAgbGV0IG4gPSByaWdodC5sZWZ0O1xuICAgICAgd2hpbGUgKG4gIT09IG51bGwpIHtcbiAgICAgICAgaWYgKCFuLmRlbGV0ZWQgJiYgbi5jb3VudGFibGUpIHtcbiAgICAgICAgICBpbmRleCArPSBuLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICBuID0gbi5sZWZ0O1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAodG5hbWUgIT09IG51bGwpIHtcbiAgICAgIHR5cGUgPSBkb2MuZ2V0KHRuYW1lKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVJRCAhPT0gbnVsbCkge1xuICAgICAgaWYgKGdldFN0YXRlKHN0b3JlLCB0eXBlSUQuY2xpZW50KSA8PSB0eXBlSUQuY2xvY2spIHtcbiAgICAgICAgLy8gdHlwZSBkb2VzIG5vdCBleGlzdCB5ZXRcbiAgICAgICAgcmV0dXJuIG51bGxcbiAgICAgIH1cbiAgICAgIGNvbnN0IHsgaXRlbSB9ID0gZm9sbG93UmVkb25lKHN0b3JlLCB0eXBlSUQpO1xuICAgICAgaWYgKGl0ZW0gaW5zdGFuY2VvZiBJdGVtICYmIGl0ZW0uY29udGVudCBpbnN0YW5jZW9mIENvbnRlbnRUeXBlKSB7XG4gICAgICAgIHR5cGUgPSBpdGVtLmNvbnRlbnQudHlwZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHN0cnVjdCBpcyBnYXJiYWdlIGNvbGxlY3RlZFxuICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBlcnJvci51bmV4cGVjdGVkQ2FzZSgpXG4gICAgfVxuICAgIGlmIChhc3NvYyA+PSAwKSB7XG4gICAgICBpbmRleCA9IHR5cGUuX2xlbmd0aDtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5kZXggPSAwO1xuICAgIH1cbiAgfVxuICByZXR1cm4gY3JlYXRlQWJzb2x1dGVQb3NpdGlvbih0eXBlLCBpbmRleCwgcnBvcy5hc3NvYylcbn07XG5cbi8qKlxuICogQHBhcmFtIHtSZWxhdGl2ZVBvc2l0aW9ufG51bGx9IGFcbiAqIEBwYXJhbSB7UmVsYXRpdmVQb3NpdGlvbnxudWxsfSBiXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICpcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCBjb21wYXJlUmVsYXRpdmVQb3NpdGlvbnMgPSAoYSwgYikgPT4gYSA9PT0gYiB8fCAoXG4gIGEgIT09IG51bGwgJiYgYiAhPT0gbnVsbCAmJiBhLnRuYW1lID09PSBiLnRuYW1lICYmIGNvbXBhcmVJRHMoYS5pdGVtLCBiLml0ZW0pICYmIGNvbXBhcmVJRHMoYS50eXBlLCBiLnR5cGUpICYmIGEuYXNzb2MgPT09IGIuYXNzb2Ncbik7XG5cbmNsYXNzIFNuYXBzaG90IHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7RGVsZXRlU2V0fSBkc1xuICAgKiBAcGFyYW0ge01hcDxudW1iZXIsbnVtYmVyPn0gc3Ygc3RhdGUgbWFwXG4gICAqL1xuICBjb25zdHJ1Y3RvciAoZHMsIHN2KSB7XG4gICAgLyoqXG4gICAgICogQHR5cGUge0RlbGV0ZVNldH1cbiAgICAgKi9cbiAgICB0aGlzLmRzID0gZHM7XG4gICAgLyoqXG4gICAgICogU3RhdGUgTWFwXG4gICAgICogQHR5cGUge01hcDxudW1iZXIsbnVtYmVyPn1cbiAgICAgKi9cbiAgICB0aGlzLnN2ID0gc3Y7XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge1NuYXBzaG90fSBzbmFwMVxuICogQHBhcmFtIHtTbmFwc2hvdH0gc25hcDJcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmNvbnN0IGVxdWFsU25hcHNob3RzID0gKHNuYXAxLCBzbmFwMikgPT4ge1xuICBjb25zdCBkczEgPSBzbmFwMS5kcy5jbGllbnRzO1xuICBjb25zdCBkczIgPSBzbmFwMi5kcy5jbGllbnRzO1xuICBjb25zdCBzdjEgPSBzbmFwMS5zdjtcbiAgY29uc3Qgc3YyID0gc25hcDIuc3Y7XG4gIGlmIChzdjEuc2l6ZSAhPT0gc3YyLnNpemUgfHwgZHMxLnNpemUgIT09IGRzMi5zaXplKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2Ygc3YxLmVudHJpZXMoKSkge1xuICAgIGlmIChzdjIuZ2V0KGtleSkgIT09IHZhbHVlKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gIH1cbiAgZm9yIChjb25zdCBbY2xpZW50LCBkc2l0ZW1zMV0gb2YgZHMxLmVudHJpZXMoKSkge1xuICAgIGNvbnN0IGRzaXRlbXMyID0gZHMyLmdldChjbGllbnQpIHx8IFtdO1xuICAgIGlmIChkc2l0ZW1zMS5sZW5ndGggIT09IGRzaXRlbXMyLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZHNpdGVtczEubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGRzaXRlbTEgPSBkc2l0ZW1zMVtpXTtcbiAgICAgIGNvbnN0IGRzaXRlbTIgPSBkc2l0ZW1zMltpXTtcbiAgICAgIGlmIChkc2l0ZW0xLmNsb2NrICE9PSBkc2l0ZW0yLmNsb2NrIHx8IGRzaXRlbTEubGVuICE9PSBkc2l0ZW0yLmxlbikge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWVcbn07XG5cbi8qKlxuICogQHBhcmFtIHtTbmFwc2hvdH0gc25hcHNob3RcbiAqIEBwYXJhbSB7RFNFbmNvZGVyVjEgfCBEU0VuY29kZXJWMn0gW2VuY29kZXJdXG4gKiBAcmV0dXJuIHtVaW50OEFycmF5fVxuICovXG5jb25zdCBlbmNvZGVTbmFwc2hvdFYyID0gKHNuYXBzaG90LCBlbmNvZGVyID0gbmV3IERTRW5jb2RlclYyKCkpID0+IHtcbiAgd3JpdGVEZWxldGVTZXQoZW5jb2Rlciwgc25hcHNob3QuZHMpO1xuICB3cml0ZVN0YXRlVmVjdG9yKGVuY29kZXIsIHNuYXBzaG90LnN2KTtcbiAgcmV0dXJuIGVuY29kZXIudG9VaW50OEFycmF5KClcbn07XG5cbi8qKlxuICogQHBhcmFtIHtTbmFwc2hvdH0gc25hcHNob3RcbiAqIEByZXR1cm4ge1VpbnQ4QXJyYXl9XG4gKi9cbmNvbnN0IGVuY29kZVNuYXBzaG90ID0gc25hcHNob3QgPT4gZW5jb2RlU25hcHNob3RWMihzbmFwc2hvdCwgbmV3IERTRW5jb2RlclYxKCkpO1xuXG4vKipcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gYnVmXG4gKiBAcGFyYW0ge0RTRGVjb2RlclYxIHwgRFNEZWNvZGVyVjJ9IFtkZWNvZGVyXVxuICogQHJldHVybiB7U25hcHNob3R9XG4gKi9cbmNvbnN0IGRlY29kZVNuYXBzaG90VjIgPSAoYnVmLCBkZWNvZGVyID0gbmV3IERTRGVjb2RlclYyKGRlY29kaW5nLmNyZWF0ZURlY29kZXIoYnVmKSkpID0+IHtcbiAgcmV0dXJuIG5ldyBTbmFwc2hvdChyZWFkRGVsZXRlU2V0KGRlY29kZXIpLCByZWFkU3RhdGVWZWN0b3IoZGVjb2RlcikpXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gYnVmXG4gKiBAcmV0dXJuIHtTbmFwc2hvdH1cbiAqL1xuY29uc3QgZGVjb2RlU25hcHNob3QgPSBidWYgPT4gZGVjb2RlU25hcHNob3RWMihidWYsIG5ldyBEU0RlY29kZXJWMShkZWNvZGluZy5jcmVhdGVEZWNvZGVyKGJ1ZikpKTtcblxuLyoqXG4gKiBAcGFyYW0ge0RlbGV0ZVNldH0gZHNcbiAqIEBwYXJhbSB7TWFwPG51bWJlcixudW1iZXI+fSBzbVxuICogQHJldHVybiB7U25hcHNob3R9XG4gKi9cbmNvbnN0IGNyZWF0ZVNuYXBzaG90ID0gKGRzLCBzbSkgPT4gbmV3IFNuYXBzaG90KGRzLCBzbSk7XG5cbmNvbnN0IGVtcHR5U25hcHNob3QgPSBjcmVhdGVTbmFwc2hvdChjcmVhdGVEZWxldGVTZXQoKSwgbmV3IE1hcCgpKTtcblxuLyoqXG4gKiBAcGFyYW0ge0RvY30gZG9jXG4gKiBAcmV0dXJuIHtTbmFwc2hvdH1cbiAqL1xuY29uc3Qgc25hcHNob3QgPSBkb2MgPT4gY3JlYXRlU25hcHNob3QoY3JlYXRlRGVsZXRlU2V0RnJvbVN0cnVjdFN0b3JlKGRvYy5zdG9yZSksIGdldFN0YXRlVmVjdG9yKGRvYy5zdG9yZSkpO1xuXG4vKipcbiAqIEBwYXJhbSB7SXRlbX0gaXRlbVxuICogQHBhcmFtIHtTbmFwc2hvdHx1bmRlZmluZWR9IHNuYXBzaG90XG4gKlxuICogQHByb3RlY3RlZFxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IGlzVmlzaWJsZSA9IChpdGVtLCBzbmFwc2hvdCkgPT4gc25hcHNob3QgPT09IHVuZGVmaW5lZFxuICA/ICFpdGVtLmRlbGV0ZWRcbiAgOiBzbmFwc2hvdC5zdi5oYXMoaXRlbS5pZC5jbGllbnQpICYmIChzbmFwc2hvdC5zdi5nZXQoaXRlbS5pZC5jbGllbnQpIHx8IDApID4gaXRlbS5pZC5jbG9jayAmJiAhaXNEZWxldGVkKHNuYXBzaG90LmRzLCBpdGVtLmlkKTtcblxuLyoqXG4gKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICogQHBhcmFtIHtTbmFwc2hvdH0gc25hcHNob3RcbiAqL1xuY29uc3Qgc3BsaXRTbmFwc2hvdEFmZmVjdGVkU3RydWN0cyA9ICh0cmFuc2FjdGlvbiwgc25hcHNob3QpID0+IHtcbiAgY29uc3QgbWV0YSA9IG1hcC5zZXRJZlVuZGVmaW5lZCh0cmFuc2FjdGlvbi5tZXRhLCBzcGxpdFNuYXBzaG90QWZmZWN0ZWRTdHJ1Y3RzLCBzZXQuY3JlYXRlKTtcbiAgY29uc3Qgc3RvcmUgPSB0cmFuc2FjdGlvbi5kb2Muc3RvcmU7XG4gIC8vIGNoZWNrIGlmIHdlIGFscmVhZHkgc3BsaXQgZm9yIHRoaXMgc25hcHNob3RcbiAgaWYgKCFtZXRhLmhhcyhzbmFwc2hvdCkpIHtcbiAgICBzbmFwc2hvdC5zdi5mb3JFYWNoKChjbG9jaywgY2xpZW50KSA9PiB7XG4gICAgICBpZiAoY2xvY2sgPCBnZXRTdGF0ZShzdG9yZSwgY2xpZW50KSkge1xuICAgICAgICBnZXRJdGVtQ2xlYW5TdGFydCh0cmFuc2FjdGlvbiwgY3JlYXRlSUQoY2xpZW50LCBjbG9jaykpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGl0ZXJhdGVEZWxldGVkU3RydWN0cyh0cmFuc2FjdGlvbiwgc25hcHNob3QuZHMsIGl0ZW0gPT4ge30pO1xuICAgIG1ldGEuYWRkKHNuYXBzaG90KTtcbiAgfVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge0RvY30gb3JpZ2luRG9jXG4gKiBAcGFyYW0ge1NuYXBzaG90fSBzbmFwc2hvdFxuICogQHBhcmFtIHtEb2N9IFtuZXdEb2NdIE9wdGlvbmFsbHksIHlvdSBtYXkgZGVmaW5lIHRoZSBZanMgZG9jdW1lbnQgdGhhdCByZWNlaXZlcyB0aGUgZGF0YSBmcm9tIG9yaWdpbkRvY1xuICogQHJldHVybiB7RG9jfVxuICovXG5jb25zdCBjcmVhdGVEb2NGcm9tU25hcHNob3QgPSAob3JpZ2luRG9jLCBzbmFwc2hvdCwgbmV3RG9jID0gbmV3IERvYygpKSA9PiB7XG4gIGlmIChvcmlnaW5Eb2MuZ2MpIHtcbiAgICAvLyB3ZSBzaG91bGQgbm90IHRyeSB0byByZXN0b3JlIGEgR0MtZWQgZG9jdW1lbnQsIGJlY2F1c2Ugc29tZSBvZiB0aGUgcmVzdG9yZWQgaXRlbXMgbWlnaHQgaGF2ZSB0aGVpciBjb250ZW50IGRlbGV0ZWRcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ29yaWdpbkRvYyBtdXN0IG5vdCBiZSBnYXJiYWdlIGNvbGxlY3RlZCcpXG4gIH1cbiAgY29uc3QgeyBzdiwgZHMgfSA9IHNuYXBzaG90O1xuXG4gIGNvbnN0IGVuY29kZXIgPSBuZXcgVXBkYXRlRW5jb2RlclYyKCk7XG4gIG9yaWdpbkRvYy50cmFuc2FjdCh0cmFuc2FjdGlvbiA9PiB7XG4gICAgbGV0IHNpemUgPSAwO1xuICAgIHN2LmZvckVhY2goY2xvY2sgPT4ge1xuICAgICAgaWYgKGNsb2NrID4gMCkge1xuICAgICAgICBzaXplKys7XG4gICAgICB9XG4gICAgfSk7XG4gICAgZW5jb2Rpbmcud3JpdGVWYXJVaW50KGVuY29kZXIucmVzdEVuY29kZXIsIHNpemUpO1xuICAgIC8vIHNwbGl0dGluZyB0aGUgc3RydWN0cyBiZWZvcmUgd3JpdGluZyB0aGVtIHRvIHRoZSBlbmNvZGVyXG4gICAgZm9yIChjb25zdCBbY2xpZW50LCBjbG9ja10gb2Ygc3YpIHtcbiAgICAgIGlmIChjbG9jayA9PT0gMCkge1xuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuICAgICAgaWYgKGNsb2NrIDwgZ2V0U3RhdGUob3JpZ2luRG9jLnN0b3JlLCBjbGllbnQpKSB7XG4gICAgICAgIGdldEl0ZW1DbGVhblN0YXJ0KHRyYW5zYWN0aW9uLCBjcmVhdGVJRChjbGllbnQsIGNsb2NrKSk7XG4gICAgICB9XG4gICAgICBjb25zdCBzdHJ1Y3RzID0gb3JpZ2luRG9jLnN0b3JlLmNsaWVudHMuZ2V0KGNsaWVudCkgfHwgW107XG4gICAgICBjb25zdCBsYXN0U3RydWN0SW5kZXggPSBmaW5kSW5kZXhTUyhzdHJ1Y3RzLCBjbG9jayAtIDEpO1xuICAgICAgLy8gd3JpdGUgIyBlbmNvZGVkIHN0cnVjdHNcbiAgICAgIGVuY29kaW5nLndyaXRlVmFyVWludChlbmNvZGVyLnJlc3RFbmNvZGVyLCBsYXN0U3RydWN0SW5kZXggKyAxKTtcbiAgICAgIGVuY29kZXIud3JpdGVDbGllbnQoY2xpZW50KTtcbiAgICAgIC8vIGZpcnN0IGNsb2NrIHdyaXR0ZW4gaXMgMFxuICAgICAgZW5jb2Rpbmcud3JpdGVWYXJVaW50KGVuY29kZXIucmVzdEVuY29kZXIsIDApO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPD0gbGFzdFN0cnVjdEluZGV4OyBpKyspIHtcbiAgICAgICAgc3RydWN0c1tpXS53cml0ZShlbmNvZGVyLCAwKTtcbiAgICAgIH1cbiAgICB9XG4gICAgd3JpdGVEZWxldGVTZXQoZW5jb2RlciwgZHMpO1xuICB9KTtcblxuICBhcHBseVVwZGF0ZVYyKG5ld0RvYywgZW5jb2Rlci50b1VpbnQ4QXJyYXkoKSwgJ3NuYXBzaG90Jyk7XG4gIHJldHVybiBuZXdEb2Ncbn07XG5cbmNsYXNzIFN0cnVjdFN0b3JlIHtcbiAgY29uc3RydWN0b3IgKCkge1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtNYXA8bnVtYmVyLEFycmF5PEdDfEl0ZW0+Pn1cbiAgICAgKi9cbiAgICB0aGlzLmNsaWVudHMgPSBuZXcgTWFwKCk7XG4gICAgLyoqXG4gICAgICogQHR5cGUge251bGwgfCB7IG1pc3Npbmc6IE1hcDxudW1iZXIsIG51bWJlcj4sIHVwZGF0ZTogVWludDhBcnJheSB9fVxuICAgICAqL1xuICAgIHRoaXMucGVuZGluZ1N0cnVjdHMgPSBudWxsO1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtudWxsIHwgVWludDhBcnJheX1cbiAgICAgKi9cbiAgICB0aGlzLnBlbmRpbmdEcyA9IG51bGw7XG4gIH1cbn1cblxuLyoqXG4gKiBSZXR1cm4gdGhlIHN0YXRlcyBhcyBhIE1hcDxjbGllbnQsY2xvY2s+LlxuICogTm90ZSB0aGF0IGNsb2NrIHJlZmVycyB0byB0aGUgbmV4dCBleHBlY3RlZCBjbG9jayBpZC5cbiAqXG4gKiBAcGFyYW0ge1N0cnVjdFN0b3JlfSBzdG9yZVxuICogQHJldHVybiB7TWFwPG51bWJlcixudW1iZXI+fVxuICpcbiAqIEBwdWJsaWNcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCBnZXRTdGF0ZVZlY3RvciA9IHN0b3JlID0+IHtcbiAgY29uc3Qgc20gPSBuZXcgTWFwKCk7XG4gIHN0b3JlLmNsaWVudHMuZm9yRWFjaCgoc3RydWN0cywgY2xpZW50KSA9PiB7XG4gICAgY29uc3Qgc3RydWN0ID0gc3RydWN0c1tzdHJ1Y3RzLmxlbmd0aCAtIDFdO1xuICAgIHNtLnNldChjbGllbnQsIHN0cnVjdC5pZC5jbG9jayArIHN0cnVjdC5sZW5ndGgpO1xuICB9KTtcbiAgcmV0dXJuIHNtXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7U3RydWN0U3RvcmV9IHN0b3JlXG4gKiBAcGFyYW0ge251bWJlcn0gY2xpZW50XG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKlxuICogQHB1YmxpY1xuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IGdldFN0YXRlID0gKHN0b3JlLCBjbGllbnQpID0+IHtcbiAgY29uc3Qgc3RydWN0cyA9IHN0b3JlLmNsaWVudHMuZ2V0KGNsaWVudCk7XG4gIGlmIChzdHJ1Y3RzID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gMFxuICB9XG4gIGNvbnN0IGxhc3RTdHJ1Y3QgPSBzdHJ1Y3RzW3N0cnVjdHMubGVuZ3RoIC0gMV07XG4gIHJldHVybiBsYXN0U3RydWN0LmlkLmNsb2NrICsgbGFzdFN0cnVjdC5sZW5ndGhcbn07XG5cbi8qKlxuICogQHBhcmFtIHtTdHJ1Y3RTdG9yZX0gc3RvcmVcbiAqIEBwYXJhbSB7R0N8SXRlbX0gc3RydWN0XG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCBhZGRTdHJ1Y3QgPSAoc3RvcmUsIHN0cnVjdCkgPT4ge1xuICBsZXQgc3RydWN0cyA9IHN0b3JlLmNsaWVudHMuZ2V0KHN0cnVjdC5pZC5jbGllbnQpO1xuICBpZiAoc3RydWN0cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgc3RydWN0cyA9IFtdO1xuICAgIHN0b3JlLmNsaWVudHMuc2V0KHN0cnVjdC5pZC5jbGllbnQsIHN0cnVjdHMpO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IGxhc3RTdHJ1Y3QgPSBzdHJ1Y3RzW3N0cnVjdHMubGVuZ3RoIC0gMV07XG4gICAgaWYgKGxhc3RTdHJ1Y3QuaWQuY2xvY2sgKyBsYXN0U3RydWN0Lmxlbmd0aCAhPT0gc3RydWN0LmlkLmNsb2NrKSB7XG4gICAgICB0aHJvdyBlcnJvci51bmV4cGVjdGVkQ2FzZSgpXG4gICAgfVxuICB9XG4gIHN0cnVjdHMucHVzaChzdHJ1Y3QpO1xufTtcblxuLyoqXG4gKiBQZXJmb3JtIGEgYmluYXJ5IHNlYXJjaCBvbiBhIHNvcnRlZCBhcnJheVxuICogQHBhcmFtIHtBcnJheTxJdGVtfEdDPn0gc3RydWN0c1xuICogQHBhcmFtIHtudW1iZXJ9IGNsb2NrXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCBmaW5kSW5kZXhTUyA9IChzdHJ1Y3RzLCBjbG9jaykgPT4ge1xuICBsZXQgbGVmdCA9IDA7XG4gIGxldCByaWdodCA9IHN0cnVjdHMubGVuZ3RoIC0gMTtcbiAgbGV0IG1pZCA9IHN0cnVjdHNbcmlnaHRdO1xuICBsZXQgbWlkY2xvY2sgPSBtaWQuaWQuY2xvY2s7XG4gIGlmIChtaWRjbG9jayA9PT0gY2xvY2spIHtcbiAgICByZXR1cm4gcmlnaHRcbiAgfVxuICAvLyBAdG9kbyBkb2VzIGl0IGV2ZW4gbWFrZSBzZW5zZSB0byBwaXZvdCB0aGUgc2VhcmNoP1xuICAvLyBJZiBhIGdvb2Qgc3BsaXQgbWlzc2VzLCBpdCBtaWdodCBhY3R1YWxseSBpbmNyZWFzZSB0aGUgdGltZSB0byBmaW5kIHRoZSBjb3JyZWN0IGl0ZW0uXG4gIC8vIEN1cnJlbnRseSwgdGhlIG9ubHkgYWR2YW50YWdlIGlzIHRoYXQgc2VhcmNoIHdpdGggcGl2b3RpbmcgbWlnaHQgZmluZCB0aGUgaXRlbSBvbiB0aGUgZmlyc3QgdHJ5LlxuICBsZXQgbWlkaW5kZXggPSBtYXRoLmZsb29yKChjbG9jayAvIChtaWRjbG9jayArIG1pZC5sZW5ndGggLSAxKSkgKiByaWdodCk7IC8vIHBpdm90aW5nIHRoZSBzZWFyY2hcbiAgd2hpbGUgKGxlZnQgPD0gcmlnaHQpIHtcbiAgICBtaWQgPSBzdHJ1Y3RzW21pZGluZGV4XTtcbiAgICBtaWRjbG9jayA9IG1pZC5pZC5jbG9jaztcbiAgICBpZiAobWlkY2xvY2sgPD0gY2xvY2spIHtcbiAgICAgIGlmIChjbG9jayA8IG1pZGNsb2NrICsgbWlkLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gbWlkaW5kZXhcbiAgICAgIH1cbiAgICAgIGxlZnQgPSBtaWRpbmRleCArIDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJpZ2h0ID0gbWlkaW5kZXggLSAxO1xuICAgIH1cbiAgICBtaWRpbmRleCA9IG1hdGguZmxvb3IoKGxlZnQgKyByaWdodCkgLyAyKTtcbiAgfVxuICAvLyBBbHdheXMgY2hlY2sgc3RhdGUgYmVmb3JlIGxvb2tpbmcgZm9yIGEgc3RydWN0IGluIFN0cnVjdFN0b3JlXG4gIC8vIFRoZXJlZm9yZSB0aGUgY2FzZSBvZiBub3QgZmluZGluZyBhIHN0cnVjdCBpcyB1bmV4cGVjdGVkXG4gIHRocm93IGVycm9yLnVuZXhwZWN0ZWRDYXNlKClcbn07XG5cbi8qKlxuICogRXhwZWN0cyB0aGF0IGlkIGlzIGFjdHVhbGx5IGluIHN0b3JlLiBUaGlzIGZ1bmN0aW9uIHRocm93cyBvciBpcyBhbiBpbmZpbml0ZSBsb29wIG90aGVyd2lzZS5cbiAqXG4gKiBAcGFyYW0ge1N0cnVjdFN0b3JlfSBzdG9yZVxuICogQHBhcmFtIHtJRH0gaWRcbiAqIEByZXR1cm4ge0dDfEl0ZW19XG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCBmaW5kID0gKHN0b3JlLCBpZCkgPT4ge1xuICAvKipcbiAgICogQHR5cGUge0FycmF5PEdDfEl0ZW0+fVxuICAgKi9cbiAgLy8gQHRzLWlnbm9yZVxuICBjb25zdCBzdHJ1Y3RzID0gc3RvcmUuY2xpZW50cy5nZXQoaWQuY2xpZW50KTtcbiAgcmV0dXJuIHN0cnVjdHNbZmluZEluZGV4U1Moc3RydWN0cywgaWQuY2xvY2spXVxufTtcblxuLyoqXG4gKiBFeHBlY3RzIHRoYXQgaWQgaXMgYWN0dWFsbHkgaW4gc3RvcmUuIFRoaXMgZnVuY3Rpb24gdGhyb3dzIG9yIGlzIGFuIGluZmluaXRlIGxvb3Agb3RoZXJ3aXNlLlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCBnZXRJdGVtID0gLyoqIEB0eXBlIHtmdW5jdGlvbihTdHJ1Y3RTdG9yZSxJRCk6SXRlbX0gKi8gKGZpbmQpO1xuXG4vKipcbiAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gKiBAcGFyYW0ge0FycmF5PEl0ZW18R0M+fSBzdHJ1Y3RzXG4gKiBAcGFyYW0ge251bWJlcn0gY2xvY2tcbiAqL1xuY29uc3QgZmluZEluZGV4Q2xlYW5TdGFydCA9ICh0cmFuc2FjdGlvbiwgc3RydWN0cywgY2xvY2spID0+IHtcbiAgY29uc3QgaW5kZXggPSBmaW5kSW5kZXhTUyhzdHJ1Y3RzLCBjbG9jayk7XG4gIGNvbnN0IHN0cnVjdCA9IHN0cnVjdHNbaW5kZXhdO1xuICBpZiAoc3RydWN0LmlkLmNsb2NrIDwgY2xvY2sgJiYgc3RydWN0IGluc3RhbmNlb2YgSXRlbSkge1xuICAgIHN0cnVjdHMuc3BsaWNlKGluZGV4ICsgMSwgMCwgc3BsaXRJdGVtKHRyYW5zYWN0aW9uLCBzdHJ1Y3QsIGNsb2NrIC0gc3RydWN0LmlkLmNsb2NrKSk7XG4gICAgcmV0dXJuIGluZGV4ICsgMVxuICB9XG4gIHJldHVybiBpbmRleFxufTtcblxuLyoqXG4gKiBFeHBlY3RzIHRoYXQgaWQgaXMgYWN0dWFsbHkgaW4gc3RvcmUuIFRoaXMgZnVuY3Rpb24gdGhyb3dzIG9yIGlzIGFuIGluZmluaXRlIGxvb3Agb3RoZXJ3aXNlLlxuICpcbiAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gKiBAcGFyYW0ge0lEfSBpZFxuICogQHJldHVybiB7SXRlbX1cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IGdldEl0ZW1DbGVhblN0YXJ0ID0gKHRyYW5zYWN0aW9uLCBpZCkgPT4ge1xuICBjb25zdCBzdHJ1Y3RzID0gLyoqIEB0eXBlIHtBcnJheTxJdGVtPn0gKi8gKHRyYW5zYWN0aW9uLmRvYy5zdG9yZS5jbGllbnRzLmdldChpZC5jbGllbnQpKTtcbiAgcmV0dXJuIHN0cnVjdHNbZmluZEluZGV4Q2xlYW5TdGFydCh0cmFuc2FjdGlvbiwgc3RydWN0cywgaWQuY2xvY2spXVxufTtcblxuLyoqXG4gKiBFeHBlY3RzIHRoYXQgaWQgaXMgYWN0dWFsbHkgaW4gc3RvcmUuIFRoaXMgZnVuY3Rpb24gdGhyb3dzIG9yIGlzIGFuIGluZmluaXRlIGxvb3Agb3RoZXJ3aXNlLlxuICpcbiAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gKiBAcGFyYW0ge1N0cnVjdFN0b3JlfSBzdG9yZVxuICogQHBhcmFtIHtJRH0gaWRcbiAqIEByZXR1cm4ge0l0ZW19XG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCBnZXRJdGVtQ2xlYW5FbmQgPSAodHJhbnNhY3Rpb24sIHN0b3JlLCBpZCkgPT4ge1xuICAvKipcbiAgICogQHR5cGUge0FycmF5PEl0ZW0+fVxuICAgKi9cbiAgLy8gQHRzLWlnbm9yZVxuICBjb25zdCBzdHJ1Y3RzID0gc3RvcmUuY2xpZW50cy5nZXQoaWQuY2xpZW50KTtcbiAgY29uc3QgaW5kZXggPSBmaW5kSW5kZXhTUyhzdHJ1Y3RzLCBpZC5jbG9jayk7XG4gIGNvbnN0IHN0cnVjdCA9IHN0cnVjdHNbaW5kZXhdO1xuICBpZiAoaWQuY2xvY2sgIT09IHN0cnVjdC5pZC5jbG9jayArIHN0cnVjdC5sZW5ndGggLSAxICYmIHN0cnVjdC5jb25zdHJ1Y3RvciAhPT0gR0MpIHtcbiAgICBzdHJ1Y3RzLnNwbGljZShpbmRleCArIDEsIDAsIHNwbGl0SXRlbSh0cmFuc2FjdGlvbiwgc3RydWN0LCBpZC5jbG9jayAtIHN0cnVjdC5pZC5jbG9jayArIDEpKTtcbiAgfVxuICByZXR1cm4gc3RydWN0XG59O1xuXG4vKipcbiAqIFJlcGxhY2UgYGl0ZW1gIHdpdGggYG5ld2l0ZW1gIGluIHN0b3JlXG4gKiBAcGFyYW0ge1N0cnVjdFN0b3JlfSBzdG9yZVxuICogQHBhcmFtIHtHQ3xJdGVtfSBzdHJ1Y3RcbiAqIEBwYXJhbSB7R0N8SXRlbX0gbmV3U3RydWN0XG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCByZXBsYWNlU3RydWN0ID0gKHN0b3JlLCBzdHJ1Y3QsIG5ld1N0cnVjdCkgPT4ge1xuICBjb25zdCBzdHJ1Y3RzID0gLyoqIEB0eXBlIHtBcnJheTxHQ3xJdGVtPn0gKi8gKHN0b3JlLmNsaWVudHMuZ2V0KHN0cnVjdC5pZC5jbGllbnQpKTtcbiAgc3RydWN0c1tmaW5kSW5kZXhTUyhzdHJ1Y3RzLCBzdHJ1Y3QuaWQuY2xvY2spXSA9IG5ld1N0cnVjdDtcbn07XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGEgcmFuZ2Ugb2Ygc3RydWN0c1xuICpcbiAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gKiBAcGFyYW0ge0FycmF5PEl0ZW18R0M+fSBzdHJ1Y3RzXG4gKiBAcGFyYW0ge251bWJlcn0gY2xvY2tTdGFydCBJbmNsdXNpdmUgc3RhcnRcbiAqIEBwYXJhbSB7bnVtYmVyfSBsZW5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oR0N8SXRlbSk6dm9pZH0gZlxuICpcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCBpdGVyYXRlU3RydWN0cyA9ICh0cmFuc2FjdGlvbiwgc3RydWN0cywgY2xvY2tTdGFydCwgbGVuLCBmKSA9PiB7XG4gIGlmIChsZW4gPT09IDApIHtcbiAgICByZXR1cm5cbiAgfVxuICBjb25zdCBjbG9ja0VuZCA9IGNsb2NrU3RhcnQgKyBsZW47XG4gIGxldCBpbmRleCA9IGZpbmRJbmRleENsZWFuU3RhcnQodHJhbnNhY3Rpb24sIHN0cnVjdHMsIGNsb2NrU3RhcnQpO1xuICBsZXQgc3RydWN0O1xuICBkbyB7XG4gICAgc3RydWN0ID0gc3RydWN0c1tpbmRleCsrXTtcbiAgICBpZiAoY2xvY2tFbmQgPCBzdHJ1Y3QuaWQuY2xvY2sgKyBzdHJ1Y3QubGVuZ3RoKSB7XG4gICAgICBmaW5kSW5kZXhDbGVhblN0YXJ0KHRyYW5zYWN0aW9uLCBzdHJ1Y3RzLCBjbG9ja0VuZCk7XG4gICAgfVxuICAgIGYoc3RydWN0KTtcbiAgfSB3aGlsZSAoaW5kZXggPCBzdHJ1Y3RzLmxlbmd0aCAmJiBzdHJ1Y3RzW2luZGV4XS5pZC5jbG9jayA8IGNsb2NrRW5kKVxufTtcblxuLyoqXG4gKiBBIHRyYW5zYWN0aW9uIGlzIGNyZWF0ZWQgZm9yIGV2ZXJ5IGNoYW5nZSBvbiB0aGUgWWpzIG1vZGVsLiBJdCBpcyBwb3NzaWJsZVxuICogdG8gYnVuZGxlIGNoYW5nZXMgb24gdGhlIFlqcyBtb2RlbCBpbiBhIHNpbmdsZSB0cmFuc2FjdGlvbiB0b1xuICogbWluaW1pemUgdGhlIG51bWJlciBvbiBtZXNzYWdlcyBzZW50IGFuZCB0aGUgbnVtYmVyIG9mIG9ic2VydmVyIGNhbGxzLlxuICogSWYgcG9zc2libGUgdGhlIHVzZXIgb2YgdGhpcyBsaWJyYXJ5IHNob3VsZCBidW5kbGUgYXMgbWFueSBjaGFuZ2VzIGFzXG4gKiBwb3NzaWJsZS4gSGVyZSBpcyBhbiBleGFtcGxlIHRvIGlsbHVzdHJhdGUgdGhlIGFkdmFudGFnZXMgb2YgYnVuZGxpbmc6XG4gKlxuICogQGV4YW1wbGVcbiAqIGNvbnN0IG1hcCA9IHkuZGVmaW5lKCdtYXAnLCBZTWFwKVxuICogLy8gTG9nIGNvbnRlbnQgd2hlbiBjaGFuZ2UgaXMgdHJpZ2dlcmVkXG4gKiBtYXAub2JzZXJ2ZSgoKSA9PiB7XG4gKiAgIGNvbnNvbGUubG9nKCdjaGFuZ2UgdHJpZ2dlcmVkJylcbiAqIH0pXG4gKiAvLyBFYWNoIGNoYW5nZSBvbiB0aGUgbWFwIHR5cGUgdHJpZ2dlcnMgYSBsb2cgbWVzc2FnZTpcbiAqIG1hcC5zZXQoJ2EnLCAwKSAvLyA9PiBcImNoYW5nZSB0cmlnZ2VyZWRcIlxuICogbWFwLnNldCgnYicsIDApIC8vID0+IFwiY2hhbmdlIHRyaWdnZXJlZFwiXG4gKiAvLyBXaGVuIHB1dCBpbiBhIHRyYW5zYWN0aW9uLCBpdCB3aWxsIHRyaWdnZXIgdGhlIGxvZyBhZnRlciB0aGUgdHJhbnNhY3Rpb246XG4gKiB5LnRyYW5zYWN0KCgpID0+IHtcbiAqICAgbWFwLnNldCgnYScsIDEpXG4gKiAgIG1hcC5zZXQoJ2InLCAxKVxuICogfSkgLy8gPT4gXCJjaGFuZ2UgdHJpZ2dlcmVkXCJcbiAqXG4gKiBAcHVibGljXG4gKi9cbmNsYXNzIFRyYW5zYWN0aW9uIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7RG9jfSBkb2NcbiAgICogQHBhcmFtIHthbnl9IG9yaWdpblxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGxvY2FsXG4gICAqL1xuICBjb25zdHJ1Y3RvciAoZG9jLCBvcmlnaW4sIGxvY2FsKSB7XG4gICAgLyoqXG4gICAgICogVGhlIFlqcyBpbnN0YW5jZS5cbiAgICAgKiBAdHlwZSB7RG9jfVxuICAgICAqL1xuICAgIHRoaXMuZG9jID0gZG9jO1xuICAgIC8qKlxuICAgICAqIERlc2NyaWJlcyB0aGUgc2V0IG9mIGRlbGV0ZWQgaXRlbXMgYnkgaWRzXG4gICAgICogQHR5cGUge0RlbGV0ZVNldH1cbiAgICAgKi9cbiAgICB0aGlzLmRlbGV0ZVNldCA9IG5ldyBEZWxldGVTZXQoKTtcbiAgICAvKipcbiAgICAgKiBIb2xkcyB0aGUgc3RhdGUgYmVmb3JlIHRoZSB0cmFuc2FjdGlvbiBzdGFydGVkLlxuICAgICAqIEB0eXBlIHtNYXA8TnVtYmVyLE51bWJlcj59XG4gICAgICovXG4gICAgdGhpcy5iZWZvcmVTdGF0ZSA9IGdldFN0YXRlVmVjdG9yKGRvYy5zdG9yZSk7XG4gICAgLyoqXG4gICAgICogSG9sZHMgdGhlIHN0YXRlIGFmdGVyIHRoZSB0cmFuc2FjdGlvbi5cbiAgICAgKiBAdHlwZSB7TWFwPE51bWJlcixOdW1iZXI+fVxuICAgICAqL1xuICAgIHRoaXMuYWZ0ZXJTdGF0ZSA9IG5ldyBNYXAoKTtcbiAgICAvKipcbiAgICAgKiBBbGwgdHlwZXMgdGhhdCB3ZXJlIGRpcmVjdGx5IG1vZGlmaWVkIChwcm9wZXJ0eSBhZGRlZCBvciBjaGlsZFxuICAgICAqIGluc2VydGVkL2RlbGV0ZWQpLiBOZXcgdHlwZXMgYXJlIG5vdCBpbmNsdWRlZCBpbiB0aGlzIFNldC5cbiAgICAgKiBNYXBzIGZyb20gdHlwZSB0byBwYXJlbnRTdWJzIChgaXRlbS5wYXJlbnRTdWIgPSBudWxsYCBmb3IgWUFycmF5KVxuICAgICAqIEB0eXBlIHtNYXA8QWJzdHJhY3RUeXBlPFlFdmVudDxhbnk+PixTZXQ8U3RyaW5nfG51bGw+Pn1cbiAgICAgKi9cbiAgICB0aGlzLmNoYW5nZWQgPSBuZXcgTWFwKCk7XG4gICAgLyoqXG4gICAgICogU3RvcmVzIHRoZSBldmVudHMgZm9yIHRoZSB0eXBlcyB0aGF0IG9ic2VydmUgYWxzbyBjaGlsZCBlbGVtZW50cy5cbiAgICAgKiBJdCBpcyBtYWlubHkgdXNlZCBieSBgb2JzZXJ2ZURlZXBgLlxuICAgICAqIEB0eXBlIHtNYXA8QWJzdHJhY3RUeXBlPFlFdmVudDxhbnk+PixBcnJheTxZRXZlbnQ8YW55Pj4+fVxuICAgICAqL1xuICAgIHRoaXMuY2hhbmdlZFBhcmVudFR5cGVzID0gbmV3IE1hcCgpO1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtBcnJheTxBYnN0cmFjdFN0cnVjdD59XG4gICAgICovXG4gICAgdGhpcy5fbWVyZ2VTdHJ1Y3RzID0gW107XG4gICAgLyoqXG4gICAgICogQHR5cGUge2FueX1cbiAgICAgKi9cbiAgICB0aGlzLm9yaWdpbiA9IG9yaWdpbjtcbiAgICAvKipcbiAgICAgKiBTdG9yZXMgbWV0YSBpbmZvcm1hdGlvbiBvbiB0aGUgdHJhbnNhY3Rpb25cbiAgICAgKiBAdHlwZSB7TWFwPGFueSxhbnk+fVxuICAgICAqL1xuICAgIHRoaXMubWV0YSA9IG5ldyBNYXAoKTtcbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRoaXMgY2hhbmdlIG9yaWdpbmF0ZXMgZnJvbSB0aGlzIGRvYy5cbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLmxvY2FsID0gbG9jYWw7XG4gICAgLyoqXG4gICAgICogQHR5cGUge1NldDxEb2M+fVxuICAgICAqL1xuICAgIHRoaXMuc3ViZG9jc0FkZGVkID0gbmV3IFNldCgpO1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtTZXQ8RG9jPn1cbiAgICAgKi9cbiAgICB0aGlzLnN1YmRvY3NSZW1vdmVkID0gbmV3IFNldCgpO1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtTZXQ8RG9jPn1cbiAgICAgKi9cbiAgICB0aGlzLnN1YmRvY3NMb2FkZWQgPSBuZXcgU2V0KCk7XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge1VwZGF0ZUVuY29kZXJWMSB8IFVwZGF0ZUVuY29kZXJWMn0gZW5jb2RlclxuICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgZGF0YSB3YXMgd3JpdHRlbi5cbiAqL1xuY29uc3Qgd3JpdGVVcGRhdGVNZXNzYWdlRnJvbVRyYW5zYWN0aW9uID0gKGVuY29kZXIsIHRyYW5zYWN0aW9uKSA9PiB7XG4gIGlmICh0cmFuc2FjdGlvbi5kZWxldGVTZXQuY2xpZW50cy5zaXplID09PSAwICYmICFtYXAuYW55KHRyYW5zYWN0aW9uLmFmdGVyU3RhdGUsIChjbG9jaywgY2xpZW50KSA9PiB0cmFuc2FjdGlvbi5iZWZvcmVTdGF0ZS5nZXQoY2xpZW50KSAhPT0gY2xvY2spKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgc29ydEFuZE1lcmdlRGVsZXRlU2V0KHRyYW5zYWN0aW9uLmRlbGV0ZVNldCk7XG4gIHdyaXRlU3RydWN0c0Zyb21UcmFuc2FjdGlvbihlbmNvZGVyLCB0cmFuc2FjdGlvbik7XG4gIHdyaXRlRGVsZXRlU2V0KGVuY29kZXIsIHRyYW5zYWN0aW9uLmRlbGV0ZVNldCk7XG4gIHJldHVybiB0cnVlXG59O1xuXG4vKipcbiAqIElmIGB0eXBlLnBhcmVudGAgd2FzIGFkZGVkIGluIGN1cnJlbnQgdHJhbnNhY3Rpb24sIGB0eXBlYCB0ZWNobmljYWxseVxuICogZGlkIG5vdCBjaGFuZ2UsIGl0IHdhcyBqdXN0IGFkZGVkIGFuZCB3ZSBzaG91bGQgbm90IGZpcmUgZXZlbnRzIGZvciBgdHlwZWAuXG4gKlxuICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAqIEBwYXJhbSB7QWJzdHJhY3RUeXBlPFlFdmVudDxhbnk+Pn0gdHlwZVxuICogQHBhcmFtIHtzdHJpbmd8bnVsbH0gcGFyZW50U3ViXG4gKi9cbmNvbnN0IGFkZENoYW5nZWRUeXBlVG9UcmFuc2FjdGlvbiA9ICh0cmFuc2FjdGlvbiwgdHlwZSwgcGFyZW50U3ViKSA9PiB7XG4gIGNvbnN0IGl0ZW0gPSB0eXBlLl9pdGVtO1xuICBpZiAoaXRlbSA9PT0gbnVsbCB8fCAoaXRlbS5pZC5jbG9jayA8ICh0cmFuc2FjdGlvbi5iZWZvcmVTdGF0ZS5nZXQoaXRlbS5pZC5jbGllbnQpIHx8IDApICYmICFpdGVtLmRlbGV0ZWQpKSB7XG4gICAgbWFwLnNldElmVW5kZWZpbmVkKHRyYW5zYWN0aW9uLmNoYW5nZWQsIHR5cGUsIHNldC5jcmVhdGUpLmFkZChwYXJlbnRTdWIpO1xuICB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7QXJyYXk8QWJzdHJhY3RTdHJ1Y3Q+fSBzdHJ1Y3RzXG4gKiBAcGFyYW0ge251bWJlcn0gcG9zXG4gKi9cbmNvbnN0IHRyeVRvTWVyZ2VXaXRoTGVmdCA9IChzdHJ1Y3RzLCBwb3MpID0+IHtcbiAgY29uc3QgbGVmdCA9IHN0cnVjdHNbcG9zIC0gMV07XG4gIGNvbnN0IHJpZ2h0ID0gc3RydWN0c1twb3NdO1xuICBpZiAobGVmdC5kZWxldGVkID09PSByaWdodC5kZWxldGVkICYmIGxlZnQuY29uc3RydWN0b3IgPT09IHJpZ2h0LmNvbnN0cnVjdG9yKSB7XG4gICAgaWYgKGxlZnQubWVyZ2VXaXRoKHJpZ2h0KSkge1xuICAgICAgc3RydWN0cy5zcGxpY2UocG9zLCAxKTtcbiAgICAgIGlmIChyaWdodCBpbnN0YW5jZW9mIEl0ZW0gJiYgcmlnaHQucGFyZW50U3ViICE9PSBudWxsICYmIC8qKiBAdHlwZSB7QWJzdHJhY3RUeXBlPGFueT59ICovIChyaWdodC5wYXJlbnQpLl9tYXAuZ2V0KHJpZ2h0LnBhcmVudFN1YikgPT09IHJpZ2h0KSB7XG4gICAgICAgIC8qKiBAdHlwZSB7QWJzdHJhY3RUeXBlPGFueT59ICovIChyaWdodC5wYXJlbnQpLl9tYXAuc2V0KHJpZ2h0LnBhcmVudFN1YiwgLyoqIEB0eXBlIHtJdGVtfSAqLyAobGVmdCkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge0RlbGV0ZVNldH0gZHNcbiAqIEBwYXJhbSB7U3RydWN0U3RvcmV9IHN0b3JlXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKEl0ZW0pOmJvb2xlYW59IGdjRmlsdGVyXG4gKi9cbmNvbnN0IHRyeUdjRGVsZXRlU2V0ID0gKGRzLCBzdG9yZSwgZ2NGaWx0ZXIpID0+IHtcbiAgZm9yIChjb25zdCBbY2xpZW50LCBkZWxldGVJdGVtc10gb2YgZHMuY2xpZW50cy5lbnRyaWVzKCkpIHtcbiAgICBjb25zdCBzdHJ1Y3RzID0gLyoqIEB0eXBlIHtBcnJheTxHQ3xJdGVtPn0gKi8gKHN0b3JlLmNsaWVudHMuZ2V0KGNsaWVudCkpO1xuICAgIGZvciAobGV0IGRpID0gZGVsZXRlSXRlbXMubGVuZ3RoIC0gMTsgZGkgPj0gMDsgZGktLSkge1xuICAgICAgY29uc3QgZGVsZXRlSXRlbSA9IGRlbGV0ZUl0ZW1zW2RpXTtcbiAgICAgIGNvbnN0IGVuZERlbGV0ZUl0ZW1DbG9jayA9IGRlbGV0ZUl0ZW0uY2xvY2sgKyBkZWxldGVJdGVtLmxlbjtcbiAgICAgIGZvciAoXG4gICAgICAgIGxldCBzaSA9IGZpbmRJbmRleFNTKHN0cnVjdHMsIGRlbGV0ZUl0ZW0uY2xvY2spLCBzdHJ1Y3QgPSBzdHJ1Y3RzW3NpXTtcbiAgICAgICAgc2kgPCBzdHJ1Y3RzLmxlbmd0aCAmJiBzdHJ1Y3QuaWQuY2xvY2sgPCBlbmREZWxldGVJdGVtQ2xvY2s7XG4gICAgICAgIHN0cnVjdCA9IHN0cnVjdHNbKytzaV1cbiAgICAgICkge1xuICAgICAgICBjb25zdCBzdHJ1Y3QgPSBzdHJ1Y3RzW3NpXTtcbiAgICAgICAgaWYgKGRlbGV0ZUl0ZW0uY2xvY2sgKyBkZWxldGVJdGVtLmxlbiA8PSBzdHJ1Y3QuaWQuY2xvY2spIHtcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdHJ1Y3QgaW5zdGFuY2VvZiBJdGVtICYmIHN0cnVjdC5kZWxldGVkICYmICFzdHJ1Y3Qua2VlcCAmJiBnY0ZpbHRlcihzdHJ1Y3QpKSB7XG4gICAgICAgICAgc3RydWN0LmdjKHN0b3JlLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHtEZWxldGVTZXR9IGRzXG4gKiBAcGFyYW0ge1N0cnVjdFN0b3JlfSBzdG9yZVxuICovXG5jb25zdCB0cnlNZXJnZURlbGV0ZVNldCA9IChkcywgc3RvcmUpID0+IHtcbiAgLy8gdHJ5IHRvIG1lcmdlIGRlbGV0ZWQgLyBnYydkIGl0ZW1zXG4gIC8vIG1lcmdlIGZyb20gcmlnaHQgdG8gbGVmdCBmb3IgYmV0dGVyIGVmZmljaWVjeSBhbmQgc28gd2UgZG9uJ3QgbWlzcyBhbnkgbWVyZ2UgdGFyZ2V0c1xuICBkcy5jbGllbnRzLmZvckVhY2goKGRlbGV0ZUl0ZW1zLCBjbGllbnQpID0+IHtcbiAgICBjb25zdCBzdHJ1Y3RzID0gLyoqIEB0eXBlIHtBcnJheTxHQ3xJdGVtPn0gKi8gKHN0b3JlLmNsaWVudHMuZ2V0KGNsaWVudCkpO1xuICAgIGZvciAobGV0IGRpID0gZGVsZXRlSXRlbXMubGVuZ3RoIC0gMTsgZGkgPj0gMDsgZGktLSkge1xuICAgICAgY29uc3QgZGVsZXRlSXRlbSA9IGRlbGV0ZUl0ZW1zW2RpXTtcbiAgICAgIC8vIHN0YXJ0IHdpdGggbWVyZ2luZyB0aGUgaXRlbSBuZXh0IHRvIHRoZSBsYXN0IGRlbGV0ZWQgaXRlbVxuICAgICAgY29uc3QgbW9zdFJpZ2h0SW5kZXhUb0NoZWNrID0gbWF0aC5taW4oc3RydWN0cy5sZW5ndGggLSAxLCAxICsgZmluZEluZGV4U1Moc3RydWN0cywgZGVsZXRlSXRlbS5jbG9jayArIGRlbGV0ZUl0ZW0ubGVuIC0gMSkpO1xuICAgICAgZm9yIChcbiAgICAgICAgbGV0IHNpID0gbW9zdFJpZ2h0SW5kZXhUb0NoZWNrLCBzdHJ1Y3QgPSBzdHJ1Y3RzW3NpXTtcbiAgICAgICAgc2kgPiAwICYmIHN0cnVjdC5pZC5jbG9jayA+PSBkZWxldGVJdGVtLmNsb2NrO1xuICAgICAgICBzdHJ1Y3QgPSBzdHJ1Y3RzWy0tc2ldXG4gICAgICApIHtcbiAgICAgICAgdHJ5VG9NZXJnZVdpdGhMZWZ0KHN0cnVjdHMsIHNpKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge0RlbGV0ZVNldH0gZHNcbiAqIEBwYXJhbSB7U3RydWN0U3RvcmV9IHN0b3JlXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKEl0ZW0pOmJvb2xlYW59IGdjRmlsdGVyXG4gKi9cbmNvbnN0IHRyeUdjID0gKGRzLCBzdG9yZSwgZ2NGaWx0ZXIpID0+IHtcbiAgdHJ5R2NEZWxldGVTZXQoZHMsIHN0b3JlLCBnY0ZpbHRlcik7XG4gIHRyeU1lcmdlRGVsZXRlU2V0KGRzLCBzdG9yZSk7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7QXJyYXk8VHJhbnNhY3Rpb24+fSB0cmFuc2FjdGlvbkNsZWFudXBzXG4gKiBAcGFyYW0ge251bWJlcn0gaVxuICovXG5jb25zdCBjbGVhbnVwVHJhbnNhY3Rpb25zID0gKHRyYW5zYWN0aW9uQ2xlYW51cHMsIGkpID0+IHtcbiAgaWYgKGkgPCB0cmFuc2FjdGlvbkNsZWFudXBzLmxlbmd0aCkge1xuICAgIGNvbnN0IHRyYW5zYWN0aW9uID0gdHJhbnNhY3Rpb25DbGVhbnVwc1tpXTtcbiAgICBjb25zdCBkb2MgPSB0cmFuc2FjdGlvbi5kb2M7XG4gICAgY29uc3Qgc3RvcmUgPSBkb2Muc3RvcmU7XG4gICAgY29uc3QgZHMgPSB0cmFuc2FjdGlvbi5kZWxldGVTZXQ7XG4gICAgY29uc3QgbWVyZ2VTdHJ1Y3RzID0gdHJhbnNhY3Rpb24uX21lcmdlU3RydWN0cztcbiAgICB0cnkge1xuICAgICAgc29ydEFuZE1lcmdlRGVsZXRlU2V0KGRzKTtcbiAgICAgIHRyYW5zYWN0aW9uLmFmdGVyU3RhdGUgPSBnZXRTdGF0ZVZlY3Rvcih0cmFuc2FjdGlvbi5kb2Muc3RvcmUpO1xuICAgICAgZG9jLl90cmFuc2FjdGlvbiA9IG51bGw7XG4gICAgICBkb2MuZW1pdCgnYmVmb3JlT2JzZXJ2ZXJDYWxscycsIFt0cmFuc2FjdGlvbiwgZG9jXSk7XG4gICAgICAvKipcbiAgICAgICAqIEFuIGFycmF5IG9mIGV2ZW50IGNhbGxiYWNrcy5cbiAgICAgICAqXG4gICAgICAgKiBFYWNoIGNhbGxiYWNrIGlzIGNhbGxlZCBldmVuIGlmIHRoZSBvdGhlciBvbmVzIHRocm93IGVycm9ycy5cbiAgICAgICAqXG4gICAgICAgKiBAdHlwZSB7QXJyYXk8ZnVuY3Rpb24oKTp2b2lkPn1cbiAgICAgICAqL1xuICAgICAgY29uc3QgZnMgPSBbXTtcbiAgICAgIC8vIG9ic2VydmUgZXZlbnRzIG9uIGNoYW5nZWQgdHlwZXNcbiAgICAgIHRyYW5zYWN0aW9uLmNoYW5nZWQuZm9yRWFjaCgoc3VicywgaXRlbXR5cGUpID0+XG4gICAgICAgIGZzLnB1c2goKCkgPT4ge1xuICAgICAgICAgIGlmIChpdGVtdHlwZS5faXRlbSA9PT0gbnVsbCB8fCAhaXRlbXR5cGUuX2l0ZW0uZGVsZXRlZCkge1xuICAgICAgICAgICAgaXRlbXR5cGUuX2NhbGxPYnNlcnZlcih0cmFuc2FjdGlvbiwgc3Vicyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgKTtcbiAgICAgIGZzLnB1c2goKCkgPT4ge1xuICAgICAgICAvLyBkZWVwIG9ic2VydmUgZXZlbnRzXG4gICAgICAgIHRyYW5zYWN0aW9uLmNoYW5nZWRQYXJlbnRUeXBlcy5mb3JFYWNoKChldmVudHMsIHR5cGUpID0+XG4gICAgICAgICAgZnMucHVzaCgoKSA9PiB7XG4gICAgICAgICAgICAvLyBXZSBuZWVkIHRvIHRoaW5rIGFib3V0IHRoZSBwb3NzaWJpbGl0eSB0aGF0IHRoZSB1c2VyIHRyYW5zZm9ybXMgdGhlXG4gICAgICAgICAgICAvLyBZLkRvYyBpbiB0aGUgZXZlbnQuXG4gICAgICAgICAgICBpZiAodHlwZS5faXRlbSA9PT0gbnVsbCB8fCAhdHlwZS5faXRlbS5kZWxldGVkKSB7XG4gICAgICAgICAgICAgIGV2ZW50cyA9IGV2ZW50c1xuICAgICAgICAgICAgICAgIC5maWx0ZXIoZXZlbnQgPT5cbiAgICAgICAgICAgICAgICAgIGV2ZW50LnRhcmdldC5faXRlbSA9PT0gbnVsbCB8fCAhZXZlbnQudGFyZ2V0Ll9pdGVtLmRlbGV0ZWRcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICBldmVudHNcbiAgICAgICAgICAgICAgICAuZm9yRWFjaChldmVudCA9PiB7XG4gICAgICAgICAgICAgICAgICBldmVudC5jdXJyZW50VGFyZ2V0ID0gdHlwZTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgLy8gc29ydCBldmVudHMgYnkgcGF0aCBsZW5ndGggc28gdGhhdCB0b3AtbGV2ZWwgZXZlbnRzIGFyZSBmaXJlZCBmaXJzdC5cbiAgICAgICAgICAgICAgZXZlbnRzXG4gICAgICAgICAgICAgICAgLnNvcnQoKGV2ZW50MSwgZXZlbnQyKSA9PiBldmVudDEucGF0aC5sZW5ndGggLSBldmVudDIucGF0aC5sZW5ndGgpO1xuICAgICAgICAgICAgICAvLyBXZSBkb24ndCBuZWVkIHRvIGNoZWNrIGZvciBldmVudHMubGVuZ3RoXG4gICAgICAgICAgICAgIC8vIGJlY2F1c2Ugd2Uga25vdyBpdCBoYXMgYXQgbGVhc3Qgb25lIGVsZW1lbnRcbiAgICAgICAgICAgICAgY2FsbEV2ZW50SGFuZGxlckxpc3RlbmVycyh0eXBlLl9kRUgsIGV2ZW50cywgdHJhbnNhY3Rpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgICAgIGZzLnB1c2goKCkgPT4gZG9jLmVtaXQoJ2FmdGVyVHJhbnNhY3Rpb24nLCBbdHJhbnNhY3Rpb24sIGRvY10pKTtcbiAgICAgIH0pO1xuICAgICAgY2FsbEFsbChmcywgW10pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICAvLyBSZXBsYWNlIGRlbGV0ZWQgaXRlbXMgd2l0aCBJdGVtRGVsZXRlZCAvIEdDLlxuICAgICAgLy8gVGhpcyBpcyB3aGVyZSBjb250ZW50IGlzIGFjdHVhbGx5IHJlbW92ZSBmcm9tIHRoZSBZanMgRG9jLlxuICAgICAgaWYgKGRvYy5nYykge1xuICAgICAgICB0cnlHY0RlbGV0ZVNldChkcywgc3RvcmUsIGRvYy5nY0ZpbHRlcik7XG4gICAgICB9XG4gICAgICB0cnlNZXJnZURlbGV0ZVNldChkcywgc3RvcmUpO1xuXG4gICAgICAvLyBvbiBhbGwgYWZmZWN0ZWQgc3RvcmUuY2xpZW50cyBwcm9wcywgdHJ5IHRvIG1lcmdlXG4gICAgICB0cmFuc2FjdGlvbi5hZnRlclN0YXRlLmZvckVhY2goKGNsb2NrLCBjbGllbnQpID0+IHtcbiAgICAgICAgY29uc3QgYmVmb3JlQ2xvY2sgPSB0cmFuc2FjdGlvbi5iZWZvcmVTdGF0ZS5nZXQoY2xpZW50KSB8fCAwO1xuICAgICAgICBpZiAoYmVmb3JlQ2xvY2sgIT09IGNsb2NrKSB7XG4gICAgICAgICAgY29uc3Qgc3RydWN0cyA9IC8qKiBAdHlwZSB7QXJyYXk8R0N8SXRlbT59ICovIChzdG9yZS5jbGllbnRzLmdldChjbGllbnQpKTtcbiAgICAgICAgICAvLyB3ZSBpdGVyYXRlIGZyb20gcmlnaHQgdG8gbGVmdCBzbyB3ZSBjYW4gc2FmZWx5IHJlbW92ZSBlbnRyaWVzXG4gICAgICAgICAgY29uc3QgZmlyc3RDaGFuZ2VQb3MgPSBtYXRoLm1heChmaW5kSW5kZXhTUyhzdHJ1Y3RzLCBiZWZvcmVDbG9jayksIDEpO1xuICAgICAgICAgIGZvciAobGV0IGkgPSBzdHJ1Y3RzLmxlbmd0aCAtIDE7IGkgPj0gZmlyc3RDaGFuZ2VQb3M7IGktLSkge1xuICAgICAgICAgICAgdHJ5VG9NZXJnZVdpdGhMZWZ0KHN0cnVjdHMsIGkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICAvLyB0cnkgdG8gbWVyZ2UgbWVyZ2VTdHJ1Y3RzXG4gICAgICAvLyBAdG9kbzogaXQgbWFrZXMgbW9yZSBzZW5zZSB0byB0cmFuc2Zvcm0gbWVyZ2VTdHJ1Y3RzIHRvIGEgRFMsIHNvcnQgaXQsIGFuZCBtZXJnZSBmcm9tIHJpZ2h0IHRvIGxlZnRcbiAgICAgIC8vICAgICAgICBidXQgYXQgdGhlIG1vbWVudCBEUyBkb2VzIG5vdCBoYW5kbGUgZHVwbGljYXRlc1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtZXJnZVN0cnVjdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgeyBjbGllbnQsIGNsb2NrIH0gPSBtZXJnZVN0cnVjdHNbaV0uaWQ7XG4gICAgICAgIGNvbnN0IHN0cnVjdHMgPSAvKiogQHR5cGUge0FycmF5PEdDfEl0ZW0+fSAqLyAoc3RvcmUuY2xpZW50cy5nZXQoY2xpZW50KSk7XG4gICAgICAgIGNvbnN0IHJlcGxhY2VkU3RydWN0UG9zID0gZmluZEluZGV4U1Moc3RydWN0cywgY2xvY2spO1xuICAgICAgICBpZiAocmVwbGFjZWRTdHJ1Y3RQb3MgKyAxIDwgc3RydWN0cy5sZW5ndGgpIHtcbiAgICAgICAgICB0cnlUb01lcmdlV2l0aExlZnQoc3RydWN0cywgcmVwbGFjZWRTdHJ1Y3RQb3MgKyAxKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVwbGFjZWRTdHJ1Y3RQb3MgPiAwKSB7XG4gICAgICAgICAgdHJ5VG9NZXJnZVdpdGhMZWZ0KHN0cnVjdHMsIHJlcGxhY2VkU3RydWN0UG9zKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKCF0cmFuc2FjdGlvbi5sb2NhbCAmJiB0cmFuc2FjdGlvbi5hZnRlclN0YXRlLmdldChkb2MuY2xpZW50SUQpICE9PSB0cmFuc2FjdGlvbi5iZWZvcmVTdGF0ZS5nZXQoZG9jLmNsaWVudElEKSkge1xuICAgICAgICBsb2dnaW5nLnByaW50KGxvZ2dpbmcuT1JBTkdFLCBsb2dnaW5nLkJPTEQsICdbeWpzXSAnLCBsb2dnaW5nLlVOQk9MRCwgbG9nZ2luZy5SRUQsICdDaGFuZ2VkIHRoZSBjbGllbnQtaWQgYmVjYXVzZSBhbm90aGVyIGNsaWVudCBzZWVtcyB0byBiZSB1c2luZyBpdC4nKTtcbiAgICAgICAgZG9jLmNsaWVudElEID0gZ2VuZXJhdGVOZXdDbGllbnRJZCgpO1xuICAgICAgfVxuICAgICAgLy8gQHRvZG8gTWVyZ2UgYWxsIHRoZSB0cmFuc2FjdGlvbnMgaW50byBvbmUgYW5kIHByb3ZpZGUgc2VuZCB0aGUgZGF0YSBhcyBhIHNpbmdsZSB1cGRhdGUgbWVzc2FnZVxuICAgICAgZG9jLmVtaXQoJ2FmdGVyVHJhbnNhY3Rpb25DbGVhbnVwJywgW3RyYW5zYWN0aW9uLCBkb2NdKTtcbiAgICAgIGlmIChkb2MuX29ic2VydmVycy5oYXMoJ3VwZGF0ZScpKSB7XG4gICAgICAgIGNvbnN0IGVuY29kZXIgPSBuZXcgVXBkYXRlRW5jb2RlclYxKCk7XG4gICAgICAgIGNvbnN0IGhhc0NvbnRlbnQgPSB3cml0ZVVwZGF0ZU1lc3NhZ2VGcm9tVHJhbnNhY3Rpb24oZW5jb2RlciwgdHJhbnNhY3Rpb24pO1xuICAgICAgICBpZiAoaGFzQ29udGVudCkge1xuICAgICAgICAgIGRvYy5lbWl0KCd1cGRhdGUnLCBbZW5jb2Rlci50b1VpbnQ4QXJyYXkoKSwgdHJhbnNhY3Rpb24ub3JpZ2luLCBkb2MsIHRyYW5zYWN0aW9uXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChkb2MuX29ic2VydmVycy5oYXMoJ3VwZGF0ZVYyJykpIHtcbiAgICAgICAgY29uc3QgZW5jb2RlciA9IG5ldyBVcGRhdGVFbmNvZGVyVjIoKTtcbiAgICAgICAgY29uc3QgaGFzQ29udGVudCA9IHdyaXRlVXBkYXRlTWVzc2FnZUZyb21UcmFuc2FjdGlvbihlbmNvZGVyLCB0cmFuc2FjdGlvbik7XG4gICAgICAgIGlmIChoYXNDb250ZW50KSB7XG4gICAgICAgICAgZG9jLmVtaXQoJ3VwZGF0ZVYyJywgW2VuY29kZXIudG9VaW50OEFycmF5KCksIHRyYW5zYWN0aW9uLm9yaWdpbiwgZG9jLCB0cmFuc2FjdGlvbl0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb25zdCB7IHN1YmRvY3NBZGRlZCwgc3ViZG9jc0xvYWRlZCwgc3ViZG9jc1JlbW92ZWQgfSA9IHRyYW5zYWN0aW9uO1xuICAgICAgaWYgKHN1YmRvY3NBZGRlZC5zaXplID4gMCB8fCBzdWJkb2NzUmVtb3ZlZC5zaXplID4gMCB8fCBzdWJkb2NzTG9hZGVkLnNpemUgPiAwKSB7XG4gICAgICAgIHN1YmRvY3NBZGRlZC5mb3JFYWNoKHN1YmRvYyA9PiB7XG4gICAgICAgICAgc3ViZG9jLmNsaWVudElEID0gZG9jLmNsaWVudElEO1xuICAgICAgICAgIGlmIChzdWJkb2MuY29sbGVjdGlvbmlkID09IG51bGwpIHtcbiAgICAgICAgICAgIHN1YmRvYy5jb2xsZWN0aW9uaWQgPSBkb2MuY29sbGVjdGlvbmlkO1xuICAgICAgICAgIH1cbiAgICAgICAgICBkb2Muc3ViZG9jcy5hZGQoc3ViZG9jKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHN1YmRvY3NSZW1vdmVkLmZvckVhY2goc3ViZG9jID0+IGRvYy5zdWJkb2NzLmRlbGV0ZShzdWJkb2MpKTtcbiAgICAgICAgZG9jLmVtaXQoJ3N1YmRvY3MnLCBbeyBsb2FkZWQ6IHN1YmRvY3NMb2FkZWQsIGFkZGVkOiBzdWJkb2NzQWRkZWQsIHJlbW92ZWQ6IHN1YmRvY3NSZW1vdmVkIH0sIGRvYywgdHJhbnNhY3Rpb25dKTtcbiAgICAgICAgc3ViZG9jc1JlbW92ZWQuZm9yRWFjaChzdWJkb2MgPT4gc3ViZG9jLmRlc3Ryb3koKSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0cmFuc2FjdGlvbkNsZWFudXBzLmxlbmd0aCA8PSBpICsgMSkge1xuICAgICAgICBkb2MuX3RyYW5zYWN0aW9uQ2xlYW51cHMgPSBbXTtcbiAgICAgICAgZG9jLmVtaXQoJ2FmdGVyQWxsVHJhbnNhY3Rpb25zJywgW2RvYywgdHJhbnNhY3Rpb25DbGVhbnVwc10pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2xlYW51cFRyYW5zYWN0aW9ucyh0cmFuc2FjdGlvbkNsZWFudXBzLCBpICsgMSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIEltcGxlbWVudHMgdGhlIGZ1bmN0aW9uYWxpdHkgb2YgYHkudHJhbnNhY3QoKCk9PnsuLn0pYFxuICpcbiAqIEBwYXJhbSB7RG9jfSBkb2NcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oVHJhbnNhY3Rpb24pOnZvaWR9IGZcbiAqIEBwYXJhbSB7YW55fSBbb3JpZ2luPXRydWVdXG4gKlxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IHRyYW5zYWN0ID0gKGRvYywgZiwgb3JpZ2luID0gbnVsbCwgbG9jYWwgPSB0cnVlKSA9PiB7XG4gIGNvbnN0IHRyYW5zYWN0aW9uQ2xlYW51cHMgPSBkb2MuX3RyYW5zYWN0aW9uQ2xlYW51cHM7XG4gIGxldCBpbml0aWFsQ2FsbCA9IGZhbHNlO1xuICBpZiAoZG9jLl90cmFuc2FjdGlvbiA9PT0gbnVsbCkge1xuICAgIGluaXRpYWxDYWxsID0gdHJ1ZTtcbiAgICBkb2MuX3RyYW5zYWN0aW9uID0gbmV3IFRyYW5zYWN0aW9uKGRvYywgb3JpZ2luLCBsb2NhbCk7XG4gICAgdHJhbnNhY3Rpb25DbGVhbnVwcy5wdXNoKGRvYy5fdHJhbnNhY3Rpb24pO1xuICAgIGlmICh0cmFuc2FjdGlvbkNsZWFudXBzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgZG9jLmVtaXQoJ2JlZm9yZUFsbFRyYW5zYWN0aW9ucycsIFtkb2NdKTtcbiAgICB9XG4gICAgZG9jLmVtaXQoJ2JlZm9yZVRyYW5zYWN0aW9uJywgW2RvYy5fdHJhbnNhY3Rpb24sIGRvY10pO1xuICB9XG4gIHRyeSB7XG4gICAgZihkb2MuX3RyYW5zYWN0aW9uKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBpZiAoaW5pdGlhbENhbGwgJiYgdHJhbnNhY3Rpb25DbGVhbnVwc1swXSA9PT0gZG9jLl90cmFuc2FjdGlvbikge1xuICAgICAgLy8gVGhlIGZpcnN0IHRyYW5zYWN0aW9uIGVuZGVkLCBub3cgcHJvY2VzcyBvYnNlcnZlciBjYWxscy5cbiAgICAgIC8vIE9ic2VydmVyIGNhbGwgbWF5IGNyZWF0ZSBuZXcgdHJhbnNhY3Rpb25zIGZvciB3aGljaCB3ZSBuZWVkIHRvIGNhbGwgdGhlIG9ic2VydmVycyBhbmQgZG8gY2xlYW51cC5cbiAgICAgIC8vIFdlIGRvbid0IHdhbnQgdG8gbmVzdCB0aGVzZSBjYWxscywgc28gd2UgZXhlY3V0ZSB0aGVzZSBjYWxscyBvbmUgYWZ0ZXJcbiAgICAgIC8vIGFub3RoZXIuXG4gICAgICAvLyBBbHNvIHdlIG5lZWQgdG8gZW5zdXJlIHRoYXQgYWxsIGNsZWFudXBzIGFyZSBjYWxsZWQsIGV2ZW4gaWYgdGhlXG4gICAgICAvLyBvYnNlcnZlcyB0aHJvdyBlcnJvcnMuXG4gICAgICAvLyBUaGlzIGZpbGUgaXMgZnVsbCBvZiBoYWNreSB0cnkge30gZmluYWxseSB7fSBibG9ja3MgdG8gZW5zdXJlIHRoYXQgYW5cbiAgICAgIC8vIGV2ZW50IGNhbiB0aHJvdyBlcnJvcnMgYW5kIGFsc28gdGhhdCB0aGUgY2xlYW51cCBpcyBjYWxsZWQuXG4gICAgICBjbGVhbnVwVHJhbnNhY3Rpb25zKHRyYW5zYWN0aW9uQ2xlYW51cHMsIDApO1xuICAgIH1cbiAgfVxufTtcblxuY2xhc3MgU3RhY2tJdGVtIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7RGVsZXRlU2V0fSBkZWxldGlvbnNcbiAgICogQHBhcmFtIHtEZWxldGVTZXR9IGluc2VydGlvbnNcbiAgICovXG4gIGNvbnN0cnVjdG9yIChkZWxldGlvbnMsIGluc2VydGlvbnMpIHtcbiAgICB0aGlzLmluc2VydGlvbnMgPSBpbnNlcnRpb25zO1xuICAgIHRoaXMuZGVsZXRpb25zID0gZGVsZXRpb25zO1xuICAgIC8qKlxuICAgICAqIFVzZSB0aGlzIHRvIHNhdmUgYW5kIHJlc3RvcmUgbWV0YWRhdGEgbGlrZSBzZWxlY3Rpb24gcmFuZ2VcbiAgICAgKi9cbiAgICB0aGlzLm1ldGEgPSBuZXcgTWFwKCk7XG4gIH1cbn1cbi8qKlxuICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJcbiAqIEBwYXJhbSB7VW5kb01hbmFnZXJ9IHVtXG4gKiBAcGFyYW0ge1N0YWNrSXRlbX0gc3RhY2tJdGVtXG4gKi9cbmNvbnN0IGNsZWFyVW5kb01hbmFnZXJTdGFja0l0ZW0gPSAodHIsIHVtLCBzdGFja0l0ZW0pID0+IHtcbiAgaXRlcmF0ZURlbGV0ZWRTdHJ1Y3RzKHRyLCBzdGFja0l0ZW0uZGVsZXRpb25zLCBpdGVtID0+IHtcbiAgICBpZiAoaXRlbSBpbnN0YW5jZW9mIEl0ZW0gJiYgdW0uc2NvcGUuc29tZSh0eXBlID0+IGlzUGFyZW50T2YodHlwZSwgaXRlbSkpKSB7XG4gICAgICBrZWVwSXRlbShpdGVtLCBmYWxzZSk7XG4gICAgfVxuICB9KTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtVbmRvTWFuYWdlcn0gdW5kb01hbmFnZXJcbiAqIEBwYXJhbSB7QXJyYXk8U3RhY2tJdGVtPn0gc3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBldmVudFR5cGVcbiAqIEByZXR1cm4ge1N0YWNrSXRlbT99XG4gKi9cbmNvbnN0IHBvcFN0YWNrSXRlbSA9ICh1bmRvTWFuYWdlciwgc3RhY2ssIGV2ZW50VHlwZSkgPT4ge1xuICAvKipcbiAgICogV2hldGhlciBhIGNoYW5nZSBoYXBwZW5lZFxuICAgKiBAdHlwZSB7U3RhY2tJdGVtP31cbiAgICovXG4gIGxldCByZXN1bHQgPSBudWxsO1xuICAvKipcbiAgICogS2VlcCBhIHJlZmVyZW5jZSB0byB0aGUgdHJhbnNhY3Rpb24gc28gd2UgY2FuIGZpcmUgdGhlIGV2ZW50IHdpdGggdGhlIGNoYW5nZWRQYXJlbnRUeXBlc1xuICAgKiBAdHlwZSB7YW55fVxuICAgKi9cbiAgbGV0IF90ciA9IG51bGw7XG4gIGNvbnN0IGRvYyA9IHVuZG9NYW5hZ2VyLmRvYztcbiAgY29uc3Qgc2NvcGUgPSB1bmRvTWFuYWdlci5zY29wZTtcbiAgdHJhbnNhY3QoZG9jLCB0cmFuc2FjdGlvbiA9PiB7XG4gICAgd2hpbGUgKHN0YWNrLmxlbmd0aCA+IDAgJiYgcmVzdWx0ID09PSBudWxsKSB7XG4gICAgICBjb25zdCBzdG9yZSA9IGRvYy5zdG9yZTtcbiAgICAgIGNvbnN0IHN0YWNrSXRlbSA9IC8qKiBAdHlwZSB7U3RhY2tJdGVtfSAqLyAoc3RhY2sucG9wKCkpO1xuICAgICAgLyoqXG4gICAgICAgKiBAdHlwZSB7U2V0PEl0ZW0+fVxuICAgICAgICovXG4gICAgICBjb25zdCBpdGVtc1RvUmVkbyA9IG5ldyBTZXQoKTtcbiAgICAgIC8qKlxuICAgICAgICogQHR5cGUge0FycmF5PEl0ZW0+fVxuICAgICAgICovXG4gICAgICBjb25zdCBpdGVtc1RvRGVsZXRlID0gW107XG4gICAgICBsZXQgcGVyZm9ybWVkQ2hhbmdlID0gZmFsc2U7XG4gICAgICBpdGVyYXRlRGVsZXRlZFN0cnVjdHModHJhbnNhY3Rpb24sIHN0YWNrSXRlbS5pbnNlcnRpb25zLCBzdHJ1Y3QgPT4ge1xuICAgICAgICBpZiAoc3RydWN0IGluc3RhbmNlb2YgSXRlbSkge1xuICAgICAgICAgIGlmIChzdHJ1Y3QucmVkb25lICE9PSBudWxsKSB7XG4gICAgICAgICAgICBsZXQgeyBpdGVtLCBkaWZmIH0gPSBmb2xsb3dSZWRvbmUoc3RvcmUsIHN0cnVjdC5pZCk7XG4gICAgICAgICAgICBpZiAoZGlmZiA+IDApIHtcbiAgICAgICAgICAgICAgaXRlbSA9IGdldEl0ZW1DbGVhblN0YXJ0KHRyYW5zYWN0aW9uLCBjcmVhdGVJRChpdGVtLmlkLmNsaWVudCwgaXRlbS5pZC5jbG9jayArIGRpZmYpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN0cnVjdCA9IGl0ZW07XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghc3RydWN0LmRlbGV0ZWQgJiYgc2NvcGUuc29tZSh0eXBlID0+IGlzUGFyZW50T2YodHlwZSwgLyoqIEB0eXBlIHtJdGVtfSAqLyAoc3RydWN0KSkpKSB7XG4gICAgICAgICAgICBpdGVtc1RvRGVsZXRlLnB1c2goc3RydWN0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaXRlcmF0ZURlbGV0ZWRTdHJ1Y3RzKHRyYW5zYWN0aW9uLCBzdGFja0l0ZW0uZGVsZXRpb25zLCBzdHJ1Y3QgPT4ge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgc3RydWN0IGluc3RhbmNlb2YgSXRlbSAmJlxuICAgICAgICAgIHNjb3BlLnNvbWUodHlwZSA9PiBpc1BhcmVudE9mKHR5cGUsIHN0cnVjdCkpICYmXG4gICAgICAgICAgLy8gTmV2ZXIgcmVkbyBzdHJ1Y3RzIGluIHN0YWNrSXRlbS5pbnNlcnRpb25zIGJlY2F1c2UgdGhleSB3ZXJlIGNyZWF0ZWQgYW5kIGRlbGV0ZWQgaW4gdGhlIHNhbWUgY2FwdHVyZSBpbnRlcnZhbC5cbiAgICAgICAgICAhaXNEZWxldGVkKHN0YWNrSXRlbS5pbnNlcnRpb25zLCBzdHJ1Y3QuaWQpXG4gICAgICAgICkge1xuICAgICAgICAgIGl0ZW1zVG9SZWRvLmFkZChzdHJ1Y3QpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGl0ZW1zVG9SZWRvLmZvckVhY2goc3RydWN0ID0+IHtcbiAgICAgICAgcGVyZm9ybWVkQ2hhbmdlID0gcmVkb0l0ZW0odHJhbnNhY3Rpb24sIHN0cnVjdCwgaXRlbXNUb1JlZG8sIHN0YWNrSXRlbS5pbnNlcnRpb25zLCB1bmRvTWFuYWdlci5pZ25vcmVSZW1vdGVNYXBDaGFuZ2VzKSAhPT0gbnVsbCB8fCBwZXJmb3JtZWRDaGFuZ2U7XG4gICAgICB9KTtcbiAgICAgIC8vIFdlIHdhbnQgdG8gZGVsZXRlIGluIHJldmVyc2Ugb3JkZXIgc28gdGhhdCBjaGlsZHJlbiBhcmUgZGVsZXRlZCBiZWZvcmVcbiAgICAgIC8vIHBhcmVudHMsIHNvIHdlIGhhdmUgbW9yZSBpbmZvcm1hdGlvbiBhdmFpbGFibGUgd2hlbiBpdGVtcyBhcmUgZmlsdGVyZWQuXG4gICAgICBmb3IgKGxldCBpID0gaXRlbXNUb0RlbGV0ZS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICBjb25zdCBpdGVtID0gaXRlbXNUb0RlbGV0ZVtpXTtcbiAgICAgICAgaWYgKHVuZG9NYW5hZ2VyLmRlbGV0ZUZpbHRlcihpdGVtKSkge1xuICAgICAgICAgIGl0ZW0uZGVsZXRlKHRyYW5zYWN0aW9uKTtcbiAgICAgICAgICBwZXJmb3JtZWRDaGFuZ2UgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXN1bHQgPSBwZXJmb3JtZWRDaGFuZ2UgPyBzdGFja0l0ZW0gOiBudWxsO1xuICAgIH1cbiAgICB0cmFuc2FjdGlvbi5jaGFuZ2VkLmZvckVhY2goKHN1YlByb3BzLCB0eXBlKSA9PiB7XG4gICAgICAvLyBkZXN0cm95IHNlYXJjaCBtYXJrZXIgaWYgbmVjZXNzYXJ5XG4gICAgICBpZiAoc3ViUHJvcHMuaGFzKG51bGwpICYmIHR5cGUuX3NlYXJjaE1hcmtlcikge1xuICAgICAgICB0eXBlLl9zZWFyY2hNYXJrZXIubGVuZ3RoID0gMDtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBfdHIgPSB0cmFuc2FjdGlvbjtcbiAgfSwgdW5kb01hbmFnZXIpO1xuICBpZiAocmVzdWx0ICE9IG51bGwpIHtcbiAgICBjb25zdCBjaGFuZ2VkUGFyZW50VHlwZXMgPSBfdHIuY2hhbmdlZFBhcmVudFR5cGVzO1xuICAgIHVuZG9NYW5hZ2VyLmVtaXQoJ3N0YWNrLWl0ZW0tcG9wcGVkJywgW3sgc3RhY2tJdGVtOiByZXN1bHQsIHR5cGU6IGV2ZW50VHlwZSwgY2hhbmdlZFBhcmVudFR5cGVzIH0sIHVuZG9NYW5hZ2VyXSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdFxufTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBVbmRvTWFuYWdlck9wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbVW5kb01hbmFnZXJPcHRpb25zLmNhcHR1cmVUaW1lb3V0PTUwMF1cbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb24oVHJhbnNhY3Rpb24pOmJvb2xlYW59IFtVbmRvTWFuYWdlck9wdGlvbnMuY2FwdHVyZVRyYW5zYWN0aW9uXSBEbyBub3QgY2FwdHVyZSBjaGFuZ2VzIG9mIGEgVHJhbnNhY3Rpb24gaWYgcmVzdWx0IGZhbHNlLlxuICogQHByb3BlcnR5IHtmdW5jdGlvbihJdGVtKTpib29sZWFufSBbVW5kb01hbmFnZXJPcHRpb25zLmRlbGV0ZUZpbHRlcj0oKT0+dHJ1ZV0gU29tZXRpbWVzXG4gKiBpdCBpcyBuZWNlc3NhcnkgdG8gZmlsdGVyIHdoYW4gYW4gVW5kby9SZWRvIG9wZXJhdGlvbiBjYW4gZGVsZXRlLiBJZiB0aGlzXG4gKiBmaWx0ZXIgcmV0dXJucyBmYWxzZSwgdGhlIHR5cGUvaXRlbSB3b24ndCBiZSBkZWxldGVkIGV2ZW4gaXQgaXMgaW4gdGhlXG4gKiB1bmRvL3JlZG8gc2NvcGUuXG4gKiBAcHJvcGVydHkge1NldDxhbnk+fSBbVW5kb01hbmFnZXJPcHRpb25zLnRyYWNrZWRPcmlnaW5zPW5ldyBTZXQoW251bGxdKV1cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2lnbm9yZVJlbW90ZU1hcENoYW5nZXNdIEV4cGVyaW1lbnRhbC4gQnkgZGVmYXVsdCwgdGhlIFVuZG9NYW5hZ2VyIHdpbGwgbmV2ZXIgb3ZlcndyaXRlIHJlbW90ZSBjaGFuZ2VzLiBFbmFibGUgdGhpcyBwcm9wZXJ0eSB0byBlbmFibGUgb3ZlcndyaXRpbmcgcmVtb3RlIGNoYW5nZXMgb24ga2V5LXZhbHVlIGNoYW5nZXMgKFkuTWFwLCBwcm9wZXJ0aWVzIG9uIFkuWG1sLCBldGMuLikuXG4gKi9cblxuLyoqXG4gKiBGaXJlcyAnc3RhY2staXRlbS1hZGRlZCcgZXZlbnQgd2hlbiBhIHN0YWNrIGl0ZW0gd2FzIGFkZGVkIHRvIGVpdGhlciB0aGUgdW5kby0gb3JcbiAqIHRoZSByZWRvLXN0YWNrLiBZb3UgbWF5IHN0b3JlIGFkZGl0aW9uYWwgc3RhY2sgaW5mb3JtYXRpb24gdmlhIHRoZVxuICogbWV0YWRhdGEgcHJvcGVydHkgb24gYGV2ZW50LnN0YWNrSXRlbS5tZXRhYCAoaXQgaXMgYSBgTWFwYCBvZiBtZXRhZGF0YSBwcm9wZXJ0aWVzKS5cbiAqIEZpcmVzICdzdGFjay1pdGVtLXBvcHBlZCcgZXZlbnQgd2hlbiBhIHN0YWNrIGl0ZW0gd2FzIHBvcHBlZCBmcm9tIGVpdGhlciB0aGVcbiAqIHVuZG8tIG9yIHRoZSByZWRvLXN0YWNrLiBZb3UgbWF5IHJlc3RvcmUgdGhlIHNhdmVkIHN0YWNrIGluZm9ybWF0aW9uIGZyb20gYGV2ZW50LnN0YWNrSXRlbS5tZXRhYC5cbiAqXG4gKiBAZXh0ZW5kcyB7T2JzZXJ2YWJsZTwnc3RhY2staXRlbS1hZGRlZCd8J3N0YWNrLWl0ZW0tcG9wcGVkJ3wnc3RhY2stY2xlYXJlZCd8J3N0YWNrLWl0ZW0tdXBkYXRlZCc+fVxuICovXG5jbGFzcyBVbmRvTWFuYWdlciBleHRlbmRzIE9ic2VydmFibGUge1xuICAvKipcbiAgICogQHBhcmFtIHtBYnN0cmFjdFR5cGU8YW55PnxBcnJheTxBYnN0cmFjdFR5cGU8YW55Pj59IHR5cGVTY29wZSBBY2NlcHRzIGVpdGhlciBhIHNpbmdsZSB0eXBlLCBvciBhbiBhcnJheSBvZiB0eXBlc1xuICAgKiBAcGFyYW0ge1VuZG9NYW5hZ2VyT3B0aW9uc30gb3B0aW9uc1xuICAgKi9cbiAgY29uc3RydWN0b3IgKHR5cGVTY29wZSwge1xuICAgIGNhcHR1cmVUaW1lb3V0ID0gNTAwLFxuICAgIGNhcHR1cmVUcmFuc2FjdGlvbiA9IHRyID0+IHRydWUsXG4gICAgZGVsZXRlRmlsdGVyID0gKCkgPT4gdHJ1ZSxcbiAgICB0cmFja2VkT3JpZ2lucyA9IG5ldyBTZXQoW251bGxdKSxcbiAgICBpZ25vcmVSZW1vdGVNYXBDaGFuZ2VzID0gZmFsc2VcbiAgfSA9IHt9KSB7XG4gICAgc3VwZXIoKTtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7QXJyYXk8QWJzdHJhY3RUeXBlPGFueT4+fVxuICAgICAqL1xuICAgIHRoaXMuc2NvcGUgPSBbXTtcbiAgICB0aGlzLmFkZFRvU2NvcGUodHlwZVNjb3BlKTtcbiAgICB0aGlzLmRlbGV0ZUZpbHRlciA9IGRlbGV0ZUZpbHRlcjtcbiAgICB0cmFja2VkT3JpZ2lucy5hZGQodGhpcyk7XG4gICAgdGhpcy50cmFja2VkT3JpZ2lucyA9IHRyYWNrZWRPcmlnaW5zO1xuICAgIHRoaXMuY2FwdHVyZVRyYW5zYWN0aW9uID0gY2FwdHVyZVRyYW5zYWN0aW9uO1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtBcnJheTxTdGFja0l0ZW0+fVxuICAgICAqL1xuICAgIHRoaXMudW5kb1N0YWNrID0gW107XG4gICAgLyoqXG4gICAgICogQHR5cGUge0FycmF5PFN0YWNrSXRlbT59XG4gICAgICovXG4gICAgdGhpcy5yZWRvU3RhY2sgPSBbXTtcbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRoZSBjbGllbnQgaXMgY3VycmVudGx5IHVuZG9pbmcgKGNhbGxpbmcgVW5kb01hbmFnZXIudW5kbylcbiAgICAgKlxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIHRoaXMudW5kb2luZyA9IGZhbHNlO1xuICAgIHRoaXMucmVkb2luZyA9IGZhbHNlO1xuICAgIHRoaXMuZG9jID0gLyoqIEB0eXBlIHtEb2N9ICovICh0aGlzLnNjb3BlWzBdLmRvYyk7XG4gICAgdGhpcy5sYXN0Q2hhbmdlID0gMDtcbiAgICB0aGlzLmlnbm9yZVJlbW90ZU1hcENoYW5nZXMgPSBpZ25vcmVSZW1vdGVNYXBDaGFuZ2VzO1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAgICovXG4gICAgdGhpcy5hZnRlclRyYW5zYWN0aW9uSGFuZGxlciA9IHRyYW5zYWN0aW9uID0+IHtcbiAgICAgIC8vIE9ubHkgdHJhY2sgY2VydGFpbiB0cmFuc2FjdGlvbnNcbiAgICAgIGlmIChcbiAgICAgICAgIXRoaXMuY2FwdHVyZVRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uKSB8fFxuICAgICAgICAhdGhpcy5zY29wZS5zb21lKHR5cGUgPT4gdHJhbnNhY3Rpb24uY2hhbmdlZFBhcmVudFR5cGVzLmhhcyh0eXBlKSkgfHxcbiAgICAgICAgKCF0aGlzLnRyYWNrZWRPcmlnaW5zLmhhcyh0cmFuc2FjdGlvbi5vcmlnaW4pICYmICghdHJhbnNhY3Rpb24ub3JpZ2luIHx8ICF0aGlzLnRyYWNrZWRPcmlnaW5zLmhhcyh0cmFuc2FjdGlvbi5vcmlnaW4uY29uc3RydWN0b3IpKSlcbiAgICAgICkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIGNvbnN0IHVuZG9pbmcgPSB0aGlzLnVuZG9pbmc7XG4gICAgICBjb25zdCByZWRvaW5nID0gdGhpcy5yZWRvaW5nO1xuICAgICAgY29uc3Qgc3RhY2sgPSB1bmRvaW5nID8gdGhpcy5yZWRvU3RhY2sgOiB0aGlzLnVuZG9TdGFjaztcbiAgICAgIGlmICh1bmRvaW5nKSB7XG4gICAgICAgIHRoaXMuc3RvcENhcHR1cmluZygpOyAvLyBuZXh0IHVuZG8gc2hvdWxkIG5vdCBiZSBhcHBlbmRlZCB0byBsYXN0IHN0YWNrIGl0ZW1cbiAgICAgIH0gZWxzZSBpZiAoIXJlZG9pbmcpIHtcbiAgICAgICAgLy8gbmVpdGhlciB1bmRvaW5nIG5vciByZWRvaW5nOiBkZWxldGUgcmVkb1N0YWNrXG4gICAgICAgIHRoaXMuY2xlYXIoZmFsc2UsIHRydWUpO1xuICAgICAgfVxuICAgICAgY29uc3QgaW5zZXJ0aW9ucyA9IG5ldyBEZWxldGVTZXQoKTtcbiAgICAgIHRyYW5zYWN0aW9uLmFmdGVyU3RhdGUuZm9yRWFjaCgoZW5kQ2xvY2ssIGNsaWVudCkgPT4ge1xuICAgICAgICBjb25zdCBzdGFydENsb2NrID0gdHJhbnNhY3Rpb24uYmVmb3JlU3RhdGUuZ2V0KGNsaWVudCkgfHwgMDtcbiAgICAgICAgY29uc3QgbGVuID0gZW5kQ2xvY2sgLSBzdGFydENsb2NrO1xuICAgICAgICBpZiAobGVuID4gMCkge1xuICAgICAgICAgIGFkZFRvRGVsZXRlU2V0KGluc2VydGlvbnMsIGNsaWVudCwgc3RhcnRDbG9jaywgbGVuKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBjb25zdCBub3cgPSB0aW1lLmdldFVuaXhUaW1lKCk7XG4gICAgICBsZXQgZGlkQWRkID0gZmFsc2U7XG4gICAgICBpZiAobm93IC0gdGhpcy5sYXN0Q2hhbmdlIDwgY2FwdHVyZVRpbWVvdXQgJiYgc3RhY2subGVuZ3RoID4gMCAmJiAhdW5kb2luZyAmJiAhcmVkb2luZykge1xuICAgICAgICAvLyBhcHBlbmQgY2hhbmdlIHRvIGxhc3Qgc3RhY2sgb3BcbiAgICAgICAgY29uc3QgbGFzdE9wID0gc3RhY2tbc3RhY2subGVuZ3RoIC0gMV07XG4gICAgICAgIGxhc3RPcC5kZWxldGlvbnMgPSBtZXJnZURlbGV0ZVNldHMoW2xhc3RPcC5kZWxldGlvbnMsIHRyYW5zYWN0aW9uLmRlbGV0ZVNldF0pO1xuICAgICAgICBsYXN0T3AuaW5zZXJ0aW9ucyA9IG1lcmdlRGVsZXRlU2V0cyhbbGFzdE9wLmluc2VydGlvbnMsIGluc2VydGlvbnNdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGNyZWF0ZSBhIG5ldyBzdGFjayBvcFxuICAgICAgICBzdGFjay5wdXNoKG5ldyBTdGFja0l0ZW0odHJhbnNhY3Rpb24uZGVsZXRlU2V0LCBpbnNlcnRpb25zKSk7XG4gICAgICAgIGRpZEFkZCA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoIXVuZG9pbmcgJiYgIXJlZG9pbmcpIHtcbiAgICAgICAgdGhpcy5sYXN0Q2hhbmdlID0gbm93O1xuICAgICAgfVxuICAgICAgLy8gbWFrZSBzdXJlIHRoYXQgZGVsZXRlZCBzdHJ1Y3RzIGFyZSBub3QgZ2MnZFxuICAgICAgaXRlcmF0ZURlbGV0ZWRTdHJ1Y3RzKHRyYW5zYWN0aW9uLCB0cmFuc2FjdGlvbi5kZWxldGVTZXQsIC8qKiBAcGFyYW0ge0l0ZW18R0N9IGl0ZW0gKi8gaXRlbSA9PiB7XG4gICAgICAgIGlmIChpdGVtIGluc3RhbmNlb2YgSXRlbSAmJiB0aGlzLnNjb3BlLnNvbWUodHlwZSA9PiBpc1BhcmVudE9mKHR5cGUsIGl0ZW0pKSkge1xuICAgICAgICAgIGtlZXBJdGVtKGl0ZW0sIHRydWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGNvbnN0IGNoYW5nZUV2ZW50ID0gW3sgc3RhY2tJdGVtOiBzdGFja1tzdGFjay5sZW5ndGggLSAxXSwgb3JpZ2luOiB0cmFuc2FjdGlvbi5vcmlnaW4sIHR5cGU6IHVuZG9pbmcgPyAncmVkbycgOiAndW5kbycsIGNoYW5nZWRQYXJlbnRUeXBlczogdHJhbnNhY3Rpb24uY2hhbmdlZFBhcmVudFR5cGVzIH0sIHRoaXNdO1xuICAgICAgaWYgKGRpZEFkZCkge1xuICAgICAgICB0aGlzLmVtaXQoJ3N0YWNrLWl0ZW0tYWRkZWQnLCBjaGFuZ2VFdmVudCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmVtaXQoJ3N0YWNrLWl0ZW0tdXBkYXRlZCcsIGNoYW5nZUV2ZW50KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHRoaXMuZG9jLm9uKCdhZnRlclRyYW5zYWN0aW9uJywgdGhpcy5hZnRlclRyYW5zYWN0aW9uSGFuZGxlcik7XG4gICAgdGhpcy5kb2Mub24oJ2Rlc3Ryb3knLCAoKSA9PiB7XG4gICAgICB0aGlzLmRlc3Ryb3koKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0FycmF5PEFic3RyYWN0VHlwZTxhbnk+PiB8IEFic3RyYWN0VHlwZTxhbnk+fSB5dHlwZXNcbiAgICovXG4gIGFkZFRvU2NvcGUgKHl0eXBlcykge1xuICAgIHl0eXBlcyA9IGFycmF5LmlzQXJyYXkoeXR5cGVzKSA/IHl0eXBlcyA6IFt5dHlwZXNdO1xuICAgIHl0eXBlcy5mb3JFYWNoKHl0eXBlID0+IHtcbiAgICAgIGlmICh0aGlzLnNjb3BlLmV2ZXJ5KHl0ID0+IHl0ICE9PSB5dHlwZSkpIHtcbiAgICAgICAgdGhpcy5zY29wZS5wdXNoKHl0eXBlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge2FueX0gb3JpZ2luXG4gICAqL1xuICBhZGRUcmFja2VkT3JpZ2luIChvcmlnaW4pIHtcbiAgICB0aGlzLnRyYWNrZWRPcmlnaW5zLmFkZChvcmlnaW4pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7YW55fSBvcmlnaW5cbiAgICovXG4gIHJlbW92ZVRyYWNrZWRPcmlnaW4gKG9yaWdpbikge1xuICAgIHRoaXMudHJhY2tlZE9yaWdpbnMuZGVsZXRlKG9yaWdpbik7XG4gIH1cblxuICBjbGVhciAoY2xlYXJVbmRvU3RhY2sgPSB0cnVlLCBjbGVhclJlZG9TdGFjayA9IHRydWUpIHtcbiAgICBpZiAoKGNsZWFyVW5kb1N0YWNrICYmIHRoaXMuY2FuVW5kbygpKSB8fCAoY2xlYXJSZWRvU3RhY2sgJiYgdGhpcy5jYW5SZWRvKCkpKSB7XG4gICAgICB0aGlzLmRvYy50cmFuc2FjdCh0ciA9PiB7XG4gICAgICAgIGlmIChjbGVhclVuZG9TdGFjaykge1xuICAgICAgICAgIHRoaXMudW5kb1N0YWNrLmZvckVhY2goaXRlbSA9PiBjbGVhclVuZG9NYW5hZ2VyU3RhY2tJdGVtKHRyLCB0aGlzLCBpdGVtKSk7XG4gICAgICAgICAgdGhpcy51bmRvU3RhY2sgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2xlYXJSZWRvU3RhY2spIHtcbiAgICAgICAgICB0aGlzLnJlZG9TdGFjay5mb3JFYWNoKGl0ZW0gPT4gY2xlYXJVbmRvTWFuYWdlclN0YWNrSXRlbSh0ciwgdGhpcywgaXRlbSkpO1xuICAgICAgICAgIHRoaXMucmVkb1N0YWNrID0gW107XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lbWl0KCdzdGFjay1jbGVhcmVkJywgW3sgdW5kb1N0YWNrQ2xlYXJlZDogY2xlYXJVbmRvU3RhY2ssIHJlZG9TdGFja0NsZWFyZWQ6IGNsZWFyUmVkb1N0YWNrIH1dKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBVbmRvTWFuYWdlciBtZXJnZXMgVW5kby1TdGFja0l0ZW0gaWYgdGhleSBhcmUgY3JlYXRlZCB3aXRoaW4gdGltZS1nYXBcbiAgICogc21hbGxlciB0aGFuIGBvcHRpb25zLmNhcHR1cmVUaW1lb3V0YC4gQ2FsbCBgdW0uc3RvcENhcHR1cmluZygpYCBzbyB0aGF0IHRoZSBuZXh0XG4gICAqIFN0YWNrSXRlbSB3b24ndCBiZSBtZXJnZWQuXG4gICAqXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqICAgICAvLyB3aXRob3V0IHN0b3BDYXB0dXJpbmdcbiAgICogICAgIHl0ZXh0Lmluc2VydCgwLCAnYScpXG4gICAqICAgICB5dGV4dC5pbnNlcnQoMSwgJ2InKVxuICAgKiAgICAgdW0udW5kbygpXG4gICAqICAgICB5dGV4dC50b1N0cmluZygpIC8vID0+ICcnIChub3RlIHRoYXQgJ2FiJyB3YXMgcmVtb3ZlZClcbiAgICogICAgIC8vIHdpdGggc3RvcENhcHR1cmluZ1xuICAgKiAgICAgeXRleHQuaW5zZXJ0KDAsICdhJylcbiAgICogICAgIHVtLnN0b3BDYXB0dXJpbmcoKVxuICAgKiAgICAgeXRleHQuaW5zZXJ0KDAsICdiJylcbiAgICogICAgIHVtLnVuZG8oKVxuICAgKiAgICAgeXRleHQudG9TdHJpbmcoKSAvLyA9PiAnYScgKG5vdGUgdGhhdCBvbmx5ICdiJyB3YXMgcmVtb3ZlZClcbiAgICpcbiAgICovXG4gIHN0b3BDYXB0dXJpbmcgKCkge1xuICAgIHRoaXMubGFzdENoYW5nZSA9IDA7XG4gIH1cblxuICAvKipcbiAgICogVW5kbyBsYXN0IGNoYW5nZXMgb24gdHlwZS5cbiAgICpcbiAgICogQHJldHVybiB7U3RhY2tJdGVtP30gUmV0dXJucyBTdGFja0l0ZW0gaWYgYSBjaGFuZ2Ugd2FzIGFwcGxpZWRcbiAgICovXG4gIHVuZG8gKCkge1xuICAgIHRoaXMudW5kb2luZyA9IHRydWU7XG4gICAgbGV0IHJlcztcbiAgICB0cnkge1xuICAgICAgcmVzID0gcG9wU3RhY2tJdGVtKHRoaXMsIHRoaXMudW5kb1N0YWNrLCAndW5kbycpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICB0aGlzLnVuZG9pbmcgPSBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc1xuICB9XG5cbiAgLyoqXG4gICAqIFJlZG8gbGFzdCB1bmRvIG9wZXJhdGlvbi5cbiAgICpcbiAgICogQHJldHVybiB7U3RhY2tJdGVtP30gUmV0dXJucyBTdGFja0l0ZW0gaWYgYSBjaGFuZ2Ugd2FzIGFwcGxpZWRcbiAgICovXG4gIHJlZG8gKCkge1xuICAgIHRoaXMucmVkb2luZyA9IHRydWU7XG4gICAgbGV0IHJlcztcbiAgICB0cnkge1xuICAgICAgcmVzID0gcG9wU3RhY2tJdGVtKHRoaXMsIHRoaXMucmVkb1N0YWNrLCAncmVkbycpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICB0aGlzLnJlZG9pbmcgPSBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc1xuICB9XG5cbiAgLyoqXG4gICAqIEFyZSB1bmRvIHN0ZXBzIGF2YWlsYWJsZT9cbiAgICpcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gYHRydWVgIGlmIHVuZG8gaXMgcG9zc2libGVcbiAgICovXG4gIGNhblVuZG8gKCkge1xuICAgIHJldHVybiB0aGlzLnVuZG9TdGFjay5sZW5ndGggPiAwXG4gIH1cblxuICAvKipcbiAgICogQXJlIHJlZG8gc3RlcHMgYXZhaWxhYmxlP1xuICAgKlxuICAgKiBAcmV0dXJuIHtib29sZWFufSBgdHJ1ZWAgaWYgcmVkbyBpcyBwb3NzaWJsZVxuICAgKi9cbiAgY2FuUmVkbyAoKSB7XG4gICAgcmV0dXJuIHRoaXMucmVkb1N0YWNrLmxlbmd0aCA+IDBcbiAgfVxuXG4gIGRlc3Ryb3kgKCkge1xuICAgIHRoaXMudHJhY2tlZE9yaWdpbnMuZGVsZXRlKHRoaXMpO1xuICAgIHRoaXMuZG9jLm9mZignYWZ0ZXJUcmFuc2FjdGlvbicsIHRoaXMuYWZ0ZXJUcmFuc2FjdGlvbkhhbmRsZXIpO1xuICAgIHN1cGVyLmRlc3Ryb3koKTtcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7VXBkYXRlRGVjb2RlclYxIHwgVXBkYXRlRGVjb2RlclYyfSBkZWNvZGVyXG4gKi9cbmZ1bmN0aW9uICogbGF6eVN0cnVjdFJlYWRlckdlbmVyYXRvciAoZGVjb2Rlcikge1xuICBjb25zdCBudW1PZlN0YXRlVXBkYXRlcyA9IGRlY29kaW5nLnJlYWRWYXJVaW50KGRlY29kZXIucmVzdERlY29kZXIpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IG51bU9mU3RhdGVVcGRhdGVzOyBpKyspIHtcbiAgICBjb25zdCBudW1iZXJPZlN0cnVjdHMgPSBkZWNvZGluZy5yZWFkVmFyVWludChkZWNvZGVyLnJlc3REZWNvZGVyKTtcbiAgICBjb25zdCBjbGllbnQgPSBkZWNvZGVyLnJlYWRDbGllbnQoKTtcbiAgICBsZXQgY2xvY2sgPSBkZWNvZGluZy5yZWFkVmFyVWludChkZWNvZGVyLnJlc3REZWNvZGVyKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bWJlck9mU3RydWN0czsgaSsrKSB7XG4gICAgICBjb25zdCBpbmZvID0gZGVjb2Rlci5yZWFkSW5mbygpO1xuICAgICAgLy8gQHRvZG8gdXNlIHN3aXRjaCBpbnN0ZWFkIG9mIGlmc1xuICAgICAgaWYgKGluZm8gPT09IDEwKSB7XG4gICAgICAgIGNvbnN0IGxlbiA9IGRlY29kaW5nLnJlYWRWYXJVaW50KGRlY29kZXIucmVzdERlY29kZXIpO1xuICAgICAgICB5aWVsZCBuZXcgU2tpcChjcmVhdGVJRChjbGllbnQsIGNsb2NrKSwgbGVuKTtcbiAgICAgICAgY2xvY2sgKz0gbGVuO1xuICAgICAgfSBlbHNlIGlmICgoYmluYXJ5LkJJVFM1ICYgaW5mbykgIT09IDApIHtcbiAgICAgICAgY29uc3QgY2FudENvcHlQYXJlbnRJbmZvID0gKGluZm8gJiAoYmluYXJ5LkJJVDcgfCBiaW5hcnkuQklUOCkpID09PSAwO1xuICAgICAgICAvLyBJZiBwYXJlbnQgPSBudWxsIGFuZCBuZWl0aGVyIGxlZnQgbm9yIHJpZ2h0IGFyZSBkZWZpbmVkLCB0aGVuIHdlIGtub3cgdGhhdCBgcGFyZW50YCBpcyBjaGlsZCBvZiBgeWBcbiAgICAgICAgLy8gYW5kIHdlIHJlYWQgdGhlIG5leHQgc3RyaW5nIGFzIHBhcmVudFlLZXkuXG4gICAgICAgIC8vIEl0IGluZGljYXRlcyBob3cgd2Ugc3RvcmUvcmV0cmlldmUgcGFyZW50IGZyb20gYHkuc2hhcmVgXG4gICAgICAgIC8vIEB0eXBlIHtzdHJpbmd8bnVsbH1cbiAgICAgICAgY29uc3Qgc3RydWN0ID0gbmV3IEl0ZW0oXG4gICAgICAgICAgY3JlYXRlSUQoY2xpZW50LCBjbG9jayksXG4gICAgICAgICAgbnVsbCwgLy8gbGVmdFxuICAgICAgICAgIChpbmZvICYgYmluYXJ5LkJJVDgpID09PSBiaW5hcnkuQklUOCA/IGRlY29kZXIucmVhZExlZnRJRCgpIDogbnVsbCwgLy8gb3JpZ2luXG4gICAgICAgICAgbnVsbCwgLy8gcmlnaHRcbiAgICAgICAgICAoaW5mbyAmIGJpbmFyeS5CSVQ3KSA9PT0gYmluYXJ5LkJJVDcgPyBkZWNvZGVyLnJlYWRSaWdodElEKCkgOiBudWxsLCAvLyByaWdodCBvcmlnaW5cbiAgICAgICAgICAvLyBAdHMtaWdub3JlIEZvcmNlIHdyaXRpbmcgYSBzdHJpbmcgaGVyZS5cbiAgICAgICAgICBjYW50Q29weVBhcmVudEluZm8gPyAoZGVjb2Rlci5yZWFkUGFyZW50SW5mbygpID8gZGVjb2Rlci5yZWFkU3RyaW5nKCkgOiBkZWNvZGVyLnJlYWRMZWZ0SUQoKSkgOiBudWxsLCAvLyBwYXJlbnRcbiAgICAgICAgICBjYW50Q29weVBhcmVudEluZm8gJiYgKGluZm8gJiBiaW5hcnkuQklUNikgPT09IGJpbmFyeS5CSVQ2ID8gZGVjb2Rlci5yZWFkU3RyaW5nKCkgOiBudWxsLCAvLyBwYXJlbnRTdWJcbiAgICAgICAgICByZWFkSXRlbUNvbnRlbnQoZGVjb2RlciwgaW5mbykgLy8gaXRlbSBjb250ZW50XG4gICAgICAgICk7XG4gICAgICAgIHlpZWxkIHN0cnVjdDtcbiAgICAgICAgY2xvY2sgKz0gc3RydWN0Lmxlbmd0aDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGxlbiA9IGRlY29kZXIucmVhZExlbigpO1xuICAgICAgICB5aWVsZCBuZXcgR0MoY3JlYXRlSUQoY2xpZW50LCBjbG9jayksIGxlbik7XG4gICAgICAgIGNsb2NrICs9IGxlbjtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuY2xhc3MgTGF6eVN0cnVjdFJlYWRlciB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge1VwZGF0ZURlY29kZXJWMSB8IFVwZGF0ZURlY29kZXJWMn0gZGVjb2RlclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGZpbHRlclNraXBzXG4gICAqL1xuICBjb25zdHJ1Y3RvciAoZGVjb2RlciwgZmlsdGVyU2tpcHMpIHtcbiAgICB0aGlzLmdlbiA9IGxhenlTdHJ1Y3RSZWFkZXJHZW5lcmF0b3IoZGVjb2Rlcik7XG4gICAgLyoqXG4gICAgICogQHR5cGUge251bGwgfCBJdGVtIHwgU2tpcCB8IEdDfVxuICAgICAqL1xuICAgIHRoaXMuY3VyciA9IG51bGw7XG4gICAgdGhpcy5kb25lID0gZmFsc2U7XG4gICAgdGhpcy5maWx0ZXJTa2lwcyA9IGZpbHRlclNraXBzO1xuICAgIHRoaXMubmV4dCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge0l0ZW0gfCBHQyB8IFNraXAgfG51bGx9XG4gICAqL1xuICBuZXh0ICgpIHtcbiAgICAvLyBpZ25vcmUgXCJTa2lwXCIgc3RydWN0c1xuICAgIGRvIHtcbiAgICAgIHRoaXMuY3VyciA9IHRoaXMuZ2VuLm5leHQoKS52YWx1ZSB8fCBudWxsO1xuICAgIH0gd2hpbGUgKHRoaXMuZmlsdGVyU2tpcHMgJiYgdGhpcy5jdXJyICE9PSBudWxsICYmIHRoaXMuY3Vyci5jb25zdHJ1Y3RvciA9PT0gU2tpcClcbiAgICByZXR1cm4gdGhpcy5jdXJyXG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IHVwZGF0ZVxuICpcbiAqL1xuY29uc3QgbG9nVXBkYXRlID0gdXBkYXRlID0+IGxvZ1VwZGF0ZVYyKHVwZGF0ZSwgVXBkYXRlRGVjb2RlclYxKTtcblxuLyoqXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IHVwZGF0ZVxuICogQHBhcmFtIHt0eXBlb2YgVXBkYXRlRGVjb2RlclYyIHwgdHlwZW9mIFVwZGF0ZURlY29kZXJWMX0gW1lEZWNvZGVyXVxuICpcbiAqL1xuY29uc3QgbG9nVXBkYXRlVjIgPSAodXBkYXRlLCBZRGVjb2RlciA9IFVwZGF0ZURlY29kZXJWMikgPT4ge1xuICBjb25zdCBzdHJ1Y3RzID0gW107XG4gIGNvbnN0IHVwZGF0ZURlY29kZXIgPSBuZXcgWURlY29kZXIoZGVjb2RpbmcuY3JlYXRlRGVjb2Rlcih1cGRhdGUpKTtcbiAgY29uc3QgbGF6eURlY29kZXIgPSBuZXcgTGF6eVN0cnVjdFJlYWRlcih1cGRhdGVEZWNvZGVyLCBmYWxzZSk7XG4gIGZvciAobGV0IGN1cnIgPSBsYXp5RGVjb2Rlci5jdXJyOyBjdXJyICE9PSBudWxsOyBjdXJyID0gbGF6eURlY29kZXIubmV4dCgpKSB7XG4gICAgc3RydWN0cy5wdXNoKGN1cnIpO1xuICB9XG4gIGxvZ2dpbmcucHJpbnQoJ1N0cnVjdHM6ICcsIHN0cnVjdHMpO1xuICBjb25zdCBkcyA9IHJlYWREZWxldGVTZXQodXBkYXRlRGVjb2Rlcik7XG4gIGxvZ2dpbmcucHJpbnQoJ0RlbGV0ZVNldDogJywgZHMpO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IHVwZGF0ZVxuICpcbiAqL1xuY29uc3QgZGVjb2RlVXBkYXRlID0gKHVwZGF0ZSkgPT4gZGVjb2RlVXBkYXRlVjIodXBkYXRlLCBVcGRhdGVEZWNvZGVyVjEpO1xuXG4vKipcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gdXBkYXRlXG4gKiBAcGFyYW0ge3R5cGVvZiBVcGRhdGVEZWNvZGVyVjIgfCB0eXBlb2YgVXBkYXRlRGVjb2RlclYxfSBbWURlY29kZXJdXG4gKlxuICovXG5jb25zdCBkZWNvZGVVcGRhdGVWMiA9ICh1cGRhdGUsIFlEZWNvZGVyID0gVXBkYXRlRGVjb2RlclYyKSA9PiB7XG4gIGNvbnN0IHN0cnVjdHMgPSBbXTtcbiAgY29uc3QgdXBkYXRlRGVjb2RlciA9IG5ldyBZRGVjb2RlcihkZWNvZGluZy5jcmVhdGVEZWNvZGVyKHVwZGF0ZSkpO1xuICBjb25zdCBsYXp5RGVjb2RlciA9IG5ldyBMYXp5U3RydWN0UmVhZGVyKHVwZGF0ZURlY29kZXIsIGZhbHNlKTtcbiAgZm9yIChsZXQgY3VyciA9IGxhenlEZWNvZGVyLmN1cnI7IGN1cnIgIT09IG51bGw7IGN1cnIgPSBsYXp5RGVjb2Rlci5uZXh0KCkpIHtcbiAgICBzdHJ1Y3RzLnB1c2goY3Vycik7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBzdHJ1Y3RzLFxuICAgIGRzOiByZWFkRGVsZXRlU2V0KHVwZGF0ZURlY29kZXIpXG4gIH1cbn07XG5cbmNsYXNzIExhenlTdHJ1Y3RXcml0ZXIge1xuICAvKipcbiAgICogQHBhcmFtIHtVcGRhdGVFbmNvZGVyVjEgfCBVcGRhdGVFbmNvZGVyVjJ9IGVuY29kZXJcbiAgICovXG4gIGNvbnN0cnVjdG9yIChlbmNvZGVyKSB7XG4gICAgdGhpcy5jdXJyQ2xpZW50ID0gMDtcbiAgICB0aGlzLnN0YXJ0Q2xvY2sgPSAwO1xuICAgIHRoaXMud3JpdHRlbiA9IDA7XG4gICAgdGhpcy5lbmNvZGVyID0gZW5jb2RlcjtcbiAgICAvKipcbiAgICAgKiBXZSB3YW50IHRvIHdyaXRlIG9wZXJhdGlvbnMgbGF6aWx5LCBidXQgYWxzbyB3ZSBuZWVkIHRvIGtub3cgYmVmb3JlaGFuZCBob3cgbWFueSBvcGVyYXRpb25zIHdlIHdhbnQgdG8gd3JpdGUgZm9yIGVhY2ggY2xpZW50LlxuICAgICAqXG4gICAgICogVGhpcyBraW5kIG9mIG1ldGEtaW5mb3JtYXRpb24gKCNjbGllbnRzLCAjc3RydWN0cy1wZXItY2xpZW50LXdyaXR0ZW4pIGlzIHdyaXR0ZW4gdG8gdGhlIHJlc3RFbmNvZGVyLlxuICAgICAqXG4gICAgICogV2UgZnJhZ21lbnQgdGhlIHJlc3RFbmNvZGVyIGFuZCBzdG9yZSBhIHNsaWNlIG9mIGl0IHBlci1jbGllbnQgdW50aWwgd2Uga25vdyBob3cgbWFueSBjbGllbnRzIHRoZXJlIGFyZS5cbiAgICAgKiBXaGVuIHdlIGZsdXNoICh0b1VpbnQ4QXJyYXkpIHdlIHdyaXRlIHRoZSByZXN0RW5jb2RlciB1c2luZyB0aGUgZnJhZ21lbnRzIGFuZCB0aGUgbWV0YS1pbmZvcm1hdGlvbi5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtBcnJheTx7IHdyaXR0ZW46IG51bWJlciwgcmVzdEVuY29kZXI6IFVpbnQ4QXJyYXkgfT59XG4gICAgICovXG4gICAgdGhpcy5jbGllbnRTdHJ1Y3RzID0gW107XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge0FycmF5PFVpbnQ4QXJyYXk+fSB1cGRhdGVzXG4gKiBAcmV0dXJuIHtVaW50OEFycmF5fVxuICovXG5jb25zdCBtZXJnZVVwZGF0ZXMgPSB1cGRhdGVzID0+IG1lcmdlVXBkYXRlc1YyKHVwZGF0ZXMsIFVwZGF0ZURlY29kZXJWMSwgVXBkYXRlRW5jb2RlclYxKTtcblxuLyoqXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IHVwZGF0ZVxuICogQHBhcmFtIHt0eXBlb2YgRFNFbmNvZGVyVjEgfCB0eXBlb2YgRFNFbmNvZGVyVjJ9IFlFbmNvZGVyXG4gKiBAcGFyYW0ge3R5cGVvZiBVcGRhdGVEZWNvZGVyVjEgfCB0eXBlb2YgVXBkYXRlRGVjb2RlclYyfSBZRGVjb2RlclxuICogQHJldHVybiB7VWludDhBcnJheX1cbiAqL1xuY29uc3QgZW5jb2RlU3RhdGVWZWN0b3JGcm9tVXBkYXRlVjIgPSAodXBkYXRlLCBZRW5jb2RlciA9IERTRW5jb2RlclYyLCBZRGVjb2RlciA9IFVwZGF0ZURlY29kZXJWMikgPT4ge1xuICBjb25zdCBlbmNvZGVyID0gbmV3IFlFbmNvZGVyKCk7XG4gIGNvbnN0IHVwZGF0ZURlY29kZXIgPSBuZXcgTGF6eVN0cnVjdFJlYWRlcihuZXcgWURlY29kZXIoZGVjb2RpbmcuY3JlYXRlRGVjb2Rlcih1cGRhdGUpKSwgZmFsc2UpO1xuICBsZXQgY3VyciA9IHVwZGF0ZURlY29kZXIuY3VycjtcbiAgaWYgKGN1cnIgIT09IG51bGwpIHtcbiAgICBsZXQgc2l6ZSA9IDA7XG4gICAgbGV0IGN1cnJDbGllbnQgPSBjdXJyLmlkLmNsaWVudDtcbiAgICBsZXQgc3RvcENvdW50aW5nID0gY3Vyci5pZC5jbG9jayAhPT0gMDsgLy8gbXVzdCBzdGFydCBhdCAwXG4gICAgbGV0IGN1cnJDbG9jayA9IHN0b3BDb3VudGluZyA/IDAgOiBjdXJyLmlkLmNsb2NrICsgY3Vyci5sZW5ndGg7XG4gICAgZm9yICg7IGN1cnIgIT09IG51bGw7IGN1cnIgPSB1cGRhdGVEZWNvZGVyLm5leHQoKSkge1xuICAgICAgaWYgKGN1cnJDbGllbnQgIT09IGN1cnIuaWQuY2xpZW50KSB7XG4gICAgICAgIGlmIChjdXJyQ2xvY2sgIT09IDApIHtcbiAgICAgICAgICBzaXplKys7XG4gICAgICAgICAgLy8gV2UgZm91bmQgYSBuZXcgY2xpZW50XG4gICAgICAgICAgLy8gd3JpdGUgd2hhdCB3ZSBoYXZlIHRvIHRoZSBlbmNvZGVyXG4gICAgICAgICAgZW5jb2Rpbmcud3JpdGVWYXJVaW50KGVuY29kZXIucmVzdEVuY29kZXIsIGN1cnJDbGllbnQpO1xuICAgICAgICAgIGVuY29kaW5nLndyaXRlVmFyVWludChlbmNvZGVyLnJlc3RFbmNvZGVyLCBjdXJyQ2xvY2spO1xuICAgICAgICB9XG4gICAgICAgIGN1cnJDbGllbnQgPSBjdXJyLmlkLmNsaWVudDtcbiAgICAgICAgY3VyckNsb2NrID0gMDtcbiAgICAgICAgc3RvcENvdW50aW5nID0gY3Vyci5pZC5jbG9jayAhPT0gMDtcbiAgICAgIH1cbiAgICAgIC8vIHdlIGlnbm9yZSBza2lwc1xuICAgICAgaWYgKGN1cnIuY29uc3RydWN0b3IgPT09IFNraXApIHtcbiAgICAgICAgc3RvcENvdW50aW5nID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmICghc3RvcENvdW50aW5nKSB7XG4gICAgICAgIGN1cnJDbG9jayA9IGN1cnIuaWQuY2xvY2sgKyBjdXJyLmxlbmd0aDtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gd3JpdGUgd2hhdCB3ZSBoYXZlXG4gICAgaWYgKGN1cnJDbG9jayAhPT0gMCkge1xuICAgICAgc2l6ZSsrO1xuICAgICAgZW5jb2Rpbmcud3JpdGVWYXJVaW50KGVuY29kZXIucmVzdEVuY29kZXIsIGN1cnJDbGllbnQpO1xuICAgICAgZW5jb2Rpbmcud3JpdGVWYXJVaW50KGVuY29kZXIucmVzdEVuY29kZXIsIGN1cnJDbG9jayk7XG4gICAgfVxuICAgIC8vIHByZXBlbmQgdGhlIHNpemUgb2YgdGhlIHN0YXRlIHZlY3RvclxuICAgIGNvbnN0IGVuYyA9IGVuY29kaW5nLmNyZWF0ZUVuY29kZXIoKTtcbiAgICBlbmNvZGluZy53cml0ZVZhclVpbnQoZW5jLCBzaXplKTtcbiAgICBlbmNvZGluZy53cml0ZUJpbmFyeUVuY29kZXIoZW5jLCBlbmNvZGVyLnJlc3RFbmNvZGVyKTtcbiAgICBlbmNvZGVyLnJlc3RFbmNvZGVyID0gZW5jO1xuICAgIHJldHVybiBlbmNvZGVyLnRvVWludDhBcnJheSgpXG4gIH0gZWxzZSB7XG4gICAgZW5jb2Rpbmcud3JpdGVWYXJVaW50KGVuY29kZXIucmVzdEVuY29kZXIsIDApO1xuICAgIHJldHVybiBlbmNvZGVyLnRvVWludDhBcnJheSgpXG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHtVaW50OEFycmF5fSB1cGRhdGVcbiAqIEByZXR1cm4ge1VpbnQ4QXJyYXl9XG4gKi9cbmNvbnN0IGVuY29kZVN0YXRlVmVjdG9yRnJvbVVwZGF0ZSA9IHVwZGF0ZSA9PiBlbmNvZGVTdGF0ZVZlY3RvckZyb21VcGRhdGVWMih1cGRhdGUsIERTRW5jb2RlclYxLCBVcGRhdGVEZWNvZGVyVjEpO1xuXG4vKipcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gdXBkYXRlXG4gKiBAcGFyYW0ge3R5cGVvZiBVcGRhdGVEZWNvZGVyVjEgfCB0eXBlb2YgVXBkYXRlRGVjb2RlclYyfSBZRGVjb2RlclxuICogQHJldHVybiB7eyBmcm9tOiBNYXA8bnVtYmVyLG51bWJlcj4sIHRvOiBNYXA8bnVtYmVyLG51bWJlcj4gfX1cbiAqL1xuY29uc3QgcGFyc2VVcGRhdGVNZXRhVjIgPSAodXBkYXRlLCBZRGVjb2RlciA9IFVwZGF0ZURlY29kZXJWMikgPT4ge1xuICAvKipcbiAgICogQHR5cGUge01hcDxudW1iZXIsIG51bWJlcj59XG4gICAqL1xuICBjb25zdCBmcm9tID0gbmV3IE1hcCgpO1xuICAvKipcbiAgICogQHR5cGUge01hcDxudW1iZXIsIG51bWJlcj59XG4gICAqL1xuICBjb25zdCB0byA9IG5ldyBNYXAoKTtcbiAgY29uc3QgdXBkYXRlRGVjb2RlciA9IG5ldyBMYXp5U3RydWN0UmVhZGVyKG5ldyBZRGVjb2RlcihkZWNvZGluZy5jcmVhdGVEZWNvZGVyKHVwZGF0ZSkpLCBmYWxzZSk7XG4gIGxldCBjdXJyID0gdXBkYXRlRGVjb2Rlci5jdXJyO1xuICBpZiAoY3VyciAhPT0gbnVsbCkge1xuICAgIGxldCBjdXJyQ2xpZW50ID0gY3Vyci5pZC5jbGllbnQ7XG4gICAgbGV0IGN1cnJDbG9jayA9IGN1cnIuaWQuY2xvY2s7XG4gICAgLy8gd3JpdGUgdGhlIGJlZ2lubmluZyB0byBgZnJvbWBcbiAgICBmcm9tLnNldChjdXJyQ2xpZW50LCBjdXJyQ2xvY2spO1xuICAgIGZvciAoOyBjdXJyICE9PSBudWxsOyBjdXJyID0gdXBkYXRlRGVjb2Rlci5uZXh0KCkpIHtcbiAgICAgIGlmIChjdXJyQ2xpZW50ICE9PSBjdXJyLmlkLmNsaWVudCkge1xuICAgICAgICAvLyBXZSBmb3VuZCBhIG5ldyBjbGllbnRcbiAgICAgICAgLy8gd3JpdGUgdGhlIGVuZCB0byBgdG9gXG4gICAgICAgIHRvLnNldChjdXJyQ2xpZW50LCBjdXJyQ2xvY2spO1xuICAgICAgICAvLyB3cml0ZSB0aGUgYmVnaW5uaW5nIHRvIGBmcm9tYFxuICAgICAgICBmcm9tLnNldChjdXJyLmlkLmNsaWVudCwgY3Vyci5pZC5jbG9jayk7XG4gICAgICAgIC8vIHVwZGF0ZSBjdXJyQ2xpZW50XG4gICAgICAgIGN1cnJDbGllbnQgPSBjdXJyLmlkLmNsaWVudDtcbiAgICAgIH1cbiAgICAgIGN1cnJDbG9jayA9IGN1cnIuaWQuY2xvY2sgKyBjdXJyLmxlbmd0aDtcbiAgICB9XG4gICAgLy8gd3JpdGUgdGhlIGVuZCB0byBgdG9gXG4gICAgdG8uc2V0KGN1cnJDbGllbnQsIGN1cnJDbG9jayk7XG4gIH1cbiAgcmV0dXJuIHsgZnJvbSwgdG8gfVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IHVwZGF0ZVxuICogQHJldHVybiB7eyBmcm9tOiBNYXA8bnVtYmVyLG51bWJlcj4sIHRvOiBNYXA8bnVtYmVyLG51bWJlcj4gfX1cbiAqL1xuY29uc3QgcGFyc2VVcGRhdGVNZXRhID0gdXBkYXRlID0+IHBhcnNlVXBkYXRlTWV0YVYyKHVwZGF0ZSwgVXBkYXRlRGVjb2RlclYxKTtcblxuLyoqXG4gKiBUaGlzIG1ldGhvZCBpcyBpbnRlbmRlZCB0byBzbGljZSBhbnkga2luZCBvZiBzdHJ1Y3QgYW5kIHJldHJpZXZlIHRoZSByaWdodCBwYXJ0LlxuICogSXQgZG9lcyBub3QgaGFuZGxlIHNpZGUtZWZmZWN0cywgc28gaXQgc2hvdWxkIG9ubHkgYmUgdXNlZCBieSB0aGUgbGF6eS1lbmNvZGVyLlxuICpcbiAqIEBwYXJhbSB7SXRlbSB8IEdDIHwgU2tpcH0gbGVmdFxuICogQHBhcmFtIHtudW1iZXJ9IGRpZmZcbiAqIEByZXR1cm4ge0l0ZW0gfCBHQ31cbiAqL1xuY29uc3Qgc2xpY2VTdHJ1Y3QgPSAobGVmdCwgZGlmZikgPT4ge1xuICBpZiAobGVmdC5jb25zdHJ1Y3RvciA9PT0gR0MpIHtcbiAgICBjb25zdCB7IGNsaWVudCwgY2xvY2sgfSA9IGxlZnQuaWQ7XG4gICAgcmV0dXJuIG5ldyBHQyhjcmVhdGVJRChjbGllbnQsIGNsb2NrICsgZGlmZiksIGxlZnQubGVuZ3RoIC0gZGlmZilcbiAgfSBlbHNlIGlmIChsZWZ0LmNvbnN0cnVjdG9yID09PSBTa2lwKSB7XG4gICAgY29uc3QgeyBjbGllbnQsIGNsb2NrIH0gPSBsZWZ0LmlkO1xuICAgIHJldHVybiBuZXcgU2tpcChjcmVhdGVJRChjbGllbnQsIGNsb2NrICsgZGlmZiksIGxlZnQubGVuZ3RoIC0gZGlmZilcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBsZWZ0SXRlbSA9IC8qKiBAdHlwZSB7SXRlbX0gKi8gKGxlZnQpO1xuICAgIGNvbnN0IHsgY2xpZW50LCBjbG9jayB9ID0gbGVmdEl0ZW0uaWQ7XG4gICAgcmV0dXJuIG5ldyBJdGVtKFxuICAgICAgY3JlYXRlSUQoY2xpZW50LCBjbG9jayArIGRpZmYpLFxuICAgICAgbnVsbCxcbiAgICAgIGNyZWF0ZUlEKGNsaWVudCwgY2xvY2sgKyBkaWZmIC0gMSksXG4gICAgICBudWxsLFxuICAgICAgbGVmdEl0ZW0ucmlnaHRPcmlnaW4sXG4gICAgICBsZWZ0SXRlbS5wYXJlbnQsXG4gICAgICBsZWZ0SXRlbS5wYXJlbnRTdWIsXG4gICAgICBsZWZ0SXRlbS5jb250ZW50LnNwbGljZShkaWZmKVxuICAgIClcbiAgfVxufTtcblxuLyoqXG4gKlxuICogVGhpcyBmdW5jdGlvbiB3b3JrcyBzaW1pbGFybHkgdG8gYHJlYWRVcGRhdGVWMmAuXG4gKlxuICogQHBhcmFtIHtBcnJheTxVaW50OEFycmF5Pn0gdXBkYXRlc1xuICogQHBhcmFtIHt0eXBlb2YgVXBkYXRlRGVjb2RlclYxIHwgdHlwZW9mIFVwZGF0ZURlY29kZXJWMn0gW1lEZWNvZGVyXVxuICogQHBhcmFtIHt0eXBlb2YgVXBkYXRlRW5jb2RlclYxIHwgdHlwZW9mIFVwZGF0ZUVuY29kZXJWMn0gW1lFbmNvZGVyXVxuICogQHJldHVybiB7VWludDhBcnJheX1cbiAqL1xuY29uc3QgbWVyZ2VVcGRhdGVzVjIgPSAodXBkYXRlcywgWURlY29kZXIgPSBVcGRhdGVEZWNvZGVyVjIsIFlFbmNvZGVyID0gVXBkYXRlRW5jb2RlclYyKSA9PiB7XG4gIGlmICh1cGRhdGVzLmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiB1cGRhdGVzWzBdXG4gIH1cbiAgY29uc3QgdXBkYXRlRGVjb2RlcnMgPSB1cGRhdGVzLm1hcCh1cGRhdGUgPT4gbmV3IFlEZWNvZGVyKGRlY29kaW5nLmNyZWF0ZURlY29kZXIodXBkYXRlKSkpO1xuICBsZXQgbGF6eVN0cnVjdERlY29kZXJzID0gdXBkYXRlRGVjb2RlcnMubWFwKGRlY29kZXIgPT4gbmV3IExhenlTdHJ1Y3RSZWFkZXIoZGVjb2RlciwgdHJ1ZSkpO1xuXG4gIC8qKlxuICAgKiBAdG9kbyB3ZSBkb24ndCBuZWVkIG9mZnNldCBiZWNhdXNlIHdlIGFsd2F5cyBzbGljZSBiZWZvcmVcbiAgICogQHR5cGUge251bGwgfCB7IHN0cnVjdDogSXRlbSB8IEdDIHwgU2tpcCwgb2Zmc2V0OiBudW1iZXIgfX1cbiAgICovXG4gIGxldCBjdXJyV3JpdGUgPSBudWxsO1xuXG4gIGNvbnN0IHVwZGF0ZUVuY29kZXIgPSBuZXcgWUVuY29kZXIoKTtcbiAgLy8gd3JpdGUgc3RydWN0cyBsYXppbHlcbiAgY29uc3QgbGF6eVN0cnVjdEVuY29kZXIgPSBuZXcgTGF6eVN0cnVjdFdyaXRlcih1cGRhdGVFbmNvZGVyKTtcblxuICAvLyBOb3RlOiBXZSBuZWVkIHRvIGVuc3VyZSB0aGF0IGFsbCBsYXp5U3RydWN0RGVjb2RlcnMgYXJlIGZ1bGx5IGNvbnN1bWVkXG4gIC8vIE5vdGU6IFNob3VsZCBtZXJnZSBkb2N1bWVudCB1cGRhdGVzIHdoZW5ldmVyIHBvc3NpYmxlIC0gZXZlbiBmcm9tIGRpZmZlcmVudCB1cGRhdGVzXG4gIC8vIE5vdGU6IFNob3VsZCBoYW5kbGUgdGhhdCBzb21lIG9wZXJhdGlvbnMgY2Fubm90IGJlIGFwcGxpZWQgeWV0ICgpXG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICAvLyBXcml0ZSBoaWdoZXIgY2xpZW50cyBmaXJzdCDih5Igc29ydCBieSBjbGllbnRJRCAmIGNsb2NrIGFuZCByZW1vdmUgZGVjb2RlcnMgd2l0aG91dCBjb250ZW50XG4gICAgbGF6eVN0cnVjdERlY29kZXJzID0gbGF6eVN0cnVjdERlY29kZXJzLmZpbHRlcihkZWMgPT4gZGVjLmN1cnIgIT09IG51bGwpO1xuICAgIGxhenlTdHJ1Y3REZWNvZGVycy5zb3J0KFxuICAgICAgLyoqIEB0eXBlIHtmdW5jdGlvbihhbnksYW55KTpudW1iZXJ9ICovIChkZWMxLCBkZWMyKSA9PiB7XG4gICAgICAgIGlmIChkZWMxLmN1cnIuaWQuY2xpZW50ID09PSBkZWMyLmN1cnIuaWQuY2xpZW50KSB7XG4gICAgICAgICAgY29uc3QgY2xvY2tEaWZmID0gZGVjMS5jdXJyLmlkLmNsb2NrIC0gZGVjMi5jdXJyLmlkLmNsb2NrO1xuICAgICAgICAgIGlmIChjbG9ja0RpZmYgPT09IDApIHtcbiAgICAgICAgICAgIC8vIEB0b2RvIHJlbW92ZSByZWZlcmVuY2VzIHRvIHNraXAgc2luY2UgdGhlIHN0cnVjdERlY29kZXJzIG11c3QgZmlsdGVyIFNraXBzLlxuICAgICAgICAgICAgcmV0dXJuIGRlYzEuY3Vyci5jb25zdHJ1Y3RvciA9PT0gZGVjMi5jdXJyLmNvbnN0cnVjdG9yXG4gICAgICAgICAgICAgID8gMFxuICAgICAgICAgICAgICA6IGRlYzEuY3Vyci5jb25zdHJ1Y3RvciA9PT0gU2tpcCA/IDEgOiAtMSAvLyB3ZSBhcmUgZmlsdGVyaW5nIHNraXBzIGFueXdheS5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGNsb2NrRGlmZlxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gZGVjMi5jdXJyLmlkLmNsaWVudCAtIGRlYzEuY3Vyci5pZC5jbGllbnRcbiAgICAgICAgfVxuICAgICAgfVxuICAgICk7XG4gICAgaWYgKGxhenlTdHJ1Y3REZWNvZGVycy5sZW5ndGggPT09IDApIHtcbiAgICAgIGJyZWFrXG4gICAgfVxuICAgIGNvbnN0IGN1cnJEZWNvZGVyID0gbGF6eVN0cnVjdERlY29kZXJzWzBdO1xuICAgIC8vIHdyaXRlIGZyb20gY3VyckRlY29kZXIgdW50aWwgdGhlIG5leHQgb3BlcmF0aW9uIGlzIGZyb20gYW5vdGhlciBjbGllbnQgb3IgaWYgZmlsbGVyLXN0cnVjdFxuICAgIC8vIHRoZW4gd2UgbmVlZCB0byByZW9yZGVyIHRoZSBkZWNvZGVycyBhbmQgZmluZCB0aGUgbmV4dCBvcGVyYXRpb24gdG8gd3JpdGVcbiAgICBjb25zdCBmaXJzdENsaWVudCA9IC8qKiBAdHlwZSB7SXRlbSB8IEdDfSAqLyAoY3VyckRlY29kZXIuY3VycikuaWQuY2xpZW50O1xuXG4gICAgaWYgKGN1cnJXcml0ZSAhPT0gbnVsbCkge1xuICAgICAgbGV0IGN1cnIgPSAvKiogQHR5cGUge0l0ZW0gfCBHQyB8IG51bGx9ICovIChjdXJyRGVjb2Rlci5jdXJyKTtcbiAgICAgIGxldCBpdGVyYXRlZCA9IGZhbHNlO1xuXG4gICAgICAvLyBpdGVyYXRlIHVudGlsIHdlIGZpbmQgc29tZXRoaW5nIHRoYXQgd2UgaGF2ZW4ndCB3cml0dGVuIGFscmVhZHlcbiAgICAgIC8vIHJlbWVtYmVyOiBmaXJzdCB0aGUgaGlnaCBjbGllbnQtaWRzIGFyZSB3cml0dGVuXG4gICAgICB3aGlsZSAoY3VyciAhPT0gbnVsbCAmJiBjdXJyLmlkLmNsb2NrICsgY3Vyci5sZW5ndGggPD0gY3VycldyaXRlLnN0cnVjdC5pZC5jbG9jayArIGN1cnJXcml0ZS5zdHJ1Y3QubGVuZ3RoICYmIGN1cnIuaWQuY2xpZW50ID49IGN1cnJXcml0ZS5zdHJ1Y3QuaWQuY2xpZW50KSB7XG4gICAgICAgIGN1cnIgPSBjdXJyRGVjb2Rlci5uZXh0KCk7XG4gICAgICAgIGl0ZXJhdGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChcbiAgICAgICAgY3VyciA9PT0gbnVsbCB8fCAvLyBjdXJyZW50IGRlY29kZXIgaXMgZW1wdHlcbiAgICAgICAgY3Vyci5pZC5jbGllbnQgIT09IGZpcnN0Q2xpZW50IHx8IC8vIGNoZWNrIHdoZXRoZXIgdGhlcmUgaXMgYW5vdGhlciBkZWNvZGVyIHRoYXQgaGFzIGhhcyB1cGRhdGVzIGZyb20gYGZpcnN0Q2xpZW50YFxuICAgICAgICAoaXRlcmF0ZWQgJiYgY3Vyci5pZC5jbG9jayA+IGN1cnJXcml0ZS5zdHJ1Y3QuaWQuY2xvY2sgKyBjdXJyV3JpdGUuc3RydWN0Lmxlbmd0aCkgLy8gdGhlIGFib3ZlIHdoaWxlIGxvb3Agd2FzIHVzZWQgYW5kIHdlIGFyZSBwb3RlbnRpYWxseSBtaXNzaW5nIHVwZGF0ZXNcbiAgICAgICkge1xuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICBpZiAoZmlyc3RDbGllbnQgIT09IGN1cnJXcml0ZS5zdHJ1Y3QuaWQuY2xpZW50KSB7XG4gICAgICAgIHdyaXRlU3RydWN0VG9MYXp5U3RydWN0V3JpdGVyKGxhenlTdHJ1Y3RFbmNvZGVyLCBjdXJyV3JpdGUuc3RydWN0LCBjdXJyV3JpdGUub2Zmc2V0KTtcbiAgICAgICAgY3VycldyaXRlID0geyBzdHJ1Y3Q6IGN1cnIsIG9mZnNldDogMCB9O1xuICAgICAgICBjdXJyRGVjb2Rlci5uZXh0KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoY3VycldyaXRlLnN0cnVjdC5pZC5jbG9jayArIGN1cnJXcml0ZS5zdHJ1Y3QubGVuZ3RoIDwgY3Vyci5pZC5jbG9jaykge1xuICAgICAgICAgIC8vIEB0b2RvIHdyaXRlIGN1cnJTdHJ1Y3QgJiBzZXQgY3VyclN0cnVjdCA9IFNraXAoY2xvY2sgPSBjdXJyU3RydWN0LmlkLmNsb2NrICsgY3VyclN0cnVjdC5sZW5ndGgsIGxlbmd0aCA9IGN1cnIuaWQuY2xvY2sgLSBzZWxmLmNsb2NrKVxuICAgICAgICAgIGlmIChjdXJyV3JpdGUuc3RydWN0LmNvbnN0cnVjdG9yID09PSBTa2lwKSB7XG4gICAgICAgICAgICAvLyBleHRlbmQgZXhpc3Rpbmcgc2tpcFxuICAgICAgICAgICAgY3VycldyaXRlLnN0cnVjdC5sZW5ndGggPSBjdXJyLmlkLmNsb2NrICsgY3Vyci5sZW5ndGggLSBjdXJyV3JpdGUuc3RydWN0LmlkLmNsb2NrO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB3cml0ZVN0cnVjdFRvTGF6eVN0cnVjdFdyaXRlcihsYXp5U3RydWN0RW5jb2RlciwgY3VycldyaXRlLnN0cnVjdCwgY3VycldyaXRlLm9mZnNldCk7XG4gICAgICAgICAgICBjb25zdCBkaWZmID0gY3Vyci5pZC5jbG9jayAtIGN1cnJXcml0ZS5zdHJ1Y3QuaWQuY2xvY2sgLSBjdXJyV3JpdGUuc3RydWN0Lmxlbmd0aDtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQHR5cGUge1NraXB9XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGNvbnN0IHN0cnVjdCA9IG5ldyBTa2lwKGNyZWF0ZUlEKGZpcnN0Q2xpZW50LCBjdXJyV3JpdGUuc3RydWN0LmlkLmNsb2NrICsgY3VycldyaXRlLnN0cnVjdC5sZW5ndGgpLCBkaWZmKTtcbiAgICAgICAgICAgIGN1cnJXcml0ZSA9IHsgc3RydWN0LCBvZmZzZXQ6IDAgfTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7IC8vIGlmIChjdXJyV3JpdGUuc3RydWN0LmlkLmNsb2NrICsgY3VycldyaXRlLnN0cnVjdC5sZW5ndGggPj0gY3Vyci5pZC5jbG9jaykge1xuICAgICAgICAgIGNvbnN0IGRpZmYgPSBjdXJyV3JpdGUuc3RydWN0LmlkLmNsb2NrICsgY3VycldyaXRlLnN0cnVjdC5sZW5ndGggLSBjdXJyLmlkLmNsb2NrO1xuICAgICAgICAgIGlmIChkaWZmID4gMCkge1xuICAgICAgICAgICAgaWYgKGN1cnJXcml0ZS5zdHJ1Y3QuY29uc3RydWN0b3IgPT09IFNraXApIHtcbiAgICAgICAgICAgICAgLy8gcHJlZmVyIHRvIHNsaWNlIFNraXAgYmVjYXVzZSB0aGUgb3RoZXIgc3RydWN0IG1pZ2h0IGNvbnRhaW4gbW9yZSBpbmZvcm1hdGlvblxuICAgICAgICAgICAgICBjdXJyV3JpdGUuc3RydWN0Lmxlbmd0aCAtPSBkaWZmO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY3VyciA9IHNsaWNlU3RydWN0KGN1cnIsIGRpZmYpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIWN1cnJXcml0ZS5zdHJ1Y3QubWVyZ2VXaXRoKC8qKiBAdHlwZSB7YW55fSAqLyAoY3VycikpKSB7XG4gICAgICAgICAgICB3cml0ZVN0cnVjdFRvTGF6eVN0cnVjdFdyaXRlcihsYXp5U3RydWN0RW5jb2RlciwgY3VycldyaXRlLnN0cnVjdCwgY3VycldyaXRlLm9mZnNldCk7XG4gICAgICAgICAgICBjdXJyV3JpdGUgPSB7IHN0cnVjdDogY3Vyciwgb2Zmc2V0OiAwIH07XG4gICAgICAgICAgICBjdXJyRGVjb2Rlci5uZXh0KCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGN1cnJXcml0ZSA9IHsgc3RydWN0OiAvKiogQHR5cGUge0l0ZW0gfCBHQ30gKi8gKGN1cnJEZWNvZGVyLmN1cnIpLCBvZmZzZXQ6IDAgfTtcbiAgICAgIGN1cnJEZWNvZGVyLm5leHQoKTtcbiAgICB9XG4gICAgZm9yIChcbiAgICAgIGxldCBuZXh0ID0gY3VyckRlY29kZXIuY3VycjtcbiAgICAgIG5leHQgIT09IG51bGwgJiYgbmV4dC5pZC5jbGllbnQgPT09IGZpcnN0Q2xpZW50ICYmIG5leHQuaWQuY2xvY2sgPT09IGN1cnJXcml0ZS5zdHJ1Y3QuaWQuY2xvY2sgKyBjdXJyV3JpdGUuc3RydWN0Lmxlbmd0aCAmJiBuZXh0LmNvbnN0cnVjdG9yICE9PSBTa2lwO1xuICAgICAgbmV4dCA9IGN1cnJEZWNvZGVyLm5leHQoKVxuICAgICkge1xuICAgICAgd3JpdGVTdHJ1Y3RUb0xhenlTdHJ1Y3RXcml0ZXIobGF6eVN0cnVjdEVuY29kZXIsIGN1cnJXcml0ZS5zdHJ1Y3QsIGN1cnJXcml0ZS5vZmZzZXQpO1xuICAgICAgY3VycldyaXRlID0geyBzdHJ1Y3Q6IG5leHQsIG9mZnNldDogMCB9O1xuICAgIH1cbiAgfVxuICBpZiAoY3VycldyaXRlICE9PSBudWxsKSB7XG4gICAgd3JpdGVTdHJ1Y3RUb0xhenlTdHJ1Y3RXcml0ZXIobGF6eVN0cnVjdEVuY29kZXIsIGN1cnJXcml0ZS5zdHJ1Y3QsIGN1cnJXcml0ZS5vZmZzZXQpO1xuICAgIGN1cnJXcml0ZSA9IG51bGw7XG4gIH1cbiAgZmluaXNoTGF6eVN0cnVjdFdyaXRpbmcobGF6eVN0cnVjdEVuY29kZXIpO1xuXG4gIGNvbnN0IGRzcyA9IHVwZGF0ZURlY29kZXJzLm1hcChkZWNvZGVyID0+IHJlYWREZWxldGVTZXQoZGVjb2RlcikpO1xuICBjb25zdCBkcyA9IG1lcmdlRGVsZXRlU2V0cyhkc3MpO1xuICB3cml0ZURlbGV0ZVNldCh1cGRhdGVFbmNvZGVyLCBkcyk7XG4gIHJldHVybiB1cGRhdGVFbmNvZGVyLnRvVWludDhBcnJheSgpXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gdXBkYXRlXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IHN2XG4gKiBAcGFyYW0ge3R5cGVvZiBVcGRhdGVEZWNvZGVyVjEgfCB0eXBlb2YgVXBkYXRlRGVjb2RlclYyfSBbWURlY29kZXJdXG4gKiBAcGFyYW0ge3R5cGVvZiBVcGRhdGVFbmNvZGVyVjEgfCB0eXBlb2YgVXBkYXRlRW5jb2RlclYyfSBbWUVuY29kZXJdXG4gKi9cbmNvbnN0IGRpZmZVcGRhdGVWMiA9ICh1cGRhdGUsIHN2LCBZRGVjb2RlciA9IFVwZGF0ZURlY29kZXJWMiwgWUVuY29kZXIgPSBVcGRhdGVFbmNvZGVyVjIpID0+IHtcbiAgY29uc3Qgc3RhdGUgPSBkZWNvZGVTdGF0ZVZlY3Rvcihzdik7XG4gIGNvbnN0IGVuY29kZXIgPSBuZXcgWUVuY29kZXIoKTtcbiAgY29uc3QgbGF6eVN0cnVjdFdyaXRlciA9IG5ldyBMYXp5U3RydWN0V3JpdGVyKGVuY29kZXIpO1xuICBjb25zdCBkZWNvZGVyID0gbmV3IFlEZWNvZGVyKGRlY29kaW5nLmNyZWF0ZURlY29kZXIodXBkYXRlKSk7XG4gIGNvbnN0IHJlYWRlciA9IG5ldyBMYXp5U3RydWN0UmVhZGVyKGRlY29kZXIsIGZhbHNlKTtcbiAgd2hpbGUgKHJlYWRlci5jdXJyKSB7XG4gICAgY29uc3QgY3VyciA9IHJlYWRlci5jdXJyO1xuICAgIGNvbnN0IGN1cnJDbGllbnQgPSBjdXJyLmlkLmNsaWVudDtcbiAgICBjb25zdCBzdkNsb2NrID0gc3RhdGUuZ2V0KGN1cnJDbGllbnQpIHx8IDA7XG4gICAgaWYgKHJlYWRlci5jdXJyLmNvbnN0cnVjdG9yID09PSBTa2lwKSB7XG4gICAgICAvLyB0aGUgZmlyc3Qgd3JpdHRlbiBzdHJ1Y3Qgc2hvdWxkbid0IGJlIGEgc2tpcFxuICAgICAgcmVhZGVyLm5leHQoKTtcbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuICAgIGlmIChjdXJyLmlkLmNsb2NrICsgY3Vyci5sZW5ndGggPiBzdkNsb2NrKSB7XG4gICAgICB3cml0ZVN0cnVjdFRvTGF6eVN0cnVjdFdyaXRlcihsYXp5U3RydWN0V3JpdGVyLCBjdXJyLCBtYXRoLm1heChzdkNsb2NrIC0gY3Vyci5pZC5jbG9jaywgMCkpO1xuICAgICAgcmVhZGVyLm5leHQoKTtcbiAgICAgIHdoaWxlIChyZWFkZXIuY3VyciAmJiByZWFkZXIuY3Vyci5pZC5jbGllbnQgPT09IGN1cnJDbGllbnQpIHtcbiAgICAgICAgd3JpdGVTdHJ1Y3RUb0xhenlTdHJ1Y3RXcml0ZXIobGF6eVN0cnVjdFdyaXRlciwgcmVhZGVyLmN1cnIsIDApO1xuICAgICAgICByZWFkZXIubmV4dCgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyByZWFkIHVudGlsIHNvbWV0aGluZyBuZXcgY29tZXMgdXBcbiAgICAgIHdoaWxlIChyZWFkZXIuY3VyciAmJiByZWFkZXIuY3Vyci5pZC5jbGllbnQgPT09IGN1cnJDbGllbnQgJiYgcmVhZGVyLmN1cnIuaWQuY2xvY2sgKyByZWFkZXIuY3Vyci5sZW5ndGggPD0gc3ZDbG9jaykge1xuICAgICAgICByZWFkZXIubmV4dCgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBmaW5pc2hMYXp5U3RydWN0V3JpdGluZyhsYXp5U3RydWN0V3JpdGVyKTtcbiAgLy8gd3JpdGUgZHNcbiAgY29uc3QgZHMgPSByZWFkRGVsZXRlU2V0KGRlY29kZXIpO1xuICB3cml0ZURlbGV0ZVNldChlbmNvZGVyLCBkcyk7XG4gIHJldHVybiBlbmNvZGVyLnRvVWludDhBcnJheSgpXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gdXBkYXRlXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IHN2XG4gKi9cbmNvbnN0IGRpZmZVcGRhdGUgPSAodXBkYXRlLCBzdikgPT4gZGlmZlVwZGF0ZVYyKHVwZGF0ZSwgc3YsIFVwZGF0ZURlY29kZXJWMSwgVXBkYXRlRW5jb2RlclYxKTtcblxuLyoqXG4gKiBAcGFyYW0ge0xhenlTdHJ1Y3RXcml0ZXJ9IGxhenlXcml0ZXJcbiAqL1xuY29uc3QgZmx1c2hMYXp5U3RydWN0V3JpdGVyID0gbGF6eVdyaXRlciA9PiB7XG4gIGlmIChsYXp5V3JpdGVyLndyaXR0ZW4gPiAwKSB7XG4gICAgbGF6eVdyaXRlci5jbGllbnRTdHJ1Y3RzLnB1c2goeyB3cml0dGVuOiBsYXp5V3JpdGVyLndyaXR0ZW4sIHJlc3RFbmNvZGVyOiBlbmNvZGluZy50b1VpbnQ4QXJyYXkobGF6eVdyaXRlci5lbmNvZGVyLnJlc3RFbmNvZGVyKSB9KTtcbiAgICBsYXp5V3JpdGVyLmVuY29kZXIucmVzdEVuY29kZXIgPSBlbmNvZGluZy5jcmVhdGVFbmNvZGVyKCk7XG4gICAgbGF6eVdyaXRlci53cml0dGVuID0gMDtcbiAgfVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge0xhenlTdHJ1Y3RXcml0ZXJ9IGxhenlXcml0ZXJcbiAqIEBwYXJhbSB7SXRlbSB8IEdDfSBzdHJ1Y3RcbiAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXRcbiAqL1xuY29uc3Qgd3JpdGVTdHJ1Y3RUb0xhenlTdHJ1Y3RXcml0ZXIgPSAobGF6eVdyaXRlciwgc3RydWN0LCBvZmZzZXQpID0+IHtcbiAgLy8gZmx1c2ggY3VyciBpZiB3ZSBzdGFydCBhbm90aGVyIGNsaWVudFxuICBpZiAobGF6eVdyaXRlci53cml0dGVuID4gMCAmJiBsYXp5V3JpdGVyLmN1cnJDbGllbnQgIT09IHN0cnVjdC5pZC5jbGllbnQpIHtcbiAgICBmbHVzaExhenlTdHJ1Y3RXcml0ZXIobGF6eVdyaXRlcik7XG4gIH1cbiAgaWYgKGxhenlXcml0ZXIud3JpdHRlbiA9PT0gMCkge1xuICAgIGxhenlXcml0ZXIuY3VyckNsaWVudCA9IHN0cnVjdC5pZC5jbGllbnQ7XG4gICAgLy8gd3JpdGUgbmV4dCBjbGllbnRcbiAgICBsYXp5V3JpdGVyLmVuY29kZXIud3JpdGVDbGllbnQoc3RydWN0LmlkLmNsaWVudCk7XG4gICAgLy8gd3JpdGUgc3RhcnRDbG9ja1xuICAgIGVuY29kaW5nLndyaXRlVmFyVWludChsYXp5V3JpdGVyLmVuY29kZXIucmVzdEVuY29kZXIsIHN0cnVjdC5pZC5jbG9jayArIG9mZnNldCk7XG4gIH1cbiAgc3RydWN0LndyaXRlKGxhenlXcml0ZXIuZW5jb2Rlciwgb2Zmc2V0KTtcbiAgbGF6eVdyaXRlci53cml0dGVuKys7XG59O1xuLyoqXG4gKiBDYWxsIHRoaXMgZnVuY3Rpb24gd2hlbiB3ZSBjb2xsZWN0ZWQgYWxsIHBhcnRzIGFuZCB3YW50IHRvXG4gKiBwdXQgYWxsIHRoZSBwYXJ0cyB0b2dldGhlci4gQWZ0ZXIgY2FsbGluZyB0aGlzIG1ldGhvZCxcbiAqIHlvdSBjYW4gY29udGludWUgdXNpbmcgdGhlIFVwZGF0ZUVuY29kZXIuXG4gKlxuICogQHBhcmFtIHtMYXp5U3RydWN0V3JpdGVyfSBsYXp5V3JpdGVyXG4gKi9cbmNvbnN0IGZpbmlzaExhenlTdHJ1Y3RXcml0aW5nID0gKGxhenlXcml0ZXIpID0+IHtcbiAgZmx1c2hMYXp5U3RydWN0V3JpdGVyKGxhenlXcml0ZXIpO1xuXG4gIC8vIHRoaXMgaXMgYSBmcmVzaCBlbmNvZGVyIGJlY2F1c2Ugd2UgY2FsbGVkIGZsdXNoQ3VyclxuICBjb25zdCByZXN0RW5jb2RlciA9IGxhenlXcml0ZXIuZW5jb2Rlci5yZXN0RW5jb2RlcjtcblxuICAvKipcbiAgICogTm93IHdlIHB1dCBhbGwgdGhlIGZyYWdtZW50cyB0b2dldGhlci5cbiAgICogVGhpcyB3b3JrcyBzaW1pbGFybHkgdG8gYHdyaXRlQ2xpZW50c1N0cnVjdHNgXG4gICAqL1xuXG4gIC8vIHdyaXRlICMgc3RhdGVzIHRoYXQgd2VyZSB1cGRhdGVkIC0gaS5lLiB0aGUgY2xpZW50c1xuICBlbmNvZGluZy53cml0ZVZhclVpbnQocmVzdEVuY29kZXIsIGxhenlXcml0ZXIuY2xpZW50U3RydWN0cy5sZW5ndGgpO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGF6eVdyaXRlci5jbGllbnRTdHJ1Y3RzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgcGFydFN0cnVjdHMgPSBsYXp5V3JpdGVyLmNsaWVudFN0cnVjdHNbaV07XG4gICAgLyoqXG4gICAgICogV29ya3Mgc2ltaWxhcmx5IHRvIGB3cml0ZVN0cnVjdHNgXG4gICAgICovXG4gICAgLy8gd3JpdGUgIyBlbmNvZGVkIHN0cnVjdHNcbiAgICBlbmNvZGluZy53cml0ZVZhclVpbnQocmVzdEVuY29kZXIsIHBhcnRTdHJ1Y3RzLndyaXR0ZW4pO1xuICAgIC8vIHdyaXRlIHRoZSByZXN0IG9mIHRoZSBmcmFnbWVudFxuICAgIGVuY29kaW5nLndyaXRlVWludDhBcnJheShyZXN0RW5jb2RlciwgcGFydFN0cnVjdHMucmVzdEVuY29kZXIpO1xuICB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gdXBkYXRlXG4gKiBAcGFyYW0ge3R5cGVvZiBVcGRhdGVEZWNvZGVyVjIgfCB0eXBlb2YgVXBkYXRlRGVjb2RlclYxfSBZRGVjb2RlclxuICogQHBhcmFtIHt0eXBlb2YgVXBkYXRlRW5jb2RlclYyIHwgdHlwZW9mIFVwZGF0ZUVuY29kZXJWMSB9IFlFbmNvZGVyXG4gKi9cbmNvbnN0IGNvbnZlcnRVcGRhdGVGb3JtYXQgPSAodXBkYXRlLCBZRGVjb2RlciwgWUVuY29kZXIpID0+IHtcbiAgY29uc3QgdXBkYXRlRGVjb2RlciA9IG5ldyBZRGVjb2RlcihkZWNvZGluZy5jcmVhdGVEZWNvZGVyKHVwZGF0ZSkpO1xuICBjb25zdCBsYXp5RGVjb2RlciA9IG5ldyBMYXp5U3RydWN0UmVhZGVyKHVwZGF0ZURlY29kZXIsIGZhbHNlKTtcbiAgY29uc3QgdXBkYXRlRW5jb2RlciA9IG5ldyBZRW5jb2RlcigpO1xuICBjb25zdCBsYXp5V3JpdGVyID0gbmV3IExhenlTdHJ1Y3RXcml0ZXIodXBkYXRlRW5jb2Rlcik7XG5cbiAgZm9yIChsZXQgY3VyciA9IGxhenlEZWNvZGVyLmN1cnI7IGN1cnIgIT09IG51bGw7IGN1cnIgPSBsYXp5RGVjb2Rlci5uZXh0KCkpIHtcbiAgICB3cml0ZVN0cnVjdFRvTGF6eVN0cnVjdFdyaXRlcihsYXp5V3JpdGVyLCBjdXJyLCAwKTtcbiAgfVxuICBmaW5pc2hMYXp5U3RydWN0V3JpdGluZyhsYXp5V3JpdGVyKTtcbiAgY29uc3QgZHMgPSByZWFkRGVsZXRlU2V0KHVwZGF0ZURlY29kZXIpO1xuICB3cml0ZURlbGV0ZVNldCh1cGRhdGVFbmNvZGVyLCBkcyk7XG4gIHJldHVybiB1cGRhdGVFbmNvZGVyLnRvVWludDhBcnJheSgpXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gdXBkYXRlXG4gKi9cbmNvbnN0IGNvbnZlcnRVcGRhdGVGb3JtYXRWMVRvVjIgPSB1cGRhdGUgPT4gY29udmVydFVwZGF0ZUZvcm1hdCh1cGRhdGUsIFVwZGF0ZURlY29kZXJWMSwgVXBkYXRlRW5jb2RlclYyKTtcblxuLyoqXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IHVwZGF0ZVxuICovXG5jb25zdCBjb252ZXJ0VXBkYXRlRm9ybWF0VjJUb1YxID0gdXBkYXRlID0+IGNvbnZlcnRVcGRhdGVGb3JtYXQodXBkYXRlLCBVcGRhdGVEZWNvZGVyVjIsIFVwZGF0ZUVuY29kZXJWMSk7XG5cbi8qKlxuICogQHRlbXBsYXRlIHtBYnN0cmFjdFR5cGU8YW55Pn0gVFxuICogWUV2ZW50IGRlc2NyaWJlcyB0aGUgY2hhbmdlcyBvbiBhIFlUeXBlLlxuICovXG5jbGFzcyBZRXZlbnQge1xuICAvKipcbiAgICogQHBhcmFtIHtUfSB0YXJnZXQgVGhlIGNoYW5nZWQgdHlwZS5cbiAgICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICovXG4gIGNvbnN0cnVjdG9yICh0YXJnZXQsIHRyYW5zYWN0aW9uKSB7XG4gICAgLyoqXG4gICAgICogVGhlIHR5cGUgb24gd2hpY2ggdGhpcyBldmVudCB3YXMgY3JlYXRlZCBvbi5cbiAgICAgKiBAdHlwZSB7VH1cbiAgICAgKi9cbiAgICB0aGlzLnRhcmdldCA9IHRhcmdldDtcbiAgICAvKipcbiAgICAgKiBUaGUgY3VycmVudCB0YXJnZXQgb24gd2hpY2ggdGhlIG9ic2VydmUgY2FsbGJhY2sgaXMgY2FsbGVkLlxuICAgICAqIEB0eXBlIHtBYnN0cmFjdFR5cGU8YW55Pn1cbiAgICAgKi9cbiAgICB0aGlzLmN1cnJlbnRUYXJnZXQgPSB0YXJnZXQ7XG4gICAgLyoqXG4gICAgICogVGhlIHRyYW5zYWN0aW9uIHRoYXQgdHJpZ2dlcmVkIHRoaXMgZXZlbnQuXG4gICAgICogQHR5cGUge1RyYW5zYWN0aW9ufVxuICAgICAqL1xuICAgIHRoaXMudHJhbnNhY3Rpb24gPSB0cmFuc2FjdGlvbjtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7T2JqZWN0fG51bGx9XG4gICAgICovXG4gICAgdGhpcy5fY2hhbmdlcyA9IG51bGw7XG4gICAgLyoqXG4gICAgICogQHR5cGUge251bGwgfCBNYXA8c3RyaW5nLCB7IGFjdGlvbjogJ2FkZCcgfCAndXBkYXRlJyB8ICdkZWxldGUnLCBvbGRWYWx1ZTogYW55LCBuZXdWYWx1ZTogYW55IH0+fVxuICAgICAqL1xuICAgIHRoaXMuX2tleXMgPSBudWxsO1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtudWxsIHwgQXJyYXk8eyBpbnNlcnQ/OiBzdHJpbmcgfCBBcnJheTxhbnk+IHwgb2JqZWN0IHwgQWJzdHJhY3RUeXBlPGFueT4sIHJldGFpbj86IG51bWJlciwgZGVsZXRlPzogbnVtYmVyLCBhdHRyaWJ1dGVzPzogT2JqZWN0PHN0cmluZywgYW55PiB9Pn1cbiAgICAgKi9cbiAgICB0aGlzLl9kZWx0YSA9IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogQ29tcHV0ZXMgdGhlIHBhdGggZnJvbSBgeWAgdG8gdGhlIGNoYW5nZWQgdHlwZS5cbiAgICpcbiAgICogQHRvZG8gdjE0IHNob3VsZCBzdGFuZGFyZGl6ZSBvbiBwYXRoOiBBcnJheTx7cGFyZW50LCBpbmRleH0+IGJlY2F1c2UgdGhhdCBpcyBlYXNpZXIgdG8gd29yayB3aXRoLlxuICAgKlxuICAgKiBUaGUgZm9sbG93aW5nIHByb3BlcnR5IGhvbGRzOlxuICAgKiBAZXhhbXBsZVxuICAgKiAgIGxldCB0eXBlID0geVxuICAgKiAgIGV2ZW50LnBhdGguZm9yRWFjaChkaXIgPT4ge1xuICAgKiAgICAgdHlwZSA9IHR5cGUuZ2V0KGRpcilcbiAgICogICB9KVxuICAgKiAgIHR5cGUgPT09IGV2ZW50LnRhcmdldCAvLyA9PiB0cnVlXG4gICAqL1xuICBnZXQgcGF0aCAoKSB7XG4gICAgLy8gQHRzLWlnbm9yZSBfaXRlbSBpcyBkZWZpbmVkIGJlY2F1c2UgdGFyZ2V0IGlzIGludGVncmF0ZWRcbiAgICByZXR1cm4gZ2V0UGF0aFRvKHRoaXMuY3VycmVudFRhcmdldCwgdGhpcy50YXJnZXQpXG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgaWYgYSBzdHJ1Y3QgaXMgZGVsZXRlZCBieSB0aGlzIGV2ZW50LlxuICAgKlxuICAgKiBJbiBjb250cmFzdCB0byBjaGFuZ2UuZGVsZXRlZCwgdGhpcyBtZXRob2QgYWxzbyByZXR1cm5zIHRydWUgaWYgdGhlIHN0cnVjdCB3YXMgYWRkZWQgYW5kIHRoZW4gZGVsZXRlZC5cbiAgICpcbiAgICogQHBhcmFtIHtBYnN0cmFjdFN0cnVjdH0gc3RydWN0XG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBkZWxldGVzIChzdHJ1Y3QpIHtcbiAgICByZXR1cm4gaXNEZWxldGVkKHRoaXMudHJhbnNhY3Rpb24uZGVsZXRlU2V0LCBzdHJ1Y3QuaWQpXG4gIH1cblxuICAvKipcbiAgICogQHR5cGUge01hcDxzdHJpbmcsIHsgYWN0aW9uOiAnYWRkJyB8ICd1cGRhdGUnIHwgJ2RlbGV0ZScsIG9sZFZhbHVlOiBhbnksIG5ld1ZhbHVlOiBhbnkgfT59XG4gICAqL1xuICBnZXQga2V5cyAoKSB7XG4gICAgaWYgKHRoaXMuX2tleXMgPT09IG51bGwpIHtcbiAgICAgIGNvbnN0IGtleXMgPSBuZXcgTWFwKCk7XG4gICAgICBjb25zdCB0YXJnZXQgPSB0aGlzLnRhcmdldDtcbiAgICAgIGNvbnN0IGNoYW5nZWQgPSAvKiogQHR5cGUgU2V0PHN0cmluZ3xudWxsPiAqLyAodGhpcy50cmFuc2FjdGlvbi5jaGFuZ2VkLmdldCh0YXJnZXQpKTtcbiAgICAgIGNoYW5nZWQuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICBpZiAoa2V5ICE9PSBudWxsKSB7XG4gICAgICAgICAgY29uc3QgaXRlbSA9IC8qKiBAdHlwZSB7SXRlbX0gKi8gKHRhcmdldC5fbWFwLmdldChrZXkpKTtcbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBAdHlwZSB7J2RlbGV0ZScgfCAnYWRkJyB8ICd1cGRhdGUnfVxuICAgICAgICAgICAqL1xuICAgICAgICAgIGxldCBhY3Rpb247XG4gICAgICAgICAgbGV0IG9sZFZhbHVlO1xuICAgICAgICAgIGlmICh0aGlzLmFkZHMoaXRlbSkpIHtcbiAgICAgICAgICAgIGxldCBwcmV2ID0gaXRlbS5sZWZ0O1xuICAgICAgICAgICAgd2hpbGUgKHByZXYgIT09IG51bGwgJiYgdGhpcy5hZGRzKHByZXYpKSB7XG4gICAgICAgICAgICAgIHByZXYgPSBwcmV2LmxlZnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5kZWxldGVzKGl0ZW0pKSB7XG4gICAgICAgICAgICAgIGlmIChwcmV2ICE9PSBudWxsICYmIHRoaXMuZGVsZXRlcyhwcmV2KSkge1xuICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdkZWxldGUnO1xuICAgICAgICAgICAgICAgIG9sZFZhbHVlID0gYXJyYXkubGFzdChwcmV2LmNvbnRlbnQuZ2V0Q29udGVudCgpKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKHByZXYgIT09IG51bGwgJiYgdGhpcy5kZWxldGVzKHByZXYpKSB7XG4gICAgICAgICAgICAgICAgYWN0aW9uID0gJ3VwZGF0ZSc7XG4gICAgICAgICAgICAgICAgb2xkVmFsdWUgPSBhcnJheS5sYXN0KHByZXYuY29udGVudC5nZXRDb250ZW50KCkpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdhZGQnO1xuICAgICAgICAgICAgICAgIG9sZFZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmRlbGV0ZXMoaXRlbSkpIHtcbiAgICAgICAgICAgICAgYWN0aW9uID0gJ2RlbGV0ZSc7XG4gICAgICAgICAgICAgIG9sZFZhbHVlID0gYXJyYXkubGFzdCgvKiogQHR5cGUge0l0ZW19ICovIGl0ZW0uY29udGVudC5nZXRDb250ZW50KCkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmV0dXJuIC8vIG5vcFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBrZXlzLnNldChrZXksIHsgYWN0aW9uLCBvbGRWYWx1ZSB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICB0aGlzLl9rZXlzID0ga2V5cztcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2tleXNcbiAgfVxuXG4gIC8qKlxuICAgKiBAdHlwZSB7QXJyYXk8e2luc2VydD86IHN0cmluZyB8IEFycmF5PGFueT4gfCBvYmplY3QgfCBBYnN0cmFjdFR5cGU8YW55PiwgcmV0YWluPzogbnVtYmVyLCBkZWxldGU/OiBudW1iZXIsIGF0dHJpYnV0ZXM/OiBPYmplY3Q8c3RyaW5nLCBhbnk+fT59XG4gICAqL1xuICBnZXQgZGVsdGEgKCkge1xuICAgIHJldHVybiB0aGlzLmNoYW5nZXMuZGVsdGFcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhIHN0cnVjdCBpcyBhZGRlZCBieSB0aGlzIGV2ZW50LlxuICAgKlxuICAgKiBJbiBjb250cmFzdCB0byBjaGFuZ2UuZGVsZXRlZCwgdGhpcyBtZXRob2QgYWxzbyByZXR1cm5zIHRydWUgaWYgdGhlIHN0cnVjdCB3YXMgYWRkZWQgYW5kIHRoZW4gZGVsZXRlZC5cbiAgICpcbiAgICogQHBhcmFtIHtBYnN0cmFjdFN0cnVjdH0gc3RydWN0XG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBhZGRzIChzdHJ1Y3QpIHtcbiAgICByZXR1cm4gc3RydWN0LmlkLmNsb2NrID49ICh0aGlzLnRyYW5zYWN0aW9uLmJlZm9yZVN0YXRlLmdldChzdHJ1Y3QuaWQuY2xpZW50KSB8fCAwKVxuICB9XG5cbiAgLyoqXG4gICAqIEB0eXBlIHt7YWRkZWQ6U2V0PEl0ZW0+LGRlbGV0ZWQ6U2V0PEl0ZW0+LGtleXM6TWFwPHN0cmluZyx7YWN0aW9uOidhZGQnfCd1cGRhdGUnfCdkZWxldGUnLG9sZFZhbHVlOmFueX0+LGRlbHRhOkFycmF5PHtpbnNlcnQ/OkFycmF5PGFueT58c3RyaW5nLCBkZWxldGU/Om51bWJlciwgcmV0YWluPzpudW1iZXJ9Pn19XG4gICAqL1xuICBnZXQgY2hhbmdlcyAoKSB7XG4gICAgbGV0IGNoYW5nZXMgPSB0aGlzLl9jaGFuZ2VzO1xuICAgIGlmIChjaGFuZ2VzID09PSBudWxsKSB7XG4gICAgICBjb25zdCB0YXJnZXQgPSB0aGlzLnRhcmdldDtcbiAgICAgIGNvbnN0IGFkZGVkID0gc2V0LmNyZWF0ZSgpO1xuICAgICAgY29uc3QgZGVsZXRlZCA9IHNldC5jcmVhdGUoKTtcbiAgICAgIC8qKlxuICAgICAgICogQHR5cGUge0FycmF5PHtpbnNlcnQ6QXJyYXk8YW55Pn18e2RlbGV0ZTpudW1iZXJ9fHtyZXRhaW46bnVtYmVyfT59XG4gICAgICAgKi9cbiAgICAgIGNvbnN0IGRlbHRhID0gW107XG4gICAgICBjaGFuZ2VzID0ge1xuICAgICAgICBhZGRlZCxcbiAgICAgICAgZGVsZXRlZCxcbiAgICAgICAgZGVsdGEsXG4gICAgICAgIGtleXM6IHRoaXMua2V5c1xuICAgICAgfTtcbiAgICAgIGNvbnN0IGNoYW5nZWQgPSAvKiogQHR5cGUgU2V0PHN0cmluZ3xudWxsPiAqLyAodGhpcy50cmFuc2FjdGlvbi5jaGFuZ2VkLmdldCh0YXJnZXQpKTtcbiAgICAgIGlmIChjaGFuZ2VkLmhhcyhudWxsKSkge1xuICAgICAgICAvKipcbiAgICAgICAgICogQHR5cGUge2FueX1cbiAgICAgICAgICovXG4gICAgICAgIGxldCBsYXN0T3AgPSBudWxsO1xuICAgICAgICBjb25zdCBwYWNrT3AgPSAoKSA9PiB7XG4gICAgICAgICAgaWYgKGxhc3RPcCkge1xuICAgICAgICAgICAgZGVsdGEucHVzaChsYXN0T3ApO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgZm9yIChsZXQgaXRlbSA9IHRhcmdldC5fc3RhcnQ7IGl0ZW0gIT09IG51bGw7IGl0ZW0gPSBpdGVtLnJpZ2h0KSB7XG4gICAgICAgICAgaWYgKGl0ZW0uZGVsZXRlZCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuZGVsZXRlcyhpdGVtKSAmJiAhdGhpcy5hZGRzKGl0ZW0pKSB7XG4gICAgICAgICAgICAgIGlmIChsYXN0T3AgPT09IG51bGwgfHwgbGFzdE9wLmRlbGV0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcGFja09wKCk7XG4gICAgICAgICAgICAgICAgbGFzdE9wID0geyBkZWxldGU6IDAgfTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBsYXN0T3AuZGVsZXRlICs9IGl0ZW0ubGVuZ3RoO1xuICAgICAgICAgICAgICBkZWxldGVkLmFkZChpdGVtKTtcbiAgICAgICAgICAgIH0gLy8gZWxzZSBub3BcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHRoaXMuYWRkcyhpdGVtKSkge1xuICAgICAgICAgICAgICBpZiAobGFzdE9wID09PSBudWxsIHx8IGxhc3RPcC5pbnNlcnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHBhY2tPcCgpO1xuICAgICAgICAgICAgICAgIGxhc3RPcCA9IHsgaW5zZXJ0OiBbXSB9O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGxhc3RPcC5pbnNlcnQgPSBsYXN0T3AuaW5zZXJ0LmNvbmNhdChpdGVtLmNvbnRlbnQuZ2V0Q29udGVudCgpKTtcbiAgICAgICAgICAgICAgYWRkZWQuYWRkKGl0ZW0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKGxhc3RPcCA9PT0gbnVsbCB8fCBsYXN0T3AucmV0YWluID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBwYWNrT3AoKTtcbiAgICAgICAgICAgICAgICBsYXN0T3AgPSB7IHJldGFpbjogMCB9O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGxhc3RPcC5yZXRhaW4gKz0gaXRlbS5sZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChsYXN0T3AgIT09IG51bGwgJiYgbGFzdE9wLnJldGFpbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcGFja09wKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMuX2NoYW5nZXMgPSBjaGFuZ2VzO1xuICAgIH1cbiAgICByZXR1cm4gLyoqIEB0eXBlIHthbnl9ICovIChjaGFuZ2VzKVxuICB9XG59XG5cbi8qKlxuICogQ29tcHV0ZSB0aGUgcGF0aCBmcm9tIHRoaXMgdHlwZSB0byB0aGUgc3BlY2lmaWVkIHRhcmdldC5cbiAqXG4gKiBAZXhhbXBsZVxuICogICAvLyBgY2hpbGRgIHNob3VsZCBiZSBhY2Nlc3NpYmxlIHZpYSBgdHlwZS5nZXQocGF0aFswXSkuZ2V0KHBhdGhbMV0pLi5gXG4gKiAgIGNvbnN0IHBhdGggPSB0eXBlLmdldFBhdGhUbyhjaGlsZClcbiAqICAgLy8gYXNzdW1pbmcgYHR5cGUgaW5zdGFuY2VvZiBZQXJyYXlgXG4gKiAgIGNvbnNvbGUubG9nKHBhdGgpIC8vIG1pZ2h0IGxvb2sgbGlrZSA9PiBbMiwgJ2tleTEnXVxuICogICBjaGlsZCA9PT0gdHlwZS5nZXQocGF0aFswXSkuZ2V0KHBhdGhbMV0pXG4gKlxuICogQHBhcmFtIHtBYnN0cmFjdFR5cGU8YW55Pn0gcGFyZW50XG4gKiBAcGFyYW0ge0Fic3RyYWN0VHlwZTxhbnk+fSBjaGlsZCB0YXJnZXRcbiAqIEByZXR1cm4ge0FycmF5PHN0cmluZ3xudW1iZXI+fSBQYXRoIHRvIHRoZSB0YXJnZXRcbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IGdldFBhdGhUbyA9IChwYXJlbnQsIGNoaWxkKSA9PiB7XG4gIGNvbnN0IHBhdGggPSBbXTtcbiAgd2hpbGUgKGNoaWxkLl9pdGVtICE9PSBudWxsICYmIGNoaWxkICE9PSBwYXJlbnQpIHtcbiAgICBpZiAoY2hpbGQuX2l0ZW0ucGFyZW50U3ViICE9PSBudWxsKSB7XG4gICAgICAvLyBwYXJlbnQgaXMgbWFwLWlzaFxuICAgICAgcGF0aC51bnNoaWZ0KGNoaWxkLl9pdGVtLnBhcmVudFN1Yik7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHBhcmVudCBpcyBhcnJheS1pc2hcbiAgICAgIGxldCBpID0gMDtcbiAgICAgIGxldCBjID0gLyoqIEB0eXBlIHtBYnN0cmFjdFR5cGU8YW55Pn0gKi8gKGNoaWxkLl9pdGVtLnBhcmVudCkuX3N0YXJ0O1xuICAgICAgd2hpbGUgKGMgIT09IGNoaWxkLl9pdGVtICYmIGMgIT09IG51bGwpIHtcbiAgICAgICAgaWYgKCFjLmRlbGV0ZWQpIHtcbiAgICAgICAgICBpKys7XG4gICAgICAgIH1cbiAgICAgICAgYyA9IGMucmlnaHQ7XG4gICAgICB9XG4gICAgICBwYXRoLnVuc2hpZnQoaSk7XG4gICAgfVxuICAgIGNoaWxkID0gLyoqIEB0eXBlIHtBYnN0cmFjdFR5cGU8YW55Pn0gKi8gKGNoaWxkLl9pdGVtLnBhcmVudCk7XG4gIH1cbiAgcmV0dXJuIHBhdGhcbn07XG5cbmNvbnN0IG1heFNlYXJjaE1hcmtlciA9IDgwO1xuXG4vKipcbiAqIEEgdW5pcXVlIHRpbWVzdGFtcCB0aGF0IGlkZW50aWZpZXMgZWFjaCBtYXJrZXIuXG4gKlxuICogVGltZSBpcyByZWxhdGl2ZSwuLiB0aGlzIGlzIG1vcmUgbGlrZSBhbiBldmVyLWluY3JlYXNpbmcgY2xvY2suXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqL1xubGV0IGdsb2JhbFNlYXJjaE1hcmtlclRpbWVzdGFtcCA9IDA7XG5cbmNsYXNzIEFycmF5U2VhcmNoTWFya2VyIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7SXRlbX0gcFxuICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAgICovXG4gIGNvbnN0cnVjdG9yIChwLCBpbmRleCkge1xuICAgIHAubWFya2VyID0gdHJ1ZTtcbiAgICB0aGlzLnAgPSBwO1xuICAgIHRoaXMuaW5kZXggPSBpbmRleDtcbiAgICB0aGlzLnRpbWVzdGFtcCA9IGdsb2JhbFNlYXJjaE1hcmtlclRpbWVzdGFtcCsrO1xuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtBcnJheVNlYXJjaE1hcmtlcn0gbWFya2VyXG4gKi9cbmNvbnN0IHJlZnJlc2hNYXJrZXJUaW1lc3RhbXAgPSBtYXJrZXIgPT4geyBtYXJrZXIudGltZXN0YW1wID0gZ2xvYmFsU2VhcmNoTWFya2VyVGltZXN0YW1wKys7IH07XG5cbi8qKlxuICogVGhpcyBpcyByYXRoZXIgY29tcGxleCBzbyB0aGlzIGZ1bmN0aW9uIGlzIHRoZSBvbmx5IHRoaW5nIHRoYXQgc2hvdWxkIG92ZXJ3cml0ZSBhIG1hcmtlclxuICpcbiAqIEBwYXJhbSB7QXJyYXlTZWFyY2hNYXJrZXJ9IG1hcmtlclxuICogQHBhcmFtIHtJdGVtfSBwXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAqL1xuY29uc3Qgb3ZlcndyaXRlTWFya2VyID0gKG1hcmtlciwgcCwgaW5kZXgpID0+IHtcbiAgbWFya2VyLnAubWFya2VyID0gZmFsc2U7XG4gIG1hcmtlci5wID0gcDtcbiAgcC5tYXJrZXIgPSB0cnVlO1xuICBtYXJrZXIuaW5kZXggPSBpbmRleDtcbiAgbWFya2VyLnRpbWVzdGFtcCA9IGdsb2JhbFNlYXJjaE1hcmtlclRpbWVzdGFtcCsrO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge0FycmF5PEFycmF5U2VhcmNoTWFya2VyPn0gc2VhcmNoTWFya2VyXG4gKiBAcGFyYW0ge0l0ZW19IHBcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICovXG5jb25zdCBtYXJrUG9zaXRpb24gPSAoc2VhcmNoTWFya2VyLCBwLCBpbmRleCkgPT4ge1xuICBpZiAoc2VhcmNoTWFya2VyLmxlbmd0aCA+PSBtYXhTZWFyY2hNYXJrZXIpIHtcbiAgICAvLyBvdmVycmlkZSBvbGRlc3QgbWFya2VyICh3ZSBkb24ndCB3YW50IHRvIGNyZWF0ZSBtb3JlIG9iamVjdHMpXG4gICAgY29uc3QgbWFya2VyID0gc2VhcmNoTWFya2VyLnJlZHVjZSgoYSwgYikgPT4gYS50aW1lc3RhbXAgPCBiLnRpbWVzdGFtcCA/IGEgOiBiKTtcbiAgICBvdmVyd3JpdGVNYXJrZXIobWFya2VyLCBwLCBpbmRleCk7XG4gICAgcmV0dXJuIG1hcmtlclxuICB9IGVsc2Uge1xuICAgIC8vIGNyZWF0ZSBuZXcgbWFya2VyXG4gICAgY29uc3QgcG0gPSBuZXcgQXJyYXlTZWFyY2hNYXJrZXIocCwgaW5kZXgpO1xuICAgIHNlYXJjaE1hcmtlci5wdXNoKHBtKTtcbiAgICByZXR1cm4gcG1cbiAgfVxufTtcblxuLyoqXG4gKiBTZWFyY2ggbWFya2VyIGhlbHAgdXMgdG8gZmluZCBwb3NpdGlvbnMgaW4gdGhlIGFzc29jaWF0aXZlIGFycmF5IGZhc3Rlci5cbiAqXG4gKiBUaGV5IHNwZWVkIHVwIHRoZSBwcm9jZXNzIG9mIGZpbmRpbmcgYSBwb3NpdGlvbiB3aXRob3V0IG11Y2ggYm9va2tlZXBpbmcuXG4gKlxuICogQSBtYXhpbXVtIG9mIGBtYXhTZWFyY2hNYXJrZXJgIG9iamVjdHMgYXJlIGNyZWF0ZWQuXG4gKlxuICogVGhpcyBmdW5jdGlvbiBhbHdheXMgcmV0dXJucyBhIHJlZnJlc2hlZCBtYXJrZXIgKHVwZGF0ZWQgdGltZXN0YW1wKVxuICpcbiAqIEBwYXJhbSB7QWJzdHJhY3RUeXBlPGFueT59IHlhcnJheVxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gKi9cbmNvbnN0IGZpbmRNYXJrZXIgPSAoeWFycmF5LCBpbmRleCkgPT4ge1xuICBpZiAoeWFycmF5Ll9zdGFydCA9PT0gbnVsbCB8fCBpbmRleCA9PT0gMCB8fCB5YXJyYXkuX3NlYXJjaE1hcmtlciA9PT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsXG4gIH1cbiAgY29uc3QgbWFya2VyID0geWFycmF5Ll9zZWFyY2hNYXJrZXIubGVuZ3RoID09PSAwID8gbnVsbCA6IHlhcnJheS5fc2VhcmNoTWFya2VyLnJlZHVjZSgoYSwgYikgPT4gbWF0aC5hYnMoaW5kZXggLSBhLmluZGV4KSA8IG1hdGguYWJzKGluZGV4IC0gYi5pbmRleCkgPyBhIDogYik7XG4gIGxldCBwID0geWFycmF5Ll9zdGFydDtcbiAgbGV0IHBpbmRleCA9IDA7XG4gIGlmIChtYXJrZXIgIT09IG51bGwpIHtcbiAgICBwID0gbWFya2VyLnA7XG4gICAgcGluZGV4ID0gbWFya2VyLmluZGV4O1xuICAgIHJlZnJlc2hNYXJrZXJUaW1lc3RhbXAobWFya2VyKTsgLy8gd2UgdXNlZCBpdCwgd2UgbWlnaHQgbmVlZCB0byB1c2UgaXQgYWdhaW5cbiAgfVxuICAvLyBpdGVyYXRlIHRvIHJpZ2h0IGlmIHBvc3NpYmxlXG4gIHdoaWxlIChwLnJpZ2h0ICE9PSBudWxsICYmIHBpbmRleCA8IGluZGV4KSB7XG4gICAgaWYgKCFwLmRlbGV0ZWQgJiYgcC5jb3VudGFibGUpIHtcbiAgICAgIGlmIChpbmRleCA8IHBpbmRleCArIHAubGVuZ3RoKSB7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgICBwaW5kZXggKz0gcC5sZW5ndGg7XG4gICAgfVxuICAgIHAgPSBwLnJpZ2h0O1xuICB9XG4gIC8vIGl0ZXJhdGUgdG8gbGVmdCBpZiBuZWNlc3NhcnkgKG1pZ2h0IGJlIHRoYXQgcGluZGV4ID4gaW5kZXgpXG4gIHdoaWxlIChwLmxlZnQgIT09IG51bGwgJiYgcGluZGV4ID4gaW5kZXgpIHtcbiAgICBwID0gcC5sZWZ0O1xuICAgIGlmICghcC5kZWxldGVkICYmIHAuY291bnRhYmxlKSB7XG4gICAgICBwaW5kZXggLT0gcC5sZW5ndGg7XG4gICAgfVxuICB9XG4gIC8vIHdlIHdhbnQgdG8gbWFrZSBzdXJlIHRoYXQgcCBjYW4ndCBiZSBtZXJnZWQgd2l0aCBsZWZ0LCBiZWNhdXNlIHRoYXQgd291bGQgc2NyZXcgdXAgZXZlcnl0aGluZ1xuICAvLyBpbiB0aGF0IGNhcyBqdXN0IHJldHVybiB3aGF0IHdlIGhhdmUgKGl0IGlzIG1vc3QgbGlrZWx5IHRoZSBiZXN0IG1hcmtlciBhbnl3YXkpXG4gIC8vIGl0ZXJhdGUgdG8gbGVmdCB1bnRpbCBwIGNhbid0IGJlIG1lcmdlZCB3aXRoIGxlZnRcbiAgd2hpbGUgKHAubGVmdCAhPT0gbnVsbCAmJiBwLmxlZnQuaWQuY2xpZW50ID09PSBwLmlkLmNsaWVudCAmJiBwLmxlZnQuaWQuY2xvY2sgKyBwLmxlZnQubGVuZ3RoID09PSBwLmlkLmNsb2NrKSB7XG4gICAgcCA9IHAubGVmdDtcbiAgICBpZiAoIXAuZGVsZXRlZCAmJiBwLmNvdW50YWJsZSkge1xuICAgICAgcGluZGV4IC09IHAubGVuZ3RoO1xuICAgIH1cbiAgfVxuXG4gIC8vIEB0b2RvIHJlbW92ZSFcbiAgLy8gYXNzdXJlIHBvc2l0aW9uXG4gIC8vIHtcbiAgLy8gICBsZXQgc3RhcnQgPSB5YXJyYXkuX3N0YXJ0XG4gIC8vICAgbGV0IHBvcyA9IDBcbiAgLy8gICB3aGlsZSAoc3RhcnQgIT09IHApIHtcbiAgLy8gICAgIGlmICghc3RhcnQuZGVsZXRlZCAmJiBzdGFydC5jb3VudGFibGUpIHtcbiAgLy8gICAgICAgcG9zICs9IHN0YXJ0Lmxlbmd0aFxuICAvLyAgICAgfVxuICAvLyAgICAgc3RhcnQgPSAvKiogQHR5cGUge0l0ZW19ICovIChzdGFydC5yaWdodClcbiAgLy8gICB9XG4gIC8vICAgaWYgKHBvcyAhPT0gcGluZGV4KSB7XG4gIC8vICAgICBkZWJ1Z2dlclxuICAvLyAgICAgdGhyb3cgbmV3IEVycm9yKCdHb3RjaGEgcG9zaXRpb24gZmFpbCEnKVxuICAvLyAgIH1cbiAgLy8gfVxuICAvLyBpZiAobWFya2VyKSB7XG4gIC8vICAgaWYgKHdpbmRvdy5sZW5ndGhlcyA9PSBudWxsKSB7XG4gIC8vICAgICB3aW5kb3cubGVuZ3RoZXMgPSBbXVxuICAvLyAgICAgd2luZG93LmdldExlbmd0aGVzID0gKCkgPT4gd2luZG93Lmxlbmd0aGVzLnNvcnQoKGEsIGIpID0+IGEgLSBiKVxuICAvLyAgIH1cbiAgLy8gICB3aW5kb3cubGVuZ3RoZXMucHVzaChtYXJrZXIuaW5kZXggLSBwaW5kZXgpXG4gIC8vICAgY29uc29sZS5sb2coJ2Rpc3RhbmNlJywgbWFya2VyLmluZGV4IC0gcGluZGV4LCAnbGVuJywgcCAmJiBwLnBhcmVudC5sZW5ndGgpXG4gIC8vIH1cbiAgaWYgKG1hcmtlciAhPT0gbnVsbCAmJiBtYXRoLmFicyhtYXJrZXIuaW5kZXggLSBwaW5kZXgpIDwgLyoqIEB0eXBlIHtZVGV4dHxZQXJyYXk8YW55Pn0gKi8gKHAucGFyZW50KS5sZW5ndGggLyBtYXhTZWFyY2hNYXJrZXIpIHtcbiAgICAvLyBhZGp1c3QgZXhpc3RpbmcgbWFya2VyXG4gICAgb3ZlcndyaXRlTWFya2VyKG1hcmtlciwgcCwgcGluZGV4KTtcbiAgICByZXR1cm4gbWFya2VyXG4gIH0gZWxzZSB7XG4gICAgLy8gY3JlYXRlIG5ldyBtYXJrZXJcbiAgICByZXR1cm4gbWFya1Bvc2l0aW9uKHlhcnJheS5fc2VhcmNoTWFya2VyLCBwLCBwaW5kZXgpXG4gIH1cbn07XG5cbi8qKlxuICogVXBkYXRlIG1hcmtlcnMgd2hlbiBhIGNoYW5nZSBoYXBwZW5lZC5cbiAqXG4gKiBUaGlzIHNob3VsZCBiZSBjYWxsZWQgYmVmb3JlIGRvaW5nIGEgZGVsZXRpb24hXG4gKlxuICogQHBhcmFtIHtBcnJheTxBcnJheVNlYXJjaE1hcmtlcj59IHNlYXJjaE1hcmtlclxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gKiBAcGFyYW0ge251bWJlcn0gbGVuIElmIGluc2VydGlvbiwgbGVuIGlzIHBvc2l0aXZlLiBJZiBkZWxldGlvbiwgbGVuIGlzIG5lZ2F0aXZlLlxuICovXG5jb25zdCB1cGRhdGVNYXJrZXJDaGFuZ2VzID0gKHNlYXJjaE1hcmtlciwgaW5kZXgsIGxlbikgPT4ge1xuICBmb3IgKGxldCBpID0gc2VhcmNoTWFya2VyLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgY29uc3QgbSA9IHNlYXJjaE1hcmtlcltpXTtcbiAgICBpZiAobGVuID4gMCkge1xuICAgICAgLyoqXG4gICAgICAgKiBAdHlwZSB7SXRlbXxudWxsfVxuICAgICAgICovXG4gICAgICBsZXQgcCA9IG0ucDtcbiAgICAgIHAubWFya2VyID0gZmFsc2U7XG4gICAgICAvLyBJZGVhbGx5IHdlIGp1c3Qgd2FudCB0byBkbyBhIHNpbXBsZSBwb3NpdGlvbiBjb21wYXJpc29uLCBidXQgdGhpcyB3aWxsIG9ubHkgd29yayBpZlxuICAgICAgLy8gc2VhcmNoIG1hcmtlcnMgZG9uJ3QgcG9pbnQgdG8gZGVsZXRlZCBpdGVtcyBmb3IgZm9ybWF0cy5cbiAgICAgIC8vIEl0ZXJhdGUgbWFya2VyIHRvIHByZXYgdW5kZWxldGVkIGNvdW50YWJsZSBwb3NpdGlvbiBzbyB3ZSBrbm93IHdoYXQgdG8gZG8gd2hlbiB1cGRhdGluZyBhIHBvc2l0aW9uXG4gICAgICB3aGlsZSAocCAmJiAocC5kZWxldGVkIHx8ICFwLmNvdW50YWJsZSkpIHtcbiAgICAgICAgcCA9IHAubGVmdDtcbiAgICAgICAgaWYgKHAgJiYgIXAuZGVsZXRlZCAmJiBwLmNvdW50YWJsZSkge1xuICAgICAgICAgIC8vIGFkanVzdCBwb3NpdGlvbi4gdGhlIGxvb3Agc2hvdWxkIGJyZWFrIG5vd1xuICAgICAgICAgIG0uaW5kZXggLT0gcC5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChwID09PSBudWxsIHx8IHAubWFya2VyID09PSB0cnVlKSB7XG4gICAgICAgIC8vIHJlbW92ZSBzZWFyY2ggbWFya2VyIGlmIHVwZGF0ZWQgcG9zaXRpb24gaXMgbnVsbCBvciBpZiBwb3NpdGlvbiBpcyBhbHJlYWR5IG1hcmtlZFxuICAgICAgICBzZWFyY2hNYXJrZXIuc3BsaWNlKGksIDEpO1xuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuICAgICAgbS5wID0gcDtcbiAgICAgIHAubWFya2VyID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKGluZGV4IDwgbS5pbmRleCB8fCAobGVuID4gMCAmJiBpbmRleCA9PT0gbS5pbmRleCkpIHsgLy8gYSBzaW1wbGUgaW5kZXggPD0gbS5pbmRleCBjaGVjayB3b3VsZCBhY3R1YWxseSBzdWZmaWNlXG4gICAgICBtLmluZGV4ID0gbWF0aC5tYXgoaW5kZXgsIG0uaW5kZXggKyBsZW4pO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBBY2N1bXVsYXRlIGFsbCAobGlzdCkgY2hpbGRyZW4gb2YgYSB0eXBlIGFuZCByZXR1cm4gdGhlbSBhcyBhbiBBcnJheS5cbiAqXG4gKiBAcGFyYW0ge0Fic3RyYWN0VHlwZTxhbnk+fSB0XG4gKiBAcmV0dXJuIHtBcnJheTxJdGVtPn1cbiAqL1xuY29uc3QgZ2V0VHlwZUNoaWxkcmVuID0gdCA9PiB7XG4gIGxldCBzID0gdC5fc3RhcnQ7XG4gIGNvbnN0IGFyciA9IFtdO1xuICB3aGlsZSAocykge1xuICAgIGFyci5wdXNoKHMpO1xuICAgIHMgPSBzLnJpZ2h0O1xuICB9XG4gIHJldHVybiBhcnJcbn07XG5cbi8qKlxuICogQ2FsbCBldmVudCBsaXN0ZW5lcnMgd2l0aCBhbiBldmVudC4gVGhpcyB3aWxsIGFsc28gYWRkIGFuIGV2ZW50IHRvIGFsbFxuICogcGFyZW50cyAoZm9yIGAub2JzZXJ2ZURlZXBgIGhhbmRsZXJzKS5cbiAqXG4gKiBAdGVtcGxhdGUgRXZlbnRUeXBlXG4gKiBAcGFyYW0ge0Fic3RyYWN0VHlwZTxFdmVudFR5cGU+fSB0eXBlXG4gKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICogQHBhcmFtIHtFdmVudFR5cGV9IGV2ZW50XG4gKi9cbmNvbnN0IGNhbGxUeXBlT2JzZXJ2ZXJzID0gKHR5cGUsIHRyYW5zYWN0aW9uLCBldmVudCkgPT4ge1xuICBjb25zdCBjaGFuZ2VkVHlwZSA9IHR5cGU7XG4gIGNvbnN0IGNoYW5nZWRQYXJlbnRUeXBlcyA9IHRyYW5zYWN0aW9uLmNoYW5nZWRQYXJlbnRUeXBlcztcbiAgd2hpbGUgKHRydWUpIHtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgbWFwLnNldElmVW5kZWZpbmVkKGNoYW5nZWRQYXJlbnRUeXBlcywgdHlwZSwgKCkgPT4gW10pLnB1c2goZXZlbnQpO1xuICAgIGlmICh0eXBlLl9pdGVtID09PSBudWxsKSB7XG4gICAgICBicmVha1xuICAgIH1cbiAgICB0eXBlID0gLyoqIEB0eXBlIHtBYnN0cmFjdFR5cGU8YW55Pn0gKi8gKHR5cGUuX2l0ZW0ucGFyZW50KTtcbiAgfVxuICBjYWxsRXZlbnRIYW5kbGVyTGlzdGVuZXJzKGNoYW5nZWRUeXBlLl9lSCwgZXZlbnQsIHRyYW5zYWN0aW9uKTtcbn07XG5cbi8qKlxuICogQHRlbXBsYXRlIEV2ZW50VHlwZVxuICogQWJzdHJhY3QgWWpzIFR5cGUgY2xhc3NcbiAqL1xuY2xhc3MgQWJzdHJhY3RUeXBlIHtcbiAgY29uc3RydWN0b3IgKCkge1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtJdGVtfG51bGx9XG4gICAgICovXG4gICAgdGhpcy5faXRlbSA9IG51bGw7XG4gICAgLyoqXG4gICAgICogQHR5cGUge01hcDxzdHJpbmcsSXRlbT59XG4gICAgICovXG4gICAgdGhpcy5fbWFwID0gbmV3IE1hcCgpO1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtJdGVtfG51bGx9XG4gICAgICovXG4gICAgdGhpcy5fc3RhcnQgPSBudWxsO1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtEb2N8bnVsbH1cbiAgICAgKi9cbiAgICB0aGlzLmRvYyA9IG51bGw7XG4gICAgdGhpcy5fbGVuZ3RoID0gMDtcbiAgICAvKipcbiAgICAgKiBFdmVudCBoYW5kbGVyc1xuICAgICAqIEB0eXBlIHtFdmVudEhhbmRsZXI8RXZlbnRUeXBlLFRyYW5zYWN0aW9uPn1cbiAgICAgKi9cbiAgICB0aGlzLl9lSCA9IGNyZWF0ZUV2ZW50SGFuZGxlcigpO1xuICAgIC8qKlxuICAgICAqIERlZXAgZXZlbnQgaGFuZGxlcnNcbiAgICAgKiBAdHlwZSB7RXZlbnRIYW5kbGVyPEFycmF5PFlFdmVudDxhbnk+PixUcmFuc2FjdGlvbj59XG4gICAgICovXG4gICAgdGhpcy5fZEVIID0gY3JlYXRlRXZlbnRIYW5kbGVyKCk7XG4gICAgLyoqXG4gICAgICogQHR5cGUge251bGwgfCBBcnJheTxBcnJheVNlYXJjaE1hcmtlcj59XG4gICAgICovXG4gICAgdGhpcy5fc2VhcmNoTWFya2VyID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtBYnN0cmFjdFR5cGU8YW55PnxudWxsfVxuICAgKi9cbiAgZ2V0IHBhcmVudCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2l0ZW0gPyAvKiogQHR5cGUge0Fic3RyYWN0VHlwZTxhbnk+fSAqLyAodGhpcy5faXRlbS5wYXJlbnQpIDogbnVsbFxuICB9XG5cbiAgLyoqXG4gICAqIEludGVncmF0ZSB0aGlzIHR5cGUgaW50byB0aGUgWWpzIGluc3RhbmNlLlxuICAgKlxuICAgKiAqIFNhdmUgdGhpcyBzdHJ1Y3QgaW4gdGhlIG9zXG4gICAqICogVGhpcyB0eXBlIGlzIHNlbnQgdG8gb3RoZXIgY2xpZW50XG4gICAqICogT2JzZXJ2ZXIgZnVuY3Rpb25zIGFyZSBmaXJlZFxuICAgKlxuICAgKiBAcGFyYW0ge0RvY30geSBUaGUgWWpzIGluc3RhbmNlXG4gICAqIEBwYXJhbSB7SXRlbXxudWxsfSBpdGVtXG4gICAqL1xuICBfaW50ZWdyYXRlICh5LCBpdGVtKSB7XG4gICAgdGhpcy5kb2MgPSB5O1xuICAgIHRoaXMuX2l0ZW0gPSBpdGVtO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge0Fic3RyYWN0VHlwZTxFdmVudFR5cGU+fVxuICAgKi9cbiAgX2NvcHkgKCkge1xuICAgIHRocm93IGVycm9yLm1ldGhvZFVuaW1wbGVtZW50ZWQoKVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge0Fic3RyYWN0VHlwZTxFdmVudFR5cGU+fVxuICAgKi9cbiAgY2xvbmUgKCkge1xuICAgIHRocm93IGVycm9yLm1ldGhvZFVuaW1wbGVtZW50ZWQoKVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7VXBkYXRlRW5jb2RlclYxIHwgVXBkYXRlRW5jb2RlclYyfSBlbmNvZGVyXG4gICAqL1xuICBfd3JpdGUgKGVuY29kZXIpIHsgfVxuXG4gIC8qKlxuICAgKiBUaGUgZmlyc3Qgbm9uLWRlbGV0ZWQgaXRlbVxuICAgKi9cbiAgZ2V0IF9maXJzdCAoKSB7XG4gICAgbGV0IG4gPSB0aGlzLl9zdGFydDtcbiAgICB3aGlsZSAobiAhPT0gbnVsbCAmJiBuLmRlbGV0ZWQpIHtcbiAgICAgIG4gPSBuLnJpZ2h0O1xuICAgIH1cbiAgICByZXR1cm4gblxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgWUV2ZW50IGFuZCBjYWxscyBhbGwgdHlwZSBvYnNlcnZlcnMuXG4gICAqIE11c3QgYmUgaW1wbGVtZW50ZWQgYnkgZWFjaCB0eXBlLlxuICAgKlxuICAgKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAcGFyYW0ge1NldDxudWxsfHN0cmluZz59IHBhcmVudFN1YnMgS2V5cyBjaGFuZ2VkIG9uIHRoaXMgdHlwZS4gYG51bGxgIGlmIGxpc3Qgd2FzIG1vZGlmaWVkLlxuICAgKi9cbiAgX2NhbGxPYnNlcnZlciAodHJhbnNhY3Rpb24sIHBhcmVudFN1YnMpIHtcbiAgICBpZiAoIXRyYW5zYWN0aW9uLmxvY2FsICYmIHRoaXMuX3NlYXJjaE1hcmtlcikge1xuICAgICAgdGhpcy5fc2VhcmNoTWFya2VyLmxlbmd0aCA9IDA7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIE9ic2VydmUgYWxsIGV2ZW50cyB0aGF0IGFyZSBjcmVhdGVkIG9uIHRoaXMgdHlwZS5cbiAgICpcbiAgICogQHBhcmFtIHtmdW5jdGlvbihFdmVudFR5cGUsIFRyYW5zYWN0aW9uKTp2b2lkfSBmIE9ic2VydmVyIGZ1bmN0aW9uXG4gICAqL1xuICBvYnNlcnZlIChmKSB7XG4gICAgYWRkRXZlbnRIYW5kbGVyTGlzdGVuZXIodGhpcy5fZUgsIGYpO1xuICB9XG5cbiAgLyoqXG4gICAqIE9ic2VydmUgYWxsIGV2ZW50cyB0aGF0IGFyZSBjcmVhdGVkIGJ5IHRoaXMgdHlwZSBhbmQgaXRzIGNoaWxkcmVuLlxuICAgKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKEFycmF5PFlFdmVudDxhbnk+PixUcmFuc2FjdGlvbik6dm9pZH0gZiBPYnNlcnZlciBmdW5jdGlvblxuICAgKi9cbiAgb2JzZXJ2ZURlZXAgKGYpIHtcbiAgICBhZGRFdmVudEhhbmRsZXJMaXN0ZW5lcih0aGlzLl9kRUgsIGYpO1xuICB9XG5cbiAgLyoqXG4gICAqIFVucmVnaXN0ZXIgYW4gb2JzZXJ2ZXIgZnVuY3Rpb24uXG4gICAqXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oRXZlbnRUeXBlLFRyYW5zYWN0aW9uKTp2b2lkfSBmIE9ic2VydmVyIGZ1bmN0aW9uXG4gICAqL1xuICB1bm9ic2VydmUgKGYpIHtcbiAgICByZW1vdmVFdmVudEhhbmRsZXJMaXN0ZW5lcih0aGlzLl9lSCwgZik7XG4gIH1cblxuICAvKipcbiAgICogVW5yZWdpc3RlciBhbiBvYnNlcnZlciBmdW5jdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHtmdW5jdGlvbihBcnJheTxZRXZlbnQ8YW55Pj4sVHJhbnNhY3Rpb24pOnZvaWR9IGYgT2JzZXJ2ZXIgZnVuY3Rpb25cbiAgICovXG4gIHVub2JzZXJ2ZURlZXAgKGYpIHtcbiAgICByZW1vdmVFdmVudEhhbmRsZXJMaXN0ZW5lcih0aGlzLl9kRUgsIGYpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBhYnN0cmFjdFxuICAgKiBAcmV0dXJuIHthbnl9XG4gICAqL1xuICB0b0pTT04gKCkge31cbn1cblxuLyoqXG4gKiBAcGFyYW0ge0Fic3RyYWN0VHlwZTxhbnk+fSB0eXBlXG4gKiBAcGFyYW0ge251bWJlcn0gc3RhcnRcbiAqIEBwYXJhbSB7bnVtYmVyfSBlbmRcbiAqIEByZXR1cm4ge0FycmF5PGFueT59XG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCB0eXBlTGlzdFNsaWNlID0gKHR5cGUsIHN0YXJ0LCBlbmQpID0+IHtcbiAgaWYgKHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ID0gdHlwZS5fbGVuZ3RoICsgc3RhcnQ7XG4gIH1cbiAgaWYgKGVuZCA8IDApIHtcbiAgICBlbmQgPSB0eXBlLl9sZW5ndGggKyBlbmQ7XG4gIH1cbiAgbGV0IGxlbiA9IGVuZCAtIHN0YXJ0O1xuICBjb25zdCBjcyA9IFtdO1xuICBsZXQgbiA9IHR5cGUuX3N0YXJ0O1xuICB3aGlsZSAobiAhPT0gbnVsbCAmJiBsZW4gPiAwKSB7XG4gICAgaWYgKG4uY291bnRhYmxlICYmICFuLmRlbGV0ZWQpIHtcbiAgICAgIGNvbnN0IGMgPSBuLmNvbnRlbnQuZ2V0Q29udGVudCgpO1xuICAgICAgaWYgKGMubGVuZ3RoIDw9IHN0YXJ0KSB7XG4gICAgICAgIHN0YXJ0IC09IGMubGVuZ3RoO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgYy5sZW5ndGggJiYgbGVuID4gMDsgaSsrKSB7XG4gICAgICAgICAgY3MucHVzaChjW2ldKTtcbiAgICAgICAgICBsZW4tLTtcbiAgICAgICAgfVxuICAgICAgICBzdGFydCA9IDA7XG4gICAgICB9XG4gICAgfVxuICAgIG4gPSBuLnJpZ2h0O1xuICB9XG4gIHJldHVybiBjc1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge0Fic3RyYWN0VHlwZTxhbnk+fSB0eXBlXG4gKiBAcmV0dXJuIHtBcnJheTxhbnk+fVxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgdHlwZUxpc3RUb0FycmF5ID0gdHlwZSA9PiB7XG4gIGNvbnN0IGNzID0gW107XG4gIGxldCBuID0gdHlwZS5fc3RhcnQ7XG4gIHdoaWxlIChuICE9PSBudWxsKSB7XG4gICAgaWYgKG4uY291bnRhYmxlICYmICFuLmRlbGV0ZWQpIHtcbiAgICAgIGNvbnN0IGMgPSBuLmNvbnRlbnQuZ2V0Q29udGVudCgpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNzLnB1c2goY1tpXSk7XG4gICAgICB9XG4gICAgfVxuICAgIG4gPSBuLnJpZ2h0O1xuICB9XG4gIHJldHVybiBjc1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge0Fic3RyYWN0VHlwZTxhbnk+fSB0eXBlXG4gKiBAcGFyYW0ge1NuYXBzaG90fSBzbmFwc2hvdFxuICogQHJldHVybiB7QXJyYXk8YW55Pn1cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IHR5cGVMaXN0VG9BcnJheVNuYXBzaG90ID0gKHR5cGUsIHNuYXBzaG90KSA9PiB7XG4gIGNvbnN0IGNzID0gW107XG4gIGxldCBuID0gdHlwZS5fc3RhcnQ7XG4gIHdoaWxlIChuICE9PSBudWxsKSB7XG4gICAgaWYgKG4uY291bnRhYmxlICYmIGlzVmlzaWJsZShuLCBzbmFwc2hvdCkpIHtcbiAgICAgIGNvbnN0IGMgPSBuLmNvbnRlbnQuZ2V0Q29udGVudCgpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNzLnB1c2goY1tpXSk7XG4gICAgICB9XG4gICAgfVxuICAgIG4gPSBuLnJpZ2h0O1xuICB9XG4gIHJldHVybiBjc1xufTtcblxuLyoqXG4gKiBFeGVjdXRlcyBhIHByb3ZpZGVkIGZ1bmN0aW9uIG9uIG9uY2Ugb24gb3ZlcnkgZWxlbWVudCBvZiB0aGlzIFlBcnJheS5cbiAqXG4gKiBAcGFyYW0ge0Fic3RyYWN0VHlwZTxhbnk+fSB0eXBlXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKGFueSxudW1iZXIsYW55KTp2b2lkfSBmIEEgZnVuY3Rpb24gdG8gZXhlY3V0ZSBvbiBldmVyeSBlbGVtZW50IG9mIHRoaXMgWUFycmF5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgdHlwZUxpc3RGb3JFYWNoID0gKHR5cGUsIGYpID0+IHtcbiAgbGV0IGluZGV4ID0gMDtcbiAgbGV0IG4gPSB0eXBlLl9zdGFydDtcbiAgd2hpbGUgKG4gIT09IG51bGwpIHtcbiAgICBpZiAobi5jb3VudGFibGUgJiYgIW4uZGVsZXRlZCkge1xuICAgICAgY29uc3QgYyA9IG4uY29udGVudC5nZXRDb250ZW50KCk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZihjW2ldLCBpbmRleCsrLCB0eXBlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgbiA9IG4ucmlnaHQ7XG4gIH1cbn07XG5cbi8qKlxuICogQHRlbXBsYXRlIEMsUlxuICogQHBhcmFtIHtBYnN0cmFjdFR5cGU8YW55Pn0gdHlwZVxuICogQHBhcmFtIHtmdW5jdGlvbihDLG51bWJlcixBYnN0cmFjdFR5cGU8YW55Pik6Un0gZlxuICogQHJldHVybiB7QXJyYXk8Uj59XG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCB0eXBlTGlzdE1hcCA9ICh0eXBlLCBmKSA9PiB7XG4gIC8qKlxuICAgKiBAdHlwZSB7QXJyYXk8YW55Pn1cbiAgICovXG4gIGNvbnN0IHJlc3VsdCA9IFtdO1xuICB0eXBlTGlzdEZvckVhY2godHlwZSwgKGMsIGkpID0+IHtcbiAgICByZXN1bHQucHVzaChmKGMsIGksIHR5cGUpKTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHRcbn07XG5cbi8qKlxuICogQHBhcmFtIHtBYnN0cmFjdFR5cGU8YW55Pn0gdHlwZVxuICogQHJldHVybiB7SXRlcmFibGVJdGVyYXRvcjxhbnk+fVxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgdHlwZUxpc3RDcmVhdGVJdGVyYXRvciA9IHR5cGUgPT4ge1xuICBsZXQgbiA9IHR5cGUuX3N0YXJ0O1xuICAvKipcbiAgICogQHR5cGUge0FycmF5PGFueT58bnVsbH1cbiAgICovXG4gIGxldCBjdXJyZW50Q29udGVudCA9IG51bGw7XG4gIGxldCBjdXJyZW50Q29udGVudEluZGV4ID0gMDtcbiAgcmV0dXJuIHtcbiAgICBbU3ltYm9sLml0ZXJhdG9yXSAoKSB7XG4gICAgICByZXR1cm4gdGhpc1xuICAgIH0sXG4gICAgbmV4dDogKCkgPT4ge1xuICAgICAgLy8gZmluZCBzb21lIGNvbnRlbnRcbiAgICAgIGlmIChjdXJyZW50Q29udGVudCA9PT0gbnVsbCkge1xuICAgICAgICB3aGlsZSAobiAhPT0gbnVsbCAmJiBuLmRlbGV0ZWQpIHtcbiAgICAgICAgICBuID0gbi5yaWdodDtcbiAgICAgICAgfVxuICAgICAgICAvLyBjaGVjayBpZiB3ZSByZWFjaGVkIHRoZSBlbmQsIG5vIG5lZWQgdG8gY2hlY2sgY3VycmVudENvbnRlbnQsIGJlY2F1c2UgaXQgZG9lcyBub3QgZXhpc3RcbiAgICAgICAgaWYgKG4gPT09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZG9uZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB1bmRlZmluZWRcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gd2UgZm91bmQgbiwgc28gd2UgY2FuIHNldCBjdXJyZW50Q29udGVudFxuICAgICAgICBjdXJyZW50Q29udGVudCA9IG4uY29udGVudC5nZXRDb250ZW50KCk7XG4gICAgICAgIGN1cnJlbnRDb250ZW50SW5kZXggPSAwO1xuICAgICAgICBuID0gbi5yaWdodDsgLy8gd2UgdXNlZCB0aGUgY29udGVudCBvZiBuLCBub3cgaXRlcmF0ZSB0byBuZXh0XG4gICAgICB9XG4gICAgICBjb25zdCB2YWx1ZSA9IGN1cnJlbnRDb250ZW50W2N1cnJlbnRDb250ZW50SW5kZXgrK107XG4gICAgICAvLyBjaGVjayBpZiB3ZSBuZWVkIHRvIGVtcHR5IGN1cnJlbnRDb250ZW50XG4gICAgICBpZiAoY3VycmVudENvbnRlbnQubGVuZ3RoIDw9IGN1cnJlbnRDb250ZW50SW5kZXgpIHtcbiAgICAgICAgY3VycmVudENvbnRlbnQgPSBudWxsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZG9uZTogZmFsc2UsXG4gICAgICAgIHZhbHVlXG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7QWJzdHJhY3RUeXBlPGFueT59IHR5cGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICogQHJldHVybiB7YW55fVxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgdHlwZUxpc3RHZXQgPSAodHlwZSwgaW5kZXgpID0+IHtcbiAgY29uc3QgbWFya2VyID0gZmluZE1hcmtlcih0eXBlLCBpbmRleCk7XG4gIGxldCBuID0gdHlwZS5fc3RhcnQ7XG4gIGlmIChtYXJrZXIgIT09IG51bGwpIHtcbiAgICBuID0gbWFya2VyLnA7XG4gICAgaW5kZXggLT0gbWFya2VyLmluZGV4O1xuICB9XG4gIGZvciAoOyBuICE9PSBudWxsOyBuID0gbi5yaWdodCkge1xuICAgIGlmICghbi5kZWxldGVkICYmIG4uY291bnRhYmxlKSB7XG4gICAgICBpZiAoaW5kZXggPCBuLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gbi5jb250ZW50LmdldENvbnRlbnQoKVtpbmRleF1cbiAgICAgIH1cbiAgICAgIGluZGV4IC09IG4ubGVuZ3RoO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICogQHBhcmFtIHtBYnN0cmFjdFR5cGU8YW55Pn0gcGFyZW50XG4gKiBAcGFyYW0ge0l0ZW0/fSByZWZlcmVuY2VJdGVtXG4gKiBAcGFyYW0ge0FycmF5PE9iamVjdDxzdHJpbmcsYW55PnxBcnJheTxhbnk+fGJvb2xlYW58bnVtYmVyfG51bGx8c3RyaW5nfFVpbnQ4QXJyYXk+fSBjb250ZW50XG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCB0eXBlTGlzdEluc2VydEdlbmVyaWNzQWZ0ZXIgPSAodHJhbnNhY3Rpb24sIHBhcmVudCwgcmVmZXJlbmNlSXRlbSwgY29udGVudCkgPT4ge1xuICBsZXQgbGVmdCA9IHJlZmVyZW5jZUl0ZW07XG4gIGNvbnN0IGRvYyA9IHRyYW5zYWN0aW9uLmRvYztcbiAgY29uc3Qgb3duQ2xpZW50SWQgPSBkb2MuY2xpZW50SUQ7XG4gIGNvbnN0IHN0b3JlID0gZG9jLnN0b3JlO1xuICBjb25zdCByaWdodCA9IHJlZmVyZW5jZUl0ZW0gPT09IG51bGwgPyBwYXJlbnQuX3N0YXJ0IDogcmVmZXJlbmNlSXRlbS5yaWdodDtcbiAgLyoqXG4gICAqIEB0eXBlIHtBcnJheTxPYmplY3R8QXJyYXk8YW55PnxudW1iZXJ8bnVsbD59XG4gICAqL1xuICBsZXQganNvbkNvbnRlbnQgPSBbXTtcbiAgY29uc3QgcGFja0pzb25Db250ZW50ID0gKCkgPT4ge1xuICAgIGlmIChqc29uQ29udGVudC5sZW5ndGggPiAwKSB7XG4gICAgICBsZWZ0ID0gbmV3IEl0ZW0oY3JlYXRlSUQob3duQ2xpZW50SWQsIGdldFN0YXRlKHN0b3JlLCBvd25DbGllbnRJZCkpLCBsZWZ0LCBsZWZ0ICYmIGxlZnQubGFzdElkLCByaWdodCwgcmlnaHQgJiYgcmlnaHQuaWQsIHBhcmVudCwgbnVsbCwgbmV3IENvbnRlbnRBbnkoanNvbkNvbnRlbnQpKTtcbiAgICAgIGxlZnQuaW50ZWdyYXRlKHRyYW5zYWN0aW9uLCAwKTtcbiAgICAgIGpzb25Db250ZW50ID0gW107XG4gICAgfVxuICB9O1xuICBjb250ZW50LmZvckVhY2goYyA9PiB7XG4gICAgaWYgKGMgPT09IG51bGwpIHtcbiAgICAgIGpzb25Db250ZW50LnB1c2goYyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXRjaCAoYy5jb25zdHJ1Y3Rvcikge1xuICAgICAgICBjYXNlIE51bWJlcjpcbiAgICAgICAgY2FzZSBPYmplY3Q6XG4gICAgICAgIGNhc2UgQm9vbGVhbjpcbiAgICAgICAgY2FzZSBBcnJheTpcbiAgICAgICAgY2FzZSBTdHJpbmc6XG4gICAgICAgICAganNvbkNvbnRlbnQucHVzaChjKTtcbiAgICAgICAgICBicmVha1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHBhY2tKc29uQ29udGVudCgpO1xuICAgICAgICAgIHN3aXRjaCAoYy5jb25zdHJ1Y3Rvcikge1xuICAgICAgICAgICAgY2FzZSBVaW50OEFycmF5OlxuICAgICAgICAgICAgY2FzZSBBcnJheUJ1ZmZlcjpcbiAgICAgICAgICAgICAgbGVmdCA9IG5ldyBJdGVtKGNyZWF0ZUlEKG93bkNsaWVudElkLCBnZXRTdGF0ZShzdG9yZSwgb3duQ2xpZW50SWQpKSwgbGVmdCwgbGVmdCAmJiBsZWZ0Lmxhc3RJZCwgcmlnaHQsIHJpZ2h0ICYmIHJpZ2h0LmlkLCBwYXJlbnQsIG51bGwsIG5ldyBDb250ZW50QmluYXJ5KG5ldyBVaW50OEFycmF5KC8qKiBAdHlwZSB7VWludDhBcnJheX0gKi8gKGMpKSkpO1xuICAgICAgICAgICAgICBsZWZ0LmludGVncmF0ZSh0cmFuc2FjdGlvbiwgMCk7XG4gICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICBjYXNlIERvYzpcbiAgICAgICAgICAgICAgbGVmdCA9IG5ldyBJdGVtKGNyZWF0ZUlEKG93bkNsaWVudElkLCBnZXRTdGF0ZShzdG9yZSwgb3duQ2xpZW50SWQpKSwgbGVmdCwgbGVmdCAmJiBsZWZ0Lmxhc3RJZCwgcmlnaHQsIHJpZ2h0ICYmIHJpZ2h0LmlkLCBwYXJlbnQsIG51bGwsIG5ldyBDb250ZW50RG9jKC8qKiBAdHlwZSB7RG9jfSAqLyAoYykpKTtcbiAgICAgICAgICAgICAgbGVmdC5pbnRlZ3JhdGUodHJhbnNhY3Rpb24sIDApO1xuICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgaWYgKGMgaW5zdGFuY2VvZiBBYnN0cmFjdFR5cGUpIHtcbiAgICAgICAgICAgICAgICBsZWZ0ID0gbmV3IEl0ZW0oY3JlYXRlSUQob3duQ2xpZW50SWQsIGdldFN0YXRlKHN0b3JlLCBvd25DbGllbnRJZCkpLCBsZWZ0LCBsZWZ0ICYmIGxlZnQubGFzdElkLCByaWdodCwgcmlnaHQgJiYgcmlnaHQuaWQsIHBhcmVudCwgbnVsbCwgbmV3IENvbnRlbnRUeXBlKGMpKTtcbiAgICAgICAgICAgICAgICBsZWZ0LmludGVncmF0ZSh0cmFuc2FjdGlvbiwgMCk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmV4cGVjdGVkIGNvbnRlbnQgdHlwZSBpbiBpbnNlcnQgb3BlcmF0aW9uJylcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICBwYWNrSnNvbkNvbnRlbnQoKTtcbn07XG5cbmNvbnN0IGxlbmd0aEV4Y2VlZGVkID0gZXJyb3IuY3JlYXRlKCdMZW5ndGggZXhjZWVkZWQhJyk7XG5cbi8qKlxuICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAqIEBwYXJhbSB7QWJzdHJhY3RUeXBlPGFueT59IHBhcmVudFxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gKiBAcGFyYW0ge0FycmF5PE9iamVjdDxzdHJpbmcsYW55PnxBcnJheTxhbnk+fG51bWJlcnxudWxsfHN0cmluZ3xVaW50OEFycmF5Pn0gY29udGVudFxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgdHlwZUxpc3RJbnNlcnRHZW5lcmljcyA9ICh0cmFuc2FjdGlvbiwgcGFyZW50LCBpbmRleCwgY29udGVudCkgPT4ge1xuICBpZiAoaW5kZXggPiBwYXJlbnQuX2xlbmd0aCkge1xuICAgIHRocm93IGxlbmd0aEV4Y2VlZGVkXG4gIH1cbiAgaWYgKGluZGV4ID09PSAwKSB7XG4gICAgaWYgKHBhcmVudC5fc2VhcmNoTWFya2VyKSB7XG4gICAgICB1cGRhdGVNYXJrZXJDaGFuZ2VzKHBhcmVudC5fc2VhcmNoTWFya2VyLCBpbmRleCwgY29udGVudC5sZW5ndGgpO1xuICAgIH1cbiAgICByZXR1cm4gdHlwZUxpc3RJbnNlcnRHZW5lcmljc0FmdGVyKHRyYW5zYWN0aW9uLCBwYXJlbnQsIG51bGwsIGNvbnRlbnQpXG4gIH1cbiAgY29uc3Qgc3RhcnRJbmRleCA9IGluZGV4O1xuICBjb25zdCBtYXJrZXIgPSBmaW5kTWFya2VyKHBhcmVudCwgaW5kZXgpO1xuICBsZXQgbiA9IHBhcmVudC5fc3RhcnQ7XG4gIGlmIChtYXJrZXIgIT09IG51bGwpIHtcbiAgICBuID0gbWFya2VyLnA7XG4gICAgaW5kZXggLT0gbWFya2VyLmluZGV4O1xuICAgIC8vIHdlIG5lZWQgdG8gaXRlcmF0ZSBvbmUgdG8gdGhlIGxlZnQgc28gdGhhdCB0aGUgYWxnb3JpdGhtIHdvcmtzXG4gICAgaWYgKGluZGV4ID09PSAwKSB7XG4gICAgICAvLyBAdG9kbyByZWZhY3RvciB0aGlzIGFzIGl0IGFjdHVhbGx5IGRvZXNuJ3QgY29uc2lkZXIgZm9ybWF0c1xuICAgICAgbiA9IG4ucHJldjsgLy8gaW1wb3J0YW50ISBnZXQgdGhlIGxlZnQgdW5kZWxldGVkIGl0ZW0gc28gdGhhdCB3ZSBjYW4gYWN0dWFsbHkgZGVjcmVhc2UgaW5kZXhcbiAgICAgIGluZGV4ICs9IChuICYmIG4uY291bnRhYmxlICYmICFuLmRlbGV0ZWQpID8gbi5sZW5ndGggOiAwO1xuICAgIH1cbiAgfVxuICBmb3IgKDsgbiAhPT0gbnVsbDsgbiA9IG4ucmlnaHQpIHtcbiAgICBpZiAoIW4uZGVsZXRlZCAmJiBuLmNvdW50YWJsZSkge1xuICAgICAgaWYgKGluZGV4IDw9IG4ubGVuZ3RoKSB7XG4gICAgICAgIGlmIChpbmRleCA8IG4ubGVuZ3RoKSB7XG4gICAgICAgICAgLy8gaW5zZXJ0IGluLWJldHdlZW5cbiAgICAgICAgICBnZXRJdGVtQ2xlYW5TdGFydCh0cmFuc2FjdGlvbiwgY3JlYXRlSUQobi5pZC5jbGllbnQsIG4uaWQuY2xvY2sgKyBpbmRleCkpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgICBpbmRleCAtPSBuLmxlbmd0aDtcbiAgICB9XG4gIH1cbiAgaWYgKHBhcmVudC5fc2VhcmNoTWFya2VyKSB7XG4gICAgdXBkYXRlTWFya2VyQ2hhbmdlcyhwYXJlbnQuX3NlYXJjaE1hcmtlciwgc3RhcnRJbmRleCwgY29udGVudC5sZW5ndGgpO1xuICB9XG4gIHJldHVybiB0eXBlTGlzdEluc2VydEdlbmVyaWNzQWZ0ZXIodHJhbnNhY3Rpb24sIHBhcmVudCwgbiwgY29udGVudClcbn07XG5cbi8qKlxuICogUHVzaGluZyBjb250ZW50IGlzIHNwZWNpYWwgYXMgd2UgZ2VuZXJhbGx5IHdhbnQgdG8gcHVzaCBhZnRlciB0aGUgbGFzdCBpdGVtLiBTbyB3ZSBkb24ndCBoYXZlIHRvIHVwZGF0ZVxuICogdGhlIHNlcmFjaCBtYXJrZXIuXG4gKlxuICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAqIEBwYXJhbSB7QWJzdHJhY3RUeXBlPGFueT59IHBhcmVudFxuICogQHBhcmFtIHtBcnJheTxPYmplY3Q8c3RyaW5nLGFueT58QXJyYXk8YW55PnxudW1iZXJ8bnVsbHxzdHJpbmd8VWludDhBcnJheT59IGNvbnRlbnRcbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IHR5cGVMaXN0UHVzaEdlbmVyaWNzID0gKHRyYW5zYWN0aW9uLCBwYXJlbnQsIGNvbnRlbnQpID0+IHtcbiAgLy8gVXNlIHRoZSBtYXJrZXIgd2l0aCB0aGUgaGlnaGVzdCBpbmRleCBhbmQgaXRlcmF0ZSB0byB0aGUgcmlnaHQuXG4gIGNvbnN0IG1hcmtlciA9IChwYXJlbnQuX3NlYXJjaE1hcmtlciB8fCBbXSkucmVkdWNlKChtYXhNYXJrZXIsIGN1cnJNYXJrZXIpID0+IGN1cnJNYXJrZXIuaW5kZXggPiBtYXhNYXJrZXIuaW5kZXggPyBjdXJyTWFya2VyIDogbWF4TWFya2VyLCB7IGluZGV4OiAwLCBwOiBwYXJlbnQuX3N0YXJ0IH0pO1xuICBsZXQgbiA9IG1hcmtlci5wO1xuICBpZiAobikge1xuICAgIHdoaWxlIChuLnJpZ2h0KSB7XG4gICAgICBuID0gbi5yaWdodDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHR5cGVMaXN0SW5zZXJ0R2VuZXJpY3NBZnRlcih0cmFuc2FjdGlvbiwgcGFyZW50LCBuLCBjb250ZW50KVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICogQHBhcmFtIHtBYnN0cmFjdFR5cGU8YW55Pn0gcGFyZW50XG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGhcbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IHR5cGVMaXN0RGVsZXRlID0gKHRyYW5zYWN0aW9uLCBwYXJlbnQsIGluZGV4LCBsZW5ndGgpID0+IHtcbiAgaWYgKGxlbmd0aCA9PT0gMCkgeyByZXR1cm4gfVxuICBjb25zdCBzdGFydEluZGV4ID0gaW5kZXg7XG4gIGNvbnN0IHN0YXJ0TGVuZ3RoID0gbGVuZ3RoO1xuICBjb25zdCBtYXJrZXIgPSBmaW5kTWFya2VyKHBhcmVudCwgaW5kZXgpO1xuICBsZXQgbiA9IHBhcmVudC5fc3RhcnQ7XG4gIGlmIChtYXJrZXIgIT09IG51bGwpIHtcbiAgICBuID0gbWFya2VyLnA7XG4gICAgaW5kZXggLT0gbWFya2VyLmluZGV4O1xuICB9XG4gIC8vIGNvbXB1dGUgdGhlIGZpcnN0IGl0ZW0gdG8gYmUgZGVsZXRlZFxuICBmb3IgKDsgbiAhPT0gbnVsbCAmJiBpbmRleCA+IDA7IG4gPSBuLnJpZ2h0KSB7XG4gICAgaWYgKCFuLmRlbGV0ZWQgJiYgbi5jb3VudGFibGUpIHtcbiAgICAgIGlmIChpbmRleCA8IG4ubGVuZ3RoKSB7XG4gICAgICAgIGdldEl0ZW1DbGVhblN0YXJ0KHRyYW5zYWN0aW9uLCBjcmVhdGVJRChuLmlkLmNsaWVudCwgbi5pZC5jbG9jayArIGluZGV4KSk7XG4gICAgICB9XG4gICAgICBpbmRleCAtPSBuLmxlbmd0aDtcbiAgICB9XG4gIH1cbiAgLy8gZGVsZXRlIGFsbCBpdGVtcyB1bnRpbCBkb25lXG4gIHdoaWxlIChsZW5ndGggPiAwICYmIG4gIT09IG51bGwpIHtcbiAgICBpZiAoIW4uZGVsZXRlZCkge1xuICAgICAgaWYgKGxlbmd0aCA8IG4ubGVuZ3RoKSB7XG4gICAgICAgIGdldEl0ZW1DbGVhblN0YXJ0KHRyYW5zYWN0aW9uLCBjcmVhdGVJRChuLmlkLmNsaWVudCwgbi5pZC5jbG9jayArIGxlbmd0aCkpO1xuICAgICAgfVxuICAgICAgbi5kZWxldGUodHJhbnNhY3Rpb24pO1xuICAgICAgbGVuZ3RoIC09IG4ubGVuZ3RoO1xuICAgIH1cbiAgICBuID0gbi5yaWdodDtcbiAgfVxuICBpZiAobGVuZ3RoID4gMCkge1xuICAgIHRocm93IGxlbmd0aEV4Y2VlZGVkXG4gIH1cbiAgaWYgKHBhcmVudC5fc2VhcmNoTWFya2VyKSB7XG4gICAgdXBkYXRlTWFya2VyQ2hhbmdlcyhwYXJlbnQuX3NlYXJjaE1hcmtlciwgc3RhcnRJbmRleCwgLXN0YXJ0TGVuZ3RoICsgbGVuZ3RoIC8qIGluIGNhc2Ugd2UgcmVtb3ZlIHRoZSBhYm92ZSBleGNlcHRpb24gKi8pO1xuICB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gKiBAcGFyYW0ge0Fic3RyYWN0VHlwZTxhbnk+fSBwYXJlbnRcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXlcbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IHR5cGVNYXBEZWxldGUgPSAodHJhbnNhY3Rpb24sIHBhcmVudCwga2V5KSA9PiB7XG4gIGNvbnN0IGMgPSBwYXJlbnQuX21hcC5nZXQoa2V5KTtcbiAgaWYgKGMgIT09IHVuZGVmaW5lZCkge1xuICAgIGMuZGVsZXRlKHRyYW5zYWN0aW9uKTtcbiAgfVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICogQHBhcmFtIHtBYnN0cmFjdFR5cGU8YW55Pn0gcGFyZW50XG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gKiBAcGFyYW0ge09iamVjdHxudW1iZXJ8bnVsbHxBcnJheTxhbnk+fHN0cmluZ3xVaW50OEFycmF5fEFic3RyYWN0VHlwZTxhbnk+fSB2YWx1ZVxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgdHlwZU1hcFNldCA9ICh0cmFuc2FjdGlvbiwgcGFyZW50LCBrZXksIHZhbHVlKSA9PiB7XG4gIGNvbnN0IGxlZnQgPSBwYXJlbnQuX21hcC5nZXQoa2V5KSB8fCBudWxsO1xuICBjb25zdCBkb2MgPSB0cmFuc2FjdGlvbi5kb2M7XG4gIGNvbnN0IG93bkNsaWVudElkID0gZG9jLmNsaWVudElEO1xuICBsZXQgY29udGVudDtcbiAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICBjb250ZW50ID0gbmV3IENvbnRlbnRBbnkoW3ZhbHVlXSk7XG4gIH0gZWxzZSB7XG4gICAgc3dpdGNoICh2YWx1ZS5jb25zdHJ1Y3Rvcikge1xuICAgICAgY2FzZSBOdW1iZXI6XG4gICAgICBjYXNlIE9iamVjdDpcbiAgICAgIGNhc2UgQm9vbGVhbjpcbiAgICAgIGNhc2UgQXJyYXk6XG4gICAgICBjYXNlIFN0cmluZzpcbiAgICAgICAgY29udGVudCA9IG5ldyBDb250ZW50QW55KFt2YWx1ZV0pO1xuICAgICAgICBicmVha1xuICAgICAgY2FzZSBVaW50OEFycmF5OlxuICAgICAgICBjb250ZW50ID0gbmV3IENvbnRlbnRCaW5hcnkoLyoqIEB0eXBlIHtVaW50OEFycmF5fSAqLyAodmFsdWUpKTtcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgRG9jOlxuICAgICAgICBjb250ZW50ID0gbmV3IENvbnRlbnREb2MoLyoqIEB0eXBlIHtEb2N9ICovICh2YWx1ZSkpO1xuICAgICAgICBicmVha1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgQWJzdHJhY3RUeXBlKSB7XG4gICAgICAgICAgY29udGVudCA9IG5ldyBDb250ZW50VHlwZSh2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmV4cGVjdGVkIGNvbnRlbnQgdHlwZScpXG4gICAgICAgIH1cbiAgICB9XG4gIH1cbiAgbmV3IEl0ZW0oY3JlYXRlSUQob3duQ2xpZW50SWQsIGdldFN0YXRlKGRvYy5zdG9yZSwgb3duQ2xpZW50SWQpKSwgbGVmdCwgbGVmdCAmJiBsZWZ0Lmxhc3RJZCwgbnVsbCwgbnVsbCwgcGFyZW50LCBrZXksIGNvbnRlbnQpLmludGVncmF0ZSh0cmFuc2FjdGlvbiwgMCk7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7QWJzdHJhY3RUeXBlPGFueT59IHBhcmVudFxuICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICogQHJldHVybiB7T2JqZWN0PHN0cmluZyxhbnk+fG51bWJlcnxudWxsfEFycmF5PGFueT58c3RyaW5nfFVpbnQ4QXJyYXl8QWJzdHJhY3RUeXBlPGFueT58dW5kZWZpbmVkfVxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgdHlwZU1hcEdldCA9IChwYXJlbnQsIGtleSkgPT4ge1xuICBjb25zdCB2YWwgPSBwYXJlbnQuX21hcC5nZXQoa2V5KTtcbiAgcmV0dXJuIHZhbCAhPT0gdW5kZWZpbmVkICYmICF2YWwuZGVsZXRlZCA/IHZhbC5jb250ZW50LmdldENvbnRlbnQoKVt2YWwubGVuZ3RoIC0gMV0gOiB1bmRlZmluZWRcbn07XG5cbi8qKlxuICogQHBhcmFtIHtBYnN0cmFjdFR5cGU8YW55Pn0gcGFyZW50XG4gKiBAcmV0dXJuIHtPYmplY3Q8c3RyaW5nLE9iamVjdDxzdHJpbmcsYW55PnxudW1iZXJ8bnVsbHxBcnJheTxhbnk+fHN0cmluZ3xVaW50OEFycmF5fEFic3RyYWN0VHlwZTxhbnk+fHVuZGVmaW5lZD59XG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCB0eXBlTWFwR2V0QWxsID0gKHBhcmVudCkgPT4ge1xuICAvKipcbiAgICogQHR5cGUge09iamVjdDxzdHJpbmcsYW55Pn1cbiAgICovXG4gIGNvbnN0IHJlcyA9IHt9O1xuICBwYXJlbnQuX21hcC5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiB7XG4gICAgaWYgKCF2YWx1ZS5kZWxldGVkKSB7XG4gICAgICByZXNba2V5XSA9IHZhbHVlLmNvbnRlbnQuZ2V0Q29udGVudCgpW3ZhbHVlLmxlbmd0aCAtIDFdO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXNcbn07XG5cbi8qKlxuICogQHBhcmFtIHtBYnN0cmFjdFR5cGU8YW55Pn0gcGFyZW50XG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gKiBAcmV0dXJuIHtib29sZWFufVxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgdHlwZU1hcEhhcyA9IChwYXJlbnQsIGtleSkgPT4ge1xuICBjb25zdCB2YWwgPSBwYXJlbnQuX21hcC5nZXQoa2V5KTtcbiAgcmV0dXJuIHZhbCAhPT0gdW5kZWZpbmVkICYmICF2YWwuZGVsZXRlZFxufTtcblxuLyoqXG4gKiBAcGFyYW0ge0Fic3RyYWN0VHlwZTxhbnk+fSBwYXJlbnRcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXlcbiAqIEBwYXJhbSB7U25hcHNob3R9IHNuYXBzaG90XG4gKiBAcmV0dXJuIHtPYmplY3Q8c3RyaW5nLGFueT58bnVtYmVyfG51bGx8QXJyYXk8YW55PnxzdHJpbmd8VWludDhBcnJheXxBYnN0cmFjdFR5cGU8YW55Pnx1bmRlZmluZWR9XG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCB0eXBlTWFwR2V0U25hcHNob3QgPSAocGFyZW50LCBrZXksIHNuYXBzaG90KSA9PiB7XG4gIGxldCB2ID0gcGFyZW50Ll9tYXAuZ2V0KGtleSkgfHwgbnVsbDtcbiAgd2hpbGUgKHYgIT09IG51bGwgJiYgKCFzbmFwc2hvdC5zdi5oYXModi5pZC5jbGllbnQpIHx8IHYuaWQuY2xvY2sgPj0gKHNuYXBzaG90LnN2LmdldCh2LmlkLmNsaWVudCkgfHwgMCkpKSB7XG4gICAgdiA9IHYubGVmdDtcbiAgfVxuICByZXR1cm4gdiAhPT0gbnVsbCAmJiBpc1Zpc2libGUodiwgc25hcHNob3QpID8gdi5jb250ZW50LmdldENvbnRlbnQoKVt2Lmxlbmd0aCAtIDFdIDogdW5kZWZpbmVkXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7TWFwPHN0cmluZyxJdGVtPn0gbWFwXG4gKiBAcmV0dXJuIHtJdGVyYWJsZUl0ZXJhdG9yPEFycmF5PGFueT4+fVxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgY3JlYXRlTWFwSXRlcmF0b3IgPSBtYXAgPT4gaXRlcmF0b3IuaXRlcmF0b3JGaWx0ZXIobWFwLmVudHJpZXMoKSwgLyoqIEBwYXJhbSB7YW55fSBlbnRyeSAqLyBlbnRyeSA9PiAhZW50cnlbMV0uZGVsZXRlZCk7XG5cbi8qKlxuICogQG1vZHVsZSBZQXJyYXlcbiAqL1xuXG4vKipcbiAqIEV2ZW50IHRoYXQgZGVzY3JpYmVzIHRoZSBjaGFuZ2VzIG9uIGEgWUFycmF5XG4gKiBAdGVtcGxhdGUgVFxuICogQGV4dGVuZHMgWUV2ZW50PFlBcnJheTxUPj5cbiAqL1xuY2xhc3MgWUFycmF5RXZlbnQgZXh0ZW5kcyBZRXZlbnQge1xuICAvKipcbiAgICogQHBhcmFtIHtZQXJyYXk8VD59IHlhcnJheSBUaGUgY2hhbmdlZCB0eXBlXG4gICAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uIFRoZSB0cmFuc2FjdGlvbiBvYmplY3RcbiAgICovXG4gIGNvbnN0cnVjdG9yICh5YXJyYXksIHRyYW5zYWN0aW9uKSB7XG4gICAgc3VwZXIoeWFycmF5LCB0cmFuc2FjdGlvbik7XG4gICAgdGhpcy5fdHJhbnNhY3Rpb24gPSB0cmFuc2FjdGlvbjtcbiAgfVxufVxuXG4vKipcbiAqIEEgc2hhcmVkIEFycmF5IGltcGxlbWVudGF0aW9uLlxuICogQHRlbXBsYXRlIFRcbiAqIEBleHRlbmRzIEFic3RyYWN0VHlwZTxZQXJyYXlFdmVudDxUPj5cbiAqIEBpbXBsZW1lbnRzIHtJdGVyYWJsZTxUPn1cbiAqL1xuY2xhc3MgWUFycmF5IGV4dGVuZHMgQWJzdHJhY3RUeXBlIHtcbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHN1cGVyKCk7XG4gICAgLyoqXG4gICAgICogQHR5cGUge0FycmF5PGFueT4/fVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fcHJlbGltQ29udGVudCA9IFtdO1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtBcnJheTxBcnJheVNlYXJjaE1hcmtlcj59XG4gICAgICovXG4gICAgdGhpcy5fc2VhcmNoTWFya2VyID0gW107XG4gIH1cblxuICAvKipcbiAgICogQ29uc3RydWN0IGEgbmV3IFlBcnJheSBjb250YWluaW5nIHRoZSBzcGVjaWZpZWQgaXRlbXMuXG4gICAqIEB0ZW1wbGF0ZSBUXG4gICAqIEBwYXJhbSB7QXJyYXk8VD59IGl0ZW1zXG4gICAqIEByZXR1cm4ge1lBcnJheTxUPn1cbiAgICovXG4gIHN0YXRpYyBmcm9tIChpdGVtcykge1xuICAgIGNvbnN0IGEgPSBuZXcgWUFycmF5KCk7XG4gICAgYS5wdXNoKGl0ZW1zKTtcbiAgICByZXR1cm4gYVxuICB9XG5cbiAgLyoqXG4gICAqIEludGVncmF0ZSB0aGlzIHR5cGUgaW50byB0aGUgWWpzIGluc3RhbmNlLlxuICAgKlxuICAgKiAqIFNhdmUgdGhpcyBzdHJ1Y3QgaW4gdGhlIG9zXG4gICAqICogVGhpcyB0eXBlIGlzIHNlbnQgdG8gb3RoZXIgY2xpZW50XG4gICAqICogT2JzZXJ2ZXIgZnVuY3Rpb25zIGFyZSBmaXJlZFxuICAgKlxuICAgKiBAcGFyYW0ge0RvY30geSBUaGUgWWpzIGluc3RhbmNlXG4gICAqIEBwYXJhbSB7SXRlbX0gaXRlbVxuICAgKi9cbiAgX2ludGVncmF0ZSAoeSwgaXRlbSkge1xuICAgIHN1cGVyLl9pbnRlZ3JhdGUoeSwgaXRlbSk7XG4gICAgdGhpcy5pbnNlcnQoMCwgLyoqIEB0eXBlIHtBcnJheTxhbnk+fSAqLyAodGhpcy5fcHJlbGltQ29udGVudCkpO1xuICAgIHRoaXMuX3ByZWxpbUNvbnRlbnQgPSBudWxsO1xuICB9XG5cbiAgX2NvcHkgKCkge1xuICAgIHJldHVybiBuZXcgWUFycmF5KClcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtZQXJyYXk8VD59XG4gICAqL1xuICBjbG9uZSAoKSB7XG4gICAgY29uc3QgYXJyID0gbmV3IFlBcnJheSgpO1xuICAgIGFyci5pbnNlcnQoMCwgdGhpcy50b0FycmF5KCkubWFwKGVsID0+XG4gICAgICBlbCBpbnN0YW5jZW9mIEFic3RyYWN0VHlwZSA/IGVsLmNsb25lKCkgOiBlbFxuICAgICkpO1xuICAgIHJldHVybiBhcnJcbiAgfVxuXG4gIGdldCBsZW5ndGggKCkge1xuICAgIHJldHVybiB0aGlzLl9wcmVsaW1Db250ZW50ID09PSBudWxsID8gdGhpcy5fbGVuZ3RoIDogdGhpcy5fcHJlbGltQ29udGVudC5sZW5ndGhcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIFlBcnJheUV2ZW50IGFuZCBjYWxscyBvYnNlcnZlcnMuXG4gICAqXG4gICAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBwYXJhbSB7U2V0PG51bGx8c3RyaW5nPn0gcGFyZW50U3VicyBLZXlzIGNoYW5nZWQgb24gdGhpcyB0eXBlLiBgbnVsbGAgaWYgbGlzdCB3YXMgbW9kaWZpZWQuXG4gICAqL1xuICBfY2FsbE9ic2VydmVyICh0cmFuc2FjdGlvbiwgcGFyZW50U3Vicykge1xuICAgIHN1cGVyLl9jYWxsT2JzZXJ2ZXIodHJhbnNhY3Rpb24sIHBhcmVudFN1YnMpO1xuICAgIGNhbGxUeXBlT2JzZXJ2ZXJzKHRoaXMsIHRyYW5zYWN0aW9uLCBuZXcgWUFycmF5RXZlbnQodGhpcywgdHJhbnNhY3Rpb24pKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnNlcnRzIG5ldyBjb250ZW50IGF0IGFuIGluZGV4LlxuICAgKlxuICAgKiBJbXBvcnRhbnQ6IFRoaXMgZnVuY3Rpb24gZXhwZWN0cyBhbiBhcnJheSBvZiBjb250ZW50LiBOb3QganVzdCBhIGNvbnRlbnRcbiAgICogb2JqZWN0LiBUaGUgcmVhc29uIGZvciB0aGlzIFwid2VpcmRuZXNzXCIgaXMgdGhhdCBpbnNlcnRpbmcgc2V2ZXJhbCBlbGVtZW50c1xuICAgKiBpcyB2ZXJ5IGVmZmljaWVudCB3aGVuIGl0IGlzIGRvbmUgYXMgYSBzaW5nbGUgb3BlcmF0aW9uLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiAgLy8gSW5zZXJ0IGNoYXJhY3RlciAnYScgYXQgcG9zaXRpb24gMFxuICAgKiAgeWFycmF5Lmluc2VydCgwLCBbJ2EnXSlcbiAgICogIC8vIEluc2VydCBudW1iZXJzIDEsIDIgYXQgcG9zaXRpb24gMVxuICAgKiAgeWFycmF5Lmluc2VydCgxLCBbMSwgMl0pXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCBUaGUgaW5kZXggdG8gaW5zZXJ0IGNvbnRlbnQgYXQuXG4gICAqIEBwYXJhbSB7QXJyYXk8VD59IGNvbnRlbnQgVGhlIGFycmF5IG9mIGNvbnRlbnRcbiAgICovXG4gIGluc2VydCAoaW5kZXgsIGNvbnRlbnQpIHtcbiAgICBpZiAodGhpcy5kb2MgIT09IG51bGwpIHtcbiAgICAgIHRyYW5zYWN0KHRoaXMuZG9jLCB0cmFuc2FjdGlvbiA9PiB7XG4gICAgICAgIHR5cGVMaXN0SW5zZXJ0R2VuZXJpY3ModHJhbnNhY3Rpb24sIHRoaXMsIGluZGV4LCBjb250ZW50KTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvKiogQHR5cGUge0FycmF5PGFueT59ICovICh0aGlzLl9wcmVsaW1Db250ZW50KS5zcGxpY2UoaW5kZXgsIDAsIC4uLmNvbnRlbnQpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBcHBlbmRzIGNvbnRlbnQgdG8gdGhpcyBZQXJyYXkuXG4gICAqXG4gICAqIEBwYXJhbSB7QXJyYXk8VD59IGNvbnRlbnQgQXJyYXkgb2YgY29udGVudCB0byBhcHBlbmQuXG4gICAqXG4gICAqIEB0b2RvIFVzZSB0aGUgZm9sbG93aW5nIGltcGxlbWVudGF0aW9uIGluIGFsbCB0eXBlcy5cbiAgICovXG4gIHB1c2ggKGNvbnRlbnQpIHtcbiAgICBpZiAodGhpcy5kb2MgIT09IG51bGwpIHtcbiAgICAgIHRyYW5zYWN0KHRoaXMuZG9jLCB0cmFuc2FjdGlvbiA9PiB7XG4gICAgICAgIHR5cGVMaXN0UHVzaEdlbmVyaWNzKHRyYW5zYWN0aW9uLCB0aGlzLCBjb250ZW50KTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvKiogQHR5cGUge0FycmF5PGFueT59ICovICh0aGlzLl9wcmVsaW1Db250ZW50KS5wdXNoKC4uLmNvbnRlbnQpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBQcmVwcGVuZHMgY29udGVudCB0byB0aGlzIFlBcnJheS5cbiAgICpcbiAgICogQHBhcmFtIHtBcnJheTxUPn0gY29udGVudCBBcnJheSBvZiBjb250ZW50IHRvIHByZXBwZW5kLlxuICAgKi9cbiAgdW5zaGlmdCAoY29udGVudCkge1xuICAgIHRoaXMuaW5zZXJ0KDAsIGNvbnRlbnQpO1xuICB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZXMgZWxlbWVudHMgc3RhcnRpbmcgZnJvbSBhbiBpbmRleC5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IEluZGV4IGF0IHdoaWNoIHRvIHN0YXJ0IGRlbGV0aW5nIGVsZW1lbnRzXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGggVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byByZW1vdmUuIERlZmF1bHRzIHRvIDEuXG4gICAqL1xuICBkZWxldGUgKGluZGV4LCBsZW5ndGggPSAxKSB7XG4gICAgaWYgKHRoaXMuZG9jICE9PSBudWxsKSB7XG4gICAgICB0cmFuc2FjdCh0aGlzLmRvYywgdHJhbnNhY3Rpb24gPT4ge1xuICAgICAgICB0eXBlTGlzdERlbGV0ZSh0cmFuc2FjdGlvbiwgdGhpcywgaW5kZXgsIGxlbmd0aCk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLyoqIEB0eXBlIHtBcnJheTxhbnk+fSAqLyAodGhpcy5fcHJlbGltQ29udGVudCkuc3BsaWNlKGluZGV4LCBsZW5ndGgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBpLXRoIGVsZW1lbnQgZnJvbSBhIFlBcnJheS5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IFRoZSBpbmRleCBvZiB0aGUgZWxlbWVudCB0byByZXR1cm4gZnJvbSB0aGUgWUFycmF5XG4gICAqIEByZXR1cm4ge1R9XG4gICAqL1xuICBnZXQgKGluZGV4KSB7XG4gICAgcmV0dXJuIHR5cGVMaXN0R2V0KHRoaXMsIGluZGV4KVxuICB9XG5cbiAgLyoqXG4gICAqIFRyYW5zZm9ybXMgdGhpcyBZQXJyYXkgdG8gYSBKYXZhU2NyaXB0IEFycmF5LlxuICAgKlxuICAgKiBAcmV0dXJuIHtBcnJheTxUPn1cbiAgICovXG4gIHRvQXJyYXkgKCkge1xuICAgIHJldHVybiB0eXBlTGlzdFRvQXJyYXkodGhpcylcbiAgfVxuXG4gIC8qKlxuICAgKiBUcmFuc2Zvcm1zIHRoaXMgWUFycmF5IHRvIGEgSmF2YVNjcmlwdCBBcnJheS5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydF1cbiAgICogQHBhcmFtIHtudW1iZXJ9IFtlbmRdXG4gICAqIEByZXR1cm4ge0FycmF5PFQ+fVxuICAgKi9cbiAgc2xpY2UgKHN0YXJ0ID0gMCwgZW5kID0gdGhpcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gdHlwZUxpc3RTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuICB9XG5cbiAgLyoqXG4gICAqIFRyYW5zZm9ybXMgdGhpcyBTaGFyZWQgVHlwZSB0byBhIEpTT04gb2JqZWN0LlxuICAgKlxuICAgKiBAcmV0dXJuIHtBcnJheTxhbnk+fVxuICAgKi9cbiAgdG9KU09OICgpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoYyA9PiBjIGluc3RhbmNlb2YgQWJzdHJhY3RUeXBlID8gYy50b0pTT04oKSA6IGMpXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbiBBcnJheSB3aXRoIHRoZSByZXN1bHQgb2YgY2FsbGluZyBhIHByb3ZpZGVkIGZ1bmN0aW9uIG9uIGV2ZXJ5XG4gICAqIGVsZW1lbnQgb2YgdGhpcyBZQXJyYXkuXG4gICAqXG4gICAqIEB0ZW1wbGF0ZSBNXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oVCxudW1iZXIsWUFycmF5PFQ+KTpNfSBmIEZ1bmN0aW9uIHRoYXQgcHJvZHVjZXMgYW4gZWxlbWVudCBvZiB0aGUgbmV3IEFycmF5XG4gICAqIEByZXR1cm4ge0FycmF5PE0+fSBBIG5ldyBhcnJheSB3aXRoIGVhY2ggZWxlbWVudCBiZWluZyB0aGUgcmVzdWx0IG9mIHRoZVxuICAgKiAgICAgICAgICAgICAgICAgY2FsbGJhY2sgZnVuY3Rpb25cbiAgICovXG4gIG1hcCAoZikge1xuICAgIHJldHVybiB0eXBlTGlzdE1hcCh0aGlzLCAvKiogQHR5cGUge2FueX0gKi8gKGYpKVxuICB9XG5cbiAgLyoqXG4gICAqIEV4ZWN1dGVzIGEgcHJvdmlkZWQgZnVuY3Rpb24gb24gb25jZSBvbiBvdmVyeSBlbGVtZW50IG9mIHRoaXMgWUFycmF5LlxuICAgKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKFQsbnVtYmVyLFlBcnJheTxUPik6dm9pZH0gZiBBIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgb24gZXZlcnkgZWxlbWVudCBvZiB0aGlzIFlBcnJheS5cbiAgICovXG4gIGZvckVhY2ggKGYpIHtcbiAgICB0eXBlTGlzdEZvckVhY2godGhpcywgZik7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7SXRlcmFibGVJdGVyYXRvcjxUPn1cbiAgICovXG4gIFtTeW1ib2wuaXRlcmF0b3JdICgpIHtcbiAgICByZXR1cm4gdHlwZUxpc3RDcmVhdGVJdGVyYXRvcih0aGlzKVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7VXBkYXRlRW5jb2RlclYxIHwgVXBkYXRlRW5jb2RlclYyfSBlbmNvZGVyXG4gICAqL1xuICBfd3JpdGUgKGVuY29kZXIpIHtcbiAgICBlbmNvZGVyLndyaXRlVHlwZVJlZihZQXJyYXlSZWZJRCk7XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge1VwZGF0ZURlY29kZXJWMSB8IFVwZGF0ZURlY29kZXJWMn0gZGVjb2RlclxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgcmVhZFlBcnJheSA9IGRlY29kZXIgPT4gbmV3IFlBcnJheSgpO1xuXG4vKipcbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAZXh0ZW5kcyBZRXZlbnQ8WU1hcDxUPj5cbiAqIEV2ZW50IHRoYXQgZGVzY3JpYmVzIHRoZSBjaGFuZ2VzIG9uIGEgWU1hcC5cbiAqL1xuY2xhc3MgWU1hcEV2ZW50IGV4dGVuZHMgWUV2ZW50IHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7WU1hcDxUPn0geW1hcCBUaGUgWUFycmF5IHRoYXQgY2hhbmdlZC5cbiAgICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHBhcmFtIHtTZXQ8YW55Pn0gc3VicyBUaGUga2V5cyB0aGF0IGNoYW5nZWQuXG4gICAqL1xuICBjb25zdHJ1Y3RvciAoeW1hcCwgdHJhbnNhY3Rpb24sIHN1YnMpIHtcbiAgICBzdXBlcih5bWFwLCB0cmFuc2FjdGlvbik7XG4gICAgdGhpcy5rZXlzQ2hhbmdlZCA9IHN1YnM7XG4gIH1cbn1cblxuLyoqXG4gKiBAdGVtcGxhdGUgTWFwVHlwZVxuICogQSBzaGFyZWQgTWFwIGltcGxlbWVudGF0aW9uLlxuICpcbiAqIEBleHRlbmRzIEFic3RyYWN0VHlwZTxZTWFwRXZlbnQ8TWFwVHlwZT4+XG4gKiBAaW1wbGVtZW50cyB7SXRlcmFibGU8TWFwVHlwZT59XG4gKi9cbmNsYXNzIFlNYXAgZXh0ZW5kcyBBYnN0cmFjdFR5cGUge1xuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHtJdGVyYWJsZTxyZWFkb25seSBbc3RyaW5nLCBhbnldPj19IGVudHJpZXMgLSBhbiBvcHRpb25hbCBpdGVyYWJsZSB0byBpbml0aWFsaXplIHRoZSBZTWFwXG4gICAqL1xuICBjb25zdHJ1Y3RvciAoZW50cmllcykge1xuICAgIHN1cGVyKCk7XG4gICAgLyoqXG4gICAgICogQHR5cGUge01hcDxzdHJpbmcsYW55Pj99XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9wcmVsaW1Db250ZW50ID0gbnVsbDtcblxuICAgIGlmIChlbnRyaWVzID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuX3ByZWxpbUNvbnRlbnQgPSBuZXcgTWFwKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3ByZWxpbUNvbnRlbnQgPSBuZXcgTWFwKGVudHJpZXMpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBJbnRlZ3JhdGUgdGhpcyB0eXBlIGludG8gdGhlIFlqcyBpbnN0YW5jZS5cbiAgICpcbiAgICogKiBTYXZlIHRoaXMgc3RydWN0IGluIHRoZSBvc1xuICAgKiAqIFRoaXMgdHlwZSBpcyBzZW50IHRvIG90aGVyIGNsaWVudFxuICAgKiAqIE9ic2VydmVyIGZ1bmN0aW9ucyBhcmUgZmlyZWRcbiAgICpcbiAgICogQHBhcmFtIHtEb2N9IHkgVGhlIFlqcyBpbnN0YW5jZVxuICAgKiBAcGFyYW0ge0l0ZW19IGl0ZW1cbiAgICovXG4gIF9pbnRlZ3JhdGUgKHksIGl0ZW0pIHtcbiAgICBzdXBlci5faW50ZWdyYXRlKHksIGl0ZW0pXG4gICAgOy8qKiBAdHlwZSB7TWFwPHN0cmluZywgYW55Pn0gKi8gKHRoaXMuX3ByZWxpbUNvbnRlbnQpLmZvckVhY2goKHZhbHVlLCBrZXkpID0+IHtcbiAgICAgIHRoaXMuc2V0KGtleSwgdmFsdWUpO1xuICAgIH0pO1xuICAgIHRoaXMuX3ByZWxpbUNvbnRlbnQgPSBudWxsO1xuICB9XG5cbiAgX2NvcHkgKCkge1xuICAgIHJldHVybiBuZXcgWU1hcCgpXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7WU1hcDxNYXBUeXBlPn1cbiAgICovXG4gIGNsb25lICgpIHtcbiAgICBjb25zdCBtYXAgPSBuZXcgWU1hcCgpO1xuICAgIHRoaXMuZm9yRWFjaCgodmFsdWUsIGtleSkgPT4ge1xuICAgICAgbWFwLnNldChrZXksIHZhbHVlIGluc3RhbmNlb2YgQWJzdHJhY3RUeXBlID8gdmFsdWUuY2xvbmUoKSA6IHZhbHVlKTtcbiAgICB9KTtcbiAgICByZXR1cm4gbWFwXG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBZTWFwRXZlbnQgYW5kIGNhbGxzIG9ic2VydmVycy5cbiAgICpcbiAgICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHBhcmFtIHtTZXQ8bnVsbHxzdHJpbmc+fSBwYXJlbnRTdWJzIEtleXMgY2hhbmdlZCBvbiB0aGlzIHR5cGUuIGBudWxsYCBpZiBsaXN0IHdhcyBtb2RpZmllZC5cbiAgICovXG4gIF9jYWxsT2JzZXJ2ZXIgKHRyYW5zYWN0aW9uLCBwYXJlbnRTdWJzKSB7XG4gICAgY2FsbFR5cGVPYnNlcnZlcnModGhpcywgdHJhbnNhY3Rpb24sIG5ldyBZTWFwRXZlbnQodGhpcywgdHJhbnNhY3Rpb24sIHBhcmVudFN1YnMpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUcmFuc2Zvcm1zIHRoaXMgU2hhcmVkIFR5cGUgdG8gYSBKU09OIG9iamVjdC5cbiAgICpcbiAgICogQHJldHVybiB7T2JqZWN0PHN0cmluZyxhbnk+fVxuICAgKi9cbiAgdG9KU09OICgpIHtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7T2JqZWN0PHN0cmluZyxNYXBUeXBlPn1cbiAgICAgKi9cbiAgICBjb25zdCBtYXAgPSB7fTtcbiAgICB0aGlzLl9tYXAuZm9yRWFjaCgoaXRlbSwga2V5KSA9PiB7XG4gICAgICBpZiAoIWl0ZW0uZGVsZXRlZCkge1xuICAgICAgICBjb25zdCB2ID0gaXRlbS5jb250ZW50LmdldENvbnRlbnQoKVtpdGVtLmxlbmd0aCAtIDFdO1xuICAgICAgICBtYXBba2V5XSA9IHYgaW5zdGFuY2VvZiBBYnN0cmFjdFR5cGUgPyB2LnRvSlNPTigpIDogdjtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gbWFwXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgc2l6ZSBvZiB0aGUgWU1hcCAoY291bnQgb2Yga2V5L3ZhbHVlIHBhaXJzKVxuICAgKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICBnZXQgc2l6ZSAoKSB7XG4gICAgcmV0dXJuIFsuLi5jcmVhdGVNYXBJdGVyYXRvcih0aGlzLl9tYXApXS5sZW5ndGhcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBrZXlzIGZvciBlYWNoIGVsZW1lbnQgaW4gdGhlIFlNYXAgVHlwZS5cbiAgICpcbiAgICogQHJldHVybiB7SXRlcmFibGVJdGVyYXRvcjxzdHJpbmc+fVxuICAgKi9cbiAga2V5cyAoKSB7XG4gICAgcmV0dXJuIGl0ZXJhdG9yLml0ZXJhdG9yTWFwKGNyZWF0ZU1hcEl0ZXJhdG9yKHRoaXMuX21hcCksIC8qKiBAcGFyYW0ge2FueX0gdiAqLyB2ID0+IHZbMF0pXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgdmFsdWVzIGZvciBlYWNoIGVsZW1lbnQgaW4gdGhlIFlNYXAgVHlwZS5cbiAgICpcbiAgICogQHJldHVybiB7SXRlcmFibGVJdGVyYXRvcjxhbnk+fVxuICAgKi9cbiAgdmFsdWVzICgpIHtcbiAgICByZXR1cm4gaXRlcmF0b3IuaXRlcmF0b3JNYXAoY3JlYXRlTWFwSXRlcmF0b3IodGhpcy5fbWFwKSwgLyoqIEBwYXJhbSB7YW55fSB2ICovIHYgPT4gdlsxXS5jb250ZW50LmdldENvbnRlbnQoKVt2WzFdLmxlbmd0aCAtIDFdKVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gSXRlcmF0b3Igb2YgW2tleSwgdmFsdWVdIHBhaXJzXG4gICAqXG4gICAqIEByZXR1cm4ge0l0ZXJhYmxlSXRlcmF0b3I8YW55Pn1cbiAgICovXG4gIGVudHJpZXMgKCkge1xuICAgIHJldHVybiBpdGVyYXRvci5pdGVyYXRvck1hcChjcmVhdGVNYXBJdGVyYXRvcih0aGlzLl9tYXApLCAvKiogQHBhcmFtIHthbnl9IHYgKi8gdiA9PiBbdlswXSwgdlsxXS5jb250ZW50LmdldENvbnRlbnQoKVt2WzFdLmxlbmd0aCAtIDFdXSlcbiAgfVxuXG4gIC8qKlxuICAgKiBFeGVjdXRlcyBhIHByb3ZpZGVkIGZ1bmN0aW9uIG9uIG9uY2Ugb24gZXZlcnkga2V5LXZhbHVlIHBhaXIuXG4gICAqXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oTWFwVHlwZSxzdHJpbmcsWU1hcDxNYXBUeXBlPik6dm9pZH0gZiBBIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgb24gZXZlcnkgZWxlbWVudCBvZiB0aGlzIFlBcnJheS5cbiAgICovXG4gIGZvckVhY2ggKGYpIHtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7T2JqZWN0PHN0cmluZyxNYXBUeXBlPn1cbiAgICAgKi9cbiAgICBjb25zdCBtYXAgPSB7fTtcbiAgICB0aGlzLl9tYXAuZm9yRWFjaCgoaXRlbSwga2V5KSA9PiB7XG4gICAgICBpZiAoIWl0ZW0uZGVsZXRlZCkge1xuICAgICAgICBmKGl0ZW0uY29udGVudC5nZXRDb250ZW50KClbaXRlbS5sZW5ndGggLSAxXSwga2V5LCB0aGlzKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gbWFwXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbiBJdGVyYXRvciBvZiBba2V5LCB2YWx1ZV0gcGFpcnNcbiAgICpcbiAgICogQHJldHVybiB7SXRlcmFibGVJdGVyYXRvcjxhbnk+fVxuICAgKi9cbiAgW1N5bWJvbC5pdGVyYXRvcl0gKCkge1xuICAgIHJldHVybiB0aGlzLmVudHJpZXMoKVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBhIHNwZWNpZmllZCBlbGVtZW50IGZyb20gdGhpcyBZTWFwLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVsZW1lbnQgdG8gcmVtb3ZlLlxuICAgKi9cbiAgZGVsZXRlIChrZXkpIHtcbiAgICBpZiAodGhpcy5kb2MgIT09IG51bGwpIHtcbiAgICAgIHRyYW5zYWN0KHRoaXMuZG9jLCB0cmFuc2FjdGlvbiA9PiB7XG4gICAgICAgIHR5cGVNYXBEZWxldGUodHJhbnNhY3Rpb24sIHRoaXMsIGtleSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLyoqIEB0eXBlIHtNYXA8c3RyaW5nLCBhbnk+fSAqLyAodGhpcy5fcHJlbGltQ29udGVudCkuZGVsZXRlKGtleSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgb3IgdXBkYXRlcyBhbiBlbGVtZW50IHdpdGggYSBzcGVjaWZpZWQga2V5IGFuZCB2YWx1ZS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbGVtZW50IHRvIGFkZCB0byB0aGlzIFlNYXBcbiAgICogQHBhcmFtIHtNYXBUeXBlfSB2YWx1ZSBUaGUgdmFsdWUgb2YgdGhlIGVsZW1lbnQgdG8gYWRkXG4gICAqL1xuICBzZXQgKGtleSwgdmFsdWUpIHtcbiAgICBpZiAodGhpcy5kb2MgIT09IG51bGwpIHtcbiAgICAgIHRyYW5zYWN0KHRoaXMuZG9jLCB0cmFuc2FjdGlvbiA9PiB7XG4gICAgICAgIHR5cGVNYXBTZXQodHJhbnNhY3Rpb24sIHRoaXMsIGtleSwgdmFsdWUpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8qKiBAdHlwZSB7TWFwPHN0cmluZywgYW55Pn0gKi8gKHRoaXMuX3ByZWxpbUNvbnRlbnQpLnNldChrZXksIHZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIHNwZWNpZmllZCBlbGVtZW50IGZyb20gdGhpcyBZTWFwLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gICAqIEByZXR1cm4ge01hcFR5cGV8dW5kZWZpbmVkfVxuICAgKi9cbiAgZ2V0IChrZXkpIHtcbiAgICByZXR1cm4gLyoqIEB0eXBlIHthbnl9ICovICh0eXBlTWFwR2V0KHRoaXMsIGtleSkpXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIGJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQga2V5IGV4aXN0cyBvciBub3QuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSB0byB0ZXN0LlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgaGFzIChrZXkpIHtcbiAgICByZXR1cm4gdHlwZU1hcEhhcyh0aGlzLCBrZXkpXG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBhbGwgZWxlbWVudHMgZnJvbSB0aGlzIFlNYXAuXG4gICAqL1xuICBjbGVhciAoKSB7XG4gICAgaWYgKHRoaXMuZG9jICE9PSBudWxsKSB7XG4gICAgICB0cmFuc2FjdCh0aGlzLmRvYywgdHJhbnNhY3Rpb24gPT4ge1xuICAgICAgICB0aGlzLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlLCBrZXksIG1hcCkge1xuICAgICAgICAgIHR5cGVNYXBEZWxldGUodHJhbnNhY3Rpb24sIG1hcCwga2V5KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLyoqIEB0eXBlIHtNYXA8c3RyaW5nLCBhbnk+fSAqLyAodGhpcy5fcHJlbGltQ29udGVudCkuY2xlYXIoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtVcGRhdGVFbmNvZGVyVjEgfCBVcGRhdGVFbmNvZGVyVjJ9IGVuY29kZXJcbiAgICovXG4gIF93cml0ZSAoZW5jb2Rlcikge1xuICAgIGVuY29kZXIud3JpdGVUeXBlUmVmKFlNYXBSZWZJRCk7XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge1VwZGF0ZURlY29kZXJWMSB8IFVwZGF0ZURlY29kZXJWMn0gZGVjb2RlclxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgcmVhZFlNYXAgPSBkZWNvZGVyID0+IG5ldyBZTWFwKCk7XG5cbi8qKlxuICogQHBhcmFtIHthbnl9IGFcbiAqIEBwYXJhbSB7YW55fSBiXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5jb25zdCBlcXVhbEF0dHJzID0gKGEsIGIpID0+IGEgPT09IGIgfHwgKHR5cGVvZiBhID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgYiA9PT0gJ29iamVjdCcgJiYgYSAmJiBiICYmIG9iamVjdC5lcXVhbEZsYXQoYSwgYikpO1xuXG5jbGFzcyBJdGVtVGV4dExpc3RQb3NpdGlvbiB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge0l0ZW18bnVsbH0gbGVmdFxuICAgKiBAcGFyYW0ge0l0ZW18bnVsbH0gcmlnaHRcbiAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gICAqIEBwYXJhbSB7TWFwPHN0cmluZyxhbnk+fSBjdXJyZW50QXR0cmlidXRlc1xuICAgKi9cbiAgY29uc3RydWN0b3IgKGxlZnQsIHJpZ2h0LCBpbmRleCwgY3VycmVudEF0dHJpYnV0ZXMpIHtcbiAgICB0aGlzLmxlZnQgPSBsZWZ0O1xuICAgIHRoaXMucmlnaHQgPSByaWdodDtcbiAgICB0aGlzLmluZGV4ID0gaW5kZXg7XG4gICAgdGhpcy5jdXJyZW50QXR0cmlidXRlcyA9IGN1cnJlbnRBdHRyaWJ1dGVzO1xuICB9XG5cbiAgLyoqXG4gICAqIE9ubHkgY2FsbCB0aGlzIGlmIHlvdSBrbm93IHRoYXQgdGhpcy5yaWdodCBpcyBkZWZpbmVkXG4gICAqL1xuICBmb3J3YXJkICgpIHtcbiAgICBpZiAodGhpcy5yaWdodCA9PT0gbnVsbCkge1xuICAgICAgZXJyb3IudW5leHBlY3RlZENhc2UoKTtcbiAgICB9XG4gICAgc3dpdGNoICh0aGlzLnJpZ2h0LmNvbnRlbnQuY29uc3RydWN0b3IpIHtcbiAgICAgIGNhc2UgQ29udGVudEZvcm1hdDpcbiAgICAgICAgaWYgKCF0aGlzLnJpZ2h0LmRlbGV0ZWQpIHtcbiAgICAgICAgICB1cGRhdGVDdXJyZW50QXR0cmlidXRlcyh0aGlzLmN1cnJlbnRBdHRyaWJ1dGVzLCAvKiogQHR5cGUge0NvbnRlbnRGb3JtYXR9ICovICh0aGlzLnJpZ2h0LmNvbnRlbnQpKTtcbiAgICAgICAgfVxuICAgICAgICBicmVha1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKCF0aGlzLnJpZ2h0LmRlbGV0ZWQpIHtcbiAgICAgICAgICB0aGlzLmluZGV4ICs9IHRoaXMucmlnaHQubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrXG4gICAgfVxuICAgIHRoaXMubGVmdCA9IHRoaXMucmlnaHQ7XG4gICAgdGhpcy5yaWdodCA9IHRoaXMucmlnaHQucmlnaHQ7XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICogQHBhcmFtIHtJdGVtVGV4dExpc3RQb3NpdGlvbn0gcG9zXG4gKiBAcGFyYW0ge251bWJlcn0gY291bnQgc3RlcHMgdG8gbW92ZSBmb3J3YXJkXG4gKiBAcmV0dXJuIHtJdGVtVGV4dExpc3RQb3NpdGlvbn1cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IGZpbmROZXh0UG9zaXRpb24gPSAodHJhbnNhY3Rpb24sIHBvcywgY291bnQpID0+IHtcbiAgd2hpbGUgKHBvcy5yaWdodCAhPT0gbnVsbCAmJiBjb3VudCA+IDApIHtcbiAgICBzd2l0Y2ggKHBvcy5yaWdodC5jb250ZW50LmNvbnN0cnVjdG9yKSB7XG4gICAgICBjYXNlIENvbnRlbnRGb3JtYXQ6XG4gICAgICAgIGlmICghcG9zLnJpZ2h0LmRlbGV0ZWQpIHtcbiAgICAgICAgICB1cGRhdGVDdXJyZW50QXR0cmlidXRlcyhwb3MuY3VycmVudEF0dHJpYnV0ZXMsIC8qKiBAdHlwZSB7Q29udGVudEZvcm1hdH0gKi8gKHBvcy5yaWdodC5jb250ZW50KSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmICghcG9zLnJpZ2h0LmRlbGV0ZWQpIHtcbiAgICAgICAgICBpZiAoY291bnQgPCBwb3MucmlnaHQubGVuZ3RoKSB7XG4gICAgICAgICAgICAvLyBzcGxpdCByaWdodFxuICAgICAgICAgICAgZ2V0SXRlbUNsZWFuU3RhcnQodHJhbnNhY3Rpb24sIGNyZWF0ZUlEKHBvcy5yaWdodC5pZC5jbGllbnQsIHBvcy5yaWdodC5pZC5jbG9jayArIGNvdW50KSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHBvcy5pbmRleCArPSBwb3MucmlnaHQubGVuZ3RoO1xuICAgICAgICAgIGNvdW50IC09IHBvcy5yaWdodC5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcbiAgICB9XG4gICAgcG9zLmxlZnQgPSBwb3MucmlnaHQ7XG4gICAgcG9zLnJpZ2h0ID0gcG9zLnJpZ2h0LnJpZ2h0O1xuICAgIC8vIHBvcy5mb3J3YXJkKCkgLSB3ZSBkb24ndCBmb3J3YXJkIGJlY2F1c2UgdGhhdCB3b3VsZCBoYWx2ZSB0aGUgcGVyZm9ybWFuY2UgYmVjYXVzZSB3ZSBhbHJlYWR5IGRvIHRoZSBjaGVja3MgYWJvdmVcbiAgfVxuICByZXR1cm4gcG9zXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gKiBAcGFyYW0ge0Fic3RyYWN0VHlwZTxhbnk+fSBwYXJlbnRcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICogQHJldHVybiB7SXRlbVRleHRMaXN0UG9zaXRpb259XG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCBmaW5kUG9zaXRpb24gPSAodHJhbnNhY3Rpb24sIHBhcmVudCwgaW5kZXgpID0+IHtcbiAgY29uc3QgY3VycmVudEF0dHJpYnV0ZXMgPSBuZXcgTWFwKCk7XG4gIGNvbnN0IG1hcmtlciA9IGZpbmRNYXJrZXIocGFyZW50LCBpbmRleCk7XG4gIGlmIChtYXJrZXIpIHtcbiAgICBjb25zdCBwb3MgPSBuZXcgSXRlbVRleHRMaXN0UG9zaXRpb24obWFya2VyLnAubGVmdCwgbWFya2VyLnAsIG1hcmtlci5pbmRleCwgY3VycmVudEF0dHJpYnV0ZXMpO1xuICAgIHJldHVybiBmaW5kTmV4dFBvc2l0aW9uKHRyYW5zYWN0aW9uLCBwb3MsIGluZGV4IC0gbWFya2VyLmluZGV4KVxuICB9IGVsc2Uge1xuICAgIGNvbnN0IHBvcyA9IG5ldyBJdGVtVGV4dExpc3RQb3NpdGlvbihudWxsLCBwYXJlbnQuX3N0YXJ0LCAwLCBjdXJyZW50QXR0cmlidXRlcyk7XG4gICAgcmV0dXJuIGZpbmROZXh0UG9zaXRpb24odHJhbnNhY3Rpb24sIHBvcywgaW5kZXgpXG4gIH1cbn07XG5cbi8qKlxuICogTmVnYXRlIGFwcGxpZWQgZm9ybWF0c1xuICpcbiAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gKiBAcGFyYW0ge0Fic3RyYWN0VHlwZTxhbnk+fSBwYXJlbnRcbiAqIEBwYXJhbSB7SXRlbVRleHRMaXN0UG9zaXRpb259IGN1cnJQb3NcbiAqIEBwYXJhbSB7TWFwPHN0cmluZyxhbnk+fSBuZWdhdGVkQXR0cmlidXRlc1xuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgaW5zZXJ0TmVnYXRlZEF0dHJpYnV0ZXMgPSAodHJhbnNhY3Rpb24sIHBhcmVudCwgY3VyclBvcywgbmVnYXRlZEF0dHJpYnV0ZXMpID0+IHtcbiAgLy8gY2hlY2sgaWYgd2UgcmVhbGx5IG5lZWQgdG8gcmVtb3ZlIGF0dHJpYnV0ZXNcbiAgd2hpbGUgKFxuICAgIGN1cnJQb3MucmlnaHQgIT09IG51bGwgJiYgKFxuICAgICAgY3VyclBvcy5yaWdodC5kZWxldGVkID09PSB0cnVlIHx8IChcbiAgICAgICAgY3VyclBvcy5yaWdodC5jb250ZW50LmNvbnN0cnVjdG9yID09PSBDb250ZW50Rm9ybWF0ICYmXG4gICAgICAgIGVxdWFsQXR0cnMobmVnYXRlZEF0dHJpYnV0ZXMuZ2V0KC8qKiBAdHlwZSB7Q29udGVudEZvcm1hdH0gKi8gKGN1cnJQb3MucmlnaHQuY29udGVudCkua2V5KSwgLyoqIEB0eXBlIHtDb250ZW50Rm9ybWF0fSAqLyAoY3VyclBvcy5yaWdodC5jb250ZW50KS52YWx1ZSlcbiAgICAgIClcbiAgICApXG4gICkge1xuICAgIGlmICghY3VyclBvcy5yaWdodC5kZWxldGVkKSB7XG4gICAgICBuZWdhdGVkQXR0cmlidXRlcy5kZWxldGUoLyoqIEB0eXBlIHtDb250ZW50Rm9ybWF0fSAqLyAoY3VyclBvcy5yaWdodC5jb250ZW50KS5rZXkpO1xuICAgIH1cbiAgICBjdXJyUG9zLmZvcndhcmQoKTtcbiAgfVxuICBjb25zdCBkb2MgPSB0cmFuc2FjdGlvbi5kb2M7XG4gIGNvbnN0IG93bkNsaWVudElkID0gZG9jLmNsaWVudElEO1xuICBuZWdhdGVkQXR0cmlidXRlcy5mb3JFYWNoKCh2YWwsIGtleSkgPT4ge1xuICAgIGNvbnN0IGxlZnQgPSBjdXJyUG9zLmxlZnQ7XG4gICAgY29uc3QgcmlnaHQgPSBjdXJyUG9zLnJpZ2h0O1xuICAgIGNvbnN0IG5leHRGb3JtYXQgPSBuZXcgSXRlbShjcmVhdGVJRChvd25DbGllbnRJZCwgZ2V0U3RhdGUoZG9jLnN0b3JlLCBvd25DbGllbnRJZCkpLCBsZWZ0LCBsZWZ0ICYmIGxlZnQubGFzdElkLCByaWdodCwgcmlnaHQgJiYgcmlnaHQuaWQsIHBhcmVudCwgbnVsbCwgbmV3IENvbnRlbnRGb3JtYXQoa2V5LCB2YWwpKTtcbiAgICBuZXh0Rm9ybWF0LmludGVncmF0ZSh0cmFuc2FjdGlvbiwgMCk7XG4gICAgY3VyclBvcy5yaWdodCA9IG5leHRGb3JtYXQ7XG4gICAgY3VyclBvcy5mb3J3YXJkKCk7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge01hcDxzdHJpbmcsYW55Pn0gY3VycmVudEF0dHJpYnV0ZXNcbiAqIEBwYXJhbSB7Q29udGVudEZvcm1hdH0gZm9ybWF0XG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCB1cGRhdGVDdXJyZW50QXR0cmlidXRlcyA9IChjdXJyZW50QXR0cmlidXRlcywgZm9ybWF0KSA9PiB7XG4gIGNvbnN0IHsga2V5LCB2YWx1ZSB9ID0gZm9ybWF0O1xuICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICBjdXJyZW50QXR0cmlidXRlcy5kZWxldGUoa2V5KTtcbiAgfSBlbHNlIHtcbiAgICBjdXJyZW50QXR0cmlidXRlcy5zZXQoa2V5LCB2YWx1ZSk7XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHtJdGVtVGV4dExpc3RQb3NpdGlvbn0gY3VyclBvc1xuICogQHBhcmFtIHtPYmplY3Q8c3RyaW5nLGFueT59IGF0dHJpYnV0ZXNcbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IG1pbmltaXplQXR0cmlidXRlQ2hhbmdlcyA9IChjdXJyUG9zLCBhdHRyaWJ1dGVzKSA9PiB7XG4gIC8vIGdvIHJpZ2h0IHdoaWxlIGF0dHJpYnV0ZXNbcmlnaHQua2V5XSA9PT0gcmlnaHQudmFsdWUgKG9yIHJpZ2h0IGlzIGRlbGV0ZWQpXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgaWYgKGN1cnJQb3MucmlnaHQgPT09IG51bGwpIHtcbiAgICAgIGJyZWFrXG4gICAgfSBlbHNlIGlmIChjdXJyUG9zLnJpZ2h0LmRlbGV0ZWQgfHwgKGN1cnJQb3MucmlnaHQuY29udGVudC5jb25zdHJ1Y3RvciA9PT0gQ29udGVudEZvcm1hdCAmJiBlcXVhbEF0dHJzKGF0dHJpYnV0ZXNbKC8qKiBAdHlwZSB7Q29udGVudEZvcm1hdH0gKi8gKGN1cnJQb3MucmlnaHQuY29udGVudCkpLmtleV0gfHwgbnVsbCwgLyoqIEB0eXBlIHtDb250ZW50Rm9ybWF0fSAqLyAoY3VyclBvcy5yaWdodC5jb250ZW50KS52YWx1ZSkpKSA7IGVsc2Uge1xuICAgICAgYnJlYWtcbiAgICB9XG4gICAgY3VyclBvcy5mb3J3YXJkKCk7XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAqIEBwYXJhbSB7QWJzdHJhY3RUeXBlPGFueT59IHBhcmVudFxuICogQHBhcmFtIHtJdGVtVGV4dExpc3RQb3NpdGlvbn0gY3VyclBvc1xuICogQHBhcmFtIHtPYmplY3Q8c3RyaW5nLGFueT59IGF0dHJpYnV0ZXNcbiAqIEByZXR1cm4ge01hcDxzdHJpbmcsYW55Pn1cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKiovXG5jb25zdCBpbnNlcnRBdHRyaWJ1dGVzID0gKHRyYW5zYWN0aW9uLCBwYXJlbnQsIGN1cnJQb3MsIGF0dHJpYnV0ZXMpID0+IHtcbiAgY29uc3QgZG9jID0gdHJhbnNhY3Rpb24uZG9jO1xuICBjb25zdCBvd25DbGllbnRJZCA9IGRvYy5jbGllbnRJRDtcbiAgY29uc3QgbmVnYXRlZEF0dHJpYnV0ZXMgPSBuZXcgTWFwKCk7XG4gIC8vIGluc2VydCBmb3JtYXQtc3RhcnQgaXRlbXNcbiAgZm9yIChjb25zdCBrZXkgaW4gYXR0cmlidXRlcykge1xuICAgIGNvbnN0IHZhbCA9IGF0dHJpYnV0ZXNba2V5XTtcbiAgICBjb25zdCBjdXJyZW50VmFsID0gY3VyclBvcy5jdXJyZW50QXR0cmlidXRlcy5nZXQoa2V5KSB8fCBudWxsO1xuICAgIGlmICghZXF1YWxBdHRycyhjdXJyZW50VmFsLCB2YWwpKSB7XG4gICAgICAvLyBzYXZlIG5lZ2F0ZWQgYXR0cmlidXRlIChzZXQgbnVsbCBpZiBjdXJyZW50VmFsIHVuZGVmaW5lZClcbiAgICAgIG5lZ2F0ZWRBdHRyaWJ1dGVzLnNldChrZXksIGN1cnJlbnRWYWwpO1xuICAgICAgY29uc3QgeyBsZWZ0LCByaWdodCB9ID0gY3VyclBvcztcbiAgICAgIGN1cnJQb3MucmlnaHQgPSBuZXcgSXRlbShjcmVhdGVJRChvd25DbGllbnRJZCwgZ2V0U3RhdGUoZG9jLnN0b3JlLCBvd25DbGllbnRJZCkpLCBsZWZ0LCBsZWZ0ICYmIGxlZnQubGFzdElkLCByaWdodCwgcmlnaHQgJiYgcmlnaHQuaWQsIHBhcmVudCwgbnVsbCwgbmV3IENvbnRlbnRGb3JtYXQoa2V5LCB2YWwpKTtcbiAgICAgIGN1cnJQb3MucmlnaHQuaW50ZWdyYXRlKHRyYW5zYWN0aW9uLCAwKTtcbiAgICAgIGN1cnJQb3MuZm9yd2FyZCgpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbmVnYXRlZEF0dHJpYnV0ZXNcbn07XG5cbi8qKlxuICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAqIEBwYXJhbSB7QWJzdHJhY3RUeXBlPGFueT59IHBhcmVudFxuICogQHBhcmFtIHtJdGVtVGV4dExpc3RQb3NpdGlvbn0gY3VyclBvc1xuICogQHBhcmFtIHtzdHJpbmd8b2JqZWN0fEFic3RyYWN0VHlwZTxhbnk+fSB0ZXh0XG4gKiBAcGFyYW0ge09iamVjdDxzdHJpbmcsYW55Pn0gYXR0cmlidXRlc1xuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqKi9cbmNvbnN0IGluc2VydFRleHQgPSAodHJhbnNhY3Rpb24sIHBhcmVudCwgY3VyclBvcywgdGV4dCwgYXR0cmlidXRlcykgPT4ge1xuICBjdXJyUG9zLmN1cnJlbnRBdHRyaWJ1dGVzLmZvckVhY2goKHZhbCwga2V5KSA9PiB7XG4gICAgaWYgKGF0dHJpYnV0ZXNba2V5XSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBhdHRyaWJ1dGVzW2tleV0gPSBudWxsO1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IGRvYyA9IHRyYW5zYWN0aW9uLmRvYztcbiAgY29uc3Qgb3duQ2xpZW50SWQgPSBkb2MuY2xpZW50SUQ7XG4gIG1pbmltaXplQXR0cmlidXRlQ2hhbmdlcyhjdXJyUG9zLCBhdHRyaWJ1dGVzKTtcbiAgY29uc3QgbmVnYXRlZEF0dHJpYnV0ZXMgPSBpbnNlcnRBdHRyaWJ1dGVzKHRyYW5zYWN0aW9uLCBwYXJlbnQsIGN1cnJQb3MsIGF0dHJpYnV0ZXMpO1xuICAvLyBpbnNlcnQgY29udGVudFxuICBjb25zdCBjb250ZW50ID0gdGV4dC5jb25zdHJ1Y3RvciA9PT0gU3RyaW5nID8gbmV3IENvbnRlbnRTdHJpbmcoLyoqIEB0eXBlIHtzdHJpbmd9ICovICh0ZXh0KSkgOiAodGV4dCBpbnN0YW5jZW9mIEFic3RyYWN0VHlwZSA/IG5ldyBDb250ZW50VHlwZSh0ZXh0KSA6IG5ldyBDb250ZW50RW1iZWQodGV4dCkpO1xuICBsZXQgeyBsZWZ0LCByaWdodCwgaW5kZXggfSA9IGN1cnJQb3M7XG4gIGlmIChwYXJlbnQuX3NlYXJjaE1hcmtlcikge1xuICAgIHVwZGF0ZU1hcmtlckNoYW5nZXMocGFyZW50Ll9zZWFyY2hNYXJrZXIsIGN1cnJQb3MuaW5kZXgsIGNvbnRlbnQuZ2V0TGVuZ3RoKCkpO1xuICB9XG4gIHJpZ2h0ID0gbmV3IEl0ZW0oY3JlYXRlSUQob3duQ2xpZW50SWQsIGdldFN0YXRlKGRvYy5zdG9yZSwgb3duQ2xpZW50SWQpKSwgbGVmdCwgbGVmdCAmJiBsZWZ0Lmxhc3RJZCwgcmlnaHQsIHJpZ2h0ICYmIHJpZ2h0LmlkLCBwYXJlbnQsIG51bGwsIGNvbnRlbnQpO1xuICByaWdodC5pbnRlZ3JhdGUodHJhbnNhY3Rpb24sIDApO1xuICBjdXJyUG9zLnJpZ2h0ID0gcmlnaHQ7XG4gIGN1cnJQb3MuaW5kZXggPSBpbmRleDtcbiAgY3VyclBvcy5mb3J3YXJkKCk7XG4gIGluc2VydE5lZ2F0ZWRBdHRyaWJ1dGVzKHRyYW5zYWN0aW9uLCBwYXJlbnQsIGN1cnJQb3MsIG5lZ2F0ZWRBdHRyaWJ1dGVzKTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAqIEBwYXJhbSB7QWJzdHJhY3RUeXBlPGFueT59IHBhcmVudFxuICogQHBhcmFtIHtJdGVtVGV4dExpc3RQb3NpdGlvbn0gY3VyclBvc1xuICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aFxuICogQHBhcmFtIHtPYmplY3Q8c3RyaW5nLGFueT59IGF0dHJpYnV0ZXNcbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IGZvcm1hdFRleHQgPSAodHJhbnNhY3Rpb24sIHBhcmVudCwgY3VyclBvcywgbGVuZ3RoLCBhdHRyaWJ1dGVzKSA9PiB7XG4gIGNvbnN0IGRvYyA9IHRyYW5zYWN0aW9uLmRvYztcbiAgY29uc3Qgb3duQ2xpZW50SWQgPSBkb2MuY2xpZW50SUQ7XG4gIG1pbmltaXplQXR0cmlidXRlQ2hhbmdlcyhjdXJyUG9zLCBhdHRyaWJ1dGVzKTtcbiAgY29uc3QgbmVnYXRlZEF0dHJpYnV0ZXMgPSBpbnNlcnRBdHRyaWJ1dGVzKHRyYW5zYWN0aW9uLCBwYXJlbnQsIGN1cnJQb3MsIGF0dHJpYnV0ZXMpO1xuICAvLyBpdGVyYXRlIHVudGlsIGZpcnN0IG5vbi1mb3JtYXQgb3IgbnVsbCBpcyBmb3VuZFxuICAvLyBkZWxldGUgYWxsIGZvcm1hdHMgd2l0aCBhdHRyaWJ1dGVzW2Zvcm1hdC5rZXldICE9IG51bGxcbiAgLy8gYWxzbyBjaGVjayB0aGUgYXR0cmlidXRlcyBhZnRlciB0aGUgZmlyc3Qgbm9uLWZvcm1hdCBhcyB3ZSBkbyBub3Qgd2FudCB0byBpbnNlcnQgcmVkdW5kYW50IG5lZ2F0ZWQgYXR0cmlidXRlcyB0aGVyZVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbGFiZWxzXG4gIGl0ZXJhdGlvbkxvb3A6IHdoaWxlIChcbiAgICBjdXJyUG9zLnJpZ2h0ICE9PSBudWxsICYmXG4gICAgKGxlbmd0aCA+IDAgfHxcbiAgICAgIChcbiAgICAgICAgbmVnYXRlZEF0dHJpYnV0ZXMuc2l6ZSA+IDAgJiZcbiAgICAgICAgKGN1cnJQb3MucmlnaHQuZGVsZXRlZCB8fCBjdXJyUG9zLnJpZ2h0LmNvbnRlbnQuY29uc3RydWN0b3IgPT09IENvbnRlbnRGb3JtYXQpXG4gICAgICApXG4gICAgKVxuICApIHtcbiAgICBpZiAoIWN1cnJQb3MucmlnaHQuZGVsZXRlZCkge1xuICAgICAgc3dpdGNoIChjdXJyUG9zLnJpZ2h0LmNvbnRlbnQuY29uc3RydWN0b3IpIHtcbiAgICAgICAgY2FzZSBDb250ZW50Rm9ybWF0OiB7XG4gICAgICAgICAgY29uc3QgeyBrZXksIHZhbHVlIH0gPSAvKiogQHR5cGUge0NvbnRlbnRGb3JtYXR9ICovIChjdXJyUG9zLnJpZ2h0LmNvbnRlbnQpO1xuICAgICAgICAgIGNvbnN0IGF0dHIgPSBhdHRyaWJ1dGVzW2tleV07XG4gICAgICAgICAgaWYgKGF0dHIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKGVxdWFsQXR0cnMoYXR0ciwgdmFsdWUpKSB7XG4gICAgICAgICAgICAgIG5lZ2F0ZWRBdHRyaWJ1dGVzLmRlbGV0ZShrZXkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKGxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIC8vIG5vIG5lZWQgdG8gZnVydGhlciBleHRlbmQgbmVnYXRlZEF0dHJpYnV0ZXNcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbGFiZWxzXG4gICAgICAgICAgICAgICAgYnJlYWsgaXRlcmF0aW9uTG9vcFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIG5lZ2F0ZWRBdHRyaWJ1dGVzLnNldChrZXksIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN1cnJQb3MucmlnaHQuZGVsZXRlKHRyYW5zYWN0aW9uKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY3VyclBvcy5jdXJyZW50QXR0cmlidXRlcy5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBpZiAobGVuZ3RoIDwgY3VyclBvcy5yaWdodC5sZW5ndGgpIHtcbiAgICAgICAgICAgIGdldEl0ZW1DbGVhblN0YXJ0KHRyYW5zYWN0aW9uLCBjcmVhdGVJRChjdXJyUG9zLnJpZ2h0LmlkLmNsaWVudCwgY3VyclBvcy5yaWdodC5pZC5jbG9jayArIGxlbmd0aCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsZW5ndGggLT0gY3VyclBvcy5yaWdodC5sZW5ndGg7XG4gICAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gICAgY3VyclBvcy5mb3J3YXJkKCk7XG4gIH1cbiAgLy8gUXVpbGwganVzdCBhc3N1bWVzIHRoYXQgdGhlIGVkaXRvciBzdGFydHMgd2l0aCBhIG5ld2xpbmUgYW5kIHRoYXQgaXQgYWx3YXlzXG4gIC8vIGVuZHMgd2l0aCBhIG5ld2xpbmUuIFdlIG9ubHkgaW5zZXJ0IHRoYXQgbmV3bGluZSB3aGVuIGEgbmV3IG5ld2xpbmUgaXNcbiAgLy8gaW5zZXJ0ZWQgLSBpLmUgd2hlbiBsZW5ndGggaXMgYmlnZ2VyIHRoYW4gdHlwZS5sZW5ndGhcbiAgaWYgKGxlbmd0aCA+IDApIHtcbiAgICBsZXQgbmV3bGluZXMgPSAnJztcbiAgICBmb3IgKDsgbGVuZ3RoID4gMDsgbGVuZ3RoLS0pIHtcbiAgICAgIG5ld2xpbmVzICs9ICdcXG4nO1xuICAgIH1cbiAgICBjdXJyUG9zLnJpZ2h0ID0gbmV3IEl0ZW0oY3JlYXRlSUQob3duQ2xpZW50SWQsIGdldFN0YXRlKGRvYy5zdG9yZSwgb3duQ2xpZW50SWQpKSwgY3VyclBvcy5sZWZ0LCBjdXJyUG9zLmxlZnQgJiYgY3VyclBvcy5sZWZ0Lmxhc3RJZCwgY3VyclBvcy5yaWdodCwgY3VyclBvcy5yaWdodCAmJiBjdXJyUG9zLnJpZ2h0LmlkLCBwYXJlbnQsIG51bGwsIG5ldyBDb250ZW50U3RyaW5nKG5ld2xpbmVzKSk7XG4gICAgY3VyclBvcy5yaWdodC5pbnRlZ3JhdGUodHJhbnNhY3Rpb24sIDApO1xuICAgIGN1cnJQb3MuZm9yd2FyZCgpO1xuICB9XG4gIGluc2VydE5lZ2F0ZWRBdHRyaWJ1dGVzKHRyYW5zYWN0aW9uLCBwYXJlbnQsIGN1cnJQb3MsIG5lZ2F0ZWRBdHRyaWJ1dGVzKTtcbn07XG5cbi8qKlxuICogQ2FsbCB0aGlzIGZ1bmN0aW9uIGFmdGVyIHN0cmluZyBjb250ZW50IGhhcyBiZWVuIGRlbGV0ZWQgaW4gb3JkZXIgdG9cbiAqIGNsZWFuIHVwIGZvcm1hdHRpbmcgSXRlbXMuXG4gKlxuICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAqIEBwYXJhbSB7SXRlbX0gc3RhcnRcbiAqIEBwYXJhbSB7SXRlbXxudWxsfSBjdXJyIGV4Y2x1c2l2ZSBlbmQsIGF1dG9tYXRpY2FsbHkgaXRlcmF0ZXMgdG8gdGhlIG5leHQgQ29udGVudCBJdGVtXG4gKiBAcGFyYW0ge01hcDxzdHJpbmcsYW55Pn0gc3RhcnRBdHRyaWJ1dGVzXG4gKiBAcGFyYW0ge01hcDxzdHJpbmcsYW55Pn0gY3VyckF0dHJpYnV0ZXNcbiAqIEByZXR1cm4ge251bWJlcn0gVGhlIGFtb3VudCBvZiBmb3JtYXR0aW5nIEl0ZW1zIGRlbGV0ZWQuXG4gKlxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IGNsZWFudXBGb3JtYXR0aW5nR2FwID0gKHRyYW5zYWN0aW9uLCBzdGFydCwgY3Vyciwgc3RhcnRBdHRyaWJ1dGVzLCBjdXJyQXR0cmlidXRlcykgPT4ge1xuICBsZXQgZW5kID0gY3VycjtcbiAgY29uc3QgZW5kQXR0cmlidXRlcyA9IG1hcC5jb3B5KGN1cnJBdHRyaWJ1dGVzKTtcbiAgd2hpbGUgKGVuZCAmJiAoIWVuZC5jb3VudGFibGUgfHwgZW5kLmRlbGV0ZWQpKSB7XG4gICAgaWYgKCFlbmQuZGVsZXRlZCAmJiBlbmQuY29udGVudC5jb25zdHJ1Y3RvciA9PT0gQ29udGVudEZvcm1hdCkge1xuICAgICAgdXBkYXRlQ3VycmVudEF0dHJpYnV0ZXMoZW5kQXR0cmlidXRlcywgLyoqIEB0eXBlIHtDb250ZW50Rm9ybWF0fSAqLyAoZW5kLmNvbnRlbnQpKTtcbiAgICB9XG4gICAgZW5kID0gZW5kLnJpZ2h0O1xuICB9XG4gIGxldCBjbGVhbnVwcyA9IDA7XG4gIGxldCByZWFjaGVkRW5kT2ZDdXJyID0gZmFsc2U7XG4gIHdoaWxlIChzdGFydCAhPT0gZW5kKSB7XG4gICAgaWYgKGN1cnIgPT09IHN0YXJ0KSB7XG4gICAgICByZWFjaGVkRW5kT2ZDdXJyID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKCFzdGFydC5kZWxldGVkKSB7XG4gICAgICBjb25zdCBjb250ZW50ID0gc3RhcnQuY29udGVudDtcbiAgICAgIHN3aXRjaCAoY29udGVudC5jb25zdHJ1Y3Rvcikge1xuICAgICAgICBjYXNlIENvbnRlbnRGb3JtYXQ6IHtcbiAgICAgICAgICBjb25zdCB7IGtleSwgdmFsdWUgfSA9IC8qKiBAdHlwZSB7Q29udGVudEZvcm1hdH0gKi8gKGNvbnRlbnQpO1xuICAgICAgICAgIGlmICgoZW5kQXR0cmlidXRlcy5nZXQoa2V5KSB8fCBudWxsKSAhPT0gdmFsdWUgfHwgKHN0YXJ0QXR0cmlidXRlcy5nZXQoa2V5KSB8fCBudWxsKSA9PT0gdmFsdWUpIHtcbiAgICAgICAgICAgIC8vIEVpdGhlciB0aGlzIGZvcm1hdCBpcyBvdmVyd3JpdHRlbiBvciBpdCBpcyBub3QgbmVjZXNzYXJ5IGJlY2F1c2UgdGhlIGF0dHJpYnV0ZSBhbHJlYWR5IGV4aXN0ZWQuXG4gICAgICAgICAgICBzdGFydC5kZWxldGUodHJhbnNhY3Rpb24pO1xuICAgICAgICAgICAgY2xlYW51cHMrKztcbiAgICAgICAgICAgIGlmICghcmVhY2hlZEVuZE9mQ3VyciAmJiAoY3VyckF0dHJpYnV0ZXMuZ2V0KGtleSkgfHwgbnVsbCkgPT09IHZhbHVlICYmIChzdGFydEF0dHJpYnV0ZXMuZ2V0KGtleSkgfHwgbnVsbCkgIT09IHZhbHVlKSB7XG4gICAgICAgICAgICAgIGN1cnJBdHRyaWJ1dGVzLmRlbGV0ZShrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHN0YXJ0ID0gLyoqIEB0eXBlIHtJdGVtfSAqLyAoc3RhcnQucmlnaHQpO1xuICB9XG4gIHJldHVybiBjbGVhbnVwc1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICogQHBhcmFtIHtJdGVtIHwgbnVsbH0gaXRlbVxuICovXG5jb25zdCBjbGVhbnVwQ29udGV4dGxlc3NGb3JtYXR0aW5nR2FwID0gKHRyYW5zYWN0aW9uLCBpdGVtKSA9PiB7XG4gIC8vIGl0ZXJhdGUgdW50aWwgaXRlbS5yaWdodCBpcyBudWxsIG9yIGNvbnRlbnRcbiAgd2hpbGUgKGl0ZW0gJiYgaXRlbS5yaWdodCAmJiAoaXRlbS5yaWdodC5kZWxldGVkIHx8ICFpdGVtLnJpZ2h0LmNvdW50YWJsZSkpIHtcbiAgICBpdGVtID0gaXRlbS5yaWdodDtcbiAgfVxuICBjb25zdCBhdHRycyA9IG5ldyBTZXQoKTtcbiAgLy8gaXRlcmF0ZSBiYWNrIHVudGlsIGEgY29udGVudCBpdGVtIGlzIGZvdW5kXG4gIHdoaWxlIChpdGVtICYmIChpdGVtLmRlbGV0ZWQgfHwgIWl0ZW0uY291bnRhYmxlKSkge1xuICAgIGlmICghaXRlbS5kZWxldGVkICYmIGl0ZW0uY29udGVudC5jb25zdHJ1Y3RvciA9PT0gQ29udGVudEZvcm1hdCkge1xuICAgICAgY29uc3Qga2V5ID0gLyoqIEB0eXBlIHtDb250ZW50Rm9ybWF0fSAqLyAoaXRlbS5jb250ZW50KS5rZXk7XG4gICAgICBpZiAoYXR0cnMuaGFzKGtleSkpIHtcbiAgICAgICAgaXRlbS5kZWxldGUodHJhbnNhY3Rpb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXR0cnMuYWRkKGtleSk7XG4gICAgICB9XG4gICAgfVxuICAgIGl0ZW0gPSBpdGVtLmxlZnQ7XG4gIH1cbn07XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBpcyBleHBlcmltZW50YWwgYW5kIHN1YmplY3QgdG8gY2hhbmdlIC8gYmUgcmVtb3ZlZC5cbiAqXG4gKiBJZGVhbGx5LCB3ZSBkb24ndCBuZWVkIHRoaXMgZnVuY3Rpb24gYXQgYWxsLiBGb3JtYXR0aW5nIGF0dHJpYnV0ZXMgc2hvdWxkIGJlIGNsZWFuZWQgdXBcbiAqIGF1dG9tYXRpY2FsbHkgYWZ0ZXIgZWFjaCBjaGFuZ2UuIFRoaXMgZnVuY3Rpb24gaXRlcmF0ZXMgdHdpY2Ugb3ZlciB0aGUgY29tcGxldGUgWVRleHQgdHlwZVxuICogYW5kIHJlbW92ZXMgdW5uZWNlc3NhcnkgZm9ybWF0dGluZyBhdHRyaWJ1dGVzLiBUaGlzIGlzIGFsc28gaGVscGZ1bCBmb3IgdGVzdGluZy5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIHdvbid0IGJlIGV4cG9ydGVkIGFueW1vcmUgYXMgc29vbiBhcyB0aGVyZSBpcyBjb25maWRlbmNlIHRoYXQgdGhlIFlUZXh0IHR5cGUgd29ya3MgYXMgaW50ZW5kZWQuXG4gKlxuICogQHBhcmFtIHtZVGV4dH0gdHlwZVxuICogQHJldHVybiB7bnVtYmVyfSBIb3cgbWFueSBmb3JtYXR0aW5nIGF0dHJpYnV0ZXMgaGF2ZSBiZWVuIGNsZWFuZWQgdXAuXG4gKi9cbmNvbnN0IGNsZWFudXBZVGV4dEZvcm1hdHRpbmcgPSB0eXBlID0+IHtcbiAgbGV0IHJlcyA9IDA7XG4gIHRyYW5zYWN0KC8qKiBAdHlwZSB7RG9jfSAqLyAodHlwZS5kb2MpLCB0cmFuc2FjdGlvbiA9PiB7XG4gICAgbGV0IHN0YXJ0ID0gLyoqIEB0eXBlIHtJdGVtfSAqLyAodHlwZS5fc3RhcnQpO1xuICAgIGxldCBlbmQgPSB0eXBlLl9zdGFydDtcbiAgICBsZXQgc3RhcnRBdHRyaWJ1dGVzID0gbWFwLmNyZWF0ZSgpO1xuICAgIGNvbnN0IGN1cnJlbnRBdHRyaWJ1dGVzID0gbWFwLmNvcHkoc3RhcnRBdHRyaWJ1dGVzKTtcbiAgICB3aGlsZSAoZW5kKSB7XG4gICAgICBpZiAoZW5kLmRlbGV0ZWQgPT09IGZhbHNlKSB7XG4gICAgICAgIHN3aXRjaCAoZW5kLmNvbnRlbnQuY29uc3RydWN0b3IpIHtcbiAgICAgICAgICBjYXNlIENvbnRlbnRGb3JtYXQ6XG4gICAgICAgICAgICB1cGRhdGVDdXJyZW50QXR0cmlidXRlcyhjdXJyZW50QXR0cmlidXRlcywgLyoqIEB0eXBlIHtDb250ZW50Rm9ybWF0fSAqLyAoZW5kLmNvbnRlbnQpKTtcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJlcyArPSBjbGVhbnVwRm9ybWF0dGluZ0dhcCh0cmFuc2FjdGlvbiwgc3RhcnQsIGVuZCwgc3RhcnRBdHRyaWJ1dGVzLCBjdXJyZW50QXR0cmlidXRlcyk7XG4gICAgICAgICAgICBzdGFydEF0dHJpYnV0ZXMgPSBtYXAuY29weShjdXJyZW50QXR0cmlidXRlcyk7XG4gICAgICAgICAgICBzdGFydCA9IGVuZDtcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVuZCA9IGVuZC5yaWdodDtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gKiBAcGFyYW0ge0l0ZW1UZXh0TGlzdFBvc2l0aW9ufSBjdXJyUG9zXG4gKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoXG4gKiBAcmV0dXJuIHtJdGVtVGV4dExpc3RQb3NpdGlvbn1cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IGRlbGV0ZVRleHQgPSAodHJhbnNhY3Rpb24sIGN1cnJQb3MsIGxlbmd0aCkgPT4ge1xuICBjb25zdCBzdGFydExlbmd0aCA9IGxlbmd0aDtcbiAgY29uc3Qgc3RhcnRBdHRycyA9IG1hcC5jb3B5KGN1cnJQb3MuY3VycmVudEF0dHJpYnV0ZXMpO1xuICBjb25zdCBzdGFydCA9IGN1cnJQb3MucmlnaHQ7XG4gIHdoaWxlIChsZW5ndGggPiAwICYmIGN1cnJQb3MucmlnaHQgIT09IG51bGwpIHtcbiAgICBpZiAoY3VyclBvcy5yaWdodC5kZWxldGVkID09PSBmYWxzZSkge1xuICAgICAgc3dpdGNoIChjdXJyUG9zLnJpZ2h0LmNvbnRlbnQuY29uc3RydWN0b3IpIHtcbiAgICAgICAgY2FzZSBDb250ZW50VHlwZTpcbiAgICAgICAgY2FzZSBDb250ZW50RW1iZWQ6XG4gICAgICAgIGNhc2UgQ29udGVudFN0cmluZzpcbiAgICAgICAgICBpZiAobGVuZ3RoIDwgY3VyclBvcy5yaWdodC5sZW5ndGgpIHtcbiAgICAgICAgICAgIGdldEl0ZW1DbGVhblN0YXJ0KHRyYW5zYWN0aW9uLCBjcmVhdGVJRChjdXJyUG9zLnJpZ2h0LmlkLmNsaWVudCwgY3VyclBvcy5yaWdodC5pZC5jbG9jayArIGxlbmd0aCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsZW5ndGggLT0gY3VyclBvcy5yaWdodC5sZW5ndGg7XG4gICAgICAgICAgY3VyclBvcy5yaWdodC5kZWxldGUodHJhbnNhY3Rpb24pO1xuICAgICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICAgIGN1cnJQb3MuZm9yd2FyZCgpO1xuICB9XG4gIGlmIChzdGFydCkge1xuICAgIGNsZWFudXBGb3JtYXR0aW5nR2FwKHRyYW5zYWN0aW9uLCBzdGFydCwgY3VyclBvcy5yaWdodCwgc3RhcnRBdHRycywgY3VyclBvcy5jdXJyZW50QXR0cmlidXRlcyk7XG4gIH1cbiAgY29uc3QgcGFyZW50ID0gLyoqIEB0eXBlIHtBYnN0cmFjdFR5cGU8YW55Pn0gKi8gKC8qKiBAdHlwZSB7SXRlbX0gKi8gKGN1cnJQb3MubGVmdCB8fCBjdXJyUG9zLnJpZ2h0KS5wYXJlbnQpO1xuICBpZiAocGFyZW50Ll9zZWFyY2hNYXJrZXIpIHtcbiAgICB1cGRhdGVNYXJrZXJDaGFuZ2VzKHBhcmVudC5fc2VhcmNoTWFya2VyLCBjdXJyUG9zLmluZGV4LCAtc3RhcnRMZW5ndGggKyBsZW5ndGgpO1xuICB9XG4gIHJldHVybiBjdXJyUG9zXG59O1xuXG4vKipcbiAqIFRoZSBRdWlsbCBEZWx0YSBmb3JtYXQgcmVwcmVzZW50cyBjaGFuZ2VzIG9uIGEgdGV4dCBkb2N1bWVudCB3aXRoXG4gKiBmb3JtYXR0aW5nIGluZm9ybWF0aW9uLiBGb3IgbW9yIGluZm9ybWF0aW9uIHZpc2l0IHtAbGluayBodHRwczovL3F1aWxsanMuY29tL2RvY3MvZGVsdGEvfFF1aWxsIERlbHRhfVxuICpcbiAqIEBleGFtcGxlXG4gKiAgIHtcbiAqICAgICBvcHM6IFtcbiAqICAgICAgIHsgaW5zZXJ0OiAnR2FuZGFsZicsIGF0dHJpYnV0ZXM6IHsgYm9sZDogdHJ1ZSB9IH0sXG4gKiAgICAgICB7IGluc2VydDogJyB0aGUgJyB9LFxuICogICAgICAgeyBpbnNlcnQ6ICdHcmV5JywgYXR0cmlidXRlczogeyBjb2xvcjogJyNjY2NjY2MnIH0gfVxuICogICAgIF1cbiAqICAgfVxuICpcbiAqL1xuXG4vKipcbiAgKiBBdHRyaWJ1dGVzIHRoYXQgY2FuIGJlIGFzc2lnbmVkIHRvIGEgc2VsZWN0aW9uIG9mIHRleHQuXG4gICpcbiAgKiBAZXhhbXBsZVxuICAqICAge1xuICAqICAgICBib2xkOiB0cnVlLFxuICAqICAgICBmb250LXNpemU6ICc0MHB4J1xuICAqICAgfVxuICAqXG4gICogQHR5cGVkZWYge09iamVjdH0gVGV4dEF0dHJpYnV0ZXNcbiAgKi9cblxuLyoqXG4gKiBAZXh0ZW5kcyBZRXZlbnQ8WVRleHQ+XG4gKiBFdmVudCB0aGF0IGRlc2NyaWJlcyB0aGUgY2hhbmdlcyBvbiBhIFlUZXh0IHR5cGUuXG4gKi9cbmNsYXNzIFlUZXh0RXZlbnQgZXh0ZW5kcyBZRXZlbnQge1xuICAvKipcbiAgICogQHBhcmFtIHtZVGV4dH0geXRleHRcbiAgICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHBhcmFtIHtTZXQ8YW55Pn0gc3VicyBUaGUga2V5cyB0aGF0IGNoYW5nZWRcbiAgICovXG4gIGNvbnN0cnVjdG9yICh5dGV4dCwgdHJhbnNhY3Rpb24sIHN1YnMpIHtcbiAgICBzdXBlcih5dGV4dCwgdHJhbnNhY3Rpb24pO1xuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdGhlIGNoaWxkcmVuIGNoYW5nZWQuXG4gICAgICogQHR5cGUge0Jvb2xlYW59XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLmNoaWxkTGlzdENoYW5nZWQgPSBmYWxzZTtcbiAgICAvKipcbiAgICAgKiBTZXQgb2YgYWxsIGNoYW5nZWQgYXR0cmlidXRlcy5cbiAgICAgKiBAdHlwZSB7U2V0PHN0cmluZz59XG4gICAgICovXG4gICAgdGhpcy5rZXlzQ2hhbmdlZCA9IG5ldyBTZXQoKTtcbiAgICBzdWJzLmZvckVhY2goKHN1YikgPT4ge1xuICAgICAgaWYgKHN1YiA9PT0gbnVsbCkge1xuICAgICAgICB0aGlzLmNoaWxkTGlzdENoYW5nZWQgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5rZXlzQ2hhbmdlZC5hZGQoc3ViKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAdHlwZSB7e2FkZGVkOlNldDxJdGVtPixkZWxldGVkOlNldDxJdGVtPixrZXlzOk1hcDxzdHJpbmcse2FjdGlvbjonYWRkJ3wndXBkYXRlJ3wnZGVsZXRlJyxvbGRWYWx1ZTphbnl9PixkZWx0YTpBcnJheTx7aW5zZXJ0PzpBcnJheTxhbnk+fHN0cmluZywgZGVsZXRlPzpudW1iZXIsIHJldGFpbj86bnVtYmVyfT59fVxuICAgKi9cbiAgZ2V0IGNoYW5nZXMgKCkge1xuICAgIGlmICh0aGlzLl9jaGFuZ2VzID09PSBudWxsKSB7XG4gICAgICAvKipcbiAgICAgICAqIEB0eXBlIHt7YWRkZWQ6U2V0PEl0ZW0+LGRlbGV0ZWQ6U2V0PEl0ZW0+LGtleXM6TWFwPHN0cmluZyx7YWN0aW9uOidhZGQnfCd1cGRhdGUnfCdkZWxldGUnLG9sZFZhbHVlOmFueX0+LGRlbHRhOkFycmF5PHtpbnNlcnQ/OkFycmF5PGFueT58c3RyaW5nfEFic3RyYWN0VHlwZTxhbnk+fG9iamVjdCwgZGVsZXRlPzpudW1iZXIsIHJldGFpbj86bnVtYmVyfT59fVxuICAgICAgICovXG4gICAgICBjb25zdCBjaGFuZ2VzID0ge1xuICAgICAgICBrZXlzOiB0aGlzLmtleXMsXG4gICAgICAgIGRlbHRhOiB0aGlzLmRlbHRhLFxuICAgICAgICBhZGRlZDogbmV3IFNldCgpLFxuICAgICAgICBkZWxldGVkOiBuZXcgU2V0KClcbiAgICAgIH07XG4gICAgICB0aGlzLl9jaGFuZ2VzID0gY2hhbmdlcztcbiAgICB9XG4gICAgcmV0dXJuIC8qKiBAdHlwZSB7YW55fSAqLyAodGhpcy5fY2hhbmdlcylcbiAgfVxuXG4gIC8qKlxuICAgKiBDb21wdXRlIHRoZSBjaGFuZ2VzIGluIHRoZSBkZWx0YSBmb3JtYXQuXG4gICAqIEEge0BsaW5rIGh0dHBzOi8vcXVpbGxqcy5jb20vZG9jcy9kZWx0YS98UXVpbGwgRGVsdGF9KSB0aGF0IHJlcHJlc2VudHMgdGhlIGNoYW5nZXMgb24gdGhlIGRvY3VtZW50LlxuICAgKlxuICAgKiBAdHlwZSB7QXJyYXk8e2luc2VydD86c3RyaW5nfG9iamVjdHxBYnN0cmFjdFR5cGU8YW55PiwgZGVsZXRlPzpudW1iZXIsIHJldGFpbj86bnVtYmVyLCBhdHRyaWJ1dGVzPzogT2JqZWN0PHN0cmluZyxhbnk+fT59XG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIGdldCBkZWx0YSAoKSB7XG4gICAgaWYgKHRoaXMuX2RlbHRhID09PSBudWxsKSB7XG4gICAgICBjb25zdCB5ID0gLyoqIEB0eXBlIHtEb2N9ICovICh0aGlzLnRhcmdldC5kb2MpO1xuICAgICAgLyoqXG4gICAgICAgKiBAdHlwZSB7QXJyYXk8e2luc2VydD86c3RyaW5nfG9iamVjdHxBYnN0cmFjdFR5cGU8YW55PiwgZGVsZXRlPzpudW1iZXIsIHJldGFpbj86bnVtYmVyLCBhdHRyaWJ1dGVzPzogT2JqZWN0PHN0cmluZyxhbnk+fT59XG4gICAgICAgKi9cbiAgICAgIGNvbnN0IGRlbHRhID0gW107XG4gICAgICB0cmFuc2FjdCh5LCB0cmFuc2FjdGlvbiA9PiB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRBdHRyaWJ1dGVzID0gbmV3IE1hcCgpOyAvLyBzYXZlcyBhbGwgY3VycmVudCBhdHRyaWJ1dGVzIGZvciBpbnNlcnRcbiAgICAgICAgY29uc3Qgb2xkQXR0cmlidXRlcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgbGV0IGl0ZW0gPSB0aGlzLnRhcmdldC5fc3RhcnQ7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAdHlwZSB7c3RyaW5nP31cbiAgICAgICAgICovXG4gICAgICAgIGxldCBhY3Rpb24gPSBudWxsO1xuICAgICAgICAvKipcbiAgICAgICAgICogQHR5cGUge09iamVjdDxzdHJpbmcsYW55Pn1cbiAgICAgICAgICovXG4gICAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSB7fTsgLy8gY291bnRzIGFkZGVkIG9yIHJlbW92ZWQgbmV3IGF0dHJpYnV0ZXMgZm9yIHJldGFpblxuICAgICAgICAvKipcbiAgICAgICAgICogQHR5cGUge3N0cmluZ3xvYmplY3R9XG4gICAgICAgICAqL1xuICAgICAgICBsZXQgaW5zZXJ0ID0gJyc7XG4gICAgICAgIGxldCByZXRhaW4gPSAwO1xuICAgICAgICBsZXQgZGVsZXRlTGVuID0gMDtcbiAgICAgICAgY29uc3QgYWRkT3AgPSAoKSA9PiB7XG4gICAgICAgICAgaWYgKGFjdGlvbiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBAdHlwZSB7YW55fVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBsZXQgb3A7XG4gICAgICAgICAgICBzd2l0Y2ggKGFjdGlvbikge1xuICAgICAgICAgICAgICBjYXNlICdkZWxldGUnOlxuICAgICAgICAgICAgICAgIG9wID0geyBkZWxldGU6IGRlbGV0ZUxlbiB9O1xuICAgICAgICAgICAgICAgIGRlbGV0ZUxlbiA9IDA7XG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgY2FzZSAnaW5zZXJ0JzpcbiAgICAgICAgICAgICAgICBvcCA9IHsgaW5zZXJ0IH07XG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRBdHRyaWJ1dGVzLnNpemUgPiAwKSB7XG4gICAgICAgICAgICAgICAgICBvcC5hdHRyaWJ1dGVzID0ge307XG4gICAgICAgICAgICAgICAgICBjdXJyZW50QXR0cmlidXRlcy5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgIG9wLmF0dHJpYnV0ZXNba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaW5zZXJ0ID0gJyc7XG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgY2FzZSAncmV0YWluJzpcbiAgICAgICAgICAgICAgICBvcCA9IHsgcmV0YWluIH07XG4gICAgICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgIG9wLmF0dHJpYnV0ZXMgPSB7fTtcbiAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIGF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgb3AuYXR0cmlidXRlc1trZXldID0gYXR0cmlidXRlc1trZXldO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXRhaW4gPSAwO1xuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWx0YS5wdXNoKG9wKTtcbiAgICAgICAgICAgIGFjdGlvbiA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB3aGlsZSAoaXRlbSAhPT0gbnVsbCkge1xuICAgICAgICAgIHN3aXRjaCAoaXRlbS5jb250ZW50LmNvbnN0cnVjdG9yKSB7XG4gICAgICAgICAgICBjYXNlIENvbnRlbnRUeXBlOlxuICAgICAgICAgICAgY2FzZSBDb250ZW50RW1iZWQ6XG4gICAgICAgICAgICAgIGlmICh0aGlzLmFkZHMoaXRlbSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZGVsZXRlcyhpdGVtKSkge1xuICAgICAgICAgICAgICAgICAgYWRkT3AoKTtcbiAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdpbnNlcnQnO1xuICAgICAgICAgICAgICAgICAgaW5zZXJ0ID0gaXRlbS5jb250ZW50LmdldENvbnRlbnQoKVswXTtcbiAgICAgICAgICAgICAgICAgIGFkZE9wKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZGVsZXRlcyhpdGVtKSkge1xuICAgICAgICAgICAgICAgIGlmIChhY3Rpb24gIT09ICdkZWxldGUnKSB7XG4gICAgICAgICAgICAgICAgICBhZGRPcCgpO1xuICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2RlbGV0ZSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRlbGV0ZUxlbiArPSAxO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFpdGVtLmRlbGV0ZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoYWN0aW9uICE9PSAncmV0YWluJykge1xuICAgICAgICAgICAgICAgICAgYWRkT3AoKTtcbiAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdyZXRhaW4nO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXRhaW4gKz0gMTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgY2FzZSBDb250ZW50U3RyaW5nOlxuICAgICAgICAgICAgICBpZiAodGhpcy5hZGRzKGl0ZW0pKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmRlbGV0ZXMoaXRlbSkpIHtcbiAgICAgICAgICAgICAgICAgIGlmIChhY3Rpb24gIT09ICdpbnNlcnQnKSB7XG4gICAgICAgICAgICAgICAgICAgIGFkZE9wKCk7XG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdpbnNlcnQnO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgaW5zZXJ0ICs9IC8qKiBAdHlwZSB7Q29udGVudFN0cmluZ30gKi8gKGl0ZW0uY29udGVudCkuc3RyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmRlbGV0ZXMoaXRlbSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoYWN0aW9uICE9PSAnZGVsZXRlJykge1xuICAgICAgICAgICAgICAgICAgYWRkT3AoKTtcbiAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdkZWxldGUnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkZWxldGVMZW4gKz0gaXRlbS5sZW5ndGg7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWl0ZW0uZGVsZXRlZCkge1xuICAgICAgICAgICAgICAgIGlmIChhY3Rpb24gIT09ICdyZXRhaW4nKSB7XG4gICAgICAgICAgICAgICAgICBhZGRPcCgpO1xuICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ3JldGFpbic7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldGFpbiArPSBpdGVtLmxlbmd0aDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgY2FzZSBDb250ZW50Rm9ybWF0OiB7XG4gICAgICAgICAgICAgIGNvbnN0IHsga2V5LCB2YWx1ZSB9ID0gLyoqIEB0eXBlIHtDb250ZW50Rm9ybWF0fSAqLyAoaXRlbS5jb250ZW50KTtcbiAgICAgICAgICAgICAgaWYgKHRoaXMuYWRkcyhpdGVtKSkge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5kZWxldGVzKGl0ZW0pKSB7XG4gICAgICAgICAgICAgICAgICBjb25zdCBjdXJWYWwgPSBjdXJyZW50QXR0cmlidXRlcy5nZXQoa2V5KSB8fCBudWxsO1xuICAgICAgICAgICAgICAgICAgaWYgKCFlcXVhbEF0dHJzKGN1clZhbCwgdmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhY3Rpb24gPT09ICdyZXRhaW4nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgYWRkT3AoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoZXF1YWxBdHRycyh2YWx1ZSwgKG9sZEF0dHJpYnV0ZXMuZ2V0KGtleSkgfHwgbnVsbCkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGF0dHJpYnV0ZXNba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBpdGVtLmRlbGV0ZSh0cmFuc2FjdGlvbik7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZGVsZXRlcyhpdGVtKSkge1xuICAgICAgICAgICAgICAgIG9sZEF0dHJpYnV0ZXMuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGN1clZhbCA9IGN1cnJlbnRBdHRyaWJ1dGVzLmdldChrZXkpIHx8IG51bGw7XG4gICAgICAgICAgICAgICAgaWYgKCFlcXVhbEF0dHJzKGN1clZhbCwgdmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoYWN0aW9uID09PSAncmV0YWluJykge1xuICAgICAgICAgICAgICAgICAgICBhZGRPcCgpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgYXR0cmlidXRlc1trZXldID0gY3VyVmFsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIGlmICghaXRlbS5kZWxldGVkKSB7XG4gICAgICAgICAgICAgICAgb2xkQXR0cmlidXRlcy5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgY29uc3QgYXR0ciA9IGF0dHJpYnV0ZXNba2V5XTtcbiAgICAgICAgICAgICAgICBpZiAoYXR0ciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoIWVxdWFsQXR0cnMoYXR0ciwgdmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhY3Rpb24gPT09ICdyZXRhaW4nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgYWRkT3AoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgYXR0cmlidXRlc1trZXldO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXNba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGF0dHIgIT09IG51bGwpIHsgLy8gdGhpcyB3aWxsIGJlIGNsZWFuZWQgdXAgYXV0b21hdGljYWxseSBieSB0aGUgY29udGV4dGxlc3MgY2xlYW51cCBmdW5jdGlvblxuICAgICAgICAgICAgICAgICAgICBpdGVtLmRlbGV0ZSh0cmFuc2FjdGlvbik7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmICghaXRlbS5kZWxldGVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFjdGlvbiA9PT0gJ2luc2VydCcpIHtcbiAgICAgICAgICAgICAgICAgIGFkZE9wKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHVwZGF0ZUN1cnJlbnRBdHRyaWJ1dGVzKGN1cnJlbnRBdHRyaWJ1dGVzLCAvKiogQHR5cGUge0NvbnRlbnRGb3JtYXR9ICovIChpdGVtLmNvbnRlbnQpKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpdGVtID0gaXRlbS5yaWdodDtcbiAgICAgICAgfVxuICAgICAgICBhZGRPcCgpO1xuICAgICAgICB3aGlsZSAoZGVsdGEubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGNvbnN0IGxhc3RPcCA9IGRlbHRhW2RlbHRhLmxlbmd0aCAtIDFdO1xuICAgICAgICAgIGlmIChsYXN0T3AucmV0YWluICE9PSB1bmRlZmluZWQgJiYgbGFzdE9wLmF0dHJpYnV0ZXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gcmV0YWluIGRlbHRhJ3MgaWYgdGhleSBkb24ndCBhc3NpZ24gYXR0cmlidXRlc1xuICAgICAgICAgICAgZGVsdGEucG9wKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHRoaXMuX2RlbHRhID0gZGVsdGE7XG4gICAgfVxuICAgIHJldHVybiAvKiogQHR5cGUge2FueX0gKi8gKHRoaXMuX2RlbHRhKVxuICB9XG59XG5cbi8qKlxuICogVHlwZSB0aGF0IHJlcHJlc2VudHMgdGV4dCB3aXRoIGZvcm1hdHRpbmcgaW5mb3JtYXRpb24uXG4gKlxuICogVGhpcyB0eXBlIHJlcGxhY2VzIHktcmljaHRleHQgYXMgdGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBhYmxlIHRvIGhhbmRsZVxuICogYmxvY2sgZm9ybWF0cyAoZm9ybWF0IGluZm9ybWF0aW9uIG9uIGEgcGFyYWdyYXBoKSwgZW1iZWRzIChjb21wbGV4IGVsZW1lbnRzXG4gKiBsaWtlIHBpY3R1cmVzIGFuZCB2aWRlb3MpLCBhbmQgdGV4dCBmb3JtYXRzICgqKmJvbGQqKiwgKml0YWxpYyopLlxuICpcbiAqIEBleHRlbmRzIEFic3RyYWN0VHlwZTxZVGV4dEV2ZW50PlxuICovXG5jbGFzcyBZVGV4dCBleHRlbmRzIEFic3RyYWN0VHlwZSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gW3N0cmluZ10gVGhlIGluaXRpYWwgdmFsdWUgb2YgdGhlIFlUZXh0LlxuICAgKi9cbiAgY29uc3RydWN0b3IgKHN0cmluZykge1xuICAgIHN1cGVyKCk7XG4gICAgLyoqXG4gICAgICogQXJyYXkgb2YgcGVuZGluZyBvcGVyYXRpb25zIG9uIHRoaXMgdHlwZVxuICAgICAqIEB0eXBlIHtBcnJheTxmdW5jdGlvbigpOnZvaWQ+P31cbiAgICAgKi9cbiAgICB0aGlzLl9wZW5kaW5nID0gc3RyaW5nICE9PSB1bmRlZmluZWQgPyBbKCkgPT4gdGhpcy5pbnNlcnQoMCwgc3RyaW5nKV0gOiBbXTtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7QXJyYXk8QXJyYXlTZWFyY2hNYXJrZXI+fVxuICAgICAqL1xuICAgIHRoaXMuX3NlYXJjaE1hcmtlciA9IFtdO1xuICB9XG5cbiAgLyoqXG4gICAqIE51bWJlciBvZiBjaGFyYWN0ZXJzIG9mIHRoaXMgdGV4dCB0eXBlLlxuICAgKlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0IGxlbmd0aCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2xlbmd0aFxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7RG9jfSB5XG4gICAqIEBwYXJhbSB7SXRlbX0gaXRlbVxuICAgKi9cbiAgX2ludGVncmF0ZSAoeSwgaXRlbSkge1xuICAgIHN1cGVyLl9pbnRlZ3JhdGUoeSwgaXRlbSk7XG4gICAgdHJ5IHtcbiAgICAgIC8qKiBAdHlwZSB7QXJyYXk8ZnVuY3Rpb24+fSAqLyAodGhpcy5fcGVuZGluZykuZm9yRWFjaChmID0+IGYoKSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICB9XG4gICAgdGhpcy5fcGVuZGluZyA9IG51bGw7XG4gIH1cblxuICBfY29weSAoKSB7XG4gICAgcmV0dXJuIG5ldyBZVGV4dCgpXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7WVRleHR9XG4gICAqL1xuICBjbG9uZSAoKSB7XG4gICAgY29uc3QgdGV4dCA9IG5ldyBZVGV4dCgpO1xuICAgIHRleHQuYXBwbHlEZWx0YSh0aGlzLnRvRGVsdGEoKSk7XG4gICAgcmV0dXJuIHRleHRcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIFlUZXh0RXZlbnQgYW5kIGNhbGxzIG9ic2VydmVycy5cbiAgICpcbiAgICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHBhcmFtIHtTZXQ8bnVsbHxzdHJpbmc+fSBwYXJlbnRTdWJzIEtleXMgY2hhbmdlZCBvbiB0aGlzIHR5cGUuIGBudWxsYCBpZiBsaXN0IHdhcyBtb2RpZmllZC5cbiAgICovXG4gIF9jYWxsT2JzZXJ2ZXIgKHRyYW5zYWN0aW9uLCBwYXJlbnRTdWJzKSB7XG4gICAgc3VwZXIuX2NhbGxPYnNlcnZlcih0cmFuc2FjdGlvbiwgcGFyZW50U3Vicyk7XG4gICAgY29uc3QgZXZlbnQgPSBuZXcgWVRleHRFdmVudCh0aGlzLCB0cmFuc2FjdGlvbiwgcGFyZW50U3Vicyk7XG4gICAgY29uc3QgZG9jID0gdHJhbnNhY3Rpb24uZG9jO1xuICAgIGNhbGxUeXBlT2JzZXJ2ZXJzKHRoaXMsIHRyYW5zYWN0aW9uLCBldmVudCk7XG4gICAgLy8gSWYgYSByZW1vdGUgY2hhbmdlIGhhcHBlbmVkLCB3ZSB0cnkgdG8gY2xlYW51cCBwb3RlbnRpYWwgZm9ybWF0dGluZyBkdXBsaWNhdGVzLlxuICAgIGlmICghdHJhbnNhY3Rpb24ubG9jYWwpIHtcbiAgICAgIC8vIGNoZWNrIGlmIGFub3RoZXIgZm9ybWF0dGluZyBpdGVtIHdhcyBpbnNlcnRlZFxuICAgICAgbGV0IGZvdW5kRm9ybWF0dGluZ0l0ZW0gPSBmYWxzZTtcbiAgICAgIGZvciAoY29uc3QgW2NsaWVudCwgYWZ0ZXJDbG9ja10gb2YgdHJhbnNhY3Rpb24uYWZ0ZXJTdGF0ZS5lbnRyaWVzKCkpIHtcbiAgICAgICAgY29uc3QgY2xvY2sgPSB0cmFuc2FjdGlvbi5iZWZvcmVTdGF0ZS5nZXQoY2xpZW50KSB8fCAwO1xuICAgICAgICBpZiAoYWZ0ZXJDbG9jayA9PT0gY2xvY2spIHtcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG4gICAgICAgIGl0ZXJhdGVTdHJ1Y3RzKHRyYW5zYWN0aW9uLCAvKiogQHR5cGUge0FycmF5PEl0ZW18R0M+fSAqLyAoZG9jLnN0b3JlLmNsaWVudHMuZ2V0KGNsaWVudCkpLCBjbG9jaywgYWZ0ZXJDbG9jaywgaXRlbSA9PiB7XG4gICAgICAgICAgaWYgKCFpdGVtLmRlbGV0ZWQgJiYgLyoqIEB0eXBlIHtJdGVtfSAqLyAoaXRlbSkuY29udGVudC5jb25zdHJ1Y3RvciA9PT0gQ29udGVudEZvcm1hdCkge1xuICAgICAgICAgICAgZm91bmRGb3JtYXR0aW5nSXRlbSA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGZvdW5kRm9ybWF0dGluZ0l0ZW0pIHtcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoIWZvdW5kRm9ybWF0dGluZ0l0ZW0pIHtcbiAgICAgICAgaXRlcmF0ZURlbGV0ZWRTdHJ1Y3RzKHRyYW5zYWN0aW9uLCB0cmFuc2FjdGlvbi5kZWxldGVTZXQsIGl0ZW0gPT4ge1xuICAgICAgICAgIGlmIChpdGVtIGluc3RhbmNlb2YgR0MgfHwgZm91bmRGb3JtYXR0aW5nSXRlbSkge1xuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpdGVtLnBhcmVudCA9PT0gdGhpcyAmJiBpdGVtLmNvbnRlbnQuY29uc3RydWN0b3IgPT09IENvbnRlbnRGb3JtYXQpIHtcbiAgICAgICAgICAgIGZvdW5kRm9ybWF0dGluZ0l0ZW0gPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICB0cmFuc2FjdChkb2MsICh0KSA9PiB7XG4gICAgICAgIGlmIChmb3VuZEZvcm1hdHRpbmdJdGVtKSB7XG4gICAgICAgICAgLy8gSWYgYSBmb3JtYXR0aW5nIGl0ZW0gd2FzIGluc2VydGVkLCB3ZSBzaW1wbHkgY2xlYW4gdGhlIHdob2xlIHR5cGUuXG4gICAgICAgICAgLy8gV2UgbmVlZCB0byBjb21wdXRlIGN1cnJlbnRBdHRyaWJ1dGVzIGZvciB0aGUgY3VycmVudCBwb3NpdGlvbiBhbnl3YXkuXG4gICAgICAgICAgY2xlYW51cFlUZXh0Rm9ybWF0dGluZyh0aGlzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBJZiBubyBmb3JtYXR0aW5nIGF0dHJpYnV0ZSB3YXMgaW5zZXJ0ZWQsIHdlIGNhbiBtYWtlIGR1ZSB3aXRoIGNvbnRleHRsZXNzXG4gICAgICAgICAgLy8gZm9ybWF0dGluZyBjbGVhbnVwcy5cbiAgICAgICAgICAvLyBDb250ZXh0bGVzczogaXQgaXMgbm90IG5lY2Vzc2FyeSB0byBjb21wdXRlIGN1cnJlbnRBdHRyaWJ1dGVzIGZvciB0aGUgYWZmZWN0ZWQgcG9zaXRpb24uXG4gICAgICAgICAgaXRlcmF0ZURlbGV0ZWRTdHJ1Y3RzKHQsIHQuZGVsZXRlU2V0LCBpdGVtID0+IHtcbiAgICAgICAgICAgIGlmIChpdGVtIGluc3RhbmNlb2YgR0MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXRlbS5wYXJlbnQgPT09IHRoaXMpIHtcbiAgICAgICAgICAgICAgY2xlYW51cENvbnRleHRsZXNzRm9ybWF0dGluZ0dhcCh0LCBpdGVtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHVuZm9ybWF0dGVkIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIFlUZXh0IHR5cGUuXG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIHRvU3RyaW5nICgpIHtcbiAgICBsZXQgc3RyID0gJyc7XG4gICAgLyoqXG4gICAgICogQHR5cGUge0l0ZW18bnVsbH1cbiAgICAgKi9cbiAgICBsZXQgbiA9IHRoaXMuX3N0YXJ0O1xuICAgIHdoaWxlIChuICE9PSBudWxsKSB7XG4gICAgICBpZiAoIW4uZGVsZXRlZCAmJiBuLmNvdW50YWJsZSAmJiBuLmNvbnRlbnQuY29uc3RydWN0b3IgPT09IENvbnRlbnRTdHJpbmcpIHtcbiAgICAgICAgc3RyICs9IC8qKiBAdHlwZSB7Q29udGVudFN0cmluZ30gKi8gKG4uY29udGVudCkuc3RyO1xuICAgICAgfVxuICAgICAgbiA9IG4ucmlnaHQ7XG4gICAgfVxuICAgIHJldHVybiBzdHJcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSB1bmZvcm1hdHRlZCBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBZVGV4dCB0eXBlLlxuICAgKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqIEBwdWJsaWNcbiAgICovXG4gIHRvSlNPTiAoKSB7XG4gICAgcmV0dXJuIHRoaXMudG9TdHJpbmcoKVxuICB9XG5cbiAgLyoqXG4gICAqIEFwcGx5IGEge0BsaW5rIERlbHRhfSBvbiB0aGlzIHNoYXJlZCBZVGV4dCB0eXBlLlxuICAgKlxuICAgKiBAcGFyYW0ge2FueX0gZGVsdGEgVGhlIGNoYW5nZXMgdG8gYXBwbHkgb24gdGhpcyBlbGVtZW50LlxuICAgKiBAcGFyYW0ge29iamVjdH0gIFtvcHRzXVxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLnNhbml0aXplXSBTYW5pdGl6ZSBpbnB1dCBkZWx0YS4gUmVtb3ZlcyBlbmRpbmcgbmV3bGluZXMgaWYgc2V0IHRvIHRydWUuXG4gICAqXG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIGFwcGx5RGVsdGEgKGRlbHRhLCB7IHNhbml0aXplID0gdHJ1ZSB9ID0ge30pIHtcbiAgICBpZiAodGhpcy5kb2MgIT09IG51bGwpIHtcbiAgICAgIHRyYW5zYWN0KHRoaXMuZG9jLCB0cmFuc2FjdGlvbiA9PiB7XG4gICAgICAgIGNvbnN0IGN1cnJQb3MgPSBuZXcgSXRlbVRleHRMaXN0UG9zaXRpb24obnVsbCwgdGhpcy5fc3RhcnQsIDAsIG5ldyBNYXAoKSk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGVsdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBjb25zdCBvcCA9IGRlbHRhW2ldO1xuICAgICAgICAgIGlmIChvcC5pbnNlcnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gUXVpbGwgYXNzdW1lcyB0aGF0IHRoZSBjb250ZW50IHN0YXJ0cyB3aXRoIGFuIGVtcHR5IHBhcmFncmFwaC5cbiAgICAgICAgICAgIC8vIFlqcy9ZLlRleHQgYXNzdW1lcyB0aGF0IGl0IHN0YXJ0cyBlbXB0eS4gV2UgYWx3YXlzIGhpZGUgdGhhdFxuICAgICAgICAgICAgLy8gdGhlcmUgaXMgYSBuZXdsaW5lIGF0IHRoZSBlbmQgb2YgdGhlIGNvbnRlbnQuXG4gICAgICAgICAgICAvLyBJZiB3ZSBvbWl0IHRoaXMgc3RlcCwgY2xpZW50cyB3aWxsIHNlZSBhIGRpZmZlcmVudCBudW1iZXIgb2ZcbiAgICAgICAgICAgIC8vIHBhcmFncmFwaHMsIGJ1dCBub3RoaW5nIGJhZCB3aWxsIGhhcHBlbi5cbiAgICAgICAgICAgIGNvbnN0IGlucyA9ICghc2FuaXRpemUgJiYgdHlwZW9mIG9wLmluc2VydCA9PT0gJ3N0cmluZycgJiYgaSA9PT0gZGVsdGEubGVuZ3RoIC0gMSAmJiBjdXJyUG9zLnJpZ2h0ID09PSBudWxsICYmIG9wLmluc2VydC5zbGljZSgtMSkgPT09ICdcXG4nKSA/IG9wLmluc2VydC5zbGljZSgwLCAtMSkgOiBvcC5pbnNlcnQ7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGlucyAhPT0gJ3N0cmluZycgfHwgaW5zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgaW5zZXJ0VGV4dCh0cmFuc2FjdGlvbiwgdGhpcywgY3VyclBvcywgaW5zLCBvcC5hdHRyaWJ1dGVzIHx8IHt9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKG9wLnJldGFpbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBmb3JtYXRUZXh0KHRyYW5zYWN0aW9uLCB0aGlzLCBjdXJyUG9zLCBvcC5yZXRhaW4sIG9wLmF0dHJpYnV0ZXMgfHwge30pO1xuICAgICAgICAgIH0gZWxzZSBpZiAob3AuZGVsZXRlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGRlbGV0ZVRleHQodHJhbnNhY3Rpb24sIGN1cnJQb3MsIG9wLmRlbGV0ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLyoqIEB0eXBlIHtBcnJheTxmdW5jdGlvbj59ICovICh0aGlzLl9wZW5kaW5nKS5wdXNoKCgpID0+IHRoaXMuYXBwbHlEZWx0YShkZWx0YSkpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBEZWx0YSByZXByZXNlbnRhdGlvbiBvZiB0aGlzIFlUZXh0IHR5cGUuXG4gICAqXG4gICAqIEBwYXJhbSB7U25hcHNob3R9IFtzbmFwc2hvdF1cbiAgICogQHBhcmFtIHtTbmFwc2hvdH0gW3ByZXZTbmFwc2hvdF1cbiAgICogQHBhcmFtIHtmdW5jdGlvbigncmVtb3ZlZCcgfCAnYWRkZWQnLCBJRCk6YW55fSBbY29tcHV0ZVlDaGFuZ2VdXG4gICAqIEByZXR1cm4ge2FueX0gVGhlIERlbHRhIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgdHlwZS5cbiAgICpcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgdG9EZWx0YSAoc25hcHNob3QsIHByZXZTbmFwc2hvdCwgY29tcHV0ZVlDaGFuZ2UpIHtcbiAgICAvKipcbiAgICAgKiBAdHlwZXtBcnJheTxhbnk+fVxuICAgICAqL1xuICAgIGNvbnN0IG9wcyA9IFtdO1xuICAgIGNvbnN0IGN1cnJlbnRBdHRyaWJ1dGVzID0gbmV3IE1hcCgpO1xuICAgIGNvbnN0IGRvYyA9IC8qKiBAdHlwZSB7RG9jfSAqLyAodGhpcy5kb2MpO1xuICAgIGxldCBzdHIgPSAnJztcbiAgICBsZXQgbiA9IHRoaXMuX3N0YXJ0O1xuICAgIGZ1bmN0aW9uIHBhY2tTdHIgKCkge1xuICAgICAgaWYgKHN0ci5sZW5ndGggPiAwKSB7XG4gICAgICAgIC8vIHBhY2sgc3RyIHdpdGggYXR0cmlidXRlcyB0byBvcHNcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEB0eXBlIHtPYmplY3Q8c3RyaW5nLGFueT59XG4gICAgICAgICAqL1xuICAgICAgICBjb25zdCBhdHRyaWJ1dGVzID0ge307XG4gICAgICAgIGxldCBhZGRBdHRyaWJ1dGVzID0gZmFsc2U7XG4gICAgICAgIGN1cnJlbnRBdHRyaWJ1dGVzLmZvckVhY2goKHZhbHVlLCBrZXkpID0+IHtcbiAgICAgICAgICBhZGRBdHRyaWJ1dGVzID0gdHJ1ZTtcbiAgICAgICAgICBhdHRyaWJ1dGVzW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAdHlwZSB7T2JqZWN0PHN0cmluZyxhbnk+fVxuICAgICAgICAgKi9cbiAgICAgICAgY29uc3Qgb3AgPSB7IGluc2VydDogc3RyIH07XG4gICAgICAgIGlmIChhZGRBdHRyaWJ1dGVzKSB7XG4gICAgICAgICAgb3AuYXR0cmlidXRlcyA9IGF0dHJpYnV0ZXM7XG4gICAgICAgIH1cbiAgICAgICAgb3BzLnB1c2gob3ApO1xuICAgICAgICBzdHIgPSAnJztcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gc25hcHNob3RzIGFyZSBtZXJnZWQgYWdhaW4gYWZ0ZXIgdGhlIHRyYW5zYWN0aW9uLCBzbyB3ZSBuZWVkIHRvIGtlZXAgdGhlXG4gICAgLy8gdHJhbnNhbGl2ZSB1bnRpbCB3ZSBhcmUgZG9uZVxuICAgIHRyYW5zYWN0KGRvYywgdHJhbnNhY3Rpb24gPT4ge1xuICAgICAgaWYgKHNuYXBzaG90KSB7XG4gICAgICAgIHNwbGl0U25hcHNob3RBZmZlY3RlZFN0cnVjdHModHJhbnNhY3Rpb24sIHNuYXBzaG90KTtcbiAgICAgIH1cbiAgICAgIGlmIChwcmV2U25hcHNob3QpIHtcbiAgICAgICAgc3BsaXRTbmFwc2hvdEFmZmVjdGVkU3RydWN0cyh0cmFuc2FjdGlvbiwgcHJldlNuYXBzaG90KTtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChuICE9PSBudWxsKSB7XG4gICAgICAgIGlmIChpc1Zpc2libGUobiwgc25hcHNob3QpIHx8IChwcmV2U25hcHNob3QgIT09IHVuZGVmaW5lZCAmJiBpc1Zpc2libGUobiwgcHJldlNuYXBzaG90KSkpIHtcbiAgICAgICAgICBzd2l0Y2ggKG4uY29udGVudC5jb25zdHJ1Y3Rvcikge1xuICAgICAgICAgICAgY2FzZSBDb250ZW50U3RyaW5nOiB7XG4gICAgICAgICAgICAgIGNvbnN0IGN1ciA9IGN1cnJlbnRBdHRyaWJ1dGVzLmdldCgneWNoYW5nZScpO1xuICAgICAgICAgICAgICBpZiAoc25hcHNob3QgIT09IHVuZGVmaW5lZCAmJiAhaXNWaXNpYmxlKG4sIHNuYXBzaG90KSkge1xuICAgICAgICAgICAgICAgIGlmIChjdXIgPT09IHVuZGVmaW5lZCB8fCBjdXIudXNlciAhPT0gbi5pZC5jbGllbnQgfHwgY3VyLnN0YXRlICE9PSAncmVtb3ZlZCcpIHtcbiAgICAgICAgICAgICAgICAgIHBhY2tTdHIoKTtcbiAgICAgICAgICAgICAgICAgIGN1cnJlbnRBdHRyaWJ1dGVzLnNldCgneWNoYW5nZScsIGNvbXB1dGVZQ2hhbmdlID8gY29tcHV0ZVlDaGFuZ2UoJ3JlbW92ZWQnLCBuLmlkKSA6IHsgdHlwZTogJ3JlbW92ZWQnIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChwcmV2U25hcHNob3QgIT09IHVuZGVmaW5lZCAmJiAhaXNWaXNpYmxlKG4sIHByZXZTbmFwc2hvdCkpIHtcbiAgICAgICAgICAgICAgICBpZiAoY3VyID09PSB1bmRlZmluZWQgfHwgY3VyLnVzZXIgIT09IG4uaWQuY2xpZW50IHx8IGN1ci5zdGF0ZSAhPT0gJ2FkZGVkJykge1xuICAgICAgICAgICAgICAgICAgcGFja1N0cigpO1xuICAgICAgICAgICAgICAgICAgY3VycmVudEF0dHJpYnV0ZXMuc2V0KCd5Y2hhbmdlJywgY29tcHV0ZVlDaGFuZ2UgPyBjb21wdXRlWUNoYW5nZSgnYWRkZWQnLCBuLmlkKSA6IHsgdHlwZTogJ2FkZGVkJyB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBwYWNrU3RyKCk7XG4gICAgICAgICAgICAgICAgY3VycmVudEF0dHJpYnV0ZXMuZGVsZXRlKCd5Y2hhbmdlJyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgc3RyICs9IC8qKiBAdHlwZSB7Q29udGVudFN0cmluZ30gKi8gKG4uY29udGVudCkuc3RyO1xuICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBDb250ZW50VHlwZTpcbiAgICAgICAgICAgIGNhc2UgQ29udGVudEVtYmVkOiB7XG4gICAgICAgICAgICAgIHBhY2tTdHIoKTtcbiAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAqIEB0eXBlIHtPYmplY3Q8c3RyaW5nLGFueT59XG4gICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICBjb25zdCBvcCA9IHtcbiAgICAgICAgICAgICAgICBpbnNlcnQ6IG4uY29udGVudC5nZXRDb250ZW50KClbMF1cbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgaWYgKGN1cnJlbnRBdHRyaWJ1dGVzLnNpemUgPiAwKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXR0cnMgPSAvKiogQHR5cGUge09iamVjdDxzdHJpbmcsYW55Pn0gKi8gKHt9KTtcbiAgICAgICAgICAgICAgICBvcC5hdHRyaWJ1dGVzID0gYXR0cnM7XG4gICAgICAgICAgICAgICAgY3VycmVudEF0dHJpYnV0ZXMuZm9yRWFjaCgodmFsdWUsIGtleSkgPT4ge1xuICAgICAgICAgICAgICAgICAgYXR0cnNba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIG9wcy5wdXNoKG9wKTtcbiAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgQ29udGVudEZvcm1hdDpcbiAgICAgICAgICAgICAgaWYgKGlzVmlzaWJsZShuLCBzbmFwc2hvdCkpIHtcbiAgICAgICAgICAgICAgICBwYWNrU3RyKCk7XG4gICAgICAgICAgICAgICAgdXBkYXRlQ3VycmVudEF0dHJpYnV0ZXMoY3VycmVudEF0dHJpYnV0ZXMsIC8qKiBAdHlwZSB7Q29udGVudEZvcm1hdH0gKi8gKG4uY29udGVudCkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG4gPSBuLnJpZ2h0O1xuICAgICAgfVxuICAgICAgcGFja1N0cigpO1xuICAgIH0sIHNwbGl0U25hcHNob3RBZmZlY3RlZFN0cnVjdHMpO1xuICAgIHJldHVybiBvcHNcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnNlcnQgdGV4dCBhdCBhIGdpdmVuIGluZGV4LlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggVGhlIGluZGV4IGF0IHdoaWNoIHRvIHN0YXJ0IGluc2VydGluZy5cbiAgICogQHBhcmFtIHtTdHJpbmd9IHRleHQgVGhlIHRleHQgdG8gaW5zZXJ0IGF0IHRoZSBzcGVjaWZpZWQgcG9zaXRpb24uXG4gICAqIEBwYXJhbSB7VGV4dEF0dHJpYnV0ZXN9IFthdHRyaWJ1dGVzXSBPcHRpb25hbGx5IGRlZmluZSBzb21lIGZvcm1hdHRpbmdcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmZvcm1hdGlvbiB0byBhcHBseSBvbiB0aGUgaW5zZXJ0ZWRcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUZXh0LlxuICAgKiBAcHVibGljXG4gICAqL1xuICBpbnNlcnQgKGluZGV4LCB0ZXh0LCBhdHRyaWJ1dGVzKSB7XG4gICAgaWYgKHRleHQubGVuZ3RoIDw9IDApIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBjb25zdCB5ID0gdGhpcy5kb2M7XG4gICAgaWYgKHkgIT09IG51bGwpIHtcbiAgICAgIHRyYW5zYWN0KHksIHRyYW5zYWN0aW9uID0+IHtcbiAgICAgICAgY29uc3QgcG9zID0gZmluZFBvc2l0aW9uKHRyYW5zYWN0aW9uLCB0aGlzLCBpbmRleCk7XG4gICAgICAgIGlmICghYXR0cmlidXRlcykge1xuICAgICAgICAgIGF0dHJpYnV0ZXMgPSB7fTtcbiAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgcG9zLmN1cnJlbnRBdHRyaWJ1dGVzLmZvckVhY2goKHYsIGspID0+IHsgYXR0cmlidXRlc1trXSA9IHY7IH0pO1xuICAgICAgICB9XG4gICAgICAgIGluc2VydFRleHQodHJhbnNhY3Rpb24sIHRoaXMsIHBvcywgdGV4dCwgYXR0cmlidXRlcyk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLyoqIEB0eXBlIHtBcnJheTxmdW5jdGlvbj59ICovICh0aGlzLl9wZW5kaW5nKS5wdXNoKCgpID0+IHRoaXMuaW5zZXJ0KGluZGV4LCB0ZXh0LCBhdHRyaWJ1dGVzKSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEluc2VydHMgYW4gZW1iZWQgYXQgYSBpbmRleC5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IFRoZSBpbmRleCB0byBpbnNlcnQgdGhlIGVtYmVkIGF0LlxuICAgKiBAcGFyYW0ge09iamVjdCB8IEFic3RyYWN0VHlwZTxhbnk+fSBlbWJlZCBUaGUgT2JqZWN0IHRoYXQgcmVwcmVzZW50cyB0aGUgZW1iZWQuXG4gICAqIEBwYXJhbSB7VGV4dEF0dHJpYnV0ZXN9IGF0dHJpYnV0ZXMgQXR0cmlidXRlIGluZm9ybWF0aW9uIHRvIGFwcGx5IG9uIHRoZVxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVtYmVkXG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIGluc2VydEVtYmVkIChpbmRleCwgZW1iZWQsIGF0dHJpYnV0ZXMgPSB7fSkge1xuICAgIGNvbnN0IHkgPSB0aGlzLmRvYztcbiAgICBpZiAoeSAhPT0gbnVsbCkge1xuICAgICAgdHJhbnNhY3QoeSwgdHJhbnNhY3Rpb24gPT4ge1xuICAgICAgICBjb25zdCBwb3MgPSBmaW5kUG9zaXRpb24odHJhbnNhY3Rpb24sIHRoaXMsIGluZGV4KTtcbiAgICAgICAgaW5zZXJ0VGV4dCh0cmFuc2FjdGlvbiwgdGhpcywgcG9zLCBlbWJlZCwgYXR0cmlidXRlcyk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLyoqIEB0eXBlIHtBcnJheTxmdW5jdGlvbj59ICovICh0aGlzLl9wZW5kaW5nKS5wdXNoKCgpID0+IHRoaXMuaW5zZXJ0RW1iZWQoaW5kZXgsIGVtYmVkLCBhdHRyaWJ1dGVzKSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZXMgdGV4dCBzdGFydGluZyBmcm9tIGFuIGluZGV4LlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggSW5kZXggYXQgd2hpY2ggdG8gc3RhcnQgZGVsZXRpbmcuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGggVGhlIG51bWJlciBvZiBjaGFyYWN0ZXJzIHRvIHJlbW92ZS4gRGVmYXVsdHMgdG8gMS5cbiAgICpcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgZGVsZXRlIChpbmRleCwgbGVuZ3RoKSB7XG4gICAgaWYgKGxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGNvbnN0IHkgPSB0aGlzLmRvYztcbiAgICBpZiAoeSAhPT0gbnVsbCkge1xuICAgICAgdHJhbnNhY3QoeSwgdHJhbnNhY3Rpb24gPT4ge1xuICAgICAgICBkZWxldGVUZXh0KHRyYW5zYWN0aW9uLCBmaW5kUG9zaXRpb24odHJhbnNhY3Rpb24sIHRoaXMsIGluZGV4KSwgbGVuZ3RoKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvKiogQHR5cGUge0FycmF5PGZ1bmN0aW9uPn0gKi8gKHRoaXMuX3BlbmRpbmcpLnB1c2goKCkgPT4gdGhpcy5kZWxldGUoaW5kZXgsIGxlbmd0aCkpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBc3NpZ25zIHByb3BlcnRpZXMgdG8gYSByYW5nZSBvZiB0ZXh0LlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggVGhlIHBvc2l0aW9uIHdoZXJlIHRvIHN0YXJ0IGZvcm1hdHRpbmcuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGggVGhlIGFtb3VudCBvZiBjaGFyYWN0ZXJzIHRvIGFzc2lnbiBwcm9wZXJ0aWVzIHRvLlxuICAgKiBAcGFyYW0ge1RleHRBdHRyaWJ1dGVzfSBhdHRyaWJ1dGVzIEF0dHJpYnV0ZSBpbmZvcm1hdGlvbiB0byBhcHBseSBvbiB0aGVcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0LlxuICAgKlxuICAgKiBAcHVibGljXG4gICAqL1xuICBmb3JtYXQgKGluZGV4LCBsZW5ndGgsIGF0dHJpYnV0ZXMpIHtcbiAgICBpZiAobGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgY29uc3QgeSA9IHRoaXMuZG9jO1xuICAgIGlmICh5ICE9PSBudWxsKSB7XG4gICAgICB0cmFuc2FjdCh5LCB0cmFuc2FjdGlvbiA9PiB7XG4gICAgICAgIGNvbnN0IHBvcyA9IGZpbmRQb3NpdGlvbih0cmFuc2FjdGlvbiwgdGhpcywgaW5kZXgpO1xuICAgICAgICBpZiAocG9zLnJpZ2h0ID09PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgZm9ybWF0VGV4dCh0cmFuc2FjdGlvbiwgdGhpcywgcG9zLCBsZW5ndGgsIGF0dHJpYnV0ZXMpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8qKiBAdHlwZSB7QXJyYXk8ZnVuY3Rpb24+fSAqLyAodGhpcy5fcGVuZGluZykucHVzaCgoKSA9PiB0aGlzLmZvcm1hdChpbmRleCwgbGVuZ3RoLCBhdHRyaWJ1dGVzKSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgYW4gYXR0cmlidXRlLlxuICAgKlxuICAgKiBAbm90ZSBYbWwtVGV4dCBub2RlcyBkb24ndCBoYXZlIGF0dHJpYnV0ZXMuIFlvdSBjYW4gdXNlIHRoaXMgZmVhdHVyZSB0byBhc3NpZ24gcHJvcGVydGllcyB0byBjb21wbGV0ZSB0ZXh0LWJsb2Nrcy5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IGF0dHJpYnV0ZU5hbWUgVGhlIGF0dHJpYnV0ZSBuYW1lIHRoYXQgaXMgdG8gYmUgcmVtb3ZlZC5cbiAgICpcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgcmVtb3ZlQXR0cmlidXRlIChhdHRyaWJ1dGVOYW1lKSB7XG4gICAgaWYgKHRoaXMuZG9jICE9PSBudWxsKSB7XG4gICAgICB0cmFuc2FjdCh0aGlzLmRvYywgdHJhbnNhY3Rpb24gPT4ge1xuICAgICAgICB0eXBlTWFwRGVsZXRlKHRyYW5zYWN0aW9uLCB0aGlzLCBhdHRyaWJ1dGVOYW1lKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvKiogQHR5cGUge0FycmF5PGZ1bmN0aW9uPn0gKi8gKHRoaXMuX3BlbmRpbmcpLnB1c2goKCkgPT4gdGhpcy5yZW1vdmVBdHRyaWJ1dGUoYXR0cmlidXRlTmFtZSkpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIG9yIHVwZGF0ZXMgYW4gYXR0cmlidXRlLlxuICAgKlxuICAgKiBAbm90ZSBYbWwtVGV4dCBub2RlcyBkb24ndCBoYXZlIGF0dHJpYnV0ZXMuIFlvdSBjYW4gdXNlIHRoaXMgZmVhdHVyZSB0byBhc3NpZ24gcHJvcGVydGllcyB0byBjb21wbGV0ZSB0ZXh0LWJsb2Nrcy5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IGF0dHJpYnV0ZU5hbWUgVGhlIGF0dHJpYnV0ZSBuYW1lIHRoYXQgaXMgdG8gYmUgc2V0LlxuICAgKiBAcGFyYW0ge2FueX0gYXR0cmlidXRlVmFsdWUgVGhlIGF0dHJpYnV0ZSB2YWx1ZSB0aGF0IGlzIHRvIGJlIHNldC5cbiAgICpcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgc2V0QXR0cmlidXRlIChhdHRyaWJ1dGVOYW1lLCBhdHRyaWJ1dGVWYWx1ZSkge1xuICAgIGlmICh0aGlzLmRvYyAhPT0gbnVsbCkge1xuICAgICAgdHJhbnNhY3QodGhpcy5kb2MsIHRyYW5zYWN0aW9uID0+IHtcbiAgICAgICAgdHlwZU1hcFNldCh0cmFuc2FjdGlvbiwgdGhpcywgYXR0cmlidXRlTmFtZSwgYXR0cmlidXRlVmFsdWUpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8qKiBAdHlwZSB7QXJyYXk8ZnVuY3Rpb24+fSAqLyAodGhpcy5fcGVuZGluZykucHVzaCgoKSA9PiB0aGlzLnNldEF0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lLCBhdHRyaWJ1dGVWYWx1ZSkpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIGF0dHJpYnV0ZSB2YWx1ZSB0aGF0IGJlbG9uZ3MgdG8gdGhlIGF0dHJpYnV0ZSBuYW1lLlxuICAgKlxuICAgKiBAbm90ZSBYbWwtVGV4dCBub2RlcyBkb24ndCBoYXZlIGF0dHJpYnV0ZXMuIFlvdSBjYW4gdXNlIHRoaXMgZmVhdHVyZSB0byBhc3NpZ24gcHJvcGVydGllcyB0byBjb21wbGV0ZSB0ZXh0LWJsb2Nrcy5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IGF0dHJpYnV0ZU5hbWUgVGhlIGF0dHJpYnV0ZSBuYW1lIHRoYXQgaWRlbnRpZmllcyB0aGVcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVlcmllZCB2YWx1ZS5cbiAgICogQHJldHVybiB7YW55fSBUaGUgcXVlcmllZCBhdHRyaWJ1dGUgdmFsdWUuXG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIGdldEF0dHJpYnV0ZSAoYXR0cmlidXRlTmFtZSkge1xuICAgIHJldHVybiAvKiogQHR5cGUge2FueX0gKi8gKHR5cGVNYXBHZXQodGhpcywgYXR0cmlidXRlTmFtZSkpXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbGwgYXR0cmlidXRlIG5hbWUvdmFsdWUgcGFpcnMgaW4gYSBKU09OIE9iamVjdC5cbiAgICpcbiAgICogQG5vdGUgWG1sLVRleHQgbm9kZXMgZG9uJ3QgaGF2ZSBhdHRyaWJ1dGVzLiBZb3UgY2FuIHVzZSB0aGlzIGZlYXR1cmUgdG8gYXNzaWduIHByb3BlcnRpZXMgdG8gY29tcGxldGUgdGV4dC1ibG9ja3MuXG4gICAqXG4gICAqIEBwYXJhbSB7U25hcHNob3R9IFtzbmFwc2hvdF1cbiAgICogQHJldHVybiB7T2JqZWN0PHN0cmluZywgYW55Pn0gQSBKU09OIE9iamVjdCB0aGF0IGRlc2NyaWJlcyB0aGUgYXR0cmlidXRlcy5cbiAgICpcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgZ2V0QXR0cmlidXRlcyAoc25hcHNob3QpIHtcbiAgICByZXR1cm4gdHlwZU1hcEdldEFsbCh0aGlzKVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7VXBkYXRlRW5jb2RlclYxIHwgVXBkYXRlRW5jb2RlclYyfSBlbmNvZGVyXG4gICAqL1xuICBfd3JpdGUgKGVuY29kZXIpIHtcbiAgICBlbmNvZGVyLndyaXRlVHlwZVJlZihZVGV4dFJlZklEKTtcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7VXBkYXRlRGVjb2RlclYxIHwgVXBkYXRlRGVjb2RlclYyfSBkZWNvZGVyXG4gKiBAcmV0dXJuIHtZVGV4dH1cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IHJlYWRZVGV4dCA9IGRlY29kZXIgPT4gbmV3IFlUZXh0KCk7XG5cbi8qKlxuICogQG1vZHVsZSBZWG1sXG4gKi9cblxuLyoqXG4gKiBEZWZpbmUgdGhlIGVsZW1lbnRzIHRvIHdoaWNoIGEgc2V0IG9mIENTUyBxdWVyaWVzIGFwcGx5LlxuICoge0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9DU1NfU2VsZWN0b3JzfENTU19TZWxlY3RvcnN9XG4gKlxuICogQGV4YW1wbGVcbiAqICAgcXVlcnkgPSAnLmNsYXNzU2VsZWN0b3InXG4gKiAgIHF1ZXJ5ID0gJ25vZGVTZWxlY3RvcidcbiAqICAgcXVlcnkgPSAnI2lkU2VsZWN0b3InXG4gKlxuICogQHR5cGVkZWYge3N0cmluZ30gQ1NTX1NlbGVjdG9yXG4gKi9cblxuLyoqXG4gKiBEb20gZmlsdGVyIGZ1bmN0aW9uLlxuICpcbiAqIEBjYWxsYmFjayBkb21GaWx0ZXJcbiAqIEBwYXJhbSB7c3RyaW5nfSBub2RlTmFtZSBUaGUgbm9kZU5hbWUgb2YgdGhlIGVsZW1lbnRcbiAqIEBwYXJhbSB7TWFwfSBhdHRyaWJ1dGVzIFRoZSBtYXAgb2YgYXR0cmlidXRlcy5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdG8gaW5jbHVkZSB0aGUgRG9tIG5vZGUgaW4gdGhlIFlYbWxFbGVtZW50LlxuICovXG5cbi8qKlxuICogUmVwcmVzZW50cyBhIHN1YnNldCBvZiB0aGUgbm9kZXMgb2YgYSBZWG1sRWxlbWVudCAvIFlYbWxGcmFnbWVudCBhbmQgYVxuICogcG9zaXRpb24gd2l0aGluIHRoZW0uXG4gKlxuICogQ2FuIGJlIGNyZWF0ZWQgd2l0aCB7QGxpbmsgWVhtbEZyYWdtZW50I2NyZWF0ZVRyZWVXYWxrZXJ9XG4gKlxuICogQHB1YmxpY1xuICogQGltcGxlbWVudHMge0l0ZXJhYmxlPFlYbWxFbGVtZW50fFlYbWxUZXh0fFlYbWxFbGVtZW50fFlYbWxIb29rPn1cbiAqL1xuY2xhc3MgWVhtbFRyZWVXYWxrZXIge1xuICAvKipcbiAgICogQHBhcmFtIHtZWG1sRnJhZ21lbnQgfCBZWG1sRWxlbWVudH0gcm9vdFxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKEFic3RyYWN0VHlwZTxhbnk+KTpib29sZWFufSBbZl1cbiAgICovXG4gIGNvbnN0cnVjdG9yIChyb290LCBmID0gKCkgPT4gdHJ1ZSkge1xuICAgIHRoaXMuX2ZpbHRlciA9IGY7XG4gICAgdGhpcy5fcm9vdCA9IHJvb3Q7XG4gICAgLyoqXG4gICAgICogQHR5cGUge0l0ZW19XG4gICAgICovXG4gICAgdGhpcy5fY3VycmVudE5vZGUgPSAvKiogQHR5cGUge0l0ZW19ICovIChyb290Ll9zdGFydCk7XG4gICAgdGhpcy5fZmlyc3RDYWxsID0gdHJ1ZTtcbiAgfVxuXG4gIFtTeW1ib2wuaXRlcmF0b3JdICgpIHtcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgbmV4dCBub2RlLlxuICAgKlxuICAgKiBAcmV0dXJuIHtJdGVyYXRvclJlc3VsdDxZWG1sRWxlbWVudHxZWG1sVGV4dHxZWG1sSG9vaz59IFRoZSBuZXh0IG5vZGUuXG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIG5leHQgKCkge1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtJdGVtfG51bGx9XG4gICAgICovXG4gICAgbGV0IG4gPSB0aGlzLl9jdXJyZW50Tm9kZTtcbiAgICBsZXQgdHlwZSA9IG4gJiYgbi5jb250ZW50ICYmIC8qKiBAdHlwZSB7YW55fSAqLyAobi5jb250ZW50KS50eXBlO1xuICAgIGlmIChuICE9PSBudWxsICYmICghdGhpcy5fZmlyc3RDYWxsIHx8IG4uZGVsZXRlZCB8fCAhdGhpcy5fZmlsdGVyKHR5cGUpKSkgeyAvLyBpZiBmaXJzdCBjYWxsLCB3ZSBjaGVjayBpZiB3ZSBjYW4gdXNlIHRoZSBmaXJzdCBpdGVtXG4gICAgICBkbyB7XG4gICAgICAgIHR5cGUgPSAvKiogQHR5cGUge2FueX0gKi8gKG4uY29udGVudCkudHlwZTtcbiAgICAgICAgaWYgKCFuLmRlbGV0ZWQgJiYgKHR5cGUuY29uc3RydWN0b3IgPT09IFlYbWxFbGVtZW50IHx8IHR5cGUuY29uc3RydWN0b3IgPT09IFlYbWxGcmFnbWVudCkgJiYgdHlwZS5fc3RhcnQgIT09IG51bGwpIHtcbiAgICAgICAgICAvLyB3YWxrIGRvd24gaW4gdGhlIHRyZWVcbiAgICAgICAgICBuID0gdHlwZS5fc3RhcnQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gd2FsayByaWdodCBvciB1cCBpbiB0aGUgdHJlZVxuICAgICAgICAgIHdoaWxlIChuICE9PSBudWxsKSB7XG4gICAgICAgICAgICBpZiAobi5yaWdodCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICBuID0gbi5yaWdodDtcbiAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobi5wYXJlbnQgPT09IHRoaXMuX3Jvb3QpIHtcbiAgICAgICAgICAgICAgbiA9IG51bGw7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBuID0gLyoqIEB0eXBlIHtBYnN0cmFjdFR5cGU8YW55Pn0gKi8gKG4ucGFyZW50KS5faXRlbTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gd2hpbGUgKG4gIT09IG51bGwgJiYgKG4uZGVsZXRlZCB8fCAhdGhpcy5fZmlsdGVyKC8qKiBAdHlwZSB7Q29udGVudFR5cGV9ICovIChuLmNvbnRlbnQpLnR5cGUpKSlcbiAgICB9XG4gICAgdGhpcy5fZmlyc3RDYWxsID0gZmFsc2U7XG4gICAgaWYgKG4gPT09IG51bGwpIHtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfVxuICAgIH1cbiAgICB0aGlzLl9jdXJyZW50Tm9kZSA9IG47XG4gICAgcmV0dXJuIHsgdmFsdWU6IC8qKiBAdHlwZSB7YW55fSAqLyAobi5jb250ZW50KS50eXBlLCBkb25lOiBmYWxzZSB9XG4gIH1cbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgbGlzdCBvZiB7QGxpbmsgWVhtbEVsZW1lbnR9LmFuZCB7QGxpbmsgWVhtbFRleHR9IHR5cGVzLlxuICogQSBZeG1sRnJhZ21lbnQgaXMgc2ltaWxhciB0byBhIHtAbGluayBZWG1sRWxlbWVudH0sIGJ1dCBpdCBkb2VzIG5vdCBoYXZlIGFcbiAqIG5vZGVOYW1lIGFuZCBpdCBkb2VzIG5vdCBoYXZlIGF0dHJpYnV0ZXMuIFRob3VnaCBpdCBjYW4gYmUgYm91bmQgdG8gYSBET01cbiAqIGVsZW1lbnQgLSBpbiB0aGlzIGNhc2UgdGhlIGF0dHJpYnV0ZXMgYW5kIHRoZSBub2RlTmFtZSBhcmUgbm90IHNoYXJlZC5cbiAqXG4gKiBAcHVibGljXG4gKiBAZXh0ZW5kcyBBYnN0cmFjdFR5cGU8WVhtbEV2ZW50PlxuICovXG5jbGFzcyBZWG1sRnJhZ21lbnQgZXh0ZW5kcyBBYnN0cmFjdFR5cGUge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgc3VwZXIoKTtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7QXJyYXk8YW55PnxudWxsfVxuICAgICAqL1xuICAgIHRoaXMuX3ByZWxpbUNvbnRlbnQgPSBbXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAdHlwZSB7WVhtbEVsZW1lbnR8WVhtbFRleHR8bnVsbH1cbiAgICovXG4gIGdldCBmaXJzdENoaWxkICgpIHtcbiAgICBjb25zdCBmaXJzdCA9IHRoaXMuX2ZpcnN0O1xuICAgIHJldHVybiBmaXJzdCA/IGZpcnN0LmNvbnRlbnQuZ2V0Q29udGVudCgpWzBdIDogbnVsbFxuICB9XG5cbiAgLyoqXG4gICAqIEludGVncmF0ZSB0aGlzIHR5cGUgaW50byB0aGUgWWpzIGluc3RhbmNlLlxuICAgKlxuICAgKiAqIFNhdmUgdGhpcyBzdHJ1Y3QgaW4gdGhlIG9zXG4gICAqICogVGhpcyB0eXBlIGlzIHNlbnQgdG8gb3RoZXIgY2xpZW50XG4gICAqICogT2JzZXJ2ZXIgZnVuY3Rpb25zIGFyZSBmaXJlZFxuICAgKlxuICAgKiBAcGFyYW0ge0RvY30geSBUaGUgWWpzIGluc3RhbmNlXG4gICAqIEBwYXJhbSB7SXRlbX0gaXRlbVxuICAgKi9cbiAgX2ludGVncmF0ZSAoeSwgaXRlbSkge1xuICAgIHN1cGVyLl9pbnRlZ3JhdGUoeSwgaXRlbSk7XG4gICAgdGhpcy5pbnNlcnQoMCwgLyoqIEB0eXBlIHtBcnJheTxhbnk+fSAqLyAodGhpcy5fcHJlbGltQ29udGVudCkpO1xuICAgIHRoaXMuX3ByZWxpbUNvbnRlbnQgPSBudWxsO1xuICB9XG5cbiAgX2NvcHkgKCkge1xuICAgIHJldHVybiBuZXcgWVhtbEZyYWdtZW50KClcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtZWG1sRnJhZ21lbnR9XG4gICAqL1xuICBjbG9uZSAoKSB7XG4gICAgY29uc3QgZWwgPSBuZXcgWVhtbEZyYWdtZW50KCk7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGVsLmluc2VydCgwLCB0aGlzLnRvQXJyYXkoKS5tYXAoaXRlbSA9PiBpdGVtIGluc3RhbmNlb2YgQWJzdHJhY3RUeXBlID8gaXRlbS5jbG9uZSgpIDogaXRlbSkpO1xuICAgIHJldHVybiBlbFxuICB9XG5cbiAgZ2V0IGxlbmd0aCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ByZWxpbUNvbnRlbnQgPT09IG51bGwgPyB0aGlzLl9sZW5ndGggOiB0aGlzLl9wcmVsaW1Db250ZW50Lmxlbmd0aFxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIHN1YnRyZWUgb2YgY2hpbGROb2Rlcy5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogY29uc3Qgd2Fsa2VyID0gZWxlbS5jcmVhdGVUcmVlV2Fsa2VyKGRvbSA9PiBkb20ubm9kZU5hbWUgPT09ICdkaXYnKVxuICAgKiBmb3IgKGxldCBub2RlIGluIHdhbGtlcikge1xuICAgKiAgIC8vIGBub2RlYCBpcyBhIGRpdiBub2RlXG4gICAqICAgbm9wKG5vZGUpXG4gICAqIH1cbiAgICpcbiAgICogQHBhcmFtIHtmdW5jdGlvbihBYnN0cmFjdFR5cGU8YW55Pik6Ym9vbGVhbn0gZmlsdGVyIEZ1bmN0aW9uIHRoYXQgaXMgY2FsbGVkIG9uIGVhY2ggY2hpbGQgZWxlbWVudCBhbmRcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybnMgYSBCb29sZWFuIGluZGljYXRpbmcgd2hldGhlciB0aGUgY2hpbGRcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgIGlzIHRvIGJlIGluY2x1ZGVkIGluIHRoZSBzdWJ0cmVlLlxuICAgKiBAcmV0dXJuIHtZWG1sVHJlZVdhbGtlcn0gQSBzdWJ0cmVlIGFuZCBhIHBvc2l0aW9uIHdpdGhpbiBpdC5cbiAgICpcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgY3JlYXRlVHJlZVdhbGtlciAoZmlsdGVyKSB7XG4gICAgcmV0dXJuIG5ldyBZWG1sVHJlZVdhbGtlcih0aGlzLCBmaWx0ZXIpXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgZmlyc3QgWVhtbEVsZW1lbnQgdGhhdCBtYXRjaGVzIHRoZSBxdWVyeS5cbiAgICogU2ltaWxhciB0byBET00ncyB7QGxpbmsgcXVlcnlTZWxlY3Rvcn0uXG4gICAqXG4gICAqIFF1ZXJ5IHN1cHBvcnQ6XG4gICAqICAgLSB0YWduYW1lXG4gICAqIFRPRE86XG4gICAqICAgLSBpZFxuICAgKiAgIC0gYXR0cmlidXRlXG4gICAqXG4gICAqIEBwYXJhbSB7Q1NTX1NlbGVjdG9yfSBxdWVyeSBUaGUgcXVlcnkgb24gdGhlIGNoaWxkcmVuLlxuICAgKiBAcmV0dXJuIHtZWG1sRWxlbWVudHxZWG1sVGV4dHxZWG1sSG9va3xudWxsfSBUaGUgZmlyc3QgZWxlbWVudCB0aGF0IG1hdGNoZXMgdGhlIHF1ZXJ5IG9yIG51bGwuXG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIHF1ZXJ5U2VsZWN0b3IgKHF1ZXJ5KSB7XG4gICAgcXVlcnkgPSBxdWVyeS50b1VwcGVyQ2FzZSgpO1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBjb25zdCBpdGVyYXRvciA9IG5ldyBZWG1sVHJlZVdhbGtlcih0aGlzLCBlbGVtZW50ID0+IGVsZW1lbnQubm9kZU5hbWUgJiYgZWxlbWVudC5ub2RlTmFtZS50b1VwcGVyQ2FzZSgpID09PSBxdWVyeSk7XG4gICAgY29uc3QgbmV4dCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICBpZiAobmV4dC5kb25lKSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbmV4dC52YWx1ZVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFsbCBZWG1sRWxlbWVudHMgdGhhdCBtYXRjaCB0aGUgcXVlcnkuXG4gICAqIFNpbWlsYXIgdG8gRG9tJ3Mge0BsaW5rIHF1ZXJ5U2VsZWN0b3JBbGx9LlxuICAgKlxuICAgKiBAdG9kbyBEb2VzIG5vdCB5ZXQgc3VwcG9ydCBhbGwgcXVlcmllcy4gQ3VycmVudGx5IG9ubHkgcXVlcnkgYnkgdGFnTmFtZS5cbiAgICpcbiAgICogQHBhcmFtIHtDU1NfU2VsZWN0b3J9IHF1ZXJ5IFRoZSBxdWVyeSBvbiB0aGUgY2hpbGRyZW5cbiAgICogQHJldHVybiB7QXJyYXk8WVhtbEVsZW1lbnR8WVhtbFRleHR8WVhtbEhvb2t8bnVsbD59IFRoZSBlbGVtZW50cyB0aGF0IG1hdGNoIHRoaXMgcXVlcnkuXG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIHF1ZXJ5U2VsZWN0b3JBbGwgKHF1ZXJ5KSB7XG4gICAgcXVlcnkgPSBxdWVyeS50b1VwcGVyQ2FzZSgpO1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICByZXR1cm4gQXJyYXkuZnJvbShuZXcgWVhtbFRyZWVXYWxrZXIodGhpcywgZWxlbWVudCA9PiBlbGVtZW50Lm5vZGVOYW1lICYmIGVsZW1lbnQubm9kZU5hbWUudG9VcHBlckNhc2UoKSA9PT0gcXVlcnkpKVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgWVhtbEV2ZW50IGFuZCBjYWxscyBvYnNlcnZlcnMuXG4gICAqXG4gICAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBwYXJhbSB7U2V0PG51bGx8c3RyaW5nPn0gcGFyZW50U3VicyBLZXlzIGNoYW5nZWQgb24gdGhpcyB0eXBlLiBgbnVsbGAgaWYgbGlzdCB3YXMgbW9kaWZpZWQuXG4gICAqL1xuICBfY2FsbE9ic2VydmVyICh0cmFuc2FjdGlvbiwgcGFyZW50U3Vicykge1xuICAgIGNhbGxUeXBlT2JzZXJ2ZXJzKHRoaXMsIHRyYW5zYWN0aW9uLCBuZXcgWVhtbEV2ZW50KHRoaXMsIHBhcmVudFN1YnMsIHRyYW5zYWN0aW9uKSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYWxsIHRoZSBjaGlsZHJlbiBvZiB0aGlzIFlYbWxGcmFnbWVudC5cbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfSBUaGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGFsbCBjaGlsZHJlbi5cbiAgICovXG4gIHRvU3RyaW5nICgpIHtcbiAgICByZXR1cm4gdHlwZUxpc3RNYXAodGhpcywgeG1sID0+IHhtbC50b1N0cmluZygpKS5qb2luKCcnKVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIHRvSlNPTiAoKSB7XG4gICAgcmV0dXJuIHRoaXMudG9TdHJpbmcoKVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBEb20gRWxlbWVudCB0aGF0IG1pcnJvcnMgdGhpcyBZWG1sRWxlbWVudC5cbiAgICpcbiAgICogQHBhcmFtIHtEb2N1bWVudH0gW19kb2N1bWVudD1kb2N1bWVudF0gVGhlIGRvY3VtZW50IG9iamVjdCAoeW91IG11c3QgZGVmaW5lXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMgd2hlbiBjYWxsaW5nIHRoaXMgbWV0aG9kIGluXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVqcylcbiAgICogQHBhcmFtIHtPYmplY3Q8c3RyaW5nLCBhbnk+fSBbaG9va3M9e31dIE9wdGlvbmFsIHByb3BlcnR5IHRvIGN1c3RvbWl6ZSBob3cgaG9va3NcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmUgcHJlc2VudGVkIGluIHRoZSBET01cbiAgICogQHBhcmFtIHthbnl9IFtiaW5kaW5nXSBZb3Ugc2hvdWxkIG5vdCBzZXQgdGhpcyBwcm9wZXJ0eS4gVGhpcyBpc1xuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VkIGlmIERvbUJpbmRpbmcgd2FudHMgdG8gY3JlYXRlIGFcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXNzb2NpYXRpb24gdG8gdGhlIGNyZWF0ZWQgRE9NIHR5cGUuXG4gICAqIEByZXR1cm4ge05vZGV9IFRoZSB7QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0VsZW1lbnR8RG9tIEVsZW1lbnR9XG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIHRvRE9NIChfZG9jdW1lbnQgPSBkb2N1bWVudCwgaG9va3MgPSB7fSwgYmluZGluZykge1xuICAgIGNvbnN0IGZyYWdtZW50ID0gX2RvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcbiAgICBpZiAoYmluZGluZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBiaW5kaW5nLl9jcmVhdGVBc3NvY2lhdGlvbihmcmFnbWVudCwgdGhpcyk7XG4gICAgfVxuICAgIHR5cGVMaXN0Rm9yRWFjaCh0aGlzLCB4bWxUeXBlID0+IHtcbiAgICAgIGZyYWdtZW50Lmluc2VydEJlZm9yZSh4bWxUeXBlLnRvRE9NKF9kb2N1bWVudCwgaG9va3MsIGJpbmRpbmcpLCBudWxsKTtcbiAgICB9KTtcbiAgICByZXR1cm4gZnJhZ21lbnRcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnNlcnRzIG5ldyBjb250ZW50IGF0IGFuIGluZGV4LlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiAgLy8gSW5zZXJ0IGNoYXJhY3RlciAnYScgYXQgcG9zaXRpb24gMFxuICAgKiAgeG1sLmluc2VydCgwLCBbbmV3IFkuWG1sVGV4dCgndGV4dCcpXSlcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IFRoZSBpbmRleCB0byBpbnNlcnQgY29udGVudCBhdFxuICAgKiBAcGFyYW0ge0FycmF5PFlYbWxFbGVtZW50fFlYbWxUZXh0Pn0gY29udGVudCBUaGUgYXJyYXkgb2YgY29udGVudFxuICAgKi9cbiAgaW5zZXJ0IChpbmRleCwgY29udGVudCkge1xuICAgIGlmICh0aGlzLmRvYyAhPT0gbnVsbCkge1xuICAgICAgdHJhbnNhY3QodGhpcy5kb2MsIHRyYW5zYWN0aW9uID0+IHtcbiAgICAgICAgdHlwZUxpc3RJbnNlcnRHZW5lcmljcyh0cmFuc2FjdGlvbiwgdGhpcywgaW5kZXgsIGNvbnRlbnQpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEB0cy1pZ25vcmUgX3ByZWxpbUNvbnRlbnQgaXMgZGVmaW5lZCBiZWNhdXNlIHRoaXMgaXMgbm90IHlldCBpbnRlZ3JhdGVkXG4gICAgICB0aGlzLl9wcmVsaW1Db250ZW50LnNwbGljZShpbmRleCwgMCwgLi4uY29udGVudCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEluc2VydHMgbmV3IGNvbnRlbnQgYXQgYW4gaW5kZXguXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqICAvLyBJbnNlcnQgY2hhcmFjdGVyICdhJyBhdCBwb3NpdGlvbiAwXG4gICAqICB4bWwuaW5zZXJ0KDAsIFtuZXcgWS5YbWxUZXh0KCd0ZXh0JyldKVxuICAgKlxuICAgKiBAcGFyYW0ge251bGx8SXRlbXxZWG1sRWxlbWVudHxZWG1sVGV4dH0gcmVmIFRoZSBpbmRleCB0byBpbnNlcnQgY29udGVudCBhdFxuICAgKiBAcGFyYW0ge0FycmF5PFlYbWxFbGVtZW50fFlYbWxUZXh0Pn0gY29udGVudCBUaGUgYXJyYXkgb2YgY29udGVudFxuICAgKi9cbiAgaW5zZXJ0QWZ0ZXIgKHJlZiwgY29udGVudCkge1xuICAgIGlmICh0aGlzLmRvYyAhPT0gbnVsbCkge1xuICAgICAgdHJhbnNhY3QodGhpcy5kb2MsIHRyYW5zYWN0aW9uID0+IHtcbiAgICAgICAgY29uc3QgcmVmSXRlbSA9IChyZWYgJiYgcmVmIGluc3RhbmNlb2YgQWJzdHJhY3RUeXBlKSA/IHJlZi5faXRlbSA6IHJlZjtcbiAgICAgICAgdHlwZUxpc3RJbnNlcnRHZW5lcmljc0FmdGVyKHRyYW5zYWN0aW9uLCB0aGlzLCByZWZJdGVtLCBjb250ZW50KTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBwYyA9IC8qKiBAdHlwZSB7QXJyYXk8YW55Pn0gKi8gKHRoaXMuX3ByZWxpbUNvbnRlbnQpO1xuICAgICAgY29uc3QgaW5kZXggPSByZWYgPT09IG51bGwgPyAwIDogcGMuZmluZEluZGV4KGVsID0+IGVsID09PSByZWYpICsgMTtcbiAgICAgIGlmIChpbmRleCA9PT0gMCAmJiByZWYgIT09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgZXJyb3IuY3JlYXRlKCdSZWZlcmVuY2UgaXRlbSBub3QgZm91bmQnKVxuICAgICAgfVxuICAgICAgcGMuc3BsaWNlKGluZGV4LCAwLCAuLi5jb250ZW50KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRGVsZXRlcyBlbGVtZW50cyBzdGFydGluZyBmcm9tIGFuIGluZGV4LlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggSW5kZXggYXQgd2hpY2ggdG8gc3RhcnQgZGVsZXRpbmcgZWxlbWVudHNcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9MV0gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byByZW1vdmUuIERlZmF1bHRzIHRvIDEuXG4gICAqL1xuICBkZWxldGUgKGluZGV4LCBsZW5ndGggPSAxKSB7XG4gICAgaWYgKHRoaXMuZG9jICE9PSBudWxsKSB7XG4gICAgICB0cmFuc2FjdCh0aGlzLmRvYywgdHJhbnNhY3Rpb24gPT4ge1xuICAgICAgICB0eXBlTGlzdERlbGV0ZSh0cmFuc2FjdGlvbiwgdGhpcywgaW5kZXgsIGxlbmd0aCk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQHRzLWlnbm9yZSBfcHJlbGltQ29udGVudCBpcyBkZWZpbmVkIGJlY2F1c2UgdGhpcyBpcyBub3QgeWV0IGludGVncmF0ZWRcbiAgICAgIHRoaXMuX3ByZWxpbUNvbnRlbnQuc3BsaWNlKGluZGV4LCBsZW5ndGgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBUcmFuc2Zvcm1zIHRoaXMgWUFycmF5IHRvIGEgSmF2YVNjcmlwdCBBcnJheS5cbiAgICpcbiAgICogQHJldHVybiB7QXJyYXk8WVhtbEVsZW1lbnR8WVhtbFRleHR8WVhtbEhvb2s+fVxuICAgKi9cbiAgdG9BcnJheSAoKSB7XG4gICAgcmV0dXJuIHR5cGVMaXN0VG9BcnJheSh0aGlzKVxuICB9XG5cbiAgLyoqXG4gICAqIEFwcGVuZHMgY29udGVudCB0byB0aGlzIFlBcnJheS5cbiAgICpcbiAgICogQHBhcmFtIHtBcnJheTxZWG1sRWxlbWVudHxZWG1sVGV4dD59IGNvbnRlbnQgQXJyYXkgb2YgY29udGVudCB0byBhcHBlbmQuXG4gICAqL1xuICBwdXNoIChjb250ZW50KSB7XG4gICAgdGhpcy5pbnNlcnQodGhpcy5sZW5ndGgsIGNvbnRlbnQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFByZXBwZW5kcyBjb250ZW50IHRvIHRoaXMgWUFycmF5LlxuICAgKlxuICAgKiBAcGFyYW0ge0FycmF5PFlYbWxFbGVtZW50fFlYbWxUZXh0Pn0gY29udGVudCBBcnJheSBvZiBjb250ZW50IHRvIHByZXBwZW5kLlxuICAgKi9cbiAgdW5zaGlmdCAoY29udGVudCkge1xuICAgIHRoaXMuaW5zZXJ0KDAsIGNvbnRlbnQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGktdGggZWxlbWVudCBmcm9tIGEgWUFycmF5LlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggVGhlIGluZGV4IG9mIHRoZSBlbGVtZW50IHRvIHJldHVybiBmcm9tIHRoZSBZQXJyYXlcbiAgICogQHJldHVybiB7WVhtbEVsZW1lbnR8WVhtbFRleHR9XG4gICAqL1xuICBnZXQgKGluZGV4KSB7XG4gICAgcmV0dXJuIHR5cGVMaXN0R2V0KHRoaXMsIGluZGV4KVxuICB9XG5cbiAgLyoqXG4gICAqIFRyYW5zZm9ybXMgdGhpcyBZQXJyYXkgdG8gYSBKYXZhU2NyaXB0IEFycmF5LlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0XVxuICAgKiBAcGFyYW0ge251bWJlcn0gW2VuZF1cbiAgICogQHJldHVybiB7QXJyYXk8WVhtbEVsZW1lbnR8WVhtbFRleHQ+fVxuICAgKi9cbiAgc2xpY2UgKHN0YXJ0ID0gMCwgZW5kID0gdGhpcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gdHlwZUxpc3RTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuICB9XG5cbiAgLyoqXG4gICAqIEV4ZWN1dGVzIGEgcHJvdmlkZWQgZnVuY3Rpb24gb24gb25jZSBvbiBvdmVyeSBjaGlsZCBlbGVtZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKFlYbWxFbGVtZW50fFlYbWxUZXh0LG51bWJlciwgdHlwZW9mIHRoaXMpOnZvaWR9IGYgQSBmdW5jdGlvbiB0byBleGVjdXRlIG9uIGV2ZXJ5IGVsZW1lbnQgb2YgdGhpcyBZQXJyYXkuXG4gICAqL1xuICBmb3JFYWNoIChmKSB7XG4gICAgdHlwZUxpc3RGb3JFYWNoKHRoaXMsIGYpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRyYW5zZm9ybSB0aGUgcHJvcGVydGllcyBvZiB0aGlzIHR5cGUgdG8gYmluYXJ5IGFuZCB3cml0ZSBpdCB0byBhblxuICAgKiBCaW5hcnlFbmNvZGVyLlxuICAgKlxuICAgKiBUaGlzIGlzIGNhbGxlZCB3aGVuIHRoaXMgSXRlbSBpcyBzZW50IHRvIGEgcmVtb3RlIHBlZXIuXG4gICAqXG4gICAqIEBwYXJhbSB7VXBkYXRlRW5jb2RlclYxIHwgVXBkYXRlRW5jb2RlclYyfSBlbmNvZGVyIFRoZSBlbmNvZGVyIHRvIHdyaXRlIGRhdGEgdG8uXG4gICAqL1xuICBfd3JpdGUgKGVuY29kZXIpIHtcbiAgICBlbmNvZGVyLndyaXRlVHlwZVJlZihZWG1sRnJhZ21lbnRSZWZJRCk7XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge1VwZGF0ZURlY29kZXJWMSB8IFVwZGF0ZURlY29kZXJWMn0gZGVjb2RlclxuICogQHJldHVybiB7WVhtbEZyYWdtZW50fVxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgcmVhZFlYbWxGcmFnbWVudCA9IGRlY29kZXIgPT4gbmV3IFlYbWxGcmFnbWVudCgpO1xuXG4vKipcbiAqIEFuIFlYbWxFbGVtZW50IGltaXRhdGVzIHRoZSBiZWhhdmlvciBvZiBhXG4gKiB7QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0VsZW1lbnR8RG9tIEVsZW1lbnR9LlxuICpcbiAqICogQW4gWVhtbEVsZW1lbnQgaGFzIGF0dHJpYnV0ZXMgKGtleSB2YWx1ZSBwYWlycylcbiAqICogQW4gWVhtbEVsZW1lbnQgaGFzIGNoaWxkRWxlbWVudHMgdGhhdCBtdXN0IGluaGVyaXQgZnJvbSBZWG1sRWxlbWVudFxuICovXG5jbGFzcyBZWG1sRWxlbWVudCBleHRlbmRzIFlYbWxGcmFnbWVudCB7XG4gIGNvbnN0cnVjdG9yIChub2RlTmFtZSA9ICdVTkRFRklORUQnKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLm5vZGVOYW1lID0gbm9kZU5hbWU7XG4gICAgLyoqXG4gICAgICogQHR5cGUge01hcDxzdHJpbmcsIGFueT58bnVsbH1cbiAgICAgKi9cbiAgICB0aGlzLl9wcmVsaW1BdHRycyA9IG5ldyBNYXAoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAdHlwZSB7WVhtbEVsZW1lbnR8WVhtbFRleHR8bnVsbH1cbiAgICovXG4gIGdldCBuZXh0U2libGluZyAoKSB7XG4gICAgY29uc3QgbiA9IHRoaXMuX2l0ZW0gPyB0aGlzLl9pdGVtLm5leHQgOiBudWxsO1xuICAgIHJldHVybiBuID8gLyoqIEB0eXBlIHtZWG1sRWxlbWVudHxZWG1sVGV4dH0gKi8gKC8qKiBAdHlwZSB7Q29udGVudFR5cGV9ICovIChuLmNvbnRlbnQpLnR5cGUpIDogbnVsbFxuICB9XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtZWG1sRWxlbWVudHxZWG1sVGV4dHxudWxsfVxuICAgKi9cbiAgZ2V0IHByZXZTaWJsaW5nICgpIHtcbiAgICBjb25zdCBuID0gdGhpcy5faXRlbSA/IHRoaXMuX2l0ZW0ucHJldiA6IG51bGw7XG4gICAgcmV0dXJuIG4gPyAvKiogQHR5cGUge1lYbWxFbGVtZW50fFlYbWxUZXh0fSAqLyAoLyoqIEB0eXBlIHtDb250ZW50VHlwZX0gKi8gKG4uY29udGVudCkudHlwZSkgOiBudWxsXG4gIH1cblxuICAvKipcbiAgICogSW50ZWdyYXRlIHRoaXMgdHlwZSBpbnRvIHRoZSBZanMgaW5zdGFuY2UuXG4gICAqXG4gICAqICogU2F2ZSB0aGlzIHN0cnVjdCBpbiB0aGUgb3NcbiAgICogKiBUaGlzIHR5cGUgaXMgc2VudCB0byBvdGhlciBjbGllbnRcbiAgICogKiBPYnNlcnZlciBmdW5jdGlvbnMgYXJlIGZpcmVkXG4gICAqXG4gICAqIEBwYXJhbSB7RG9jfSB5IFRoZSBZanMgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtJdGVtfSBpdGVtXG4gICAqL1xuICBfaW50ZWdyYXRlICh5LCBpdGVtKSB7XG4gICAgc3VwZXIuX2ludGVncmF0ZSh5LCBpdGVtKVxuICAgIDsoLyoqIEB0eXBlIHtNYXA8c3RyaW5nLCBhbnk+fSAqLyAodGhpcy5fcHJlbGltQXR0cnMpKS5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiB7XG4gICAgICB0aGlzLnNldEF0dHJpYnV0ZShrZXksIHZhbHVlKTtcbiAgICB9KTtcbiAgICB0aGlzLl9wcmVsaW1BdHRycyA9IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhbiBJdGVtIHdpdGggdGhlIHNhbWUgZWZmZWN0IGFzIHRoaXMgSXRlbSAod2l0aG91dCBwb3NpdGlvbiBlZmZlY3QpXG4gICAqXG4gICAqIEByZXR1cm4ge1lYbWxFbGVtZW50fVxuICAgKi9cbiAgX2NvcHkgKCkge1xuICAgIHJldHVybiBuZXcgWVhtbEVsZW1lbnQodGhpcy5ub2RlTmFtZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtZWG1sRWxlbWVudH1cbiAgICovXG4gIGNsb25lICgpIHtcbiAgICBjb25zdCBlbCA9IG5ldyBZWG1sRWxlbWVudCh0aGlzLm5vZGVOYW1lKTtcbiAgICBjb25zdCBhdHRycyA9IHRoaXMuZ2V0QXR0cmlidXRlcygpO1xuICAgIGZvciAoY29uc3Qga2V5IGluIGF0dHJzKSB7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyc1trZXldKTtcbiAgICB9XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGVsLmluc2VydCgwLCB0aGlzLnRvQXJyYXkoKS5tYXAoaXRlbSA9PiBpdGVtIGluc3RhbmNlb2YgQWJzdHJhY3RUeXBlID8gaXRlbS5jbG9uZSgpIDogaXRlbSkpO1xuICAgIHJldHVybiBlbFxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIFhNTCBzZXJpYWxpemF0aW9uIG9mIHRoaXMgWVhtbEVsZW1lbnQuXG4gICAqIFRoZSBhdHRyaWJ1dGVzIGFyZSBvcmRlcmVkIGJ5IGF0dHJpYnV0ZS1uYW1lLCBzbyB5b3UgY2FuIGVhc2lseSB1c2UgdGhpc1xuICAgKiBtZXRob2QgdG8gY29tcGFyZSBZWG1sRWxlbWVudHNcbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfSBUaGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgdHlwZS5cbiAgICpcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgdG9TdHJpbmcgKCkge1xuICAgIGNvbnN0IGF0dHJzID0gdGhpcy5nZXRBdHRyaWJ1dGVzKCk7XG4gICAgY29uc3Qgc3RyaW5nQnVpbGRlciA9IFtdO1xuICAgIGNvbnN0IGtleXMgPSBbXTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBhdHRycykge1xuICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgfVxuICAgIGtleXMuc29ydCgpO1xuICAgIGNvbnN0IGtleXNMZW4gPSBrZXlzLmxlbmd0aDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXNMZW47IGkrKykge1xuICAgICAgY29uc3Qga2V5ID0ga2V5c1tpXTtcbiAgICAgIHN0cmluZ0J1aWxkZXIucHVzaChrZXkgKyAnPVwiJyArIGF0dHJzW2tleV0gKyAnXCInKTtcbiAgICB9XG4gICAgY29uc3Qgbm9kZU5hbWUgPSB0aGlzLm5vZGVOYW1lLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgY29uc3QgYXR0cnNTdHJpbmcgPSBzdHJpbmdCdWlsZGVyLmxlbmd0aCA+IDAgPyAnICcgKyBzdHJpbmdCdWlsZGVyLmpvaW4oJyAnKSA6ICcnO1xuICAgIHJldHVybiBgPCR7bm9kZU5hbWV9JHthdHRyc1N0cmluZ30+JHtzdXBlci50b1N0cmluZygpfTwvJHtub2RlTmFtZX0+YFxuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgYW4gYXR0cmlidXRlIGZyb20gdGhpcyBZWG1sRWxlbWVudC5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IGF0dHJpYnV0ZU5hbWUgVGhlIGF0dHJpYnV0ZSBuYW1lIHRoYXQgaXMgdG8gYmUgcmVtb3ZlZC5cbiAgICpcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgcmVtb3ZlQXR0cmlidXRlIChhdHRyaWJ1dGVOYW1lKSB7XG4gICAgaWYgKHRoaXMuZG9jICE9PSBudWxsKSB7XG4gICAgICB0cmFuc2FjdCh0aGlzLmRvYywgdHJhbnNhY3Rpb24gPT4ge1xuICAgICAgICB0eXBlTWFwRGVsZXRlKHRyYW5zYWN0aW9uLCB0aGlzLCBhdHRyaWJ1dGVOYW1lKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvKiogQHR5cGUge01hcDxzdHJpbmcsYW55Pn0gKi8gKHRoaXMuX3ByZWxpbUF0dHJzKS5kZWxldGUoYXR0cmlidXRlTmFtZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgb3IgdXBkYXRlcyBhbiBhdHRyaWJ1dGUuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBhdHRyaWJ1dGVOYW1lIFRoZSBhdHRyaWJ1dGUgbmFtZSB0aGF0IGlzIHRvIGJlIHNldC5cbiAgICogQHBhcmFtIHtTdHJpbmd9IGF0dHJpYnV0ZVZhbHVlIFRoZSBhdHRyaWJ1dGUgdmFsdWUgdGhhdCBpcyB0byBiZSBzZXQuXG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIHNldEF0dHJpYnV0ZSAoYXR0cmlidXRlTmFtZSwgYXR0cmlidXRlVmFsdWUpIHtcbiAgICBpZiAodGhpcy5kb2MgIT09IG51bGwpIHtcbiAgICAgIHRyYW5zYWN0KHRoaXMuZG9jLCB0cmFuc2FjdGlvbiA9PiB7XG4gICAgICAgIHR5cGVNYXBTZXQodHJhbnNhY3Rpb24sIHRoaXMsIGF0dHJpYnV0ZU5hbWUsIGF0dHJpYnV0ZVZhbHVlKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvKiogQHR5cGUge01hcDxzdHJpbmcsIGFueT59ICovICh0aGlzLl9wcmVsaW1BdHRycykuc2V0KGF0dHJpYnV0ZU5hbWUsIGF0dHJpYnV0ZVZhbHVlKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbiBhdHRyaWJ1dGUgdmFsdWUgdGhhdCBiZWxvbmdzIHRvIHRoZSBhdHRyaWJ1dGUgbmFtZS5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IGF0dHJpYnV0ZU5hbWUgVGhlIGF0dHJpYnV0ZSBuYW1lIHRoYXQgaWRlbnRpZmllcyB0aGVcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVlcmllZCB2YWx1ZS5cbiAgICogQHJldHVybiB7U3RyaW5nfSBUaGUgcXVlcmllZCBhdHRyaWJ1dGUgdmFsdWUuXG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIGdldEF0dHJpYnV0ZSAoYXR0cmlidXRlTmFtZSkge1xuICAgIHJldHVybiAvKiogQHR5cGUge2FueX0gKi8gKHR5cGVNYXBHZXQodGhpcywgYXR0cmlidXRlTmFtZSkpXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB3aGV0aGVyIGFuIGF0dHJpYnV0ZSBleGlzdHNcbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IGF0dHJpYnV0ZU5hbWUgVGhlIGF0dHJpYnV0ZSBuYW1lIHRvIGNoZWNrIGZvciBleGlzdGVuY2UuXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IHdoZXRoZXIgdGhlIGF0dHJpYnV0ZSBleGlzdHMuXG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIGhhc0F0dHJpYnV0ZSAoYXR0cmlidXRlTmFtZSkge1xuICAgIHJldHVybiAvKiogQHR5cGUge2FueX0gKi8gKHR5cGVNYXBIYXModGhpcywgYXR0cmlidXRlTmFtZSkpXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbGwgYXR0cmlidXRlIG5hbWUvdmFsdWUgcGFpcnMgaW4gYSBKU09OIE9iamVjdC5cbiAgICpcbiAgICogQHBhcmFtIHtTbmFwc2hvdH0gW3NuYXBzaG90XVxuICAgKiBAcmV0dXJuIHtPYmplY3Q8c3RyaW5nLCBhbnk+fSBBIEpTT04gT2JqZWN0IHRoYXQgZGVzY3JpYmVzIHRoZSBhdHRyaWJ1dGVzLlxuICAgKlxuICAgKiBAcHVibGljXG4gICAqL1xuICBnZXRBdHRyaWJ1dGVzIChzbmFwc2hvdCkge1xuICAgIHJldHVybiB0eXBlTWFwR2V0QWxsKHRoaXMpXG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIERvbSBFbGVtZW50IHRoYXQgbWlycm9ycyB0aGlzIFlYbWxFbGVtZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge0RvY3VtZW50fSBbX2RvY3VtZW50PWRvY3VtZW50XSBUaGUgZG9jdW1lbnQgb2JqZWN0ICh5b3UgbXVzdCBkZWZpbmVcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcyB3aGVuIGNhbGxpbmcgdGhpcyBtZXRob2QgaW5cbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZWpzKVxuICAgKiBAcGFyYW0ge09iamVjdDxzdHJpbmcsIGFueT59IFtob29rcz17fV0gT3B0aW9uYWwgcHJvcGVydHkgdG8gY3VzdG9taXplIGhvdyBob29rc1xuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZSBwcmVzZW50ZWQgaW4gdGhlIERPTVxuICAgKiBAcGFyYW0ge2FueX0gW2JpbmRpbmddIFlvdSBzaG91bGQgbm90IHNldCB0aGlzIHByb3BlcnR5LiBUaGlzIGlzXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZWQgaWYgRG9tQmluZGluZyB3YW50cyB0byBjcmVhdGUgYVxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc3NvY2lhdGlvbiB0byB0aGUgY3JlYXRlZCBET00gdHlwZS5cbiAgICogQHJldHVybiB7Tm9kZX0gVGhlIHtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRWxlbWVudHxEb20gRWxlbWVudH1cbiAgICpcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgdG9ET00gKF9kb2N1bWVudCA9IGRvY3VtZW50LCBob29rcyA9IHt9LCBiaW5kaW5nKSB7XG4gICAgY29uc3QgZG9tID0gX2RvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGhpcy5ub2RlTmFtZSk7XG4gICAgY29uc3QgYXR0cnMgPSB0aGlzLmdldEF0dHJpYnV0ZXMoKTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBhdHRycykge1xuICAgICAgZG9tLnNldEF0dHJpYnV0ZShrZXksIGF0dHJzW2tleV0pO1xuICAgIH1cbiAgICB0eXBlTGlzdEZvckVhY2godGhpcywgeXhtbCA9PiB7XG4gICAgICBkb20uYXBwZW5kQ2hpbGQoeXhtbC50b0RPTShfZG9jdW1lbnQsIGhvb2tzLCBiaW5kaW5nKSk7XG4gICAgfSk7XG4gICAgaWYgKGJpbmRpbmcgIT09IHVuZGVmaW5lZCkge1xuICAgICAgYmluZGluZy5fY3JlYXRlQXNzb2NpYXRpb24oZG9tLCB0aGlzKTtcbiAgICB9XG4gICAgcmV0dXJuIGRvbVxuICB9XG5cbiAgLyoqXG4gICAqIFRyYW5zZm9ybSB0aGUgcHJvcGVydGllcyBvZiB0aGlzIHR5cGUgdG8gYmluYXJ5IGFuZCB3cml0ZSBpdCB0byBhblxuICAgKiBCaW5hcnlFbmNvZGVyLlxuICAgKlxuICAgKiBUaGlzIGlzIGNhbGxlZCB3aGVuIHRoaXMgSXRlbSBpcyBzZW50IHRvIGEgcmVtb3RlIHBlZXIuXG4gICAqXG4gICAqIEBwYXJhbSB7VXBkYXRlRW5jb2RlclYxIHwgVXBkYXRlRW5jb2RlclYyfSBlbmNvZGVyIFRoZSBlbmNvZGVyIHRvIHdyaXRlIGRhdGEgdG8uXG4gICAqL1xuICBfd3JpdGUgKGVuY29kZXIpIHtcbiAgICBlbmNvZGVyLndyaXRlVHlwZVJlZihZWG1sRWxlbWVudFJlZklEKTtcbiAgICBlbmNvZGVyLndyaXRlS2V5KHRoaXMubm9kZU5hbWUpO1xuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtVcGRhdGVEZWNvZGVyVjEgfCBVcGRhdGVEZWNvZGVyVjJ9IGRlY29kZXJcbiAqIEByZXR1cm4ge1lYbWxFbGVtZW50fVxuICpcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCByZWFkWVhtbEVsZW1lbnQgPSBkZWNvZGVyID0+IG5ldyBZWG1sRWxlbWVudChkZWNvZGVyLnJlYWRLZXkoKSk7XG5cbi8qKlxuICogQGV4dGVuZHMgWUV2ZW50PFlYbWxFbGVtZW50fFlYbWxUZXh0fFlYbWxGcmFnbWVudD5cbiAqIEFuIEV2ZW50IHRoYXQgZGVzY3JpYmVzIGNoYW5nZXMgb24gYSBZWG1sIEVsZW1lbnQgb3IgWXhtbCBGcmFnbWVudFxuICovXG5jbGFzcyBZWG1sRXZlbnQgZXh0ZW5kcyBZRXZlbnQge1xuICAvKipcbiAgICogQHBhcmFtIHtZWG1sRWxlbWVudHxZWG1sVGV4dHxZWG1sRnJhZ21lbnR9IHRhcmdldCBUaGUgdGFyZ2V0IG9uIHdoaWNoIHRoZSBldmVudCBpcyBjcmVhdGVkLlxuICAgKiBAcGFyYW0ge1NldDxzdHJpbmd8bnVsbD59IHN1YnMgVGhlIHNldCBvZiBjaGFuZ2VkIGF0dHJpYnV0ZXMuIGBudWxsYCBpcyBpbmNsdWRlZCBpZiB0aGVcbiAgICogICAgICAgICAgICAgICAgICAgY2hpbGQgbGlzdCBjaGFuZ2VkLlxuICAgKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvbiBUaGUgdHJhbnNhY3Rpb24gaW5zdGFuY2Ugd2l0aCB3aWNoIHRoZVxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2Ugd2FzIGNyZWF0ZWQuXG4gICAqL1xuICBjb25zdHJ1Y3RvciAodGFyZ2V0LCBzdWJzLCB0cmFuc2FjdGlvbikge1xuICAgIHN1cGVyKHRhcmdldCwgdHJhbnNhY3Rpb24pO1xuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdGhlIGNoaWxkcmVuIGNoYW5nZWQuXG4gICAgICogQHR5cGUge0Jvb2xlYW59XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLmNoaWxkTGlzdENoYW5nZWQgPSBmYWxzZTtcbiAgICAvKipcbiAgICAgKiBTZXQgb2YgYWxsIGNoYW5nZWQgYXR0cmlidXRlcy5cbiAgICAgKiBAdHlwZSB7U2V0PHN0cmluZz59XG4gICAgICovXG4gICAgdGhpcy5hdHRyaWJ1dGVzQ2hhbmdlZCA9IG5ldyBTZXQoKTtcbiAgICBzdWJzLmZvckVhY2goKHN1YikgPT4ge1xuICAgICAgaWYgKHN1YiA9PT0gbnVsbCkge1xuICAgICAgICB0aGlzLmNoaWxkTGlzdENoYW5nZWQgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5hdHRyaWJ1dGVzQ2hhbmdlZC5hZGQoc3ViKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG4vKipcbiAqIFlvdSBjYW4gbWFuYWdlIGJpbmRpbmcgdG8gYSBjdXN0b20gdHlwZSB3aXRoIFlYbWxIb29rLlxuICpcbiAqIEBleHRlbmRzIHtZTWFwPGFueT59XG4gKi9cbmNsYXNzIFlYbWxIb29rIGV4dGVuZHMgWU1hcCB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaG9va05hbWUgbm9kZU5hbWUgb2YgdGhlIERvbSBOb2RlLlxuICAgKi9cbiAgY29uc3RydWN0b3IgKGhvb2tOYW1lKSB7XG4gICAgc3VwZXIoKTtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMuaG9va05hbWUgPSBob29rTmFtZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIEl0ZW0gd2l0aCB0aGUgc2FtZSBlZmZlY3QgYXMgdGhpcyBJdGVtICh3aXRob3V0IHBvc2l0aW9uIGVmZmVjdClcbiAgICovXG4gIF9jb3B5ICgpIHtcbiAgICByZXR1cm4gbmV3IFlYbWxIb29rKHRoaXMuaG9va05hbWUpXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7WVhtbEhvb2t9XG4gICAqL1xuICBjbG9uZSAoKSB7XG4gICAgY29uc3QgZWwgPSBuZXcgWVhtbEhvb2sodGhpcy5ob29rTmFtZSk7XG4gICAgdGhpcy5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiB7XG4gICAgICBlbC5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGVsXG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIERvbSBFbGVtZW50IHRoYXQgbWlycm9ycyB0aGlzIFlYbWxFbGVtZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge0RvY3VtZW50fSBbX2RvY3VtZW50PWRvY3VtZW50XSBUaGUgZG9jdW1lbnQgb2JqZWN0ICh5b3UgbXVzdCBkZWZpbmVcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcyB3aGVuIGNhbGxpbmcgdGhpcyBtZXRob2QgaW5cbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZWpzKVxuICAgKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCBhbnk+fSBbaG9va3NdIE9wdGlvbmFsIHByb3BlcnR5IHRvIGN1c3RvbWl6ZSBob3cgaG9va3NcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmUgcHJlc2VudGVkIGluIHRoZSBET01cbiAgICogQHBhcmFtIHthbnl9IFtiaW5kaW5nXSBZb3Ugc2hvdWxkIG5vdCBzZXQgdGhpcyBwcm9wZXJ0eS4gVGhpcyBpc1xuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VkIGlmIERvbUJpbmRpbmcgd2FudHMgdG8gY3JlYXRlIGFcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXNzb2NpYXRpb24gdG8gdGhlIGNyZWF0ZWQgRE9NIHR5cGVcbiAgICogQHJldHVybiB7RWxlbWVudH0gVGhlIHtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRWxlbWVudHxEb20gRWxlbWVudH1cbiAgICpcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgdG9ET00gKF9kb2N1bWVudCA9IGRvY3VtZW50LCBob29rcyA9IHt9LCBiaW5kaW5nKSB7XG4gICAgY29uc3QgaG9vayA9IGhvb2tzW3RoaXMuaG9va05hbWVdO1xuICAgIGxldCBkb207XG4gICAgaWYgKGhvb2sgIT09IHVuZGVmaW5lZCkge1xuICAgICAgZG9tID0gaG9vay5jcmVhdGVEb20odGhpcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRvbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGhpcy5ob29rTmFtZSk7XG4gICAgfVxuICAgIGRvbS5zZXRBdHRyaWJ1dGUoJ2RhdGEteWpzLWhvb2snLCB0aGlzLmhvb2tOYW1lKTtcbiAgICBpZiAoYmluZGluZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBiaW5kaW5nLl9jcmVhdGVBc3NvY2lhdGlvbihkb20sIHRoaXMpO1xuICAgIH1cbiAgICByZXR1cm4gZG9tXG4gIH1cblxuICAvKipcbiAgICogVHJhbnNmb3JtIHRoZSBwcm9wZXJ0aWVzIG9mIHRoaXMgdHlwZSB0byBiaW5hcnkgYW5kIHdyaXRlIGl0IHRvIGFuXG4gICAqIEJpbmFyeUVuY29kZXIuXG4gICAqXG4gICAqIFRoaXMgaXMgY2FsbGVkIHdoZW4gdGhpcyBJdGVtIGlzIHNlbnQgdG8gYSByZW1vdGUgcGVlci5cbiAgICpcbiAgICogQHBhcmFtIHtVcGRhdGVFbmNvZGVyVjEgfCBVcGRhdGVFbmNvZGVyVjJ9IGVuY29kZXIgVGhlIGVuY29kZXIgdG8gd3JpdGUgZGF0YSB0by5cbiAgICovXG4gIF93cml0ZSAoZW5jb2Rlcikge1xuICAgIGVuY29kZXIud3JpdGVUeXBlUmVmKFlYbWxIb29rUmVmSUQpO1xuICAgIGVuY29kZXIud3JpdGVLZXkodGhpcy5ob29rTmFtZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge1VwZGF0ZURlY29kZXJWMSB8IFVwZGF0ZURlY29kZXJWMn0gZGVjb2RlclxuICogQHJldHVybiB7WVhtbEhvb2t9XG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCByZWFkWVhtbEhvb2sgPSBkZWNvZGVyID0+XG4gIG5ldyBZWG1sSG9vayhkZWNvZGVyLnJlYWRLZXkoKSk7XG5cbi8qKlxuICogUmVwcmVzZW50cyB0ZXh0IGluIGEgRG9tIEVsZW1lbnQuIEluIHRoZSBmdXR1cmUgdGhpcyB0eXBlIHdpbGwgYWxzbyBoYW5kbGVcbiAqIHNpbXBsZSBmb3JtYXR0aW5nIGluZm9ybWF0aW9uIGxpa2UgYm9sZCBhbmQgaXRhbGljLlxuICovXG5jbGFzcyBZWG1sVGV4dCBleHRlbmRzIFlUZXh0IHtcbiAgLyoqXG4gICAqIEB0eXBlIHtZWG1sRWxlbWVudHxZWG1sVGV4dHxudWxsfVxuICAgKi9cbiAgZ2V0IG5leHRTaWJsaW5nICgpIHtcbiAgICBjb25zdCBuID0gdGhpcy5faXRlbSA/IHRoaXMuX2l0ZW0ubmV4dCA6IG51bGw7XG4gICAgcmV0dXJuIG4gPyAvKiogQHR5cGUge1lYbWxFbGVtZW50fFlYbWxUZXh0fSAqLyAoLyoqIEB0eXBlIHtDb250ZW50VHlwZX0gKi8gKG4uY29udGVudCkudHlwZSkgOiBudWxsXG4gIH1cblxuICAvKipcbiAgICogQHR5cGUge1lYbWxFbGVtZW50fFlYbWxUZXh0fG51bGx9XG4gICAqL1xuICBnZXQgcHJldlNpYmxpbmcgKCkge1xuICAgIGNvbnN0IG4gPSB0aGlzLl9pdGVtID8gdGhpcy5faXRlbS5wcmV2IDogbnVsbDtcbiAgICByZXR1cm4gbiA/IC8qKiBAdHlwZSB7WVhtbEVsZW1lbnR8WVhtbFRleHR9ICovICgvKiogQHR5cGUge0NvbnRlbnRUeXBlfSAqLyAobi5jb250ZW50KS50eXBlKSA6IG51bGxcbiAgfVxuXG4gIF9jb3B5ICgpIHtcbiAgICByZXR1cm4gbmV3IFlYbWxUZXh0KClcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtZWG1sVGV4dH1cbiAgICovXG4gIGNsb25lICgpIHtcbiAgICBjb25zdCB0ZXh0ID0gbmV3IFlYbWxUZXh0KCk7XG4gICAgdGV4dC5hcHBseURlbHRhKHRoaXMudG9EZWx0YSgpKTtcbiAgICByZXR1cm4gdGV4dFxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBEb20gRWxlbWVudCB0aGF0IG1pcnJvcnMgdGhpcyBZWG1sVGV4dC5cbiAgICpcbiAgICogQHBhcmFtIHtEb2N1bWVudH0gW19kb2N1bWVudD1kb2N1bWVudF0gVGhlIGRvY3VtZW50IG9iamVjdCAoeW91IG11c3QgZGVmaW5lXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMgd2hlbiBjYWxsaW5nIHRoaXMgbWV0aG9kIGluXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVqcylcbiAgICogQHBhcmFtIHtPYmplY3Q8c3RyaW5nLCBhbnk+fSBbaG9va3NdIE9wdGlvbmFsIHByb3BlcnR5IHRvIGN1c3RvbWl6ZSBob3cgaG9va3NcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmUgcHJlc2VudGVkIGluIHRoZSBET01cbiAgICogQHBhcmFtIHthbnl9IFtiaW5kaW5nXSBZb3Ugc2hvdWxkIG5vdCBzZXQgdGhpcyBwcm9wZXJ0eS4gVGhpcyBpc1xuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VkIGlmIERvbUJpbmRpbmcgd2FudHMgdG8gY3JlYXRlIGFcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXNzb2NpYXRpb24gdG8gdGhlIGNyZWF0ZWQgRE9NIHR5cGUuXG4gICAqIEByZXR1cm4ge1RleHR9IFRoZSB7QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0VsZW1lbnR8RG9tIEVsZW1lbnR9XG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIHRvRE9NIChfZG9jdW1lbnQgPSBkb2N1bWVudCwgaG9va3MsIGJpbmRpbmcpIHtcbiAgICBjb25zdCBkb20gPSBfZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodGhpcy50b1N0cmluZygpKTtcbiAgICBpZiAoYmluZGluZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBiaW5kaW5nLl9jcmVhdGVBc3NvY2lhdGlvbihkb20sIHRoaXMpO1xuICAgIH1cbiAgICByZXR1cm4gZG9tXG4gIH1cblxuICB0b1N0cmluZyAoKSB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHJldHVybiB0aGlzLnRvRGVsdGEoKS5tYXAoZGVsdGEgPT4ge1xuICAgICAgY29uc3QgbmVzdGVkTm9kZXMgPSBbXTtcbiAgICAgIGZvciAoY29uc3Qgbm9kZU5hbWUgaW4gZGVsdGEuYXR0cmlidXRlcykge1xuICAgICAgICBjb25zdCBhdHRycyA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBkZWx0YS5hdHRyaWJ1dGVzW25vZGVOYW1lXSkge1xuICAgICAgICAgIGF0dHJzLnB1c2goeyBrZXksIHZhbHVlOiBkZWx0YS5hdHRyaWJ1dGVzW25vZGVOYW1lXVtrZXldIH0pO1xuICAgICAgICB9XG4gICAgICAgIC8vIHNvcnQgYXR0cmlidXRlcyB0byBnZXQgYSB1bmlxdWUgb3JkZXJcbiAgICAgICAgYXR0cnMuc29ydCgoYSwgYikgPT4gYS5rZXkgPCBiLmtleSA/IC0xIDogMSk7XG4gICAgICAgIG5lc3RlZE5vZGVzLnB1c2goeyBub2RlTmFtZSwgYXR0cnMgfSk7XG4gICAgICB9XG4gICAgICAvLyBzb3J0IG5vZGUgb3JkZXIgdG8gZ2V0IGEgdW5pcXVlIG9yZGVyXG4gICAgICBuZXN0ZWROb2Rlcy5zb3J0KChhLCBiKSA9PiBhLm5vZGVOYW1lIDwgYi5ub2RlTmFtZSA/IC0xIDogMSk7XG4gICAgICAvLyBub3cgY29udmVydCB0byBkb20gc3RyaW5nXG4gICAgICBsZXQgc3RyID0gJyc7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5lc3RlZE5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IG5vZGUgPSBuZXN0ZWROb2Rlc1tpXTtcbiAgICAgICAgc3RyICs9IGA8JHtub2RlLm5vZGVOYW1lfWA7XG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgbm9kZS5hdHRycy5sZW5ndGg7IGorKykge1xuICAgICAgICAgIGNvbnN0IGF0dHIgPSBub2RlLmF0dHJzW2pdO1xuICAgICAgICAgIHN0ciArPSBgICR7YXR0ci5rZXl9PVwiJHthdHRyLnZhbHVlfVwiYDtcbiAgICAgICAgfVxuICAgICAgICBzdHIgKz0gJz4nO1xuICAgICAgfVxuICAgICAgc3RyICs9IGRlbHRhLmluc2VydDtcbiAgICAgIGZvciAobGV0IGkgPSBuZXN0ZWROb2Rlcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICBzdHIgKz0gYDwvJHtuZXN0ZWROb2Rlc1tpXS5ub2RlTmFtZX0+YDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdHJcbiAgICB9KS5qb2luKCcnKVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIHRvSlNPTiAoKSB7XG4gICAgcmV0dXJuIHRoaXMudG9TdHJpbmcoKVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7VXBkYXRlRW5jb2RlclYxIHwgVXBkYXRlRW5jb2RlclYyfSBlbmNvZGVyXG4gICAqL1xuICBfd3JpdGUgKGVuY29kZXIpIHtcbiAgICBlbmNvZGVyLndyaXRlVHlwZVJlZihZWG1sVGV4dFJlZklEKTtcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7VXBkYXRlRGVjb2RlclYxIHwgVXBkYXRlRGVjb2RlclYyfSBkZWNvZGVyXG4gKiBAcmV0dXJuIHtZWG1sVGV4dH1cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IHJlYWRZWG1sVGV4dCA9IGRlY29kZXIgPT4gbmV3IFlYbWxUZXh0KCk7XG5cbmNsYXNzIEFic3RyYWN0U3RydWN0IHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7SUR9IGlkXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGhcbiAgICovXG4gIGNvbnN0cnVjdG9yIChpZCwgbGVuZ3RoKSB7XG4gICAgdGhpcy5pZCA9IGlkO1xuICAgIHRoaXMubGVuZ3RoID0gbGVuZ3RoO1xuICB9XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKi9cbiAgZ2V0IGRlbGV0ZWQgKCkge1xuICAgIHRocm93IGVycm9yLm1ldGhvZFVuaW1wbGVtZW50ZWQoKVxuICB9XG5cbiAgLyoqXG4gICAqIE1lcmdlIHRoaXMgc3RydWN0IHdpdGggdGhlIGl0ZW0gdG8gdGhlIHJpZ2h0LlxuICAgKiBUaGlzIG1ldGhvZCBpcyBhbHJlYWR5IGFzc3VtaW5nIHRoYXQgYHRoaXMuaWQuY2xvY2sgKyB0aGlzLmxlbmd0aCA9PT0gdGhpcy5pZC5jbG9ja2AuXG4gICAqIEFsc28gdGhpcyBtZXRob2QgZG9lcyAqbm90KiByZW1vdmUgcmlnaHQgZnJvbSBTdHJ1Y3RTdG9yZSFcbiAgICogQHBhcmFtIHtBYnN0cmFjdFN0cnVjdH0gcmlnaHRcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gd2V0aGVyIHRoaXMgbWVyZ2VkIHdpdGggcmlnaHRcbiAgICovXG4gIG1lcmdlV2l0aCAocmlnaHQpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1VwZGF0ZUVuY29kZXJWMSB8IFVwZGF0ZUVuY29kZXJWMn0gZW5jb2RlciBUaGUgZW5jb2RlciB0byB3cml0ZSBkYXRhIHRvLlxuICAgKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBlbmNvZGluZ1JlZlxuICAgKi9cbiAgd3JpdGUgKGVuY29kZXIsIG9mZnNldCwgZW5jb2RpbmdSZWYpIHtcbiAgICB0aHJvdyBlcnJvci5tZXRob2RVbmltcGxlbWVudGVkKClcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0XG4gICAqL1xuICBpbnRlZ3JhdGUgKHRyYW5zYWN0aW9uLCBvZmZzZXQpIHtcbiAgICB0aHJvdyBlcnJvci5tZXRob2RVbmltcGxlbWVudGVkKClcbiAgfVxufVxuXG5jb25zdCBzdHJ1Y3RHQ1JlZk51bWJlciA9IDA7XG5cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuY2xhc3MgR0MgZXh0ZW5kcyBBYnN0cmFjdFN0cnVjdCB7XG4gIGdldCBkZWxldGVkICgpIHtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgZGVsZXRlICgpIHt9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7R0N9IHJpZ2h0XG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBtZXJnZVdpdGggKHJpZ2h0KSB7XG4gICAgaWYgKHRoaXMuY29uc3RydWN0b3IgIT09IHJpZ2h0LmNvbnN0cnVjdG9yKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gICAgdGhpcy5sZW5ndGggKz0gcmlnaHQubGVuZ3RoO1xuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldFxuICAgKi9cbiAgaW50ZWdyYXRlICh0cmFuc2FjdGlvbiwgb2Zmc2V0KSB7XG4gICAgaWYgKG9mZnNldCA+IDApIHtcbiAgICAgIHRoaXMuaWQuY2xvY2sgKz0gb2Zmc2V0O1xuICAgICAgdGhpcy5sZW5ndGggLT0gb2Zmc2V0O1xuICAgIH1cbiAgICBhZGRTdHJ1Y3QodHJhbnNhY3Rpb24uZG9jLnN0b3JlLCB0aGlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1VwZGF0ZUVuY29kZXJWMSB8IFVwZGF0ZUVuY29kZXJWMn0gZW5jb2RlclxuICAgKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0XG4gICAqL1xuICB3cml0ZSAoZW5jb2Rlciwgb2Zmc2V0KSB7XG4gICAgZW5jb2Rlci53cml0ZUluZm8oc3RydWN0R0NSZWZOdW1iZXIpO1xuICAgIGVuY29kZXIud3JpdGVMZW4odGhpcy5sZW5ndGggLSBvZmZzZXQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBwYXJhbSB7U3RydWN0U3RvcmV9IHN0b3JlXG4gICAqIEByZXR1cm4ge251bGwgfCBudW1iZXJ9XG4gICAqL1xuICBnZXRNaXNzaW5nICh0cmFuc2FjdGlvbiwgc3RvcmUpIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG59XG5cbmNsYXNzIENvbnRlbnRCaW5hcnkge1xuICAvKipcbiAgICogQHBhcmFtIHtVaW50OEFycmF5fSBjb250ZW50XG4gICAqL1xuICBjb25zdHJ1Y3RvciAoY29udGVudCkge1xuICAgIHRoaXMuY29udGVudCA9IGNvbnRlbnQ7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0TGVuZ3RoICgpIHtcbiAgICByZXR1cm4gMVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge0FycmF5PGFueT59XG4gICAqL1xuICBnZXRDb250ZW50ICgpIHtcbiAgICByZXR1cm4gW3RoaXMuY29udGVudF1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgaXNDb3VudGFibGUgKCkge1xuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7Q29udGVudEJpbmFyeX1cbiAgICovXG4gIGNvcHkgKCkge1xuICAgIHJldHVybiBuZXcgQ29udGVudEJpbmFyeSh0aGlzLmNvbnRlbnQpXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldFxuICAgKiBAcmV0dXJuIHtDb250ZW50QmluYXJ5fVxuICAgKi9cbiAgc3BsaWNlIChvZmZzZXQpIHtcbiAgICB0aHJvdyBlcnJvci5tZXRob2RVbmltcGxlbWVudGVkKClcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0NvbnRlbnRCaW5hcnl9IHJpZ2h0XG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBtZXJnZVdpdGggKHJpZ2h0KSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHBhcmFtIHtJdGVtfSBpdGVtXG4gICAqL1xuICBpbnRlZ3JhdGUgKHRyYW5zYWN0aW9uLCBpdGVtKSB7fVxuICAvKipcbiAgICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICovXG4gIGRlbGV0ZSAodHJhbnNhY3Rpb24pIHt9XG4gIC8qKlxuICAgKiBAcGFyYW0ge1N0cnVjdFN0b3JlfSBzdG9yZVxuICAgKi9cbiAgZ2MgKHN0b3JlKSB7fVxuICAvKipcbiAgICogQHBhcmFtIHtVcGRhdGVFbmNvZGVyVjEgfCBVcGRhdGVFbmNvZGVyVjJ9IGVuY29kZXJcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldFxuICAgKi9cbiAgd3JpdGUgKGVuY29kZXIsIG9mZnNldCkge1xuICAgIGVuY29kZXIud3JpdGVCdWYodGhpcy5jb250ZW50KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICBnZXRSZWYgKCkge1xuICAgIHJldHVybiAzXG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge1VwZGF0ZURlY29kZXJWMSB8IFVwZGF0ZURlY29kZXJWMiB9IGRlY29kZXJcbiAqIEByZXR1cm4ge0NvbnRlbnRCaW5hcnl9XG4gKi9cbmNvbnN0IHJlYWRDb250ZW50QmluYXJ5ID0gZGVjb2RlciA9PiBuZXcgQ29udGVudEJpbmFyeShkZWNvZGVyLnJlYWRCdWYoKSk7XG5cbmNsYXNzIENvbnRlbnREZWxldGVkIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBsZW5cbiAgICovXG4gIGNvbnN0cnVjdG9yIChsZW4pIHtcbiAgICB0aGlzLmxlbiA9IGxlbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICBnZXRMZW5ndGggKCkge1xuICAgIHJldHVybiB0aGlzLmxlblxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge0FycmF5PGFueT59XG4gICAqL1xuICBnZXRDb250ZW50ICgpIHtcbiAgICByZXR1cm4gW11cbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgaXNDb3VudGFibGUgKCkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge0NvbnRlbnREZWxldGVkfVxuICAgKi9cbiAgY29weSAoKSB7XG4gICAgcmV0dXJuIG5ldyBDb250ZW50RGVsZXRlZCh0aGlzLmxlbilcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0XG4gICAqIEByZXR1cm4ge0NvbnRlbnREZWxldGVkfVxuICAgKi9cbiAgc3BsaWNlIChvZmZzZXQpIHtcbiAgICBjb25zdCByaWdodCA9IG5ldyBDb250ZW50RGVsZXRlZCh0aGlzLmxlbiAtIG9mZnNldCk7XG4gICAgdGhpcy5sZW4gPSBvZmZzZXQ7XG4gICAgcmV0dXJuIHJpZ2h0XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtDb250ZW50RGVsZXRlZH0gcmlnaHRcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIG1lcmdlV2l0aCAocmlnaHQpIHtcbiAgICB0aGlzLmxlbiArPSByaWdodC5sZW47XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAcGFyYW0ge0l0ZW19IGl0ZW1cbiAgICovXG4gIGludGVncmF0ZSAodHJhbnNhY3Rpb24sIGl0ZW0pIHtcbiAgICBhZGRUb0RlbGV0ZVNldCh0cmFuc2FjdGlvbi5kZWxldGVTZXQsIGl0ZW0uaWQuY2xpZW50LCBpdGVtLmlkLmNsb2NrLCB0aGlzLmxlbik7XG4gICAgaXRlbS5tYXJrRGVsZXRlZCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqL1xuICBkZWxldGUgKHRyYW5zYWN0aW9uKSB7fVxuICAvKipcbiAgICogQHBhcmFtIHtTdHJ1Y3RTdG9yZX0gc3RvcmVcbiAgICovXG4gIGdjIChzdG9yZSkge31cbiAgLyoqXG4gICAqIEBwYXJhbSB7VXBkYXRlRW5jb2RlclYxIHwgVXBkYXRlRW5jb2RlclYyfSBlbmNvZGVyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXRcbiAgICovXG4gIHdyaXRlIChlbmNvZGVyLCBvZmZzZXQpIHtcbiAgICBlbmNvZGVyLndyaXRlTGVuKHRoaXMubGVuIC0gb2Zmc2V0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICBnZXRSZWYgKCkge1xuICAgIHJldHVybiAxXG4gIH1cbn1cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICpcbiAqIEBwYXJhbSB7VXBkYXRlRGVjb2RlclYxIHwgVXBkYXRlRGVjb2RlclYyIH0gZGVjb2RlclxuICogQHJldHVybiB7Q29udGVudERlbGV0ZWR9XG4gKi9cbmNvbnN0IHJlYWRDb250ZW50RGVsZXRlZCA9IGRlY29kZXIgPT4gbmV3IENvbnRlbnREZWxldGVkKGRlY29kZXIucmVhZExlbigpKTtcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gZ3VpZFxuICogQHBhcmFtIHtPYmplY3Q8c3RyaW5nLCBhbnk+fSBvcHRzXG4gKi9cbmNvbnN0IGNyZWF0ZURvY0Zyb21PcHRzID0gKGd1aWQsIG9wdHMpID0+IG5ldyBEb2MoeyBndWlkLCAuLi5vcHRzLCBzaG91bGRMb2FkOiBvcHRzLnNob3VsZExvYWQgfHwgb3B0cy5hdXRvTG9hZCB8fCBmYWxzZSB9KTtcblxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5jbGFzcyBDb250ZW50RG9jIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7RG9jfSBkb2NcbiAgICovXG4gIGNvbnN0cnVjdG9yIChkb2MpIHtcbiAgICBpZiAoZG9jLl9pdGVtKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdUaGlzIGRvY3VtZW50IHdhcyBhbHJlYWR5IGludGVncmF0ZWQgYXMgYSBzdWItZG9jdW1lbnQuIFlvdSBzaG91bGQgY3JlYXRlIGEgc2Vjb25kIGluc3RhbmNlIGluc3RlYWQgd2l0aCB0aGUgc2FtZSBndWlkLicpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7RG9jfVxuICAgICAqL1xuICAgIHRoaXMuZG9jID0gZG9jO1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHthbnl9XG4gICAgICovXG4gICAgY29uc3Qgb3B0cyA9IHt9O1xuICAgIHRoaXMub3B0cyA9IG9wdHM7XG4gICAgaWYgKCFkb2MuZ2MpIHtcbiAgICAgIG9wdHMuZ2MgPSBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGRvYy5hdXRvTG9hZCkge1xuICAgICAgb3B0cy5hdXRvTG9hZCA9IHRydWU7XG4gICAgfVxuICAgIGlmIChkb2MubWV0YSAhPT0gbnVsbCkge1xuICAgICAgb3B0cy5tZXRhID0gZG9jLm1ldGE7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIGdldExlbmd0aCAoKSB7XG4gICAgcmV0dXJuIDFcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtBcnJheTxhbnk+fVxuICAgKi9cbiAgZ2V0Q29udGVudCAoKSB7XG4gICAgcmV0dXJuIFt0aGlzLmRvY11cbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgaXNDb3VudGFibGUgKCkge1xuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7Q29udGVudERvY31cbiAgICovXG4gIGNvcHkgKCkge1xuICAgIHJldHVybiBuZXcgQ29udGVudERvYyhjcmVhdGVEb2NGcm9tT3B0cyh0aGlzLmRvYy5ndWlkLCB0aGlzLm9wdHMpKVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXRcbiAgICogQHJldHVybiB7Q29udGVudERvY31cbiAgICovXG4gIHNwbGljZSAob2Zmc2V0KSB7XG4gICAgdGhyb3cgZXJyb3IubWV0aG9kVW5pbXBsZW1lbnRlZCgpXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtDb250ZW50RG9jfSByaWdodFxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgbWVyZ2VXaXRoIChyaWdodCkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBwYXJhbSB7SXRlbX0gaXRlbVxuICAgKi9cbiAgaW50ZWdyYXRlICh0cmFuc2FjdGlvbiwgaXRlbSkge1xuICAgIC8vIHRoaXMgbmVlZHMgdG8gYmUgcmVmbGVjdGVkIGluIGRvYy5kZXN0cm95IGFzIHdlbGxcbiAgICB0aGlzLmRvYy5faXRlbSA9IGl0ZW07XG4gICAgdHJhbnNhY3Rpb24uc3ViZG9jc0FkZGVkLmFkZCh0aGlzLmRvYyk7XG4gICAgaWYgKHRoaXMuZG9jLnNob3VsZExvYWQpIHtcbiAgICAgIHRyYW5zYWN0aW9uLnN1YmRvY3NMb2FkZWQuYWRkKHRoaXMuZG9jKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICovXG4gIGRlbGV0ZSAodHJhbnNhY3Rpb24pIHtcbiAgICBpZiAodHJhbnNhY3Rpb24uc3ViZG9jc0FkZGVkLmhhcyh0aGlzLmRvYykpIHtcbiAgICAgIHRyYW5zYWN0aW9uLnN1YmRvY3NBZGRlZC5kZWxldGUodGhpcy5kb2MpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0cmFuc2FjdGlvbi5zdWJkb2NzUmVtb3ZlZC5hZGQodGhpcy5kb2MpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1N0cnVjdFN0b3JlfSBzdG9yZVxuICAgKi9cbiAgZ2MgKHN0b3JlKSB7IH1cblxuICAvKipcbiAgICogQHBhcmFtIHtVcGRhdGVFbmNvZGVyVjEgfCBVcGRhdGVFbmNvZGVyVjJ9IGVuY29kZXJcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldFxuICAgKi9cbiAgd3JpdGUgKGVuY29kZXIsIG9mZnNldCkge1xuICAgIGVuY29kZXIud3JpdGVTdHJpbmcodGhpcy5kb2MuZ3VpZCk7XG4gICAgZW5jb2Rlci53cml0ZUFueSh0aGlzLm9wdHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIGdldFJlZiAoKSB7XG4gICAgcmV0dXJuIDlcbiAgfVxufVxuXG4vKipcbiAqIEBwcml2YXRlXG4gKlxuICogQHBhcmFtIHtVcGRhdGVEZWNvZGVyVjEgfCBVcGRhdGVEZWNvZGVyVjJ9IGRlY29kZXJcbiAqIEByZXR1cm4ge0NvbnRlbnREb2N9XG4gKi9cbmNvbnN0IHJlYWRDb250ZW50RG9jID0gZGVjb2RlciA9PiBuZXcgQ29udGVudERvYyhjcmVhdGVEb2NGcm9tT3B0cyhkZWNvZGVyLnJlYWRTdHJpbmcoKSwgZGVjb2Rlci5yZWFkQW55KCkpKTtcblxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5jbGFzcyBDb250ZW50RW1iZWQge1xuICAvKipcbiAgICogQHBhcmFtIHtPYmplY3R9IGVtYmVkXG4gICAqL1xuICBjb25zdHJ1Y3RvciAoZW1iZWQpIHtcbiAgICB0aGlzLmVtYmVkID0gZW1iZWQ7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0TGVuZ3RoICgpIHtcbiAgICByZXR1cm4gMVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge0FycmF5PGFueT59XG4gICAqL1xuICBnZXRDb250ZW50ICgpIHtcbiAgICByZXR1cm4gW3RoaXMuZW1iZWRdXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIGlzQ291bnRhYmxlICgpIHtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge0NvbnRlbnRFbWJlZH1cbiAgICovXG4gIGNvcHkgKCkge1xuICAgIHJldHVybiBuZXcgQ29udGVudEVtYmVkKHRoaXMuZW1iZWQpXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldFxuICAgKiBAcmV0dXJuIHtDb250ZW50RW1iZWR9XG4gICAqL1xuICBzcGxpY2UgKG9mZnNldCkge1xuICAgIHRocm93IGVycm9yLm1ldGhvZFVuaW1wbGVtZW50ZWQoKVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Q29udGVudEVtYmVkfSByaWdodFxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgbWVyZ2VXaXRoIChyaWdodCkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBwYXJhbSB7SXRlbX0gaXRlbVxuICAgKi9cbiAgaW50ZWdyYXRlICh0cmFuc2FjdGlvbiwgaXRlbSkge31cbiAgLyoqXG4gICAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqL1xuICBkZWxldGUgKHRyYW5zYWN0aW9uKSB7fVxuICAvKipcbiAgICogQHBhcmFtIHtTdHJ1Y3RTdG9yZX0gc3RvcmVcbiAgICovXG4gIGdjIChzdG9yZSkge31cbiAgLyoqXG4gICAqIEBwYXJhbSB7VXBkYXRlRW5jb2RlclYxIHwgVXBkYXRlRW5jb2RlclYyfSBlbmNvZGVyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXRcbiAgICovXG4gIHdyaXRlIChlbmNvZGVyLCBvZmZzZXQpIHtcbiAgICBlbmNvZGVyLndyaXRlSlNPTih0aGlzLmVtYmVkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICBnZXRSZWYgKCkge1xuICAgIHJldHVybiA1XG4gIH1cbn1cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICpcbiAqIEBwYXJhbSB7VXBkYXRlRGVjb2RlclYxIHwgVXBkYXRlRGVjb2RlclYyfSBkZWNvZGVyXG4gKiBAcmV0dXJuIHtDb250ZW50RW1iZWR9XG4gKi9cbmNvbnN0IHJlYWRDb250ZW50RW1iZWQgPSBkZWNvZGVyID0+IG5ldyBDb250ZW50RW1iZWQoZGVjb2Rlci5yZWFkSlNPTigpKTtcblxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5jbGFzcyBDb250ZW50Rm9ybWF0IHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXlcbiAgICogQHBhcmFtIHtPYmplY3R9IHZhbHVlXG4gICAqL1xuICBjb25zdHJ1Y3RvciAoa2V5LCB2YWx1ZSkge1xuICAgIHRoaXMua2V5ID0ga2V5O1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICBnZXRMZW5ndGggKCkge1xuICAgIHJldHVybiAxXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7QXJyYXk8YW55Pn1cbiAgICovXG4gIGdldENvbnRlbnQgKCkge1xuICAgIHJldHVybiBbXVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBpc0NvdW50YWJsZSAoKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7Q29udGVudEZvcm1hdH1cbiAgICovXG4gIGNvcHkgKCkge1xuICAgIHJldHVybiBuZXcgQ29udGVudEZvcm1hdCh0aGlzLmtleSwgdGhpcy52YWx1ZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0XG4gICAqIEByZXR1cm4ge0NvbnRlbnRGb3JtYXR9XG4gICAqL1xuICBzcGxpY2UgKG9mZnNldCkge1xuICAgIHRocm93IGVycm9yLm1ldGhvZFVuaW1wbGVtZW50ZWQoKVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Q29udGVudEZvcm1hdH0gcmlnaHRcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIG1lcmdlV2l0aCAocmlnaHQpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAcGFyYW0ge0l0ZW19IGl0ZW1cbiAgICovXG4gIGludGVncmF0ZSAodHJhbnNhY3Rpb24sIGl0ZW0pIHtcbiAgICAvLyBAdG9kbyBzZWFyY2htYXJrZXIgYXJlIGN1cnJlbnRseSB1bnN1cHBvcnRlZCBmb3IgcmljaCB0ZXh0IGRvY3VtZW50c1xuICAgIC8qKiBAdHlwZSB7QWJzdHJhY3RUeXBlPGFueT59ICovIChpdGVtLnBhcmVudCkuX3NlYXJjaE1hcmtlciA9IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICovXG4gIGRlbGV0ZSAodHJhbnNhY3Rpb24pIHt9XG4gIC8qKlxuICAgKiBAcGFyYW0ge1N0cnVjdFN0b3JlfSBzdG9yZVxuICAgKi9cbiAgZ2MgKHN0b3JlKSB7fVxuICAvKipcbiAgICogQHBhcmFtIHtVcGRhdGVFbmNvZGVyVjEgfCBVcGRhdGVFbmNvZGVyVjJ9IGVuY29kZXJcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldFxuICAgKi9cbiAgd3JpdGUgKGVuY29kZXIsIG9mZnNldCkge1xuICAgIGVuY29kZXIud3JpdGVLZXkodGhpcy5rZXkpO1xuICAgIGVuY29kZXIud3JpdGVKU09OKHRoaXMudmFsdWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIGdldFJlZiAoKSB7XG4gICAgcmV0dXJuIDZcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7VXBkYXRlRGVjb2RlclYxIHwgVXBkYXRlRGVjb2RlclYyfSBkZWNvZGVyXG4gKiBAcmV0dXJuIHtDb250ZW50Rm9ybWF0fVxuICovXG5jb25zdCByZWFkQ29udGVudEZvcm1hdCA9IGRlY29kZXIgPT4gbmV3IENvbnRlbnRGb3JtYXQoZGVjb2Rlci5yZWFkS2V5KCksIGRlY29kZXIucmVhZEpTT04oKSk7XG5cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuY2xhc3MgQ29udGVudEpTT04ge1xuICAvKipcbiAgICogQHBhcmFtIHtBcnJheTxhbnk+fSBhcnJcbiAgICovXG4gIGNvbnN0cnVjdG9yIChhcnIpIHtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7QXJyYXk8YW55Pn1cbiAgICAgKi9cbiAgICB0aGlzLmFyciA9IGFycjtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICBnZXRMZW5ndGggKCkge1xuICAgIHJldHVybiB0aGlzLmFyci5sZW5ndGhcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtBcnJheTxhbnk+fVxuICAgKi9cbiAgZ2V0Q29udGVudCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuYXJyXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIGlzQ291bnRhYmxlICgpIHtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge0NvbnRlbnRKU09OfVxuICAgKi9cbiAgY29weSAoKSB7XG4gICAgcmV0dXJuIG5ldyBDb250ZW50SlNPTih0aGlzLmFycilcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0XG4gICAqIEByZXR1cm4ge0NvbnRlbnRKU09OfVxuICAgKi9cbiAgc3BsaWNlIChvZmZzZXQpIHtcbiAgICBjb25zdCByaWdodCA9IG5ldyBDb250ZW50SlNPTih0aGlzLmFyci5zbGljZShvZmZzZXQpKTtcbiAgICB0aGlzLmFyciA9IHRoaXMuYXJyLnNsaWNlKDAsIG9mZnNldCk7XG4gICAgcmV0dXJuIHJpZ2h0XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtDb250ZW50SlNPTn0gcmlnaHRcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIG1lcmdlV2l0aCAocmlnaHQpIHtcbiAgICB0aGlzLmFyciA9IHRoaXMuYXJyLmNvbmNhdChyaWdodC5hcnIpO1xuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHBhcmFtIHtJdGVtfSBpdGVtXG4gICAqL1xuICBpbnRlZ3JhdGUgKHRyYW5zYWN0aW9uLCBpdGVtKSB7fVxuICAvKipcbiAgICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICovXG4gIGRlbGV0ZSAodHJhbnNhY3Rpb24pIHt9XG4gIC8qKlxuICAgKiBAcGFyYW0ge1N0cnVjdFN0b3JlfSBzdG9yZVxuICAgKi9cbiAgZ2MgKHN0b3JlKSB7fVxuICAvKipcbiAgICogQHBhcmFtIHtVcGRhdGVFbmNvZGVyVjEgfCBVcGRhdGVFbmNvZGVyVjJ9IGVuY29kZXJcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldFxuICAgKi9cbiAgd3JpdGUgKGVuY29kZXIsIG9mZnNldCkge1xuICAgIGNvbnN0IGxlbiA9IHRoaXMuYXJyLmxlbmd0aDtcbiAgICBlbmNvZGVyLndyaXRlTGVuKGxlbiAtIG9mZnNldCk7XG4gICAgZm9yIChsZXQgaSA9IG9mZnNldDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBjb25zdCBjID0gdGhpcy5hcnJbaV07XG4gICAgICBlbmNvZGVyLndyaXRlU3RyaW5nKGMgPT09IHVuZGVmaW5lZCA/ICd1bmRlZmluZWQnIDogSlNPTi5zdHJpbmdpZnkoYykpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICBnZXRSZWYgKCkge1xuICAgIHJldHVybiAyXG4gIH1cbn1cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICpcbiAqIEBwYXJhbSB7VXBkYXRlRGVjb2RlclYxIHwgVXBkYXRlRGVjb2RlclYyfSBkZWNvZGVyXG4gKiBAcmV0dXJuIHtDb250ZW50SlNPTn1cbiAqL1xuY29uc3QgcmVhZENvbnRlbnRKU09OID0gZGVjb2RlciA9PiB7XG4gIGNvbnN0IGxlbiA9IGRlY29kZXIucmVhZExlbigpO1xuICBjb25zdCBjcyA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgY29uc3QgYyA9IGRlY29kZXIucmVhZFN0cmluZygpO1xuICAgIGlmIChjID09PSAndW5kZWZpbmVkJykge1xuICAgICAgY3MucHVzaCh1bmRlZmluZWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjcy5wdXNoKEpTT04ucGFyc2UoYykpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbmV3IENvbnRlbnRKU09OKGNzKVxufTtcblxuY2xhc3MgQ29udGVudEFueSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge0FycmF5PGFueT59IGFyclxuICAgKi9cbiAgY29uc3RydWN0b3IgKGFycikge1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtBcnJheTxhbnk+fVxuICAgICAqL1xuICAgIHRoaXMuYXJyID0gYXJyO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIGdldExlbmd0aCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuYXJyLmxlbmd0aFxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge0FycmF5PGFueT59XG4gICAqL1xuICBnZXRDb250ZW50ICgpIHtcbiAgICByZXR1cm4gdGhpcy5hcnJcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgaXNDb3VudGFibGUgKCkge1xuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7Q29udGVudEFueX1cbiAgICovXG4gIGNvcHkgKCkge1xuICAgIHJldHVybiBuZXcgQ29udGVudEFueSh0aGlzLmFycilcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0XG4gICAqIEByZXR1cm4ge0NvbnRlbnRBbnl9XG4gICAqL1xuICBzcGxpY2UgKG9mZnNldCkge1xuICAgIGNvbnN0IHJpZ2h0ID0gbmV3IENvbnRlbnRBbnkodGhpcy5hcnIuc2xpY2Uob2Zmc2V0KSk7XG4gICAgdGhpcy5hcnIgPSB0aGlzLmFyci5zbGljZSgwLCBvZmZzZXQpO1xuICAgIHJldHVybiByaWdodFxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Q29udGVudEFueX0gcmlnaHRcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIG1lcmdlV2l0aCAocmlnaHQpIHtcbiAgICB0aGlzLmFyciA9IHRoaXMuYXJyLmNvbmNhdChyaWdodC5hcnIpO1xuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHBhcmFtIHtJdGVtfSBpdGVtXG4gICAqL1xuICBpbnRlZ3JhdGUgKHRyYW5zYWN0aW9uLCBpdGVtKSB7fVxuICAvKipcbiAgICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICovXG4gIGRlbGV0ZSAodHJhbnNhY3Rpb24pIHt9XG4gIC8qKlxuICAgKiBAcGFyYW0ge1N0cnVjdFN0b3JlfSBzdG9yZVxuICAgKi9cbiAgZ2MgKHN0b3JlKSB7fVxuICAvKipcbiAgICogQHBhcmFtIHtVcGRhdGVFbmNvZGVyVjEgfCBVcGRhdGVFbmNvZGVyVjJ9IGVuY29kZXJcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldFxuICAgKi9cbiAgd3JpdGUgKGVuY29kZXIsIG9mZnNldCkge1xuICAgIGNvbnN0IGxlbiA9IHRoaXMuYXJyLmxlbmd0aDtcbiAgICBlbmNvZGVyLndyaXRlTGVuKGxlbiAtIG9mZnNldCk7XG4gICAgZm9yIChsZXQgaSA9IG9mZnNldDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBjb25zdCBjID0gdGhpcy5hcnJbaV07XG4gICAgICBlbmNvZGVyLndyaXRlQW55KGMpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICBnZXRSZWYgKCkge1xuICAgIHJldHVybiA4XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge1VwZGF0ZURlY29kZXJWMSB8IFVwZGF0ZURlY29kZXJWMn0gZGVjb2RlclxuICogQHJldHVybiB7Q29udGVudEFueX1cbiAqL1xuY29uc3QgcmVhZENvbnRlbnRBbnkgPSBkZWNvZGVyID0+IHtcbiAgY29uc3QgbGVuID0gZGVjb2Rlci5yZWFkTGVuKCk7XG4gIGNvbnN0IGNzID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBjcy5wdXNoKGRlY29kZXIucmVhZEFueSgpKTtcbiAgfVxuICByZXR1cm4gbmV3IENvbnRlbnRBbnkoY3MpXG59O1xuXG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmNsYXNzIENvbnRlbnRTdHJpbmcge1xuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0clxuICAgKi9cbiAgY29uc3RydWN0b3IgKHN0cikge1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5zdHIgPSBzdHI7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0TGVuZ3RoICgpIHtcbiAgICByZXR1cm4gdGhpcy5zdHIubGVuZ3RoXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7QXJyYXk8YW55Pn1cbiAgICovXG4gIGdldENvbnRlbnQgKCkge1xuICAgIHJldHVybiB0aGlzLnN0ci5zcGxpdCgnJylcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgaXNDb3VudGFibGUgKCkge1xuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7Q29udGVudFN0cmluZ31cbiAgICovXG4gIGNvcHkgKCkge1xuICAgIHJldHVybiBuZXcgQ29udGVudFN0cmluZyh0aGlzLnN0cilcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0XG4gICAqIEByZXR1cm4ge0NvbnRlbnRTdHJpbmd9XG4gICAqL1xuICBzcGxpY2UgKG9mZnNldCkge1xuICAgIGNvbnN0IHJpZ2h0ID0gbmV3IENvbnRlbnRTdHJpbmcodGhpcy5zdHIuc2xpY2Uob2Zmc2V0KSk7XG4gICAgdGhpcy5zdHIgPSB0aGlzLnN0ci5zbGljZSgwLCBvZmZzZXQpO1xuXG4gICAgLy8gUHJldmVudCBlbmNvZGluZyBpbnZhbGlkIGRvY3VtZW50cyBiZWNhdXNlIG9mIHNwbGl0dGluZyBvZiBzdXJyb2dhdGUgcGFpcnM6IGh0dHBzOi8vZ2l0aHViLmNvbS95anMveWpzL2lzc3Vlcy8yNDhcbiAgICBjb25zdCBmaXJzdENoYXJDb2RlID0gdGhpcy5zdHIuY2hhckNvZGVBdChvZmZzZXQgLSAxKTtcbiAgICBpZiAoZmlyc3RDaGFyQ29kZSA+PSAweEQ4MDAgJiYgZmlyc3RDaGFyQ29kZSA8PSAweERCRkYpIHtcbiAgICAgIC8vIExhc3QgY2hhcmFjdGVyIG9mIHRoZSBsZWZ0IHNwbGl0IGlzIHRoZSBzdGFydCBvZiBhIHN1cnJvZ2F0ZSB1dGYxNi91Y3MyIHBhaXIuXG4gICAgICAvLyBXZSBkb24ndCBzdXBwb3J0IHNwbGl0dGluZyBvZiBzdXJyb2dhdGUgcGFpcnMgYmVjYXVzZSB0aGlzIG1heSBsZWFkIHRvIGludmFsaWQgZG9jdW1lbnRzLlxuICAgICAgLy8gUmVwbGFjZSB0aGUgaW52YWxpZCBjaGFyYWN0ZXIgd2l0aCBhIHVuaWNvZGUgcmVwbGFjZW1lbnQgY2hhcmFjdGVyICjvv70gLyBVK0ZGRkQpXG4gICAgICB0aGlzLnN0ciA9IHRoaXMuc3RyLnNsaWNlKDAsIG9mZnNldCAtIDEpICsgJ++/vSc7XG4gICAgICAvLyByZXBsYWNlIHJpZ2h0IGFzIHdlbGxcbiAgICAgIHJpZ2h0LnN0ciA9ICfvv70nICsgcmlnaHQuc3RyLnNsaWNlKDEpO1xuICAgIH1cbiAgICByZXR1cm4gcmlnaHRcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0NvbnRlbnRTdHJpbmd9IHJpZ2h0XG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBtZXJnZVdpdGggKHJpZ2h0KSB7XG4gICAgdGhpcy5zdHIgKz0gcmlnaHQuc3RyO1xuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHBhcmFtIHtJdGVtfSBpdGVtXG4gICAqL1xuICBpbnRlZ3JhdGUgKHRyYW5zYWN0aW9uLCBpdGVtKSB7fVxuICAvKipcbiAgICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICovXG4gIGRlbGV0ZSAodHJhbnNhY3Rpb24pIHt9XG4gIC8qKlxuICAgKiBAcGFyYW0ge1N0cnVjdFN0b3JlfSBzdG9yZVxuICAgKi9cbiAgZ2MgKHN0b3JlKSB7fVxuICAvKipcbiAgICogQHBhcmFtIHtVcGRhdGVFbmNvZGVyVjEgfCBVcGRhdGVFbmNvZGVyVjJ9IGVuY29kZXJcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldFxuICAgKi9cbiAgd3JpdGUgKGVuY29kZXIsIG9mZnNldCkge1xuICAgIGVuY29kZXIud3JpdGVTdHJpbmcob2Zmc2V0ID09PSAwID8gdGhpcy5zdHIgOiB0aGlzLnN0ci5zbGljZShvZmZzZXQpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICBnZXRSZWYgKCkge1xuICAgIHJldHVybiA0XG4gIH1cbn1cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICpcbiAqIEBwYXJhbSB7VXBkYXRlRGVjb2RlclYxIHwgVXBkYXRlRGVjb2RlclYyfSBkZWNvZGVyXG4gKiBAcmV0dXJuIHtDb250ZW50U3RyaW5nfVxuICovXG5jb25zdCByZWFkQ29udGVudFN0cmluZyA9IGRlY29kZXIgPT4gbmV3IENvbnRlbnRTdHJpbmcoZGVjb2Rlci5yZWFkU3RyaW5nKCkpO1xuXG4vKipcbiAqIEB0eXBlIHtBcnJheTxmdW5jdGlvbihVcGRhdGVEZWNvZGVyVjEgfCBVcGRhdGVEZWNvZGVyVjIpOkFic3RyYWN0VHlwZTxhbnk+Pn1cbiAqIEBwcml2YXRlXG4gKi9cbmNvbnN0IHR5cGVSZWZzID0gW1xuICByZWFkWUFycmF5LFxuICByZWFkWU1hcCxcbiAgcmVhZFlUZXh0LFxuICByZWFkWVhtbEVsZW1lbnQsXG4gIHJlYWRZWG1sRnJhZ21lbnQsXG4gIHJlYWRZWG1sSG9vayxcbiAgcmVhZFlYbWxUZXh0XG5dO1xuXG5jb25zdCBZQXJyYXlSZWZJRCA9IDA7XG5jb25zdCBZTWFwUmVmSUQgPSAxO1xuY29uc3QgWVRleHRSZWZJRCA9IDI7XG5jb25zdCBZWG1sRWxlbWVudFJlZklEID0gMztcbmNvbnN0IFlYbWxGcmFnbWVudFJlZklEID0gNDtcbmNvbnN0IFlYbWxIb29rUmVmSUQgPSA1O1xuY29uc3QgWVhtbFRleHRSZWZJRCA9IDY7XG5cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuY2xhc3MgQ29udGVudFR5cGUge1xuICAvKipcbiAgICogQHBhcmFtIHtBYnN0cmFjdFR5cGU8YW55Pn0gdHlwZVxuICAgKi9cbiAgY29uc3RydWN0b3IgKHR5cGUpIHtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7QWJzdHJhY3RUeXBlPGFueT59XG4gICAgICovXG4gICAgdGhpcy50eXBlID0gdHlwZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICBnZXRMZW5ndGggKCkge1xuICAgIHJldHVybiAxXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7QXJyYXk8YW55Pn1cbiAgICovXG4gIGdldENvbnRlbnQgKCkge1xuICAgIHJldHVybiBbdGhpcy50eXBlXVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBpc0NvdW50YWJsZSAoKSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtDb250ZW50VHlwZX1cbiAgICovXG4gIGNvcHkgKCkge1xuICAgIHJldHVybiBuZXcgQ29udGVudFR5cGUodGhpcy50eXBlLl9jb3B5KCkpXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldFxuICAgKiBAcmV0dXJuIHtDb250ZW50VHlwZX1cbiAgICovXG4gIHNwbGljZSAob2Zmc2V0KSB7XG4gICAgdGhyb3cgZXJyb3IubWV0aG9kVW5pbXBsZW1lbnRlZCgpXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtDb250ZW50VHlwZX0gcmlnaHRcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIG1lcmdlV2l0aCAocmlnaHQpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAcGFyYW0ge0l0ZW19IGl0ZW1cbiAgICovXG4gIGludGVncmF0ZSAodHJhbnNhY3Rpb24sIGl0ZW0pIHtcbiAgICB0aGlzLnR5cGUuX2ludGVncmF0ZSh0cmFuc2FjdGlvbi5kb2MsIGl0ZW0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqL1xuICBkZWxldGUgKHRyYW5zYWN0aW9uKSB7XG4gICAgbGV0IGl0ZW0gPSB0aGlzLnR5cGUuX3N0YXJ0O1xuICAgIHdoaWxlIChpdGVtICE9PSBudWxsKSB7XG4gICAgICBpZiAoIWl0ZW0uZGVsZXRlZCkge1xuICAgICAgICBpdGVtLmRlbGV0ZSh0cmFuc2FjdGlvbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBUaGlzIHdpbGwgYmUgZ2MnZCBsYXRlciBhbmQgd2Ugd2FudCB0byBtZXJnZSBpdCBpZiBwb3NzaWJsZVxuICAgICAgICAvLyBXZSB0cnkgdG8gbWVyZ2UgYWxsIGRlbGV0ZWQgaXRlbXMgYWZ0ZXIgZWFjaCB0cmFuc2FjdGlvbixcbiAgICAgICAgLy8gYnV0IHdlIGhhdmUgbm8ga25vd2xlZGdlIGFib3V0IHRoYXQgdGhpcyBuZWVkcyB0byBiZSBtZXJnZWRcbiAgICAgICAgLy8gc2luY2UgaXQgaXMgbm90IGluIHRyYW5zYWN0aW9uLmRzLiBIZW5jZSB3ZSBhZGQgaXQgdG8gdHJhbnNhY3Rpb24uX21lcmdlU3RydWN0c1xuICAgICAgICB0cmFuc2FjdGlvbi5fbWVyZ2VTdHJ1Y3RzLnB1c2goaXRlbSk7XG4gICAgICB9XG4gICAgICBpdGVtID0gaXRlbS5yaWdodDtcbiAgICB9XG4gICAgdGhpcy50eXBlLl9tYXAuZm9yRWFjaChpdGVtID0+IHtcbiAgICAgIGlmICghaXRlbS5kZWxldGVkKSB7XG4gICAgICAgIGl0ZW0uZGVsZXRlKHRyYW5zYWN0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHNhbWUgYXMgYWJvdmVcbiAgICAgICAgdHJhbnNhY3Rpb24uX21lcmdlU3RydWN0cy5wdXNoKGl0ZW0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRyYW5zYWN0aW9uLmNoYW5nZWQuZGVsZXRlKHRoaXMudHlwZSk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtTdHJ1Y3RTdG9yZX0gc3RvcmVcbiAgICovXG4gIGdjIChzdG9yZSkge1xuICAgIGxldCBpdGVtID0gdGhpcy50eXBlLl9zdGFydDtcbiAgICB3aGlsZSAoaXRlbSAhPT0gbnVsbCkge1xuICAgICAgaXRlbS5nYyhzdG9yZSwgdHJ1ZSk7XG4gICAgICBpdGVtID0gaXRlbS5yaWdodDtcbiAgICB9XG4gICAgdGhpcy50eXBlLl9zdGFydCA9IG51bGw7XG4gICAgdGhpcy50eXBlLl9tYXAuZm9yRWFjaCgvKiogQHBhcmFtIHtJdGVtIHwgbnVsbH0gaXRlbSAqLyAoaXRlbSkgPT4ge1xuICAgICAgd2hpbGUgKGl0ZW0gIT09IG51bGwpIHtcbiAgICAgICAgaXRlbS5nYyhzdG9yZSwgdHJ1ZSk7XG4gICAgICAgIGl0ZW0gPSBpdGVtLmxlZnQ7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdGhpcy50eXBlLl9tYXAgPSBuZXcgTWFwKCk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtVcGRhdGVFbmNvZGVyVjEgfCBVcGRhdGVFbmNvZGVyVjJ9IGVuY29kZXJcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldFxuICAgKi9cbiAgd3JpdGUgKGVuY29kZXIsIG9mZnNldCkge1xuICAgIHRoaXMudHlwZS5fd3JpdGUoZW5jb2Rlcik7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0UmVmICgpIHtcbiAgICByZXR1cm4gN1xuICB9XG59XG5cbi8qKlxuICogQHByaXZhdGVcbiAqXG4gKiBAcGFyYW0ge1VwZGF0ZURlY29kZXJWMSB8IFVwZGF0ZURlY29kZXJWMn0gZGVjb2RlclxuICogQHJldHVybiB7Q29udGVudFR5cGV9XG4gKi9cbmNvbnN0IHJlYWRDb250ZW50VHlwZSA9IGRlY29kZXIgPT4gbmV3IENvbnRlbnRUeXBlKHR5cGVSZWZzW2RlY29kZXIucmVhZFR5cGVSZWYoKV0oZGVjb2RlcikpO1xuXG4vKipcbiAqIEB0b2RvIFRoaXMgc2hvdWxkIHJldHVybiBzZXZlcmFsIGl0ZW1zXG4gKlxuICogQHBhcmFtIHtTdHJ1Y3RTdG9yZX0gc3RvcmVcbiAqIEBwYXJhbSB7SUR9IGlkXG4gKiBAcmV0dXJuIHt7aXRlbTpJdGVtLCBkaWZmOm51bWJlcn19XG4gKi9cbmNvbnN0IGZvbGxvd1JlZG9uZSA9IChzdG9yZSwgaWQpID0+IHtcbiAgLyoqXG4gICAqIEB0eXBlIHtJRHxudWxsfVxuICAgKi9cbiAgbGV0IG5leHRJRCA9IGlkO1xuICBsZXQgZGlmZiA9IDA7XG4gIGxldCBpdGVtO1xuICBkbyB7XG4gICAgaWYgKGRpZmYgPiAwKSB7XG4gICAgICBuZXh0SUQgPSBjcmVhdGVJRChuZXh0SUQuY2xpZW50LCBuZXh0SUQuY2xvY2sgKyBkaWZmKTtcbiAgICB9XG4gICAgaXRlbSA9IGdldEl0ZW0oc3RvcmUsIG5leHRJRCk7XG4gICAgZGlmZiA9IG5leHRJRC5jbG9jayAtIGl0ZW0uaWQuY2xvY2s7XG4gICAgbmV4dElEID0gaXRlbS5yZWRvbmU7XG4gIH0gd2hpbGUgKG5leHRJRCAhPT0gbnVsbCAmJiBpdGVtIGluc3RhbmNlb2YgSXRlbSlcbiAgcmV0dXJuIHtcbiAgICBpdGVtLCBkaWZmXG4gIH1cbn07XG5cbi8qKlxuICogTWFrZSBzdXJlIHRoYXQgbmVpdGhlciBpdGVtIG5vciBhbnkgb2YgaXRzIHBhcmVudHMgaXMgZXZlciBkZWxldGVkLlxuICpcbiAqIFRoaXMgcHJvcGVydHkgZG9lcyBub3QgcGVyc2lzdCB3aGVuIHN0b3JpbmcgaXQgaW50byBhIGRhdGFiYXNlIG9yIHdoZW5cbiAqIHNlbmRpbmcgaXQgdG8gb3RoZXIgcGVlcnNcbiAqXG4gKiBAcGFyYW0ge0l0ZW18bnVsbH0gaXRlbVxuICogQHBhcmFtIHtib29sZWFufSBrZWVwXG4gKi9cbmNvbnN0IGtlZXBJdGVtID0gKGl0ZW0sIGtlZXApID0+IHtcbiAgd2hpbGUgKGl0ZW0gIT09IG51bGwgJiYgaXRlbS5rZWVwICE9PSBrZWVwKSB7XG4gICAgaXRlbS5rZWVwID0ga2VlcDtcbiAgICBpdGVtID0gLyoqIEB0eXBlIHtBYnN0cmFjdFR5cGU8YW55Pn0gKi8gKGl0ZW0ucGFyZW50KS5faXRlbTtcbiAgfVxufTtcblxuLyoqXG4gKiBTcGxpdCBsZWZ0SXRlbSBpbnRvIHR3byBpdGVtc1xuICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAqIEBwYXJhbSB7SXRlbX0gbGVmdEl0ZW1cbiAqIEBwYXJhbSB7bnVtYmVyfSBkaWZmXG4gKiBAcmV0dXJuIHtJdGVtfVxuICpcbiAqIEBmdW5jdGlvblxuICogQHByaXZhdGVcbiAqL1xuY29uc3Qgc3BsaXRJdGVtID0gKHRyYW5zYWN0aW9uLCBsZWZ0SXRlbSwgZGlmZikgPT4ge1xuICAvLyBjcmVhdGUgcmlnaHRJdGVtXG4gIGNvbnN0IHsgY2xpZW50LCBjbG9jayB9ID0gbGVmdEl0ZW0uaWQ7XG4gIGNvbnN0IHJpZ2h0SXRlbSA9IG5ldyBJdGVtKFxuICAgIGNyZWF0ZUlEKGNsaWVudCwgY2xvY2sgKyBkaWZmKSxcbiAgICBsZWZ0SXRlbSxcbiAgICBjcmVhdGVJRChjbGllbnQsIGNsb2NrICsgZGlmZiAtIDEpLFxuICAgIGxlZnRJdGVtLnJpZ2h0LFxuICAgIGxlZnRJdGVtLnJpZ2h0T3JpZ2luLFxuICAgIGxlZnRJdGVtLnBhcmVudCxcbiAgICBsZWZ0SXRlbS5wYXJlbnRTdWIsXG4gICAgbGVmdEl0ZW0uY29udGVudC5zcGxpY2UoZGlmZilcbiAgKTtcbiAgaWYgKGxlZnRJdGVtLmRlbGV0ZWQpIHtcbiAgICByaWdodEl0ZW0ubWFya0RlbGV0ZWQoKTtcbiAgfVxuICBpZiAobGVmdEl0ZW0ua2VlcCkge1xuICAgIHJpZ2h0SXRlbS5rZWVwID0gdHJ1ZTtcbiAgfVxuICBpZiAobGVmdEl0ZW0ucmVkb25lICE9PSBudWxsKSB7XG4gICAgcmlnaHRJdGVtLnJlZG9uZSA9IGNyZWF0ZUlEKGxlZnRJdGVtLnJlZG9uZS5jbGllbnQsIGxlZnRJdGVtLnJlZG9uZS5jbG9jayArIGRpZmYpO1xuICB9XG4gIC8vIHVwZGF0ZSBsZWZ0IChkbyBub3Qgc2V0IGxlZnRJdGVtLnJpZ2h0T3JpZ2luIGFzIGl0IHdpbGwgbGVhZCB0byBwcm9ibGVtcyB3aGVuIHN5bmNpbmcpXG4gIGxlZnRJdGVtLnJpZ2h0ID0gcmlnaHRJdGVtO1xuICAvLyB1cGRhdGUgcmlnaHRcbiAgaWYgKHJpZ2h0SXRlbS5yaWdodCAhPT0gbnVsbCkge1xuICAgIHJpZ2h0SXRlbS5yaWdodC5sZWZ0ID0gcmlnaHRJdGVtO1xuICB9XG4gIC8vIHJpZ2h0IGlzIG1vcmUgc3BlY2lmaWMuXG4gIHRyYW5zYWN0aW9uLl9tZXJnZVN0cnVjdHMucHVzaChyaWdodEl0ZW0pO1xuICAvLyB1cGRhdGUgcGFyZW50Ll9tYXBcbiAgaWYgKHJpZ2h0SXRlbS5wYXJlbnRTdWIgIT09IG51bGwgJiYgcmlnaHRJdGVtLnJpZ2h0ID09PSBudWxsKSB7XG4gICAgLyoqIEB0eXBlIHtBYnN0cmFjdFR5cGU8YW55Pn0gKi8gKHJpZ2h0SXRlbS5wYXJlbnQpLl9tYXAuc2V0KHJpZ2h0SXRlbS5wYXJlbnRTdWIsIHJpZ2h0SXRlbSk7XG4gIH1cbiAgbGVmdEl0ZW0ubGVuZ3RoID0gZGlmZjtcbiAgcmV0dXJuIHJpZ2h0SXRlbVxufTtcblxuLyoqXG4gKiBSZWRvZXMgdGhlIGVmZmVjdCBvZiB0aGlzIG9wZXJhdGlvbi5cbiAqXG4gKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvbiBUaGUgWWpzIGluc3RhbmNlLlxuICogQHBhcmFtIHtJdGVtfSBpdGVtXG4gKiBAcGFyYW0ge1NldDxJdGVtPn0gcmVkb2l0ZW1zXG4gKiBAcGFyYW0ge0RlbGV0ZVNldH0gaXRlbXNUb0RlbGV0ZVxuICogQHBhcmFtIHtib29sZWFufSBpZ25vcmVSZW1vdGVNYXBDaGFuZ2VzXG4gKlxuICogQHJldHVybiB7SXRlbXxudWxsfVxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmNvbnN0IHJlZG9JdGVtID0gKHRyYW5zYWN0aW9uLCBpdGVtLCByZWRvaXRlbXMsIGl0ZW1zVG9EZWxldGUsIGlnbm9yZVJlbW90ZU1hcENoYW5nZXMpID0+IHtcbiAgY29uc3QgZG9jID0gdHJhbnNhY3Rpb24uZG9jO1xuICBjb25zdCBzdG9yZSA9IGRvYy5zdG9yZTtcbiAgY29uc3Qgb3duQ2xpZW50SUQgPSBkb2MuY2xpZW50SUQ7XG4gIGNvbnN0IHJlZG9uZSA9IGl0ZW0ucmVkb25lO1xuICBpZiAocmVkb25lICE9PSBudWxsKSB7XG4gICAgcmV0dXJuIGdldEl0ZW1DbGVhblN0YXJ0KHRyYW5zYWN0aW9uLCByZWRvbmUpXG4gIH1cbiAgbGV0IHBhcmVudEl0ZW0gPSAvKiogQHR5cGUge0Fic3RyYWN0VHlwZTxhbnk+fSAqLyAoaXRlbS5wYXJlbnQpLl9pdGVtO1xuICAvKipcbiAgICogQHR5cGUge0l0ZW18bnVsbH1cbiAgICovXG4gIGxldCBsZWZ0ID0gbnVsbDtcbiAgLyoqXG4gICAqIEB0eXBlIHtJdGVtfG51bGx9XG4gICAqL1xuICBsZXQgcmlnaHQ7XG4gIC8vIG1ha2Ugc3VyZSB0aGF0IHBhcmVudCBpcyByZWRvbmVcbiAgaWYgKHBhcmVudEl0ZW0gIT09IG51bGwgJiYgcGFyZW50SXRlbS5kZWxldGVkID09PSB0cnVlKSB7XG4gICAgLy8gdHJ5IHRvIHVuZG8gcGFyZW50IGlmIGl0IHdpbGwgYmUgdW5kb25lIGFueXdheVxuICAgIGlmIChwYXJlbnRJdGVtLnJlZG9uZSA9PT0gbnVsbCAmJiAoIXJlZG9pdGVtcy5oYXMocGFyZW50SXRlbSkgfHwgcmVkb0l0ZW0odHJhbnNhY3Rpb24sIHBhcmVudEl0ZW0sIHJlZG9pdGVtcywgaXRlbXNUb0RlbGV0ZSwgaWdub3JlUmVtb3RlTWFwQ2hhbmdlcykgPT09IG51bGwpKSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cbiAgICB3aGlsZSAocGFyZW50SXRlbS5yZWRvbmUgIT09IG51bGwpIHtcbiAgICAgIHBhcmVudEl0ZW0gPSBnZXRJdGVtQ2xlYW5TdGFydCh0cmFuc2FjdGlvbiwgcGFyZW50SXRlbS5yZWRvbmUpO1xuICAgIH1cbiAgfVxuICBjb25zdCBwYXJlbnRUeXBlID0gcGFyZW50SXRlbSA9PT0gbnVsbCA/IC8qKiBAdHlwZSB7QWJzdHJhY3RUeXBlPGFueT59ICovIChpdGVtLnBhcmVudCkgOiAvKiogQHR5cGUge0NvbnRlbnRUeXBlfSAqLyAocGFyZW50SXRlbS5jb250ZW50KS50eXBlO1xuXG4gIGlmIChpdGVtLnBhcmVudFN1YiA9PT0gbnVsbCkge1xuICAgIC8vIElzIGFuIGFycmF5IGl0ZW0uIEluc2VydCBhdCB0aGUgb2xkIHBvc2l0aW9uXG4gICAgbGVmdCA9IGl0ZW0ubGVmdDtcbiAgICByaWdodCA9IGl0ZW07XG4gICAgLy8gZmluZCBuZXh0IGNsb25lZF9yZWRvIGl0ZW1zXG4gICAgd2hpbGUgKGxlZnQgIT09IG51bGwpIHtcbiAgICAgIC8qKlxuICAgICAgICogQHR5cGUge0l0ZW18bnVsbH1cbiAgICAgICAqL1xuICAgICAgbGV0IGxlZnRUcmFjZSA9IGxlZnQ7XG4gICAgICAvLyB0cmFjZSByZWRvbmUgdW50aWwgcGFyZW50IG1hdGNoZXNcbiAgICAgIHdoaWxlIChsZWZ0VHJhY2UgIT09IG51bGwgJiYgLyoqIEB0eXBlIHtBYnN0cmFjdFR5cGU8YW55Pn0gKi8gKGxlZnRUcmFjZS5wYXJlbnQpLl9pdGVtICE9PSBwYXJlbnRJdGVtKSB7XG4gICAgICAgIGxlZnRUcmFjZSA9IGxlZnRUcmFjZS5yZWRvbmUgPT09IG51bGwgPyBudWxsIDogZ2V0SXRlbUNsZWFuU3RhcnQodHJhbnNhY3Rpb24sIGxlZnRUcmFjZS5yZWRvbmUpO1xuICAgICAgfVxuICAgICAgaWYgKGxlZnRUcmFjZSAhPT0gbnVsbCAmJiAvKiogQHR5cGUge0Fic3RyYWN0VHlwZTxhbnk+fSAqLyAobGVmdFRyYWNlLnBhcmVudCkuX2l0ZW0gPT09IHBhcmVudEl0ZW0pIHtcbiAgICAgICAgbGVmdCA9IGxlZnRUcmFjZTtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICAgIGxlZnQgPSBsZWZ0LmxlZnQ7XG4gICAgfVxuICAgIHdoaWxlIChyaWdodCAhPT0gbnVsbCkge1xuICAgICAgLyoqXG4gICAgICAgKiBAdHlwZSB7SXRlbXxudWxsfVxuICAgICAgICovXG4gICAgICBsZXQgcmlnaHRUcmFjZSA9IHJpZ2h0O1xuICAgICAgLy8gdHJhY2UgcmVkb25lIHVudGlsIHBhcmVudCBtYXRjaGVzXG4gICAgICB3aGlsZSAocmlnaHRUcmFjZSAhPT0gbnVsbCAmJiAvKiogQHR5cGUge0Fic3RyYWN0VHlwZTxhbnk+fSAqLyAocmlnaHRUcmFjZS5wYXJlbnQpLl9pdGVtICE9PSBwYXJlbnRJdGVtKSB7XG4gICAgICAgIHJpZ2h0VHJhY2UgPSByaWdodFRyYWNlLnJlZG9uZSA9PT0gbnVsbCA/IG51bGwgOiBnZXRJdGVtQ2xlYW5TdGFydCh0cmFuc2FjdGlvbiwgcmlnaHRUcmFjZS5yZWRvbmUpO1xuICAgICAgfVxuICAgICAgaWYgKHJpZ2h0VHJhY2UgIT09IG51bGwgJiYgLyoqIEB0eXBlIHtBYnN0cmFjdFR5cGU8YW55Pn0gKi8gKHJpZ2h0VHJhY2UucGFyZW50KS5faXRlbSA9PT0gcGFyZW50SXRlbSkge1xuICAgICAgICByaWdodCA9IHJpZ2h0VHJhY2U7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgICByaWdodCA9IHJpZ2h0LnJpZ2h0O1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByaWdodCA9IG51bGw7XG4gICAgaWYgKGl0ZW0ucmlnaHQgJiYgIWlnbm9yZVJlbW90ZU1hcENoYW5nZXMpIHtcbiAgICAgIGxlZnQgPSBpdGVtO1xuICAgICAgLy8gSXRlcmF0ZSByaWdodCB3aGlsZSByaWdodCBpcyBpbiBpdGVtc1RvRGVsZXRlXG4gICAgICAvLyBJZiBpdCBpcyBpbnRlbmRlZCB0byBkZWxldGUgcmlnaHQgd2hpbGUgaXRlbSBpcyByZWRvbmUsIHdlIGNhbiBleHBlY3QgdGhhdCBpdGVtIHNob3VsZCByZXBsYWNlIHJpZ2h0LlxuICAgICAgd2hpbGUgKGxlZnQgIT09IG51bGwgJiYgbGVmdC5yaWdodCAhPT0gbnVsbCAmJiBpc0RlbGV0ZWQoaXRlbXNUb0RlbGV0ZSwgbGVmdC5yaWdodC5pZCkpIHtcbiAgICAgICAgbGVmdCA9IGxlZnQucmlnaHQ7XG4gICAgICB9XG4gICAgICAvLyBmb2xsb3cgcmVkb25lXG4gICAgICAvLyB0cmFjZSByZWRvbmUgdW50aWwgcGFyZW50IG1hdGNoZXNcbiAgICAgIHdoaWxlIChsZWZ0ICE9PSBudWxsICYmIGxlZnQucmVkb25lICE9PSBudWxsKSB7XG4gICAgICAgIGxlZnQgPSBnZXRJdGVtQ2xlYW5TdGFydCh0cmFuc2FjdGlvbiwgbGVmdC5yZWRvbmUpO1xuICAgICAgfVxuICAgICAgLy8gY2hlY2sgd2V0aGVyIHdlIHdlcmUgYWxsb3dlZCB0byBmb2xsb3cgcmlnaHQgKGluZGljYXRpbmcgdGhhdCBvcmlnaW5hbGx5IHRoaXMgb3Agd2FzIHJlcGxhY2VkIGJ5IGFub3RoZXIgaXRlbSlcbiAgICAgIGlmIChsZWZ0ID09PSBudWxsIHx8IC8qKiBAdHlwZSB7QWJzdHJhY3RUeXBlPGFueT59ICovIChsZWZ0LnBhcmVudCkuX2l0ZW0gIT09IHBhcmVudEl0ZW0pIHtcbiAgICAgICAgLy8gaW52YWxpZCBwYXJlbnQ7IHNob3VsZCBuZXZlciBoYXBwZW5cbiAgICAgICAgcmV0dXJuIG51bGxcbiAgICAgIH1cbiAgICAgIGlmIChsZWZ0ICYmIGxlZnQucmlnaHQgIT09IG51bGwpIHtcbiAgICAgICAgLy8gSXQgaXMgbm90IHBvc3NpYmxlIHRvIHJlZG8gdGhpcyBpdGVtIGJlY2F1c2UgaXQgY29uZmxpY3RzIHdpdGggYVxuICAgICAgICAvLyBjaGFuZ2UgZnJvbSBhbm90aGVyIGNsaWVudFxuICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsZWZ0ID0gcGFyZW50VHlwZS5fbWFwLmdldChpdGVtLnBhcmVudFN1YikgfHwgbnVsbDtcbiAgICB9XG4gIH1cbiAgY29uc3QgbmV4dENsb2NrID0gZ2V0U3RhdGUoc3RvcmUsIG93bkNsaWVudElEKTtcbiAgY29uc3QgbmV4dElkID0gY3JlYXRlSUQob3duQ2xpZW50SUQsIG5leHRDbG9jayk7XG4gIGNvbnN0IHJlZG9uZUl0ZW0gPSBuZXcgSXRlbShcbiAgICBuZXh0SWQsXG4gICAgbGVmdCwgbGVmdCAmJiBsZWZ0Lmxhc3RJZCxcbiAgICByaWdodCwgcmlnaHQgJiYgcmlnaHQuaWQsXG4gICAgcGFyZW50VHlwZSxcbiAgICBpdGVtLnBhcmVudFN1YixcbiAgICBpdGVtLmNvbnRlbnQuY29weSgpXG4gICk7XG4gIGl0ZW0ucmVkb25lID0gbmV4dElkO1xuICBrZWVwSXRlbShyZWRvbmVJdGVtLCB0cnVlKTtcbiAgcmVkb25lSXRlbS5pbnRlZ3JhdGUodHJhbnNhY3Rpb24sIDApO1xuICByZXR1cm4gcmVkb25lSXRlbVxufTtcblxuLyoqXG4gKiBBYnN0cmFjdCBjbGFzcyB0aGF0IHJlcHJlc2VudHMgYW55IGNvbnRlbnQuXG4gKi9cbmNsYXNzIEl0ZW0gZXh0ZW5kcyBBYnN0cmFjdFN0cnVjdCB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge0lEfSBpZFxuICAgKiBAcGFyYW0ge0l0ZW0gfCBudWxsfSBsZWZ0XG4gICAqIEBwYXJhbSB7SUQgfCBudWxsfSBvcmlnaW5cbiAgICogQHBhcmFtIHtJdGVtIHwgbnVsbH0gcmlnaHRcbiAgICogQHBhcmFtIHtJRCB8IG51bGx9IHJpZ2h0T3JpZ2luXG4gICAqIEBwYXJhbSB7QWJzdHJhY3RUeXBlPGFueT58SUR8bnVsbH0gcGFyZW50IElzIGEgdHlwZSBpZiBpbnRlZ3JhdGVkLCBpcyBudWxsIGlmIGl0IGlzIHBvc3NpYmxlIHRvIGNvcHkgcGFyZW50IGZyb20gbGVmdCBvciByaWdodCwgaXMgSUQgYmVmb3JlIGludGVncmF0aW9uIHRvIHNlYXJjaCBmb3IgaXQuXG4gICAqIEBwYXJhbSB7c3RyaW5nIHwgbnVsbH0gcGFyZW50U3ViXG4gICAqIEBwYXJhbSB7QWJzdHJhY3RDb250ZW50fSBjb250ZW50XG4gICAqL1xuICBjb25zdHJ1Y3RvciAoaWQsIGxlZnQsIG9yaWdpbiwgcmlnaHQsIHJpZ2h0T3JpZ2luLCBwYXJlbnQsIHBhcmVudFN1YiwgY29udGVudCkge1xuICAgIHN1cGVyKGlkLCBjb250ZW50LmdldExlbmd0aCgpKTtcbiAgICAvKipcbiAgICAgKiBUaGUgaXRlbSB0aGF0IHdhcyBvcmlnaW5hbGx5IHRvIHRoZSBsZWZ0IG9mIHRoaXMgaXRlbS5cbiAgICAgKiBAdHlwZSB7SUQgfCBudWxsfVxuICAgICAqL1xuICAgIHRoaXMub3JpZ2luID0gb3JpZ2luO1xuICAgIC8qKlxuICAgICAqIFRoZSBpdGVtIHRoYXQgaXMgY3VycmVudGx5IHRvIHRoZSBsZWZ0IG9mIHRoaXMgaXRlbS5cbiAgICAgKiBAdHlwZSB7SXRlbSB8IG51bGx9XG4gICAgICovXG4gICAgdGhpcy5sZWZ0ID0gbGVmdDtcbiAgICAvKipcbiAgICAgKiBUaGUgaXRlbSB0aGF0IGlzIGN1cnJlbnRseSB0byB0aGUgcmlnaHQgb2YgdGhpcyBpdGVtLlxuICAgICAqIEB0eXBlIHtJdGVtIHwgbnVsbH1cbiAgICAgKi9cbiAgICB0aGlzLnJpZ2h0ID0gcmlnaHQ7XG4gICAgLyoqXG4gICAgICogVGhlIGl0ZW0gdGhhdCB3YXMgb3JpZ2luYWxseSB0byB0aGUgcmlnaHQgb2YgdGhpcyBpdGVtLlxuICAgICAqIEB0eXBlIHtJRCB8IG51bGx9XG4gICAgICovXG4gICAgdGhpcy5yaWdodE9yaWdpbiA9IHJpZ2h0T3JpZ2luO1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtBYnN0cmFjdFR5cGU8YW55PnxJRHxudWxsfVxuICAgICAqL1xuICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICAgIC8qKlxuICAgICAqIElmIHRoZSBwYXJlbnQgcmVmZXJzIHRvIHRoaXMgaXRlbSB3aXRoIHNvbWUga2luZCBvZiBrZXkgKGUuZy4gWU1hcCwgdGhlXG4gICAgICoga2V5IGlzIHNwZWNpZmllZCBoZXJlLiBUaGUga2V5IGlzIHRoZW4gdXNlZCB0byByZWZlciB0byB0aGUgbGlzdCBpbiB3aGljaFxuICAgICAqIHRvIGluc2VydCB0aGlzIGl0ZW0uIElmIGBwYXJlbnRTdWIgPSBudWxsYCB0eXBlLl9zdGFydCBpcyB0aGUgbGlzdCBpblxuICAgICAqIHdoaWNoIHRvIGluc2VydCB0by4gT3RoZXJ3aXNlIGl0IGlzIGBwYXJlbnQuX21hcGAuXG4gICAgICogQHR5cGUge1N0cmluZyB8IG51bGx9XG4gICAgICovXG4gICAgdGhpcy5wYXJlbnRTdWIgPSBwYXJlbnRTdWI7XG4gICAgLyoqXG4gICAgICogSWYgdGhpcyB0eXBlJ3MgZWZmZWN0IGlzIHJlZG9uZSB0aGlzIHR5cGUgcmVmZXJzIHRvIHRoZSB0eXBlIHRoYXQgdW5kaWRcbiAgICAgKiB0aGlzIG9wZXJhdGlvbi5cbiAgICAgKiBAdHlwZSB7SUQgfCBudWxsfVxuICAgICAqL1xuICAgIHRoaXMucmVkb25lID0gbnVsbDtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7QWJzdHJhY3RDb250ZW50fVxuICAgICAqL1xuICAgIHRoaXMuY29udGVudCA9IGNvbnRlbnQ7XG4gICAgLyoqXG4gICAgICogYml0MToga2VlcFxuICAgICAqIGJpdDI6IGNvdW50YWJsZVxuICAgICAqIGJpdDM6IGRlbGV0ZWRcbiAgICAgKiBiaXQ0OiBtYXJrIC0gbWFyayBub2RlIGFzIGZhc3Qtc2VhcmNoLW1hcmtlclxuICAgICAqIEB0eXBlIHtudW1iZXJ9IGJ5dGVcbiAgICAgKi9cbiAgICB0aGlzLmluZm8gPSB0aGlzLmNvbnRlbnQuaXNDb3VudGFibGUoKSA/IGJpbmFyeS5CSVQyIDogMDtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGlzIHVzZWQgdG8gbWFyayB0aGUgaXRlbSBhcyBhbiBpbmRleGVkIGZhc3Qtc2VhcmNoIG1hcmtlclxuICAgKlxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICovXG4gIHNldCBtYXJrZXIgKGlzTWFya2VkKSB7XG4gICAgaWYgKCgodGhpcy5pbmZvICYgYmluYXJ5LkJJVDQpID4gMCkgIT09IGlzTWFya2VkKSB7XG4gICAgICB0aGlzLmluZm8gXj0gYmluYXJ5LkJJVDQ7XG4gICAgfVxuICB9XG5cbiAgZ2V0IG1hcmtlciAoKSB7XG4gICAgcmV0dXJuICh0aGlzLmluZm8gJiBiaW5hcnkuQklUNCkgPiAwXG4gIH1cblxuICAvKipcbiAgICogSWYgdHJ1ZSwgZG8gbm90IGdhcmJhZ2UgY29sbGVjdCB0aGlzIEl0ZW0uXG4gICAqL1xuICBnZXQga2VlcCAoKSB7XG4gICAgcmV0dXJuICh0aGlzLmluZm8gJiBiaW5hcnkuQklUMSkgPiAwXG4gIH1cblxuICBzZXQga2VlcCAoZG9LZWVwKSB7XG4gICAgaWYgKHRoaXMua2VlcCAhPT0gZG9LZWVwKSB7XG4gICAgICB0aGlzLmluZm8gXj0gYmluYXJ5LkJJVDE7XG4gICAgfVxuICB9XG5cbiAgZ2V0IGNvdW50YWJsZSAoKSB7XG4gICAgcmV0dXJuICh0aGlzLmluZm8gJiBiaW5hcnkuQklUMikgPiAwXG4gIH1cblxuICAvKipcbiAgICogV2hldGhlciB0aGlzIGl0ZW0gd2FzIGRlbGV0ZWQgb3Igbm90LlxuICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICovXG4gIGdldCBkZWxldGVkICgpIHtcbiAgICByZXR1cm4gKHRoaXMuaW5mbyAmIGJpbmFyeS5CSVQzKSA+IDBcbiAgfVxuXG4gIHNldCBkZWxldGVkIChkb0RlbGV0ZSkge1xuICAgIGlmICh0aGlzLmRlbGV0ZWQgIT09IGRvRGVsZXRlKSB7XG4gICAgICB0aGlzLmluZm8gXj0gYmluYXJ5LkJJVDM7XG4gICAgfVxuICB9XG5cbiAgbWFya0RlbGV0ZWQgKCkge1xuICAgIHRoaXMuaW5mbyB8PSBiaW5hcnkuQklUMztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gdGhlIGNyZWF0b3IgY2xpZW50SUQgb2YgdGhlIG1pc3Npbmcgb3Agb3IgZGVmaW5lIG1pc3NpbmcgaXRlbXMgYW5kIHJldHVybiBudWxsLlxuICAgKlxuICAgKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAcGFyYW0ge1N0cnVjdFN0b3JlfSBzdG9yZVxuICAgKiBAcmV0dXJuIHtudWxsIHwgbnVtYmVyfVxuICAgKi9cbiAgZ2V0TWlzc2luZyAodHJhbnNhY3Rpb24sIHN0b3JlKSB7XG4gICAgaWYgKHRoaXMub3JpZ2luICYmIHRoaXMub3JpZ2luLmNsaWVudCAhPT0gdGhpcy5pZC5jbGllbnQgJiYgdGhpcy5vcmlnaW4uY2xvY2sgPj0gZ2V0U3RhdGUoc3RvcmUsIHRoaXMub3JpZ2luLmNsaWVudCkpIHtcbiAgICAgIHJldHVybiB0aGlzLm9yaWdpbi5jbGllbnRcbiAgICB9XG4gICAgaWYgKHRoaXMucmlnaHRPcmlnaW4gJiYgdGhpcy5yaWdodE9yaWdpbi5jbGllbnQgIT09IHRoaXMuaWQuY2xpZW50ICYmIHRoaXMucmlnaHRPcmlnaW4uY2xvY2sgPj0gZ2V0U3RhdGUoc3RvcmUsIHRoaXMucmlnaHRPcmlnaW4uY2xpZW50KSkge1xuICAgICAgcmV0dXJuIHRoaXMucmlnaHRPcmlnaW4uY2xpZW50XG4gICAgfVxuICAgIGlmICh0aGlzLnBhcmVudCAmJiB0aGlzLnBhcmVudC5jb25zdHJ1Y3RvciA9PT0gSUQgJiYgdGhpcy5pZC5jbGllbnQgIT09IHRoaXMucGFyZW50LmNsaWVudCAmJiB0aGlzLnBhcmVudC5jbG9jayA+PSBnZXRTdGF0ZShzdG9yZSwgdGhpcy5wYXJlbnQuY2xpZW50KSkge1xuICAgICAgcmV0dXJuIHRoaXMucGFyZW50LmNsaWVudFxuICAgIH1cblxuICAgIC8vIFdlIGhhdmUgYWxsIG1pc3NpbmcgaWRzLCBub3cgZmluZCB0aGUgaXRlbXNcblxuICAgIGlmICh0aGlzLm9yaWdpbikge1xuICAgICAgdGhpcy5sZWZ0ID0gZ2V0SXRlbUNsZWFuRW5kKHRyYW5zYWN0aW9uLCBzdG9yZSwgdGhpcy5vcmlnaW4pO1xuICAgICAgdGhpcy5vcmlnaW4gPSB0aGlzLmxlZnQubGFzdElkO1xuICAgIH1cbiAgICBpZiAodGhpcy5yaWdodE9yaWdpbikge1xuICAgICAgdGhpcy5yaWdodCA9IGdldEl0ZW1DbGVhblN0YXJ0KHRyYW5zYWN0aW9uLCB0aGlzLnJpZ2h0T3JpZ2luKTtcbiAgICAgIHRoaXMucmlnaHRPcmlnaW4gPSB0aGlzLnJpZ2h0LmlkO1xuICAgIH1cbiAgICBpZiAoKHRoaXMubGVmdCAmJiB0aGlzLmxlZnQuY29uc3RydWN0b3IgPT09IEdDKSB8fCAodGhpcy5yaWdodCAmJiB0aGlzLnJpZ2h0LmNvbnN0cnVjdG9yID09PSBHQykpIHtcbiAgICAgIHRoaXMucGFyZW50ID0gbnVsbDtcbiAgICB9XG4gICAgLy8gb25seSBzZXQgcGFyZW50IGlmIHRoaXMgc2hvdWxkbid0IGJlIGdhcmJhZ2UgY29sbGVjdGVkXG4gICAgaWYgKCF0aGlzLnBhcmVudCkge1xuICAgICAgaWYgKHRoaXMubGVmdCAmJiB0aGlzLmxlZnQuY29uc3RydWN0b3IgPT09IEl0ZW0pIHtcbiAgICAgICAgdGhpcy5wYXJlbnQgPSB0aGlzLmxlZnQucGFyZW50O1xuICAgICAgICB0aGlzLnBhcmVudFN1YiA9IHRoaXMubGVmdC5wYXJlbnRTdWI7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5yaWdodCAmJiB0aGlzLnJpZ2h0LmNvbnN0cnVjdG9yID09PSBJdGVtKSB7XG4gICAgICAgIHRoaXMucGFyZW50ID0gdGhpcy5yaWdodC5wYXJlbnQ7XG4gICAgICAgIHRoaXMucGFyZW50U3ViID0gdGhpcy5yaWdodC5wYXJlbnRTdWI7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0aGlzLnBhcmVudC5jb25zdHJ1Y3RvciA9PT0gSUQpIHtcbiAgICAgIGNvbnN0IHBhcmVudEl0ZW0gPSBnZXRJdGVtKHN0b3JlLCB0aGlzLnBhcmVudCk7XG4gICAgICBpZiAocGFyZW50SXRlbS5jb25zdHJ1Y3RvciA9PT0gR0MpIHtcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBudWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5wYXJlbnQgPSAvKiogQHR5cGUge0NvbnRlbnRUeXBlfSAqLyAocGFyZW50SXRlbS5jb250ZW50KS50eXBlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXRcbiAgICovXG4gIGludGVncmF0ZSAodHJhbnNhY3Rpb24sIG9mZnNldCkge1xuICAgIGlmIChvZmZzZXQgPiAwKSB7XG4gICAgICB0aGlzLmlkLmNsb2NrICs9IG9mZnNldDtcbiAgICAgIHRoaXMubGVmdCA9IGdldEl0ZW1DbGVhbkVuZCh0cmFuc2FjdGlvbiwgdHJhbnNhY3Rpb24uZG9jLnN0b3JlLCBjcmVhdGVJRCh0aGlzLmlkLmNsaWVudCwgdGhpcy5pZC5jbG9jayAtIDEpKTtcbiAgICAgIHRoaXMub3JpZ2luID0gdGhpcy5sZWZ0Lmxhc3RJZDtcbiAgICAgIHRoaXMuY29udGVudCA9IHRoaXMuY29udGVudC5zcGxpY2Uob2Zmc2V0KTtcbiAgICAgIHRoaXMubGVuZ3RoIC09IG9mZnNldDtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5wYXJlbnQpIHtcbiAgICAgIGlmICgoIXRoaXMubGVmdCAmJiAoIXRoaXMucmlnaHQgfHwgdGhpcy5yaWdodC5sZWZ0ICE9PSBudWxsKSkgfHwgKHRoaXMubGVmdCAmJiB0aGlzLmxlZnQucmlnaHQgIT09IHRoaXMucmlnaHQpKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAdHlwZSB7SXRlbXxudWxsfVxuICAgICAgICAgKi9cbiAgICAgICAgbGV0IGxlZnQgPSB0aGlzLmxlZnQ7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEB0eXBlIHtJdGVtfG51bGx9XG4gICAgICAgICAqL1xuICAgICAgICBsZXQgbztcbiAgICAgICAgLy8gc2V0IG8gdG8gdGhlIGZpcnN0IGNvbmZsaWN0aW5nIGl0ZW1cbiAgICAgICAgaWYgKGxlZnQgIT09IG51bGwpIHtcbiAgICAgICAgICBvID0gbGVmdC5yaWdodDtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnBhcmVudFN1YiAhPT0gbnVsbCkge1xuICAgICAgICAgIG8gPSAvKiogQHR5cGUge0Fic3RyYWN0VHlwZTxhbnk+fSAqLyAodGhpcy5wYXJlbnQpLl9tYXAuZ2V0KHRoaXMucGFyZW50U3ViKSB8fCBudWxsO1xuICAgICAgICAgIHdoaWxlIChvICE9PSBudWxsICYmIG8ubGVmdCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgbyA9IG8ubGVmdDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbyA9IC8qKiBAdHlwZSB7QWJzdHJhY3RUeXBlPGFueT59ICovICh0aGlzLnBhcmVudCkuX3N0YXJ0O1xuICAgICAgICB9XG4gICAgICAgIC8vIFRPRE86IHVzZSBzb21ldGhpbmcgbGlrZSBEZWxldGVTZXQgaGVyZSAoYSB0cmVlIGltcGxlbWVudGF0aW9uIHdvdWxkIGJlIGJlc3QpXG4gICAgICAgIC8vIEB0b2RvIHVzZSBnbG9iYWwgc2V0IGRlZmluaXRpb25zXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAdHlwZSB7U2V0PEl0ZW0+fVxuICAgICAgICAgKi9cbiAgICAgICAgY29uc3QgY29uZmxpY3RpbmdJdGVtcyA9IG5ldyBTZXQoKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEB0eXBlIHtTZXQ8SXRlbT59XG4gICAgICAgICAqL1xuICAgICAgICBjb25zdCBpdGVtc0JlZm9yZU9yaWdpbiA9IG5ldyBTZXQoKTtcbiAgICAgICAgLy8gTGV0IGMgaW4gY29uZmxpY3RpbmdJdGVtcywgYiBpbiBpdGVtc0JlZm9yZU9yaWdpblxuICAgICAgICAvLyAqKip7b3JpZ2lufWJiYmJ7dGhpc317YyxifXtjLGJ9e299KioqXG4gICAgICAgIC8vIE5vdGUgdGhhdCBjb25mbGljdGluZ0l0ZW1zIGlzIGEgc3Vic2V0IG9mIGl0ZW1zQmVmb3JlT3JpZ2luXG4gICAgICAgIHdoaWxlIChvICE9PSBudWxsICYmIG8gIT09IHRoaXMucmlnaHQpIHtcbiAgICAgICAgICBpdGVtc0JlZm9yZU9yaWdpbi5hZGQobyk7XG4gICAgICAgICAgY29uZmxpY3RpbmdJdGVtcy5hZGQobyk7XG4gICAgICAgICAgaWYgKGNvbXBhcmVJRHModGhpcy5vcmlnaW4sIG8ub3JpZ2luKSkge1xuICAgICAgICAgICAgLy8gY2FzZSAxXG4gICAgICAgICAgICBpZiAoby5pZC5jbGllbnQgPCB0aGlzLmlkLmNsaWVudCkge1xuICAgICAgICAgICAgICBsZWZ0ID0gbztcbiAgICAgICAgICAgICAgY29uZmxpY3RpbmdJdGVtcy5jbGVhcigpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjb21wYXJlSURzKHRoaXMucmlnaHRPcmlnaW4sIG8ucmlnaHRPcmlnaW4pKSB7XG4gICAgICAgICAgICAgIC8vIHRoaXMgYW5kIG8gYXJlIGNvbmZsaWN0aW5nIGFuZCBwb2ludCB0byB0aGUgc2FtZSBpbnRlZ3JhdGlvbiBwb2ludHMuIFRoZSBpZCBkZWNpZGVzIHdoaWNoIGl0ZW0gY29tZXMgZmlyc3QuXG4gICAgICAgICAgICAgIC8vIFNpbmNlIHRoaXMgaXMgdG8gdGhlIGxlZnQgb2Ygbywgd2UgY2FuIGJyZWFrIGhlcmVcbiAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIH0gLy8gZWxzZSwgbyBtaWdodCBiZSBpbnRlZ3JhdGVkIGJlZm9yZSBhbiBpdGVtIHRoYXQgdGhpcyBjb25mbGljdHMgd2l0aC4gSWYgc28sIHdlIHdpbGwgZmluZCBpdCBpbiB0aGUgbmV4dCBpdGVyYXRpb25zXG4gICAgICAgICAgfSBlbHNlIGlmIChvLm9yaWdpbiAhPT0gbnVsbCAmJiBpdGVtc0JlZm9yZU9yaWdpbi5oYXMoZ2V0SXRlbSh0cmFuc2FjdGlvbi5kb2Muc3RvcmUsIG8ub3JpZ2luKSkpIHsgLy8gdXNlIGdldEl0ZW0gaW5zdGVhZCBvZiBnZXRJdGVtQ2xlYW5FbmQgYmVjYXVzZSB3ZSBkb24ndCB3YW50IC8gbmVlZCB0byBzcGxpdCBpdGVtcy5cbiAgICAgICAgICAgIC8vIGNhc2UgMlxuICAgICAgICAgICAgaWYgKCFjb25mbGljdGluZ0l0ZW1zLmhhcyhnZXRJdGVtKHRyYW5zYWN0aW9uLmRvYy5zdG9yZSwgby5vcmlnaW4pKSkge1xuICAgICAgICAgICAgICBsZWZ0ID0gbztcbiAgICAgICAgICAgICAgY29uZmxpY3RpbmdJdGVtcy5jbGVhcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIH1cbiAgICAgICAgICBvID0gby5yaWdodDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxlZnQgPSBsZWZ0O1xuICAgICAgfVxuICAgICAgLy8gcmVjb25uZWN0IGxlZnQvcmlnaHQgKyB1cGRhdGUgcGFyZW50IG1hcC9zdGFydCBpZiBuZWNlc3NhcnlcbiAgICAgIGlmICh0aGlzLmxlZnQgIT09IG51bGwpIHtcbiAgICAgICAgY29uc3QgcmlnaHQgPSB0aGlzLmxlZnQucmlnaHQ7XG4gICAgICAgIHRoaXMucmlnaHQgPSByaWdodDtcbiAgICAgICAgdGhpcy5sZWZ0LnJpZ2h0ID0gdGhpcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCByO1xuICAgICAgICBpZiAodGhpcy5wYXJlbnRTdWIgIT09IG51bGwpIHtcbiAgICAgICAgICByID0gLyoqIEB0eXBlIHtBYnN0cmFjdFR5cGU8YW55Pn0gKi8gKHRoaXMucGFyZW50KS5fbWFwLmdldCh0aGlzLnBhcmVudFN1YikgfHwgbnVsbDtcbiAgICAgICAgICB3aGlsZSAociAhPT0gbnVsbCAmJiByLmxlZnQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHIgPSByLmxlZnQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHIgPSAvKiogQHR5cGUge0Fic3RyYWN0VHlwZTxhbnk+fSAqLyAodGhpcy5wYXJlbnQpLl9zdGFydFxuICAgICAgICAgIDsvKiogQHR5cGUge0Fic3RyYWN0VHlwZTxhbnk+fSAqLyAodGhpcy5wYXJlbnQpLl9zdGFydCA9IHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yaWdodCA9IHI7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5yaWdodCAhPT0gbnVsbCkge1xuICAgICAgICB0aGlzLnJpZ2h0LmxlZnQgPSB0aGlzO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLnBhcmVudFN1YiAhPT0gbnVsbCkge1xuICAgICAgICAvLyBzZXQgYXMgY3VycmVudCBwYXJlbnQgdmFsdWUgaWYgcmlnaHQgPT09IG51bGwgYW5kIHRoaXMgaXMgcGFyZW50U3ViXG4gICAgICAgIC8qKiBAdHlwZSB7QWJzdHJhY3RUeXBlPGFueT59ICovICh0aGlzLnBhcmVudCkuX21hcC5zZXQodGhpcy5wYXJlbnRTdWIsIHRoaXMpO1xuICAgICAgICBpZiAodGhpcy5sZWZ0ICE9PSBudWxsKSB7XG4gICAgICAgICAgLy8gdGhpcyBpcyB0aGUgY3VycmVudCBhdHRyaWJ1dGUgdmFsdWUgb2YgcGFyZW50LiBkZWxldGUgcmlnaHRcbiAgICAgICAgICB0aGlzLmxlZnQuZGVsZXRlKHRyYW5zYWN0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gYWRqdXN0IGxlbmd0aCBvZiBwYXJlbnRcbiAgICAgIGlmICh0aGlzLnBhcmVudFN1YiA9PT0gbnVsbCAmJiB0aGlzLmNvdW50YWJsZSAmJiAhdGhpcy5kZWxldGVkKSB7XG4gICAgICAgIC8qKiBAdHlwZSB7QWJzdHJhY3RUeXBlPGFueT59ICovICh0aGlzLnBhcmVudCkuX2xlbmd0aCArPSB0aGlzLmxlbmd0aDtcbiAgICAgIH1cbiAgICAgIGFkZFN0cnVjdCh0cmFuc2FjdGlvbi5kb2Muc3RvcmUsIHRoaXMpO1xuICAgICAgdGhpcy5jb250ZW50LmludGVncmF0ZSh0cmFuc2FjdGlvbiwgdGhpcyk7XG4gICAgICAvLyBhZGQgcGFyZW50IHRvIHRyYW5zYWN0aW9uLmNoYW5nZWRcbiAgICAgIGFkZENoYW5nZWRUeXBlVG9UcmFuc2FjdGlvbih0cmFuc2FjdGlvbiwgLyoqIEB0eXBlIHtBYnN0cmFjdFR5cGU8YW55Pn0gKi8gKHRoaXMucGFyZW50KSwgdGhpcy5wYXJlbnRTdWIpO1xuICAgICAgaWYgKCgvKiogQHR5cGUge0Fic3RyYWN0VHlwZTxhbnk+fSAqLyAodGhpcy5wYXJlbnQpLl9pdGVtICE9PSBudWxsICYmIC8qKiBAdHlwZSB7QWJzdHJhY3RUeXBlPGFueT59ICovICh0aGlzLnBhcmVudCkuX2l0ZW0uZGVsZXRlZCkgfHwgKHRoaXMucGFyZW50U3ViICE9PSBudWxsICYmIHRoaXMucmlnaHQgIT09IG51bGwpKSB7XG4gICAgICAgIC8vIGRlbGV0ZSBpZiBwYXJlbnQgaXMgZGVsZXRlZCBvciBpZiB0aGlzIGlzIG5vdCB0aGUgY3VycmVudCBhdHRyaWJ1dGUgdmFsdWUgb2YgcGFyZW50XG4gICAgICAgIHRoaXMuZGVsZXRlKHRyYW5zYWN0aW9uKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gcGFyZW50IGlzIG5vdCBkZWZpbmVkLiBJbnRlZ3JhdGUgR0Mgc3RydWN0IGluc3RlYWRcbiAgICAgIG5ldyBHQyh0aGlzLmlkLCB0aGlzLmxlbmd0aCkuaW50ZWdyYXRlKHRyYW5zYWN0aW9uLCAwKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgbmV4dCBub24tZGVsZXRlZCBpdGVtXG4gICAqL1xuICBnZXQgbmV4dCAoKSB7XG4gICAgbGV0IG4gPSB0aGlzLnJpZ2h0O1xuICAgIHdoaWxlIChuICE9PSBudWxsICYmIG4uZGVsZXRlZCkge1xuICAgICAgbiA9IG4ucmlnaHQ7XG4gICAgfVxuICAgIHJldHVybiBuXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgcHJldmlvdXMgbm9uLWRlbGV0ZWQgaXRlbVxuICAgKi9cbiAgZ2V0IHByZXYgKCkge1xuICAgIGxldCBuID0gdGhpcy5sZWZ0O1xuICAgIHdoaWxlIChuICE9PSBudWxsICYmIG4uZGVsZXRlZCkge1xuICAgICAgbiA9IG4ubGVmdDtcbiAgICB9XG4gICAgcmV0dXJuIG5cbiAgfVxuXG4gIC8qKlxuICAgKiBDb21wdXRlcyB0aGUgbGFzdCBjb250ZW50IGFkZHJlc3Mgb2YgdGhpcyBJdGVtLlxuICAgKi9cbiAgZ2V0IGxhc3RJZCAoKSB7XG4gICAgLy8gYWxsb2NhdGluZyBpZHMgaXMgcHJldHR5IGNvc3RseSBiZWNhdXNlIG9mIHRoZSBhbW91bnQgb2YgaWRzIGNyZWF0ZWQsIHNvIHdlIHRyeSB0byByZXVzZSB3aGVuZXZlciBwb3NzaWJsZVxuICAgIHJldHVybiB0aGlzLmxlbmd0aCA9PT0gMSA/IHRoaXMuaWQgOiBjcmVhdGVJRCh0aGlzLmlkLmNsaWVudCwgdGhpcy5pZC5jbG9jayArIHRoaXMubGVuZ3RoIC0gMSlcbiAgfVxuXG4gIC8qKlxuICAgKiBUcnkgdG8gbWVyZ2UgdHdvIGl0ZW1zXG4gICAqXG4gICAqIEBwYXJhbSB7SXRlbX0gcmlnaHRcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIG1lcmdlV2l0aCAocmlnaHQpIHtcbiAgICBpZiAoXG4gICAgICB0aGlzLmNvbnN0cnVjdG9yID09PSByaWdodC5jb25zdHJ1Y3RvciAmJlxuICAgICAgY29tcGFyZUlEcyhyaWdodC5vcmlnaW4sIHRoaXMubGFzdElkKSAmJlxuICAgICAgdGhpcy5yaWdodCA9PT0gcmlnaHQgJiZcbiAgICAgIGNvbXBhcmVJRHModGhpcy5yaWdodE9yaWdpbiwgcmlnaHQucmlnaHRPcmlnaW4pICYmXG4gICAgICB0aGlzLmlkLmNsaWVudCA9PT0gcmlnaHQuaWQuY2xpZW50ICYmXG4gICAgICB0aGlzLmlkLmNsb2NrICsgdGhpcy5sZW5ndGggPT09IHJpZ2h0LmlkLmNsb2NrICYmXG4gICAgICB0aGlzLmRlbGV0ZWQgPT09IHJpZ2h0LmRlbGV0ZWQgJiZcbiAgICAgIHRoaXMucmVkb25lID09PSBudWxsICYmXG4gICAgICByaWdodC5yZWRvbmUgPT09IG51bGwgJiZcbiAgICAgIHRoaXMuY29udGVudC5jb25zdHJ1Y3RvciA9PT0gcmlnaHQuY29udGVudC5jb25zdHJ1Y3RvciAmJlxuICAgICAgdGhpcy5jb250ZW50Lm1lcmdlV2l0aChyaWdodC5jb250ZW50KVxuICAgICkge1xuICAgICAgY29uc3Qgc2VhcmNoTWFya2VyID0gLyoqIEB0eXBlIHtBYnN0cmFjdFR5cGU8YW55Pn0gKi8gKHRoaXMucGFyZW50KS5fc2VhcmNoTWFya2VyO1xuICAgICAgaWYgKHNlYXJjaE1hcmtlcikge1xuICAgICAgICBzZWFyY2hNYXJrZXIuZm9yRWFjaChtYXJrZXIgPT4ge1xuICAgICAgICAgIGlmIChtYXJrZXIucCA9PT0gcmlnaHQpIHtcbiAgICAgICAgICAgIC8vIHJpZ2h0IGlzIGdvaW5nIHRvIGJlIFwiZm9yZ290dGVuXCIgc28gd2UgbmVlZCB0byB1cGRhdGUgdGhlIG1hcmtlclxuICAgICAgICAgICAgbWFya2VyLnAgPSB0aGlzO1xuICAgICAgICAgICAgLy8gYWRqdXN0IG1hcmtlciBpbmRleFxuICAgICAgICAgICAgaWYgKCF0aGlzLmRlbGV0ZWQgJiYgdGhpcy5jb3VudGFibGUpIHtcbiAgICAgICAgICAgICAgbWFya2VyLmluZGV4IC09IHRoaXMubGVuZ3RoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAocmlnaHQua2VlcCkge1xuICAgICAgICB0aGlzLmtlZXAgPSB0cnVlO1xuICAgICAgfVxuICAgICAgdGhpcy5yaWdodCA9IHJpZ2h0LnJpZ2h0O1xuICAgICAgaWYgKHRoaXMucmlnaHQgIT09IG51bGwpIHtcbiAgICAgICAgdGhpcy5yaWdodC5sZWZ0ID0gdGhpcztcbiAgICAgIH1cbiAgICAgIHRoaXMubGVuZ3RoICs9IHJpZ2h0Lmxlbmd0aDtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgLyoqXG4gICAqIE1hcmsgdGhpcyBJdGVtIGFzIGRlbGV0ZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqL1xuICBkZWxldGUgKHRyYW5zYWN0aW9uKSB7XG4gICAgaWYgKCF0aGlzLmRlbGV0ZWQpIHtcbiAgICAgIGNvbnN0IHBhcmVudCA9IC8qKiBAdHlwZSB7QWJzdHJhY3RUeXBlPGFueT59ICovICh0aGlzLnBhcmVudCk7XG4gICAgICAvLyBhZGp1c3QgdGhlIGxlbmd0aCBvZiBwYXJlbnRcbiAgICAgIGlmICh0aGlzLmNvdW50YWJsZSAmJiB0aGlzLnBhcmVudFN1YiA9PT0gbnVsbCkge1xuICAgICAgICBwYXJlbnQuX2xlbmd0aCAtPSB0aGlzLmxlbmd0aDtcbiAgICAgIH1cbiAgICAgIHRoaXMubWFya0RlbGV0ZWQoKTtcbiAgICAgIGFkZFRvRGVsZXRlU2V0KHRyYW5zYWN0aW9uLmRlbGV0ZVNldCwgdGhpcy5pZC5jbGllbnQsIHRoaXMuaWQuY2xvY2ssIHRoaXMubGVuZ3RoKTtcbiAgICAgIGFkZENoYW5nZWRUeXBlVG9UcmFuc2FjdGlvbih0cmFuc2FjdGlvbiwgcGFyZW50LCB0aGlzLnBhcmVudFN1Yik7XG4gICAgICB0aGlzLmNvbnRlbnQuZGVsZXRlKHRyYW5zYWN0aW9uKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtTdHJ1Y3RTdG9yZX0gc3RvcmVcbiAgICogQHBhcmFtIHtib29sZWFufSBwYXJlbnRHQ2RcbiAgICovXG4gIGdjIChzdG9yZSwgcGFyZW50R0NkKSB7XG4gICAgaWYgKCF0aGlzLmRlbGV0ZWQpIHtcbiAgICAgIHRocm93IGVycm9yLnVuZXhwZWN0ZWRDYXNlKClcbiAgICB9XG4gICAgdGhpcy5jb250ZW50LmdjKHN0b3JlKTtcbiAgICBpZiAocGFyZW50R0NkKSB7XG4gICAgICByZXBsYWNlU3RydWN0KHN0b3JlLCB0aGlzLCBuZXcgR0ModGhpcy5pZCwgdGhpcy5sZW5ndGgpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jb250ZW50ID0gbmV3IENvbnRlbnREZWxldGVkKHRoaXMubGVuZ3RoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVHJhbnNmb3JtIHRoZSBwcm9wZXJ0aWVzIG9mIHRoaXMgdHlwZSB0byBiaW5hcnkgYW5kIHdyaXRlIGl0IHRvIGFuXG4gICAqIEJpbmFyeUVuY29kZXIuXG4gICAqXG4gICAqIFRoaXMgaXMgY2FsbGVkIHdoZW4gdGhpcyBJdGVtIGlzIHNlbnQgdG8gYSByZW1vdGUgcGVlci5cbiAgICpcbiAgICogQHBhcmFtIHtVcGRhdGVFbmNvZGVyVjEgfCBVcGRhdGVFbmNvZGVyVjJ9IGVuY29kZXIgVGhlIGVuY29kZXIgdG8gd3JpdGUgZGF0YSB0by5cbiAgICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldFxuICAgKi9cbiAgd3JpdGUgKGVuY29kZXIsIG9mZnNldCkge1xuICAgIGNvbnN0IG9yaWdpbiA9IG9mZnNldCA+IDAgPyBjcmVhdGVJRCh0aGlzLmlkLmNsaWVudCwgdGhpcy5pZC5jbG9jayArIG9mZnNldCAtIDEpIDogdGhpcy5vcmlnaW47XG4gICAgY29uc3QgcmlnaHRPcmlnaW4gPSB0aGlzLnJpZ2h0T3JpZ2luO1xuICAgIGNvbnN0IHBhcmVudFN1YiA9IHRoaXMucGFyZW50U3ViO1xuICAgIGNvbnN0IGluZm8gPSAodGhpcy5jb250ZW50LmdldFJlZigpICYgYmluYXJ5LkJJVFM1KSB8XG4gICAgICAob3JpZ2luID09PSBudWxsID8gMCA6IGJpbmFyeS5CSVQ4KSB8IC8vIG9yaWdpbiBpcyBkZWZpbmVkXG4gICAgICAocmlnaHRPcmlnaW4gPT09IG51bGwgPyAwIDogYmluYXJ5LkJJVDcpIHwgLy8gcmlnaHQgb3JpZ2luIGlzIGRlZmluZWRcbiAgICAgIChwYXJlbnRTdWIgPT09IG51bGwgPyAwIDogYmluYXJ5LkJJVDYpOyAvLyBwYXJlbnRTdWIgaXMgbm9uLW51bGxcbiAgICBlbmNvZGVyLndyaXRlSW5mbyhpbmZvKTtcbiAgICBpZiAob3JpZ2luICE9PSBudWxsKSB7XG4gICAgICBlbmNvZGVyLndyaXRlTGVmdElEKG9yaWdpbik7XG4gICAgfVxuICAgIGlmIChyaWdodE9yaWdpbiAhPT0gbnVsbCkge1xuICAgICAgZW5jb2Rlci53cml0ZVJpZ2h0SUQocmlnaHRPcmlnaW4pO1xuICAgIH1cbiAgICBpZiAob3JpZ2luID09PSBudWxsICYmIHJpZ2h0T3JpZ2luID09PSBudWxsKSB7XG4gICAgICBjb25zdCBwYXJlbnQgPSAvKiogQHR5cGUge0Fic3RyYWN0VHlwZTxhbnk+fSAqLyAodGhpcy5wYXJlbnQpO1xuICAgICAgaWYgKHBhcmVudC5faXRlbSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnN0IHBhcmVudEl0ZW0gPSBwYXJlbnQuX2l0ZW07XG4gICAgICAgIGlmIChwYXJlbnRJdGVtID09PSBudWxsKSB7XG4gICAgICAgICAgLy8gcGFyZW50IHR5cGUgb24geS5fbWFwXG4gICAgICAgICAgLy8gZmluZCB0aGUgY29ycmVjdCBrZXlcbiAgICAgICAgICBjb25zdCB5a2V5ID0gZmluZFJvb3RUeXBlS2V5KHBhcmVudCk7XG4gICAgICAgICAgZW5jb2Rlci53cml0ZVBhcmVudEluZm8odHJ1ZSk7IC8vIHdyaXRlIHBhcmVudFlLZXlcbiAgICAgICAgICBlbmNvZGVyLndyaXRlU3RyaW5nKHlrZXkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVuY29kZXIud3JpdGVQYXJlbnRJbmZvKGZhbHNlKTsgLy8gd3JpdGUgcGFyZW50IGlkXG4gICAgICAgICAgZW5jb2Rlci53cml0ZUxlZnRJRChwYXJlbnRJdGVtLmlkKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChwYXJlbnQuY29uc3RydWN0b3IgPT09IFN0cmluZykgeyAvLyB0aGlzIGVkZ2UgY2FzZSB3YXMgYWRkZWQgYnkgZGlmZmVyZW50aWFsIHVwZGF0ZXNcbiAgICAgICAgZW5jb2Rlci53cml0ZVBhcmVudEluZm8odHJ1ZSk7IC8vIHdyaXRlIHBhcmVudFlLZXlcbiAgICAgICAgZW5jb2Rlci53cml0ZVN0cmluZyhwYXJlbnQpO1xuICAgICAgfSBlbHNlIGlmIChwYXJlbnQuY29uc3RydWN0b3IgPT09IElEKSB7XG4gICAgICAgIGVuY29kZXIud3JpdGVQYXJlbnRJbmZvKGZhbHNlKTsgLy8gd3JpdGUgcGFyZW50IGlkXG4gICAgICAgIGVuY29kZXIud3JpdGVMZWZ0SUQocGFyZW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVycm9yLnVuZXhwZWN0ZWRDYXNlKCk7XG4gICAgICB9XG4gICAgICBpZiAocGFyZW50U3ViICE9PSBudWxsKSB7XG4gICAgICAgIGVuY29kZXIud3JpdGVTdHJpbmcocGFyZW50U3ViKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5jb250ZW50LndyaXRlKGVuY29kZXIsIG9mZnNldCk7XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge1VwZGF0ZURlY29kZXJWMSB8IFVwZGF0ZURlY29kZXJWMn0gZGVjb2RlclxuICogQHBhcmFtIHtudW1iZXJ9IGluZm9cbiAqL1xuY29uc3QgcmVhZEl0ZW1Db250ZW50ID0gKGRlY29kZXIsIGluZm8pID0+IGNvbnRlbnRSZWZzW2luZm8gJiBiaW5hcnkuQklUUzVdKGRlY29kZXIpO1xuXG4vKipcbiAqIEEgbG9va3VwIG1hcCBmb3IgcmVhZGluZyBJdGVtIGNvbnRlbnQuXG4gKlxuICogQHR5cGUge0FycmF5PGZ1bmN0aW9uKFVwZGF0ZURlY29kZXJWMSB8IFVwZGF0ZURlY29kZXJWMik6QWJzdHJhY3RDb250ZW50Pn1cbiAqL1xuY29uc3QgY29udGVudFJlZnMgPSBbXG4gICgpID0+IHsgZXJyb3IudW5leHBlY3RlZENhc2UoKTsgfSwgLy8gR0MgaXMgbm90IEl0ZW1Db250ZW50XG4gIHJlYWRDb250ZW50RGVsZXRlZCwgLy8gMVxuICByZWFkQ29udGVudEpTT04sIC8vIDJcbiAgcmVhZENvbnRlbnRCaW5hcnksIC8vIDNcbiAgcmVhZENvbnRlbnRTdHJpbmcsIC8vIDRcbiAgcmVhZENvbnRlbnRFbWJlZCwgLy8gNVxuICByZWFkQ29udGVudEZvcm1hdCwgLy8gNlxuICByZWFkQ29udGVudFR5cGUsIC8vIDdcbiAgcmVhZENvbnRlbnRBbnksIC8vIDhcbiAgcmVhZENvbnRlbnREb2MsIC8vIDlcbiAgKCkgPT4geyBlcnJvci51bmV4cGVjdGVkQ2FzZSgpOyB9IC8vIDEwIC0gU2tpcCBpcyBub3QgSXRlbUNvbnRlbnRcbl07XG5cbmNvbnN0IHN0cnVjdFNraXBSZWZOdW1iZXIgPSAxMDtcblxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5jbGFzcyBTa2lwIGV4dGVuZHMgQWJzdHJhY3RTdHJ1Y3Qge1xuICBnZXQgZGVsZXRlZCAoKSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIGRlbGV0ZSAoKSB7fVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1NraXB9IHJpZ2h0XG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBtZXJnZVdpdGggKHJpZ2h0KSB7XG4gICAgaWYgKHRoaXMuY29uc3RydWN0b3IgIT09IHJpZ2h0LmNvbnN0cnVjdG9yKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gICAgdGhpcy5sZW5ndGggKz0gcmlnaHQubGVuZ3RoO1xuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldFxuICAgKi9cbiAgaW50ZWdyYXRlICh0cmFuc2FjdGlvbiwgb2Zmc2V0KSB7XG4gICAgLy8gc2tpcCBzdHJ1Y3RzIGNhbm5vdCBiZSBpbnRlZ3JhdGVkXG4gICAgZXJyb3IudW5leHBlY3RlZENhc2UoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1VwZGF0ZUVuY29kZXJWMSB8IFVwZGF0ZUVuY29kZXJWMn0gZW5jb2RlclxuICAgKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0XG4gICAqL1xuICB3cml0ZSAoZW5jb2Rlciwgb2Zmc2V0KSB7XG4gICAgZW5jb2Rlci53cml0ZUluZm8oc3RydWN0U2tpcFJlZk51bWJlcik7XG4gICAgLy8gd3JpdGUgYXMgVmFyVWludCBiZWNhdXNlIFNraXBzIGNhbid0IG1ha2UgdXNlIG9mIHByZWRpY3RhYmxlIGxlbmd0aC1lbmNvZGluZ1xuICAgIGVuY29kaW5nLndyaXRlVmFyVWludChlbmNvZGVyLnJlc3RFbmNvZGVyLCB0aGlzLmxlbmd0aCAtIG9mZnNldCk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHBhcmFtIHtTdHJ1Y3RTdG9yZX0gc3RvcmVcbiAgICogQHJldHVybiB7bnVsbCB8IG51bWJlcn1cbiAgICovXG4gIGdldE1pc3NpbmcgKHRyYW5zYWN0aW9uLCBzdG9yZSkge1xuICAgIHJldHVybiBudWxsXG4gIH1cbn1cblxuLyoqIGVzbGludC1lbnYgYnJvd3NlciAqL1xuXG5jb25zdCBnbG8gPSAvKiogQHR5cGUge2FueX0gKi8gKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnXG4gID8gd2luZG93XG4gIC8vIEB0cy1pZ25vcmVcbiAgOiB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbCA6IHt9KTtcblxuY29uc3QgaW1wb3J0SWRlbnRpZmllciA9ICdfXyAkWUpTJCBfXyc7XG5cbmlmIChnbG9baW1wb3J0SWRlbnRpZmllcl0gPT09IHRydWUpIHtcbiAgLyoqXG4gICAqIERlYXIgcmVhZGVyIG9mIHRoaXMgbWVzc2FnZS4gUGxlYXNlIHRha2UgdGhpcyBzZXJpb3VzbHkuXG4gICAqXG4gICAqIElmIHlvdSBzZWUgdGhpcyBtZXNzYWdlLCBtYWtlIHN1cmUgdGhhdCB5b3Ugb25seSBpbXBvcnQgb25lIHZlcnNpb24gb2YgWWpzLiBJbiBtYW55IGNhc2VzLFxuICAgKiB5b3VyIHBhY2thZ2UgbWFuYWdlciBpbnN0YWxscyB0d28gdmVyc2lvbnMgb2YgWWpzIHRoYXQgYXJlIHVzZWQgYnkgZGlmZmVyZW50IHBhY2thZ2VzIHdpdGhpbiB5b3VyIHByb2plY3QuXG4gICAqIEFub3RoZXIgcmVhc29uIGZvciB0aGlzIG1lc3NhZ2UgaXMgdGhhdCBzb21lIHBhcnRzIG9mIHlvdXIgcHJvamVjdCB1c2UgdGhlIGNvbW1vbmpzIHZlcnNpb24gb2YgWWpzXG4gICAqIGFuZCBvdGhlcnMgdXNlIHRoZSBFY21hU2NyaXB0IHZlcnNpb24gb2YgWWpzLlxuICAgKlxuICAgKiBUaGlzIG9mdGVuIGxlYWRzIHRvIGlzc3VlcyB0aGF0IGFyZSBoYXJkIHRvIGRlYnVnLiBXZSBvZnRlbiBuZWVkIHRvIHBlcmZvcm0gY29uc3RydWN0b3IgY2hlY2tzLFxuICAgKiBlLmcuIGBzdHJ1Y3QgaW5zdGFuY2VvZiBHQ2AuIElmIHlvdSBpbXBvcnRlZCBkaWZmZXJlbnQgdmVyc2lvbnMgb2YgWWpzLCBpdCBpcyBpbXBvc3NpYmxlIGZvciB1cyB0b1xuICAgKiBkbyB0aGUgY29uc3RydWN0b3IgY2hlY2tzIGFueW1vcmUgLSB3aGljaCBtaWdodCBicmVhayB0aGUgQ1JEVCBhbGdvcml0aG0uXG4gICAqL1xuICBjb25zb2xlLmVycm9yKCdZanMgd2FzIGFscmVhZHkgaW1wb3J0ZWQuIFRoaXMgYnJlYWtzIGNvbnN0cnVjdG9yIGNoZWNrcyBhbmQgd2lsbCBsZWFkIHRvIGlzc3N1ZXMhJyk7XG59XG5nbG9baW1wb3J0SWRlbnRpZmllcl0gPSB0cnVlO1xuXG5leHBvcnQgeyBBYnNvbHV0ZVBvc2l0aW9uLCBBYnN0cmFjdENvbm5lY3RvciwgQWJzdHJhY3RTdHJ1Y3QsIEFic3RyYWN0VHlwZSwgWUFycmF5IGFzIEFycmF5LCBDb250ZW50QW55LCBDb250ZW50QmluYXJ5LCBDb250ZW50RGVsZXRlZCwgQ29udGVudEVtYmVkLCBDb250ZW50Rm9ybWF0LCBDb250ZW50SlNPTiwgQ29udGVudFN0cmluZywgQ29udGVudFR5cGUsIERvYywgR0MsIElELCBJdGVtLCBZTWFwIGFzIE1hcCwgUGVybWFuZW50VXNlckRhdGEsIFJlbGF0aXZlUG9zaXRpb24sIFNuYXBzaG90LCBZVGV4dCBhcyBUZXh0LCBUcmFuc2FjdGlvbiwgVW5kb01hbmFnZXIsIFVwZGF0ZUVuY29kZXJWMSwgWVhtbEVsZW1lbnQgYXMgWG1sRWxlbWVudCwgWVhtbEZyYWdtZW50IGFzIFhtbEZyYWdtZW50LCBZWG1sSG9vayBhcyBYbWxIb29rLCBZWG1sVGV4dCBhcyBYbWxUZXh0LCBZQXJyYXlFdmVudCwgWUV2ZW50LCBZTWFwRXZlbnQsIFlUZXh0RXZlbnQsIFlYbWxFdmVudCwgYXBwbHlVcGRhdGUsIGFwcGx5VXBkYXRlVjIsIGNsZWFudXBZVGV4dEZvcm1hdHRpbmcsIGNvbXBhcmVJRHMsIGNvbXBhcmVSZWxhdGl2ZVBvc2l0aW9ucywgY29udmVydFVwZGF0ZUZvcm1hdFYxVG9WMiwgY29udmVydFVwZGF0ZUZvcm1hdFYyVG9WMSwgY3JlYXRlQWJzb2x1dGVQb3NpdGlvbkZyb21SZWxhdGl2ZVBvc2l0aW9uLCBjcmVhdGVEZWxldGVTZXQsIGNyZWF0ZURlbGV0ZVNldEZyb21TdHJ1Y3RTdG9yZSwgY3JlYXRlRG9jRnJvbVNuYXBzaG90LCBjcmVhdGVJRCwgY3JlYXRlUmVsYXRpdmVQb3NpdGlvbkZyb21KU09OLCBjcmVhdGVSZWxhdGl2ZVBvc2l0aW9uRnJvbVR5cGVJbmRleCwgY3JlYXRlU25hcHNob3QsIGRlY29kZVJlbGF0aXZlUG9zaXRpb24sIGRlY29kZVNuYXBzaG90LCBkZWNvZGVTbmFwc2hvdFYyLCBkZWNvZGVTdGF0ZVZlY3RvciwgZGVjb2RlVXBkYXRlLCBkZWNvZGVVcGRhdGVWMiwgZGlmZlVwZGF0ZSwgZGlmZlVwZGF0ZVYyLCBlbXB0eVNuYXBzaG90LCBlbmNvZGVSZWxhdGl2ZVBvc2l0aW9uLCBlbmNvZGVTbmFwc2hvdCwgZW5jb2RlU25hcHNob3RWMiwgZW5jb2RlU3RhdGVBc1VwZGF0ZSwgZW5jb2RlU3RhdGVBc1VwZGF0ZVYyLCBlbmNvZGVTdGF0ZVZlY3RvciwgZW5jb2RlU3RhdGVWZWN0b3JGcm9tVXBkYXRlLCBlbmNvZGVTdGF0ZVZlY3RvckZyb21VcGRhdGVWMiwgZXF1YWxTbmFwc2hvdHMsIGZpbmRJbmRleFNTLCBmaW5kUm9vdFR5cGVLZXksIGdldEl0ZW0sIGdldFN0YXRlLCBnZXRUeXBlQ2hpbGRyZW4sIGlzRGVsZXRlZCwgaXNQYXJlbnRPZiwgaXRlcmF0ZURlbGV0ZWRTdHJ1Y3RzLCBsb2dUeXBlLCBsb2dVcGRhdGUsIGxvZ1VwZGF0ZVYyLCBtZXJnZVVwZGF0ZXMsIG1lcmdlVXBkYXRlc1YyLCBwYXJzZVVwZGF0ZU1ldGEsIHBhcnNlVXBkYXRlTWV0YVYyLCByZWFkVXBkYXRlLCByZWFkVXBkYXRlVjIsIHJlbGF0aXZlUG9zaXRpb25Ub0pTT04sIHNuYXBzaG90LCB0cmFuc2FjdCwgdHJ5R2MsIHR5cGVMaXN0VG9BcnJheVNuYXBzaG90LCB0eXBlTWFwR2V0U25hcHNob3QgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXlqcy5tanMubWFwXG4iLCIvKipcbiAqIFV0aWxpdHkgaGVscGVycyB0byB3b3JrIHdpdGggcHJvbWlzZXMuXG4gKlxuICogQG1vZHVsZSBwcm9taXNlXG4gKi9cblxuaW1wb3J0ICogYXMgdGltZSBmcm9tICcuL3RpbWUuanMnXG5cbi8qKlxuICogQHRlbXBsYXRlIFRcbiAqIEBjYWxsYmFjayBQcm9taXNlUmVzb2x2ZVxuICogQHBhcmFtIHtUfFByb21pc2VMaWtlPFQ+fSBbcmVzdWx0XVxuICovXG5cbi8qKlxuICogQHRlbXBsYXRlIFRcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oUHJvbWlzZVJlc29sdmU8VD4sZnVuY3Rpb24oRXJyb3IpOnZvaWQpOmFueX0gZlxuICogQHJldHVybiB7UHJvbWlzZTxUPn1cbiAqL1xuZXhwb3J0IGNvbnN0IGNyZWF0ZSA9IGYgPT4gLyoqIEB0eXBlIHtQcm9taXNlPFQ+fSAqLyAobmV3IFByb21pc2UoZikpXG5cbi8qKlxuICogQHBhcmFtIHtmdW5jdGlvbihmdW5jdGlvbigpOnZvaWQsZnVuY3Rpb24oRXJyb3IpOnZvaWQpOnZvaWR9IGZcbiAqIEByZXR1cm4ge1Byb21pc2U8dm9pZD59XG4gKi9cbmV4cG9ydCBjb25zdCBjcmVhdGVFbXB0eSA9IGYgPT4gbmV3IFByb21pc2UoZilcblxuLyoqXG4gKiBgUHJvbWlzZS5hbGxgIHdhaXQgZm9yIGFsbCBwcm9taXNlcyBpbiB0aGUgYXJyYXkgdG8gcmVzb2x2ZSBhbmQgcmV0dXJuIHRoZSByZXN1bHRcbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAcGFyYW0ge0FycmF5PFByb21pc2U8VD4+fSBhcnJwXG4gKiBAcmV0dXJuIHtQcm9taXNlPEFycmF5PFQ+Pn1cbiAqL1xuZXhwb3J0IGNvbnN0IGFsbCA9IGFycnAgPT4gUHJvbWlzZS5hbGwoYXJycClcblxuLyoqXG4gKiBAcGFyYW0ge0Vycm9yfSBbcmVhc29uXVxuICogQHJldHVybiB7UHJvbWlzZTxuZXZlcj59XG4gKi9cbmV4cG9ydCBjb25zdCByZWplY3QgPSByZWFzb24gPT4gUHJvbWlzZS5yZWplY3QocmVhc29uKVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAcGFyYW0ge1R8dm9pZH0gcmVzXG4gKiBAcmV0dXJuIHtQcm9taXNlPFR8dm9pZD59XG4gKi9cbmV4cG9ydCBjb25zdCByZXNvbHZlID0gcmVzID0+IFByb21pc2UucmVzb2x2ZShyZXMpXG5cbi8qKlxuICogQHRlbXBsYXRlIFRcbiAqIEBwYXJhbSB7VH0gcmVzXG4gKiBAcmV0dXJuIHtQcm9taXNlPFQ+fVxuICovXG5leHBvcnQgY29uc3QgcmVzb2x2ZVdpdGggPSByZXMgPT4gUHJvbWlzZS5yZXNvbHZlKHJlcylcblxuLyoqXG4gKiBAdG9kbyBOZXh0IHZlcnNpb24sIHJlb3JkZXIgcGFyYW1ldGVyczogY2hlY2ssIFt0aW1lb3V0LCBbaW50ZXJ2YWxSZXNvbHV0aW9uXV1cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gdGltZW91dFxuICogQHBhcmFtIHtmdW5jdGlvbigpOmJvb2xlYW59IGNoZWNrXG4gKiBAcGFyYW0ge251bWJlcn0gW2ludGVydmFsUmVzb2x1dGlvbl1cbiAqIEByZXR1cm4ge1Byb21pc2U8dm9pZD59XG4gKi9cbmV4cG9ydCBjb25zdCB1bnRpbCA9ICh0aW1lb3V0LCBjaGVjaywgaW50ZXJ2YWxSZXNvbHV0aW9uID0gMTApID0+IGNyZWF0ZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gIGNvbnN0IHN0YXJ0VGltZSA9IHRpbWUuZ2V0VW5peFRpbWUoKVxuICBjb25zdCBoYXNUaW1lb3V0ID0gdGltZW91dCA+IDBcbiAgY29uc3QgdW50aWxJbnRlcnZhbCA9ICgpID0+IHtcbiAgICBpZiAoY2hlY2soKSkge1xuICAgICAgY2xlYXJJbnRlcnZhbChpbnRlcnZhbEhhbmRsZSlcbiAgICAgIHJlc29sdmUoKVxuICAgIH0gZWxzZSBpZiAoaGFzVGltZW91dCkge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgIGlmICh0aW1lLmdldFVuaXhUaW1lKCkgLSBzdGFydFRpbWUgPiB0aW1lb3V0KSB7XG4gICAgICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWxIYW5kbGUpXG4gICAgICAgIHJlamVjdChuZXcgRXJyb3IoJ1RpbWVvdXQnKSlcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgY29uc3QgaW50ZXJ2YWxIYW5kbGUgPSBzZXRJbnRlcnZhbCh1bnRpbEludGVydmFsLCBpbnRlcnZhbFJlc29sdXRpb24pXG59KVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lb3V0XG4gKiBAcmV0dXJuIHtQcm9taXNlPHVuZGVmaW5lZD59XG4gKi9cbmV4cG9ydCBjb25zdCB3YWl0ID0gdGltZW91dCA9PiBjcmVhdGUoKHJlc29sdmUsIHJlamVjdCkgPT4gc2V0VGltZW91dChyZXNvbHZlLCB0aW1lb3V0KSlcblxuLyoqXG4gKiBDaGVja3MgaWYgYW4gb2JqZWN0IGlzIGEgcHJvbWlzZSB1c2luZyBkdWNrdHlwaW5nLlxuICpcbiAqIFByb21pc2VzIGFyZSBvZnRlbiBwb2x5ZmlsbGVkLCBzbyBpdCBtYWtlcyBzZW5zZSB0byBhZGQgc29tZSBhZGRpdGlvbmFsIGd1YXJhbnRlZXMgaWYgdGhlIHVzZXIgb2YgdGhpc1xuICogbGlicmFyeSBoYXMgc29tZSBpbnNhbmUgZW52aXJvbm1lbnQgd2hlcmUgZ2xvYmFsIFByb21pc2Ugb2JqZWN0cyBhcmUgb3ZlcndyaXR0ZW4uXG4gKlxuICogQHBhcmFtIHthbnl9IHBcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBjb25zdCBpc1Byb21pc2UgPSBwID0+IHAgaW5zdGFuY2VvZiBQcm9taXNlIHx8IChwICYmIHAudGhlbiAmJiBwLmNhdGNoICYmIHAuZmluYWxseSlcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdGxvYWRlZDogZmFsc2UsXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuXHRtb2R1bGUubG9hZGVkID0gdHJ1ZTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbi8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBfX3dlYnBhY2tfbW9kdWxlc19fO1xuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubm1kID0gKG1vZHVsZSkgPT4ge1xuXHRtb2R1bGUucGF0aHMgPSBbXTtcblx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRyZXR1cm4gbW9kdWxlO1xufTsiLCIvLyBubyBiYXNlVVJJXG5cbi8vIG9iamVjdCB0byBzdG9yZSBsb2FkZWQgYW5kIGxvYWRpbmcgY2h1bmtzXG4vLyB1bmRlZmluZWQgPSBjaHVuayBub3QgbG9hZGVkLCBudWxsID0gY2h1bmsgcHJlbG9hZGVkL3ByZWZldGNoZWRcbi8vIFtyZXNvbHZlLCByZWplY3QsIFByb21pc2VdID0gY2h1bmsgbG9hZGluZywgMCA9IGNodW5rIGxvYWRlZFxudmFyIGluc3RhbGxlZENodW5rcyA9IHtcblx0NTkyOiAwXG59O1xuXG4vLyBubyBjaHVuayBvbiBkZW1hbmQgbG9hZGluZ1xuXG4vLyBubyBwcmVmZXRjaGluZ1xuXG4vLyBubyBwcmVsb2FkZWRcblxuLy8gbm8gSE1SXG5cbi8vIG5vIEhNUiBtYW5pZmVzdFxuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLk8uaiA9IChjaHVua0lkKSA9PiAoaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID09PSAwKTtcblxuLy8gaW5zdGFsbCBhIEpTT05QIGNhbGxiYWNrIGZvciBjaHVuayBsb2FkaW5nXG52YXIgd2VicGFja0pzb25wQ2FsbGJhY2sgPSAocGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24sIGRhdGEpID0+IHtcblx0dmFyIFtjaHVua0lkcywgbW9yZU1vZHVsZXMsIHJ1bnRpbWVdID0gZGF0YTtcblx0Ly8gYWRkIFwibW9yZU1vZHVsZXNcIiB0byB0aGUgbW9kdWxlcyBvYmplY3QsXG5cdC8vIHRoZW4gZmxhZyBhbGwgXCJjaHVua0lkc1wiIGFzIGxvYWRlZCBhbmQgZmlyZSBjYWxsYmFja1xuXHR2YXIgbW9kdWxlSWQsIGNodW5rSWQsIGkgPSAwO1xuXHRpZihjaHVua0lkcy5zb21lKChpZCkgPT4gKGluc3RhbGxlZENodW5rc1tpZF0gIT09IDApKSkge1xuXHRcdGZvcihtb2R1bGVJZCBpbiBtb3JlTW9kdWxlcykge1xuXHRcdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKG1vcmVNb2R1bGVzLCBtb2R1bGVJZCkpIHtcblx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tW21vZHVsZUlkXSA9IG1vcmVNb2R1bGVzW21vZHVsZUlkXTtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYocnVudGltZSkgdmFyIHJlc3VsdCA9IHJ1bnRpbWUoX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cdH1cblx0aWYocGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24pIHBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uKGRhdGEpO1xuXHRmb3IoO2kgPCBjaHVua0lkcy5sZW5ndGg7IGkrKykge1xuXHRcdGNodW5rSWQgPSBjaHVua0lkc1tpXTtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oaW5zdGFsbGVkQ2h1bmtzLCBjaHVua0lkKSAmJiBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0pIHtcblx0XHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXVswXSgpO1xuXHRcdH1cblx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSAwO1xuXHR9XG5cdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fLk8ocmVzdWx0KTtcbn1cblxudmFyIGNodW5rTG9hZGluZ0dsb2JhbCA9IHNlbGZbXCJ3ZWJwYWNrQ2h1bmttaW5kbWFwXCJdID0gc2VsZltcIndlYnBhY2tDaHVua21pbmRtYXBcIl0gfHwgW107XG5jaHVua0xvYWRpbmdHbG9iYWwuZm9yRWFjaCh3ZWJwYWNrSnNvbnBDYWxsYmFjay5iaW5kKG51bGwsIDApKTtcbmNodW5rTG9hZGluZ0dsb2JhbC5wdXNoID0gd2VicGFja0pzb25wQ2FsbGJhY2suYmluZChudWxsLCBjaHVua0xvYWRpbmdHbG9iYWwucHVzaC5iaW5kKGNodW5rTG9hZGluZ0dsb2JhbCkpOyIsIi8vIHN0YXJ0dXBcbi8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLy8gVGhpcyBlbnRyeSBtb2R1bGUgaXMgcmVmZXJlbmNlZCBieSBvdGhlciBtb2R1bGVzIHNvIGl0IGNhbid0IGJlIGlubGluZWRcbl9fd2VicGFja19yZXF1aXJlX18oNTI5MCk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDg1NzUpO1xuX193ZWJwYWNrX3JlcXVpcmVfXyg1MzcxKTtcbl9fd2VicGFja19yZXF1aXJlX18oMTk0OSk7XG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMzU2NSk7XG5fX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXy5PKF9fd2VicGFja19leHBvcnRzX18pO1xuIl0sIm5hbWVzIjpbImRlZmVycmVkIiwibGVhZlByb3RvdHlwZXMiLCJnZXRQcm90byIsIm9iaiIsIl9leHRlbmRzIiwiT2JqZWN0IiwiYXNzaWduIiwidGFyZ2V0IiwiaSIsImFyZ3VtZW50cyIsImxlbmd0aCIsInNvdXJjZSIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIl9yZWFjdDIiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImV4cG9ydHMiLCJfcmVmIiwiX3JlZiRmaWxsIiwiZmlsbCIsInVuZGVmaW5lZCIsIl9yZWYkd2lkdGgiLCJ3aWR0aCIsIl9yZWYkaGVpZ2h0IiwiaGVpZ2h0IiwiX3JlZiRzdHlsZSIsInN0eWxlIiwicHJvcHMiLCJrZXlzIiwiaW5kZXhPZiIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsImNyZWF0ZUVsZW1lbnQiLCJ2aWV3Qm94IiwiZCIsIm5hdiIsIm5hdmlnYXRvciIsImRvYyIsImRvY3VtZW50IiwiYWdlbnQiLCJ1c2VyQWdlbnQiLCJpZV9lZGdlIiwiZXhlYyIsImllX3VwdG8xMCIsImllXzExdXAiLCJpZSIsImllX3ZlcnNpb24iLCJkb2N1bWVudE1vZGUiLCJnZWNrbyIsInRlc3QiLCJfY2hyb21lIiwiY2hyb21lIiwiY2hyb21lX3ZlcnNpb24iLCJzYWZhcmkiLCJ2ZW5kb3IiLCJpb3MiLCJtYXhUb3VjaFBvaW50cyIsIm1hYyIsInBsYXRmb3JtIiwiYW5kcm9pZCIsIndlYmtpdCIsImRvY3VtZW50RWxlbWVudCIsIndlYmtpdF92ZXJzaW9uIiwiZG9tSW5kZXgiLCJub2RlIiwiaW5kZXgiLCJwcmV2aW91c1NpYmxpbmciLCJwYXJlbnROb2RlIiwicGFyZW50IiwiYXNzaWduZWRTbG90Iiwibm9kZVR5cGUiLCJob3N0IiwicmV1c2VkUmFuZ2UiLCJ0ZXh0UmFuZ2UiLCJmcm9tIiwidG8iLCJyYW5nZSIsImNyZWF0ZVJhbmdlIiwic2V0RW5kIiwibm9kZVZhbHVlIiwic2V0U3RhcnQiLCJpc0VxdWl2YWxlbnRQb3NpdGlvbiIsIm9mZiIsInRhcmdldE5vZGUiLCJ0YXJnZXRPZmYiLCJzY2FuRm9yIiwiYXRvbUVsZW1lbnRzIiwiZGlyIiwibm9kZVNpemUiLCJoYXNCbG9ja0Rlc2MiLCJub2RlTmFtZSIsImNvbnRlbnRFZGl0YWJsZSIsImNoaWxkTm9kZXMiLCJkb20iLCJkZXNjIiwiY3VyIiwicG1WaWV3RGVzYyIsImlzQmxvY2siLCJjb250ZW50RE9NIiwic2VsZWN0aW9uQ29sbGFwc2VkIiwiZG9tU2VsIiwiY29sbGFwc2VkIiwiaXNDb2xsYXBzZWQiLCJyYW5nZUNvdW50IiwiZ2V0UmFuZ2VBdCIsImtleUV2ZW50Iiwia2V5Q29kZSIsImV2ZW50IiwiY3JlYXRlRXZlbnQiLCJpbml0RXZlbnQiLCJjb2RlIiwid2luZG93UmVjdCIsImxlZnQiLCJyaWdodCIsImNsaWVudFdpZHRoIiwidG9wIiwiYm90dG9tIiwiY2xpZW50SGVpZ2h0IiwiZ2V0U2lkZSIsInZhbHVlIiwic2lkZSIsImNsaWVudFJlY3QiLCJyZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0Iiwic2NhbGVYIiwib2Zmc2V0V2lkdGgiLCJzY2FsZVkiLCJvZmZzZXRIZWlnaHQiLCJzY3JvbGxSZWN0SW50b1ZpZXciLCJ2aWV3Iiwic3RhcnRET00iLCJzY3JvbGxUaHJlc2hvbGQiLCJzb21lUHJvcCIsInNjcm9sbE1hcmdpbiIsIm93bmVyRG9jdW1lbnQiLCJlbHQiLCJhdFRvcCIsImJvZHkiLCJib3VuZGluZyIsIm1vdmVYIiwibW92ZVkiLCJkZWZhdWx0VmlldyIsInNjcm9sbEJ5Iiwic3RhcnRYIiwic2Nyb2xsTGVmdCIsInN0YXJ0WSIsInNjcm9sbFRvcCIsImRYIiwiZFkiLCJzY3JvbGxTdGFjayIsInN0YWNrIiwicHVzaCIsInJlc3RvcmVTY3JvbGxTdGFjayIsImRUb3AiLCJwcmV2ZW50U2Nyb2xsU3VwcG9ydGVkIiwiZmluZE9mZnNldEluTm9kZSIsImNvb3JkcyIsImNsb3Nlc3QiLCJjb29yZHNDbG9zZXN0IiwiZHhDbG9zZXN0Iiwib2Zmc2V0Iiwicm93Qm90Iiwicm93VG9wIiwiY2hpbGQiLCJmaXJzdENoaWxkIiwiY2hpbGRJbmRleCIsIm5leHRTaWJsaW5nIiwicmVjdHMiLCJnZXRDbGllbnRSZWN0cyIsIk1hdGgiLCJtYXgiLCJtaW4iLCJkeCIsImxlbiIsInNpbmdsZVJlY3QiLCJpblJlY3QiLCJmaW5kT2Zmc2V0SW5UZXh0IiwiZWxlbWVudEZyb21Qb2ludCIsImVsZW1lbnQiLCJib3giLCJzdGFydEkiLCJmbG9vciIsImoiLCJwb3NBdENvb3JkcyIsImNhcmV0UG9zaXRpb25Gcm9tUG9pbnQiLCJwb3MiLCJvZmZzZXROb2RlIiwiXyIsImNhcmV0UmFuZ2VGcm9tUG9pbnQiLCJzdGFydENvbnRhaW5lciIsInN0YXJ0T2Zmc2V0Iiwicm9vdCIsImNvbnRhaW5zIiwicCIsImRyYWdnYWJsZSIsInRhcmdldEtsdWRnZSIsIm5leHQiLCJsYXN0Q2hpbGQiLCJzdGF0ZSIsImNvbnRlbnQiLCJzaXplIiwib3V0c2lkZSIsImRvY1ZpZXciLCJuZWFyZXN0RGVzYyIsInBvc0JlZm9yZSIsInBvc0FmdGVyIiwicG9zRnJvbURPTSIsInBvc0Zyb21DYXJldCIsImJpYXMiLCJwb3NGcm9tRWxlbWVudCIsImluc2lkZSIsInBvc0F0U3RhcnQiLCJib3JkZXIiLCJCSURJIiwiY29vcmRzQXRQb3MiLCJkb21Gcm9tUG9zIiwic3VwcG9ydEVtcHR5UmFuZ2UiLCJ0YWtlU2lkZSIsImZsYXR0ZW5WIiwicmVjdEJlZm9yZSIsInJlY3RBZnRlciIsInJlc29sdmUiLCJpbmxpbmVDb250ZW50IiwiYmVmb3JlIiwiZmxhdHRlbkgiLCJhZnRlciIsImlnbm9yZUZvckNvb3JkcyIsIngiLCJ5Iiwid2l0aEZsdXNoZWRTdGF0ZSIsImYiLCJ2aWV3U3RhdGUiLCJhY3RpdmUiLCJhY3RpdmVFbGVtZW50IiwidXBkYXRlU3RhdGUiLCJmb2N1cyIsIm1heWJlUlRMIiwiY2FjaGVkU3RhdGUiLCJjYWNoZWREaXIiLCJjYWNoZWRSZXN1bHQiLCJWaWV3RGVzYyIsImNvbnN0cnVjdG9yIiwiY2hpbGRyZW4iLCJ0aGlzIiwiZGlydHkiLCJtYXRjaGVzV2lkZ2V0Iiwid2lkZ2V0IiwibWF0Y2hlc01hcmsiLCJtYXJrIiwibWF0Y2hlc05vZGUiLCJvdXRlckRlY28iLCJpbm5lckRlY28iLCJtYXRjaGVzSGFjayIsInBhcnNlUnVsZSIsInN0b3BFdmVudCIsImRlc3Ryb3kiLCJwb3NCZWZvcmVDaGlsZCIsInBvc0F0RW5kIiwibG9jYWxQb3NGcm9tRE9NIiwiZG9tQmVmb3JlIiwiZG9tQWZ0ZXIiLCJhdEVuZCIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwic2VhcmNoIiwib25seU5vZGVzIiwiZmlyc3QiLCJub2RlRE9NIiwiZ2V0RGVzYyIsInNjYW4iLCJkZXNjQXQiLCJlbmQiLCJwcmV2IiwiY3VyUG9zIiwiVHJhaWxpbmdIYWNrVmlld0Rlc2MiLCJXaWRnZXRWaWV3RGVzYyIsImVudGVyIiwiZG9tQXRvbSIsInBhcnNlUmFuZ2UiLCJiYXNlIiwiZnJvbU9mZnNldCIsInRvT2Zmc2V0IiwiY2hpbGRCYXNlIiwiZW1wdHlDaGlsZEF0IiwiZG9tQWZ0ZXJQb3MiLCJSYW5nZUVycm9yIiwic2V0U2VsZWN0aW9uIiwiYW5jaG9yIiwiaGVhZCIsImZvcmNlIiwiYW5jaG9yRE9NIiwiaGVhZERPTSIsImdldFNlbGVjdGlvbiIsImJyS2x1ZGdlIiwiZm9jdXNOb2RlIiwiZm9jdXNPZmZzZXQiLCJhbmNob3JOb2RlIiwiYW5jaG9yT2Zmc2V0IiwiZG9tU2VsRXh0ZW5kZWQiLCJleHRlbmQiLCJjb2xsYXBzZSIsImVyciIsIkRPTUV4Y2VwdGlvbiIsInRtcCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwiaWdub3JlTXV0YXRpb24iLCJtdXRhdGlvbiIsInR5cGUiLCJjb250ZW50TG9zdCIsIm1hcmtEaXJ0eSIsInN0YXJ0SW5zaWRlIiwiZW5kSW5zaWRlIiwibWFya1BhcmVudHNEaXJ0eSIsImxldmVsIiwic2VsZiIsInRvRE9NIiwic3BlYyIsInJhdyIsIndyYXAiLCJhcHBlbmRDaGlsZCIsImNsYXNzTGlzdCIsImFkZCIsInN1cGVyIiwiZXEiLCJpZ25vcmUiLCJzdG9wIiwiaWdub3JlU2VsZWN0aW9uIiwiQ29tcG9zaXRpb25WaWV3RGVzYyIsInRleHRET00iLCJ0ZXh0IiwibXV0Iiwib2xkVmFsdWUiLCJNYXJrVmlld0Rlc2MiLCJzdGF0aWMiLCJpbmxpbmUiLCJjdXN0b20iLCJub2RlVmlld3MiLCJuYW1lIiwicmVwYXJzZUluVmlldyIsImF0dHJzIiwiY29udGVudEVsZW1lbnQiLCJzbGljZSIsImNvcHkiLCJjcmVhdGUiLCJub2RlcyIsInJlcGxhY2VOb2RlcyIsIk5vZGVWaWV3RGVzYyIsInVwZGF0ZUNoaWxkcmVuIiwiZGVzY09iaiIsImlzVGV4dCIsImNyZWF0ZVRleHROb2RlIiwiaGFzQXR0cmlidXRlIiwiYXBwbHlPdXRlckRlY28iLCJDdXN0b21Ob2RlVmlld0Rlc2MiLCJUZXh0Vmlld0Rlc2MiLCJydWxlIiwid2hpdGVzcGFjZSIsInByZXNlcnZlV2hpdGVzcGFjZSIsImdldENvbnRlbnQiLCJzYW1lT3V0ZXJEZWNvIiwiaXNMZWFmIiwiY29tcG9zaXRpb24iLCJjb21wb3NpbmciLCJsb2NhbENvbXBvc2l0aW9uSW5mbyIsImxvY2FsQ29tcG9zaXRpb24iLCJjb21wb3NpdGlvbkluQ2hpbGQiLCJ1cGRhdGVyIiwiVmlld1RyZWVVcGRhdGVyIiwiZGVjbyIsIm9uV2lkZ2V0Iiwib25Ob2RlIiwibG9jYWxzIiwiY2hpbGRDb3VudCIsImZvckNoaWxkIiwiZGVjb0luZGV4IiwicmVzdE5vZGUiLCJwYXJlbnRJbmRleCIsIndpZGdldHMiLCJzb3J0IiwiY29tcGFyZVNpZGUiLCJzcGxpY2UiLCJjdXRBdCIsImN1dCIsImlzSW5saW5lIiwiZmlsdGVyIiwiaXRlckRlY28iLCJpbnNpZGVOb2RlIiwibWFya3MiLCJzeW5jVG9NYXJrcyIsInBsYWNlV2lkZ2V0IiwiY29tcEluZGV4IiwiZmluZE5vZGVNYXRjaCIsInNlbGVjdGlvbiIsImZpbmRJbmRleFdpdGhDaGlsZCIsInVwZGF0ZU5vZGVBdCIsInVwZGF0ZU5leHROb2RlIiwiYWRkTm9kZSIsImlzVGV4dGJsb2NrIiwiYWRkVGV4dGJsb2NrSGFja3MiLCJkZXN0cm95UmVzdCIsImNoYW5nZWQiLCJwcm90ZWN0TG9jYWxDb21wb3NpdGlvbiIsInJlbmRlckRlc2NzIiwib2xkQ1NTIiwiY3NzVGV4dCIsIndpbmRvdyIsImdldENvbXB1dGVkU3R5bGUiLCJsaXN0U3R5bGUiLCJpb3NIYWNrcyIsInNlbCIsImRvbVNlbGVjdGlvbiIsInRleHROb2RlIiwibmVhcmJ5VGV4dE5vZGUiLCJ0ZXh0UG9zIiwiZnJhZyIsImNoaWxkU3RhcnQiLCJzdHIiLCJmb3VuZCIsImxhc3RJbmRleE9mIiwiZmluZFRleHRJbkZyYWdtZW50IiwidG9wTm9kZSIsInJlbW92ZUNoaWxkIiwiaW5wdXQiLCJjb21wb3NpdGlvbk5vZGVzIiwidXBkYXRlIiwic2FtZU1hcmt1cCIsInVwZGF0ZUlubmVyIiwidXBkYXRlT3V0ZXJEZWNvIiwibmVlZHNXcmFwIiwib2xkRE9NIiwicGF0Y2hPdXRlckRlY28iLCJjb21wdXRlT3V0ZXJEZWNvIiwic2VsZWN0Tm9kZSIsImRlc2VsZWN0Tm9kZSIsInJlbW92ZSIsInJlbW92ZUF0dHJpYnV0ZSIsImlzQXRvbSIsImRvY1ZpZXdEZXNjIiwic2tpcCIsInBtSXNEZWNvIiwiaW5QYXJlbnQiLCJ0cmFja1dyaXRlcyIsInBhcmVudERPTSIsIm4iLCJyZXN1bHQiLCJkZXNjcyIsIndyaXR0ZW4iLCJjaGlsZERPTSIsInJtIiwiaW5zZXJ0QmVmb3JlIiwiT3V0ZXJEZWNvTGV2ZWwiLCJub0RlY28iLCJ2YWwiLCJjbGFzcyIsIm91dGVyRE9NIiwicHJldkNvbXB1dGVkIiwiY3VyQ29tcHV0ZWQiLCJjdXJET00iLCJ0b0xvd2VyQ2FzZSIsInBhdGNoQXR0cmlidXRlcyIsInNldEF0dHJpYnV0ZSIsInByZXZMaXN0Iiwic3BsaXQiLCJCb29sZWFuIiwiY3VyTGlzdCIsIm0iLCJwcm9wIiwicmVtb3ZlUHJvcGVydHkiLCJhIiwiYiIsImxvY2siLCJwcmVNYXRjaCIsInBhcmVudERlc2MiLCJjdXJEZXNjIiwiZGVzY0kiLCJmSSIsIm1hdGNoZWQiLCJNYXAiLCJtYXRjaGVzIiwib3V0ZXIiLCJzZXQiLCJyZXZlcnNlIiwiZGVzdHJveUJldHdlZW4iLCJzdGFydCIsImtlZXAiLCJkZXB0aCIsIm1heEtlZXAiLCJzcGFubmluZyIsInBvcCIsIm1hcmtEZXNjIiwidGFyZ2V0RGVzYyIsImUiLCJoYXMiLCJkb21Ob2RlIiwiZ2V0IiwibmV4dERPTSIsImFkZEhhY2tOb2RlIiwiY2xhc3NOYW1lIiwiYWx0IiwiaGFjayIsInJlcGxhY2VtZW50Iiwic2VsZWN0aW9uRnJvbURPTSIsIm9yaWdpbiIsImluV2lkZ2V0IiwiJGFuY2hvciIsIiRoZWFkIiwibmVhcmVzdERlc2NOb2RlIiwiYXRTdGFydCIsImlzT25FZGdlIiwic2VsZWN0aW9uQmV0d2VlbiIsImVkaXRvck93bnNTZWxlY3Rpb24iLCJlZGl0YWJsZSIsImhhc0ZvY3VzIiwiaGFzU2VsZWN0aW9uIiwic2VsZWN0aW9uVG9ET00iLCJzeW5jTm9kZVNlbGVjdGlvbiIsIm1vdXNlRG93biIsImFsbG93RGVmYXVsdCIsImN1clNlbCIsImRvbU9ic2VydmVyIiwiY3VycmVudFNlbGVjdGlvbiIsImRlbGF5ZWRTZWxlY3Rpb25TeW5jIiwic2V0Q3VyU2VsZWN0aW9uIiwiZGlzY29ubmVjdFNlbGVjdGlvbiIsImN1cnNvcldyYXBwZXIiLCJpbWciLCJ2aXNpYmxlIiwiZGlzYWJsZWQiLCJzZWxlY3RDdXJzb3JXcmFwcGVyIiwicmVzZXRFZGl0YWJsZUZyb20iLCJyZXNldEVkaXRhYmxlVG8iLCJicm9rZW5TZWxlY3RCZXR3ZWVuVW5lZGl0YWJsZSIsIiRmcm9tIiwidGVtcG9yYXJpbHlFZGl0YWJsZU5lYXIiLCJlbXB0eSIsInJlc2V0RWRpdGFibGUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiaGlkZVNlbGVjdGlvbkd1YXJkIiwiYWRkRXZlbnRMaXN0ZW5lciIsInNldFRpbWVvdXQiLCJyZW1vdmVDbGFzc09uU2VsZWN0aW9uQ2hhbmdlIiwiY29ubmVjdFNlbGVjdGlvbiIsInNldEVkaXRhYmxlIiwid2FzRHJhZ2dhYmxlIiwibGFzdFNlbGVjdGVkVmlld0Rlc2MiLCJjbGVhck5vZGVTZWxlY3Rpb24iLCJoYXNGb2N1c0FuZFNlbGVjdGlvbiIsIm1vdmVTZWxlY3Rpb25CbG9jayIsIiRzaWRlIiwiJHN0YXJ0IiwiYXBwbHkiLCJkaXNwYXRjaCIsInRyIiwic2Nyb2xsSW50b1ZpZXciLCJzZWxlY3RIb3Jpem9udGFsbHkiLCJtb2RzIiwiJHRvIiwiZW5kT2ZUZXh0YmxvY2siLCJ0ZXh0T2Zmc2V0Iiwibm9kZUJlZm9yZSIsIm5vZGVBZnRlciIsIm5vZGVQb3MiLCJub2RlTGVuIiwiaXNJZ25vcmFibGUiLCJza2lwSWdub3JlZE5vZGVzTGVmdCIsIm1vdmVOb2RlIiwibW92ZU9mZnNldCIsImlzQmxvY2tOb2RlIiwic2V0U2VsRm9jdXMiLCJza2lwSWdub3JlZE5vZGVzUmlnaHQiLCJzZWxlY3RWZXJ0aWNhbGx5IiwiYmV5b25kIiwic3RvcE5hdGl2ZUhvcml6b250YWxEZWxldGUiLCJzYW1lUGFyZW50IiwibmV4dE5vZGUiLCJkZWxldGUiLCJzd2l0Y2hFZGl0YWJsZSIsInNlcmlhbGl6ZUZvckNsaXBib2FyZCIsImNvbnRleHQiLCJvcGVuU3RhcnQiLCJvcGVuRW5kIiwiZGVmYXVsdEF0dHJzIiwic2VyaWFsaXplciIsInNjaGVtYSIsImRldGFjaGVkRG9jIiwic2VyaWFsaXplRnJhZ21lbnQiLCJ3cmFwcGVycyIsIndyYXBNYXAiLCJ3cmFwcGVyIiwiSlNPTiIsInN0cmluZ2lmeSIsInRleHRCZXR3ZWVuIiwicGFyc2VGcm9tQ2xpcGJvYXJkIiwiaHRtbCIsInBsYWluVGV4dCIsIiRjb250ZXh0IiwiaW5Db2RlIiwiYXNUZXh0IiwicmVwbGFjZSIsInBhcnNlZCIsImZvckVhY2giLCJibG9jayIsInNlcmlhbGl6ZU5vZGUiLCJtZXRhcyIsImZpcnN0VGFnIiwibWFwIiwiam9pbiIsImlubmVySFRNTCIsInF1ZXJ5U2VsZWN0b3IiLCJyZWFkSFRNTCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJ0ZXh0Q29udGVudCIsInJlcGxhY2VDaGlsZCIsInJlc3RvcmVSZXBsYWNlZFNwYWNlcyIsImNvbnRleHROb2RlIiwic2xpY2VEYXRhIiwiZ2V0QXR0cmlidXRlIiwicGFyc2VyIiwicGFyc2VTbGljZSIsInJ1bGVGcm9tTm9kZSIsImlubGluZVBhcmVudHMiLCJhcnJheSIsInBhcnNlIiwiaGFzUmVxdWlyZWRBdHRycyIsImFkZENvbnRleHQiLCJjbG9zZVNsaWNlIiwiZnJhZ21lbnQiLCJsYXN0V3JhcCIsIm1hdGNoIiwiY29udGVudE1hdGNoQXQiLCJpbkxhc3QiLCJmaW5kV3JhcHBpbmciLCJhZGRUb1NpYmxpbmciLCJjbG9zZVJpZ2h0Iiwid3JhcHBlZCIsIndpdGhXcmFwcGVycyIsIm1hdGNoVHlwZSIsIm5vcm1hbGl6ZVNpYmxpbmdzIiwiaXNvbGF0aW5nIiwic2libGluZyIsImlubmVyIiwiYXBwZW5kIiwiZmlsbEJlZm9yZSIsImNsb3NlUmFuZ2UiLCJ0aGVhZCIsInRib2R5IiwidGZvb3QiLCJjYXB0aW9uIiwiY29sZ3JvdXAiLCJjb2wiLCJ0ZCIsInRoIiwiX2RldGFjaGVkRG9jIiwiaW1wbGVtZW50YXRpb24iLCJjcmVhdGVIVE1MRG9jdW1lbnQiLCJoYW5kbGVycyIsImVkaXRIYW5kbGVycyIsIklucHV0U3RhdGUiLCJzaGlmdEtleSIsImxhc3RLZXlDb2RlIiwibGFzdEtleUNvZGVUaW1lIiwibGFzdENsaWNrIiwidGltZSIsImxhc3RTZWxlY3Rpb25PcmlnaW4iLCJsYXN0U2VsZWN0aW9uVGltZSIsImxhc3RJT1NFbnRlciIsImxhc3RJT1NFbnRlckZhbGxiYWNrVGltZW91dCIsImxhc3RBbmRyb2lkRGVsZXRlIiwiY29tcG9zaW5nVGltZW91dCIsImNvbXBvc2l0aW9uRW5kZWRBdCIsImRvbUNoYW5nZUNvdW50IiwiZXZlbnRIYW5kbGVycyIsInNldFNlbGVjdGlvbk9yaWdpbiIsIkRhdGUiLCJub3ciLCJlbnN1cmVMaXN0ZW5lcnMiLCJjdXJyZW50SGFuZGxlcnMiLCJydW5DdXN0b21IYW5kbGVyIiwiaGFuZGxlciIsImRlZmF1bHRQcmV2ZW50ZWQiLCJldmVudEJlbG9uZ3NUb1ZpZXciLCJidWJibGVzIiwiZXZlbnRDb29yZHMiLCJjbGllbnRYIiwiY2xpZW50WSIsInJ1bkhhbmRsZXJPbkNvbnRleHQiLCJwcm9wTmFtZSIsIiRwb3MiLCJ1cGRhdGVTZWxlY3Rpb24iLCJmb2N1c2VkIiwic2V0TWV0YSIsImhhbmRsZURvdWJsZUNsaWNrIiwiaGFuZGxlVHJpcGxlQ2xpY2siLCJidXR0b24iLCJkZWZhdWx0VHJpcGxlQ2xpY2siLCJmb3JjZURPTUZsdXNoIiwiZW5kQ29tcG9zaXRpb24iLCJrZXlkb3duIiwiX2V2ZW50IiwiaW5Pck5lYXJDb21wb3NpdGlvbiIsImZvcmNlRmx1c2giLCJjdHJsS2V5IiwiYWx0S2V5IiwibWV0YUtleSIsImdldE1vZHMiLCJwYXJlbnRPZmZzZXQiLCJzYWZhcmlEb3duQXJyb3dCdWciLCJjYXB0dXJlS2V5RG93biIsInByZXZlbnREZWZhdWx0Iiwia2V5dXAiLCJrZXlwcmVzcyIsImNoYXJDb2RlIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwiaW5zZXJ0VGV4dCIsInNlbGVjdE5vZGVNb2RpZmllciIsIm1vdXNlZG93biIsImZsdXNoZWQiLCJjbGljayIsImR5IiwiaXNOZWFyIiwiZG9uZSIsIk1vdXNlRG93biIsInRhcmdldFBvcyIsIm1pZ2h0RHJhZyIsInN0YXJ0RG9jIiwibm9kZUF0Iiwic2VsZWN0YWJsZSIsImFkZEF0dHIiLCJzZXRVbmVkaXRhYmxlIiwidXAiLCJiaW5kIiwibW92ZSIsInNlbGVjdGVkTm9kZSIsInNlbGVjdEF0Iiwic2VsZWN0Q2xpY2tlZE5vZGUiLCJzZWxlY3RDbGlja2VkTGVhZiIsImhhbmRsZVNpbmdsZUNsaWNrIiwiYWJzIiwiYnV0dG9ucyIsInRpbWVTdGFtcCIsInRvdWNoZG93biIsImNvbnRleHRtZW51IiwidGltZW91dENvbXBvc2l0aW9uIiwic2NoZWR1bGVDb21wb3NlRW5kIiwiZGVsYXkiLCJjbGVhclRpbWVvdXQiLCJjbGVhckNvbXBvc2l0aW9uIiwidGltZXN0YW1wRnJvbUN1c3RvbUV2ZW50IiwiZm9yY2VVcGRhdGUiLCJmbHVzaGluZ1Nvb24iLCJjb21wb3NpdGlvbnN0YXJ0IiwiY29tcG9zaXRpb251cGRhdGUiLCJmbHVzaCIsInN0b3JlZE1hcmtzIiwic29tZSIsImluY2x1c2l2ZSIsIm1hcmtDdXJzb3IiLCJjb21wb3NpdGlvbmVuZCIsImJyb2tlbkNsaXBib2FyZEFQSSIsImRvUGFzdGUiLCJzaW5nbGVOb2RlIiwic2xpY2VTaW5nbGVOb2RlIiwicmVwbGFjZVNlbGVjdGlvbldpdGgiLCJyZXBsYWNlU2VsZWN0aW9uIiwiZGF0YSIsImNsaXBib2FyZERhdGEiLCJjbGVhckRhdGEiLCJzZXREYXRhIiwic2VsZWN0Tm9kZUNvbnRlbnRzIiwiYmx1ciIsImNhcHR1cmVDb3B5IiwiZGVsZXRlU2VsZWN0aW9uIiwicGFzdGUiLCJnZXREYXRhIiwiY2FwdHVyZVBhc3RlIiwiRHJhZ2dpbmciLCJkcmFnQ29weU1vZGlmaWVyIiwiZHJhZ3N0YXJ0IiwiZGF0YVRyYW5zZmVyIiwiZWZmZWN0QWxsb3dlZCIsImRyYWdnaW5nIiwiZHJhZ2VuZCIsImRyYWdvdmVyIiwiZHJhZ2VudGVyIiwiZHJvcCIsImV2ZW50UG9zIiwiJG1vdXNlIiwiaW5zZXJ0UG9zIiwibWFwcGluZyIsImlzTm9kZSIsImJlZm9yZUluc2VydCIsInJlcGxhY2VSYW5nZVdpdGgiLCJyZXBsYWNlUmFuZ2UiLCJtYXBzIiwiX2Zyb20iLCJfdG8iLCJfbmV3RnJvbSIsIm5ld1RvIiwicmVsYXRlZFRhcmdldCIsImNsZWFyIiwiYmVmb3JlaW5wdXQiLCJpbnB1dFR5cGUiLCJmbHVzaFNvb24iLCIkY3Vyc29yIiwiY29tcGFyZU9ianMiLCJXaWRnZXRUeXBlIiwibm9TcGVjIiwic3BhbiIsIm9sZE9mZnNldCIsImRlbGV0ZWQiLCJtYXBSZXN1bHQiLCJEZWNvcmF0aW9uIiwidmFsaWQiLCJvdGhlciIsIklubGluZVR5cGUiLCJpbmNsdXNpdmVTdGFydCIsImluY2x1c2l2ZUVuZCIsIk5vZGVUeXBlIiwiZmluZEluZGV4Iiwibm9uZSIsIkRlY29yYXRpb25TZXQiLCJsb2NhbCIsImRlY29yYXRpb25zIiwiYnVpbGRUcmVlIiwiZmluZCIsInByZWRpY2F0ZSIsImZpbmRJbm5lciIsImNoaWxkT2ZmIiwib3B0aW9ucyIsIm1hcElubmVyIiwibmV3TG9jYWwiLCJtYXBwZWQiLCJvblJlbW92ZSIsIm9sZENoaWxkcmVuIiwic2hpZnQiLCJvbGRTdGFydCIsIm9sZEVuZCIsIm5ld1N0YXJ0IiwibmV3RW5kIiwiZFNpemUiLCJtdXN0UmVidWlsZCIsImZyb21Mb2NhbCIsInRvTG9jYWwiLCJjaGlsZE9mZnNldCIsImNoaWxkTm9kZSIsIm1heWJlQ2hpbGQiLCJnYXRoZXIiLCJtYXBBbmRHYXRoZXJSZW1haW5pbmdEZWNvcmF0aW9ucyIsImJ1aWx0IiwiYnlQb3MiLCJtYXBDaGlsZHJlbiIsImFkZElubmVyIiwiYmFzZU9mZnNldCIsInRha2VTcGFuc0Zvck5vZGUiLCJtb3ZlU3BhbnMiLCJ3aXRob3V0TnVsbHMiLCJjb25jYXQiLCJyZW1vdmVJbm5lciIsInJlbW92ZWQiLCJkZWMiLCJsb2NhbFNldCIsIkRlY29yYXRpb25Hcm91cCIsInJlbW92ZU92ZXJsYXAiLCJsb2NhbHNJbm5lciIsImlzIiwibWVtYmVycyIsIm1hcHBlZERlY29zIiwibWVtYmVyIiwic29ydGVkIiwic3BhbnMiLCJoYXNOdWxscyIsImxvY2FsU3RhcnQiLCJzdWJ0cmVlIiwid29ya2luZyIsImluc2VydEFoZWFkIiwidmlld0RlY29yYXRpb25zIiwib2JzZXJ2ZU9wdGlvbnMiLCJjaGlsZExpc3QiLCJjaGFyYWN0ZXJEYXRhIiwiY2hhcmFjdGVyRGF0YU9sZFZhbHVlIiwiYXR0cmlidXRlcyIsImF0dHJpYnV0ZU9sZFZhbHVlIiwidXNlQ2hhckRhdGEiLCJTZWxlY3Rpb25TdGF0ZSIsIkRPTU9ic2VydmVyIiwiaGFuZGxlRE9NQ2hhbmdlIiwicXVldWUiLCJvYnNlcnZlciIsIm9uQ2hhckRhdGEiLCJzdXBwcmVzc2luZ1NlbGVjdGlvblVwZGF0ZXMiLCJNdXRhdGlvbk9ic2VydmVyIiwibXV0YXRpb25zIiwicmVtb3ZlZE5vZGVzIiwicHJldlZhbHVlIiwib25TZWxlY3Rpb25DaGFuZ2UiLCJvYnNlcnZlIiwidGFrZSIsInRha2VSZWNvcmRzIiwiZGlzY29ubmVjdCIsInN1cHByZXNzU2VsZWN0aW9uVXBkYXRlcyIsImlnbm9yZVNlbGVjdGlvbkNoYW5nZSIsImNvbnRhaW5lciIsImNvbW1vbkFuY2VzdG9yQ29udGFpbmVyIiwibmV3U2VsIiwidHlwZU92ZXIiLCJhZGRlZCIsInJlZ2lzdGVyTXV0YXRpb24iLCJicnMiLCJjc3NDaGVja2VkIiwid2hpdGVTcGFjZSIsImNvbnNvbGUiLCJhdHRyaWJ1dGVOYW1lIiwiYWRkZWROb2RlcyIsIkFycmF5IiwicmVzb2x2ZVNlbGVjdGlvbiIsInBhcnNlZFNlbCIsInNraXBDbG9zaW5nQW5kT3BlbmluZyIsImZyb21FbmQiLCJtYXlPcGVuIiwiaW5kZXhBZnRlciIsIkVkaXRvclZpZXciLCJwbGFjZSIsIl9yb290IiwibW91bnRlZCIsInByZXZEaXJlY3RQbHVnaW5zIiwicGx1Z2luVmlld3MiLCJfcHJvcHMiLCJkaXJlY3RQbHVnaW5zIiwicGx1Z2lucyIsImNoZWNrU3RhdGVDb21wb25lbnQiLCJtb3VudCIsImdldEVkaXRhYmxlIiwidXBkYXRlQ3Vyc29yV3JhcHBlciIsImJ1aWxkTm9kZVZpZXdzIiwiY29tcHV0ZURvY0RlY28iLCIkYmVmb3JlIiwic2hhcmVkIiwic2hhcmVkRGVwdGgiLCJmcm9tXyIsInRvXyIsInRvcE1hdGNoIiwidG9wT3BlbiIsImZpbmRQb3NpdGlvbnMiLCJwYXJzZUJldHdlZW4iLCJwcmVmZXJyZWRQb3MiLCJwcmVmZXJyZWRTaWRlIiwiY29tcGFyZSIsImNoYW5nZSIsImZpbmREaWZmU3RhcnQiLCJlbmRBIiwiZW5kQiIsImZpbmREaWZmRW5kIiwiZmluZERpZmYiLCJuZXh0U2VsIiwicmVzb2x2ZU5vQ2FjaGUiLCIkZnJvbUEiLCJpbmxpbmVDaGFuZ2UiLCJvbGQiLCIkbmV3U3RhcnQiLCIkbmV3RW5kIiwiJG5leHQiLCJsb29rc0xpa2VKb2luIiwibWFya0NoYW5nZSIsImNoRnJvbSIsImNoVG8iLCJtYXJrc0Fjcm9zcyIsImN1ck1hcmtzIiwicHJldk1hcmtzIiwicmVtb3ZlRnJvbVNldCIsImFkZFRvU2V0IiwidXBkYXRlZCIsImlzTWFya0NoYW5nZSIsImFkZE1hcmsiLCJyZW1vdmVNYXJrIiwiZW5zdXJlTWFya3MiLCJyZWFkRE9NQ2hhbmdlIiwiaW5pdElucHV0IiwidXBkYXRlUGx1Z2luVmlld3MiLCJoYW5kbGVET01FdmVudHMiLCJ1cGRhdGVTdGF0ZUlubmVyIiwic2V0UHJvcHMiLCJyZWNvbmZpZ3VyZWQiLCJyZWRyYXciLCJ1cGRhdGVTZWwiLCJuQSIsIm5CIiwiY2hhbmdlZE5vZGVWaWV3cyIsInNjcm9sbCIsInNjcm9sbFRvU2VsZWN0aW9uIiwidXBkYXRlRG9jIiwib2xkU2Nyb2xsUG9zIiwib3ZlcmZsb3dBbmNob3IiLCJyZWZET00iLCJyZWZUb3AiLCJpbm5lckhlaWdodCIsImxvY2FsUmVjdCIsInN0b3JlU2Nyb2xsUG9zIiwiZm9yY2VTZWxVcGRhdGUiLCJzZWwxIiwic2VsMiIsInNlbGVjdGlvbkNvbnRleHRDaGFuZ2VkIiwiY2hyb21lS2x1ZGdlIiwiYW5jaG9ySW5SaWdodFBsYWNlIiwibmV3UmVmVG9wIiwicmVzZXRTY3JvbGxQb3MiLCJkZXN0cm95UGx1Z2luVmlld3MiLCJwcmV2U3RhdGUiLCJwbHVnaW5WaWV3IiwicGx1Z2luIiwic2V0QWN0aXZlIiwic3RvcmVkIiwicHJldmVudFNjcm9sbCIsImZvY3VzUHJldmVudFNjcm9sbCIsImNhY2hlZCIsImdldFByb3RvdHlwZU9mIiwiZG9tQXRQb3MiLCJwb3NBdERPTSIsIm5lYXJlc3QiLCJib3hlcyIsImVuZE9mVGV4dGJsb2NrVmVydGljYWwiLCJtb2RpZnkiLCJvbGRSYW5nZSIsIm9sZE5vZGUiLCJvbGRPZmYiLCJvbGRCaWRpTGV2ZWwiLCJjYXJldEJpZGlMZXZlbCIsImVuZE9mVGV4dGJsb2NrSG9yaXpvbnRhbCIsImRlc3Ryb3lJbnB1dCIsImlzRGVzdHJveWVkIiwiZGlzcGF0Y2hFdmVudCIsImRpc3BhdGNoVHJhbnNhY3Rpb24iLCJjb250ZW50ZWRpdGFibGUiLCJ0cmFuc2xhdGUiLCJhdHRyIiwiZmlsdGVyVHJhbnNhY3Rpb24iLCJhcHBlbmRUcmFuc2FjdGlvbiIsImJyb2tlbk1vZGlmaWVyTmFtZXMiLCJub3JtYWxpemVLZXlOYW1lIiwiY3RybCIsIm1ldGEiLCJwYXJ0cyIsIm1vZCIsIkVycm9yIiwibW9kaWZpZXJzIiwia2V5ZG93bkhhbmRsZXIiLCJiaW5kaW5ncyIsIm5vcm1hbGl6ZSIsImJhc2VOYW1lIiwia2V5TmFtZSIsImlzQ2hhciIsImRpcmVjdCIsImNoYXJDb2RlQXQiLCJmcm9tQ29kZSIsIndpdGhTaGlmdCIsImpvaW5CYWNrd2FyZCIsIiRjdXQiLCJmaW5kQ3V0QmVmb3JlIiwiYmxvY2tSYW5nZSIsImxpZnQiLCJkZWxldGVCYXJyaWVyIiwidGV4dGJsb2NrQXQiLCJkZWxTdGVwIiwic3RlcCIsIm9ubHkiLCJzZWxlY3ROb2RlQmFja3dhcmQiLCJqb2luRm9yd2FyZCIsImZpbmRDdXRBZnRlciIsInNlbGVjdE5vZGVGb3J3YXJkIiwibmV3bGluZUluQ29kZSIsImRlZmF1bHRCbG9ja0F0IiwiZWRnZUNvdW50IiwiZWRnZSIsImV4aXRDb2RlIiwiYWJvdmUiLCJjYW5SZXBsYWNlV2l0aCIsInJlcGxhY2VXaXRoIiwiY3JlYXRlQW5kRmlsbCIsImNyZWF0ZVBhcmFncmFwaE5lYXIiLCJpbnNlcnQiLCJsaWZ0RW1wdHlCbG9jayIsImNvbm4iLCJjb21wYXRpYmxlQ29udGVudCIsImNhblJlcGxhY2UiLCJjbGVhckluY29tcGF0aWJsZSIsImpvaW5NYXliZUNsZWFyIiwiY2FuRGVsQWZ0ZXIiLCJ2YWxpZEVuZCIsImpvaW5BdCIsInNlbEFmdGVyIiwiYXQiLCJhZnRlclRleHQiLCJhZnRlckRlcHRoIiwic2VsZWN0VGV4dGJsb2NrU2lkZSIsInNlbGVjdFRleHRibG9ja1N0YXJ0Iiwic2VsZWN0VGV4dGJsb2NrRW5kIiwic2V0QmxvY2tUeXBlIiwiYXBwbGljYWJsZSIsIm5vZGVzQmV0d2VlbiIsImhhc01hcmt1cCIsImNoYWluQ29tbWFuZHMiLCJjb21tYW5kcyIsImJhY2tzcGFjZSIsImRlbCIsInBjQmFzZUtleW1hcCIsImRlZmx0IiwidHlwZXMiLCJjYW4iLCIkZmlyc3QiLCJzZXROb2RlTWFya3VwIiwibWFjQmFzZUtleW1hcCIsImNyZWF0ZUNoYWluYWJsZVN0YXRlIiwiY29uZmlnIiwidHJhbnNhY3Rpb24iLCJhcHBseVRyYW5zYWN0aW9uIiwicmVjb25maWd1cmUiLCJ0b0pTT04iLCJvcyIsIkNvbW1hbmRNYW5hZ2VyIiwiZWRpdG9yIiwicmF3Q29tbWFuZHMiLCJleHRlbnNpb25NYW5hZ2VyIiwiY3VzdG9tU3RhdGUiLCJoYXNDdXN0b21TdGF0ZSIsImJ1aWxkUHJvcHMiLCJmcm9tRW50cmllcyIsImVudHJpZXMiLCJjb21tYW5kIiwiYXJncyIsImNhbGxiYWNrIiwiZ2V0TWV0YSIsImNoYWluIiwiY3JlYXRlQ2hhaW4iLCJjcmVhdGVDYW4iLCJzdGFydFRyIiwic2hvdWxkRGlzcGF0Y2giLCJjYWxsYmFja3MiLCJoYXNTdGFydFRyYW5zYWN0aW9uIiwicnVuIiwiZXZlcnkiLCJzZXRTdG9yZWRNYXJrcyIsImdldEV4dGVuc2lvbkZpZWxkIiwiZXh0ZW5zaW9uIiwiZmllbGQiLCJzcGxpdEV4dGVuc2lvbnMiLCJleHRlbnNpb25zIiwiYmFzZUV4dGVuc2lvbnMiLCJub2RlRXh0ZW5zaW9ucyIsIm1hcmtFeHRlbnNpb25zIiwiZ2V0QXR0cmlidXRlc0Zyb21FeHRlbnNpb25zIiwiZXh0ZW5zaW9uQXR0cmlidXRlcyIsIm5vZGVBbmRNYXJrRXh0ZW5zaW9ucyIsImRlZmF1bHRBdHRyaWJ1dGUiLCJyZW5kZXJlZCIsInJlbmRlckhUTUwiLCJwYXJzZUhUTUwiLCJrZWVwT25TcGxpdCIsImlzUmVxdWlyZWQiLCJhZGRHbG9iYWxBdHRyaWJ1dGVzIiwic3RvcmFnZSIsImdsb2JhbEF0dHJpYnV0ZSIsImF0dHJpYnV0ZSIsImFkZEF0dHJpYnV0ZXMiLCJtZXJnZWRBdHRyIiwiZ2V0Tm9kZVR5cGUiLCJuYW1lT3JUeXBlIiwibWVyZ2VBdHRyaWJ1dGVzIiwib2JqZWN0cyIsIml0ZW0iLCJyZWR1Y2UiLCJpdGVtcyIsIm1lcmdlZEF0dHJpYnV0ZXMiLCJnZXRSZW5kZXJlZEF0dHJpYnV0ZXMiLCJub2RlT3JNYXJrIiwiaXNGdW5jdGlvbiIsImNhbGxPclJldHVybiIsImluamVjdEV4dGVuc2lvbkF0dHJpYnV0ZXNUb1BhcnNlUnVsZSIsImdldEF0dHJzIiwib2xkQXR0cmlidXRlcyIsIm5ld0F0dHJpYnV0ZXMiLCJOdW1iZXIiLCJmcm9tU3RyaW5nIiwiY2xlYW5VcFNjaGVtYUl0ZW0iLCJpc0VtcHR5T2JqZWN0IiwiZ2V0U2NoZW1hVHlwZUJ5TmFtZSIsImlzRXh0ZW5zaW9uUnVsZXNFbmFibGVkIiwiZW5hYmxlZCIsImlzQXJyYXkiLCJlbmFibGVkRXh0ZW5zaW9uIiwiaXNSZWdFeHAiLCJ0b1N0cmluZyIsIklucHV0UnVsZSIsInJ1biQxIiwiX2EiLCJydWxlcyIsInRleHRCZWZvcmUiLCJtYXhNYXRjaCIsIl9iIiwiX2MiLCJ0b1RleHQiLCJnZXRUZXh0Q29udGVudEZyb21Ob2RlcyIsImlucHV0UnVsZU1hdGNoIiwiaW5jbHVkZXMiLCJ3YXJuIiwiaW5wdXRSdWxlTWF0Y2hlckhhbmRsZXIiLCJzdGVwcyIsInRyYW5zZm9ybSIsImlucHV0UnVsZXNQbHVnaW4iLCJpbml0Iiwic2VsZWN0aW9uU2V0IiwiZG9jQ2hhbmdlZCIsImhhbmRsZVRleHRJbnB1dCIsImhhbmRsZUtleURvd24iLCJpc0lucHV0UnVsZXMiLCJQYXN0ZVJ1bGUiLCJwYXN0ZVJ1bGVzUGx1Z2luIiwiZHJhZ1NvdXJjZUVsZW1lbnQiLCJpc1Bhc3RlZEZyb21Qcm9zZU1pcnJvciIsImlzRHJvcHBlZEZyb21Qcm9zZU1pcnJvciIsImhhbmRsZURyYWdzdGFydCIsInBhcmVudEVsZW1lbnQiLCJ0cmFuc2FjdGlvbnMiLCJvbGRTdGF0ZSIsImlzUGFzdGUiLCJpc0Ryb3AiLCJjaGFpbmFibGVTdGF0ZSIsInJlc29sdmVkRnJvbSIsInJlc29sdmVkVG8iLCJtYXRjaEFsbCIsInBhc3RlUnVsZU1hdGNoIiwicGFzdGVSdWxlTWF0Y2hlckhhbmRsZXIiLCJFeHRlbnNpb25NYW5hZ2VyIiwic3BsaXR0YWJsZU1hcmtzIiwiYWxsQXR0cmlidXRlcyIsImZpZWxkcyIsImV4dGVuZE5vZGVTY2hlbWEiLCJncm91cCIsImF0b20iLCJkZWZpbmluZyIsImV4dGVuc2lvbkF0dHJpYnV0ZSIsInBhcnNlRE9NIiwiSFRNTEF0dHJpYnV0ZXMiLCJyZW5kZXJUZXh0IiwiZXh0ZW5kTWFya1NjaGVtYSIsImV4Y2x1ZGVzIiwiZ2V0U2NoZW1hQnlSZXNvbHZlZEV4dGVuc2lvbnMiLCJleHRlbnNpb25TdG9yYWdlIiwib25CZWZvcmVDcmVhdGUiLCJvbiIsIm9uQ3JlYXRlIiwib25VcGRhdGUiLCJvblNlbGVjdGlvblVwZGF0ZSIsIm9uVHJhbnNhY3Rpb24iLCJvbkZvY3VzIiwib25CbHVyIiwib25EZXN0cm95IiwicmVzb2x2ZWRFeHRlbnNpb25zIiwiZmxhdHRlbiIsImR1cGxpY2F0ZWROYW1lcyIsImZpbHRlcmVkIiwiZWwiLCJTZXQiLCJmaW5kRHVwbGljYXRlcyIsImFkZEV4dGVuc2lvbnMiLCJmbGF0IiwicHJpb3JpdHlBIiwicHJpb3JpdHlCIiwiYWRkQ29tbWFuZHMiLCJpbnB1dFJ1bGVzIiwicGFzdGVSdWxlcyIsImFsbFBsdWdpbnMiLCJhZGRLZXlib2FyZFNob3J0Y3V0cyIsImtleU1hcFBsdWdpbiIsInNob3J0Y3V0IiwibWV0aG9kIiwiYWRkSW5wdXRSdWxlcyIsImVuYWJsZUlucHV0UnVsZXMiLCJhZGRQYXN0ZVJ1bGVzIiwiZW5hYmxlUGFzdGVSdWxlcyIsImFkZFByb3NlTWlycm9yUGx1Z2lucyIsInByb3NlTWlycm9yUGx1Z2lucyIsImFkZE5vZGVWaWV3IiwiZ2V0UG9zIiwiaXNQbGFpbk9iamVjdCIsImdldFR5cGUiLCJtZXJnZURlZXAiLCJvdXRwdXQiLCJFeHRlbnNpb24iLCJkZWZhdWx0T3B0aW9ucyIsImFkZE9wdGlvbnMiLCJjb25maWd1cmUiLCJleHRlbmRlZENvbmZpZyIsImdldFRleHRCZXR3ZWVuIiwic3RhcnROb2RlIiwiYmxvY2tTZXBhcmF0b3IiLCJ0ZXh0U2VyaWFsaXplcnMiLCJzZXBhcmF0ZWQiLCJ0ZXh0U2VyaWFsaXplciIsImdldFRleHRTZXJpYWxpemVyc0Zyb21TY2hlbWEiLCJDbGlwYm9hcmRUZXh0U2VyaWFsaXplciIsImNsaXBib2FyZFRleHRTZXJpYWxpemVyIiwicmFuZ2VzIiwib2JqZWN0SW5jbHVkZXMiLCJvYmplY3QxIiwib2JqZWN0MiIsInN0cmljdCIsImZpbmRNYXJrSW5TZXQiLCJpc01hcmtJblNldCIsImdldE1hcmtSYW5nZSIsImNoaWxkQWZ0ZXIiLCJjaGlsZEJlZm9yZSIsInN0YXJ0SW5kZXgiLCJzdGFydFBvcyIsImVuZEluZGV4IiwiZW5kUG9zIiwiaXNJblNldCIsImdldE1hcmtUeXBlIiwibWluTWF4IiwicmVzb2x2ZUZvY3VzUG9zaXRpb24iLCJwb3NpdGlvbiIsInNlbGVjdGlvbkF0U3RhcnQiLCJzZWxlY3Rpb25BdEVuZCIsIm1pblBvcyIsIm1heFBvcyIsImlzaU9TIiwiZWxlbWVudEZyb21TdHJpbmciLCJ3cmFwcGVkVmFsdWUiLCJET01QYXJzZXIiLCJwYXJzZUZyb21TdHJpbmciLCJjcmVhdGVOb2RlRnJvbUNvbnRlbnQiLCJwYXJzZU9wdGlvbnMiLCJub2RlRnJvbUpTT04iLCJlcnJvciIsImlzTWFjT1MiLCJpc05vZGVBY3RpdmUiLCJ0eXBlT3JOYW1lIiwibm9kZVJhbmdlcyIsInJlbGF0aXZlRnJvbSIsInJlbGF0aXZlVG8iLCJzZWxlY3Rpb25SYW5nZSIsIm1hdGNoZWROb2RlUmFuZ2VzIiwibm9kZVJhbmdlIiwic3VtIiwiZ2V0U2NoZW1hVHlwZU5hbWVCeU5hbWUiLCJkZWxldGVQcm9wcyIsInByb3BPclByb3BzIiwibmV3T2JqIiwiY3JlYXRlRG9jdW1lbnQiLCJnZXRNYXJrQXR0cmlidXRlcyIsIm1hcmtJdGVtIiwiZ2V0U3BsaXR0ZWRBdHRyaWJ1dGVzIiwidHlwZU5hbWUiLCJmaWx0ZXJlZE1hcmtzIiwiZmluZFBhcmVudE5vZGUiLCJmaW5kUGFyZW50Tm9kZUNsb3Nlc3RUb1BvcyIsImlzTGlzdCIsImpvaW5MaXN0QmFja3dhcmRzIiwibGlzdFR5cGUiLCJsaXN0Iiwiam9pbkxpc3RGb3J3YXJkcyIsImlzTWFya0FjdGl2ZSIsIm1hcmtSYW5nZXMiLCJtYXRjaGVkUmFuZ2UiLCJtYXJrUmFuZ2UiLCJleGNsdWRlZFJhbmdlIiwiZnJlZXplIiwiX19wcm90b19fIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiY2xlYXJDb250ZW50IiwiZW1pdFVwZGF0ZSIsInNldENvbnRlbnQiLCJjbGVhck5vZGVzIiwiJG1hcHBlZEZyb20iLCIkbWFwcGVkVG8iLCJ0YXJnZXRMaWZ0RGVwdGgiLCJkZWZhdWx0VHlwZSIsImZuIiwiZGVsZXRlTm9kZSIsImRlbGV0ZVJhbmdlIiwia2V5Ym9hcmRTaG9ydGN1dCIsImV4dGVuZE1hcmtSYW5nZSIsIm5ld1NlbGVjdGlvbiIsImRlbGF5ZWRGb2N1cyIsInN1YnN0cmluZyIsImlzQ2xhc3MiLCJpc09iamVjdCIsImlzU2FtZVNlbGVjdGlvbiIsImluc2VydENvbnRlbnQiLCJpbnNlcnRDb250ZW50QXQiLCJpc09ubHlUZXh0Q29udGVudCIsImlzT25seUJsb2NrQ29udGVudCIsInN0YXJ0c1dpdGgiLCJjaGVjayIsInN0YXJ0TGVuIiwibGFzdCIsInNlbGVjdGlvblRvSW5zZXJ0aW9uRW5kIiwiS2V5Ym9hcmRFdmVudCIsImNhbmNlbGFibGUiLCJjYXB0dXJlZFRyYW5zYWN0aW9uIiwiY2FwdHVyZVRyYW5zYWN0aW9uIiwibmV3U3RlcCIsIm1heWJlU3RlcCIsImxpZnRMaXN0SXRlbSIsIml0ZW1UeXBlIiwiZW5kT2ZMaXN0IiwibGlmdFRvT3V0ZXJMaXN0IiwiaW5kZXhCZWZvcmUiLCJsaWZ0T3V0T2ZMaXN0IiwicmVzZXRBdHRyaWJ1dGVzIiwibWFya1R5cGUiLCJzY2hlbWFUeXBlIiwic2VsZWN0QWxsIiwic2V0VGV4dFNlbGVjdGlvbiIsInNlbGVjdFBhcmVudE5vZGUiLCJzYW1lIiwic2V0TWFyayIsImFkZFN0b3JlZE1hcmsiLCJ0cmltbWVkRnJvbSIsInRyaW1tZWRUbyIsInNldE5vZGUiLCJ1cGRhdGVkU3RhdGUiLCJzZXROb2RlU2VsZWN0aW9uIiwicmVzb2x2ZWRQb3MiLCJyZXNvbHZlZEVuZCIsInNpbmtMaXN0SXRlbSIsIm5lc3RlZEJlZm9yZSIsInNwbGl0QmxvY2siLCJrZWVwTWFya3MiLCJkZWZhdWx0QmxvY2tBdCQxIiwic3BsaXRMaXN0SXRlbSIsImdyYW5kUGFyZW50IiwiZGVwdGhCZWZvcmUiLCJkZXB0aEFmdGVyIiwibmV3TmV4dFR5cGVBdHRyaWJ1dGVzIiwibmV4dFR5cGUiLCJjb250ZW50TWF0Y2giLCJuZXdUeXBlQXR0cmlidXRlcyIsInRvZ2dsZUxpc3QiLCJsaXN0VHlwZU9yTmFtZSIsIml0ZW1UeXBlT3JOYW1lIiwicGFyZW50TGlzdCIsInZhbGlkQ29udGVudCIsIndyYXBJbkxpc3QiLCJ0b2dnbGVNYXJrIiwiZXh0ZW5kRW1wdHlNYXJrUmFuZ2UiLCJ1bnNldE1hcmsiLCJ0b2dnbGVOb2RlIiwidG9nZ2xlVHlwZU9yTmFtZSIsInRvZ2dsZVR5cGUiLCJ0b2dnbGVXcmFwIiwid3JhcEluIiwidW5kb0lucHV0UnVsZSIsInVuZG9hYmxlIiwiZ2V0U3RhdGUiLCJ0b1VuZG8iLCJpbnZlcnQiLCJkb2NzIiwidW5zZXRBbGxNYXJrcyIsInJlbW92ZVN0b3JlZE1hcmsiLCJ1cGRhdGVBdHRyaWJ1dGVzIiwid3JhcHBpbmciLCJkb0pvaW4iLCJvdXRlclJhbmdlIiwiJGluc2VydCIsImpvaW5CZWZvcmUiLCJzcGxpdERlcHRoIiwic3BsaXRQb3MiLCJkb1dyYXBJbkxpc3QiLCJDb21tYW5kcyIsIkVkaXRhYmxlIiwiRm9jdXNFdmVudHMiLCJpc0ZvY3VzZWQiLCJLZXltYXAiLCJoYW5kbGVCYWNrc3BhY2UiLCJpc0F0U3RhcnQiLCJoYW5kbGVEZWxldGUiLCJiYXNlS2V5bWFwIiwiRW50ZXIiLCJCYWNrc3BhY2UiLCJEZWxldGUiLCJwY0tleW1hcCIsIm1hY0tleW1hcCIsIm5ld1N0YXRlIiwiYWxsRnJvbSIsImFsbEVuZCIsImFsbFdhc1NlbGVjdGVkIiwiaXNFbXB0eSIsIlRhYmluZGV4IiwiaXNFZGl0YWJsZSIsInRhYmluZGV4IiwiRWRpdG9yIiwiZW1pdCIsInJlbW92ZUFsbExpc3RlbmVycyIsImluamVjdENTUyIsImluamVjdE5vbmNlIiwiYXV0b2ZvY3VzIiwiZWRpdG9yUHJvcHMiLCJlbmFibGVDb3JlRXh0ZW5zaW9ucyIsImlzQ2FwdHVyaW5nVHJhbnNhY3Rpb24iLCJzZXRPcHRpb25zIiwiY3JlYXRlRXh0ZW5zaW9uTWFuYWdlciIsImNyZWF0ZUNvbW1hbmRNYW5hZ2VyIiwiY3JlYXRlU2NoZW1hIiwiY3JlYXRlVmlldyIsImNvbW1hbmRNYW5hZ2VyIiwiY3NzIiwibm9uY2UiLCJ0aXBUYXBTdHlsZVRhZyIsInN0eWxlTm9kZSIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiY3JlYXRlU3R5bGVUYWciLCJyZWdpc3RlclBsdWdpbiIsImhhbmRsZVBsdWdpbnMiLCJ1bnJlZ2lzdGVyUGx1Z2luIiwibmFtZU9yUGx1Z2luS2V5IiwiYWxsRXh0ZW5zaW9ucyIsInZhbHVlcyIsImNyZWF0ZU5vZGVWaWV3cyIsInNlbGVjdGlvbkhhc0NoYW5nZWQiLCJnZXRBdHRyaWJ1dGVzIiwibm9kZUl0ZW0iLCJnZXROb2RlQXR0cmlidXRlcyIsImlzQWN0aXZlIiwibmFtZU9yQXR0cmlidXRlcyIsImF0dHJpYnV0ZXNPclVuZGVmaW5lZCIsImdldEpTT04iLCJnZXRIVE1MIiwiZG9jdW1lbnRGcmFnbWVudCIsImdldEhUTUxGcm9tRnJhZ21lbnQiLCJnZXRUZXh0IiwiZGVmYXVsdENvbnRlbnQiLCJpc05vZGVFbXB0eSIsImdldENoYXJhY3RlckNvdW50IiwiZ2V0TWFya3NCZXR3ZWVuIiwicG9zVG9ET01SZWN0IiwibWFya0lucHV0UnVsZSIsImNhcHR1cmVHcm91cCIsImZ1bGxNYXRjaCIsIm1hcmtFbmQiLCJzdGFydFNwYWNlcyIsInRleHRTdGFydCIsInRleHRFbmQiLCJleGNsdWRlZCIsIk1hcmsiLCJOb2RlIiwibWFya1Bhc3RlUnVsZSIsIkRhdGFWaWV3IiwiZ2V0TmF0aXZlIiwibW9kdWxlIiwiaGFzaENsZWFyIiwiaGFzaERlbGV0ZSIsImhhc2hHZXQiLCJoYXNoSGFzIiwiaGFzaFNldCIsIkhhc2giLCJlbnRyeSIsImxpc3RDYWNoZUNsZWFyIiwibGlzdENhY2hlRGVsZXRlIiwibGlzdENhY2hlR2V0IiwibGlzdENhY2hlSGFzIiwibGlzdENhY2hlU2V0IiwiTGlzdENhY2hlIiwibWFwQ2FjaGVDbGVhciIsIm1hcENhY2hlRGVsZXRlIiwibWFwQ2FjaGVHZXQiLCJtYXBDYWNoZUhhcyIsIm1hcENhY2hlU2V0IiwiTWFwQ2FjaGUiLCJQcm9taXNlIiwic2V0Q2FjaGVBZGQiLCJzZXRDYWNoZUhhcyIsIlNldENhY2hlIiwiX19kYXRhX18iLCJzdGFja0NsZWFyIiwic3RhY2tEZWxldGUiLCJzdGFja0dldCIsInN0YWNrSGFzIiwic3RhY2tTZXQiLCJTdGFjayIsIlN5bWJvbCIsIlVpbnQ4QXJyYXkiLCJXZWFrTWFwIiwiaXRlcmF0ZWUiLCJyZXNJbmRleCIsImJhc2VUaW1lcyIsImlzQXJndW1lbnRzIiwiaXNCdWZmZXIiLCJpc0luZGV4IiwiaXNUeXBlZEFycmF5IiwiaW5oZXJpdGVkIiwiaXNBcnIiLCJpc0FyZyIsImlzQnVmZiIsImlzVHlwZSIsInNraXBJbmRleGVzIiwiYmFzZUFzc2lnblZhbHVlIiwib2JqZWN0Iiwib2JqVmFsdWUiLCJjb3B5T2JqZWN0Iiwia2V5c0luIiwiZGVmaW5lUHJvcGVydHkiLCJhcnJheUVhY2giLCJhc3NpZ25WYWx1ZSIsImJhc2VBc3NpZ24iLCJiYXNlQXNzaWduSW4iLCJjbG9uZUJ1ZmZlciIsImNvcHlBcnJheSIsImNvcHlTeW1ib2xzIiwiY29weVN5bWJvbHNJbiIsImdldEFsbEtleXMiLCJnZXRBbGxLZXlzSW4iLCJnZXRUYWciLCJpbml0Q2xvbmVBcnJheSIsImluaXRDbG9uZUJ5VGFnIiwiaW5pdENsb25lT2JqZWN0IiwiaXNNYXAiLCJpc1NldCIsImFyZ3NUYWciLCJmdW5jVGFnIiwib2JqZWN0VGFnIiwiY2xvbmVhYmxlVGFncyIsImJhc2VDbG9uZSIsImJpdG1hc2siLCJjdXN0b21pemVyIiwiaXNEZWVwIiwiaXNGbGF0IiwiaXNGdWxsIiwidGFnIiwiaXNGdW5jIiwic3RhY2tlZCIsInN1YlZhbHVlIiwib2JqZWN0Q3JlYXRlIiwiYmFzZUNyZWF0ZSIsInByb3RvIiwiYmFzZUZvck93biIsImJhc2VFYWNoIiwiY3JlYXRlQmFzZUVhY2giLCJiYXNlRm9yIiwiY3JlYXRlQmFzZUZvciIsImNhc3RQYXRoIiwidG9LZXkiLCJwYXRoIiwiYXJyYXlQdXNoIiwia2V5c0Z1bmMiLCJzeW1ib2xzRnVuYyIsImdldFJhd1RhZyIsIm9iamVjdFRvU3RyaW5nIiwic3ltVG9TdHJpbmdUYWciLCJ0b1N0cmluZ1RhZyIsImJhc2VHZXRUYWciLCJpc09iamVjdExpa2UiLCJiYXNlSXNFcXVhbERlZXAiLCJiYXNlSXNFcXVhbCIsImVxdWFsQXJyYXlzIiwiZXF1YWxCeVRhZyIsImVxdWFsT2JqZWN0cyIsImFycmF5VGFnIiwiZXF1YWxGdW5jIiwib2JqSXNBcnIiLCJvdGhJc0FyciIsIm9ialRhZyIsIm90aFRhZyIsIm9iaklzT2JqIiwib3RoSXNPYmoiLCJpc1NhbWVUYWciLCJvYmpJc1dyYXBwZWQiLCJvdGhJc1dyYXBwZWQiLCJvYmpVbndyYXBwZWQiLCJvdGhVbndyYXBwZWQiLCJtYXRjaERhdGEiLCJub0N1c3RvbWl6ZXIiLCJzcmNWYWx1ZSIsIkNPTVBBUkVfUEFSVElBTF9GTEFHIiwiaXNNYXNrZWQiLCJ0b1NvdXJjZSIsInJlSXNIb3N0Q3RvciIsImZ1bmNQcm90byIsIkZ1bmN0aW9uIiwib2JqZWN0UHJvdG8iLCJmdW5jVG9TdHJpbmciLCJyZUlzTmF0aXZlIiwiUmVnRXhwIiwiaXNMZW5ndGgiLCJ0eXBlZEFycmF5VGFncyIsImJhc2VNYXRjaGVzIiwiYmFzZU1hdGNoZXNQcm9wZXJ0eSIsImlkZW50aXR5IiwicHJvcGVydHkiLCJpc1Byb3RvdHlwZSIsIm5hdGl2ZUtleXMiLCJuYXRpdmVLZXlzSW4iLCJpc1Byb3RvIiwiaXNBcnJheUxpa2UiLCJjb2xsZWN0aW9uIiwiYmFzZUlzTWF0Y2giLCJnZXRNYXRjaERhdGEiLCJtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZSIsImhhc0luIiwiaXNLZXkiLCJpc1N0cmljdENvbXBhcmFibGUiLCJiYXNlR2V0IiwiYXJyYXlNYXAiLCJpc1N5bWJvbCIsInN5bWJvbFByb3RvIiwic3ltYm9sVG9TdHJpbmciLCJiYXNlVG9TdHJpbmciLCJmdW5jIiwiY2FjaGUiLCJzdHJpbmdUb1BhdGgiLCJhcnJheUJ1ZmZlciIsImJ5dGVMZW5ndGgiLCJmcmVlRXhwb3J0cyIsImZyZWVNb2R1bGUiLCJCdWZmZXIiLCJhbGxvY1Vuc2FmZSIsImJ1ZmZlciIsImNsb25lQXJyYXlCdWZmZXIiLCJkYXRhVmlldyIsImJ5dGVPZmZzZXQiLCJyZUZsYWdzIiwicmVnZXhwIiwibGFzdEluZGV4Iiwic3ltYm9sVmFsdWVPZiIsInZhbHVlT2YiLCJzeW1ib2wiLCJ0eXBlZEFycmF5IiwiaXNOZXciLCJuZXdWYWx1ZSIsImdldFN5bWJvbHMiLCJnZXRTeW1ib2xzSW4iLCJjb3JlSnNEYXRhIiwiZWFjaEZ1bmMiLCJmcm9tUmlnaHQiLCJpdGVyYWJsZSIsImFycmF5U29tZSIsImNhY2hlSGFzIiwiaXNQYXJ0aWFsIiwiYXJyTGVuZ3RoIiwib3RoTGVuZ3RoIiwiYXJyU3RhY2tlZCIsIm90aFN0YWNrZWQiLCJzZWVuIiwiYXJyVmFsdWUiLCJvdGhWYWx1ZSIsImNvbXBhcmVkIiwib3RoSW5kZXgiLCJtYXBUb0FycmF5Iiwic2V0VG9BcnJheSIsIm1lc3NhZ2UiLCJjb252ZXJ0Iiwib2JqUHJvcHMiLCJvYmpMZW5ndGgiLCJvYmpTdGFja2VkIiwic2tpcEN0b3IiLCJvYmpDdG9yIiwib3RoQ3RvciIsImZyZWVHbG9iYWwiLCJnIiwiYmFzZUdldEFsbEtleXMiLCJpc0tleWFibGUiLCJiYXNlSXNOYXRpdmUiLCJnZXRWYWx1ZSIsImdldFByb3RvdHlwZSIsIm92ZXJBcmciLCJuYXRpdmVPYmplY3RUb1N0cmluZyIsImlzT3duIiwidW5tYXNrZWQiLCJhcnJheUZpbHRlciIsInN0dWJBcnJheSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwibmF0aXZlR2V0U3ltYm9scyIsImdldE93blByb3BlcnR5U3ltYm9scyIsIm1hcFRhZyIsInByb21pc2VUYWciLCJzZXRUYWciLCJ3ZWFrTWFwVGFnIiwiZGF0YVZpZXdUYWciLCJkYXRhVmlld0N0b3JTdHJpbmciLCJtYXBDdG9yU3RyaW5nIiwicHJvbWlzZUN0b3JTdHJpbmciLCJzZXRDdG9yU3RyaW5nIiwid2Vha01hcEN0b3JTdHJpbmciLCJBcnJheUJ1ZmZlciIsIkN0b3IiLCJjdG9yU3RyaW5nIiwiaGFzRnVuYyIsIm5hdGl2ZUNyZWF0ZSIsImNsb25lRGF0YVZpZXciLCJjbG9uZVJlZ0V4cCIsImNsb25lU3ltYm9sIiwiY2xvbmVUeXBlZEFycmF5IiwicmVJc1VpbnQiLCJyZUlzRGVlcFByb3AiLCJyZUlzUGxhaW5Qcm9wIiwidWlkIiwibWFza1NyY0tleSIsIklFX1BST1RPIiwiYXNzb2NJbmRleE9mIiwiZ2V0TWFwRGF0YSIsIm1lbW9pemUiLCJmcmVlUHJvY2VzcyIsInByb2Nlc3MiLCJub2RlVXRpbCIsInJlcXVpcmUiLCJiaW5kaW5nIiwiYXJnIiwiZnJlZVNlbGYiLCJwYWlycyIsIkxBUkdFX0FSUkFZX1NJWkUiLCJtZW1vaXplQ2FwcGVkIiwicmVQcm9wTmFtZSIsInJlRXNjYXBlQ2hhciIsInN0cmluZyIsIm51bWJlciIsInF1b3RlIiwic3ViU3RyaW5nIiwiQ0xPTkVfREVFUF9GTEFHIiwiY2FzdEZ1bmN0aW9uIiwiZGVmYXVsdFZhbHVlIiwiYmFzZUhhc0luIiwiaGFzUGF0aCIsImJhc2VJc0FyZ3VtZW50cyIsInN0dWJGYWxzZSIsImJhc2VJc01hcCIsImJhc2VVbmFyeSIsIm5vZGVJc01hcCIsIm9iamVjdEN0b3JTdHJpbmciLCJiYXNlSXNTZXQiLCJub2RlSXNTZXQiLCJiYXNlSXNUeXBlZEFycmF5Iiwibm9kZUlzVHlwZWRBcnJheSIsImFycmF5TGlrZUtleXMiLCJiYXNlS2V5cyIsImJhc2VLZXlzSW4iLCJiYXNlSXRlcmF0ZWUiLCJiYXNlTWFwIiwicmVzb2x2ZXIiLCJUeXBlRXJyb3IiLCJtZW1vaXplZCIsIkNhY2hlIiwiYmFzZVByb3BlcnR5IiwiYmFzZVByb3BlcnR5RGVlcCIsIlJlYWN0UHJvcFR5cGVzU2VjcmV0IiwiZW1wdHlGdW5jdGlvbiIsImVtcHR5RnVuY3Rpb25XaXRoUmVzZXQiLCJyZXNldFdhcm5pbmdDYWNoZSIsInNoaW0iLCJjb21wb25lbnROYW1lIiwibG9jYXRpb24iLCJwcm9wRnVsbE5hbWUiLCJzZWNyZXQiLCJnZXRTaGltIiwiUmVhY3RQcm9wVHlwZXMiLCJiaWdpbnQiLCJib29sIiwiYW55IiwiYXJyYXlPZiIsImVsZW1lbnRUeXBlIiwiaW5zdGFuY2VPZiIsIm9iamVjdE9mIiwib25lT2YiLCJvbmVPZlR5cGUiLCJzaGFwZSIsImV4YWN0IiwiY2hlY2tQcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJjYWxjdWxhdGVDaGFuZ2UiLCJoc2wiLCJkaXJlY3Rpb24iLCJpbml0aWFsQSIsImNvbnRhaW5lcldpZHRoIiwiY29udGFpbmVySGVpZ2h0IiwicGFnZVgiLCJ0b3VjaGVzIiwicGFnZVkiLCJwYWdlWE9mZnNldCIsInBhZ2VZT2Zmc2V0Iiwicm91bmQiLCJoIiwicyIsImwiLCJjaGVja2JvYXJkQ2FjaGUiLCJjMSIsImMyIiwic2VydmVyQ2FudmFzIiwiY2hlY2tib2FyZCIsImNhbnZhcyIsImN0eCIsImdldENvbnRleHQiLCJmaWxsU3R5bGUiLCJmaWxsUmVjdCIsInRvRGF0YVVSTCIsInJlbmRlciIsIkNoZWNrYm9hcmQiLCJ3aGl0ZSIsImdyZXkiLCJyZW5kZXJlcnMiLCJib3JkZXJSYWRpdXMiLCJib3hTaGFkb3ciLCJzdHlsZXMiLCJncmlkIiwiYWJzb2x1dGUiLCJiYWNrZ3JvdW5kIiwiaXNWYWxpZEVsZW1lbnQiLCJkZWZhdWx0UHJvcHMiLCJfY3JlYXRlQ2xhc3MiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIkNvbnN0cnVjdG9yIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiX2NsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIlJlZmVyZW5jZUVycm9yIiwiQWxwaGEiLCJfcmVmMiIsIl90ZW1wIiwiX3RoaXMiLCJfbGVuIiwiX2tleSIsImhhbmRsZUNoYW5nZSIsIm9uQ2hhbmdlIiwiaGFuZGxlTW91c2VEb3duIiwiaGFuZGxlTW91c2VVcCIsInVuYmluZEV2ZW50TGlzdGVuZXJzIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwic2V0UHJvdG90eXBlT2YiLCJfaW5oZXJpdHMiLCJfdGhpczIiLCJyZ2IiLCJhbHBoYSIsInJhZGl1cyIsIm92ZXJmbG93IiwiZ3JhZGllbnQiLCJyIiwic2hhZG93IiwibWFyZ2luIiwicG9pbnRlciIsInNsaWRlciIsIm1hcmdpblRvcCIsInZlcnRpY2FsIiwib3ZlcndyaXRlIiwicmVmIiwib25Nb3VzZURvd24iLCJvblRvdWNoTW92ZSIsIm9uVG91Y2hTdGFydCIsIlB1cmVDb21wb25lbnQiLCJDb21wb25lbnQiLCJWQUxJRF9LRVlfQ09ERVMiLCJpZENvdW50ZXIiLCJFZGl0YWJsZUlucHV0IiwiaGFuZGxlQmx1ciIsImJsdXJWYWx1ZSIsInNldFN0YXRlIiwic2V0VXBkYXRlZFZhbHVlIiwiZ2V0TnVtYmVyVmFsdWUiLCJpc05hTiIsImdldEFycm93T2Zmc2V0IiwidXBkYXRlZFZhbHVlIiwiaGFuZGxlRHJhZyIsImRyYWdMYWJlbCIsIm1vdmVtZW50WCIsImRyYWdNYXgiLCJnZXRWYWx1ZU9iamVjdFdpdGhMYWJlbCIsInRvVXBwZXJDYXNlIiwiaW5wdXRJZCIsInByZXZQcm9wcyIsIl9kZWZpbmVQcm9wZXJ0eSIsImxhYmVsIiwiYXJyb3dPZmZzZXQiLCJvbkNoYW5nZVZhbHVlIiwiY3Vyc29yIiwiaWQiLCJvbktleURvd24iLCJwbGFjZWhvbGRlciIsInNwZWxsQ2hlY2siLCJoaWRlTGFiZWwiLCJodG1sRm9yIiwiX2giLCJIdWUiLCJfcHJvcHMkZGlyZWN0aW9uIiwiaHVlIiwicGFkZGluZyIsImdsb2JhbCIsInNyY0luZGV4IiwibWVyZ2VGdW5jIiwiaXNDb21tb24iLCJpc1R5cGVkIiwiYmFzZU1lcmdlIiwidGhpc0FyZyIsIm5hdGl2ZU1heCIsIm5hdGl2ZU5vdyIsImNvdW50IiwibGFzdENhbGxlZCIsInN0YW1wIiwicmVtYWluaW5nIiwib3RoZXJBcmdzIiwiYXNzaWduZXIiLCJzb3VyY2VzIiwiZ3VhcmQiLCJSYWlzZWQiLCJ6RGVwdGgiLCJfcmVmJHN0eWxlcyIsInBhc3NlZFN0eWxlcyIsImRpc3BsYXkiLCJiZyIsInByb3BUeXBlcyIsInJlV2hpdGVzcGFjZSIsInJlVHJpbVN0YXJ0IiwiY2hhckF0IiwicmVJc0JhZEhleCIsInJlSXNCaW5hcnkiLCJyZUlzT2N0YWwiLCJmcmVlUGFyc2VJbnQiLCJwYXJzZUludCIsImlzQmluYXJ5IiwibmF0aXZlTWluIiwid2FpdCIsImxhc3RBcmdzIiwibGFzdFRoaXMiLCJtYXhXYWl0IiwidGltZXJJZCIsImxhc3RDYWxsVGltZSIsImxhc3RJbnZva2VUaW1lIiwibGVhZGluZyIsIm1heGluZyIsInRyYWlsaW5nIiwiaW52b2tlRnVuYyIsImxlYWRpbmdFZGdlIiwidGltZXJFeHBpcmVkIiwic2hvdWxkSW52b2tlIiwidGltZVNpbmNlTGFzdENhbGwiLCJ0cmFpbGluZ0VkZ2UiLCJ0aW1lV2FpdGluZyIsInJlbWFpbmluZ1dhaXQiLCJkZWJvdW5jZWQiLCJpc0ludm9raW5nIiwiY2FuY2VsIiwiU2F0dXJhdGlvbiIsInRocm90dGxlIiwiX2NvbnRhaW5lciRnZXRCb3VuZGluIiwic2F0dXJhdGlvbiIsImJyaWdodCIsInYiLCJyZW5kZXJXaW5kb3ciLCJnZXRDb250YWluZXJSZW5kZXJXaW5kb3ciLCJjb2xvciIsImJsYWNrIiwiY2lyY2xlIiwiaHN2Iiwic2ltcGxlQ2hlY2tGb3JWYWxpZENvbG9yIiwiY2hlY2tlZCIsInBhc3NlZCIsImxldHRlciIsInRvU3RhdGUiLCJvbGRIdWUiLCJoZXgiLCJ0b0hzbCIsInRvSHN2IiwidG9SZ2IiLCJ0b0hleCIsImlzVmFsaWRIZXgiLCJsaCIsImlzVmFsaWQiLCJnZXRDb250cmFzdGluZ0NvbG9yIiwiaXN2YWxpZENvbG9yU3RyaW5nIiwic3RyaW5nV2l0aG91dERlZ3JlZSIsIl9vayIsIlBpY2tlciIsIkNvbG9yUGlja2VyIiwiY29sb3JzIiwib25DaGFuZ2VDb21wbGV0ZSIsImRlYm91bmNlIiwiaGFuZGxlU3dhdGNoSG92ZXIiLCJvblN3YXRjaEhvdmVyIiwib3B0aW9uYWxFdmVudHMiLCJuZXh0UHJvcHMiLCJTcGFuIiwiX1JlYWN0JENvbXBvbmVudCIsIkZvY3VzIiwiaGFuZGxlRm9jdXMiLCJfcmVmJG9uQ2xpY2siLCJvbkNsaWNrIiwib25Ib3ZlciIsIl9yZWYkdGl0bGUiLCJ0aXRsZSIsIl9yZWYkZm9jdXNTdHlsZSIsImZvY3VzU3R5bGUiLCJ0cmFuc3BhcmVudCIsInN3YXRjaCIsIm91dGxpbmUiLCJvbk1vdXNlT3ZlciIsInRhYkluZGV4IiwiQWxwaGFQaWNrZXIiLCJfcmVmJGNsYXNzTmFtZSIsInBpY2tlciIsImJhY2tncm91bmRDb2xvciIsInN3YXRjaGVzIiwibWFyZ2luUmlnaHQiLCJmbG9hdCIsIm1hcmdpbkJvdHRvbSIsImMiLCJCbG9jayIsInRyaWFuZ2xlIiwiaGV4Q29kZSIsImNhcmQiLCJhbGlnbkl0ZW1zIiwianVzdGlmeUNvbnRlbnQiLCJmb250U2l6ZSIsImJvcmRlclN0eWxlIiwiYm9yZGVyV2lkdGgiLCJib3JkZXJDb2xvciIsIm1hcmdpbkxlZnQiLCJib3hTaXppbmciLCJwaW5rIiwicHVycGxlIiwiZGVlcFB1cnBsZSIsImluZGlnbyIsImJsdWUiLCJsaWdodEJsdWUiLCJjeWFuIiwidGVhbCIsImdyZWVuIiwibGlnaHRHcmVlbiIsImxpbWUiLCJ5ZWxsb3ciLCJhbWJlciIsIm9yYW5nZSIsImRlZXBPcmFuZ2UiLCJicm93biIsImJsdWVHcmV5IiwiQ2lyY2xlU3dhdGNoIiwiaG92ZXIiLCJjaXJjbGVTaXplIiwiY2lyY2xlU3BhY2luZyIsInRyYW5zaXRpb24iLCJTd2F0Y2giLCJDaXJjbGUiLCJmbGV4V3JhcCIsIkNocm9tZUZpZWxkcyIsInRvZ2dsZVZpZXdzIiwic2hvd0hpZ2hsaWdodCIsImN1cnJlbnRUYXJnZXQiLCJoaWRlSGlnaGxpZ2h0IiwicGFkZGluZ1RvcCIsImZsZXgiLCJwYWRkaW5nTGVmdCIsInRvZ2dsZSIsInRleHRBbGlnbiIsImljb24iLCJpY29uSGlnaGxpZ2h0IiwidGV4dFRyYW5zZm9ybSIsImxpbmVIZWlnaHQiLCJzdmciLCJVbmZvbGRNb3JlSG9yaXpvbnRhbEljb24iLCJvbk1vdXNlRW50ZXIiLCJvbk1vdXNlT3V0IiwiQ2hyb21lIiwiZGlzYWJsZUFscGhhIiwiZm9udEZhbWlseSIsInBhZGRpbmdCb3R0b20iLCJjb250cm9scyIsInpJbmRleCIsInRvZ2dsZXMiLCJkb3QiLCJvcGFjaXR5IiwicGFkZGluZ1JpZ2h0IiwiSEVYd3JhcCIsIkhFWGlucHV0IiwiSEVYbGFiZWwiLCJSR0J3cmFwIiwiUkdCaW5wdXQiLCJSR0JsYWJlbCIsIkNvbXBhY3QiLCJjb21wYWN0IiwiaG92ZXJTd2F0Y2giLCJHaXRodWIiLCJib3JkZXJCb3R0b21Db2xvciIsInRyaWFuZ2xlU2hhZG93IiwiSHVlUGlja2VyIiwibWF0ZXJpYWwiLCJib3JkZXJCb3R0b20iLCJIZXgiLCJ0aGlyZCIsImRpdmlkZXIiLCJmaWVsZFN5bWJvbHMiLCJ0cmlhbmdsZUJvcmRlciIsIkV4dGVuZCIsImxlZnRJbnNpZGUiLCJyaWdodEluc2lkZSIsImJhY2tncm91bmRJbWFnZSIsImN1cnJlbnRDb2xvciIsIm5ldyIsImN1cnJlbnQiLCJQaG90b3Nob3AiLCJfcHJvcHMkc3R5bGVzIiwiX3Byb3BzJGNsYXNzTmFtZSIsInByZXZpZXdzIiwiYWN0aW9ucyIsImhlYWRlciIsIlBob3Rvc2hvcFBvaW50ZXIiLCJvbkFjY2VwdCIsIm9uQ2FuY2VsIiwiUGhvdG9zaG9wRmllbGRzIiwic2luZ2xlIiwiZG91YmxlIiwiU2tldGNoUHJlc2V0Q29sb3JzIiwiYm9yZGVyVG9wIiwic3dhdGNoV3JhcCIsImhhbmRsZUNsaWNrIiwiY29sb3JPYmpPclN0cmluZyIsIlNrZXRjaCIsInByZXNldENvbG9ycyIsInNsaWRlcnMiLCJhY3RpdmVDb2xvciIsImVwc2lsb24iLCJTbGlkZXIiLCJDaGVja0ljb24iLCJTd2F0Y2hlcyIsIm92ZXJmbG93WSIsIlR3aXR0ZXIiLCJoYXNoIiwiaGV4Y29kZSIsIkdvb2dsZVBvaW50ZXJDaXJjbGUiLCJHb29nbGVQb2ludGVyIiwiX3ZhbHVlcyIsIl92YWx1ZXMyIiwiaHN2VmFsdWUiLCJjb2x1bW4iLCJpbnB1dDIiLCJsYWJlbDIiLCJmbGV4R3JvdyIsInJnYlZhbHVlIiwiaHNsVmFsdWUiLCJHb29nbGUiLCJmb3IiLCJxIiwidCIsInUiLCJ3IiwieiIsIml0ZXJhdG9yIiwiQiIsImlzTW91bnRlZCIsImVucXVldWVGb3JjZVVwZGF0ZSIsImVucXVldWVSZXBsYWNlU3RhdGUiLCJlbnF1ZXVlU2V0U3RhdGUiLCJDIiwiRCIsIkUiLCJyZWZzIiwiRiIsIkciLCJpc1JlYWN0Q29tcG9uZW50IiwiSCIsImlzUHVyZVJlYWN0Q29tcG9uZW50IiwiSSIsIkoiLCJLIiwiTCIsIl9fc2VsZiIsIl9fc291cmNlIiwiTSIsImsiLCIkJHR5cGVvZiIsIl9vd25lciIsIk8iLCJQIiwiUSIsImVzY2FwZSIsIlIiLCJOIiwiQSIsIlMiLCJUIiwiX3N0YXR1cyIsIl9yZXN1bHQiLCJ0aGVuIiwiVSIsIlYiLCJXIiwiUmVhY3RDdXJyZW50RGlzcGF0Y2hlciIsIlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnIiwiUmVhY3RDdXJyZW50T3duZXIiLCJDaGlsZHJlbiIsInRvQXJyYXkiLCJGcmFnbWVudCIsIlByb2ZpbGVyIiwiU3RyaWN0TW9kZSIsIlN1c3BlbnNlIiwiX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQiLCJjbG9uZUVsZW1lbnQiLCJjcmVhdGVDb250ZXh0IiwiX2N1cnJlbnRWYWx1ZSIsIl9jdXJyZW50VmFsdWUyIiwiX3RocmVhZENvdW50IiwiUHJvdmlkZXIiLCJDb25zdW1lciIsIl9kZWZhdWx0VmFsdWUiLCJfZ2xvYmFsTmFtZSIsIl9jb250ZXh0IiwiY3JlYXRlRmFjdG9yeSIsImNyZWF0ZVJlZiIsImZvcndhcmRSZWYiLCJsYXp5IiwiX3BheWxvYWQiLCJfaW5pdCIsIm1lbW8iLCJzdGFydFRyYW5zaXRpb24iLCJ1bnN0YWJsZV9hY3QiLCJ1c2VDYWxsYmFjayIsInVzZUNvbnRleHQiLCJ1c2VEZWJ1Z1ZhbHVlIiwidXNlRGVmZXJyZWRWYWx1ZSIsInVzZUVmZmVjdCIsInVzZUlkIiwidXNlSW1wZXJhdGl2ZUhhbmRsZSIsInVzZUluc2VydGlvbkVmZmVjdCIsInVzZUxheW91dEVmZmVjdCIsInVzZU1lbW8iLCJ1c2VSZWR1Y2VyIiwidXNlUmVmIiwidXNlU3RhdGUiLCJ1c2VTeW5jRXh0ZXJuYWxTdG9yZSIsInVzZVRyYW5zaXRpb24iLCJ2ZXJzaW9uIiwiYXV0b3ByZWZpeCIsIl9mb3JPd24zIiwidHJhbnNmb3JtcyIsIm1zQm9yZGVyUmFkaXVzIiwiTW96Qm9yZGVyUmFkaXVzIiwiT0JvcmRlclJhZGl1cyIsIldlYmtpdEJvcmRlclJhZGl1cyIsIm1zQm94U2hhZG93IiwiTW96Qm94U2hhZG93IiwiT0JveFNoYWRvdyIsIldlYmtpdEJveFNoYWRvdyIsInVzZXJTZWxlY3QiLCJXZWJraXRUb3VjaENhbGxvdXQiLCJLaHRtbFVzZXJTZWxlY3QiLCJNb3pVc2VyU2VsZWN0IiwibXNVc2VyU2VsZWN0IiwiV2Via2l0VXNlclNlbGVjdCIsIldlYmtpdEJveEZsZXgiLCJNb3pCb3hGbGV4IiwiV2Via2l0RmxleCIsIm1zRmxleCIsImZsZXhCYXNpcyIsIldlYmtpdEZsZXhCYXNpcyIsIldlYmtpdEp1c3RpZnlDb250ZW50IiwibXNUcmFuc2l0aW9uIiwiTW96VHJhbnNpdGlvbiIsIk9UcmFuc2l0aW9uIiwiV2Via2l0VHJhbnNpdGlvbiIsIm1zVHJhbnNmb3JtIiwiTW96VHJhbnNmb3JtIiwiT1RyYW5zZm9ybSIsIldlYmtpdFRyYW5zZm9ybSIsIm90aGVyRWxlbWVudFN0eWxlcyIsImVsZW1lbnRzIiwicHJlZml4ZWQiLCJleHBhbmRlZCIsIkFjdGl2ZSIsIm9uTW91c2VVcCIsIkhvdmVyIiwiaGFuZGxlTW91c2VPdmVyIiwiaGFuZGxlTW91c2VPdXQiLCJmbGF0dGVuTmFtZXMiLCJfaXNTdHJpbmczIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9pc1BsYWluT2JqZWN0MyIsIl9tYXAzIiwidGhpbmdzIiwibmFtZXMiLCJ0aGluZyIsIl9mbGF0dGVuTmFtZXMyIiwiX21lcmdlQ2xhc3NlczIiLCJfYXV0b3ByZWZpeDIiLCJfaG92ZXIzIiwiX2FjdGl2ZTIiLCJfbG9vcDMiLCJjbGFzc2VzIiwiYWN0aXZhdGlvbnMiLCJhY3RpdmVOYW1lcyIsIm1lcmdlZCIsInNldFByb3AiLCJtZXJnZUNsYXNzZXMiLCJfY2xvbmVEZWVwMyIsInRvTWVyZ2UiLCJ0cmltTGVmdCIsInRyaW1SaWdodCIsInRpbnlDb3VudGVyIiwibWF0aFJvdW5kIiwibWF0aE1pbiIsIm1hdGhNYXgiLCJtYXRoUmFuZG9tIiwicmFuZG9tIiwidGlueWNvbG9yIiwib3B0cyIsIm9rIiwiZm9ybWF0IiwibmFtZWQiLCJtYXRjaGVycyIsInJnYmEiLCJoc2xhIiwiaHN2YSIsImhleDgiLCJwYXJzZUludEZyb21IZXgiLCJjb252ZXJ0SGV4VG9EZWNpbWFsIiwiaGV4NiIsImhleDQiLCJoZXgzIiwic3RyaW5nSW5wdXRUb09iamVjdCIsImlzVmFsaWRDU1NVbml0IiwiYm91bmQwMSIsInN1YnN0ciIsImNvbnZlcnRUb1BlcmNlbnRhZ2UiLCJoc3ZUb1JnYiIsImh1ZTJyZ2IiLCJoc2xUb1JnYiIsImJvdW5kQWxwaGEiLCJpbnB1dFRvUkdCIiwiX29yaWdpbmFsSW5wdXQiLCJfciIsIl9nIiwiX3JvdW5kQSIsIl9mb3JtYXQiLCJfZ3JhZGllbnRUeXBlIiwiZ3JhZGllbnRUeXBlIiwiX3RjX2lkIiwicmdiVG9Ic2wiLCJyZ2JUb0hzdiIsInJnYlRvSGV4IiwiYWxsb3czQ2hhciIsInBhZDIiLCJyZ2JhVG9BcmdiSGV4IiwiY29udmVydERlY2ltYWxUb0hleCIsImRlc2F0dXJhdGUiLCJhbW91bnQiLCJjbGFtcDAxIiwic2F0dXJhdGUiLCJncmV5c2NhbGUiLCJsaWdodGVuIiwiYnJpZ2h0ZW4iLCJkYXJrZW4iLCJzcGluIiwiY29tcGxlbWVudCIsInRyaWFkIiwidGV0cmFkIiwic3BsaXRjb21wbGVtZW50IiwiYW5hbG9nb3VzIiwicmVzdWx0cyIsInNsaWNlcyIsInBhcnQiLCJyZXQiLCJtb25vY2hyb21hdGljIiwibW9kaWZpY2F0aW9uIiwiaXNEYXJrIiwiZ2V0QnJpZ2h0bmVzcyIsImlzTGlnaHQiLCJnZXRPcmlnaW5hbElucHV0IiwiZ2V0Rm9ybWF0IiwiZ2V0QWxwaGEiLCJnZXRMdW1pbmFuY2UiLCJSc1JHQiIsIkdzUkdCIiwiQnNSR0IiLCJwb3ciLCJzZXRBbHBoYSIsInRvSHN2U3RyaW5nIiwidG9Ic2xTdHJpbmciLCJ0b0hleFN0cmluZyIsInRvSGV4OCIsImFsbG93NENoYXIiLCJyZ2JhVG9IZXgiLCJ0b0hleDhTdHJpbmciLCJ0b1JnYlN0cmluZyIsInRvUGVyY2VudGFnZVJnYiIsInRvUGVyY2VudGFnZVJnYlN0cmluZyIsInRvTmFtZSIsImhleE5hbWVzIiwidG9GaWx0ZXIiLCJzZWNvbmRDb2xvciIsImhleDhTdHJpbmciLCJzZWNvbmRIZXg4U3RyaW5nIiwiZm9ybWF0U2V0IiwiZm9ybWF0dGVkU3RyaW5nIiwiaGFzQWxwaGEiLCJjbG9uZSIsIl9hcHBseU1vZGlmaWNhdGlvbiIsIl9hcHBseUNvbWJpbmF0aW9uIiwiZnJvbVJhdGlvIiwibmV3Q29sb3IiLCJlcXVhbHMiLCJjb2xvcjEiLCJjb2xvcjIiLCJtaXgiLCJyZ2IxIiwicmdiMiIsInJlYWRhYmlsaXR5IiwiaXNSZWFkYWJsZSIsIndjYWcyIiwid2NhZzJQYXJtcyIsIm91dCIsInBhcm1zIiwibW9zdFJlYWRhYmxlIiwiYmFzZUNvbG9yIiwiY29sb3JMaXN0IiwiaW5jbHVkZUZhbGxiYWNrQ29sb3JzIiwiYmVzdENvbG9yIiwiYmVzdFNjb3JlIiwiYWxpY2VibHVlIiwiYW50aXF1ZXdoaXRlIiwiYXF1YSIsImFxdWFtYXJpbmUiLCJhenVyZSIsImJlaWdlIiwiYmlzcXVlIiwiYmxhbmNoZWRhbG1vbmQiLCJibHVldmlvbGV0IiwiYnVybHl3b29kIiwiYnVybnRzaWVubmEiLCJjYWRldGJsdWUiLCJjaGFydHJldXNlIiwiY2hvY29sYXRlIiwiY29yYWwiLCJjb3JuZmxvd2VyYmx1ZSIsImNvcm5zaWxrIiwiY3JpbXNvbiIsImRhcmtibHVlIiwiZGFya2N5YW4iLCJkYXJrZ29sZGVucm9kIiwiZGFya2dyYXkiLCJkYXJrZ3JlZW4iLCJkYXJrZ3JleSIsImRhcmtraGFraSIsImRhcmttYWdlbnRhIiwiZGFya29saXZlZ3JlZW4iLCJkYXJrb3JhbmdlIiwiZGFya29yY2hpZCIsImRhcmtyZWQiLCJkYXJrc2FsbW9uIiwiZGFya3NlYWdyZWVuIiwiZGFya3NsYXRlYmx1ZSIsImRhcmtzbGF0ZWdyYXkiLCJkYXJrc2xhdGVncmV5IiwiZGFya3R1cnF1b2lzZSIsImRhcmt2aW9sZXQiLCJkZWVwcGluayIsImRlZXBza3libHVlIiwiZGltZ3JheSIsImRpbWdyZXkiLCJkb2RnZXJibHVlIiwiZmlyZWJyaWNrIiwiZmxvcmFsd2hpdGUiLCJmb3Jlc3RncmVlbiIsImZ1Y2hzaWEiLCJnYWluc2Jvcm8iLCJnaG9zdHdoaXRlIiwiZ29sZCIsImdvbGRlbnJvZCIsImdyYXkiLCJncmVlbnllbGxvdyIsImhvbmV5ZGV3IiwiaG90cGluayIsImluZGlhbnJlZCIsIml2b3J5Iiwia2hha2kiLCJsYXZlbmRlciIsImxhdmVuZGVyYmx1c2giLCJsYXduZ3JlZW4iLCJsZW1vbmNoaWZmb24iLCJsaWdodGJsdWUiLCJsaWdodGNvcmFsIiwibGlnaHRjeWFuIiwibGlnaHRnb2xkZW5yb2R5ZWxsb3ciLCJsaWdodGdyYXkiLCJsaWdodGdyZWVuIiwibGlnaHRncmV5IiwibGlnaHRwaW5rIiwibGlnaHRzYWxtb24iLCJsaWdodHNlYWdyZWVuIiwibGlnaHRza3libHVlIiwibGlnaHRzbGF0ZWdyYXkiLCJsaWdodHNsYXRlZ3JleSIsImxpZ2h0c3RlZWxibHVlIiwibGlnaHR5ZWxsb3ciLCJsaW1lZ3JlZW4iLCJsaW5lbiIsIm1hZ2VudGEiLCJtYXJvb24iLCJtZWRpdW1hcXVhbWFyaW5lIiwibWVkaXVtYmx1ZSIsIm1lZGl1bW9yY2hpZCIsIm1lZGl1bXB1cnBsZSIsIm1lZGl1bXNlYWdyZWVuIiwibWVkaXVtc2xhdGVibHVlIiwibWVkaXVtc3ByaW5nZ3JlZW4iLCJtZWRpdW10dXJxdW9pc2UiLCJtZWRpdW12aW9sZXRyZWQiLCJtaWRuaWdodGJsdWUiLCJtaW50Y3JlYW0iLCJtaXN0eXJvc2UiLCJtb2NjYXNpbiIsIm5hdmFqb3doaXRlIiwibmF2eSIsIm9sZGxhY2UiLCJvbGl2ZSIsIm9saXZlZHJhYiIsIm9yYW5nZXJlZCIsIm9yY2hpZCIsInBhbGVnb2xkZW5yb2QiLCJwYWxlZ3JlZW4iLCJwYWxldHVycXVvaXNlIiwicGFsZXZpb2xldHJlZCIsInBhcGF5YXdoaXAiLCJwZWFjaHB1ZmYiLCJwZXJ1IiwicGx1bSIsInBvd2RlcmJsdWUiLCJyZWJlY2NhcHVycGxlIiwicmVkIiwicm9zeWJyb3duIiwicm95YWxibHVlIiwic2FkZGxlYnJvd24iLCJzYWxtb24iLCJzYW5keWJyb3duIiwic2VhZ3JlZW4iLCJzZWFzaGVsbCIsInNpZW5uYSIsInNpbHZlciIsInNreWJsdWUiLCJzbGF0ZWJsdWUiLCJzbGF0ZWdyYXkiLCJzbGF0ZWdyZXkiLCJzbm93Iiwic3ByaW5nZ3JlZW4iLCJzdGVlbGJsdWUiLCJ0YW4iLCJ0aGlzdGxlIiwidG9tYXRvIiwidHVycXVvaXNlIiwidmlvbGV0Iiwid2hlYXQiLCJ3aGl0ZXNtb2tlIiwieWVsbG93Z3JlZW4iLCJvIiwiZmxpcHBlZCIsImZsaXAiLCJwYXJzZUZsb2F0IiwiaXNPbmVQb2ludFplcm8iLCJwcm9jZXNzUGVyY2VudCIsImlzUGVyY2VudGFnZSIsIkNTU19VTklUIiwiUEVSTUlTU0lWRV9NQVRDSDMiLCJQRVJNSVNTSVZFX01BVENINCIsIm93bktleXMiLCJlbnVtZXJhYmxlT25seSIsInN5bWJvbHMiLCJzeW0iLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfb2JqZWN0U3ByZWFkMiIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJfdHlwZW9mIiwiX2RlZmluZVByb3BlcnRpZXMiLCJERUZBVUxUUyIsImJhY2tkcm9wIiwibmF2YmFyIiwidG9vbGJhciIsImZ1bGxzY3JlZW4iLCJpbmhlcml0ZWRBdHRyaWJ1dGVzIiwiaW5pdGlhbFZpZXdJbmRleCIsImludGVydmFsIiwia2V5Ym9hcmQiLCJsb2FkaW5nIiwibG9vcCIsIm1pbldpZHRoIiwibWluSGVpZ2h0IiwibW92YWJsZSIsInJvdGF0YWJsZSIsInNjYWxhYmxlIiwiem9vbWFibGUiLCJ6b29tT25Ub3VjaCIsInpvb21PbldoZWVsIiwic2xpZGVPblRvdWNoIiwidG9nZ2xlT25EYmxjbGljayIsInRvb2x0aXAiLCJ6SW5kZXhJbmxpbmUiLCJ6b29tUmF0aW8iLCJtaW5ab29tUmF0aW8iLCJtYXhab29tUmF0aW8iLCJ1cmwiLCJyZWFkeSIsInNob3ciLCJzaG93biIsImhpZGUiLCJoaWRkZW4iLCJ2aWV3ZWQiLCJtb3ZlZCIsInJvdGF0ZSIsInJvdGF0ZWQiLCJzY2FsZSIsInNjYWxlZCIsInpvb20iLCJ6b29tZWQiLCJwbGF5IiwiSVNfQlJPV1NFUiIsIldJTkRPVyIsIklTX1RPVUNIX0RFVklDRSIsIkhBU19QT0lOVEVSX0VWRU5UIiwiTkFNRVNQQUNFIiwiQUNUSU9OX01PVkUiLCJBQ1RJT05fU1dJVENIIiwiQUNUSU9OX1pPT00iLCJDTEFTU19BQ1RJVkUiLCJDTEFTU19DTE9TRSIsIkNMQVNTX0ZBREUiLCJDTEFTU19GSVhFRCIsIkNMQVNTX0ZVTExTQ1JFRU4iLCJDTEFTU19GVUxMU0NSRUVOX0VYSVQiLCJDTEFTU19ISURFIiwiQ0xBU1NfSElERV9NRF9ET1dOIiwiQ0xBU1NfSElERV9TTV9ET1dOIiwiQ0xBU1NfSElERV9YU19ET1dOIiwiQ0xBU1NfSU4iLCJDTEFTU19JTlZJU0lCTEUiLCJDTEFTU19MT0FESU5HIiwiQ0xBU1NfTU9WRSIsIkNMQVNTX09QRU4iLCJDTEFTU19TSE9XIiwiQ0xBU1NfVFJBTlNJVElPTiIsIkVWRU5UX0NMSUNLIiwiRVZFTlRfREJMQ0xJQ0siLCJFVkVOVF9EUkFHX1NUQVJUIiwiRVZFTlRfRk9DVVNJTiIsIkVWRU5UX0tFWV9ET1dOIiwiRVZFTlRfTE9BRCIsIkVWRU5UX0VSUk9SIiwiRVZFTlRfUE9JTlRFUl9ET1dOIiwiRVZFTlRfUE9JTlRFUl9NT1ZFIiwiRVZFTlRfUE9JTlRFUl9VUCIsIkVWRU5UX1JFU0laRSIsIkVWRU5UX1RSQU5TSVRJT05fRU5EIiwiRVZFTlRfV0hFRUwiLCJFVkVOVF9SRUFEWSIsIkVWRU5UX1NIT1ciLCJFVkVOVF9TSE9XTiIsIkVWRU5UX0hJREUiLCJFVkVOVF9ISURERU4iLCJFVkVOVF9WSUVXIiwiRVZFTlRfVklFV0VEIiwiRVZFTlRfTU9WRSIsIkVWRU5UX01PVkVEIiwiRVZFTlRfUk9UQVRFIiwiRVZFTlRfUk9UQVRFRCIsIkVWRU5UX1NDQUxFIiwiRVZFTlRfU0NBTEVEIiwiRVZFTlRfWk9PTSIsIkVWRU5UX1pPT01FRCIsIkVWRU5UX1BMQVkiLCJFVkVOVF9TVE9QIiwiREFUQV9BQ1RJT04iLCJSRUdFWFBfU1BBQ0VTIiwiQlVUVE9OUyIsImlzU3RyaW5nIiwiaXNOdW1iZXIiLCJpc1VuZGVmaW5lZCIsIl9jb25zdHJ1Y3RvciIsIlJFR0VYUF9TVUZGSVgiLCJzZXRTdHlsZSIsImVzY2FwZUhUTUxFbnRpdGllcyIsImhhc0NsYXNzIiwiYWRkQ2xhc3MiLCJlbGVtIiwidHJpbSIsInJlbW92ZUNsYXNzIiwidG9nZ2xlQ2xhc3MiLCJSRUdFWFBfSFlQSEVOQVRFIiwiaHlwaGVuYXRlIiwiZGF0YXNldCIsIm9uY2VTdXBwb3J0ZWQiLCJzdXBwb3J0ZWQiLCJvbmNlIiwibGlzdGVuZXIiLCJyZW1vdmVMaXN0ZW5lciIsImxpc3RlbmVycyIsImFkZExpc3RlbmVyIiwiX2hhbmRsZXIiLCJfZWxlbWVudCRsaXN0ZW5lcnMiLCJfbGVuMiIsIl9rZXkyIiwiRXZlbnQiLCJDdXN0b21FdmVudCIsImRldGFpbCIsImluaXRDdXN0b21FdmVudCIsImdldE9mZnNldCIsImNsaWVudExlZnQiLCJjbGllbnRUb3AiLCJnZXRUcmFuc2Zvcm1zIiwidHJhbnNsYXRlWCIsInRyYW5zbGF0ZVkiLCJJU19TQUZBUkkiLCJnZXRJbWFnZU5hdHVyYWxTaXplcyIsImltYWdlIiwibmV3SW1hZ2UiLCJuYXR1cmFsV2lkdGgiLCJuYXR1cmFsSGVpZ2h0Iiwib25sb2FkIiwic3JjIiwiZ2V0UmVzcG9uc2l2ZUNsYXNzIiwiZ2V0UG9pbnRlciIsImVuZE9ubHkiLCJlbmRYIiwiZW5kWSIsImdldFBvaW50ZXJzQ2VudGVyIiwicG9pbnRlcnMiLCJfcmVmMyIsImluaXRDb250YWluZXIiLCJpbml0Vmlld2VyIiwiaW5pdExpc3QiLCJyZW5kZXJWaWV3ZXIiLCJpbml0Qm9keSIsInNjcm9sbGJhcldpZHRoIiwiaW5uZXJXaWR0aCIsImluaXRpYWxCb2R5UGFkZGluZ1JpZ2h0IiwiaW5pdGlhbEJvZHlDb21wdXRlZFBhZGRpbmdSaWdodCIsImNvbnRhaW5lckRhdGEiLCJ2aWV3ZXJEYXRhIiwicGFyZW50RGF0YSIsImZ1bGxlZCIsInZpZXdlciIsImltYWdlcyIsImRlY29kZVVSSUNvbXBvbmVudCIsImdldEltYWdlTmFtZUZyb21VUkwiLCJnZXRJbWFnZVVSTCIsIm9uTG9hZCIsIm9uRXJyb3IiLCJmaXJzdEVsZW1lbnRDaGlsZCIsImxvYWRJbWFnZSIsInJlbmRlckxpc3QiLCJuZXh0RWxlbWVudFNpYmxpbmciLCJndXR0ZXIiLCJvdXRlcldpZHRoIiwicmVzZXRMaXN0IiwiaW5pdEltYWdlIiwic2l6aW5nSW1hZ2UiLCJmb290ZXJIZWlnaHQiLCJmb290ZXIiLCJ2aWV3ZXJXaWR0aCIsInZpZXdlckhlaWdodCIsIm9sZEltYWdlRGF0YSIsImltYWdlRGF0YSIsImltYWdlSW5pdGlhbGl6aW5nIiwiYWJvcnQiLCJhc3BlY3RSYXRpbyIsIm9sZFJhdGlvIiwicmF0aW8iLCJpbml0aWFsSW1hZ2VEYXRhIiwicmVuZGVySW1hZ2UiLCJfdGhpczMiLCJ2aWV3aW5nIiwibW92aW5nIiwicm90YXRpbmciLCJzY2FsaW5nIiwiem9vbWluZyIsIm9uVHJhbnNpdGlvbkVuZCIsImltYWdlUmVuZGVyaW5nIiwicmVzZXRJbWFnZSIsImV2ZW50cyIsIm9uRHJhZ1N0YXJ0Iiwib25Qb2ludGVyRG93biIsInBvaW50ZXJkb3duIiwib25Qb2ludGVyTW92ZSIsInBvaW50ZXJtb3ZlIiwib25Qb2ludGVyVXAiLCJwb2ludGVydXAiLCJvblJlc2l6ZSIsInJlc2l6ZSIsIm9uV2hlZWwiLCJ3aGVlbCIsInBhc3NpdmUiLCJjYXB0dXJlIiwib25EYmxjbGljayIsImRibGNsaWNrIiwidW5iaW5kIiwiYWN0aW9uIiwibG9jYWxOYW1lIiwiaXNUcnVzdGVkIiwiY2xpY2tDYW52YXNUaW1lb3V0IiwicGxheWVkIiwiZXhpdCIsImZ1bGwiLCJyZXNldCIsImRvdWJsZUNsaWNrSW1hZ2VUaW1lb3V0Iiwib3JpZ2luYWxFdmVudCIsImxvYWQiLCJ0aW1lb3V0Iiwib3JpZ2luYWxJbWFnZSIsInBhcmVudFdpZHRoIiwicGFyZW50SGVpZ2h0IiwiZmlsbGVkIiwid2hpY2giLCJzaG93aW5nIiwiaGlkaW5nIiwicG9pbnRlclR5cGUiLCJjaGFuZ2VkVG91Y2hlcyIsInRvdWNoIiwiaWRlbnRpZmllciIsInBvaW50ZXJJZCIsImlzU3dpdGNoYWJsZSIsImltYWdlQ2xpY2tlZCIsImlzU2hvd24iLCJjbG9zZSIsIm9wZW4iLCJmdWxsc2NyZWVuRWxlbWVudCIsIndlYmtpdEZ1bGxzY3JlZW5FbGVtZW50IiwibW96RnVsbFNjcmVlbkVsZW1lbnQiLCJtc0Z1bGxzY3JlZW5FbGVtZW50IiwicGxheWVyIiwiX3RoaXM0Iiwid2hlZWxpbmciLCJkZWx0YSIsImRlbHRhWSIsIndoZWVsRGVsdGEiLCJtZXRob2RzIiwiaW1tZWRpYXRlIiwiYnVpbGQiLCJ0cmFuc2l0aW9uaW5nIiwiaW5pdGlhbE9mZnNldFdpZHRoIiwiaGlkZUltbWVkaWF0ZWx5Iiwib25WaWV3ZXJUcmFuc2l0aW9uRW5kIiwib25JbWFnZVRyYW5zaXRpb25FbmQiLCJ6b29tVG8iLCJhY3RpdmVJdGVtIiwib25WaWV3ZWQiLCJjb21wbGV0ZSIsIm1heEluZGV4IiwibW92ZVRvIiwiX29yaWdpbmFsRXZlbnQiLCJvbGRYIiwib2xkWSIsImRlZ3JlZSIsInJvdGF0ZVRvIiwib2xkRGVncmVlIiwiX3NjYWxlWCIsIl9zY2FsZVkiLCJfdGhpczUiLCJvbGRTY2FsZVgiLCJvbGRTY2FsZVkiLCJoYXNUb29sdGlwIiwiX3RoaXM2IiwiX3pvb21hYmxlIiwibmV3V2lkdGgiLCJuZXdIZWlnaHQiLCJjZW50ZXIiLCJfdGhpczciLCJ0b3RhbCIsIm9uTG9hZFdoZW5QbGF5IiwicmVxdWVzdEZ1bGxzY3JlZW4iLCJyZWZlcnJlclBvbGljeSIsInBsYXlpbmciLCJfdGhpczgiLCJleGl0RnVsbHNjcmVlbiIsIl90aGlzOSIsImVuZm9yY2VGb2N1cyIsIl90aGlzMTAiLCJjbGVhckVuZm9yY2VGb2N1cyIsIl90aGlzMTEiLCJ0b29sdGlwQm94IiwidG9vbHRpcHBpbmciLCJmYWRpbmciLCJfdGhpczEyIiwiaXNJbWciLCJjaGFuZ2VkSW5kZXhlcyIsImNoYW5nZWRJbmRleCIsImRlc3Ryb3llZCIsImRlbGF5aW5nIiwiaW5pdGlhbGl6aW5nIiwib25TdGFydCIsIm90aGVycyIsIm9uRm9jdXNpbiIsImZ1Y3VzIiwid2Via2l0UmVxdWVzdEZ1bGxzY3JlZW4iLCJFbGVtZW50IiwiQUxMT1dfS0VZQk9BUkRfSU5QVVQiLCJtb3pSZXF1ZXN0RnVsbFNjcmVlbiIsIm1zUmVxdWVzdEZ1bGxzY3JlZW4iLCJ3ZWJraXRFeGl0RnVsbHNjcmVlbiIsIm1vekNhbmNlbEZ1bGxTY3JlZW4iLCJtc0V4aXRGdWxsc2NyZWVuIiwib2Zmc2V0WCIsIm9mZnNldFkiLCJwb2ludGVyczIiLCJyYXRpb3MiLCJwb2ludGVyMiIsIngxIiwieTEiLCJ4MiIsInkyIiwiejEiLCJzcXJ0IiwiZ2V0TWF4Wm9vbVJhdGlvIiwiYWJzb2x1dGVPZmZzZXRYIiwiQW5vdGhlclZpZXdlciIsIlZpZXdlciIsImdldFVuaXF1ZUlEIiwicHJvZ3Jlc3MiLCJ0ZW1wbGF0ZSIsInpvb21CdXR0b25zIiwicm90YXRlQnV0dG9ucyIsInNjYWxlQnV0dG9ucyIsImRlZXAiLCJyb3RhdGVzIiwiZmFjdG9yeSIsInNlbGVjdG9yIiwiY2hpbGRNYXRjaGVyIiwiY2hpbGRGaXJzdCIsIkVudGVyTm9kZSIsImRhdHVtIiwibmFtZXNwYWNlVVJJIiwiX25leHQiLCJfcGFyZW50IiwiYmluZEluZGV4IiwiZ3JvdXBMZW5ndGgiLCJkYXRhTGVuZ3RoIiwiYmluZEtleSIsImtleVZhbHVlIiwibm9kZUJ5S2V5VmFsdWUiLCJrZXlWYWx1ZXMiLCJhcnJheWxpa2UiLCJhc2NlbmRpbmciLCJOYU4iLCJ4aHRtbCIsInhsaW5rIiwieG1sIiwieG1sbnMiLCJwcmVmaXgiLCJuYW1lc3BhY2VzIiwic3BhY2UiLCJhdHRyUmVtb3ZlIiwiYXR0clJlbW92ZU5TIiwiZnVsbG5hbWUiLCJyZW1vdmVBdHRyaWJ1dGVOUyIsImF0dHJDb25zdGFudCIsImF0dHJDb25zdGFudE5TIiwic2V0QXR0cmlidXRlTlMiLCJhdHRyRnVuY3Rpb24iLCJhdHRyRnVuY3Rpb25OUyIsInN0eWxlUmVtb3ZlIiwic3R5bGVDb25zdGFudCIsInByaW9yaXR5Iiwic2V0UHJvcGVydHkiLCJzdHlsZUZ1bmN0aW9uIiwic3R5bGVWYWx1ZSIsImdldFByb3BlcnR5VmFsdWUiLCJwcm9wZXJ0eVJlbW92ZSIsInByb3BlcnR5Q29uc3RhbnQiLCJwcm9wZXJ0eUZ1bmN0aW9uIiwiY2xhc3NBcnJheSIsIkNsYXNzTGlzdCIsIl9ub2RlIiwiX25hbWVzIiwiY2xhc3NlZEFkZCIsImNsYXNzZWRSZW1vdmUiLCJjbGFzc2VkVHJ1ZSIsImNsYXNzZWRGYWxzZSIsImNsYXNzZWRGdW5jdGlvbiIsInRleHRSZW1vdmUiLCJ0ZXh0Q29uc3RhbnQiLCJ0ZXh0RnVuY3Rpb24iLCJodG1sUmVtb3ZlIiwiaHRtbENvbnN0YW50IiwiaHRtbEZ1bmN0aW9uIiwicmFpc2UiLCJsb3dlciIsImNyZWF0b3JJbmhlcml0IiwidXJpIiwiY3JlYXRlRWxlbWVudE5TIiwiY3JlYXRvckZpeGVkIiwibmFtZXNwYWNlIiwiY29uc3RhbnROdWxsIiwic2VsZWN0aW9uX2Nsb25lU2hhbGxvdyIsImNsb25lTm9kZSIsInNlbGVjdGlvbl9jbG9uZURlZXAiLCJwYXJzZVR5cGVuYW1lcyIsInR5cGVuYW1lcyIsInR5cGVuYW1lIiwiX19vbiIsIm9uQWRkIiwiY29udGV4dExpc3RlbmVyIiwicGFyYW1zIiwiZGlzcGF0Y2hDb25zdGFudCIsImRpc3BhdGNoRnVuY3Rpb24iLCJTZWxlY3Rpb24iLCJncm91cHMiLCJwYXJlbnRzIiwiX2dyb3VwcyIsIl9wYXJlbnRzIiwic2VsZWN0Iiwic3ViZ3JvdXBzIiwic3Vibm9kZSIsInN1Ymdyb3VwIiwiYXJyYXlBbGwiLCJzZWxlY3RvckFsbCIsInNlbGVjdENoaWxkIiwiY2hpbGRGaW5kIiwic2VsZWN0Q2hpbGRyZW4iLCJjaGlsZHJlbkZpbHRlciIsIm1hdGNoZXIiLCJlbnRlckdyb3VwIiwidXBkYXRlR3JvdXAiLCJleGl0R3JvdXAiLCJwcmV2aW91cyIsImkwIiwiaTEiLCJfZW50ZXIiLCJfZXhpdCIsInNwYXJzZSIsIm9uZW50ZXIiLCJvbnVwZGF0ZSIsIm9uZXhpdCIsIm1lcmdlIiwib3JkZXIiLCJncm91cHMwIiwiZ3JvdXBzMSIsIm0wIiwibTEiLCJtZXJnZXMiLCJncm91cDAiLCJncm91cDEiLCJjb21wYXJlTm9kZSIsInNvcnRncm91cHMiLCJzb3J0Z3JvdXAiLCJlYWNoIiwiZ2V0QXR0cmlidXRlTlMiLCJjbGFzc2VkIiwiY3JlYXRvciIsIm5vb3AiLCJEaXNwYXRjaCIsInRoYXQiLCJ0YXNrSGVhZCIsInRhc2tUYWlsIiwiY2xvY2tMYXN0IiwiY2xvY2tOb3ciLCJjbG9ja1NrZXciLCJjbG9jayIsInBlcmZvcm1hbmNlIiwic2V0RnJhbWUiLCJjbGVhck5vdyIsIlRpbWVyIiwiX2NhbGwiLCJfdGltZSIsInRpbWVyIiwicmVzdGFydCIsIndha2UiLCJ0aW1lckZsdXNoIiwidDAiLCJ0MiIsInQxIiwiSW5maW5pdHkiLCJzbGVlcCIsIm5hcCIsInBva2UiLCJjbGVhckludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJlbGFwc2VkIiwiZW1wdHlPbiIsImVtcHR5VHdlZW4iLCJ0aW1pbmciLCJzY2hlZHVsZXMiLCJfX3RyYW5zaXRpb24iLCJ0d2VlbiIsInRpY2siLCJkdXJhdGlvbiIsImVhc2UiLCJzY2hlZHVsZSIsInN2Z05vZGUiLCJkZWdyZWVzIiwiUEkiLCJza2V3WCIsImF0YW4yIiwiYXRhbiIsImludGVycG9sYXRlVHJhbnNmb3JtIiwicHhDb21tYSIsInB4UGFyZW4iLCJkZWdQYXJlbiIsInhhIiwieWEiLCJ4YiIsInliIiwiaW50ZXJwb2xhdGVUcmFuc2Zvcm1Dc3MiLCJET01NYXRyaXgiLCJXZWJLaXRDU1NNYXRyaXgiLCJpc0lkZW50aXR5IiwiZGVjb21wb3NlIiwiaW50ZXJwb2xhdGVUcmFuc2Zvcm1TdmciLCJiYXNlVmFsIiwiY29uc29saWRhdGUiLCJtYXRyaXgiLCJ0d2VlblJlbW92ZSIsInR3ZWVuMCIsInR3ZWVuMSIsInR3ZWVuRnVuY3Rpb24iLCJ0d2VlblZhbHVlIiwiX2lkIiwiZGVmaW5pdGlvbiIsIkNvbG9yIiwiZGFya2VyIiwiYnJpZ2h0ZXIiLCJyZUkiLCJyZU4iLCJyZVAiLCJyZUhleCIsInJlUmdiSW50ZWdlciIsInJlUmdiUGVyY2VudCIsInJlUmdiYUludGVnZXIiLCJyZVJnYmFQZXJjZW50IiwicmVIc2xQZXJjZW50IiwicmVIc2xhUGVyY2VudCIsImNvbG9yX2Zvcm1hdEhleCIsImZvcm1hdEhleCIsImNvbG9yX2Zvcm1hdFJnYiIsImZvcm1hdFJnYiIsInJnYm4iLCJSZ2IiLCJyZ2JDb252ZXJ0IiwicmdiX2Zvcm1hdEhleCIsInJnYl9mb3JtYXRSZ2IiLCJjbGFtcGEiLCJjbGFtcGkiLCJIc2wiLCJoc2xDb252ZXJ0IiwiY2xhbXBoIiwiY2xhbXB0IiwiaHNsMnJnYiIsIm0yIiwiYmFzaXMiLCJ2MCIsInYxIiwidjIiLCJ2MyIsInQzIiwiY2hhbm5lbHMiLCJkaXNwbGF5YWJsZSIsImZvcm1hdEhleDgiLCJmb3JtYXRIc2wiLCJjbGFtcCIsIm5vZ2FtbWEiLCJsaW5lYXIiLCJyZ2JHYW1tYSIsImV4cG9uZW50aWFsIiwiZ2FtbWEiLCJyZ2JTcGxpbmUiLCJzcGxpbmUiLCJyZUEiLCJyZUIiLCJhbSIsImJtIiwiYnMiLCJiaSIsIm9uZSIsInplcm8iLCJpbnRlcnBvbGF0ZSIsInZhbHVlMSIsInN0cmluZzAwIiwiaW50ZXJwb2xhdGUwIiwic3RyaW5nMSIsInN0cmluZzAiLCJzdHJpbmcxMCIsImF0dHJJbnRlcnBvbGF0ZSIsImF0dHJJbnRlcnBvbGF0ZU5TIiwiYXR0clR3ZWVuTlMiLCJfdmFsdWUiLCJhdHRyVHdlZW4iLCJkZWxheUZ1bmN0aW9uIiwiZGVsYXlDb25zdGFudCIsImR1cmF0aW9uRnVuY3Rpb24iLCJkdXJhdGlvbkNvbnN0YW50IiwiZWFzZUNvbnN0YW50Iiwib25GdW5jdGlvbiIsIm9uMCIsIm9uMSIsInNpdCIsInN0eWxlSW50ZXJwb2xhdGUiLCJzdHlsZVR3ZWVuIiwidGV4dEludGVycG9sYXRlIiwidGV4dFR3ZWVuIiwiVHJhbnNpdGlvbiIsIl9uYW1lIiwibmV3SWQiLCJzZWxlY3Rpb25fcHJvdG90eXBlIiwiaW5oZXJpdCIsImlkMCIsImlkMSIsInN0eWxlTnVsbCIsImxpc3RlbmVyMCIsInN0eWxlTWF5YmVSZW1vdmUiLCJyZW1vdmVGdW5jdGlvbiIsImVhc2VWYXJ5aW5nIiwicmVqZWN0IiwiaW50ZXJydXB0IiwiZGVmYXVsdFRpbWluZyIsInNvdXJjZUV2ZW50Iiwib3duZXJTVkdFbGVtZW50IiwiY3JlYXRlU1ZHUG9pbnQiLCJwb2ludCIsIm1hdHJpeFRyYW5zZm9ybSIsImdldFNjcmVlbkNUTSIsImludmVyc2UiLCJub25wYXNzaXZlIiwibm9ucGFzc2l2ZWNhcHR1cmUiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJEcmFnRXZlbnQiLCJzdWJqZWN0IiwiZGVmYXVsdENvbnRhaW5lciIsImRlZmF1bHRTdWJqZWN0IiwibW91c2Vkb3dueCIsIm1vdXNlZG93bnkiLCJtb3VzZW1vdmluZyIsInRvdWNoZW5kaW5nIiwidG91Y2hhYmxlIiwiZ2VzdHVyZXMiLCJjbGlja0Rpc3RhbmNlMiIsImRyYWciLCJtb3VzZWRvd25lZCIsInRvdWNoc3RhcnRlZCIsInRvdWNobW92ZWQiLCJ0b3VjaGVuZGVkIiwiZ2VzdHVyZSIsImJlZm9yZXN0YXJ0IiwibW91c2Vtb3ZlZCIsIm1vdXNldXBwZWQiLCJfX25vc2VsZWN0Iiwibm9kcmFnIiwibW91c2UiLCJub2NsaWNrIiwieWVzZHJhZyIsInAwIiwiY2xpY2tEaXN0YW5jZSIsInBpIiwidGF1IiwidGF1RXBzaWxvbiIsIlBhdGgiLCJfeDAiLCJfeTAiLCJfeDEiLCJfeTEiLCJjbG9zZVBhdGgiLCJsaW5lVG8iLCJxdWFkcmF0aWNDdXJ2ZVRvIiwiYmV6aWVyQ3VydmVUbyIsImFyY1RvIiwieDAiLCJ5MCIsIngyMSIsInkyMSIsIngwMSIsInkwMSIsImwwMV8yIiwieDIwIiwieTIwIiwibDIxXzIiLCJsMjBfMiIsImwyMSIsImwwMSIsImFjb3MiLCJ0MDEiLCJ0MjEiLCJhcmMiLCJhMCIsImExIiwiY2N3IiwiY29zIiwic2luIiwiY3ciLCJkYSIsIkxpbmVhciIsImRlZmluZWQiLCJjdXJ2ZSIsImxpbmUiLCJkZWZpbmVkMCIsImxpbmVTdGFydCIsImxpbmVFbmQiLCJhcmVhU3RhcnQiLCJfbGluZSIsImFyZWFFbmQiLCJfcG9pbnQiLCJhcHBseVgiLCJhcHBseVkiLCJpbnZlcnRYIiwiaW52ZXJ0WSIsInJlc2NhbGVYIiwiZG9tYWluIiwicmVzY2FsZVkiLCJPcmRlcmVkTWFwIiwibmV3S2V5IiwiYWRkVG9TdGFydCIsImFkZFRvRW5kIiwiYWRkQmVmb3JlIiwid2l0aG91dCIsInByZXBlbmQiLCJzdWJ0cmFjdCIsImNoaWxkQSIsImNoaWxkQiIsInBvc0EiLCJwb3NCIiwiaUEiLCJpQiIsIm1pblNpemUiLCJub2RlU3RhcnQiLCJkZXNjZW5kYW50cyIsImxlYWZUZXh0Iiwid2l0aFRleHQiLCJjdXRCeUluZGV4Iiwib3RoZXJQb3MiLCJyZXRJbmRleCIsInRvU3RyaW5nSW5uZXIiLCJqb2luZWQiLCJmcm9tQXJyYXkiLCJjb21wYXJlRGVlcCIsInBsYWNlZCIsInJhbmsiLCJqc29uIiwiUmVwbGFjZUVycm9yIiwiU2xpY2UiLCJpbnNlcnRBdCIsImluc2VydEludG8iLCJyZW1vdmVCZXR3ZWVuIiwicmVtb3ZlUmFuZ2UiLCJmcm9tSlNPTiIsIm9wZW5Jc29sYXRpbmciLCJpbmRleFRvIiwib2Zmc2V0VG8iLCJkaXN0IiwicmVwbGFjZU91dGVyIiwiJGFsb25nIiwiZXh0cmEiLCJwcmVwYXJlU2xpY2VGb3JSZXBsYWNlIiwicmVwbGFjZVRocmVlV2F5IiwicmVwbGFjZVR3b1dheSIsImNoZWNrSm9pbiIsIm1haW4iLCJzdWIiLCJqb2luYWJsZSIsIiRhZnRlciIsIiRlbmQiLCJSZXNvbHZlZFBvcyIsInJlc29sdmVEZXB0aCIsImRPZmYiLCJwb3NBdEluZGV4IiwicHJlZCIsIk5vZGVSYW5nZSIsInJlbSIsInJlc29sdmVDYWNoZSIsInJlc29sdmVDYWNoZVBvcyIsInJlc29sdmVDYWNoZVNpemUiLCJlbXB0eUF0dHJzIiwic2FtZVNldCIsImluY2x1ZGVQYXJlbnRzIiwicmVzb2x2ZUNhY2hlZCIsInJhbmdlSGFzTWFyayIsInRvRGVidWdTdHJpbmciLCJ3cmFwTWFya3MiLCJtYXRjaEZyYWdtZW50IiwidHdvIiwiYWxsb3dzTWFya3MiLCJjYW5BcHBlbmQiLCJtYXJrRnJvbUpTT04iLCJUZXh0Tm9kZSIsIkNvbnRlbnRNYXRjaCIsIndyYXBDYWNoZSIsIm5vZGVUeXBlcyIsInN0cmVhbSIsIlRva2VuU3RyZWFtIiwiZXhwciIsInBhcnNlRXhwciIsIm5mYSIsImxhYmVsZWQiLCJleHBsb3JlIiwic3RhdGVzIiwidGVybSIsIm51bGxGcm9tIiwiY21wIiwiZGZhIiwiY29ubmVjdCIsImNvbXBpbGUiLCJleHBycyIsImVkZ2VzIiwid29yayIsImRlYWQiLCJjaGVja0ZvckRlYWRFbmRzIiwiY29tcGF0aWJsZSIsInRvRW5kIiwiZmluaXNoZWQiLCJ0cCIsImNvbXB1dGVkIiwiY29tcHV0ZVdyYXBwaW5nIiwidmlhIiwidG9rZW5zIiwiZWF0IiwidG9rIiwiU3ludGF4RXJyb3IiLCJwYXJzZUV4cHJTZXEiLCJwYXJzZUV4cHJTdWJzY3JpcHQiLCJyZXNvbHZlTmFtZSIsInBhcnNlRXhwckF0b20iLCJwYXJzZUV4cHJSYW5nZSIsInBhcnNlTnVtIiwiZGVmYXVsdHMiLCJhdHRyTmFtZSIsImhhc0RlZmF1bHQiLCJjb21wdXRlQXR0cnMiLCJnaXZlbiIsImluaXRBdHRycyIsIkF0dHJpYnV0ZSIsIm1hcmtTZXQiLCJzZXRGcm9tIiwiY3JlYXRlQ2hlY2tlZCIsImFsbG93c01hcmtUeXBlIiwiYWxsb3dlZE1hcmtzIiwidG9wVHlwZSIsIk1hcmtUeXBlIiwiU2NoZW1hIiwiY29udGVudEV4cHJDYWNoZSIsImNvbnRlbnRFeHByIiwibWFya0V4cHIiLCJnYXRoZXJNYXJrcyIsImV4Y2wiLCJ0b3BOb2RlVHlwZSIsIndyYXBwaW5ncyIsInRhZ3MiLCJub3JtYWxpemVMaXN0cyIsIlBhcnNlQ29udGV4dCIsImFkZEFsbCIsImZpbmlzaCIsIm1heE9wZW4iLCJtYXRjaFRhZyIsIm1hdGNoZXNDb250ZXh0IiwibWF0Y2hTdHlsZSIsImRvbVBhcnNlciIsInNjaGVtYVJ1bGVzIiwiYmxvY2tUYWdzIiwiYWRkcmVzcyIsImFydGljbGUiLCJhc2lkZSIsImJsb2NrcXVvdGUiLCJkZCIsImRpdiIsImRsIiwiZmllbGRzZXQiLCJmaWdjYXB0aW9uIiwiZmlndXJlIiwiZm9ybSIsImgxIiwiaDIiLCJoMyIsImg0IiwiaDUiLCJoNiIsImhncm91cCIsImhyIiwibGkiLCJub3NjcmlwdCIsIm9sIiwicHJlIiwic2VjdGlvbiIsInRhYmxlIiwidWwiLCJpZ25vcmVUYWdzIiwic2NyaXB0IiwibGlzdFRhZ3MiLCJ3c09wdGlvbnNGb3IiLCJPUFRfUFJFU0VSVkVfV1MiLCJOb2RlQ29udGV4dCIsInBlbmRpbmdNYXJrcyIsInNvbGlkIiwiYWN0aXZlTWFya3MiLCJzdGFzaE1hcmtzIiwicG9wRnJvbVN0YXNoTWFyayIsImFwcGx5UGVuZGluZyIsInBlbmRpbmciLCJtYXJrTWF5QXBwbHkiLCJpbmxpbmVDb250ZXh0IiwiaXNPcGVuIiwidG9wQ29udGV4dCIsInRvcE9wdGlvbnMiLCJuZWVkc0Jsb2NrIiwiYWRkRE9NIiwiYWRkVGV4dE5vZGUiLCJyZWFkU3R5bGVzIiwicmUiLCJwYXJzZVN0eWxlcyIsImFkZFBlbmRpbmdNYXJrIiwiYWRkRWxlbWVudCIsInJlbW92ZVBlbmRpbmdNYXJrIiwiZG9tTm9kZUJlZm9yZSIsImluc2VydE5vZGUiLCJmaW5kSW5UZXh0IiwiZmluZEluc2lkZSIsIm1hdGNoQWZ0ZXIiLCJydWxlSUQiLCJwcmV2SXRlbSIsIm5vcm1hbGl6ZUxpc3QiLCJpZ25vcmVGYWxsYmFjayIsImNsb3NlUGFyZW50Iiwic3luYyIsIm9sZE5lZWRzQmxvY2siLCJsZWFmRmFsbGJhY2siLCJhZGRFbGVtZW50QnlSdWxlIiwiY29uc3VtaW5nIiwiZmluZFBsYWNlIiwiY29udGludWVBZnRlciIsInN0YXJ0SW4iLCJmaW5kQXJvdW5kIiwiZmluZEF0UG9pbnQiLCJyb3V0ZSIsImN4IiwiZW50ZXJJbm5lciIsInRleHRibG9ja0Zyb21Db250ZXh0IiwiY2xvc2VFeHRyYSIsInByZXNlcnZlV1MiLCJjdXJyZW50UG9zIiwib3B0aW9uIiwidXNlUm9vdCIsIm1pbkRlcHRoIiwiZmluZFNhbWVNYXJrSW5TZXQiLCJ1cHRvIiwic3Rhc2hNYXJrIiwibXNNYXRjaGVzU2VsZWN0b3IiLCJ3ZWJraXRNYXRjaGVzU2VsZWN0b3IiLCJtb3pNYXRjaGVzU2VsZWN0b3IiLCJET01TZXJpYWxpemVyIiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsIm1hcmtET00iLCJzZXJpYWxpemVNYXJrIiwic2VyaWFsaXplTm9kZUlubmVyIiwicmVuZGVyU3BlYyIsInN0cnVjdHVyZSIsInhtbE5TIiwidGFnTmFtZSIsImlubmVyQ29udGVudCIsImRvbVNlcmlhbGl6ZXIiLCJub2Rlc0Zyb21TY2hlbWEiLCJtYXJrc0Zyb21TY2hlbWEiLCJnYXRoZXJUb0RPTSIsImNsYXNzZXNCeUlkIiwiU2VsZWN0aW9uUmFuZ2UiLCJsYXN0Tm9kZSIsImxhc3RQYXJlbnQiLCJtYXBGcm9tIiwidGV4dE9ubHkiLCJUZXh0U2VsZWN0aW9uIiwiZmluZFNlbGVjdGlvbkluIiwiZmluZEZyb20iLCJBbGxTZWxlY3Rpb24iLCJjbHMiLCJzZWxlY3Rpb25DbGFzcyIsImpzb25JRCIsImdldEJvb2ttYXJrIiwiYmV0d2VlbiIsIndhcm5lZEFib3V0VGV4dFNlbGVjdGlvbiIsImNoZWNrVGV4dFNlbGVjdGlvbiIsIm5lYXIiLCJUZXh0Qm9va21hcmsiLCJkUG9zIiwiTm9kZVNlbGVjdGlvbiIsIk5vZGVCb29rbWFyayIsImlzU2VsZWN0YWJsZSIsIkFsbEJvb2ttYXJrIiwiVHJhbnNhY3Rpb24iLCJjdXJTZWxlY3Rpb25Gb3IiLCJjdXJTZWxlY3Rpb24iLCJzdG9yZWRNYXJrc1NldCIsImFkZFN0ZXAiLCJzZXRUaW1lIiwiaW5oZXJpdE1hcmtzIiwiaXNHZW5lcmljIiwic2Nyb2xsZWRJbnRvVmlldyIsIkZpZWxkRGVzYyIsImJhc2VGaWVsZHMiLCJfbWFya3MiLCJfb2xkIiwiQ29uZmlndXJhdGlvbiIsInBsdWdpbnNCeUtleSIsIkVkaXRvclN0YXRlIiwicm9vdFRyIiwidHJzIiwiYXBwbHlJbm5lciIsImhhdmVOZXciLCJuZXdJbnN0YW5jZSIsIiRjb25maWciLCJwbHVnaW5GaWVsZHMiLCJiaW5kUHJvcHMiLCJQbHVnaW4iLCJjcmVhdGVLZXkiLCJQbHVnaW5LZXkiLCJmYWN0b3IxNiIsInJlY292ZXJJbmRleCIsIk1hcFJlc3VsdCIsImRlbEluZm8iLCJyZWNvdmVyIiwiZGVsZXRlZEJlZm9yZSIsImRlbGV0ZWRBZnRlciIsImRlbGV0ZWRBY3Jvc3MiLCJTdGVwTWFwIiwiaW52ZXJ0ZWQiLCJkaWZmIiwicmVjb3Zlck9mZnNldCIsImFzc29jIiwiX21hcCIsInNpbXBsZSIsIm9sZEluZGV4IiwibmV3SW5kZXgiLCJvbGRTaXplIiwibmV3U2l6ZSIsIk1hcHBpbmciLCJtaXJyb3IiLCJhcHBlbmRNYXAiLCJtaXJyb3JzIiwic2V0TWlycm9yIiwiYXBwZW5kTWFwcGluZyIsInN0YXJ0U2l6ZSIsIm1pcnIiLCJnZXRNaXJyb3IiLCJhcHBlbmRNYXBwaW5nSW52ZXJ0ZWQiLCJ0b3RhbFNpemUiLCJjb3JyIiwic3RlcHNCeUlEIiwiU3RlcCIsImdldE1hcCIsInN0ZXBUeXBlIiwic3RlcENsYXNzIiwiU3RlcFJlc3VsdCIsImZhaWxlZCIsImZhaWwiLCJtYXBGcmFnbWVudCIsIkFkZE1hcmtTdGVwIiwib2xkU2xpY2UiLCJmcm9tUmVwbGFjZSIsIlJlbW92ZU1hcmtTdGVwIiwiUmVwbGFjZVN0ZXAiLCJjb250ZW50QmV0d2VlbiIsIlJlcGxhY2VBcm91bmRTdGVwIiwiZ2FwRnJvbSIsImdhcFRvIiwiZ2FwIiwiaW5zZXJ0ZWQiLCJjYW5DdXQiLCJsaWZ0VGFyZ2V0IiwiaW5uZXJSYW5nZSIsImFyb3VuZCIsImZpbmRXcmFwcGluZ091dHNpZGUiLCJpbm5lck1hdGNoIiwiZmluZFdyYXBwaW5nSW5zaWRlIiwid2l0aEF0dHJzIiwiY2FuU3BsaXQiLCJ0eXBlc0FmdGVyIiwiaW5uZXJUeXBlIiwicmVzdCIsImJhc2VUeXBlIiwiY2FuSm9pbiIsImRyb3BQb2ludCIsInBhc3MiLCJmaXRzIiwicmVwbGFjZVN0ZXAiLCJmaXRzVHJpdmlhbGx5IiwiRml0dGVyIiwiZml0IiwidW5wbGFjZWQiLCJmcm9udGllciIsImZpbmRGaXR0YWJsZSIsInBsYWNlTm9kZXMiLCJvcGVuTW9yZSIsImRyb3BOb2RlIiwibW92ZUlubGluZSIsIm11c3RNb3ZlSW5saW5lIiwicGxhY2VkU2l6ZSIsInNsaWNlRGVwdGgiLCJjb250ZW50QXQiLCJmcm9udGllckRlcHRoIiwiaW5qZWN0Iiwib3BlbkF0RW5kIiwiZHJvcEZyb21GcmFnbWVudCIsImNsb3NlRnJvbnRpZXJOb2RlIiwib3BlbkZyb250aWVyTm9kZSIsInRha2VuIiwib3BlbkVuZENvdW50IiwiY2xvc2VOb2RlU3RhcnQiLCJhZGRUb0ZyYWdtZW50IiwiY29udGVudEFmdGVyRml0cyIsImZpbmRDbG9zZUxldmVsIiwiZHJvcElubmVyIiwiaW52YWxpZE1hcmtzIiwiZGVmaW5lc0NvbnRlbnQiLCJkZWZpbmluZ0ZvckNvbnRlbnQiLCJjbG9zZUZyYWdtZW50Iiwib2xkT3BlbiIsIm5ld09wZW4iLCJjb3ZlcmVkRGVwdGhzIiwiVHJhbnNmb3JtRXJyb3IiLCJUcmFuc2Zvcm0iLCJ0YXJnZXREZXB0aHMiLCJwcmVmZXJyZWRUYXJnZXQiLCJ1bnNoaWZ0IiwiZGVmaW5pbmdBc0NvbnRleHQiLCJwcmVmZXJyZWRUYXJnZXRJbmRleCIsImxlZnROb2RlcyIsInByZWZlcnJlZERlcHRoIiwiZGVmIiwib3BlbkRlcHRoIiwidGFyZ2V0RGVwdGgiLCJleHBhbmQiLCJzdGFydFN0ZXBzIiwiaW5zZXJ0UG9pbnQiLCJjb3ZlcmVkIiwiZ2FwU3RhcnQiLCJnYXBFbmQiLCJzcGxpdHRpbmciLCJjYW5DaGFuZ2VUeXBlIiwic3RhcnRNIiwiZW5kTSIsIm5ld05vZGUiLCJ0eXBlQWZ0ZXIiLCJyZW1vdmluZyIsImFkZGluZyIsIm5ld1NldCIsInRvUmVtb3ZlIiwicGFyZW50VHlwZSIsImRlbFN0ZXBzIiwiYWxsb3dlZCIsInNldElmVW5kZWZpbmVkIiwiY3JlYXRlVCIsImFyciIsImFwcGVuZFRvIiwiZGVzdCIsIl9vYnNlcnZlcnMiLCJfZiIsIm9ic2VydmVycyIsImNlaWwiLCJpbXVsIiwibG9nMTAiLCJsb2cyIiwibG9nIiwidHJpbUxlZnRSZWdleCIsInNpZ24iLCJmcm9tQ29kZVBvaW50IiwiZnJvbUNhbWVsQ2FzZVJlZ2V4IiwiZnJvbUNhbWVsQ2FzZSIsInNlcGFyYXRvciIsIlRleHRFbmNvZGVyIiwidXRmOFRleHREZWNvZGVyIiwiVGV4dERlY29kZXIiLCJmYXRhbCIsImlnbm9yZUJPTSIsImRlY29kZSIsIl9sb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwiZ2V0SXRlbSIsInVzZVBvbHlmaWxsIiwibG9jYWxTdG9yYWdlIiwidmFyU3RvcmFnZSIsInJlbGVhc2UiLCJwYXJncyIsImFyZ3YiLCJjdXJyUGFyYW1OYW1lIiwicGFyZyIsImt2IiwiY29tcHV0ZVBhcmFtcyIsImhhc1BhcmFtIiwiZW52IiwiZ2V0VmFyaWFibGUiLCJjcmVhdGVVaW50OEFycmF5Vmlld0Zyb21BcnJheUJ1ZmZlciIsIkJJVDgiLCJCSVRTNyIsImlzSW50ZWdlciIsIk1BWF9TQUZFX0lOVEVHRVIiLCJNSU5fU0FGRV9JTlRFR0VSIiwibnVtIiwiaXNGaW5pdGUiLCJFbmNvZGVyIiwiY3BvcyIsImNidWYiLCJidWZzIiwiY3JlYXRlRW5jb2RlciIsInRvVWludDhBcnJheSIsImVuY29kZXIiLCJ1aW50OGFyciIsIndyaXRlIiwiYnVmZmVyTGVuIiwid3JpdGVVaW50OCIsIndyaXRlVmFyVWludCIsIndyaXRlVmFySW50IiwiaXNOZWdhdGl2ZSIsIndyaXRlVmFyU3RyaW5nIiwiZW5jb2RlZFN0cmluZyIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiY29kZVBvaW50QXQiLCJ3cml0ZVVpbnQ4QXJyYXkiLCJ1aW50OEFycmF5IiwibGVmdENvcHlMZW4iLCJyaWdodENvcHlMZW4iLCJzdWJhcnJheSIsIndyaXRlVmFyVWludDhBcnJheSIsIndyaXRlT25EYXRhVmlldyIsInZlcmlmeUxlbiIsImR2aWV3IiwiZmxvYXRUZXN0QmVkIiwid3JpdGVBbnkiLCJzZXRGbG9hdDMyIiwiZ2V0RmxvYXQzMiIsIndyaXRlRmxvYXQzMiIsInNldEZsb2F0NjQiLCJ3cml0ZUZsb2F0NjQiLCJzZXRCaWdJbnQ2NCIsIndyaXRlQmlnSW50NjQiLCJSbGVFbmNvZGVyIiwid3JpdGVyIiwiZmx1c2hVaW50T3B0UmxlRW5jb2RlciIsIlVpbnRPcHRSbGVFbmNvZGVyIiwiZmx1c2hJbnREaWZmT3B0UmxlRW5jb2RlciIsImVuY29kZWREaWZmIiwiSW50RGlmZk9wdFJsZUVuY29kZXIiLCJTdHJpbmdFbmNvZGVyIiwic2FyciIsImxlbnNFIiwiaXNvQ3J5cHRvIiwiY3J5cHRvIiwiYnVmIiwiZ2V0UmFuZG9tVmFsdWVzIiwidWludDMyIiwiVWludDMyQXJyYXkiLCJ1dWlkdjRUZW1wbGF0ZSIsInV1aWR2NCIsIm1ldGhvZFVuaW1wbGVtZW50ZWQiLCJ1bmV4cGVjdGVkQ2FzZSIsImNhbGxBbGwiLCJmcyIsIlBhaXIiLCJnZXRVbml4VGltZSIsIkVMRU1FTlRfTk9ERSIsIlRFWFRfTk9ERSIsIkNEQVRBX1NFQ1RJT05fTk9ERSIsIkNPTU1FTlRfTk9ERSIsIkRPQ1VNRU5UX05PREUiLCJET0NVTUVOVF9UWVBFX05PREUiLCJET0NVTUVOVF9GUkFHTUVOVF9OT0RFIiwiQk9MRCIsIlVOQk9MRCIsIkJMVUUiLCJHUkVZIiwiR1JFRU4iLCJSRUQiLCJQVVJQTEUiLCJPUkFOR0UiLCJVTkNPTE9SIiwiX2Jyb3dzZXJTdHlsZU1hcCIsIl9ub2RlU3R5bGVNYXAiLCJjb21wdXRlTG9nZ2luZ0FyZ3MiLCJzdHJCdWlsZGVyIiwibG9nQXJncyIsImN1cnJlbnRTdHlsZSIsInJlcyIsInZjb25zb2xlcyIsImNyZWF0ZUl0ZXJhdG9yIiwiaXRlcmF0b3JNYXAiLCJmbWFwIiwiRGVsZXRlSXRlbSIsIkRlbGV0ZVNldCIsImNsaWVudHMiLCJpdGVyYXRlRGVsZXRlZFN0cnVjdHMiLCJkcyIsImRlbGV0ZXMiLCJjbGllbnRpZCIsInN0cnVjdHMiLCJzdG9yZSIsIml0ZXJhdGVTdHJ1Y3RzIiwiaXNEZWxldGVkIiwiZGlzIiwiY2xpZW50IiwibWlkaW5kZXgiLCJtaWQiLCJtaWRjbG9jayIsImZpbmRJbmRleERTIiwic29ydEFuZE1lcmdlRGVsZXRlU2V0IiwiZGVscyIsIm1lcmdlRGVsZXRlU2V0cyIsImRzcyIsImRzc0kiLCJkZWxzTGVmdCIsImFkZFRvRGVsZXRlU2V0IiwiZ2VuZXJhdGVOZXdDbGllbnRJZCIsIkRvYyIsImd1aWQiLCJjb2xsZWN0aW9uaWQiLCJnYyIsImdjRmlsdGVyIiwiYXV0b0xvYWQiLCJzaG91bGRMb2FkIiwiY2xpZW50SUQiLCJzaGFyZSIsIlN0cnVjdFN0b3JlIiwiX3RyYW5zYWN0aW9uIiwiX3RyYW5zYWN0aW9uQ2xlYW51cHMiLCJzdWJkb2NzIiwiX2l0ZW0iLCJpc0xvYWRlZCIsIndoZW5Mb2FkZWQiLCJ0cmFuc2FjdCIsInN1YmRvY3NMb2FkZWQiLCJnZXRTdWJkb2NzIiwiZ2V0U3ViZG9jR3VpZHMiLCJUeXBlQ29uc3RydWN0b3IiLCJBYnN0cmFjdFR5cGUiLCJfaW50ZWdyYXRlIiwiQ29uc3RyIiwiX3N0YXJ0IiwiX2xlbmd0aCIsImdldEFycmF5IiwiWUFycmF5IiwiWVRleHQiLCJZTWFwIiwiZ2V0WG1sRnJhZ21lbnQiLCJZWG1sRnJhZ21lbnQiLCJzdWJkb2MiLCJzdWJkb2NzQWRkZWQiLCJzdWJkb2NzUmVtb3ZlZCIsImV2ZW50TmFtZSIsIlVwZGF0ZUVuY29kZXJWMSIsInJlc3RFbmNvZGVyIiwicmVzZXREc0N1clZhbCIsIndyaXRlRHNDbG9jayIsIndyaXRlRHNMZW4iLCJ3cml0ZUxlZnRJRCIsIndyaXRlUmlnaHRJRCIsIndyaXRlQ2xpZW50Iiwid3JpdGVJbmZvIiwiaW5mbyIsIndyaXRlU3RyaW5nIiwid3JpdGVQYXJlbnRJbmZvIiwiaXNZS2V5Iiwid3JpdGVUeXBlUmVmIiwid3JpdGVMZW4iLCJ3cml0ZUJ1ZiIsIndyaXRlSlNPTiIsImVtYmVkIiwid3JpdGVLZXkiLCJVcGRhdGVFbmNvZGVyVjIiLCJkc0N1cnJWYWwiLCJrZXlNYXAiLCJrZXlDbG9jayIsImtleUNsb2NrRW5jb2RlciIsImNsaWVudEVuY29kZXIiLCJsZWZ0Q2xvY2tFbmNvZGVyIiwicmlnaHRDbG9ja0VuY29kZXIiLCJpbmZvRW5jb2RlciIsInN0cmluZ0VuY29kZXIiLCJwYXJlbnRJbmZvRW5jb2RlciIsInR5cGVSZWZFbmNvZGVyIiwibGVuRW5jb2RlciIsIkV2ZW50SGFuZGxlciIsImNyZWF0ZUV2ZW50SGFuZGxlciIsImFkZEV2ZW50SGFuZGxlckxpc3RlbmVyIiwiZXZlbnRIYW5kbGVyIiwicmVtb3ZlRXZlbnRIYW5kbGVyTGlzdGVuZXIiLCJjYWxsRXZlbnRIYW5kbGVyTGlzdGVuZXJzIiwiYXJnMCIsImFyZzEiLCJJRCIsImNvbXBhcmVJRHMiLCJjcmVhdGVJRCIsIlNuYXBzaG90Iiwic3YiLCJpc1Zpc2libGUiLCJzbSIsInNuYXBzaG90Iiwic3BsaXRTbmFwc2hvdEFmZmVjdGVkU3RydWN0cyIsImdldEl0ZW1DbGVhblN0YXJ0IiwicGVuZGluZ1N0cnVjdHMiLCJwZW5kaW5nRHMiLCJnZXRTdGF0ZVZlY3RvciIsInN0cnVjdCIsImxhc3RTdHJ1Y3QiLCJhZGRTdHJ1Y3QiLCJmaW5kSW5kZXhTUyIsImZpbmRJbmRleENsZWFuU3RhcnQiLCJJdGVtIiwic3BsaXRJdGVtIiwiZ2V0SXRlbUNsZWFuRW5kIiwiR0MiLCJjbG9ja1N0YXJ0IiwiY2xvY2tFbmQiLCJkZWxldGVTZXQiLCJiZWZvcmVTdGF0ZSIsImFmdGVyU3RhdGUiLCJjaGFuZ2VkUGFyZW50VHlwZXMiLCJfbWVyZ2VTdHJ1Y3RzIiwid3JpdGVVcGRhdGVNZXNzYWdlRnJvbVRyYW5zYWN0aW9uIiwiX3NtIiwic3RhcnROZXdTdHJ1Y3RzIiwiZmlyc3RTdHJ1Y3QiLCJ3cml0ZVN0cnVjdHMiLCJ3cml0ZUNsaWVudHNTdHJ1Y3RzIiwid3JpdGVTdHJ1Y3RzRnJvbVRyYW5zYWN0aW9uIiwiZHNpdGVtcyIsIndyaXRlRGVsZXRlU2V0IiwiYWRkQ2hhbmdlZFR5cGVUb1RyYW5zYWN0aW9uIiwicGFyZW50U3ViIiwidHJ5VG9NZXJnZVdpdGhMZWZ0IiwibWVyZ2VXaXRoIiwiY2xlYW51cFRyYW5zYWN0aW9ucyIsInRyYW5zYWN0aW9uQ2xlYW51cHMiLCJtZXJnZVN0cnVjdHMiLCJzdWJzIiwiaXRlbXR5cGUiLCJfY2FsbE9ic2VydmVyIiwiZXZlbnQxIiwiZXZlbnQyIiwiX2RFSCIsImRlbGV0ZUl0ZW1zIiwiZGkiLCJkZWxldGVJdGVtIiwiZW5kRGVsZXRlSXRlbUNsb2NrIiwic2kiLCJ0cnlHY0RlbGV0ZVNldCIsInRyeU1lcmdlRGVsZXRlU2V0IiwiYmVmb3JlQ2xvY2siLCJmaXJzdENoYW5nZVBvcyIsInJlcGxhY2VkU3RydWN0UG9zIiwidmMiLCJwcmludCIsImxvYWRlZCIsImluaXRpYWxDYWxsIiwiU3RhY2tJdGVtIiwiZGVsZXRpb25zIiwiaW5zZXJ0aW9ucyIsImNsZWFyVW5kb01hbmFnZXJTdGFja0l0ZW0iLCJ1bSIsInN0YWNrSXRlbSIsInNjb3BlIiwia2VlcEl0ZW0iLCJwb3BTdGFja0l0ZW0iLCJ1bmRvTWFuYWdlciIsImV2ZW50VHlwZSIsIl90ciIsIml0ZW1zVG9SZWRvIiwiaXRlbXNUb0RlbGV0ZSIsInBlcmZvcm1lZENoYW5nZSIsInJlZG9uZSIsImZvbGxvd1JlZG9uZSIsInJlZG9JdGVtIiwiaWdub3JlUmVtb3RlTWFwQ2hhbmdlcyIsImRlbGV0ZUZpbHRlciIsInN1YlByb3BzIiwiX3NlYXJjaE1hcmtlciIsIlVuZG9NYW5hZ2VyIiwidHlwZVNjb3BlIiwiY2FwdHVyZVRpbWVvdXQiLCJ0cmFja2VkT3JpZ2lucyIsImFkZFRvU2NvcGUiLCJ1bmRvU3RhY2siLCJyZWRvU3RhY2siLCJ1bmRvaW5nIiwicmVkb2luZyIsImxhc3RDaGFuZ2UiLCJhZnRlclRyYW5zYWN0aW9uSGFuZGxlciIsInN0b3BDYXB0dXJpbmciLCJlbmRDbG9jayIsInN0YXJ0Q2xvY2siLCJkaWRBZGQiLCJsYXN0T3AiLCJjaGFuZ2VFdmVudCIsInl0eXBlcyIsInl0eXBlIiwieXQiLCJhZGRUcmFja2VkT3JpZ2luIiwicmVtb3ZlVHJhY2tlZE9yaWdpbiIsImNsZWFyVW5kb1N0YWNrIiwiY2xlYXJSZWRvU3RhY2siLCJjYW5VbmRvIiwiY2FuUmVkbyIsInVuZG9TdGFja0NsZWFyZWQiLCJyZWRvU3RhY2tDbGVhcmVkIiwidW5kbyIsInJlZG8iLCJZRXZlbnQiLCJfY2hhbmdlcyIsIl9rZXlzIiwiX2RlbHRhIiwiZ2V0UGF0aFRvIiwiYWRkcyIsImNoYW5nZXMiLCJwYWNrT3AiLCJyZXRhaW4iLCJnbG9iYWxTZWFyY2hNYXJrZXJUaW1lc3RhbXAiLCJBcnJheVNlYXJjaE1hcmtlciIsIm1hcmtlciIsInRpbWVzdGFtcCIsIm92ZXJ3cml0ZU1hcmtlciIsImZpbmRNYXJrZXIiLCJ5YXJyYXkiLCJwaW5kZXgiLCJyZWZyZXNoTWFya2VyVGltZXN0YW1wIiwiY291bnRhYmxlIiwic2VhcmNoTWFya2VyIiwicG0iLCJtYXJrUG9zaXRpb24iLCJ1cGRhdGVNYXJrZXJDaGFuZ2VzIiwiY2FsbFR5cGVPYnNlcnZlcnMiLCJjaGFuZ2VkVHlwZSIsIl9lSCIsIl9jb3B5IiwiX3dyaXRlIiwiX2ZpcnN0IiwicGFyZW50U3VicyIsIm9ic2VydmVEZWVwIiwidW5vYnNlcnZlIiwidW5vYnNlcnZlRGVlcCIsInR5cGVMaXN0U2xpY2UiLCJjcyIsInR5cGVMaXN0VG9BcnJheSIsInR5cGVMaXN0Rm9yRWFjaCIsInR5cGVMaXN0TWFwIiwidHlwZUxpc3RDcmVhdGVJdGVyYXRvciIsImN1cnJlbnRDb250ZW50IiwiY3VycmVudENvbnRlbnRJbmRleCIsInR5cGVMaXN0R2V0IiwidHlwZUxpc3RJbnNlcnRHZW5lcmljc0FmdGVyIiwicmVmZXJlbmNlSXRlbSIsIm93bkNsaWVudElkIiwianNvbkNvbnRlbnQiLCJwYWNrSnNvbkNvbnRlbnQiLCJsYXN0SWQiLCJDb250ZW50QW55IiwiaW50ZWdyYXRlIiwiQ29udGVudEJpbmFyeSIsIkNvbnRlbnREb2MiLCJDb250ZW50VHlwZSIsImxlbmd0aEV4Y2VlZGVkIiwidHlwZUxpc3RJbnNlcnRHZW5lcmljcyIsInR5cGVMaXN0RGVsZXRlIiwic3RhcnRMZW5ndGgiLCJ0eXBlTWFwRGVsZXRlIiwidHlwZU1hcFNldCIsInR5cGVNYXBHZXQiLCJ0eXBlTWFwR2V0QWxsIiwidHlwZU1hcEhhcyIsImNyZWF0ZU1hcEl0ZXJhdG9yIiwiWUFycmF5RXZlbnQiLCJfcHJlbGltQ29udGVudCIsIm1heE1hcmtlciIsImN1cnJNYXJrZXIiLCJ0eXBlTGlzdFB1c2hHZW5lcmljcyIsIllBcnJheVJlZklEIiwiWU1hcEV2ZW50IiwieW1hcCIsImtleXNDaGFuZ2VkIiwiWU1hcFJlZklEIiwiZXF1YWxBdHRycyIsImhhc1Byb3BlcnR5IiwiSXRlbVRleHRMaXN0UG9zaXRpb24iLCJjdXJyZW50QXR0cmlidXRlcyIsImZvcndhcmQiLCJDb250ZW50Rm9ybWF0IiwidXBkYXRlQ3VycmVudEF0dHJpYnV0ZXMiLCJmaW5kTmV4dFBvc2l0aW9uIiwiZmluZFBvc2l0aW9uIiwiaW5zZXJ0TmVnYXRlZEF0dHJpYnV0ZXMiLCJjdXJyUG9zIiwibmVnYXRlZEF0dHJpYnV0ZXMiLCJuZXh0Rm9ybWF0IiwibWluaW1pemVBdHRyaWJ1dGVDaGFuZ2VzIiwiaW5zZXJ0QXR0cmlidXRlcyIsImN1cnJlbnRWYWwiLCJDb250ZW50U3RyaW5nIiwiQ29udGVudEVtYmVkIiwiZ2V0TGVuZ3RoIiwiZm9ybWF0VGV4dCIsIml0ZXJhdGlvbkxvb3AiLCJuZXdsaW5lcyIsImNsZWFudXBGb3JtYXR0aW5nR2FwIiwiY3VyciIsInN0YXJ0QXR0cmlidXRlcyIsImN1cnJBdHRyaWJ1dGVzIiwiZW5kQXR0cmlidXRlcyIsImNsZWFudXBzIiwicmVhY2hlZEVuZE9mQ3VyciIsImRlbGV0ZVRleHQiLCJzdGFydEF0dHJzIiwiWVRleHRFdmVudCIsInl0ZXh0IiwiY2hpbGRMaXN0Q2hhbmdlZCIsImRlbGV0ZUxlbiIsImFkZE9wIiwib3AiLCJjdXJWYWwiLCJfcGVuZGluZyIsImFwcGx5RGVsdGEiLCJ0b0RlbHRhIiwiZm91bmRGb3JtYXR0aW5nSXRlbSIsImFmdGVyQ2xvY2siLCJjbGVhbnVwWVRleHRGb3JtYXR0aW5nIiwiY2xlYW51cENvbnRleHRsZXNzRm9ybWF0dGluZ0dhcCIsInNhbml0aXplIiwiaW5zIiwicHJldlNuYXBzaG90IiwiY29tcHV0ZVlDaGFuZ2UiLCJvcHMiLCJwYWNrU3RyIiwidXNlciIsImluc2VydEVtYmVkIiwiYXR0cmlidXRlVmFsdWUiLCJZVGV4dFJlZklEIiwiWVhtbFRyZWVXYWxrZXIiLCJfZmlsdGVyIiwiX2N1cnJlbnROb2RlIiwiX2ZpcnN0Q2FsbCIsIllYbWxFbGVtZW50IiwiY3JlYXRlVHJlZVdhbGtlciIsInF1ZXJ5IiwiWVhtbEV2ZW50IiwiX2RvY3VtZW50IiwiaG9va3MiLCJfY3JlYXRlQXNzb2NpYXRpb24iLCJ4bWxUeXBlIiwiaW5zZXJ0QWZ0ZXIiLCJyZWZJdGVtIiwicGMiLCJZWG1sRnJhZ21lbnRSZWZJRCIsIl9wcmVsaW1BdHRycyIsInByZXZTaWJsaW5nIiwic3RyaW5nQnVpbGRlciIsImtleXNMZW4iLCJ0b0xvY2FsZUxvd2VyQ2FzZSIsInl4bWwiLCJZWG1sRWxlbWVudFJlZklEIiwiYXR0cmlidXRlc0NoYW5nZWQiLCJBYnN0cmFjdFN0cnVjdCIsImVuY29kaW5nUmVmIiwiZ2V0TWlzc2luZyIsImlzQ291bnRhYmxlIiwiZ2V0UmVmIiwiQ29udGVudERlbGV0ZWQiLCJtYXJrRGVsZXRlZCIsImZpcnN0Q2hhckNvZGUiLCJuZXh0SUQiLCJsZWZ0SXRlbSIsInJpZ2h0SXRlbSIsInJpZ2h0T3JpZ2luIiwicmVkb2l0ZW1zIiwib3duQ2xpZW50SUQiLCJwYXJlbnRJdGVtIiwibGVmdFRyYWNlIiwicmlnaHRUcmFjZSIsIm5leHRDbG9jayIsIm5leHRJZCIsInJlZG9uZUl0ZW0iLCJpc01hcmtlZCIsImRvS2VlcCIsImRvRGVsZXRlIiwiY29uZmxpY3RpbmdJdGVtcyIsIml0ZW1zQmVmb3JlT3JpZ2luIiwicGFyZW50R0NkIiwibmV3U3RydWN0IiwicmVwbGFjZVN0cnVjdCIsInlrZXkiLCJmaW5kUm9vdFR5cGVLZXkiLCJnbG8iLCJpbXBvcnRJZGVudGlmaWVyIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImNodW5rSWRzIiwibm90RnVsZmlsbGVkIiwiZnVsZmlsbGVkIiwiZ2V0dGVyIiwibW9kZSIsIm5zIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImdsb2JhbFRoaXMiLCJubWQiLCJwYXRocyIsImluc3RhbGxlZENodW5rcyIsImNodW5rSWQiLCJ3ZWJwYWNrSnNvbnBDYWxsYmFjayIsInBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uIiwibW9yZU1vZHVsZXMiLCJydW50aW1lIiwiY2h1bmtMb2FkaW5nR2xvYmFsIiwiX193ZWJwYWNrX2V4cG9ydHNfXyJdLCJzb3VyY2VSb290IjoiIn0=