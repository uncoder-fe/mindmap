/*! For license information please see common-e5bca7e4.50023345b484ebc29c7d.js.LICENSE.txt */
"use strict";(self.webpackChunkmindmap=self.webpackChunkmindmap||[]).push([[682],{94210:(e,t,r)=>{r.d(t,{xS:()=>He});var n=r(67294),o=r(79941),a=function(e,t,r,n,o){var a=o.clientWidth,i=o.clientHeight,l="number"==typeof e.pageX?e.pageX:e.touches[0].pageX,s="number"==typeof e.pageY?e.pageY:e.touches[0].pageY,p=l-(o.getBoundingClientRect().left+window.pageXOffset),c=s-(o.getBoundingClientRect().top+window.pageYOffset);if("vertical"===r){var u;if(u=c<0?0:c>i?1:Math.round(100*c/i)/100,t.a!==u)return{h:t.h,s:t.s,l:t.l,a:u,source:"rgb"}}else{var h;if(n!==(h=p<0?0:p>a?1:Math.round(100*p/a)/100))return{h:t.h,s:t.s,l:t.l,a:h,source:"rgb"}}return null},i={},l=function(e,t,r,n){var o=e+"-"+t+"-"+r+(n?"-server":"");if(i[o])return i[o];var a=function(e,t,r,n){if("undefined"==typeof document&&!n)return null;var o=n?new n:document.createElement("canvas");o.width=2*r,o.height=2*r;var a=o.getContext("2d");return a?(a.fillStyle=e,a.fillRect(0,0,o.width,o.height),a.fillStyle=t,a.fillRect(0,0,r,r),a.translate(r,r),a.fillRect(0,0,r,r),o.toDataURL()):null}(e,t,r,n);return i[o]=a,a},s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},p=function(e){var t=e.white,r=e.grey,a=e.size,i=e.renderers,p=e.borderRadius,c=e.boxShadow,u=e.children,h=(0,o.ZP)({default:{grid:{borderRadius:p,boxShadow:c,absolute:"0px 0px 0px 0px",background:"url("+l(t,r,a,i.canvas)+") center left"}}});return(0,n.isValidElement)(u)?n.cloneElement(u,s({},u.props,{style:s({},u.props.style,h.grid)})):n.createElement("div",{style:h.grid})};p.defaultProps={size:8,white:"transparent",grey:"rgba(0,0,0,.08)",renderers:{}};const c=p;var u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},h=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}();function d(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function f(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}const b=function(e){function t(){var e,r,n;d(this,t);for(var o=arguments.length,i=Array(o),l=0;l<o;l++)i[l]=arguments[l];return r=n=f(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),n.handleChange=function(e){var t=a(e,n.props.hsl,n.props.direction,n.props.a,n.container);t&&"function"==typeof n.props.onChange&&n.props.onChange(t,e)},n.handleMouseDown=function(e){n.handleChange(e),window.addEventListener("mousemove",n.handleChange),window.addEventListener("mouseup",n.handleMouseUp)},n.handleMouseUp=function(){n.unbindEventListeners()},n.unbindEventListeners=function(){window.removeEventListener("mousemove",n.handleChange),window.removeEventListener("mouseup",n.handleMouseUp)},f(n,r)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),h(t,[{key:"componentWillUnmount",value:function(){this.unbindEventListeners()}},{key:"render",value:function(){var e=this,t=this.props.rgb,r=(0,o.ZP)({default:{alpha:{absolute:"0px 0px 0px 0px",borderRadius:this.props.radius},checkboard:{absolute:"0px 0px 0px 0px",overflow:"hidden",borderRadius:this.props.radius},gradient:{absolute:"0px 0px 0px 0px",background:"linear-gradient(to right, rgba("+t.r+","+t.g+","+t.b+", 0) 0%,\n           rgba("+t.r+","+t.g+","+t.b+", 1) 100%)",boxShadow:this.props.shadow,borderRadius:this.props.radius},container:{position:"relative",height:"100%",margin:"0 3px"},pointer:{position:"absolute",left:100*t.a+"%"},slider:{width:"4px",borderRadius:"1px",height:"8px",boxShadow:"0 0 2px rgba(0, 0, 0, .6)",background:"#fff",marginTop:"1px",transform:"translateX(-2px)"}},vertical:{gradient:{background:"linear-gradient(to bottom, rgba("+t.r+","+t.g+","+t.b+", 0) 0%,\n           rgba("+t.r+","+t.g+","+t.b+", 1) 100%)"},pointer:{left:0,top:100*t.a+"%"}},overwrite:u({},this.props.style)},{vertical:"vertical"===this.props.direction,overwrite:!0});return n.createElement("div",{style:r.alpha},n.createElement("div",{style:r.checkboard},n.createElement(c,{renderers:this.props.renderers})),n.createElement("div",{style:r.gradient}),n.createElement("div",{style:r.container,ref:function(t){return e.container=t},onMouseDown:this.handleMouseDown,onTouchMove:this.handleChange,onTouchStart:this.handleChange},n.createElement("div",{style:r.pointer},this.props.pointer?n.createElement(this.props.pointer,this.props):n.createElement("div",{style:r.slider}))))}}]),t}(n.PureComponent||n.Component);var g=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),x=[38,40],v=1;const y=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return r.handleBlur=function(){r.state.blurValue&&r.setState({value:r.state.blurValue,blurValue:null})},r.handleChange=function(e){r.setUpdatedValue(e.target.value,e)},r.handleKeyDown=function(e){var t,n=function(e){return Number(String(e).replace(/%/g,""))}(e.target.value);if(!isNaN(n)&&(t=e.keyCode,x.indexOf(t)>-1)){var o=r.getArrowOffset(),a=38===e.keyCode?n+o:n-o;r.setUpdatedValue(a,e)}},r.handleDrag=function(e){if(r.props.dragLabel){var t=Math.round(r.props.value+e.movementX);t>=0&&t<=r.props.dragMax&&r.props.onChange&&r.props.onChange(r.getValueObjectWithLabel(t),e)}},r.handleMouseDown=function(e){r.props.dragLabel&&(e.preventDefault(),r.handleDrag(e),window.addEventListener("mousemove",r.handleDrag),window.addEventListener("mouseup",r.handleMouseUp))},r.handleMouseUp=function(){r.unbindEventListeners()},r.unbindEventListeners=function(){window.removeEventListener("mousemove",r.handleDrag),window.removeEventListener("mouseup",r.handleMouseUp)},r.state={value:String(e.value).toUpperCase(),blurValue:String(e.value).toUpperCase()},r.inputId="rc-editable-input-"+v++,r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),g(t,[{key:"componentDidUpdate",value:function(e,t){this.props.value===this.state.value||e.value===this.props.value&&t.value===this.state.value||(this.input===document.activeElement?this.setState({blurValue:String(this.props.value).toUpperCase()}):this.setState({value:String(this.props.value).toUpperCase(),blurValue:!this.state.blurValue&&String(this.props.value).toUpperCase()}))}},{key:"componentWillUnmount",value:function(){this.unbindEventListeners()}},{key:"getValueObjectWithLabel",value:function(e){return function(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}({},this.props.label,e)}},{key:"getArrowOffset",value:function(){return this.props.arrowOffset||1}},{key:"setUpdatedValue",value:function(e,t){var r=this.props.label?this.getValueObjectWithLabel(e):e;this.props.onChange&&this.props.onChange(r,t),this.setState({value:e})}},{key:"render",value:function(){var e=this,t=(0,o.ZP)({default:{wrap:{position:"relative"}},"user-override":{wrap:this.props.style&&this.props.style.wrap?this.props.style.wrap:{},input:this.props.style&&this.props.style.input?this.props.style.input:{},label:this.props.style&&this.props.style.label?this.props.style.label:{}},"dragLabel-true":{label:{cursor:"ew-resize"}}},{"user-override":!0},this.props);return n.createElement("div",{style:t.wrap},n.createElement("input",{id:this.inputId,style:t.input,ref:function(t){return e.input=t},value:this.state.value,onKeyDown:this.handleKeyDown,onChange:this.handleChange,onBlur:this.handleBlur,placeholder:this.props.placeholder,spellCheck:"false"}),this.props.label&&!this.props.hideLabel?n.createElement("label",{htmlFor:this.inputId,style:t.label,onMouseDown:this.handleMouseDown},this.props.label):null)}}]),t}(n.PureComponent||n.Component);var m=function(e,t,r,n){var o=n.clientWidth,a=n.clientHeight,i="number"==typeof e.pageX?e.pageX:e.touches[0].pageX,l="number"==typeof e.pageY?e.pageY:e.touches[0].pageY,s=i-(n.getBoundingClientRect().left+window.pageXOffset),p=l-(n.getBoundingClientRect().top+window.pageYOffset);if("vertical"===t){var c=void 0;if(c=p<0?359:p>a?0:360*(-100*p/a+100)/100,r.h!==c)return{h:c,s:r.s,l:r.l,a:r.a,source:"hsl"}}else{var u=void 0;if(u=s<0?0:s>o?359:100*s/o*360/100,r.h!==u)return{h:u,s:r.s,l:r.l,a:r.a,source:"hsl"}}return null},w=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}();function E(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function C(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}const k=function(e){function t(){var e,r,n;E(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return r=n=C(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),n.handleChange=function(e){var t=m(e,n.props.direction,n.props.hsl,n.container);t&&"function"==typeof n.props.onChange&&n.props.onChange(t,e)},n.handleMouseDown=function(e){n.handleChange(e),window.addEventListener("mousemove",n.handleChange),window.addEventListener("mouseup",n.handleMouseUp)},n.handleMouseUp=function(){n.unbindEventListeners()},C(n,r)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),w(t,[{key:"componentWillUnmount",value:function(){this.unbindEventListeners()}},{key:"unbindEventListeners",value:function(){window.removeEventListener("mousemove",this.handleChange),window.removeEventListener("mouseup",this.handleMouseUp)}},{key:"render",value:function(){var e=this,t=this.props.direction,r=void 0===t?"horizontal":t,a=(0,o.ZP)({default:{hue:{absolute:"0px 0px 0px 0px",borderRadius:this.props.radius,boxShadow:this.props.shadow},container:{padding:"0 2px",position:"relative",height:"100%",borderRadius:this.props.radius},pointer:{position:"absolute",left:100*this.props.hsl.h/360+"%"},slider:{marginTop:"1px",width:"4px",borderRadius:"1px",height:"8px",boxShadow:"0 0 2px rgba(0, 0, 0, .6)",background:"#fff",transform:"translateX(-2px)"}},vertical:{pointer:{left:"0px",top:-100*this.props.hsl.h/360+100+"%"}}},{vertical:"vertical"===r});return n.createElement("div",{style:a.hue},n.createElement("div",{className:"hue-"+r,style:a.container,ref:function(t){return e.container=t},onMouseDown:this.handleMouseDown,onTouchMove:this.handleChange,onTouchStart:this.handleChange},n.createElement("style",null,"\n            .hue-horizontal {\n              background: linear-gradient(to right, #f00 0%, #ff0 17%, #0f0\n                33%, #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);\n              background: -webkit-linear-gradient(to right, #f00 0%, #ff0\n                17%, #0f0 33%, #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);\n            }\n\n            .hue-vertical {\n              background: linear-gradient(to top, #f00 0%, #ff0 17%, #0f0 33%,\n                #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);\n              background: -webkit-linear-gradient(to top, #f00 0%, #ff0 17%,\n                #0f0 33%, #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);\n            }\n          "),n.createElement("div",{style:a.pointer},this.props.pointer?n.createElement(this.props.pointer,this.props):n.createElement("div",{style:a.slider}))))}}]),t}(n.PureComponent||n.Component);var S=r(45697),R=r.n(S),O=r(26122),B=function(e){var t=e.zDepth,r=e.radius,a=e.background,i=e.children,l=e.styles,s=void 0===l?{}:l,p=(0,o.ZP)((0,O.Z)({default:{wrap:{position:"relative",display:"inline-block"},content:{position:"relative"},bg:{absolute:"0px 0px 0px 0px",boxShadow:"0 "+t+"px "+4*t+"px rgba(0,0,0,.24)",borderRadius:r,background:a}},"zDepth-0":{bg:{boxShadow:"none"}},"zDepth-1":{bg:{boxShadow:"0 2px 10px rgba(0,0,0,.12), 0 2px 5px rgba(0,0,0,.16)"}},"zDepth-2":{bg:{boxShadow:"0 6px 20px rgba(0,0,0,.19), 0 8px 17px rgba(0,0,0,.2)"}},"zDepth-3":{bg:{boxShadow:"0 17px 50px rgba(0,0,0,.19), 0 12px 15px rgba(0,0,0,.24)"}},"zDepth-4":{bg:{boxShadow:"0 25px 55px rgba(0,0,0,.21), 0 16px 28px rgba(0,0,0,.22)"}},"zDepth-5":{bg:{boxShadow:"0 40px 77px rgba(0,0,0,.22), 0 27px 24px rgba(0,0,0,.2)"}},square:{bg:{borderRadius:"0"}},circle:{bg:{borderRadius:"50%"}}},s),{"zDepth-1":1===t});return n.createElement("div",{style:p.wrap},n.createElement("div",{style:p.bg}),n.createElement("div",{style:p.content},i))};B.propTypes={background:R().string,zDepth:R().oneOf([0,1,2,3,4,5]),radius:R().number,styles:R().object},B.defaultProps={background:"#fff",zDepth:1,radius:2,styles:{}};const P=B;var F=r(111),_=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}();const j=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return r.handleChange=function(e){"function"==typeof r.props.onChange&&r.throttle(r.props.onChange,function(e,t,r){var n=r.getBoundingClientRect(),o=n.width,a=n.height,i="number"==typeof e.pageX?e.pageX:e.touches[0].pageX,l="number"==typeof e.pageY?e.pageY:e.touches[0].pageY,s=i-(r.getBoundingClientRect().left+window.pageXOffset),p=l-(r.getBoundingClientRect().top+window.pageYOffset);s<0?s=0:s>o&&(s=o),p<0?p=0:p>a&&(p=a);var c=s/o,u=1-p/a;return{h:t.h,s:c,v:u,a:t.a,source:"hsv"}}(e,r.props.hsl,r.container),e)},r.handleMouseDown=function(e){r.handleChange(e);var t=r.getContainerRenderWindow();t.addEventListener("mousemove",r.handleChange),t.addEventListener("mouseup",r.handleMouseUp)},r.handleMouseUp=function(){r.unbindEventListeners()},r.throttle=(0,F.Z)((function(e,t,r){e(t,r)}),50),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),_(t,[{key:"componentWillUnmount",value:function(){this.throttle.cancel(),this.unbindEventListeners()}},{key:"getContainerRenderWindow",value:function(){for(var e=this.container,t=window;!t.document.contains(e)&&t.parent!==t;)t=t.parent;return t}},{key:"unbindEventListeners",value:function(){var e=this.getContainerRenderWindow();e.removeEventListener("mousemove",this.handleChange),e.removeEventListener("mouseup",this.handleMouseUp)}},{key:"render",value:function(){var e=this,t=this.props.style||{},r=t.color,a=t.white,i=t.black,l=t.pointer,s=t.circle,p=(0,o.ZP)({default:{color:{absolute:"0px 0px 0px 0px",background:"hsl("+this.props.hsl.h+",100%, 50%)",borderRadius:this.props.radius},white:{absolute:"0px 0px 0px 0px",borderRadius:this.props.radius},black:{absolute:"0px 0px 0px 0px",boxShadow:this.props.shadow,borderRadius:this.props.radius},pointer:{position:"absolute",top:-100*this.props.hsv.v+100+"%",left:100*this.props.hsv.s+"%",cursor:"default"},circle:{width:"4px",height:"4px",boxShadow:"0 0 0 1.5px #fff, inset 0 0 1px 1px rgba(0,0,0,.3),\n            0 0 1px 2px rgba(0,0,0,.4)",borderRadius:"50%",cursor:"hand",transform:"translate(-2px, -2px)"}},custom:{color:r,white:a,black:i,pointer:l,circle:s}},{custom:!!this.props.style});return n.createElement("div",{style:p.color,ref:function(t){return e.container=t},onMouseDown:this.handleMouseDown,onTouchMove:this.handleChange,onTouchStart:this.handleChange},n.createElement("style",null,"\n          .saturation-white {\n            background: -webkit-linear-gradient(to right, #fff, rgba(255,255,255,0));\n            background: linear-gradient(to right, #fff, rgba(255,255,255,0));\n          }\n          .saturation-black {\n            background: -webkit-linear-gradient(to top, #000, rgba(0,0,0,0));\n            background: linear-gradient(to top, #000, rgba(0,0,0,0));\n          }\n        "),n.createElement("div",{style:p.white,className:"saturation-white"},n.createElement("div",{style:p.black,className:"saturation-black"}),n.createElement("div",{style:p.pointer},this.props.pointer?n.createElement(this.props.pointer,this.props):n.createElement("div",{style:p.circle}))))}}]),t}(n.PureComponent||n.Component);var T=r(96682),D=r(99400),H=r(17621),z=r.n(H),Z=function(e){var t=0,r=0;return(0,D.Z)(["r","g","b","a","h","s","l","v"],(function(n){e[n]&&(t+=1,isNaN(e[n])||(r+=1),"s"===n||"l"===n)&&/^\d+%$/.test(e[n])&&(r+=1)})),t===r&&e},L=function(e,t){var r=e.hex?z()(e.hex):z()(e),n=r.toHsl(),o=r.toHsv(),a=r.toRgb(),i=r.toHex();return 0===n.s&&(n.h=t||0,o.h=t||0),{hsl:n,hex:"000000"===i&&0===a.a?"transparent":"#"+i,rgb:a,hsv:o,oldHue:e.h||t||n.h,source:e.source}},N=function(e){if("transparent"===e)return!0;var t="#"===String(e).charAt(0)?1:0;return e.length!==4+t&&e.length<7+t&&z()(e).isValid()},A=function(e){if(!e)return"#fff";var t=L(e);return"transparent"===t.hex?"rgba(0,0,0,0.4)":(299*t.rgb.r+587*t.rgb.g+114*t.rgb.b)/1e3>=128?"#000":"#fff"},M=function(e,t){var r=e.replace("°","");return z()(t+" ("+r+")")._ok},G=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},U=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}();const $=function(e){var t=function(t){function r(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,r);var t=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(r.__proto__||Object.getPrototypeOf(r)).call(this));return t.handleChange=function(e,r){if(Z(e)){var n=L(e,e.h||t.state.oldHue);t.setState(n),t.props.onChangeComplete&&t.debounce(t.props.onChangeComplete,n,r),t.props.onChange&&t.props.onChange(n,r)}},t.handleSwatchHover=function(e,r){if(Z(e)){var n=L(e,e.h||t.state.oldHue);t.props.onSwatchHover&&t.props.onSwatchHover(n,r)}},t.state=G({},L(e.color,0)),t.debounce=(0,T.Z)((function(e,t,r){e(t,r)}),100),t}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(r,t),U(r,[{key:"render",value:function(){var t={};return this.props.onSwatchHover&&(t.onSwatchHover=this.handleSwatchHover),n.createElement(e,G({},this.props,this.state,{onChange:this.handleChange},t))}}],[{key:"getDerivedStateFromProps",value:function(e,t){return G({},L(e.color,t.oldHue))}}]),r}(n.PureComponent||n.Component);return t.propTypes=G({},e.propTypes),t.defaultProps=G({},e.defaultProps,{color:{h:250,s:.5,l:.2,a:1}}),t};var X=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},V=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}();function I(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function W(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function Q(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var Y=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e};const q=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"span";return function(r){function o(){var e,t,r;I(this,o);for(var n=arguments.length,a=Array(n),i=0;i<n;i++)a[i]=arguments[i];return t=r=W(this,(e=o.__proto__||Object.getPrototypeOf(o)).call.apply(e,[this].concat(a))),r.state={focus:!1},r.handleFocus=function(){return r.setState({focus:!0})},r.handleBlur=function(){return r.setState({focus:!1})},W(r,t)}return Q(o,r),V(o,[{key:"render",value:function(){return n.createElement(t,{onFocus:this.handleFocus,onBlur:this.handleBlur},n.createElement(e,X({},this.props,this.state)))}}]),o}(n.Component)}((function(e){var t=e.color,r=e.style,a=e.onClick,i=void 0===a?function(){}:a,l=e.onHover,s=e.title,p=void 0===s?t:s,u=e.children,h=e.focus,d=e.focusStyle,f=void 0===d?{}:d,b="transparent"===t,g=(0,o.ZP)({default:{swatch:Y({background:t,height:"100%",width:"100%",cursor:"pointer",position:"relative",outline:"none"},r,h?f:{})}}),x={};return l&&(x.onMouseOver=function(e){return l(t,e)}),n.createElement("div",Y({style:g.swatch,onClick:function(e){return i(t,e)},title:p,tabIndex:0,onKeyDown:function(e){return 13===e.keyCode&&i(t,e)}},x),u,b&&n.createElement(c,{borderRadius:g.swatch.borderRadius,boxShadow:"inset 0 0 0 1px rgba(0,0,0,0.1)"}))}));var K=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},J=function(e){var t=e.rgb,r=e.hsl,a=e.width,i=e.height,l=e.onChange,s=e.direction,p=e.style,c=e.renderers,u=e.pointer,h=e.className,d=void 0===h?"":h,f=(0,o.ZP)({default:{picker:{position:"relative",width:a,height:i},alpha:{radius:"2px",style:p}}});return n.createElement("div",{style:f.picker,className:"alpha-picker "+d},n.createElement(b,K({},f.alpha,{rgb:t,hsl:r,pointer:u,renderers:c,onChange:l,direction:s})))};J.defaultProps={width:"316px",height:"16px",direction:"horizontal",pointer:function(e){var t=e.direction,r=(0,o.ZP)({default:{picker:{width:"18px",height:"18px",borderRadius:"50%",transform:"translate(-9px, -1px)",backgroundColor:"rgb(248, 248, 248)",boxShadow:"0 1px 4px 0 rgba(0, 0, 0, 0.37)"}},vertical:{picker:{transform:"translate(-3px, -9px)"}}},{vertical:"vertical"===t});return n.createElement("div",{style:r.picker})}},$(J);var ee=r(48733);const te=function(e){var t=e.colors,r=e.onClick,a=e.onSwatchHover,i=(0,o.ZP)({default:{swatches:{marginRight:"-10px"},swatch:{width:"22px",height:"22px",float:"left",marginRight:"10px",marginBottom:"10px",borderRadius:"4px"},clear:{clear:"both"}}});return n.createElement("div",{style:i.swatches},(0,ee.Z)(t,(function(e){return n.createElement(q,{key:e,color:e,style:i.swatch,onClick:r,onHover:a,focusStyle:{boxShadow:"0 0 4px "+e}})})),n.createElement("div",{style:i.clear}))};var re=function(e){var t=e.onChange,r=e.onSwatchHover,a=e.hex,i=e.colors,l=e.width,s=e.triangle,p=e.styles,u=void 0===p?{}:p,h=e.className,d=void 0===h?"":h,f="transparent"===a,b=function(e,r){N(e)&&t({hex:e,source:"hex"},r)},g=(0,o.ZP)((0,O.Z)({default:{card:{width:l,background:"#fff",boxShadow:"0 1px rgba(0,0,0,.1)",borderRadius:"6px",position:"relative"},head:{height:"110px",background:a,borderRadius:"6px 6px 0 0",display:"flex",alignItems:"center",justifyContent:"center",position:"relative"},body:{padding:"10px"},label:{fontSize:"18px",color:A(a),position:"relative"},triangle:{width:"0px",height:"0px",borderStyle:"solid",borderWidth:"0 10px 10px 10px",borderColor:"transparent transparent "+a+" transparent",position:"absolute",top:"-10px",left:"50%",marginLeft:"-10px"},input:{width:"100%",fontSize:"12px",color:"#666",border:"0px",outline:"none",height:"22px",boxShadow:"inset 0 0 0 1px #ddd",borderRadius:"4px",padding:"0 7px",boxSizing:"border-box"}},"hide-triangle":{triangle:{display:"none"}}},u),{"hide-triangle":"hide"===s});return n.createElement("div",{style:g.card,className:"block-picker "+d},n.createElement("div",{style:g.triangle}),n.createElement("div",{style:g.head},f&&n.createElement(c,{borderRadius:"6px 6px 0 0"}),n.createElement("div",{style:g.label},a)),n.createElement("div",{style:g.body},n.createElement(te,{colors:i,onClick:b,onSwatchHover:r}),n.createElement(y,{style:{input:g.input},value:a,onChange:b})))};re.propTypes={width:R().oneOfType([R().string,R().number]),colors:R().arrayOf(R().string),triangle:R().oneOf(["top","hide"]),styles:R().object},re.defaultProps={width:170,colors:["#D9E3F0","#F47373","#697689","#37D67A","#2CCCE4","#555555","#dce775","#ff8a65","#ba68c8"],triangle:"top",styles:{}},$(re);var ne=r(53893),oe=function(e){var t=e.color,r=e.onClick,a=e.onSwatchHover,i=e.hover,l=e.active,s=e.circleSize,p=e.circleSpacing,c=(0,o.ZP)({default:{swatch:{width:s,height:s,marginRight:p,marginBottom:p,transform:"scale(1)",transition:"100ms transform ease"},Swatch:{borderRadius:"50%",background:"transparent",boxShadow:"inset 0 0 0 "+(s/2+1)+"px "+t,transition:"100ms box-shadow ease"}},hover:{swatch:{transform:"scale(1.2)"}},active:{Swatch:{boxShadow:"inset 0 0 0 3px "+t}}},{hover:i,active:l});return n.createElement("div",{style:c.swatch},n.createElement(q,{style:c.Swatch,color:t,onClick:r,onHover:a,focusStyle:{boxShadow:c.Swatch.boxShadow+", 0 0 5px "+t}}))};oe.defaultProps={circleSize:28,circleSpacing:14};const ae=(0,o.tz)(oe);var ie=function(e){var t=e.width,r=e.onChange,a=e.onSwatchHover,i=e.colors,l=e.hex,s=e.circleSize,p=e.styles,c=void 0===p?{}:p,u=e.circleSpacing,h=e.className,d=void 0===h?"":h,f=(0,o.ZP)((0,O.Z)({default:{card:{width:t,display:"flex",flexWrap:"wrap",marginRight:-u,marginBottom:-u}}},c)),b=function(e,t){return r({hex:e,source:"hex"},t)};return n.createElement("div",{style:f.card,className:"circle-picker "+d},(0,ee.Z)(i,(function(e){return n.createElement(ae,{key:e,color:e,onClick:b,onSwatchHover:a,active:l===e.toLowerCase(),circleSize:s,circleSpacing:u})})))};ie.propTypes={width:R().oneOfType([R().string,R().number]),circleSize:R().number,circleSpacing:R().number,styles:R().object},ie.defaultProps={width:252,circleSize:28,circleSpacing:14,colors:[ne.Q6[500],ne.iQ[500],ne.jk[500],ne.vq[500],ne.QN[500],ne.iN[500],ne.f7[500],ne.sl[500],ne.$C[500],ne.ek[500],ne.ZE[500],ne.LR[500],ne.er[500],ne.Dz[500],ne.$y[500],ne.bK[500],ne.P_[500],ne.BU[500]],styles:{}},$(ie);var le=r(49360),se=r(43891),pe=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),ce=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return r.toggleViews=function(){"hex"===r.state.view?r.setState({view:"rgb"}):"rgb"===r.state.view?r.setState({view:"hsl"}):"hsl"===r.state.view&&(1===r.props.hsl.a?r.setState({view:"hex"}):r.setState({view:"rgb"}))},r.handleChange=function(e,t){e.hex?N(e.hex)&&r.props.onChange({hex:e.hex,source:"hex"},t):e.r||e.g||e.b?r.props.onChange({r:e.r||r.props.rgb.r,g:e.g||r.props.rgb.g,b:e.b||r.props.rgb.b,source:"rgb"},t):e.a?(e.a<0?e.a=0:e.a>1&&(e.a=1),r.props.onChange({h:r.props.hsl.h,s:r.props.hsl.s,l:r.props.hsl.l,a:Math.round(100*e.a)/100,source:"rgb"},t)):(e.h||e.s||e.l)&&("string"==typeof e.s&&e.s.includes("%")&&(e.s=e.s.replace("%","")),"string"==typeof e.l&&e.l.includes("%")&&(e.l=e.l.replace("%","")),1==e.s?e.s=.01:1==e.l&&(e.l=.01),r.props.onChange({h:e.h||r.props.hsl.h,s:Number((0,le.Z)(e.s)?r.props.hsl.s:e.s),l:Number((0,le.Z)(e.l)?r.props.hsl.l:e.l),source:"hsl"},t))},r.showHighlight=function(e){e.currentTarget.style.background="#eee"},r.hideHighlight=function(e){e.currentTarget.style.background="transparent"},1!==e.hsl.a&&"hex"===e.view?r.state={view:"rgb"}:r.state={view:e.view},r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),pe(t,[{key:"render",value:function(){var e=this,t=(0,o.ZP)({default:{wrap:{paddingTop:"16px",display:"flex"},fields:{flex:"1",display:"flex",marginLeft:"-6px"},field:{paddingLeft:"6px",width:"100%"},alpha:{paddingLeft:"6px",width:"100%"},toggle:{width:"32px",textAlign:"right",position:"relative"},icon:{marginRight:"-4px",marginTop:"12px",cursor:"pointer",position:"relative"},iconHighlight:{position:"absolute",width:"24px",height:"28px",background:"#eee",borderRadius:"4px",top:"10px",left:"12px",display:"none"},input:{fontSize:"11px",color:"#333",width:"100%",borderRadius:"2px",border:"none",boxShadow:"inset 0 0 0 1px #dadada",height:"21px",textAlign:"center"},label:{textTransform:"uppercase",fontSize:"11px",lineHeight:"11px",color:"#969696",textAlign:"center",display:"block",marginTop:"12px"},svg:{fill:"#333",width:"24px",height:"24px",border:"1px transparent solid",borderRadius:"5px"}},disableAlpha:{alpha:{display:"none"}}},this.props,this.state),r=void 0;return"hex"===this.state.view?r=n.createElement("div",{style:t.fields,className:"flexbox-fix"},n.createElement("div",{style:t.field},n.createElement(y,{style:{input:t.input,label:t.label},label:"hex",value:this.props.hex,onChange:this.handleChange}))):"rgb"===this.state.view?r=n.createElement("div",{style:t.fields,className:"flexbox-fix"},n.createElement("div",{style:t.field},n.createElement(y,{style:{input:t.input,label:t.label},label:"r",value:this.props.rgb.r,onChange:this.handleChange})),n.createElement("div",{style:t.field},n.createElement(y,{style:{input:t.input,label:t.label},label:"g",value:this.props.rgb.g,onChange:this.handleChange})),n.createElement("div",{style:t.field},n.createElement(y,{style:{input:t.input,label:t.label},label:"b",value:this.props.rgb.b,onChange:this.handleChange})),n.createElement("div",{style:t.alpha},n.createElement(y,{style:{input:t.input,label:t.label},label:"a",value:this.props.rgb.a,arrowOffset:.01,onChange:this.handleChange}))):"hsl"===this.state.view&&(r=n.createElement("div",{style:t.fields,className:"flexbox-fix"},n.createElement("div",{style:t.field},n.createElement(y,{style:{input:t.input,label:t.label},label:"h",value:Math.round(this.props.hsl.h),onChange:this.handleChange})),n.createElement("div",{style:t.field},n.createElement(y,{style:{input:t.input,label:t.label},label:"s",value:Math.round(100*this.props.hsl.s)+"%",onChange:this.handleChange})),n.createElement("div",{style:t.field},n.createElement(y,{style:{input:t.input,label:t.label},label:"l",value:Math.round(100*this.props.hsl.l)+"%",onChange:this.handleChange})),n.createElement("div",{style:t.alpha},n.createElement(y,{style:{input:t.input,label:t.label},label:"a",value:this.props.hsl.a,arrowOffset:.01,onChange:this.handleChange})))),n.createElement("div",{style:t.wrap,className:"flexbox-fix"},r,n.createElement("div",{style:t.toggle},n.createElement("div",{style:t.icon,onClick:this.toggleViews,ref:function(t){return e.icon=t}},n.createElement(se.Z,{style:t.svg,onMouseOver:this.showHighlight,onMouseEnter:this.showHighlight,onMouseOut:this.hideHighlight}))))}}],[{key:"getDerivedStateFromProps",value:function(e,t){return 1!==e.hsl.a&&"hex"===t.view?{view:"rgb"}:null}}]),t}(n.Component);ce.defaultProps={view:"hex"};const ue=ce,he=function(){var e=(0,o.ZP)({default:{picker:{width:"12px",height:"12px",borderRadius:"6px",transform:"translate(-6px, -1px)",backgroundColor:"rgb(248, 248, 248)",boxShadow:"0 1px 4px 0 rgba(0, 0, 0, 0.37)"}}});return n.createElement("div",{style:e.picker})},de=function(){var e=(0,o.ZP)({default:{picker:{width:"12px",height:"12px",borderRadius:"6px",boxShadow:"inset 0 0 0 1px #fff",transform:"translate(-6px, -6px)"}}});return n.createElement("div",{style:e.picker})};var fe=function(e){var t=e.width,r=e.onChange,a=e.disableAlpha,i=e.rgb,l=e.hsl,s=e.hsv,p=e.hex,u=e.renderers,h=e.styles,d=void 0===h?{}:h,f=e.className,g=void 0===f?"":f,x=e.defaultView,v=(0,o.ZP)((0,O.Z)({default:{picker:{width:t,background:"#fff",borderRadius:"2px",boxShadow:"0 0 2px rgba(0,0,0,.3), 0 4px 8px rgba(0,0,0,.3)",boxSizing:"initial",fontFamily:"Menlo"},saturation:{width:"100%",paddingBottom:"55%",position:"relative",borderRadius:"2px 2px 0 0",overflow:"hidden"},Saturation:{radius:"2px 2px 0 0"},body:{padding:"16px 16px 12px"},controls:{display:"flex"},color:{width:"32px"},swatch:{marginTop:"6px",width:"16px",height:"16px",borderRadius:"8px",position:"relative",overflow:"hidden"},active:{absolute:"0px 0px 0px 0px",borderRadius:"8px",boxShadow:"inset 0 0 0 1px rgba(0,0,0,.1)",background:"rgba("+i.r+", "+i.g+", "+i.b+", "+i.a+")",zIndex:"2"},toggles:{flex:"1"},hue:{height:"10px",position:"relative",marginBottom:"8px"},Hue:{radius:"2px"},alpha:{height:"10px",position:"relative"},Alpha:{radius:"2px"}},disableAlpha:{color:{width:"22px"},alpha:{display:"none"},hue:{marginBottom:"0px"},swatch:{width:"10px",height:"10px",marginTop:"0px"}}},d),{disableAlpha:a});return n.createElement("div",{style:v.picker,className:"chrome-picker "+g},n.createElement("div",{style:v.saturation},n.createElement(j,{style:v.Saturation,hsl:l,hsv:s,pointer:de,onChange:r})),n.createElement("div",{style:v.body},n.createElement("div",{style:v.controls,className:"flexbox-fix"},n.createElement("div",{style:v.color},n.createElement("div",{style:v.swatch},n.createElement("div",{style:v.active}),n.createElement(c,{renderers:u}))),n.createElement("div",{style:v.toggles},n.createElement("div",{style:v.hue},n.createElement(k,{style:v.Hue,hsl:l,pointer:he,onChange:r})),n.createElement("div",{style:v.alpha},n.createElement(b,{style:v.Alpha,rgb:i,hsl:l,pointer:he,renderers:u,onChange:r})))),n.createElement(ue,{rgb:i,hsl:l,hex:p,view:x,onChange:r,disableAlpha:a})))};fe.propTypes={width:R().oneOfType([R().string,R().number]),disableAlpha:R().bool,styles:R().object,defaultView:R().oneOf(["hex","rgb","hsl"])},fe.defaultProps={width:225,disableAlpha:!1,styles:{}},$(fe);const be=function(e){var t=e.color,r=e.onClick,a=void 0===r?function(){}:r,i=e.onSwatchHover,l=e.active,s=(0,o.ZP)({default:{color:{background:t,width:"15px",height:"15px",float:"left",marginRight:"5px",marginBottom:"5px",position:"relative",cursor:"pointer"},dot:{absolute:"5px 5px 5px 5px",background:A(t),borderRadius:"50%",opacity:"0"}},active:{dot:{opacity:"1"}},"color-#FFFFFF":{color:{boxShadow:"inset 0 0 0 1px #ddd"},dot:{background:"#000"}},transparent:{dot:{background:"#000"}}},{active:l,"color-#FFFFFF":"#FFFFFF"===t,transparent:"transparent"===t});return n.createElement(q,{style:s.color,color:t,onClick:a,onHover:i,focusStyle:{boxShadow:"0 0 4px "+t}},n.createElement("div",{style:s.dot}))},ge=function(e){var t=e.hex,r=e.rgb,a=e.onChange,i=(0,o.ZP)({default:{fields:{display:"flex",paddingBottom:"6px",paddingRight:"5px",position:"relative"},active:{position:"absolute",top:"6px",left:"5px",height:"9px",width:"9px",background:t},HEXwrap:{flex:"6",position:"relative"},HEXinput:{width:"80%",padding:"0px",paddingLeft:"20%",border:"none",outline:"none",background:"none",fontSize:"12px",color:"#333",height:"16px"},HEXlabel:{display:"none"},RGBwrap:{flex:"3",position:"relative"},RGBinput:{width:"70%",padding:"0px",paddingLeft:"30%",border:"none",outline:"none",background:"none",fontSize:"12px",color:"#333",height:"16px"},RGBlabel:{position:"absolute",top:"3px",left:"0px",lineHeight:"16px",textTransform:"uppercase",fontSize:"12px",color:"#999"}}}),l=function(e,t){e.r||e.g||e.b?a({r:e.r||r.r,g:e.g||r.g,b:e.b||r.b,source:"rgb"},t):a({hex:e.hex,source:"hex"},t)};return n.createElement("div",{style:i.fields,className:"flexbox-fix"},n.createElement("div",{style:i.active}),n.createElement(y,{style:{wrap:i.HEXwrap,input:i.HEXinput,label:i.HEXlabel},label:"hex",value:t,onChange:l}),n.createElement(y,{style:{wrap:i.RGBwrap,input:i.RGBinput,label:i.RGBlabel},label:"r",value:r.r,onChange:l}),n.createElement(y,{style:{wrap:i.RGBwrap,input:i.RGBinput,label:i.RGBlabel},label:"g",value:r.g,onChange:l}),n.createElement(y,{style:{wrap:i.RGBwrap,input:i.RGBinput,label:i.RGBlabel},label:"b",value:r.b,onChange:l}))};var xe=function(e){var t=e.onChange,r=e.onSwatchHover,a=e.colors,i=e.hex,l=e.rgb,s=e.styles,p=void 0===s?{}:s,c=e.className,u=void 0===c?"":c,h=(0,o.ZP)((0,O.Z)({default:{Compact:{background:"#f6f6f6",radius:"4px"},compact:{paddingTop:"5px",paddingLeft:"5px",boxSizing:"initial",width:"240px"},clear:{clear:"both"}}},p)),d=function(e,r){e.hex?N(e.hex)&&t({hex:e.hex,source:"hex"},r):t(e,r)};return n.createElement(P,{style:h.Compact,styles:p},n.createElement("div",{style:h.compact,className:"compact-picker "+u},n.createElement("div",null,(0,ee.Z)(a,(function(e){return n.createElement(be,{key:e,color:e,active:e.toLowerCase()===i,onClick:d,onSwatchHover:r})})),n.createElement("div",{style:h.clear})),n.createElement(ge,{hex:i,rgb:l,onChange:d})))};xe.propTypes={colors:R().arrayOf(R().string),styles:R().object},xe.defaultProps={colors:["#4D4D4D","#999999","#FFFFFF","#F44E3B","#FE9200","#FCDC00","#DBDF00","#A4DD00","#68CCCA","#73D8FF","#AEA1FF","#FDA1FF","#333333","#808080","#cccccc","#D33115","#E27300","#FCC400","#B0BC00","#68BC00","#16A5A5","#009CE0","#7B64FF","#FA28FF","#000000","#666666","#B3B3B3","#9F0500","#C45100","#FB9E00","#808900","#194D33","#0C797D","#0062B1","#653294","#AB149E"],styles:{}},$(xe);const ve=(0,o.tz)((function(e){var t=e.hover,r=e.color,a=e.onClick,i=e.onSwatchHover,l={position:"relative",zIndex:"2",outline:"2px solid #fff",boxShadow:"0 0 5px 2px rgba(0,0,0,0.25)"},s=(0,o.ZP)({default:{swatch:{width:"25px",height:"25px",fontSize:"0"}},hover:{swatch:l}},{hover:t});return n.createElement("div",{style:s.swatch},n.createElement(q,{color:r,onClick:a,onHover:i,focusStyle:l}))}));var ye=function(e){var t=e.width,r=e.colors,a=e.onChange,i=e.onSwatchHover,l=e.triangle,s=e.styles,p=void 0===s?{}:s,c=e.className,u=void 0===c?"":c,h=(0,o.ZP)((0,O.Z)({default:{card:{width:t,background:"#fff",border:"1px solid rgba(0,0,0,0.2)",boxShadow:"0 3px 12px rgba(0,0,0,0.15)",borderRadius:"4px",position:"relative",padding:"5px",display:"flex",flexWrap:"wrap"},triangle:{position:"absolute",border:"7px solid transparent",borderBottomColor:"#fff"},triangleShadow:{position:"absolute",border:"8px solid transparent",borderBottomColor:"rgba(0,0,0,0.15)"}},"hide-triangle":{triangle:{display:"none"},triangleShadow:{display:"none"}},"top-left-triangle":{triangle:{top:"-14px",left:"10px"},triangleShadow:{top:"-16px",left:"9px"}},"top-right-triangle":{triangle:{top:"-14px",right:"10px"},triangleShadow:{top:"-16px",right:"9px"}},"bottom-left-triangle":{triangle:{top:"35px",left:"10px",transform:"rotate(180deg)"},triangleShadow:{top:"37px",left:"9px",transform:"rotate(180deg)"}},"bottom-right-triangle":{triangle:{top:"35px",right:"10px",transform:"rotate(180deg)"},triangleShadow:{top:"37px",right:"9px",transform:"rotate(180deg)"}}},p),{"hide-triangle":"hide"===l,"top-left-triangle":"top-left"===l,"top-right-triangle":"top-right"===l,"bottom-left-triangle":"bottom-left"===l,"bottom-right-triangle":"bottom-right"===l}),d=function(e,t){return a({hex:e,source:"hex"},t)};return n.createElement("div",{style:h.card,className:"github-picker "+u},n.createElement("div",{style:h.triangleShadow}),n.createElement("div",{style:h.triangle}),(0,ee.Z)(r,(function(e){return n.createElement(ve,{color:e,key:e,onClick:d,onSwatchHover:i})})))};ye.propTypes={width:R().oneOfType([R().string,R().number]),colors:R().arrayOf(R().string),triangle:R().oneOf(["hide","top-left","top-right","bottom-left","bottom-right"]),styles:R().object},ye.defaultProps={width:200,colors:["#B80000","#DB3E00","#FCCB00","#008B02","#006B76","#1273DE","#004DCF","#5300EB","#EB9694","#FAD0C3","#FEF3BD","#C1E1C5","#BEDADC","#C4DEF6","#BED3F3","#D4C4FB"],triangle:"top-left",styles:{}},$(ye);var me=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},we=function(e){var t=e.width,r=e.height,a=e.onChange,i=e.hsl,l=e.direction,s=e.pointer,p=e.styles,c=void 0===p?{}:p,u=e.className,h=void 0===u?"":u,d=(0,o.ZP)((0,O.Z)({default:{picker:{position:"relative",width:t,height:r},hue:{radius:"2px"}}},c));return n.createElement("div",{style:d.picker,className:"hue-picker "+h},n.createElement(k,me({},d.hue,{hsl:i,pointer:s,onChange:function(e){return a({a:1,h:e.h,l:.5,s:1})},direction:l})))};we.propTypes={styles:R().object},we.defaultProps={width:"316px",height:"16px",direction:"horizontal",pointer:function(e){var t=e.direction,r=(0,o.ZP)({default:{picker:{width:"18px",height:"18px",borderRadius:"50%",transform:"translate(-9px, -1px)",backgroundColor:"rgb(248, 248, 248)",boxShadow:"0 1px 4px 0 rgba(0, 0, 0, 0.37)"}},vertical:{picker:{transform:"translate(-3px, -9px)"}}},{vertical:"vertical"===t});return n.createElement("div",{style:r.picker})},styles:{}},$(we),$((function(e){var t=e.onChange,r=e.hex,a=e.rgb,i=e.styles,l=void 0===i?{}:i,s=e.className,p=void 0===s?"":s,c=(0,o.ZP)((0,O.Z)({default:{material:{width:"98px",height:"98px",padding:"16px",fontFamily:"Roboto"},HEXwrap:{position:"relative"},HEXinput:{width:"100%",marginTop:"12px",fontSize:"15px",color:"#333",padding:"0px",border:"0px",borderBottom:"2px solid "+r,outline:"none",height:"30px"},HEXlabel:{position:"absolute",top:"0px",left:"0px",fontSize:"11px",color:"#999999",textTransform:"capitalize"},Hex:{style:{}},RGBwrap:{position:"relative"},RGBinput:{width:"100%",marginTop:"12px",fontSize:"15px",color:"#333",padding:"0px",border:"0px",borderBottom:"1px solid #eee",outline:"none",height:"30px"},RGBlabel:{position:"absolute",top:"0px",left:"0px",fontSize:"11px",color:"#999999",textTransform:"capitalize"},split:{display:"flex",marginRight:"-10px",paddingTop:"11px"},third:{flex:"1",paddingRight:"10px"}}},l)),u=function(e,r){e.hex?N(e.hex)&&t({hex:e.hex,source:"hex"},r):(e.r||e.g||e.b)&&t({r:e.r||a.r,g:e.g||a.g,b:e.b||a.b,source:"rgb"},r)};return n.createElement(P,{styles:l},n.createElement("div",{style:c.material,className:"material-picker "+p},n.createElement(y,{style:{wrap:c.HEXwrap,input:c.HEXinput,label:c.HEXlabel},label:"hex",value:r,onChange:u}),n.createElement("div",{style:c.split,className:"flexbox-fix"},n.createElement("div",{style:c.third},n.createElement(y,{style:{wrap:c.RGBwrap,input:c.RGBinput,label:c.RGBlabel},label:"r",value:a.r,onChange:u})),n.createElement("div",{style:c.third},n.createElement(y,{style:{wrap:c.RGBwrap,input:c.RGBinput,label:c.RGBlabel},label:"g",value:a.g,onChange:u})),n.createElement("div",{style:c.third},n.createElement(y,{style:{wrap:c.RGBwrap,input:c.RGBinput,label:c.RGBlabel},label:"b",value:a.b,onChange:u})))))}));const Ee=function(e){var t=e.onChange,r=e.rgb,a=e.hsv,i=e.hex,l=(0,o.ZP)({default:{fields:{paddingTop:"5px",paddingBottom:"9px",width:"80px",position:"relative"},divider:{height:"5px"},RGBwrap:{position:"relative"},RGBinput:{marginLeft:"40%",width:"40%",height:"18px",border:"1px solid #888888",boxShadow:"inset 0 1px 1px rgba(0,0,0,.1), 0 1px 0 0 #ECECEC",marginBottom:"5px",fontSize:"13px",paddingLeft:"3px",marginRight:"10px"},RGBlabel:{left:"0px",top:"0px",width:"34px",textTransform:"uppercase",fontSize:"13px",height:"18px",lineHeight:"22px",position:"absolute"},HEXwrap:{position:"relative"},HEXinput:{marginLeft:"20%",width:"80%",height:"18px",border:"1px solid #888888",boxShadow:"inset 0 1px 1px rgba(0,0,0,.1), 0 1px 0 0 #ECECEC",marginBottom:"6px",fontSize:"13px",paddingLeft:"3px"},HEXlabel:{position:"absolute",top:"0px",left:"0px",width:"14px",textTransform:"uppercase",fontSize:"13px",height:"18px",lineHeight:"22px"},fieldSymbols:{position:"absolute",top:"5px",right:"-7px",fontSize:"13px"},symbol:{height:"20px",lineHeight:"22px",paddingBottom:"7px"}}}),s=function(e,n){e["#"]?N(e["#"])&&t({hex:e["#"],source:"hex"},n):e.r||e.g||e.b?t({r:e.r||r.r,g:e.g||r.g,b:e.b||r.b,source:"rgb"},n):(e.h||e.s||e.v)&&t({h:e.h||a.h,s:e.s||a.s,v:e.v||a.v,source:"hsv"},n)};return n.createElement("div",{style:l.fields},n.createElement(y,{style:{wrap:l.RGBwrap,input:l.RGBinput,label:l.RGBlabel},label:"h",value:Math.round(a.h),onChange:s}),n.createElement(y,{style:{wrap:l.RGBwrap,input:l.RGBinput,label:l.RGBlabel},label:"s",value:Math.round(100*a.s),onChange:s}),n.createElement(y,{style:{wrap:l.RGBwrap,input:l.RGBinput,label:l.RGBlabel},label:"v",value:Math.round(100*a.v),onChange:s}),n.createElement("div",{style:l.divider}),n.createElement(y,{style:{wrap:l.RGBwrap,input:l.RGBinput,label:l.RGBlabel},label:"r",value:r.r,onChange:s}),n.createElement(y,{style:{wrap:l.RGBwrap,input:l.RGBinput,label:l.RGBlabel},label:"g",value:r.g,onChange:s}),n.createElement(y,{style:{wrap:l.RGBwrap,input:l.RGBinput,label:l.RGBlabel},label:"b",value:r.b,onChange:s}),n.createElement("div",{style:l.divider}),n.createElement(y,{style:{wrap:l.HEXwrap,input:l.HEXinput,label:l.HEXlabel},label:"#",value:i.replace("#",""),onChange:s}),n.createElement("div",{style:l.fieldSymbols},n.createElement("div",{style:l.symbol},"°"),n.createElement("div",{style:l.symbol},"%"),n.createElement("div",{style:l.symbol},"%")))},Ce=function(e){var t=e.hsl,r=(0,o.ZP)({default:{picker:{width:"12px",height:"12px",borderRadius:"6px",boxShadow:"inset 0 0 0 1px #fff",transform:"translate(-6px, -6px)"}},"black-outline":{picker:{boxShadow:"inset 0 0 0 1px #000"}}},{"black-outline":t.l>.5});return n.createElement("div",{style:r.picker})},ke=function(){var e=(0,o.ZP)({default:{triangle:{width:0,height:0,borderStyle:"solid",borderWidth:"4px 0 4px 6px",borderColor:"transparent transparent transparent #fff",position:"absolute",top:"1px",left:"1px"},triangleBorder:{width:0,height:0,borderStyle:"solid",borderWidth:"5px 0 5px 8px",borderColor:"transparent transparent transparent #555"},left:{Extend:"triangleBorder",transform:"translate(-13px, -4px)"},leftInside:{Extend:"triangle",transform:"translate(-8px, -5px)"},right:{Extend:"triangleBorder",transform:"translate(20px, -14px) rotate(180deg)"},rightInside:{Extend:"triangle",transform:"translate(-8px, -5px)"}}});return n.createElement("div",{style:e.pointer},n.createElement("div",{style:e.left},n.createElement("div",{style:e.leftInside})),n.createElement("div",{style:e.right},n.createElement("div",{style:e.rightInside})))},Se=function(e){var t=e.onClick,r=e.label,a=e.children,i=e.active,l=(0,o.ZP)({default:{button:{backgroundImage:"linear-gradient(-180deg, #FFFFFF 0%, #E6E6E6 100%)",border:"1px solid #878787",borderRadius:"2px",height:"20px",boxShadow:"0 1px 0 0 #EAEAEA",fontSize:"14px",color:"#000",lineHeight:"20px",textAlign:"center",marginBottom:"10px",cursor:"pointer"}},active:{button:{boxShadow:"0 0 0 1px #878787"}}},{active:i});return n.createElement("div",{style:l.button,onClick:t},r||a)},Re=function(e){var t=e.rgb,r=e.currentColor,a=(0,o.ZP)({default:{swatches:{border:"1px solid #B3B3B3",borderBottom:"1px solid #F0F0F0",marginBottom:"2px",marginTop:"1px"},new:{height:"34px",background:"rgb("+t.r+","+t.g+", "+t.b+")",boxShadow:"inset 1px 0 0 #000, inset -1px 0 0 #000, inset 0 1px 0 #000"},current:{height:"34px",background:r,boxShadow:"inset 1px 0 0 #000, inset -1px 0 0 #000, inset 0 -1px 0 #000"},label:{fontSize:"14px",color:"#000",textAlign:"center"}}});return n.createElement("div",null,n.createElement("div",{style:a.label},"new"),n.createElement("div",{style:a.swatches},n.createElement("div",{style:a.new}),n.createElement("div",{style:a.current})),n.createElement("div",{style:a.label},"current"))};var Oe=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),Be=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return r.state={currentColor:e.hex},r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),Oe(t,[{key:"render",value:function(){var e=this.props,t=e.styles,r=void 0===t?{}:t,a=e.className,i=void 0===a?"":a,l=(0,o.ZP)((0,O.Z)({default:{picker:{background:"#DCDCDC",borderRadius:"4px",boxShadow:"0 0 0 1px rgba(0,0,0,.25), 0 8px 16px rgba(0,0,0,.15)",boxSizing:"initial",width:"513px"},head:{backgroundImage:"linear-gradient(-180deg, #F0F0F0 0%, #D4D4D4 100%)",borderBottom:"1px solid #B1B1B1",boxShadow:"inset 0 1px 0 0 rgba(255,255,255,.2), inset 0 -1px 0 0 rgba(0,0,0,.02)",height:"23px",lineHeight:"24px",borderRadius:"4px 4px 0 0",fontSize:"13px",color:"#4D4D4D",textAlign:"center"},body:{padding:"15px 15px 0",display:"flex"},saturation:{width:"256px",height:"256px",position:"relative",border:"2px solid #B3B3B3",borderBottom:"2px solid #F0F0F0",overflow:"hidden"},hue:{position:"relative",height:"256px",width:"19px",marginLeft:"10px",border:"2px solid #B3B3B3",borderBottom:"2px solid #F0F0F0"},controls:{width:"180px",marginLeft:"10px"},top:{display:"flex"},previews:{width:"60px"},actions:{flex:"1",marginLeft:"20px"}}},r));return n.createElement("div",{style:l.picker,className:"photoshop-picker "+i},n.createElement("div",{style:l.head},this.props.header),n.createElement("div",{style:l.body,className:"flexbox-fix"},n.createElement("div",{style:l.saturation},n.createElement(j,{hsl:this.props.hsl,hsv:this.props.hsv,pointer:Ce,onChange:this.props.onChange})),n.createElement("div",{style:l.hue},n.createElement(k,{direction:"vertical",hsl:this.props.hsl,pointer:ke,onChange:this.props.onChange})),n.createElement("div",{style:l.controls},n.createElement("div",{style:l.top,className:"flexbox-fix"},n.createElement("div",{style:l.previews},n.createElement(Re,{rgb:this.props.rgb,currentColor:this.state.currentColor})),n.createElement("div",{style:l.actions},n.createElement(Se,{label:"OK",onClick:this.props.onAccept,active:!0}),n.createElement(Se,{label:"Cancel",onClick:this.props.onCancel}),n.createElement(Ee,{onChange:this.props.onChange,rgb:this.props.rgb,hsv:this.props.hsv,hex:this.props.hex}))))))}}]),t}(n.Component);Be.propTypes={header:R().string,styles:R().object},Be.defaultProps={header:"Color Picker",styles:{}},$(Be);const Pe=function(e){var t=e.onChange,r=e.rgb,a=e.hsl,i=e.hex,l=e.disableAlpha,s=(0,o.ZP)({default:{fields:{display:"flex",paddingTop:"4px"},single:{flex:"1",paddingLeft:"6px"},alpha:{flex:"1",paddingLeft:"6px"},double:{flex:"2"},input:{width:"80%",padding:"4px 10% 3px",border:"none",boxShadow:"inset 0 0 0 1px #ccc",fontSize:"11px"},label:{display:"block",textAlign:"center",fontSize:"11px",color:"#222",paddingTop:"3px",paddingBottom:"4px",textTransform:"capitalize"}},disableAlpha:{alpha:{display:"none"}}},{disableAlpha:l}),p=function(e,n){e.hex?N(e.hex)&&t({hex:e.hex,source:"hex"},n):e.r||e.g||e.b?t({r:e.r||r.r,g:e.g||r.g,b:e.b||r.b,a:r.a,source:"rgb"},n):e.a&&(e.a<0?e.a=0:e.a>100&&(e.a=100),e.a/=100,t({h:a.h,s:a.s,l:a.l,a:e.a,source:"rgb"},n))};return n.createElement("div",{style:s.fields,className:"flexbox-fix"},n.createElement("div",{style:s.double},n.createElement(y,{style:{input:s.input,label:s.label},label:"hex",value:i.replace("#",""),onChange:p})),n.createElement("div",{style:s.single},n.createElement(y,{style:{input:s.input,label:s.label},label:"r",value:r.r,onChange:p,dragLabel:"true",dragMax:"255"})),n.createElement("div",{style:s.single},n.createElement(y,{style:{input:s.input,label:s.label},label:"g",value:r.g,onChange:p,dragLabel:"true",dragMax:"255"})),n.createElement("div",{style:s.single},n.createElement(y,{style:{input:s.input,label:s.label},label:"b",value:r.b,onChange:p,dragLabel:"true",dragMax:"255"})),n.createElement("div",{style:s.alpha},n.createElement(y,{style:{input:s.input,label:s.label},label:"a",value:Math.round(100*r.a),onChange:p,dragLabel:"true",dragMax:"100"})))};var Fe=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},_e=function(e){var t=e.colors,r=e.onClick,a=void 0===r?function(){}:r,i=e.onSwatchHover,l=(0,o.ZP)({default:{colors:{margin:"0 -10px",padding:"10px 0 0 10px",borderTop:"1px solid #eee",display:"flex",flexWrap:"wrap",position:"relative"},swatchWrap:{width:"16px",height:"16px",margin:"0 10px 10px 0"},swatch:{borderRadius:"3px",boxShadow:"inset 0 0 0 1px rgba(0,0,0,.15)"}},"no-presets":{colors:{display:"none"}}},{"no-presets":!t||!t.length}),s=function(e,t){a({hex:e,source:"hex"},t)};return n.createElement("div",{style:l.colors,className:"flexbox-fix"},t.map((function(e){var t="string"==typeof e?{color:e}:e,r=""+t.color+(t.title||"");return n.createElement("div",{key:r,style:l.swatchWrap},n.createElement(q,Fe({},t,{style:l.swatch,onClick:s,onHover:i,focusStyle:{boxShadow:"inset 0 0 0 1px rgba(0,0,0,.15), 0 0 4px "+t.color}})))})))};_e.propTypes={colors:R().arrayOf(R().oneOfType([R().string,R().shape({color:R().string,title:R().string})])).isRequired};const je=_e;var Te=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},De=function(e){var t=e.width,r=e.rgb,a=e.hex,i=e.hsv,l=e.hsl,s=e.onChange,p=e.onSwatchHover,u=e.disableAlpha,h=e.presetColors,d=e.renderers,f=e.styles,g=void 0===f?{}:f,x=e.className,v=void 0===x?"":x,y=(0,o.ZP)((0,O.Z)({default:Te({picker:{width:t,padding:"10px 10px 0",boxSizing:"initial",background:"#fff",borderRadius:"4px",boxShadow:"0 0 0 1px rgba(0,0,0,.15), 0 8px 16px rgba(0,0,0,.15)"},saturation:{width:"100%",paddingBottom:"75%",position:"relative",overflow:"hidden"},Saturation:{radius:"3px",shadow:"inset 0 0 0 1px rgba(0,0,0,.15), inset 0 0 4px rgba(0,0,0,.25)"},controls:{display:"flex"},sliders:{padding:"4px 0",flex:"1"},color:{width:"24px",height:"24px",position:"relative",marginTop:"4px",marginLeft:"4px",borderRadius:"3px"},activeColor:{absolute:"0px 0px 0px 0px",borderRadius:"2px",background:"rgba("+r.r+","+r.g+","+r.b+","+r.a+")",boxShadow:"inset 0 0 0 1px rgba(0,0,0,.15), inset 0 0 4px rgba(0,0,0,.25)"},hue:{position:"relative",height:"10px",overflow:"hidden"},Hue:{radius:"2px",shadow:"inset 0 0 0 1px rgba(0,0,0,.15), inset 0 0 4px rgba(0,0,0,.25)"},alpha:{position:"relative",height:"10px",marginTop:"4px",overflow:"hidden"},Alpha:{radius:"2px",shadow:"inset 0 0 0 1px rgba(0,0,0,.15), inset 0 0 4px rgba(0,0,0,.25)"}},g),disableAlpha:{color:{height:"10px"},hue:{height:"10px"},alpha:{display:"none"}}},g),{disableAlpha:u});return n.createElement("div",{style:y.picker,className:"sketch-picker "+v},n.createElement("div",{style:y.saturation},n.createElement(j,{style:y.Saturation,hsl:l,hsv:i,onChange:s})),n.createElement("div",{style:y.controls,className:"flexbox-fix"},n.createElement("div",{style:y.sliders},n.createElement("div",{style:y.hue},n.createElement(k,{style:y.Hue,hsl:l,onChange:s})),n.createElement("div",{style:y.alpha},n.createElement(b,{style:y.Alpha,rgb:r,hsl:l,renderers:d,onChange:s}))),n.createElement("div",{style:y.color},n.createElement(c,null),n.createElement("div",{style:y.activeColor}))),n.createElement(Pe,{rgb:r,hsl:l,hex:a,onChange:s,disableAlpha:u}),n.createElement(je,{colors:h,onClick:s,onSwatchHover:p}))};De.propTypes={disableAlpha:R().bool,width:R().oneOfType([R().string,R().number]),styles:R().object},De.defaultProps={disableAlpha:!1,width:200,styles:{},presetColors:["#D0021B","#F5A623","#F8E71C","#8B572A","#7ED321","#417505","#BD10E0","#9013FE","#4A90E2","#50E3C2","#B8E986","#000000","#4A4A4A","#9B9B9B","#FFFFFF"]};const He=$(De),ze=function(e){var t=e.hsl,r=e.offset,a=e.onClick,i=void 0===a?function(){}:a,l=e.active,s=e.first,p=e.last,c=(0,o.ZP)({default:{swatch:{height:"12px",background:"hsl("+t.h+", 50%, "+100*r+"%)",cursor:"pointer"}},first:{swatch:{borderRadius:"2px 0 0 2px"}},last:{swatch:{borderRadius:"0 2px 2px 0"}},active:{swatch:{transform:"scaleY(1.8)",borderRadius:"3.6px/2px"}}},{active:l,first:s,last:p});return n.createElement("div",{style:c.swatch,onClick:function(e){return i({h:t.h,s:.5,l:r,source:"hsl"},e)}})},Ze=function(e){var t=e.onClick,r=e.hsl,a=(0,o.ZP)({default:{swatches:{marginTop:"20px"},swatch:{boxSizing:"border-box",width:"20%",paddingRight:"1px",float:"left"},clear:{clear:"both"}}}),i=.1;return n.createElement("div",{style:a.swatches},n.createElement("div",{style:a.swatch},n.createElement(ze,{hsl:r,offset:".80",active:Math.abs(r.l-.8)<i&&Math.abs(r.s-.5)<i,onClick:t,first:!0})),n.createElement("div",{style:a.swatch},n.createElement(ze,{hsl:r,offset:".65",active:Math.abs(r.l-.65)<i&&Math.abs(r.s-.5)<i,onClick:t})),n.createElement("div",{style:a.swatch},n.createElement(ze,{hsl:r,offset:".50",active:Math.abs(r.l-.5)<i&&Math.abs(r.s-.5)<i,onClick:t})),n.createElement("div",{style:a.swatch},n.createElement(ze,{hsl:r,offset:".35",active:Math.abs(r.l-.35)<i&&Math.abs(r.s-.5)<i,onClick:t})),n.createElement("div",{style:a.swatch},n.createElement(ze,{hsl:r,offset:".20",active:Math.abs(r.l-.2)<i&&Math.abs(r.s-.5)<i,onClick:t,last:!0})),n.createElement("div",{style:a.clear}))};var Le=function(e){var t=e.hsl,r=e.onChange,a=e.pointer,i=e.styles,l=void 0===i?{}:i,s=e.className,p=void 0===s?"":s,c=(0,o.ZP)((0,O.Z)({default:{hue:{height:"12px",position:"relative"},Hue:{radius:"2px"}}},l));return n.createElement("div",{style:c.wrap||{},className:"slider-picker "+p},n.createElement("div",{style:c.hue},n.createElement(k,{style:c.Hue,hsl:t,pointer:a,onChange:r})),n.createElement("div",{style:c.swatches},n.createElement(Ze,{hsl:t,onClick:r})))};Le.propTypes={styles:R().object},Le.defaultProps={pointer:function(){var e=(0,o.ZP)({default:{picker:{width:"14px",height:"14px",borderRadius:"6px",transform:"translate(-7px, -1px)",backgroundColor:"rgb(248, 248, 248)",boxShadow:"0 1px 4px 0 rgba(0, 0, 0, 0.37)"}}});return n.createElement("div",{style:e.picker})},styles:{}},$(Le);var Ne=r(70597);const Ae=function(e){var t=e.color,r=e.onClick,a=void 0===r?function(){}:r,i=e.onSwatchHover,l=e.first,s=e.last,p=e.active,c=(0,o.ZP)({default:{color:{width:"40px",height:"24px",cursor:"pointer",background:t,marginBottom:"1px"},check:{color:A(t),marginLeft:"8px",display:"none"}},first:{color:{overflow:"hidden",borderRadius:"2px 2px 0 0"}},last:{color:{overflow:"hidden",borderRadius:"0 0 2px 2px"}},active:{check:{display:"block"}},"color-#FFFFFF":{color:{boxShadow:"inset 0 0 0 1px #ddd"},check:{color:"#333"}},transparent:{check:{color:"#333"}}},{first:l,last:s,active:p,"color-#FFFFFF":"#FFFFFF"===t,transparent:"transparent"===t});return n.createElement(q,{color:t,style:c.color,onClick:a,onHover:i,focusStyle:{boxShadow:"0 0 4px "+t}},n.createElement("div",{style:c.check},n.createElement(Ne.Z,null)))},Me=function(e){var t=e.onClick,r=e.onSwatchHover,a=e.group,i=e.active,l=(0,o.ZP)({default:{group:{paddingBottom:"10px",width:"40px",float:"left",marginRight:"10px"}}});return n.createElement("div",{style:l.group},(0,ee.Z)(a,(function(e,o){return n.createElement(Ae,{key:e,color:e,active:e.toLowerCase()===i,first:0===o,last:o===a.length-1,onClick:t,onSwatchHover:r})})))};var Ge=function(e){var t=e.width,r=e.height,a=e.onChange,i=e.onSwatchHover,l=e.colors,s=e.hex,p=e.styles,c=void 0===p?{}:p,u=e.className,h=void 0===u?"":u,d=(0,o.ZP)((0,O.Z)({default:{picker:{width:t,height:r},overflow:{height:r,overflowY:"scroll"},body:{padding:"16px 0 6px 16px"},clear:{clear:"both"}}},c)),f=function(e,t){return a({hex:e,source:"hex"},t)};return n.createElement("div",{style:d.picker,className:"swatches-picker "+h},n.createElement(P,null,n.createElement("div",{style:d.overflow},n.createElement("div",{style:d.body},(0,ee.Z)(l,(function(e){return n.createElement(Me,{key:e.toString(),group:e,active:s,onClick:f,onSwatchHover:i})})),n.createElement("div",{style:d.clear})))))};Ge.propTypes={width:R().oneOfType([R().string,R().number]),height:R().oneOfType([R().string,R().number]),colors:R().arrayOf(R().arrayOf(R().string)),styles:R().object},Ge.defaultProps={width:320,height:240,colors:[[ne.Q6[900],ne.Q6[700],ne.Q6[500],ne.Q6[300],ne.Q6[100]],[ne.iQ[900],ne.iQ[700],ne.iQ[500],ne.iQ[300],ne.iQ[100]],[ne.jk[900],ne.jk[700],ne.jk[500],ne.jk[300],ne.jk[100]],[ne.vq[900],ne.vq[700],ne.vq[500],ne.vq[300],ne.vq[100]],[ne.QN[900],ne.QN[700],ne.QN[500],ne.QN[300],ne.QN[100]],[ne.iN[900],ne.iN[700],ne.iN[500],ne.iN[300],ne.iN[100]],[ne.f7[900],ne.f7[700],ne.f7[500],ne.f7[300],ne.f7[100]],[ne.sl[900],ne.sl[700],ne.sl[500],ne.sl[300],ne.sl[100]],[ne.$C[900],ne.$C[700],ne.$C[500],ne.$C[300],ne.$C[100]],["#194D33",ne.ek[700],ne.ek[500],ne.ek[300],ne.ek[100]],[ne.ZE[900],ne.ZE[700],ne.ZE[500],ne.ZE[300],ne.ZE[100]],[ne.LR[900],ne.LR[700],ne.LR[500],ne.LR[300],ne.LR[100]],[ne.er[900],ne.er[700],ne.er[500],ne.er[300],ne.er[100]],[ne.Dz[900],ne.Dz[700],ne.Dz[500],ne.Dz[300],ne.Dz[100]],[ne.$y[900],ne.$y[700],ne.$y[500],ne.$y[300],ne.$y[100]],[ne.bK[900],ne.bK[700],ne.bK[500],ne.bK[300],ne.bK[100]],[ne.P_[900],ne.P_[700],ne.P_[500],ne.P_[300],ne.P_[100]],[ne.BU[900],ne.BU[700],ne.BU[500],ne.BU[300],ne.BU[100]],["#000000","#525252","#969696","#D9D9D9","#FFFFFF"]],styles:{}},$(Ge);var Ue=function(e){var t=e.onChange,r=e.onSwatchHover,a=e.hex,i=e.colors,l=e.width,s=e.triangle,p=e.styles,c=void 0===p?{}:p,u=e.className,h=void 0===u?"":u,d=(0,o.ZP)((0,O.Z)({default:{card:{width:l,background:"#fff",border:"0 solid rgba(0,0,0,0.25)",boxShadow:"0 1px 4px rgba(0,0,0,0.25)",borderRadius:"4px",position:"relative"},body:{padding:"15px 9px 9px 15px"},label:{fontSize:"18px",color:"#fff"},triangle:{width:"0px",height:"0px",borderStyle:"solid",borderWidth:"0 9px 10px 9px",borderColor:"transparent transparent #fff transparent",position:"absolute"},triangleShadow:{width:"0px",height:"0px",borderStyle:"solid",borderWidth:"0 9px 10px 9px",borderColor:"transparent transparent rgba(0,0,0,.1) transparent",position:"absolute"},hash:{background:"#F0F0F0",height:"30px",width:"30px",borderRadius:"4px 0 0 4px",float:"left",color:"#98A1A4",display:"flex",alignItems:"center",justifyContent:"center"},input:{width:"100px",fontSize:"14px",color:"#666",border:"0px",outline:"none",height:"28px",boxShadow:"inset 0 0 0 1px #F0F0F0",boxSizing:"content-box",borderRadius:"0 4px 4px 0",float:"left",paddingLeft:"8px"},swatch:{width:"30px",height:"30px",float:"left",borderRadius:"4px",margin:"0 6px 6px 0"},clear:{clear:"both"}},"hide-triangle":{triangle:{display:"none"},triangleShadow:{display:"none"}},"top-left-triangle":{triangle:{top:"-10px",left:"12px"},triangleShadow:{top:"-11px",left:"12px"}},"top-right-triangle":{triangle:{top:"-10px",right:"12px"},triangleShadow:{top:"-11px",right:"12px"}}},c),{"hide-triangle":"hide"===s,"top-left-triangle":"top-left"===s,"top-right-triangle":"top-right"===s}),f=function(e,r){N(e)&&t({hex:e,source:"hex"},r)};return n.createElement("div",{style:d.card,className:"twitter-picker "+h},n.createElement("div",{style:d.triangleShadow}),n.createElement("div",{style:d.triangle}),n.createElement("div",{style:d.body},(0,ee.Z)(i,(function(e,t){return n.createElement(q,{key:t,color:e,hex:e,style:d.swatch,onClick:f,onHover:r,focusStyle:{boxShadow:"0 0 4px "+e}})})),n.createElement("div",{style:d.hash},"#"),n.createElement(y,{label:null,style:{input:d.input},value:a.replace("#",""),onChange:f}),n.createElement("div",{style:d.clear})))};Ue.propTypes={width:R().oneOfType([R().string,R().number]),triangle:R().oneOf(["hide","top-left","top-right"]),colors:R().arrayOf(R().string),styles:R().object},Ue.defaultProps={width:276,colors:["#FF6900","#FCB900","#7BDCB5","#00D084","#8ED1FC","#0693E3","#ABB8C3","#EB144C","#F78DA7","#9900EF"],triangle:"top-left",styles:{}},$(Ue);var $e=function(e){var t=(0,o.ZP)({default:{picker:{width:"20px",height:"20px",borderRadius:"22px",border:"2px #fff solid",transform:"translate(-12px, -13px)",background:"hsl("+Math.round(e.hsl.h)+", "+Math.round(100*e.hsl.s)+"%, "+Math.round(100*e.hsl.l)+"%)"}}});return n.createElement("div",{style:t.picker})};$e.propTypes={hsl:R().shape({h:R().number,s:R().number,l:R().number,a:R().number})},$e.defaultProps={hsl:{a:1,h:249.94,l:.2,s:.5}};const Xe=$e;var Ve=function(e){var t=(0,o.ZP)({default:{picker:{width:"20px",height:"20px",borderRadius:"22px",transform:"translate(-10px, -7px)",background:"hsl("+Math.round(e.hsl.h)+", 100%, 50%)",border:"2px white solid"}}});return n.createElement("div",{style:t.picker})};Ve.propTypes={hsl:R().shape({h:R().number,s:R().number,l:R().number,a:R().number})},Ve.defaultProps={hsl:{a:1,h:249.94,l:.2,s:.5}};const Ie=Ve,We=function(e){var t=e.onChange,r=e.rgb,a=e.hsl,i=e.hex,l=e.hsv,s=function(e,r){if(e.hex)N(e.hex)&&t({hex:e.hex,source:"hex"},r);else if(e.rgb){var n=e.rgb.split(",");M(e.rgb,"rgb")&&t({r:n[0],g:n[1],b:n[2],a:1,source:"rgb"},r)}else if(e.hsv){var o=e.hsv.split(",");M(e.hsv,"hsv")&&(o[2]=o[2].replace("%",""),o[1]=o[1].replace("%",""),o[0]=o[0].replace("°",""),1==o[1]?o[1]=.01:1==o[2]&&(o[2]=.01),t({h:Number(o[0]),s:Number(o[1]),v:Number(o[2]),source:"hsv"},r))}else if(e.hsl){var a=e.hsl.split(",");M(e.hsl,"hsl")&&(a[2]=a[2].replace("%",""),a[1]=a[1].replace("%",""),a[0]=a[0].replace("°",""),1==h[1]?h[1]=.01:1==h[2]&&(h[2]=.01),t({h:Number(a[0]),s:Number(a[1]),v:Number(a[2]),source:"hsl"},r))}},p=(0,o.ZP)({default:{wrap:{display:"flex",height:"100px",marginTop:"4px"},fields:{width:"100%"},column:{paddingTop:"10px",display:"flex",justifyContent:"space-between"},double:{padding:"0px 4.4px",boxSizing:"border-box"},input:{width:"100%",height:"38px",boxSizing:"border-box",padding:"4px 10% 3px",textAlign:"center",border:"1px solid #dadce0",fontSize:"11px",textTransform:"lowercase",borderRadius:"5px",outline:"none",fontFamily:"Roboto,Arial,sans-serif"},input2:{height:"38px",width:"100%",border:"1px solid #dadce0",boxSizing:"border-box",fontSize:"11px",textTransform:"lowercase",borderRadius:"5px",outline:"none",paddingLeft:"10px",fontFamily:"Roboto,Arial,sans-serif"},label:{textAlign:"center",fontSize:"12px",background:"#fff",position:"absolute",textTransform:"uppercase",color:"#3c4043",width:"35px",top:"-6px",left:"0",right:"0",marginLeft:"auto",marginRight:"auto",fontFamily:"Roboto,Arial,sans-serif"},label2:{left:"10px",textAlign:"center",fontSize:"12px",background:"#fff",position:"absolute",textTransform:"uppercase",color:"#3c4043",width:"32px",top:"-6px",fontFamily:"Roboto,Arial,sans-serif"},single:{flexGrow:"1",margin:"0px 4.4px"}}}),c=r.r+", "+r.g+", "+r.b,u=Math.round(a.h)+"°, "+Math.round(100*a.s)+"%, "+Math.round(100*a.l)+"%",h=Math.round(l.h)+"°, "+Math.round(100*l.s)+"%, "+Math.round(100*l.v)+"%";return n.createElement("div",{style:p.wrap,className:"flexbox-fix"},n.createElement("div",{style:p.fields},n.createElement("div",{style:p.double},n.createElement(y,{style:{input:p.input,label:p.label},label:"hex",value:i,onChange:s})),n.createElement("div",{style:p.column},n.createElement("div",{style:p.single},n.createElement(y,{style:{input:p.input2,label:p.label2},label:"rgb",value:c,onChange:s})),n.createElement("div",{style:p.single},n.createElement(y,{style:{input:p.input2,label:p.label2},label:"hsv",value:h,onChange:s})),n.createElement("div",{style:p.single},n.createElement(y,{style:{input:p.input2,label:p.label2},label:"hsl",value:u,onChange:s})))))};var Qe=function(e){var t=e.width,r=e.onChange,a=e.rgb,i=e.hsl,l=e.hsv,s=e.hex,p=e.header,c=e.styles,u=void 0===c?{}:c,h=e.className,d=void 0===h?"":h,f=(0,o.ZP)((0,O.Z)({default:{picker:{width:t,background:"#fff",border:"1px solid #dfe1e5",boxSizing:"initial",display:"flex",flexWrap:"wrap",borderRadius:"8px 8px 0px 0px"},head:{height:"57px",width:"100%",paddingTop:"16px",paddingBottom:"16px",paddingLeft:"16px",fontSize:"20px",boxSizing:"border-box",fontFamily:"Roboto-Regular,HelveticaNeue,Arial,sans-serif"},saturation:{width:"70%",padding:"0px",position:"relative",overflow:"hidden"},swatch:{width:"30%",height:"228px",padding:"0px",background:"rgba("+a.r+", "+a.g+", "+a.b+", 1)",position:"relative",overflow:"hidden"},body:{margin:"auto",width:"95%"},controls:{display:"flex",boxSizing:"border-box",height:"52px",paddingTop:"22px"},color:{width:"32px"},hue:{height:"8px",position:"relative",margin:"0px 16px 0px 16px",width:"100%"},Hue:{radius:"2px"}}},u));return n.createElement("div",{style:f.picker,className:"google-picker "+d},n.createElement("div",{style:f.head},p),n.createElement("div",{style:f.swatch}),n.createElement("div",{style:f.saturation},n.createElement(j,{hsl:i,hsv:l,pointer:Xe,onChange:r})),n.createElement("div",{style:f.body},n.createElement("div",{style:f.controls,className:"flexbox-fix"},n.createElement("div",{style:f.hue},n.createElement(k,{style:f.Hue,hsl:i,radius:"4px",pointer:Ie,onChange:r}))),n.createElement(We,{rgb:a,hsl:i,hex:s,hsv:l,onChange:r})))};Qe.propTypes={width:R().oneOfType([R().string,R().number]),styles:R().object,header:R().string},Qe.defaultProps={width:652,styles:{},header:"Color picker"},$(Qe)},72408:(e,t)=>{var r=Symbol.for("react.element"),n=Symbol.for("react.portal"),o=Symbol.for("react.fragment"),a=Symbol.for("react.strict_mode"),i=Symbol.for("react.profiler"),l=Symbol.for("react.provider"),s=Symbol.for("react.context"),p=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),u=Symbol.for("react.memo"),h=Symbol.for("react.lazy"),d=Symbol.iterator,f={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},b=Object.assign,g={};function x(e,t,r){this.props=e,this.context=t,this.refs=g,this.updater=r||f}function v(){}function y(e,t,r){this.props=e,this.context=t,this.refs=g,this.updater=r||f}x.prototype.isReactComponent={},x.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},x.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},v.prototype=x.prototype;var m=y.prototype=new v;m.constructor=y,b(m,x.prototype),m.isPureReactComponent=!0;var w=Array.isArray,E=Object.prototype.hasOwnProperty,C={current:null},k={key:!0,ref:!0,__self:!0,__source:!0};function S(e,t,n){var o,a={},i=null,l=null;if(null!=t)for(o in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(i=""+t.key),t)E.call(t,o)&&!k.hasOwnProperty(o)&&(a[o]=t[o]);var s=arguments.length-2;if(1===s)a.children=n;else if(1<s){for(var p=Array(s),c=0;c<s;c++)p[c]=arguments[c+2];a.children=p}if(e&&e.defaultProps)for(o in s=e.defaultProps)void 0===a[o]&&(a[o]=s[o]);return{$$typeof:r,type:e,key:i,ref:l,props:a,_owner:C.current}}function R(e){return"object"==typeof e&&null!==e&&e.$$typeof===r}var O=/\/+/g;function B(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function P(e,t,o,a,i){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var s=!1;if(null===e)s=!0;else switch(l){case"string":case"number":s=!0;break;case"object":switch(e.$$typeof){case r:case n:s=!0}}if(s)return i=i(s=e),e=""===a?"."+B(s,0):a,w(i)?(o="",null!=e&&(o=e.replace(O,"$&/")+"/"),P(i,t,o,"",(function(e){return e}))):null!=i&&(R(i)&&(i=function(e,t){return{$$typeof:r,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,o+(!i.key||s&&s.key===i.key?"":(""+i.key).replace(O,"$&/")+"/")+e)),t.push(i)),1;if(s=0,a=""===a?".":a+":",w(e))for(var p=0;p<e.length;p++){var c=a+B(l=e[p],p);s+=P(l,t,o,c,i)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=d&&e[d]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),p=0;!(l=e.next()).done;)s+=P(l=l.value,t,o,c=a+B(l,p++),i);else if("object"===l)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return s}function F(e,t,r){if(null==e)return e;var n=[],o=0;return P(e,n,"","",(function(e){return t.call(r,e,o++)})),n}function _(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var j={current:null},T={transition:null},D={ReactCurrentDispatcher:j,ReactCurrentBatchConfig:T,ReactCurrentOwner:C};t.Children={map:F,forEach:function(e,t,r){F(e,(function(){t.apply(this,arguments)}),r)},count:function(e){var t=0;return F(e,(function(){t++})),t},toArray:function(e){return F(e,(function(e){return e}))||[]},only:function(e){if(!R(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=x,t.Fragment=o,t.Profiler=i,t.PureComponent=y,t.StrictMode=a,t.Suspense=c,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=D,t.cloneElement=function(e,t,n){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var o=b({},e.props),a=e.key,i=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(i=t.ref,l=C.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var s=e.type.defaultProps;for(p in t)E.call(t,p)&&!k.hasOwnProperty(p)&&(o[p]=void 0===t[p]&&void 0!==s?s[p]:t[p])}var p=arguments.length-2;if(1===p)o.children=n;else if(1<p){s=Array(p);for(var c=0;c<p;c++)s[c]=arguments[c+2];o.children=s}return{$$typeof:r,type:e.type,key:a,ref:i,props:o,_owner:l}},t.createContext=function(e){return(e={$$typeof:s,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:l,_context:e},e.Consumer=e},t.createElement=S,t.createFactory=function(e){var t=S.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:p,render:e}},t.isValidElement=R,t.lazy=function(e){return{$$typeof:h,_payload:{_status:-1,_result:e},_init:_}},t.memo=function(e,t){return{$$typeof:u,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=T.transition;T.transition={};try{e()}finally{T.transition=t}},t.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},t.useCallback=function(e,t){return j.current.useCallback(e,t)},t.useContext=function(e){return j.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return j.current.useDeferredValue(e)},t.useEffect=function(e,t){return j.current.useEffect(e,t)},t.useId=function(){return j.current.useId()},t.useImperativeHandle=function(e,t,r){return j.current.useImperativeHandle(e,t,r)},t.useInsertionEffect=function(e,t){return j.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return j.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return j.current.useMemo(e,t)},t.useReducer=function(e,t,r){return j.current.useReducer(e,t,r)},t.useRef=function(e){return j.current.useRef(e)},t.useState=function(e){return j.current.useState(e)},t.useSyncExternalStore=function(e,t,r){return j.current.useSyncExternalStore(e,t,r)},t.useTransition=function(){return j.current.useTransition()},t.version="18.2.0"},67294:(e,t,r)=>{e.exports=r(72408)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,