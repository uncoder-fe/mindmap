(()=>{"use strict";var t,e,n,r={29527:(t,e,n)=>{n.d(e,{H6:()=>ct,QW:()=>O});var r=n(46320),i=n(28974),s=n(40909),l=n(69805),o=n(17676),c=n(68893),h=n(70790),a=n(93562),d=n(96399),u=n(81351),g=n(45064),f=n(48412),p=n(21371),w=n(31111),_=n(49776);class m{constructor(t,e){this.clock=t,this.len=e}}class k{constructor(){this.clients=new Map}}const b=(t,e,n)=>e.clients.forEach(((e,r)=>{const i=t.doc.store.clients.get(r);for(let r=0;r<e.length;r++){const s=e[r];q(t,i,s.clock,s.len,n)}})),y=(t,e)=>{const n=t.clients.get(e.client);return void 0!==n&&null!==((t,e)=>{let n=0,r=t.length-1;for(;n<=r;){const i=s.GW((n+r)/2),l=t[i],o=l.clock;if(o<=e){if(e<o+l.len)return i;n=i+1}else r=i-1}return null})(n,e.clock)},E=t=>{t.clients.forEach((t=>{let e,n;for(t.sort(((t,e)=>t.clock-e.clock)),e=1,n=1;e<t.length;e++){const r=t[n-1],i=t[e];r.clock+r.len>=i.clock?r.len=s.Fp(r.len,i.clock+i.len-r.clock):(n<e&&(t[n]=i),n++)}t.length=n}))},S=t=>{const e=new k;for(let n=0;n<t.length;n++)t[n].clients.forEach(((r,s)=>{if(!e.clients.has(s)){const l=r.slice();for(let e=n+1;e<t.length;e++)i.s7(l,t[e].clients.get(s)||[]);e.clients.set(s,l)}}));return E(e),e},C=(t,e,n,r)=>{l.Yu(t.clients,e,(()=>[])).push(new m(n,r))},v=c.U7;class O extends r.y{constructor({guid:t=c.k$(),collectionid:e=null,gc:n=!0,gcFilter:r=(()=>!0),meta:i=null,autoLoad:s=!1,shouldLoad:l=!0}={}){super(),this.gc=n,this.gcFilter=r,this.clientID=v(),this.guid=t,this.collectionid=e,this.share=new Map,this.store=new $,this._transaction=null,this._transactionCleanups=[],this.subdocs=new Set,this._item=null,this.shouldLoad=l,this.autoLoad=s,this.meta=i,this.isLoaded=!1,this.whenLoaded=h.Ue((t=>{this.on("load",(()=>{this.isLoaded=!0,t(this)}))}))}load(){const t=this._item;null===t||this.shouldLoad||it(t.parent.doc,(t=>{t.subdocsLoaded.add(this)}),null,!0),this.shouldLoad=!0}getSubdocs(){return this.subdocs}getSubdocGuids(){return new Set(Array.from(this.subdocs).map((t=>t.guid)))}transact(t,e=null){it(this,t,e)}get(t,e=_t){const n=l.Yu(this.share,t,(()=>{const t=new e;return t._integrate(this,null),t})),r=n.constructor;if(e!==_t&&r!==e){if(r===_t){const r=new e;r._map=n._map,n._map.forEach((t=>{for(;null!==t;t=t.left)t.parent=r})),r._start=n._start;for(let t=r._start;null!==t;t=t.right)t.parent=r;return r._length=n._length,this.share.set(t,r),r._integrate(this,null),r}throw new Error(`Type with the name ${t} has already been defined with a different constructor`)}return n}getArray(t=""){return this.get(t,Rt)}getText(t=""){return this.get(t,Zt)}getMap(t=""){return this.get(t,Ut)}getXmlFragment(t=""){return this.get(t,Qt)}toJSON(){const t={};return this.share.forEach(((e,n)=>{t[n]=e.toJSON()})),t}destroy(){i.Dp(this.subdocs).forEach((t=>t.destroy()));const t=this._item;if(null!==t){this._item=null;const e=t.content;e.doc=new O({guid:this.guid,...e.opts,shouldLoad:!1}),e.doc._item=t,it(t.parent.doc,(n=>{const r=e.doc;t.deleted||n.subdocsAdded.add(r),n.subdocsRemoved.add(this)}),null,!0)}this.emit("destroyed",[!0]),this.emit("destroy",[this]),super.destroy()}on(t,e){super.on(t,e)}off(t,e){super.off(t,e)}}class A extends class{constructor(){this.restEncoder=o.Mf()}toUint8Array(){return o._f(this.restEncoder)}resetDsCurVal(){}writeDsClock(t){o.uE(this.restEncoder,t)}writeDsLen(t){o.uE(this.restEncoder,t)}}{writeLeftID(t){o.uE(this.restEncoder,t.client),o.uE(this.restEncoder,t.clock)}writeRightID(t){o.uE(this.restEncoder,t.client),o.uE(this.restEncoder,t.clock)}writeClient(t){o.uE(this.restEncoder,t)}writeInfo(t){o.$F(this.restEncoder,t)}writeString(t){o.uw(this.restEncoder,t)}writeParentInfo(t){o.uE(this.restEncoder,t?1:0)}writeTypeRef(t){o.uE(this.restEncoder,t)}writeLen(t){o.uE(this.restEncoder,t)}writeAny(t){o.EM(this.restEncoder,t)}writeBuf(t){o.mP(this.restEncoder,t)}writeJSON(t){o.uw(this.restEncoder,JSON.stringify(t))}writeKey(t){o.uw(this.restEncoder,t)}}class M extends class{constructor(){this.restEncoder=o.Mf(),this.dsCurrVal=0}toUint8Array(){return o._f(this.restEncoder)}resetDsCurVal(){this.dsCurrVal=0}writeDsClock(t){const e=t-this.dsCurrVal;this.dsCurrVal=t,o.uE(this.restEncoder,e)}writeDsLen(t){0===t&&a.zR(),o.uE(this.restEncoder,t-1),this.dsCurrVal+=t}}{constructor(){super(),this.keyMap=new Map,this.keyClock=0,this.keyClockEncoder=new o.sX,this.clientEncoder=new o.HE,this.leftClockEncoder=new o.sX,this.rightClockEncoder=new o.sX,this.infoEncoder=new o.GF(o.$F),this.stringEncoder=new o.TS,this.parentInfoEncoder=new o.GF(o.$F),this.typeRefEncoder=new o.HE,this.lenEncoder=new o.HE}toUint8Array(){const t=o.Mf();return o.uE(t,0),o.mP(t,this.keyClockEncoder.toUint8Array()),o.mP(t,this.clientEncoder.toUint8Array()),o.mP(t,this.leftClockEncoder.toUint8Array()),o.mP(t,this.rightClockEncoder.toUint8Array()),o.mP(t,o._f(this.infoEncoder)),o.mP(t,this.stringEncoder.toUint8Array()),o.mP(t,o._f(this.parentInfoEncoder)),o.mP(t,this.typeRefEncoder.toUint8Array()),o.mP(t,this.lenEncoder.toUint8Array()),o.HK(t,o._f(this.restEncoder)),o._f(t)}writeLeftID(t){this.clientEncoder.write(t.client),this.leftClockEncoder.write(t.clock)}writeRightID(t){this.clientEncoder.write(t.client),this.rightClockEncoder.write(t.clock)}writeClient(t){this.clientEncoder.write(t)}writeInfo(t){this.infoEncoder.write(t)}writeString(t){this.stringEncoder.write(t)}writeParentInfo(t){this.parentInfoEncoder.write(t?1:0)}writeTypeRef(t){this.typeRefEncoder.write(t)}writeLen(t){this.lenEncoder.write(t)}writeAny(t){o.EM(this.restEncoder,t)}writeBuf(t){o.mP(this.restEncoder,t)}writeJSON(t){o.EM(this.restEncoder,t)}writeKey(t){const e=this.keyMap.get(t);void 0===e?(this.keyClockEncoder.write(this.keyClock++),this.stringEncoder.write(t)):this.keyClockEncoder.write(e)}}class x{constructor(){this.l=[]}}const I=()=>new x,D=(t,e)=>t.l.push(e),L=(t,e)=>{const n=t.l,r=n.length;t.l=n.filter((t=>e!==t)),r===t.l.length&&console.error("[yjs] Tried to remove event handler that doesn't exist.")},T=(t,e,n)=>u.PP(t.l,[e,n]);class N{constructor(t,e){this.client=t,this.clock=e}}const R=(t,e)=>t===e||null!==t&&null!==e&&t.client===e.client&&t.clock===e.clock,P=(t,e)=>new N(t,e),U=(t,e)=>{for(;null!==e;){if(e.parent===t)return!0;e=e.parent._item}return!1};class j{constructor(t,e){this.ds=t,this.sv=e}}const W=(F=new k,z=new Map,new j(F,z),(t,e)=>void 0===e?!t.deleted:e.sv.has(t.id.client)&&(e.sv.get(t.id.client)||0)>t.id.clock&&!y(e.ds,t.id)),J=(t,e)=>{const n=l.Yu(t.meta,J,g.Ue),r=t.doc.store;n.has(e)||(e.sv.forEach(((e,n)=>{e<V(r,n)&&X(t,P(n,e))})),b(t,e.ds,(t=>{})),n.add(e))};var F,z;class ${constructor(){this.clients=new Map,this.pendingStructs=null,this.pendingDs=null}}const H=t=>{const e=new Map;return t.clients.forEach(((t,n)=>{const r=t[t.length-1];e.set(n,r.id.clock+r.length)})),e},V=(t,e)=>{const n=t.clients.get(e);if(void 0===n)return 0;const r=n[n.length-1];return r.id.clock+r.length},Y=(t,e)=>{let n=t.clients.get(e.id.client);if(void 0===n)n=[],t.clients.set(e.id.client,n);else{const t=n[n.length-1];if(t.id.clock+t.length!==e.id.clock)throw a.zR()}n.push(e)},G=(t,e)=>{let n=0,r=t.length-1,i=t[r],l=i.id.clock;if(l===e)return r;let o=s.GW(e/(l+i.length-1)*r);for(;n<=r;){if(i=t[o],l=i.id.clock,l<=e){if(e<l+i.length)return o;n=o+1}else r=o-1;o=s.GW((n+r)/2)}throw a.zR()},B=(t,e)=>{const n=t.clients.get(e.client);return n[G(n,e.clock)]},K=(t,e,n)=>{const r=G(e,n),i=e[r];return i.id.clock<n&&i instanceof ye?(e.splice(r+1,0,ke(t,i,n-i.id.clock)),r+1):r},X=(t,e)=>{const n=t.doc.store.clients.get(e.client);return n[K(t,n,e.clock)]},Z=(t,e,n)=>{const r=e.clients.get(n.client),i=G(r,n.clock),s=r[i];return n.clock!==s.id.clock+s.length-1&&s.constructor!==re&&r.splice(i+1,0,ke(t,s,n.clock-s.id.clock+1)),s},q=(t,e,n,r,i)=>{if(0===r)return;const s=n+r;let l,o=K(t,e,n);do{l=e[o++],s<l.id.clock+l.length&&K(t,e,s),i(l)}while(o<e.length&&e[o].id.clock<s)};class Q{constructor(t,e,n){this.doc=t,this.deleteSet=new k,this.beforeState=H(t.store),this.afterState=new Map,this.changed=new Map,this.changedParentTypes=new Map,this._mergeStructs=[],this.origin=e,this.meta=new Map,this.local=n,this.subdocsAdded=new Set,this.subdocsRemoved=new Set,this.subdocsLoaded=new Set}}const tt=(t,e)=>!(0===e.deleteSet.clients.size&&!l.Yj(e.afterState,((t,n)=>e.beforeState.get(n)!==t))||(E(e.deleteSet),((t,e)=>{((t,e,n)=>{const r=new Map;n.forEach(((t,n)=>{V(e,n)>t&&r.set(n,t)})),H(e).forEach(((t,e)=>{n.has(e)||r.set(e,0)})),o.uE(t.restEncoder,r.size),Array.from(r.entries()).sort(((t,e)=>e[0]-t[0])).forEach((([n,r])=>{((t,e,n,r)=>{r=s.Fp(r,e[0].id.clock);const i=G(e,r);o.uE(t.restEncoder,e.length-i),t.writeClient(n),o.uE(t.restEncoder,r);const l=e[i];l.write(t,r-l.id.clock);for(let n=i+1;n<e.length;n++)e[n].write(t,0)})(t,e.clients.get(n),n,r)}))})(t,e.doc.store,e.beforeState)})(t,e),((t,e)=>{o.uE(t.restEncoder,e.clients.size),e.clients.forEach(((e,n)=>{t.resetDsCurVal(),o.uE(t.restEncoder,n);const r=e.length;o.uE(t.restEncoder,r);for(let n=0;n<r;n++){const r=e[n];t.writeDsClock(r.clock),t.writeDsLen(r.len)}}))})(t,e.deleteSet),0)),et=(t,e,n)=>{const r=e._item;(null===r||r.id.clock<(t.beforeState.get(r.id.client)||0)&&!r.deleted)&&l.Yu(t.changed,e,g.Ue).add(n)},nt=(t,e)=>{const n=t[e-1],r=t[e];n.deleted===r.deleted&&n.constructor===r.constructor&&n.mergeWith(r)&&(t.splice(e,1),r instanceof ye&&null!==r.parentSub&&r.parent._map.get(r.parentSub)===r&&r.parent._map.set(r.parentSub,n))},rt=(t,e)=>{if(e<t.length){const n=t[e],r=n.doc,i=r.store,l=n.deleteSet,o=n._mergeStructs;try{E(l),n.afterState=H(n.doc.store),r._transaction=null,r.emit("beforeObserverCalls",[n,r]);const c=[];n.changed.forEach(((t,e)=>c.push((()=>{null!==e._item&&e._item.deleted||e._callObserver(n,t)})))),c.push((()=>{n.changedParentTypes.forEach(((t,e)=>c.push((()=>{null!==e._item&&e._item.deleted||((t=t.filter((t=>null===t.target._item||!t.target._item.deleted))).forEach((t=>{t.currentTarget=e})),t.sort(((t,e)=>t.path.length-e.path.length)),T(e._dEH,t,n))})))),c.push((()=>r.emit("afterTransaction",[n,r])))})),(0,u.PP)(c,[])}finally{r.gc&&((t,e,n)=>{for(const[r,i]of t.clients.entries()){const t=e.clients.get(r);for(let r=i.length-1;r>=0;r--){const s=i[r],l=s.clock+s.len;for(let r=G(t,s.clock),i=t[r];r<t.length&&i.id.clock<l;i=t[++r]){const i=t[r];if(s.clock+s.len<=i.id.clock)break;i instanceof ye&&i.deleted&&!i.keep&&n(i)&&i.gc(e,!1)}}}})(l,i,r.gcFilter),((t,e)=>{t.clients.forEach(((t,n)=>{const r=e.clients.get(n);for(let e=t.length-1;e>=0;e--){const n=t[e];for(let t=s.VV(r.length-1,1+G(r,n.clock+n.len-1)),e=r[t];t>0&&e.id.clock>=n.clock;e=r[--t])nt(r,t)}}))})(l,i),n.afterState.forEach(((t,e)=>{const r=n.beforeState.get(e)||0;if(r!==t){const t=i.clients.get(e),n=s.Fp(G(t,r),1);for(let e=t.length-1;e>=n;e--)nt(t,e)}}));for(let t=0;t<o.length;t++){const{client:e,clock:n}=o[t].id,r=i.clients.get(e),s=G(r,n);s+1<r.length&&nt(r,s+1),s>0&&nt(r,s)}if(n.local||n.afterState.get(r.clientID)===n.beforeState.get(r.clientID)||(f.S0(f.ud,f.Pl,"[yjs] ",f.YW,f.hM,"Changed the client-id because another client seems to be using it."),r.clientID=v()),r.emit("afterTransactionCleanup",[n,r]),r._observers.has("update")){const t=new A;tt(t,n)&&r.emit("update",[t.toUint8Array(),n.origin,r,n])}if(r._observers.has("updateV2")){const t=new M;tt(t,n)&&r.emit("updateV2",[t.toUint8Array(),n.origin,r,n])}const{subdocsAdded:c,subdocsLoaded:h,subdocsRemoved:a}=n;(c.size>0||a.size>0||h.size>0)&&(c.forEach((t=>{t.clientID=r.clientID,null==t.collectionid&&(t.collectionid=r.collectionid),r.subdocs.add(t)})),a.forEach((t=>r.subdocs.delete(t))),r.emit("subdocs",[{loaded:h,added:c,removed:a},r,n]),a.forEach((t=>t.destroy()))),t.length<=e+1?(r._transactionCleanups=[],r.emit("afterAllTransactions",[r,t])):rt(t,e+1)}}},it=(t,e,n=null,r=!0)=>{const i=t._transactionCleanups;let s=!1;null===t._transaction&&(s=!0,t._transaction=new Q(t,n,r),i.push(t._transaction),1===i.length&&t.emit("beforeAllTransactions",[t]),t.emit("beforeTransaction",[t._transaction,t]));try{e(t._transaction)}finally{s&&i[0]===t._transaction&&rt(i,0)}};class st{constructor(t,e){this.insertions=e,this.deletions=t,this.meta=new Map}}const lt=(t,e,n)=>{b(t,n.deletions,(t=>{t instanceof ye&&e.scope.some((e=>U(e,t)))&&me(t,!1)}))},ot=(t,e,n)=>{let r=null,i=null;const s=t.doc,l=t.scope;if(it(s,(n=>{for(;e.length>0&&null===r;){const i=s.store,o=e.pop(),c=new Set,h=[];let a=!1;b(n,o.insertions,(t=>{if(t instanceof ye){if(null!==t.redone){let{item:e,diff:r}=_e(i,t.id);r>0&&(e=X(n,P(e.id.client,e.id.clock+r))),t=e}!t.deleted&&l.some((e=>U(e,t)))&&h.push(t)}})),b(n,o.deletions,(t=>{t instanceof ye&&l.some((e=>U(e,t)))&&!y(o.insertions,t.id)&&c.add(t)})),c.forEach((e=>{a=null!==be(n,e,c,o.insertions,t.ignoreRemoteMapChanges)||a}));for(let e=h.length-1;e>=0;e--){const r=h[e];t.deleteFilter(r)&&(r.delete(n),a=!0)}r=a?o:null}n.changed.forEach(((t,e)=>{t.has(null)&&e._searchMarker&&(e._searchMarker.length=0)})),i=n}),t),null!=r){const e=i.changedParentTypes;t.emit("stack-item-popped",[{stackItem:r,type:n,changedParentTypes:e},t])}return r};class ct extends r.y{constructor(t,{captureTimeout:e=500,captureTransaction:n=(t=>!0),deleteFilter:r=(()=>!0),trackedOrigins:i=new Set([null]),ignoreRemoteMapChanges:s=!1}={}){super(),this.scope=[],this.addToScope(t),this.deleteFilter=r,i.add(this),this.trackedOrigins=i,this.captureTransaction=n,this.undoStack=[],this.redoStack=[],this.undoing=!1,this.redoing=!1,this.doc=this.scope[0].doc,this.lastChange=0,this.ignoreRemoteMapChanges=s,this.afterTransactionHandler=t=>{if(!(this.captureTransaction(t)&&this.scope.some((e=>t.changedParentTypes.has(e)))&&(this.trackedOrigins.has(t.origin)||t.origin&&this.trackedOrigins.has(t.origin.constructor))))return;const n=this.undoing,r=this.redoing,i=n?this.redoStack:this.undoStack;n?this.stopCapturing():r||this.clear(!1,!0);const s=new k;t.afterState.forEach(((e,n)=>{const r=t.beforeState.get(n)||0,i=e-r;i>0&&C(s,n,r,i)}));const l=p.ZG();let o=!1;if(l-this.lastChange<e&&i.length>0&&!n&&!r){const e=i[i.length-1];e.deletions=S([e.deletions,t.deleteSet]),e.insertions=S([e.insertions,s])}else i.push(new st(t.deleteSet,s)),o=!0;n||r||(this.lastChange=l),b(t,t.deleteSet,(t=>{t instanceof ye&&this.scope.some((e=>U(e,t)))&&me(t,!0)}));const c=[{stackItem:i[i.length-1],origin:t.origin,type:n?"redo":"undo",changedParentTypes:t.changedParentTypes},this];o?this.emit("stack-item-added",c):this.emit("stack-item-updated",c)},this.doc.on("afterTransaction",this.afterTransactionHandler),this.doc.on("destroy",(()=>{this.destroy()}))}addToScope(t){(t=i.kJ(t)?t:[t]).forEach((t=>{this.scope.every((e=>e!==t))&&this.scope.push(t)}))}addTrackedOrigin(t){this.trackedOrigins.add(t)}removeTrackedOrigin(t){this.trackedOrigins.delete(t)}clear(t=!0,e=!0){(t&&this.canUndo()||e&&this.canRedo())&&this.doc.transact((n=>{t&&(this.undoStack.forEach((t=>lt(n,this,t))),this.undoStack=[]),e&&(this.redoStack.forEach((t=>lt(n,this,t))),this.redoStack=[]),this.emit("stack-cleared",[{undoStackCleared:t,redoStackCleared:e}])}))}stopCapturing(){this.lastChange=0}undo(){let t;this.undoing=!0;try{t=ot(this,this.undoStack,"undo")}finally{this.undoing=!1}return t}redo(){let t;this.redoing=!0;try{t=ot(this,this.redoStack,"redo")}finally{this.redoing=!1}return t}canUndo(){return this.undoStack.length>0}canRedo(){return this.redoStack.length>0}destroy(){this.trackedOrigins.delete(this),this.doc.off("afterTransaction",this.afterTransactionHandler),super.destroy()}}class ht{constructor(t,e){this.target=t,this.currentTarget=t,this.transaction=e,this._changes=null,this._keys=null,this._delta=null}get path(){return at(this.currentTarget,this.target)}deletes(t){return y(this.transaction.deleteSet,t.id)}get keys(){if(null===this._keys){const t=new Map,e=this.target;this.transaction.changed.get(e).forEach((n=>{if(null!==n){const r=e._map.get(n);let s,l;if(this.adds(r)){let t=r.left;for(;null!==t&&this.adds(t);)t=t.left;if(this.deletes(r)){if(null===t||!this.deletes(t))return;s="delete",l=i.Z$(t.content.getContent())}else null!==t&&this.deletes(t)?(s="update",l=i.Z$(t.content.getContent())):(s="add",l=void 0)}else{if(!this.deletes(r))return;s="delete",l=i.Z$(r.content.getContent())}t.set(n,{action:s,oldValue:l})}})),this._keys=t}return this._keys}get delta(){return this.changes.delta}adds(t){return t.id.clock>=(this.transaction.beforeState.get(t.id.client)||0)}get changes(){let t=this._changes;if(null===t){const e=this.target,n=g.Ue(),r=g.Ue(),i=[];if(t={added:n,deleted:r,delta:i,keys:this.keys},this.transaction.changed.get(e).has(null)){let t=null;const s=()=>{t&&i.push(t)};for(let i=e._start;null!==i;i=i.right)i.deleted?this.deletes(i)&&!this.adds(i)&&(null!==t&&void 0!==t.delete||(s(),t={delete:0}),t.delete+=i.length,r.add(i)):this.adds(i)?(null!==t&&void 0!==t.insert||(s(),t={insert:[]}),t.insert=t.insert.concat(i.content.getContent()),n.add(i)):(null!==t&&void 0!==t.retain||(s(),t={retain:0}),t.retain+=i.length);null!==t&&void 0===t.retain&&s()}this._changes=t}return t}}const at=(t,e)=>{const n=[];for(;null!==e._item&&e!==t;){if(null!==e._item.parentSub)n.unshift(e._item.parentSub);else{let t=0,r=e._item.parent._start;for(;r!==e._item&&null!==r;)r.deleted||t++,r=r.right;n.unshift(t)}e=e._item.parent}return n};let dt=0;class ut{constructor(t,e){t.marker=!0,this.p=t,this.index=e,this.timestamp=dt++}}const gt=(t,e,n)=>{t.p.marker=!1,t.p=e,e.marker=!0,t.index=n,t.timestamp=dt++},ft=(t,e)=>{if(null===t._start||0===e||null===t._searchMarker)return null;const n=0===t._searchMarker.length?null:t._searchMarker.reduce(((t,n)=>s.Wn(e-t.index)<s.Wn(e-n.index)?t:n));let r=t._start,i=0;for(null!==n&&(r=n.p,i=n.index,(t=>{t.timestamp=dt++})(n));null!==r.right&&i<e;){if(!r.deleted&&r.countable){if(e<i+r.length)break;i+=r.length}r=r.right}for(;null!==r.left&&i>e;)r=r.left,!r.deleted&&r.countable&&(i-=r.length);for(;null!==r.left&&r.left.id.client===r.id.client&&r.left.id.clock+r.left.length===r.id.clock;)r=r.left,!r.deleted&&r.countable&&(i-=r.length);return null!==n&&s.Wn(n.index-i)<r.parent.length/80?(gt(n,r,i),n):((t,e,n)=>{if(t.length>=80){const r=t.reduce(((t,e)=>t.timestamp<e.timestamp?t:e));return gt(r,e,n),r}{const r=new ut(e,n);return t.push(r),r}})(t._searchMarker,r,i)},pt=(t,e,n)=>{for(let r=t.length-1;r>=0;r--){const i=t[r];if(n>0){let e=i.p;for(e.marker=!1;e&&(e.deleted||!e.countable);)e=e.left,e&&!e.deleted&&e.countable&&(i.index-=e.length);if(null===e||!0===e.marker){t.splice(r,1);continue}i.p=e,e.marker=!0}(e<i.index||n>0&&e===i.index)&&(i.index=s.Fp(e,i.index+n))}},wt=(t,e,n)=>{const r=t,i=e.changedParentTypes;for(;l.Yu(i,t,(()=>[])).push(n),null!==t._item;)t=t._item.parent;T(r._eH,n,e)};class _t{constructor(){this._item=null,this._map=new Map,this._start=null,this.doc=null,this._length=0,this._eH=I(),this._dEH=I(),this._searchMarker=null}get parent(){return this._item?this._item.parent:null}_integrate(t,e){this.doc=t,this._item=e}_copy(){throw a.Nw()}clone(){throw a.Nw()}_write(t){}get _first(){let t=this._start;for(;null!==t&&t.deleted;)t=t.right;return t}_callObserver(t,e){!t.local&&this._searchMarker&&(this._searchMarker.length=0)}observe(t){D(this._eH,t)}observeDeep(t){D(this._dEH,t)}unobserve(t){L(this._eH,t)}unobserveDeep(t){L(this._dEH,t)}toJSON(){}}const mt=(t,e,n)=>{e<0&&(e=t._length+e),n<0&&(n=t._length+n);let r=n-e;const i=[];let s=t._start;for(;null!==s&&r>0;){if(s.countable&&!s.deleted){const t=s.content.getContent();if(t.length<=e)e-=t.length;else{for(let n=e;n<t.length&&r>0;n++)i.push(t[n]),r--;e=0}}s=s.right}return i},kt=t=>{const e=[];let n=t._start;for(;null!==n;){if(n.countable&&!n.deleted){const t=n.content.getContent();for(let n=0;n<t.length;n++)e.push(t[n])}n=n.right}return e},bt=(t,e)=>{let n=0,r=t._start;for(;null!==r;){if(r.countable&&!r.deleted){const i=r.content.getContent();for(let r=0;r<i.length;r++)e(i[r],n++,t)}r=r.right}},yt=(t,e)=>{const n=[];return bt(t,((r,i)=>{n.push(e(r,i,t))})),n},Et=t=>{let e=t._start,n=null,r=0;return{[Symbol.iterator](){return this},next:()=>{if(null===n){for(;null!==e&&e.deleted;)e=e.right;if(null===e)return{done:!0,value:void 0};n=e.content.getContent(),r=0,e=e.right}const t=n[r++];return n.length<=r&&(n=null),{done:!1,value:t}}}},St=(t,e)=>{const n=ft(t,e);let r=t._start;for(null!==n&&(r=n.p,e-=n.index);null!==r;r=r.right)if(!r.deleted&&r.countable){if(e<r.length)return r.content.getContent()[e];e-=r.length}},Ct=(t,e,n,r)=>{let i=n;const s=t.doc,l=s.clientID,o=s.store,c=null===n?e._start:n.right;let h=[];const a=()=>{h.length>0&&(i=new ye(P(l,V(o,l)),i,i&&i.lastId,c,c&&c.id,e,null,new he(h)),i.integrate(t,0),h=[])};r.forEach((n=>{if(null===n)h.push(n);else switch(n.constructor){case Number:case Object:case Boolean:case Array:case String:h.push(n);break;default:switch(a(),n.constructor){case Uint8Array:case ArrayBuffer:i=new ye(P(l,V(o,l)),i,i&&i.lastId,c,c&&c.id,e,null,new ie(new Uint8Array(n))),i.integrate(t,0);break;case O:i=new ye(P(l,V(o,l)),i,i&&i.lastId,c,c&&c.id,e,null,new le(n)),i.integrate(t,0);break;default:if(!(n instanceof _t))throw new Error("Unexpected content type in insert operation");i=new ye(P(l,V(o,l)),i,i&&i.lastId,c,c&&c.id,e,null,new we(n)),i.integrate(t,0)}}})),a()},vt=a.Ue("Length exceeded!"),Ot=(t,e,n,r)=>{if(n>e._length)throw vt;if(0===n)return e._searchMarker&&pt(e._searchMarker,n,r.length),Ct(t,e,null,r);const i=n,s=ft(e,n);let l=e._start;for(null!==s&&(l=s.p,0==(n-=s.index)&&(l=l.prev,n+=l&&l.countable&&!l.deleted?l.length:0));null!==l;l=l.right)if(!l.deleted&&l.countable){if(n<=l.length){n<l.length&&X(t,P(l.id.client,l.id.clock+n));break}n-=l.length}return e._searchMarker&&pt(e._searchMarker,i,r.length),Ct(t,e,l,r)},At=(t,e,n,r)=>{if(0===r)return;const i=n,s=r,l=ft(e,n);let o=e._start;for(null!==l&&(o=l.p,n-=l.index);null!==o&&n>0;o=o.right)!o.deleted&&o.countable&&(n<o.length&&X(t,P(o.id.client,o.id.clock+n)),n-=o.length);for(;r>0&&null!==o;)o.deleted||(r<o.length&&X(t,P(o.id.client,o.id.clock+r)),o.delete(t),r-=o.length),o=o.right;if(r>0)throw vt;e._searchMarker&&pt(e._searchMarker,i,-s+r)},Mt=(t,e,n)=>{const r=e._map.get(n);void 0!==r&&r.delete(t)},xt=(t,e,n,r)=>{const i=e._map.get(n)||null,s=t.doc,l=s.clientID;let o;if(null==r)o=new he([r]);else switch(r.constructor){case Number:case Object:case Boolean:case Array:case String:o=new he([r]);break;case Uint8Array:o=new ie(r);break;case O:o=new le(r);break;default:if(!(r instanceof _t))throw new Error("Unexpected content type");o=new we(r)}new ye(P(l,V(s.store,l)),i,i&&i.lastId,null,null,e,n,o).integrate(t,0)},It=(t,e)=>{const n=t._map.get(e);return void 0===n||n.deleted?void 0:n.content.getContent()[n.length-1]},Dt=t=>{const e={};return t._map.forEach(((t,n)=>{t.deleted||(e[n]=t.content.getContent()[t.length-1])})),e},Lt=(t,e)=>{const n=t._map.get(e);return void 0!==n&&!n.deleted},Tt=t=>w.BG(t.entries(),(t=>!t[1].deleted));class Nt extends ht{constructor(t,e){super(t,e),this._transaction=e}}class Rt extends _t{constructor(){super(),this._prelimContent=[],this._searchMarker=[]}static from(t){const e=new Rt;return e.push(t),e}_integrate(t,e){super._integrate(t,e),this.insert(0,this._prelimContent),this._prelimContent=null}_copy(){return new Rt}clone(){const t=new Rt;return t.insert(0,this.toArray().map((t=>t instanceof _t?t.clone():t))),t}get length(){return null===this._prelimContent?this._length:this._prelimContent.length}_callObserver(t,e){super._callObserver(t,e),wt(this,t,new Nt(this,t))}insert(t,e){null!==this.doc?it(this.doc,(n=>{Ot(n,this,t,e)})):this._prelimContent.splice(t,0,...e)}push(t){null!==this.doc?it(this.doc,(e=>{((t,e,n)=>{let r=(e._searchMarker||[]).reduce(((t,e)=>e.index>t.index?e:t),{index:0,p:e._start}).p;if(r)for(;r.right;)r=r.right;Ct(t,e,r,n)})(e,this,t)})):this._prelimContent.push(...t)}unshift(t){this.insert(0,t)}delete(t,e=1){null!==this.doc?it(this.doc,(n=>{At(n,this,t,e)})):this._prelimContent.splice(t,e)}get(t){return St(this,t)}toArray(){return kt(this)}slice(t=0,e=this.length){return mt(this,t,e)}toJSON(){return this.map((t=>t instanceof _t?t.toJSON():t))}map(t){return yt(this,t)}forEach(t){bt(this,t)}[Symbol.iterator](){return Et(this)}_write(t){t.writeTypeRef(de)}}class Pt extends ht{constructor(t,e,n){super(t,e),this.keysChanged=n}}class Ut extends _t{constructor(t){super(),this._prelimContent=null,this._prelimContent=void 0===t?new Map:new Map(t)}_integrate(t,e){super._integrate(t,e),this._prelimContent.forEach(((t,e)=>{this.set(e,t)})),this._prelimContent=null}_copy(){return new Ut}clone(){const t=new Ut;return this.forEach(((e,n)=>{t.set(n,e instanceof _t?e.clone():e)})),t}_callObserver(t,e){wt(this,t,new Pt(this,t,e))}toJSON(){const t={};return this._map.forEach(((e,n)=>{if(!e.deleted){const r=e.content.getContent()[e.length-1];t[n]=r instanceof _t?r.toJSON():r}})),t}get size(){return[...Tt(this._map)].length}keys(){return w.CA(Tt(this._map),(t=>t[0]))}values(){return w.CA(Tt(this._map),(t=>t[1].content.getContent()[t[1].length-1]))}entries(){return w.CA(Tt(this._map),(t=>[t[0],t[1].content.getContent()[t[1].length-1]]))}forEach(t){return this._map.forEach(((e,n)=>{e.deleted||t(e.content.getContent()[e.length-1],n,this)})),{}}[Symbol.iterator](){return this.entries()}delete(t){null!==this.doc?it(this.doc,(e=>{Mt(e,this,t)})):this._prelimContent.delete(t)}set(t,e){return null!==this.doc?it(this.doc,(n=>{xt(n,this,t,e)})):this._prelimContent.set(t,e),e}get(t){return It(this,t)}has(t){return Lt(this,t)}clear(){null!==this.doc?it(this.doc,(t=>{this.forEach((function(e,n,r){Mt(t,r,n)}))})):this._prelimContent.clear()}_write(t){t.writeTypeRef(ue)}}const jt=(t,e)=>t===e||"object"==typeof t&&"object"==typeof e&&t&&e&&_.$m(t,e);class Wt{constructor(t,e,n,r){this.left=t,this.right=e,this.index=n,this.currentAttributes=r}forward(){null===this.right&&a.zR(),this.right.content.constructor===ce?this.right.deleted||$t(this.currentAttributes,this.right.content):this.right.deleted||(this.index+=this.right.length),this.left=this.right,this.right=this.right.right}}const Jt=(t,e,n)=>{for(;null!==e.right&&n>0;)e.right.content.constructor===ce?e.right.deleted||$t(e.currentAttributes,e.right.content):e.right.deleted||(n<e.right.length&&X(t,P(e.right.id.client,e.right.id.clock+n)),e.index+=e.right.length,n-=e.right.length),e.left=e.right,e.right=e.right.right;return e},Ft=(t,e,n)=>{const r=new Map,i=ft(e,n);if(i){const e=new Wt(i.p.left,i.p,i.index,r);return Jt(t,e,n-i.index)}{const i=new Wt(null,e._start,0,r);return Jt(t,i,n)}},zt=(t,e,n,r)=>{for(;null!==n.right&&(!0===n.right.deleted||n.right.content.constructor===ce&&jt(r.get(n.right.content.key),n.right.content.value));)n.right.deleted||r.delete(n.right.content.key),n.forward();const i=t.doc,s=i.clientID;r.forEach(((r,l)=>{const o=n.left,c=n.right,h=new ye(P(s,V(i.store,s)),o,o&&o.lastId,c,c&&c.id,e,null,new ce(l,r));h.integrate(t,0),n.right=h,n.forward()}))},$t=(t,e)=>{const{key:n,value:r}=e;null===r?t.delete(n):t.set(n,r)},Ht=(t,e)=>{for(;null!==t.right&&(t.right.deleted||t.right.content.constructor===ce&&jt(e[t.right.content.key]||null,t.right.content.value));)t.forward()},Vt=(t,e,n,r)=>{const i=t.doc,s=i.clientID,l=new Map;for(const o in r){const c=r[o],h=n.currentAttributes.get(o)||null;if(!jt(h,c)){l.set(o,h);const{left:r,right:a}=n;n.right=new ye(P(s,V(i.store,s)),r,r&&r.lastId,a,a&&a.id,e,null,new ce(o,c)),n.right.integrate(t,0),n.forward()}}return l},Yt=(t,e,n,r,i)=>{n.currentAttributes.forEach(((t,e)=>{void 0===i[e]&&(i[e]=null)}));const s=t.doc,l=s.clientID;Ht(n,i);const o=Vt(t,e,n,i),c=r.constructor===String?new ae(r):r instanceof _t?new we(r):new oe(r);let{left:h,right:a,index:d}=n;e._searchMarker&&pt(e._searchMarker,n.index,c.getLength()),a=new ye(P(l,V(s.store,l)),h,h&&h.lastId,a,a&&a.id,e,null,c),a.integrate(t,0),n.right=a,n.index=d,n.forward(),zt(t,e,n,o)},Gt=(t,e,n,r,i)=>{const s=t.doc,l=s.clientID;Ht(n,i);const o=Vt(t,e,n,i);t:for(;null!==n.right&&(r>0||o.size>0&&(n.right.deleted||n.right.content.constructor===ce));){if(!n.right.deleted)switch(n.right.content.constructor){case ce:{const{key:e,value:s}=n.right.content,l=i[e];if(void 0!==l){if(jt(l,s))o.delete(e);else{if(0===r)break t;o.set(e,s)}n.right.delete(t)}else n.currentAttributes.set(e,s);break}default:r<n.right.length&&X(t,P(n.right.id.client,n.right.id.clock+r)),r-=n.right.length}n.forward()}if(r>0){let i="";for(;r>0;r--)i+="\n";n.right=new ye(P(l,V(s.store,l)),n.left,n.left&&n.left.lastId,n.right,n.right&&n.right.id,e,null,new ae(i)),n.right.integrate(t,0),n.forward()}zt(t,e,n,o)},Bt=(t,e,n,r,i)=>{let s=n;const o=l.JG(i);for(;s&&(!s.countable||s.deleted);)s.deleted||s.content.constructor!==ce||$t(o,s.content),s=s.right;let c=0,h=!1;for(;e!==s;){if(n===e&&(h=!0),!e.deleted){const n=e.content;switch(n.constructor){case ce:{const{key:s,value:l}=n;(o.get(s)||null)===l&&(r.get(s)||null)!==l||(e.delete(t),c++,h||(i.get(s)||null)!==l||(r.get(s)||null)===l||i.delete(s));break}}}e=e.right}return c},Kt=(t,e,n)=>{const r=n,i=l.JG(e.currentAttributes),s=e.right;for(;n>0&&null!==e.right;){if(!1===e.right.deleted)switch(e.right.content.constructor){case we:case oe:case ae:n<e.right.length&&X(t,P(e.right.id.client,e.right.id.clock+n)),n-=e.right.length,e.right.delete(t)}e.forward()}s&&Bt(t,s,e.right,i,e.currentAttributes);const o=(e.left||e.right).parent;return o._searchMarker&&pt(o._searchMarker,e.index,-r+n),e};class Xt extends ht{constructor(t,e,n){super(t,e),this.childListChanged=!1,this.keysChanged=new Set,n.forEach((t=>{null===t?this.childListChanged=!0:this.keysChanged.add(t)}))}get changes(){if(null===this._changes){const t={keys:this.keys,delta:this.delta,added:new Set,deleted:new Set};this._changes=t}return this._changes}get delta(){if(null===this._delta){const t=this.target.doc,e=[];it(t,(t=>{const n=new Map,r=new Map;let i=this.target._start,s=null;const l={};let o="",c=0,h=0;const a=()=>{if(null!==s){let t;switch(s){case"delete":t={delete:h},h=0;break;case"insert":t={insert:o},n.size>0&&(t.attributes={},n.forEach(((e,n)=>{null!==e&&(t.attributes[n]=e)}))),o="";break;case"retain":if(t={retain:c},Object.keys(l).length>0){t.attributes={};for(const e in l)t.attributes[e]=l[e]}c=0}e.push(t),s=null}};for(;null!==i;){switch(i.content.constructor){case we:case oe:this.adds(i)?this.deletes(i)||(a(),s="insert",o=i.content.getContent()[0],a()):this.deletes(i)?("delete"!==s&&(a(),s="delete"),h+=1):i.deleted||("retain"!==s&&(a(),s="retain"),c+=1);break;case ae:this.adds(i)?this.deletes(i)||("insert"!==s&&(a(),s="insert"),o+=i.content.str):this.deletes(i)?("delete"!==s&&(a(),s="delete"),h+=i.length):i.deleted||("retain"!==s&&(a(),s="retain"),c+=i.length);break;case ce:{const{key:e,value:o}=i.content;if(this.adds(i)){if(!this.deletes(i)){const c=n.get(e)||null;jt(c,o)?null!==o&&i.delete(t):("retain"===s&&a(),jt(o,r.get(e)||null)?delete l[e]:l[e]=o)}}else if(this.deletes(i)){r.set(e,o);const t=n.get(e)||null;jt(t,o)||("retain"===s&&a(),l[e]=t)}else if(!i.deleted){r.set(e,o);const n=l[e];void 0!==n&&(jt(n,o)?null!==n&&i.delete(t):("retain"===s&&a(),null===o?delete l[e]:l[e]=o))}i.deleted||("insert"===s&&a(),$t(n,i.content));break}}i=i.right}for(a();e.length>0;){const t=e[e.length-1];if(void 0===t.retain||void 0!==t.attributes)break;e.pop()}})),this._delta=e}return this._delta}}class Zt extends _t{constructor(t){super(),this._pending=void 0!==t?[()=>this.insert(0,t)]:[],this._searchMarker=[]}get length(){return this._length}_integrate(t,e){super._integrate(t,e);try{this._pending.forEach((t=>t()))}catch(t){console.error(t)}this._pending=null}_copy(){return new Zt}clone(){const t=new Zt;return t.applyDelta(this.toDelta()),t}_callObserver(t,e){super._callObserver(t,e);const n=new Xt(this,t,e),r=t.doc;if(wt(this,t,n),!t.local){let e=!1;for(const[n,i]of t.afterState.entries()){const s=t.beforeState.get(n)||0;if(i!==s&&(q(t,r.store.clients.get(n),s,i,(t=>{t.deleted||t.content.constructor!==ce||(e=!0)})),e))break}e||b(t,t.deleteSet,(t=>{t instanceof re||e||t.parent===this&&t.content.constructor===ce&&(e=!0)})),it(r,(t=>{e?(t=>{let e=0;it(t.doc,(n=>{let r=t._start,i=t._start,s=l.Ue();const o=l.JG(s);for(;i;)!1===i.deleted&&(i.content.constructor===ce?$t(o,i.content):(e+=Bt(n,r,i,s,o),s=l.JG(o),r=i)),i=i.right}))})(this):b(t,t.deleteSet,(e=>{e instanceof re||e.parent===this&&((t,e)=>{for(;e&&e.right&&(e.right.deleted||!e.right.countable);)e=e.right;const n=new Set;for(;e&&(e.deleted||!e.countable);){if(!e.deleted&&e.content.constructor===ce){const r=e.content.key;n.has(r)?e.delete(t):n.add(r)}e=e.left}})(t,e)}))}))}}toString(){let t="",e=this._start;for(;null!==e;)!e.deleted&&e.countable&&e.content.constructor===ae&&(t+=e.content.str),e=e.right;return t}toJSON(){return this.toString()}applyDelta(t,{sanitize:e=!0}={}){null!==this.doc?it(this.doc,(n=>{const r=new Wt(null,this._start,0,new Map);for(let i=0;i<t.length;i++){const s=t[i];if(void 0!==s.insert){const l=e||"string"!=typeof s.insert||i!==t.length-1||null!==r.right||"\n"!==s.insert.slice(-1)?s.insert:s.insert.slice(0,-1);("string"!=typeof l||l.length>0)&&Yt(n,this,r,l,s.attributes||{})}else void 0!==s.retain?Gt(n,this,r,s.retain,s.attributes||{}):void 0!==s.delete&&Kt(n,r,s.delete)}})):this._pending.push((()=>this.applyDelta(t)))}toDelta(t,e,n){const r=[],i=new Map,s=this.doc;let l="",o=this._start;function c(){if(l.length>0){const t={};let e=!1;i.forEach(((n,r)=>{e=!0,t[r]=n}));const n={insert:l};e&&(n.attributes=t),r.push(n),l=""}}return it(s,(s=>{for(t&&J(s,t),e&&J(s,e);null!==o;){if(W(o,t)||void 0!==e&&W(o,e))switch(o.content.constructor){case ae:{const r=i.get("ychange");void 0===t||W(o,t)?void 0===e||W(o,e)?void 0!==r&&(c(),i.delete("ychange")):void 0!==r&&r.user===o.id.client&&"added"===r.state||(c(),i.set("ychange",n?n("added",o.id):{type:"added"})):void 0!==r&&r.user===o.id.client&&"removed"===r.state||(c(),i.set("ychange",n?n("removed",o.id):{type:"removed"})),l+=o.content.str;break}case we:case oe:{c();const t={insert:o.content.getContent()[0]};if(i.size>0){const e={};t.attributes=e,i.forEach(((t,n)=>{e[n]=t}))}r.push(t);break}case ce:W(o,t)&&(c(),$t(i,o.content))}o=o.right}c()}),J),r}insert(t,e,n){if(e.length<=0)return;const r=this.doc;null!==r?it(r,(r=>{const i=Ft(r,this,t);n||(n={},i.currentAttributes.forEach(((t,e)=>{n[e]=t}))),Yt(r,this,i,e,n)})):this._pending.push((()=>this.insert(t,e,n)))}insertEmbed(t,e,n={}){const r=this.doc;null!==r?it(r,(r=>{const i=Ft(r,this,t);Yt(r,this,i,e,n)})):this._pending.push((()=>this.insertEmbed(t,e,n)))}delete(t,e){if(0===e)return;const n=this.doc;null!==n?it(n,(n=>{Kt(n,Ft(n,this,t),e)})):this._pending.push((()=>this.delete(t,e)))}format(t,e,n){if(0===e)return;const r=this.doc;null!==r?it(r,(r=>{const i=Ft(r,this,t);null!==i.right&&Gt(r,this,i,e,n)})):this._pending.push((()=>this.format(t,e,n)))}removeAttribute(t){null!==this.doc?it(this.doc,(e=>{Mt(e,this,t)})):this._pending.push((()=>this.removeAttribute(t)))}setAttribute(t,e){null!==this.doc?it(this.doc,(n=>{xt(n,this,t,e)})):this._pending.push((()=>this.setAttribute(t,e)))}getAttribute(t){return It(this,t)}getAttributes(t){return Dt(this)}_write(t){t.writeTypeRef(ge)}}class qt{constructor(t,e=(()=>!0)){this._filter=e,this._root=t,this._currentNode=t._start,this._firstCall=!0}[Symbol.iterator](){return this}next(){let t=this._currentNode,e=t&&t.content&&t.content.type;if(null!==t&&(!this._firstCall||t.deleted||!this._filter(e)))do{if(e=t.content.type,t.deleted||e.constructor!==te&&e.constructor!==Qt||null===e._start)for(;null!==t;){if(null!==t.right){t=t.right;break}t=t.parent===this._root?null:t.parent._item}else t=e._start}while(null!==t&&(t.deleted||!this._filter(t.content.type)));return this._firstCall=!1,null===t?{value:void 0,done:!0}:(this._currentNode=t,{value:t.content.type,done:!1})}}class Qt extends _t{constructor(){super(),this._prelimContent=[]}get firstChild(){const t=this._first;return t?t.content.getContent()[0]:null}_integrate(t,e){super._integrate(t,e),this.insert(0,this._prelimContent),this._prelimContent=null}_copy(){return new Qt}clone(){const t=new Qt;return t.insert(0,this.toArray().map((t=>t instanceof _t?t.clone():t))),t}get length(){return null===this._prelimContent?this._length:this._prelimContent.length}createTreeWalker(t){return new qt(this,t)}querySelector(t){t=t.toUpperCase();const e=new qt(this,(e=>e.nodeName&&e.nodeName.toUpperCase()===t)).next();return e.done?null:e.value}querySelectorAll(t){return t=t.toUpperCase(),Array.from(new qt(this,(e=>e.nodeName&&e.nodeName.toUpperCase()===t)))}_callObserver(t,e){wt(this,t,new ee(this,e,t))}toString(){return yt(this,(t=>t.toString())).join("")}toJSON(){return this.toString()}toDOM(t=document,e={},n){const r=t.createDocumentFragment();return void 0!==n&&n._createAssociation(r,this),bt(this,(i=>{r.insertBefore(i.toDOM(t,e,n),null)})),r}insert(t,e){null!==this.doc?it(this.doc,(n=>{Ot(n,this,t,e)})):this._prelimContent.splice(t,0,...e)}insertAfter(t,e){if(null!==this.doc)it(this.doc,(n=>{const r=t&&t instanceof _t?t._item:t;Ct(n,this,r,e)}));else{const n=this._prelimContent,r=null===t?0:n.findIndex((e=>e===t))+1;if(0===r&&null!==t)throw a.Ue("Reference item not found");n.splice(r,0,...e)}}delete(t,e=1){null!==this.doc?it(this.doc,(n=>{At(n,this,t,e)})):this._prelimContent.splice(t,e)}toArray(){return kt(this)}push(t){this.insert(this.length,t)}unshift(t){this.insert(0,t)}get(t){return St(this,t)}slice(t=0,e=this.length){return mt(this,t,e)}forEach(t){bt(this,t)}_write(t){t.writeTypeRef(pe)}}class te extends Qt{constructor(t="UNDEFINED"){super(),this.nodeName=t,this._prelimAttrs=new Map}get nextSibling(){const t=this._item?this._item.next:null;return t?t.content.type:null}get prevSibling(){const t=this._item?this._item.prev:null;return t?t.content.type:null}_integrate(t,e){super._integrate(t,e),this._prelimAttrs.forEach(((t,e)=>{this.setAttribute(e,t)})),this._prelimAttrs=null}_copy(){return new te(this.nodeName)}clone(){const t=new te(this.nodeName),e=this.getAttributes();for(const n in e)t.setAttribute(n,e[n]);return t.insert(0,this.toArray().map((t=>t instanceof _t?t.clone():t))),t}toString(){const t=this.getAttributes(),e=[],n=[];for(const e in t)n.push(e);n.sort();const r=n.length;for(let i=0;i<r;i++){const r=n[i];e.push(r+'="'+t[r]+'"')}const i=this.nodeName.toLocaleLowerCase();return`<${i}${e.length>0?" "+e.join(" "):""}>${super.toString()}</${i}>`}removeAttribute(t){null!==this.doc?it(this.doc,(e=>{Mt(e,this,t)})):this._prelimAttrs.delete(t)}setAttribute(t,e){null!==this.doc?it(this.doc,(n=>{xt(n,this,t,e)})):this._prelimAttrs.set(t,e)}getAttribute(t){return It(this,t)}hasAttribute(t){return Lt(this,t)}getAttributes(t){return Dt(this)}toDOM(t=document,e={},n){const r=t.createElement(this.nodeName),i=this.getAttributes();for(const t in i)r.setAttribute(t,i[t]);return bt(this,(i=>{r.appendChild(i.toDOM(t,e,n))})),void 0!==n&&n._createAssociation(r,this),r}_write(t){t.writeTypeRef(fe),t.writeKey(this.nodeName)}}class ee extends ht{constructor(t,e,n){super(t,n),this.childListChanged=!1,this.attributesChanged=new Set,e.forEach((t=>{null===t?this.childListChanged=!0:this.attributesChanged.add(t)}))}}class ne{constructor(t,e){this.id=t,this.length=e}get deleted(){throw a.Nw()}mergeWith(t){return!1}write(t,e,n){throw a.Nw()}integrate(t,e){throw a.Nw()}}class re extends ne{get deleted(){return!0}delete(){}mergeWith(t){return this.constructor===t.constructor&&(this.length+=t.length,!0)}integrate(t,e){e>0&&(this.id.clock+=e,this.length-=e),Y(t.doc.store,this)}write(t,e){t.writeInfo(0),t.writeLen(this.length-e)}getMissing(t,e){return null}}class ie{constructor(t){this.content=t}getLength(){return 1}getContent(){return[this.content]}isCountable(){return!0}copy(){return new ie(this.content)}splice(t){throw a.Nw()}mergeWith(t){return!1}integrate(t,e){}delete(t){}gc(t){}write(t,e){t.writeBuf(this.content)}getRef(){return 3}}class se{constructor(t){this.len=t}getLength(){return this.len}getContent(){return[]}isCountable(){return!1}copy(){return new se(this.len)}splice(t){const e=new se(this.len-t);return this.len=t,e}mergeWith(t){return this.len+=t.len,!0}integrate(t,e){C(t.deleteSet,e.id.client,e.id.clock,this.len),e.markDeleted()}delete(t){}gc(t){}write(t,e){t.writeLen(this.len-e)}getRef(){return 1}}class le{constructor(t){t._item&&console.error("This document was already integrated as a sub-document. You should create a second instance instead with the same guid."),this.doc=t;const e={};this.opts=e,t.gc||(e.gc=!1),t.autoLoad&&(e.autoLoad=!0),null!==t.meta&&(e.meta=t.meta)}getLength(){return 1}getContent(){return[this.doc]}isCountable(){return!0}copy(){return new le((t=this.doc.guid,e=this.opts,new O({guid:t,...e,shouldLoad:e.shouldLoad||e.autoLoad||!1})));var t,e}splice(t){throw a.Nw()}mergeWith(t){return!1}integrate(t,e){this.doc._item=e,t.subdocsAdded.add(this.doc),this.doc.shouldLoad&&t.subdocsLoaded.add(this.doc)}delete(t){t.subdocsAdded.has(this.doc)?t.subdocsAdded.delete(this.doc):t.subdocsRemoved.add(this.doc)}gc(t){}write(t,e){t.writeString(this.doc.guid),t.writeAny(this.opts)}getRef(){return 9}}class oe{constructor(t){this.embed=t}getLength(){return 1}getContent(){return[this.embed]}isCountable(){return!0}copy(){return new oe(this.embed)}splice(t){throw a.Nw()}mergeWith(t){return!1}integrate(t,e){}delete(t){}gc(t){}write(t,e){t.writeJSON(this.embed)}getRef(){return 5}}class ce{constructor(t,e){this.key=t,this.value=e}getLength(){return 1}getContent(){return[]}isCountable(){return!1}copy(){return new ce(this.key,this.value)}splice(t){throw a.Nw()}mergeWith(t){return!1}integrate(t,e){e.parent._searchMarker=null}delete(t){}gc(t){}write(t,e){t.writeKey(this.key),t.writeJSON(this.value)}getRef(){return 6}}class he{constructor(t){this.arr=t}getLength(){return this.arr.length}getContent(){return this.arr}isCountable(){return!0}copy(){return new he(this.arr)}splice(t){const e=new he(this.arr.slice(t));return this.arr=this.arr.slice(0,t),e}mergeWith(t){return this.arr=this.arr.concat(t.arr),!0}integrate(t,e){}delete(t){}gc(t){}write(t,e){const n=this.arr.length;t.writeLen(n-e);for(let r=e;r<n;r++){const e=this.arr[r];t.writeAny(e)}}getRef(){return 8}}class ae{constructor(t){this.str=t}getLength(){return this.str.length}getContent(){return this.str.split("")}isCountable(){return!0}copy(){return new ae(this.str)}splice(t){const e=new ae(this.str.slice(t));this.str=this.str.slice(0,t);const n=this.str.charCodeAt(t-1);return n>=55296&&n<=56319&&(this.str=this.str.slice(0,t-1)+"�",e.str="�"+e.str.slice(1)),e}mergeWith(t){return this.str+=t.str,!0}integrate(t,e){}delete(t){}gc(t){}write(t,e){t.writeString(0===e?this.str:this.str.slice(e))}getRef(){return 4}}const de=0,ue=1,ge=2,fe=3,pe=4;class we{constructor(t){this.type=t}getLength(){return 1}getContent(){return[this.type]}isCountable(){return!0}copy(){return new we(this.type._copy())}splice(t){throw a.Nw()}mergeWith(t){return!1}integrate(t,e){this.type._integrate(t.doc,e)}delete(t){let e=this.type._start;for(;null!==e;)e.deleted?t._mergeStructs.push(e):e.delete(t),e=e.right;this.type._map.forEach((e=>{e.deleted?t._mergeStructs.push(e):e.delete(t)})),t.changed.delete(this.type)}gc(t){let e=this.type._start;for(;null!==e;)e.gc(t,!0),e=e.right;this.type._start=null,this.type._map.forEach((e=>{for(;null!==e;)e.gc(t,!0),e=e.left})),this.type._map=new Map}write(t,e){this.type._write(t)}getRef(){return 7}}const _e=(t,e)=>{let n,r=e,i=0;do{i>0&&(r=P(r.client,r.clock+i)),n=B(t,r),i=r.clock-n.id.clock,r=n.redone}while(null!==r&&n instanceof ye);return{item:n,diff:i}},me=(t,e)=>{for(;null!==t&&t.keep!==e;)t.keep=e,t=t.parent._item},ke=(t,e,n)=>{const{client:r,clock:i}=e.id,s=new ye(P(r,i+n),e,P(r,i+n-1),e.right,e.rightOrigin,e.parent,e.parentSub,e.content.splice(n));return e.deleted&&s.markDeleted(),e.keep&&(s.keep=!0),null!==e.redone&&(s.redone=P(e.redone.client,e.redone.clock+n)),e.right=s,null!==s.right&&(s.right.left=s),t._mergeStructs.push(s),null!==s.parentSub&&null===s.right&&s.parent._map.set(s.parentSub,s),e.length=n,s},be=(t,e,n,r,i)=>{const s=t.doc,l=s.store,o=s.clientID,c=e.redone;if(null!==c)return X(t,c);let h,a=e.parent._item,d=null;if(null!==a&&!0===a.deleted){if(null===a.redone&&(!n.has(a)||null===be(t,a,n,r,i)))return null;for(;null!==a.redone;)a=X(t,a.redone)}const u=null===a?e.parent:a.content.type;if(null===e.parentSub){for(d=e.left,h=e;null!==d;){let e=d;for(;null!==e&&e.parent._item!==a;)e=null===e.redone?null:X(t,e.redone);if(null!==e&&e.parent._item===a){d=e;break}d=d.left}for(;null!==h;){let e=h;for(;null!==e&&e.parent._item!==a;)e=null===e.redone?null:X(t,e.redone);if(null!==e&&e.parent._item===a){h=e;break}h=h.right}}else if(h=null,e.right&&!i){for(d=e;null!==d&&null!==d.right&&y(r,d.right.id);)d=d.right;for(;null!==d&&null!==d.redone;)d=X(t,d.redone);if(null===d||d.parent._item!==a)return null;if(d&&null!==d.right)return null}else d=u._map.get(e.parentSub)||null;const g=V(l,o),f=P(o,g),p=new ye(f,d,d&&d.lastId,h,h&&h.id,u,e.parentSub,e.content.copy());return e.redone=f,me(p,!0),p.integrate(t,0),p};class ye extends ne{constructor(t,e,n,r,i,s,l,o){super(t,o.getLength()),this.origin=n,this.left=e,this.right=r,this.rightOrigin=i,this.parent=s,this.parentSub=l,this.redone=null,this.content=o,this.info=this.content.isCountable()?d.Qn:0}set marker(t){(this.info&d.Ko)>0!==t&&(this.info^=d.Ko)}get marker(){return(this.info&d.Ko)>0}get keep(){return(this.info&d.Vw)>0}set keep(t){this.keep!==t&&(this.info^=d.Vw)}get countable(){return(this.info&d.Qn)>0}get deleted(){return(this.info&d.CY)>0}set deleted(t){this.deleted!==t&&(this.info^=d.CY)}markDeleted(){this.info|=d.CY}getMissing(t,e){if(this.origin&&this.origin.client!==this.id.client&&this.origin.clock>=V(e,this.origin.client))return this.origin.client;if(this.rightOrigin&&this.rightOrigin.client!==this.id.client&&this.rightOrigin.clock>=V(e,this.rightOrigin.client))return this.rightOrigin.client;if(this.parent&&this.parent.constructor===N&&this.id.client!==this.parent.client&&this.parent.clock>=V(e,this.parent.client))return this.parent.client;if(this.origin&&(this.left=Z(t,e,this.origin),this.origin=this.left.lastId),this.rightOrigin&&(this.right=X(t,this.rightOrigin),this.rightOrigin=this.right.id),(this.left&&this.left.constructor===re||this.right&&this.right.constructor===re)&&(this.parent=null),this.parent){if(this.parent.constructor===N){const t=B(e,this.parent);t.constructor===re?this.parent=null:this.parent=t.content.type}}else this.left&&this.left.constructor===ye&&(this.parent=this.left.parent,this.parentSub=this.left.parentSub),this.right&&this.right.constructor===ye&&(this.parent=this.right.parent,this.parentSub=this.right.parentSub);return null}integrate(t,e){if(e>0&&(this.id.clock+=e,this.left=Z(t,t.doc.store,P(this.id.client,this.id.clock-1)),this.origin=this.left.lastId,this.content=this.content.splice(e),this.length-=e),this.parent){if(!this.left&&(!this.right||null!==this.right.left)||this.left&&this.left.right!==this.right){let e,n=this.left;if(null!==n)e=n.right;else if(null!==this.parentSub)for(e=this.parent._map.get(this.parentSub)||null;null!==e&&null!==e.left;)e=e.left;else e=this.parent._start;const r=new Set,i=new Set;for(;null!==e&&e!==this.right;){if(i.add(e),r.add(e),R(this.origin,e.origin)){if(e.id.client<this.id.client)n=e,r.clear();else if(R(this.rightOrigin,e.rightOrigin))break}else{if(null===e.origin||!i.has(B(t.doc.store,e.origin)))break;r.has(B(t.doc.store,e.origin))||(n=e,r.clear())}e=e.right}this.left=n}if(null!==this.left){const t=this.left.right;this.right=t,this.left.right=this}else{let t;if(null!==this.parentSub)for(t=this.parent._map.get(this.parentSub)||null;null!==t&&null!==t.left;)t=t.left;else t=this.parent._start,this.parent._start=this;this.right=t}null!==this.right?this.right.left=this:null!==this.parentSub&&(this.parent._map.set(this.parentSub,this),null!==this.left&&this.left.delete(t)),null===this.parentSub&&this.countable&&!this.deleted&&(this.parent._length+=this.length),Y(t.doc.store,this),this.content.integrate(t,this),et(t,this.parent,this.parentSub),(null!==this.parent._item&&this.parent._item.deleted||null!==this.parentSub&&null!==this.right)&&this.delete(t)}else new re(this.id,this.length).integrate(t,0)}get next(){let t=this.right;for(;null!==t&&t.deleted;)t=t.right;return t}get prev(){let t=this.left;for(;null!==t&&t.deleted;)t=t.left;return t}get lastId(){return 1===this.length?this.id:P(this.id.client,this.id.clock+this.length-1)}mergeWith(t){if(this.constructor===t.constructor&&R(t.origin,this.lastId)&&this.right===t&&R(this.rightOrigin,t.rightOrigin)&&this.id.client===t.id.client&&this.id.clock+this.length===t.id.clock&&this.deleted===t.deleted&&null===this.redone&&null===t.redone&&this.content.constructor===t.content.constructor&&this.content.mergeWith(t.content)){const e=this.parent._searchMarker;return e&&e.forEach((e=>{e.p===t&&(e.p=this,!this.deleted&&this.countable&&(e.index-=this.length))})),t.keep&&(this.keep=!0),this.right=t.right,null!==this.right&&(this.right.left=this),this.length+=t.length,!0}return!1}delete(t){if(!this.deleted){const e=this.parent;this.countable&&null===this.parentSub&&(e._length-=this.length),this.markDeleted(),C(t.deleteSet,this.id.client,this.id.clock,this.length),et(t,e,this.parentSub),this.content.delete(t)}}gc(t,e){if(!this.deleted)throw a.zR();this.content.gc(t),e?((t,e,n)=>{const r=t.clients.get(e.id.client);r[G(r,e.id.clock)]=n})(t,this,new re(this.id,this.length)):this.content=new se(this.length)}write(t,e){const n=e>0?P(this.id.client,this.id.clock+e-1):this.origin,r=this.rightOrigin,i=this.parentSub,s=this.content.getRef()&d.kr|(null===n?0:d.x1)|(null===r?0:d.rc)|(null===i?0:d.cq);if(t.writeInfo(s),null!==n&&t.writeLeftID(n),null!==r&&t.writeRightID(r),null===n&&null===r){const e=this.parent;if(void 0!==e._item){const n=e._item;if(null===n){const n=(t=>{for(const[e,n]of t.doc.share.entries())if(n===t)return e;throw a.zR()})(e);t.writeParentInfo(!0),t.writeString(n)}else t.writeParentInfo(!1),t.writeLeftID(n.id)}else e.constructor===String?(t.writeParentInfo(!0),t.writeString(e)):e.constructor===N?(t.writeParentInfo(!1),t.writeLeftID(e)):a.zR();null!==i&&t.writeString(i)}this.content.write(t,e)}}const Ee="undefined"!=typeof window?window:"undefined"!=typeof global?global:{};!0===Ee["__ $YJS$ __"]&&console.error("Yjs was already imported. This breaks constructor checks and will lead to isssues!"),Ee["__ $YJS$ __"]=!0}},i={};function s(t){var e=i[t];if(void 0!==e)return e.exports;var n=i[t]={id:t,loaded:!1,exports:{}};return r[t].call(n.exports,n,n.exports,s),n.loaded=!0,n.exports}s.m=r,t=[],s.O=(e,n,r,i)=>{if(!n){var l=1/0;for(a=0;a<t.length;a++){for(var[n,r,i]=t[a],o=!0,c=0;c<n.length;c++)(!1&i||l>=i)&&Object.keys(s.O).every((t=>s.O[t](n[c])))?n.splice(c--,1):(o=!1,i<l&&(l=i));if(o){t.splice(a--,1);var h=r();void 0!==h&&(e=h)}}return e}i=i||0;for(var a=t.length;a>0&&t[a-1][2]>i;a--)t[a]=t[a-1];t[a]=[n,r,i]},s.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return s.d(e,{a:e}),e},n=Object.getPrototypeOf?t=>Object.getPrototypeOf(t):t=>t.__proto__,s.t=function(t,r){if(1&r&&(t=this(t)),8&r)return t;if("object"==typeof t&&t){if(4&r&&t.__esModule)return t;if(16&r&&"function"==typeof t.then)return t}var i=Object.create(null);s.r(i);var l={};e=e||[null,n({}),n([]),n(n)];for(var o=2&r&&t;"object"==typeof o&&!~e.indexOf(o);o=n(o))Object.getOwnPropertyNames(o).forEach((e=>l[e]=()=>t[e]));return l.default=()=>t,s.d(i,l),i},s.d=(t,e)=>{for(var n in e)s.o(e,n)&&!s.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},s.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),s.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),s.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.nmd=t=>(t.paths=[],t.children||(t.children=[]),t),(()=>{var t={424:0,584:0,618:0};s.O.j=e=>0===t[e];var e=(e,n)=>{var r,i,[l,o,c]=n,h=0;if(l.some((e=>0!==t[e]))){for(r in o)s.o(o,r)&&(s.m[r]=o[r]);if(c)var a=c(s)}for(e&&e(n);h<l.length;h++)i=l[h],s.o(t,i)&&t[i]&&t[i][0](),t[i]=0;return s.O(a)},n=self.webpackChunkmindmap=self.webpackChunkmindmap||[];n.forEach(e.bind(null,0)),n.push=e.bind(null,n.push.bind(n))})(),s.O(void 0,[592,663,856,69,134,682,688,923,386],(()=>s(25290))),s.O(void 0,[592,663,856,69,134,682,688,923,386],(()=>s(11949))),s.O(void 0,[592,663,856,69,134,682,688,923,386],(()=>s(94210))),s.O(void 0,[592,663,856,69,134,682,688,923,386],(()=>s(29527)));var l=s.O(void 0,[592,663,856,69,134,682,688,923,386],(()=>s(95416)));l=s.O(l)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,