/*! For license information please see 194.fb63bf444834814f5711.js.LICENSE.txt */
(self.webpackChunkmindmap=self.webpackChunkmindmap||[]).push([[194],{73897:t=>{t.exports=function(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n},t.exports.__esModule=!0,t.exports.default=t.exports},85372:t=>{t.exports=function(t){if(Array.isArray(t))return t},t.exports.__esModule=!0,t.exports.default=t.exports},63405:(t,e,r)=>{var n=r(73897);t.exports=function(t){if(Array.isArray(t))return n(t)},t.exports.__esModule=!0,t.exports.default=t.exports},66115:t=>{t.exports=function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t},t.exports.__esModule=!0,t.exports.default=t.exports},56690:t=>{t.exports=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},t.exports.__esModule=!0,t.exports.default=t.exports},89728:t=>{function e(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}t.exports=function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),Object.defineProperty(t,"prototype",{writable:!1}),t},t.exports.__esModule=!0,t.exports.default=t.exports},26389:(t,e,r)=>{var n=r(73808),o=r(69617),i=r(94993);t.exports=function(t){var e=o();return function(){var r,o=n(t);if(e){var u=n(this).constructor;r=Reflect.construct(o,arguments,u)}else r=o.apply(this,arguments);return i(this,r)}},t.exports.__esModule=!0,t.exports.default=t.exports},38416:t=>{t.exports=function(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t},t.exports.__esModule=!0,t.exports.default=t.exports},10434:t=>{function e(){return t.exports=e=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}return t},t.exports.__esModule=!0,t.exports.default=t.exports,e.apply(this,arguments)}t.exports=e,t.exports.__esModule=!0,t.exports.default=t.exports},73808:t=>{function e(r){return t.exports=e=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},t.exports.__esModule=!0,t.exports.default=t.exports,e(r)}t.exports=e,t.exports.__esModule=!0,t.exports.default=t.exports},61655:(t,e,r)=>{var n=r(6015);t.exports=function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&n(t,e)},t.exports.__esModule=!0,t.exports.default=t.exports},64836:t=>{t.exports=function(t){return t&&t.__esModule?t:{default:t}},t.exports.__esModule=!0,t.exports.default=t.exports},75263:(t,e,r)=>{var n=r(18698).default;function o(t){if("function"!=typeof WeakMap)return null;var e=new WeakMap,r=new WeakMap;return(o=function(t){return t?r:e})(t)}t.exports=function(t,e){if(!e&&t&&t.__esModule)return t;if(null===t||"object"!==n(t)&&"function"!=typeof t)return{default:t};var r=o(e);if(r&&r.has(t))return r.get(t);var i={},u=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var a in t)if("default"!==a&&Object.prototype.hasOwnProperty.call(t,a)){var c=u?Object.getOwnPropertyDescriptor(t,a):null;c&&(c.get||c.set)?Object.defineProperty(i,a,c):i[a]=t[a]}return i.default=t,r&&r.set(t,i),i},t.exports.__esModule=!0,t.exports.default=t.exports},69617:t=>{t.exports=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}},t.exports.__esModule=!0,t.exports.default=t.exports},79498:t=>{t.exports=function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)},t.exports.__esModule=!0,t.exports.default=t.exports},68872:t=>{t.exports=function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,o,i=[],u=!0,a=!1;try{for(r=r.call(t);!(u=(n=r.next()).done)&&(i.push(n.value),!e||i.length!==e);u=!0);}catch(t){a=!0,o=t}finally{try{u||null==r.return||r.return()}finally{if(a)throw o}}return i}},t.exports.__esModule=!0,t.exports.default=t.exports},12218:t=>{t.exports=function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")},t.exports.__esModule=!0,t.exports.default=t.exports},42281:t=>{t.exports=function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")},t.exports.__esModule=!0,t.exports.default=t.exports},42122:(t,e,r)=>{var n=r(38416);function o(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}t.exports=function(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?o(Object(r),!0).forEach((function(e){n(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t},t.exports.__esModule=!0,t.exports.default=t.exports},70215:(t,e,r)=>{var n=r(7071);t.exports=function(t,e){if(null==t)return{};var r,o,i=n(t,e);if(Object.getOwnPropertySymbols){var u=Object.getOwnPropertySymbols(t);for(o=0;o<u.length;o++)r=u[o],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(i[r]=t[r])}return i},t.exports.__esModule=!0,t.exports.default=t.exports},7071:t=>{t.exports=function(t,e){if(null==t)return{};var r,n,o={},i=Object.keys(t);for(n=0;n<i.length;n++)r=i[n],e.indexOf(r)>=0||(o[r]=t[r]);return o},t.exports.__esModule=!0,t.exports.default=t.exports},94993:(t,e,r)=>{var n=r(18698).default,o=r(66115);t.exports=function(t,e){if(e&&("object"===n(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return o(t)},t.exports.__esModule=!0,t.exports.default=t.exports},17061:(t,e,r)=>{var n=r(18698).default;function o(){"use strict";t.exports=o=function(){return e},t.exports.__esModule=!0,t.exports.default=t.exports;var e={},r=Object.prototype,i=r.hasOwnProperty,u="function"==typeof Symbol?Symbol:{},a=u.iterator||"@@iterator",c=u.asyncIterator||"@@asyncIterator",s=u.toStringTag||"@@toStringTag";function f(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{f({},"")}catch(t){f=function(t,e,r){return t[e]=r}}function l(t,e,r,n){var o=e&&e.prototype instanceof y?e:y,i=Object.create(o.prototype),u=new P(n||[]);return i._invoke=function(t,e,r){var n="suspendedStart";return function(o,i){if("executing"===n)throw new Error("Generator is already running");if("completed"===n){if("throw"===o)throw i;return{value:void 0,done:!0}}for(r.method=o,r.arg=i;;){var u=r.delegate;if(u){var a=_(u,r);if(a){if(a===h)continue;return a}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if("suspendedStart"===n)throw n="completed",r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n="executing";var c=p(t,e,r);if("normal"===c.type){if(n=r.done?"completed":"suspendedYield",c.arg===h)continue;return{value:c.arg,done:r.done}}"throw"===c.type&&(n="completed",r.method="throw",r.arg=c.arg)}}}(t,r,u),i}function p(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=l;var h={};function y(){}function d(){}function v(){}var b={};f(b,a,(function(){return this}));var x=Object.getPrototypeOf,m=x&&x(x(L([])));m&&m!==r&&i.call(m,a)&&(b=m);var g=v.prototype=y.prototype=Object.create(b);function w(t){["next","throw","return"].forEach((function(e){f(t,e,(function(t){return this._invoke(e,t)}))}))}function O(t,e){function r(o,u,a,c){var s=p(t[o],t,u);if("throw"!==s.type){var f=s.arg,l=f.value;return l&&"object"==n(l)&&i.call(l,"__await")?e.resolve(l.__await).then((function(t){r("next",t,a,c)}),(function(t){r("throw",t,a,c)})):e.resolve(l).then((function(t){f.value=t,a(f)}),(function(t){return r("throw",t,a,c)}))}c(s.arg)}var o;this._invoke=function(t,n){function i(){return new e((function(e,o){r(t,n,e,o)}))}return o=o?o.then(i,i):i()}}function _(t,e){var r=t.iterator[e.method];if(void 0===r){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=void 0,_(t,e),"throw"===e.method))return h;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return h}var n=p(r,t.iterator,e.arg);if("throw"===n.type)return e.method="throw",e.arg=n.arg,e.delegate=null,h;var o=n.arg;return o?o.done?(e[t.resultName]=o.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=void 0),e.delegate=null,h):o:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,h)}function j(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function E(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function P(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(j,this),this.reset(!0)}function L(t){if(t){var e=t[a];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var r=-1,n=function e(){for(;++r<t.length;)if(i.call(t,r))return e.value=t[r],e.done=!1,e;return e.value=void 0,e.done=!0,e};return n.next=n}}return{next:S}}function S(){return{value:void 0,done:!0}}return d.prototype=v,f(g,"constructor",v),f(v,"constructor",d),d.displayName=f(v,s,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===d||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,v):(t.__proto__=v,f(t,s,"GeneratorFunction")),t.prototype=Object.create(g),t},e.awrap=function(t){return{__await:t}},w(O.prototype),f(O.prototype,c,(function(){return this})),e.AsyncIterator=O,e.async=function(t,r,n,o,i){void 0===i&&(i=Promise);var u=new O(l(t,r,n,o),i);return e.isGeneratorFunction(r)?u:u.next().then((function(t){return t.done?t.value:u.next()}))},w(g),f(g,s,"Generator"),f(g,a,(function(){return this})),f(g,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=[];for(var r in t)e.push(r);return e.reverse(),function r(){for(;e.length;){var n=e.pop();if(n in t)return r.value=n,r.done=!1,r}return r.done=!0,r}},e.values=L,P.prototype={constructor:P,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(E),!t)for(var e in this)"t"===e.charAt(0)&&i.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=void 0)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function r(r,n){return u.type="throw",u.arg=t,e.next=r,n&&(e.method="next",e.arg=void 0),!!n}for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n],u=o.completion;if("root"===o.tryLoc)return r("end");if(o.tryLoc<=this.prev){var a=i.call(o,"catchLoc"),c=i.call(o,"finallyLoc");if(a&&c){if(this.prev<o.catchLoc)return r(o.catchLoc,!0);if(this.prev<o.finallyLoc)return r(o.finallyLoc)}else if(a){if(this.prev<o.catchLoc)return r(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return r(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var n=this.tryEntries[r];if(n.tryLoc<=this.prev&&i.call(n,"finallyLoc")&&this.prev<n.finallyLoc){var o=n;break}}o&&("break"===t||"continue"===t)&&o.tryLoc<=e&&e<=o.finallyLoc&&(o=null);var u=o?o.completion:{};return u.type=t,u.arg=e,o?(this.method="next",this.next=o.finallyLoc,h):this.complete(u)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),h},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),E(r),h}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var o=n.arg;E(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,r){return this.delegate={iterator:L(t),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=void 0),h}},e}t.exports=o,t.exports.__esModule=!0,t.exports.default=t.exports},6015:t=>{function e(r,n){return t.exports=e=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},t.exports.__esModule=!0,t.exports.default=t.exports,e(r,n)}t.exports=e,t.exports.__esModule=!0,t.exports.default=t.exports},27424:(t,e,r)=>{var n=r(85372),o=r(68872),i=r(86116),u=r(12218);t.exports=function(t,e){return n(t)||o(t,e)||i(t,e)||u()},t.exports.__esModule=!0,t.exports.default=t.exports},861:(t,e,r)=>{var n=r(63405),o=r(79498),i=r(86116),u=r(42281);t.exports=function(t){return n(t)||o(t)||i(t)||u()},t.exports.__esModule=!0,t.exports.default=t.exports},18698:t=>{function e(r){return t.exports=e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},t.exports.__esModule=!0,t.exports.default=t.exports,e(r)}t.exports=e,t.exports.__esModule=!0,t.exports.default=t.exports},86116:(t,e,r)=>{var n=r(73897);t.exports=function(t,e){if(t){if("string"==typeof t)return n(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?n(t,e):void 0}},t.exports.__esModule=!0,t.exports.default=t.exports},30907:(t,e,r)=>{"use strict";function n(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}r.d(e,{Z:()=>n})},83878:(t,e,r)=>{"use strict";function n(t){if(Array.isArray(t))return t}r.d(e,{Z:()=>n})},97326:(t,e,r)=>{"use strict";function n(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}r.d(e,{Z:()=>n})},15861:(t,e,r)=>{"use strict";function n(t,e,r,n,o,i,u){try{var a=t[i](u),c=a.value}catch(t){return void r(t)}a.done?e(c):Promise.resolve(c).then(n,o)}function o(t){return function(){var e=this,r=arguments;return new Promise((function(o,i){var u=t.apply(e,r);function a(t){n(u,o,i,a,c,"next",t)}function c(t){n(u,o,i,a,c,"throw",t)}a(void 0)}))}}r.d(e,{Z:()=>o})},15671:(t,e,r)=>{"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}r.d(e,{Z:()=>n})},43144:(t,e,r)=>{"use strict";function n(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function o(t,e,r){return e&&n(t.prototype,e),r&&n(t,r),Object.defineProperty(t,"prototype",{writable:!1}),t}r.d(e,{Z:()=>o})},98557:(t,e,r)=>{"use strict";function n(t){return n=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},n(t)}r.d(e,{Z:()=>a});var o=r(71002),i=r(97326);function u(t,e){if(e&&("object"===(0,o.Z)(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return(0,i.Z)(t)}function a(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,o=n(t);if(e){var i=n(this).constructor;r=Reflect.construct(o,arguments,i)}else r=o.apply(this,arguments);return u(this,r)}}},4942:(t,e,r)=>{"use strict";function n(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}r.d(e,{Z:()=>n})},87462:(t,e,r)=>{"use strict";function n(){return n=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}return t},n.apply(this,arguments)}r.d(e,{Z:()=>n})},79340:(t,e,r)=>{"use strict";function n(t,e){return n=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},n(t,e)}function o(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&n(t,e)}r.d(e,{Z:()=>o})},59199:(t,e,r)=>{"use strict";function n(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}r.d(e,{Z:()=>n})},25267:(t,e,r)=>{"use strict";function n(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}r.d(e,{Z:()=>n})},1413:(t,e,r)=>{"use strict";r.d(e,{Z:()=>i});var n=r(4942);function o(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function i(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?o(Object(r),!0).forEach((function(e){(0,n.Z)(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}},44925:(t,e,r)=>{"use strict";function n(t,e){if(null==t)return{};var r,n,o=function(t,e){if(null==t)return{};var r,n,o={},i=Object.keys(t);for(n=0;n<i.length;n++)r=i[n],e.indexOf(r)>=0||(o[r]=t[r]);return o}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(n=0;n<i.length;n++)r=i[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(o[r]=t[r])}return o}r.d(e,{Z:()=>n})},74165:(t,e,r)=>{"use strict";r.d(e,{Z:()=>o});var n=r(71002);function o(){o=function(){return t};var t={},e=Object.prototype,r=e.hasOwnProperty,i="function"==typeof Symbol?Symbol:{},u=i.iterator||"@@iterator",a=i.asyncIterator||"@@asyncIterator",c=i.toStringTag||"@@toStringTag";function s(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{s({},"")}catch(t){s=function(t,e,r){return t[e]=r}}function f(t,e,r,n){var o=e&&e.prototype instanceof h?e:h,i=Object.create(o.prototype),u=new E(n||[]);return i._invoke=function(t,e,r){var n="suspendedStart";return function(o,i){if("executing"===n)throw new Error("Generator is already running");if("completed"===n){if("throw"===o)throw i;return{value:void 0,done:!0}}for(r.method=o,r.arg=i;;){var u=r.delegate;if(u){var a=O(u,r);if(a){if(a===p)continue;return a}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if("suspendedStart"===n)throw n="completed",r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n="executing";var c=l(t,e,r);if("normal"===c.type){if(n=r.done?"completed":"suspendedYield",c.arg===p)continue;return{value:c.arg,done:r.done}}"throw"===c.type&&(n="completed",r.method="throw",r.arg=c.arg)}}}(t,r,u),i}function l(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}t.wrap=f;var p={};function h(){}function y(){}function d(){}var v={};s(v,u,(function(){return this}));var b=Object.getPrototypeOf,x=b&&b(b(P([])));x&&x!==e&&r.call(x,u)&&(v=x);var m=d.prototype=h.prototype=Object.create(v);function g(t){["next","throw","return"].forEach((function(e){s(t,e,(function(t){return this._invoke(e,t)}))}))}function w(t,e){function o(i,u,a,c){var s=l(t[i],t,u);if("throw"!==s.type){var f=s.arg,p=f.value;return p&&"object"==(0,n.Z)(p)&&r.call(p,"__await")?e.resolve(p.__await).then((function(t){o("next",t,a,c)}),(function(t){o("throw",t,a,c)})):e.resolve(p).then((function(t){f.value=t,a(f)}),(function(t){return o("throw",t,a,c)}))}c(s.arg)}var i;this._invoke=function(t,r){function n(){return new e((function(e,n){o(t,r,e,n)}))}return i=i?i.then(n,n):n()}}function O(t,e){var r=t.iterator[e.method];if(void 0===r){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=void 0,O(t,e),"throw"===e.method))return p;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return p}var n=l(r,t.iterator,e.arg);if("throw"===n.type)return e.method="throw",e.arg=n.arg,e.delegate=null,p;var o=n.arg;return o?o.done?(e[t.resultName]=o.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=void 0),e.delegate=null,p):o:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,p)}function _(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function j(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function E(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(_,this),this.reset(!0)}function P(t){if(t){var e=t[u];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var n=-1,o=function e(){for(;++n<t.length;)if(r.call(t,n))return e.value=t[n],e.done=!1,e;return e.value=void 0,e.done=!0,e};return o.next=o}}return{next:L}}function L(){return{value:void 0,done:!0}}return y.prototype=d,s(m,"constructor",d),s(d,"constructor",y),y.displayName=s(d,c,"GeneratorFunction"),t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===y||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,d):(t.__proto__=d,s(t,c,"GeneratorFunction")),t.prototype=Object.create(m),t},t.awrap=function(t){return{__await:t}},g(w.prototype),s(w.prototype,a,(function(){return this})),t.AsyncIterator=w,t.async=function(e,r,n,o,i){void 0===i&&(i=Promise);var u=new w(f(e,r,n,o),i);return t.isGeneratorFunction(r)?u:u.next().then((function(t){return t.done?t.value:u.next()}))},g(m),s(m,c,"Generator"),s(m,u,(function(){return this})),s(m,"toString",(function(){return"[object Generator]"})),t.keys=function(t){var e=[];for(var r in t)e.push(r);return e.reverse(),function r(){for(;e.length;){var n=e.pop();if(n in t)return r.value=n,r.done=!1,r}return r.done=!0,r}},t.values=P,E.prototype={constructor:E,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(j),!t)for(var e in this)"t"===e.charAt(0)&&r.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=void 0)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function n(r,n){return u.type="throw",u.arg=t,e.next=r,n&&(e.method="next",e.arg=void 0),!!n}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],u=i.completion;if("root"===i.tryLoc)return n("end");if(i.tryLoc<=this.prev){var a=r.call(i,"catchLoc"),c=r.call(i,"finallyLoc");if(a&&c){if(this.prev<i.catchLoc)return n(i.catchLoc,!0);if(this.prev<i.finallyLoc)return n(i.finallyLoc)}else if(a){if(this.prev<i.catchLoc)return n(i.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return n(i.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var u=i?i.completion:{};return u.type=t,u.arg=e,i?(this.method="next",this.next=i.finallyLoc,p):this.complete(u)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),p},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),j(r),p}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var o=n.arg;j(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,r){return this.delegate={iterator:P(t),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=void 0),p}},t}},29439:(t,e,r)=>{"use strict";r.d(e,{Z:()=>u});var n=r(83878),o=r(40181),i=r(25267);function u(t,e){return(0,n.Z)(t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,o,i=[],u=!0,a=!1;try{for(r=r.call(t);!(u=(n=r.next()).done)&&(i.push(n.value),!e||i.length!==e);u=!0);}catch(t){a=!0,o=t}finally{try{u||null==r.return||r.return()}finally{if(a)throw o}}return i}}(t,e)||(0,o.Z)(t,e)||(0,i.Z)()}},84506:(t,e,r)=>{"use strict";r.d(e,{Z:()=>a});var n=r(83878),o=r(59199),i=r(40181),u=r(25267);function a(t){return(0,n.Z)(t)||(0,o.Z)(t)||(0,i.Z)(t)||(0,u.Z)()}},93433:(t,e,r)=>{"use strict";r.d(e,{Z:()=>u});var n=r(30907),o=r(59199),i=r(40181);function u(t){return function(t){if(Array.isArray(t))return(0,n.Z)(t)}(t)||(0,o.Z)(t)||(0,i.Z)(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}},71002:(t,e,r)=>{"use strict";function n(t){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n(t)}r.d(e,{Z:()=>n})},40181:(t,e,r)=>{"use strict";r.d(e,{Z:()=>o});var n=r(30907);function o(t,e){if(t){if("string"==typeof t)return(0,n.Z)(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?(0,n.Z)(t,e):void 0}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LEdBRXBELE1BRFUsV0FBTnlCLEdBQWtCMUssRUFBRWQsY0FBYXdMLEVBQUkxSyxFQUFFZCxZQUFZcUosTUFDN0MsUUFBTm1DLEdBQXFCLFFBQU5BLEVBQW9Cdk4sTUFBTXlFLEtBQUs1QixHQUN4QyxjQUFOMEssR0FBcUIsMkNBQTJDRSxLQUFLRixJQUFXLE9BQWlCMUssRUFBR3lLLFFBQXhHLENBTGMsQ0FNaEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXJyYXlMaWtlVG9BcnJheS5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXJyYXlXaXRoSG9sZXMuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2FycmF5V2l0aG91dEhvbGVzLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcy5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlU3VwZXIuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5LmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZi5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdC5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVXaWxkY2FyZC5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0LmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pdGVyYWJsZVRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2l0ZXJhYmxlVG9BcnJheUxpbWl0LmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9ub25JdGVyYWJsZVJlc3QuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL25vbkl0ZXJhYmxlU3ByZWFkLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RTcHJlYWQyLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllcy5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZS5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybi5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvcmVnZW5lcmF0b3JSdW50aW1lLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9zZXRQcm90b3R5cGVPZi5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvc2xpY2VkVG9BcnJheS5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvdG9Db25zdW1hYmxlQXJyYXkuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3R5cGVvZi5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hcnJheUxpa2VUb0FycmF5LmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXJyYXlXaXRoSG9sZXMuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2suanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzcy5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2dldFByb3RvdHlwZU9mLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vcG9zc2libGVDb25zdHJ1Y3RvclJldHVybi5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZVN1cGVyLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0LmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2V0UHJvdG90eXBlT2YuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0cy5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2l0ZXJhYmxlVG9BcnJheS5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL25vbkl0ZXJhYmxlUmVzdC5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDIuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllcy5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9yZWdlbmVyYXRvclJ1bnRpbWUuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zbGljZWRUb0FycmF5LmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaXRlcmFibGVUb0FycmF5TGltaXQuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0FycmF5LmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdG9Db25zdW1hYmxlQXJyYXkuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hcnJheVdpdGhvdXRIb2xlcy5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL25vbkl0ZXJhYmxlU3ByZWFkLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHtcbiAgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7XG4gICAgYXJyMltpXSA9IGFycltpXTtcbiAgfVxuXG4gIHJldHVybiBhcnIyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9hcnJheUxpa2VUb0FycmF5LCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7IiwiZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9hcnJheVdpdGhIb2xlcywgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyIsInZhciBhcnJheUxpa2VUb0FycmF5ID0gcmVxdWlyZShcIi4vYXJyYXlMaWtlVG9BcnJheS5qc1wiKTtcblxuZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyYXlMaWtlVG9BcnJheShhcnIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9hcnJheVdpdGhvdXRIb2xlcywgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyIsImZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikge1xuICBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICB9XG5cbiAgcmV0dXJuIHNlbGY7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2Fzc2VydFRoaXNJbml0aWFsaXplZCwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2NsYXNzQ2FsbENoZWNrLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7IiwiZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbnN0cnVjdG9yLCBcInByb3RvdHlwZVwiLCB7XG4gICAgd3JpdGFibGU6IGZhbHNlXG4gIH0pO1xuICByZXR1cm4gQ29uc3RydWN0b3I7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2NyZWF0ZUNsYXNzLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7IiwidmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZShcIi4vZ2V0UHJvdG90eXBlT2YuanNcIik7XG5cbnZhciBpc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSByZXF1aXJlKFwiLi9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QuanNcIik7XG5cbnZhciBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuID0gcmVxdWlyZShcIi4vcG9zc2libGVDb25zdHJ1Y3RvclJldHVybi5qc1wiKTtcblxuZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHtcbiAgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBpc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkge1xuICAgIHZhciBTdXBlciA9IGdldFByb3RvdHlwZU9mKERlcml2ZWQpLFxuICAgICAgICByZXN1bHQ7XG5cbiAgICBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkge1xuICAgICAgdmFyIE5ld1RhcmdldCA9IGdldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yO1xuICAgICAgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9jcmVhdGVTdXBlciwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyIsImZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9kZWZpbmVQcm9wZXJ0eSwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyIsImZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBtb2R1bGUuZXhwb3J0cyA9IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiA/IE9iamVjdC5hc3NpZ24uYmluZCgpIDogZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH0sIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0cztcbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2V4dGVuZHMsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0czsiLCJmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge1xuICBtb2R1bGUuZXhwb3J0cyA9IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZi5iaW5kKCkgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge1xuICAgIHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7XG4gIH0sIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0cztcbiAgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfZ2V0UHJvdG90eXBlT2YsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0czsiLCJ2YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKFwiLi9zZXRQcm90b3R5cGVPZi5qc1wiKTtcblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7XG4gIH1cblxuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9XG4gIH0pO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc3ViQ2xhc3MsIFwicHJvdG90eXBlXCIsIHtcbiAgICB3cml0YWJsZTogZmFsc2VcbiAgfSk7XG4gIGlmIChzdXBlckNsYXNzKSBzZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2luaGVyaXRzLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7IiwiZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcbiAgICBcImRlZmF1bHRcIjogb2JqXG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdCwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyIsInZhciBfdHlwZW9mID0gcmVxdWlyZShcIi4vdHlwZW9mLmpzXCIpW1wiZGVmYXVsdFwiXTtcblxuZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKG5vZGVJbnRlcm9wKSB7XG4gIGlmICh0eXBlb2YgV2Vha01hcCAhPT0gXCJmdW5jdGlvblwiKSByZXR1cm4gbnVsbDtcbiAgdmFyIGNhY2hlQmFiZWxJbnRlcm9wID0gbmV3IFdlYWtNYXAoKTtcbiAgdmFyIGNhY2hlTm9kZUludGVyb3AgPSBuZXcgV2Vha01hcCgpO1xuICByZXR1cm4gKF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSA9IGZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZShub2RlSW50ZXJvcCkge1xuICAgIHJldHVybiBub2RlSW50ZXJvcCA/IGNhY2hlTm9kZUludGVyb3AgOiBjYWNoZUJhYmVsSW50ZXJvcDtcbiAgfSkobm9kZUludGVyb3ApO1xufVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmosIG5vZGVJbnRlcm9wKSB7XG4gIGlmICghbm9kZUludGVyb3AgJiYgb2JqICYmIG9iai5fX2VzTW9kdWxlKSB7XG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIGlmIChvYmogPT09IG51bGwgfHwgX3R5cGVvZihvYmopICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBvYmogIT09IFwiZnVuY3Rpb25cIikge1xuICAgIHJldHVybiB7XG4gICAgICBcImRlZmF1bHRcIjogb2JqXG4gICAgfTtcbiAgfVxuXG4gIHZhciBjYWNoZSA9IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZShub2RlSW50ZXJvcCk7XG5cbiAgaWYgKGNhY2hlICYmIGNhY2hlLmhhcyhvYmopKSB7XG4gICAgcmV0dXJuIGNhY2hlLmdldChvYmopO1xuICB9XG5cbiAgdmFyIG5ld09iaiA9IHt9O1xuICB2YXIgaGFzUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbiAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgIGlmIChrZXkgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcbiAgICAgIHZhciBkZXNjID0gaGFzUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiBudWxsO1xuXG4gICAgICBpZiAoZGVzYyAmJiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXdPYmpba2V5XSA9IG9ialtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIG5ld09ialtcImRlZmF1bHRcIl0gPSBvYmo7XG5cbiAgaWYgKGNhY2hlKSB7XG4gICAgY2FjaGUuc2V0KG9iaiwgbmV3T2JqKTtcbiAgfVxuXG4gIHJldHVybiBuZXdPYmo7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0czsiLCJmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkge1xuICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7XG4gIGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7XG4gIGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7XG5cbiAgdHJ5IHtcbiAgICBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbiwgW10sIGZ1bmN0aW9uICgpIHt9KSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0LCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7IiwiZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7XG4gIGlmICh0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIGl0ZXJbU3ltYm9sLml0ZXJhdG9yXSAhPSBudWxsIHx8IGl0ZXJbXCJAQGl0ZXJhdG9yXCJdICE9IG51bGwpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9pdGVyYWJsZVRvQXJyYXksIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0czsiLCJmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7XG4gIHZhciBfaSA9IGFyciA9PSBudWxsID8gbnVsbCA6IHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgYXJyW1N5bWJvbC5pdGVyYXRvcl0gfHwgYXJyW1wiQEBpdGVyYXRvclwiXTtcblxuICBpZiAoX2kgPT0gbnVsbCkgcmV0dXJuO1xuICB2YXIgX2FyciA9IFtdO1xuICB2YXIgX24gPSB0cnVlO1xuICB2YXIgX2QgPSBmYWxzZTtcblxuICB2YXIgX3MsIF9lO1xuXG4gIHRyeSB7XG4gICAgZm9yIChfaSA9IF9pLmNhbGwoYXJyKTsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkge1xuICAgICAgX2Fyci5wdXNoKF9zLnZhbHVlKTtcblxuICAgICAgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgX2QgPSB0cnVlO1xuICAgIF9lID0gZXJyO1xuICB9IGZpbmFsbHkge1xuICAgIHRyeSB7XG4gICAgICBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdICE9IG51bGwpIF9pW1wicmV0dXJuXCJdKCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlmIChfZCkgdGhyb3cgX2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIF9hcnI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2l0ZXJhYmxlVG9BcnJheUxpbWl0LCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7IiwiZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfbm9uSXRlcmFibGVSZXN0LCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7IiwiZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfbm9uSXRlcmFibGVTcHJlYWQsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0czsiLCJ2YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKFwiLi9kZWZpbmVQcm9wZXJ0eS5qc1wiKTtcblxuZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTtcblxuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgIHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpO1xuICAgIGVudW1lcmFibGVPbmx5ICYmIChzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkge1xuICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7XG4gICAgfSkpLCBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7XG4gIH1cblxuICByZXR1cm4ga2V5cztcbn1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZDIodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IG51bGwgIT0gYXJndW1lbnRzW2ldID8gYXJndW1lbnRzW2ldIDoge307XG4gICAgaSAlIDIgPyBvd25LZXlzKE9iamVjdChzb3VyY2UpLCAhMCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pO1xuICAgIH0pIDogT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpIDogb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX29iamVjdFNwcmVhZDIsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0czsiLCJ2YXIgb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSA9IHJlcXVpcmUoXCIuL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UuanNcIik7XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0gb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKTtcbiAgdmFyIGtleSwgaTtcblxuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgIHZhciBzb3VyY2VTeW1ib2xLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IHNvdXJjZVN5bWJvbEtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGtleSA9IHNvdXJjZVN5bWJvbEtleXNbaV07XG4gICAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoc291cmNlLCBrZXkpKSBjb250aW51ZTtcbiAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0czsiLCJmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleSwgaTtcblxuICBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IHNvdXJjZUtleXNbaV07XG4gICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyIsInZhciBfdHlwZW9mID0gcmVxdWlyZShcIi4vdHlwZW9mLmpzXCIpW1wiZGVmYXVsdFwiXTtcblxudmFyIGFzc2VydFRoaXNJbml0aWFsaXplZCA9IHJlcXVpcmUoXCIuL2Fzc2VydFRoaXNJbml0aWFsaXplZC5qc1wiKTtcblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge1xuICBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkge1xuICAgIHJldHVybiBjYWxsO1xuICB9IGVsc2UgaWYgKGNhbGwgIT09IHZvaWQgMCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJEZXJpdmVkIGNvbnN0cnVjdG9ycyBtYXkgb25seSByZXR1cm4gb2JqZWN0IG9yIHVuZGVmaW5lZFwiKTtcbiAgfVxuXG4gIHJldHVybiBhc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4sIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0czsiLCJ2YXIgX3R5cGVvZiA9IHJlcXVpcmUoXCIuL3R5cGVvZi5qc1wiKVtcImRlZmF1bHRcIl07XG5cbmZ1bmN0aW9uIF9yZWdlbmVyYXRvclJ1bnRpbWUoKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuICAvKiEgcmVnZW5lcmF0b3ItcnVudGltZSAtLSBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy4gLS0gbGljZW5zZSAoTUlUKTogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9yL2Jsb2IvbWFpbi9MSUNFTlNFICovXG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBfcmVnZW5lcmF0b3JSdW50aW1lID0gZnVuY3Rpb24gX3JlZ2VuZXJhdG9yUnVudGltZSgpIHtcbiAgICByZXR1cm4gZXhwb3J0cztcbiAgfSwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzO1xuICB2YXIgZXhwb3J0cyA9IHt9LFxuICAgICAgT3AgPSBPYmplY3QucHJvdG90eXBlLFxuICAgICAgaGFzT3duID0gT3AuaGFzT3duUHJvcGVydHksXG4gICAgICAkU3ltYm9sID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgPyBTeW1ib2wgOiB7fSxcbiAgICAgIGl0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5pdGVyYXRvciB8fCBcIkBAaXRlcmF0b3JcIixcbiAgICAgIGFzeW5jSXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLmFzeW5jSXRlcmF0b3IgfHwgXCJAQGFzeW5jSXRlcmF0b3JcIixcbiAgICAgIHRvU3RyaW5nVGFnU3ltYm9sID0gJFN5bWJvbC50b1N0cmluZ1RhZyB8fCBcIkBAdG9TdHJpbmdUYWdcIjtcblxuICBmdW5jdGlvbiBkZWZpbmUob2JqLCBrZXksIHZhbHVlKSB7XG4gICAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogITAsXG4gICAgICBjb25maWd1cmFibGU6ICEwLFxuICAgICAgd3JpdGFibGU6ICEwXG4gICAgfSksIG9ialtrZXldO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBkZWZpbmUoe30sIFwiXCIpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBkZWZpbmUgPSBmdW5jdGlvbiBkZWZpbmUob2JqLCBrZXksIHZhbHVlKSB7XG4gICAgICByZXR1cm4gb2JqW2tleV0gPSB2YWx1ZTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIHZhciBwcm90b0dlbmVyYXRvciA9IG91dGVyRm4gJiYgb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IgPyBvdXRlckZuIDogR2VuZXJhdG9yLFxuICAgICAgICBnZW5lcmF0b3IgPSBPYmplY3QuY3JlYXRlKHByb3RvR2VuZXJhdG9yLnByb3RvdHlwZSksXG4gICAgICAgIGNvbnRleHQgPSBuZXcgQ29udGV4dCh0cnlMb2NzTGlzdCB8fCBbXSk7XG4gICAgcmV0dXJuIGdlbmVyYXRvci5faW52b2tlID0gZnVuY3Rpb24gKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpIHtcbiAgICAgIHZhciBzdGF0ZSA9IFwic3VzcGVuZGVkU3RhcnRcIjtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAobWV0aG9kLCBhcmcpIHtcbiAgICAgICAgaWYgKFwiZXhlY3V0aW5nXCIgPT09IHN0YXRlKSB0aHJvdyBuZXcgRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBydW5uaW5nXCIpO1xuXG4gICAgICAgIGlmIChcImNvbXBsZXRlZFwiID09PSBzdGF0ZSkge1xuICAgICAgICAgIGlmIChcInRocm93XCIgPT09IG1ldGhvZCkgdGhyb3cgYXJnO1xuICAgICAgICAgIHJldHVybiBkb25lUmVzdWx0KCk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGNvbnRleHQubWV0aG9kID0gbWV0aG9kLCBjb250ZXh0LmFyZyA9IGFyZzs7KSB7XG4gICAgICAgICAgdmFyIGRlbGVnYXRlID0gY29udGV4dC5kZWxlZ2F0ZTtcblxuICAgICAgICAgIGlmIChkZWxlZ2F0ZSkge1xuICAgICAgICAgICAgdmFyIGRlbGVnYXRlUmVzdWx0ID0gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG5cbiAgICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCkge1xuICAgICAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQgPT09IENvbnRpbnVlU2VudGluZWwpIGNvbnRpbnVlO1xuICAgICAgICAgICAgICByZXR1cm4gZGVsZWdhdGVSZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKFwibmV4dFwiID09PSBjb250ZXh0Lm1ldGhvZCkgY29udGV4dC5zZW50ID0gY29udGV4dC5fc2VudCA9IGNvbnRleHQuYXJnO2Vsc2UgaWYgKFwidGhyb3dcIiA9PT0gY29udGV4dC5tZXRob2QpIHtcbiAgICAgICAgICAgIGlmIChcInN1c3BlbmRlZFN0YXJ0XCIgPT09IHN0YXRlKSB0aHJvdyBzdGF0ZSA9IFwiY29tcGxldGVkXCIsIGNvbnRleHQuYXJnO1xuICAgICAgICAgICAgY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZyk7XG4gICAgICAgICAgfSBlbHNlIFwicmV0dXJuXCIgPT09IGNvbnRleHQubWV0aG9kICYmIGNvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIGNvbnRleHQuYXJnKTtcbiAgICAgICAgICBzdGF0ZSA9IFwiZXhlY3V0aW5nXCI7XG4gICAgICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuXG4gICAgICAgICAgaWYgKFwibm9ybWFsXCIgPT09IHJlY29yZC50eXBlKSB7XG4gICAgICAgICAgICBpZiAoc3RhdGUgPSBjb250ZXh0LmRvbmUgPyBcImNvbXBsZXRlZFwiIDogXCJzdXNwZW5kZWRZaWVsZFwiLCByZWNvcmQuYXJnID09PSBDb250aW51ZVNlbnRpbmVsKSBjb250aW51ZTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIHZhbHVlOiByZWNvcmQuYXJnLFxuICAgICAgICAgICAgICBkb25lOiBjb250ZXh0LmRvbmVcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgXCJ0aHJvd1wiID09PSByZWNvcmQudHlwZSAmJiAoc3RhdGUgPSBcImNvbXBsZXRlZFwiLCBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIiwgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KGlubmVyRm4sIHNlbGYsIGNvbnRleHQpLCBnZW5lcmF0b3I7XG4gIH1cblxuICBmdW5jdGlvbiB0cnlDYXRjaChmbiwgb2JqLCBhcmcpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogXCJub3JtYWxcIixcbiAgICAgICAgYXJnOiBmbi5jYWxsKG9iaiwgYXJnKVxuICAgICAgfTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFwidGhyb3dcIixcbiAgICAgICAgYXJnOiBlcnJcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgZXhwb3J0cy53cmFwID0gd3JhcDtcbiAgdmFyIENvbnRpbnVlU2VudGluZWwgPSB7fTtcblxuICBmdW5jdGlvbiBHZW5lcmF0b3IoKSB7fVxuXG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uKCkge31cblxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSgpIHt9XG5cbiAgdmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG4gIGRlZmluZShJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSk7XG4gIHZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZixcbiAgICAgIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG8gJiYgZ2V0UHJvdG8oZ2V0UHJvdG8odmFsdWVzKFtdKSkpO1xuICBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAmJiBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAhPT0gT3AgJiYgaGFzT3duLmNhbGwoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUsIGl0ZXJhdG9yU3ltYm9sKSAmJiAoSXRlcmF0b3JQcm90b3R5cGUgPSBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSk7XG4gIHZhciBHcCA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9IEdlbmVyYXRvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlKTtcblxuICBmdW5jdGlvbiBkZWZpbmVJdGVyYXRvck1ldGhvZHMocHJvdG90eXBlKSB7XG4gICAgW1wibmV4dFwiLCBcInRocm93XCIsIFwicmV0dXJuXCJdLmZvckVhY2goZnVuY3Rpb24gKG1ldGhvZCkge1xuICAgICAgZGVmaW5lKHByb3RvdHlwZSwgbWV0aG9kLCBmdW5jdGlvbiAoYXJnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnZva2UobWV0aG9kLCBhcmcpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBBc3luY0l0ZXJhdG9yKGdlbmVyYXRvciwgUHJvbWlzZUltcGwpIHtcbiAgICBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGdlbmVyYXRvclttZXRob2RdLCBnZW5lcmF0b3IsIGFyZyk7XG5cbiAgICAgIGlmIChcInRocm93XCIgIT09IHJlY29yZC50eXBlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWNvcmQuYXJnLFxuICAgICAgICAgICAgdmFsdWUgPSByZXN1bHQudmFsdWU7XG4gICAgICAgIHJldHVybiB2YWx1ZSAmJiBcIm9iamVjdFwiID09IF90eXBlb2YodmFsdWUpICYmIGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIikgPyBQcm9taXNlSW1wbC5yZXNvbHZlKHZhbHVlLl9fYXdhaXQpLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgaW52b2tlKFwibmV4dFwiLCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgIGludm9rZShcInRocm93XCIsIGVyciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSkgOiBQcm9taXNlSW1wbC5yZXNvbHZlKHZhbHVlKS50aGVuKGZ1bmN0aW9uICh1bndyYXBwZWQpIHtcbiAgICAgICAgICByZXN1bHQudmFsdWUgPSB1bndyYXBwZWQsIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgcmV0dXJuIGludm9rZShcInRocm93XCIsIGVycm9yLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmVqZWN0KHJlY29yZC5hcmcpO1xuICAgIH1cblxuICAgIHZhciBwcmV2aW91c1Byb21pc2U7XG5cbiAgICB0aGlzLl9pbnZva2UgPSBmdW5jdGlvbiAobWV0aG9kLCBhcmcpIHtcbiAgICAgIGZ1bmN0aW9uIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2VJbXBsKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJldmlvdXNQcm9taXNlID0gcHJldmlvdXNQcm9taXNlID8gcHJldmlvdXNQcm9taXNlLnRoZW4oY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcsIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKSA6IGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpIHtcbiAgICB2YXIgbWV0aG9kID0gZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdO1xuXG4gICAgaWYgKHVuZGVmaW5lZCA9PT0gbWV0aG9kKSB7XG4gICAgICBpZiAoY29udGV4dC5kZWxlZ2F0ZSA9IG51bGwsIFwidGhyb3dcIiA9PT0gY29udGV4dC5tZXRob2QpIHtcbiAgICAgICAgaWYgKGRlbGVnYXRlLml0ZXJhdG9yW1wicmV0dXJuXCJdICYmIChjb250ZXh0Lm1ldGhvZCA9IFwicmV0dXJuXCIsIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkLCBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KSwgXCJ0aHJvd1wiID09PSBjb250ZXh0Lm1ldGhvZCkpIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIiwgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFwiVGhlIGl0ZXJhdG9yIGRvZXMgbm90IHByb3ZpZGUgYSAndGhyb3cnIG1ldGhvZFwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKG1ldGhvZCwgZGVsZWdhdGUuaXRlcmF0b3IsIGNvbnRleHQuYXJnKTtcbiAgICBpZiAoXCJ0aHJvd1wiID09PSByZWNvcmQudHlwZSkgcmV0dXJuIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiLCBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmcsIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsLCBDb250aW51ZVNlbnRpbmVsO1xuICAgIHZhciBpbmZvID0gcmVjb3JkLmFyZztcbiAgICByZXR1cm4gaW5mbyA/IGluZm8uZG9uZSA/IChjb250ZXh0W2RlbGVnYXRlLnJlc3VsdE5hbWVdID0gaW5mby52YWx1ZSwgY29udGV4dC5uZXh0ID0gZGVsZWdhdGUubmV4dExvYywgXCJyZXR1cm5cIiAhPT0gY29udGV4dC5tZXRob2QgJiYgKGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCIsIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkKSwgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGwsIENvbnRpbnVlU2VudGluZWwpIDogaW5mbyA6IChjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIiwgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFwiaXRlcmF0b3IgcmVzdWx0IGlzIG5vdCBhbiBvYmplY3RcIiksIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsLCBDb250aW51ZVNlbnRpbmVsKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHB1c2hUcnlFbnRyeShsb2NzKSB7XG4gICAgdmFyIGVudHJ5ID0ge1xuICAgICAgdHJ5TG9jOiBsb2NzWzBdXG4gICAgfTtcbiAgICAxIGluIGxvY3MgJiYgKGVudHJ5LmNhdGNoTG9jID0gbG9jc1sxXSksIDIgaW4gbG9jcyAmJiAoZW50cnkuZmluYWxseUxvYyA9IGxvY3NbMl0sIGVudHJ5LmFmdGVyTG9jID0gbG9jc1szXSksIHRoaXMudHJ5RW50cmllcy5wdXNoKGVudHJ5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkoZW50cnkpIHtcbiAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbiB8fCB7fTtcbiAgICByZWNvcmQudHlwZSA9IFwibm9ybWFsXCIsIGRlbGV0ZSByZWNvcmQuYXJnLCBlbnRyeS5jb21wbGV0aW9uID0gcmVjb3JkO1xuICB9XG5cbiAgZnVuY3Rpb24gQ29udGV4dCh0cnlMb2NzTGlzdCkge1xuICAgIHRoaXMudHJ5RW50cmllcyA9IFt7XG4gICAgICB0cnlMb2M6IFwicm9vdFwiXG4gICAgfV0sIHRyeUxvY3NMaXN0LmZvckVhY2gocHVzaFRyeUVudHJ5LCB0aGlzKSwgdGhpcy5yZXNldCghMCk7XG4gIH1cblxuICBmdW5jdGlvbiB2YWx1ZXMoaXRlcmFibGUpIHtcbiAgICBpZiAoaXRlcmFibGUpIHtcbiAgICAgIHZhciBpdGVyYXRvck1ldGhvZCA9IGl0ZXJhYmxlW2l0ZXJhdG9yU3ltYm9sXTtcbiAgICAgIGlmIChpdGVyYXRvck1ldGhvZCkgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICAgICAgaWYgKFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgaXRlcmFibGUubmV4dCkgcmV0dXJuIGl0ZXJhYmxlO1xuXG4gICAgICBpZiAoIWlzTmFOKGl0ZXJhYmxlLmxlbmd0aCkpIHtcbiAgICAgICAgdmFyIGkgPSAtMSxcbiAgICAgICAgICAgIG5leHQgPSBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICAgIGZvciAoOyArK2kgPCBpdGVyYWJsZS5sZW5ndGg7KSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwoaXRlcmFibGUsIGkpKSByZXR1cm4gbmV4dC52YWx1ZSA9IGl0ZXJhYmxlW2ldLCBuZXh0LmRvbmUgPSAhMSwgbmV4dDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gbmV4dC52YWx1ZSA9IHVuZGVmaW5lZCwgbmV4dC5kb25lID0gITAsIG5leHQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIG5leHQubmV4dCA9IG5leHQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIG5leHQ6IGRvbmVSZXN1bHRcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gZG9uZVJlc3VsdCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdmFsdWU6IHVuZGVmaW5lZCxcbiAgICAgIGRvbmU6ICEwXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSwgZGVmaW5lKEdwLCBcImNvbnN0cnVjdG9yXCIsIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKSwgZGVmaW5lKEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLCBcImNvbnN0cnVjdG9yXCIsIEdlbmVyYXRvckZ1bmN0aW9uKSwgR2VuZXJhdG9yRnVuY3Rpb24uZGlzcGxheU5hbWUgPSBkZWZpbmUoR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUsIHRvU3RyaW5nVGFnU3ltYm9sLCBcIkdlbmVyYXRvckZ1bmN0aW9uXCIpLCBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24gPSBmdW5jdGlvbiAoZ2VuRnVuKSB7XG4gICAgdmFyIGN0b3IgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGdlbkZ1biAmJiBnZW5GdW4uY29uc3RydWN0b3I7XG4gICAgcmV0dXJuICEhY3RvciAmJiAoY3RvciA9PT0gR2VuZXJhdG9yRnVuY3Rpb24gfHwgXCJHZW5lcmF0b3JGdW5jdGlvblwiID09PSAoY3Rvci5kaXNwbGF5TmFtZSB8fCBjdG9yLm5hbWUpKTtcbiAgfSwgZXhwb3J0cy5tYXJrID0gZnVuY3Rpb24gKGdlbkZ1bikge1xuICAgIHJldHVybiBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2YoZ2VuRnVuLCBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSkgOiAoZ2VuRnVuLl9fcHJvdG9fXyA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLCBkZWZpbmUoZ2VuRnVuLCB0b1N0cmluZ1RhZ1N5bWJvbCwgXCJHZW5lcmF0b3JGdW5jdGlvblwiKSksIGdlbkZ1bi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdwKSwgZ2VuRnVuO1xuICB9LCBleHBvcnRzLmF3cmFwID0gZnVuY3Rpb24gKGFyZykge1xuICAgIHJldHVybiB7XG4gICAgICBfX2F3YWl0OiBhcmdcbiAgICB9O1xuICB9LCBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpLCBkZWZpbmUoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUsIGFzeW5jSXRlcmF0b3JTeW1ib2wsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSksIGV4cG9ydHMuQXN5bmNJdGVyYXRvciA9IEFzeW5jSXRlcmF0b3IsIGV4cG9ydHMuYXN5bmMgPSBmdW5jdGlvbiAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QsIFByb21pc2VJbXBsKSB7XG4gICAgdm9pZCAwID09PSBQcm9taXNlSW1wbCAmJiAoUHJvbWlzZUltcGwgPSBQcm9taXNlKTtcbiAgICB2YXIgaXRlciA9IG5ldyBBc3luY0l0ZXJhdG9yKHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpLCBQcm9taXNlSW1wbCk7XG4gICAgcmV0dXJuIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbihvdXRlckZuKSA/IGl0ZXIgOiBpdGVyLm5leHQoKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgIHJldHVybiByZXN1bHQuZG9uZSA/IHJlc3VsdC52YWx1ZSA6IGl0ZXIubmV4dCgpO1xuICAgIH0pO1xuICB9LCBkZWZpbmVJdGVyYXRvck1ldGhvZHMoR3ApLCBkZWZpbmUoR3AsIHRvU3RyaW5nVGFnU3ltYm9sLCBcIkdlbmVyYXRvclwiKSwgZGVmaW5lKEdwLCBpdGVyYXRvclN5bWJvbCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9KSwgZGVmaW5lKEdwLCBcInRvU3RyaW5nXCIsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gXCJbb2JqZWN0IEdlbmVyYXRvcl1cIjtcbiAgfSksIGV4cG9ydHMua2V5cyA9IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuXG4gICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGtleXMucmV2ZXJzZSgpLCBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgZm9yICg7IGtleXMubGVuZ3RoOykge1xuICAgICAgICB2YXIga2V5ID0ga2V5cy5wb3AoKTtcbiAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHJldHVybiBuZXh0LnZhbHVlID0ga2V5LCBuZXh0LmRvbmUgPSAhMSwgbmV4dDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5leHQuZG9uZSA9ICEwLCBuZXh0O1xuICAgIH07XG4gIH0sIGV4cG9ydHMudmFsdWVzID0gdmFsdWVzLCBDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogQ29udGV4dCxcbiAgICByZXNldDogZnVuY3Rpb24gcmVzZXQoc2tpcFRlbXBSZXNldCkge1xuICAgICAgaWYgKHRoaXMucHJldiA9IDAsIHRoaXMubmV4dCA9IDAsIHRoaXMuc2VudCA9IHRoaXMuX3NlbnQgPSB1bmRlZmluZWQsIHRoaXMuZG9uZSA9ICExLCB0aGlzLmRlbGVnYXRlID0gbnVsbCwgdGhpcy5tZXRob2QgPSBcIm5leHRcIiwgdGhpcy5hcmcgPSB1bmRlZmluZWQsIHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKHJlc2V0VHJ5RW50cnkpLCAhc2tpcFRlbXBSZXNldCkgZm9yICh2YXIgbmFtZSBpbiB0aGlzKSB7XG4gICAgICAgIFwidFwiID09PSBuYW1lLmNoYXJBdCgwKSAmJiBoYXNPd24uY2FsbCh0aGlzLCBuYW1lKSAmJiAhaXNOYU4oK25hbWUuc2xpY2UoMSkpICYmICh0aGlzW25hbWVdID0gdW5kZWZpbmVkKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHN0b3A6IGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgICB0aGlzLmRvbmUgPSAhMDtcbiAgICAgIHZhciByb290UmVjb3JkID0gdGhpcy50cnlFbnRyaWVzWzBdLmNvbXBsZXRpb247XG4gICAgICBpZiAoXCJ0aHJvd1wiID09PSByb290UmVjb3JkLnR5cGUpIHRocm93IHJvb3RSZWNvcmQuYXJnO1xuICAgICAgcmV0dXJuIHRoaXMucnZhbDtcbiAgICB9LFxuICAgIGRpc3BhdGNoRXhjZXB0aW9uOiBmdW5jdGlvbiBkaXNwYXRjaEV4Y2VwdGlvbihleGNlcHRpb24pIHtcbiAgICAgIGlmICh0aGlzLmRvbmUpIHRocm93IGV4Y2VwdGlvbjtcbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcztcblxuICAgICAgZnVuY3Rpb24gaGFuZGxlKGxvYywgY2F1Z2h0KSB7XG4gICAgICAgIHJldHVybiByZWNvcmQudHlwZSA9IFwidGhyb3dcIiwgcmVjb3JkLmFyZyA9IGV4Y2VwdGlvbiwgY29udGV4dC5uZXh0ID0gbG9jLCBjYXVnaHQgJiYgKGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCIsIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkKSwgISFjYXVnaHQ7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldLFxuICAgICAgICAgICAgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcbiAgICAgICAgaWYgKFwicm9vdFwiID09PSBlbnRyeS50cnlMb2MpIHJldHVybiBoYW5kbGUoXCJlbmRcIik7XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYpIHtcbiAgICAgICAgICB2YXIgaGFzQ2F0Y2ggPSBoYXNPd24uY2FsbChlbnRyeSwgXCJjYXRjaExvY1wiKSxcbiAgICAgICAgICAgICAgaGFzRmluYWxseSA9IGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIik7XG5cbiAgICAgICAgICBpZiAoaGFzQ2F0Y2ggJiYgaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCAhMCk7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NhdGNoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsICEwKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFoYXNGaW5hbGx5KSB0aHJvdyBuZXcgRXJyb3IoXCJ0cnkgc3RhdGVtZW50IHdpdGhvdXQgY2F0Y2ggb3IgZmluYWxseVwiKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgYWJydXB0OiBmdW5jdGlvbiBhYnJ1cHQodHlwZSwgYXJnKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldiAmJiBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpICYmIHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB2YXIgZmluYWxseUVudHJ5ID0gZW50cnk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZmluYWxseUVudHJ5ICYmIChcImJyZWFrXCIgPT09IHR5cGUgfHwgXCJjb250aW51ZVwiID09PSB0eXBlKSAmJiBmaW5hbGx5RW50cnkudHJ5TG9jIDw9IGFyZyAmJiBhcmcgPD0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2MgJiYgKGZpbmFsbHlFbnRyeSA9IG51bGwpO1xuICAgICAgdmFyIHJlY29yZCA9IGZpbmFsbHlFbnRyeSA/IGZpbmFsbHlFbnRyeS5jb21wbGV0aW9uIDoge307XG4gICAgICByZXR1cm4gcmVjb3JkLnR5cGUgPSB0eXBlLCByZWNvcmQuYXJnID0gYXJnLCBmaW5hbGx5RW50cnkgPyAodGhpcy5tZXRob2QgPSBcIm5leHRcIiwgdGhpcy5uZXh0ID0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2MsIENvbnRpbnVlU2VudGluZWwpIDogdGhpcy5jb21wbGV0ZShyZWNvcmQpO1xuICAgIH0sXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uIGNvbXBsZXRlKHJlY29yZCwgYWZ0ZXJMb2MpIHtcbiAgICAgIGlmIChcInRocm93XCIgPT09IHJlY29yZC50eXBlKSB0aHJvdyByZWNvcmQuYXJnO1xuICAgICAgcmV0dXJuIFwiYnJlYWtcIiA9PT0gcmVjb3JkLnR5cGUgfHwgXCJjb250aW51ZVwiID09PSByZWNvcmQudHlwZSA/IHRoaXMubmV4dCA9IHJlY29yZC5hcmcgOiBcInJldHVyblwiID09PSByZWNvcmQudHlwZSA/ICh0aGlzLnJ2YWwgPSB0aGlzLmFyZyA9IHJlY29yZC5hcmcsIHRoaXMubWV0aG9kID0gXCJyZXR1cm5cIiwgdGhpcy5uZXh0ID0gXCJlbmRcIikgOiBcIm5vcm1hbFwiID09PSByZWNvcmQudHlwZSAmJiBhZnRlckxvYyAmJiAodGhpcy5uZXh0ID0gYWZ0ZXJMb2MpLCBDb250aW51ZVNlbnRpbmVsO1xuICAgIH0sXG4gICAgZmluaXNoOiBmdW5jdGlvbiBmaW5pc2goZmluYWxseUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS5maW5hbGx5TG9jID09PSBmaW5hbGx5TG9jKSByZXR1cm4gdGhpcy5jb21wbGV0ZShlbnRyeS5jb21wbGV0aW9uLCBlbnRyeS5hZnRlckxvYyksIHJlc2V0VHJ5RW50cnkoZW50cnkpLCBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgfVxuICAgIH0sXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbiBfY2F0Y2godHJ5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSB0cnlMb2MpIHtcbiAgICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcblxuICAgICAgICAgIGlmIChcInRocm93XCIgPT09IHJlY29yZC50eXBlKSB7XG4gICAgICAgICAgICB2YXIgdGhyb3duID0gcmVjb3JkLmFyZztcbiAgICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB0aHJvd247XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCBjYXRjaCBhdHRlbXB0XCIpO1xuICAgIH0sXG4gICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24gZGVsZWdhdGVZaWVsZChpdGVyYWJsZSwgcmVzdWx0TmFtZSwgbmV4dExvYykge1xuICAgICAgcmV0dXJuIHRoaXMuZGVsZWdhdGUgPSB7XG4gICAgICAgIGl0ZXJhdG9yOiB2YWx1ZXMoaXRlcmFibGUpLFxuICAgICAgICByZXN1bHROYW1lOiByZXN1bHROYW1lLFxuICAgICAgICBuZXh0TG9jOiBuZXh0TG9jXG4gICAgICB9LCBcIm5leHRcIiA9PT0gdGhpcy5tZXRob2QgJiYgKHRoaXMuYXJnID0gdW5kZWZpbmVkKSwgQ29udGludWVTZW50aW5lbDtcbiAgICB9XG4gIH0sIGV4cG9ydHM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3JlZ2VuZXJhdG9yUnVudGltZSwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyIsImZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mLmJpbmQoKSA6IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gICAgby5fX3Byb3RvX18gPSBwO1xuICAgIHJldHVybiBvO1xuICB9LCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7XG4gIHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3NldFByb3RvdHlwZU9mLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7IiwidmFyIGFycmF5V2l0aEhvbGVzID0gcmVxdWlyZShcIi4vYXJyYXlXaXRoSG9sZXMuanNcIik7XG5cbnZhciBpdGVyYWJsZVRvQXJyYXlMaW1pdCA9IHJlcXVpcmUoXCIuL2l0ZXJhYmxlVG9BcnJheUxpbWl0LmpzXCIpO1xuXG52YXIgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkgPSByZXF1aXJlKFwiLi91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheS5qc1wiKTtcblxudmFyIG5vbkl0ZXJhYmxlUmVzdCA9IHJlcXVpcmUoXCIuL25vbkl0ZXJhYmxlUmVzdC5qc1wiKTtcblxuZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7XG4gIHJldHVybiBhcnJheVdpdGhIb2xlcyhhcnIpIHx8IGl0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyLCBpKSB8fCBub25JdGVyYWJsZVJlc3QoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfc2xpY2VkVG9BcnJheSwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyIsInZhciBhcnJheVdpdGhvdXRIb2xlcyA9IHJlcXVpcmUoXCIuL2FycmF5V2l0aG91dEhvbGVzLmpzXCIpO1xuXG52YXIgaXRlcmFibGVUb0FycmF5ID0gcmVxdWlyZShcIi4vaXRlcmFibGVUb0FycmF5LmpzXCIpO1xuXG52YXIgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkgPSByZXF1aXJlKFwiLi91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheS5qc1wiKTtcblxudmFyIG5vbkl0ZXJhYmxlU3ByZWFkID0gcmVxdWlyZShcIi4vbm9uSXRlcmFibGVTcHJlYWQuanNcIik7XG5cbmZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHtcbiAgcmV0dXJuIGFycmF5V2l0aG91dEhvbGVzKGFycikgfHwgaXRlcmFibGVUb0FycmF5KGFycikgfHwgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBub25JdGVyYWJsZVNwcmVhZCgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF90b0NvbnN1bWFibGVBcnJheSwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyIsImZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gIFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjtcblxuICByZXR1cm4gKG1vZHVsZS5leHBvcnRzID0gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvYmopIHtcbiAgICByZXR1cm4gdHlwZW9mIG9iajtcbiAgfSA6IGZ1bmN0aW9uIChvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqO1xuICB9LCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHMpLCBfdHlwZW9mKG9iaik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3R5cGVvZiwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyIsInZhciBhcnJheUxpa2VUb0FycmF5ID0gcmVxdWlyZShcIi4vYXJyYXlMaWtlVG9BcnJheS5qc1wiKTtcblxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikge1xuICBpZiAoIW8pIHJldHVybjtcbiAgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO1xuICB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7XG4gIGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7XG4gIGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pO1xuICBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIGFycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXksIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0czsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikge1xuICBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDtcblxuICBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHtcbiAgICBhcnIyW2ldID0gYXJyW2ldO1xuICB9XG5cbiAgcmV0dXJuIGFycjI7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikge1xuICBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICB9XG5cbiAgcmV0dXJuIHNlbGY7XG59IiwiZnVuY3Rpb24gYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBrZXksIGFyZykge1xuICB0cnkge1xuICAgIHZhciBpbmZvID0gZ2VuW2tleV0oYXJnKTtcbiAgICB2YXIgdmFsdWUgPSBpbmZvLnZhbHVlO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJlamVjdChlcnJvcik7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGluZm8uZG9uZSkge1xuICAgIHJlc29sdmUodmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihfbmV4dCwgX3Rocm93KTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfYXN5bmNUb0dlbmVyYXRvcihmbikge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBzZWxmID0gdGhpcyxcbiAgICAgICAgYXJncyA9IGFyZ3VtZW50cztcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIGdlbiA9IGZuLmFwcGx5KHNlbGYsIGFyZ3MpO1xuXG4gICAgICBmdW5jdGlvbiBfbmV4dCh2YWx1ZSkge1xuICAgICAgICBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIFwibmV4dFwiLCB2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIF90aHJvdyhlcnIpIHtcbiAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBcInRocm93XCIsIGVycik7XG4gICAgICB9XG5cbiAgICAgIF9uZXh0KHVuZGVmaW5lZCk7XG4gICAgfSk7XG4gIH07XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn0iLCJmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsIFwicHJvdG90eXBlXCIsIHtcbiAgICB3cml0YWJsZTogZmFsc2VcbiAgfSk7XG4gIHJldHVybiBDb25zdHJ1Y3Rvcjtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge1xuICBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YuYmluZCgpIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHtcbiAgICByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pO1xuICB9O1xuICByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pO1xufSIsImltcG9ydCBfdHlwZW9mIGZyb20gXCIuL3R5cGVvZi5qc1wiO1xuaW1wb3J0IGFzc2VydFRoaXNJbml0aWFsaXplZCBmcm9tIFwiLi9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHtcbiAgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHtcbiAgICByZXR1cm4gY2FsbDtcbiAgfSBlbHNlIGlmIChjYWxsICE9PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRGVyaXZlZCBjb25zdHJ1Y3RvcnMgbWF5IG9ubHkgcmV0dXJuIG9iamVjdCBvciB1bmRlZmluZWRcIik7XG4gIH1cblxuICByZXR1cm4gYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpO1xufSIsImltcG9ydCBnZXRQcm90b3R5cGVPZiBmcm9tIFwiLi9nZXRQcm90b3R5cGVPZi5qc1wiO1xuaW1wb3J0IGlzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCBmcm9tIFwiLi9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QuanNcIjtcbmltcG9ydCBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gXCIuL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4uanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7XG4gIHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7XG4gIHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHtcbiAgICB2YXIgU3VwZXIgPSBnZXRQcm90b3R5cGVPZihEZXJpdmVkKSxcbiAgICAgICAgcmVzdWx0O1xuXG4gICAgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHtcbiAgICAgIHZhciBOZXdUYXJnZXQgPSBnZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjtcbiAgICAgIHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTtcbiAgfTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkge1xuICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7XG4gIGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7XG4gIGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7XG5cbiAgdHJ5IHtcbiAgICBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbiwgW10sIGZ1bmN0aW9uICgpIHt9KSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduID8gT2JqZWN0LmFzc2lnbi5iaW5kKCkgOiBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mLmJpbmQoKSA6IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gICAgby5fX3Byb3RvX18gPSBwO1xuICAgIHJldHVybiBvO1xuICB9O1xuICByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApO1xufSIsImltcG9ydCBzZXRQcm90b3R5cGVPZiBmcm9tIFwiLi9zZXRQcm90b3R5cGVPZi5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7XG4gIH1cblxuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9XG4gIH0pO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc3ViQ2xhc3MsIFwicHJvdG90eXBlXCIsIHtcbiAgICB3cml0YWJsZTogZmFsc2VcbiAgfSk7XG4gIGlmIChzdXBlckNsYXNzKSBzZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7XG4gIGlmICh0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIGl0ZXJbU3ltYm9sLml0ZXJhdG9yXSAhPSBudWxsIHx8IGl0ZXJbXCJAQGl0ZXJhdG9yXCJdICE9IG51bGwpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG59IiwiaW1wb3J0IGRlZmluZVByb3BlcnR5IGZyb20gXCIuL2RlZmluZVByb3BlcnR5LmpzXCI7XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTtcbiAgICBlbnVtZXJhYmxlT25seSAmJiAoc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHtcbiAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlO1xuICAgIH0pKSwga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpO1xuICB9XG5cbiAgcmV0dXJuIGtleXM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9vYmplY3RTcHJlYWQyKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBudWxsICE9IGFyZ3VtZW50c1tpXSA/IGFyZ3VtZW50c1tpXSA6IHt9O1xuICAgIGkgJSAyID8gb3duS2V5cyhPYmplY3Qoc291cmNlKSwgITApLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTtcbiAgICB9KSA6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKSA6IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufSIsImltcG9ydCBvYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCIuL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0gb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKTtcbiAgdmFyIGtleSwgaTtcblxuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgIHZhciBzb3VyY2VTeW1ib2xLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IHNvdXJjZVN5bWJvbEtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGtleSA9IHNvdXJjZVN5bWJvbEtleXNbaV07XG4gICAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoc291cmNlLCBrZXkpKSBjb250aW51ZTtcbiAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleSwgaTtcblxuICBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IHNvdXJjZUtleXNbaV07XG4gICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn0iLCJpbXBvcnQgX3R5cGVvZiBmcm9tIFwiLi90eXBlb2YuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9yZWdlbmVyYXRvclJ1bnRpbWUoKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuICAvKiEgcmVnZW5lcmF0b3ItcnVudGltZSAtLSBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy4gLS0gbGljZW5zZSAoTUlUKTogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9yL2Jsb2IvbWFpbi9MSUNFTlNFICovXG5cbiAgX3JlZ2VuZXJhdG9yUnVudGltZSA9IGZ1bmN0aW9uIF9yZWdlbmVyYXRvclJ1bnRpbWUoKSB7XG4gICAgcmV0dXJuIGV4cG9ydHM7XG4gIH07XG5cbiAgdmFyIGV4cG9ydHMgPSB7fSxcbiAgICAgIE9wID0gT2JqZWN0LnByb3RvdHlwZSxcbiAgICAgIGhhc093biA9IE9wLmhhc093blByb3BlcnR5LFxuICAgICAgJFN5bWJvbCA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sID8gU3ltYm9sIDoge30sXG4gICAgICBpdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuaXRlcmF0b3IgfHwgXCJAQGl0ZXJhdG9yXCIsXG4gICAgICBhc3luY0l0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5hc3luY0l0ZXJhdG9yIHx8IFwiQEBhc3luY0l0ZXJhdG9yXCIsXG4gICAgICB0b1N0cmluZ1RhZ1N5bWJvbCA9ICRTeW1ib2wudG9TdHJpbmdUYWcgfHwgXCJAQHRvU3RyaW5nVGFnXCI7XG5cbiAgZnVuY3Rpb24gZGVmaW5lKG9iaiwga2V5LCB2YWx1ZSkge1xuICAgIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6ICEwLFxuICAgICAgY29uZmlndXJhYmxlOiAhMCxcbiAgICAgIHdyaXRhYmxlOiAhMFxuICAgIH0pLCBvYmpba2V5XTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgZGVmaW5lKHt9LCBcIlwiKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgZGVmaW5lID0gZnVuY3Rpb24gZGVmaW5lKG9iaiwga2V5LCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIG9ialtrZXldID0gdmFsdWU7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICB2YXIgcHJvdG9HZW5lcmF0b3IgPSBvdXRlckZuICYmIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yID8gb3V0ZXJGbiA6IEdlbmVyYXRvcixcbiAgICAgICAgZ2VuZXJhdG9yID0gT2JqZWN0LmNyZWF0ZShwcm90b0dlbmVyYXRvci5wcm90b3R5cGUpLFxuICAgICAgICBjb250ZXh0ID0gbmV3IENvbnRleHQodHJ5TG9jc0xpc3QgfHwgW10pO1xuICAgIHJldHVybiBnZW5lcmF0b3IuX2ludm9rZSA9IGZ1bmN0aW9uIChpbm5lckZuLCBzZWxmLCBjb250ZXh0KSB7XG4gICAgICB2YXIgc3RhdGUgPSBcInN1c3BlbmRlZFN0YXJ0XCI7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKG1ldGhvZCwgYXJnKSB7XG4gICAgICAgIGlmIChcImV4ZWN1dGluZ1wiID09PSBzdGF0ZSkgdGhyb3cgbmV3IEVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZ1wiKTtcblxuICAgICAgICBpZiAoXCJjb21wbGV0ZWRcIiA9PT0gc3RhdGUpIHtcbiAgICAgICAgICBpZiAoXCJ0aHJvd1wiID09PSBtZXRob2QpIHRocm93IGFyZztcbiAgICAgICAgICByZXR1cm4gZG9uZVJlc3VsdCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChjb250ZXh0Lm1ldGhvZCA9IG1ldGhvZCwgY29udGV4dC5hcmcgPSBhcmc7Oykge1xuICAgICAgICAgIHZhciBkZWxlZ2F0ZSA9IGNvbnRleHQuZGVsZWdhdGU7XG5cbiAgICAgICAgICBpZiAoZGVsZWdhdGUpIHtcbiAgICAgICAgICAgIHZhciBkZWxlZ2F0ZVJlc3VsdCA9IG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuXG4gICAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQpIHtcbiAgICAgICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0ID09PSBDb250aW51ZVNlbnRpbmVsKSBjb250aW51ZTtcbiAgICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlUmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChcIm5leHRcIiA9PT0gY29udGV4dC5tZXRob2QpIGNvbnRleHQuc2VudCA9IGNvbnRleHQuX3NlbnQgPSBjb250ZXh0LmFyZztlbHNlIGlmIChcInRocm93XCIgPT09IGNvbnRleHQubWV0aG9kKSB7XG4gICAgICAgICAgICBpZiAoXCJzdXNwZW5kZWRTdGFydFwiID09PSBzdGF0ZSkgdGhyb3cgc3RhdGUgPSBcImNvbXBsZXRlZFwiLCBjb250ZXh0LmFyZztcbiAgICAgICAgICAgIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpO1xuICAgICAgICAgIH0gZWxzZSBcInJldHVyblwiID09PSBjb250ZXh0Lm1ldGhvZCAmJiBjb250ZXh0LmFicnVwdChcInJldHVyblwiLCBjb250ZXh0LmFyZyk7XG4gICAgICAgICAgc3RhdGUgPSBcImV4ZWN1dGluZ1wiO1xuICAgICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcblxuICAgICAgICAgIGlmIChcIm5vcm1hbFwiID09PSByZWNvcmQudHlwZSkge1xuICAgICAgICAgICAgaWYgKHN0YXRlID0gY29udGV4dC5kb25lID8gXCJjb21wbGV0ZWRcIiA6IFwic3VzcGVuZGVkWWllbGRcIiwgcmVjb3JkLmFyZyA9PT0gQ29udGludWVTZW50aW5lbCkgY29udGludWU7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICB2YWx1ZTogcmVjb3JkLmFyZyxcbiAgICAgICAgICAgICAgZG9uZTogY29udGV4dC5kb25lXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIFwidGhyb3dcIiA9PT0gcmVjb3JkLnR5cGUgJiYgKHN0YXRlID0gXCJjb21wbGV0ZWRcIiwgY29udGV4dC5tZXRob2QgPSBcInRocm93XCIsIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZyk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfShpbm5lckZuLCBzZWxmLCBjb250ZXh0KSwgZ2VuZXJhdG9yO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJ5Q2F0Y2goZm4sIG9iaiwgYXJnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFwibm9ybWFsXCIsXG4gICAgICAgIGFyZzogZm4uY2FsbChvYmosIGFyZylcbiAgICAgIH07XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBcInRocm93XCIsXG4gICAgICAgIGFyZzogZXJyXG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIGV4cG9ydHMud3JhcCA9IHdyYXA7XG4gIHZhciBDb250aW51ZVNlbnRpbmVsID0ge307XG5cbiAgZnVuY3Rpb24gR2VuZXJhdG9yKCkge31cblxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvbigpIHt9XG5cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUoKSB7fVxuXG4gIHZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuICBkZWZpbmUoSXRlcmF0b3JQcm90b3R5cGUsIGl0ZXJhdG9yU3ltYm9sLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0pO1xuICB2YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YsXG4gICAgICBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvICYmIGdldFByb3RvKGdldFByb3RvKHZhbHVlcyhbXSkpKTtcbiAgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgJiYgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgIT09IE9wICYmIGhhc093bi5jYWxsKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlLCBpdGVyYXRvclN5bWJvbCkgJiYgKEl0ZXJhdG9yUHJvdG90eXBlID0gTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUpO1xuICB2YXIgR3AgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5wcm90b3R5cGUgPSBHZW5lcmF0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSk7XG5cbiAgZnVuY3Rpb24gZGVmaW5lSXRlcmF0b3JNZXRob2RzKHByb3RvdHlwZSkge1xuICAgIFtcIm5leHRcIiwgXCJ0aHJvd1wiLCBcInJldHVyblwiXS5mb3JFYWNoKGZ1bmN0aW9uIChtZXRob2QpIHtcbiAgICAgIGRlZmluZShwcm90b3R5cGUsIG1ldGhvZCwgZnVuY3Rpb24gKGFyZykge1xuICAgICAgICByZXR1cm4gdGhpcy5faW52b2tlKG1ldGhvZCwgYXJnKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gQXN5bmNJdGVyYXRvcihnZW5lcmF0b3IsIFByb21pc2VJbXBsKSB7XG4gICAgZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChnZW5lcmF0b3JbbWV0aG9kXSwgZ2VuZXJhdG9yLCBhcmcpO1xuXG4gICAgICBpZiAoXCJ0aHJvd1wiICE9PSByZWNvcmQudHlwZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVjb3JkLmFyZyxcbiAgICAgICAgICAgIHZhbHVlID0gcmVzdWx0LnZhbHVlO1xuICAgICAgICByZXR1cm4gdmFsdWUgJiYgXCJvYmplY3RcIiA9PSBfdHlwZW9mKHZhbHVlKSAmJiBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpID8gUHJvbWlzZUltcGwucmVzb2x2ZSh2YWx1ZS5fX2F3YWl0KS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIGludm9rZShcIm5leHRcIiwgdmFsdWUsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICBpbnZva2UoXCJ0aHJvd1wiLCBlcnIsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pIDogUHJvbWlzZUltcGwucmVzb2x2ZSh2YWx1ZSkudGhlbihmdW5jdGlvbiAodW53cmFwcGVkKSB7XG4gICAgICAgICAgcmVzdWx0LnZhbHVlID0gdW53cmFwcGVkLCByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgIHJldHVybiBpbnZva2UoXCJ0aHJvd1wiLCBlcnJvciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJlamVjdChyZWNvcmQuYXJnKTtcbiAgICB9XG5cbiAgICB2YXIgcHJldmlvdXNQcm9taXNlO1xuXG4gICAgdGhpcy5faW52b2tlID0gZnVuY3Rpb24gKG1ldGhvZCwgYXJnKSB7XG4gICAgICBmdW5jdGlvbiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlSW1wbChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByZXZpb3VzUHJvbWlzZSA9IHByZXZpb3VzUHJvbWlzZSA/IHByZXZpb3VzUHJvbWlzZS50aGVuKGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnLCBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZykgOiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KSB7XG4gICAgdmFyIG1ldGhvZCA9IGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXTtcblxuICAgIGlmICh1bmRlZmluZWQgPT09IG1ldGhvZCkge1xuICAgICAgaWYgKGNvbnRleHQuZGVsZWdhdGUgPSBudWxsLCBcInRocm93XCIgPT09IGNvbnRleHQubWV0aG9kKSB7XG4gICAgICAgIGlmIChkZWxlZ2F0ZS5pdGVyYXRvcltcInJldHVyblwiXSAmJiAoY29udGV4dC5tZXRob2QgPSBcInJldHVyblwiLCBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZCwgbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCksIFwidGhyb3dcIiA9PT0gY29udGV4dC5tZXRob2QpKSByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCIsIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcIlRoZSBpdGVyYXRvciBkb2VzIG5vdCBwcm92aWRlIGEgJ3Rocm93JyBtZXRob2RcIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChtZXRob2QsIGRlbGVnYXRlLml0ZXJhdG9yLCBjb250ZXh0LmFyZyk7XG4gICAgaWYgKFwidGhyb3dcIiA9PT0gcmVjb3JkLnR5cGUpIHJldHVybiBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIiwgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnLCBjb250ZXh0LmRlbGVnYXRlID0gbnVsbCwgQ29udGludWVTZW50aW5lbDtcbiAgICB2YXIgaW5mbyA9IHJlY29yZC5hcmc7XG4gICAgcmV0dXJuIGluZm8gPyBpbmZvLmRvbmUgPyAoY29udGV4dFtkZWxlZ2F0ZS5yZXN1bHROYW1lXSA9IGluZm8udmFsdWUsIGNvbnRleHQubmV4dCA9IGRlbGVnYXRlLm5leHRMb2MsIFwicmV0dXJuXCIgIT09IGNvbnRleHQubWV0aG9kICYmIChjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiLCBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZCksIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsLCBDb250aW51ZVNlbnRpbmVsKSA6IGluZm8gOiAoY29udGV4dC5tZXRob2QgPSBcInRocm93XCIsIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcIml0ZXJhdG9yIHJlc3VsdCBpcyBub3QgYW4gb2JqZWN0XCIpLCBjb250ZXh0LmRlbGVnYXRlID0gbnVsbCwgQ29udGludWVTZW50aW5lbCk7XG4gIH1cblxuICBmdW5jdGlvbiBwdXNoVHJ5RW50cnkobG9jcykge1xuICAgIHZhciBlbnRyeSA9IHtcbiAgICAgIHRyeUxvYzogbG9jc1swXVxuICAgIH07XG4gICAgMSBpbiBsb2NzICYmIChlbnRyeS5jYXRjaExvYyA9IGxvY3NbMV0pLCAyIGluIGxvY3MgJiYgKGVudHJ5LmZpbmFsbHlMb2MgPSBsb2NzWzJdLCBlbnRyeS5hZnRlckxvYyA9IGxvY3NbM10pLCB0aGlzLnRyeUVudHJpZXMucHVzaChlbnRyeSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNldFRyeUVudHJ5KGVudHJ5KSB7XG4gICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb24gfHwge307XG4gICAgcmVjb3JkLnR5cGUgPSBcIm5vcm1hbFwiLCBkZWxldGUgcmVjb3JkLmFyZywgZW50cnkuY29tcGxldGlvbiA9IHJlY29yZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIENvbnRleHQodHJ5TG9jc0xpc3QpIHtcbiAgICB0aGlzLnRyeUVudHJpZXMgPSBbe1xuICAgICAgdHJ5TG9jOiBcInJvb3RcIlxuICAgIH1dLCB0cnlMb2NzTGlzdC5mb3JFYWNoKHB1c2hUcnlFbnRyeSwgdGhpcyksIHRoaXMucmVzZXQoITApO1xuICB9XG5cbiAgZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7XG4gICAgaWYgKGl0ZXJhYmxlKSB7XG4gICAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07XG4gICAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHJldHVybiBpdGVyYXRvck1ldGhvZC5jYWxsKGl0ZXJhYmxlKTtcbiAgICAgIGlmIChcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGl0ZXJhYmxlLm5leHQpIHJldHVybiBpdGVyYWJsZTtcblxuICAgICAgaWYgKCFpc05hTihpdGVyYWJsZS5sZW5ndGgpKSB7XG4gICAgICAgIHZhciBpID0gLTEsXG4gICAgICAgICAgICBuZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICBmb3IgKDsgKytpIDwgaXRlcmFibGUubGVuZ3RoOykge1xuICAgICAgICAgICAgaWYgKGhhc093bi5jYWxsKGl0ZXJhYmxlLCBpKSkgcmV0dXJuIG5leHQudmFsdWUgPSBpdGVyYWJsZVtpXSwgbmV4dC5kb25lID0gITEsIG5leHQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIG5leHQudmFsdWUgPSB1bmRlZmluZWQsIG5leHQuZG9uZSA9ICEwLCBuZXh0O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXh0Lm5leHQgPSBuZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBuZXh0OiBkb25lUmVzdWx0XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRvbmVSZXN1bHQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHZhbHVlOiB1bmRlZmluZWQsXG4gICAgICBkb25lOiAhMFxuICAgIH07XG4gIH1cblxuICByZXR1cm4gR2VuZXJhdG9yRnVuY3Rpb24ucHJvdG90eXBlID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUsIGRlZmluZShHcCwgXCJjb25zdHJ1Y3RvclwiLCBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSksIGRlZmluZShHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSwgXCJjb25zdHJ1Y3RvclwiLCBHZW5lcmF0b3JGdW5jdGlvbiksIEdlbmVyYXRvckZ1bmN0aW9uLmRpc3BsYXlOYW1lID0gZGVmaW5lKEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLCB0b1N0cmluZ1RhZ1N5bWJvbCwgXCJHZW5lcmF0b3JGdW5jdGlvblwiKSwgZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24gKGdlbkZ1bikge1xuICAgIHZhciBjdG9yID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBnZW5GdW4gJiYgZ2VuRnVuLmNvbnN0cnVjdG9yO1xuICAgIHJldHVybiAhIWN0b3IgJiYgKGN0b3IgPT09IEdlbmVyYXRvckZ1bmN0aW9uIHx8IFwiR2VuZXJhdG9yRnVuY3Rpb25cIiA9PT0gKGN0b3IuZGlzcGxheU5hbWUgfHwgY3Rvci5uYW1lKSk7XG4gIH0sIGV4cG9ydHMubWFyayA9IGZ1bmN0aW9uIChnZW5GdW4pIHtcbiAgICByZXR1cm4gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKGdlbkZ1biwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpIDogKGdlbkZ1bi5fX3Byb3RvX18gPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSwgZGVmaW5lKGdlbkZ1biwgdG9TdHJpbmdUYWdTeW1ib2wsIFwiR2VuZXJhdG9yRnVuY3Rpb25cIikpLCBnZW5GdW4ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShHcCksIGdlbkZ1bjtcbiAgfSwgZXhwb3J0cy5hd3JhcCA9IGZ1bmN0aW9uIChhcmcpIHtcbiAgICByZXR1cm4ge1xuICAgICAgX19hd2FpdDogYXJnXG4gICAgfTtcbiAgfSwgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlKSwgZGVmaW5lKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlLCBhc3luY0l0ZXJhdG9yU3ltYm9sLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0pLCBleHBvcnRzLkFzeW5jSXRlcmF0b3IgPSBBc3luY0l0ZXJhdG9yLCBleHBvcnRzLmFzeW5jID0gZnVuY3Rpb24gKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0LCBQcm9taXNlSW1wbCkge1xuICAgIHZvaWQgMCA9PT0gUHJvbWlzZUltcGwgJiYgKFByb21pc2VJbXBsID0gUHJvbWlzZSk7XG4gICAgdmFyIGl0ZXIgPSBuZXcgQXN5bmNJdGVyYXRvcih3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSwgUHJvbWlzZUltcGwpO1xuICAgIHJldHVybiBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24ob3V0ZXJGbikgPyBpdGVyIDogaXRlci5uZXh0KCkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICByZXR1cm4gcmVzdWx0LmRvbmUgPyByZXN1bHQudmFsdWUgOiBpdGVyLm5leHQoKTtcbiAgICB9KTtcbiAgfSwgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEdwKSwgZGVmaW5lKEdwLCB0b1N0cmluZ1RhZ1N5bWJvbCwgXCJHZW5lcmF0b3JcIiksIGRlZmluZShHcCwgaXRlcmF0b3JTeW1ib2wsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSksIGRlZmluZShHcCwgXCJ0b1N0cmluZ1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFwiW29iamVjdCBHZW5lcmF0b3JdXCI7XG4gIH0pLCBleHBvcnRzLmtleXMgPSBmdW5jdGlvbiAob2JqZWN0KSB7XG4gICAgdmFyIGtleXMgPSBbXTtcblxuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgIH1cblxuICAgIHJldHVybiBrZXlzLnJldmVyc2UoKSwgZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIGZvciAoOyBrZXlzLmxlbmd0aDspIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXMucG9wKCk7XG4gICAgICAgIGlmIChrZXkgaW4gb2JqZWN0KSByZXR1cm4gbmV4dC52YWx1ZSA9IGtleSwgbmV4dC5kb25lID0gITEsIG5leHQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXh0LmRvbmUgPSAhMCwgbmV4dDtcbiAgICB9O1xuICB9LCBleHBvcnRzLnZhbHVlcyA9IHZhbHVlcywgQ29udGV4dC5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IENvbnRleHQsXG4gICAgcmVzZXQ6IGZ1bmN0aW9uIHJlc2V0KHNraXBUZW1wUmVzZXQpIHtcbiAgICAgIGlmICh0aGlzLnByZXYgPSAwLCB0aGlzLm5leHQgPSAwLCB0aGlzLnNlbnQgPSB0aGlzLl9zZW50ID0gdW5kZWZpbmVkLCB0aGlzLmRvbmUgPSAhMSwgdGhpcy5kZWxlZ2F0ZSA9IG51bGwsIHRoaXMubWV0aG9kID0gXCJuZXh0XCIsIHRoaXMuYXJnID0gdW5kZWZpbmVkLCB0aGlzLnRyeUVudHJpZXMuZm9yRWFjaChyZXNldFRyeUVudHJ5KSwgIXNraXBUZW1wUmVzZXQpIGZvciAodmFyIG5hbWUgaW4gdGhpcykge1xuICAgICAgICBcInRcIiA9PT0gbmFtZS5jaGFyQXQoMCkgJiYgaGFzT3duLmNhbGwodGhpcywgbmFtZSkgJiYgIWlzTmFOKCtuYW1lLnNsaWNlKDEpKSAmJiAodGhpc1tuYW1lXSA9IHVuZGVmaW5lZCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBzdG9wOiBmdW5jdGlvbiBzdG9wKCkge1xuICAgICAgdGhpcy5kb25lID0gITA7XG4gICAgICB2YXIgcm9vdFJlY29yZCA9IHRoaXMudHJ5RW50cmllc1swXS5jb21wbGV0aW9uO1xuICAgICAgaWYgKFwidGhyb3dcIiA9PT0gcm9vdFJlY29yZC50eXBlKSB0aHJvdyByb290UmVjb3JkLmFyZztcbiAgICAgIHJldHVybiB0aGlzLnJ2YWw7XG4gICAgfSxcbiAgICBkaXNwYXRjaEV4Y2VwdGlvbjogZnVuY3Rpb24gZGlzcGF0Y2hFeGNlcHRpb24oZXhjZXB0aW9uKSB7XG4gICAgICBpZiAodGhpcy5kb25lKSB0aHJvdyBleGNlcHRpb247XG4gICAgICB2YXIgY29udGV4dCA9IHRoaXM7XG5cbiAgICAgIGZ1bmN0aW9uIGhhbmRsZShsb2MsIGNhdWdodCkge1xuICAgICAgICByZXR1cm4gcmVjb3JkLnR5cGUgPSBcInRocm93XCIsIHJlY29yZC5hcmcgPSBleGNlcHRpb24sIGNvbnRleHQubmV4dCA9IGxvYywgY2F1Z2h0ICYmIChjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiLCBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZCksICEhY2F1Z2h0O1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXSxcbiAgICAgICAgICAgIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG4gICAgICAgIGlmIChcInJvb3RcIiA9PT0gZW50cnkudHJ5TG9jKSByZXR1cm4gaGFuZGxlKFwiZW5kXCIpO1xuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2KSB7XG4gICAgICAgICAgdmFyIGhhc0NhdGNoID0gaGFzT3duLmNhbGwoZW50cnksIFwiY2F0Y2hMb2NcIiksXG4gICAgICAgICAgICAgIGhhc0ZpbmFsbHkgPSBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpO1xuXG4gICAgICAgICAgaWYgKGhhc0NhdGNoICYmIGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgITApO1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNDYXRjaCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCAhMCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghaGFzRmluYWxseSkgdGhyb3cgbmV3IEVycm9yKFwidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHlcIik7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGFicnVwdDogZnVuY3Rpb24gYWJydXB0KHR5cGUsIGFyZykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYgJiYgaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKSAmJiB0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgdmFyIGZpbmFsbHlFbnRyeSA9IGVudHJ5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZpbmFsbHlFbnRyeSAmJiAoXCJicmVha1wiID09PSB0eXBlIHx8IFwiY29udGludWVcIiA9PT0gdHlwZSkgJiYgZmluYWxseUVudHJ5LnRyeUxvYyA8PSBhcmcgJiYgYXJnIDw9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jICYmIChmaW5hbGx5RW50cnkgPSBudWxsKTtcbiAgICAgIHZhciByZWNvcmQgPSBmaW5hbGx5RW50cnkgPyBmaW5hbGx5RW50cnkuY29tcGxldGlvbiA6IHt9O1xuICAgICAgcmV0dXJuIHJlY29yZC50eXBlID0gdHlwZSwgcmVjb3JkLmFyZyA9IGFyZywgZmluYWxseUVudHJ5ID8gKHRoaXMubWV0aG9kID0gXCJuZXh0XCIsIHRoaXMubmV4dCA9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jLCBDb250aW51ZVNlbnRpbmVsKSA6IHRoaXMuY29tcGxldGUocmVjb3JkKTtcbiAgICB9LFxuICAgIGNvbXBsZXRlOiBmdW5jdGlvbiBjb21wbGV0ZShyZWNvcmQsIGFmdGVyTG9jKSB7XG4gICAgICBpZiAoXCJ0aHJvd1wiID09PSByZWNvcmQudHlwZSkgdGhyb3cgcmVjb3JkLmFyZztcbiAgICAgIHJldHVybiBcImJyZWFrXCIgPT09IHJlY29yZC50eXBlIHx8IFwiY29udGludWVcIiA9PT0gcmVjb3JkLnR5cGUgPyB0aGlzLm5leHQgPSByZWNvcmQuYXJnIDogXCJyZXR1cm5cIiA9PT0gcmVjb3JkLnR5cGUgPyAodGhpcy5ydmFsID0gdGhpcy5hcmcgPSByZWNvcmQuYXJnLCB0aGlzLm1ldGhvZCA9IFwicmV0dXJuXCIsIHRoaXMubmV4dCA9IFwiZW5kXCIpIDogXCJub3JtYWxcIiA9PT0gcmVjb3JkLnR5cGUgJiYgYWZ0ZXJMb2MgJiYgKHRoaXMubmV4dCA9IGFmdGVyTG9jKSwgQ29udGludWVTZW50aW5lbDtcbiAgICB9LFxuICAgIGZpbmlzaDogZnVuY3Rpb24gZmluaXNoKGZpbmFsbHlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkuZmluYWxseUxvYyA9PT0gZmluYWxseUxvYykgcmV0dXJuIHRoaXMuY29tcGxldGUoZW50cnkuY29tcGxldGlvbiwgZW50cnkuYWZ0ZXJMb2MpLCByZXNldFRyeUVudHJ5KGVudHJ5KSwgQ29udGludWVTZW50aW5lbDtcbiAgICAgIH1cbiAgICB9LFxuICAgIFwiY2F0Y2hcIjogZnVuY3Rpb24gX2NhdGNoKHRyeUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gdHJ5TG9jKSB7XG4gICAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG5cbiAgICAgICAgICBpZiAoXCJ0aHJvd1wiID09PSByZWNvcmQudHlwZSkge1xuICAgICAgICAgICAgdmFyIHRocm93biA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gdGhyb3duO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdFwiKTtcbiAgICB9LFxuICAgIGRlbGVnYXRlWWllbGQ6IGZ1bmN0aW9uIGRlbGVnYXRlWWllbGQoaXRlcmFibGUsIHJlc3VsdE5hbWUsIG5leHRMb2MpIHtcbiAgICAgIHJldHVybiB0aGlzLmRlbGVnYXRlID0ge1xuICAgICAgICBpdGVyYXRvcjogdmFsdWVzKGl0ZXJhYmxlKSxcbiAgICAgICAgcmVzdWx0TmFtZTogcmVzdWx0TmFtZSxcbiAgICAgICAgbmV4dExvYzogbmV4dExvY1xuICAgICAgfSwgXCJuZXh0XCIgPT09IHRoaXMubWV0aG9kICYmICh0aGlzLmFyZyA9IHVuZGVmaW5lZCksIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuICB9LCBleHBvcnRzO1xufSIsImltcG9ydCBhcnJheVdpdGhIb2xlcyBmcm9tIFwiLi9hcnJheVdpdGhIb2xlcy5qc1wiO1xuaW1wb3J0IGl0ZXJhYmxlVG9BcnJheUxpbWl0IGZyb20gXCIuL2l0ZXJhYmxlVG9BcnJheUxpbWl0LmpzXCI7XG5pbXBvcnQgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkgZnJvbSBcIi4vdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkuanNcIjtcbmltcG9ydCBub25JdGVyYWJsZVJlc3QgZnJvbSBcIi4vbm9uSXRlcmFibGVSZXN0LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHtcbiAgcmV0dXJuIGFycmF5V2l0aEhvbGVzKGFycikgfHwgaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIsIGkpIHx8IG5vbkl0ZXJhYmxlUmVzdCgpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHtcbiAgdmFyIF9pID0gYXJyID09IG51bGwgPyBudWxsIDogdHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBhcnJbU3ltYm9sLml0ZXJhdG9yXSB8fCBhcnJbXCJAQGl0ZXJhdG9yXCJdO1xuXG4gIGlmIChfaSA9PSBudWxsKSByZXR1cm47XG4gIHZhciBfYXJyID0gW107XG4gIHZhciBfbiA9IHRydWU7XG4gIHZhciBfZCA9IGZhbHNlO1xuXG4gIHZhciBfcywgX2U7XG5cbiAgdHJ5IHtcbiAgICBmb3IgKF9pID0gX2kuY2FsbChhcnIpOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7XG4gICAgICBfYXJyLnB1c2goX3MudmFsdWUpO1xuXG4gICAgICBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBfZCA9IHRydWU7XG4gICAgX2UgPSBlcnI7XG4gIH0gZmluYWxseSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0gIT0gbnVsbCkgX2lbXCJyZXR1cm5cIl0oKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaWYgKF9kKSB0aHJvdyBfZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gX2Fycjtcbn0iLCJpbXBvcnQgYXJyYXlXaXRoSG9sZXMgZnJvbSBcIi4vYXJyYXlXaXRoSG9sZXMuanNcIjtcbmltcG9ydCBpdGVyYWJsZVRvQXJyYXkgZnJvbSBcIi4vaXRlcmFibGVUb0FycmF5LmpzXCI7XG5pbXBvcnQgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkgZnJvbSBcIi4vdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkuanNcIjtcbmltcG9ydCBub25JdGVyYWJsZVJlc3QgZnJvbSBcIi4vbm9uSXRlcmFibGVSZXN0LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfdG9BcnJheShhcnIpIHtcbiAgcmV0dXJuIGFycmF5V2l0aEhvbGVzKGFycikgfHwgaXRlcmFibGVUb0FycmF5KGFycikgfHwgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBub25JdGVyYWJsZVJlc3QoKTtcbn0iLCJpbXBvcnQgYXJyYXlXaXRob3V0SG9sZXMgZnJvbSBcIi4vYXJyYXlXaXRob3V0SG9sZXMuanNcIjtcbmltcG9ydCBpdGVyYWJsZVRvQXJyYXkgZnJvbSBcIi4vaXRlcmFibGVUb0FycmF5LmpzXCI7XG5pbXBvcnQgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkgZnJvbSBcIi4vdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkuanNcIjtcbmltcG9ydCBub25JdGVyYWJsZVNwcmVhZCBmcm9tIFwiLi9ub25JdGVyYWJsZVNwcmVhZC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikge1xuICByZXR1cm4gYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBpdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IG5vbkl0ZXJhYmxlU3ByZWFkKCk7XG59IiwiaW1wb3J0IGFycmF5TGlrZVRvQXJyYXkgZnJvbSBcIi4vYXJyYXlMaWtlVG9BcnJheS5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyYXlMaWtlVG9BcnJheShhcnIpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiO1xuXG4gIHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG9iaikge1xuICAgIHJldHVybiB0eXBlb2Ygb2JqO1xuICB9IDogZnVuY3Rpb24gKG9iaikge1xuICAgIHJldHVybiBvYmogJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7XG4gIH0sIF90eXBlb2Yob2JqKTtcbn0iLCJpbXBvcnQgYXJyYXlMaWtlVG9BcnJheSBmcm9tIFwiLi9hcnJheUxpa2VUb0FycmF5LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7XG4gIGlmICghbykgcmV0dXJuO1xuICBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG4gIHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTtcbiAgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTtcbiAgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7XG4gIGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO1xufSJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiYXJyIiwibGVuIiwibGVuZ3RoIiwiaSIsImFycjIiLCJBcnJheSIsIl9fZXNNb2R1bGUiLCJpc0FycmF5IiwiYXJyYXlMaWtlVG9BcnJheSIsInNlbGYiLCJSZWZlcmVuY2VFcnJvciIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJUeXBlRXJyb3IiLCJfZGVmaW5lUHJvcGVydGllcyIsInRhcmdldCIsInByb3BzIiwiZGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5Iiwia2V5IiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwicHJvdG90eXBlIiwiZ2V0UHJvdG90eXBlT2YiLCJpc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiRGVyaXZlZCIsImhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJyZXN1bHQiLCJTdXBlciIsIk5ld1RhcmdldCIsInRoaXMiLCJjb25zdHJ1Y3RvciIsIlJlZmxlY3QiLCJjb25zdHJ1Y3QiLCJhcmd1bWVudHMiLCJhcHBseSIsIm9iaiIsInZhbHVlIiwiX2V4dGVuZHMiLCJhc3NpZ24iLCJiaW5kIiwic291cmNlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiX2dldFByb3RvdHlwZU9mIiwibyIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiY3JlYXRlIiwiX3R5cGVvZiIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsImNhY2hlIiwiaGFzIiwiZ2V0IiwibmV3T2JqIiwiaGFzUHJvcGVydHlEZXNjcmlwdG9yIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZGVzYyIsInNldCIsInNoYW0iLCJQcm94eSIsIkJvb2xlYW4iLCJ2YWx1ZU9mIiwiZSIsIml0ZXIiLCJTeW1ib2wiLCJpdGVyYXRvciIsImZyb20iLCJfaSIsIl9zIiwiX2UiLCJfYXJyIiwiX24iLCJfZCIsIm5leHQiLCJkb25lIiwicHVzaCIsImVyciIsIm93bktleXMiLCJvYmplY3QiLCJlbnVtZXJhYmxlT25seSIsImtleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJzeW1ib2xzIiwiZmlsdGVyIiwic3ltIiwiZm9yRWFjaCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwib2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSIsImV4Y2x1ZGVkIiwic291cmNlU3ltYm9sS2V5cyIsImluZGV4T2YiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsInNvdXJjZUtleXMiLCJhc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJfcmVnZW5lcmF0b3JSdW50aW1lIiwiT3AiLCJoYXNPd24iLCIkU3ltYm9sIiwiaXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsInRvU3RyaW5nVGFnU3ltYm9sIiwidG9TdHJpbmdUYWciLCJkZWZpbmUiLCJ3cmFwIiwiaW5uZXJGbiIsIm91dGVyRm4iLCJ0cnlMb2NzTGlzdCIsInByb3RvR2VuZXJhdG9yIiwiR2VuZXJhdG9yIiwiZ2VuZXJhdG9yIiwiY29udGV4dCIsIkNvbnRleHQiLCJfaW52b2tlIiwic3RhdGUiLCJtZXRob2QiLCJhcmciLCJFcnJvciIsInVuZGVmaW5lZCIsImRlbGVnYXRlIiwiZGVsZWdhdGVSZXN1bHQiLCJtYXliZUludm9rZURlbGVnYXRlIiwiQ29udGludWVTZW50aW5lbCIsInNlbnQiLCJfc2VudCIsImRpc3BhdGNoRXhjZXB0aW9uIiwiYWJydXB0IiwicmVjb3JkIiwidHJ5Q2F0Y2giLCJ0eXBlIiwiZm4iLCJHZW5lcmF0b3JGdW5jdGlvbiIsIkdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlIiwiSXRlcmF0b3JQcm90b3R5cGUiLCJnZXRQcm90byIsIk5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlIiwidmFsdWVzIiwiR3AiLCJkZWZpbmVJdGVyYXRvck1ldGhvZHMiLCJBc3luY0l0ZXJhdG9yIiwiUHJvbWlzZUltcGwiLCJpbnZva2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiX19hd2FpdCIsInRoZW4iLCJ1bndyYXBwZWQiLCJlcnJvciIsInByZXZpb3VzUHJvbWlzZSIsImNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnIiwiaW5mbyIsInJlc3VsdE5hbWUiLCJuZXh0TG9jIiwicHVzaFRyeUVudHJ5IiwibG9jcyIsImVudHJ5IiwidHJ5TG9jIiwiY2F0Y2hMb2MiLCJmaW5hbGx5TG9jIiwiYWZ0ZXJMb2MiLCJ0cnlFbnRyaWVzIiwicmVzZXRUcnlFbnRyeSIsImNvbXBsZXRpb24iLCJyZXNldCIsIml0ZXJhYmxlIiwiaXRlcmF0b3JNZXRob2QiLCJpc05hTiIsImRvbmVSZXN1bHQiLCJkaXNwbGF5TmFtZSIsImlzR2VuZXJhdG9yRnVuY3Rpb24iLCJnZW5GdW4iLCJjdG9yIiwibmFtZSIsIm1hcmsiLCJhd3JhcCIsImFzeW5jIiwiUHJvbWlzZSIsInJldmVyc2UiLCJwb3AiLCJza2lwVGVtcFJlc2V0IiwicHJldiIsImNoYXJBdCIsInNsaWNlIiwic3RvcCIsInJvb3RSZWNvcmQiLCJydmFsIiwiZXhjZXB0aW9uIiwiaGFuZGxlIiwibG9jIiwiY2F1Z2h0IiwiaGFzQ2F0Y2giLCJoYXNGaW5hbGx5IiwiZmluYWxseUVudHJ5IiwiY29tcGxldGUiLCJmaW5pc2giLCJ0aHJvd24iLCJkZWxlZ2F0ZVlpZWxkIiwiX3NldFByb3RvdHlwZU9mIiwicCIsImFycmF5V2l0aEhvbGVzIiwiaXRlcmFibGVUb0FycmF5TGltaXQiLCJ1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsIm5vbkl0ZXJhYmxlUmVzdCIsImFycmF5V2l0aG91dEhvbGVzIiwiaXRlcmFibGVUb0FycmF5Iiwibm9uSXRlcmFibGVTcHJlYWQiLCJtaW5MZW4iLCJuIiwidG9TdHJpbmciLCJ0ZXN0IiwiX2FycmF5TGlrZVRvQXJyYXkiLCJfYXJyYXlXaXRoSG9sZXMiLCJfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwiYXN5bmNHZW5lcmF0b3JTdGVwIiwiZ2VuIiwiX25leHQiLCJfdGhyb3ciLCJfYXN5bmNUb0dlbmVyYXRvciIsImFyZ3MiLCJfY2xhc3NDYWxsQ2hlY2siLCJfY3JlYXRlQ2xhc3MiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIl9jcmVhdGVTdXBlciIsIl9kZWZpbmVQcm9wZXJ0eSIsIl9pbmhlcml0cyIsIl9pdGVyYWJsZVRvQXJyYXkiLCJfbm9uSXRlcmFibGVSZXN0IiwiX29iamVjdFNwcmVhZDIiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJfc2xpY2VkVG9BcnJheSIsIl90b0FycmF5IiwiX3RvQ29uc3VtYWJsZUFycmF5IiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5Il0sInNvdXJjZVJvb3QiOiIifQ==