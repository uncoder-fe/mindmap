"use strict";(self.webpackChunkmindmap=self.webpackChunkmindmap||[]).push([[457],{56746:(e,t,n)=>{n.r(t),n.d(t,{Field:()=>Y,FieldContext:()=>y,FormProvider:()=>ue,List:()=>Q,ListContext:()=>J,default:()=>he,useForm:()=>oe,useWatch:()=>ve});var r=n(67294),i=n(87462),a=n(44925),o=n(4942),s=n(1413),u=n(93433),l=n(15671),c=n(43144),d=n(97326),f=n(79340),v=n(98557),m=n(50344),h=n(80334),p="RC_FORM_INTERNAL_HOOKS",g=function(){(0,h.ZP)(!1,"Can not find FormContext. Please make sure you wrap Field under Form.")};const y=r.createContext({getFieldValue:g,getFieldsValue:g,getFieldError:g,getFieldWarning:g,getFieldsError:g,isFieldsTouched:g,isFieldTouched:g,isFieldValidating:g,isFieldsValidating:g,resetFields:g,setFields:g,setFieldsValue:g,validateFields:g,submit:g,getInternalHooks:function(){return g(),{dispatch:g,initEntityValue:g,registerField:g,useSubscribe:g,setInitialValues:g,destroyForm:g,setCallbacks:g,registerWatch:g,getFields:g,setValidateMessages:g,setPreserve:g,getInitialValue:g}}});function Z(e){return null==e?[]:Array.isArray(e)?e:[e]}var E=n(74165),b=n(15861),k=n(25715),F="'${name}' is not a valid ${type}",N={default:"Validation error on field '${name}'",required:"'${name}' is required",enum:"'${name}' must be one of [${enum}]",whitespace:"'${name}' cannot be empty",date:{format:"'${name}' is invalid for format date",parse:"'${name}' could not be parsed as date",invalid:"'${name}' is invalid date"},types:{string:F,method:F,array:F,object:F,number:F,date:F,boolean:F,integer:F,float:F,regexp:F,email:F,url:F,hex:F},string:{len:"'${name}' must be exactly ${len} characters",min:"'${name}' must be at least ${min} characters",max:"'${name}' cannot be longer than ${max} characters",range:"'${name}' must be between ${min} and ${max} characters"},number:{len:"'${name}' must equal ${len}",min:"'${name}' cannot be less than ${min}",max:"'${name}' cannot be greater than ${max}",range:"'${name}' must be between ${min} and ${max}"},array:{len:"'${name}' must be exactly ${len} in length",min:"'${name}' cannot be less than ${min} in length",max:"'${name}' cannot be greater than ${max} in length",range:"'${name}' must be between ${min} and ${max} in length"},pattern:{mismatch:"'${name}' does not match pattern ${pattern}"}},C=n(71002),w=n(95013),P=n(8880);const S=function e(t){return Array.isArray(t)?function(t){return t.map((function(t){return e(t)}))}(t):"object"===(0,C.Z)(t)&&null!==t?function(t){if(Object.getPrototypeOf(t)===Object.prototype){var n={};for(var r in t)n[r]=e(t[r]);return n}return t}(t):t};function V(e){return Z(e)}function I(e,t){return(0,w.Z)(e,t)}function M(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]&&arguments[3],i=(0,P.Z)(e,t,n,r);return i}function x(e,t){var n={};return t.forEach((function(t){var r=I(e,t);n=M(n,t,r)})),n}function R(e,t){return e&&e.some((function(e){return O(e,t)}))}function T(e){return"object"===(0,C.Z)(e)&&null!==e&&Object.getPrototypeOf(e)===Object.prototype}function A(e,t){var n=Array.isArray(e)?(0,u.Z)(e):(0,s.Z)({},e);return t?(Object.keys(t).forEach((function(e){var r=n[e],i=t[e],a=T(r)&&T(i);n[e]=a?A(r,i||{}):S(i)})),n):n}function L(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return n.reduce((function(e,t){return A(e,t)}),e)}function O(e,t){return!(!e||!t||e.length!==t.length)&&e.every((function(e,n){return t[n]===e}))}function _(e){var t=arguments.length<=1?void 0:arguments[1];return t&&t.target&&"object"===(0,C.Z)(t.target)&&e in t.target?t.target[e]:t}function D(e,t,n){var r=e.length;if(t<0||t>=r||n<0||n>=r)return e;var i=e[t],a=t-n;return a>0?[].concat((0,u.Z)(e.slice(0,n)),[i],(0,u.Z)(e.slice(n,t)),(0,u.Z)(e.slice(t+1,r))):a<0?[].concat((0,u.Z)(e.slice(0,t)),(0,u.Z)(e.slice(t+1,n+1)),[i],(0,u.Z)(e.slice(n+1,r))):e}var $=k.Z;function W(e,t){return e.replace(/\$\{\w+\}/g,(function(e){var n=e.slice(2,-1);return t[n]}))}var U="CODE_LOGIC_ERROR";function j(e,t,n,r,i){return H.apply(this,arguments)}function H(){return H=(0,b.Z)((0,E.Z)().mark((function e(t,n,i,a,l){var c,d,f,v,m,h,p,g,y;return(0,E.Z)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return delete(c=(0,s.Z)({},i)).ruleIndex,c.validator&&(d=c.validator,c.validator=function(){try{return d.apply(void 0,arguments)}catch(e){return console.error(e),Promise.reject(U)}}),f=null,c&&"array"===c.type&&c.defaultField&&(f=c.defaultField,delete c.defaultField),v=new $((0,o.Z)({},t,[c])),m=L({},N,a.validateMessages),v.messages(m),h=[],e.prev=9,e.next=12,Promise.resolve(v.validate((0,o.Z)({},t,n),(0,s.Z)({},a)));case 12:e.next=17;break;case 14:e.prev=14,e.t0=e.catch(9),e.t0.errors&&(h=e.t0.errors.map((function(e,t){var n=e.message,i=n===U?m.default:n;return r.isValidElement(i)?r.cloneElement(i,{key:"error_".concat(t)}):i})));case 17:if(h.length||!f){e.next=22;break}return e.next=20,Promise.all(n.map((function(e,n){return j("".concat(t,".").concat(n),e,f,a,l)})));case 20:return p=e.sent,e.abrupt("return",p.reduce((function(e,t){return[].concat((0,u.Z)(e),(0,u.Z)(t))}),[]));case 22:return g=(0,s.Z)((0,s.Z)({},i),{},{name:t,enum:(i.enum||[]).join(", ")},l),y=h.map((function(e){return"string"==typeof e?W(e,g):e})),e.abrupt("return",y);case 25:case"end":return e.stop()}}),e,null,[[9,14]])}))),H.apply(this,arguments)}function K(){return(K=(0,b.Z)((0,E.Z)().mark((function e(t){return(0,E.Z)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",Promise.all(t).then((function(e){var t;return(t=[]).concat.apply(t,(0,u.Z)(e))})));case 1:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function q(){return(q=(0,b.Z)((0,E.Z)().mark((function e(t){var n;return(0,E.Z)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=0,e.abrupt("return",new Promise((function(e){t.forEach((function(r){r.then((function(r){r.errors.length&&e([r]),(n+=1)===t.length&&e([])}))}))})));case 2:case"end":return e.stop()}}),e)})))).apply(this,arguments)}var z=["name"],G=[];function B(e,t,n,r,i,a){return"function"==typeof e?e(t,n,"source"in a?{source:a.source}:{}):r!==i}var X=function(e){(0,f.Z)(n,e);var t=(0,v.Z)(n);function n(e){var i;return(0,l.Z)(this,n),(i=t.call(this,e)).state={resetCount:0},i.cancelRegisterFunc=null,i.mounted=!1,i.touched=!1,i.dirty=!1,i.validatePromise=null,i.prevValidating=void 0,i.errors=G,i.warnings=G,i.cancelRegister=function(){var e=i.props,t=e.preserve,n=e.isListField,r=e.name;i.cancelRegisterFunc&&i.cancelRegisterFunc(n,t,V(r)),i.cancelRegisterFunc=null},i.getNamePath=function(){var e=i.props,t=e.name,n=e.fieldContext.prefixName,r=void 0===n?[]:n;return void 0!==t?[].concat((0,u.Z)(r),(0,u.Z)(t)):[]},i.getRules=function(){var e=i.props,t=e.rules,n=void 0===t?[]:t,r=e.fieldContext;return n.map((function(e){return"function"==typeof e?e(r):e}))},i.refresh=function(){i.mounted&&i.setState((function(e){return{resetCount:e.resetCount+1}}))},i.triggerMetaEvent=function(e){var t=i.props.onMetaChange;null==t||t((0,s.Z)((0,s.Z)({},i.getMeta()),{},{destroy:e}))},i.onStoreChange=function(e,t,n){var r=i.props,a=r.shouldUpdate,o=r.dependencies,s=void 0===o?[]:o,u=r.onReset,l=n.store,c=i.getNamePath(),d=i.getValue(e),f=i.getValue(l),v=t&&R(t,c);switch("valueUpdate"===n.type&&"external"===n.source&&d!==f&&(i.touched=!0,i.dirty=!0,i.validatePromise=null,i.errors=G,i.warnings=G,i.triggerMetaEvent()),n.type){case"reset":if(!t||v)return i.touched=!1,i.dirty=!1,i.validatePromise=null,i.errors=G,i.warnings=G,i.triggerMetaEvent(),null==u||u(),void i.refresh();break;case"remove":if(a)return void i.reRender();break;case"setField":if(v){var m=n.data;return"touched"in m&&(i.touched=m.touched),"validating"in m&&!("originRCField"in m)&&(i.validatePromise=m.validating?Promise.resolve([]):null),"errors"in m&&(i.errors=m.errors||G),"warnings"in m&&(i.warnings=m.warnings||G),i.dirty=!0,i.triggerMetaEvent(),void i.reRender()}if(a&&!c.length&&B(a,e,l,d,f,n))return void i.reRender();break;case"dependenciesUpdate":if(s.map(V).some((function(e){return R(n.relatedFields,e)})))return void i.reRender();break;default:if(v||(!s.length||c.length||a)&&B(a,e,l,d,f,n))return void i.reRender()}!0===a&&i.reRender()},i.validateRules=function(e){var t=i.getNamePath(),n=i.getValue(),r=Promise.resolve().then((function(){if(!i.mounted)return[];var a=i.props,o=a.validateFirst,l=void 0!==o&&o,c=a.messageVariables,d=(e||{}).triggerName,f=i.getRules();d&&(f=f.filter((function(e){var t=e.validateTrigger;return!t||Z(t).includes(d)})));var v=function(e,t,n,r,i,a){var o,u=e.join("."),l=n.map((function(e,t){var n=e.validator,r=(0,s.Z)((0,s.Z)({},e),{},{ruleIndex:t});return n&&(r.validator=function(e,t,r){var i=!1,a=n(e,t,(function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];Promise.resolve().then((function(){(0,h.ZP)(!i,"Your validator function has already return a promise. `callback` will be ignored."),i||r.apply(void 0,t)}))}));i=a&&"function"==typeof a.then&&"function"==typeof a.catch,(0,h.ZP)(i,"`callback` is deprecated. Please return a promise instead."),i&&a.then((function(){r()})).catch((function(e){r(e||" ")}))}),r})).sort((function(e,t){var n=e.warningOnly,r=e.ruleIndex,i=t.warningOnly,a=t.ruleIndex;return!!n==!!i?r-a:n?1:-1}));if(!0===i)o=new Promise(function(){var e=(0,b.Z)((0,E.Z)().mark((function e(n,i){var o,s,c;return(0,E.Z)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:o=0;case 1:if(!(o<l.length)){e.next=12;break}return s=l[o],e.next=5,j(u,t,s,r,a);case 5:if(!(c=e.sent).length){e.next=9;break}return i([{errors:c,rule:s}]),e.abrupt("return");case 9:o+=1,e.next=1;break;case 12:n([]);case 13:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}());else{var c=l.map((function(e){return j(u,t,e,r,a).then((function(t){return{errors:t,rule:e}}))}));o=(i?function(e){return q.apply(this,arguments)}(c):function(e){return K.apply(this,arguments)}(c)).then((function(e){return Promise.reject(e)}))}return o.catch((function(e){return e})),o}(t,n,f,e,l,c);return v.catch((function(e){return e})).then((function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:G;if(i.validatePromise===r){i.validatePromise=null;var t=[],n=[];e.forEach((function(e){var r=e.rule.warningOnly,i=e.errors,a=void 0===i?G:i;r?n.push.apply(n,(0,u.Z)(a)):t.push.apply(t,(0,u.Z)(a))})),i.errors=t,i.warnings=n,i.triggerMetaEvent(),i.reRender()}})),v}));return i.validatePromise=r,i.dirty=!0,i.errors=G,i.warnings=G,i.triggerMetaEvent(),i.reRender(),r},i.isFieldValidating=function(){return!!i.validatePromise},i.isFieldTouched=function(){return i.touched},i.isFieldDirty=function(){return!(!i.dirty&&void 0===i.props.initialValue)||void 0!==(0,i.props.fieldContext.getInternalHooks(p).getInitialValue)(i.getNamePath())},i.getErrors=function(){return i.errors},i.getWarnings=function(){return i.warnings},i.isListField=function(){return i.props.isListField},i.isList=function(){return i.props.isList},i.isPreserve=function(){return i.props.preserve},i.getMeta=function(){return i.prevValidating=i.isFieldValidating(),{touched:i.isFieldTouched(),validating:i.prevValidating,errors:i.errors,warnings:i.warnings,name:i.getNamePath()}},i.getOnlyChild=function(e){if("function"==typeof e){var t=i.getMeta();return(0,s.Z)((0,s.Z)({},i.getOnlyChild(e(i.getControlled(),t,i.props.fieldContext))),{},{isFunction:!0})}var n=(0,m.Z)(e);return 1===n.length&&r.isValidElement(n[0])?{child:n[0],isFunction:!1}:{child:n,isFunction:!1}},i.getValue=function(e){var t=i.props.fieldContext.getFieldsValue,n=i.getNamePath();return I(e||t(!0),n)},i.getControlled=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=i.props,n=t.trigger,r=t.validateTrigger,a=t.getValueFromEvent,u=t.normalize,l=t.valuePropName,c=t.getValueProps,d=t.fieldContext,f=void 0!==r?r:d.validateTrigger,v=i.getNamePath(),m=d.getInternalHooks,h=d.getFieldsValue,g=m(p),y=g.dispatch,E=i.getValue(),b=c||function(e){return(0,o.Z)({},l,e)},k=e[n],F=(0,s.Z)((0,s.Z)({},e),b(E));F[n]=function(){var e;i.touched=!0,i.dirty=!0,i.triggerMetaEvent();for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];e=a?a.apply(void 0,n):_.apply(void 0,[l].concat(n)),u&&(e=u(e,E,h(!0))),y({type:"updateValue",namePath:v,value:e}),k&&k.apply(void 0,n)};var N=Z(f||[]);return N.forEach((function(e){var t=F[e];F[e]=function(){t&&t.apply(void 0,arguments);var n=i.props.rules;n&&n.length&&y({type:"validateField",namePath:v,triggerName:e})}})),F},e.fieldContext&&(0,(0,e.fieldContext.getInternalHooks)(p).initEntityValue)((0,d.Z)(i)),i}return(0,c.Z)(n,[{key:"componentDidMount",value:function(){var e=this.props,t=e.shouldUpdate,n=e.fieldContext;if(this.mounted=!0,n){var r=(0,n.getInternalHooks)(p).registerField;this.cancelRegisterFunc=r(this)}!0===t&&this.reRender()}},{key:"componentWillUnmount",value:function(){this.cancelRegister(),this.triggerMetaEvent(!0),this.mounted=!1}},{key:"reRender",value:function(){this.mounted&&this.forceUpdate()}},{key:"render",value:function(){var e,t=this.state.resetCount,n=this.props.children,i=this.getOnlyChild(n),a=i.child;return i.isFunction?e=a:r.isValidElement(a)?e=r.cloneElement(a,this.getControlled(a.props)):((0,h.ZP)(!a,"`children` of Field is not validate ReactElement."),e=a),r.createElement(r.Fragment,{key:t},e)}}]),n}(r.Component);X.contextType=y,X.defaultProps={trigger:"onChange",valuePropName:"value"};const Y=function(e){var t=e.name,n=(0,a.Z)(e,z),o=r.useContext(y),s=void 0!==t?V(t):void 0,u="keep";return n.isListField||(u="_".concat((s||[]).join("_"))),r.createElement(X,(0,i.Z)({key:u,name:s},n,{fieldContext:o}))},J=r.createContext(null),Q=function(e){var t=e.name,n=e.initialValue,i=e.children,a=e.rules,o=e.validateTrigger,l=r.useContext(y),c=r.useRef({keys:[],id:0}).current,d=r.useMemo((function(){var e=V(l.prefixName)||[];return[].concat((0,u.Z)(e),(0,u.Z)(V(t)))}),[l.prefixName,t]),f=r.useMemo((function(){return(0,s.Z)((0,s.Z)({},l),{},{prefixName:d})}),[l,d]),v=r.useMemo((function(){return{getKey:function(e){var t=d.length,n=e[t];return[c.keys[n],e.slice(t+1)]}}}),[d]);return"function"!=typeof i?((0,h.ZP)(!1,"Form.List only accepts function as children."),null):r.createElement(J.Provider,{value:v},r.createElement(y.Provider,{value:f},r.createElement(Y,{name:[],shouldUpdate:function(e,t,n){return"internal"!==n.source&&e!==t},rules:a,validateTrigger:o,initialValue:n,isList:!0},(function(e,t){var n=e.value,r=void 0===n?[]:n,a=e.onChange,o=l.getFieldValue,s=function(){return o(d||[])||[]},f={add:function(e,t){var n=s();t>=0&&t<=n.length?(c.keys=[].concat((0,u.Z)(c.keys.slice(0,t)),[c.id],(0,u.Z)(c.keys.slice(t))),a([].concat((0,u.Z)(n.slice(0,t)),[e],(0,u.Z)(n.slice(t))))):(c.keys=[].concat((0,u.Z)(c.keys),[c.id]),a([].concat((0,u.Z)(n),[e]))),c.id+=1},remove:function(e){var t=s(),n=new Set(Array.isArray(e)?e:[e]);n.size<=0||(c.keys=c.keys.filter((function(e,t){return!n.has(t)})),a(t.filter((function(e,t){return!n.has(t)}))))},move:function(e,t){if(e!==t){var n=s();e<0||e>=n.length||t<0||t>=n.length||(c.keys=D(c.keys,e,t),a(D(n,e,t)))}}},v=r||[];return Array.isArray(v)||(v=[]),i(v.map((function(e,t){var n=c.keys[t];return void 0===n&&(c.keys[t]=c.id,n=c.keys[t],c.id+=1),{name:t,key:n,isListField:!0}})),f,t)}))))};var ee=n(29439),te="__@field_split__";function ne(e){return e.map((function(e){return"".concat((0,C.Z)(e),":").concat(e)})).join(te)}const re=function(){function e(){(0,l.Z)(this,e),this.kvs=new Map}return(0,c.Z)(e,[{key:"set",value:function(e,t){this.kvs.set(ne(e),t)}},{key:"get",value:function(e){return this.kvs.get(ne(e))}},{key:"update",value:function(e,t){var n=t(this.get(e));n?this.set(e,n):this.delete(e)}},{key:"delete",value:function(e){this.kvs.delete(ne(e))}},{key:"map",value:function(e){return(0,u.Z)(this.kvs.entries()).map((function(t){var n=(0,ee.Z)(t,2),r=n[0],i=n[1],a=r.split(te);return e({key:a.map((function(e){var t=e.match(/^([^:]*):(.*)$/),n=(0,ee.Z)(t,3),r=n[1],i=n[2];return"number"===r?Number(i):i})),value:i})}))}},{key:"toJSON",value:function(){var e={};return this.map((function(t){var n=t.key,r=t.value;return e[n.join(".")]=r,null})),e}}]),e}();var ie=["name","errors"],ae=(0,c.Z)((function e(t){var n=this;(0,l.Z)(this,e),this.formHooked=!1,this.forceRootUpdate=void 0,this.subscribable=!0,this.store={},this.fieldEntities=[],this.initialValues={},this.callbacks={},this.validateMessages=null,this.preserve=null,this.lastValidatePromise=null,this.getForm=function(){return{getFieldValue:n.getFieldValue,getFieldsValue:n.getFieldsValue,getFieldError:n.getFieldError,getFieldWarning:n.getFieldWarning,getFieldsError:n.getFieldsError,isFieldsTouched:n.isFieldsTouched,isFieldTouched:n.isFieldTouched,isFieldValidating:n.isFieldValidating,isFieldsValidating:n.isFieldsValidating,resetFields:n.resetFields,setFields:n.setFields,setFieldsValue:n.setFieldsValue,validateFields:n.validateFields,submit:n.submit,_init:!0,getInternalHooks:n.getInternalHooks}},this.getInternalHooks=function(e){return e===p?(n.formHooked=!0,{dispatch:n.dispatch,initEntityValue:n.initEntityValue,registerField:n.registerField,useSubscribe:n.useSubscribe,setInitialValues:n.setInitialValues,destroyForm:n.destroyForm,setCallbacks:n.setCallbacks,setValidateMessages:n.setValidateMessages,getFields:n.getFields,setPreserve:n.setPreserve,getInitialValue:n.getInitialValue,registerWatch:n.registerWatch}):((0,h.ZP)(!1,"`getInternalHooks` is internal usage. Should not call directly."),null)},this.useSubscribe=function(e){n.subscribable=e},this.prevWithoutPreserves=null,this.setInitialValues=function(e,t){if(n.initialValues=e||{},t){var r,i=L({},e,n.store);null===(r=n.prevWithoutPreserves)||void 0===r||r.map((function(t){var n=t.key;i=M(i,n,I(e,n))})),n.prevWithoutPreserves=null,n.updateStore(i)}},this.destroyForm=function(){var e=new re;n.getFieldEntities(!0).forEach((function(t){n.isMergedPreserve(t.isPreserve())||e.set(t.getNamePath(),!0)})),n.prevWithoutPreserves=e},this.getInitialValue=function(e){var t=I(n.initialValues,e);return e.length?S(t):t},this.setCallbacks=function(e){n.callbacks=e},this.setValidateMessages=function(e){n.validateMessages=e},this.setPreserve=function(e){n.preserve=e},this.watchList=[],this.registerWatch=function(e){return n.watchList.push(e),function(){n.watchList=n.watchList.filter((function(t){return t!==e}))}},this.notifyWatch=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];if(n.watchList.length){var t=n.getFieldsValue();n.watchList.forEach((function(n){n(t,e)}))}},this.timeoutId=null,this.warningUnhooked=function(){},this.updateStore=function(e){n.store=e},this.getFieldEntities=function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return e?n.fieldEntities.filter((function(e){return e.getNamePath().length})):n.fieldEntities},this.getFieldsMap=function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=new re;return n.getFieldEntities(e).forEach((function(e){var n=e.getNamePath();t.set(n,e)})),t},this.getFieldEntitiesForNamePathList=function(e){if(!e)return n.getFieldEntities(!0);var t=n.getFieldsMap(!0);return e.map((function(e){var n=V(e);return t.get(n)||{INVALIDATE_NAME_PATH:V(e)}}))},this.getFieldsValue=function(e,t){if(n.warningUnhooked(),!0===e&&!t)return n.store;var r=n.getFieldEntitiesForNamePathList(Array.isArray(e)?e:null),i=[];return r.forEach((function(n){var r,a="INVALIDATE_NAME_PATH"in n?n.INVALIDATE_NAME_PATH:n.getNamePath();if(e||!(null===(r=n.isListField)||void 0===r?void 0:r.call(n)))if(t){var o="getMeta"in n?n.getMeta():null;t(o)&&i.push(a)}else i.push(a)})),x(n.store,i.map(V))},this.getFieldValue=function(e){n.warningUnhooked();var t=V(e);return I(n.store,t)},this.getFieldsError=function(e){return n.warningUnhooked(),n.getFieldEntitiesForNamePathList(e).map((function(t,n){return t&&!("INVALIDATE_NAME_PATH"in t)?{name:t.getNamePath(),errors:t.getErrors(),warnings:t.getWarnings()}:{name:V(e[n]),errors:[],warnings:[]}}))},this.getFieldError=function(e){n.warningUnhooked();var t=V(e);return n.getFieldsError([t])[0].errors},this.getFieldWarning=function(e){n.warningUnhooked();var t=V(e);return n.getFieldsError([t])[0].warnings},this.isFieldsTouched=function(){n.warningUnhooked();for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];var i,a=t[0],o=t[1],s=!1;0===t.length?i=null:1===t.length?Array.isArray(a)?(i=a.map(V),s=!1):(i=null,s=a):(i=a.map(V),s=o);var l=n.getFieldEntities(!0),c=function(e){return e.isFieldTouched()};if(!i)return s?l.every(c):l.some(c);var d=new re;i.forEach((function(e){d.set(e,[])})),l.forEach((function(e){var t=e.getNamePath();i.forEach((function(n){n.every((function(e,n){return t[n]===e}))&&d.update(n,(function(t){return[].concat((0,u.Z)(t),[e])}))}))}));var f=function(e){return e.some(c)},v=d.map((function(e){return e.value}));return s?v.every(f):v.some(f)},this.isFieldTouched=function(e){return n.warningUnhooked(),n.isFieldsTouched([e])},this.isFieldsValidating=function(e){n.warningUnhooked();var t=n.getFieldEntities();if(!e)return t.some((function(e){return e.isFieldValidating()}));var r=e.map(V);return t.some((function(e){var t=e.getNamePath();return R(r,t)&&e.isFieldValidating()}))},this.isFieldValidating=function(e){return n.warningUnhooked(),n.isFieldsValidating([e])},this.resetWithFieldInitialValue=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=new re,r=n.getFieldEntities(!0);r.forEach((function(e){var n=e.props.initialValue,r=e.getNamePath();if(void 0!==n){var i=t.get(r)||new Set;i.add({entity:e,value:n}),t.set(r,i)}}));var i,a=function(r){r.forEach((function(r){if(void 0!==r.props.initialValue){var i=r.getNamePath();if(void 0!==n.getInitialValue(i))(0,h.ZP)(!1,"Form already set 'initialValues' with path '".concat(i.join("."),"'. Field can not overwrite it."));else{var a=t.get(i);if(a&&a.size>1)(0,h.ZP)(!1,"Multiple Field with path '".concat(i.join("."),"' set 'initialValue'. Can not decide which one to pick."));else if(a){var o=n.getFieldValue(i);e.skipExist&&void 0!==o||n.updateStore(M(n.store,i,(0,u.Z)(a)[0].value))}}}}))};e.entities?i=e.entities:e.namePathList?(i=[],e.namePathList.forEach((function(e){var n,r=t.get(e);r&&(n=i).push.apply(n,(0,u.Z)((0,u.Z)(r).map((function(e){return e.entity}))))}))):i=r,a(i)},this.resetFields=function(e){n.warningUnhooked();var t=n.store;if(!e)return n.updateStore(L({},n.initialValues)),n.resetWithFieldInitialValue(),n.notifyObservers(t,null,{type:"reset"}),void n.notifyWatch();var r=e.map(V);r.forEach((function(e){var t=n.getInitialValue(e);n.updateStore(M(n.store,e,t))})),n.resetWithFieldInitialValue({namePathList:r}),n.notifyObservers(t,r,{type:"reset"}),n.notifyWatch(r)},this.setFields=function(e){n.warningUnhooked();var t=n.store,r=[];e.forEach((function(e){var i=e.name,o=(e.errors,(0,a.Z)(e,ie)),s=V(i);r.push(s),"value"in o&&n.updateStore(M(n.store,s,o.value)),n.notifyObservers(t,[s],{type:"setField",data:e})})),n.notifyWatch(r)},this.getFields=function(){return n.getFieldEntities(!0).map((function(e){var t=e.getNamePath(),r=e.getMeta(),i=(0,s.Z)((0,s.Z)({},r),{},{name:t,value:n.getFieldValue(t)});return Object.defineProperty(i,"originRCField",{value:!0}),i}))},this.initEntityValue=function(e){var t=e.props.initialValue;if(void 0!==t){var r=e.getNamePath();void 0===I(n.store,r)&&n.updateStore(M(n.store,r,t))}},this.isMergedPreserve=function(e){var t=void 0!==e?e:n.preserve;return null==t||t},this.registerField=function(e){n.fieldEntities.push(e);var t=e.getNamePath();if(n.notifyWatch([t]),void 0!==e.props.initialValue){var r=n.store;n.resetWithFieldInitialValue({entities:[e],skipExist:!0}),n.notifyObservers(r,[e.getNamePath()],{type:"valueUpdate",source:"internal"})}return function(r,i){var a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[];if(n.fieldEntities=n.fieldEntities.filter((function(t){return t!==e})),!n.isMergedPreserve(i)&&(!r||a.length>1)){var o=r?void 0:n.getInitialValue(t);if(t.length&&n.getFieldValue(t)!==o&&n.fieldEntities.every((function(e){return!O(e.getNamePath(),t)}))){var s=n.store;n.updateStore(M(s,t,o,!0)),n.notifyObservers(s,[t],{type:"remove"}),n.triggerDependenciesUpdate(s,t)}}n.notifyWatch([t])}},this.dispatch=function(e){switch(e.type){case"updateValue":var t=e.namePath,r=e.value;n.updateValue(t,r);break;case"validateField":var i=e.namePath,a=e.triggerName;n.validateFields([i],{triggerName:a})}},this.notifyObservers=function(e,t,r){if(n.subscribable){var i=(0,s.Z)((0,s.Z)({},r),{},{store:n.getFieldsValue(!0)});n.getFieldEntities().forEach((function(n){(0,n.onStoreChange)(e,t,i)}))}else n.forceRootUpdate()},this.triggerDependenciesUpdate=function(e,t){var r=n.getDependencyChildrenFields(t);return r.length&&n.validateFields(r),n.notifyObservers(e,r,{type:"dependenciesUpdate",relatedFields:[t].concat((0,u.Z)(r))}),r},this.updateValue=function(e,t){var r=V(e),i=n.store;n.updateStore(M(n.store,r,t)),n.notifyObservers(i,[r],{type:"valueUpdate",source:"internal"}),n.notifyWatch([r]);var a=n.triggerDependenciesUpdate(i,r),o=n.callbacks.onValuesChange;o&&o(x(n.store,[r]),n.getFieldsValue()),n.triggerOnFieldsChange([r].concat((0,u.Z)(a)))},this.setFieldsValue=function(e){n.warningUnhooked();var t=n.store;if(e){var r=L(n.store,e);n.updateStore(r)}n.notifyObservers(t,null,{type:"valueUpdate",source:"external"}),n.notifyWatch()},this.getDependencyChildrenFields=function(e){var t=new Set,r=[],i=new re;return n.getFieldEntities().forEach((function(e){(e.props.dependencies||[]).forEach((function(t){var n=V(t);i.update(n,(function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:new Set;return t.add(e),t}))}))})),function e(n){(i.get(n)||new Set).forEach((function(n){if(!t.has(n)){t.add(n);var i=n.getNamePath();n.isFieldDirty()&&i.length&&(r.push(i),e(i))}}))}(e),r},this.triggerOnFieldsChange=function(e,t){var r=n.callbacks.onFieldsChange;if(r){var i=n.getFields();if(t){var a=new re;t.forEach((function(e){var t=e.name,n=e.errors;a.set(t,n)})),i.forEach((function(e){e.errors=a.get(e.name)||e.errors}))}r(i.filter((function(t){var n=t.name;return R(e,n)})),i)}},this.validateFields=function(e,t){n.warningUnhooked();var r=!!e,i=r?e.map(V):[],a=[];n.getFieldEntities(!0).forEach((function(o){if(r||i.push(o.getNamePath()),(null==t?void 0:t.recursive)&&r){var l=o.getNamePath();l.every((function(t,n){return e[n]===t||void 0===e[n]}))&&i.push(l)}if(o.props.rules&&o.props.rules.length){var c=o.getNamePath();if(!r||R(i,c)){var d=o.validateRules((0,s.Z)({validateMessages:(0,s.Z)((0,s.Z)({},N),n.validateMessages)},t));a.push(d.then((function(){return{name:c,errors:[],warnings:[]}})).catch((function(e){var t=[],n=[];return e.forEach((function(e){var r=e.rule.warningOnly,i=e.errors;r?n.push.apply(n,(0,u.Z)(i)):t.push.apply(t,(0,u.Z)(i))})),t.length?Promise.reject({name:c,errors:t,warnings:n}):{name:c,errors:t,warnings:n}})))}}}));var o=function(e){var t=!1,n=e.length,r=[];return e.length?new Promise((function(i,a){e.forEach((function(e,o){e.catch((function(e){return t=!0,e})).then((function(e){n-=1,r[o]=e,n>0||(t&&a(r),i(r))}))}))})):Promise.resolve([])}(a);n.lastValidatePromise=o,o.catch((function(e){return e})).then((function(e){var t=e.map((function(e){return e.name}));n.notifyObservers(n.store,t,{type:"validateFinish"}),n.triggerOnFieldsChange(t,e)}));var l=o.then((function(){return n.lastValidatePromise===o?Promise.resolve(n.getFieldsValue(i)):Promise.reject([])})).catch((function(e){var t=e.filter((function(e){return e&&e.errors.length}));return Promise.reject({values:n.getFieldsValue(i),errorFields:t,outOfDate:n.lastValidatePromise!==o})}));return l.catch((function(e){return e})),l},this.submit=function(){n.warningUnhooked(),n.validateFields().then((function(e){var t=n.callbacks.onFinish;if(t)try{t(e)}catch(e){console.error(e)}})).catch((function(e){var t=n.callbacks.onFinishFailed;t&&t(e)}))},this.forceRootUpdate=t}));const oe=function(e){var t=r.useRef(),n=r.useState({}),i=(0,ee.Z)(n,2)[1];if(!t.current)if(e)t.current=e;else{var a=new ae((function(){i({})}));t.current=a.getForm()}return[t.current]};var se=r.createContext({triggerFormChange:function(){},triggerFormFinish:function(){},registerForm:function(){},unregisterForm:function(){}}),ue=function(e){var t=e.validateMessages,n=e.onFormChange,i=e.onFormFinish,a=e.children,u=r.useContext(se),l=r.useRef({});return r.createElement(se.Provider,{value:(0,s.Z)((0,s.Z)({},u),{},{validateMessages:(0,s.Z)((0,s.Z)({},u.validateMessages),t),triggerFormChange:function(e,t){n&&n(e,{changedFields:t,forms:l.current}),u.triggerFormChange(e,t)},triggerFormFinish:function(e,t){i&&i(e,{values:t,forms:l.current}),u.triggerFormFinish(e,t)},registerForm:function(e,t){e&&(l.current=(0,s.Z)((0,s.Z)({},l.current),{},(0,o.Z)({},e,t))),u.registerForm(e,t)},unregisterForm:function(e){var t=(0,s.Z)({},l.current);delete t[e],l.current=t,u.unregisterForm(e)}})},a)};const le=se;var ce=["name","initialValues","fields","form","preserve","children","component","validateMessages","validateTrigger","onValuesChange","onFieldsChange","onFinish","onFinishFailed"];const de=function(e,t){var n=e.name,o=e.initialValues,l=e.fields,c=e.form,d=e.preserve,f=e.children,v=e.component,m=void 0===v?"form":v,h=e.validateMessages,g=e.validateTrigger,Z=void 0===g?"onChange":g,E=e.onValuesChange,b=e.onFieldsChange,k=e.onFinish,F=e.onFinishFailed,N=(0,a.Z)(e,ce),w=r.useContext(le),P=oe(c),S=(0,ee.Z)(P,1)[0],V=S.getInternalHooks(p),I=V.useSubscribe,M=V.setInitialValues,x=V.setCallbacks,R=V.setValidateMessages,T=V.setPreserve,A=V.destroyForm;r.useImperativeHandle(t,(function(){return S})),r.useEffect((function(){return w.registerForm(n,S),function(){w.unregisterForm(n)}}),[w,S,n]),R((0,s.Z)((0,s.Z)({},w.validateMessages),h)),x({onValuesChange:E,onFieldsChange:function(e){if(w.triggerFormChange(n,e),b){for(var t=arguments.length,r=new Array(t>1?t-1:0),i=1;i<t;i++)r[i-1]=arguments[i];b.apply(void 0,[e].concat(r))}},onFinish:function(e){w.triggerFormFinish(n,e),k&&k(e)},onFinishFailed:F}),T(d);var L,O=r.useRef(null);M(o,!O.current),O.current||(O.current=!0),r.useEffect((function(){return A}),[]);var _="function"==typeof f;L=_?f(S.getFieldsValue(!0),S):f,I(!_);var D=r.useRef();r.useEffect((function(){(function(e,t){if(e===t)return!0;if(!e&&t||e&&!t)return!1;if(!e||!t||"object"!==(0,C.Z)(e)||"object"!==(0,C.Z)(t))return!1;var n=Object.keys(e),r=Object.keys(t),i=new Set([].concat((0,u.Z)(n),(0,u.Z)(r)));return(0,u.Z)(i).every((function(n){var r=e[n],i=t[n];return"function"==typeof r&&"function"==typeof i||r===i}))})(D.current||[],l||[])||S.setFields(l||[]),D.current=l}),[l,S]);var $=r.useMemo((function(){return(0,s.Z)((0,s.Z)({},S),{},{validateTrigger:Z})}),[S,Z]),W=r.createElement(y.Provider,{value:$},L);return!1===m?W:r.createElement(m,(0,i.Z)({},N,{onSubmit:function(e){e.preventDefault(),e.stopPropagation(),S.submit()},onReset:function(e){var t;e.preventDefault(),S.resetFields(),null===(t=N.onReset)||void 0===t||t.call(N,e)}}),W)};function fe(e){try{return JSON.stringify(e)}catch(e){return Math.random()}}const ve=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=arguments.length>1?arguments[1]:void 0,n=(0,r.useState)(),i=(0,ee.Z)(n,2),a=i[0],o=i[1],s=(0,r.useMemo)((function(){return fe(a)}),[a]),u=(0,r.useRef)(s);u.current=s;var l=(0,r.useContext)(y),c=t||l,d=c&&c._init,f=V(e),v=(0,r.useRef)(f);return v.current=f,(0,r.useEffect)((function(){if(d){var e=c.getFieldsValue,t=(0,(0,c.getInternalHooks)(p).registerWatch)((function(e){var t=I(e,v.current),n=fe(t);u.current!==n&&(u.current=n,o(t))})),n=I(e(),v.current);return o(n),t}}),[]),a};var me=r.forwardRef(de);me.FormProvider=ue,me.Field=Y,me.List=Q,me.useForm=oe,me.useWatch=ve;const he=me},3779:(e,t,n)=>{n.d(t,{Z:()=>A});var r=n(87462),i=n(4942),a=n(71002),o=n(29439),s=n(44925),u=n(67294),l=n(94184),c=n.n(l),d=n(15105),f=n(42550),v=n(15671),m=n(43144);function h(){return"function"==typeof BigInt}function p(e){var t=e.trim(),n=t.startsWith("-");n&&(t=t.slice(1)),(t=t.replace(/(\.\d*[^0])0*$/,"$1").replace(/\.0*$/,"").replace(/^0+/,"")).startsWith(".")&&(t="0".concat(t));var r=t||"0",i=r.split("."),a=i[0]||"0",o=i[1]||"0";"0"===a&&"0"===o&&(n=!1);var s=n?"-":"";return{negative:n,negativeStr:s,trimStr:r,integerStr:a,decimalStr:o,fullStr:"".concat(s).concat(r)}}function g(e){var t=String(e);return!Number.isNaN(Number(t))&&t.includes("e")}function y(e){var t=String(e);if(g(e)){var n=Number(t.slice(t.indexOf("e-")+2)),r=t.match(/\.(\d+)/);return(null==r?void 0:r[1])&&(n+=r[1].length),n}return t.includes(".")&&E(t)?t.length-t.indexOf(".")-1:0}function Z(e){var t=String(e);if(g(e)){if(e>Number.MAX_SAFE_INTEGER)return String(h()?BigInt(e).toString():Number.MAX_SAFE_INTEGER);if(e<Number.MIN_SAFE_INTEGER)return String(h()?BigInt(e).toString():Number.MIN_SAFE_INTEGER);t=e.toFixed(y(t))}return p(t).fullStr}function E(e){return"number"==typeof e?!Number.isNaN(e):!!e&&(/^\s*-?\d+(\.\d+)?\s*$/.test(e)||/^\s*-?\d+\.\s*$/.test(e)||/^\s*-?\.\d+\s*$/.test(e))}var b=function(){function e(t){(0,v.Z)(this,e),this.origin="",this.number=void 0,this.empty=void 0,(t||0===t)&&String(t).trim()?(this.origin=String(t),this.number=Number(t)):this.empty=!0}return(0,m.Z)(e,[{key:"negate",value:function(){return new e(-this.toNumber())}},{key:"add",value:function(t){if(this.isInvalidate())return new e(t);var n=Number(t);if(Number.isNaN(n))return this;var r=this.number+n;if(r>Number.MAX_SAFE_INTEGER)return new e(Number.MAX_SAFE_INTEGER);if(r<Number.MIN_SAFE_INTEGER)return new e(Number.MIN_SAFE_INTEGER);var i=Math.max(y(this.number),y(n));return new e(r.toFixed(i))}},{key:"isEmpty",value:function(){return this.empty}},{key:"isNaN",value:function(){return Number.isNaN(this.number)}},{key:"isInvalidate",value:function(){return this.isEmpty()||this.isNaN()}},{key:"equals",value:function(e){return this.toNumber()===(null==e?void 0:e.toNumber())}},{key:"lessEquals",value:function(e){return this.add(e.negate().toString()).toNumber()<=0}},{key:"toNumber",value:function(){return this.number}},{key:"toString",value:function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];return e?this.isInvalidate()?"":Z(this.number):this.origin}}]),e}(),k=function(){function e(t){if((0,v.Z)(this,e),this.origin="",this.negative=void 0,this.integer=void 0,this.decimal=void 0,this.decimalLen=void 0,this.empty=void 0,this.nan=void 0,(t||0===t)&&String(t).trim())if(this.origin=String(t),"-"!==t){var n=t;if(g(n)&&(n=Number(n)),E(n="string"==typeof n?n:Z(n))){var r=p(n);this.negative=r.negative;var i=r.trimStr.split(".");this.integer=BigInt(i[0]);var a=i[1]||"0";this.decimal=BigInt(a),this.decimalLen=a.length}else this.nan=!0}else this.nan=!0;else this.empty=!0}return(0,m.Z)(e,[{key:"getMark",value:function(){return this.negative?"-":""}},{key:"getIntegerStr",value:function(){return this.integer.toString()}},{key:"getDecimalStr",value:function(){return this.decimal.toString().padStart(this.decimalLen,"0")}},{key:"alignDecimal",value:function(e){var t="".concat(this.getMark()).concat(this.getIntegerStr()).concat(this.getDecimalStr().padEnd(e,"0"));return BigInt(t)}},{key:"negate",value:function(){var t=new e(this.toString());return t.negative=!t.negative,t}},{key:"add",value:function(t){if(this.isInvalidate())return new e(t);var n=new e(t);if(n.isInvalidate())return this;var r=Math.max(this.getDecimalStr().length,n.getDecimalStr().length),i=p((this.alignDecimal(r)+n.alignDecimal(r)).toString()),a=i.negativeStr,o=i.trimStr,s="".concat(a).concat(o.padStart(r+1,"0"));return new e("".concat(s.slice(0,-r),".").concat(s.slice(-r)))}},{key:"isEmpty",value:function(){return this.empty}},{key:"isNaN",value:function(){return this.nan}},{key:"isInvalidate",value:function(){return this.isEmpty()||this.isNaN()}},{key:"equals",value:function(e){return this.toString()===(null==e?void 0:e.toString())}},{key:"lessEquals",value:function(e){return this.add(e.negate().toString()).toNumber()<=0}},{key:"toNumber",value:function(){return this.isNaN()?NaN:Number(this.toString())}},{key:"toString",value:function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];return e?this.isInvalidate()?"":p("".concat(this.getMark()).concat(this.getIntegerStr(),".").concat(this.getDecimalStr())).fullStr:this.origin}}]),e}();function F(e){return h()?new k(e):new b(e)}function N(e,t,n){if(""===e)return"";var r=p(e),i=r.negativeStr,a=r.integerStr,o=r.decimalStr,s="".concat(t).concat(o),u="".concat(i).concat(a);if(n>=0){var l=Number(o[n]);return l>=5?N(F(e).add("".concat(i,"0.").concat("0".repeat(n)).concat(10-l)).toString(),t,n):0===n?u:"".concat(u).concat(t).concat(o.padEnd(n,"0").slice(0,n))}return".0"===s?u:"".concat(u).concat(s)}var C=n(31131);function w(e){var t=e.prefixCls,n=e.upNode,a=e.downNode,o=e.upDisabled,s=e.downDisabled,l=e.onStep,d=u.useRef(),f=u.useRef();f.current=l;var v=function(e,t){e.preventDefault(),f.current(t),d.current=setTimeout((function e(){f.current(t),d.current=setTimeout(e,200)}),600)},m=function(){clearTimeout(d.current)};if(u.useEffect((function(){return m}),[]),(0,C.Z)())return null;var h="".concat(t,"-handler"),p=c()(h,"".concat(h,"-up"),(0,i.Z)({},"".concat(h,"-up-disabled"),o)),g=c()(h,"".concat(h,"-down"),(0,i.Z)({},"".concat(h,"-down-disabled"),s)),y={unselectable:"on",role:"button",onMouseUp:m,onMouseLeave:m};return u.createElement("div",{className:"".concat(h,"-wrap")},u.createElement("span",(0,r.Z)({},y,{onMouseDown:function(e){v(e,!0)},"aria-label":"Increase Value","aria-disabled":o,className:p}),n||u.createElement("span",{unselectable:"on",className:"".concat(t,"-handler-up-inner")})),u.createElement("span",(0,r.Z)({},y,{onMouseDown:function(e){v(e,!1)},"aria-label":"Decrease Value","aria-disabled":s,className:g}),a||u.createElement("span",{unselectable:"on",className:"".concat(t,"-handler-down-inner")})))}var P=n(80334),S=(0,n(98924).Z)()?u.useLayoutEffect:u.useEffect;function V(e,t){var n=u.useRef(!1);S((function(){if(n.current)return e();n.current=!0}),t)}var I=n(75164),M=["prefixCls","className","style","min","max","step","defaultValue","value","disabled","readOnly","upHandler","downHandler","keyboard","controls","stringMode","parser","formatter","precision","decimalSeparator","onChange","onInput","onPressEnter","onStep"],x=function(e,t){return e||t.isEmpty()?t.toString():t.toNumber()},R=function(e){var t=F(e);return t.isInvalidate()?null:t},T=u.forwardRef((function(e,t){var n,l=e.prefixCls,v=void 0===l?"rc-input-number":l,m=e.className,h=e.style,p=e.min,g=e.max,b=e.step,k=void 0===b?1:b,C=e.defaultValue,S=e.value,T=e.disabled,A=e.readOnly,L=e.upHandler,O=e.downHandler,_=e.keyboard,D=e.controls,$=void 0===D||D,W=e.stringMode,U=e.parser,j=e.formatter,H=e.precision,K=e.decimalSeparator,q=e.onChange,z=e.onInput,G=e.onPressEnter,B=e.onStep,X=(0,s.Z)(e,M),Y="".concat(v,"-input"),J=u.useRef(null),Q=u.useState(!1),ee=(0,o.Z)(Q,2),te=ee[0],ne=ee[1],re=u.useRef(!1),ie=u.useRef(!1),ae=u.useState((function(){return F(null!=S?S:C)})),oe=(0,o.Z)(ae,2),se=oe[0],ue=oe[1],le=u.useCallback((function(e,t){if(!t)return H>=0?H:Math.max(y(e),y(k))}),[H,k]),ce=u.useCallback((function(e){var t=String(e);if(U)return U(t);var n=t;return K&&(n=n.replace(K,".")),n.replace(/[^\w.-]+/g,"")}),[U,K]),de=u.useRef(""),fe=u.useCallback((function(e,t){if(j)return j(e,{userTyping:t,input:String(de.current)});var n="number"==typeof e?Z(e):e;if(!t){var r=le(n,t);E(n)&&(K||r>=0)&&(n=N(n,K||".",r))}return n}),[j,le,K]),ve=u.useState((function(){var e=null!=C?C:S;return se.isInvalidate()&&["string","number"].includes((0,a.Z)(e))?Number.isNaN(e)?"":e:fe(se.toString(),!1)})),me=(0,o.Z)(ve,2),he=me[0],pe=me[1];function ge(e,t){pe(fe(e.isInvalidate()?e.toString(!1):e.toString(!t),t))}de.current=he;var ye,Ze,Ee,be,ke,Fe=u.useMemo((function(){return R(g)}),[g]),Ne=u.useMemo((function(){return R(p)}),[p]),Ce=u.useMemo((function(){return!(!Fe||!se||se.isInvalidate())&&Fe.lessEquals(se)}),[Fe,se]),we=u.useMemo((function(){return!(!Ne||!se||se.isInvalidate())&&se.lessEquals(Ne)}),[Ne,se]),Pe=(ye=J.current,Ze=te,Ee=(0,u.useRef)(null),[function(){try{var e=ye.selectionStart,t=ye.selectionEnd,n=ye.value,r=n.substring(0,e),i=n.substring(t);Ee.current={start:e,end:t,value:n,beforeTxt:r,afterTxt:i}}catch(e){}},function(){if(ye&&Ee.current&&Ze)try{var e=ye.value,t=Ee.current,n=t.beforeTxt,r=t.afterTxt,i=t.start,a=e.length;if(e.endsWith(r))a=e.length-Ee.current.afterTxt.length;else if(e.startsWith(n))a=n.length;else{var o=n[i-1],s=e.indexOf(o,i-1);-1!==s&&(a=s+1)}ye.setSelectionRange(a,a)}catch(e){(0,P.ZP)(!1,"Something warning of cursor restore. Please fire issue about this: ".concat(e.message))}}]),Se=(0,o.Z)(Pe,2),Ve=Se[0],Ie=Se[1],Me=function(e){return Fe&&!e.lessEquals(Fe)?Fe:Ne&&!Ne.lessEquals(e)?Ne:null},xe=function(e){return!Me(e)},Re=function(e,t){var n=e,r=xe(n)||n.isEmpty();if(n.isEmpty()||t||(n=Me(n)||n,r=!0),!A&&!T&&r){var i=n.toString(),a=le(i,t);return a>=0&&(n=F(N(i,".",a))),n.equals(se)||(void 0===S&&ue(n),null==q||q(n.isEmpty()?null:x(W,n)),void 0===S&&ge(n,t)),n}return se},Te=(be=(0,u.useRef)(0),ke=function(){I.Z.cancel(be.current)},(0,u.useEffect)((function(){return ke}),[]),function(e){ke(),be.current=(0,I.Z)((function(){e()}))}),Ae=function e(t){if(Ve(),pe(t),!ie.current){var n=F(ce(t));n.isNaN()||Re(n,!0)}null==z||z(t),Te((function(){var n=t;U||(n=t.replace(/。/g,".")),n!==t&&e(n)}))},Le=function(e){var t;if(!(e&&Ce||!e&&we)){re.current=!1;var n=F(k);e||(n=n.negate());var r=(se||F(0)).add(n.toString()),i=Re(r,!1);null==B||B(x(W,i),{offset:k,type:e?"up":"down"}),null===(t=J.current)||void 0===t||t.focus()}},Oe=function(e){var t=F(ce(he)),n=t;n=t.isNaN()?se:Re(t,e),void 0!==S?ge(se,!1):n.isNaN()||ge(n,!1)};return V((function(){se.isInvalidate()||ge(se,!1)}),[H]),V((function(){var e=F(S);ue(e);var t=F(ce(he));e.equals(t)&&re.current&&!j||ge(e,re.current)}),[S]),V((function(){j&&Ie()}),[he]),u.createElement("div",{className:c()(v,m,(n={},(0,i.Z)(n,"".concat(v,"-focused"),te),(0,i.Z)(n,"".concat(v,"-disabled"),T),(0,i.Z)(n,"".concat(v,"-readonly"),A),(0,i.Z)(n,"".concat(v,"-not-a-number"),se.isNaN()),(0,i.Z)(n,"".concat(v,"-out-of-range"),!se.isInvalidate()&&!xe(se)),n)),style:h,onFocus:function(){ne(!0)},onBlur:function(){Oe(!1),ne(!1),re.current=!1},onKeyDown:function(e){var t=e.which;re.current=!0,t===d.Z.ENTER&&(ie.current||(re.current=!1),Oe(!1),null==G||G(e)),!1!==_&&!ie.current&&[d.Z.UP,d.Z.DOWN].includes(t)&&(Le(d.Z.UP===t),e.preventDefault())},onKeyUp:function(){re.current=!1},onCompositionStart:function(){ie.current=!0},onCompositionEnd:function(){ie.current=!1,Ae(J.current.value)}},$&&u.createElement(w,{prefixCls:v,upNode:L,downNode:O,upDisabled:Ce,downDisabled:we,onStep:Le}),u.createElement("div",{className:"".concat(Y,"-wrap")},u.createElement("input",(0,r.Z)({autoComplete:"off",role:"spinbutton","aria-valuemin":p,"aria-valuemax":g,"aria-valuenow":se.isInvalidate()?null:se.toString(),step:k},X,{ref:(0,f.sQ)(J,t),className:Y,value:he,onChange:function(e){Ae(e.target.value)},disabled:T,readOnly:A}))))}));T.displayName="InputNumber";const A=T},63441:(e,t,n)=>{n.d(t,{V:()=>se,Z:()=>ue});var r=n(4942),i=n(1413),a=n(29439),o=n(71002),s=n(67294),u=n(34203),l=n(42550),c=n(94184),d=n.n(c),f=n(98924);function v(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit".concat(e)]="webkit".concat(t),n["Moz".concat(e)]="moz".concat(t),n["ms".concat(e)]="MS".concat(t),n["O".concat(e)]="o".concat(t.toLowerCase()),n}var m,h,p,g=(m=(0,f.Z)(),h="undefined"!=typeof window?window:{},p={animationend:v("Animation","AnimationEnd"),transitionend:v("Transition","TransitionEnd")},m&&("AnimationEvent"in h||delete p.animationend.animation,"TransitionEvent"in h||delete p.transitionend.transition),p),y={};if((0,f.Z)()){var Z=document.createElement("div");y=Z.style}var E={};function b(e){if(E[e])return E[e];var t=g[e];if(t)for(var n=Object.keys(t),r=n.length,i=0;i<r;i+=1){var a=n[i];if(Object.prototype.hasOwnProperty.call(t,a)&&a in y)return E[e]=t[a],E[e]}return""}var k=b("animationend"),F=b("transitionend"),N=!(!k||!F),C=k||"animationend",w=F||"transitionend";function P(e,t){return e?"object"===(0,o.Z)(e)?e[t.replace(/-\w/g,(function(e){return e[1].toUpperCase()}))]:"".concat(e,"-").concat(t):null}var S="none",V="appear",I="enter",M="leave",x="none",R="prepare",T="start",A="active",L="end",O=n(30470),_=n(75164);const D=(0,f.Z)()?s.useLayoutEffect:s.useEffect;var $=[R,T,A,L];function W(e){return e===A||e===L}function U(e,t,n,o){var u=o.motionEnter,l=void 0===u||u,c=o.motionAppear,d=void 0===c||c,f=o.motionLeave,v=void 0===f||f,m=o.motionDeadline,h=o.motionLeaveImmediately,p=o.onAppearPrepare,g=o.onEnterPrepare,y=o.onLeavePrepare,Z=o.onAppearStart,E=o.onEnterStart,b=o.onLeaveStart,k=o.onAppearActive,F=o.onEnterActive,N=o.onLeaveActive,P=o.onAppearEnd,U=o.onEnterEnd,j=o.onLeaveEnd,H=o.onVisibleChanged,K=(0,O.Z)(),q=(0,a.Z)(K,2),z=q[0],G=q[1],B=(0,O.Z)(S),X=(0,a.Z)(B,2),Y=X[0],J=X[1],Q=(0,O.Z)(null),ee=(0,a.Z)(Q,2),te=ee[0],ne=ee[1],re=(0,s.useRef)(!1),ie=(0,s.useRef)(null);function ae(){return n()}var oe=(0,s.useRef)(!1);function se(e){var t=ae();if(!e||e.deadline||e.target===t){var n,r=oe.current;Y===V&&r?n=null==P?void 0:P(t,e):Y===I&&r?n=null==U?void 0:U(t,e):Y===M&&r&&(n=null==j?void 0:j(t,e)),Y!==S&&r&&!1!==n&&(J(S,!0),ne(null,!0))}}var ue=function(e){var t=(0,s.useRef)(),n=(0,s.useRef)(e);n.current=e;var r=s.useCallback((function(e){n.current(e)}),[]);function i(e){e&&(e.removeEventListener(w,r),e.removeEventListener(C,r))}return s.useEffect((function(){return function(){i(t.current)}}),[]),[function(e){t.current&&t.current!==e&&i(t.current),e&&e!==t.current&&(e.addEventListener(w,r),e.addEventListener(C,r),t.current=e)},i]}(se),le=(0,a.Z)(ue,1)[0],ce=s.useMemo((function(){var e,t,n;switch(Y){case V:return e={},(0,r.Z)(e,R,p),(0,r.Z)(e,T,Z),(0,r.Z)(e,A,k),e;case I:return t={},(0,r.Z)(t,R,g),(0,r.Z)(t,T,E),(0,r.Z)(t,A,F),t;case M:return n={},(0,r.Z)(n,R,y),(0,r.Z)(n,T,b),(0,r.Z)(n,A,N),n;default:return{}}}),[Y]),de=function(e,t){var n=(0,O.Z)(x),r=(0,a.Z)(n,2),i=r[0],o=r[1],u=function(){var e=s.useRef(null);function t(){_.Z.cancel(e.current)}return s.useEffect((function(){return function(){t()}}),[]),[function n(r){var i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:2;t();var a=(0,_.Z)((function(){i<=1?r({isCanceled:function(){return a!==e.current}}):n(r,i-1)}));e.current=a},t]}(),l=(0,a.Z)(u,2),c=l[0],d=l[1];return D((function(){if(i!==x&&i!==L){var e=$.indexOf(i),n=$[e+1],r=t(i);!1===r?o(n,!0):c((function(e){function t(){e.isCanceled()||o(n,!0)}!0===r?t():Promise.resolve(r).then(t)}))}}),[e,i]),s.useEffect((function(){return function(){d()}}),[]),[function(){o(R,!0)},i]}(Y,(function(e){if(e===R){var t=ce.prepare;return!!t&&t(ae())}var n;return me in ce&&ne((null===(n=ce[me])||void 0===n?void 0:n.call(ce,ae(),null))||null),me===A&&(le(ae()),m>0&&(clearTimeout(ie.current),ie.current=setTimeout((function(){se({deadline:!0})}),m))),!0})),fe=(0,a.Z)(de,2),ve=fe[0],me=fe[1],he=W(me);oe.current=he,D((function(){G(t);var n,r=re.current;re.current=!0,e&&(!r&&t&&d&&(n=V),r&&t&&l&&(n=I),(r&&!t&&v||!r&&h&&!t&&v)&&(n=M),n&&(J(n),ve()))}),[t]),(0,s.useEffect)((function(){(Y===V&&!d||Y===I&&!l||Y===M&&!v)&&J(S)}),[d,l,v]),(0,s.useEffect)((function(){return function(){re.current=!1,clearTimeout(ie.current)}}),[]),(0,s.useEffect)((function(){void 0!==z&&Y===S&&(null==H||H(z))}),[z,Y]);var pe=te;return ce.prepare&&me===T&&(pe=(0,i.Z)({transition:"none"},pe)),[Y,me,pe,null!=z?z:t]}var j=n(15671),H=n(43144),K=n(79340),q=n(98557);const z=function(e){(0,K.Z)(n,e);var t=(0,q.Z)(n);function n(){return(0,j.Z)(this,n),t.apply(this,arguments)}return(0,H.Z)(n,[{key:"render",value:function(){return this.props.children}}]),n}(s.Component),G=function(e){var t=e;function n(e){return!(!e.motionName||!t)}"object"===(0,o.Z)(e)&&(t=e.transitionSupport);var c=s.forwardRef((function(e,t){var o=e.visible,c=void 0===o||o,f=e.removeOnLeave,v=void 0===f||f,m=e.forceRender,h=e.children,p=e.motionName,g=e.leavedClassName,y=e.eventProps,Z=n(e),E=(0,s.useRef)(),b=(0,s.useRef)(),k=U(Z,c,(function(){try{return E.current instanceof HTMLElement?E.current:(0,u.Z)(b.current)}catch(e){return null}}),e),F=(0,a.Z)(k,4),N=F[0],C=F[1],w=F[2],V=F[3],I=s.useRef(V);V&&(I.current=!0);var M,x=s.useCallback((function(e){E.current=e,(0,l.mH)(t,e)}),[t]),A=(0,i.Z)((0,i.Z)({},y),{},{visible:c});if(h)if(N!==S&&n(e)){var L,O;C===R?O="prepare":W(C)?O="active":C===T&&(O="start"),M=h((0,i.Z)((0,i.Z)({},A),{},{className:d()(P(p,N),(L={},(0,r.Z)(L,P(p,"".concat(N,"-").concat(O)),O),(0,r.Z)(L,p,"string"==typeof p),L)),style:w}),x)}else M=V?h((0,i.Z)({},A),x):!v&&I.current?h((0,i.Z)((0,i.Z)({},A),{},{className:g}),x):m?h((0,i.Z)((0,i.Z)({},A),{},{style:{display:"none"}}),x):null;else M=null;return s.isValidElement(M)&&(0,l.Yr)(M)&&(M.ref||(M=s.cloneElement(M,{ref:x}))),s.createElement(z,{ref:b},M)}));return c.displayName="CSSMotion",c}(N);var B=n(87462),X=n(44925),Y="add",J="keep",Q="remove",ee="removed";function te(e){var t;return t=e&&"object"===(0,o.Z)(e)&&"key"in e?e:{key:e},(0,i.Z)((0,i.Z)({},t),{},{key:String(t.key)})}function ne(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];return e.map(te)}function re(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],n=[],r=0,a=t.length,o=ne(e),s=ne(t);o.forEach((function(e){for(var t=!1,o=r;o<a;o+=1){var u=s[o];if(u.key===e.key){r<o&&(n=n.concat(s.slice(r,o).map((function(e){return(0,i.Z)((0,i.Z)({},e),{},{status:Y})}))),r=o),n.push((0,i.Z)((0,i.Z)({},u),{},{status:J})),r+=1,t=!0;break}}t||n.push((0,i.Z)((0,i.Z)({},e),{},{status:Q}))})),r<a&&(n=n.concat(s.slice(r).map((function(e){return(0,i.Z)((0,i.Z)({},e),{},{status:Y})}))));var u={};n.forEach((function(e){var t=e.key;u[t]=(u[t]||0)+1}));var l=Object.keys(u).filter((function(e){return u[e]>1}));return l.forEach((function(e){(n=n.filter((function(t){var n=t.key,r=t.status;return n!==e||r!==Q}))).forEach((function(t){t.key===e&&(t.status=J)}))})),n}var ie=["component","children","onVisibleChanged","onAllRemoved"],ae=["status"],oe=["eventProps","visible","children","motionName","motionAppear","motionEnter","motionLeave","motionLeaveImmediately","motionDeadline","removeOnLeave","leavedClassName","onAppearStart","onAppearActive","onAppearEnd","onEnterStart","onEnterActive","onEnterEnd","onLeaveStart","onLeaveActive","onLeaveEnd"];const se=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:G,n=function(e){(0,K.Z)(r,e);var n=(0,q.Z)(r);function r(){var e;(0,j.Z)(this,r);for(var t=arguments.length,a=new Array(t),o=0;o<t;o++)a[o]=arguments[o];return(e=n.call.apply(n,[this].concat(a))).state={keyEntities:[]},e.removeKey=function(t){var n=e.state.keyEntities.map((function(e){return e.key!==t?e:(0,i.Z)((0,i.Z)({},e),{},{status:ee})}));return e.setState({keyEntities:n}),n.filter((function(e){return e.status!==ee})).length},e}return(0,H.Z)(r,[{key:"render",value:function(){var e=this,n=this.state.keyEntities,r=this.props,i=r.component,a=r.children,o=r.onVisibleChanged,u=r.onAllRemoved,l=(0,X.Z)(r,ie),c=i||s.Fragment,d={};return oe.forEach((function(e){d[e]=l[e],delete l[e]})),delete l.keys,s.createElement(c,l,n.map((function(n){var r=n.status,i=(0,X.Z)(n,ae),l=r===Y||r===J;return s.createElement(t,(0,B.Z)({},d,{key:i.key,visible:l,eventProps:i,onVisibleChanged:function(t){null==o||o(t,{key:i.key}),t||0===e.removeKey(i.key)&&u&&u()}}),a)})))}}],[{key:"getDerivedStateFromProps",value:function(e,t){var n=e.keys,r=t.keyEntities,i=ne(n);return{keyEntities:re(r,i).filter((function(e){var t=r.find((function(t){var n=t.key;return e.key===n}));return!t||t.status!==ee||e.status!==Q}))}}}]),r}(s.Component);return n.defaultProps={component:"div"},n}(N),ue=G},51784:(e,t,n)=>{n.d(t,{Z:()=>v});var r=n(87462),i=n(4942),a=n(15671),o=n(43144),s=n(79340),u=n(98557),l=n(67294),c=n(73935),d=n(94184),f=n.n(d),v=function(e){(0,s.Z)(n,e);var t=(0,u.Z)(n);function n(){var e;(0,a.Z)(this,n);for(var r=arguments.length,i=new Array(r),o=0;o<r;o++)i[o]=arguments[o];return(e=t.call.apply(t,[this].concat(i))).closeTimer=null,e.close=function(t){t&&t.stopPropagation(),e.clearCloseTimer();var n=e.props,r=n.onClose,i=n.noticeKey;r&&r(i)},e.startCloseTimer=function(){e.props.duration&&(e.closeTimer=window.setTimeout((function(){e.close()}),1e3*e.props.duration))},e.clearCloseTimer=function(){e.closeTimer&&(clearTimeout(e.closeTimer),e.closeTimer=null)},e}return(0,o.Z)(n,[{key:"componentDidMount",value:function(){this.startCloseTimer()}},{key:"componentDidUpdate",value:function(e){(this.props.duration!==e.duration||this.props.updateMark!==e.updateMark||this.props.visible!==e.visible&&this.props.visible)&&this.restartCloseTimer()}},{key:"componentWillUnmount",value:function(){this.clearCloseTimer()}},{key:"restartCloseTimer",value:function(){this.clearCloseTimer(),this.startCloseTimer()}},{key:"render",value:function(){var e=this,t=this.props,n=t.prefixCls,a=t.className,o=t.closable,s=t.closeIcon,u=t.style,d=t.onClick,v=t.children,m=t.holder,h="".concat(n,"-notice"),p=Object.keys(this.props).reduce((function(t,n){return"data-"!==n.substr(0,5)&&"aria-"!==n.substr(0,5)&&"role"!==n||(t[n]=e.props[n]),t}),{}),g=l.createElement("div",(0,r.Z)({className:f()(h,a,(0,i.Z)({},"".concat(h,"-closable"),o)),style:u,onMouseEnter:this.clearCloseTimer,onMouseLeave:this.startCloseTimer,onClick:d},p),l.createElement("div",{className:"".concat(h,"-content")},v),o?l.createElement("a",{tabIndex:0,onClick:this.close,className:"".concat(h,"-close")},s||l.createElement("span",{className:"".concat(h,"-close-x")})):null);return m?c.createPortal(g,m):g}}]),n}(l.Component);v.defaultProps={onClose:function(){},duration:1.5}},98287:(e,t,n)=>{n.r(t),n.d(t,{default:()=>k});var r=n(44925),i=n(87462),a=n(1413),o=n(15671),s=n(43144),u=n(79340),l=n(98557),c=n(67294),d=n(38135),f=n(94184),v=n.n(f),m=n(63441),h=n(51784),p=n(51550),g=["getContainer"],y=0,Z=Date.now();function E(){var e=y;return y+=1,"rcNotification_".concat(Z,"_").concat(e)}var b=function(e){(0,u.Z)(n,e);var t=(0,l.Z)(n);function n(){var e;(0,o.Z)(this,n);for(var r=arguments.length,i=new Array(r),s=0;s<r;s++)i[s]=arguments[s];return(e=t.call.apply(t,[this].concat(i))).state={notices:[]},e.hookRefs=new Map,e.add=function(t,n){var r=t.key||E(),i=(0,a.Z)((0,a.Z)({},t),{},{key:r}),o=e.props.maxCount;e.setState((function(e){var t=e.notices,a=t.map((function(e){return e.notice.key})).indexOf(r),s=t.concat();return-1!==a?s.splice(a,1,{notice:i,holderCallback:n}):(o&&t.length>=o&&(i.key=s[0].notice.key,i.updateMark=E(),i.userPassKey=r,s.shift()),s.push({notice:i,holderCallback:n})),{notices:s}}))},e.remove=function(t){e.setState((function(e){return{notices:e.notices.filter((function(e){var n=e.notice,r=n.key;return(n.userPassKey||r)!==t}))}}))},e.noticePropsMap={},e}return(0,s.Z)(n,[{key:"getTransitionName",value:function(){var e=this.props,t=e.prefixCls,n=e.animation,r=this.props.transitionName;return!r&&n&&(r="".concat(t,"-").concat(n)),r}},{key:"render",value:function(){var e=this,t=this.state.notices,n=this.props,r=n.prefixCls,o=n.className,s=n.closeIcon,u=n.style,l=[];return t.forEach((function(n,i){var o=n.notice,u=n.holderCallback,c=i===t.length-1?o.updateMark:void 0,d=o.key,f=o.userPassKey,v=(0,a.Z)((0,a.Z)((0,a.Z)({prefixCls:r,closeIcon:s},o),o.props),{},{key:d,noticeKey:f||d,updateMark:c,onClose:function(t){var n;e.remove(t),null===(n=o.onClose)||void 0===n||n.call(o)},onClick:o.onClick,children:o.content});l.push(d),e.noticePropsMap[d]={props:v,holderCallback:u}})),c.createElement("div",{className:v()(r,o),style:u},c.createElement(m.V,{keys:l,motionName:this.getTransitionName(),onVisibleChanged:function(t,n){var r=n.key;t||delete e.noticePropsMap[r]}},(function(t){var n=t.key,o=t.className,s=t.style,u=t.visible,l=e.noticePropsMap[n],d=l.props,f=l.holderCallback;return f?c.createElement("div",{key:n,className:v()(o,"".concat(r,"-hook-holder")),style:(0,a.Z)({},s),ref:function(t){void 0!==n&&(t?(e.hookRefs.set(n,t),f(t,d)):e.hookRefs.delete(n))}}):c.createElement(h.Z,(0,i.Z)({},d,{className:v()(o,null==d?void 0:d.className),style:(0,a.Z)((0,a.Z)({},s),null==d?void 0:d.style),visible:u}))})))}}]),n}(c.Component);b.newInstance=void 0,b.defaultProps={prefixCls:"rc-notification",animation:"fade",style:{top:65,left:"50%"}},b.newInstance=function(e,t){var n=e||{},a=n.getContainer,o=(0,r.Z)(n,g),s=document.createElement("div");a?a().appendChild(s):document.body.appendChild(s);var u=!1;(0,d.s)(c.createElement(b,(0,i.Z)({},o,{ref:function(e){u||(u=!0,t({notice:function(t){e.add(t)},removeNotice:function(t){e.remove(t)},component:e,destroy:function(){(0,d.v)(s),s.parentNode&&s.parentNode.removeChild(s)},useNotification:function(){return(0,p.Z)(e)}}))}})),s)};const k=b},51550:(e,t,n)=>{n.d(t,{Z:()=>u});var r=n(93433),i=n(87462),a=n(29439),o=n(67294),s=n(51784);function u(e){var t=o.useRef({}),n=o.useState([]),u=(0,a.Z)(n,2),l=u[0],c=u[1];return[function(n){var a=!0;e.add(n,(function(e,n){var u=n.key;if(e&&(!t.current[u]||a)){var l=o.createElement(s.Z,(0,i.Z)({},n,{holder:e}));t.current[u]=l,c((function(e){var t=e.findIndex((function(e){return e.key===n.key}));if(-1===t)return[].concat((0,r.Z)(e),[l]);var i=(0,r.Z)(e);return i[t]=l,i}))}a=!1}))},o.createElement(o.Fragment,null,l)]}},32502:(e,t,n)=>{var r=n(75263),i=n(64836);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=i(n(10434)),o=i(n(38416)),s=i(n(56690)),u=i(n(89728)),l=i(n(61655)),c=i(n(26389)),d=r(n(67294)),f=i(n(73935)),v=i(n(94184)),m=function(e){(0,l.default)(n,e);var t=(0,c.default)(n);function n(){var e;(0,s.default)(this,n);for(var r=arguments.length,i=new Array(r),a=0;a<r;a++)i[a]=arguments[a];return(e=t.call.apply(t,[this].concat(i))).closeTimer=null,e.close=function(t){t&&t.stopPropagation(),e.clearCloseTimer();var n=e.props,r=n.onClose,i=n.noticeKey;r&&r(i)},e.startCloseTimer=function(){e.props.duration&&(e.closeTimer=window.setTimeout((function(){e.close()}),1e3*e.props.duration))},e.clearCloseTimer=function(){e.closeTimer&&(clearTimeout(e.closeTimer),e.closeTimer=null)},e}return(0,u.default)(n,[{key:"componentDidMount",value:function(){this.startCloseTimer()}},{key:"componentDidUpdate",value:function(e){(this.props.duration!==e.duration||this.props.updateMark!==e.updateMark||this.props.visible!==e.visible&&this.props.visible)&&this.restartCloseTimer()}},{key:"componentWillUnmount",value:function(){this.clearCloseTimer()}},{key:"restartCloseTimer",value:function(){this.clearCloseTimer(),this.startCloseTimer()}},{key:"render",value:function(){var e=this,t=this.props,n=t.prefixCls,r=t.className,i=t.closable,s=t.closeIcon,u=t.style,l=t.onClick,c=t.children,m=t.holder,h="".concat(n,"-notice"),p=Object.keys(this.props).reduce((function(t,n){return"data-"!==n.substr(0,5)&&"aria-"!==n.substr(0,5)&&"role"!==n||(t[n]=e.props[n]),t}),{}),g=d.createElement("div",(0,a.default)({className:(0,v.default)(h,r,(0,o.default)({},"".concat(h,"-closable"),i)),style:u,onMouseEnter:this.clearCloseTimer,onMouseLeave:this.startCloseTimer,onClick:l},p),d.createElement("div",{className:"".concat(h,"-content")},c),i?d.createElement("a",{tabIndex:0,onClick:this.close,className:"".concat(h,"-close")},s||d.createElement("span",{className:"".concat(h,"-close-x")})):null);return m?f.default.createPortal(g,m):g}}]),n}(d.Component);t.default=m,m.defaultProps={onClose:function(){},duration:1.5}},45484:(e,t,n)=>{var r=n(75263),i=n(64836);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=u.useRef({}),n=u.useState([]),r=(0,s.default)(n,2),i=r[0],c=r[1];return[function(n){var r=!0;e.add(n,(function(e,n){var i=n.key;if(e&&(!t.current[i]||r)){var s=u.createElement(l.default,(0,o.default)({},n,{holder:e}));t.current[i]=s,c((function(e){var t=e.findIndex((function(e){return e.key===n.key}));if(-1===t)return[].concat((0,a.default)(e),[s]);var r=(0,a.default)(e);return r[t]=s,r}))}r=!1}))},u.createElement(u.Fragment,null,i)]};var a=i(n(861)),o=i(n(10434)),s=i(n(27424)),u=r(n(67294)),l=i(n(32502))},19214:(e,t,n)=>{n.d(t,{Z:()=>x});var r=n(87462),i=n(1413),a=n(29439),o=n(44925),s=n(67294),u=n(94184),l=n.n(u),c=n(48717),d=n(8410),f=["prefixCls","invalidate","item","renderItem","responsive","responsiveDisabled","registerSize","itemKey","className","style","children","display","order","component"],v=void 0;function m(e,t){var n=e.prefixCls,a=e.invalidate,u=e.item,d=e.renderItem,m=e.responsive,h=e.responsiveDisabled,p=e.registerSize,g=e.itemKey,y=e.className,Z=e.style,E=e.children,b=e.display,k=e.order,F=e.component,N=void 0===F?"div":F,C=(0,o.Z)(e,f),w=m&&!b;function P(e){p(g,e)}s.useEffect((function(){return function(){P(null)}}),[]);var S,V=d&&u!==v?d(u):E;a||(S={opacity:w?0:1,height:w?0:v,overflowY:w?"hidden":v,order:m?k:v,pointerEvents:w?"none":v,position:w?"absolute":v});var I={};w&&(I["aria-hidden"]=!0);var M=s.createElement(N,(0,r.Z)({className:l()(!a&&n,y),style:(0,i.Z)((0,i.Z)({},S),Z)},I,C,{ref:t}),V);return m&&(M=s.createElement(c.Z,{onResize:function(e){P(e.offsetWidth)},disabled:h},M)),M}var h=s.forwardRef(m);h.displayName="Item";const p=h;var g=n(75164),y=n(30470),Z=["component"],E=["className"],b=["className"],k=function(e,t){var n=s.useContext(w);if(!n){var i=e.component,a=void 0===i?"div":i,u=(0,o.Z)(e,Z);return s.createElement(a,(0,r.Z)({},u,{ref:t}))}var c=n.className,d=(0,o.Z)(n,E),f=e.className,v=(0,o.Z)(e,b);return s.createElement(w.Provider,{value:null},s.createElement(p,(0,r.Z)({ref:t,className:l()(c,f)},d,v)))},F=s.forwardRef(k);F.displayName="RawItem";const N=F;var C=["prefixCls","data","renderItem","renderRawItem","itemKey","itemWidth","ssr","style","className","maxCount","renderRest","renderRawRest","suffix","component","itemComponent","onVisibleChange"],w=s.createContext(null),P="responsive",S="invalidate";function V(e){return"+ ".concat(e.length," ...")}function I(e,t){var n=e.prefixCls,u=void 0===n?"rc-overflow":n,f=e.data,v=void 0===f?[]:f,m=e.renderItem,h=e.renderRawItem,Z=e.itemKey,E=e.itemWidth,b=void 0===E?10:E,k=e.ssr,F=e.style,N=e.className,I=e.maxCount,M=e.renderRest,x=e.renderRawRest,R=e.suffix,T=e.component,A=void 0===T?"div":T,L=e.itemComponent,O=e.onVisibleChange,_=(0,o.Z)(e,C),D=function(){var e=(0,y.Z)({}),t=(0,a.Z)(e,2)[1],n=(0,s.useRef)([]),r=0,i=0;return function(e){var a=r;return r+=1,n.current.length<a+1&&(n.current[a]=e),[n.current[a],function(e){n.current[a]="function"==typeof e?e(n.current[a]):e,g.Z.cancel(i),i=(0,g.Z)((function(){t({},!0)}))}]}}(),$="full"===k,W=D(null),U=(0,a.Z)(W,2),j=U[0],H=U[1],K=j||0,q=D(new Map),z=(0,a.Z)(q,2),G=z[0],B=z[1],X=D(0),Y=(0,a.Z)(X,2),J=Y[0],Q=Y[1],ee=D(0),te=(0,a.Z)(ee,2),ne=te[0],re=te[1],ie=D(0),ae=(0,a.Z)(ie,2),oe=ae[0],se=ae[1],ue=(0,s.useState)(null),le=(0,a.Z)(ue,2),ce=le[0],de=le[1],fe=(0,s.useState)(null),ve=(0,a.Z)(fe,2),me=ve[0],he=ve[1],pe=s.useMemo((function(){return null===me&&$?Number.MAX_SAFE_INTEGER:me||0}),[me,j]),ge=(0,s.useState)(!1),ye=(0,a.Z)(ge,2),Ze=ye[0],Ee=ye[1],be="".concat(u,"-item"),ke=Math.max(J,ne),Fe=I===P,Ne=v.length&&Fe,Ce=I===S,we=Ne||"number"==typeof I&&v.length>I,Pe=(0,s.useMemo)((function(){var e=v;return Ne?e=null===j&&$?v:v.slice(0,Math.min(v.length,K/b)):"number"==typeof I&&(e=v.slice(0,I)),e}),[v,b,j,I,Ne]),Se=(0,s.useMemo)((function(){return Ne?v.slice(pe+1):v.slice(Pe.length)}),[v,Pe,Ne,pe]),Ve=(0,s.useCallback)((function(e,t){var n;return"function"==typeof Z?Z(e):null!==(n=Z&&(null==e?void 0:e[Z]))&&void 0!==n?n:t}),[Z]),Ie=(0,s.useCallback)(m||function(e){return e},[m]);function Me(e,t){he(e),t||(Ee(e<v.length-1),null==O||O(e))}function xe(e,t){B((function(n){var r=new Map(n);return null===t?r.delete(e):r.set(e,t),r}))}function Re(e){return G.get(Ve(Pe[e],e))}(0,d.Z)((function(){if(K&&ke&&Pe){var e=oe,t=Pe.length,n=t-1;if(!t)return Me(0),void de(null);for(var r=0;r<t;r+=1){var i=Re(r);if($&&(i=i||0),void 0===i){Me(r-1,!0);break}if(e+=i,0===n&&e<=K||r===n-1&&e+Re(n)<=K){Me(n),de(null);break}if(e+ke>K){Me(r-1),de(e-i-oe+ne);break}}R&&Re(0)+oe>K&&de(null)}}),[K,G,ne,oe,Ve,Pe]);var Te=Ze&&!!Se.length,Ae={};null!==ce&&Ne&&(Ae={position:"absolute",left:ce,top:0});var Le,Oe={prefixCls:be,responsive:Ne,component:L,invalidate:Ce},_e=h?function(e,t){var n=Ve(e,t);return s.createElement(w.Provider,{key:n,value:(0,i.Z)((0,i.Z)({},Oe),{},{order:t,item:e,itemKey:n,registerSize:xe,display:t<=pe})},h(e,t))}:function(e,t){var n=Ve(e,t);return s.createElement(p,(0,r.Z)({},Oe,{order:t,key:n,item:e,renderItem:Ie,itemKey:n,registerSize:xe,display:t<=pe}))},De={order:Te?pe:Number.MAX_SAFE_INTEGER,className:"".concat(be,"-rest"),registerSize:function(e,t){re(t),Q(ne)},display:Te};if(x)x&&(Le=s.createElement(w.Provider,{value:(0,i.Z)((0,i.Z)({},Oe),De)},x(Se)));else{var $e=M||V;Le=s.createElement(p,(0,r.Z)({},Oe,De),"function"==typeof $e?$e(Se):$e)}var We=s.createElement(A,(0,r.Z)({className:l()(!Ce&&u,N),style:F,ref:t},_),Pe.map(_e),we?Le:null,R&&s.createElement(p,(0,r.Z)({},Oe,{responsive:Fe,responsiveDisabled:!Ne,order:pe,className:"".concat(be,"-suffix"),registerSize:function(e,t){se(t)},display:!0,style:Ae}),R));return Fe&&(We=s.createElement(c.Z,{onResize:function(e,t){H(t.clientWidth)},disabled:!Ne},We)),We}var M=s.forwardRef(I);M.displayName="Overflow",M.Item=N,M.RESPONSIVE=P,M.INVALIDATE=S;const x=M}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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L0hGLFNBQTRCem9CLEVBQUcrb0IsR0FDN0I4RCxHQUFlOUQsRUFDakIsRUE4SEV6SSxTQUFTLEVBQ1Q1TyxNQUFPMmMsS0FDTHRELElBU0osT0FQSXdDLEtBQ0ZvQixHQUE0QixnQkFBb0IsSUFBZ0IsQ0FDOURsRixTQTdKSixTQUEwQnpwQixFQUFHdWMsR0FDM0JxUCxFQUFrQnJQLEVBQVFxUyxZQUM1QixFQTRKSS9jLFVBQVcyYixJQUNWbUIsS0FHRUEsRUFDVCxDQUVBLElBQUlFLEVBQStCLGFBQWlCdEUsR0FDcERzRSxFQUFnQnhYLFlBQWMsV0FDOUJ3WCxFQUFnQmxGLEtBQU8sRUFDdkJrRixFQUFnQjFFLFdBQWFBLEVBQzdCMEUsRUFBZ0J6RSxXQUFhQSxFQUU3QixNRXJVQSxFRnFVQSxDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9yYy1maWVsZC1mb3JtL2VzL0ZpZWxkQ29udGV4dC5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL3JjLWZpZWxkLWZvcm0vZXMvdXRpbHMvdHlwZVV0aWwuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9yYy1maWVsZC1mb3JtL2VzL3V0aWxzL21lc3NhZ2VzLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvcmMtZmllbGQtZm9ybS9lcy91dGlscy9jbG9uZURlZXAuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9yYy1maWVsZC1mb3JtL2VzL3V0aWxzL3ZhbHVlVXRpbC5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL3JjLWZpZWxkLWZvcm0vZXMvdXRpbHMvdmFsaWRhdGVVdGlsLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvcmMtZmllbGQtZm9ybS9lcy9GaWVsZC5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL3JjLWZpZWxkLWZvcm0vZXMvTGlzdENvbnRleHQuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9yYy1maWVsZC1mb3JtL2VzL0xpc3QuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9yYy1maWVsZC1mb3JtL2VzL3V0aWxzL05hbWVNYXAuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9yYy1maWVsZC1mb3JtL2VzL3VzZUZvcm0uanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9yYy1maWVsZC1mb3JtL2VzL3V0aWxzL2FzeW5jVXRpbC5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL3JjLWZpZWxkLWZvcm0vZXMvRm9ybUNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9yYy1maWVsZC1mb3JtL2VzL0Zvcm0uanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9yYy1maWVsZC1mb3JtL2VzL3VzZVdhdGNoLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvcmMtZmllbGQtZm9ybS9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL3JjLWlucHV0LW51bWJlci9lcy91dGlscy9zdXBwb3J0VXRpbC5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL3JjLWlucHV0LW51bWJlci9lcy91dGlscy9udW1iZXJVdGlsLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvcmMtaW5wdXQtbnVtYmVyL2VzL3V0aWxzL01pbmlEZWNpbWFsLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvcmMtaW5wdXQtbnVtYmVyL2VzL1N0ZXBIYW5kbGVyLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvcmMtaW5wdXQtbnVtYmVyL2VzL2hvb2tzL3VzZUxheW91dEVmZmVjdC5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL3JjLWlucHV0LW51bWJlci9lcy9ob29rcy91c2VVcGRhdGVFZmZlY3QuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9yYy1pbnB1dC1udW1iZXIvZXMvSW5wdXROdW1iZXIuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9yYy1pbnB1dC1udW1iZXIvZXMvaG9va3MvdXNlQ3Vyc29yLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvcmMtaW5wdXQtbnVtYmVyL2VzL2hvb2tzL3VzZUZyYW1lLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvcmMtaW5wdXQtbnVtYmVyL2VzL2luZGV4LmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvcmMtbW90aW9uL2VzL3V0aWwvbW90aW9uLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvcmMtbW90aW9uL2VzL2ludGVyZmFjZS5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL3JjLW1vdGlvbi9lcy9ob29rcy91c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0LmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvcmMtbW90aW9uL2VzL2hvb2tzL3VzZVN0ZXBRdWV1ZS5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL3JjLW1vdGlvbi9lcy9ob29rcy91c2VTdGF0dXMuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9yYy1tb3Rpb24vZXMvaG9va3MvdXNlRG9tTW90aW9uRXZlbnRzLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvcmMtbW90aW9uL2VzL2hvb2tzL3VzZU5leHRGcmFtZS5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL3JjLW1vdGlvbi9lcy9Eb21XcmFwcGVyLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvcmMtbW90aW9uL2VzL0NTU01vdGlvbi5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL3JjLW1vdGlvbi9lcy91dGlsL2RpZmYuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9yYy1tb3Rpb24vZXMvQ1NTTW90aW9uTGlzdC5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL3JjLW1vdGlvbi9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL3JjLW5vdGlmaWNhdGlvbi9lcy9Ob3RpY2UuanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9yYy1ub3RpZmljYXRpb24vZXMvTm90aWZpY2F0aW9uLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvcmMtbm90aWZpY2F0aW9uL2VzL2luZGV4LmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvcmMtbm90aWZpY2F0aW9uL2VzL3VzZU5vdGlmaWNhdGlvbi5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL3JjLW5vdGlmaWNhdGlvbi9saWIvTm90aWNlLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvcmMtbm90aWZpY2F0aW9uL2xpYi91c2VOb3RpZmljYXRpb24uanMiLCJ3ZWJwYWNrOi8vbWluZG1hcC8uL25vZGVfbW9kdWxlcy9yYy1vdmVyZmxvdy9lcy9JdGVtLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvcmMtb3ZlcmZsb3cvZXMvUmF3SXRlbS5qcyIsIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL3JjLW92ZXJmbG93L2VzL092ZXJmbG93LmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvcmMtb3ZlcmZsb3cvZXMvaG9va3MvdXNlQmF0Y2hGcmFtZVN0YXRlLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvcmMtb3ZlcmZsb3cvZXMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSBcInJjLXV0aWwvZXMvd2FybmluZ1wiO1xuZXhwb3J0IHZhciBIT09LX01BUksgPSAnUkNfRk9STV9JTlRFUk5BTF9IT09LUyc7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5cbnZhciB3YXJuaW5nRnVuYyA9IGZ1bmN0aW9uIHdhcm5pbmdGdW5jKCkge1xuICB3YXJuaW5nKGZhbHNlLCAnQ2FuIG5vdCBmaW5kIEZvcm1Db250ZXh0LiBQbGVhc2UgbWFrZSBzdXJlIHlvdSB3cmFwIEZpZWxkIHVuZGVyIEZvcm0uJyk7XG59O1xuXG52YXIgQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KHtcbiAgZ2V0RmllbGRWYWx1ZTogd2FybmluZ0Z1bmMsXG4gIGdldEZpZWxkc1ZhbHVlOiB3YXJuaW5nRnVuYyxcbiAgZ2V0RmllbGRFcnJvcjogd2FybmluZ0Z1bmMsXG4gIGdldEZpZWxkV2FybmluZzogd2FybmluZ0Z1bmMsXG4gIGdldEZpZWxkc0Vycm9yOiB3YXJuaW5nRnVuYyxcbiAgaXNGaWVsZHNUb3VjaGVkOiB3YXJuaW5nRnVuYyxcbiAgaXNGaWVsZFRvdWNoZWQ6IHdhcm5pbmdGdW5jLFxuICBpc0ZpZWxkVmFsaWRhdGluZzogd2FybmluZ0Z1bmMsXG4gIGlzRmllbGRzVmFsaWRhdGluZzogd2FybmluZ0Z1bmMsXG4gIHJlc2V0RmllbGRzOiB3YXJuaW5nRnVuYyxcbiAgc2V0RmllbGRzOiB3YXJuaW5nRnVuYyxcbiAgc2V0RmllbGRzVmFsdWU6IHdhcm5pbmdGdW5jLFxuICB2YWxpZGF0ZUZpZWxkczogd2FybmluZ0Z1bmMsXG4gIHN1Ym1pdDogd2FybmluZ0Z1bmMsXG4gIGdldEludGVybmFsSG9va3M6IGZ1bmN0aW9uIGdldEludGVybmFsSG9va3MoKSB7XG4gICAgd2FybmluZ0Z1bmMoKTtcbiAgICByZXR1cm4ge1xuICAgICAgZGlzcGF0Y2g6IHdhcm5pbmdGdW5jLFxuICAgICAgaW5pdEVudGl0eVZhbHVlOiB3YXJuaW5nRnVuYyxcbiAgICAgIHJlZ2lzdGVyRmllbGQ6IHdhcm5pbmdGdW5jLFxuICAgICAgdXNlU3Vic2NyaWJlOiB3YXJuaW5nRnVuYyxcbiAgICAgIHNldEluaXRpYWxWYWx1ZXM6IHdhcm5pbmdGdW5jLFxuICAgICAgZGVzdHJveUZvcm06IHdhcm5pbmdGdW5jLFxuICAgICAgc2V0Q2FsbGJhY2tzOiB3YXJuaW5nRnVuYyxcbiAgICAgIHJlZ2lzdGVyV2F0Y2g6IHdhcm5pbmdGdW5jLFxuICAgICAgZ2V0RmllbGRzOiB3YXJuaW5nRnVuYyxcbiAgICAgIHNldFZhbGlkYXRlTWVzc2FnZXM6IHdhcm5pbmdGdW5jLFxuICAgICAgc2V0UHJlc2VydmU6IHdhcm5pbmdGdW5jLFxuICAgICAgZ2V0SW5pdGlhbFZhbHVlOiB3YXJuaW5nRnVuY1xuICAgIH07XG4gIH1cbn0pO1xuZXhwb3J0IGRlZmF1bHQgQ29udGV4dDsiLCJleHBvcnQgZnVuY3Rpb24gdG9BcnJheSh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIHJldHVybiBBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlIDogW3ZhbHVlXTtcbn0iLCJ2YXIgdHlwZVRlbXBsYXRlID0gXCInJHtuYW1lfScgaXMgbm90IGEgdmFsaWQgJHt0eXBlfVwiO1xuZXhwb3J0IHZhciBkZWZhdWx0VmFsaWRhdGVNZXNzYWdlcyA9IHtcbiAgZGVmYXVsdDogXCJWYWxpZGF0aW9uIGVycm9yIG9uIGZpZWxkICcke25hbWV9J1wiLFxuICByZXF1aXJlZDogXCInJHtuYW1lfScgaXMgcmVxdWlyZWRcIixcbiAgZW51bTogXCInJHtuYW1lfScgbXVzdCBiZSBvbmUgb2YgWyR7ZW51bX1dXCIsXG4gIHdoaXRlc3BhY2U6IFwiJyR7bmFtZX0nIGNhbm5vdCBiZSBlbXB0eVwiLFxuICBkYXRlOiB7XG4gICAgZm9ybWF0OiBcIicke25hbWV9JyBpcyBpbnZhbGlkIGZvciBmb3JtYXQgZGF0ZVwiLFxuICAgIHBhcnNlOiBcIicke25hbWV9JyBjb3VsZCBub3QgYmUgcGFyc2VkIGFzIGRhdGVcIixcbiAgICBpbnZhbGlkOiBcIicke25hbWV9JyBpcyBpbnZhbGlkIGRhdGVcIlxuICB9LFxuICB0eXBlczoge1xuICAgIHN0cmluZzogdHlwZVRlbXBsYXRlLFxuICAgIG1ldGhvZDogdHlwZVRlbXBsYXRlLFxuICAgIGFycmF5OiB0eXBlVGVtcGxhdGUsXG4gICAgb2JqZWN0OiB0eXBlVGVtcGxhdGUsXG4gICAgbnVtYmVyOiB0eXBlVGVtcGxhdGUsXG4gICAgZGF0ZTogdHlwZVRlbXBsYXRlLFxuICAgIGJvb2xlYW46IHR5cGVUZW1wbGF0ZSxcbiAgICBpbnRlZ2VyOiB0eXBlVGVtcGxhdGUsXG4gICAgZmxvYXQ6IHR5cGVUZW1wbGF0ZSxcbiAgICByZWdleHA6IHR5cGVUZW1wbGF0ZSxcbiAgICBlbWFpbDogdHlwZVRlbXBsYXRlLFxuICAgIHVybDogdHlwZVRlbXBsYXRlLFxuICAgIGhleDogdHlwZVRlbXBsYXRlXG4gIH0sXG4gIHN0cmluZzoge1xuICAgIGxlbjogXCInJHtuYW1lfScgbXVzdCBiZSBleGFjdGx5ICR7bGVufSBjaGFyYWN0ZXJzXCIsXG4gICAgbWluOiBcIicke25hbWV9JyBtdXN0IGJlIGF0IGxlYXN0ICR7bWlufSBjaGFyYWN0ZXJzXCIsXG4gICAgbWF4OiBcIicke25hbWV9JyBjYW5ub3QgYmUgbG9uZ2VyIHRoYW4gJHttYXh9IGNoYXJhY3RlcnNcIixcbiAgICByYW5nZTogXCInJHtuYW1lfScgbXVzdCBiZSBiZXR3ZWVuICR7bWlufSBhbmQgJHttYXh9IGNoYXJhY3RlcnNcIlxuICB9LFxuICBudW1iZXI6IHtcbiAgICBsZW46IFwiJyR7bmFtZX0nIG11c3QgZXF1YWwgJHtsZW59XCIsXG4gICAgbWluOiBcIicke25hbWV9JyBjYW5ub3QgYmUgbGVzcyB0aGFuICR7bWlufVwiLFxuICAgIG1heDogXCInJHtuYW1lfScgY2Fubm90IGJlIGdyZWF0ZXIgdGhhbiAke21heH1cIixcbiAgICByYW5nZTogXCInJHtuYW1lfScgbXVzdCBiZSBiZXR3ZWVuICR7bWlufSBhbmQgJHttYXh9XCJcbiAgfSxcbiAgYXJyYXk6IHtcbiAgICBsZW46IFwiJyR7bmFtZX0nIG11c3QgYmUgZXhhY3RseSAke2xlbn0gaW4gbGVuZ3RoXCIsXG4gICAgbWluOiBcIicke25hbWV9JyBjYW5ub3QgYmUgbGVzcyB0aGFuICR7bWlufSBpbiBsZW5ndGhcIixcbiAgICBtYXg6IFwiJyR7bmFtZX0nIGNhbm5vdCBiZSBncmVhdGVyIHRoYW4gJHttYXh9IGluIGxlbmd0aFwiLFxuICAgIHJhbmdlOiBcIicke25hbWV9JyBtdXN0IGJlIGJldHdlZW4gJHttaW59IGFuZCAke21heH0gaW4gbGVuZ3RoXCJcbiAgfSxcbiAgcGF0dGVybjoge1xuICAgIG1pc21hdGNoOiBcIicke25hbWV9JyBkb2VzIG5vdCBtYXRjaCBwYXR0ZXJuICR7cGF0dGVybn1cIlxuICB9XG59OyIsImltcG9ydCBfdHlwZW9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2ZcIjtcblxuZnVuY3Rpb24gY2xvbmVEZWVwKHZhbCkge1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWwpKSB7XG4gICAgcmV0dXJuIGNsb25lQXJyYXlEZWVwKHZhbCk7XG4gIH0gZWxzZSBpZiAoX3R5cGVvZih2YWwpID09PSAnb2JqZWN0JyAmJiB2YWwgIT09IG51bGwpIHtcbiAgICByZXR1cm4gY2xvbmVPYmplY3REZWVwKHZhbCk7XG4gIH1cblxuICByZXR1cm4gdmFsO1xufVxuXG5mdW5jdGlvbiBjbG9uZU9iamVjdERlZXAodmFsKSB7XG4gIGlmIChPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsKSA9PT0gT2JqZWN0LnByb3RvdHlwZSkge1xuICAgIHZhciByZXMgPSB7fTtcblxuICAgIGZvciAodmFyIGtleSBpbiB2YWwpIHtcbiAgICAgIHJlc1trZXldID0gY2xvbmVEZWVwKHZhbFtrZXldKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xuICB9XG5cbiAgcmV0dXJuIHZhbDtcbn1cblxuZnVuY3Rpb24gY2xvbmVBcnJheURlZXAodmFsKSB7XG4gIHJldHVybiB2YWwubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgcmV0dXJuIGNsb25lRGVlcChpdGVtKTtcbiAgfSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsb25lRGVlcDsiLCJpbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMlwiO1xuaW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdG9Db25zdW1hYmxlQXJyYXlcIjtcbmltcG9ydCBfdHlwZW9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2ZcIjtcbmltcG9ydCBnZXQgZnJvbSBcInJjLXV0aWwvZXMvdXRpbHMvZ2V0XCI7XG5pbXBvcnQgc2V0IGZyb20gXCJyYy11dGlsL2VzL3V0aWxzL3NldFwiO1xuaW1wb3J0IHsgdG9BcnJheSB9IGZyb20gJy4vdHlwZVV0aWwnO1xuaW1wb3J0IGNsb25lRGVlcCBmcm9tICcuLi91dGlscy9jbG9uZURlZXAnO1xuLyoqXG4gKiBDb252ZXJ0IG5hbWUgdG8gaW50ZXJuYWwgc3VwcG9ydGVkIGZvcm1hdC5cbiAqIFRoaXMgZnVuY3Rpb24gc2hvdWxkIGtlZXAgc2luY2Ugd2Ugc3RpbGwgdGhpbmtpbmcgaWYgbmVlZCBzdXBwb3J0IGxpa2UgYGEuYi5jYCBmb3JtYXQuXG4gKiAnYScgPT4gWydhJ11cbiAqIDEyMyA9PiBbMTIzXVxuICogWydhJywgMTIzXSA9PiBbJ2EnLCAxMjNdXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGdldE5hbWVQYXRoKHBhdGgpIHtcbiAgcmV0dXJuIHRvQXJyYXkocGF0aCk7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0VmFsdWUoc3RvcmUsIG5hbWVQYXRoKSB7XG4gIHZhciB2YWx1ZSA9IGdldChzdG9yZSwgbmFtZVBhdGgpO1xuICByZXR1cm4gdmFsdWU7XG59XG5leHBvcnQgZnVuY3Rpb24gc2V0VmFsdWUoc3RvcmUsIG5hbWVQYXRoLCB2YWx1ZSkge1xuICB2YXIgcmVtb3ZlSWZVbmRlZmluZWQgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IGZhbHNlO1xuICB2YXIgbmV3U3RvcmUgPSBzZXQoc3RvcmUsIG5hbWVQYXRoLCB2YWx1ZSwgcmVtb3ZlSWZVbmRlZmluZWQpO1xuICByZXR1cm4gbmV3U3RvcmU7XG59XG5leHBvcnQgZnVuY3Rpb24gY2xvbmVCeU5hbWVQYXRoTGlzdChzdG9yZSwgbmFtZVBhdGhMaXN0KSB7XG4gIHZhciBuZXdTdG9yZSA9IHt9O1xuICBuYW1lUGF0aExpc3QuZm9yRWFjaChmdW5jdGlvbiAobmFtZVBhdGgpIHtcbiAgICB2YXIgdmFsdWUgPSBnZXRWYWx1ZShzdG9yZSwgbmFtZVBhdGgpO1xuICAgIG5ld1N0b3JlID0gc2V0VmFsdWUobmV3U3RvcmUsIG5hbWVQYXRoLCB2YWx1ZSk7XG4gIH0pO1xuICByZXR1cm4gbmV3U3RvcmU7XG59XG5leHBvcnQgZnVuY3Rpb24gY29udGFpbnNOYW1lUGF0aChuYW1lUGF0aExpc3QsIG5hbWVQYXRoKSB7XG4gIHJldHVybiBuYW1lUGF0aExpc3QgJiYgbmFtZVBhdGhMaXN0LnNvbWUoZnVuY3Rpb24gKHBhdGgpIHtcbiAgICByZXR1cm4gbWF0Y2hOYW1lUGF0aChwYXRoLCBuYW1lUGF0aCk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBpc09iamVjdChvYmopIHtcbiAgcmV0dXJuIF90eXBlb2Yob2JqKSA9PT0gJ29iamVjdCcgJiYgb2JqICE9PSBudWxsICYmIE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopID09PSBPYmplY3QucHJvdG90eXBlO1xufVxuLyoqXG4gKiBDb3B5IHZhbHVlcyBpbnRvIHN0b3JlIGFuZCByZXR1cm4gYSBuZXcgdmFsdWVzIG9iamVjdFxuICogKHsgYTogMSwgYjogeyBjOiAyIH0gfSwgeyBhOiA0LCBiOiB7IGQ6IDUgfSB9KSA9PiB7IGE6IDQsIGI6IHsgYzogMiwgZDogNSB9IH1cbiAqL1xuXG5cbmZ1bmN0aW9uIGludGVybmFsU2V0VmFsdWVzKHN0b3JlLCB2YWx1ZXMpIHtcbiAgdmFyIG5ld1N0b3JlID0gQXJyYXkuaXNBcnJheShzdG9yZSkgPyBfdG9Db25zdW1hYmxlQXJyYXkoc3RvcmUpIDogX29iamVjdFNwcmVhZCh7fSwgc3RvcmUpO1xuXG4gIGlmICghdmFsdWVzKSB7XG4gICAgcmV0dXJuIG5ld1N0b3JlO1xuICB9XG5cbiAgT2JqZWN0LmtleXModmFsdWVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgcHJldlZhbHVlID0gbmV3U3RvcmVba2V5XTtcbiAgICB2YXIgdmFsdWUgPSB2YWx1ZXNba2V5XTsgLy8gSWYgYm90aCBhcmUgb2JqZWN0IChidXQgdGFyZ2V0IGlzIG5vdCBhcnJheSksIHdlIHVzZSByZWN1cnNpb24gdG8gc2V0IGRlZXAgdmFsdWVcblxuICAgIHZhciByZWN1cnNpdmUgPSBpc09iamVjdChwcmV2VmFsdWUpICYmIGlzT2JqZWN0KHZhbHVlKTtcbiAgICBuZXdTdG9yZVtrZXldID0gcmVjdXJzaXZlID8gaW50ZXJuYWxTZXRWYWx1ZXMocHJldlZhbHVlLCB2YWx1ZSB8fCB7fSkgOiBjbG9uZURlZXAodmFsdWUpOyAvLyBDbG9uZSBkZWVwIGZvciBhcnJheXNcbiAgfSk7XG4gIHJldHVybiBuZXdTdG9yZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldFZhbHVlcyhzdG9yZSkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgcmVzdFZhbHVlcyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgcmVzdFZhbHVlc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gcmVzdFZhbHVlcy5yZWR1Y2UoZnVuY3Rpb24gKGN1cnJlbnQsIG5ld1N0b3JlKSB7XG4gICAgcmV0dXJuIGludGVybmFsU2V0VmFsdWVzKGN1cnJlbnQsIG5ld1N0b3JlKTtcbiAgfSwgc3RvcmUpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG1hdGNoTmFtZVBhdGgobmFtZVBhdGgsIGNoYW5nZWROYW1lUGF0aCkge1xuICBpZiAoIW5hbWVQYXRoIHx8ICFjaGFuZ2VkTmFtZVBhdGggfHwgbmFtZVBhdGgubGVuZ3RoICE9PSBjaGFuZ2VkTmFtZVBhdGgubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIG5hbWVQYXRoLmV2ZXJ5KGZ1bmN0aW9uIChuYW1lVW5pdCwgaSkge1xuICAgIHJldHVybiBjaGFuZ2VkTmFtZVBhdGhbaV0gPT09IG5hbWVVbml0O1xuICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1NpbWlsYXIoc291cmNlLCB0YXJnZXQpIHtcbiAgaWYgKHNvdXJjZSA9PT0gdGFyZ2V0KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAoIXNvdXJjZSAmJiB0YXJnZXQgfHwgc291cmNlICYmICF0YXJnZXQpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoIXNvdXJjZSB8fCAhdGFyZ2V0IHx8IF90eXBlb2Yoc291cmNlKSAhPT0gJ29iamVjdCcgfHwgX3R5cGVvZih0YXJnZXQpICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIHRhcmdldEtleXMgPSBPYmplY3Qua2V5cyh0YXJnZXQpO1xuICB2YXIga2V5cyA9IG5ldyBTZXQoW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShzb3VyY2VLZXlzKSwgX3RvQ29uc3VtYWJsZUFycmF5KHRhcmdldEtleXMpKSk7XG4gIHJldHVybiBfdG9Db25zdW1hYmxlQXJyYXkoa2V5cykuZXZlcnkoZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBzb3VyY2VWYWx1ZSA9IHNvdXJjZVtrZXldO1xuICAgIHZhciB0YXJnZXRWYWx1ZSA9IHRhcmdldFtrZXldO1xuXG4gICAgaWYgKHR5cGVvZiBzb3VyY2VWYWx1ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgdGFyZ2V0VmFsdWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBzb3VyY2VWYWx1ZSA9PT0gdGFyZ2V0VmFsdWU7XG4gIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRHZXRWYWx1ZUZyb21FdmVudCh2YWx1ZVByb3BOYW1lKSB7XG4gIHZhciBldmVudCA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMSA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1sxXTtcblxuICBpZiAoZXZlbnQgJiYgZXZlbnQudGFyZ2V0ICYmIF90eXBlb2YoZXZlbnQudGFyZ2V0KSA9PT0gJ29iamVjdCcgJiYgdmFsdWVQcm9wTmFtZSBpbiBldmVudC50YXJnZXQpIHtcbiAgICByZXR1cm4gZXZlbnQudGFyZ2V0W3ZhbHVlUHJvcE5hbWVdO1xuICB9XG5cbiAgcmV0dXJuIGV2ZW50O1xufVxuLyoqXG4gKiBNb3ZlcyBhbiBhcnJheSBpdGVtIGZyb20gb25lIHBvc2l0aW9uIGluIGFuIGFycmF5IHRvIGFub3RoZXIuXG4gKlxuICogTm90ZTogVGhpcyBpcyBhIHB1cmUgZnVuY3Rpb24gc28gYSBuZXcgYXJyYXkgd2lsbCBiZSByZXR1cm5lZCwgaW5zdGVhZFxuICogb2YgYWx0ZXJpbmcgdGhlIGFycmF5IGFyZ3VtZW50LlxuICpcbiAqIEBwYXJhbSBhcnJheSAgICAgICAgIEFycmF5IGluIHdoaWNoIHRvIG1vdmUgYW4gaXRlbS4gICAgICAgICAocmVxdWlyZWQpXG4gKiBAcGFyYW0gbW92ZUluZGV4ICAgICBUaGUgaW5kZXggb2YgdGhlIGl0ZW0gdG8gbW92ZS4gICAgICAgICAgKHJlcXVpcmVkKVxuICogQHBhcmFtIHRvSW5kZXggICAgICAgVGhlIGluZGV4IHRvIG1vdmUgaXRlbSBhdCBtb3ZlSW5kZXggdG8uIChyZXF1aXJlZClcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbW92ZShhcnJheSwgbW92ZUluZGV4LCB0b0luZGV4KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgaWYgKG1vdmVJbmRleCA8IDAgfHwgbW92ZUluZGV4ID49IGxlbmd0aCB8fCB0b0luZGV4IDwgMCB8fCB0b0luZGV4ID49IGxlbmd0aCkge1xuICAgIHJldHVybiBhcnJheTtcbiAgfVxuXG4gIHZhciBpdGVtID0gYXJyYXlbbW92ZUluZGV4XTtcbiAgdmFyIGRpZmYgPSBtb3ZlSW5kZXggLSB0b0luZGV4O1xuXG4gIGlmIChkaWZmID4gMCkge1xuICAgIC8vIG1vdmUgbGVmdFxuICAgIHJldHVybiBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KGFycmF5LnNsaWNlKDAsIHRvSW5kZXgpKSwgW2l0ZW1dLCBfdG9Db25zdW1hYmxlQXJyYXkoYXJyYXkuc2xpY2UodG9JbmRleCwgbW92ZUluZGV4KSksIF90b0NvbnN1bWFibGVBcnJheShhcnJheS5zbGljZShtb3ZlSW5kZXggKyAxLCBsZW5ndGgpKSk7XG4gIH1cblxuICBpZiAoZGlmZiA8IDApIHtcbiAgICAvLyBtb3ZlIHJpZ2h0XG4gICAgcmV0dXJuIFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoYXJyYXkuc2xpY2UoMCwgbW92ZUluZGV4KSksIF90b0NvbnN1bWFibGVBcnJheShhcnJheS5zbGljZShtb3ZlSW5kZXggKyAxLCB0b0luZGV4ICsgMSkpLCBbaXRlbV0sIF90b0NvbnN1bWFibGVBcnJheShhcnJheS5zbGljZSh0b0luZGV4ICsgMSwgbGVuZ3RoKSkpO1xuICB9XG5cbiAgcmV0dXJuIGFycmF5O1xufSIsImltcG9ydCBfdG9Db25zdW1hYmxlQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvQ29uc3VtYWJsZUFycmF5XCI7XG5pbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eVwiO1xuaW1wb3J0IF9yZWdlbmVyYXRvclJ1bnRpbWUgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3JlZ2VuZXJhdG9yUnVudGltZVwiO1xuaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDJcIjtcbmltcG9ydCBfYXN5bmNUb0dlbmVyYXRvciBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvclwiO1xuaW1wb3J0IFJhd0FzeW5jVmFsaWRhdG9yIGZyb20gJ2FzeW5jLXZhbGlkYXRvcic7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgd2FybmluZyBmcm9tIFwicmMtdXRpbC9lcy93YXJuaW5nXCI7XG5pbXBvcnQgeyBkZWZhdWx0VmFsaWRhdGVNZXNzYWdlcyB9IGZyb20gJy4vbWVzc2FnZXMnO1xuaW1wb3J0IHsgc2V0VmFsdWVzIH0gZnJvbSAnLi92YWx1ZVV0aWwnOyAvLyBSZW1vdmUgaW5jb3JyZWN0IG9yaWdpbmFsIHRzIGRlZmluZVxuXG52YXIgQXN5bmNWYWxpZGF0b3IgPSBSYXdBc3luY1ZhbGlkYXRvcjtcbi8qKlxuICogUmVwbGFjZSB3aXRoIHRlbXBsYXRlLlxuICogICBgSSdtICR7bmFtZX1gICsgeyBuYW1lOiAnYmFtYm9vJyB9ID0gSSdtIGJhbWJvb1xuICovXG5cbmZ1bmN0aW9uIHJlcGxhY2VNZXNzYWdlKHRlbXBsYXRlLCBrdikge1xuICByZXR1cm4gdGVtcGxhdGUucmVwbGFjZSgvXFwkXFx7XFx3K1xcfS9nLCBmdW5jdGlvbiAoc3RyKSB7XG4gICAgdmFyIGtleSA9IHN0ci5zbGljZSgyLCAtMSk7XG4gICAgcmV0dXJuIGt2W2tleV07XG4gIH0pO1xufVxuXG52YXIgQ09ERV9MT0dJQ19FUlJPUiA9ICdDT0RFX0xPR0lDX0VSUk9SJztcblxuZnVuY3Rpb24gdmFsaWRhdGVSdWxlKF94LCBfeDIsIF94MywgX3g0LCBfeDUpIHtcbiAgcmV0dXJuIF92YWxpZGF0ZVJ1bGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cbi8qKlxuICogV2UgdXNlIGBhc3luYy12YWxpZGF0b3JgIHRvIHZhbGlkYXRlIHRoZSB2YWx1ZS5cbiAqIEJ1dCBvbmx5IGNoZWNrIG9uZSB2YWx1ZSBpbiBhIHRpbWUgdG8gYXZvaWQgbmFtZVBhdGggdmFsaWRhdGUgaXNzdWUuXG4gKi9cblxuXG5mdW5jdGlvbiBfdmFsaWRhdGVSdWxlKCkge1xuICBfdmFsaWRhdGVSdWxlID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lKCkubWFyayhmdW5jdGlvbiBfY2FsbGVlMihuYW1lLCB2YWx1ZSwgcnVsZSwgb3B0aW9ucywgbWVzc2FnZVZhcmlhYmxlcykge1xuICAgIHZhciBjbG9uZVJ1bGUsIG9yaWdpblZhbGlkYXRvciwgc3ViUnVsZUZpZWxkLCB2YWxpZGF0b3IsIG1lc3NhZ2VzLCByZXN1bHQsIHN1YlJlc3VsdHMsIGt2LCBmaWxsVmFyaWFibGVSZXN1bHQ7XG4gICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUoKS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHtcbiAgICAgIHdoaWxlICgxKSB7XG4gICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkge1xuICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgIGNsb25lUnVsZSA9IF9vYmplY3RTcHJlYWQoe30sIHJ1bGUpOyAvLyBCdWcgb2YgYGFzeW5jLXZhbGlkYXRvcmBcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdC1jb21wb25lbnQvZmllbGQtZm9ybS9pc3N1ZXMvMzE2XG4gICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vcmVhY3QtY29tcG9uZW50L2ZpZWxkLWZvcm0vaXNzdWVzLzMxM1xuXG4gICAgICAgICAgICBkZWxldGUgY2xvbmVSdWxlLnJ1bGVJbmRleDtcblxuICAgICAgICAgICAgaWYgKGNsb25lUnVsZS52YWxpZGF0b3IpIHtcbiAgICAgICAgICAgICAgb3JpZ2luVmFsaWRhdG9yID0gY2xvbmVSdWxlLnZhbGlkYXRvcjtcblxuICAgICAgICAgICAgICBjbG9uZVJ1bGUudmFsaWRhdG9yID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gb3JpZ2luVmFsaWRhdG9yLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoQ09ERV9MT0dJQ19FUlJPUik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSAvLyBXZSBzaG91bGQgc3BlY2lhbCBoYW5kbGUgYXJyYXkgdmFsaWRhdGVcblxuXG4gICAgICAgICAgICBzdWJSdWxlRmllbGQgPSBudWxsO1xuXG4gICAgICAgICAgICBpZiAoY2xvbmVSdWxlICYmIGNsb25lUnVsZS50eXBlID09PSAnYXJyYXknICYmIGNsb25lUnVsZS5kZWZhdWx0RmllbGQpIHtcbiAgICAgICAgICAgICAgc3ViUnVsZUZpZWxkID0gY2xvbmVSdWxlLmRlZmF1bHRGaWVsZDtcbiAgICAgICAgICAgICAgZGVsZXRlIGNsb25lUnVsZS5kZWZhdWx0RmllbGQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhbGlkYXRvciA9IG5ldyBBc3luY1ZhbGlkYXRvcihfZGVmaW5lUHJvcGVydHkoe30sIG5hbWUsIFtjbG9uZVJ1bGVdKSk7XG4gICAgICAgICAgICBtZXNzYWdlcyA9IHNldFZhbHVlcyh7fSwgZGVmYXVsdFZhbGlkYXRlTWVzc2FnZXMsIG9wdGlvbnMudmFsaWRhdGVNZXNzYWdlcyk7XG4gICAgICAgICAgICB2YWxpZGF0b3IubWVzc2FnZXMobWVzc2FnZXMpO1xuICAgICAgICAgICAgcmVzdWx0ID0gW107XG4gICAgICAgICAgICBfY29udGV4dDIucHJldiA9IDk7XG4gICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDEyO1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2YWxpZGF0b3IudmFsaWRhdGUoX2RlZmluZVByb3BlcnR5KHt9LCBuYW1lLCB2YWx1ZSksIF9vYmplY3RTcHJlYWQoe30sIG9wdGlvbnMpKSk7XG5cbiAgICAgICAgICBjYXNlIDEyOlxuICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAxNztcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAxNDpcbiAgICAgICAgICAgIF9jb250ZXh0Mi5wcmV2ID0gMTQ7XG4gICAgICAgICAgICBfY29udGV4dDIudDAgPSBfY29udGV4dDJbXCJjYXRjaFwiXSg5KTtcblxuICAgICAgICAgICAgaWYgKF9jb250ZXh0Mi50MC5lcnJvcnMpIHtcbiAgICAgICAgICAgICAgcmVzdWx0ID0gX2NvbnRleHQyLnQwLmVycm9ycy5tYXAoZnVuY3Rpb24gKF9yZWY0LCBpbmRleCkge1xuICAgICAgICAgICAgICAgIHZhciBtZXNzYWdlID0gX3JlZjQubWVzc2FnZTtcbiAgICAgICAgICAgICAgICB2YXIgbWVyZ2VkTWVzc2FnZSA9IG1lc3NhZ2UgPT09IENPREVfTE9HSUNfRVJST1IgPyBtZXNzYWdlcy5kZWZhdWx0IDogbWVzc2FnZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KG1lcmdlZE1lc3NhZ2UpID9cbiAgICAgICAgICAgICAgICAvKiNfX1BVUkVfXyovXG4gICAgICAgICAgICAgICAgLy8gV3JhcCBSZWFjdE5vZGUgd2l0aCBga2V5YFxuICAgICAgICAgICAgICAgIFJlYWN0LmNsb25lRWxlbWVudChtZXJnZWRNZXNzYWdlLCB7XG4gICAgICAgICAgICAgICAgICBrZXk6IFwiZXJyb3JfXCIuY29uY2F0KGluZGV4KVxuICAgICAgICAgICAgICAgIH0pIDogbWVyZ2VkTWVzc2FnZTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICBjYXNlIDE3OlxuICAgICAgICAgICAgaWYgKCEoIXJlc3VsdC5sZW5ndGggJiYgc3ViUnVsZUZpZWxkKSkge1xuICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDIyO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAyMDtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbCh2YWx1ZS5tYXAoZnVuY3Rpb24gKHN1YlZhbHVlLCBpKSB7XG4gICAgICAgICAgICAgIHJldHVybiB2YWxpZGF0ZVJ1bGUoXCJcIi5jb25jYXQobmFtZSwgXCIuXCIpLmNvbmNhdChpKSwgc3ViVmFsdWUsIHN1YlJ1bGVGaWVsZCwgb3B0aW9ucywgbWVzc2FnZVZhcmlhYmxlcyk7XG4gICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICBjYXNlIDIwOlxuICAgICAgICAgICAgc3ViUmVzdWx0cyA9IF9jb250ZXh0Mi5zZW50O1xuICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoXCJyZXR1cm5cIiwgc3ViUmVzdWx0cy5yZWR1Y2UoZnVuY3Rpb24gKHByZXYsIGVycm9ycykge1xuICAgICAgICAgICAgICByZXR1cm4gW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShwcmV2KSwgX3RvQ29uc3VtYWJsZUFycmF5KGVycm9ycykpO1xuICAgICAgICAgICAgfSwgW10pKTtcblxuICAgICAgICAgIGNhc2UgMjI6XG4gICAgICAgICAgICAvLyBSZXBsYWNlIG1lc3NhZ2Ugd2l0aCB2YXJpYWJsZXNcbiAgICAgICAgICAgIGt2ID0gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBydWxlKSwge30sIHtcbiAgICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgICAgZW51bTogKHJ1bGUuZW51bSB8fCBbXSkuam9pbignLCAnKVxuICAgICAgICAgICAgfSwgbWVzc2FnZVZhcmlhYmxlcyk7XG4gICAgICAgICAgICBmaWxsVmFyaWFibGVSZXN1bHQgPSByZXN1bHQubWFwKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICBpZiAodHlwZW9mIGVycm9yID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXBsYWNlTWVzc2FnZShlcnJvciwga3YpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmFicnVwdChcInJldHVyblwiLCBmaWxsVmFyaWFibGVSZXN1bHQpO1xuXG4gICAgICAgICAgY2FzZSAyNTpcbiAgICAgICAgICBjYXNlIFwiZW5kXCI6XG4gICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIF9jYWxsZWUyLCBudWxsLCBbWzksIDE0XV0pO1xuICB9KSk7XG4gIHJldHVybiBfdmFsaWRhdGVSdWxlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZVJ1bGVzKG5hbWVQYXRoLCB2YWx1ZSwgcnVsZXMsIG9wdGlvbnMsIHZhbGlkYXRlRmlyc3QsIG1lc3NhZ2VWYXJpYWJsZXMpIHtcbiAgdmFyIG5hbWUgPSBuYW1lUGF0aC5qb2luKCcuJyk7IC8vIEZpbGwgcnVsZSB3aXRoIGNvbnRleHRcblxuICB2YXIgZmlsbGVkUnVsZXMgPSBydWxlcy5tYXAoZnVuY3Rpb24gKGN1cnJlbnRSdWxlLCBydWxlSW5kZXgpIHtcbiAgICB2YXIgb3JpZ2luVmFsaWRhdG9yRnVuYyA9IGN1cnJlbnRSdWxlLnZhbGlkYXRvcjtcblxuICAgIHZhciBjbG9uZVJ1bGUgPSBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGN1cnJlbnRSdWxlKSwge30sIHtcbiAgICAgIHJ1bGVJbmRleDogcnVsZUluZGV4XG4gICAgfSk7IC8vIFJlcGxhY2UgdmFsaWRhdG9yIGlmIG5lZWRlZFxuXG5cbiAgICBpZiAob3JpZ2luVmFsaWRhdG9yRnVuYykge1xuICAgICAgY2xvbmVSdWxlLnZhbGlkYXRvciA9IGZ1bmN0aW9uIChydWxlLCB2YWwsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBoYXNQcm9taXNlID0gZmFsc2U7IC8vIFdyYXAgY2FsbGJhY2sgb25seSBhY2NlcHQgd2hlbiBwcm9taXNlIG5vdCBwcm92aWRlZFxuXG4gICAgICAgIHZhciB3cmFwcGVkQ2FsbGJhY2sgPSBmdW5jdGlvbiB3cmFwcGVkQ2FsbGJhY2soKSB7XG4gICAgICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIFdhaXQgYSB0aWNrIHRvIG1ha2Ugc3VyZSByZXR1cm4gdHlwZSBpcyBhIHByb21pc2VcbiAgICAgICAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHdhcm5pbmcoIWhhc1Byb21pc2UsICdZb3VyIHZhbGlkYXRvciBmdW5jdGlvbiBoYXMgYWxyZWFkeSByZXR1cm4gYSBwcm9taXNlLiBgY2FsbGJhY2tgIHdpbGwgYmUgaWdub3JlZC4nKTtcblxuICAgICAgICAgICAgaWYgKCFoYXNQcm9taXNlKSB7XG4gICAgICAgICAgICAgIGNhbGxiYWNrLmFwcGx5KHZvaWQgMCwgYXJncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH07IC8vIEdldCBwcm9taXNlXG5cblxuICAgICAgICB2YXIgcHJvbWlzZSA9IG9yaWdpblZhbGlkYXRvckZ1bmMocnVsZSwgdmFsLCB3cmFwcGVkQ2FsbGJhY2spO1xuICAgICAgICBoYXNQcm9taXNlID0gcHJvbWlzZSAmJiB0eXBlb2YgcHJvbWlzZS50aGVuID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBwcm9taXNlLmNhdGNoID09PSAnZnVuY3Rpb24nO1xuICAgICAgICAvKipcbiAgICAgICAgICogMS4gVXNlIHByb21pc2UgYXMgdGhlIGZpcnN0IHByaW9yaXR5LlxuICAgICAgICAgKiAyLiBJZiBwcm9taXNlIG5vdCBleGlzdCwgdXNlIGNhbGxiYWNrIHdpdGggd2FybmluZyBpbnN0ZWFkXG4gICAgICAgICAqL1xuXG4gICAgICAgIHdhcm5pbmcoaGFzUHJvbWlzZSwgJ2BjYWxsYmFja2AgaXMgZGVwcmVjYXRlZC4gUGxlYXNlIHJldHVybiBhIHByb21pc2UgaW5zdGVhZC4nKTtcblxuICAgICAgICBpZiAoaGFzUHJvbWlzZSkge1xuICAgICAgICAgIHByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKGVyciB8fCAnICcpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBjbG9uZVJ1bGU7XG4gIH0pLnNvcnQoZnVuY3Rpb24gKF9yZWYsIF9yZWYyKSB7XG4gICAgdmFyIHcxID0gX3JlZi53YXJuaW5nT25seSxcbiAgICAgICAgaTEgPSBfcmVmLnJ1bGVJbmRleDtcbiAgICB2YXIgdzIgPSBfcmVmMi53YXJuaW5nT25seSxcbiAgICAgICAgaTIgPSBfcmVmMi5ydWxlSW5kZXg7XG5cbiAgICBpZiAoISF3MSA9PT0gISF3Mikge1xuICAgICAgLy8gTGV0IGtlZXAgb3JpZ2luIG9yZGVyXG4gICAgICByZXR1cm4gaTEgLSBpMjtcbiAgICB9XG5cbiAgICBpZiAodzEpIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH1cblxuICAgIHJldHVybiAtMTtcbiAgfSk7IC8vIERvIHZhbGlkYXRlIHJ1bGVzXG5cbiAgdmFyIHN1bW1hcnlQcm9taXNlO1xuXG4gIGlmICh2YWxpZGF0ZUZpcnN0ID09PSB0cnVlKSB7XG4gICAgLy8gPj4+Pj4gVmFsaWRhdGUgYnkgc2VyaWFsaXphdGlvblxuICAgIHN1bW1hcnlQcm9taXNlID0gbmV3IFByb21pc2UoIC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3JlZjMgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUoKS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHZhciBpLCBydWxlLCBlcnJvcnM7XG4gICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lKCkud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkge1xuICAgICAgICAgIHdoaWxlICgxKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7XG4gICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICBpID0gMDtcblxuICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgaWYgKCEoaSA8IGZpbGxlZFJ1bGVzLmxlbmd0aCkpIHtcbiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxMjtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJ1bGUgPSBmaWxsZWRSdWxlc1tpXTtcbiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsaWRhdGVSdWxlKG5hbWUsIHZhbHVlLCBydWxlLCBvcHRpb25zLCBtZXNzYWdlVmFyaWFibGVzKTtcblxuICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgZXJyb3JzID0gX2NvbnRleHQuc2VudDtcblxuICAgICAgICAgICAgICAgIGlmICghZXJyb3JzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDk7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZWplY3QoW3tcbiAgICAgICAgICAgICAgICAgIGVycm9yczogZXJyb3JzLFxuICAgICAgICAgICAgICAgICAgcnVsZTogcnVsZVxuICAgICAgICAgICAgICAgIH1dKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KFwicmV0dXJuXCIpO1xuXG4gICAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgICBpICs9IDE7XG4gICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSAxMjpcbiAgICAgICAgICAgICAgICAvKiBlc2xpbnQtZW5hYmxlICovXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShbXSk7XG5cbiAgICAgICAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgICAgICAgY2FzZSBcImVuZFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LCBfY2FsbGVlKTtcbiAgICAgIH0pKTtcblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChfeDYsIF94Nykge1xuICAgICAgICByZXR1cm4gX3JlZjMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gICAgfSgpKTtcbiAgfSBlbHNlIHtcbiAgICAvLyA+Pj4+PiBWYWxpZGF0ZSBieSBwYXJhbGxlbFxuICAgIHZhciBydWxlUHJvbWlzZXMgPSBmaWxsZWRSdWxlcy5tYXAoZnVuY3Rpb24gKHJ1bGUpIHtcbiAgICAgIHJldHVybiB2YWxpZGF0ZVJ1bGUobmFtZSwgdmFsdWUsIHJ1bGUsIG9wdGlvbnMsIG1lc3NhZ2VWYXJpYWJsZXMpLnRoZW4oZnVuY3Rpb24gKGVycm9ycykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGVycm9yczogZXJyb3JzLFxuICAgICAgICAgIHJ1bGU6IHJ1bGVcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHN1bW1hcnlQcm9taXNlID0gKHZhbGlkYXRlRmlyc3QgPyBmaW5pc2hPbkZpcnN0RmFpbGVkKHJ1bGVQcm9taXNlcykgOiBmaW5pc2hPbkFsbEZhaWxlZChydWxlUHJvbWlzZXMpKS50aGVuKGZ1bmN0aW9uIChlcnJvcnMpIHtcbiAgICAgIC8vIEFsd2F5cyBjaGFuZ2UgdG8gcmVqZWN0aW9uIGZvciBGaWVsZCB0byBjYXRjaFxuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9ycyk7XG4gICAgfSk7XG4gIH0gLy8gSW50ZXJuYWwgY2F0Y2ggZXJyb3IgdG8gYXZvaWQgY29uc29sZSBlcnJvciBsb2cuXG5cblxuICBzdW1tYXJ5UHJvbWlzZS5jYXRjaChmdW5jdGlvbiAoZSkge1xuICAgIHJldHVybiBlO1xuICB9KTtcbiAgcmV0dXJuIHN1bW1hcnlQcm9taXNlO1xufVxuXG5mdW5jdGlvbiBmaW5pc2hPbkFsbEZhaWxlZChfeDgpIHtcbiAgcmV0dXJuIF9maW5pc2hPbkFsbEZhaWxlZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBfZmluaXNoT25BbGxGYWlsZWQoKSB7XG4gIF9maW5pc2hPbkFsbEZhaWxlZCA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZSgpLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTMocnVsZVByb21pc2VzKSB7XG4gICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUoKS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUzJChfY29udGV4dDMpIHtcbiAgICAgIHdoaWxlICgxKSB7XG4gICAgICAgIHN3aXRjaCAoX2NvbnRleHQzLnByZXYgPSBfY29udGV4dDMubmV4dCkge1xuICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuYWJydXB0KFwicmV0dXJuXCIsIFByb21pc2UuYWxsKHJ1bGVQcm9taXNlcykudGhlbihmdW5jdGlvbiAoZXJyb3JzTGlzdCkge1xuICAgICAgICAgICAgICB2YXIgX3JlZjU7XG5cbiAgICAgICAgICAgICAgdmFyIGVycm9ycyA9IChfcmVmNSA9IFtdKS5jb25jYXQuYXBwbHkoX3JlZjUsIF90b0NvbnN1bWFibGVBcnJheShlcnJvcnNMaXN0KSk7XG5cbiAgICAgICAgICAgICAgcmV0dXJuIGVycm9ycztcbiAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBjYXNlIFwiZW5kXCI6XG4gICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLnN0b3AoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIF9jYWxsZWUzKTtcbiAgfSkpO1xuICByZXR1cm4gX2ZpbmlzaE9uQWxsRmFpbGVkLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIGZpbmlzaE9uRmlyc3RGYWlsZWQoX3g5KSB7XG4gIHJldHVybiBfZmluaXNoT25GaXJzdEZhaWxlZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBfZmluaXNoT25GaXJzdEZhaWxlZCgpIHtcbiAgX2ZpbmlzaE9uRmlyc3RGYWlsZWQgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUoKS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU0KHJ1bGVQcm9taXNlcykge1xuICAgIHZhciBjb3VudDtcbiAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZSgpLndyYXAoZnVuY3Rpb24gX2NhbGxlZTQkKF9jb250ZXh0NCkge1xuICAgICAgd2hpbGUgKDEpIHtcbiAgICAgICAgc3dpdGNoIChfY29udGV4dDQucHJldiA9IF9jb250ZXh0NC5uZXh0KSB7XG4gICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgY291bnQgPSAwO1xuICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NC5hYnJ1cHQoXCJyZXR1cm5cIiwgbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgICAgICAgcnVsZVByb21pc2VzLmZvckVhY2goZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgICAgICAgICBwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHJ1bGVFcnJvcikge1xuICAgICAgICAgICAgICAgICAgaWYgKHJ1bGVFcnJvci5lcnJvcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoW3J1bGVFcnJvcl0pO1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICBjb3VudCArPSAxO1xuXG4gICAgICAgICAgICAgICAgICBpZiAoY291bnQgPT09IHJ1bGVQcm9taXNlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShbXSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIGNhc2UgXCJlbmRcIjpcbiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuc3RvcCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwgX2NhbGxlZTQpO1xuICB9KSk7XG4gIHJldHVybiBfZmluaXNoT25GaXJzdEZhaWxlZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5XCI7XG5pbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMlwiO1xuaW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdG9Db25zdW1hYmxlQXJyYXlcIjtcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrXCI7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzc1wiO1xuaW1wb3J0IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNcIjtcbmltcG9ydCBfY3JlYXRlU3VwZXIgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZVN1cGVyXCI7XG52YXIgX2V4Y2x1ZGVkID0gW1wibmFtZVwiXTtcbmltcG9ydCB0b0NoaWxkcmVuQXJyYXkgZnJvbSBcInJjLXV0aWwvZXMvQ2hpbGRyZW4vdG9BcnJheVwiO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSBcInJjLXV0aWwvZXMvd2FybmluZ1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IEZpZWxkQ29udGV4dCwgeyBIT09LX01BUksgfSBmcm9tICcuL0ZpZWxkQ29udGV4dCc7XG5pbXBvcnQgeyB0b0FycmF5IH0gZnJvbSAnLi91dGlscy90eXBlVXRpbCc7XG5pbXBvcnQgeyB2YWxpZGF0ZVJ1bGVzIH0gZnJvbSAnLi91dGlscy92YWxpZGF0ZVV0aWwnO1xuaW1wb3J0IHsgY29udGFpbnNOYW1lUGF0aCwgZGVmYXVsdEdldFZhbHVlRnJvbUV2ZW50LCBnZXROYW1lUGF0aCwgZ2V0VmFsdWUgfSBmcm9tICcuL3V0aWxzL3ZhbHVlVXRpbCc7XG52YXIgRU1QVFlfRVJST1JTID0gW107XG5cbmZ1bmN0aW9uIHJlcXVpcmVVcGRhdGUoc2hvdWxkVXBkYXRlLCBwcmV2LCBuZXh0LCBwcmV2VmFsdWUsIG5leHRWYWx1ZSwgaW5mbykge1xuICBpZiAodHlwZW9mIHNob3VsZFVwZGF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBzaG91bGRVcGRhdGUocHJldiwgbmV4dCwgJ3NvdXJjZScgaW4gaW5mbyA/IHtcbiAgICAgIHNvdXJjZTogaW5mby5zb3VyY2VcbiAgICB9IDoge30pO1xuICB9XG5cbiAgcmV0dXJuIHByZXZWYWx1ZSAhPT0gbmV4dFZhbHVlO1xufSAvLyBXZSB1c2UgQ2xhc3MgaW5zdGVhZCBvZiBIb29rcyBoZXJlIHNpbmNlIGl0IHdpbGwgY29zdCBtdWNoIGNvZGUgYnkgdXNpbmcgSG9va3MuXG5cblxudmFyIEZpZWxkID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhGaWVsZCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihGaWVsZCk7XG5cbiAgLyoqXG4gICAqIEZvbGxvdyBzdGF0ZSBzaG91bGQgbm90IG1hbmFnZW1lbnQgaW4gU3RhdGUgc2luY2UgaXQgd2lsbCBhc3luYyB1cGRhdGUgYnkgUmVhY3QuXG4gICAqIFRoaXMgbWFrZXMgZmlyc3QgcmVuZGVyIG9mIGZvcm0gY2FuIG5vdCBnZXQgY29ycmVjdCBzdGF0ZSB2YWx1ZS5cbiAgICovXG5cbiAgLyoqXG4gICAqIE1hcmsgd2hlbiB0b3VjaGVkICYgdmFsaWRhdGVkLiBDdXJyZW50bHkgb25seSB1c2VkIGZvciBgZGVwZW5kZW5jaWVzYC5cbiAgICogTm90ZSB0aGF0IHdlIGRvIG5vdCB0aGluayBmaWVsZCB3aXRoIGBpbml0aWFsVmFsdWVgIGlzIGRpcnR5XG4gICAqIGJ1dCB0aGlzIHdpbGwgYmUgYnkgYGlzRmllbGREaXJ0eWAgZnVuYy5cbiAgICovXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSBTdWJzY3JpcHRpb25zID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICBmdW5jdGlvbiBGaWVsZChwcm9wcykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBGaWVsZCk7XG5cbiAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHByb3BzKTsgLy8gUmVnaXN0ZXIgb24gaW5pdFxuXG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICByZXNldENvdW50OiAwXG4gICAgfTtcbiAgICBfdGhpcy5jYW5jZWxSZWdpc3RlckZ1bmMgPSBudWxsO1xuICAgIF90aGlzLm1vdW50ZWQgPSBmYWxzZTtcbiAgICBfdGhpcy50b3VjaGVkID0gZmFsc2U7XG4gICAgX3RoaXMuZGlydHkgPSBmYWxzZTtcbiAgICBfdGhpcy52YWxpZGF0ZVByb21pc2UgPSBudWxsO1xuICAgIF90aGlzLnByZXZWYWxpZGF0aW5nID0gdm9pZCAwO1xuICAgIF90aGlzLmVycm9ycyA9IEVNUFRZX0VSUk9SUztcbiAgICBfdGhpcy53YXJuaW5ncyA9IEVNUFRZX0VSUk9SUztcblxuICAgIF90aGlzLmNhbmNlbFJlZ2lzdGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgcHJlc2VydmUgPSBfdGhpcyRwcm9wcy5wcmVzZXJ2ZSxcbiAgICAgICAgICBpc0xpc3RGaWVsZCA9IF90aGlzJHByb3BzLmlzTGlzdEZpZWxkLFxuICAgICAgICAgIG5hbWUgPSBfdGhpcyRwcm9wcy5uYW1lO1xuXG4gICAgICBpZiAoX3RoaXMuY2FuY2VsUmVnaXN0ZXJGdW5jKSB7XG4gICAgICAgIF90aGlzLmNhbmNlbFJlZ2lzdGVyRnVuYyhpc0xpc3RGaWVsZCwgcHJlc2VydmUsIGdldE5hbWVQYXRoKG5hbWUpKTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuY2FuY2VsUmVnaXN0ZXJGdW5jID0gbnVsbDtcbiAgICB9O1xuXG4gICAgX3RoaXMuZ2V0TmFtZVBhdGggPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMyID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgbmFtZSA9IF90aGlzJHByb3BzMi5uYW1lLFxuICAgICAgICAgIGZpZWxkQ29udGV4dCA9IF90aGlzJHByb3BzMi5maWVsZENvbnRleHQ7XG4gICAgICB2YXIgX2ZpZWxkQ29udGV4dCRwcmVmaXhOID0gZmllbGRDb250ZXh0LnByZWZpeE5hbWUsXG4gICAgICAgICAgcHJlZml4TmFtZSA9IF9maWVsZENvbnRleHQkcHJlZml4TiA9PT0gdm9pZCAwID8gW10gOiBfZmllbGRDb250ZXh0JHByZWZpeE47XG4gICAgICByZXR1cm4gbmFtZSAhPT0gdW5kZWZpbmVkID8gW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShwcmVmaXhOYW1lKSwgX3RvQ29uc3VtYWJsZUFycmF5KG5hbWUpKSA6IFtdO1xuICAgIH07XG5cbiAgICBfdGhpcy5nZXRSdWxlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBfdGhpcyRwcm9wczMkcnVsZXMgPSBfdGhpcyRwcm9wczMucnVsZXMsXG4gICAgICAgICAgcnVsZXMgPSBfdGhpcyRwcm9wczMkcnVsZXMgPT09IHZvaWQgMCA/IFtdIDogX3RoaXMkcHJvcHMzJHJ1bGVzLFxuICAgICAgICAgIGZpZWxkQ29udGV4dCA9IF90aGlzJHByb3BzMy5maWVsZENvbnRleHQ7XG4gICAgICByZXR1cm4gcnVsZXMubWFwKGZ1bmN0aW9uIChydWxlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgcnVsZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHJldHVybiBydWxlKGZpZWxkQ29udGV4dCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcnVsZTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfdGhpcy5yZWZyZXNoID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCFfdGhpcy5tb3VudGVkKSByZXR1cm47XG4gICAgICAvKipcbiAgICAgICAqIENsZWFuIHVwIGN1cnJlbnQgbm9kZS5cbiAgICAgICAqL1xuXG4gICAgICBfdGhpcy5zZXRTdGF0ZShmdW5jdGlvbiAoX3JlZikge1xuICAgICAgICB2YXIgcmVzZXRDb3VudCA9IF9yZWYucmVzZXRDb3VudDtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICByZXNldENvdW50OiByZXNldENvdW50ICsgMVxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF90aGlzLnRyaWdnZXJNZXRhRXZlbnQgPSBmdW5jdGlvbiAoZGVzdHJveSkge1xuICAgICAgdmFyIG9uTWV0YUNoYW5nZSA9IF90aGlzLnByb3BzLm9uTWV0YUNoYW5nZTtcbiAgICAgIG9uTWV0YUNoYW5nZSA9PT0gbnVsbCB8fCBvbk1ldGFDaGFuZ2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9uTWV0YUNoYW5nZShfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIF90aGlzLmdldE1ldGEoKSksIHt9LCB7XG4gICAgICAgIGRlc3Ryb3k6IGRlc3Ryb3lcbiAgICAgIH0pKTtcbiAgICB9O1xuXG4gICAgX3RoaXMub25TdG9yZUNoYW5nZSA9IGZ1bmN0aW9uIChwcmV2U3RvcmUsIG5hbWVQYXRoTGlzdCwgaW5mbykge1xuICAgICAgdmFyIF90aGlzJHByb3BzNCA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIHNob3VsZFVwZGF0ZSA9IF90aGlzJHByb3BzNC5zaG91bGRVcGRhdGUsXG4gICAgICAgICAgX3RoaXMkcHJvcHM0JGRlcGVuZGVuID0gX3RoaXMkcHJvcHM0LmRlcGVuZGVuY2llcyxcbiAgICAgICAgICBkZXBlbmRlbmNpZXMgPSBfdGhpcyRwcm9wczQkZGVwZW5kZW4gPT09IHZvaWQgMCA/IFtdIDogX3RoaXMkcHJvcHM0JGRlcGVuZGVuLFxuICAgICAgICAgIG9uUmVzZXQgPSBfdGhpcyRwcm9wczQub25SZXNldDtcbiAgICAgIHZhciBzdG9yZSA9IGluZm8uc3RvcmU7XG5cbiAgICAgIHZhciBuYW1lUGF0aCA9IF90aGlzLmdldE5hbWVQYXRoKCk7XG5cbiAgICAgIHZhciBwcmV2VmFsdWUgPSBfdGhpcy5nZXRWYWx1ZShwcmV2U3RvcmUpO1xuXG4gICAgICB2YXIgY3VyVmFsdWUgPSBfdGhpcy5nZXRWYWx1ZShzdG9yZSk7XG5cbiAgICAgIHZhciBuYW1lUGF0aE1hdGNoID0gbmFtZVBhdGhMaXN0ICYmIGNvbnRhaW5zTmFtZVBhdGgobmFtZVBhdGhMaXN0LCBuYW1lUGF0aCk7IC8vIGBzZXRGaWVsZHNWYWx1ZWAgaXMgYSBxdWljayBhY2Nlc3MgdG8gdXBkYXRlIHJlbGF0ZWQgc3RhdHVzXG5cbiAgICAgIGlmIChpbmZvLnR5cGUgPT09ICd2YWx1ZVVwZGF0ZScgJiYgaW5mby5zb3VyY2UgPT09ICdleHRlcm5hbCcgJiYgcHJldlZhbHVlICE9PSBjdXJWYWx1ZSkge1xuICAgICAgICBfdGhpcy50b3VjaGVkID0gdHJ1ZTtcbiAgICAgICAgX3RoaXMuZGlydHkgPSB0cnVlO1xuICAgICAgICBfdGhpcy52YWxpZGF0ZVByb21pc2UgPSBudWxsO1xuICAgICAgICBfdGhpcy5lcnJvcnMgPSBFTVBUWV9FUlJPUlM7XG4gICAgICAgIF90aGlzLndhcm5pbmdzID0gRU1QVFlfRVJST1JTO1xuXG4gICAgICAgIF90aGlzLnRyaWdnZXJNZXRhRXZlbnQoKTtcbiAgICAgIH1cblxuICAgICAgc3dpdGNoIChpbmZvLnR5cGUpIHtcbiAgICAgICAgY2FzZSAncmVzZXQnOlxuICAgICAgICAgIGlmICghbmFtZVBhdGhMaXN0IHx8IG5hbWVQYXRoTWF0Y2gpIHtcbiAgICAgICAgICAgIC8vIENsZWFuIHVwIHN0YXRlXG4gICAgICAgICAgICBfdGhpcy50b3VjaGVkID0gZmFsc2U7XG4gICAgICAgICAgICBfdGhpcy5kaXJ0eSA9IGZhbHNlO1xuICAgICAgICAgICAgX3RoaXMudmFsaWRhdGVQcm9taXNlID0gbnVsbDtcbiAgICAgICAgICAgIF90aGlzLmVycm9ycyA9IEVNUFRZX0VSUk9SUztcbiAgICAgICAgICAgIF90aGlzLndhcm5pbmdzID0gRU1QVFlfRVJST1JTO1xuXG4gICAgICAgICAgICBfdGhpcy50cmlnZ2VyTWV0YUV2ZW50KCk7XG5cbiAgICAgICAgICAgIG9uUmVzZXQgPT09IG51bGwgfHwgb25SZXNldCA9PT0gdm9pZCAwID8gdm9pZCAwIDogb25SZXNldCgpO1xuXG4gICAgICAgICAgICBfdGhpcy5yZWZyZXNoKCk7XG5cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICAvKipcbiAgICAgICAgICogSW4gY2FzZSBmaWVsZCB3aXRoIGBwcmVzZXJ2ZSA9IGZhbHNlYCBuZXN0IGRlcHMgbGlrZTpcbiAgICAgICAgICogLSBBID0gMSA9PiBzaG93IEJcbiAgICAgICAgICogLSBCID0gMSA9PiBzaG93IENcbiAgICAgICAgICogLSBSZXNldCBBLCBuZWVkIGNsZWFuIEIsIENcbiAgICAgICAgICovXG5cbiAgICAgICAgY2FzZSAncmVtb3ZlJzpcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZiAoc2hvdWxkVXBkYXRlKSB7XG4gICAgICAgICAgICAgIF90aGlzLnJlUmVuZGVyKCk7XG5cbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgY2FzZSAnc2V0RmllbGQnOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlmIChuYW1lUGF0aE1hdGNoKSB7XG4gICAgICAgICAgICAgIHZhciBkYXRhID0gaW5mby5kYXRhO1xuXG4gICAgICAgICAgICAgIGlmICgndG91Y2hlZCcgaW4gZGF0YSkge1xuICAgICAgICAgICAgICAgIF90aGlzLnRvdWNoZWQgPSBkYXRhLnRvdWNoZWQ7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoJ3ZhbGlkYXRpbmcnIGluIGRhdGEgJiYgISgnb3JpZ2luUkNGaWVsZCcgaW4gZGF0YSkpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy52YWxpZGF0ZVByb21pc2UgPSBkYXRhLnZhbGlkYXRpbmcgPyBQcm9taXNlLnJlc29sdmUoW10pIDogbnVsbDtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmICgnZXJyb3JzJyBpbiBkYXRhKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuZXJyb3JzID0gZGF0YS5lcnJvcnMgfHwgRU1QVFlfRVJST1JTO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKCd3YXJuaW5ncycgaW4gZGF0YSkge1xuICAgICAgICAgICAgICAgIF90aGlzLndhcm5pbmdzID0gZGF0YS53YXJuaW5ncyB8fCBFTVBUWV9FUlJPUlM7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBfdGhpcy5kaXJ0eSA9IHRydWU7XG5cbiAgICAgICAgICAgICAgX3RoaXMudHJpZ2dlck1ldGFFdmVudCgpO1xuXG4gICAgICAgICAgICAgIF90aGlzLnJlUmVuZGVyKCk7XG5cbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfSAvLyBIYW5kbGUgdXBkYXRlIGJ5IGBzZXRGaWVsZGAgd2l0aCBgc2hvdWxkVXBkYXRlYFxuXG5cbiAgICAgICAgICAgIGlmIChzaG91bGRVcGRhdGUgJiYgIW5hbWVQYXRoLmxlbmd0aCAmJiByZXF1aXJlVXBkYXRlKHNob3VsZFVwZGF0ZSwgcHJldlN0b3JlLCBzdG9yZSwgcHJldlZhbHVlLCBjdXJWYWx1ZSwgaW5mbykpIHtcbiAgICAgICAgICAgICAgX3RoaXMucmVSZW5kZXIoKTtcblxuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICBjYXNlICdkZXBlbmRlbmNpZXNVcGRhdGUnOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVHJpZ2dlciB3aGVuIG1hcmtlZCBgZGVwZW5kZW5jaWVzYCB1cGRhdGVkLiBSZWxhdGVkIGZpZWxkcyB3aWxsIGFsbCB1cGRhdGVcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdmFyIGRlcGVuZGVuY3lMaXN0ID0gZGVwZW5kZW5jaWVzLm1hcChnZXROYW1lUGF0aCk7IC8vIE5vIG5lZWQgZm9yIGBuYW1lUGF0aE1hdGhgIGNoZWNrIGFuZCBgc2hvdWxkVXBkYXRlYCBjaGVjaywgc2luY2UgYHZhbHVlVXBkYXRlYCB3aWxsIGJlXG4gICAgICAgICAgICAvLyBlbWl0dGVkIGVhcmxpZXIgYW5kIHRoZXkgd2lsbCB3b3JrIHRoZXJlXG4gICAgICAgICAgICAvLyBJZiBzZXQgaXQgbWF5IGNhdXNlIHVubmVjZXNzYXJ5IHR3aWNlIHJlcmVuZGVyaW5nXG5cbiAgICAgICAgICAgIGlmIChkZXBlbmRlbmN5TGlzdC5zb21lKGZ1bmN0aW9uIChkZXBlbmRlbmN5KSB7XG4gICAgICAgICAgICAgIHJldHVybiBjb250YWluc05hbWVQYXRoKGluZm8ucmVsYXRlZEZpZWxkcywgZGVwZW5kZW5jeSk7XG4gICAgICAgICAgICB9KSkge1xuICAgICAgICAgICAgICBfdGhpcy5yZVJlbmRlcigpO1xuXG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgLy8gMS4gSWYgYG5hbWVQYXRoYCBleGlzdHMgaW4gYG5hbWVQYXRoTGlzdGAsIG1lYW5zIGl0J3MgcmVsYXRlZCB2YWx1ZSBhbmQgc2hvdWxkIHVwZGF0ZVxuICAgICAgICAgIC8vICAgICAgRm9yIGV4YW1wbGUgPExpc3QgbmFtZT1cImxpc3RcIj48RmllbGQgbmFtZT17WydsaXN0JywgMF19PjwvTGlzdD5cbiAgICAgICAgICAvLyAgICAgIElmIGBuYW1lUGF0aExpc3RgIGlzIFtbJ2xpc3QnXV0gKExpc3QgdmFsdWUgdXBkYXRlKSwgRmllbGQgc2hvdWxkIGJlIHVwZGF0ZWRcbiAgICAgICAgICAvLyAgICAgIElmIGBuYW1lUGF0aExpc3RgIGlzIFtbJ2xpc3QnLCAwXV0gKEZpZWxkIHZhbHVlIHVwZGF0ZSksIExpc3Qgc2hvdWxkbid0IGJlIHVwZGF0ZWRcbiAgICAgICAgICAvLyAyLlxuICAgICAgICAgIC8vICAgMi4xIElmIGBkZXBlbmRlbmNpZXNgIGlzIHNldCwgYG5hbWVgIGlzIG5vdCBzZXQgYW5kIGBzaG91bGRVcGRhdGVgIGlzIG5vdCBzZXQsXG4gICAgICAgICAgLy8gICAgICAgZG9uJ3QgdXNlIGBzaG91bGRVcGRhdGVgLiBgZGVwZW5kZW5jaWVzYCBpcyB2aWV3IGFzIGEgc2hvcnRjdXQgaWYgYHNob3VsZFVwZGF0ZWBcbiAgICAgICAgICAvLyAgICAgICBpcyBub3QgcHJvdmlkZWRcbiAgICAgICAgICAvLyAgIDIuMiBJZiBgc2hvdWxkVXBkYXRlYCBwcm92aWRlZCwgdXNlIGN1c3RvbWl6ZSBsb2dpYyB0byB1cGRhdGUgdGhlIGZpZWxkXG4gICAgICAgICAgLy8gICAgICAgZWxzZSB0byBjaGVjayBpZiB2YWx1ZSBjaGFuZ2VkXG4gICAgICAgICAgaWYgKG5hbWVQYXRoTWF0Y2ggfHwgKCFkZXBlbmRlbmNpZXMubGVuZ3RoIHx8IG5hbWVQYXRoLmxlbmd0aCB8fCBzaG91bGRVcGRhdGUpICYmIHJlcXVpcmVVcGRhdGUoc2hvdWxkVXBkYXRlLCBwcmV2U3RvcmUsIHN0b3JlLCBwcmV2VmFsdWUsIGN1clZhbHVlLCBpbmZvKSkge1xuICAgICAgICAgICAgX3RoaXMucmVSZW5kZXIoKTtcblxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2hvdWxkVXBkYXRlID09PSB0cnVlKSB7XG4gICAgICAgIF90aGlzLnJlUmVuZGVyKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLnZhbGlkYXRlUnVsZXMgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgLy8gV2Ugc2hvdWxkIGZpeGVkIG5hbWVQYXRoICYgdmFsdWUgdG8gYXZvaWQgZGV2ZWxvcGVyIGNoYW5nZSB0aGVuIGJ5IGZvcm0gZnVuY3Rpb25cbiAgICAgIHZhciBuYW1lUGF0aCA9IF90aGlzLmdldE5hbWVQYXRoKCk7XG5cbiAgICAgIHZhciBjdXJyZW50VmFsdWUgPSBfdGhpcy5nZXRWYWx1ZSgpOyAvLyBGb3JjZSBjaGFuZ2UgdG8gYXN5bmMgdG8gYXZvaWQgcnVsZSBPT0QgdW5kZXIgcmVuZGVyUHJvcHMgZmllbGRcblxuXG4gICAgICB2YXIgcm9vdFByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFfdGhpcy5tb3VudGVkKSB7XG4gICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIF90aGlzJHByb3BzNSA9IF90aGlzLnByb3BzLFxuICAgICAgICAgICAgX3RoaXMkcHJvcHM1JHZhbGlkYXRlID0gX3RoaXMkcHJvcHM1LnZhbGlkYXRlRmlyc3QsXG4gICAgICAgICAgICB2YWxpZGF0ZUZpcnN0ID0gX3RoaXMkcHJvcHM1JHZhbGlkYXRlID09PSB2b2lkIDAgPyBmYWxzZSA6IF90aGlzJHByb3BzNSR2YWxpZGF0ZSxcbiAgICAgICAgICAgIG1lc3NhZ2VWYXJpYWJsZXMgPSBfdGhpcyRwcm9wczUubWVzc2FnZVZhcmlhYmxlcztcblxuICAgICAgICB2YXIgX3JlZjIgPSBvcHRpb25zIHx8IHt9LFxuICAgICAgICAgICAgdHJpZ2dlck5hbWUgPSBfcmVmMi50cmlnZ2VyTmFtZTtcblxuICAgICAgICB2YXIgZmlsdGVyZWRSdWxlcyA9IF90aGlzLmdldFJ1bGVzKCk7XG5cbiAgICAgICAgaWYgKHRyaWdnZXJOYW1lKSB7XG4gICAgICAgICAgZmlsdGVyZWRSdWxlcyA9IGZpbHRlcmVkUnVsZXMuZmlsdGVyKGZ1bmN0aW9uIChydWxlKSB7XG4gICAgICAgICAgICB2YXIgdmFsaWRhdGVUcmlnZ2VyID0gcnVsZS52YWxpZGF0ZVRyaWdnZXI7XG5cbiAgICAgICAgICAgIGlmICghdmFsaWRhdGVUcmlnZ2VyKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgdHJpZ2dlckxpc3QgPSB0b0FycmF5KHZhbGlkYXRlVHJpZ2dlcik7XG4gICAgICAgICAgICByZXR1cm4gdHJpZ2dlckxpc3QuaW5jbHVkZXModHJpZ2dlck5hbWUpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHByb21pc2UgPSB2YWxpZGF0ZVJ1bGVzKG5hbWVQYXRoLCBjdXJyZW50VmFsdWUsIGZpbHRlcmVkUnVsZXMsIG9wdGlvbnMsIHZhbGlkYXRlRmlyc3QsIG1lc3NhZ2VWYXJpYWJsZXMpO1xuICAgICAgICBwcm9taXNlLmNhdGNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgcmV0dXJuIGU7XG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBydWxlRXJyb3JzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBFTVBUWV9FUlJPUlM7XG5cbiAgICAgICAgICBpZiAoX3RoaXMudmFsaWRhdGVQcm9taXNlID09PSByb290UHJvbWlzZSkge1xuICAgICAgICAgICAgX3RoaXMudmFsaWRhdGVQcm9taXNlID0gbnVsbDsgLy8gR2V0IGVycm9ycyAmIHdhcm5pbmdzXG5cbiAgICAgICAgICAgIHZhciBuZXh0RXJyb3JzID0gW107XG4gICAgICAgICAgICB2YXIgbmV4dFdhcm5pbmdzID0gW107XG4gICAgICAgICAgICBydWxlRXJyb3JzLmZvckVhY2goZnVuY3Rpb24gKF9yZWYzKSB7XG4gICAgICAgICAgICAgIHZhciB3YXJuaW5nT25seSA9IF9yZWYzLnJ1bGUud2FybmluZ09ubHksXG4gICAgICAgICAgICAgICAgICBfcmVmMyRlcnJvcnMgPSBfcmVmMy5lcnJvcnMsXG4gICAgICAgICAgICAgICAgICBlcnJvcnMgPSBfcmVmMyRlcnJvcnMgPT09IHZvaWQgMCA/IEVNUFRZX0VSUk9SUyA6IF9yZWYzJGVycm9ycztcblxuICAgICAgICAgICAgICBpZiAod2FybmluZ09ubHkpIHtcbiAgICAgICAgICAgICAgICBuZXh0V2FybmluZ3MucHVzaC5hcHBseShuZXh0V2FybmluZ3MsIF90b0NvbnN1bWFibGVBcnJheShlcnJvcnMpKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBuZXh0RXJyb3JzLnB1c2guYXBwbHkobmV4dEVycm9ycywgX3RvQ29uc3VtYWJsZUFycmF5KGVycm9ycykpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIF90aGlzLmVycm9ycyA9IG5leHRFcnJvcnM7XG4gICAgICAgICAgICBfdGhpcy53YXJuaW5ncyA9IG5leHRXYXJuaW5ncztcblxuICAgICAgICAgICAgX3RoaXMudHJpZ2dlck1ldGFFdmVudCgpO1xuXG4gICAgICAgICAgICBfdGhpcy5yZVJlbmRlcigpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgICAgfSk7XG4gICAgICBfdGhpcy52YWxpZGF0ZVByb21pc2UgPSByb290UHJvbWlzZTtcbiAgICAgIF90aGlzLmRpcnR5ID0gdHJ1ZTtcbiAgICAgIF90aGlzLmVycm9ycyA9IEVNUFRZX0VSUk9SUztcbiAgICAgIF90aGlzLndhcm5pbmdzID0gRU1QVFlfRVJST1JTO1xuXG4gICAgICBfdGhpcy50cmlnZ2VyTWV0YUV2ZW50KCk7IC8vIEZvcmNlIHRyaWdnZXIgcmUtcmVuZGVyIHNpbmNlIHdlIG5lZWQgc3luYyByZW5kZXJQcm9wcyB3aXRoIG5ldyBtZXRhXG5cblxuICAgICAgX3RoaXMucmVSZW5kZXIoKTtcblxuICAgICAgcmV0dXJuIHJvb3RQcm9taXNlO1xuICAgIH07XG5cbiAgICBfdGhpcy5pc0ZpZWxkVmFsaWRhdGluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiAhIV90aGlzLnZhbGlkYXRlUHJvbWlzZTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaXNGaWVsZFRvdWNoZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RoaXMudG91Y2hlZDtcbiAgICB9O1xuXG4gICAgX3RoaXMuaXNGaWVsZERpcnR5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gVG91Y2hlZCBvciB2YWxpZGF0ZSBvciBoYXMgaW5pdGlhbFZhbHVlXG4gICAgICBpZiAoX3RoaXMuZGlydHkgfHwgX3RoaXMucHJvcHMuaW5pdGlhbFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IC8vIEZvcm0gc2V0IGluaXRpYWxWYWx1ZVxuXG5cbiAgICAgIHZhciBmaWVsZENvbnRleHQgPSBfdGhpcy5wcm9wcy5maWVsZENvbnRleHQ7XG5cbiAgICAgIHZhciBfZmllbGRDb250ZXh0JGdldEludGUgPSBmaWVsZENvbnRleHQuZ2V0SW50ZXJuYWxIb29rcyhIT09LX01BUkspLFxuICAgICAgICAgIGdldEluaXRpYWxWYWx1ZSA9IF9maWVsZENvbnRleHQkZ2V0SW50ZS5nZXRJbml0aWFsVmFsdWU7XG5cbiAgICAgIGlmIChnZXRJbml0aWFsVmFsdWUoX3RoaXMuZ2V0TmFtZVBhdGgoKSkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG5cbiAgICBfdGhpcy5nZXRFcnJvcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RoaXMuZXJyb3JzO1xuICAgIH07XG5cbiAgICBfdGhpcy5nZXRXYXJuaW5ncyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfdGhpcy53YXJuaW5ncztcbiAgICB9O1xuXG4gICAgX3RoaXMuaXNMaXN0RmllbGQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RoaXMucHJvcHMuaXNMaXN0RmllbGQ7XG4gICAgfTtcblxuICAgIF90aGlzLmlzTGlzdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfdGhpcy5wcm9wcy5pc0xpc3Q7XG4gICAgfTtcblxuICAgIF90aGlzLmlzUHJlc2VydmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RoaXMucHJvcHMucHJlc2VydmU7XG4gICAgfTtcblxuICAgIF90aGlzLmdldE1ldGEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBNYWtlIGVycm9yICYgdmFsaWRhdGluZyBpbiBjYWNoZSB0byBzYXZlIHBlcmZcbiAgICAgIF90aGlzLnByZXZWYWxpZGF0aW5nID0gX3RoaXMuaXNGaWVsZFZhbGlkYXRpbmcoKTtcbiAgICAgIHZhciBtZXRhID0ge1xuICAgICAgICB0b3VjaGVkOiBfdGhpcy5pc0ZpZWxkVG91Y2hlZCgpLFxuICAgICAgICB2YWxpZGF0aW5nOiBfdGhpcy5wcmV2VmFsaWRhdGluZyxcbiAgICAgICAgZXJyb3JzOiBfdGhpcy5lcnJvcnMsXG4gICAgICAgIHdhcm5pbmdzOiBfdGhpcy53YXJuaW5ncyxcbiAgICAgICAgbmFtZTogX3RoaXMuZ2V0TmFtZVBhdGgoKVxuICAgICAgfTtcbiAgICAgIHJldHVybiBtZXRhO1xuICAgIH07XG5cbiAgICBfdGhpcy5nZXRPbmx5Q2hpbGQgPSBmdW5jdGlvbiAoY2hpbGRyZW4pIHtcbiAgICAgIC8vIFN1cHBvcnQgcmVuZGVyIHByb3BzXG4gICAgICBpZiAodHlwZW9mIGNoaWxkcmVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHZhciBtZXRhID0gX3RoaXMuZ2V0TWV0YSgpO1xuXG4gICAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIF90aGlzLmdldE9ubHlDaGlsZChjaGlsZHJlbihfdGhpcy5nZXRDb250cm9sbGVkKCksIG1ldGEsIF90aGlzLnByb3BzLmZpZWxkQ29udGV4dCkpKSwge30sIHtcbiAgICAgICAgICBpc0Z1bmN0aW9uOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgfSAvLyBGaWxlZCBlbGVtZW50IG9ubHlcblxuXG4gICAgICB2YXIgY2hpbGRMaXN0ID0gdG9DaGlsZHJlbkFycmF5KGNoaWxkcmVuKTtcblxuICAgICAgaWYgKGNoaWxkTGlzdC5sZW5ndGggIT09IDEgfHwgISAvKiNfX1BVUkVfXyovUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGRMaXN0WzBdKSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNoaWxkOiBjaGlsZExpc3QsXG4gICAgICAgICAgaXNGdW5jdGlvbjogZmFsc2VcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY2hpbGQ6IGNoaWxkTGlzdFswXSxcbiAgICAgICAgaXNGdW5jdGlvbjogZmFsc2VcbiAgICAgIH07XG4gICAgfTtcblxuICAgIF90aGlzLmdldFZhbHVlID0gZnVuY3Rpb24gKHN0b3JlKSB7XG4gICAgICB2YXIgZ2V0RmllbGRzVmFsdWUgPSBfdGhpcy5wcm9wcy5maWVsZENvbnRleHQuZ2V0RmllbGRzVmFsdWU7XG5cbiAgICAgIHZhciBuYW1lUGF0aCA9IF90aGlzLmdldE5hbWVQYXRoKCk7XG5cbiAgICAgIHJldHVybiBnZXRWYWx1ZShzdG9yZSB8fCBnZXRGaWVsZHNWYWx1ZSh0cnVlKSwgbmFtZVBhdGgpO1xuICAgIH07XG5cbiAgICBfdGhpcy5nZXRDb250cm9sbGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGNoaWxkUHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgICAgdmFyIF90aGlzJHByb3BzNiA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIHRyaWdnZXIgPSBfdGhpcyRwcm9wczYudHJpZ2dlcixcbiAgICAgICAgICB2YWxpZGF0ZVRyaWdnZXIgPSBfdGhpcyRwcm9wczYudmFsaWRhdGVUcmlnZ2VyLFxuICAgICAgICAgIGdldFZhbHVlRnJvbUV2ZW50ID0gX3RoaXMkcHJvcHM2LmdldFZhbHVlRnJvbUV2ZW50LFxuICAgICAgICAgIG5vcm1hbGl6ZSA9IF90aGlzJHByb3BzNi5ub3JtYWxpemUsXG4gICAgICAgICAgdmFsdWVQcm9wTmFtZSA9IF90aGlzJHByb3BzNi52YWx1ZVByb3BOYW1lLFxuICAgICAgICAgIGdldFZhbHVlUHJvcHMgPSBfdGhpcyRwcm9wczYuZ2V0VmFsdWVQcm9wcyxcbiAgICAgICAgICBmaWVsZENvbnRleHQgPSBfdGhpcyRwcm9wczYuZmllbGRDb250ZXh0O1xuICAgICAgdmFyIG1lcmdlZFZhbGlkYXRlVHJpZ2dlciA9IHZhbGlkYXRlVHJpZ2dlciAhPT0gdW5kZWZpbmVkID8gdmFsaWRhdGVUcmlnZ2VyIDogZmllbGRDb250ZXh0LnZhbGlkYXRlVHJpZ2dlcjtcblxuICAgICAgdmFyIG5hbWVQYXRoID0gX3RoaXMuZ2V0TmFtZVBhdGgoKTtcblxuICAgICAgdmFyIGdldEludGVybmFsSG9va3MgPSBmaWVsZENvbnRleHQuZ2V0SW50ZXJuYWxIb29rcyxcbiAgICAgICAgICBnZXRGaWVsZHNWYWx1ZSA9IGZpZWxkQ29udGV4dC5nZXRGaWVsZHNWYWx1ZTtcblxuICAgICAgdmFyIF9nZXRJbnRlcm5hbEhvb2tzID0gZ2V0SW50ZXJuYWxIb29rcyhIT09LX01BUkspLFxuICAgICAgICAgIGRpc3BhdGNoID0gX2dldEludGVybmFsSG9va3MuZGlzcGF0Y2g7XG5cbiAgICAgIHZhciB2YWx1ZSA9IF90aGlzLmdldFZhbHVlKCk7XG5cbiAgICAgIHZhciBtZXJnZWRHZXRWYWx1ZVByb3BzID0gZ2V0VmFsdWVQcm9wcyB8fCBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgIHJldHVybiBfZGVmaW5lUHJvcGVydHkoe30sIHZhbHVlUHJvcE5hbWUsIHZhbCk7XG4gICAgICB9OyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuXG5cbiAgICAgIHZhciBvcmlnaW5UcmlnZ2VyRnVuYyA9IGNoaWxkUHJvcHNbdHJpZ2dlcl07XG5cbiAgICAgIHZhciBjb250cm9sID0gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBjaGlsZFByb3BzKSwgbWVyZ2VkR2V0VmFsdWVQcm9wcyh2YWx1ZSkpOyAvLyBBZGQgdHJpZ2dlclxuXG5cbiAgICAgIGNvbnRyb2xbdHJpZ2dlcl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIE1hcmsgYXMgdG91Y2hlZFxuICAgICAgICBfdGhpcy50b3VjaGVkID0gdHJ1ZTtcbiAgICAgICAgX3RoaXMuZGlydHkgPSB0cnVlO1xuXG4gICAgICAgIF90aGlzLnRyaWdnZXJNZXRhRXZlbnQoKTtcblxuICAgICAgICB2YXIgbmV3VmFsdWU7XG5cbiAgICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChnZXRWYWx1ZUZyb21FdmVudCkge1xuICAgICAgICAgIG5ld1ZhbHVlID0gZ2V0VmFsdWVGcm9tRXZlbnQuYXBwbHkodm9pZCAwLCBhcmdzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuZXdWYWx1ZSA9IGRlZmF1bHRHZXRWYWx1ZUZyb21FdmVudC5hcHBseSh2b2lkIDAsIFt2YWx1ZVByb3BOYW1lXS5jb25jYXQoYXJncykpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5vcm1hbGl6ZSkge1xuICAgICAgICAgIG5ld1ZhbHVlID0gbm9ybWFsaXplKG5ld1ZhbHVlLCB2YWx1ZSwgZ2V0RmllbGRzVmFsdWUodHJ1ZSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgZGlzcGF0Y2goe1xuICAgICAgICAgIHR5cGU6ICd1cGRhdGVWYWx1ZScsXG4gICAgICAgICAgbmFtZVBhdGg6IG5hbWVQYXRoLFxuICAgICAgICAgIHZhbHVlOiBuZXdWYWx1ZVxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAob3JpZ2luVHJpZ2dlckZ1bmMpIHtcbiAgICAgICAgICBvcmlnaW5UcmlnZ2VyRnVuYy5hcHBseSh2b2lkIDAsIGFyZ3MpO1xuICAgICAgICB9XG4gICAgICB9OyAvLyBBZGQgdmFsaWRhdGVUcmlnZ2VyXG5cblxuICAgICAgdmFyIHZhbGlkYXRlVHJpZ2dlckxpc3QgPSB0b0FycmF5KG1lcmdlZFZhbGlkYXRlVHJpZ2dlciB8fCBbXSk7XG4gICAgICB2YWxpZGF0ZVRyaWdnZXJMaXN0LmZvckVhY2goZnVuY3Rpb24gKHRyaWdnZXJOYW1lKSB7XG4gICAgICAgIC8vIFdyYXAgYWRkaXRpb25hbCBmdW5jdGlvbiBvZiBjb21wb25lbnQsIHNvIHRoYXQgd2UgY2FuIGdldCBsYXRlc3QgdmFsdWUgZnJvbSBzdG9yZVxuICAgICAgICB2YXIgb3JpZ2luVHJpZ2dlciA9IGNvbnRyb2xbdHJpZ2dlck5hbWVdO1xuXG4gICAgICAgIGNvbnRyb2xbdHJpZ2dlck5hbWVdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmIChvcmlnaW5UcmlnZ2VyKSB7XG4gICAgICAgICAgICBvcmlnaW5UcmlnZ2VyLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgICAgICAgICB9IC8vIEFsd2F5cyB1c2UgbGF0ZXN0IHJ1bGVzXG5cblxuICAgICAgICAgIHZhciBydWxlcyA9IF90aGlzLnByb3BzLnJ1bGVzO1xuXG4gICAgICAgICAgaWYgKHJ1bGVzICYmIHJ1bGVzLmxlbmd0aCkge1xuICAgICAgICAgICAgLy8gV2UgZGlzcGF0Y2ggdmFsaWRhdGUgdG8gcm9vdCxcbiAgICAgICAgICAgIC8vIHNpbmNlIGl0IHdpbGwgdXBkYXRlIHJlbGF0ZWQgZGF0YSB3aXRoIG90aGVyIGZpZWxkIHdpdGggc2FtZSBuYW1lXG4gICAgICAgICAgICBkaXNwYXRjaCh7XG4gICAgICAgICAgICAgIHR5cGU6ICd2YWxpZGF0ZUZpZWxkJyxcbiAgICAgICAgICAgICAgbmFtZVBhdGg6IG5hbWVQYXRoLFxuICAgICAgICAgICAgICB0cmlnZ2VyTmFtZTogdHJpZ2dlck5hbWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGNvbnRyb2w7XG4gICAgfTtcblxuICAgIGlmIChwcm9wcy5maWVsZENvbnRleHQpIHtcbiAgICAgIHZhciBnZXRJbnRlcm5hbEhvb2tzID0gcHJvcHMuZmllbGRDb250ZXh0LmdldEludGVybmFsSG9va3M7XG5cbiAgICAgIHZhciBfZ2V0SW50ZXJuYWxIb29rczIgPSBnZXRJbnRlcm5hbEhvb2tzKEhPT0tfTUFSSyksXG4gICAgICAgICAgaW5pdEVudGl0eVZhbHVlID0gX2dldEludGVybmFsSG9va3MyLmluaXRFbnRpdHlWYWx1ZTtcblxuICAgICAgaW5pdEVudGl0eVZhbHVlKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoRmllbGQsIFt7XG4gICAga2V5OiBcImNvbXBvbmVudERpZE1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzNyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgc2hvdWxkVXBkYXRlID0gX3RoaXMkcHJvcHM3LnNob3VsZFVwZGF0ZSxcbiAgICAgICAgICBmaWVsZENvbnRleHQgPSBfdGhpcyRwcm9wczcuZmllbGRDb250ZXh0O1xuICAgICAgdGhpcy5tb3VudGVkID0gdHJ1ZTsgLy8gUmVnaXN0ZXIgb24gaW5pdFxuXG4gICAgICBpZiAoZmllbGRDb250ZXh0KSB7XG4gICAgICAgIHZhciBnZXRJbnRlcm5hbEhvb2tzID0gZmllbGRDb250ZXh0LmdldEludGVybmFsSG9va3M7XG5cbiAgICAgICAgdmFyIF9nZXRJbnRlcm5hbEhvb2tzMyA9IGdldEludGVybmFsSG9va3MoSE9PS19NQVJLKSxcbiAgICAgICAgICAgIHJlZ2lzdGVyRmllbGQgPSBfZ2V0SW50ZXJuYWxIb29rczMucmVnaXN0ZXJGaWVsZDtcblxuICAgICAgICB0aGlzLmNhbmNlbFJlZ2lzdGVyRnVuYyA9IHJlZ2lzdGVyRmllbGQodGhpcyk7XG4gICAgICB9IC8vIE9uZSBtb3JlIHJlbmRlciBmb3IgY29tcG9uZW50IGluIGNhc2UgZmllbGRzIG5vdCByZWFkeVxuXG5cbiAgICAgIGlmIChzaG91bGRVcGRhdGUgPT09IHRydWUpIHtcbiAgICAgICAgdGhpcy5yZVJlbmRlcigpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnRXaWxsVW5tb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIHRoaXMuY2FuY2VsUmVnaXN0ZXIoKTtcbiAgICAgIHRoaXMudHJpZ2dlck1ldGFFdmVudCh0cnVlKTtcbiAgICAgIHRoaXMubW91bnRlZCA9IGZhbHNlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZVJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZVJlbmRlcigpIHtcbiAgICAgIGlmICghdGhpcy5tb3VudGVkKSByZXR1cm47XG4gICAgICB0aGlzLmZvcmNlVXBkYXRlKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgcmVzZXRDb3VudCA9IHRoaXMuc3RhdGUucmVzZXRDb3VudDtcbiAgICAgIHZhciBjaGlsZHJlbiA9IHRoaXMucHJvcHMuY2hpbGRyZW47XG5cbiAgICAgIHZhciBfdGhpcyRnZXRPbmx5Q2hpbGQgPSB0aGlzLmdldE9ubHlDaGlsZChjaGlsZHJlbiksXG4gICAgICAgICAgY2hpbGQgPSBfdGhpcyRnZXRPbmx5Q2hpbGQuY2hpbGQsXG4gICAgICAgICAgaXNGdW5jdGlvbiA9IF90aGlzJGdldE9ubHlDaGlsZC5pc0Z1bmN0aW9uOyAvLyBOb3QgbmVlZCB0byBgY2xvbmVFbGVtZW50YCBzaW5jZSB1c2VyIGNhbiBoYW5kbGUgdGhpcyBpbiByZW5kZXIgZnVuY3Rpb24gc2VsZlxuXG5cbiAgICAgIHZhciByZXR1cm5DaGlsZE5vZGU7XG5cbiAgICAgIGlmIChpc0Z1bmN0aW9uKSB7XG4gICAgICAgIHJldHVybkNoaWxkTm9kZSA9IGNoaWxkO1xuICAgICAgfSBlbHNlIGlmICggLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkKSkge1xuICAgICAgICByZXR1cm5DaGlsZE5vZGUgPSAvKiNfX1BVUkVfXyovUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkLCB0aGlzLmdldENvbnRyb2xsZWQoY2hpbGQucHJvcHMpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdhcm5pbmcoIWNoaWxkLCAnYGNoaWxkcmVuYCBvZiBGaWVsZCBpcyBub3QgdmFsaWRhdGUgUmVhY3RFbGVtZW50LicpO1xuICAgICAgICByZXR1cm5DaGlsZE5vZGUgPSBjaGlsZDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCB7XG4gICAgICAgIGtleTogcmVzZXRDb3VudFxuICAgICAgfSwgcmV0dXJuQ2hpbGROb2RlKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gRmllbGQ7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkZpZWxkLmNvbnRleHRUeXBlID0gRmllbGRDb250ZXh0O1xuRmllbGQuZGVmYXVsdFByb3BzID0ge1xuICB0cmlnZ2VyOiAnb25DaGFuZ2UnLFxuICB2YWx1ZVByb3BOYW1lOiAndmFsdWUnXG59O1xuXG5mdW5jdGlvbiBXcmFwcGVyRmllbGQoX3JlZjUpIHtcbiAgdmFyIG5hbWUgPSBfcmVmNS5uYW1lLFxuICAgICAgcmVzdFByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWY1LCBfZXhjbHVkZWQpO1xuXG4gIHZhciBmaWVsZENvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KEZpZWxkQ29udGV4dCk7XG4gIHZhciBuYW1lUGF0aCA9IG5hbWUgIT09IHVuZGVmaW5lZCA/IGdldE5hbWVQYXRoKG5hbWUpIDogdW5kZWZpbmVkO1xuICB2YXIga2V5ID0gJ2tlZXAnO1xuXG4gIGlmICghcmVzdFByb3BzLmlzTGlzdEZpZWxkKSB7XG4gICAga2V5ID0gXCJfXCIuY29uY2F0KChuYW1lUGF0aCB8fCBbXSkuam9pbignXycpKTtcbiAgfSAvLyBXYXJuaW5nIGlmIGl0J3MgYSBkaXJlY3RseSBsaXN0IGZpZWxkLlxuICAvLyBXZSBjYW4gc3RpbGwgc3VwcG9ydCBtdWx0aXBsZSBsZXZlbCBmaWVsZCBwcmVzZXJ2ZS5cblxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHJlc3RQcm9wcy5wcmVzZXJ2ZSA9PT0gZmFsc2UgJiYgcmVzdFByb3BzLmlzTGlzdEZpZWxkICYmIG5hbWVQYXRoLmxlbmd0aCA8PSAxKSB7XG4gICAgd2FybmluZyhmYWxzZSwgJ2BwcmVzZXJ2ZWAgc2hvdWxkIG5vdCBhcHBseSBvbiBGb3JtLkxpc3QgZmllbGRzLicpO1xuICB9XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEZpZWxkLCBfZXh0ZW5kcyh7XG4gICAga2V5OiBrZXksXG4gICAgbmFtZTogbmFtZVBhdGhcbiAgfSwgcmVzdFByb3BzLCB7XG4gICAgZmllbGRDb250ZXh0OiBmaWVsZENvbnRleHRcbiAgfSkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBXcmFwcGVyRmllbGQ7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xudmFyIExpc3RDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5leHBvcnQgZGVmYXVsdCBMaXN0Q29udGV4dDsiLCJpbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMlwiO1xuaW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdG9Db25zdW1hYmxlQXJyYXlcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB3YXJuaW5nIGZyb20gXCJyYy11dGlsL2VzL3dhcm5pbmdcIjtcbmltcG9ydCBGaWVsZENvbnRleHQgZnJvbSAnLi9GaWVsZENvbnRleHQnO1xuaW1wb3J0IEZpZWxkIGZyb20gJy4vRmllbGQnO1xuaW1wb3J0IHsgbW92ZSBhcyBfbW92ZSwgZ2V0TmFtZVBhdGggfSBmcm9tICcuL3V0aWxzL3ZhbHVlVXRpbCc7XG5pbXBvcnQgTGlzdENvbnRleHQgZnJvbSAnLi9MaXN0Q29udGV4dCc7XG5cbnZhciBMaXN0ID0gZnVuY3Rpb24gTGlzdChfcmVmKSB7XG4gIHZhciBuYW1lID0gX3JlZi5uYW1lLFxuICAgICAgaW5pdGlhbFZhbHVlID0gX3JlZi5pbml0aWFsVmFsdWUsXG4gICAgICBjaGlsZHJlbiA9IF9yZWYuY2hpbGRyZW4sXG4gICAgICBydWxlcyA9IF9yZWYucnVsZXMsXG4gICAgICB2YWxpZGF0ZVRyaWdnZXIgPSBfcmVmLnZhbGlkYXRlVHJpZ2dlcjtcbiAgdmFyIGNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KEZpZWxkQ29udGV4dCk7XG4gIHZhciBrZXlSZWYgPSBSZWFjdC51c2VSZWYoe1xuICAgIGtleXM6IFtdLFxuICAgIGlkOiAwXG4gIH0pO1xuICB2YXIga2V5TWFuYWdlciA9IGtleVJlZi5jdXJyZW50O1xuICB2YXIgcHJlZml4TmFtZSA9IFJlYWN0LnVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHZhciBwYXJlbnRQcmVmaXhOYW1lID0gZ2V0TmFtZVBhdGgoY29udGV4dC5wcmVmaXhOYW1lKSB8fCBbXTtcbiAgICByZXR1cm4gW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShwYXJlbnRQcmVmaXhOYW1lKSwgX3RvQ29uc3VtYWJsZUFycmF5KGdldE5hbWVQYXRoKG5hbWUpKSk7XG4gIH0sIFtjb250ZXh0LnByZWZpeE5hbWUsIG5hbWVdKTtcbiAgdmFyIGZpZWxkQ29udGV4dCA9IFJlYWN0LnVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGNvbnRleHQpLCB7fSwge1xuICAgICAgcHJlZml4TmFtZTogcHJlZml4TmFtZVxuICAgIH0pO1xuICB9LCBbY29udGV4dCwgcHJlZml4TmFtZV0pOyAvLyBMaXN0IGNvbnRleHRcblxuICB2YXIgbGlzdENvbnRleHQgPSBSZWFjdC51c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZ2V0S2V5OiBmdW5jdGlvbiBnZXRLZXkobmFtZVBhdGgpIHtcbiAgICAgICAgdmFyIGxlbiA9IHByZWZpeE5hbWUubGVuZ3RoO1xuICAgICAgICB2YXIgcGF0aE5hbWUgPSBuYW1lUGF0aFtsZW5dO1xuICAgICAgICByZXR1cm4gW2tleU1hbmFnZXIua2V5c1twYXRoTmFtZV0sIG5hbWVQYXRoLnNsaWNlKGxlbiArIDEpXTtcbiAgICAgIH1cbiAgICB9O1xuICB9LCBbcHJlZml4TmFtZV0pOyAvLyBVc2VyIHNob3VsZCBub3QgcGFzcyBgY2hpbGRyZW5gIGFzIG90aGVyIHR5cGUuXG5cbiAgaWYgKHR5cGVvZiBjaGlsZHJlbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHdhcm5pbmcoZmFsc2UsICdGb3JtLkxpc3Qgb25seSBhY2NlcHRzIGZ1bmN0aW9uIGFzIGNoaWxkcmVuLicpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIHNob3VsZFVwZGF0ZSA9IGZ1bmN0aW9uIHNob3VsZFVwZGF0ZShwcmV2VmFsdWUsIG5leHRWYWx1ZSwgX3JlZjIpIHtcbiAgICB2YXIgc291cmNlID0gX3JlZjIuc291cmNlO1xuXG4gICAgaWYgKHNvdXJjZSA9PT0gJ2ludGVybmFsJykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiBwcmV2VmFsdWUgIT09IG5leHRWYWx1ZTtcbiAgfTtcblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoTGlzdENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogbGlzdENvbnRleHRcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRmllbGRDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGZpZWxkQ29udGV4dFxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChGaWVsZCwge1xuICAgIG5hbWU6IFtdLFxuICAgIHNob3VsZFVwZGF0ZTogc2hvdWxkVXBkYXRlLFxuICAgIHJ1bGVzOiBydWxlcyxcbiAgICB2YWxpZGF0ZVRyaWdnZXI6IHZhbGlkYXRlVHJpZ2dlcixcbiAgICBpbml0aWFsVmFsdWU6IGluaXRpYWxWYWx1ZSxcbiAgICBpc0xpc3Q6IHRydWVcbiAgfSwgZnVuY3Rpb24gKF9yZWYzLCBtZXRhKSB7XG4gICAgdmFyIF9yZWYzJHZhbHVlID0gX3JlZjMudmFsdWUsXG4gICAgICAgIHZhbHVlID0gX3JlZjMkdmFsdWUgPT09IHZvaWQgMCA/IFtdIDogX3JlZjMkdmFsdWUsXG4gICAgICAgIG9uQ2hhbmdlID0gX3JlZjMub25DaGFuZ2U7XG4gICAgdmFyIGdldEZpZWxkVmFsdWUgPSBjb250ZXh0LmdldEZpZWxkVmFsdWU7XG5cbiAgICB2YXIgZ2V0TmV3VmFsdWUgPSBmdW5jdGlvbiBnZXROZXdWYWx1ZSgpIHtcbiAgICAgIHZhciB2YWx1ZXMgPSBnZXRGaWVsZFZhbHVlKHByZWZpeE5hbWUgfHwgW10pO1xuICAgICAgcmV0dXJuIHZhbHVlcyB8fCBbXTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEFsd2F5cyBnZXQgbGF0ZXN0IHZhbHVlIGluIGNhc2UgdXNlciB1cGRhdGUgZmllbGRzIGJ5IGBmb3JtYCBhcGkuXG4gICAgICovXG5cblxuICAgIHZhciBvcGVyYXRpb25zID0ge1xuICAgICAgYWRkOiBmdW5jdGlvbiBhZGQoZGVmYXVsdFZhbHVlLCBpbmRleCkge1xuICAgICAgICAvLyBNYXBwaW5nIGtleXNcbiAgICAgICAgdmFyIG5ld1ZhbHVlID0gZ2V0TmV3VmFsdWUoKTtcblxuICAgICAgICBpZiAoaW5kZXggPj0gMCAmJiBpbmRleCA8PSBuZXdWYWx1ZS5sZW5ndGgpIHtcbiAgICAgICAgICBrZXlNYW5hZ2VyLmtleXMgPSBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KGtleU1hbmFnZXIua2V5cy5zbGljZSgwLCBpbmRleCkpLCBba2V5TWFuYWdlci5pZF0sIF90b0NvbnN1bWFibGVBcnJheShrZXlNYW5hZ2VyLmtleXMuc2xpY2UoaW5kZXgpKSk7XG4gICAgICAgICAgb25DaGFuZ2UoW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShuZXdWYWx1ZS5zbGljZSgwLCBpbmRleCkpLCBbZGVmYXVsdFZhbHVlXSwgX3RvQ29uc3VtYWJsZUFycmF5KG5ld1ZhbHVlLnNsaWNlKGluZGV4KSkpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAoaW5kZXggPCAwIHx8IGluZGV4ID4gbmV3VmFsdWUubGVuZ3RoKSkge1xuICAgICAgICAgICAgd2FybmluZyhmYWxzZSwgJ1RoZSBzZWNvbmQgcGFyYW1ldGVyIG9mIHRoZSBhZGQgZnVuY3Rpb24gc2hvdWxkIGJlIGEgdmFsaWQgcG9zaXRpdmUgbnVtYmVyLicpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGtleU1hbmFnZXIua2V5cyA9IFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoa2V5TWFuYWdlci5rZXlzKSwgW2tleU1hbmFnZXIuaWRdKTtcbiAgICAgICAgICBvbkNoYW5nZShbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KG5ld1ZhbHVlKSwgW2RlZmF1bHRWYWx1ZV0pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGtleU1hbmFnZXIuaWQgKz0gMTtcbiAgICAgIH0sXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZShpbmRleCkge1xuICAgICAgICB2YXIgbmV3VmFsdWUgPSBnZXROZXdWYWx1ZSgpO1xuICAgICAgICB2YXIgaW5kZXhTZXQgPSBuZXcgU2V0KEFycmF5LmlzQXJyYXkoaW5kZXgpID8gaW5kZXggOiBbaW5kZXhdKTtcblxuICAgICAgICBpZiAoaW5kZXhTZXQuc2l6ZSA8PSAwKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAga2V5TWFuYWdlci5rZXlzID0ga2V5TWFuYWdlci5rZXlzLmZpbHRlcihmdW5jdGlvbiAoXywga2V5c0luZGV4KSB7XG4gICAgICAgICAgcmV0dXJuICFpbmRleFNldC5oYXMoa2V5c0luZGV4KTtcbiAgICAgICAgfSk7IC8vIFRyaWdnZXIgc3RvcmUgY2hhbmdlXG5cbiAgICAgICAgb25DaGFuZ2UobmV3VmFsdWUuZmlsdGVyKGZ1bmN0aW9uIChfLCB2YWx1ZUluZGV4KSB7XG4gICAgICAgICAgcmV0dXJuICFpbmRleFNldC5oYXModmFsdWVJbmRleCk7XG4gICAgICAgIH0pKTtcbiAgICAgIH0sXG4gICAgICBtb3ZlOiBmdW5jdGlvbiBtb3ZlKGZyb20sIHRvKSB7XG4gICAgICAgIGlmIChmcm9tID09PSB0bykge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBuZXdWYWx1ZSA9IGdldE5ld1ZhbHVlKCk7IC8vIERvIG5vdCBoYW5kbGUgb3V0IG9mIHJhbmdlXG5cbiAgICAgICAgaWYgKGZyb20gPCAwIHx8IGZyb20gPj0gbmV3VmFsdWUubGVuZ3RoIHx8IHRvIDwgMCB8fCB0byA+PSBuZXdWYWx1ZS5sZW5ndGgpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBrZXlNYW5hZ2VyLmtleXMgPSBfbW92ZShrZXlNYW5hZ2VyLmtleXMsIGZyb20sIHRvKTsgLy8gVHJpZ2dlciBzdG9yZSBjaGFuZ2VcblxuICAgICAgICBvbkNoYW5nZShfbW92ZShuZXdWYWx1ZSwgZnJvbSwgdG8pKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHZhciBsaXN0VmFsdWUgPSB2YWx1ZSB8fCBbXTtcblxuICAgIGlmICghQXJyYXkuaXNBcnJheShsaXN0VmFsdWUpKSB7XG4gICAgICBsaXN0VmFsdWUgPSBbXTtcblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgd2FybmluZyhmYWxzZSwgXCJDdXJyZW50IHZhbHVlIG9mICdcIi5jb25jYXQocHJlZml4TmFtZS5qb2luKCcgPiAnKSwgXCInIGlzIG5vdCBhbiBhcnJheSB0eXBlLlwiKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGNoaWxkcmVuKGxpc3RWYWx1ZS5tYXAoZnVuY3Rpb24gKF9fLCBpbmRleCkge1xuICAgICAgdmFyIGtleSA9IGtleU1hbmFnZXIua2V5c1tpbmRleF07XG5cbiAgICAgIGlmIChrZXkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBrZXlNYW5hZ2VyLmtleXNbaW5kZXhdID0ga2V5TWFuYWdlci5pZDtcbiAgICAgICAga2V5ID0ga2V5TWFuYWdlci5rZXlzW2luZGV4XTtcbiAgICAgICAga2V5TWFuYWdlci5pZCArPSAxO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBuYW1lOiBpbmRleCxcbiAgICAgICAga2V5OiBrZXksXG4gICAgICAgIGlzTGlzdEZpZWxkOiB0cnVlXG4gICAgICB9O1xuICAgIH0pLCBvcGVyYXRpb25zLCBtZXRhKTtcbiAgfSkpKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IExpc3Q7IiwiaW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zbGljZWRUb0FycmF5XCI7XG5pbXBvcnQgX3RvQ29uc3VtYWJsZUFycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0NvbnN1bWFibGVBcnJheVwiO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2tcIjtcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzXCI7XG5pbXBvcnQgX3R5cGVvZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mXCI7XG52YXIgU1BMSVQgPSAnX19AZmllbGRfc3BsaXRfXyc7XG4vKipcbiAqIENvbnZlcnQgbmFtZSBwYXRoIGludG8gc3RyaW5nIHRvIGZhc3QgdGhlIGZldGNoIHNwZWVkIG9mIE1hcC5cbiAqL1xuXG5mdW5jdGlvbiBub3JtYWxpemUobmFtZVBhdGgpIHtcbiAgcmV0dXJuIG5hbWVQYXRoLm1hcChmdW5jdGlvbiAoY2VsbCkge1xuICAgIHJldHVybiBcIlwiLmNvbmNhdChfdHlwZW9mKGNlbGwpLCBcIjpcIikuY29uY2F0KGNlbGwpO1xuICB9KSAvLyBNYWdpYyBzcGxpdFxuICAuam9pbihTUExJVCk7XG59XG4vKipcbiAqIE5hbWVNYXAgbGlrZSBhIGBNYXBgIGJ1dCBhY2NlcHRzIGBzdHJpbmdbXWAgYXMga2V5LlxuICovXG5cblxudmFyIE5hbWVNYXAgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBOYW1lTWFwKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBOYW1lTWFwKTtcblxuICAgIHRoaXMua3ZzID0gbmV3IE1hcCgpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKE5hbWVNYXAsIFt7XG4gICAga2V5OiBcInNldFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgdGhpcy5rdnMuc2V0KG5vcm1hbGl6ZShrZXkpLCB2YWx1ZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgICByZXR1cm4gdGhpcy5rdnMuZ2V0KG5vcm1hbGl6ZShrZXkpKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwidXBkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZShrZXksIHVwZGF0ZXIpIHtcbiAgICAgIHZhciBvcmlnaW4gPSB0aGlzLmdldChrZXkpO1xuICAgICAgdmFyIG5leHQgPSB1cGRhdGVyKG9yaWdpbik7XG5cbiAgICAgIGlmICghbmV4dCkge1xuICAgICAgICB0aGlzLmRlbGV0ZShrZXkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zZXQoa2V5LCBuZXh0KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZGVsZXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9kZWxldGUoa2V5KSB7XG4gICAgICB0aGlzLmt2cy5kZWxldGUobm9ybWFsaXplKGtleSkpO1xuICAgIH0gLy8gU2luY2Ugd2Ugb25seSB1c2UgdGhpcyBpbiB0ZXN0LCBsZXQgc2ltcGx5IHJlYWxpemUgdGhpc1xuXG4gIH0sIHtcbiAgICBrZXk6IFwibWFwXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG1hcChjYWxsYmFjaykge1xuICAgICAgcmV0dXJuIF90b0NvbnN1bWFibGVBcnJheSh0aGlzLmt2cy5lbnRyaWVzKCkpLm1hcChmdW5jdGlvbiAoX3JlZikge1xuICAgICAgICB2YXIgX3JlZjIgPSBfc2xpY2VkVG9BcnJheShfcmVmLCAyKSxcbiAgICAgICAgICAgIGtleSA9IF9yZWYyWzBdLFxuICAgICAgICAgICAgdmFsdWUgPSBfcmVmMlsxXTtcblxuICAgICAgICB2YXIgY2VsbHMgPSBrZXkuc3BsaXQoU1BMSVQpO1xuICAgICAgICByZXR1cm4gY2FsbGJhY2soe1xuICAgICAgICAgIGtleTogY2VsbHMubWFwKGZ1bmN0aW9uIChjZWxsKSB7XG4gICAgICAgICAgICB2YXIgX2NlbGwkbWF0Y2ggPSBjZWxsLm1hdGNoKC9eKFteOl0qKTooLiopJC8pLFxuICAgICAgICAgICAgICAgIF9jZWxsJG1hdGNoMiA9IF9zbGljZWRUb0FycmF5KF9jZWxsJG1hdGNoLCAzKSxcbiAgICAgICAgICAgICAgICB0eXBlID0gX2NlbGwkbWF0Y2gyWzFdLFxuICAgICAgICAgICAgICAgIHVuaXQgPSBfY2VsbCRtYXRjaDJbMl07XG5cbiAgICAgICAgICAgIHJldHVybiB0eXBlID09PSAnbnVtYmVyJyA/IE51bWJlcih1bml0KSA6IHVuaXQ7XG4gICAgICAgICAgfSksXG4gICAgICAgICAgdmFsdWU6IHZhbHVlXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInRvSlNPTlwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgICB2YXIganNvbiA9IHt9O1xuICAgICAgdGhpcy5tYXAoZnVuY3Rpb24gKF9yZWYzKSB7XG4gICAgICAgIHZhciBrZXkgPSBfcmVmMy5rZXksXG4gICAgICAgICAgICB2YWx1ZSA9IF9yZWYzLnZhbHVlO1xuICAgICAgICBqc29uW2tleS5qb2luKCcuJyldID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4ganNvbjtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gTmFtZU1hcDtcbn0oKTtcblxuZXhwb3J0IGRlZmF1bHQgTmFtZU1hcDsiLCJpbXBvcnQgX3NsaWNlZFRvQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NsaWNlZFRvQXJyYXlcIjtcbmltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdG9Db25zdW1hYmxlQXJyYXlcIjtcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzXCI7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVja1wiO1xudmFyIF9leGNsdWRlZCA9IFtcIm5hbWVcIiwgXCJlcnJvcnNcIl07XG5pbXBvcnQgd2FybmluZyBmcm9tIFwicmMtdXRpbC9lcy93YXJuaW5nXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBIT09LX01BUksgfSBmcm9tICcuL0ZpZWxkQ29udGV4dCc7XG5pbXBvcnQgeyBhbGxQcm9taXNlRmluaXNoIH0gZnJvbSAnLi91dGlscy9hc3luY1V0aWwnO1xuaW1wb3J0IGNsb25lRGVlcCBmcm9tICcuL3V0aWxzL2Nsb25lRGVlcCc7XG5pbXBvcnQgeyBkZWZhdWx0VmFsaWRhdGVNZXNzYWdlcyB9IGZyb20gJy4vdXRpbHMvbWVzc2FnZXMnO1xuaW1wb3J0IE5hbWVNYXAgZnJvbSAnLi91dGlscy9OYW1lTWFwJztcbmltcG9ydCB7IGNsb25lQnlOYW1lUGF0aExpc3QsIGNvbnRhaW5zTmFtZVBhdGgsIGdldE5hbWVQYXRoLCBnZXRWYWx1ZSwgbWF0Y2hOYW1lUGF0aCwgc2V0VmFsdWUsIHNldFZhbHVlcyB9IGZyb20gJy4vdXRpbHMvdmFsdWVVdGlsJztcbmV4cG9ydCB2YXIgRm9ybVN0b3JlID0gLyojX19QVVJFX18qL19jcmVhdGVDbGFzcyhmdW5jdGlvbiBGb3JtU3RvcmUoZm9yY2VSb290VXBkYXRlKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEZvcm1TdG9yZSk7XG5cbiAgdGhpcy5mb3JtSG9va2VkID0gZmFsc2U7XG4gIHRoaXMuZm9yY2VSb290VXBkYXRlID0gdm9pZCAwO1xuICB0aGlzLnN1YnNjcmliYWJsZSA9IHRydWU7XG4gIHRoaXMuc3RvcmUgPSB7fTtcbiAgdGhpcy5maWVsZEVudGl0aWVzID0gW107XG4gIHRoaXMuaW5pdGlhbFZhbHVlcyA9IHt9O1xuICB0aGlzLmNhbGxiYWNrcyA9IHt9O1xuICB0aGlzLnZhbGlkYXRlTWVzc2FnZXMgPSBudWxsO1xuICB0aGlzLnByZXNlcnZlID0gbnVsbDtcbiAgdGhpcy5sYXN0VmFsaWRhdGVQcm9taXNlID0gbnVsbDtcblxuICB0aGlzLmdldEZvcm0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGdldEZpZWxkVmFsdWU6IF90aGlzLmdldEZpZWxkVmFsdWUsXG4gICAgICBnZXRGaWVsZHNWYWx1ZTogX3RoaXMuZ2V0RmllbGRzVmFsdWUsXG4gICAgICBnZXRGaWVsZEVycm9yOiBfdGhpcy5nZXRGaWVsZEVycm9yLFxuICAgICAgZ2V0RmllbGRXYXJuaW5nOiBfdGhpcy5nZXRGaWVsZFdhcm5pbmcsXG4gICAgICBnZXRGaWVsZHNFcnJvcjogX3RoaXMuZ2V0RmllbGRzRXJyb3IsXG4gICAgICBpc0ZpZWxkc1RvdWNoZWQ6IF90aGlzLmlzRmllbGRzVG91Y2hlZCxcbiAgICAgIGlzRmllbGRUb3VjaGVkOiBfdGhpcy5pc0ZpZWxkVG91Y2hlZCxcbiAgICAgIGlzRmllbGRWYWxpZGF0aW5nOiBfdGhpcy5pc0ZpZWxkVmFsaWRhdGluZyxcbiAgICAgIGlzRmllbGRzVmFsaWRhdGluZzogX3RoaXMuaXNGaWVsZHNWYWxpZGF0aW5nLFxuICAgICAgcmVzZXRGaWVsZHM6IF90aGlzLnJlc2V0RmllbGRzLFxuICAgICAgc2V0RmllbGRzOiBfdGhpcy5zZXRGaWVsZHMsXG4gICAgICBzZXRGaWVsZHNWYWx1ZTogX3RoaXMuc2V0RmllbGRzVmFsdWUsXG4gICAgICB2YWxpZGF0ZUZpZWxkczogX3RoaXMudmFsaWRhdGVGaWVsZHMsXG4gICAgICBzdWJtaXQ6IF90aGlzLnN1Ym1pdCxcbiAgICAgIF9pbml0OiB0cnVlLFxuICAgICAgZ2V0SW50ZXJuYWxIb29rczogX3RoaXMuZ2V0SW50ZXJuYWxIb29rc1xuICAgIH07XG4gIH07XG5cbiAgdGhpcy5nZXRJbnRlcm5hbEhvb2tzID0gZnVuY3Rpb24gKGtleSkge1xuICAgIGlmIChrZXkgPT09IEhPT0tfTUFSSykge1xuICAgICAgX3RoaXMuZm9ybUhvb2tlZCA9IHRydWU7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXNwYXRjaDogX3RoaXMuZGlzcGF0Y2gsXG4gICAgICAgIGluaXRFbnRpdHlWYWx1ZTogX3RoaXMuaW5pdEVudGl0eVZhbHVlLFxuICAgICAgICByZWdpc3RlckZpZWxkOiBfdGhpcy5yZWdpc3RlckZpZWxkLFxuICAgICAgICB1c2VTdWJzY3JpYmU6IF90aGlzLnVzZVN1YnNjcmliZSxcbiAgICAgICAgc2V0SW5pdGlhbFZhbHVlczogX3RoaXMuc2V0SW5pdGlhbFZhbHVlcyxcbiAgICAgICAgZGVzdHJveUZvcm06IF90aGlzLmRlc3Ryb3lGb3JtLFxuICAgICAgICBzZXRDYWxsYmFja3M6IF90aGlzLnNldENhbGxiYWNrcyxcbiAgICAgICAgc2V0VmFsaWRhdGVNZXNzYWdlczogX3RoaXMuc2V0VmFsaWRhdGVNZXNzYWdlcyxcbiAgICAgICAgZ2V0RmllbGRzOiBfdGhpcy5nZXRGaWVsZHMsXG4gICAgICAgIHNldFByZXNlcnZlOiBfdGhpcy5zZXRQcmVzZXJ2ZSxcbiAgICAgICAgZ2V0SW5pdGlhbFZhbHVlOiBfdGhpcy5nZXRJbml0aWFsVmFsdWUsXG4gICAgICAgIHJlZ2lzdGVyV2F0Y2g6IF90aGlzLnJlZ2lzdGVyV2F0Y2hcbiAgICAgIH07XG4gICAgfVxuXG4gICAgd2FybmluZyhmYWxzZSwgJ2BnZXRJbnRlcm5hbEhvb2tzYCBpcyBpbnRlcm5hbCB1c2FnZS4gU2hvdWxkIG5vdCBjYWxsIGRpcmVjdGx5LicpO1xuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIHRoaXMudXNlU3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliYWJsZSkge1xuICAgIF90aGlzLnN1YnNjcmliYWJsZSA9IHN1YnNjcmliYWJsZTtcbiAgfTtcblxuICB0aGlzLnByZXZXaXRob3V0UHJlc2VydmVzID0gbnVsbDtcblxuICB0aGlzLnNldEluaXRpYWxWYWx1ZXMgPSBmdW5jdGlvbiAoaW5pdGlhbFZhbHVlcywgaW5pdCkge1xuICAgIF90aGlzLmluaXRpYWxWYWx1ZXMgPSBpbml0aWFsVmFsdWVzIHx8IHt9O1xuXG4gICAgaWYgKGluaXQpIHtcbiAgICAgIHZhciBfdGhpcyRwcmV2V2l0aG91dFByZXM7XG5cbiAgICAgIHZhciBuZXh0U3RvcmUgPSBzZXRWYWx1ZXMoe30sIGluaXRpYWxWYWx1ZXMsIF90aGlzLnN0b3JlKTsgLy8gV2Ugd2lsbCB0YWtlIGNvbnNpZGVyIHByZXYgZm9ybSB1bm1vdW50IGZpZWxkcy5cbiAgICAgIC8vIFdoZW4gdGhlIGZpZWxkIGlzIG5vdCBgcHJlc2VydmVgLCB3ZSBuZWVkIGZpbGwgdGhpcyB3aXRoIGluaXRpYWxWYWx1ZXMgaW5zdGVhZCBvZiBzdG9yZS5cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBhcnJheS1jYWxsYmFjay1yZXR1cm5cblxuICAgICAgKF90aGlzJHByZXZXaXRob3V0UHJlcyA9IF90aGlzLnByZXZXaXRob3V0UHJlc2VydmVzKSA9PT0gbnVsbCB8fCBfdGhpcyRwcmV2V2l0aG91dFByZXMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF90aGlzJHByZXZXaXRob3V0UHJlcy5tYXAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgICAgdmFyIG5hbWVQYXRoID0gX3JlZi5rZXk7XG4gICAgICAgIG5leHRTdG9yZSA9IHNldFZhbHVlKG5leHRTdG9yZSwgbmFtZVBhdGgsIGdldFZhbHVlKGluaXRpYWxWYWx1ZXMsIG5hbWVQYXRoKSk7XG4gICAgICB9KTtcbiAgICAgIF90aGlzLnByZXZXaXRob3V0UHJlc2VydmVzID0gbnVsbDtcblxuICAgICAgX3RoaXMudXBkYXRlU3RvcmUobmV4dFN0b3JlKTtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy5kZXN0cm95Rm9ybSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcHJldldpdGhvdXRQcmVzZXJ2ZXMgPSBuZXcgTmFtZU1hcCgpO1xuXG4gICAgX3RoaXMuZ2V0RmllbGRFbnRpdGllcyh0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChlbnRpdHkpIHtcbiAgICAgIGlmICghX3RoaXMuaXNNZXJnZWRQcmVzZXJ2ZShlbnRpdHkuaXNQcmVzZXJ2ZSgpKSkge1xuICAgICAgICBwcmV2V2l0aG91dFByZXNlcnZlcy5zZXQoZW50aXR5LmdldE5hbWVQYXRoKCksIHRydWUpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgX3RoaXMucHJldldpdGhvdXRQcmVzZXJ2ZXMgPSBwcmV2V2l0aG91dFByZXNlcnZlcztcbiAgfTtcblxuICB0aGlzLmdldEluaXRpYWxWYWx1ZSA9IGZ1bmN0aW9uIChuYW1lUGF0aCkge1xuICAgIHZhciBpbml0VmFsdWUgPSBnZXRWYWx1ZShfdGhpcy5pbml0aWFsVmFsdWVzLCBuYW1lUGF0aCk7IC8vIE5vdCBjbG9uZURlZXAgd2hlbiB3aXRob3V0IGBuYW1lUGF0aGBcblxuICAgIHJldHVybiBuYW1lUGF0aC5sZW5ndGggPyBjbG9uZURlZXAoaW5pdFZhbHVlKSA6IGluaXRWYWx1ZTtcbiAgfTtcblxuICB0aGlzLnNldENhbGxiYWNrcyA9IGZ1bmN0aW9uIChjYWxsYmFja3MpIHtcbiAgICBfdGhpcy5jYWxsYmFja3MgPSBjYWxsYmFja3M7XG4gIH07XG5cbiAgdGhpcy5zZXRWYWxpZGF0ZU1lc3NhZ2VzID0gZnVuY3Rpb24gKHZhbGlkYXRlTWVzc2FnZXMpIHtcbiAgICBfdGhpcy52YWxpZGF0ZU1lc3NhZ2VzID0gdmFsaWRhdGVNZXNzYWdlcztcbiAgfTtcblxuICB0aGlzLnNldFByZXNlcnZlID0gZnVuY3Rpb24gKHByZXNlcnZlKSB7XG4gICAgX3RoaXMucHJlc2VydmUgPSBwcmVzZXJ2ZTtcbiAgfTtcblxuICB0aGlzLndhdGNoTGlzdCA9IFtdO1xuXG4gIHRoaXMucmVnaXN0ZXJXYXRjaCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgIF90aGlzLndhdGNoTGlzdC5wdXNoKGNhbGxiYWNrKTtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy53YXRjaExpc3QgPSBfdGhpcy53YXRjaExpc3QuZmlsdGVyKGZ1bmN0aW9uIChmbikge1xuICAgICAgICByZXR1cm4gZm4gIT09IGNhbGxiYWNrO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfTtcblxuICB0aGlzLm5vdGlmeVdhdGNoID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBuYW1lUGF0aCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogW107XG5cbiAgICAvLyBObyBuZWVkIHRvIGNvc3QgcGVyZiB3aGVuIG5vdGhpbmcgbmVlZCB0byB3YXRjaFxuICAgIGlmIChfdGhpcy53YXRjaExpc3QubGVuZ3RoKSB7XG4gICAgICB2YXIgdmFsdWVzID0gX3RoaXMuZ2V0RmllbGRzVmFsdWUoKTtcblxuICAgICAgX3RoaXMud2F0Y2hMaXN0LmZvckVhY2goZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgIGNhbGxiYWNrKHZhbHVlcywgbmFtZVBhdGgpO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMudGltZW91dElkID0gbnVsbDtcblxuICB0aGlzLndhcm5pbmdVbmhvb2tlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhX3RoaXMudGltZW91dElkICYmIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBfdGhpcy50aW1lb3V0SWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMudGltZW91dElkID0gbnVsbDtcblxuICAgICAgICBpZiAoIV90aGlzLmZvcm1Ib29rZWQpIHtcbiAgICAgICAgICB3YXJuaW5nKGZhbHNlLCAnSW5zdGFuY2UgY3JlYXRlZCBieSBgdXNlRm9ybWAgaXMgbm90IGNvbm5lY3RlZCB0byBhbnkgRm9ybSBlbGVtZW50LiBGb3JnZXQgdG8gcGFzcyBgZm9ybWAgcHJvcD8nKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMudXBkYXRlU3RvcmUgPSBmdW5jdGlvbiAobmV4dFN0b3JlKSB7XG4gICAgX3RoaXMuc3RvcmUgPSBuZXh0U3RvcmU7XG4gIH07XG5cbiAgdGhpcy5nZXRGaWVsZEVudGl0aWVzID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwdXJlID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBmYWxzZTtcblxuICAgIGlmICghcHVyZSkge1xuICAgICAgcmV0dXJuIF90aGlzLmZpZWxkRW50aXRpZXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIF90aGlzLmZpZWxkRW50aXRpZXMuZmlsdGVyKGZ1bmN0aW9uIChmaWVsZCkge1xuICAgICAgcmV0dXJuIGZpZWxkLmdldE5hbWVQYXRoKCkubGVuZ3RoO1xuICAgIH0pO1xuICB9O1xuXG4gIHRoaXMuZ2V0RmllbGRzTWFwID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwdXJlID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBmYWxzZTtcbiAgICB2YXIgY2FjaGUgPSBuZXcgTmFtZU1hcCgpO1xuXG4gICAgX3RoaXMuZ2V0RmllbGRFbnRpdGllcyhwdXJlKS5mb3JFYWNoKGZ1bmN0aW9uIChmaWVsZCkge1xuICAgICAgdmFyIG5hbWVQYXRoID0gZmllbGQuZ2V0TmFtZVBhdGgoKTtcbiAgICAgIGNhY2hlLnNldChuYW1lUGF0aCwgZmllbGQpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGNhY2hlO1xuICB9O1xuXG4gIHRoaXMuZ2V0RmllbGRFbnRpdGllc0Zvck5hbWVQYXRoTGlzdCA9IGZ1bmN0aW9uIChuYW1lTGlzdCkge1xuICAgIGlmICghbmFtZUxpc3QpIHtcbiAgICAgIHJldHVybiBfdGhpcy5nZXRGaWVsZEVudGl0aWVzKHRydWUpO1xuICAgIH1cblxuICAgIHZhciBjYWNoZSA9IF90aGlzLmdldEZpZWxkc01hcCh0cnVlKTtcblxuICAgIHJldHVybiBuYW1lTGlzdC5tYXAoZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgIHZhciBuYW1lUGF0aCA9IGdldE5hbWVQYXRoKG5hbWUpO1xuICAgICAgcmV0dXJuIGNhY2hlLmdldChuYW1lUGF0aCkgfHwge1xuICAgICAgICBJTlZBTElEQVRFX05BTUVfUEFUSDogZ2V0TmFtZVBhdGgobmFtZSlcbiAgICAgIH07XG4gICAgfSk7XG4gIH07XG5cbiAgdGhpcy5nZXRGaWVsZHNWYWx1ZSA9IGZ1bmN0aW9uIChuYW1lTGlzdCwgZmlsdGVyRnVuYykge1xuICAgIF90aGlzLndhcm5pbmdVbmhvb2tlZCgpO1xuXG4gICAgaWYgKG5hbWVMaXN0ID09PSB0cnVlICYmICFmaWx0ZXJGdW5jKSB7XG4gICAgICByZXR1cm4gX3RoaXMuc3RvcmU7XG4gICAgfVxuXG4gICAgdmFyIGZpZWxkRW50aXRpZXMgPSBfdGhpcy5nZXRGaWVsZEVudGl0aWVzRm9yTmFtZVBhdGhMaXN0KEFycmF5LmlzQXJyYXkobmFtZUxpc3QpID8gbmFtZUxpc3QgOiBudWxsKTtcblxuICAgIHZhciBmaWx0ZXJlZE5hbWVMaXN0ID0gW107XG4gICAgZmllbGRFbnRpdGllcy5mb3JFYWNoKGZ1bmN0aW9uIChlbnRpdHkpIHtcbiAgICAgIHZhciBfZW50aXR5JGlzTGlzdEZpZWxkO1xuXG4gICAgICB2YXIgbmFtZVBhdGggPSAnSU5WQUxJREFURV9OQU1FX1BBVEgnIGluIGVudGl0eSA/IGVudGl0eS5JTlZBTElEQVRFX05BTUVfUEFUSCA6IGVudGl0eS5nZXROYW1lUGF0aCgpOyAvLyBJZ25vcmUgd2hlbiBpdCdzIGEgbGlzdCBpdGVtIGFuZCBub3Qgc3BlY2lmaWMgdGhlIG5hbWVQYXRoLFxuICAgICAgLy8gc2luY2UgcGFyZW50IGZpZWxkIGlzIGFscmVhZHkgdGFrZSBpbiBjb3VudFxuXG4gICAgICBpZiAoIW5hbWVMaXN0ICYmICgoX2VudGl0eSRpc0xpc3RGaWVsZCA9IGVudGl0eS5pc0xpc3RGaWVsZCkgPT09IG51bGwgfHwgX2VudGl0eSRpc0xpc3RGaWVsZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2VudGl0eSRpc0xpc3RGaWVsZC5jYWxsKGVudGl0eSkpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKCFmaWx0ZXJGdW5jKSB7XG4gICAgICAgIGZpbHRlcmVkTmFtZUxpc3QucHVzaChuYW1lUGF0aCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgbWV0YSA9ICdnZXRNZXRhJyBpbiBlbnRpdHkgPyBlbnRpdHkuZ2V0TWV0YSgpIDogbnVsbDtcblxuICAgICAgICBpZiAoZmlsdGVyRnVuYyhtZXRhKSkge1xuICAgICAgICAgIGZpbHRlcmVkTmFtZUxpc3QucHVzaChuYW1lUGF0aCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gY2xvbmVCeU5hbWVQYXRoTGlzdChfdGhpcy5zdG9yZSwgZmlsdGVyZWROYW1lTGlzdC5tYXAoZ2V0TmFtZVBhdGgpKTtcbiAgfTtcblxuICB0aGlzLmdldEZpZWxkVmFsdWUgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIF90aGlzLndhcm5pbmdVbmhvb2tlZCgpO1xuXG4gICAgdmFyIG5hbWVQYXRoID0gZ2V0TmFtZVBhdGgobmFtZSk7XG4gICAgcmV0dXJuIGdldFZhbHVlKF90aGlzLnN0b3JlLCBuYW1lUGF0aCk7XG4gIH07XG5cbiAgdGhpcy5nZXRGaWVsZHNFcnJvciA9IGZ1bmN0aW9uIChuYW1lTGlzdCkge1xuICAgIF90aGlzLndhcm5pbmdVbmhvb2tlZCgpO1xuXG4gICAgdmFyIGZpZWxkRW50aXRpZXMgPSBfdGhpcy5nZXRGaWVsZEVudGl0aWVzRm9yTmFtZVBhdGhMaXN0KG5hbWVMaXN0KTtcblxuICAgIHJldHVybiBmaWVsZEVudGl0aWVzLm1hcChmdW5jdGlvbiAoZW50aXR5LCBpbmRleCkge1xuICAgICAgaWYgKGVudGl0eSAmJiAhKCdJTlZBTElEQVRFX05BTUVfUEFUSCcgaW4gZW50aXR5KSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG5hbWU6IGVudGl0eS5nZXROYW1lUGF0aCgpLFxuICAgICAgICAgIGVycm9yczogZW50aXR5LmdldEVycm9ycygpLFxuICAgICAgICAgIHdhcm5pbmdzOiBlbnRpdHkuZ2V0V2FybmluZ3MoKVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBuYW1lOiBnZXROYW1lUGF0aChuYW1lTGlzdFtpbmRleF0pLFxuICAgICAgICBlcnJvcnM6IFtdLFxuICAgICAgICB3YXJuaW5nczogW11cbiAgICAgIH07XG4gICAgfSk7XG4gIH07XG5cbiAgdGhpcy5nZXRGaWVsZEVycm9yID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBfdGhpcy53YXJuaW5nVW5ob29rZWQoKTtcblxuICAgIHZhciBuYW1lUGF0aCA9IGdldE5hbWVQYXRoKG5hbWUpO1xuXG4gICAgdmFyIGZpZWxkRXJyb3IgPSBfdGhpcy5nZXRGaWVsZHNFcnJvcihbbmFtZVBhdGhdKVswXTtcblxuICAgIHJldHVybiBmaWVsZEVycm9yLmVycm9ycztcbiAgfTtcblxuICB0aGlzLmdldEZpZWxkV2FybmluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgX3RoaXMud2FybmluZ1VuaG9va2VkKCk7XG5cbiAgICB2YXIgbmFtZVBhdGggPSBnZXROYW1lUGF0aChuYW1lKTtcblxuICAgIHZhciBmaWVsZEVycm9yID0gX3RoaXMuZ2V0RmllbGRzRXJyb3IoW25hbWVQYXRoXSlbMF07XG5cbiAgICByZXR1cm4gZmllbGRFcnJvci53YXJuaW5ncztcbiAgfTtcblxuICB0aGlzLmlzRmllbGRzVG91Y2hlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICBfdGhpcy53YXJuaW5nVW5ob29rZWQoKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICB2YXIgYXJnMCA9IGFyZ3NbMF0sXG4gICAgICAgIGFyZzEgPSBhcmdzWzFdO1xuICAgIHZhciBuYW1lUGF0aExpc3Q7XG4gICAgdmFyIGlzQWxsRmllbGRzVG91Y2hlZCA9IGZhbHNlO1xuXG4gICAgaWYgKGFyZ3MubGVuZ3RoID09PSAwKSB7XG4gICAgICBuYW1lUGF0aExpc3QgPSBudWxsO1xuICAgIH0gZWxzZSBpZiAoYXJncy5sZW5ndGggPT09IDEpIHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGFyZzApKSB7XG4gICAgICAgIG5hbWVQYXRoTGlzdCA9IGFyZzAubWFwKGdldE5hbWVQYXRoKTtcbiAgICAgICAgaXNBbGxGaWVsZHNUb3VjaGVkID0gZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuYW1lUGF0aExpc3QgPSBudWxsO1xuICAgICAgICBpc0FsbEZpZWxkc1RvdWNoZWQgPSBhcmcwO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBuYW1lUGF0aExpc3QgPSBhcmcwLm1hcChnZXROYW1lUGF0aCk7XG4gICAgICBpc0FsbEZpZWxkc1RvdWNoZWQgPSBhcmcxO1xuICAgIH1cblxuICAgIHZhciBmaWVsZEVudGl0aWVzID0gX3RoaXMuZ2V0RmllbGRFbnRpdGllcyh0cnVlKTtcblxuICAgIHZhciBpc0ZpZWxkVG91Y2hlZCA9IGZ1bmN0aW9uIGlzRmllbGRUb3VjaGVkKGZpZWxkKSB7XG4gICAgICByZXR1cm4gZmllbGQuaXNGaWVsZFRvdWNoZWQoKTtcbiAgICB9OyAvLyA9PT09PSBXaWxsIGdldCBmdWxseSBjb21wYXJlIHdoZW4gbm90IGNvbmZpZyBuYW1lUGF0aExpc3QgPT09PT1cblxuXG4gICAgaWYgKCFuYW1lUGF0aExpc3QpIHtcbiAgICAgIHJldHVybiBpc0FsbEZpZWxkc1RvdWNoZWQgPyBmaWVsZEVudGl0aWVzLmV2ZXJ5KGlzRmllbGRUb3VjaGVkKSA6IGZpZWxkRW50aXRpZXMuc29tZShpc0ZpZWxkVG91Y2hlZCk7XG4gICAgfSAvLyBHZW5lcmF0ZSBhIG5lc3QgdHJlZSBmb3IgdmFsaWRhdGVcblxuXG4gICAgdmFyIG1hcCA9IG5ldyBOYW1lTWFwKCk7XG4gICAgbmFtZVBhdGhMaXN0LmZvckVhY2goZnVuY3Rpb24gKHNob3J0TmFtZVBhdGgpIHtcbiAgICAgIG1hcC5zZXQoc2hvcnROYW1lUGF0aCwgW10pO1xuICAgIH0pO1xuICAgIGZpZWxkRW50aXRpZXMuZm9yRWFjaChmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgIHZhciBmaWVsZE5hbWVQYXRoID0gZmllbGQuZ2V0TmFtZVBhdGgoKTsgLy8gRmluZCBtYXRjaGVkIGVudGl0eSBhbmQgcHV0IGludG8gbGlzdFxuXG4gICAgICBuYW1lUGF0aExpc3QuZm9yRWFjaChmdW5jdGlvbiAoc2hvcnROYW1lUGF0aCkge1xuICAgICAgICBpZiAoc2hvcnROYW1lUGF0aC5ldmVyeShmdW5jdGlvbiAobmFtZVVuaXQsIGkpIHtcbiAgICAgICAgICByZXR1cm4gZmllbGROYW1lUGF0aFtpXSA9PT0gbmFtZVVuaXQ7XG4gICAgICAgIH0pKSB7XG4gICAgICAgICAgbWFwLnVwZGF0ZShzaG9ydE5hbWVQYXRoLCBmdW5jdGlvbiAobGlzdCkge1xuICAgICAgICAgICAgcmV0dXJuIFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkobGlzdCksIFtmaWVsZF0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTsgLy8gQ2hlY2sgaWYgTmFtZU1hcCB2YWx1ZSBpcyB0b3VjaGVkXG5cbiAgICB2YXIgaXNOYW1lUGF0aExpc3RUb3VjaGVkID0gZnVuY3Rpb24gaXNOYW1lUGF0aExpc3RUb3VjaGVkKGVudGl0aWVzKSB7XG4gICAgICByZXR1cm4gZW50aXRpZXMuc29tZShpc0ZpZWxkVG91Y2hlZCk7XG4gICAgfTtcblxuICAgIHZhciBuYW1lUGF0aExpc3RFbnRpdGllcyA9IG1hcC5tYXAoZnVuY3Rpb24gKF9yZWYyKSB7XG4gICAgICB2YXIgdmFsdWUgPSBfcmVmMi52YWx1ZTtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9KTtcbiAgICByZXR1cm4gaXNBbGxGaWVsZHNUb3VjaGVkID8gbmFtZVBhdGhMaXN0RW50aXRpZXMuZXZlcnkoaXNOYW1lUGF0aExpc3RUb3VjaGVkKSA6IG5hbWVQYXRoTGlzdEVudGl0aWVzLnNvbWUoaXNOYW1lUGF0aExpc3RUb3VjaGVkKTtcbiAgfTtcblxuICB0aGlzLmlzRmllbGRUb3VjaGVkID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBfdGhpcy53YXJuaW5nVW5ob29rZWQoKTtcblxuICAgIHJldHVybiBfdGhpcy5pc0ZpZWxkc1RvdWNoZWQoW25hbWVdKTtcbiAgfTtcblxuICB0aGlzLmlzRmllbGRzVmFsaWRhdGluZyA9IGZ1bmN0aW9uIChuYW1lTGlzdCkge1xuICAgIF90aGlzLndhcm5pbmdVbmhvb2tlZCgpO1xuXG4gICAgdmFyIGZpZWxkRW50aXRpZXMgPSBfdGhpcy5nZXRGaWVsZEVudGl0aWVzKCk7XG5cbiAgICBpZiAoIW5hbWVMaXN0KSB7XG4gICAgICByZXR1cm4gZmllbGRFbnRpdGllcy5zb21lKGZ1bmN0aW9uICh0ZXN0RmllbGQpIHtcbiAgICAgICAgcmV0dXJuIHRlc3RGaWVsZC5pc0ZpZWxkVmFsaWRhdGluZygpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdmFyIG5hbWVQYXRoTGlzdCA9IG5hbWVMaXN0Lm1hcChnZXROYW1lUGF0aCk7XG4gICAgcmV0dXJuIGZpZWxkRW50aXRpZXMuc29tZShmdW5jdGlvbiAodGVzdEZpZWxkKSB7XG4gICAgICB2YXIgZmllbGROYW1lUGF0aCA9IHRlc3RGaWVsZC5nZXROYW1lUGF0aCgpO1xuICAgICAgcmV0dXJuIGNvbnRhaW5zTmFtZVBhdGgobmFtZVBhdGhMaXN0LCBmaWVsZE5hbWVQYXRoKSAmJiB0ZXN0RmllbGQuaXNGaWVsZFZhbGlkYXRpbmcoKTtcbiAgICB9KTtcbiAgfTtcblxuICB0aGlzLmlzRmllbGRWYWxpZGF0aW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBfdGhpcy53YXJuaW5nVW5ob29rZWQoKTtcblxuICAgIHJldHVybiBfdGhpcy5pc0ZpZWxkc1ZhbGlkYXRpbmcoW25hbWVdKTtcbiAgfTtcblxuICB0aGlzLnJlc2V0V2l0aEZpZWxkSW5pdGlhbFZhbHVlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBpbmZvID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICAvLyBDcmVhdGUgY2FjaGVcbiAgICB2YXIgY2FjaGUgPSBuZXcgTmFtZU1hcCgpO1xuXG4gICAgdmFyIGZpZWxkRW50aXRpZXMgPSBfdGhpcy5nZXRGaWVsZEVudGl0aWVzKHRydWUpO1xuXG4gICAgZmllbGRFbnRpdGllcy5mb3JFYWNoKGZ1bmN0aW9uIChmaWVsZCkge1xuICAgICAgdmFyIGluaXRpYWxWYWx1ZSA9IGZpZWxkLnByb3BzLmluaXRpYWxWYWx1ZTtcbiAgICAgIHZhciBuYW1lUGF0aCA9IGZpZWxkLmdldE5hbWVQYXRoKCk7IC8vIFJlY29yZCBvbmx5IGlmIGhhcyBgaW5pdGlhbFZhbHVlYFxuXG4gICAgICBpZiAoaW5pdGlhbFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdmFyIHJlY29yZHMgPSBjYWNoZS5nZXQobmFtZVBhdGgpIHx8IG5ldyBTZXQoKTtcbiAgICAgICAgcmVjb3Jkcy5hZGQoe1xuICAgICAgICAgIGVudGl0eTogZmllbGQsXG4gICAgICAgICAgdmFsdWU6IGluaXRpYWxWYWx1ZVxuICAgICAgICB9KTtcbiAgICAgICAgY2FjaGUuc2V0KG5hbWVQYXRoLCByZWNvcmRzKTtcbiAgICAgIH1cbiAgICB9KTsgLy8gUmVzZXRcblxuICAgIHZhciByZXNldFdpdGhGaWVsZHMgPSBmdW5jdGlvbiByZXNldFdpdGhGaWVsZHMoZW50aXRpZXMpIHtcbiAgICAgIGVudGl0aWVzLmZvckVhY2goZnVuY3Rpb24gKGZpZWxkKSB7XG4gICAgICAgIHZhciBpbml0aWFsVmFsdWUgPSBmaWVsZC5wcm9wcy5pbml0aWFsVmFsdWU7XG5cbiAgICAgICAgaWYgKGluaXRpYWxWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdmFyIG5hbWVQYXRoID0gZmllbGQuZ2V0TmFtZVBhdGgoKTtcblxuICAgICAgICAgIHZhciBmb3JtSW5pdGlhbFZhbHVlID0gX3RoaXMuZ2V0SW5pdGlhbFZhbHVlKG5hbWVQYXRoKTtcblxuICAgICAgICAgIGlmIChmb3JtSW5pdGlhbFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIFdhcm5pbmcgaWYgY29uZmxpY3Qgd2l0aCBmb3JtIGluaXRpYWxWYWx1ZXMgYW5kIGRvIG5vdCBtb2RpZnkgdmFsdWVcbiAgICAgICAgICAgIHdhcm5pbmcoZmFsc2UsIFwiRm9ybSBhbHJlYWR5IHNldCAnaW5pdGlhbFZhbHVlcycgd2l0aCBwYXRoICdcIi5jb25jYXQobmFtZVBhdGguam9pbignLicpLCBcIicuIEZpZWxkIGNhbiBub3Qgb3ZlcndyaXRlIGl0LlwiKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciByZWNvcmRzID0gY2FjaGUuZ2V0KG5hbWVQYXRoKTtcblxuICAgICAgICAgICAgaWYgKHJlY29yZHMgJiYgcmVjb3Jkcy5zaXplID4gMSkge1xuICAgICAgICAgICAgICAvLyBXYXJuaW5nIGlmIG11bHRpcGxlIGZpZWxkIHNldCBgaW5pdGlhbFZhbHVlYGFuZCBkbyBub3QgbW9kaWZ5IHZhbHVlXG4gICAgICAgICAgICAgIHdhcm5pbmcoZmFsc2UsIFwiTXVsdGlwbGUgRmllbGQgd2l0aCBwYXRoICdcIi5jb25jYXQobmFtZVBhdGguam9pbignLicpLCBcIicgc2V0ICdpbml0aWFsVmFsdWUnLiBDYW4gbm90IGRlY2lkZSB3aGljaCBvbmUgdG8gcGljay5cIikpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChyZWNvcmRzKSB7XG4gICAgICAgICAgICAgIHZhciBvcmlnaW5WYWx1ZSA9IF90aGlzLmdldEZpZWxkVmFsdWUobmFtZVBhdGgpOyAvLyBTZXQgYGluaXRpYWxWYWx1ZWBcblxuXG4gICAgICAgICAgICAgIGlmICghaW5mby5za2lwRXhpc3QgfHwgb3JpZ2luVmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIF90aGlzLnVwZGF0ZVN0b3JlKHNldFZhbHVlKF90aGlzLnN0b3JlLCBuYW1lUGF0aCwgX3RvQ29uc3VtYWJsZUFycmF5KHJlY29yZHMpWzBdLnZhbHVlKSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICB2YXIgcmVxdWlyZWRGaWVsZEVudGl0aWVzO1xuXG4gICAgaWYgKGluZm8uZW50aXRpZXMpIHtcbiAgICAgIHJlcXVpcmVkRmllbGRFbnRpdGllcyA9IGluZm8uZW50aXRpZXM7XG4gICAgfSBlbHNlIGlmIChpbmZvLm5hbWVQYXRoTGlzdCkge1xuICAgICAgcmVxdWlyZWRGaWVsZEVudGl0aWVzID0gW107XG4gICAgICBpbmZvLm5hbWVQYXRoTGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lUGF0aCkge1xuICAgICAgICB2YXIgcmVjb3JkcyA9IGNhY2hlLmdldChuYW1lUGF0aCk7XG5cbiAgICAgICAgaWYgKHJlY29yZHMpIHtcbiAgICAgICAgICB2YXIgX3JlcXVpcmVkRmllbGRFbnRpdGllO1xuXG4gICAgICAgICAgKF9yZXF1aXJlZEZpZWxkRW50aXRpZSA9IHJlcXVpcmVkRmllbGRFbnRpdGllcykucHVzaC5hcHBseShfcmVxdWlyZWRGaWVsZEVudGl0aWUsIF90b0NvbnN1bWFibGVBcnJheShfdG9Db25zdW1hYmxlQXJyYXkocmVjb3JkcykubWFwKGZ1bmN0aW9uIChyKSB7XG4gICAgICAgICAgICByZXR1cm4gci5lbnRpdHk7XG4gICAgICAgICAgfSkpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcXVpcmVkRmllbGRFbnRpdGllcyA9IGZpZWxkRW50aXRpZXM7XG4gICAgfVxuXG4gICAgcmVzZXRXaXRoRmllbGRzKHJlcXVpcmVkRmllbGRFbnRpdGllcyk7XG4gIH07XG5cbiAgdGhpcy5yZXNldEZpZWxkcyA9IGZ1bmN0aW9uIChuYW1lTGlzdCkge1xuICAgIF90aGlzLndhcm5pbmdVbmhvb2tlZCgpO1xuXG4gICAgdmFyIHByZXZTdG9yZSA9IF90aGlzLnN0b3JlO1xuXG4gICAgaWYgKCFuYW1lTGlzdCkge1xuICAgICAgX3RoaXMudXBkYXRlU3RvcmUoc2V0VmFsdWVzKHt9LCBfdGhpcy5pbml0aWFsVmFsdWVzKSk7XG5cbiAgICAgIF90aGlzLnJlc2V0V2l0aEZpZWxkSW5pdGlhbFZhbHVlKCk7XG5cbiAgICAgIF90aGlzLm5vdGlmeU9ic2VydmVycyhwcmV2U3RvcmUsIG51bGwsIHtcbiAgICAgICAgdHlwZTogJ3Jlc2V0J1xuICAgICAgfSk7XG5cbiAgICAgIF90aGlzLm5vdGlmeVdhdGNoKCk7XG5cbiAgICAgIHJldHVybjtcbiAgICB9IC8vIFJlc2V0IGJ5IGBuYW1lTGlzdGBcblxuXG4gICAgdmFyIG5hbWVQYXRoTGlzdCA9IG5hbWVMaXN0Lm1hcChnZXROYW1lUGF0aCk7XG4gICAgbmFtZVBhdGhMaXN0LmZvckVhY2goZnVuY3Rpb24gKG5hbWVQYXRoKSB7XG4gICAgICB2YXIgaW5pdGlhbFZhbHVlID0gX3RoaXMuZ2V0SW5pdGlhbFZhbHVlKG5hbWVQYXRoKTtcblxuICAgICAgX3RoaXMudXBkYXRlU3RvcmUoc2V0VmFsdWUoX3RoaXMuc3RvcmUsIG5hbWVQYXRoLCBpbml0aWFsVmFsdWUpKTtcbiAgICB9KTtcblxuICAgIF90aGlzLnJlc2V0V2l0aEZpZWxkSW5pdGlhbFZhbHVlKHtcbiAgICAgIG5hbWVQYXRoTGlzdDogbmFtZVBhdGhMaXN0XG4gICAgfSk7XG5cbiAgICBfdGhpcy5ub3RpZnlPYnNlcnZlcnMocHJldlN0b3JlLCBuYW1lUGF0aExpc3QsIHtcbiAgICAgIHR5cGU6ICdyZXNldCdcbiAgICB9KTtcblxuICAgIF90aGlzLm5vdGlmeVdhdGNoKG5hbWVQYXRoTGlzdCk7XG4gIH07XG5cbiAgdGhpcy5zZXRGaWVsZHMgPSBmdW5jdGlvbiAoZmllbGRzKSB7XG4gICAgX3RoaXMud2FybmluZ1VuaG9va2VkKCk7XG5cbiAgICB2YXIgcHJldlN0b3JlID0gX3RoaXMuc3RvcmU7XG4gICAgdmFyIG5hbWVQYXRoTGlzdCA9IFtdO1xuICAgIGZpZWxkcy5mb3JFYWNoKGZ1bmN0aW9uIChmaWVsZERhdGEpIHtcbiAgICAgIHZhciBuYW1lID0gZmllbGREYXRhLm5hbWUsXG4gICAgICAgICAgZXJyb3JzID0gZmllbGREYXRhLmVycm9ycyxcbiAgICAgICAgICBkYXRhID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKGZpZWxkRGF0YSwgX2V4Y2x1ZGVkKTtcblxuICAgICAgdmFyIG5hbWVQYXRoID0gZ2V0TmFtZVBhdGgobmFtZSk7XG4gICAgICBuYW1lUGF0aExpc3QucHVzaChuYW1lUGF0aCk7IC8vIFZhbHVlXG5cbiAgICAgIGlmICgndmFsdWUnIGluIGRhdGEpIHtcbiAgICAgICAgX3RoaXMudXBkYXRlU3RvcmUoc2V0VmFsdWUoX3RoaXMuc3RvcmUsIG5hbWVQYXRoLCBkYXRhLnZhbHVlKSk7XG4gICAgICB9XG5cbiAgICAgIF90aGlzLm5vdGlmeU9ic2VydmVycyhwcmV2U3RvcmUsIFtuYW1lUGF0aF0sIHtcbiAgICAgICAgdHlwZTogJ3NldEZpZWxkJyxcbiAgICAgICAgZGF0YTogZmllbGREYXRhXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIF90aGlzLm5vdGlmeVdhdGNoKG5hbWVQYXRoTGlzdCk7XG4gIH07XG5cbiAgdGhpcy5nZXRGaWVsZHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGVudGl0aWVzID0gX3RoaXMuZ2V0RmllbGRFbnRpdGllcyh0cnVlKTtcblxuICAgIHZhciBmaWVsZHMgPSBlbnRpdGllcy5tYXAoZnVuY3Rpb24gKGZpZWxkKSB7XG4gICAgICB2YXIgbmFtZVBhdGggPSBmaWVsZC5nZXROYW1lUGF0aCgpO1xuICAgICAgdmFyIG1ldGEgPSBmaWVsZC5nZXRNZXRhKCk7XG5cbiAgICAgIHZhciBmaWVsZERhdGEgPSBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIG1ldGEpLCB7fSwge1xuICAgICAgICBuYW1lOiBuYW1lUGF0aCxcbiAgICAgICAgdmFsdWU6IF90aGlzLmdldEZpZWxkVmFsdWUobmFtZVBhdGgpXG4gICAgICB9KTtcblxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGZpZWxkRGF0YSwgJ29yaWdpblJDRmllbGQnLCB7XG4gICAgICAgIHZhbHVlOiB0cnVlXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBmaWVsZERhdGE7XG4gICAgfSk7XG4gICAgcmV0dXJuIGZpZWxkcztcbiAgfTtcblxuICB0aGlzLmluaXRFbnRpdHlWYWx1ZSA9IGZ1bmN0aW9uIChlbnRpdHkpIHtcbiAgICB2YXIgaW5pdGlhbFZhbHVlID0gZW50aXR5LnByb3BzLmluaXRpYWxWYWx1ZTtcblxuICAgIGlmIChpbml0aWFsVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdmFyIG5hbWVQYXRoID0gZW50aXR5LmdldE5hbWVQYXRoKCk7XG4gICAgICB2YXIgcHJldlZhbHVlID0gZ2V0VmFsdWUoX3RoaXMuc3RvcmUsIG5hbWVQYXRoKTtcblxuICAgICAgaWYgKHByZXZWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIF90aGlzLnVwZGF0ZVN0b3JlKHNldFZhbHVlKF90aGlzLnN0b3JlLCBuYW1lUGF0aCwgaW5pdGlhbFZhbHVlKSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHRoaXMuaXNNZXJnZWRQcmVzZXJ2ZSA9IGZ1bmN0aW9uIChmaWVsZFByZXNlcnZlKSB7XG4gICAgdmFyIG1lcmdlZFByZXNlcnZlID0gZmllbGRQcmVzZXJ2ZSAhPT0gdW5kZWZpbmVkID8gZmllbGRQcmVzZXJ2ZSA6IF90aGlzLnByZXNlcnZlO1xuICAgIHJldHVybiBtZXJnZWRQcmVzZXJ2ZSAhPT0gbnVsbCAmJiBtZXJnZWRQcmVzZXJ2ZSAhPT0gdm9pZCAwID8gbWVyZ2VkUHJlc2VydmUgOiB0cnVlO1xuICB9O1xuXG4gIHRoaXMucmVnaXN0ZXJGaWVsZCA9IGZ1bmN0aW9uIChlbnRpdHkpIHtcbiAgICBfdGhpcy5maWVsZEVudGl0aWVzLnB1c2goZW50aXR5KTtcblxuICAgIHZhciBuYW1lUGF0aCA9IGVudGl0eS5nZXROYW1lUGF0aCgpO1xuXG4gICAgX3RoaXMubm90aWZ5V2F0Y2goW25hbWVQYXRoXSk7IC8vIFNldCBpbml0aWFsIHZhbHVlc1xuXG5cbiAgICBpZiAoZW50aXR5LnByb3BzLmluaXRpYWxWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YXIgcHJldlN0b3JlID0gX3RoaXMuc3RvcmU7XG5cbiAgICAgIF90aGlzLnJlc2V0V2l0aEZpZWxkSW5pdGlhbFZhbHVlKHtcbiAgICAgICAgZW50aXRpZXM6IFtlbnRpdHldLFxuICAgICAgICBza2lwRXhpc3Q6IHRydWVcbiAgICAgIH0pO1xuXG4gICAgICBfdGhpcy5ub3RpZnlPYnNlcnZlcnMocHJldlN0b3JlLCBbZW50aXR5LmdldE5hbWVQYXRoKCldLCB7XG4gICAgICAgIHR5cGU6ICd2YWx1ZVVwZGF0ZScsXG4gICAgICAgIHNvdXJjZTogJ2ludGVybmFsJ1xuICAgICAgfSk7XG4gICAgfSAvLyB1bi1yZWdpc3RlciBmaWVsZCBjYWxsYmFja1xuXG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKGlzTGlzdEZpZWxkLCBwcmVzZXJ2ZSkge1xuICAgICAgdmFyIHN1Yk5hbWVQYXRoID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBbXTtcbiAgICAgIF90aGlzLmZpZWxkRW50aXRpZXMgPSBfdGhpcy5maWVsZEVudGl0aWVzLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICByZXR1cm4gaXRlbSAhPT0gZW50aXR5O1xuICAgICAgfSk7IC8vIENsZWFuIHVwIHN0b3JlIHZhbHVlIGlmIG5vdCBwcmVzZXJ2ZVxuXG4gICAgICBpZiAoIV90aGlzLmlzTWVyZ2VkUHJlc2VydmUocHJlc2VydmUpICYmICghaXNMaXN0RmllbGQgfHwgc3ViTmFtZVBhdGgubGVuZ3RoID4gMSkpIHtcbiAgICAgICAgdmFyIGRlZmF1bHRWYWx1ZSA9IGlzTGlzdEZpZWxkID8gdW5kZWZpbmVkIDogX3RoaXMuZ2V0SW5pdGlhbFZhbHVlKG5hbWVQYXRoKTtcblxuICAgICAgICBpZiAobmFtZVBhdGgubGVuZ3RoICYmIF90aGlzLmdldEZpZWxkVmFsdWUobmFtZVBhdGgpICE9PSBkZWZhdWx0VmFsdWUgJiYgX3RoaXMuZmllbGRFbnRpdGllcy5ldmVyeShmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgICAgICByZXR1cm4gKC8vIE9ubHkgcmVzZXQgd2hlbiBubyBuYW1lUGF0aCBleGlzdFxuICAgICAgICAgICAgIW1hdGNoTmFtZVBhdGgoZmllbGQuZ2V0TmFtZVBhdGgoKSwgbmFtZVBhdGgpXG4gICAgICAgICAgKTtcbiAgICAgICAgfSkpIHtcbiAgICAgICAgICB2YXIgX3ByZXZTdG9yZSA9IF90aGlzLnN0b3JlO1xuXG4gICAgICAgICAgX3RoaXMudXBkYXRlU3RvcmUoc2V0VmFsdWUoX3ByZXZTdG9yZSwgbmFtZVBhdGgsIGRlZmF1bHRWYWx1ZSwgdHJ1ZSkpOyAvLyBOb3RpZnkgdGhhdCBmaWVsZCBpcyB1bm1vdW50XG5cblxuICAgICAgICAgIF90aGlzLm5vdGlmeU9ic2VydmVycyhfcHJldlN0b3JlLCBbbmFtZVBhdGhdLCB7XG4gICAgICAgICAgICB0eXBlOiAncmVtb3ZlJ1xuICAgICAgICAgIH0pOyAvLyBEZXBlbmRlbmNpZXMgdXBkYXRlXG5cblxuICAgICAgICAgIF90aGlzLnRyaWdnZXJEZXBlbmRlbmNpZXNVcGRhdGUoX3ByZXZTdG9yZSwgbmFtZVBhdGgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIF90aGlzLm5vdGlmeVdhdGNoKFtuYW1lUGF0aF0pO1xuICAgIH07XG4gIH07XG5cbiAgdGhpcy5kaXNwYXRjaCA9IGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgICBjYXNlICd1cGRhdGVWYWx1ZSc6XG4gICAgICAgIHtcbiAgICAgICAgICB2YXIgbmFtZVBhdGggPSBhY3Rpb24ubmFtZVBhdGgsXG4gICAgICAgICAgICAgIHZhbHVlID0gYWN0aW9uLnZhbHVlO1xuXG4gICAgICAgICAgX3RoaXMudXBkYXRlVmFsdWUobmFtZVBhdGgsIHZhbHVlKTtcblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgIGNhc2UgJ3ZhbGlkYXRlRmllbGQnOlxuICAgICAgICB7XG4gICAgICAgICAgdmFyIF9uYW1lUGF0aCA9IGFjdGlvbi5uYW1lUGF0aCxcbiAgICAgICAgICAgICAgdHJpZ2dlck5hbWUgPSBhY3Rpb24udHJpZ2dlck5hbWU7XG5cbiAgICAgICAgICBfdGhpcy52YWxpZGF0ZUZpZWxkcyhbX25hbWVQYXRoXSwge1xuICAgICAgICAgICAgdHJpZ2dlck5hbWU6IHRyaWdnZXJOYW1lXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICBkZWZhdWx0OiAvLyBDdXJyZW50bHkgd2UgZG9uJ3QgaGF2ZSBvdGhlciBhY3Rpb24uIERvIG5vdGhpbmcuXG5cbiAgICB9XG4gIH07XG5cbiAgdGhpcy5ub3RpZnlPYnNlcnZlcnMgPSBmdW5jdGlvbiAocHJldlN0b3JlLCBuYW1lUGF0aExpc3QsIGluZm8pIHtcbiAgICBpZiAoX3RoaXMuc3Vic2NyaWJhYmxlKSB7XG4gICAgICB2YXIgbWVyZ2VkSW5mbyA9IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgaW5mbyksIHt9LCB7XG4gICAgICAgIHN0b3JlOiBfdGhpcy5nZXRGaWVsZHNWYWx1ZSh0cnVlKVxuICAgICAgfSk7XG5cbiAgICAgIF90aGlzLmdldEZpZWxkRW50aXRpZXMoKS5mb3JFYWNoKGZ1bmN0aW9uIChfcmVmMykge1xuICAgICAgICB2YXIgb25TdG9yZUNoYW5nZSA9IF9yZWYzLm9uU3RvcmVDaGFuZ2U7XG4gICAgICAgIG9uU3RvcmVDaGFuZ2UocHJldlN0b3JlLCBuYW1lUGF0aExpc3QsIG1lcmdlZEluZm8pO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIF90aGlzLmZvcmNlUm9vdFVwZGF0ZSgpO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLnRyaWdnZXJEZXBlbmRlbmNpZXNVcGRhdGUgPSBmdW5jdGlvbiAocHJldlN0b3JlLCBuYW1lUGF0aCkge1xuICAgIHZhciBjaGlsZHJlbkZpZWxkcyA9IF90aGlzLmdldERlcGVuZGVuY3lDaGlsZHJlbkZpZWxkcyhuYW1lUGF0aCk7XG5cbiAgICBpZiAoY2hpbGRyZW5GaWVsZHMubGVuZ3RoKSB7XG4gICAgICBfdGhpcy52YWxpZGF0ZUZpZWxkcyhjaGlsZHJlbkZpZWxkcyk7XG4gICAgfVxuXG4gICAgX3RoaXMubm90aWZ5T2JzZXJ2ZXJzKHByZXZTdG9yZSwgY2hpbGRyZW5GaWVsZHMsIHtcbiAgICAgIHR5cGU6ICdkZXBlbmRlbmNpZXNVcGRhdGUnLFxuICAgICAgcmVsYXRlZEZpZWxkczogW25hbWVQYXRoXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KGNoaWxkcmVuRmllbGRzKSlcbiAgICB9KTtcblxuICAgIHJldHVybiBjaGlsZHJlbkZpZWxkcztcbiAgfTtcblxuICB0aGlzLnVwZGF0ZVZhbHVlID0gZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gICAgdmFyIG5hbWVQYXRoID0gZ2V0TmFtZVBhdGgobmFtZSk7XG4gICAgdmFyIHByZXZTdG9yZSA9IF90aGlzLnN0b3JlO1xuXG4gICAgX3RoaXMudXBkYXRlU3RvcmUoc2V0VmFsdWUoX3RoaXMuc3RvcmUsIG5hbWVQYXRoLCB2YWx1ZSkpO1xuXG4gICAgX3RoaXMubm90aWZ5T2JzZXJ2ZXJzKHByZXZTdG9yZSwgW25hbWVQYXRoXSwge1xuICAgICAgdHlwZTogJ3ZhbHVlVXBkYXRlJyxcbiAgICAgIHNvdXJjZTogJ2ludGVybmFsJ1xuICAgIH0pO1xuXG4gICAgX3RoaXMubm90aWZ5V2F0Y2goW25hbWVQYXRoXSk7IC8vIERlcGVuZGVuY2llcyB1cGRhdGVcblxuXG4gICAgdmFyIGNoaWxkcmVuRmllbGRzID0gX3RoaXMudHJpZ2dlckRlcGVuZGVuY2llc1VwZGF0ZShwcmV2U3RvcmUsIG5hbWVQYXRoKTsgLy8gdHJpZ2dlciBjYWxsYmFjayBmdW5jdGlvblxuXG5cbiAgICB2YXIgb25WYWx1ZXNDaGFuZ2UgPSBfdGhpcy5jYWxsYmFja3Mub25WYWx1ZXNDaGFuZ2U7XG5cbiAgICBpZiAob25WYWx1ZXNDaGFuZ2UpIHtcbiAgICAgIHZhciBjaGFuZ2VkVmFsdWVzID0gY2xvbmVCeU5hbWVQYXRoTGlzdChfdGhpcy5zdG9yZSwgW25hbWVQYXRoXSk7XG4gICAgICBvblZhbHVlc0NoYW5nZShjaGFuZ2VkVmFsdWVzLCBfdGhpcy5nZXRGaWVsZHNWYWx1ZSgpKTtcbiAgICB9XG5cbiAgICBfdGhpcy50cmlnZ2VyT25GaWVsZHNDaGFuZ2UoW25hbWVQYXRoXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KGNoaWxkcmVuRmllbGRzKSkpO1xuICB9O1xuXG4gIHRoaXMuc2V0RmllbGRzVmFsdWUgPSBmdW5jdGlvbiAoc3RvcmUpIHtcbiAgICBfdGhpcy53YXJuaW5nVW5ob29rZWQoKTtcblxuICAgIHZhciBwcmV2U3RvcmUgPSBfdGhpcy5zdG9yZTtcblxuICAgIGlmIChzdG9yZSkge1xuICAgICAgdmFyIG5leHRTdG9yZSA9IHNldFZhbHVlcyhfdGhpcy5zdG9yZSwgc3RvcmUpO1xuXG4gICAgICBfdGhpcy51cGRhdGVTdG9yZShuZXh0U3RvcmUpO1xuICAgIH1cblxuICAgIF90aGlzLm5vdGlmeU9ic2VydmVycyhwcmV2U3RvcmUsIG51bGwsIHtcbiAgICAgIHR5cGU6ICd2YWx1ZVVwZGF0ZScsXG4gICAgICBzb3VyY2U6ICdleHRlcm5hbCdcbiAgICB9KTtcblxuICAgIF90aGlzLm5vdGlmeVdhdGNoKCk7XG4gIH07XG5cbiAgdGhpcy5nZXREZXBlbmRlbmN5Q2hpbGRyZW5GaWVsZHMgPSBmdW5jdGlvbiAocm9vdE5hbWVQYXRoKSB7XG4gICAgdmFyIGNoaWxkcmVuID0gbmV3IFNldCgpO1xuICAgIHZhciBjaGlsZHJlbkZpZWxkcyA9IFtdO1xuICAgIHZhciBkZXBlbmRlbmNpZXMyZmllbGRzID0gbmV3IE5hbWVNYXAoKTtcbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZSBtYXBzXG4gICAgICogQ2FuIHVzZSBjYWNoZSB0byBzYXZlIHBlcmYgaWYgdXNlciByZXBvcnQgcGVyZm9ybWFuY2UgaXNzdWUgd2l0aCB0aGlzXG4gICAgICovXG5cbiAgICBfdGhpcy5nZXRGaWVsZEVudGl0aWVzKCkuZm9yRWFjaChmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgIHZhciBkZXBlbmRlbmNpZXMgPSBmaWVsZC5wcm9wcy5kZXBlbmRlbmNpZXM7XG4gICAgICAoZGVwZW5kZW5jaWVzIHx8IFtdKS5mb3JFYWNoKGZ1bmN0aW9uIChkZXBlbmRlbmN5KSB7XG4gICAgICAgIHZhciBkZXBlbmRlbmN5TmFtZVBhdGggPSBnZXROYW1lUGF0aChkZXBlbmRlbmN5KTtcbiAgICAgICAgZGVwZW5kZW5jaWVzMmZpZWxkcy51cGRhdGUoZGVwZW5kZW5jeU5hbWVQYXRoLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIGZpZWxkcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogbmV3IFNldCgpO1xuICAgICAgICAgIGZpZWxkcy5hZGQoZmllbGQpO1xuICAgICAgICAgIHJldHVybiBmaWVsZHM7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICB2YXIgZmlsbENoaWxkcmVuID0gZnVuY3Rpb24gZmlsbENoaWxkcmVuKG5hbWVQYXRoKSB7XG4gICAgICB2YXIgZmllbGRzID0gZGVwZW5kZW5jaWVzMmZpZWxkcy5nZXQobmFtZVBhdGgpIHx8IG5ldyBTZXQoKTtcbiAgICAgIGZpZWxkcy5mb3JFYWNoKGZ1bmN0aW9uIChmaWVsZCkge1xuICAgICAgICBpZiAoIWNoaWxkcmVuLmhhcyhmaWVsZCkpIHtcbiAgICAgICAgICBjaGlsZHJlbi5hZGQoZmllbGQpO1xuICAgICAgICAgIHZhciBmaWVsZE5hbWVQYXRoID0gZmllbGQuZ2V0TmFtZVBhdGgoKTtcblxuICAgICAgICAgIGlmIChmaWVsZC5pc0ZpZWxkRGlydHkoKSAmJiBmaWVsZE5hbWVQYXRoLmxlbmd0aCkge1xuICAgICAgICAgICAgY2hpbGRyZW5GaWVsZHMucHVzaChmaWVsZE5hbWVQYXRoKTtcbiAgICAgICAgICAgIGZpbGxDaGlsZHJlbihmaWVsZE5hbWVQYXRoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBmaWxsQ2hpbGRyZW4ocm9vdE5hbWVQYXRoKTtcbiAgICByZXR1cm4gY2hpbGRyZW5GaWVsZHM7XG4gIH07XG5cbiAgdGhpcy50cmlnZ2VyT25GaWVsZHNDaGFuZ2UgPSBmdW5jdGlvbiAobmFtZVBhdGhMaXN0LCBmaWxlZEVycm9ycykge1xuICAgIHZhciBvbkZpZWxkc0NoYW5nZSA9IF90aGlzLmNhbGxiYWNrcy5vbkZpZWxkc0NoYW5nZTtcblxuICAgIGlmIChvbkZpZWxkc0NoYW5nZSkge1xuICAgICAgdmFyIGZpZWxkcyA9IF90aGlzLmdldEZpZWxkcygpO1xuICAgICAgLyoqXG4gICAgICAgKiBGaWxsIGVycm9ycyBzaW5jZSBgZmllbGRzYCBtYXkgYmUgcmVwbGFjZWQgYnkgY29udHJvbGxlZCBmaWVsZHNcbiAgICAgICAqL1xuXG5cbiAgICAgIGlmIChmaWxlZEVycm9ycykge1xuICAgICAgICB2YXIgY2FjaGUgPSBuZXcgTmFtZU1hcCgpO1xuICAgICAgICBmaWxlZEVycm9ycy5mb3JFYWNoKGZ1bmN0aW9uIChfcmVmNCkge1xuICAgICAgICAgIHZhciBuYW1lID0gX3JlZjQubmFtZSxcbiAgICAgICAgICAgICAgZXJyb3JzID0gX3JlZjQuZXJyb3JzO1xuICAgICAgICAgIGNhY2hlLnNldChuYW1lLCBlcnJvcnMpO1xuICAgICAgICB9KTtcbiAgICAgICAgZmllbGRzLmZvckVhY2goZnVuY3Rpb24gKGZpZWxkKSB7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgICAgZmllbGQuZXJyb3JzID0gY2FjaGUuZ2V0KGZpZWxkLm5hbWUpIHx8IGZpZWxkLmVycm9ycztcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBjaGFuZ2VkRmllbGRzID0gZmllbGRzLmZpbHRlcihmdW5jdGlvbiAoX3JlZjUpIHtcbiAgICAgICAgdmFyIGZpZWxkTmFtZSA9IF9yZWY1Lm5hbWU7XG4gICAgICAgIHJldHVybiBjb250YWluc05hbWVQYXRoKG5hbWVQYXRoTGlzdCwgZmllbGROYW1lKTtcbiAgICAgIH0pO1xuICAgICAgb25GaWVsZHNDaGFuZ2UoY2hhbmdlZEZpZWxkcywgZmllbGRzKTtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy52YWxpZGF0ZUZpZWxkcyA9IGZ1bmN0aW9uIChuYW1lTGlzdCwgb3B0aW9ucykge1xuICAgIF90aGlzLndhcm5pbmdVbmhvb2tlZCgpO1xuXG4gICAgdmFyIHByb3ZpZGVOYW1lTGlzdCA9ICEhbmFtZUxpc3Q7XG4gICAgdmFyIG5hbWVQYXRoTGlzdCA9IHByb3ZpZGVOYW1lTGlzdCA/IG5hbWVMaXN0Lm1hcChnZXROYW1lUGF0aCkgOiBbXTsgLy8gQ29sbGVjdCByZXN1bHQgaW4gcHJvbWlzZSBsaXN0XG5cbiAgICB2YXIgcHJvbWlzZUxpc3QgPSBbXTtcblxuICAgIF90aGlzLmdldEZpZWxkRW50aXRpZXModHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgIC8vIEFkZCBmaWVsZCBpZiBub3QgcHJvdmlkZSBgbmFtZUxpc3RgXG4gICAgICBpZiAoIXByb3ZpZGVOYW1lTGlzdCkge1xuICAgICAgICBuYW1lUGF0aExpc3QucHVzaChmaWVsZC5nZXROYW1lUGF0aCgpKTtcbiAgICAgIH1cbiAgICAgIC8qKlxuICAgICAgICogUmVjdXJzaXZlIHZhbGlkYXRlIGlmIGNvbmZpZ3VyZWQuXG4gICAgICAgKiBUT0RPOiBwZXJmIGltcHJvdmVtZW50IEB6b21iaWVKXG4gICAgICAgKi9cblxuXG4gICAgICBpZiAoKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5yZWN1cnNpdmUpICYmIHByb3ZpZGVOYW1lTGlzdCkge1xuICAgICAgICB2YXIgbmFtZVBhdGggPSBmaWVsZC5nZXROYW1lUGF0aCgpO1xuXG4gICAgICAgIGlmICggLy8gbmFtZUxpc3RbaV0gPT09IHVuZGVmaW5lZCDor7TmmI7mmK/ku6UgbmFtZUxpc3Qg5byA5aS055qEXG4gICAgICAgIC8vIFsnbmFtZSddIC0+IFsnbmFtZScsJ2xpc3QnXVxuICAgICAgICBuYW1lUGF0aC5ldmVyeShmdW5jdGlvbiAobmFtZVVuaXQsIGkpIHtcbiAgICAgICAgICByZXR1cm4gbmFtZUxpc3RbaV0gPT09IG5hbWVVbml0IHx8IG5hbWVMaXN0W2ldID09PSB1bmRlZmluZWQ7XG4gICAgICAgIH0pKSB7XG4gICAgICAgICAgbmFtZVBhdGhMaXN0LnB1c2gobmFtZVBhdGgpO1xuICAgICAgICB9XG4gICAgICB9IC8vIFNraXAgaWYgd2l0aG91dCBydWxlXG5cblxuICAgICAgaWYgKCFmaWVsZC5wcm9wcy5ydWxlcyB8fCAhZmllbGQucHJvcHMucnVsZXMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGZpZWxkTmFtZVBhdGggPSBmaWVsZC5nZXROYW1lUGF0aCgpOyAvLyBBZGQgZmllbGQgdmFsaWRhdGUgcnVsZSBpbiB0byBwcm9taXNlIGxpc3RcblxuICAgICAgaWYgKCFwcm92aWRlTmFtZUxpc3QgfHwgY29udGFpbnNOYW1lUGF0aChuYW1lUGF0aExpc3QsIGZpZWxkTmFtZVBhdGgpKSB7XG4gICAgICAgIHZhciBwcm9taXNlID0gZmllbGQudmFsaWRhdGVSdWxlcyhfb2JqZWN0U3ByZWFkKHtcbiAgICAgICAgICB2YWxpZGF0ZU1lc3NhZ2VzOiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGRlZmF1bHRWYWxpZGF0ZU1lc3NhZ2VzKSwgX3RoaXMudmFsaWRhdGVNZXNzYWdlcylcbiAgICAgICAgfSwgb3B0aW9ucykpOyAvLyBXcmFwIHByb21pc2Ugd2l0aCBmaWVsZFxuXG4gICAgICAgIHByb21pc2VMaXN0LnB1c2gocHJvbWlzZS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbmFtZTogZmllbGROYW1lUGF0aCxcbiAgICAgICAgICAgIGVycm9yczogW10sXG4gICAgICAgICAgICB3YXJuaW5nczogW11cbiAgICAgICAgICB9O1xuICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAocnVsZUVycm9ycykge1xuICAgICAgICAgIHZhciBtZXJnZWRFcnJvcnMgPSBbXTtcbiAgICAgICAgICB2YXIgbWVyZ2VkV2FybmluZ3MgPSBbXTtcbiAgICAgICAgICBydWxlRXJyb3JzLmZvckVhY2goZnVuY3Rpb24gKF9yZWY2KSB7XG4gICAgICAgICAgICB2YXIgd2FybmluZ09ubHkgPSBfcmVmNi5ydWxlLndhcm5pbmdPbmx5LFxuICAgICAgICAgICAgICAgIGVycm9ycyA9IF9yZWY2LmVycm9ycztcblxuICAgICAgICAgICAgaWYgKHdhcm5pbmdPbmx5KSB7XG4gICAgICAgICAgICAgIG1lcmdlZFdhcm5pbmdzLnB1c2guYXBwbHkobWVyZ2VkV2FybmluZ3MsIF90b0NvbnN1bWFibGVBcnJheShlcnJvcnMpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG1lcmdlZEVycm9ycy5wdXNoLmFwcGx5KG1lcmdlZEVycm9ycywgX3RvQ29uc3VtYWJsZUFycmF5KGVycm9ycykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaWYgKG1lcmdlZEVycm9ycy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCh7XG4gICAgICAgICAgICAgIG5hbWU6IGZpZWxkTmFtZVBhdGgsXG4gICAgICAgICAgICAgIGVycm9yczogbWVyZ2VkRXJyb3JzLFxuICAgICAgICAgICAgICB3YXJuaW5nczogbWVyZ2VkV2FybmluZ3NcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBuYW1lOiBmaWVsZE5hbWVQYXRoLFxuICAgICAgICAgICAgZXJyb3JzOiBtZXJnZWRFcnJvcnMsXG4gICAgICAgICAgICB3YXJuaW5nczogbWVyZ2VkV2FybmluZ3NcbiAgICAgICAgICB9O1xuICAgICAgICB9KSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB2YXIgc3VtbWFyeVByb21pc2UgPSBhbGxQcm9taXNlRmluaXNoKHByb21pc2VMaXN0KTtcbiAgICBfdGhpcy5sYXN0VmFsaWRhdGVQcm9taXNlID0gc3VtbWFyeVByb21pc2U7IC8vIE5vdGlmeSBmaWVsZHMgd2l0aCBydWxlIHRoYXQgdmFsaWRhdGUgaGFzIGZpbmlzaGVkIGFuZCBuZWVkIHVwZGF0ZVxuXG4gICAgc3VtbWFyeVByb21pc2UuY2F0Y2goZnVuY3Rpb24gKHJlc3VsdHMpIHtcbiAgICAgIHJldHVybiByZXN1bHRzO1xuICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3VsdHMpIHtcbiAgICAgIHZhciByZXN1bHROYW1lUGF0aExpc3QgPSByZXN1bHRzLm1hcChmdW5jdGlvbiAoX3JlZjcpIHtcbiAgICAgICAgdmFyIG5hbWUgPSBfcmVmNy5uYW1lO1xuICAgICAgICByZXR1cm4gbmFtZTtcbiAgICAgIH0pO1xuXG4gICAgICBfdGhpcy5ub3RpZnlPYnNlcnZlcnMoX3RoaXMuc3RvcmUsIHJlc3VsdE5hbWVQYXRoTGlzdCwge1xuICAgICAgICB0eXBlOiAndmFsaWRhdGVGaW5pc2gnXG4gICAgICB9KTtcblxuICAgICAgX3RoaXMudHJpZ2dlck9uRmllbGRzQ2hhbmdlKHJlc3VsdE5hbWVQYXRoTGlzdCwgcmVzdWx0cyk7XG4gICAgfSk7XG4gICAgdmFyIHJldHVyblByb21pc2UgPSBzdW1tYXJ5UHJvbWlzZS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChfdGhpcy5sYXN0VmFsaWRhdGVQcm9taXNlID09PSBzdW1tYXJ5UHJvbWlzZSkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKF90aGlzLmdldEZpZWxkc1ZhbHVlKG5hbWVQYXRoTGlzdCkpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoW10pO1xuICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChyZXN1bHRzKSB7XG4gICAgICB2YXIgZXJyb3JMaXN0ID0gcmVzdWx0cy5maWx0ZXIoZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0ICYmIHJlc3VsdC5lcnJvcnMubGVuZ3RoO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3Qoe1xuICAgICAgICB2YWx1ZXM6IF90aGlzLmdldEZpZWxkc1ZhbHVlKG5hbWVQYXRoTGlzdCksXG4gICAgICAgIGVycm9yRmllbGRzOiBlcnJvckxpc3QsXG4gICAgICAgIG91dE9mRGF0ZTogX3RoaXMubGFzdFZhbGlkYXRlUHJvbWlzZSAhPT0gc3VtbWFyeVByb21pc2VcbiAgICAgIH0pO1xuICAgIH0pOyAvLyBEbyBub3QgdGhyb3cgaW4gY29uc29sZVxuXG4gICAgcmV0dXJuUHJvbWlzZS5jYXRjaChmdW5jdGlvbiAoZSkge1xuICAgICAgcmV0dXJuIGU7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJldHVyblByb21pc2U7XG4gIH07XG5cbiAgdGhpcy5zdWJtaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgX3RoaXMud2FybmluZ1VuaG9va2VkKCk7XG5cbiAgICBfdGhpcy52YWxpZGF0ZUZpZWxkcygpLnRoZW4oZnVuY3Rpb24gKHZhbHVlcykge1xuICAgICAgdmFyIG9uRmluaXNoID0gX3RoaXMuY2FsbGJhY2tzLm9uRmluaXNoO1xuXG4gICAgICBpZiAob25GaW5pc2gpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBvbkZpbmlzaCh2YWx1ZXMpO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAvLyBTaG91bGQgcHJpbnQgZXJyb3IgaWYgdXNlciBgb25GaW5pc2hgIGNhbGxiYWNrIGZhaWxlZFxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICB2YXIgb25GaW5pc2hGYWlsZWQgPSBfdGhpcy5jYWxsYmFja3Mub25GaW5pc2hGYWlsZWQ7XG5cbiAgICAgIGlmIChvbkZpbmlzaEZhaWxlZCkge1xuICAgICAgICBvbkZpbmlzaEZhaWxlZChlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB0aGlzLmZvcmNlUm9vdFVwZGF0ZSA9IGZvcmNlUm9vdFVwZGF0ZTtcbn0pO1xuXG5mdW5jdGlvbiB1c2VGb3JtKGZvcm0pIHtcbiAgdmFyIGZvcm1SZWYgPSBSZWFjdC51c2VSZWYoKTtcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUoe30pLFxuICAgICAgX1JlYWN0JHVzZVN0YXRlMiA9IF9zbGljZWRUb0FycmF5KF9SZWFjdCR1c2VTdGF0ZSwgMiksXG4gICAgICBmb3JjZVVwZGF0ZSA9IF9SZWFjdCR1c2VTdGF0ZTJbMV07XG5cbiAgaWYgKCFmb3JtUmVmLmN1cnJlbnQpIHtcbiAgICBpZiAoZm9ybSkge1xuICAgICAgZm9ybVJlZi5jdXJyZW50ID0gZm9ybTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQ3JlYXRlIGEgbmV3IEZvcm1TdG9yZSBpZiBub3QgcHJvdmlkZWRcbiAgICAgIHZhciBmb3JjZVJlUmVuZGVyID0gZnVuY3Rpb24gZm9yY2VSZVJlbmRlcigpIHtcbiAgICAgICAgZm9yY2VVcGRhdGUoe30pO1xuICAgICAgfTtcblxuICAgICAgdmFyIGZvcm1TdG9yZSA9IG5ldyBGb3JtU3RvcmUoZm9yY2VSZVJlbmRlcik7XG4gICAgICBmb3JtUmVmLmN1cnJlbnQgPSBmb3JtU3RvcmUuZ2V0Rm9ybSgpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBbZm9ybVJlZi5jdXJyZW50XTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdXNlRm9ybTsiLCJleHBvcnQgZnVuY3Rpb24gYWxsUHJvbWlzZUZpbmlzaChwcm9taXNlTGlzdCkge1xuICB2YXIgaGFzRXJyb3IgPSBmYWxzZTtcbiAgdmFyIGNvdW50ID0gcHJvbWlzZUxpc3QubGVuZ3RoO1xuICB2YXIgcmVzdWx0cyA9IFtdO1xuXG4gIGlmICghcHJvbWlzZUxpc3QubGVuZ3RoKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShbXSk7XG4gIH1cblxuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgIHByb21pc2VMaXN0LmZvckVhY2goZnVuY3Rpb24gKHByb21pc2UsIGluZGV4KSB7XG4gICAgICBwcm9taXNlLmNhdGNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGhhc0Vycm9yID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGU7XG4gICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgY291bnQgLT0gMTtcbiAgICAgICAgcmVzdWx0c1tpbmRleF0gPSByZXN1bHQ7XG5cbiAgICAgICAgaWYgKGNvdW50ID4gMCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChoYXNFcnJvcikge1xuICAgICAgICAgIHJlamVjdChyZXN1bHRzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlc29sdmUocmVzdWx0cyk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG59IiwiaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHlcIjtcbmltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG52YXIgRm9ybUNvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dCh7XG4gIHRyaWdnZXJGb3JtQ2hhbmdlOiBmdW5jdGlvbiB0cmlnZ2VyRm9ybUNoYW5nZSgpIHt9LFxuICB0cmlnZ2VyRm9ybUZpbmlzaDogZnVuY3Rpb24gdHJpZ2dlckZvcm1GaW5pc2goKSB7fSxcbiAgcmVnaXN0ZXJGb3JtOiBmdW5jdGlvbiByZWdpc3RlckZvcm0oKSB7fSxcbiAgdW5yZWdpc3RlckZvcm06IGZ1bmN0aW9uIHVucmVnaXN0ZXJGb3JtKCkge31cbn0pO1xuXG52YXIgRm9ybVByb3ZpZGVyID0gZnVuY3Rpb24gRm9ybVByb3ZpZGVyKF9yZWYpIHtcbiAgdmFyIHZhbGlkYXRlTWVzc2FnZXMgPSBfcmVmLnZhbGlkYXRlTWVzc2FnZXMsXG4gICAgICBvbkZvcm1DaGFuZ2UgPSBfcmVmLm9uRm9ybUNoYW5nZSxcbiAgICAgIG9uRm9ybUZpbmlzaCA9IF9yZWYub25Gb3JtRmluaXNoLFxuICAgICAgY2hpbGRyZW4gPSBfcmVmLmNoaWxkcmVuO1xuICB2YXIgZm9ybUNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KEZvcm1Db250ZXh0KTtcbiAgdmFyIGZvcm1zUmVmID0gUmVhY3QudXNlUmVmKHt9KTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEZvcm1Db250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgZm9ybUNvbnRleHQpLCB7fSwge1xuICAgICAgdmFsaWRhdGVNZXNzYWdlczogX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBmb3JtQ29udGV4dC52YWxpZGF0ZU1lc3NhZ2VzKSwgdmFsaWRhdGVNZXNzYWdlcyksXG4gICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAgIC8vID0gICAgICAgICAgICAgICAgICBHbG9iYWwgRm9ybSBDb250cm9sICAgICAgICAgICAgICAgICAgPVxuICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgICB0cmlnZ2VyRm9ybUNoYW5nZTogZnVuY3Rpb24gdHJpZ2dlckZvcm1DaGFuZ2UobmFtZSwgY2hhbmdlZEZpZWxkcykge1xuICAgICAgICBpZiAob25Gb3JtQ2hhbmdlKSB7XG4gICAgICAgICAgb25Gb3JtQ2hhbmdlKG5hbWUsIHtcbiAgICAgICAgICAgIGNoYW5nZWRGaWVsZHM6IGNoYW5nZWRGaWVsZHMsXG4gICAgICAgICAgICBmb3JtczogZm9ybXNSZWYuY3VycmVudFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9ybUNvbnRleHQudHJpZ2dlckZvcm1DaGFuZ2UobmFtZSwgY2hhbmdlZEZpZWxkcyk7XG4gICAgICB9LFxuICAgICAgdHJpZ2dlckZvcm1GaW5pc2g6IGZ1bmN0aW9uIHRyaWdnZXJGb3JtRmluaXNoKG5hbWUsIHZhbHVlcykge1xuICAgICAgICBpZiAob25Gb3JtRmluaXNoKSB7XG4gICAgICAgICAgb25Gb3JtRmluaXNoKG5hbWUsIHtcbiAgICAgICAgICAgIHZhbHVlczogdmFsdWVzLFxuICAgICAgICAgICAgZm9ybXM6IGZvcm1zUmVmLmN1cnJlbnRcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvcm1Db250ZXh0LnRyaWdnZXJGb3JtRmluaXNoKG5hbWUsIHZhbHVlcyk7XG4gICAgICB9LFxuICAgICAgcmVnaXN0ZXJGb3JtOiBmdW5jdGlvbiByZWdpc3RlckZvcm0obmFtZSwgZm9ybSkge1xuICAgICAgICBpZiAobmFtZSkge1xuICAgICAgICAgIGZvcm1zUmVmLmN1cnJlbnQgPSBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGZvcm1zUmVmLmN1cnJlbnQpLCB7fSwgX2RlZmluZVByb3BlcnR5KHt9LCBuYW1lLCBmb3JtKSk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3JtQ29udGV4dC5yZWdpc3RlckZvcm0obmFtZSwgZm9ybSk7XG4gICAgICB9LFxuICAgICAgdW5yZWdpc3RlckZvcm06IGZ1bmN0aW9uIHVucmVnaXN0ZXJGb3JtKG5hbWUpIHtcbiAgICAgICAgdmFyIG5ld0Zvcm1zID0gX29iamVjdFNwcmVhZCh7fSwgZm9ybXNSZWYuY3VycmVudCk7XG5cbiAgICAgICAgZGVsZXRlIG5ld0Zvcm1zW25hbWVdO1xuICAgICAgICBmb3Jtc1JlZi5jdXJyZW50ID0gbmV3Rm9ybXM7XG4gICAgICAgIGZvcm1Db250ZXh0LnVucmVnaXN0ZXJGb3JtKG5hbWUpO1xuICAgICAgfVxuICAgIH0pXG4gIH0sIGNoaWxkcmVuKTtcbn07XG5cbmV4cG9ydCB7IEZvcm1Qcm92aWRlciB9O1xuZXhwb3J0IGRlZmF1bHQgRm9ybUNvbnRleHQ7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMlwiO1xuaW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zbGljZWRUb0FycmF5XCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xudmFyIF9leGNsdWRlZCA9IFtcIm5hbWVcIiwgXCJpbml0aWFsVmFsdWVzXCIsIFwiZmllbGRzXCIsIFwiZm9ybVwiLCBcInByZXNlcnZlXCIsIFwiY2hpbGRyZW5cIiwgXCJjb21wb25lbnRcIiwgXCJ2YWxpZGF0ZU1lc3NhZ2VzXCIsIFwidmFsaWRhdGVUcmlnZ2VyXCIsIFwib25WYWx1ZXNDaGFuZ2VcIiwgXCJvbkZpZWxkc0NoYW5nZVwiLCBcIm9uRmluaXNoXCIsIFwib25GaW5pc2hGYWlsZWRcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdXNlRm9ybSBmcm9tICcuL3VzZUZvcm0nO1xuaW1wb3J0IEZpZWxkQ29udGV4dCwgeyBIT09LX01BUksgfSBmcm9tICcuL0ZpZWxkQ29udGV4dCc7XG5pbXBvcnQgRm9ybUNvbnRleHQgZnJvbSAnLi9Gb3JtQ29udGV4dCc7XG5pbXBvcnQgeyBpc1NpbWlsYXIgfSBmcm9tICcuL3V0aWxzL3ZhbHVlVXRpbCc7XG5cbnZhciBGb3JtID0gZnVuY3Rpb24gRm9ybShfcmVmLCByZWYpIHtcbiAgdmFyIG5hbWUgPSBfcmVmLm5hbWUsXG4gICAgICBpbml0aWFsVmFsdWVzID0gX3JlZi5pbml0aWFsVmFsdWVzLFxuICAgICAgZmllbGRzID0gX3JlZi5maWVsZHMsXG4gICAgICBmb3JtID0gX3JlZi5mb3JtLFxuICAgICAgcHJlc2VydmUgPSBfcmVmLnByZXNlcnZlLFxuICAgICAgY2hpbGRyZW4gPSBfcmVmLmNoaWxkcmVuLFxuICAgICAgX3JlZiRjb21wb25lbnQgPSBfcmVmLmNvbXBvbmVudCxcbiAgICAgIENvbXBvbmVudCA9IF9yZWYkY29tcG9uZW50ID09PSB2b2lkIDAgPyAnZm9ybScgOiBfcmVmJGNvbXBvbmVudCxcbiAgICAgIHZhbGlkYXRlTWVzc2FnZXMgPSBfcmVmLnZhbGlkYXRlTWVzc2FnZXMsXG4gICAgICBfcmVmJHZhbGlkYXRlVHJpZ2dlciA9IF9yZWYudmFsaWRhdGVUcmlnZ2VyLFxuICAgICAgdmFsaWRhdGVUcmlnZ2VyID0gX3JlZiR2YWxpZGF0ZVRyaWdnZXIgPT09IHZvaWQgMCA/ICdvbkNoYW5nZScgOiBfcmVmJHZhbGlkYXRlVHJpZ2dlcixcbiAgICAgIG9uVmFsdWVzQ2hhbmdlID0gX3JlZi5vblZhbHVlc0NoYW5nZSxcbiAgICAgIF9vbkZpZWxkc0NoYW5nZSA9IF9yZWYub25GaWVsZHNDaGFuZ2UsXG4gICAgICBfb25GaW5pc2ggPSBfcmVmLm9uRmluaXNoLFxuICAgICAgb25GaW5pc2hGYWlsZWQgPSBfcmVmLm9uRmluaXNoRmFpbGVkLFxuICAgICAgcmVzdFByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYsIF9leGNsdWRlZCk7XG5cbiAgdmFyIGZvcm1Db250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChGb3JtQ29udGV4dCk7IC8vIFdlIGN1c3RvbWl6ZSBoYW5kbGUgZXZlbnQgc2luY2UgQ29udGV4dCB3aWxsIG1ha2VzIGFsbCB0aGUgY29uc3VtZXIgcmUtcmVuZGVyOlxuICAvLyBodHRwczovL3JlYWN0anMub3JnL2RvY3MvY29udGV4dC5odG1sI2NvbnRleHRwcm92aWRlclxuXG4gIHZhciBfdXNlRm9ybSA9IHVzZUZvcm0oZm9ybSksXG4gICAgICBfdXNlRm9ybTIgPSBfc2xpY2VkVG9BcnJheShfdXNlRm9ybSwgMSksXG4gICAgICBmb3JtSW5zdGFuY2UgPSBfdXNlRm9ybTJbMF07XG5cbiAgdmFyIF9mb3JtSW5zdGFuY2UkZ2V0SW50ZSA9IGZvcm1JbnN0YW5jZS5nZXRJbnRlcm5hbEhvb2tzKEhPT0tfTUFSSyksXG4gICAgICB1c2VTdWJzY3JpYmUgPSBfZm9ybUluc3RhbmNlJGdldEludGUudXNlU3Vic2NyaWJlLFxuICAgICAgc2V0SW5pdGlhbFZhbHVlcyA9IF9mb3JtSW5zdGFuY2UkZ2V0SW50ZS5zZXRJbml0aWFsVmFsdWVzLFxuICAgICAgc2V0Q2FsbGJhY2tzID0gX2Zvcm1JbnN0YW5jZSRnZXRJbnRlLnNldENhbGxiYWNrcyxcbiAgICAgIHNldFZhbGlkYXRlTWVzc2FnZXMgPSBfZm9ybUluc3RhbmNlJGdldEludGUuc2V0VmFsaWRhdGVNZXNzYWdlcyxcbiAgICAgIHNldFByZXNlcnZlID0gX2Zvcm1JbnN0YW5jZSRnZXRJbnRlLnNldFByZXNlcnZlLFxuICAgICAgZGVzdHJveUZvcm0gPSBfZm9ybUluc3RhbmNlJGdldEludGUuZGVzdHJveUZvcm07IC8vIFBhc3MgcmVmIHdpdGggZm9ybSBpbnN0YW5jZVxuXG5cbiAgUmVhY3QudXNlSW1wZXJhdGl2ZUhhbmRsZShyZWYsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZm9ybUluc3RhbmNlO1xuICB9KTsgLy8gUmVnaXN0ZXIgZm9ybSBpbnRvIENvbnRleHRcblxuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGZvcm1Db250ZXh0LnJlZ2lzdGVyRm9ybShuYW1lLCBmb3JtSW5zdGFuY2UpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBmb3JtQ29udGV4dC51bnJlZ2lzdGVyRm9ybShuYW1lKTtcbiAgICB9O1xuICB9LCBbZm9ybUNvbnRleHQsIGZvcm1JbnN0YW5jZSwgbmFtZV0pOyAvLyBQYXNzIHByb3BzIHRvIHN0b3JlXG5cbiAgc2V0VmFsaWRhdGVNZXNzYWdlcyhfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGZvcm1Db250ZXh0LnZhbGlkYXRlTWVzc2FnZXMpLCB2YWxpZGF0ZU1lc3NhZ2VzKSk7XG4gIHNldENhbGxiYWNrcyh7XG4gICAgb25WYWx1ZXNDaGFuZ2U6IG9uVmFsdWVzQ2hhbmdlLFxuICAgIG9uRmllbGRzQ2hhbmdlOiBmdW5jdGlvbiBvbkZpZWxkc0NoYW5nZShjaGFuZ2VkRmllbGRzKSB7XG4gICAgICBmb3JtQ29udGV4dC50cmlnZ2VyRm9ybUNoYW5nZShuYW1lLCBjaGFuZ2VkRmllbGRzKTtcblxuICAgICAgaWYgKF9vbkZpZWxkc0NoYW5nZSkge1xuICAgICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgcmVzdCA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgICAgcmVzdFtfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICAgIH1cblxuICAgICAgICBfb25GaWVsZHNDaGFuZ2UuYXBwbHkodm9pZCAwLCBbY2hhbmdlZEZpZWxkc10uY29uY2F0KHJlc3QpKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIG9uRmluaXNoOiBmdW5jdGlvbiBvbkZpbmlzaCh2YWx1ZXMpIHtcbiAgICAgIGZvcm1Db250ZXh0LnRyaWdnZXJGb3JtRmluaXNoKG5hbWUsIHZhbHVlcyk7XG5cbiAgICAgIGlmIChfb25GaW5pc2gpIHtcbiAgICAgICAgX29uRmluaXNoKHZhbHVlcyk7XG4gICAgICB9XG4gICAgfSxcbiAgICBvbkZpbmlzaEZhaWxlZDogb25GaW5pc2hGYWlsZWRcbiAgfSk7XG4gIHNldFByZXNlcnZlKHByZXNlcnZlKTsgLy8gU2V0IGluaXRpYWwgdmFsdWUsIGluaXQgc3RvcmUgdmFsdWUgd2hlbiBmaXJzdCBtb3VudFxuXG4gIHZhciBtb3VudFJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgc2V0SW5pdGlhbFZhbHVlcyhpbml0aWFsVmFsdWVzLCAhbW91bnRSZWYuY3VycmVudCk7XG5cbiAgaWYgKCFtb3VudFJlZi5jdXJyZW50KSB7XG4gICAgbW91bnRSZWYuY3VycmVudCA9IHRydWU7XG4gIH1cblxuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBkZXN0cm95Rm9ybTtcbiAgfSwgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICBbXSk7IC8vIFByZXBhcmUgY2hpbGRyZW4gYnkgYGNoaWxkcmVuYCB0eXBlXG5cbiAgdmFyIGNoaWxkcmVuTm9kZTtcbiAgdmFyIGNoaWxkcmVuUmVuZGVyUHJvcHMgPSB0eXBlb2YgY2hpbGRyZW4gPT09ICdmdW5jdGlvbic7XG5cbiAgaWYgKGNoaWxkcmVuUmVuZGVyUHJvcHMpIHtcbiAgICB2YXIgdmFsdWVzID0gZm9ybUluc3RhbmNlLmdldEZpZWxkc1ZhbHVlKHRydWUpO1xuICAgIGNoaWxkcmVuTm9kZSA9IGNoaWxkcmVuKHZhbHVlcywgZm9ybUluc3RhbmNlKTtcbiAgfSBlbHNlIHtcbiAgICBjaGlsZHJlbk5vZGUgPSBjaGlsZHJlbjtcbiAgfSAvLyBOb3QgdXNlIHN1YnNjcmliZSB3aGVuIHVzaW5nIHJlbmRlciBwcm9wc1xuXG5cbiAgdXNlU3Vic2NyaWJlKCFjaGlsZHJlblJlbmRlclByb3BzKTsgLy8gTGlzdGVuIGlmIGZpZWxkcyBwcm92aWRlZC4gV2UgdXNlIHJlZiB0byBzYXZlIHByZXYgZGF0YSBoZXJlIHRvIGF2b2lkIGFkZGl0aW9uYWwgcmVuZGVyXG5cbiAgdmFyIHByZXZGaWVsZHNSZWYgPSBSZWFjdC51c2VSZWYoKTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIWlzU2ltaWxhcihwcmV2RmllbGRzUmVmLmN1cnJlbnQgfHwgW10sIGZpZWxkcyB8fCBbXSkpIHtcbiAgICAgIGZvcm1JbnN0YW5jZS5zZXRGaWVsZHMoZmllbGRzIHx8IFtdKTtcbiAgICB9XG5cbiAgICBwcmV2RmllbGRzUmVmLmN1cnJlbnQgPSBmaWVsZHM7XG4gIH0sIFtmaWVsZHMsIGZvcm1JbnN0YW5jZV0pO1xuICB2YXIgZm9ybUNvbnRleHRWYWx1ZSA9IFJlYWN0LnVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGZvcm1JbnN0YW5jZSksIHt9LCB7XG4gICAgICB2YWxpZGF0ZVRyaWdnZXI6IHZhbGlkYXRlVHJpZ2dlclxuICAgIH0pO1xuICB9LCBbZm9ybUluc3RhbmNlLCB2YWxpZGF0ZVRyaWdnZXJdKTtcbiAgdmFyIHdyYXBwZXJOb2RlID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRmllbGRDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGZvcm1Db250ZXh0VmFsdWVcbiAgfSwgY2hpbGRyZW5Ob2RlKTtcblxuICBpZiAoQ29tcG9uZW50ID09PSBmYWxzZSkge1xuICAgIHJldHVybiB3cmFwcGVyTm9kZTtcbiAgfVxuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHt9LCByZXN0UHJvcHMsIHtcbiAgICBvblN1Ym1pdDogZnVuY3Rpb24gb25TdWJtaXQoZXZlbnQpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIGZvcm1JbnN0YW5jZS5zdWJtaXQoKTtcbiAgICB9LFxuICAgIG9uUmVzZXQ6IGZ1bmN0aW9uIG9uUmVzZXQoZXZlbnQpIHtcbiAgICAgIHZhciBfcmVzdFByb3BzJG9uUmVzZXQ7XG5cbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBmb3JtSW5zdGFuY2UucmVzZXRGaWVsZHMoKTtcbiAgICAgIChfcmVzdFByb3BzJG9uUmVzZXQgPSByZXN0UHJvcHMub25SZXNldCkgPT09IG51bGwgfHwgX3Jlc3RQcm9wcyRvblJlc2V0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfcmVzdFByb3BzJG9uUmVzZXQuY2FsbChyZXN0UHJvcHMsIGV2ZW50KTtcbiAgICB9XG4gIH0pLCB3cmFwcGVyTm9kZSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBGb3JtOyIsImltcG9ydCBfc2xpY2VkVG9BcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheVwiO1xuaW1wb3J0IHsgRmllbGRDb250ZXh0IH0gZnJvbSAnLic7XG5pbXBvcnQgd2FybmluZyBmcm9tIFwicmMtdXRpbC9lcy93YXJuaW5nXCI7XG5pbXBvcnQgeyBIT09LX01BUksgfSBmcm9tICcuL0ZpZWxkQ29udGV4dCc7XG5pbXBvcnQgeyB1c2VTdGF0ZSwgdXNlQ29udGV4dCwgdXNlRWZmZWN0LCB1c2VSZWYsIHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBnZXROYW1lUGF0aCwgZ2V0VmFsdWUgfSBmcm9tICcuL3V0aWxzL3ZhbHVlVXRpbCc7XG5leHBvcnQgZnVuY3Rpb24gc3RyaW5naWZ5KHZhbHVlKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdXNlV2F0Y2goKSB7XG4gIHZhciBkZXBlbmRlbmNpZXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IFtdO1xuICB2YXIgZm9ybSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuXG4gIHZhciBfdXNlU3RhdGUgPSB1c2VTdGF0ZSgpLFxuICAgICAgX3VzZVN0YXRlMiA9IF9zbGljZWRUb0FycmF5KF91c2VTdGF0ZSwgMiksXG4gICAgICB2YWx1ZSA9IF91c2VTdGF0ZTJbMF0sXG4gICAgICBzZXRWYWx1ZSA9IF91c2VTdGF0ZTJbMV07XG5cbiAgdmFyIHZhbHVlU3RyID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHN0cmluZ2lmeSh2YWx1ZSk7XG4gIH0sIFt2YWx1ZV0pO1xuICB2YXIgdmFsdWVTdHJSZWYgPSB1c2VSZWYodmFsdWVTdHIpO1xuICB2YWx1ZVN0clJlZi5jdXJyZW50ID0gdmFsdWVTdHI7XG4gIHZhciBmaWVsZENvbnRleHQgPSB1c2VDb250ZXh0KEZpZWxkQ29udGV4dCk7XG4gIHZhciBmb3JtSW5zdGFuY2UgPSBmb3JtIHx8IGZpZWxkQ29udGV4dDtcbiAgdmFyIGlzVmFsaWRGb3JtID0gZm9ybUluc3RhbmNlICYmIGZvcm1JbnN0YW5jZS5faW5pdDsgLy8gV2FybmluZyBpZiBub3QgZXhpc3QgZm9ybSBpbnN0YW5jZVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgd2FybmluZyhpc1ZhbGlkRm9ybSwgJ3VzZVdhdGNoIHJlcXVpcmVzIGEgZm9ybSBpbnN0YW5jZSBzaW5jZSBpdCBjYW4gbm90IGF1dG8gZGV0ZWN0IGZyb20gY29udGV4dC4nKTtcbiAgfVxuXG4gIHZhciBuYW1lUGF0aCA9IGdldE5hbWVQYXRoKGRlcGVuZGVuY2llcyk7XG4gIHZhciBuYW1lUGF0aFJlZiA9IHVzZVJlZihuYW1lUGF0aCk7XG4gIG5hbWVQYXRoUmVmLmN1cnJlbnQgPSBuYW1lUGF0aDtcbiAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTa2lwIGlmIG5vdCBleGlzdCBmb3JtIGluc3RhbmNlXG4gICAgaWYgKCFpc1ZhbGlkRm9ybSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBnZXRGaWVsZHNWYWx1ZSA9IGZvcm1JbnN0YW5jZS5nZXRGaWVsZHNWYWx1ZSxcbiAgICAgICAgZ2V0SW50ZXJuYWxIb29rcyA9IGZvcm1JbnN0YW5jZS5nZXRJbnRlcm5hbEhvb2tzO1xuXG4gICAgdmFyIF9nZXRJbnRlcm5hbEhvb2tzID0gZ2V0SW50ZXJuYWxIb29rcyhIT09LX01BUkspLFxuICAgICAgICByZWdpc3RlcldhdGNoID0gX2dldEludGVybmFsSG9va3MucmVnaXN0ZXJXYXRjaDtcblxuICAgIHZhciBjYW5jZWxSZWdpc3RlciA9IHJlZ2lzdGVyV2F0Y2goZnVuY3Rpb24gKHN0b3JlKSB7XG4gICAgICB2YXIgbmV3VmFsdWUgPSBnZXRWYWx1ZShzdG9yZSwgbmFtZVBhdGhSZWYuY3VycmVudCk7XG4gICAgICB2YXIgbmV4dFZhbHVlU3RyID0gc3RyaW5naWZ5KG5ld1ZhbHVlKTsgLy8gQ29tcGFyZSBzdHJpbmdpZnkgaW4gY2FzZSBpdCdzIG5lc3Qgb2JqZWN0XG5cbiAgICAgIGlmICh2YWx1ZVN0clJlZi5jdXJyZW50ICE9PSBuZXh0VmFsdWVTdHIpIHtcbiAgICAgICAgdmFsdWVTdHJSZWYuY3VycmVudCA9IG5leHRWYWx1ZVN0cjtcbiAgICAgICAgc2V0VmFsdWUobmV3VmFsdWUpO1xuICAgICAgfVxuICAgIH0pOyAvLyBUT0RPOiBXZSBjYW4gaW1wcm92ZSB0aGlzIHBlcmYgaW4gZnV0dXJlXG5cbiAgICB2YXIgaW5pdGlhbFZhbHVlID0gZ2V0VmFsdWUoZ2V0RmllbGRzVmFsdWUoKSwgbmFtZVBhdGhSZWYuY3VycmVudCk7XG4gICAgc2V0VmFsdWUoaW5pdGlhbFZhbHVlKTtcbiAgICByZXR1cm4gY2FuY2VsUmVnaXN0ZXI7XG4gIH0sIC8vIFdlIGRvIG5vdCBuZWVkIHJlLXJlZ2lzdGVyIHNpbmNlIG5hbWVQYXRoIGNvbnRlbnQgaXMgdGhlIHNhbWVcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICBbXSk7XG4gIHJldHVybiB2YWx1ZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdXNlV2F0Y2g7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IEZpZWxkIGZyb20gJy4vRmllbGQnO1xuaW1wb3J0IExpc3QgZnJvbSAnLi9MaXN0JztcbmltcG9ydCB1c2VGb3JtIGZyb20gJy4vdXNlRm9ybSc7XG5pbXBvcnQgRmllbGRGb3JtIGZyb20gJy4vRm9ybSc7XG5pbXBvcnQgeyBGb3JtUHJvdmlkZXIgfSBmcm9tICcuL0Zvcm1Db250ZXh0JztcbmltcG9ydCBGaWVsZENvbnRleHQgZnJvbSAnLi9GaWVsZENvbnRleHQnO1xuaW1wb3J0IExpc3RDb250ZXh0IGZyb20gJy4vTGlzdENvbnRleHQnO1xuaW1wb3J0IHVzZVdhdGNoIGZyb20gJy4vdXNlV2F0Y2gnO1xudmFyIEludGVybmFsRm9ybSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKEZpZWxkRm9ybSk7XG52YXIgUmVmRm9ybSA9IEludGVybmFsRm9ybTtcblJlZkZvcm0uRm9ybVByb3ZpZGVyID0gRm9ybVByb3ZpZGVyO1xuUmVmRm9ybS5GaWVsZCA9IEZpZWxkO1xuUmVmRm9ybS5MaXN0ID0gTGlzdDtcblJlZkZvcm0udXNlRm9ybSA9IHVzZUZvcm07XG5SZWZGb3JtLnVzZVdhdGNoID0gdXNlV2F0Y2g7XG5leHBvcnQgeyBGaWVsZCwgTGlzdCwgdXNlRm9ybSwgRm9ybVByb3ZpZGVyLCBGaWVsZENvbnRleHQsIExpc3RDb250ZXh0LCB1c2VXYXRjaCB9O1xuZXhwb3J0IGRlZmF1bHQgUmVmRm9ybTsiLCJleHBvcnQgZnVuY3Rpb24gc3VwcG9ydEJpZ0ludCgpIHtcbiAgcmV0dXJuIHR5cGVvZiBCaWdJbnQgPT09ICdmdW5jdGlvbic7XG59IiwiaW1wb3J0IHsgc3VwcG9ydEJpZ0ludCB9IGZyb20gJy4vc3VwcG9ydFV0aWwnO1xuLyoqXG4gKiBGb3JtYXQgc3RyaW5nIG51bWJlciB0byByZWFkYWJsZSBudW1iZXJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gdHJpbU51bWJlcihudW1TdHIpIHtcbiAgdmFyIHN0ciA9IG51bVN0ci50cmltKCk7XG4gIHZhciBuZWdhdGl2ZSA9IHN0ci5zdGFydHNXaXRoKCctJyk7XG5cbiAgaWYgKG5lZ2F0aXZlKSB7XG4gICAgc3RyID0gc3RyLnNsaWNlKDEpO1xuICB9XG5cbiAgc3RyID0gc3RyIC8vIFJlbW92ZSBkZWNpbWFsIDAuIGAxLjAwMGAgPT4gYDEuYCwgYDEuMTAwYCA9PiBgMS4xYFxuICAucmVwbGFjZSgvKFxcLlxcZCpbXjBdKTAqJC8sICckMScpIC8vIFJlbW92ZSB1c2VsZXNzIGRlY2ltYWwuIGAxLmAgPT4gYDFgXG4gIC5yZXBsYWNlKC9cXC4wKiQvLCAnJykgLy8gUmVtb3ZlIGludGVnZXIgMC4gYDAwMDFgID0+IGAxYCwgMDAwLjEnID0+IGAuMWBcbiAgLnJlcGxhY2UoL14wKy8sICcnKTtcblxuICBpZiAoc3RyLnN0YXJ0c1dpdGgoJy4nKSkge1xuICAgIHN0ciA9IFwiMFwiLmNvbmNhdChzdHIpO1xuICB9XG5cbiAgdmFyIHRyaW1TdHIgPSBzdHIgfHwgJzAnO1xuICB2YXIgc3BsaXROdW1iZXIgPSB0cmltU3RyLnNwbGl0KCcuJyk7XG4gIHZhciBpbnRlZ2VyU3RyID0gc3BsaXROdW1iZXJbMF0gfHwgJzAnO1xuICB2YXIgZGVjaW1hbFN0ciA9IHNwbGl0TnVtYmVyWzFdIHx8ICcwJztcblxuICBpZiAoaW50ZWdlclN0ciA9PT0gJzAnICYmIGRlY2ltYWxTdHIgPT09ICcwJykge1xuICAgIG5lZ2F0aXZlID0gZmFsc2U7XG4gIH1cblxuICB2YXIgbmVnYXRpdmVTdHIgPSBuZWdhdGl2ZSA/ICctJyA6ICcnO1xuICByZXR1cm4ge1xuICAgIG5lZ2F0aXZlOiBuZWdhdGl2ZSxcbiAgICBuZWdhdGl2ZVN0cjogbmVnYXRpdmVTdHIsXG4gICAgdHJpbVN0cjogdHJpbVN0cixcbiAgICBpbnRlZ2VyU3RyOiBpbnRlZ2VyU3RyLFxuICAgIGRlY2ltYWxTdHI6IGRlY2ltYWxTdHIsXG4gICAgZnVsbFN0cjogXCJcIi5jb25jYXQobmVnYXRpdmVTdHIpLmNvbmNhdCh0cmltU3RyKVxuICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzRShudW1iZXIpIHtcbiAgdmFyIHN0ciA9IFN0cmluZyhudW1iZXIpO1xuICByZXR1cm4gIU51bWJlci5pc05hTihOdW1iZXIoc3RyKSkgJiYgc3RyLmluY2x1ZGVzKCdlJyk7XG59XG4vKipcbiAqIFtMZWdhY3ldIENvbnZlcnQgMWUtOSB0byAwLjAwMDAwMDAwMS5cbiAqIFRoaXMgbWF5IGxvc2Ugc29tZSBwcmVjaXNpb24gaWYgdXNlciByZWFsbHkgd2FudCAxZS05LlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXROdW1iZXJQcmVjaXNpb24obnVtYmVyKSB7XG4gIHZhciBudW1TdHIgPSBTdHJpbmcobnVtYmVyKTtcblxuICBpZiAoaXNFKG51bWJlcikpIHtcbiAgICB2YXIgcHJlY2lzaW9uID0gTnVtYmVyKG51bVN0ci5zbGljZShudW1TdHIuaW5kZXhPZignZS0nKSArIDIpKTtcbiAgICB2YXIgZGVjaW1hbE1hdGNoID0gbnVtU3RyLm1hdGNoKC9cXC4oXFxkKykvKTtcblxuICAgIGlmIChkZWNpbWFsTWF0Y2ggPT09IG51bGwgfHwgZGVjaW1hbE1hdGNoID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkZWNpbWFsTWF0Y2hbMV0pIHtcbiAgICAgIHByZWNpc2lvbiArPSBkZWNpbWFsTWF0Y2hbMV0ubGVuZ3RoO1xuICAgIH1cblxuICAgIHJldHVybiBwcmVjaXNpb247XG4gIH1cblxuICByZXR1cm4gbnVtU3RyLmluY2x1ZGVzKCcuJykgJiYgdmFsaWRhdGVOdW1iZXIobnVtU3RyKSA/IG51bVN0ci5sZW5ndGggLSBudW1TdHIuaW5kZXhPZignLicpIC0gMSA6IDA7XG59XG4vKipcbiAqIENvbnZlcnQgbnVtYmVyIChpbmNsdWRlcyBzY2llbnRpZmljIG5vdGF0aW9uKSB0byAteHh4Lnl5eSBmb3JtYXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbnVtMnN0cihudW1iZXIpIHtcbiAgdmFyIG51bVN0ciA9IFN0cmluZyhudW1iZXIpO1xuXG4gIGlmIChpc0UobnVtYmVyKSkge1xuICAgIGlmIChudW1iZXIgPiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUikge1xuICAgICAgcmV0dXJuIFN0cmluZyhzdXBwb3J0QmlnSW50KCkgPyBCaWdJbnQobnVtYmVyKS50b1N0cmluZygpIDogTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIpO1xuICAgIH1cblxuICAgIGlmIChudW1iZXIgPCBOdW1iZXIuTUlOX1NBRkVfSU5URUdFUikge1xuICAgICAgcmV0dXJuIFN0cmluZyhzdXBwb3J0QmlnSW50KCkgPyBCaWdJbnQobnVtYmVyKS50b1N0cmluZygpIDogTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVIpO1xuICAgIH1cblxuICAgIG51bVN0ciA9IG51bWJlci50b0ZpeGVkKGdldE51bWJlclByZWNpc2lvbihudW1TdHIpKTtcbiAgfVxuXG4gIHJldHVybiB0cmltTnVtYmVyKG51bVN0cikuZnVsbFN0cjtcbn1cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZU51bWJlcihudW0pIHtcbiAgaWYgKHR5cGVvZiBudW0gPT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuICFOdW1iZXIuaXNOYU4obnVtKTtcbiAgfSAvLyBFbXB0eVxuXG5cbiAgaWYgKCFudW0pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gKC8vIE5vcm1hbCB0eXBlOiAxMS4yOFxuICAgIC9eXFxzKi0/XFxkKyhcXC5cXGQrKT9cXHMqJC8udGVzdChudW0pIHx8IC8vIFByZS1udW1iZXI6IDEuXG4gICAgL15cXHMqLT9cXGQrXFwuXFxzKiQvLnRlc3QobnVtKSB8fCAvLyBQb3N0LW51bWJlcjogLjFcbiAgICAvXlxccyotP1xcLlxcZCtcXHMqJC8udGVzdChudW0pXG4gICk7XG59IiwiaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2tcIjtcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzXCI7XG5cbi8qIGVzbGludC1kaXNhYmxlIG1heC1jbGFzc2VzLXBlci1maWxlICovXG5pbXBvcnQgeyBnZXROdW1iZXJQcmVjaXNpb24sIGlzRSwgbnVtMnN0ciwgdHJpbU51bWJlciwgdmFsaWRhdGVOdW1iZXIgfSBmcm9tICcuL251bWJlclV0aWwnO1xuaW1wb3J0IHsgc3VwcG9ydEJpZ0ludCB9IGZyb20gJy4vc3VwcG9ydFV0aWwnO1xuLyoqXG4gKiBXZSBjYW4gcmVtb3ZlIHRoaXMgd2hlbiBJRSBub3Qgc3VwcG9ydCBhbnltb3JlXG4gKi9cblxuZXhwb3J0IHZhciBOdW1iZXJEZWNpbWFsID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gTnVtYmVyRGVjaW1hbCh2YWx1ZSkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBOdW1iZXJEZWNpbWFsKTtcblxuICAgIHRoaXMub3JpZ2luID0gJyc7XG4gICAgdGhpcy5udW1iZXIgPSB2b2lkIDA7XG4gICAgdGhpcy5lbXB0eSA9IHZvaWQgMDtcblxuICAgIGlmICghdmFsdWUgJiYgdmFsdWUgIT09IDAgfHwgIVN0cmluZyh2YWx1ZSkudHJpbSgpKSB7XG4gICAgICB0aGlzLmVtcHR5ID0gdHJ1ZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLm9yaWdpbiA9IFN0cmluZyh2YWx1ZSk7XG4gICAgdGhpcy5udW1iZXIgPSBOdW1iZXIodmFsdWUpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKE51bWJlckRlY2ltYWwsIFt7XG4gICAga2V5OiBcIm5lZ2F0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBuZWdhdGUoKSB7XG4gICAgICByZXR1cm4gbmV3IE51bWJlckRlY2ltYWwoLXRoaXMudG9OdW1iZXIoKSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImFkZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhZGQodmFsdWUpIHtcbiAgICAgIGlmICh0aGlzLmlzSW52YWxpZGF0ZSgpKSB7XG4gICAgICAgIHJldHVybiBuZXcgTnVtYmVyRGVjaW1hbCh2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIHZhciB0YXJnZXQgPSBOdW1iZXIodmFsdWUpO1xuXG4gICAgICBpZiAoTnVtYmVyLmlzTmFOKHRhcmdldCkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHZhciBudW1iZXIgPSB0aGlzLm51bWJlciArIHRhcmdldDsgLy8gW0xlZ2FjeV0gQmFjayB0byBzYWZlIGludGVnZXJcblxuICAgICAgaWYgKG51bWJlciA+IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSKSB7XG4gICAgICAgIHJldHVybiBuZXcgTnVtYmVyRGVjaW1hbChOdW1iZXIuTUFYX1NBRkVfSU5URUdFUik7XG4gICAgICB9XG5cbiAgICAgIGlmIChudW1iZXIgPCBOdW1iZXIuTUlOX1NBRkVfSU5URUdFUikge1xuICAgICAgICByZXR1cm4gbmV3IE51bWJlckRlY2ltYWwoTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVIpO1xuICAgICAgfVxuXG4gICAgICB2YXIgbWF4UHJlY2lzaW9uID0gTWF0aC5tYXgoZ2V0TnVtYmVyUHJlY2lzaW9uKHRoaXMubnVtYmVyKSwgZ2V0TnVtYmVyUHJlY2lzaW9uKHRhcmdldCkpO1xuICAgICAgcmV0dXJuIG5ldyBOdW1iZXJEZWNpbWFsKG51bWJlci50b0ZpeGVkKG1heFByZWNpc2lvbikpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJpc0VtcHR5XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGlzRW1wdHkoKSB7XG4gICAgICByZXR1cm4gdGhpcy5lbXB0eTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiaXNOYU5cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaXNOYU4oKSB7XG4gICAgICByZXR1cm4gTnVtYmVyLmlzTmFOKHRoaXMubnVtYmVyKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiaXNJbnZhbGlkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGlzSW52YWxpZGF0ZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLmlzRW1wdHkoKSB8fCB0aGlzLmlzTmFOKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImVxdWFsc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBlcXVhbHModGFyZ2V0KSB7XG4gICAgICByZXR1cm4gdGhpcy50b051bWJlcigpID09PSAodGFyZ2V0ID09PSBudWxsIHx8IHRhcmdldCA9PT0gdm9pZCAwID8gdm9pZCAwIDogdGFyZ2V0LnRvTnVtYmVyKCkpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJsZXNzRXF1YWxzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxlc3NFcXVhbHModGFyZ2V0KSB7XG4gICAgICByZXR1cm4gdGhpcy5hZGQodGFyZ2V0Lm5lZ2F0ZSgpLnRvU3RyaW5nKCkpLnRvTnVtYmVyKCkgPD0gMDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwidG9OdW1iZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdG9OdW1iZXIoKSB7XG4gICAgICByZXR1cm4gdGhpcy5udW1iZXI7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInRvU3RyaW5nXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgdmFyIHNhZmUgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHRydWU7XG5cbiAgICAgIGlmICghc2FmZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5vcmlnaW47XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmlzSW52YWxpZGF0ZSgpKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG51bTJzdHIodGhpcy5udW1iZXIpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBOdW1iZXJEZWNpbWFsO1xufSgpO1xuZXhwb3J0IHZhciBCaWdJbnREZWNpbWFsID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgLyoqIEJpZ0ludCB3aWxsIGNvbnZlcnQgYDAwMDlgIHRvIGA5YC4gV2UgbmVlZCByZWNvcmQgdGhlIGxlbiBvZiBkZWNpbWFsICovXG4gIGZ1bmN0aW9uIEJpZ0ludERlY2ltYWwodmFsdWUpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQmlnSW50RGVjaW1hbCk7XG5cbiAgICB0aGlzLm9yaWdpbiA9ICcnO1xuICAgIHRoaXMubmVnYXRpdmUgPSB2b2lkIDA7XG4gICAgdGhpcy5pbnRlZ2VyID0gdm9pZCAwO1xuICAgIHRoaXMuZGVjaW1hbCA9IHZvaWQgMDtcbiAgICB0aGlzLmRlY2ltYWxMZW4gPSB2b2lkIDA7XG4gICAgdGhpcy5lbXB0eSA9IHZvaWQgMDtcbiAgICB0aGlzLm5hbiA9IHZvaWQgMDtcblxuICAgIGlmICghdmFsdWUgJiYgdmFsdWUgIT09IDAgfHwgIVN0cmluZyh2YWx1ZSkudHJpbSgpKSB7XG4gICAgICB0aGlzLmVtcHR5ID0gdHJ1ZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLm9yaWdpbiA9IFN0cmluZyh2YWx1ZSk7IC8vIEFjdCBsaWtlIE51bWJlciBjb252ZXJ0XG5cbiAgICBpZiAodmFsdWUgPT09ICctJykge1xuICAgICAgdGhpcy5uYW4gPSB0cnVlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBtZXJnZWRWYWx1ZSA9IHZhbHVlOyAvLyBXZSBuZWVkIGNvbnZlcnQgYmFjayB0byBOdW1iZXIgc2luY2UgaXQgcmVxdWlyZSBgdG9GaXhlZGAgdG8gaGFuZGxlIHRoaXNcblxuICAgIGlmIChpc0UobWVyZ2VkVmFsdWUpKSB7XG4gICAgICBtZXJnZWRWYWx1ZSA9IE51bWJlcihtZXJnZWRWYWx1ZSk7XG4gICAgfVxuXG4gICAgbWVyZ2VkVmFsdWUgPSB0eXBlb2YgbWVyZ2VkVmFsdWUgPT09ICdzdHJpbmcnID8gbWVyZ2VkVmFsdWUgOiBudW0yc3RyKG1lcmdlZFZhbHVlKTtcblxuICAgIGlmICh2YWxpZGF0ZU51bWJlcihtZXJnZWRWYWx1ZSkpIHtcbiAgICAgIHZhciB0cmltUmV0ID0gdHJpbU51bWJlcihtZXJnZWRWYWx1ZSk7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gdHJpbVJldC5uZWdhdGl2ZTtcbiAgICAgIHZhciBudW1iZXJzID0gdHJpbVJldC50cmltU3RyLnNwbGl0KCcuJyk7XG4gICAgICB0aGlzLmludGVnZXIgPSBCaWdJbnQobnVtYmVyc1swXSk7XG4gICAgICB2YXIgZGVjaW1hbFN0ciA9IG51bWJlcnNbMV0gfHwgJzAnO1xuICAgICAgdGhpcy5kZWNpbWFsID0gQmlnSW50KGRlY2ltYWxTdHIpO1xuICAgICAgdGhpcy5kZWNpbWFsTGVuID0gZGVjaW1hbFN0ci5sZW5ndGg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubmFuID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoQmlnSW50RGVjaW1hbCwgW3tcbiAgICBrZXk6IFwiZ2V0TWFya1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRNYXJrKCkge1xuICAgICAgcmV0dXJuIHRoaXMubmVnYXRpdmUgPyAnLScgOiAnJztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0SW50ZWdlclN0clwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRJbnRlZ2VyU3RyKCkge1xuICAgICAgcmV0dXJuIHRoaXMuaW50ZWdlci50b1N0cmluZygpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXREZWNpbWFsU3RyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldERlY2ltYWxTdHIoKSB7XG4gICAgICByZXR1cm4gdGhpcy5kZWNpbWFsLnRvU3RyaW5nKCkucGFkU3RhcnQodGhpcy5kZWNpbWFsTGVuLCAnMCcpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBbGlnbiBCaWdJbnREZWNpbWFsIHdpdGggc2FtZSBkZWNpbWFsIGxlbmd0aC4gZS5nLiAxMi4zICsgNSA9IDEyMzAwMDBcbiAgICAgKiBUaGlzIGlzIHVzZWQgZm9yIGFkZCBmdW5jdGlvbiBvbmx5LlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiYWxpZ25EZWNpbWFsXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFsaWduRGVjaW1hbChkZWNpbWFsTGVuZ3RoKSB7XG4gICAgICB2YXIgc3RyID0gXCJcIi5jb25jYXQodGhpcy5nZXRNYXJrKCkpLmNvbmNhdCh0aGlzLmdldEludGVnZXJTdHIoKSkuY29uY2F0KHRoaXMuZ2V0RGVjaW1hbFN0cigpLnBhZEVuZChkZWNpbWFsTGVuZ3RoLCAnMCcpKTtcbiAgICAgIHJldHVybiBCaWdJbnQoc3RyKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwibmVnYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG5lZ2F0ZSgpIHtcbiAgICAgIHZhciBjbG9uZSA9IG5ldyBCaWdJbnREZWNpbWFsKHRoaXMudG9TdHJpbmcoKSk7XG4gICAgICBjbG9uZS5uZWdhdGl2ZSA9ICFjbG9uZS5uZWdhdGl2ZTtcbiAgICAgIHJldHVybiBjbG9uZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiYWRkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFkZCh2YWx1ZSkge1xuICAgICAgaWYgKHRoaXMuaXNJbnZhbGlkYXRlKCkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBCaWdJbnREZWNpbWFsKHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgdmFyIG9mZnNldCA9IG5ldyBCaWdJbnREZWNpbWFsKHZhbHVlKTtcblxuICAgICAgaWYgKG9mZnNldC5pc0ludmFsaWRhdGUoKSkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgdmFyIG1heERlY2ltYWxMZW5ndGggPSBNYXRoLm1heCh0aGlzLmdldERlY2ltYWxTdHIoKS5sZW5ndGgsIG9mZnNldC5nZXREZWNpbWFsU3RyKCkubGVuZ3RoKTtcbiAgICAgIHZhciBteUFsaWduZWREZWNpbWFsID0gdGhpcy5hbGlnbkRlY2ltYWwobWF4RGVjaW1hbExlbmd0aCk7XG4gICAgICB2YXIgb2Zmc2V0QWxpZ25lZERlY2ltYWwgPSBvZmZzZXQuYWxpZ25EZWNpbWFsKG1heERlY2ltYWxMZW5ndGgpO1xuICAgICAgdmFyIHZhbHVlU3RyID0gKG15QWxpZ25lZERlY2ltYWwgKyBvZmZzZXRBbGlnbmVkRGVjaW1hbCkudG9TdHJpbmcoKTsgLy8gV2UgbmVlZCBmaWxsIHN0cmluZyBsZW5ndGggYmFjayB0byBgbWF4RGVjaW1hbExlbmd0aGAgdG8gYXZvaWQgcGFyc2VyIGZhaWxlZFxuXG4gICAgICB2YXIgX3RyaW1OdW1iZXIgPSB0cmltTnVtYmVyKHZhbHVlU3RyKSxcbiAgICAgICAgICBuZWdhdGl2ZVN0ciA9IF90cmltTnVtYmVyLm5lZ2F0aXZlU3RyLFxuICAgICAgICAgIHRyaW1TdHIgPSBfdHJpbU51bWJlci50cmltU3RyO1xuXG4gICAgICB2YXIgaHlkcmF0ZVZhbHVlU3RyID0gXCJcIi5jb25jYXQobmVnYXRpdmVTdHIpLmNvbmNhdCh0cmltU3RyLnBhZFN0YXJ0KG1heERlY2ltYWxMZW5ndGggKyAxLCAnMCcpKTtcbiAgICAgIHJldHVybiBuZXcgQmlnSW50RGVjaW1hbChcIlwiLmNvbmNhdChoeWRyYXRlVmFsdWVTdHIuc2xpY2UoMCwgLW1heERlY2ltYWxMZW5ndGgpLCBcIi5cIikuY29uY2F0KGh5ZHJhdGVWYWx1ZVN0ci5zbGljZSgtbWF4RGVjaW1hbExlbmd0aCkpKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiaXNFbXB0eVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpc0VtcHR5KCkge1xuICAgICAgcmV0dXJuIHRoaXMuZW1wdHk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImlzTmFOXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGlzTmFOKCkge1xuICAgICAgcmV0dXJuIHRoaXMubmFuO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJpc0ludmFsaWRhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaXNJbnZhbGlkYXRlKCkge1xuICAgICAgcmV0dXJuIHRoaXMuaXNFbXB0eSgpIHx8IHRoaXMuaXNOYU4oKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZXF1YWxzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVxdWFscyh0YXJnZXQpIHtcbiAgICAgIHJldHVybiB0aGlzLnRvU3RyaW5nKCkgPT09ICh0YXJnZXQgPT09IG51bGwgfHwgdGFyZ2V0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiB0YXJnZXQudG9TdHJpbmcoKSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImxlc3NFcXVhbHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gbGVzc0VxdWFscyh0YXJnZXQpIHtcbiAgICAgIHJldHVybiB0aGlzLmFkZCh0YXJnZXQubmVnYXRlKCkudG9TdHJpbmcoKSkudG9OdW1iZXIoKSA8PSAwO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ0b051bWJlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b051bWJlcigpIHtcbiAgICAgIGlmICh0aGlzLmlzTmFOKCkpIHtcbiAgICAgICAgcmV0dXJuIE5hTjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIE51bWJlcih0aGlzLnRvU3RyaW5nKCkpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ0b1N0cmluZ1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgIHZhciBzYWZlID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB0cnVlO1xuXG4gICAgICBpZiAoIXNhZmUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3JpZ2luO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5pc0ludmFsaWRhdGUoKSkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cmltTnVtYmVyKFwiXCIuY29uY2F0KHRoaXMuZ2V0TWFyaygpKS5jb25jYXQodGhpcy5nZXRJbnRlZ2VyU3RyKCksIFwiLlwiKS5jb25jYXQodGhpcy5nZXREZWNpbWFsU3RyKCkpKS5mdWxsU3RyO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBCaWdJbnREZWNpbWFsO1xufSgpO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0TWluaURlY2ltYWwodmFsdWUpIHtcbiAgLy8gV2UgdXNlIEJpZ0ludCBoZXJlLlxuICAvLyBXaWxsIGZhbGxiYWNrIHRvIE51bWJlciBpZiBub3Qgc3VwcG9ydC5cbiAgaWYgKHN1cHBvcnRCaWdJbnQoKSkge1xuICAgIHJldHVybiBuZXcgQmlnSW50RGVjaW1hbCh2YWx1ZSk7XG4gIH1cblxuICByZXR1cm4gbmV3IE51bWJlckRlY2ltYWwodmFsdWUpO1xufVxuLyoqXG4gKiBBbGlnbiB0aGUgbG9naWMgb2YgdG9GaXhlZCB0byBhcm91bmQgbGlrZSAxLjUgPT4gMlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiB0b0ZpeGVkKG51bVN0ciwgc2VwYXJhdG9yU3RyLCBwcmVjaXNpb24pIHtcbiAgaWYgKG51bVN0ciA9PT0gJycpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICB2YXIgX3RyaW1OdW1iZXIyID0gdHJpbU51bWJlcihudW1TdHIpLFxuICAgICAgbmVnYXRpdmVTdHIgPSBfdHJpbU51bWJlcjIubmVnYXRpdmVTdHIsXG4gICAgICBpbnRlZ2VyU3RyID0gX3RyaW1OdW1iZXIyLmludGVnZXJTdHIsXG4gICAgICBkZWNpbWFsU3RyID0gX3RyaW1OdW1iZXIyLmRlY2ltYWxTdHI7XG5cbiAgdmFyIHByZWNpc2lvbkRlY2ltYWxTdHIgPSBcIlwiLmNvbmNhdChzZXBhcmF0b3JTdHIpLmNvbmNhdChkZWNpbWFsU3RyKTtcbiAgdmFyIG51bWJlcldpdGhvdXREZWNpbWFsID0gXCJcIi5jb25jYXQobmVnYXRpdmVTdHIpLmNvbmNhdChpbnRlZ2VyU3RyKTtcblxuICBpZiAocHJlY2lzaW9uID49IDApIHtcbiAgICAvLyBXZSB3aWxsIGdldCBsYXN0ICsgMSBudW1iZXIgdG8gY2hlY2sgaWYgbmVlZCBhZHZhbmNlZCBudW1iZXJcbiAgICB2YXIgYWR2YW5jZWROdW0gPSBOdW1iZXIoZGVjaW1hbFN0cltwcmVjaXNpb25dKTtcblxuICAgIGlmIChhZHZhbmNlZE51bSA+PSA1KSB7XG4gICAgICB2YXIgYWR2YW5jZWREZWNpbWFsID0gZ2V0TWluaURlY2ltYWwobnVtU3RyKS5hZGQoXCJcIi5jb25jYXQobmVnYXRpdmVTdHIsIFwiMC5cIikuY29uY2F0KCcwJy5yZXBlYXQocHJlY2lzaW9uKSkuY29uY2F0KDEwIC0gYWR2YW5jZWROdW0pKTtcbiAgICAgIHJldHVybiB0b0ZpeGVkKGFkdmFuY2VkRGVjaW1hbC50b1N0cmluZygpLCBzZXBhcmF0b3JTdHIsIHByZWNpc2lvbik7XG4gICAgfVxuXG4gICAgaWYgKHByZWNpc2lvbiA9PT0gMCkge1xuICAgICAgcmV0dXJuIG51bWJlcldpdGhvdXREZWNpbWFsO1xuICAgIH1cblxuICAgIHJldHVybiBcIlwiLmNvbmNhdChudW1iZXJXaXRob3V0RGVjaW1hbCkuY29uY2F0KHNlcGFyYXRvclN0cikuY29uY2F0KGRlY2ltYWxTdHIucGFkRW5kKHByZWNpc2lvbiwgJzAnKS5zbGljZSgwLCBwcmVjaXNpb24pKTtcbiAgfVxuXG4gIGlmIChwcmVjaXNpb25EZWNpbWFsU3RyID09PSAnLjAnKSB7XG4gICAgcmV0dXJuIG51bWJlcldpdGhvdXREZWNpbWFsO1xuICB9XG5cbiAgcmV0dXJuIFwiXCIuY29uY2F0KG51bWJlcldpdGhvdXREZWNpbWFsKS5jb25jYXQocHJlY2lzaW9uRGVjaW1hbFN0cik7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eVwiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgaXNNb2JpbGUgZnJvbSBcInJjLXV0aWwvZXMvaXNNb2JpbGVcIjtcbi8qKlxuICogV2hlbiBjbGljayBhbmQgaG9sZCBvbiBhIGJ1dHRvbiAtIHRoZSBzcGVlZCBvZiBhdXRvIGNoYW5naW5nIHRoZSB2YWx1ZS5cbiAqL1xuXG52YXIgU1RFUF9JTlRFUlZBTCA9IDIwMDtcbi8qKlxuICogV2hlbiBjbGljayBhbmQgaG9sZCBvbiBhIGJ1dHRvbiAtIHRoZSBkZWxheSBiZWZvcmUgYXV0byBjaGFuZ2luZyB0aGUgdmFsdWUuXG4gKi9cblxudmFyIFNURVBfREVMQVkgPSA2MDA7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBTdGVwSGFuZGxlcihfcmVmKSB7XG4gIHZhciBwcmVmaXhDbHMgPSBfcmVmLnByZWZpeENscyxcbiAgICAgIHVwTm9kZSA9IF9yZWYudXBOb2RlLFxuICAgICAgZG93bk5vZGUgPSBfcmVmLmRvd25Ob2RlLFxuICAgICAgdXBEaXNhYmxlZCA9IF9yZWYudXBEaXNhYmxlZCxcbiAgICAgIGRvd25EaXNhYmxlZCA9IF9yZWYuZG93bkRpc2FibGVkLFxuICAgICAgb25TdGVwID0gX3JlZi5vblN0ZXA7XG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PSBTdGVwID09PT09PT09PT09PT09PT09PT09PT09PVxuICB2YXIgc3RlcFRpbWVvdXRSZWYgPSBSZWFjdC51c2VSZWYoKTtcbiAgdmFyIG9uU3RlcFJlZiA9IFJlYWN0LnVzZVJlZigpO1xuICBvblN0ZXBSZWYuY3VycmVudCA9IG9uU3RlcDsgLy8gV2Ugd2lsbCBpbnRlcnZhbCB1cGRhdGUgc3RlcCB3aGVuIGhvbGQgbW91c2UgZG93blxuXG4gIHZhciBvblN0ZXBNb3VzZURvd24gPSBmdW5jdGlvbiBvblN0ZXBNb3VzZURvd24oZSwgdXApIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgb25TdGVwUmVmLmN1cnJlbnQodXApOyAvLyBMb29wIHN0ZXAgZm9yIGludGVydmFsXG5cbiAgICBmdW5jdGlvbiBsb29wU3RlcCgpIHtcbiAgICAgIG9uU3RlcFJlZi5jdXJyZW50KHVwKTtcbiAgICAgIHN0ZXBUaW1lb3V0UmVmLmN1cnJlbnQgPSBzZXRUaW1lb3V0KGxvb3BTdGVwLCBTVEVQX0lOVEVSVkFMKTtcbiAgICB9IC8vIEZpcnN0IHRpbWUgcHJlc3Mgd2lsbCB3YWl0IHNvbWUgdGltZSB0byB0cmlnZ2VyIGxvb3Agc3RlcCB1cGRhdGVcblxuXG4gICAgc3RlcFRpbWVvdXRSZWYuY3VycmVudCA9IHNldFRpbWVvdXQobG9vcFN0ZXAsIFNURVBfREVMQVkpO1xuICB9O1xuXG4gIHZhciBvblN0b3BTdGVwID0gZnVuY3Rpb24gb25TdG9wU3RlcCgpIHtcbiAgICBjbGVhclRpbWVvdXQoc3RlcFRpbWVvdXRSZWYuY3VycmVudCk7XG4gIH07XG5cbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gb25TdG9wU3RlcDtcbiAgfSwgW10pOyAvLyA9PT09PT09PT09PT09PT09PT09PT09PSBSZW5kZXIgPT09PT09PT09PT09PT09PT09PT09PT1cblxuICBpZiAoaXNNb2JpbGUoKSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIGhhbmRsZXJDbGFzc05hbWUgPSBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWhhbmRsZXJcIik7XG4gIHZhciB1cENsYXNzTmFtZSA9IGNsYXNzTmFtZXMoaGFuZGxlckNsYXNzTmFtZSwgXCJcIi5jb25jYXQoaGFuZGxlckNsYXNzTmFtZSwgXCItdXBcIiksIF9kZWZpbmVQcm9wZXJ0eSh7fSwgXCJcIi5jb25jYXQoaGFuZGxlckNsYXNzTmFtZSwgXCItdXAtZGlzYWJsZWRcIiksIHVwRGlzYWJsZWQpKTtcbiAgdmFyIGRvd25DbGFzc05hbWUgPSBjbGFzc05hbWVzKGhhbmRsZXJDbGFzc05hbWUsIFwiXCIuY29uY2F0KGhhbmRsZXJDbGFzc05hbWUsIFwiLWRvd25cIiksIF9kZWZpbmVQcm9wZXJ0eSh7fSwgXCJcIi5jb25jYXQoaGFuZGxlckNsYXNzTmFtZSwgXCItZG93bi1kaXNhYmxlZFwiKSwgZG93bkRpc2FibGVkKSk7XG4gIHZhciBzaGFyZWRIYW5kbGVyUHJvcHMgPSB7XG4gICAgdW5zZWxlY3RhYmxlOiAnb24nLFxuICAgIHJvbGU6ICdidXR0b24nLFxuICAgIG9uTW91c2VVcDogb25TdG9wU3RlcCxcbiAgICBvbk1vdXNlTGVhdmU6IG9uU3RvcFN0ZXBcbiAgfTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KGhhbmRsZXJDbGFzc05hbWUsIFwiLXdyYXBcIilcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIF9leHRlbmRzKHt9LCBzaGFyZWRIYW5kbGVyUHJvcHMsIHtcbiAgICBvbk1vdXNlRG93bjogZnVuY3Rpb24gb25Nb3VzZURvd24oZSkge1xuICAgICAgb25TdGVwTW91c2VEb3duKGUsIHRydWUpO1xuICAgIH0sXG4gICAgXCJhcmlhLWxhYmVsXCI6IFwiSW5jcmVhc2UgVmFsdWVcIixcbiAgICBcImFyaWEtZGlzYWJsZWRcIjogdXBEaXNhYmxlZCxcbiAgICBjbGFzc05hbWU6IHVwQ2xhc3NOYW1lXG4gIH0pLCB1cE5vZGUgfHwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICB1bnNlbGVjdGFibGU6IFwib25cIixcbiAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItaGFuZGxlci11cC1pbm5lclwiKVxuICB9KSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCBfZXh0ZW5kcyh7fSwgc2hhcmVkSGFuZGxlclByb3BzLCB7XG4gICAgb25Nb3VzZURvd246IGZ1bmN0aW9uIG9uTW91c2VEb3duKGUpIHtcbiAgICAgIG9uU3RlcE1vdXNlRG93bihlLCBmYWxzZSk7XG4gICAgfSxcbiAgICBcImFyaWEtbGFiZWxcIjogXCJEZWNyZWFzZSBWYWx1ZVwiLFxuICAgIFwiYXJpYS1kaXNhYmxlZFwiOiBkb3duRGlzYWJsZWQsXG4gICAgY2xhc3NOYW1lOiBkb3duQ2xhc3NOYW1lXG4gIH0pLCBkb3duTm9kZSB8fCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgIHVuc2VsZWN0YWJsZTogXCJvblwiLFxuICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1oYW5kbGVyLWRvd24taW5uZXJcIilcbiAgfSkpKTtcbn0iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY2FuVXNlRG9tIGZyb20gXCJyYy11dGlsL2VzL0RvbS9jYW5Vc2VEb21cIjtcbmV4cG9ydCB2YXIgdXNlTGF5b3V0RWZmZWN0ID0gY2FuVXNlRG9tKCkgPyBSZWFjdC51c2VMYXlvdXRFZmZlY3QgOiBSZWFjdC51c2VFZmZlY3Q7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlTGF5b3V0RWZmZWN0IH0gZnJvbSAnLi91c2VMYXlvdXRFZmZlY3QnO1xuLyoqXG4gKiBXb3JrIGFzIGBjb21wb25lbnREaWRVcGRhdGVgXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlVXBkYXRlRWZmZWN0KGNhbGxiYWNrLCBjb25kaXRpb24pIHtcbiAgdmFyIGluaXRSZWYgPSBSZWFjdC51c2VSZWYoZmFsc2UpO1xuICB1c2VMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmICghaW5pdFJlZi5jdXJyZW50KSB7XG4gICAgICBpbml0UmVmLmN1cnJlbnQgPSB0cnVlO1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgfSwgY29uZGl0aW9uKTtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5XCI7XG5pbXBvcnQgX3R5cGVvZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mXCI7XG5pbXBvcnQgX3NsaWNlZFRvQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NsaWNlZFRvQXJyYXlcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG52YXIgX2V4Y2x1ZGVkID0gW1wicHJlZml4Q2xzXCIsIFwiY2xhc3NOYW1lXCIsIFwic3R5bGVcIiwgXCJtaW5cIiwgXCJtYXhcIiwgXCJzdGVwXCIsIFwiZGVmYXVsdFZhbHVlXCIsIFwidmFsdWVcIiwgXCJkaXNhYmxlZFwiLCBcInJlYWRPbmx5XCIsIFwidXBIYW5kbGVyXCIsIFwiZG93bkhhbmRsZXJcIiwgXCJrZXlib2FyZFwiLCBcImNvbnRyb2xzXCIsIFwic3RyaW5nTW9kZVwiLCBcInBhcnNlclwiLCBcImZvcm1hdHRlclwiLCBcInByZWNpc2lvblwiLCBcImRlY2ltYWxTZXBhcmF0b3JcIiwgXCJvbkNoYW5nZVwiLCBcIm9uSW5wdXRcIiwgXCJvblByZXNzRW50ZXJcIiwgXCJvblN0ZXBcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBLZXlDb2RlIGZyb20gXCJyYy11dGlsL2VzL0tleUNvZGVcIjtcbmltcG9ydCB7IGNvbXBvc2VSZWYgfSBmcm9tIFwicmMtdXRpbC9lcy9yZWZcIjtcbmltcG9ydCBnZXRNaW5pRGVjaW1hbCwgeyB0b0ZpeGVkIH0gZnJvbSAnLi91dGlscy9NaW5pRGVjaW1hbCc7XG5pbXBvcnQgU3RlcEhhbmRsZXIgZnJvbSAnLi9TdGVwSGFuZGxlcic7XG5pbXBvcnQgeyBnZXROdW1iZXJQcmVjaXNpb24sIG51bTJzdHIsIHZhbGlkYXRlTnVtYmVyIH0gZnJvbSAnLi91dGlscy9udW1iZXJVdGlsJztcbmltcG9ydCB1c2VDdXJzb3IgZnJvbSAnLi9ob29rcy91c2VDdXJzb3InO1xuaW1wb3J0IHVzZVVwZGF0ZUVmZmVjdCBmcm9tICcuL2hvb2tzL3VzZVVwZGF0ZUVmZmVjdCc7XG5pbXBvcnQgdXNlRnJhbWUgZnJvbSAnLi9ob29rcy91c2VGcmFtZSc7XG4vKipcbiAqIFdlIHN1cHBvcnQgYHN0cmluZ01vZGVgIHdoaWNoIG5lZWQgaGFuZGxlIGNvcnJlY3QgdHlwZSB3aGVuIHVzZXIgY2FsbCBpbiBvbkNoYW5nZVxuICovXG5cbnZhciBnZXREZWNpbWFsVmFsdWUgPSBmdW5jdGlvbiBnZXREZWNpbWFsVmFsdWUoc3RyaW5nTW9kZSwgZGVjaW1hbFZhbHVlKSB7XG4gIGlmIChzdHJpbmdNb2RlIHx8IGRlY2ltYWxWYWx1ZS5pc0VtcHR5KCkpIHtcbiAgICByZXR1cm4gZGVjaW1hbFZhbHVlLnRvU3RyaW5nKCk7XG4gIH1cblxuICByZXR1cm4gZGVjaW1hbFZhbHVlLnRvTnVtYmVyKCk7XG59O1xuXG52YXIgZ2V0RGVjaW1hbElmVmFsaWRhdGUgPSBmdW5jdGlvbiBnZXREZWNpbWFsSWZWYWxpZGF0ZSh2YWx1ZSkge1xuICB2YXIgZGVjaW1hbCA9IGdldE1pbmlEZWNpbWFsKHZhbHVlKTtcbiAgcmV0dXJuIGRlY2ltYWwuaXNJbnZhbGlkYXRlKCkgPyBudWxsIDogZGVjaW1hbDtcbn07XG5cbnZhciBJbnB1dE51bWJlciA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIChwcm9wcywgcmVmKSB7XG4gIHZhciBfY2xhc3NOYW1lcztcblxuICB2YXIgX3Byb3BzJHByZWZpeENscyA9IHByb3BzLnByZWZpeENscyxcbiAgICAgIHByZWZpeENscyA9IF9wcm9wcyRwcmVmaXhDbHMgPT09IHZvaWQgMCA/ICdyYy1pbnB1dC1udW1iZXInIDogX3Byb3BzJHByZWZpeENscyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIHN0eWxlID0gcHJvcHMuc3R5bGUsXG4gICAgICBtaW4gPSBwcm9wcy5taW4sXG4gICAgICBtYXggPSBwcm9wcy5tYXgsXG4gICAgICBfcHJvcHMkc3RlcCA9IHByb3BzLnN0ZXAsXG4gICAgICBzdGVwID0gX3Byb3BzJHN0ZXAgPT09IHZvaWQgMCA/IDEgOiBfcHJvcHMkc3RlcCxcbiAgICAgIGRlZmF1bHRWYWx1ZSA9IHByb3BzLmRlZmF1bHRWYWx1ZSxcbiAgICAgIHZhbHVlID0gcHJvcHMudmFsdWUsXG4gICAgICBkaXNhYmxlZCA9IHByb3BzLmRpc2FibGVkLFxuICAgICAgcmVhZE9ubHkgPSBwcm9wcy5yZWFkT25seSxcbiAgICAgIHVwSGFuZGxlciA9IHByb3BzLnVwSGFuZGxlcixcbiAgICAgIGRvd25IYW5kbGVyID0gcHJvcHMuZG93bkhhbmRsZXIsXG4gICAgICBrZXlib2FyZCA9IHByb3BzLmtleWJvYXJkLFxuICAgICAgX3Byb3BzJGNvbnRyb2xzID0gcHJvcHMuY29udHJvbHMsXG4gICAgICBjb250cm9scyA9IF9wcm9wcyRjb250cm9scyA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9wcm9wcyRjb250cm9scyxcbiAgICAgIHN0cmluZ01vZGUgPSBwcm9wcy5zdHJpbmdNb2RlLFxuICAgICAgcGFyc2VyID0gcHJvcHMucGFyc2VyLFxuICAgICAgZm9ybWF0dGVyID0gcHJvcHMuZm9ybWF0dGVyLFxuICAgICAgcHJlY2lzaW9uID0gcHJvcHMucHJlY2lzaW9uLFxuICAgICAgZGVjaW1hbFNlcGFyYXRvciA9IHByb3BzLmRlY2ltYWxTZXBhcmF0b3IsXG4gICAgICBvbkNoYW5nZSA9IHByb3BzLm9uQ2hhbmdlLFxuICAgICAgb25JbnB1dCA9IHByb3BzLm9uSW5wdXQsXG4gICAgICBvblByZXNzRW50ZXIgPSBwcm9wcy5vblByZXNzRW50ZXIsXG4gICAgICBvblN0ZXAgPSBwcm9wcy5vblN0ZXAsXG4gICAgICBpbnB1dFByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBfZXhjbHVkZWQpO1xuXG4gIHZhciBpbnB1dENsYXNzTmFtZSA9IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItaW5wdXRcIik7XG4gIHZhciBpbnB1dFJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpLFxuICAgICAgX1JlYWN0JHVzZVN0YXRlMiA9IF9zbGljZWRUb0FycmF5KF9SZWFjdCR1c2VTdGF0ZSwgMiksXG4gICAgICBmb2N1cyA9IF9SZWFjdCR1c2VTdGF0ZTJbMF0sXG4gICAgICBzZXRGb2N1cyA9IF9SZWFjdCR1c2VTdGF0ZTJbMV07XG5cbiAgdmFyIHVzZXJUeXBpbmdSZWYgPSBSZWFjdC51c2VSZWYoZmFsc2UpO1xuICB2YXIgY29tcG9zaXRpb25SZWYgPSBSZWFjdC51c2VSZWYoZmFsc2UpOyAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09IFZhbHVlID09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gIC8vIFJlYWwgdmFsdWUgY29udHJvbFxuXG4gIHZhciBfUmVhY3QkdXNlU3RhdGUzID0gUmVhY3QudXNlU3RhdGUoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBnZXRNaW5pRGVjaW1hbCh2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gdm9pZCAwID8gdmFsdWUgOiBkZWZhdWx0VmFsdWUpO1xuICB9KSxcbiAgICAgIF9SZWFjdCR1c2VTdGF0ZTQgPSBfc2xpY2VkVG9BcnJheShfUmVhY3QkdXNlU3RhdGUzLCAyKSxcbiAgICAgIGRlY2ltYWxWYWx1ZSA9IF9SZWFjdCR1c2VTdGF0ZTRbMF0sXG4gICAgICBzZXREZWNpbWFsVmFsdWUgPSBfUmVhY3QkdXNlU3RhdGU0WzFdO1xuXG4gIGZ1bmN0aW9uIHNldFVuY29udHJvbGxlZERlY2ltYWxWYWx1ZShuZXdEZWNpbWFsKSB7XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHNldERlY2ltYWxWYWx1ZShuZXdEZWNpbWFsKTtcbiAgICB9XG4gIH0gLy8gPT09PT09PT09PT09PT09PT09PT09PSBQYXJzZXIgJiBGb3JtYXR0ZXIgPT09PT09PT09PT09PT09PT09PT09PVxuXG4gIC8qKlxuICAgKiBgcHJlY2lzaW9uYCBpcyB1c2VkIGZvciBmb3JtYXR0ZXIgJiBvbkNoYW5nZS5cbiAgICogSXQgd2lsbCBhdXRvIGdlbmVyYXRlIGJ5IGB2YWx1ZWAgJiBgc3RlcGAuXG4gICAqIEJ1dCBpdCB3aWxsIG5vdCBibG9jayB1c2VyIHR5cGluZy5cbiAgICpcbiAgICogTm90ZTogQXV0byBnZW5lcmF0ZSBgcHJlY2lzaW9uYCBpcyB1c2VkIGZvciBsZWdhY3kgbG9naWMuXG4gICAqIFdlIHNob3VsZCByZW1vdmUgdGhpcyBzaW5jZSB3ZSBhbHJlYWR5IHN1cHBvcnQgaGlnaCBwcmVjaXNpb24gd2l0aCBCaWdJbnQuXG4gICAqXG4gICAqIEBwYXJhbSBudW1iZXIgIFByb3ZpZGUgd2hpY2ggbnVtYmVyIHNob3VsZCBjYWxjdWxhdGUgcHJlY2lzaW9uXG4gICAqIEBwYXJhbSB1c2VyVHlwaW5nICBDaGFuZ2UgYnkgdXNlciB0eXBpbmdcbiAgICovXG5cblxuICB2YXIgZ2V0UHJlY2lzaW9uID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKG51bVN0ciwgdXNlclR5cGluZykge1xuICAgIGlmICh1c2VyVHlwaW5nKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGlmIChwcmVjaXNpb24gPj0gMCkge1xuICAgICAgcmV0dXJuIHByZWNpc2lvbjtcbiAgICB9XG5cbiAgICByZXR1cm4gTWF0aC5tYXgoZ2V0TnVtYmVyUHJlY2lzaW9uKG51bVN0ciksIGdldE51bWJlclByZWNpc2lvbihzdGVwKSk7XG4gIH0sIFtwcmVjaXNpb24sIHN0ZXBdKTsgLy8gPj4+IFBhcnNlclxuXG4gIHZhciBtZXJnZWRQYXJzZXIgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAobnVtKSB7XG4gICAgdmFyIG51bVN0ciA9IFN0cmluZyhudW0pO1xuXG4gICAgaWYgKHBhcnNlcikge1xuICAgICAgcmV0dXJuIHBhcnNlcihudW1TdHIpO1xuICAgIH1cblxuICAgIHZhciBwYXJzZWRTdHIgPSBudW1TdHI7XG5cbiAgICBpZiAoZGVjaW1hbFNlcGFyYXRvcikge1xuICAgICAgcGFyc2VkU3RyID0gcGFyc2VkU3RyLnJlcGxhY2UoZGVjaW1hbFNlcGFyYXRvciwgJy4nKTtcbiAgICB9IC8vIFtMZWdhY3ldIFdlIHN0aWxsIHN1cHBvcnQgYXV0byBjb252ZXJ0IGAkIDEyMyw0NTZgIHRvIGAxMjM0NTZgXG5cblxuICAgIHJldHVybiBwYXJzZWRTdHIucmVwbGFjZSgvW15cXHcuLV0rL2csICcnKTtcbiAgfSwgW3BhcnNlciwgZGVjaW1hbFNlcGFyYXRvcl0pOyAvLyA+Pj4gRm9ybWF0dGVyXG5cbiAgdmFyIGlucHV0VmFsdWVSZWYgPSBSZWFjdC51c2VSZWYoJycpO1xuICB2YXIgbWVyZ2VkRm9ybWF0dGVyID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKG51bWJlciwgdXNlclR5cGluZykge1xuICAgIGlmIChmb3JtYXR0ZXIpIHtcbiAgICAgIHJldHVybiBmb3JtYXR0ZXIobnVtYmVyLCB7XG4gICAgICAgIHVzZXJUeXBpbmc6IHVzZXJUeXBpbmcsXG4gICAgICAgIGlucHV0OiBTdHJpbmcoaW5wdXRWYWx1ZVJlZi5jdXJyZW50KVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdmFyIHN0ciA9IHR5cGVvZiBudW1iZXIgPT09ICdudW1iZXInID8gbnVtMnN0cihudW1iZXIpIDogbnVtYmVyOyAvLyBVc2VyIHR5cGluZyB3aWxsIG5vdCBhdXRvIGZvcm1hdCB3aXRoIHByZWNpc2lvbiBkaXJlY3RseVxuXG4gICAgaWYgKCF1c2VyVHlwaW5nKSB7XG4gICAgICB2YXIgbWVyZ2VkUHJlY2lzaW9uID0gZ2V0UHJlY2lzaW9uKHN0ciwgdXNlclR5cGluZyk7XG5cbiAgICAgIGlmICh2YWxpZGF0ZU51bWJlcihzdHIpICYmIChkZWNpbWFsU2VwYXJhdG9yIHx8IG1lcmdlZFByZWNpc2lvbiA+PSAwKSkge1xuICAgICAgICAvLyBTZXBhcmF0b3JcbiAgICAgICAgdmFyIHNlcGFyYXRvclN0ciA9IGRlY2ltYWxTZXBhcmF0b3IgfHwgJy4nO1xuICAgICAgICBzdHIgPSB0b0ZpeGVkKHN0ciwgc2VwYXJhdG9yU3RyLCBtZXJnZWRQcmVjaXNpb24pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzdHI7XG4gIH0sIFtmb3JtYXR0ZXIsIGdldFByZWNpc2lvbiwgZGVjaW1hbFNlcGFyYXRvcl0pOyAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PSBJbnB1dFZhbHVlID09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgLyoqXG4gICAqIElucHV0IHRleHQgdmFsdWUgY29udHJvbFxuICAgKlxuICAgKiBVc2VyIGNhbiBub3QgdXBkYXRlIGlucHV0IGNvbnRlbnQgZGlyZWN0bHkuIEl0IHVwZGF0ZSB3aXRoIGZvbGxvdyBydWxlcyBieSBwcmlvcml0eTpcbiAgICogIDEuIGNvbnRyb2xsZWQgYHZhbHVlYCBjaGFuZ2VkXG4gICAqICAgICogW1NQRUNJQUxdIFR5cGluZyBsaWtlIGAxLmAgc2hvdWxkIG5vdCBpbW1lZGlhdGVseSBjb252ZXJ0IHRvIGAxYFxuICAgKiAgMi4gVXNlciB0eXBpbmcgd2l0aCBmb3JtYXQgKG5vdCBwcmVjaXNpb24pXG4gICAqICAzLiBCbHVyIG9yIEVudGVyIHRyaWdnZXIgcmV2YWxpZGF0ZVxuICAgKi9cblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlNSA9IFJlYWN0LnVzZVN0YXRlKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaW5pdFZhbHVlID0gZGVmYXVsdFZhbHVlICE9PSBudWxsICYmIGRlZmF1bHRWYWx1ZSAhPT0gdm9pZCAwID8gZGVmYXVsdFZhbHVlIDogdmFsdWU7XG5cbiAgICBpZiAoZGVjaW1hbFZhbHVlLmlzSW52YWxpZGF0ZSgpICYmIFsnc3RyaW5nJywgJ251bWJlciddLmluY2x1ZGVzKF90eXBlb2YoaW5pdFZhbHVlKSkpIHtcbiAgICAgIHJldHVybiBOdW1iZXIuaXNOYU4oaW5pdFZhbHVlKSA/ICcnIDogaW5pdFZhbHVlO1xuICAgIH1cblxuICAgIHJldHVybiBtZXJnZWRGb3JtYXR0ZXIoZGVjaW1hbFZhbHVlLnRvU3RyaW5nKCksIGZhbHNlKTtcbiAgfSksXG4gICAgICBfUmVhY3QkdXNlU3RhdGU2ID0gX3NsaWNlZFRvQXJyYXkoX1JlYWN0JHVzZVN0YXRlNSwgMiksXG4gICAgICBpbnB1dFZhbHVlID0gX1JlYWN0JHVzZVN0YXRlNlswXSxcbiAgICAgIHNldEludGVybmFsSW5wdXRWYWx1ZSA9IF9SZWFjdCR1c2VTdGF0ZTZbMV07XG5cbiAgaW5wdXRWYWx1ZVJlZi5jdXJyZW50ID0gaW5wdXRWYWx1ZTsgLy8gU2hvdWxkIGFsd2F5cyBiZSBzdHJpbmdcblxuICBmdW5jdGlvbiBzZXRJbnB1dFZhbHVlKG5ld1ZhbHVlLCB1c2VyVHlwaW5nKSB7XG4gICAgc2V0SW50ZXJuYWxJbnB1dFZhbHVlKG1lcmdlZEZvcm1hdHRlciggLy8gSW52YWxpZGF0ZSBudW1iZXIgaXMgc29tZXRpbWUgcGFzc2VkIGJ5IGV4dGVybmFsIGNvbnRyb2wsIHdlIHNob3VsZCBsZXQgaXQgZ29cbiAgICAvLyBPdGhlcndpc2UgaXMgY29udHJvbGxlZCBieSBpbnRlcm5hbCBpbnRlcmFjdGl2ZSBsb2dpYyB3aGljaCBjaGVjayBieSB1c2VyVHlwaW5nXG4gICAgLy8gWW91IGNhbiByZWYgJ3Nob3cgbGltaXRlZCB2YWx1ZSB3aGVuIGlucHV0IGlzIG5vdCBmb2N1c2VkJyB0ZXN0IGZvciBtb3JlIGluZm8uXG4gICAgbmV3VmFsdWUuaXNJbnZhbGlkYXRlKCkgPyBuZXdWYWx1ZS50b1N0cmluZyhmYWxzZSkgOiBuZXdWYWx1ZS50b1N0cmluZyghdXNlclR5cGluZyksIHVzZXJUeXBpbmcpKTtcbiAgfSAvLyA+Pj4gTWF4ICYgTWluIGxpbWl0XG5cblxuICB2YXIgbWF4RGVjaW1hbCA9IFJlYWN0LnVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBnZXREZWNpbWFsSWZWYWxpZGF0ZShtYXgpO1xuICB9LCBbbWF4XSk7XG4gIHZhciBtaW5EZWNpbWFsID0gUmVhY3QudXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGdldERlY2ltYWxJZlZhbGlkYXRlKG1pbik7XG4gIH0sIFttaW5dKTtcbiAgdmFyIHVwRGlzYWJsZWQgPSBSZWFjdC51c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIW1heERlY2ltYWwgfHwgIWRlY2ltYWxWYWx1ZSB8fCBkZWNpbWFsVmFsdWUuaXNJbnZhbGlkYXRlKCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWF4RGVjaW1hbC5sZXNzRXF1YWxzKGRlY2ltYWxWYWx1ZSk7XG4gIH0sIFttYXhEZWNpbWFsLCBkZWNpbWFsVmFsdWVdKTtcbiAgdmFyIGRvd25EaXNhYmxlZCA9IFJlYWN0LnVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIGlmICghbWluRGVjaW1hbCB8fCAhZGVjaW1hbFZhbHVlIHx8IGRlY2ltYWxWYWx1ZS5pc0ludmFsaWRhdGUoKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiBkZWNpbWFsVmFsdWUubGVzc0VxdWFscyhtaW5EZWNpbWFsKTtcbiAgfSwgW21pbkRlY2ltYWwsIGRlY2ltYWxWYWx1ZV0pOyAvLyBDdXJzb3IgY29udHJvbGxlclxuXG4gIHZhciBfdXNlQ3Vyc29yID0gdXNlQ3Vyc29yKGlucHV0UmVmLmN1cnJlbnQsIGZvY3VzKSxcbiAgICAgIF91c2VDdXJzb3IyID0gX3NsaWNlZFRvQXJyYXkoX3VzZUN1cnNvciwgMiksXG4gICAgICByZWNvcmRDdXJzb3IgPSBfdXNlQ3Vyc29yMlswXSxcbiAgICAgIHJlc3RvcmVDdXJzb3IgPSBfdXNlQ3Vyc29yMlsxXTsgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gRGF0YSA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIC8qKlxuICAgKiBGaW5kIHRhcmdldCB2YWx1ZSBjbG9zZXQgd2l0aGluIHJhbmdlLlxuICAgKiBlLmcuIFsxMSwgMjhdOlxuICAgKiAgICAzICA9PiAxMVxuICAgKiAgICAyMyA9PiAyM1xuICAgKiAgICA5OSA9PiAyOFxuICAgKi9cblxuXG4gIHZhciBnZXRSYW5nZVZhbHVlID0gZnVuY3Rpb24gZ2V0UmFuZ2VWYWx1ZSh0YXJnZXQpIHtcbiAgICAvLyB0YXJnZXQgPiBtYXhcbiAgICBpZiAobWF4RGVjaW1hbCAmJiAhdGFyZ2V0Lmxlc3NFcXVhbHMobWF4RGVjaW1hbCkpIHtcbiAgICAgIHJldHVybiBtYXhEZWNpbWFsO1xuICAgIH0gLy8gdGFyZ2V0IDwgbWluXG5cblxuICAgIGlmIChtaW5EZWNpbWFsICYmICFtaW5EZWNpbWFsLmxlc3NFcXVhbHModGFyZ2V0KSkge1xuICAgICAgcmV0dXJuIG1pbkRlY2ltYWw7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG4gIC8qKlxuICAgKiBDaGVjayB2YWx1ZSBpcyBpbiBbbWluLCBtYXhdIHJhbmdlXG4gICAqL1xuXG5cbiAgdmFyIGlzSW5SYW5nZSA9IGZ1bmN0aW9uIGlzSW5SYW5nZSh0YXJnZXQpIHtcbiAgICByZXR1cm4gIWdldFJhbmdlVmFsdWUodGFyZ2V0KTtcbiAgfTtcbiAgLyoqXG4gICAqIFRyaWdnZXIgYG9uQ2hhbmdlYCBpZiB2YWx1ZSB2YWxpZGF0ZWQgYW5kIG5vdCBlcXVhbHMgb2Ygb3JpZ2luLlxuICAgKiBSZXR1cm4gdGhlIHZhbHVlIHRoYXQgcmUtYWxpZ24gaW4gcmFuZ2UuXG4gICAqL1xuXG5cbiAgdmFyIHRyaWdnZXJWYWx1ZVVwZGF0ZSA9IGZ1bmN0aW9uIHRyaWdnZXJWYWx1ZVVwZGF0ZShuZXdWYWx1ZSwgdXNlclR5cGluZykge1xuICAgIHZhciB1cGRhdGVWYWx1ZSA9IG5ld1ZhbHVlO1xuICAgIHZhciBpc1JhbmdlVmFsaWRhdGUgPSBpc0luUmFuZ2UodXBkYXRlVmFsdWUpIHx8IHVwZGF0ZVZhbHVlLmlzRW1wdHkoKTsgLy8gU2tpcCBhbGlnbiB2YWx1ZSB3aGVuIHRyaWdnZXIgdmFsdWUgaXMgZW1wdHkuXG4gICAgLy8gV2UganVzdCB0cmlnZ2VyIG9uQ2hhbmdlKG51bGwpXG4gICAgLy8gVGhpcyBzaG91bGQgbm90IGJsb2NrIHVzZXIgdHlwaW5nXG5cbiAgICBpZiAoIXVwZGF0ZVZhbHVlLmlzRW1wdHkoKSAmJiAhdXNlclR5cGluZykge1xuICAgICAgLy8gUmV2ZXJ0IHZhbHVlIGluIHJhbmdlIGlmIG5lZWRlZFxuICAgICAgdXBkYXRlVmFsdWUgPSBnZXRSYW5nZVZhbHVlKHVwZGF0ZVZhbHVlKSB8fCB1cGRhdGVWYWx1ZTtcbiAgICAgIGlzUmFuZ2VWYWxpZGF0ZSA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKCFyZWFkT25seSAmJiAhZGlzYWJsZWQgJiYgaXNSYW5nZVZhbGlkYXRlKSB7XG4gICAgICB2YXIgbnVtU3RyID0gdXBkYXRlVmFsdWUudG9TdHJpbmcoKTtcbiAgICAgIHZhciBtZXJnZWRQcmVjaXNpb24gPSBnZXRQcmVjaXNpb24obnVtU3RyLCB1c2VyVHlwaW5nKTtcblxuICAgICAgaWYgKG1lcmdlZFByZWNpc2lvbiA+PSAwKSB7XG4gICAgICAgIHVwZGF0ZVZhbHVlID0gZ2V0TWluaURlY2ltYWwodG9GaXhlZChudW1TdHIsICcuJywgbWVyZ2VkUHJlY2lzaW9uKSk7XG4gICAgICB9IC8vIFRyaWdnZXIgZXZlbnRcblxuXG4gICAgICBpZiAoIXVwZGF0ZVZhbHVlLmVxdWFscyhkZWNpbWFsVmFsdWUpKSB7XG4gICAgICAgIHNldFVuY29udHJvbGxlZERlY2ltYWxWYWx1ZSh1cGRhdGVWYWx1ZSk7XG4gICAgICAgIG9uQ2hhbmdlID09PSBudWxsIHx8IG9uQ2hhbmdlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvbkNoYW5nZSh1cGRhdGVWYWx1ZS5pc0VtcHR5KCkgPyBudWxsIDogZ2V0RGVjaW1hbFZhbHVlKHN0cmluZ01vZGUsIHVwZGF0ZVZhbHVlKSk7IC8vIFJlZm9ybWF0IGlucHV0IGlmIHZhbHVlIGlzIG5vdCBjb250cm9sbGVkXG5cbiAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBzZXRJbnB1dFZhbHVlKHVwZGF0ZVZhbHVlLCB1c2VyVHlwaW5nKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdXBkYXRlVmFsdWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRlY2ltYWxWYWx1ZTtcbiAgfTsgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT0gVXNlciBJbnB1dCA9PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5cbiAgdmFyIG9uTmV4dFByb21pc2UgPSB1c2VGcmFtZSgpOyAvLyA+Pj4gQ29sbGVjdCBpbnB1dCB2YWx1ZVxuXG4gIHZhciBjb2xsZWN0SW5wdXRWYWx1ZSA9IGZ1bmN0aW9uIGNvbGxlY3RJbnB1dFZhbHVlKGlucHV0U3RyKSB7XG4gICAgcmVjb3JkQ3Vyc29yKCk7IC8vIFVwZGF0ZSBpbnB1dFZhbHVlIGluY2FzZSBpbnB1dCBjYW4gbm90IHBhcnNlIGFzIG51bWJlclxuXG4gICAgc2V0SW50ZXJuYWxJbnB1dFZhbHVlKGlucHV0U3RyKTsgLy8gUGFyc2UgbnVtYmVyXG5cbiAgICBpZiAoIWNvbXBvc2l0aW9uUmVmLmN1cnJlbnQpIHtcbiAgICAgIHZhciBmaW5hbFZhbHVlID0gbWVyZ2VkUGFyc2VyKGlucHV0U3RyKTtcbiAgICAgIHZhciBmaW5hbERlY2ltYWwgPSBnZXRNaW5pRGVjaW1hbChmaW5hbFZhbHVlKTtcblxuICAgICAgaWYgKCFmaW5hbERlY2ltYWwuaXNOYU4oKSkge1xuICAgICAgICB0cmlnZ2VyVmFsdWVVcGRhdGUoZmluYWxEZWNpbWFsLCB0cnVlKTtcbiAgICAgIH1cbiAgICB9IC8vIFRyaWdnZXIgb25JbnB1dCBsYXRlciB0byBsZXQgdXNlciBjdXN0b21pemUgdmFsdWUgaWYgdGhleSB3YW50IGRvIGhhbmRsZSBzb21ldGhpbmcgYWZ0ZXIgb25DaGFuZ2VcblxuXG4gICAgb25JbnB1dCA9PT0gbnVsbCB8fCBvbklucHV0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvbklucHV0KGlucHV0U3RyKTsgLy8gb3B0aW1pemUgZm9yIGNoaW5lc2UgaW5wdXQgZXhwZXJpZW5jZVxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbnQtZGVzaWduL2FudC1kZXNpZ24vaXNzdWVzLzgxOTZcblxuICAgIG9uTmV4dFByb21pc2UoZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIG5leHRJbnB1dFN0ciA9IGlucHV0U3RyO1xuXG4gICAgICBpZiAoIXBhcnNlcikge1xuICAgICAgICBuZXh0SW5wdXRTdHIgPSBpbnB1dFN0ci5yZXBsYWNlKC/jgIIvZywgJy4nKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG5leHRJbnB1dFN0ciAhPT0gaW5wdXRTdHIpIHtcbiAgICAgICAgY29sbGVjdElucHV0VmFsdWUobmV4dElucHV0U3RyKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTsgLy8gPj4+IENvbXBvc2l0aW9uXG5cblxuICB2YXIgb25Db21wb3NpdGlvblN0YXJ0ID0gZnVuY3Rpb24gb25Db21wb3NpdGlvblN0YXJ0KCkge1xuICAgIGNvbXBvc2l0aW9uUmVmLmN1cnJlbnQgPSB0cnVlO1xuICB9O1xuXG4gIHZhciBvbkNvbXBvc2l0aW9uRW5kID0gZnVuY3Rpb24gb25Db21wb3NpdGlvbkVuZCgpIHtcbiAgICBjb21wb3NpdGlvblJlZi5jdXJyZW50ID0gZmFsc2U7XG4gICAgY29sbGVjdElucHV0VmFsdWUoaW5wdXRSZWYuY3VycmVudC52YWx1ZSk7XG4gIH07IC8vID4+PiBJbnB1dFxuXG5cbiAgdmFyIG9uSW50ZXJuYWxJbnB1dCA9IGZ1bmN0aW9uIG9uSW50ZXJuYWxJbnB1dChlKSB7XG4gICAgY29sbGVjdElucHV0VmFsdWUoZS50YXJnZXQudmFsdWUpO1xuICB9OyAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PSBTdGVwID09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cblxuICB2YXIgb25JbnRlcm5hbFN0ZXAgPSBmdW5jdGlvbiBvbkludGVybmFsU3RlcCh1cCkge1xuICAgIHZhciBfaW5wdXRSZWYkY3VycmVudDtcblxuICAgIC8vIElnbm9yZSBzdGVwIHNpbmNlIG91dCBvZiByYW5nZVxuICAgIGlmICh1cCAmJiB1cERpc2FibGVkIHx8ICF1cCAmJiBkb3duRGlzYWJsZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIENsZWFyIHR5cGluZyBzdGF0dXMgc2luY2UgaXQgbWF5IGNhdXNlZCBieSB1cCAmIGRvd24ga2V5LlxuICAgIC8vIFdlIHNob3VsZCBzeW5jIHdpdGggaW5wdXQgdmFsdWUuXG5cblxuICAgIHVzZXJUeXBpbmdSZWYuY3VycmVudCA9IGZhbHNlO1xuICAgIHZhciBzdGVwRGVjaW1hbCA9IGdldE1pbmlEZWNpbWFsKHN0ZXApO1xuXG4gICAgaWYgKCF1cCkge1xuICAgICAgc3RlcERlY2ltYWwgPSBzdGVwRGVjaW1hbC5uZWdhdGUoKTtcbiAgICB9XG5cbiAgICB2YXIgdGFyZ2V0ID0gKGRlY2ltYWxWYWx1ZSB8fCBnZXRNaW5pRGVjaW1hbCgwKSkuYWRkKHN0ZXBEZWNpbWFsLnRvU3RyaW5nKCkpO1xuICAgIHZhciB1cGRhdGVkVmFsdWUgPSB0cmlnZ2VyVmFsdWVVcGRhdGUodGFyZ2V0LCBmYWxzZSk7XG4gICAgb25TdGVwID09PSBudWxsIHx8IG9uU3RlcCA9PT0gdm9pZCAwID8gdm9pZCAwIDogb25TdGVwKGdldERlY2ltYWxWYWx1ZShzdHJpbmdNb2RlLCB1cGRhdGVkVmFsdWUpLCB7XG4gICAgICBvZmZzZXQ6IHN0ZXAsXG4gICAgICB0eXBlOiB1cCA/ICd1cCcgOiAnZG93bidcbiAgICB9KTtcbiAgICAoX2lucHV0UmVmJGN1cnJlbnQgPSBpbnB1dFJlZi5jdXJyZW50KSA9PT0gbnVsbCB8fCBfaW5wdXRSZWYkY3VycmVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2lucHV0UmVmJGN1cnJlbnQuZm9jdXMoKTtcbiAgfTsgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PSBGbHVzaCA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIC8qKlxuICAgKiBGbHVzaCBjdXJyZW50IGlucHV0IGNvbnRlbnQgdG8gdHJpZ2dlciB2YWx1ZSBjaGFuZ2UgJiByZS1mb3JtYXR0ZXIgaW5wdXQgaWYgbmVlZGVkXG4gICAqL1xuXG5cbiAgdmFyIGZsdXNoSW5wdXRWYWx1ZSA9IGZ1bmN0aW9uIGZsdXNoSW5wdXRWYWx1ZSh1c2VyVHlwaW5nKSB7XG4gICAgdmFyIHBhcnNlZFZhbHVlID0gZ2V0TWluaURlY2ltYWwobWVyZ2VkUGFyc2VyKGlucHV0VmFsdWUpKTtcbiAgICB2YXIgZm9ybWF0VmFsdWUgPSBwYXJzZWRWYWx1ZTtcblxuICAgIGlmICghcGFyc2VkVmFsdWUuaXNOYU4oKSkge1xuICAgICAgLy8gT25seSB2YWxpZGF0ZSB2YWx1ZSBvciBlbXB0eSB2YWx1ZSBjYW4gYmUgcmUtZmlsbCB0byBpbnB1dFZhbHVlXG4gICAgICAvLyBSZWFzc2lnbiB0aGUgZm9ybWF0VmFsdWUgd2l0aGluIHJhbmdlZCBvZiB0cmlnZ2VyIGNvbnRyb2xcbiAgICAgIGZvcm1hdFZhbHVlID0gdHJpZ2dlclZhbHVlVXBkYXRlKHBhcnNlZFZhbHVlLCB1c2VyVHlwaW5nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9ybWF0VmFsdWUgPSBkZWNpbWFsVmFsdWU7XG4gICAgfVxuXG4gICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIFJlc2V0IGJhY2sgd2l0aCBjb250cm9sbGVkIHZhbHVlIGZpcnN0XG4gICAgICBzZXRJbnB1dFZhbHVlKGRlY2ltYWxWYWx1ZSwgZmFsc2UpO1xuICAgIH0gZWxzZSBpZiAoIWZvcm1hdFZhbHVlLmlzTmFOKCkpIHtcbiAgICAgIC8vIFJlc2V0IGlucHV0IGJhY2sgc2luY2Ugbm8gdmFsaWRhdGUgdmFsdWVcbiAgICAgIHNldElucHV0VmFsdWUoZm9ybWF0VmFsdWUsIGZhbHNlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIG9uS2V5RG93biA9IGZ1bmN0aW9uIG9uS2V5RG93bihldmVudCkge1xuICAgIHZhciB3aGljaCA9IGV2ZW50LndoaWNoO1xuICAgIHVzZXJUeXBpbmdSZWYuY3VycmVudCA9IHRydWU7XG5cbiAgICBpZiAod2hpY2ggPT09IEtleUNvZGUuRU5URVIpIHtcbiAgICAgIGlmICghY29tcG9zaXRpb25SZWYuY3VycmVudCkge1xuICAgICAgICB1c2VyVHlwaW5nUmVmLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgZmx1c2hJbnB1dFZhbHVlKGZhbHNlKTtcbiAgICAgIG9uUHJlc3NFbnRlciA9PT0gbnVsbCB8fCBvblByZXNzRW50ZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9uUHJlc3NFbnRlcihldmVudCk7XG4gICAgfVxuXG4gICAgaWYgKGtleWJvYXJkID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gRG8gc3RlcFxuXG5cbiAgICBpZiAoIWNvbXBvc2l0aW9uUmVmLmN1cnJlbnQgJiYgW0tleUNvZGUuVVAsIEtleUNvZGUuRE9XTl0uaW5jbHVkZXMod2hpY2gpKSB7XG4gICAgICBvbkludGVybmFsU3RlcChLZXlDb2RlLlVQID09PSB3aGljaCk7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgb25LZXlVcCA9IGZ1bmN0aW9uIG9uS2V5VXAoKSB7XG4gICAgdXNlclR5cGluZ1JlZi5jdXJyZW50ID0gZmFsc2U7XG4gIH07IC8vID4+PiBGb2N1cyAmIEJsdXJcblxuXG4gIHZhciBvbkJsdXIgPSBmdW5jdGlvbiBvbkJsdXIoKSB7XG4gICAgZmx1c2hJbnB1dFZhbHVlKGZhbHNlKTtcbiAgICBzZXRGb2N1cyhmYWxzZSk7XG4gICAgdXNlclR5cGluZ1JlZi5jdXJyZW50ID0gZmFsc2U7XG4gIH07IC8vID09PT09PT09PT09PT09PT09PT09PT09PT09IENvbnRyb2xsZWQgPT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgLy8gSW5wdXQgYnkgcHJlY2lzaW9uXG5cblxuICB1c2VVcGRhdGVFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmICghZGVjaW1hbFZhbHVlLmlzSW52YWxpZGF0ZSgpKSB7XG4gICAgICBzZXRJbnB1dFZhbHVlKGRlY2ltYWxWYWx1ZSwgZmFsc2UpO1xuICAgIH1cbiAgfSwgW3ByZWNpc2lvbl0pOyAvLyBJbnB1dCBieSB2YWx1ZVxuXG4gIHVzZVVwZGF0ZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG5ld1ZhbHVlID0gZ2V0TWluaURlY2ltYWwodmFsdWUpO1xuICAgIHNldERlY2ltYWxWYWx1ZShuZXdWYWx1ZSk7XG4gICAgdmFyIGN1cnJlbnRQYXJzZWRWYWx1ZSA9IGdldE1pbmlEZWNpbWFsKG1lcmdlZFBhcnNlcihpbnB1dFZhbHVlKSk7IC8vIFdoZW4gdXNlciB0eXBpbmcgZnJvbSBgMS4yYCB0byBgMS5gLCB3ZSBzaG91bGQgbm90IGNvbnZlcnQgdG8gYDFgIGltbWVkaWF0ZWx5LlxuICAgIC8vIEJ1dCBsZXQgaXQgZ28gaWYgdXNlciBzZXQgYGZvcm1hdHRlcmBcblxuICAgIGlmICghbmV3VmFsdWUuZXF1YWxzKGN1cnJlbnRQYXJzZWRWYWx1ZSkgfHwgIXVzZXJUeXBpbmdSZWYuY3VycmVudCB8fCBmb3JtYXR0ZXIpIHtcbiAgICAgIC8vIFVwZGF0ZSB2YWx1ZSBhcyBlZmZlY3RcbiAgICAgIHNldElucHV0VmFsdWUobmV3VmFsdWUsIHVzZXJUeXBpbmdSZWYuY3VycmVudCk7XG4gICAgfVxuICB9LCBbdmFsdWVdKTsgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PSBDdXJzb3IgPT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIHVzZVVwZGF0ZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGZvcm1hdHRlcikge1xuICAgICAgcmVzdG9yZUN1cnNvcigpO1xuICAgIH1cbiAgfSwgW2lucHV0VmFsdWVdKTsgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PSBSZW5kZXIgPT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKHByZWZpeENscywgY2xhc3NOYW1lLCAoX2NsYXNzTmFtZXMgPSB7fSwgX2RlZmluZVByb3BlcnR5KF9jbGFzc05hbWVzLCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWZvY3VzZWRcIiksIGZvY3VzKSwgX2RlZmluZVByb3BlcnR5KF9jbGFzc05hbWVzLCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWRpc2FibGVkXCIpLCBkaXNhYmxlZCksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NOYW1lcywgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1yZWFkb25seVwiKSwgcmVhZE9ubHkpLCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItbm90LWEtbnVtYmVyXCIpLCBkZWNpbWFsVmFsdWUuaXNOYU4oKSksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NOYW1lcywgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1vdXQtb2YtcmFuZ2VcIiksICFkZWNpbWFsVmFsdWUuaXNJbnZhbGlkYXRlKCkgJiYgIWlzSW5SYW5nZShkZWNpbWFsVmFsdWUpKSwgX2NsYXNzTmFtZXMpKSxcbiAgICBzdHlsZTogc3R5bGUsXG4gICAgb25Gb2N1czogZnVuY3Rpb24gb25Gb2N1cygpIHtcbiAgICAgIHNldEZvY3VzKHRydWUpO1xuICAgIH0sXG4gICAgb25CbHVyOiBvbkJsdXIsXG4gICAgb25LZXlEb3duOiBvbktleURvd24sXG4gICAgb25LZXlVcDogb25LZXlVcCxcbiAgICBvbkNvbXBvc2l0aW9uU3RhcnQ6IG9uQ29tcG9zaXRpb25TdGFydCxcbiAgICBvbkNvbXBvc2l0aW9uRW5kOiBvbkNvbXBvc2l0aW9uRW5kXG4gIH0sIGNvbnRyb2xzICYmIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFN0ZXBIYW5kbGVyLCB7XG4gICAgcHJlZml4Q2xzOiBwcmVmaXhDbHMsXG4gICAgdXBOb2RlOiB1cEhhbmRsZXIsXG4gICAgZG93bk5vZGU6IGRvd25IYW5kbGVyLFxuICAgIHVwRGlzYWJsZWQ6IHVwRGlzYWJsZWQsXG4gICAgZG93bkRpc2FibGVkOiBkb3duRGlzYWJsZWQsXG4gICAgb25TdGVwOiBvbkludGVybmFsU3RlcFxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQoaW5wdXRDbGFzc05hbWUsIFwiLXdyYXBcIilcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiLCBfZXh0ZW5kcyh7XG4gICAgYXV0b0NvbXBsZXRlOiBcIm9mZlwiLFxuICAgIHJvbGU6IFwic3BpbmJ1dHRvblwiLFxuICAgIFwiYXJpYS12YWx1ZW1pblwiOiBtaW4sXG4gICAgXCJhcmlhLXZhbHVlbWF4XCI6IG1heCxcbiAgICBcImFyaWEtdmFsdWVub3dcIjogZGVjaW1hbFZhbHVlLmlzSW52YWxpZGF0ZSgpID8gbnVsbCA6IGRlY2ltYWxWYWx1ZS50b1N0cmluZygpLFxuICAgIHN0ZXA6IHN0ZXBcbiAgfSwgaW5wdXRQcm9wcywge1xuICAgIHJlZjogY29tcG9zZVJlZihpbnB1dFJlZiwgcmVmKSxcbiAgICBjbGFzc05hbWU6IGlucHV0Q2xhc3NOYW1lLFxuICAgIHZhbHVlOiBpbnB1dFZhbHVlLFxuICAgIG9uQ2hhbmdlOiBvbkludGVybmFsSW5wdXQsXG4gICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxuICAgIHJlYWRPbmx5OiByZWFkT25seVxuICB9KSkpKTtcbn0pO1xuSW5wdXROdW1iZXIuZGlzcGxheU5hbWUgPSAnSW5wdXROdW1iZXInO1xuZXhwb3J0IGRlZmF1bHQgSW5wdXROdW1iZXI7IiwiaW1wb3J0IHsgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSBcInJjLXV0aWwvZXMvd2FybmluZ1wiO1xuLyoqXG4gKiBLZWVwIGlucHV0IGN1cnNvciBpbiB0aGUgY29ycmVjdCBwb3NpdGlvbiBpZiBwb3NzaWJsZS5cbiAqIElzIHRoaXMgbmVjZXNzYXJ5IHNpbmNlIHdlIGhhdmUgYGZvcm1hdHRlcmAgd2hpY2ggbWF5IG1hc3MgdGhlIGNvbnRlbnQ/XG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlQ3Vyc29yKGlucHV0LCBmb2N1c2VkKSB7XG4gIHZhciBzZWxlY3Rpb25SZWYgPSB1c2VSZWYobnVsbCk7XG5cbiAgZnVuY3Rpb24gcmVjb3JkQ3Vyc29yKCkge1xuICAgIC8vIFJlY29yZCBwb3NpdGlvblxuICAgIHRyeSB7XG4gICAgICB2YXIgc3RhcnQgPSBpbnB1dC5zZWxlY3Rpb25TdGFydCxcbiAgICAgICAgICBlbmQgPSBpbnB1dC5zZWxlY3Rpb25FbmQsXG4gICAgICAgICAgdmFsdWUgPSBpbnB1dC52YWx1ZTtcbiAgICAgIHZhciBiZWZvcmVUeHQgPSB2YWx1ZS5zdWJzdHJpbmcoMCwgc3RhcnQpO1xuICAgICAgdmFyIGFmdGVyVHh0ID0gdmFsdWUuc3Vic3RyaW5nKGVuZCk7XG4gICAgICBzZWxlY3Rpb25SZWYuY3VycmVudCA9IHtcbiAgICAgICAgc3RhcnQ6IHN0YXJ0LFxuICAgICAgICBlbmQ6IGVuZCxcbiAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICBiZWZvcmVUeHQ6IGJlZm9yZVR4dCxcbiAgICAgICAgYWZ0ZXJUeHQ6IGFmdGVyVHh0XG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKGUpIHsvLyBGaXggZXJyb3IgaW4gQ2hyb21lOlxuICAgICAgLy8gRmFpbGVkIHRvIHJlYWQgdGhlICdzZWxlY3Rpb25TdGFydCcgcHJvcGVydHkgZnJvbSAnSFRNTElucHV0RWxlbWVudCdcbiAgICAgIC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xLzIxMTc3NDg5LzMwNDA2MDVcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJlc3RvcmUgbG9naWM6XG4gICAqICAxLiBiYWNrIHN0cmluZyBzYW1lXG4gICAqICAyLiBzdGFydCBzdHJpbmcgc2FtZVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHJlc3RvcmVDdXJzb3IoKSB7XG4gICAgaWYgKGlucHV0ICYmIHNlbGVjdGlvblJlZi5jdXJyZW50ICYmIGZvY3VzZWQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGlucHV0LnZhbHVlO1xuICAgICAgICB2YXIgX3NlbGVjdGlvblJlZiRjdXJyZW50ID0gc2VsZWN0aW9uUmVmLmN1cnJlbnQsXG4gICAgICAgICAgICBiZWZvcmVUeHQgPSBfc2VsZWN0aW9uUmVmJGN1cnJlbnQuYmVmb3JlVHh0LFxuICAgICAgICAgICAgYWZ0ZXJUeHQgPSBfc2VsZWN0aW9uUmVmJGN1cnJlbnQuYWZ0ZXJUeHQsXG4gICAgICAgICAgICBzdGFydCA9IF9zZWxlY3Rpb25SZWYkY3VycmVudC5zdGFydDtcbiAgICAgICAgdmFyIHN0YXJ0UG9zID0gdmFsdWUubGVuZ3RoO1xuXG4gICAgICAgIGlmICh2YWx1ZS5lbmRzV2l0aChhZnRlclR4dCkpIHtcbiAgICAgICAgICBzdGFydFBvcyA9IHZhbHVlLmxlbmd0aCAtIHNlbGVjdGlvblJlZi5jdXJyZW50LmFmdGVyVHh0Lmxlbmd0aDtcbiAgICAgICAgfSBlbHNlIGlmICh2YWx1ZS5zdGFydHNXaXRoKGJlZm9yZVR4dCkpIHtcbiAgICAgICAgICBzdGFydFBvcyA9IGJlZm9yZVR4dC5sZW5ndGg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIGJlZm9yZUxhc3RDaGFyID0gYmVmb3JlVHh0W3N0YXJ0IC0gMV07XG4gICAgICAgICAgdmFyIG5ld0luZGV4ID0gdmFsdWUuaW5kZXhPZihiZWZvcmVMYXN0Q2hhciwgc3RhcnQgLSAxKTtcblxuICAgICAgICAgIGlmIChuZXdJbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgIHN0YXJ0UG9zID0gbmV3SW5kZXggKyAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlucHV0LnNldFNlbGVjdGlvblJhbmdlKHN0YXJ0UG9zLCBzdGFydFBvcyk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHdhcm5pbmcoZmFsc2UsIFwiU29tZXRoaW5nIHdhcm5pbmcgb2YgY3Vyc29yIHJlc3RvcmUuIFBsZWFzZSBmaXJlIGlzc3VlIGFib3V0IHRoaXM6IFwiLmNvbmNhdChlLm1lc3NhZ2UpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gW3JlY29yZEN1cnNvciwgcmVzdG9yZUN1cnNvcl07XG59IiwiaW1wb3J0IHsgdXNlUmVmLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgcmFmIGZyb20gXCJyYy11dGlsL2VzL3JhZlwiO1xuLyoqXG4gKiBBbHdheXMgdHJpZ2dlciBsYXRlc3Qgb25jZSB3aGVuIGNhbGwgbXVsdGlwbGUgdGltZVxuICovXG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiAoKSB7XG4gIHZhciBpZFJlZiA9IHVzZVJlZigwKTtcblxuICB2YXIgY2xlYW5VcCA9IGZ1bmN0aW9uIGNsZWFuVXAoKSB7XG4gICAgcmFmLmNhbmNlbChpZFJlZi5jdXJyZW50KTtcbiAgfTtcblxuICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBjbGVhblVwO1xuICB9LCBbXSk7XG4gIHJldHVybiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICBjbGVhblVwKCk7XG4gICAgaWRSZWYuY3VycmVudCA9IHJhZihmdW5jdGlvbiAoKSB7XG4gICAgICBjYWxsYmFjaygpO1xuICAgIH0pO1xuICB9O1xufSk7IiwiaW1wb3J0IElucHV0TnVtYmVyIGZyb20gJy4vSW5wdXROdW1iZXInO1xuZXhwb3J0IGRlZmF1bHQgSW5wdXROdW1iZXI7IiwiaW1wb3J0IF90eXBlb2YgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3R5cGVvZlwiO1xuaW1wb3J0IGNhblVzZURPTSBmcm9tIFwicmMtdXRpbC9lcy9Eb20vY2FuVXNlRG9tXCI7IC8vID09PT09PT09PT09PT09PT09IFRyYW5zaXRpb24gPT09PT09PT09PT09PT09PT1cbi8vIEV2ZW50IHdyYXBwZXIuIENvcHkgZnJvbSByZWFjdCBzb3VyY2UgY29kZVxuXG5mdW5jdGlvbiBtYWtlUHJlZml4TWFwKHN0eWxlUHJvcCwgZXZlbnROYW1lKSB7XG4gIHZhciBwcmVmaXhlcyA9IHt9O1xuICBwcmVmaXhlc1tzdHlsZVByb3AudG9Mb3dlckNhc2UoKV0gPSBldmVudE5hbWUudG9Mb3dlckNhc2UoKTtcbiAgcHJlZml4ZXNbXCJXZWJraXRcIi5jb25jYXQoc3R5bGVQcm9wKV0gPSBcIndlYmtpdFwiLmNvbmNhdChldmVudE5hbWUpO1xuICBwcmVmaXhlc1tcIk1velwiLmNvbmNhdChzdHlsZVByb3ApXSA9IFwibW96XCIuY29uY2F0KGV2ZW50TmFtZSk7XG4gIHByZWZpeGVzW1wibXNcIi5jb25jYXQoc3R5bGVQcm9wKV0gPSBcIk1TXCIuY29uY2F0KGV2ZW50TmFtZSk7XG4gIHByZWZpeGVzW1wiT1wiLmNvbmNhdChzdHlsZVByb3ApXSA9IFwib1wiLmNvbmNhdChldmVudE5hbWUudG9Mb3dlckNhc2UoKSk7XG4gIHJldHVybiBwcmVmaXhlcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFZlbmRvclByZWZpeGVzKGRvbVN1cHBvcnQsIHdpbikge1xuICB2YXIgcHJlZml4ZXMgPSB7XG4gICAgYW5pbWF0aW9uZW5kOiBtYWtlUHJlZml4TWFwKCdBbmltYXRpb24nLCAnQW5pbWF0aW9uRW5kJyksXG4gICAgdHJhbnNpdGlvbmVuZDogbWFrZVByZWZpeE1hcCgnVHJhbnNpdGlvbicsICdUcmFuc2l0aW9uRW5kJylcbiAgfTtcblxuICBpZiAoZG9tU3VwcG9ydCkge1xuICAgIGlmICghKCdBbmltYXRpb25FdmVudCcgaW4gd2luKSkge1xuICAgICAgZGVsZXRlIHByZWZpeGVzLmFuaW1hdGlvbmVuZC5hbmltYXRpb247XG4gICAgfVxuXG4gICAgaWYgKCEoJ1RyYW5zaXRpb25FdmVudCcgaW4gd2luKSkge1xuICAgICAgZGVsZXRlIHByZWZpeGVzLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbjtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcHJlZml4ZXM7XG59XG52YXIgdmVuZG9yUHJlZml4ZXMgPSBnZXRWZW5kb3JQcmVmaXhlcyhjYW5Vc2VET00oKSwgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB7fSk7XG52YXIgc3R5bGUgPSB7fTtcblxuaWYgKGNhblVzZURPTSgpKSB7XG4gIHZhciBfZG9jdW1lbnQkY3JlYXRlRWxlbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICBzdHlsZSA9IF9kb2N1bWVudCRjcmVhdGVFbGVtZS5zdHlsZTtcbn1cblxudmFyIHByZWZpeGVkRXZlbnROYW1lcyA9IHt9O1xuZXhwb3J0IGZ1bmN0aW9uIGdldFZlbmRvclByZWZpeGVkRXZlbnROYW1lKGV2ZW50TmFtZSkge1xuICBpZiAocHJlZml4ZWRFdmVudE5hbWVzW2V2ZW50TmFtZV0pIHtcbiAgICByZXR1cm4gcHJlZml4ZWRFdmVudE5hbWVzW2V2ZW50TmFtZV07XG4gIH1cblxuICB2YXIgcHJlZml4TWFwID0gdmVuZG9yUHJlZml4ZXNbZXZlbnROYW1lXTtcblxuICBpZiAocHJlZml4TWFwKSB7XG4gICAgdmFyIHN0eWxlUHJvcExpc3QgPSBPYmplY3Qua2V5cyhwcmVmaXhNYXApO1xuICAgIHZhciBsZW4gPSBzdHlsZVByb3BMaXN0Lmxlbmd0aDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIHZhciBzdHlsZVByb3AgPSBzdHlsZVByb3BMaXN0W2ldO1xuXG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHByZWZpeE1hcCwgc3R5bGVQcm9wKSAmJiBzdHlsZVByb3AgaW4gc3R5bGUpIHtcbiAgICAgICAgcHJlZml4ZWRFdmVudE5hbWVzW2V2ZW50TmFtZV0gPSBwcmVmaXhNYXBbc3R5bGVQcm9wXTtcbiAgICAgICAgcmV0dXJuIHByZWZpeGVkRXZlbnROYW1lc1tldmVudE5hbWVdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAnJztcbn1cbnZhciBpbnRlcm5hbEFuaW1hdGlvbkVuZE5hbWUgPSBnZXRWZW5kb3JQcmVmaXhlZEV2ZW50TmFtZSgnYW5pbWF0aW9uZW5kJyk7XG52YXIgaW50ZXJuYWxUcmFuc2l0aW9uRW5kTmFtZSA9IGdldFZlbmRvclByZWZpeGVkRXZlbnROYW1lKCd0cmFuc2l0aW9uZW5kJyk7XG5leHBvcnQgdmFyIHN1cHBvcnRUcmFuc2l0aW9uID0gISEoaW50ZXJuYWxBbmltYXRpb25FbmROYW1lICYmIGludGVybmFsVHJhbnNpdGlvbkVuZE5hbWUpO1xuZXhwb3J0IHZhciBhbmltYXRpb25FbmROYW1lID0gaW50ZXJuYWxBbmltYXRpb25FbmROYW1lIHx8ICdhbmltYXRpb25lbmQnO1xuZXhwb3J0IHZhciB0cmFuc2l0aW9uRW5kTmFtZSA9IGludGVybmFsVHJhbnNpdGlvbkVuZE5hbWUgfHwgJ3RyYW5zaXRpb25lbmQnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldFRyYW5zaXRpb25OYW1lKHRyYW5zaXRpb25OYW1lLCB0cmFuc2l0aW9uVHlwZSkge1xuICBpZiAoIXRyYW5zaXRpb25OYW1lKSByZXR1cm4gbnVsbDtcblxuICBpZiAoX3R5cGVvZih0cmFuc2l0aW9uTmFtZSkgPT09ICdvYmplY3QnKSB7XG4gICAgdmFyIHR5cGUgPSB0cmFuc2l0aW9uVHlwZS5yZXBsYWNlKC8tXFx3L2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgcmV0dXJuIG1hdGNoWzFdLnRvVXBwZXJDYXNlKCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRyYW5zaXRpb25OYW1lW3R5cGVdO1xuICB9XG5cbiAgcmV0dXJuIFwiXCIuY29uY2F0KHRyYW5zaXRpb25OYW1lLCBcIi1cIikuY29uY2F0KHRyYW5zaXRpb25UeXBlKTtcbn0iLCJleHBvcnQgdmFyIFNUQVRVU19OT05FID0gJ25vbmUnO1xuZXhwb3J0IHZhciBTVEFUVVNfQVBQRUFSID0gJ2FwcGVhcic7XG5leHBvcnQgdmFyIFNUQVRVU19FTlRFUiA9ICdlbnRlcic7XG5leHBvcnQgdmFyIFNUQVRVU19MRUFWRSA9ICdsZWF2ZSc7XG5leHBvcnQgdmFyIFNURVBfTk9ORSA9ICdub25lJztcbmV4cG9ydCB2YXIgU1RFUF9QUkVQQVJFID0gJ3ByZXBhcmUnO1xuZXhwb3J0IHZhciBTVEVQX1NUQVJUID0gJ3N0YXJ0JztcbmV4cG9ydCB2YXIgU1RFUF9BQ1RJVkUgPSAnYWN0aXZlJztcbmV4cG9ydCB2YXIgU1RFUF9BQ1RJVkFURUQgPSAnZW5kJzsiLCJpbXBvcnQgeyB1c2VFZmZlY3QsIHVzZUxheW91dEVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjYW5Vc2VEb20gZnJvbSBcInJjLXV0aWwvZXMvRG9tL2NhblVzZURvbVwiOyAvLyBJdCdzIHNhZmUgdG8gdXNlIGB1c2VMYXlvdXRFZmZlY3RgIGJ1dCB0aGUgd2FybmluZyBpcyBhbm5veWluZ1xuXG52YXIgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCA9IGNhblVzZURvbSgpID8gdXNlTGF5b3V0RWZmZWN0IDogdXNlRWZmZWN0O1xuZXhwb3J0IGRlZmF1bHQgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdDsiLCJpbXBvcnQgX3NsaWNlZFRvQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NsaWNlZFRvQXJyYXlcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB1c2VTdGF0ZSBmcm9tIFwicmMtdXRpbC9lcy9ob29rcy91c2VTdGF0ZVwiO1xuaW1wb3J0IHsgU1RFUF9QUkVQQVJFLCBTVEVQX0FDVElWRSwgU1RFUF9TVEFSVCwgU1RFUF9BQ1RJVkFURUQsIFNURVBfTk9ORSB9IGZyb20gJy4uL2ludGVyZmFjZSc7XG5pbXBvcnQgdXNlTmV4dEZyYW1lIGZyb20gJy4vdXNlTmV4dEZyYW1lJztcbmltcG9ydCB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0IGZyb20gJy4vdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCc7XG52YXIgU1RFUF9RVUVVRSA9IFtTVEVQX1BSRVBBUkUsIFNURVBfU1RBUlQsIFNURVBfQUNUSVZFLCBTVEVQX0FDVElWQVRFRF07XG4vKiogU2tpcCBjdXJyZW50IHN0ZXAgKi9cblxuZXhwb3J0IHZhciBTa2lwU3RlcCA9IGZhbHNlO1xuLyoqIEN1cnJlbnQgc3RlcCBzaG91bGQgYmUgdXBkYXRlIGluICovXG5cbmV4cG9ydCB2YXIgRG9TdGVwID0gdHJ1ZTtcbmV4cG9ydCBmdW5jdGlvbiBpc0FjdGl2ZShzdGVwKSB7XG4gIHJldHVybiBzdGVwID09PSBTVEVQX0FDVElWRSB8fCBzdGVwID09PSBTVEVQX0FDVElWQVRFRDtcbn1cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiAoc3RhdHVzLCBjYWxsYmFjaykge1xuICB2YXIgX3VzZVN0YXRlID0gdXNlU3RhdGUoU1RFUF9OT05FKSxcbiAgICAgIF91c2VTdGF0ZTIgPSBfc2xpY2VkVG9BcnJheShfdXNlU3RhdGUsIDIpLFxuICAgICAgc3RlcCA9IF91c2VTdGF0ZTJbMF0sXG4gICAgICBzZXRTdGVwID0gX3VzZVN0YXRlMlsxXTtcblxuICB2YXIgX3VzZU5leHRGcmFtZSA9IHVzZU5leHRGcmFtZSgpLFxuICAgICAgX3VzZU5leHRGcmFtZTIgPSBfc2xpY2VkVG9BcnJheShfdXNlTmV4dEZyYW1lLCAyKSxcbiAgICAgIG5leHRGcmFtZSA9IF91c2VOZXh0RnJhbWUyWzBdLFxuICAgICAgY2FuY2VsTmV4dEZyYW1lID0gX3VzZU5leHRGcmFtZTJbMV07XG5cbiAgZnVuY3Rpb24gc3RhcnRRdWV1ZSgpIHtcbiAgICBzZXRTdGVwKFNURVBfUFJFUEFSRSwgdHJ1ZSk7XG4gIH1cblxuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoc3RlcCAhPT0gU1RFUF9OT05FICYmIHN0ZXAgIT09IFNURVBfQUNUSVZBVEVEKSB7XG4gICAgICB2YXIgaW5kZXggPSBTVEVQX1FVRVVFLmluZGV4T2Yoc3RlcCk7XG4gICAgICB2YXIgbmV4dFN0ZXAgPSBTVEVQX1FVRVVFW2luZGV4ICsgMV07XG4gICAgICB2YXIgcmVzdWx0ID0gY2FsbGJhY2soc3RlcCk7XG5cbiAgICAgIGlmIChyZXN1bHQgPT09IFNraXBTdGVwKSB7XG4gICAgICAgIC8vIFNraXAgd2hlbiBubyBuZWVkZWRcbiAgICAgICAgc2V0U3RlcChuZXh0U3RlcCwgdHJ1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBEbyBhcyBmcmFtZSBmb3Igc3RlcCB1cGRhdGVcbiAgICAgICAgbmV4dEZyYW1lKGZ1bmN0aW9uIChpbmZvKSB7XG4gICAgICAgICAgZnVuY3Rpb24gZG9OZXh0KCkge1xuICAgICAgICAgICAgLy8gU2tpcCBzaW5jZSBjdXJyZW50IHF1ZXVlIGlzIG9vZFxuICAgICAgICAgICAgaWYgKGluZm8uaXNDYW5jZWxlZCgpKSByZXR1cm47XG4gICAgICAgICAgICBzZXRTdGVwKG5leHRTdGVwLCB0cnVlKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAocmVzdWx0ID09PSB0cnVlKSB7XG4gICAgICAgICAgICBkb05leHQoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gT25seSBwcm9taXNlIHNob3VsZCBiZSBhc3luY1xuICAgICAgICAgICAgUHJvbWlzZS5yZXNvbHZlKHJlc3VsdCkudGhlbihkb05leHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9LCBbc3RhdHVzLCBzdGVwXSk7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNhbmNlbE5leHRGcmFtZSgpO1xuICAgIH07XG4gIH0sIFtdKTtcbiAgcmV0dXJuIFtzdGFydFF1ZXVlLCBzdGVwXTtcbn0pOyIsImltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyXCI7XG5pbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eVwiO1xuaW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zbGljZWRUb0FycmF5XCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VSZWYsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB1c2VTdGF0ZSBmcm9tIFwicmMtdXRpbC9lcy9ob29rcy91c2VTdGF0ZVwiO1xuaW1wb3J0IHsgU1RBVFVTX0FQUEVBUiwgU1RBVFVTX05PTkUsIFNUQVRVU19MRUFWRSwgU1RBVFVTX0VOVEVSLCBTVEVQX1BSRVBBUkUsIFNURVBfU1RBUlQsIFNURVBfQUNUSVZFIH0gZnJvbSAnLi4vaW50ZXJmYWNlJztcbmltcG9ydCB1c2VTdGVwUXVldWUsIHsgRG9TdGVwLCBTa2lwU3RlcCwgaXNBY3RpdmUgfSBmcm9tICcuL3VzZVN0ZXBRdWV1ZSc7XG5pbXBvcnQgdXNlRG9tTW90aW9uRXZlbnRzIGZyb20gJy4vdXNlRG9tTW90aW9uRXZlbnRzJztcbmltcG9ydCB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0IGZyb20gJy4vdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VTdGF0dXMoc3VwcG9ydE1vdGlvbiwgdmlzaWJsZSwgZ2V0RWxlbWVudCwgX3JlZikge1xuICB2YXIgX3JlZiRtb3Rpb25FbnRlciA9IF9yZWYubW90aW9uRW50ZXIsXG4gICAgICBtb3Rpb25FbnRlciA9IF9yZWYkbW90aW9uRW50ZXIgPT09IHZvaWQgMCA/IHRydWUgOiBfcmVmJG1vdGlvbkVudGVyLFxuICAgICAgX3JlZiRtb3Rpb25BcHBlYXIgPSBfcmVmLm1vdGlvbkFwcGVhcixcbiAgICAgIG1vdGlvbkFwcGVhciA9IF9yZWYkbW90aW9uQXBwZWFyID09PSB2b2lkIDAgPyB0cnVlIDogX3JlZiRtb3Rpb25BcHBlYXIsXG4gICAgICBfcmVmJG1vdGlvbkxlYXZlID0gX3JlZi5tb3Rpb25MZWF2ZSxcbiAgICAgIG1vdGlvbkxlYXZlID0gX3JlZiRtb3Rpb25MZWF2ZSA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9yZWYkbW90aW9uTGVhdmUsXG4gICAgICBtb3Rpb25EZWFkbGluZSA9IF9yZWYubW90aW9uRGVhZGxpbmUsXG4gICAgICBtb3Rpb25MZWF2ZUltbWVkaWF0ZWx5ID0gX3JlZi5tb3Rpb25MZWF2ZUltbWVkaWF0ZWx5LFxuICAgICAgb25BcHBlYXJQcmVwYXJlID0gX3JlZi5vbkFwcGVhclByZXBhcmUsXG4gICAgICBvbkVudGVyUHJlcGFyZSA9IF9yZWYub25FbnRlclByZXBhcmUsXG4gICAgICBvbkxlYXZlUHJlcGFyZSA9IF9yZWYub25MZWF2ZVByZXBhcmUsXG4gICAgICBvbkFwcGVhclN0YXJ0ID0gX3JlZi5vbkFwcGVhclN0YXJ0LFxuICAgICAgb25FbnRlclN0YXJ0ID0gX3JlZi5vbkVudGVyU3RhcnQsXG4gICAgICBvbkxlYXZlU3RhcnQgPSBfcmVmLm9uTGVhdmVTdGFydCxcbiAgICAgIG9uQXBwZWFyQWN0aXZlID0gX3JlZi5vbkFwcGVhckFjdGl2ZSxcbiAgICAgIG9uRW50ZXJBY3RpdmUgPSBfcmVmLm9uRW50ZXJBY3RpdmUsXG4gICAgICBvbkxlYXZlQWN0aXZlID0gX3JlZi5vbkxlYXZlQWN0aXZlLFxuICAgICAgb25BcHBlYXJFbmQgPSBfcmVmLm9uQXBwZWFyRW5kLFxuICAgICAgb25FbnRlckVuZCA9IF9yZWYub25FbnRlckVuZCxcbiAgICAgIG9uTGVhdmVFbmQgPSBfcmVmLm9uTGVhdmVFbmQsXG4gICAgICBvblZpc2libGVDaGFuZ2VkID0gX3JlZi5vblZpc2libGVDaGFuZ2VkO1xuXG4gIC8vIFVzZWQgZm9yIG91dGVyIHJlbmRlciB1c2FnZSB0byBhdm9pZCBgdmlzaWJsZTogZmFsc2UgJiBzdGF0dXM6IG5vbmVgIHRvIHJlbmRlciBub3RoaW5nXG4gIHZhciBfdXNlU3RhdGUgPSB1c2VTdGF0ZSgpLFxuICAgICAgX3VzZVN0YXRlMiA9IF9zbGljZWRUb0FycmF5KF91c2VTdGF0ZSwgMiksXG4gICAgICBhc3luY1Zpc2libGUgPSBfdXNlU3RhdGUyWzBdLFxuICAgICAgc2V0QXN5bmNWaXNpYmxlID0gX3VzZVN0YXRlMlsxXTtcblxuICB2YXIgX3VzZVN0YXRlMyA9IHVzZVN0YXRlKFNUQVRVU19OT05FKSxcbiAgICAgIF91c2VTdGF0ZTQgPSBfc2xpY2VkVG9BcnJheShfdXNlU3RhdGUzLCAyKSxcbiAgICAgIHN0YXR1cyA9IF91c2VTdGF0ZTRbMF0sXG4gICAgICBzZXRTdGF0dXMgPSBfdXNlU3RhdGU0WzFdO1xuXG4gIHZhciBfdXNlU3RhdGU1ID0gdXNlU3RhdGUobnVsbCksXG4gICAgICBfdXNlU3RhdGU2ID0gX3NsaWNlZFRvQXJyYXkoX3VzZVN0YXRlNSwgMiksXG4gICAgICBzdHlsZSA9IF91c2VTdGF0ZTZbMF0sXG4gICAgICBzZXRTdHlsZSA9IF91c2VTdGF0ZTZbMV07XG5cbiAgdmFyIG1vdW50ZWRSZWYgPSB1c2VSZWYoZmFsc2UpO1xuICB2YXIgZGVhZGxpbmVSZWYgPSB1c2VSZWYobnVsbCk7IC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PSBEb20gTm9kZSA9PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICBmdW5jdGlvbiBnZXREb21FbGVtZW50KCkge1xuICAgIHJldHVybiBnZXRFbGVtZW50KCk7XG4gIH0gLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT0gTW90aW9uIEVuZCA9PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5cbiAgdmFyIGFjdGl2ZVJlZiA9IHVzZVJlZihmYWxzZSk7XG5cbiAgZnVuY3Rpb24gb25JbnRlcm5hbE1vdGlvbkVuZChldmVudCkge1xuICAgIHZhciBlbGVtZW50ID0gZ2V0RG9tRWxlbWVudCgpO1xuXG4gICAgaWYgKGV2ZW50ICYmICFldmVudC5kZWFkbGluZSAmJiBldmVudC50YXJnZXQgIT09IGVsZW1lbnQpIHtcbiAgICAgIC8vIGV2ZW50IGV4aXN0c1xuICAgICAgLy8gbm90IGluaXRpYXRlZCBieSBkZWFkbGluZVxuICAgICAgLy8gdHJhbnNpdGlvbkVuZCBub3QgZmlyZWQgYnkgaW5uZXIgZWxlbWVudHNcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgY3VycmVudEFjdGl2ZSA9IGFjdGl2ZVJlZi5jdXJyZW50O1xuICAgIHZhciBjYW5FbmQ7XG5cbiAgICBpZiAoc3RhdHVzID09PSBTVEFUVVNfQVBQRUFSICYmIGN1cnJlbnRBY3RpdmUpIHtcbiAgICAgIGNhbkVuZCA9IG9uQXBwZWFyRW5kID09PSBudWxsIHx8IG9uQXBwZWFyRW5kID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvbkFwcGVhckVuZChlbGVtZW50LCBldmVudCk7XG4gICAgfSBlbHNlIGlmIChzdGF0dXMgPT09IFNUQVRVU19FTlRFUiAmJiBjdXJyZW50QWN0aXZlKSB7XG4gICAgICBjYW5FbmQgPSBvbkVudGVyRW5kID09PSBudWxsIHx8IG9uRW50ZXJFbmQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9uRW50ZXJFbmQoZWxlbWVudCwgZXZlbnQpO1xuICAgIH0gZWxzZSBpZiAoc3RhdHVzID09PSBTVEFUVVNfTEVBVkUgJiYgY3VycmVudEFjdGl2ZSkge1xuICAgICAgY2FuRW5kID0gb25MZWF2ZUVuZCA9PT0gbnVsbCB8fCBvbkxlYXZlRW5kID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvbkxlYXZlRW5kKGVsZW1lbnQsIGV2ZW50KTtcbiAgICB9IC8vIE9ubHkgdXBkYXRlIHN0YXR1cyB3aGVuIGBjYW5FbmRgIGFuZCBub3QgZGVzdHJveWVkXG5cblxuICAgIGlmIChzdGF0dXMgIT09IFNUQVRVU19OT05FICYmIGN1cnJlbnRBY3RpdmUgJiYgY2FuRW5kICE9PSBmYWxzZSkge1xuICAgICAgc2V0U3RhdHVzKFNUQVRVU19OT05FLCB0cnVlKTtcbiAgICAgIHNldFN0eWxlKG51bGwsIHRydWUpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBfdXNlRG9tTW90aW9uRXZlbnRzID0gdXNlRG9tTW90aW9uRXZlbnRzKG9uSW50ZXJuYWxNb3Rpb25FbmQpLFxuICAgICAgX3VzZURvbU1vdGlvbkV2ZW50czIgPSBfc2xpY2VkVG9BcnJheShfdXNlRG9tTW90aW9uRXZlbnRzLCAxKSxcbiAgICAgIHBhdGNoTW90aW9uRXZlbnRzID0gX3VzZURvbU1vdGlvbkV2ZW50czJbMF07IC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09IFN0ZXAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuXG4gIHZhciBldmVudEhhbmRsZXJzID0gUmVhY3QudXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF9yZWYyLCBfcmVmMywgX3JlZjQ7XG5cbiAgICBzd2l0Y2ggKHN0YXR1cykge1xuICAgICAgY2FzZSBTVEFUVVNfQVBQRUFSOlxuICAgICAgICByZXR1cm4gX3JlZjIgPSB7fSwgX2RlZmluZVByb3BlcnR5KF9yZWYyLCBTVEVQX1BSRVBBUkUsIG9uQXBwZWFyUHJlcGFyZSksIF9kZWZpbmVQcm9wZXJ0eShfcmVmMiwgU1RFUF9TVEFSVCwgb25BcHBlYXJTdGFydCksIF9kZWZpbmVQcm9wZXJ0eShfcmVmMiwgU1RFUF9BQ1RJVkUsIG9uQXBwZWFyQWN0aXZlKSwgX3JlZjI7XG5cbiAgICAgIGNhc2UgU1RBVFVTX0VOVEVSOlxuICAgICAgICByZXR1cm4gX3JlZjMgPSB7fSwgX2RlZmluZVByb3BlcnR5KF9yZWYzLCBTVEVQX1BSRVBBUkUsIG9uRW50ZXJQcmVwYXJlKSwgX2RlZmluZVByb3BlcnR5KF9yZWYzLCBTVEVQX1NUQVJULCBvbkVudGVyU3RhcnQpLCBfZGVmaW5lUHJvcGVydHkoX3JlZjMsIFNURVBfQUNUSVZFLCBvbkVudGVyQWN0aXZlKSwgX3JlZjM7XG5cbiAgICAgIGNhc2UgU1RBVFVTX0xFQVZFOlxuICAgICAgICByZXR1cm4gX3JlZjQgPSB7fSwgX2RlZmluZVByb3BlcnR5KF9yZWY0LCBTVEVQX1BSRVBBUkUsIG9uTGVhdmVQcmVwYXJlKSwgX2RlZmluZVByb3BlcnR5KF9yZWY0LCBTVEVQX1NUQVJULCBvbkxlYXZlU3RhcnQpLCBfZGVmaW5lUHJvcGVydHkoX3JlZjQsIFNURVBfQUNUSVZFLCBvbkxlYXZlQWN0aXZlKSwgX3JlZjQ7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gIH0sIFtzdGF0dXNdKTtcblxuICB2YXIgX3VzZVN0ZXBRdWV1ZSA9IHVzZVN0ZXBRdWV1ZShzdGF0dXMsIGZ1bmN0aW9uIChuZXdTdGVwKSB7XG4gICAgLy8gT25seSBwcmVwYXJlIHN0ZXAgY2FuIGJlIHNraXBcbiAgICBpZiAobmV3U3RlcCA9PT0gU1RFUF9QUkVQQVJFKSB7XG4gICAgICB2YXIgb25QcmVwYXJlID0gZXZlbnRIYW5kbGVyc1tTVEVQX1BSRVBBUkVdO1xuXG4gICAgICBpZiAoIW9uUHJlcGFyZSkge1xuICAgICAgICByZXR1cm4gU2tpcFN0ZXA7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvblByZXBhcmUoZ2V0RG9tRWxlbWVudCgpKTtcbiAgICB9IC8vIFJlc3Qgc3RlcCBpcyBzeW5jIHVwZGF0ZVxuXG5cbiAgICAvLyBSZXN0IHN0ZXAgaXMgc3luYyB1cGRhdGVcbiAgICBpZiAoc3RlcCBpbiBldmVudEhhbmRsZXJzKSB7XG4gICAgICB2YXIgX2V2ZW50SGFuZGxlcnMkc3RlcDtcblxuICAgICAgc2V0U3R5bGUoKChfZXZlbnRIYW5kbGVycyRzdGVwID0gZXZlbnRIYW5kbGVyc1tzdGVwXSkgPT09IG51bGwgfHwgX2V2ZW50SGFuZGxlcnMkc3RlcCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2V2ZW50SGFuZGxlcnMkc3RlcC5jYWxsKGV2ZW50SGFuZGxlcnMsIGdldERvbUVsZW1lbnQoKSwgbnVsbCkpIHx8IG51bGwpO1xuICAgIH1cblxuICAgIGlmIChzdGVwID09PSBTVEVQX0FDVElWRSkge1xuICAgICAgLy8gUGF0Y2ggZXZlbnRzIHdoZW4gbW90aW9uIG5lZWRlZFxuICAgICAgcGF0Y2hNb3Rpb25FdmVudHMoZ2V0RG9tRWxlbWVudCgpKTtcblxuICAgICAgaWYgKG1vdGlvbkRlYWRsaW5lID4gMCkge1xuICAgICAgICBjbGVhclRpbWVvdXQoZGVhZGxpbmVSZWYuY3VycmVudCk7XG4gICAgICAgIGRlYWRsaW5lUmVmLmN1cnJlbnQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBvbkludGVybmFsTW90aW9uRW5kKHtcbiAgICAgICAgICAgIGRlYWRsaW5lOiB0cnVlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sIG1vdGlvbkRlYWRsaW5lKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gRG9TdGVwO1xuICB9KSxcbiAgICAgIF91c2VTdGVwUXVldWUyID0gX3NsaWNlZFRvQXJyYXkoX3VzZVN0ZXBRdWV1ZSwgMiksXG4gICAgICBzdGFydFN0ZXAgPSBfdXNlU3RlcFF1ZXVlMlswXSxcbiAgICAgIHN0ZXAgPSBfdXNlU3RlcFF1ZXVlMlsxXTtcblxuICB2YXIgYWN0aXZlID0gaXNBY3RpdmUoc3RlcCk7XG4gIGFjdGl2ZVJlZi5jdXJyZW50ID0gYWN0aXZlOyAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09IFN0YXR1cyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gIC8vIFVwZGF0ZSB3aXRoIG5ldyBzdGF0dXNcblxuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBzZXRBc3luY1Zpc2libGUodmlzaWJsZSk7XG4gICAgdmFyIGlzTW91bnRlZCA9IG1vdW50ZWRSZWYuY3VycmVudDtcbiAgICBtb3VudGVkUmVmLmN1cnJlbnQgPSB0cnVlO1xuXG4gICAgaWYgKCFzdXBwb3J0TW90aW9uKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG5leHRTdGF0dXM7IC8vIEFwcGVhclxuXG4gICAgaWYgKCFpc01vdW50ZWQgJiYgdmlzaWJsZSAmJiBtb3Rpb25BcHBlYXIpIHtcbiAgICAgIG5leHRTdGF0dXMgPSBTVEFUVVNfQVBQRUFSO1xuICAgIH0gLy8gRW50ZXJcblxuXG4gICAgaWYgKGlzTW91bnRlZCAmJiB2aXNpYmxlICYmIG1vdGlvbkVudGVyKSB7XG4gICAgICBuZXh0U3RhdHVzID0gU1RBVFVTX0VOVEVSO1xuICAgIH0gLy8gTGVhdmVcblxuXG4gICAgaWYgKGlzTW91bnRlZCAmJiAhdmlzaWJsZSAmJiBtb3Rpb25MZWF2ZSB8fCAhaXNNb3VudGVkICYmIG1vdGlvbkxlYXZlSW1tZWRpYXRlbHkgJiYgIXZpc2libGUgJiYgbW90aW9uTGVhdmUpIHtcbiAgICAgIG5leHRTdGF0dXMgPSBTVEFUVVNfTEVBVkU7XG4gICAgfSAvLyBVcGRhdGUgdG8gbmV4dCBzdGF0dXNcblxuXG4gICAgaWYgKG5leHRTdGF0dXMpIHtcbiAgICAgIHNldFN0YXR1cyhuZXh0U3RhdHVzKTtcbiAgICAgIHN0YXJ0U3RlcCgpO1xuICAgIH1cbiAgfSwgW3Zpc2libGVdKTsgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PSBFZmZlY3QgPT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAvLyBSZXNldCB3aGVuIG1vdGlvbiBjaGFuZ2VkXG5cbiAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIC8vIENhbmNlbCBhcHBlYXJcbiAgICBzdGF0dXMgPT09IFNUQVRVU19BUFBFQVIgJiYgIW1vdGlvbkFwcGVhciB8fCAvLyBDYW5jZWwgZW50ZXJcbiAgICBzdGF0dXMgPT09IFNUQVRVU19FTlRFUiAmJiAhbW90aW9uRW50ZXIgfHwgLy8gQ2FuY2VsIGxlYXZlXG4gICAgc3RhdHVzID09PSBTVEFUVVNfTEVBVkUgJiYgIW1vdGlvbkxlYXZlKSB7XG4gICAgICBzZXRTdGF0dXMoU1RBVFVTX05PTkUpO1xuICAgIH1cbiAgfSwgW21vdGlvbkFwcGVhciwgbW90aW9uRW50ZXIsIG1vdGlvbkxlYXZlXSk7XG4gIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIG1vdW50ZWRSZWYuY3VycmVudCA9IGZhbHNlO1xuICAgICAgY2xlYXJUaW1lb3V0KGRlYWRsaW5lUmVmLmN1cnJlbnQpO1xuICAgIH07XG4gIH0sIFtdKTsgLy8gVHJpZ2dlciBgb25WaXNpYmxlQ2hhbmdlZGBcblxuICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmIChhc3luY1Zpc2libGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0dXMgPT09IFNUQVRVU19OT05FKSB7XG4gICAgICBvblZpc2libGVDaGFuZ2VkID09PSBudWxsIHx8IG9uVmlzaWJsZUNoYW5nZWQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9uVmlzaWJsZUNoYW5nZWQoYXN5bmNWaXNpYmxlKTtcbiAgICB9XG4gIH0sIFthc3luY1Zpc2libGUsIHN0YXR1c10pOyAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09IFN0eWxlcyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgdmFyIG1lcmdlZFN0eWxlID0gc3R5bGU7XG5cbiAgaWYgKGV2ZW50SGFuZGxlcnNbU1RFUF9QUkVQQVJFXSAmJiBzdGVwID09PSBTVEVQX1NUQVJUKSB7XG4gICAgbWVyZ2VkU3R5bGUgPSBfb2JqZWN0U3ByZWFkKHtcbiAgICAgIHRyYW5zaXRpb246ICdub25lJ1xuICAgIH0sIG1lcmdlZFN0eWxlKTtcbiAgfVxuXG4gIHJldHVybiBbc3RhdHVzLCBzdGVwLCBtZXJnZWRTdHlsZSwgYXN5bmNWaXNpYmxlICE9PSBudWxsICYmIGFzeW5jVmlzaWJsZSAhPT0gdm9pZCAwID8gYXN5bmNWaXNpYmxlIDogdmlzaWJsZV07XG59IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgYW5pbWF0aW9uRW5kTmFtZSwgdHJhbnNpdGlvbkVuZE5hbWUgfSBmcm9tICcuLi91dGlsL21vdGlvbic7XG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gIHZhciBjYWNoZUVsZW1lbnRSZWYgPSB1c2VSZWYoKTsgLy8gQ2FjaGUgY2FsbGJhY2tcblxuICB2YXIgY2FsbGJhY2tSZWYgPSB1c2VSZWYoY2FsbGJhY2spO1xuICBjYWxsYmFja1JlZi5jdXJyZW50ID0gY2FsbGJhY2s7IC8vIEludGVybmFsIG1vdGlvbiBldmVudCBoYW5kbGVyXG5cbiAgdmFyIG9uSW50ZXJuYWxNb3Rpb25FbmQgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBjYWxsYmFja1JlZi5jdXJyZW50KGV2ZW50KTtcbiAgfSwgW10pOyAvLyBSZW1vdmUgZXZlbnRzXG5cbiAgZnVuY3Rpb24gcmVtb3ZlTW90aW9uRXZlbnRzKGVsZW1lbnQpIHtcbiAgICBpZiAoZWxlbWVudCkge1xuICAgICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKHRyYW5zaXRpb25FbmROYW1lLCBvbkludGVybmFsTW90aW9uRW5kKTtcbiAgICAgIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihhbmltYXRpb25FbmROYW1lLCBvbkludGVybmFsTW90aW9uRW5kKTtcbiAgICB9XG4gIH0gLy8gUGF0Y2ggZXZlbnRzXG5cblxuICBmdW5jdGlvbiBwYXRjaE1vdGlvbkV2ZW50cyhlbGVtZW50KSB7XG4gICAgaWYgKGNhY2hlRWxlbWVudFJlZi5jdXJyZW50ICYmIGNhY2hlRWxlbWVudFJlZi5jdXJyZW50ICE9PSBlbGVtZW50KSB7XG4gICAgICByZW1vdmVNb3Rpb25FdmVudHMoY2FjaGVFbGVtZW50UmVmLmN1cnJlbnQpO1xuICAgIH1cblxuICAgIGlmIChlbGVtZW50ICYmIGVsZW1lbnQgIT09IGNhY2hlRWxlbWVudFJlZi5jdXJyZW50KSB7XG4gICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIodHJhbnNpdGlvbkVuZE5hbWUsIG9uSW50ZXJuYWxNb3Rpb25FbmQpO1xuICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGFuaW1hdGlvbkVuZE5hbWUsIG9uSW50ZXJuYWxNb3Rpb25FbmQpOyAvLyBTYXZlIGFzIGNhY2hlIGluIGNhc2UgZG9tIHJlbW92ZWQgdHJpZ2dlciBieSBgbW90aW9uRGVhZGxpbmVgXG5cbiAgICAgIGNhY2hlRWxlbWVudFJlZi5jdXJyZW50ID0gZWxlbWVudDtcbiAgICB9XG4gIH0gLy8gQ2xlYW4gdXAgd2hlbiByZW1vdmVkXG5cblxuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZW1vdmVNb3Rpb25FdmVudHMoY2FjaGVFbGVtZW50UmVmLmN1cnJlbnQpO1xuICAgIH07XG4gIH0sIFtdKTtcbiAgcmV0dXJuIFtwYXRjaE1vdGlvbkV2ZW50cywgcmVtb3ZlTW90aW9uRXZlbnRzXTtcbn0pOyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCByYWYgZnJvbSBcInJjLXV0aWwvZXMvcmFmXCI7XG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gKCkge1xuICB2YXIgbmV4dEZyYW1lUmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuXG4gIGZ1bmN0aW9uIGNhbmNlbE5leHRGcmFtZSgpIHtcbiAgICByYWYuY2FuY2VsKG5leHRGcmFtZVJlZi5jdXJyZW50KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG5leHRGcmFtZShjYWxsYmFjaykge1xuICAgIHZhciBkZWxheSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMjtcbiAgICBjYW5jZWxOZXh0RnJhbWUoKTtcbiAgICB2YXIgbmV4dEZyYW1lSWQgPSByYWYoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGRlbGF5IDw9IDEpIHtcbiAgICAgICAgY2FsbGJhY2soe1xuICAgICAgICAgIGlzQ2FuY2VsZWQ6IGZ1bmN0aW9uIGlzQ2FuY2VsZWQoKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV4dEZyYW1lSWQgIT09IG5leHRGcmFtZVJlZi5jdXJyZW50O1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXh0RnJhbWUoY2FsbGJhY2ssIGRlbGF5IC0gMSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgbmV4dEZyYW1lUmVmLmN1cnJlbnQgPSBuZXh0RnJhbWVJZDtcbiAgfVxuXG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNhbmNlbE5leHRGcmFtZSgpO1xuICAgIH07XG4gIH0sIFtdKTtcbiAgcmV0dXJuIFtuZXh0RnJhbWUsIGNhbmNlbE5leHRGcmFtZV07XG59KTsiLCJpbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVja1wiO1xuaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3NcIjtcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzXCI7XG5pbXBvcnQgX2NyZWF0ZVN1cGVyIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVTdXBlclwiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG52YXIgRG9tV3JhcHBlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoRG9tV3JhcHBlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihEb21XcmFwcGVyKTtcblxuICBmdW5jdGlvbiBEb21XcmFwcGVyKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEb21XcmFwcGVyKTtcblxuICAgIHJldHVybiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhEb21XcmFwcGVyLCBbe1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW47XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIERvbVdyYXBwZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmV4cG9ydCBkZWZhdWx0IERvbVdyYXBwZXI7IiwiaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHlcIjtcbmltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyXCI7XG5pbXBvcnQgX3NsaWNlZFRvQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NsaWNlZFRvQXJyYXlcIjtcbmltcG9ydCBfdHlwZW9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2ZcIjtcblxuLyogZXNsaW50LWRpc2FibGUgcmVhY3QvZGVmYXVsdC1wcm9wcy1tYXRjaC1wcm9wLXR5cGVzLCByZWFjdC9uby1tdWx0aS1jb21wLCByZWFjdC9wcm9wLXR5cGVzICovXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VSZWYgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgZmluZERPTU5vZGUgZnJvbSBcInJjLXV0aWwvZXMvRG9tL2ZpbmRET01Ob2RlXCI7XG5pbXBvcnQgeyBmaWxsUmVmLCBzdXBwb3J0UmVmIH0gZnJvbSBcInJjLXV0aWwvZXMvcmVmXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCB7IGdldFRyYW5zaXRpb25OYW1lLCBzdXBwb3J0VHJhbnNpdGlvbiB9IGZyb20gJy4vdXRpbC9tb3Rpb24nO1xuaW1wb3J0IHsgU1RBVFVTX05PTkUsIFNURVBfUFJFUEFSRSwgU1RFUF9TVEFSVCB9IGZyb20gJy4vaW50ZXJmYWNlJztcbmltcG9ydCB1c2VTdGF0dXMgZnJvbSAnLi9ob29rcy91c2VTdGF0dXMnO1xuaW1wb3J0IERvbVdyYXBwZXIgZnJvbSAnLi9Eb21XcmFwcGVyJztcbmltcG9ydCB7IGlzQWN0aXZlIH0gZnJvbSAnLi9ob29rcy91c2VTdGVwUXVldWUnO1xuLyoqXG4gKiBgdHJhbnNpdGlvblN1cHBvcnRgIGlzIHVzZWQgZm9yIG5vbmUgdHJhbnNpdGlvbiB0ZXN0IGNhc2UuXG4gKiBEZWZhdWx0IHdlIHVzZSBicm93c2VyIHRyYW5zaXRpb24gZXZlbnQgc3VwcG9ydCBjaGVjay5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZ2VuQ1NTTW90aW9uKGNvbmZpZykge1xuICB2YXIgdHJhbnNpdGlvblN1cHBvcnQgPSBjb25maWc7XG5cbiAgaWYgKF90eXBlb2YoY29uZmlnKSA9PT0gJ29iamVjdCcpIHtcbiAgICB0cmFuc2l0aW9uU3VwcG9ydCA9IGNvbmZpZy50cmFuc2l0aW9uU3VwcG9ydDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzU3VwcG9ydFRyYW5zaXRpb24ocHJvcHMpIHtcbiAgICByZXR1cm4gISEocHJvcHMubW90aW9uTmFtZSAmJiB0cmFuc2l0aW9uU3VwcG9ydCk7XG4gIH1cblxuICB2YXIgQ1NTTW90aW9uID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gKHByb3BzLCByZWYpIHtcbiAgICB2YXIgX3Byb3BzJHZpc2libGUgPSBwcm9wcy52aXNpYmxlLFxuICAgICAgICB2aXNpYmxlID0gX3Byb3BzJHZpc2libGUgPT09IHZvaWQgMCA/IHRydWUgOiBfcHJvcHMkdmlzaWJsZSxcbiAgICAgICAgX3Byb3BzJHJlbW92ZU9uTGVhdmUgPSBwcm9wcy5yZW1vdmVPbkxlYXZlLFxuICAgICAgICByZW1vdmVPbkxlYXZlID0gX3Byb3BzJHJlbW92ZU9uTGVhdmUgPT09IHZvaWQgMCA/IHRydWUgOiBfcHJvcHMkcmVtb3ZlT25MZWF2ZSxcbiAgICAgICAgZm9yY2VSZW5kZXIgPSBwcm9wcy5mb3JjZVJlbmRlcixcbiAgICAgICAgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgbW90aW9uTmFtZSA9IHByb3BzLm1vdGlvbk5hbWUsXG4gICAgICAgIGxlYXZlZENsYXNzTmFtZSA9IHByb3BzLmxlYXZlZENsYXNzTmFtZSxcbiAgICAgICAgZXZlbnRQcm9wcyA9IHByb3BzLmV2ZW50UHJvcHM7XG4gICAgdmFyIHN1cHBvcnRNb3Rpb24gPSBpc1N1cHBvcnRUcmFuc2l0aW9uKHByb3BzKTsgLy8gUmVmIHRvIHRoZSByZWFjdCBub2RlLCBpdCBtYXkgYmUgYSBIVE1MRWxlbWVudFxuXG4gICAgdmFyIG5vZGVSZWYgPSB1c2VSZWYoKTsgLy8gUmVmIHRvIHRoZSBkb20gd3JhcHBlciBpbiBjYXNlIHJlZiBjYW4gbm90IHBhc3MgdG8gSFRNTEVsZW1lbnRcblxuICAgIHZhciB3cmFwcGVyTm9kZVJlZiA9IHVzZVJlZigpO1xuXG4gICAgZnVuY3Rpb24gZ2V0RG9tRWxlbWVudCgpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIEhlcmUgd2UncmUgYXZvaWRpbmcgY2FsbCBmb3IgZmluZERPTU5vZGUgc2luY2UgaXQncyBkZXByZWNhdGVkXG4gICAgICAgIC8vIGluIHN0cmljdCBtb2RlLiBXZSdyZSBjYWxsaW5nIGl0IG9ubHkgd2hlbiBub2RlIHJlZiBpcyBub3RcbiAgICAgICAgLy8gYW4gaW5zdGFuY2Ugb2YgRE9NIEhUTUxFbGVtZW50LiBPdGhlcndpc2UgdXNlXG4gICAgICAgIC8vIGZpbmRET01Ob2RlIGFzIGEgZmluYWwgcmVzb3J0XG4gICAgICAgIHJldHVybiBub2RlUmVmLmN1cnJlbnQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCA/IG5vZGVSZWYuY3VycmVudCA6IGZpbmRET01Ob2RlKHdyYXBwZXJOb2RlUmVmLmN1cnJlbnQpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBPbmx5IGhhcHBlbiB3aGVuIGBtb3Rpb25EZWFkbGluZWAgdHJpZ2dlciBidXQgZWxlbWVudCByZW1vdmVkLlxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgX3VzZVN0YXR1cyA9IHVzZVN0YXR1cyhzdXBwb3J0TW90aW9uLCB2aXNpYmxlLCBnZXREb21FbGVtZW50LCBwcm9wcyksXG4gICAgICAgIF91c2VTdGF0dXMyID0gX3NsaWNlZFRvQXJyYXkoX3VzZVN0YXR1cywgNCksXG4gICAgICAgIHN0YXR1cyA9IF91c2VTdGF0dXMyWzBdLFxuICAgICAgICBzdGF0dXNTdGVwID0gX3VzZVN0YXR1czJbMV0sXG4gICAgICAgIHN0YXR1c1N0eWxlID0gX3VzZVN0YXR1czJbMl0sXG4gICAgICAgIG1lcmdlZFZpc2libGUgPSBfdXNlU3RhdHVzMlszXTsgLy8gUmVjb3JkIHdoZXRoZXIgY29udGVudCBoYXMgcmVuZGVyZWRcbiAgICAvLyBXaWxsIHJldHVybiBudWxsIGZvciB1bi1yZW5kZXJlZCBldmVuIHdoZW4gYHJlbW92ZU9uTGVhdmU9e2ZhbHNlfWBcblxuXG4gICAgdmFyIHJlbmRlcmVkUmVmID0gUmVhY3QudXNlUmVmKG1lcmdlZFZpc2libGUpO1xuXG4gICAgaWYgKG1lcmdlZFZpc2libGUpIHtcbiAgICAgIHJlbmRlcmVkUmVmLmN1cnJlbnQgPSB0cnVlO1xuICAgIH0gLy8gPT09PT09PT09PT09PT09PT09PT09PSBSZWZzID09PT09PT09PT09PT09PT09PT09PT1cblxuXG4gICAgdmFyIHNldE5vZGVSZWYgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAobm9kZSkge1xuICAgICAgbm9kZVJlZi5jdXJyZW50ID0gbm9kZTtcbiAgICAgIGZpbGxSZWYocmVmLCBub2RlKTtcbiAgICB9LCBbcmVmXSk7IC8vID09PT09PT09PT09PT09PT09PT09PSBSZW5kZXIgPT09PT09PT09PT09PT09PT09PT09XG5cbiAgICB2YXIgbW90aW9uQ2hpbGRyZW47XG5cbiAgICB2YXIgbWVyZ2VkUHJvcHMgPSBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGV2ZW50UHJvcHMpLCB7fSwge1xuICAgICAgdmlzaWJsZTogdmlzaWJsZVxuICAgIH0pO1xuXG4gICAgaWYgKCFjaGlsZHJlbikge1xuICAgICAgLy8gTm8gY2hpbGRyZW5cbiAgICAgIG1vdGlvbkNoaWxkcmVuID0gbnVsbDtcbiAgICB9IGVsc2UgaWYgKHN0YXR1cyA9PT0gU1RBVFVTX05PTkUgfHwgIWlzU3VwcG9ydFRyYW5zaXRpb24ocHJvcHMpKSB7XG4gICAgICAvLyBTdGFibGUgY2hpbGRyZW5cbiAgICAgIGlmIChtZXJnZWRWaXNpYmxlKSB7XG4gICAgICAgIG1vdGlvbkNoaWxkcmVuID0gY2hpbGRyZW4oX29iamVjdFNwcmVhZCh7fSwgbWVyZ2VkUHJvcHMpLCBzZXROb2RlUmVmKTtcbiAgICAgIH0gZWxzZSBpZiAoIXJlbW92ZU9uTGVhdmUgJiYgcmVuZGVyZWRSZWYuY3VycmVudCkge1xuICAgICAgICBtb3Rpb25DaGlsZHJlbiA9IGNoaWxkcmVuKF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgbWVyZ2VkUHJvcHMpLCB7fSwge1xuICAgICAgICAgIGNsYXNzTmFtZTogbGVhdmVkQ2xhc3NOYW1lXG4gICAgICAgIH0pLCBzZXROb2RlUmVmKTtcbiAgICAgIH0gZWxzZSBpZiAoZm9yY2VSZW5kZXIpIHtcbiAgICAgICAgbW90aW9uQ2hpbGRyZW4gPSBjaGlsZHJlbihfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIG1lcmdlZFByb3BzKSwge30sIHtcbiAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgZGlzcGxheTogJ25vbmUnXG4gICAgICAgICAgfVxuICAgICAgICB9KSwgc2V0Tm9kZVJlZik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtb3Rpb25DaGlsZHJlbiA9IG51bGw7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBfY2xhc3NOYW1lcztcblxuICAgICAgLy8gSW4gbW90aW9uXG4gICAgICB2YXIgc3RhdHVzU3VmZml4O1xuXG4gICAgICBpZiAoc3RhdHVzU3RlcCA9PT0gU1RFUF9QUkVQQVJFKSB7XG4gICAgICAgIHN0YXR1c1N1ZmZpeCA9ICdwcmVwYXJlJztcbiAgICAgIH0gZWxzZSBpZiAoaXNBY3RpdmUoc3RhdHVzU3RlcCkpIHtcbiAgICAgICAgc3RhdHVzU3VmZml4ID0gJ2FjdGl2ZSc7XG4gICAgICB9IGVsc2UgaWYgKHN0YXR1c1N0ZXAgPT09IFNURVBfU1RBUlQpIHtcbiAgICAgICAgc3RhdHVzU3VmZml4ID0gJ3N0YXJ0JztcbiAgICAgIH1cblxuICAgICAgbW90aW9uQ2hpbGRyZW4gPSBjaGlsZHJlbihfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIG1lcmdlZFByb3BzKSwge30sIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGdldFRyYW5zaXRpb25OYW1lKG1vdGlvbk5hbWUsIHN0YXR1cyksIChfY2xhc3NOYW1lcyA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMsIGdldFRyYW5zaXRpb25OYW1lKG1vdGlvbk5hbWUsIFwiXCIuY29uY2F0KHN0YXR1cywgXCItXCIpLmNvbmNhdChzdGF0dXNTdWZmaXgpKSwgc3RhdHVzU3VmZml4KSwgX2RlZmluZVByb3BlcnR5KF9jbGFzc05hbWVzLCBtb3Rpb25OYW1lLCB0eXBlb2YgbW90aW9uTmFtZSA9PT0gJ3N0cmluZycpLCBfY2xhc3NOYW1lcykpLFxuICAgICAgICBzdHlsZTogc3RhdHVzU3R5bGVcbiAgICAgIH0pLCBzZXROb2RlUmVmKTtcbiAgICB9IC8vIEF1dG8gaW5qZWN0IHJlZiBpZiBjaGlsZCBub2RlIG5vdCBoYXZlIGByZWZgIHByb3BzXG5cblxuICAgIGlmICggLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KG1vdGlvbkNoaWxkcmVuKSAmJiBzdXBwb3J0UmVmKG1vdGlvbkNoaWxkcmVuKSkge1xuICAgICAgdmFyIF9tb3Rpb25DaGlsZHJlbiA9IG1vdGlvbkNoaWxkcmVuLFxuICAgICAgICAgIG9yaWdpbk5vZGVSZWYgPSBfbW90aW9uQ2hpbGRyZW4ucmVmO1xuXG4gICAgICBpZiAoIW9yaWdpbk5vZGVSZWYpIHtcbiAgICAgICAgbW90aW9uQ2hpbGRyZW4gPSAvKiNfX1BVUkVfXyovUmVhY3QuY2xvbmVFbGVtZW50KG1vdGlvbkNoaWxkcmVuLCB7XG4gICAgICAgICAgcmVmOiBzZXROb2RlUmVmXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChEb21XcmFwcGVyLCB7XG4gICAgICByZWY6IHdyYXBwZXJOb2RlUmVmXG4gICAgfSwgbW90aW9uQ2hpbGRyZW4pO1xuICB9KTtcbiAgQ1NTTW90aW9uLmRpc3BsYXlOYW1lID0gJ0NTU01vdGlvbic7XG4gIHJldHVybiBDU1NNb3Rpb247XG59XG5leHBvcnQgZGVmYXVsdCBnZW5DU1NNb3Rpb24oc3VwcG9ydFRyYW5zaXRpb24pOyIsImltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyXCI7XG5pbXBvcnQgX3R5cGVvZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mXCI7XG5leHBvcnQgdmFyIFNUQVRVU19BREQgPSAnYWRkJztcbmV4cG9ydCB2YXIgU1RBVFVTX0tFRVAgPSAna2VlcCc7XG5leHBvcnQgdmFyIFNUQVRVU19SRU1PVkUgPSAncmVtb3ZlJztcbmV4cG9ydCB2YXIgU1RBVFVTX1JFTU9WRUQgPSAncmVtb3ZlZCc7XG5leHBvcnQgZnVuY3Rpb24gd3JhcEtleVRvT2JqZWN0KGtleSkge1xuICB2YXIga2V5T2JqO1xuXG4gIGlmIChrZXkgJiYgX3R5cGVvZihrZXkpID09PSAnb2JqZWN0JyAmJiAna2V5JyBpbiBrZXkpIHtcbiAgICBrZXlPYmogPSBrZXk7XG4gIH0gZWxzZSB7XG4gICAga2V5T2JqID0ge1xuICAgICAga2V5OiBrZXlcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwga2V5T2JqKSwge30sIHtcbiAgICBrZXk6IFN0cmluZyhrZXlPYmoua2V5KVxuICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUtleXMoKSB7XG4gIHZhciBrZXlzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBbXTtcbiAgcmV0dXJuIGtleXMubWFwKHdyYXBLZXlUb09iamVjdCk7XG59XG5leHBvcnQgZnVuY3Rpb24gZGlmZktleXMoKSB7XG4gIHZhciBwcmV2S2V5cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogW107XG4gIHZhciBjdXJyZW50S2V5cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogW107XG4gIHZhciBsaXN0ID0gW107XG4gIHZhciBjdXJyZW50SW5kZXggPSAwO1xuICB2YXIgY3VycmVudExlbiA9IGN1cnJlbnRLZXlzLmxlbmd0aDtcbiAgdmFyIHByZXZLZXlPYmplY3RzID0gcGFyc2VLZXlzKHByZXZLZXlzKTtcbiAgdmFyIGN1cnJlbnRLZXlPYmplY3RzID0gcGFyc2VLZXlzKGN1cnJlbnRLZXlzKTsgLy8gQ2hlY2sgcHJldiBrZXlzIHRvIGluc2VydCBvciBrZWVwXG5cbiAgcHJldktleU9iamVjdHMuZm9yRWFjaChmdW5jdGlvbiAoa2V5T2JqKSB7XG4gICAgdmFyIGhpdCA9IGZhbHNlO1xuXG4gICAgZm9yICh2YXIgaSA9IGN1cnJlbnRJbmRleDsgaSA8IGN1cnJlbnRMZW47IGkgKz0gMSkge1xuICAgICAgdmFyIGN1cnJlbnRLZXlPYmogPSBjdXJyZW50S2V5T2JqZWN0c1tpXTtcblxuICAgICAgaWYgKGN1cnJlbnRLZXlPYmoua2V5ID09PSBrZXlPYmoua2V5KSB7XG4gICAgICAgIC8vIE5ldyBhZGRlZCBrZXlzIHNob3VsZCBhZGQgYmVmb3JlIGN1cnJlbnQga2V5XG4gICAgICAgIGlmIChjdXJyZW50SW5kZXggPCBpKSB7XG4gICAgICAgICAgbGlzdCA9IGxpc3QuY29uY2F0KGN1cnJlbnRLZXlPYmplY3RzLnNsaWNlKGN1cnJlbnRJbmRleCwgaSkubWFwKGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIG9iaiksIHt9LCB7XG4gICAgICAgICAgICAgIHN0YXR1czogU1RBVFVTX0FERFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSkpO1xuICAgICAgICAgIGN1cnJlbnRJbmRleCA9IGk7XG4gICAgICAgIH1cblxuICAgICAgICBsaXN0LnB1c2goX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBjdXJyZW50S2V5T2JqKSwge30sIHtcbiAgICAgICAgICBzdGF0dXM6IFNUQVRVU19LRUVQXG4gICAgICAgIH0pKTtcbiAgICAgICAgY3VycmVudEluZGV4ICs9IDE7XG4gICAgICAgIGhpdCA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH0gLy8gSWYgbm90IGhpdCwgaXQgbWVhbnMga2V5IGlzIHJlbW92ZWRcblxuXG4gICAgaWYgKCFoaXQpIHtcbiAgICAgIGxpc3QucHVzaChfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGtleU9iaiksIHt9LCB7XG4gICAgICAgIHN0YXR1czogU1RBVFVTX1JFTU9WRVxuICAgICAgfSkpO1xuICAgIH1cbiAgfSk7IC8vIEFkZCByZXN0IHRvIHRoZSBsaXN0XG5cbiAgaWYgKGN1cnJlbnRJbmRleCA8IGN1cnJlbnRMZW4pIHtcbiAgICBsaXN0ID0gbGlzdC5jb25jYXQoY3VycmVudEtleU9iamVjdHMuc2xpY2UoY3VycmVudEluZGV4KS5tYXAoZnVuY3Rpb24gKG9iaikge1xuICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgb2JqKSwge30sIHtcbiAgICAgICAgc3RhdHVzOiBTVEFUVVNfQUREXG4gICAgICB9KTtcbiAgICB9KSk7XG4gIH1cbiAgLyoqXG4gICAqIE1lcmdlIHNhbWUga2V5IHdoZW4gaXQgcmVtb3ZlIGFuZCBhZGQgYWdhaW46XG4gICAqICAgIFsxIC0gYWRkLCAyIC0ga2VlcCwgMSAtIHJlbW92ZV0gLT4gWzEgLSBrZWVwLCAyIC0ga2VlcF1cbiAgICovXG5cblxuICB2YXIga2V5cyA9IHt9O1xuICBsaXN0LmZvckVhY2goZnVuY3Rpb24gKF9yZWYpIHtcbiAgICB2YXIga2V5ID0gX3JlZi5rZXk7XG4gICAga2V5c1trZXldID0gKGtleXNba2V5XSB8fCAwKSArIDE7XG4gIH0pO1xuICB2YXIgZHVwbGljYXRlZEtleXMgPSBPYmplY3Qua2V5cyhrZXlzKS5maWx0ZXIoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBrZXlzW2tleV0gPiAxO1xuICB9KTtcbiAgZHVwbGljYXRlZEtleXMuZm9yRWFjaChmdW5jdGlvbiAobWF0Y2hLZXkpIHtcbiAgICAvLyBSZW1vdmUgYFNUQVRVU19SRU1PVkVgIG5vZGUuXG4gICAgbGlzdCA9IGxpc3QuZmlsdGVyKGZ1bmN0aW9uIChfcmVmMikge1xuICAgICAgdmFyIGtleSA9IF9yZWYyLmtleSxcbiAgICAgICAgICBzdGF0dXMgPSBfcmVmMi5zdGF0dXM7XG4gICAgICByZXR1cm4ga2V5ICE9PSBtYXRjaEtleSB8fCBzdGF0dXMgIT09IFNUQVRVU19SRU1PVkU7XG4gICAgfSk7IC8vIFVwZGF0ZSBgU1RBVFVTX0FERGAgdG8gYFNUQVRVU19LRUVQYFxuXG4gICAgbGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICBpZiAobm9kZS5rZXkgPT09IG1hdGNoS2V5KSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICBub2RlLnN0YXR1cyA9IFNUQVRVU19LRUVQO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbiAgcmV0dXJuIGxpc3Q7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDJcIjtcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrXCI7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzc1wiO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNcIjtcbmltcG9ydCBfY3JlYXRlU3VwZXIgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZVN1cGVyXCI7XG52YXIgX2V4Y2x1ZGVkID0gW1wiY29tcG9uZW50XCIsIFwiY2hpbGRyZW5cIiwgXCJvblZpc2libGVDaGFuZ2VkXCIsIFwib25BbGxSZW1vdmVkXCJdLFxuICAgIF9leGNsdWRlZDIgPSBbXCJzdGF0dXNcIl07XG5cbi8qIGVzbGludCByZWFjdC9wcm9wLXR5cGVzOiAwICovXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgT3JpZ2luQ1NTTW90aW9uIGZyb20gJy4vQ1NTTW90aW9uJztcbmltcG9ydCB7IHN1cHBvcnRUcmFuc2l0aW9uIH0gZnJvbSAnLi91dGlsL21vdGlvbic7XG5pbXBvcnQgeyBTVEFUVVNfQURELCBTVEFUVVNfS0VFUCwgU1RBVFVTX1JFTU9WRSwgU1RBVFVTX1JFTU9WRUQsIGRpZmZLZXlzLCBwYXJzZUtleXMgfSBmcm9tICcuL3V0aWwvZGlmZic7XG52YXIgTU9USU9OX1BST1BfTkFNRVMgPSBbJ2V2ZW50UHJvcHMnLCAndmlzaWJsZScsICdjaGlsZHJlbicsICdtb3Rpb25OYW1lJywgJ21vdGlvbkFwcGVhcicsICdtb3Rpb25FbnRlcicsICdtb3Rpb25MZWF2ZScsICdtb3Rpb25MZWF2ZUltbWVkaWF0ZWx5JywgJ21vdGlvbkRlYWRsaW5lJywgJ3JlbW92ZU9uTGVhdmUnLCAnbGVhdmVkQ2xhc3NOYW1lJywgJ29uQXBwZWFyU3RhcnQnLCAnb25BcHBlYXJBY3RpdmUnLCAnb25BcHBlYXJFbmQnLCAnb25FbnRlclN0YXJ0JywgJ29uRW50ZXJBY3RpdmUnLCAnb25FbnRlckVuZCcsICdvbkxlYXZlU3RhcnQnLCAnb25MZWF2ZUFjdGl2ZScsICdvbkxlYXZlRW5kJ107XG4vKipcbiAqIEdlbmVyYXRlIGEgQ1NTTW90aW9uTGlzdCBjb21wb25lbnQgd2l0aCBjb25maWdcbiAqIEBwYXJhbSB0cmFuc2l0aW9uU3VwcG9ydCBObyBuZWVkIHNpbmNlIENTU01vdGlvbkxpc3Qgbm8gbG9uZ2VyIGRlcGVuZHMgb24gdHJhbnNpdGlvbiBzdXBwb3J0XG4gKiBAcGFyYW0gQ1NTTW90aW9uIENTU01vdGlvbiBjb21wb25lbnRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZ2VuQ1NTTW90aW9uTGlzdCh0cmFuc2l0aW9uU3VwcG9ydCkge1xuICB2YXIgQ1NTTW90aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBPcmlnaW5DU1NNb3Rpb247XG5cbiAgdmFyIENTU01vdGlvbkxpc3QgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoQ1NTTW90aW9uTGlzdCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKENTU01vdGlvbkxpc3QpO1xuXG4gICAgZnVuY3Rpb24gQ1NTTW90aW9uTGlzdCgpIHtcbiAgICAgIHZhciBfdGhpcztcblxuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENTU01vdGlvbkxpc3QpO1xuXG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMgPSBfc3VwZXIuY2FsbC5hcHBseShfc3VwZXIsIFt0aGlzXS5jb25jYXQoYXJncykpO1xuICAgICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICAgIGtleUVudGl0aWVzOiBbXVxuICAgICAgfTtcblxuICAgICAgX3RoaXMucmVtb3ZlS2V5ID0gZnVuY3Rpb24gKHJlbW92ZUtleSkge1xuICAgICAgICB2YXIga2V5RW50aXRpZXMgPSBfdGhpcy5zdGF0ZS5rZXlFbnRpdGllcztcbiAgICAgICAgdmFyIG5leHRLZXlFbnRpdGllcyA9IGtleUVudGl0aWVzLm1hcChmdW5jdGlvbiAoZW50aXR5KSB7XG4gICAgICAgICAgaWYgKGVudGl0eS5rZXkgIT09IHJlbW92ZUtleSkgcmV0dXJuIGVudGl0eTtcbiAgICAgICAgICByZXR1cm4gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBlbnRpdHkpLCB7fSwge1xuICAgICAgICAgICAgc3RhdHVzOiBTVEFUVVNfUkVNT1ZFRFxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAga2V5RW50aXRpZXM6IG5leHRLZXlFbnRpdGllc1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gbmV4dEtleUVudGl0aWVzLmZpbHRlcihmdW5jdGlvbiAoX3JlZikge1xuICAgICAgICAgIHZhciBzdGF0dXMgPSBfcmVmLnN0YXR1cztcbiAgICAgICAgICByZXR1cm4gc3RhdHVzICE9PSBTVEFUVVNfUkVNT1ZFRDtcbiAgICAgICAgfSkubGVuZ3RoO1xuICAgICAgfTtcblxuICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhDU1NNb3Rpb25MaXN0LCBbe1xuICAgICAga2V5OiBcInJlbmRlclwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgdmFyIGtleUVudGl0aWVzID0gdGhpcy5zdGF0ZS5rZXlFbnRpdGllcztcblxuICAgICAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgICAgY29tcG9uZW50ID0gX3RoaXMkcHJvcHMuY29tcG9uZW50LFxuICAgICAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgICAgIF9vblZpc2libGVDaGFuZ2VkID0gX3RoaXMkcHJvcHMub25WaXNpYmxlQ2hhbmdlZCxcbiAgICAgICAgICAgIG9uQWxsUmVtb3ZlZCA9IF90aGlzJHByb3BzLm9uQWxsUmVtb3ZlZCxcbiAgICAgICAgICAgIHJlc3RQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfdGhpcyRwcm9wcywgX2V4Y2x1ZGVkKTtcblxuICAgICAgICB2YXIgQ29tcG9uZW50ID0gY29tcG9uZW50IHx8IFJlYWN0LkZyYWdtZW50O1xuICAgICAgICB2YXIgbW90aW9uUHJvcHMgPSB7fTtcbiAgICAgICAgTU9USU9OX1BST1BfTkFNRVMuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICAgICAgICAgIG1vdGlvblByb3BzW3Byb3BdID0gcmVzdFByb3BzW3Byb3BdO1xuICAgICAgICAgIGRlbGV0ZSByZXN0UHJvcHNbcHJvcF07XG4gICAgICAgIH0pO1xuICAgICAgICBkZWxldGUgcmVzdFByb3BzLmtleXM7XG4gICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIHJlc3RQcm9wcywga2V5RW50aXRpZXMubWFwKGZ1bmN0aW9uIChfcmVmMikge1xuICAgICAgICAgIHZhciBzdGF0dXMgPSBfcmVmMi5zdGF0dXMsXG4gICAgICAgICAgICAgIGV2ZW50UHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZjIsIF9leGNsdWRlZDIpO1xuXG4gICAgICAgICAgdmFyIHZpc2libGUgPSBzdGF0dXMgPT09IFNUQVRVU19BREQgfHwgc3RhdHVzID09PSBTVEFUVVNfS0VFUDtcbiAgICAgICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ1NTTW90aW9uLCBfZXh0ZW5kcyh7fSwgbW90aW9uUHJvcHMsIHtcbiAgICAgICAgICAgIGtleTogZXZlbnRQcm9wcy5rZXksXG4gICAgICAgICAgICB2aXNpYmxlOiB2aXNpYmxlLFxuICAgICAgICAgICAgZXZlbnRQcm9wczogZXZlbnRQcm9wcyxcbiAgICAgICAgICAgIG9uVmlzaWJsZUNoYW5nZWQ6IGZ1bmN0aW9uIG9uVmlzaWJsZUNoYW5nZWQoY2hhbmdlZFZpc2libGUpIHtcbiAgICAgICAgICAgICAgX29uVmlzaWJsZUNoYW5nZWQgPT09IG51bGwgfHwgX29uVmlzaWJsZUNoYW5nZWQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9vblZpc2libGVDaGFuZ2VkKGNoYW5nZWRWaXNpYmxlLCB7XG4gICAgICAgICAgICAgICAga2V5OiBldmVudFByb3BzLmtleVxuICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICBpZiAoIWNoYW5nZWRWaXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlc3RLZXlzQ291bnQgPSBfdGhpczIucmVtb3ZlS2V5KGV2ZW50UHJvcHMua2V5KTtcblxuICAgICAgICAgICAgICAgIGlmIChyZXN0S2V5c0NvdW50ID09PSAwICYmIG9uQWxsUmVtb3ZlZCkge1xuICAgICAgICAgICAgICAgICAgb25BbGxSZW1vdmVkKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSksIGNoaWxkcmVuKTtcbiAgICAgICAgfSkpO1xuICAgICAgfVxuICAgIH1dLCBbe1xuICAgICAga2V5OiBcImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhfcmVmMywgX3JlZjQpIHtcbiAgICAgICAgdmFyIGtleXMgPSBfcmVmMy5rZXlzO1xuICAgICAgICB2YXIga2V5RW50aXRpZXMgPSBfcmVmNC5rZXlFbnRpdGllcztcbiAgICAgICAgdmFyIHBhcnNlZEtleU9iamVjdHMgPSBwYXJzZUtleXMoa2V5cyk7XG4gICAgICAgIHZhciBtaXhlZEtleUVudGl0aWVzID0gZGlmZktleXMoa2V5RW50aXRpZXMsIHBhcnNlZEtleU9iamVjdHMpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGtleUVudGl0aWVzOiBtaXhlZEtleUVudGl0aWVzLmZpbHRlcihmdW5jdGlvbiAoZW50aXR5KSB7XG4gICAgICAgICAgICB2YXIgcHJldkVudGl0eSA9IGtleUVudGl0aWVzLmZpbmQoZnVuY3Rpb24gKF9yZWY1KSB7XG4gICAgICAgICAgICAgIHZhciBrZXkgPSBfcmVmNS5rZXk7XG4gICAgICAgICAgICAgIHJldHVybiBlbnRpdHkua2V5ID09PSBrZXk7XG4gICAgICAgICAgICB9KTsgLy8gUmVtb3ZlIGlmIGFscmVhZHkgbWFyayBhcyByZW1vdmVkXG5cbiAgICAgICAgICAgIGlmIChwcmV2RW50aXR5ICYmIHByZXZFbnRpdHkuc3RhdHVzID09PSBTVEFUVVNfUkVNT1ZFRCAmJiBlbnRpdHkuc3RhdHVzID09PSBTVEFUVVNfUkVNT1ZFKSB7XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfSlcbiAgICAgICAgfTtcbiAgICAgIH0gLy8gWm9tYmllSjogUmV0dXJuIHRoZSBjb3VudCBvZiByZXN0IGtleXMuIEl0J3Mgc2FmZSB0byByZWZhY3RvciBpZiBuZWVkIG1vcmUgaW5mby5cblxuICAgIH1dKTtcblxuICAgIHJldHVybiBDU1NNb3Rpb25MaXN0O1xuICB9KFJlYWN0LkNvbXBvbmVudCk7XG5cbiAgQ1NTTW90aW9uTGlzdC5kZWZhdWx0UHJvcHMgPSB7XG4gICAgY29tcG9uZW50OiAnZGl2J1xuICB9O1xuICByZXR1cm4gQ1NTTW90aW9uTGlzdDtcbn1cbmV4cG9ydCBkZWZhdWx0IGdlbkNTU01vdGlvbkxpc3Qoc3VwcG9ydFRyYW5zaXRpb24pOyIsImltcG9ydCBDU1NNb3Rpb24gZnJvbSAnLi9DU1NNb3Rpb24nO1xuaW1wb3J0IENTU01vdGlvbkxpc3QgZnJvbSAnLi9DU1NNb3Rpb25MaXN0JztcbmV4cG9ydCB7IENTU01vdGlvbkxpc3QgfTtcbmV4cG9ydCBkZWZhdWx0IENTU01vdGlvbjsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5XCI7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVja1wiO1xuaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3NcIjtcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzXCI7XG5pbXBvcnQgX2NyZWF0ZVN1cGVyIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVTdXBlclwiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcblxudmFyIE5vdGljZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoTm90aWNlLCBfQ29tcG9uZW50KTtcblxuICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKE5vdGljZSk7XG5cbiAgZnVuY3Rpb24gTm90aWNlKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBOb3RpY2UpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX3N1cGVyLmNhbGwuYXBwbHkoX3N1cGVyLCBbdGhpc10uY29uY2F0KGFyZ3MpKTtcbiAgICBfdGhpcy5jbG9zZVRpbWVyID0gbnVsbDtcblxuICAgIF90aGlzLmNsb3NlID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIGlmIChlKSB7XG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICB9XG5cbiAgICAgIF90aGlzLmNsZWFyQ2xvc2VUaW1lcigpO1xuXG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBvbkNsb3NlID0gX3RoaXMkcHJvcHMub25DbG9zZSxcbiAgICAgICAgICBub3RpY2VLZXkgPSBfdGhpcyRwcm9wcy5ub3RpY2VLZXk7XG5cbiAgICAgIGlmIChvbkNsb3NlKSB7XG4gICAgICAgIG9uQ2xvc2Uobm90aWNlS2V5KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuc3RhcnRDbG9zZVRpbWVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF90aGlzLnByb3BzLmR1cmF0aW9uKSB7XG4gICAgICAgIF90aGlzLmNsb3NlVGltZXIgPSB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMuY2xvc2UoKTtcbiAgICAgICAgfSwgX3RoaXMucHJvcHMuZHVyYXRpb24gKiAxMDAwKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuY2xlYXJDbG9zZVRpbWVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF90aGlzLmNsb3NlVGltZXIpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KF90aGlzLmNsb3NlVGltZXIpO1xuICAgICAgICBfdGhpcy5jbG9zZVRpbWVyID0gbnVsbDtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKE5vdGljZSwgW3tcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkTW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICB0aGlzLnN0YXJ0Q2xvc2VUaW1lcigpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnREaWRVcGRhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgICAgaWYgKHRoaXMucHJvcHMuZHVyYXRpb24gIT09IHByZXZQcm9wcy5kdXJhdGlvbiB8fCB0aGlzLnByb3BzLnVwZGF0ZU1hcmsgIT09IHByZXZQcm9wcy51cGRhdGVNYXJrIHx8IC8vIFZpc2libGUgYWdhaW4gbmVlZCByZXNldCB0aW1lclxuICAgICAgdGhpcy5wcm9wcy52aXNpYmxlICE9PSBwcmV2UHJvcHMudmlzaWJsZSAmJiB0aGlzLnByb3BzLnZpc2libGUpIHtcbiAgICAgICAgdGhpcy5yZXN0YXJ0Q2xvc2VUaW1lcigpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnRXaWxsVW5tb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIHRoaXMuY2xlYXJDbG9zZVRpbWVyKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlc3RhcnRDbG9zZVRpbWVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlc3RhcnRDbG9zZVRpbWVyKCkge1xuICAgICAgdGhpcy5jbGVhckNsb3NlVGltZXIoKTtcbiAgICAgIHRoaXMuc3RhcnRDbG9zZVRpbWVyKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgcHJlZml4Q2xzID0gX3RoaXMkcHJvcHMyLnByZWZpeENscyxcbiAgICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wczIuY2xhc3NOYW1lLFxuICAgICAgICAgIGNsb3NhYmxlID0gX3RoaXMkcHJvcHMyLmNsb3NhYmxlLFxuICAgICAgICAgIGNsb3NlSWNvbiA9IF90aGlzJHByb3BzMi5jbG9zZUljb24sXG4gICAgICAgICAgc3R5bGUgPSBfdGhpcyRwcm9wczIuc3R5bGUsXG4gICAgICAgICAgb25DbGljayA9IF90aGlzJHByb3BzMi5vbkNsaWNrLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMyLmNoaWxkcmVuLFxuICAgICAgICAgIGhvbGRlciA9IF90aGlzJHByb3BzMi5ob2xkZXI7XG4gICAgICB2YXIgY29tcG9uZW50Q2xhc3MgPSBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLW5vdGljZVwiKTtcbiAgICAgIHZhciBkYXRhT3JBcmlhQXR0cmlidXRlUHJvcHMgPSBPYmplY3Qua2V5cyh0aGlzLnByb3BzKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywga2V5KSB7XG4gICAgICAgIGlmIChrZXkuc3Vic3RyKDAsIDUpID09PSAnZGF0YS0nIHx8IGtleS5zdWJzdHIoMCwgNSkgPT09ICdhcmlhLScgfHwga2V5ID09PSAncm9sZScpIHtcbiAgICAgICAgICBhY2Nba2V5XSA9IF90aGlzMi5wcm9wc1trZXldO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgIH0sIHt9KTtcbiAgICAgIHZhciBub2RlID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe1xuICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY29tcG9uZW50Q2xhc3MsIGNsYXNzTmFtZSwgX2RlZmluZVByb3BlcnR5KHt9LCBcIlwiLmNvbmNhdChjb21wb25lbnRDbGFzcywgXCItY2xvc2FibGVcIiksIGNsb3NhYmxlKSksXG4gICAgICAgIHN0eWxlOiBzdHlsZSxcbiAgICAgICAgb25Nb3VzZUVudGVyOiB0aGlzLmNsZWFyQ2xvc2VUaW1lcixcbiAgICAgICAgb25Nb3VzZUxlYXZlOiB0aGlzLnN0YXJ0Q2xvc2VUaW1lcixcbiAgICAgICAgb25DbGljazogb25DbGlja1xuICAgICAgfSwgZGF0YU9yQXJpYUF0dHJpYnV0ZVByb3BzKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KGNvbXBvbmVudENsYXNzLCBcIi1jb250ZW50XCIpXG4gICAgICB9LCBjaGlsZHJlbiksIGNsb3NhYmxlID8gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJhXCIsIHtcbiAgICAgICAgdGFiSW5kZXg6IDAsXG4gICAgICAgIG9uQ2xpY2s6IHRoaXMuY2xvc2UsXG4gICAgICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQoY29tcG9uZW50Q2xhc3MsIFwiLWNsb3NlXCIpXG4gICAgICB9LCBjbG9zZUljb24gfHwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcIlwiLmNvbmNhdChjb21wb25lbnRDbGFzcywgXCItY2xvc2UteFwiKVxuICAgICAgfSkpIDogbnVsbCk7XG5cbiAgICAgIGlmIChob2xkZXIpIHtcbiAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdERPTS5jcmVhdGVQb3J0YWwobm9kZSwgaG9sZGVyKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIE5vdGljZTtcbn0oQ29tcG9uZW50KTtcblxuTm90aWNlLmRlZmF1bHRQcm9wcyA9IHtcbiAgb25DbG9zZTogZnVuY3Rpb24gb25DbG9zZSgpIHt9LFxuICBkdXJhdGlvbjogMS41XG59O1xuZXhwb3J0IHsgTm90aWNlIGFzIGRlZmF1bHQgfTsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMlwiO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2tcIjtcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzXCI7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c1wiO1xuaW1wb3J0IF9jcmVhdGVTdXBlciBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlU3VwZXJcIjtcbnZhciBfZXhjbHVkZWQgPSBbXCJnZXRDb250YWluZXJcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyByZW5kZXIsIHVubW91bnQgfSBmcm9tIFwicmMtdXRpbC9lcy9SZWFjdC9yZW5kZXJcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IHsgQ1NTTW90aW9uTGlzdCB9IGZyb20gJ3JjLW1vdGlvbic7XG5pbXBvcnQgTm90aWNlIGZyb20gJy4vTm90aWNlJztcbmltcG9ydCBfdXNlTm90aWZpY2F0aW9uIGZyb20gJy4vdXNlTm90aWZpY2F0aW9uJztcbnZhciBzZWVkID0gMDtcbnZhciBub3cgPSBEYXRlLm5vdygpO1xuXG5mdW5jdGlvbiBnZXRVdWlkKCkge1xuICB2YXIgaWQgPSBzZWVkO1xuICBzZWVkICs9IDE7XG4gIHJldHVybiBcInJjTm90aWZpY2F0aW9uX1wiLmNvbmNhdChub3csIFwiX1wiKS5jb25jYXQoaWQpO1xufVxuXG52YXIgTm90aWZpY2F0aW9uID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhOb3RpZmljYXRpb24sIF9Db21wb25lbnQpO1xuXG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoTm90aWZpY2F0aW9uKTtcblxuICBmdW5jdGlvbiBOb3RpZmljYXRpb24oKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE5vdGlmaWNhdGlvbik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfc3VwZXIuY2FsbC5hcHBseShfc3VwZXIsIFt0aGlzXS5jb25jYXQoYXJncykpO1xuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgbm90aWNlczogW11cbiAgICB9O1xuICAgIF90aGlzLmhvb2tSZWZzID0gbmV3IE1hcCgpO1xuXG4gICAgX3RoaXMuYWRkID0gZnVuY3Rpb24gKG9yaWdpbk5vdGljZSwgaG9sZGVyQ2FsbGJhY2spIHtcbiAgICAgIHZhciBrZXkgPSBvcmlnaW5Ob3RpY2Uua2V5IHx8IGdldFV1aWQoKTtcblxuICAgICAgdmFyIG5vdGljZSA9IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgb3JpZ2luTm90aWNlKSwge30sIHtcbiAgICAgICAga2V5OiBrZXlcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgbWF4Q291bnQgPSBfdGhpcy5wcm9wcy5tYXhDb3VudDtcblxuICAgICAgX3RoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKHByZXZpb3VzU3RhdGUpIHtcbiAgICAgICAgdmFyIG5vdGljZXMgPSBwcmV2aW91c1N0YXRlLm5vdGljZXM7XG4gICAgICAgIHZhciBub3RpY2VJbmRleCA9IG5vdGljZXMubWFwKGZ1bmN0aW9uICh2KSB7XG4gICAgICAgICAgcmV0dXJuIHYubm90aWNlLmtleTtcbiAgICAgICAgfSkuaW5kZXhPZihrZXkpO1xuICAgICAgICB2YXIgdXBkYXRlZE5vdGljZXMgPSBub3RpY2VzLmNvbmNhdCgpO1xuXG4gICAgICAgIGlmIChub3RpY2VJbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICB1cGRhdGVkTm90aWNlcy5zcGxpY2Uobm90aWNlSW5kZXgsIDEsIHtcbiAgICAgICAgICAgIG5vdGljZTogbm90aWNlLFxuICAgICAgICAgICAgaG9sZGVyQ2FsbGJhY2s6IGhvbGRlckNhbGxiYWNrXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKG1heENvdW50ICYmIG5vdGljZXMubGVuZ3RoID49IG1heENvdW50KSB7XG4gICAgICAgICAgICAvLyBYWFgsIHVzZSBrZXkgb2YgZmlyc3QgaXRlbSB0byB1cGRhdGUgbmV3IGFkZGVkIChsZXQgUmVhY3QgdG8gbW92ZSBleHNpdGluZ1xuICAgICAgICAgICAgLy8gaW5zdGVhZCBvZiByZW1vdmUgYW5kIG1vdW50KS4gU2FtZSBrZXkgd2FzIHVzZWQgYmVmb3JlIGZvciBib3RoIGEpIGV4dGVybmFsXG4gICAgICAgICAgICAvLyBtYW51YWwgY29udHJvbCBhbmQgYikgaW50ZXJuYWwgcmVhY3QgJ2tleScgcHJvcCAsIHdoaWNoIGlzIG5vdCB0aGF0IGdvb2QuXG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAgICAgIC8vIHpvbWJpZUo6IE5vdCBrbm93IHdoeSB1c2UgYHVwZGF0ZUtleWAuIFRoaXMgbWFrZXMgTm90aWNlIGluZmluaXRlIGxvb3AgaW4gamVzdC5cbiAgICAgICAgICAgIC8vIENoYW5nZSB0byBgdXBkYXRlTWFya2AgZm9yIGNvbXBhcmUgaW5zdGVhZC5cbiAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdC1jb21wb25lbnQvbm90aWZpY2F0aW9uL2NvbW1pdC8zMjI5OWU2YmUzOTZmOTQwNDBiZmE4MjUxN2VlYTk0MGRiOTQ3ZWNlXG4gICAgICAgICAgICBub3RpY2Uua2V5ID0gdXBkYXRlZE5vdGljZXNbMF0ubm90aWNlLmtleTtcbiAgICAgICAgICAgIG5vdGljZS51cGRhdGVNYXJrID0gZ2V0VXVpZCgpOyAvLyB6b21iaWVKOiBUaGF0J3Mgd2h5LiBVc2VyIG1heSBjbG9zZSBieSBrZXkgZGlyZWN0bHkuXG4gICAgICAgICAgICAvLyBXZSBuZWVkIHJlY29yZCB0aGlzIGJ1dCBub3QgcmUtcmVuZGVyIHRvIGF2b2lkIHVwcGVyIGlzc3VlXG4gICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vcmVhY3QtY29tcG9uZW50L25vdGlmaWNhdGlvbi9pc3N1ZXMvMTI5XG5cbiAgICAgICAgICAgIG5vdGljZS51c2VyUGFzc0tleSA9IGtleTtcbiAgICAgICAgICAgIHVwZGF0ZWROb3RpY2VzLnNoaWZ0KCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdXBkYXRlZE5vdGljZXMucHVzaCh7XG4gICAgICAgICAgICBub3RpY2U6IG5vdGljZSxcbiAgICAgICAgICAgIGhvbGRlckNhbGxiYWNrOiBob2xkZXJDYWxsYmFja1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBub3RpY2VzOiB1cGRhdGVkTm90aWNlc1xuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF90aGlzLnJlbW92ZSA9IGZ1bmN0aW9uIChyZW1vdmVLZXkpIHtcbiAgICAgIF90aGlzLnNldFN0YXRlKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICAgIHZhciBub3RpY2VzID0gX3JlZi5ub3RpY2VzO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG5vdGljZXM6IG5vdGljZXMuZmlsdGVyKGZ1bmN0aW9uIChfcmVmMikge1xuICAgICAgICAgICAgdmFyIF9yZWYyJG5vdGljZSA9IF9yZWYyLm5vdGljZSxcbiAgICAgICAgICAgICAgICBrZXkgPSBfcmVmMiRub3RpY2Uua2V5LFxuICAgICAgICAgICAgICAgIHVzZXJQYXNzS2V5ID0gX3JlZjIkbm90aWNlLnVzZXJQYXNzS2V5O1xuICAgICAgICAgICAgdmFyIG1lcmdlZEtleSA9IHVzZXJQYXNzS2V5IHx8IGtleTtcbiAgICAgICAgICAgIHJldHVybiBtZXJnZWRLZXkgIT09IHJlbW92ZUtleTtcbiAgICAgICAgICB9KVxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF90aGlzLm5vdGljZVByb3BzTWFwID0ge307XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKE5vdGlmaWNhdGlvbiwgW3tcbiAgICBrZXk6IFwiZ2V0VHJhbnNpdGlvbk5hbWVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VHJhbnNpdGlvbk5hbWUoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIHByZWZpeENscyA9IF90aGlzJHByb3BzLnByZWZpeENscyxcbiAgICAgICAgICBhbmltYXRpb24gPSBfdGhpcyRwcm9wcy5hbmltYXRpb247XG4gICAgICB2YXIgdHJhbnNpdGlvbk5hbWUgPSB0aGlzLnByb3BzLnRyYW5zaXRpb25OYW1lO1xuXG4gICAgICBpZiAoIXRyYW5zaXRpb25OYW1lICYmIGFuaW1hdGlvbikge1xuICAgICAgICB0cmFuc2l0aW9uTmFtZSA9IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItXCIpLmNvbmNhdChhbmltYXRpb24pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJhbnNpdGlvbk5hbWU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIG5vdGljZXMgPSB0aGlzLnN0YXRlLm5vdGljZXM7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBwcmVmaXhDbHMgPSBfdGhpcyRwcm9wczIucHJlZml4Q2xzLFxuICAgICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzMi5jbGFzc05hbWUsXG4gICAgICAgICAgY2xvc2VJY29uID0gX3RoaXMkcHJvcHMyLmNsb3NlSWNvbixcbiAgICAgICAgICBzdHlsZSA9IF90aGlzJHByb3BzMi5zdHlsZTtcbiAgICAgIHZhciBub3RpY2VLZXlzID0gW107XG4gICAgICBub3RpY2VzLmZvckVhY2goZnVuY3Rpb24gKF9yZWYzLCBpbmRleCkge1xuICAgICAgICB2YXIgbm90aWNlID0gX3JlZjMubm90aWNlLFxuICAgICAgICAgICAgaG9sZGVyQ2FsbGJhY2sgPSBfcmVmMy5ob2xkZXJDYWxsYmFjaztcbiAgICAgICAgdmFyIHVwZGF0ZU1hcmsgPSBpbmRleCA9PT0gbm90aWNlcy5sZW5ndGggLSAxID8gbm90aWNlLnVwZGF0ZU1hcmsgOiB1bmRlZmluZWQ7XG4gICAgICAgIHZhciBrZXkgPSBub3RpY2Uua2V5LFxuICAgICAgICAgICAgdXNlclBhc3NLZXkgPSBub3RpY2UudXNlclBhc3NLZXk7XG5cbiAgICAgICAgdmFyIG5vdGljZVByb3BzID0gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe1xuICAgICAgICAgIHByZWZpeENsczogcHJlZml4Q2xzLFxuICAgICAgICAgIGNsb3NlSWNvbjogY2xvc2VJY29uXG4gICAgICAgIH0sIG5vdGljZSksIG5vdGljZS5wcm9wcyksIHt9LCB7XG4gICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgbm90aWNlS2V5OiB1c2VyUGFzc0tleSB8fCBrZXksXG4gICAgICAgICAgdXBkYXRlTWFyazogdXBkYXRlTWFyayxcbiAgICAgICAgICBvbkNsb3NlOiBmdW5jdGlvbiBvbkNsb3NlKG5vdGljZUtleSkge1xuICAgICAgICAgICAgdmFyIF9ub3RpY2Ukb25DbG9zZTtcblxuICAgICAgICAgICAgX3RoaXMyLnJlbW92ZShub3RpY2VLZXkpO1xuXG4gICAgICAgICAgICAoX25vdGljZSRvbkNsb3NlID0gbm90aWNlLm9uQ2xvc2UpID09PSBudWxsIHx8IF9ub3RpY2Ukb25DbG9zZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX25vdGljZSRvbkNsb3NlLmNhbGwobm90aWNlKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIG9uQ2xpY2s6IG5vdGljZS5vbkNsaWNrLFxuICAgICAgICAgIGNoaWxkcmVuOiBub3RpY2UuY29udGVudFxuICAgICAgICB9KTsgLy8gR2l2ZSB0byBtb3Rpb25cblxuXG4gICAgICAgIG5vdGljZUtleXMucHVzaChrZXkpO1xuICAgICAgICBfdGhpczIubm90aWNlUHJvcHNNYXBba2V5XSA9IHtcbiAgICAgICAgICBwcm9wczogbm90aWNlUHJvcHMsXG4gICAgICAgICAgaG9sZGVyQ2FsbGJhY2s6IGhvbGRlckNhbGxiYWNrXG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhwcmVmaXhDbHMsIGNsYXNzTmFtZSksXG4gICAgICAgIHN0eWxlOiBzdHlsZVxuICAgICAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ1NTTW90aW9uTGlzdCwge1xuICAgICAgICBrZXlzOiBub3RpY2VLZXlzLFxuICAgICAgICBtb3Rpb25OYW1lOiB0aGlzLmdldFRyYW5zaXRpb25OYW1lKCksXG4gICAgICAgIG9uVmlzaWJsZUNoYW5nZWQ6IGZ1bmN0aW9uIG9uVmlzaWJsZUNoYW5nZWQoY2hhbmdlZFZpc2libGUsIF9yZWY0KSB7XG4gICAgICAgICAgdmFyIGtleSA9IF9yZWY0LmtleTtcblxuICAgICAgICAgIGlmICghY2hhbmdlZFZpc2libGUpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBfdGhpczIubm90aWNlUHJvcHNNYXBba2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sIGZ1bmN0aW9uIChfcmVmNSkge1xuICAgICAgICB2YXIga2V5ID0gX3JlZjUua2V5LFxuICAgICAgICAgICAgbW90aW9uQ2xhc3NOYW1lID0gX3JlZjUuY2xhc3NOYW1lLFxuICAgICAgICAgICAgbW90aW9uU3R5bGUgPSBfcmVmNS5zdHlsZSxcbiAgICAgICAgICAgIHZpc2libGUgPSBfcmVmNS52aXNpYmxlO1xuICAgICAgICB2YXIgX3RoaXMyJG5vdGljZVByb3BzTWFwID0gX3RoaXMyLm5vdGljZVByb3BzTWFwW2tleV0sXG4gICAgICAgICAgICBub3RpY2VQcm9wcyA9IF90aGlzMiRub3RpY2VQcm9wc01hcC5wcm9wcyxcbiAgICAgICAgICAgIGhvbGRlckNhbGxiYWNrID0gX3RoaXMyJG5vdGljZVByb3BzTWFwLmhvbGRlckNhbGxiYWNrO1xuXG4gICAgICAgIGlmIChob2xkZXJDYWxsYmFjaykge1xuICAgICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhtb3Rpb25DbGFzc05hbWUsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItaG9vay1ob2xkZXJcIikpLFxuICAgICAgICAgICAgc3R5bGU6IF9vYmplY3RTcHJlYWQoe30sIG1vdGlvblN0eWxlKSxcbiAgICAgICAgICAgIHJlZjogZnVuY3Rpb24gcmVmKGRpdikge1xuICAgICAgICAgICAgICBpZiAodHlwZW9mIGtleSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoZGl2KSB7XG4gICAgICAgICAgICAgICAgX3RoaXMyLmhvb2tSZWZzLnNldChrZXksIGRpdik7XG5cbiAgICAgICAgICAgICAgICBob2xkZXJDYWxsYmFjayhkaXYsIG5vdGljZVByb3BzKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBfdGhpczIuaG9va1JlZnMuZGVsZXRlKGtleSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChOb3RpY2UsIF9leHRlbmRzKHt9LCBub3RpY2VQcm9wcywge1xuICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhtb3Rpb25DbGFzc05hbWUsIG5vdGljZVByb3BzID09PSBudWxsIHx8IG5vdGljZVByb3BzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBub3RpY2VQcm9wcy5jbGFzc05hbWUpLFxuICAgICAgICAgIHN0eWxlOiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIG1vdGlvblN0eWxlKSwgbm90aWNlUHJvcHMgPT09IG51bGwgfHwgbm90aWNlUHJvcHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG5vdGljZVByb3BzLnN0eWxlKSxcbiAgICAgICAgICB2aXNpYmxlOiB2aXNpYmxlXG4gICAgICAgIH0pKTtcbiAgICAgIH0pKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gTm90aWZpY2F0aW9uO1xufShDb21wb25lbnQpO1xuXG5Ob3RpZmljYXRpb24ubmV3SW5zdGFuY2UgPSB2b2lkIDA7XG5Ob3RpZmljYXRpb24uZGVmYXVsdFByb3BzID0ge1xuICBwcmVmaXhDbHM6ICdyYy1ub3RpZmljYXRpb24nLFxuICBhbmltYXRpb246ICdmYWRlJyxcbiAgc3R5bGU6IHtcbiAgICB0b3A6IDY1LFxuICAgIGxlZnQ6ICc1MCUnXG4gIH1cbn07XG5cbk5vdGlmaWNhdGlvbi5uZXdJbnN0YW5jZSA9IGZ1bmN0aW9uIG5ld05vdGlmaWNhdGlvbkluc3RhbmNlKHByb3BlcnRpZXMsIGNhbGxiYWNrKSB7XG4gIHZhciBfcmVmNiA9IHByb3BlcnRpZXMgfHwge30sXG4gICAgICBnZXRDb250YWluZXIgPSBfcmVmNi5nZXRDb250YWluZXIsXG4gICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmNiwgX2V4Y2x1ZGVkKTtcblxuICB2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cbiAgaWYgKGdldENvbnRhaW5lcikge1xuICAgIHZhciByb290ID0gZ2V0Q29udGFpbmVyKCk7XG4gICAgcm9vdC5hcHBlbmRDaGlsZChkaXYpO1xuICB9IGVsc2Uge1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZGl2KTtcbiAgfVxuXG4gIHZhciBjYWxsZWQgPSBmYWxzZTtcblxuICBmdW5jdGlvbiByZWYobm90aWZpY2F0aW9uKSB7XG4gICAgaWYgKGNhbGxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNhbGxlZCA9IHRydWU7XG4gICAgY2FsbGJhY2soe1xuICAgICAgbm90aWNlOiBmdW5jdGlvbiBub3RpY2Uobm90aWNlUHJvcHMpIHtcbiAgICAgICAgbm90aWZpY2F0aW9uLmFkZChub3RpY2VQcm9wcyk7XG4gICAgICB9LFxuICAgICAgcmVtb3ZlTm90aWNlOiBmdW5jdGlvbiByZW1vdmVOb3RpY2Uoa2V5KSB7XG4gICAgICAgIG5vdGlmaWNhdGlvbi5yZW1vdmUoa2V5KTtcbiAgICAgIH0sXG4gICAgICBjb21wb25lbnQ6IG5vdGlmaWNhdGlvbixcbiAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICAgIHVubW91bnQoZGl2KTtcblxuICAgICAgICBpZiAoZGl2LnBhcmVudE5vZGUpIHtcbiAgICAgICAgICBkaXYucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChkaXYpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgLy8gSG9va3NcbiAgICAgIHVzZU5vdGlmaWNhdGlvbjogZnVuY3Rpb24gdXNlTm90aWZpY2F0aW9uKCkge1xuICAgICAgICByZXR1cm4gX3VzZU5vdGlmaWNhdGlvbihub3RpZmljYXRpb24pO1xuICAgICAgfVxuICAgIH0pO1xuICB9IC8vIE9ubHkgdXNlZCBmb3IgdGVzdCBjYXNlIHVzYWdlXG5cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICd0ZXN0JyAmJiBwcm9wZXJ0aWVzLlRFU1RfUkVOREVSKSB7XG4gICAgcHJvcGVydGllcy5URVNUX1JFTkRFUiggLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoTm90aWZpY2F0aW9uLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgIHJlZjogcmVmXG4gICAgfSkpKTtcbiAgICByZXR1cm47XG4gIH1cblxuICByZW5kZXIoIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KE5vdGlmaWNhdGlvbiwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgcmVmOiByZWZcbiAgfSkpLCBkaXYpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgTm90aWZpY2F0aW9uOyIsImltcG9ydCBOb3RpZmljYXRpb24gZnJvbSAnLi9Ob3RpZmljYXRpb24nO1xuZXhwb3J0IGRlZmF1bHQgTm90aWZpY2F0aW9uOyIsImltcG9ydCBfdG9Db25zdW1hYmxlQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvQ29uc3VtYWJsZUFycmF5XCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfc2xpY2VkVG9BcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheVwiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IE5vdGljZSBmcm9tICcuL05vdGljZSc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VOb3RpZmljYXRpb24obm90aWZpY2F0aW9uSW5zdGFuY2UpIHtcbiAgdmFyIGNyZWF0ZWRSZWYgPSBSZWFjdC51c2VSZWYoe30pO1xuXG4gIHZhciBfUmVhY3QkdXNlU3RhdGUgPSBSZWFjdC51c2VTdGF0ZShbXSksXG4gICAgICBfUmVhY3QkdXNlU3RhdGUyID0gX3NsaWNlZFRvQXJyYXkoX1JlYWN0JHVzZVN0YXRlLCAyKSxcbiAgICAgIGVsZW1lbnRzID0gX1JlYWN0JHVzZVN0YXRlMlswXSxcbiAgICAgIHNldEVsZW1lbnRzID0gX1JlYWN0JHVzZVN0YXRlMlsxXTtcblxuICBmdW5jdGlvbiBub3RpZnkobm90aWNlUHJvcHMpIHtcbiAgICB2YXIgZmlyc3RNb3VudCA9IHRydWU7XG4gICAgbm90aWZpY2F0aW9uSW5zdGFuY2UuYWRkKG5vdGljZVByb3BzLCBmdW5jdGlvbiAoZGl2LCBwcm9wcykge1xuICAgICAgdmFyIGtleSA9IHByb3BzLmtleTtcblxuICAgICAgaWYgKGRpdiAmJiAoIWNyZWF0ZWRSZWYuY3VycmVudFtrZXldIHx8IGZpcnN0TW91bnQpKSB7XG4gICAgICAgIHZhciBub3RpY2VFbGUgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChOb3RpY2UsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgICAgIGhvbGRlcjogZGl2XG4gICAgICAgIH0pKTtcbiAgICAgICAgY3JlYXRlZFJlZi5jdXJyZW50W2tleV0gPSBub3RpY2VFbGU7XG4gICAgICAgIHNldEVsZW1lbnRzKGZ1bmN0aW9uIChvcmlnaW5FbGVtZW50cykge1xuICAgICAgICAgIHZhciBpbmRleCA9IG9yaWdpbkVsZW1lbnRzLmZpbmRJbmRleChmdW5jdGlvbiAoZWxlKSB7XG4gICAgICAgICAgICByZXR1cm4gZWxlLmtleSA9PT0gcHJvcHMua2V5O1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuIFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkob3JpZ2luRWxlbWVudHMpLCBbbm90aWNlRWxlXSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIGNsb25lTGlzdCA9IF90b0NvbnN1bWFibGVBcnJheShvcmlnaW5FbGVtZW50cyk7XG5cbiAgICAgICAgICBjbG9uZUxpc3RbaW5kZXhdID0gbm90aWNlRWxlO1xuICAgICAgICAgIHJldHVybiBjbG9uZUxpc3Q7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBmaXJzdE1vdW50ID0gZmFsc2U7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gW25vdGlmeSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIGVsZW1lbnRzKV07XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlV2lsZGNhcmRcIik7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCIpKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCIpKTtcblxudmFyIF9jcmVhdGVDbGFzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzXCIpKTtcblxudmFyIF9pbmhlcml0czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCIpKTtcblxudmFyIF9jcmVhdGVTdXBlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZVN1cGVyXCIpKTtcblxudmFyIFJlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9yZWFjdERvbSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0LWRvbVwiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgTm90aWNlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHMyLmRlZmF1bHQpKE5vdGljZSwgX0NvbXBvbmVudCk7XG5cbiAgdmFyIF9zdXBlciA9ICgwLCBfY3JlYXRlU3VwZXIyLmRlZmF1bHQpKE5vdGljZSk7XG5cbiAgZnVuY3Rpb24gTm90aWNlKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2syLmRlZmF1bHQpKHRoaXMsIE5vdGljZSk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfc3VwZXIuY2FsbC5hcHBseShfc3VwZXIsIFt0aGlzXS5jb25jYXQoYXJncykpO1xuICAgIF90aGlzLmNsb3NlVGltZXIgPSBudWxsO1xuXG4gICAgX3RoaXMuY2xvc2UgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgaWYgKGUpIHtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuY2xlYXJDbG9zZVRpbWVyKCk7XG5cbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIG9uQ2xvc2UgPSBfdGhpcyRwcm9wcy5vbkNsb3NlLFxuICAgICAgICAgIG5vdGljZUtleSA9IF90aGlzJHByb3BzLm5vdGljZUtleTtcblxuICAgICAgaWYgKG9uQ2xvc2UpIHtcbiAgICAgICAgb25DbG9zZShub3RpY2VLZXkpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5zdGFydENsb3NlVGltZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoX3RoaXMucHJvcHMuZHVyYXRpb24pIHtcbiAgICAgICAgX3RoaXMuY2xvc2VUaW1lciA9IHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpcy5jbG9zZSgpO1xuICAgICAgICB9LCBfdGhpcy5wcm9wcy5kdXJhdGlvbiAqIDEwMDApO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5jbGVhckNsb3NlVGltZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoX3RoaXMuY2xvc2VUaW1lcikge1xuICAgICAgICBjbGVhclRpbWVvdXQoX3RoaXMuY2xvc2VUaW1lcik7XG4gICAgICAgIF90aGlzLmNsb3NlVGltZXIgPSBudWxsO1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICAoMCwgX2NyZWF0ZUNsYXNzMi5kZWZhdWx0KShOb3RpY2UsIFt7XG4gICAga2V5OiBcImNvbXBvbmVudERpZE1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdGhpcy5zdGFydENsb3NlVGltZXIoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkVXBkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICAgIGlmICh0aGlzLnByb3BzLmR1cmF0aW9uICE9PSBwcmV2UHJvcHMuZHVyYXRpb24gfHwgdGhpcy5wcm9wcy51cGRhdGVNYXJrICE9PSBwcmV2UHJvcHMudXBkYXRlTWFyayB8fCAvLyBWaXNpYmxlIGFnYWluIG5lZWQgcmVzZXQgdGltZXJcbiAgICAgIHRoaXMucHJvcHMudmlzaWJsZSAhPT0gcHJldlByb3BzLnZpc2libGUgJiYgdGhpcy5wcm9wcy52aXNpYmxlKSB7XG4gICAgICAgIHRoaXMucmVzdGFydENsb3NlVGltZXIoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50V2lsbFVubW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICB0aGlzLmNsZWFyQ2xvc2VUaW1lcigpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZXN0YXJ0Q2xvc2VUaW1lclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXN0YXJ0Q2xvc2VUaW1lcigpIHtcbiAgICAgIHRoaXMuY2xlYXJDbG9zZVRpbWVyKCk7XG4gICAgICB0aGlzLnN0YXJ0Q2xvc2VUaW1lcigpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIHByZWZpeENscyA9IF90aGlzJHByb3BzMi5wcmVmaXhDbHMsXG4gICAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMyLmNsYXNzTmFtZSxcbiAgICAgICAgICBjbG9zYWJsZSA9IF90aGlzJHByb3BzMi5jbG9zYWJsZSxcbiAgICAgICAgICBjbG9zZUljb24gPSBfdGhpcyRwcm9wczIuY2xvc2VJY29uLFxuICAgICAgICAgIHN0eWxlID0gX3RoaXMkcHJvcHMyLnN0eWxlLFxuICAgICAgICAgIG9uQ2xpY2sgPSBfdGhpcyRwcm9wczIub25DbGljayxcbiAgICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzMi5jaGlsZHJlbixcbiAgICAgICAgICBob2xkZXIgPSBfdGhpcyRwcm9wczIuaG9sZGVyO1xuICAgICAgdmFyIGNvbXBvbmVudENsYXNzID0gXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1ub3RpY2VcIik7XG4gICAgICB2YXIgZGF0YU9yQXJpYUF0dHJpYnV0ZVByb3BzID0gT2JqZWN0LmtleXModGhpcy5wcm9wcykucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGtleSkge1xuICAgICAgICBpZiAoa2V5LnN1YnN0cigwLCA1KSA9PT0gJ2RhdGEtJyB8fCBrZXkuc3Vic3RyKDAsIDUpID09PSAnYXJpYS0nIHx8IGtleSA9PT0gJ3JvbGUnKSB7XG4gICAgICAgICAgYWNjW2tleV0gPSBfdGhpczIucHJvcHNba2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgICB9LCB7fSk7XG4gICAgICB2YXIgbm9kZSA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjb21wb25lbnRDbGFzcywgY2xhc3NOYW1lLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KSh7fSwgXCJcIi5jb25jYXQoY29tcG9uZW50Q2xhc3MsIFwiLWNsb3NhYmxlXCIpLCBjbG9zYWJsZSkpLFxuICAgICAgICBzdHlsZTogc3R5bGUsXG4gICAgICAgIG9uTW91c2VFbnRlcjogdGhpcy5jbGVhckNsb3NlVGltZXIsXG4gICAgICAgIG9uTW91c2VMZWF2ZTogdGhpcy5zdGFydENsb3NlVGltZXIsXG4gICAgICAgIG9uQ2xpY2s6IG9uQ2xpY2tcbiAgICAgIH0sIGRhdGFPckFyaWFBdHRyaWJ1dGVQcm9wcyksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcIlwiLmNvbmNhdChjb21wb25lbnRDbGFzcywgXCItY29udGVudFwiKVxuICAgICAgfSwgY2hpbGRyZW4pLCBjbG9zYWJsZSA/IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiYVwiLCB7XG4gICAgICAgIHRhYkluZGV4OiAwLFxuICAgICAgICBvbkNsaWNrOiB0aGlzLmNsb3NlLFxuICAgICAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KGNvbXBvbmVudENsYXNzLCBcIi1jbG9zZVwiKVxuICAgICAgfSwgY2xvc2VJY29uIHx8IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQoY29tcG9uZW50Q2xhc3MsIFwiLWNsb3NlLXhcIilcbiAgICAgIH0pKSA6IG51bGwpO1xuXG4gICAgICBpZiAoaG9sZGVyKSB7XG4gICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovX3JlYWN0RG9tLmRlZmF1bHQuY3JlYXRlUG9ydGFsKG5vZGUsIGhvbGRlcik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBub2RlO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gTm90aWNlO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBOb3RpY2U7XG5Ob3RpY2UuZGVmYXVsdFByb3BzID0ge1xuICBvbkNsb3NlOiBmdW5jdGlvbiBvbkNsb3NlKCkge30sXG4gIGR1cmF0aW9uOiAxLjVcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlV2lsZGNhcmRcIik7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdXNlTm90aWZpY2F0aW9uO1xuXG52YXIgX3RvQ29uc3VtYWJsZUFycmF5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvdG9Db25zdW1hYmxlQXJyYXlcIikpO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9zbGljZWRUb0FycmF5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvc2xpY2VkVG9BcnJheVwiKSk7XG5cbnZhciBSZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfTm90aWNlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9Ob3RpY2VcIikpO1xuXG5mdW5jdGlvbiB1c2VOb3RpZmljYXRpb24obm90aWZpY2F0aW9uSW5zdGFuY2UpIHtcbiAgdmFyIGNyZWF0ZWRSZWYgPSBSZWFjdC51c2VSZWYoe30pO1xuXG4gIHZhciBfUmVhY3QkdXNlU3RhdGUgPSBSZWFjdC51c2VTdGF0ZShbXSksXG4gICAgICBfUmVhY3QkdXNlU3RhdGUyID0gKDAsIF9zbGljZWRUb0FycmF5Mi5kZWZhdWx0KShfUmVhY3QkdXNlU3RhdGUsIDIpLFxuICAgICAgZWxlbWVudHMgPSBfUmVhY3QkdXNlU3RhdGUyWzBdLFxuICAgICAgc2V0RWxlbWVudHMgPSBfUmVhY3QkdXNlU3RhdGUyWzFdO1xuXG4gIGZ1bmN0aW9uIG5vdGlmeShub3RpY2VQcm9wcykge1xuICAgIHZhciBmaXJzdE1vdW50ID0gdHJ1ZTtcbiAgICBub3RpZmljYXRpb25JbnN0YW5jZS5hZGQobm90aWNlUHJvcHMsIGZ1bmN0aW9uIChkaXYsIHByb3BzKSB7XG4gICAgICB2YXIga2V5ID0gcHJvcHMua2V5O1xuXG4gICAgICBpZiAoZGl2ICYmICghY3JlYXRlZFJlZi5jdXJyZW50W2tleV0gfHwgZmlyc3RNb3VudCkpIHtcbiAgICAgICAgdmFyIG5vdGljZUVsZSA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KF9Ob3RpY2UuZGVmYXVsdCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgcHJvcHMsIHtcbiAgICAgICAgICBob2xkZXI6IGRpdlxuICAgICAgICB9KSk7XG4gICAgICAgIGNyZWF0ZWRSZWYuY3VycmVudFtrZXldID0gbm90aWNlRWxlO1xuICAgICAgICBzZXRFbGVtZW50cyhmdW5jdGlvbiAob3JpZ2luRWxlbWVudHMpIHtcbiAgICAgICAgICB2YXIgaW5kZXggPSBvcmlnaW5FbGVtZW50cy5maW5kSW5kZXgoZnVuY3Rpb24gKGVsZSkge1xuICAgICAgICAgICAgcmV0dXJuIGVsZS5rZXkgPT09IHByb3BzLmtleTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgIHJldHVybiBbXS5jb25jYXQoKDAsIF90b0NvbnN1bWFibGVBcnJheTIuZGVmYXVsdCkob3JpZ2luRWxlbWVudHMpLCBbbm90aWNlRWxlXSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIGNsb25lTGlzdCA9ICgwLCBfdG9Db25zdW1hYmxlQXJyYXkyLmRlZmF1bHQpKG9yaWdpbkVsZW1lbnRzKTtcbiAgICAgICAgICBjbG9uZUxpc3RbaW5kZXhdID0gbm90aWNlRWxlO1xuICAgICAgICAgIHJldHVybiBjbG9uZUxpc3Q7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBmaXJzdE1vdW50ID0gZmFsc2U7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gW25vdGlmeSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIGVsZW1lbnRzKV07XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMlwiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbnZhciBfZXhjbHVkZWQgPSBbXCJwcmVmaXhDbHNcIiwgXCJpbnZhbGlkYXRlXCIsIFwiaXRlbVwiLCBcInJlbmRlckl0ZW1cIiwgXCJyZXNwb25zaXZlXCIsIFwicmVzcG9uc2l2ZURpc2FibGVkXCIsIFwicmVnaXN0ZXJTaXplXCIsIFwiaXRlbUtleVwiLCBcImNsYXNzTmFtZVwiLCBcInN0eWxlXCIsIFwiY2hpbGRyZW5cIiwgXCJkaXNwbGF5XCIsIFwib3JkZXJcIiwgXCJjb21wb25lbnRcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZXNpemVPYnNlcnZlciBmcm9tICdyYy1yZXNpemUtb2JzZXJ2ZXInOyAvLyBVc2Ugc2hhcmVkIHZhcmlhYmxlIHRvIHNhdmUgYnVuZGxlIHNpemVcblxudmFyIFVOREVGSU5FRCA9IHVuZGVmaW5lZDtcblxuZnVuY3Rpb24gSW50ZXJuYWxJdGVtKHByb3BzLCByZWYpIHtcbiAgdmFyIHByZWZpeENscyA9IHByb3BzLnByZWZpeENscyxcbiAgICAgIGludmFsaWRhdGUgPSBwcm9wcy5pbnZhbGlkYXRlLFxuICAgICAgaXRlbSA9IHByb3BzLml0ZW0sXG4gICAgICByZW5kZXJJdGVtID0gcHJvcHMucmVuZGVySXRlbSxcbiAgICAgIHJlc3BvbnNpdmUgPSBwcm9wcy5yZXNwb25zaXZlLFxuICAgICAgcmVzcG9uc2l2ZURpc2FibGVkID0gcHJvcHMucmVzcG9uc2l2ZURpc2FibGVkLFxuICAgICAgcmVnaXN0ZXJTaXplID0gcHJvcHMucmVnaXN0ZXJTaXplLFxuICAgICAgaXRlbUtleSA9IHByb3BzLml0ZW1LZXksXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBzdHlsZSA9IHByb3BzLnN0eWxlLFxuICAgICAgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGRpc3BsYXkgPSBwcm9wcy5kaXNwbGF5LFxuICAgICAgb3JkZXIgPSBwcm9wcy5vcmRlcixcbiAgICAgIF9wcm9wcyRjb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBDb21wb25lbnQgPSBfcHJvcHMkY29tcG9uZW50ID09PSB2b2lkIDAgPyAnZGl2JyA6IF9wcm9wcyRjb21wb25lbnQsXG4gICAgICByZXN0UHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIF9leGNsdWRlZCk7XG5cbiAgdmFyIG1lcmdlZEhpZGRlbiA9IHJlc3BvbnNpdmUgJiYgIWRpc3BsYXk7IC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEVmZmVjdCA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIGZ1bmN0aW9uIGludGVybmFsUmVnaXN0ZXJTaXplKHdpZHRoKSB7XG4gICAgcmVnaXN0ZXJTaXplKGl0ZW1LZXksIHdpZHRoKTtcbiAgfVxuXG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGludGVybmFsUmVnaXN0ZXJTaXplKG51bGwpO1xuICAgIH07XG4gIH0sIFtdKTsgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gUmVuZGVyID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgdmFyIGNoaWxkTm9kZSA9IHJlbmRlckl0ZW0gJiYgaXRlbSAhPT0gVU5ERUZJTkVEID8gcmVuZGVySXRlbShpdGVtKSA6IGNoaWxkcmVuO1xuICB2YXIgb3ZlcmZsb3dTdHlsZTtcblxuICBpZiAoIWludmFsaWRhdGUpIHtcbiAgICBvdmVyZmxvd1N0eWxlID0ge1xuICAgICAgb3BhY2l0eTogbWVyZ2VkSGlkZGVuID8gMCA6IDEsXG4gICAgICBoZWlnaHQ6IG1lcmdlZEhpZGRlbiA/IDAgOiBVTkRFRklORUQsXG4gICAgICBvdmVyZmxvd1k6IG1lcmdlZEhpZGRlbiA/ICdoaWRkZW4nIDogVU5ERUZJTkVELFxuICAgICAgb3JkZXI6IHJlc3BvbnNpdmUgPyBvcmRlciA6IFVOREVGSU5FRCxcbiAgICAgIHBvaW50ZXJFdmVudHM6IG1lcmdlZEhpZGRlbiA/ICdub25lJyA6IFVOREVGSU5FRCxcbiAgICAgIHBvc2l0aW9uOiBtZXJnZWRIaWRkZW4gPyAnYWJzb2x1dGUnIDogVU5ERUZJTkVEXG4gICAgfTtcbiAgfVxuXG4gIHZhciBvdmVyZmxvd1Byb3BzID0ge307XG5cbiAgaWYgKG1lcmdlZEhpZGRlbikge1xuICAgIG92ZXJmbG93UHJvcHNbJ2FyaWEtaGlkZGVuJ10gPSB0cnVlO1xuICB9XG5cbiAgdmFyIGl0ZW1Ob2RlID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKCFpbnZhbGlkYXRlICYmIHByZWZpeENscywgY2xhc3NOYW1lKSxcbiAgICBzdHlsZTogX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBvdmVyZmxvd1N0eWxlKSwgc3R5bGUpXG4gIH0sIG92ZXJmbG93UHJvcHMsIHJlc3RQcm9wcywge1xuICAgIHJlZjogcmVmXG4gIH0pLCBjaGlsZE5vZGUpO1xuXG4gIGlmIChyZXNwb25zaXZlKSB7XG4gICAgaXRlbU5vZGUgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZXNpemVPYnNlcnZlciwge1xuICAgICAgb25SZXNpemU6IGZ1bmN0aW9uIG9uUmVzaXplKF9yZWYpIHtcbiAgICAgICAgdmFyIG9mZnNldFdpZHRoID0gX3JlZi5vZmZzZXRXaWR0aDtcbiAgICAgICAgaW50ZXJuYWxSZWdpc3RlclNpemUob2Zmc2V0V2lkdGgpO1xuICAgICAgfSxcbiAgICAgIGRpc2FibGVkOiByZXNwb25zaXZlRGlzYWJsZWRcbiAgICB9LCBpdGVtTm9kZSk7XG4gIH1cblxuICByZXR1cm4gaXRlbU5vZGU7XG59XG5cbnZhciBJdGVtID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoSW50ZXJuYWxJdGVtKTtcbkl0ZW0uZGlzcGxheU5hbWUgPSAnSXRlbSc7XG5leHBvcnQgZGVmYXVsdCBJdGVtOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbnZhciBfZXhjbHVkZWQgPSBbXCJjb21wb25lbnRcIl0sXG4gICAgX2V4Y2x1ZGVkMiA9IFtcImNsYXNzTmFtZVwiXSxcbiAgICBfZXhjbHVkZWQzID0gW1wiY2xhc3NOYW1lXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgSXRlbSBmcm9tICcuL0l0ZW0nO1xuaW1wb3J0IHsgT3ZlcmZsb3dDb250ZXh0IH0gZnJvbSAnLi9PdmVyZmxvdyc7XG5cbnZhciBJbnRlcm5hbFJhd0l0ZW0gPSBmdW5jdGlvbiBJbnRlcm5hbFJhd0l0ZW0ocHJvcHMsIHJlZikge1xuICB2YXIgY29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoT3ZlcmZsb3dDb250ZXh0KTsgLy8gUmVuZGVyIGRpcmVjdGx5IHdoZW4gY29udGV4dCBub3QgcHJvdmlkZWRcblxuICBpZiAoIWNvbnRleHQpIHtcbiAgICB2YXIgX3Byb3BzJGNvbXBvbmVudCA9IHByb3BzLmNvbXBvbmVudCxcbiAgICAgICAgQ29tcG9uZW50ID0gX3Byb3BzJGNvbXBvbmVudCA9PT0gdm9pZCAwID8gJ2RpdicgOiBfcHJvcHMkY29tcG9uZW50LFxuICAgICAgICBfcmVzdFByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBfZXhjbHVkZWQpO1xuXG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe30sIF9yZXN0UHJvcHMsIHtcbiAgICAgIHJlZjogcmVmXG4gICAgfSkpO1xuICB9XG5cbiAgdmFyIGNvbnRleHRDbGFzc05hbWUgPSBjb250ZXh0LmNsYXNzTmFtZSxcbiAgICAgIHJlc3RDb250ZXh0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKGNvbnRleHQsIF9leGNsdWRlZDIpO1xuXG4gIHZhciBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICByZXN0UHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIF9leGNsdWRlZDMpOyAvLyBEbyBub3QgcGFzcyBjb250ZXh0IHRvIHN1YiBpdGVtIHRvIGF2b2lkIG11bHRpcGxlIG1lYXN1cmVcblxuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChPdmVyZmxvd0NvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogbnVsbFxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChJdGVtLCBfZXh0ZW5kcyh7XG4gICAgcmVmOiByZWYsXG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNvbnRleHRDbGFzc05hbWUsIGNsYXNzTmFtZSlcbiAgfSwgcmVzdENvbnRleHQsIHJlc3RQcm9wcykpKTtcbn07XG5cbnZhciBSYXdJdGVtID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoSW50ZXJuYWxSYXdJdGVtKTtcblJhd0l0ZW0uZGlzcGxheU5hbWUgPSAnUmF3SXRlbSc7XG5leHBvcnQgZGVmYXVsdCBSYXdJdGVtOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDJcIjtcbmltcG9ydCBfc2xpY2VkVG9BcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheVwiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbnZhciBfZXhjbHVkZWQgPSBbXCJwcmVmaXhDbHNcIiwgXCJkYXRhXCIsIFwicmVuZGVySXRlbVwiLCBcInJlbmRlclJhd0l0ZW1cIiwgXCJpdGVtS2V5XCIsIFwiaXRlbVdpZHRoXCIsIFwic3NyXCIsIFwic3R5bGVcIiwgXCJjbGFzc05hbWVcIiwgXCJtYXhDb3VudFwiLCBcInJlbmRlclJlc3RcIiwgXCJyZW5kZXJSYXdSZXN0XCIsIFwic3VmZml4XCIsIFwiY29tcG9uZW50XCIsIFwiaXRlbUNvbXBvbmVudFwiLCBcIm9uVmlzaWJsZUNoYW5nZVwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZVN0YXRlLCB1c2VNZW1vLCB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlc2l6ZU9ic2VydmVyIGZyb20gJ3JjLXJlc2l6ZS1vYnNlcnZlcic7XG5pbXBvcnQgdXNlTGF5b3V0RWZmZWN0IGZyb20gXCJyYy11dGlsL2VzL2hvb2tzL3VzZUxheW91dEVmZmVjdFwiO1xuaW1wb3J0IEl0ZW0gZnJvbSAnLi9JdGVtJztcbmltcG9ydCB7IHVzZUJhdGNoRnJhbWVTdGF0ZSB9IGZyb20gJy4vaG9va3MvdXNlQmF0Y2hGcmFtZVN0YXRlJztcbmltcG9ydCBSYXdJdGVtIGZyb20gJy4vUmF3SXRlbSc7XG5leHBvcnQgdmFyIE92ZXJmbG93Q29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xudmFyIFJFU1BPTlNJVkUgPSAncmVzcG9uc2l2ZSc7XG52YXIgSU5WQUxJREFURSA9ICdpbnZhbGlkYXRlJztcblxuZnVuY3Rpb24gZGVmYXVsdFJlbmRlclJlc3Qob21pdHRlZEl0ZW1zKSB7XG4gIHJldHVybiBcIisgXCIuY29uY2F0KG9taXR0ZWRJdGVtcy5sZW5ndGgsIFwiIC4uLlwiKTtcbn1cblxuZnVuY3Rpb24gT3ZlcmZsb3cocHJvcHMsIHJlZikge1xuICB2YXIgX3Byb3BzJHByZWZpeENscyA9IHByb3BzLnByZWZpeENscyxcbiAgICAgIHByZWZpeENscyA9IF9wcm9wcyRwcmVmaXhDbHMgPT09IHZvaWQgMCA/ICdyYy1vdmVyZmxvdycgOiBfcHJvcHMkcHJlZml4Q2xzLFxuICAgICAgX3Byb3BzJGRhdGEgPSBwcm9wcy5kYXRhLFxuICAgICAgZGF0YSA9IF9wcm9wcyRkYXRhID09PSB2b2lkIDAgPyBbXSA6IF9wcm9wcyRkYXRhLFxuICAgICAgcmVuZGVySXRlbSA9IHByb3BzLnJlbmRlckl0ZW0sXG4gICAgICByZW5kZXJSYXdJdGVtID0gcHJvcHMucmVuZGVyUmF3SXRlbSxcbiAgICAgIGl0ZW1LZXkgPSBwcm9wcy5pdGVtS2V5LFxuICAgICAgX3Byb3BzJGl0ZW1XaWR0aCA9IHByb3BzLml0ZW1XaWR0aCxcbiAgICAgIGl0ZW1XaWR0aCA9IF9wcm9wcyRpdGVtV2lkdGggPT09IHZvaWQgMCA/IDEwIDogX3Byb3BzJGl0ZW1XaWR0aCxcbiAgICAgIHNzciA9IHByb3BzLnNzcixcbiAgICAgIHN0eWxlID0gcHJvcHMuc3R5bGUsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBtYXhDb3VudCA9IHByb3BzLm1heENvdW50LFxuICAgICAgcmVuZGVyUmVzdCA9IHByb3BzLnJlbmRlclJlc3QsXG4gICAgICByZW5kZXJSYXdSZXN0ID0gcHJvcHMucmVuZGVyUmF3UmVzdCxcbiAgICAgIHN1ZmZpeCA9IHByb3BzLnN1ZmZpeCxcbiAgICAgIF9wcm9wcyRjb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBDb21wb25lbnQgPSBfcHJvcHMkY29tcG9uZW50ID09PSB2b2lkIDAgPyAnZGl2JyA6IF9wcm9wcyRjb21wb25lbnQsXG4gICAgICBpdGVtQ29tcG9uZW50ID0gcHJvcHMuaXRlbUNvbXBvbmVudCxcbiAgICAgIG9uVmlzaWJsZUNoYW5nZSA9IHByb3BzLm9uVmlzaWJsZUNoYW5nZSxcbiAgICAgIHJlc3RQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgX2V4Y2x1ZGVkKTtcblxuICB2YXIgY3JlYXRlVXNlU3RhdGUgPSB1c2VCYXRjaEZyYW1lU3RhdGUoKTtcbiAgdmFyIGZ1bGx5U1NSID0gc3NyID09PSAnZnVsbCc7XG5cbiAgdmFyIF9jcmVhdGVVc2VTdGF0ZSA9IGNyZWF0ZVVzZVN0YXRlKG51bGwpLFxuICAgICAgX2NyZWF0ZVVzZVN0YXRlMiA9IF9zbGljZWRUb0FycmF5KF9jcmVhdGVVc2VTdGF0ZSwgMiksXG4gICAgICBjb250YWluZXJXaWR0aCA9IF9jcmVhdGVVc2VTdGF0ZTJbMF0sXG4gICAgICBzZXRDb250YWluZXJXaWR0aCA9IF9jcmVhdGVVc2VTdGF0ZTJbMV07XG5cbiAgdmFyIG1lcmdlZENvbnRhaW5lcldpZHRoID0gY29udGFpbmVyV2lkdGggfHwgMDtcblxuICB2YXIgX2NyZWF0ZVVzZVN0YXRlMyA9IGNyZWF0ZVVzZVN0YXRlKG5ldyBNYXAoKSksXG4gICAgICBfY3JlYXRlVXNlU3RhdGU0ID0gX3NsaWNlZFRvQXJyYXkoX2NyZWF0ZVVzZVN0YXRlMywgMiksXG4gICAgICBpdGVtV2lkdGhzID0gX2NyZWF0ZVVzZVN0YXRlNFswXSxcbiAgICAgIHNldEl0ZW1XaWR0aHMgPSBfY3JlYXRlVXNlU3RhdGU0WzFdO1xuXG4gIHZhciBfY3JlYXRlVXNlU3RhdGU1ID0gY3JlYXRlVXNlU3RhdGUoMCksXG4gICAgICBfY3JlYXRlVXNlU3RhdGU2ID0gX3NsaWNlZFRvQXJyYXkoX2NyZWF0ZVVzZVN0YXRlNSwgMiksXG4gICAgICBwcmV2UmVzdFdpZHRoID0gX2NyZWF0ZVVzZVN0YXRlNlswXSxcbiAgICAgIHNldFByZXZSZXN0V2lkdGggPSBfY3JlYXRlVXNlU3RhdGU2WzFdO1xuXG4gIHZhciBfY3JlYXRlVXNlU3RhdGU3ID0gY3JlYXRlVXNlU3RhdGUoMCksXG4gICAgICBfY3JlYXRlVXNlU3RhdGU4ID0gX3NsaWNlZFRvQXJyYXkoX2NyZWF0ZVVzZVN0YXRlNywgMiksXG4gICAgICByZXN0V2lkdGggPSBfY3JlYXRlVXNlU3RhdGU4WzBdLFxuICAgICAgc2V0UmVzdFdpZHRoID0gX2NyZWF0ZVVzZVN0YXRlOFsxXTtcblxuICB2YXIgX2NyZWF0ZVVzZVN0YXRlOSA9IGNyZWF0ZVVzZVN0YXRlKDApLFxuICAgICAgX2NyZWF0ZVVzZVN0YXRlMTAgPSBfc2xpY2VkVG9BcnJheShfY3JlYXRlVXNlU3RhdGU5LCAyKSxcbiAgICAgIHN1ZmZpeFdpZHRoID0gX2NyZWF0ZVVzZVN0YXRlMTBbMF0sXG4gICAgICBzZXRTdWZmaXhXaWR0aCA9IF9jcmVhdGVVc2VTdGF0ZTEwWzFdO1xuXG4gIHZhciBfdXNlU3RhdGUgPSB1c2VTdGF0ZShudWxsKSxcbiAgICAgIF91c2VTdGF0ZTIgPSBfc2xpY2VkVG9BcnJheShfdXNlU3RhdGUsIDIpLFxuICAgICAgc3VmZml4Rml4ZWRTdGFydCA9IF91c2VTdGF0ZTJbMF0sXG4gICAgICBzZXRTdWZmaXhGaXhlZFN0YXJ0ID0gX3VzZVN0YXRlMlsxXTtcblxuICB2YXIgX3VzZVN0YXRlMyA9IHVzZVN0YXRlKG51bGwpLFxuICAgICAgX3VzZVN0YXRlNCA9IF9zbGljZWRUb0FycmF5KF91c2VTdGF0ZTMsIDIpLFxuICAgICAgZGlzcGxheUNvdW50ID0gX3VzZVN0YXRlNFswXSxcbiAgICAgIHNldERpc3BsYXlDb3VudCA9IF91c2VTdGF0ZTRbMV07XG5cbiAgdmFyIG1lcmdlZERpc3BsYXlDb3VudCA9IFJlYWN0LnVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIGlmIChkaXNwbGF5Q291bnQgPT09IG51bGwgJiYgZnVsbHlTU1IpIHtcbiAgICAgIHJldHVybiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUjtcbiAgICB9XG5cbiAgICByZXR1cm4gZGlzcGxheUNvdW50IHx8IDA7XG4gIH0sIFtkaXNwbGF5Q291bnQsIGNvbnRhaW5lcldpZHRoXSk7XG5cbiAgdmFyIF91c2VTdGF0ZTUgPSB1c2VTdGF0ZShmYWxzZSksXG4gICAgICBfdXNlU3RhdGU2ID0gX3NsaWNlZFRvQXJyYXkoX3VzZVN0YXRlNSwgMiksXG4gICAgICByZXN0UmVhZHkgPSBfdXNlU3RhdGU2WzBdLFxuICAgICAgc2V0UmVzdFJlYWR5ID0gX3VzZVN0YXRlNlsxXTtcblxuICB2YXIgaXRlbVByZWZpeENscyA9IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItaXRlbVwiKTsgLy8gQWx3YXlzIHVzZSB0aGUgbWF4IHdpZHRoIHRvIGF2b2lkIGJsaW5rXG5cbiAgdmFyIG1lcmdlZFJlc3RXaWR0aCA9IE1hdGgubWF4KHByZXZSZXN0V2lkdGgsIHJlc3RXaWR0aCk7IC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSBEYXRhID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIHZhciBpc1Jlc3BvbnNpdmUgPSBtYXhDb3VudCA9PT0gUkVTUE9OU0lWRTtcbiAgdmFyIHNob3VsZFJlc3BvbnNpdmUgPSBkYXRhLmxlbmd0aCAmJiBpc1Jlc3BvbnNpdmU7XG4gIHZhciBpbnZhbGlkYXRlID0gbWF4Q291bnQgPT09IElOVkFMSURBVEU7XG4gIC8qKlxuICAgKiBXaGVuIGlzIGByZXNwb25zaXZlYCwgd2Ugd2lsbCBhbHdheXMgcmVuZGVyIHJlc3Qgbm9kZSB0byBnZXQgdGhlIHJlYWwgd2lkdGggb2YgaXQgZm9yIGNhbGN1bGF0aW9uXG4gICAqL1xuXG4gIHZhciBzaG93UmVzdCA9IHNob3VsZFJlc3BvbnNpdmUgfHwgdHlwZW9mIG1heENvdW50ID09PSAnbnVtYmVyJyAmJiBkYXRhLmxlbmd0aCA+IG1heENvdW50O1xuICB2YXIgbWVyZ2VkRGF0YSA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHZhciBpdGVtcyA9IGRhdGE7XG5cbiAgICBpZiAoc2hvdWxkUmVzcG9uc2l2ZSkge1xuICAgICAgaWYgKGNvbnRhaW5lcldpZHRoID09PSBudWxsICYmIGZ1bGx5U1NSKSB7XG4gICAgICAgIGl0ZW1zID0gZGF0YTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGl0ZW1zID0gZGF0YS5zbGljZSgwLCBNYXRoLm1pbihkYXRhLmxlbmd0aCwgbWVyZ2VkQ29udGFpbmVyV2lkdGggLyBpdGVtV2lkdGgpKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBtYXhDb3VudCA9PT0gJ251bWJlcicpIHtcbiAgICAgIGl0ZW1zID0gZGF0YS5zbGljZSgwLCBtYXhDb3VudCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGl0ZW1zO1xuICB9LCBbZGF0YSwgaXRlbVdpZHRoLCBjb250YWluZXJXaWR0aCwgbWF4Q291bnQsIHNob3VsZFJlc3BvbnNpdmVdKTtcbiAgdmFyIG9taXR0ZWRJdGVtcyA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIGlmIChzaG91bGRSZXNwb25zaXZlKSB7XG4gICAgICByZXR1cm4gZGF0YS5zbGljZShtZXJnZWREaXNwbGF5Q291bnQgKyAxKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGF0YS5zbGljZShtZXJnZWREYXRhLmxlbmd0aCk7XG4gIH0sIFtkYXRhLCBtZXJnZWREYXRhLCBzaG91bGRSZXNwb25zaXZlLCBtZXJnZWREaXNwbGF5Q291bnRdKTsgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEl0ZW0gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgdmFyIGdldEtleSA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uIChpdGVtLCBpbmRleCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgaWYgKHR5cGVvZiBpdGVtS2V5ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gaXRlbUtleShpdGVtKTtcbiAgICB9XG5cbiAgICByZXR1cm4gKF9yZWYgPSBpdGVtS2V5ICYmIChpdGVtID09PSBudWxsIHx8IGl0ZW0gPT09IHZvaWQgMCA/IHZvaWQgMCA6IGl0ZW1baXRlbUtleV0pKSAhPT0gbnVsbCAmJiBfcmVmICE9PSB2b2lkIDAgPyBfcmVmIDogaW5kZXg7XG4gIH0sIFtpdGVtS2V5XSk7XG4gIHZhciBtZXJnZWRSZW5kZXJJdGVtID0gdXNlQ2FsbGJhY2socmVuZGVySXRlbSB8fCBmdW5jdGlvbiAoaXRlbSkge1xuICAgIHJldHVybiBpdGVtO1xuICB9LCBbcmVuZGVySXRlbV0pO1xuXG4gIGZ1bmN0aW9uIHVwZGF0ZURpc3BsYXlDb3VudChjb3VudCwgbm90UmVhZHkpIHtcbiAgICBzZXREaXNwbGF5Q291bnQoY291bnQpO1xuXG4gICAgaWYgKCFub3RSZWFkeSkge1xuICAgICAgc2V0UmVzdFJlYWR5KGNvdW50IDwgZGF0YS5sZW5ndGggLSAxKTtcbiAgICAgIG9uVmlzaWJsZUNoYW5nZSA9PT0gbnVsbCB8fCBvblZpc2libGVDaGFuZ2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9uVmlzaWJsZUNoYW5nZShjb3VudCk7XG4gICAgfVxuICB9IC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSBTaXplID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5cbiAgZnVuY3Rpb24gb25PdmVyZmxvd1Jlc2l6ZShfLCBlbGVtZW50KSB7XG4gICAgc2V0Q29udGFpbmVyV2lkdGgoZWxlbWVudC5jbGllbnRXaWR0aCk7XG4gIH1cblxuICBmdW5jdGlvbiByZWdpc3RlclNpemUoa2V5LCB3aWR0aCkge1xuICAgIHNldEl0ZW1XaWR0aHMoZnVuY3Rpb24gKG9yaWdpbikge1xuICAgICAgdmFyIGNsb25lID0gbmV3IE1hcChvcmlnaW4pO1xuXG4gICAgICBpZiAod2lkdGggPT09IG51bGwpIHtcbiAgICAgICAgY2xvbmUuZGVsZXRlKGtleSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjbG9uZS5zZXQoa2V5LCB3aWR0aCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjbG9uZTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlZ2lzdGVyT3ZlcmZsb3dTaXplKF8sIHdpZHRoKSB7XG4gICAgc2V0UmVzdFdpZHRoKHdpZHRoKTtcbiAgICBzZXRQcmV2UmVzdFdpZHRoKHJlc3RXaWR0aCk7XG4gIH1cblxuICBmdW5jdGlvbiByZWdpc3RlclN1ZmZpeFNpemUoXywgd2lkdGgpIHtcbiAgICBzZXRTdWZmaXhXaWR0aCh3aWR0aCk7XG4gIH0gLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gRWZmZWN0ID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cblxuICBmdW5jdGlvbiBnZXRJdGVtV2lkdGgoaW5kZXgpIHtcbiAgICByZXR1cm4gaXRlbVdpZHRocy5nZXQoZ2V0S2V5KG1lcmdlZERhdGFbaW5kZXhdLCBpbmRleCkpO1xuICB9XG5cbiAgdXNlTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAobWVyZ2VkQ29udGFpbmVyV2lkdGggJiYgbWVyZ2VkUmVzdFdpZHRoICYmIG1lcmdlZERhdGEpIHtcbiAgICAgIHZhciB0b3RhbFdpZHRoID0gc3VmZml4V2lkdGg7XG4gICAgICB2YXIgbGVuID0gbWVyZ2VkRGF0YS5sZW5ndGg7XG4gICAgICB2YXIgbGFzdEluZGV4ID0gbGVuIC0gMTsgLy8gV2hlbiBkYXRhIGNvdW50IGNoYW5nZSB0byAwLCByZXNldCB0aGlzIHNpbmNlIG5vdCBsb29wIHdpbGwgcmVhY2hcblxuICAgICAgaWYgKCFsZW4pIHtcbiAgICAgICAgdXBkYXRlRGlzcGxheUNvdW50KDApO1xuICAgICAgICBzZXRTdWZmaXhGaXhlZFN0YXJ0KG51bGwpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgdmFyIGN1cnJlbnRJdGVtV2lkdGggPSBnZXRJdGVtV2lkdGgoaSk7IC8vIEZ1bGx5IHdpbGwgYWx3YXlzIHJlbmRlclxuXG4gICAgICAgIGlmIChmdWxseVNTUikge1xuICAgICAgICAgIGN1cnJlbnRJdGVtV2lkdGggPSBjdXJyZW50SXRlbVdpZHRoIHx8IDA7XG4gICAgICAgIH0gLy8gQnJlYWsgc2luY2UgZGF0YSBub3QgcmVhZHlcblxuXG4gICAgICAgIGlmIChjdXJyZW50SXRlbVdpZHRoID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB1cGRhdGVEaXNwbGF5Q291bnQoaSAtIDEsIHRydWUpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9IC8vIEZpbmQgYmVzdCBtYXRjaFxuXG5cbiAgICAgICAgdG90YWxXaWR0aCArPSBjdXJyZW50SXRlbVdpZHRoO1xuXG4gICAgICAgIGlmICggLy8gT25seSBvbmUgbWVhbnMgYHRvdGFsV2lkdGhgIGlzIHRoZSBmaW5hbCB3aWR0aFxuICAgICAgICBsYXN0SW5kZXggPT09IDAgJiYgdG90YWxXaWR0aCA8PSBtZXJnZWRDb250YWluZXJXaWR0aCB8fCAvLyBMYXN0IHR3byB3aWR0aCB3aWxsIGJlIHRoZSBmaW5hbCB3aWR0aFxuICAgICAgICBpID09PSBsYXN0SW5kZXggLSAxICYmIHRvdGFsV2lkdGggKyBnZXRJdGVtV2lkdGgobGFzdEluZGV4KSA8PSBtZXJnZWRDb250YWluZXJXaWR0aCkge1xuICAgICAgICAgIC8vIEFkZGl0aW9uYWwgY2hlY2sgaWYgbWF0Y2ggdGhlIGVuZFxuICAgICAgICAgIHVwZGF0ZURpc3BsYXlDb3VudChsYXN0SW5kZXgpO1xuICAgICAgICAgIHNldFN1ZmZpeEZpeGVkU3RhcnQobnVsbCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH0gZWxzZSBpZiAodG90YWxXaWR0aCArIG1lcmdlZFJlc3RXaWR0aCA+IG1lcmdlZENvbnRhaW5lcldpZHRoKSB7XG4gICAgICAgICAgLy8gQ2FuIG5vdCBob2xkIGFsbCB0aGUgY29udGVudCB0byBzaG93IHJlc3RcbiAgICAgICAgICB1cGRhdGVEaXNwbGF5Q291bnQoaSAtIDEpO1xuICAgICAgICAgIHNldFN1ZmZpeEZpeGVkU3RhcnQodG90YWxXaWR0aCAtIGN1cnJlbnRJdGVtV2lkdGggLSBzdWZmaXhXaWR0aCArIHJlc3RXaWR0aCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHN1ZmZpeCAmJiBnZXRJdGVtV2lkdGgoMCkgKyBzdWZmaXhXaWR0aCA+IG1lcmdlZENvbnRhaW5lcldpZHRoKSB7XG4gICAgICAgIHNldFN1ZmZpeEZpeGVkU3RhcnQobnVsbCk7XG4gICAgICB9XG4gICAgfVxuICB9LCBbbWVyZ2VkQ29udGFpbmVyV2lkdGgsIGl0ZW1XaWR0aHMsIHJlc3RXaWR0aCwgc3VmZml4V2lkdGgsIGdldEtleSwgbWVyZ2VkRGF0YV0pOyAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSBSZW5kZXIgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICB2YXIgZGlzcGxheVJlc3QgPSByZXN0UmVhZHkgJiYgISFvbWl0dGVkSXRlbXMubGVuZ3RoO1xuICB2YXIgc3VmZml4U3R5bGUgPSB7fTtcblxuICBpZiAoc3VmZml4Rml4ZWRTdGFydCAhPT0gbnVsbCAmJiBzaG91bGRSZXNwb25zaXZlKSB7XG4gICAgc3VmZml4U3R5bGUgPSB7XG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIGxlZnQ6IHN1ZmZpeEZpeGVkU3RhcnQsXG4gICAgICB0b3A6IDBcbiAgICB9O1xuICB9XG5cbiAgdmFyIGl0ZW1TaGFyZWRQcm9wcyA9IHtcbiAgICBwcmVmaXhDbHM6IGl0ZW1QcmVmaXhDbHMsXG4gICAgcmVzcG9uc2l2ZTogc2hvdWxkUmVzcG9uc2l2ZSxcbiAgICBjb21wb25lbnQ6IGl0ZW1Db21wb25lbnQsXG4gICAgaW52YWxpZGF0ZTogaW52YWxpZGF0ZVxuICB9OyAvLyA+Pj4+PiBDaG9pY2UgcmVuZGVyIGZ1biBieSBgcmVuZGVyUmF3SXRlbWBcblxuICB2YXIgaW50ZXJuYWxSZW5kZXJJdGVtTm9kZSA9IHJlbmRlclJhd0l0ZW0gPyBmdW5jdGlvbiAoaXRlbSwgaW5kZXgpIHtcbiAgICB2YXIga2V5ID0gZ2V0S2V5KGl0ZW0sIGluZGV4KTtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoT3ZlcmZsb3dDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICBrZXk6IGtleSxcbiAgICAgIHZhbHVlOiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGl0ZW1TaGFyZWRQcm9wcyksIHt9LCB7XG4gICAgICAgIG9yZGVyOiBpbmRleCxcbiAgICAgICAgaXRlbTogaXRlbSxcbiAgICAgICAgaXRlbUtleToga2V5LFxuICAgICAgICByZWdpc3RlclNpemU6IHJlZ2lzdGVyU2l6ZSxcbiAgICAgICAgZGlzcGxheTogaW5kZXggPD0gbWVyZ2VkRGlzcGxheUNvdW50XG4gICAgICB9KVxuICAgIH0sIHJlbmRlclJhd0l0ZW0oaXRlbSwgaW5kZXgpKTtcbiAgfSA6IGZ1bmN0aW9uIChpdGVtLCBpbmRleCkge1xuICAgIHZhciBrZXkgPSBnZXRLZXkoaXRlbSwgaW5kZXgpO1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChJdGVtLCBfZXh0ZW5kcyh7fSwgaXRlbVNoYXJlZFByb3BzLCB7XG4gICAgICBvcmRlcjogaW5kZXgsXG4gICAgICBrZXk6IGtleSxcbiAgICAgIGl0ZW06IGl0ZW0sXG4gICAgICByZW5kZXJJdGVtOiBtZXJnZWRSZW5kZXJJdGVtLFxuICAgICAgaXRlbUtleToga2V5LFxuICAgICAgcmVnaXN0ZXJTaXplOiByZWdpc3RlclNpemUsXG4gICAgICBkaXNwbGF5OiBpbmRleCA8PSBtZXJnZWREaXNwbGF5Q291bnRcbiAgICB9KSk7XG4gIH07IC8vID4+Pj4+IFJlc3Qgbm9kZVxuXG4gIHZhciByZXN0Tm9kZTtcbiAgdmFyIHJlc3RDb250ZXh0UHJvcHMgPSB7XG4gICAgb3JkZXI6IGRpc3BsYXlSZXN0ID8gbWVyZ2VkRGlzcGxheUNvdW50IDogTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIsXG4gICAgY2xhc3NOYW1lOiBcIlwiLmNvbmNhdChpdGVtUHJlZml4Q2xzLCBcIi1yZXN0XCIpLFxuICAgIHJlZ2lzdGVyU2l6ZTogcmVnaXN0ZXJPdmVyZmxvd1NpemUsXG4gICAgZGlzcGxheTogZGlzcGxheVJlc3RcbiAgfTtcblxuICBpZiAoIXJlbmRlclJhd1Jlc3QpIHtcbiAgICB2YXIgbWVyZ2VkUmVuZGVyUmVzdCA9IHJlbmRlclJlc3QgfHwgZGVmYXVsdFJlbmRlclJlc3Q7XG4gICAgcmVzdE5vZGUgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChJdGVtLCBfZXh0ZW5kcyh7fSwgaXRlbVNoYXJlZFByb3BzLCByZXN0Q29udGV4dFByb3BzKSwgdHlwZW9mIG1lcmdlZFJlbmRlclJlc3QgPT09ICdmdW5jdGlvbicgPyBtZXJnZWRSZW5kZXJSZXN0KG9taXR0ZWRJdGVtcykgOiBtZXJnZWRSZW5kZXJSZXN0KTtcbiAgfSBlbHNlIGlmIChyZW5kZXJSYXdSZXN0KSB7XG4gICAgcmVzdE5vZGUgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChPdmVyZmxvd0NvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIHZhbHVlOiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGl0ZW1TaGFyZWRQcm9wcyksIHJlc3RDb250ZXh0UHJvcHMpXG4gICAgfSwgcmVuZGVyUmF3UmVzdChvbWl0dGVkSXRlbXMpKTtcbiAgfVxuXG4gIHZhciBvdmVyZmxvd05vZGUgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoIWludmFsaWRhdGUgJiYgcHJlZml4Q2xzLCBjbGFzc05hbWUpLFxuICAgIHN0eWxlOiBzdHlsZSxcbiAgICByZWY6IHJlZlxuICB9LCByZXN0UHJvcHMpLCBtZXJnZWREYXRhLm1hcChpbnRlcm5hbFJlbmRlckl0ZW1Ob2RlKSwgc2hvd1Jlc3QgPyByZXN0Tm9kZSA6IG51bGwsIHN1ZmZpeCAmJiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChJdGVtLCBfZXh0ZW5kcyh7fSwgaXRlbVNoYXJlZFByb3BzLCB7XG4gICAgcmVzcG9uc2l2ZTogaXNSZXNwb25zaXZlLFxuICAgIHJlc3BvbnNpdmVEaXNhYmxlZDogIXNob3VsZFJlc3BvbnNpdmUsXG4gICAgb3JkZXI6IG1lcmdlZERpc3BsYXlDb3VudCxcbiAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KGl0ZW1QcmVmaXhDbHMsIFwiLXN1ZmZpeFwiKSxcbiAgICByZWdpc3RlclNpemU6IHJlZ2lzdGVyU3VmZml4U2l6ZSxcbiAgICBkaXNwbGF5OiB0cnVlLFxuICAgIHN0eWxlOiBzdWZmaXhTdHlsZVxuICB9KSwgc3VmZml4KSk7XG5cbiAgaWYgKGlzUmVzcG9uc2l2ZSkge1xuICAgIG92ZXJmbG93Tm9kZSA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlc2l6ZU9ic2VydmVyLCB7XG4gICAgICBvblJlc2l6ZTogb25PdmVyZmxvd1Jlc2l6ZSxcbiAgICAgIGRpc2FibGVkOiAhc2hvdWxkUmVzcG9uc2l2ZVxuICAgIH0sIG92ZXJmbG93Tm9kZSk7XG4gIH1cblxuICByZXR1cm4gb3ZlcmZsb3dOb2RlO1xufVxuXG52YXIgRm9yd2FyZE92ZXJmbG93ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoT3ZlcmZsb3cpO1xuRm9yd2FyZE92ZXJmbG93LmRpc3BsYXlOYW1lID0gJ092ZXJmbG93JztcbkZvcndhcmRPdmVyZmxvdy5JdGVtID0gUmF3SXRlbTtcbkZvcndhcmRPdmVyZmxvdy5SRVNQT05TSVZFID0gUkVTUE9OU0lWRTtcbkZvcndhcmRPdmVyZmxvdy5JTlZBTElEQVRFID0gSU5WQUxJREFURTsgLy8gQ29udmVydCB0byBnZW5lcmljIHR5cGVcblxuZXhwb3J0IGRlZmF1bHQgRm9yd2FyZE92ZXJmbG93OyIsImltcG9ydCBfc2xpY2VkVG9BcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheVwiO1xuaW1wb3J0IHsgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHJhZiBmcm9tIFwicmMtdXRpbC9lcy9yYWZcIjtcbmltcG9ydCB1c2VTdGF0ZSBmcm9tIFwicmMtdXRpbC9lcy9ob29rcy91c2VTdGF0ZVwiO1xuLyoqXG4gKiBTdGF0ZSBnZW5lcmF0ZS4gUmV0dXJuIGEgYHNldFN0YXRlYCBidXQgaXQgd2lsbCBmbHVzaCBhbGwgc3RhdGUgd2l0aCBvbmUgcmVuZGVyIHRvIHNhdmUgcGVyZi5cbiAqIFRoaXMgaXMgbm90IGEgcmVhbGl6YXRpb24gb2YgYHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzYC5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlQmF0Y2hGcmFtZVN0YXRlKCkge1xuICB2YXIgX3VzZVN0YXRlID0gdXNlU3RhdGUoe30pLFxuICAgICAgX3VzZVN0YXRlMiA9IF9zbGljZWRUb0FycmF5KF91c2VTdGF0ZSwgMiksXG4gICAgICBmb3JjZVVwZGF0ZSA9IF91c2VTdGF0ZTJbMV07XG5cbiAgdmFyIHN0YXRlc1JlZiA9IHVzZVJlZihbXSk7XG4gIHZhciB3YWxraW5nSW5kZXggPSAwO1xuICB2YXIgYmVmb3JlRnJhbWVJZCA9IDA7XG5cbiAgZnVuY3Rpb24gY3JlYXRlU3RhdGUoZGVmYXVsdFZhbHVlKSB7XG4gICAgdmFyIG15SW5kZXggPSB3YWxraW5nSW5kZXg7XG4gICAgd2Fsa2luZ0luZGV4ICs9IDE7IC8vIEZpbGwgdmFsdWUgaWYgbm90IGV4aXN0IHlldFxuXG4gICAgaWYgKHN0YXRlc1JlZi5jdXJyZW50Lmxlbmd0aCA8IG15SW5kZXggKyAxKSB7XG4gICAgICBzdGF0ZXNSZWYuY3VycmVudFtteUluZGV4XSA9IGRlZmF1bHRWYWx1ZTtcbiAgICB9IC8vIFJldHVybiBmaWxsZWQgYXMgYHNldFN0YXRlYFxuXG5cbiAgICB2YXIgdmFsdWUgPSBzdGF0ZXNSZWYuY3VycmVudFtteUluZGV4XTtcblxuICAgIGZ1bmN0aW9uIHNldFZhbHVlKHZhbCkge1xuICAgICAgc3RhdGVzUmVmLmN1cnJlbnRbbXlJbmRleF0gPSB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nID8gdmFsKHN0YXRlc1JlZi5jdXJyZW50W215SW5kZXhdKSA6IHZhbDtcbiAgICAgIHJhZi5jYW5jZWwoYmVmb3JlRnJhbWVJZCk7IC8vIEZsdXNoIHdpdGggYmF0Y2hcblxuICAgICAgYmVmb3JlRnJhbWVJZCA9IHJhZihmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvcmNlVXBkYXRlKHt9LCB0cnVlKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBbdmFsdWUsIHNldFZhbHVlXTtcbiAgfVxuXG4gIHJldHVybiBjcmVhdGVTdGF0ZTtcbn0iLCJpbXBvcnQgT3ZlcmZsb3cgZnJvbSAnLi9PdmVyZmxvdyc7XG5leHBvcnQgZGVmYXVsdCBPdmVyZmxvdzsiXSwibmFtZXMiOlsiSE9PS19NQVJLIiwid2FybmluZ0Z1bmMiLCJ3YXJuaW5nIiwiZ2V0RmllbGRWYWx1ZSIsImdldEZpZWxkc1ZhbHVlIiwiZ2V0RmllbGRFcnJvciIsImdldEZpZWxkV2FybmluZyIsImdldEZpZWxkc0Vycm9yIiwiaXNGaWVsZHNUb3VjaGVkIiwiaXNGaWVsZFRvdWNoZWQiLCJpc0ZpZWxkVmFsaWRhdGluZyIsImlzRmllbGRzVmFsaWRhdGluZyIsInJlc2V0RmllbGRzIiwic2V0RmllbGRzIiwic2V0RmllbGRzVmFsdWUiLCJ2YWxpZGF0ZUZpZWxkcyIsInN1Ym1pdCIsImdldEludGVybmFsSG9va3MiLCJkaXNwYXRjaCIsImluaXRFbnRpdHlWYWx1ZSIsInJlZ2lzdGVyRmllbGQiLCJ1c2VTdWJzY3JpYmUiLCJzZXRJbml0aWFsVmFsdWVzIiwiZGVzdHJveUZvcm0iLCJzZXRDYWxsYmFja3MiLCJyZWdpc3RlcldhdGNoIiwiZ2V0RmllbGRzIiwic2V0VmFsaWRhdGVNZXNzYWdlcyIsInNldFByZXNlcnZlIiwiZ2V0SW5pdGlhbFZhbHVlIiwidmFsdWUiLCJBcnJheSIsImlzQXJyYXkiLCJ0eXBlVGVtcGxhdGUiLCJkZWZhdWx0VmFsaWRhdGVNZXNzYWdlcyIsImRlZmF1bHQiLCJyZXF1aXJlZCIsImVudW0iLCJ3aGl0ZXNwYWNlIiwiZGF0ZSIsImZvcm1hdCIsInBhcnNlIiwiaW52YWxpZCIsInR5cGVzIiwic3RyaW5nIiwibWV0aG9kIiwiYXJyYXkiLCJvYmplY3QiLCJudW1iZXIiLCJib29sZWFuIiwiaW50ZWdlciIsImZsb2F0IiwicmVnZXhwIiwiZW1haWwiLCJ1cmwiLCJoZXgiLCJsZW4iLCJtaW4iLCJtYXgiLCJyYW5nZSIsInBhdHRlcm4iLCJtaXNtYXRjaCIsImNsb25lRGVlcCIsInZhbCIsIm1hcCIsIml0ZW0iLCJjbG9uZUFycmF5RGVlcCIsIk9iamVjdCIsImdldFByb3RvdHlwZU9mIiwicHJvdG90eXBlIiwicmVzIiwia2V5IiwiY2xvbmVPYmplY3REZWVwIiwiZ2V0TmFtZVBhdGgiLCJwYXRoIiwiZ2V0VmFsdWUiLCJzdG9yZSIsIm5hbWVQYXRoIiwiZ2V0Iiwic2V0VmFsdWUiLCJyZW1vdmVJZlVuZGVmaW5lZCIsImFyZ3VtZW50cyIsImxlbmd0aCIsInVuZGVmaW5lZCIsIm5ld1N0b3JlIiwic2V0IiwiY2xvbmVCeU5hbWVQYXRoTGlzdCIsIm5hbWVQYXRoTGlzdCIsImZvckVhY2giLCJjb250YWluc05hbWVQYXRoIiwic29tZSIsIm1hdGNoTmFtZVBhdGgiLCJpc09iamVjdCIsIm9iaiIsImludGVybmFsU2V0VmFsdWVzIiwidmFsdWVzIiwia2V5cyIsInByZXZWYWx1ZSIsInJlY3Vyc2l2ZSIsInNldFZhbHVlcyIsIl9sZW4iLCJyZXN0VmFsdWVzIiwiX2tleSIsInJlZHVjZSIsImN1cnJlbnQiLCJjaGFuZ2VkTmFtZVBhdGgiLCJldmVyeSIsIm5hbWVVbml0IiwiaSIsImRlZmF1bHRHZXRWYWx1ZUZyb21FdmVudCIsInZhbHVlUHJvcE5hbWUiLCJldmVudCIsInRhcmdldCIsIm1vdmVJbmRleCIsInRvSW5kZXgiLCJkaWZmIiwiY29uY2F0Iiwic2xpY2UiLCJBc3luY1ZhbGlkYXRvciIsInJlcGxhY2VNZXNzYWdlIiwidGVtcGxhdGUiLCJrdiIsInJlcGxhY2UiLCJzdHIiLCJDT0RFX0xPR0lDX0VSUk9SIiwidmFsaWRhdGVSdWxlIiwiX3giLCJfeDIiLCJfeDMiLCJfeDQiLCJfeDUiLCJfdmFsaWRhdGVSdWxlIiwiYXBwbHkiLCJ0aGlzIiwibWFyayIsIl9jYWxsZWUyIiwibmFtZSIsInJ1bGUiLCJvcHRpb25zIiwibWVzc2FnZVZhcmlhYmxlcyIsImNsb25lUnVsZSIsIm9yaWdpblZhbGlkYXRvciIsInN1YlJ1bGVGaWVsZCIsInZhbGlkYXRvciIsIm1lc3NhZ2VzIiwicmVzdWx0Iiwic3ViUmVzdWx0cyIsImZpbGxWYXJpYWJsZVJlc3VsdCIsIndyYXAiLCJfY29udGV4dDIiLCJwcmV2IiwibmV4dCIsInJ1bGVJbmRleCIsImVycm9yIiwiY29uc29sZSIsIlByb21pc2UiLCJyZWplY3QiLCJ0eXBlIiwiZGVmYXVsdEZpZWxkIiwidmFsaWRhdGVNZXNzYWdlcyIsInJlc29sdmUiLCJ2YWxpZGF0ZSIsInQwIiwiZXJyb3JzIiwiX3JlZjQiLCJpbmRleCIsIm1lc3NhZ2UiLCJtZXJnZWRNZXNzYWdlIiwiYWxsIiwic3ViVmFsdWUiLCJzZW50IiwiYWJydXB0Iiwiam9pbiIsInN0b3AiLCJfZmluaXNoT25BbGxGYWlsZWQiLCJfY2FsbGVlMyIsInJ1bGVQcm9taXNlcyIsIl9jb250ZXh0MyIsInRoZW4iLCJlcnJvcnNMaXN0IiwiX3JlZjUiLCJfZmluaXNoT25GaXJzdEZhaWxlZCIsIl9jYWxsZWU0IiwiY291bnQiLCJfY29udGV4dDQiLCJwcm9taXNlIiwicnVsZUVycm9yIiwiX2V4Y2x1ZGVkIiwiRU1QVFlfRVJST1JTIiwicmVxdWlyZVVwZGF0ZSIsInNob3VsZFVwZGF0ZSIsIm5leHRWYWx1ZSIsImluZm8iLCJzb3VyY2UiLCJGaWVsZCIsIl9SZWFjdCRDb21wb25lbnQiLCJfc3VwZXIiLCJwcm9wcyIsIl90aGlzIiwiY2FsbCIsInN0YXRlIiwicmVzZXRDb3VudCIsImNhbmNlbFJlZ2lzdGVyRnVuYyIsIm1vdW50ZWQiLCJ0b3VjaGVkIiwiZGlydHkiLCJ2YWxpZGF0ZVByb21pc2UiLCJwcmV2VmFsaWRhdGluZyIsIndhcm5pbmdzIiwiY2FuY2VsUmVnaXN0ZXIiLCJfdGhpcyRwcm9wcyIsInByZXNlcnZlIiwiaXNMaXN0RmllbGQiLCJfdGhpcyRwcm9wczIiLCJfZmllbGRDb250ZXh0JHByZWZpeE4iLCJmaWVsZENvbnRleHQiLCJwcmVmaXhOYW1lIiwiZ2V0UnVsZXMiLCJfdGhpcyRwcm9wczMiLCJfdGhpcyRwcm9wczMkcnVsZXMiLCJydWxlcyIsInJlZnJlc2giLCJzZXRTdGF0ZSIsIl9yZWYiLCJ0cmlnZ2VyTWV0YUV2ZW50IiwiZGVzdHJveSIsIm9uTWV0YUNoYW5nZSIsImdldE1ldGEiLCJvblN0b3JlQ2hhbmdlIiwicHJldlN0b3JlIiwiX3RoaXMkcHJvcHM0IiwiX3RoaXMkcHJvcHM0JGRlcGVuZGVuIiwiZGVwZW5kZW5jaWVzIiwib25SZXNldCIsImN1clZhbHVlIiwibmFtZVBhdGhNYXRjaCIsInJlUmVuZGVyIiwiZGF0YSIsInZhbGlkYXRpbmciLCJkZXBlbmRlbmN5IiwicmVsYXRlZEZpZWxkcyIsInZhbGlkYXRlUnVsZXMiLCJjdXJyZW50VmFsdWUiLCJyb290UHJvbWlzZSIsIl90aGlzJHByb3BzNSIsIl90aGlzJHByb3BzNSR2YWxpZGF0ZSIsInZhbGlkYXRlRmlyc3QiLCJ0cmlnZ2VyTmFtZSIsImZpbHRlcmVkUnVsZXMiLCJmaWx0ZXIiLCJ2YWxpZGF0ZVRyaWdnZXIiLCJpbmNsdWRlcyIsInN1bW1hcnlQcm9taXNlIiwiZmlsbGVkUnVsZXMiLCJjdXJyZW50UnVsZSIsIm9yaWdpblZhbGlkYXRvckZ1bmMiLCJjYWxsYmFjayIsImhhc1Byb21pc2UiLCJhcmdzIiwiY2F0Y2giLCJlcnIiLCJzb3J0IiwiX3JlZjIiLCJ3MSIsIndhcm5pbmdPbmx5IiwiaTEiLCJ3MiIsImkyIiwiX3JlZjMiLCJfY2FsbGVlIiwiX2NvbnRleHQiLCJfeDYiLCJfeDciLCJfeDkiLCJmaW5pc2hPbkZpcnN0RmFpbGVkIiwiX3g4IiwiZmluaXNoT25BbGxGYWlsZWQiLCJlIiwicnVsZUVycm9ycyIsIm5leHRFcnJvcnMiLCJuZXh0V2FybmluZ3MiLCJfcmVmMyRlcnJvcnMiLCJwdXNoIiwiaXNGaWVsZERpcnR5IiwiaW5pdGlhbFZhbHVlIiwiZ2V0RXJyb3JzIiwiZ2V0V2FybmluZ3MiLCJpc0xpc3QiLCJpc1ByZXNlcnZlIiwiZ2V0T25seUNoaWxkIiwiY2hpbGRyZW4iLCJtZXRhIiwiZ2V0Q29udHJvbGxlZCIsImlzRnVuY3Rpb24iLCJjaGlsZExpc3QiLCJjaGlsZCIsImNoaWxkUHJvcHMiLCJfdGhpcyRwcm9wczYiLCJ0cmlnZ2VyIiwiZ2V0VmFsdWVGcm9tRXZlbnQiLCJub3JtYWxpemUiLCJnZXRWYWx1ZVByb3BzIiwibWVyZ2VkVmFsaWRhdGVUcmlnZ2VyIiwiX2dldEludGVybmFsSG9va3MiLCJtZXJnZWRHZXRWYWx1ZVByb3BzIiwib3JpZ2luVHJpZ2dlckZ1bmMiLCJjb250cm9sIiwibmV3VmFsdWUiLCJ2YWxpZGF0ZVRyaWdnZXJMaXN0Iiwib3JpZ2luVHJpZ2dlciIsIl90aGlzJHByb3BzNyIsImZvcmNlVXBkYXRlIiwicmV0dXJuQ2hpbGROb2RlIiwiX3RoaXMkZ2V0T25seUNoaWxkIiwiY29udGV4dFR5cGUiLCJGaWVsZENvbnRleHQiLCJkZWZhdWx0UHJvcHMiLCJyZXN0UHJvcHMiLCJjb250ZXh0Iiwia2V5TWFuYWdlciIsImlkIiwicGFyZW50UHJlZml4TmFtZSIsImxpc3RDb250ZXh0IiwiZ2V0S2V5IiwicGF0aE5hbWUiLCJQcm92aWRlciIsIl9yZWYzJHZhbHVlIiwib25DaGFuZ2UiLCJnZXROZXdWYWx1ZSIsIm9wZXJhdGlvbnMiLCJhZGQiLCJkZWZhdWx0VmFsdWUiLCJyZW1vdmUiLCJpbmRleFNldCIsIlNldCIsInNpemUiLCJfIiwia2V5c0luZGV4IiwiaGFzIiwidmFsdWVJbmRleCIsIm1vdmUiLCJmcm9tIiwidG8iLCJsaXN0VmFsdWUiLCJfXyIsIlNQTElUIiwiY2VsbCIsIk5hbWVNYXAiLCJrdnMiLCJNYXAiLCJ1cGRhdGVyIiwiZGVsZXRlIiwiZW50cmllcyIsImNlbGxzIiwic3BsaXQiLCJfY2VsbCRtYXRjaCIsIm1hdGNoIiwiX2NlbGwkbWF0Y2gyIiwidW5pdCIsIk51bWJlciIsImpzb24iLCJGb3JtU3RvcmUiLCJmb3JjZVJvb3RVcGRhdGUiLCJmb3JtSG9va2VkIiwic3Vic2NyaWJhYmxlIiwiZmllbGRFbnRpdGllcyIsImluaXRpYWxWYWx1ZXMiLCJjYWxsYmFja3MiLCJsYXN0VmFsaWRhdGVQcm9taXNlIiwiZ2V0Rm9ybSIsIl9pbml0IiwicHJldldpdGhvdXRQcmVzZXJ2ZXMiLCJpbml0IiwiX3RoaXMkcHJldldpdGhvdXRQcmVzIiwibmV4dFN0b3JlIiwidXBkYXRlU3RvcmUiLCJnZXRGaWVsZEVudGl0aWVzIiwiZW50aXR5IiwiaXNNZXJnZWRQcmVzZXJ2ZSIsImluaXRWYWx1ZSIsIndhdGNoTGlzdCIsImZuIiwibm90aWZ5V2F0Y2giLCJ0aW1lb3V0SWQiLCJ3YXJuaW5nVW5ob29rZWQiLCJwdXJlIiwiZmllbGQiLCJnZXRGaWVsZHNNYXAiLCJjYWNoZSIsImdldEZpZWxkRW50aXRpZXNGb3JOYW1lUGF0aExpc3QiLCJuYW1lTGlzdCIsIklOVkFMSURBVEVfTkFNRV9QQVRIIiwiZmlsdGVyRnVuYyIsImZpbHRlcmVkTmFtZUxpc3QiLCJfZW50aXR5JGlzTGlzdEZpZWxkIiwiYXJnMCIsImFyZzEiLCJpc0FsbEZpZWxkc1RvdWNoZWQiLCJzaG9ydE5hbWVQYXRoIiwiZmllbGROYW1lUGF0aCIsInVwZGF0ZSIsImxpc3QiLCJpc05hbWVQYXRoTGlzdFRvdWNoZWQiLCJlbnRpdGllcyIsIm5hbWVQYXRoTGlzdEVudGl0aWVzIiwidGVzdEZpZWxkIiwicmVzZXRXaXRoRmllbGRJbml0aWFsVmFsdWUiLCJyZWNvcmRzIiwicmVxdWlyZWRGaWVsZEVudGl0aWVzIiwicmVzZXRXaXRoRmllbGRzIiwib3JpZ2luVmFsdWUiLCJza2lwRXhpc3QiLCJfcmVxdWlyZWRGaWVsZEVudGl0aWUiLCJyIiwibm90aWZ5T2JzZXJ2ZXJzIiwiZmllbGRzIiwiZmllbGREYXRhIiwiZGVmaW5lUHJvcGVydHkiLCJmaWVsZFByZXNlcnZlIiwibWVyZ2VkUHJlc2VydmUiLCJzdWJOYW1lUGF0aCIsIl9wcmV2U3RvcmUiLCJ0cmlnZ2VyRGVwZW5kZW5jaWVzVXBkYXRlIiwiYWN0aW9uIiwidXBkYXRlVmFsdWUiLCJfbmFtZVBhdGgiLCJtZXJnZWRJbmZvIiwiY2hpbGRyZW5GaWVsZHMiLCJnZXREZXBlbmRlbmN5Q2hpbGRyZW5GaWVsZHMiLCJvblZhbHVlc0NoYW5nZSIsInRyaWdnZXJPbkZpZWxkc0NoYW5nZSIsInJvb3ROYW1lUGF0aCIsImRlcGVuZGVuY2llczJmaWVsZHMiLCJkZXBlbmRlbmN5TmFtZVBhdGgiLCJmaWxsQ2hpbGRyZW4iLCJmaWxlZEVycm9ycyIsIm9uRmllbGRzQ2hhbmdlIiwiZmllbGROYW1lIiwicHJvdmlkZU5hbWVMaXN0IiwicHJvbWlzZUxpc3QiLCJtZXJnZWRFcnJvcnMiLCJtZXJnZWRXYXJuaW5ncyIsIl9yZWY2IiwiaGFzRXJyb3IiLCJyZXN1bHRzIiwiYWxsUHJvbWlzZUZpbmlzaCIsInJlc3VsdE5hbWVQYXRoTGlzdCIsIl9yZWY3IiwicmV0dXJuUHJvbWlzZSIsImVycm9yTGlzdCIsImVycm9yRmllbGRzIiwib3V0T2ZEYXRlIiwib25GaW5pc2giLCJvbkZpbmlzaEZhaWxlZCIsImZvcm0iLCJmb3JtUmVmIiwiX1JlYWN0JHVzZVN0YXRlIiwiZm9ybVN0b3JlIiwiRm9ybUNvbnRleHQiLCJ0cmlnZ2VyRm9ybUNoYW5nZSIsInRyaWdnZXJGb3JtRmluaXNoIiwicmVnaXN0ZXJGb3JtIiwidW5yZWdpc3RlckZvcm0iLCJGb3JtUHJvdmlkZXIiLCJvbkZvcm1DaGFuZ2UiLCJvbkZvcm1GaW5pc2giLCJmb3JtQ29udGV4dCIsImZvcm1zUmVmIiwiY2hhbmdlZEZpZWxkcyIsImZvcm1zIiwibmV3Rm9ybXMiLCJyZWYiLCJfcmVmJGNvbXBvbmVudCIsImNvbXBvbmVudCIsIkNvbXBvbmVudCIsIl9yZWYkdmFsaWRhdGVUcmlnZ2VyIiwiX29uRmllbGRzQ2hhbmdlIiwiX29uRmluaXNoIiwiX3VzZUZvcm0iLCJmb3JtSW5zdGFuY2UiLCJfZm9ybUluc3RhbmNlJGdldEludGUiLCJyZXN0IiwiY2hpbGRyZW5Ob2RlIiwibW91bnRSZWYiLCJjaGlsZHJlblJlbmRlclByb3BzIiwicHJldkZpZWxkc1JlZiIsInNvdXJjZUtleXMiLCJ0YXJnZXRLZXlzIiwic291cmNlVmFsdWUiLCJ0YXJnZXRWYWx1ZSIsImlzU2ltaWxhciIsImZvcm1Db250ZXh0VmFsdWUiLCJ3cmFwcGVyTm9kZSIsIm9uU3VibWl0IiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJfcmVzdFByb3BzJG9uUmVzZXQiLCJzdHJpbmdpZnkiLCJKU09OIiwiTWF0aCIsInJhbmRvbSIsIl91c2VTdGF0ZSIsInVzZVN0YXRlIiwiX3VzZVN0YXRlMiIsInZhbHVlU3RyIiwidXNlTWVtbyIsInZhbHVlU3RyUmVmIiwidXNlUmVmIiwidXNlQ29udGV4dCIsImlzVmFsaWRGb3JtIiwibmFtZVBhdGhSZWYiLCJ1c2VFZmZlY3QiLCJuZXh0VmFsdWVTdHIiLCJSZWZGb3JtIiwiTGlzdCIsInVzZUZvcm0iLCJ1c2VXYXRjaCIsInN1cHBvcnRCaWdJbnQiLCJCaWdJbnQiLCJ0cmltTnVtYmVyIiwibnVtU3RyIiwidHJpbSIsIm5lZ2F0aXZlIiwic3RhcnRzV2l0aCIsInRyaW1TdHIiLCJzcGxpdE51bWJlciIsImludGVnZXJTdHIiLCJkZWNpbWFsU3RyIiwibmVnYXRpdmVTdHIiLCJmdWxsU3RyIiwiaXNFIiwiU3RyaW5nIiwiaXNOYU4iLCJnZXROdW1iZXJQcmVjaXNpb24iLCJwcmVjaXNpb24iLCJpbmRleE9mIiwiZGVjaW1hbE1hdGNoIiwidmFsaWRhdGVOdW1iZXIiLCJudW0yc3RyIiwiTUFYX1NBRkVfSU5URUdFUiIsInRvU3RyaW5nIiwiTUlOX1NBRkVfSU5URUdFUiIsInRvRml4ZWQiLCJudW0iLCJ0ZXN0IiwiTnVtYmVyRGVjaW1hbCIsIm9yaWdpbiIsImVtcHR5IiwidG9OdW1iZXIiLCJpc0ludmFsaWRhdGUiLCJtYXhQcmVjaXNpb24iLCJpc0VtcHR5IiwibmVnYXRlIiwic2FmZSIsIkJpZ0ludERlY2ltYWwiLCJkZWNpbWFsIiwiZGVjaW1hbExlbiIsIm5hbiIsIm1lcmdlZFZhbHVlIiwidHJpbVJldCIsIm51bWJlcnMiLCJwYWRTdGFydCIsImRlY2ltYWxMZW5ndGgiLCJnZXRNYXJrIiwiZ2V0SW50ZWdlclN0ciIsImdldERlY2ltYWxTdHIiLCJwYWRFbmQiLCJjbG9uZSIsIm9mZnNldCIsIm1heERlY2ltYWxMZW5ndGgiLCJfdHJpbU51bWJlciIsImFsaWduRGVjaW1hbCIsImh5ZHJhdGVWYWx1ZVN0ciIsIk5hTiIsImdldE1pbmlEZWNpbWFsIiwic2VwYXJhdG9yU3RyIiwiX3RyaW1OdW1iZXIyIiwicHJlY2lzaW9uRGVjaW1hbFN0ciIsIm51bWJlcldpdGhvdXREZWNpbWFsIiwiYWR2YW5jZWROdW0iLCJyZXBlYXQiLCJTdGVwSGFuZGxlciIsInByZWZpeENscyIsInVwTm9kZSIsImRvd25Ob2RlIiwidXBEaXNhYmxlZCIsImRvd25EaXNhYmxlZCIsIm9uU3RlcCIsInN0ZXBUaW1lb3V0UmVmIiwib25TdGVwUmVmIiwib25TdGVwTW91c2VEb3duIiwidXAiLCJzZXRUaW1lb3V0IiwibG9vcFN0ZXAiLCJvblN0b3BTdGVwIiwiY2xlYXJUaW1lb3V0IiwiaXNNb2JpbGUiLCJoYW5kbGVyQ2xhc3NOYW1lIiwidXBDbGFzc05hbWUiLCJkb3duQ2xhc3NOYW1lIiwic2hhcmVkSGFuZGxlclByb3BzIiwidW5zZWxlY3RhYmxlIiwicm9sZSIsIm9uTW91c2VVcCIsIm9uTW91c2VMZWF2ZSIsImNsYXNzTmFtZSIsIm9uTW91c2VEb3duIiwidXNlTGF5b3V0RWZmZWN0IiwidXNlVXBkYXRlRWZmZWN0IiwiY29uZGl0aW9uIiwiaW5pdFJlZiIsImdldERlY2ltYWxWYWx1ZSIsInN0cmluZ01vZGUiLCJkZWNpbWFsVmFsdWUiLCJnZXREZWNpbWFsSWZWYWxpZGF0ZSIsIklucHV0TnVtYmVyIiwiX2NsYXNzTmFtZXMiLCJfcHJvcHMkcHJlZml4Q2xzIiwic3R5bGUiLCJfcHJvcHMkc3RlcCIsInN0ZXAiLCJkaXNhYmxlZCIsInJlYWRPbmx5IiwidXBIYW5kbGVyIiwiZG93bkhhbmRsZXIiLCJrZXlib2FyZCIsIl9wcm9wcyRjb250cm9scyIsImNvbnRyb2xzIiwicGFyc2VyIiwiZm9ybWF0dGVyIiwiZGVjaW1hbFNlcGFyYXRvciIsIm9uSW5wdXQiLCJvblByZXNzRW50ZXIiLCJpbnB1dFByb3BzIiwiaW5wdXRDbGFzc05hbWUiLCJpbnB1dFJlZiIsIl9SZWFjdCR1c2VTdGF0ZTIiLCJmb2N1cyIsInNldEZvY3VzIiwidXNlclR5cGluZ1JlZiIsImNvbXBvc2l0aW9uUmVmIiwiX1JlYWN0JHVzZVN0YXRlMyIsIl9SZWFjdCR1c2VTdGF0ZTQiLCJzZXREZWNpbWFsVmFsdWUiLCJnZXRQcmVjaXNpb24iLCJ1c2VyVHlwaW5nIiwibWVyZ2VkUGFyc2VyIiwicGFyc2VkU3RyIiwiaW5wdXRWYWx1ZVJlZiIsIm1lcmdlZEZvcm1hdHRlciIsImlucHV0IiwibWVyZ2VkUHJlY2lzaW9uIiwiX1JlYWN0JHVzZVN0YXRlNSIsIl9SZWFjdCR1c2VTdGF0ZTYiLCJpbnB1dFZhbHVlIiwic2V0SW50ZXJuYWxJbnB1dFZhbHVlIiwic2V0SW5wdXRWYWx1ZSIsImZvY3VzZWQiLCJzZWxlY3Rpb25SZWYiLCJpZFJlZiIsImNsZWFuVXAiLCJtYXhEZWNpbWFsIiwibWluRGVjaW1hbCIsImxlc3NFcXVhbHMiLCJfdXNlQ3Vyc29yIiwic3RhcnQiLCJzZWxlY3Rpb25TdGFydCIsImVuZCIsInNlbGVjdGlvbkVuZCIsImJlZm9yZVR4dCIsInN1YnN0cmluZyIsImFmdGVyVHh0IiwiX3NlbGVjdGlvblJlZiRjdXJyZW50Iiwic3RhcnRQb3MiLCJlbmRzV2l0aCIsImJlZm9yZUxhc3RDaGFyIiwibmV3SW5kZXgiLCJzZXRTZWxlY3Rpb25SYW5nZSIsIl91c2VDdXJzb3IyIiwicmVjb3JkQ3Vyc29yIiwicmVzdG9yZUN1cnNvciIsImdldFJhbmdlVmFsdWUiLCJpc0luUmFuZ2UiLCJ0cmlnZ2VyVmFsdWVVcGRhdGUiLCJpc1JhbmdlVmFsaWRhdGUiLCJlcXVhbHMiLCJvbk5leHRQcm9taXNlIiwicmFmIiwiY29sbGVjdElucHV0VmFsdWUiLCJpbnB1dFN0ciIsImZpbmFsRGVjaW1hbCIsIm5leHRJbnB1dFN0ciIsIm9uSW50ZXJuYWxTdGVwIiwiX2lucHV0UmVmJGN1cnJlbnQiLCJzdGVwRGVjaW1hbCIsInVwZGF0ZWRWYWx1ZSIsImZsdXNoSW5wdXRWYWx1ZSIsInBhcnNlZFZhbHVlIiwiZm9ybWF0VmFsdWUiLCJjdXJyZW50UGFyc2VkVmFsdWUiLCJvbkZvY3VzIiwib25CbHVyIiwib25LZXlEb3duIiwid2hpY2giLCJLZXlDb2RlIiwib25LZXlVcCIsIm9uQ29tcG9zaXRpb25TdGFydCIsIm9uQ29tcG9zaXRpb25FbmQiLCJhdXRvQ29tcGxldGUiLCJkaXNwbGF5TmFtZSIsIm1ha2VQcmVmaXhNYXAiLCJzdHlsZVByb3AiLCJldmVudE5hbWUiLCJwcmVmaXhlcyIsInRvTG93ZXJDYXNlIiwiZG9tU3VwcG9ydCIsIndpbiIsInZlbmRvclByZWZpeGVzIiwid2luZG93IiwiYW5pbWF0aW9uZW5kIiwidHJhbnNpdGlvbmVuZCIsImFuaW1hdGlvbiIsInRyYW5zaXRpb24iLCJfZG9jdW1lbnQkY3JlYXRlRWxlbWUiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJwcmVmaXhlZEV2ZW50TmFtZXMiLCJnZXRWZW5kb3JQcmVmaXhlZEV2ZW50TmFtZSIsInByZWZpeE1hcCIsInN0eWxlUHJvcExpc3QiLCJoYXNPd25Qcm9wZXJ0eSIsImludGVybmFsQW5pbWF0aW9uRW5kTmFtZSIsImludGVybmFsVHJhbnNpdGlvbkVuZE5hbWUiLCJzdXBwb3J0VHJhbnNpdGlvbiIsImFuaW1hdGlvbkVuZE5hbWUiLCJ0cmFuc2l0aW9uRW5kTmFtZSIsImdldFRyYW5zaXRpb25OYW1lIiwidHJhbnNpdGlvbk5hbWUiLCJ0cmFuc2l0aW9uVHlwZSIsInRvVXBwZXJDYXNlIiwiU1RBVFVTX05PTkUiLCJTVEFUVVNfQVBQRUFSIiwiU1RBVFVTX0VOVEVSIiwiU1RBVFVTX0xFQVZFIiwiU1RFUF9OT05FIiwiU1RFUF9QUkVQQVJFIiwiU1RFUF9TVEFSVCIsIlNURVBfQUNUSVZFIiwiU1RFUF9BQ1RJVkFURUQiLCJjYW5Vc2VEb20iLCJTVEVQX1FVRVVFIiwiaXNBY3RpdmUiLCJ1c2VTdGF0dXMiLCJzdXBwb3J0TW90aW9uIiwidmlzaWJsZSIsImdldEVsZW1lbnQiLCJfcmVmJG1vdGlvbkVudGVyIiwibW90aW9uRW50ZXIiLCJfcmVmJG1vdGlvbkFwcGVhciIsIm1vdGlvbkFwcGVhciIsIl9yZWYkbW90aW9uTGVhdmUiLCJtb3Rpb25MZWF2ZSIsIm1vdGlvbkRlYWRsaW5lIiwibW90aW9uTGVhdmVJbW1lZGlhdGVseSIsIm9uQXBwZWFyUHJlcGFyZSIsIm9uRW50ZXJQcmVwYXJlIiwib25MZWF2ZVByZXBhcmUiLCJvbkFwcGVhclN0YXJ0Iiwib25FbnRlclN0YXJ0Iiwib25MZWF2ZVN0YXJ0Iiwib25BcHBlYXJBY3RpdmUiLCJvbkVudGVyQWN0aXZlIiwib25MZWF2ZUFjdGl2ZSIsIm9uQXBwZWFyRW5kIiwib25FbnRlckVuZCIsIm9uTGVhdmVFbmQiLCJvblZpc2libGVDaGFuZ2VkIiwiYXN5bmNWaXNpYmxlIiwic2V0QXN5bmNWaXNpYmxlIiwiX3VzZVN0YXRlMyIsIl91c2VTdGF0ZTQiLCJzdGF0dXMiLCJzZXRTdGF0dXMiLCJfdXNlU3RhdGU1IiwiX3VzZVN0YXRlNiIsInNldFN0eWxlIiwibW91bnRlZFJlZiIsImRlYWRsaW5lUmVmIiwiZ2V0RG9tRWxlbWVudCIsImFjdGl2ZVJlZiIsIm9uSW50ZXJuYWxNb3Rpb25FbmQiLCJlbGVtZW50IiwiZGVhZGxpbmUiLCJjYW5FbmQiLCJjdXJyZW50QWN0aXZlIiwiX3VzZURvbU1vdGlvbkV2ZW50cyIsImNhY2hlRWxlbWVudFJlZiIsImNhbGxiYWNrUmVmIiwicmVtb3ZlTW90aW9uRXZlbnRzIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImFkZEV2ZW50TGlzdGVuZXIiLCJ1c2VEb21Nb3Rpb25FdmVudHMiLCJwYXRjaE1vdGlvbkV2ZW50cyIsImV2ZW50SGFuZGxlcnMiLCJfdXNlU3RlcFF1ZXVlIiwic2V0U3RlcCIsIl91c2VOZXh0RnJhbWUiLCJuZXh0RnJhbWVSZWYiLCJjYW5jZWxOZXh0RnJhbWUiLCJuZXh0RnJhbWUiLCJkZWxheSIsIm5leHRGcmFtZUlkIiwiaXNDYW5jZWxlZCIsInVzZU5leHRGcmFtZSIsIl91c2VOZXh0RnJhbWUyIiwibmV4dFN0ZXAiLCJkb05leHQiLCJ1c2VTdGVwUXVldWUiLCJuZXdTdGVwIiwib25QcmVwYXJlIiwiX2V2ZW50SGFuZGxlcnMkc3RlcCIsIl91c2VTdGVwUXVldWUyIiwic3RhcnRTdGVwIiwiYWN0aXZlIiwibmV4dFN0YXR1cyIsImlzTW91bnRlZCIsIm1lcmdlZFN0eWxlIiwiRG9tV3JhcHBlciIsImNvbmZpZyIsInRyYW5zaXRpb25TdXBwb3J0IiwiaXNTdXBwb3J0VHJhbnNpdGlvbiIsIm1vdGlvbk5hbWUiLCJDU1NNb3Rpb24iLCJfcHJvcHMkdmlzaWJsZSIsIl9wcm9wcyRyZW1vdmVPbkxlYXZlIiwicmVtb3ZlT25MZWF2ZSIsImZvcmNlUmVuZGVyIiwibGVhdmVkQ2xhc3NOYW1lIiwiZXZlbnRQcm9wcyIsIm5vZGVSZWYiLCJ3cmFwcGVyTm9kZVJlZiIsIl91c2VTdGF0dXMiLCJIVE1MRWxlbWVudCIsImZpbmRET01Ob2RlIiwiX3VzZVN0YXR1czIiLCJzdGF0dXNTdGVwIiwic3RhdHVzU3R5bGUiLCJtZXJnZWRWaXNpYmxlIiwicmVuZGVyZWRSZWYiLCJtb3Rpb25DaGlsZHJlbiIsInNldE5vZGVSZWYiLCJub2RlIiwibWVyZ2VkUHJvcHMiLCJzdGF0dXNTdWZmaXgiLCJkaXNwbGF5IiwiU1RBVFVTX0FERCIsIlNUQVRVU19LRUVQIiwiU1RBVFVTX1JFTU9WRSIsIlNUQVRVU19SRU1PVkVEIiwid3JhcEtleVRvT2JqZWN0Iiwia2V5T2JqIiwicGFyc2VLZXlzIiwiZGlmZktleXMiLCJwcmV2S2V5cyIsImN1cnJlbnRLZXlzIiwiY3VycmVudEluZGV4IiwiY3VycmVudExlbiIsInByZXZLZXlPYmplY3RzIiwiY3VycmVudEtleU9iamVjdHMiLCJoaXQiLCJjdXJyZW50S2V5T2JqIiwiZHVwbGljYXRlZEtleXMiLCJtYXRjaEtleSIsIl9leGNsdWRlZDIiLCJNT1RJT05fUFJPUF9OQU1FUyIsIkNTU01vdGlvbkxpc3QiLCJrZXlFbnRpdGllcyIsInJlbW92ZUtleSIsIm5leHRLZXlFbnRpdGllcyIsIl90aGlzMiIsIl9vblZpc2libGVDaGFuZ2VkIiwib25BbGxSZW1vdmVkIiwibW90aW9uUHJvcHMiLCJwcm9wIiwiY2hhbmdlZFZpc2libGUiLCJwYXJzZWRLZXlPYmplY3RzIiwicHJldkVudGl0eSIsImZpbmQiLCJOb3RpY2UiLCJfQ29tcG9uZW50IiwiY2xvc2VUaW1lciIsImNsb3NlIiwiY2xlYXJDbG9zZVRpbWVyIiwib25DbG9zZSIsIm5vdGljZUtleSIsInN0YXJ0Q2xvc2VUaW1lciIsImR1cmF0aW9uIiwicHJldlByb3BzIiwidXBkYXRlTWFyayIsInJlc3RhcnRDbG9zZVRpbWVyIiwiY2xvc2FibGUiLCJjbG9zZUljb24iLCJvbkNsaWNrIiwiaG9sZGVyIiwiY29tcG9uZW50Q2xhc3MiLCJkYXRhT3JBcmlhQXR0cmlidXRlUHJvcHMiLCJhY2MiLCJzdWJzdHIiLCJvbk1vdXNlRW50ZXIiLCJ0YWJJbmRleCIsInNlZWQiLCJub3ciLCJEYXRlIiwiZ2V0VXVpZCIsIk5vdGlmaWNhdGlvbiIsIm5vdGljZXMiLCJob29rUmVmcyIsIm9yaWdpbk5vdGljZSIsImhvbGRlckNhbGxiYWNrIiwibm90aWNlIiwibWF4Q291bnQiLCJwcmV2aW91c1N0YXRlIiwibm90aWNlSW5kZXgiLCJ2IiwidXBkYXRlZE5vdGljZXMiLCJzcGxpY2UiLCJ1c2VyUGFzc0tleSIsInNoaWZ0IiwiX3JlZjIkbm90aWNlIiwibm90aWNlUHJvcHNNYXAiLCJub3RpY2VLZXlzIiwibm90aWNlUHJvcHMiLCJfbm90aWNlJG9uQ2xvc2UiLCJjb250ZW50IiwibW90aW9uQ2xhc3NOYW1lIiwibW90aW9uU3R5bGUiLCJfdGhpczIkbm90aWNlUHJvcHNNYXAiLCJkaXYiLCJuZXdJbnN0YW5jZSIsInRvcCIsImxlZnQiLCJwcm9wZXJ0aWVzIiwiZ2V0Q29udGFpbmVyIiwiYXBwZW5kQ2hpbGQiLCJib2R5IiwiY2FsbGVkIiwicmVuZGVyIiwibm90aWZpY2F0aW9uIiwicmVtb3ZlTm90aWNlIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwidXNlTm90aWZpY2F0aW9uIiwibm90aWZpY2F0aW9uSW5zdGFuY2UiLCJjcmVhdGVkUmVmIiwiZWxlbWVudHMiLCJzZXRFbGVtZW50cyIsImZpcnN0TW91bnQiLCJub3RpY2VFbGUiLCJvcmlnaW5FbGVtZW50cyIsImZpbmRJbmRleCIsImVsZSIsImNsb25lTGlzdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsImV4cG9ydHMiLCJfZXh0ZW5kczIiLCJfZGVmaW5lUHJvcGVydHkyIiwiX2NsYXNzQ2FsbENoZWNrMiIsIl9jcmVhdGVDbGFzczIiLCJfaW5oZXJpdHMyIiwiX2NyZWF0ZVN1cGVyMiIsIlJlYWN0IiwiX3JlYWN0RG9tIiwiX2NsYXNzbmFtZXMiLCJjcmVhdGVQb3J0YWwiLCJfc2xpY2VkVG9BcnJheTIiLCJfTm90aWNlIiwiX3RvQ29uc3VtYWJsZUFycmF5MiIsIkZyYWdtZW50IiwiVU5ERUZJTkVEIiwiSW50ZXJuYWxJdGVtIiwiaW52YWxpZGF0ZSIsInJlbmRlckl0ZW0iLCJyZXNwb25zaXZlIiwicmVzcG9uc2l2ZURpc2FibGVkIiwicmVnaXN0ZXJTaXplIiwiaXRlbUtleSIsIm9yZGVyIiwiX3Byb3BzJGNvbXBvbmVudCIsIm1lcmdlZEhpZGRlbiIsImludGVybmFsUmVnaXN0ZXJTaXplIiwid2lkdGgiLCJvdmVyZmxvd1N0eWxlIiwiY2hpbGROb2RlIiwib3BhY2l0eSIsImhlaWdodCIsIm92ZXJmbG93WSIsInBvaW50ZXJFdmVudHMiLCJwb3NpdGlvbiIsIm92ZXJmbG93UHJvcHMiLCJpdGVtTm9kZSIsIm9uUmVzaXplIiwib2Zmc2V0V2lkdGgiLCJJdGVtIiwiX2V4Y2x1ZGVkMyIsIkludGVybmFsUmF3SXRlbSIsIk92ZXJmbG93Q29udGV4dCIsIl9yZXN0UHJvcHMiLCJjb250ZXh0Q2xhc3NOYW1lIiwicmVzdENvbnRleHQiLCJSYXdJdGVtIiwiUkVTUE9OU0lWRSIsIklOVkFMSURBVEUiLCJkZWZhdWx0UmVuZGVyUmVzdCIsIm9taXR0ZWRJdGVtcyIsIk92ZXJmbG93IiwiX3Byb3BzJGRhdGEiLCJyZW5kZXJSYXdJdGVtIiwiX3Byb3BzJGl0ZW1XaWR0aCIsIml0ZW1XaWR0aCIsInNzciIsInJlbmRlclJlc3QiLCJyZW5kZXJSYXdSZXN0Iiwic3VmZml4IiwiaXRlbUNvbXBvbmVudCIsIm9uVmlzaWJsZUNoYW5nZSIsImNyZWF0ZVVzZVN0YXRlIiwic3RhdGVzUmVmIiwid2Fsa2luZ0luZGV4IiwiYmVmb3JlRnJhbWVJZCIsIm15SW5kZXgiLCJ1c2VCYXRjaEZyYW1lU3RhdGUiLCJmdWxseVNTUiIsIl9jcmVhdGVVc2VTdGF0ZSIsIl9jcmVhdGVVc2VTdGF0ZTIiLCJjb250YWluZXJXaWR0aCIsInNldENvbnRhaW5lcldpZHRoIiwibWVyZ2VkQ29udGFpbmVyV2lkdGgiLCJfY3JlYXRlVXNlU3RhdGUzIiwiX2NyZWF0ZVVzZVN0YXRlNCIsIml0ZW1XaWR0aHMiLCJzZXRJdGVtV2lkdGhzIiwiX2NyZWF0ZVVzZVN0YXRlNSIsIl9jcmVhdGVVc2VTdGF0ZTYiLCJwcmV2UmVzdFdpZHRoIiwic2V0UHJldlJlc3RXaWR0aCIsIl9jcmVhdGVVc2VTdGF0ZTciLCJfY3JlYXRlVXNlU3RhdGU4IiwicmVzdFdpZHRoIiwic2V0UmVzdFdpZHRoIiwiX2NyZWF0ZVVzZVN0YXRlOSIsIl9jcmVhdGVVc2VTdGF0ZTEwIiwic3VmZml4V2lkdGgiLCJzZXRTdWZmaXhXaWR0aCIsInN1ZmZpeEZpeGVkU3RhcnQiLCJzZXRTdWZmaXhGaXhlZFN0YXJ0IiwiZGlzcGxheUNvdW50Iiwic2V0RGlzcGxheUNvdW50IiwibWVyZ2VkRGlzcGxheUNvdW50IiwicmVzdFJlYWR5Iiwic2V0UmVzdFJlYWR5IiwiaXRlbVByZWZpeENscyIsIm1lcmdlZFJlc3RXaWR0aCIsImlzUmVzcG9uc2l2ZSIsInNob3VsZFJlc3BvbnNpdmUiLCJzaG93UmVzdCIsIm1lcmdlZERhdGEiLCJpdGVtcyIsInVzZUNhbGxiYWNrIiwibWVyZ2VkUmVuZGVySXRlbSIsInVwZGF0ZURpc3BsYXlDb3VudCIsIm5vdFJlYWR5IiwiZ2V0SXRlbVdpZHRoIiwidG90YWxXaWR0aCIsImxhc3RJbmRleCIsImN1cnJlbnRJdGVtV2lkdGgiLCJkaXNwbGF5UmVzdCIsInN1ZmZpeFN0eWxlIiwicmVzdE5vZGUiLCJpdGVtU2hhcmVkUHJvcHMiLCJpbnRlcm5hbFJlbmRlckl0ZW1Ob2RlIiwicmVzdENvbnRleHRQcm9wcyIsIm1lcmdlZFJlbmRlclJlc3QiLCJvdmVyZmxvd05vZGUiLCJjbGllbnRXaWR0aCIsIkZvcndhcmRPdmVyZmxvdyJdLCJzb3VyY2VSb290IjoiIn0=