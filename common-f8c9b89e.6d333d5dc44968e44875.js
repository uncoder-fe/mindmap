"use strict";(self.webpackChunkmindmap=self.webpackChunkmindmap||[]).push([[134],{84348:(e,t,n)=>{n.d(t,{tk:()=>en});var o=n(2376),i=n(59084),s=n(16560);const r="undefined"!=typeof navigator?navigator:null,l="undefined"!=typeof document?document:null,d=r&&r.userAgent||"",a=/Edge\/(\d+)/.exec(d),c=/MSIE \d/.exec(d),h=/Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(d),f=!!(c||h||a),u=c?document.documentMode:h?+h[1]:a?+a[1]:0,p=!f&&/gecko\/(\d+)/i.test(d);p&&(/Firefox\/(\d+)/.exec(d)||[0,0])[1];const m=!f&&/Chrome\/(\d+)/.exec(d),g=!!m,y=m?+m[1]:0,b=!f&&!!r&&/Apple Computer/.test(r.vendor),v=b&&(/Mobile\/\w+/.test(d)||!!r&&r.maxTouchPoints>2),w=v||!!r&&/Mac/.test(r.platform),D=/Android \d/.test(d),N=!!l&&"webkitFontSmoothing"in l.documentElement.style,O=N?+(/\bAppleWebKit\/(\d+)/.exec(navigator.userAgent)||[0,0])[1]:0,S=function(e){for(var t=0;;t++)if(!(e=e.previousSibling))return t},C=function(e){let t=e.assignedSlot||e.parentNode;return t&&11==t.nodeType?t.host:t};let M=null;const x=function(e,t,n){let o=M||(M=document.createRange());return o.setEnd(e,null==n?e.nodeValue.length:n),o.setStart(e,t||0),o},k=function(e,t,n,o){return n&&(A(e,t,n,o,-1)||A(e,t,n,o,1))},T=/^(img|br|input|textarea|hr)$/i;function A(e,t,n,o,i){for(;;){if(e==n&&t==o)return!0;if(t==(i<0?0:P(e))){let n=e.parentNode;if(!n||1!=n.nodeType||E(e)||T.test(e.nodeName)||"false"==e.contentEditable)return!1;t=S(e)+(i<0?0:1),e=n}else{if(1!=e.nodeType)return!1;if("false"==(e=e.childNodes[t+(i<0?-1:0)]).contentEditable)return!1;t=i<0?P(e):0}}}function P(e){return 3==e.nodeType?e.nodeValue.length:e.childNodes.length}function E(e){let t;for(let n=e;n&&!(t=n.pmViewDesc);n=n.parentNode);return t&&t.node&&t.node.isBlock&&(t.dom==e||t.contentDOM==e)}const V=function(e){let t=e.isCollapsed;return t&&g&&e.rangeCount&&!e.getRangeAt(0).collapsed&&(t=!1),t};function B(e,t){let n=document.createEvent("Event");return n.initEvent("keydown",!0,!0),n.keyCode=e,n.key=n.code=t,n}function R(e){return{left:0,right:e.documentElement.clientWidth,top:0,bottom:e.documentElement.clientHeight}}function z(e,t){return"number"==typeof e?e:e[t]}function I(e){let t=e.getBoundingClientRect(),n=t.width/e.offsetWidth||1,o=t.height/e.offsetHeight||1;return{left:t.left,right:t.left+e.clientWidth*n,top:t.top,bottom:t.top+e.clientHeight*o}}function q(e,t,n){let o=e.someProp("scrollThreshold")||0,i=e.someProp("scrollMargin")||5,s=e.dom.ownerDocument;for(let r=n||e.dom;r;r=C(r)){if(1!=r.nodeType)continue;let e=r,n=e==s.body,l=n?R(s):I(e),d=0,a=0;if(t.top<l.top+z(o,"top")?a=-(l.top-t.top+z(i,"top")):t.bottom>l.bottom-z(o,"bottom")&&(a=t.bottom-l.bottom+z(i,"bottom")),t.left<l.left+z(o,"left")?d=-(l.left-t.left+z(i,"left")):t.right>l.right-z(o,"right")&&(d=t.right-l.right+z(i,"right")),d||a)if(n)s.defaultView.scrollBy(d,a);else{let n=e.scrollLeft,o=e.scrollTop;a&&(e.scrollTop+=a),d&&(e.scrollLeft+=d);let i=e.scrollLeft-n,s=e.scrollTop-o;t={left:t.left-i,top:t.top-s,right:t.right-i,bottom:t.bottom-s}}if(n)break}}function L(e){let t=[],n=e.ownerDocument;for(let o=e;o&&(t.push({dom:o,top:o.scrollTop,left:o.scrollLeft}),e!=n);o=C(o));return t}function F(e,t){for(let n=0;n<e.length;n++){let{dom:o,top:i,left:s}=e[n];o.scrollTop!=i+t&&(o.scrollTop=i+t),o.scrollLeft!=s&&(o.scrollLeft=s)}}let $=null;function K(e,t){let n,o,i=2e8,s=0,r=t.top,l=t.top;for(let d=e.firstChild,a=0;d;d=d.nextSibling,a++){let e;if(1==d.nodeType)e=d.getClientRects();else{if(3!=d.nodeType)continue;e=x(d).getClientRects()}for(let c=0;c<e.length;c++){let h=e[c];if(h.top<=r&&h.bottom>=l){r=Math.max(h.bottom,r),l=Math.min(h.top,l);let e=h.left>t.left?h.left-t.left:h.right<t.left?t.left-h.right:0;if(e<i){n=d,i=e,o=e&&3==n.nodeType?{left:h.right<t.left?h.right:h.left,top:t.top}:t,1==d.nodeType&&e&&(s=a+(t.left>=(h.left+h.right)/2?1:0));continue}}!n&&(t.left>=h.right&&t.top>=h.top||t.left>=h.left&&t.top>=h.bottom)&&(s=a+1)}}return n&&3==n.nodeType?function(e,t){let n=e.nodeValue.length,o=document.createRange();for(let i=0;i<n;i++){o.setEnd(e,i+1),o.setStart(e,i);let n=_(o,1);if(n.top!=n.bottom&&W(t,n))return{node:e,offset:i+(t.left>=(n.left+n.right)/2?1:0)}}return{node:e,offset:0}}(n,o):!n||i&&1==n.nodeType?{node:e,offset:s}:K(n,o)}function W(e,t){return e.left>=t.left-1&&e.left<=t.right+1&&e.top>=t.top-1&&e.top<=t.bottom+1}function H(e,t,n){let o=e.childNodes.length;if(o&&n.top<n.bottom)for(let i=Math.max(0,Math.min(o-1,Math.floor(o*(t.top-n.top)/(n.bottom-n.top))-2)),s=i;;){let n=e.childNodes[s];if(1==n.nodeType){let e=n.getClientRects();for(let o=0;o<e.length;o++){let i=e[o];if(W(t,i))return H(n,t,i)}}if((s=(s+1)%o)==i)break}return e}function Y(e,t){let n,o=e.dom.ownerDocument,i=0;if(o.caretPositionFromPoint)try{let e=o.caretPositionFromPoint(t.left,t.top);e&&({offsetNode:n,offset:i}=e)}catch(e){}if(!n&&o.caretRangeFromPoint){let e=o.caretRangeFromPoint(t.left,t.top);e&&({startContainer:n,startOffset:i}=e)}let s,r=(e.root.elementFromPoint?e.root:o).elementFromPoint(t.left,t.top+1);if(!r||!e.dom.contains(1!=r.nodeType?r.parentNode:r)){let n=e.dom.getBoundingClientRect();if(!W(t,n))return null;if(r=H(e.dom,t,n),!r)return null}if(b)for(let e=r;n&&e;e=C(e))e.draggable&&(n=void 0);if(r=function(e,t){let n=e.parentNode;return n&&/^li$/i.test(n.nodeName)&&t.left<e.getBoundingClientRect().left?n:e}(r,t),n){if(p&&1==n.nodeType&&(i=Math.min(i,n.childNodes.length),i<n.childNodes.length)){let e,o=n.childNodes[i];"IMG"==o.nodeName&&(e=o.getBoundingClientRect()).right<=t.left&&e.bottom>t.top&&i++}n==e.dom&&i==n.childNodes.length-1&&1==n.lastChild.nodeType&&t.top>n.lastChild.getBoundingClientRect().bottom?s=e.state.doc.content.size:0!=i&&1==n.nodeType&&"BR"==n.childNodes[i-1].nodeName||(s=function(e,t,n,o){let i=-1;for(let n=t;n!=e.dom;){let t=e.docView.nearestDesc(n,!0);if(!t)return null;if(t.node.isBlock&&t.parent){let e=t.dom.getBoundingClientRect();if(e.left>o.left||e.top>o.top)i=t.posBefore;else{if(!(e.right<o.left||e.bottom<o.top))break;i=t.posAfter}}n=t.dom.parentNode}return i>-1?i:e.docView.posFromDOM(t,n,1)}(e,n,i,t))}null==s&&(s=function(e,t,n){let{node:o,offset:i}=K(t,n),s=-1;if(1==o.nodeType&&!o.firstChild){let e=o.getBoundingClientRect();s=e.left!=e.right&&n.left>(e.left+e.right)/2?1:-1}return e.docView.posFromDOM(o,i,s)}(e,r,t));let l=e.docView.nearestDesc(r,!0);return{pos:s,inside:l?l.posAtStart-l.border:-1}}function _(e,t){let n=e.getClientRects();return n.length?n[t<0?0:n.length-1]:e.getBoundingClientRect()}const U=/[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac]/;function G(e,t,n){let{node:o,offset:i}=e.docView.domFromPos(t,n<0?-1:1),s=N||p;if(3==o.nodeType){if(!s||!U.test(o.nodeValue)&&(n<0?i:i!=o.nodeValue.length)){let e=i,t=i,s=n<0?1:-1;return n<0&&!i?(t++,s=-1):n>=0&&i==o.nodeValue.length?(e--,s=1):n<0?e--:t++,j(_(x(o,e,t),s),s<0)}{let e=_(x(o,i,i),n);if(p&&i&&/\s/.test(o.nodeValue[i-1])&&i<o.nodeValue.length){let t=_(x(o,i-1,i-1),-1);if(t.top==e.top){let n=_(x(o,i,i+1),-1);if(n.top!=e.top)return j(n,n.left<t.left)}}return e}}if(!e.state.doc.resolve(t).parent.inlineContent){if(i&&(n<0||i==P(o))){let e=o.childNodes[i-1];if(1==e.nodeType)return X(e.getBoundingClientRect(),!1)}if(i<P(o)){let e=o.childNodes[i];if(1==e.nodeType)return X(e.getBoundingClientRect(),!0)}return X(o.getBoundingClientRect(),n>=0)}if(i&&(n<0||i==P(o))){let e=o.childNodes[i-1],t=3==e.nodeType?x(e,P(e)-(s?0:1)):1!=e.nodeType||"BR"==e.nodeName&&e.nextSibling?null:e;if(t)return j(_(t,1),!1)}if(i<P(o)){let e=o.childNodes[i];for(;e.pmViewDesc&&e.pmViewDesc.ignoreForCoords;)e=e.nextSibling;let t=e?3==e.nodeType?x(e,0,s?0:1):1==e.nodeType?e:null:null;if(t)return j(_(t,-1),!0)}return j(_(3==o.nodeType?x(o):o,-n),n>=0)}function j(e,t){if(0==e.width)return e;let n=t?e.left:e.right;return{top:e.top,bottom:e.bottom,left:n,right:n}}function X(e,t){if(0==e.height)return e;let n=t?e.top:e.bottom;return{top:n,bottom:n,left:e.left,right:e.right}}function J(e,t,n){let o=e.state,i=e.root.activeElement;o!=t&&e.updateState(t),i!=e.dom&&e.focus();try{return n()}finally{o!=t&&e.updateState(o),i!=e.dom&&i&&i.focus()}}const Q=/[\u0590-\u08ac]/;let Z=null,ee=null,te=!1;class ne{constructor(e,t,n,o){this.parent=e,this.children=t,this.dom=n,this.contentDOM=o,this.dirty=0,n.pmViewDesc=this}matchesWidget(e){return!1}matchesMark(e){return!1}matchesNode(e,t,n){return!1}matchesHack(e){return!1}parseRule(){return null}stopEvent(e){return!1}get size(){let e=0;for(let t=0;t<this.children.length;t++)e+=this.children[t].size;return e}get border(){return 0}destroy(){this.parent=void 0,this.dom.pmViewDesc==this&&(this.dom.pmViewDesc=void 0);for(let e=0;e<this.children.length;e++)this.children[e].destroy()}posBeforeChild(e){for(let t=0,n=this.posAtStart;;t++){let o=this.children[t];if(o==e)return n;n+=o.size}}get posBefore(){return this.parent.posBeforeChild(this)}get posAtStart(){return this.parent?this.parent.posBeforeChild(this)+this.border:0}get posAfter(){return this.posBefore+this.size}get posAtEnd(){return this.posAtStart+this.size-2*this.border}localPosFromDOM(e,t,n){if(this.contentDOM&&this.contentDOM.contains(1==e.nodeType?e:e.parentNode)){if(n<0){let n,o;if(e==this.contentDOM)n=e.childNodes[t-1];else{for(;e.parentNode!=this.contentDOM;)e=e.parentNode;n=e.previousSibling}for(;n&&(!(o=n.pmViewDesc)||o.parent!=this);)n=n.previousSibling;return n?this.posBeforeChild(o)+o.size:this.posAtStart}{let n,o;if(e==this.contentDOM)n=e.childNodes[t];else{for(;e.parentNode!=this.contentDOM;)e=e.parentNode;n=e.nextSibling}for(;n&&(!(o=n.pmViewDesc)||o.parent!=this);)n=n.nextSibling;return n?this.posBeforeChild(o):this.posAtEnd}}let o;if(e==this.dom&&this.contentDOM)o=t>S(this.contentDOM);else if(this.contentDOM&&this.contentDOM!=this.dom&&this.dom.contains(this.contentDOM))o=2&e.compareDocumentPosition(this.contentDOM);else if(this.dom.firstChild){if(0==t)for(let t=e;;t=t.parentNode){if(t==this.dom){o=!1;break}if(t.previousSibling)break}if(null==o&&t==e.childNodes.length)for(let t=e;;t=t.parentNode){if(t==this.dom){o=!0;break}if(t.nextSibling)break}}return(null==o?n>0:o)?this.posAtEnd:this.posAtStart}nearestDesc(e,t=!1){for(let n=!0,o=e;o;o=o.parentNode){let i,s=this.getDesc(o);if(s&&(!t||s.node)){if(!n||!(i=s.nodeDOM)||(1==i.nodeType?i.contains(1==e.nodeType?e:e.parentNode):i==e))return s;n=!1}}}getDesc(e){let t=e.pmViewDesc;for(let e=t;e;e=e.parent)if(e==this)return t}posFromDOM(e,t,n){for(let o=e;o;o=o.parentNode){let i=this.getDesc(o);if(i)return i.localPosFromDOM(e,t,n)}return-1}descAt(e){for(let t=0,n=0;t<this.children.length;t++){let o=this.children[t],i=n+o.size;if(n==e&&i!=n){for(;!o.border&&o.children.length;)o=o.children[0];return o}if(e<i)return o.descAt(e-n-o.border);n=i}}domFromPos(e,t){if(!this.contentDOM)return{node:this.dom,offset:0};let n,o=0,i=0;for(let t=0;o<this.children.length;o++){let n=this.children[o],s=t+n.size;if(s>e||n instanceof ae){i=e-t;break}t=s}if(i)return this.children[o].domFromPos(i-this.children[o].border,t);for(;o&&!(n=this.children[o-1]).size&&n instanceof oe&&n.side>=0;o--);if(t<=0){let e,n=!0;for(;e=o?this.children[o-1]:null,e&&e.dom.parentNode!=this.contentDOM;o--,n=!1);return e&&t&&n&&!e.border&&!e.domAtom?e.domFromPos(e.size,t):{node:this.contentDOM,offset:e?S(e.dom)+1:0}}{let e,n=!0;for(;e=o<this.children.length?this.children[o]:null,e&&e.dom.parentNode!=this.contentDOM;o++,n=!1);return e&&n&&!e.border&&!e.domAtom?e.domFromPos(0,t):{node:this.contentDOM,offset:e?S(e.dom):this.contentDOM.childNodes.length}}}parseRange(e,t,n=0){if(0==this.children.length)return{node:this.contentDOM,from:e,to:t,fromOffset:0,toOffset:this.contentDOM.childNodes.length};let o=-1,i=-1;for(let s=n,r=0;;r++){let n=this.children[r],l=s+n.size;if(-1==o&&e<=l){let i=s+n.border;if(e>=i&&t<=l-n.border&&n.node&&n.contentDOM&&this.contentDOM.contains(n.contentDOM))return n.parseRange(e,t,i);e=s;for(let t=r;t>0;t--){let n=this.children[t-1];if(n.size&&n.dom.parentNode==this.contentDOM&&!n.emptyChildAt(1)){o=S(n.dom)+1;break}e-=n.size}-1==o&&(o=0)}if(o>-1&&(l>t||r==this.children.length-1)){t=l;for(let e=r+1;e<this.children.length;e++){let n=this.children[e];if(n.size&&n.dom.parentNode==this.contentDOM&&!n.emptyChildAt(-1)){i=S(n.dom);break}t+=n.size}-1==i&&(i=this.contentDOM.childNodes.length);break}s=l}return{node:this.contentDOM,from:e,to:t,fromOffset:o,toOffset:i}}emptyChildAt(e){if(this.border||!this.contentDOM||!this.children.length)return!1;let t=this.children[e<0?0:this.children.length-1];return 0==t.size||t.emptyChildAt(e)}domAfterPos(e){let{node:t,offset:n}=this.domFromPos(e,0);if(1!=t.nodeType||n==t.childNodes.length)throw new RangeError("No node after pos "+e);return t.childNodes[n]}setSelection(e,t,n,o=!1){let i=Math.min(e,t),s=Math.max(e,t);for(let r=0,l=0;r<this.children.length;r++){let d=this.children[r],a=l+d.size;if(i>l&&s<a)return d.setSelection(e-l-d.border,t-l-d.border,n,o);l=a}let r=this.domFromPos(e,e?-1:1),l=t==e?r:this.domFromPos(t,t?-1:1),d=n.getSelection(),a=!1;if((p||b)&&e==t){let{node:e,offset:t}=r;if(3==e.nodeType){if(a=!(!t||"\n"!=e.nodeValue[t-1]),a&&t==e.nodeValue.length)for(let t,n=e;n;n=n.parentNode){if(t=n.nextSibling){"BR"==t.nodeName&&(r=l={node:t.parentNode,offset:S(t)+1});break}let e=n.pmViewDesc;if(e&&e.node&&e.node.isBlock)break}}else{let n=e.childNodes[t-1];a=n&&("BR"==n.nodeName||"false"==n.contentEditable)}}if(p&&d.focusNode&&d.focusNode!=l.node&&1==d.focusNode.nodeType){let e=d.focusNode.childNodes[d.focusOffset];e&&"false"==e.contentEditable&&(o=!0)}if(!(o||a&&b)&&k(r.node,r.offset,d.anchorNode,d.anchorOffset)&&k(l.node,l.offset,d.focusNode,d.focusOffset))return;let c=!1;if((d.extend||e==t)&&!a){d.collapse(r.node,r.offset);try{e!=t&&d.extend(l.node,l.offset),c=!0}catch(e){if(!(e instanceof DOMException))throw e}}if(!c){if(e>t){let e=r;r=l,l=e}let n=document.createRange();n.setEnd(l.node,l.offset),n.setStart(r.node,r.offset),d.removeAllRanges(),d.addRange(n)}}ignoreMutation(e){return!this.contentDOM&&"selection"!=e.type}get contentLost(){return this.contentDOM&&this.contentDOM!=this.dom&&!this.dom.contains(this.contentDOM)}markDirty(e,t){for(let n=0,o=0;o<this.children.length;o++){let i=this.children[o],s=n+i.size;if(n==s?e<=s&&t>=n:e<s&&t>n){let o=n+i.border,r=s-i.border;if(e>=o&&t<=r)return this.dirty=e==n||t==s?2:1,void(e!=o||t!=r||!i.contentLost&&i.dom.parentNode==this.contentDOM?i.markDirty(e-o,t-o):i.dirty=3);i.dirty=i.dom!=i.contentDOM||i.dom.parentNode!=this.contentDOM||i.children.length?3:2}n=s}this.dirty=2}markParentsDirty(){let e=1;for(let t=this.parent;t;t=t.parent,e++){let n=1==e?2:1;t.dirty<n&&(t.dirty=n)}}get domAtom(){return!1}get ignoreForCoords(){return!1}}class oe extends ne{constructor(e,t,n,o){let i,s=t.type.toDOM;if("function"==typeof s&&(s=s(n,(()=>i?i.parent?i.parent.posBeforeChild(i):void 0:o))),!t.type.spec.raw){if(1!=s.nodeType){let e=document.createElement("span");e.appendChild(s),s=e}s.contentEditable="false",s.classList.add("ProseMirror-widget")}super(e,[],s,null),this.widget=t,this.widget=t,i=this}matchesWidget(e){return 0==this.dirty&&e.type.eq(this.widget.type)}parseRule(){return{ignore:!0}}stopEvent(e){let t=this.widget.spec.stopEvent;return!!t&&t(e)}ignoreMutation(e){return"selection"!=e.type||this.widget.spec.ignoreSelection}destroy(){this.widget.type.destroy(this.dom),super.destroy()}get domAtom(){return!0}get side(){return this.widget.type.side}}class ie extends ne{constructor(e,t,n,o){super(e,[],t,null),this.textDOM=n,this.text=o}get size(){return this.text.length}localPosFromDOM(e,t){return e!=this.textDOM?this.posAtStart+(t?this.size:0):this.posAtStart+t}domFromPos(e){return{node:this.textDOM,offset:e}}ignoreMutation(e){return"characterData"===e.type&&e.target.nodeValue==e.oldValue}}class se extends ne{constructor(e,t,n,o){super(e,[],n,o),this.mark=t}static create(e,t,n,o){let s=o.nodeViews[t.type.name],r=s&&s(t,o,n);return r&&r.dom||(r=i.PW.renderSpec(document,t.type.spec.toDOM(t,n))),new se(e,t,r.dom,r.contentDOM||r.dom)}parseRule(){return 3&this.dirty||this.mark.type.spec.reparseInView?null:{mark:this.mark.type.name,attrs:this.mark.attrs,contentElement:this.contentDOM||void 0}}matchesMark(e){return 3!=this.dirty&&this.mark.eq(e)}markDirty(e,t){if(super.markDirty(e,t),0!=this.dirty){let e=this.parent;for(;!e.node;)e=e.parent;e.dirty<this.dirty&&(e.dirty=this.dirty),this.dirty=0}}slice(e,t,n){let o=se.create(this.parent,this.mark,!0,n),i=this.children,s=this.size;t<s&&(i=Ne(i,t,s,n)),e>0&&(i=Ne(i,0,e,n));for(let e=0;e<i.length;e++)i[e].parent=o;return o.children=i,o}}class re extends ne{constructor(e,t,n,o,i,s,r,l,d){super(e,[],i,s),this.node=t,this.outerDeco=n,this.innerDeco=o,this.nodeDOM=r,s&&this.updateChildren(l,d)}static create(e,t,n,o,s,r){let l,d=s.nodeViews[t.type.name],a=d&&d(t,s,(()=>l?l.parent?l.parent.posBeforeChild(l):void 0:r),n,o),c=a&&a.dom,h=a&&a.contentDOM;if(t.isText)if(c){if(3!=c.nodeType)throw new RangeError("Text must be rendered as a DOM text node")}else c=document.createTextNode(t.text);else c||({dom:c,contentDOM:h}=i.PW.renderSpec(document,t.type.spec.toDOM(t)));h||t.isText||"BR"==c.nodeName||(c.hasAttribute("contenteditable")||(c.contentEditable="false"),t.type.spec.draggable&&(c.draggable=!0));let f=c;return c=ye(c,n,t),a?l=new ce(e,t,n,o,c,h||null,f,a,s,r+1):t.isText?new de(e,t,n,o,c,f,s):new re(e,t,n,o,c,h||null,f,s,r+1)}parseRule(){if(this.node.type.spec.reparseInView)return null;let e={node:this.node.type.name,attrs:this.node.attrs};if("pre"==this.node.type.whitespace&&(e.preserveWhitespace="full"),this.contentDOM)if(this.contentLost){for(let t=this.children.length-1;t>=0;t--){let n=this.children[t];if(this.dom.contains(n.dom.parentNode)){e.contentElement=n.dom.parentNode;break}}e.contentElement||(e.getContent=()=>i.HY.empty)}else e.contentElement=this.contentDOM;else e.getContent=()=>this.node.content;return e}matchesNode(e,t,n){return 0==this.dirty&&e.eq(this.node)&&be(t,this.outerDeco)&&n.eq(this.innerDeco)}get size(){return this.node.nodeSize}get border(){return this.node.isLeaf?0:1}updateChildren(e,t){let n=this.node.inlineContent,o=t,s=e.composing?this.localCompositionInfo(e,t):null,r=s&&s.pos>-1?s:null,l=s&&s.pos<0,d=new we(this,r&&r.node);!function(e,t,n,o){let i=t.locals(e),s=0;if(0==i.length){for(let n=0;n<e.childCount;n++){let r=e.child(n);o(r,i,t.forChild(s,r),n),s+=r.nodeSize}return}let r=0,l=[],d=null;for(let a=0;;){if(r<i.length&&i[r].to==s){let e,t=i[r++];for(;r<i.length&&i[r].to==s;)(e||(e=[t])).push(i[r++]);if(e){e.sort(De);for(let t=0;t<e.length;t++)n(e[t],a,!!d)}else n(t,a,!!d)}let c,h;if(d)h=-1,c=d,d=null;else{if(!(a<e.childCount))break;h=a,c=e.child(a++)}for(let e=0;e<l.length;e++)l[e].to<=s&&l.splice(e--,1);for(;r<i.length&&i[r].from<=s&&i[r].to>s;)l.push(i[r++]);let f=s+c.nodeSize;if(c.isText){let e=f;r<i.length&&i[r].from<e&&(e=i[r].from);for(let t=0;t<l.length;t++)l[t].to<e&&(e=l[t].to);e<f&&(d=c.cut(e-s),c=c.cut(0,e-s),f=e,h=-1)}o(c,c.isInline&&!c.isLeaf?l.filter((e=>!e.inline)):l.slice(),t.forChild(s,c),h),s=f}}(this.node,this.innerDeco,((t,s,r)=>{t.spec.marks?d.syncToMarks(t.spec.marks,n,e):t.type.side>=0&&!r&&d.syncToMarks(s==this.node.childCount?i.vc.none:this.node.child(s).marks,n,e),d.placeWidget(t,e,o)}),((t,i,r,a)=>{let c;d.syncToMarks(t.marks,n,e),d.findNodeMatch(t,i,r,a)||l&&e.state.selection.from>o&&e.state.selection.to<o+t.nodeSize&&(c=d.findIndexWithChild(s.node))>-1&&d.updateNodeAt(t,i,r,c,e)||d.updateNextNode(t,i,r,e,a)||d.addNode(t,i,r,e,o),o+=t.nodeSize})),d.syncToMarks([],n,e),this.node.isTextblock&&d.addTextblockHacks(),d.destroyRest(),(d.changed||2==this.dirty)&&(r&&this.protectLocalComposition(e,r),he(this.contentDOM,this.children,e),v&&function(e){if("UL"==e.nodeName||"OL"==e.nodeName){let t=e.style.cssText;e.style.cssText=t+"; list-style: square !important",window.getComputedStyle(e).listStyle,e.style.cssText=t}}(this.dom))}localCompositionInfo(e,t){let{from:n,to:i}=e.state.selection;if(!(e.state.selection instanceof o.Bs)||n<t||i>t+this.node.content.size)return null;let s=e.domSelection(),r=function(e,t){for(;;){if(3==e.nodeType)return e;if(1==e.nodeType&&t>0){if(e.childNodes.length>t&&3==e.childNodes[t].nodeType)return e.childNodes[t];t=P(e=e.childNodes[t-1])}else{if(!(1==e.nodeType&&t<e.childNodes.length))return null;e=e.childNodes[t],t=0}}}(s.focusNode,s.focusOffset);if(!r||!this.dom.contains(r.parentNode))return null;if(this.node.inlineContent){let e=r.nodeValue,o=function(e,t,n,o){for(let i=0,s=0;i<e.childCount&&s<=o;){let r=e.child(i++),l=s;if(s+=r.nodeSize,!r.isText)continue;let d=r.text;for(;i<e.childCount;){let t=e.child(i++);if(s+=t.nodeSize,!t.isText)break;d+=t.text}if(s>=n){let e=l<o?d.lastIndexOf(t,o-l-1):-1;if(e>=0&&e+t.length+l>=n)return l+e;if(n==o&&d.length>=o+t.length-l&&d.slice(o-l,o-l+t.length)==t)return o}}return-1}(this.node.content,e,n-t,i-t);return o<0?null:{node:r,pos:o,text:e}}return{node:r,pos:-1,text:""}}protectLocalComposition(e,{node:t,pos:n,text:o}){if(this.getDesc(t))return;let i=t;for(;i.parentNode!=this.contentDOM;i=i.parentNode){for(;i.previousSibling;)i.parentNode.removeChild(i.previousSibling);for(;i.nextSibling;)i.parentNode.removeChild(i.nextSibling);i.pmViewDesc&&(i.pmViewDesc=void 0)}let s=new ie(this,i,t,o);e.input.compositionNodes.push(s),this.children=Ne(this.children,n,n+o.length,e,s)}update(e,t,n,o){return!(3==this.dirty||!e.sameMarkup(this.node)||(this.updateInner(e,t,n,o),0))}updateInner(e,t,n,o){this.updateOuterDeco(t),this.node=e,this.innerDeco=n,this.contentDOM&&this.updateChildren(o,this.posAtStart),this.dirty=0}updateOuterDeco(e){if(be(e,this.outerDeco))return;let t=1!=this.nodeDOM.nodeType,n=this.dom;this.dom=me(this.dom,this.nodeDOM,pe(this.outerDeco,this.node,t),pe(e,this.node,t)),this.dom!=n&&(n.pmViewDesc=void 0,this.dom.pmViewDesc=this),this.outerDeco=e}selectNode(){1==this.nodeDOM.nodeType&&this.nodeDOM.classList.add("ProseMirror-selectednode"),!this.contentDOM&&this.node.type.spec.draggable||(this.dom.draggable=!0)}deselectNode(){1==this.nodeDOM.nodeType&&this.nodeDOM.classList.remove("ProseMirror-selectednode"),!this.contentDOM&&this.node.type.spec.draggable||this.dom.removeAttribute("draggable")}get domAtom(){return this.node.isAtom}}function le(e,t,n,o,i){return ye(o,t,e),new re(void 0,e,t,n,o,o,o,i,0)}class de extends re{constructor(e,t,n,o,i,s,r){super(e,t,n,o,i,null,s,r,0)}parseRule(){let e=this.nodeDOM.parentNode;for(;e&&e!=this.dom&&!e.pmIsDeco;)e=e.parentNode;return{skip:e||!0}}update(e,t,n,o){return!(3==this.dirty||0!=this.dirty&&!this.inParent()||!e.sameMarkup(this.node)||(this.updateOuterDeco(t),0==this.dirty&&e.text==this.node.text||e.text==this.nodeDOM.nodeValue||(this.nodeDOM.nodeValue=e.text,o.trackWrites==this.nodeDOM&&(o.trackWrites=null)),this.node=e,this.dirty=0,0))}inParent(){let e=this.parent.contentDOM;for(let t=this.nodeDOM;t;t=t.parentNode)if(t==e)return!0;return!1}domFromPos(e){return{node:this.nodeDOM,offset:e}}localPosFromDOM(e,t,n){return e==this.nodeDOM?this.posAtStart+Math.min(t,this.node.text.length):super.localPosFromDOM(e,t,n)}ignoreMutation(e){return"characterData"!=e.type&&"selection"!=e.type}slice(e,t,n){let o=this.node.cut(e,t),i=document.createTextNode(o.text);return new de(this.parent,o,this.outerDeco,this.innerDeco,i,i,n)}markDirty(e,t){super.markDirty(e,t),this.dom==this.nodeDOM||0!=e&&t!=this.nodeDOM.nodeValue.length||(this.dirty=3)}get domAtom(){return!1}}class ae extends ne{parseRule(){return{ignore:!0}}matchesHack(e){return 0==this.dirty&&this.dom.nodeName==e}get domAtom(){return!0}get ignoreForCoords(){return"IMG"==this.dom.nodeName}}class ce extends re{constructor(e,t,n,o,i,s,r,l,d,a){super(e,t,n,o,i,s,r,d,a),this.spec=l}update(e,t,n,o){if(3==this.dirty)return!1;if(this.spec.update){let i=this.spec.update(e,t,n);return i&&this.updateInner(e,t,n,o),i}return!(!this.contentDOM&&!e.isLeaf)&&super.update(e,t,n,o)}selectNode(){this.spec.selectNode?this.spec.selectNode():super.selectNode()}deselectNode(){this.spec.deselectNode?this.spec.deselectNode():super.deselectNode()}setSelection(e,t,n,o){this.spec.setSelection?this.spec.setSelection(e,t,n):super.setSelection(e,t,n,o)}destroy(){this.spec.destroy&&this.spec.destroy(),super.destroy()}stopEvent(e){return!!this.spec.stopEvent&&this.spec.stopEvent(e)}ignoreMutation(e){return this.spec.ignoreMutation?this.spec.ignoreMutation(e):super.ignoreMutation(e)}}function he(e,t,n){let o=e.firstChild,i=!1;for(let s=0;s<t.length;s++){let r=t[s],l=r.dom;if(l.parentNode==e){for(;l!=o;)o=ve(o),i=!0;o=o.nextSibling}else i=!0,e.insertBefore(l,o);if(r instanceof se){let t=o?o.previousSibling:e.lastChild;he(r.contentDOM,r.children,n),o=t?t.nextSibling:e.firstChild}}for(;o;)o=ve(o),i=!0;i&&n.trackWrites==e&&(n.trackWrites=null)}const fe=function(e){e&&(this.nodeName=e)};fe.prototype=Object.create(null);const ue=[new fe];function pe(e,t,n){if(0==e.length)return ue;let o=n?ue[0]:new fe,i=[o];for(let s=0;s<e.length;s++){let r=e[s].type.attrs;if(r){r.nodeName&&i.push(o=new fe(r.nodeName));for(let e in r){let s=r[e];null!=s&&(n&&1==i.length&&i.push(o=new fe(t.isInline?"span":"div")),"class"==e?o.class=(o.class?o.class+" ":"")+s:"style"==e?o.style=(o.style?o.style+";":"")+s:"nodeName"!=e&&(o[e]=s))}}}return i}function me(e,t,n,o){if(n==ue&&o==ue)return t;let i=t;for(let t=0;t<o.length;t++){let s=o[t],r=n[t];if(t){let t;r&&r.nodeName==s.nodeName&&i!=e&&(t=i.parentNode)&&t.nodeName.toLowerCase()==s.nodeName||(t=document.createElement(s.nodeName),t.pmIsDeco=!0,t.appendChild(i),r=ue[0]),i=t}ge(i,r||ue[0],s)}return i}function ge(e,t,n){for(let o in t)"class"==o||"style"==o||"nodeName"==o||o in n||e.removeAttribute(o);for(let o in n)"class"!=o&&"style"!=o&&"nodeName"!=o&&n[o]!=t[o]&&e.setAttribute(o,n[o]);if(t.class!=n.class){let o=t.class?t.class.split(" ").filter(Boolean):[],i=n.class?n.class.split(" ").filter(Boolean):[];for(let t=0;t<o.length;t++)-1==i.indexOf(o[t])&&e.classList.remove(o[t]);for(let t=0;t<i.length;t++)-1==o.indexOf(i[t])&&e.classList.add(i[t]);0==e.classList.length&&e.removeAttribute("class")}if(t.style!=n.style){if(t.style){let n,o=/\s*([\w\-\xa1-\uffff]+)\s*:(?:"(?:\\.|[^"])*"|'(?:\\.|[^'])*'|\(.*?\)|[^;])*/g;for(;n=o.exec(t.style);)e.style.removeProperty(n[1])}n.style&&(e.style.cssText+=n.style)}}function ye(e,t,n){return me(e,e,ue,pe(t,n,1!=e.nodeType))}function be(e,t){if(e.length!=t.length)return!1;for(let n=0;n<e.length;n++)if(!e[n].type.eq(t[n].type))return!1;return!0}function ve(e){let t=e.nextSibling;return e.parentNode.removeChild(e),t}class we{constructor(e,t){this.lock=t,this.index=0,this.stack=[],this.changed=!1,this.top=e,this.preMatch=function(e,t){let n=t,o=n.children.length,i=e.childCount,s=new Map,r=[];e:for(;i>0;){let l;for(;;)if(o){let e=n.children[o-1];if(!(e instanceof se)){l=e,o--;break}n=e,o=e.children.length}else{if(n==t)break e;o=n.parent.children.indexOf(n),n=n.parent}let d=l.node;if(d){if(d!=e.child(i-1))break;--i,s.set(l,i),r.push(l)}}return{index:i,matched:s,matches:r.reverse()}}(e.node.content,e)}destroyBetween(e,t){if(e!=t){for(let n=e;n<t;n++)this.top.children[n].destroy();this.top.children.splice(e,t-e),this.changed=!0}}destroyRest(){this.destroyBetween(this.index,this.top.children.length)}syncToMarks(e,t,n){let o=0,i=this.stack.length>>1,s=Math.min(i,e.length);for(;o<s&&(o==i-1?this.top:this.stack[o+1<<1]).matchesMark(e[o])&&!1!==e[o].type.spec.spanning;)o++;for(;o<i;)this.destroyRest(),this.top.dirty=0,this.index=this.stack.pop(),this.top=this.stack.pop(),i--;for(;i<e.length;){this.stack.push(this.top,this.index+1);let o=-1;for(let t=this.index;t<Math.min(this.index+3,this.top.children.length);t++)if(this.top.children[t].matchesMark(e[i])){o=t;break}if(o>-1)o>this.index&&(this.changed=!0,this.destroyBetween(this.index,o)),this.top=this.top.children[this.index];else{let o=se.create(this.top,e[i],t,n);this.top.children.splice(this.index,0,o),this.top=o,this.changed=!0}this.index=0,i++}}findNodeMatch(e,t,n,o){let i,s=-1;if(o>=this.preMatch.index&&(i=this.preMatch.matches[o-this.preMatch.index]).parent==this.top&&i.matchesNode(e,t,n))s=this.top.children.indexOf(i,this.index);else for(let o=this.index,i=Math.min(this.top.children.length,o+5);o<i;o++){let i=this.top.children[o];if(i.matchesNode(e,t,n)&&!this.preMatch.matched.has(i)){s=o;break}}return!(s<0||(this.destroyBetween(this.index,s),this.index++,0))}updateNodeAt(e,t,n,o,i){let s=this.top.children[o];return 3==s.dirty&&s.dom==s.contentDOM&&(s.dirty=2),!!s.update(e,t,n,i)&&(this.destroyBetween(this.index,o),this.index=o+1,!0)}findIndexWithChild(e){for(;;){let t=e.parentNode;if(!t)return-1;if(t==this.top.contentDOM){let t=e.pmViewDesc;if(t)for(let e=this.index;e<this.top.children.length;e++)if(this.top.children[e]==t)return e;return-1}e=t}}updateNextNode(e,t,n,o,i){for(let s=this.index;s<this.top.children.length;s++){let r=this.top.children[s];if(r instanceof re){let l=this.preMatch.matched.get(r);if(null!=l&&l!=i)return!1;let d=r.dom;if((!this.lock||!(d==this.lock||1==d.nodeType&&d.contains(this.lock.parentNode))||e.isText&&r.node&&r.node.isText&&r.nodeDOM.nodeValue==e.text&&3!=r.dirty&&be(t,r.outerDeco))&&r.update(e,t,n,o))return this.destroyBetween(this.index,s),r.dom!=d&&(this.changed=!0),this.index++,!0;break}}return!1}addNode(e,t,n,o,i){this.top.children.splice(this.index++,0,re.create(this.top,e,t,n,o,i)),this.changed=!0}placeWidget(e,t,n){let o=this.index<this.top.children.length?this.top.children[this.index]:null;if(!o||!o.matchesWidget(e)||e!=o.widget&&o.widget.type.toDOM.parentNode){let o=new oe(this.top,e,t,n);this.top.children.splice(this.index++,0,o),this.changed=!0}else this.index++}addTextblockHacks(){let e=this.top.children[this.index-1],t=this.top;for(;e instanceof se;)t=e,e=t.children[t.children.length-1];e&&e instanceof de&&!/\n$/.test(e.node.text)||((b||g)&&e&&"false"==e.dom.contentEditable&&this.addHackNode("IMG",t),this.addHackNode("BR",this.top))}addHackNode(e,t){if(t==this.top&&this.index<t.children.length&&t.children[this.index].matchesHack(e))this.index++;else{let n=document.createElement(e);"IMG"==e&&(n.className="ProseMirror-separator",n.alt=""),"BR"==e&&(n.className="ProseMirror-trailingBreak");let o=new ae(this.top,[],n,null);t!=this.top?t.children.push(o):t.children.splice(this.index++,0,o),this.changed=!0}}}function De(e,t){return e.type.side-t.type.side}function Ne(e,t,n,o,i){let s=[];for(let r=0,l=0;r<e.length;r++){let d=e[r],a=l,c=l+=d.size;a>=n||c<=t?s.push(d):(a<t&&s.push(d.slice(0,t-a,o)),i&&(s.push(i),i=void 0),c>n&&s.push(d.slice(n-a,d.size,o)))}return s}function Oe(e,t=null){let n=e.domSelection(),i=e.state.doc;if(!n.focusNode)return null;let s=e.docView.nearestDesc(n.focusNode),r=s&&0==s.size,l=e.docView.posFromDOM(n.focusNode,n.focusOffset,1);if(l<0)return null;let d,a,c=i.resolve(l);if(V(n)){for(d=c;s&&!s.node;)s=s.parent;let e=s.node;if(s&&e.isAtom&&o.qv.isSelectable(e)&&s.parent&&(!e.isInline||!function(e,t,n){for(let o=0==t,i=t==P(e);o||i;){if(e==n)return!0;let t=S(e);if(!(e=e.parentNode))return!1;o=o&&0==t,i=i&&t==P(e)}}(n.focusNode,n.focusOffset,s.dom))){let e=s.posBefore;a=new o.qv(l==e?c:i.resolve(e))}}else{let t=e.docView.posFromDOM(n.anchorNode,n.anchorOffset,1);if(t<0)return null;d=i.resolve(t)}return a||(a=Ee(e,d,c,"pointer"==t||e.state.selection.head<c.pos&&!r?1:-1)),a}function Se(e){return e.editable?e.hasFocus():Be(e)&&document.activeElement&&document.activeElement.contains(e.dom)}function Ce(e,t=!1){let n=e.state.selection;if(Ae(e,n),Se(e)){if(!t&&e.input.mouseDown&&e.input.mouseDown.allowDefault&&g){let t=e.domSelection(),n=e.domObserver.currentSelection;if(t.anchorNode&&n.anchorNode&&k(t.anchorNode,t.anchorOffset,n.anchorNode,n.anchorOffset))return e.input.mouseDown.delayedSelectionSync=!0,void e.domObserver.setCurSelection()}if(e.domObserver.disconnectSelection(),e.cursorWrapper)!function(e){let t=e.domSelection(),n=document.createRange(),o=e.cursorWrapper.dom,i="IMG"==o.nodeName;i?n.setEnd(o.parentNode,S(o)+1):n.setEnd(o,0),n.collapse(!1),t.removeAllRanges(),t.addRange(n),!i&&!e.state.selection.visible&&f&&u<=11&&(o.disabled=!0,o.disabled=!1)}(e);else{let i,s,{anchor:r,head:l}=n;!Me||n instanceof o.Bs||(n.$from.parent.inlineContent||(i=xe(e,n.from)),n.empty||n.$from.parent.inlineContent||(s=xe(e,n.to))),e.docView.setSelection(r,l,e.root,t),Me&&(i&&Te(i),s&&Te(s)),n.visible?e.dom.classList.remove("ProseMirror-hideselection"):(e.dom.classList.add("ProseMirror-hideselection"),"onselectionchange"in document&&function(e){let t=e.dom.ownerDocument;t.removeEventListener("selectionchange",e.input.hideSelectionGuard);let n=e.domSelection(),o=n.anchorNode,i=n.anchorOffset;t.addEventListener("selectionchange",e.input.hideSelectionGuard=()=>{n.anchorNode==o&&n.anchorOffset==i||(t.removeEventListener("selectionchange",e.input.hideSelectionGuard),setTimeout((()=>{Se(e)&&!e.state.selection.visible||e.dom.classList.remove("ProseMirror-hideselection")}),20))})}(e))}e.domObserver.setCurSelection(),e.domObserver.connectSelection()}}const Me=b||g&&y<63;function xe(e,t){let{node:n,offset:o}=e.docView.domFromPos(t,0),i=o<n.childNodes.length?n.childNodes[o]:null,s=o?n.childNodes[o-1]:null;if(b&&i&&"false"==i.contentEditable)return ke(i);if(!(i&&"false"!=i.contentEditable||s&&"false"!=s.contentEditable)){if(i)return ke(i);if(s)return ke(s)}}function ke(e){return e.contentEditable="true",b&&e.draggable&&(e.draggable=!1,e.wasDraggable=!0),e}function Te(e){e.contentEditable="false",e.wasDraggable&&(e.draggable=!0,e.wasDraggable=null)}function Ae(e,t){if(t instanceof o.qv){let n=e.docView.descAt(t.from);n!=e.lastSelectedViewDesc&&(Pe(e),n&&n.selectNode(),e.lastSelectedViewDesc=n)}else Pe(e)}function Pe(e){e.lastSelectedViewDesc&&(e.lastSelectedViewDesc.parent&&e.lastSelectedViewDesc.deselectNode(),e.lastSelectedViewDesc=void 0)}function Ee(e,t,n,i){return e.someProp("createSelectionBetween",(o=>o(e,t,n)))||o.Bs.between(t,n,i)}function Ve(e){return(!e.editable||e.root.activeElement==e.dom)&&Be(e)}function Be(e){let t=e.domSelection();if(!t.anchorNode)return!1;try{return e.dom.contains(3==t.anchorNode.nodeType?t.anchorNode.parentNode:t.anchorNode)&&(e.editable||e.dom.contains(3==t.focusNode.nodeType?t.focusNode.parentNode:t.focusNode))}catch(e){return!1}}function Re(e,t){let{$anchor:n,$head:i}=e.selection,s=t>0?n.max(i):n.min(i),r=s.parent.inlineContent?s.depth?e.doc.resolve(t>0?s.after():s.before()):null:s;return r&&o.Y1.findFrom(r,t)}function ze(e,t){return e.dispatch(e.state.tr.setSelection(t).scrollIntoView()),!0}function Ie(e,t,n){let i=e.state.selection;if(!(i instanceof o.Bs)){if(i instanceof o.qv&&i.node.isInline)return ze(e,new o.Bs(t>0?i.$to:i.$from));{let n=Re(e.state,t);return!!n&&ze(e,n)}}if(!i.empty||n.indexOf("s")>-1)return!1;if(e.endOfTextblock(t>0?"right":"left")){let n=Re(e.state,t);return!!(n&&n instanceof o.qv)&&ze(e,n)}if(!(w&&n.indexOf("m")>-1)){let n,s=i.$head,r=s.textOffset?null:t<0?s.nodeBefore:s.nodeAfter;if(!r||r.isText)return!1;let l=t<0?s.pos-r.nodeSize:s.pos;return!!(r.isAtom||(n=e.docView.descAt(l))&&!n.contentDOM)&&(o.qv.isSelectable(r)?ze(e,new o.qv(t<0?e.state.doc.resolve(s.pos-r.nodeSize):s)):!!N&&ze(e,new o.Bs(e.state.doc.resolve(t<0?l:l+r.nodeSize))))}}function qe(e){return 3==e.nodeType?e.nodeValue.length:e.childNodes.length}function Le(e){let t=e.pmViewDesc;return t&&0==t.size&&(e.nextSibling||"BR"!=e.nodeName)}function Fe(e){let t=e.domSelection(),n=t.focusNode,o=t.focusOffset;if(!n)return;let i,s,r=!1;for(p&&1==n.nodeType&&o<qe(n)&&Le(n.childNodes[o])&&(r=!0);;)if(o>0){if(1!=n.nodeType)break;{let e=n.childNodes[o-1];if(Le(e))i=n,s=--o;else{if(3!=e.nodeType)break;n=e,o=n.nodeValue.length}}}else{if(Ke(n))break;{let t=n.previousSibling;for(;t&&Le(t);)i=n.parentNode,s=S(t),t=t.previousSibling;if(t)n=t,o=qe(n);else{if(n=n.parentNode,n==e.dom)break;o=0}}}r?We(e,t,n,o):i&&We(e,t,i,s)}function $e(e){let t=e.domSelection(),n=t.focusNode,o=t.focusOffset;if(!n)return;let i,s,r=qe(n);for(;;)if(o<r){if(1!=n.nodeType)break;if(!Le(n.childNodes[o]))break;i=n,s=++o}else{if(Ke(n))break;{let t=n.nextSibling;for(;t&&Le(t);)i=t.parentNode,s=S(t)+1,t=t.nextSibling;if(t)n=t,o=0,r=qe(n);else{if(n=n.parentNode,n==e.dom)break;o=r=0}}}i&&We(e,t,i,s)}function Ke(e){let t=e.pmViewDesc;return t&&t.node&&t.node.isBlock}function We(e,t,n,o){if(V(t)){let e=document.createRange();e.setEnd(n,o),e.setStart(n,o),t.removeAllRanges(),t.addRange(e)}else t.extend&&t.extend(n,o);e.domObserver.setCurSelection();let{state:i}=e;setTimeout((()=>{e.state==i&&Ce(e)}),50)}function He(e,t,n){let i=e.state.selection;if(i instanceof o.Bs&&!i.empty||n.indexOf("s")>-1)return!1;if(w&&n.indexOf("m")>-1)return!1;let{$from:s,$to:r}=i;if(!s.parent.inlineContent||e.endOfTextblock(t<0?"up":"down")){let n=Re(e.state,t);if(n&&n instanceof o.qv)return ze(e,n)}if(!s.parent.inlineContent){let n=t<0?s:r,l=i instanceof o.C1?o.Y1.near(n,t):o.Y1.findFrom(n,t);return!!l&&ze(e,l)}return!1}function Ye(e,t){if(!(e.state.selection instanceof o.Bs))return!0;let{$head:n,$anchor:i,empty:s}=e.state.selection;if(!n.sameParent(i))return!0;if(!s)return!1;if(e.endOfTextblock(t>0?"forward":"backward"))return!0;let r=!n.textOffset&&(t<0?n.nodeBefore:n.nodeAfter);if(r&&!r.isText){let o=e.state.tr;return t<0?o.delete(n.pos-r.nodeSize,n.pos):o.delete(n.pos,n.pos+r.nodeSize),e.dispatch(o),!0}return!1}function _e(e,t,n){e.domObserver.stop(),t.contentEditable=n,e.domObserver.start()}function Ue(e,t){let n=[],{content:o,openStart:s,openEnd:r}=t;for(;s>1&&r>1&&1==o.childCount&&1==o.firstChild.childCount;){s--,r--;let e=o.firstChild;n.push(e.type.name,e.attrs!=e.type.defaultAttrs?e.attrs:null),o=e.content}let l=e.someProp("clipboardSerializer")||i.PW.fromSchema(e.state.schema),d=ot(),a=d.createElement("div");a.appendChild(l.serializeFragment(o,{document:d}));let c,h=a.firstChild,f=0;for(;h&&1==h.nodeType&&(c=tt[h.nodeName.toLowerCase()]);){for(let e=c.length-1;e>=0;e--){let t=d.createElement(c[e]);for(;a.firstChild;)t.appendChild(a.firstChild);a.appendChild(t),f++}h=a.firstChild}return h&&1==h.nodeType&&h.setAttribute("data-pm-slice",`${s} ${r}${f?` -${f}`:""} ${JSON.stringify(n)}`),{dom:a,text:e.someProp("clipboardTextSerializer",(e=>e(t)))||t.content.textBetween(0,t.content.size,"\n\n")}}function Ge(e,t,n,o,s){let r,l,d=s.parent.type.spec.code;if(!n&&!t)return null;let a=t&&(o||d||!n);if(a){if(e.someProp("transformPastedText",(e=>{t=e(t,d||o)})),d)return t?new i.p2(i.HY.from(e.state.schema.text(t.replace(/\r\n?/g,"\n"))),0,0):i.p2.empty;let n=e.someProp("clipboardTextParser",(e=>e(t,s,o)));if(n)l=n;else{let n=s.marks(),{schema:o}=e.state,l=i.PW.fromSchema(o);r=document.createElement("div"),t.split(/(?:\r\n?|\n)+/).forEach((e=>{let t=r.appendChild(document.createElement("p"));e&&t.appendChild(l.serializeNode(o.text(e,n)))}))}}else e.someProp("transformPastedHTML",(e=>{n=e(n)})),r=function(e){let t=/^(\s*<meta [^>]*>)*/.exec(e);t&&(e=e.slice(t[0].length));let n,o=ot().createElement("div"),i=/<([a-z][^>\s]+)/i.exec(e);if((n=i&&tt[i[1].toLowerCase()])&&(e=n.map((e=>"<"+e+">")).join("")+e+n.map((e=>"</"+e+">")).reverse().join("")),o.innerHTML=e,n)for(let e=0;e<n.length;e++)o=o.querySelector(n[e])||o;return o}(n),N&&function(e){let t=e.querySelectorAll(g?"span:not([class]):not([style])":"span.Apple-converted-space");for(let n=0;n<t.length;n++){let o=t[n];1==o.childNodes.length&&" "==o.textContent&&o.parentNode&&o.parentNode.replaceChild(e.ownerDocument.createTextNode(" "),o)}}(r);let c=r&&r.querySelector("[data-pm-slice]"),h=c&&/^(\d+) (\d+)(?: -(\d+))? (.*)/.exec(c.getAttribute("data-pm-slice")||"");if(h&&h[3])for(let e=+h[3];e>0&&r.firstChild;e--)r=r.firstChild;if(!l){let t=e.someProp("clipboardParser")||e.someProp("domParser")||i.aw.fromSchema(e.state.schema);l=t.parseSlice(r,{preserveWhitespace:!(!a&&!h),context:s,ruleFromNode:e=>"BR"!=e.nodeName||e.nextSibling||!e.parentNode||je.test(e.parentNode.nodeName)?null:{ignore:!0}})}if(h)l=function(e,t){if(!e.size)return e;let n,o=e.content.firstChild.type.schema;try{n=JSON.parse(t)}catch(t){return e}let{content:s,openStart:r,openEnd:l}=e;for(let e=n.length-2;e>=0;e-=2){let t=o.nodes[n[e]];if(!t||t.hasRequiredAttrs())break;s=i.HY.from(t.create(n[e+1],s)),r++,l++}return new i.p2(s,r,l)}(et(l,+h[1],+h[2]),h[4]);else if(l=i.p2.maxOpen(function(e,t){if(e.childCount<2)return e;for(let n=t.depth;n>=0;n--){let o,s=t.node(n).contentMatchAt(t.index(n)),r=[];if(e.forEach((e=>{if(!r)return;let t,n=s.findWrapping(e.type);if(!n)return r=null;if(t=r.length&&o.length&&Je(n,o,e,r[r.length-1],0))r[r.length-1]=t;else{r.length&&(r[r.length-1]=Qe(r[r.length-1],o.length));let t=Xe(e,n);r.push(t),s=s.matchType(t.type),o=n}})),r)return i.HY.from(r)}return e}(l.content,s),!0),l.openStart||l.openEnd){let e=0,t=0;for(let t=l.content.firstChild;e<l.openStart&&!t.type.spec.isolating;e++,t=t.firstChild);for(let e=l.content.lastChild;t<l.openEnd&&!e.type.spec.isolating;t++,e=e.lastChild);l=et(l,e,t)}return e.someProp("transformPasted",(e=>{l=e(l)})),l}const je=/^(a|abbr|acronym|b|cite|code|del|em|i|ins|kbd|label|output|q|ruby|s|samp|span|strong|sub|sup|time|u|tt|var)$/i;function Xe(e,t,n=0){for(let o=t.length-1;o>=n;o--)e=t[o].create(null,i.HY.from(e));return e}function Je(e,t,n,o,s){if(s<e.length&&s<t.length&&e[s]==t[s]){let r=Je(e,t,n,o.lastChild,s+1);if(r)return o.copy(o.content.replaceChild(o.childCount-1,r));if(o.contentMatchAt(o.childCount).matchType(s==e.length-1?n.type:e[s+1]))return o.copy(o.content.append(i.HY.from(Xe(n,e,s+1))))}}function Qe(e,t){if(0==t)return e;let n=e.content.replaceChild(e.childCount-1,Qe(e.lastChild,t-1)),o=e.contentMatchAt(e.childCount).fillBefore(i.HY.empty,!0);return e.copy(n.append(o))}function Ze(e,t,n,o,s,r){let l=t<0?e.firstChild:e.lastChild,d=l.content;return s<o-1&&(d=Ze(d,t,n,o,s+1,r)),s>=n&&(d=t<0?l.contentMatchAt(0).fillBefore(d,e.childCount>1||r<=s).append(d):d.append(l.contentMatchAt(l.childCount).fillBefore(i.HY.empty,!0))),e.replaceChild(t<0?0:e.childCount-1,l.copy(d))}function et(e,t,n){return t<e.openStart&&(e=new i.p2(Ze(e.content,-1,t,e.openStart,0,e.openEnd),t,e.openEnd)),n<e.openEnd&&(e=new i.p2(Ze(e.content,1,n,e.openEnd,0,0),e.openStart,n)),e}const tt={thead:["table"],tbody:["table"],tfoot:["table"],caption:["table"],colgroup:["table"],col:["table","colgroup"],tr:["table","tbody"],td:["table","tbody","tr"],th:["table","tbody","tr"]};let nt=null;function ot(){return nt||(nt=document.implementation.createHTMLDocument("title"))}const it={};let st={};class rt{constructor(){this.shiftKey=!1,this.mouseDown=null,this.lastKeyCode=null,this.lastKeyCodeTime=0,this.lastClick={time:0,x:0,y:0,type:""},this.lastSelectionOrigin=null,this.lastSelectionTime=0,this.lastIOSEnter=0,this.lastIOSEnterFallbackTimeout=-1,this.lastAndroidDelete=0,this.composing=!1,this.composingTimeout=-1,this.compositionNodes=[],this.compositionEndedAt=-2e8,this.domChangeCount=0,this.eventHandlers=Object.create(null),this.hideSelectionGuard=null}}function lt(e,t){e.input.lastSelectionOrigin=t,e.input.lastSelectionTime=Date.now()}function dt(e){e.someProp("handleDOMEvents",(t=>{for(let n in t)e.input.eventHandlers[n]||e.dom.addEventListener(n,e.input.eventHandlers[n]=t=>at(e,t))}))}function at(e,t){return e.someProp("handleDOMEvents",(n=>{let o=n[t.type];return!!o&&(o(e,t)||t.defaultPrevented)}))}function ct(e,t){if(!t.bubbles)return!0;if(t.defaultPrevented)return!1;for(let n=t.target;n!=e.dom;n=n.parentNode)if(!n||11==n.nodeType||n.pmViewDesc&&n.pmViewDesc.stopEvent(t))return!1;return!0}function ht(e){return{left:e.clientX,top:e.clientY}}function ft(e,t,n,o,i){if(-1==o)return!1;let s=e.state.doc.resolve(o);for(let o=s.depth+1;o>0;o--)if(e.someProp(t,(t=>o>s.depth?t(e,n,s.nodeAfter,s.before(o),i,!0):t(e,n,s.node(o),s.before(o),i,!1))))return!0;return!1}function ut(e,t,n){e.focused||e.focus();let o=e.state.tr.setSelection(t);"pointer"==n&&o.setMeta("pointer",!0),e.dispatch(o)}function pt(e,t,n,o){return ft(e,"handleDoubleClickOn",t,n,o)||e.someProp("handleDoubleClick",(n=>n(e,t,o)))}function mt(e,t,n,i){return ft(e,"handleTripleClickOn",t,n,i)||e.someProp("handleTripleClick",(n=>n(e,t,i)))||function(e,t,n){if(0!=n.button)return!1;let i=e.state.doc;if(-1==t)return!!i.inlineContent&&(ut(e,o.Bs.create(i,0,i.content.size),"pointer"),!0);let s=i.resolve(t);for(let t=s.depth+1;t>0;t--){let n=t>s.depth?s.nodeAfter:s.node(t),r=s.before(t);if(n.inlineContent)ut(e,o.Bs.create(i,r+1,r+1+n.content.size),"pointer");else{if(!o.qv.isSelectable(n))continue;ut(e,o.qv.create(i,r),"pointer")}return!0}}(e,n,i)}function gt(e){return Ot(e)}st.keydown=(e,t)=>{let n=t;if(e.input.shiftKey=16==n.keyCode||n.shiftKey,!vt(e,n)&&(e.input.lastKeyCode=n.keyCode,e.input.lastKeyCodeTime=Date.now(),!D||!g||13!=n.keyCode))if(229!=n.keyCode&&e.domObserver.forceFlush(),!v||13!=n.keyCode||n.ctrlKey||n.altKey||n.metaKey)e.someProp("handleKeyDown",(t=>t(e,n)))||function(e,t){let n=t.keyCode,o=function(e){let t="";return e.ctrlKey&&(t+="c"),e.metaKey&&(t+="m"),e.altKey&&(t+="a"),e.shiftKey&&(t+="s"),t}(t);return 8==n||w&&72==n&&"c"==o?Ye(e,-1)||Fe(e):46==n||w&&68==n&&"c"==o?Ye(e,1)||$e(e):13==n||27==n||(37==n||w&&66==n&&"c"==o?Ie(e,-1,o)||Fe(e):39==n||w&&70==n&&"c"==o?Ie(e,1,o)||$e(e):38==n||w&&80==n&&"c"==o?He(e,-1,o)||Fe(e):40==n||w&&78==n&&"c"==o?function(e){if(!b||e.state.selection.$head.parentOffset>0)return!1;let{focusNode:t,focusOffset:n}=e.domSelection();if(t&&1==t.nodeType&&0==n&&t.firstChild&&"false"==t.firstChild.contentEditable){let n=t.firstChild;_e(e,n,"true"),setTimeout((()=>_e(e,n,"false")),20)}return!1}(e)||He(e,1,o)||$e(e):o==(w?"m":"c")&&(66==n||73==n||89==n||90==n))}(e,n)?n.preventDefault():lt(e,"key");else{let t=Date.now();e.input.lastIOSEnter=t,e.input.lastIOSEnterFallbackTimeout=setTimeout((()=>{e.input.lastIOSEnter==t&&(e.someProp("handleKeyDown",(t=>t(e,B(13,"Enter")))),e.input.lastIOSEnter=0)}),200)}},st.keyup=(e,t)=>{16==t.keyCode&&(e.input.shiftKey=!1)},st.keypress=(e,t)=>{let n=t;if(vt(e,n)||!n.charCode||n.ctrlKey&&!n.altKey||w&&n.metaKey)return;if(e.someProp("handleKeyPress",(t=>t(e,n))))return void n.preventDefault();let i=e.state.selection;if(!(i instanceof o.Bs&&i.$from.sameParent(i.$to))){let t=String.fromCharCode(n.charCode);e.someProp("handleTextInput",(n=>n(e,i.$from.pos,i.$to.pos,t)))||e.dispatch(e.state.tr.insertText(t).scrollIntoView()),n.preventDefault()}};const yt=w?"metaKey":"ctrlKey";it.mousedown=(e,t)=>{let n=t;e.input.shiftKey=n.shiftKey;let o=gt(e),i=Date.now(),s="singleClick";i-e.input.lastClick.time<500&&function(e,t){let n=t.x-e.clientX,o=t.y-e.clientY;return n*n+o*o<100}(n,e.input.lastClick)&&!n[yt]&&("singleClick"==e.input.lastClick.type?s="doubleClick":"doubleClick"==e.input.lastClick.type&&(s="tripleClick")),e.input.lastClick={time:i,x:n.clientX,y:n.clientY,type:s};let r=e.posAtCoords(ht(n));r&&("singleClick"==s?(e.input.mouseDown&&e.input.mouseDown.done(),e.input.mouseDown=new bt(e,r,n,!!o)):("doubleClick"==s?pt:mt)(e,r.pos,r.inside,n)?n.preventDefault():lt(e,"pointer"))};class bt{constructor(e,t,n,i){let s,r;if(this.view=e,this.pos=t,this.event=n,this.flushed=i,this.delayedSelectionSync=!1,this.mightDrag=null,this.startDoc=e.state.doc,this.selectNode=!!n[yt],this.allowDefault=n.shiftKey,t.inside>-1)s=e.state.doc.nodeAt(t.inside),r=t.inside;else{let n=e.state.doc.resolve(t.pos);s=n.parent,r=n.depth?n.before():0}const l=i?null:n.target,d=l?e.docView.nearestDesc(l,!0):null;this.target=d?d.dom:null;let{selection:a}=e.state;(0==n.button&&s.type.spec.draggable&&!1!==s.type.spec.selectable||a instanceof o.qv&&a.from<=r&&a.to>r)&&(this.mightDrag={node:s,pos:r,addAttr:!(!this.target||this.target.draggable),setUneditable:!(!this.target||!p||this.target.hasAttribute("contentEditable"))}),this.target&&this.mightDrag&&(this.mightDrag.addAttr||this.mightDrag.setUneditable)&&(this.view.domObserver.stop(),this.mightDrag.addAttr&&(this.target.draggable=!0),this.mightDrag.setUneditable&&setTimeout((()=>{this.view.input.mouseDown==this&&this.target.setAttribute("contentEditable","false")}),20),this.view.domObserver.start()),e.root.addEventListener("mouseup",this.up=this.up.bind(this)),e.root.addEventListener("mousemove",this.move=this.move.bind(this)),lt(e,"pointer")}done(){this.view.root.removeEventListener("mouseup",this.up),this.view.root.removeEventListener("mousemove",this.move),this.mightDrag&&this.target&&(this.view.domObserver.stop(),this.mightDrag.addAttr&&this.target.removeAttribute("draggable"),this.mightDrag.setUneditable&&this.target.removeAttribute("contentEditable"),this.view.domObserver.start()),this.delayedSelectionSync&&setTimeout((()=>Ce(this.view))),this.view.input.mouseDown=null}up(e){if(this.done(),!this.view.dom.contains(e.target))return;let t=this.pos;this.view.state.doc!=this.startDoc&&(t=this.view.posAtCoords(ht(e))),this.allowDefault||!t?lt(this.view,"pointer"):function(e,t,n,i,s){return ft(e,"handleClickOn",t,n,i)||e.someProp("handleClick",(n=>n(e,t,i)))||(s?function(e,t){if(-1==t)return!1;let n,i,s=e.state.selection;s instanceof o.qv&&(n=s.node);let r=e.state.doc.resolve(t);for(let e=r.depth+1;e>0;e--){let t=e>r.depth?r.nodeAfter:r.node(e);if(o.qv.isSelectable(t)){i=n&&s.$from.depth>0&&e>=s.$from.depth&&r.before(s.$from.depth+1)==s.$from.pos?r.before(s.$from.depth):r.before(e);break}}return null!=i&&(ut(e,o.qv.create(e.state.doc,i),"pointer"),!0)}(e,n):function(e,t){if(-1==t)return!1;let n=e.state.doc.resolve(t),i=n.nodeAfter;return!!(i&&i.isAtom&&o.qv.isSelectable(i))&&(ut(e,new o.qv(n),"pointer"),!0)}(e,n))}(this.view,t.pos,t.inside,e,this.selectNode)?e.preventDefault():0==e.button&&(this.flushed||b&&this.mightDrag&&!this.mightDrag.node.isAtom||g&&!(this.view.state.selection instanceof o.Bs)&&Math.min(Math.abs(t.pos-this.view.state.selection.from),Math.abs(t.pos-this.view.state.selection.to))<=2)?(ut(this.view,o.Y1.near(this.view.state.doc.resolve(t.pos)),"pointer"),e.preventDefault()):lt(this.view,"pointer")}move(e){!this.allowDefault&&(Math.abs(this.event.x-e.clientX)>4||Math.abs(this.event.y-e.clientY)>4)&&(this.allowDefault=!0),lt(this.view,"pointer"),0==e.buttons&&this.done()}}function vt(e,t){return!!e.composing||!!(b&&Math.abs(t.timeStamp-e.input.compositionEndedAt)<500)&&(e.input.compositionEndedAt=-2e8,!0)}it.touchdown=e=>{gt(e),lt(e,"pointer")},it.contextmenu=e=>gt(e);const wt=D?5e3:-1;function Dt(e,t){clearTimeout(e.input.composingTimeout),t>-1&&(e.input.composingTimeout=setTimeout((()=>Ot(e)),t))}function Nt(e){for(e.composing&&(e.input.composing=!1,e.input.compositionEndedAt=function(){let e=document.createEvent("Event");return e.initEvent("event",!0,!0),e.timeStamp}());e.input.compositionNodes.length>0;)e.input.compositionNodes.pop().markParentsDirty()}function Ot(e,t=!1){if(!(D&&e.domObserver.flushingSoon>=0)){if(e.domObserver.forceFlush(),Nt(e),t||e.docView&&e.docView.dirty){let t=Oe(e);return t&&!t.eq(e.state.selection)?e.dispatch(e.state.tr.setSelection(t)):e.updateState(e.state),!0}return!1}}st.compositionstart=st.compositionupdate=e=>{if(!e.composing){e.domObserver.flush();let{state:t}=e,n=t.selection.$from;if(t.selection.empty&&(t.storedMarks||!n.textOffset&&n.parentOffset&&n.nodeBefore.marks.some((e=>!1===e.type.spec.inclusive))))e.markCursor=e.state.storedMarks||n.marks(),Ot(e,!0),e.markCursor=null;else if(Ot(e),p&&t.selection.empty&&n.parentOffset&&!n.textOffset&&n.nodeBefore.marks.length){let t=e.domSelection();for(let e=t.focusNode,n=t.focusOffset;e&&1==e.nodeType&&0!=n;){let o=n<0?e.lastChild:e.childNodes[n-1];if(!o)break;if(3==o.nodeType){t.collapse(o,o.nodeValue.length);break}e=o,n=-1}}e.input.composing=!0}Dt(e,wt)},st.compositionend=(e,t)=>{e.composing&&(e.input.composing=!1,e.input.compositionEndedAt=t.timeStamp,Dt(e,20))};const St=f&&u<15||v&&O<604;function Ct(e,t,n,o){let s=Ge(e,t,n,e.input.shiftKey,e.state.selection.$from);if(e.someProp("handlePaste",(t=>t(e,o,s||i.p2.empty))))return!0;if(!s)return!1;let r=function(e){return 0==e.openStart&&0==e.openEnd&&1==e.content.childCount?e.content.firstChild:null}(s),l=r?e.state.tr.replaceSelectionWith(r,e.input.shiftKey):e.state.tr.replaceSelection(s);return e.dispatch(l.scrollIntoView().setMeta("paste",!0).setMeta("uiEvent","paste")),!0}it.copy=st.cut=(e,t)=>{let n=t,o=e.state.selection,i="cut"==n.type;if(o.empty)return;let s=St?null:n.clipboardData,r=o.content(),{dom:l,text:d}=Ue(e,r);s?(n.preventDefault(),s.clearData(),s.setData("text/html",l.innerHTML),s.setData("text/plain",d)):function(e,t){if(!e.dom.parentNode)return;let n=e.dom.parentNode.appendChild(document.createElement("div"));n.appendChild(t),n.style.cssText="position: fixed; left: -10000px; top: 10px";let o=getSelection(),i=document.createRange();i.selectNodeContents(t),e.dom.blur(),o.removeAllRanges(),o.addRange(i),setTimeout((()=>{n.parentNode&&n.parentNode.removeChild(n),e.focus()}),50)}(e,l),i&&e.dispatch(e.state.tr.deleteSelection().scrollIntoView().setMeta("uiEvent","cut"))},st.paste=(e,t)=>{let n=t;if(e.composing&&!D)return;let o=St?null:n.clipboardData;o&&Ct(e,o.getData("text/plain"),o.getData("text/html"),n)?n.preventDefault():function(e,t){if(!e.dom.parentNode)return;let n=e.input.shiftKey||e.state.selection.$from.parent.type.spec.code,o=e.dom.parentNode.appendChild(document.createElement(n?"textarea":"div"));n||(o.contentEditable="true"),o.style.cssText="position: fixed; left: -10000px; top: 10px",o.focus(),setTimeout((()=>{e.focus(),o.parentNode&&o.parentNode.removeChild(o),n?Ct(e,o.value,null,t):Ct(e,o.textContent,o.innerHTML,t)}),50)}(e,n)};class Mt{constructor(e,t){this.slice=e,this.move=t}}const xt=w?"altKey":"ctrlKey";it.dragstart=(e,t)=>{let n=t,i=e.input.mouseDown;if(i&&i.done(),!n.dataTransfer)return;let s=e.state.selection,r=s.empty?null:e.posAtCoords(ht(n));if(r&&r.pos>=s.from&&r.pos<=(s instanceof o.qv?s.to-1:s.to));else if(i&&i.mightDrag)e.dispatch(e.state.tr.setSelection(o.qv.create(e.state.doc,i.mightDrag.pos)));else if(n.target&&1==n.target.nodeType){let t=e.docView.nearestDesc(n.target,!0);t&&t.node.type.spec.draggable&&t!=e.docView&&e.dispatch(e.state.tr.setSelection(o.qv.create(e.state.doc,t.posBefore)))}let l=e.state.selection.content(),{dom:d,text:a}=Ue(e,l);n.dataTransfer.clearData(),n.dataTransfer.setData(St?"Text":"text/html",d.innerHTML),n.dataTransfer.effectAllowed="copyMove",St||n.dataTransfer.setData("text/plain",a),e.dragging=new Mt(l,!n[xt])},it.dragend=e=>{let t=e.dragging;window.setTimeout((()=>{e.dragging==t&&(e.dragging=null)}),50)},st.dragover=st.dragenter=(e,t)=>t.preventDefault(),st.drop=(e,t)=>{let n=t,r=e.dragging;if(e.dragging=null,!n.dataTransfer)return;let l=e.posAtCoords(ht(n));if(!l)return;let d=e.state.doc.resolve(l.pos);if(!d)return;let a=r&&r.slice;a?e.someProp("transformPasted",(e=>{a=e(a)})):a=Ge(e,n.dataTransfer.getData(St?"Text":"text/plain"),St?null:n.dataTransfer.getData("text/html"),!1,d);let c=!(!r||n[xt]);if(e.someProp("handleDrop",(t=>t(e,n,a||i.p2.empty,c))))return void n.preventDefault();if(!a)return;n.preventDefault();let h=a?(0,s.nj)(e.state.doc,d.pos,a):d.pos;null==h&&(h=d.pos);let f=e.state.tr;c&&f.deleteSelection();let u=f.mapping.map(h),p=0==a.openStart&&0==a.openEnd&&1==a.content.childCount,m=f.doc;if(p?f.replaceRangeWith(u,u,a.content.firstChild):f.replaceRange(u,u,a),f.doc.eq(m))return;let g=f.doc.resolve(u);if(p&&o.qv.isSelectable(a.content.firstChild)&&g.nodeAfter&&g.nodeAfter.sameMarkup(a.content.firstChild))f.setSelection(new o.qv(g));else{let t=f.mapping.map(h);f.mapping.maps[f.mapping.maps.length-1].forEach(((e,n,o,i)=>t=i)),f.setSelection(Ee(e,g,f.doc.resolve(t)))}e.focus(),e.dispatch(f.setMeta("uiEvent","drop"))},it.focus=e=>{e.focused||(e.domObserver.stop(),e.dom.classList.add("ProseMirror-focused"),e.domObserver.start(),e.focused=!0,setTimeout((()=>{e.docView&&e.hasFocus()&&!e.domObserver.currentSelection.eq(e.domSelection())&&Ce(e)}),20))},it.blur=(e,t)=>{let n=t;e.focused&&(e.domObserver.stop(),e.dom.classList.remove("ProseMirror-focused"),e.domObserver.start(),n.relatedTarget&&e.dom.contains(n.relatedTarget)&&e.domObserver.currentSelection.clear(),e.focused=!1)},it.beforeinput=(e,t)=>{if(g&&D&&"deleteContentBackward"==t.inputType){e.domObserver.flushSoon();let{domChangeCount:t}=e.input;setTimeout((()=>{if(e.input.domChangeCount!=t)return;if(e.dom.blur(),e.focus(),e.someProp("handleKeyDown",(t=>t(e,B(8,"Backspace")))))return;let{$cursor:n}=e.state.selection;n&&n.pos>0&&e.dispatch(e.state.tr.delete(n.pos-1,n.pos).scrollIntoView())}),50)}};for(let e in st)it[e]=st[e];function kt(e,t){if(e==t)return!0;for(let n in e)if(e[n]!==t[n])return!1;for(let n in t)if(!(n in e))return!1;return!0}class Tt{constructor(e,t){this.toDOM=e,this.spec=t||Bt,this.side=this.spec.side||0}map(e,t,n,o){let{pos:i,deleted:s}=e.mapResult(t.from+o,this.side<0?-1:1);return s?null:new Et(i-n,i-n,this)}valid(){return!0}eq(e){return this==e||e instanceof Tt&&(this.spec.key&&this.spec.key==e.spec.key||this.toDOM==e.toDOM&&kt(this.spec,e.spec))}destroy(e){this.spec.destroy&&this.spec.destroy(e)}}class At{constructor(e,t){this.attrs=e,this.spec=t||Bt}map(e,t,n,o){let i=e.map(t.from+o,this.spec.inclusiveStart?-1:1)-n,s=e.map(t.to+o,this.spec.inclusiveEnd?1:-1)-n;return i>=s?null:new Et(i,s,this)}valid(e,t){return t.from<t.to}eq(e){return this==e||e instanceof At&&kt(this.attrs,e.attrs)&&kt(this.spec,e.spec)}static is(e){return e.type instanceof At}destroy(){}}class Pt{constructor(e,t){this.attrs=e,this.spec=t||Bt}map(e,t,n,o){let i=e.mapResult(t.from+o,1);if(i.deleted)return null;let s=e.mapResult(t.to+o,-1);return s.deleted||s.pos<=i.pos?null:new Et(i.pos-n,s.pos-n,this)}valid(e,t){let n,{index:o,offset:i}=e.content.findIndex(t.from);return i==t.from&&!(n=e.child(o)).isText&&i+n.nodeSize==t.to}eq(e){return this==e||e instanceof Pt&&kt(this.attrs,e.attrs)&&kt(this.spec,e.spec)}destroy(){}}class Et{constructor(e,t,n){this.from=e,this.to=t,this.type=n}copy(e,t){return new Et(e,t,this.type)}eq(e,t=0){return this.type.eq(e.type)&&this.from+t==e.from&&this.to+t==e.to}map(e,t,n){return this.type.map(e,this,t,n)}static widget(e,t,n){return new Et(e,e,new Tt(t,n))}static inline(e,t,n,o){return new Et(e,t,new At(n,o))}static node(e,t,n,o){return new Et(e,t,new Pt(n,o))}get spec(){return this.type.spec}get inline(){return this.type instanceof At}}const Vt=[],Bt={};class Rt{constructor(e,t){this.local=e.length?e:Vt,this.children=t.length?t:Vt}static create(e,t){return t.length?$t(t,e,0,Bt):zt}find(e,t,n){let o=[];return this.findInner(null==e?0:e,null==t?1e9:t,o,0,n),o}findInner(e,t,n,o,i){for(let s=0;s<this.local.length;s++){let r=this.local[s];r.from<=t&&r.to>=e&&(!i||i(r.spec))&&n.push(r.copy(r.from+o,r.to+o))}for(let s=0;s<this.children.length;s+=3)if(this.children[s]<t&&this.children[s+1]>e){let r=this.children[s]+1;this.children[s+2].findInner(e-r,t-r,n,o+r,i)}}map(e,t,n){return this==zt||0==e.maps.length?this:this.mapInner(e,t,0,0,n||Bt)}mapInner(e,t,n,o,i){let s;for(let r=0;r<this.local.length;r++){let l=this.local[r].map(e,n,o);l&&l.type.valid(t,l)?(s||(s=[])).push(l):i.onRemove&&i.onRemove(this.local[r].spec)}return this.children.length?function(e,t,n,o,i,s,r){let l=e.slice(),d=(e,t,n,o)=>{for(let r=0;r<l.length;r+=3){let d,a=l[r+1];if(a<0||e>a+s)continue;let c=l[r]+s;t>=c?l[r+1]=e<=c?-2:-1:n>=i&&(d=o-n-(t-e))&&(l[r]+=d,l[r+1]+=d)}};for(let e=0;e<n.maps.length;e++)n.maps[e].forEach(d);let a=!1;for(let t=0;t<l.length;t+=3)if(l[t+1]<0){if(-2==l[t+1]){a=!0,l[t+1]=-1;continue}let d=n.map(e[t]+s),c=d-i;if(c<0||c>=o.content.size){a=!0;continue}let h=n.map(e[t+1]+s,-1)-i,{index:f,offset:u}=o.content.findIndex(c),p=o.maybeChild(f);if(p&&u==c&&u+p.nodeSize==h){let o=l[t+2].mapInner(n,p,d+1,e[t]+s+1,r);o!=zt?(l[t]=c,l[t+1]=h,l[t+2]=o):(l[t+1]=-2,a=!0)}else a=!0}if(a){let d=function(e,t,n,o,i,s,r){function l(e,t){for(let s=0;s<e.local.length;s++){let l=e.local[s].map(o,i,t);l?n.push(l):r.onRemove&&r.onRemove(e.local[s].spec)}for(let n=0;n<e.children.length;n+=3)l(e.children[n+2],e.children[n]+t+1)}for(let n=0;n<e.length;n+=3)-1==e[n+1]&&l(e[n+2],t[n]+s+1);return n}(l,e,t,n,i,s,r),a=$t(d,o,0,r);t=a.local;for(let e=0;e<l.length;e+=3)l[e+1]<0&&(l.splice(e,3),e-=3);for(let e=0,t=0;e<a.children.length;e+=3){let n=a.children[e];for(;t<l.length&&l[t]<n;)t+=3;l.splice(t,0,a.children[e],a.children[e+1],a.children[e+2])}}return new Rt(t.sort(Kt),l)}(this.children,s||[],e,t,n,o,i):s?new Rt(s.sort(Kt),Vt):zt}add(e,t){return t.length?this==zt?Rt.create(e,t):this.addInner(e,t,0):this}addInner(e,t,n){let o,i=0;e.forEach(((e,s)=>{let r,l=s+n;if(r=Lt(t,e,l)){for(o||(o=this.children.slice());i<o.length&&o[i]<s;)i+=3;o[i]==s?o[i+2]=o[i+2].addInner(e,r,l+1):o.splice(i,0,s,s+e.nodeSize,$t(r,e,l+1,Bt)),i+=3}}));let s=qt(i?Ft(t):t,-n);for(let t=0;t<s.length;t++)s[t].type.valid(e,s[t])||s.splice(t--,1);return new Rt(s.length?this.local.concat(s).sort(Kt):this.local,o||this.children)}remove(e){return 0==e.length||this==zt?this:this.removeInner(e,0)}removeInner(e,t){let n=this.children,o=this.local;for(let o=0;o<n.length;o+=3){let i,s=n[o]+t,r=n[o+1]+t;for(let t,n=0;n<e.length;n++)(t=e[n])&&t.from>s&&t.to<r&&(e[n]=null,(i||(i=[])).push(t));if(!i)continue;n==this.children&&(n=this.children.slice());let l=n[o+2].removeInner(i,s+1);l!=zt?n[o+2]=l:(n.splice(o,3),o-=3)}if(o.length)for(let n,i=0;i<e.length;i++)if(n=e[i])for(let e=0;e<o.length;e++)o[e].eq(n,t)&&(o==this.local&&(o=this.local.slice()),o.splice(e--,1));return n==this.children&&o==this.local?this:o.length||n.length?new Rt(o,n):zt}forChild(e,t){if(this==zt)return this;if(t.isLeaf)return Rt.empty;let n,o;for(let t=0;t<this.children.length;t+=3)if(this.children[t]>=e){this.children[t]==e&&(n=this.children[t+2]);break}let i=e+1,s=i+t.content.size;for(let e=0;e<this.local.length;e++){let t=this.local[e];if(t.from<s&&t.to>i&&t.type instanceof At){let e=Math.max(i,t.from)-i,n=Math.min(s,t.to)-i;e<n&&(o||(o=[])).push(t.copy(e,n))}}if(o){let e=new Rt(o.sort(Kt),Vt);return n?new It([e,n]):e}return n||zt}eq(e){if(this==e)return!0;if(!(e instanceof Rt)||this.local.length!=e.local.length||this.children.length!=e.children.length)return!1;for(let t=0;t<this.local.length;t++)if(!this.local[t].eq(e.local[t]))return!1;for(let t=0;t<this.children.length;t+=3)if(this.children[t]!=e.children[t]||this.children[t+1]!=e.children[t+1]||!this.children[t+2].eq(e.children[t+2]))return!1;return!0}locals(e){return Wt(this.localsInner(e))}localsInner(e){if(this==zt)return Vt;if(e.inlineContent||!this.local.some(At.is))return this.local;let t=[];for(let e=0;e<this.local.length;e++)this.local[e].type instanceof At||t.push(this.local[e]);return t}}Rt.empty=new Rt([],[]),Rt.removeOverlap=Wt;const zt=Rt.empty;class It{constructor(e){this.members=e}map(e,t){const n=this.members.map((n=>n.map(e,t,Bt)));return It.from(n)}forChild(e,t){if(t.isLeaf)return Rt.empty;let n=[];for(let o=0;o<this.members.length;o++){let i=this.members[o].forChild(e,t);i!=zt&&(i instanceof It?n=n.concat(i.members):n.push(i))}return It.from(n)}eq(e){if(!(e instanceof It)||e.members.length!=this.members.length)return!1;for(let t=0;t<this.members.length;t++)if(!this.members[t].eq(e.members[t]))return!1;return!0}locals(e){let t,n=!0;for(let o=0;o<this.members.length;o++){let i=this.members[o].localsInner(e);if(i.length)if(t){n&&(t=t.slice(),n=!1);for(let e=0;e<i.length;e++)t.push(i[e])}else t=i}return t?Wt(n?t:t.sort(Kt)):Vt}static from(e){switch(e.length){case 0:return zt;case 1:return e[0];default:return new It(e)}}}function qt(e,t){if(!t||!e.length)return e;let n=[];for(let o=0;o<e.length;o++){let i=e[o];n.push(new Et(i.from+t,i.to+t,i.type))}return n}function Lt(e,t,n){if(t.isLeaf)return null;let o=n+t.nodeSize,i=null;for(let t,s=0;s<e.length;s++)(t=e[s])&&t.from>n&&t.to<o&&((i||(i=[])).push(t),e[s]=null);return i}function Ft(e){let t=[];for(let n=0;n<e.length;n++)null!=e[n]&&t.push(e[n]);return t}function $t(e,t,n,o){let i=[],s=!1;t.forEach(((t,r)=>{let l=Lt(e,t,r+n);if(l){s=!0;let e=$t(l,t,n+r+1,o);e!=zt&&i.push(r,r+t.nodeSize,e)}}));let r=qt(s?Ft(e):e,-n).sort(Kt);for(let e=0;e<r.length;e++)r[e].type.valid(t,r[e])||(o.onRemove&&o.onRemove(r[e].spec),r.splice(e--,1));return r.length||i.length?new Rt(r,i):zt}function Kt(e,t){return e.from-t.from||e.to-t.to}function Wt(e){let t=e;for(let n=0;n<t.length-1;n++){let o=t[n];if(o.from!=o.to)for(let i=n+1;i<t.length;i++){let s=t[i];if(s.from!=o.from){s.from<o.to&&(t==e&&(t=e.slice()),t[n]=o.copy(o.from,s.from),Ht(t,i,o.copy(s.from,o.to)));break}s.to!=o.to&&(t==e&&(t=e.slice()),t[i]=s.copy(s.from,o.to),Ht(t,i+1,s.copy(o.to,s.to)))}}return t}function Ht(e,t,n){for(;t<e.length&&Kt(n,e[t])>0;)t++;e.splice(t,0,n)}function Yt(e){let t=[];return e.someProp("decorations",(n=>{let o=n(e.state);o&&o!=zt&&t.push(o)})),e.cursorWrapper&&t.push(Rt.create(e.state.doc,[e.cursorWrapper.deco])),It.from(t)}const _t={childList:!0,characterData:!0,characterDataOldValue:!0,attributes:!0,attributeOldValue:!0,subtree:!0},Ut=f&&u<=11;class Gt{constructor(){this.anchorNode=null,this.anchorOffset=0,this.focusNode=null,this.focusOffset=0}set(e){this.anchorNode=e.anchorNode,this.anchorOffset=e.anchorOffset,this.focusNode=e.focusNode,this.focusOffset=e.focusOffset}clear(){this.anchorNode=this.focusNode=null}eq(e){return e.anchorNode==this.anchorNode&&e.anchorOffset==this.anchorOffset&&e.focusNode==this.focusNode&&e.focusOffset==this.focusOffset}}class jt{constructor(e,t){this.view=e,this.handleDOMChange=t,this.queue=[],this.flushingSoon=-1,this.observer=null,this.currentSelection=new Gt,this.onCharData=null,this.suppressingSelectionUpdates=!1,this.observer=window.MutationObserver&&new window.MutationObserver((e=>{for(let t=0;t<e.length;t++)this.queue.push(e[t]);f&&u<=11&&e.some((e=>"childList"==e.type&&e.removedNodes.length||"characterData"==e.type&&e.oldValue.length>e.target.nodeValue.length))?this.flushSoon():this.flush()})),Ut&&(this.onCharData=e=>{this.queue.push({target:e.target,type:"characterData",oldValue:e.prevValue}),this.flushSoon()}),this.onSelectionChange=this.onSelectionChange.bind(this)}flushSoon(){this.flushingSoon<0&&(this.flushingSoon=window.setTimeout((()=>{this.flushingSoon=-1,this.flush()}),20))}forceFlush(){this.flushingSoon>-1&&(window.clearTimeout(this.flushingSoon),this.flushingSoon=-1,this.flush())}start(){this.observer&&this.observer.observe(this.view.dom,_t),this.onCharData&&this.view.dom.addEventListener("DOMCharacterDataModified",this.onCharData),this.connectSelection()}stop(){if(this.observer){let e=this.observer.takeRecords();if(e.length){for(let t=0;t<e.length;t++)this.queue.push(e[t]);window.setTimeout((()=>this.flush()),20)}this.observer.disconnect()}this.onCharData&&this.view.dom.removeEventListener("DOMCharacterDataModified",this.onCharData),this.disconnectSelection()}connectSelection(){this.view.dom.ownerDocument.addEventListener("selectionchange",this.onSelectionChange)}disconnectSelection(){this.view.dom.ownerDocument.removeEventListener("selectionchange",this.onSelectionChange)}suppressSelectionUpdates(){this.suppressingSelectionUpdates=!0,setTimeout((()=>this.suppressingSelectionUpdates=!1),50)}onSelectionChange(){if(Ve(this.view)){if(this.suppressingSelectionUpdates)return Ce(this.view);if(f&&u<=11&&!this.view.state.selection.empty){let e=this.view.domSelection();if(e.focusNode&&k(e.focusNode,e.focusOffset,e.anchorNode,e.anchorOffset))return this.flushSoon()}this.flush()}}setCurSelection(){this.currentSelection.set(this.view.domSelection())}ignoreSelectionChange(e){if(0==e.rangeCount)return!0;let t=e.getRangeAt(0).commonAncestorContainer,n=this.view.docView.nearestDesc(t);return n&&n.ignoreMutation({type:"selection",target:3==t.nodeType?t.parentNode:t})?(this.setCurSelection(),!0):void 0}flush(){if(!this.view.docView||this.flushingSoon>-1)return;let e=this.observer?this.observer.takeRecords():[];this.queue.length&&(e=this.queue.concat(e),this.queue.length=0);let t=this.view.domSelection(),n=!this.suppressingSelectionUpdates&&!this.currentSelection.eq(t)&&Ve(this.view)&&!this.ignoreSelectionChange(t),o=-1,i=-1,s=!1,r=[];if(this.view.editable)for(let t=0;t<e.length;t++){let n=this.registerMutation(e[t],r);n&&(o=o<0?n.from:Math.min(n.from,o),i=i<0?n.to:Math.max(n.to,i),n.typeOver&&(s=!0))}if(p&&r.length>1){let e=r.filter((e=>"BR"==e.nodeName));if(2==e.length){let t=e[0],n=e[1];t.parentNode&&t.parentNode.parentNode==n.parentNode?n.remove():t.remove()}}var l;(o>-1||n)&&(o>-1&&(this.view.docView.markDirty(o,i),l=this.view,Xt||(Xt=!0,"normal"==getComputedStyle(l.dom).whiteSpace&&console.warn("ProseMirror expects the CSS white-space property to be set, preferably to 'pre-wrap'. It is recommended to load style/prosemirror.css from the prosemirror-view package."))),this.handleDOMChange(o,i,s,r),this.view.docView&&this.view.docView.dirty?this.view.updateState(this.view.state):this.currentSelection.eq(t)||Ce(this.view),this.currentSelection.set(t))}registerMutation(e,t){if(t.indexOf(e.target)>-1)return null;let n=this.view.docView.nearestDesc(e.target);if("attributes"==e.type&&(n==this.view.docView||"contenteditable"==e.attributeName||"style"==e.attributeName&&!e.oldValue&&!e.target.getAttribute("style")))return null;if(!n||n.ignoreMutation(e))return null;if("childList"==e.type){for(let n=0;n<e.addedNodes.length;n++)t.push(e.addedNodes[n]);if(n.contentDOM&&n.contentDOM!=n.dom&&!n.contentDOM.contains(e.target))return{from:n.posBefore,to:n.posAfter};let o=e.previousSibling,i=e.nextSibling;if(f&&u<=11&&e.addedNodes.length)for(let t=0;t<e.addedNodes.length;t++){let{previousSibling:n,nextSibling:s}=e.addedNodes[t];(!n||Array.prototype.indexOf.call(e.addedNodes,n)<0)&&(o=n),(!s||Array.prototype.indexOf.call(e.addedNodes,s)<0)&&(i=s)}let s=o&&o.parentNode==e.target?S(o)+1:0,r=n.localPosFromDOM(e.target,s,-1),l=i&&i.parentNode==e.target?S(i):e.target.childNodes.length;return{from:r,to:n.localPosFromDOM(e.target,l,1)}}return"attributes"==e.type?{from:n.posAtStart-n.border,to:n.posAtEnd+n.border}:{from:n.posAtStart,to:n.posAtEnd,typeOver:e.target.nodeValue==e.oldValue}}}let Xt=!1;function Jt(e){let t=e.pmViewDesc;if(t)return t.parseRule();if("BR"==e.nodeName&&e.parentNode){if(b&&/^(ul|ol)$/i.test(e.parentNode.nodeName)){let e=document.createElement("div");return e.appendChild(document.createElement("li")),{skip:e}}if(e.parentNode.lastChild==e||b&&/^(tr|table)$/i.test(e.parentNode.nodeName))return{ignore:!0}}else if("IMG"==e.nodeName&&e.getAttribute("mark-placeholder"))return{ignore:!0};return null}function Qt(e,t,n){return Math.max(n.anchor,n.head)>t.content.size?null:Ee(e,t.resolve(n.anchor),t.resolve(n.head))}function Zt(e,t,n){let o=e.depth,i=t?e.end():e.pos;for(;o>0&&(t||e.indexAfter(o)==e.node(o).childCount);)o--,i++,t=!1;if(n){let t=e.node(o).maybeChild(e.indexAfter(o));for(;t&&!t.isLeaf;)t=t.firstChild,i++}return i}class en{constructor(e,t){this._root=null,this.focused=!1,this.trackWrites=null,this.mounted=!1,this.markCursor=null,this.cursorWrapper=null,this.lastSelectedViewDesc=void 0,this.input=new rt,this.prevDirectPlugins=[],this.pluginViews=[],this.dragging=null,this._props=t,this.state=t.state,this.directPlugins=t.plugins||[],this.directPlugins.forEach(rn),this.dispatch=this.dispatch.bind(this),this.dom=e&&e.mount||document.createElement("div"),e&&(e.appendChild?e.appendChild(this.dom):"function"==typeof e?e(this.dom):e.mount&&(this.mounted=!0)),this.editable=on(this),nn(this),this.nodeViews=sn(this),this.docView=le(this.state.doc,tn(this),Yt(this),this.dom,this),this.domObserver=new jt(this,((e,t,n,s)=>function(e,t,n,s,r){if(t<0){let t=e.input.lastSelectionTime>Date.now()-50?e.input.lastSelectionOrigin:null,n=Oe(e,t);if(n&&!e.state.selection.eq(n)){let o=e.state.tr.setSelection(n);"pointer"==t?o.setMeta("pointer",!0):"key"==t&&o.scrollIntoView(),e.dispatch(o)}return}let l=e.state.doc.resolve(t),d=l.sharedDepth(n);t=l.before(d+1),n=e.state.doc.resolve(n).after(d+1);let a=e.state.selection,c=function(e,t,n){let o,{node:s,fromOffset:r,toOffset:l,from:d,to:a}=e.docView.parseRange(t,n),c=e.domSelection(),h=c.anchorNode;if(h&&e.dom.contains(1==h.nodeType?h:h.parentNode)&&(o=[{node:h,offset:c.anchorOffset}],V(c)||o.push({node:c.focusNode,offset:c.focusOffset})),g&&8===e.input.lastKeyCode)for(let e=l;e>r;e--){let t=s.childNodes[e-1],n=t.pmViewDesc;if("BR"==t.nodeName&&!n){l=e;break}if(!n||n.size)break}let f=e.state.doc,u=e.someProp("domParser")||i.aw.fromSchema(e.state.schema),p=f.resolve(d),m=null,y=u.parse(s,{topNode:p.parent,topMatch:p.parent.contentMatchAt(p.index()),topOpen:!0,from:r,to:l,preserveWhitespace:"pre"!=p.parent.type.whitespace||"full",findPositions:o,ruleFromNode:Jt,context:p});if(o&&null!=o[0].pos){let e=o[0].pos,t=o[1]&&o[1].pos;null==t&&(t=e),m={anchor:e+d,head:t+d}}return{doc:y,sel:m,from:d,to:a}}(e,t,n);if(g&&e.cursorWrapper&&c.sel&&c.sel.anchor==e.cursorWrapper.deco.from){let t=e.cursorWrapper.deco.type.toDOM.nextSibling,n=t&&t.nodeValue?t.nodeValue.length:1;c.sel={anchor:c.sel.anchor+n,head:c.sel.anchor+n}}let h,p,m=e.state.doc,y=m.slice(c.from,c.to);8===e.input.lastKeyCode&&Date.now()-100<e.input.lastKeyCodeTime?(h=e.state.selection.to,p="end"):(h=e.state.selection.from,p="start"),e.input.lastKeyCode=null;let b=function(e,t,n,o,i){let s=e.findDiffStart(t,n);if(null==s)return null;let{a:r,b:l}=e.findDiffEnd(t,n+e.size,n+t.size);return"end"==i&&(o-=r+Math.max(0,s-Math.min(r,l))-s),r<s&&e.size<t.size?(s-=o<=s&&o>=r?s-o:0,l=s+(l-r),r=s):l<s&&(s-=o<=s&&o>=l?s-o:0,r=s+(r-l),l=s),{start:s,endA:r,endB:l}}(y.content,c.doc.content,c.from,h,p);if((v&&e.input.lastIOSEnter>Date.now()-225||D)&&r.some((e=>"DIV"==e.nodeName||"P"==e.nodeName))&&(!b||b.endA>=b.endB)&&e.someProp("handleKeyDown",(t=>t(e,B(13,"Enter")))))return void(e.input.lastIOSEnter=0);if(!b){if(!(s&&a instanceof o.Bs&&!a.empty&&a.$head.sameParent(a.$anchor))||e.composing||c.sel&&c.sel.anchor!=c.sel.head){if(c.sel){let t=Qt(e,e.state.doc,c.sel);t&&!t.eq(e.state.selection)&&e.dispatch(e.state.tr.setSelection(t))}return}b={start:a.from,endA:a.to,endB:a.to}}e.input.domChangeCount++,e.state.selection.from<e.state.selection.to&&b.start==b.endB&&e.state.selection instanceof o.Bs&&(b.start>e.state.selection.from&&b.start<=e.state.selection.from+2&&e.state.selection.from>=c.from?b.start=e.state.selection.from:b.endA<e.state.selection.to&&b.endA>=e.state.selection.to-2&&e.state.selection.to<=c.to&&(b.endB+=e.state.selection.to-b.endA,b.endA=e.state.selection.to)),f&&u<=11&&b.endB==b.start+1&&b.endA==b.start&&b.start>c.from&&"  "==c.doc.textBetween(b.start-c.from-1,b.start-c.from+1)&&(b.start--,b.endA--,b.endB--);let w,N=c.doc.resolveNoCache(b.start-c.from),O=c.doc.resolveNoCache(b.endB-c.from),S=m.resolve(b.start),C=N.sameParent(O)&&N.parent.inlineContent&&S.end()>=b.endA;if((v&&e.input.lastIOSEnter>Date.now()-225&&(!C||r.some((e=>"DIV"==e.nodeName||"P"==e.nodeName)))||!C&&N.pos<c.doc.content.size&&(w=o.Y1.findFrom(c.doc.resolve(N.pos+1),1,!0))&&w.head==O.pos)&&e.someProp("handleKeyDown",(t=>t(e,B(13,"Enter")))))return void(e.input.lastIOSEnter=0);if(e.state.selection.anchor>b.start&&function(e,t,n,o,i){if(!o.parent.isTextblock||n-t<=i.pos-o.pos||Zt(o,!0,!1)<i.pos)return!1;let s=e.resolve(t);if(s.parentOffset<s.parent.content.size||!s.parent.isTextblock)return!1;let r=e.resolve(Zt(s,!0,!0));return!(!r.parent.isTextblock||r.pos>n||Zt(r,!0,!1)<n)&&o.parent.content.cut(o.parentOffset).eq(r.parent.content)}(m,b.start,b.endA,N,O)&&e.someProp("handleKeyDown",(t=>t(e,B(8,"Backspace")))))return void(D&&g&&e.domObserver.suppressSelectionUpdates());g&&D&&b.endB==b.start&&(e.input.lastAndroidDelete=Date.now()),D&&!C&&N.start()!=O.start()&&0==O.parentOffset&&N.depth==O.depth&&c.sel&&c.sel.anchor==c.sel.head&&c.sel.head==b.endA&&(b.endB-=2,O=c.doc.resolveNoCache(b.endB-c.from),setTimeout((()=>{e.someProp("handleKeyDown",(function(t){return t(e,B(13,"Enter"))}))}),20));let M,x,k,T=b.start,A=b.endA;if(C)if(N.pos==O.pos)f&&u<=11&&0==N.parentOffset&&(e.domObserver.suppressSelectionUpdates(),setTimeout((()=>Ce(e)),20)),M=e.state.tr.delete(T,A),x=m.resolve(b.start).marksAcross(m.resolve(b.endA));else if(b.endA==b.endB&&(k=function(e,t){let n,o,s,r=e.firstChild.marks,l=t.firstChild.marks,d=r,a=l;for(let e=0;e<l.length;e++)d=l[e].removeFromSet(d);for(let e=0;e<r.length;e++)a=r[e].removeFromSet(a);if(1==d.length&&0==a.length)o=d[0],n="add",s=e=>e.mark(o.addToSet(e.marks));else{if(0!=d.length||1!=a.length)return null;o=a[0],n="remove",s=e=>e.mark(o.removeFromSet(e.marks))}let c=[];for(let e=0;e<t.childCount;e++)c.push(s(t.child(e)));if(i.HY.from(c).eq(e))return{mark:o,type:n}}(N.parent.content.cut(N.parentOffset,O.parentOffset),S.parent.content.cut(S.parentOffset,b.endA-S.start()))))M=e.state.tr,"add"==k.type?M.addMark(T,A,k.mark):M.removeMark(T,A,k.mark);else if(N.parent.child(N.index()).isText&&N.index()==O.index()-(O.textOffset?0:1)){let t=N.parent.textBetween(N.parentOffset,O.parentOffset);if(e.someProp("handleTextInput",(n=>n(e,T,A,t))))return;M=e.state.tr.insertText(t,T,A)}if(M||(M=e.state.tr.replace(T,A,c.doc.slice(b.start-c.from,b.endB-c.from))),c.sel){let t=Qt(e,M.doc,c.sel);t&&!(g&&D&&e.composing&&t.empty&&(b.start!=b.endB||e.input.lastAndroidDelete<Date.now()-100)&&(t.head==T||t.head==M.mapping.map(A)-1)||f&&t.empty&&t.head==T)&&M.setSelection(t)}x&&M.ensureMarks(x),e.dispatch(M.scrollIntoView())}(this,e,t,n,s))),this.domObserver.start(),function(e){for(let t in it){let n=it[t];e.dom.addEventListener(t,e.input.eventHandlers[t]=t=>{!ct(e,t)||at(e,t)||!e.editable&&t.type in st||n(e,t)})}b&&e.dom.addEventListener("input",(()=>null)),dt(e)}(this),this.updatePluginViews()}get composing(){return this.input.composing}get props(){if(this._props.state!=this.state){let e=this._props;this._props={};for(let t in e)this._props[t]=e[t];this._props.state=this.state}return this._props}update(e){e.handleDOMEvents!=this._props.handleDOMEvents&&dt(this),this._props=e,e.plugins&&(e.plugins.forEach(rn),this.directPlugins=e.plugins),this.updateStateInner(e.state,!0)}setProps(e){let t={};for(let e in this._props)t[e]=this._props[e];t.state=this.state;for(let n in e)t[n]=e[n];this.update(t)}updateState(e){this.updateStateInner(e,this.state.plugins!=e.plugins)}updateStateInner(e,t){let n=this.state,i=!1,s=!1;if(e.storedMarks&&this.composing&&(Nt(this),s=!0),this.state=e,t){let e=sn(this);(function(e,t){let n=0,o=0;for(let o in e){if(e[o]!=t[o])return!0;n++}for(let e in t)o++;return n!=o})(e,this.nodeViews)&&(this.nodeViews=e,i=!0),dt(this)}this.editable=on(this),nn(this);let r=Yt(this),l=tn(this),d=t?"reset":e.scrollToSelection>n.scrollToSelection?"to selection":"preserve",a=i||!this.docView.matchesNode(e.doc,l,r);!a&&e.selection.eq(n.selection)||(s=!0);let c="preserve"==d&&s&&null==this.dom.style.overflowAnchor&&function(e){let t,n,o=e.dom.getBoundingClientRect(),i=Math.max(0,o.top);for(let s=(o.left+o.right)/2,r=i+1;r<Math.min(innerHeight,o.bottom);r+=5){let o=e.root.elementFromPoint(s,r);if(!o||o==e.dom||!e.dom.contains(o))continue;let l=o.getBoundingClientRect();if(l.top>=i-20){t=o,n=l.top;break}}return{refDOM:t,refTop:n,stack:L(e.dom)}}(this);if(s){this.domObserver.stop();let t=a&&(f||g)&&!this.composing&&!n.selection.empty&&!e.selection.empty&&function(e,t){let n=Math.min(e.$anchor.sharedDepth(e.head),t.$anchor.sharedDepth(t.head));return e.$anchor.start(n)!=t.$anchor.start(n)}(n.selection,e.selection);if(a){let n=g?this.trackWrites=this.domSelection().focusNode:null;!i&&this.docView.update(e.doc,l,r,this)||(this.docView.updateOuterDeco([]),this.docView.destroy(),this.docView=le(e.doc,l,r,this.dom,this)),n&&!this.trackWrites&&(t=!0)}t||!(this.input.mouseDown&&this.domObserver.currentSelection.eq(this.domSelection())&&function(e){let t=e.docView.domFromPos(e.state.selection.anchor,0),n=e.domSelection();return k(t.node,t.offset,n.anchorNode,n.anchorOffset)}(this))?Ce(this,t):(Ae(this,e.selection),this.domObserver.setCurSelection()),this.domObserver.start()}if(this.updatePluginViews(n),"reset"==d)this.dom.scrollTop=0;else if("to selection"==d){let t=this.domSelection().focusNode;if(this.someProp("handleScrollToSelection",(e=>e(this))));else if(e.selection instanceof o.qv){let n=this.docView.domAfterPos(e.selection.from);1==n.nodeType&&q(this,n.getBoundingClientRect(),t)}else q(this,this.coordsAtPos(e.selection.head,1),t)}else c&&function({refDOM:e,refTop:t,stack:n}){let o=e?e.getBoundingClientRect().top:0;F(n,0==o?0:o-t)}(c)}destroyPluginViews(){let e;for(;e=this.pluginViews.pop();)e.destroy&&e.destroy()}updatePluginViews(e){if(e&&e.plugins==this.state.plugins&&this.directPlugins==this.prevDirectPlugins)for(let t=0;t<this.pluginViews.length;t++){let n=this.pluginViews[t];n.update&&n.update(this,e)}else{this.prevDirectPlugins=this.directPlugins,this.destroyPluginViews();for(let e=0;e<this.directPlugins.length;e++){let t=this.directPlugins[e];t.spec.view&&this.pluginViews.push(t.spec.view(this))}for(let e=0;e<this.state.plugins.length;e++){let t=this.state.plugins[e];t.spec.view&&this.pluginViews.push(t.spec.view(this))}}}someProp(e,t){let n,o=this._props&&this._props[e];if(null!=o&&(n=t?t(o):o))return n;for(let o=0;o<this.directPlugins.length;o++){let i=this.directPlugins[o].props[e];if(null!=i&&(n=t?t(i):i))return n}let i=this.state.plugins;if(i)for(let o=0;o<i.length;o++){let s=i[o].props[e];if(null!=s&&(n=t?t(s):s))return n}}hasFocus(){return this.root.activeElement==this.dom}focus(){this.domObserver.stop(),this.editable&&function(e){if(e.setActive)return e.setActive();if($)return e.focus($);let t=L(e);e.focus(null==$?{get preventScroll(){return $={preventScroll:!0},!0}}:void 0),$||($=!1,F(t,0))}(this.dom),Ce(this),this.domObserver.start()}get root(){let e=this._root;if(null==e)for(let e=this.dom.parentNode;e;e=e.parentNode)if(9==e.nodeType||11==e.nodeType&&e.host)return e.getSelection||(Object.getPrototypeOf(e).getSelection=()=>e.ownerDocument.getSelection()),this._root=e;return e||document}posAtCoords(e){return Y(this,e)}coordsAtPos(e,t=1){return G(this,e,t)}domAtPos(e,t=0){return this.docView.domFromPos(e,t)}nodeDOM(e){let t=this.docView.descAt(e);return t?t.nodeDOM:null}posAtDOM(e,t,n=-1){let o=this.docView.posFromDOM(e,t,n);if(null==o)throw new RangeError("DOM position not inside the editor");return o}endOfTextblock(e,t){return function(e,t,n){return Z==t&&ee==n?te:(Z=t,ee=n,te="up"==n||"down"==n?function(e,t,n){let o=t.selection,i="up"==n?o.$from:o.$to;return J(e,t,(()=>{let{node:t}=e.docView.domFromPos(i.pos,"up"==n?-1:1);for(;;){let n=e.docView.nearestDesc(t,!0);if(!n)break;if(n.node.isBlock){t=n.dom;break}t=n.dom.parentNode}let o=G(e,i.pos,1);for(let e=t.firstChild;e;e=e.nextSibling){let t;if(1==e.nodeType)t=e.getClientRects();else{if(3!=e.nodeType)continue;t=x(e,0,e.nodeValue.length).getClientRects()}for(let e=0;e<t.length;e++){let i=t[e];if(i.bottom>i.top+1&&("up"==n?o.top-i.top>2*(i.bottom-o.top):i.bottom-o.bottom>2*(o.bottom-i.top)))return!1}}return!0}))}(e,t,n):function(e,t,n){let{$head:o}=t.selection;if(!o.parent.isTextblock)return!1;let i=o.parentOffset,s=!i,r=i==o.parent.content.size,l=e.domSelection();return Q.test(o.parent.textContent)&&l.modify?J(e,t,(()=>{let t=l.getRangeAt(0),i=l.focusNode,s=l.focusOffset,r=l.caretBidiLevel;l.modify("move",n,"character");let d=!(o.depth?e.docView.domAfterPos(o.before()):e.dom).contains(1==l.focusNode.nodeType?l.focusNode:l.focusNode.parentNode)||i==l.focusNode&&s==l.focusOffset;return l.removeAllRanges(),l.addRange(t),null!=r&&(l.caretBidiLevel=r),d})):"left"==n||"backward"==n?s:r}(e,t,n))}(this,t||this.state,e)}destroy(){this.docView&&(function(e){e.domObserver.stop();for(let t in e.input.eventHandlers)e.dom.removeEventListener(t,e.input.eventHandlers[t]);clearTimeout(e.input.composingTimeout),clearTimeout(e.input.lastIOSEnterFallbackTimeout)}(this),this.destroyPluginViews(),this.mounted?(this.docView.update(this.state.doc,[],Yt(this),this),this.dom.textContent=""):this.dom.parentNode&&this.dom.parentNode.removeChild(this.dom),this.docView.destroy(),this.docView=null)}get isDestroyed(){return null==this.docView}dispatchEvent(e){return function(e,t){at(e,t)||!it[t.type]||!e.editable&&t.type in st||it[t.type](e,t)}(this,e)}dispatch(e){let t=this._props.dispatchTransaction;t?t.call(this,e):this.updateState(this.state.apply(e))}domSelection(){return this.root.getSelection()}}function tn(e){let t=Object.create(null);return t.class="ProseMirror",t.contenteditable=String(e.editable),t.translate="no",e.someProp("attributes",(n=>{if("function"==typeof n&&(n=n(e.state)),n)for(let e in n)"class"==e&&(t.class+=" "+n[e]),"style"==e?t.style=(t.style?t.style+";":"")+n[e]:t[e]||"contenteditable"==e||"nodeName"==e||(t[e]=String(n[e]))})),[Et.node(0,e.state.doc.content.size,t)]}function nn(e){if(e.markCursor){let t=document.createElement("img");t.className="ProseMirror-separator",t.setAttribute("mark-placeholder","true"),t.setAttribute("alt",""),e.cursorWrapper={dom:t,deco:Et.widget(e.state.selection.head,t,{raw:!0,marks:e.markCursor})}}else e.cursorWrapper=null}function on(e){return!e.someProp("editable",(t=>!1===t(e.state)))}function sn(e){let t=Object.create(null);function n(e){for(let n in e)Object.prototype.hasOwnProperty.call(t,n)||(t[n]=e[n])}return e.someProp("nodeViews",n),e.someProp("markViews",n),t}function rn(e){if(e.spec.state||e.spec.filterTransaction||e.spec.appendTransaction)throw new RangeError("Plugins passed directly to the view must not have a state component")}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,