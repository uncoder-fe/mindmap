"use strict";(self.webpackChunkmindmap=self.webpackChunkmindmap||[]).push([[187],{86600:(e,t,n)=>{n.d(t,{Z:()=>F});var i=n(67294),o=n(1825),a=n(68647);const r="cGYF4efqnMLdd0RCCefQ",l="bRxqW923xuTJusHtTGPG",c="wc7DfczhslH7wLro2WKO",d=function(e){var t=e.onClick,n=function(e){t(e)},o=a.IC.map((function(e,t){return i.createElement("div",{key:t,onClick:function(){return n({type:"priority",value:t+1})}},i.createElement("img",{src:e,alt:"icon"}))})),d=a.Xy.map((function(e,t){return i.createElement("div",{key:t,onClick:function(){return n({type:"progress",value:t+1})}},i.createElement("img",{src:e,alt:"icon"}))}));return i.createElement("div",{className:"M1WwPMNoyAHI_Q1tmLIE"},i.createElement("div",{className:r},i.createElement("div",{className:l},"优先级图标"),i.createElement("div",{className:c},o)),i.createElement("div",{className:r},i.createElement("div",{className:l},"进度图标"),i.createElement("div",{className:c},d)))};var s=n(21888),h=n(39118),u=n(94210);const p={"structure-panel":"_2EhaubzEMtxDsOIq1pXR","structure-title":"TAmBcrr0ZCobmmtgvvoC","structure-area":"COKqSUC4VAPWZaBA91mM","structure-item":"f_1dgcMX70SrBEXXt97_","structure-item-active":"oaHegNp_Gqgzl5njf7fv","structure-gap":"U3oNOULK7DlyXigRV_PK","structure-gap-input":"gdZVX3WzUSRxeJ8sZpnc","background-color-overlay":"caIEEozj40YrvftXiXWc",color:"b4eoVfNGZ3xU2ZdoS2Nt","color-demo":"BLUX6FTWBRifJUKPjq8O"};var f=n(49332),m=[{key:"H",icon:"left-and-right-branch"},{key:"LR",icon:"right-branch"},{key:"RL",icon:"left-branch"},{key:"TB",icon:"lower-branch"}];const g=function(e){var t=e.gap,n=e.backgroundColor,o=e.structure,a=e.onClick,r=(0,i.useRef)(null),l=(0,i.useRef)(null),c=function(){a(f.aU.Gap,{vgap:Number(r.current.value)+20,hgap:Number(l.current.value)+25})},d=m.map((function(e){var t=o===e.key?p["structure-item-active"]:"";return i.createElement("div",{key:e.key,className:"".concat(p["structure-item"]," ").concat(t),onClick:function(){return t=e.key,void a(f.aU.Structure,t);var t}},i.createElement("iconpark-icon",{name:e.icon,size:"50"}))}));return i.createElement("div",{className:p["structure-panel"]},i.createElement("div",{className:p["structure-title"]},"布局结构"),i.createElement("div",{className:p["structure-area"]},d),i.createElement("div",{className:p["structure-title"]},"节点间距"),i.createElement("div",{className:p["structure-gap"]},i.createElement("div",null,"水平方向:",i.createElement(s.Z,{className:p["structure-gap-input"],ref:r,min:1,max:100,defaultValue:t.vgap-20,onChange:c})),i.createElement("div",null,"垂直方向:",i.createElement(s.Z,{className:p["structure-gap-input"],ref:l,min:1,max:100,defaultValue:t.hgap-25,onChange:c})),i.createElement("div",{className:p["structure-title"]},"背景"),i.createElement("div",{className:p["structure-background-panel"]},i.createElement("div",{className:p.color},"纯色:",i.createElement(h.Z,{overlayClassName:p["background-color-overlay"],content:i.createElement(u.xS,{color:n,onChange:function(e){console.log(e.hex),a(f.aU.BackgroundColor,e.hex)}}),title:"颜色选择器",trigger:"click"},i.createElement("div",{className:p["color-demo"],style:{backgroundColor:n}}))))))};var v=n(31183),y=n(82160),b=[],x=function(e,t,n){for(var i=t||"0",o=n||b,a=[],r=0;r<3;r++){var l="".concat(i,"-").concat(r);o.push({title:l,key:l}),r<2&&a.push(l)}if(e<0)return o;var c=e-1;a.forEach((function(e,t){return o[t].children=[],x(c,e,o[t].children)}))};x(1);const C=function(e){var t=e.minderData,n=e.onExpand,o=(0,i.useState)([]),a=o[0],r=o[1],l=(0,i.useState)([]),c=l[0],d=l[1];return(0,i.useEffect)((function(){var e=t.jsonData,n=[];(0,y.it)([e],(function(e){e.title=e.text,e.key=e.id,"expand"==e.expandState&&n.push(e.id)})),r(n),d([e])}),[t]),i.createElement(v.Z,{className:"draggable-tree",expandedKeys:a,blockNode:!0,onDragEnter:function(e){console.log(e)},onDrop:function(e){console.log(e);var t,n=e.node.key,i=e.dragNode.key,o=e.node.pos.split("-"),a=e.dropPosition-Number(o[o.length-1]),r=function(e,t,n){for(var i=0;i<e.length;i++){if(e[i].key===t)return n(e[i],i,e);e[i].children&&r(e[i].children,t,n)}},l=function(e,t,n){if(n||2===arguments.length)for(var i,o=0,a=t.length;o<a;o++)!i&&o in t||(i||(i=Array.prototype.slice.call(t,0,o)),i[o]=t[o]);return e.concat(i||Array.prototype.slice.call(t))}([],c,!0);if(r(l,i,(function(e,n,i){i.splice(n,1),t=e})),e.dropToGap)if((e.node.props.children||[]).length>0&&e.node.props.expanded&&1===a)r(l,n,(function(e){e.children=e.children||[],e.children.unshift(t)}));else{var s,h=[];r(l,n,(function(e,t,n){h=n,s=t})),-1===a?h.splice(s,0,t):h.splice(s+1,0,t)}else r(l,n,(function(e){e.children=e.children||[],e.children.unshift(t)}));d(l)},onExpand:function(e,t){var i=t.expanded,o=t.node;r(e),"Root"!==o.id&&n({id:o.id,newAttributes:{expandState:i?"expand":"collapse"}})},treeData:c})},k={"theme-group":"xcshyEAHfftCUbVfjLi5",theme:"vKrwoZSlrVxX5LUGsuDq","theme-active":"QXWMI2sLoq9qSAXzMqX0"},S=function(e){var t=e.theme,n=e.onClick,o=a.j5.map((function(e,o){var a=t===o?k["theme-active"]:"";return i.createElement("div",{key:o,className:"".concat(k.theme," ").concat(a),onClick:function(){n(o)}},i.createElement("img",{src:e,alt:"主题"}))}));return i.createElement("div",{className:k["theme-panel"]},i.createElement("div",{className:k["theme-group"]},o))};var T=n(20249);const E={"style-title":"lYzB3LbTpob9fBEoeSMr",buttons:"Y4L4JMu_szYzc71MIMYH","button-color":"P47X1W_5dVPSpIFGpDrQ","button-color-text":"LCXPkVyV0_NdQ7Q8tui2","button-color-line":"z8OoiIxGU8w1vEwD_hNK","button-active":"pQII0_s337Vyr8p4eni_"};var w=function(){return w=Object.assign||function(e){for(var t,n=1,i=arguments.length;n<i;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},w.apply(this,arguments)},A=T.Z.Option;const I=function(e){var t=e.minderInstance,n=e.selectIds,o=(e.onClick,(0,i.useState)(null)),a=o[0],r=o[1],l=function(e,i){var o=a.fontStyle||{},r=o;if("font-family"===e)r["font-family"]=i;else if("font-size"===e)r["font-size"]=i;else if("text-align"===e)r["text-align"]=i;else if("color"===e)r.color=i;else if("font-style"===e)r["font-style"]="italic"!==o["font-style"]?"italic":"";else if("text-decoration"===e){var l=[];o["text-decoration"]&&(l=o["text-decoration"]),l.includes(i)?l=l.filter((function(e){return e!==i})):l.push(i),r["text-decoration"]=l}else"font-weight"===e?r["font-weight"]="bold"!==o["font-weight"]?"bold":"":"reset"===e&&(r=null);t.handleAction(f.aU.Editor,{id:n[0],newAttributes:{fontStyle:w({},r)}})};return(0,i.useEffect)((function(){n.length?(0,y.it)([t.jsonData],(function(e){e.id===n[0]&&r(e)})):r(null)}),[n]),i.createElement("div",{className:E["style-panel"]},a?i.createElement(i.Fragment,null,i.createElement("div",{className:E["style-title"]},"字体"),i.createElement("div",{className:E["style-group"],key:a.id},i.createElement(T.Z,{value:a.fontStyle&&a.fontStyle["font-family"]||"微软雅黑, Microsoft YaHei",style:{width:120},onChange:function(e){return l("font-family",e)}},i.createElement(A,{value:"微软雅黑, Microsoft YaHei"},"微软雅黑"),i.createElement(A,{value:"宋体, SimSun, Songti SC"},"宋体"),i.createElement(A,{value:"楷体, 楷体_GB2312, SimKai, STKaiti"},"楷体"),i.createElement(A,{value:"黑体, SimHei, Heiti SC"},"黑体"),i.createElement(A,{value:"隶书, SimLi"},"隶书")),i.createElement(T.Z,{style:{width:60,marginLeft:8},value:a.fontStyle&&a.fontStyle["font-size"]||"12px",onChange:function(e){return l("font-size",e)}},i.createElement(A,{value:"10px"},"10"),i.createElement(A,{value:"12px"},"12"),i.createElement(A,{value:"16px"},"16"),i.createElement(A,{value:"18px"},"18"),i.createElement(A,{value:"24px"},"24"),i.createElement(A,{value:"32px"},"32")),i.createElement(T.Z,{value:a.fontStyle&&a.fontStyle["text-align"]||"left",style:{marginTop:10,width:120},onChange:function(e){return l("text-align",e)}},i.createElement(A,{value:"left"},"左对齐"),i.createElement(A,{value:"center"},"居中"),i.createElement(A,{value:"right"},"右对齐")),i.createElement("div",{className:E.buttons},i.createElement(h.Z,{overlayClassName:E["background-color-overlay"],content:i.createElement(u.xS,{color:a.fontStyle&&a.fontStyle.color||"#000",onChange:function(e){return l("color",e.hex)}}),title:"颜色选择器",trigger:"click"},i.createElement("div",{className:E["button-color"]},i.createElement("span",{className:E["button-color-text"]},"A"),i.createElement("span",{className:E["button-color-line"],style:{background:a.fontStyle&&a.fontStyle.color||"#000"}}))),i.createElement("div",{className:a.fontStyle&&a.fontStyle["text-decoration"]&&a.fontStyle["text-decoration"].includes("underline")?E["button-active"]:"",onClick:function(){return l("text-decoration","underline")}},i.createElement("iconpark-icon",{name:"text-underline",size:"18"})),i.createElement("div",{className:a.fontStyle&&a.fontStyle["text-decoration"]&&a.fontStyle["text-decoration"].includes("line-through")?E["button-active"]:"",onClick:function(){return l("text-decoration","line-through")}},i.createElement("iconpark-icon",{name:"strikethrough",size:"18"})),i.createElement("div",{className:a.fontStyle&&"bold"===a.fontStyle["font-weight"]?E["button-active"]:"",onClick:function(){return l("font-weight",!0)}},i.createElement("iconpark-icon",{name:"text-bold",size:"18"})),i.createElement("div",{className:a.fontStyle&&"italic"===a.fontStyle["font-style"]?E["button-active"]:"",onClick:function(){return l("font-style",!0)}},i.createElement("iconpark-icon",{name:"text-italic",size:"18"})),i.createElement("div",{onClick:function(){return l("reset",!0)}},i.createElement("iconpark-icon",{name:"clear-format",size:"18"}))))):i.createElement("div",null,"先选中一个节点"))},F=function(e){var t=e.selectIds,n=e.visible,a=e.panel,r=e.minderInstance,l=e.minderData,c=e.onClose,s=(0,i.useState)(""),h=s[0],u=s[1];(0,i.useEffect)((function(){u(a)}),[a]);var p=function(e){r.handleAction(f.aU.Icon,e)},m=r.structure,v=r.gap,y=r.theme,b=r.backgroundColor;return i.createElement(o.Z,{width:300,title:"主题",placement:"right",mask:!1,closable:!0,onClose:c,visible:n,key:"placement"},"icon"===h&&i.createElement(d,{onClick:p}),"theme"===h&&i.createElement(S,{theme:y,onClick:function(e){r.handleAction(f.aU.Theme,e)}}),"style"===h&&i.createElement(I,{minderInstance:r,selectIds:t,onClick:p}),"structure"===h&&i.createElement(g,{backgroundColor:b,gap:v,structure:m,onClick:function(e,t){r.handleAction(e,t)}}),"mainPoint"===h&&i.createElement(C,{minderData:l,onExpand:function(e){var t=e.id,n=e.newAttributes;r.handleAction(f.aU.Editor,{id:t,newAttributes:n})}}))}},49332:(e,t,n)=>{var i,o,a,r;n.d(t,{A5:()=>c,C:()=>o,Y2:()=>a,Yp:()=>r,aU:()=>l,vA:()=>i}),function(e){e.LeftToRight="LR",e.RightToLeft="RL",e.TopToBottom="TB",e.Horizontal="H"}(i||(i={})),function(e){e.Expand="expand",e.Collapse="collapse"}(o||(o={})),function(e){e[e.Big=24]="Big",e[e.middle=18]="middle",e[e.small=14]="small",e[e.basic=14]="basic"}(a||(a={})),function(e){e[e.Max=2]="Max",e[e.Min=.1]="Min",e[e.Step=.05]="Step"}(r||(r={}));var l,c=6;!function(e){e.Structure="Structure",e.Undo="Undo",e.Redo="Redo",e.Theme="Theme",e.Gap="Gap",e.BackgroundColor="BackgroundColor",e.Scale="Scale",e.Icon="Icon",e.Hyperlink="Hyperlink",e.FullScreen="FullScreen",e.NodeTheme="NodeTheme",e.ExpandAllTopic="ExpandAllTopic",e.Editor="Editor",e.CollapseAllTopic="CollapseAllTopic",e.OrientationCenterTopic="OrientationCenterTopic",e.InsertSiblingTopic="InsertSiblingTopic",e.InsertSubTopic="InsertSubTopic",e.InsertImage="InsertImage",e.DeleteTopic="DeleteTopic",e.DeleteHyperlink="DeleteHyperlink",e.OpenHyperlinkModal="OpenHyperlinkModal",e.Copy="Copy",e.Cut="Cut",e.Paste="Paste"}(l||(l={}))},27262:(e,t,n)=>{n.d(t,{B:()=>_});var i=n(25290),o=n(29527),a=n(95416),r=n(40804),l=n(82160),c=n(49332),d=n(68647),s=n(90623),h='\n<div class="mind-menu-box-container mind-menu-box-container-sub">\n    <div class="context-menu-item" data-value="'.concat(c.aU.ExpandAllTopic,'">一键展开主题</div>\n    <div class="context-menu-item" data-value="').concat(c.aU.CollapseAllTopic,'">一键收起主题</div>\n    <div class="context-menu-item" data-value="').concat(c.aU.OrientationCenterTopic,'">回到中心主题</div>\n</div>\n'),u='\n<div class="mind-menu-box-container">\n    <div class="context-menu-item" data-value="'.concat(c.aU.InsertSiblingTopic,'">插入同级主题<span>Enter</span></div>\n    <div class="context-menu-item" data-value="').concat(c.aU.InsertSubTopic,'">插入子主题<span>Tab</span></div>\n    <div class="context-menu-item" data-value="').concat(c.aU.DeleteTopic,'">删除主题<span>Delete</span></div>\n    <div class="context-menu-item-line"></div>\n    <div class="context-menu-item" data-value="').concat(c.aU.DeleteHyperlink,'">移除链接<span></span></div>\n    <div class="context-menu-item" data-value="').concat(c.aU.OpenHyperlinkModal,'">插入链接<span></span></div>\n    <div class="context-menu-item" data-value="').concat(c.aU.InsertImage,'">插入图片<span></span></div>\n    <div class="context-menu-item-line"></div>\n    <div class="context-menu-item" data-value="').concat(c.aU.Copy,'">复制<span>Cmd + C</span></div>\n    <div class="context-menu-item" data-value="').concat(c.aU.Cut,'">剪切<span>Cmd + X</span></div>\n    <div class="context-menu-item" data-value="').concat(c.aU.Paste,'">粘贴<span>Cmd + V</span></div>\n</div>\n'),p=function(e,t){return void 0===t&&(t=""),'\n    <div class="mind-toast">\n        <div class=\''.concat(t,"'>").concat(e,"</div>\n    </div>\n    ")},f=[{fill:"#FF374C",stroke:"#FF374C",fontColor:"#FFF",shape:"rounded"},{fill:"#58CD6A",stroke:"#58CD6A",fontColor:"#FFF",shape:"rounded"},{fill:"#4CC2EE",stroke:"#4CC2EE",fontColor:"#FFF",shape:"rounded"},{fill:"#FFBF29",stroke:"#FFBF29",fontColor:"#FFF",shape:"rounded"},{fill:"#8C7BE8",stroke:"#8C7BE8",fontColor:"#FFF",shape:"rounded"},{fill:"#B7BCCD",stroke:"#B7BCCD",fontColor:"#FFF",shape:"rounded"},{fill:"#fff",stroke:"#FF374C",fontColor:"#FF374C",shape:"rounded"},{fill:"#fff",stroke:"#58CD6A",fontColor:"#58CD6A",shape:"rounded"},{fill:"#fff",stroke:"#4CC2EE",fontColor:"#4CC2EE",shape:"rounded"},{fill:"#fff",stroke:"#FFBF29",fontColor:"#FFBF29",shape:"rounded"},{fill:"#fff",stroke:"#8C7BE8",fontColor:"#8C7BE8",shape:"rounded"},{fill:"#fff",stroke:"#B7BCCD",fontColor:"#B7BCCD",shape:"rounded"}],m=[{name:"经典绿",backgroundColor:"#ffffff",backgroundImage:"",rootStyle:{fontColor:"#fff",fill:"#12BB37",stroke:"#12BB37",radius:8},freeNodeStyle:{fontColor:"#FFF",fill:"#FFC72A",stroke:"#FFC72A",radius:8},nodeStyle:{fontColor:"#000",fill:"#EFF2F5",stroke:"#EFF2F5",radius:8},baseStyle:{fill:"#FFF",fontColor:"#000",radius:8},lineStyle:{"stroke-dasharray":"0 0",fill:["#333333","#333333","#333333","#333333","#333333","#333333","#333333"],shape:""},expandStyle:{fill:"#333333"}},{name:"七彩虹",backgroundColor:"#ffffff",backgroundImage:"",rootStyle:{fontColor:"#fff",fill:"#12BB37",stroke:"#12BB37",radius:20},freeNodeStyle:{fontColor:"#FFF",fill:"#ff703d",stroke:"#ff703d",radius:20},nodeStyle:{fontColor:"#000",fill:"#EFF2F5",stroke:"#EFF2F5",radius:20},baseStyle:{fill:"#FFF",fontColor:"#000",radius:20},lineStyle:{"stroke-dasharray":"0 0",fill:["#F85D5D","#FF9754","#FFD645","#49CD8C","#40C0FF","#546ED6","#A45DDC"],shape:""},expandStyle:{fill:"#19A3FF"}},{name:"商务蓝",backgroundColor:"#ffffff",backgroundImage:"",rootStyle:{fontColor:"#fff",fill:"#1E4CF4",stroke:"#1E4CF4",radius:8},freeNodeStyle:{fontColor:"#FFF",fill:"#ff8f3a",stroke:"#ff8f3a",radius:8},nodeStyle:{fontColor:"#000",fill:"#EFF2F5",stroke:"#EFF2F5",radius:8},baseStyle:{fill:"#FFF",fontColor:"#000",radius:8},lineStyle:{"stroke-dasharray":"2 6",fill:["#19A3FF","#19A3FF","#19A3FF","#19A3FF","#19A3FF","#19A3FF","#19A3FF"],shape:""},expandStyle:{fill:"#19A3FF"}},{name:"活力橙",backgroundColor:"#fff6f3",backgroundImage:"",rootStyle:{fontColor:"#fff",fill:"#FF7034",stroke:"#FF7034",radius:20},freeNodeStyle:{fontColor:"#fff",fill:"#6ECF45",stroke:"#6ECF45",radius:20},nodeStyle:{fontColor:"#333",fill:"#FFFFFF",stroke:"#FFFFFF",radius:20},baseStyle:{fill:"rgb(255, 246, 243)",fontColor:"#333",radius:20},lineStyle:{"stroke-dasharray":"0 0",fill:["#FE9200","#FE9200","#FE9200","#FE9200","#FE9200","#FE9200","#FE9200"],shape:""},expandStyle:{fill:"#19A3FF"}},{name:"小黄鸭",backgroundColor:"#f8d731",backgroundImage:"",rootStyle:{fontColor:"#fff",fill:"#37A5FF",stroke:"#333333",radius:20},freeNodeStyle:{fontColor:"#fff",fill:"#12BB37",stroke:"#000",radius:20},nodeStyle:{fontColor:"#000",fill:"#FFA024",stroke:"#333333",radius:20},baseStyle:{fill:"#f8d731",fontColor:"#000",radius:20},lineStyle:{"stroke-dasharray":"0 0",fill:["#333333","#333333","#333333","#333333","#333333","#333333","#333333"],shape:""},expandStyle:{fill:"#19A3FF"}},{name:"粉红葡萄",backgroundColor:"#ffd0d3",backgroundImage:"",rootStyle:{fontColor:"#fff",fill:"#8B6DE1",stroke:"#8B6DE1",radius:20},freeNodeStyle:{fontColor:"#FFF",fill:"#4D9BFF",stroke:"#4D9BFF",radius:20},nodeStyle:{fontColor:"#fff",fill:"#F3688A",stroke:"#F3688A",radius:20},baseStyle:{fill:"rgb(255, 208, 211)",fontColor:"#000000",radius:20},lineStyle:{"stroke-dasharray":"0 0",fill:["#A6656A","#A6656A","#A6656A","#A6656A","#A6656A","#A6656A","#A6656A"],shape:""},expandStyle:{fill:"#19A3FF"}},{name:"红蓝对对碰",backgroundColor:"#fad8df",backgroundImage:"",rootStyle:{fontColor:"#fff",fill:"#19A3FF",stroke:"#19A3FF",radius:8},freeNodeStyle:{fontColor:"#fff",fill:"#F75F7C",stroke:"#F75F7C",radius:8},nodeStyle:{fontColor:"#000",fill:"#fff",stroke:"#fff",radius:8},baseStyle:{fill:"rgb(250, 216, 223)",fontColor:"#000",radius:8},lineStyle:{"stroke-dasharray":"0 0",fill:["#333333","#333333","#333333","#333333","#333333","#333333","#333333"],shape:""},expandStyle:{fill:"#19A3FF"}},{name:"暗夜精灵",backgroundColor:"#343643",backgroundImage:"",rootStyle:{fontColor:"rgb(204, 204, 204)",fill:"#343643",stroke:"#50FA7B",radius:8},freeNodeStyle:{fontColor:"#fff",fill:"#12BB37",stroke:"#12BB37",radius:8},nodeStyle:{fontColor:"rgb(204, 204, 204)",fill:"#343643",stroke:"#50FA7B",radius:8},baseStyle:{fontColor:"rgb(204, 204, 204)",fill:"#343643",stroke:"#343643",radius:8},lineStyle:{"stroke-dasharray":"0 0",fill:["#50FA7B","#50FA7B","#50FA7B","#50FA7B","#50FA7B","#50FA7B","#50FA7B"],shape:""},expandStyle:{fill:"#19A3FF"}}],g=function(){return g=Object.assign||function(e){for(var t,n=1,i=arguments.length;n<i;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},g.apply(this,arguments)},v=[18,12],y=[18,12],b="#f50",x=[15,8];function C(e,t,n){var i=t.width,o=t.height,a=t.vgap,r=t.hgap,c=t.depth,d=t.data,s=r,h=a,u={};0===c?(u.fill=n.rootStyle.fill,u.stroke=n.rootStyle.stroke,u.radius=n.rootStyle.radius,d.isFreeNode&&(u.fill=n.freeNodeStyle.fill,u.stroke=n.freeNodeStyle.stroke,u.radius=n.freeNodeStyle.radius)):1===c?(u.fill=n.nodeStyle.fill,u.stroke=n.nodeStyle.stroke,u.radius=n.nodeStyle.radius):c>1&&(u.fill=n.baseStyle.fill,u.stroke=n.baseStyle.stroke,u.radius=n.baseStyle.radius),void 0!==d.nodeTheme&&null!==d.nodeTheme&&(u.fill=f[d.nodeTheme].fill,u.stroke=f[d.nodeTheme].stroke);var p=(0,l.jt)(e,"g","mind-node-bg");(0,l.jt)(p,"path").attr("d",(0,l.NK)(s-x[0],h-x[1],i-2*r+2*x[0],o-2*a+2*x[1],u.radius)).attr("fill",u.fill).attr("stroke-width",2).attr("stroke",u.stroke)}function k(e,t,n){var i=t.id,o=t.depth,a=t.data,r=t.width,s=t.height,h=t.vgap,u=t.hgap,p=a.image,m=a.imageSize,g=(0,l.yv)(o),v=(0,l.jt)(e,"g","mind-node-editor"),y=u,b=h,x=s-2*h,C=r-2*u,k=y;p&&(b+=m.height+c.A5,x=x-m.height-c.A5),a.priority&&(k+=d.rM,C-=d.rM),a.progress&&(k+=d.rM,C-=d.rM),a.hyperlink&&(C-=d.rM);var S={};0===o?(S.fill=n.rootStyle.fill,S.fontColor=n.rootStyle.fontColor,a.isFreeNode&&(S.fill=n.freeNodeStyle.fill,S.fontColor=n.freeNodeStyle.fontColor)):1===o?(S.fill=n.nodeStyle.fill,S.fontColor=n.nodeStyle.fontColor):o>1&&(S.fill=n.baseStyle.fill,S.fontColor=n.baseStyle.fontColor),void 0!==a.nodeTheme&&null!==a.nodeTheme&&(S.fill=f[a.nodeTheme].fill,S.fontColor=f[a.nodeTheme].fontColor);var T=(0,l.jt)(v,"g","node-mind-priority");a.priority?(0,l.jt)(T,"image").attr("xmlns","http://www.w3.org/2000/svg").attr("href",d.IC[a.priority-1]).attr("crossOrigin","anonymous").attr("x",y).attr("y",b+(x-d.$3)/2).attr("width",d.rM).attr("height",d.$3):T.remove();var E=(0,l.jt)(v,"g","node-mind-progress");a.progress?(0,l.jt)(E,"image").attr("xmlns","http://www.w3.org/2000/svg").attr("href",d.Xy[a.progress-1]).attr("crossOrigin","anonymous").attr("x",a.priority?y+d.rM:y).attr("y",b+(x-d.$3)/2).attr("width",d.rM).attr("height",d.$3):E.remove();var w=(0,l.jt)(v,"foreignObject").attr("x",k).attr("y",b).attr("width",C).attr("height",x).style("display","inline-block").style("font-size","".concat(g,"px")).style("color",S.fontColor),A=(0,l.jt)(w,"div","mind-node-editor").attr("id","editor-wrap-".concat(i)).style("background",S.fill),I=(0,l.jt)(w,"div","mind-node-editor-text").classed("text-autowrap",r>=500).datum({id:i}).html("".concat(a.richText));a.fontStyle?(I.style("font-family",a.fontStyle["font-family"]),I.style("font-size",a.fontStyle["font-size"]),I.style("font-weight",a.fontStyle["font-weight"]),I.style("font-style",a.fontStyle["font-style"]),I.style("text-align",a.fontStyle["text-align"]),I.style("text-decoration",a.fontStyle["text-decoration"]&&a.fontStyle["text-decoration"].join(" ")),I.style("color",a.fontStyle.color)):(I.style("font-family","inherit"),I.style("font-weight","normal"),I.style("font-style","normal"),I.style("text-align","left"),I.style("text-decoration","inherit"),I.style("color",S.fontColor));var F=(0,l.jt)(v,"g","mind-node-hyperLink");if(a.hyperlink){var D="none"===I.style("display")?A.select("div").node().offsetWidth:I.node().offsetWidth;F.attr("transform","translate(".concat(k+D,", ").concat(b+(x-d.$3)/2,")"));var M=(0,l.jt)(F,"a","mind-node-hyperLink-a");M.on("click touchend",(function(e){"touchend"===e.type&&(e.preventDefault(),e.stopPropagation()),window.open(a.hyperlink,"_blank")})),(0,l.jt)(M,"svg").attr("width",d.rM).attr("height",d.$3).attr("fill","Root"===i?S.fontColor:"#19A3FF").html('\n<g>\n<path fill="correntColor" d="M12.7273 15.2C12.7273 14.7582 13.0529 14.4 13.4545 14.4L16.3636 14.4C17.5686 14.4 18.5455 13.3255 18.5455 12C18.5455 10.6745 17.5686 9.6 16.3636 9.6L13.4545 9.6C13.0529 9.6 12.7273 9.24183 12.7273 8.8C12.7273 8.35817 13.0529 8 13.4545 8L16.3636 8C18.3719 8 20 9.79086 20 12C20 14.2091 18.3719 16 16.3636 16L13.4545 16C13.0529 16 12.7273 15.6418 12.7273 15.2Z"/>\n<path fill="correntColor" d="M10.5455 14.4C10.9471 14.4 11.2727 14.7582 11.2727 15.2C11.2727 15.6418 10.9471 16 10.5455 16L7.63636 16C5.62805 16 4 14.2091 4 12C4 9.79086 5.62806 8 7.63636 8L10.5455 8C10.9471 8 11.2727 8.35817 11.2727 8.8C11.2727 9.24183 10.9471 9.6 10.5455 9.6L7.63636 9.6C6.43138 9.6 5.45454 10.6745 5.45454 12C5.45454 13.3255 6.43138 14.4 7.63636 14.4L10.5455 14.4Z"/>\n<path fill="correntColor" d="M14.1818 12.8C14.5835 12.8 14.9091 12.4418 14.9091 12C14.9091 11.5582 14.5835 11.2 14.1818 11.2L9.81818 11.2C9.41652 11.2 9.09091 11.5582 9.09091 12C9.09091 12.4418 9.41652 12.8 9.81818 12.8L14.1818 12.8Z" />\n<rect x="0" y="0" width="24" height="24" fill="transparent"/>\n</g>')}else F.remove()}function S(e,t,n,i,o){var a=t.id,r=t.data,d=t.width,s=t.height,h=t.hgap,u=t.vgap,p=(0,l.jt)(e,"g","mind-node-expand");if("Root"===a||r.childrenLen<=0||r.isFreeNode)p.remove();else{var f=0,m=0;i===c.vA.LeftToRight||"right"===t.side&&i===c.vA.Horizontal?(f=d-h+16+10,m=s/2):i===c.vA.TopToBottom?(f=d/2,m=s-u+16+5):(i===c.vA.Horizontal&&"left"===t.side||i===c.vA.RightToLeft)&&(f=h-16-10,m=s/2),p.classed("mind-node-expand-hide",r.expandState===c.C.Expand).datum({id:a}).on("click touchend",(function(e,t){o(t.id),e.stopPropagation()})).on("dblclick",(function(e){return e.stopPropagation()})),(0,l.jt)(p,"circle").attr("cx",f).attr("cy",m).attr("r",8).style("stroke-width",1).attr("stroke",n).attr("fill","#fff"),(0,l.jt)(p,"text").attr("x",f).attr("y",m+4).attr("fill",n).text(r.expandState===c.C.Collapse?r.childrenLen:"-")}}function T(e,t,n,o,a){void 0===o&&(o=!1);var r=t.x,d=t.y,s=t.width,h=t.height,u=t.vgap,p=t.hgap;if(o)e.select("g[id=node-selection-drag-".concat(t.id,"]")).remove();else{var f=e.select("g[id=node-selection-drag-".concat(t.id,"]"));f.empty()||f.remove();var m=e.append("g").attr("id","node-selection-drag-".concat(t.id)).datum(g(g({},t),{onTheSide:a})).attr("transform","translate(".concat(r,", ").concat(d,")")).style("pointer-events","none");if(m.append("path").attr("d",(0,l.NK)(-13+p,-13+u,s-2*p+26,h-2*u+26,10)).attr("stroke-width",2).attr("stroke",b).attr("fill","transparent"),"TopOrLeft"!==a){if("BottomOrRight"!==a){var v=s-p,y=h/2,x=s+p,C=h/2,k=s+p,S=h/2-9;n===c.vA.RightToLeft||n===c.vA.Horizontal&&"left"===t.side||"bodyLeft"===a?(v=p,y=h/2,x=-p,C=h/2,k=2*-p):n===c.vA.TopToBottom&&(v=s/2,y=h-u,x=s/2,C=h+u,k=s/2-35,S=h+u),m.append("path").attr("d",i.jvg()([[v,y],[x,C]]).toString()).attr("stroke-width",4).attr("stroke",b),m.append("path").attr("d",(0,l.NK)(k,S,70,18,10)).attr("stroke-width",2).attr("fill",b)}else if(D=(0,l.NK)(-13+p,h-u/2,s-2*p+26,10,0),n===c.vA.TopToBottom&&(D=(0,l.NK)(s-p/2,-13+u,p/2,h-2*u+26,0)),m.append("path").attr("d",D).attr("stroke-width",2).attr("stroke",b).attr("fill",b),n!==c.vA.TopToBottom){var T=s-p,E=h-4.5,w=s+p,A=h+9,I=s,F=h;(n===c.vA.RightToLeft||n===c.vA.Horizontal&&"left"===t.side)&&(T=p,w=-p,I=2*-p),m.append("path").attr("d",i.jvg()([[T,E],[w,A]]).toString()).attr("stroke-width",4).attr("stroke",b),m.append("path").attr("d",(0,l.NK)(I,F,70,18,10)).attr("stroke-width",2).attr("fill",b)}}else{var D=(0,l.NK)(-13+p,u/2-13,s-2*p+26,10,0);if(n===c.vA.TopToBottom&&(D=(0,l.NK)(p/2-13,-13+u,10,h-2*u+26,0)),m.append("path").attr("d",D).attr("stroke-width",2).attr("stroke",b).attr("fill",b),n!==c.vA.TopToBottom){var M=s-p,U=s+p,N=s;(n===c.vA.RightToLeft||n===c.vA.Horizontal&&"left"===t.side)&&(M=p,U=-p,N=2*-p),m.append("path").attr("d",i.jvg()([[M,4.5],[U,-9]]).toString()).attr("stroke-width",4).attr("stroke",b),m.append("path").attr("d",(0,l.NK)(N,-18,70,18,10)).attr("stroke-width",2).attr("fill",b)}}}}function E(e,t,n){void 0===n&&(n=!1);var i=e.select(".minder-selection"),o=t.id,a=t.x,r=t.y,c=t.width,d=t.height,s=t.hgap,h=t.vgap,u=(t.depth,t.parent,t.data);if(n)i.select("path[id=node-selection-selected-".concat(o,"]")).remove();else{var p=i.select("path[id=node-selection-selected-".concat(o,"]"));p.empty()||p.remove(),i.append("path").attr("id","node-selection-selected-".concat(o)).attr("transform","translate(".concat(a,", ").concat(r,")")).style("pointer-events","none").datum({id:o,parentIds:u.parentIds}).attr("d",(0,l.NK)(-y[0]+s,-y[1]+h,c-2*s+2*y[0],d-2*h+2*y[1],10)).attr("stroke-width",2).attr("stroke","#007DD0").attr("fill","transparent")}}function w(e,t,n){void 0===n&&(n=!1);var i=t.id,o=t.x,a=t.y,r=t.width,c=t.height,d=t.vgap,s=t.hgap;if(n)e.select("path[id=node-selection-hover-".concat(i,"]")).remove();else{var h=e.select("path[id=node-selection-hover-".concat(i,"]"));e.select("g[id=node-selection-drag-".concat(i,"]")).empty()&&(h.empty()||h.remove(),e.append("path").attr("id","node-selection-hover-".concat(i)).attr("transform","translate(".concat(o,", ").concat(a,")")).style("pointer-events","none").attr("d",(0,l.NK)(-v[0]+s,-v[1]+d,r-2*s+2*v[0],c-2*d+2*v[1],10)).attr("stroke-width",1).attr("stroke","#96C1FF").attr("fill","none"))}}var A=n(81335),I=n(50190),F=n(53237),D=n(8481),M=n(69457),U=n(70128),N=n(29802),L=n(53418),B=n(79068),z=n(85693),R=function(e,t,n){if(n||2===arguments.length)for(var i,o=0,a=t.length;o<a;o++)!i&&o in t||(i||(i=Array.prototype.slice.call(t,0,o)),i[o]=t[o]);return e.concat(i||Array.prototype.slice.call(t))},j=n(81746),_=function(){function e(e,t){if(null===this.domContainer)throw new Error("需要指定容器");this.domContainer=e,this.componentId=(0,l.kb)(),this.props=t;var n=new o.QW;this.yarray=n.getArray("undoManager"),this.undoManager=new o.H6(this.yarray),this.readonly=t.readonly||!1,this.backgroundColor=t.treeData.backgroundColor,this.backgroundImage=t.treeData.backgroundImage,this.jsonData=t.treeData.jsonData||null,this.jsonData||(this.jsonData={id:"Root",isRoot:!0,text:"中心主题",richText:"<p>中心主题</p>",children:[]}),this.subTrees=t.treeData.subTrees||[],this.gap=t.treeData.gap||{hgap:40,vgap:40},this.minderScale=1,this.structure=t.treeData.structure||c.vA.Horizontal,this.cache={edit:!1,editId:"",drag:!1,undoList:[],redoList:[],clipboardData:null},this.theme=t.treeData.theme||0;var a=i.Ys(this.domContainer).html("").append("div").attr("id","wraper-".concat(this.componentId));a.classed("mind-wraper",!0),this.wraper=a,this.layoutTree=null,this.jsonTreeTolayoutTree();var r=(0,l.Is)(this.domContainer.offsetWidth||window.innerWidth,this.domContainer.offsetHeight||window.innerHeight,this.structure,this.layoutTree.width,this.layoutTree.height),d=r.rootX,s=r.rootY;this.rootX=d,this.rootY=s,this.minderTranslate=[this.rootX,this.rootY],this.symbolInit(),this.symbolInitEvent(),this.render3()}return e.prototype.symbolInit=function(){var e=i.Ys("#wraper-".concat(this.componentId));e.style("background-color",this.backgroundColor),this.backgroundImage?e.style("background-image","url(".concat(this.backgroundImage,")")).style("background-repeat","no-repeat").style("background-size","cover").style("background-position","center"):e.style("background-image","");var t=(0,l.jt)(e,"svg");t.attr("xmlns","http://www.w3.org/2000/svg").attr("width","100%").attr("height","100%").classed("mind-svg",!0);var n=(0,l.jt)(t,"g","mind-main");n.classed("mind-main",!0),(0,l.jt)(t,"g","mind-filter").html("<filter id='shadow' color-interpolation-filters='sRGB'><feDropShadow dx='2' dy='2' stdDeviation='2' flood-opacity='0.1' /></filter>");var o=(0,l.jt)(n,"g","minder");o.attr("transform","matrix(1, 0, 0, 1, ".concat(this.rootX,", ").concat(this.rootY,")")).attr("text-rendering","optimizeSpeed"),this.minder=o},e.prototype.symbolInitEvent=function(){var e=this;console.log("symbolInitEvent");var t=this.minder,n=i.Ys("#wraper-".concat(this.componentId)),o=!1;i.Ys(document).on("click",(function(){e.removeContextMenu()})).on("keydown.".concat(this.componentId),(function(n){var i=n.target.nodeName;if(!e.readonly&&!["INPUT"].includes(i)){["Enter","Tab"].includes(n.key)&&n.preventDefault();var a=n.metaKey||n.ctrlKey;if("Tab"!==n.key||o||(e.cache.edit?e.cache.editor.commands.blur():e.handleCreateBehavior("sub")),"Enter"!==n.key||n.shiftKey||o||(e.cache.edit?e.cache.editor.commands.blur():e.handleCreateBehavior("sibling")),["Backspace","Delete"].includes(n.key)&&(e.cache.edit||e.handleDeleteBehavior()),!(32!==n.keyCode&&"Space"!==n.code||e.cache.edit||o)){var r=t.selectAll("path[id*=node-selection-selected]:last-child");if(r.empty()&&(r=t.selectAll("path[id*=node-selection-selected]:first-child")),!r.empty()){var l=r.datum().id;t.select("g[id=mind-node-".concat(l,"]")).dispatch("dblclick")}}if("z"===n.key&&a&&!e.cache.edit&&(n.preventDefault(),e.handleUndo()),"y"===n.key&&a&&!e.cache.edit&&(n.preventDefault(),e.handleRedo()),"s"===n.key&&a&&(e.cache.edit&&e.handleInputEnd(),n.preventDefault()),"a"===n.key&&a&&!e.cache.edit){var c=e.minder.selectAll("g[id*=mind-node-]"),d=[];c.each((function(t){d.push(t.id),E(e.minder,t)})),e.props.onSelect&&e.props.onSelect(d),n.preventDefault()}["ArrowUp","ArrowDown","ArrowLeft","ArrowRight"].includes(n.key)&&!e.cache.edit&&e.handleMoveSelect(n.key)}o=!0})).on("keyup.".concat(this.componentId),(function(e){o=!1})),n.on("wheel",(function(i){if(n.select("#mind-menu-box").empty()){i.preventDefault();var o=e.minderTranslate,a=o[0],r=o[1],l=e.minderScale,d=a,s=r,h=void 0===l?1:l;i.deltaX<0&&(d=a-i.deltaX/h),i.deltaX>0&&(d=a-i.deltaX/h),0!==navigator.platform.indexOf("Mac")&&i.shiftKey&&(i.deltaY<0&&(d=a-i.deltaY/h),i.deltaY>0&&(d=a-i.deltaY/h),console.log(i,d,s)),i.ctrlKey?(i.deltaY>0&&(h-=c.Yp.Step),i.deltaY<0&&(h+=c.Yp.Step),e.handleScaleSketch(h)):i.shiftKey||(i.deltaY>0&&(s=r-i.deltaY/h),i.deltaY<0&&(s=r-i.deltaY/h)),t.attr("transform","matrix(1, 0, 0, 1, ".concat(d,", ").concat(s,")")),e.rootX=d,e.rootY=s,e.minderTranslate=[d,s]}}));var a=!1,r=null,d=null,s=!1;n.on("mousedown touchstart",(function(t){var n=t.metaKey||t.ctrlKey,o=i.Ys(t.target);"touchstart"===t.type&&t.preventDefault();var l=i.daD(t,e);if(r=l[0],o.classed("context-menu-item")){var c=t.target.dataset.value;e.handleClickContextMenu(c)}if("svg"===t.target.tagName&&(e.cleanSelection(!0),n&&(a=!0),n||(s=!0)),o.classed("mind-node-editor-text")&&("Root"===i.Ys(t.target).datum().id&&!n||e.readonly)&&(s=!0),o.classed("bubble-menu")){var d=o.node().dataset,h=d.action;if(c=d.value,"Color"===h)e.cache.editor.chain().focus().setColor(c).run();else{console.log("action",h);var u="toggle".concat(h);e.cache.editor.chain().focus()[u]().run()}}})).on("mousemove touchmove",(function(o){e.wraper.style("cursor","auto");var c=i.daD(o,e);if(a){var h=i.Ys("#wraper-".concat(e.componentId)).node().getBoundingClientRect(),u=o.x-h.left,p=o.y-h.top,f=r[0]-h.left,m=r[1]-h.top,g=Math.min(f,u),v=Math.min(m,p),y=Math.abs(f-u),b=Math.abs(m-p);if(y<10&&b<10)return;!function(e,t,n,i,o){void 0===t&&(t=0),void 0===n&&(n=0),void 0===i&&(i=0),void 0===o&&(o=0);var a=e.select(".mind-select-rect");a.empty()&&(a=e.append("div")).classed("mind-select-rect",!0),a.style("left","".concat(t,"px")).style("top","".concat(n,"px")).style("width","".concat(i,"px")).style("height","".concat(o,"px"))}(e.wraper,g,v,y,b);var x=new Set(Array.from(n.selectAll(".mind-node")).filter((function(t){return(0,l.Rx)(e.domContainer,t,{left:g,top:v,width:y,height:b})})));e.cleanSelection();var C=[];x.forEach((function(t){var n=i.Ys(t).datum();E(e.minder,n),C.push(n.id)})),e.props.onSelect&&e.props.onSelect(C)}if(s){var k=e.minderTranslate,S=u=k[0],T=p=k[1];if(Math.abs(c[0][0]-r[0])<5&&Math.abs(c[0][1]-r[1])<5)return;S=u+((d=c[0])[0]-r[0])/e.minderScale,T=p+(d[1]-r[1])/e.minderScale,t.attr("transform","matrix(1, 0, 0, 1, ".concat(S,", ").concat(T,")"))}})).on("mouseup mouseleave touchend",(function(i){if(a&&n.select(".mind-select-rect").remove(),s&&d){var o=e.minderTranslate,l=o[0],c=o[1],h=l+(d[0]-r[0])/e.minderScale,u=c+(d[1]-r[1])/e.minderScale;e.rootX=h,e.rootY=u,e.minderTranslate=[h,u],t.attr("transform","matrix(1, 0, 0, 1, ".concat(h,", ").concat(u,")"))}r=null,d=null,a=!1,s=!1})).on("dblclick",(function(t){if(t.stopPropagation(),!e.readonly){var n=i.daD(t,e),o=(0,l.kb)(),a=e.wraper.node(),r=a.clientLeft,c=a.clientTop,d=a.clientHeight,s=a.clientWidth,h=a.getBoundingClientRect(),u=r-h.left-(s-s*e.minderScale)/2,p=c-h.top-(d-d*e.minderScale)/2,f={rootX:e.rootX-(n[0][0]+u)/e.minderScale+e.gap.hgap,rootY:e.rootY-(n[0][1]+p)/e.minderScale+e.gap.vgap,id:o,text:"自由主题",richText:"<p>自由主题</p>",children:[]};e.handleTopicCreat("subTree",[f],""),e.addUndo([{action:"CreatTopic",target:"subTree",sourceList:(0,l.xU)([f])}]),e.update(),setTimeout((function(){e.minder.select("g[id=mind-node-".concat(o,"]")).dispatch("dblclick")}))}})),n.on("contextmenu",(function(t){e.readonly||(t.preventDefault(),t.stopPropagation(),t.ctrlKey||e.cache.edit||(e.creatContextMenu(t),s=!1))})),i.Ys(document).on("copy",(function(t){var n=t.target.nodeName;if(!e.readonly&&!["INPUT"].includes(n)){if(e.cache.edit)return;t.clipboardData.setData("text/plain","__mindmap__mihoyo__topic复制主题");var i=e.getSelectionIds(!0);if(i.length){var o=e.getJsonNodeInfos(i);e.cache.clipboardData=o,e.cache.clipboardType="__mindmap__mihoyo__topic",t.preventDefault()}}})).on("cut",(function(t){var n=t.target.nodeName;if(!e.readonly&&!["INPUT"].includes(n)){if(e.cache.edit)return;t.clipboardData.setData("text/plain","__mindmap__mihoyo__topic剪切主题");var i=e.getSelectionIds(!0);if(i.length){var o=e.getJsonNodeInfos(i);e.cache.clipboardData=o,e.cache.clipboardType="__mindmap__mihoyo__topic",e.handleDeleteBehavior(),t.preventDefault()}}})).on("paste",(function(t){var n=t.target.nodeName;if(!e.readonly&&!["INPUT"].includes(n)&&!e.cache.edit){var i=t.clipboardData.getData("text/plain");e.handleClipboardPaste(i,t)}})),new ResizeObserver((function(t){var n=(0,l.Is)(t[0].contentRect.width,t[0].contentRect.height,e.structure,e.layoutTree.width,e.layoutTree.height),i=n.rootX,o=n.rootY;e.rootX=i,e.rootY=o,e.minderTranslate=[e.rootX,e.rootY],e.setMinderPosition()}))},e.prototype.setMinderPosition=function(){this.minder.attr("transform","matrix(1, 0, 0, 1, ".concat(this.rootX,", ").concat(this.rootY,")"))},e.prototype.handleAction=function(e,t){var n=this;if(e===c.aU.Scale){var i=this.minderScale;"enlarge"===t?i+=c.Yp.Step:"decrease"===t?i-=c.Yp.Step:"reset"===t&&(i=1),this.handleScaleSketch(i)}else e===c.aU.OrientationCenterTopic?this.handleClickContextMenu(c.aU.OrientationCenterTopic):e===c.aU.ExpandAllTopic?this.handleClickContextMenu(c.aU.ExpandAllTopic):e===c.aU.CollapseAllTopic&&this.handleClickContextMenu(c.aU.CollapseAllTopic);if(!this.readonly)if(e===c.aU.Structure)this.addUndo([{action:"Structure",oldAttributes:this.structure,newAttributes:t}]),this.handleSetStructure(t);else if(e===c.aU.Undo)this.handleUndo();else if(e===c.aU.Redo)this.handleRedo();else if(e===c.aU.Theme)this.backgroundColor!==m[this.theme].backgroundColor?r.Z.confirm({title:"提示",content:"您自定义过当前背景颜色，是否允许新风格覆盖？",onOk:function(){n.addUndo([{action:"BackgroundColor",oldAttributes:{backgroundColor:n.backgroundColor,theme:n.theme},newAttributes:{backgroundColor:m[t].backgroundColor,theme:t}}]),n.backgroundColor=m[t].backgroundColor,n.theme=t,n.symbolInit(),n.update()},onCancel:function(){console.log("不覆盖"),n.addUndo([{action:"BackgroundColor",oldAttributes:{backgroundColor:n.backgroundColor,theme:n.theme},newAttributes:{backgroundColor:n.backgroundColor,theme:t}}]),n.theme=t,n.symbolInit(),n.update()}}):(this.addUndo([{action:"BackgroundColor",oldAttributes:{backgroundColor:this.backgroundColor,theme:this.theme},newAttributes:{backgroundColor:m[t].backgroundColor,theme:t}}]),this.backgroundColor=m[t].backgroundColor,this.theme=t,this.symbolInit(),this.update());else if(e===c.aU.Gap)this.gap=t,this.update();else if(e===c.aU.BackgroundColor)this.addUndo([{action:"BackgroundColor",oldAttributes:{backgroundColor:this.backgroundColor,theme:this.theme},newAttributes:{backgroundColor:t,theme:this.theme}}]),this.backgroundColor=t,this.symbolInit(),this.saveTreeData();else if(e===c.aU.Icon)this.handleSetIcon(t);else if(e===c.aU.OpenHyperlinkModal)this.handleLinkModal();else if(e===c.aU.NodeTheme)this.handleSetNodeTheme(t);else if(e===c.aU.InsertSiblingTopic)this.handleClickContextMenu(c.aU.InsertSiblingTopic);else if(e===c.aU.InsertSubTopic)this.handleClickContextMenu(c.aU.InsertSubTopic);else if(e===c.aU.InsertImage)this.handleImageModal();else if(e===c.aU.Editor){var o=t.id,a=t.newAttributes,l=this.getJsonNodeInfos([o]),d={};Object.keys(a).forEach((function(e){d[e]=l[0][e]})),this.addUndo([{action:"EditTopic",editList:[{target:o,oldAttributes:d,newAttributes:a}]}]),this.handleTopicEditor(o,a),this.update([o])}},e.prototype.addUndo=function(e){var t=this.yarray,n=this.undoManager;t.push(e),n.stopCapturing()},e.prototype.handleUndo=function(){var e=this,t=this.yarray,n=this.undoManager;if(!(n.undoStack.length<=0)){var i=t.get(t.length-1),o=i.action;if("CreatTopic"===o)this.handleTopicDelete(i.sourceList.map((function(e){return e.id}))),this.update([i.target]);else if("DeleteTopic"===o){var a=[];i.deleteList.forEach((function(t){var n=t.sourceList,i=t.target,o=t.afterId,r=void 0===o?"":o;n.forEach((function(e){a.push(e.id)})),e.handleTopicCreat(i,(0,l.xU)(n),r)})),this.update(a)}else if("MoveTopic"===o){for(var r=i.actionList.reverse(),c=function(t){if("CreatTopic"===t.action){var n=[];t.sourceList.forEach((function(e){n.push(e.id)})),d.handleTopicDelete(n)}else"DeleteTopic"===t.action&&t.deleteList.forEach((function(t){var n=t.sourceList,i=t.target,o=t.afterId,a=void 0===o?"":o;e.handleTopicCreat(i,(0,l.xU)(n),a)}))},d=this,s=0,h=r;s<h.length;s++)c(h[s]);this.update()}else if("EditTopic"===o){var u=i.editList,p=[];u.forEach((function(t){p.push(t.target),e.handleTopicEditor(t.target,t.oldAttributes)})),this.update(p)}else if("Structure"===o){var f=i.oldAttributes;this.handleSetStructure(f)}else"ExpandCollapseAll"===o?(i.expandList.forEach((function(t){e.handleTopicEditor(t.target,t.oldAttributes)})),this.update()):"BackgroundColor"===o&&(f=i.oldAttributes,this.backgroundColor=f.backgroundColor,this.theme=f.theme,this.symbolInit(),this.update());n.undo(),this.saveTreeData()}},e.prototype.handleRedo=function(){var e=this,t=this.yarray,n=this.undoManager;if(!(n.redoStack.length<=0)){n.redo();var i=t.get(t.length-1),o=i.action;if("CreatTopic"===o){var a=i.target,r=i.afterId,c=void 0===r?"":r,d=[];i.sourceList.forEach((function(e){d.push(e.id)})),this.handleTopicCreat(a,(0,l.xU)(i.sourceList),c),this.update(d)}else if("DeleteTopic"===o){var s=[],h=[];i.deleteList.forEach((function(e){h.push(e.target),s.push.apply(s,e.sourceList.map((function(e){return e.id})))})),this.handleTopicDelete(s),this.update(h)}else if("MoveTopic"===o){for(var u=i.actionList.reverse(),p=function(e){if("CreatTopic"===e.action){var t=e.target,n=e.afterId,i=void 0===n?"":n;f.handleTopicCreat(t,(0,l.xU)(e.sourceList),i)}else if("DeleteTopic"===e.action){var o=[];e.deleteList.forEach((function(e){o.push.apply(o,e.sourceList.map((function(e){return e.id})))})),f.handleTopicDelete(o)}},f=this,m=0,g=u;m<g.length;m++)p(g[m]);this.update()}else if("EditTopic"===o)i.editList.forEach((function(t){e.handleTopicEditor(t.target,t.newAttributes)})),this.update();else if("Structure"===o){var v=i.newAttributes;this.handleSetStructure(v)}else"ExpandCollapseAll"===o?(i.expandList.forEach((function(t){e.handleTopicEditor(t.target,t.newAttributes)})),this.update()):"BackgroundColor"===o&&(v=i.newAttributes,this.backgroundColor=v.backgroundColor,this.theme=v.theme,this.symbolInit(),this.update());this.saveTreeData()}},e.prototype.handleMoveSelect=function(e){var t=this,n=this,i=n.wraper,o=n.layoutTree,a=n.subLayoutTrees;if(0===i.selectAll("path[id*=node-selection-selected]").size())E(this.minder,o);else{var r=i.selectAll("path[id*=node-selection-selected]:last-child");r.empty()&&(r=i.selectAll("path[id*=node-selection-selected]:first-child"));var d=r.datum(),s=d.id,h=d.parentIds,u=h[0],p=null;if(p="Root"===u?o:a.find((function(e){return e.id===u})),1===h.length&&this.structure===c.vA.Horizontal){var f=p.children.findIndex((function(t){return t.side===("ArrowLeft"===e?"left":"right")}));return void(f>=0&&(this.cleanSelection(),E(this.minder,p.children[f])))}(0,l.Vn)(p,(function(n){var i=n.id,o=n.children,a=void 0===o?[]:o,r=n.parent,l=void 0===r?null:r,d=n.side,h=void 0===d?"":d;if(["ArrowUp","ArrowDown"].includes(e)){if((t.structure===c.vA.LeftToRight||t.structure===c.vA.RightToLeft||t.structure===c.vA.Horizontal)&&i===s&&l){var u=l.children;t.structure===c.vA.Horizontal&&(u=u.filter((function(e){return e.side===h}))),(f=u.findIndex((function(e){return e.id===s})))>=0&&u[p=f+("ArrowUp"===e?-1:1)]&&(t.cleanSelection(),E(t.minder,u[p]))}t.structure===c.vA.TopToBottom&&("ArrowUp"===e?i===s&&l&&(t.cleanSelection(),E(t.minder,l)):"ArrowDown"===e&&i===s&&a.length&&(t.cleanSelection(),E(t.minder,a[0])))}else if("ArrowRight"===e){if(t.structure===c.vA.LeftToRight||t.structure===c.vA.Horizontal&&"right"===h)i===s&&a.length&&(t.cleanSelection(),E(t.minder,a[0]));else if(t.structure===c.vA.RightToLeft||t.structure===c.vA.Horizontal&&"left"===h)i===s&&l&&(t.cleanSelection(),E(t.minder,l));else if(t.structure===c.vA.TopToBottom&&i===s&&(f=l.children.findIndex((function(e){return e.id===s})))>=0){var p=f+1;l.children[p]&&(t.cleanSelection(),E(t.minder,l.children[p]))}}else if("ArrowLeft"===e)if(t.structure===c.vA.LeftToRight||t.structure===c.vA.Horizontal&&"right"===h)i===s&&l&&(t.cleanSelection(),E(t.minder,l));else if(t.structure===c.vA.RightToLeft||t.structure===c.vA.Horizontal&&"left"===h)i===s&&a.length&&(t.cleanSelection(),E(t.minder,a[0]));else if(t.structure===c.vA.TopToBottom){var f;i===s&&(f=l.children.findIndex((function(e){return e.id===s})))>=0&&(p=f-1,l.children[p]&&(t.cleanSelection(),E(t.minder,l.children[p])))}}),(function(e){return e.children&&e.children.length>0?e.children:null})),this.handleOutView(s)}},e.prototype.handleClipboardPaste=function(e,t){return void 0===e&&(e=""),void 0===t&&(t=null),n=this,i=void 0,a=function(){var n,i,o,a,r,d,s,h,u,f,m,g,v,y,b,x,C,k,S=this;return function(e,t){var n,i,o,a,r={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function l(a){return function(l){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;r;)try{if(n=1,i&&(o=2&a[0]?i.return:a[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,a[1])).done)return o;switch(i=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return r.label++,{value:a[1],done:!1};case 5:r.label++,i=a[1],a=[0];continue;case 7:a=r.ops.pop(),r.trys.pop();continue;default:if(!((o=(o=r.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){r=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){r.label=a[1];break}if(6===a[0]&&r.label<o[1]){r.label=o[1],o=a;break}if(o&&r.label<o[2]){r.label=o[2],r.ops.push(a);break}o[2]&&r.ops.pop(),r.trys.pop();continue}a=t.call(e,r)}catch(e){a=[6,e],i=0}finally{n=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,l])}}}(this,(function(T){if(n=e||this.cache.clipboardType||"",(i=this.getSelectionIds(!0,!0,!0)).length)if(o=i[0],0===n.indexOf("__mindmap__mihoyo__topic"))a=this.cache.clipboardData,r=(0,l.oh)(a),d=r[0],s=r[1],this.handleTopicCreat(o,d,""),this.addUndo([{action:"CreatTopic",target:o,sourceList:(0,l.xU)(d)}]),this.update(s);else if(0===n.indexOf("__mindmap__mihoyo__image"))console.log("粘贴图片"),h=this.getJsonNodeInfos([o])[0],u=h.image,f=void 0===u?"":u,m=h.imageSize,g={image:f,imageSize:void 0===m?null:m},v=this.cache.clipboardData,this.addUndo([{action:"EditTopic",editList:[{target:o,oldAttributes:g,newAttributes:v}]}]),this.handleTopicEditor(o,v),this.update([o]);else try{for(y=t.clipboardData&&t.clipboardData.items,b=null,x=0,C=y;x<C.length;x++){k=C[x],b=k.getAsFile();break}b?this.handleImageModal(b):navigator.clipboard.readText().then((function(e){var t=(0,l.kb)(),n={id:t,text:"".concat(e),richText:"<p>".concat(e,"</p>"),expandState:c.C.Expand,children:[]};S.handleTopicCreat(o,[n],""),S.addUndo([{action:"CreatTopic",target:o,sourceList:(0,l.xU)([n])}]),S.update([t])})).catch((function(e){console.error(e),S.wraper.append("div").html(p("外部复制的文本需要开启剪切板权限！","error")).transition().duration(1e3).remove()}))}catch(e){console.log("剪切板error",e),this.wraper.append("div").html(p("外部复制的文本需要开启剪切板权限！","error")).transition().duration(1e3).remove()}else this.wraper.append("div").html(p("请选择主题后，再进行粘贴","warning")).transition().duration(2e3).remove();return[2]}))},new((o=void 0)||(o=Promise))((function(e,t){function r(e){try{c(a.next(e))}catch(e){t(e)}}function l(e){try{c(a.throw(e))}catch(e){t(e)}}function c(t){var n;t.done?e(t.value):(n=t.value,n instanceof o?n:new o((function(e){e(n)}))).then(r,l)}c((a=a.apply(n,i||[])).next())}));var n,i,o,a},e.prototype.handleLinkModal=function(){var e=this,t=this.wraper,n=this.getSelectionIds(),i=t.select("g[id=mind-node-".concat(n[0],"]")).select(".mind-node-bg").node().getBoundingClientRect(),o=i.left,a=i.top,r=i.width,c=i.height,d=this.getJsonNodeInfos(n);!function(e,t,n){var i=t.value,o=void 0===i?"":i,a=t.left,r=t.top,c=(0,l.jt)(e,"div","link-modal"),d=(0,l.jt)(c,"div","link-content");d.style("left","".concat(a,"px")),d.style("top","".concat(r,"px")),(0,l.jt)(d,"div","link-title").html("插入链接");var s=(0,l.jt)(d,"input");s.attr("type","text"),s.attr("placeholder","请输入链接地址"),s.attr("maxlength",500),s.attr("value",o),s.node().focus(),c.on("mousedown",(function(){n(s.node().value),c.remove()})),s.on("keypress",(function(e){13===e.keyCode&&(n(s.node().value),c.remove())})),d.on("mousedown",(function(e){e.stopPropagation()}))}(t,{id:n[0],value:d[0].hyperlink,left:o+(r-300)/2,top:a+c+16},(function(t){var i=t;""!==t&&0!==t.indexOf("http")&&(i="http://".concat(t)),e.handleSetHyperlink({id:n[0],value:i})}))},e.prototype.handleSetStructure=function(e){this.structure=e,this.handleClickContextMenu(c.aU.OrientationCenterTopic),this.update()},e.prototype.handleSetIcon=function(e){var t=this.getSelectionIds();if(t.length){var n=this.jsonData,i=this.subTrees,o=[n].concat(i),a=[];o.forEach((function(n){(0,l.Vn)(n,(function(n){var i,o,r=n.id;if(t.includes(r)){var l=n[e.type]||0,c=n[e.type]===e.value?0:e.value;n[e.type]=c,a.push({target:r,oldAttributes:(i={},i[e.type]=l,i),newAttributes:(o={},o[e.type]=c,o)})}}),(function(e){return e.children&&e.children.length>0?e.children:null}))})),this.addUndo([{action:"EditTopic",editList:a}]),this.update(t)}},e.prototype.handleSetHyperlink=function(e){var t=this.jsonData,n=this.subTrees,i=[t].concat(n),o=[];i.forEach((function(t){(0,l.Vn)(t,(function(t){if(t.id===e.id){var n=t.hyperlink||"",i=e.value;t.hyperlink=i,o.push({target:e.id,oldAttributes:{hyperlink:n},newAttributes:{hyperlink:i}})}}),(function(e){return e.children&&e.children.length>0?e.children:null}))})),this.addUndo([{action:"EditTopic",editList:o}]),this.update([e.id])},e.prototype.handleImageModal=function(e){var t=this;void 0===e&&(e=null);var n=this.getSelectionIds();if(e){var i=URL.createObjectURL(e);this.handleSetImage({id:n[0],image:i,imageSize:{height:200,width:200}})}else{var o=document.createElement("input");o.setAttribute("type","file"),o.setAttribute("accept","image/jpg,image/png"),o.onchange=function(e){var i=e.target.files,o=URL.createObjectURL(i[0]);t.handleSetImage({id:n[0],image:o,imageSize:{height:200,width:200}})},o.click()}},e.prototype.handleSetImage=function(e){var t=this.jsonData,n=this.subTrees,i=[t].concat(n),o=[];i.forEach((function(t){(0,l.Vn)(t,(function(t){if(t.id===e.id){var n={image:t.image||"",imageSize:t.imageSize||null},i={image:e.image,imageSize:(0,l.bs)(e.imageSize)};t.image=i.image,t.imageSize=i.imageSize,o.push({target:e.id,oldAttributes:n,newAttributes:i})}}),(function(e){return e.children&&e.children.length>0?e.children:null}))})),this.addUndo([{action:"EditTopic",editList:o}]),this.cache.edit||this.update([e.id])},e.prototype.handleSetNodeTheme=function(e){var t=this.getSelectionIds();if(t.length){var n=this.jsonData,i=this.subTrees,o=[n].concat(i),a=[];o.forEach((function(n){(0,l.Vn)(n,(function(n){var i=n.id;if(t.includes(i)){var o=n.nodeTheme||null,r=e.val;n.nodeTheme=r,a.push({target:i,oldAttributes:{nodeTheme:o},newAttributes:{nodeTheme:r}})}}),(function(e){return e.children&&e.children.length>0?e.children:null}))})),this.addUndo([{action:"EditTopic",editList:a}]),this.update(t)}},e.prototype.handleScaleSketch=function(e){var t=this.wraper,n=t.select(".mind-main"),i=t.node(),o=i.clientLeft,a=i.clientTop,r=i.clientHeight,l=i.clientWidth,d=Math.min(Math.max(c.Yp.Min,e),c.Yp.Max),s=o-(l-l*d)/2,h=a-(r-r*d)/2;n.attr("transform","matrix(".concat(d,", 0, 0, ").concat(d,", ").concat(-s,", ").concat(-h,")")),this.minderScale=d,this.props.onScale&&this.props.onScale(d.toFixed(2))},e.prototype.handleMoveSketch=function(e){e.x&&(this.rootX-=e.x,this.minderTranslate[0]=this.rootX),e.y&&(this.rootY-=e.y,this.minderTranslate[1]=this.rootY),this.setMinderPosition()},e.prototype.handleClickContextMenu=function(e){if(e===c.aU.ExpandAllTopic)this.handleOneClick(c.aU.ExpandAllTopic);else if(e===c.aU.CollapseAllTopic)this.handleOneClick(c.aU.CollapseAllTopic);else if(e===c.aU.InsertSiblingTopic)this.handleCreateBehavior("sibling");else if(e===c.aU.InsertSubTopic)this.handleCreateBehavior("sub");else if(e===c.aU.DeleteTopic)this.handleDeleteBehavior();else if(e===c.aU.OrientationCenterTopic){var t=(0,l.Is)(this.domContainer.offsetWidth,this.domContainer.offsetHeight,this.structure,this.layoutTree.width,this.layoutTree.height),n=t.rootX,i=t.rootY;this.rootX=n,this.rootY=i,this.minderTranslate=[this.rootX,this.rootY],this.setMinderPosition()}else if(e===c.aU.DeleteHyperlink){var o=this.wraper.select("#mind-menu-box").datum(),a=o.id,r=o.data;this.addUndo([{action:"EditTopic",editList:[{target:a,oldAttributes:{hyperlink:r.hyperlink},newAttributes:{hyperlink:""}}]}]),this.handleTopicEditor(a,{hyperlink:""}),this.update([a])}else e===c.aU.OpenHyperlinkModal?this.handleLinkModal():e===c.aU.Copy?document.execCommand("copy"):e===c.aU.Cut?document.execCommand("cut"):e===c.aU.Paste?this.handleClipboardPaste():e===c.aU.InsertImage&&this.handleImageModal();this.removeContextMenu()},e.prototype.creatContextMenu=function(e,t,n){void 0===t&&(t="global");var i=this.wraper,o=i.node().getBoundingClientRect(),a=i.select("#mind-menu-box");a.empty()||a.remove();var r=h;"node"===t&&(r=u),a=i.append("div").attr("id","mind-menu-box").html(r),window.getComputedStyle(a.node());var c=e.x-o.left,d=e.y-o.top,s=a.node().getBoundingClientRect(),p=s.width,f=s.height;c+p>o.width&&(c=o.width-p),d+f>o.height&&(d=o.height-f),a.style("left","".concat(c,"px")).style("top","".concat(d,"px")),"node"===t&&a.datum({id:n.id,data:n.data});var m=i.select("#mind-menu-box"),g=this.getSelectionIds();if("node"===t&&n&&"Root"===n.id&&(m.select('div[data-value="InsertSiblingTopic"]').style("display","none"),m.select('div[data-value="DeleteTopic"]').style("display","none"),g.length>1&&m.selectAll('div[class*="context-menu-item-line"]').filter((function(e,t){return 1===t})).style("display","none")),"node"===t&&n&&"Root"===n.id&&(m.select('div[data-value="Copy"]').style("display","none"),m.select('div[data-value="Cut"]').style("display","none")),"node"===t&&n.data.isFreeNode&&m.select('div[data-value="InsertSiblingTopic"]').style("display","none"),"node"===t){var v=this.jsonData,y=this.subTrees;[v].concat(y).forEach((function(e){(0,l.Vn)(e,(function(e){n.id===e.id&&(e.hyperlink?m.select('div[data-value="OpenHyperlinkModal"]').style("display","none"):m.select('div[data-value="DeleteHyperlink"]').style("display","none"),e.image&&m.select('div[data-value="InsertImage"]').html("更换图片"))}),(function(e){return e.children&&e.children.length>0?e.children:null}))}))}g.length>1&&(m.select('div[data-value="InsertSubTopic"]').style("display","none"),m.select('div[data-value="InsertSiblingTopic"]').style("display","none"),m.select('div[data-value="DeleteHyperlink"]').style("display","none"),m.select('div[data-value="OpenHyperlinkModal"]').style("display","none"),m.select('div[data-value="InsertImage"]').style("display","none"),m.select('div[class*="context-menu-item-line"]').style("display","none"))},e.prototype.removeContextMenu=function(){this.wraper.select("#mind-menu-box").remove()},e.prototype.cleanSelection=function(e){void 0===e&&(e=!1),e&&this.props.onSelect&&this.props.onSelect([]),this.minder.select(".minder-selection").html("")},e.prototype.getSelectionIds=function(e,t,n){void 0===e&&(e=!1),void 0===t&&(t=!1),void 0===n&&(n=!1);var i=this.jsonData,o=this.subTrees,a=[i].concat(o),r=[],c=[],d=this.minder.select(".minder-selection").selectAll("path[id*=node-selection-selected]");return d.empty()||(d.each((function(e){c.push(e.id)})),t?(0,l.it)(a,(function(e){var t=e.id;c.includes(t)&&r.push(t)})):r=c,e&&(n||(r=r.filter((function(e){return"Root"!==e}))),d.each((function(e){var t=e.parentIds,n=new Set(r);t.filter((function(e){return n.has(e)})).filter((function(t){return t!==e.id})).length&&r.splice(r.indexOf(e.id),1)})))),r},e.prototype.getJsonNodeInfos=function(e){var t=this.jsonData,n=this.subTrees,i=[t].concat(n),o=[];return(0,l.it)(i,(function(t){var n=t.id;e.includes(n)&&o.push((0,l.xU)(t))})),o},e.prototype.getMindNodeInfos=function(e){var t=this.layoutTree,n=this.subLayoutTrees,i=[t].concat(n),o=[];return(0,l.it)(i,(function(t){var n=t.id;e.includes(n)&&o.push(t)})),o},e.prototype.handleOneClick=function(e){var t=this,n=this.jsonData,i=this.subTrees,o=[n].concat(i),a=[];o.forEach((function(n){n.children.forEach((function(n){var i=n.expandState,o=e===c.aU.ExpandAllTopic?c.C.Expand:c.C.Collapse;a.push({target:n.id,oldAttributes:{expandState:i},newAttributes:{expandState:o}}),n.expandState=o,o===c.C.Collapse&&t.handleDomsDelete([n.id])}))})),this.addUndo([{action:"ExpandCollapseAll",expandList:a}]),this.update()},e.prototype.jsonTreeTolayoutTree=function(){var e=this,t=this.jsonData,n=this.subTrees,i=this.gap,o=i.vgap,a=i.hgap,r=this.structure,s=[t].concat(n);this.subLayoutTrees=[],s.forEach((function(t,n){var i=(0,l.xU)(t);n>0&&(i.isRoot=!0,i.isFreeNode=!0);var s=function(t,n,i){for(var h=function(h){var u=t[h];if("Root"!==u.id&&u.children){var p=0;(0,l.Vn)(u,(function(e){p+=e.children.length}),(function(e){return e.children&&e.children.length>0?e.children:null})),u.childrenLen=p}u.indexPath=u.isRoot?"Root":"".concat(n,"-").concat(h),u.parentIds=R(R([],i,!0),[u.id],!1),u.expandState!==c.C.Expand&&(u.children=[]);var f=(0,l.Mm)(e.wraper,u),m=f.height,g=f.width;u.width=g,u.progress&&(u.width+=d.rM),u.priority&&(u.width+=d.rM),u.hyperlink&&(u.width+=d.rM),u.height=m,u.image&&(u.width=Math.max(u.width,u.imageSize.width),u.height+=u.imageSize.height,u.height+=c.A5),u.vgap=o,2===u.parentIds.length&&r!==c.vA.TopToBottom&&(u.vgap=o/1.5),u.parentIds.length>2&&r!==c.vA.TopToBottom&&(u.vgap=o/2.5),u.hgap=a,2===u.parentIds.length&&r===c.vA.TopToBottom&&(u.hgap=a/1.5),u.parentIds.length>2&&r===c.vA.TopToBottom&&(u.hgap=a/2.5),u.children.length&&s(u.children,u.indexPath,u.parentIds)},u=0;u<t.length;u++)h(u)};s([i],"Root",[]);var h={direction:r,getVGap:function(e){return e.vgap},getHGap:function(e){return e.hgap}};r===c.vA.Horizontal&&(h.getSide=function(e){return e.data.side});var u=null,p=(u=r!==c.vA.TopToBottom?j.mindmap(i,h):j.compactBox(i,h)).x+(n>0?i.rootX:0),f=u.y+(n>0?i.rootY:0);u.eachNode((function(e){e.x-=p,e.y-=f})),0===n?e.layoutTree=u:e.subLayoutTrees.push(u)}))},e.prototype.update=function(e){var t=this;if(void 0===e&&(e=[]),this.jsonTreeTolayoutTree(),console.time("render time"),this.render3(),console.timeEnd("render time"),this.cleanSelection(e.length<=0),e.length){var n=this.layoutTree,i=this.subLayoutTrees;(void 0===i?[]:i).concat(n).forEach((function(n){n.eachNode((function(n){var i=n.id;e.includes(i)&&E(t.minder,n)}))})),this.props.onSelect&&this.props.onSelect(e)}this.saveTreeData()},e.prototype.saveTreeData=function(){this.props.onChange&&this.props.onChange({jsonData:(0,l.xU)(this.jsonData),subTrees:(0,l.xU)(this.subTrees),theme:this.theme,gap:this.gap,structure:this.structure,backgroundColor:this.backgroundColor,backgroundImage:this.backgroundImage,extend:this.props.treeData.extend})},e.prototype.handleInputEnd=function(e){var t=this;void 0===e&&(e=""),console.log("handleInputEnd");var n=this,i=n.jsonData,o=n.subTrees,a=n.cache,r=a.editId,c=a.edit,d=a.editor;if(c){var s=o.concat(i),h=d.getText(),u=d.getHTML();s.forEach((function(e){(0,l.Vn)(e,(function(e){if(r===e.id&&e.richText!==u){var n={text:e.text,richText:e.richText};e.text=h,e.richText=u;var i={text:h,richText:u};t.addUndo([{action:"EditTopic",editList:[{target:r,oldAttributes:n,newAttributes:i}]}])}}),(function(e){return e.children&&e.children.length>0?e.children:null}))})),this.destoryEditor();var p=e||r;this.update([p])}},e.prototype.destoryEditor=function(){var e=this,t=e.cache,n=e.minder,i=e.wraper,o=t.editId,a=t.editor,r=n.select("#editor-wrap-".concat(o));this.cache.editId="",this.cache.edit=!1,a.destroy(),r.node().nextElementSibling.style.display="block",i.select(".toolbar").remove()},e.prototype.handleOutView=function(e){var t=this.minder.select("g[id=mind-node-".concat(e,"]")),n=t.datum().side,i=void 0===n?"":n,o=t.node().getBoundingClientRect(),a=o.left,r=o.top,l=o.height,d=o.width,s=this.wraper.node(),h=s.offsetHeight,u=s.offsetWidth,p=!1;r+50>window.innerHeight&&(this.rootY-=Math.abs(r-h)+l+20,this.minderTranslate[1]=this.rootY,p=!0),a+10>u&&(this.rootX-=Math.abs(a-u)+d+20,this.minderTranslate[0]=this.rootX,p=!0),("left"===i||this.structure===c.vA.RightToLeft)&&a<0&&(this.rootX+=Math.abs(a)+d+20,this.minderTranslate[0]=this.rootX,p=!0),p&&this.setMinderPosition()},e.prototype.handleCreateBehavior=function(e){var t=this;if(void 0===e&&(e="sub"),i.Ys(".link-modal").empty()){this.wraper.style("cursor","none");var n=this.minder.select(".minder-selection").select("path[id*=node-selection-selected]");if(1===n.size()){var o=n.datum().id,a=this.getMindNodeInfos([o])[0],r=a.depth,d=a.parent,s=void 0===d?null:d,h=a.data,u=h.isFreeNode,p=void 0!==u&&u;if(("Root"===o||p)&&"sibling"===e)return;var f=(0,l.kb)(),m=r>1||1===r&&"sub"===e?"子主题":"分支主题",g={id:f,text:m,richText:"<p>".concat(m,"</p>"),expandState:c.C.Expand,children:[]},v=null!==s?s.id:"Root";"sub"===e&&(v=o);var y="sibling"===e?o:"";if("sibling"===e&&1===a.depth&&(g.side=a.data.side),"sub"===e&&("Root"===o||p))if(this.structure!==c.vA.Horizontal)h.children.length?g.side=h.children[h.children.length-1].side||"right":g.side="right";else{var b=h.children.filter((function(e){return"right"===e.side})).length<=Math.floor(h.children.length/2);g.side=b?"right":"left"}this.handleTopicCreat(v,[g],y),this.addUndo([{action:"CreatTopic",target:v,sourceList:(0,l.xU)([g]),afterId:y}]),this.update([f]),setTimeout((function(){t.handleOutView(f),t.minder.select("g[id=mind-node-".concat(f,"]")).dispatch("dblclick")}),0)}}},e.prototype.handleDeleteBehavior=function(){var e=this.getSelectionIds(!0,!0);if(!(e.length<=0)){var t=this.handleTopicDelete(e),n=t[0],i=t[1];this.addUndo([{action:"DeleteTopic",deleteList:i}]),this.update(n)}},e.prototype.handleMoveBehavior=function(e,t,n){void 0===n&&(n="body");var i=this.handleTopicDelete(t)[1],o=[];i.forEach((function(e){o.push.apply(o,e.sourceList)}));var a=null,r="",d=this.getMindNodeInfos([e.id])[0],s=d&&d.parent?d.parent.id:"Root",h=d&&d.id;if(["body"].includes(n)&&(r="",s=h),"BottomOrRight"===n&&(r=e.id),["TopOrLeft","bodyRight","bodyLeft"].includes(n)){var u=this.jsonData,p=this.subTrees;[u].concat(p).forEach((function(t){(0,l.Vn)(t,(function(e){var t=e.id,i=e.children,o=void 0===i?[]:i;if(t===h&&["bodyRight","bodyLeft"].includes(n)){var a=o.filter((function(e){return"bodyRight"===n?"right"===e.side:"left"===e.side}));r=a.length?a[a.length-1].id:"0",s=h}}),(function(t){var i=t.children,o=void 0===i?[]:i;if("TopOrLeft"===n&&o.some((function(t){return t.id===e.id}))){var a=o.findIndex((function(t){return t.id===e.id}));r=a>=1?o[a-1].id:"0"}return t.children&&t.children.length>0?t.children:null}))}))}if("subTree"!==s){if(a=(0,l.xU)(o),["BottomOrRight","TopOrLeft"].includes(n)){var f=this.getMindNodeInfos([h])[0];f.depth&&1===f.depth&&a.forEach((function(e){e.side=f.data.side}))}if(["body","bodyLeft","bodyRight"].includes(n)){var m=this.getMindNodeInfos([h])[0];if(m&&("Root"===m.id||m.data.isFreeNode)){var g=!0;if(m.data.children){var v=m.data.children.filter((function(e){return"right"===e.side})).length;g=v<=Math.floor(m.data.children.length/2)}"bodyLeft"===n?g=!1:"bodyRight"===n&&(g=!0),a.forEach((function(e){e.side=g?"right":"left"}))}}}"subTree"===e.id&&(s="subTree",r="",(a=(0,l.xU)(o)).forEach((function(e){var t=e.side,n=e.children,i=void 0===n?[]:n;e.expandState=c.C.Expand,i.forEach((function(e){t&&(e.side=t)}))}))),this.handleTopicCreat(s,a||(0,l.xU)(o),r),this.addUndo([{action:"MoveTopic",actionList:[{action:"DeleteTopic",deleteList:i},{action:"CreatTopic",target:s,sourceList:(0,l.xU)(o),afterId:r}]}]);var y=o.map((function(e){return e.id}));this.update(y)},e.prototype.handleTopicCreat=function(e,t,n){void 0===n&&(n="");var i=this.jsonData,o=this.subTrees;"subTree"!==e?[i].concat(o).forEach((function(i){(0,l.Vn)(i,(function(i){var o=i.id,a=i.children,r=void 0===a?[]:a;if(o===e){var l=r.length;""!==n&&(l=r.findIndex((function(e){return e.id===n}))+1,"0"===n&&(l=0)),i.expandState=c.C.Expand;var d=r.slice(0,l),s=r.slice(l,r.length);i.children=d.concat(t).concat(s)}}),(function(e){return e.children&&e.children.length>0?e.children:null}))})):o.push.apply(o,t)},e.prototype.handleTopicDelete=function(e){void 0===e&&(e=[]);var t=this.jsonData,n=this.subTrees,i=[t].concat(n),o=[],a=[];return i.forEach((function(t){var n=(0,l.xU)(t);(0,l.Vn)(n,(function(t){var n=t.children,i=void 0===n?[]:n;i.length&&e.forEach((function(n){var r;if(i.some((function(e){return n===e.id}))){var c=i.findIndex((function(e){return e.id===n}));if(1===e.length)if(1===i.length)a.push(t.id);else{var d=i[c+1]||i[c-1];a.push(d.id)}var s=(null===(r=i[c-1])||void 0===r?void 0:r.id)||"0",h=(0,l.xU)([i[c]]);o.push({target:t.id,sourceList:h,afterId:s})}}))}),(function(e){return e.children&&e.children.length>0?e.children:null}))})),i.forEach((function(t){(0,l.Vn)(t,(function(t){var n=t.children,i=void 0===n?[]:n;i.length&&e.forEach((function(e){if(i.some((function(t){return e===t.id}))){var n=i.findIndex((function(t){return t.id===e}));t.children.splice(n,1)}}))}),(function(e){return e.children&&e.children.length>0?e.children:null}))})),this.subTrees=n.filter((function(t){var n=e.some((function(e){return e===t.id}));return n&&o.push({target:"subTree",sourceList:(0,l.xU)([t]),afterId:""}),!n})),this.handleDomsDelete(e),[a,o]},e.prototype.handleTopicEditor=function(e,t){var n=this,i=this.jsonData,o=this.subTrees;[i].concat(o).forEach((function(i){(0,l.Vn)(i,(function(i){var o=i.id;o===e&&Object.keys(t).forEach((function(e){i[e]=t[e],"expandState"===e&&t[e]===c.C.Collapse&&n.handleDomsDelete([o])}))}),(function(e){return e.children&&e.children.length>0?e.children:null}))}))},e.prototype.handleDomsDelete=function(e){var t=this;this.minder.selectAll(".mind-node").each((function(n){var i=n.id,o=n.data,a=new Set(e);o.parentIds.filter((function(e){return a.has(e)})).length&&(t.minder.select("#mind-node-".concat(i)).remove(),t.minder.select("#mind-line-g-".concat(i)).remove(),t.minder.select("path[id=node-selection-selected-".concat(i,"]")).remove())}))},e.prototype.addDisableStyle=function(e){void 0===e&&(e=!1);var t=this.getSelectionIds(),n=this.minder;t.forEach((function(t){var i=e?1:.15;n.select("path[id=node-selection-selected-".concat(t,"]")).attr("opacity",i),n.select("g[id=mind-node-".concat(t,"]")).attr("opacity",i)}))},e.prototype.handleDragBehavior=function(e,t){var n=this;if(!this.cache.edit){var o=this.minder,a=[e.x,e.y],r=null,d=null,s=!1,h=this.minder.select(".minder-selection"),u=o.select("#mind-node-".concat(t.id));t.data.image&&(u.select(".image-menu-wraper").style("display","none"),u.select(".image-resize").style("display","none"),u.select("rect").attr("stroke","none")),e.on("drag",(function(e){if(!(Math.abs(a[0]-e.x)<3&&Math.abs(a[1]-e.y)<3)){s||(n.minder.append((function(){return h.node()})),n.addDisableStyle());var l=i.daD(e,n);if(s=!0,!r){t.data.isFreeNode?r=o.select("g[id=mind-node-".concat(t.id,"]")):((r=o.select("g[id=mind-node-".concat(t.id,"]")).attr("opacity",.25).clone(!0)).attr("opacity",.85),r.attr("filter","url(#shadow)"));var d=r.node();o.append((function(){return d}))}if(r.attr("transform","translate(".concat(e.x,", ").concat(e.y,")")),t.data.isFreeNode&&(n.minder.select("#node-selection-hover-".concat(t.id)).remove(),n.minder.select("#node-selection-selected-".concat(t.id)).attr("transform","translate(".concat(e.x,", ").concat(e.y,")")),t.data.children&&t.data.children.length)){var u=t.data.children.map((function(e){return e.id}));n.handleDomsDelete(u)}var p=n.getSelectionIds();o.selectAll(".mind-node").nodes().forEach((function(e){var i=e.__data__;if(!p.includes(i.id)){var o=e.getBoundingClientRect(),a=o.left,r=o.top,d=o.width,s=o.height,u=[a,r-10,a+d,r+15],f=[a,r+15,a+d,r+s-15],m=[a,r+s-15,a+d,r+s+10];if(n.structure===c.vA.TopToBottom&&(u=[a-10,r,a+15,r+s],m=[a+d-10,r,a+d+15,r+s]),!i.data.parentIds.some((function(e){return e===t.id})))if(l[0][0]>u[0]&&l[0][0]<u[2]&&l[0][1]>u[1]&&l[0][1]<u[3]&&"Root"!==i.id&&!i.data.isFreeNode)T(h,i,n.structure,!1,"TopOrLeft");else if(l[0][0]>m[0]&&l[0][0]<m[2]&&l[0][1]>m[1]&&l[0][1]<m[3]&&"Root"!==i.id&&!i.data.isFreeNode)T(h,i,n.structure,!1,"BottomOrRight");else if(l[0][0]>f[0]&&l[0][0]<f[2]&&l[0][1]>f[1]&&l[0][1]<f[3]){var g="body";n.structure!==c.vA.Horizontal||"Root"!==i.id&&!i.data.isFreeNode||(g=l[0][0]<a+d/2?"bodyLeft":"bodyRight"),T(h,i,n.structure,!1,g)}else T(h,i,n.structure,!0)}}))}})).on("end",(function(e){if(r&&(o.select("g[id=mind-node-".concat(t.id,"]")).attr("opacity",1),r.remove(),n.addDisableStyle(!0)),s){if(s=!1,(d=h.select("g[id*=node-selection-drag]")).empty()&&t.data.isFreeNode){var c=(I=n.subTrees).find((function(e){return e.id===t.id})),u={rootX:c.rootX,rootY:c.rootY},p={rootX:c.rootX-(e.x-a[0]),rootY:c.rootY-(e.y-a[1])};return c.rootX=p.rootX,c.rootY=p.rootY,n.addUndo([{action:"EditTopic",editList:[{target:c.id,oldAttributes:u,newAttributes:p}]}]),void n.update([t.id])}if(d.empty()){var f=i.daD(e,n);if(Math.abs(a[0]-e.x)<120&&Math.abs(a[1]-e.y)<120)return;var m=n.wraper.node(),g=m.clientLeft,v=m.clientTop,y=m.clientHeight,b=m.clientWidth,x=g-(b-b*n.minderScale)/2,C=v-(y-y*n.minderScale)/2,k=n.rootX-(f[0][0]+x)/n.minderScale+n.gap.hgap,S=n.rootY-(f[0][1]+C)/n.minderScale+n.gap.vgap,w=n,A=w.jsonData,I=w.subTrees;return[A].concat(I).forEach((function(e){(0,l.Vn)(e,(function(e){e.id===t.id&&(e.rootX=k,e.rootY=S)}),(function(e){return e.children&&e.children.length>0?e.children:null}))})),void n.handleMoveBehavior({id:"subTree"},[t.id],"body")}E(n.minder,t);var F=n.getSelectionIds(!0,!0);if(d.empty()||0===F.length||F.includes(d.datum().id))return;n.handleMoveBehavior(d.datum(),F,d.datum().onTheSide),T(h,d.datum(),n.structure,!0),d=null}}))}},e.prototype.handleExpand=function(e){var t=this;this.cache.edit&&this.handleInputEnd();var n=i.Ys("#mind-node-".concat(e)).node().getBoundingClientRect(),o=this.jsonData,a=this.subTrees;[o].concat(a).forEach((function(n){(0,l.Vn)(n,(function(n){var i=n.id;if(i===e){var o=n.expandState,a=n.expandState===c.C.Expand?c.C.Collapse:c.C.Expand;n.expandState=a,a===c.C.Collapse&&t.handleDomsDelete([i]),t.addUndo([{action:"EditTopic",editList:[{target:e,oldAttributes:{expandState:o},newAttributes:{expandState:a}}]}]),t.update()}}),(function(e){return e.children&&e.children.length>0?e.children:null}))})),setTimeout((function(){var o=(i.Ys("#mind-node-".concat(e)).node().getBoundingClientRect().y-n.y)/t.minderScale;0!==o&&(t.rootY-=o,t.minderTranslate[1]=t.rootY,t.setMinderPosition())}))},e.prototype.handleImageMenu=function(e,t){console.log("mehu",e),this.cache.edit&&this.handleInputEnd();var n=t.id;if("ImageResize"===e){var i={imageSize:c=this.getJsonNodeInfos([n])[0].imageSize},o={imageSize:t};this.addUndo([{action:"EditTopic",editList:[{target:n,oldAttributes:i,newAttributes:o}]}]),this.handleTopicEditor(n,o),this.update([n])}else if("CopyImage"===e){(0,l.vQ)("__mindmap__mihoyo__image复制图片");var a=this.getJsonNodeInfos([n])[0],r=a.image,c=a.imageSize;this.cache.clipboardData={image:r,imageSize:c},this.cache.clipboardType="__mindmap__mihoyo__image"}else if("CutImage"===e){(0,l.vQ)("__mindmap__mihoyo__image剪切图片");var d=this.getJsonNodeInfos([n])[0];r=d.image,c=d.imageSize,this.cache.clipboardData={image:r,imageSize:c},this.cache.clipboardType="__mindmap__mihoyo__image",i={image:r,imageSize:c},o={image:"",imageSize:null},this.addUndo([{action:"EditTopic",editList:[{target:n,oldAttributes:i,newAttributes:o}]}]),this.handleTopicEditor(n,o),this.update([n])}else if("DeleteImage"===e){var s=this.getJsonNodeInfos([n])[0];i={image:r=s.image,imageSize:c=s.imageSize},o={image:"",imageSize:null},this.addUndo([{action:"EditTopic",editList:[{target:n,oldAttributes:i,newAttributes:o}]}]),this.handleTopicEditor(n,o),this.update([n])}else if("DownloadImage"===e)r=t.image,(0,l.LR)(r,"mindmap.png");else if("ViewBigImage"===e){if(!this.props.onCustomEvents)return;r=t.image,this.props.onCustomEvents("ViewBigImage",{image:r})}},e.prototype.renderItem=function(e){var t=this,n=this.minder,o=e.id,r=e.x,h=e.y,u=e.data,f=e.depth,g=Number(u.indexPath.split("-")[1])||0,v=m[this.theme].lineStyle.fill[g>6?Math.floor(g%7):g],y=n.select(".mind-node-lines").append("g");y.attr("id","mind-line-g-".concat(o)),f>0&&function(e,t,n,i,o){void 0===o&&(o=null);var a=t.parent;if(!t.data.isRoot){var r=(0,l.jt)(e,"path","mind-line-path"),d="";i===c.vA.RightToLeft||i===c.vA.LeftToRight||i===c.vA.Horizontal?d=(0,l.D1)(a,t):i===c.vA.TopToBottom&&(d=(0,l.O7)(a,t));var s=o.lineStyle;r.attr("d",d).attr("stroke-linecap","round").attr("stroke",n).attr("stroke-width",2).attr("fill","none").attr("stroke-dasharray",s["stroke-dasharray"])}}(y,e,v,this.structure,m[this.theme]);var b=n.select("g[id=mind-node-".concat(o,"]"));b.empty()?(b=i.Ue8("svg:g").classed("mind-node",!0).attr("id","mind-node-".concat(o)),n.append((function(){return b.node()}))):b=n.select("g[id=mind-node-".concat(o,"]")),b.attr("transform","translate(".concat(r,", ").concat(h,")")).datum(e).on("mouseenter",(function(e,i){t.cache.editId!==i.id&&n.select("path[id=node-selection-selected-".concat(i.id,"]")).empty()&&"none"!==t.wraper.style("cursor")&&w(n.select(".minder-selection"),i)})).on("mouseleave",(function(e,t){w(n.select(".minder-selection"),t,!0)})).on("click touchstart",(function(e,i){if(!t.readonly){t.removeContextMenu(),console.log("foreign click");var a=e.metaKey||e.ctrlKey;if(!n.select("path[id=node-selection-selected-".concat(i.id,"]")).empty()&&a)n.select("path[id=node-selection-selected-".concat(o,"]")).remove(),b.select(".image-menu-wraper").style("display","none"),b.select(".image-resize").style("display","none"),b.select("rect").attr("stroke","none");else if(a||t.cleanSelection(),E(t.minder,i),"mind-node-image"===e.target.parentElement.className.baseVal){b.select(".image-menu-wraper").style("display","block"),b.select(".image-resize").style("display","block"),b.select("rect").attr("stroke","#acd7fb");var r=n.select("g[id=mind-node-".concat(o,"]")).node();n.append((function(){return r})),n.style("cursor","zoom-in")}if(t.props.onSelect){var l=t.getSelectionIds();t.props.onSelect(l)}}})).on("dblclick",(function(i,o){if(i.stopPropagation(),!t.readonly&&t.cache.editId!==o.id){console.log("foreign dblclick"),n.append((function(){return i.currentTarget})),n.append((function(){return n.select(".minder-selection").node()})),t.cleanSelection(),E(t.minder,o),n.select("g[id=mind-node-".concat(o.id,"]")).on(".drag",null),t.cache.edit=!0,t.cache.editId=o.id;var r=(0,l.xU)(o.data),s=t.minder.select("#editor-wrap-".concat(o.id)).html("");s.classed("text-autowrap",o.width>=500),s.node().nextElementSibling.style.display="none";var h,u,f=(h=s.node(),u=o.data.richText,new a.ML({element:h,extensions:[D.Z.configure({pluginKey:"documentMindmap"}),B.Z.configure({pluginKey:"textMindmap"}),M.Z,U.ZP,N.ZP,L.ZP,A.Z,I.I,F.Z,z.Z.configure({limit:1e3})],content:u,editorProps:{handleDOMEvents:{keydown:function(e,t){return"Enter"===t.key&&!t.shiftKey}}}}));t.cache.editor=f,f.on("create",(function(e){var t=e.editor;t.chain().focus(),t.commands.selectAll()})),f.on("update",(function(n){var i,a=n.editor;a.storage.characterCount.characters()>=1e3&&t.wraper.append("div").html(p("超过了限制字符数1000","warning")).transition().duration(1e3).remove(),r.richText=a.getHTML(),r.text=a.getText();var h=(0,l.Mm)(t.wraper,r),u=h.width,f=h.height,g=o.vgap,v=o.hgap,y=j.mindmap(r,{direction:t.structure,getHeight:function(){return f},getWidth:function(){return u},getVGap:function(){return g},getHGap:function(){return v}}),x=y.width,T=y.height;""!==r.text.trim()&&0!==r.text.trim().length||(x=o.width,T=o.height,o.data.image&&(x=o.width-o.data.imageSize.width,T=o.height-o.data.imageSize.height-c.A5)),o.width=x,o.height=T,o.data.progress&&(o.width+=d.rM),o.data.priority&&(o.width+=d.rM),o.data.hyperlink&&(o.width+=d.rM),o.data.image&&(o.width=Math.max(x,o.data.imageSize.width+2*v),o.height=o.height+(null===(i=o.data.imageSize)||void 0===i?void 0:i.height)+c.A5),s.classed("text-autowrap",o.width>=500);var w=m[t.theme];k(b,o,w),S(b,e,w.expandStyle.fill,t.structure,(function(e){return t.handleExpand(e)})),C(b,o,w),E(t.minder,o)})),f.on("selectionUpdate",(function(e){var n,i,o=e.editor,r=t.wraper.select(".toolbar");if(r.empty())r=(0,l.jt)(t.wraper,"div","toolbar");else if(o.view.state.selection.empty)t.wraper.select(".toolbar").remove();else{var c,d=o.state.selection.ranges,s=Math.min.apply(Math,d.map((function(e){return e.$from.pos}))),h=Math.max.apply(Math,d.map((function(e){return e.$to.pos})));c=(0,a.pr)(o.view,s,h),r.style("left","".concat(c.left+(c.width-154)/2,"px")),r.style("top","".concat(c.top-40,"px")),r.html((n=o,i='<div class="bubble-menu-container">',[{action:"Bold",name:"加粗",icon:"text-bold"},{action:"Underline",name:"下划",icon:"text-underline"},{action:"Italic",name:"斜体",icon:"text-italic"},{action:"Strike",name:"中划",icon:"strikethrough"},{action:"Color",name:"红色",icon:"text-style",value:"#F98181"}].forEach((function(e){var t="bubble-menu",o=!!n&&n.isActive(e.action.toLowerCase());"Color"===e.action&&(o=!!n&&n.isActive("textStyle",{color:e.value})),o&&(t+=" is-active"),i+='<div class="'.concat(t,'" data-value="').concat(e.value,'" data-action="').concat(e.action,'">\n    <svg class="iconpark-icon"><use href="#').concat(e.icon,'"></use></svg></div>')})),i+="</div>"))}})),f.on("blur",(function(){t.handleInputEnd()}))}})).on("contextmenu",(function(e,n){if(!t.readonly&&!t.cache.edit){if(e.preventDefault(),e.stopPropagation(),E(t.minder,n),t.props.onSelect){var i=t.getSelectionIds();t.props.onSelect(i)}e.ctrlKey||t.creatContextMenu(e,"node",n)}})),"Root"===o||this.readonly||b.call(i.ohM().on("start",this.handleDragBehavior.bind(this))),C(b,e,m[this.theme]),S(b,e,v,this.structure,(function(e){return t.handleExpand(e)})),function(e,t,n,o,a){var r=t.id,c=t.data,d=t.vgap,h=t.hgap,u=c.imageSize,p=c.image,f=void 0===p?"":p,m=(0,l.jt)(e,"g","mind-node-image");if(f){var g=h,v=d,y=(0,l.jt)(m,"rect");y.attr("x",g-1).attr("y",v-1).attr("width",u.width+1).attr("height",u.height+1).attr("stroke","none").attr("stroke-width",2).attr("fill","none");var b=(0,l.jt)(m,"image");b.attr("xmlns","http://www.w3.org/2000/svg").attr("href",f).attr("crossOrigin","anonymous").attr("x",g).attr("y",v).attr("width",u.width).attr("height",u.height);var x=(0,l.jt)(m,"foreignObject","image-menu-wraper");x.attr("x",g-20).attr("y",v-84).attr("height",80).attr("width",160).style("display","none");var C=(0,l.jt)(x,"div","image-menu-container"),k="";a||(k+='\n    <div class="image-menu-item" data-value=\'CopyImage\'><div class="tooltip"><svg width="16" height="16">'.concat(s.UI,'</svg><div role="tooltip">复制</div></div></div>\n    <div class="image-menu-item" data-value=\'CutImage\'><div class="tooltip"><svg width="16" height="16">').concat(s.xi,'</svg><div role="tooltip">剪切</div></div></div>'),k+='<div class="image-menu-item" data-value=\'DownloadImage\'><div class="tooltip"><svg width="16" height="16">'.concat(s.aL,'</svg><div role="tooltip">下载</div></div></div>'),k+='<div class="image-menu-item delete-icon" data-value=\'DeleteImage\'><div class="tooltip"><svg width="16" height="16">'.concat(s.ap,'</svg><div role="tooltip">删除</div></div></div>')),C.html(k);var S=(0,l.jt)(m,"circle","image-resize");S.attr("cx",g+u.width-3).attr("cy",v+u.height-3).attr("r",6).attr("fill","#f50").attr("stroke","transparent").attr("stroke-width",4).style("display","none");var T=null;x.on("mouseover",(function(){window.clearTimeout(T)})).on("mouseleave",(function(){x.style("display","none"),S.style("display","none"),y.attr("stroke","none")})).on("mousedown",(function(e){var n=e.target.dataset.value;o(n,{id:t.id,image:f}),e.stopPropagation()})).on("dblclick",(function(e){e.stopPropagation()})),b.on("dblclick",(function(e){o("ViewBigImage",{id:t.id,image:f}),e.stopPropagation()})).on("mouseover",(function(){if(a&&C.selectAll("div").size()&&n.style("cursor","zoom-in"),(!n.select("path[id=node-selection-selected-".concat(t.id,"]")).empty()||a)&&(C.selectAll("div").size()&&(x.style("display","block"),n.style("cursor","zoom-in")),!a)){"block"!==S.style("display")&&S.style("display","block"),y.attr("stroke","#acd7fb");var e=n.select("g[id=mind-node-".concat(r,"]")).node();n.append((function(){return e}))}})).on("mouseleave",(function(){n.style("cursor","auto"),T=window.setTimeout((function(){x.style("display","none"),S.style("display","none"),y.attr("stroke","none")}),300)})),S.on("mouseover",(function(){window.clearTimeout(T)})).on("mouseleave",(function(){x.style("display","none"),S.style("display","none"),y.attr("stroke","none")})),S.call(i.ohM().on("start",(function(e){var i=t.data.imageSize,a=[e.x,e.y],r=i.width,l=i.height;e.on("drag",(function(e){n.style("cursor","nwse-resize"),x.style("display","block"),S.style("display","block");var t=i.width+e.x-a[0];r=Math.min(Math.max(t,32),500),(l=r/(i.width/i.height))>500&&(l=500,r=i.width/i.height*500),b.attr("width",r),b.attr("height",l),S.attr("cx",g+r-6),S.attr("cy",v+l-6)})).on("end",(function(){n.style("cursor","auto"),x.style("display","none"),S.style("display","none"),o("ImageResize",{id:t.id,height:l,width:r})}))})))}else m.remove()}(b,e,this.minder,this.handleImageMenu.bind(this),this.readonly),k(b,e,m[this.theme])},e.prototype.renderSummaries=function(){var e=null;(0,l.it)([this.layoutTree],(function(t){"1"===t.id&&(e=t)}));var t=0,n=e.y;(0,l.it)(e.children,(function(e){e.x+e.width>t&&(t=e.x+e.width),e.y<n&&(n=e.y)}));var i=(0,l.jt)(this.minder,"g","minder-summaries");i.html("");var o=(0,l.jt)(i,"g","sm-1");o.attr("transform","translate(".concat(e.x,", ").concat(n,")")),(0,l.jt)(o,"path").attr("d",(0,l.Ey)(t-e.x,e.totalHeight,t-e.x,0,40,.5)).attr("stroke-width","4").attr("fill","none").attr("stroke","red")},e.prototype.render3=function(){var e=this,t=this.layoutTree,n=this.subLayoutTrees,i=(void 0===n?[]:n).concat(t);(0,l.jt)(this.minder,"g","mind-node-lines").html(""),i.forEach((function(t){(0,l.Vn)(t,(function(t){e.renderItem(t)}),(function(e){return e.children&&e.children.length>0?e.children:null}))})),(0,l.jt)(this.minder,"g","minder-selection").html("")},e}()},82160:(e,t,n)=>{n.d(t,{D1:()=>u,Ey:()=>f,Is:()=>m,LR:()=>x,Mm:()=>g,NK:()=>c,O7:()=>p,Rx:()=>d,Vn:()=>s,bs:()=>C,it:()=>h,jt:()=>l,kb:()=>a,oh:()=>b,vQ:()=>y,xU:()=>v,yv:()=>r});var i=n(25290),o=n(49332);function a(){return Math.random().toString(32).substring(2)}function r(e){switch(e){case 0:return o.Y2.Big;case 1:return o.Y2.middle;case 2:return o.Y2.small;default:return o.Y2.basic}}function l(e,t,n){void 0===t&&(t=""),void 0===n&&(n="");var i=e.select(t);if(n&&(i=e.select("".concat(t,"[class*=").concat(n,"]"))),0===i.size()){var o=null;return o=["div","input"].includes(t)?e.append("xhtml:".concat(t)):e.append("svg:".concat(t)),n&&o.classed(n,!0),o}return i}function c(e,t,n,i,o){return"M".concat(e+o,",").concat(t,"h").concat(n-2*o,"a").concat(o,",").concat(o," 0 0 1 ").concat(o,",").concat(o,"v").concat(i-2*o,"a").concat(o,",").concat(o," 0 0 1 ").concat(-o,",").concat(o,"h").concat(2*o-n,"a").concat(o,",").concat(o," 0 0 1 ").concat(-o,",").concat(-o,"v").concat(2*o-i,"a").concat(o,",").concat(o," 0 0 1 ").concat(o,",").concat(-o,"z")}function d(e,t,n){var i=e.getBoundingClientRect(),o=t.getBoundingClientRect(),a=[n.left+n.width/2+i.x,n.top+n.height/2+i.y],r=[o.x+o.width/2,o.y+o.height/2],l=Math.abs(a[0]-r[0])<(n.width+o.width)/2,c=Math.abs(a[1]-r[1])<(n.height+o.height)/2;return!(!l||!c)}function s(e,t,n){if(e){t(e);var i=n(e);if(i)for(var o=i.length,a=0;a<o;a++)s(i[a],t,n)}}function h(e,t){if(e.length){for(var n=[],i=0;i<e.length;i++)t(e[i]),Array.isArray(e[i].children)&&n.push.apply(n,e[i].children);n.length&&h(n,t)}}function u(e,t){var n=e,o=t;e.x>t.x&&(n=t,o=e);var a=Math.round(n.x+n.width-n.hgap),r=Math.round(n.y+n.height/2),l=Math.round(o.x+o.hgap),c=Math.round(o.y+o.height/2);n.isRoot()&&(a=Math.round(n.x+n.width/2),r=Math.round(n.y+n.height/2)),o.isRoot()&&(l=Math.round(o.x+o.width/2),c=Math.round(o.y+o.height/2));var d=i.ETc();return d.moveTo(a+13,r),d.bezierCurveTo(Math.round(a+(n.hgap+o.hgap)/2),r,Math.round(l-(n.hgap+o.hgap)/2),c,l-13,c),d.lineTo(l-13,c),d.toString()}function p(e,t){var n=e,o=t;e.y>t.y&&(n=t,o=e);var a=Math.round(n.x+n.width/2),r=Math.round(n.y+n.height-n.vgap),l=Math.round(n.x+n.width/2),c=Math.round(n.y+n.height),d=Math.round(o.x+o.width/2),s=Math.round(o.y),h=Math.round(o.x+o.width/2),u=Math.round(o.y+o.vgap),p=i.ETc();return p.moveTo(a,r),p.lineTo(l,c),p.lineTo(d,s),p.lineTo(h,u),p.toString()}function f(e,t,n,i,o,a){void 0===o&&(o=50),void 0===a&&(a=.6);var r=e-n,l=t-i,c=Math.sqrt(r*r+l*l),d=e+a*o*(l/=c),s=t-a*o*(r/=c),h=e-.25*c*r+(1-a)*o*l,u=t-.25*c*l-(1-a)*o*r,p=e-.5*c*r+o*l,f=t-.5*c*l-o*r,m=n+a*o*l,g=i-a*o*r,v=e-.75*c*r+(1-a)*o*l,y=t-.75*c*l-(1-a)*o*r;return"M ".concat(e," ").concat(t,"\n    Q ").concat(d," ").concat(s," ").concat(h," ").concat(u," \n    T ").concat(p," ").concat(f," \n    M ").concat(n," ").concat(i,"\n    Q ").concat(m," ").concat(g," ").concat(v," ").concat(y," \n    T ").concat(p," ").concat(f)}function m(e,t,n,i,a){var r=0,l=0;return n===o.vA.LeftToRight?(r=200,l=(t-a)/2):n===o.vA.RightToLeft?(r=e-120-i,l=(t-a)/2):n===o.vA.TopToBottom?(r=(e-i)/2,l=100):n===o.vA.Horizontal&&(r=(e-i)/2,l=(t-a)/2),{rootX:r,rootY:l}}function g(e,t){var n=r(t.indexPath.split("-").length-1),i=e.select("#mind-text-render");i.empty()&&(i=e.append("div").attr("id","mind-text-render").style("position","absolute").style("left","-9999px").style("top","-9999px")),i.style("font-size","".concat(n,"px")),t.fontStyle?(i.style("font-family",t.fontStyle["font-family"]),i.style("font-size",t.fontStyle["font-size"]?t.fontStyle["font-size"]:n),i.style("font-weight",t.fontStyle["font-weight"]),i.style("font-style",t.fontStyle["font-style"]),i.style("text-align",t.fontStyle["text-align"]),i.style("text-decoration",t.fontStyle["text-decoration"]&&t.fontStyle["text-decoration"].join(" ")),i.style("color",t.fontStyle.color)):(i.style("font-family","inherit"),i.style("font-weight","normal"),i.style("font-style","normal"),i.style("text-align","left"),i.style("text-decoration","inherit"),i.style("color","#000")),i.html(t.richText);var o=window.getComputedStyle(i.node()),a=o.height,l=o.width;return{width:Math.max(Number(l.replace("px","")),n),height:Math.max(Number(a.replace("px","")),n)}}function v(e){return JSON.parse(JSON.stringify(e))}function y(e){if(void 0===e&&(e="被复制的内容"),navigator.clipboard)navigator.clipboard.writeText(e);else{var t=document.createElement("textarea");document.body.appendChild(t),t.style.position="fixed",t.style.clip="rect(0 0 0 0)",t.style.top="10px",t.value=e,t.select(),document.execCommand("copy",!0),document.body.removeChild(t)}}function b(e){var t=[],n=v(e);return n.forEach((function(e){s(e,(function(e){var n=Math.random().toString(32).substring(2);e.id=n,t.push(n)}),(function(e){return e.children&&e.children.length>0?e.children:null}))})),[n,t]}function x(e,t){void 0===t&&(t="");var n=new XMLHttpRequest;n.open("get",e,!0),n.responseType="blob",n.onload=function(){var e=URL.createObjectURL(n.response),i=document.createElement("a"),o=new MouseEvent("click");i.href=e,i.download=t||"default.png",i.dispatchEvent(o),URL.revokeObjectURL(e)},n.send()}function C(e){var t=e.width,n=e.height;function i(e,t,n){var i=e,o=t;return e<t?(i=e*(n/t),o=n):(o=t*(n/e),i=n),[i=Number(i.toFixed(2)),o=Number(o.toFixed(2))]}var o=Math.max(t,n),a=[t,n];return o<32?a=i(t,n,32):o>500&&(a=i(t,n,500)),{width:a[0],height:a[1]}}},2648:(e,t,n)=>{n.d(t,{_E:()=>p,Ke:()=>h,Du:()=>c});var i=n(67294),o=n(94055),a=n(49332);const r="XYQ33uIRaU3oItrMcho0",l="gBiO_CixXwIcv6FEWuME",c=function(e){var t=e.minderInstance,n=e.selected,c=e.onClick,d=t.undoManager,s=d.undoStack,h=void 0===s?[]:s,u=d.redoStack,p=void 0===u?[]:u;return i.createElement("div",{className:"XH6wW5XSHXxYqhdB0hEJ"},i.createElement("div",null,i.createElement(o.Z,{title:"快捷操作：Command+Z",color:"#f50",mouseEnterDelay:1},i.createElement("div",{className:"".concat(r," ").concat(h.length?"":l),onClick:h.length&&c(a.aU.Undo)},i.createElement("iconpark-icon",{name:"undo",size:"20"}),i.createElement("p",null,"撤销"))),i.createElement(o.Z,{title:"快捷操作：Command+Y",color:"#f50",mouseEnterDelay:1},i.createElement("div",{className:"".concat(r," ").concat(p.length?"":l),onClick:p.length&&c(a.aU.Redo)},i.createElement("iconpark-icon",{name:"redo",size:"20"}),i.createElement("p",null,"恢复"))),i.createElement(o.Z,{title:"添加同级主题（enter）",color:"#f50",mouseEnterDelay:1},i.createElement("div",{className:"".concat(r," ").concat(n?"":l),onClick:n&&c(a.aU.InsertSiblingTopic)},i.createElement("iconpark-icon",{name:"add-item",size:"20"}),i.createElement("p",null,"主题"))),i.createElement(o.Z,{title:"添加下级主题（tab）",color:"#f50",mouseEnterDelay:1},i.createElement("div",{className:"".concat(r," ").concat(n?"":l),onClick:n&&c(a.aU.InsertSubTopic)},i.createElement("iconpark-icon",{name:"add-subset",size:"20"}),i.createElement("p",null,"子主题"))),i.createElement(o.Z,{title:"选中主题-插入图片",color:"#f50",mouseEnterDelay:1},i.createElement("div",{className:"".concat(r," ").concat(n?"":l),onClick:n&&c(a.aU.InsertImage)},i.createElement("iconpark-icon",{name:"new-picture",size:"20"}),i.createElement("p",null,"图片"))),i.createElement(o.Z,{title:"选中主题-插入图标",color:"#f50",mouseEnterDelay:1},i.createElement("div",{className:"".concat(r," ").concat(n?"":l),onClick:n&&c(a.aU.Icon)},i.createElement("iconpark-icon",{name:"smiling-face",size:"20"}),i.createElement("p",null,"图标"))),i.createElement(o.Z,{title:"选中主题-插入链接",color:"#f50",mouseEnterDelay:1},i.createElement("div",{className:"".concat(r," ").concat(n?"":l),onClick:n&&c(a.aU.OpenHyperlinkModal)},i.createElement("iconpark-icon",{name:"link",size:"20"}),i.createElement("p",null,"链接")))))},d={"side-bar":"bCplHG5m0EyQhC3MIqG9","side-bar-animate":"gQ7msQo2zO7ctd6IQBGB","menu-item":"d848zZzk4GDAmtycjhzC","menu-item-active":"pBI6GdfQRI5BSc3oMJ43"};var s=[{tips:"一键切换好看的风格",title:"风格",key:"theme",icon:"theme"},{tips:"选中主题-个性化每个元素",title:"样式",key:"style",icon:"platte"},{tips:"切换结构、背景",title:"画布",key:"structure",icon:"page"},{tips:"列表展示",title:"大纲",key:"mainPoint",icon:"mindmap-list"}];const h=function(e){var t=e.panel,n=e.animate,a=e.onClick,r=s.map((function(e){var r=n&&t===e.key?d["menu-item-active"]:"";return i.createElement(o.Z,{key:e.key,title:e.tips,color:"#f50",mouseEnterDelay:.75,placement:"left"},i.createElement("div",{className:"".concat(d["menu-item"]," ").concat(r),onClick:function(){return a(e.key)}},i.createElement("iconpark-icon",{name:e.icon,size:"20"}),i.createElement("p",null,e.title)))}));return i.createElement("div",{className:"".concat(d["side-bar"]," ").concat(n?d["side-bar-animate"]:"")},i.createElement("div",{className:d.bar},r))},u="tu5ZDVX8ztwRc9e4nckl",p=function(e){var t=e.minderInstance,n=e.percent,r=e.onClick;if(t){var l=t.undoManager;l.redoStack,l.undoStack}var c=(0,i.useState)(!0),d=c[0],s=c[1];return i.createElement("div",{className:"yyYKw0FlUkU7S3idvDzW"},i.createElement(o.Z,{title:"一键".concat(d?"展开":"收起"),color:"#f50",mouseEnterDelay:.25},i.createElement("div",{className:u,onClick:function(){s(!d),r(d?a.aU.CollapseAllTopic:a.aU.ExpandAllTopic)()}},i.createElement("iconpark-icon",{name:d?"add-one":"reduce-one",size:"18"}))),i.createElement(o.Z,{title:"定位到中心主题",color:"#f50",mouseEnterDelay:.25},i.createElement("div",{className:u,onClick:r(a.aU.OrientationCenterTopic)},i.createElement("iconpark-icon",{name:"radar",size:"18"}))),i.createElement(o.Z,{title:"放大",color:"#f50",mouseEnterDelay:.25},i.createElement("div",{className:u,onClick:r(a.aU.Scale,"enlarge")},i.createElement("iconpark-icon",{name:"plus",size:"18"}))),i.createElement(o.Z,{title:"还原",color:"#f50",mouseEnterDelay:.25},i.createElement("div",{className:"".concat(u," ").concat("obnEe_cCG9qFwJJq9iwU"),onClick:r(a.aU.Scale,"reset")},n,"%")),i.createElement(o.Z,{title:"缩小",color:"#f50",mouseEnterDelay:.25},i.createElement("div",{className:u,onClick:r(a.aU.Scale,"decrease")},i.createElement("iconpark-icon",{name:"minus",size:"18"}))))}},18407:(e,t,n)=>{n.d(t,{A:()=>a});var i=n(11949),o=n.n(i);function a(e){var t=new Image;t.src=e;var n=new(o())(t,{navbar:!1,title:!1,toolbar:{zoomIn:2,zoomOut:2,prev:!1,next:!1},hidden:function(){console.log("hide"),n.destroy()}});n.show()}},14022:(e,t,n)=>{n.d(t,{Zs:()=>i});var i={id:"Root",isRoot:!0,text:"中心主题",richText:"中心主题",expandState:"expand",children:[{id:"1",side:"right",text:"分支主题1",richText:"分支主题1",expandState:"expand",hyperlink:"https://uncoder-fe.github.io/mindmap/",children:[{id:"1-1",text:"子主题12",richText:"子主题12",expandState:"expand",image:"https://t15.baidu.com/it/u=2111769980,959207235&fm=224&app=112&f=JPEG?w=500&h=500",imageSize:{width:200,height:200},children:[]}]},{id:"2",side:"right",text:"分支主题2",richText:"分支主题2",expandState:"expand",children:[{id:"2-1",text:"子主题2",richText:"子主题2",expandState:"expand",children:[]}]},{id:"3",side:"left",text:"分支主题3",richText:"分支主题3",expandState:"expand",children:[{id:"3-1",text:"子主题3",richText:"子主题3",expandState:"expand",children:[]}]},{id:"4",side:"left",text:"分支主题4",richText:"分支主题4",expandState:"expand",children:[{id:"4-1",text:"子主题4",richText:"子主题4",expandState:"expand",children:[]}]}]}},65928:(e,t,n)=>{function i(){console.log("foo2")}n.d(t,{R:()=>i})}},e=>{e.O(0,[110,584,464,651,194,802,310,457,831,576,356,351,618,911,970,592,663,856,69,134,682,688,923,386],(()=>(62632,e(e.s=62632)))),e.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,