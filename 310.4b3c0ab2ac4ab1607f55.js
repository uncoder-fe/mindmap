"use strict";(self.webpackChunkmindmap=self.webpackChunkmindmap||[]).push([[310],{30845:(e,t,n)=>{n.r(t),n.d(t,{default:()=>a});var o=Number.isNaN||function(e){return"number"==typeof e&&e!=e};function r(e,t){if(e.length!==t.length)return!1;for(var n=0;n<e.length;n++)if(!((r=e[n])===(a=t[n])||o(r)&&o(a)))return!1;var r,a;return!0}function a(e,t){void 0===t&&(t=r);var n=null;function o(){for(var o=[],r=0;r<arguments.length;r++)o[r]=arguments[r];if(n&&n.lastThis===this&&t(o,n.lastArgs))return n.lastResult;var a=e.apply(this,o);return n={lastResult:a,lastArgs:o,lastThis:this},a}return o.clear=function(){n=null},o}},84480:(e,t,n)=>{n.d(t,{Z:()=>C});var o=n(29439),r=n(71002),a=n(67294),c=n(42550),i=n(5110),l=n(73382),s=n(64019),u=n(18446),d=n.n(u),m=n(91033),f=n(94999);function v(e,t){var n=null,r=null,a=new m.Z((function(e){var a=(0,o.Z)(e,1)[0].target;if(document.documentElement.contains(a)){var c=a.getBoundingClientRect(),i=c.width,l=c.height,s=Math.floor(i),u=Math.floor(l);n===s&&r===u||Promise.resolve().then((function(){t({width:s,height:u})})),n=s,r=u}}));return e&&a.observe(e),function(){a.disconnect()}}function p(e){return"function"!=typeof e?null:e()}function h(e){return"object"===(0,r.Z)(e)&&e?e:null}var g=function(e,t){var n=e.children,r=e.disabled,u=e.target,m=e.align,g=e.onAlign,y=e.monitorWindowResize,C=e.monitorBufferTime,w=void 0===C?0:C,k=a.useRef({}),b=a.useRef(),E=a.Children.only(n),N=a.useRef({});N.current.disabled=r,N.current.target=u,N.current.align=m,N.current.onAlign=g;var Z=function(e,t){var n=a.useRef(!1),o=a.useRef(null);function r(){window.clearTimeout(o.current)}return[function e(a){if(r(),n.current&&!0!==a)o.current=window.setTimeout((function(){n.current=!1,e()}),t);else{if(!1===function(){var e=N.current,t=e.disabled,n=e.target,o=e.align,r=e.onAlign;if(!t&&n){var a,c=b.current,s=p(n),u=h(n);k.current.element=s,k.current.point=u,k.current.align=o;var d=document.activeElement;return s&&(0,i.Z)(s)?a=(0,l.E3)(c,s,o):u&&(a=(0,l.zy)(c,u,o)),function(e,t){e!==document.activeElement&&(0,f.Z)(t,e)&&"function"==typeof e.focus&&e.focus()}(d,c),r&&a&&r(c,a),!0}return!1}())return;n.current=!0,o.current=window.setTimeout((function(){n.current=!1}),t)}},function(){n.current=!1,r()}]}(0,w),D=(0,o.Z)(Z,2),T=D[0],S=D[1],R=a.useRef({cancel:function(){}}),M=a.useRef({cancel:function(){}});a.useEffect((function(){var e,t,n=p(u),o=h(u);b.current!==M.current.element&&(M.current.cancel(),M.current.element=b.current,M.current.cancel=v(b.current,T)),k.current.element===n&&((e=k.current.point)===(t=o)||e&&t&&("pageX"in t&&"pageY"in t?e.pageX===t.pageX&&e.pageY===t.pageY:"clientX"in t&&"clientY"in t&&e.clientX===t.clientX&&e.clientY===t.clientY))&&d()(k.current.align,m)||(T(),R.current.element!==n&&(R.current.cancel(),R.current.element=n,R.current.cancel=v(n,T)))})),a.useEffect((function(){r?S():T()}),[r]);var x=a.useRef(null);return a.useEffect((function(){y?x.current||(x.current=(0,s.Z)(window,"resize",T)):x.current&&(x.current.remove(),x.current=null)}),[y]),a.useEffect((function(){return function(){R.current.cancel(),M.current.cancel(),x.current&&x.current.remove(),S()}}),[]),a.useImperativeHandle(t,(function(){return{forceAlign:function(){return T(!0)}}})),a.isValidElement(E)&&(E=a.cloneElement(E,{ref:(0,c.sQ)(E.ref,b)})),E},y=a.forwardRef(g);y.displayName="Align";const C=y},51575:(e,t,n)=>{n.d(t,{Z:()=>Z});var o=n(87462),r=n(29439),a=n(67294),c=n(2016),i=n(1413),l=n(94184),s=n.n(l),u=n(15105),d=n(7028),m=n(94999),f=n(64217),v=n(63441);function p(e){var t=e.prefixCls,n=e.style,r=e.visible,c=e.maskProps,l=e.motionName;return a.createElement(v.Z,{key:"mask",visible:r,motionName:l,leavedClassName:"".concat(t,"-mask-hidden")},(function(e){var r=e.className,l=e.style;return a.createElement("div",(0,o.Z)({style:(0,i.Z)((0,i.Z)({},l),n),className:s()("".concat(t,"-mask"),r)},c))}))}function h(e,t,n){var o=t;return!o&&n&&(o="".concat(e,"-").concat(n)),o}function g(e,t){var n=e["page".concat(t?"Y":"X","Offset")],o="scroll".concat(t?"Top":"Left");if("number"!=typeof n){var r=e.document;"number"!=typeof(n=r.documentElement[o])&&(n=r.body[o])}return n}const y=a.memo((function(e){return e.children}),(function(e,t){return!t.shouldUpdate}));var C={width:0,height:0,overflow:"hidden",outline:"none"};const w=a.forwardRef((function(e,t){var n=e.prefixCls,r=e.className,c=e.style,l=e.title,u=e.ariaId,d=e.footer,m=e.closable,f=e.closeIcon,v=e.onClose,p=e.children,h=e.bodyStyle,g=e.bodyProps,w=e.modalRender,k=e.onMouseDown,b=e.onMouseUp,E=e.holderRef,N=e.visible,Z=e.forceRender,D=e.width,T=e.height,S=(0,a.useRef)(),R=(0,a.useRef)();a.useImperativeHandle(t,(function(){return{focus:function(){var e;null===(e=S.current)||void 0===e||e.focus()},changeActive:function(e){var t=document.activeElement;e&&t===R.current?S.current.focus():e||t!==S.current||R.current.focus()}}}));var M,x,L,A={};void 0!==D&&(A.width=D),void 0!==T&&(A.height=T),d&&(M=a.createElement("div",{className:"".concat(n,"-footer")},d)),l&&(x=a.createElement("div",{className:"".concat(n,"-header")},a.createElement("div",{className:"".concat(n,"-title"),id:u},l))),m&&(L=a.createElement("button",{type:"button",onClick:v,"aria-label":"Close",className:"".concat(n,"-close")},f||a.createElement("span",{className:"".concat(n,"-close-x")})));var P=a.createElement("div",{className:"".concat(n,"-content")},L,x,a.createElement("div",(0,o.Z)({className:"".concat(n,"-body"),style:h},g),p),M);return a.createElement("div",{key:"dialog-element",role:"dialog","aria-labelledby":l?u:null,"aria-modal":"true",ref:E,style:(0,i.Z)((0,i.Z)({},c),A),className:s()(n,r),onMouseDown:k,onMouseUp:b},a.createElement("div",{tabIndex:0,ref:S,style:C,"aria-hidden":"true"}),a.createElement(y,{shouldUpdate:N||Z},w?w(P):P),a.createElement("div",{tabIndex:0,ref:R,style:C,"aria-hidden":"true"}))}));var k=a.forwardRef((function(e,t){var n=e.prefixCls,c=e.title,l=e.style,u=e.className,d=e.visible,m=e.forceRender,f=e.destroyOnClose,p=e.motionName,h=e.ariaId,y=e.onVisibleChanged,C=e.mousePosition,k=(0,a.useRef)(),b=a.useState(),E=(0,r.Z)(b,2),N=E[0],Z=E[1],D={};function T(){var e,t,n,o,r,a=(n={left:(t=(e=k.current).getBoundingClientRect()).left,top:t.top},r=(o=e.ownerDocument).defaultView||o.parentWindow,n.left+=g(r),n.top+=g(r,!0),n);Z(C?"".concat(C.x-a.left,"px ").concat(C.y-a.top,"px"):"")}return N&&(D.transformOrigin=N),a.createElement(v.Z,{visible:d,onVisibleChanged:y,onAppearPrepare:T,onEnterPrepare:T,forceRender:m,motionName:p,removeOnLeave:f,ref:k},(function(r,d){var m=r.className,f=r.style;return a.createElement(w,(0,o.Z)({},e,{ref:t,title:c,ariaId:h,prefixCls:n,holderRef:d,style:(0,i.Z)((0,i.Z)((0,i.Z)({},f),l),D),className:s()(u,m)}))}))}));k.displayName="Content";const b=k;function E(e){var t=e.prefixCls,n=void 0===t?"rc-dialog":t,c=e.zIndex,l=e.visible,v=void 0!==l&&l,g=e.keyboard,y=void 0===g||g,C=e.focusTriggerAfterClose,w=void 0===C||C,k=e.scrollLocker,E=e.wrapStyle,N=e.wrapClassName,Z=e.wrapProps,D=e.onClose,T=e.afterClose,S=e.transitionName,R=e.animation,M=e.closable,x=void 0===M||M,L=e.mask,A=void 0===L||L,P=e.maskTransitionName,H=e.maskAnimation,I=e.maskClosable,O=void 0===I||I,X=e.maskStyle,W=e.maskProps,z=e.rootClassName,Y=(0,a.useRef)(),V=(0,a.useRef)(),B=(0,a.useRef)(),F=a.useState(v),U=(0,r.Z)(F,2),K=U[0],j=U[1],_=(0,d.Z)();function q(e){null==D||D(e)}var Q=(0,a.useRef)(!1),$=(0,a.useRef)(),G=null;return O&&(G=function(e){Q.current?Q.current=!1:V.current===e.target&&q(e)}),(0,a.useEffect)((function(){return v&&j(!0),function(){}}),[v]),(0,a.useEffect)((function(){return function(){clearTimeout($.current)}}),[]),(0,a.useEffect)((function(){return K?(null==k||k.lock(),null==k?void 0:k.unLock):function(){}}),[K,k]),a.createElement("div",(0,o.Z)({className:s()("".concat(n,"-root"),z)},(0,f.Z)(e,{data:!0})),a.createElement(p,{prefixCls:n,visible:A&&v,motionName:h(n,P,H),style:(0,i.Z)({zIndex:c},X),maskProps:W}),a.createElement("div",(0,o.Z)({tabIndex:-1,onKeyDown:function(e){if(y&&e.keyCode===u.Z.ESC)return e.stopPropagation(),void q(e);v&&e.keyCode===u.Z.TAB&&B.current.changeActive(!e.shiftKey)},className:s()("".concat(n,"-wrap"),N),ref:V,onClick:G,style:(0,i.Z)((0,i.Z)({zIndex:c},E),{},{display:K?null:"none"})},Z),a.createElement(b,(0,o.Z)({},e,{onMouseDown:function(){clearTimeout($.current),Q.current=!0},onMouseUp:function(){$.current=setTimeout((function(){Q.current=!1}))},ref:B,closable:x,ariaId:_,prefixCls:n,visible:v,onClose:q,onVisibleChanged:function(e){if(e){var t;(0,m.Z)(V.current,document.activeElement)||(Y.current=document.activeElement,null===(t=B.current)||void 0===t||t.focus())}else{if(j(!1),A&&Y.current&&w){try{Y.current.focus({preventScroll:!0})}catch(e){}Y.current=null}K&&(null==T||T())}},motionName:h(n,S,R)}))))}var N=function(e){var t=e.visible,n=e.getContainer,i=e.forceRender,l=e.destroyOnClose,s=void 0!==l&&l,u=e.afterClose,d=a.useState(t),m=(0,r.Z)(d,2),f=m[0],v=m[1];return a.useEffect((function(){t&&v(!0)}),[t]),!1===n?a.createElement(E,(0,o.Z)({},e,{getOpenCount:function(){return 2}})):i||!s||f?a.createElement(c.Z,{visible:t,forceRender:i,getContainer:n},(function(t){return a.createElement(E,(0,o.Z)({},e,{destroyOnClose:s,afterClose:function(){null==u||u(),v(!1)}},t))})):null};N.displayName="Dialog";const Z=N},24444:(e,t,n)=>{n.r(t),n.d(t,{default:()=>A});var o=n(87462),r=n(44925),a=n(15671),c=n(43144),i=n(79340),l=n(98557),s=n(2016),u=n(67294),d=n(1413),m=n(4942),f=n(97326),v=n(94184),p=n.n(v),h=n(74204),g=n(15105),y=n(98423),C={transition:"transitionend",WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend"},w=Object.keys(C).filter((function(e){if("undefined"==typeof document)return!1;var t=document.getElementsByTagName("html")[0];return e in(t?t.style:{})}))[0],k=C[w];function b(e,t,n,o){e.addEventListener?e.addEventListener(t,n,o):e.attachEvent&&e.attachEvent("on".concat(t),n)}function E(e,t,n,o){e.removeEventListener?e.removeEventListener(t,n,o):e.attachEvent&&e.detachEvent("on".concat(t),n)}var N=function(e){return!isNaN(parseFloat(e))&&isFinite(e)},Z=!("undefined"!=typeof window&&window.document&&window.document.createElement),D=function e(t,n,o,r){if(!n||n===document||n instanceof Document)return!1;if(n===t.parentNode)return!0;var a=Math.max(Math.abs(o),Math.abs(r))===Math.abs(r),c=Math.max(Math.abs(o),Math.abs(r))===Math.abs(o),i=n.scrollHeight-n.clientHeight,l=n.scrollWidth-n.clientWidth,s=document.defaultView.getComputedStyle(n),u="auto"===s.overflowY||"scroll"===s.overflowY,d="auto"===s.overflowX||"scroll"===s.overflowX,m=i&&u,f=l&&d;return!!(a&&(!m||m&&(n.scrollTop>=i&&r<0||n.scrollTop<=0&&r>0))||c&&(!f||f&&(n.scrollLeft>=l&&o<0||n.scrollLeft<=0&&o>0)))&&e(t,n.parentNode,o,r)},T=["className","children","style","width","height","defaultOpen","open","prefixCls","placement","level","levelMove","ease","duration","getContainer","handler","onChange","afterVisibleChange","showMask","maskClosable","maskStyle","onClose","onHandleClick","keyboard","getOpenCount","scrollLocker","contentWrapperStyle"],S={};const R=function(e){(0,i.Z)(n,e);var t=(0,l.Z)(n);function n(e){var o;return(0,a.Z)(this,n),(o=t.call(this,e)).levelDom=void 0,o.dom=void 0,o.contentWrapper=void 0,o.contentDom=void 0,o.maskDom=void 0,o.handlerDom=void 0,o.drawerId=void 0,o.timeout=void 0,o.passive=void 0,o.startPos=void 0,o.domFocus=function(){o.dom&&o.dom.focus()},o.removeStartHandler=function(e){e.touches.length>1?o.startPos=null:o.startPos={x:e.touches[0].clientX,y:e.touches[0].clientY}},o.removeMoveHandler=function(e){if(!(e.changedTouches.length>1)&&o.startPos){var t=e.currentTarget,n=e.changedTouches[0].clientX-o.startPos.x,r=e.changedTouches[0].clientY-o.startPos.y;(t===o.maskDom||t===o.handlerDom||t===o.contentDom&&D(t,e.target,n,r))&&e.cancelable&&e.preventDefault()}},o.transitionEnd=function(e){var t=e.target;E(t,k,o.transitionEnd),t.style.transition=""},o.onKeyDown=function(e){if(e.keyCode===g.Z.ESC){var t=o.props.onClose;e.stopPropagation(),t&&t(e)}},o.onWrapperTransitionEnd=function(e){var t=o.props,n=t.open,r=t.afterVisibleChange;e.target===o.contentWrapper&&e.propertyName.match(/transform$/)&&(o.dom.style.transition="",!n&&o.getCurrentDrawerSome()&&(document.body.style.overflowX="",o.maskDom&&(o.maskDom.style.left="",o.maskDom.style.width="")),r&&r(!!n))},o.openLevelTransition=function(){var e=o.props,t=e.open,n=e.width,r=e.height,a=o.getHorizontalBoolAndPlacementName(),c=a.isHorizontal,i=a.placementName,l=o.contentDom?o.contentDom.getBoundingClientRect()[c?"width":"height"]:0,s=(c?n:r)||l;o.setLevelAndScrolling(t,i,s)},o.setLevelTransform=function(e,t,n,r){var a=o.props,c=a.placement,i=a.levelMove,l=a.duration,s=a.ease,u=a.showMask;o.levelDom.forEach((function(a){a.style.transition="transform ".concat(l," ").concat(s),b(a,k,o.transitionEnd);var d,m,f=e?n:0;if(i){var v=(m="function"==typeof(d=i)?d({target:a,open:e}):d,Array.isArray(m)?2===m.length?m:[m[0],m[1]]:[m]);f=e?v[0]:v[1]||0}var p="number"==typeof f?"".concat(f,"px"):f,h="left"===c||"top"===c?p:"-".concat(p);h=u&&"right"===c&&r?"calc(".concat(h," + ").concat(r,"px)"):h,a.style.transform=f?"".concat(t,"(").concat(h,")"):""}))},o.setLevelAndScrolling=function(e,t,n){var r=o.props.onChange;if(!Z){var a=document.body.scrollHeight>(window.innerHeight||document.documentElement.clientHeight)&&window.innerWidth>document.body.offsetWidth?(0,h.Z)(!0):0;o.setLevelTransform(e,t,n,a),o.toggleScrollingToDrawerAndBody(a)}r&&r(e)},o.toggleScrollingToDrawerAndBody=function(e){var t=o.props,n=t.getContainer,r=t.showMask,a=t.open,c=n&&n();if(c&&c.parentNode===document.body&&r){var i=["touchstart"],l=[document.body,o.maskDom,o.handlerDom,o.contentDom];a&&"hidden"!==document.body.style.overflow?(e&&o.addScrollingEffect(e),document.body.style.touchAction="none",l.forEach((function(e,t){e&&b(e,i[t]||"touchmove",t?o.removeMoveHandler:o.removeStartHandler,o.passive)}))):o.getCurrentDrawerSome()&&(document.body.style.touchAction="",e&&o.remScrollingEffect(e),l.forEach((function(e,t){e&&E(e,i[t]||"touchmove",t?o.removeMoveHandler:o.removeStartHandler,o.passive)})))}},o.addScrollingEffect=function(e){var t=o.props,n=t.placement,r=t.duration,a=t.ease,c="width ".concat(r," ").concat(a),i="transform ".concat(r," ").concat(a);switch(o.dom.style.transition="none",n){case"right":o.dom.style.transform="translateX(-".concat(e,"px)");break;case"top":case"bottom":o.dom.style.width="calc(100% - ".concat(e,"px)"),o.dom.style.transform="translateZ(0)"}clearTimeout(o.timeout),o.timeout=setTimeout((function(){o.dom&&(o.dom.style.transition="".concat(i,",").concat(c),o.dom.style.width="",o.dom.style.transform="")}))},o.remScrollingEffect=function(e){var t,n=o.props,r=n.placement,a=n.duration,c=n.ease;w&&(document.body.style.overflowX="hidden"),o.dom.style.transition="none";var i="width ".concat(a," ").concat(c),l="transform ".concat(a," ").concat(c);switch(r){case"left":o.dom.style.width="100%",i="width 0s ".concat(c," ").concat(a);break;case"right":o.dom.style.transform="translateX(".concat(e,"px)"),o.dom.style.width="100%",i="width 0s ".concat(c," ").concat(a),o.maskDom&&(o.maskDom.style.left="-".concat(e,"px"),o.maskDom.style.width="calc(100% + ".concat(e,"px)"));break;case"top":case"bottom":o.dom.style.width="calc(100% + ".concat(e,"px)"),o.dom.style.height="100%",o.dom.style.transform="translateZ(0)",t="height 0s ".concat(c," ").concat(a)}clearTimeout(o.timeout),o.timeout=setTimeout((function(){o.dom&&(o.dom.style.transition="".concat(l,",").concat(t?"".concat(t,","):"").concat(i),o.dom.style.transform="",o.dom.style.width="",o.dom.style.height="")}))},o.getCurrentDrawerSome=function(){return!Object.keys(S).some((function(e){return S[e]}))},o.getLevelDom=function(e){var t=e.level,n=e.getContainer;if(!Z){var r,a=n&&n(),c=a?a.parentNode:null;o.levelDom=[],"all"===t?(c?Array.prototype.slice.call(c.children):[]).forEach((function(e){"SCRIPT"!==e.nodeName&&"STYLE"!==e.nodeName&&"LINK"!==e.nodeName&&e!==a&&o.levelDom.push(e)})):t&&(r=t,Array.isArray(r)?r:[r]).forEach((function(e){document.querySelectorAll(e).forEach((function(e){o.levelDom.push(e)}))}))}},o.getHorizontalBoolAndPlacementName=function(){var e=o.props.placement,t="left"===e||"right"===e;return{isHorizontal:t,placementName:"translate".concat(t?"X":"Y")}},o.state={_self:(0,f.Z)(o)},o}return(0,c.Z)(n,[{key:"componentDidMount",value:function(){var e=this;if(!Z){var t=!1;try{window.addEventListener("test",null,Object.defineProperty({},"passive",{get:function(){return t=!0,null}}))}catch(e){}this.passive=!!t&&{passive:!1}}var n,o=this.props,r=o.open,a=o.getContainer,c=o.showMask,i=o.autoFocus,l=a&&a();this.drawerId="drawer_id_".concat(Number((Date.now()+Math.random()).toString().replace(".",Math.round(9*Math.random()).toString())).toString(16)),this.getLevelDom(this.props),r&&(l&&l.parentNode===document.body&&(S[this.drawerId]=r),this.openLevelTransition(),this.forceUpdate((function(){i&&e.domFocus()})),c&&(null===(n=this.props.scrollLocker)||void 0===n||n.lock()))}},{key:"componentDidUpdate",value:function(e){var t=this.props,n=t.open,o=t.getContainer,r=t.scrollLocker,a=t.showMask,c=t.autoFocus,i=o&&o();n!==e.open&&(i&&i.parentNode===document.body&&(S[this.drawerId]=!!n),this.openLevelTransition(),n?(c&&this.domFocus(),a&&(null==r||r.lock())):null==r||r.unLock())}},{key:"componentWillUnmount",value:function(){var e=this.props,t=e.open,n=e.scrollLocker;delete S[this.drawerId],t&&(this.setLevelTransform(!1),document.body.style.touchAction=""),null==n||n.unLock()}},{key:"render",value:function(){var e,t=this,n=this.props,a=n.className,c=n.children,i=n.style,l=n.width,s=n.height,f=(n.defaultOpen,n.open),v=n.prefixCls,h=n.placement,g=(n.level,n.levelMove,n.ease,n.duration,n.getContainer,n.handler),C=(n.onChange,n.afterVisibleChange,n.showMask),w=n.maskClosable,k=n.maskStyle,b=n.onClose,E=n.onHandleClick,Z=n.keyboard,D=(n.getOpenCount,n.scrollLocker,n.contentWrapperStyle),S=(0,r.Z)(n,T),R=!!this.dom&&f,M=p()(v,(e={},(0,m.Z)(e,"".concat(v,"-").concat(h),!0),(0,m.Z)(e,"".concat(v,"-open"),R),(0,m.Z)(e,a||"",!!a),(0,m.Z)(e,"no-mask",!C),e)),x=this.getHorizontalBoolAndPlacementName().placementName,L="left"===h||"top"===h?"-100%":"100%",A=R?"":"".concat(x,"(").concat(L,")"),P=g&&u.cloneElement(g,{onClick:function(e){g.props.onClick&&g.props.onClick(),E&&E(e)},ref:function(e){t.handlerDom=e}});return u.createElement("div",(0,o.Z)({},(0,y.Z)(S,["switchScrollingEffect","autoFocus"]),{tabIndex:-1,className:M,style:i,ref:function(e){t.dom=e},onKeyDown:R&&Z?this.onKeyDown:void 0,onTransitionEnd:this.onWrapperTransitionEnd}),C&&u.createElement("div",{className:"".concat(v,"-mask"),onClick:w?b:void 0,style:k,ref:function(e){t.maskDom=e}}),u.createElement("div",{className:"".concat(v,"-content-wrapper"),style:(0,d.Z)({transform:A,msTransform:A,width:N(l)?"".concat(l,"px"):l,height:N(s)?"".concat(s,"px"):s},D),ref:function(e){t.contentWrapper=e}},u.createElement("div",{className:"".concat(v,"-content"),ref:function(e){t.contentDom=e}},c),P))}}],[{key:"getDerivedStateFromProps",value:function(e,t){var n=t.prevProps,o=t._self,r={prevProps:e};if(void 0!==n){var a=e.placement,c=e.level;a!==n.placement&&(o.contentDom=null),c!==n.level&&o.getLevelDom(e)}return r}}]),n}(u.Component);var M=["defaultOpen","getContainer","wrapperClassName","forceRender","handler"],x=["visible","afterClose"],L=function(e){(0,i.Z)(n,e);var t=(0,l.Z)(n);function n(e){var o;(0,a.Z)(this,n),(o=t.call(this,e)).dom=void 0,o.onHandleClick=function(e){var t=o.props,n=t.onHandleClick,r=t.open;if(n&&n(e),void 0===r){var a=o.state.open;o.setState({open:!a})}},o.onClose=function(e){var t=o.props,n=t.onClose,r=t.open;n&&n(e),void 0===r&&o.setState({open:!1})};var r=void 0!==e.open?e.open:!!e.defaultOpen;return o.state={open:r},"onMaskClick"in e&&console.warn("`onMaskClick` are removed, please use `onClose` instead."),o}return(0,c.Z)(n,[{key:"render",value:function(){var e=this,t=this.props,n=(t.defaultOpen,t.getContainer),a=t.wrapperClassName,c=t.forceRender,i=t.handler,l=(0,r.Z)(t,M),d=this.state.open;if(!n)return u.createElement("div",{className:a,ref:function(t){e.dom=t}},u.createElement(R,(0,o.Z)({},l,{open:d,handler:i,getContainer:function(){return e.dom},onClose:this.onClose,onHandleClick:this.onHandleClick})));var m=!!i||c;return u.createElement(s.Z,{visible:d,forceRender:m,getContainer:n,wrapperClassName:a},(function(t){var n=t.visible,a=t.afterClose,c=(0,r.Z)(t,x);return u.createElement(R,(0,o.Z)({},l,c,{open:void 0!==n?n:d,afterVisibleChange:void 0!==a?a:l.afterVisibleChange,handler:i,onClose:e.onClose,onHandleClick:e.onHandleClick}))}))}}],[{key:"getDerivedStateFromProps",value:function(e,t){var n=t.prevProps,o={prevProps:e};return void 0!==n&&e.open!==n.open&&(o.open=e.open),o}}]),n}(u.Component);L.defaultProps={prefixCls:"drawer",placement:"left",getContainer:"body",defaultOpen:!1,level:"all",duration:".3s",ease:"cubic-bezier(0.78, 0.14, 0.15, 0.86)",onChange:function(){},afterVisibleChange:function(){},handler:u.createElement("div",{className:"drawer-handle"},u.createElement("i",{className:"drawer-handle-icon"})),showMask:!0,maskClosable:!0,maskStyle:{},wrapperClassName:"",className:"",keyboard:!0,forceRender:!1,autoFocus:!0};const A=L}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,