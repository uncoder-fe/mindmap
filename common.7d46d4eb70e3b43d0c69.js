(()=>{var t,e,n,r={597:(t,e,n)=>{"use strict";var r,i=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},o=n(7294),s=(r=o)&&r.__esModule?r:{default:r};e.Z=function(t){var e=t.fill,n=void 0===e?"currentColor":e,r=t.width,o=void 0===r?24:r,a=t.height,l=void 0===a?24:a,c=t.style,h=void 0===c?{}:c,u=function(t,e){var n={};for(var r in t)e.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r]);return n}(t,["fill","width","height","style"]);return s.default.createElement("svg",i({viewBox:"0 0 24 24",style:i({fill:n,width:o,height:l},h)},u),s.default.createElement("path",{d:"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"}))}},3891:(t,e,n)=>{"use strict";var r,i=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},o=n(7294),s=(r=o)&&r.__esModule?r:{default:r};e.Z=function(t){var e=t.fill,n=void 0===e?"currentColor":e,r=t.width,o=void 0===r?24:r,a=t.height,l=void 0===a?24:a,c=t.style,h=void 0===c?{}:c,u=function(t,e){var n={};for(var r in t)e.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r]);return n}(t,["fill","width","height","style"]);return s.default.createElement("svg",i({viewBox:"0 0 24 24",style:i({fill:n,width:o,height:l},h)},u),s.default.createElement("path",{d:"M12,18.17L8.83,15L7.42,16.41L12,21L16.59,16.41L15.17,15M12,5.83L15.17,9L16.58,7.59L12,3L7.41,7.59L8.83,9L12,5.83Z"}))}},5371:(t,e,n)=>{"use strict";n.d(e,{ML:()=>si,hj:()=>kr,vc:()=>hi,NB:()=>ui,Jo:()=>Hr,Cf:()=>ci,K9:()=>di,P1:()=>rr,pr:()=>li});var r=n(2376),i=n(7823),o=n(6560);const s="undefined"!=typeof navigator?navigator:null,a="undefined"!=typeof document?document:null,l=s&&s.userAgent||"",c=/Edge\/(\d+)/.exec(l),h=/MSIE \d/.exec(l),u=/Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(l),d=!!(h||u||c),p=h?document.documentMode:u?+u[1]:c?+c[1]:0,f=!d&&/gecko\/(\d+)/i.test(l);f&&(/Firefox\/(\d+)/.exec(l)||[0,0])[1];const g=!d&&/Chrome\/(\d+)/.exec(l),m=!!g,y=g?+g[1]:0,v=!d&&!!s&&/Apple Computer/.test(s.vendor),b=v&&(/Mobile\/\w+/.test(l)||!!s&&s.maxTouchPoints>2),w=b||!!s&&/Mac/.test(s.platform),x=/Android \d/.test(l),k=!!a&&"webkitFontSmoothing"in a.documentElement.style,S=k?+(/\bAppleWebKit\/(\d+)/.exec(navigator.userAgent)||[0,0])[1]:0,_=function(t){for(var e=0;;e++)if(!(t=t.previousSibling))return e},E=function(t){let e=t.assignedSlot||t.parentNode;return e&&11==e.nodeType?e.host:e};let C=null;const O=function(t,e,n){let r=C||(C=document.createRange());return r.setEnd(t,null==n?t.nodeValue.length:n),r.setStart(t,e||0),r},M=function(t,e,n,r){return n&&(T(t,e,n,r,-1)||T(t,e,n,r,1))},A=/^(img|br|input|textarea|hr)$/i;function T(t,e,n,r,i){for(;;){if(t==n&&e==r)return!0;if(e==(i<0?0:N(t))){let n=t.parentNode;if(!n||1!=n.nodeType||D(t)||A.test(t.nodeName)||"false"==t.contentEditable)return!1;e=_(t)+(i<0?0:1),t=n}else{if(1!=t.nodeType)return!1;if("false"==(t=t.childNodes[e+(i<0?-1:0)]).contentEditable)return!1;e=i<0?N(t):0}}}function N(t){return 3==t.nodeType?t.nodeValue.length:t.childNodes.length}function D(t){let e;for(let n=t;n&&!(e=n.pmViewDesc);n=n.parentNode);return e&&e.node&&e.node.isBlock&&(e.dom==t||e.contentDOM==t)}const j=function(t){let e=t.isCollapsed;return e&&m&&t.rangeCount&&!t.getRangeAt(0).collapsed&&(e=!1),e};function R(t,e){let n=document.createEvent("Event");return n.initEvent("keydown",!0,!0),n.keyCode=t,n.key=n.code=e,n}function P(t){return{left:0,right:t.documentElement.clientWidth,top:0,bottom:t.documentElement.clientHeight}}function z(t,e){return"number"==typeof t?t:t[e]}function I(t){let e=t.getBoundingClientRect(),n=e.width/t.offsetWidth||1,r=e.height/t.offsetHeight||1;return{left:e.left,right:e.left+t.clientWidth*n,top:e.top,bottom:e.top+t.clientHeight*r}}function B(t,e,n){let r=t.someProp("scrollThreshold")||0,i=t.someProp("scrollMargin")||5,o=t.dom.ownerDocument;for(let s=n||t.dom;s;s=E(s)){if(1!=s.nodeType)continue;let t=s,n=t==o.body,a=n?P(o):I(t),l=0,c=0;if(e.top<a.top+z(r,"top")?c=-(a.top-e.top+z(i,"top")):e.bottom>a.bottom-z(r,"bottom")&&(c=e.bottom-a.bottom+z(i,"bottom")),e.left<a.left+z(r,"left")?l=-(a.left-e.left+z(i,"left")):e.right>a.right-z(r,"right")&&(l=e.right-a.right+z(i,"right")),l||c)if(n)o.defaultView.scrollBy(l,c);else{let n=t.scrollLeft,r=t.scrollTop;c&&(t.scrollTop+=c),l&&(t.scrollLeft+=l);let i=t.scrollLeft-n,o=t.scrollTop-r;e={left:e.left-i,top:e.top-o,right:e.right-i,bottom:e.bottom-o}}if(n)break}}function F(t){let e=[],n=t.ownerDocument;for(let r=t;r&&(e.push({dom:r,top:r.scrollTop,left:r.scrollLeft}),t!=n);r=E(r));return e}function $(t,e){for(let n=0;n<t.length;n++){let{dom:r,top:i,left:o}=t[n];r.scrollTop!=i+e&&(r.scrollTop=i+e),r.scrollLeft!=o&&(r.scrollLeft=o)}}let L=null;function H(t,e){let n,r,i=2e8,o=0,s=e.top,a=e.top;for(let l=t.firstChild,c=0;l;l=l.nextSibling,c++){let t;if(1==l.nodeType)t=l.getClientRects();else{if(3!=l.nodeType)continue;t=O(l).getClientRects()}for(let h=0;h<t.length;h++){let u=t[h];if(u.top<=s&&u.bottom>=a){s=Math.max(u.bottom,s),a=Math.min(u.top,a);let t=u.left>e.left?u.left-e.left:u.right<e.left?e.left-u.right:0;if(t<i){n=l,i=t,r=t&&3==n.nodeType?{left:u.right<e.left?u.right:u.left,top:e.top}:e,1==l.nodeType&&t&&(o=c+(e.left>=(u.left+u.right)/2?1:0));continue}}!n&&(e.left>=u.right&&e.top>=u.top||e.left>=u.left&&e.top>=u.bottom)&&(o=c+1)}}return n&&3==n.nodeType?function(t,e){let n=t.nodeValue.length,r=document.createRange();for(let i=0;i<n;i++){r.setEnd(t,i+1),r.setStart(t,i);let n=U(r,1);if(n.top!=n.bottom&&V(e,n))return{node:t,offset:i+(e.left>=(n.left+n.right)/2?1:0)}}return{node:t,offset:0}}(n,r):!n||i&&1==n.nodeType?{node:t,offset:o}:H(n,r)}function V(t,e){return t.left>=e.left-1&&t.left<=e.right+1&&t.top>=e.top-1&&t.top<=e.bottom+1}function q(t,e,n){let r=t.childNodes.length;if(r&&n.top<n.bottom)for(let i=Math.max(0,Math.min(r-1,Math.floor(r*(e.top-n.top)/(n.bottom-n.top))-2)),o=i;;){let n=t.childNodes[o];if(1==n.nodeType){let t=n.getClientRects();for(let r=0;r<t.length;r++){let i=t[r];if(V(e,i))return q(n,e,i)}}if((o=(o+1)%r)==i)break}return t}function W(t,e){let n,r=t.dom.ownerDocument,i=0;if(r.caretPositionFromPoint)try{let t=r.caretPositionFromPoint(e.left,e.top);t&&({offsetNode:n,offset:i}=t)}catch(t){}if(!n&&r.caretRangeFromPoint){let t=r.caretRangeFromPoint(e.left,e.top);t&&({startContainer:n,startOffset:i}=t)}let o,s=(t.root.elementFromPoint?t.root:r).elementFromPoint(e.left,e.top+1);if(!s||!t.dom.contains(1!=s.nodeType?s.parentNode:s)){let n=t.dom.getBoundingClientRect();if(!V(e,n))return null;if(s=q(t.dom,e,n),!s)return null}if(v)for(let t=s;n&&t;t=E(t))t.draggable&&(n=void 0);if(s=function(t,e){let n=t.parentNode;return n&&/^li$/i.test(n.nodeName)&&e.left<t.getBoundingClientRect().left?n:t}(s,e),n){if(f&&1==n.nodeType&&(i=Math.min(i,n.childNodes.length),i<n.childNodes.length)){let t,r=n.childNodes[i];"IMG"==r.nodeName&&(t=r.getBoundingClientRect()).right<=e.left&&t.bottom>e.top&&i++}n==t.dom&&i==n.childNodes.length-1&&1==n.lastChild.nodeType&&e.top>n.lastChild.getBoundingClientRect().bottom?o=t.state.doc.content.size:0!=i&&1==n.nodeType&&"BR"==n.childNodes[i-1].nodeName||(o=function(t,e,n,r){let i=-1;for(let n=e;n!=t.dom;){let e=t.docView.nearestDesc(n,!0);if(!e)return null;if(e.node.isBlock&&e.parent){let t=e.dom.getBoundingClientRect();if(t.left>r.left||t.top>r.top)i=e.posBefore;else{if(!(t.right<r.left||t.bottom<r.top))break;i=e.posAfter}}n=e.dom.parentNode}return i>-1?i:t.docView.posFromDOM(e,n,1)}(t,n,i,e))}null==o&&(o=function(t,e,n){let{node:r,offset:i}=H(e,n),o=-1;if(1==r.nodeType&&!r.firstChild){let t=r.getBoundingClientRect();o=t.left!=t.right&&n.left>(t.left+t.right)/2?1:-1}return t.docView.posFromDOM(r,i,o)}(t,s,e));let a=t.docView.nearestDesc(s,!0);return{pos:o,inside:a?a.posAtStart-a.border:-1}}function U(t,e){let n=t.getClientRects();return n.length?n[e<0?0:n.length-1]:t.getBoundingClientRect()}const Y=/[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac]/;function J(t,e,n){let{node:r,offset:i}=t.docView.domFromPos(e,n<0?-1:1),o=k||f;if(3==r.nodeType){if(!o||!Y.test(r.nodeValue)&&(n<0?i:i!=r.nodeValue.length)){let t=i,e=i,o=n<0?1:-1;return n<0&&!i?(e++,o=-1):n>=0&&i==r.nodeValue.length?(t--,o=1):n<0?t--:e++,X(U(O(r,t,e),o),o<0)}{let t=U(O(r,i,i),n);if(f&&i&&/\s/.test(r.nodeValue[i-1])&&i<r.nodeValue.length){let e=U(O(r,i-1,i-1),-1);if(e.top==t.top){let n=U(O(r,i,i+1),-1);if(n.top!=t.top)return X(n,n.left<e.left)}}return t}}if(!t.state.doc.resolve(e).parent.inlineContent){if(i&&(n<0||i==N(r))){let t=r.childNodes[i-1];if(1==t.nodeType)return K(t.getBoundingClientRect(),!1)}if(i<N(r)){let t=r.childNodes[i];if(1==t.nodeType)return K(t.getBoundingClientRect(),!0)}return K(r.getBoundingClientRect(),n>=0)}if(i&&(n<0||i==N(r))){let t=r.childNodes[i-1],e=3==t.nodeType?O(t,N(t)-(o?0:1)):1!=t.nodeType||"BR"==t.nodeName&&t.nextSibling?null:t;if(e)return X(U(e,1),!1)}if(i<N(r)){let t=r.childNodes[i];for(;t.pmViewDesc&&t.pmViewDesc.ignoreForCoords;)t=t.nextSibling;let e=t?3==t.nodeType?O(t,0,o?0:1):1==t.nodeType?t:null:null;if(e)return X(U(e,-1),!0)}return X(U(3==r.nodeType?O(r):r,-n),n>=0)}function X(t,e){if(0==t.width)return t;let n=e?t.left:t.right;return{top:t.top,bottom:t.bottom,left:n,right:n}}function K(t,e){if(0==t.height)return t;let n=e?t.top:t.bottom;return{top:n,bottom:n,left:t.left,right:t.right}}function G(t,e,n){let r=t.state,i=t.root.activeElement;r!=e&&t.updateState(e),i!=t.dom&&t.focus();try{return n()}finally{r!=e&&t.updateState(r),i!=t.dom&&i&&i.focus()}}const Z=/[\u0590-\u08ac]/;let Q=null,tt=null,et=!1;function nt(t,e,n){return Q==e&&tt==n?et:(Q=e,tt=n,et="up"==n||"down"==n?function(t,e,n){let r=e.selection,i="up"==n?r.$from:r.$to;return G(t,e,(()=>{let{node:e}=t.docView.domFromPos(i.pos,"up"==n?-1:1);for(;;){let n=t.docView.nearestDesc(e,!0);if(!n)break;if(n.node.isBlock){e=n.dom;break}e=n.dom.parentNode}let r=J(t,i.pos,1);for(let t=e.firstChild;t;t=t.nextSibling){let e;if(1==t.nodeType)e=t.getClientRects();else{if(3!=t.nodeType)continue;e=O(t,0,t.nodeValue.length).getClientRects()}for(let t=0;t<e.length;t++){let i=e[t];if(i.bottom>i.top+1&&("up"==n?r.top-i.top>2*(i.bottom-r.top):i.bottom-r.bottom>2*(r.bottom-i.top)))return!1}}return!0}))}(t,e,n):function(t,e,n){let{$head:r}=e.selection;if(!r.parent.isTextblock)return!1;let i=r.parentOffset,o=!i,s=i==r.parent.content.size,a=t.domSelection();return Z.test(r.parent.textContent)&&a.modify?G(t,e,(()=>{let e=a.getRangeAt(0),i=a.focusNode,o=a.focusOffset,s=a.caretBidiLevel;a.modify("move",n,"character");let l=!(r.depth?t.docView.domAfterPos(r.before()):t.dom).contains(1==a.focusNode.nodeType?a.focusNode:a.focusNode.parentNode)||i==a.focusNode&&o==a.focusOffset;return a.removeAllRanges(),a.addRange(e),null!=s&&(a.caretBidiLevel=s),l})):"left"==n||"backward"==n?o:s}(t,e,n))}class rt{constructor(t,e,n,r){this.parent=t,this.children=e,this.dom=n,this.contentDOM=r,this.dirty=0,n.pmViewDesc=this}matchesWidget(t){return!1}matchesMark(t){return!1}matchesNode(t,e,n){return!1}matchesHack(t){return!1}parseRule(){return null}stopEvent(t){return!1}get size(){let t=0;for(let e=0;e<this.children.length;e++)t+=this.children[e].size;return t}get border(){return 0}destroy(){this.parent=void 0,this.dom.pmViewDesc==this&&(this.dom.pmViewDesc=void 0);for(let t=0;t<this.children.length;t++)this.children[t].destroy()}posBeforeChild(t){for(let e=0,n=this.posAtStart;;e++){let r=this.children[e];if(r==t)return n;n+=r.size}}get posBefore(){return this.parent.posBeforeChild(this)}get posAtStart(){return this.parent?this.parent.posBeforeChild(this)+this.border:0}get posAfter(){return this.posBefore+this.size}get posAtEnd(){return this.posAtStart+this.size-2*this.border}localPosFromDOM(t,e,n){if(this.contentDOM&&this.contentDOM.contains(1==t.nodeType?t:t.parentNode)){if(n<0){let n,r;if(t==this.contentDOM)n=t.childNodes[e-1];else{for(;t.parentNode!=this.contentDOM;)t=t.parentNode;n=t.previousSibling}for(;n&&(!(r=n.pmViewDesc)||r.parent!=this);)n=n.previousSibling;return n?this.posBeforeChild(r)+r.size:this.posAtStart}{let n,r;if(t==this.contentDOM)n=t.childNodes[e];else{for(;t.parentNode!=this.contentDOM;)t=t.parentNode;n=t.nextSibling}for(;n&&(!(r=n.pmViewDesc)||r.parent!=this);)n=n.nextSibling;return n?this.posBeforeChild(r):this.posAtEnd}}let r;if(t==this.dom&&this.contentDOM)r=e>_(this.contentDOM);else if(this.contentDOM&&this.contentDOM!=this.dom&&this.dom.contains(this.contentDOM))r=2&t.compareDocumentPosition(this.contentDOM);else if(this.dom.firstChild){if(0==e)for(let e=t;;e=e.parentNode){if(e==this.dom){r=!1;break}if(e.previousSibling)break}if(null==r&&e==t.childNodes.length)for(let e=t;;e=e.parentNode){if(e==this.dom){r=!0;break}if(e.nextSibling)break}}return(null==r?n>0:r)?this.posAtEnd:this.posAtStart}nearestDesc(t,e=!1){for(let n=!0,r=t;r;r=r.parentNode){let i,o=this.getDesc(r);if(o&&(!e||o.node)){if(!n||!(i=o.nodeDOM)||(1==i.nodeType?i.contains(1==t.nodeType?t:t.parentNode):i==t))return o;n=!1}}}getDesc(t){let e=t.pmViewDesc;for(let t=e;t;t=t.parent)if(t==this)return e}posFromDOM(t,e,n){for(let r=t;r;r=r.parentNode){let i=this.getDesc(r);if(i)return i.localPosFromDOM(t,e,n)}return-1}descAt(t){for(let e=0,n=0;e<this.children.length;e++){let r=this.children[e],i=n+r.size;if(n==t&&i!=n){for(;!r.border&&r.children.length;)r=r.children[0];return r}if(t<i)return r.descAt(t-n-r.border);n=i}}domFromPos(t,e){if(!this.contentDOM)return{node:this.dom,offset:0};let n,r=0,i=0;for(let e=0;r<this.children.length;r++){let n=this.children[r],o=e+n.size;if(o>t||n instanceof ht){i=t-e;break}e=o}if(i)return this.children[r].domFromPos(i-this.children[r].border,e);for(;r&&!(n=this.children[r-1]).size&&n instanceof it&&n.side>=0;r--);if(e<=0){let t,n=!0;for(;t=r?this.children[r-1]:null,t&&t.dom.parentNode!=this.contentDOM;r--,n=!1);return t&&e&&n&&!t.border&&!t.domAtom?t.domFromPos(t.size,e):{node:this.contentDOM,offset:t?_(t.dom)+1:0}}{let t,n=!0;for(;t=r<this.children.length?this.children[r]:null,t&&t.dom.parentNode!=this.contentDOM;r++,n=!1);return t&&n&&!t.border&&!t.domAtom?t.domFromPos(0,e):{node:this.contentDOM,offset:t?_(t.dom):this.contentDOM.childNodes.length}}}parseRange(t,e,n=0){if(0==this.children.length)return{node:this.contentDOM,from:t,to:e,fromOffset:0,toOffset:this.contentDOM.childNodes.length};let r=-1,i=-1;for(let o=n,s=0;;s++){let n=this.children[s],a=o+n.size;if(-1==r&&t<=a){let i=o+n.border;if(t>=i&&e<=a-n.border&&n.node&&n.contentDOM&&this.contentDOM.contains(n.contentDOM))return n.parseRange(t,e,i);t=o;for(let e=s;e>0;e--){let n=this.children[e-1];if(n.size&&n.dom.parentNode==this.contentDOM&&!n.emptyChildAt(1)){r=_(n.dom)+1;break}t-=n.size}-1==r&&(r=0)}if(r>-1&&(a>e||s==this.children.length-1)){e=a;for(let t=s+1;t<this.children.length;t++){let n=this.children[t];if(n.size&&n.dom.parentNode==this.contentDOM&&!n.emptyChildAt(-1)){i=_(n.dom);break}e+=n.size}-1==i&&(i=this.contentDOM.childNodes.length);break}o=a}return{node:this.contentDOM,from:t,to:e,fromOffset:r,toOffset:i}}emptyChildAt(t){if(this.border||!this.contentDOM||!this.children.length)return!1;let e=this.children[t<0?0:this.children.length-1];return 0==e.size||e.emptyChildAt(t)}domAfterPos(t){let{node:e,offset:n}=this.domFromPos(t,0);if(1!=e.nodeType||n==e.childNodes.length)throw new RangeError("No node after pos "+t);return e.childNodes[n]}setSelection(t,e,n,r=!1){let i=Math.min(t,e),o=Math.max(t,e);for(let s=0,a=0;s<this.children.length;s++){let l=this.children[s],c=a+l.size;if(i>a&&o<c)return l.setSelection(t-a-l.border,e-a-l.border,n,r);a=c}let s=this.domFromPos(t,t?-1:1),a=e==t?s:this.domFromPos(e,e?-1:1),l=n.getSelection(),c=!1;if((f||v)&&t==e){let{node:t,offset:e}=s;if(3==t.nodeType){if(c=!(!e||"\n"!=t.nodeValue[e-1]),c&&e==t.nodeValue.length)for(let e,n=t;n;n=n.parentNode){if(e=n.nextSibling){"BR"==e.nodeName&&(s=a={node:e.parentNode,offset:_(e)+1});break}let t=n.pmViewDesc;if(t&&t.node&&t.node.isBlock)break}}else{let n=t.childNodes[e-1];c=n&&("BR"==n.nodeName||"false"==n.contentEditable)}}if(f&&l.focusNode&&l.focusNode!=a.node&&1==l.focusNode.nodeType){let t=l.focusNode.childNodes[l.focusOffset];t&&"false"==t.contentEditable&&(r=!0)}if(!(r||c&&v)&&M(s.node,s.offset,l.anchorNode,l.anchorOffset)&&M(a.node,a.offset,l.focusNode,l.focusOffset))return;let h=!1;if((l.extend||t==e)&&!c){l.collapse(s.node,s.offset);try{t!=e&&l.extend(a.node,a.offset),h=!0}catch(t){if(!(t instanceof DOMException))throw t}}if(!h){if(t>e){let t=s;s=a,a=t}let n=document.createRange();n.setEnd(a.node,a.offset),n.setStart(s.node,s.offset),l.removeAllRanges(),l.addRange(n)}}ignoreMutation(t){return!this.contentDOM&&"selection"!=t.type}get contentLost(){return this.contentDOM&&this.contentDOM!=this.dom&&!this.dom.contains(this.contentDOM)}markDirty(t,e){for(let n=0,r=0;r<this.children.length;r++){let i=this.children[r],o=n+i.size;if(n==o?t<=o&&e>=n:t<o&&e>n){let r=n+i.border,s=o-i.border;if(t>=r&&e<=s)return this.dirty=t==n||e==o?2:1,void(t!=r||e!=s||!i.contentLost&&i.dom.parentNode==this.contentDOM?i.markDirty(t-r,e-r):i.dirty=3);i.dirty=i.dom!=i.contentDOM||i.dom.parentNode!=this.contentDOM||i.children.length?3:2}n=o}this.dirty=2}markParentsDirty(){let t=1;for(let e=this.parent;e;e=e.parent,t++){let n=1==t?2:1;e.dirty<n&&(e.dirty=n)}}get domAtom(){return!1}get ignoreForCoords(){return!1}}class it extends rt{constructor(t,e,n,r){let i,o=e.type.toDOM;if("function"==typeof o&&(o=o(n,(()=>i?i.parent?i.parent.posBeforeChild(i):void 0:r))),!e.type.spec.raw){if(1!=o.nodeType){let t=document.createElement("span");t.appendChild(o),o=t}o.contentEditable="false",o.classList.add("ProseMirror-widget")}super(t,[],o,null),this.widget=e,this.widget=e,i=this}matchesWidget(t){return 0==this.dirty&&t.type.eq(this.widget.type)}parseRule(){return{ignore:!0}}stopEvent(t){let e=this.widget.spec.stopEvent;return!!e&&e(t)}ignoreMutation(t){return"selection"!=t.type||this.widget.spec.ignoreSelection}destroy(){this.widget.type.destroy(this.dom),super.destroy()}get domAtom(){return!0}get side(){return this.widget.type.side}}class ot extends rt{constructor(t,e,n,r){super(t,[],e,null),this.textDOM=n,this.text=r}get size(){return this.text.length}localPosFromDOM(t,e){return t!=this.textDOM?this.posAtStart+(e?this.size:0):this.posAtStart+e}domFromPos(t){return{node:this.textDOM,offset:t}}ignoreMutation(t){return"characterData"===t.type&&t.target.nodeValue==t.oldValue}}class st extends rt{constructor(t,e,n,r){super(t,[],n,r),this.mark=e}static create(t,e,n,r){let o=r.nodeViews[e.type.name],s=o&&o(e,r,n);return s&&s.dom||(s=i.PW.renderSpec(document,e.type.spec.toDOM(e,n))),new st(t,e,s.dom,s.contentDOM||s.dom)}parseRule(){return 3&this.dirty||this.mark.type.spec.reparseInView?null:{mark:this.mark.type.name,attrs:this.mark.attrs,contentElement:this.contentDOM||void 0}}matchesMark(t){return 3!=this.dirty&&this.mark.eq(t)}markDirty(t,e){if(super.markDirty(t,e),0!=this.dirty){let t=this.parent;for(;!t.node;)t=t.parent;t.dirty<this.dirty&&(t.dirty=this.dirty),this.dirty=0}}slice(t,e,n){let r=st.create(this.parent,this.mark,!0,n),i=this.children,o=this.size;e<o&&(i=St(i,e,o,n)),t>0&&(i=St(i,0,t,n));for(let t=0;t<i.length;t++)i[t].parent=r;return r.children=i,r}}class at extends rt{constructor(t,e,n,r,i,o,s,a,l){super(t,[],i,o),this.node=e,this.outerDeco=n,this.innerDeco=r,this.nodeDOM=s,o&&this.updateChildren(a,l)}static create(t,e,n,r,o,s){let a,l=o.nodeViews[e.type.name],c=l&&l(e,o,(()=>a?a.parent?a.parent.posBeforeChild(a):void 0:s),n,r),h=c&&c.dom,u=c&&c.contentDOM;if(e.isText)if(h){if(3!=h.nodeType)throw new RangeError("Text must be rendered as a DOM text node")}else h=document.createTextNode(e.text);else h||({dom:h,contentDOM:u}=i.PW.renderSpec(document,e.type.spec.toDOM(e)));u||e.isText||"BR"==h.nodeName||(h.hasAttribute("contenteditable")||(h.contentEditable="false"),e.type.spec.draggable&&(h.draggable=!0));let d=h;return h=vt(h,n,e),c?a=new ut(t,e,n,r,h,u||null,d,c,o,s+1):e.isText?new ct(t,e,n,r,h,d,o):new at(t,e,n,r,h,u||null,d,o,s+1)}parseRule(){if(this.node.type.spec.reparseInView)return null;let t={node:this.node.type.name,attrs:this.node.attrs};if("pre"==this.node.type.whitespace&&(t.preserveWhitespace="full"),this.contentDOM)if(this.contentLost){for(let e=this.children.length-1;e>=0;e--){let n=this.children[e];if(this.dom.contains(n.dom.parentNode)){t.contentElement=n.dom.parentNode;break}}t.contentElement||(t.getContent=()=>i.HY.empty)}else t.contentElement=this.contentDOM;else t.getContent=()=>this.node.content;return t}matchesNode(t,e,n){return 0==this.dirty&&t.eq(this.node)&&bt(e,this.outerDeco)&&n.eq(this.innerDeco)}get size(){return this.node.nodeSize}get border(){return this.node.isLeaf?0:1}updateChildren(t,e){let n=this.node.inlineContent,r=e,o=t.composing?this.localCompositionInfo(t,e):null,s=o&&o.pos>-1?o:null,a=o&&o.pos<0,l=new xt(this,s&&s.node);!function(t,e,n,r){let i=e.locals(t),o=0;if(0==i.length){for(let n=0;n<t.childCount;n++){let s=t.child(n);r(s,i,e.forChild(o,s),n),o+=s.nodeSize}return}let s=0,a=[],l=null;for(let c=0;;){if(s<i.length&&i[s].to==o){let t,e=i[s++];for(;s<i.length&&i[s].to==o;)(t||(t=[e])).push(i[s++]);if(t){t.sort(kt);for(let e=0;e<t.length;e++)n(t[e],c,!!l)}else n(e,c,!!l)}let h,u;if(l)u=-1,h=l,l=null;else{if(!(c<t.childCount))break;u=c,h=t.child(c++)}for(let t=0;t<a.length;t++)a[t].to<=o&&a.splice(t--,1);for(;s<i.length&&i[s].from<=o&&i[s].to>o;)a.push(i[s++]);let d=o+h.nodeSize;if(h.isText){let t=d;s<i.length&&i[s].from<t&&(t=i[s].from);for(let e=0;e<a.length;e++)a[e].to<t&&(t=a[e].to);t<d&&(l=h.cut(t-o),h=h.cut(0,t-o),d=t,u=-1)}r(h,h.isInline&&!h.isLeaf?a.filter((t=>!t.inline)):a.slice(),e.forChild(o,h),u),o=d}}(this.node,this.innerDeco,((e,o,s)=>{e.spec.marks?l.syncToMarks(e.spec.marks,n,t):e.type.side>=0&&!s&&l.syncToMarks(o==this.node.childCount?i.vc.none:this.node.child(o).marks,n,t),l.placeWidget(e,t,r)}),((e,i,s,c)=>{let h;l.syncToMarks(e.marks,n,t),l.findNodeMatch(e,i,s,c)||a&&t.state.selection.from>r&&t.state.selection.to<r+e.nodeSize&&(h=l.findIndexWithChild(o.node))>-1&&l.updateNodeAt(e,i,s,h,t)||l.updateNextNode(e,i,s,t,c)||l.addNode(e,i,s,t,r),r+=e.nodeSize})),l.syncToMarks([],n,t),this.node.isTextblock&&l.addTextblockHacks(),l.destroyRest(),(l.changed||2==this.dirty)&&(s&&this.protectLocalComposition(t,s),dt(this.contentDOM,this.children,t),b&&function(t){if("UL"==t.nodeName||"OL"==t.nodeName){let e=t.style.cssText;t.style.cssText=e+"; list-style: square !important",window.getComputedStyle(t).listStyle,t.style.cssText=e}}(this.dom))}localCompositionInfo(t,e){let{from:n,to:i}=t.state.selection;if(!(t.state.selection instanceof r.Bs)||n<e||i>e+this.node.content.size)return null;let o=t.domSelection(),s=function(t,e){for(;;){if(3==t.nodeType)return t;if(1==t.nodeType&&e>0){if(t.childNodes.length>e&&3==t.childNodes[e].nodeType)return t.childNodes[e];e=N(t=t.childNodes[e-1])}else{if(!(1==t.nodeType&&e<t.childNodes.length))return null;t=t.childNodes[e],e=0}}}(o.focusNode,o.focusOffset);if(!s||!this.dom.contains(s.parentNode))return null;if(this.node.inlineContent){let t=s.nodeValue,r=function(t,e,n,r){for(let i=0,o=0;i<t.childCount&&o<=r;){let s=t.child(i++),a=o;if(o+=s.nodeSize,!s.isText)continue;let l=s.text;for(;i<t.childCount;){let e=t.child(i++);if(o+=e.nodeSize,!e.isText)break;l+=e.text}if(o>=n){let t=a<r?l.lastIndexOf(e,r-a-1):-1;if(t>=0&&t+e.length+a>=n)return a+t;if(n==r&&l.length>=r+e.length-a&&l.slice(r-a,r-a+e.length)==e)return r}}return-1}(this.node.content,t,n-e,i-e);return r<0?null:{node:s,pos:r,text:t}}return{node:s,pos:-1,text:""}}protectLocalComposition(t,{node:e,pos:n,text:r}){if(this.getDesc(e))return;let i=e;for(;i.parentNode!=this.contentDOM;i=i.parentNode){for(;i.previousSibling;)i.parentNode.removeChild(i.previousSibling);for(;i.nextSibling;)i.parentNode.removeChild(i.nextSibling);i.pmViewDesc&&(i.pmViewDesc=void 0)}let o=new ot(this,i,e,r);t.input.compositionNodes.push(o),this.children=St(this.children,n,n+r.length,t,o)}update(t,e,n,r){return!(3==this.dirty||!t.sameMarkup(this.node))&&(this.updateInner(t,e,n,r),!0)}updateInner(t,e,n,r){this.updateOuterDeco(e),this.node=t,this.innerDeco=n,this.contentDOM&&this.updateChildren(r,this.posAtStart),this.dirty=0}updateOuterDeco(t){if(bt(t,this.outerDeco))return;let e=1!=this.nodeDOM.nodeType,n=this.dom;this.dom=mt(this.dom,this.nodeDOM,gt(this.outerDeco,this.node,e),gt(t,this.node,e)),this.dom!=n&&(n.pmViewDesc=void 0,this.dom.pmViewDesc=this),this.outerDeco=t}selectNode(){1==this.nodeDOM.nodeType&&this.nodeDOM.classList.add("ProseMirror-selectednode"),!this.contentDOM&&this.node.type.spec.draggable||(this.dom.draggable=!0)}deselectNode(){1==this.nodeDOM.nodeType&&this.nodeDOM.classList.remove("ProseMirror-selectednode"),!this.contentDOM&&this.node.type.spec.draggable||this.dom.removeAttribute("draggable")}get domAtom(){return this.node.isAtom}}function lt(t,e,n,r,i){return vt(r,e,t),new at(void 0,t,e,n,r,r,r,i,0)}class ct extends at{constructor(t,e,n,r,i,o,s){super(t,e,n,r,i,null,o,s,0)}parseRule(){let t=this.nodeDOM.parentNode;for(;t&&t!=this.dom&&!t.pmIsDeco;)t=t.parentNode;return{skip:t||!0}}update(t,e,n,r){return!(3==this.dirty||0!=this.dirty&&!this.inParent()||!t.sameMarkup(this.node))&&(this.updateOuterDeco(e),0==this.dirty&&t.text==this.node.text||t.text==this.nodeDOM.nodeValue||(this.nodeDOM.nodeValue=t.text,r.trackWrites==this.nodeDOM&&(r.trackWrites=null)),this.node=t,this.dirty=0,!0)}inParent(){let t=this.parent.contentDOM;for(let e=this.nodeDOM;e;e=e.parentNode)if(e==t)return!0;return!1}domFromPos(t){return{node:this.nodeDOM,offset:t}}localPosFromDOM(t,e,n){return t==this.nodeDOM?this.posAtStart+Math.min(e,this.node.text.length):super.localPosFromDOM(t,e,n)}ignoreMutation(t){return"characterData"!=t.type&&"selection"!=t.type}slice(t,e,n){let r=this.node.cut(t,e),i=document.createTextNode(r.text);return new ct(this.parent,r,this.outerDeco,this.innerDeco,i,i,n)}markDirty(t,e){super.markDirty(t,e),this.dom==this.nodeDOM||0!=t&&e!=this.nodeDOM.nodeValue.length||(this.dirty=3)}get domAtom(){return!1}}class ht extends rt{parseRule(){return{ignore:!0}}matchesHack(t){return 0==this.dirty&&this.dom.nodeName==t}get domAtom(){return!0}get ignoreForCoords(){return"IMG"==this.dom.nodeName}}class ut extends at{constructor(t,e,n,r,i,o,s,a,l,c){super(t,e,n,r,i,o,s,l,c),this.spec=a}update(t,e,n,r){if(3==this.dirty)return!1;if(this.spec.update){let i=this.spec.update(t,e,n);return i&&this.updateInner(t,e,n,r),i}return!(!this.contentDOM&&!t.isLeaf)&&super.update(t,e,n,r)}selectNode(){this.spec.selectNode?this.spec.selectNode():super.selectNode()}deselectNode(){this.spec.deselectNode?this.spec.deselectNode():super.deselectNode()}setSelection(t,e,n,r){this.spec.setSelection?this.spec.setSelection(t,e,n):super.setSelection(t,e,n,r)}destroy(){this.spec.destroy&&this.spec.destroy(),super.destroy()}stopEvent(t){return!!this.spec.stopEvent&&this.spec.stopEvent(t)}ignoreMutation(t){return this.spec.ignoreMutation?this.spec.ignoreMutation(t):super.ignoreMutation(t)}}function dt(t,e,n){let r=t.firstChild,i=!1;for(let o=0;o<e.length;o++){let s=e[o],a=s.dom;if(a.parentNode==t){for(;a!=r;)r=wt(r),i=!0;r=r.nextSibling}else i=!0,t.insertBefore(a,r);if(s instanceof st){let e=r?r.previousSibling:t.lastChild;dt(s.contentDOM,s.children,n),r=e?e.nextSibling:t.firstChild}}for(;r;)r=wt(r),i=!0;i&&n.trackWrites==t&&(n.trackWrites=null)}const pt=function(t){t&&(this.nodeName=t)};pt.prototype=Object.create(null);const ft=[new pt];function gt(t,e,n){if(0==t.length)return ft;let r=n?ft[0]:new pt,i=[r];for(let o=0;o<t.length;o++){let s=t[o].type.attrs;if(s){s.nodeName&&i.push(r=new pt(s.nodeName));for(let t in s){let o=s[t];null!=o&&(n&&1==i.length&&i.push(r=new pt(e.isInline?"span":"div")),"class"==t?r.class=(r.class?r.class+" ":"")+o:"style"==t?r.style=(r.style?r.style+";":"")+o:"nodeName"!=t&&(r[t]=o))}}}return i}function mt(t,e,n,r){if(n==ft&&r==ft)return e;let i=e;for(let e=0;e<r.length;e++){let o=r[e],s=n[e];if(e){let e;s&&s.nodeName==o.nodeName&&i!=t&&(e=i.parentNode)&&e.nodeName.toLowerCase()==o.nodeName||(e=document.createElement(o.nodeName),e.pmIsDeco=!0,e.appendChild(i),s=ft[0]),i=e}yt(i,s||ft[0],o)}return i}function yt(t,e,n){for(let r in e)"class"==r||"style"==r||"nodeName"==r||r in n||t.removeAttribute(r);for(let r in n)"class"!=r&&"style"!=r&&"nodeName"!=r&&n[r]!=e[r]&&t.setAttribute(r,n[r]);if(e.class!=n.class){let r=e.class?e.class.split(" ").filter(Boolean):[],i=n.class?n.class.split(" ").filter(Boolean):[];for(let e=0;e<r.length;e++)-1==i.indexOf(r[e])&&t.classList.remove(r[e]);for(let e=0;e<i.length;e++)-1==r.indexOf(i[e])&&t.classList.add(i[e]);0==t.classList.length&&t.removeAttribute("class")}if(e.style!=n.style){if(e.style){let n,r=/\s*([\w\-\xa1-\uffff]+)\s*:(?:"(?:\\.|[^"])*"|'(?:\\.|[^'])*'|\(.*?\)|[^;])*/g;for(;n=r.exec(e.style);)t.style.removeProperty(n[1])}n.style&&(t.style.cssText+=n.style)}}function vt(t,e,n){return mt(t,t,ft,gt(e,n,1!=t.nodeType))}function bt(t,e){if(t.length!=e.length)return!1;for(let n=0;n<t.length;n++)if(!t[n].type.eq(e[n].type))return!1;return!0}function wt(t){let e=t.nextSibling;return t.parentNode.removeChild(t),e}class xt{constructor(t,e){this.lock=e,this.index=0,this.stack=[],this.changed=!1,this.top=t,this.preMatch=function(t,e){let n=e,r=n.children.length,i=t.childCount,o=new Map,s=[];t:for(;i>0;){let a;for(;;)if(r){let t=n.children[r-1];if(!(t instanceof st)){a=t,r--;break}n=t,r=t.children.length}else{if(n==e)break t;r=n.parent.children.indexOf(n),n=n.parent}let l=a.node;if(l){if(l!=t.child(i-1))break;--i,o.set(a,i),s.push(a)}}return{index:i,matched:o,matches:s.reverse()}}(t.node.content,t)}destroyBetween(t,e){if(t!=e){for(let n=t;n<e;n++)this.top.children[n].destroy();this.top.children.splice(t,e-t),this.changed=!0}}destroyRest(){this.destroyBetween(this.index,this.top.children.length)}syncToMarks(t,e,n){let r=0,i=this.stack.length>>1,o=Math.min(i,t.length);for(;r<o&&(r==i-1?this.top:this.stack[r+1<<1]).matchesMark(t[r])&&!1!==t[r].type.spec.spanning;)r++;for(;r<i;)this.destroyRest(),this.top.dirty=0,this.index=this.stack.pop(),this.top=this.stack.pop(),i--;for(;i<t.length;){this.stack.push(this.top,this.index+1);let r=-1;for(let e=this.index;e<Math.min(this.index+3,this.top.children.length);e++)if(this.top.children[e].matchesMark(t[i])){r=e;break}if(r>-1)r>this.index&&(this.changed=!0,this.destroyBetween(this.index,r)),this.top=this.top.children[this.index];else{let r=st.create(this.top,t[i],e,n);this.top.children.splice(this.index,0,r),this.top=r,this.changed=!0}this.index=0,i++}}findNodeMatch(t,e,n,r){let i,o=-1;if(r>=this.preMatch.index&&(i=this.preMatch.matches[r-this.preMatch.index]).parent==this.top&&i.matchesNode(t,e,n))o=this.top.children.indexOf(i,this.index);else for(let r=this.index,i=Math.min(this.top.children.length,r+5);r<i;r++){let i=this.top.children[r];if(i.matchesNode(t,e,n)&&!this.preMatch.matched.has(i)){o=r;break}}return!(o<0)&&(this.destroyBetween(this.index,o),this.index++,!0)}updateNodeAt(t,e,n,r,i){let o=this.top.children[r];return 3==o.dirty&&o.dom==o.contentDOM&&(o.dirty=2),!!o.update(t,e,n,i)&&(this.destroyBetween(this.index,r),this.index=r+1,!0)}findIndexWithChild(t){for(;;){let e=t.parentNode;if(!e)return-1;if(e==this.top.contentDOM){let e=t.pmViewDesc;if(e)for(let t=this.index;t<this.top.children.length;t++)if(this.top.children[t]==e)return t;return-1}t=e}}updateNextNode(t,e,n,r,i){for(let o=this.index;o<this.top.children.length;o++){let s=this.top.children[o];if(s instanceof at){let a=this.preMatch.matched.get(s);if(null!=a&&a!=i)return!1;let l=s.dom;if(!(this.lock&&(l==this.lock||1==l.nodeType&&l.contains(this.lock.parentNode))&&!(t.isText&&s.node&&s.node.isText&&s.nodeDOM.nodeValue==t.text&&3!=s.dirty&&bt(e,s.outerDeco)))&&s.update(t,e,n,r))return this.destroyBetween(this.index,o),s.dom!=l&&(this.changed=!0),this.index++,!0;break}}return!1}addNode(t,e,n,r,i){this.top.children.splice(this.index++,0,at.create(this.top,t,e,n,r,i)),this.changed=!0}placeWidget(t,e,n){let r=this.index<this.top.children.length?this.top.children[this.index]:null;if(!r||!r.matchesWidget(t)||t!=r.widget&&r.widget.type.toDOM.parentNode){let r=new it(this.top,t,e,n);this.top.children.splice(this.index++,0,r),this.changed=!0}else this.index++}addTextblockHacks(){let t=this.top.children[this.index-1],e=this.top;for(;t instanceof st;)e=t,t=e.children[e.children.length-1];t&&t instanceof ct&&!/\n$/.test(t.node.text)||((v||m)&&t&&"false"==t.dom.contentEditable&&this.addHackNode("IMG",e),this.addHackNode("BR",this.top))}addHackNode(t,e){if(e==this.top&&this.index<e.children.length&&e.children[this.index].matchesHack(t))this.index++;else{let n=document.createElement(t);"IMG"==t&&(n.className="ProseMirror-separator",n.alt=""),"BR"==t&&(n.className="ProseMirror-trailingBreak");let r=new ht(this.top,[],n,null);e!=this.top?e.children.push(r):e.children.splice(this.index++,0,r),this.changed=!0}}}function kt(t,e){return t.type.side-e.type.side}function St(t,e,n,r,i){let o=[];for(let s=0,a=0;s<t.length;s++){let l=t[s],c=a,h=a+=l.size;c>=n||h<=e?o.push(l):(c<e&&o.push(l.slice(0,e-c,r)),i&&(o.push(i),i=void 0),h>n&&o.push(l.slice(n-c,l.size,r)))}return o}function _t(t,e=null){let n=t.domSelection(),i=t.state.doc;if(!n.focusNode)return null;let o=t.docView.nearestDesc(n.focusNode),s=o&&0==o.size,a=t.docView.posFromDOM(n.focusNode,n.focusOffset,1);if(a<0)return null;let l,c,h=i.resolve(a);if(j(n)){for(l=h;o&&!o.node;)o=o.parent;let t=o.node;if(o&&t.isAtom&&r.qv.isSelectable(t)&&o.parent&&(!t.isInline||!function(t,e,n){for(let r=0==e,i=e==N(t);r||i;){if(t==n)return!0;let e=_(t);if(!(t=t.parentNode))return!1;r=r&&0==e,i=i&&e==N(t)}}(n.focusNode,n.focusOffset,o.dom))){let t=o.posBefore;c=new r.qv(a==t?h:i.resolve(t))}}else{let e=t.docView.posFromDOM(n.anchorNode,n.anchorOffset,1);if(e<0)return null;l=i.resolve(e)}if(!c){c=jt(t,l,h,"pointer"==e||t.state.selection.head<h.pos&&!s?1:-1)}return c}function Et(t){return t.editable?t.hasFocus():Pt(t)&&document.activeElement&&document.activeElement.contains(t.dom)}function Ct(t,e=!1){let n=t.state.selection;if(Nt(t,n),Et(t)){if(!e&&t.input.mouseDown&&t.input.mouseDown.allowDefault&&m){let e=t.domSelection(),n=t.domObserver.currentSelection;if(e.anchorNode&&n.anchorNode&&M(e.anchorNode,e.anchorOffset,n.anchorNode,n.anchorOffset))return t.input.mouseDown.delayedSelectionSync=!0,void t.domObserver.setCurSelection()}if(t.domObserver.disconnectSelection(),t.cursorWrapper)!function(t){let e=t.domSelection(),n=document.createRange(),r=t.cursorWrapper.dom,i="IMG"==r.nodeName;i?n.setEnd(r.parentNode,_(r)+1):n.setEnd(r,0);n.collapse(!1),e.removeAllRanges(),e.addRange(n),!i&&!t.state.selection.visible&&d&&p<=11&&(r.disabled=!0,r.disabled=!1)}(t);else{let i,o,{anchor:s,head:a}=n;!Ot||n instanceof r.Bs||(n.$from.parent.inlineContent||(i=Mt(t,n.from)),n.empty||n.$from.parent.inlineContent||(o=Mt(t,n.to))),t.docView.setSelection(s,a,t.root,e),Ot&&(i&&Tt(i),o&&Tt(o)),n.visible?t.dom.classList.remove("ProseMirror-hideselection"):(t.dom.classList.add("ProseMirror-hideselection"),"onselectionchange"in document&&function(t){let e=t.dom.ownerDocument;e.removeEventListener("selectionchange",t.input.hideSelectionGuard);let n=t.domSelection(),r=n.anchorNode,i=n.anchorOffset;e.addEventListener("selectionchange",t.input.hideSelectionGuard=()=>{n.anchorNode==r&&n.anchorOffset==i||(e.removeEventListener("selectionchange",t.input.hideSelectionGuard),setTimeout((()=>{Et(t)&&!t.state.selection.visible||t.dom.classList.remove("ProseMirror-hideselection")}),20))})}(t))}t.domObserver.setCurSelection(),t.domObserver.connectSelection()}}const Ot=v||m&&y<63;function Mt(t,e){let{node:n,offset:r}=t.docView.domFromPos(e,0),i=r<n.childNodes.length?n.childNodes[r]:null,o=r?n.childNodes[r-1]:null;if(v&&i&&"false"==i.contentEditable)return At(i);if(!(i&&"false"!=i.contentEditable||o&&"false"!=o.contentEditable)){if(i)return At(i);if(o)return At(o)}}function At(t){return t.contentEditable="true",v&&t.draggable&&(t.draggable=!1,t.wasDraggable=!0),t}function Tt(t){t.contentEditable="false",t.wasDraggable&&(t.draggable=!0,t.wasDraggable=null)}function Nt(t,e){if(e instanceof r.qv){let n=t.docView.descAt(e.from);n!=t.lastSelectedViewDesc&&(Dt(t),n&&n.selectNode(),t.lastSelectedViewDesc=n)}else Dt(t)}function Dt(t){t.lastSelectedViewDesc&&(t.lastSelectedViewDesc.parent&&t.lastSelectedViewDesc.deselectNode(),t.lastSelectedViewDesc=void 0)}function jt(t,e,n,i){return t.someProp("createSelectionBetween",(r=>r(t,e,n)))||r.Bs.between(e,n,i)}function Rt(t){return(!t.editable||t.root.activeElement==t.dom)&&Pt(t)}function Pt(t){let e=t.domSelection();if(!e.anchorNode)return!1;try{return t.dom.contains(3==e.anchorNode.nodeType?e.anchorNode.parentNode:e.anchorNode)&&(t.editable||t.dom.contains(3==e.focusNode.nodeType?e.focusNode.parentNode:e.focusNode))}catch(t){return!1}}function zt(t,e){let{$anchor:n,$head:i}=t.selection,o=e>0?n.max(i):n.min(i),s=o.parent.inlineContent?o.depth?t.doc.resolve(e>0?o.after():o.before()):null:o;return s&&r.Y1.findFrom(s,e)}function It(t,e){return t.dispatch(t.state.tr.setSelection(e).scrollIntoView()),!0}function Bt(t,e,n){let i=t.state.selection;if(!(i instanceof r.Bs)){if(i instanceof r.qv&&i.node.isInline)return It(t,new r.Bs(e>0?i.$to:i.$from));{let n=zt(t.state,e);return!!n&&It(t,n)}}if(!i.empty||n.indexOf("s")>-1)return!1;if(t.endOfTextblock(e>0?"right":"left")){let n=zt(t.state,e);return!!(n&&n instanceof r.qv)&&It(t,n)}if(!(w&&n.indexOf("m")>-1)){let n,o=i.$head,s=o.textOffset?null:e<0?o.nodeBefore:o.nodeAfter;if(!s||s.isText)return!1;let a=e<0?o.pos-s.nodeSize:o.pos;return!!(s.isAtom||(n=t.docView.descAt(a))&&!n.contentDOM)&&(r.qv.isSelectable(s)?It(t,new r.qv(e<0?t.state.doc.resolve(o.pos-s.nodeSize):o)):!!k&&It(t,new r.Bs(t.state.doc.resolve(e<0?a:a+s.nodeSize))))}}function Ft(t){return 3==t.nodeType?t.nodeValue.length:t.childNodes.length}function $t(t){let e=t.pmViewDesc;return e&&0==e.size&&(t.nextSibling||"BR"!=t.nodeName)}function Lt(t){let e=t.domSelection(),n=e.focusNode,r=e.focusOffset;if(!n)return;let i,o,s=!1;for(f&&1==n.nodeType&&r<Ft(n)&&$t(n.childNodes[r])&&(s=!0);;)if(r>0){if(1!=n.nodeType)break;{let t=n.childNodes[r-1];if($t(t))i=n,o=--r;else{if(3!=t.nodeType)break;n=t,r=n.nodeValue.length}}}else{if(Vt(n))break;{let e=n.previousSibling;for(;e&&$t(e);)i=n.parentNode,o=_(e),e=e.previousSibling;if(e)n=e,r=Ft(n);else{if(n=n.parentNode,n==t.dom)break;r=0}}}s?qt(t,e,n,r):i&&qt(t,e,i,o)}function Ht(t){let e=t.domSelection(),n=e.focusNode,r=e.focusOffset;if(!n)return;let i,o,s=Ft(n);for(;;)if(r<s){if(1!=n.nodeType)break;if(!$t(n.childNodes[r]))break;i=n,o=++r}else{if(Vt(n))break;{let e=n.nextSibling;for(;e&&$t(e);)i=e.parentNode,o=_(e)+1,e=e.nextSibling;if(e)n=e,r=0,s=Ft(n);else{if(n=n.parentNode,n==t.dom)break;r=s=0}}}i&&qt(t,e,i,o)}function Vt(t){let e=t.pmViewDesc;return e&&e.node&&e.node.isBlock}function qt(t,e,n,r){if(j(e)){let t=document.createRange();t.setEnd(n,r),t.setStart(n,r),e.removeAllRanges(),e.addRange(t)}else e.extend&&e.extend(n,r);t.domObserver.setCurSelection();let{state:i}=t;setTimeout((()=>{t.state==i&&Ct(t)}),50)}function Wt(t,e,n){let i=t.state.selection;if(i instanceof r.Bs&&!i.empty||n.indexOf("s")>-1)return!1;if(w&&n.indexOf("m")>-1)return!1;let{$from:o,$to:s}=i;if(!o.parent.inlineContent||t.endOfTextblock(e<0?"up":"down")){let n=zt(t.state,e);if(n&&n instanceof r.qv)return It(t,n)}if(!o.parent.inlineContent){let n=e<0?o:s,a=i instanceof r.C1?r.Y1.near(n,e):r.Y1.findFrom(n,e);return!!a&&It(t,a)}return!1}function Ut(t,e){if(!(t.state.selection instanceof r.Bs))return!0;let{$head:n,$anchor:i,empty:o}=t.state.selection;if(!n.sameParent(i))return!0;if(!o)return!1;if(t.endOfTextblock(e>0?"forward":"backward"))return!0;let s=!n.textOffset&&(e<0?n.nodeBefore:n.nodeAfter);if(s&&!s.isText){let r=t.state.tr;return e<0?r.delete(n.pos-s.nodeSize,n.pos):r.delete(n.pos,n.pos+s.nodeSize),t.dispatch(r),!0}return!1}function Yt(t,e,n){t.domObserver.stop(),e.contentEditable=n,t.domObserver.start()}function Jt(t,e){let n=e.keyCode,r=function(t){let e="";return t.ctrlKey&&(e+="c"),t.metaKey&&(e+="m"),t.altKey&&(e+="a"),t.shiftKey&&(e+="s"),e}(e);return 8==n||w&&72==n&&"c"==r?Ut(t,-1)||Lt(t):46==n||w&&68==n&&"c"==r?Ut(t,1)||Ht(t):13==n||27==n||(37==n||w&&66==n&&"c"==r?Bt(t,-1,r)||Lt(t):39==n||w&&70==n&&"c"==r?Bt(t,1,r)||Ht(t):38==n||w&&80==n&&"c"==r?Wt(t,-1,r)||Lt(t):40==n||w&&78==n&&"c"==r?function(t){if(!v||t.state.selection.$head.parentOffset>0)return!1;let{focusNode:e,focusOffset:n}=t.domSelection();if(e&&1==e.nodeType&&0==n&&e.firstChild&&"false"==e.firstChild.contentEditable){let n=e.firstChild;Yt(t,n,"true"),setTimeout((()=>Yt(t,n,"false")),20)}return!1}(t)||Wt(t,1,r)||Ht(t):r==(w?"m":"c")&&(66==n||73==n||89==n||90==n))}function Xt(t,e){let n=[],{content:r,openStart:o,openEnd:s}=e;for(;o>1&&s>1&&1==r.childCount&&1==r.firstChild.childCount;){o--,s--;let t=r.firstChild;n.push(t.type.name,t.attrs!=t.type.defaultAttrs?t.attrs:null),r=t.content}let a=t.someProp("clipboardSerializer")||i.PW.fromSchema(t.state.schema),l=oe(),c=l.createElement("div");c.appendChild(a.serializeFragment(r,{document:l}));let h,u=c.firstChild,d=0;for(;u&&1==u.nodeType&&(h=re[u.nodeName.toLowerCase()]);){for(let t=h.length-1;t>=0;t--){let e=l.createElement(h[t]);for(;c.firstChild;)e.appendChild(c.firstChild);c.appendChild(e),d++}u=c.firstChild}return u&&1==u.nodeType&&u.setAttribute("data-pm-slice",`${o} ${s}${d?` -${d}`:""} ${JSON.stringify(n)}`),{dom:c,text:t.someProp("clipboardTextSerializer",(t=>t(e)))||e.content.textBetween(0,e.content.size,"\n\n")}}function Kt(t,e,n,r,o){let s,a,l=o.parent.type.spec.code;if(!n&&!e)return null;let c=e&&(r||l||!n);if(c){if(t.someProp("transformPastedText",(t=>{e=t(e,l||r)})),l)return e?new i.p2(i.HY.from(t.state.schema.text(e.replace(/\r\n?/g,"\n"))),0,0):i.p2.empty;let n=t.someProp("clipboardTextParser",(t=>t(e,o,r)));if(n)a=n;else{let n=o.marks(),{schema:r}=t.state,a=i.PW.fromSchema(r);s=document.createElement("div"),e.split(/(?:\r\n?|\n)+/).forEach((t=>{let e=s.appendChild(document.createElement("p"));t&&e.appendChild(a.serializeNode(r.text(t,n)))}))}}else t.someProp("transformPastedHTML",(t=>{n=t(n)})),s=function(t){let e=/^(\s*<meta [^>]*>)*/.exec(t);e&&(t=t.slice(e[0].length));let n,r=oe().createElement("div"),i=/<([a-z][^>\s]+)/i.exec(t);(n=i&&re[i[1].toLowerCase()])&&(t=n.map((t=>"<"+t+">")).join("")+t+n.map((t=>"</"+t+">")).reverse().join(""));if(r.innerHTML=t,n)for(let t=0;t<n.length;t++)r=r.querySelector(n[t])||r;return r}(n),k&&function(t){let e=t.querySelectorAll(m?"span:not([class]):not([style])":"span.Apple-converted-space");for(let n=0;n<e.length;n++){let r=e[n];1==r.childNodes.length&&" "==r.textContent&&r.parentNode&&r.parentNode.replaceChild(t.ownerDocument.createTextNode(" "),r)}}(s);let h=s&&s.querySelector("[data-pm-slice]"),u=h&&/^(\d+) (\d+)(?: -(\d+))? (.*)/.exec(h.getAttribute("data-pm-slice")||"");if(u&&u[3])for(let t=+u[3];t>0&&s.firstChild;t--)s=s.firstChild;if(!a){let e=t.someProp("clipboardParser")||t.someProp("domParser")||i.aw.fromSchema(t.state.schema);a=e.parseSlice(s,{preserveWhitespace:!(!c&&!u),context:o,ruleFromNode:t=>"BR"!=t.nodeName||t.nextSibling||!t.parentNode||Gt.test(t.parentNode.nodeName)?null:{ignore:!0}})}if(u)a=function(t,e){if(!t.size)return t;let n,r=t.content.firstChild.type.schema;try{n=JSON.parse(e)}catch(e){return t}let{content:o,openStart:s,openEnd:a}=t;for(let t=n.length-2;t>=0;t-=2){let e=r.nodes[n[t]];if(!e||e.hasRequiredAttrs())break;o=i.HY.from(e.create(n[t+1],o)),s++,a++}return new i.p2(o,s,a)}(ne(a,+u[1],+u[2]),u[4]);else if(a=i.p2.maxOpen(function(t,e){if(t.childCount<2)return t;for(let n=e.depth;n>=0;n--){let r,o=e.node(n).contentMatchAt(e.index(n)),s=[];if(t.forEach((t=>{if(!s)return;let e,n=o.findWrapping(t.type);if(!n)return s=null;if(e=s.length&&r.length&&Qt(n,r,t,s[s.length-1],0))s[s.length-1]=e;else{s.length&&(s[s.length-1]=te(s[s.length-1],r.length));let e=Zt(t,n);s.push(e),o=o.matchType(e.type),r=n}})),s)return i.HY.from(s)}return t}(a.content,o),!0),a.openStart||a.openEnd){let t=0,e=0;for(let e=a.content.firstChild;t<a.openStart&&!e.type.spec.isolating;t++,e=e.firstChild);for(let t=a.content.lastChild;e<a.openEnd&&!t.type.spec.isolating;e++,t=t.lastChild);a=ne(a,t,e)}return t.someProp("transformPasted",(t=>{a=t(a)})),a}const Gt=/^(a|abbr|acronym|b|cite|code|del|em|i|ins|kbd|label|output|q|ruby|s|samp|span|strong|sub|sup|time|u|tt|var)$/i;function Zt(t,e,n=0){for(let r=e.length-1;r>=n;r--)t=e[r].create(null,i.HY.from(t));return t}function Qt(t,e,n,r,o){if(o<t.length&&o<e.length&&t[o]==e[o]){let s=Qt(t,e,n,r.lastChild,o+1);if(s)return r.copy(r.content.replaceChild(r.childCount-1,s));if(r.contentMatchAt(r.childCount).matchType(o==t.length-1?n.type:t[o+1]))return r.copy(r.content.append(i.HY.from(Zt(n,t,o+1))))}}function te(t,e){if(0==e)return t;let n=t.content.replaceChild(t.childCount-1,te(t.lastChild,e-1)),r=t.contentMatchAt(t.childCount).fillBefore(i.HY.empty,!0);return t.copy(n.append(r))}function ee(t,e,n,r,o,s){let a=e<0?t.firstChild:t.lastChild,l=a.content;return o<r-1&&(l=ee(l,e,n,r,o+1,s)),o>=n&&(l=e<0?a.contentMatchAt(0).fillBefore(l,t.childCount>1||s<=o).append(l):l.append(a.contentMatchAt(a.childCount).fillBefore(i.HY.empty,!0))),t.replaceChild(e<0?0:t.childCount-1,a.copy(l))}function ne(t,e,n){return e<t.openStart&&(t=new i.p2(ee(t.content,-1,e,t.openStart,0,t.openEnd),e,t.openEnd)),n<t.openEnd&&(t=new i.p2(ee(t.content,1,n,t.openEnd,0,0),t.openStart,n)),t}const re={thead:["table"],tbody:["table"],tfoot:["table"],caption:["table"],colgroup:["table"],col:["table","colgroup"],tr:["table","tbody"],td:["table","tbody","tr"],th:["table","tbody","tr"]};let ie=null;function oe(){return ie||(ie=document.implementation.createHTMLDocument("title"))}const se={};let ae={};class le{constructor(){this.shiftKey=!1,this.mouseDown=null,this.lastKeyCode=null,this.lastKeyCodeTime=0,this.lastClick={time:0,x:0,y:0,type:""},this.lastSelectionOrigin=null,this.lastSelectionTime=0,this.lastIOSEnter=0,this.lastIOSEnterFallbackTimeout=-1,this.lastAndroidDelete=0,this.composing=!1,this.composingTimeout=-1,this.compositionNodes=[],this.compositionEndedAt=-2e8,this.domChangeCount=0,this.eventHandlers=Object.create(null),this.hideSelectionGuard=null}}function ce(t,e){t.input.lastSelectionOrigin=e,t.input.lastSelectionTime=Date.now()}function he(t){t.someProp("handleDOMEvents",(e=>{for(let n in e)t.input.eventHandlers[n]||t.dom.addEventListener(n,t.input.eventHandlers[n]=e=>ue(t,e))}))}function ue(t,e){return t.someProp("handleDOMEvents",(n=>{let r=n[e.type];return!!r&&(r(t,e)||e.defaultPrevented)}))}function de(t,e){if(!e.bubbles)return!0;if(e.defaultPrevented)return!1;for(let n=e.target;n!=t.dom;n=n.parentNode)if(!n||11==n.nodeType||n.pmViewDesc&&n.pmViewDesc.stopEvent(e))return!1;return!0}function pe(t){return{left:t.clientX,top:t.clientY}}function fe(t,e,n,r,i){if(-1==r)return!1;let o=t.state.doc.resolve(r);for(let r=o.depth+1;r>0;r--)if(t.someProp(e,(e=>r>o.depth?e(t,n,o.nodeAfter,o.before(r),i,!0):e(t,n,o.node(r),o.before(r),i,!1))))return!0;return!1}function ge(t,e,n){t.focused||t.focus();let r=t.state.tr.setSelection(e);"pointer"==n&&r.setMeta("pointer",!0),t.dispatch(r)}function me(t,e,n,i,o){return fe(t,"handleClickOn",e,n,i)||t.someProp("handleClick",(n=>n(t,e,i)))||(o?function(t,e){if(-1==e)return!1;let n,i,o=t.state.selection;o instanceof r.qv&&(n=o.node);let s=t.state.doc.resolve(e);for(let t=s.depth+1;t>0;t--){let e=t>s.depth?s.nodeAfter:s.node(t);if(r.qv.isSelectable(e)){i=n&&o.$from.depth>0&&t>=o.$from.depth&&s.before(o.$from.depth+1)==o.$from.pos?s.before(o.$from.depth):s.before(t);break}}return null!=i&&(ge(t,r.qv.create(t.state.doc,i),"pointer"),!0)}(t,n):function(t,e){if(-1==e)return!1;let n=t.state.doc.resolve(e),i=n.nodeAfter;return!!(i&&i.isAtom&&r.qv.isSelectable(i))&&(ge(t,new r.qv(n),"pointer"),!0)}(t,n))}function ye(t,e,n,r){return fe(t,"handleDoubleClickOn",e,n,r)||t.someProp("handleDoubleClick",(n=>n(t,e,r)))}function ve(t,e,n,i){return fe(t,"handleTripleClickOn",e,n,i)||t.someProp("handleTripleClick",(n=>n(t,e,i)))||function(t,e,n){if(0!=n.button)return!1;let i=t.state.doc;if(-1==e)return!!i.inlineContent&&(ge(t,r.Bs.create(i,0,i.content.size),"pointer"),!0);let o=i.resolve(e);for(let e=o.depth+1;e>0;e--){let n=e>o.depth?o.nodeAfter:o.node(e),s=o.before(e);if(n.inlineContent)ge(t,r.Bs.create(i,s+1,s+1+n.content.size),"pointer");else{if(!r.qv.isSelectable(n))continue;ge(t,r.qv.create(i,s),"pointer")}return!0}}(t,n,i)}function be(t){return Ce(t)}ae.keydown=(t,e)=>{let n=e;if(t.input.shiftKey=16==n.keyCode||n.shiftKey,!ke(t,n)&&(t.input.lastKeyCode=n.keyCode,t.input.lastKeyCodeTime=Date.now(),!x||!m||13!=n.keyCode))if(229!=n.keyCode&&t.domObserver.forceFlush(),!b||13!=n.keyCode||n.ctrlKey||n.altKey||n.metaKey)t.someProp("handleKeyDown",(e=>e(t,n)))||Jt(t,n)?n.preventDefault():ce(t,"key");else{let e=Date.now();t.input.lastIOSEnter=e,t.input.lastIOSEnterFallbackTimeout=setTimeout((()=>{t.input.lastIOSEnter==e&&(t.someProp("handleKeyDown",(e=>e(t,R(13,"Enter")))),t.input.lastIOSEnter=0)}),200)}},ae.keyup=(t,e)=>{16==e.keyCode&&(t.input.shiftKey=!1)},ae.keypress=(t,e)=>{let n=e;if(ke(t,n)||!n.charCode||n.ctrlKey&&!n.altKey||w&&n.metaKey)return;if(t.someProp("handleKeyPress",(e=>e(t,n))))return void n.preventDefault();let i=t.state.selection;if(!(i instanceof r.Bs&&i.$from.sameParent(i.$to))){let e=String.fromCharCode(n.charCode);t.someProp("handleTextInput",(n=>n(t,i.$from.pos,i.$to.pos,e)))||t.dispatch(t.state.tr.insertText(e).scrollIntoView()),n.preventDefault()}};const we=w?"metaKey":"ctrlKey";se.mousedown=(t,e)=>{let n=e;t.input.shiftKey=n.shiftKey;let r=be(t),i=Date.now(),o="singleClick";i-t.input.lastClick.time<500&&function(t,e){let n=e.x-t.clientX,r=e.y-t.clientY;return n*n+r*r<100}(n,t.input.lastClick)&&!n[we]&&("singleClick"==t.input.lastClick.type?o="doubleClick":"doubleClick"==t.input.lastClick.type&&(o="tripleClick")),t.input.lastClick={time:i,x:n.clientX,y:n.clientY,type:o};let s=t.posAtCoords(pe(n));s&&("singleClick"==o?(t.input.mouseDown&&t.input.mouseDown.done(),t.input.mouseDown=new xe(t,s,n,!!r)):("doubleClick"==o?ye:ve)(t,s.pos,s.inside,n)?n.preventDefault():ce(t,"pointer"))};class xe{constructor(t,e,n,i){let o,s;if(this.view=t,this.pos=e,this.event=n,this.flushed=i,this.delayedSelectionSync=!1,this.mightDrag=null,this.startDoc=t.state.doc,this.selectNode=!!n[we],this.allowDefault=n.shiftKey,e.inside>-1)o=t.state.doc.nodeAt(e.inside),s=e.inside;else{let n=t.state.doc.resolve(e.pos);o=n.parent,s=n.depth?n.before():0}const a=i?null:n.target,l=a?t.docView.nearestDesc(a,!0):null;this.target=l?l.dom:null;let{selection:c}=t.state;(0==n.button&&o.type.spec.draggable&&!1!==o.type.spec.selectable||c instanceof r.qv&&c.from<=s&&c.to>s)&&(this.mightDrag={node:o,pos:s,addAttr:!(!this.target||this.target.draggable),setUneditable:!(!this.target||!f||this.target.hasAttribute("contentEditable"))}),this.target&&this.mightDrag&&(this.mightDrag.addAttr||this.mightDrag.setUneditable)&&(this.view.domObserver.stop(),this.mightDrag.addAttr&&(this.target.draggable=!0),this.mightDrag.setUneditable&&setTimeout((()=>{this.view.input.mouseDown==this&&this.target.setAttribute("contentEditable","false")}),20),this.view.domObserver.start()),t.root.addEventListener("mouseup",this.up=this.up.bind(this)),t.root.addEventListener("mousemove",this.move=this.move.bind(this)),ce(t,"pointer")}done(){this.view.root.removeEventListener("mouseup",this.up),this.view.root.removeEventListener("mousemove",this.move),this.mightDrag&&this.target&&(this.view.domObserver.stop(),this.mightDrag.addAttr&&this.target.removeAttribute("draggable"),this.mightDrag.setUneditable&&this.target.removeAttribute("contentEditable"),this.view.domObserver.start()),this.delayedSelectionSync&&setTimeout((()=>Ct(this.view))),this.view.input.mouseDown=null}up(t){if(this.done(),!this.view.dom.contains(t.target))return;let e=this.pos;this.view.state.doc!=this.startDoc&&(e=this.view.posAtCoords(pe(t))),this.allowDefault||!e?ce(this.view,"pointer"):me(this.view,e.pos,e.inside,t,this.selectNode)?t.preventDefault():0==t.button&&(this.flushed||v&&this.mightDrag&&!this.mightDrag.node.isAtom||m&&!(this.view.state.selection instanceof r.Bs)&&Math.min(Math.abs(e.pos-this.view.state.selection.from),Math.abs(e.pos-this.view.state.selection.to))<=2)?(ge(this.view,r.Y1.near(this.view.state.doc.resolve(e.pos)),"pointer"),t.preventDefault()):ce(this.view,"pointer")}move(t){!this.allowDefault&&(Math.abs(this.event.x-t.clientX)>4||Math.abs(this.event.y-t.clientY)>4)&&(this.allowDefault=!0),ce(this.view,"pointer"),0==t.buttons&&this.done()}}function ke(t,e){return!!t.composing||!!(v&&Math.abs(e.timeStamp-t.input.compositionEndedAt)<500)&&(t.input.compositionEndedAt=-2e8,!0)}se.touchdown=t=>{be(t),ce(t,"pointer")},se.contextmenu=t=>be(t);const Se=x?5e3:-1;function _e(t,e){clearTimeout(t.input.composingTimeout),e>-1&&(t.input.composingTimeout=setTimeout((()=>Ce(t)),e))}function Ee(t){for(t.composing&&(t.input.composing=!1,t.input.compositionEndedAt=function(){let t=document.createEvent("Event");return t.initEvent("event",!0,!0),t.timeStamp}());t.input.compositionNodes.length>0;)t.input.compositionNodes.pop().markParentsDirty()}function Ce(t,e=!1){if(!(x&&t.domObserver.flushingSoon>=0)){if(t.domObserver.forceFlush(),Ee(t),e||t.docView&&t.docView.dirty){let e=_t(t);return e&&!e.eq(t.state.selection)?t.dispatch(t.state.tr.setSelection(e)):t.updateState(t.state),!0}return!1}}ae.compositionstart=ae.compositionupdate=t=>{if(!t.composing){t.domObserver.flush();let{state:e}=t,n=e.selection.$from;if(e.selection.empty&&(e.storedMarks||!n.textOffset&&n.parentOffset&&n.nodeBefore.marks.some((t=>!1===t.type.spec.inclusive))))t.markCursor=t.state.storedMarks||n.marks(),Ce(t,!0),t.markCursor=null;else if(Ce(t),f&&e.selection.empty&&n.parentOffset&&!n.textOffset&&n.nodeBefore.marks.length){let e=t.domSelection();for(let t=e.focusNode,n=e.focusOffset;t&&1==t.nodeType&&0!=n;){let r=n<0?t.lastChild:t.childNodes[n-1];if(!r)break;if(3==r.nodeType){e.collapse(r,r.nodeValue.length);break}t=r,n=-1}}t.input.composing=!0}_e(t,Se)},ae.compositionend=(t,e)=>{t.composing&&(t.input.composing=!1,t.input.compositionEndedAt=e.timeStamp,_e(t,20))};const Oe=d&&p<15||b&&S<604;function Me(t,e,n,r){let o=Kt(t,e,n,t.input.shiftKey,t.state.selection.$from);if(t.someProp("handlePaste",(e=>e(t,r,o||i.p2.empty))))return!0;if(!o)return!1;let s=function(t){return 0==t.openStart&&0==t.openEnd&&1==t.content.childCount?t.content.firstChild:null}(o),a=s?t.state.tr.replaceSelectionWith(s,t.input.shiftKey):t.state.tr.replaceSelection(o);return t.dispatch(a.scrollIntoView().setMeta("paste",!0).setMeta("uiEvent","paste")),!0}se.copy=ae.cut=(t,e)=>{let n=e,r=t.state.selection,i="cut"==n.type;if(r.empty)return;let o=Oe?null:n.clipboardData,s=r.content(),{dom:a,text:l}=Xt(t,s);o?(n.preventDefault(),o.clearData(),o.setData("text/html",a.innerHTML),o.setData("text/plain",l)):function(t,e){if(!t.dom.parentNode)return;let n=t.dom.parentNode.appendChild(document.createElement("div"));n.appendChild(e),n.style.cssText="position: fixed; left: -10000px; top: 10px";let r=getSelection(),i=document.createRange();i.selectNodeContents(e),t.dom.blur(),r.removeAllRanges(),r.addRange(i),setTimeout((()=>{n.parentNode&&n.parentNode.removeChild(n),t.focus()}),50)}(t,a),i&&t.dispatch(t.state.tr.deleteSelection().scrollIntoView().setMeta("uiEvent","cut"))},ae.paste=(t,e)=>{let n=e;if(t.composing&&!x)return;let r=Oe?null:n.clipboardData;r&&Me(t,r.getData("text/plain"),r.getData("text/html"),n)?n.preventDefault():function(t,e){if(!t.dom.parentNode)return;let n=t.input.shiftKey||t.state.selection.$from.parent.type.spec.code,r=t.dom.parentNode.appendChild(document.createElement(n?"textarea":"div"));n||(r.contentEditable="true"),r.style.cssText="position: fixed; left: -10000px; top: 10px",r.focus(),setTimeout((()=>{t.focus(),r.parentNode&&r.parentNode.removeChild(r),n?Me(t,r.value,null,e):Me(t,r.textContent,r.innerHTML,e)}),50)}(t,n)};class Ae{constructor(t,e){this.slice=t,this.move=e}}const Te=w?"altKey":"ctrlKey";se.dragstart=(t,e)=>{let n=e,i=t.input.mouseDown;if(i&&i.done(),!n.dataTransfer)return;let o=t.state.selection,s=o.empty?null:t.posAtCoords(pe(n));if(s&&s.pos>=o.from&&s.pos<=(o instanceof r.qv?o.to-1:o.to));else if(i&&i.mightDrag)t.dispatch(t.state.tr.setSelection(r.qv.create(t.state.doc,i.mightDrag.pos)));else if(n.target&&1==n.target.nodeType){let e=t.docView.nearestDesc(n.target,!0);e&&e.node.type.spec.draggable&&e!=t.docView&&t.dispatch(t.state.tr.setSelection(r.qv.create(t.state.doc,e.posBefore)))}let a=t.state.selection.content(),{dom:l,text:c}=Xt(t,a);n.dataTransfer.clearData(),n.dataTransfer.setData(Oe?"Text":"text/html",l.innerHTML),n.dataTransfer.effectAllowed="copyMove",Oe||n.dataTransfer.setData("text/plain",c),t.dragging=new Ae(a,!n[Te])},se.dragend=t=>{let e=t.dragging;window.setTimeout((()=>{t.dragging==e&&(t.dragging=null)}),50)},ae.dragover=ae.dragenter=(t,e)=>e.preventDefault(),ae.drop=(t,e)=>{let n=e,s=t.dragging;if(t.dragging=null,!n.dataTransfer)return;let a=t.posAtCoords(pe(n));if(!a)return;let l=t.state.doc.resolve(a.pos);if(!l)return;let c=s&&s.slice;c?t.someProp("transformPasted",(t=>{c=t(c)})):c=Kt(t,n.dataTransfer.getData(Oe?"Text":"text/plain"),Oe?null:n.dataTransfer.getData("text/html"),!1,l);let h=!(!s||n[Te]);if(t.someProp("handleDrop",(e=>e(t,n,c||i.p2.empty,h))))return void n.preventDefault();if(!c)return;n.preventDefault();let u=c?(0,o.nj)(t.state.doc,l.pos,c):l.pos;null==u&&(u=l.pos);let d=t.state.tr;h&&d.deleteSelection();let p=d.mapping.map(u),f=0==c.openStart&&0==c.openEnd&&1==c.content.childCount,g=d.doc;if(f?d.replaceRangeWith(p,p,c.content.firstChild):d.replaceRange(p,p,c),d.doc.eq(g))return;let m=d.doc.resolve(p);if(f&&r.qv.isSelectable(c.content.firstChild)&&m.nodeAfter&&m.nodeAfter.sameMarkup(c.content.firstChild))d.setSelection(new r.qv(m));else{let e=d.mapping.map(u);d.mapping.maps[d.mapping.maps.length-1].forEach(((t,n,r,i)=>e=i)),d.setSelection(jt(t,m,d.doc.resolve(e)))}t.focus(),t.dispatch(d.setMeta("uiEvent","drop"))},se.focus=t=>{t.focused||(t.domObserver.stop(),t.dom.classList.add("ProseMirror-focused"),t.domObserver.start(),t.focused=!0,setTimeout((()=>{t.docView&&t.hasFocus()&&!t.domObserver.currentSelection.eq(t.domSelection())&&Ct(t)}),20))},se.blur=(t,e)=>{let n=e;t.focused&&(t.domObserver.stop(),t.dom.classList.remove("ProseMirror-focused"),t.domObserver.start(),n.relatedTarget&&t.dom.contains(n.relatedTarget)&&t.domObserver.currentSelection.clear(),t.focused=!1)},se.beforeinput=(t,e)=>{if(m&&x&&"deleteContentBackward"==e.inputType){t.domObserver.flushSoon();let{domChangeCount:e}=t.input;setTimeout((()=>{if(t.input.domChangeCount!=e)return;if(t.dom.blur(),t.focus(),t.someProp("handleKeyDown",(e=>e(t,R(8,"Backspace")))))return;let{$cursor:n}=t.state.selection;n&&n.pos>0&&t.dispatch(t.state.tr.delete(n.pos-1,n.pos).scrollIntoView())}),50)}};for(let t in ae)se[t]=ae[t];function Ne(t,e){if(t==e)return!0;for(let n in t)if(t[n]!==e[n])return!1;for(let n in e)if(!(n in t))return!1;return!0}class De{constructor(t,e){this.toDOM=t,this.spec=e||Ie,this.side=this.spec.side||0}map(t,e,n,r){let{pos:i,deleted:o}=t.mapResult(e.from+r,this.side<0?-1:1);return o?null:new Pe(i-n,i-n,this)}valid(){return!0}eq(t){return this==t||t instanceof De&&(this.spec.key&&this.spec.key==t.spec.key||this.toDOM==t.toDOM&&Ne(this.spec,t.spec))}destroy(t){this.spec.destroy&&this.spec.destroy(t)}}class je{constructor(t,e){this.attrs=t,this.spec=e||Ie}map(t,e,n,r){let i=t.map(e.from+r,this.spec.inclusiveStart?-1:1)-n,o=t.map(e.to+r,this.spec.inclusiveEnd?1:-1)-n;return i>=o?null:new Pe(i,o,this)}valid(t,e){return e.from<e.to}eq(t){return this==t||t instanceof je&&Ne(this.attrs,t.attrs)&&Ne(this.spec,t.spec)}static is(t){return t.type instanceof je}destroy(){}}class Re{constructor(t,e){this.attrs=t,this.spec=e||Ie}map(t,e,n,r){let i=t.mapResult(e.from+r,1);if(i.deleted)return null;let o=t.mapResult(e.to+r,-1);return o.deleted||o.pos<=i.pos?null:new Pe(i.pos-n,o.pos-n,this)}valid(t,e){let n,{index:r,offset:i}=t.content.findIndex(e.from);return i==e.from&&!(n=t.child(r)).isText&&i+n.nodeSize==e.to}eq(t){return this==t||t instanceof Re&&Ne(this.attrs,t.attrs)&&Ne(this.spec,t.spec)}destroy(){}}class Pe{constructor(t,e,n){this.from=t,this.to=e,this.type=n}copy(t,e){return new Pe(t,e,this.type)}eq(t,e=0){return this.type.eq(t.type)&&this.from+e==t.from&&this.to+e==t.to}map(t,e,n){return this.type.map(t,this,e,n)}static widget(t,e,n){return new Pe(t,t,new De(e,n))}static inline(t,e,n,r){return new Pe(t,e,new je(n,r))}static node(t,e,n,r){return new Pe(t,e,new Re(n,r))}get spec(){return this.type.spec}get inline(){return this.type instanceof je}}const ze=[],Ie={};class Be{constructor(t,e){this.local=t.length?t:ze,this.children=e.length?e:ze}static create(t,e){return e.length?qe(e,t,0,Ie):Fe}find(t,e,n){let r=[];return this.findInner(null==t?0:t,null==e?1e9:e,r,0,n),r}findInner(t,e,n,r,i){for(let o=0;o<this.local.length;o++){let s=this.local[o];s.from<=e&&s.to>=t&&(!i||i(s.spec))&&n.push(s.copy(s.from+r,s.to+r))}for(let o=0;o<this.children.length;o+=3)if(this.children[o]<e&&this.children[o+1]>t){let s=this.children[o]+1;this.children[o+2].findInner(t-s,e-s,n,r+s,i)}}map(t,e,n){return this==Fe||0==t.maps.length?this:this.mapInner(t,e,0,0,n||Ie)}mapInner(t,e,n,r,i){let o;for(let s=0;s<this.local.length;s++){let a=this.local[s].map(t,n,r);a&&a.type.valid(e,a)?(o||(o=[])).push(a):i.onRemove&&i.onRemove(this.local[s].spec)}return this.children.length?function(t,e,n,r,i,o,s){let a=t.slice(),l=(t,e,n,r)=>{for(let s=0;s<a.length;s+=3){let l,c=a[s+1];if(c<0||t>c+o)continue;let h=a[s]+o;e>=h?a[s+1]=t<=h?-2:-1:n>=i&&(l=r-n-(e-t))&&(a[s]+=l,a[s+1]+=l)}};for(let t=0;t<n.maps.length;t++)n.maps[t].forEach(l);let c=!1;for(let e=0;e<a.length;e+=3)if(a[e+1]<0){if(-2==a[e+1]){c=!0,a[e+1]=-1;continue}let l=n.map(t[e]+o),h=l-i;if(h<0||h>=r.content.size){c=!0;continue}let u=n.map(t[e+1]+o,-1)-i,{index:d,offset:p}=r.content.findIndex(h),f=r.maybeChild(d);if(f&&p==h&&p+f.nodeSize==u){let r=a[e+2].mapInner(n,f,l+1,t[e]+o+1,s);r!=Fe?(a[e]=h,a[e+1]=u,a[e+2]=r):(a[e+1]=-2,c=!0)}else c=!0}if(c){let l=function(t,e,n,r,i,o,s){function a(t,e){for(let o=0;o<t.local.length;o++){let a=t.local[o].map(r,i,e);a?n.push(a):s.onRemove&&s.onRemove(t.local[o].spec)}for(let n=0;n<t.children.length;n+=3)a(t.children[n+2],t.children[n]+e+1)}for(let n=0;n<t.length;n+=3)-1==t[n+1]&&a(t[n+2],e[n]+o+1);return n}(a,t,e,n,i,o,s),c=qe(l,r,0,s);e=c.local;for(let t=0;t<a.length;t+=3)a[t+1]<0&&(a.splice(t,3),t-=3);for(let t=0,e=0;t<c.children.length;t+=3){let n=c.children[t];for(;e<a.length&&a[e]<n;)e+=3;a.splice(e,0,c.children[t],c.children[t+1],c.children[t+2])}}return new Be(e.sort(We),a)}(this.children,o||[],t,e,n,r,i):o?new Be(o.sort(We),ze):Fe}add(t,e){return e.length?this==Fe?Be.create(t,e):this.addInner(t,e,0):this}addInner(t,e,n){let r,i=0;t.forEach(((t,o)=>{let s,a=o+n;if(s=He(e,t,a)){for(r||(r=this.children.slice());i<r.length&&r[i]<o;)i+=3;r[i]==o?r[i+2]=r[i+2].addInner(t,s,a+1):r.splice(i,0,o,o+t.nodeSize,qe(s,t,a+1,Ie)),i+=3}}));let o=Le(i?Ve(e):e,-n);for(let e=0;e<o.length;e++)o[e].type.valid(t,o[e])||o.splice(e--,1);return new Be(o.length?this.local.concat(o).sort(We):this.local,r||this.children)}remove(t){return 0==t.length||this==Fe?this:this.removeInner(t,0)}removeInner(t,e){let n=this.children,r=this.local;for(let r=0;r<n.length;r+=3){let i,o=n[r]+e,s=n[r+1]+e;for(let e,n=0;n<t.length;n++)(e=t[n])&&e.from>o&&e.to<s&&(t[n]=null,(i||(i=[])).push(e));if(!i)continue;n==this.children&&(n=this.children.slice());let a=n[r+2].removeInner(i,o+1);a!=Fe?n[r+2]=a:(n.splice(r,3),r-=3)}if(r.length)for(let n,i=0;i<t.length;i++)if(n=t[i])for(let t=0;t<r.length;t++)r[t].eq(n,e)&&(r==this.local&&(r=this.local.slice()),r.splice(t--,1));return n==this.children&&r==this.local?this:r.length||n.length?new Be(r,n):Fe}forChild(t,e){if(this==Fe)return this;if(e.isLeaf)return Be.empty;let n,r;for(let e=0;e<this.children.length;e+=3)if(this.children[e]>=t){this.children[e]==t&&(n=this.children[e+2]);break}let i=t+1,o=i+e.content.size;for(let t=0;t<this.local.length;t++){let e=this.local[t];if(e.from<o&&e.to>i&&e.type instanceof je){let t=Math.max(i,e.from)-i,n=Math.min(o,e.to)-i;t<n&&(r||(r=[])).push(e.copy(t,n))}}if(r){let t=new Be(r.sort(We),ze);return n?new $e([t,n]):t}return n||Fe}eq(t){if(this==t)return!0;if(!(t instanceof Be)||this.local.length!=t.local.length||this.children.length!=t.children.length)return!1;for(let e=0;e<this.local.length;e++)if(!this.local[e].eq(t.local[e]))return!1;for(let e=0;e<this.children.length;e+=3)if(this.children[e]!=t.children[e]||this.children[e+1]!=t.children[e+1]||!this.children[e+2].eq(t.children[e+2]))return!1;return!0}locals(t){return Ue(this.localsInner(t))}localsInner(t){if(this==Fe)return ze;if(t.inlineContent||!this.local.some(je.is))return this.local;let e=[];for(let t=0;t<this.local.length;t++)this.local[t].type instanceof je||e.push(this.local[t]);return e}}Be.empty=new Be([],[]),Be.removeOverlap=Ue;const Fe=Be.empty;class $e{constructor(t){this.members=t}map(t,e){const n=this.members.map((n=>n.map(t,e,Ie)));return $e.from(n)}forChild(t,e){if(e.isLeaf)return Be.empty;let n=[];for(let r=0;r<this.members.length;r++){let i=this.members[r].forChild(t,e);i!=Fe&&(i instanceof $e?n=n.concat(i.members):n.push(i))}return $e.from(n)}eq(t){if(!(t instanceof $e)||t.members.length!=this.members.length)return!1;for(let e=0;e<this.members.length;e++)if(!this.members[e].eq(t.members[e]))return!1;return!0}locals(t){let e,n=!0;for(let r=0;r<this.members.length;r++){let i=this.members[r].localsInner(t);if(i.length)if(e){n&&(e=e.slice(),n=!1);for(let t=0;t<i.length;t++)e.push(i[t])}else e=i}return e?Ue(n?e:e.sort(We)):ze}static from(t){switch(t.length){case 0:return Fe;case 1:return t[0];default:return new $e(t)}}}function Le(t,e){if(!e||!t.length)return t;let n=[];for(let r=0;r<t.length;r++){let i=t[r];n.push(new Pe(i.from+e,i.to+e,i.type))}return n}function He(t,e,n){if(e.isLeaf)return null;let r=n+e.nodeSize,i=null;for(let e,o=0;o<t.length;o++)(e=t[o])&&e.from>n&&e.to<r&&((i||(i=[])).push(e),t[o]=null);return i}function Ve(t){let e=[];for(let n=0;n<t.length;n++)null!=t[n]&&e.push(t[n]);return e}function qe(t,e,n,r){let i=[],o=!1;e.forEach(((e,s)=>{let a=He(t,e,s+n);if(a){o=!0;let t=qe(a,e,n+s+1,r);t!=Fe&&i.push(s,s+e.nodeSize,t)}}));let s=Le(o?Ve(t):t,-n).sort(We);for(let t=0;t<s.length;t++)s[t].type.valid(e,s[t])||(r.onRemove&&r.onRemove(s[t].spec),s.splice(t--,1));return s.length||i.length?new Be(s,i):Fe}function We(t,e){return t.from-e.from||t.to-e.to}function Ue(t){let e=t;for(let n=0;n<e.length-1;n++){let r=e[n];if(r.from!=r.to)for(let i=n+1;i<e.length;i++){let o=e[i];if(o.from!=r.from){o.from<r.to&&(e==t&&(e=t.slice()),e[n]=r.copy(r.from,o.from),Ye(e,i,r.copy(o.from,r.to)));break}o.to!=r.to&&(e==t&&(e=t.slice()),e[i]=o.copy(o.from,r.to),Ye(e,i+1,o.copy(r.to,o.to)))}}return e}function Ye(t,e,n){for(;e<t.length&&We(n,t[e])>0;)e++;t.splice(e,0,n)}function Je(t){let e=[];return t.someProp("decorations",(n=>{let r=n(t.state);r&&r!=Fe&&e.push(r)})),t.cursorWrapper&&e.push(Be.create(t.state.doc,[t.cursorWrapper.deco])),$e.from(e)}const Xe={childList:!0,characterData:!0,characterDataOldValue:!0,attributes:!0,attributeOldValue:!0,subtree:!0},Ke=d&&p<=11;class Ge{constructor(){this.anchorNode=null,this.anchorOffset=0,this.focusNode=null,this.focusOffset=0}set(t){this.anchorNode=t.anchorNode,this.anchorOffset=t.anchorOffset,this.focusNode=t.focusNode,this.focusOffset=t.focusOffset}clear(){this.anchorNode=this.focusNode=null}eq(t){return t.anchorNode==this.anchorNode&&t.anchorOffset==this.anchorOffset&&t.focusNode==this.focusNode&&t.focusOffset==this.focusOffset}}class Ze{constructor(t,e){this.view=t,this.handleDOMChange=e,this.queue=[],this.flushingSoon=-1,this.observer=null,this.currentSelection=new Ge,this.onCharData=null,this.suppressingSelectionUpdates=!1,this.observer=window.MutationObserver&&new window.MutationObserver((t=>{for(let e=0;e<t.length;e++)this.queue.push(t[e]);d&&p<=11&&t.some((t=>"childList"==t.type&&t.removedNodes.length||"characterData"==t.type&&t.oldValue.length>t.target.nodeValue.length))?this.flushSoon():this.flush()})),Ke&&(this.onCharData=t=>{this.queue.push({target:t.target,type:"characterData",oldValue:t.prevValue}),this.flushSoon()}),this.onSelectionChange=this.onSelectionChange.bind(this)}flushSoon(){this.flushingSoon<0&&(this.flushingSoon=window.setTimeout((()=>{this.flushingSoon=-1,this.flush()}),20))}forceFlush(){this.flushingSoon>-1&&(window.clearTimeout(this.flushingSoon),this.flushingSoon=-1,this.flush())}start(){this.observer&&this.observer.observe(this.view.dom,Xe),this.onCharData&&this.view.dom.addEventListener("DOMCharacterDataModified",this.onCharData),this.connectSelection()}stop(){if(this.observer){let t=this.observer.takeRecords();if(t.length){for(let e=0;e<t.length;e++)this.queue.push(t[e]);window.setTimeout((()=>this.flush()),20)}this.observer.disconnect()}this.onCharData&&this.view.dom.removeEventListener("DOMCharacterDataModified",this.onCharData),this.disconnectSelection()}connectSelection(){this.view.dom.ownerDocument.addEventListener("selectionchange",this.onSelectionChange)}disconnectSelection(){this.view.dom.ownerDocument.removeEventListener("selectionchange",this.onSelectionChange)}suppressSelectionUpdates(){this.suppressingSelectionUpdates=!0,setTimeout((()=>this.suppressingSelectionUpdates=!1),50)}onSelectionChange(){if(Rt(this.view)){if(this.suppressingSelectionUpdates)return Ct(this.view);if(d&&p<=11&&!this.view.state.selection.empty){let t=this.view.domSelection();if(t.focusNode&&M(t.focusNode,t.focusOffset,t.anchorNode,t.anchorOffset))return this.flushSoon()}this.flush()}}setCurSelection(){this.currentSelection.set(this.view.domSelection())}ignoreSelectionChange(t){if(0==t.rangeCount)return!0;let e=t.getRangeAt(0).commonAncestorContainer,n=this.view.docView.nearestDesc(e);return n&&n.ignoreMutation({type:"selection",target:3==e.nodeType?e.parentNode:e})?(this.setCurSelection(),!0):void 0}flush(){if(!this.view.docView||this.flushingSoon>-1)return;let t=this.observer?this.observer.takeRecords():[];this.queue.length&&(t=this.queue.concat(t),this.queue.length=0);let e=this.view.domSelection(),n=!this.suppressingSelectionUpdates&&!this.currentSelection.eq(e)&&Rt(this.view)&&!this.ignoreSelectionChange(e),r=-1,i=-1,o=!1,s=[];if(this.view.editable)for(let e=0;e<t.length;e++){let n=this.registerMutation(t[e],s);n&&(r=r<0?n.from:Math.min(n.from,r),i=i<0?n.to:Math.max(n.to,i),n.typeOver&&(o=!0))}if(f&&s.length>1){let t=s.filter((t=>"BR"==t.nodeName));if(2==t.length){let e=t[0],n=t[1];e.parentNode&&e.parentNode.parentNode==n.parentNode?n.remove():e.remove()}}(r>-1||n)&&(r>-1&&(this.view.docView.markDirty(r,i),function(t){if(Qe)return;Qe=!0,"normal"==getComputedStyle(t.dom).whiteSpace&&console.warn("ProseMirror expects the CSS white-space property to be set, preferably to 'pre-wrap'. It is recommended to load style/prosemirror.css from the prosemirror-view package.")}(this.view)),this.handleDOMChange(r,i,o,s),this.view.docView&&this.view.docView.dirty?this.view.updateState(this.view.state):this.currentSelection.eq(e)||Ct(this.view),this.currentSelection.set(e))}registerMutation(t,e){if(e.indexOf(t.target)>-1)return null;let n=this.view.docView.nearestDesc(t.target);if("attributes"==t.type&&(n==this.view.docView||"contenteditable"==t.attributeName||"style"==t.attributeName&&!t.oldValue&&!t.target.getAttribute("style")))return null;if(!n||n.ignoreMutation(t))return null;if("childList"==t.type){for(let n=0;n<t.addedNodes.length;n++)e.push(t.addedNodes[n]);if(n.contentDOM&&n.contentDOM!=n.dom&&!n.contentDOM.contains(t.target))return{from:n.posBefore,to:n.posAfter};let r=t.previousSibling,i=t.nextSibling;if(d&&p<=11&&t.addedNodes.length)for(let e=0;e<t.addedNodes.length;e++){let{previousSibling:n,nextSibling:o}=t.addedNodes[e];(!n||Array.prototype.indexOf.call(t.addedNodes,n)<0)&&(r=n),(!o||Array.prototype.indexOf.call(t.addedNodes,o)<0)&&(i=o)}let o=r&&r.parentNode==t.target?_(r)+1:0,s=n.localPosFromDOM(t.target,o,-1),a=i&&i.parentNode==t.target?_(i):t.target.childNodes.length;return{from:s,to:n.localPosFromDOM(t.target,a,1)}}return"attributes"==t.type?{from:n.posAtStart-n.border,to:n.posAtEnd+n.border}:{from:n.posAtStart,to:n.posAtEnd,typeOver:t.target.nodeValue==t.oldValue}}}let Qe=!1;function tn(t){let e=t.pmViewDesc;if(e)return e.parseRule();if("BR"==t.nodeName&&t.parentNode){if(v&&/^(ul|ol)$/i.test(t.parentNode.nodeName)){let t=document.createElement("div");return t.appendChild(document.createElement("li")),{skip:t}}if(t.parentNode.lastChild==t||v&&/^(tr|table)$/i.test(t.parentNode.nodeName))return{ignore:!0}}else if("IMG"==t.nodeName&&t.getAttribute("mark-placeholder"))return{ignore:!0};return null}function en(t,e,n,o,s){if(e<0){let e=t.input.lastSelectionTime>Date.now()-50?t.input.lastSelectionOrigin:null,n=_t(t,e);if(n&&!t.state.selection.eq(n)){let r=t.state.tr.setSelection(n);"pointer"==e?r.setMeta("pointer",!0):"key"==e&&r.scrollIntoView(),t.dispatch(r)}return}let a=t.state.doc.resolve(e),l=a.sharedDepth(n);e=a.before(l+1),n=t.state.doc.resolve(n).after(l+1);let c=t.state.selection,h=function(t,e,n){let r,{node:o,fromOffset:s,toOffset:a,from:l,to:c}=t.docView.parseRange(e,n),h=t.domSelection(),u=h.anchorNode;if(u&&t.dom.contains(1==u.nodeType?u:u.parentNode)&&(r=[{node:u,offset:h.anchorOffset}],j(h)||r.push({node:h.focusNode,offset:h.focusOffset})),m&&8===t.input.lastKeyCode)for(let t=a;t>s;t--){let e=o.childNodes[t-1],n=e.pmViewDesc;if("BR"==e.nodeName&&!n){a=t;break}if(!n||n.size)break}let d=t.state.doc,p=t.someProp("domParser")||i.aw.fromSchema(t.state.schema),f=d.resolve(l),g=null,y=p.parse(o,{topNode:f.parent,topMatch:f.parent.contentMatchAt(f.index()),topOpen:!0,from:s,to:a,preserveWhitespace:"pre"!=f.parent.type.whitespace||"full",findPositions:r,ruleFromNode:tn,context:f});if(r&&null!=r[0].pos){let t=r[0].pos,e=r[1]&&r[1].pos;null==e&&(e=t),g={anchor:t+l,head:e+l}}return{doc:y,sel:g,from:l,to:c}}(t,e,n);if(m&&t.cursorWrapper&&h.sel&&h.sel.anchor==t.cursorWrapper.deco.from){let e=t.cursorWrapper.deco.type.toDOM.nextSibling,n=e&&e.nodeValue?e.nodeValue.length:1;h.sel={anchor:h.sel.anchor+n,head:h.sel.anchor+n}}let u,f,g=t.state.doc,y=g.slice(h.from,h.to);8===t.input.lastKeyCode&&Date.now()-100<t.input.lastKeyCodeTime?(u=t.state.selection.to,f="end"):(u=t.state.selection.from,f="start"),t.input.lastKeyCode=null;let v=function(t,e,n,r,i){let o=t.findDiffStart(e,n);if(null==o)return null;let{a:s,b:a}=t.findDiffEnd(e,n+t.size,n+e.size);if("end"==i){r-=s+Math.max(0,o-Math.min(s,a))-o}if(s<o&&t.size<e.size){o-=r<=o&&r>=s?o-r:0,a=o+(a-s),s=o}else if(a<o){o-=r<=o&&r>=a?o-r:0,s=o+(s-a),a=o}return{start:o,endA:s,endB:a}}(y.content,h.doc.content,h.from,u,f);if((b&&t.input.lastIOSEnter>Date.now()-225||x)&&s.some((t=>"DIV"==t.nodeName||"P"==t.nodeName))&&(!v||v.endA>=v.endB)&&t.someProp("handleKeyDown",(e=>e(t,R(13,"Enter")))))return void(t.input.lastIOSEnter=0);if(!v){if(!(o&&c instanceof r.Bs&&!c.empty&&c.$head.sameParent(c.$anchor))||t.composing||h.sel&&h.sel.anchor!=h.sel.head){if(h.sel){let e=nn(t,t.state.doc,h.sel);e&&!e.eq(t.state.selection)&&t.dispatch(t.state.tr.setSelection(e))}return}v={start:c.from,endA:c.to,endB:c.to}}t.input.domChangeCount++,t.state.selection.from<t.state.selection.to&&v.start==v.endB&&t.state.selection instanceof r.Bs&&(v.start>t.state.selection.from&&v.start<=t.state.selection.from+2&&t.state.selection.from>=h.from?v.start=t.state.selection.from:v.endA<t.state.selection.to&&v.endA>=t.state.selection.to-2&&t.state.selection.to<=h.to&&(v.endB+=t.state.selection.to-v.endA,v.endA=t.state.selection.to)),d&&p<=11&&v.endB==v.start+1&&v.endA==v.start&&v.start>h.from&&"  "==h.doc.textBetween(v.start-h.from-1,v.start-h.from+1)&&(v.start--,v.endA--,v.endB--);let w,k=h.doc.resolveNoCache(v.start-h.from),S=h.doc.resolveNoCache(v.endB-h.from),_=g.resolve(v.start),E=k.sameParent(S)&&k.parent.inlineContent&&_.end()>=v.endA;if((b&&t.input.lastIOSEnter>Date.now()-225&&(!E||s.some((t=>"DIV"==t.nodeName||"P"==t.nodeName)))||!E&&k.pos<h.doc.content.size&&(w=r.Y1.findFrom(h.doc.resolve(k.pos+1),1,!0))&&w.head==S.pos)&&t.someProp("handleKeyDown",(e=>e(t,R(13,"Enter")))))return void(t.input.lastIOSEnter=0);if(t.state.selection.anchor>v.start&&function(t,e,n,r,i){if(!r.parent.isTextblock||n-e<=i.pos-r.pos||rn(r,!0,!1)<i.pos)return!1;let o=t.resolve(e);if(o.parentOffset<o.parent.content.size||!o.parent.isTextblock)return!1;let s=t.resolve(rn(o,!0,!0));return!(!s.parent.isTextblock||s.pos>n||rn(s,!0,!1)<n)&&r.parent.content.cut(r.parentOffset).eq(s.parent.content)}(g,v.start,v.endA,k,S)&&t.someProp("handleKeyDown",(e=>e(t,R(8,"Backspace")))))return void(x&&m&&t.domObserver.suppressSelectionUpdates());m&&x&&v.endB==v.start&&(t.input.lastAndroidDelete=Date.now()),x&&!E&&k.start()!=S.start()&&0==S.parentOffset&&k.depth==S.depth&&h.sel&&h.sel.anchor==h.sel.head&&h.sel.head==v.endA&&(v.endB-=2,S=h.doc.resolveNoCache(v.endB-h.from),setTimeout((()=>{t.someProp("handleKeyDown",(function(e){return e(t,R(13,"Enter"))}))}),20));let C,O,M,A=v.start,T=v.endA;if(E)if(k.pos==S.pos)d&&p<=11&&0==k.parentOffset&&(t.domObserver.suppressSelectionUpdates(),setTimeout((()=>Ct(t)),20)),C=t.state.tr.delete(A,T),O=g.resolve(v.start).marksAcross(g.resolve(v.endA));else if(v.endA==v.endB&&(M=function(t,e){let n,r,o,s=t.firstChild.marks,a=e.firstChild.marks,l=s,c=a;for(let t=0;t<a.length;t++)l=a[t].removeFromSet(l);for(let t=0;t<s.length;t++)c=s[t].removeFromSet(c);if(1==l.length&&0==c.length)r=l[0],n="add",o=t=>t.mark(r.addToSet(t.marks));else{if(0!=l.length||1!=c.length)return null;r=c[0],n="remove",o=t=>t.mark(r.removeFromSet(t.marks))}let h=[];for(let t=0;t<e.childCount;t++)h.push(o(e.child(t)));if(i.HY.from(h).eq(t))return{mark:r,type:n}}(k.parent.content.cut(k.parentOffset,S.parentOffset),_.parent.content.cut(_.parentOffset,v.endA-_.start()))))C=t.state.tr,"add"==M.type?C.addMark(A,T,M.mark):C.removeMark(A,T,M.mark);else if(k.parent.child(k.index()).isText&&k.index()==S.index()-(S.textOffset?0:1)){let e=k.parent.textBetween(k.parentOffset,S.parentOffset);if(t.someProp("handleTextInput",(n=>n(t,A,T,e))))return;C=t.state.tr.insertText(e,A,T)}if(C||(C=t.state.tr.replace(A,T,h.doc.slice(v.start-h.from,v.endB-h.from))),h.sel){let e=nn(t,C.doc,h.sel);e&&!(m&&x&&t.composing&&e.empty&&(v.start!=v.endB||t.input.lastAndroidDelete<Date.now()-100)&&(e.head==A||e.head==C.mapping.map(T)-1)||d&&e.empty&&e.head==A)&&C.setSelection(e)}O&&C.ensureMarks(O),t.dispatch(C.scrollIntoView())}function nn(t,e,n){return Math.max(n.anchor,n.head)>e.content.size?null:jt(t,e.resolve(n.anchor),e.resolve(n.head))}function rn(t,e,n){let r=t.depth,i=e?t.end():t.pos;for(;r>0&&(e||t.indexAfter(r)==t.node(r).childCount);)r--,i++,e=!1;if(n){let e=t.node(r).maybeChild(t.indexAfter(r));for(;e&&!e.isLeaf;)e=e.firstChild,i++}return i}class on{constructor(t,e){this._root=null,this.focused=!1,this.trackWrites=null,this.mounted=!1,this.markCursor=null,this.cursorWrapper=null,this.lastSelectedViewDesc=void 0,this.input=new le,this.prevDirectPlugins=[],this.pluginViews=[],this.dragging=null,this._props=e,this.state=e.state,this.directPlugins=e.plugins||[],this.directPlugins.forEach(hn),this.dispatch=this.dispatch.bind(this),this.dom=t&&t.mount||document.createElement("div"),t&&(t.appendChild?t.appendChild(this.dom):"function"==typeof t?t(this.dom):t.mount&&(this.mounted=!0)),this.editable=ln(this),an(this),this.nodeViews=cn(this),this.docView=lt(this.state.doc,sn(this),Je(this),this.dom,this),this.domObserver=new Ze(this,((t,e,n,r)=>en(this,t,e,n,r))),this.domObserver.start(),function(t){for(let e in se){let n=se[e];t.dom.addEventListener(e,t.input.eventHandlers[e]=e=>{!de(t,e)||ue(t,e)||!t.editable&&e.type in ae||n(t,e)})}v&&t.dom.addEventListener("input",(()=>null)),he(t)}(this),this.updatePluginViews()}get composing(){return this.input.composing}get props(){if(this._props.state!=this.state){let t=this._props;this._props={};for(let e in t)this._props[e]=t[e];this._props.state=this.state}return this._props}update(t){t.handleDOMEvents!=this._props.handleDOMEvents&&he(this),this._props=t,t.plugins&&(t.plugins.forEach(hn),this.directPlugins=t.plugins),this.updateStateInner(t.state,!0)}setProps(t){let e={};for(let t in this._props)e[t]=this._props[t];e.state=this.state;for(let n in t)e[n]=t[n];this.update(e)}updateState(t){this.updateStateInner(t,this.state.plugins!=t.plugins)}updateStateInner(t,e){let n=this.state,i=!1,o=!1;if(t.storedMarks&&this.composing&&(Ee(this),o=!0),this.state=t,e){let t=cn(this);(function(t,e){let n=0,r=0;for(let r in t){if(t[r]!=e[r])return!0;n++}for(let t in e)r++;return n!=r})(t,this.nodeViews)&&(this.nodeViews=t,i=!0),he(this)}this.editable=ln(this),an(this);let s=Je(this),a=sn(this),l=e?"reset":t.scrollToSelection>n.scrollToSelection?"to selection":"preserve",c=i||!this.docView.matchesNode(t.doc,a,s);!c&&t.selection.eq(n.selection)||(o=!0);let h="preserve"==l&&o&&null==this.dom.style.overflowAnchor&&function(t){let e,n,r=t.dom.getBoundingClientRect(),i=Math.max(0,r.top);for(let o=(r.left+r.right)/2,s=i+1;s<Math.min(innerHeight,r.bottom);s+=5){let r=t.root.elementFromPoint(o,s);if(!r||r==t.dom||!t.dom.contains(r))continue;let a=r.getBoundingClientRect();if(a.top>=i-20){e=r,n=a.top;break}}return{refDOM:e,refTop:n,stack:F(t.dom)}}(this);if(o){this.domObserver.stop();let e=c&&(d||m)&&!this.composing&&!n.selection.empty&&!t.selection.empty&&function(t,e){let n=Math.min(t.$anchor.sharedDepth(t.head),e.$anchor.sharedDepth(e.head));return t.$anchor.start(n)!=e.$anchor.start(n)}(n.selection,t.selection);if(c){let n=m?this.trackWrites=this.domSelection().focusNode:null;!i&&this.docView.update(t.doc,a,s,this)||(this.docView.updateOuterDeco([]),this.docView.destroy(),this.docView=lt(t.doc,a,s,this.dom,this)),n&&!this.trackWrites&&(e=!0)}e||!(this.input.mouseDown&&this.domObserver.currentSelection.eq(this.domSelection())&&function(t){let e=t.docView.domFromPos(t.state.selection.anchor,0),n=t.domSelection();return M(e.node,e.offset,n.anchorNode,n.anchorOffset)}(this))?Ct(this,e):(Nt(this,t.selection),this.domObserver.setCurSelection()),this.domObserver.start()}if(this.updatePluginViews(n),"reset"==l)this.dom.scrollTop=0;else if("to selection"==l){let e=this.domSelection().focusNode;if(this.someProp("handleScrollToSelection",(t=>t(this))));else if(t.selection instanceof r.qv){let n=this.docView.domAfterPos(t.selection.from);1==n.nodeType&&B(this,n.getBoundingClientRect(),e)}else B(this,this.coordsAtPos(t.selection.head,1),e)}else h&&function({refDOM:t,refTop:e,stack:n}){let r=t?t.getBoundingClientRect().top:0;$(n,0==r?0:r-e)}(h)}destroyPluginViews(){let t;for(;t=this.pluginViews.pop();)t.destroy&&t.destroy()}updatePluginViews(t){if(t&&t.plugins==this.state.plugins&&this.directPlugins==this.prevDirectPlugins)for(let e=0;e<this.pluginViews.length;e++){let n=this.pluginViews[e];n.update&&n.update(this,t)}else{this.prevDirectPlugins=this.directPlugins,this.destroyPluginViews();for(let t=0;t<this.directPlugins.length;t++){let e=this.directPlugins[t];e.spec.view&&this.pluginViews.push(e.spec.view(this))}for(let t=0;t<this.state.plugins.length;t++){let e=this.state.plugins[t];e.spec.view&&this.pluginViews.push(e.spec.view(this))}}}someProp(t,e){let n,r=this._props&&this._props[t];if(null!=r&&(n=e?e(r):r))return n;for(let r=0;r<this.directPlugins.length;r++){let i=this.directPlugins[r].props[t];if(null!=i&&(n=e?e(i):i))return n}let i=this.state.plugins;if(i)for(let r=0;r<i.length;r++){let o=i[r].props[t];if(null!=o&&(n=e?e(o):o))return n}}hasFocus(){return this.root.activeElement==this.dom}focus(){this.domObserver.stop(),this.editable&&function(t){if(t.setActive)return t.setActive();if(L)return t.focus(L);let e=F(t);t.focus(null==L?{get preventScroll(){return L={preventScroll:!0},!0}}:void 0),L||(L=!1,$(e,0))}(this.dom),Ct(this),this.domObserver.start()}get root(){let t=this._root;if(null==t)for(let t=this.dom.parentNode;t;t=t.parentNode)if(9==t.nodeType||11==t.nodeType&&t.host)return t.getSelection||(Object.getPrototypeOf(t).getSelection=()=>t.ownerDocument.getSelection()),this._root=t;return t||document}posAtCoords(t){return W(this,t)}coordsAtPos(t,e=1){return J(this,t,e)}domAtPos(t,e=0){return this.docView.domFromPos(t,e)}nodeDOM(t){let e=this.docView.descAt(t);return e?e.nodeDOM:null}posAtDOM(t,e,n=-1){let r=this.docView.posFromDOM(t,e,n);if(null==r)throw new RangeError("DOM position not inside the editor");return r}endOfTextblock(t,e){return nt(this,e||this.state,t)}destroy(){this.docView&&(!function(t){t.domObserver.stop();for(let e in t.input.eventHandlers)t.dom.removeEventListener(e,t.input.eventHandlers[e]);clearTimeout(t.input.composingTimeout),clearTimeout(t.input.lastIOSEnterFallbackTimeout)}(this),this.destroyPluginViews(),this.mounted?(this.docView.update(this.state.doc,[],Je(this),this),this.dom.textContent=""):this.dom.parentNode&&this.dom.parentNode.removeChild(this.dom),this.docView.destroy(),this.docView=null)}get isDestroyed(){return null==this.docView}dispatchEvent(t){return function(t,e){ue(t,e)||!se[e.type]||!t.editable&&e.type in ae||se[e.type](t,e)}(this,t)}dispatch(t){let e=this._props.dispatchTransaction;e?e.call(this,t):this.updateState(this.state.apply(t))}domSelection(){return this.root.getSelection()}}function sn(t){let e=Object.create(null);return e.class="ProseMirror",e.contenteditable=String(t.editable),e.translate="no",t.someProp("attributes",(n=>{if("function"==typeof n&&(n=n(t.state)),n)for(let t in n)"class"==t&&(e.class+=" "+n[t]),"style"==t?e.style=(e.style?e.style+";":"")+n[t]:e[t]||"contenteditable"==t||"nodeName"==t||(e[t]=String(n[t]))})),[Pe.node(0,t.state.doc.content.size,e)]}function an(t){if(t.markCursor){let e=document.createElement("img");e.className="ProseMirror-separator",e.setAttribute("mark-placeholder","true"),e.setAttribute("alt",""),t.cursorWrapper={dom:e,deco:Pe.widget(t.state.selection.head,e,{raw:!0,marks:t.markCursor})}}else t.cursorWrapper=null}function ln(t){return!t.someProp("editable",(e=>!1===e(t.state)))}function cn(t){let e=Object.create(null);function n(t){for(let n in t)Object.prototype.hasOwnProperty.call(e,n)||(e[n]=t[n])}return t.someProp("nodeViews",n),t.someProp("markViews",n),e}function hn(t){if(t.spec.state||t.spec.filterTransaction||t.spec.appendTransaction)throw new RangeError("Plugins passed directly to the view must not have a state component")}for(var un={8:"Backspace",9:"Tab",10:"Enter",12:"NumLock",13:"Enter",16:"Shift",17:"Control",18:"Alt",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",44:"PrintScreen",45:"Insert",46:"Delete",59:";",61:"=",91:"Meta",92:"Meta",106:"*",107:"+",108:",",109:"-",110:".",111:"/",144:"NumLock",145:"ScrollLock",160:"Shift",161:"Shift",162:"Control",163:"Control",164:"Alt",165:"Alt",173:"-",186:";",187:"=",188:",",189:"-",190:".",191:"/",192:"`",219:"[",220:"\\",221:"]",222:"'",229:"q"},dn={48:")",49:"!",50:"@",51:"#",52:"$",53:"%",54:"^",55:"&",56:"*",57:"(",59:":",61:"+",173:"_",186:":",187:"+",188:"<",189:"_",190:">",191:"?",192:"~",219:"{",220:"|",221:"}",222:'"',229:"Q"},pn="undefined"!=typeof navigator&&/Chrome\/(\d+)/.exec(navigator.userAgent),fn="undefined"!=typeof navigator&&/Apple Computer/.test(navigator.vendor),gn="undefined"!=typeof navigator&&/Gecko\/\d+/.test(navigator.userAgent),mn="undefined"!=typeof navigator&&/Mac/.test(navigator.platform),yn="undefined"!=typeof navigator&&/MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent),vn=pn&&(mn||+pn[1]<57)||gn&&mn,bn=0;bn<10;bn++)un[48+bn]=un[96+bn]=String(bn);for(bn=1;bn<=24;bn++)un[bn+111]="F"+bn;for(bn=65;bn<=90;bn++)un[bn]=String.fromCharCode(bn+32),dn[bn]=String.fromCharCode(bn);for(var wn in un)dn.hasOwnProperty(wn)||(dn[wn]=un[wn]);const xn="undefined"!=typeof navigator&&/Mac|iP(hone|[oa]d)/.test(navigator.platform);function kn(t){let e,n,r,i,o=t.split(/-(?!$)/),s=o[o.length-1];"Space"==s&&(s=" ");for(let t=0;t<o.length-1;t++){let s=o[t];if(/^(cmd|meta|m)$/i.test(s))i=!0;else if(/^a(lt)?$/i.test(s))e=!0;else if(/^(c|ctrl|control)$/i.test(s))n=!0;else if(/^s(hift)?$/i.test(s))r=!0;else{if(!/^mod$/i.test(s))throw new Error("Unrecognized modifier name: "+s);xn?i=!0:n=!0}}return e&&(s="Alt-"+s),n&&(s="Ctrl-"+s),i&&(s="Meta-"+s),r&&(s="Shift-"+s),s}function Sn(t,e,n){return e.altKey&&(t="Alt-"+t),e.ctrlKey&&(t="Ctrl-"+t),e.metaKey&&(t="Meta-"+t),!1!==n&&e.shiftKey&&(t="Shift-"+t),t}function _n(t){let e=function(t){let e=Object.create(null);for(let n in t)e[kn(n)]=t[n];return e}(t);return function(t,n){let r,i=function(t){var e=!(vn&&(t.ctrlKey||t.altKey||t.metaKey)||(fn||yn)&&t.shiftKey&&t.key&&1==t.key.length)&&t.key||(t.shiftKey?dn:un)[t.keyCode]||t.key||"Unidentified";return"Esc"==e&&(e="Escape"),"Del"==e&&(e="Delete"),"Left"==e&&(e="ArrowLeft"),"Up"==e&&(e="ArrowUp"),"Right"==e&&(e="ArrowRight"),"Down"==e&&(e="ArrowDown"),e}(n),o=1==i.length&&" "!=i,s=e[Sn(i,n,!o)];if(s&&s(t.state,t.dispatch,t))return!0;if(o&&(n.shiftKey||n.altKey||n.metaKey||i.charCodeAt(0)>127)&&(r=un[n.keyCode])&&r!=i){let i=e[Sn(r,n,!0)];if(i&&i(t.state,t.dispatch,t))return!0}else if(o&&n.shiftKey){let r=e[Sn(i,n,!0)];if(r&&r(t.state,t.dispatch,t))return!0}return!1}}const En=(t,e)=>!t.selection.empty&&(e&&e(t.tr.deleteSelection().scrollIntoView()),!0),Cn=(t,e,n)=>{let{$cursor:s}=t.selection;if(!s||(n?!n.endOfTextblock("backward",t):s.parentOffset>0))return!1;let a=An(s);if(!a){let n=s.blockRange(),r=n&&(0,o.k9)(n);return null!=r&&(e&&e(t.tr.lift(n,r).scrollIntoView()),!0)}let l=a.nodeBefore;if(!l.type.spec.isolating&&Fn(t,a,e))return!0;if(0==s.parent.content.size&&(On(l,"end")||r.qv.isSelectable(l))){let n=(0,o.dR)(t.doc,s.before(),s.after(),i.p2.empty);if(n&&n.slice.size<n.to-n.from){if(e){let i=t.tr.step(n);i.setSelection(On(l,"end")?r.Y1.findFrom(i.doc.resolve(i.mapping.map(a.pos,-1)),-1):r.qv.create(i.doc,a.pos-l.nodeSize)),e(i.scrollIntoView())}return!0}}return!(!l.isAtom||a.depth!=s.depth-1)&&(e&&e(t.tr.delete(a.pos-l.nodeSize,a.pos).scrollIntoView()),!0)};function On(t,e,n=!1){for(let r=t;r;r="start"==e?r.firstChild:r.lastChild){if(r.isTextblock)return!0;if(n&&1!=r.childCount)return!1}return!1}const Mn=(t,e,n)=>{let{$head:i,empty:o}=t.selection,s=i;if(!o)return!1;if(i.parent.isTextblock){if(n?!n.endOfTextblock("backward",t):i.parentOffset>0)return!1;s=An(i)}let a=s&&s.nodeBefore;return!(!a||!r.qv.isSelectable(a))&&(e&&e(t.tr.setSelection(r.qv.create(t.doc,s.pos-a.nodeSize)).scrollIntoView()),!0)};function An(t){if(!t.parent.type.spec.isolating)for(let e=t.depth-1;e>=0;e--){if(t.index(e)>0)return t.doc.resolve(t.before(e+1));if(t.node(e).type.spec.isolating)break}return null}const Tn=(t,e,n)=>{let{$cursor:s}=t.selection;if(!s||(n?!n.endOfTextblock("forward",t):s.parentOffset<s.parent.content.size))return!1;let a=Dn(s);if(!a)return!1;let l=a.nodeAfter;if(Fn(t,a,e))return!0;if(0==s.parent.content.size&&(On(l,"start")||r.qv.isSelectable(l))){let n=(0,o.dR)(t.doc,s.before(),s.after(),i.p2.empty);if(n&&n.slice.size<n.to-n.from){if(e){let i=t.tr.step(n);i.setSelection(On(l,"start")?r.Y1.findFrom(i.doc.resolve(i.mapping.map(a.pos)),1):r.qv.create(i.doc,i.mapping.map(a.pos))),e(i.scrollIntoView())}return!0}}return!(!l.isAtom||a.depth!=s.depth-1)&&(e&&e(t.tr.delete(a.pos,a.pos+l.nodeSize).scrollIntoView()),!0)},Nn=(t,e,n)=>{let{$head:i,empty:o}=t.selection,s=i;if(!o)return!1;if(i.parent.isTextblock){if(n?!n.endOfTextblock("forward",t):i.parentOffset<i.parent.content.size)return!1;s=Dn(i)}let a=s&&s.nodeAfter;return!(!a||!r.qv.isSelectable(a))&&(e&&e(t.tr.setSelection(r.qv.create(t.doc,s.pos)).scrollIntoView()),!0)};function Dn(t){if(!t.parent.type.spec.isolating)for(let e=t.depth-1;e>=0;e--){let n=t.node(e);if(t.index(e)+1<n.childCount)return t.doc.resolve(t.after(e+1));if(n.type.spec.isolating)break}return null}const jn=(t,e)=>{let{$head:n,$anchor:r}=t.selection;return!(!n.parent.type.spec.code||!n.sameParent(r))&&(e&&e(t.tr.insertText("\n").scrollIntoView()),!0)};function Rn(t){for(let e=0;e<t.edgeCount;e++){let{type:n}=t.edge(e);if(n.isTextblock&&!n.hasRequiredAttrs())return n}return null}const Pn=(t,e)=>{let{$head:n,$anchor:i}=t.selection;if(!n.parent.type.spec.code||!n.sameParent(i))return!1;let o=n.node(-1),s=n.indexAfter(-1),a=Rn(o.contentMatchAt(s));if(!a||!o.canReplaceWith(s,s,a))return!1;if(e){let i=n.after(),o=t.tr.replaceWith(i,i,a.createAndFill());o.setSelection(r.Y1.near(o.doc.resolve(i),1)),e(o.scrollIntoView())}return!0},zn=(t,e)=>{let n=t.selection,{$from:i,$to:o}=n;if(n instanceof r.C1||i.parent.inlineContent||o.parent.inlineContent)return!1;let s=Rn(o.parent.contentMatchAt(o.indexAfter()));if(!s||!s.isTextblock)return!1;if(e){let n=(!i.parentOffset&&o.index()<o.parent.childCount?i:o).pos,a=t.tr.insert(n,s.createAndFill());a.setSelection(r.Bs.create(a.doc,n+1)),e(a.scrollIntoView())}return!0},In=(t,e)=>{let{$cursor:n}=t.selection;if(!n||n.parent.content.size)return!1;if(n.depth>1&&n.after()!=n.end(-1)){let r=n.before();if((0,o.Ax)(t.doc,r))return e&&e(t.tr.split(r).scrollIntoView()),!0}let r=n.blockRange(),i=r&&(0,o.k9)(r);return null!=i&&(e&&e(t.tr.lift(r,i).scrollIntoView()),!0)},Bn=(t,e)=>{let{$from:n,$to:i}=t.selection;if(t.selection instanceof r.qv&&t.selection.node.isBlock)return!(!n.parentOffset||!(0,o.Ax)(t.doc,n.pos))&&(e&&e(t.tr.split(n.pos).scrollIntoView()),!0);if(!n.parent.isBlock)return!1;if(e){let s=i.parentOffset==i.parent.content.size,a=t.tr;(t.selection instanceof r.Bs||t.selection instanceof r.C1)&&a.deleteSelection();let l=0==n.depth?null:Rn(n.node(-1).contentMatchAt(n.indexAfter(-1))),c=s&&l?[{type:l}]:void 0,h=(0,o.Ax)(a.doc,a.mapping.map(n.pos),1,c);if(c||h||!(0,o.Ax)(a.doc,a.mapping.map(n.pos),1,l?[{type:l}]:void 0)||(l&&(c=[{type:l}]),h=!0),h&&(a.split(a.mapping.map(n.pos),1,c),!s&&!n.parentOffset&&n.parent.type!=l)){let t=a.mapping.map(n.before()),e=a.doc.resolve(t);l&&n.node(-1).canReplaceWith(e.index(),e.index()+1,l)&&a.setNodeMarkup(a.mapping.map(n.before()),l)}e(a.scrollIntoView())}return!0};function Fn(t,e,n){let s,a,l=e.nodeBefore,c=e.nodeAfter;if(l.type.spec.isolating||c.type.spec.isolating)return!1;if(function(t,e,n){let r=e.nodeBefore,i=e.nodeAfter,s=e.index();return!(!(r&&i&&r.type.compatibleContent(i.type))||(!r.content.size&&e.parent.canReplace(s-1,s)?(n&&n(t.tr.delete(e.pos-r.nodeSize,e.pos).scrollIntoView()),0):!e.parent.canReplace(s,s+1)||!i.isTextblock&&!(0,o.Mn)(t.doc,e.pos)||(n&&n(t.tr.clearIncompatible(e.pos,r.type,r.contentMatchAt(r.childCount)).join(e.pos).scrollIntoView()),0)))}(t,e,n))return!0;let h=e.parent.canReplace(e.index(),e.index()+1);if(h&&(s=(a=l.contentMatchAt(l.childCount)).findWrapping(c.type))&&a.matchType(s[0]||c.type).validEnd){if(n){let r=e.pos+c.nodeSize,a=i.HY.empty;for(let t=s.length-1;t>=0;t--)a=i.HY.from(s[t].create(null,a));a=i.HY.from(l.copy(a));let h=t.tr.step(new o.FC(e.pos-1,r,e.pos,r,new i.p2(a,1,0),s.length,!0)),u=r+2*s.length;(0,o.Mn)(h.doc,u)&&h.join(u),n(h.scrollIntoView())}return!0}let u=r.Y1.findFrom(e,1),d=u&&u.$from.blockRange(u.$to),p=d&&(0,o.k9)(d);if(null!=p&&p>=e.depth)return n&&n(t.tr.lift(d,p).scrollIntoView()),!0;if(h&&On(c,"start",!0)&&On(l,"end")){let r=l,s=[];for(;s.push(r),!r.isTextblock;)r=r.lastChild;let a=c,h=1;for(;!a.isTextblock;a=a.firstChild)h++;if(r.canReplace(r.childCount,r.childCount,a.content)){if(n){let r=i.HY.empty;for(let t=s.length-1;t>=0;t--)r=i.HY.from(s[t].copy(r));n(t.tr.step(new o.FC(e.pos-s.length,e.pos+c.nodeSize,e.pos+h,e.pos+c.nodeSize-h,new i.p2(r,s.length,0),0,!0)).scrollIntoView())}return!0}}return!1}function $n(t){return function(e,n){let i=e.selection,o=t<0?i.$from:i.$to,s=o.depth;for(;o.node(s).isInline;){if(!s)return!1;s--}return!!o.node(s).isTextblock&&(n&&n(e.tr.setSelection(r.Bs.create(e.doc,t<0?o.start(s):o.end(s)))),!0)}}const Ln=$n(-1),Hn=$n(1);function Vn(t,e=null){return function(n,r){let{from:i,to:o}=n.selection,s=!1;return n.doc.nodesBetween(i,o,((r,i)=>{if(s)return!1;if(r.isTextblock&&!r.hasMarkup(t,e))if(r.type==t)s=!0;else{let e=n.doc.resolve(i),r=e.index();s=e.parent.canReplaceWith(r,r+1,t)}})),!!s&&(r&&r(n.tr.setBlockType(i,o,t,e).scrollIntoView()),!0)}}function qn(...t){return function(e,n,r){for(let i=0;i<t.length;i++)if(t[i](e,n,r))return!0;return!1}}let Wn=qn(En,Cn,Mn),Un=qn(En,Tn,Nn);const Yn={Enter:qn(jn,zn,In,Bn),"Mod-Enter":Pn,Backspace:Wn,"Mod-Backspace":Wn,"Shift-Backspace":Wn,Delete:Un,"Mod-Delete":Un,"Mod-a":(t,e)=>(e&&e(t.tr.setSelection(new r.C1(t.doc))),!0)},Jn={"Ctrl-h":Yn.Backspace,"Alt-Backspace":Yn["Mod-Backspace"],"Ctrl-d":Yn.Delete,"Ctrl-Alt-Backspace":Yn["Mod-Delete"],"Alt-Delete":Yn["Mod-Delete"],"Alt-d":Yn["Mod-Delete"],"Ctrl-a":Ln,"Ctrl-e":Hn};for(let t in Yn)Jn[t]=Yn[t];"undefined"!=typeof navigator?/Mac|iP(hone|[oa]d)/.test(navigator.platform):!("undefined"==typeof os||!os.platform)&&os.platform();function Xn(t,e=null){return function(n,r){let{$from:s,$to:a}=n.selection,l=s.blockRange(a),c=!1,h=l;if(!l)return!1;if(l.depth>=2&&s.node(l.depth-1).type.compatibleContent(t)&&0==l.startIndex){if(0==s.index(l.depth-1))return!1;let t=n.doc.resolve(l.start-2);h=new i.Ts(t,t,l.depth),l.endIndex<l.parent.childCount&&(l=new i.Ts(s,n.doc.resolve(a.end(l.depth)),l.depth)),c=!0}let u=(0,o.nd)(h,t,e,l);return!!u&&(r&&r(function(t,e,n,r,s){let a=i.HY.empty;for(let t=n.length-1;t>=0;t--)a=i.HY.from(n[t].type.create(n[t].attrs,a));t.step(new o.FC(e.start-(r?2:0),e.end,e.start,e.end,new i.p2(a,0,0),n.length,!0));let l=0;for(let t=0;t<n.length;t++)n[t].type==s&&(l=t+1);let c=n.length-l,h=e.start+n.length-(r?2:0),u=e.parent;for(let n=e.startIndex,r=e.endIndex,i=!0;n<r;n++,i=!1)!i&&(0,o.Ax)(t.doc,h,c)&&(t.split(h,c),h+=2*c),h+=u.child(n).nodeSize;return t}(n.tr,l,u,c,t).scrollIntoView()),!0)}}function Kn(t){return function(e,n){let{$from:r,$to:s}=e.selection,a=r.blockRange(s,(e=>e.childCount>0&&e.firstChild.type==t));return!!a&&(!n||(r.node(a.depth-1).type==t?function(t,e,n,r){let s=t.tr,a=r.end,l=r.$to.end(r.depth);a<l&&(s.step(new o.FC(a-1,l,a,l,new i.p2(i.HY.from(n.create(null,r.parent.copy())),1,0),1,!0)),r=new i.Ts(s.doc.resolve(r.$from.pos),s.doc.resolve(l),r.depth));return e(s.lift(r,(0,o.k9)(r)).scrollIntoView()),!0}(e,n,t,a):function(t,e,n){let r=t.tr,s=n.parent;for(let t=n.end,e=n.endIndex-1,i=n.startIndex;e>i;e--)t-=s.child(e).nodeSize,r.delete(t-1,t+1);let a=r.doc.resolve(n.start),l=a.nodeAfter;if(r.mapping.map(n.end)!=n.start+a.nodeAfter.nodeSize)return!1;let c=0==n.startIndex,h=n.endIndex==s.childCount,u=a.node(-1),d=a.index(-1);if(!u.canReplace(d+(c?0:1),d+1,l.content.append(h?i.HY.empty:i.HY.from(s))))return!1;let p=a.pos,f=p+l.nodeSize;return r.step(new o.FC(p-(c?1:0),f+(h?1:0),p+1,f-1,new i.p2((c?i.HY.empty:i.HY.from(s.copy(i.HY.empty))).append(h?i.HY.empty:i.HY.from(s.copy(i.HY.empty))),c?0:1,h?0:1),c?0:1)),e(r.scrollIntoView()),!0}(e,n,a)))}}function Gn(t){const{state:e,transaction:n}=t;let{selection:r}=n,{doc:i}=n,{storedMarks:o}=n;return{...e,apply:e.apply.bind(e),applyTransaction:e.applyTransaction.bind(e),filterTransaction:e.filterTransaction,plugins:e.plugins,schema:e.schema,reconfigure:e.reconfigure.bind(e),toJSON:e.toJSON.bind(e),get storedMarks(){return o},get selection(){return r},get doc(){return i},get tr(){return r=n.selection,i=n.doc,o=n.storedMarks,n}}}class Zn{constructor(t){this.editor=t.editor,this.rawCommands=this.editor.extensionManager.commands,this.customState=t.state}get hasCustomState(){return!!this.customState}get state(){return this.customState||this.editor.state}get commands(){const{rawCommands:t,editor:e,state:n}=this,{view:r}=e,{tr:i}=n,o=this.buildProps(i);return Object.fromEntries(Object.entries(t).map((([t,e])=>[t,(...t)=>{const n=e(...t)(o);return i.getMeta("preventDispatch")||this.hasCustomState||r.dispatch(i),n}])))}get chain(){return()=>this.createChain()}get can(){return()=>this.createCan()}createChain(t,e=!0){const{rawCommands:n,editor:r,state:i}=this,{view:o}=r,s=[],a=!!t,l=t||i.tr,c={...Object.fromEntries(Object.entries(n).map((([t,n])=>[t,(...t)=>{const r=this.buildProps(l,e),i=n(...t)(r);return s.push(i),c}]))),run:()=>(a||!e||l.getMeta("preventDispatch")||this.hasCustomState||o.dispatch(l),s.every((t=>!0===t)))};return c}createCan(t){const{rawCommands:e,state:n}=this,r=void 0,i=t||n.tr,o=this.buildProps(i,r),s=Object.fromEntries(Object.entries(e).map((([t,e])=>[t,(...t)=>e(...t)({...o,dispatch:r})])));return{...s,chain:()=>this.createChain(i,r)}}buildProps(t,e=!0){const{rawCommands:n,editor:r,state:i}=this,{view:o}=r;i.storedMarks&&t.setStoredMarks(i.storedMarks);const s={tr:t,editor:r,view:o,state:Gn({state:i,transaction:t}),dispatch:e?()=>{}:void 0,chain:()=>this.createChain(t),can:()=>this.createCan(t),get commands(){return Object.fromEntries(Object.entries(n).map((([t,e])=>[t,(...t)=>e(...t)(s)])))}};return s}}function Qn(t,e,n){if(void 0===t.config[e]&&t.parent)return Qn(t.parent,e,n);if("function"==typeof t.config[e]){return t.config[e].bind({...n,parent:t.parent?Qn(t.parent,e,n):null})}return t.config[e]}function tr(t){return{baseExtensions:t.filter((t=>"extension"===t.type)),nodeExtensions:t.filter((t=>"node"===t.type)),markExtensions:t.filter((t=>"mark"===t.type))}}function er(t){const e=[],{nodeExtensions:n,markExtensions:r}=tr(t),i=[...n,...r],o={default:null,rendered:!0,renderHTML:null,parseHTML:null,keepOnSplit:!0,isRequired:!1};return t.forEach((t=>{const n=Qn(t,"addGlobalAttributes",{name:t.name,options:t.options,storage:t.storage});if(!n)return;n().forEach((t=>{t.types.forEach((n=>{Object.entries(t.attributes).forEach((([t,r])=>{e.push({type:n,name:t,attribute:{...o,...r}})}))}))}))})),i.forEach((t=>{const n={name:t.name,options:t.options,storage:t.storage},r=Qn(t,"addAttributes",n);if(!r)return;const i=r();Object.entries(i).forEach((([n,r])=>{const i={...o,...r};r.isRequired&&void 0===r.default&&delete i.default,e.push({type:t.name,name:n,attribute:i})}))})),e}function nr(t,e){if("string"==typeof t){if(!e.nodes[t])throw Error(`There is no node type named '${t}'. Maybe you forgot to add the extension?`);return e.nodes[t]}return t}function rr(...t){return t.filter((t=>!!t)).reduce(((t,e)=>{const n={...t};return Object.entries(e).forEach((([t,e])=>{n[t]?n[t]="class"===t?[n[t],e].join(" "):"style"===t?[n[t],e].join("; "):e:n[t]=e})),n}),{})}function ir(t,e){return e.filter((t=>t.attribute.rendered)).map((e=>e.attribute.renderHTML?e.attribute.renderHTML(t.attrs)||{}:{[e.name]:t.attrs[e.name]})).reduce(((t,e)=>rr(t,e)),{})}function or(t){return"function"==typeof t}function sr(t,e,...n){return or(t)?e?t.bind(e)(...n):t(...n):t}function ar(t,e){return t.style?t:{...t,getAttrs:n=>{const r=t.getAttrs?t.getAttrs(n):t.attrs;if(!1===r)return!1;const i=e.reduce(((t,e)=>{const r=e.attribute.parseHTML?e.attribute.parseHTML(n):function(t){return"string"!=typeof t?t:t.match(/^[+-]?(?:\d*\.)?\d+$/)?Number(t):"true"===t||"false"!==t&&t}(n.getAttribute(e.name));return null==r?t:{...t,[e.name]:r}}),{});return{...r,...i}}}}function lr(t){return Object.fromEntries(Object.entries(t).filter((([t,e])=>("attrs"!==t||!function(t={}){return 0===Object.keys(t).length&&t.constructor===Object}(e))&&null!=e)))}function cr(t){var e;const n=er(t),{nodeExtensions:r,markExtensions:o}=tr(t),s=null===(e=r.find((t=>Qn(t,"topNode"))))||void 0===e?void 0:e.name,a=Object.fromEntries(r.map((e=>{const r=n.filter((t=>t.type===e.name)),i={name:e.name,options:e.options,storage:e.storage},o=lr({...t.reduce(((t,n)=>{const r=Qn(n,"extendNodeSchema",i);return{...t,...r?r(e):{}}}),{}),content:sr(Qn(e,"content",i)),marks:sr(Qn(e,"marks",i)),group:sr(Qn(e,"group",i)),inline:sr(Qn(e,"inline",i)),atom:sr(Qn(e,"atom",i)),selectable:sr(Qn(e,"selectable",i)),draggable:sr(Qn(e,"draggable",i)),code:sr(Qn(e,"code",i)),defining:sr(Qn(e,"defining",i)),isolating:sr(Qn(e,"isolating",i)),attrs:Object.fromEntries(r.map((t=>{var e;return[t.name,{default:null===(e=null==t?void 0:t.attribute)||void 0===e?void 0:e.default}]})))}),s=sr(Qn(e,"parseHTML",i));s&&(o.parseDOM=s.map((t=>ar(t,r))));const a=Qn(e,"renderHTML",i);a&&(o.toDOM=t=>a({node:t,HTMLAttributes:ir(t,r)}));const l=Qn(e,"renderText",i);return l&&(o.toText=l),[e.name,o]}))),l=Object.fromEntries(o.map((e=>{const r=n.filter((t=>t.type===e.name)),i={name:e.name,options:e.options,storage:e.storage},o=lr({...t.reduce(((t,n)=>{const r=Qn(n,"extendMarkSchema",i);return{...t,...r?r(e):{}}}),{}),inclusive:sr(Qn(e,"inclusive",i)),excludes:sr(Qn(e,"excludes",i)),group:sr(Qn(e,"group",i)),spanning:sr(Qn(e,"spanning",i)),code:sr(Qn(e,"code",i)),attrs:Object.fromEntries(r.map((t=>{var e;return[t.name,{default:null===(e=null==t?void 0:t.attribute)||void 0===e?void 0:e.default}]})))}),s=sr(Qn(e,"parseHTML",i));s&&(o.parseDOM=s.map((t=>ar(t,r))));const a=Qn(e,"renderHTML",i);return a&&(o.toDOM=t=>a({mark:t,HTMLAttributes:ir(t,r)})),[e.name,o]})));return new i.V_({topNode:s,nodes:a,marks:l})}function hr(t,e){return e.nodes[t]||e.marks[t]||null}function ur(t,e){return Array.isArray(e)?e.some((e=>("string"==typeof e?e:e.name)===t.name)):e}function dr(t){return"[object RegExp]"===Object.prototype.toString.call(t)}class pr{constructor(t){this.find=t.find,this.handler=t.handler}}function fr(t){var e;const{editor:n,from:r,to:i,text:o,rules:s,plugin:a}=t,{view:l}=n;if(l.composing)return!1;const c=l.state.doc.resolve(r);if(c.parent.type.spec.code||(null===(e=c.nodeBefore||c.nodeAfter)||void 0===e?void 0:e.marks.find((t=>t.type.spec.code))))return!1;let h=!1;const u=((t,e=500)=>{let n="";return t.parent.nodesBetween(Math.max(0,t.parentOffset-e),t.parentOffset,((e,r,i,o)=>{var s,a,l;n+=(null===(a=(s=e.type.spec).toText)||void 0===a?void 0:a.call(s,{node:e,pos:r,parent:i,index:o}))||(null===(l=t.nodeBefore)||void 0===l?void 0:l.text)||"%leaf%"})),n})(c)+o;return s.forEach((t=>{if(h)return;const e=((t,e)=>{if(dr(e))return e.exec(t);const n=e(t);if(!n)return null;const r=[];return r.push(n.text),r.index=n.index,r.input=t,r.data=n.data,n.replaceWith&&(n.text.includes(n.replaceWith)||console.warn('[tiptap warn]: "inputRuleMatch.replaceWith" must be part of "inputRuleMatch.text".'),r.push(n.replaceWith)),r})(u,t.find);if(!e)return;const s=l.state.tr,c=Gn({state:l.state,transaction:s}),d={from:r-(e[0].length-o.length),to:i},{commands:p,chain:f,can:g}=new Zn({editor:n,state:c});null!==t.handler({state:c,range:d,match:e,commands:p,chain:f,can:g})&&s.steps.length&&(s.setMeta(a,{transform:s,from:r,to:i,text:o}),l.dispatch(s),h=!0)})),h}function gr(t){const{editor:e,rules:n}=t,i=new r.Sy({state:{init:()=>null,apply(t,e){const n=t.getMeta(i);return n||(t.selectionSet||t.docChanged?null:e)}},props:{handleTextInput:(t,r,o,s)=>fr({editor:e,from:r,to:o,text:s,rules:n,plugin:i}),handleDOMEvents:{compositionend:t=>(setTimeout((()=>{const{$cursor:r}=t.state.selection;r&&fr({editor:e,from:r.pos,to:r.pos,text:"",rules:n,plugin:i})})),!1)},handleKeyDown(t,r){if("Enter"!==r.key)return!1;const{$cursor:o}=t.state.selection;return!!o&&fr({editor:e,from:o.pos,to:o.pos,text:"\n",rules:n,plugin:i})}},isInputRules:!0});return i}class mr{constructor(t){this.find=t.find,this.handler=t.handler}}function yr(t){const{editor:e,state:n,from:r,to:i,rule:o}=t,{commands:s,chain:a,can:l}=new Zn({editor:e,state:n}),c=[];n.doc.nodesBetween(r,i,((t,e)=>{if(!t.isTextblock||t.type.spec.code)return;const h=Math.max(r,e),u=Math.min(i,e+t.content.size);((t,e)=>{if(dr(e))return[...t.matchAll(e)];const n=e(t);return n?n.map((e=>{const n=[];return n.push(e.text),n.index=e.index,n.input=t,n.data=e.data,e.replaceWith&&(e.text.includes(e.replaceWith)||console.warn('[tiptap warn]: "pasteRuleMatch.replaceWith" must be part of "pasteRuleMatch.text".'),n.push(e.replaceWith)),n})):[]})(t.textBetween(h-e,u-e,void 0,"￼"),o.find).forEach((t=>{if(void 0===t.index)return;const e=h+t.index+1,r=e+t[0].length,i={from:n.tr.mapping.map(e),to:n.tr.mapping.map(r)},u=o.handler({state:n,range:i,match:t,commands:s,chain:a,can:l});c.push(u)}))}));return c.every((t=>null!==t))}function vr(t){const{editor:e,rules:n}=t;let i=null,o=!1,s=!1;return n.map((t=>new r.Sy({view(t){const e=e=>{var n;i=(null===(n=t.dom.parentElement)||void 0===n?void 0:n.contains(e.target))?t.dom.parentElement:null};return window.addEventListener("dragstart",e),{destroy(){window.removeEventListener("dragstart",e)}}},props:{handleDOMEvents:{drop:t=>(s=i===t.dom.parentElement,!1),paste:(t,e)=>{var n;const r=null===(n=e.clipboardData)||void 0===n?void 0:n.getData("text/html");return o=!!(null==r?void 0:r.includes("data-pm-slice")),!1}}},appendTransaction:(n,r,i)=>{const a=n[0],l="paste"===a.getMeta("uiEvent")&&!o,c="drop"===a.getMeta("uiEvent")&&!s;if(!l&&!c)return;const h=r.doc.content.findDiffStart(i.doc.content),u=r.doc.content.findDiffEnd(i.doc.content);if("number"!=typeof h||!u||h===u.b)return;const d=i.tr,p=Gn({state:i,transaction:d});return yr({editor:e,state:p,from:Math.max(h-1,0),to:u.b,rule:t})&&d.steps.length?d:void 0}})))}class br{constructor(t,e){this.splittableMarks=[],this.editor=e,this.extensions=br.resolve(t),this.schema=cr(this.extensions),this.extensions.forEach((t=>{var e;this.editor.extensionStorage[t.name]=t.storage;const n={name:t.name,options:t.options,storage:t.storage,editor:this.editor,type:hr(t.name,this.schema)};if("mark"===t.type){(null===(e=sr(Qn(t,"keepOnSplit",n)))||void 0===e||e)&&this.splittableMarks.push(t.name)}const r=Qn(t,"onBeforeCreate",n);r&&this.editor.on("beforeCreate",r);const i=Qn(t,"onCreate",n);i&&this.editor.on("create",i);const o=Qn(t,"onUpdate",n);o&&this.editor.on("update",o);const s=Qn(t,"onSelectionUpdate",n);s&&this.editor.on("selectionUpdate",s);const a=Qn(t,"onTransaction",n);a&&this.editor.on("transaction",a);const l=Qn(t,"onFocus",n);l&&this.editor.on("focus",l);const c=Qn(t,"onBlur",n);c&&this.editor.on("blur",c);const h=Qn(t,"onDestroy",n);h&&this.editor.on("destroy",h)}))}static resolve(t){const e=br.sort(br.flatten(t)),n=function(t){const e=t.filter(((e,n)=>t.indexOf(e)!==n));return[...new Set(e)]}(e.map((t=>t.name)));return n.length&&console.warn(`[tiptap warn]: Duplicate extension names found: [${n.map((t=>`'${t}'`)).join(", ")}]. This can lead to issues.`),e}static flatten(t){return t.map((t=>{const e=Qn(t,"addExtensions",{name:t.name,options:t.options,storage:t.storage});return e?[t,...this.flatten(e())]:t})).flat(10)}static sort(t){return t.sort(((t,e)=>{const n=Qn(t,"priority")||100,r=Qn(e,"priority")||100;return n>r?-1:n<r?1:0}))}get commands(){return this.extensions.reduce(((t,e)=>{const n=Qn(e,"addCommands",{name:e.name,options:e.options,storage:e.storage,editor:this.editor,type:hr(e.name,this.schema)});return n?{...t,...n()}:t}),{})}get plugins(){const{editor:t}=this,e=br.sort([...this.extensions].reverse()),n=[],i=[],o=e.map((e=>{const o={name:e.name,options:e.options,storage:e.storage,editor:t,type:hr(e.name,this.schema)},s=[],a=Qn(e,"addKeyboardShortcuts",o);if(a){const e=function(t){return new r.Sy({props:{handleKeyDown:_n(t)}})}(Object.fromEntries(Object.entries(a()).map((([e,n])=>[e,()=>n({editor:t})]))));s.push(e)}const l=Qn(e,"addInputRules",o);ur(e,t.options.enableInputRules)&&l&&n.push(...l());const c=Qn(e,"addPasteRules",o);ur(e,t.options.enablePasteRules)&&c&&i.push(...c());const h=Qn(e,"addProseMirrorPlugins",o);if(h){const t=h();s.push(...t)}return s})).flat();return[gr({editor:t,rules:n}),...vr({editor:t,rules:i}),...o]}get attributes(){return er(this.extensions)}get nodeViews(){const{editor:t}=this,{nodeExtensions:e}=tr(this.extensions);return Object.fromEntries(e.filter((t=>!!Qn(t,"addNodeView"))).map((e=>{const n=this.attributes.filter((t=>t.type===e.name)),r={name:e.name,options:e.options,storage:e.storage,editor:t,type:nr(e.name,this.schema)},i=Qn(e,"addNodeView",r);if(!i)return[];return[e.name,(r,o,s,a)=>{const l=ir(r,n);return i()({editor:t,node:r,getPos:s,decorations:a,HTMLAttributes:l,extension:e})}]})))}}function wr(t){return"Object"===function(t){return Object.prototype.toString.call(t).slice(8,-1)}(t)&&(t.constructor===Object&&Object.getPrototypeOf(t)===Object.prototype)}function xr(t,e){const n={...t};return wr(t)&&wr(e)&&Object.keys(e).forEach((r=>{wr(e[r])?r in t?n[r]=xr(t[r],e[r]):Object.assign(n,{[r]:e[r]}):Object.assign(n,{[r]:e[r]})})),n}class kr{constructor(t={}){this.type="extension",this.name="extension",this.parent=null,this.child=null,this.config={name:this.name,defaultOptions:{}},this.config={...this.config,...t},this.name=this.config.name,t.defaultOptions&&console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${this.name}".`),this.options=this.config.defaultOptions,this.config.addOptions&&(this.options=sr(Qn(this,"addOptions",{name:this.name}))),this.storage=sr(Qn(this,"addStorage",{name:this.name,options:this.options}))||{}}static create(t={}){return new kr(t)}configure(t={}){const e=this.extend();return e.options=xr(this.options,t),e.storage=sr(Qn(e,"addStorage",{name:e.name,options:e.options})),e}extend(t={}){const e=new kr(t);return e.parent=this,this.child=e,e.name=t.name?t.name:e.parent.name,t.defaultOptions&&console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${e.name}".`),e.options=sr(Qn(e,"addOptions",{name:e.name})),e.storage=sr(Qn(e,"addStorage",{name:e.name,options:e.options})),e}}function Sr(t,e,n){const{from:r,to:i}=e,{blockSeparator:o="\n\n",textSerializers:s={}}=n||{};let a="",l=!0;return t.nodesBetween(r,i,((t,n,c,h)=>{var u;const d=null==s?void 0:s[t.type.name];d?(t.isBlock&&!l&&(a+=o,l=!0),c&&(a+=d({node:t,pos:n,parent:c,index:h,range:e}))):t.isText?(a+=null===(u=null==t?void 0:t.text)||void 0===u?void 0:u.slice(Math.max(r,n)-n,i-n),l=!1):t.isBlock&&!l&&(a+=o,l=!0)})),a}function _r(t){return Object.fromEntries(Object.entries(t.nodes).filter((([,t])=>t.spec.toText)).map((([t,e])=>[t,e.spec.toText])))}const Er=kr.create({name:"clipboardTextSerializer",addProseMirrorPlugins(){return[new r.Sy({key:new r.H$("clipboardTextSerializer"),props:{clipboardTextSerializer:()=>{const{editor:t}=this,{state:e,schema:n}=t,{doc:r,selection:i}=e,{ranges:o}=i,s=Math.min(...o.map((t=>t.$from.pos))),a=Math.max(...o.map((t=>t.$to.pos)));return Sr(r,{from:s,to:a},{textSerializers:_r(n)})}}})]}});function Cr(t,e,n={strict:!0}){const r=Object.keys(e);return!r.length||r.every((r=>n.strict?e[r]===t[r]:dr(e[r])?e[r].test(t[r]):e[r]===t[r]))}function Or(t,e,n={}){return t.find((t=>t.type===e&&Cr(t.attrs,n)))}function Mr(t,e,n={}){return!!Or(t,e,n)}function Ar(t,e,n={}){if(!t||!e)return;let r=t.parent.childAfter(t.parentOffset);if(t.parentOffset===r.offset&&0!==r.offset&&(r=t.parent.childBefore(t.parentOffset)),!r.node)return;const i=Or([...r.node.marks],e,n);if(!i)return;let o=r.index,s=t.start()+r.offset,a=o+1,l=s+r.node.nodeSize;for(Or([...r.node.marks],e,n);o>0&&i.isInSet(t.parent.child(o-1).marks);)o-=1,s-=t.parent.child(o).nodeSize;for(;a<t.parent.childCount&&Mr([...t.parent.child(a).marks],e,n);)l+=t.parent.child(a).nodeSize,a+=1;return{from:s,to:l}}function Tr(t,e){if("string"==typeof t){if(!e.marks[t])throw Error(`There is no mark type named '${t}'. Maybe you forgot to add the extension?`);return e.marks[t]}return t}function Nr(t){return t&&"object"==typeof t&&!Array.isArray(t)&&!function(t){var e;return"class"===(null===(e=t.constructor)||void 0===e?void 0:e.toString().substring(0,5))}(t)}function Dr(t=0,e=0,n=0){return Math.min(Math.max(t,e),n)}function jr(t,e=null){if(!e)return null;const n=r.Y1.atStart(t),i=r.Y1.atEnd(t);if("start"===e||!0===e)return n;if("end"===e)return i;const o=n.from,s=i.to;return"all"===e?r.Bs.create(t,Dr(0,o,s),Dr(t.content.size,o,s)):r.Bs.create(t,Dr(e,o,s),Dr(e,o,s))}function Rr(){return["iPad Simulator","iPhone Simulator","iPod Simulator","iPad","iPhone","iPod"].includes(navigator.platform)||navigator.userAgent.includes("Mac")&&"ontouchend"in document}function Pr(t){const e=`<body>${t}</body>`;return(new window.DOMParser).parseFromString(e,"text/html").body}function zr(t,e,n){if(n={slice:!0,parseOptions:{},...n},"object"==typeof t&&null!==t)try{return Array.isArray(t)?i.HY.fromArray(t.map((t=>e.nodeFromJSON(t)))):e.nodeFromJSON(t)}catch(r){return console.warn("[tiptap warn]: Invalid content.","Passed value:",t,"Error:",r),zr("",e,n)}if("string"==typeof t){const r=i.aw.fromSchema(e);return n.slice?r.parseSlice(Pr(t),n.parseOptions).content:r.parse(Pr(t),n.parseOptions)}return zr("",e,n)}function Ir(){return"undefined"!=typeof navigator&&/Mac/.test(navigator.platform)}function Br(t,e,n={}){const{from:r,to:i,empty:o}=t.selection,s=e?nr(e,t.schema):null,a=[];t.doc.nodesBetween(r,i,((t,e)=>{if(t.isText)return;const n=Math.max(r,e),o=Math.min(i,e+t.nodeSize);a.push({node:t,from:n,to:o})}));const l=i-r,c=a.filter((t=>!s||s.name===t.node.type.name)).filter((t=>Cr(t.node.attrs,n,{strict:!1})));if(o)return!!c.length;return c.reduce(((t,e)=>t+e.to-e.from),0)>=l}function Fr(t,e){return e.nodes[t]?"node":e.marks[t]?"mark":null}function $r(t,e){const n="string"==typeof e?[e]:e;return Object.keys(t).reduce(((e,r)=>(n.includes(r)||(e[r]=t[r]),e)),{})}function Lr(t,e,n={}){return zr(t,e,{slice:!1,parseOptions:n})}function Hr(t,e){const n=Tr(e,t.schema),{from:r,to:i,empty:o}=t.selection,s=[];o?(t.storedMarks&&s.push(...t.storedMarks),s.push(...t.selection.$head.marks())):t.doc.nodesBetween(r,i,(t=>{s.push(...t.marks)}));const a=s.find((t=>t.type.name===n.name));return a?{...a.attrs}:{}}function Vr(t,e,n){return Object.fromEntries(Object.entries(n).filter((([n])=>{const r=t.find((t=>t.type===e&&t.name===n));return!!r&&r.attribute.keepOnSplit})))}function qr(t,e){const n=t.storedMarks||t.selection.$to.parentOffset&&t.selection.$from.marks();if(n){const r=n.filter((t=>null==e?void 0:e.includes(t.type.name)));t.tr.ensureMarks(r)}}function Wr(t){return e=>function(t,e){for(let n=t.depth;n>0;n-=1){const r=t.node(n);if(e(r))return{pos:n>0?t.before(n):0,start:t.start(n),depth:n,node:r}}}(e.$from,t)}function Ur(t,e){const{nodeExtensions:n}=tr(e),r=n.find((e=>e.name===t));if(!r)return!1;const i=sr(Qn(r,"group",{name:r.name,options:r.options,storage:r.storage}));return"string"==typeof i&&i.split(" ").includes("list")}const Yr=(t,e)=>{const n=Wr((t=>t.type===e))(t.selection);if(!n)return!0;const r=t.doc.resolve(Math.max(0,n.pos-1)).before(n.depth);if(void 0===r)return!0;const i=t.doc.nodeAt(r);return n.node.type!==(null==i?void 0:i.type)||!(0,o.Mn)(t.doc,n.pos)||(t.join(n.pos),!0)},Jr=(t,e)=>{const n=Wr((t=>t.type===e))(t.selection);if(!n)return!0;const r=t.doc.resolve(n.start).after(n.depth);if(void 0===r)return!0;const i=t.doc.nodeAt(r);return n.node.type!==(null==i?void 0:i.type)||!(0,o.Mn)(t.doc,r)||(t.join(r),!0)};function Xr(t,e,n={}){const{empty:r,ranges:i}=t.selection,o=e?Tr(e,t.schema):null;if(r)return!!(t.storedMarks||t.selection.$from.marks()).filter((t=>!o||o.name===t.type.name)).find((t=>Cr(t.attrs,n,{strict:!1})));let s=0;const a=[];if(i.forEach((({$from:e,$to:n})=>{const r=e.pos,i=n.pos;t.doc.nodesBetween(r,i,((t,e)=>{if(!t.isText&&!t.marks.length)return;const n=Math.max(r,e),o=Math.min(i,e+t.nodeSize);s+=o-n,a.push(...t.marks.map((t=>({mark:t,from:n,to:o}))))}))})),0===s)return!1;const l=a.filter((t=>!o||o.name===t.mark.type.name)).filter((t=>Cr(t.mark.attrs,n,{strict:!1}))).reduce(((t,e)=>t+e.to-e.from),0),c=a.filter((t=>!o||t.mark.type!==o&&t.mark.type.excludes(o))).reduce(((t,e)=>t+e.to-e.from),0);return(l>0?l+c:l)>=s}var Kr=Object.freeze({__proto__:null,blur:()=>({editor:t,view:e})=>(requestAnimationFrame((()=>{var n;t.isDestroyed||(e.dom.blur(),null===(n=null===window||void 0===window?void 0:window.getSelection())||void 0===n||n.removeAllRanges())})),!0),clearContent:(t=!1)=>({commands:e})=>e.setContent("",t),clearNodes:()=>({state:t,tr:e,dispatch:n})=>{const{selection:r}=e,{ranges:i}=r;return!n||(i.forEach((({$from:n,$to:r})=>{t.doc.nodesBetween(n.pos,r.pos,((t,n)=>{if(t.type.isText)return;const{doc:r,mapping:i}=e,s=r.resolve(i.map(n)),a=r.resolve(i.map(n+t.nodeSize)),l=s.blockRange(a);if(!l)return;const c=(0,o.k9)(l);if(t.type.isTextblock){const{defaultType:t}=s.parent.contentMatchAt(s.index());e.setNodeMarkup(l.start,t)}(c||0===c)&&e.lift(l,c)}))})),!0)},command:t=>e=>t(e),createParagraphNear:()=>({state:t,dispatch:e})=>zn(t,e),deleteNode:t=>({tr:e,state:n,dispatch:r})=>{const i=nr(t,n.schema),o=e.selection.$anchor;for(let t=o.depth;t>0;t-=1){if(o.node(t).type===i){if(r){const n=o.before(t),r=o.after(t);e.delete(n,r).scrollIntoView()}return!0}}return!1},deleteRange:t=>({tr:e,dispatch:n})=>{const{from:r,to:i}=t;return n&&e.delete(r,i),!0},deleteSelection:()=>({state:t,dispatch:e})=>En(t,e),enter:()=>({commands:t})=>t.keyboardShortcut("Enter"),exitCode:()=>({state:t,dispatch:e})=>Pn(t,e),extendMarkRange:(t,e={})=>({tr:n,state:i,dispatch:o})=>{const s=Tr(t,i.schema),{doc:a,selection:l}=n,{$from:c,from:h,to:u}=l;if(o){const t=Ar(c,s,e);if(t&&t.from<=h&&t.to>=u){const e=r.Bs.create(a,t.from,t.to);n.setSelection(e)}}return!0},first:t=>e=>{const n="function"==typeof t?t(e):t;for(let t=0;t<n.length;t+=1)if(n[t](e))return!0;return!1},focus:(t=null,e={})=>({editor:n,view:i,tr:o,dispatch:s})=>{e={scrollIntoView:!0,...e};const a=()=>{Rr()&&i.dom.focus(),requestAnimationFrame((()=>{n.isDestroyed||(i.focus(),(null==e?void 0:e.scrollIntoView)&&n.commands.scrollIntoView())}))};if(i.hasFocus()&&null===t||!1===t)return!0;if(s&&null===t&&!(Nr(l=n.state.selection)&&l instanceof r.Bs))return a(),!0;var l;const c=jr(o.doc,t)||n.state.selection,h=n.state.selection.eq(c);return s&&(h||o.setSelection(c),h&&o.storedMarks&&o.setStoredMarks(o.storedMarks),a()),!0},forEach:(t,e)=>n=>t.every(((t,r)=>e(t,{...n,index:r}))),insertContent:(t,e)=>({tr:n,commands:r})=>r.insertContentAt({from:n.selection.from,to:n.selection.to},t,e),insertContentAt:(t,e,n)=>({tr:i,dispatch:s,editor:a})=>{if(s){n={parseOptions:{},updateSelection:!0,...n};const s=zr(e,a.schema,{parseOptions:{preserveWhitespace:"full",...n.parseOptions}});if("<>"===s.toString())return!0;let{from:l,to:c}="number"==typeof t?{from:t,to:t}:t,h=!0,u=!0;if((s.toString().startsWith("<")?s:[s]).forEach((t=>{t.check(),h=!!h&&(t.isText&&0===t.marks.length),u=!!u&&t.isBlock})),l===c&&u){const{parent:t}=i.doc.resolve(l);t.isTextblock&&!t.type.spec.code&&!t.childCount&&(l-=1,c+=1)}h?i.insertText(e,l,c):i.replaceWith(l,c,s),n.updateSelection&&function(t,e,n){const i=t.steps.length-1;if(i<e)return;const s=t.steps[i];if(!(s instanceof o.Pu||s instanceof o.FC))return;const a=t.mapping.maps[i];let l=0;a.forEach(((t,e,n,r)=>{0===l&&(l=r)})),t.setSelection(r.Y1.near(t.doc.resolve(l),n))}(i,i.steps.length-1,-1)}return!0},joinBackward:()=>({state:t,dispatch:e})=>Cn(t,e),joinForward:()=>({state:t,dispatch:e})=>Tn(t,e),keyboardShortcut:t=>({editor:e,view:n,tr:r,dispatch:i})=>{const o=function(t){const e=t.split(/-(?!$)/);let n,r,i,o,s=e[e.length-1];"Space"===s&&(s=" ");for(let t=0;t<e.length-1;t+=1){const s=e[t];if(/^(cmd|meta|m)$/i.test(s))o=!0;else if(/^a(lt)?$/i.test(s))n=!0;else if(/^(c|ctrl|control)$/i.test(s))r=!0;else if(/^s(hift)?$/i.test(s))i=!0;else{if(!/^mod$/i.test(s))throw new Error(`Unrecognized modifier name: ${s}`);Rr()||Ir()?o=!0:r=!0}}return n&&(s=`Alt-${s}`),r&&(s=`Ctrl-${s}`),o&&(s=`Meta-${s}`),i&&(s=`Shift-${s}`),s}(t).split(/-(?!$)/),s=o.find((t=>!["Alt","Ctrl","Meta","Shift"].includes(t))),a=new KeyboardEvent("keydown",{key:"Space"===s?" ":s,altKey:o.includes("Alt"),ctrlKey:o.includes("Ctrl"),metaKey:o.includes("Meta"),shiftKey:o.includes("Shift"),bubbles:!0,cancelable:!0}),l=e.captureTransaction((()=>{n.someProp("handleKeyDown",(t=>t(n,a)))}));return null==l||l.steps.forEach((t=>{const e=t.map(r.mapping);e&&i&&r.maybeStep(e)})),!0},lift:(t,e={})=>({state:n,dispatch:r})=>!!Br(n,nr(t,n.schema),e)&&((t,e)=>{let{$from:n,$to:r}=t.selection,i=n.blockRange(r),s=i&&(0,o.k9)(i);return null!=s&&(e&&e(t.tr.lift(i,s).scrollIntoView()),!0)})(n,r),liftEmptyBlock:()=>({state:t,dispatch:e})=>In(t,e),liftListItem:t=>({state:e,dispatch:n})=>Kn(nr(t,e.schema))(e,n),newlineInCode:()=>({state:t,dispatch:e})=>jn(t,e),resetAttributes:(t,e)=>({tr:n,state:r,dispatch:i})=>{let o=null,s=null;const a=Fr("string"==typeof t?t:t.name,r.schema);return!!a&&("node"===a&&(o=nr(t,r.schema)),"mark"===a&&(s=Tr(t,r.schema)),i&&n.selection.ranges.forEach((t=>{r.doc.nodesBetween(t.$from.pos,t.$to.pos,((t,r)=>{o&&o===t.type&&n.setNodeMarkup(r,void 0,$r(t.attrs,e)),s&&t.marks.length&&t.marks.forEach((i=>{s===i.type&&n.addMark(r,r+t.nodeSize,s.create($r(i.attrs,e)))}))}))})),!0)},scrollIntoView:()=>({tr:t,dispatch:e})=>(e&&t.scrollIntoView(),!0),selectAll:()=>({tr:t,commands:e})=>e.setTextSelection({from:0,to:t.doc.content.size}),selectNodeBackward:()=>({state:t,dispatch:e})=>Mn(t,e),selectNodeForward:()=>({state:t,dispatch:e})=>Nn(t,e),selectParentNode:()=>({state:t,dispatch:e})=>((t,e)=>{let n,{$from:i,to:o}=t.selection,s=i.sharedDepth(o);return 0!=s&&(n=i.before(s),e&&e(t.tr.setSelection(r.qv.create(t.doc,n))),!0)})(t,e),selectTextblockEnd:()=>({state:t,dispatch:e})=>Hn(t,e),selectTextblockStart:()=>({state:t,dispatch:e})=>Ln(t,e),setContent:(t,e=!1,n={})=>({tr:r,editor:i,dispatch:o})=>{const{doc:s}=r,a=Lr(t,i.schema,n);return o&&r.replaceWith(0,s.content.size,a).setMeta("preventUpdate",!e),!0},setMark:(t,e={})=>({tr:n,state:r,dispatch:i})=>{const{selection:o}=n,{empty:s,ranges:a}=o,l=Tr(t,r.schema);if(i)if(s){const t=Hr(r,l);n.addStoredMark(l.create({...t,...e}))}else a.forEach((t=>{const i=t.$from.pos,o=t.$to.pos;r.doc.nodesBetween(i,o,((t,r)=>{const s=Math.max(r,i),a=Math.min(r+t.nodeSize,o);t.marks.find((t=>t.type===l))?t.marks.forEach((t=>{l===t.type&&n.addMark(s,a,l.create({...t.attrs,...e}))})):n.addMark(s,a,l.create(e))}))}));return!0},setMeta:(t,e)=>({tr:n})=>(n.setMeta(t,e),!0),setNode:(t,e={})=>({state:n,dispatch:r,chain:i})=>{const o=nr(t,n.schema);return o.isTextblock?i().command((({commands:t})=>!!Vn(o,e)(n)||t.clearNodes())).command((({state:t})=>Vn(o,e)(t,r))).run():(console.warn('[tiptap warn]: Currently "setNode()" only supports text block nodes.'),!1)},setNodeSelection:t=>({tr:e,dispatch:n})=>{if(n){const{doc:n}=e,i=r.Y1.atStart(n).from,o=r.Y1.atEnd(n).to,s=Dr(t,i,o),a=r.qv.create(n,s);e.setSelection(a)}return!0},setTextSelection:t=>({tr:e,dispatch:n})=>{if(n){const{doc:n}=e,{from:i,to:o}="number"==typeof t?{from:t,to:t}:t,s=r.Bs.atStart(n).from,a=r.Bs.atEnd(n).to,l=Dr(i,s,a),c=Dr(o,s,a),h=r.Bs.create(n,l,c);e.setSelection(h)}return!0},sinkListItem:t=>({state:e,dispatch:n})=>{const r=nr(t,e.schema);return(s=r,function(t,e){let{$from:n,$to:r}=t.selection,a=n.blockRange(r,(t=>t.childCount>0&&t.firstChild.type==s));if(!a)return!1;let l=a.startIndex;if(0==l)return!1;let c=a.parent,h=c.child(l-1);if(h.type!=s)return!1;if(e){let n=h.lastChild&&h.lastChild.type==c.type,r=i.HY.from(n?s.create():null),l=new i.p2(i.HY.from(s.create(null,i.HY.from(c.type.create(null,r)))),n?3:1,0),u=a.start,d=a.end;e(t.tr.step(new o.FC(u-(n?3:1),d,u,d,l,1,!0)).scrollIntoView())}return!0})(e,n);var s},splitBlock:({keepMarks:t=!0}={})=>({tr:e,state:n,dispatch:i,editor:s})=>{const{selection:a,doc:l}=e,{$from:c,$to:h}=a,u=Vr(s.extensionManager.attributes,c.node().type.name,c.node().attrs);if(a instanceof r.qv&&a.node.isBlock)return!(!c.parentOffset||!(0,o.Ax)(l,c.pos))&&(i&&(t&&qr(n,s.extensionManager.splittableMarks),e.split(c.pos).scrollIntoView()),!0);if(!c.parent.isBlock)return!1;if(i){const i=h.parentOffset===h.parent.content.size;a instanceof r.Bs&&e.deleteSelection();const l=0===c.depth?void 0:function(t){for(let e=0;e<t.edgeCount;e+=1){const{type:n}=t.edge(e);if(n.isTextblock&&!n.hasRequiredAttrs())return n}return null}(c.node(-1).contentMatchAt(c.indexAfter(-1)));let d=i&&l?[{type:l,attrs:u}]:void 0,p=(0,o.Ax)(e.doc,e.mapping.map(c.pos),1,d);if(d||p||!(0,o.Ax)(e.doc,e.mapping.map(c.pos),1,l?[{type:l}]:void 0)||(p=!0,d=l?[{type:l,attrs:u}]:void 0),p&&(e.split(e.mapping.map(c.pos),1,d),l&&!i&&!c.parentOffset&&c.parent.type!==l)){const t=e.mapping.map(c.before()),n=e.doc.resolve(t);c.node(-1).canReplaceWith(n.index(),n.index()+1,l)&&e.setNodeMarkup(e.mapping.map(c.before()),l)}t&&qr(n,s.extensionManager.splittableMarks),e.scrollIntoView()}return!0},splitListItem:t=>({tr:e,state:n,dispatch:s,editor:a})=>{var l;const c=nr(t,n.schema),{$from:h,$to:u}=n.selection,d=n.selection.node;if(d&&d.isBlock||h.depth<2||!h.sameParent(u))return!1;const p=h.node(-1);if(p.type!==c)return!1;const f=a.extensionManager.attributes;if(0===h.parent.content.size&&h.node(-1).childCount===h.indexAfter(-1)){if(2===h.depth||h.node(-3).type!==c||h.index(-2)!==h.node(-2).childCount-1)return!1;if(s){let t=i.HY.empty;const n=h.index(-1)?1:h.index(-2)?2:3;for(let e=h.depth-n;e>=h.depth-3;e-=1)t=i.HY.from(h.node(e).copy(t));const o=h.indexAfter(-1)<h.node(-2).childCount?1:h.indexAfter(-2)<h.node(-3).childCount?2:3,s=Vr(f,h.node().type.name,h.node().attrs),a=(null===(l=c.contentMatch.defaultType)||void 0===l?void 0:l.createAndFill(s))||void 0;t=t.append(i.HY.from(c.createAndFill(null,a)||void 0));const u=h.before(h.depth-(n-1));e.replace(u,h.after(-o),new i.p2(t,4-n,0));let d=-1;e.doc.nodesBetween(u,e.doc.content.size,((t,e)=>{if(d>-1)return!1;t.isTextblock&&0===t.content.size&&(d=e+1)})),d>-1&&e.setSelection(r.Bs.near(e.doc.resolve(d))),e.scrollIntoView()}return!0}const g=u.pos===h.end()?p.contentMatchAt(0).defaultType:null,m=Vr(f,p.type.name,p.attrs),y=Vr(f,h.node().type.name,h.node().attrs);e.delete(h.pos,u.pos);const v=g?[{type:c,attrs:m},{type:g,attrs:y}]:[{type:c,attrs:m}];return!!(0,o.Ax)(e.doc,h.pos,2)&&(s&&e.split(h.pos,2,v).scrollIntoView(),!0)},toggleList:(t,e)=>({editor:n,tr:r,state:i,dispatch:o,chain:s,commands:a,can:l})=>{const{extensions:c}=n.extensionManager,h=nr(t,i.schema),u=nr(e,i.schema),{selection:d}=i,{$from:p,$to:f}=d,g=p.blockRange(f);if(!g)return!1;const m=Wr((t=>Ur(t.type.name,c)))(d);if(g.depth>=1&&m&&g.depth-m.depth<=1){if(m.node.type===h)return a.liftListItem(u);if(Ur(m.node.type.name,c)&&h.validContent(m.node.content)&&o)return s().command((()=>(r.setNodeMarkup(m.pos,h),!0))).command((()=>Yr(r,h))).command((()=>Jr(r,h))).run()}return s().command((()=>!!l().wrapInList(h)||a.clearNodes())).wrapInList(h).command((()=>Yr(r,h))).command((()=>Jr(r,h))).run()},toggleMark:(t,e={},n={})=>({state:r,commands:i})=>{const{extendEmptyMarkRange:o=!1}=n,s=Tr(t,r.schema);return Xr(r,s,e)?i.unsetMark(s,{extendEmptyMarkRange:o}):i.setMark(s,e)},toggleNode:(t,e,n={})=>({state:r,commands:i})=>{const o=nr(t,r.schema),s=nr(e,r.schema);return Br(r,o,n)?i.setNode(s):i.setNode(o,n)},toggleWrap:(t,e={})=>({state:n,commands:r})=>{const i=nr(t,n.schema);return Br(n,i,e)?r.lift(i):r.wrapIn(i,e)},undoInputRule:()=>({state:t,dispatch:e})=>{const n=t.plugins;for(let r=0;r<n.length;r+=1){const i=n[r];let o;if(i.spec.isInputRules&&(o=i.getState(t))){if(e){const e=t.tr,n=o.transform;for(let t=n.steps.length-1;t>=0;t-=1)e.step(n.steps[t].invert(n.docs[t]));if(o.text){const n=e.doc.resolve(o.from).marks();e.replaceWith(o.from,o.to,t.schema.text(o.text,n))}else e.delete(o.from,o.to)}return!0}}return!1},unsetAllMarks:()=>({tr:t,dispatch:e})=>{const{selection:n}=t,{empty:r,ranges:i}=n;return r||e&&i.forEach((e=>{t.removeMark(e.$from.pos,e.$to.pos)})),!0},unsetMark:(t,e={})=>({tr:n,state:r,dispatch:i})=>{var o;const{extendEmptyMarkRange:s=!1}=e,{selection:a}=n,l=Tr(t,r.schema),{$from:c,empty:h,ranges:u}=a;if(!i)return!0;if(h&&s){let{from:t,to:e}=a;const r=null===(o=c.marks().find((t=>t.type===l)))||void 0===o?void 0:o.attrs,i=Ar(c,l,r);i&&(t=i.from,e=i.to),n.removeMark(t,e,l)}else u.forEach((t=>{n.removeMark(t.$from.pos,t.$to.pos,l)}));return n.removeStoredMark(l),!0},updateAttributes:(t,e={})=>({tr:n,state:r,dispatch:i})=>{let o=null,s=null;const a=Fr("string"==typeof t?t:t.name,r.schema);return!!a&&("node"===a&&(o=nr(t,r.schema)),"mark"===a&&(s=Tr(t,r.schema)),i&&n.selection.ranges.forEach((t=>{const i=t.$from.pos,a=t.$to.pos;r.doc.nodesBetween(i,a,((t,r)=>{o&&o===t.type&&n.setNodeMarkup(r,void 0,{...t.attrs,...e}),s&&t.marks.length&&t.marks.forEach((o=>{if(s===o.type){const l=Math.max(r,i),c=Math.min(r+t.nodeSize,a);n.addMark(l,c,s.create({...o.attrs,...e}))}}))}))})),!0)},wrapIn:(t,e={})=>({state:n,dispatch:r})=>function(t,e=null){return function(n,r){let{$from:i,$to:s}=n.selection,a=i.blockRange(s),l=a&&(0,o.nd)(a,t,e);return!!l&&(r&&r(n.tr.wrap(a,l).scrollIntoView()),!0)}}(nr(t,n.schema),e)(n,r),wrapInList:(t,e={})=>({state:n,dispatch:r})=>Xn(nr(t,n.schema),e)(n,r)});const Gr=kr.create({name:"commands",addCommands:()=>({...Kr})}),Zr=kr.create({name:"editable",addProseMirrorPlugins(){return[new r.Sy({key:new r.H$("editable"),props:{editable:()=>this.editor.options.editable}})]}}),Qr=kr.create({name:"focusEvents",addProseMirrorPlugins(){const{editor:t}=this;return[new r.Sy({key:new r.H$("focusEvents"),props:{handleDOMEvents:{focus:(e,n)=>{t.isFocused=!0;const r=t.state.tr.setMeta("focus",{event:n}).setMeta("addToHistory",!1);return e.dispatch(r),!1},blur:(e,n)=>{t.isFocused=!1;const r=t.state.tr.setMeta("blur",{event:n}).setMeta("addToHistory",!1);return e.dispatch(r),!1}}}})]}}),ti=kr.create({name:"keymap",addKeyboardShortcuts(){const t=()=>this.editor.commands.first((({commands:t})=>[()=>t.undoInputRule(),()=>t.command((({tr:e})=>{const{selection:n,doc:i}=e,{empty:o,$anchor:s}=n,{pos:a,parent:l}=s,c=r.Y1.atStart(i).from===a;return!(!(o&&c&&l.type.isTextblock)||l.textContent.length)&&t.clearNodes()})),()=>t.deleteSelection(),()=>t.joinBackward(),()=>t.selectNodeBackward()])),e=()=>this.editor.commands.first((({commands:t})=>[()=>t.deleteSelection(),()=>t.joinForward(),()=>t.selectNodeForward()])),n={Enter:()=>this.editor.commands.first((({commands:t})=>[()=>t.newlineInCode(),()=>t.createParagraphNear(),()=>t.liftEmptyBlock(),()=>t.splitBlock()])),"Mod-Enter":()=>this.editor.commands.exitCode(),Backspace:t,"Mod-Backspace":t,"Shift-Backspace":t,Delete:e,"Mod-Delete":e,"Mod-a":()=>this.editor.commands.selectAll()},i={...n},o={...n,"Ctrl-h":t,"Alt-Backspace":t,"Ctrl-d":e,"Ctrl-Alt-Backspace":e,"Alt-Delete":e,"Alt-d":e,"Ctrl-a":()=>this.editor.commands.selectTextblockStart(),"Ctrl-e":()=>this.editor.commands.selectTextblockEnd()};return Rr()||Ir()?o:i},addProseMirrorPlugins(){return[new r.Sy({key:new r.H$("clearDocument"),appendTransaction:(t,e,n)=>{if(!(t.some((t=>t.docChanged))&&!e.doc.eq(n.doc)))return;const{empty:i,from:o,to:s}=e.selection,a=r.Y1.atStart(e.doc).from,l=r.Y1.atEnd(e.doc).to,c=o===a&&s===l,h=0===n.doc.textBetween(0,n.doc.content.size," "," ").length;if(i||!c||!h)return;const u=n.tr,d=Gn({state:n,transaction:u}),{commands:p}=new Zn({editor:this.editor,state:d});return p.clearNodes(),u.steps.length?u:void 0}})]}}),ei=kr.create({name:"tabindex",addProseMirrorPlugins(){return[new r.Sy({key:new r.H$("tabindex"),props:{attributes:this.editor.isEditable?{tabindex:"0"}:{}}})]}});var ni=Object.freeze({__proto__:null,ClipboardTextSerializer:Er,Commands:Gr,Editable:Zr,FocusEvents:Qr,Keymap:ti,Tabindex:ei});function ri(t,e){const n=Fr("string"==typeof e?e:e.name,t.schema);return"node"===n?function(t,e){const n=nr(e,t.schema),{from:r,to:i}=t.selection,o=[];t.doc.nodesBetween(r,i,(t=>{o.push(t)}));const s=o.reverse().find((t=>t.type.name===n.name));return s?{...s.attrs}:{}}(t,e):"mark"===n?Hr(t,e):{}}function ii(t,e){const n=i.PW.fromSchema(e).serializeFragment(t),r=document.implementation.createHTMLDocument().createElement("div");return r.appendChild(n),r.innerHTML}function oi(t,e){return Sr(t,{from:0,to:t.content.size},e)}class si extends class{constructor(){this.callbacks={}}on(t,e){return this.callbacks[t]||(this.callbacks[t]=[]),this.callbacks[t].push(e),this}emit(t,...e){const n=this.callbacks[t];return n&&n.forEach((t=>t.apply(this,e))),this}off(t,e){const n=this.callbacks[t];return n&&(e?this.callbacks[t]=n.filter((t=>t!==e)):delete this.callbacks[t]),this}removeAllListeners(){this.callbacks={}}}{constructor(t={}){super(),this.isFocused=!1,this.extensionStorage={},this.options={element:document.createElement("div"),content:"",injectCSS:!0,injectNonce:void 0,extensions:[],autofocus:!1,editable:!0,editorProps:{},parseOptions:{},enableInputRules:!0,enablePasteRules:!0,enableCoreExtensions:!0,onBeforeCreate:()=>null,onCreate:()=>null,onUpdate:()=>null,onSelectionUpdate:()=>null,onTransaction:()=>null,onFocus:()=>null,onBlur:()=>null,onDestroy:()=>null},this.isCapturingTransaction=!1,this.capturedTransaction=null,this.setOptions(t),this.createExtensionManager(),this.createCommandManager(),this.createSchema(),this.on("beforeCreate",this.options.onBeforeCreate),this.emit("beforeCreate",{editor:this}),this.createView(),this.injectCSS(),this.on("create",this.options.onCreate),this.on("update",this.options.onUpdate),this.on("selectionUpdate",this.options.onSelectionUpdate),this.on("transaction",this.options.onTransaction),this.on("focus",this.options.onFocus),this.on("blur",this.options.onBlur),this.on("destroy",this.options.onDestroy),window.setTimeout((()=>{this.isDestroyed||(this.commands.focus(this.options.autofocus),this.emit("create",{editor:this}))}),0)}get storage(){return this.extensionStorage}get commands(){return this.commandManager.commands}chain(){return this.commandManager.chain()}can(){return this.commandManager.can()}injectCSS(){this.options.injectCSS&&document&&(this.css=function(t,e){const n=document.querySelector("style[data-tiptap-style]");if(null!==n)return n;const r=document.createElement("style");return e&&r.setAttribute("nonce",e),r.setAttribute("data-tiptap-style",""),r.innerHTML=t,document.getElementsByTagName("head")[0].appendChild(r),r}('.ProseMirror {\n  position: relative;\n}\n\n.ProseMirror {\n  word-wrap: break-word;\n  white-space: pre-wrap;\n  white-space: break-spaces;\n  -webkit-font-variant-ligatures: none;\n  font-variant-ligatures: none;\n  font-feature-settings: "liga" 0; /* the above doesn\'t seem to work in Edge */\n}\n\n.ProseMirror [contenteditable="false"] {\n  white-space: normal;\n}\n\n.ProseMirror [contenteditable="false"] [contenteditable="true"] {\n  white-space: pre-wrap;\n}\n\n.ProseMirror pre {\n  white-space: pre-wrap;\n}\n\nimg.ProseMirror-separator {\n  display: inline !important;\n  border: none !important;\n  margin: 0 !important;\n  width: 1px !important;\n  height: 1px !important;\n}\n\n.ProseMirror-gapcursor {\n  display: none;\n  pointer-events: none;\n  position: absolute;\n  margin: 0;\n}\n\n.ProseMirror-gapcursor:after {\n  content: "";\n  display: block;\n  position: absolute;\n  top: -2px;\n  width: 20px;\n  border-top: 1px solid black;\n  animation: ProseMirror-cursor-blink 1.1s steps(2, start) infinite;\n}\n\n@keyframes ProseMirror-cursor-blink {\n  to {\n    visibility: hidden;\n  }\n}\n\n.ProseMirror-hideselection *::selection {\n  background: transparent;\n}\n\n.ProseMirror-hideselection *::-moz-selection {\n  background: transparent;\n}\n\n.ProseMirror-hideselection * {\n  caret-color: transparent;\n}\n\n.ProseMirror-focused .ProseMirror-gapcursor {\n  display: block;\n}\n\n.tippy-box[data-animation=fade][data-state=hidden] {\n  opacity: 0\n}',this.options.injectNonce))}setOptions(t={}){this.options={...this.options,...t},this.view&&this.state&&!this.isDestroyed&&(this.options.editorProps&&this.view.setProps(this.options.editorProps),this.view.updateState(this.state))}setEditable(t){this.setOptions({editable:t})}get isEditable(){return this.options.editable&&this.view&&this.view.editable}get state(){return this.view.state}registerPlugin(t,e){const n=or(e)?e(t,[...this.state.plugins]):[...this.state.plugins,t],r=this.state.reconfigure({plugins:n});this.view.updateState(r)}unregisterPlugin(t){if(this.isDestroyed)return;const e="string"==typeof t?`${t}$`:t.key,n=this.state.reconfigure({plugins:this.state.plugins.filter((t=>!t.key.startsWith(e)))});this.view.updateState(n)}createExtensionManager(){const t=[...this.options.enableCoreExtensions?Object.values(ni):[],...this.options.extensions].filter((t=>["extension","node","mark"].includes(null==t?void 0:t.type)));this.extensionManager=new br(t,this)}createCommandManager(){this.commandManager=new Zn({editor:this})}createSchema(){this.schema=this.extensionManager.schema}createView(){const t=Lr(this.options.content,this.schema,this.options.parseOptions),e=jr(t,this.options.autofocus);this.view=new on(this.options.element,{...this.options.editorProps,dispatchTransaction:this.dispatchTransaction.bind(this),state:r.yy.create({doc:t,selection:e||void 0})});const n=this.state.reconfigure({plugins:this.extensionManager.plugins});this.view.updateState(n),this.createNodeViews();this.view.dom.editor=this}createNodeViews(){this.view.setProps({nodeViews:this.extensionManager.nodeViews})}captureTransaction(t){this.isCapturingTransaction=!0,t(),this.isCapturingTransaction=!1;const e=this.capturedTransaction;return this.capturedTransaction=null,e}dispatchTransaction(t){if(this.isCapturingTransaction)return this.capturedTransaction?void t.steps.forEach((t=>{var e;return null===(e=this.capturedTransaction)||void 0===e?void 0:e.step(t)})):void(this.capturedTransaction=t);const e=this.state.apply(t),n=!this.state.selection.eq(e.selection);this.view.updateState(e),this.emit("transaction",{editor:this,transaction:t}),n&&this.emit("selectionUpdate",{editor:this,transaction:t});const r=t.getMeta("focus"),i=t.getMeta("blur");r&&this.emit("focus",{editor:this,event:r.event,transaction:t}),i&&this.emit("blur",{editor:this,event:i.event,transaction:t}),t.docChanged&&!t.getMeta("preventUpdate")&&this.emit("update",{editor:this,transaction:t})}getAttributes(t){return ri(this.state,t)}isActive(t,e){const n="string"==typeof t?t:null,r="string"==typeof t?e:t;return function(t,e,n={}){if(!e)return Br(t,null,n)||Xr(t,null,n);const r=Fr(e,t.schema);return"node"===r?Br(t,e,n):"mark"===r&&Xr(t,e,n)}(this.state,n,r)}getJSON(){return this.state.doc.toJSON()}getHTML(){return ii(this.state.doc.content,this.schema)}getText(t){const{blockSeparator:e="\n\n",textSerializers:n={}}=t||{};return oi(this.state.doc,{blockSeparator:e,textSerializers:{...n,..._r(this.schema)}})}get isEmpty(){return function(t){var e;const n=null===(e=t.type.createAndFill())||void 0===e?void 0:e.toJSON(),r=t.toJSON();return JSON.stringify(n)===JSON.stringify(r)}(this.state.doc)}getCharacterCount(){return console.warn('[tiptap warn]: "editor.getCharacterCount()" is deprecated. Please use "editor.storage.characterCount.characters()" instead.'),this.state.doc.content.size-2}destroy(){this.emit("destroy"),this.view&&this.view.destroy(),this.removeAllListeners()}get isDestroyed(){var t;return!(null===(t=this.view)||void 0===t?void 0:t.docView)}}function ai(t,e,n){const r=[];return t===e?n.resolve(t).marks().forEach((e=>{const i=Ar(n.resolve(t-1),e.type);i&&r.push({mark:e,...i})})):n.nodesBetween(t,e,((t,e)=>{r.push(...t.marks.map((n=>({from:e,to:e+t.nodeSize,mark:n}))))})),r}function li(t,e,n){const r=t.state.doc.content.size,i=Dr(e,0,r),o=Dr(n,0,r),s=t.coordsAtPos(i),a=t.coordsAtPos(o,-1),l=Math.min(s.top,a.top),c=Math.max(s.bottom,a.bottom),h=Math.min(s.left,a.left),u=Math.max(s.right,a.right),d={top:l,bottom:c,left:h,right:u,width:u-h,height:c-l,x:h,y:l};return{...d,toJSON:()=>d}}function ci(t){return new pr({find:t.find,handler:({state:e,range:n,match:r})=>{const i=sr(t.getAttributes,void 0,r);if(!1===i||null===i)return null;const{tr:o}=e,s=r[r.length-1],a=r[0];let l=n.to;if(s){const r=a.search(/\S/),c=n.from+a.indexOf(s),h=c+s.length;if(ai(n.from,n.to,e.doc).filter((e=>e.mark.type.excluded.find((n=>n===t.type&&n!==e.mark.type)))).filter((t=>t.to>c)).length)return null;h<n.to&&o.delete(h,n.to),c>n.from&&o.delete(n.from+r,c),l=n.from+r+s.length,o.addMark(n.from+r,l,t.type.create(i||{})),o.removeStoredMark(t.type)}}})}class hi{constructor(t={}){this.type="mark",this.name="mark",this.parent=null,this.child=null,this.config={name:this.name,defaultOptions:{}},this.config={...this.config,...t},this.name=this.config.name,t.defaultOptions&&console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${this.name}".`),this.options=this.config.defaultOptions,this.config.addOptions&&(this.options=sr(Qn(this,"addOptions",{name:this.name}))),this.storage=sr(Qn(this,"addStorage",{name:this.name,options:this.options}))||{}}static create(t={}){return new hi(t)}configure(t={}){const e=this.extend();return e.options=xr(this.options,t),e.storage=sr(Qn(e,"addStorage",{name:e.name,options:e.options})),e}extend(t={}){const e=new hi(t);return e.parent=this,this.child=e,e.name=t.name?t.name:e.parent.name,t.defaultOptions&&console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${e.name}".`),e.options=sr(Qn(e,"addOptions",{name:e.name})),e.storage=sr(Qn(e,"addStorage",{name:e.name,options:e.options})),e}}class ui{constructor(t={}){this.type="node",this.name="node",this.parent=null,this.child=null,this.config={name:this.name,defaultOptions:{}},this.config={...this.config,...t},this.name=this.config.name,t.defaultOptions&&console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${this.name}".`),this.options=this.config.defaultOptions,this.config.addOptions&&(this.options=sr(Qn(this,"addOptions",{name:this.name}))),this.storage=sr(Qn(this,"addStorage",{name:this.name,options:this.options}))||{}}static create(t={}){return new ui(t)}configure(t={}){const e=this.extend();return e.options=xr(this.options,t),e.storage=sr(Qn(e,"addStorage",{name:e.name,options:e.options})),e}extend(t={}){const e=new ui(t);return e.parent=this,this.child=e,e.name=t.name?t.name:e.parent.name,t.defaultOptions&&console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${e.name}".`),e.options=sr(Qn(e,"addOptions",{name:e.name})),e.storage=sr(Qn(e,"addStorage",{name:e.name,options:e.options})),e}}function di(t){return new mr({find:t.find,handler:({state:e,range:n,match:r})=>{const i=sr(t.getAttributes,void 0,r);if(!1===i||null===i)return null;const{tr:o}=e,s=r[r.length-1],a=r[0];let l=n.to;if(s){const r=a.search(/\S/),c=n.from+a.indexOf(s),h=c+s.length;if(ai(n.from,n.to,e.doc).filter((e=>e.mark.type.excluded.find((n=>n===t.type&&n!==e.mark.type)))).filter((t=>t.to>c)).length)return null;h<n.to&&o.delete(h,n.to),c>n.from&&o.delete(n.from+r,c),l=n.from+r+s.length,o.addMark(n.from+r,l,t.type.create(i||{})),o.removeStoredMark(t.type)}}})}},8552:(t,e,n)=>{var r=n(852)(n(5639),"DataView");t.exports=r},1989:(t,e,n)=>{var r=n(1789),i=n(401),o=n(7667),s=n(1327),a=n(1866);function l(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}l.prototype.clear=r,l.prototype.delete=i,l.prototype.get=o,l.prototype.has=s,l.prototype.set=a,t.exports=l},8407:(t,e,n)=>{var r=n(7040),i=n(4125),o=n(2117),s=n(7529),a=n(4705);function l(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}l.prototype.clear=r,l.prototype.delete=i,l.prototype.get=o,l.prototype.has=s,l.prototype.set=a,t.exports=l},7071:(t,e,n)=>{var r=n(852)(n(5639),"Map");t.exports=r},3369:(t,e,n)=>{var r=n(4785),i=n(1285),o=n(6e3),s=n(9916),a=n(5265);function l(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}l.prototype.clear=r,l.prototype.delete=i,l.prototype.get=o,l.prototype.has=s,l.prototype.set=a,t.exports=l},3818:(t,e,n)=>{var r=n(852)(n(5639),"Promise");t.exports=r},8525:(t,e,n)=>{var r=n(852)(n(5639),"Set");t.exports=r},8668:(t,e,n)=>{var r=n(3369),i=n(619),o=n(2385);function s(t){var e=-1,n=null==t?0:t.length;for(this.__data__=new r;++e<n;)this.add(t[e])}s.prototype.add=s.prototype.push=i,s.prototype.has=o,t.exports=s},6384:(t,e,n)=>{var r=n(8407),i=n(7465),o=n(3779),s=n(7599),a=n(4758),l=n(4309);function c(t){var e=this.__data__=new r(t);this.size=e.size}c.prototype.clear=i,c.prototype.delete=o,c.prototype.get=s,c.prototype.has=a,c.prototype.set=l,t.exports=c},2705:(t,e,n)=>{var r=n(5639).Symbol;t.exports=r},1149:(t,e,n)=>{var r=n(5639).Uint8Array;t.exports=r},577:(t,e,n)=>{var r=n(852)(n(5639),"WeakMap");t.exports=r},7412:t=>{t.exports=function(t,e){for(var n=-1,r=null==t?0:t.length;++n<r&&!1!==e(t[n],n,t););return t}},4963:t=>{t.exports=function(t,e){for(var n=-1,r=null==t?0:t.length,i=0,o=[];++n<r;){var s=t[n];e(s,n,t)&&(o[i++]=s)}return o}},4636:(t,e,n)=>{var r=n(2545),i=n(5694),o=n(1469),s=n(4144),a=n(5776),l=n(6719),c=Object.prototype.hasOwnProperty;t.exports=function(t,e){var n=o(t),h=!n&&i(t),u=!n&&!h&&s(t),d=!n&&!h&&!u&&l(t),p=n||h||u||d,f=p?r(t.length,String):[],g=f.length;for(var m in t)!e&&!c.call(t,m)||p&&("length"==m||u&&("offset"==m||"parent"==m)||d&&("buffer"==m||"byteLength"==m||"byteOffset"==m)||a(m,g))||f.push(m);return f}},9932:t=>{t.exports=function(t,e){for(var n=-1,r=null==t?0:t.length,i=Array(r);++n<r;)i[n]=e(t[n],n,t);return i}},2488:t=>{t.exports=function(t,e){for(var n=-1,r=e.length,i=t.length;++n<r;)t[i+n]=e[n];return t}},2908:t=>{t.exports=function(t,e){for(var n=-1,r=null==t?0:t.length;++n<r;)if(e(t[n],n,t))return!0;return!1}},4865:(t,e,n)=>{var r=n(9465),i=n(7813),o=Object.prototype.hasOwnProperty;t.exports=function(t,e,n){var s=t[e];o.call(t,e)&&i(s,n)&&(void 0!==n||e in t)||r(t,e,n)}},8470:(t,e,n)=>{var r=n(7813);t.exports=function(t,e){for(var n=t.length;n--;)if(r(t[n][0],e))return n;return-1}},4037:(t,e,n)=>{var r=n(8363),i=n(3674);t.exports=function(t,e){return t&&r(e,i(e),t)}},3886:(t,e,n)=>{var r=n(8363),i=n(1704);t.exports=function(t,e){return t&&r(e,i(e),t)}},9465:(t,e,n)=>{var r=n(8777);t.exports=function(t,e,n){"__proto__"==e&&r?r(t,e,{configurable:!0,enumerable:!0,value:n,writable:!0}):t[e]=n}},5990:(t,e,n)=>{var r=n(6384),i=n(7412),o=n(4865),s=n(4037),a=n(3886),l=n(4626),c=n(278),h=n(8805),u=n(1911),d=n(8234),p=n(6904),f=n(4160),g=n(3824),m=n(9148),y=n(8517),v=n(1469),b=n(4144),w=n(6688),x=n(3218),k=n(2928),S=n(3674),_=n(1704),E="[object Arguments]",C="[object Function]",O="[object Object]",M={};M[E]=M["[object Array]"]=M["[object ArrayBuffer]"]=M["[object DataView]"]=M["[object Boolean]"]=M["[object Date]"]=M["[object Float32Array]"]=M["[object Float64Array]"]=M["[object Int8Array]"]=M["[object Int16Array]"]=M["[object Int32Array]"]=M["[object Map]"]=M["[object Number]"]=M[O]=M["[object RegExp]"]=M["[object Set]"]=M["[object String]"]=M["[object Symbol]"]=M["[object Uint8Array]"]=M["[object Uint8ClampedArray]"]=M["[object Uint16Array]"]=M["[object Uint32Array]"]=!0,M["[object Error]"]=M[C]=M["[object WeakMap]"]=!1,t.exports=function t(e,n,A,T,N,D){var j,R=1&n,P=2&n,z=4&n;if(A&&(j=N?A(e,T,N,D):A(e)),void 0!==j)return j;if(!x(e))return e;var I=v(e);if(I){if(j=g(e),!R)return c(e,j)}else{var B=f(e),F=B==C||"[object GeneratorFunction]"==B;if(b(e))return l(e,R);if(B==O||B==E||F&&!N){if(j=P||F?{}:y(e),!R)return P?u(e,a(j,e)):h(e,s(j,e))}else{if(!M[B])return N?e:{};j=m(e,B,R)}}D||(D=new r);var $=D.get(e);if($)return $;D.set(e,j),k(e)?e.forEach((function(r){j.add(t(r,n,A,r,e,D))})):w(e)&&e.forEach((function(r,i){j.set(i,t(r,n,A,i,e,D))}));var L=I?void 0:(z?P?p:d:P?_:S)(e);return i(L||e,(function(r,i){L&&(r=e[i=r]),o(j,i,t(r,n,A,i,e,D))})),j}},3118:(t,e,n)=>{var r=n(3218),i=Object.create,o=function(){function t(){}return function(e){if(!r(e))return{};if(i)return i(e);t.prototype=e;var n=new t;return t.prototype=void 0,n}}();t.exports=o},9881:(t,e,n)=>{var r=n(7816),i=n(9291)(r);t.exports=i},8483:(t,e,n)=>{var r=n(5063)();t.exports=r},7816:(t,e,n)=>{var r=n(8483),i=n(3674);t.exports=function(t,e){return t&&r(t,e,i)}},7786:(t,e,n)=>{var r=n(1811),i=n(327);t.exports=function(t,e){for(var n=0,o=(e=r(e,t)).length;null!=t&&n<o;)t=t[i(e[n++])];return n&&n==o?t:void 0}},8866:(t,e,n)=>{var r=n(2488),i=n(1469);t.exports=function(t,e,n){var o=e(t);return i(t)?o:r(o,n(t))}},4239:(t,e,n)=>{var r=n(2705),i=n(9607),o=n(2333),s=r?r.toStringTag:void 0;t.exports=function(t){return null==t?void 0===t?"[object Undefined]":"[object Null]":s&&s in Object(t)?i(t):o(t)}},13:t=>{t.exports=function(t,e){return null!=t&&e in Object(t)}},9454:(t,e,n)=>{var r=n(4239),i=n(7005);t.exports=function(t){return i(t)&&"[object Arguments]"==r(t)}},939:(t,e,n)=>{var r=n(2492),i=n(7005);t.exports=function t(e,n,o,s,a){return e===n||(null==e||null==n||!i(e)&&!i(n)?e!=e&&n!=n:r(e,n,o,s,t,a))}},2492:(t,e,n)=>{var r=n(6384),i=n(7114),o=n(8351),s=n(6096),a=n(4160),l=n(1469),c=n(4144),h=n(6719),u="[object Arguments]",d="[object Array]",p="[object Object]",f=Object.prototype.hasOwnProperty;t.exports=function(t,e,n,g,m,y){var v=l(t),b=l(e),w=v?d:a(t),x=b?d:a(e),k=(w=w==u?p:w)==p,S=(x=x==u?p:x)==p,_=w==x;if(_&&c(t)){if(!c(e))return!1;v=!0,k=!1}if(_&&!k)return y||(y=new r),v||h(t)?i(t,e,n,g,m,y):o(t,e,w,n,g,m,y);if(!(1&n)){var E=k&&f.call(t,"__wrapped__"),C=S&&f.call(e,"__wrapped__");if(E||C){var O=E?t.value():t,M=C?e.value():e;return y||(y=new r),m(O,M,n,g,y)}}return!!_&&(y||(y=new r),s(t,e,n,g,m,y))}},5588:(t,e,n)=>{var r=n(4160),i=n(7005);t.exports=function(t){return i(t)&&"[object Map]"==r(t)}},2958:(t,e,n)=>{var r=n(6384),i=n(939);t.exports=function(t,e,n,o){var s=n.length,a=s,l=!o;if(null==t)return!a;for(t=Object(t);s--;){var c=n[s];if(l&&c[2]?c[1]!==t[c[0]]:!(c[0]in t))return!1}for(;++s<a;){var h=(c=n[s])[0],u=t[h],d=c[1];if(l&&c[2]){if(void 0===u&&!(h in t))return!1}else{var p=new r;if(o)var f=o(u,d,h,t,e,p);if(!(void 0===f?i(d,u,3,o,p):f))return!1}}return!0}},8458:(t,e,n)=>{var r=n(3560),i=n(5346),o=n(3218),s=n(346),a=/^\[object .+?Constructor\]$/,l=Function.prototype,c=Object.prototype,h=l.toString,u=c.hasOwnProperty,d=RegExp("^"+h.call(u).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");t.exports=function(t){return!(!o(t)||i(t))&&(r(t)?d:a).test(s(t))}},9221:(t,e,n)=>{var r=n(4160),i=n(7005);t.exports=function(t){return i(t)&&"[object Set]"==r(t)}},8749:(t,e,n)=>{var r=n(4239),i=n(1780),o=n(7005),s={};s["[object Float32Array]"]=s["[object Float64Array]"]=s["[object Int8Array]"]=s["[object Int16Array]"]=s["[object Int32Array]"]=s["[object Uint8Array]"]=s["[object Uint8ClampedArray]"]=s["[object Uint16Array]"]=s["[object Uint32Array]"]=!0,s["[object Arguments]"]=s["[object Array]"]=s["[object ArrayBuffer]"]=s["[object Boolean]"]=s["[object DataView]"]=s["[object Date]"]=s["[object Error]"]=s["[object Function]"]=s["[object Map]"]=s["[object Number]"]=s["[object Object]"]=s["[object RegExp]"]=s["[object Set]"]=s["[object String]"]=s["[object WeakMap]"]=!1,t.exports=function(t){return o(t)&&i(t.length)&&!!s[r(t)]}},7206:(t,e,n)=>{var r=n(1573),i=n(6432),o=n(6557),s=n(1469),a=n(9601);t.exports=function(t){return"function"==typeof t?t:null==t?o:"object"==typeof t?s(t)?i(t[0],t[1]):r(t):a(t)}},280:(t,e,n)=>{var r=n(5726),i=n(6916),o=Object.prototype.hasOwnProperty;t.exports=function(t){if(!r(t))return i(t);var e=[];for(var n in Object(t))o.call(t,n)&&"constructor"!=n&&e.push(n);return e}},313:(t,e,n)=>{var r=n(3218),i=n(5726),o=n(3498),s=Object.prototype.hasOwnProperty;t.exports=function(t){if(!r(t))return o(t);var e=i(t),n=[];for(var a in t)("constructor"!=a||!e&&s.call(t,a))&&n.push(a);return n}},9199:(t,e,n)=>{var r=n(9881),i=n(8612);t.exports=function(t,e){var n=-1,o=i(t)?Array(t.length):[];return r(t,(function(t,r,i){o[++n]=e(t,r,i)})),o}},1573:(t,e,n)=>{var r=n(2958),i=n(1499),o=n(2634);t.exports=function(t){var e=i(t);return 1==e.length&&e[0][2]?o(e[0][0],e[0][1]):function(n){return n===t||r(n,t,e)}}},6432:(t,e,n)=>{var r=n(939),i=n(7361),o=n(9095),s=n(5403),a=n(9162),l=n(2634),c=n(327);t.exports=function(t,e){return s(t)&&a(e)?l(c(t),e):function(n){var s=i(n,t);return void 0===s&&s===e?o(n,t):r(e,s,3)}}},371:t=>{t.exports=function(t){return function(e){return null==e?void 0:e[t]}}},9152:(t,e,n)=>{var r=n(7786);t.exports=function(t){return function(e){return r(e,t)}}},2545:t=>{t.exports=function(t,e){for(var n=-1,r=Array(t);++n<t;)r[n]=e(n);return r}},531:(t,e,n)=>{var r=n(2705),i=n(9932),o=n(1469),s=n(3448),a=r?r.prototype:void 0,l=a?a.toString:void 0;t.exports=function t(e){if("string"==typeof e)return e;if(o(e))return i(e,t)+"";if(s(e))return l?l.call(e):"";var n=e+"";return"0"==n&&1/e==-Infinity?"-0":n}},7518:t=>{t.exports=function(t){return function(e){return t(e)}}},4757:t=>{t.exports=function(t,e){return t.has(e)}},4290:(t,e,n)=>{var r=n(6557);t.exports=function(t){return"function"==typeof t?t:r}},1811:(t,e,n)=>{var r=n(1469),i=n(5403),o=n(5514),s=n(9833);t.exports=function(t,e){return r(t)?t:i(t,e)?[t]:o(s(t))}},4318:(t,e,n)=>{var r=n(1149);t.exports=function(t){var e=new t.constructor(t.byteLength);return new r(e).set(new r(t)),e}},4626:(t,e,n)=>{t=n.nmd(t);var r=n(5639),i=e&&!e.nodeType&&e,o=i&&t&&!t.nodeType&&t,s=o&&o.exports===i?r.Buffer:void 0,a=s?s.allocUnsafe:void 0;t.exports=function(t,e){if(e)return t.slice();var n=t.length,r=a?a(n):new t.constructor(n);return t.copy(r),r}},7157:(t,e,n)=>{var r=n(4318);t.exports=function(t,e){var n=e?r(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.byteLength)}},3147:t=>{var e=/\w*$/;t.exports=function(t){var n=new t.constructor(t.source,e.exec(t));return n.lastIndex=t.lastIndex,n}},419:(t,e,n)=>{var r=n(2705),i=r?r.prototype:void 0,o=i?i.valueOf:void 0;t.exports=function(t){return o?Object(o.call(t)):{}}},7133:(t,e,n)=>{var r=n(4318);t.exports=function(t,e){var n=e?r(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.length)}},278:t=>{t.exports=function(t,e){var n=-1,r=t.length;for(e||(e=Array(r));++n<r;)e[n]=t[n];return e}},8363:(t,e,n)=>{var r=n(4865),i=n(9465);t.exports=function(t,e,n,o){var s=!n;n||(n={});for(var a=-1,l=e.length;++a<l;){var c=e[a],h=o?o(n[c],t[c],c,n,t):void 0;void 0===h&&(h=t[c]),s?i(n,c,h):r(n,c,h)}return n}},8805:(t,e,n)=>{var r=n(8363),i=n(9551);t.exports=function(t,e){return r(t,i(t),e)}},1911:(t,e,n)=>{var r=n(8363),i=n(1442);t.exports=function(t,e){return r(t,i(t),e)}},4429:(t,e,n)=>{var r=n(5639)["__core-js_shared__"];t.exports=r},9291:(t,e,n)=>{var r=n(8612);t.exports=function(t,e){return function(n,i){if(null==n)return n;if(!r(n))return t(n,i);for(var o=n.length,s=e?o:-1,a=Object(n);(e?s--:++s<o)&&!1!==i(a[s],s,a););return n}}},5063:t=>{t.exports=function(t){return function(e,n,r){for(var i=-1,o=Object(e),s=r(e),a=s.length;a--;){var l=s[t?a:++i];if(!1===n(o[l],l,o))break}return e}}},8777:(t,e,n)=>{var r=n(852),i=function(){try{var t=r(Object,"defineProperty");return t({},"",{}),t}catch(t){}}();t.exports=i},7114:(t,e,n)=>{var r=n(8668),i=n(2908),o=n(4757);t.exports=function(t,e,n,s,a,l){var c=1&n,h=t.length,u=e.length;if(h!=u&&!(c&&u>h))return!1;var d=l.get(t),p=l.get(e);if(d&&p)return d==e&&p==t;var f=-1,g=!0,m=2&n?new r:void 0;for(l.set(t,e),l.set(e,t);++f<h;){var y=t[f],v=e[f];if(s)var b=c?s(v,y,f,e,t,l):s(y,v,f,t,e,l);if(void 0!==b){if(b)continue;g=!1;break}if(m){if(!i(e,(function(t,e){if(!o(m,e)&&(y===t||a(y,t,n,s,l)))return m.push(e)}))){g=!1;break}}else if(y!==v&&!a(y,v,n,s,l)){g=!1;break}}return l.delete(t),l.delete(e),g}},8351:(t,e,n)=>{var r=n(2705),i=n(1149),o=n(7813),s=n(7114),a=n(8776),l=n(1814),c=r?r.prototype:void 0,h=c?c.valueOf:void 0;t.exports=function(t,e,n,r,c,u,d){switch(n){case"[object DataView]":if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case"[object ArrayBuffer]":return!(t.byteLength!=e.byteLength||!u(new i(t),new i(e)));case"[object Boolean]":case"[object Date]":case"[object Number]":return o(+t,+e);case"[object Error]":return t.name==e.name&&t.message==e.message;case"[object RegExp]":case"[object String]":return t==e+"";case"[object Map]":var p=a;case"[object Set]":var f=1&r;if(p||(p=l),t.size!=e.size&&!f)return!1;var g=d.get(t);if(g)return g==e;r|=2,d.set(t,e);var m=s(p(t),p(e),r,c,u,d);return d.delete(t),m;case"[object Symbol]":if(h)return h.call(t)==h.call(e)}return!1}},6096:(t,e,n)=>{var r=n(8234),i=Object.prototype.hasOwnProperty;t.exports=function(t,e,n,o,s,a){var l=1&n,c=r(t),h=c.length;if(h!=r(e).length&&!l)return!1;for(var u=h;u--;){var d=c[u];if(!(l?d in e:i.call(e,d)))return!1}var p=a.get(t),f=a.get(e);if(p&&f)return p==e&&f==t;var g=!0;a.set(t,e),a.set(e,t);for(var m=l;++u<h;){var y=t[d=c[u]],v=e[d];if(o)var b=l?o(v,y,d,e,t,a):o(y,v,d,t,e,a);if(!(void 0===b?y===v||s(y,v,n,o,a):b)){g=!1;break}m||(m="constructor"==d)}if(g&&!m){var w=t.constructor,x=e.constructor;w==x||!("constructor"in t)||!("constructor"in e)||"function"==typeof w&&w instanceof w&&"function"==typeof x&&x instanceof x||(g=!1)}return a.delete(t),a.delete(e),g}},1957:(t,e,n)=>{var r="object"==typeof n.g&&n.g&&n.g.Object===Object&&n.g;t.exports=r},8234:(t,e,n)=>{var r=n(8866),i=n(9551),o=n(3674);t.exports=function(t){return r(t,o,i)}},6904:(t,e,n)=>{var r=n(8866),i=n(1442),o=n(1704);t.exports=function(t){return r(t,o,i)}},5050:(t,e,n)=>{var r=n(7019);t.exports=function(t,e){var n=t.__data__;return r(e)?n["string"==typeof e?"string":"hash"]:n.map}},1499:(t,e,n)=>{var r=n(9162),i=n(3674);t.exports=function(t){for(var e=i(t),n=e.length;n--;){var o=e[n],s=t[o];e[n]=[o,s,r(s)]}return e}},852:(t,e,n)=>{var r=n(8458),i=n(7801);t.exports=function(t,e){var n=i(t,e);return r(n)?n:void 0}},5924:(t,e,n)=>{var r=n(5569)(Object.getPrototypeOf,Object);t.exports=r},9607:(t,e,n)=>{var r=n(2705),i=Object.prototype,o=i.hasOwnProperty,s=i.toString,a=r?r.toStringTag:void 0;t.exports=function(t){var e=o.call(t,a),n=t[a];try{t[a]=void 0;var r=!0}catch(t){}var i=s.call(t);return r&&(e?t[a]=n:delete t[a]),i}},9551:(t,e,n)=>{var r=n(4963),i=n(479),o=Object.prototype.propertyIsEnumerable,s=Object.getOwnPropertySymbols,a=s?function(t){return null==t?[]:(t=Object(t),r(s(t),(function(e){return o.call(t,e)})))}:i;t.exports=a},1442:(t,e,n)=>{var r=n(2488),i=n(5924),o=n(9551),s=n(479),a=Object.getOwnPropertySymbols?function(t){for(var e=[];t;)r(e,o(t)),t=i(t);return e}:s;t.exports=a},4160:(t,e,n)=>{var r=n(8552),i=n(7071),o=n(3818),s=n(8525),a=n(577),l=n(4239),c=n(346),h="[object Map]",u="[object Promise]",d="[object Set]",p="[object WeakMap]",f="[object DataView]",g=c(r),m=c(i),y=c(o),v=c(s),b=c(a),w=l;(r&&w(new r(new ArrayBuffer(1)))!=f||i&&w(new i)!=h||o&&w(o.resolve())!=u||s&&w(new s)!=d||a&&w(new a)!=p)&&(w=function(t){var e=l(t),n="[object Object]"==e?t.constructor:void 0,r=n?c(n):"";if(r)switch(r){case g:return f;case m:return h;case y:return u;case v:return d;case b:return p}return e}),t.exports=w},7801:t=>{t.exports=function(t,e){return null==t?void 0:t[e]}},222:(t,e,n)=>{var r=n(1811),i=n(5694),o=n(1469),s=n(5776),a=n(1780),l=n(327);t.exports=function(t,e,n){for(var c=-1,h=(e=r(e,t)).length,u=!1;++c<h;){var d=l(e[c]);if(!(u=null!=t&&n(t,d)))break;t=t[d]}return u||++c!=h?u:!!(h=null==t?0:t.length)&&a(h)&&s(d,h)&&(o(t)||i(t))}},1789:(t,e,n)=>{var r=n(4536);t.exports=function(){this.__data__=r?r(null):{},this.size=0}},401:t=>{t.exports=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e}},7667:(t,e,n)=>{var r=n(4536),i=Object.prototype.hasOwnProperty;t.exports=function(t){var e=this.__data__;if(r){var n=e[t];return"__lodash_hash_undefined__"===n?void 0:n}return i.call(e,t)?e[t]:void 0}},1327:(t,e,n)=>{var r=n(4536),i=Object.prototype.hasOwnProperty;t.exports=function(t){var e=this.__data__;return r?void 0!==e[t]:i.call(e,t)}},1866:(t,e,n)=>{var r=n(4536);t.exports=function(t,e){var n=this.__data__;return this.size+=this.has(t)?0:1,n[t]=r&&void 0===e?"__lodash_hash_undefined__":e,this}},3824:t=>{var e=Object.prototype.hasOwnProperty;t.exports=function(t){var n=t.length,r=new t.constructor(n);return n&&"string"==typeof t[0]&&e.call(t,"index")&&(r.index=t.index,r.input=t.input),r}},9148:(t,e,n)=>{var r=n(4318),i=n(7157),o=n(3147),s=n(419),a=n(7133);t.exports=function(t,e,n){var l=t.constructor;switch(e){case"[object ArrayBuffer]":return r(t);case"[object Boolean]":case"[object Date]":return new l(+t);case"[object DataView]":return i(t,n);case"[object Float32Array]":case"[object Float64Array]":case"[object Int8Array]":case"[object Int16Array]":case"[object Int32Array]":case"[object Uint8Array]":case"[object Uint8ClampedArray]":case"[object Uint16Array]":case"[object Uint32Array]":return a(t,n);case"[object Map]":case"[object Set]":return new l;case"[object Number]":case"[object String]":return new l(t);case"[object RegExp]":return o(t);case"[object Symbol]":return s(t)}}},8517:(t,e,n)=>{var r=n(3118),i=n(5924),o=n(5726);t.exports=function(t){return"function"!=typeof t.constructor||o(t)?{}:r(i(t))}},5776:t=>{var e=/^(?:0|[1-9]\d*)$/;t.exports=function(t,n){var r=typeof t;return!!(n=null==n?9007199254740991:n)&&("number"==r||"symbol"!=r&&e.test(t))&&t>-1&&t%1==0&&t<n}},5403:(t,e,n)=>{var r=n(1469),i=n(3448),o=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,s=/^\w*$/;t.exports=function(t,e){if(r(t))return!1;var n=typeof t;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=t&&!i(t))||(s.test(t)||!o.test(t)||null!=e&&t in Object(e))}},7019:t=>{t.exports=function(t){var e=typeof t;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==t:null===t}},5346:(t,e,n)=>{var r,i=n(4429),o=(r=/[^.]+$/.exec(i&&i.keys&&i.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"";t.exports=function(t){return!!o&&o in t}},5726:t=>{var e=Object.prototype;t.exports=function(t){var n=t&&t.constructor;return t===("function"==typeof n&&n.prototype||e)}},9162:(t,e,n)=>{var r=n(3218);t.exports=function(t){return t==t&&!r(t)}},7040:t=>{t.exports=function(){this.__data__=[],this.size=0}},4125:(t,e,n)=>{var r=n(8470),i=Array.prototype.splice;t.exports=function(t){var e=this.__data__,n=r(e,t);return!(n<0)&&(n==e.length-1?e.pop():i.call(e,n,1),--this.size,!0)}},2117:(t,e,n)=>{var r=n(8470);t.exports=function(t){var e=this.__data__,n=r(e,t);return n<0?void 0:e[n][1]}},7529:(t,e,n)=>{var r=n(8470);t.exports=function(t){return r(this.__data__,t)>-1}},4705:(t,e,n)=>{var r=n(8470);t.exports=function(t,e){var n=this.__data__,i=r(n,t);return i<0?(++this.size,n.push([t,e])):n[i][1]=e,this}},4785:(t,e,n)=>{var r=n(1989),i=n(8407),o=n(7071);t.exports=function(){this.size=0,this.__data__={hash:new r,map:new(o||i),string:new r}}},1285:(t,e,n)=>{var r=n(5050);t.exports=function(t){var e=r(this,t).delete(t);return this.size-=e?1:0,e}},6e3:(t,e,n)=>{var r=n(5050);t.exports=function(t){return r(this,t).get(t)}},9916:(t,e,n)=>{var r=n(5050);t.exports=function(t){return r(this,t).has(t)}},5265:(t,e,n)=>{var r=n(5050);t.exports=function(t,e){var n=r(this,t),i=n.size;return n.set(t,e),this.size+=n.size==i?0:1,this}},8776:t=>{t.exports=function(t){var e=-1,n=Array(t.size);return t.forEach((function(t,r){n[++e]=[r,t]})),n}},2634:t=>{t.exports=function(t,e){return function(n){return null!=n&&(n[t]===e&&(void 0!==e||t in Object(n)))}}},4523:(t,e,n)=>{var r=n(8306);t.exports=function(t){var e=r(t,(function(t){return 500===n.size&&n.clear(),t})),n=e.cache;return e}},4536:(t,e,n)=>{var r=n(852)(Object,"create");t.exports=r},6916:(t,e,n)=>{var r=n(5569)(Object.keys,Object);t.exports=r},3498:t=>{t.exports=function(t){var e=[];if(null!=t)for(var n in Object(t))e.push(n);return e}},1167:(t,e,n)=>{t=n.nmd(t);var r=n(1957),i=e&&!e.nodeType&&e,o=i&&t&&!t.nodeType&&t,s=o&&o.exports===i&&r.process,a=function(){try{var t=o&&o.require&&o.require("util").types;return t||s&&s.binding&&s.binding("util")}catch(t){}}();t.exports=a},2333:t=>{var e=Object.prototype.toString;t.exports=function(t){return e.call(t)}},5569:t=>{t.exports=function(t,e){return function(n){return t(e(n))}}},5639:(t,e,n)=>{var r=n(1957),i="object"==typeof self&&self&&self.Object===Object&&self,o=r||i||Function("return this")();t.exports=o},619:t=>{t.exports=function(t){return this.__data__.set(t,"__lodash_hash_undefined__"),this}},2385:t=>{t.exports=function(t){return this.__data__.has(t)}},1814:t=>{t.exports=function(t){var e=-1,n=Array(t.size);return t.forEach((function(t){n[++e]=t})),n}},7465:(t,e,n)=>{var r=n(8407);t.exports=function(){this.__data__=new r,this.size=0}},3779:t=>{t.exports=function(t){var e=this.__data__,n=e.delete(t);return this.size=e.size,n}},7599:t=>{t.exports=function(t){return this.__data__.get(t)}},4758:t=>{t.exports=function(t){return this.__data__.has(t)}},4309:(t,e,n)=>{var r=n(8407),i=n(7071),o=n(3369);t.exports=function(t,e){var n=this.__data__;if(n instanceof r){var s=n.__data__;if(!i||s.length<199)return s.push([t,e]),this.size=++n.size,this;n=this.__data__=new o(s)}return n.set(t,e),this.size=n.size,this}},5514:(t,e,n)=>{var r=n(4523),i=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,o=/\\(\\)?/g,s=r((function(t){var e=[];return 46===t.charCodeAt(0)&&e.push(""),t.replace(i,(function(t,n,r,i){e.push(r?i.replace(o,"$1"):n||t)})),e}));t.exports=s},327:(t,e,n)=>{var r=n(3448);t.exports=function(t){if("string"==typeof t||r(t))return t;var e=t+"";return"0"==e&&1/t==-Infinity?"-0":e}},346:t=>{var e=Function.prototype.toString;t.exports=function(t){if(null!=t){try{return e.call(t)}catch(t){}try{return t+""}catch(t){}}return""}},361:(t,e,n)=>{var r=n(5990);t.exports=function(t){return r(t,5)}},7813:t=>{t.exports=function(t,e){return t===e||t!=t&&e!=e}},2525:(t,e,n)=>{var r=n(7816),i=n(4290);t.exports=function(t,e){return t&&r(t,i(e))}},7361:(t,e,n)=>{var r=n(7786);t.exports=function(t,e,n){var i=null==t?void 0:r(t,e);return void 0===i?n:i}},9095:(t,e,n)=>{var r=n(13),i=n(222);t.exports=function(t,e){return null!=t&&i(t,e,r)}},6557:t=>{t.exports=function(t){return t}},5694:(t,e,n)=>{var r=n(9454),i=n(7005),o=Object.prototype,s=o.hasOwnProperty,a=o.propertyIsEnumerable,l=r(function(){return arguments}())?r:function(t){return i(t)&&s.call(t,"callee")&&!a.call(t,"callee")};t.exports=l},1469:t=>{var e=Array.isArray;t.exports=e},8612:(t,e,n)=>{var r=n(3560),i=n(1780);t.exports=function(t){return null!=t&&i(t.length)&&!r(t)}},4144:(t,e,n)=>{t=n.nmd(t);var r=n(5639),i=n(5062),o=e&&!e.nodeType&&e,s=o&&t&&!t.nodeType&&t,a=s&&s.exports===o?r.Buffer:void 0,l=(a?a.isBuffer:void 0)||i;t.exports=l},3560:(t,e,n)=>{var r=n(4239),i=n(3218);t.exports=function(t){if(!i(t))return!1;var e=r(t);return"[object Function]"==e||"[object GeneratorFunction]"==e||"[object AsyncFunction]"==e||"[object Proxy]"==e}},1780:t=>{t.exports=function(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=9007199254740991}},6688:(t,e,n)=>{var r=n(5588),i=n(7518),o=n(1167),s=o&&o.isMap,a=s?i(s):r;t.exports=a},3218:t=>{t.exports=function(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}},7005:t=>{t.exports=function(t){return null!=t&&"object"==typeof t}},8630:(t,e,n)=>{var r=n(4239),i=n(5924),o=n(7005),s=Function.prototype,a=Object.prototype,l=s.toString,c=a.hasOwnProperty,h=l.call(Object);t.exports=function(t){if(!o(t)||"[object Object]"!=r(t))return!1;var e=i(t);if(null===e)return!0;var n=c.call(e,"constructor")&&e.constructor;return"function"==typeof n&&n instanceof n&&l.call(n)==h}},2928:(t,e,n)=>{var r=n(9221),i=n(7518),o=n(1167),s=o&&o.isSet,a=s?i(s):r;t.exports=a},7037:(t,e,n)=>{var r=n(4239),i=n(1469),o=n(7005);t.exports=function(t){return"string"==typeof t||!i(t)&&o(t)&&"[object String]"==r(t)}},3448:(t,e,n)=>{var r=n(4239),i=n(7005);t.exports=function(t){return"symbol"==typeof t||i(t)&&"[object Symbol]"==r(t)}},6719:(t,e,n)=>{var r=n(8749),i=n(7518),o=n(1167),s=o&&o.isTypedArray,a=s?i(s):r;t.exports=a},3674:(t,e,n)=>{var r=n(4636),i=n(280),o=n(8612);t.exports=function(t){return o(t)?r(t):i(t)}},1704:(t,e,n)=>{var r=n(4636),i=n(313),o=n(8612);t.exports=function(t){return o(t)?r(t,!0):i(t)}},5161:(t,e,n)=>{var r=n(9932),i=n(7206),o=n(9199),s=n(1469);t.exports=function(t,e){return(s(t)?r:o)(t,i(e,3))}},8306:(t,e,n)=>{var r=n(3369);function i(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new TypeError("Expected a function");var n=function(){var r=arguments,i=e?e.apply(this,r):r[0],o=n.cache;if(o.has(i))return o.get(i);var s=t.apply(this,r);return n.cache=o.set(i,s)||o,s};return n.cache=new(i.Cache||r),n}i.Cache=r,t.exports=i},9601:(t,e,n)=>{var r=n(371),i=n(9152),o=n(5403),s=n(327);t.exports=function(t){return o(t)?r(s(t)):i(t)}},479:t=>{t.exports=function(){return[]}},5062:t=>{t.exports=function(){return!1}},9833:(t,e,n)=>{var r=n(531);t.exports=function(t){return null==t?"":r(t)}},2703:(t,e,n)=>{"use strict";var r=n(414);function i(){}function o(){}o.resetWarningCache=i,t.exports=function(){function t(t,e,n,i,o,s){if(s!==r){var a=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw a.name="Invariant Violation",a}}function e(){return t}t.isRequired=t;var n={array:t,bigint:t,bool:t,func:t,number:t,object:t,string:t,symbol:t,any:t,arrayOf:e,element:t,elementType:t,instanceOf:e,node:t,objectOf:e,oneOf:e,oneOfType:e,shape:e,exact:e,checkPropTypes:o,resetWarningCache:i};return n.PropTypes=n,n}},5697:(t,e,n)=>{t.exports=n(2703)()},414:t=>{"use strict";t.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},3565:(t,e,n)=>{"use strict";n.d(e,{xS:()=>Eo});var r=n(7294),i=n(9941),o=function(t,e,n,r,i){var o=i.clientWidth,s=i.clientHeight,a="number"==typeof t.pageX?t.pageX:t.touches[0].pageX,l="number"==typeof t.pageY?t.pageY:t.touches[0].pageY,c=a-(i.getBoundingClientRect().left+window.pageXOffset),h=l-(i.getBoundingClientRect().top+window.pageYOffset);if("vertical"===n){var u=void 0;if(u=h<0?0:h>s?1:Math.round(100*h/s)/100,e.a!==u)return{h:e.h,s:e.s,l:e.l,a:u,source:"rgb"}}else{var d=void 0;if(r!==(d=c<0?0:c>o?1:Math.round(100*c/o)/100))return{h:e.h,s:e.s,l:e.l,a:d,source:"rgb"}}return null},s={},a=function(t,e,n,r){var i=t+"-"+e+"-"+n+(r?"-server":"");if(s[i])return s[i];var o=function(t,e,n,r){if("undefined"==typeof document&&!r)return null;var i=r?new r:document.createElement("canvas");i.width=2*n,i.height=2*n;var o=i.getContext("2d");return o?(o.fillStyle=t,o.fillRect(0,0,i.width,i.height),o.fillStyle=e,o.fillRect(0,0,n,n),o.translate(n,n),o.fillRect(0,0,n,n),i.toDataURL()):null}(t,e,n,r);return s[i]=o,o},l=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},c=function(t){var e=t.white,n=t.grey,o=t.size,s=t.renderers,c=t.borderRadius,h=t.boxShadow,u=t.children,d=(0,i.ZP)({default:{grid:{borderRadius:c,boxShadow:h,absolute:"0px 0px 0px 0px",background:"url("+a(e,n,o,s.canvas)+") center left"}}});return(0,r.isValidElement)(u)?r.cloneElement(u,l({},u.props,{style:l({},u.props.style,d.grid)})):r.createElement("div",{style:d.grid})};c.defaultProps={size:8,white:"transparent",grey:"rgba(0,0,0,.08)",renderers:{}};const h=c;var u=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},d=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}();function p(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function f(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}const g=function(t){function e(){var t,n,r;p(this,e);for(var i=arguments.length,s=Array(i),a=0;a<i;a++)s[a]=arguments[a];return n=r=f(this,(t=e.__proto__||Object.getPrototypeOf(e)).call.apply(t,[this].concat(s))),r.handleChange=function(t){var e=o(t,r.props.hsl,r.props.direction,r.props.a,r.container);e&&"function"==typeof r.props.onChange&&r.props.onChange(e,t)},r.handleMouseDown=function(t){r.handleChange(t),window.addEventListener("mousemove",r.handleChange),window.addEventListener("mouseup",r.handleMouseUp)},r.handleMouseUp=function(){r.unbindEventListeners()},r.unbindEventListeners=function(){window.removeEventListener("mousemove",r.handleChange),window.removeEventListener("mouseup",r.handleMouseUp)},f(r,n)}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),d(e,[{key:"componentWillUnmount",value:function(){this.unbindEventListeners()}},{key:"render",value:function(){var t=this,e=this.props.rgb,n=(0,i.ZP)({default:{alpha:{absolute:"0px 0px 0px 0px",borderRadius:this.props.radius},checkboard:{absolute:"0px 0px 0px 0px",overflow:"hidden",borderRadius:this.props.radius},gradient:{absolute:"0px 0px 0px 0px",background:"linear-gradient(to right, rgba("+e.r+","+e.g+","+e.b+", 0) 0%,\n           rgba("+e.r+","+e.g+","+e.b+", 1) 100%)",boxShadow:this.props.shadow,borderRadius:this.props.radius},container:{position:"relative",height:"100%",margin:"0 3px"},pointer:{position:"absolute",left:100*e.a+"%"},slider:{width:"4px",borderRadius:"1px",height:"8px",boxShadow:"0 0 2px rgba(0, 0, 0, .6)",background:"#fff",marginTop:"1px",transform:"translateX(-2px)"}},vertical:{gradient:{background:"linear-gradient(to bottom, rgba("+e.r+","+e.g+","+e.b+", 0) 0%,\n           rgba("+e.r+","+e.g+","+e.b+", 1) 100%)"},pointer:{left:0,top:100*e.a+"%"}},overwrite:u({},this.props.style)},{vertical:"vertical"===this.props.direction,overwrite:!0});return r.createElement("div",{style:n.alpha},r.createElement("div",{style:n.checkboard},r.createElement(h,{renderers:this.props.renderers})),r.createElement("div",{style:n.gradient}),r.createElement("div",{style:n.container,ref:function(e){return t.container=e},onMouseDown:this.handleMouseDown,onTouchMove:this.handleChange,onTouchStart:this.handleChange},r.createElement("div",{style:n.pointer},this.props.pointer?r.createElement(this.props.pointer,this.props):r.createElement("div",{style:n.slider}))))}}]),e}(r.PureComponent||r.Component);var m=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}();var y=[38,40],v=1;const b=function(t){function e(t){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var n=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this));return n.handleBlur=function(){n.state.blurValue&&n.setState({value:n.state.blurValue,blurValue:null})},n.handleChange=function(t){n.setUpdatedValue(t.target.value,t)},n.handleKeyDown=function(t){var e,r=function(t){return Number(String(t).replace(/%/g,""))}(t.target.value);if(!isNaN(r)&&(e=t.keyCode,y.indexOf(e)>-1)){var i=n.getArrowOffset(),o=38===t.keyCode?r+i:r-i;n.setUpdatedValue(o,t)}},n.handleDrag=function(t){if(n.props.dragLabel){var e=Math.round(n.props.value+t.movementX);e>=0&&e<=n.props.dragMax&&n.props.onChange&&n.props.onChange(n.getValueObjectWithLabel(e),t)}},n.handleMouseDown=function(t){n.props.dragLabel&&(t.preventDefault(),n.handleDrag(t),window.addEventListener("mousemove",n.handleDrag),window.addEventListener("mouseup",n.handleMouseUp))},n.handleMouseUp=function(){n.unbindEventListeners()},n.unbindEventListeners=function(){window.removeEventListener("mousemove",n.handleDrag),window.removeEventListener("mouseup",n.handleMouseUp)},n.state={value:String(t.value).toUpperCase(),blurValue:String(t.value).toUpperCase()},n.inputId="rc-editable-input-"+v++,n}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),m(e,[{key:"componentDidUpdate",value:function(t,e){this.props.value===this.state.value||t.value===this.props.value&&e.value===this.state.value||(this.input===document.activeElement?this.setState({blurValue:String(this.props.value).toUpperCase()}):this.setState({value:String(this.props.value).toUpperCase(),blurValue:!this.state.blurValue&&String(this.props.value).toUpperCase()}))}},{key:"componentWillUnmount",value:function(){this.unbindEventListeners()}},{key:"getValueObjectWithLabel",value:function(t){return function(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}({},this.props.label,t)}},{key:"getArrowOffset",value:function(){return this.props.arrowOffset||1}},{key:"setUpdatedValue",value:function(t,e){var n=this.props.label?this.getValueObjectWithLabel(t):t;this.props.onChange&&this.props.onChange(n,e),this.setState({value:t})}},{key:"render",value:function(){var t=this,e=(0,i.ZP)({default:{wrap:{position:"relative"}},"user-override":{wrap:this.props.style&&this.props.style.wrap?this.props.style.wrap:{},input:this.props.style&&this.props.style.input?this.props.style.input:{},label:this.props.style&&this.props.style.label?this.props.style.label:{}},"dragLabel-true":{label:{cursor:"ew-resize"}}},{"user-override":!0},this.props);return r.createElement("div",{style:e.wrap},r.createElement("input",{id:this.inputId,style:e.input,ref:function(e){return t.input=e},value:this.state.value,onKeyDown:this.handleKeyDown,onChange:this.handleChange,onBlur:this.handleBlur,placeholder:this.props.placeholder,spellCheck:"false"}),this.props.label&&!this.props.hideLabel?r.createElement("label",{htmlFor:this.inputId,style:e.label,onMouseDown:this.handleMouseDown},this.props.label):null)}}]),e}(r.PureComponent||r.Component);var w=function(t,e,n,r){var i=r.clientWidth,o=r.clientHeight,s="number"==typeof t.pageX?t.pageX:t.touches[0].pageX,a="number"==typeof t.pageY?t.pageY:t.touches[0].pageY,l=s-(r.getBoundingClientRect().left+window.pageXOffset),c=a-(r.getBoundingClientRect().top+window.pageYOffset);if("vertical"===e){var h=void 0;if(c<0)h=359;else if(c>o)h=0;else{h=360*(-100*c/o+100)/100}if(n.h!==h)return{h,s:n.s,l:n.l,a:n.a,source:"hsl"}}else{var u=void 0;if(l<0)u=0;else if(l>i)u=359;else{u=360*(100*l/i)/100}if(n.h!==u)return{h:u,s:n.s,l:n.l,a:n.a,source:"hsl"}}return null},x=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}();function k(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function S(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}const _=function(t){function e(){var t,n,r;k(this,e);for(var i=arguments.length,o=Array(i),s=0;s<i;s++)o[s]=arguments[s];return n=r=S(this,(t=e.__proto__||Object.getPrototypeOf(e)).call.apply(t,[this].concat(o))),r.handleChange=function(t){var e=w(t,r.props.direction,r.props.hsl,r.container);e&&"function"==typeof r.props.onChange&&r.props.onChange(e,t)},r.handleMouseDown=function(t){r.handleChange(t),window.addEventListener("mousemove",r.handleChange),window.addEventListener("mouseup",r.handleMouseUp)},r.handleMouseUp=function(){r.unbindEventListeners()},S(r,n)}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),x(e,[{key:"componentWillUnmount",value:function(){this.unbindEventListeners()}},{key:"unbindEventListeners",value:function(){window.removeEventListener("mousemove",this.handleChange),window.removeEventListener("mouseup",this.handleMouseUp)}},{key:"render",value:function(){var t=this,e=this.props.direction,n=void 0===e?"horizontal":e,o=(0,i.ZP)({default:{hue:{absolute:"0px 0px 0px 0px",borderRadius:this.props.radius,boxShadow:this.props.shadow},container:{padding:"0 2px",position:"relative",height:"100%",borderRadius:this.props.radius},pointer:{position:"absolute",left:100*this.props.hsl.h/360+"%"},slider:{marginTop:"1px",width:"4px",borderRadius:"1px",height:"8px",boxShadow:"0 0 2px rgba(0, 0, 0, .6)",background:"#fff",transform:"translateX(-2px)"}},vertical:{pointer:{left:"0px",top:-100*this.props.hsl.h/360+100+"%"}}},{vertical:"vertical"===n});return r.createElement("div",{style:o.hue},r.createElement("div",{className:"hue-"+n,style:o.container,ref:function(e){return t.container=e},onMouseDown:this.handleMouseDown,onTouchMove:this.handleChange,onTouchStart:this.handleChange},r.createElement("style",null,"\n            .hue-horizontal {\n              background: linear-gradient(to right, #f00 0%, #ff0 17%, #0f0\n                33%, #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);\n              background: -webkit-linear-gradient(to right, #f00 0%, #ff0\n                17%, #0f0 33%, #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);\n            }\n\n            .hue-vertical {\n              background: linear-gradient(to top, #f00 0%, #ff0 17%, #0f0 33%,\n                #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);\n              background: -webkit-linear-gradient(to top, #f00 0%, #ff0 17%,\n                #0f0 33%, #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);\n            }\n          "),r.createElement("div",{style:o.pointer},this.props.pointer?r.createElement(this.props.pointer,this.props):r.createElement("div",{style:o.slider}))))}}]),e}(r.PureComponent||r.Component);var E=n(5697),C=n.n(E);const O=function(){this.__data__=[],this.size=0};const M=function(t,e){return t===e||t!=t&&e!=e};const A=function(t,e){for(var n=t.length;n--;)if(M(t[n][0],e))return n;return-1};var T=Array.prototype.splice;const N=function(t){var e=this.__data__,n=A(e,t);return!(n<0)&&(n==e.length-1?e.pop():T.call(e,n,1),--this.size,!0)};const D=function(t){var e=this.__data__,n=A(e,t);return n<0?void 0:e[n][1]};const j=function(t){return A(this.__data__,t)>-1};const R=function(t,e){var n=this.__data__,r=A(n,t);return r<0?(++this.size,n.push([t,e])):n[r][1]=e,this};function P(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}P.prototype.clear=O,P.prototype.delete=N,P.prototype.get=D,P.prototype.has=j,P.prototype.set=R;const z=P;const I=function(){this.__data__=new z,this.size=0};const B=function(t){var e=this.__data__,n=e.delete(t);return this.size=e.size,n};const F=function(t){return this.__data__.get(t)};const $=function(t){return this.__data__.has(t)};const L="object"==typeof global&&global&&global.Object===Object&&global;var H="object"==typeof self&&self&&self.Object===Object&&self;const V=L||H||Function("return this")();const q=V.Symbol;var W=Object.prototype,U=W.hasOwnProperty,Y=W.toString,J=q?q.toStringTag:void 0;const X=function(t){var e=U.call(t,J),n=t[J];try{t[J]=void 0;var r=!0}catch(t){}var i=Y.call(t);return r&&(e?t[J]=n:delete t[J]),i};var K=Object.prototype.toString;const G=function(t){return K.call(t)};var Z=q?q.toStringTag:void 0;const Q=function(t){return null==t?void 0===t?"[object Undefined]":"[object Null]":Z&&Z in Object(t)?X(t):G(t)};const tt=function(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)};const et=function(t){if(!tt(t))return!1;var e=Q(t);return"[object Function]"==e||"[object GeneratorFunction]"==e||"[object AsyncFunction]"==e||"[object Proxy]"==e};const nt=V["__core-js_shared__"];var rt,it=(rt=/[^.]+$/.exec(nt&&nt.keys&&nt.keys.IE_PROTO||""))?"Symbol(src)_1."+rt:"";const ot=function(t){return!!it&&it in t};var st=Function.prototype.toString;const at=function(t){if(null!=t){try{return st.call(t)}catch(t){}try{return t+""}catch(t){}}return""};var lt=/^\[object .+?Constructor\]$/,ct=Function.prototype,ht=Object.prototype,ut=ct.toString,dt=ht.hasOwnProperty,pt=RegExp("^"+ut.call(dt).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");const ft=function(t){return!(!tt(t)||ot(t))&&(et(t)?pt:lt).test(at(t))};const gt=function(t,e){return null==t?void 0:t[e]};const mt=function(t,e){var n=gt(t,e);return ft(n)?n:void 0};const yt=mt(V,"Map");const vt=mt(Object,"create");const bt=function(){this.__data__=vt?vt(null):{},this.size=0};const wt=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e};var xt=Object.prototype.hasOwnProperty;const kt=function(t){var e=this.__data__;if(vt){var n=e[t];return"__lodash_hash_undefined__"===n?void 0:n}return xt.call(e,t)?e[t]:void 0};var St=Object.prototype.hasOwnProperty;const _t=function(t){var e=this.__data__;return vt?void 0!==e[t]:St.call(e,t)};const Et=function(t,e){var n=this.__data__;return this.size+=this.has(t)?0:1,n[t]=vt&&void 0===e?"__lodash_hash_undefined__":e,this};function Ct(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}Ct.prototype.clear=bt,Ct.prototype.delete=wt,Ct.prototype.get=kt,Ct.prototype.has=_t,Ct.prototype.set=Et;const Ot=Ct;const Mt=function(){this.size=0,this.__data__={hash:new Ot,map:new(yt||z),string:new Ot}};const At=function(t){var e=typeof t;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==t:null===t};const Tt=function(t,e){var n=t.__data__;return At(e)?n["string"==typeof e?"string":"hash"]:n.map};const Nt=function(t){var e=Tt(this,t).delete(t);return this.size-=e?1:0,e};const Dt=function(t){return Tt(this,t).get(t)};const jt=function(t){return Tt(this,t).has(t)};const Rt=function(t,e){var n=Tt(this,t),r=n.size;return n.set(t,e),this.size+=n.size==r?0:1,this};function Pt(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}Pt.prototype.clear=Mt,Pt.prototype.delete=Nt,Pt.prototype.get=Dt,Pt.prototype.has=jt,Pt.prototype.set=Rt;const zt=Pt;const It=function(t,e){var n=this.__data__;if(n instanceof z){var r=n.__data__;if(!yt||r.length<199)return r.push([t,e]),this.size=++n.size,this;n=this.__data__=new zt(r)}return n.set(t,e),this.size=n.size,this};function Bt(t){var e=this.__data__=new z(t);this.size=e.size}Bt.prototype.clear=I,Bt.prototype.delete=B,Bt.prototype.get=F,Bt.prototype.has=$,Bt.prototype.set=It;const Ft=Bt;const $t=function(){try{var t=mt(Object,"defineProperty");return t({},"",{}),t}catch(t){}}();const Lt=function(t,e,n){"__proto__"==e&&$t?$t(t,e,{configurable:!0,enumerable:!0,value:n,writable:!0}):t[e]=n};const Ht=function(t,e,n){(void 0!==n&&!M(t[e],n)||void 0===n&&!(e in t))&&Lt(t,e,n)};const Vt=function(t){return function(e,n,r){for(var i=-1,o=Object(e),s=r(e),a=s.length;a--;){var l=s[t?a:++i];if(!1===n(o[l],l,o))break}return e}}();var qt="object"==typeof exports&&exports&&!exports.nodeType&&exports,Wt=qt&&"object"==typeof module&&module&&!module.nodeType&&module,Ut=Wt&&Wt.exports===qt?V.Buffer:void 0,Yt=Ut?Ut.allocUnsafe:void 0;const Jt=function(t,e){if(e)return t.slice();var n=t.length,r=Yt?Yt(n):new t.constructor(n);return t.copy(r),r};const Xt=V.Uint8Array;const Kt=function(t){var e=new t.constructor(t.byteLength);return new Xt(e).set(new Xt(t)),e};const Gt=function(t,e){var n=e?Kt(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.length)};const Zt=function(t,e){var n=-1,r=t.length;for(e||(e=Array(r));++n<r;)e[n]=t[n];return e};var Qt=Object.create;const te=function(){function t(){}return function(e){if(!tt(e))return{};if(Qt)return Qt(e);t.prototype=e;var n=new t;return t.prototype=void 0,n}}();const ee=function(t,e){return function(n){return t(e(n))}};const ne=ee(Object.getPrototypeOf,Object);var re=Object.prototype;const ie=function(t){var e=t&&t.constructor;return t===("function"==typeof e&&e.prototype||re)};const oe=function(t){return"function"!=typeof t.constructor||ie(t)?{}:te(ne(t))};const se=function(t){return null!=t&&"object"==typeof t};const ae=function(t){return se(t)&&"[object Arguments]"==Q(t)};var le=Object.prototype,ce=le.hasOwnProperty,he=le.propertyIsEnumerable;const ue=ae(function(){return arguments}())?ae:function(t){return se(t)&&ce.call(t,"callee")&&!he.call(t,"callee")};const de=Array.isArray;const pe=function(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=9007199254740991};const fe=function(t){return null!=t&&pe(t.length)&&!et(t)};const ge=function(t){return se(t)&&fe(t)};const me=function(){return!1};var ye="object"==typeof exports&&exports&&!exports.nodeType&&exports,ve=ye&&"object"==typeof module&&module&&!module.nodeType&&module,be=ve&&ve.exports===ye?V.Buffer:void 0;const we=(be?be.isBuffer:void 0)||me;var xe=Function.prototype,ke=Object.prototype,Se=xe.toString,_e=ke.hasOwnProperty,Ee=Se.call(Object);const Ce=function(t){if(!se(t)||"[object Object]"!=Q(t))return!1;var e=ne(t);if(null===e)return!0;var n=_e.call(e,"constructor")&&e.constructor;return"function"==typeof n&&n instanceof n&&Se.call(n)==Ee};var Oe={};Oe["[object Float32Array]"]=Oe["[object Float64Array]"]=Oe["[object Int8Array]"]=Oe["[object Int16Array]"]=Oe["[object Int32Array]"]=Oe["[object Uint8Array]"]=Oe["[object Uint8ClampedArray]"]=Oe["[object Uint16Array]"]=Oe["[object Uint32Array]"]=!0,Oe["[object Arguments]"]=Oe["[object Array]"]=Oe["[object ArrayBuffer]"]=Oe["[object Boolean]"]=Oe["[object DataView]"]=Oe["[object Date]"]=Oe["[object Error]"]=Oe["[object Function]"]=Oe["[object Map]"]=Oe["[object Number]"]=Oe["[object Object]"]=Oe["[object RegExp]"]=Oe["[object Set]"]=Oe["[object String]"]=Oe["[object WeakMap]"]=!1;const Me=function(t){return se(t)&&pe(t.length)&&!!Oe[Q(t)]};const Ae=function(t){return function(e){return t(e)}};var Te="object"==typeof exports&&exports&&!exports.nodeType&&exports,Ne=Te&&"object"==typeof module&&module&&!module.nodeType&&module,De=Ne&&Ne.exports===Te&&L.process,je=function(){try{var t=Ne&&Ne.require&&Ne.require("util").types;return t||De&&De.binding&&De.binding("util")}catch(t){}}();var Re=je&&je.isTypedArray;const Pe=Re?Ae(Re):Me;const ze=function(t,e){if(("constructor"!==e||"function"!=typeof t[e])&&"__proto__"!=e)return t[e]};var Ie=Object.prototype.hasOwnProperty;const Be=function(t,e,n){var r=t[e];Ie.call(t,e)&&M(r,n)&&(void 0!==n||e in t)||Lt(t,e,n)};const Fe=function(t,e,n,r){var i=!n;n||(n={});for(var o=-1,s=e.length;++o<s;){var a=e[o],l=r?r(n[a],t[a],a,n,t):void 0;void 0===l&&(l=t[a]),i?Lt(n,a,l):Be(n,a,l)}return n};const $e=function(t,e){for(var n=-1,r=Array(t);++n<t;)r[n]=e(n);return r};var Le=/^(?:0|[1-9]\d*)$/;const He=function(t,e){var n=typeof t;return!!(e=null==e?9007199254740991:e)&&("number"==n||"symbol"!=n&&Le.test(t))&&t>-1&&t%1==0&&t<e};var Ve=Object.prototype.hasOwnProperty;const qe=function(t,e){var n=de(t),r=!n&&ue(t),i=!n&&!r&&we(t),o=!n&&!r&&!i&&Pe(t),s=n||r||i||o,a=s?$e(t.length,String):[],l=a.length;for(var c in t)!e&&!Ve.call(t,c)||s&&("length"==c||i&&("offset"==c||"parent"==c)||o&&("buffer"==c||"byteLength"==c||"byteOffset"==c)||He(c,l))||a.push(c);return a};const We=function(t){var e=[];if(null!=t)for(var n in Object(t))e.push(n);return e};var Ue=Object.prototype.hasOwnProperty;const Ye=function(t){if(!tt(t))return We(t);var e=ie(t),n=[];for(var r in t)("constructor"!=r||!e&&Ue.call(t,r))&&n.push(r);return n};const Je=function(t){return fe(t)?qe(t,!0):Ye(t)};const Xe=function(t){return Fe(t,Je(t))};const Ke=function(t,e,n,r,i,o,s){var a=ze(t,n),l=ze(e,n),c=s.get(l);if(c)Ht(t,n,c);else{var h=o?o(a,l,n+"",t,e,s):void 0,u=void 0===h;if(u){var d=de(l),p=!d&&we(l),f=!d&&!p&&Pe(l);h=l,d||p||f?de(a)?h=a:ge(a)?h=Zt(a):p?(u=!1,h=Jt(l,!0)):f?(u=!1,h=Gt(l,!0)):h=[]:Ce(l)||ue(l)?(h=a,ue(a)?h=Xe(a):tt(a)&&!et(a)||(h=oe(l))):u=!1}u&&(s.set(l,h),i(h,l,r,o,s),s.delete(l)),Ht(t,n,h)}};const Ge=function t(e,n,r,i,o){e!==n&&Vt(n,(function(s,a){if(o||(o=new Ft),tt(s))Ke(e,n,a,r,t,i,o);else{var l=i?i(ze(e,a),s,a+"",e,n,o):void 0;void 0===l&&(l=s),Ht(e,a,l)}}),Je)};const Ze=function(t){return t};const Qe=function(t,e,n){switch(n.length){case 0:return t.call(e);case 1:return t.call(e,n[0]);case 2:return t.call(e,n[0],n[1]);case 3:return t.call(e,n[0],n[1],n[2])}return t.apply(e,n)};var tn=Math.max;const en=function(t,e,n){return e=tn(void 0===e?t.length-1:e,0),function(){for(var r=arguments,i=-1,o=tn(r.length-e,0),s=Array(o);++i<o;)s[i]=r[e+i];i=-1;for(var a=Array(e+1);++i<e;)a[i]=r[i];return a[e]=n(s),Qe(t,this,a)}};const nn=function(t){return function(){return t}};const rn=$t?function(t,e){return $t(t,"toString",{configurable:!0,enumerable:!1,value:nn(e),writable:!0})}:Ze;var on=Date.now;const sn=function(t){var e=0,n=0;return function(){var r=on(),i=16-(r-n);if(n=r,i>0){if(++e>=800)return arguments[0]}else e=0;return t.apply(void 0,arguments)}}(rn);const an=function(t,e){return sn(en(t,e,Ze),t+"")};const ln=function(t,e,n){if(!tt(n))return!1;var r=typeof e;return!!("number"==r?fe(n)&&He(e,n.length):"string"==r&&e in n)&&M(n[e],t)};const cn=function(t){return an((function(e,n){var r=-1,i=n.length,o=i>1?n[i-1]:void 0,s=i>2?n[2]:void 0;for(o=t.length>3&&"function"==typeof o?(i--,o):void 0,s&&ln(n[0],n[1],s)&&(o=i<3?void 0:o,i=1),e=Object(e);++r<i;){var a=n[r];a&&t(e,a,r,o)}return e}))}((function(t,e,n){Ge(t,e,n)}));var hn=function(t){var e=t.zDepth,n=t.radius,o=t.background,s=t.children,a=t.styles,l=void 0===a?{}:a,c=(0,i.ZP)(cn({default:{wrap:{position:"relative",display:"inline-block"},content:{position:"relative"},bg:{absolute:"0px 0px 0px 0px",boxShadow:"0 "+e+"px "+4*e+"px rgba(0,0,0,.24)",borderRadius:n,background:o}},"zDepth-0":{bg:{boxShadow:"none"}},"zDepth-1":{bg:{boxShadow:"0 2px 10px rgba(0,0,0,.12), 0 2px 5px rgba(0,0,0,.16)"}},"zDepth-2":{bg:{boxShadow:"0 6px 20px rgba(0,0,0,.19), 0 8px 17px rgba(0,0,0,.2)"}},"zDepth-3":{bg:{boxShadow:"0 17px 50px rgba(0,0,0,.19), 0 12px 15px rgba(0,0,0,.24)"}},"zDepth-4":{bg:{boxShadow:"0 25px 55px rgba(0,0,0,.21), 0 16px 28px rgba(0,0,0,.22)"}},"zDepth-5":{bg:{boxShadow:"0 40px 77px rgba(0,0,0,.22), 0 27px 24px rgba(0,0,0,.2)"}},square:{bg:{borderRadius:"0"}},circle:{bg:{borderRadius:"50%"}}},l),{"zDepth-1":1===e});return r.createElement("div",{style:c.wrap},r.createElement("div",{style:c.bg}),r.createElement("div",{style:c.content},s))};hn.propTypes={background:C().string,zDepth:C().oneOf([0,1,2,3,4,5]),radius:C().number,styles:C().object},hn.defaultProps={background:"#fff",zDepth:1,radius:2,styles:{}};const un=hn;const dn=function(){return V.Date.now()};var pn=/\s/;const fn=function(t){for(var e=t.length;e--&&pn.test(t.charAt(e)););return e};var gn=/^\s+/;const mn=function(t){return t?t.slice(0,fn(t)+1).replace(gn,""):t};const yn=function(t){return"symbol"==typeof t||se(t)&&"[object Symbol]"==Q(t)};var vn=/^[-+]0x[0-9a-f]+$/i,bn=/^0b[01]+$/i,wn=/^0o[0-7]+$/i,xn=parseInt;const kn=function(t){if("number"==typeof t)return t;if(yn(t))return NaN;if(tt(t)){var e="function"==typeof t.valueOf?t.valueOf():t;t=tt(e)?e+"":e}if("string"!=typeof t)return 0===t?t:+t;t=mn(t);var n=bn.test(t);return n||wn.test(t)?xn(t.slice(2),n?2:8):vn.test(t)?NaN:+t};var Sn=Math.max,_n=Math.min;const En=function(t,e,n){var r,i,o,s,a,l,c=0,h=!1,u=!1,d=!0;if("function"!=typeof t)throw new TypeError("Expected a function");function p(e){var n=r,o=i;return r=i=void 0,c=e,s=t.apply(o,n)}function f(t){return c=t,a=setTimeout(m,e),h?p(t):s}function g(t){var n=t-l;return void 0===l||n>=e||n<0||u&&t-c>=o}function m(){var t=dn();if(g(t))return y(t);a=setTimeout(m,function(t){var n=e-(t-l);return u?_n(n,o-(t-c)):n}(t))}function y(t){return a=void 0,d&&r?p(t):(r=i=void 0,s)}function v(){var t=dn(),n=g(t);if(r=arguments,i=this,l=t,n){if(void 0===a)return f(l);if(u)return clearTimeout(a),a=setTimeout(m,e),p(l)}return void 0===a&&(a=setTimeout(m,e)),s}return e=kn(e)||0,tt(n)&&(h=!!n.leading,o=(u="maxWait"in n)?Sn(kn(n.maxWait)||0,e):o,d="trailing"in n?!!n.trailing:d),v.cancel=function(){void 0!==a&&clearTimeout(a),c=0,r=l=i=a=void 0},v.flush=function(){return void 0===a?s:y(dn())},v};const Cn=function(t,e,n){var r=!0,i=!0;if("function"!=typeof t)throw new TypeError("Expected a function");return tt(n)&&(r="leading"in n?!!n.leading:r,i="trailing"in n?!!n.trailing:i),En(t,e,{leading:r,maxWait:e,trailing:i})};var On=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}();var Mn=function(t){function e(t){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var n=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t));return n.handleChange=function(t){"function"==typeof n.props.onChange&&n.throttle(n.props.onChange,function(t,e,n){var r=n.getBoundingClientRect(),i=r.width,o=r.height,s="number"==typeof t.pageX?t.pageX:t.touches[0].pageX,a="number"==typeof t.pageY?t.pageY:t.touches[0].pageY,l=s-(n.getBoundingClientRect().left+window.pageXOffset),c=a-(n.getBoundingClientRect().top+window.pageYOffset);l<0?l=0:l>i&&(l=i),c<0?c=0:c>o&&(c=o);var h=l/i,u=1-c/o;return{h:e.h,s:h,v:u,a:e.a,source:"hsv"}}(t,n.props.hsl,n.container),t)},n.handleMouseDown=function(t){n.handleChange(t);var e=n.getContainerRenderWindow();e.addEventListener("mousemove",n.handleChange),e.addEventListener("mouseup",n.handleMouseUp)},n.handleMouseUp=function(){n.unbindEventListeners()},n.throttle=Cn((function(t,e,n){t(e,n)}),50),n}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),On(e,[{key:"componentWillUnmount",value:function(){this.throttle.cancel(),this.unbindEventListeners()}},{key:"getContainerRenderWindow",value:function(){for(var t=this.container,e=window;!e.document.contains(t)&&e.parent!==e;)e=e.parent;return e}},{key:"unbindEventListeners",value:function(){var t=this.getContainerRenderWindow();t.removeEventListener("mousemove",this.handleChange),t.removeEventListener("mouseup",this.handleMouseUp)}},{key:"render",value:function(){var t=this,e=this.props.style||{},n=e.color,o=e.white,s=e.black,a=e.pointer,l=e.circle,c=(0,i.ZP)({default:{color:{absolute:"0px 0px 0px 0px",background:"hsl("+this.props.hsl.h+",100%, 50%)",borderRadius:this.props.radius},white:{absolute:"0px 0px 0px 0px",borderRadius:this.props.radius},black:{absolute:"0px 0px 0px 0px",boxShadow:this.props.shadow,borderRadius:this.props.radius},pointer:{position:"absolute",top:-100*this.props.hsv.v+100+"%",left:100*this.props.hsv.s+"%",cursor:"default"},circle:{width:"4px",height:"4px",boxShadow:"0 0 0 1.5px #fff, inset 0 0 1px 1px rgba(0,0,0,.3),\n            0 0 1px 2px rgba(0,0,0,.4)",borderRadius:"50%",cursor:"hand",transform:"translate(-2px, -2px)"}},custom:{color:n,white:o,black:s,pointer:a,circle:l}},{custom:!!this.props.style});return r.createElement("div",{style:c.color,ref:function(e){return t.container=e},onMouseDown:this.handleMouseDown,onTouchMove:this.handleChange,onTouchStart:this.handleChange},r.createElement("style",null,"\n          .saturation-white {\n            background: -webkit-linear-gradient(to right, #fff, rgba(255,255,255,0));\n            background: linear-gradient(to right, #fff, rgba(255,255,255,0));\n          }\n          .saturation-black {\n            background: -webkit-linear-gradient(to top, #000, rgba(0,0,0,0));\n            background: linear-gradient(to top, #000, rgba(0,0,0,0));\n          }\n        "),r.createElement("div",{style:c.white,className:"saturation-white"},r.createElement("div",{style:c.black,className:"saturation-black"}),r.createElement("div",{style:c.pointer},this.props.pointer?r.createElement(this.props.pointer,this.props):r.createElement("div",{style:c.circle}))))}}]),e}(r.PureComponent||r.Component);const An=Mn;const Tn=function(t,e){for(var n=-1,r=null==t?0:t.length;++n<r&&!1!==e(t[n],n,t););return t};const Nn=ee(Object.keys,Object);var Dn=Object.prototype.hasOwnProperty;const jn=function(t){if(!ie(t))return Nn(t);var e=[];for(var n in Object(t))Dn.call(t,n)&&"constructor"!=n&&e.push(n);return e};const Rn=function(t){return fe(t)?qe(t):jn(t)};const Pn=function(t,e){return function(n,r){if(null==n)return n;if(!fe(n))return t(n,r);for(var i=n.length,o=e?i:-1,s=Object(n);(e?o--:++o<i)&&!1!==r(s[o],o,s););return n}}((function(t,e){return t&&Vt(t,e,Rn)}));const zn=function(t){return"function"==typeof t?t:Ze};const In=function(t,e){return(de(t)?Tn:Pn)(t,zn(e))};var Bn=n(7621),Fn=n.n(Bn),$n=function(t){var e=0,n=0;return In(["r","g","b","a","h","s","l","v"],(function(r){if(t[r]&&(e+=1,isNaN(t[r])||(n+=1),"s"===r||"l"===r)){/^\d+%$/.test(t[r])&&(n+=1)}})),e===n&&t},Ln=function(t,e){var n=t.hex?Fn()(t.hex):Fn()(t),r=n.toHsl(),i=n.toHsv(),o=n.toRgb(),s=n.toHex();return 0===r.s&&(r.h=e||0,i.h=e||0),{hsl:r,hex:"000000"===s&&0===o.a?"transparent":"#"+s,rgb:o,hsv:i,oldHue:t.h||e||r.h,source:t.source}},Hn=function(t){if("transparent"===t)return!0;var e="#"===String(t).charAt(0)?1:0;return t.length!==4+e&&t.length<7+e&&Fn()(t).isValid()},Vn=function(t){if(!t)return"#fff";var e=Ln(t);return"transparent"===e.hex?"rgba(0,0,0,0.4)":(299*e.rgb.r+587*e.rgb.g+114*e.rgb.b)/1e3>=128?"#000":"#fff"},qn=function(t,e){var n=t.replace("°","");return Fn()(e+" ("+n+")")._ok},Wn=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},Un=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}();const Yn=function(t){var e=function(e){function n(t){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,n);var e=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(n.__proto__||Object.getPrototypeOf(n)).call(this));return e.handleChange=function(t,n){if($n(t)){var r=Ln(t,t.h||e.state.oldHue);e.setState(r),e.props.onChangeComplete&&e.debounce(e.props.onChangeComplete,r,n),e.props.onChange&&e.props.onChange(r,n)}},e.handleSwatchHover=function(t,n){if($n(t)){var r=Ln(t,t.h||e.state.oldHue);e.props.onSwatchHover&&e.props.onSwatchHover(r,n)}},e.state=Wn({},Ln(t.color,0)),e.debounce=En((function(t,e,n){t(e,n)}),100),e}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(n,e),Un(n,[{key:"render",value:function(){var e={};return this.props.onSwatchHover&&(e.onSwatchHover=this.handleSwatchHover),r.createElement(t,Wn({},this.props,this.state,{onChange:this.handleChange},e))}}],[{key:"getDerivedStateFromProps",value:function(t,e){return Wn({},Ln(t.color,e.oldHue))}}]),n}(r.PureComponent||r.Component);return e.propTypes=Wn({},t.propTypes),e.defaultProps=Wn({},t.defaultProps,{color:{h:250,s:.5,l:.2,a:1}}),e};var Jn=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},Xn=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}();function Kn(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Gn(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function Zn(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}var Qn=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t};const tr=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"span";return function(n){function i(){var t,e,n;Kn(this,i);for(var r=arguments.length,o=Array(r),s=0;s<r;s++)o[s]=arguments[s];return e=n=Gn(this,(t=i.__proto__||Object.getPrototypeOf(i)).call.apply(t,[this].concat(o))),n.state={focus:!1},n.handleFocus=function(){return n.setState({focus:!0})},n.handleBlur=function(){return n.setState({focus:!1})},Gn(n,e)}return Zn(i,n),Xn(i,[{key:"render",value:function(){return r.createElement(e,{onFocus:this.handleFocus,onBlur:this.handleBlur},r.createElement(t,Jn({},this.props,this.state)))}}]),i}(r.Component)}((function(t){var e=t.color,n=t.style,o=t.onClick,s=void 0===o?function(){}:o,a=t.onHover,l=t.title,c=void 0===l?e:l,u=t.children,d=t.focus,p=t.focusStyle,f=void 0===p?{}:p,g="transparent"===e,m=(0,i.ZP)({default:{swatch:Qn({background:e,height:"100%",width:"100%",cursor:"pointer",position:"relative",outline:"none"},n,d?f:{})}}),y={};return a&&(y.onMouseOver=function(t){return a(e,t)}),r.createElement("div",Qn({style:m.swatch,onClick:function(t){return s(e,t)},title:c,tabIndex:0,onKeyDown:function(t){return 13===t.keyCode&&s(e,t)}},y),u,g&&r.createElement(h,{borderRadius:m.swatch.borderRadius,boxShadow:"inset 0 0 0 1px rgba(0,0,0,0.1)"}))}));const er=function(t){var e=t.direction,n=(0,i.ZP)({default:{picker:{width:"18px",height:"18px",borderRadius:"50%",transform:"translate(-9px, -1px)",backgroundColor:"rgb(248, 248, 248)",boxShadow:"0 1px 4px 0 rgba(0, 0, 0, 0.37)"}},vertical:{picker:{transform:"translate(-3px, -9px)"}}},{vertical:"vertical"===e});return r.createElement("div",{style:n.picker})};var nr=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},rr=function(t){var e=t.rgb,n=t.hsl,o=t.width,s=t.height,a=t.onChange,l=t.direction,c=t.style,h=t.renderers,u=t.pointer,d=t.className,p=void 0===d?"":d,f=(0,i.ZP)({default:{picker:{position:"relative",width:o,height:s},alpha:{radius:"2px",style:c}}});return r.createElement("div",{style:f.picker,className:"alpha-picker "+p},r.createElement(g,nr({},f.alpha,{rgb:e,hsl:n,pointer:u,renderers:h,onChange:a,direction:l})))};rr.defaultProps={width:"316px",height:"16px",direction:"horizontal",pointer:er};Yn(rr);const ir=function(t,e){for(var n=-1,r=null==t?0:t.length,i=Array(r);++n<r;)i[n]=e(t[n],n,t);return i};const or=function(t){return this.__data__.set(t,"__lodash_hash_undefined__"),this};const sr=function(t){return this.__data__.has(t)};function ar(t){var e=-1,n=null==t?0:t.length;for(this.__data__=new zt;++e<n;)this.add(t[e])}ar.prototype.add=ar.prototype.push=or,ar.prototype.has=sr;const lr=ar;const cr=function(t,e){for(var n=-1,r=null==t?0:t.length;++n<r;)if(e(t[n],n,t))return!0;return!1};const hr=function(t,e){return t.has(e)};const ur=function(t,e,n,r,i,o){var s=1&n,a=t.length,l=e.length;if(a!=l&&!(s&&l>a))return!1;var c=o.get(t),h=o.get(e);if(c&&h)return c==e&&h==t;var u=-1,d=!0,p=2&n?new lr:void 0;for(o.set(t,e),o.set(e,t);++u<a;){var f=t[u],g=e[u];if(r)var m=s?r(g,f,u,e,t,o):r(f,g,u,t,e,o);if(void 0!==m){if(m)continue;d=!1;break}if(p){if(!cr(e,(function(t,e){if(!hr(p,e)&&(f===t||i(f,t,n,r,o)))return p.push(e)}))){d=!1;break}}else if(f!==g&&!i(f,g,n,r,o)){d=!1;break}}return o.delete(t),o.delete(e),d};const dr=function(t){var e=-1,n=Array(t.size);return t.forEach((function(t,r){n[++e]=[r,t]})),n};const pr=function(t){var e=-1,n=Array(t.size);return t.forEach((function(t){n[++e]=t})),n};var fr=q?q.prototype:void 0,gr=fr?fr.valueOf:void 0;const mr=function(t,e,n,r,i,o,s){switch(n){case"[object DataView]":if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case"[object ArrayBuffer]":return!(t.byteLength!=e.byteLength||!o(new Xt(t),new Xt(e)));case"[object Boolean]":case"[object Date]":case"[object Number]":return M(+t,+e);case"[object Error]":return t.name==e.name&&t.message==e.message;case"[object RegExp]":case"[object String]":return t==e+"";case"[object Map]":var a=dr;case"[object Set]":var l=1&r;if(a||(a=pr),t.size!=e.size&&!l)return!1;var c=s.get(t);if(c)return c==e;r|=2,s.set(t,e);var h=ur(a(t),a(e),r,i,o,s);return s.delete(t),h;case"[object Symbol]":if(gr)return gr.call(t)==gr.call(e)}return!1};const yr=function(t,e){for(var n=-1,r=e.length,i=t.length;++n<r;)t[i+n]=e[n];return t};const vr=function(t,e,n){var r=e(t);return de(t)?r:yr(r,n(t))};const br=function(t,e){for(var n=-1,r=null==t?0:t.length,i=0,o=[];++n<r;){var s=t[n];e(s,n,t)&&(o[i++]=s)}return o};const wr=function(){return[]};var xr=Object.prototype.propertyIsEnumerable,kr=Object.getOwnPropertySymbols;const Sr=kr?function(t){return null==t?[]:(t=Object(t),br(kr(t),(function(e){return xr.call(t,e)})))}:wr;const _r=function(t){return vr(t,Rn,Sr)};var Er=Object.prototype.hasOwnProperty;const Cr=function(t,e,n,r,i,o){var s=1&n,a=_r(t),l=a.length;if(l!=_r(e).length&&!s)return!1;for(var c=l;c--;){var h=a[c];if(!(s?h in e:Er.call(e,h)))return!1}var u=o.get(t),d=o.get(e);if(u&&d)return u==e&&d==t;var p=!0;o.set(t,e),o.set(e,t);for(var f=s;++c<l;){var g=t[h=a[c]],m=e[h];if(r)var y=s?r(m,g,h,e,t,o):r(g,m,h,t,e,o);if(!(void 0===y?g===m||i(g,m,n,r,o):y)){p=!1;break}f||(f="constructor"==h)}if(p&&!f){var v=t.constructor,b=e.constructor;v==b||!("constructor"in t)||!("constructor"in e)||"function"==typeof v&&v instanceof v&&"function"==typeof b&&b instanceof b||(p=!1)}return o.delete(t),o.delete(e),p};const Or=mt(V,"DataView");const Mr=mt(V,"Promise");const Ar=mt(V,"Set");const Tr=mt(V,"WeakMap");var Nr="[object Map]",Dr="[object Promise]",jr="[object Set]",Rr="[object WeakMap]",Pr="[object DataView]",zr=at(Or),Ir=at(yt),Br=at(Mr),Fr=at(Ar),$r=at(Tr),Lr=Q;(Or&&Lr(new Or(new ArrayBuffer(1)))!=Pr||yt&&Lr(new yt)!=Nr||Mr&&Lr(Mr.resolve())!=Dr||Ar&&Lr(new Ar)!=jr||Tr&&Lr(new Tr)!=Rr)&&(Lr=function(t){var e=Q(t),n="[object Object]"==e?t.constructor:void 0,r=n?at(n):"";if(r)switch(r){case zr:return Pr;case Ir:return Nr;case Br:return Dr;case Fr:return jr;case $r:return Rr}return e});const Hr=Lr;var Vr="[object Arguments]",qr="[object Array]",Wr="[object Object]",Ur=Object.prototype.hasOwnProperty;const Yr=function(t,e,n,r,i,o){var s=de(t),a=de(e),l=s?qr:Hr(t),c=a?qr:Hr(e),h=(l=l==Vr?Wr:l)==Wr,u=(c=c==Vr?Wr:c)==Wr,d=l==c;if(d&&we(t)){if(!we(e))return!1;s=!0,h=!1}if(d&&!h)return o||(o=new Ft),s||Pe(t)?ur(t,e,n,r,i,o):mr(t,e,l,n,r,i,o);if(!(1&n)){var p=h&&Ur.call(t,"__wrapped__"),f=u&&Ur.call(e,"__wrapped__");if(p||f){var g=p?t.value():t,m=f?e.value():e;return o||(o=new Ft),i(g,m,n,r,o)}}return!!d&&(o||(o=new Ft),Cr(t,e,n,r,i,o))};const Jr=function t(e,n,r,i,o){return e===n||(null==e||null==n||!se(e)&&!se(n)?e!=e&&n!=n:Yr(e,n,r,i,t,o))};const Xr=function(t,e,n,r){var i=n.length,o=i,s=!r;if(null==t)return!o;for(t=Object(t);i--;){var a=n[i];if(s&&a[2]?a[1]!==t[a[0]]:!(a[0]in t))return!1}for(;++i<o;){var l=(a=n[i])[0],c=t[l],h=a[1];if(s&&a[2]){if(void 0===c&&!(l in t))return!1}else{var u=new Ft;if(r)var d=r(c,h,l,t,e,u);if(!(void 0===d?Jr(h,c,3,r,u):d))return!1}}return!0};const Kr=function(t){return t==t&&!tt(t)};const Gr=function(t){for(var e=Rn(t),n=e.length;n--;){var r=e[n],i=t[r];e[n]=[r,i,Kr(i)]}return e};const Zr=function(t,e){return function(n){return null!=n&&(n[t]===e&&(void 0!==e||t in Object(n)))}};const Qr=function(t){var e=Gr(t);return 1==e.length&&e[0][2]?Zr(e[0][0],e[0][1]):function(n){return n===t||Xr(n,t,e)}};var ti=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,ei=/^\w*$/;const ni=function(t,e){if(de(t))return!1;var n=typeof t;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=t&&!yn(t))||(ei.test(t)||!ti.test(t)||null!=e&&t in Object(e))};function ri(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new TypeError("Expected a function");var n=function(){var r=arguments,i=e?e.apply(this,r):r[0],o=n.cache;if(o.has(i))return o.get(i);var s=t.apply(this,r);return n.cache=o.set(i,s)||o,s};return n.cache=new(ri.Cache||zt),n}ri.Cache=zt;const ii=ri;var oi=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,si=/\\(\\)?/g;const ai=function(t){var e=ii(t,(function(t){return 500===n.size&&n.clear(),t})),n=e.cache;return e}((function(t){var e=[];return 46===t.charCodeAt(0)&&e.push(""),t.replace(oi,(function(t,n,r,i){e.push(r?i.replace(si,"$1"):n||t)})),e}));var li=q?q.prototype:void 0,ci=li?li.toString:void 0;const hi=function t(e){if("string"==typeof e)return e;if(de(e))return ir(e,t)+"";if(yn(e))return ci?ci.call(e):"";var n=e+"";return"0"==n&&1/e==-Infinity?"-0":n};const ui=function(t){return null==t?"":hi(t)};const di=function(t,e){return de(t)?t:ni(t,e)?[t]:ai(ui(t))};const pi=function(t){if("string"==typeof t||yn(t))return t;var e=t+"";return"0"==e&&1/t==-Infinity?"-0":e};const fi=function(t,e){for(var n=0,r=(e=di(e,t)).length;null!=t&&n<r;)t=t[pi(e[n++])];return n&&n==r?t:void 0};const gi=function(t,e,n){var r=null==t?void 0:fi(t,e);return void 0===r?n:r};const mi=function(t,e){return null!=t&&e in Object(t)};const yi=function(t,e,n){for(var r=-1,i=(e=di(e,t)).length,o=!1;++r<i;){var s=pi(e[r]);if(!(o=null!=t&&n(t,s)))break;t=t[s]}return o||++r!=i?o:!!(i=null==t?0:t.length)&&pe(i)&&He(s,i)&&(de(t)||ue(t))};const vi=function(t,e){return null!=t&&yi(t,e,mi)};const bi=function(t,e){return ni(t)&&Kr(e)?Zr(pi(t),e):function(n){var r=gi(n,t);return void 0===r&&r===e?vi(n,t):Jr(e,r,3)}};const wi=function(t){return function(e){return null==e?void 0:e[t]}};const xi=function(t){return function(e){return fi(e,t)}};const ki=function(t){return ni(t)?wi(pi(t)):xi(t)};const Si=function(t){return"function"==typeof t?t:null==t?Ze:"object"==typeof t?de(t)?bi(t[0],t[1]):Qr(t):ki(t)};const _i=function(t,e){var n=-1,r=fe(t)?Array(t.length):[];return Pn(t,(function(t,i,o){r[++n]=e(t,i,o)})),r};const Ei=function(t,e){return(de(t)?ir:_i)(t,Si(e,3))};const Ci=function(t){var e=t.colors,n=t.onClick,o=t.onSwatchHover,s=(0,i.ZP)({default:{swatches:{marginRight:"-10px"},swatch:{width:"22px",height:"22px",float:"left",marginRight:"10px",marginBottom:"10px",borderRadius:"4px"},clear:{clear:"both"}}});return r.createElement("div",{style:s.swatches},Ei(e,(function(t){return r.createElement(tr,{key:t,color:t,style:s.swatch,onClick:n,onHover:o,focusStyle:{boxShadow:"0 0 4px "+t}})})),r.createElement("div",{style:s.clear}))};var Oi=function(t){var e=t.onChange,n=t.onSwatchHover,o=t.hex,s=t.colors,a=t.width,l=t.triangle,c=t.styles,u=void 0===c?{}:c,d=t.className,p=void 0===d?"":d,f="transparent"===o,g=function(t,n){Hn(t)&&e({hex:t,source:"hex"},n)},m=(0,i.ZP)(cn({default:{card:{width:a,background:"#fff",boxShadow:"0 1px rgba(0,0,0,.1)",borderRadius:"6px",position:"relative"},head:{height:"110px",background:o,borderRadius:"6px 6px 0 0",display:"flex",alignItems:"center",justifyContent:"center",position:"relative"},body:{padding:"10px"},label:{fontSize:"18px",color:Vn(o),position:"relative"},triangle:{width:"0px",height:"0px",borderStyle:"solid",borderWidth:"0 10px 10px 10px",borderColor:"transparent transparent "+o+" transparent",position:"absolute",top:"-10px",left:"50%",marginLeft:"-10px"},input:{width:"100%",fontSize:"12px",color:"#666",border:"0px",outline:"none",height:"22px",boxShadow:"inset 0 0 0 1px #ddd",borderRadius:"4px",padding:"0 7px",boxSizing:"border-box"}},"hide-triangle":{triangle:{display:"none"}}},u),{"hide-triangle":"hide"===l});return r.createElement("div",{style:m.card,className:"block-picker "+p},r.createElement("div",{style:m.triangle}),r.createElement("div",{style:m.head},f&&r.createElement(h,{borderRadius:"6px 6px 0 0"}),r.createElement("div",{style:m.label},o)),r.createElement("div",{style:m.body},r.createElement(Ci,{colors:s,onClick:g,onSwatchHover:n}),r.createElement(b,{style:{input:m.input},value:o,onChange:g})))};Oi.propTypes={width:C().oneOfType([C().string,C().number]),colors:C().arrayOf(C().string),triangle:C().oneOf(["top","hide"]),styles:C().object},Oi.defaultProps={width:170,colors:["#D9E3F0","#F47373","#697689","#37D67A","#2CCCE4","#555555","#dce775","#ff8a65","#ba68c8"],triangle:"top",styles:{}};Yn(Oi);var Mi={50:"#ffebee",100:"#ffcdd2",200:"#ef9a9a",300:"#e57373",400:"#ef5350",500:"#f44336",600:"#e53935",700:"#d32f2f",800:"#c62828",900:"#b71c1c",a100:"#ff8a80",a200:"#ff5252",a400:"#ff1744",a700:"#d50000"},Ai={50:"#fce4ec",100:"#f8bbd0",200:"#f48fb1",300:"#f06292",400:"#ec407a",500:"#e91e63",600:"#d81b60",700:"#c2185b",800:"#ad1457",900:"#880e4f",a100:"#ff80ab",a200:"#ff4081",a400:"#f50057",a700:"#c51162"},Ti={50:"#f3e5f5",100:"#e1bee7",200:"#ce93d8",300:"#ba68c8",400:"#ab47bc",500:"#9c27b0",600:"#8e24aa",700:"#7b1fa2",800:"#6a1b9a",900:"#4a148c",a100:"#ea80fc",a200:"#e040fb",a400:"#d500f9",a700:"#aa00ff"},Ni={50:"#ede7f6",100:"#d1c4e9",200:"#b39ddb",300:"#9575cd",400:"#7e57c2",500:"#673ab7",600:"#5e35b1",700:"#512da8",800:"#4527a0",900:"#311b92",a100:"#b388ff",a200:"#7c4dff",a400:"#651fff",a700:"#6200ea"},Di={50:"#e8eaf6",100:"#c5cae9",200:"#9fa8da",300:"#7986cb",400:"#5c6bc0",500:"#3f51b5",600:"#3949ab",700:"#303f9f",800:"#283593",900:"#1a237e",a100:"#8c9eff",a200:"#536dfe",a400:"#3d5afe",a700:"#304ffe"},ji={50:"#e3f2fd",100:"#bbdefb",200:"#90caf9",300:"#64b5f6",400:"#42a5f5",500:"#2196f3",600:"#1e88e5",700:"#1976d2",800:"#1565c0",900:"#0d47a1",a100:"#82b1ff",a200:"#448aff",a400:"#2979ff",a700:"#2962ff"},Ri={50:"#e1f5fe",100:"#b3e5fc",200:"#81d4fa",300:"#4fc3f7",400:"#29b6f6",500:"#03a9f4",600:"#039be5",700:"#0288d1",800:"#0277bd",900:"#01579b",a100:"#80d8ff",a200:"#40c4ff",a400:"#00b0ff",a700:"#0091ea"},Pi={50:"#e0f7fa",100:"#b2ebf2",200:"#80deea",300:"#4dd0e1",400:"#26c6da",500:"#00bcd4",600:"#00acc1",700:"#0097a7",800:"#00838f",900:"#006064",a100:"#84ffff",a200:"#18ffff",a400:"#00e5ff",a700:"#00b8d4"},zi={50:"#e0f2f1",100:"#b2dfdb",200:"#80cbc4",300:"#4db6ac",400:"#26a69a",500:"#009688",600:"#00897b",700:"#00796b",800:"#00695c",900:"#004d40",a100:"#a7ffeb",a200:"#64ffda",a400:"#1de9b6",a700:"#00bfa5"},Ii={50:"#e8f5e9",100:"#c8e6c9",200:"#a5d6a7",300:"#81c784",400:"#66bb6a",500:"#4caf50",600:"#43a047",700:"#388e3c",800:"#2e7d32",900:"#1b5e20",a100:"#b9f6ca",a200:"#69f0ae",a400:"#00e676",a700:"#00c853"},Bi={50:"#f1f8e9",100:"#dcedc8",200:"#c5e1a5",300:"#aed581",400:"#9ccc65",500:"#8bc34a",600:"#7cb342",700:"#689f38",800:"#558b2f",900:"#33691e",a100:"#ccff90",a200:"#b2ff59",a400:"#76ff03",a700:"#64dd17"},Fi={50:"#f9fbe7",100:"#f0f4c3",200:"#e6ee9c",300:"#dce775",400:"#d4e157",500:"#cddc39",600:"#c0ca33",700:"#afb42b",800:"#9e9d24",900:"#827717",a100:"#f4ff81",a200:"#eeff41",a400:"#c6ff00",a700:"#aeea00"},$i={50:"#fffde7",100:"#fff9c4",200:"#fff59d",300:"#fff176",400:"#ffee58",500:"#ffeb3b",600:"#fdd835",700:"#fbc02d",800:"#f9a825",900:"#f57f17",a100:"#ffff8d",a200:"#ffff00",a400:"#ffea00",a700:"#ffd600"},Li={50:"#fff8e1",100:"#ffecb3",200:"#ffe082",300:"#ffd54f",400:"#ffca28",500:"#ffc107",600:"#ffb300",700:"#ffa000",800:"#ff8f00",900:"#ff6f00",a100:"#ffe57f",a200:"#ffd740",a400:"#ffc400",a700:"#ffab00"},Hi={50:"#fff3e0",100:"#ffe0b2",200:"#ffcc80",300:"#ffb74d",400:"#ffa726",500:"#ff9800",600:"#fb8c00",700:"#f57c00",800:"#ef6c00",900:"#e65100",a100:"#ffd180",a200:"#ffab40",a400:"#ff9100",a700:"#ff6d00"},Vi={50:"#fbe9e7",100:"#ffccbc",200:"#ffab91",300:"#ff8a65",400:"#ff7043",500:"#ff5722",600:"#f4511e",700:"#e64a19",800:"#d84315",900:"#bf360c",a100:"#ff9e80",a200:"#ff6e40",a400:"#ff3d00",a700:"#dd2c00"},qi={50:"#efebe9",100:"#d7ccc8",200:"#bcaaa4",300:"#a1887f",400:"#8d6e63",500:"#795548",600:"#6d4c41",700:"#5d4037",800:"#4e342e",900:"#3e2723"},Wi={50:"#eceff1",100:"#cfd8dc",200:"#b0bec5",300:"#90a4ae",400:"#78909c",500:"#607d8b",600:"#546e7a",700:"#455a64",800:"#37474f",900:"#263238"};var Ui=function(t){var e=t.color,n=t.onClick,o=t.onSwatchHover,s=t.hover,a=t.active,l=t.circleSize,c=t.circleSpacing,h=(0,i.ZP)({default:{swatch:{width:l,height:l,marginRight:c,marginBottom:c,transform:"scale(1)",transition:"100ms transform ease"},Swatch:{borderRadius:"50%",background:"transparent",boxShadow:"inset 0 0 0 "+(l/2+1)+"px "+e,transition:"100ms box-shadow ease"}},hover:{swatch:{transform:"scale(1.2)"}},active:{Swatch:{boxShadow:"inset 0 0 0 3px "+e}}},{hover:s,active:a});return r.createElement("div",{style:h.swatch},r.createElement(tr,{style:h.Swatch,color:e,onClick:n,onHover:o,focusStyle:{boxShadow:h.Swatch.boxShadow+", 0 0 5px "+e}}))};Ui.defaultProps={circleSize:28,circleSpacing:14};const Yi=(0,i.tz)(Ui);var Ji=function(t){var e=t.width,n=t.onChange,o=t.onSwatchHover,s=t.colors,a=t.hex,l=t.circleSize,c=t.styles,h=void 0===c?{}:c,u=t.circleSpacing,d=t.className,p=void 0===d?"":d,f=(0,i.ZP)(cn({default:{card:{width:e,display:"flex",flexWrap:"wrap",marginRight:-u,marginBottom:-u}}},h)),g=function(t,e){return n({hex:t,source:"hex"},e)};return r.createElement("div",{style:f.card,className:"circle-picker "+p},Ei(s,(function(t){return r.createElement(Yi,{key:t,color:t,onClick:g,onSwatchHover:o,active:a===t.toLowerCase(),circleSize:l,circleSpacing:u})})))};Ji.propTypes={width:C().oneOfType([C().string,C().number]),circleSize:C().number,circleSpacing:C().number,styles:C().object},Ji.defaultProps={width:252,circleSize:28,circleSpacing:14,colors:[Mi[500],Ai[500],Ti[500],Ni[500],Di[500],ji[500],Ri[500],Pi[500],zi[500],Ii[500],Bi[500],Fi[500],$i[500],Li[500],Hi[500],Vi[500],qi[500],Wi[500]],styles:{}};Yn(Ji);const Xi=function(t){return void 0===t};var Ki=n(3891),Gi=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}();var Zi=function(t){function e(t){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var n=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this));return n.toggleViews=function(){"hex"===n.state.view?n.setState({view:"rgb"}):"rgb"===n.state.view?n.setState({view:"hsl"}):"hsl"===n.state.view&&(1===n.props.hsl.a?n.setState({view:"hex"}):n.setState({view:"rgb"}))},n.handleChange=function(t,e){t.hex?Hn(t.hex)&&n.props.onChange({hex:t.hex,source:"hex"},e):t.r||t.g||t.b?n.props.onChange({r:t.r||n.props.rgb.r,g:t.g||n.props.rgb.g,b:t.b||n.props.rgb.b,source:"rgb"},e):t.a?(t.a<0?t.a=0:t.a>1&&(t.a=1),n.props.onChange({h:n.props.hsl.h,s:n.props.hsl.s,l:n.props.hsl.l,a:Math.round(100*t.a)/100,source:"rgb"},e)):(t.h||t.s||t.l)&&("string"==typeof t.s&&t.s.includes("%")&&(t.s=t.s.replace("%","")),"string"==typeof t.l&&t.l.includes("%")&&(t.l=t.l.replace("%","")),1==t.s?t.s=.01:1==t.l&&(t.l=.01),n.props.onChange({h:t.h||n.props.hsl.h,s:Number(Xi(t.s)?n.props.hsl.s:t.s),l:Number(Xi(t.l)?n.props.hsl.l:t.l),source:"hsl"},e))},n.showHighlight=function(t){t.currentTarget.style.background="#eee"},n.hideHighlight=function(t){t.currentTarget.style.background="transparent"},1!==t.hsl.a&&"hex"===t.view?n.state={view:"rgb"}:n.state={view:t.view},n}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),Gi(e,[{key:"render",value:function(){var t=this,e=(0,i.ZP)({default:{wrap:{paddingTop:"16px",display:"flex"},fields:{flex:"1",display:"flex",marginLeft:"-6px"},field:{paddingLeft:"6px",width:"100%"},alpha:{paddingLeft:"6px",width:"100%"},toggle:{width:"32px",textAlign:"right",position:"relative"},icon:{marginRight:"-4px",marginTop:"12px",cursor:"pointer",position:"relative"},iconHighlight:{position:"absolute",width:"24px",height:"28px",background:"#eee",borderRadius:"4px",top:"10px",left:"12px",display:"none"},input:{fontSize:"11px",color:"#333",width:"100%",borderRadius:"2px",border:"none",boxShadow:"inset 0 0 0 1px #dadada",height:"21px",textAlign:"center"},label:{textTransform:"uppercase",fontSize:"11px",lineHeight:"11px",color:"#969696",textAlign:"center",display:"block",marginTop:"12px"},svg:{fill:"#333",width:"24px",height:"24px",border:"1px transparent solid",borderRadius:"5px"}},disableAlpha:{alpha:{display:"none"}}},this.props,this.state),n=void 0;return"hex"===this.state.view?n=r.createElement("div",{style:e.fields,className:"flexbox-fix"},r.createElement("div",{style:e.field},r.createElement(b,{style:{input:e.input,label:e.label},label:"hex",value:this.props.hex,onChange:this.handleChange}))):"rgb"===this.state.view?n=r.createElement("div",{style:e.fields,className:"flexbox-fix"},r.createElement("div",{style:e.field},r.createElement(b,{style:{input:e.input,label:e.label},label:"r",value:this.props.rgb.r,onChange:this.handleChange})),r.createElement("div",{style:e.field},r.createElement(b,{style:{input:e.input,label:e.label},label:"g",value:this.props.rgb.g,onChange:this.handleChange})),r.createElement("div",{style:e.field},r.createElement(b,{style:{input:e.input,label:e.label},label:"b",value:this.props.rgb.b,onChange:this.handleChange})),r.createElement("div",{style:e.alpha},r.createElement(b,{style:{input:e.input,label:e.label},label:"a",value:this.props.rgb.a,arrowOffset:.01,onChange:this.handleChange}))):"hsl"===this.state.view&&(n=r.createElement("div",{style:e.fields,className:"flexbox-fix"},r.createElement("div",{style:e.field},r.createElement(b,{style:{input:e.input,label:e.label},label:"h",value:Math.round(this.props.hsl.h),onChange:this.handleChange})),r.createElement("div",{style:e.field},r.createElement(b,{style:{input:e.input,label:e.label},label:"s",value:Math.round(100*this.props.hsl.s)+"%",onChange:this.handleChange})),r.createElement("div",{style:e.field},r.createElement(b,{style:{input:e.input,label:e.label},label:"l",value:Math.round(100*this.props.hsl.l)+"%",onChange:this.handleChange})),r.createElement("div",{style:e.alpha},r.createElement(b,{style:{input:e.input,label:e.label},label:"a",value:this.props.hsl.a,arrowOffset:.01,onChange:this.handleChange})))),r.createElement("div",{style:e.wrap,className:"flexbox-fix"},n,r.createElement("div",{style:e.toggle},r.createElement("div",{style:e.icon,onClick:this.toggleViews,ref:function(e){return t.icon=e}},r.createElement(Ki.Z,{style:e.svg,onMouseOver:this.showHighlight,onMouseEnter:this.showHighlight,onMouseOut:this.hideHighlight}))))}}],[{key:"getDerivedStateFromProps",value:function(t,e){return 1!==t.hsl.a&&"hex"===e.view?{view:"rgb"}:null}}]),e}(r.Component);Zi.defaultProps={view:"hex"};const Qi=Zi;const to=function(){var t=(0,i.ZP)({default:{picker:{width:"12px",height:"12px",borderRadius:"6px",transform:"translate(-6px, -1px)",backgroundColor:"rgb(248, 248, 248)",boxShadow:"0 1px 4px 0 rgba(0, 0, 0, 0.37)"}}});return r.createElement("div",{style:t.picker})};const eo=function(){var t=(0,i.ZP)({default:{picker:{width:"12px",height:"12px",borderRadius:"6px",boxShadow:"inset 0 0 0 1px #fff",transform:"translate(-6px, -6px)"}}});return r.createElement("div",{style:t.picker})};var no=function(t){var e=t.width,n=t.onChange,o=t.disableAlpha,s=t.rgb,a=t.hsl,l=t.hsv,c=t.hex,u=t.renderers,d=t.styles,p=void 0===d?{}:d,f=t.className,m=void 0===f?"":f,y=t.defaultView,v=(0,i.ZP)(cn({default:{picker:{width:e,background:"#fff",borderRadius:"2px",boxShadow:"0 0 2px rgba(0,0,0,.3), 0 4px 8px rgba(0,0,0,.3)",boxSizing:"initial",fontFamily:"Menlo"},saturation:{width:"100%",paddingBottom:"55%",position:"relative",borderRadius:"2px 2px 0 0",overflow:"hidden"},Saturation:{radius:"2px 2px 0 0"},body:{padding:"16px 16px 12px"},controls:{display:"flex"},color:{width:"32px"},swatch:{marginTop:"6px",width:"16px",height:"16px",borderRadius:"8px",position:"relative",overflow:"hidden"},active:{absolute:"0px 0px 0px 0px",borderRadius:"8px",boxShadow:"inset 0 0 0 1px rgba(0,0,0,.1)",background:"rgba("+s.r+", "+s.g+", "+s.b+", "+s.a+")",zIndex:"2"},toggles:{flex:"1"},hue:{height:"10px",position:"relative",marginBottom:"8px"},Hue:{radius:"2px"},alpha:{height:"10px",position:"relative"},Alpha:{radius:"2px"}},disableAlpha:{color:{width:"22px"},alpha:{display:"none"},hue:{marginBottom:"0px"},swatch:{width:"10px",height:"10px",marginTop:"0px"}}},p),{disableAlpha:o});return r.createElement("div",{style:v.picker,className:"chrome-picker "+m},r.createElement("div",{style:v.saturation},r.createElement(An,{style:v.Saturation,hsl:a,hsv:l,pointer:eo,onChange:n})),r.createElement("div",{style:v.body},r.createElement("div",{style:v.controls,className:"flexbox-fix"},r.createElement("div",{style:v.color},r.createElement("div",{style:v.swatch},r.createElement("div",{style:v.active}),r.createElement(h,{renderers:u}))),r.createElement("div",{style:v.toggles},r.createElement("div",{style:v.hue},r.createElement(_,{style:v.Hue,hsl:a,pointer:to,onChange:n})),r.createElement("div",{style:v.alpha},r.createElement(g,{style:v.Alpha,rgb:s,hsl:a,pointer:to,renderers:u,onChange:n})))),r.createElement(Qi,{rgb:s,hsl:a,hex:c,view:y,onChange:n,disableAlpha:o})))};no.propTypes={width:C().oneOfType([C().string,C().number]),disableAlpha:C().bool,styles:C().object,defaultView:C().oneOf(["hex","rgb","hsl"])},no.defaultProps={width:225,disableAlpha:!1,styles:{}};Yn(no);const ro=function(t){var e=t.color,n=t.onClick,o=void 0===n?function(){}:n,s=t.onSwatchHover,a=t.active,l=(0,i.ZP)({default:{color:{background:e,width:"15px",height:"15px",float:"left",marginRight:"5px",marginBottom:"5px",position:"relative",cursor:"pointer"},dot:{absolute:"5px 5px 5px 5px",background:Vn(e),borderRadius:"50%",opacity:"0"}},active:{dot:{opacity:"1"}},"color-#FFFFFF":{color:{boxShadow:"inset 0 0 0 1px #ddd"},dot:{background:"#000"}},transparent:{dot:{background:"#000"}}},{active:a,"color-#FFFFFF":"#FFFFFF"===e,transparent:"transparent"===e});return r.createElement(tr,{style:l.color,color:e,onClick:o,onHover:s,focusStyle:{boxShadow:"0 0 4px "+e}},r.createElement("div",{style:l.dot}))};const io=function(t){var e=t.hex,n=t.rgb,o=t.onChange,s=(0,i.ZP)({default:{fields:{display:"flex",paddingBottom:"6px",paddingRight:"5px",position:"relative"},active:{position:"absolute",top:"6px",left:"5px",height:"9px",width:"9px",background:e},HEXwrap:{flex:"6",position:"relative"},HEXinput:{width:"80%",padding:"0px",paddingLeft:"20%",border:"none",outline:"none",background:"none",fontSize:"12px",color:"#333",height:"16px"},HEXlabel:{display:"none"},RGBwrap:{flex:"3",position:"relative"},RGBinput:{width:"70%",padding:"0px",paddingLeft:"30%",border:"none",outline:"none",background:"none",fontSize:"12px",color:"#333",height:"16px"},RGBlabel:{position:"absolute",top:"3px",left:"0px",lineHeight:"16px",textTransform:"uppercase",fontSize:"12px",color:"#999"}}}),a=function(t,e){t.r||t.g||t.b?o({r:t.r||n.r,g:t.g||n.g,b:t.b||n.b,source:"rgb"},e):o({hex:t.hex,source:"hex"},e)};return r.createElement("div",{style:s.fields,className:"flexbox-fix"},r.createElement("div",{style:s.active}),r.createElement(b,{style:{wrap:s.HEXwrap,input:s.HEXinput,label:s.HEXlabel},label:"hex",value:e,onChange:a}),r.createElement(b,{style:{wrap:s.RGBwrap,input:s.RGBinput,label:s.RGBlabel},label:"r",value:n.r,onChange:a}),r.createElement(b,{style:{wrap:s.RGBwrap,input:s.RGBinput,label:s.RGBlabel},label:"g",value:n.g,onChange:a}),r.createElement(b,{style:{wrap:s.RGBwrap,input:s.RGBinput,label:s.RGBlabel},label:"b",value:n.b,onChange:a}))};var oo=function(t){var e=t.onChange,n=t.onSwatchHover,o=t.colors,s=t.hex,a=t.rgb,l=t.styles,c=void 0===l?{}:l,h=t.className,u=void 0===h?"":h,d=(0,i.ZP)(cn({default:{Compact:{background:"#f6f6f6",radius:"4px"},compact:{paddingTop:"5px",paddingLeft:"5px",boxSizing:"initial",width:"240px"},clear:{clear:"both"}}},c)),p=function(t,n){t.hex?Hn(t.hex)&&e({hex:t.hex,source:"hex"},n):e(t,n)};return r.createElement(un,{style:d.Compact,styles:c},r.createElement("div",{style:d.compact,className:"compact-picker "+u},r.createElement("div",null,Ei(o,(function(t){return r.createElement(ro,{key:t,color:t,active:t.toLowerCase()===s,onClick:p,onSwatchHover:n})})),r.createElement("div",{style:d.clear})),r.createElement(io,{hex:s,rgb:a,onChange:p})))};oo.propTypes={colors:C().arrayOf(C().string),styles:C().object},oo.defaultProps={colors:["#4D4D4D","#999999","#FFFFFF","#F44E3B","#FE9200","#FCDC00","#DBDF00","#A4DD00","#68CCCA","#73D8FF","#AEA1FF","#FDA1FF","#333333","#808080","#cccccc","#D33115","#E27300","#FCC400","#B0BC00","#68BC00","#16A5A5","#009CE0","#7B64FF","#FA28FF","#000000","#666666","#B3B3B3","#9F0500","#C45100","#FB9E00","#808900","#194D33","#0C797D","#0062B1","#653294","#AB149E"],styles:{}};Yn(oo);const so=(0,i.tz)((function(t){var e=t.hover,n=t.color,o=t.onClick,s=t.onSwatchHover,a={position:"relative",zIndex:"2",outline:"2px solid #fff",boxShadow:"0 0 5px 2px rgba(0,0,0,0.25)"},l=(0,i.ZP)({default:{swatch:{width:"25px",height:"25px",fontSize:"0"}},hover:{swatch:a}},{hover:e});return r.createElement("div",{style:l.swatch},r.createElement(tr,{color:n,onClick:o,onHover:s,focusStyle:a}))}));var ao=function(t){var e=t.width,n=t.colors,o=t.onChange,s=t.onSwatchHover,a=t.triangle,l=t.styles,c=void 0===l?{}:l,h=t.className,u=void 0===h?"":h,d=(0,i.ZP)(cn({default:{card:{width:e,background:"#fff",border:"1px solid rgba(0,0,0,0.2)",boxShadow:"0 3px 12px rgba(0,0,0,0.15)",borderRadius:"4px",position:"relative",padding:"5px",display:"flex",flexWrap:"wrap"},triangle:{position:"absolute",border:"7px solid transparent",borderBottomColor:"#fff"},triangleShadow:{position:"absolute",border:"8px solid transparent",borderBottomColor:"rgba(0,0,0,0.15)"}},"hide-triangle":{triangle:{display:"none"},triangleShadow:{display:"none"}},"top-left-triangle":{triangle:{top:"-14px",left:"10px"},triangleShadow:{top:"-16px",left:"9px"}},"top-right-triangle":{triangle:{top:"-14px",right:"10px"},triangleShadow:{top:"-16px",right:"9px"}},"bottom-left-triangle":{triangle:{top:"35px",left:"10px",transform:"rotate(180deg)"},triangleShadow:{top:"37px",left:"9px",transform:"rotate(180deg)"}},"bottom-right-triangle":{triangle:{top:"35px",right:"10px",transform:"rotate(180deg)"},triangleShadow:{top:"37px",right:"9px",transform:"rotate(180deg)"}}},c),{"hide-triangle":"hide"===a,"top-left-triangle":"top-left"===a,"top-right-triangle":"top-right"===a,"bottom-left-triangle":"bottom-left"===a,"bottom-right-triangle":"bottom-right"===a}),p=function(t,e){return o({hex:t,source:"hex"},e)};return r.createElement("div",{style:d.card,className:"github-picker "+u},r.createElement("div",{style:d.triangleShadow}),r.createElement("div",{style:d.triangle}),Ei(n,(function(t){return r.createElement(so,{color:t,key:t,onClick:p,onSwatchHover:s})})))};ao.propTypes={width:C().oneOfType([C().string,C().number]),colors:C().arrayOf(C().string),triangle:C().oneOf(["hide","top-left","top-right","bottom-left","bottom-right"]),styles:C().object},ao.defaultProps={width:200,colors:["#B80000","#DB3E00","#FCCB00","#008B02","#006B76","#1273DE","#004DCF","#5300EB","#EB9694","#FAD0C3","#FEF3BD","#C1E1C5","#BEDADC","#C4DEF6","#BED3F3","#D4C4FB"],triangle:"top-left",styles:{}};Yn(ao);const lo=function(t){var e=t.direction,n=(0,i.ZP)({default:{picker:{width:"18px",height:"18px",borderRadius:"50%",transform:"translate(-9px, -1px)",backgroundColor:"rgb(248, 248, 248)",boxShadow:"0 1px 4px 0 rgba(0, 0, 0, 0.37)"}},vertical:{picker:{transform:"translate(-3px, -9px)"}}},{vertical:"vertical"===e});return r.createElement("div",{style:n.picker})};var co=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},ho=function(t){var e=t.width,n=t.height,o=t.onChange,s=t.hsl,a=t.direction,l=t.pointer,c=t.styles,h=void 0===c?{}:c,u=t.className,d=void 0===u?"":u,p=(0,i.ZP)(cn({default:{picker:{position:"relative",width:e,height:n},hue:{radius:"2px"}}},h));return r.createElement("div",{style:p.picker,className:"hue-picker "+d},r.createElement(_,co({},p.hue,{hsl:s,pointer:l,onChange:function(t){return o({a:1,h:t.h,l:.5,s:1})},direction:a})))};ho.propTypes={styles:C().object},ho.defaultProps={width:"316px",height:"16px",direction:"horizontal",pointer:lo,styles:{}};Yn(ho);Yn((function(t){var e=t.onChange,n=t.hex,o=t.rgb,s=t.styles,a=void 0===s?{}:s,l=t.className,c=void 0===l?"":l,h=(0,i.ZP)(cn({default:{material:{width:"98px",height:"98px",padding:"16px",fontFamily:"Roboto"},HEXwrap:{position:"relative"},HEXinput:{width:"100%",marginTop:"12px",fontSize:"15px",color:"#333",padding:"0px",border:"0px",borderBottom:"2px solid "+n,outline:"none",height:"30px"},HEXlabel:{position:"absolute",top:"0px",left:"0px",fontSize:"11px",color:"#999999",textTransform:"capitalize"},Hex:{style:{}},RGBwrap:{position:"relative"},RGBinput:{width:"100%",marginTop:"12px",fontSize:"15px",color:"#333",padding:"0px",border:"0px",borderBottom:"1px solid #eee",outline:"none",height:"30px"},RGBlabel:{position:"absolute",top:"0px",left:"0px",fontSize:"11px",color:"#999999",textTransform:"capitalize"},split:{display:"flex",marginRight:"-10px",paddingTop:"11px"},third:{flex:"1",paddingRight:"10px"}}},a)),u=function(t,n){t.hex?Hn(t.hex)&&e({hex:t.hex,source:"hex"},n):(t.r||t.g||t.b)&&e({r:t.r||o.r,g:t.g||o.g,b:t.b||o.b,source:"rgb"},n)};return r.createElement(un,{styles:a},r.createElement("div",{style:h.material,className:"material-picker "+c},r.createElement(b,{style:{wrap:h.HEXwrap,input:h.HEXinput,label:h.HEXlabel},label:"hex",value:n,onChange:u}),r.createElement("div",{style:h.split,className:"flexbox-fix"},r.createElement("div",{style:h.third},r.createElement(b,{style:{wrap:h.RGBwrap,input:h.RGBinput,label:h.RGBlabel},label:"r",value:o.r,onChange:u})),r.createElement("div",{style:h.third},r.createElement(b,{style:{wrap:h.RGBwrap,input:h.RGBinput,label:h.RGBlabel},label:"g",value:o.g,onChange:u})),r.createElement("div",{style:h.third},r.createElement(b,{style:{wrap:h.RGBwrap,input:h.RGBinput,label:h.RGBlabel},label:"b",value:o.b,onChange:u})))))}));const uo=function(t){var e=t.onChange,n=t.rgb,o=t.hsv,s=t.hex,a=(0,i.ZP)({default:{fields:{paddingTop:"5px",paddingBottom:"9px",width:"80px",position:"relative"},divider:{height:"5px"},RGBwrap:{position:"relative"},RGBinput:{marginLeft:"40%",width:"40%",height:"18px",border:"1px solid #888888",boxShadow:"inset 0 1px 1px rgba(0,0,0,.1), 0 1px 0 0 #ECECEC",marginBottom:"5px",fontSize:"13px",paddingLeft:"3px",marginRight:"10px"},RGBlabel:{left:"0px",top:"0px",width:"34px",textTransform:"uppercase",fontSize:"13px",height:"18px",lineHeight:"22px",position:"absolute"},HEXwrap:{position:"relative"},HEXinput:{marginLeft:"20%",width:"80%",height:"18px",border:"1px solid #888888",boxShadow:"inset 0 1px 1px rgba(0,0,0,.1), 0 1px 0 0 #ECECEC",marginBottom:"6px",fontSize:"13px",paddingLeft:"3px"},HEXlabel:{position:"absolute",top:"0px",left:"0px",width:"14px",textTransform:"uppercase",fontSize:"13px",height:"18px",lineHeight:"22px"},fieldSymbols:{position:"absolute",top:"5px",right:"-7px",fontSize:"13px"},symbol:{height:"20px",lineHeight:"22px",paddingBottom:"7px"}}}),l=function(t,r){t["#"]?Hn(t["#"])&&e({hex:t["#"],source:"hex"},r):t.r||t.g||t.b?e({r:t.r||n.r,g:t.g||n.g,b:t.b||n.b,source:"rgb"},r):(t.h||t.s||t.v)&&e({h:t.h||o.h,s:t.s||o.s,v:t.v||o.v,source:"hsv"},r)};return r.createElement("div",{style:a.fields},r.createElement(b,{style:{wrap:a.RGBwrap,input:a.RGBinput,label:a.RGBlabel},label:"h",value:Math.round(o.h),onChange:l}),r.createElement(b,{style:{wrap:a.RGBwrap,input:a.RGBinput,label:a.RGBlabel},label:"s",value:Math.round(100*o.s),onChange:l}),r.createElement(b,{style:{wrap:a.RGBwrap,input:a.RGBinput,label:a.RGBlabel},label:"v",value:Math.round(100*o.v),onChange:l}),r.createElement("div",{style:a.divider}),r.createElement(b,{style:{wrap:a.RGBwrap,input:a.RGBinput,label:a.RGBlabel},label:"r",value:n.r,onChange:l}),r.createElement(b,{style:{wrap:a.RGBwrap,input:a.RGBinput,label:a.RGBlabel},label:"g",value:n.g,onChange:l}),r.createElement(b,{style:{wrap:a.RGBwrap,input:a.RGBinput,label:a.RGBlabel},label:"b",value:n.b,onChange:l}),r.createElement("div",{style:a.divider}),r.createElement(b,{style:{wrap:a.HEXwrap,input:a.HEXinput,label:a.HEXlabel},label:"#",value:s.replace("#",""),onChange:l}),r.createElement("div",{style:a.fieldSymbols},r.createElement("div",{style:a.symbol},"°"),r.createElement("div",{style:a.symbol},"%"),r.createElement("div",{style:a.symbol},"%")))};const po=function(t){var e=t.hsl,n=(0,i.ZP)({default:{picker:{width:"12px",height:"12px",borderRadius:"6px",boxShadow:"inset 0 0 0 1px #fff",transform:"translate(-6px, -6px)"}},"black-outline":{picker:{boxShadow:"inset 0 0 0 1px #000"}}},{"black-outline":e.l>.5});return r.createElement("div",{style:n.picker})};const fo=function(){var t=(0,i.ZP)({default:{triangle:{width:0,height:0,borderStyle:"solid",borderWidth:"4px 0 4px 6px",borderColor:"transparent transparent transparent #fff",position:"absolute",top:"1px",left:"1px"},triangleBorder:{width:0,height:0,borderStyle:"solid",borderWidth:"5px 0 5px 8px",borderColor:"transparent transparent transparent #555"},left:{Extend:"triangleBorder",transform:"translate(-13px, -4px)"},leftInside:{Extend:"triangle",transform:"translate(-8px, -5px)"},right:{Extend:"triangleBorder",transform:"translate(20px, -14px) rotate(180deg)"},rightInside:{Extend:"triangle",transform:"translate(-8px, -5px)"}}});return r.createElement("div",{style:t.pointer},r.createElement("div",{style:t.left},r.createElement("div",{style:t.leftInside})),r.createElement("div",{style:t.right},r.createElement("div",{style:t.rightInside})))};const go=function(t){var e=t.onClick,n=t.label,o=t.children,s=t.active,a=(0,i.ZP)({default:{button:{backgroundImage:"linear-gradient(-180deg, #FFFFFF 0%, #E6E6E6 100%)",border:"1px solid #878787",borderRadius:"2px",height:"20px",boxShadow:"0 1px 0 0 #EAEAEA",fontSize:"14px",color:"#000",lineHeight:"20px",textAlign:"center",marginBottom:"10px",cursor:"pointer"}},active:{button:{boxShadow:"0 0 0 1px #878787"}}},{active:s});return r.createElement("div",{style:a.button,onClick:e},n||o)};const mo=function(t){var e=t.rgb,n=t.currentColor,o=(0,i.ZP)({default:{swatches:{border:"1px solid #B3B3B3",borderBottom:"1px solid #F0F0F0",marginBottom:"2px",marginTop:"1px"},new:{height:"34px",background:"rgb("+e.r+","+e.g+", "+e.b+")",boxShadow:"inset 1px 0 0 #000, inset -1px 0 0 #000, inset 0 1px 0 #000"},current:{height:"34px",background:n,boxShadow:"inset 1px 0 0 #000, inset -1px 0 0 #000, inset 0 -1px 0 #000"},label:{fontSize:"14px",color:"#000",textAlign:"center"}}});return r.createElement("div",null,r.createElement("div",{style:o.label},"new"),r.createElement("div",{style:o.swatches},r.createElement("div",{style:o.new}),r.createElement("div",{style:o.current})),r.createElement("div",{style:o.label},"current"))};var yo=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}();var vo=function(t){function e(t){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var n=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this));return n.state={currentColor:t.hex},n}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),yo(e,[{key:"render",value:function(){var t=this.props,e=t.styles,n=void 0===e?{}:e,o=t.className,s=void 0===o?"":o,a=(0,i.ZP)(cn({default:{picker:{background:"#DCDCDC",borderRadius:"4px",boxShadow:"0 0 0 1px rgba(0,0,0,.25), 0 8px 16px rgba(0,0,0,.15)",boxSizing:"initial",width:"513px"},head:{backgroundImage:"linear-gradient(-180deg, #F0F0F0 0%, #D4D4D4 100%)",borderBottom:"1px solid #B1B1B1",boxShadow:"inset 0 1px 0 0 rgba(255,255,255,.2), inset 0 -1px 0 0 rgba(0,0,0,.02)",height:"23px",lineHeight:"24px",borderRadius:"4px 4px 0 0",fontSize:"13px",color:"#4D4D4D",textAlign:"center"},body:{padding:"15px 15px 0",display:"flex"},saturation:{width:"256px",height:"256px",position:"relative",border:"2px solid #B3B3B3",borderBottom:"2px solid #F0F0F0",overflow:"hidden"},hue:{position:"relative",height:"256px",width:"19px",marginLeft:"10px",border:"2px solid #B3B3B3",borderBottom:"2px solid #F0F0F0"},controls:{width:"180px",marginLeft:"10px"},top:{display:"flex"},previews:{width:"60px"},actions:{flex:"1",marginLeft:"20px"}}},n));return r.createElement("div",{style:a.picker,className:"photoshop-picker "+s},r.createElement("div",{style:a.head},this.props.header),r.createElement("div",{style:a.body,className:"flexbox-fix"},r.createElement("div",{style:a.saturation},r.createElement(An,{hsl:this.props.hsl,hsv:this.props.hsv,pointer:po,onChange:this.props.onChange})),r.createElement("div",{style:a.hue},r.createElement(_,{direction:"vertical",hsl:this.props.hsl,pointer:fo,onChange:this.props.onChange})),r.createElement("div",{style:a.controls},r.createElement("div",{style:a.top,className:"flexbox-fix"},r.createElement("div",{style:a.previews},r.createElement(mo,{rgb:this.props.rgb,currentColor:this.state.currentColor})),r.createElement("div",{style:a.actions},r.createElement(go,{label:"OK",onClick:this.props.onAccept,active:!0}),r.createElement(go,{label:"Cancel",onClick:this.props.onCancel}),r.createElement(uo,{onChange:this.props.onChange,rgb:this.props.rgb,hsv:this.props.hsv,hex:this.props.hex}))))))}}]),e}(r.Component);vo.propTypes={header:C().string,styles:C().object},vo.defaultProps={header:"Color Picker",styles:{}};Yn(vo);const bo=function(t){var e=t.onChange,n=t.rgb,o=t.hsl,s=t.hex,a=t.disableAlpha,l=(0,i.ZP)({default:{fields:{display:"flex",paddingTop:"4px"},single:{flex:"1",paddingLeft:"6px"},alpha:{flex:"1",paddingLeft:"6px"},double:{flex:"2"},input:{width:"80%",padding:"4px 10% 3px",border:"none",boxShadow:"inset 0 0 0 1px #ccc",fontSize:"11px"},label:{display:"block",textAlign:"center",fontSize:"11px",color:"#222",paddingTop:"3px",paddingBottom:"4px",textTransform:"capitalize"}},disableAlpha:{alpha:{display:"none"}}},{disableAlpha:a}),c=function(t,r){t.hex?Hn(t.hex)&&e({hex:t.hex,source:"hex"},r):t.r||t.g||t.b?e({r:t.r||n.r,g:t.g||n.g,b:t.b||n.b,a:n.a,source:"rgb"},r):t.a&&(t.a<0?t.a=0:t.a>100&&(t.a=100),t.a/=100,e({h:o.h,s:o.s,l:o.l,a:t.a,source:"rgb"},r))};return r.createElement("div",{style:l.fields,className:"flexbox-fix"},r.createElement("div",{style:l.double},r.createElement(b,{style:{input:l.input,label:l.label},label:"hex",value:s.replace("#",""),onChange:c})),r.createElement("div",{style:l.single},r.createElement(b,{style:{input:l.input,label:l.label},label:"r",value:n.r,onChange:c,dragLabel:"true",dragMax:"255"})),r.createElement("div",{style:l.single},r.createElement(b,{style:{input:l.input,label:l.label},label:"g",value:n.g,onChange:c,dragLabel:"true",dragMax:"255"})),r.createElement("div",{style:l.single},r.createElement(b,{style:{input:l.input,label:l.label},label:"b",value:n.b,onChange:c,dragLabel:"true",dragMax:"255"})),r.createElement("div",{style:l.alpha},r.createElement(b,{style:{input:l.input,label:l.label},label:"a",value:Math.round(100*n.a),onChange:c,dragLabel:"true",dragMax:"100"})))};var wo=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},xo=function(t){var e=t.colors,n=t.onClick,o=void 0===n?function(){}:n,s=t.onSwatchHover,a=(0,i.ZP)({default:{colors:{margin:"0 -10px",padding:"10px 0 0 10px",borderTop:"1px solid #eee",display:"flex",flexWrap:"wrap",position:"relative"},swatchWrap:{width:"16px",height:"16px",margin:"0 10px 10px 0"},swatch:{borderRadius:"3px",boxShadow:"inset 0 0 0 1px rgba(0,0,0,.15)"}},"no-presets":{colors:{display:"none"}}},{"no-presets":!e||!e.length}),l=function(t,e){o({hex:t,source:"hex"},e)};return r.createElement("div",{style:a.colors,className:"flexbox-fix"},e.map((function(t){var e="string"==typeof t?{color:t}:t,n=""+e.color+(e.title||"");return r.createElement("div",{key:n,style:a.swatchWrap},r.createElement(tr,wo({},e,{style:a.swatch,onClick:l,onHover:s,focusStyle:{boxShadow:"inset 0 0 0 1px rgba(0,0,0,.15), 0 0 4px "+e.color}})))})))};xo.propTypes={colors:C().arrayOf(C().oneOfType([C().string,C().shape({color:C().string,title:C().string})])).isRequired};const ko=xo;var So=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},_o=function(t){var e=t.width,n=t.rgb,o=t.hex,s=t.hsv,a=t.hsl,l=t.onChange,c=t.onSwatchHover,u=t.disableAlpha,d=t.presetColors,p=t.renderers,f=t.styles,m=void 0===f?{}:f,y=t.className,v=void 0===y?"":y,b=(0,i.ZP)(cn({default:So({picker:{width:e,padding:"10px 10px 0",boxSizing:"initial",background:"#fff",borderRadius:"4px",boxShadow:"0 0 0 1px rgba(0,0,0,.15), 0 8px 16px rgba(0,0,0,.15)"},saturation:{width:"100%",paddingBottom:"75%",position:"relative",overflow:"hidden"},Saturation:{radius:"3px",shadow:"inset 0 0 0 1px rgba(0,0,0,.15), inset 0 0 4px rgba(0,0,0,.25)"},controls:{display:"flex"},sliders:{padding:"4px 0",flex:"1"},color:{width:"24px",height:"24px",position:"relative",marginTop:"4px",marginLeft:"4px",borderRadius:"3px"},activeColor:{absolute:"0px 0px 0px 0px",borderRadius:"2px",background:"rgba("+n.r+","+n.g+","+n.b+","+n.a+")",boxShadow:"inset 0 0 0 1px rgba(0,0,0,.15), inset 0 0 4px rgba(0,0,0,.25)"},hue:{position:"relative",height:"10px",overflow:"hidden"},Hue:{radius:"2px",shadow:"inset 0 0 0 1px rgba(0,0,0,.15), inset 0 0 4px rgba(0,0,0,.25)"},alpha:{position:"relative",height:"10px",marginTop:"4px",overflow:"hidden"},Alpha:{radius:"2px",shadow:"inset 0 0 0 1px rgba(0,0,0,.15), inset 0 0 4px rgba(0,0,0,.25)"}},m),disableAlpha:{color:{height:"10px"},hue:{height:"10px"},alpha:{display:"none"}}},m),{disableAlpha:u});return r.createElement("div",{style:b.picker,className:"sketch-picker "+v},r.createElement("div",{style:b.saturation},r.createElement(An,{style:b.Saturation,hsl:a,hsv:s,onChange:l})),r.createElement("div",{style:b.controls,className:"flexbox-fix"},r.createElement("div",{style:b.sliders},r.createElement("div",{style:b.hue},r.createElement(_,{style:b.Hue,hsl:a,onChange:l})),r.createElement("div",{style:b.alpha},r.createElement(g,{style:b.Alpha,rgb:n,hsl:a,renderers:p,onChange:l}))),r.createElement("div",{style:b.color},r.createElement(h,null),r.createElement("div",{style:b.activeColor}))),r.createElement(bo,{rgb:n,hsl:a,hex:o,onChange:l,disableAlpha:u}),r.createElement(ko,{colors:d,onClick:l,onSwatchHover:c}))};_o.propTypes={disableAlpha:C().bool,width:C().oneOfType([C().string,C().number]),styles:C().object},_o.defaultProps={disableAlpha:!1,width:200,styles:{},presetColors:["#D0021B","#F5A623","#F8E71C","#8B572A","#7ED321","#417505","#BD10E0","#9013FE","#4A90E2","#50E3C2","#B8E986","#000000","#4A4A4A","#9B9B9B","#FFFFFF"]};const Eo=Yn(_o);const Co=function(t){var e=t.hsl,n=t.offset,o=t.onClick,s=void 0===o?function(){}:o,a=t.active,l=t.first,c=t.last,h=(0,i.ZP)({default:{swatch:{height:"12px",background:"hsl("+e.h+", 50%, "+100*n+"%)",cursor:"pointer"}},first:{swatch:{borderRadius:"2px 0 0 2px"}},last:{swatch:{borderRadius:"0 2px 2px 0"}},active:{swatch:{transform:"scaleY(1.8)",borderRadius:"3.6px/2px"}}},{active:a,first:l,last:c});return r.createElement("div",{style:h.swatch,onClick:function(t){return s({h:e.h,s:.5,l:n,source:"hsl"},t)}})};const Oo=function(t){var e=t.onClick,n=t.hsl,o=(0,i.ZP)({default:{swatches:{marginTop:"20px"},swatch:{boxSizing:"border-box",width:"20%",paddingRight:"1px",float:"left"},clear:{clear:"both"}}}),s=.1;return r.createElement("div",{style:o.swatches},r.createElement("div",{style:o.swatch},r.createElement(Co,{hsl:n,offset:".80",active:Math.abs(n.l-.8)<s&&Math.abs(n.s-.5)<s,onClick:e,first:!0})),r.createElement("div",{style:o.swatch},r.createElement(Co,{hsl:n,offset:".65",active:Math.abs(n.l-.65)<s&&Math.abs(n.s-.5)<s,onClick:e})),r.createElement("div",{style:o.swatch},r.createElement(Co,{hsl:n,offset:".50",active:Math.abs(n.l-.5)<s&&Math.abs(n.s-.5)<s,onClick:e})),r.createElement("div",{style:o.swatch},r.createElement(Co,{hsl:n,offset:".35",active:Math.abs(n.l-.35)<s&&Math.abs(n.s-.5)<s,onClick:e})),r.createElement("div",{style:o.swatch},r.createElement(Co,{hsl:n,offset:".20",active:Math.abs(n.l-.2)<s&&Math.abs(n.s-.5)<s,onClick:e,last:!0})),r.createElement("div",{style:o.clear}))};const Mo=function(){var t=(0,i.ZP)({default:{picker:{width:"14px",height:"14px",borderRadius:"6px",transform:"translate(-7px, -1px)",backgroundColor:"rgb(248, 248, 248)",boxShadow:"0 1px 4px 0 rgba(0, 0, 0, 0.37)"}}});return r.createElement("div",{style:t.picker})};var Ao=function(t){var e=t.hsl,n=t.onChange,o=t.pointer,s=t.styles,a=void 0===s?{}:s,l=t.className,c=void 0===l?"":l,h=(0,i.ZP)(cn({default:{hue:{height:"12px",position:"relative"},Hue:{radius:"2px"}}},a));return r.createElement("div",{style:h.wrap||{},className:"slider-picker "+c},r.createElement("div",{style:h.hue},r.createElement(_,{style:h.Hue,hsl:e,pointer:o,onChange:n})),r.createElement("div",{style:h.swatches},r.createElement(Oo,{hsl:e,onClick:n})))};Ao.propTypes={styles:C().object},Ao.defaultProps={pointer:Mo,styles:{}};Yn(Ao);var To=n(597);const No=function(t){var e=t.color,n=t.onClick,o=void 0===n?function(){}:n,s=t.onSwatchHover,a=t.first,l=t.last,c=t.active,h=(0,i.ZP)({default:{color:{width:"40px",height:"24px",cursor:"pointer",background:e,marginBottom:"1px"},check:{color:Vn(e),marginLeft:"8px",display:"none"}},first:{color:{overflow:"hidden",borderRadius:"2px 2px 0 0"}},last:{color:{overflow:"hidden",borderRadius:"0 0 2px 2px"}},active:{check:{display:"block"}},"color-#FFFFFF":{color:{boxShadow:"inset 0 0 0 1px #ddd"},check:{color:"#333"}},transparent:{check:{color:"#333"}}},{first:a,last:l,active:c,"color-#FFFFFF":"#FFFFFF"===e,transparent:"transparent"===e});return r.createElement(tr,{color:e,style:h.color,onClick:o,onHover:s,focusStyle:{boxShadow:"0 0 4px "+e}},r.createElement("div",{style:h.check},r.createElement(To.Z,null)))};const Do=function(t){var e=t.onClick,n=t.onSwatchHover,o=t.group,s=t.active,a=(0,i.ZP)({default:{group:{paddingBottom:"10px",width:"40px",float:"left",marginRight:"10px"}}});return r.createElement("div",{style:a.group},Ei(o,(function(t,i){return r.createElement(No,{key:t,color:t,active:t.toLowerCase()===s,first:0===i,last:i===o.length-1,onClick:e,onSwatchHover:n})})))};var jo=function(t){var e=t.width,n=t.height,o=t.onChange,s=t.onSwatchHover,a=t.colors,l=t.hex,c=t.styles,h=void 0===c?{}:c,u=t.className,d=void 0===u?"":u,p=(0,i.ZP)(cn({default:{picker:{width:e,height:n},overflow:{height:n,overflowY:"scroll"},body:{padding:"16px 0 6px 16px"},clear:{clear:"both"}}},h)),f=function(t,e){return o({hex:t,source:"hex"},e)};return r.createElement("div",{style:p.picker,className:"swatches-picker "+d},r.createElement(un,null,r.createElement("div",{style:p.overflow},r.createElement("div",{style:p.body},Ei(a,(function(t){return r.createElement(Do,{key:t.toString(),group:t,active:l,onClick:f,onSwatchHover:s})})),r.createElement("div",{style:p.clear})))))};jo.propTypes={width:C().oneOfType([C().string,C().number]),height:C().oneOfType([C().string,C().number]),colors:C().arrayOf(C().arrayOf(C().string)),styles:C().object},jo.defaultProps={width:320,height:240,colors:[[Mi[900],Mi[700],Mi[500],Mi[300],Mi[100]],[Ai[900],Ai[700],Ai[500],Ai[300],Ai[100]],[Ti[900],Ti[700],Ti[500],Ti[300],Ti[100]],[Ni[900],Ni[700],Ni[500],Ni[300],Ni[100]],[Di[900],Di[700],Di[500],Di[300],Di[100]],[ji[900],ji[700],ji[500],ji[300],ji[100]],[Ri[900],Ri[700],Ri[500],Ri[300],Ri[100]],[Pi[900],Pi[700],Pi[500],Pi[300],Pi[100]],[zi[900],zi[700],zi[500],zi[300],zi[100]],["#194D33",Ii[700],Ii[500],Ii[300],Ii[100]],[Bi[900],Bi[700],Bi[500],Bi[300],Bi[100]],[Fi[900],Fi[700],Fi[500],Fi[300],Fi[100]],[$i[900],$i[700],$i[500],$i[300],$i[100]],[Li[900],Li[700],Li[500],Li[300],Li[100]],[Hi[900],Hi[700],Hi[500],Hi[300],Hi[100]],[Vi[900],Vi[700],Vi[500],Vi[300],Vi[100]],[qi[900],qi[700],qi[500],qi[300],qi[100]],[Wi[900],Wi[700],Wi[500],Wi[300],Wi[100]],["#000000","#525252","#969696","#D9D9D9","#FFFFFF"]],styles:{}};Yn(jo);var Ro=function(t){var e=t.onChange,n=t.onSwatchHover,o=t.hex,s=t.colors,a=t.width,l=t.triangle,c=t.styles,h=void 0===c?{}:c,u=t.className,d=void 0===u?"":u,p=(0,i.ZP)(cn({default:{card:{width:a,background:"#fff",border:"0 solid rgba(0,0,0,0.25)",boxShadow:"0 1px 4px rgba(0,0,0,0.25)",borderRadius:"4px",position:"relative"},body:{padding:"15px 9px 9px 15px"},label:{fontSize:"18px",color:"#fff"},triangle:{width:"0px",height:"0px",borderStyle:"solid",borderWidth:"0 9px 10px 9px",borderColor:"transparent transparent #fff transparent",position:"absolute"},triangleShadow:{width:"0px",height:"0px",borderStyle:"solid",borderWidth:"0 9px 10px 9px",borderColor:"transparent transparent rgba(0,0,0,.1) transparent",position:"absolute"},hash:{background:"#F0F0F0",height:"30px",width:"30px",borderRadius:"4px 0 0 4px",float:"left",color:"#98A1A4",display:"flex",alignItems:"center",justifyContent:"center"},input:{width:"100px",fontSize:"14px",color:"#666",border:"0px",outline:"none",height:"28px",boxShadow:"inset 0 0 0 1px #F0F0F0",boxSizing:"content-box",borderRadius:"0 4px 4px 0",float:"left",paddingLeft:"8px"},swatch:{width:"30px",height:"30px",float:"left",borderRadius:"4px",margin:"0 6px 6px 0"},clear:{clear:"both"}},"hide-triangle":{triangle:{display:"none"},triangleShadow:{display:"none"}},"top-left-triangle":{triangle:{top:"-10px",left:"12px"},triangleShadow:{top:"-11px",left:"12px"}},"top-right-triangle":{triangle:{top:"-10px",right:"12px"},triangleShadow:{top:"-11px",right:"12px"}}},h),{"hide-triangle":"hide"===l,"top-left-triangle":"top-left"===l,"top-right-triangle":"top-right"===l}),f=function(t,n){Hn(t)&&e({hex:t,source:"hex"},n)};return r.createElement("div",{style:p.card,className:"twitter-picker "+d},r.createElement("div",{style:p.triangleShadow}),r.createElement("div",{style:p.triangle}),r.createElement("div",{style:p.body},Ei(s,(function(t,e){return r.createElement(tr,{key:e,color:t,hex:t,style:p.swatch,onClick:f,onHover:n,focusStyle:{boxShadow:"0 0 4px "+t}})})),r.createElement("div",{style:p.hash},"#"),r.createElement(b,{label:null,style:{input:p.input},value:o.replace("#",""),onChange:f}),r.createElement("div",{style:p.clear})))};Ro.propTypes={width:C().oneOfType([C().string,C().number]),triangle:C().oneOf(["hide","top-left","top-right"]),colors:C().arrayOf(C().string),styles:C().object},Ro.defaultProps={width:276,colors:["#FF6900","#FCB900","#7BDCB5","#00D084","#8ED1FC","#0693E3","#ABB8C3","#EB144C","#F78DA7","#9900EF"],triangle:"top-left",styles:{}};Yn(Ro);var Po=function(t){var e=(0,i.ZP)({default:{picker:{width:"20px",height:"20px",borderRadius:"22px",border:"2px #fff solid",transform:"translate(-12px, -13px)",background:"hsl("+Math.round(t.hsl.h)+", "+Math.round(100*t.hsl.s)+"%, "+Math.round(100*t.hsl.l)+"%)"}}});return r.createElement("div",{style:e.picker})};Po.propTypes={hsl:C().shape({h:C().number,s:C().number,l:C().number,a:C().number})},Po.defaultProps={hsl:{a:1,h:249.94,l:.2,s:.5}};const zo=Po;var Io=function(t){var e=(0,i.ZP)({default:{picker:{width:"20px",height:"20px",borderRadius:"22px",transform:"translate(-10px, -7px)",background:"hsl("+Math.round(t.hsl.h)+", 100%, 50%)",border:"2px white solid"}}});return r.createElement("div",{style:e.picker})};Io.propTypes={hsl:C().shape({h:C().number,s:C().number,l:C().number,a:C().number})},Io.defaultProps={hsl:{a:1,h:249.94,l:.2,s:.5}};const Bo=Io;const Fo=function(t){var e=t.onChange,n=t.rgb,o=t.hsl,s=t.hex,a=t.hsv,l=function(t,n){if(t.hex)Hn(t.hex)&&e({hex:t.hex,source:"hex"},n);else if(t.rgb){var r=t.rgb.split(",");qn(t.rgb,"rgb")&&e({r:r[0],g:r[1],b:r[2],a:1,source:"rgb"},n)}else if(t.hsv){var i=t.hsv.split(",");qn(t.hsv,"hsv")&&(i[2]=i[2].replace("%",""),i[1]=i[1].replace("%",""),i[0]=i[0].replace("°",""),1==i[1]?i[1]=.01:1==i[2]&&(i[2]=.01),e({h:Number(i[0]),s:Number(i[1]),v:Number(i[2]),source:"hsv"},n))}else if(t.hsl){var o=t.hsl.split(",");qn(t.hsl,"hsl")&&(o[2]=o[2].replace("%",""),o[1]=o[1].replace("%",""),o[0]=o[0].replace("°",""),1==d[1]?d[1]=.01:1==d[2]&&(d[2]=.01),e({h:Number(o[0]),s:Number(o[1]),v:Number(o[2]),source:"hsl"},n))}},c=(0,i.ZP)({default:{wrap:{display:"flex",height:"100px",marginTop:"4px"},fields:{width:"100%"},column:{paddingTop:"10px",display:"flex",justifyContent:"space-between"},double:{padding:"0px 4.4px",boxSizing:"border-box"},input:{width:"100%",height:"38px",boxSizing:"border-box",padding:"4px 10% 3px",textAlign:"center",border:"1px solid #dadce0",fontSize:"11px",textTransform:"lowercase",borderRadius:"5px",outline:"none",fontFamily:"Roboto,Arial,sans-serif"},input2:{height:"38px",width:"100%",border:"1px solid #dadce0",boxSizing:"border-box",fontSize:"11px",textTransform:"lowercase",borderRadius:"5px",outline:"none",paddingLeft:"10px",fontFamily:"Roboto,Arial,sans-serif"},label:{textAlign:"center",fontSize:"12px",background:"#fff",position:"absolute",textTransform:"uppercase",color:"#3c4043",width:"35px",top:"-6px",left:"0",right:"0",marginLeft:"auto",marginRight:"auto",fontFamily:"Roboto,Arial,sans-serif"},label2:{left:"10px",textAlign:"center",fontSize:"12px",background:"#fff",position:"absolute",textTransform:"uppercase",color:"#3c4043",width:"32px",top:"-6px",fontFamily:"Roboto,Arial,sans-serif"},single:{flexGrow:"1",margin:"0px 4.4px"}}}),h=n.r+", "+n.g+", "+n.b,u=Math.round(o.h)+"°, "+Math.round(100*o.s)+"%, "+Math.round(100*o.l)+"%",d=Math.round(a.h)+"°, "+Math.round(100*a.s)+"%, "+Math.round(100*a.v)+"%";return r.createElement("div",{style:c.wrap,className:"flexbox-fix"},r.createElement("div",{style:c.fields},r.createElement("div",{style:c.double},r.createElement(b,{style:{input:c.input,label:c.label},label:"hex",value:s,onChange:l})),r.createElement("div",{style:c.column},r.createElement("div",{style:c.single},r.createElement(b,{style:{input:c.input2,label:c.label2},label:"rgb",value:h,onChange:l})),r.createElement("div",{style:c.single},r.createElement(b,{style:{input:c.input2,label:c.label2},label:"hsv",value:d,onChange:l})),r.createElement("div",{style:c.single},r.createElement(b,{style:{input:c.input2,label:c.label2},label:"hsl",value:u,onChange:l})))))};var $o=function(t){var e=t.width,n=t.onChange,o=t.rgb,s=t.hsl,a=t.hsv,l=t.hex,c=t.header,h=t.styles,u=void 0===h?{}:h,d=t.className,p=void 0===d?"":d,f=(0,i.ZP)(cn({default:{picker:{width:e,background:"#fff",border:"1px solid #dfe1e5",boxSizing:"initial",display:"flex",flexWrap:"wrap",borderRadius:"8px 8px 0px 0px"},head:{height:"57px",width:"100%",paddingTop:"16px",paddingBottom:"16px",paddingLeft:"16px",fontSize:"20px",boxSizing:"border-box",fontFamily:"Roboto-Regular,HelveticaNeue,Arial,sans-serif"},saturation:{width:"70%",padding:"0px",position:"relative",overflow:"hidden"},swatch:{width:"30%",height:"228px",padding:"0px",background:"rgba("+o.r+", "+o.g+", "+o.b+", 1)",position:"relative",overflow:"hidden"},body:{margin:"auto",width:"95%"},controls:{display:"flex",boxSizing:"border-box",height:"52px",paddingTop:"22px"},color:{width:"32px"},hue:{height:"8px",position:"relative",margin:"0px 16px 0px 16px",width:"100%"},Hue:{radius:"2px"}}},u));return r.createElement("div",{style:f.picker,className:"google-picker "+p},r.createElement("div",{style:f.head},c),r.createElement("div",{style:f.swatch}),r.createElement("div",{style:f.saturation},r.createElement(An,{hsl:s,hsv:a,pointer:zo,onChange:n})),r.createElement("div",{style:f.body},r.createElement("div",{style:f.controls,className:"flexbox-fix"},r.createElement("div",{style:f.hue},r.createElement(_,{style:f.Hue,hsl:s,radius:"4px",pointer:Bo,onChange:n}))),r.createElement(Fo,{rgb:o,hsl:s,hex:l,hsv:a,onChange:n})))};$o.propTypes={width:C().oneOfType([C().string,C().number]),styles:C().object,header:C().string},$o.defaultProps={width:652,styles:{},header:"Color picker"};Yn($o)},2408:(t,e)=>{"use strict";
/**
 * @license React
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),i=Symbol.for("react.fragment"),o=Symbol.for("react.strict_mode"),s=Symbol.for("react.profiler"),a=Symbol.for("react.provider"),l=Symbol.for("react.context"),c=Symbol.for("react.forward_ref"),h=Symbol.for("react.suspense"),u=Symbol.for("react.memo"),d=Symbol.for("react.lazy"),p=Symbol.iterator;var f={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},g=Object.assign,m={};function y(t,e,n){this.props=t,this.context=e,this.refs=m,this.updater=n||f}function v(){}function b(t,e,n){this.props=t,this.context=e,this.refs=m,this.updater=n||f}y.prototype.isReactComponent={},y.prototype.setState=function(t,e){if("object"!=typeof t&&"function"!=typeof t&&null!=t)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,t,e,"setState")},y.prototype.forceUpdate=function(t){this.updater.enqueueForceUpdate(this,t,"forceUpdate")},v.prototype=y.prototype;var w=b.prototype=new v;w.constructor=b,g(w,y.prototype),w.isPureReactComponent=!0;var x=Array.isArray,k=Object.prototype.hasOwnProperty,S={current:null},_={key:!0,ref:!0,__self:!0,__source:!0};function E(t,e,r){var i,o={},s=null,a=null;if(null!=e)for(i in void 0!==e.ref&&(a=e.ref),void 0!==e.key&&(s=""+e.key),e)k.call(e,i)&&!_.hasOwnProperty(i)&&(o[i]=e[i]);var l=arguments.length-2;if(1===l)o.children=r;else if(1<l){for(var c=Array(l),h=0;h<l;h++)c[h]=arguments[h+2];o.children=c}if(t&&t.defaultProps)for(i in l=t.defaultProps)void 0===o[i]&&(o[i]=l[i]);return{$$typeof:n,type:t,key:s,ref:a,props:o,_owner:S.current}}function C(t){return"object"==typeof t&&null!==t&&t.$$typeof===n}var O=/\/+/g;function M(t,e){return"object"==typeof t&&null!==t&&null!=t.key?function(t){var e={"=":"=0",":":"=2"};return"$"+t.replace(/[=:]/g,(function(t){return e[t]}))}(""+t.key):e.toString(36)}function A(t,e,i,o,s){var a=typeof t;"undefined"!==a&&"boolean"!==a||(t=null);var l=!1;if(null===t)l=!0;else switch(a){case"string":case"number":l=!0;break;case"object":switch(t.$$typeof){case n:case r:l=!0}}if(l)return s=s(l=t),t=""===o?"."+M(l,0):o,x(s)?(i="",null!=t&&(i=t.replace(O,"$&/")+"/"),A(s,e,i,"",(function(t){return t}))):null!=s&&(C(s)&&(s=function(t,e){return{$$typeof:n,type:t.type,key:e,ref:t.ref,props:t.props,_owner:t._owner}}(s,i+(!s.key||l&&l.key===s.key?"":(""+s.key).replace(O,"$&/")+"/")+t)),e.push(s)),1;if(l=0,o=""===o?".":o+":",x(t))for(var c=0;c<t.length;c++){var h=o+M(a=t[c],c);l+=A(a,e,i,h,s)}else if(h=function(t){return null===t||"object"!=typeof t?null:"function"==typeof(t=p&&t[p]||t["@@iterator"])?t:null}(t),"function"==typeof h)for(t=h.call(t),c=0;!(a=t.next()).done;)l+=A(a=a.value,e,i,h=o+M(a,c++),s);else if("object"===a)throw e=String(t),Error("Objects are not valid as a React child (found: "+("[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e)+"). If you meant to render a collection of children, use an array instead.");return l}function T(t,e,n){if(null==t)return t;var r=[],i=0;return A(t,r,"","",(function(t){return e.call(n,t,i++)})),r}function N(t){if(-1===t._status){var e=t._result;(e=e()).then((function(e){0!==t._status&&-1!==t._status||(t._status=1,t._result=e)}),(function(e){0!==t._status&&-1!==t._status||(t._status=2,t._result=e)})),-1===t._status&&(t._status=0,t._result=e)}if(1===t._status)return t._result.default;throw t._result}var D={current:null},j={transition:null},R={ReactCurrentDispatcher:D,ReactCurrentBatchConfig:j,ReactCurrentOwner:S};e.Children={map:T,forEach:function(t,e,n){T(t,(function(){e.apply(this,arguments)}),n)},count:function(t){var e=0;return T(t,(function(){e++})),e},toArray:function(t){return T(t,(function(t){return t}))||[]},only:function(t){if(!C(t))throw Error("React.Children.only expected to receive a single React element child.");return t}},e.Component=y,e.Fragment=i,e.Profiler=s,e.PureComponent=b,e.StrictMode=o,e.Suspense=h,e.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=R,e.cloneElement=function(t,e,r){if(null==t)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+t+".");var i=g({},t.props),o=t.key,s=t.ref,a=t._owner;if(null!=e){if(void 0!==e.ref&&(s=e.ref,a=S.current),void 0!==e.key&&(o=""+e.key),t.type&&t.type.defaultProps)var l=t.type.defaultProps;for(c in e)k.call(e,c)&&!_.hasOwnProperty(c)&&(i[c]=void 0===e[c]&&void 0!==l?l[c]:e[c])}var c=arguments.length-2;if(1===c)i.children=r;else if(1<c){l=Array(c);for(var h=0;h<c;h++)l[h]=arguments[h+2];i.children=l}return{$$typeof:n,type:t.type,key:o,ref:s,props:i,_owner:a}},e.createContext=function(t){return(t={$$typeof:l,_currentValue:t,_currentValue2:t,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:a,_context:t},t.Consumer=t},e.createElement=E,e.createFactory=function(t){var e=E.bind(null,t);return e.type=t,e},e.createRef=function(){return{current:null}},e.forwardRef=function(t){return{$$typeof:c,render:t}},e.isValidElement=C,e.lazy=function(t){return{$$typeof:d,_payload:{_status:-1,_result:t},_init:N}},e.memo=function(t,e){return{$$typeof:u,type:t,compare:void 0===e?null:e}},e.startTransition=function(t){var e=j.transition;j.transition={};try{t()}finally{j.transition=e}},e.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},e.useCallback=function(t,e){return D.current.useCallback(t,e)},e.useContext=function(t){return D.current.useContext(t)},e.useDebugValue=function(){},e.useDeferredValue=function(t){return D.current.useDeferredValue(t)},e.useEffect=function(t,e){return D.current.useEffect(t,e)},e.useId=function(){return D.current.useId()},e.useImperativeHandle=function(t,e,n){return D.current.useImperativeHandle(t,e,n)},e.useInsertionEffect=function(t,e){return D.current.useInsertionEffect(t,e)},e.useLayoutEffect=function(t,e){return D.current.useLayoutEffect(t,e)},e.useMemo=function(t,e){return D.current.useMemo(t,e)},e.useReducer=function(t,e,n){return D.current.useReducer(t,e,n)},e.useRef=function(t){return D.current.useRef(t)},e.useState=function(t){return D.current.useState(t)},e.useSyncExternalStore=function(t,e,n){return D.current.useSyncExternalStore(t,e,n)},e.useTransition=function(){return D.current.useTransition()},e.version="18.2.0"},7294:(t,e,n)=>{"use strict";t.exports=n(2408)},4754:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.autoprefix=void 0;var r,i=n(2525),o=(r=i)&&r.__esModule?r:{default:r},s=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t};var a={borderRadius:function(t){return{msBorderRadius:t,MozBorderRadius:t,OBorderRadius:t,WebkitBorderRadius:t,borderRadius:t}},boxShadow:function(t){return{msBoxShadow:t,MozBoxShadow:t,OBoxShadow:t,WebkitBoxShadow:t,boxShadow:t}},userSelect:function(t){return{WebkitTouchCallout:t,KhtmlUserSelect:t,MozUserSelect:t,msUserSelect:t,WebkitUserSelect:t,userSelect:t}},flex:function(t){return{WebkitBoxFlex:t,MozBoxFlex:t,WebkitFlex:t,msFlex:t,flex:t}},flexBasis:function(t){return{WebkitFlexBasis:t,flexBasis:t}},justifyContent:function(t){return{WebkitJustifyContent:t,justifyContent:t}},transition:function(t){return{msTransition:t,MozTransition:t,OTransition:t,WebkitTransition:t,transition:t}},transform:function(t){return{msTransform:t,MozTransform:t,OTransform:t,WebkitTransform:t,transform:t}},absolute:function(t){var e=t&&t.split(" ");return{position:"absolute",top:e&&e[0],right:e&&e[1],bottom:e&&e[2],left:e&&e[3]}},extend:function(t,e){var n=e[t];return n||{extend:t}}},l=e.autoprefix=function(t){var e={};return(0,o.default)(t,(function(t,n){var r={};(0,o.default)(t,(function(t,e){var n=a[e];n?r=s({},r,n(t)):r[e]=t})),e[n]=r})),e};e.default=l},6002:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.active=void 0;var r,i=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},o=n(7294),s=(r=o)&&r.__esModule?r:{default:r};function a(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function l(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function c(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}var h=e.active=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"span";return function(n){function r(){var n,o,c;a(this,r);for(var h=arguments.length,u=Array(h),d=0;d<h;d++)u[d]=arguments[d];return o=c=l(this,(n=r.__proto__||Object.getPrototypeOf(r)).call.apply(n,[this].concat(u))),c.state={active:!1},c.handleMouseDown=function(){return c.setState({active:!0})},c.handleMouseUp=function(){return c.setState({active:!1})},c.render=function(){return s.default.createElement(e,{onMouseDown:c.handleMouseDown,onMouseUp:c.handleMouseUp},s.default.createElement(t,i({},c.props,c.state)))},l(c,o)}return c(r,n),r}(s.default.Component)};e.default=h},1765:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.hover=void 0;var r,i=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},o=n(7294),s=(r=o)&&r.__esModule?r:{default:r};function a(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function l(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function c(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}var h=e.hover=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"span";return function(n){function r(){var n,o,c;a(this,r);for(var h=arguments.length,u=Array(h),d=0;d<h;d++)u[d]=arguments[d];return o=c=l(this,(n=r.__proto__||Object.getPrototypeOf(r)).call.apply(n,[this].concat(u))),c.state={hover:!1},c.handleMouseOver=function(){return c.setState({hover:!0})},c.handleMouseOut=function(){return c.setState({hover:!1})},c.render=function(){return s.default.createElement(e,{onMouseOver:c.handleMouseOver,onMouseOut:c.handleMouseOut},s.default.createElement(t,i({},c.props,c.state)))},l(c,o)}return c(r,n),r}(s.default.Component)};e.default=h},4147:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.flattenNames=void 0;var r=a(n(7037)),i=a(n(2525)),o=a(n(8630)),s=a(n(5161));function a(t){return t&&t.__esModule?t:{default:t}}var l=e.flattenNames=function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],n=[];return(0,s.default)(e,(function(e){Array.isArray(e)?t(e).map((function(t){return n.push(t)})):(0,o.default)(e)?(0,i.default)(e,(function(t,e){!0===t&&n.push(e),n.push(e+"-"+t)})):(0,r.default)(e)&&n.push(e)})),n};e.default=l},9941:(t,e,n)=>{"use strict";e.tz=void 0;var r=c(n(4147)),i=c(n(8556)),o=c(n(4754)),s=c(n(1765)),a=c(n(6002)),l=c(n(7742));function c(t){return t&&t.__esModule?t:{default:t}}s.default,e.tz=s.default,a.default,l.default;var h=function(t){for(var e=arguments.length,n=Array(e>1?e-1:0),s=1;s<e;s++)n[s-1]=arguments[s];var a=(0,r.default)(n),l=(0,i.default)(t,a);return(0,o.default)(l)};e.ZP=h},7742:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=function(t,e){var n={},r=function(t){var e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];n[t]=e};return 0===t&&r("first-child"),t===e-1&&r("last-child"),(0===t||t%2==0)&&r("even"),1===Math.abs(t%2)&&r("odd"),r("nth-child",t),n}},8556:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.mergeClasses=void 0;var r=s(n(2525)),i=s(n(361)),o=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t};function s(t){return t&&t.__esModule?t:{default:t}}var a=e.mergeClasses=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],n=t.default&&(0,i.default)(t.default)||{};return e.map((function(e){var i=t[e];return i&&(0,r.default)(i,(function(t,e){n[e]||(n[e]={}),n[e]=o({},n[e],i[e])})),e})),n};e.default=a},7621:(t,e,n)=>{var r;!function(i){var o=/^\s+/,s=/\s+$/,a=0,l=i.round,c=i.min,h=i.max,u=i.random;function d(t,e){if(e=e||{},(t=t||"")instanceof d)return t;if(!(this instanceof d))return new d(t,e);var n=function(t){var e={r:0,g:0,b:0},n=1,r=null,a=null,l=null,u=!1,d=!1;"string"==typeof t&&(t=function(t){t=t.replace(o,"").replace(s,"").toLowerCase();var e,n=!1;if(T[t])t=T[t],n=!0;else if("transparent"==t)return{r:0,g:0,b:0,a:0,format:"name"};if(e=V.rgb.exec(t))return{r:e[1],g:e[2],b:e[3]};if(e=V.rgba.exec(t))return{r:e[1],g:e[2],b:e[3],a:e[4]};if(e=V.hsl.exec(t))return{h:e[1],s:e[2],l:e[3]};if(e=V.hsla.exec(t))return{h:e[1],s:e[2],l:e[3],a:e[4]};if(e=V.hsv.exec(t))return{h:e[1],s:e[2],v:e[3]};if(e=V.hsva.exec(t))return{h:e[1],s:e[2],v:e[3],a:e[4]};if(e=V.hex8.exec(t))return{r:P(e[1]),g:P(e[2]),b:P(e[3]),a:F(e[4]),format:n?"name":"hex8"};if(e=V.hex6.exec(t))return{r:P(e[1]),g:P(e[2]),b:P(e[3]),format:n?"name":"hex"};if(e=V.hex4.exec(t))return{r:P(e[1]+""+e[1]),g:P(e[2]+""+e[2]),b:P(e[3]+""+e[3]),a:F(e[4]+""+e[4]),format:n?"name":"hex8"};if(e=V.hex3.exec(t))return{r:P(e[1]+""+e[1]),g:P(e[2]+""+e[2]),b:P(e[3]+""+e[3]),format:n?"name":"hex"};return!1}(t));"object"==typeof t&&(q(t.r)&&q(t.g)&&q(t.b)?(p=t.r,f=t.g,g=t.b,e={r:255*j(p,255),g:255*j(f,255),b:255*j(g,255)},u=!0,d="%"===String(t.r).substr(-1)?"prgb":"rgb"):q(t.h)&&q(t.s)&&q(t.v)?(r=I(t.s),a=I(t.v),e=function(t,e,n){t=6*j(t,360),e=j(e,100),n=j(n,100);var r=i.floor(t),o=t-r,s=n*(1-e),a=n*(1-o*e),l=n*(1-(1-o)*e),c=r%6;return{r:255*[n,a,s,s,l,n][c],g:255*[l,n,n,a,s,s][c],b:255*[s,s,l,n,n,a][c]}}(t.h,r,a),u=!0,d="hsv"):q(t.h)&&q(t.s)&&q(t.l)&&(r=I(t.s),l=I(t.l),e=function(t,e,n){var r,i,o;function s(t,e,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?t+6*(e-t)*n:n<.5?e:n<2/3?t+(e-t)*(2/3-n)*6:t}if(t=j(t,360),e=j(e,100),n=j(n,100),0===e)r=i=o=n;else{var a=n<.5?n*(1+e):n+e-n*e,l=2*n-a;r=s(l,a,t+1/3),i=s(l,a,t),o=s(l,a,t-1/3)}return{r:255*r,g:255*i,b:255*o}}(t.h,r,l),u=!0,d="hsl"),t.hasOwnProperty("a")&&(n=t.a));var p,f,g;return n=D(n),{ok:u,format:t.format||d,r:c(255,h(e.r,0)),g:c(255,h(e.g,0)),b:c(255,h(e.b,0)),a:n}}(t);this._originalInput=t,this._r=n.r,this._g=n.g,this._b=n.b,this._a=n.a,this._roundA=l(100*this._a)/100,this._format=e.format||n.format,this._gradientType=e.gradientType,this._r<1&&(this._r=l(this._r)),this._g<1&&(this._g=l(this._g)),this._b<1&&(this._b=l(this._b)),this._ok=n.ok,this._tc_id=a++}function p(t,e,n){t=j(t,255),e=j(e,255),n=j(n,255);var r,i,o=h(t,e,n),s=c(t,e,n),a=(o+s)/2;if(o==s)r=i=0;else{var l=o-s;switch(i=a>.5?l/(2-o-s):l/(o+s),o){case t:r=(e-n)/l+(e<n?6:0);break;case e:r=(n-t)/l+2;break;case n:r=(t-e)/l+4}r/=6}return{h:r,s:i,l:a}}function f(t,e,n){t=j(t,255),e=j(e,255),n=j(n,255);var r,i,o=h(t,e,n),s=c(t,e,n),a=o,l=o-s;if(i=0===o?0:l/o,o==s)r=0;else{switch(o){case t:r=(e-n)/l+(e<n?6:0);break;case e:r=(n-t)/l+2;break;case n:r=(t-e)/l+4}r/=6}return{h:r,s:i,v:a}}function g(t,e,n,r){var i=[z(l(t).toString(16)),z(l(e).toString(16)),z(l(n).toString(16))];return r&&i[0].charAt(0)==i[0].charAt(1)&&i[1].charAt(0)==i[1].charAt(1)&&i[2].charAt(0)==i[2].charAt(1)?i[0].charAt(0)+i[1].charAt(0)+i[2].charAt(0):i.join("")}function m(t,e,n,r){return[z(B(r)),z(l(t).toString(16)),z(l(e).toString(16)),z(l(n).toString(16))].join("")}function y(t,e){e=0===e?0:e||10;var n=d(t).toHsl();return n.s-=e/100,n.s=R(n.s),d(n)}function v(t,e){e=0===e?0:e||10;var n=d(t).toHsl();return n.s+=e/100,n.s=R(n.s),d(n)}function b(t){return d(t).desaturate(100)}function w(t,e){e=0===e?0:e||10;var n=d(t).toHsl();return n.l+=e/100,n.l=R(n.l),d(n)}function x(t,e){e=0===e?0:e||10;var n=d(t).toRgb();return n.r=h(0,c(255,n.r-l(-e/100*255))),n.g=h(0,c(255,n.g-l(-e/100*255))),n.b=h(0,c(255,n.b-l(-e/100*255))),d(n)}function k(t,e){e=0===e?0:e||10;var n=d(t).toHsl();return n.l-=e/100,n.l=R(n.l),d(n)}function S(t,e){var n=d(t).toHsl(),r=(n.h+e)%360;return n.h=r<0?360+r:r,d(n)}function _(t){var e=d(t).toHsl();return e.h=(e.h+180)%360,d(e)}function E(t){var e=d(t).toHsl(),n=e.h;return[d(t),d({h:(n+120)%360,s:e.s,l:e.l}),d({h:(n+240)%360,s:e.s,l:e.l})]}function C(t){var e=d(t).toHsl(),n=e.h;return[d(t),d({h:(n+90)%360,s:e.s,l:e.l}),d({h:(n+180)%360,s:e.s,l:e.l}),d({h:(n+270)%360,s:e.s,l:e.l})]}function O(t){var e=d(t).toHsl(),n=e.h;return[d(t),d({h:(n+72)%360,s:e.s,l:e.l}),d({h:(n+216)%360,s:e.s,l:e.l})]}function M(t,e,n){e=e||6,n=n||30;var r=d(t).toHsl(),i=360/n,o=[d(t)];for(r.h=(r.h-(i*e>>1)+720)%360;--e;)r.h=(r.h+i)%360,o.push(d(r));return o}function A(t,e){e=e||6;for(var n=d(t).toHsv(),r=n.h,i=n.s,o=n.v,s=[],a=1/e;e--;)s.push(d({h:r,s:i,v:o})),o=(o+a)%1;return s}d.prototype={isDark:function(){return this.getBrightness()<128},isLight:function(){return!this.isDark()},isValid:function(){return this._ok},getOriginalInput:function(){return this._originalInput},getFormat:function(){return this._format},getAlpha:function(){return this._a},getBrightness:function(){var t=this.toRgb();return(299*t.r+587*t.g+114*t.b)/1e3},getLuminance:function(){var t,e,n,r=this.toRgb();return t=r.r/255,e=r.g/255,n=r.b/255,.2126*(t<=.03928?t/12.92:i.pow((t+.055)/1.055,2.4))+.7152*(e<=.03928?e/12.92:i.pow((e+.055)/1.055,2.4))+.0722*(n<=.03928?n/12.92:i.pow((n+.055)/1.055,2.4))},setAlpha:function(t){return this._a=D(t),this._roundA=l(100*this._a)/100,this},toHsv:function(){var t=f(this._r,this._g,this._b);return{h:360*t.h,s:t.s,v:t.v,a:this._a}},toHsvString:function(){var t=f(this._r,this._g,this._b),e=l(360*t.h),n=l(100*t.s),r=l(100*t.v);return 1==this._a?"hsv("+e+", "+n+"%, "+r+"%)":"hsva("+e+", "+n+"%, "+r+"%, "+this._roundA+")"},toHsl:function(){var t=p(this._r,this._g,this._b);return{h:360*t.h,s:t.s,l:t.l,a:this._a}},toHslString:function(){var t=p(this._r,this._g,this._b),e=l(360*t.h),n=l(100*t.s),r=l(100*t.l);return 1==this._a?"hsl("+e+", "+n+"%, "+r+"%)":"hsla("+e+", "+n+"%, "+r+"%, "+this._roundA+")"},toHex:function(t){return g(this._r,this._g,this._b,t)},toHexString:function(t){return"#"+this.toHex(t)},toHex8:function(t){return function(t,e,n,r,i){var o=[z(l(t).toString(16)),z(l(e).toString(16)),z(l(n).toString(16)),z(B(r))];if(i&&o[0].charAt(0)==o[0].charAt(1)&&o[1].charAt(0)==o[1].charAt(1)&&o[2].charAt(0)==o[2].charAt(1)&&o[3].charAt(0)==o[3].charAt(1))return o[0].charAt(0)+o[1].charAt(0)+o[2].charAt(0)+o[3].charAt(0);return o.join("")}(this._r,this._g,this._b,this._a,t)},toHex8String:function(t){return"#"+this.toHex8(t)},toRgb:function(){return{r:l(this._r),g:l(this._g),b:l(this._b),a:this._a}},toRgbString:function(){return 1==this._a?"rgb("+l(this._r)+", "+l(this._g)+", "+l(this._b)+")":"rgba("+l(this._r)+", "+l(this._g)+", "+l(this._b)+", "+this._roundA+")"},toPercentageRgb:function(){return{r:l(100*j(this._r,255))+"%",g:l(100*j(this._g,255))+"%",b:l(100*j(this._b,255))+"%",a:this._a}},toPercentageRgbString:function(){return 1==this._a?"rgb("+l(100*j(this._r,255))+"%, "+l(100*j(this._g,255))+"%, "+l(100*j(this._b,255))+"%)":"rgba("+l(100*j(this._r,255))+"%, "+l(100*j(this._g,255))+"%, "+l(100*j(this._b,255))+"%, "+this._roundA+")"},toName:function(){return 0===this._a?"transparent":!(this._a<1)&&(N[g(this._r,this._g,this._b,!0)]||!1)},toFilter:function(t){var e="#"+m(this._r,this._g,this._b,this._a),n=e,r=this._gradientType?"GradientType = 1, ":"";if(t){var i=d(t);n="#"+m(i._r,i._g,i._b,i._a)}return"progid:DXImageTransform.Microsoft.gradient("+r+"startColorstr="+e+",endColorstr="+n+")"},toString:function(t){var e=!!t;t=t||this._format;var n=!1,r=this._a<1&&this._a>=0;return e||!r||"hex"!==t&&"hex6"!==t&&"hex3"!==t&&"hex4"!==t&&"hex8"!==t&&"name"!==t?("rgb"===t&&(n=this.toRgbString()),"prgb"===t&&(n=this.toPercentageRgbString()),"hex"!==t&&"hex6"!==t||(n=this.toHexString()),"hex3"===t&&(n=this.toHexString(!0)),"hex4"===t&&(n=this.toHex8String(!0)),"hex8"===t&&(n=this.toHex8String()),"name"===t&&(n=this.toName()),"hsl"===t&&(n=this.toHslString()),"hsv"===t&&(n=this.toHsvString()),n||this.toHexString()):"name"===t&&0===this._a?this.toName():this.toRgbString()},clone:function(){return d(this.toString())},_applyModification:function(t,e){var n=t.apply(null,[this].concat([].slice.call(e)));return this._r=n._r,this._g=n._g,this._b=n._b,this.setAlpha(n._a),this},lighten:function(){return this._applyModification(w,arguments)},brighten:function(){return this._applyModification(x,arguments)},darken:function(){return this._applyModification(k,arguments)},desaturate:function(){return this._applyModification(y,arguments)},saturate:function(){return this._applyModification(v,arguments)},greyscale:function(){return this._applyModification(b,arguments)},spin:function(){return this._applyModification(S,arguments)},_applyCombination:function(t,e){return t.apply(null,[this].concat([].slice.call(e)))},analogous:function(){return this._applyCombination(M,arguments)},complement:function(){return this._applyCombination(_,arguments)},monochromatic:function(){return this._applyCombination(A,arguments)},splitcomplement:function(){return this._applyCombination(O,arguments)},triad:function(){return this._applyCombination(E,arguments)},tetrad:function(){return this._applyCombination(C,arguments)}},d.fromRatio=function(t,e){if("object"==typeof t){var n={};for(var r in t)t.hasOwnProperty(r)&&(n[r]="a"===r?t[r]:I(t[r]));t=n}return d(t,e)},d.equals=function(t,e){return!(!t||!e)&&d(t).toRgbString()==d(e).toRgbString()},d.random=function(){return d.fromRatio({r:u(),g:u(),b:u()})},d.mix=function(t,e,n){n=0===n?0:n||50;var r=d(t).toRgb(),i=d(e).toRgb(),o=n/100;return d({r:(i.r-r.r)*o+r.r,g:(i.g-r.g)*o+r.g,b:(i.b-r.b)*o+r.b,a:(i.a-r.a)*o+r.a})},d.readability=function(t,e){var n=d(t),r=d(e);return(i.max(n.getLuminance(),r.getLuminance())+.05)/(i.min(n.getLuminance(),r.getLuminance())+.05)},d.isReadable=function(t,e,n){var r,i,o=d.readability(t,e);switch(i=!1,(r=function(t){var e,n;e=((t=t||{level:"AA",size:"small"}).level||"AA").toUpperCase(),n=(t.size||"small").toLowerCase(),"AA"!==e&&"AAA"!==e&&(e="AA");"small"!==n&&"large"!==n&&(n="small");return{level:e,size:n}}(n)).level+r.size){case"AAsmall":case"AAAlarge":i=o>=4.5;break;case"AAlarge":i=o>=3;break;case"AAAsmall":i=o>=7}return i},d.mostReadable=function(t,e,n){var r,i,o,s,a=null,l=0;i=(n=n||{}).includeFallbackColors,o=n.level,s=n.size;for(var c=0;c<e.length;c++)(r=d.readability(t,e[c]))>l&&(l=r,a=d(e[c]));return d.isReadable(t,a,{level:o,size:s})||!i?a:(n.includeFallbackColors=!1,d.mostReadable(t,["#fff","#000"],n))};var T=d.names={aliceblue:"f0f8ff",antiquewhite:"faebd7",aqua:"0ff",aquamarine:"7fffd4",azure:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"000",blanchedalmond:"ffebcd",blue:"00f",blueviolet:"8a2be2",brown:"a52a2a",burlywood:"deb887",burntsienna:"ea7e5d",cadetblue:"5f9ea0",chartreuse:"7fff00",chocolate:"d2691e",coral:"ff7f50",cornflowerblue:"6495ed",cornsilk:"fff8dc",crimson:"dc143c",cyan:"0ff",darkblue:"00008b",darkcyan:"008b8b",darkgoldenrod:"b8860b",darkgray:"a9a9a9",darkgreen:"006400",darkgrey:"a9a9a9",darkkhaki:"bdb76b",darkmagenta:"8b008b",darkolivegreen:"556b2f",darkorange:"ff8c00",darkorchid:"9932cc",darkred:"8b0000",darksalmon:"e9967a",darkseagreen:"8fbc8f",darkslateblue:"483d8b",darkslategray:"2f4f4f",darkslategrey:"2f4f4f",darkturquoise:"00ced1",darkviolet:"9400d3",deeppink:"ff1493",deepskyblue:"00bfff",dimgray:"696969",dimgrey:"696969",dodgerblue:"1e90ff",firebrick:"b22222",floralwhite:"fffaf0",forestgreen:"228b22",fuchsia:"f0f",gainsboro:"dcdcdc",ghostwhite:"f8f8ff",gold:"ffd700",goldenrod:"daa520",gray:"808080",green:"008000",greenyellow:"adff2f",grey:"808080",honeydew:"f0fff0",hotpink:"ff69b4",indianred:"cd5c5c",indigo:"4b0082",ivory:"fffff0",khaki:"f0e68c",lavender:"e6e6fa",lavenderblush:"fff0f5",lawngreen:"7cfc00",lemonchiffon:"fffacd",lightblue:"add8e6",lightcoral:"f08080",lightcyan:"e0ffff",lightgoldenrodyellow:"fafad2",lightgray:"d3d3d3",lightgreen:"90ee90",lightgrey:"d3d3d3",lightpink:"ffb6c1",lightsalmon:"ffa07a",lightseagreen:"20b2aa",lightskyblue:"87cefa",lightslategray:"789",lightslategrey:"789",lightsteelblue:"b0c4de",lightyellow:"ffffe0",lime:"0f0",limegreen:"32cd32",linen:"faf0e6",magenta:"f0f",maroon:"800000",mediumaquamarine:"66cdaa",mediumblue:"0000cd",mediumorchid:"ba55d3",mediumpurple:"9370db",mediumseagreen:"3cb371",mediumslateblue:"7b68ee",mediumspringgreen:"00fa9a",mediumturquoise:"48d1cc",mediumvioletred:"c71585",midnightblue:"191970",mintcream:"f5fffa",mistyrose:"ffe4e1",moccasin:"ffe4b5",navajowhite:"ffdead",navy:"000080",oldlace:"fdf5e6",olive:"808000",olivedrab:"6b8e23",orange:"ffa500",orangered:"ff4500",orchid:"da70d6",palegoldenrod:"eee8aa",palegreen:"98fb98",paleturquoise:"afeeee",palevioletred:"db7093",papayawhip:"ffefd5",peachpuff:"ffdab9",peru:"cd853f",pink:"ffc0cb",plum:"dda0dd",powderblue:"b0e0e6",purple:"800080",rebeccapurple:"663399",red:"f00",rosybrown:"bc8f8f",royalblue:"4169e1",saddlebrown:"8b4513",salmon:"fa8072",sandybrown:"f4a460",seagreen:"2e8b57",seashell:"fff5ee",sienna:"a0522d",silver:"c0c0c0",skyblue:"87ceeb",slateblue:"6a5acd",slategray:"708090",slategrey:"708090",snow:"fffafa",springgreen:"00ff7f",steelblue:"4682b4",tan:"d2b48c",teal:"008080",thistle:"d8bfd8",tomato:"ff6347",turquoise:"40e0d0",violet:"ee82ee",wheat:"f5deb3",white:"fff",whitesmoke:"f5f5f5",yellow:"ff0",yellowgreen:"9acd32"},N=d.hexNames=function(t){var e={};for(var n in t)t.hasOwnProperty(n)&&(e[t[n]]=n);return e}(T);function D(t){return t=parseFloat(t),(isNaN(t)||t<0||t>1)&&(t=1),t}function j(t,e){(function(t){return"string"==typeof t&&-1!=t.indexOf(".")&&1===parseFloat(t)})(t)&&(t="100%");var n=function(t){return"string"==typeof t&&-1!=t.indexOf("%")}(t);return t=c(e,h(0,parseFloat(t))),n&&(t=parseInt(t*e,10)/100),i.abs(t-e)<1e-6?1:t%e/parseFloat(e)}function R(t){return c(1,h(0,t))}function P(t){return parseInt(t,16)}function z(t){return 1==t.length?"0"+t:""+t}function I(t){return t<=1&&(t=100*t+"%"),t}function B(t){return i.round(255*parseFloat(t)).toString(16)}function F(t){return P(t)/255}var $,L,H,V=(L="[\\s|\\(]+("+($="(?:[-\\+]?\\d*\\.\\d+%?)|(?:[-\\+]?\\d+%?)")+")[,|\\s]+("+$+")[,|\\s]+("+$+")\\s*\\)?",H="[\\s|\\(]+("+$+")[,|\\s]+("+$+")[,|\\s]+("+$+")[,|\\s]+("+$+")\\s*\\)?",{CSS_UNIT:new RegExp($),rgb:new RegExp("rgb"+L),rgba:new RegExp("rgba"+H),hsl:new RegExp("hsl"+L),hsla:new RegExp("hsla"+H),hsv:new RegExp("hsv"+L),hsva:new RegExp("hsva"+H),hex3:/^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,hex6:/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,hex4:/^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,hex8:/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/});function q(t){return!!V.CSS_UNIT.exec(t)}t.exports?t.exports=d:void 0===(r=function(){return d}.call(e,n,e,t))||(t.exports=r)}(Math)},1949:function(t){
/*!
 * Viewer.js v1.10.5
 * https://fengyuanchen.github.io/viewerjs
 *
 * Copyright 2015-present Chen Fengyuan
 * Released under the MIT license
 *
 * Date: 2022-04-05T08:21:02.491Z
 */
t.exports=function(){"use strict";function t(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function e(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?t(Object(r),!0).forEach((function(t){s(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):t(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function n(t){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n(t)}function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function o(t,e,n){return e&&i(t.prototype,e),n&&i(t,n),Object.defineProperty(t,"prototype",{writable:!1}),t}function s(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var a={backdrop:!0,button:!0,navbar:!0,title:!0,toolbar:!0,className:"",container:"body",filter:null,fullscreen:!0,inheritedAttributes:["crossOrigin","decoding","isMap","loading","referrerPolicy","sizes","srcset","useMap"],initialViewIndex:0,inline:!1,interval:5e3,keyboard:!0,focus:!0,loading:!0,loop:!0,minWidth:200,minHeight:100,movable:!0,rotatable:!0,scalable:!0,zoomable:!0,zoomOnTouch:!0,zoomOnWheel:!0,slideOnTouch:!0,toggleOnDblclick:!0,tooltip:!0,transition:!0,zIndex:2015,zIndexInline:0,zoomRatio:.1,minZoomRatio:.01,maxZoomRatio:100,url:"src",ready:null,show:null,shown:null,hide:null,hidden:null,view:null,viewed:null,move:null,moved:null,rotate:null,rotated:null,scale:null,scaled:null,zoom:null,zoomed:null,play:null,stop:null},l='<div class="viewer-container" tabindex="-1" touch-action="none"><div class="viewer-canvas"></div><div class="viewer-footer"><div class="viewer-title"></div><div class="viewer-toolbar"></div><div class="viewer-navbar"><ul class="viewer-list" role="navigation"></ul></div></div><div class="viewer-tooltip" role="alert" aria-hidden="true"></div><div class="viewer-button" data-viewer-action="mix" role="button"></div><div class="viewer-player"></div></div>',c="undefined"!=typeof window&&void 0!==window.document,h=c?window:{},u=!(!c||!h.document.documentElement)&&"ontouchstart"in h.document.documentElement,d=!!c&&"PointerEvent"in h,p="viewer",f="move",g="switch",m="zoom",y="".concat(p,"-active"),v="".concat(p,"-close"),b="".concat(p,"-fade"),w="".concat(p,"-fixed"),x="".concat(p,"-fullscreen"),k="".concat(p,"-fullscreen-exit"),S="".concat(p,"-hide"),_="".concat(p,"-hide-md-down"),E="".concat(p,"-hide-sm-down"),C="".concat(p,"-hide-xs-down"),O="".concat(p,"-in"),M="".concat(p,"-invisible"),A="".concat(p,"-loading"),T="".concat(p,"-move"),N="".concat(p,"-open"),D="".concat(p,"-show"),j="".concat(p,"-transition"),R="click",P="dblclick",z="dragstart",I="focusin",B="keydown",F="load",$="error",L=u?"touchend touchcancel":"mouseup",H=u?"touchmove":"mousemove",V=u?"touchstart":"mousedown",q=d?"pointerdown":V,W=d?"pointermove":H,U=d?"pointerup pointercancel":L,Y="resize",J="transitionend",X="wheel",K="ready",G="show",Z="shown",Q="hide",tt="hidden",et="view",nt="viewed",rt="move",it="moved",ot="rotate",st="rotated",at="scale",lt="scaled",ct="zoom",ht="zoomed",ut="play",dt="stop",pt="".concat(p,"Action"),ft=/\s\s*/,gt=["zoom-in","zoom-out","one-to-one","reset","prev","play","next","rotate-left","rotate-right","flip-horizontal","flip-vertical"];function mt(t){return"string"==typeof t}var yt=Number.isNaN||h.isNaN;function vt(t){return"number"==typeof t&&!yt(t)}function bt(t){return void 0===t}function wt(t){return"object"===n(t)&&null!==t}var xt=Object.prototype.hasOwnProperty;function kt(t){if(!wt(t))return!1;try{var e=t.constructor,n=e.prototype;return e&&n&&xt.call(n,"isPrototypeOf")}catch(t){return!1}}function St(t){return"function"==typeof t}function _t(t,e){if(t&&St(e))if(Array.isArray(t)||vt(t.length)){var n,r=t.length;for(n=0;n<r&&!1!==e.call(t,t[n],n,t);n+=1);}else wt(t)&&Object.keys(t).forEach((function(n){e.call(t,t[n],n,t)}));return t}var Et=Object.assign||function(t){for(var e=arguments.length,n=new Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];return wt(t)&&n.length>0&&n.forEach((function(e){wt(e)&&Object.keys(e).forEach((function(n){t[n]=e[n]}))})),t},Ct=/^(?:width|height|left|top|marginLeft|marginTop)$/;function Ot(t,e){var n=t.style;_t(e,(function(t,e){Ct.test(e)&&vt(t)&&(t+="px"),n[e]=t}))}function Mt(t){return mt(t)?t.replace(/&(?!amp;|quot;|#39;|lt;|gt;)/g,"&amp;").replace(/"/g,"&quot;").replace(/'/g,"&#39;").replace(/</g,"&lt;").replace(/>/g,"&gt;"):t}function At(t,e){return!(!t||!e)&&(t.classList?t.classList.contains(e):t.className.indexOf(e)>-1)}function Tt(t,e){if(t&&e)if(vt(t.length))_t(t,(function(t){Tt(t,e)}));else if(t.classList)t.classList.add(e);else{var n=t.className.trim();n?n.indexOf(e)<0&&(t.className="".concat(n," ").concat(e)):t.className=e}}function Nt(t,e){t&&e&&(vt(t.length)?_t(t,(function(t){Nt(t,e)})):t.classList?t.classList.remove(e):t.className.indexOf(e)>=0&&(t.className=t.className.replace(e,"")))}function Dt(t,e,n){e&&(vt(t.length)?_t(t,(function(t){Dt(t,e,n)})):n?Tt(t,e):Nt(t,e))}var jt=/([a-z\d])([A-Z])/g;function Rt(t){return t.replace(jt,"$1-$2").toLowerCase()}function Pt(t,e){return wt(t[e])?t[e]:t.dataset?t.dataset[e]:t.getAttribute("data-".concat(Rt(e)))}function zt(t,e,n){wt(n)?t[e]=n:t.dataset?t.dataset[e]=n:t.setAttribute("data-".concat(Rt(e)),n)}var It=function(){var t=!1;if(c){var e=!1,n=function(){},r=Object.defineProperty({},"once",{get:function(){return t=!0,e},set:function(t){e=t}});h.addEventListener("test",n,r),h.removeEventListener("test",n,r)}return t}();function Bt(t,e,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},i=n;e.trim().split(ft).forEach((function(e){if(!It){var o=t.listeners;o&&o[e]&&o[e][n]&&(i=o[e][n],delete o[e][n],0===Object.keys(o[e]).length&&delete o[e],0===Object.keys(o).length&&delete t.listeners)}t.removeEventListener(e,i,r)}))}function Ft(t,e,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},i=n;e.trim().split(ft).forEach((function(e){if(r.once&&!It){var o=t.listeners,s=void 0===o?{}:o;i=function(){delete s[e][n],t.removeEventListener(e,i,r);for(var o=arguments.length,a=new Array(o),l=0;l<o;l++)a[l]=arguments[l];n.apply(t,a)},s[e]||(s[e]={}),s[e][n]&&t.removeEventListener(e,s[e][n],r),s[e][n]=i,t.listeners=s}t.addEventListener(e,i,r)}))}function $t(t,n,r,i){var o;return St(Event)&&St(CustomEvent)?o=new CustomEvent(n,e({bubbles:!0,cancelable:!0,detail:r},i)):(o=document.createEvent("CustomEvent")).initCustomEvent(n,!0,!0,r),t.dispatchEvent(o)}function Lt(t){var e=t.getBoundingClientRect();return{left:e.left+(window.pageXOffset-document.documentElement.clientLeft),top:e.top+(window.pageYOffset-document.documentElement.clientTop)}}function Ht(t){var e=t.rotate,n=t.scaleX,r=t.scaleY,i=t.translateX,o=t.translateY,s=[];vt(i)&&0!==i&&s.push("translateX(".concat(i,"px)")),vt(o)&&0!==o&&s.push("translateY(".concat(o,"px)")),vt(e)&&0!==e&&s.push("rotate(".concat(e,"deg)")),vt(n)&&1!==n&&s.push("scaleX(".concat(n,")")),vt(r)&&1!==r&&s.push("scaleY(".concat(r,")"));var a=s.length?s.join(" "):"none";return{WebkitTransform:a,msTransform:a,transform:a}}function Vt(t){return mt(t)?decodeURIComponent(t.replace(/^.*\//,"").replace(/[?&#].*$/,"")):""}var qt=h.navigator&&/(Macintosh|iPhone|iPod|iPad).*AppleWebKit/i.test(h.navigator.userAgent);function Wt(t,e,n){var r=document.createElement("img");if(t.naturalWidth&&!qt)return n(t.naturalWidth,t.naturalHeight),r;var i=document.body||document.documentElement;return r.onload=function(){n(r.width,r.height),qt||i.removeChild(r)},_t(e.inheritedAttributes,(function(e){var n=t.getAttribute(e);null!==n&&r.setAttribute(e,n)})),r.src=t.src,qt||(r.style.cssText="left:0;max-height:none!important;max-width:none!important;min-height:0!important;min-width:0!important;opacity:0;position:absolute;top:0;z-index:-1;",i.appendChild(r)),r}function Ut(t){switch(t){case 2:return C;case 3:return E;case 4:return _;default:return""}}function Yt(t){var n=e({},t),r=[];return _t(t,(function(t,e){delete n[e],_t(n,(function(e){var n=Math.abs(t.startX-e.startX),i=Math.abs(t.startY-e.startY),o=Math.abs(t.endX-e.endX),s=Math.abs(t.endY-e.endY),a=Math.sqrt(n*n+i*i),l=(Math.sqrt(o*o+s*s)-a)/a;r.push(l)}))})),r.sort((function(t,e){return Math.abs(t)<Math.abs(e)})),r[0]}function Jt(t,n){var r=t.pageX,i=t.pageY,o={endX:r,endY:i};return n?o:e({timeStamp:Date.now(),startX:r,startY:i},o)}function Xt(t){var e=0,n=0,r=0;return _t(t,(function(t){var i=t.startX,o=t.startY;e+=i,n+=o,r+=1})),{pageX:e/=r,pageY:n/=r}}var Kt,Gt={render:function(){this.initContainer(),this.initViewer(),this.initList(),this.renderViewer()},initBody:function(){var t=this.element.ownerDocument,e=t.body||t.documentElement;this.body=e,this.scrollbarWidth=window.innerWidth-t.documentElement.clientWidth,this.initialBodyPaddingRight=e.style.paddingRight,this.initialBodyComputedPaddingRight=window.getComputedStyle(e).paddingRight},initContainer:function(){this.containerData={width:window.innerWidth,height:window.innerHeight}},initViewer:function(){var t,e=this.options,n=this.parent;e.inline&&(t={width:Math.max(n.offsetWidth,e.minWidth),height:Math.max(n.offsetHeight,e.minHeight)},this.parentData=t),!this.fulled&&t||(t=this.containerData),this.viewerData=Et({},t)},renderViewer:function(){this.options.inline&&!this.fulled&&Ot(this.viewer,this.viewerData)},initList:function(){var t=this,e=this.element,n=this.options,r=this.list,i=[];r.innerHTML="",_t(this.images,(function(e,o){var s=e.src,a=e.alt||Vt(s),l=t.getImageURL(e);if(s||l){var c=document.createElement("li"),h=document.createElement("img");_t(n.inheritedAttributes,(function(t){var n=e.getAttribute(t);null!==n&&h.setAttribute(t,n)})),h.src=s||l,h.alt=a,h.setAttribute("data-original-url",l||s),c.setAttribute("data-index",o),c.setAttribute("data-viewer-action","view"),c.setAttribute("role","button"),n.keyboard&&c.setAttribute("tabindex",0),c.appendChild(h),r.appendChild(c),i.push(c)}})),this.items=i,_t(i,(function(e){var r,i,o=e.firstElementChild;zt(o,"filled",!0),n.loading&&Tt(e,A),Ft(o,F,r=function(r){Bt(o,$,i),n.loading&&Nt(e,A),t.loadImage(r)},{once:!0}),Ft(o,$,i=function(){Bt(o,F,r),n.loading&&Nt(e,A)},{once:!0})})),n.transition&&Ft(e,nt,(function(){Tt(r,j)}),{once:!0})},renderList:function(){var t=this.index,e=this.items[t];if(e){var n=e.nextElementSibling,r=parseInt(window.getComputedStyle(n||e).marginLeft,10),i=e.offsetWidth,o=i+r;Ot(this.list,Et({width:o*this.length-r},Ht({translateX:(this.viewerData.width-i)/2-o*t})))}},resetList:function(){var t=this.list;t.innerHTML="",Nt(t,j),Ot(t,Ht({translateX:0}))},initImage:function(t){var e,n=this,r=this.options,i=this.image,o=this.viewerData,s=this.footer.offsetHeight,a=o.width,l=Math.max(o.height-s,s),c=this.imageData||{};this.imageInitializing={abort:function(){e.onload=null}},e=Wt(i,r,(function(e,i){var o=e/i,s=a,h=l;n.imageInitializing=!1,l*o>a?h=a/o:s=l*o,s=Math.min(.9*s,e),h=Math.min(.9*h,i);var u=(a-s)/2,d=(l-h)/2,p={left:u,top:d,x:u,y:d,width:s,height:h,oldRatio:1,ratio:s/e,aspectRatio:o,naturalWidth:e,naturalHeight:i},f=Et({},p);r.rotatable&&(p.rotate=c.rotate||0,f.rotate=0),r.scalable&&(p.scaleX=c.scaleX||1,p.scaleY=c.scaleY||1,f.scaleX=1,f.scaleY=1),n.imageData=p,n.initialImageData=f,t&&t()}))},renderImage:function(t){var e=this,n=this.image,r=this.imageData;if(Ot(n,Et({width:r.width,height:r.height,marginLeft:r.x,marginTop:r.y},Ht(r))),t)if((this.viewing||this.moving||this.rotating||this.scaling||this.zooming)&&this.options.transition&&At(n,j)){var i=function(){e.imageRendering=!1,t()};this.imageRendering={abort:function(){Bt(n,J,i)}},Ft(n,J,i,{once:!0})}else t()},resetImage:function(){if(this.viewing||this.viewed){var t=this.image;this.viewing&&this.viewing.abort(),t.parentNode.removeChild(t),this.image=null}}},Zt={bind:function(){var t=this.options,e=this.viewer,n=this.canvas,r=this.element.ownerDocument;Ft(e,R,this.onClick=this.click.bind(this)),Ft(e,z,this.onDragStart=this.dragstart.bind(this)),Ft(n,q,this.onPointerDown=this.pointerdown.bind(this)),Ft(r,W,this.onPointerMove=this.pointermove.bind(this)),Ft(r,U,this.onPointerUp=this.pointerup.bind(this)),Ft(r,B,this.onKeyDown=this.keydown.bind(this)),Ft(window,Y,this.onResize=this.resize.bind(this)),t.zoomable&&t.zoomOnWheel&&Ft(e,X,this.onWheel=this.wheel.bind(this),{passive:!1,capture:!0}),t.toggleOnDblclick&&Ft(n,P,this.onDblclick=this.dblclick.bind(this))},unbind:function(){var t=this.options,e=this.viewer,n=this.canvas,r=this.element.ownerDocument;Bt(e,R,this.onClick),Bt(e,z,this.onDragStart),Bt(n,q,this.onPointerDown),Bt(r,W,this.onPointerMove),Bt(r,U,this.onPointerUp),Bt(r,B,this.onKeyDown),Bt(window,Y,this.onResize),t.zoomable&&t.zoomOnWheel&&Bt(e,X,this.onWheel,{passive:!1,capture:!0}),t.toggleOnDblclick&&Bt(n,P,this.onDblclick)}},Qt={click:function(t){var e=this.options,n=this.imageData,r=t.target,i=Pt(r,pt);switch(i||"img"!==r.localName||"li"!==r.parentElement.localName||(i=Pt(r=r.parentElement,pt)),u&&t.isTrusted&&r===this.canvas&&clearTimeout(this.clickCanvasTimeout),i){case"mix":this.played?this.stop():e.inline?this.fulled?this.exit():this.full():this.hide();break;case"hide":this.hide();break;case"view":this.view(Pt(r,"index"));break;case"zoom-in":this.zoom(.1,!0);break;case"zoom-out":this.zoom(-.1,!0);break;case"one-to-one":this.toggle();break;case"reset":this.reset();break;case"prev":this.prev(e.loop);break;case"play":this.play(e.fullscreen);break;case"next":this.next(e.loop);break;case"rotate-left":this.rotate(-90);break;case"rotate-right":this.rotate(90);break;case"flip-horizontal":this.scaleX(-n.scaleX||-1);break;case"flip-vertical":this.scaleY(-n.scaleY||-1);break;default:this.played&&this.stop()}},dblclick:function(t){t.preventDefault(),this.viewed&&t.target===this.image&&(u&&t.isTrusted&&clearTimeout(this.doubleClickImageTimeout),this.toggle(t.isTrusted?t:t.detail&&t.detail.originalEvent))},load:function(){var t=this;this.timeout&&(clearTimeout(this.timeout),this.timeout=!1);var e=this.element,n=this.options,r=this.image,i=this.index,o=this.viewerData;Nt(r,M),n.loading&&Nt(this.canvas,A),r.style.cssText="height:0;"+"margin-left:".concat(o.width/2,"px;")+"margin-top:".concat(o.height/2,"px;")+"max-width:none!important;position:relative;width:0;",this.initImage((function(){Dt(r,T,n.movable),Dt(r,j,n.transition),t.renderImage((function(){t.viewed=!0,t.viewing=!1,St(n.viewed)&&Ft(e,nt,n.viewed,{once:!0}),$t(e,nt,{originalImage:t.images[i],index:i,image:r},{cancelable:!1})}))}))},loadImage:function(t){var e=t.target,n=e.parentNode,r=n.offsetWidth||30,i=n.offsetHeight||50,o=!!Pt(e,"filled");Wt(e,this.options,(function(t,n){var s=t/n,a=r,l=i;i*s>r?o?a=i*s:l=r/s:o?l=r/s:a=i*s,Ot(e,Et({width:a,height:l},Ht({translateX:(r-a)/2,translateY:(i-l)/2})))}))},keydown:function(t){var e=this.options;if(e.keyboard){var n=t.keyCode||t.which||t.charCode;if(13===n&&this.viewer.contains(t.target)&&this.click(t),this.fulled)switch(n){case 27:this.played?this.stop():e.inline?this.fulled&&this.exit():this.hide();break;case 32:this.played&&this.stop();break;case 37:this.prev(e.loop);break;case 38:t.preventDefault(),this.zoom(e.zoomRatio,!0);break;case 39:this.next(e.loop);break;case 40:t.preventDefault(),this.zoom(-e.zoomRatio,!0);break;case 48:case 49:t.ctrlKey&&(t.preventDefault(),this.toggle())}}},dragstart:function(t){"img"===t.target.localName&&t.preventDefault()},pointerdown:function(t){var e=this.options,n=this.pointers,r=t.buttons,i=t.button;if(!(!this.viewed||this.showing||this.viewing||this.hiding||("mousedown"===t.type||"pointerdown"===t.type&&"mouse"===t.pointerType)&&(vt(r)&&1!==r||vt(i)&&0!==i||t.ctrlKey))){t.preventDefault(),t.changedTouches?_t(t.changedTouches,(function(t){n[t.identifier]=Jt(t)})):n[t.pointerId||0]=Jt(t);var o=!!e.movable&&f;e.zoomOnTouch&&e.zoomable&&Object.keys(n).length>1?o=m:e.slideOnTouch&&("touch"===t.pointerType||"touchstart"===t.type)&&this.isSwitchable()&&(o=g),!e.transition||o!==f&&o!==m||Nt(this.image,j),this.action=o}},pointermove:function(t){var e=this.pointers,n=this.action;this.viewed&&n&&(t.preventDefault(),t.changedTouches?_t(t.changedTouches,(function(t){Et(e[t.identifier]||{},Jt(t,!0))})):Et(e[t.pointerId||0]||{},Jt(t,!0)),this.change(t))},pointerup:function(t){var e,n=this,r=this.options,i=this.action,o=this.pointers;t.changedTouches?_t(t.changedTouches,(function(t){e=o[t.identifier],delete o[t.identifier]})):(e=o[t.pointerId||0],delete o[t.pointerId||0]),i&&(t.preventDefault(),!r.transition||i!==f&&i!==m||Tt(this.image,j),this.action=!1,u&&i!==m&&e&&Date.now()-e.timeStamp<500&&(clearTimeout(this.clickCanvasTimeout),clearTimeout(this.doubleClickImageTimeout),r.toggleOnDblclick&&this.viewed&&t.target===this.image?this.imageClicked?(this.imageClicked=!1,this.doubleClickImageTimeout=setTimeout((function(){$t(n.image,P,{originalEvent:t})}),50)):(this.imageClicked=!0,this.doubleClickImageTimeout=setTimeout((function(){n.imageClicked=!1}),500)):(this.imageClicked=!1,r.backdrop&&"static"!==r.backdrop&&t.target===this.canvas&&(this.clickCanvasTimeout=setTimeout((function(){$t(n.canvas,R,{originalEvent:t})}),50)))))},resize:function(){var t=this;if(this.isShown&&!this.hiding&&(this.fulled&&(this.close(),this.initBody(),this.open()),this.initContainer(),this.initViewer(),this.renderViewer(),this.renderList(),this.viewed&&this.initImage((function(){t.renderImage()})),this.played)){if(this.options.fullscreen&&this.fulled&&!(document.fullscreenElement||document.webkitFullscreenElement||document.mozFullScreenElement||document.msFullscreenElement))return void this.stop();_t(this.player.getElementsByTagName("img"),(function(e){Ft(e,F,t.loadImage.bind(t),{once:!0}),$t(e,F)}))}},wheel:function(t){var e=this;if(this.viewed&&(t.preventDefault(),!this.wheeling)){this.wheeling=!0,setTimeout((function(){e.wheeling=!1}),50);var n=Number(this.options.zoomRatio)||.1,r=1;t.deltaY?r=t.deltaY>0?1:-1:t.wheelDelta?r=-t.wheelDelta/120:t.detail&&(r=t.detail>0?1:-1),this.zoom(-r*n,!0,t)}}},te={show:function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0],e=this.element,n=this.options;if(n.inline||this.showing||this.isShown||this.showing)return this;if(!this.ready)return this.build(),this.ready&&this.show(t),this;if(St(n.show)&&Ft(e,G,n.show,{once:!0}),!1===$t(e,G)||!this.ready)return this;this.hiding&&this.transitioning.abort(),this.showing=!0,this.open();var r=this.viewer;if(Nt(r,S),r.setAttribute("role","dialog"),r.setAttribute("aria-labelledby",this.title.id),r.setAttribute("aria-modal",!0),r.removeAttribute("aria-hidden"),n.transition&&!t){var i=this.shown.bind(this);this.transitioning={abort:function(){Bt(r,J,i),Nt(r,O)}},Tt(r,j),r.initialOffsetWidth=r.offsetWidth,Ft(r,J,i,{once:!0}),Tt(r,O)}else Tt(r,O),this.shown();return this},hide:function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],n=this.element,r=this.options;if(r.inline||this.hiding||!this.isShown&&!this.showing)return this;if(St(r.hide)&&Ft(n,Q,r.hide,{once:!0}),!1===$t(n,Q))return this;this.showing&&this.transitioning.abort(),this.hiding=!0,this.played?this.stop():this.viewing&&this.viewing.abort();var i=this.viewer,o=this.image,s=function(){Nt(i,O),t.hidden()};if(r.transition&&!e){var a=function e(n){n&&n.target===i&&(Bt(i,J,e),t.hidden())},l=function(){At(i,j)?(Ft(i,J,a),Nt(i,O)):s()};this.transitioning={abort:function(){t.viewed&&At(o,j)?Bt(o,J,l):At(i,j)&&Bt(i,J,a)}},this.viewed&&At(o,j)?(Ft(o,J,l,{once:!0}),this.zoomTo(0,!1,null,!0)):l()}else s();return this},view:function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.options.initialViewIndex;if(e=Number(e)||0,this.hiding||this.played||e<0||e>=this.length||this.viewed&&e===this.index)return this;if(!this.isShown)return this.index=e,this.show();this.viewing&&this.viewing.abort();var n=this.element,r=this.options,i=this.title,o=this.canvas,s=this.items[e],a=s.querySelector("img"),l=Pt(a,"originalUrl"),c=a.getAttribute("alt"),h=document.createElement("img");if(_t(r.inheritedAttributes,(function(t){var e=a.getAttribute(t);null!==e&&h.setAttribute(t,e)})),h.src=l,h.alt=c,St(r.view)&&Ft(n,et,r.view,{once:!0}),!1===$t(n,et,{originalImage:this.images[e],index:e,image:h})||!this.isShown||this.hiding||this.played)return this;var u=this.items[this.index];u&&(Nt(u,y),u.removeAttribute("aria-selected")),Tt(s,y),s.setAttribute("aria-selected",!0),r.focus&&s.focus(),this.image=h,this.viewed=!1,this.index=e,this.imageData={},Tt(h,M),r.loading&&Tt(o,A),o.innerHTML="",o.appendChild(h),this.renderList(),i.innerHTML="";var d,p,f=function(){var e=t.imageData,n=Array.isArray(r.title)?r.title[1]:r.title;i.innerHTML=Mt(St(n)?n.call(t,h,e):"".concat(c," (").concat(e.naturalWidth," × ").concat(e.naturalHeight,")"))};return Ft(n,nt,f,{once:!0}),this.viewing={abort:function(){Bt(n,nt,f),h.complete?t.imageRendering?t.imageRendering.abort():t.imageInitializing&&t.imageInitializing.abort():(h.src="",Bt(h,F,d),t.timeout&&clearTimeout(t.timeout))}},h.complete?this.load():(Ft(h,F,d=function(){Bt(h,$,p),t.load()},{once:!0}),Ft(h,$,p=function(){Bt(h,F,d),t.timeout&&(clearTimeout(t.timeout),t.timeout=!1),Nt(h,M),r.loading&&Nt(t.canvas,A)},{once:!0}),this.timeout&&clearTimeout(this.timeout),this.timeout=setTimeout((function(){Nt(h,M),t.timeout=!1}),1e3)),this},prev:function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0],e=this.index-1;return e<0&&(e=t?this.length-1:0),this.view(e),this},next:function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0],e=this.length-1,n=this.index+1;return n>e&&(n=t?0:e),this.view(n),this},move:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:t,n=this.imageData;return this.moveTo(bt(t)?t:n.x+Number(t),bt(e)?e:n.y+Number(e)),this},moveTo:function(t){var e=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:t,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,i=this.element,o=this.options,s=this.imageData;if(t=Number(t),n=Number(n),this.viewed&&!this.played&&o.movable){var a=s.x,l=s.y,c=!1;if(vt(t)?c=!0:t=a,vt(n)?c=!0:n=l,c){if(St(o.move)&&Ft(i,rt,o.move,{once:!0}),!1===$t(i,rt,{x:t,y:n,oldX:a,oldY:l,originalEvent:r}))return this;s.x=t,s.y=n,s.left=t,s.top=n,this.moving=!0,this.renderImage((function(){e.moving=!1,St(o.moved)&&Ft(i,it,o.moved,{once:!0}),$t(i,it,{x:t,y:n,oldX:a,oldY:l,originalEvent:r},{cancelable:!1})}))}}return this},rotate:function(t){return this.rotateTo((this.imageData.rotate||0)+Number(t)),this},rotateTo:function(t){var e=this,n=this.element,r=this.options,i=this.imageData;if(vt(t=Number(t))&&this.viewed&&!this.played&&r.rotatable){var o=i.rotate;if(St(r.rotate)&&Ft(n,ot,r.rotate,{once:!0}),!1===$t(n,ot,{degree:t,oldDegree:o}))return this;i.rotate=t,this.rotating=!0,this.renderImage((function(){e.rotating=!1,St(r.rotated)&&Ft(n,st,r.rotated,{once:!0}),$t(n,st,{degree:t,oldDegree:o},{cancelable:!1})}))}return this},scaleX:function(t){return this.scale(t,this.imageData.scaleY),this},scaleY:function(t){return this.scale(this.imageData.scaleX,t),this},scale:function(t){var e=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:t,r=this.element,i=this.options,o=this.imageData;if(t=Number(t),n=Number(n),this.viewed&&!this.played&&i.scalable){var s=o.scaleX,a=o.scaleY,l=!1;if(vt(t)?l=!0:t=s,vt(n)?l=!0:n=a,l){if(St(i.scale)&&Ft(r,at,i.scale,{once:!0}),!1===$t(r,at,{scaleX:t,scaleY:n,oldScaleX:s,oldScaleY:a}))return this;o.scaleX=t,o.scaleY=n,this.scaling=!0,this.renderImage((function(){e.scaling=!1,St(i.scaled)&&Ft(r,lt,i.scaled,{once:!0}),$t(r,lt,{scaleX:t,scaleY:n,oldScaleX:s,oldScaleY:a},{cancelable:!1})}))}}return this},zoom:function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,r=this.imageData;return t=(t=Number(t))<0?1/(1-t):1+t,this.zoomTo(r.width*t/r.naturalWidth,e,n),this},zoomTo:function(t){var e=this,n=arguments.length>1&&void 0!==arguments[1]&&arguments[1],r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,i=arguments.length>3&&void 0!==arguments[3]&&arguments[3],o=this.element,s=this.options,a=this.pointers,l=this.imageData,c=l.x,h=l.y,u=l.width,d=l.height,p=l.naturalWidth,f=l.naturalHeight;if(vt(t=Math.max(0,t))&&this.viewed&&!this.played&&(i||s.zoomable)){if(!i){var g=Math.max(.01,s.minZoomRatio),m=Math.min(100,s.maxZoomRatio);t=Math.min(Math.max(t,g),m)}if(r)switch(r.type){case"wheel":s.zoomRatio>=.055&&t>.95&&t<1.05&&(t=1);break;case"pointermove":case"touchmove":case"mousemove":t>.99&&t<1.01&&(t=1)}var y=p*t,v=f*t,b=y-u,w=v-d,x=l.ratio;if(St(s.zoom)&&Ft(o,ct,s.zoom,{once:!0}),!1===$t(o,ct,{ratio:t,oldRatio:x,originalEvent:r}))return this;if(this.zooming=!0,r){var k=Lt(this.viewer),S=a&&Object.keys(a).length>0?Xt(a):{pageX:r.pageX,pageY:r.pageY};l.x-=b*((S.pageX-k.left-c)/u),l.y-=w*((S.pageY-k.top-h)/d)}else l.x-=b/2,l.y-=w/2;l.left=l.x,l.top=l.y,l.width=y,l.height=v,l.oldRatio=x,l.ratio=t,this.renderImage((function(){e.zooming=!1,St(s.zoomed)&&Ft(o,ht,s.zoomed,{once:!0}),$t(o,ht,{ratio:t,oldRatio:x,originalEvent:r},{cancelable:!1})})),n&&this.tooltip()}return this},play:function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(!this.isShown||this.played)return this;var n=this.element,r=this.options;if(St(r.play)&&Ft(n,ut,r.play,{once:!0}),!1===$t(n,ut))return this;var i=this.player,o=this.loadImage.bind(this),s=[],a=0,l=0;if(this.played=!0,this.onLoadWhenPlay=o,e&&this.requestFullscreen(e),Tt(i,D),_t(this.items,(function(t,e){var n=t.querySelector("img"),c=document.createElement("img");c.src=Pt(n,"originalUrl"),c.alt=n.getAttribute("alt"),c.referrerPolicy=n.referrerPolicy,a+=1,Tt(c,b),Dt(c,j,r.transition),At(t,y)&&(Tt(c,O),l=e),s.push(c),Ft(c,F,o,{once:!0}),i.appendChild(c)})),vt(r.interval)&&r.interval>0){var c=function e(){t.playing=setTimeout((function(){Nt(s[l],O),Tt(s[l=(l+=1)<a?l:0],O),e()}),r.interval)};a>1&&c()}return this},stop:function(){var t=this;if(!this.played)return this;var e=this.element,n=this.options;if(St(n.stop)&&Ft(e,dt,n.stop,{once:!0}),!1===$t(e,dt))return this;var r=this.player;return this.played=!1,clearTimeout(this.playing),_t(r.getElementsByTagName("img"),(function(e){Bt(e,F,t.onLoadWhenPlay)})),Nt(r,D),r.innerHTML="",this.exitFullscreen(),this},full:function(){var t=this,e=this.options,n=this.viewer,r=this.image,i=this.list;return!this.isShown||this.played||this.fulled||!e.inline||(this.fulled=!0,this.open(),Tt(this.button,k),e.transition&&(Nt(i,j),this.viewed&&Nt(r,j)),Tt(n,w),n.setAttribute("role","dialog"),n.setAttribute("aria-labelledby",this.title.id),n.setAttribute("aria-modal",!0),n.removeAttribute("style"),Ot(n,{zIndex:e.zIndex}),e.focus&&this.enforceFocus(),this.initContainer(),this.viewerData=Et({},this.containerData),this.renderList(),this.viewed&&this.initImage((function(){t.renderImage((function(){e.transition&&setTimeout((function(){Tt(r,j),Tt(i,j)}),0)}))}))),this},exit:function(){var t=this,e=this.options,n=this.viewer,r=this.image,i=this.list;return this.isShown&&!this.played&&this.fulled&&e.inline?(this.fulled=!1,this.close(),Nt(this.button,k),e.transition&&(Nt(i,j),this.viewed&&Nt(r,j)),e.focus&&this.clearEnforceFocus(),n.removeAttribute("role"),n.removeAttribute("aria-labelledby"),n.removeAttribute("aria-modal"),Nt(n,w),Ot(n,{zIndex:e.zIndexInline}),this.viewerData=Et({},this.parentData),this.renderViewer(),this.renderList(),this.viewed&&this.initImage((function(){t.renderImage((function(){e.transition&&setTimeout((function(){Tt(r,j),Tt(i,j)}),0)}))})),this):this},tooltip:function(){var t=this,e=this.options,n=this.tooltipBox,r=this.imageData;return this.viewed&&!this.played&&e.tooltip?(n.textContent="".concat(Math.round(100*r.ratio),"%"),this.tooltipping?clearTimeout(this.tooltipping):e.transition?(this.fading&&$t(n,J),Tt(n,D),Tt(n,b),Tt(n,j),n.removeAttribute("aria-hidden"),n.initialOffsetWidth=n.offsetWidth,Tt(n,O)):(Tt(n,D),n.removeAttribute("aria-hidden")),this.tooltipping=setTimeout((function(){e.transition?(Ft(n,J,(function(){Nt(n,D),Nt(n,b),Nt(n,j),n.setAttribute("aria-hidden",!0),t.fading=!1}),{once:!0}),Nt(n,O),t.fading=!0):(Nt(n,D),n.setAttribute("aria-hidden",!0)),t.tooltipping=!1}),1e3),this):this},toggle:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;return 1===this.imageData.ratio?this.zoomTo(this.imageData.oldRatio,!0,t):this.zoomTo(1,!0,t),this},reset:function(){return this.viewed&&!this.played&&(this.imageData=Et({},this.initialImageData),this.renderImage()),this},update:function(){var t=this,e=this.element,n=this.options,r=this.isImg;if(r&&!e.parentNode)return this.destroy();var i=[];if(_t(r?[e]:e.querySelectorAll("img"),(function(e){St(n.filter)?n.filter.call(t,e)&&i.push(e):t.getImageURL(e)&&i.push(e)})),!i.length)return this;if(this.images=i,this.length=i.length,this.ready){var o=[];if(_t(this.items,(function(t,e){var n=t.querySelector("img"),r=i[e];r&&n&&r.src===n.src&&r.alt===n.alt||o.push(e)})),Ot(this.list,{width:"auto"}),this.initList(),this.isShown)if(this.length){if(this.viewed){var s=o.indexOf(this.index);if(s>=0)this.viewed=!1,this.view(Math.max(Math.min(this.index-s,this.length-1),0));else{var a=this.items[this.index];Tt(a,y),a.setAttribute("aria-selected",!0)}}}else this.image=null,this.viewed=!1,this.index=0,this.imageData={},this.canvas.innerHTML="",this.title.innerHTML=""}else this.build();return this},destroy:function(){var t=this.element,e=this.options;return t[p]?(this.destroyed=!0,this.ready?(this.played&&this.stop(),e.inline?(this.fulled&&this.exit(),this.unbind()):this.isShown?(this.viewing&&(this.imageRendering?this.imageRendering.abort():this.imageInitializing&&this.imageInitializing.abort()),this.hiding&&this.transitioning.abort(),this.hidden()):this.showing&&(this.transitioning.abort(),this.hidden()),this.ready=!1,this.viewer.parentNode.removeChild(this.viewer)):e.inline&&(this.delaying?this.delaying.abort():this.initializing&&this.initializing.abort()),e.inline||Bt(t,R,this.onStart),t[p]=void 0,this):this}},ee={getImageURL:function(t){var e=this.options.url;return e=mt(e)?t.getAttribute(e):St(e)?e.call(this,t):""},enforceFocus:function(){var t=this;this.clearEnforceFocus(),Ft(document,I,this.onFocusin=function(e){var n=t.viewer,r=e.target;if(r!==document&&r!==n&&!n.contains(r)){for(;r;){if(null!==r.getAttribute("tabindex")||"true"===r.getAttribute("aria-modal"))return;r=r.parentElement}n.focus()}})},clearEnforceFocus:function(){this.onFocusin&&(Bt(document,I,this.onFocusin),this.onFocusin=null)},open:function(){var t=this.body;Tt(t,N),t.style.paddingRight="".concat(this.scrollbarWidth+(parseFloat(this.initialBodyComputedPaddingRight)||0),"px")},close:function(){var t=this.body;Nt(t,N),t.style.paddingRight=this.initialBodyPaddingRight},shown:function(){var t=this.element,e=this.options,n=this.viewer;this.fulled=!0,this.isShown=!0,this.render(),this.bind(),this.showing=!1,e.focus&&(n.focus(),this.enforceFocus()),St(e.shown)&&Ft(t,Z,e.shown,{once:!0}),!1!==$t(t,Z)&&this.ready&&this.isShown&&!this.hiding&&this.view(this.index)},hidden:function(){var t=this.element,e=this.options,n=this.viewer;e.fucus&&this.clearEnforceFocus(),this.fulled=!1,this.viewed=!1,this.isShown=!1,this.close(),this.unbind(),Tt(n,S),n.removeAttribute("role"),n.removeAttribute("aria-labelledby"),n.removeAttribute("aria-modal"),n.setAttribute("aria-hidden",!0),this.resetList(),this.resetImage(),this.hiding=!1,this.destroyed||(St(e.hidden)&&Ft(t,tt,e.hidden,{once:!0}),$t(t,tt,null,{cancelable:!1}))},requestFullscreen:function(t){var e=this.element.ownerDocument;if(this.fulled&&!(e.fullscreenElement||e.webkitFullscreenElement||e.mozFullScreenElement||e.msFullscreenElement)){var n=e.documentElement;n.requestFullscreen?kt(t)?n.requestFullscreen(t):n.requestFullscreen():n.webkitRequestFullscreen?n.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT):n.mozRequestFullScreen?n.mozRequestFullScreen():n.msRequestFullscreen&&n.msRequestFullscreen()}},exitFullscreen:function(){var t=this.element.ownerDocument;this.fulled&&(t.fullscreenElement||t.webkitFullscreenElement||t.mozFullScreenElement||t.msFullscreenElement)&&(t.exitFullscreen?t.exitFullscreen():t.webkitExitFullscreen?t.webkitExitFullscreen():t.mozCancelFullScreen?t.mozCancelFullScreen():t.msExitFullscreen&&t.msExitFullscreen())},change:function(t){var e=this.options,n=this.pointers,r=n[Object.keys(n)[0]];if(r){var i=r.endX-r.startX,o=r.endY-r.startY;switch(this.action){case f:this.move(i,o,t);break;case m:this.zoom(Yt(n),!1,t);break;case g:this.action="switched";var s=Math.abs(i);s>1&&s>Math.abs(o)&&(this.pointers={},i>1?this.prev(e.loop):i<-1&&this.next(e.loop))}_t(n,(function(t){t.startX=t.endX,t.startY=t.endY}))}},isSwitchable:function(){var t=this.imageData,e=this.viewerData;return this.length>1&&t.x>=0&&t.y>=0&&t.width<=e.width&&t.height<=e.height}},ne=h.Viewer,re=(Kt=-1,function(){return Kt+=1}),ie=function(){function t(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(r(this,t),!e||1!==e.nodeType)throw new Error("The first argument is required and must be an element.");this.element=e,this.options=Et({},a,kt(n)&&n),this.action=!1,this.fading=!1,this.fulled=!1,this.hiding=!1,this.imageClicked=!1,this.imageData={},this.index=this.options.initialViewIndex,this.isImg=!1,this.isShown=!1,this.length=0,this.moving=!1,this.played=!1,this.playing=!1,this.pointers={},this.ready=!1,this.rotating=!1,this.scaling=!1,this.showing=!1,this.timeout=!1,this.tooltipping=!1,this.viewed=!1,this.viewing=!1,this.wheeling=!1,this.zooming=!1,this.id=re(),this.init()}return o(t,[{key:"init",value:function(){var t=this,e=this.element,n=this.options;if(!e[p]){e[p]=this,n.focus&&!n.keyboard&&(n.focus=!1);var r="img"===e.localName,i=[];if(_t(r?[e]:e.querySelectorAll("img"),(function(e){St(n.filter)?n.filter.call(t,e)&&i.push(e):t.getImageURL(e)&&i.push(e)})),this.isImg=r,this.length=i.length,this.images=i,this.initBody(),bt(document.createElement(p).style.transition)&&(n.transition=!1),n.inline){var o=0,s=function(){var e;(o+=1)===t.length&&(t.initializing=!1,t.delaying={abort:function(){clearTimeout(e)}},e=setTimeout((function(){t.delaying=!1,t.build()}),0))};this.initializing={abort:function(){_t(i,(function(t){t.complete||(Bt(t,F,s),Bt(t,$,s))}))}},_t(i,(function(t){var e,n;t.complete?s():(Ft(t,F,e=function(){Bt(t,$,n),s()},{once:!0}),Ft(t,$,n=function(){Bt(t,F,e),s()},{once:!0}))}))}else Ft(e,R,this.onStart=function(e){var r=e.target;"img"!==r.localName||St(n.filter)&&!n.filter.call(t,r)||t.view(t.images.indexOf(r))})}}},{key:"build",value:function(){if(!this.ready){var t=this.element,e=this.options,n=t.parentNode,r=document.createElement("div");r.innerHTML=l;var i=r.querySelector(".".concat(p,"-container")),o=i.querySelector(".".concat(p,"-title")),s=i.querySelector(".".concat(p,"-toolbar")),a=i.querySelector(".".concat(p,"-navbar")),c=i.querySelector(".".concat(p,"-button")),h=i.querySelector(".".concat(p,"-canvas"));if(this.parent=n,this.viewer=i,this.title=o,this.toolbar=s,this.navbar=a,this.button=c,this.canvas=h,this.footer=i.querySelector(".".concat(p,"-footer")),this.tooltipBox=i.querySelector(".".concat(p,"-tooltip")),this.player=i.querySelector(".".concat(p,"-player")),this.list=i.querySelector(".".concat(p,"-list")),i.id="".concat(p).concat(this.id),o.id="".concat(p,"Title").concat(this.id),Tt(o,e.title?Ut(Array.isArray(e.title)?e.title[0]:e.title):S),Tt(a,e.navbar?Ut(e.navbar):S),Dt(c,S,!e.button),e.keyboard&&c.setAttribute("tabindex",0),e.backdrop&&(Tt(i,"".concat(p,"-backdrop")),e.inline||"static"===e.backdrop||zt(h,pt,"hide")),mt(e.className)&&e.className&&e.className.split(ft).forEach((function(t){Tt(i,t)})),e.toolbar){var u=document.createElement("ul"),d=kt(e.toolbar),f=gt.slice(0,3),g=gt.slice(7,9),m=gt.slice(9);d||Tt(s,Ut(e.toolbar)),_t(d?e.toolbar:gt,(function(t,n){var r=d&&kt(t),i=d?Rt(n):t,o=r&&!bt(t.show)?t.show:t;if(o&&(e.zoomable||-1===f.indexOf(i))&&(e.rotatable||-1===g.indexOf(i))&&(e.scalable||-1===m.indexOf(i))){var s=r&&!bt(t.size)?t.size:t,a=r&&!bt(t.click)?t.click:t,l=document.createElement("li");e.keyboard&&l.setAttribute("tabindex",0),l.setAttribute("role","button"),Tt(l,"".concat(p,"-").concat(i)),St(a)||zt(l,pt,i),vt(o)&&Tt(l,Ut(o)),-1!==["small","large"].indexOf(s)?Tt(l,"".concat(p,"-").concat(s)):"play"===i&&Tt(l,"".concat(p,"-large")),St(a)&&Ft(l,R,a),u.appendChild(l)}})),s.appendChild(u)}else Tt(s,S);if(!e.rotatable){var y=s.querySelectorAll('li[class*="rotate"]');Tt(y,M),_t(y,(function(t){s.appendChild(t)}))}if(e.inline)Tt(c,x),Ot(i,{zIndex:e.zIndexInline}),"static"===window.getComputedStyle(n).position&&Ot(n,{position:"relative"}),n.insertBefore(i,t.nextSibling);else{Tt(c,v),Tt(i,w),Tt(i,b),Tt(i,S),Ot(i,{zIndex:e.zIndex});var k=e.container;mt(k)&&(k=t.ownerDocument.querySelector(k)),k||(k=this.body),k.appendChild(i)}e.inline&&(this.render(),this.bind(),this.isShown=!0),this.ready=!0,St(e.ready)&&Ft(t,K,e.ready,{once:!0}),!1!==$t(t,K)?this.ready&&e.inline&&this.view(this.index):this.ready=!1}}}],[{key:"noConflict",value:function(){return window.Viewer=ne,t}},{key:"setDefaults",value:function(t){Et(a,kt(t)&&t)}}]),t}();return Et(ie.prototype,Gt,Zt,Qt,te,ee),ie}()},5290:(t,e,n)=>{"use strict";function r(){}function i(t){return null==t?r:function(){return this.querySelector(t)}}function o(t){return null==t?[]:Array.isArray(t)?t:Array.from(t)}function s(){return[]}function a(t){return null==t?s:function(){return this.querySelectorAll(t)}}function l(t){return function(){return this.matches(t)}}function c(t){return function(e){return e.matches(t)}}n.d(e,{Ue8:()=>tr,ohM:()=>Un,jvg:()=>ar,ETc:()=>Qn,daD:()=>er,Ys:()=>jn});var h=Array.prototype.find;function u(){return this.firstElementChild}var d=Array.prototype.filter;function p(){return Array.from(this.children)}function f(t){return new Array(t.length)}function g(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}function m(t){return function(){return t}}function y(t,e,n,r,i,o){for(var s,a=0,l=e.length,c=o.length;a<c;++a)(s=e[a])?(s.__data__=o[a],r[a]=s):n[a]=new g(t,o[a]);for(;a<l;++a)(s=e[a])&&(i[a]=s)}function v(t,e,n,r,i,o,s){var a,l,c,h=new Map,u=e.length,d=o.length,p=new Array(u);for(a=0;a<u;++a)(l=e[a])&&(p[a]=c=s.call(l,l.__data__,a,e)+"",h.has(c)?i[a]=l:h.set(c,l));for(a=0;a<d;++a)c=s.call(t,o[a],a,o)+"",(l=h.get(c))?(r[a]=l,l.__data__=o[a],h.delete(c)):n[a]=new g(t,o[a]);for(a=0;a<u;++a)(l=e[a])&&h.get(p[a])===l&&(i[a]=l)}function b(t){return t.__data__}function w(t){return"object"==typeof t&&"length"in t?t:Array.from(t)}function x(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}g.prototype={constructor:g,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var k="http://www.w3.org/1999/xhtml";const S={svg:"http://www.w3.org/2000/svg",xhtml:k,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function _(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),S.hasOwnProperty(e)?{space:S[e],local:t}:t}function E(t){return function(){this.removeAttribute(t)}}function C(t){return function(){this.removeAttributeNS(t.space,t.local)}}function O(t,e){return function(){this.setAttribute(t,e)}}function M(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}function A(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}function T(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}function N(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}function D(t){return function(){this.style.removeProperty(t)}}function j(t,e,n){return function(){this.style.setProperty(t,e,n)}}function R(t,e,n){return function(){var r=e.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,n)}}function P(t,e){return t.style.getPropertyValue(e)||N(t).getComputedStyle(t,null).getPropertyValue(e)}function z(t){return function(){delete this[t]}}function I(t,e){return function(){this[t]=e}}function B(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}function F(t){return t.trim().split(/^|\s+/)}function $(t){return t.classList||new L(t)}function L(t){this._node=t,this._names=F(t.getAttribute("class")||"")}function H(t,e){for(var n=$(t),r=-1,i=e.length;++r<i;)n.add(e[r])}function V(t,e){for(var n=$(t),r=-1,i=e.length;++r<i;)n.remove(e[r])}function q(t){return function(){H(this,t)}}function W(t){return function(){V(this,t)}}function U(t,e){return function(){(e.apply(this,arguments)?H:V)(this,t)}}function Y(){this.textContent=""}function J(t){return function(){this.textContent=t}}function X(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}function K(){this.innerHTML=""}function G(t){return function(){this.innerHTML=t}}function Z(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}function Q(){this.nextSibling&&this.parentNode.appendChild(this)}function tt(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function et(t){return function(){var e=this.ownerDocument,n=this.namespaceURI;return n===k&&e.documentElement.namespaceURI===k?e.createElement(t):e.createElementNS(n,t)}}function nt(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}function rt(t){var e=_(t);return(e.local?nt:et)(e)}function it(){return null}function ot(){var t=this.parentNode;t&&t.removeChild(this)}function st(){var t=this.cloneNode(!1),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}function at(){var t=this.cloneNode(!0),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}function lt(t){return t.trim().split(/^|\s+/).map((function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}}))}function ct(t){return function(){var e=this.__on;if(e){for(var n,r=0,i=-1,o=e.length;r<o;++r)n=e[r],t.type&&n.type!==t.type||n.name!==t.name?e[++i]=n:this.removeEventListener(n.type,n.listener,n.options);++i?e.length=i:delete this.__on}}}function ht(t,e,n){return function(){var r,i=this.__on,o=function(t){return function(e){t.call(this,e,this.__data__)}}(e);if(i)for(var s=0,a=i.length;s<a;++s)if((r=i[s]).type===t.type&&r.name===t.name)return this.removeEventListener(r.type,r.listener,r.options),this.addEventListener(r.type,r.listener=o,r.options=n),void(r.value=e);this.addEventListener(t.type,o,n),r={type:t.type,name:t.name,value:e,listener:o,options:n},i?i.push(r):this.__on=[r]}}function ut(t,e,n){var r=N(t),i=r.CustomEvent;"function"==typeof i?i=new i(e,n):(i=r.document.createEvent("Event"),n?(i.initEvent(e,n.bubbles,n.cancelable),i.detail=n.detail):i.initEvent(e,!1,!1)),t.dispatchEvent(i)}function dt(t,e){return function(){return ut(this,t,e)}}function pt(t,e){return function(){return ut(this,t,e.apply(this,arguments))}}L.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var ft=[null];function gt(t,e){this._groups=t,this._parents=e}function mt(){return new gt([[document.documentElement]],ft)}gt.prototype=mt.prototype={constructor:gt,select:function(t){"function"!=typeof t&&(t=i(t));for(var e=this._groups,n=e.length,r=new Array(n),o=0;o<n;++o)for(var s,a,l=e[o],c=l.length,h=r[o]=new Array(c),u=0;u<c;++u)(s=l[u])&&(a=t.call(s,s.__data__,u,l))&&("__data__"in s&&(a.__data__=s.__data__),h[u]=a);return new gt(r,this._parents)},selectAll:function(t){t="function"==typeof t?function(t){return function(){return o(t.apply(this,arguments))}}(t):a(t);for(var e=this._groups,n=e.length,r=[],i=[],s=0;s<n;++s)for(var l,c=e[s],h=c.length,u=0;u<h;++u)(l=c[u])&&(r.push(t.call(l,l.__data__,u,c)),i.push(l));return new gt(r,i)},selectChild:function(t){return this.select(null==t?u:function(t){return function(){return h.call(this.children,t)}}("function"==typeof t?t:c(t)))},selectChildren:function(t){return this.selectAll(null==t?p:function(t){return function(){return d.call(this.children,t)}}("function"==typeof t?t:c(t)))},filter:function(t){"function"!=typeof t&&(t=l(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,s=e[i],a=s.length,c=r[i]=[],h=0;h<a;++h)(o=s[h])&&t.call(o,o.__data__,h,s)&&c.push(o);return new gt(r,this._parents)},data:function(t,e){if(!arguments.length)return Array.from(this,b);var n=e?v:y,r=this._parents,i=this._groups;"function"!=typeof t&&(t=m(t));for(var o=i.length,s=new Array(o),a=new Array(o),l=new Array(o),c=0;c<o;++c){var h=r[c],u=i[c],d=u.length,p=w(t.call(h,h&&h.__data__,c,r)),f=p.length,g=a[c]=new Array(f),x=s[c]=new Array(f),k=l[c]=new Array(d);n(h,u,g,x,k,p,e);for(var S,_,E=0,C=0;E<f;++E)if(S=g[E]){for(E>=C&&(C=E+1);!(_=x[C])&&++C<f;);S._next=_||null}}return(s=new gt(s,r))._enter=a,s._exit=l,s},enter:function(){return new gt(this._enter||this._groups.map(f),this._parents)},exit:function(){return new gt(this._exit||this._groups.map(f),this._parents)},join:function(t,e,n){var r=this.enter(),i=this,o=this.exit();return"function"==typeof t?(r=t(r))&&(r=r.selection()):r=r.append(t+""),null!=e&&(i=e(i))&&(i=i.selection()),null==n?o.remove():n(o),r&&i?r.merge(i).order():i},merge:function(t){for(var e=t.selection?t.selection():t,n=this._groups,r=e._groups,i=n.length,o=r.length,s=Math.min(i,o),a=new Array(i),l=0;l<s;++l)for(var c,h=n[l],u=r[l],d=h.length,p=a[l]=new Array(d),f=0;f<d;++f)(c=h[f]||u[f])&&(p[f]=c);for(;l<i;++l)a[l]=n[l];return new gt(a,this._parents)},selection:function(){return this},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var r,i=t[e],o=i.length-1,s=i[o];--o>=0;)(r=i[o])&&(s&&4^r.compareDocumentPosition(s)&&s.parentNode.insertBefore(r,s),s=r);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=x);for(var n=this._groups,r=n.length,i=new Array(r),o=0;o<r;++o){for(var s,a=n[o],l=a.length,c=i[o]=new Array(l),h=0;h<l;++h)(s=a[h])&&(c[h]=s);c.sort(e)}return new gt(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){return Array.from(this)},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r=t[e],i=0,o=r.length;i<o;++i){var s=r[i];if(s)return s}return null},size:function(){let t=0;for(const e of this)++t;return t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,r=e.length;n<r;++n)for(var i,o=e[n],s=0,a=o.length;s<a;++s)(i=o[s])&&t.call(i,i.__data__,s,o);return this},attr:function(t,e){var n=_(t);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==e?n.local?C:E:"function"==typeof e?n.local?T:A:n.local?M:O)(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?D:"function"==typeof e?R:j)(t,e,null==n?"":n)):P(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?z:"function"==typeof e?B:I)(t,e)):this.node()[t]},classed:function(t,e){var n=F(t+"");if(arguments.length<2){for(var r=$(this.node()),i=-1,o=n.length;++i<o;)if(!r.contains(n[i]))return!1;return!0}return this.each(("function"==typeof e?U:e?q:W)(n,e))},text:function(t){return arguments.length?this.each(null==t?Y:("function"==typeof t?X:J)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?K:("function"==typeof t?Z:G)(t)):this.node().innerHTML},raise:function(){return this.each(Q)},lower:function(){return this.each(tt)},append:function(t){var e="function"==typeof t?t:rt(t);return this.select((function(){return this.appendChild(e.apply(this,arguments))}))},insert:function(t,e){var n="function"==typeof t?t:rt(t),r=null==e?it:"function"==typeof e?e:i(e);return this.select((function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(ot)},clone:function(t){return this.select(t?at:st)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var r,i,o=lt(t+""),s=o.length;if(!(arguments.length<2)){for(a=e?ht:ct,r=0;r<s;++r)this.each(a(o[r],e,n));return this}var a=this.node().__on;if(a)for(var l,c=0,h=a.length;c<h;++c)for(r=0,l=a[c];r<s;++r)if((i=o[r]).type===l.type&&i.name===l.name)return l.value},dispatch:function(t,e){return this.each(("function"==typeof e?pt:dt)(t,e))},[Symbol.iterator]:function*(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r,i=t[e],o=0,s=i.length;o<s;++o)(r=i[o])&&(yield r)}};const yt=mt;var vt={value:()=>{}};function bt(){for(var t,e=0,n=arguments.length,r={};e<n;++e){if(!(t=arguments[e]+"")||t in r||/[\s.]/.test(t))throw new Error("illegal type: "+t);r[t]=[]}return new wt(r)}function wt(t){this._=t}function xt(t,e){return t.trim().split(/^|\s+/).map((function(t){var n="",r=t.indexOf(".");if(r>=0&&(n=t.slice(r+1),t=t.slice(0,r)),t&&!e.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:n}}))}function kt(t,e){for(var n,r=0,i=t.length;r<i;++r)if((n=t[r]).name===e)return n.value}function St(t,e,n){for(var r=0,i=t.length;r<i;++r)if(t[r].name===e){t[r]=vt,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=n&&t.push({name:e,value:n}),t}wt.prototype=bt.prototype={constructor:wt,on:function(t,e){var n,r=this._,i=xt(t+"",r),o=-1,s=i.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++o<s;)if(n=(t=i[o]).type)r[n]=St(r[n],t.name,e);else if(null==e)for(n in r)r[n]=St(r[n],t.name,null);return this}for(;++o<s;)if((n=(t=i[o]).type)&&(n=kt(r[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new wt(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,r,i=new Array(n),o=0;o<n;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,n=(r=this._[t]).length;o<n;++o)r[o].value.apply(e,i)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(e,n)}};const _t=bt;var Et,Ct,Ot=0,Mt=0,At=0,Tt=0,Nt=0,Dt=0,jt="object"==typeof performance&&performance.now?performance:Date,Rt="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function Pt(){return Nt||(Rt(zt),Nt=jt.now()+Dt)}function zt(){Nt=0}function It(){this._call=this._time=this._next=null}function Bt(t,e,n){var r=new It;return r.restart(t,e,n),r}function Ft(){Nt=(Tt=jt.now())+Dt,Ot=Mt=0;try{!function(){Pt(),++Ot;for(var t,e=Et;e;)(t=Nt-e._time)>=0&&e._call.call(void 0,t),e=e._next;--Ot}()}finally{Ot=0,function(){var t,e,n=Et,r=1/0;for(;n;)n._call?(r>n._time&&(r=n._time),t=n,n=n._next):(e=n._next,n._next=null,n=t?t._next=e:Et=e);Ct=t,Lt(r)}(),Nt=0}}function $t(){var t=jt.now(),e=t-Tt;e>1e3&&(Dt-=e,Tt=t)}function Lt(t){Ot||(Mt&&(Mt=clearTimeout(Mt)),t-Nt>24?(t<1/0&&(Mt=setTimeout(Ft,t-jt.now()-Dt)),At&&(At=clearInterval(At))):(At||(Tt=jt.now(),At=setInterval($t,1e3)),Ot=1,Rt(Ft)))}function Ht(t,e,n){var r=new It;return e=null==e?0:+e,r.restart((n=>{r.stop(),t(n+e)}),e,n),r}It.prototype=Bt.prototype={constructor:It,restart:function(t,e,n){if("function"!=typeof t)throw new TypeError("callback is not a function");n=(null==n?Pt():+n)+(null==e?0:+e),this._next||Ct===this||(Ct?Ct._next=this:Et=this,Ct=this),this._call=t,this._time=n,Lt()},stop:function(){this._call&&(this._call=null,this._time=1/0,Lt())}};var Vt=_t("start","end","cancel","interrupt"),qt=[];function Wt(t,e,n,r,i,o){var s=t.__transition;if(s){if(n in s)return}else t.__transition={};!function(t,e,n){var r,i=t.__transition;function o(t){n.state=1,n.timer.restart(s,n.delay,n.time),n.delay<=t&&s(t-n.delay)}function s(o){var c,h,u,d;if(1!==n.state)return l();for(c in i)if((d=i[c]).name===n.name){if(3===d.state)return Ht(s);4===d.state?(d.state=6,d.timer.stop(),d.on.call("interrupt",t,t.__data__,d.index,d.group),delete i[c]):+c<e&&(d.state=6,d.timer.stop(),d.on.call("cancel",t,t.__data__,d.index,d.group),delete i[c])}if(Ht((function(){3===n.state&&(n.state=4,n.timer.restart(a,n.delay,n.time),a(o))})),n.state=2,n.on.call("start",t,t.__data__,n.index,n.group),2===n.state){for(n.state=3,r=new Array(u=n.tween.length),c=0,h=-1;c<u;++c)(d=n.tween[c].value.call(t,t.__data__,n.index,n.group))&&(r[++h]=d);r.length=h+1}}function a(e){for(var i=e<n.duration?n.ease.call(null,e/n.duration):(n.timer.restart(l),n.state=5,1),o=-1,s=r.length;++o<s;)r[o].call(t,i);5===n.state&&(n.on.call("end",t,t.__data__,n.index,n.group),l())}function l(){for(var r in n.state=6,n.timer.stop(),delete i[e],i)return;delete t.__transition}i[e]=n,n.timer=Bt(o,0,n.time)}(t,n,{name:e,index:r,group:i,on:Vt,tween:qt,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:0})}function Ut(t,e){var n=Jt(t,e);if(n.state>0)throw new Error("too late; already scheduled");return n}function Yt(t,e){var n=Jt(t,e);if(n.state>3)throw new Error("too late; already running");return n}function Jt(t,e){var n=t.__transition;if(!n||!(n=n[e]))throw new Error("transition not found");return n}function Xt(t,e){return t=+t,e=+e,function(n){return t*(1-n)+e*n}}var Kt,Gt=180/Math.PI,Zt={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function Qt(t,e,n,r,i,o){var s,a,l;return(s=Math.sqrt(t*t+e*e))&&(t/=s,e/=s),(l=t*n+e*r)&&(n-=t*l,r-=e*l),(a=Math.sqrt(n*n+r*r))&&(n/=a,r/=a,l/=a),t*r<e*n&&(t=-t,e=-e,l=-l,s=-s),{translateX:i,translateY:o,rotate:Math.atan2(e,t)*Gt,skewX:Math.atan(l)*Gt,scaleX:s,scaleY:a}}function te(t,e,n,r){function i(t){return t.length?t.pop()+" ":""}return function(o,s){var a=[],l=[];return o=t(o),s=t(s),function(t,r,i,o,s,a){if(t!==i||r!==o){var l=s.push("translate(",null,e,null,n);a.push({i:l-4,x:Xt(t,i)},{i:l-2,x:Xt(r,o)})}else(i||o)&&s.push("translate("+i+e+o+n)}(o.translateX,o.translateY,s.translateX,s.translateY,a,l),function(t,e,n,o){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),o.push({i:n.push(i(n)+"rotate(",null,r)-2,x:Xt(t,e)})):e&&n.push(i(n)+"rotate("+e+r)}(o.rotate,s.rotate,a,l),function(t,e,n,o){t!==e?o.push({i:n.push(i(n)+"skewX(",null,r)-2,x:Xt(t,e)}):e&&n.push(i(n)+"skewX("+e+r)}(o.skewX,s.skewX,a,l),function(t,e,n,r,o,s){if(t!==n||e!==r){var a=o.push(i(o)+"scale(",null,",",null,")");s.push({i:a-4,x:Xt(t,n)},{i:a-2,x:Xt(e,r)})}else 1===n&&1===r||o.push(i(o)+"scale("+n+","+r+")")}(o.scaleX,o.scaleY,s.scaleX,s.scaleY,a,l),o=s=null,function(t){for(var e,n=-1,r=l.length;++n<r;)a[(e=l[n]).i]=e.x(t);return a.join("")}}}var ee=te((function(t){const e=new("function"==typeof DOMMatrix?DOMMatrix:WebKitCSSMatrix)(t+"");return e.isIdentity?Zt:Qt(e.a,e.b,e.c,e.d,e.e,e.f)}),"px, ","px)","deg)"),ne=te((function(t){return null==t?Zt:(Kt||(Kt=document.createElementNS("http://www.w3.org/2000/svg","g")),Kt.setAttribute("transform",t),(t=Kt.transform.baseVal.consolidate())?Qt((t=t.matrix).a,t.b,t.c,t.d,t.e,t.f):Zt)}),", ",")",")");function re(t,e){var n,r;return function(){var i=Yt(this,t),o=i.tween;if(o!==n)for(var s=0,a=(r=n=o).length;s<a;++s)if(r[s].name===e){(r=r.slice()).splice(s,1);break}i.tween=r}}function ie(t,e,n){var r,i;if("function"!=typeof n)throw new Error;return function(){var o=Yt(this,t),s=o.tween;if(s!==r){i=(r=s).slice();for(var a={name:e,value:n},l=0,c=i.length;l<c;++l)if(i[l].name===e){i[l]=a;break}l===c&&i.push(a)}o.tween=i}}function oe(t,e,n){var r=t._id;return t.each((function(){var t=Yt(this,r);(t.value||(t.value={}))[e]=n.apply(this,arguments)})),function(t){return Jt(t,r).value[e]}}function se(t,e,n){t.prototype=e.prototype=n,n.constructor=t}function ae(t,e){var n=Object.create(t.prototype);for(var r in e)n[r]=e[r];return n}function le(){}var ce=.7,he=1/ce,ue="\\s*([+-]?\\d+)\\s*",de="\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*",pe="\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*",fe=/^#([0-9a-f]{3,8})$/,ge=new RegExp(`^rgb\\(${ue},${ue},${ue}\\)$`),me=new RegExp(`^rgb\\(${pe},${pe},${pe}\\)$`),ye=new RegExp(`^rgba\\(${ue},${ue},${ue},${de}\\)$`),ve=new RegExp(`^rgba\\(${pe},${pe},${pe},${de}\\)$`),be=new RegExp(`^hsl\\(${de},${pe},${pe}\\)$`),we=new RegExp(`^hsla\\(${de},${pe},${pe},${de}\\)$`),xe={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function ke(){return this.rgb().formatHex()}function Se(){return this.rgb().formatRgb()}function _e(t){var e,n;return t=(t+"").trim().toLowerCase(),(e=fe.exec(t))?(n=e[1].length,e=parseInt(e[1],16),6===n?Ee(e):3===n?new Ae(e>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):8===n?Ce(e>>24&255,e>>16&255,e>>8&255,(255&e)/255):4===n?Ce(e>>12&15|e>>8&240,e>>8&15|e>>4&240,e>>4&15|240&e,((15&e)<<4|15&e)/255):null):(e=ge.exec(t))?new Ae(e[1],e[2],e[3],1):(e=me.exec(t))?new Ae(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=ye.exec(t))?Ce(e[1],e[2],e[3],e[4]):(e=ve.exec(t))?Ce(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=be.exec(t))?Pe(e[1],e[2]/100,e[3]/100,1):(e=we.exec(t))?Pe(e[1],e[2]/100,e[3]/100,e[4]):xe.hasOwnProperty(t)?Ee(xe[t]):"transparent"===t?new Ae(NaN,NaN,NaN,0):null}function Ee(t){return new Ae(t>>16&255,t>>8&255,255&t,1)}function Ce(t,e,n,r){return r<=0&&(t=e=n=NaN),new Ae(t,e,n,r)}function Oe(t){return t instanceof le||(t=_e(t)),t?new Ae((t=t.rgb()).r,t.g,t.b,t.opacity):new Ae}function Me(t,e,n,r){return 1===arguments.length?Oe(t):new Ae(t,e,n,null==r?1:r)}function Ae(t,e,n,r){this.r=+t,this.g=+e,this.b=+n,this.opacity=+r}function Te(){return`#${Re(this.r)}${Re(this.g)}${Re(this.b)}`}function Ne(){const t=De(this.opacity);return`${1===t?"rgb(":"rgba("}${je(this.r)}, ${je(this.g)}, ${je(this.b)}${1===t?")":`, ${t})`}`}function De(t){return isNaN(t)?1:Math.max(0,Math.min(1,t))}function je(t){return Math.max(0,Math.min(255,Math.round(t)||0))}function Re(t){return((t=je(t))<16?"0":"")+t.toString(16)}function Pe(t,e,n,r){return r<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new Ie(t,e,n,r)}function ze(t){if(t instanceof Ie)return new Ie(t.h,t.s,t.l,t.opacity);if(t instanceof le||(t=_e(t)),!t)return new Ie;if(t instanceof Ie)return t;var e=(t=t.rgb()).r/255,n=t.g/255,r=t.b/255,i=Math.min(e,n,r),o=Math.max(e,n,r),s=NaN,a=o-i,l=(o+i)/2;return a?(s=e===o?(n-r)/a+6*(n<r):n===o?(r-e)/a+2:(e-n)/a+4,a/=l<.5?o+i:2-o-i,s*=60):a=l>0&&l<1?0:s,new Ie(s,a,l,t.opacity)}function Ie(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function Be(t){return(t=(t||0)%360)<0?t+360:t}function Fe(t){return Math.max(0,Math.min(1,t||0))}function $e(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}function Le(t,e,n,r,i){var o=t*t,s=o*t;return((1-3*t+3*o-s)*e+(4-6*o+3*s)*n+(1+3*t+3*o-3*s)*r+s*i)/6}se(le,_e,{copy(t){return Object.assign(new this.constructor,this,t)},displayable(){return this.rgb().displayable()},hex:ke,formatHex:ke,formatHex8:function(){return this.rgb().formatHex8()},formatHsl:function(){return ze(this).formatHsl()},formatRgb:Se,toString:Se}),se(Ae,Me,ae(le,{brighter(t){return t=null==t?he:Math.pow(he,t),new Ae(this.r*t,this.g*t,this.b*t,this.opacity)},darker(t){return t=null==t?ce:Math.pow(ce,t),new Ae(this.r*t,this.g*t,this.b*t,this.opacity)},rgb(){return this},clamp(){return new Ae(je(this.r),je(this.g),je(this.b),De(this.opacity))},displayable(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:Te,formatHex:Te,formatHex8:function(){return`#${Re(this.r)}${Re(this.g)}${Re(this.b)}${Re(255*(isNaN(this.opacity)?1:this.opacity))}`},formatRgb:Ne,toString:Ne})),se(Ie,(function(t,e,n,r){return 1===arguments.length?ze(t):new Ie(t,e,n,null==r?1:r)}),ae(le,{brighter(t){return t=null==t?he:Math.pow(he,t),new Ie(this.h,this.s,this.l*t,this.opacity)},darker(t){return t=null==t?ce:Math.pow(ce,t),new Ie(this.h,this.s,this.l*t,this.opacity)},rgb(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*e,i=2*n-r;return new Ae($e(t>=240?t-240:t+120,i,r),$e(t,i,r),$e(t<120?t+240:t-120,i,r),this.opacity)},clamp(){return new Ie(Be(this.h),Fe(this.s),Fe(this.l),De(this.opacity))},displayable(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl(){const t=De(this.opacity);return`${1===t?"hsl(":"hsla("}${Be(this.h)}, ${100*Fe(this.s)}%, ${100*Fe(this.l)}%${1===t?")":`, ${t})`}`}}));const He=t=>()=>t;function Ve(t,e){return function(n){return t+n*e}}function qe(t){return 1==(t=+t)?We:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(r){return Math.pow(t+r*e,n)}}(e,n,t):He(isNaN(e)?n:e)}}function We(t,e){var n=e-t;return n?Ve(t,n):He(isNaN(t)?e:t)}const Ue=function t(e){var n=qe(e);function r(t,e){var r=n((t=Me(t)).r,(e=Me(e)).r),i=n(t.g,e.g),o=n(t.b,e.b),s=We(t.opacity,e.opacity);return function(e){return t.r=r(e),t.g=i(e),t.b=o(e),t.opacity=s(e),t+""}}return r.gamma=t,r}(1);function Ye(t){return function(e){var n,r,i=e.length,o=new Array(i),s=new Array(i),a=new Array(i);for(n=0;n<i;++n)r=Me(e[n]),o[n]=r.r||0,s[n]=r.g||0,a[n]=r.b||0;return o=t(o),s=t(s),a=t(a),r.opacity=1,function(t){return r.r=o(t),r.g=s(t),r.b=a(t),r+""}}}Ye((function(t){var e=t.length-1;return function(n){var r=n<=0?n=0:n>=1?(n=1,e-1):Math.floor(n*e),i=t[r],o=t[r+1],s=r>0?t[r-1]:2*i-o,a=r<e-1?t[r+2]:2*o-i;return Le((n-r/e)*e,s,i,o,a)}})),Ye((function(t){var e=t.length;return function(n){var r=Math.floor(((n%=1)<0?++n:n)*e),i=t[(r+e-1)%e],o=t[r%e],s=t[(r+1)%e],a=t[(r+2)%e];return Le((n-r/e)*e,i,o,s,a)}}));var Je=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Xe=new RegExp(Je.source,"g");function Ke(t,e){var n,r,i,o=Je.lastIndex=Xe.lastIndex=0,s=-1,a=[],l=[];for(t+="",e+="";(n=Je.exec(t))&&(r=Xe.exec(e));)(i=r.index)>o&&(i=e.slice(o,i),a[s]?a[s]+=i:a[++s]=i),(n=n[0])===(r=r[0])?a[s]?a[s]+=r:a[++s]=r:(a[++s]=null,l.push({i:s,x:Xt(n,r)})),o=Xe.lastIndex;return o<e.length&&(i=e.slice(o),a[s]?a[s]+=i:a[++s]=i),a.length<2?l[0]?function(t){return function(e){return t(e)+""}}(l[0].x):function(t){return function(){return t}}(e):(e=l.length,function(t){for(var n,r=0;r<e;++r)a[(n=l[r]).i]=n.x(t);return a.join("")})}function Ge(t,e){var n;return("number"==typeof e?Xt:e instanceof _e?Ue:(n=_e(e))?(e=n,Ue):Ke)(t,e)}function Ze(t){return function(){this.removeAttribute(t)}}function Qe(t){return function(){this.removeAttributeNS(t.space,t.local)}}function tn(t,e,n){var r,i,o=n+"";return function(){var s=this.getAttribute(t);return s===o?null:s===r?i:i=e(r=s,n)}}function en(t,e,n){var r,i,o=n+"";return function(){var s=this.getAttributeNS(t.space,t.local);return s===o?null:s===r?i:i=e(r=s,n)}}function nn(t,e,n){var r,i,o;return function(){var s,a,l=n(this);if(null!=l)return(s=this.getAttribute(t))===(a=l+"")?null:s===r&&a===i?o:(i=a,o=e(r=s,l));this.removeAttribute(t)}}function rn(t,e,n){var r,i,o;return function(){var s,a,l=n(this);if(null!=l)return(s=this.getAttributeNS(t.space,t.local))===(a=l+"")?null:s===r&&a===i?o:(i=a,o=e(r=s,l));this.removeAttributeNS(t.space,t.local)}}function on(t,e){return function(n){this.setAttribute(t,e.call(this,n))}}function sn(t,e){return function(n){this.setAttributeNS(t.space,t.local,e.call(this,n))}}function an(t,e){var n,r;function i(){var i=e.apply(this,arguments);return i!==r&&(n=(r=i)&&sn(t,i)),n}return i._value=e,i}function ln(t,e){var n,r;function i(){var i=e.apply(this,arguments);return i!==r&&(n=(r=i)&&on(t,i)),n}return i._value=e,i}function cn(t,e){return function(){Ut(this,t).delay=+e.apply(this,arguments)}}function hn(t,e){return e=+e,function(){Ut(this,t).delay=e}}function un(t,e){return function(){Yt(this,t).duration=+e.apply(this,arguments)}}function dn(t,e){return e=+e,function(){Yt(this,t).duration=e}}function pn(t,e){if("function"!=typeof e)throw new Error;return function(){Yt(this,t).ease=e}}function fn(t,e,n){var r,i,o=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var e=t.indexOf(".");return e>=0&&(t=t.slice(0,e)),!t||"start"===t}))}(e)?Ut:Yt;return function(){var s=o(this,t),a=s.on;a!==r&&(i=(r=a).copy()).on(e,n),s.on=i}}var gn=yt.prototype.constructor;function mn(t){return function(){this.style.removeProperty(t)}}function yn(t,e,n){return function(r){this.style.setProperty(t,e.call(this,r),n)}}function vn(t,e,n){var r,i;function o(){var o=e.apply(this,arguments);return o!==i&&(r=(i=o)&&yn(t,o,n)),r}return o._value=e,o}function bn(t){return function(e){this.textContent=t.call(this,e)}}function wn(t){var e,n;function r(){var r=t.apply(this,arguments);return r!==n&&(e=(n=r)&&bn(r)),e}return r._value=t,r}var xn=0;function kn(t,e,n,r){this._groups=t,this._parents=e,this._name=n,this._id=r}function Sn(){return++xn}var _n=yt.prototype;kn.prototype=function(t){return yt().transition(t)}.prototype={constructor:kn,select:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=i(t));for(var r=this._groups,o=r.length,s=new Array(o),a=0;a<o;++a)for(var l,c,h=r[a],u=h.length,d=s[a]=new Array(u),p=0;p<u;++p)(l=h[p])&&(c=t.call(l,l.__data__,p,h))&&("__data__"in l&&(c.__data__=l.__data__),d[p]=c,Wt(d[p],e,n,p,d,Jt(l,n)));return new kn(s,this._parents,e,n)},selectAll:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=a(t));for(var r=this._groups,i=r.length,o=[],s=[],l=0;l<i;++l)for(var c,h=r[l],u=h.length,d=0;d<u;++d)if(c=h[d]){for(var p,f=t.call(c,c.__data__,d,h),g=Jt(c,n),m=0,y=f.length;m<y;++m)(p=f[m])&&Wt(p,e,n,m,f,g);o.push(f),s.push(c)}return new kn(o,s,e,n)},selectChild:_n.selectChild,selectChildren:_n.selectChildren,filter:function(t){"function"!=typeof t&&(t=l(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,s=e[i],a=s.length,c=r[i]=[],h=0;h<a;++h)(o=s[h])&&t.call(o,o.__data__,h,s)&&c.push(o);return new kn(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var e=this._groups,n=t._groups,r=e.length,i=n.length,o=Math.min(r,i),s=new Array(r),a=0;a<o;++a)for(var l,c=e[a],h=n[a],u=c.length,d=s[a]=new Array(u),p=0;p<u;++p)(l=c[p]||h[p])&&(d[p]=l);for(;a<r;++a)s[a]=e[a];return new kn(s,this._parents,this._name,this._id)},selection:function(){return new gn(this._groups,this._parents)},transition:function(){for(var t=this._name,e=this._id,n=Sn(),r=this._groups,i=r.length,o=0;o<i;++o)for(var s,a=r[o],l=a.length,c=0;c<l;++c)if(s=a[c]){var h=Jt(s,e);Wt(s,t,n,c,a,{time:h.time+h.delay+h.duration,delay:0,duration:h.duration,ease:h.ease})}return new kn(r,this._parents,t,n)},call:_n.call,nodes:_n.nodes,node:_n.node,size:_n.size,empty:_n.empty,each:_n.each,on:function(t,e){var n=this._id;return arguments.length<2?Jt(this.node(),n).on.on(t):this.each(fn(n,t,e))},attr:function(t,e){var n=_(t),r="transform"===n?ne:Ge;return this.attrTween(t,"function"==typeof e?(n.local?rn:nn)(n,r,oe(this,"attr."+t,e)):null==e?(n.local?Qe:Ze)(n):(n.local?en:tn)(n,r,e))},attrTween:function(t,e){var n="attr."+t;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==e)return this.tween(n,null);if("function"!=typeof e)throw new Error;var r=_(t);return this.tween(n,(r.local?an:ln)(r,e))},style:function(t,e,n){var r="transform"==(t+="")?ee:Ge;return null==e?this.styleTween(t,function(t,e){var n,r,i;return function(){var o=P(this,t),s=(this.style.removeProperty(t),P(this,t));return o===s?null:o===n&&s===r?i:i=e(n=o,r=s)}}(t,r)).on("end.style."+t,mn(t)):"function"==typeof e?this.styleTween(t,function(t,e,n){var r,i,o;return function(){var s=P(this,t),a=n(this),l=a+"";return null==a&&(this.style.removeProperty(t),l=a=P(this,t)),s===l?null:s===r&&l===i?o:(i=l,o=e(r=s,a))}}(t,r,oe(this,"style."+t,e))).each(function(t,e){var n,r,i,o,s="style."+e,a="end."+s;return function(){var l=Yt(this,t),c=l.on,h=null==l.value[s]?o||(o=mn(e)):void 0;c===n&&i===h||(r=(n=c).copy()).on(a,i=h),l.on=r}}(this._id,t)):this.styleTween(t,function(t,e,n){var r,i,o=n+"";return function(){var s=P(this,t);return s===o?null:s===r?i:i=e(r=s,n)}}(t,r,e),n).on("end.style."+t,null)},styleTween:function(t,e,n){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==e)return this.tween(r,null);if("function"!=typeof e)throw new Error;return this.tween(r,vn(t,e,null==n?"":n))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var e=t(this);this.textContent=null==e?"":e}}(oe(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},textTween:function(t){var e="text";if(arguments.length<1)return(e=this.tween(e))&&e._value;if(null==t)return this.tween(e,null);if("function"!=typeof t)throw new Error;return this.tween(e,wn(t))},remove:function(){return this.on("end.remove",function(t){return function(){var e=this.parentNode;for(var n in this.__transition)if(+n!==t)return;e&&e.removeChild(this)}}(this._id))},tween:function(t,e){var n=this._id;if(t+="",arguments.length<2){for(var r,i=Jt(this.node(),n).tween,o=0,s=i.length;o<s;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==e?re:ie)(n,t,e))},delay:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?cn:hn)(e,t)):Jt(this.node(),e).delay},duration:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?un:dn)(e,t)):Jt(this.node(),e).duration},ease:function(t){var e=this._id;return arguments.length?this.each(pn(e,t)):Jt(this.node(),e).ease},easeVarying:function(t){if("function"!=typeof t)throw new Error;return this.each(function(t,e){return function(){var n=e.apply(this,arguments);if("function"!=typeof n)throw new Error;Yt(this,t).ease=n}}(this._id,t))},end:function(){var t,e,n=this,r=n._id,i=n.size();return new Promise((function(o,s){var a={value:s},l={value:function(){0==--i&&o()}};n.each((function(){var n=Yt(this,r),i=n.on;i!==t&&((e=(t=i).copy())._.cancel.push(a),e._.interrupt.push(a),e._.end.push(l)),n.on=e})),0===i&&o()}))},[Symbol.iterator]:_n[Symbol.iterator]};var En={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function Cn(t,e){for(var n;!(n=t.__transition)||!(n=n[e]);)if(!(t=t.parentNode))throw new Error(`transition ${e} not found`);return n}yt.prototype.interrupt=function(t){return this.each((function(){!function(t,e){var n,r,i,o=t.__transition,s=!0;if(o){for(i in e=null==e?null:e+"",o)(n=o[i]).name===e?(r=n.state>2&&n.state<5,n.state=6,n.timer.stop(),n.on.call(r?"interrupt":"cancel",t,t.__data__,n.index,n.group),delete o[i]):s=!1;s&&delete t.__transition}}(this,t)}))},yt.prototype.transition=function(t){var e,n;t instanceof kn?(e=t._id,t=t._name):(e=Sn(),(n=En).time=Pt(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var s,a=r[o],l=a.length,c=0;c<l;++c)(s=a[c])&&Wt(s,t,e,c,a,n||Cn(s,e));return new kn(r,this._parents,t,e)};const{abs:On,max:Mn,min:An}=Math;function Tn(t){return[+t[0],+t[1]]}function Nn(t){return[Tn(t[0]),Tn(t[1])]}["w","e"].map(Dn),["n","s"].map(Dn),["n","w","e","s","nw","ne","sw","se"].map(Dn);function Dn(t){return{type:t}}function jn(t){return"string"==typeof t?new gt([[document.querySelector(t)]],[document.documentElement]):new gt([[t]],ft)}function Rn(t){let e;for(;e=t.sourceEvent;)t=e;return t}function Pn(t,e){if(t=Rn(t),void 0===e&&(e=t.currentTarget),e){var n=e.ownerSVGElement||e;if(n.createSVGPoint){var r=n.createSVGPoint();return r.x=t.clientX,r.y=t.clientY,[(r=r.matrixTransform(e.getScreenCTM().inverse())).x,r.y]}if(e.getBoundingClientRect){var i=e.getBoundingClientRect();return[t.clientX-i.left-e.clientLeft,t.clientY-i.top-e.clientTop]}}return[t.pageX,t.pageY]}const zn={passive:!1},In={capture:!0,passive:!1};function Bn(t){t.stopImmediatePropagation()}function Fn(t){t.preventDefault(),t.stopImmediatePropagation()}const $n=t=>()=>t;function Ln(t,{sourceEvent:e,subject:n,target:r,identifier:i,active:o,x:s,y:a,dx:l,dy:c,dispatch:h}){Object.defineProperties(this,{type:{value:t,enumerable:!0,configurable:!0},sourceEvent:{value:e,enumerable:!0,configurable:!0},subject:{value:n,enumerable:!0,configurable:!0},target:{value:r,enumerable:!0,configurable:!0},identifier:{value:i,enumerable:!0,configurable:!0},active:{value:o,enumerable:!0,configurable:!0},x:{value:s,enumerable:!0,configurable:!0},y:{value:a,enumerable:!0,configurable:!0},dx:{value:l,enumerable:!0,configurable:!0},dy:{value:c,enumerable:!0,configurable:!0},_:{value:h}})}function Hn(t){return!t.ctrlKey&&!t.button}function Vn(){return this.parentNode}function qn(t,e){return null==e?{x:t.x,y:t.y}:e}function Wn(){return navigator.maxTouchPoints||"ontouchstart"in this}function Un(){var t,e,n,r,i=Hn,o=Vn,s=qn,a=Wn,l={},c=_t("start","drag","end"),h=0,u=0;function d(t){t.on("mousedown.drag",p).filter(a).on("touchstart.drag",m).on("touchmove.drag",y,zn).on("touchend.drag touchcancel.drag",v).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function p(s,a){if(!r&&i.call(this,s,a)){var l=b(this,o.call(this,s,a),s,a,"mouse");l&&(jn(s.view).on("mousemove.drag",f,In).on("mouseup.drag",g,In),function(t){var e=t.document.documentElement,n=jn(t).on("dragstart.drag",Fn,In);"onselectstart"in e?n.on("selectstart.drag",Fn,In):(e.__noselect=e.style.MozUserSelect,e.style.MozUserSelect="none")}(s.view),Bn(s),n=!1,t=s.clientX,e=s.clientY,l("start",s))}}function f(r){if(Fn(r),!n){var i=r.clientX-t,o=r.clientY-e;n=i*i+o*o>u}l.mouse("drag",r)}function g(t){jn(t.view).on("mousemove.drag mouseup.drag",null),function(t,e){var n=t.document.documentElement,r=jn(t).on("dragstart.drag",null);e&&(r.on("click.drag",Fn,In),setTimeout((function(){r.on("click.drag",null)}),0)),"onselectstart"in n?r.on("selectstart.drag",null):(n.style.MozUserSelect=n.__noselect,delete n.__noselect)}(t.view,n),Fn(t),l.mouse("end",t)}function m(t,e){if(i.call(this,t,e)){var n,r,s=t.changedTouches,a=o.call(this,t,e),l=s.length;for(n=0;n<l;++n)(r=b(this,a,t,e,s[n].identifier,s[n]))&&(Bn(t),r("start",t,s[n]))}}function y(t){var e,n,r=t.changedTouches,i=r.length;for(e=0;e<i;++e)(n=l[r[e].identifier])&&(Fn(t),n("drag",t,r[e]))}function v(t){var e,n,i=t.changedTouches,o=i.length;for(r&&clearTimeout(r),r=setTimeout((function(){r=null}),500),e=0;e<o;++e)(n=l[i[e].identifier])&&(Bn(t),n("end",t,i[e]))}function b(t,e,n,r,i,o){var a,u,p,f=c.copy(),g=Pn(o||n,e);if(null!=(p=s.call(t,new Ln("beforestart",{sourceEvent:n,target:d,identifier:i,active:h,x:g[0],y:g[1],dx:0,dy:0,dispatch:f}),r)))return a=p.x-g[0]||0,u=p.y-g[1]||0,function n(o,s,c){var m,y=g;switch(o){case"start":l[i]=n,m=h++;break;case"end":delete l[i],--h;case"drag":g=Pn(c||s,e),m=h}f.call(o,t,new Ln(o,{sourceEvent:s,subject:p,target:d,identifier:i,active:m,x:g[0]+a,y:g[1]+u,dx:g[0]-y[0],dy:g[1]-y[1],dispatch:f}),r)}}return d.filter=function(t){return arguments.length?(i="function"==typeof t?t:$n(!!t),d):i},d.container=function(t){return arguments.length?(o="function"==typeof t?t:$n(t),d):o},d.subject=function(t){return arguments.length?(s="function"==typeof t?t:$n(t),d):s},d.touchable=function(t){return arguments.length?(a="function"==typeof t?t:$n(!!t),d):a},d.on=function(){var t=c.on.apply(c,arguments);return t===c?d:t},d.clickDistance=function(t){return arguments.length?(u=(t=+t)*t,d):Math.sqrt(u)},d}Ln.prototype.on=function(){var t=this._.on.apply(this._,arguments);return t===this._?this:t};const Yn=Math.PI,Jn=2*Yn,Xn=1e-6,Kn=Jn-Xn;function Gn(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function Zn(){return new Gn}Gn.prototype=Zn.prototype={constructor:Gn,moveTo:function(t,e){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,e){this._+="L"+(this._x1=+t)+","+(this._y1=+e)},quadraticCurveTo:function(t,e,n,r){this._+="Q"+ +t+","+ +e+","+(this._x1=+n)+","+(this._y1=+r)},bezierCurveTo:function(t,e,n,r,i,o){this._+="C"+ +t+","+ +e+","+ +n+","+ +r+","+(this._x1=+i)+","+(this._y1=+o)},arcTo:function(t,e,n,r,i){t=+t,e=+e,n=+n,r=+r,i=+i;var o=this._x1,s=this._y1,a=n-t,l=r-e,c=o-t,h=s-e,u=c*c+h*h;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=e);else if(u>Xn)if(Math.abs(h*a-l*c)>Xn&&i){var d=n-o,p=r-s,f=a*a+l*l,g=d*d+p*p,m=Math.sqrt(f),y=Math.sqrt(u),v=i*Math.tan((Yn-Math.acos((f+u-g)/(2*m*y)))/2),b=v/y,w=v/m;Math.abs(b-1)>Xn&&(this._+="L"+(t+b*c)+","+(e+b*h)),this._+="A"+i+","+i+",0,0,"+ +(h*d>c*p)+","+(this._x1=t+w*a)+","+(this._y1=e+w*l)}else this._+="L"+(this._x1=t)+","+(this._y1=e);else;},arc:function(t,e,n,r,i,o){t=+t,e=+e,o=!!o;var s=(n=+n)*Math.cos(r),a=n*Math.sin(r),l=t+s,c=e+a,h=1^o,u=o?r-i:i-r;if(n<0)throw new Error("negative radius: "+n);null===this._x1?this._+="M"+l+","+c:(Math.abs(this._x1-l)>Xn||Math.abs(this._y1-c)>Xn)&&(this._+="L"+l+","+c),n&&(u<0&&(u=u%Jn+Jn),u>Kn?this._+="A"+n+","+n+",0,1,"+h+","+(t-s)+","+(e-a)+"A"+n+","+n+",0,1,"+h+","+(this._x1=l)+","+(this._y1=c):u>Xn&&(this._+="A"+n+","+n+",0,"+ +(u>=Yn)+","+h+","+(this._x1=t+n*Math.cos(i))+","+(this._y1=e+n*Math.sin(i))))},rect:function(t,e,n,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)+"h"+ +n+"v"+ +r+"h"+-n+"Z"},toString:function(){return this._}};const Qn=Zn;function tr(t){return jn(rt(t).call(document.documentElement))}function er(t,e){return t.target&&(t=Rn(t),void 0===e&&(e=t.currentTarget),t=t.touches||[t]),Array.from(t,(t=>Pn(t,e)))}Array.prototype.slice;function nr(t){return function(){return t}}function rr(t){this._context=t}function ir(t){return new rr(t)}function or(t){return t[0]}function sr(t){return t[1]}function ar(t,e){var n=nr(!0),r=null,i=ir,o=null;function s(s){var a,l,c,h=(s=function(t){return"object"==typeof t&&"length"in t?t:Array.from(t)}(s)).length,u=!1;for(null==r&&(o=i(c=Qn())),a=0;a<=h;++a)!(a<h&&n(l=s[a],a,s))===u&&((u=!u)?o.lineStart():o.lineEnd()),u&&o.point(+t(l,a,s),+e(l,a,s));if(c)return o=null,c+""||null}return t="function"==typeof t?t:void 0===t?or:nr(t),e="function"==typeof e?e:void 0===e?sr:nr(e),s.x=function(e){return arguments.length?(t="function"==typeof e?e:nr(+e),s):t},s.y=function(t){return arguments.length?(e="function"==typeof t?t:nr(+t),s):e},s.defined=function(t){return arguments.length?(n="function"==typeof t?t:nr(!!t),s):n},s.curve=function(t){return arguments.length?(i=t,null!=r&&(o=i(r)),s):i},s.context=function(t){return arguments.length?(null==t?r=o=null:o=i(r=t),s):r},s}function lr(t,e,n){this.k=t,this.x=e,this.y=n}rr.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:this._context.lineTo(t,e)}}},lr.prototype={constructor:lr,scale:function(t){return 1===t?this:new lr(this.k*t,this.x,this.y)},translate:function(t,e){return 0===t&0===e?this:new lr(this.k,this.x+this.k*t,this.y+this.k*e)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};new lr(1,0,0);lr.prototype},7823:(t,e,n)=>{"use strict";function r(t){this.content=t}n.d(e,{aw:()=>G,PW:()=>at,HY:()=>a,vc:()=>u,ZU:()=>J,NB:()=>N,Ts:()=>A,e4:()=>d,V_:()=>X,p2:()=>p}),r.prototype={constructor:r,find:function(t){for(var e=0;e<this.content.length;e+=2)if(this.content[e]===t)return e;return-1},get:function(t){var e=this.find(t);return-1==e?void 0:this.content[e+1]},update:function(t,e,n){var i=n&&n!=t?this.remove(n):this,o=i.find(t),s=i.content.slice();return-1==o?s.push(n||t,e):(s[o+1]=e,n&&(s[o]=n)),new r(s)},remove:function(t){var e=this.find(t);if(-1==e)return this;var n=this.content.slice();return n.splice(e,2),new r(n)},addToStart:function(t,e){return new r([t,e].concat(this.remove(t).content))},addToEnd:function(t,e){var n=this.remove(t).content.slice();return n.push(t,e),new r(n)},addBefore:function(t,e,n){var i=this.remove(e),o=i.content.slice(),s=i.find(t);return o.splice(-1==s?o.length:s,0,e,n),new r(o)},forEach:function(t){for(var e=0;e<this.content.length;e+=2)t(this.content[e],this.content[e+1])},prepend:function(t){return(t=r.from(t)).size?new r(t.content.concat(this.subtract(t).content)):this},append:function(t){return(t=r.from(t)).size?new r(this.subtract(t).content.concat(t.content)):this},subtract:function(t){var e=this;t=r.from(t);for(var n=0;n<t.content.length;n+=2)e=e.remove(t.content[n]);return e},get size(){return this.content.length>>1}},r.from=function(t){if(t instanceof r)return t;var e=[];if(t)for(var n in t)e.push(n,t[n]);return new r(e)};const i=r;function o(t,e,n){for(let r=0;;r++){if(r==t.childCount||r==e.childCount)return t.childCount==e.childCount?null:n;let i=t.child(r),s=e.child(r);if(i!=s){if(!i.sameMarkup(s))return n;if(i.isText&&i.text!=s.text){for(let t=0;i.text[t]==s.text[t];t++)n++;return n}if(i.content.size||s.content.size){let t=o(i.content,s.content,n+1);if(null!=t)return t}n+=i.nodeSize}else n+=i.nodeSize}}function s(t,e,n,r){for(let i=t.childCount,o=e.childCount;;){if(0==i||0==o)return i==o?null:{a:n,b:r};let a=t.child(--i),l=e.child(--o),c=a.nodeSize;if(a!=l){if(!a.sameMarkup(l))return{a:n,b:r};if(a.isText&&a.text!=l.text){let t=0,e=Math.min(a.text.length,l.text.length);for(;t<e&&a.text[a.text.length-t-1]==l.text[l.text.length-t-1];)t++,n--,r--;return{a:n,b:r}}if(a.content.size||l.content.size){let t=s(a.content,l.content,n-1,r-1);if(t)return t}n-=c,r-=c}else n-=c,r-=c}}class a{constructor(t,e){if(this.content=t,this.size=e||0,null==e)for(let e=0;e<t.length;e++)this.size+=t[e].nodeSize}nodesBetween(t,e,n,r=0,i){for(let o=0,s=0;s<e;o++){let a=this.content[o],l=s+a.nodeSize;if(l>t&&!1!==n(a,r+s,i||null,o)&&a.content.size){let i=s+1;a.nodesBetween(Math.max(0,t-i),Math.min(a.content.size,e-i),n,r+i)}s=l}}descendants(t){this.nodesBetween(0,this.size,t)}textBetween(t,e,n,r){let i="",o=!0;return this.nodesBetween(t,e,((s,a)=>{s.isText?(i+=s.text.slice(Math.max(t,a)-a,e-a),o=!n):s.isLeaf?(r?i+="function"==typeof r?r(s):r:s.type.spec.leafText&&(i+=s.type.spec.leafText(s)),o=!n):!o&&s.isBlock&&(i+=n,o=!0)}),0),i}append(t){if(!t.size)return this;if(!this.size)return t;let e=this.lastChild,n=t.firstChild,r=this.content.slice(),i=0;for(e.isText&&e.sameMarkup(n)&&(r[r.length-1]=e.withText(e.text+n.text),i=1);i<t.content.length;i++)r.push(t.content[i]);return new a(r,this.size+t.size)}cut(t,e=this.size){if(0==t&&e==this.size)return this;let n=[],r=0;if(e>t)for(let i=0,o=0;o<e;i++){let s=this.content[i],a=o+s.nodeSize;a>t&&((o<t||a>e)&&(s=s.isText?s.cut(Math.max(0,t-o),Math.min(s.text.length,e-o)):s.cut(Math.max(0,t-o-1),Math.min(s.content.size,e-o-1))),n.push(s),r+=s.nodeSize),o=a}return new a(n,r)}cutByIndex(t,e){return t==e?a.empty:0==t&&e==this.content.length?this:new a(this.content.slice(t,e))}replaceChild(t,e){let n=this.content[t];if(n==e)return this;let r=this.content.slice(),i=this.size+e.nodeSize-n.nodeSize;return r[t]=e,new a(r,i)}addToStart(t){return new a([t].concat(this.content),this.size+t.nodeSize)}addToEnd(t){return new a(this.content.concat(t),this.size+t.nodeSize)}eq(t){if(this.content.length!=t.content.length)return!1;for(let e=0;e<this.content.length;e++)if(!this.content[e].eq(t.content[e]))return!1;return!0}get firstChild(){return this.content.length?this.content[0]:null}get lastChild(){return this.content.length?this.content[this.content.length-1]:null}get childCount(){return this.content.length}child(t){let e=this.content[t];if(!e)throw new RangeError("Index "+t+" out of range for "+this);return e}maybeChild(t){return this.content[t]||null}forEach(t){for(let e=0,n=0;e<this.content.length;e++){let r=this.content[e];t(r,n,e),n+=r.nodeSize}}findDiffStart(t,e=0){return o(this,t,e)}findDiffEnd(t,e=this.size,n=t.size){return s(this,t,e,n)}findIndex(t,e=-1){if(0==t)return c(0,t);if(t==this.size)return c(this.content.length,t);if(t>this.size||t<0)throw new RangeError(`Position ${t} outside of fragment (${this})`);for(let n=0,r=0;;n++){let i=r+this.child(n).nodeSize;if(i>=t)return i==t||e>0?c(n+1,i):c(n,r);r=i}}toString(){return"<"+this.toStringInner()+">"}toStringInner(){return this.content.join(", ")}toJSON(){return this.content.length?this.content.map((t=>t.toJSON())):null}static fromJSON(t,e){if(!e)return a.empty;if(!Array.isArray(e))throw new RangeError("Invalid input for Fragment.fromJSON");return new a(e.map(t.nodeFromJSON))}static fromArray(t){if(!t.length)return a.empty;let e,n=0;for(let r=0;r<t.length;r++){let i=t[r];n+=i.nodeSize,r&&i.isText&&t[r-1].sameMarkup(i)?(e||(e=t.slice(0,r)),e[e.length-1]=i.withText(e[e.length-1].text+i.text)):e&&e.push(i)}return new a(e||t,n)}static from(t){if(!t)return a.empty;if(t instanceof a)return t;if(Array.isArray(t))return this.fromArray(t);if(t.attrs)return new a([t],t.nodeSize);throw new RangeError("Can not convert "+t+" to a Fragment"+(t.nodesBetween?" (looks like multiple versions of prosemirror-model were loaded)":""))}}a.empty=new a([],0);const l={index:0,offset:0};function c(t,e){return l.index=t,l.offset=e,l}function h(t,e){if(t===e)return!0;if(!t||"object"!=typeof t||!e||"object"!=typeof e)return!1;let n=Array.isArray(t);if(Array.isArray(e)!=n)return!1;if(n){if(t.length!=e.length)return!1;for(let n=0;n<t.length;n++)if(!h(t[n],e[n]))return!1}else{for(let n in t)if(!(n in e)||!h(t[n],e[n]))return!1;for(let n in e)if(!(n in t))return!1}return!0}class u{constructor(t,e){this.type=t,this.attrs=e}addToSet(t){let e,n=!1;for(let r=0;r<t.length;r++){let i=t[r];if(this.eq(i))return t;if(this.type.excludes(i.type))e||(e=t.slice(0,r));else{if(i.type.excludes(this.type))return t;!n&&i.type.rank>this.type.rank&&(e||(e=t.slice(0,r)),e.push(this),n=!0),e&&e.push(i)}}return e||(e=t.slice()),n||e.push(this),e}removeFromSet(t){for(let e=0;e<t.length;e++)if(this.eq(t[e]))return t.slice(0,e).concat(t.slice(e+1));return t}isInSet(t){for(let e=0;e<t.length;e++)if(this.eq(t[e]))return!0;return!1}eq(t){return this==t||this.type==t.type&&h(this.attrs,t.attrs)}toJSON(){let t={type:this.type.name};for(let e in this.attrs){t.attrs=this.attrs;break}return t}static fromJSON(t,e){if(!e)throw new RangeError("Invalid input for Mark.fromJSON");let n=t.marks[e.type];if(!n)throw new RangeError(`There is no mark type ${e.type} in this schema`);return n.create(e.attrs)}static sameSet(t,e){if(t==e)return!0;if(t.length!=e.length)return!1;for(let n=0;n<t.length;n++)if(!t[n].eq(e[n]))return!1;return!0}static setFrom(t){if(!t||Array.isArray(t)&&0==t.length)return u.none;if(t instanceof u)return[t];let e=t.slice();return e.sort(((t,e)=>t.type.rank-e.type.rank)),e}}u.none=[];class d extends Error{}class p{constructor(t,e,n){this.content=t,this.openStart=e,this.openEnd=n}get size(){return this.content.size-this.openStart-this.openEnd}insertAt(t,e){let n=g(this.content,t+this.openStart,e);return n&&new p(n,this.openStart,this.openEnd)}removeBetween(t,e){return new p(f(this.content,t+this.openStart,e+this.openStart),this.openStart,this.openEnd)}eq(t){return this.content.eq(t.content)&&this.openStart==t.openStart&&this.openEnd==t.openEnd}toString(){return this.content+"("+this.openStart+","+this.openEnd+")"}toJSON(){if(!this.content.size)return null;let t={content:this.content.toJSON()};return this.openStart>0&&(t.openStart=this.openStart),this.openEnd>0&&(t.openEnd=this.openEnd),t}static fromJSON(t,e){if(!e)return p.empty;let n=e.openStart||0,r=e.openEnd||0;if("number"!=typeof n||"number"!=typeof r)throw new RangeError("Invalid input for Slice.fromJSON");return new p(a.fromJSON(t,e.content),n,r)}static maxOpen(t,e=!0){let n=0,r=0;for(let r=t.firstChild;r&&!r.isLeaf&&(e||!r.type.spec.isolating);r=r.firstChild)n++;for(let n=t.lastChild;n&&!n.isLeaf&&(e||!n.type.spec.isolating);n=n.lastChild)r++;return new p(t,n,r)}}function f(t,e,n){let{index:r,offset:i}=t.findIndex(e),o=t.maybeChild(r),{index:s,offset:a}=t.findIndex(n);if(i==e||o.isText){if(a!=n&&!t.child(s).isText)throw new RangeError("Removing non-flat range");return t.cut(0,e).append(t.cut(n))}if(r!=s)throw new RangeError("Removing non-flat range");return t.replaceChild(r,o.copy(f(o.content,e-i-1,n-i-1)))}function g(t,e,n,r){let{index:i,offset:o}=t.findIndex(e),s=t.maybeChild(i);if(o==e||s.isText)return r&&!r.canReplace(i,i,n)?null:t.cut(0,e).append(n).append(t.cut(e));let a=g(s.content,e-o-1,n);return a&&t.replaceChild(i,s.copy(a))}function m(t,e,n){if(n.openStart>t.depth)throw new d("Inserted content deeper than insertion position");if(t.depth-n.openStart!=e.depth-n.openEnd)throw new d("Inconsistent open depths");return y(t,e,n,0)}function y(t,e,n,r){let i=t.index(r),o=t.node(r);if(i==e.index(r)&&r<t.depth-n.openStart){let s=y(t,e,n,r+1);return o.copy(o.content.replaceChild(i,s))}if(n.content.size){if(n.openStart||n.openEnd||t.depth!=r||e.depth!=r){let{start:i,end:s}=function(t,e){let n=e.depth-t.openStart,r=e.node(n).copy(t.content);for(let t=n-1;t>=0;t--)r=e.node(t).copy(a.from(r));return{start:r.resolveNoCache(t.openStart+n),end:r.resolveNoCache(r.content.size-t.openEnd-n)}}(n,t);return k(o,S(t,i,s,e,r))}{let r=t.parent,i=r.content;return k(r,i.cut(0,t.parentOffset).append(n.content).append(i.cut(e.parentOffset)))}}return k(o,_(t,e,r))}function v(t,e){if(!e.type.compatibleContent(t.type))throw new d("Cannot join "+e.type.name+" onto "+t.type.name)}function b(t,e,n){let r=t.node(n);return v(r,e.node(n)),r}function w(t,e){let n=e.length-1;n>=0&&t.isText&&t.sameMarkup(e[n])?e[n]=t.withText(e[n].text+t.text):e.push(t)}function x(t,e,n,r){let i=(e||t).node(n),o=0,s=e?e.index(n):i.childCount;t&&(o=t.index(n),t.depth>n?o++:t.textOffset&&(w(t.nodeAfter,r),o++));for(let t=o;t<s;t++)w(i.child(t),r);e&&e.depth==n&&e.textOffset&&w(e.nodeBefore,r)}function k(t,e){if(!t.type.validContent(e))throw new d("Invalid content for node "+t.type.name);return t.copy(e)}function S(t,e,n,r,i){let o=t.depth>i&&b(t,e,i+1),s=r.depth>i&&b(n,r,i+1),l=[];return x(null,t,i,l),o&&s&&e.index(i)==n.index(i)?(v(o,s),w(k(o,S(t,e,n,r,i+1)),l)):(o&&w(k(o,_(t,e,i+1)),l),x(e,n,i,l),s&&w(k(s,_(n,r,i+1)),l)),x(r,null,i,l),new a(l)}function _(t,e,n){let r=[];if(x(null,t,n,r),t.depth>n){w(k(b(t,e,n+1),_(t,e,n+1)),r)}return x(e,null,n,r),new a(r)}p.empty=new p(a.empty,0,0);class E{constructor(t,e,n){this.pos=t,this.path=e,this.parentOffset=n,this.depth=e.length/3-1}resolveDepth(t){return null==t?this.depth:t<0?this.depth+t:t}get parent(){return this.node(this.depth)}get doc(){return this.node(0)}node(t){return this.path[3*this.resolveDepth(t)]}index(t){return this.path[3*this.resolveDepth(t)+1]}indexAfter(t){return t=this.resolveDepth(t),this.index(t)+(t!=this.depth||this.textOffset?1:0)}start(t){return 0==(t=this.resolveDepth(t))?0:this.path[3*t-1]+1}end(t){return t=this.resolveDepth(t),this.start(t)+this.node(t).content.size}before(t){if(!(t=this.resolveDepth(t)))throw new RangeError("There is no position before the top-level node");return t==this.depth+1?this.pos:this.path[3*t-1]}after(t){if(!(t=this.resolveDepth(t)))throw new RangeError("There is no position after the top-level node");return t==this.depth+1?this.pos:this.path[3*t-1]+this.path[3*t].nodeSize}get textOffset(){return this.pos-this.path[this.path.length-1]}get nodeAfter(){let t=this.parent,e=this.index(this.depth);if(e==t.childCount)return null;let n=this.pos-this.path[this.path.length-1],r=t.child(e);return n?t.child(e).cut(n):r}get nodeBefore(){let t=this.index(this.depth),e=this.pos-this.path[this.path.length-1];return e?this.parent.child(t).cut(0,e):0==t?null:this.parent.child(t-1)}posAtIndex(t,e){e=this.resolveDepth(e);let n=this.path[3*e],r=0==e?0:this.path[3*e-1]+1;for(let e=0;e<t;e++)r+=n.child(e).nodeSize;return r}marks(){let t=this.parent,e=this.index();if(0==t.content.size)return u.none;if(this.textOffset)return t.child(e).marks;let n=t.maybeChild(e-1),r=t.maybeChild(e);if(!n){let t=n;n=r,r=t}let i=n.marks;for(var o=0;o<i.length;o++)!1!==i[o].type.spec.inclusive||r&&i[o].isInSet(r.marks)||(i=i[o--].removeFromSet(i));return i}marksAcross(t){let e=this.parent.maybeChild(this.index());if(!e||!e.isInline)return null;let n=e.marks,r=t.parent.maybeChild(t.index());for(var i=0;i<n.length;i++)!1!==n[i].type.spec.inclusive||r&&n[i].isInSet(r.marks)||(n=n[i--].removeFromSet(n));return n}sharedDepth(t){for(let e=this.depth;e>0;e--)if(this.start(e)<=t&&this.end(e)>=t)return e;return 0}blockRange(t=this,e){if(t.pos<this.pos)return t.blockRange(this);for(let n=this.depth-(this.parent.inlineContent||this.pos==t.pos?1:0);n>=0;n--)if(t.pos<=this.end(n)&&(!e||e(this.node(n))))return new A(this,t,n);return null}sameParent(t){return this.pos-this.parentOffset==t.pos-t.parentOffset}max(t){return t.pos>this.pos?t:this}min(t){return t.pos<this.pos?t:this}toString(){let t="";for(let e=1;e<=this.depth;e++)t+=(t?"/":"")+this.node(e).type.name+"_"+this.index(e-1);return t+":"+this.parentOffset}static resolve(t,e){if(!(e>=0&&e<=t.content.size))throw new RangeError("Position "+e+" out of range");let n=[],r=0,i=e;for(let e=t;;){let{index:t,offset:o}=e.content.findIndex(i),s=i-o;if(n.push(e,t,r+o),!s)break;if(e=e.child(t),e.isText)break;i=s-1,r+=o+1}return new E(e,n,i)}static resolveCached(t,e){for(let n=0;n<C.length;n++){let r=C[n];if(r.pos==e&&r.doc==t)return r}let n=C[O]=E.resolve(t,e);return O=(O+1)%M,n}}let C=[],O=0,M=12;class A{constructor(t,e,n){this.$from=t,this.$to=e,this.depth=n}get start(){return this.$from.before(this.depth+1)}get end(){return this.$to.after(this.depth+1)}get parent(){return this.$from.node(this.depth)}get startIndex(){return this.$from.index(this.depth)}get endIndex(){return this.$to.indexAfter(this.depth)}}const T=Object.create(null);class N{constructor(t,e,n,r=u.none){this.type=t,this.attrs=e,this.marks=r,this.content=n||a.empty}get nodeSize(){return this.isLeaf?1:2+this.content.size}get childCount(){return this.content.childCount}child(t){return this.content.child(t)}maybeChild(t){return this.content.maybeChild(t)}forEach(t){this.content.forEach(t)}nodesBetween(t,e,n,r=0){this.content.nodesBetween(t,e,n,r,this)}descendants(t){this.nodesBetween(0,this.content.size,t)}get textContent(){return this.isLeaf&&this.type.spec.leafText?this.type.spec.leafText(this):this.textBetween(0,this.content.size,"")}textBetween(t,e,n,r){return this.content.textBetween(t,e,n,r)}get firstChild(){return this.content.firstChild}get lastChild(){return this.content.lastChild}eq(t){return this==t||this.sameMarkup(t)&&this.content.eq(t.content)}sameMarkup(t){return this.hasMarkup(t.type,t.attrs,t.marks)}hasMarkup(t,e,n){return this.type==t&&h(this.attrs,e||t.defaultAttrs||T)&&u.sameSet(this.marks,n||u.none)}copy(t=null){return t==this.content?this:new N(this.type,this.attrs,t,this.marks)}mark(t){return t==this.marks?this:new N(this.type,this.attrs,this.content,t)}cut(t,e=this.content.size){return 0==t&&e==this.content.size?this:this.copy(this.content.cut(t,e))}slice(t,e=this.content.size,n=!1){if(t==e)return p.empty;let r=this.resolve(t),i=this.resolve(e),o=n?0:r.sharedDepth(e),s=r.start(o),a=r.node(o).content.cut(r.pos-s,i.pos-s);return new p(a,r.depth-o,i.depth-o)}replace(t,e,n){return m(this.resolve(t),this.resolve(e),n)}nodeAt(t){for(let e=this;;){let{index:n,offset:r}=e.content.findIndex(t);if(e=e.maybeChild(n),!e)return null;if(r==t||e.isText)return e;t-=r+1}}childAfter(t){let{index:e,offset:n}=this.content.findIndex(t);return{node:this.content.maybeChild(e),index:e,offset:n}}childBefore(t){if(0==t)return{node:null,index:0,offset:0};let{index:e,offset:n}=this.content.findIndex(t);if(n<t)return{node:this.content.child(e),index:e,offset:n};let r=this.content.child(e-1);return{node:r,index:e-1,offset:n-r.nodeSize}}resolve(t){return E.resolveCached(this,t)}resolveNoCache(t){return E.resolve(this,t)}rangeHasMark(t,e,n){let r=!1;return e>t&&this.nodesBetween(t,e,(t=>(n.isInSet(t.marks)&&(r=!0),!r))),r}get isBlock(){return this.type.isBlock}get isTextblock(){return this.type.isTextblock}get inlineContent(){return this.type.inlineContent}get isInline(){return this.type.isInline}get isText(){return this.type.isText}get isLeaf(){return this.type.isLeaf}get isAtom(){return this.type.isAtom}toString(){if(this.type.spec.toDebugString)return this.type.spec.toDebugString(this);let t=this.type.name;return this.content.size&&(t+="("+this.content.toStringInner()+")"),j(this.marks,t)}contentMatchAt(t){let e=this.type.contentMatch.matchFragment(this.content,0,t);if(!e)throw new Error("Called contentMatchAt on a node with invalid content");return e}canReplace(t,e,n=a.empty,r=0,i=n.childCount){let o=this.contentMatchAt(t).matchFragment(n,r,i),s=o&&o.matchFragment(this.content,e);if(!s||!s.validEnd)return!1;for(let t=r;t<i;t++)if(!this.type.allowsMarks(n.child(t).marks))return!1;return!0}canReplaceWith(t,e,n,r){if(r&&!this.type.allowsMarks(r))return!1;let i=this.contentMatchAt(t).matchType(n),o=i&&i.matchFragment(this.content,e);return!!o&&o.validEnd}canAppend(t){return t.content.size?this.canReplace(this.childCount,this.childCount,t.content):this.type.compatibleContent(t.type)}check(){if(!this.type.validContent(this.content))throw new RangeError(`Invalid content for node ${this.type.name}: ${this.content.toString().slice(0,50)}`);let t=u.none;for(let e=0;e<this.marks.length;e++)t=this.marks[e].addToSet(t);if(!u.sameSet(t,this.marks))throw new RangeError(`Invalid collection of marks for node ${this.type.name}: ${this.marks.map((t=>t.type.name))}`);this.content.forEach((t=>t.check()))}toJSON(){let t={type:this.type.name};for(let e in this.attrs){t.attrs=this.attrs;break}return this.content.size&&(t.content=this.content.toJSON()),this.marks.length&&(t.marks=this.marks.map((t=>t.toJSON()))),t}static fromJSON(t,e){if(!e)throw new RangeError("Invalid input for Node.fromJSON");let n=null;if(e.marks){if(!Array.isArray(e.marks))throw new RangeError("Invalid mark data for Node.fromJSON");n=e.marks.map(t.markFromJSON)}if("text"==e.type){if("string"!=typeof e.text)throw new RangeError("Invalid text node in JSON");return t.text(e.text,n)}let r=a.fromJSON(t,e.content);return t.nodeType(e.type).create(e.attrs,r,n)}}N.prototype.text=void 0;class D extends N{constructor(t,e,n,r){if(super(t,e,null,r),!n)throw new RangeError("Empty text nodes are not allowed");this.text=n}toString(){return this.type.spec.toDebugString?this.type.spec.toDebugString(this):j(this.marks,JSON.stringify(this.text))}get textContent(){return this.text}textBetween(t,e){return this.text.slice(t,e)}get nodeSize(){return this.text.length}mark(t){return t==this.marks?this:new D(this.type,this.attrs,this.text,t)}withText(t){return t==this.text?this:new D(this.type,this.attrs,t,this.marks)}cut(t=0,e=this.text.length){return 0==t&&e==this.text.length?this:this.withText(this.text.slice(t,e))}eq(t){return this.sameMarkup(t)&&this.text==t.text}toJSON(){let t=super.toJSON();return t.text=this.text,t}}function j(t,e){for(let n=t.length-1;n>=0;n--)e=t[n].type.name+"("+e+")";return e}class R{constructor(t){this.validEnd=t,this.next=[],this.wrapCache=[]}static parse(t,e){let n=new P(t,e);if(null==n.next)return R.empty;let r=z(n);n.next&&n.err("Unexpected trailing text");let i=function(t){let e=Object.create(null);return n(H(t,0));function n(r){let i=[];r.forEach((e=>{t[e].forEach((({term:e,to:n})=>{if(!e)return;let r;for(let t=0;t<i.length;t++)i[t][0]==e&&(r=i[t][1]);H(t,n).forEach((t=>{r||i.push([e,r=[]]),-1==r.indexOf(t)&&r.push(t)}))}))}));let o=e[r.join(",")]=new R(r.indexOf(t.length-1)>-1);for(let t=0;t<i.length;t++){let r=i[t][1].sort(L);o.next.push({type:i[t][0],next:e[r.join(",")]||n(r)})}return o}}(function(t){let e=[[]];return i(o(t,0),n()),e;function n(){return e.push([])-1}function r(t,n,r){let i={term:r,to:n};return e[t].push(i),i}function i(t,e){t.forEach((t=>t.to=e))}function o(t,e){if("choice"==t.type)return t.exprs.reduce(((t,n)=>t.concat(o(n,e))),[]);if("seq"!=t.type){if("star"==t.type){let s=n();return r(e,s),i(o(t.expr,s),s),[r(s)]}if("plus"==t.type){let s=n();return i(o(t.expr,e),s),i(o(t.expr,s),s),[r(s)]}if("opt"==t.type)return[r(e)].concat(o(t.expr,e));if("range"==t.type){let s=e;for(let e=0;e<t.min;e++){let e=n();i(o(t.expr,s),e),s=e}if(-1==t.max)i(o(t.expr,s),s);else for(let e=t.min;e<t.max;e++){let e=n();r(s,e),i(o(t.expr,s),e),s=e}return[r(s)]}if("name"==t.type)return[r(e,void 0,t.value)];throw new Error("Unknown expr type")}for(let r=0;;r++){let s=o(t.exprs[r],e);if(r==t.exprs.length-1)return s;i(s,e=n())}}}(r));return function(t,e){for(let n=0,r=[t];n<r.length;n++){let t=r[n],i=!t.validEnd,o=[];for(let e=0;e<t.next.length;e++){let{type:n,next:s}=t.next[e];o.push(n.name),!i||n.isText||n.hasRequiredAttrs()||(i=!1),-1==r.indexOf(s)&&r.push(s)}i&&e.err("Only non-generatable nodes ("+o.join(", ")+") in a required position (see https://prosemirror.net/docs/guide/#generatable)")}}(i,n),i}matchType(t){for(let e=0;e<this.next.length;e++)if(this.next[e].type==t)return this.next[e].next;return null}matchFragment(t,e=0,n=t.childCount){let r=this;for(let i=e;r&&i<n;i++)r=r.matchType(t.child(i).type);return r}get inlineContent(){return this.next.length&&this.next[0].type.isInline}get defaultType(){for(let t=0;t<this.next.length;t++){let{type:e}=this.next[t];if(!e.isText&&!e.hasRequiredAttrs())return e}return null}compatible(t){for(let e=0;e<this.next.length;e++)for(let n=0;n<t.next.length;n++)if(this.next[e].type==t.next[n].type)return!0;return!1}fillBefore(t,e=!1,n=0){let r=[this];return function i(o,s){let l=o.matchFragment(t,n);if(l&&(!e||l.validEnd))return a.from(s.map((t=>t.createAndFill())));for(let t=0;t<o.next.length;t++){let{type:e,next:n}=o.next[t];if(!e.isText&&!e.hasRequiredAttrs()&&-1==r.indexOf(n)){r.push(n);let t=i(n,s.concat(e));if(t)return t}}return null}(this,[])}findWrapping(t){for(let e=0;e<this.wrapCache.length;e+=2)if(this.wrapCache[e]==t)return this.wrapCache[e+1];let e=this.computeWrapping(t);return this.wrapCache.push(t,e),e}computeWrapping(t){let e=Object.create(null),n=[{match:this,type:null,via:null}];for(;n.length;){let r=n.shift(),i=r.match;if(i.matchType(t)){let t=[];for(let e=r;e.type;e=e.via)t.push(e.type);return t.reverse()}for(let t=0;t<i.next.length;t++){let{type:o,next:s}=i.next[t];o.isLeaf||o.hasRequiredAttrs()||o.name in e||r.type&&!s.validEnd||(n.push({match:o.contentMatch,type:o,via:r}),e[o.name]=!0)}}return null}get edgeCount(){return this.next.length}edge(t){if(t>=this.next.length)throw new RangeError(`There's no ${t}th edge in this content match`);return this.next[t]}toString(){let t=[];return function e(n){t.push(n);for(let r=0;r<n.next.length;r++)-1==t.indexOf(n.next[r].next)&&e(n.next[r].next)}(this),t.map(((e,n)=>{let r=n+(e.validEnd?"*":" ")+" ";for(let n=0;n<e.next.length;n++)r+=(n?", ":"")+e.next[n].type.name+"->"+t.indexOf(e.next[n].next);return r})).join("\n")}}R.empty=new R(!0);class P{constructor(t,e){this.string=t,this.nodeTypes=e,this.inline=null,this.pos=0,this.tokens=t.split(/\s*(?=\b|\W|$)/),""==this.tokens[this.tokens.length-1]&&this.tokens.pop(),""==this.tokens[0]&&this.tokens.shift()}get next(){return this.tokens[this.pos]}eat(t){return this.next==t&&(this.pos++||!0)}err(t){throw new SyntaxError(t+" (in content expression '"+this.string+"')")}}function z(t){let e=[];do{e.push(I(t))}while(t.eat("|"));return 1==e.length?e[0]:{type:"choice",exprs:e}}function I(t){let e=[];do{e.push(B(t))}while(t.next&&")"!=t.next&&"|"!=t.next);return 1==e.length?e[0]:{type:"seq",exprs:e}}function B(t){let e=function(t){if(t.eat("(")){let e=z(t);return t.eat(")")||t.err("Missing closing paren"),e}if(!/\W/.test(t.next)){let e=function(t,e){let n=t.nodeTypes,r=n[e];if(r)return[r];let i=[];for(let t in n){let r=n[t];r.groups.indexOf(e)>-1&&i.push(r)}0==i.length&&t.err("No node type or group '"+e+"' found");return i}(t,t.next).map((e=>(null==t.inline?t.inline=e.isInline:t.inline!=e.isInline&&t.err("Mixing inline and block content"),{type:"name",value:e})));return t.pos++,1==e.length?e[0]:{type:"choice",exprs:e}}t.err("Unexpected token '"+t.next+"'")}(t);for(;;)if(t.eat("+"))e={type:"plus",expr:e};else if(t.eat("*"))e={type:"star",expr:e};else if(t.eat("?"))e={type:"opt",expr:e};else{if(!t.eat("{"))break;e=$(t,e)}return e}function F(t){/\D/.test(t.next)&&t.err("Expected number, got '"+t.next+"'");let e=Number(t.next);return t.pos++,e}function $(t,e){let n=F(t),r=n;return t.eat(",")&&(r="}"!=t.next?F(t):-1),t.eat("}")||t.err("Unclosed braced range"),{type:"range",min:n,max:r,expr:e}}function L(t,e){return e-t}function H(t,e){let n=[];return function e(r){let i=t[r];if(1==i.length&&!i[0].term)return e(i[0].to);n.push(r);for(let t=0;t<i.length;t++){let{term:r,to:o}=i[t];r||-1!=n.indexOf(o)||e(o)}}(e),n.sort(L)}function V(t){let e=Object.create(null);for(let n in t){let r=t[n];if(!r.hasDefault)return null;e[n]=r.default}return e}function q(t,e){let n=Object.create(null);for(let r in t){let i=e&&e[r];if(void 0===i){let e=t[r];if(!e.hasDefault)throw new RangeError("No value supplied for attribute "+r);i=e.default}n[r]=i}return n}function W(t){let e=Object.create(null);if(t)for(let n in t)e[n]=new Y(t[n]);return e}class U{constructor(t,e,n){this.name=t,this.schema=e,this.spec=n,this.markSet=null,this.groups=n.group?n.group.split(" "):[],this.attrs=W(n.attrs),this.defaultAttrs=V(this.attrs),this.contentMatch=null,this.inlineContent=null,this.isBlock=!(n.inline||"text"==t),this.isText="text"==t}get isInline(){return!this.isBlock}get isTextblock(){return this.isBlock&&this.inlineContent}get isLeaf(){return this.contentMatch==R.empty}get isAtom(){return this.isLeaf||!!this.spec.atom}get whitespace(){return this.spec.whitespace||(this.spec.code?"pre":"normal")}hasRequiredAttrs(){for(let t in this.attrs)if(this.attrs[t].isRequired)return!0;return!1}compatibleContent(t){return this==t||this.contentMatch.compatible(t.contentMatch)}computeAttrs(t){return!t&&this.defaultAttrs?this.defaultAttrs:q(this.attrs,t)}create(t=null,e,n){if(this.isText)throw new Error("NodeType.create can't construct text nodes");return new N(this,this.computeAttrs(t),a.from(e),u.setFrom(n))}createChecked(t=null,e,n){if(e=a.from(e),!this.validContent(e))throw new RangeError("Invalid content for node "+this.name);return new N(this,this.computeAttrs(t),e,u.setFrom(n))}createAndFill(t=null,e,n){if(t=this.computeAttrs(t),(e=a.from(e)).size){let t=this.contentMatch.fillBefore(e);if(!t)return null;e=t.append(e)}let r=this.contentMatch.matchFragment(e),i=r&&r.fillBefore(a.empty,!0);return i?new N(this,t,e.append(i),u.setFrom(n)):null}validContent(t){let e=this.contentMatch.matchFragment(t);if(!e||!e.validEnd)return!1;for(let e=0;e<t.childCount;e++)if(!this.allowsMarks(t.child(e).marks))return!1;return!0}allowsMarkType(t){return null==this.markSet||this.markSet.indexOf(t)>-1}allowsMarks(t){if(null==this.markSet)return!0;for(let e=0;e<t.length;e++)if(!this.allowsMarkType(t[e].type))return!1;return!0}allowedMarks(t){if(null==this.markSet)return t;let e;for(let n=0;n<t.length;n++)this.allowsMarkType(t[n].type)?e&&e.push(t[n]):e||(e=t.slice(0,n));return e?e.length?e:u.none:t}static compile(t,e){let n=Object.create(null);t.forEach(((t,r)=>n[t]=new U(t,e,r)));let r=e.spec.topNode||"doc";if(!n[r])throw new RangeError("Schema is missing its top node type ('"+r+"')");if(!n.text)throw new RangeError("Every schema needs a 'text' type");for(let t in n.text.attrs)throw new RangeError("The text node type should not have attributes");return n}}class Y{constructor(t){this.hasDefault=Object.prototype.hasOwnProperty.call(t,"default"),this.default=t.default}get isRequired(){return!this.hasDefault}}class J{constructor(t,e,n,r){this.name=t,this.rank=e,this.schema=n,this.spec=r,this.attrs=W(r.attrs),this.excluded=null;let i=V(this.attrs);this.instance=i?new u(this,i):null}create(t=null){return!t&&this.instance?this.instance:new u(this,q(this.attrs,t))}static compile(t,e){let n=Object.create(null),r=0;return t.forEach(((t,i)=>n[t]=new J(t,r++,e,i))),n}removeFromSet(t){for(var e=0;e<t.length;e++)t[e].type==this&&(t=t.slice(0,e).concat(t.slice(e+1)),e--);return t}isInSet(t){for(let e=0;e<t.length;e++)if(t[e].type==this)return t[e]}excludes(t){return this.excluded.indexOf(t)>-1}}class X{constructor(t){this.cached=Object.create(null),this.spec={nodes:i.from(t.nodes),marks:i.from(t.marks||{}),topNode:t.topNode},this.nodes=U.compile(this.spec.nodes,this),this.marks=J.compile(this.spec.marks,this);let e=Object.create(null);for(let t in this.nodes){if(t in this.marks)throw new RangeError(t+" can not be both a node and a mark");let n=this.nodes[t],r=n.spec.content||"",i=n.spec.marks;n.contentMatch=e[r]||(e[r]=R.parse(r,this.nodes)),n.inlineContent=n.contentMatch.inlineContent,n.markSet="_"==i?null:i?K(this,i.split(" ")):""!=i&&n.inlineContent?null:[]}for(let t in this.marks){let e=this.marks[t],n=e.spec.excludes;e.excluded=null==n?[e]:""==n?[]:K(this,n.split(" "))}this.nodeFromJSON=this.nodeFromJSON.bind(this),this.markFromJSON=this.markFromJSON.bind(this),this.topNodeType=this.nodes[this.spec.topNode||"doc"],this.cached.wrappings=Object.create(null)}node(t,e=null,n,r){if("string"==typeof t)t=this.nodeType(t);else{if(!(t instanceof U))throw new RangeError("Invalid node type: "+t);if(t.schema!=this)throw new RangeError("Node type from different schema used ("+t.name+")")}return t.createChecked(e,n,r)}text(t,e){let n=this.nodes.text;return new D(n,n.defaultAttrs,t,u.setFrom(e))}mark(t,e){return"string"==typeof t&&(t=this.marks[t]),t.create(e)}nodeFromJSON(t){return N.fromJSON(this,t)}markFromJSON(t){return u.fromJSON(this,t)}nodeType(t){let e=this.nodes[t];if(!e)throw new RangeError("Unknown node type: "+t);return e}}function K(t,e){let n=[];for(let r=0;r<e.length;r++){let i=e[r],o=t.marks[i],s=o;if(o)n.push(o);else for(let e in t.marks){let r=t.marks[e];("_"==i||r.spec.group&&r.spec.group.split(" ").indexOf(i)>-1)&&n.push(s=r)}if(!s)throw new SyntaxError("Unknown mark type: '"+e[r]+"'")}return n}class G{constructor(t,e){this.schema=t,this.rules=e,this.tags=[],this.styles=[],e.forEach((t=>{t.tag?this.tags.push(t):t.style&&this.styles.push(t)})),this.normalizeLists=!this.tags.some((e=>{if(!/^(ul|ol)\b/.test(e.tag)||!e.node)return!1;let n=t.nodes[e.node];return n.contentMatch.matchType(n)}))}parse(t,e={}){let n=new rt(this,e,!1);return n.addAll(t,e.from,e.to),n.finish()}parseSlice(t,e={}){let n=new rt(this,e,!0);return n.addAll(t,e.from,e.to),p.maxOpen(n.finish())}matchTag(t,e,n){for(let r=n?this.tags.indexOf(n)+1:0;r<this.tags.length;r++){let n=this.tags[r];if(it(t,n.tag)&&(void 0===n.namespace||t.namespaceURI==n.namespace)&&(!n.context||e.matchesContext(n.context))){if(n.getAttrs){let e=n.getAttrs(t);if(!1===e)continue;n.attrs=e||void 0}return n}}}matchStyle(t,e,n,r){for(let i=r?this.styles.indexOf(r)+1:0;i<this.styles.length;i++){let r=this.styles[i],o=r.style;if(!(0!=o.indexOf(t)||r.context&&!n.matchesContext(r.context)||o.length>t.length&&(61!=o.charCodeAt(t.length)||o.slice(t.length+1)!=e))){if(r.getAttrs){let t=r.getAttrs(e);if(!1===t)continue;r.attrs=t||void 0}return r}}}static schemaRules(t){let e=[];function n(t){let n=null==t.priority?50:t.priority,r=0;for(;r<e.length;r++){let t=e[r];if((null==t.priority?50:t.priority)<n)break}e.splice(r,0,t)}for(let e in t.marks){let r=t.marks[e].spec.parseDOM;r&&r.forEach((t=>{n(t=ot(t)),t.mark=e}))}for(let e in t.nodes){let r=t.nodes[e].spec.parseDOM;r&&r.forEach((t=>{n(t=ot(t)),t.node=e}))}return e}static fromSchema(t){return t.cached.domParser||(t.cached.domParser=new G(t,G.schemaRules(t)))}}const Z={address:!0,article:!0,aside:!0,blockquote:!0,canvas:!0,dd:!0,div:!0,dl:!0,fieldset:!0,figcaption:!0,figure:!0,footer:!0,form:!0,h1:!0,h2:!0,h3:!0,h4:!0,h5:!0,h6:!0,header:!0,hgroup:!0,hr:!0,li:!0,noscript:!0,ol:!0,output:!0,p:!0,pre:!0,section:!0,table:!0,tfoot:!0,ul:!0},Q={head:!0,noscript:!0,object:!0,script:!0,style:!0,title:!0},tt={ol:!0,ul:!0};function et(t,e,n){return null!=e?(e?1:0)|("full"===e?2:0):t&&"pre"==t.whitespace?3:-5&n}class nt{constructor(t,e,n,r,i,o,s){this.type=t,this.attrs=e,this.marks=n,this.pendingMarks=r,this.solid=i,this.options=s,this.content=[],this.activeMarks=u.none,this.stashMarks=[],this.match=o||(4&s?null:t.contentMatch)}findWrapping(t){if(!this.match){if(!this.type)return[];let e=this.type.contentMatch.fillBefore(a.from(t));if(!e){let e,n=this.type.contentMatch;return(e=n.findWrapping(t.type))?(this.match=n,e):null}this.match=this.type.contentMatch.matchFragment(e)}return this.match.findWrapping(t.type)}finish(t){if(!(1&this.options)){let t,e=this.content[this.content.length-1];if(e&&e.isText&&(t=/[ \t\r\n\u000c]+$/.exec(e.text))){let n=e;e.text.length==t[0].length?this.content.pop():this.content[this.content.length-1]=n.withText(n.text.slice(0,n.text.length-t[0].length))}}let e=a.from(this.content);return!t&&this.match&&(e=e.append(this.match.fillBefore(a.empty,!0))),this.type?this.type.create(this.attrs,e,this.marks):e}popFromStashMark(t){for(let e=this.stashMarks.length-1;e>=0;e--)if(t.eq(this.stashMarks[e]))return this.stashMarks.splice(e,1)[0]}applyPending(t){for(let e=0,n=this.pendingMarks;e<n.length;e++){let r=n[e];(this.type?this.type.allowsMarkType(r.type):st(r.type,t))&&!r.isInSet(this.activeMarks)&&(this.activeMarks=r.addToSet(this.activeMarks),this.pendingMarks=r.removeFromSet(this.pendingMarks))}}inlineContext(t){return this.type?this.type.inlineContent:this.content.length?this.content[0].isInline:t.parentNode&&!Z.hasOwnProperty(t.parentNode.nodeName.toLowerCase())}}class rt{constructor(t,e,n){this.parser=t,this.options=e,this.isOpen=n,this.open=0;let r,i=e.topNode,o=et(null,e.preserveWhitespace,0)|(n?4:0);r=i?new nt(i.type,i.attrs,u.none,u.none,!0,e.topMatch||i.type.contentMatch,o):new nt(n?null:t.schema.topNodeType,null,u.none,u.none,!0,null,o),this.nodes=[r],this.find=e.findPositions,this.needsBlock=!1}get top(){return this.nodes[this.open]}addDOM(t){if(3==t.nodeType)this.addTextNode(t);else if(1==t.nodeType){let e=t.getAttribute("style"),n=e?this.readStyles(function(t){let e,n=/\s*([\w-]+)\s*:\s*([^;]+)/g,r=[];for(;e=n.exec(t);)r.push(e[1],e[2].trim());return r}(e)):null,r=this.top;if(null!=n)for(let t=0;t<n.length;t++)this.addPendingMark(n[t]);if(this.addElement(t),null!=n)for(let t=0;t<n.length;t++)this.removePendingMark(n[t],r)}}addTextNode(t){let e=t.nodeValue,n=this.top;if(2&n.options||n.inlineContext(t)||/[^ \t\r\n\u000c]/.test(e)){if(1&n.options)e=2&n.options?e.replace(/\r\n?/g,"\n"):e.replace(/\r?\n|\r/g," ");else if(e=e.replace(/[ \t\r\n\u000c]+/g," "),/^[ \t\r\n\u000c]/.test(e)&&this.open==this.nodes.length-1){let r=n.content[n.content.length-1],i=t.previousSibling;(!r||i&&"BR"==i.nodeName||r.isText&&/[ \t\r\n\u000c]$/.test(r.text))&&(e=e.slice(1))}e&&this.insertNode(this.parser.schema.text(e)),this.findInText(t)}else this.findInside(t)}addElement(t,e){let n,r=t.nodeName.toLowerCase();tt.hasOwnProperty(r)&&this.parser.normalizeLists&&function(t){for(let e=t.firstChild,n=null;e;e=e.nextSibling){let t=1==e.nodeType?e.nodeName.toLowerCase():null;t&&tt.hasOwnProperty(t)&&n?(n.appendChild(e),e=n):"li"==t?n=e:t&&(n=null)}}(t);let i=this.options.ruleFromNode&&this.options.ruleFromNode(t)||(n=this.parser.matchTag(t,this,e));if(i?i.ignore:Q.hasOwnProperty(r))this.findInside(t),this.ignoreFallback(t);else if(!i||i.skip||i.closeParent){i&&i.closeParent?this.open=Math.max(0,this.open-1):i&&i.skip.nodeType&&(t=i.skip);let e,n=this.top,o=this.needsBlock;if(Z.hasOwnProperty(r))e=!0,n.type||(this.needsBlock=!0);else if(!t.firstChild)return void this.leafFallback(t);this.addAll(t),e&&this.sync(n),this.needsBlock=o}else this.addElementByRule(t,i,!1===i.consuming?n:void 0)}leafFallback(t){"BR"==t.nodeName&&this.top.type&&this.top.type.inlineContent&&this.addTextNode(t.ownerDocument.createTextNode("\n"))}ignoreFallback(t){"BR"!=t.nodeName||this.top.type&&this.top.type.inlineContent||this.findPlace(this.parser.schema.text("-"))}readStyles(t){let e=u.none;t:for(let n=0;n<t.length;n+=2)for(let r;;){let i=this.parser.matchStyle(t[n],t[n+1],this,r);if(!i)continue t;if(i.ignore)return null;if(e=this.parser.schema.marks[i.mark].create(i.attrs).addToSet(e),!1!==i.consuming)break;r=i}return e}addElementByRule(t,e,n){let r,i,o;if(e.node)i=this.parser.schema.nodes[e.node],i.isLeaf?this.insertNode(i.create(e.attrs))||this.leafFallback(t):r=this.enter(i,e.attrs||null,e.preserveWhitespace);else{o=this.parser.schema.marks[e.mark].create(e.attrs),this.addPendingMark(o)}let s=this.top;if(i&&i.isLeaf)this.findInside(t);else if(n)this.addElement(t,n);else if(e.getContent)this.findInside(t),e.getContent(t,this.parser.schema).forEach((t=>this.insertNode(t)));else{let n=t;"string"==typeof e.contentElement?n=t.querySelector(e.contentElement):"function"==typeof e.contentElement?n=e.contentElement(t):e.contentElement&&(n=e.contentElement),this.findAround(t,n,!0),this.addAll(n)}r&&this.sync(s)&&this.open--,o&&this.removePendingMark(o,s)}addAll(t,e,n){let r=e||0;for(let i=e?t.childNodes[e]:t.firstChild,o=null==n?null:t.childNodes[n];i!=o;i=i.nextSibling,++r)this.findAtPoint(t,r),this.addDOM(i);this.findAtPoint(t,r)}findPlace(t){let e,n;for(let r=this.open;r>=0;r--){let i=this.nodes[r],o=i.findWrapping(t);if(o&&(!e||e.length>o.length)&&(e=o,n=i,!o.length))break;if(i.solid)break}if(!e)return!1;this.sync(n);for(let t=0;t<e.length;t++)this.enterInner(e[t],null,!1);return!0}insertNode(t){if(t.isInline&&this.needsBlock&&!this.top.type){let t=this.textblockFromContext();t&&this.enterInner(t)}if(this.findPlace(t)){this.closeExtra();let e=this.top;e.applyPending(t.type),e.match&&(e.match=e.match.matchType(t.type));let n=e.activeMarks;for(let r=0;r<t.marks.length;r++)e.type&&!e.type.allowsMarkType(t.marks[r].type)||(n=t.marks[r].addToSet(n));return e.content.push(t.mark(n)),!0}return!1}enter(t,e,n){let r=this.findPlace(t.create(e));return r&&this.enterInner(t,e,!0,n),r}enterInner(t,e=null,n=!1,r){this.closeExtra();let i=this.top;i.applyPending(t),i.match=i.match&&i.match.matchType(t);let o=et(t,r,i.options);4&i.options&&0==i.content.length&&(o|=4),this.nodes.push(new nt(t,e,i.activeMarks,i.pendingMarks,n,null,o)),this.open++}closeExtra(t=!1){let e=this.nodes.length-1;if(e>this.open){for(;e>this.open;e--)this.nodes[e-1].content.push(this.nodes[e].finish(t));this.nodes.length=this.open+1}}finish(){return this.open=0,this.closeExtra(this.isOpen),this.nodes[0].finish(this.isOpen||this.options.topOpen)}sync(t){for(let e=this.open;e>=0;e--)if(this.nodes[e]==t)return this.open=e,!0;return!1}get currentPos(){this.closeExtra();let t=0;for(let e=this.open;e>=0;e--){let n=this.nodes[e].content;for(let e=n.length-1;e>=0;e--)t+=n[e].nodeSize;e&&t++}return t}findAtPoint(t,e){if(this.find)for(let n=0;n<this.find.length;n++)this.find[n].node==t&&this.find[n].offset==e&&(this.find[n].pos=this.currentPos)}findInside(t){if(this.find)for(let e=0;e<this.find.length;e++)null==this.find[e].pos&&1==t.nodeType&&t.contains(this.find[e].node)&&(this.find[e].pos=this.currentPos)}findAround(t,e,n){if(t!=e&&this.find)for(let r=0;r<this.find.length;r++)if(null==this.find[r].pos&&1==t.nodeType&&t.contains(this.find[r].node)){e.compareDocumentPosition(this.find[r].node)&(n?2:4)&&(this.find[r].pos=this.currentPos)}}findInText(t){if(this.find)for(let e=0;e<this.find.length;e++)this.find[e].node==t&&(this.find[e].pos=this.currentPos-(t.nodeValue.length-this.find[e].offset))}matchesContext(t){if(t.indexOf("|")>-1)return t.split(/\s*\|\s*/).some(this.matchesContext,this);let e=t.split("/"),n=this.options.context,r=!(this.isOpen||n&&n.parent.type!=this.nodes[0].type),i=-(n?n.depth+1:0)+(r?0:1),o=(t,s)=>{for(;t>=0;t--){let a=e[t];if(""==a){if(t==e.length-1||0==t)continue;for(;s>=i;s--)if(o(t-1,s))return!0;return!1}{let t=s>0||0==s&&r?this.nodes[s].type:n&&s>=i?n.node(s-i).type:null;if(!t||t.name!=a&&-1==t.groups.indexOf(a))return!1;s--}}return!0};return o(e.length-1,this.open)}textblockFromContext(){let t=this.options.context;if(t)for(let e=t.depth;e>=0;e--){let n=t.node(e).contentMatchAt(t.indexAfter(e)).defaultType;if(n&&n.isTextblock&&n.defaultAttrs)return n}for(let t in this.parser.schema.nodes){let e=this.parser.schema.nodes[t];if(e.isTextblock&&e.defaultAttrs)return e}}addPendingMark(t){let e=function(t,e){for(let n=0;n<e.length;n++)if(t.eq(e[n]))return e[n]}(t,this.top.pendingMarks);e&&this.top.stashMarks.push(e),this.top.pendingMarks=t.addToSet(this.top.pendingMarks)}removePendingMark(t,e){for(let n=this.open;n>=0;n--){let r=this.nodes[n];if(r.pendingMarks.lastIndexOf(t)>-1)r.pendingMarks=t.removeFromSet(r.pendingMarks);else{r.activeMarks=t.removeFromSet(r.activeMarks);let e=r.popFromStashMark(t);e&&r.type&&r.type.allowsMarkType(e.type)&&(r.activeMarks=e.addToSet(r.activeMarks))}if(r==e)break}}}function it(t,e){return(t.matches||t.msMatchesSelector||t.webkitMatchesSelector||t.mozMatchesSelector).call(t,e)}function ot(t){let e={};for(let n in t)e[n]=t[n];return e}function st(t,e){let n=e.schema.nodes;for(let r in n){let i=n[r];if(!i.allowsMarkType(t))continue;let o=[],s=t=>{o.push(t);for(let n=0;n<t.edgeCount;n++){let{type:r,next:i}=t.edge(n);if(r==e)return!0;if(o.indexOf(i)<0&&s(i))return!0}};if(s(i.contentMatch))return!0}}class at{constructor(t,e){this.nodes=t,this.marks=e}serializeFragment(t,e={},n){n||(n=ct(e).createDocumentFragment());let r=n,i=[];return t.forEach((t=>{if(i.length||t.marks.length){let n=0,o=0;for(;n<i.length&&o<t.marks.length;){let e=t.marks[o];if(this.marks[e.type.name]){if(!e.eq(i[n][0])||!1===e.type.spec.spanning)break;n++,o++}else o++}for(;n<i.length;)r=i.pop()[1];for(;o<t.marks.length;){let n=t.marks[o++],s=this.serializeMark(n,t.isInline,e);s&&(i.push([n,r]),r.appendChild(s.dom),r=s.contentDOM||s.dom)}}r.appendChild(this.serializeNodeInner(t,e))})),n}serializeNodeInner(t,e){let{dom:n,contentDOM:r}=at.renderSpec(ct(e),this.nodes[t.type.name](t));if(r){if(t.isLeaf)throw new RangeError("Content hole not allowed in a leaf node spec");this.serializeFragment(t.content,e,r)}return n}serializeNode(t,e={}){let n=this.serializeNodeInner(t,e);for(let r=t.marks.length-1;r>=0;r--){let i=this.serializeMark(t.marks[r],t.isInline,e);i&&((i.contentDOM||i.dom).appendChild(n),n=i.dom)}return n}serializeMark(t,e,n={}){let r=this.marks[t.type.name];return r&&at.renderSpec(ct(n),r(t,e))}static renderSpec(t,e,n=null){if("string"==typeof e)return{dom:t.createTextNode(e)};if(null!=e.nodeType)return{dom:e};if(e.dom&&null!=e.dom.nodeType)return e;let r,i=e[0],o=i.indexOf(" ");o>0&&(n=i.slice(0,o),i=i.slice(o+1));let s=n?t.createElementNS(n,i):t.createElement(i),a=e[1],l=1;if(a&&"object"==typeof a&&null==a.nodeType&&!Array.isArray(a)){l=2;for(let t in a)if(null!=a[t]){let e=t.indexOf(" ");e>0?s.setAttributeNS(t.slice(0,e),t.slice(e+1),a[t]):s.setAttribute(t,a[t])}}for(let i=l;i<e.length;i++){let o=e[i];if(0===o){if(i<e.length-1||i>l)throw new RangeError("Content hole must be the only child of its parent node");return{dom:s,contentDOM:s}}{let{dom:e,contentDOM:i}=at.renderSpec(t,o,n);if(s.appendChild(e),i){if(r)throw new RangeError("Multiple content holes");r=i}}}return{dom:s,contentDOM:r}}static fromSchema(t){return t.cached.domSerializer||(t.cached.domSerializer=new at(this.nodesFromSchema(t),this.marksFromSchema(t)))}static nodesFromSchema(t){let e=lt(t.nodes);return e.text||(e.text=t=>t.text),e}static marksFromSchema(t){return lt(t.marks)}}function lt(t){let e={};for(let n in t){let r=t[n].spec.toDOM;r&&(e[n]=r)}return e}function ct(t){return t.document||window.document}},2376:(t,e,n)=>{"use strict";n.d(e,{Bs:()=>h,C1:()=>f,H$:()=>M,Sy:()=>E,Y1:()=>s,qv:()=>d,yy:()=>S});var r=n(7823),i=n(6560);const o=Object.create(null);class s{constructor(t,e,n){this.$anchor=t,this.$head=e,this.ranges=n||[new a(t.min(e),t.max(e))]}get anchor(){return this.$anchor.pos}get head(){return this.$head.pos}get from(){return this.$from.pos}get to(){return this.$to.pos}get $from(){return this.ranges[0].$from}get $to(){return this.ranges[0].$to}get empty(){let t=this.ranges;for(let e=0;e<t.length;e++)if(t[e].$from.pos!=t[e].$to.pos)return!1;return!0}content(){return this.$from.doc.slice(this.from,this.to,!0)}replace(t,e=r.p2.empty){let n=e.content.lastChild,i=null;for(let t=0;t<e.openEnd;t++)i=n,n=n.lastChild;let o=t.steps.length,s=this.ranges;for(let a=0;a<s.length;a++){let{$from:l,$to:c}=s[a],h=t.mapping.slice(o);t.replaceRange(h.map(l.pos),h.map(c.pos),a?r.p2.empty:e),0==a&&y(t,o,(n?n.isInline:i&&i.isTextblock)?-1:1)}}replaceWith(t,e){let n=t.steps.length,r=this.ranges;for(let i=0;i<r.length;i++){let{$from:o,$to:s}=r[i],a=t.mapping.slice(n),l=a.map(o.pos),c=a.map(s.pos);i?t.deleteRange(l,c):(t.replaceRangeWith(l,c,e),y(t,n,e.isInline?-1:1))}}static findFrom(t,e,n=!1){let r=t.parent.inlineContent?new h(t):m(t.node(0),t.parent,t.pos,t.index(),e,n);if(r)return r;for(let r=t.depth-1;r>=0;r--){let i=e<0?m(t.node(0),t.node(r),t.before(r+1),t.index(r),e,n):m(t.node(0),t.node(r),t.after(r+1),t.index(r)+1,e,n);if(i)return i}return null}static near(t,e=1){return this.findFrom(t,e)||this.findFrom(t,-e)||new f(t.node(0))}static atStart(t){return m(t,t,0,0,1)||new f(t)}static atEnd(t){return m(t,t,t.content.size,t.childCount,-1)||new f(t)}static fromJSON(t,e){if(!e||!e.type)throw new RangeError("Invalid input for Selection.fromJSON");let n=o[e.type];if(!n)throw new RangeError(`No selection type ${e.type} defined`);return n.fromJSON(t,e)}static jsonID(t,e){if(t in o)throw new RangeError("Duplicate use of selection JSON ID "+t);return o[t]=e,e.prototype.jsonID=t,e}getBookmark(){return h.between(this.$anchor,this.$head).getBookmark()}}s.prototype.visible=!0;class a{constructor(t,e){this.$from=t,this.$to=e}}let l=!1;function c(t){l||t.parent.inlineContent||(l=!0,console.warn("TextSelection endpoint not pointing into a node with inline content ("+t.parent.type.name+")"))}class h extends s{constructor(t,e=t){c(t),c(e),super(t,e)}get $cursor(){return this.$anchor.pos==this.$head.pos?this.$head:null}map(t,e){let n=t.resolve(e.map(this.head));if(!n.parent.inlineContent)return s.near(n);let r=t.resolve(e.map(this.anchor));return new h(r.parent.inlineContent?r:n,n)}replace(t,e=r.p2.empty){if(super.replace(t,e),e==r.p2.empty){let e=this.$from.marksAcross(this.$to);e&&t.ensureMarks(e)}}eq(t){return t instanceof h&&t.anchor==this.anchor&&t.head==this.head}getBookmark(){return new u(this.anchor,this.head)}toJSON(){return{type:"text",anchor:this.anchor,head:this.head}}static fromJSON(t,e){if("number"!=typeof e.anchor||"number"!=typeof e.head)throw new RangeError("Invalid input for TextSelection.fromJSON");return new h(t.resolve(e.anchor),t.resolve(e.head))}static create(t,e,n=e){let r=t.resolve(e);return new this(r,n==e?r:t.resolve(n))}static between(t,e,n){let r=t.pos-e.pos;if(n&&!r||(n=r>=0?1:-1),!e.parent.inlineContent){let t=s.findFrom(e,n,!0)||s.findFrom(e,-n,!0);if(!t)return s.near(e,n);e=t.$head}return t.parent.inlineContent||(0==r||(t=(s.findFrom(t,-n,!0)||s.findFrom(t,n,!0)).$anchor).pos<e.pos!=r<0)&&(t=e),new h(t,e)}}s.jsonID("text",h);class u{constructor(t,e){this.anchor=t,this.head=e}map(t){return new u(t.map(this.anchor),t.map(this.head))}resolve(t){return h.between(t.resolve(this.anchor),t.resolve(this.head))}}class d extends s{constructor(t){let e=t.nodeAfter,n=t.node(0).resolve(t.pos+e.nodeSize);super(t,n),this.node=e}map(t,e){let{deleted:n,pos:r}=e.mapResult(this.anchor),i=t.resolve(r);return n?s.near(i):new d(i)}content(){return new r.p2(r.HY.from(this.node),0,0)}eq(t){return t instanceof d&&t.anchor==this.anchor}toJSON(){return{type:"node",anchor:this.anchor}}getBookmark(){return new p(this.anchor)}static fromJSON(t,e){if("number"!=typeof e.anchor)throw new RangeError("Invalid input for NodeSelection.fromJSON");return new d(t.resolve(e.anchor))}static create(t,e){return new d(t.resolve(e))}static isSelectable(t){return!t.isText&&!1!==t.type.spec.selectable}}d.prototype.visible=!1,s.jsonID("node",d);class p{constructor(t){this.anchor=t}map(t){let{deleted:e,pos:n}=t.mapResult(this.anchor);return e?new u(n,n):new p(n)}resolve(t){let e=t.resolve(this.anchor),n=e.nodeAfter;return n&&d.isSelectable(n)?new d(e):s.near(e)}}class f extends s{constructor(t){super(t.resolve(0),t.resolve(t.content.size))}replace(t,e=r.p2.empty){if(e==r.p2.empty){t.delete(0,t.doc.content.size);let e=s.atStart(t.doc);e.eq(t.selection)||t.setSelection(e)}else super.replace(t,e)}toJSON(){return{type:"all"}}static fromJSON(t){return new f(t)}map(t){return new f(t)}eq(t){return t instanceof f}getBookmark(){return g}}s.jsonID("all",f);const g={map(){return this},resolve:t=>new f(t)};function m(t,e,n,r,i,o=!1){if(e.inlineContent)return h.create(t,n);for(let s=r-(i>0?0:1);i>0?s<e.childCount:s>=0;s+=i){let r=e.child(s);if(r.isAtom){if(!o&&d.isSelectable(r))return d.create(t,n-(i<0?r.nodeSize:0))}else{let e=m(t,r,n+i,i<0?r.childCount:0,i,o);if(e)return e}n+=r.nodeSize*i}return null}function y(t,e,n){let r=t.steps.length-1;if(r<e)return;let o,a=t.steps[r];(a instanceof i.Pu||a instanceof i.FC)&&(t.mapping.maps[r].forEach(((t,e,n,r)=>{null==o&&(o=r)})),t.setSelection(s.near(t.doc.resolve(o),n)))}class v extends i.wx{constructor(t){super(t.doc),this.curSelectionFor=0,this.updated=0,this.meta=Object.create(null),this.time=Date.now(),this.curSelection=t.selection,this.storedMarks=t.storedMarks}get selection(){return this.curSelectionFor<this.steps.length&&(this.curSelection=this.curSelection.map(this.doc,this.mapping.slice(this.curSelectionFor)),this.curSelectionFor=this.steps.length),this.curSelection}setSelection(t){if(t.$from.doc!=this.doc)throw new RangeError("Selection passed to setSelection must point at the current document");return this.curSelection=t,this.curSelectionFor=this.steps.length,this.updated=-3&(1|this.updated),this.storedMarks=null,this}get selectionSet(){return(1&this.updated)>0}setStoredMarks(t){return this.storedMarks=t,this.updated|=2,this}ensureMarks(t){return r.vc.sameSet(this.storedMarks||this.selection.$from.marks(),t)||this.setStoredMarks(t),this}addStoredMark(t){return this.ensureMarks(t.addToSet(this.storedMarks||this.selection.$head.marks()))}removeStoredMark(t){return this.ensureMarks(t.removeFromSet(this.storedMarks||this.selection.$head.marks()))}get storedMarksSet(){return(2&this.updated)>0}addStep(t,e){super.addStep(t,e),this.updated=-3&this.updated,this.storedMarks=null}setTime(t){return this.time=t,this}replaceSelection(t){return this.selection.replace(this,t),this}replaceSelectionWith(t,e=!0){let n=this.selection;return e&&(t=t.mark(this.storedMarks||(n.empty?n.$from.marks():n.$from.marksAcross(n.$to)||r.vc.none))),n.replaceWith(this,t),this}deleteSelection(){return this.selection.replace(this),this}insertText(t,e,n){let r=this.doc.type.schema;if(null==e)return t?this.replaceSelectionWith(r.text(t),!0):this.deleteSelection();{if(null==n&&(n=e),n=null==n?e:n,!t)return this.deleteRange(e,n);let i=this.storedMarks;if(!i){let t=this.doc.resolve(e);i=n==e?t.marks():t.marksAcross(this.doc.resolve(n))}return this.replaceRangeWith(e,n,r.text(t,i)),this.selection.empty||this.setSelection(s.near(this.selection.$to)),this}}setMeta(t,e){return this.meta["string"==typeof t?t:t.key]=e,this}getMeta(t){return this.meta["string"==typeof t?t:t.key]}get isGeneric(){for(let t in this.meta)return!1;return!0}scrollIntoView(){return this.updated|=4,this}get scrolledIntoView(){return(4&this.updated)>0}}function b(t,e){return e&&t?t.bind(e):t}class w{constructor(t,e,n){this.name=t,this.init=b(e.init,n),this.apply=b(e.apply,n)}}const x=[new w("doc",{init:t=>t.doc||t.schema.topNodeType.createAndFill(),apply:t=>t.doc}),new w("selection",{init:(t,e)=>t.selection||s.atStart(e.doc),apply:t=>t.selection}),new w("storedMarks",{init:t=>t.storedMarks||null,apply:(t,e,n,r)=>r.selection.$cursor?t.storedMarks:null}),new w("scrollToSelection",{init:()=>0,apply:(t,e)=>t.scrolledIntoView?e+1:e})];class k{constructor(t,e){this.schema=t,this.plugins=[],this.pluginsByKey=Object.create(null),this.fields=x.slice(),e&&e.forEach((t=>{if(this.pluginsByKey[t.key])throw new RangeError("Adding different instances of a keyed plugin ("+t.key+")");this.plugins.push(t),this.pluginsByKey[t.key]=t,t.spec.state&&this.fields.push(new w(t.key,t.spec.state,t))}))}}class S{constructor(t){this.config=t}get schema(){return this.config.schema}get plugins(){return this.config.plugins}apply(t){return this.applyTransaction(t).state}filterTransaction(t,e=-1){for(let n=0;n<this.config.plugins.length;n++)if(n!=e){let e=this.config.plugins[n];if(e.spec.filterTransaction&&!e.spec.filterTransaction.call(e,t,this))return!1}return!0}applyTransaction(t){if(!this.filterTransaction(t))return{state:this,transactions:[]};let e=[t],n=this.applyInner(t),r=null;for(;;){let i=!1;for(let o=0;o<this.config.plugins.length;o++){let s=this.config.plugins[o];if(s.spec.appendTransaction){let a=r?r[o].n:0,l=r?r[o].state:this,c=a<e.length&&s.spec.appendTransaction.call(s,a?e.slice(a):e,l,n);if(c&&n.filterTransaction(c,o)){if(c.setMeta("appendedTransaction",t),!r){r=[];for(let t=0;t<this.config.plugins.length;t++)r.push(t<o?{state:n,n:e.length}:{state:this,n:0})}e.push(c),n=n.applyInner(c),i=!0}r&&(r[o]={state:n,n:e.length})}}if(!i)return{state:n,transactions:e}}}applyInner(t){if(!t.before.eq(this.doc))throw new RangeError("Applying a mismatched transaction");let e=new S(this.config),n=this.config.fields;for(let r=0;r<n.length;r++){let i=n[r];e[i.name]=i.apply(t,this[i.name],this,e)}return e}get tr(){return new v(this)}static create(t){let e=new k(t.doc?t.doc.type.schema:t.schema,t.plugins),n=new S(e);for(let r=0;r<e.fields.length;r++)n[e.fields[r].name]=e.fields[r].init(t,n);return n}reconfigure(t){let e=new k(this.schema,t.plugins),n=e.fields,r=new S(e);for(let e=0;e<n.length;e++){let i=n[e].name;r[i]=this.hasOwnProperty(i)?this[i]:n[e].init(t,r)}return r}toJSON(t){let e={doc:this.doc.toJSON(),selection:this.selection.toJSON()};if(this.storedMarks&&(e.storedMarks=this.storedMarks.map((t=>t.toJSON()))),t&&"object"==typeof t)for(let n in t){if("doc"==n||"selection"==n)throw new RangeError("The JSON fields `doc` and `selection` are reserved");let r=t[n],i=r.spec.state;i&&i.toJSON&&(e[n]=i.toJSON.call(r,this[r.key]))}return e}static fromJSON(t,e,n){if(!e)throw new RangeError("Invalid input for EditorState.fromJSON");if(!t.schema)throw new RangeError("Required config field 'schema' missing");let i=new k(t.schema,t.plugins),o=new S(i);return i.fields.forEach((i=>{if("doc"==i.name)o.doc=r.NB.fromJSON(t.schema,e.doc);else if("selection"==i.name)o.selection=s.fromJSON(o.doc,e.selection);else if("storedMarks"==i.name)e.storedMarks&&(o.storedMarks=e.storedMarks.map(t.schema.markFromJSON));else{if(n)for(let r in n){let s=n[r],a=s.spec.state;if(s.key==i.name&&a&&a.fromJSON&&Object.prototype.hasOwnProperty.call(e,r))return void(o[i.name]=a.fromJSON.call(s,t,e[r],o))}o[i.name]=i.init(t,o)}})),o}}function _(t,e,n){for(let r in t){let i=t[r];i instanceof Function?i=i.bind(e):"handleDOMEvents"==r&&(i=_(i,e,{})),n[r]=i}return n}class E{constructor(t){this.spec=t,this.props={},t.props&&_(t.props,this,this.props),this.key=t.key?t.key.key:O("plugin")}getState(t){return t[this.key]}}const C=Object.create(null);function O(t){return t in C?t+"$"+ ++C[t]:(C[t]=0,t+"$")}class M{constructor(t="key"){this.key=O(t)}get(t){return t.config.pluginsByKey[this.key]}getState(t){return t[this.key]}}},6560:(t,e,n)=>{"use strict";n.d(e,{Ax:()=>k,FC:()=>m,Mn:()=>S,Pu:()=>g,dR:()=>C,k9:()=>b,nd:()=>w,nj:()=>E,wx:()=>B});var r=n(7823);const i=Math.pow(2,16);function o(t){return 65535&t}class s{constructor(t,e,n){this.pos=t,this.delInfo=e,this.recover=n}get deleted(){return(8&this.delInfo)>0}get deletedBefore(){return(5&this.delInfo)>0}get deletedAfter(){return(6&this.delInfo)>0}get deletedAcross(){return(4&this.delInfo)>0}}class a{constructor(t,e=!1){if(this.ranges=t,this.inverted=e,!t.length&&a.empty)return a.empty}recover(t){let e=0,n=o(t);if(!this.inverted)for(let t=0;t<n;t++)e+=this.ranges[3*t+2]-this.ranges[3*t+1];return this.ranges[3*n]+e+function(t){return(t-(65535&t))/i}(t)}mapResult(t,e=1){return this._map(t,e,!1)}map(t,e=1){return this._map(t,e,!0)}_map(t,e,n){let r=0,o=this.inverted?2:1,a=this.inverted?1:2;for(let l=0;l<this.ranges.length;l+=3){let c=this.ranges[l]-(this.inverted?r:0);if(c>t)break;let h=this.ranges[l+o],u=this.ranges[l+a],d=c+h;if(t<=d){let o=c+r+((h?t==c?-1:t==d?1:e:e)<0?0:u);if(n)return o;let a=t==(e<0?c:d)?null:l/3+(t-c)*i,p=t==c?2:t==d?1:4;return(e<0?t!=c:t!=d)&&(p|=8),new s(o,p,a)}r+=u-h}return n?t+r:new s(t+r,0,null)}touches(t,e){let n=0,r=o(e),i=this.inverted?2:1,s=this.inverted?1:2;for(let e=0;e<this.ranges.length;e+=3){let o=this.ranges[e]-(this.inverted?n:0);if(o>t)break;let a=this.ranges[e+i];if(t<=o+a&&e==3*r)return!0;n+=this.ranges[e+s]-a}return!1}forEach(t){let e=this.inverted?2:1,n=this.inverted?1:2;for(let r=0,i=0;r<this.ranges.length;r+=3){let o=this.ranges[r],s=o-(this.inverted?i:0),a=o+(this.inverted?0:i),l=this.ranges[r+e],c=this.ranges[r+n];t(s,s+l,a,a+c),i+=c-l}}invert(){return new a(this.ranges,!this.inverted)}toString(){return(this.inverted?"-":"")+JSON.stringify(this.ranges)}static offset(t){return 0==t?a.empty:new a(t<0?[0,-t,0]:[0,0,t])}}a.empty=new a([]);class l{constructor(t=[],e,n=0,r=t.length){this.maps=t,this.mirror=e,this.from=n,this.to=r}slice(t=0,e=this.maps.length){return new l(this.maps,this.mirror,t,e)}copy(){return new l(this.maps.slice(),this.mirror&&this.mirror.slice(),this.from,this.to)}appendMap(t,e){this.to=this.maps.push(t),null!=e&&this.setMirror(this.maps.length-1,e)}appendMapping(t){for(let e=0,n=this.maps.length;e<t.maps.length;e++){let r=t.getMirror(e);this.appendMap(t.maps[e],null!=r&&r<e?n+r:void 0)}}getMirror(t){if(this.mirror)for(let e=0;e<this.mirror.length;e++)if(this.mirror[e]==t)return this.mirror[e+(e%2?-1:1)]}setMirror(t,e){this.mirror||(this.mirror=[]),this.mirror.push(t,e)}appendMappingInverted(t){for(let e=t.maps.length-1,n=this.maps.length+t.maps.length;e>=0;e--){let r=t.getMirror(e);this.appendMap(t.maps[e].invert(),null!=r&&r>e?n-r-1:void 0)}}invert(){let t=new l;return t.appendMappingInverted(this),t}map(t,e=1){if(this.mirror)return this._map(t,e,!0);for(let n=this.from;n<this.to;n++)t=this.maps[n].map(t,e);return t}mapResult(t,e=1){return this._map(t,e,!1)}_map(t,e,n){let r=0;for(let n=this.from;n<this.to;n++){let i=this.maps[n].mapResult(t,e);if(null!=i.recover){let e=this.getMirror(n);if(null!=e&&e>n&&e<this.to){n=e,t=this.maps[e].recover(i.recover);continue}}r|=i.delInfo,t=i.pos}return n?t:new s(t,r,null)}}const c=Object.create(null);class h{getMap(){return a.empty}merge(t){return null}static fromJSON(t,e){if(!e||!e.stepType)throw new RangeError("Invalid input for Step.fromJSON");let n=c[e.stepType];if(!n)throw new RangeError(`No step type ${e.stepType} defined`);return n.fromJSON(t,e)}static jsonID(t,e){if(t in c)throw new RangeError("Duplicate use of step JSON ID "+t);return c[t]=e,e.prototype.jsonID=t,e}}class u{constructor(t,e){this.doc=t,this.failed=e}static ok(t){return new u(t,null)}static fail(t){return new u(null,t)}static fromReplace(t,e,n,i){try{return u.ok(t.replace(e,n,i))}catch(t){if(t instanceof r.e4)return u.fail(t.message);throw t}}}function d(t,e,n){let i=[];for(let r=0;r<t.childCount;r++){let o=t.child(r);o.content.size&&(o=o.copy(d(o.content,e,o))),o.isInline&&(o=e(o,n,r)),i.push(o)}return r.HY.fromArray(i)}class p extends h{constructor(t,e,n){super(),this.from=t,this.to=e,this.mark=n}apply(t){let e=t.slice(this.from,this.to),n=t.resolve(this.from),i=n.node(n.sharedDepth(this.to)),o=new r.p2(d(e.content,((t,e)=>t.isAtom&&e.type.allowsMarkType(this.mark.type)?t.mark(this.mark.addToSet(t.marks)):t),i),e.openStart,e.openEnd);return u.fromReplace(t,this.from,this.to,o)}invert(){return new f(this.from,this.to,this.mark)}map(t){let e=t.mapResult(this.from,1),n=t.mapResult(this.to,-1);return e.deleted&&n.deleted||e.pos>=n.pos?null:new p(e.pos,n.pos,this.mark)}merge(t){return t instanceof p&&t.mark.eq(this.mark)&&this.from<=t.to&&this.to>=t.from?new p(Math.min(this.from,t.from),Math.max(this.to,t.to),this.mark):null}toJSON(){return{stepType:"addMark",mark:this.mark.toJSON(),from:this.from,to:this.to}}static fromJSON(t,e){if("number"!=typeof e.from||"number"!=typeof e.to)throw new RangeError("Invalid input for AddMarkStep.fromJSON");return new p(e.from,e.to,t.markFromJSON(e.mark))}}h.jsonID("addMark",p);class f extends h{constructor(t,e,n){super(),this.from=t,this.to=e,this.mark=n}apply(t){let e=t.slice(this.from,this.to),n=new r.p2(d(e.content,(t=>t.mark(this.mark.removeFromSet(t.marks))),t),e.openStart,e.openEnd);return u.fromReplace(t,this.from,this.to,n)}invert(){return new p(this.from,this.to,this.mark)}map(t){let e=t.mapResult(this.from,1),n=t.mapResult(this.to,-1);return e.deleted&&n.deleted||e.pos>=n.pos?null:new f(e.pos,n.pos,this.mark)}merge(t){return t instanceof f&&t.mark.eq(this.mark)&&this.from<=t.to&&this.to>=t.from?new f(Math.min(this.from,t.from),Math.max(this.to,t.to),this.mark):null}toJSON(){return{stepType:"removeMark",mark:this.mark.toJSON(),from:this.from,to:this.to}}static fromJSON(t,e){if("number"!=typeof e.from||"number"!=typeof e.to)throw new RangeError("Invalid input for RemoveMarkStep.fromJSON");return new f(e.from,e.to,t.markFromJSON(e.mark))}}h.jsonID("removeMark",f);class g extends h{constructor(t,e,n,r=!1){super(),this.from=t,this.to=e,this.slice=n,this.structure=r}apply(t){return this.structure&&y(t,this.from,this.to)?u.fail("Structure replace would overwrite content"):u.fromReplace(t,this.from,this.to,this.slice)}getMap(){return new a([this.from,this.to-this.from,this.slice.size])}invert(t){return new g(this.from,this.from+this.slice.size,t.slice(this.from,this.to))}map(t){let e=t.mapResult(this.from,1),n=t.mapResult(this.to,-1);return e.deletedAcross&&n.deletedAcross?null:new g(e.pos,Math.max(e.pos,n.pos),this.slice)}merge(t){if(!(t instanceof g)||t.structure||this.structure)return null;if(this.from+this.slice.size!=t.from||this.slice.openEnd||t.slice.openStart){if(t.to!=this.from||this.slice.openStart||t.slice.openEnd)return null;{let e=this.slice.size+t.slice.size==0?r.p2.empty:new r.p2(t.slice.content.append(this.slice.content),t.slice.openStart,this.slice.openEnd);return new g(t.from,this.to,e,this.structure)}}{let e=this.slice.size+t.slice.size==0?r.p2.empty:new r.p2(this.slice.content.append(t.slice.content),this.slice.openStart,t.slice.openEnd);return new g(this.from,this.to+(t.to-t.from),e,this.structure)}}toJSON(){let t={stepType:"replace",from:this.from,to:this.to};return this.slice.size&&(t.slice=this.slice.toJSON()),this.structure&&(t.structure=!0),t}static fromJSON(t,e){if("number"!=typeof e.from||"number"!=typeof e.to)throw new RangeError("Invalid input for ReplaceStep.fromJSON");return new g(e.from,e.to,r.p2.fromJSON(t,e.slice),!!e.structure)}}h.jsonID("replace",g);class m extends h{constructor(t,e,n,r,i,o,s=!1){super(),this.from=t,this.to=e,this.gapFrom=n,this.gapTo=r,this.slice=i,this.insert=o,this.structure=s}apply(t){if(this.structure&&(y(t,this.from,this.gapFrom)||y(t,this.gapTo,this.to)))return u.fail("Structure gap-replace would overwrite content");let e=t.slice(this.gapFrom,this.gapTo);if(e.openStart||e.openEnd)return u.fail("Gap is not a flat range");let n=this.slice.insertAt(this.insert,e.content);return n?u.fromReplace(t,this.from,this.to,n):u.fail("Content does not fit in gap")}getMap(){return new a([this.from,this.gapFrom-this.from,this.insert,this.gapTo,this.to-this.gapTo,this.slice.size-this.insert])}invert(t){let e=this.gapTo-this.gapFrom;return new m(this.from,this.from+this.slice.size+e,this.from+this.insert,this.from+this.insert+e,t.slice(this.from,this.to).removeBetween(this.gapFrom-this.from,this.gapTo-this.from),this.gapFrom-this.from,this.structure)}map(t){let e=t.mapResult(this.from,1),n=t.mapResult(this.to,-1),r=t.map(this.gapFrom,-1),i=t.map(this.gapTo,1);return e.deletedAcross&&n.deletedAcross||r<e.pos||i>n.pos?null:new m(e.pos,n.pos,r,i,this.slice,this.insert,this.structure)}toJSON(){let t={stepType:"replaceAround",from:this.from,to:this.to,gapFrom:this.gapFrom,gapTo:this.gapTo,insert:this.insert};return this.slice.size&&(t.slice=this.slice.toJSON()),this.structure&&(t.structure=!0),t}static fromJSON(t,e){if("number"!=typeof e.from||"number"!=typeof e.to||"number"!=typeof e.gapFrom||"number"!=typeof e.gapTo||"number"!=typeof e.insert)throw new RangeError("Invalid input for ReplaceAroundStep.fromJSON");return new m(e.from,e.to,e.gapFrom,e.gapTo,r.p2.fromJSON(t,e.slice),e.insert,!!e.structure)}}function y(t,e,n){let r=t.resolve(e),i=n-e,o=r.depth;for(;i>0&&o>0&&r.indexAfter(o)==r.node(o).childCount;)o--,i--;if(i>0){let t=r.node(o).maybeChild(r.indexAfter(o));for(;i>0;){if(!t||t.isLeaf)return!0;t=t.firstChild,i--}}return!1}function v(t,e,n){return(0==e||t.canReplace(e,t.childCount))&&(n==t.childCount||t.canReplace(0,n))}function b(t){let e=t.parent.content.cutByIndex(t.startIndex,t.endIndex);for(let n=t.depth;;--n){let r=t.$from.node(n),i=t.$from.index(n),o=t.$to.indexAfter(n);if(n<t.depth&&r.canReplace(i,o,e))return n;if(0==n||r.type.spec.isolating||!v(r,i,o))break}return null}function w(t,e,n=null,r=t){let i=function(t,e){let{parent:n,startIndex:r,endIndex:i}=t,o=n.contentMatchAt(r).findWrapping(e);if(!o)return null;let s=o.length?o[0]:e;return n.canReplaceWith(r,i,s)?o:null}(t,e),o=i&&function(t,e){let{parent:n,startIndex:r,endIndex:i}=t,o=n.child(r),s=e.contentMatch.findWrapping(o.type);if(!s)return null;let a=(s.length?s[s.length-1]:e).contentMatch;for(let t=r;a&&t<i;t++)a=a.matchType(n.child(t).type);return a&&a.validEnd?s:null}(r,e);return o?i.map(x).concat({type:e,attrs:n}).concat(o.map(x)):null}function x(t){return{type:t,attrs:null}}function k(t,e,n=1,r){let i=t.resolve(e),o=i.depth-n,s=r&&r[r.length-1]||i.parent;if(o<0||i.parent.type.spec.isolating||!i.parent.canReplace(i.index(),i.parent.childCount)||!s.type.validContent(i.parent.content.cutByIndex(i.index(),i.parent.childCount)))return!1;for(let t=i.depth-1,e=n-2;t>o;t--,e--){let n=i.node(t),o=i.index(t);if(n.type.spec.isolating)return!1;let s=n.content.cutByIndex(o,n.childCount),a=r&&r[e]||n;if(a!=n&&(s=s.replaceChild(0,a.type.create(a.attrs))),!n.canReplace(o+1,n.childCount)||!a.type.validContent(s))return!1}let a=i.indexAfter(o),l=r&&r[0];return i.node(o).canReplaceWith(a,a,l?l.type:i.node(o+1).type)}function S(t,e){let n=t.resolve(e),r=n.index();return _(n.nodeBefore,n.nodeAfter)&&n.parent.canReplace(r,r+1)}function _(t,e){return!(!t||!e||t.isLeaf||!t.canAppend(e))}function E(t,e,n){let r=t.resolve(e);if(!n.content.size)return e;let i=n.content;for(let t=0;t<n.openStart;t++)i=i.firstChild.content;for(let t=1;t<=(0==n.openStart&&n.size?2:1);t++)for(let e=r.depth;e>=0;e--){let n=e==r.depth?0:r.pos<=(r.start(e+1)+r.end(e+1))/2?-1:1,o=r.index(e)+(n>0?1:0),s=r.node(e),a=!1;if(1==t)a=s.canReplace(o,o,i);else{let t=s.contentMatchAt(o).findWrapping(i.firstChild.type);a=t&&s.canReplaceWith(o,o,t[0])}if(a)return 0==n?r.pos:n<0?r.before(e+1):r.after(e+1)}return null}function C(t,e,n=e,i=r.p2.empty){if(e==n&&!i.size)return null;let o=t.resolve(e),s=t.resolve(n);return O(o,s,i)?new g(e,n,i):new M(o,s,i).fit()}function O(t,e,n){return!n.openStart&&!n.openEnd&&t.start()==e.start()&&t.parent.canReplace(t.index(),e.index(),n.content)}h.jsonID("replaceAround",m);class M{constructor(t,e,n){this.$from=t,this.$to=e,this.unplaced=n,this.frontier=[],this.placed=r.HY.empty;for(let e=0;e<=t.depth;e++){let n=t.node(e);this.frontier.push({type:n.type,match:n.contentMatchAt(t.indexAfter(e))})}for(let e=t.depth;e>0;e--)this.placed=r.HY.from(t.node(e).copy(this.placed))}get depth(){return this.frontier.length-1}fit(){for(;this.unplaced.size;){let t=this.findFittable();t?this.placeNodes(t):this.openMore()||this.dropNode()}let t=this.mustMoveInline(),e=this.placed.size-this.depth-this.$from.depth,n=this.$from,i=this.close(t<0?this.$to:n.doc.resolve(t));if(!i)return null;let o=this.placed,s=n.depth,a=i.depth;for(;s&&a&&1==o.childCount;)o=o.firstChild.content,s--,a--;let l=new r.p2(o,s,a);return t>-1?new m(n.pos,t,this.$to.pos,this.$to.end(),l,e):l.size||n.pos!=this.$to.pos?new g(n.pos,i.pos,l):null}findFittable(){for(let t=1;t<=2;t++)for(let e=this.unplaced.openStart;e>=0;e--){let n,i=null;e?(i=N(this.unplaced.content,e-1).firstChild,n=i.content):n=this.unplaced.content;let o=n.firstChild;for(let n=this.depth;n>=0;n--){let s,{type:a,match:l}=this.frontier[n],c=null;if(1==t&&(o?l.matchType(o.type)||(c=l.fillBefore(r.HY.from(o),!1)):i&&a.compatibleContent(i.type)))return{sliceDepth:e,frontierDepth:n,parent:i,inject:c};if(2==t&&o&&(s=l.findWrapping(o.type)))return{sliceDepth:e,frontierDepth:n,parent:i,wrap:s};if(i&&l.matchType(i.type))break}}}openMore(){let{content:t,openStart:e,openEnd:n}=this.unplaced,i=N(t,e);return!(!i.childCount||i.firstChild.isLeaf)&&(this.unplaced=new r.p2(t,e+1,Math.max(n,i.size+e>=t.size-n?e+1:0)),!0)}dropNode(){let{content:t,openStart:e,openEnd:n}=this.unplaced,i=N(t,e);if(i.childCount<=1&&e>0){let o=t.size-e<=e+i.size;this.unplaced=new r.p2(A(t,e-1,1),e-1,o?e-1:n)}else this.unplaced=new r.p2(A(t,e,1),e,n)}placeNodes({sliceDepth:t,frontierDepth:e,parent:n,inject:i,wrap:o}){for(;this.depth>e;)this.closeFrontierNode();if(o)for(let t=0;t<o.length;t++)this.openFrontierNode(o[t]);let s=this.unplaced,a=n?n.content:s.content,l=s.openStart-t,c=0,h=[],{match:u,type:d}=this.frontier[e];if(i){for(let t=0;t<i.childCount;t++)h.push(i.child(t));u=u.matchFragment(i)}let p=a.size+t-(s.content.size-s.openEnd);for(;c<a.childCount;){let t=a.child(c),e=u.matchType(t.type);if(!e)break;c++,(c>1||0==l||t.content.size)&&(u=e,h.push(D(t.mark(d.allowedMarks(t.marks)),1==c?l:0,c==a.childCount?p:-1)))}let f=c==a.childCount;f||(p=-1),this.placed=T(this.placed,e,r.HY.from(h)),this.frontier[e].match=u,f&&p<0&&n&&n.type==this.frontier[this.depth].type&&this.frontier.length>1&&this.closeFrontierNode();for(let t=0,e=a;t<p;t++){let t=e.lastChild;this.frontier.push({type:t.type,match:t.contentMatchAt(t.childCount)}),e=t.content}this.unplaced=f?0==t?r.p2.empty:new r.p2(A(s.content,t-1,1),t-1,p<0?s.openEnd:t-1):new r.p2(A(s.content,t,c),s.openStart,s.openEnd)}mustMoveInline(){if(!this.$to.parent.isTextblock)return-1;let t,e=this.frontier[this.depth];if(!e.type.isTextblock||!j(this.$to,this.$to.depth,e.type,e.match,!1)||this.$to.depth==this.depth&&(t=this.findCloseLevel(this.$to))&&t.depth==this.depth)return-1;let{depth:n}=this.$to,r=this.$to.after(n);for(;n>1&&r==this.$to.end(--n);)++r;return r}findCloseLevel(t){t:for(let e=Math.min(this.depth,t.depth);e>=0;e--){let{match:n,type:r}=this.frontier[e],i=e<t.depth&&t.end(e+1)==t.pos+(t.depth-(e+1)),o=j(t,e,r,n,i);if(o){for(let n=e-1;n>=0;n--){let{match:e,type:r}=this.frontier[n],i=j(t,n,r,e,!0);if(!i||i.childCount)continue t}return{depth:e,fit:o,move:i?t.doc.resolve(t.after(e+1)):t}}}}close(t){let e=this.findCloseLevel(t);if(!e)return null;for(;this.depth>e.depth;)this.closeFrontierNode();e.fit.childCount&&(this.placed=T(this.placed,e.depth,e.fit)),t=e.move;for(let n=e.depth+1;n<=t.depth;n++){let e=t.node(n),r=e.type.contentMatch.fillBefore(e.content,!0,t.index(n));this.openFrontierNode(e.type,e.attrs,r)}return t}openFrontierNode(t,e=null,n){let i=this.frontier[this.depth];i.match=i.match.matchType(t),this.placed=T(this.placed,this.depth,r.HY.from(t.create(e,n))),this.frontier.push({type:t,match:t.contentMatch})}closeFrontierNode(){let t=this.frontier.pop().match.fillBefore(r.HY.empty,!0);t.childCount&&(this.placed=T(this.placed,this.frontier.length,t))}}function A(t,e,n){return 0==e?t.cutByIndex(n,t.childCount):t.replaceChild(0,t.firstChild.copy(A(t.firstChild.content,e-1,n)))}function T(t,e,n){return 0==e?t.append(n):t.replaceChild(t.childCount-1,t.lastChild.copy(T(t.lastChild.content,e-1,n)))}function N(t,e){for(let n=0;n<e;n++)t=t.firstChild.content;return t}function D(t,e,n){if(e<=0)return t;let i=t.content;return e>1&&(i=i.replaceChild(0,D(i.firstChild,e-1,1==i.childCount?n-1:0))),e>0&&(i=t.type.contentMatch.fillBefore(i).append(i),n<=0&&(i=i.append(t.type.contentMatch.matchFragment(i).fillBefore(r.HY.empty,!0)))),t.copy(i)}function j(t,e,n,r,i){let o=t.node(e),s=i?t.indexAfter(e):t.index(e);if(s==o.childCount&&!n.compatibleContent(o.type))return null;let a=r.fillBefore(o.content,!0,s);return a&&!function(t,e,n){for(let r=n;r<e.childCount;r++)if(!t.allowsMarks(e.child(r).marks))return!0;return!1}(n,o.content,s)?a:null}function R(t){return t.spec.defining||t.spec.definingForContent}function P(t,e,n,i,o){if(e<n){let r=t.firstChild;t=t.replaceChild(0,r.copy(P(r.content,e+1,n,i,r)))}if(e>i){let e=o.contentMatchAt(0),n=e.fillBefore(t).append(t);t=n.append(e.matchFragment(n).fillBefore(r.HY.empty,!0))}return t}function z(t,e){let n=[];for(let r=Math.min(t.depth,e.depth);r>=0;r--){let i=t.start(r);if(i<t.pos-(t.depth-r)||e.end(r)>e.pos+(e.depth-r)||t.node(r).type.spec.isolating||e.node(r).type.spec.isolating)break;(i==e.start(r)||r==t.depth&&r==e.depth&&t.parent.inlineContent&&e.parent.inlineContent&&r&&e.start(r-1)==i-1)&&n.push(r)}return n}let I=class extends Error{};I=function t(e){let n=Error.call(this,e);return n.__proto__=t.prototype,n},(I.prototype=Object.create(Error.prototype)).constructor=I,I.prototype.name="TransformError";class B{constructor(t){this.doc=t,this.steps=[],this.docs=[],this.mapping=new l}get before(){return this.docs.length?this.docs[0]:this.doc}step(t){let e=this.maybeStep(t);if(e.failed)throw new I(e.failed);return this}maybeStep(t){let e=t.apply(this.doc);return e.failed||this.addStep(t,e.doc),e}get docChanged(){return this.steps.length>0}addStep(t,e){this.docs.push(this.doc),this.steps.push(t),this.mapping.appendMap(t.getMap()),this.doc=e}replace(t,e=t,n=r.p2.empty){let i=C(this.doc,t,e,n);return i&&this.step(i),this}replaceWith(t,e,n){return this.replace(t,e,new r.p2(r.HY.from(n),0,0))}delete(t,e){return this.replace(t,e,r.p2.empty)}insert(t,e){return this.replaceWith(t,t,e)}replaceRange(t,e,n){return function(t,e,n,i){if(!i.size)return t.deleteRange(e,n);let o=t.doc.resolve(e),s=t.doc.resolve(n);if(O(o,s,i))return t.step(new g(e,n,i));let a=z(o,t.doc.resolve(n));0==a[a.length-1]&&a.pop();let l=-(o.depth+1);a.unshift(l);for(let t=o.depth,e=o.pos-1;t>0;t--,e--){let n=o.node(t).type.spec;if(n.defining||n.definingAsContext||n.isolating)break;a.indexOf(t)>-1?l=t:o.before(t)==e&&a.splice(1,0,-t)}let c=a.indexOf(l),h=[],u=i.openStart;for(let t=i.content,e=0;;e++){let n=t.firstChild;if(h.push(n),e==i.openStart)break;t=n.content}for(let t=u-1;t>=0;t--){let e=h[t].type,n=R(e);if(n&&o.node(c).type!=e)u=t;else if(n||!e.isTextblock)break}for(let e=i.openStart;e>=0;e--){let l=(e+u+1)%(i.openStart+1),d=h[l];if(d)for(let e=0;e<a.length;e++){let h=a[(e+c)%a.length],u=!0;h<0&&(u=!1,h=-h);let p=o.node(h-1),f=o.index(h-1);if(p.canReplaceWith(f,f,d.type,d.marks))return t.replace(o.before(h),u?s.after(h):n,new r.p2(P(i.content,0,i.openStart,l),l,i.openEnd))}}let d=t.steps.length;for(let r=a.length-1;r>=0&&(t.replace(e,n,i),!(t.steps.length>d));r--){let t=a[r];t<0||(e=o.before(t),n=s.after(t))}}(this,t,e,n),this}replaceRangeWith(t,e,n){return function(t,e,n,i){if(!i.isInline&&e==n&&t.doc.resolve(e).parent.content.size){let r=function(t,e,n){let r=t.resolve(e);if(r.parent.canReplaceWith(r.index(),r.index(),n))return e;if(0==r.parentOffset)for(let t=r.depth-1;t>=0;t--){let e=r.index(t);if(r.node(t).canReplaceWith(e,e,n))return r.before(t+1);if(e>0)return null}if(r.parentOffset==r.parent.content.size)for(let t=r.depth-1;t>=0;t--){let e=r.indexAfter(t);if(r.node(t).canReplaceWith(e,e,n))return r.after(t+1);if(e<r.node(t).childCount)return null}return null}(t.doc,e,i.type);null!=r&&(e=n=r)}t.replaceRange(e,n,new r.p2(r.HY.from(i),0,0))}(this,t,e,n),this}deleteRange(t,e){return function(t,e,n){let r=t.doc.resolve(e),i=t.doc.resolve(n),o=z(r,i);for(let e=0;e<o.length;e++){let n=o[e],s=e==o.length-1;if(s&&0==n||r.node(n).type.contentMatch.validEnd)return t.delete(r.start(n),i.end(n));if(n>0&&(s||r.node(n-1).canReplace(r.index(n-1),i.indexAfter(n-1))))return t.delete(r.before(n),i.after(n))}for(let o=1;o<=r.depth&&o<=i.depth;o++)if(e-r.start(o)==r.depth-o&&n>r.end(o)&&i.end(o)-n!=i.depth-o)return t.delete(r.before(o),n);t.delete(e,n)}(this,t,e),this}lift(t,e){return function(t,e,n){let{$from:i,$to:o,depth:s}=e,a=i.before(s+1),l=o.after(s+1),c=a,h=l,u=r.HY.empty,d=0;for(let t=s,e=!1;t>n;t--)e||i.index(t)>0?(e=!0,u=r.HY.from(i.node(t).copy(u)),d++):c--;let p=r.HY.empty,f=0;for(let t=s,e=!1;t>n;t--)e||o.after(t+1)<o.end(t)?(e=!0,p=r.HY.from(o.node(t).copy(p)),f++):h++;t.step(new m(c,h,a,l,new r.p2(u.append(p),d,f),u.size-d,!0))}(this,t,e),this}join(t,e=1){return function(t,e,n){let i=new g(e-n,e+n,r.p2.empty,!0);t.step(i)}(this,t,e),this}wrap(t,e){return function(t,e,n){let i=r.HY.empty;for(let t=n.length-1;t>=0;t--){if(i.size){let e=n[t].type.contentMatch.matchFragment(i);if(!e||!e.validEnd)throw new RangeError("Wrapper type given to Transform.wrap does not form valid content of its parent wrapper")}i=r.HY.from(n[t].type.create(n[t].attrs,i))}let o=e.start,s=e.end;t.step(new m(o,s,o,s,new r.p2(i,0,0),n.length,!0))}(this,t,e),this}setBlockType(t,e=t,n,i=null){return function(t,e,n,i,o){if(!i.isTextblock)throw new RangeError("Type given to setBlockType should be a textblock");let s=t.steps.length;t.doc.nodesBetween(e,n,((e,n)=>{if(e.isTextblock&&!e.hasMarkup(i,o)&&function(t,e,n){let r=t.resolve(e),i=r.index();return r.parent.canReplaceWith(i,i+1,n)}(t.doc,t.mapping.slice(s).map(n),i)){t.clearIncompatible(t.mapping.slice(s).map(n,1),i);let a=t.mapping.slice(s),l=a.map(n,1),c=a.map(n+e.nodeSize,1);return t.step(new m(l,c,l+1,c-1,new r.p2(r.HY.from(i.create(o,null,e.marks)),0,0),1,!0)),!1}}))}(this,t,e,n,i),this}setNodeMarkup(t,e,n=null,i=[]){return function(t,e,n,i,o){let s=t.doc.nodeAt(e);if(!s)throw new RangeError("No node at given position");n||(n=s.type);let a=n.create(i,null,o||s.marks);if(s.isLeaf)return t.replaceWith(e,e+s.nodeSize,a);if(!n.validContent(s.content))throw new RangeError("Invalid content for node type "+n.name);t.step(new m(e,e+s.nodeSize,e+1,e+s.nodeSize-1,new r.p2(r.HY.from(a),0,0),1,!0))}(this,t,e,n,i),this}split(t,e=1,n){return function(t,e,n=1,i){let o=t.doc.resolve(e),s=r.HY.empty,a=r.HY.empty;for(let t=o.depth,e=o.depth-n,l=n-1;t>e;t--,l--){s=r.HY.from(o.node(t).copy(s));let e=i&&i[l];a=r.HY.from(e?e.type.create(e.attrs,a):o.node(t).copy(a))}t.step(new g(e,e,new r.p2(s.append(a),n,n),!0))}(this,t,e,n),this}addMark(t,e,n){return function(t,e,n,r){let i,o,s=[],a=[];t.doc.nodesBetween(e,n,((t,l,c)=>{if(!t.isInline)return;let h=t.marks;if(!r.isInSet(h)&&c.type.allowsMarkType(r.type)){let c=Math.max(l,e),u=Math.min(l+t.nodeSize,n),d=r.addToSet(h);for(let t=0;t<h.length;t++)h[t].isInSet(d)||(i&&i.to==c&&i.mark.eq(h[t])?i.to=u:s.push(i=new f(c,u,h[t])));o&&o.to==c?o.to=u:a.push(o=new p(c,u,r))}})),s.forEach((e=>t.step(e))),a.forEach((e=>t.step(e)))}(this,t,e,n),this}removeMark(t,e,n){return function(t,e,n,i){let o=[],s=0;t.doc.nodesBetween(e,n,((t,a)=>{if(!t.isInline)return;s++;let l=null;if(i instanceof r.ZU){let e,n=t.marks;for(;e=i.isInSet(n);)(l||(l=[])).push(e),n=e.removeFromSet(n)}else i?i.isInSet(t.marks)&&(l=[i]):l=t.marks;if(l&&l.length){let r=Math.min(a+t.nodeSize,n);for(let t=0;t<l.length;t++){let n,i=l[t];for(let t=0;t<o.length;t++){let e=o[t];e.step==s-1&&i.eq(o[t].style)&&(n=e)}n?(n.to=r,n.step=s):o.push({style:i,from:Math.max(a,e),to:r,step:s})}}})),o.forEach((e=>t.step(new f(e.from,e.to,e.style))))}(this,t,e,n),this}clearIncompatible(t,e,n){return function(t,e,n,i=n.contentMatch){let o=t.doc.nodeAt(e),s=[],a=e+1;for(let e=0;e<o.childCount;e++){let l=o.child(e),c=a+l.nodeSize,h=i.matchType(l.type);if(h){i=h;for(let e=0;e<l.marks.length;e++)n.allowsMarkType(l.marks[e].type)||t.step(new f(a,c,l.marks[e]))}else s.push(new g(a,c,r.p2.empty));a=c}if(!i.validEnd){let e=i.fillBefore(r.HY.empty,!0);t.replace(a,a,new r.p2(e,0,0))}for(let e=s.length-1;e>=0;e--)t.step(s[e])}(this,t,e,n),this}}},8575:(t,e,n)=>{"use strict";n.d(e,{QW:()=>qt,H6:()=>Ne});const r=()=>new Map,i=t=>{const e=r();return t.forEach(((t,n)=>{e.set(n,t)})),e},o=(t,e,n)=>{let r=t.get(e);return void 0===r&&t.set(e,r=n()),r},s=()=>new Set,a=t=>t[t.length-1],l=(t,e)=>{for(let n=0;n<e.length;n++)t.push(e[n])},c=Array.from,h=Array.isArray;class u{constructor(){this._observers=r()}on(t,e){o(this._observers,t,s).add(e)}once(t,e){const n=(...r)=>{this.off(t,n),e(...r)};this.on(t,n)}off(t,e){const n=this._observers.get(t);void 0!==n&&(n.delete(e),0===n.size&&this._observers.delete(t))}emit(t,e){return c((this._observers.get(t)||r()).values()).forEach((t=>t(...e)))}destroy(){this._observers=r()}}const d=Math.floor,p=(Math.ceil,Math.abs),f=(Math.imul,Math.round,Math.log10,Math.log2,Math.log,Math.sqrt,(t,e)=>t<e?t:e),g=(t,e)=>t>e?t:e,m=(Number.isNaN,Math.pow,Math.sign,String.fromCharCode,String.fromCodePoint,/^\s*/g),y=/([A-Z])/g,v=(t,e)=>(t=>t.replace(m,""))(t.replace(y,(t=>`${e}${(t=>t.toLowerCase())(t)}`)));"undefined"!=typeof TextEncoder&&new TextEncoder;let b="undefined"==typeof TextDecoder?null:new TextDecoder("utf-8",{fatal:!0,ignoreBOM:!0});b&&1===b.decode(new Uint8Array).length&&(b=null);const w=t=>void 0===t?null:t;let x=new class{constructor(){this.map=new Map}setItem(t,e){this.map.set(t,e)}getItem(t){return this.map.get(t)}},k=!0;try{"undefined"!=typeof localStorage&&(x=localStorage,k=!1)}catch(t){}const S=x,_="undefined"!=typeof process&&process.release&&/node|io\.js/.test(process.release.name);"undefined"!=typeof navigator&&/Mac/.test(navigator.platform);let E;const C=[],O=()=>{if(void 0===E)if(_){E=r();const t=process.argv;let e=null;for(let n=0;n<t.length;n++){const r=t[n];"-"===r[0]?(null!==e&&E.set(e,""),e=r):null!==e?(E.set(e,r),e=null):C.push(r)}null!==e&&E.set(e,"")}else"object"==typeof location?(E=r(),(location.search||"?").slice(1).split("&").forEach((t=>{if(0!==t.length){const[e,n]=t.split("=");E.set(`--${v(e,"-")}`,n),E.set(`-${v(e,"-")}`,n)}}))):E=r();return E},M=t=>w(_?process.env[t.toUpperCase()]:S.getItem(t));(t=>O().has(t))("--"+(A="production"))||M(A);var A;const T=(t,e,n)=>new Uint8Array(t,e,n),N=128,D=127,j=2147483647,R=(Number.MAX_SAFE_INTEGER,Number.MIN_SAFE_INTEGER,Number.isInteger||(t=>"number"==typeof t&&isFinite(t)&&d(t)===t));Number.isNaN,Number.parseInt;class P{constructor(){this.cpos=0,this.cbuf=new Uint8Array(100),this.bufs=[]}}const z=()=>new P,I=t=>{const e=new Uint8Array((t=>{let e=t.cpos;for(let n=0;n<t.bufs.length;n++)e+=t.bufs[n].length;return e})(t));let n=0;for(let r=0;r<t.bufs.length;r++){const i=t.bufs[r];e.set(i,n),n+=i.length}return e.set(T(t.cbuf.buffer,0,t.cpos),n),e},B=(t,e)=>{const n=t.cbuf.length;t.cpos===n&&(t.bufs.push(t.cbuf),t.cbuf=new Uint8Array(2*n),t.cpos=0),t.cbuf[t.cpos++]=e},F=B,$=(t,e)=>{for(;e>D;)B(t,N|D&e),e>>>=7;B(t,D&e)},L=(t,e)=>{const n=0!==(r=e)?r<0:1/r<0;var r;for(n&&(e=-e),B(t,(e>63?N:0)|(n?64:0)|63&e),e>>>=6;e>0;)B(t,(e>D?N:0)|D&e),e>>>=7},H=(t,e)=>{const n=unescape(encodeURIComponent(e)),r=n.length;$(t,r);for(let e=0;e<r;e++)B(t,n.codePointAt(e))},V=(t,e)=>{const n=t.cbuf.length,r=t.cpos,i=f(n-r,e.length),o=e.length-i;t.cbuf.set(e.subarray(0,i),r),t.cpos+=i,o>0&&(t.bufs.push(t.cbuf),t.cbuf=new Uint8Array(g(2*n,o)),t.cbuf.set(e.subarray(i)),t.cpos=o)},q=(t,e)=>{$(t,e.byteLength),V(t,e)},W=(t,e)=>{((t,e)=>{const n=t.cbuf.length;n-t.cpos<e&&(t.bufs.push(T(t.cbuf.buffer,0,t.cpos)),t.cbuf=new Uint8Array(2*g(n,e)),t.cpos=0)})(t,e);const n=new DataView(t.cbuf.buffer,t.cpos,e);return t.cpos+=e,n},U=new DataView(new ArrayBuffer(4)),Y=(t,e)=>{switch(typeof e){case"string":B(t,119),H(t,e);break;case"number":R(e)&&p(e)<=j?(B(t,125),L(t,e)):(n=e,U.setFloat32(0,n),U.getFloat32(0)===n?(B(t,124),((t,e)=>{W(t,4).setFloat32(0,e,!1)})(t,e)):(B(t,123),((t,e)=>{W(t,8).setFloat64(0,e,!1)})(t,e)));break;case"bigint":B(t,122),((t,e)=>{W(t,8).setBigInt64(0,e,!1)})(t,e);break;case"object":if(null===e)B(t,126);else if(e instanceof Array){B(t,117),$(t,e.length);for(let n=0;n<e.length;n++)Y(t,e[n])}else if(e instanceof Uint8Array)B(t,116),q(t,e);else{B(t,118);const n=Object.keys(e);$(t,n.length);for(let r=0;r<n.length;r++){const i=n[r];H(t,i),Y(t,e[i])}}break;case"boolean":B(t,e?120:121);break;default:B(t,127)}var n};class J extends P{constructor(t){super(),this.w=t,this.s=null,this.count=0}write(t){this.s===t?this.count++:(this.count>0&&$(this,this.count-1),this.count=1,this.w(this,t),this.s=t)}}const X=t=>{t.count>0&&(L(t.encoder,1===t.count?t.s:-t.s),t.count>1&&$(t.encoder,t.count-2))};class K{constructor(){this.encoder=new P,this.s=0,this.count=0}write(t){this.s===t?this.count++:(X(this),this.count=1,this.s=t)}toUint8Array(){return X(this),I(this.encoder)}}const G=t=>{if(t.count>0){const e=t.diff<<1|(1===t.count?0:1);L(t.encoder,e),t.count>1&&$(t.encoder,t.count-2)}};class Z{constructor(){this.encoder=new P,this.s=0,this.count=0,this.diff=0}write(t){this.diff===t-this.s?(this.s=t,this.count++):(G(this),this.count=1,this.diff=t-this.s,this.s=t)}toUint8Array(){return G(this),I(this.encoder)}}class Q{constructor(){this.sarr=[],this.s="",this.lensE=new K}write(t){this.s+=t,this.s.length>19&&(this.sarr.push(this.s),this.s=""),this.lensE.write(t.length)}toUint8Array(){const t=new P;return this.sarr.push(this.s),this.s="",H(t,this.sarr.join("")),V(t,this.lensE.toUint8Array()),I(t)}}"undefined"==typeof window||void 0!==window.performance&&window.performance;const tt="undefined"==typeof crypto?null:crypto,et=null!==tt?t=>{const e=new ArrayBuffer(t),n=new Uint8Array(e);return tt.getRandomValues(n),e}:t=>{const e=new ArrayBuffer(t),n=new Uint8Array(e);for(let e=0;e<t;e++)n[e]=Math.ceil(4294967295*Math.random()>>>0);return e},nt=(Math.random,()=>new Uint32Array(et(4))[0]),rt=[1e7]+-1e3+-4e3+-8e3+-1e11,it=()=>rt.replace(/[018]/g,(t=>(t^nt()&15>>t/4).toString(16))),ot=t=>new Promise(t),st=t=>new Error(t),at=()=>{throw st("Method unimplemented")},lt=()=>{throw st("Unexpected case")},ct=(t,e,n=0)=>{try{for(;n<t.length;n++)t[n](...e)}finally{n<t.length&&ct(t,e,n+1)}},ht=Symbol;class ut{constructor(t,e){this.left=t,this.right=e}}const dt=(t,e)=>new ut(t,e),pt="undefined"!=typeof document?document:{},ft=("undefined"!=typeof DOMParser&&new DOMParser,pt.ELEMENT_NODE,pt.TEXT_NODE,pt.CDATA_SECTION_NODE,pt.COMMENT_NODE,pt.DOCUMENT_NODE,pt.DOCUMENT_TYPE_NODE,pt.DOCUMENT_FRAGMENT_NODE,Date.now),gt=ht(),mt=ht(),yt=ht(),vt=ht(),bt=ht(),wt=ht(),xt=ht(),kt=ht(),St=ht(),_t={[gt]:dt("font-weight","bold"),[mt]:dt("font-weight","normal"),[yt]:dt("color","blue"),[bt]:dt("color","green"),[vt]:dt("color","grey"),[wt]:dt("color","red"),[xt]:dt("color","purple"),[kt]:dt("color","orange"),[St]:dt("color","black")},Et={[gt]:"[1m",[mt]:"[2m",[yt]:"[34m",[bt]:"[32m",[vt]:"[37m",[wt]:"[31m",[xt]:"[35m",[kt]:"[38;5;208m",[St]:"[0m"},Ct=_?t=>{const e=[],n=[];let r=0;for(;r<t.length;r++){const n=t[r],i=Et[n];if(void 0!==i)e.push(i);else{if(n.constructor!==String&&n.constructor!==Number)break;e.push(n)}}for(r>0&&(e.push("[0m"),n.push(e.join("")));r<t.length;r++){const e=t[r];e instanceof Symbol||n.push(e)}return n}:t=>{const e=[],n=[],i=r();let o=[],s=0;for(;s<t.length;s++){const r=t[s],o=_t[r];if(void 0!==o)i.set(o.left,o.right);else{if(r.constructor!==String&&r.constructor!==Number)break;{const t=((t,e)=>{const n=[];for(const[r,i]of t)n.push(e(i,r));return n})(i,((t,e)=>`${e}:${t};`)).join("");s>0||t.length>0?(e.push("%c"+r),n.push(t)):e.push(r)}}}for(s>0&&(o=n,o.unshift(e.join("")));s<t.length;s++){const e=t[s];e instanceof Symbol||o.push(e)}return o},Ot=(...t)=>{console.log(...Ct(t)),Mt.forEach((e=>e.print(t)))},Mt=new Set;ft();const At=t=>({[Symbol.iterator](){return this},next:t}),Tt=(t,e)=>At((()=>{const{done:n,value:r}=t.next();return{done:n,value:n?void 0:e(r)}})),Nt=(Object.assign,Object.keys),Dt=t=>Nt(t).length,jt=(t,e)=>t===e||Dt(t)===Dt(e)&&((t,e)=>{for(const n in t)if(!e(t[n],n))return!1;return!0})(t,((t,n)=>(void 0!==t||((t,e)=>Object.prototype.hasOwnProperty.call(t,e))(e,n))&&e[n]===t));class Rt{constructor(t,e){this.clock=t,this.len=e}}class Pt{constructor(){this.clients=new Map}}const zt=(t,e,n)=>e.clients.forEach(((e,r)=>{const i=t.doc.store.clients.get(r);for(let r=0;r<e.length;r++){const o=e[r];be(t,i,o.clock,o.len,n)}})),It=(t,e)=>{const n=t.clients.get(e.client);return void 0!==n&&null!==((t,e)=>{let n=0,r=t.length-1;for(;n<=r;){const i=d((n+r)/2),o=t[i],s=o.clock;if(s<=e){if(e<s+o.len)return i;n=i+1}else r=i-1}return null})(n,e.clock)},Bt=t=>{t.clients.forEach((t=>{let e,n;for(t.sort(((t,e)=>t.clock-e.clock)),e=1,n=1;e<t.length;e++){const r=t[n-1],i=t[e];r.clock+r.len>=i.clock?r.len=g(r.len,i.clock+i.len-r.clock):(n<e&&(t[n]=i),n++)}t.length=n}))},Ft=t=>{const e=new Pt;for(let n=0;n<t.length;n++)t[n].clients.forEach(((r,i)=>{if(!e.clients.has(i)){const o=r.slice();for(let e=n+1;e<t.length;e++)l(o,t[e].clients.get(i)||[]);e.clients.set(i,o)}}));return Bt(e),e},$t=(t,e,n,r)=>{o(t.clients,e,(()=>[])).push(new Rt(n,r))},Lt=()=>new Pt,Ht=(t,e)=>{$(t.restEncoder,e.clients.size),e.clients.forEach(((e,n)=>{t.resetDsCurVal(),$(t.restEncoder,n);const r=e.length;$(t.restEncoder,r);for(let n=0;n<r;n++){const r=e[n];t.writeDsClock(r.clock),t.writeDsLen(r.len)}}))},Vt=nt;class qt extends u{constructor({guid:t=it(),collectionid:e=null,gc:n=!0,gcFilter:r=(()=>!0),meta:i=null,autoLoad:o=!1,shouldLoad:s=!0}={}){super(),this.gc=n,this.gcFilter=r,this.clientID=Vt(),this.guid=t,this.collectionid=e,this.share=new Map,this.store=new he,this._transaction=null,this._transactionCleanups=[],this.subdocs=new Set,this._item=null,this.shouldLoad=s,this.autoLoad=o,this.meta=i,this.isLoaded=!1,this.whenLoaded=ot((t=>{this.on("load",(()=>{this.isLoaded=!0,t(this)}))}))}load(){const t=this._item;null===t||this.shouldLoad||Oe(t.parent.doc,(t=>{t.subdocsLoaded.add(this)}),null,!0),this.shouldLoad=!0}getSubdocs(){return this.subdocs}getSubdocGuids(){return new Set(Array.from(this.subdocs).map((t=>t.guid)))}transact(t,e=null){Oe(this,t,e)}get(t,e=$e){const n=o(this.share,t,(()=>{const t=new e;return t._integrate(this,null),t})),r=n.constructor;if(e!==$e&&r!==e){if(r===$e){const r=new e;r._map=n._map,n._map.forEach((t=>{for(;null!==t;t=t.left)t.parent=r})),r._start=n._start;for(let t=r._start;null!==t;t=t.right)t.parent=r;return r._length=n._length,this.share.set(t,r),r._integrate(this,null),r}throw new Error(`Type with the name ${t} has already been defined with a different constructor`)}return n}getArray(t=""){return this.get(t,on)}getText(t=""){return this.get(t,xn)}getMap(t=""){return this.get(t,an)}getXmlFragment(t=""){return this.get(t,Sn)}toJSON(){const t={};return this.share.forEach(((e,n)=>{t[n]=e.toJSON()})),t}destroy(){c(this.subdocs).forEach((t=>t.destroy()));const t=this._item;if(null!==t){this._item=null;const e=t.content;e.doc=new qt({guid:this.guid,...e.opts,shouldLoad:!1}),e.doc._item=t,Oe(t.parent.doc,(n=>{const r=e.doc;t.deleted||n.subdocsAdded.add(r),n.subdocsRemoved.add(this)}),null,!0)}this.emit("destroyed",[!0]),this.emit("destroy",[this]),super.destroy()}on(t,e){super.on(t,e)}off(t,e){super.off(t,e)}}class Wt{constructor(){this.restEncoder=z()}toUint8Array(){return I(this.restEncoder)}resetDsCurVal(){}writeDsClock(t){$(this.restEncoder,t)}writeDsLen(t){$(this.restEncoder,t)}}class Ut extends Wt{writeLeftID(t){$(this.restEncoder,t.client),$(this.restEncoder,t.clock)}writeRightID(t){$(this.restEncoder,t.client),$(this.restEncoder,t.clock)}writeClient(t){$(this.restEncoder,t)}writeInfo(t){F(this.restEncoder,t)}writeString(t){H(this.restEncoder,t)}writeParentInfo(t){$(this.restEncoder,t?1:0)}writeTypeRef(t){$(this.restEncoder,t)}writeLen(t){$(this.restEncoder,t)}writeAny(t){Y(this.restEncoder,t)}writeBuf(t){q(this.restEncoder,t)}writeJSON(t){H(this.restEncoder,JSON.stringify(t))}writeKey(t){H(this.restEncoder,t)}}class Yt{constructor(){this.restEncoder=z(),this.dsCurrVal=0}toUint8Array(){return I(this.restEncoder)}resetDsCurVal(){this.dsCurrVal=0}writeDsClock(t){const e=t-this.dsCurrVal;this.dsCurrVal=t,$(this.restEncoder,e)}writeDsLen(t){0===t&&lt(),$(this.restEncoder,t-1),this.dsCurrVal+=t}}class Jt extends Yt{constructor(){super(),this.keyMap=new Map,this.keyClock=0,this.keyClockEncoder=new Z,this.clientEncoder=new K,this.leftClockEncoder=new Z,this.rightClockEncoder=new Z,this.infoEncoder=new J(F),this.stringEncoder=new Q,this.parentInfoEncoder=new J(F),this.typeRefEncoder=new K,this.lenEncoder=new K}toUint8Array(){const t=z();return $(t,0),q(t,this.keyClockEncoder.toUint8Array()),q(t,this.clientEncoder.toUint8Array()),q(t,this.leftClockEncoder.toUint8Array()),q(t,this.rightClockEncoder.toUint8Array()),q(t,I(this.infoEncoder)),q(t,this.stringEncoder.toUint8Array()),q(t,I(this.parentInfoEncoder)),q(t,this.typeRefEncoder.toUint8Array()),q(t,this.lenEncoder.toUint8Array()),V(t,I(this.restEncoder)),I(t)}writeLeftID(t){this.clientEncoder.write(t.client),this.leftClockEncoder.write(t.clock)}writeRightID(t){this.clientEncoder.write(t.client),this.rightClockEncoder.write(t.clock)}writeClient(t){this.clientEncoder.write(t)}writeInfo(t){this.infoEncoder.write(t)}writeString(t){this.stringEncoder.write(t)}writeParentInfo(t){this.parentInfoEncoder.write(t?1:0)}writeTypeRef(t){this.typeRefEncoder.write(t)}writeLen(t){this.lenEncoder.write(t)}writeAny(t){Y(this.restEncoder,t)}writeBuf(t){q(this.restEncoder,t)}writeJSON(t){Y(this.restEncoder,t)}writeKey(t){const e=this.keyMap.get(t);void 0===e?(this.keyClockEncoder.write(this.keyClock++),this.stringEncoder.write(t)):this.keyClockEncoder.write(e)}}const Xt=(t,e,n)=>{const r=new Map;n.forEach(((t,n)=>{de(e,n)>t&&r.set(n,t)})),ue(e).forEach(((t,e)=>{n.has(e)||r.set(e,0)})),$(t.restEncoder,r.size),Array.from(r.entries()).sort(((t,e)=>e[0]-t[0])).forEach((([n,r])=>{((t,e,n,r)=>{r=g(r,e[0].id.clock);const i=fe(e,r);$(t.restEncoder,e.length-i),t.writeClient(n),$(t.restEncoder,r);const o=e[i];o.write(t,r-o.id.clock);for(let n=i+1;n<e.length;n++)e[n].write(t,0)})(t,e.clients.get(n),n,r)}))};class Kt{constructor(){this.l=[]}}const Gt=()=>new Kt,Zt=(t,e)=>t.l.push(e),Qt=(t,e)=>{const n=t.l,r=n.length;t.l=n.filter((t=>e!==t)),r===t.l.length&&console.error("[yjs] Tried to remove event handler that doesn't exist.")},te=(t,e,n)=>ct(t.l,[e,n]);class ee{constructor(t,e){this.client=t,this.clock=e}}const ne=(t,e)=>t===e||null!==t&&null!==e&&t.client===e.client&&t.clock===e.clock,re=(t,e)=>new ee(t,e),ie=t=>{for(const[e,n]of t.doc.share.entries())if(n===t)return e;throw lt()},oe=(t,e)=>{for(;null!==e;){if(e.parent===t)return!0;e=e.parent._item}return!1};class se{constructor(t,e){this.ds=t,this.sv=e}}const ae=(t,e)=>new se(t,e),le=(ae(Lt(),new Map),(t,e)=>void 0===e?!t.deleted:e.sv.has(t.id.client)&&(e.sv.get(t.id.client)||0)>t.id.clock&&!It(e.ds,t.id)),ce=(t,e)=>{const n=o(t.meta,ce,s),r=t.doc.store;n.has(e)||(e.sv.forEach(((e,n)=>{e<de(r,n)&&ye(t,re(n,e))})),zt(t,e.ds,(t=>{})),n.add(e))};class he{constructor(){this.clients=new Map,this.pendingStructs=null,this.pendingDs=null}}const ue=t=>{const e=new Map;return t.clients.forEach(((t,n)=>{const r=t[t.length-1];e.set(n,r.id.clock+r.length)})),e},de=(t,e)=>{const n=t.clients.get(e);if(void 0===n)return 0;const r=n[n.length-1];return r.id.clock+r.length},pe=(t,e)=>{let n=t.clients.get(e.id.client);if(void 0===n)n=[],t.clients.set(e.id.client,n);else{const t=n[n.length-1];if(t.id.clock+t.length!==e.id.clock)throw lt()}n.push(e)},fe=(t,e)=>{let n=0,r=t.length-1,i=t[r],o=i.id.clock;if(o===e)return r;let s=d(e/(o+i.length-1)*r);for(;n<=r;){if(i=t[s],o=i.id.clock,o<=e){if(e<o+i.length)return s;n=s+1}else r=s-1;s=d((n+r)/2)}throw lt()},ge=(t,e)=>{const n=t.clients.get(e.client);return n[fe(n,e.clock)]},me=(t,e,n)=>{const r=fe(e,n),i=e[r];return i.id.clock<n&&i instanceof Un?(e.splice(r+1,0,qn(t,i,n-i.id.clock)),r+1):r},ye=(t,e)=>{const n=t.doc.store.clients.get(e.client);return n[me(t,n,e.clock)]},ve=(t,e,n)=>{const r=e.clients.get(n.client),i=fe(r,n.clock),o=r[i];return n.clock!==o.id.clock+o.length-1&&o.constructor!==On&&r.splice(i+1,0,qn(t,o,n.clock-o.id.clock+1)),o},be=(t,e,n,r,i)=>{if(0===r)return;const o=n+r;let s,a=me(t,e,n);do{s=e[a++],o<s.id.clock+s.length&&me(t,e,o),i(s)}while(a<e.length&&e[a].id.clock<o)};class we{constructor(t,e,n){this.doc=t,this.deleteSet=new Pt,this.beforeState=ue(t.store),this.afterState=new Map,this.changed=new Map,this.changedParentTypes=new Map,this._mergeStructs=[],this.origin=e,this.meta=new Map,this.local=n,this.subdocsAdded=new Set,this.subdocsRemoved=new Set,this.subdocsLoaded=new Set}}const xe=(t,e)=>!(0===e.deleteSet.clients.size&&!((t,e)=>{for(const[n,r]of t)if(e(r,n))return!0;return!1})(e.afterState,((t,n)=>e.beforeState.get(n)!==t)))&&(Bt(e.deleteSet),((t,e)=>{Xt(t,e.doc.store,e.beforeState)})(t,e),Ht(t,e.deleteSet),!0),ke=(t,e,n)=>{const r=e._item;(null===r||r.id.clock<(t.beforeState.get(r.id.client)||0)&&!r.deleted)&&o(t.changed,e,s).add(n)},Se=(t,e)=>{const n=t[e-1],r=t[e];n.deleted===r.deleted&&n.constructor===r.constructor&&n.mergeWith(r)&&(t.splice(e,1),r instanceof Un&&null!==r.parentSub&&r.parent._map.get(r.parentSub)===r&&r.parent._map.set(r.parentSub,n))},_e=(t,e,n)=>{for(const[r,i]of t.clients.entries()){const t=e.clients.get(r);for(let r=i.length-1;r>=0;r--){const o=i[r],s=o.clock+o.len;for(let r=fe(t,o.clock),i=t[r];r<t.length&&i.id.clock<s;i=t[++r]){const i=t[r];if(o.clock+o.len<=i.id.clock)break;i instanceof Un&&i.deleted&&!i.keep&&n(i)&&i.gc(e,!1)}}}},Ee=(t,e)=>{t.clients.forEach(((t,n)=>{const r=e.clients.get(n);for(let e=t.length-1;e>=0;e--){const n=t[e];for(let t=f(r.length-1,1+fe(r,n.clock+n.len-1)),e=r[t];t>0&&e.id.clock>=n.clock;e=r[--t])Se(r,t)}}))},Ce=(t,e)=>{if(e<t.length){const n=t[e],r=n.doc,i=r.store,o=n.deleteSet,s=n._mergeStructs;try{Bt(o),n.afterState=ue(n.doc.store),r._transaction=null,r.emit("beforeObserverCalls",[n,r]);const a=[];n.changed.forEach(((t,e)=>a.push((()=>{null!==e._item&&e._item.deleted||e._callObserver(n,t)})))),a.push((()=>{n.changedParentTypes.forEach(((t,e)=>a.push((()=>{null!==e._item&&e._item.deleted||((t=t.filter((t=>null===t.target._item||!t.target._item.deleted))).forEach((t=>{t.currentTarget=e})),t.sort(((t,e)=>t.path.length-e.path.length)),te(e._dEH,t,n))})))),a.push((()=>r.emit("afterTransaction",[n,r])))})),ct(a,[])}finally{r.gc&&_e(o,i,r.gcFilter),Ee(o,i),n.afterState.forEach(((t,e)=>{const r=n.beforeState.get(e)||0;if(r!==t){const t=i.clients.get(e),n=g(fe(t,r),1);for(let e=t.length-1;e>=n;e--)Se(t,e)}}));for(let t=0;t<s.length;t++){const{client:e,clock:n}=s[t].id,r=i.clients.get(e),o=fe(r,n);o+1<r.length&&Se(r,o+1),o>0&&Se(r,o)}if(n.local||n.afterState.get(r.clientID)===n.beforeState.get(r.clientID)||(Ot(kt,gt,"[yjs] ",mt,wt,"Changed the client-id because another client seems to be using it."),r.clientID=Vt()),r.emit("afterTransactionCleanup",[n,r]),r._observers.has("update")){const t=new Ut;xe(t,n)&&r.emit("update",[t.toUint8Array(),n.origin,r,n])}if(r._observers.has("updateV2")){const t=new Jt;xe(t,n)&&r.emit("updateV2",[t.toUint8Array(),n.origin,r,n])}const{subdocsAdded:a,subdocsLoaded:l,subdocsRemoved:c}=n;(a.size>0||c.size>0||l.size>0)&&(a.forEach((t=>{t.clientID=r.clientID,null==t.collectionid&&(t.collectionid=r.collectionid),r.subdocs.add(t)})),c.forEach((t=>r.subdocs.delete(t))),r.emit("subdocs",[{loaded:l,added:a,removed:c},r,n]),c.forEach((t=>t.destroy()))),t.length<=e+1?(r._transactionCleanups=[],r.emit("afterAllTransactions",[r,t])):Ce(t,e+1)}}},Oe=(t,e,n=null,r=!0)=>{const i=t._transactionCleanups;let o=!1;null===t._transaction&&(o=!0,t._transaction=new we(t,n,r),i.push(t._transaction),1===i.length&&t.emit("beforeAllTransactions",[t]),t.emit("beforeTransaction",[t._transaction,t]));try{e(t._transaction)}finally{o&&i[0]===t._transaction&&Ce(i,0)}};class Me{constructor(t,e){this.insertions=e,this.deletions=t,this.meta=new Map}}const Ae=(t,e,n)=>{zt(t,n.deletions,(t=>{t instanceof Un&&e.scope.some((e=>oe(e,t)))&&Vn(t,!1)}))},Te=(t,e,n)=>{let r=null,i=null;const o=t.doc,s=t.scope;if(Oe(o,(n=>{for(;e.length>0&&null===r;){const i=o.store,a=e.pop(),l=new Set,c=[];let h=!1;zt(n,a.insertions,(t=>{if(t instanceof Un){if(null!==t.redone){let{item:e,diff:r}=Hn(i,t.id);r>0&&(e=ye(n,re(e.id.client,e.id.clock+r))),t=e}!t.deleted&&s.some((e=>oe(e,t)))&&c.push(t)}})),zt(n,a.deletions,(t=>{t instanceof Un&&s.some((e=>oe(e,t)))&&!It(a.insertions,t.id)&&l.add(t)})),l.forEach((e=>{h=null!==Wn(n,e,l,a.insertions,t.ignoreRemoteMapChanges)||h}));for(let e=c.length-1;e>=0;e--){const r=c[e];t.deleteFilter(r)&&(r.delete(n),h=!0)}r=h?a:null}n.changed.forEach(((t,e)=>{t.has(null)&&e._searchMarker&&(e._searchMarker.length=0)})),i=n}),t),null!=r){const e=i.changedParentTypes;t.emit("stack-item-popped",[{stackItem:r,type:n,changedParentTypes:e},t])}return r};class Ne extends u{constructor(t,{captureTimeout:e=500,captureTransaction:n=(t=>!0),deleteFilter:r=(()=>!0),trackedOrigins:i=new Set([null]),ignoreRemoteMapChanges:o=!1}={}){super(),this.scope=[],this.addToScope(t),this.deleteFilter=r,i.add(this),this.trackedOrigins=i,this.captureTransaction=n,this.undoStack=[],this.redoStack=[],this.undoing=!1,this.redoing=!1,this.doc=this.scope[0].doc,this.lastChange=0,this.ignoreRemoteMapChanges=o,this.afterTransactionHandler=t=>{if(!(this.captureTransaction(t)&&this.scope.some((e=>t.changedParentTypes.has(e)))&&(this.trackedOrigins.has(t.origin)||t.origin&&this.trackedOrigins.has(t.origin.constructor))))return;const n=this.undoing,r=this.redoing,i=n?this.redoStack:this.undoStack;n?this.stopCapturing():r||this.clear(!1,!0);const o=new Pt;t.afterState.forEach(((e,n)=>{const r=t.beforeState.get(n)||0,i=e-r;i>0&&$t(o,n,r,i)}));const s=ft();let a=!1;if(s-this.lastChange<e&&i.length>0&&!n&&!r){const e=i[i.length-1];e.deletions=Ft([e.deletions,t.deleteSet]),e.insertions=Ft([e.insertions,o])}else i.push(new Me(t.deleteSet,o)),a=!0;n||r||(this.lastChange=s),zt(t,t.deleteSet,(t=>{t instanceof Un&&this.scope.some((e=>oe(e,t)))&&Vn(t,!0)}));const l=[{stackItem:i[i.length-1],origin:t.origin,type:n?"redo":"undo",changedParentTypes:t.changedParentTypes},this];a?this.emit("stack-item-added",l):this.emit("stack-item-updated",l)},this.doc.on("afterTransaction",this.afterTransactionHandler),this.doc.on("destroy",(()=>{this.destroy()}))}addToScope(t){(t=h(t)?t:[t]).forEach((t=>{this.scope.every((e=>e!==t))&&this.scope.push(t)}))}addTrackedOrigin(t){this.trackedOrigins.add(t)}removeTrackedOrigin(t){this.trackedOrigins.delete(t)}clear(t=!0,e=!0){(t&&this.canUndo()||e&&this.canRedo())&&this.doc.transact((n=>{t&&(this.undoStack.forEach((t=>Ae(n,this,t))),this.undoStack=[]),e&&(this.redoStack.forEach((t=>Ae(n,this,t))),this.redoStack=[]),this.emit("stack-cleared",[{undoStackCleared:t,redoStackCleared:e}])}))}stopCapturing(){this.lastChange=0}undo(){let t;this.undoing=!0;try{t=Te(this,this.undoStack,"undo")}finally{this.undoing=!1}return t}redo(){let t;this.redoing=!0;try{t=Te(this,this.redoStack,"redo")}finally{this.redoing=!1}return t}canUndo(){return this.undoStack.length>0}canRedo(){return this.redoStack.length>0}destroy(){this.trackedOrigins.delete(this),this.doc.off("afterTransaction",this.afterTransactionHandler),super.destroy()}}class De{constructor(t,e){this.target=t,this.currentTarget=t,this.transaction=e,this._changes=null,this._keys=null,this._delta=null}get path(){return je(this.currentTarget,this.target)}deletes(t){return It(this.transaction.deleteSet,t.id)}get keys(){if(null===this._keys){const t=new Map,e=this.target;this.transaction.changed.get(e).forEach((n=>{if(null!==n){const r=e._map.get(n);let i,o;if(this.adds(r)){let t=r.left;for(;null!==t&&this.adds(t);)t=t.left;if(this.deletes(r)){if(null===t||!this.deletes(t))return;i="delete",o=a(t.content.getContent())}else null!==t&&this.deletes(t)?(i="update",o=a(t.content.getContent())):(i="add",o=void 0)}else{if(!this.deletes(r))return;i="delete",o=a(r.content.getContent())}t.set(n,{action:i,oldValue:o})}})),this._keys=t}return this._keys}get delta(){return this.changes.delta}adds(t){return t.id.clock>=(this.transaction.beforeState.get(t.id.client)||0)}get changes(){let t=this._changes;if(null===t){const e=this.target,n=s(),r=s(),i=[];t={added:n,deleted:r,delta:i,keys:this.keys};if(this.transaction.changed.get(e).has(null)){let t=null;const o=()=>{t&&i.push(t)};for(let i=e._start;null!==i;i=i.right)i.deleted?this.deletes(i)&&!this.adds(i)&&(null!==t&&void 0!==t.delete||(o(),t={delete:0}),t.delete+=i.length,r.add(i)):this.adds(i)?(null!==t&&void 0!==t.insert||(o(),t={insert:[]}),t.insert=t.insert.concat(i.content.getContent()),n.add(i)):(null!==t&&void 0!==t.retain||(o(),t={retain:0}),t.retain+=i.length);null!==t&&void 0===t.retain&&o()}this._changes=t}return t}}const je=(t,e)=>{const n=[];for(;null!==e._item&&e!==t;){if(null!==e._item.parentSub)n.unshift(e._item.parentSub);else{let t=0,r=e._item.parent._start;for(;r!==e._item&&null!==r;)r.deleted||t++,r=r.right;n.unshift(t)}e=e._item.parent}return n};let Re=0;class Pe{constructor(t,e){t.marker=!0,this.p=t,this.index=e,this.timestamp=Re++}}const ze=(t,e,n)=>{t.p.marker=!1,t.p=e,e.marker=!0,t.index=n,t.timestamp=Re++},Ie=(t,e)=>{if(null===t._start||0===e||null===t._searchMarker)return null;const n=0===t._searchMarker.length?null:t._searchMarker.reduce(((t,n)=>p(e-t.index)<p(e-n.index)?t:n));let r=t._start,i=0;for(null!==n&&(r=n.p,i=n.index,(t=>{t.timestamp=Re++})(n));null!==r.right&&i<e;){if(!r.deleted&&r.countable){if(e<i+r.length)break;i+=r.length}r=r.right}for(;null!==r.left&&i>e;)r=r.left,!r.deleted&&r.countable&&(i-=r.length);for(;null!==r.left&&r.left.id.client===r.id.client&&r.left.id.clock+r.left.length===r.id.clock;)r=r.left,!r.deleted&&r.countable&&(i-=r.length);return null!==n&&p(n.index-i)<r.parent.length/80?(ze(n,r,i),n):((t,e,n)=>{if(t.length>=80){const r=t.reduce(((t,e)=>t.timestamp<e.timestamp?t:e));return ze(r,e,n),r}{const r=new Pe(e,n);return t.push(r),r}})(t._searchMarker,r,i)},Be=(t,e,n)=>{for(let r=t.length-1;r>=0;r--){const i=t[r];if(n>0){let e=i.p;for(e.marker=!1;e&&(e.deleted||!e.countable);)e=e.left,e&&!e.deleted&&e.countable&&(i.index-=e.length);if(null===e||!0===e.marker){t.splice(r,1);continue}i.p=e,e.marker=!0}(e<i.index||n>0&&e===i.index)&&(i.index=g(e,i.index+n))}},Fe=(t,e,n)=>{const r=t,i=e.changedParentTypes;for(;o(i,t,(()=>[])).push(n),null!==t._item;)t=t._item.parent;te(r._eH,n,e)};class $e{constructor(){this._item=null,this._map=new Map,this._start=null,this.doc=null,this._length=0,this._eH=Gt(),this._dEH=Gt(),this._searchMarker=null}get parent(){return this._item?this._item.parent:null}_integrate(t,e){this.doc=t,this._item=e}_copy(){throw at()}clone(){throw at()}_write(t){}get _first(){let t=this._start;for(;null!==t&&t.deleted;)t=t.right;return t}_callObserver(t,e){!t.local&&this._searchMarker&&(this._searchMarker.length=0)}observe(t){Zt(this._eH,t)}observeDeep(t){Zt(this._dEH,t)}unobserve(t){Qt(this._eH,t)}unobserveDeep(t){Qt(this._dEH,t)}toJSON(){}}const Le=(t,e,n)=>{e<0&&(e=t._length+e),n<0&&(n=t._length+n);let r=n-e;const i=[];let o=t._start;for(;null!==o&&r>0;){if(o.countable&&!o.deleted){const t=o.content.getContent();if(t.length<=e)e-=t.length;else{for(let n=e;n<t.length&&r>0;n++)i.push(t[n]),r--;e=0}}o=o.right}return i},He=t=>{const e=[];let n=t._start;for(;null!==n;){if(n.countable&&!n.deleted){const t=n.content.getContent();for(let n=0;n<t.length;n++)e.push(t[n])}n=n.right}return e},Ve=(t,e)=>{let n=0,r=t._start;for(;null!==r;){if(r.countable&&!r.deleted){const i=r.content.getContent();for(let r=0;r<i.length;r++)e(i[r],n++,t)}r=r.right}},qe=(t,e)=>{const n=[];return Ve(t,((r,i)=>{n.push(e(r,i,t))})),n},We=t=>{let e=t._start,n=null,r=0;return{[Symbol.iterator](){return this},next:()=>{if(null===n){for(;null!==e&&e.deleted;)e=e.right;if(null===e)return{done:!0,value:void 0};n=e.content.getContent(),r=0,e=e.right}const t=n[r++];return n.length<=r&&(n=null),{done:!1,value:t}}}},Ue=(t,e)=>{const n=Ie(t,e);let r=t._start;for(null!==n&&(r=n.p,e-=n.index);null!==r;r=r.right)if(!r.deleted&&r.countable){if(e<r.length)return r.content.getContent()[e];e-=r.length}},Ye=(t,e,n,r)=>{let i=n;const o=t.doc,s=o.clientID,a=o.store,l=null===n?e._start:n.right;let c=[];const h=()=>{c.length>0&&(i=new Un(re(s,de(a,s)),i,i&&i.lastId,l,l&&l.id,e,null,new Rn(c)),i.integrate(t,0),c=[])};r.forEach((n=>{if(null===n)c.push(n);else switch(n.constructor){case Number:case Object:case Boolean:case Array:case String:c.push(n);break;default:switch(h(),n.constructor){case Uint8Array:case ArrayBuffer:i=new Un(re(s,de(a,s)),i,i&&i.lastId,l,l&&l.id,e,null,new Mn(new Uint8Array(n))),i.integrate(t,0);break;case qt:i=new Un(re(s,de(a,s)),i,i&&i.lastId,l,l&&l.id,e,null,new Nn(n)),i.integrate(t,0);break;default:if(!(n instanceof $e))throw new Error("Unexpected content type in insert operation");i=new Un(re(s,de(a,s)),i,i&&i.lastId,l,l&&l.id,e,null,new Ln(n)),i.integrate(t,0)}}})),h()},Je=st("Length exceeded!"),Xe=(t,e,n,r)=>{if(n>e._length)throw Je;if(0===n)return e._searchMarker&&Be(e._searchMarker,n,r.length),Ye(t,e,null,r);const i=n,o=Ie(e,n);let s=e._start;for(null!==o&&(s=o.p,0===(n-=o.index)&&(s=s.prev,n+=s&&s.countable&&!s.deleted?s.length:0));null!==s;s=s.right)if(!s.deleted&&s.countable){if(n<=s.length){n<s.length&&ye(t,re(s.id.client,s.id.clock+n));break}n-=s.length}return e._searchMarker&&Be(e._searchMarker,i,r.length),Ye(t,e,s,r)},Ke=(t,e,n,r)=>{if(0===r)return;const i=n,o=r,s=Ie(e,n);let a=e._start;for(null!==s&&(a=s.p,n-=s.index);null!==a&&n>0;a=a.right)!a.deleted&&a.countable&&(n<a.length&&ye(t,re(a.id.client,a.id.clock+n)),n-=a.length);for(;r>0&&null!==a;)a.deleted||(r<a.length&&ye(t,re(a.id.client,a.id.clock+r)),a.delete(t),r-=a.length),a=a.right;if(r>0)throw Je;e._searchMarker&&Be(e._searchMarker,i,-o+r)},Ge=(t,e,n)=>{const r=e._map.get(n);void 0!==r&&r.delete(t)},Ze=(t,e,n,r)=>{const i=e._map.get(n)||null,o=t.doc,s=o.clientID;let a;if(null==r)a=new Rn([r]);else switch(r.constructor){case Number:case Object:case Boolean:case Array:case String:a=new Rn([r]);break;case Uint8Array:a=new Mn(r);break;case qt:a=new Nn(r);break;default:if(!(r instanceof $e))throw new Error("Unexpected content type");a=new Ln(r)}new Un(re(s,de(o.store,s)),i,i&&i.lastId,null,null,e,n,a).integrate(t,0)},Qe=(t,e)=>{const n=t._map.get(e);return void 0===n||n.deleted?void 0:n.content.getContent()[n.length-1]},tn=t=>{const e={};return t._map.forEach(((t,n)=>{t.deleted||(e[n]=t.content.getContent()[t.length-1])})),e},en=(t,e)=>{const n=t._map.get(e);return void 0!==n&&!n.deleted},nn=t=>{return e=t.entries(),n=t=>!t[1].deleted,At((()=>{let t;do{t=e.next()}while(!t.done&&!n(t.value));return t}));var e,n};class rn extends De{constructor(t,e){super(t,e),this._transaction=e}}class on extends $e{constructor(){super(),this._prelimContent=[],this._searchMarker=[]}static from(t){const e=new on;return e.push(t),e}_integrate(t,e){super._integrate(t,e),this.insert(0,this._prelimContent),this._prelimContent=null}_copy(){return new on}clone(){const t=new on;return t.insert(0,this.toArray().map((t=>t instanceof $e?t.clone():t))),t}get length(){return null===this._prelimContent?this._length:this._prelimContent.length}_callObserver(t,e){super._callObserver(t,e),Fe(this,t,new rn(this,t))}insert(t,e){null!==this.doc?Oe(this.doc,(n=>{Xe(n,this,t,e)})):this._prelimContent.splice(t,0,...e)}push(t){null!==this.doc?Oe(this.doc,(e=>{((t,e,n)=>{let r=(e._searchMarker||[]).reduce(((t,e)=>e.index>t.index?e:t),{index:0,p:e._start}).p;if(r)for(;r.right;)r=r.right;Ye(t,e,r,n)})(e,this,t)})):this._prelimContent.push(...t)}unshift(t){this.insert(0,t)}delete(t,e=1){null!==this.doc?Oe(this.doc,(n=>{Ke(n,this,t,e)})):this._prelimContent.splice(t,e)}get(t){return Ue(this,t)}toArray(){return He(this)}slice(t=0,e=this.length){return Le(this,t,e)}toJSON(){return this.map((t=>t instanceof $e?t.toJSON():t))}map(t){return qe(this,t)}forEach(t){Ve(this,t)}[Symbol.iterator](){return We(this)}_write(t){t.writeTypeRef(zn)}}class sn extends De{constructor(t,e,n){super(t,e),this.keysChanged=n}}class an extends $e{constructor(t){super(),this._prelimContent=null,this._prelimContent=void 0===t?new Map:new Map(t)}_integrate(t,e){super._integrate(t,e),this._prelimContent.forEach(((t,e)=>{this.set(e,t)})),this._prelimContent=null}_copy(){return new an}clone(){const t=new an;return this.forEach(((e,n)=>{t.set(n,e instanceof $e?e.clone():e)})),t}_callObserver(t,e){Fe(this,t,new sn(this,t,e))}toJSON(){const t={};return this._map.forEach(((e,n)=>{if(!e.deleted){const r=e.content.getContent()[e.length-1];t[n]=r instanceof $e?r.toJSON():r}})),t}get size(){return[...nn(this._map)].length}keys(){return Tt(nn(this._map),(t=>t[0]))}values(){return Tt(nn(this._map),(t=>t[1].content.getContent()[t[1].length-1]))}entries(){return Tt(nn(this._map),(t=>[t[0],t[1].content.getContent()[t[1].length-1]]))}forEach(t){return this._map.forEach(((e,n)=>{e.deleted||t(e.content.getContent()[e.length-1],n,this)})),{}}[Symbol.iterator](){return this.entries()}delete(t){null!==this.doc?Oe(this.doc,(e=>{Ge(e,this,t)})):this._prelimContent.delete(t)}set(t,e){return null!==this.doc?Oe(this.doc,(n=>{Ze(n,this,t,e)})):this._prelimContent.set(t,e),e}get(t){return Qe(this,t)}has(t){return en(this,t)}clear(){null!==this.doc?Oe(this.doc,(t=>{this.forEach((function(e,n,r){Ge(t,r,n)}))})):this._prelimContent.clear()}_write(t){t.writeTypeRef(In)}}const ln=(t,e)=>t===e||"object"==typeof t&&"object"==typeof e&&t&&e&&jt(t,e);class cn{constructor(t,e,n,r){this.left=t,this.right=e,this.index=n,this.currentAttributes=r}forward(){if(null===this.right&&lt(),this.right.content.constructor===jn)this.right.deleted||pn(this.currentAttributes,this.right.content);else this.right.deleted||(this.index+=this.right.length);this.left=this.right,this.right=this.right.right}}const hn=(t,e,n)=>{for(;null!==e.right&&n>0;){if(e.right.content.constructor===jn)e.right.deleted||pn(e.currentAttributes,e.right.content);else e.right.deleted||(n<e.right.length&&ye(t,re(e.right.id.client,e.right.id.clock+n)),e.index+=e.right.length,n-=e.right.length);e.left=e.right,e.right=e.right.right}return e},un=(t,e,n)=>{const r=new Map,i=Ie(e,n);if(i){const e=new cn(i.p.left,i.p,i.index,r);return hn(t,e,n-i.index)}{const i=new cn(null,e._start,0,r);return hn(t,i,n)}},dn=(t,e,n,r)=>{for(;null!==n.right&&(!0===n.right.deleted||n.right.content.constructor===jn&&ln(r.get(n.right.content.key),n.right.content.value));)n.right.deleted||r.delete(n.right.content.key),n.forward();const i=t.doc,o=i.clientID;r.forEach(((r,s)=>{const a=n.left,l=n.right,c=new Un(re(o,de(i.store,o)),a,a&&a.lastId,l,l&&l.id,e,null,new jn(s,r));c.integrate(t,0),n.right=c,n.forward()}))},pn=(t,e)=>{const{key:n,value:r}=e;null===r?t.delete(n):t.set(n,r)},fn=(t,e)=>{for(;null!==t.right&&(t.right.deleted||t.right.content.constructor===jn&&ln(e[t.right.content.key]||null,t.right.content.value));)t.forward()},gn=(t,e,n,r)=>{const i=t.doc,o=i.clientID,s=new Map;for(const a in r){const l=r[a],c=n.currentAttributes.get(a)||null;if(!ln(c,l)){s.set(a,c);const{left:r,right:h}=n;n.right=new Un(re(o,de(i.store,o)),r,r&&r.lastId,h,h&&h.id,e,null,new jn(a,l)),n.right.integrate(t,0),n.forward()}}return s},mn=(t,e,n,r,i)=>{n.currentAttributes.forEach(((t,e)=>{void 0===i[e]&&(i[e]=null)}));const o=t.doc,s=o.clientID;fn(n,i);const a=gn(t,e,n,i),l=r.constructor===String?new Pn(r):r instanceof $e?new Ln(r):new Dn(r);let{left:c,right:h,index:u}=n;e._searchMarker&&Be(e._searchMarker,n.index,l.getLength()),h=new Un(re(s,de(o.store,s)),c,c&&c.lastId,h,h&&h.id,e,null,l),h.integrate(t,0),n.right=h,n.index=u,n.forward(),dn(t,e,n,a)},yn=(t,e,n,r,i)=>{const o=t.doc,s=o.clientID;fn(n,i);const a=gn(t,e,n,i);t:for(;null!==n.right&&(r>0||a.size>0&&(n.right.deleted||n.right.content.constructor===jn));){if(!n.right.deleted)switch(n.right.content.constructor){case jn:{const{key:e,value:o}=n.right.content,s=i[e];if(void 0!==s){if(ln(s,o))a.delete(e);else{if(0===r)break t;a.set(e,o)}n.right.delete(t)}else n.currentAttributes.set(e,o);break}default:r<n.right.length&&ye(t,re(n.right.id.client,n.right.id.clock+r)),r-=n.right.length}n.forward()}if(r>0){let i="";for(;r>0;r--)i+="\n";n.right=new Un(re(s,de(o.store,s)),n.left,n.left&&n.left.lastId,n.right,n.right&&n.right.id,e,null,new Pn(i)),n.right.integrate(t,0),n.forward()}dn(t,e,n,a)},vn=(t,e,n,r,o)=>{let s=n;const a=i(o);for(;s&&(!s.countable||s.deleted);)s.deleted||s.content.constructor!==jn||pn(a,s.content),s=s.right;let l=0,c=!1;for(;e!==s;){if(n===e&&(c=!0),!e.deleted){const n=e.content;switch(n.constructor){case jn:{const{key:i,value:s}=n;(a.get(i)||null)===s&&(r.get(i)||null)!==s||(e.delete(t),l++,c||(o.get(i)||null)!==s||(r.get(i)||null)===s||o.delete(i));break}}}e=e.right}return l},bn=(t,e,n)=>{const r=n,o=i(e.currentAttributes),s=e.right;for(;n>0&&null!==e.right;){if(!1===e.right.deleted)switch(e.right.content.constructor){case Ln:case Dn:case Pn:n<e.right.length&&ye(t,re(e.right.id.client,e.right.id.clock+n)),n-=e.right.length,e.right.delete(t)}e.forward()}s&&vn(t,s,e.right,o,e.currentAttributes);const a=(e.left||e.right).parent;return a._searchMarker&&Be(a._searchMarker,e.index,-r+n),e};class wn extends De{constructor(t,e,n){super(t,e),this.childListChanged=!1,this.keysChanged=new Set,n.forEach((t=>{null===t?this.childListChanged=!0:this.keysChanged.add(t)}))}get changes(){if(null===this._changes){const t={keys:this.keys,delta:this.delta,added:new Set,deleted:new Set};this._changes=t}return this._changes}get delta(){if(null===this._delta){const t=this.target.doc,e=[];Oe(t,(t=>{const n=new Map,r=new Map;let i=this.target._start,o=null;const s={};let a="",l=0,c=0;const h=()=>{if(null!==o){let t;switch(o){case"delete":t={delete:c},c=0;break;case"insert":t={insert:a},n.size>0&&(t.attributes={},n.forEach(((e,n)=>{null!==e&&(t.attributes[n]=e)}))),a="";break;case"retain":if(t={retain:l},Object.keys(s).length>0){t.attributes={};for(const e in s)t.attributes[e]=s[e]}l=0}e.push(t),o=null}};for(;null!==i;){switch(i.content.constructor){case Ln:case Dn:this.adds(i)?this.deletes(i)||(h(),o="insert",a=i.content.getContent()[0],h()):this.deletes(i)?("delete"!==o&&(h(),o="delete"),c+=1):i.deleted||("retain"!==o&&(h(),o="retain"),l+=1);break;case Pn:this.adds(i)?this.deletes(i)||("insert"!==o&&(h(),o="insert"),a+=i.content.str):this.deletes(i)?("delete"!==o&&(h(),o="delete"),c+=i.length):i.deleted||("retain"!==o&&(h(),o="retain"),l+=i.length);break;case jn:{const{key:e,value:a}=i.content;if(this.adds(i)){if(!this.deletes(i)){const l=n.get(e)||null;ln(l,a)?null!==a&&i.delete(t):("retain"===o&&h(),ln(a,r.get(e)||null)?delete s[e]:s[e]=a)}}else if(this.deletes(i)){r.set(e,a);const t=n.get(e)||null;ln(t,a)||("retain"===o&&h(),s[e]=t)}else if(!i.deleted){r.set(e,a);const n=s[e];void 0!==n&&(ln(n,a)?null!==n&&i.delete(t):("retain"===o&&h(),null===a?delete s[e]:s[e]=a))}i.deleted||("insert"===o&&h(),pn(n,i.content));break}}i=i.right}for(h();e.length>0;){const t=e[e.length-1];if(void 0===t.retain||void 0!==t.attributes)break;e.pop()}})),this._delta=e}return this._delta}}class xn extends $e{constructor(t){super(),this._pending=void 0!==t?[()=>this.insert(0,t)]:[],this._searchMarker=[]}get length(){return this._length}_integrate(t,e){super._integrate(t,e);try{this._pending.forEach((t=>t()))}catch(t){console.error(t)}this._pending=null}_copy(){return new xn}clone(){const t=new xn;return t.applyDelta(this.toDelta()),t}_callObserver(t,e){super._callObserver(t,e);const n=new wn(this,t,e),o=t.doc;if(Fe(this,t,n),!t.local){let e=!1;for(const[n,r]of t.afterState.entries()){const i=t.beforeState.get(n)||0;if(r!==i&&(be(t,o.store.clients.get(n),i,r,(t=>{t.deleted||t.content.constructor!==jn||(e=!0)})),e))break}e||zt(t,t.deleteSet,(t=>{t instanceof On||e||t.parent===this&&t.content.constructor===jn&&(e=!0)})),Oe(o,(t=>{e?(t=>{let e=0;Oe(t.doc,(n=>{let o=t._start,s=t._start,a=r();const l=i(a);for(;s;)!1===s.deleted&&(s.content.constructor===jn?pn(l,s.content):(e+=vn(n,o,s,a,l),a=i(l),o=s)),s=s.right}))})(this):zt(t,t.deleteSet,(e=>{e instanceof On||e.parent===this&&((t,e)=>{for(;e&&e.right&&(e.right.deleted||!e.right.countable);)e=e.right;const n=new Set;for(;e&&(e.deleted||!e.countable);){if(!e.deleted&&e.content.constructor===jn){const r=e.content.key;n.has(r)?e.delete(t):n.add(r)}e=e.left}})(t,e)}))}))}}toString(){let t="",e=this._start;for(;null!==e;)!e.deleted&&e.countable&&e.content.constructor===Pn&&(t+=e.content.str),e=e.right;return t}toJSON(){return this.toString()}applyDelta(t,{sanitize:e=!0}={}){null!==this.doc?Oe(this.doc,(n=>{const r=new cn(null,this._start,0,new Map);for(let i=0;i<t.length;i++){const o=t[i];if(void 0!==o.insert){const s=e||"string"!=typeof o.insert||i!==t.length-1||null!==r.right||"\n"!==o.insert.slice(-1)?o.insert:o.insert.slice(0,-1);("string"!=typeof s||s.length>0)&&mn(n,this,r,s,o.attributes||{})}else void 0!==o.retain?yn(n,this,r,o.retain,o.attributes||{}):void 0!==o.delete&&bn(n,r,o.delete)}})):this._pending.push((()=>this.applyDelta(t)))}toDelta(t,e,n){const r=[],i=new Map,o=this.doc;let s="",a=this._start;function l(){if(s.length>0){const t={};let e=!1;i.forEach(((n,r)=>{e=!0,t[r]=n}));const n={insert:s};e&&(n.attributes=t),r.push(n),s=""}}return Oe(o,(o=>{for(t&&ce(o,t),e&&ce(o,e);null!==a;){if(le(a,t)||void 0!==e&&le(a,e))switch(a.content.constructor){case Pn:{const r=i.get("ychange");void 0===t||le(a,t)?void 0===e||le(a,e)?void 0!==r&&(l(),i.delete("ychange")):void 0!==r&&r.user===a.id.client&&"added"===r.state||(l(),i.set("ychange",n?n("added",a.id):{type:"added"})):void 0!==r&&r.user===a.id.client&&"removed"===r.state||(l(),i.set("ychange",n?n("removed",a.id):{type:"removed"})),s+=a.content.str;break}case Ln:case Dn:{l();const t={insert:a.content.getContent()[0]};if(i.size>0){const e={};t.attributes=e,i.forEach(((t,n)=>{e[n]=t}))}r.push(t);break}case jn:le(a,t)&&(l(),pn(i,a.content))}a=a.right}l()}),ce),r}insert(t,e,n){if(e.length<=0)return;const r=this.doc;null!==r?Oe(r,(r=>{const i=un(r,this,t);n||(n={},i.currentAttributes.forEach(((t,e)=>{n[e]=t}))),mn(r,this,i,e,n)})):this._pending.push((()=>this.insert(t,e,n)))}insertEmbed(t,e,n={}){const r=this.doc;null!==r?Oe(r,(r=>{const i=un(r,this,t);mn(r,this,i,e,n)})):this._pending.push((()=>this.insertEmbed(t,e,n)))}delete(t,e){if(0===e)return;const n=this.doc;null!==n?Oe(n,(n=>{bn(n,un(n,this,t),e)})):this._pending.push((()=>this.delete(t,e)))}format(t,e,n){if(0===e)return;const r=this.doc;null!==r?Oe(r,(r=>{const i=un(r,this,t);null!==i.right&&yn(r,this,i,e,n)})):this._pending.push((()=>this.format(t,e,n)))}removeAttribute(t){null!==this.doc?Oe(this.doc,(e=>{Ge(e,this,t)})):this._pending.push((()=>this.removeAttribute(t)))}setAttribute(t,e){null!==this.doc?Oe(this.doc,(n=>{Ze(n,this,t,e)})):this._pending.push((()=>this.setAttribute(t,e)))}getAttribute(t){return Qe(this,t)}getAttributes(t){return tn(this)}_write(t){t.writeTypeRef(Bn)}}class kn{constructor(t,e=(()=>!0)){this._filter=e,this._root=t,this._currentNode=t._start,this._firstCall=!0}[Symbol.iterator](){return this}next(){let t=this._currentNode,e=t&&t.content&&t.content.type;if(null!==t&&(!this._firstCall||t.deleted||!this._filter(e)))do{if(e=t.content.type,t.deleted||e.constructor!==_n&&e.constructor!==Sn||null===e._start)for(;null!==t;){if(null!==t.right){t=t.right;break}t=t.parent===this._root?null:t.parent._item}else t=e._start}while(null!==t&&(t.deleted||!this._filter(t.content.type)));return this._firstCall=!1,null===t?{value:void 0,done:!0}:(this._currentNode=t,{value:t.content.type,done:!1})}}class Sn extends $e{constructor(){super(),this._prelimContent=[]}get firstChild(){const t=this._first;return t?t.content.getContent()[0]:null}_integrate(t,e){super._integrate(t,e),this.insert(0,this._prelimContent),this._prelimContent=null}_copy(){return new Sn}clone(){const t=new Sn;return t.insert(0,this.toArray().map((t=>t instanceof $e?t.clone():t))),t}get length(){return null===this._prelimContent?this._length:this._prelimContent.length}createTreeWalker(t){return new kn(this,t)}querySelector(t){t=t.toUpperCase();const e=new kn(this,(e=>e.nodeName&&e.nodeName.toUpperCase()===t)).next();return e.done?null:e.value}querySelectorAll(t){return t=t.toUpperCase(),Array.from(new kn(this,(e=>e.nodeName&&e.nodeName.toUpperCase()===t)))}_callObserver(t,e){Fe(this,t,new En(this,e,t))}toString(){return qe(this,(t=>t.toString())).join("")}toJSON(){return this.toString()}toDOM(t=document,e={},n){const r=t.createDocumentFragment();return void 0!==n&&n._createAssociation(r,this),Ve(this,(i=>{r.insertBefore(i.toDOM(t,e,n),null)})),r}insert(t,e){null!==this.doc?Oe(this.doc,(n=>{Xe(n,this,t,e)})):this._prelimContent.splice(t,0,...e)}insertAfter(t,e){if(null!==this.doc)Oe(this.doc,(n=>{const r=t&&t instanceof $e?t._item:t;Ye(n,this,r,e)}));else{const n=this._prelimContent,r=null===t?0:n.findIndex((e=>e===t))+1;if(0===r&&null!==t)throw st("Reference item not found");n.splice(r,0,...e)}}delete(t,e=1){null!==this.doc?Oe(this.doc,(n=>{Ke(n,this,t,e)})):this._prelimContent.splice(t,e)}toArray(){return He(this)}push(t){this.insert(this.length,t)}unshift(t){this.insert(0,t)}get(t){return Ue(this,t)}slice(t=0,e=this.length){return Le(this,t,e)}forEach(t){Ve(this,t)}_write(t){t.writeTypeRef($n)}}class _n extends Sn{constructor(t="UNDEFINED"){super(),this.nodeName=t,this._prelimAttrs=new Map}get nextSibling(){const t=this._item?this._item.next:null;return t?t.content.type:null}get prevSibling(){const t=this._item?this._item.prev:null;return t?t.content.type:null}_integrate(t,e){super._integrate(t,e),this._prelimAttrs.forEach(((t,e)=>{this.setAttribute(e,t)})),this._prelimAttrs=null}_copy(){return new _n(this.nodeName)}clone(){const t=new _n(this.nodeName),e=this.getAttributes();for(const n in e)t.setAttribute(n,e[n]);return t.insert(0,this.toArray().map((t=>t instanceof $e?t.clone():t))),t}toString(){const t=this.getAttributes(),e=[],n=[];for(const e in t)n.push(e);n.sort();const r=n.length;for(let i=0;i<r;i++){const r=n[i];e.push(r+'="'+t[r]+'"')}const i=this.nodeName.toLocaleLowerCase();return`<${i}${e.length>0?" "+e.join(" "):""}>${super.toString()}</${i}>`}removeAttribute(t){null!==this.doc?Oe(this.doc,(e=>{Ge(e,this,t)})):this._prelimAttrs.delete(t)}setAttribute(t,e){null!==this.doc?Oe(this.doc,(n=>{Ze(n,this,t,e)})):this._prelimAttrs.set(t,e)}getAttribute(t){return Qe(this,t)}hasAttribute(t){return en(this,t)}getAttributes(t){return tn(this)}toDOM(t=document,e={},n){const r=t.createElement(this.nodeName),i=this.getAttributes();for(const t in i)r.setAttribute(t,i[t]);return Ve(this,(i=>{r.appendChild(i.toDOM(t,e,n))})),void 0!==n&&n._createAssociation(r,this),r}_write(t){t.writeTypeRef(Fn),t.writeKey(this.nodeName)}}class En extends De{constructor(t,e,n){super(t,n),this.childListChanged=!1,this.attributesChanged=new Set,e.forEach((t=>{null===t?this.childListChanged=!0:this.attributesChanged.add(t)}))}}class Cn{constructor(t,e){this.id=t,this.length=e}get deleted(){throw at()}mergeWith(t){return!1}write(t,e,n){throw at()}integrate(t,e){throw at()}}class On extends Cn{get deleted(){return!0}delete(){}mergeWith(t){return this.constructor===t.constructor&&(this.length+=t.length,!0)}integrate(t,e){e>0&&(this.id.clock+=e,this.length-=e),pe(t.doc.store,this)}write(t,e){t.writeInfo(0),t.writeLen(this.length-e)}getMissing(t,e){return null}}class Mn{constructor(t){this.content=t}getLength(){return 1}getContent(){return[this.content]}isCountable(){return!0}copy(){return new Mn(this.content)}splice(t){throw at()}mergeWith(t){return!1}integrate(t,e){}delete(t){}gc(t){}write(t,e){t.writeBuf(this.content)}getRef(){return 3}}class An{constructor(t){this.len=t}getLength(){return this.len}getContent(){return[]}isCountable(){return!1}copy(){return new An(this.len)}splice(t){const e=new An(this.len-t);return this.len=t,e}mergeWith(t){return this.len+=t.len,!0}integrate(t,e){$t(t.deleteSet,e.id.client,e.id.clock,this.len),e.markDeleted()}delete(t){}gc(t){}write(t,e){t.writeLen(this.len-e)}getRef(){return 1}}const Tn=(t,e)=>new qt({guid:t,...e,shouldLoad:e.shouldLoad||e.autoLoad||!1});class Nn{constructor(t){t._item&&console.error("This document was already integrated as a sub-document. You should create a second instance instead with the same guid."),this.doc=t;const e={};this.opts=e,t.gc||(e.gc=!1),t.autoLoad&&(e.autoLoad=!0),null!==t.meta&&(e.meta=t.meta)}getLength(){return 1}getContent(){return[this.doc]}isCountable(){return!0}copy(){return new Nn(Tn(this.doc.guid,this.opts))}splice(t){throw at()}mergeWith(t){return!1}integrate(t,e){this.doc._item=e,t.subdocsAdded.add(this.doc),this.doc.shouldLoad&&t.subdocsLoaded.add(this.doc)}delete(t){t.subdocsAdded.has(this.doc)?t.subdocsAdded.delete(this.doc):t.subdocsRemoved.add(this.doc)}gc(t){}write(t,e){t.writeString(this.doc.guid),t.writeAny(this.opts)}getRef(){return 9}}class Dn{constructor(t){this.embed=t}getLength(){return 1}getContent(){return[this.embed]}isCountable(){return!0}copy(){return new Dn(this.embed)}splice(t){throw at()}mergeWith(t){return!1}integrate(t,e){}delete(t){}gc(t){}write(t,e){t.writeJSON(this.embed)}getRef(){return 5}}class jn{constructor(t,e){this.key=t,this.value=e}getLength(){return 1}getContent(){return[]}isCountable(){return!1}copy(){return new jn(this.key,this.value)}splice(t){throw at()}mergeWith(t){return!1}integrate(t,e){e.parent._searchMarker=null}delete(t){}gc(t){}write(t,e){t.writeKey(this.key),t.writeJSON(this.value)}getRef(){return 6}}class Rn{constructor(t){this.arr=t}getLength(){return this.arr.length}getContent(){return this.arr}isCountable(){return!0}copy(){return new Rn(this.arr)}splice(t){const e=new Rn(this.arr.slice(t));return this.arr=this.arr.slice(0,t),e}mergeWith(t){return this.arr=this.arr.concat(t.arr),!0}integrate(t,e){}delete(t){}gc(t){}write(t,e){const n=this.arr.length;t.writeLen(n-e);for(let r=e;r<n;r++){const e=this.arr[r];t.writeAny(e)}}getRef(){return 8}}class Pn{constructor(t){this.str=t}getLength(){return this.str.length}getContent(){return this.str.split("")}isCountable(){return!0}copy(){return new Pn(this.str)}splice(t){const e=new Pn(this.str.slice(t));this.str=this.str.slice(0,t);const n=this.str.charCodeAt(t-1);return n>=55296&&n<=56319&&(this.str=this.str.slice(0,t-1)+"�",e.str="�"+e.str.slice(1)),e}mergeWith(t){return this.str+=t.str,!0}integrate(t,e){}delete(t){}gc(t){}write(t,e){t.writeString(0===e?this.str:this.str.slice(e))}getRef(){return 4}}const zn=0,In=1,Bn=2,Fn=3,$n=4;class Ln{constructor(t){this.type=t}getLength(){return 1}getContent(){return[this.type]}isCountable(){return!0}copy(){return new Ln(this.type._copy())}splice(t){throw at()}mergeWith(t){return!1}integrate(t,e){this.type._integrate(t.doc,e)}delete(t){let e=this.type._start;for(;null!==e;)e.deleted?t._mergeStructs.push(e):e.delete(t),e=e.right;this.type._map.forEach((e=>{e.deleted?t._mergeStructs.push(e):e.delete(t)})),t.changed.delete(this.type)}gc(t){let e=this.type._start;for(;null!==e;)e.gc(t,!0),e=e.right;this.type._start=null,this.type._map.forEach((e=>{for(;null!==e;)e.gc(t,!0),e=e.left})),this.type._map=new Map}write(t,e){this.type._write(t)}getRef(){return 7}}const Hn=(t,e)=>{let n,r=e,i=0;do{i>0&&(r=re(r.client,r.clock+i)),n=ge(t,r),i=r.clock-n.id.clock,r=n.redone}while(null!==r&&n instanceof Un);return{item:n,diff:i}},Vn=(t,e)=>{for(;null!==t&&t.keep!==e;)t.keep=e,t=t.parent._item},qn=(t,e,n)=>{const{client:r,clock:i}=e.id,o=new Un(re(r,i+n),e,re(r,i+n-1),e.right,e.rightOrigin,e.parent,e.parentSub,e.content.splice(n));return e.deleted&&o.markDeleted(),e.keep&&(o.keep=!0),null!==e.redone&&(o.redone=re(e.redone.client,e.redone.clock+n)),e.right=o,null!==o.right&&(o.right.left=o),t._mergeStructs.push(o),null!==o.parentSub&&null===o.right&&o.parent._map.set(o.parentSub,o),e.length=n,o},Wn=(t,e,n,r,i)=>{const o=t.doc,s=o.store,a=o.clientID,l=e.redone;if(null!==l)return ye(t,l);let c,h=e.parent._item,u=null;if(null!==h&&!0===h.deleted){if(null===h.redone&&(!n.has(h)||null===Wn(t,h,n,r,i)))return null;for(;null!==h.redone;)h=ye(t,h.redone)}const d=null===h?e.parent:h.content.type;if(null===e.parentSub){for(u=e.left,c=e;null!==u;){let e=u;for(;null!==e&&e.parent._item!==h;)e=null===e.redone?null:ye(t,e.redone);if(null!==e&&e.parent._item===h){u=e;break}u=u.left}for(;null!==c;){let e=c;for(;null!==e&&e.parent._item!==h;)e=null===e.redone?null:ye(t,e.redone);if(null!==e&&e.parent._item===h){c=e;break}c=c.right}}else if(c=null,e.right&&!i){for(u=e;null!==u&&null!==u.right&&It(r,u.right.id);)u=u.right;for(;null!==u&&null!==u.redone;)u=ye(t,u.redone);if(null===u||u.parent._item!==h)return null;if(u&&null!==u.right)return null}else u=d._map.get(e.parentSub)||null;const p=de(s,a),f=re(a,p),g=new Un(f,u,u&&u.lastId,c,c&&c.id,d,e.parentSub,e.content.copy());return e.redone=f,Vn(g,!0),g.integrate(t,0),g};class Un extends Cn{constructor(t,e,n,r,i,o,s,a){super(t,a.getLength()),this.origin=n,this.left=e,this.right=r,this.rightOrigin=i,this.parent=o,this.parentSub=s,this.redone=null,this.content=a,this.info=this.content.isCountable()?2:0}set marker(t){(8&this.info)>0!==t&&(this.info^=8)}get marker(){return(8&this.info)>0}get keep(){return(1&this.info)>0}set keep(t){this.keep!==t&&(this.info^=1)}get countable(){return(2&this.info)>0}get deleted(){return(4&this.info)>0}set deleted(t){this.deleted!==t&&(this.info^=4)}markDeleted(){this.info|=4}getMissing(t,e){if(this.origin&&this.origin.client!==this.id.client&&this.origin.clock>=de(e,this.origin.client))return this.origin.client;if(this.rightOrigin&&this.rightOrigin.client!==this.id.client&&this.rightOrigin.clock>=de(e,this.rightOrigin.client))return this.rightOrigin.client;if(this.parent&&this.parent.constructor===ee&&this.id.client!==this.parent.client&&this.parent.clock>=de(e,this.parent.client))return this.parent.client;if(this.origin&&(this.left=ve(t,e,this.origin),this.origin=this.left.lastId),this.rightOrigin&&(this.right=ye(t,this.rightOrigin),this.rightOrigin=this.right.id),(this.left&&this.left.constructor===On||this.right&&this.right.constructor===On)&&(this.parent=null),this.parent){if(this.parent.constructor===ee){const t=ge(e,this.parent);t.constructor===On?this.parent=null:this.parent=t.content.type}}else this.left&&this.left.constructor===Un&&(this.parent=this.left.parent,this.parentSub=this.left.parentSub),this.right&&this.right.constructor===Un&&(this.parent=this.right.parent,this.parentSub=this.right.parentSub);return null}integrate(t,e){if(e>0&&(this.id.clock+=e,this.left=ve(t,t.doc.store,re(this.id.client,this.id.clock-1)),this.origin=this.left.lastId,this.content=this.content.splice(e),this.length-=e),this.parent){if(!this.left&&(!this.right||null!==this.right.left)||this.left&&this.left.right!==this.right){let e,n=this.left;if(null!==n)e=n.right;else if(null!==this.parentSub)for(e=this.parent._map.get(this.parentSub)||null;null!==e&&null!==e.left;)e=e.left;else e=this.parent._start;const r=new Set,i=new Set;for(;null!==e&&e!==this.right;){if(i.add(e),r.add(e),ne(this.origin,e.origin)){if(e.id.client<this.id.client)n=e,r.clear();else if(ne(this.rightOrigin,e.rightOrigin))break}else{if(null===e.origin||!i.has(ge(t.doc.store,e.origin)))break;r.has(ge(t.doc.store,e.origin))||(n=e,r.clear())}e=e.right}this.left=n}if(null!==this.left){const t=this.left.right;this.right=t,this.left.right=this}else{let t;if(null!==this.parentSub)for(t=this.parent._map.get(this.parentSub)||null;null!==t&&null!==t.left;)t=t.left;else t=this.parent._start,this.parent._start=this;this.right=t}null!==this.right?this.right.left=this:null!==this.parentSub&&(this.parent._map.set(this.parentSub,this),null!==this.left&&this.left.delete(t)),null===this.parentSub&&this.countable&&!this.deleted&&(this.parent._length+=this.length),pe(t.doc.store,this),this.content.integrate(t,this),ke(t,this.parent,this.parentSub),(null!==this.parent._item&&this.parent._item.deleted||null!==this.parentSub&&null!==this.right)&&this.delete(t)}else new On(this.id,this.length).integrate(t,0)}get next(){let t=this.right;for(;null!==t&&t.deleted;)t=t.right;return t}get prev(){let t=this.left;for(;null!==t&&t.deleted;)t=t.left;return t}get lastId(){return 1===this.length?this.id:re(this.id.client,this.id.clock+this.length-1)}mergeWith(t){if(this.constructor===t.constructor&&ne(t.origin,this.lastId)&&this.right===t&&ne(this.rightOrigin,t.rightOrigin)&&this.id.client===t.id.client&&this.id.clock+this.length===t.id.clock&&this.deleted===t.deleted&&null===this.redone&&null===t.redone&&this.content.constructor===t.content.constructor&&this.content.mergeWith(t.content)){const e=this.parent._searchMarker;return e&&e.forEach((e=>{e.p===t&&(e.p=this,!this.deleted&&this.countable&&(e.index-=this.length))})),t.keep&&(this.keep=!0),this.right=t.right,null!==this.right&&(this.right.left=this),this.length+=t.length,!0}return!1}delete(t){if(!this.deleted){const e=this.parent;this.countable&&null===this.parentSub&&(e._length-=this.length),this.markDeleted(),$t(t.deleteSet,this.id.client,this.id.clock,this.length),ke(t,e,this.parentSub),this.content.delete(t)}}gc(t,e){if(!this.deleted)throw lt();this.content.gc(t),e?((t,e,n)=>{const r=t.clients.get(e.id.client);r[fe(r,e.id.clock)]=n})(t,this,new On(this.id,this.length)):this.content=new An(this.length)}write(t,e){const n=e>0?re(this.id.client,this.id.clock+e-1):this.origin,r=this.rightOrigin,i=this.parentSub,o=31&this.content.getRef()|(null===n?0:N)|(null===r?0:64)|(null===i?0:32);if(t.writeInfo(o),null!==n&&t.writeLeftID(n),null!==r&&t.writeRightID(r),null===n&&null===r){const e=this.parent;if(void 0!==e._item){const n=e._item;if(null===n){const n=ie(e);t.writeParentInfo(!0),t.writeString(n)}else t.writeParentInfo(!1),t.writeLeftID(n.id)}else e.constructor===String?(t.writeParentInfo(!0),t.writeString(e)):e.constructor===ee?(t.writeParentInfo(!1),t.writeLeftID(e)):lt();null!==i&&t.writeString(i)}this.content.write(t,e)}}const Yn="undefined"!=typeof window?window:"undefined"!=typeof global?global:{};!0===Yn["__ $YJS$ __"]&&console.error("Yjs was already imported. This breaks constructor checks and will lead to isssues!"),Yn["__ $YJS$ __"]=!0}},i={};function o(t){var e=i[t];if(void 0!==e)return e.exports;var n=i[t]={id:t,loaded:!1,exports:{}};return r[t].call(n.exports,n,n.exports,o),n.loaded=!0,n.exports}o.m=r,t=[],o.O=(e,n,r,i)=>{if(!n){var s=1/0;for(h=0;h<t.length;h++){for(var[n,r,i]=t[h],a=!0,l=0;l<n.length;l++)(!1&i||s>=i)&&Object.keys(o.O).every((t=>o.O[t](n[l])))?n.splice(l--,1):(a=!1,i<s&&(s=i));if(a){t.splice(h--,1);var c=r();void 0!==c&&(e=c)}}return e}i=i||0;for(var h=t.length;h>0&&t[h-1][2]>i;h--)t[h]=t[h-1];t[h]=[n,r,i]},o.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return o.d(e,{a:e}),e},n=Object.getPrototypeOf?t=>Object.getPrototypeOf(t):t=>t.__proto__,o.t=function(t,r){if(1&r&&(t=this(t)),8&r)return t;if("object"==typeof t&&t){if(4&r&&t.__esModule)return t;if(16&r&&"function"==typeof t.then)return t}var i=Object.create(null);o.r(i);var s={};e=e||[null,n({}),n([]),n(n)];for(var a=2&r&&t;"object"==typeof a&&!~e.indexOf(a);a=n(a))Object.getOwnPropertyNames(a).forEach((e=>s[e]=()=>t[e]));return s.default=()=>t,o.d(i,s),i},o.d=(t,e)=>{for(var n in e)o.o(e,n)&&!o.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),o.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),o.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},o.nmd=t=>(t.paths=[],t.children||(t.children=[]),t),(()=>{var t={592:0};o.O.j=e=>0===t[e];var e=(e,n)=>{var r,i,[s,a,l]=n,c=0;if(s.some((e=>0!==t[e]))){for(r in a)o.o(a,r)&&(o.m[r]=a[r]);if(l)var h=l(o)}for(e&&e(n);c<s.length;c++)i=s[c],o.o(t,i)&&t[i]&&t[i][0](),t[i]=0;return o.O(h)},n=self.webpackChunkmindmap=self.webpackChunkmindmap||[];n.forEach(e.bind(null,0)),n.push=e.bind(null,n.push.bind(n))})(),o(5290),o(8575),o(5371),o(1949);var s=o(3565);s=o.O(s)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,