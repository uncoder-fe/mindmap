"use strict";(self.webpackChunkmindmap=self.webpackChunkmindmap||[]).push([[592],{70597:(t,n,e)=>{var r,i=Object.assign||function(t){for(var n=1;n<arguments.length;n++){var e=arguments[n];for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])}return t},o=(r=e(67294))&&r.__esModule?r:{default:r};n.Z=function(t){var n=t.fill,e=void 0===n?"currentColor":n,r=t.width,s=void 0===r?24:r,u=t.height,a=void 0===u?24:u,c=t.style,l=void 0===c?{}:c,h=function(t,n){var e={};for(var r in t)n.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}(t,["fill","width","height","style"]);return o.default.createElement("svg",i({viewBox:"0 0 24 24",style:i({fill:e,width:s,height:a},l)},h),o.default.createElement("path",{d:"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"}))}},43891:(t,n,e)=>{var r,i=Object.assign||function(t){for(var n=1;n<arguments.length;n++){var e=arguments[n];for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])}return t},o=(r=e(67294))&&r.__esModule?r:{default:r};n.Z=function(t){var n=t.fill,e=void 0===n?"currentColor":n,r=t.width,s=void 0===r?24:r,u=t.height,a=void 0===u?24:u,c=t.style,l=void 0===c?{}:c,h=function(t,n){var e={};for(var r in t)n.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}(t,["fill","width","height","style"]);return o.default.createElement("svg",i({viewBox:"0 0 24 24",style:i({fill:e,width:s,height:a},l)},h),o.default.createElement("path",{d:"M12,18.17L8.83,15L7.42,16.41L12,21L16.59,16.41L15.17,15M12,5.83L15.17,9L16.58,7.59L12,3L7.41,7.59L8.83,9L12,5.83Z"}))}},25290:(t,n,e)=>{function r(){}function i(t){return null==t?r:function(){return this.querySelector(t)}}function o(t){return null==t?[]:Array.isArray(t)?t:Array.from(t)}function s(){return[]}function u(t){return null==t?s:function(){return this.querySelectorAll(t)}}function a(t){return function(){return this.matches(t)}}function c(t){return function(n){return n.matches(t)}}e.d(n,{Ue8:()=>We,ohM:()=>Ye,jvg:()=>rr,ETc:()=>Ze,daD:()=>Ke,Ys:()=>$e});var l=Array.prototype.find;function h(){return this.firstElementChild}var f=Array.prototype.filter;function p(){return Array.from(this.children)}function d(t){return new Array(t.length)}function g(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}function y(t){return function(){return t}}function v(t,n,e,r,i,o){for(var s,u=0,a=n.length,c=o.length;u<c;++u)(s=n[u])?(s.__data__=o[u],r[u]=s):e[u]=new g(t,o[u]);for(;u<a;++u)(s=n[u])&&(i[u]=s)}function _(t,n,e,r,i,o,s){var u,a,c,l=new Map,h=n.length,f=o.length,p=new Array(h);for(u=0;u<h;++u)(a=n[u])&&(p[u]=c=s.call(a,a.__data__,u,n)+"",l.has(c)?i[u]=a:l.set(c,a));for(u=0;u<f;++u)c=s.call(t,o[u],u,o)+"",(a=l.get(c))?(r[u]=a,a.__data__=o[u],l.delete(c)):e[u]=new g(t,o[u]);for(u=0;u<h;++u)(a=n[u])&&l.get(p[u])===a&&(i[u]=a)}function m(t){return t.__data__}function w(t){return"object"==typeof t&&"length"in t?t:Array.from(t)}function b(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}g.prototype={constructor:g,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var x="http://www.w3.org/1999/xhtml";const A={svg:"http://www.w3.org/2000/svg",xhtml:x,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function E(t){var n=t+="",e=n.indexOf(":");return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),A.hasOwnProperty(n)?{space:A[n],local:t}:t}function M(t){return function(){this.removeAttribute(t)}}function N(t){return function(){this.removeAttributeNS(t.space,t.local)}}function k(t,n){return function(){this.setAttribute(t,n)}}function S(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}function $(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}}function T(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}}function O(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}function U(t){return function(){this.style.removeProperty(t)}}function C(t,n,e){return function(){this.style.setProperty(t,n,e)}}function j(t,n,e){return function(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,e)}}function P(t,n){return t.style.getPropertyValue(n)||O(t).getComputedStyle(t,null).getPropertyValue(n)}function L(t){return function(){delete this[t]}}function D(t,n){return function(){this[t]=n}}function I(t,n){return function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}}function R(t){return t.trim().split(/^|\s+/)}function X(t){return t.classList||new q(t)}function q(t){this._node=t,this._names=R(t.getAttribute("class")||"")}function Y(t,n){for(var e=X(t),r=-1,i=n.length;++r<i;)e.add(n[r])}function B(t,n){for(var e=X(t),r=-1,i=n.length;++r<i;)e.remove(n[r])}function F(t){return function(){Y(this,t)}}function G(t){return function(){B(this,t)}}function V(t,n){return function(){(n.apply(this,arguments)?Y:B)(this,t)}}function H(){this.textContent=""}function z(t){return function(){this.textContent=t}}function Z(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}function W(){this.innerHTML=""}function K(t){return function(){this.innerHTML=t}}function J(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}function Q(){this.nextSibling&&this.parentNode.appendChild(this)}function tt(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function nt(t){return function(){var n=this.ownerDocument,e=this.namespaceURI;return e===x&&n.documentElement.namespaceURI===x?n.createElement(t):n.createElementNS(e,t)}}function et(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}function rt(t){var n=E(t);return(n.local?et:nt)(n)}function it(){return null}function ot(){var t=this.parentNode;t&&t.removeChild(this)}function st(){var t=this.cloneNode(!1),n=this.parentNode;return n?n.insertBefore(t,this.nextSibling):t}function ut(){var t=this.cloneNode(!0),n=this.parentNode;return n?n.insertBefore(t,this.nextSibling):t}function at(t){return t.trim().split(/^|\s+/).map((function(t){var n="",e=t.indexOf(".");return e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}}))}function ct(t){return function(){var n=this.__on;if(n){for(var e,r=0,i=-1,o=n.length;r<o;++r)e=n[r],t.type&&e.type!==t.type||e.name!==t.name?n[++i]=e:this.removeEventListener(e.type,e.listener,e.options);++i?n.length=i:delete this.__on}}}function lt(t,n,e){return function(){var r,i=this.__on,o=function(t){return function(n){t.call(this,n,this.__data__)}}(n);if(i)for(var s=0,u=i.length;s<u;++s)if((r=i[s]).type===t.type&&r.name===t.name)return this.removeEventListener(r.type,r.listener,r.options),this.addEventListener(r.type,r.listener=o,r.options=e),void(r.value=n);this.addEventListener(t.type,o,e),r={type:t.type,name:t.name,value:n,listener:o,options:e},i?i.push(r):this.__on=[r]}}function ht(t,n,e){var r=O(t),i=r.CustomEvent;"function"==typeof i?i=new i(n,e):(i=r.document.createEvent("Event"),e?(i.initEvent(n,e.bubbles,e.cancelable),i.detail=e.detail):i.initEvent(n,!1,!1)),t.dispatchEvent(i)}function ft(t,n){return function(){return ht(this,t,n)}}function pt(t,n){return function(){return ht(this,t,n.apply(this,arguments))}}q.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var dt=[null];function gt(t,n){this._groups=t,this._parents=n}function yt(){return new gt([[document.documentElement]],dt)}gt.prototype=yt.prototype={constructor:gt,select:function(t){"function"!=typeof t&&(t=i(t));for(var n=this._groups,e=n.length,r=new Array(e),o=0;o<e;++o)for(var s,u,a=n[o],c=a.length,l=r[o]=new Array(c),h=0;h<c;++h)(s=a[h])&&(u=t.call(s,s.__data__,h,a))&&("__data__"in s&&(u.__data__=s.__data__),l[h]=u);return new gt(r,this._parents)},selectAll:function(t){t="function"==typeof t?function(t){return function(){return o(t.apply(this,arguments))}}(t):u(t);for(var n=this._groups,e=n.length,r=[],i=[],s=0;s<e;++s)for(var a,c=n[s],l=c.length,h=0;h<l;++h)(a=c[h])&&(r.push(t.call(a,a.__data__,h,c)),i.push(a));return new gt(r,i)},selectChild:function(t){return this.select(null==t?h:function(t){return function(){return l.call(this.children,t)}}("function"==typeof t?t:c(t)))},selectChildren:function(t){return this.selectAll(null==t?p:function(t){return function(){return f.call(this.children,t)}}("function"==typeof t?t:c(t)))},filter:function(t){"function"!=typeof t&&(t=a(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,s=n[i],u=s.length,c=r[i]=[],l=0;l<u;++l)(o=s[l])&&t.call(o,o.__data__,l,s)&&c.push(o);return new gt(r,this._parents)},data:function(t,n){if(!arguments.length)return Array.from(this,m);var e=n?_:v,r=this._parents,i=this._groups;"function"!=typeof t&&(t=y(t));for(var o=i.length,s=new Array(o),u=new Array(o),a=new Array(o),c=0;c<o;++c){var l=r[c],h=i[c],f=h.length,p=w(t.call(l,l&&l.__data__,c,r)),d=p.length,g=u[c]=new Array(d),b=s[c]=new Array(d),x=a[c]=new Array(f);e(l,h,g,b,x,p,n);for(var A,E,M=0,N=0;M<d;++M)if(A=g[M]){for(M>=N&&(N=M+1);!(E=b[N])&&++N<d;);A._next=E||null}}return(s=new gt(s,r))._enter=u,s._exit=a,s},enter:function(){return new gt(this._enter||this._groups.map(d),this._parents)},exit:function(){return new gt(this._exit||this._groups.map(d),this._parents)},join:function(t,n,e){var r=this.enter(),i=this,o=this.exit();return"function"==typeof t?(r=t(r))&&(r=r.selection()):r=r.append(t+""),null!=n&&(i=n(i))&&(i=i.selection()),null==e?o.remove():e(o),r&&i?r.merge(i).order():i},merge:function(t){for(var n=t.selection?t.selection():t,e=this._groups,r=n._groups,i=e.length,o=r.length,s=Math.min(i,o),u=new Array(i),a=0;a<s;++a)for(var c,l=e[a],h=r[a],f=l.length,p=u[a]=new Array(f),d=0;d<f;++d)(c=l[d]||h[d])&&(p[d]=c);for(;a<i;++a)u[a]=e[a];return new gt(u,this._parents)},selection:function(){return this},order:function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var r,i=t[n],o=i.length-1,s=i[o];--o>=0;)(r=i[o])&&(s&&4^r.compareDocumentPosition(s)&&s.parentNode.insertBefore(r,s),s=r);return this},sort:function(t){function n(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}t||(t=b);for(var e=this._groups,r=e.length,i=new Array(r),o=0;o<r;++o){for(var s,u=e[o],a=u.length,c=i[o]=new Array(a),l=0;l<a;++l)(s=u[l])&&(c[l]=s);c.sort(n)}return new gt(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){return Array.from(this)},node:function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r=t[n],i=0,o=r.length;i<o;++i){var s=r[i];if(s)return s}return null},size:function(){let t=0;for(const n of this)++t;return t},empty:function(){return!this.node()},each:function(t){for(var n=this._groups,e=0,r=n.length;e<r;++e)for(var i,o=n[e],s=0,u=o.length;s<u;++s)(i=o[s])&&t.call(i,i.__data__,s,o);return this},attr:function(t,n){var e=E(t);if(arguments.length<2){var r=this.node();return e.local?r.getAttributeNS(e.space,e.local):r.getAttribute(e)}return this.each((null==n?e.local?N:M:"function"==typeof n?e.local?T:$:e.local?S:k)(e,n))},style:function(t,n,e){return arguments.length>1?this.each((null==n?U:"function"==typeof n?j:C)(t,n,null==e?"":e)):P(this.node(),t)},property:function(t,n){return arguments.length>1?this.each((null==n?L:"function"==typeof n?I:D)(t,n)):this.node()[t]},classed:function(t,n){var e=R(t+"");if(arguments.length<2){for(var r=X(this.node()),i=-1,o=e.length;++i<o;)if(!r.contains(e[i]))return!1;return!0}return this.each(("function"==typeof n?V:n?F:G)(e,n))},text:function(t){return arguments.length?this.each(null==t?H:("function"==typeof t?Z:z)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?W:("function"==typeof t?J:K)(t)):this.node().innerHTML},raise:function(){return this.each(Q)},lower:function(){return this.each(tt)},append:function(t){var n="function"==typeof t?t:rt(t);return this.select((function(){return this.appendChild(n.apply(this,arguments))}))},insert:function(t,n){var e="function"==typeof t?t:rt(t),r=null==n?it:"function"==typeof n?n:i(n);return this.select((function(){return this.insertBefore(e.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(ot)},clone:function(t){return this.select(t?ut:st)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,n,e){var r,i,o=at(t+""),s=o.length;if(!(arguments.length<2)){for(u=n?lt:ct,r=0;r<s;++r)this.each(u(o[r],n,e));return this}var u=this.node().__on;if(u)for(var a,c=0,l=u.length;c<l;++c)for(r=0,a=u[c];r<s;++r)if((i=o[r]).type===a.type&&i.name===a.name)return a.value},dispatch:function(t,n){return this.each(("function"==typeof n?pt:ft)(t,n))},[Symbol.iterator]:function*(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r,i=t[n],o=0,s=i.length;o<s;++o)(r=i[o])&&(yield r)}};const vt=yt;var _t={value:()=>{}};function mt(){for(var t,n=0,e=arguments.length,r={};n<e;++n){if(!(t=arguments[n]+"")||t in r||/[\s.]/.test(t))throw new Error("illegal type: "+t);r[t]=[]}return new wt(r)}function wt(t){this._=t}function bt(t,n){return t.trim().split(/^|\s+/).map((function(t){var e="",r=t.indexOf(".");if(r>=0&&(e=t.slice(r+1),t=t.slice(0,r)),t&&!n.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}}))}function xt(t,n){for(var e,r=0,i=t.length;r<i;++r)if((e=t[r]).name===n)return e.value}function At(t,n,e){for(var r=0,i=t.length;r<i;++r)if(t[r].name===n){t[r]=_t,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=e&&t.push({name:n,value:e}),t}wt.prototype=mt.prototype={constructor:wt,on:function(t,n){var e,r=this._,i=bt(t+"",r),o=-1,s=i.length;if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++o<s;)if(e=(t=i[o]).type)r[e]=At(r[e],t.name,n);else if(null==n)for(e in r)r[e]=At(r[e],t.name,null);return this}for(;++o<s;)if((e=(t=i[o]).type)&&(e=xt(r[e],t.name)))return e},copy:function(){var t={},n=this._;for(var e in n)t[e]=n[e].slice();return new wt(t)},call:function(t,n){if((e=arguments.length-2)>0)for(var e,r,i=new Array(e),o=0;o<e;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,e=(r=this._[t]).length;o<e;++o)r[o].value.apply(n,i)},apply:function(t,n,e){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(n,e)}};const Et=mt;var Mt,Nt,kt=0,St=0,$t=0,Tt=0,Ot=0,Ut=0,Ct="object"==typeof performance&&performance.now?performance:Date,jt="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function Pt(){return Ot||(jt(Lt),Ot=Ct.now()+Ut)}function Lt(){Ot=0}function Dt(){this._call=this._time=this._next=null}function It(t,n,e){var r=new Dt;return r.restart(t,n,e),r}function Rt(){Ot=(Tt=Ct.now())+Ut,kt=St=0;try{!function(){Pt(),++kt;for(var t,n=Mt;n;)(t=Ot-n._time)>=0&&n._call.call(void 0,t),n=n._next;--kt}()}finally{kt=0,function(){for(var t,n,e=Mt,r=1/0;e;)e._call?(r>e._time&&(r=e._time),t=e,e=e._next):(n=e._next,e._next=null,e=t?t._next=n:Mt=n);Nt=t,qt(r)}(),Ot=0}}function Xt(){var t=Ct.now(),n=t-Tt;n>1e3&&(Ut-=n,Tt=t)}function qt(t){kt||(St&&(St=clearTimeout(St)),t-Ot>24?(t<1/0&&(St=setTimeout(Rt,t-Ct.now()-Ut)),$t&&($t=clearInterval($t))):($t||(Tt=Ct.now(),$t=setInterval(Xt,1e3)),kt=1,jt(Rt)))}function Yt(t,n,e){var r=new Dt;return n=null==n?0:+n,r.restart((e=>{r.stop(),t(e+n)}),n,e),r}Dt.prototype=It.prototype={constructor:Dt,restart:function(t,n,e){if("function"!=typeof t)throw new TypeError("callback is not a function");e=(null==e?Pt():+e)+(null==n?0:+n),this._next||Nt===this||(Nt?Nt._next=this:Mt=this,Nt=this),this._call=t,this._time=e,qt()},stop:function(){this._call&&(this._call=null,this._time=1/0,qt())}};var Bt=Et("start","end","cancel","interrupt"),Ft=[];function Gt(t,n,e,r,i,o){var s=t.__transition;if(s){if(e in s)return}else t.__transition={};!function(t,n,e){var r,i=t.__transition;function o(a){var c,l,h,f;if(1!==e.state)return u();for(c in i)if((f=i[c]).name===e.name){if(3===f.state)return Yt(o);4===f.state?(f.state=6,f.timer.stop(),f.on.call("interrupt",t,t.__data__,f.index,f.group),delete i[c]):+c<n&&(f.state=6,f.timer.stop(),f.on.call("cancel",t,t.__data__,f.index,f.group),delete i[c])}if(Yt((function(){3===e.state&&(e.state=4,e.timer.restart(s,e.delay,e.time),s(a))})),e.state=2,e.on.call("start",t,t.__data__,e.index,e.group),2===e.state){for(e.state=3,r=new Array(h=e.tween.length),c=0,l=-1;c<h;++c)(f=e.tween[c].value.call(t,t.__data__,e.index,e.group))&&(r[++l]=f);r.length=l+1}}function s(n){for(var i=n<e.duration?e.ease.call(null,n/e.duration):(e.timer.restart(u),e.state=5,1),o=-1,s=r.length;++o<s;)r[o].call(t,i);5===e.state&&(e.on.call("end",t,t.__data__,e.index,e.group),u())}function u(){for(var r in e.state=6,e.timer.stop(),delete i[n],i)return;delete t.__transition}i[n]=e,e.timer=It((function(t){e.state=1,e.timer.restart(o,e.delay,e.time),e.delay<=t&&o(t-e.delay)}),0,e.time)}(t,e,{name:n,index:r,group:i,on:Bt,tween:Ft,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:0})}function Vt(t,n){var e=zt(t,n);if(e.state>0)throw new Error("too late; already scheduled");return e}function Ht(t,n){var e=zt(t,n);if(e.state>3)throw new Error("too late; already running");return e}function zt(t,n){var e=t.__transition;if(!e||!(e=e[n]))throw new Error("transition not found");return e}function Zt(t,n){return t=+t,n=+n,function(e){return t*(1-e)+n*e}}var Wt,Kt=180/Math.PI,Jt={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function Qt(t,n,e,r,i,o){var s,u,a;return(s=Math.sqrt(t*t+n*n))&&(t/=s,n/=s),(a=t*e+n*r)&&(e-=t*a,r-=n*a),(u=Math.sqrt(e*e+r*r))&&(e/=u,r/=u,a/=u),t*r<n*e&&(t=-t,n=-n,a=-a,s=-s),{translateX:i,translateY:o,rotate:Math.atan2(n,t)*Kt,skewX:Math.atan(a)*Kt,scaleX:s,scaleY:u}}function tn(t,n,e,r){function i(t){return t.length?t.pop()+" ":""}return function(o,s){var u=[],a=[];return o=t(o),s=t(s),function(t,r,i,o,s,u){if(t!==i||r!==o){var a=s.push("translate(",null,n,null,e);u.push({i:a-4,x:Zt(t,i)},{i:a-2,x:Zt(r,o)})}else(i||o)&&s.push("translate("+i+n+o+e)}(o.translateX,o.translateY,s.translateX,s.translateY,u,a),function(t,n,e,o){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),o.push({i:e.push(i(e)+"rotate(",null,r)-2,x:Zt(t,n)})):n&&e.push(i(e)+"rotate("+n+r)}(o.rotate,s.rotate,u,a),function(t,n,e,o){t!==n?o.push({i:e.push(i(e)+"skewX(",null,r)-2,x:Zt(t,n)}):n&&e.push(i(e)+"skewX("+n+r)}(o.skewX,s.skewX,u,a),function(t,n,e,r,o,s){if(t!==e||n!==r){var u=o.push(i(o)+"scale(",null,",",null,")");s.push({i:u-4,x:Zt(t,e)},{i:u-2,x:Zt(n,r)})}else 1===e&&1===r||o.push(i(o)+"scale("+e+","+r+")")}(o.scaleX,o.scaleY,s.scaleX,s.scaleY,u,a),o=s=null,function(t){for(var n,e=-1,r=a.length;++e<r;)u[(n=a[e]).i]=n.x(t);return u.join("")}}}var nn=tn((function(t){const n=new("function"==typeof DOMMatrix?DOMMatrix:WebKitCSSMatrix)(t+"");return n.isIdentity?Jt:Qt(n.a,n.b,n.c,n.d,n.e,n.f)}),"px, ","px)","deg)"),en=tn((function(t){return null==t?Jt:(Wt||(Wt=document.createElementNS("http://www.w3.org/2000/svg","g")),Wt.setAttribute("transform",t),(t=Wt.transform.baseVal.consolidate())?Qt((t=t.matrix).a,t.b,t.c,t.d,t.e,t.f):Jt)}),", ",")",")");function rn(t,n){var e,r;return function(){var i=Ht(this,t),o=i.tween;if(o!==e)for(var s=0,u=(r=e=o).length;s<u;++s)if(r[s].name===n){(r=r.slice()).splice(s,1);break}i.tween=r}}function on(t,n,e){var r,i;if("function"!=typeof e)throw new Error;return function(){var o=Ht(this,t),s=o.tween;if(s!==r){i=(r=s).slice();for(var u={name:n,value:e},a=0,c=i.length;a<c;++a)if(i[a].name===n){i[a]=u;break}a===c&&i.push(u)}o.tween=i}}function sn(t,n,e){var r=t._id;return t.each((function(){var t=Ht(this,r);(t.value||(t.value={}))[n]=e.apply(this,arguments)})),function(t){return zt(t,r).value[n]}}function un(t,n,e){t.prototype=n.prototype=e,e.constructor=t}function an(t,n){var e=Object.create(t.prototype);for(var r in n)e[r]=n[r];return e}function cn(){}var ln=.7,hn=1/ln,fn="\\s*([+-]?\\d+)\\s*",pn="\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*",dn="\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*",gn=/^#([0-9a-f]{3,8})$/,yn=new RegExp(`^rgb\\(${fn},${fn},${fn}\\)$`),vn=new RegExp(`^rgb\\(${dn},${dn},${dn}\\)$`),_n=new RegExp(`^rgba\\(${fn},${fn},${fn},${pn}\\)$`),mn=new RegExp(`^rgba\\(${dn},${dn},${dn},${pn}\\)$`),wn=new RegExp(`^hsl\\(${pn},${dn},${dn}\\)$`),bn=new RegExp(`^hsla\\(${pn},${dn},${dn},${pn}\\)$`),xn={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function An(){return this.rgb().formatHex()}function En(){return this.rgb().formatRgb()}function Mn(t){var n,e;return t=(t+"").trim().toLowerCase(),(n=gn.exec(t))?(e=n[1].length,n=parseInt(n[1],16),6===e?Nn(n):3===e?new Tn(n>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1):8===e?kn(n>>24&255,n>>16&255,n>>8&255,(255&n)/255):4===e?kn(n>>12&15|n>>8&240,n>>8&15|n>>4&240,n>>4&15|240&n,((15&n)<<4|15&n)/255):null):(n=yn.exec(t))?new Tn(n[1],n[2],n[3],1):(n=vn.exec(t))?new Tn(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=_n.exec(t))?kn(n[1],n[2],n[3],n[4]):(n=mn.exec(t))?kn(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=wn.exec(t))?Ln(n[1],n[2]/100,n[3]/100,1):(n=bn.exec(t))?Ln(n[1],n[2]/100,n[3]/100,n[4]):xn.hasOwnProperty(t)?Nn(xn[t]):"transparent"===t?new Tn(NaN,NaN,NaN,0):null}function Nn(t){return new Tn(t>>16&255,t>>8&255,255&t,1)}function kn(t,n,e,r){return r<=0&&(t=n=e=NaN),new Tn(t,n,e,r)}function Sn(t){return t instanceof cn||(t=Mn(t)),t?new Tn((t=t.rgb()).r,t.g,t.b,t.opacity):new Tn}function $n(t,n,e,r){return 1===arguments.length?Sn(t):new Tn(t,n,e,null==r?1:r)}function Tn(t,n,e,r){this.r=+t,this.g=+n,this.b=+e,this.opacity=+r}function On(){return`#${Pn(this.r)}${Pn(this.g)}${Pn(this.b)}`}function Un(){const t=Cn(this.opacity);return`${1===t?"rgb(":"rgba("}${jn(this.r)}, ${jn(this.g)}, ${jn(this.b)}${1===t?")":`, ${t})`}`}function Cn(t){return isNaN(t)?1:Math.max(0,Math.min(1,t))}function jn(t){return Math.max(0,Math.min(255,Math.round(t)||0))}function Pn(t){return((t=jn(t))<16?"0":"")+t.toString(16)}function Ln(t,n,e,r){return r<=0?t=n=e=NaN:e<=0||e>=1?t=n=NaN:n<=0&&(t=NaN),new In(t,n,e,r)}function Dn(t){if(t instanceof In)return new In(t.h,t.s,t.l,t.opacity);if(t instanceof cn||(t=Mn(t)),!t)return new In;if(t instanceof In)return t;var n=(t=t.rgb()).r/255,e=t.g/255,r=t.b/255,i=Math.min(n,e,r),o=Math.max(n,e,r),s=NaN,u=o-i,a=(o+i)/2;return u?(s=n===o?(e-r)/u+6*(e<r):e===o?(r-n)/u+2:(n-e)/u+4,u/=a<.5?o+i:2-o-i,s*=60):u=a>0&&a<1?0:s,new In(s,u,a,t.opacity)}function In(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function Rn(t){return(t=(t||0)%360)<0?t+360:t}function Xn(t){return Math.max(0,Math.min(1,t||0))}function qn(t,n,e){return 255*(t<60?n+(e-n)*t/60:t<180?e:t<240?n+(e-n)*(240-t)/60:n)}function Yn(t,n,e,r,i){var o=t*t,s=o*t;return((1-3*t+3*o-s)*n+(4-6*o+3*s)*e+(1+3*t+3*o-3*s)*r+s*i)/6}un(cn,Mn,{copy(t){return Object.assign(new this.constructor,this,t)},displayable(){return this.rgb().displayable()},hex:An,formatHex:An,formatHex8:function(){return this.rgb().formatHex8()},formatHsl:function(){return Dn(this).formatHsl()},formatRgb:En,toString:En}),un(Tn,$n,an(cn,{brighter(t){return t=null==t?hn:Math.pow(hn,t),new Tn(this.r*t,this.g*t,this.b*t,this.opacity)},darker(t){return t=null==t?ln:Math.pow(ln,t),new Tn(this.r*t,this.g*t,this.b*t,this.opacity)},rgb(){return this},clamp(){return new Tn(jn(this.r),jn(this.g),jn(this.b),Cn(this.opacity))},displayable(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:On,formatHex:On,formatHex8:function(){return`#${Pn(this.r)}${Pn(this.g)}${Pn(this.b)}${Pn(255*(isNaN(this.opacity)?1:this.opacity))}`},formatRgb:Un,toString:Un})),un(In,(function(t,n,e,r){return 1===arguments.length?Dn(t):new In(t,n,e,null==r?1:r)}),an(cn,{brighter(t){return t=null==t?hn:Math.pow(hn,t),new In(this.h,this.s,this.l*t,this.opacity)},darker(t){return t=null==t?ln:Math.pow(ln,t),new In(this.h,this.s,this.l*t,this.opacity)},rgb(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,r=e+(e<.5?e:1-e)*n,i=2*e-r;return new Tn(qn(t>=240?t-240:t+120,i,r),qn(t,i,r),qn(t<120?t+240:t-120,i,r),this.opacity)},clamp(){return new In(Rn(this.h),Xn(this.s),Xn(this.l),Cn(this.opacity))},displayable(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl(){const t=Cn(this.opacity);return`${1===t?"hsl(":"hsla("}${Rn(this.h)}, ${100*Xn(this.s)}%, ${100*Xn(this.l)}%${1===t?")":`, ${t})`}`}}));const Bn=t=>()=>t;function Fn(t,n){var e=n-t;return e?function(t,n){return function(e){return t+e*n}}(t,e):Bn(isNaN(t)?n:t)}const Gn=function t(n){var e=function(t){return 1==(t=+t)?Fn:function(n,e){return e-n?function(t,n,e){return t=Math.pow(t,e),n=Math.pow(n,e)-t,e=1/e,function(r){return Math.pow(t+r*n,e)}}(n,e,t):Bn(isNaN(n)?e:n)}}(n);function r(t,n){var r=e((t=$n(t)).r,(n=$n(n)).r),i=e(t.g,n.g),o=e(t.b,n.b),s=Fn(t.opacity,n.opacity);return function(n){return t.r=r(n),t.g=i(n),t.b=o(n),t.opacity=s(n),t+""}}return r.gamma=t,r}(1);function Vn(t){return function(n){var e,r,i=n.length,o=new Array(i),s=new Array(i),u=new Array(i);for(e=0;e<i;++e)r=$n(n[e]),o[e]=r.r||0,s[e]=r.g||0,u[e]=r.b||0;return o=t(o),s=t(s),u=t(u),r.opacity=1,function(t){return r.r=o(t),r.g=s(t),r.b=u(t),r+""}}}Vn((function(t){var n=t.length-1;return function(e){var r=e<=0?e=0:e>=1?(e=1,n-1):Math.floor(e*n),i=t[r],o=t[r+1],s=r>0?t[r-1]:2*i-o,u=r<n-1?t[r+2]:2*o-i;return Yn((e-r/n)*n,s,i,o,u)}})),Vn((function(t){var n=t.length;return function(e){var r=Math.floor(((e%=1)<0?++e:e)*n),i=t[(r+n-1)%n],o=t[r%n],s=t[(r+1)%n],u=t[(r+2)%n];return Yn((e-r/n)*n,i,o,s,u)}}));var Hn=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,zn=new RegExp(Hn.source,"g");function Zn(t,n){var e,r,i,o=Hn.lastIndex=zn.lastIndex=0,s=-1,u=[],a=[];for(t+="",n+="";(e=Hn.exec(t))&&(r=zn.exec(n));)(i=r.index)>o&&(i=n.slice(o,i),u[s]?u[s]+=i:u[++s]=i),(e=e[0])===(r=r[0])?u[s]?u[s]+=r:u[++s]=r:(u[++s]=null,a.push({i:s,x:Zt(e,r)})),o=zn.lastIndex;return o<n.length&&(i=n.slice(o),u[s]?u[s]+=i:u[++s]=i),u.length<2?a[0]?function(t){return function(n){return t(n)+""}}(a[0].x):function(t){return function(){return t}}(n):(n=a.length,function(t){for(var e,r=0;r<n;++r)u[(e=a[r]).i]=e.x(t);return u.join("")})}function Wn(t,n){var e;return("number"==typeof n?Zt:n instanceof Mn?Gn:(e=Mn(n))?(n=e,Gn):Zn)(t,n)}function Kn(t){return function(){this.removeAttribute(t)}}function Jn(t){return function(){this.removeAttributeNS(t.space,t.local)}}function Qn(t,n,e){var r,i,o=e+"";return function(){var s=this.getAttribute(t);return s===o?null:s===r?i:i=n(r=s,e)}}function te(t,n,e){var r,i,o=e+"";return function(){var s=this.getAttributeNS(t.space,t.local);return s===o?null:s===r?i:i=n(r=s,e)}}function ne(t,n,e){var r,i,o;return function(){var s,u,a=e(this);if(null!=a)return(s=this.getAttribute(t))===(u=a+"")?null:s===r&&u===i?o:(i=u,o=n(r=s,a));this.removeAttribute(t)}}function ee(t,n,e){var r,i,o;return function(){var s,u,a=e(this);if(null!=a)return(s=this.getAttributeNS(t.space,t.local))===(u=a+"")?null:s===r&&u===i?o:(i=u,o=n(r=s,a));this.removeAttributeNS(t.space,t.local)}}function re(t,n){return function(e){this.setAttribute(t,n.call(this,e))}}function ie(t,n){return function(e){this.setAttributeNS(t.space,t.local,n.call(this,e))}}function oe(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&ie(t,i)),e}return i._value=n,i}function se(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&re(t,i)),e}return i._value=n,i}function ue(t,n){return function(){Vt(this,t).delay=+n.apply(this,arguments)}}function ae(t,n){return n=+n,function(){Vt(this,t).delay=n}}function ce(t,n){return function(){Ht(this,t).duration=+n.apply(this,arguments)}}function le(t,n){return n=+n,function(){Ht(this,t).duration=n}}function he(t,n){if("function"!=typeof n)throw new Error;return function(){Ht(this,t).ease=n}}function fe(t,n,e){var r,i,o=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||"start"===t}))}(n)?Vt:Ht;return function(){var s=o(this,t),u=s.on;u!==r&&(i=(r=u).copy()).on(n,e),s.on=i}}var pe=vt.prototype.constructor;function de(t){return function(){this.style.removeProperty(t)}}function ge(t,n,e){return function(r){this.style.setProperty(t,n.call(this,r),e)}}function ye(t,n,e){var r,i;function o(){var o=n.apply(this,arguments);return o!==i&&(r=(i=o)&&ge(t,o,e)),r}return o._value=n,o}function ve(t){return function(n){this.textContent=t.call(this,n)}}function _e(t){var n,e;function r(){var r=t.apply(this,arguments);return r!==e&&(n=(e=r)&&ve(r)),n}return r._value=t,r}var me=0;function we(t,n,e,r){this._groups=t,this._parents=n,this._name=e,this._id=r}function be(){return++me}var xe=vt.prototype;we.prototype=function(t){return vt().transition(t)}.prototype={constructor:we,select:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=i(t));for(var r=this._groups,o=r.length,s=new Array(o),u=0;u<o;++u)for(var a,c,l=r[u],h=l.length,f=s[u]=new Array(h),p=0;p<h;++p)(a=l[p])&&(c=t.call(a,a.__data__,p,l))&&("__data__"in a&&(c.__data__=a.__data__),f[p]=c,Gt(f[p],n,e,p,f,zt(a,e)));return new we(s,this._parents,n,e)},selectAll:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=u(t));for(var r=this._groups,i=r.length,o=[],s=[],a=0;a<i;++a)for(var c,l=r[a],h=l.length,f=0;f<h;++f)if(c=l[f]){for(var p,d=t.call(c,c.__data__,f,l),g=zt(c,e),y=0,v=d.length;y<v;++y)(p=d[y])&&Gt(p,n,e,y,d,g);o.push(d),s.push(c)}return new we(o,s,n,e)},selectChild:xe.selectChild,selectChildren:xe.selectChildren,filter:function(t){"function"!=typeof t&&(t=a(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,s=n[i],u=s.length,c=r[i]=[],l=0;l<u;++l)(o=s[l])&&t.call(o,o.__data__,l,s)&&c.push(o);return new we(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),s=new Array(r),u=0;u<o;++u)for(var a,c=n[u],l=e[u],h=c.length,f=s[u]=new Array(h),p=0;p<h;++p)(a=c[p]||l[p])&&(f[p]=a);for(;u<r;++u)s[u]=n[u];return new we(s,this._parents,this._name,this._id)},selection:function(){return new pe(this._groups,this._parents)},transition:function(){for(var t=this._name,n=this._id,e=be(),r=this._groups,i=r.length,o=0;o<i;++o)for(var s,u=r[o],a=u.length,c=0;c<a;++c)if(s=u[c]){var l=zt(s,n);Gt(s,t,e,c,u,{time:l.time+l.delay+l.duration,delay:0,duration:l.duration,ease:l.ease})}return new we(r,this._parents,t,e)},call:xe.call,nodes:xe.nodes,node:xe.node,size:xe.size,empty:xe.empty,each:xe.each,on:function(t,n){var e=this._id;return arguments.length<2?zt(this.node(),e).on.on(t):this.each(fe(e,t,n))},attr:function(t,n){var e=E(t),r="transform"===e?en:Wn;return this.attrTween(t,"function"==typeof n?(e.local?ee:ne)(e,r,sn(this,"attr."+t,n)):null==n?(e.local?Jn:Kn)(e):(e.local?te:Qn)(e,r,n))},attrTween:function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;var r=E(t);return this.tween(e,(r.local?oe:se)(r,n))},style:function(t,n,e){var r="transform"==(t+="")?nn:Wn;return null==n?this.styleTween(t,function(t,n){var e,r,i;return function(){var o=P(this,t),s=(this.style.removeProperty(t),P(this,t));return o===s?null:o===e&&s===r?i:i=n(e=o,r=s)}}(t,r)).on("end.style."+t,de(t)):"function"==typeof n?this.styleTween(t,function(t,n,e){var r,i,o;return function(){var s=P(this,t),u=e(this),a=u+"";return null==u&&(this.style.removeProperty(t),a=u=P(this,t)),s===a?null:s===r&&a===i?o:(i=a,o=n(r=s,u))}}(t,r,sn(this,"style."+t,n))).each(function(t,n){var e,r,i,o,s="style."+n,u="end."+s;return function(){var a=Ht(this,t),c=a.on,l=null==a.value[s]?o||(o=de(n)):void 0;c===e&&i===l||(r=(e=c).copy()).on(u,i=l),a.on=r}}(this._id,t)):this.styleTween(t,function(t,n,e){var r,i,o=e+"";return function(){var s=P(this,t);return s===o?null:s===r?i:i=n(r=s,e)}}(t,r,n),e).on("end.style."+t,null)},styleTween:function(t,n,e){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==n)return this.tween(r,null);if("function"!=typeof n)throw new Error;return this.tween(r,ye(t,n,null==e?"":e))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var n=t(this);this.textContent=null==n?"":n}}(sn(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},textTween:function(t){var n="text";if(arguments.length<1)return(n=this.tween(n))&&n._value;if(null==t)return this.tween(n,null);if("function"!=typeof t)throw new Error;return this.tween(n,_e(t))},remove:function(){return this.on("end.remove",function(t){return function(){var n=this.parentNode;for(var e in this.__transition)if(+e!==t)return;n&&n.removeChild(this)}}(this._id))},tween:function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var r,i=zt(this.node(),e).tween,o=0,s=i.length;o<s;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==n?rn:on)(e,t,n))},delay:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?ue:ae)(n,t)):zt(this.node(),n).delay},duration:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?ce:le)(n,t)):zt(this.node(),n).duration},ease:function(t){var n=this._id;return arguments.length?this.each(he(n,t)):zt(this.node(),n).ease},easeVarying:function(t){if("function"!=typeof t)throw new Error;return this.each(function(t,n){return function(){var e=n.apply(this,arguments);if("function"!=typeof e)throw new Error;Ht(this,t).ease=e}}(this._id,t))},end:function(){var t,n,e=this,r=e._id,i=e.size();return new Promise((function(o,s){var u={value:s},a={value:function(){0==--i&&o()}};e.each((function(){var e=Ht(this,r),i=e.on;i!==t&&((n=(t=i).copy())._.cancel.push(u),n._.interrupt.push(u),n._.end.push(a)),e.on=n})),0===i&&o()}))},[Symbol.iterator]:xe[Symbol.iterator]};var Ae={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function Ee(t,n){for(var e;!(e=t.__transition)||!(e=e[n]);)if(!(t=t.parentNode))throw new Error(`transition ${n} not found`);return e}vt.prototype.interrupt=function(t){return this.each((function(){!function(t,n){var e,r,i,o=t.__transition,s=!0;if(o){for(i in n=null==n?null:n+"",o)(e=o[i]).name===n?(r=e.state>2&&e.state<5,e.state=6,e.timer.stop(),e.on.call(r?"interrupt":"cancel",t,t.__data__,e.index,e.group),delete o[i]):s=!1;s&&delete t.__transition}}(this,t)}))},vt.prototype.transition=function(t){var n,e;t instanceof we?(n=t._id,t=t._name):(n=be(),(e=Ae).time=Pt(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var s,u=r[o],a=u.length,c=0;c<a;++c)(s=u[c])&&Gt(s,t,n,c,u,e||Ee(s,n));return new we(r,this._parents,t,n)};const{abs:Me,max:Ne,min:ke}=Math;function Se(t){return{type:t}}function $e(t){return"string"==typeof t?new gt([[document.querySelector(t)]],[document.documentElement]):new gt([[t]],dt)}function Te(t){let n;for(;n=t.sourceEvent;)t=n;return t}function Oe(t,n){if(t=Te(t),void 0===n&&(n=t.currentTarget),n){var e=n.ownerSVGElement||n;if(e.createSVGPoint){var r=e.createSVGPoint();return r.x=t.clientX,r.y=t.clientY,[(r=r.matrixTransform(n.getScreenCTM().inverse())).x,r.y]}if(n.getBoundingClientRect){var i=n.getBoundingClientRect();return[t.clientX-i.left-n.clientLeft,t.clientY-i.top-n.clientTop]}}return[t.pageX,t.pageY]}["w","e"].map(Se),["n","s"].map(Se),["n","w","e","s","nw","ne","sw","se"].map(Se);const Ue={passive:!1},Ce={capture:!0,passive:!1};function je(t){t.stopImmediatePropagation()}function Pe(t){t.preventDefault(),t.stopImmediatePropagation()}const Le=t=>()=>t;function De(t,{sourceEvent:n,subject:e,target:r,identifier:i,active:o,x:s,y:u,dx:a,dy:c,dispatch:l}){Object.defineProperties(this,{type:{value:t,enumerable:!0,configurable:!0},sourceEvent:{value:n,enumerable:!0,configurable:!0},subject:{value:e,enumerable:!0,configurable:!0},target:{value:r,enumerable:!0,configurable:!0},identifier:{value:i,enumerable:!0,configurable:!0},active:{value:o,enumerable:!0,configurable:!0},x:{value:s,enumerable:!0,configurable:!0},y:{value:u,enumerable:!0,configurable:!0},dx:{value:a,enumerable:!0,configurable:!0},dy:{value:c,enumerable:!0,configurable:!0},_:{value:l}})}function Ie(t){return!t.ctrlKey&&!t.button}function Re(){return this.parentNode}function Xe(t,n){return null==n?{x:t.x,y:t.y}:n}function qe(){return navigator.maxTouchPoints||"ontouchstart"in this}function Ye(){var t,n,e,r,i=Ie,o=Re,s=Xe,u=qe,a={},c=Et("start","drag","end"),l=0,h=0;function f(t){t.on("mousedown.drag",p).filter(u).on("touchstart.drag",y).on("touchmove.drag",v,Ue).on("touchend.drag touchcancel.drag",_).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function p(s,u){if(!r&&i.call(this,s,u)){var a=m(this,o.call(this,s,u),s,u,"mouse");a&&($e(s.view).on("mousemove.drag",d,Ce).on("mouseup.drag",g,Ce),function(t){var n=t.document.documentElement,e=$e(t).on("dragstart.drag",Pe,Ce);"onselectstart"in n?e.on("selectstart.drag",Pe,Ce):(n.__noselect=n.style.MozUserSelect,n.style.MozUserSelect="none")}(s.view),je(s),e=!1,t=s.clientX,n=s.clientY,a("start",s))}}function d(r){if(Pe(r),!e){var i=r.clientX-t,o=r.clientY-n;e=i*i+o*o>h}a.mouse("drag",r)}function g(t){$e(t.view).on("mousemove.drag mouseup.drag",null),function(t,n){var e=t.document.documentElement,r=$e(t).on("dragstart.drag",null);n&&(r.on("click.drag",Pe,Ce),setTimeout((function(){r.on("click.drag",null)}),0)),"onselectstart"in e?r.on("selectstart.drag",null):(e.style.MozUserSelect=e.__noselect,delete e.__noselect)}(t.view,e),Pe(t),a.mouse("end",t)}function y(t,n){if(i.call(this,t,n)){var e,r,s=t.changedTouches,u=o.call(this,t,n),a=s.length;for(e=0;e<a;++e)(r=m(this,u,t,n,s[e].identifier,s[e]))&&(je(t),r("start",t,s[e]))}}function v(t){var n,e,r=t.changedTouches,i=r.length;for(n=0;n<i;++n)(e=a[r[n].identifier])&&(Pe(t),e("drag",t,r[n]))}function _(t){var n,e,i=t.changedTouches,o=i.length;for(r&&clearTimeout(r),r=setTimeout((function(){r=null}),500),n=0;n<o;++n)(e=a[i[n].identifier])&&(je(t),e("end",t,i[n]))}function m(t,n,e,r,i,o){var u,h,p,d=c.copy(),g=Oe(o||e,n);if(null!=(p=s.call(t,new De("beforestart",{sourceEvent:e,target:f,identifier:i,active:l,x:g[0],y:g[1],dx:0,dy:0,dispatch:d}),r)))return u=p.x-g[0]||0,h=p.y-g[1]||0,function e(o,s,c){var y,v=g;switch(o){case"start":a[i]=e,y=l++;break;case"end":delete a[i],--l;case"drag":g=Oe(c||s,n),y=l}d.call(o,t,new De(o,{sourceEvent:s,subject:p,target:f,identifier:i,active:y,x:g[0]+u,y:g[1]+h,dx:g[0]-v[0],dy:g[1]-v[1],dispatch:d}),r)}}return f.filter=function(t){return arguments.length?(i="function"==typeof t?t:Le(!!t),f):i},f.container=function(t){return arguments.length?(o="function"==typeof t?t:Le(t),f):o},f.subject=function(t){return arguments.length?(s="function"==typeof t?t:Le(t),f):s},f.touchable=function(t){return arguments.length?(u="function"==typeof t?t:Le(!!t),f):u},f.on=function(){var t=c.on.apply(c,arguments);return t===c?f:t},f.clickDistance=function(t){return arguments.length?(h=(t=+t)*t,f):Math.sqrt(h)},f}De.prototype.on=function(){var t=this._.on.apply(this._,arguments);return t===this._?this:t};const Be=Math.PI,Fe=2*Be,Ge=1e-6,Ve=Fe-Ge;function He(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function ze(){return new He}He.prototype=ze.prototype={constructor:He,moveTo:function(t,n){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,n){this._+="L"+(this._x1=+t)+","+(this._y1=+n)},quadraticCurveTo:function(t,n,e,r){this._+="Q"+ +t+","+ +n+","+(this._x1=+e)+","+(this._y1=+r)},bezierCurveTo:function(t,n,e,r,i,o){this._+="C"+ +t+","+ +n+","+ +e+","+ +r+","+(this._x1=+i)+","+(this._y1=+o)},arcTo:function(t,n,e,r,i){t=+t,n=+n,e=+e,r=+r,i=+i;var o=this._x1,s=this._y1,u=e-t,a=r-n,c=o-t,l=s-n,h=c*c+l*l;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=n);else if(h>Ge)if(Math.abs(l*u-a*c)>Ge&&i){var f=e-o,p=r-s,d=u*u+a*a,g=f*f+p*p,y=Math.sqrt(d),v=Math.sqrt(h),_=i*Math.tan((Be-Math.acos((d+h-g)/(2*y*v)))/2),m=_/v,w=_/y;Math.abs(m-1)>Ge&&(this._+="L"+(t+m*c)+","+(n+m*l)),this._+="A"+i+","+i+",0,0,"+ +(l*f>c*p)+","+(this._x1=t+w*u)+","+(this._y1=n+w*a)}else this._+="L"+(this._x1=t)+","+(this._y1=n)},arc:function(t,n,e,r,i,o){t=+t,n=+n,o=!!o;var s=(e=+e)*Math.cos(r),u=e*Math.sin(r),a=t+s,c=n+u,l=1^o,h=o?r-i:i-r;if(e<0)throw new Error("negative radius: "+e);null===this._x1?this._+="M"+a+","+c:(Math.abs(this._x1-a)>Ge||Math.abs(this._y1-c)>Ge)&&(this._+="L"+a+","+c),e&&(h<0&&(h=h%Fe+Fe),h>Ve?this._+="A"+e+","+e+",0,1,"+l+","+(t-s)+","+(n-u)+"A"+e+","+e+",0,1,"+l+","+(this._x1=a)+","+(this._y1=c):h>Ge&&(this._+="A"+e+","+e+",0,"+ +(h>=Be)+","+l+","+(this._x1=t+e*Math.cos(i))+","+(this._y1=n+e*Math.sin(i))))},rect:function(t,n,e,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)+"h"+ +e+"v"+ +r+"h"+-e+"Z"},toString:function(){return this._}};const Ze=ze;function We(t){return $e(rt(t).call(document.documentElement))}function Ke(t,n){return t.target&&(t=Te(t),void 0===n&&(n=t.currentTarget),t=t.touches||[t]),Array.from(t,(t=>Oe(t,n)))}function Je(t){return function(){return t}}function Qe(t){this._context=t}function tr(t){return new Qe(t)}function nr(t){return t[0]}function er(t){return t[1]}function rr(t,n){var e=Je(!0),r=null,i=tr,o=null;function s(s){var u,a,c,l=(s=function(t){return"object"==typeof t&&"length"in t?t:Array.from(t)}(s)).length,h=!1;for(null==r&&(o=i(c=Ze())),u=0;u<=l;++u)!(u<l&&e(a=s[u],u,s))===h&&((h=!h)?o.lineStart():o.lineEnd()),h&&o.point(+t(a,u,s),+n(a,u,s));if(c)return o=null,c+""||null}return t="function"==typeof t?t:void 0===t?nr:Je(t),n="function"==typeof n?n:void 0===n?er:Je(n),s.x=function(n){return arguments.length?(t="function"==typeof n?n:Je(+n),s):t},s.y=function(t){return arguments.length?(n="function"==typeof t?t:Je(+t),s):n},s.defined=function(t){return arguments.length?(e="function"==typeof t?t:Je(!!t),s):e},s.curve=function(t){return arguments.length?(i=t,null!=r&&(o=i(r)),s):i},s.context=function(t){return arguments.length?(null==t?r=o=null:o=i(r=t),s):r},s}function ir(t,n,e){this.k=t,this.x=n,this.y=e}Array.prototype.slice,Qe.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:this._context.lineTo(t,n)}}},ir.prototype={constructor:ir,scale:function(t){return 1===t?this:new ir(this.k*t,this.x,this.y)},translate:function(t,n){return 0===t&0===n?this:new ir(this.k,this.x+this.k*t,this.y+this.k*n)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}},new ir(1,0,0),ir.prototype},28974:(t,n,e)=>{e.d(n,{Dp:()=>o,Z$:()=>r,kJ:()=>s,s7:()=>i});const r=t=>t[t.length-1],i=(t,n)=>{for(let e=0;e<n.length;e++)t.push(n[e])},o=Array.from,s=Array.isArray},96399:(t,n,e)=>{e.d(n,{$2:()=>h,CY:()=>o,Ko:()=>s,Qn:()=>i,RP:()=>p,Vw:()=>r,cq:()=>u,jS:()=>f,kr:()=>l,rc:()=>a,x1:()=>c});const r=1,i=2,o=4,s=8,u=32,a=64,c=128,l=31,h=63,f=127,p=2147483647},17676:(t,n,e)=>{e.d(n,{sX:()=>M,GF:()=>b,TS:()=>N,HE:()=>A,Mf:()=>c,_f:()=>l,EM:()=>w,$F:()=>f,HK:()=>y,uw:()=>g,uE:()=>p,mP:()=>v});e(67083);var r=e(20096);const i=(t,n,e)=>new Uint8Array(t,n,e);r.jU,r.jU;var o=e(40909),s=e(96399);Number.MAX_SAFE_INTEGER,Number.MIN_SAFE_INTEGER,s.RP;const u=Number.isInteger||(t=>"number"==typeof t&&isFinite(t)&&o.GW(t)===t);Number.isNaN,Number.parseInt;class a{constructor(){this.cpos=0,this.cbuf=new Uint8Array(100),this.bufs=[]}}const c=()=>new a,l=t=>{const n=new Uint8Array((t=>{let n=t.cpos;for(let e=0;e<t.bufs.length;e++)n+=t.bufs[e].length;return n})(t));let e=0;for(let r=0;r<t.bufs.length;r++){const i=t.bufs[r];n.set(i,e),e+=i.length}return n.set(i(t.cbuf.buffer,0,t.cpos),e),n},h=(t,n)=>{const e=t.cbuf.length;t.cpos===e&&(t.bufs.push(t.cbuf),t.cbuf=new Uint8Array(2*e),t.cpos=0),t.cbuf[t.cpos++]=n},f=h,p=(t,n)=>{for(;n>s.jS;)h(t,s.x1|s.jS&n),n>>>=7;h(t,s.jS&n)},d=(t,n)=>{const e=o.GR(n);for(e&&(n=-n),h(t,(n>s.$2?s.x1:0)|(e?s.rc:0)|s.$2&n),n>>>=6;n>0;)h(t,(n>s.jS?s.x1:0)|s.jS&n),n>>>=7},g=(t,n)=>{const e=unescape(encodeURIComponent(n)),r=e.length;p(t,r);for(let n=0;n<r;n++)h(t,e.codePointAt(n))},y=(t,n)=>{const e=t.cbuf.length,r=t.cpos,i=o.VV(e-r,n.length),s=n.length-i;t.cbuf.set(n.subarray(0,i),r),t.cpos+=i,s>0&&(t.bufs.push(t.cbuf),t.cbuf=new Uint8Array(o.Fp(2*e,s)),t.cbuf.set(n.subarray(i)),t.cpos=s)},v=(t,n)=>{p(t,n.byteLength),y(t,n)},_=(t,n)=>{((t,n)=>{const e=t.cbuf.length;e-t.cpos<n&&(t.bufs.push(i(t.cbuf.buffer,0,t.cpos)),t.cbuf=new Uint8Array(2*o.Fp(e,n)),t.cpos=0)})(t,n);const e=new DataView(t.cbuf.buffer,t.cpos,n);return t.cpos+=n,e},m=new DataView(new ArrayBuffer(4)),w=(t,n)=>{switch(typeof n){case"string":h(t,119),g(t,n);break;case"number":u(n)&&o.Wn(n)<=s.RP?(h(t,125),d(t,n)):(e=n,m.setFloat32(0,e),m.getFloat32(0)===e?(h(t,124),((t,n)=>{_(t,4).setFloat32(0,n,!1)})(t,n)):(h(t,123),((t,n)=>{_(t,8).setFloat64(0,n,!1)})(t,n)));break;case"bigint":h(t,122),((t,n)=>{_(t,8).setBigInt64(0,n,!1)})(t,n);break;case"object":if(null===n)h(t,126);else if(n instanceof Array){h(t,117),p(t,n.length);for(let e=0;e<n.length;e++)w(t,n[e])}else if(n instanceof Uint8Array)h(t,116),v(t,n);else{h(t,118);const e=Object.keys(n);p(t,e.length);for(let r=0;r<e.length;r++){const i=e[r];g(t,i),w(t,n[i])}}break;case"boolean":h(t,n?120:121);break;default:h(t,127)}var e};class b extends a{constructor(t){super(),this.w=t,this.s=null,this.count=0}write(t){this.s===t?this.count++:(this.count>0&&p(this,this.count-1),this.count=1,this.w(this,t),this.s=t)}}const x=t=>{t.count>0&&(d(t.encoder,1===t.count?t.s:-t.s),t.count>1&&p(t.encoder,t.count-2))};class A{constructor(){this.encoder=new a,this.s=0,this.count=0}write(t){this.s===t?this.count++:(x(this),this.count=1,this.s=t)}toUint8Array(){return x(this),l(this.encoder)}}const E=t=>{if(t.count>0){const n=t.diff<<1|(1===t.count?0:1);d(t.encoder,n),t.count>1&&p(t.encoder,t.count-2)}};class M{constructor(){this.encoder=new a,this.s=0,this.count=0,this.diff=0}write(t){this.diff===t-this.s?(this.s=t,this.count++):(E(this),this.count=1,this.diff=t-this.s,this.s=t)}toUint8Array(){return E(this),l(this.encoder)}}class N{constructor(){this.sarr=[],this.s="",this.lensE=new A}write(t){this.s+=t,this.s.length>19&&(this.sarr.push(this.s),this.s=""),this.lensE.write(t.length)}toUint8Array(){const t=new a;return this.sarr.push(this.s),this.s="",g(t,this.sarr.join("")),y(t,this.lensE.toUint8Array()),l(t)}}},20096:(t,n,e)=>{e.d(n,{jU:()=>c,UG:()=>a});var r=e(69805),i=e(67083);let o=new class{constructor(){this.map=new Map}setItem(t,n){this.map.set(t,n)}getItem(t){return this.map.get(t)}},s=!0;try{"undefined"!=typeof localStorage&&(o=localStorage,s=!1)}catch(t){}const u=o,a="undefined"!=typeof process&&process.release&&/node|io\.js/.test(process.release.name),c="undefined"!=typeof window&&!a;let l;"undefined"!=typeof navigator&&/Mac/.test(navigator.platform);const h=[];(t=>(()=>{if(void 0===l)if(a){l=r.Ue();const t=process.argv;let n=null;for(let e=0;e<t.length;e++){const r=t[e];"-"===r[0]?(null!==n&&l.set(n,""),n=r):null!==n?(l.set(n,r),n=null):h.push(r)}null!==n&&l.set(n,"")}else"object"==typeof location?(l=r.Ue(),(location.search||"?").slice(1).split("&").forEach((t=>{if(0!==t.length){const[n,e]=t.split("=");l.set(`--${i.NF(n,"-")}`,e),l.set(`-${i.NF(n,"-")}`,e)}}))):l=r.Ue();return l})().has(t))("--"+"production")||(t=>{return void 0===(n=a?process.env[t.toUpperCase()]:u.getItem(t))?null:n;var n})("production")},93562:(t,n,e)=>{e.d(n,{Nw:()=>i,Ue:()=>r,zR:()=>o});const r=t=>new Error(t),i=()=>{throw r("Method unimplemented")},o=()=>{throw r("Unexpected case")}},81351:(t,n,e)=>{e.d(n,{PP:()=>r});const r=(t,n,e=0)=>{try{for(;e<t.length;e++)t[e](...n)}finally{e<t.length&&r(t,n,e+1)}}},31111:(t,n,e)=>{e.d(n,{BG:()=>i,CA:()=>o});const r=t=>({[Symbol.iterator](){return this},next:t}),i=(t,n)=>r((()=>{let e;do{e=t.next()}while(!e.done&&!n(e.value));return e})),o=(t,n)=>r((()=>{const{done:e,value:r}=t.next();return{done:e,value:e?void 0:n(r)}}))},48412:(t,n,e)=>{e.d(n,{Pl:()=>l,ud:()=>v,hM:()=>g,YW:()=>h,S0:()=>x});var r=e(20096);const i=Symbol;class o{constructor(t,n){this.left=t,this.right=n}}const s=(t,n)=>new o(t,n);var u=e(69805);const a="undefined"!=typeof document?document:{};"undefined"!=typeof DOMParser&&new DOMParser,a.ELEMENT_NODE,a.TEXT_NODE,a.CDATA_SECTION_NODE,a.COMMENT_NODE,a.DOCUMENT_NODE,a.DOCUMENT_TYPE_NODE,a.DOCUMENT_FRAGMENT_NODE;var c=e(21371);const l=i(),h=i(),f=i(),p=i(),d=i(),g=i(),y=i(),v=i(),_=i(),m={[l]:s("font-weight","bold"),[h]:s("font-weight","normal"),[f]:s("color","blue"),[d]:s("color","green"),[p]:s("color","grey"),[g]:s("color","red"),[y]:s("color","purple"),[v]:s("color","orange"),[_]:s("color","black")},w={[l]:"[1m",[h]:"[2m",[f]:"[34m",[d]:"[32m",[p]:"[37m",[g]:"[31m",[y]:"[35m",[v]:"[38;5;208m",[_]:"[0m"},b=r.UG?t=>{const n=[],e=[];let r=0;for(;r<t.length;r++){const e=t[r],i=w[e];if(void 0!==i)n.push(i);else{if(e.constructor!==String&&e.constructor!==Number)break;n.push(e)}}for(r>0&&(n.push("[0m"),e.push(n.join("")));r<t.length;r++){const n=t[r];n instanceof Symbol||e.push(n)}return e}:t=>{const n=[],e=[],r=u.Ue();let i=[],o=0;for(;o<t.length;o++){const i=t[o],a=m[i];if(void 0!==a)r.set(a.left,a.right);else{if(i.constructor!==String&&i.constructor!==Number)break;{const t=(s=r,u.UI(s,((t,n)=>`${n}:${t};`)).join(""));o>0||t.length>0?(n.push("%c"+i),e.push(t)):n.push(i)}}}var s;for(o>0&&(i=e,i.unshift(n.join("")));o<t.length;o++){const n=t[o];n instanceof Symbol||i.push(n)}return i},x=(...t)=>{console.log(...b(t)),A.forEach((n=>n.print(t)))},A=new Set;c.ZG()},69805:(t,n,e)=>{e.d(n,{JG:()=>i,UI:()=>s,Ue:()=>r,Yj:()=>u,Yu:()=>o});const r=()=>new Map,i=t=>{const n=r();return t.forEach(((t,e)=>{n.set(e,t)})),n},o=(t,n,e)=>{let r=t.get(n);return void 0===r&&t.set(n,r=e()),r},s=(t,n)=>{const e=[];for(const[r,i]of t)e.push(n(i,r));return e},u=(t,n)=>{for(const[e,r]of t)if(n(r,e))return!0;return!1}},40909:(t,n,e)=>{e.d(n,{Fp:()=>s,GR:()=>u,GW:()=>r,VV:()=>o,Wn:()=>i});const r=Math.floor,i=(Math.ceil,Math.abs),o=(Math.imul,Math.round,Math.log10,Math.log2,Math.log,Math.sqrt,(t,n)=>t<n?t:n),s=(t,n)=>t>n?t:n,u=(Number.isNaN,Math.pow,Math.sign,t=>0!==t?t<0:1/t<0)},49776:(t,n,e)=>{e.d(n,{$m:()=>o}),Object.assign;const r=Object.keys,i=t=>r(t).length,o=(t,n)=>t===n||i(t)===i(n)&&((t,n)=>{for(const e in t)if(!n(t[e],e))return!1;return!0})(t,((t,e)=>(void 0!==t||((t,n)=>Object.prototype.hasOwnProperty.call(t,n))(n,e))&&n[e]===t))},46320:(t,n,e)=>{e.d(n,{y:()=>s});var r=e(69805),i=e(45064),o=e(28974);class s{constructor(){this._observers=r.Ue()}on(t,n){r.Yu(this._observers,t,i.Ue).add(n)}once(t,n){const e=(...r)=>{this.off(t,e),n(...r)};this.on(t,e)}off(t,n){const e=this._observers.get(t);void 0!==e&&(e.delete(n),0===e.size&&this._observers.delete(t))}emit(t,n){return o.Dp((this._observers.get(t)||r.Ue()).values()).forEach((t=>t(...n)))}destroy(){this._observers=r.Ue()}}},70790:(t,n,e)=>{e.d(n,{Ue:()=>r});const r=t=>new Promise(t)},68893:(t,n,e)=>{e.d(n,{U7:()=>o,k$:()=>u}),"undefined"==typeof window||void 0!==window.performance&&window.performance;const r="undefined"==typeof crypto?null:crypto,i=null!==r?t=>{const n=new ArrayBuffer(t),e=new Uint8Array(n);return r.getRandomValues(e),n}:t=>{const n=new ArrayBuffer(t),e=new Uint8Array(n);for(let n=0;n<t;n++)e[n]=Math.ceil(4294967295*Math.random()>>>0);return n},o=(Math.random,()=>new Uint32Array(i(4))[0]),s=[1e7]+-1e3+-4e3+-8e3+-1e11,u=()=>s.replace(/[018]/g,(t=>(t^o()&15>>t/4).toString(16)))},45064:(t,n,e)=>{e.d(n,{Ue:()=>r});const r=()=>new Set},67083:(t,n,e)=>{e.d(n,{IK:()=>r,NF:()=>s});const r=String.fromCharCode,i=(String.fromCodePoint,/^\s*/g),o=/([A-Z])/g,s=(t,n)=>(t=>t.replace(i,""))(t.replace(o,(t=>`${n}${(t=>t.toLowerCase())(t)}`)));"undefined"!=typeof TextEncoder&&new TextEncoder;let u="undefined"==typeof TextDecoder?null:new TextDecoder("utf-8",{fatal:!0,ignoreBOM:!0});u&&1===u.decode(new Uint8Array).length&&(u=null)},21371:(t,n,e)=>{e.d(n,{ZG:()=>r});const r=Date.now}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,