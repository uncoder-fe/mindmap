/*! For license information please see common-836d192c.54284e2ce2b4551f921e.js.LICENSE.txt */
(self.webpackChunkmindmap=self.webpackChunkmindmap||[]).push([[386],{11949:function(t){t.exports=function(){"use strict";function t(t,e){var i=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),i.push.apply(i,n)}return i}function e(e){for(var i=1;i<arguments.length;i++){var n=null!=arguments[i]?arguments[i]:{};i%2?t(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):t(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(t){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i(t)}function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function s(t,e,i){return e in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i,t}var a={backdrop:!0,button:!0,navbar:!0,title:!0,toolbar:!0,className:"",container:"body",filter:null,fullscreen:!0,inheritedAttributes:["crossOrigin","decoding","isMap","loading","referrerPolicy","sizes","srcset","useMap"],initialViewIndex:0,inline:!1,interval:5e3,keyboard:!0,focus:!0,loading:!0,loop:!0,minWidth:200,minHeight:100,movable:!0,rotatable:!0,scalable:!0,zoomable:!0,zoomOnTouch:!0,zoomOnWheel:!0,slideOnTouch:!0,toggleOnDblclick:!0,tooltip:!0,transition:!0,zIndex:2015,zIndexInline:0,zoomRatio:.1,minZoomRatio:.01,maxZoomRatio:100,url:"src",ready:null,show:null,shown:null,hide:null,hidden:null,view:null,viewed:null,move:null,moved:null,rotate:null,rotated:null,scale:null,scaled:null,zoom:null,zoomed:null,play:null,stop:null},r="undefined"!=typeof window&&void 0!==window.document,l=r?window:{},h=!(!r||!l.document.documentElement)&&"ontouchstart"in l.document.documentElement,c=!!r&&"PointerEvent"in l,u="viewer",d="move",m="switch",f="zoom",g="".concat(u,"-active"),v="".concat(u,"-close"),p="".concat(u,"-fade"),b="".concat(u,"-fixed"),w="".concat(u,"-fullscreen"),y="".concat(u,"-fullscreen-exit"),x="".concat(u,"-hide"),k="".concat(u,"-hide-md-down"),z="".concat(u,"-hide-sm-down"),E="".concat(u,"-hide-xs-down"),D="".concat(u,"-in"),A="".concat(u,"-invisible"),T="".concat(u,"-loading"),S="".concat(u,"-move"),I="".concat(u,"-open"),C="".concat(u,"-show"),O="".concat(u,"-transition"),L="click",R="dblclick",F="dragstart",N="focusin",M="keydown",Y="load",X="error",P=c?"pointerdown":h?"touchstart":"mousedown",q=c?"pointermove":h?"touchmove":"mousemove",W=c?"pointerup pointercancel":h?"touchend touchcancel":"mouseup",j="resize",H="transitionend",B="wheel",U="ready",V="show",K="shown",Z="hide",$="hidden",_="view",G="viewed",Q="move",J="moved",tt="rotate",et="rotated",it="scale",nt="scaled",ot="zoom",st="zoomed",at="play",rt="stop",lt="".concat(u,"Action"),ht=/\s\s*/,ct=["zoom-in","zoom-out","one-to-one","reset","prev","play","next","rotate-left","rotate-right","flip-horizontal","flip-vertical"];function ut(t){return"string"==typeof t}var dt=Number.isNaN||l.isNaN;function mt(t){return"number"==typeof t&&!dt(t)}function ft(t){return void 0===t}function gt(t){return"object"===i(t)&&null!==t}var vt=Object.prototype.hasOwnProperty;function pt(t){if(!gt(t))return!1;try{var e=t.constructor,i=e.prototype;return e&&i&&vt.call(i,"isPrototypeOf")}catch(t){return!1}}function bt(t){return"function"==typeof t}function wt(t,e){if(t&&bt(e))if(Array.isArray(t)||mt(t.length)){var i,n=t.length;for(i=0;i<n&&!1!==e.call(t,t[i],i,t);i+=1);}else gt(t)&&Object.keys(t).forEach((function(i){e.call(t,t[i],i,t)}));return t}var yt=Object.assign||function(t){for(var e=arguments.length,i=new Array(e>1?e-1:0),n=1;n<e;n++)i[n-1]=arguments[n];return gt(t)&&i.length>0&&i.forEach((function(e){gt(e)&&Object.keys(e).forEach((function(i){t[i]=e[i]}))})),t},xt=/^(?:width|height|left|top|marginLeft|marginTop)$/;function kt(t,e){var i=t.style;wt(e,(function(t,e){xt.test(e)&&mt(t)&&(t+="px"),i[e]=t}))}function zt(t){return ut(t)?t.replace(/&(?!amp;|quot;|#39;|lt;|gt;)/g,"&amp;").replace(/"/g,"&quot;").replace(/'/g,"&#39;").replace(/</g,"&lt;").replace(/>/g,"&gt;"):t}function Et(t,e){return!(!t||!e)&&(t.classList?t.classList.contains(e):t.className.indexOf(e)>-1)}function Dt(t,e){if(t&&e)if(mt(t.length))wt(t,(function(t){Dt(t,e)}));else if(t.classList)t.classList.add(e);else{var i=t.className.trim();i?i.indexOf(e)<0&&(t.className="".concat(i," ").concat(e)):t.className=e}}function At(t,e){t&&e&&(mt(t.length)?wt(t,(function(t){At(t,e)})):t.classList?t.classList.remove(e):t.className.indexOf(e)>=0&&(t.className=t.className.replace(e,"")))}function Tt(t,e,i){e&&(mt(t.length)?wt(t,(function(t){Tt(t,e,i)})):i?Dt(t,e):At(t,e))}var St=/([a-z\d])([A-Z])/g;function It(t){return t.replace(St,"$1-$2").toLowerCase()}function Ct(t,e){return gt(t[e])?t[e]:t.dataset?t.dataset[e]:t.getAttribute("data-".concat(It(e)))}function Ot(t,e,i){gt(i)?t[e]=i:t.dataset?t.dataset[e]=i:t.setAttribute("data-".concat(It(e)),i)}var Lt=function(){var t=!1;if(r){var e=!1,i=function(){},n=Object.defineProperty({},"once",{get:function(){return t=!0,e},set:function(t){e=t}});l.addEventListener("test",i,n),l.removeEventListener("test",i,n)}return t}();function Rt(t,e,i){var n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},o=i;e.trim().split(ht).forEach((function(e){if(!Lt){var s=t.listeners;s&&s[e]&&s[e][i]&&(o=s[e][i],delete s[e][i],0===Object.keys(s[e]).length&&delete s[e],0===Object.keys(s).length&&delete t.listeners)}t.removeEventListener(e,o,n)}))}function Ft(t,e,i){var n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},o=i;e.trim().split(ht).forEach((function(e){if(n.once&&!Lt){var s=t.listeners,a=void 0===s?{}:s;o=function(){delete a[e][i],t.removeEventListener(e,o,n);for(var s=arguments.length,r=new Array(s),l=0;l<s;l++)r[l]=arguments[l];i.apply(t,r)},a[e]||(a[e]={}),a[e][i]&&t.removeEventListener(e,a[e][i],n),a[e][i]=o,t.listeners=a}t.addEventListener(e,o,n)}))}function Nt(t,i,n,o){var s;return bt(Event)&&bt(CustomEvent)?s=new CustomEvent(i,e({bubbles:!0,cancelable:!0,detail:n},o)):(s=document.createEvent("CustomEvent")).initCustomEvent(i,!0,!0,n),t.dispatchEvent(s)}function Mt(t){var e=t.getBoundingClientRect();return{left:e.left+(window.pageXOffset-document.documentElement.clientLeft),top:e.top+(window.pageYOffset-document.documentElement.clientTop)}}function Yt(t){var e=t.rotate,i=t.scaleX,n=t.scaleY,o=t.translateX,s=t.translateY,a=[];mt(o)&&0!==o&&a.push("translateX(".concat(o,"px)")),mt(s)&&0!==s&&a.push("translateY(".concat(s,"px)")),mt(e)&&0!==e&&a.push("rotate(".concat(e,"deg)")),mt(i)&&1!==i&&a.push("scaleX(".concat(i,")")),mt(n)&&1!==n&&a.push("scaleY(".concat(n,")"));var r=a.length?a.join(" "):"none";return{WebkitTransform:r,msTransform:r,transform:r}}var Xt=l.navigator&&/(Macintosh|iPhone|iPod|iPad).*AppleWebKit/i.test(l.navigator.userAgent);function Pt(t,e,i){var n=document.createElement("img");if(t.naturalWidth&&!Xt)return i(t.naturalWidth,t.naturalHeight),n;var o=document.body||document.documentElement;return n.onload=function(){i(n.width,n.height),Xt||o.removeChild(n)},wt(e.inheritedAttributes,(function(e){var i=t.getAttribute(e);null!==i&&n.setAttribute(e,i)})),n.src=t.src,Xt||(n.style.cssText="left:0;max-height:none!important;max-width:none!important;min-height:0!important;min-width:0!important;opacity:0;position:absolute;top:0;z-index:-1;",o.appendChild(n)),n}function qt(t){switch(t){case 2:return E;case 3:return z;case 4:return k;default:return""}}function Wt(t,i){var n=t.pageX,o=t.pageY,s={endX:n,endY:o};return i?s:e({timeStamp:Date.now(),startX:n,startY:o},s)}function jt(t){var e=0,i=0,n=0;return wt(t,(function(t){var o=t.startX,s=t.startY;e+=o,i+=s,n+=1})),{pageX:e/=n,pageY:i/=n}}var Ht,Bt={render:function(){this.initContainer(),this.initViewer(),this.initList(),this.renderViewer()},initBody:function(){var t=this.element.ownerDocument,e=t.body||t.documentElement;this.body=e,this.scrollbarWidth=window.innerWidth-t.documentElement.clientWidth,this.initialBodyPaddingRight=e.style.paddingRight,this.initialBodyComputedPaddingRight=window.getComputedStyle(e).paddingRight},initContainer:function(){this.containerData={width:window.innerWidth,height:window.innerHeight}},initViewer:function(){var t,e=this.options,i=this.parent;e.inline&&(t={width:Math.max(i.offsetWidth,e.minWidth),height:Math.max(i.offsetHeight,e.minHeight)},this.parentData=t),!this.fulled&&t||(t=this.containerData),this.viewerData=yt({},t)},renderViewer:function(){this.options.inline&&!this.fulled&&kt(this.viewer,this.viewerData)},initList:function(){var t=this,e=this.element,i=this.options,n=this.list,o=[];n.innerHTML="",wt(this.images,(function(e,s){var a=e.src,r=e.alt||function(t){return ut(t)?decodeURIComponent(t.replace(/^.*\//,"").replace(/[?&#].*$/,"")):""}(a),l=t.getImageURL(e);if(a||l){var h=document.createElement("li"),c=document.createElement("img");wt(i.inheritedAttributes,(function(t){var i=e.getAttribute(t);null!==i&&c.setAttribute(t,i)})),c.src=a||l,c.alt=r,c.setAttribute("data-original-url",l||a),h.setAttribute("data-index",s),h.setAttribute("data-viewer-action","view"),h.setAttribute("role","button"),i.keyboard&&h.setAttribute("tabindex",0),h.appendChild(c),n.appendChild(h),o.push(h)}})),this.items=o,wt(o,(function(e){var n,o,s=e.firstElementChild;Ot(s,"filled",!0),i.loading&&Dt(e,T),Ft(s,Y,n=function(n){Rt(s,X,o),i.loading&&At(e,T),t.loadImage(n)},{once:!0}),Ft(s,X,o=function(){Rt(s,Y,n),i.loading&&At(e,T)},{once:!0})})),i.transition&&Ft(e,G,(function(){Dt(n,O)}),{once:!0})},renderList:function(){var t=this.index,e=this.items[t];if(e){var i=e.nextElementSibling,n=parseInt(window.getComputedStyle(i||e).marginLeft,10),o=e.offsetWidth,s=o+n;kt(this.list,yt({width:s*this.length-n},Yt({translateX:(this.viewerData.width-o)/2-s*t})))}},resetList:function(){var t=this.list;t.innerHTML="",At(t,O),kt(t,Yt({translateX:0}))},initImage:function(t){var e,i=this,n=this.options,o=this.image,s=this.viewerData,a=this.footer.offsetHeight,r=s.width,l=Math.max(s.height-a,a),h=this.imageData||{};this.imageInitializing={abort:function(){e.onload=null}},e=Pt(o,n,(function(e,o){var s=e/o,a=r,c=l;i.imageInitializing=!1,l*s>r?c=r/s:a=l*s,a=Math.min(.9*a,e),c=Math.min(.9*c,o);var u=(r-a)/2,d=(l-c)/2,m={left:u,top:d,x:u,y:d,width:a,height:c,oldRatio:1,ratio:a/e,aspectRatio:s,naturalWidth:e,naturalHeight:o},f=yt({},m);n.rotatable&&(m.rotate=h.rotate||0,f.rotate=0),n.scalable&&(m.scaleX=h.scaleX||1,m.scaleY=h.scaleY||1,f.scaleX=1,f.scaleY=1),i.imageData=m,i.initialImageData=f,t&&t()}))},renderImage:function(t){var e=this,i=this.image,n=this.imageData;if(kt(i,yt({width:n.width,height:n.height,marginLeft:n.x,marginTop:n.y},Yt(n))),t)if((this.viewing||this.moving||this.rotating||this.scaling||this.zooming)&&this.options.transition&&Et(i,O)){var o=function(){e.imageRendering=!1,t()};this.imageRendering={abort:function(){Rt(i,H,o)}},Ft(i,H,o,{once:!0})}else t()},resetImage:function(){if(this.viewing||this.viewed){var t=this.image;this.viewing&&this.viewing.abort(),t.parentNode.removeChild(t),this.image=null}}},Ut={bind:function(){var t=this.options,e=this.viewer,i=this.canvas,n=this.element.ownerDocument;Ft(e,L,this.onClick=this.click.bind(this)),Ft(e,F,this.onDragStart=this.dragstart.bind(this)),Ft(i,P,this.onPointerDown=this.pointerdown.bind(this)),Ft(n,q,this.onPointerMove=this.pointermove.bind(this)),Ft(n,W,this.onPointerUp=this.pointerup.bind(this)),Ft(n,M,this.onKeyDown=this.keydown.bind(this)),Ft(window,j,this.onResize=this.resize.bind(this)),t.zoomable&&t.zoomOnWheel&&Ft(e,B,this.onWheel=this.wheel.bind(this),{passive:!1,capture:!0}),t.toggleOnDblclick&&Ft(i,R,this.onDblclick=this.dblclick.bind(this))},unbind:function(){var t=this.options,e=this.viewer,i=this.canvas,n=this.element.ownerDocument;Rt(e,L,this.onClick),Rt(e,F,this.onDragStart),Rt(i,P,this.onPointerDown),Rt(n,q,this.onPointerMove),Rt(n,W,this.onPointerUp),Rt(n,M,this.onKeyDown),Rt(window,j,this.onResize),t.zoomable&&t.zoomOnWheel&&Rt(e,B,this.onWheel,{passive:!1,capture:!0}),t.toggleOnDblclick&&Rt(i,R,this.onDblclick)}},Vt={click:function(t){var e=this.options,i=this.imageData,n=t.target,o=Ct(n,lt);switch(o||"img"!==n.localName||"li"!==n.parentElement.localName||(o=Ct(n=n.parentElement,lt)),h&&t.isTrusted&&n===this.canvas&&clearTimeout(this.clickCanvasTimeout),o){case"mix":this.played?this.stop():e.inline?this.fulled?this.exit():this.full():this.hide();break;case"hide":this.hide();break;case"view":this.view(Ct(n,"index"));break;case"zoom-in":this.zoom(.1,!0);break;case"zoom-out":this.zoom(-.1,!0);break;case"one-to-one":this.toggle();break;case"reset":this.reset();break;case"prev":this.prev(e.loop);break;case"play":this.play(e.fullscreen);break;case"next":this.next(e.loop);break;case"rotate-left":this.rotate(-90);break;case"rotate-right":this.rotate(90);break;case"flip-horizontal":this.scaleX(-i.scaleX||-1);break;case"flip-vertical":this.scaleY(-i.scaleY||-1);break;default:this.played&&this.stop()}},dblclick:function(t){t.preventDefault(),this.viewed&&t.target===this.image&&(h&&t.isTrusted&&clearTimeout(this.doubleClickImageTimeout),this.toggle(t.isTrusted?t:t.detail&&t.detail.originalEvent))},load:function(){var t=this;this.timeout&&(clearTimeout(this.timeout),this.timeout=!1);var e=this.element,i=this.options,n=this.image,o=this.index,s=this.viewerData;At(n,A),i.loading&&At(this.canvas,T),n.style.cssText="height:0;"+"margin-left:".concat(s.width/2,"px;")+"margin-top:".concat(s.height/2,"px;")+"max-width:none!important;position:relative;width:0;",this.initImage((function(){Tt(n,S,i.movable),Tt(n,O,i.transition),t.renderImage((function(){t.viewed=!0,t.viewing=!1,bt(i.viewed)&&Ft(e,G,i.viewed,{once:!0}),Nt(e,G,{originalImage:t.images[o],index:o,image:n},{cancelable:!1})}))}))},loadImage:function(t){var e=t.target,i=e.parentNode,n=i.offsetWidth||30,o=i.offsetHeight||50,s=!!Ct(e,"filled");Pt(e,this.options,(function(t,i){var a=t/i,r=n,l=o;o*a>n?s?r=o*a:l=n/a:s?l=n/a:r=o*a,kt(e,yt({width:r,height:l},Yt({translateX:(n-r)/2,translateY:(o-l)/2})))}))},keydown:function(t){var e=this.options;if(e.keyboard){var i=t.keyCode||t.which||t.charCode;if(13===i&&this.viewer.contains(t.target)&&this.click(t),this.fulled)switch(i){case 27:this.played?this.stop():e.inline?this.fulled&&this.exit():this.hide();break;case 32:this.played&&this.stop();break;case 37:this.prev(e.loop);break;case 38:t.preventDefault(),this.zoom(e.zoomRatio,!0);break;case 39:this.next(e.loop);break;case 40:t.preventDefault(),this.zoom(-e.zoomRatio,!0);break;case 48:case 49:t.ctrlKey&&(t.preventDefault(),this.toggle())}}},dragstart:function(t){"img"===t.target.localName&&t.preventDefault()},pointerdown:function(t){var e=this.options,i=this.pointers,n=t.buttons,o=t.button;if(!(!this.viewed||this.showing||this.viewing||this.hiding||("mousedown"===t.type||"pointerdown"===t.type&&"mouse"===t.pointerType)&&(mt(n)&&1!==n||mt(o)&&0!==o||t.ctrlKey))){t.preventDefault(),t.changedTouches?wt(t.changedTouches,(function(t){i[t.identifier]=Wt(t)})):i[t.pointerId||0]=Wt(t);var s=!!e.movable&&d;e.zoomOnTouch&&e.zoomable&&Object.keys(i).length>1?s=f:e.slideOnTouch&&("touch"===t.pointerType||"touchstart"===t.type)&&this.isSwitchable()&&(s=m),!e.transition||s!==d&&s!==f||At(this.image,O),this.action=s}},pointermove:function(t){var e=this.pointers,i=this.action;this.viewed&&i&&(t.preventDefault(),t.changedTouches?wt(t.changedTouches,(function(t){yt(e[t.identifier]||{},Wt(t,!0))})):yt(e[t.pointerId||0]||{},Wt(t,!0)),this.change(t))},pointerup:function(t){var e,i=this,n=this.options,o=this.action,s=this.pointers;t.changedTouches?wt(t.changedTouches,(function(t){e=s[t.identifier],delete s[t.identifier]})):(e=s[t.pointerId||0],delete s[t.pointerId||0]),o&&(t.preventDefault(),!n.transition||o!==d&&o!==f||Dt(this.image,O),this.action=!1,h&&o!==f&&e&&Date.now()-e.timeStamp<500&&(clearTimeout(this.clickCanvasTimeout),clearTimeout(this.doubleClickImageTimeout),n.toggleOnDblclick&&this.viewed&&t.target===this.image?this.imageClicked?(this.imageClicked=!1,this.doubleClickImageTimeout=setTimeout((function(){Nt(i.image,R,{originalEvent:t})}),50)):(this.imageClicked=!0,this.doubleClickImageTimeout=setTimeout((function(){i.imageClicked=!1}),500)):(this.imageClicked=!1,n.backdrop&&"static"!==n.backdrop&&t.target===this.canvas&&(this.clickCanvasTimeout=setTimeout((function(){Nt(i.canvas,L,{originalEvent:t})}),50)))))},resize:function(){var t=this;if(this.isShown&&!this.hiding&&(this.fulled&&(this.close(),this.initBody(),this.open()),this.initContainer(),this.initViewer(),this.renderViewer(),this.renderList(),this.viewed&&this.initImage((function(){t.renderImage()})),this.played)){if(this.options.fullscreen&&this.fulled&&!(document.fullscreenElement||document.webkitFullscreenElement||document.mozFullScreenElement||document.msFullscreenElement))return void this.stop();wt(this.player.getElementsByTagName("img"),(function(e){Ft(e,Y,t.loadImage.bind(t),{once:!0}),Nt(e,Y)}))}},wheel:function(t){var e=this;if(this.viewed&&(t.preventDefault(),!this.wheeling)){this.wheeling=!0,setTimeout((function(){e.wheeling=!1}),50);var i=Number(this.options.zoomRatio)||.1,n=1;t.deltaY?n=t.deltaY>0?1:-1:t.wheelDelta?n=-t.wheelDelta/120:t.detail&&(n=t.detail>0?1:-1),this.zoom(-n*i,!0,t)}}},Kt={show:function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0],e=this.element,i=this.options;if(i.inline||this.showing||this.isShown||this.showing)return this;if(!this.ready)return this.build(),this.ready&&this.show(t),this;if(bt(i.show)&&Ft(e,V,i.show,{once:!0}),!1===Nt(e,V)||!this.ready)return this;this.hiding&&this.transitioning.abort(),this.showing=!0,this.open();var n=this.viewer;if(At(n,x),n.setAttribute("role","dialog"),n.setAttribute("aria-labelledby",this.title.id),n.setAttribute("aria-modal",!0),n.removeAttribute("aria-hidden"),i.transition&&!t){var o=this.shown.bind(this);this.transitioning={abort:function(){Rt(n,H,o),At(n,D)}},Dt(n,O),n.initialOffsetWidth=n.offsetWidth,Ft(n,H,o,{once:!0}),Dt(n,D)}else Dt(n,D),this.shown();return this},hide:function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],i=this.element,n=this.options;if(n.inline||this.hiding||!this.isShown&&!this.showing)return this;if(bt(n.hide)&&Ft(i,Z,n.hide,{once:!0}),!1===Nt(i,Z))return this;this.showing&&this.transitioning.abort(),this.hiding=!0,this.played?this.stop():this.viewing&&this.viewing.abort();var o=this.viewer,s=this.image,a=function(){At(o,D),t.hidden()};if(n.transition&&!e){var r=function e(i){i&&i.target===o&&(Rt(o,H,e),t.hidden())},l=function(){Et(o,O)?(Ft(o,H,r),At(o,D)):a()};this.transitioning={abort:function(){t.viewed&&Et(s,O)?Rt(s,H,l):Et(o,O)&&Rt(o,H,r)}},this.viewed&&Et(s,O)?(Ft(s,H,l,{once:!0}),this.zoomTo(0,!1,null,!0)):l()}else a();return this},view:function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.options.initialViewIndex;if(e=Number(e)||0,this.hiding||this.played||e<0||e>=this.length||this.viewed&&e===this.index)return this;if(!this.isShown)return this.index=e,this.show();this.viewing&&this.viewing.abort();var i=this.element,n=this.options,o=this.title,s=this.canvas,a=this.items[e],r=a.querySelector("img"),l=Ct(r,"originalUrl"),h=r.getAttribute("alt"),c=document.createElement("img");if(wt(n.inheritedAttributes,(function(t){var e=r.getAttribute(t);null!==e&&c.setAttribute(t,e)})),c.src=l,c.alt=h,bt(n.view)&&Ft(i,_,n.view,{once:!0}),!1===Nt(i,_,{originalImage:this.images[e],index:e,image:c})||!this.isShown||this.hiding||this.played)return this;var u=this.items[this.index];u&&(At(u,g),u.removeAttribute("aria-selected")),Dt(a,g),a.setAttribute("aria-selected",!0),n.focus&&a.focus(),this.image=c,this.viewed=!1,this.index=e,this.imageData={},Dt(c,A),n.loading&&Dt(s,T),s.innerHTML="",s.appendChild(c),this.renderList(),o.innerHTML="";var d,m,f=function(){var e=t.imageData,i=Array.isArray(n.title)?n.title[1]:n.title;o.innerHTML=zt(bt(i)?i.call(t,c,e):"".concat(h," (").concat(e.naturalWidth," × ").concat(e.naturalHeight,")"))};return Ft(i,G,f,{once:!0}),this.viewing={abort:function(){Rt(i,G,f),c.complete?t.imageRendering?t.imageRendering.abort():t.imageInitializing&&t.imageInitializing.abort():(c.src="",Rt(c,Y,d),t.timeout&&clearTimeout(t.timeout))}},c.complete?this.load():(Ft(c,Y,d=function(){Rt(c,X,m),t.load()},{once:!0}),Ft(c,X,m=function(){Rt(c,Y,d),t.timeout&&(clearTimeout(t.timeout),t.timeout=!1),At(c,A),n.loading&&At(t.canvas,T)},{once:!0}),this.timeout&&clearTimeout(this.timeout),this.timeout=setTimeout((function(){At(c,A),t.timeout=!1}),1e3)),this},prev:function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0],e=this.index-1;return e<0&&(e=t?this.length-1:0),this.view(e),this},next:function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0],e=this.length-1,i=this.index+1;return i>e&&(i=t?0:e),this.view(i),this},move:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:t,i=this.imageData;return this.moveTo(ft(t)?t:i.x+Number(t),ft(e)?e:i.y+Number(e)),this},moveTo:function(t){var e=this,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:t,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,o=this.element,s=this.options,a=this.imageData;if(t=Number(t),i=Number(i),this.viewed&&!this.played&&s.movable){var r=a.x,l=a.y,h=!1;if(mt(t)?h=!0:t=r,mt(i)?h=!0:i=l,h){if(bt(s.move)&&Ft(o,Q,s.move,{once:!0}),!1===Nt(o,Q,{x:t,y:i,oldX:r,oldY:l,originalEvent:n}))return this;a.x=t,a.y=i,a.left=t,a.top=i,this.moving=!0,this.renderImage((function(){e.moving=!1,bt(s.moved)&&Ft(o,J,s.moved,{once:!0}),Nt(o,J,{x:t,y:i,oldX:r,oldY:l,originalEvent:n},{cancelable:!1})}))}}return this},rotate:function(t){return this.rotateTo((this.imageData.rotate||0)+Number(t)),this},rotateTo:function(t){var e=this,i=this.element,n=this.options,o=this.imageData;if(mt(t=Number(t))&&this.viewed&&!this.played&&n.rotatable){var s=o.rotate;if(bt(n.rotate)&&Ft(i,tt,n.rotate,{once:!0}),!1===Nt(i,tt,{degree:t,oldDegree:s}))return this;o.rotate=t,this.rotating=!0,this.renderImage((function(){e.rotating=!1,bt(n.rotated)&&Ft(i,et,n.rotated,{once:!0}),Nt(i,et,{degree:t,oldDegree:s},{cancelable:!1})}))}return this},scaleX:function(t){return this.scale(t,this.imageData.scaleY),this},scaleY:function(t){return this.scale(this.imageData.scaleX,t),this},scale:function(t){var e=this,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:t,n=this.element,o=this.options,s=this.imageData;if(t=Number(t),i=Number(i),this.viewed&&!this.played&&o.scalable){var a=s.scaleX,r=s.scaleY,l=!1;if(mt(t)?l=!0:t=a,mt(i)?l=!0:i=r,l){if(bt(o.scale)&&Ft(n,it,o.scale,{once:!0}),!1===Nt(n,it,{scaleX:t,scaleY:i,oldScaleX:a,oldScaleY:r}))return this;s.scaleX=t,s.scaleY=i,this.scaling=!0,this.renderImage((function(){e.scaling=!1,bt(o.scaled)&&Ft(n,nt,o.scaled,{once:!0}),Nt(n,nt,{scaleX:t,scaleY:i,oldScaleX:a,oldScaleY:r},{cancelable:!1})}))}}return this},zoom:function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,n=this.imageData;return t=(t=Number(t))<0?1/(1-t):1+t,this.zoomTo(n.width*t/n.naturalWidth,e,i),this},zoomTo:function(t){var e=this,i=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,o=arguments.length>3&&void 0!==arguments[3]&&arguments[3],s=this.element,a=this.options,r=this.pointers,l=this.imageData,h=l.x,c=l.y,u=l.width,d=l.height,m=l.naturalWidth,f=l.naturalHeight;if(mt(t=Math.max(0,t))&&this.viewed&&!this.played&&(o||a.zoomable)){if(!o){var g=Math.max(.01,a.minZoomRatio),v=Math.min(100,a.maxZoomRatio);t=Math.min(Math.max(t,g),v)}if(n)switch(n.type){case"wheel":a.zoomRatio>=.055&&t>.95&&t<1.05&&(t=1);break;case"pointermove":case"touchmove":case"mousemove":t>.99&&t<1.01&&(t=1)}var p=m*t,b=f*t,w=p-u,y=b-d,x=l.ratio;if(bt(a.zoom)&&Ft(s,ot,a.zoom,{once:!0}),!1===Nt(s,ot,{ratio:t,oldRatio:x,originalEvent:n}))return this;if(this.zooming=!0,n){var k=Mt(this.viewer),z=r&&Object.keys(r).length>0?jt(r):{pageX:n.pageX,pageY:n.pageY};l.x-=w*((z.pageX-k.left-h)/u),l.y-=y*((z.pageY-k.top-c)/d)}else l.x-=w/2,l.y-=y/2;l.left=l.x,l.top=l.y,l.width=p,l.height=b,l.oldRatio=x,l.ratio=t,this.renderImage((function(){e.zooming=!1,bt(a.zoomed)&&Ft(s,st,a.zoomed,{once:!0}),Nt(s,st,{ratio:t,oldRatio:x,originalEvent:n},{cancelable:!1})})),i&&this.tooltip()}return this},play:function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(!this.isShown||this.played)return this;var i=this.element,n=this.options;if(bt(n.play)&&Ft(i,at,n.play,{once:!0}),!1===Nt(i,at))return this;var o=this.player,s=this.loadImage.bind(this),a=[],r=0,l=0;if(this.played=!0,this.onLoadWhenPlay=s,e&&this.requestFullscreen(e),Dt(o,C),wt(this.items,(function(t,e){var i=t.querySelector("img"),h=document.createElement("img");h.src=Ct(i,"originalUrl"),h.alt=i.getAttribute("alt"),h.referrerPolicy=i.referrerPolicy,r+=1,Dt(h,p),Tt(h,O,n.transition),Et(t,g)&&(Dt(h,D),l=e),a.push(h),Ft(h,Y,s,{once:!0}),o.appendChild(h)})),mt(n.interval)&&n.interval>0){var h=function e(){t.playing=setTimeout((function(){At(a[l],D),Dt(a[l=(l+=1)<r?l:0],D),e()}),n.interval)};r>1&&h()}return this},stop:function(){var t=this;if(!this.played)return this;var e=this.element,i=this.options;if(bt(i.stop)&&Ft(e,rt,i.stop,{once:!0}),!1===Nt(e,rt))return this;var n=this.player;return this.played=!1,clearTimeout(this.playing),wt(n.getElementsByTagName("img"),(function(e){Rt(e,Y,t.onLoadWhenPlay)})),At(n,C),n.innerHTML="",this.exitFullscreen(),this},full:function(){var t=this,e=this.options,i=this.viewer,n=this.image,o=this.list;return!this.isShown||this.played||this.fulled||!e.inline||(this.fulled=!0,this.open(),Dt(this.button,y),e.transition&&(At(o,O),this.viewed&&At(n,O)),Dt(i,b),i.setAttribute("role","dialog"),i.setAttribute("aria-labelledby",this.title.id),i.setAttribute("aria-modal",!0),i.removeAttribute("style"),kt(i,{zIndex:e.zIndex}),e.focus&&this.enforceFocus(),this.initContainer(),this.viewerData=yt({},this.containerData),this.renderList(),this.viewed&&this.initImage((function(){t.renderImage((function(){e.transition&&setTimeout((function(){Dt(n,O),Dt(o,O)}),0)}))}))),this},exit:function(){var t=this,e=this.options,i=this.viewer,n=this.image,o=this.list;return this.isShown&&!this.played&&this.fulled&&e.inline?(this.fulled=!1,this.close(),At(this.button,y),e.transition&&(At(o,O),this.viewed&&At(n,O)),e.focus&&this.clearEnforceFocus(),i.removeAttribute("role"),i.removeAttribute("aria-labelledby"),i.removeAttribute("aria-modal"),At(i,b),kt(i,{zIndex:e.zIndexInline}),this.viewerData=yt({},this.parentData),this.renderViewer(),this.renderList(),this.viewed&&this.initImage((function(){t.renderImage((function(){e.transition&&setTimeout((function(){Dt(n,O),Dt(o,O)}),0)}))})),this):this},tooltip:function(){var t=this,e=this.options,i=this.tooltipBox,n=this.imageData;return this.viewed&&!this.played&&e.tooltip?(i.textContent="".concat(Math.round(100*n.ratio),"%"),this.tooltipping?clearTimeout(this.tooltipping):e.transition?(this.fading&&Nt(i,H),Dt(i,C),Dt(i,p),Dt(i,O),i.removeAttribute("aria-hidden"),i.initialOffsetWidth=i.offsetWidth,Dt(i,D)):(Dt(i,C),i.removeAttribute("aria-hidden")),this.tooltipping=setTimeout((function(){e.transition?(Ft(i,H,(function(){At(i,C),At(i,p),At(i,O),i.setAttribute("aria-hidden",!0),t.fading=!1}),{once:!0}),At(i,D),t.fading=!0):(At(i,C),i.setAttribute("aria-hidden",!0)),t.tooltipping=!1}),1e3),this):this},toggle:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;return 1===this.imageData.ratio?this.zoomTo(this.imageData.oldRatio,!0,t):this.zoomTo(1,!0,t),this},reset:function(){return this.viewed&&!this.played&&(this.imageData=yt({},this.initialImageData),this.renderImage()),this},update:function(){var t=this,e=this.element,i=this.options,n=this.isImg;if(n&&!e.parentNode)return this.destroy();var o=[];if(wt(n?[e]:e.querySelectorAll("img"),(function(e){bt(i.filter)?i.filter.call(t,e)&&o.push(e):t.getImageURL(e)&&o.push(e)})),!o.length)return this;if(this.images=o,this.length=o.length,this.ready){var s=[];if(wt(this.items,(function(t,e){var i=t.querySelector("img"),n=o[e];n&&i&&n.src===i.src&&n.alt===i.alt||s.push(e)})),kt(this.list,{width:"auto"}),this.initList(),this.isShown)if(this.length){if(this.viewed){var a=s.indexOf(this.index);if(a>=0)this.viewed=!1,this.view(Math.max(Math.min(this.index-a,this.length-1),0));else{var r=this.items[this.index];Dt(r,g),r.setAttribute("aria-selected",!0)}}}else this.image=null,this.viewed=!1,this.index=0,this.imageData={},this.canvas.innerHTML="",this.title.innerHTML=""}else this.build();return this},destroy:function(){var t=this.element,e=this.options;return t.viewer?(this.destroyed=!0,this.ready?(this.played&&this.stop(),e.inline?(this.fulled&&this.exit(),this.unbind()):this.isShown?(this.viewing&&(this.imageRendering?this.imageRendering.abort():this.imageInitializing&&this.imageInitializing.abort()),this.hiding&&this.transitioning.abort(),this.hidden()):this.showing&&(this.transitioning.abort(),this.hidden()),this.ready=!1,this.viewer.parentNode.removeChild(this.viewer)):e.inline&&(this.delaying?this.delaying.abort():this.initializing&&this.initializing.abort()),e.inline||Rt(t,L,this.onStart),t.viewer=void 0,this):this}},Zt={getImageURL:function(t){var e=this.options.url;return ut(e)?t.getAttribute(e):bt(e)?e.call(this,t):""},enforceFocus:function(){var t=this;this.clearEnforceFocus(),Ft(document,N,this.onFocusin=function(e){var i=t.viewer,n=e.target;if(n!==document&&n!==i&&!i.contains(n)){for(;n;){if(null!==n.getAttribute("tabindex")||"true"===n.getAttribute("aria-modal"))return;n=n.parentElement}i.focus()}})},clearEnforceFocus:function(){this.onFocusin&&(Rt(document,N,this.onFocusin),this.onFocusin=null)},open:function(){var t=this.body;Dt(t,I),t.style.paddingRight="".concat(this.scrollbarWidth+(parseFloat(this.initialBodyComputedPaddingRight)||0),"px")},close:function(){var t=this.body;At(t,I),t.style.paddingRight=this.initialBodyPaddingRight},shown:function(){var t=this.element,e=this.options,i=this.viewer;this.fulled=!0,this.isShown=!0,this.render(),this.bind(),this.showing=!1,e.focus&&(i.focus(),this.enforceFocus()),bt(e.shown)&&Ft(t,K,e.shown,{once:!0}),!1!==Nt(t,K)&&this.ready&&this.isShown&&!this.hiding&&this.view(this.index)},hidden:function(){var t=this.element,e=this.options,i=this.viewer;e.fucus&&this.clearEnforceFocus(),this.fulled=!1,this.viewed=!1,this.isShown=!1,this.close(),this.unbind(),Dt(i,x),i.removeAttribute("role"),i.removeAttribute("aria-labelledby"),i.removeAttribute("aria-modal"),i.setAttribute("aria-hidden",!0),this.resetList(),this.resetImage(),this.hiding=!1,this.destroyed||(bt(e.hidden)&&Ft(t,$,e.hidden,{once:!0}),Nt(t,$,null,{cancelable:!1}))},requestFullscreen:function(t){var e=this.element.ownerDocument;if(this.fulled&&!(e.fullscreenElement||e.webkitFullscreenElement||e.mozFullScreenElement||e.msFullscreenElement)){var i=e.documentElement;i.requestFullscreen?pt(t)?i.requestFullscreen(t):i.requestFullscreen():i.webkitRequestFullscreen?i.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT):i.mozRequestFullScreen?i.mozRequestFullScreen():i.msRequestFullscreen&&i.msRequestFullscreen()}},exitFullscreen:function(){var t=this.element.ownerDocument;this.fulled&&(t.fullscreenElement||t.webkitFullscreenElement||t.mozFullScreenElement||t.msFullscreenElement)&&(t.exitFullscreen?t.exitFullscreen():t.webkitExitFullscreen?t.webkitExitFullscreen():t.mozCancelFullScreen?t.mozCancelFullScreen():t.msExitFullscreen&&t.msExitFullscreen())},change:function(t){var i=this.options,n=this.pointers,o=n[Object.keys(n)[0]];if(o){var s=o.endX-o.startX,a=o.endY-o.startY;switch(this.action){case d:this.move(s,a,t);break;case f:this.zoom(function(t){var i=e({},t),n=[];return wt(t,(function(t,e){delete i[e],wt(i,(function(e){var i=Math.abs(t.startX-e.startX),o=Math.abs(t.startY-e.startY),s=Math.abs(t.endX-e.endX),a=Math.abs(t.endY-e.endY),r=Math.sqrt(i*i+o*o),l=(Math.sqrt(s*s+a*a)-r)/r;n.push(l)}))})),n.sort((function(t,e){return Math.abs(t)<Math.abs(e)})),n[0]}(n),!1,t);break;case m:this.action="switched";var r=Math.abs(s);r>1&&r>Math.abs(a)&&(this.pointers={},s>1?this.prev(i.loop):s<-1&&this.next(i.loop))}wt(n,(function(t){t.startX=t.endX,t.startY=t.endY}))}},isSwitchable:function(){var t=this.imageData,e=this.viewerData;return this.length>1&&t.x>=0&&t.y>=0&&t.width<=e.width&&t.height<=e.height}},$t=l.Viewer,_t=(Ht=-1,function(){return Ht+=1}),Gt=function(){function t(e){var i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(n(this,t),!e||1!==e.nodeType)throw new Error("The first argument is required and must be an element.");this.element=e,this.options=yt({},a,pt(i)&&i),this.action=!1,this.fading=!1,this.fulled=!1,this.hiding=!1,this.imageClicked=!1,this.imageData={},this.index=this.options.initialViewIndex,this.isImg=!1,this.isShown=!1,this.length=0,this.moving=!1,this.played=!1,this.playing=!1,this.pointers={},this.ready=!1,this.rotating=!1,this.scaling=!1,this.showing=!1,this.timeout=!1,this.tooltipping=!1,this.viewed=!1,this.viewing=!1,this.wheeling=!1,this.zooming=!1,this.id=_t(),this.init()}return e=t,s=[{key:"noConflict",value:function(){return window.Viewer=$t,t}},{key:"setDefaults",value:function(t){yt(a,pt(t)&&t)}}],(i=[{key:"init",value:function(){var t=this,e=this.element,i=this.options;if(!e.viewer){e.viewer=this,i.focus&&!i.keyboard&&(i.focus=!1);var n="img"===e.localName,o=[];if(wt(n?[e]:e.querySelectorAll("img"),(function(e){bt(i.filter)?i.filter.call(t,e)&&o.push(e):t.getImageURL(e)&&o.push(e)})),this.isImg=n,this.length=o.length,this.images=o,this.initBody(),ft(document.createElement(u).style.transition)&&(i.transition=!1),i.inline){var s=0,a=function(){var e;(s+=1)===t.length&&(t.initializing=!1,t.delaying={abort:function(){clearTimeout(e)}},e=setTimeout((function(){t.delaying=!1,t.build()}),0))};this.initializing={abort:function(){wt(o,(function(t){t.complete||(Rt(t,Y,a),Rt(t,X,a))}))}},wt(o,(function(t){var e,i;t.complete?a():(Ft(t,Y,e=function(){Rt(t,X,i),a()},{once:!0}),Ft(t,X,i=function(){Rt(t,Y,e),a()},{once:!0}))}))}else Ft(e,L,this.onStart=function(e){var n=e.target;"img"!==n.localName||bt(i.filter)&&!i.filter.call(t,n)||t.view(t.images.indexOf(n))})}}},{key:"build",value:function(){if(!this.ready){var t=this.element,e=this.options,i=t.parentNode,n=document.createElement("div");n.innerHTML='<div class="viewer-container" tabindex="-1" touch-action="none"><div class="viewer-canvas"></div><div class="viewer-footer"><div class="viewer-title"></div><div class="viewer-toolbar"></div><div class="viewer-navbar"><ul class="viewer-list" role="navigation"></ul></div></div><div class="viewer-tooltip" role="alert" aria-hidden="true"></div><div class="viewer-button" data-viewer-action="mix" role="button"></div><div class="viewer-player"></div></div>';var o=n.querySelector(".".concat(u,"-container")),s=o.querySelector(".".concat(u,"-title")),a=o.querySelector(".".concat(u,"-toolbar")),r=o.querySelector(".".concat(u,"-navbar")),l=o.querySelector(".".concat(u,"-button")),h=o.querySelector(".".concat(u,"-canvas"));if(this.parent=i,this.viewer=o,this.title=s,this.toolbar=a,this.navbar=r,this.button=l,this.canvas=h,this.footer=o.querySelector(".".concat(u,"-footer")),this.tooltipBox=o.querySelector(".".concat(u,"-tooltip")),this.player=o.querySelector(".".concat(u,"-player")),this.list=o.querySelector(".".concat(u,"-list")),o.id="".concat(u).concat(this.id),s.id="".concat(u,"Title").concat(this.id),Dt(s,e.title?qt(Array.isArray(e.title)?e.title[0]:e.title):x),Dt(r,e.navbar?qt(e.navbar):x),Tt(l,x,!e.button),e.keyboard&&l.setAttribute("tabindex",0),e.backdrop&&(Dt(o,"".concat(u,"-backdrop")),e.inline||"static"===e.backdrop||Ot(h,lt,"hide")),ut(e.className)&&e.className&&e.className.split(ht).forEach((function(t){Dt(o,t)})),e.toolbar){var c=document.createElement("ul"),d=pt(e.toolbar),m=ct.slice(0,3),f=ct.slice(7,9),g=ct.slice(9);d||Dt(a,qt(e.toolbar)),wt(d?e.toolbar:ct,(function(t,i){var n=d&&pt(t),o=d?It(i):t,s=n&&!ft(t.show)?t.show:t;if(s&&(e.zoomable||-1===m.indexOf(o))&&(e.rotatable||-1===f.indexOf(o))&&(e.scalable||-1===g.indexOf(o))){var a=n&&!ft(t.size)?t.size:t,r=n&&!ft(t.click)?t.click:t,l=document.createElement("li");e.keyboard&&l.setAttribute("tabindex",0),l.setAttribute("role","button"),Dt(l,"".concat(u,"-").concat(o)),bt(r)||Ot(l,lt,o),mt(s)&&Dt(l,qt(s)),-1!==["small","large"].indexOf(a)?Dt(l,"".concat(u,"-").concat(a)):"play"===o&&Dt(l,"".concat(u,"-large")),bt(r)&&Ft(l,L,r),c.appendChild(l)}})),a.appendChild(c)}else Dt(a,x);if(!e.rotatable){var y=a.querySelectorAll('li[class*="rotate"]');Dt(y,A),wt(y,(function(t){a.appendChild(t)}))}if(e.inline)Dt(l,w),kt(o,{zIndex:e.zIndexInline}),"static"===window.getComputedStyle(i).position&&kt(i,{position:"relative"}),i.insertBefore(o,t.nextSibling);else{Dt(l,v),Dt(o,b),Dt(o,p),Dt(o,x),kt(o,{zIndex:e.zIndex});var k=e.container;ut(k)&&(k=t.ownerDocument.querySelector(k)),k||(k=this.body),k.appendChild(o)}e.inline&&(this.render(),this.bind(),this.isShown=!0),this.ready=!0,bt(e.ready)&&Ft(t,U,e.ready,{once:!0}),!1!==Nt(t,U)?this.ready&&e.inline&&this.view(this.index):this.ready=!1}}}])&&o(e.prototype,i),s&&o(e,s),Object.defineProperty(e,"prototype",{writable:!1}),t;var e,i,s}();return yt(Gt.prototype,Bt,Ut,Vt,Kt,Zt),Gt}()},33952:(t,e,i)=>{"use strict";i.d(e,{YG:()=>m,ue:()=>n});for(var n={8:"Backspace",9:"Tab",10:"Enter",12:"NumLock",13:"Enter",16:"Shift",17:"Control",18:"Alt",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",44:"PrintScreen",45:"Insert",46:"Delete",59:";",61:"=",91:"Meta",92:"Meta",106:"*",107:"+",108:",",109:"-",110:".",111:"/",144:"NumLock",145:"ScrollLock",160:"Shift",161:"Shift",162:"Control",163:"Control",164:"Alt",165:"Alt",173:"-",186:";",187:"=",188:",",189:"-",190:".",191:"/",192:"`",219:"[",220:"\\",221:"]",222:"'",229:"q"},o={48:")",49:"!",50:"@",51:"#",52:"$",53:"%",54:"^",55:"&",56:"*",57:"(",59:":",61:"+",173:"_",186:":",187:"+",188:"<",189:"_",190:">",191:"?",192:"~",219:"{",220:"|",221:"}",222:'"',229:"Q"},s="undefined"!=typeof navigator&&/Chrome\/(\d+)/.exec(navigator.userAgent),a="undefined"!=typeof navigator&&/Apple Computer/.test(navigator.vendor),r="undefined"!=typeof navigator&&/Gecko\/\d+/.test(navigator.userAgent),l="undefined"!=typeof navigator&&/Mac/.test(navigator.platform),h="undefined"!=typeof navigator&&/MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent),c=s&&(l||+s[1]<57)||r&&l,u=0;u<10;u++)n[48+u]=n[96+u]=String(u);for(u=1;u<=24;u++)n[u+111]="F"+u;for(u=65;u<=90;u++)n[u]=String.fromCharCode(u+32),o[u]=String.fromCharCode(u);for(var d in n)o.hasOwnProperty(d)||(o[d]=n[d]);function m(t){var e=!(c&&(t.ctrlKey||t.altKey||t.metaKey)||(a||h)&&t.shiftKey&&t.key&&1==t.key.length)&&t.key||(t.shiftKey?o:n)[t.keyCode]||t.key||"Unidentified";return"Esc"==e&&(e="Escape"),"Del"==e&&(e="Delete"),"Left"==e&&(e="ArrowLeft"),"Up"==e&&(e="ArrowUp"),"Right"==e&&(e="ArrowRight"),"Down"==e&&(e="ArrowDown"),e}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLTgzNmQxOTJjLjU0Mjg0ZTJjZTJiNDU1MWY5MjFlLmpzIiwibWFwcGluZ3MiOiI7dUZBV2lFQSxFQUFPQyxRQUcvRCxXQUFlLGFBRXRCLFNBQVNDLEVBQVFDLEVBQVFDLEdBQ3ZCLElBQUlDLEVBQU9DLE9BQU9ELEtBQUtGLEdBRXZCLEdBQUlHLE9BQU9DLHNCQUF1QixDQUNoQyxJQUFJQyxFQUFVRixPQUFPQyxzQkFBc0JKLEdBQzNDQyxJQUFtQkksRUFBVUEsRUFBUUMsUUFBTyxTQUFVQyxHQUNwRCxPQUFPSixPQUFPSyx5QkFBeUJSLEVBQVFPLEdBQUtFLFVBQ3RELEtBQUtQLEVBQUtRLEtBQUtDLE1BQU1ULEVBQU1HLEVBQzdCLENBRUEsT0FBT0gsQ0FDVCxDQUVBLFNBQVNVLEVBQWVDLEdBQ3RCLElBQUssSUFBSUMsRUFBSSxFQUFHQSxFQUFJQyxVQUFVQyxPQUFRRixJQUFLLENBQ3pDLElBQUlHLEVBQVMsTUFBUUYsVUFBVUQsR0FBS0MsVUFBVUQsR0FBSyxDQUFDLEVBQ3BEQSxFQUFJLEVBQUlmLEVBQVFJLE9BQU9jLElBQVMsR0FBSUMsU0FBUSxTQUFVQyxHQUNwREMsRUFBZ0JQLEVBQVFNLEVBQUtGLEVBQU9FLEdBQ3RDLElBQUtoQixPQUFPa0IsMEJBQTRCbEIsT0FBT21CLGlCQUFpQlQsRUFBUVYsT0FBT2tCLDBCQUEwQkosSUFBV2xCLEVBQVFJLE9BQU9jLElBQVNDLFNBQVEsU0FBVUMsR0FDNUpoQixPQUFPb0IsZUFBZVYsRUFBUU0sRUFBS2hCLE9BQU9LLHlCQUF5QlMsRUFBUUUsR0FDN0UsR0FDRixDQUVBLE9BQU9OLENBQ1QsQ0FFQSxTQUFTVyxFQUFRQyxHQUdmLE9BQU9ELEVBQVUsbUJBQXFCRSxRQUFVLGlCQUFtQkEsT0FBT0MsU0FBVyxTQUFVRixHQUM3RixjQUFjQSxDQUNoQixFQUFJLFNBQVVBLEdBQ1osT0FBT0EsR0FBTyxtQkFBcUJDLFFBQVVELEVBQUlHLGNBQWdCRixRQUFVRCxJQUFRQyxPQUFPRyxVQUFZLGdCQUFr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QUFNeE0sTUFDN0J3TSxFQUFNMFcsU0FBV2hCLEVBQVFELEdBQU16VixFQUFNc00sVUFDdEN0TSxFQUFNeE0sS0FBTyxlQVNmLE1BUFksT0FBUnFMLElBQWVBLEVBQU8sVUFDZCxPQUFSQSxJQUFlQSxFQUFPLFVBRWQsUUFBUkEsSUFBZ0JBLEVBQU8sYUFDZixNQUFSQSxJQUFjQSxFQUFPLFdBQ2IsU0FBUkEsSUFBaUJBLEVBQU8sY0FDaEIsUUFBUkEsSUFBZ0JBLEVBQU8sYUFDcEJBLENBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9taW5kbWFwLy4vbm9kZV9tb2R1bGVzL3ZpZXdlcmpzL2Rpc3Qvdmlld2VyLmpzIiwid2VicGFjazovL21pbmRtYXAvLi9ub2RlX21vZHVsZXMvdzNjLWtleW5hbWUvaW5kZXguZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBWaWV3ZXIuanMgdjEuMTAuNVxuICogaHR0cHM6Ly9mZW5neXVhbmNoZW4uZ2l0aHViLmlvL3ZpZXdlcmpzXG4gKlxuICogQ29weXJpZ2h0IDIwMTUtcHJlc2VudCBDaGVuIEZlbmd5dWFuXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqXG4gKiBEYXRlOiAyMDIyLTA0LTA1VDA4OjIxOjAyLjQ5MVpcbiAqL1xuXG4oZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKSA6XG4gIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShmYWN0b3J5KSA6XG4gIChnbG9iYWwgPSB0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWxUaGlzIDogZ2xvYmFsIHx8IHNlbGYsIGdsb2JhbC5WaWV3ZXIgPSBmYWN0b3J5KCkpO1xufSkodGhpcywgKGZ1bmN0aW9uICgpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gIGZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkge1xuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTtcblxuICAgIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgICB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTtcbiAgICAgIGVudW1lcmFibGVPbmx5ICYmIChzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTtcbiAgICAgIH0pKSwga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpO1xuICAgIH1cblxuICAgIHJldHVybiBrZXlzO1xuICB9XG5cbiAgZnVuY3Rpb24gX29iamVjdFNwcmVhZDIodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBudWxsICE9IGFyZ3VtZW50c1tpXSA/IGFyZ3VtZW50c1tpXSA6IHt9O1xuICAgICAgaSAlIDIgPyBvd25LZXlzKE9iamVjdChzb3VyY2UpLCAhMCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pO1xuICAgICAgfSkgOiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSkgOiBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9XG5cbiAgZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgICBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7XG5cbiAgICByZXR1cm4gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgIHJldHVybiB0eXBlb2Ygb2JqO1xuICAgIH0gOiBmdW5jdGlvbiAob2JqKSB7XG4gICAgICByZXR1cm4gb2JqICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqO1xuICAgIH0sIF90eXBlb2Yob2JqKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsIFwicHJvdG90eXBlXCIsIHtcbiAgICAgIHdyaXRhYmxlOiBmYWxzZVxuICAgIH0pO1xuICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgICBpZiAoa2V5IGluIG9iaikge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9ialtrZXldID0gdmFsdWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIHZhciBERUZBVUxUUyA9IHtcbiAgICAvKipcbiAgICAgKiBFbmFibGUgYSBtb2RhbCBiYWNrZHJvcCwgc3BlY2lmeSBgc3RhdGljYCBmb3IgYSBiYWNrZHJvcFxuICAgICAqIHdoaWNoIGRvZXNuJ3QgY2xvc2UgdGhlIG1vZGFsIG9uIGNsaWNrLlxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIGJhY2tkcm9wOiB0cnVlLFxuXG4gICAgLyoqXG4gICAgICogU2hvdyB0aGUgYnV0dG9uIG9uIHRoZSB0b3AtcmlnaHQgb2YgdGhlIHZpZXdlci5cbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBidXR0b246IHRydWUsXG5cbiAgICAvKipcbiAgICAgKiBTaG93IHRoZSBuYXZiYXIuXG4gICAgICogQHR5cGUge2Jvb2xlYW4gfCBudW1iZXJ9XG4gICAgICovXG4gICAgbmF2YmFyOiB0cnVlLFxuXG4gICAgLyoqXG4gICAgICogU3BlY2lmeSB0aGUgdmlzaWJpbGl0eSBhbmQgdGhlIGNvbnRlbnQgb2YgdGhlIHRpdGxlLlxuICAgICAqIEB0eXBlIHtib29sZWFuIHwgbnVtYmVyIHwgRnVuY3Rpb24gfCBBcnJheX1cbiAgICAgKi9cbiAgICB0aXRsZTogdHJ1ZSxcblxuICAgIC8qKlxuICAgICAqIFNob3cgdGhlIHRvb2xiYXIuXG4gICAgICogQHR5cGUge2Jvb2xlYW4gfCBudW1iZXIgfCBPYmplY3R9XG4gICAgICovXG4gICAgdG9vbGJhcjogdHJ1ZSxcblxuICAgIC8qKlxuICAgICAqIEN1c3RvbSBjbGFzcyBuYW1lKHMpIHRvIGFkZCB0byB0aGUgdmlld2VyJ3Mgcm9vdCBlbGVtZW50LlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgY2xhc3NOYW1lOiAnJyxcblxuICAgIC8qKlxuICAgICAqIERlZmluZSB3aGVyZSB0byBwdXQgdGhlIHZpZXdlciBpbiBtb2RhbCBtb2RlLlxuICAgICAqIEB0eXBlIHtzdHJpbmcgfCBFbGVtZW50fVxuICAgICAqL1xuICAgIGNvbnRhaW5lcjogJ2JvZHknLFxuXG4gICAgLyoqXG4gICAgICogRmlsdGVyIHRoZSBpbWFnZXMgZm9yIHZpZXdpbmcuIFJldHVybiB0cnVlIGlmIHRoZSBpbWFnZSBpcyB2aWV3YWJsZS5cbiAgICAgKiBAdHlwZSB7RnVuY3Rpb259XG4gICAgICovXG4gICAgZmlsdGVyOiBudWxsLFxuXG4gICAgLyoqXG4gICAgICogRW5hYmxlIHRvIHJlcXVlc3QgZnVsbHNjcmVlbiB3aGVuIHBsYXkuXG4gICAgICoge0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9GdWxsc2NyZWVuT3B0aW9uc31cbiAgICAgKiBAdHlwZSB7Ym9vbGVhbnxGdWxsc2NyZWVuT3B0aW9uc31cbiAgICAgKi9cbiAgICBmdWxsc2NyZWVuOiB0cnVlLFxuXG4gICAgLyoqXG4gICAgICogRGVmaW5lIHRoZSBleHRyYSBhdHRyaWJ1dGVzIHRvIGluaGVyaXQgZnJvbSB0aGUgb3JpZ2luYWwgaW1hZ2UuXG4gICAgICogQHR5cGUge0FycmF5fVxuICAgICAqL1xuICAgIGluaGVyaXRlZEF0dHJpYnV0ZXM6IFsnY3Jvc3NPcmlnaW4nLCAnZGVjb2RpbmcnLCAnaXNNYXAnLCAnbG9hZGluZycsICdyZWZlcnJlclBvbGljeScsICdzaXplcycsICdzcmNzZXQnLCAndXNlTWFwJ10sXG5cbiAgICAvKipcbiAgICAgKiBEZWZpbmUgdGhlIGluaXRpYWwgaW5kZXggb2YgaW1hZ2UgZm9yIHZpZXdpbmcuXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICBpbml0aWFsVmlld0luZGV4OiAwLFxuXG4gICAgLyoqXG4gICAgICogRW5hYmxlIGlubGluZSBtb2RlLlxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIGlubGluZTogZmFsc2UsXG5cbiAgICAvKipcbiAgICAgKiBUaGUgYW1vdW50IG9mIHRpbWUgdG8gZGVsYXkgYmV0d2VlbiBhdXRvbWF0aWNhbGx5IGN5Y2xpbmcgYW4gaW1hZ2Ugd2hlbiBwbGF5aW5nLlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgaW50ZXJ2YWw6IDUwMDAsXG5cbiAgICAvKipcbiAgICAgKiBFbmFibGUga2V5Ym9hcmQgc3VwcG9ydC5cbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBrZXlib2FyZDogdHJ1ZSxcblxuICAgIC8qKlxuICAgICAqIEZvY3VzIHRoZSB2aWV3ZXIgd2hlbiBpbml0aWFsaXplZC5cbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBmb2N1czogdHJ1ZSxcblxuICAgIC8qKlxuICAgICAqIEluZGljYXRlIGlmIHNob3cgYSBsb2FkaW5nIHNwaW5uZXIgd2hlbiBsb2FkIGltYWdlIG9yIG5vdC5cbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBsb2FkaW5nOiB0cnVlLFxuXG4gICAgLyoqXG4gICAgICogSW5kaWNhdGUgaWYgZW5hYmxlIGxvb3Agdmlld2luZyBvciBub3QuXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgbG9vcDogdHJ1ZSxcblxuICAgIC8qKlxuICAgICAqIE1pbiB3aWR0aCBvZiB0aGUgdmlld2VyIGluIGlubGluZSBtb2RlLlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgbWluV2lkdGg6IDIwMCxcblxuICAgIC8qKlxuICAgICAqIE1pbiBoZWlnaHQgb2YgdGhlIHZpZXdlciBpbiBpbmxpbmUgbW9kZS5cbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIG1pbkhlaWdodDogMTAwLFxuXG4gICAgLyoqXG4gICAgICogRW5hYmxlIHRvIG1vdmUgdGhlIGltYWdlLlxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIG1vdmFibGU6IHRydWUsXG5cbiAgICAvKipcbiAgICAgKiBFbmFibGUgdG8gcm90YXRlIHRoZSBpbWFnZS5cbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICByb3RhdGFibGU6IHRydWUsXG5cbiAgICAvKipcbiAgICAgKiBFbmFibGUgdG8gc2NhbGUgdGhlIGltYWdlLlxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIHNjYWxhYmxlOiB0cnVlLFxuXG4gICAgLyoqXG4gICAgICogRW5hYmxlIHRvIHpvb20gdGhlIGltYWdlLlxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIHpvb21hYmxlOiB0cnVlLFxuXG4gICAgLyoqXG4gICAgICogRW5hYmxlIHRvIHpvb20gdGhlIGN1cnJlbnQgaW1hZ2UgYnkgZHJhZ2dpbmcgb24gdGhlIHRvdWNoIHNjcmVlbi5cbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB6b29tT25Ub3VjaDogdHJ1ZSxcblxuICAgIC8qKlxuICAgICAqIEVuYWJsZSB0byB6b29tIHRoZSBpbWFnZSBieSB3aGVlbGluZyBtb3VzZS5cbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB6b29tT25XaGVlbDogdHJ1ZSxcblxuICAgIC8qKlxuICAgICAqIEVuYWJsZSB0byBzbGlkZSB0byB0aGUgbmV4dCBvciBwcmV2aW91cyBpbWFnZSBieSBzd2lwaW5nIG9uIHRoZSB0b3VjaCBzY3JlZW4uXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgc2xpZGVPblRvdWNoOiB0cnVlLFxuXG4gICAgLyoqXG4gICAgICogSW5kaWNhdGUgaWYgdG9nZ2xlIHRoZSBpbWFnZSBzaXplIGJldHdlZW4gaXRzIG5hdHVyYWwgc2l6ZVxuICAgICAqIGFuZCBpbml0aWFsIHNpemUgd2hlbiBkb3VibGUgY2xpY2sgb24gdGhlIGltYWdlIG9yIG5vdC5cbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0b2dnbGVPbkRibGNsaWNrOiB0cnVlLFxuXG4gICAgLyoqXG4gICAgICogU2hvdyB0aGUgdG9vbHRpcCB3aXRoIGltYWdlIHJhdGlvIChwZXJjZW50YWdlKSB3aGVuIHpvb20gaW4gb3Igem9vbSBvdXQuXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgdG9vbHRpcDogdHJ1ZSxcblxuICAgIC8qKlxuICAgICAqIEVuYWJsZSBDU1MzIFRyYW5zaXRpb24gZm9yIHNvbWUgc3BlY2lhbCBlbGVtZW50cy5cbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0cmFuc2l0aW9uOiB0cnVlLFxuXG4gICAgLyoqXG4gICAgICogRGVmaW5lIHRoZSBDU1MgYHotaW5kZXhgIHZhbHVlIG9mIHZpZXdlciBpbiBtb2RhbCBtb2RlLlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgekluZGV4OiAyMDE1LFxuXG4gICAgLyoqXG4gICAgICogRGVmaW5lIHRoZSBDU1MgYHotaW5kZXhgIHZhbHVlIG9mIHZpZXdlciBpbiBpbmxpbmUgbW9kZS5cbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHpJbmRleElubGluZTogMCxcblxuICAgIC8qKlxuICAgICAqIERlZmluZSB0aGUgcmF0aW8gd2hlbiB6b29tIHRoZSBpbWFnZSBieSB3aGVlbGluZyBtb3VzZS5cbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHpvb21SYXRpbzogMC4xLFxuXG4gICAgLyoqXG4gICAgICogRGVmaW5lIHRoZSBtaW4gcmF0aW8gb2YgdGhlIGltYWdlIHdoZW4gem9vbSBvdXQuXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICBtaW5ab29tUmF0aW86IDAuMDEsXG5cbiAgICAvKipcbiAgICAgKiBEZWZpbmUgdGhlIG1heCByYXRpbyBvZiB0aGUgaW1hZ2Ugd2hlbiB6b29tIGluLlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgbWF4Wm9vbVJhdGlvOiAxMDAsXG5cbiAgICAvKipcbiAgICAgKiBEZWZpbmUgd2hlcmUgdG8gZ2V0IHRoZSBvcmlnaW5hbCBpbWFnZSBVUkwgZm9yIHZpZXdpbmcuXG4gICAgICogQHR5cGUge3N0cmluZyB8IEZ1bmN0aW9ufVxuICAgICAqL1xuICAgIHVybDogJ3NyYycsXG5cbiAgICAvKipcbiAgICAgKiBFdmVudCBzaG9ydGN1dHMuXG4gICAgICogQHR5cGUge0Z1bmN0aW9ufVxuICAgICAqL1xuICAgIHJlYWR5OiBudWxsLFxuICAgIHNob3c6IG51bGwsXG4gICAgc2hvd246IG51bGwsXG4gICAgaGlkZTogbnVsbCxcbiAgICBoaWRkZW46IG51bGwsXG4gICAgdmlldzogbnVsbCxcbiAgICB2aWV3ZWQ6IG51bGwsXG4gICAgbW92ZTogbnVsbCxcbiAgICBtb3ZlZDogbnVsbCxcbiAgICByb3RhdGU6IG51bGwsXG4gICAgcm90YXRlZDogbnVsbCxcbiAgICBzY2FsZTogbnVsbCxcbiAgICBzY2FsZWQ6IG51bGwsXG4gICAgem9vbTogbnVsbCxcbiAgICB6b29tZWQ6IG51bGwsXG4gICAgcGxheTogbnVsbCxcbiAgICBzdG9wOiBudWxsXG4gIH07XG5cbiAgdmFyIFRFTVBMQVRFID0gJzxkaXYgY2xhc3M9XCJ2aWV3ZXItY29udGFpbmVyXCIgdGFiaW5kZXg9XCItMVwiIHRvdWNoLWFjdGlvbj1cIm5vbmVcIj4nICsgJzxkaXYgY2xhc3M9XCJ2aWV3ZXItY2FudmFzXCI+PC9kaXY+JyArICc8ZGl2IGNsYXNzPVwidmlld2VyLWZvb3RlclwiPicgKyAnPGRpdiBjbGFzcz1cInZpZXdlci10aXRsZVwiPjwvZGl2PicgKyAnPGRpdiBjbGFzcz1cInZpZXdlci10b29sYmFyXCI+PC9kaXY+JyArICc8ZGl2IGNsYXNzPVwidmlld2VyLW5hdmJhclwiPicgKyAnPHVsIGNsYXNzPVwidmlld2VyLWxpc3RcIiByb2xlPVwibmF2aWdhdGlvblwiPjwvdWw+JyArICc8L2Rpdj4nICsgJzwvZGl2PicgKyAnPGRpdiBjbGFzcz1cInZpZXdlci10b29sdGlwXCIgcm9sZT1cImFsZXJ0XCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9kaXY+JyArICc8ZGl2IGNsYXNzPVwidmlld2VyLWJ1dHRvblwiIGRhdGEtdmlld2VyLWFjdGlvbj1cIm1peFwiIHJvbGU9XCJidXR0b25cIj48L2Rpdj4nICsgJzxkaXYgY2xhc3M9XCJ2aWV3ZXItcGxheWVyXCI+PC9kaXY+JyArICc8L2Rpdj4nO1xuXG4gIHZhciBJU19CUk9XU0VSID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5kb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCc7XG4gIHZhciBXSU5ET1cgPSBJU19CUk9XU0VSID8gd2luZG93IDoge307XG4gIHZhciBJU19UT1VDSF9ERVZJQ0UgPSBJU19CUk9XU0VSICYmIFdJTkRPVy5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgPyAnb250b3VjaHN0YXJ0JyBpbiBXSU5ET1cuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50IDogZmFsc2U7XG4gIHZhciBIQVNfUE9JTlRFUl9FVkVOVCA9IElTX0JST1dTRVIgPyAnUG9pbnRlckV2ZW50JyBpbiBXSU5ET1cgOiBmYWxzZTtcbiAgdmFyIE5BTUVTUEFDRSA9ICd2aWV3ZXInOyAvLyBBY3Rpb25zXG5cbiAgdmFyIEFDVElPTl9NT1ZFID0gJ21vdmUnO1xuICB2YXIgQUNUSU9OX1NXSVRDSCA9ICdzd2l0Y2gnO1xuICB2YXIgQUNUSU9OX1pPT00gPSAnem9vbSc7IC8vIENsYXNzZXNcblxuICB2YXIgQ0xBU1NfQUNUSVZFID0gXCJcIi5jb25jYXQoTkFNRVNQQUNFLCBcIi1hY3RpdmVcIik7XG4gIHZhciBDTEFTU19DTE9TRSA9IFwiXCIuY29uY2F0KE5BTUVTUEFDRSwgXCItY2xvc2VcIik7XG4gIHZhciBDTEFTU19GQURFID0gXCJcIi5jb25jYXQoTkFNRVNQQUNFLCBcIi1mYWRlXCIpO1xuICB2YXIgQ0xBU1NfRklYRUQgPSBcIlwiLmNvbmNhdChOQU1FU1BBQ0UsIFwiLWZpeGVkXCIpO1xuICB2YXIgQ0xBU1NfRlVMTFNDUkVFTiA9IFwiXCIuY29uY2F0KE5BTUVTUEFDRSwgXCItZnVsbHNjcmVlblwiKTtcbiAgdmFyIENMQVNTX0ZVTExTQ1JFRU5fRVhJVCA9IFwiXCIuY29uY2F0KE5BTUVTUEFDRSwgXCItZnVsbHNjcmVlbi1leGl0XCIpO1xuICB2YXIgQ0xBU1NfSElERSA9IFwiXCIuY29uY2F0KE5BTUVTUEFDRSwgXCItaGlkZVwiKTtcbiAgdmFyIENMQVNTX0hJREVfTURfRE9XTiA9IFwiXCIuY29uY2F0KE5BTUVTUEFDRSwgXCItaGlkZS1tZC1kb3duXCIpO1xuICB2YXIgQ0xBU1NfSElERV9TTV9ET1dOID0gXCJcIi5jb25jYXQoTkFNRVNQQUNFLCBcIi1oaWRlLXNtLWRvd25cIik7XG4gIHZhciBDTEFTU19ISURFX1hTX0RPV04gPSBcIlwiLmNvbmNhdChOQU1FU1BBQ0UsIFwiLWhpZGUteHMtZG93blwiKTtcbiAgdmFyIENMQVNTX0lOID0gXCJcIi5jb25jYXQoTkFNRVNQQUNFLCBcIi1pblwiKTtcbiAgdmFyIENMQVNTX0lOVklTSUJMRSA9IFwiXCIuY29uY2F0KE5BTUVTUEFDRSwgXCItaW52aXNpYmxlXCIpO1xuICB2YXIgQ0xBU1NfTE9BRElORyA9IFwiXCIuY29uY2F0KE5BTUVTUEFDRSwgXCItbG9hZGluZ1wiKTtcbiAgdmFyIENMQVNTX01PVkUgPSBcIlwiLmNvbmNhdChOQU1FU1BBQ0UsIFwiLW1vdmVcIik7XG4gIHZhciBDTEFTU19PUEVOID0gXCJcIi5jb25jYXQoTkFNRVNQQUNFLCBcIi1vcGVuXCIpO1xuICB2YXIgQ0xBU1NfU0hPVyA9IFwiXCIuY29uY2F0KE5BTUVTUEFDRSwgXCItc2hvd1wiKTtcbiAgdmFyIENMQVNTX1RSQU5TSVRJT04gPSBcIlwiLmNvbmNhdChOQU1FU1BBQ0UsIFwiLXRyYW5zaXRpb25cIik7IC8vIE5hdGl2ZSBldmVudHNcblxuICB2YXIgRVZFTlRfQ0xJQ0sgPSAnY2xpY2snO1xuICB2YXIgRVZFTlRfREJMQ0xJQ0sgPSAnZGJsY2xpY2snO1xuICB2YXIgRVZFTlRfRFJBR19TVEFSVCA9ICdkcmFnc3RhcnQnO1xuICB2YXIgRVZFTlRfRk9DVVNJTiA9ICdmb2N1c2luJztcbiAgdmFyIEVWRU5UX0tFWV9ET1dOID0gJ2tleWRvd24nO1xuICB2YXIgRVZFTlRfTE9BRCA9ICdsb2FkJztcbiAgdmFyIEVWRU5UX0VSUk9SID0gJ2Vycm9yJztcbiAgdmFyIEVWRU5UX1RPVUNIX0VORCA9IElTX1RPVUNIX0RFVklDRSA/ICd0b3VjaGVuZCB0b3VjaGNhbmNlbCcgOiAnbW91c2V1cCc7XG4gIHZhciBFVkVOVF9UT1VDSF9NT1ZFID0gSVNfVE9VQ0hfREVWSUNFID8gJ3RvdWNobW92ZScgOiAnbW91c2Vtb3ZlJztcbiAgdmFyIEVWRU5UX1RPVUNIX1NUQVJUID0gSVNfVE9VQ0hfREVWSUNFID8gJ3RvdWNoc3RhcnQnIDogJ21vdXNlZG93bic7XG4gIHZhciBFVkVOVF9QT0lOVEVSX0RPV04gPSBIQVNfUE9JTlRFUl9FVkVOVCA/ICdwb2ludGVyZG93bicgOiBFVkVOVF9UT1VDSF9TVEFSVDtcbiAgdmFyIEVWRU5UX1BPSU5URVJfTU9WRSA9IEhBU19QT0lOVEVSX0VWRU5UID8gJ3BvaW50ZXJtb3ZlJyA6IEVWRU5UX1RPVUNIX01PVkU7XG4gIHZhciBFVkVOVF9QT0lOVEVSX1VQID0gSEFTX1BPSU5URVJfRVZFTlQgPyAncG9pbnRlcnVwIHBvaW50ZXJjYW5jZWwnIDogRVZFTlRfVE9VQ0hfRU5EO1xuICB2YXIgRVZFTlRfUkVTSVpFID0gJ3Jlc2l6ZSc7XG4gIHZhciBFVkVOVF9UUkFOU0lUSU9OX0VORCA9ICd0cmFuc2l0aW9uZW5kJztcbiAgdmFyIEVWRU5UX1dIRUVMID0gJ3doZWVsJzsgLy8gQ3VzdG9tIGV2ZW50c1xuXG4gIHZhciBFVkVOVF9SRUFEWSA9ICdyZWFkeSc7XG4gIHZhciBFVkVOVF9TSE9XID0gJ3Nob3cnO1xuICB2YXIgRVZFTlRfU0hPV04gPSAnc2hvd24nO1xuICB2YXIgRVZFTlRfSElERSA9ICdoaWRlJztcbiAgdmFyIEVWRU5UX0hJRERFTiA9ICdoaWRkZW4nO1xuICB2YXIgRVZFTlRfVklFVyA9ICd2aWV3JztcbiAgdmFyIEVWRU5UX1ZJRVdFRCA9ICd2aWV3ZWQnO1xuICB2YXIgRVZFTlRfTU9WRSA9ICdtb3ZlJztcbiAgdmFyIEVWRU5UX01PVkVEID0gJ21vdmVkJztcbiAgdmFyIEVWRU5UX1JPVEFURSA9ICdyb3RhdGUnO1xuICB2YXIgRVZFTlRfUk9UQVRFRCA9ICdyb3RhdGVkJztcbiAgdmFyIEVWRU5UX1NDQUxFID0gJ3NjYWxlJztcbiAgdmFyIEVWRU5UX1NDQUxFRCA9ICdzY2FsZWQnO1xuICB2YXIgRVZFTlRfWk9PTSA9ICd6b29tJztcbiAgdmFyIEVWRU5UX1pPT01FRCA9ICd6b29tZWQnO1xuICB2YXIgRVZFTlRfUExBWSA9ICdwbGF5JztcbiAgdmFyIEVWRU5UX1NUT1AgPSAnc3RvcCc7IC8vIERhdGEga2V5c1xuXG4gIHZhciBEQVRBX0FDVElPTiA9IFwiXCIuY29uY2F0KE5BTUVTUEFDRSwgXCJBY3Rpb25cIik7IC8vIFJlZ0V4cHNcblxuICB2YXIgUkVHRVhQX1NQQUNFUyA9IC9cXHNcXHMqLzsgLy8gTWlzY1xuXG4gIHZhciBCVVRUT05TID0gWyd6b29tLWluJywgJ3pvb20tb3V0JywgJ29uZS10by1vbmUnLCAncmVzZXQnLCAncHJldicsICdwbGF5JywgJ25leHQnLCAncm90YXRlLWxlZnQnLCAncm90YXRlLXJpZ2h0JywgJ2ZsaXAtaG9yaXpvbnRhbCcsICdmbGlwLXZlcnRpY2FsJ107XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIHRoZSBnaXZlbiB2YWx1ZSBpcyBhIHN0cmluZy5cbiAgICogQHBhcmFtIHsqfSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBnaXZlbiB2YWx1ZSBpcyBhIHN0cmluZywgZWxzZSBgZmFsc2VgLlxuICAgKi9cblxuICBmdW5jdGlvbiBpc1N0cmluZyh2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnO1xuICB9XG4gIC8qKlxuICAgKiBDaGVjayBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgbm90IGEgbnVtYmVyLlxuICAgKi9cblxuICB2YXIgaXNOYU4gPSBOdW1iZXIuaXNOYU4gfHwgV0lORE9XLmlzTmFOO1xuICAvKipcbiAgICogQ2hlY2sgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIGEgbnVtYmVyLlxuICAgKiBAcGFyYW0geyp9IHZhbHVlIC0gVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIGEgbnVtYmVyLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGlzTnVtYmVyKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgIWlzTmFOKHZhbHVlKTtcbiAgfVxuICAvKipcbiAgICogQ2hlY2sgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIHVuZGVmaW5lZC5cbiAgICogQHBhcmFtIHsqfSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBnaXZlbiB2YWx1ZSBpcyB1bmRlZmluZWQsIGVsc2UgYGZhbHNlYC5cbiAgICovXG5cbiAgZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJztcbiAgfVxuICAvKipcbiAgICogQ2hlY2sgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIGFuIG9iamVjdC5cbiAgICogQHBhcmFtIHsqfSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBnaXZlbiB2YWx1ZSBpcyBhbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICovXG5cbiAgZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgICByZXR1cm4gX3R5cGVvZih2YWx1ZSkgPT09ICdvYmplY3QnICYmIHZhbHVlICE9PSBudWxsO1xuICB9XG4gIHZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG4gIC8qKlxuICAgKiBDaGVjayBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgYSBwbGFpbiBvYmplY3QuXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgLSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgYSBwbGFpbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICovXG5cbiAgZnVuY3Rpb24gaXNQbGFpbk9iamVjdCh2YWx1ZSkge1xuICAgIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIHZhciBfY29uc3RydWN0b3IgPSB2YWx1ZS5jb25zdHJ1Y3RvcjtcbiAgICAgIHZhciBwcm90b3R5cGUgPSBfY29uc3RydWN0b3IucHJvdG90eXBlO1xuICAgICAgcmV0dXJuIF9jb25zdHJ1Y3RvciAmJiBwcm90b3R5cGUgJiYgaGFzT3duUHJvcGVydHkuY2FsbChwcm90b3R5cGUsICdpc1Byb3RvdHlwZU9mJyk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIENoZWNrIGlmIHRoZSBnaXZlbiB2YWx1ZSBpcyBhIGZ1bmN0aW9uLlxuICAgKiBAcGFyYW0geyp9IHZhbHVlIC0gVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIGEgZnVuY3Rpb24sIGVsc2UgYGZhbHNlYC5cbiAgICovXG5cbiAgZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbic7XG4gIH1cbiAgLyoqXG4gICAqIEl0ZXJhdGUgdGhlIGdpdmVuIGRhdGEuXG4gICAqIEBwYXJhbSB7Kn0gZGF0YSAtIFRoZSBkYXRhIHRvIGl0ZXJhdGUuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIC0gVGhlIHByb2Nlc3MgZnVuY3Rpb24gZm9yIGVhY2ggZWxlbWVudC5cbiAgICogQHJldHVybnMgeyp9IFRoZSBvcmlnaW5hbCBkYXRhLlxuICAgKi9cblxuICBmdW5jdGlvbiBmb3JFYWNoKGRhdGEsIGNhbGxiYWNrKSB7XG4gICAgaWYgKGRhdGEgJiYgaXNGdW5jdGlvbihjYWxsYmFjaykpIHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGRhdGEpIHx8IGlzTnVtYmVyKGRhdGEubGVuZ3RoKVxuICAgICAgLyogYXJyYXktbGlrZSAqL1xuICAgICAgKSB7XG4gICAgICAgIHZhciBsZW5ndGggPSBkYXRhLmxlbmd0aDtcbiAgICAgICAgdmFyIGk7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgaWYgKGNhbGxiYWNrLmNhbGwoZGF0YSwgZGF0YVtpXSwgaSwgZGF0YSkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3QoZGF0YSkpIHtcbiAgICAgICAgT2JqZWN0LmtleXMoZGF0YSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgY2FsbGJhY2suY2FsbChkYXRhLCBkYXRhW2tleV0sIGtleSwgZGF0YSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBkYXRhO1xuICB9XG4gIC8qKlxuICAgKiBFeHRlbmQgdGhlIGdpdmVuIG9iamVjdC5cbiAgICogQHBhcmFtIHsqfSBvYmogLSBUaGUgb2JqZWN0IHRvIGJlIGV4dGVuZGVkLlxuICAgKiBAcGFyYW0geyp9IGFyZ3MgLSBUaGUgcmVzdCBvYmplY3RzIHdoaWNoIHdpbGwgYmUgbWVyZ2VkIHRvIHRoZSBmaXJzdCBvYmplY3QuXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBleHRlbmRlZCBvYmplY3QuXG4gICAqL1xuXG4gIHZhciBhc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uIGFzc2lnbihvYmopIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBpZiAoaXNPYmplY3Qob2JqKSAmJiBhcmdzLmxlbmd0aCA+IDApIHtcbiAgICAgIGFyZ3MuZm9yRWFjaChmdW5jdGlvbiAoYXJnKSB7XG4gICAgICAgIGlmIChpc09iamVjdChhcmcpKSB7XG4gICAgICAgICAgT2JqZWN0LmtleXMoYXJnKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgIG9ialtrZXldID0gYXJnW2tleV07XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBvYmo7XG4gIH07XG4gIHZhciBSRUdFWFBfU1VGRklYID0gL14oPzp3aWR0aHxoZWlnaHR8bGVmdHx0b3B8bWFyZ2luTGVmdHxtYXJnaW5Ub3ApJC87XG4gIC8qKlxuICAgKiBBcHBseSBzdHlsZXMgdG8gdGhlIGdpdmVuIGVsZW1lbnQuXG4gICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCAtIFRoZSB0YXJnZXQgZWxlbWVudC5cbiAgICogQHBhcmFtIHtPYmplY3R9IHN0eWxlcyAtIFRoZSBzdHlsZXMgZm9yIGFwcGx5aW5nLlxuICAgKi9cblxuICBmdW5jdGlvbiBzZXRTdHlsZShlbGVtZW50LCBzdHlsZXMpIHtcbiAgICB2YXIgc3R5bGUgPSBlbGVtZW50LnN0eWxlO1xuICAgIGZvckVhY2goc3R5bGVzLCBmdW5jdGlvbiAodmFsdWUsIHByb3BlcnR5KSB7XG4gICAgICBpZiAoUkVHRVhQX1NVRkZJWC50ZXN0KHByb3BlcnR5KSAmJiBpc051bWJlcih2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWUgKz0gJ3B4JztcbiAgICAgIH1cblxuICAgICAgc3R5bGVbcHJvcGVydHldID0gdmFsdWU7XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEVzY2FwZSBhIHN0cmluZyBmb3IgdXNpbmcgaW4gSFRNTC5cbiAgICogQHBhcmFtIHtTdHJpbmd9IHZhbHVlIC0gVGhlIHN0cmluZyB0byBlc2NhcGUuXG4gICAqIEByZXR1cm5zIHtTdHJpbmd9IFJldHVybnMgdGhlIGVzY2FwZWQgc3RyaW5nLlxuICAgKi9cblxuICBmdW5jdGlvbiBlc2NhcGVIVE1MRW50aXRpZXModmFsdWUpIHtcbiAgICByZXR1cm4gaXNTdHJpbmcodmFsdWUpID8gdmFsdWUucmVwbGFjZSgvJig/IWFtcDt8cXVvdDt8IzM5O3xsdDt8Z3Q7KS9nLCAnJmFtcDsnKS5yZXBsYWNlKC9cIi9nLCAnJnF1b3Q7JykucmVwbGFjZSgvJy9nLCAnJiMzOTsnKS5yZXBsYWNlKC88L2csICcmbHQ7JykucmVwbGFjZSgvPi9nLCAnJmd0OycpIDogdmFsdWU7XG4gIH1cbiAgLyoqXG4gICAqIENoZWNrIGlmIHRoZSBnaXZlbiBlbGVtZW50IGhhcyBhIHNwZWNpYWwgY2xhc3MuXG4gICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCAtIFRoZSBlbGVtZW50IHRvIGNoZWNrLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgLSBUaGUgY2xhc3MgdG8gc2VhcmNoLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHNwZWNpYWwgY2xhc3Mgd2FzIGZvdW5kLlxuICAgKi9cblxuICBmdW5jdGlvbiBoYXNDbGFzcyhlbGVtZW50LCB2YWx1ZSkge1xuICAgIGlmICghZWxlbWVudCB8fCAhdmFsdWUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZWxlbWVudC5jbGFzc0xpc3QgPyBlbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyh2YWx1ZSkgOiBlbGVtZW50LmNsYXNzTmFtZS5pbmRleE9mKHZhbHVlKSA+IC0xO1xuICB9XG4gIC8qKlxuICAgKiBBZGQgY2xhc3NlcyB0byB0aGUgZ2l2ZW4gZWxlbWVudC5cbiAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IC0gVGhlIHRhcmdldCBlbGVtZW50LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgLSBUaGUgY2xhc3NlcyB0byBiZSBhZGRlZC5cbiAgICovXG5cbiAgZnVuY3Rpb24gYWRkQ2xhc3MoZWxlbWVudCwgdmFsdWUpIHtcbiAgICBpZiAoIWVsZW1lbnQgfHwgIXZhbHVlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGlzTnVtYmVyKGVsZW1lbnQubGVuZ3RoKSkge1xuICAgICAgZm9yRWFjaChlbGVtZW50LCBmdW5jdGlvbiAoZWxlbSkge1xuICAgICAgICBhZGRDbGFzcyhlbGVtLCB2YWx1ZSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZWxlbWVudC5jbGFzc0xpc3QpIHtcbiAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZCh2YWx1ZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGNsYXNzTmFtZSA9IGVsZW1lbnQuY2xhc3NOYW1lLnRyaW0oKTtcblxuICAgIGlmICghY2xhc3NOYW1lKSB7XG4gICAgICBlbGVtZW50LmNsYXNzTmFtZSA9IHZhbHVlO1xuICAgIH0gZWxzZSBpZiAoY2xhc3NOYW1lLmluZGV4T2YodmFsdWUpIDwgMCkge1xuICAgICAgZWxlbWVudC5jbGFzc05hbWUgPSBcIlwiLmNvbmNhdChjbGFzc05hbWUsIFwiIFwiKS5jb25jYXQodmFsdWUpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogUmVtb3ZlIGNsYXNzZXMgZnJvbSB0aGUgZ2l2ZW4gZWxlbWVudC5cbiAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IC0gVGhlIHRhcmdldCBlbGVtZW50LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgLSBUaGUgY2xhc3NlcyB0byBiZSByZW1vdmVkLlxuICAgKi9cblxuICBmdW5jdGlvbiByZW1vdmVDbGFzcyhlbGVtZW50LCB2YWx1ZSkge1xuICAgIGlmICghZWxlbWVudCB8fCAhdmFsdWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoaXNOdW1iZXIoZWxlbWVudC5sZW5ndGgpKSB7XG4gICAgICBmb3JFYWNoKGVsZW1lbnQsIGZ1bmN0aW9uIChlbGVtKSB7XG4gICAgICAgIHJlbW92ZUNsYXNzKGVsZW0sIHZhbHVlKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChlbGVtZW50LmNsYXNzTGlzdCkge1xuICAgICAgZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKHZhbHVlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZWxlbWVudC5jbGFzc05hbWUuaW5kZXhPZih2YWx1ZSkgPj0gMCkge1xuICAgICAgZWxlbWVudC5jbGFzc05hbWUgPSBlbGVtZW50LmNsYXNzTmFtZS5yZXBsYWNlKHZhbHVlLCAnJyk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBBZGQgb3IgcmVtb3ZlIGNsYXNzZXMgZnJvbSB0aGUgZ2l2ZW4gZWxlbWVudC5cbiAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IC0gVGhlIHRhcmdldCBlbGVtZW50LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgLSBUaGUgY2xhc3NlcyB0byBiZSB0b2dnbGVkLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGFkZGVkIC0gQWRkIG9ubHkuXG4gICAqL1xuXG4gIGZ1bmN0aW9uIHRvZ2dsZUNsYXNzKGVsZW1lbnQsIHZhbHVlLCBhZGRlZCkge1xuICAgIGlmICghdmFsdWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoaXNOdW1iZXIoZWxlbWVudC5sZW5ndGgpKSB7XG4gICAgICBmb3JFYWNoKGVsZW1lbnQsIGZ1bmN0aW9uIChlbGVtKSB7XG4gICAgICAgIHRvZ2dsZUNsYXNzKGVsZW0sIHZhbHVlLCBhZGRlZCk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIElFMTAtMTEgZG9lc24ndCBzdXBwb3J0IHRoZSBzZWNvbmQgcGFyYW1ldGVyIG9mIGBjbGFzc0xpc3QudG9nZ2xlYFxuXG5cbiAgICBpZiAoYWRkZWQpIHtcbiAgICAgIGFkZENsYXNzKGVsZW1lbnQsIHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3ZlQ2xhc3MoZWxlbWVudCwgdmFsdWUpO1xuICAgIH1cbiAgfVxuICB2YXIgUkVHRVhQX0hZUEhFTkFURSA9IC8oW2EtelxcZF0pKFtBLVpdKS9nO1xuICAvKipcbiAgICogVHJhbnNmb3JtIHRoZSBnaXZlbiBzdHJpbmcgZnJvbSBjYW1lbENhc2UgdG8ga2ViYWItY2FzZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgLSBUaGUgdmFsdWUgdG8gdHJhbnNmb3JtLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgdHJhbnNmb3JtZWQgdmFsdWUuXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGh5cGhlbmF0ZSh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZS5yZXBsYWNlKFJFR0VYUF9IWVBIRU5BVEUsICckMS0kMicpLnRvTG93ZXJDYXNlKCk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBkYXRhIGZyb20gdGhlIGdpdmVuIGVsZW1lbnQuXG4gICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCAtIFRoZSB0YXJnZXQgZWxlbWVudC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgZGF0YSBrZXkgdG8gZ2V0LlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZGF0YSB2YWx1ZS5cbiAgICovXG5cbiAgZnVuY3Rpb24gZ2V0RGF0YShlbGVtZW50LCBuYW1lKSB7XG4gICAgaWYgKGlzT2JqZWN0KGVsZW1lbnRbbmFtZV0pKSB7XG4gICAgICByZXR1cm4gZWxlbWVudFtuYW1lXTtcbiAgICB9XG5cbiAgICBpZiAoZWxlbWVudC5kYXRhc2V0KSB7XG4gICAgICByZXR1cm4gZWxlbWVudC5kYXRhc2V0W25hbWVdO1xuICAgIH1cblxuICAgIHJldHVybiBlbGVtZW50LmdldEF0dHJpYnV0ZShcImRhdGEtXCIuY29uY2F0KGh5cGhlbmF0ZShuYW1lKSkpO1xuICB9XG4gIC8qKlxuICAgKiBTZXQgZGF0YSB0byB0aGUgZ2l2ZW4gZWxlbWVudC5cbiAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IC0gVGhlIHRhcmdldCBlbGVtZW50LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSBkYXRhIGtleSB0byBzZXQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBkYXRhIC0gVGhlIGRhdGEgdmFsdWUuXG4gICAqL1xuXG4gIGZ1bmN0aW9uIHNldERhdGEoZWxlbWVudCwgbmFtZSwgZGF0YSkge1xuICAgIGlmIChpc09iamVjdChkYXRhKSkge1xuICAgICAgZWxlbWVudFtuYW1lXSA9IGRhdGE7XG4gICAgfSBlbHNlIGlmIChlbGVtZW50LmRhdGFzZXQpIHtcbiAgICAgIGVsZW1lbnQuZGF0YXNldFtuYW1lXSA9IGRhdGE7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKFwiZGF0YS1cIi5jb25jYXQoaHlwaGVuYXRlKG5hbWUpKSwgZGF0YSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIG9uY2VTdXBwb3J0ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHN1cHBvcnRlZCA9IGZhbHNlO1xuXG4gICAgaWYgKElTX0JST1dTRVIpIHtcbiAgICAgIHZhciBvbmNlID0gZmFsc2U7XG5cbiAgICAgIHZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uIGxpc3RlbmVyKCkge307XG5cbiAgICAgIHZhciBvcHRpb25zID0gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAnb25jZScsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgc3VwcG9ydGVkID0gdHJ1ZTtcbiAgICAgICAgICByZXR1cm4gb25jZTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhpcyBzZXR0ZXIgY2FuIGZpeCBhIGBUeXBlRXJyb3JgIGluIHN0cmljdCBtb2RlXG4gICAgICAgICAqIHtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9FcnJvcnMvR2V0dGVyX29ubHl9XG4gICAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gdmFsdWUgLSBUaGUgdmFsdWUgdG8gc2V0XG4gICAgICAgICAqL1xuICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgICAgIG9uY2UgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBXSU5ET1cuYWRkRXZlbnRMaXN0ZW5lcigndGVzdCcsIGxpc3RlbmVyLCBvcHRpb25zKTtcbiAgICAgIFdJTkRPVy5yZW1vdmVFdmVudExpc3RlbmVyKCd0ZXN0JywgbGlzdGVuZXIsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIHJldHVybiBzdXBwb3J0ZWQ7XG4gIH0oKTtcbiAgLyoqXG4gICAqIFJlbW92ZSBldmVudCBsaXN0ZW5lciBmcm9tIHRoZSB0YXJnZXQgZWxlbWVudC5cbiAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IC0gVGhlIGV2ZW50IHRhcmdldC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgLSBUaGUgZXZlbnQgdHlwZShzKS5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbGlzdGVuZXIgLSBUaGUgZXZlbnQgbGlzdGVuZXIuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gVGhlIGV2ZW50IG9wdGlvbnMuXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXIoZWxlbWVudCwgdHlwZSwgbGlzdGVuZXIpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDoge307XG4gICAgdmFyIGhhbmRsZXIgPSBsaXN0ZW5lcjtcbiAgICB0eXBlLnRyaW0oKS5zcGxpdChSRUdFWFBfU1BBQ0VTKS5mb3JFYWNoKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKCFvbmNlU3VwcG9ydGVkKSB7XG4gICAgICAgIHZhciBsaXN0ZW5lcnMgPSBlbGVtZW50Lmxpc3RlbmVycztcblxuICAgICAgICBpZiAobGlzdGVuZXJzICYmIGxpc3RlbmVyc1tldmVudF0gJiYgbGlzdGVuZXJzW2V2ZW50XVtsaXN0ZW5lcl0pIHtcbiAgICAgICAgICBoYW5kbGVyID0gbGlzdGVuZXJzW2V2ZW50XVtsaXN0ZW5lcl07XG4gICAgICAgICAgZGVsZXRlIGxpc3RlbmVyc1tldmVudF1bbGlzdGVuZXJdO1xuXG4gICAgICAgICAgaWYgKE9iamVjdC5rZXlzKGxpc3RlbmVyc1tldmVudF0pLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZGVsZXRlIGxpc3RlbmVyc1tldmVudF07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKE9iamVjdC5rZXlzKGxpc3RlbmVycykubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBkZWxldGUgZWxlbWVudC5saXN0ZW5lcnM7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlciwgb3B0aW9ucyk7XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEFkZCBldmVudCBsaXN0ZW5lciB0byB0aGUgdGFyZ2V0IGVsZW1lbnQuXG4gICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCAtIFRoZSBldmVudCB0YXJnZXQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIC0gVGhlIGV2ZW50IHR5cGUocykuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyIC0gVGhlIGV2ZW50IGxpc3RlbmVyLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIFRoZSBldmVudCBvcHRpb25zLlxuICAgKi9cblxuICBmdW5jdGlvbiBhZGRMaXN0ZW5lcihlbGVtZW50LCB0eXBlLCBsaXN0ZW5lcikge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiB7fTtcbiAgICB2YXIgX2hhbmRsZXIgPSBsaXN0ZW5lcjtcbiAgICB0eXBlLnRyaW0oKS5zcGxpdChSRUdFWFBfU1BBQ0VTKS5mb3JFYWNoKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKG9wdGlvbnMub25jZSAmJiAhb25jZVN1cHBvcnRlZCkge1xuICAgICAgICB2YXIgX2VsZW1lbnQkbGlzdGVuZXJzID0gZWxlbWVudC5saXN0ZW5lcnMsXG4gICAgICAgICAgICBsaXN0ZW5lcnMgPSBfZWxlbWVudCRsaXN0ZW5lcnMgPT09IHZvaWQgMCA/IHt9IDogX2VsZW1lbnQkbGlzdGVuZXJzO1xuXG4gICAgICAgIF9oYW5kbGVyID0gZnVuY3Rpb24gaGFuZGxlcigpIHtcbiAgICAgICAgICBkZWxldGUgbGlzdGVuZXJzW2V2ZW50XVtsaXN0ZW5lcl07XG4gICAgICAgICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBfaGFuZGxlciwgb3B0aW9ucyk7XG5cbiAgICAgICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBsaXN0ZW5lci5hcHBseShlbGVtZW50LCBhcmdzKTtcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoIWxpc3RlbmVyc1tldmVudF0pIHtcbiAgICAgICAgICBsaXN0ZW5lcnNbZXZlbnRdID0ge307XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobGlzdGVuZXJzW2V2ZW50XVtsaXN0ZW5lcl0pIHtcbiAgICAgICAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyc1tldmVudF1bbGlzdGVuZXJdLCBvcHRpb25zKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxpc3RlbmVyc1tldmVudF1bbGlzdGVuZXJdID0gX2hhbmRsZXI7XG4gICAgICAgIGVsZW1lbnQubGlzdGVuZXJzID0gbGlzdGVuZXJzO1xuICAgICAgfVxuXG4gICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIF9oYW5kbGVyLCBvcHRpb25zKTtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogRGlzcGF0Y2ggZXZlbnQgb24gdGhlIHRhcmdldCBlbGVtZW50LlxuICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgLSBUaGUgZXZlbnQgdGFyZ2V0LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSAtIFRoZSBldmVudCB0eXBlKHMpLlxuICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YSAtIFRoZSBhZGRpdGlvbmFsIGV2ZW50IGRhdGEuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gVGhlIGFkZGl0aW9uYWwgZXZlbnQgb3B0aW9ucy5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IEluZGljYXRlIGlmIHRoZSBldmVudCBpcyBkZWZhdWx0IHByZXZlbnRlZCBvciBub3QuXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGRpc3BhdGNoRXZlbnQoZWxlbWVudCwgdHlwZSwgZGF0YSwgb3B0aW9ucykge1xuICAgIHZhciBldmVudDsgLy8gRXZlbnQgYW5kIEN1c3RvbUV2ZW50IG9uIElFOS0xMSBhcmUgZ2xvYmFsIG9iamVjdHMsIG5vdCBjb25zdHJ1Y3RvcnNcblxuICAgIGlmIChpc0Z1bmN0aW9uKEV2ZW50KSAmJiBpc0Z1bmN0aW9uKEN1c3RvbUV2ZW50KSkge1xuICAgICAgZXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQodHlwZSwgX29iamVjdFNwcmVhZDIoe1xuICAgICAgICBidWJibGVzOiB0cnVlLFxuICAgICAgICBjYW5jZWxhYmxlOiB0cnVlLFxuICAgICAgICBkZXRhaWw6IGRhdGFcbiAgICAgIH0sIG9wdGlvbnMpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnQ3VzdG9tRXZlbnQnKTtcbiAgICAgIGV2ZW50LmluaXRDdXN0b21FdmVudCh0eXBlLCB0cnVlLCB0cnVlLCBkYXRhKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZWxlbWVudC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgfVxuICAvKipcbiAgICogR2V0IHRoZSBvZmZzZXQgYmFzZSBvbiB0aGUgZG9jdW1lbnQuXG4gICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCAtIFRoZSB0YXJnZXQgZWxlbWVudC5cbiAgICogQHJldHVybnMge09iamVjdH0gVGhlIG9mZnNldCBkYXRhLlxuICAgKi9cblxuICBmdW5jdGlvbiBnZXRPZmZzZXQoZWxlbWVudCkge1xuICAgIHZhciBib3ggPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIHJldHVybiB7XG4gICAgICBsZWZ0OiBib3gubGVmdCArICh3aW5kb3cucGFnZVhPZmZzZXQgLSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50TGVmdCksXG4gICAgICB0b3A6IGJveC50b3AgKyAod2luZG93LnBhZ2VZT2Zmc2V0IC0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFRvcClcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBHZXQgdHJhbnNmb3JtcyBiYXNlIG9uIHRoZSBnaXZlbiBvYmplY3QuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmogLSBUaGUgdGFyZ2V0IG9iamVjdC5cbiAgICogQHJldHVybnMge3N0cmluZ30gQSBzdHJpbmcgY29udGFpbnMgdHJhbnNmb3JtIHZhbHVlcy5cbiAgICovXG5cbiAgZnVuY3Rpb24gZ2V0VHJhbnNmb3JtcyhfcmVmKSB7XG4gICAgdmFyIHJvdGF0ZSA9IF9yZWYucm90YXRlLFxuICAgICAgICBzY2FsZVggPSBfcmVmLnNjYWxlWCxcbiAgICAgICAgc2NhbGVZID0gX3JlZi5zY2FsZVksXG4gICAgICAgIHRyYW5zbGF0ZVggPSBfcmVmLnRyYW5zbGF0ZVgsXG4gICAgICAgIHRyYW5zbGF0ZVkgPSBfcmVmLnRyYW5zbGF0ZVk7XG4gICAgdmFyIHZhbHVlcyA9IFtdO1xuXG4gICAgaWYgKGlzTnVtYmVyKHRyYW5zbGF0ZVgpICYmIHRyYW5zbGF0ZVggIT09IDApIHtcbiAgICAgIHZhbHVlcy5wdXNoKFwidHJhbnNsYXRlWChcIi5jb25jYXQodHJhbnNsYXRlWCwgXCJweClcIikpO1xuICAgIH1cblxuICAgIGlmIChpc051bWJlcih0cmFuc2xhdGVZKSAmJiB0cmFuc2xhdGVZICE9PSAwKSB7XG4gICAgICB2YWx1ZXMucHVzaChcInRyYW5zbGF0ZVkoXCIuY29uY2F0KHRyYW5zbGF0ZVksIFwicHgpXCIpKTtcbiAgICB9IC8vIFJvdGF0ZSBzaG91bGQgY29tZSBmaXJzdCBiZWZvcmUgc2NhbGUgdG8gbWF0Y2ggb3JpZW50YXRpb24gdHJhbnNmb3JtXG5cblxuICAgIGlmIChpc051bWJlcihyb3RhdGUpICYmIHJvdGF0ZSAhPT0gMCkge1xuICAgICAgdmFsdWVzLnB1c2goXCJyb3RhdGUoXCIuY29uY2F0KHJvdGF0ZSwgXCJkZWcpXCIpKTtcbiAgICB9XG5cbiAgICBpZiAoaXNOdW1iZXIoc2NhbGVYKSAmJiBzY2FsZVggIT09IDEpIHtcbiAgICAgIHZhbHVlcy5wdXNoKFwic2NhbGVYKFwiLmNvbmNhdChzY2FsZVgsIFwiKVwiKSk7XG4gICAgfVxuXG4gICAgaWYgKGlzTnVtYmVyKHNjYWxlWSkgJiYgc2NhbGVZICE9PSAxKSB7XG4gICAgICB2YWx1ZXMucHVzaChcInNjYWxlWShcIi5jb25jYXQoc2NhbGVZLCBcIilcIikpO1xuICAgIH1cblxuICAgIHZhciB0cmFuc2Zvcm0gPSB2YWx1ZXMubGVuZ3RoID8gdmFsdWVzLmpvaW4oJyAnKSA6ICdub25lJztcbiAgICByZXR1cm4ge1xuICAgICAgV2Via2l0VHJhbnNmb3JtOiB0cmFuc2Zvcm0sXG4gICAgICBtc1RyYW5zZm9ybTogdHJhbnNmb3JtLFxuICAgICAgdHJhbnNmb3JtOiB0cmFuc2Zvcm1cbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBHZXQgYW4gaW1hZ2UgbmFtZSBmcm9tIGFuIGltYWdlIHVybC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHVybCAtIFRoZSB0YXJnZXQgdXJsLlxuICAgKiBAZXhhbXBsZVxuICAgKiAvLyBwaWN0dXJlLmpwZ1xuICAgKiBnZXRJbWFnZU5hbWVGcm9tVVJMKCdodHRwczovL2RvbWFpbi5jb20vcGF0aC90by9waWN0dXJlLmpwZz9zaXplPTEyODDDlzk2MCcpXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IEEgc3RyaW5nIGNvbnRhaW5zIHRoZSBpbWFnZSBuYW1lLlxuICAgKi9cblxuICBmdW5jdGlvbiBnZXRJbWFnZU5hbWVGcm9tVVJMKHVybCkge1xuICAgIHJldHVybiBpc1N0cmluZyh1cmwpID8gZGVjb2RlVVJJQ29tcG9uZW50KHVybC5yZXBsYWNlKC9eLipcXC8vLCAnJykucmVwbGFjZSgvWz8mI10uKiQvLCAnJykpIDogJyc7XG4gIH1cbiAgdmFyIElTX1NBRkFSSSA9IFdJTkRPVy5uYXZpZ2F0b3IgJiYgLyhNYWNpbnRvc2h8aVBob25lfGlQb2R8aVBhZCkuKkFwcGxlV2ViS2l0L2kudGVzdChXSU5ET1cubmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gIC8qKlxuICAgKiBHZXQgYW4gaW1hZ2UncyBuYXR1cmFsIHNpemVzLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaW1hZ2UgLSBUaGUgdGFyZ2V0IGltYWdlLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIFRoZSB2aWV3ZXIgb3B0aW9ucy5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgLSBUaGUgY2FsbGJhY2sgZnVuY3Rpb24uXG4gICAqIEByZXR1cm5zIHtIVE1MSW1hZ2VFbGVtZW50fSBUaGUgbmV3IGltYWdlLlxuICAgKi9cblxuICBmdW5jdGlvbiBnZXRJbWFnZU5hdHVyYWxTaXplcyhpbWFnZSwgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgICB2YXIgbmV3SW1hZ2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTsgLy8gTW9kZXJuIGJyb3dzZXJzIChleGNlcHQgU2FmYXJpKVxuXG4gICAgaWYgKGltYWdlLm5hdHVyYWxXaWR0aCAmJiAhSVNfU0FGQVJJKSB7XG4gICAgICBjYWxsYmFjayhpbWFnZS5uYXR1cmFsV2lkdGgsIGltYWdlLm5hdHVyYWxIZWlnaHQpO1xuICAgICAgcmV0dXJuIG5ld0ltYWdlO1xuICAgIH1cblxuICAgIHZhciBib2R5ID0gZG9jdW1lbnQuYm9keSB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cbiAgICBuZXdJbWFnZS5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBjYWxsYmFjayhuZXdJbWFnZS53aWR0aCwgbmV3SW1hZ2UuaGVpZ2h0KTtcblxuICAgICAgaWYgKCFJU19TQUZBUkkpIHtcbiAgICAgICAgYm9keS5yZW1vdmVDaGlsZChuZXdJbWFnZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGZvckVhY2gob3B0aW9ucy5pbmhlcml0ZWRBdHRyaWJ1dGVzLCBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgdmFyIHZhbHVlID0gaW1hZ2UuZ2V0QXR0cmlidXRlKG5hbWUpO1xuXG4gICAgICBpZiAodmFsdWUgIT09IG51bGwpIHtcbiAgICAgICAgbmV3SW1hZ2Uuc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBuZXdJbWFnZS5zcmMgPSBpbWFnZS5zcmM7IC8vIGlPUyBTYWZhcmkgd2lsbCBjb252ZXJ0IHRoZSBpbWFnZSBhdXRvbWF0aWNhbGx5XG4gICAgLy8gd2l0aCBpdHMgb3JpZW50YXRpb24gb25jZSBhcHBlbmQgaXQgaW50byBET01cblxuICAgIGlmICghSVNfU0FGQVJJKSB7XG4gICAgICBuZXdJbWFnZS5zdHlsZS5jc3NUZXh0ID0gJ2xlZnQ6MDsnICsgJ21heC1oZWlnaHQ6bm9uZSFpbXBvcnRhbnQ7JyArICdtYXgtd2lkdGg6bm9uZSFpbXBvcnRhbnQ7JyArICdtaW4taGVpZ2h0OjAhaW1wb3J0YW50OycgKyAnbWluLXdpZHRoOjAhaW1wb3J0YW50OycgKyAnb3BhY2l0eTowOycgKyAncG9zaXRpb246YWJzb2x1dGU7JyArICd0b3A6MDsnICsgJ3otaW5kZXg6LTE7JztcbiAgICAgIGJvZHkuYXBwZW5kQ2hpbGQobmV3SW1hZ2UpO1xuICAgIH1cblxuICAgIHJldHVybiBuZXdJbWFnZTtcbiAgfVxuICAvKipcbiAgICogR2V0IHRoZSByZWxhdGVkIGNsYXNzIG5hbWUgb2YgYSByZXNwb25zaXZlIHR5cGUgbnVtYmVyLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSAtIFRoZSByZXNwb25zaXZlIHR5cGUuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSByZWxhdGVkIGNsYXNzIG5hbWUuXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGdldFJlc3BvbnNpdmVDbGFzcyh0eXBlKSB7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIHJldHVybiBDTEFTU19ISURFX1hTX0RPV047XG5cbiAgICAgIGNhc2UgMzpcbiAgICAgICAgcmV0dXJuIENMQVNTX0hJREVfU01fRE9XTjtcblxuICAgICAgY2FzZSA0OlxuICAgICAgICByZXR1cm4gQ0xBU1NfSElERV9NRF9ET1dOO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBHZXQgdGhlIG1heCByYXRpbyBvZiBhIGdyb3VwIG9mIHBvaW50ZXJzLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcG9pbnRlcnMgLSBUaGUgdGFyZ2V0IHBvaW50ZXJzLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgcmVzdWx0IHJhdGlvLlxuICAgKi9cblxuICBmdW5jdGlvbiBnZXRNYXhab29tUmF0aW8ocG9pbnRlcnMpIHtcbiAgICB2YXIgcG9pbnRlcnMyID0gX29iamVjdFNwcmVhZDIoe30sIHBvaW50ZXJzKTtcblxuICAgIHZhciByYXRpb3MgPSBbXTtcbiAgICBmb3JFYWNoKHBvaW50ZXJzLCBmdW5jdGlvbiAocG9pbnRlciwgcG9pbnRlcklkKSB7XG4gICAgICBkZWxldGUgcG9pbnRlcnMyW3BvaW50ZXJJZF07XG4gICAgICBmb3JFYWNoKHBvaW50ZXJzMiwgZnVuY3Rpb24gKHBvaW50ZXIyKSB7XG4gICAgICAgIHZhciB4MSA9IE1hdGguYWJzKHBvaW50ZXIuc3RhcnRYIC0gcG9pbnRlcjIuc3RhcnRYKTtcbiAgICAgICAgdmFyIHkxID0gTWF0aC5hYnMocG9pbnRlci5zdGFydFkgLSBwb2ludGVyMi5zdGFydFkpO1xuICAgICAgICB2YXIgeDIgPSBNYXRoLmFicyhwb2ludGVyLmVuZFggLSBwb2ludGVyMi5lbmRYKTtcbiAgICAgICAgdmFyIHkyID0gTWF0aC5hYnMocG9pbnRlci5lbmRZIC0gcG9pbnRlcjIuZW5kWSk7XG4gICAgICAgIHZhciB6MSA9IE1hdGguc3FydCh4MSAqIHgxICsgeTEgKiB5MSk7XG4gICAgICAgIHZhciB6MiA9IE1hdGguc3FydCh4MiAqIHgyICsgeTIgKiB5Mik7XG4gICAgICAgIHZhciByYXRpbyA9ICh6MiAtIHoxKSAvIHoxO1xuICAgICAgICByYXRpb3MucHVzaChyYXRpbyk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByYXRpb3Muc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIE1hdGguYWJzKGEpIDwgTWF0aC5hYnMoYik7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJhdGlvc1swXTtcbiAgfVxuICAvKipcbiAgICogR2V0IGEgcG9pbnRlciBmcm9tIGFuIGV2ZW50IG9iamVjdC5cbiAgICogQHBhcmFtIHtPYmplY3R9IGV2ZW50IC0gVGhlIHRhcmdldCBldmVudCBvYmplY3QuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gZW5kT25seSAtIEluZGljYXRlcyBpZiBvbmx5IHJldHVybnMgdGhlIGVuZCBwb2ludCBjb29yZGluYXRlIG9yIG5vdC5cbiAgICogQHJldHVybnMge09iamVjdH0gVGhlIHJlc3VsdCBwb2ludGVyIGNvbnRhaW5zIHN0YXJ0IGFuZC9vciBlbmQgcG9pbnQgY29vcmRpbmF0ZXMuXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGdldFBvaW50ZXIoX3JlZjIsIGVuZE9ubHkpIHtcbiAgICB2YXIgcGFnZVggPSBfcmVmMi5wYWdlWCxcbiAgICAgICAgcGFnZVkgPSBfcmVmMi5wYWdlWTtcbiAgICB2YXIgZW5kID0ge1xuICAgICAgZW5kWDogcGFnZVgsXG4gICAgICBlbmRZOiBwYWdlWVxuICAgIH07XG4gICAgcmV0dXJuIGVuZE9ubHkgPyBlbmQgOiBfb2JqZWN0U3ByZWFkMih7XG4gICAgICB0aW1lU3RhbXA6IERhdGUubm93KCksXG4gICAgICBzdGFydFg6IHBhZ2VYLFxuICAgICAgc3RhcnRZOiBwYWdlWVxuICAgIH0sIGVuZCk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgY2VudGVyIHBvaW50IGNvb3JkaW5hdGUgb2YgYSBncm91cCBvZiBwb2ludGVycy5cbiAgICogQHBhcmFtIHtPYmplY3R9IHBvaW50ZXJzIC0gVGhlIHRhcmdldCBwb2ludGVycy5cbiAgICogQHJldHVybnMge09iamVjdH0gVGhlIGNlbnRlciBwb2ludCBjb29yZGluYXRlLlxuICAgKi9cblxuICBmdW5jdGlvbiBnZXRQb2ludGVyc0NlbnRlcihwb2ludGVycykge1xuICAgIHZhciBwYWdlWCA9IDA7XG4gICAgdmFyIHBhZ2VZID0gMDtcbiAgICB2YXIgY291bnQgPSAwO1xuICAgIGZvckVhY2gocG9pbnRlcnMsIGZ1bmN0aW9uIChfcmVmMykge1xuICAgICAgdmFyIHN0YXJ0WCA9IF9yZWYzLnN0YXJ0WCxcbiAgICAgICAgICBzdGFydFkgPSBfcmVmMy5zdGFydFk7XG4gICAgICBwYWdlWCArPSBzdGFydFg7XG4gICAgICBwYWdlWSArPSBzdGFydFk7XG4gICAgICBjb3VudCArPSAxO1xuICAgIH0pO1xuICAgIHBhZ2VYIC89IGNvdW50O1xuICAgIHBhZ2VZIC89IGNvdW50O1xuICAgIHJldHVybiB7XG4gICAgICBwYWdlWDogcGFnZVgsXG4gICAgICBwYWdlWTogcGFnZVlcbiAgICB9O1xuICB9XG5cbiAgdmFyIHJlbmRlciA9IHtcbiAgICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHRoaXMuaW5pdENvbnRhaW5lcigpO1xuICAgICAgdGhpcy5pbml0Vmlld2VyKCk7XG4gICAgICB0aGlzLmluaXRMaXN0KCk7XG4gICAgICB0aGlzLnJlbmRlclZpZXdlcigpO1xuICAgIH0sXG4gICAgaW5pdEJvZHk6IGZ1bmN0aW9uIGluaXRCb2R5KCkge1xuICAgICAgdmFyIG93bmVyRG9jdW1lbnQgPSB0aGlzLmVsZW1lbnQub3duZXJEb2N1bWVudDtcbiAgICAgIHZhciBib2R5ID0gb3duZXJEb2N1bWVudC5ib2R5IHx8IG93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgdGhpcy5ib2R5ID0gYm9keTtcbiAgICAgIHRoaXMuc2Nyb2xsYmFyV2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aCAtIG93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoO1xuICAgICAgdGhpcy5pbml0aWFsQm9keVBhZGRpbmdSaWdodCA9IGJvZHkuc3R5bGUucGFkZGluZ1JpZ2h0O1xuICAgICAgdGhpcy5pbml0aWFsQm9keUNvbXB1dGVkUGFkZGluZ1JpZ2h0ID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoYm9keSkucGFkZGluZ1JpZ2h0O1xuICAgIH0sXG4gICAgaW5pdENvbnRhaW5lcjogZnVuY3Rpb24gaW5pdENvbnRhaW5lcigpIHtcbiAgICAgIHRoaXMuY29udGFpbmVyRGF0YSA9IHtcbiAgICAgICAgd2lkdGg6IHdpbmRvdy5pbm5lcldpZHRoLFxuICAgICAgICBoZWlnaHQ6IHdpbmRvdy5pbm5lckhlaWdodFxuICAgICAgfTtcbiAgICB9LFxuICAgIGluaXRWaWV3ZXI6IGZ1bmN0aW9uIGluaXRWaWV3ZXIoKSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucyxcbiAgICAgICAgICBwYXJlbnQgPSB0aGlzLnBhcmVudDtcbiAgICAgIHZhciB2aWV3ZXJEYXRhO1xuXG4gICAgICBpZiAob3B0aW9ucy5pbmxpbmUpIHtcbiAgICAgICAgdmlld2VyRGF0YSA9IHtcbiAgICAgICAgICB3aWR0aDogTWF0aC5tYXgocGFyZW50Lm9mZnNldFdpZHRoLCBvcHRpb25zLm1pbldpZHRoKSxcbiAgICAgICAgICBoZWlnaHQ6IE1hdGgubWF4KHBhcmVudC5vZmZzZXRIZWlnaHQsIG9wdGlvbnMubWluSGVpZ2h0KVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLnBhcmVudERhdGEgPSB2aWV3ZXJEYXRhO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5mdWxsZWQgfHwgIXZpZXdlckRhdGEpIHtcbiAgICAgICAgdmlld2VyRGF0YSA9IHRoaXMuY29udGFpbmVyRGF0YTtcbiAgICAgIH1cblxuICAgICAgdGhpcy52aWV3ZXJEYXRhID0gYXNzaWduKHt9LCB2aWV3ZXJEYXRhKTtcbiAgICB9LFxuICAgIHJlbmRlclZpZXdlcjogZnVuY3Rpb24gcmVuZGVyVmlld2VyKCkge1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5pbmxpbmUgJiYgIXRoaXMuZnVsbGVkKSB7XG4gICAgICAgIHNldFN0eWxlKHRoaXMudmlld2VyLCB0aGlzLnZpZXdlckRhdGEpO1xuICAgICAgfVxuICAgIH0sXG4gICAgaW5pdExpc3Q6IGZ1bmN0aW9uIGluaXRMaXN0KCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgdmFyIGVsZW1lbnQgPSB0aGlzLmVsZW1lbnQsXG4gICAgICAgICAgb3B0aW9ucyA9IHRoaXMub3B0aW9ucyxcbiAgICAgICAgICBsaXN0ID0gdGhpcy5saXN0O1xuICAgICAgdmFyIGl0ZW1zID0gW107IC8vIGluaXRMaXN0IG1heSBiZSBjYWxsZWQgaW4gdGhpcy51cGRhdGUsIHNvIHNob3VsZCBrZWVwIGlkZW1wb3RlbnRcblxuICAgICAgbGlzdC5pbm5lckhUTUwgPSAnJztcbiAgICAgIGZvckVhY2godGhpcy5pbWFnZXMsIGZ1bmN0aW9uIChpbWFnZSwgaW5kZXgpIHtcbiAgICAgICAgdmFyIHNyYyA9IGltYWdlLnNyYztcbiAgICAgICAgdmFyIGFsdCA9IGltYWdlLmFsdCB8fCBnZXRJbWFnZU5hbWVGcm9tVVJMKHNyYyk7XG5cbiAgICAgICAgdmFyIHVybCA9IF90aGlzLmdldEltYWdlVVJMKGltYWdlKTtcblxuICAgICAgICBpZiAoc3JjIHx8IHVybCkge1xuICAgICAgICAgIHZhciBpdGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTtcbiAgICAgICAgICB2YXIgaW1nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7XG4gICAgICAgICAgZm9yRWFjaChvcHRpb25zLmluaGVyaXRlZEF0dHJpYnV0ZXMsIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBpbWFnZS5nZXRBdHRyaWJ1dGUobmFtZSk7XG5cbiAgICAgICAgICAgIGlmICh2YWx1ZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICBpbWcuc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICBpbWcuc3JjID0gc3JjIHx8IHVybDtcbiAgICAgICAgICBpbWcuYWx0ID0gYWx0O1xuICAgICAgICAgIGltZy5zZXRBdHRyaWJ1dGUoJ2RhdGEtb3JpZ2luYWwtdXJsJywgdXJsIHx8IHNyYyk7XG4gICAgICAgICAgaXRlbS5zZXRBdHRyaWJ1dGUoJ2RhdGEtaW5kZXgnLCBpbmRleCk7XG4gICAgICAgICAgaXRlbS5zZXRBdHRyaWJ1dGUoJ2RhdGEtdmlld2VyLWFjdGlvbicsICd2aWV3Jyk7XG4gICAgICAgICAgaXRlbS5zZXRBdHRyaWJ1dGUoJ3JvbGUnLCAnYnV0dG9uJyk7XG5cbiAgICAgICAgICBpZiAob3B0aW9ucy5rZXlib2FyZCkge1xuICAgICAgICAgICAgaXRlbS5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgMCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaXRlbS5hcHBlbmRDaGlsZChpbWcpO1xuICAgICAgICAgIGxpc3QuYXBwZW5kQ2hpbGQoaXRlbSk7XG4gICAgICAgICAgaXRlbXMucHVzaChpdGVtKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICB0aGlzLml0ZW1zID0gaXRlbXM7XG4gICAgICBmb3JFYWNoKGl0ZW1zLCBmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICB2YXIgaW1hZ2UgPSBpdGVtLmZpcnN0RWxlbWVudENoaWxkO1xuICAgICAgICB2YXIgb25Mb2FkO1xuICAgICAgICB2YXIgb25FcnJvcjtcbiAgICAgICAgc2V0RGF0YShpbWFnZSwgJ2ZpbGxlZCcsIHRydWUpO1xuXG4gICAgICAgIGlmIChvcHRpb25zLmxvYWRpbmcpIHtcbiAgICAgICAgICBhZGRDbGFzcyhpdGVtLCBDTEFTU19MT0FESU5HKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGFkZExpc3RlbmVyKGltYWdlLCBFVkVOVF9MT0FELCBvbkxvYWQgPSBmdW5jdGlvbiBvbkxvYWQoZXZlbnQpIHtcbiAgICAgICAgICByZW1vdmVMaXN0ZW5lcihpbWFnZSwgRVZFTlRfRVJST1IsIG9uRXJyb3IpO1xuXG4gICAgICAgICAgaWYgKG9wdGlvbnMubG9hZGluZykge1xuICAgICAgICAgICAgcmVtb3ZlQ2xhc3MoaXRlbSwgQ0xBU1NfTE9BRElORyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgX3RoaXMubG9hZEltYWdlKGV2ZW50KTtcbiAgICAgICAgfSwge1xuICAgICAgICAgIG9uY2U6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIGFkZExpc3RlbmVyKGltYWdlLCBFVkVOVF9FUlJPUiwgb25FcnJvciA9IGZ1bmN0aW9uIG9uRXJyb3IoKSB7XG4gICAgICAgICAgcmVtb3ZlTGlzdGVuZXIoaW1hZ2UsIEVWRU5UX0xPQUQsIG9uTG9hZCk7XG5cbiAgICAgICAgICBpZiAob3B0aW9ucy5sb2FkaW5nKSB7XG4gICAgICAgICAgICByZW1vdmVDbGFzcyhpdGVtLCBDTEFTU19MT0FESU5HKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIHtcbiAgICAgICAgICBvbmNlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIGlmIChvcHRpb25zLnRyYW5zaXRpb24pIHtcbiAgICAgICAgYWRkTGlzdGVuZXIoZWxlbWVudCwgRVZFTlRfVklFV0VELCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgYWRkQ2xhc3MobGlzdCwgQ0xBU1NfVFJBTlNJVElPTik7XG4gICAgICAgIH0sIHtcbiAgICAgICAgICBvbmNlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG4gICAgcmVuZGVyTGlzdDogZnVuY3Rpb24gcmVuZGVyTGlzdCgpIHtcbiAgICAgIHZhciBpbmRleCA9IHRoaXMuaW5kZXg7XG4gICAgICB2YXIgaXRlbSA9IHRoaXMuaXRlbXNbaW5kZXhdO1xuXG4gICAgICBpZiAoIWl0ZW0pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgbmV4dCA9IGl0ZW0ubmV4dEVsZW1lbnRTaWJsaW5nO1xuICAgICAgdmFyIGd1dHRlciA9IHBhcnNlSW50KHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKG5leHQgfHwgaXRlbSkubWFyZ2luTGVmdCwgMTApO1xuICAgICAgdmFyIG9mZnNldFdpZHRoID0gaXRlbS5vZmZzZXRXaWR0aDtcbiAgICAgIHZhciBvdXRlcldpZHRoID0gb2Zmc2V0V2lkdGggKyBndXR0ZXI7IC8vIFBsYWNlIHRoZSBhY3RpdmUgaXRlbSBpbiB0aGUgY2VudGVyIG9mIHRoZSBzY3JlZW5cblxuICAgICAgc2V0U3R5bGUodGhpcy5saXN0LCBhc3NpZ24oe1xuICAgICAgICB3aWR0aDogb3V0ZXJXaWR0aCAqIHRoaXMubGVuZ3RoIC0gZ3V0dGVyXG4gICAgICB9LCBnZXRUcmFuc2Zvcm1zKHtcbiAgICAgICAgdHJhbnNsYXRlWDogKHRoaXMudmlld2VyRGF0YS53aWR0aCAtIG9mZnNldFdpZHRoKSAvIDIgLSBvdXRlcldpZHRoICogaW5kZXhcbiAgICAgIH0pKSk7XG4gICAgfSxcbiAgICByZXNldExpc3Q6IGZ1bmN0aW9uIHJlc2V0TGlzdCgpIHtcbiAgICAgIHZhciBsaXN0ID0gdGhpcy5saXN0O1xuICAgICAgbGlzdC5pbm5lckhUTUwgPSAnJztcbiAgICAgIHJlbW92ZUNsYXNzKGxpc3QsIENMQVNTX1RSQU5TSVRJT04pO1xuICAgICAgc2V0U3R5bGUobGlzdCwgZ2V0VHJhbnNmb3Jtcyh7XG4gICAgICAgIHRyYW5zbGF0ZVg6IDBcbiAgICAgIH0pKTtcbiAgICB9LFxuICAgIGluaXRJbWFnZTogZnVuY3Rpb24gaW5pdEltYWdlKGRvbmUpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucyxcbiAgICAgICAgICBpbWFnZSA9IHRoaXMuaW1hZ2UsXG4gICAgICAgICAgdmlld2VyRGF0YSA9IHRoaXMudmlld2VyRGF0YTtcbiAgICAgIHZhciBmb290ZXJIZWlnaHQgPSB0aGlzLmZvb3Rlci5vZmZzZXRIZWlnaHQ7XG4gICAgICB2YXIgdmlld2VyV2lkdGggPSB2aWV3ZXJEYXRhLndpZHRoO1xuICAgICAgdmFyIHZpZXdlckhlaWdodCA9IE1hdGgubWF4KHZpZXdlckRhdGEuaGVpZ2h0IC0gZm9vdGVySGVpZ2h0LCBmb290ZXJIZWlnaHQpO1xuICAgICAgdmFyIG9sZEltYWdlRGF0YSA9IHRoaXMuaW1hZ2VEYXRhIHx8IHt9O1xuICAgICAgdmFyIHNpemluZ0ltYWdlO1xuICAgICAgdGhpcy5pbWFnZUluaXRpYWxpemluZyA9IHtcbiAgICAgICAgYWJvcnQ6IGZ1bmN0aW9uIGFib3J0KCkge1xuICAgICAgICAgIHNpemluZ0ltYWdlLm9ubG9hZCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBzaXppbmdJbWFnZSA9IGdldEltYWdlTmF0dXJhbFNpemVzKGltYWdlLCBvcHRpb25zLCBmdW5jdGlvbiAobmF0dXJhbFdpZHRoLCBuYXR1cmFsSGVpZ2h0KSB7XG4gICAgICAgIHZhciBhc3BlY3RSYXRpbyA9IG5hdHVyYWxXaWR0aCAvIG5hdHVyYWxIZWlnaHQ7XG4gICAgICAgIHZhciB3aWR0aCA9IHZpZXdlcldpZHRoO1xuICAgICAgICB2YXIgaGVpZ2h0ID0gdmlld2VySGVpZ2h0O1xuICAgICAgICBfdGhpczIuaW1hZ2VJbml0aWFsaXppbmcgPSBmYWxzZTtcblxuICAgICAgICBpZiAodmlld2VySGVpZ2h0ICogYXNwZWN0UmF0aW8gPiB2aWV3ZXJXaWR0aCkge1xuICAgICAgICAgIGhlaWdodCA9IHZpZXdlcldpZHRoIC8gYXNwZWN0UmF0aW87XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgd2lkdGggPSB2aWV3ZXJIZWlnaHQgKiBhc3BlY3RSYXRpbztcbiAgICAgICAgfVxuXG4gICAgICAgIHdpZHRoID0gTWF0aC5taW4od2lkdGggKiAwLjksIG5hdHVyYWxXaWR0aCk7XG4gICAgICAgIGhlaWdodCA9IE1hdGgubWluKGhlaWdodCAqIDAuOSwgbmF0dXJhbEhlaWdodCk7XG4gICAgICAgIHZhciBsZWZ0ID0gKHZpZXdlcldpZHRoIC0gd2lkdGgpIC8gMjtcbiAgICAgICAgdmFyIHRvcCA9ICh2aWV3ZXJIZWlnaHQgLSBoZWlnaHQpIC8gMjtcbiAgICAgICAgdmFyIGltYWdlRGF0YSA9IHtcbiAgICAgICAgICBsZWZ0OiBsZWZ0LFxuICAgICAgICAgIHRvcDogdG9wLFxuICAgICAgICAgIHg6IGxlZnQsXG4gICAgICAgICAgeTogdG9wLFxuICAgICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICAgICAgICBvbGRSYXRpbzogMSxcbiAgICAgICAgICByYXRpbzogd2lkdGggLyBuYXR1cmFsV2lkdGgsXG4gICAgICAgICAgYXNwZWN0UmF0aW86IGFzcGVjdFJhdGlvLFxuICAgICAgICAgIG5hdHVyYWxXaWR0aDogbmF0dXJhbFdpZHRoLFxuICAgICAgICAgIG5hdHVyYWxIZWlnaHQ6IG5hdHVyYWxIZWlnaHRcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGluaXRpYWxJbWFnZURhdGEgPSBhc3NpZ24oe30sIGltYWdlRGF0YSk7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMucm90YXRhYmxlKSB7XG4gICAgICAgICAgaW1hZ2VEYXRhLnJvdGF0ZSA9IG9sZEltYWdlRGF0YS5yb3RhdGUgfHwgMDtcbiAgICAgICAgICBpbml0aWFsSW1hZ2VEYXRhLnJvdGF0ZSA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucy5zY2FsYWJsZSkge1xuICAgICAgICAgIGltYWdlRGF0YS5zY2FsZVggPSBvbGRJbWFnZURhdGEuc2NhbGVYIHx8IDE7XG4gICAgICAgICAgaW1hZ2VEYXRhLnNjYWxlWSA9IG9sZEltYWdlRGF0YS5zY2FsZVkgfHwgMTtcbiAgICAgICAgICBpbml0aWFsSW1hZ2VEYXRhLnNjYWxlWCA9IDE7XG4gICAgICAgICAgaW5pdGlhbEltYWdlRGF0YS5zY2FsZVkgPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXMyLmltYWdlRGF0YSA9IGltYWdlRGF0YTtcbiAgICAgICAgX3RoaXMyLmluaXRpYWxJbWFnZURhdGEgPSBpbml0aWFsSW1hZ2VEYXRhO1xuXG4gICAgICAgIGlmIChkb25lKSB7XG4gICAgICAgICAgZG9uZSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9LFxuICAgIHJlbmRlckltYWdlOiBmdW5jdGlvbiByZW5kZXJJbWFnZShkb25lKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgdmFyIGltYWdlID0gdGhpcy5pbWFnZSxcbiAgICAgICAgICBpbWFnZURhdGEgPSB0aGlzLmltYWdlRGF0YTtcbiAgICAgIHNldFN0eWxlKGltYWdlLCBhc3NpZ24oe1xuICAgICAgICB3aWR0aDogaW1hZ2VEYXRhLndpZHRoLFxuICAgICAgICBoZWlnaHQ6IGltYWdlRGF0YS5oZWlnaHQsXG4gICAgICAgIC8vIFhYWDogTm90IHRvIHVzZSB0cmFuc2xhdGVYL1kgdG8gYXZvaWQgaW1hZ2Ugc2hha2luZyB3aGVuIHpvb21pbmdcbiAgICAgICAgbWFyZ2luTGVmdDogaW1hZ2VEYXRhLngsXG4gICAgICAgIG1hcmdpblRvcDogaW1hZ2VEYXRhLnlcbiAgICAgIH0sIGdldFRyYW5zZm9ybXMoaW1hZ2VEYXRhKSkpO1xuXG4gICAgICBpZiAoZG9uZSkge1xuICAgICAgICBpZiAoKHRoaXMudmlld2luZyB8fCB0aGlzLm1vdmluZyB8fCB0aGlzLnJvdGF0aW5nIHx8IHRoaXMuc2NhbGluZyB8fCB0aGlzLnpvb21pbmcpICYmIHRoaXMub3B0aW9ucy50cmFuc2l0aW9uICYmIGhhc0NsYXNzKGltYWdlLCBDTEFTU19UUkFOU0lUSU9OKSkge1xuICAgICAgICAgIHZhciBvblRyYW5zaXRpb25FbmQgPSBmdW5jdGlvbiBvblRyYW5zaXRpb25FbmQoKSB7XG4gICAgICAgICAgICBfdGhpczMuaW1hZ2VSZW5kZXJpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgdGhpcy5pbWFnZVJlbmRlcmluZyA9IHtcbiAgICAgICAgICAgIGFib3J0OiBmdW5jdGlvbiBhYm9ydCgpIHtcbiAgICAgICAgICAgICAgcmVtb3ZlTGlzdGVuZXIoaW1hZ2UsIEVWRU5UX1RSQU5TSVRJT05fRU5ELCBvblRyYW5zaXRpb25FbmQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgICAgYWRkTGlzdGVuZXIoaW1hZ2UsIEVWRU5UX1RSQU5TSVRJT05fRU5ELCBvblRyYW5zaXRpb25FbmQsIHtcbiAgICAgICAgICAgIG9uY2U6IHRydWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkb25lKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIHJlc2V0SW1hZ2U6IGZ1bmN0aW9uIHJlc2V0SW1hZ2UoKSB7XG4gICAgICAvLyB0aGlzLmltYWdlIG9ubHkgZGVmaW5lZCBhZnRlciB2aWV3ZWRcbiAgICAgIGlmICh0aGlzLnZpZXdpbmcgfHwgdGhpcy52aWV3ZWQpIHtcbiAgICAgICAgdmFyIGltYWdlID0gdGhpcy5pbWFnZTtcblxuICAgICAgICBpZiAodGhpcy52aWV3aW5nKSB7XG4gICAgICAgICAgdGhpcy52aWV3aW5nLmFib3J0KCk7XG4gICAgICAgIH1cblxuICAgICAgICBpbWFnZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGltYWdlKTtcbiAgICAgICAgdGhpcy5pbWFnZSA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHZhciBldmVudHMgPSB7XG4gICAgYmluZDogZnVuY3Rpb24gYmluZCgpIHtcbiAgICAgIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zLFxuICAgICAgICAgIHZpZXdlciA9IHRoaXMudmlld2VyLFxuICAgICAgICAgIGNhbnZhcyA9IHRoaXMuY2FudmFzO1xuICAgICAgdmFyIGRvY3VtZW50ID0gdGhpcy5lbGVtZW50Lm93bmVyRG9jdW1lbnQ7XG4gICAgICBhZGRMaXN0ZW5lcih2aWV3ZXIsIEVWRU5UX0NMSUNLLCB0aGlzLm9uQ2xpY2sgPSB0aGlzLmNsaWNrLmJpbmQodGhpcykpO1xuICAgICAgYWRkTGlzdGVuZXIodmlld2VyLCBFVkVOVF9EUkFHX1NUQVJULCB0aGlzLm9uRHJhZ1N0YXJ0ID0gdGhpcy5kcmFnc3RhcnQuYmluZCh0aGlzKSk7XG4gICAgICBhZGRMaXN0ZW5lcihjYW52YXMsIEVWRU5UX1BPSU5URVJfRE9XTiwgdGhpcy5vblBvaW50ZXJEb3duID0gdGhpcy5wb2ludGVyZG93bi5iaW5kKHRoaXMpKTtcbiAgICAgIGFkZExpc3RlbmVyKGRvY3VtZW50LCBFVkVOVF9QT0lOVEVSX01PVkUsIHRoaXMub25Qb2ludGVyTW92ZSA9IHRoaXMucG9pbnRlcm1vdmUuYmluZCh0aGlzKSk7XG4gICAgICBhZGRMaXN0ZW5lcihkb2N1bWVudCwgRVZFTlRfUE9JTlRFUl9VUCwgdGhpcy5vblBvaW50ZXJVcCA9IHRoaXMucG9pbnRlcnVwLmJpbmQodGhpcykpO1xuICAgICAgYWRkTGlzdGVuZXIoZG9jdW1lbnQsIEVWRU5UX0tFWV9ET1dOLCB0aGlzLm9uS2V5RG93biA9IHRoaXMua2V5ZG93bi5iaW5kKHRoaXMpKTtcbiAgICAgIGFkZExpc3RlbmVyKHdpbmRvdywgRVZFTlRfUkVTSVpFLCB0aGlzLm9uUmVzaXplID0gdGhpcy5yZXNpemUuYmluZCh0aGlzKSk7XG5cbiAgICAgIGlmIChvcHRpb25zLnpvb21hYmxlICYmIG9wdGlvbnMuem9vbU9uV2hlZWwpIHtcbiAgICAgICAgYWRkTGlzdGVuZXIodmlld2VyLCBFVkVOVF9XSEVFTCwgdGhpcy5vbldoZWVsID0gdGhpcy53aGVlbC5iaW5kKHRoaXMpLCB7XG4gICAgICAgICAgcGFzc2l2ZTogZmFsc2UsXG4gICAgICAgICAgY2FwdHVyZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKG9wdGlvbnMudG9nZ2xlT25EYmxjbGljaykge1xuICAgICAgICBhZGRMaXN0ZW5lcihjYW52YXMsIEVWRU5UX0RCTENMSUNLLCB0aGlzLm9uRGJsY2xpY2sgPSB0aGlzLmRibGNsaWNrLmJpbmQodGhpcykpO1xuICAgICAgfVxuICAgIH0sXG4gICAgdW5iaW5kOiBmdW5jdGlvbiB1bmJpbmQoKSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucyxcbiAgICAgICAgICB2aWV3ZXIgPSB0aGlzLnZpZXdlcixcbiAgICAgICAgICBjYW52YXMgPSB0aGlzLmNhbnZhcztcbiAgICAgIHZhciBkb2N1bWVudCA9IHRoaXMuZWxlbWVudC5vd25lckRvY3VtZW50O1xuICAgICAgcmVtb3ZlTGlzdGVuZXIodmlld2VyLCBFVkVOVF9DTElDSywgdGhpcy5vbkNsaWNrKTtcbiAgICAgIHJlbW92ZUxpc3RlbmVyKHZpZXdlciwgRVZFTlRfRFJBR19TVEFSVCwgdGhpcy5vbkRyYWdTdGFydCk7XG4gICAgICByZW1vdmVMaXN0ZW5lcihjYW52YXMsIEVWRU5UX1BPSU5URVJfRE9XTiwgdGhpcy5vblBvaW50ZXJEb3duKTtcbiAgICAgIHJlbW92ZUxpc3RlbmVyKGRvY3VtZW50LCBFVkVOVF9QT0lOVEVSX01PVkUsIHRoaXMub25Qb2ludGVyTW92ZSk7XG4gICAgICByZW1vdmVMaXN0ZW5lcihkb2N1bWVudCwgRVZFTlRfUE9JTlRFUl9VUCwgdGhpcy5vblBvaW50ZXJVcCk7XG4gICAgICByZW1vdmVMaXN0ZW5lcihkb2N1bWVudCwgRVZFTlRfS0VZX0RPV04sIHRoaXMub25LZXlEb3duKTtcbiAgICAgIHJlbW92ZUxpc3RlbmVyKHdpbmRvdywgRVZFTlRfUkVTSVpFLCB0aGlzLm9uUmVzaXplKTtcblxuICAgICAgaWYgKG9wdGlvbnMuem9vbWFibGUgJiYgb3B0aW9ucy56b29tT25XaGVlbCkge1xuICAgICAgICByZW1vdmVMaXN0ZW5lcih2aWV3ZXIsIEVWRU5UX1dIRUVMLCB0aGlzLm9uV2hlZWwsIHtcbiAgICAgICAgICBwYXNzaXZlOiBmYWxzZSxcbiAgICAgICAgICBjYXB0dXJlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAob3B0aW9ucy50b2dnbGVPbkRibGNsaWNrKSB7XG4gICAgICAgIHJlbW92ZUxpc3RlbmVyKGNhbnZhcywgRVZFTlRfREJMQ0xJQ0ssIHRoaXMub25EYmxjbGljayk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHZhciBoYW5kbGVycyA9IHtcbiAgICBjbGljazogZnVuY3Rpb24gY2xpY2soZXZlbnQpIHtcbiAgICAgIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zLFxuICAgICAgICAgIGltYWdlRGF0YSA9IHRoaXMuaW1hZ2VEYXRhO1xuICAgICAgdmFyIHRhcmdldCA9IGV2ZW50LnRhcmdldDtcbiAgICAgIHZhciBhY3Rpb24gPSBnZXREYXRhKHRhcmdldCwgREFUQV9BQ1RJT04pO1xuXG4gICAgICBpZiAoIWFjdGlvbiAmJiB0YXJnZXQubG9jYWxOYW1lID09PSAnaW1nJyAmJiB0YXJnZXQucGFyZW50RWxlbWVudC5sb2NhbE5hbWUgPT09ICdsaScpIHtcbiAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0LnBhcmVudEVsZW1lbnQ7XG4gICAgICAgIGFjdGlvbiA9IGdldERhdGEodGFyZ2V0LCBEQVRBX0FDVElPTik7XG4gICAgICB9IC8vIENhbmNlbCB0aGUgZW11bGF0ZWQgY2xpY2sgd2hlbiB0aGUgbmF0aXZlIGNsaWNrIGV2ZW50IHdhcyB0cmlnZ2VyZWQuXG5cblxuICAgICAgaWYgKElTX1RPVUNIX0RFVklDRSAmJiBldmVudC5pc1RydXN0ZWQgJiYgdGFyZ2V0ID09PSB0aGlzLmNhbnZhcykge1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5jbGlja0NhbnZhc1RpbWVvdXQpO1xuICAgICAgfVxuXG4gICAgICBzd2l0Y2ggKGFjdGlvbikge1xuICAgICAgICBjYXNlICdtaXgnOlxuICAgICAgICAgIGlmICh0aGlzLnBsYXllZCkge1xuICAgICAgICAgICAgdGhpcy5zdG9wKCk7XG4gICAgICAgICAgfSBlbHNlIGlmIChvcHRpb25zLmlubGluZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuZnVsbGVkKSB7XG4gICAgICAgICAgICAgIHRoaXMuZXhpdCgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhpcy5mdWxsKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ2hpZGUnOlxuICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ3ZpZXcnOlxuICAgICAgICAgIHRoaXMudmlldyhnZXREYXRhKHRhcmdldCwgJ2luZGV4JykpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ3pvb20taW4nOlxuICAgICAgICAgIHRoaXMuem9vbSgwLjEsIHRydWUpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ3pvb20tb3V0JzpcbiAgICAgICAgICB0aGlzLnpvb20oLTAuMSwgdHJ1ZSk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnb25lLXRvLW9uZSc6XG4gICAgICAgICAgdGhpcy50b2dnbGUoKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdyZXNldCc6XG4gICAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ3ByZXYnOlxuICAgICAgICAgIHRoaXMucHJldihvcHRpb25zLmxvb3ApO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ3BsYXknOlxuICAgICAgICAgIHRoaXMucGxheShvcHRpb25zLmZ1bGxzY3JlZW4pO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ25leHQnOlxuICAgICAgICAgIHRoaXMubmV4dChvcHRpb25zLmxvb3ApO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ3JvdGF0ZS1sZWZ0JzpcbiAgICAgICAgICB0aGlzLnJvdGF0ZSgtOTApO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ3JvdGF0ZS1yaWdodCc6XG4gICAgICAgICAgdGhpcy5yb3RhdGUoOTApO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ2ZsaXAtaG9yaXpvbnRhbCc6XG4gICAgICAgICAgdGhpcy5zY2FsZVgoLWltYWdlRGF0YS5zY2FsZVggfHwgLTEpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ2ZsaXAtdmVydGljYWwnOlxuICAgICAgICAgIHRoaXMuc2NhbGVZKC1pbWFnZURhdGEuc2NhbGVZIHx8IC0xKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGlmICh0aGlzLnBsYXllZCkge1xuICAgICAgICAgICAgdGhpcy5zdG9wKCk7XG4gICAgICAgICAgfVxuXG4gICAgICB9XG4gICAgfSxcbiAgICBkYmxjbGljazogZnVuY3Rpb24gZGJsY2xpY2soZXZlbnQpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgIGlmICh0aGlzLnZpZXdlZCAmJiBldmVudC50YXJnZXQgPT09IHRoaXMuaW1hZ2UpIHtcbiAgICAgICAgLy8gQ2FuY2VsIHRoZSBlbXVsYXRlZCBkb3VibGUgY2xpY2sgd2hlbiB0aGUgbmF0aXZlIGRibGNsaWNrIGV2ZW50IHdhcyB0cmlnZ2VyZWQuXG4gICAgICAgIGlmIChJU19UT1VDSF9ERVZJQ0UgJiYgZXZlbnQuaXNUcnVzdGVkKSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuZG91YmxlQ2xpY2tJbWFnZVRpbWVvdXQpO1xuICAgICAgICB9IC8vIFhYWDogTm8gcGFnZVgvWSBwcm9wZXJ0aWVzIGluIGN1c3RvbSBldmVudCwgZmFsbGJhY2sgdG8gdGhlIG9yaWdpbmFsIGV2ZW50LlxuXG5cbiAgICAgICAgdGhpcy50b2dnbGUoZXZlbnQuaXNUcnVzdGVkID8gZXZlbnQgOiBldmVudC5kZXRhaWwgJiYgZXZlbnQuZGV0YWlsLm9yaWdpbmFsRXZlbnQpO1xuICAgICAgfVxuICAgIH0sXG4gICAgbG9hZDogZnVuY3Rpb24gbG9hZCgpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIGlmICh0aGlzLnRpbWVvdXQpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dCk7XG4gICAgICAgIHRoaXMudGltZW91dCA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICB2YXIgZWxlbWVudCA9IHRoaXMuZWxlbWVudCxcbiAgICAgICAgICBvcHRpb25zID0gdGhpcy5vcHRpb25zLFxuICAgICAgICAgIGltYWdlID0gdGhpcy5pbWFnZSxcbiAgICAgICAgICBpbmRleCA9IHRoaXMuaW5kZXgsXG4gICAgICAgICAgdmlld2VyRGF0YSA9IHRoaXMudmlld2VyRGF0YTtcbiAgICAgIHJlbW92ZUNsYXNzKGltYWdlLCBDTEFTU19JTlZJU0lCTEUpO1xuXG4gICAgICBpZiAob3B0aW9ucy5sb2FkaW5nKSB7XG4gICAgICAgIHJlbW92ZUNsYXNzKHRoaXMuY2FudmFzLCBDTEFTU19MT0FESU5HKTtcbiAgICAgIH1cblxuICAgICAgaW1hZ2Uuc3R5bGUuY3NzVGV4dCA9ICdoZWlnaHQ6MDsnICsgXCJtYXJnaW4tbGVmdDpcIi5jb25jYXQodmlld2VyRGF0YS53aWR0aCAvIDIsIFwicHg7XCIpICsgXCJtYXJnaW4tdG9wOlwiLmNvbmNhdCh2aWV3ZXJEYXRhLmhlaWdodCAvIDIsIFwicHg7XCIpICsgJ21heC13aWR0aDpub25lIWltcG9ydGFudDsnICsgJ3Bvc2l0aW9uOnJlbGF0aXZlOycgKyAnd2lkdGg6MDsnO1xuICAgICAgdGhpcy5pbml0SW1hZ2UoZnVuY3Rpb24gKCkge1xuICAgICAgICB0b2dnbGVDbGFzcyhpbWFnZSwgQ0xBU1NfTU9WRSwgb3B0aW9ucy5tb3ZhYmxlKTtcbiAgICAgICAgdG9nZ2xlQ2xhc3MoaW1hZ2UsIENMQVNTX1RSQU5TSVRJT04sIG9wdGlvbnMudHJhbnNpdGlvbik7XG5cbiAgICAgICAgX3RoaXMucmVuZGVySW1hZ2UoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIF90aGlzLnZpZXdlZCA9IHRydWU7XG4gICAgICAgICAgX3RoaXMudmlld2luZyA9IGZhbHNlO1xuXG4gICAgICAgICAgaWYgKGlzRnVuY3Rpb24ob3B0aW9ucy52aWV3ZWQpKSB7XG4gICAgICAgICAgICBhZGRMaXN0ZW5lcihlbGVtZW50LCBFVkVOVF9WSUVXRUQsIG9wdGlvbnMudmlld2VkLCB7XG4gICAgICAgICAgICAgIG9uY2U6IHRydWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRpc3BhdGNoRXZlbnQoZWxlbWVudCwgRVZFTlRfVklFV0VELCB7XG4gICAgICAgICAgICBvcmlnaW5hbEltYWdlOiBfdGhpcy5pbWFnZXNbaW5kZXhdLFxuICAgICAgICAgICAgaW5kZXg6IGluZGV4LFxuICAgICAgICAgICAgaW1hZ2U6IGltYWdlXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgY2FuY2VsYWJsZTogZmFsc2VcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGxvYWRJbWFnZTogZnVuY3Rpb24gbG9hZEltYWdlKGV2ZW50KSB7XG4gICAgICB2YXIgaW1hZ2UgPSBldmVudC50YXJnZXQ7XG4gICAgICB2YXIgcGFyZW50ID0gaW1hZ2UucGFyZW50Tm9kZTtcbiAgICAgIHZhciBwYXJlbnRXaWR0aCA9IHBhcmVudC5vZmZzZXRXaWR0aCB8fCAzMDtcbiAgICAgIHZhciBwYXJlbnRIZWlnaHQgPSBwYXJlbnQub2Zmc2V0SGVpZ2h0IHx8IDUwO1xuICAgICAgdmFyIGZpbGxlZCA9ICEhZ2V0RGF0YShpbWFnZSwgJ2ZpbGxlZCcpO1xuICAgICAgZ2V0SW1hZ2VOYXR1cmFsU2l6ZXMoaW1hZ2UsIHRoaXMub3B0aW9ucywgZnVuY3Rpb24gKG5hdHVyYWxXaWR0aCwgbmF0dXJhbEhlaWdodCkge1xuICAgICAgICB2YXIgYXNwZWN0UmF0aW8gPSBuYXR1cmFsV2lkdGggLyBuYXR1cmFsSGVpZ2h0O1xuICAgICAgICB2YXIgd2lkdGggPSBwYXJlbnRXaWR0aDtcbiAgICAgICAgdmFyIGhlaWdodCA9IHBhcmVudEhlaWdodDtcblxuICAgICAgICBpZiAocGFyZW50SGVpZ2h0ICogYXNwZWN0UmF0aW8gPiBwYXJlbnRXaWR0aCkge1xuICAgICAgICAgIGlmIChmaWxsZWQpIHtcbiAgICAgICAgICAgIHdpZHRoID0gcGFyZW50SGVpZ2h0ICogYXNwZWN0UmF0aW87XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGhlaWdodCA9IHBhcmVudFdpZHRoIC8gYXNwZWN0UmF0aW87XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGZpbGxlZCkge1xuICAgICAgICAgIGhlaWdodCA9IHBhcmVudFdpZHRoIC8gYXNwZWN0UmF0aW87XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgd2lkdGggPSBwYXJlbnRIZWlnaHQgKiBhc3BlY3RSYXRpbztcbiAgICAgICAgfVxuXG4gICAgICAgIHNldFN0eWxlKGltYWdlLCBhc3NpZ24oe1xuICAgICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgICBoZWlnaHQ6IGhlaWdodFxuICAgICAgICB9LCBnZXRUcmFuc2Zvcm1zKHtcbiAgICAgICAgICB0cmFuc2xhdGVYOiAocGFyZW50V2lkdGggLSB3aWR0aCkgLyAyLFxuICAgICAgICAgIHRyYW5zbGF0ZVk6IChwYXJlbnRIZWlnaHQgLSBoZWlnaHQpIC8gMlxuICAgICAgICB9KSkpO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBrZXlkb3duOiBmdW5jdGlvbiBrZXlkb3duKGV2ZW50KSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcblxuICAgICAgaWYgKCFvcHRpb25zLmtleWJvYXJkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGtleUNvZGUgPSBldmVudC5rZXlDb2RlIHx8IGV2ZW50LndoaWNoIHx8IGV2ZW50LmNoYXJDb2RlO1xuXG4gICAgICBzd2l0Y2ggKGtleUNvZGUpIHtcbiAgICAgICAgLy8gRW50ZXJcbiAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgICBpZiAodGhpcy52aWV3ZXIuY29udGFpbnMoZXZlbnQudGFyZ2V0KSkge1xuICAgICAgICAgICAgdGhpcy5jbGljayhldmVudCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5mdWxsZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBzd2l0Y2ggKGtleUNvZGUpIHtcbiAgICAgICAgLy8gRXNjYXBlXG4gICAgICAgIGNhc2UgMjc6XG4gICAgICAgICAgaWYgKHRoaXMucGxheWVkKSB7XG4gICAgICAgICAgICB0aGlzLnN0b3AoKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKG9wdGlvbnMuaW5saW5lKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5mdWxsZWQpIHtcbiAgICAgICAgICAgICAgdGhpcy5leGl0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICAvLyBTcGFjZVxuXG4gICAgICAgIGNhc2UgMzI6XG4gICAgICAgICAgaWYgKHRoaXMucGxheWVkKSB7XG4gICAgICAgICAgICB0aGlzLnN0b3AoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgLy8gQXJyb3dMZWZ0XG5cbiAgICAgICAgY2FzZSAzNzpcbiAgICAgICAgICB0aGlzLnByZXYob3B0aW9ucy5sb29wKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgLy8gQXJyb3dVcFxuXG4gICAgICAgIGNhc2UgMzg6XG4gICAgICAgICAgLy8gUHJldmVudCBzY3JvbGwgb24gRmlyZWZveFxuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7IC8vIFpvb20gaW5cblxuICAgICAgICAgIHRoaXMuem9vbShvcHRpb25zLnpvb21SYXRpbywgdHJ1ZSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIC8vIEFycm93UmlnaHRcblxuICAgICAgICBjYXNlIDM5OlxuICAgICAgICAgIHRoaXMubmV4dChvcHRpb25zLmxvb3ApO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICAvLyBBcnJvd0Rvd25cblxuICAgICAgICBjYXNlIDQwOlxuICAgICAgICAgIC8vIFByZXZlbnQgc2Nyb2xsIG9uIEZpcmVmb3hcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOyAvLyBab29tIG91dFxuXG4gICAgICAgICAgdGhpcy56b29tKC1vcHRpb25zLnpvb21SYXRpbywgdHJ1ZSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIC8vIEN0cmwgKyAwXG5cbiAgICAgICAgY2FzZSA0ODogLy8gRmFsbCB0aHJvdWdoXG4gICAgICAgIC8vIEN0cmwgKyAxXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1mYWxsdGhyb3VnaFxuXG4gICAgICAgIGNhc2UgNDk6XG4gICAgICAgICAgaWYgKGV2ZW50LmN0cmxLZXkpIHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB0aGlzLnRvZ2dsZSgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH0sXG4gICAgZHJhZ3N0YXJ0OiBmdW5jdGlvbiBkcmFnc3RhcnQoZXZlbnQpIHtcbiAgICAgIGlmIChldmVudC50YXJnZXQubG9jYWxOYW1lID09PSAnaW1nJykge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgcG9pbnRlcmRvd246IGZ1bmN0aW9uIHBvaW50ZXJkb3duKGV2ZW50KSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucyxcbiAgICAgICAgICBwb2ludGVycyA9IHRoaXMucG9pbnRlcnM7XG4gICAgICB2YXIgYnV0dG9ucyA9IGV2ZW50LmJ1dHRvbnMsXG4gICAgICAgICAgYnV0dG9uID0gZXZlbnQuYnV0dG9uO1xuXG4gICAgICBpZiAoIXRoaXMudmlld2VkIHx8IHRoaXMuc2hvd2luZyB8fCB0aGlzLnZpZXdpbmcgfHwgdGhpcy5oaWRpbmcgLy8gSGFuZGxlIG1vdXNlIGV2ZW50IGFuZCBwb2ludGVyIGV2ZW50IGFuZCBpZ25vcmUgdG91Y2ggZXZlbnRcbiAgICAgIHx8IChldmVudC50eXBlID09PSAnbW91c2Vkb3duJyB8fCBldmVudC50eXBlID09PSAncG9pbnRlcmRvd24nICYmIGV2ZW50LnBvaW50ZXJUeXBlID09PSAnbW91c2UnKSAmJiAoIC8vIE5vIHByaW1hcnkgYnV0dG9uIChVc3VhbGx5IHRoZSBsZWZ0IGJ1dHRvbilcbiAgICAgIGlzTnVtYmVyKGJ1dHRvbnMpICYmIGJ1dHRvbnMgIT09IDEgfHwgaXNOdW1iZXIoYnV0dG9uKSAmJiBidXR0b24gIT09IDAgLy8gT3BlbiBjb250ZXh0IG1lbnVcbiAgICAgIHx8IGV2ZW50LmN0cmxLZXkpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gLy8gUHJldmVudCBkZWZhdWx0IGJlaGF2aW91cnMgYXMgcGFnZSB6b29taW5nIGluIHRvdWNoIGRldmljZXMuXG5cblxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgaWYgKGV2ZW50LmNoYW5nZWRUb3VjaGVzKSB7XG4gICAgICAgIGZvckVhY2goZXZlbnQuY2hhbmdlZFRvdWNoZXMsIGZ1bmN0aW9uICh0b3VjaCkge1xuICAgICAgICAgIHBvaW50ZXJzW3RvdWNoLmlkZW50aWZpZXJdID0gZ2V0UG9pbnRlcih0b3VjaCk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcG9pbnRlcnNbZXZlbnQucG9pbnRlcklkIHx8IDBdID0gZ2V0UG9pbnRlcihldmVudCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBhY3Rpb24gPSBvcHRpb25zLm1vdmFibGUgPyBBQ1RJT05fTU9WRSA6IGZhbHNlO1xuXG4gICAgICBpZiAob3B0aW9ucy56b29tT25Ub3VjaCAmJiBvcHRpb25zLnpvb21hYmxlICYmIE9iamVjdC5rZXlzKHBvaW50ZXJzKS5sZW5ndGggPiAxKSB7XG4gICAgICAgIGFjdGlvbiA9IEFDVElPTl9aT09NO1xuICAgICAgfSBlbHNlIGlmIChvcHRpb25zLnNsaWRlT25Ub3VjaCAmJiAoZXZlbnQucG9pbnRlclR5cGUgPT09ICd0b3VjaCcgfHwgZXZlbnQudHlwZSA9PT0gJ3RvdWNoc3RhcnQnKSAmJiB0aGlzLmlzU3dpdGNoYWJsZSgpKSB7XG4gICAgICAgIGFjdGlvbiA9IEFDVElPTl9TV0lUQ0g7XG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRpb25zLnRyYW5zaXRpb24gJiYgKGFjdGlvbiA9PT0gQUNUSU9OX01PVkUgfHwgYWN0aW9uID09PSBBQ1RJT05fWk9PTSkpIHtcbiAgICAgICAgcmVtb3ZlQ2xhc3ModGhpcy5pbWFnZSwgQ0xBU1NfVFJBTlNJVElPTik7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuYWN0aW9uID0gYWN0aW9uO1xuICAgIH0sXG4gICAgcG9pbnRlcm1vdmU6IGZ1bmN0aW9uIHBvaW50ZXJtb3ZlKGV2ZW50KSB7XG4gICAgICB2YXIgcG9pbnRlcnMgPSB0aGlzLnBvaW50ZXJzLFxuICAgICAgICAgIGFjdGlvbiA9IHRoaXMuYWN0aW9uO1xuXG4gICAgICBpZiAoIXRoaXMudmlld2VkIHx8ICFhY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICBpZiAoZXZlbnQuY2hhbmdlZFRvdWNoZXMpIHtcbiAgICAgICAgZm9yRWFjaChldmVudC5jaGFuZ2VkVG91Y2hlcywgZnVuY3Rpb24gKHRvdWNoKSB7XG4gICAgICAgICAgYXNzaWduKHBvaW50ZXJzW3RvdWNoLmlkZW50aWZpZXJdIHx8IHt9LCBnZXRQb2ludGVyKHRvdWNoLCB0cnVlKSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXNzaWduKHBvaW50ZXJzW2V2ZW50LnBvaW50ZXJJZCB8fCAwXSB8fCB7fSwgZ2V0UG9pbnRlcihldmVudCwgdHJ1ZSkpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmNoYW5nZShldmVudCk7XG4gICAgfSxcbiAgICBwb2ludGVydXA6IGZ1bmN0aW9uIHBvaW50ZXJ1cChldmVudCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zLFxuICAgICAgICAgIGFjdGlvbiA9IHRoaXMuYWN0aW9uLFxuICAgICAgICAgIHBvaW50ZXJzID0gdGhpcy5wb2ludGVycztcbiAgICAgIHZhciBwb2ludGVyO1xuXG4gICAgICBpZiAoZXZlbnQuY2hhbmdlZFRvdWNoZXMpIHtcbiAgICAgICAgZm9yRWFjaChldmVudC5jaGFuZ2VkVG91Y2hlcywgZnVuY3Rpb24gKHRvdWNoKSB7XG4gICAgICAgICAgcG9pbnRlciA9IHBvaW50ZXJzW3RvdWNoLmlkZW50aWZpZXJdO1xuICAgICAgICAgIGRlbGV0ZSBwb2ludGVyc1t0b3VjaC5pZGVudGlmaWVyXTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwb2ludGVyID0gcG9pbnRlcnNbZXZlbnQucG9pbnRlcklkIHx8IDBdO1xuICAgICAgICBkZWxldGUgcG9pbnRlcnNbZXZlbnQucG9pbnRlcklkIHx8IDBdO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWFjdGlvbikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgIGlmIChvcHRpb25zLnRyYW5zaXRpb24gJiYgKGFjdGlvbiA9PT0gQUNUSU9OX01PVkUgfHwgYWN0aW9uID09PSBBQ1RJT05fWk9PTSkpIHtcbiAgICAgICAgYWRkQ2xhc3ModGhpcy5pbWFnZSwgQ0xBU1NfVFJBTlNJVElPTik7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuYWN0aW9uID0gZmFsc2U7IC8vIEVtdWxhdGUgY2xpY2sgYW5kIGRvdWJsZSBjbGljayBpbiB0b3VjaCBkZXZpY2VzIHRvIHN1cHBvcnQgYmFja2Ryb3AgYW5kIGltYWdlIHpvb21pbmcgKCMyMTApLlxuXG4gICAgICBpZiAoSVNfVE9VQ0hfREVWSUNFICYmIGFjdGlvbiAhPT0gQUNUSU9OX1pPT00gJiYgcG9pbnRlciAmJiBEYXRlLm5vdygpIC0gcG9pbnRlci50aW1lU3RhbXAgPCA1MDApIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuY2xpY2tDYW52YXNUaW1lb3V0KTtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuZG91YmxlQ2xpY2tJbWFnZVRpbWVvdXQpO1xuXG4gICAgICAgIGlmIChvcHRpb25zLnRvZ2dsZU9uRGJsY2xpY2sgJiYgdGhpcy52aWV3ZWQgJiYgZXZlbnQudGFyZ2V0ID09PSB0aGlzLmltYWdlKSB7XG4gICAgICAgICAgaWYgKHRoaXMuaW1hZ2VDbGlja2VkKSB7XG4gICAgICAgICAgICB0aGlzLmltYWdlQ2xpY2tlZCA9IGZhbHNlOyAvLyBUaGlzIHRpbWVvdXQgd2lsbCBiZSBjbGVhcmVkIGxhdGVyIHdoZW4gYSBuYXRpdmUgZGJsY2xpY2sgZXZlbnQgaXMgdHJpZ2dlcmluZ1xuXG4gICAgICAgICAgICB0aGlzLmRvdWJsZUNsaWNrSW1hZ2VUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIGRpc3BhdGNoRXZlbnQoX3RoaXMyLmltYWdlLCBFVkVOVF9EQkxDTElDSywge1xuICAgICAgICAgICAgICAgIG9yaWdpbmFsRXZlbnQ6IGV2ZW50XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSwgNTApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmltYWdlQ2xpY2tlZCA9IHRydWU7IC8vIFRoZSBkZWZhdWx0IHRpbWluZyBvZiBhIGRvdWJsZSBjbGljayBpbiBXaW5kb3dzIGlzIDUwMCBtc1xuXG4gICAgICAgICAgICB0aGlzLmRvdWJsZUNsaWNrSW1hZ2VUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIF90aGlzMi5pbWFnZUNsaWNrZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIH0sIDUwMCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuaW1hZ2VDbGlja2VkID0gZmFsc2U7XG5cbiAgICAgICAgICBpZiAob3B0aW9ucy5iYWNrZHJvcCAmJiBvcHRpb25zLmJhY2tkcm9wICE9PSAnc3RhdGljJyAmJiBldmVudC50YXJnZXQgPT09IHRoaXMuY2FudmFzKSB7XG4gICAgICAgICAgICAvLyBUaGlzIHRpbWVvdXQgd2lsbCBiZSBjbGVhcmVkIGxhdGVyIHdoZW4gYSBuYXRpdmUgY2xpY2sgZXZlbnQgaXMgdHJpZ2dlcmluZ1xuICAgICAgICAgICAgdGhpcy5jbGlja0NhbnZhc1RpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgZGlzcGF0Y2hFdmVudChfdGhpczIuY2FudmFzLCBFVkVOVF9DTElDSywge1xuICAgICAgICAgICAgICAgIG9yaWdpbmFsRXZlbnQ6IGV2ZW50XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSwgNTApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgcmVzaXplOiBmdW5jdGlvbiByZXNpemUoKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgaWYgKCF0aGlzLmlzU2hvd24gfHwgdGhpcy5oaWRpbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5mdWxsZWQpIHtcbiAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICB0aGlzLmluaXRCb2R5KCk7XG4gICAgICAgIHRoaXMub3BlbigpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmluaXRDb250YWluZXIoKTtcbiAgICAgIHRoaXMuaW5pdFZpZXdlcigpO1xuICAgICAgdGhpcy5yZW5kZXJWaWV3ZXIoKTtcbiAgICAgIHRoaXMucmVuZGVyTGlzdCgpO1xuXG4gICAgICBpZiAodGhpcy52aWV3ZWQpIHtcbiAgICAgICAgdGhpcy5pbml0SW1hZ2UoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIF90aGlzMy5yZW5kZXJJbWFnZSgpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMucGxheWVkKSB7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZnVsbHNjcmVlbiAmJiB0aGlzLmZ1bGxlZCAmJiAhKGRvY3VtZW50LmZ1bGxzY3JlZW5FbGVtZW50IHx8IGRvY3VtZW50LndlYmtpdEZ1bGxzY3JlZW5FbGVtZW50IHx8IGRvY3VtZW50Lm1vekZ1bGxTY3JlZW5FbGVtZW50IHx8IGRvY3VtZW50Lm1zRnVsbHNjcmVlbkVsZW1lbnQpKSB7XG4gICAgICAgICAgdGhpcy5zdG9wKCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yRWFjaCh0aGlzLnBsYXllci5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaW1nJyksIGZ1bmN0aW9uIChpbWFnZSkge1xuICAgICAgICAgIGFkZExpc3RlbmVyKGltYWdlLCBFVkVOVF9MT0FELCBfdGhpczMubG9hZEltYWdlLmJpbmQoX3RoaXMzKSwge1xuICAgICAgICAgICAgb25jZTogdHJ1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGRpc3BhdGNoRXZlbnQoaW1hZ2UsIEVWRU5UX0xPQUQpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHdoZWVsOiBmdW5jdGlvbiB3aGVlbChldmVudCkge1xuICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICAgIGlmICghdGhpcy52aWV3ZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOyAvLyBMaW1pdCB3aGVlbCBzcGVlZCB0byBwcmV2ZW50IHpvb20gdG9vIGZhc3RcblxuICAgICAgaWYgKHRoaXMud2hlZWxpbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLndoZWVsaW5nID0gdHJ1ZTtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpczQud2hlZWxpbmcgPSBmYWxzZTtcbiAgICAgIH0sIDUwKTtcbiAgICAgIHZhciByYXRpbyA9IE51bWJlcih0aGlzLm9wdGlvbnMuem9vbVJhdGlvKSB8fCAwLjE7XG4gICAgICB2YXIgZGVsdGEgPSAxO1xuXG4gICAgICBpZiAoZXZlbnQuZGVsdGFZKSB7XG4gICAgICAgIGRlbHRhID0gZXZlbnQuZGVsdGFZID4gMCA/IDEgOiAtMTtcbiAgICAgIH0gZWxzZSBpZiAoZXZlbnQud2hlZWxEZWx0YSkge1xuICAgICAgICBkZWx0YSA9IC1ldmVudC53aGVlbERlbHRhIC8gMTIwO1xuICAgICAgfSBlbHNlIGlmIChldmVudC5kZXRhaWwpIHtcbiAgICAgICAgZGVsdGEgPSBldmVudC5kZXRhaWwgPiAwID8gMSA6IC0xO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnpvb20oLWRlbHRhICogcmF0aW8sIHRydWUsIGV2ZW50KTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIG1ldGhvZHMgPSB7XG4gICAgLyoqIFNob3cgdGhlIHZpZXdlciAob25seSBhdmFpbGFibGUgaW4gbW9kYWwgbW9kZSlcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpbW1lZGlhdGU9ZmFsc2VdIC0gSW5kaWNhdGVzIGlmIHNob3cgdGhlIHZpZXdlciBpbW1lZGlhdGVseSBvciBub3QuXG4gICAgICogQHJldHVybnMge1ZpZXdlcn0gdGhpc1xuICAgICAqL1xuICAgIHNob3c6IGZ1bmN0aW9uIHNob3coKSB7XG4gICAgICB2YXIgaW1tZWRpYXRlID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBmYWxzZTtcbiAgICAgIHZhciBlbGVtZW50ID0gdGhpcy5lbGVtZW50LFxuICAgICAgICAgIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cbiAgICAgIGlmIChvcHRpb25zLmlubGluZSB8fCB0aGlzLnNob3dpbmcgfHwgdGhpcy5pc1Nob3duIHx8IHRoaXMuc2hvd2luZykge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLnJlYWR5KSB7XG4gICAgICAgIHRoaXMuYnVpbGQoKTtcblxuICAgICAgICBpZiAodGhpcy5yZWFkeSkge1xuICAgICAgICAgIHRoaXMuc2hvdyhpbW1lZGlhdGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0Z1bmN0aW9uKG9wdGlvbnMuc2hvdykpIHtcbiAgICAgICAgYWRkTGlzdGVuZXIoZWxlbWVudCwgRVZFTlRfU0hPVywgb3B0aW9ucy5zaG93LCB7XG4gICAgICAgICAgb25jZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKGRpc3BhdGNoRXZlbnQoZWxlbWVudCwgRVZFTlRfU0hPVykgPT09IGZhbHNlIHx8ICF0aGlzLnJlYWR5KSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5oaWRpbmcpIHtcbiAgICAgICAgdGhpcy50cmFuc2l0aW9uaW5nLmFib3J0KCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc2hvd2luZyA9IHRydWU7XG4gICAgICB0aGlzLm9wZW4oKTtcbiAgICAgIHZhciB2aWV3ZXIgPSB0aGlzLnZpZXdlcjtcbiAgICAgIHJlbW92ZUNsYXNzKHZpZXdlciwgQ0xBU1NfSElERSk7XG4gICAgICB2aWV3ZXIuc2V0QXR0cmlidXRlKCdyb2xlJywgJ2RpYWxvZycpO1xuICAgICAgdmlld2VyLnNldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbGxlZGJ5JywgdGhpcy50aXRsZS5pZCk7XG4gICAgICB2aWV3ZXIuc2V0QXR0cmlidXRlKCdhcmlhLW1vZGFsJywgdHJ1ZSk7XG4gICAgICB2aWV3ZXIucmVtb3ZlQXR0cmlidXRlKCdhcmlhLWhpZGRlbicpO1xuXG4gICAgICBpZiAob3B0aW9ucy50cmFuc2l0aW9uICYmICFpbW1lZGlhdGUpIHtcbiAgICAgICAgdmFyIHNob3duID0gdGhpcy5zaG93bi5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLnRyYW5zaXRpb25pbmcgPSB7XG4gICAgICAgICAgYWJvcnQ6IGZ1bmN0aW9uIGFib3J0KCkge1xuICAgICAgICAgICAgcmVtb3ZlTGlzdGVuZXIodmlld2VyLCBFVkVOVF9UUkFOU0lUSU9OX0VORCwgc2hvd24pO1xuICAgICAgICAgICAgcmVtb3ZlQ2xhc3Modmlld2VyLCBDTEFTU19JTik7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBhZGRDbGFzcyh2aWV3ZXIsIENMQVNTX1RSQU5TSVRJT04pOyAvLyBGb3JjZSByZWZsb3cgdG8gZW5hYmxlIENTUzMgdHJhbnNpdGlvblxuXG4gICAgICAgIHZpZXdlci5pbml0aWFsT2Zmc2V0V2lkdGggPSB2aWV3ZXIub2Zmc2V0V2lkdGg7XG4gICAgICAgIGFkZExpc3RlbmVyKHZpZXdlciwgRVZFTlRfVFJBTlNJVElPTl9FTkQsIHNob3duLCB7XG4gICAgICAgICAgb25jZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgYWRkQ2xhc3Modmlld2VyLCBDTEFTU19JTik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhZGRDbGFzcyh2aWV3ZXIsIENMQVNTX0lOKTtcbiAgICAgICAgdGhpcy5zaG93bigpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogSGlkZSB0aGUgdmlld2VyIChvbmx5IGF2YWlsYWJsZSBpbiBtb2RhbCBtb2RlKVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2ltbWVkaWF0ZT1mYWxzZV0gLSBJbmRpY2F0ZXMgaWYgaGlkZSB0aGUgdmlld2VyIGltbWVkaWF0ZWx5IG9yIG5vdC5cbiAgICAgKiBAcmV0dXJucyB7Vmlld2VyfSB0aGlzXG4gICAgICovXG4gICAgaGlkZTogZnVuY3Rpb24gaGlkZSgpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIHZhciBpbW1lZGlhdGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuICAgICAgdmFyIGVsZW1lbnQgPSB0aGlzLmVsZW1lbnQsXG4gICAgICAgICAgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcblxuICAgICAgaWYgKG9wdGlvbnMuaW5saW5lIHx8IHRoaXMuaGlkaW5nIHx8ICEodGhpcy5pc1Nob3duIHx8IHRoaXMuc2hvd2luZykpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0Z1bmN0aW9uKG9wdGlvbnMuaGlkZSkpIHtcbiAgICAgICAgYWRkTGlzdGVuZXIoZWxlbWVudCwgRVZFTlRfSElERSwgb3B0aW9ucy5oaWRlLCB7XG4gICAgICAgICAgb25jZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKGRpc3BhdGNoRXZlbnQoZWxlbWVudCwgRVZFTlRfSElERSkgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5zaG93aW5nKSB7XG4gICAgICAgIHRoaXMudHJhbnNpdGlvbmluZy5hYm9ydCgpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmhpZGluZyA9IHRydWU7XG5cbiAgICAgIGlmICh0aGlzLnBsYXllZCkge1xuICAgICAgICB0aGlzLnN0b3AoKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy52aWV3aW5nKSB7XG4gICAgICAgIHRoaXMudmlld2luZy5hYm9ydCgpO1xuICAgICAgfVxuXG4gICAgICB2YXIgdmlld2VyID0gdGhpcy52aWV3ZXIsXG4gICAgICAgICAgaW1hZ2UgPSB0aGlzLmltYWdlO1xuXG4gICAgICB2YXIgaGlkZUltbWVkaWF0ZWx5ID0gZnVuY3Rpb24gaGlkZUltbWVkaWF0ZWx5KCkge1xuICAgICAgICByZW1vdmVDbGFzcyh2aWV3ZXIsIENMQVNTX0lOKTtcblxuICAgICAgICBfdGhpcy5oaWRkZW4oKTtcbiAgICAgIH07XG5cbiAgICAgIGlmIChvcHRpb25zLnRyYW5zaXRpb24gJiYgIWltbWVkaWF0ZSkge1xuICAgICAgICB2YXIgb25WaWV3ZXJUcmFuc2l0aW9uRW5kID0gZnVuY3Rpb24gb25WaWV3ZXJUcmFuc2l0aW9uRW5kKGV2ZW50KSB7XG4gICAgICAgICAgLy8gSWdub3JlIGFsbCBwcm9wYWdhdGluZyBgdHJhbnNpdGlvbmVuZGAgZXZlbnRzICgjMjc1KS5cbiAgICAgICAgICBpZiAoZXZlbnQgJiYgZXZlbnQudGFyZ2V0ID09PSB2aWV3ZXIpIHtcbiAgICAgICAgICAgIHJlbW92ZUxpc3RlbmVyKHZpZXdlciwgRVZFTlRfVFJBTlNJVElPTl9FTkQsIG9uVmlld2VyVHJhbnNpdGlvbkVuZCk7XG5cbiAgICAgICAgICAgIF90aGlzLmhpZGRlbigpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgb25JbWFnZVRyYW5zaXRpb25FbmQgPSBmdW5jdGlvbiBvbkltYWdlVHJhbnNpdGlvbkVuZCgpIHtcbiAgICAgICAgICAvLyBJbiBjYXNlIG9mIHNob3cgdGhlIHZpZXdlciBieSBgdmlld2VyLnNob3codHJ1ZSlgIHByZXZpb3VzbHkgKCM0MDcpLlxuICAgICAgICAgIGlmIChoYXNDbGFzcyh2aWV3ZXIsIENMQVNTX1RSQU5TSVRJT04pKSB7XG4gICAgICAgICAgICBhZGRMaXN0ZW5lcih2aWV3ZXIsIEVWRU5UX1RSQU5TSVRJT05fRU5ELCBvblZpZXdlclRyYW5zaXRpb25FbmQpO1xuICAgICAgICAgICAgcmVtb3ZlQ2xhc3Modmlld2VyLCBDTEFTU19JTik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGhpZGVJbW1lZGlhdGVseSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLnRyYW5zaXRpb25pbmcgPSB7XG4gICAgICAgICAgYWJvcnQ6IGZ1bmN0aW9uIGFib3J0KCkge1xuICAgICAgICAgICAgaWYgKF90aGlzLnZpZXdlZCAmJiBoYXNDbGFzcyhpbWFnZSwgQ0xBU1NfVFJBTlNJVElPTikpIHtcbiAgICAgICAgICAgICAgcmVtb3ZlTGlzdGVuZXIoaW1hZ2UsIEVWRU5UX1RSQU5TSVRJT05fRU5ELCBvbkltYWdlVHJhbnNpdGlvbkVuZCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NsYXNzKHZpZXdlciwgQ0xBU1NfVFJBTlNJVElPTikpIHtcbiAgICAgICAgICAgICAgcmVtb3ZlTGlzdGVuZXIodmlld2VyLCBFVkVOVF9UUkFOU0lUSU9OX0VORCwgb25WaWV3ZXJUcmFuc2l0aW9uRW5kKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH07IC8vIEluIGNhc2Ugb2YgaGlkaW5nIHRoZSB2aWV3ZXIgd2hlbiBob2xkaW5nIG9uIHRoZSBpbWFnZSAoIzI1NSksXG4gICAgICAgIC8vIG5vdGUgdGhhdCB0aGUgYENMQVNTX1RSQU5TSVRJT05gIGNsYXNzIHdpbGwgYmUgcmVtb3ZlZCBvbiBwb2ludGVyIGRvd24uXG5cbiAgICAgICAgaWYgKHRoaXMudmlld2VkICYmIGhhc0NsYXNzKGltYWdlLCBDTEFTU19UUkFOU0lUSU9OKSkge1xuICAgICAgICAgIGFkZExpc3RlbmVyKGltYWdlLCBFVkVOVF9UUkFOU0lUSU9OX0VORCwgb25JbWFnZVRyYW5zaXRpb25FbmQsIHtcbiAgICAgICAgICAgIG9uY2U6IHRydWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB0aGlzLnpvb21UbygwLCBmYWxzZSwgbnVsbCwgdHJ1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb25JbWFnZVRyYW5zaXRpb25FbmQoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaGlkZUltbWVkaWF0ZWx5KCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBWaWV3IG9uZSBvZiB0aGUgaW1hZ2VzIHdpdGggaW1hZ2UncyBpbmRleFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCAtIFRoZSBpbmRleCBvZiB0aGUgaW1hZ2UgdG8gdmlldy5cbiAgICAgKiBAcmV0dXJucyB7Vmlld2VyfSB0aGlzXG4gICAgICovXG4gICAgdmlldzogZnVuY3Rpb24gdmlldygpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgaW5kZXggPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHRoaXMub3B0aW9ucy5pbml0aWFsVmlld0luZGV4O1xuICAgICAgaW5kZXggPSBOdW1iZXIoaW5kZXgpIHx8IDA7XG5cbiAgICAgIGlmICh0aGlzLmhpZGluZyB8fCB0aGlzLnBsYXllZCB8fCBpbmRleCA8IDAgfHwgaW5kZXggPj0gdGhpcy5sZW5ndGggfHwgdGhpcy52aWV3ZWQgJiYgaW5kZXggPT09IHRoaXMuaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5pc1Nob3duKSB7XG4gICAgICAgIHRoaXMuaW5kZXggPSBpbmRleDtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2hvdygpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy52aWV3aW5nKSB7XG4gICAgICAgIHRoaXMudmlld2luZy5hYm9ydCgpO1xuICAgICAgfVxuXG4gICAgICB2YXIgZWxlbWVudCA9IHRoaXMuZWxlbWVudCxcbiAgICAgICAgICBvcHRpb25zID0gdGhpcy5vcHRpb25zLFxuICAgICAgICAgIHRpdGxlID0gdGhpcy50aXRsZSxcbiAgICAgICAgICBjYW52YXMgPSB0aGlzLmNhbnZhcztcbiAgICAgIHZhciBpdGVtID0gdGhpcy5pdGVtc1tpbmRleF07XG4gICAgICB2YXIgaW1nID0gaXRlbS5xdWVyeVNlbGVjdG9yKCdpbWcnKTtcbiAgICAgIHZhciB1cmwgPSBnZXREYXRhKGltZywgJ29yaWdpbmFsVXJsJyk7XG4gICAgICB2YXIgYWx0ID0gaW1nLmdldEF0dHJpYnV0ZSgnYWx0Jyk7XG4gICAgICB2YXIgaW1hZ2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcbiAgICAgIGZvckVhY2gob3B0aW9ucy5pbmhlcml0ZWRBdHRyaWJ1dGVzLCBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICB2YXIgdmFsdWUgPSBpbWcuZ2V0QXR0cmlidXRlKG5hbWUpO1xuXG4gICAgICAgIGlmICh2YWx1ZSAhPT0gbnVsbCkge1xuICAgICAgICAgIGltYWdlLnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaW1hZ2Uuc3JjID0gdXJsO1xuICAgICAgaW1hZ2UuYWx0ID0gYWx0O1xuXG4gICAgICBpZiAoaXNGdW5jdGlvbihvcHRpb25zLnZpZXcpKSB7XG4gICAgICAgIGFkZExpc3RlbmVyKGVsZW1lbnQsIEVWRU5UX1ZJRVcsIG9wdGlvbnMudmlldywge1xuICAgICAgICAgIG9uY2U6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChkaXNwYXRjaEV2ZW50KGVsZW1lbnQsIEVWRU5UX1ZJRVcsIHtcbiAgICAgICAgb3JpZ2luYWxJbWFnZTogdGhpcy5pbWFnZXNbaW5kZXhdLFxuICAgICAgICBpbmRleDogaW5kZXgsXG4gICAgICAgIGltYWdlOiBpbWFnZVxuICAgICAgfSkgPT09IGZhbHNlIHx8ICF0aGlzLmlzU2hvd24gfHwgdGhpcy5oaWRpbmcgfHwgdGhpcy5wbGF5ZWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHZhciBhY3RpdmVJdGVtID0gdGhpcy5pdGVtc1t0aGlzLmluZGV4XTtcblxuICAgICAgaWYgKGFjdGl2ZUl0ZW0pIHtcbiAgICAgICAgcmVtb3ZlQ2xhc3MoYWN0aXZlSXRlbSwgQ0xBU1NfQUNUSVZFKTtcbiAgICAgICAgYWN0aXZlSXRlbS5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtc2VsZWN0ZWQnKTtcbiAgICAgIH1cblxuICAgICAgYWRkQ2xhc3MoaXRlbSwgQ0xBU1NfQUNUSVZFKTtcbiAgICAgIGl0ZW0uc2V0QXR0cmlidXRlKCdhcmlhLXNlbGVjdGVkJywgdHJ1ZSk7XG5cbiAgICAgIGlmIChvcHRpb25zLmZvY3VzKSB7XG4gICAgICAgIGl0ZW0uZm9jdXMoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5pbWFnZSA9IGltYWdlO1xuICAgICAgdGhpcy52aWV3ZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuaW5kZXggPSBpbmRleDtcbiAgICAgIHRoaXMuaW1hZ2VEYXRhID0ge307XG4gICAgICBhZGRDbGFzcyhpbWFnZSwgQ0xBU1NfSU5WSVNJQkxFKTtcblxuICAgICAgaWYgKG9wdGlvbnMubG9hZGluZykge1xuICAgICAgICBhZGRDbGFzcyhjYW52YXMsIENMQVNTX0xPQURJTkcpO1xuICAgICAgfVxuXG4gICAgICBjYW52YXMuaW5uZXJIVE1MID0gJyc7XG4gICAgICBjYW52YXMuYXBwZW5kQ2hpbGQoaW1hZ2UpOyAvLyBDZW50ZXIgY3VycmVudCBpdGVtXG5cbiAgICAgIHRoaXMucmVuZGVyTGlzdCgpOyAvLyBDbGVhciB0aXRsZVxuXG4gICAgICB0aXRsZS5pbm5lckhUTUwgPSAnJzsgLy8gR2VuZXJhdGUgdGl0bGUgYWZ0ZXIgdmlld2VkXG5cbiAgICAgIHZhciBvblZpZXdlZCA9IGZ1bmN0aW9uIG9uVmlld2VkKCkge1xuICAgICAgICB2YXIgaW1hZ2VEYXRhID0gX3RoaXMyLmltYWdlRGF0YTtcbiAgICAgICAgdmFyIHJlbmRlciA9IEFycmF5LmlzQXJyYXkob3B0aW9ucy50aXRsZSkgPyBvcHRpb25zLnRpdGxlWzFdIDogb3B0aW9ucy50aXRsZTtcbiAgICAgICAgdGl0bGUuaW5uZXJIVE1MID0gZXNjYXBlSFRNTEVudGl0aWVzKGlzRnVuY3Rpb24ocmVuZGVyKSA/IHJlbmRlci5jYWxsKF90aGlzMiwgaW1hZ2UsIGltYWdlRGF0YSkgOiBcIlwiLmNvbmNhdChhbHQsIFwiIChcIikuY29uY2F0KGltYWdlRGF0YS5uYXR1cmFsV2lkdGgsIFwiIFxceEQ3IFwiKS5jb25jYXQoaW1hZ2VEYXRhLm5hdHVyYWxIZWlnaHQsIFwiKVwiKSk7XG4gICAgICB9O1xuXG4gICAgICB2YXIgb25Mb2FkO1xuICAgICAgdmFyIG9uRXJyb3I7XG4gICAgICBhZGRMaXN0ZW5lcihlbGVtZW50LCBFVkVOVF9WSUVXRUQsIG9uVmlld2VkLCB7XG4gICAgICAgIG9uY2U6IHRydWVcbiAgICAgIH0pO1xuICAgICAgdGhpcy52aWV3aW5nID0ge1xuICAgICAgICBhYm9ydDogZnVuY3Rpb24gYWJvcnQoKSB7XG4gICAgICAgICAgcmVtb3ZlTGlzdGVuZXIoZWxlbWVudCwgRVZFTlRfVklFV0VELCBvblZpZXdlZCk7XG5cbiAgICAgICAgICBpZiAoaW1hZ2UuY29tcGxldGUpIHtcbiAgICAgICAgICAgIGlmIChfdGhpczIuaW1hZ2VSZW5kZXJpbmcpIHtcbiAgICAgICAgICAgICAgX3RoaXMyLmltYWdlUmVuZGVyaW5nLmFib3J0KCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKF90aGlzMi5pbWFnZUluaXRpYWxpemluZykge1xuICAgICAgICAgICAgICBfdGhpczIuaW1hZ2VJbml0aWFsaXppbmcuYWJvcnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gQ2FuY2VsIGRvd25sb2FkIHRvIHNhdmUgYmFuZHdpZHRoLlxuICAgICAgICAgICAgaW1hZ2Uuc3JjID0gJyc7XG4gICAgICAgICAgICByZW1vdmVMaXN0ZW5lcihpbWFnZSwgRVZFTlRfTE9BRCwgb25Mb2FkKTtcblxuICAgICAgICAgICAgaWYgKF90aGlzMi50aW1lb3V0KSB7XG4gICAgICAgICAgICAgIGNsZWFyVGltZW91dChfdGhpczIudGltZW91dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBpZiAoaW1hZ2UuY29tcGxldGUpIHtcbiAgICAgICAgdGhpcy5sb2FkKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhZGRMaXN0ZW5lcihpbWFnZSwgRVZFTlRfTE9BRCwgb25Mb2FkID0gZnVuY3Rpb24gb25Mb2FkKCkge1xuICAgICAgICAgIHJlbW92ZUxpc3RlbmVyKGltYWdlLCBFVkVOVF9FUlJPUiwgb25FcnJvcik7XG5cbiAgICAgICAgICBfdGhpczIubG9hZCgpO1xuICAgICAgICB9LCB7XG4gICAgICAgICAgb25jZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgYWRkTGlzdGVuZXIoaW1hZ2UsIEVWRU5UX0VSUk9SLCBvbkVycm9yID0gZnVuY3Rpb24gb25FcnJvcigpIHtcbiAgICAgICAgICByZW1vdmVMaXN0ZW5lcihpbWFnZSwgRVZFTlRfTE9BRCwgb25Mb2FkKTtcblxuICAgICAgICAgIGlmIChfdGhpczIudGltZW91dCkge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KF90aGlzMi50aW1lb3V0KTtcbiAgICAgICAgICAgIF90aGlzMi50aW1lb3V0ID0gZmFsc2U7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmVtb3ZlQ2xhc3MoaW1hZ2UsIENMQVNTX0lOVklTSUJMRSk7XG5cbiAgICAgICAgICBpZiAob3B0aW9ucy5sb2FkaW5nKSB7XG4gICAgICAgICAgICByZW1vdmVDbGFzcyhfdGhpczIuY2FudmFzLCBDTEFTU19MT0FESU5HKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIHtcbiAgICAgICAgICBvbmNlOiB0cnVlXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICh0aGlzLnRpbWVvdXQpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0KTtcbiAgICAgICAgfSAvLyBNYWtlIHRoZSBpbWFnZSB2aXNpYmxlIGlmIGl0IGZhaWxzIHRvIGxvYWQgd2l0aGluIDFzXG5cblxuICAgICAgICB0aGlzLnRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZW1vdmVDbGFzcyhpbWFnZSwgQ0xBU1NfSU5WSVNJQkxFKTtcbiAgICAgICAgICBfdGhpczIudGltZW91dCA9IGZhbHNlO1xuICAgICAgICB9LCAxMDAwKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFZpZXcgdGhlIHByZXZpb3VzIGltYWdlXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbbG9vcD1mYWxzZV0gLSBJbmRpY2F0ZSBpZiB2aWV3IHRoZSBsYXN0IG9uZVxuICAgICAqIHdoZW4gaXQgaXMgdGhlIGZpcnN0IG9uZSBhdCBwcmVzZW50LlxuICAgICAqIEByZXR1cm5zIHtWaWV3ZXJ9IHRoaXNcbiAgICAgKi9cbiAgICBwcmV2OiBmdW5jdGlvbiBwcmV2KCkge1xuICAgICAgdmFyIGxvb3AgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuICAgICAgdmFyIGluZGV4ID0gdGhpcy5pbmRleCAtIDE7XG5cbiAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgaW5kZXggPSBsb29wID8gdGhpcy5sZW5ndGggLSAxIDogMDtcbiAgICAgIH1cblxuICAgICAgdGhpcy52aWV3KGluZGV4KTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBWaWV3IHRoZSBuZXh0IGltYWdlXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbbG9vcD1mYWxzZV0gLSBJbmRpY2F0ZSBpZiB2aWV3IHRoZSBmaXJzdCBvbmVcbiAgICAgKiB3aGVuIGl0IGlzIHRoZSBsYXN0IG9uZSBhdCBwcmVzZW50LlxuICAgICAqIEByZXR1cm5zIHtWaWV3ZXJ9IHRoaXNcbiAgICAgKi9cbiAgICBuZXh0OiBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgdmFyIGxvb3AgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuICAgICAgdmFyIG1heEluZGV4ID0gdGhpcy5sZW5ndGggLSAxO1xuICAgICAgdmFyIGluZGV4ID0gdGhpcy5pbmRleCArIDE7XG5cbiAgICAgIGlmIChpbmRleCA+IG1heEluZGV4KSB7XG4gICAgICAgIGluZGV4ID0gbG9vcCA/IDAgOiBtYXhJbmRleDtcbiAgICAgIH1cblxuICAgICAgdGhpcy52aWV3KGluZGV4KTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBNb3ZlIHRoZSBpbWFnZSB3aXRoIHJlbGF0aXZlIG9mZnNldHMuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHggLSBUaGUgbW92aW5nIGRpc3RhbmNlIGluIHRoZSBob3Jpem9udGFsIGRpcmVjdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3k9eF0gVGhlIG1vdmluZyBkaXN0YW5jZSBpbiB0aGUgdmVydGljYWwgZGlyZWN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtWaWV3ZXJ9IHRoaXNcbiAgICAgKi9cbiAgICBtb3ZlOiBmdW5jdGlvbiBtb3ZlKHgpIHtcbiAgICAgIHZhciB5ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB4O1xuICAgICAgdmFyIGltYWdlRGF0YSA9IHRoaXMuaW1hZ2VEYXRhO1xuICAgICAgdGhpcy5tb3ZlVG8oaXNVbmRlZmluZWQoeCkgPyB4IDogaW1hZ2VEYXRhLnggKyBOdW1iZXIoeCksIGlzVW5kZWZpbmVkKHkpID8geSA6IGltYWdlRGF0YS55ICsgTnVtYmVyKHkpKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBNb3ZlIHRoZSBpbWFnZSB0byBhbiBhYnNvbHV0ZSBwb2ludC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0geCAtIFRoZSBuZXcgcG9zaXRpb24gaW4gdGhlIGhvcml6b250YWwgZGlyZWN0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbeT14XSAtIFRoZSBuZXcgcG9zaXRpb24gaW4gdGhlIHZlcnRpY2FsIGRpcmVjdGlvbi5cbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBbX29yaWdpbmFsRXZlbnQ9bnVsbF0gLSBUaGUgb3JpZ2luYWwgZXZlbnQgaWYgYW55LlxuICAgICAqIEByZXR1cm5zIHtWaWV3ZXJ9IHRoaXNcbiAgICAgKi9cbiAgICBtb3ZlVG86IGZ1bmN0aW9uIG1vdmVUbyh4KSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgdmFyIHkgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHg7XG5cbiAgICAgIHZhciBfb3JpZ2luYWxFdmVudCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogbnVsbDtcblxuICAgICAgdmFyIGVsZW1lbnQgPSB0aGlzLmVsZW1lbnQsXG4gICAgICAgICAgb3B0aW9ucyA9IHRoaXMub3B0aW9ucyxcbiAgICAgICAgICBpbWFnZURhdGEgPSB0aGlzLmltYWdlRGF0YTtcbiAgICAgIHggPSBOdW1iZXIoeCk7XG4gICAgICB5ID0gTnVtYmVyKHkpO1xuXG4gICAgICBpZiAodGhpcy52aWV3ZWQgJiYgIXRoaXMucGxheWVkICYmIG9wdGlvbnMubW92YWJsZSkge1xuICAgICAgICB2YXIgb2xkWCA9IGltYWdlRGF0YS54O1xuICAgICAgICB2YXIgb2xkWSA9IGltYWdlRGF0YS55O1xuICAgICAgICB2YXIgY2hhbmdlZCA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChpc051bWJlcih4KSkge1xuICAgICAgICAgIGNoYW5nZWQgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHggPSBvbGRYO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzTnVtYmVyKHkpKSB7XG4gICAgICAgICAgY2hhbmdlZCA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgeSA9IG9sZFk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2hhbmdlZCkge1xuICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKG9wdGlvbnMubW92ZSkpIHtcbiAgICAgICAgICAgIGFkZExpc3RlbmVyKGVsZW1lbnQsIEVWRU5UX01PVkUsIG9wdGlvbnMubW92ZSwge1xuICAgICAgICAgICAgICBvbmNlOiB0cnVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoZGlzcGF0Y2hFdmVudChlbGVtZW50LCBFVkVOVF9NT1ZFLCB7XG4gICAgICAgICAgICB4OiB4LFxuICAgICAgICAgICAgeTogeSxcbiAgICAgICAgICAgIG9sZFg6IG9sZFgsXG4gICAgICAgICAgICBvbGRZOiBvbGRZLFxuICAgICAgICAgICAgb3JpZ2luYWxFdmVudDogX29yaWdpbmFsRXZlbnRcbiAgICAgICAgICB9KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGltYWdlRGF0YS54ID0geDtcbiAgICAgICAgICBpbWFnZURhdGEueSA9IHk7XG4gICAgICAgICAgaW1hZ2VEYXRhLmxlZnQgPSB4O1xuICAgICAgICAgIGltYWdlRGF0YS50b3AgPSB5O1xuICAgICAgICAgIHRoaXMubW92aW5nID0gdHJ1ZTtcbiAgICAgICAgICB0aGlzLnJlbmRlckltYWdlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzMy5tb3ZpbmcgPSBmYWxzZTtcblxuICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24ob3B0aW9ucy5tb3ZlZCkpIHtcbiAgICAgICAgICAgICAgYWRkTGlzdGVuZXIoZWxlbWVudCwgRVZFTlRfTU9WRUQsIG9wdGlvbnMubW92ZWQsIHtcbiAgICAgICAgICAgICAgICBvbmNlOiB0cnVlXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkaXNwYXRjaEV2ZW50KGVsZW1lbnQsIEVWRU5UX01PVkVELCB7XG4gICAgICAgICAgICAgIHg6IHgsXG4gICAgICAgICAgICAgIHk6IHksXG4gICAgICAgICAgICAgIG9sZFg6IG9sZFgsXG4gICAgICAgICAgICAgIG9sZFk6IG9sZFksXG4gICAgICAgICAgICAgIG9yaWdpbmFsRXZlbnQ6IF9vcmlnaW5hbEV2ZW50XG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgIGNhbmNlbGFibGU6IGZhbHNlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUm90YXRlIHRoZSBpbWFnZSB3aXRoIGEgcmVsYXRpdmUgZGVncmVlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBkZWdyZWUgLSBUaGUgcm90YXRlIGRlZ3JlZS5cbiAgICAgKiBAcmV0dXJucyB7Vmlld2VyfSB0aGlzXG4gICAgICovXG4gICAgcm90YXRlOiBmdW5jdGlvbiByb3RhdGUoZGVncmVlKSB7XG4gICAgICB0aGlzLnJvdGF0ZVRvKCh0aGlzLmltYWdlRGF0YS5yb3RhdGUgfHwgMCkgKyBOdW1iZXIoZGVncmVlKSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUm90YXRlIHRoZSBpbWFnZSB0byBhbiBhYnNvbHV0ZSBkZWdyZWUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGRlZ3JlZSAtIFRoZSByb3RhdGUgZGVncmVlLlxuICAgICAqIEByZXR1cm5zIHtWaWV3ZXJ9IHRoaXNcbiAgICAgKi9cbiAgICByb3RhdGVUbzogZnVuY3Rpb24gcm90YXRlVG8oZGVncmVlKSB7XG4gICAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgICAgdmFyIGVsZW1lbnQgPSB0aGlzLmVsZW1lbnQsXG4gICAgICAgICAgb3B0aW9ucyA9IHRoaXMub3B0aW9ucyxcbiAgICAgICAgICBpbWFnZURhdGEgPSB0aGlzLmltYWdlRGF0YTtcbiAgICAgIGRlZ3JlZSA9IE51bWJlcihkZWdyZWUpO1xuXG4gICAgICBpZiAoaXNOdW1iZXIoZGVncmVlKSAmJiB0aGlzLnZpZXdlZCAmJiAhdGhpcy5wbGF5ZWQgJiYgb3B0aW9ucy5yb3RhdGFibGUpIHtcbiAgICAgICAgdmFyIG9sZERlZ3JlZSA9IGltYWdlRGF0YS5yb3RhdGU7XG5cbiAgICAgICAgaWYgKGlzRnVuY3Rpb24ob3B0aW9ucy5yb3RhdGUpKSB7XG4gICAgICAgICAgYWRkTGlzdGVuZXIoZWxlbWVudCwgRVZFTlRfUk9UQVRFLCBvcHRpb25zLnJvdGF0ZSwge1xuICAgICAgICAgICAgb25jZTogdHJ1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRpc3BhdGNoRXZlbnQoZWxlbWVudCwgRVZFTlRfUk9UQVRFLCB7XG4gICAgICAgICAgZGVncmVlOiBkZWdyZWUsXG4gICAgICAgICAgb2xkRGVncmVlOiBvbGREZWdyZWVcbiAgICAgICAgfSkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBpbWFnZURhdGEucm90YXRlID0gZGVncmVlO1xuICAgICAgICB0aGlzLnJvdGF0aW5nID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5yZW5kZXJJbWFnZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXM0LnJvdGF0aW5nID0gZmFsc2U7XG5cbiAgICAgICAgICBpZiAoaXNGdW5jdGlvbihvcHRpb25zLnJvdGF0ZWQpKSB7XG4gICAgICAgICAgICBhZGRMaXN0ZW5lcihlbGVtZW50LCBFVkVOVF9ST1RBVEVELCBvcHRpb25zLnJvdGF0ZWQsIHtcbiAgICAgICAgICAgICAgb25jZTogdHJ1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZGlzcGF0Y2hFdmVudChlbGVtZW50LCBFVkVOVF9ST1RBVEVELCB7XG4gICAgICAgICAgICBkZWdyZWU6IGRlZ3JlZSxcbiAgICAgICAgICAgIG9sZERlZ3JlZTogb2xkRGVncmVlXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgY2FuY2VsYWJsZTogZmFsc2VcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTY2FsZSB0aGUgaW1hZ2Ugb24gdGhlIHgtYXhpcy5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc2NhbGVYIC0gVGhlIHNjYWxlIHJhdGlvIG9uIHRoZSB4LWF4aXMuXG4gICAgICogQHJldHVybnMge1ZpZXdlcn0gdGhpc1xuICAgICAqL1xuICAgIHNjYWxlWDogZnVuY3Rpb24gc2NhbGVYKF9zY2FsZVgpIHtcbiAgICAgIHRoaXMuc2NhbGUoX3NjYWxlWCwgdGhpcy5pbWFnZURhdGEuc2NhbGVZKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTY2FsZSB0aGUgaW1hZ2Ugb24gdGhlIHktYXhpcy5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc2NhbGVZIC0gVGhlIHNjYWxlIHJhdGlvIG9uIHRoZSB5LWF4aXMuXG4gICAgICogQHJldHVybnMge1ZpZXdlcn0gdGhpc1xuICAgICAqL1xuICAgIHNjYWxlWTogZnVuY3Rpb24gc2NhbGVZKF9zY2FsZVkpIHtcbiAgICAgIHRoaXMuc2NhbGUodGhpcy5pbWFnZURhdGEuc2NhbGVYLCBfc2NhbGVZKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTY2FsZSB0aGUgaW1hZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHNjYWxlWCAtIFRoZSBzY2FsZSByYXRpbyBvbiB0aGUgeC1heGlzLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc2NhbGVZPXNjYWxlWF0gLSBUaGUgc2NhbGUgcmF0aW8gb24gdGhlIHktYXhpcy5cbiAgICAgKiBAcmV0dXJucyB7Vmlld2VyfSB0aGlzXG4gICAgICovXG4gICAgc2NhbGU6IGZ1bmN0aW9uIHNjYWxlKHNjYWxlWCkge1xuICAgICAgdmFyIF90aGlzNSA9IHRoaXM7XG5cbiAgICAgIHZhciBzY2FsZVkgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHNjYWxlWDtcbiAgICAgIHZhciBlbGVtZW50ID0gdGhpcy5lbGVtZW50LFxuICAgICAgICAgIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMsXG4gICAgICAgICAgaW1hZ2VEYXRhID0gdGhpcy5pbWFnZURhdGE7XG4gICAgICBzY2FsZVggPSBOdW1iZXIoc2NhbGVYKTtcbiAgICAgIHNjYWxlWSA9IE51bWJlcihzY2FsZVkpO1xuXG4gICAgICBpZiAodGhpcy52aWV3ZWQgJiYgIXRoaXMucGxheWVkICYmIG9wdGlvbnMuc2NhbGFibGUpIHtcbiAgICAgICAgdmFyIG9sZFNjYWxlWCA9IGltYWdlRGF0YS5zY2FsZVg7XG4gICAgICAgIHZhciBvbGRTY2FsZVkgPSBpbWFnZURhdGEuc2NhbGVZO1xuICAgICAgICB2YXIgY2hhbmdlZCA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChpc051bWJlcihzY2FsZVgpKSB7XG4gICAgICAgICAgY2hhbmdlZCA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2NhbGVYID0gb2xkU2NhbGVYO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzTnVtYmVyKHNjYWxlWSkpIHtcbiAgICAgICAgICBjaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzY2FsZVkgPSBvbGRTY2FsZVk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2hhbmdlZCkge1xuICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKG9wdGlvbnMuc2NhbGUpKSB7XG4gICAgICAgICAgICBhZGRMaXN0ZW5lcihlbGVtZW50LCBFVkVOVF9TQ0FMRSwgb3B0aW9ucy5zY2FsZSwge1xuICAgICAgICAgICAgICBvbmNlOiB0cnVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoZGlzcGF0Y2hFdmVudChlbGVtZW50LCBFVkVOVF9TQ0FMRSwge1xuICAgICAgICAgICAgc2NhbGVYOiBzY2FsZVgsXG4gICAgICAgICAgICBzY2FsZVk6IHNjYWxlWSxcbiAgICAgICAgICAgIG9sZFNjYWxlWDogb2xkU2NhbGVYLFxuICAgICAgICAgICAgb2xkU2NhbGVZOiBvbGRTY2FsZVlcbiAgICAgICAgICB9KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGltYWdlRGF0YS5zY2FsZVggPSBzY2FsZVg7XG4gICAgICAgICAgaW1hZ2VEYXRhLnNjYWxlWSA9IHNjYWxlWTtcbiAgICAgICAgICB0aGlzLnNjYWxpbmcgPSB0cnVlO1xuICAgICAgICAgIHRoaXMucmVuZGVySW1hZ2UoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXM1LnNjYWxpbmcgPSBmYWxzZTtcblxuICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24ob3B0aW9ucy5zY2FsZWQpKSB7XG4gICAgICAgICAgICAgIGFkZExpc3RlbmVyKGVsZW1lbnQsIEVWRU5UX1NDQUxFRCwgb3B0aW9ucy5zY2FsZWQsIHtcbiAgICAgICAgICAgICAgICBvbmNlOiB0cnVlXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkaXNwYXRjaEV2ZW50KGVsZW1lbnQsIEVWRU5UX1NDQUxFRCwge1xuICAgICAgICAgICAgICBzY2FsZVg6IHNjYWxlWCxcbiAgICAgICAgICAgICAgc2NhbGVZOiBzY2FsZVksXG4gICAgICAgICAgICAgIG9sZFNjYWxlWDogb2xkU2NhbGVYLFxuICAgICAgICAgICAgICBvbGRTY2FsZVk6IG9sZFNjYWxlWVxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICBjYW5jZWxhYmxlOiBmYWxzZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFpvb20gdGhlIGltYWdlIHdpdGggYSByZWxhdGl2ZSByYXRpby5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcmF0aW8gLSBUaGUgdGFyZ2V0IHJhdGlvLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2hhc1Rvb2x0aXA9ZmFsc2VdIC0gSW5kaWNhdGVzIGlmIGl0IGhhcyBhIHRvb2x0aXAgb3Igbm90LlxuICAgICAqIEBwYXJhbSB7RXZlbnR9IFtfb3JpZ2luYWxFdmVudD1udWxsXSAtIFRoZSBvcmlnaW5hbCBldmVudCBpZiBhbnkuXG4gICAgICogQHJldHVybnMge1ZpZXdlcn0gdGhpc1xuICAgICAqL1xuICAgIHpvb206IGZ1bmN0aW9uIHpvb20ocmF0aW8pIHtcbiAgICAgIHZhciBoYXNUb29sdGlwID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmYWxzZTtcblxuICAgICAgdmFyIF9vcmlnaW5hbEV2ZW50ID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBudWxsO1xuXG4gICAgICB2YXIgaW1hZ2VEYXRhID0gdGhpcy5pbWFnZURhdGE7XG4gICAgICByYXRpbyA9IE51bWJlcihyYXRpbyk7XG5cbiAgICAgIGlmIChyYXRpbyA8IDApIHtcbiAgICAgICAgcmF0aW8gPSAxIC8gKDEgLSByYXRpbyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByYXRpbyA9IDEgKyByYXRpbztcbiAgICAgIH1cblxuICAgICAgdGhpcy56b29tVG8oaW1hZ2VEYXRhLndpZHRoICogcmF0aW8gLyBpbWFnZURhdGEubmF0dXJhbFdpZHRoLCBoYXNUb29sdGlwLCBfb3JpZ2luYWxFdmVudCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogWm9vbSB0aGUgaW1hZ2UgdG8gYW4gYWJzb2x1dGUgcmF0aW8uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHJhdGlvIC0gVGhlIHRhcmdldCByYXRpby5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtoYXNUb29sdGlwPWZhbHNlXSAtIEluZGljYXRlcyBpZiBpdCBoYXMgYSB0b29sdGlwIG9yIG5vdC5cbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBbX29yaWdpbmFsRXZlbnQ9bnVsbF0gLSBUaGUgb3JpZ2luYWwgZXZlbnQgaWYgYW55LlxuICAgICAqIEBwYXJhbSB7RXZlbnR9IFtfem9vbWFibGU9ZmFsc2VdIC0gSW5kaWNhdGVzIGlmIHRoZSBjdXJyZW50IHpvb20gaXMgYXZhaWxhYmxlIG9yIG5vdC5cbiAgICAgKiBAcmV0dXJucyB7Vmlld2VyfSB0aGlzXG4gICAgICovXG4gICAgem9vbVRvOiBmdW5jdGlvbiB6b29tVG8ocmF0aW8pIHtcbiAgICAgIHZhciBfdGhpczYgPSB0aGlzO1xuXG4gICAgICB2YXIgaGFzVG9vbHRpcCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZmFsc2U7XG5cbiAgICAgIHZhciBfb3JpZ2luYWxFdmVudCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogbnVsbDtcblxuICAgICAgdmFyIF96b29tYWJsZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogZmFsc2U7XG5cbiAgICAgIHZhciBlbGVtZW50ID0gdGhpcy5lbGVtZW50LFxuICAgICAgICAgIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMsXG4gICAgICAgICAgcG9pbnRlcnMgPSB0aGlzLnBvaW50ZXJzLFxuICAgICAgICAgIGltYWdlRGF0YSA9IHRoaXMuaW1hZ2VEYXRhO1xuICAgICAgdmFyIHggPSBpbWFnZURhdGEueCxcbiAgICAgICAgICB5ID0gaW1hZ2VEYXRhLnksXG4gICAgICAgICAgd2lkdGggPSBpbWFnZURhdGEud2lkdGgsXG4gICAgICAgICAgaGVpZ2h0ID0gaW1hZ2VEYXRhLmhlaWdodCxcbiAgICAgICAgICBuYXR1cmFsV2lkdGggPSBpbWFnZURhdGEubmF0dXJhbFdpZHRoLFxuICAgICAgICAgIG5hdHVyYWxIZWlnaHQgPSBpbWFnZURhdGEubmF0dXJhbEhlaWdodDtcbiAgICAgIHJhdGlvID0gTWF0aC5tYXgoMCwgcmF0aW8pO1xuXG4gICAgICBpZiAoaXNOdW1iZXIocmF0aW8pICYmIHRoaXMudmlld2VkICYmICF0aGlzLnBsYXllZCAmJiAoX3pvb21hYmxlIHx8IG9wdGlvbnMuem9vbWFibGUpKSB7XG4gICAgICAgIGlmICghX3pvb21hYmxlKSB7XG4gICAgICAgICAgdmFyIG1pblpvb21SYXRpbyA9IE1hdGgubWF4KDAuMDEsIG9wdGlvbnMubWluWm9vbVJhdGlvKTtcbiAgICAgICAgICB2YXIgbWF4Wm9vbVJhdGlvID0gTWF0aC5taW4oMTAwLCBvcHRpb25zLm1heFpvb21SYXRpbyk7XG4gICAgICAgICAgcmF0aW8gPSBNYXRoLm1pbihNYXRoLm1heChyYXRpbywgbWluWm9vbVJhdGlvKSwgbWF4Wm9vbVJhdGlvKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfb3JpZ2luYWxFdmVudCkge1xuICAgICAgICAgIHN3aXRjaCAoX29yaWdpbmFsRXZlbnQudHlwZSkge1xuICAgICAgICAgICAgY2FzZSAnd2hlZWwnOlxuICAgICAgICAgICAgICBpZiAob3B0aW9ucy56b29tUmF0aW8gPj0gMC4wNTUgJiYgcmF0aW8gPiAwLjk1ICYmIHJhdGlvIDwgMS4wNSkge1xuICAgICAgICAgICAgICAgIHJhdGlvID0gMTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlICdwb2ludGVybW92ZSc6XG4gICAgICAgICAgICBjYXNlICd0b3VjaG1vdmUnOlxuICAgICAgICAgICAgY2FzZSAnbW91c2Vtb3ZlJzpcbiAgICAgICAgICAgICAgaWYgKHJhdGlvID4gMC45OSAmJiByYXRpbyA8IDEuMDEpIHtcbiAgICAgICAgICAgICAgICByYXRpbyA9IDE7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbmV3V2lkdGggPSBuYXR1cmFsV2lkdGggKiByYXRpbztcbiAgICAgICAgdmFyIG5ld0hlaWdodCA9IG5hdHVyYWxIZWlnaHQgKiByYXRpbztcbiAgICAgICAgdmFyIG9mZnNldFdpZHRoID0gbmV3V2lkdGggLSB3aWR0aDtcbiAgICAgICAgdmFyIG9mZnNldEhlaWdodCA9IG5ld0hlaWdodCAtIGhlaWdodDtcbiAgICAgICAgdmFyIG9sZFJhdGlvID0gaW1hZ2VEYXRhLnJhdGlvO1xuXG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKG9wdGlvbnMuem9vbSkpIHtcbiAgICAgICAgICBhZGRMaXN0ZW5lcihlbGVtZW50LCBFVkVOVF9aT09NLCBvcHRpb25zLnpvb20sIHtcbiAgICAgICAgICAgIG9uY2U6IHRydWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkaXNwYXRjaEV2ZW50KGVsZW1lbnQsIEVWRU5UX1pPT00sIHtcbiAgICAgICAgICByYXRpbzogcmF0aW8sXG4gICAgICAgICAgb2xkUmF0aW86IG9sZFJhdGlvLFxuICAgICAgICAgIG9yaWdpbmFsRXZlbnQ6IF9vcmlnaW5hbEV2ZW50XG4gICAgICAgIH0pID09PSBmYWxzZSkge1xuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy56b29taW5nID0gdHJ1ZTtcblxuICAgICAgICBpZiAoX29yaWdpbmFsRXZlbnQpIHtcbiAgICAgICAgICB2YXIgb2Zmc2V0ID0gZ2V0T2Zmc2V0KHRoaXMudmlld2VyKTtcbiAgICAgICAgICB2YXIgY2VudGVyID0gcG9pbnRlcnMgJiYgT2JqZWN0LmtleXMocG9pbnRlcnMpLmxlbmd0aCA+IDAgPyBnZXRQb2ludGVyc0NlbnRlcihwb2ludGVycykgOiB7XG4gICAgICAgICAgICBwYWdlWDogX29yaWdpbmFsRXZlbnQucGFnZVgsXG4gICAgICAgICAgICBwYWdlWTogX29yaWdpbmFsRXZlbnQucGFnZVlcbiAgICAgICAgICB9OyAvLyBab29tIGZyb20gdGhlIHRyaWdnZXJpbmcgcG9pbnQgb2YgdGhlIGV2ZW50XG5cbiAgICAgICAgICBpbWFnZURhdGEueCAtPSBvZmZzZXRXaWR0aCAqICgoY2VudGVyLnBhZ2VYIC0gb2Zmc2V0LmxlZnQgLSB4KSAvIHdpZHRoKTtcbiAgICAgICAgICBpbWFnZURhdGEueSAtPSBvZmZzZXRIZWlnaHQgKiAoKGNlbnRlci5wYWdlWSAtIG9mZnNldC50b3AgLSB5KSAvIGhlaWdodCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gWm9vbSBmcm9tIHRoZSBjZW50ZXIgb2YgdGhlIGltYWdlXG4gICAgICAgICAgaW1hZ2VEYXRhLnggLT0gb2Zmc2V0V2lkdGggLyAyO1xuICAgICAgICAgIGltYWdlRGF0YS55IC09IG9mZnNldEhlaWdodCAvIDI7XG4gICAgICAgIH1cblxuICAgICAgICBpbWFnZURhdGEubGVmdCA9IGltYWdlRGF0YS54O1xuICAgICAgICBpbWFnZURhdGEudG9wID0gaW1hZ2VEYXRhLnk7XG4gICAgICAgIGltYWdlRGF0YS53aWR0aCA9IG5ld1dpZHRoO1xuICAgICAgICBpbWFnZURhdGEuaGVpZ2h0ID0gbmV3SGVpZ2h0O1xuICAgICAgICBpbWFnZURhdGEub2xkUmF0aW8gPSBvbGRSYXRpbztcbiAgICAgICAgaW1hZ2VEYXRhLnJhdGlvID0gcmF0aW87XG4gICAgICAgIHRoaXMucmVuZGVySW1hZ2UoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIF90aGlzNi56b29taW5nID0gZmFsc2U7XG5cbiAgICAgICAgICBpZiAoaXNGdW5jdGlvbihvcHRpb25zLnpvb21lZCkpIHtcbiAgICAgICAgICAgIGFkZExpc3RlbmVyKGVsZW1lbnQsIEVWRU5UX1pPT01FRCwgb3B0aW9ucy56b29tZWQsIHtcbiAgICAgICAgICAgICAgb25jZTogdHJ1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZGlzcGF0Y2hFdmVudChlbGVtZW50LCBFVkVOVF9aT09NRUQsIHtcbiAgICAgICAgICAgIHJhdGlvOiByYXRpbyxcbiAgICAgICAgICAgIG9sZFJhdGlvOiBvbGRSYXRpbyxcbiAgICAgICAgICAgIG9yaWdpbmFsRXZlbnQ6IF9vcmlnaW5hbEV2ZW50XG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgY2FuY2VsYWJsZTogZmFsc2VcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKGhhc1Rvb2x0aXApIHtcbiAgICAgICAgICB0aGlzLnRvb2x0aXAoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUGxheSB0aGUgaW1hZ2VzXG4gICAgICogQHBhcmFtIHtib29sZWFufEZ1bGxzY3JlZW5PcHRpb25zfSBbZnVsbHNjcmVlbj1mYWxzZV0gLSBJbmRpY2F0ZSBpZiByZXF1ZXN0IGZ1bGxzY3JlZW4gb3Igbm90LlxuICAgICAqIEByZXR1cm5zIHtWaWV3ZXJ9IHRoaXNcbiAgICAgKi9cbiAgICBwbGF5OiBmdW5jdGlvbiBwbGF5KCkge1xuICAgICAgdmFyIF90aGlzNyA9IHRoaXM7XG5cbiAgICAgIHZhciBmdWxsc2NyZWVuID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBmYWxzZTtcblxuICAgICAgaWYgKCF0aGlzLmlzU2hvd24gfHwgdGhpcy5wbGF5ZWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHZhciBlbGVtZW50ID0gdGhpcy5lbGVtZW50LFxuICAgICAgICAgIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cbiAgICAgIGlmIChpc0Z1bmN0aW9uKG9wdGlvbnMucGxheSkpIHtcbiAgICAgICAgYWRkTGlzdGVuZXIoZWxlbWVudCwgRVZFTlRfUExBWSwgb3B0aW9ucy5wbGF5LCB7XG4gICAgICAgICAgb25jZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKGRpc3BhdGNoRXZlbnQoZWxlbWVudCwgRVZFTlRfUExBWSkgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICB2YXIgcGxheWVyID0gdGhpcy5wbGF5ZXI7XG4gICAgICB2YXIgb25Mb2FkID0gdGhpcy5sb2FkSW1hZ2UuYmluZCh0aGlzKTtcbiAgICAgIHZhciBsaXN0ID0gW107XG4gICAgICB2YXIgdG90YWwgPSAwO1xuICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgIHRoaXMucGxheWVkID0gdHJ1ZTtcbiAgICAgIHRoaXMub25Mb2FkV2hlblBsYXkgPSBvbkxvYWQ7XG5cbiAgICAgIGlmIChmdWxsc2NyZWVuKSB7XG4gICAgICAgIHRoaXMucmVxdWVzdEZ1bGxzY3JlZW4oZnVsbHNjcmVlbik7XG4gICAgICB9XG5cbiAgICAgIGFkZENsYXNzKHBsYXllciwgQ0xBU1NfU0hPVyk7XG4gICAgICBmb3JFYWNoKHRoaXMuaXRlbXMsIGZ1bmN0aW9uIChpdGVtLCBpKSB7XG4gICAgICAgIHZhciBpbWcgPSBpdGVtLnF1ZXJ5U2VsZWN0b3IoJ2ltZycpO1xuICAgICAgICB2YXIgaW1hZ2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcbiAgICAgICAgaW1hZ2Uuc3JjID0gZ2V0RGF0YShpbWcsICdvcmlnaW5hbFVybCcpO1xuICAgICAgICBpbWFnZS5hbHQgPSBpbWcuZ2V0QXR0cmlidXRlKCdhbHQnKTtcbiAgICAgICAgaW1hZ2UucmVmZXJyZXJQb2xpY3kgPSBpbWcucmVmZXJyZXJQb2xpY3k7XG4gICAgICAgIHRvdGFsICs9IDE7XG4gICAgICAgIGFkZENsYXNzKGltYWdlLCBDTEFTU19GQURFKTtcbiAgICAgICAgdG9nZ2xlQ2xhc3MoaW1hZ2UsIENMQVNTX1RSQU5TSVRJT04sIG9wdGlvbnMudHJhbnNpdGlvbik7XG5cbiAgICAgICAgaWYgKGhhc0NsYXNzKGl0ZW0sIENMQVNTX0FDVElWRSkpIHtcbiAgICAgICAgICBhZGRDbGFzcyhpbWFnZSwgQ0xBU1NfSU4pO1xuICAgICAgICAgIGluZGV4ID0gaTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxpc3QucHVzaChpbWFnZSk7XG4gICAgICAgIGFkZExpc3RlbmVyKGltYWdlLCBFVkVOVF9MT0FELCBvbkxvYWQsIHtcbiAgICAgICAgICBvbmNlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBwbGF5ZXIuYXBwZW5kQ2hpbGQoaW1hZ2UpO1xuICAgICAgfSk7XG5cbiAgICAgIGlmIChpc051bWJlcihvcHRpb25zLmludGVydmFsKSAmJiBvcHRpb25zLmludGVydmFsID4gMCkge1xuICAgICAgICB2YXIgcGxheSA9IGZ1bmN0aW9uIHBsYXkoKSB7XG4gICAgICAgICAgX3RoaXM3LnBsYXlpbmcgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJlbW92ZUNsYXNzKGxpc3RbaW5kZXhdLCBDTEFTU19JTik7XG4gICAgICAgICAgICBpbmRleCArPSAxO1xuICAgICAgICAgICAgaW5kZXggPSBpbmRleCA8IHRvdGFsID8gaW5kZXggOiAwO1xuICAgICAgICAgICAgYWRkQ2xhc3MobGlzdFtpbmRleF0sIENMQVNTX0lOKTtcbiAgICAgICAgICAgIHBsYXkoKTtcbiAgICAgICAgICB9LCBvcHRpb25zLmludGVydmFsKTtcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAodG90YWwgPiAxKSB7XG4gICAgICAgICAgcGxheSgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgLy8gU3RvcCBwbGF5XG4gICAgc3RvcDogZnVuY3Rpb24gc3RvcCgpIHtcbiAgICAgIHZhciBfdGhpczggPSB0aGlzO1xuXG4gICAgICBpZiAoIXRoaXMucGxheWVkKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICB2YXIgZWxlbWVudCA9IHRoaXMuZWxlbWVudCxcbiAgICAgICAgICBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuXG4gICAgICBpZiAoaXNGdW5jdGlvbihvcHRpb25zLnN0b3ApKSB7XG4gICAgICAgIGFkZExpc3RlbmVyKGVsZW1lbnQsIEVWRU5UX1NUT1AsIG9wdGlvbnMuc3RvcCwge1xuICAgICAgICAgIG9uY2U6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChkaXNwYXRjaEV2ZW50KGVsZW1lbnQsIEVWRU5UX1NUT1ApID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgdmFyIHBsYXllciA9IHRoaXMucGxheWVyO1xuICAgICAgdGhpcy5wbGF5ZWQgPSBmYWxzZTtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLnBsYXlpbmcpO1xuICAgICAgZm9yRWFjaChwbGF5ZXIuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2ltZycpLCBmdW5jdGlvbiAoaW1hZ2UpIHtcbiAgICAgICAgcmVtb3ZlTGlzdGVuZXIoaW1hZ2UsIEVWRU5UX0xPQUQsIF90aGlzOC5vbkxvYWRXaGVuUGxheSk7XG4gICAgICB9KTtcbiAgICAgIHJlbW92ZUNsYXNzKHBsYXllciwgQ0xBU1NfU0hPVyk7XG4gICAgICBwbGF5ZXIuaW5uZXJIVE1MID0gJyc7XG4gICAgICB0aGlzLmV4aXRGdWxsc2NyZWVuKCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIC8vIEVudGVyIG1vZGFsIG1vZGUgKG9ubHkgYXZhaWxhYmxlIGluIGlubGluZSBtb2RlKVxuICAgIGZ1bGw6IGZ1bmN0aW9uIGZ1bGwoKSB7XG4gICAgICB2YXIgX3RoaXM5ID0gdGhpcztcblxuICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMsXG4gICAgICAgICAgdmlld2VyID0gdGhpcy52aWV3ZXIsXG4gICAgICAgICAgaW1hZ2UgPSB0aGlzLmltYWdlLFxuICAgICAgICAgIGxpc3QgPSB0aGlzLmxpc3Q7XG5cbiAgICAgIGlmICghdGhpcy5pc1Nob3duIHx8IHRoaXMucGxheWVkIHx8IHRoaXMuZnVsbGVkIHx8ICFvcHRpb25zLmlubGluZSkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgdGhpcy5mdWxsZWQgPSB0cnVlO1xuICAgICAgdGhpcy5vcGVuKCk7XG4gICAgICBhZGRDbGFzcyh0aGlzLmJ1dHRvbiwgQ0xBU1NfRlVMTFNDUkVFTl9FWElUKTtcblxuICAgICAgaWYgKG9wdGlvbnMudHJhbnNpdGlvbikge1xuICAgICAgICByZW1vdmVDbGFzcyhsaXN0LCBDTEFTU19UUkFOU0lUSU9OKTtcblxuICAgICAgICBpZiAodGhpcy52aWV3ZWQpIHtcbiAgICAgICAgICByZW1vdmVDbGFzcyhpbWFnZSwgQ0xBU1NfVFJBTlNJVElPTik7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgYWRkQ2xhc3Modmlld2VyLCBDTEFTU19GSVhFRCk7XG4gICAgICB2aWV3ZXIuc2V0QXR0cmlidXRlKCdyb2xlJywgJ2RpYWxvZycpO1xuICAgICAgdmlld2VyLnNldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbGxlZGJ5JywgdGhpcy50aXRsZS5pZCk7XG4gICAgICB2aWV3ZXIuc2V0QXR0cmlidXRlKCdhcmlhLW1vZGFsJywgdHJ1ZSk7XG4gICAgICB2aWV3ZXIucmVtb3ZlQXR0cmlidXRlKCdzdHlsZScpO1xuICAgICAgc2V0U3R5bGUodmlld2VyLCB7XG4gICAgICAgIHpJbmRleDogb3B0aW9ucy56SW5kZXhcbiAgICAgIH0pO1xuXG4gICAgICBpZiAob3B0aW9ucy5mb2N1cykge1xuICAgICAgICB0aGlzLmVuZm9yY2VGb2N1cygpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmluaXRDb250YWluZXIoKTtcbiAgICAgIHRoaXMudmlld2VyRGF0YSA9IGFzc2lnbih7fSwgdGhpcy5jb250YWluZXJEYXRhKTtcbiAgICAgIHRoaXMucmVuZGVyTGlzdCgpO1xuXG4gICAgICBpZiAodGhpcy52aWV3ZWQpIHtcbiAgICAgICAgdGhpcy5pbml0SW1hZ2UoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIF90aGlzOS5yZW5kZXJJbWFnZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy50cmFuc2l0aW9uKSB7XG4gICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGFkZENsYXNzKGltYWdlLCBDTEFTU19UUkFOU0lUSU9OKTtcbiAgICAgICAgICAgICAgICBhZGRDbGFzcyhsaXN0LCBDTEFTU19UUkFOU0lUSU9OKTtcbiAgICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIC8vIEV4aXQgbW9kYWwgbW9kZSAob25seSBhdmFpbGFibGUgaW4gaW5saW5lIG1vZGUpXG4gICAgZXhpdDogZnVuY3Rpb24gZXhpdCgpIHtcbiAgICAgIHZhciBfdGhpczEwID0gdGhpcztcblxuICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMsXG4gICAgICAgICAgdmlld2VyID0gdGhpcy52aWV3ZXIsXG4gICAgICAgICAgaW1hZ2UgPSB0aGlzLmltYWdlLFxuICAgICAgICAgIGxpc3QgPSB0aGlzLmxpc3Q7XG5cbiAgICAgIGlmICghdGhpcy5pc1Nob3duIHx8IHRoaXMucGxheWVkIHx8ICF0aGlzLmZ1bGxlZCB8fCAhb3B0aW9ucy5pbmxpbmUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuZnVsbGVkID0gZmFsc2U7XG4gICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICByZW1vdmVDbGFzcyh0aGlzLmJ1dHRvbiwgQ0xBU1NfRlVMTFNDUkVFTl9FWElUKTtcblxuICAgICAgaWYgKG9wdGlvbnMudHJhbnNpdGlvbikge1xuICAgICAgICByZW1vdmVDbGFzcyhsaXN0LCBDTEFTU19UUkFOU0lUSU9OKTtcblxuICAgICAgICBpZiAodGhpcy52aWV3ZWQpIHtcbiAgICAgICAgICByZW1vdmVDbGFzcyhpbWFnZSwgQ0xBU1NfVFJBTlNJVElPTik7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKG9wdGlvbnMuZm9jdXMpIHtcbiAgICAgICAgdGhpcy5jbGVhckVuZm9yY2VGb2N1cygpO1xuICAgICAgfVxuXG4gICAgICB2aWV3ZXIucmVtb3ZlQXR0cmlidXRlKCdyb2xlJyk7XG4gICAgICB2aWV3ZXIucmVtb3ZlQXR0cmlidXRlKCdhcmlhLWxhYmVsbGVkYnknKTtcbiAgICAgIHZpZXdlci5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtbW9kYWwnKTtcbiAgICAgIHJlbW92ZUNsYXNzKHZpZXdlciwgQ0xBU1NfRklYRUQpO1xuICAgICAgc2V0U3R5bGUodmlld2VyLCB7XG4gICAgICAgIHpJbmRleDogb3B0aW9ucy56SW5kZXhJbmxpbmVcbiAgICAgIH0pO1xuICAgICAgdGhpcy52aWV3ZXJEYXRhID0gYXNzaWduKHt9LCB0aGlzLnBhcmVudERhdGEpO1xuICAgICAgdGhpcy5yZW5kZXJWaWV3ZXIoKTtcbiAgICAgIHRoaXMucmVuZGVyTGlzdCgpO1xuXG4gICAgICBpZiAodGhpcy52aWV3ZWQpIHtcbiAgICAgICAgdGhpcy5pbml0SW1hZ2UoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIF90aGlzMTAucmVuZGVySW1hZ2UoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMudHJhbnNpdGlvbikge1xuICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBhZGRDbGFzcyhpbWFnZSwgQ0xBU1NfVFJBTlNJVElPTik7XG4gICAgICAgICAgICAgICAgYWRkQ2xhc3MobGlzdCwgQ0xBU1NfVFJBTlNJVElPTik7XG4gICAgICAgICAgICAgIH0sIDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICAvLyBTaG93IHRoZSBjdXJyZW50IHJhdGlvIG9mIHRoZSBpbWFnZSB3aXRoIHBlcmNlbnRhZ2VcbiAgICB0b29sdGlwOiBmdW5jdGlvbiB0b29sdGlwKCkge1xuICAgICAgdmFyIF90aGlzMTEgPSB0aGlzO1xuXG4gICAgICB2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucyxcbiAgICAgICAgICB0b29sdGlwQm94ID0gdGhpcy50b29sdGlwQm94LFxuICAgICAgICAgIGltYWdlRGF0YSA9IHRoaXMuaW1hZ2VEYXRhO1xuXG4gICAgICBpZiAoIXRoaXMudmlld2VkIHx8IHRoaXMucGxheWVkIHx8ICFvcHRpb25zLnRvb2x0aXApIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHRvb2x0aXBCb3gudGV4dENvbnRlbnQgPSBcIlwiLmNvbmNhdChNYXRoLnJvdW5kKGltYWdlRGF0YS5yYXRpbyAqIDEwMCksIFwiJVwiKTtcblxuICAgICAgaWYgKCF0aGlzLnRvb2x0aXBwaW5nKSB7XG4gICAgICAgIGlmIChvcHRpb25zLnRyYW5zaXRpb24pIHtcbiAgICAgICAgICBpZiAodGhpcy5mYWRpbmcpIHtcbiAgICAgICAgICAgIGRpc3BhdGNoRXZlbnQodG9vbHRpcEJveCwgRVZFTlRfVFJBTlNJVElPTl9FTkQpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGFkZENsYXNzKHRvb2x0aXBCb3gsIENMQVNTX1NIT1cpO1xuICAgICAgICAgIGFkZENsYXNzKHRvb2x0aXBCb3gsIENMQVNTX0ZBREUpO1xuICAgICAgICAgIGFkZENsYXNzKHRvb2x0aXBCb3gsIENMQVNTX1RSQU5TSVRJT04pO1xuICAgICAgICAgIHRvb2x0aXBCb3gucmVtb3ZlQXR0cmlidXRlKCdhcmlhLWhpZGRlbicpOyAvLyBGb3JjZSByZWZsb3cgdG8gZW5hYmxlIENTUzMgdHJhbnNpdGlvblxuXG4gICAgICAgICAgdG9vbHRpcEJveC5pbml0aWFsT2Zmc2V0V2lkdGggPSB0b29sdGlwQm94Lm9mZnNldFdpZHRoO1xuICAgICAgICAgIGFkZENsYXNzKHRvb2x0aXBCb3gsIENMQVNTX0lOKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhZGRDbGFzcyh0b29sdGlwQm94LCBDTEFTU19TSE9XKTtcbiAgICAgICAgICB0b29sdGlwQm94LnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudG9vbHRpcHBpbmcpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnRvb2x0aXBwaW5nID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChvcHRpb25zLnRyYW5zaXRpb24pIHtcbiAgICAgICAgICBhZGRMaXN0ZW5lcih0b29sdGlwQm94LCBFVkVOVF9UUkFOU0lUSU9OX0VORCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmVtb3ZlQ2xhc3ModG9vbHRpcEJveCwgQ0xBU1NfU0hPVyk7XG4gICAgICAgICAgICByZW1vdmVDbGFzcyh0b29sdGlwQm94LCBDTEFTU19GQURFKTtcbiAgICAgICAgICAgIHJlbW92ZUNsYXNzKHRvb2x0aXBCb3gsIENMQVNTX1RSQU5TSVRJT04pO1xuICAgICAgICAgICAgdG9vbHRpcEJveC5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgdHJ1ZSk7XG4gICAgICAgICAgICBfdGhpczExLmZhZGluZyA9IGZhbHNlO1xuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIG9uY2U6IHRydWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZW1vdmVDbGFzcyh0b29sdGlwQm94LCBDTEFTU19JTik7XG4gICAgICAgICAgX3RoaXMxMS5mYWRpbmcgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlbW92ZUNsYXNzKHRvb2x0aXBCb3gsIENMQVNTX1NIT1cpO1xuICAgICAgICAgIHRvb2x0aXBCb3guc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsIHRydWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXMxMS50b29sdGlwcGluZyA9IGZhbHNlO1xuICAgICAgfSwgMTAwMCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVG9nZ2xlIHRoZSBpbWFnZSBzaXplIGJldHdlZW4gaXRzIGN1cnJlbnQgc2l6ZSBhbmQgbmF0dXJhbCBzaXplXG4gICAgICogQHBhcmFtIHtFdmVudH0gW19vcmlnaW5hbEV2ZW50PW51bGxdIC0gVGhlIG9yaWdpbmFsIGV2ZW50IGlmIGFueS5cbiAgICAgKiBAcmV0dXJucyB7Vmlld2VyfSB0aGlzXG4gICAgICovXG4gICAgdG9nZ2xlOiBmdW5jdGlvbiB0b2dnbGUoKSB7XG4gICAgICB2YXIgX29yaWdpbmFsRXZlbnQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IG51bGw7XG5cbiAgICAgIGlmICh0aGlzLmltYWdlRGF0YS5yYXRpbyA9PT0gMSkge1xuICAgICAgICB0aGlzLnpvb21Ubyh0aGlzLmltYWdlRGF0YS5vbGRSYXRpbywgdHJ1ZSwgX29yaWdpbmFsRXZlbnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy56b29tVG8oMSwgdHJ1ZSwgX29yaWdpbmFsRXZlbnQpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIC8vIFJlc2V0IHRoZSBpbWFnZSB0byBpdHMgaW5pdGlhbCBzdGF0ZVxuICAgIHJlc2V0OiBmdW5jdGlvbiByZXNldCgpIHtcbiAgICAgIGlmICh0aGlzLnZpZXdlZCAmJiAhdGhpcy5wbGF5ZWQpIHtcbiAgICAgICAgdGhpcy5pbWFnZURhdGEgPSBhc3NpZ24oe30sIHRoaXMuaW5pdGlhbEltYWdlRGF0YSk7XG4gICAgICAgIHRoaXMucmVuZGVySW1hZ2UoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICAvLyBVcGRhdGUgdmlld2VyIHdoZW4gaW1hZ2VzIGNoYW5nZWRcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICAgIHZhciBfdGhpczEyID0gdGhpcztcblxuICAgICAgdmFyIGVsZW1lbnQgPSB0aGlzLmVsZW1lbnQsXG4gICAgICAgICAgb3B0aW9ucyA9IHRoaXMub3B0aW9ucyxcbiAgICAgICAgICBpc0ltZyA9IHRoaXMuaXNJbWc7IC8vIERlc3Ryb3kgdmlld2VyIGlmIHRoZSB0YXJnZXQgaW1hZ2Ugd2FzIGRlbGV0ZWRcblxuICAgICAgaWYgKGlzSW1nICYmICFlbGVtZW50LnBhcmVudE5vZGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVzdHJveSgpO1xuICAgICAgfVxuXG4gICAgICB2YXIgaW1hZ2VzID0gW107XG4gICAgICBmb3JFYWNoKGlzSW1nID8gW2VsZW1lbnRdIDogZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCdpbWcnKSwgZnVuY3Rpb24gKGltYWdlKSB7XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKG9wdGlvbnMuZmlsdGVyKSkge1xuICAgICAgICAgIGlmIChvcHRpb25zLmZpbHRlci5jYWxsKF90aGlzMTIsIGltYWdlKSkge1xuICAgICAgICAgICAgaW1hZ2VzLnB1c2goaW1hZ2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChfdGhpczEyLmdldEltYWdlVVJMKGltYWdlKSkge1xuICAgICAgICAgIGltYWdlcy5wdXNoKGltYWdlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGlmICghaW1hZ2VzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgdGhpcy5pbWFnZXMgPSBpbWFnZXM7XG4gICAgICB0aGlzLmxlbmd0aCA9IGltYWdlcy5sZW5ndGg7XG5cbiAgICAgIGlmICh0aGlzLnJlYWR5KSB7XG4gICAgICAgIHZhciBjaGFuZ2VkSW5kZXhlcyA9IFtdO1xuICAgICAgICBmb3JFYWNoKHRoaXMuaXRlbXMsIGZ1bmN0aW9uIChpdGVtLCBpKSB7XG4gICAgICAgICAgdmFyIGltZyA9IGl0ZW0ucXVlcnlTZWxlY3RvcignaW1nJyk7XG4gICAgICAgICAgdmFyIGltYWdlID0gaW1hZ2VzW2ldO1xuXG4gICAgICAgICAgaWYgKGltYWdlICYmIGltZykge1xuICAgICAgICAgICAgaWYgKGltYWdlLnNyYyAhPT0gaW1nLnNyYyAvLyBUaXRsZSBjaGFuZ2VkICgjNDA4KVxuICAgICAgICAgICAgfHwgaW1hZ2UuYWx0ICE9PSBpbWcuYWx0KSB7XG4gICAgICAgICAgICAgIGNoYW5nZWRJbmRleGVzLnB1c2goaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNoYW5nZWRJbmRleGVzLnB1c2goaSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgc2V0U3R5bGUodGhpcy5saXN0LCB7XG4gICAgICAgICAgd2lkdGg6ICdhdXRvJ1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5pbml0TGlzdCgpO1xuXG4gICAgICAgIGlmICh0aGlzLmlzU2hvd24pIHtcbiAgICAgICAgICBpZiAodGhpcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnZpZXdlZCkge1xuICAgICAgICAgICAgICB2YXIgY2hhbmdlZEluZGV4ID0gY2hhbmdlZEluZGV4ZXMuaW5kZXhPZih0aGlzLmluZGV4KTtcblxuICAgICAgICAgICAgICBpZiAoY2hhbmdlZEluZGV4ID49IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRoaXMudmlldyhNYXRoLm1heChNYXRoLm1pbih0aGlzLmluZGV4IC0gY2hhbmdlZEluZGV4LCB0aGlzLmxlbmd0aCAtIDEpLCAwKSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIGFjdGl2ZUl0ZW0gPSB0aGlzLml0ZW1zW3RoaXMuaW5kZXhdOyAvLyBSZWFjdGl2YXRlIHRoZSBjdXJyZW50IHZpZXdpbmcgaXRlbSBhZnRlciByZXNldCB0aGUgbGlzdC5cblxuICAgICAgICAgICAgICAgIGFkZENsYXNzKGFjdGl2ZUl0ZW0sIENMQVNTX0FDVElWRSk7XG4gICAgICAgICAgICAgICAgYWN0aXZlSXRlbS5zZXRBdHRyaWJ1dGUoJ2FyaWEtc2VsZWN0ZWQnLCB0cnVlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmltYWdlID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMudmlld2VkID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmluZGV4ID0gMDtcbiAgICAgICAgICAgIHRoaXMuaW1hZ2VEYXRhID0ge307XG4gICAgICAgICAgICB0aGlzLmNhbnZhcy5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgICAgIHRoaXMudGl0bGUuaW5uZXJIVE1MID0gJyc7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmJ1aWxkKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgLy8gRGVzdHJveSB0aGUgdmlld2VyXG4gICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgIHZhciBlbGVtZW50ID0gdGhpcy5lbGVtZW50LFxuICAgICAgICAgIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cbiAgICAgIGlmICghZWxlbWVudFtOQU1FU1BBQ0VdKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmRlc3Ryb3llZCA9IHRydWU7XG5cbiAgICAgIGlmICh0aGlzLnJlYWR5KSB7XG4gICAgICAgIGlmICh0aGlzLnBsYXllZCkge1xuICAgICAgICAgIHRoaXMuc3RvcCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuaW5saW5lKSB7XG4gICAgICAgICAgaWYgKHRoaXMuZnVsbGVkKSB7XG4gICAgICAgICAgICB0aGlzLmV4aXQoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLnVuYmluZCgpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaXNTaG93bikge1xuICAgICAgICAgIGlmICh0aGlzLnZpZXdpbmcpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmltYWdlUmVuZGVyaW5nKSB7XG4gICAgICAgICAgICAgIHRoaXMuaW1hZ2VSZW5kZXJpbmcuYWJvcnQoKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5pbWFnZUluaXRpYWxpemluZykge1xuICAgICAgICAgICAgICB0aGlzLmltYWdlSW5pdGlhbGl6aW5nLmFib3J0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHRoaXMuaGlkaW5nKSB7XG4gICAgICAgICAgICB0aGlzLnRyYW5zaXRpb25pbmcuYWJvcnQoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLmhpZGRlbigpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuc2hvd2luZykge1xuICAgICAgICAgIHRoaXMudHJhbnNpdGlvbmluZy5hYm9ydCgpO1xuICAgICAgICAgIHRoaXMuaGlkZGVuKCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnJlYWR5ID0gZmFsc2U7XG4gICAgICAgIHRoaXMudmlld2VyLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy52aWV3ZXIpO1xuICAgICAgfSBlbHNlIGlmIChvcHRpb25zLmlubGluZSkge1xuICAgICAgICBpZiAodGhpcy5kZWxheWluZykge1xuICAgICAgICAgIHRoaXMuZGVsYXlpbmcuYWJvcnQoKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmluaXRpYWxpemluZykge1xuICAgICAgICAgIHRoaXMuaW5pdGlhbGl6aW5nLmFib3J0KCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCFvcHRpb25zLmlubGluZSkge1xuICAgICAgICByZW1vdmVMaXN0ZW5lcihlbGVtZW50LCBFVkVOVF9DTElDSywgdGhpcy5vblN0YXJ0KTtcbiAgICAgIH1cblxuICAgICAgZWxlbWVudFtOQU1FU1BBQ0VdID0gdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9O1xuXG4gIHZhciBvdGhlcnMgPSB7XG4gICAgZ2V0SW1hZ2VVUkw6IGZ1bmN0aW9uIGdldEltYWdlVVJMKGltYWdlKSB7XG4gICAgICB2YXIgdXJsID0gdGhpcy5vcHRpb25zLnVybDtcblxuICAgICAgaWYgKGlzU3RyaW5nKHVybCkpIHtcbiAgICAgICAgdXJsID0gaW1hZ2UuZ2V0QXR0cmlidXRlKHVybCk7XG4gICAgICB9IGVsc2UgaWYgKGlzRnVuY3Rpb24odXJsKSkge1xuICAgICAgICB1cmwgPSB1cmwuY2FsbCh0aGlzLCBpbWFnZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1cmwgPSAnJztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVybDtcbiAgICB9LFxuICAgIGVuZm9yY2VGb2N1czogZnVuY3Rpb24gZW5mb3JjZUZvY3VzKCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgdGhpcy5jbGVhckVuZm9yY2VGb2N1cygpO1xuICAgICAgYWRkTGlzdGVuZXIoZG9jdW1lbnQsIEVWRU5UX0ZPQ1VTSU4sIHRoaXMub25Gb2N1c2luID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHZhciB2aWV3ZXIgPSBfdGhpcy52aWV3ZXI7XG4gICAgICAgIHZhciB0YXJnZXQgPSBldmVudC50YXJnZXQ7XG5cbiAgICAgICAgaWYgKHRhcmdldCA9PT0gZG9jdW1lbnQgfHwgdGFyZ2V0ID09PSB2aWV3ZXIgfHwgdmlld2VyLmNvbnRhaW5zKHRhcmdldCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB3aGlsZSAodGFyZ2V0KSB7XG4gICAgICAgICAgLy8gQXZvaWQgY29uZmxpY3RzIHdpdGggb3RoZXIgbW9kYWxzICgjNDc0LCAjNTQwKVxuICAgICAgICAgIGlmICh0YXJnZXQuZ2V0QXR0cmlidXRlKCd0YWJpbmRleCcpICE9PSBudWxsIHx8IHRhcmdldC5nZXRBdHRyaWJ1dGUoJ2FyaWEtbW9kYWwnKSA9PT0gJ3RydWUnKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0LnBhcmVudEVsZW1lbnQ7XG4gICAgICAgIH1cblxuICAgICAgICB2aWV3ZXIuZm9jdXMoKTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgY2xlYXJFbmZvcmNlRm9jdXM6IGZ1bmN0aW9uIGNsZWFyRW5mb3JjZUZvY3VzKCkge1xuICAgICAgaWYgKHRoaXMub25Gb2N1c2luKSB7XG4gICAgICAgIHJlbW92ZUxpc3RlbmVyKGRvY3VtZW50LCBFVkVOVF9GT0NVU0lOLCB0aGlzLm9uRm9jdXNpbik7XG4gICAgICAgIHRoaXMub25Gb2N1c2luID0gbnVsbDtcbiAgICAgIH1cbiAgICB9LFxuICAgIG9wZW46IGZ1bmN0aW9uIG9wZW4oKSB7XG4gICAgICB2YXIgYm9keSA9IHRoaXMuYm9keTtcbiAgICAgIGFkZENsYXNzKGJvZHksIENMQVNTX09QRU4pO1xuICAgICAgYm9keS5zdHlsZS5wYWRkaW5nUmlnaHQgPSBcIlwiLmNvbmNhdCh0aGlzLnNjcm9sbGJhcldpZHRoICsgKHBhcnNlRmxvYXQodGhpcy5pbml0aWFsQm9keUNvbXB1dGVkUGFkZGluZ1JpZ2h0KSB8fCAwKSwgXCJweFwiKTtcbiAgICB9LFxuICAgIGNsb3NlOiBmdW5jdGlvbiBjbG9zZSgpIHtcbiAgICAgIHZhciBib2R5ID0gdGhpcy5ib2R5O1xuICAgICAgcmVtb3ZlQ2xhc3MoYm9keSwgQ0xBU1NfT1BFTik7XG4gICAgICBib2R5LnN0eWxlLnBhZGRpbmdSaWdodCA9IHRoaXMuaW5pdGlhbEJvZHlQYWRkaW5nUmlnaHQ7XG4gICAgfSxcbiAgICBzaG93bjogZnVuY3Rpb24gc2hvd24oKSB7XG4gICAgICB2YXIgZWxlbWVudCA9IHRoaXMuZWxlbWVudCxcbiAgICAgICAgICBvcHRpb25zID0gdGhpcy5vcHRpb25zLFxuICAgICAgICAgIHZpZXdlciA9IHRoaXMudmlld2VyO1xuICAgICAgdGhpcy5mdWxsZWQgPSB0cnVlO1xuICAgICAgdGhpcy5pc1Nob3duID0gdHJ1ZTtcbiAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgICB0aGlzLmJpbmQoKTtcbiAgICAgIHRoaXMuc2hvd2luZyA9IGZhbHNlO1xuXG4gICAgICBpZiAob3B0aW9ucy5mb2N1cykge1xuICAgICAgICB2aWV3ZXIuZm9jdXMoKTtcbiAgICAgICAgdGhpcy5lbmZvcmNlRm9jdXMoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzRnVuY3Rpb24ob3B0aW9ucy5zaG93bikpIHtcbiAgICAgICAgYWRkTGlzdGVuZXIoZWxlbWVudCwgRVZFTlRfU0hPV04sIG9wdGlvbnMuc2hvd24sIHtcbiAgICAgICAgICBvbmNlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoZGlzcGF0Y2hFdmVudChlbGVtZW50LCBFVkVOVF9TSE9XTikgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMucmVhZHkgJiYgdGhpcy5pc1Nob3duICYmICF0aGlzLmhpZGluZykge1xuICAgICAgICB0aGlzLnZpZXcodGhpcy5pbmRleCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBoaWRkZW46IGZ1bmN0aW9uIGhpZGRlbigpIHtcbiAgICAgIHZhciBlbGVtZW50ID0gdGhpcy5lbGVtZW50LFxuICAgICAgICAgIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMsXG4gICAgICAgICAgdmlld2VyID0gdGhpcy52aWV3ZXI7XG5cbiAgICAgIGlmIChvcHRpb25zLmZ1Y3VzKSB7XG4gICAgICAgIHRoaXMuY2xlYXJFbmZvcmNlRm9jdXMoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5mdWxsZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMudmlld2VkID0gZmFsc2U7XG4gICAgICB0aGlzLmlzU2hvd24gPSBmYWxzZTtcbiAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgIHRoaXMudW5iaW5kKCk7XG4gICAgICBhZGRDbGFzcyh2aWV3ZXIsIENMQVNTX0hJREUpO1xuICAgICAgdmlld2VyLnJlbW92ZUF0dHJpYnV0ZSgncm9sZScpO1xuICAgICAgdmlld2VyLnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1sYWJlbGxlZGJ5Jyk7XG4gICAgICB2aWV3ZXIucmVtb3ZlQXR0cmlidXRlKCdhcmlhLW1vZGFsJyk7XG4gICAgICB2aWV3ZXIuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsIHRydWUpO1xuICAgICAgdGhpcy5yZXNldExpc3QoKTtcbiAgICAgIHRoaXMucmVzZXRJbWFnZSgpO1xuICAgICAgdGhpcy5oaWRpbmcgPSBmYWxzZTtcblxuICAgICAgaWYgKCF0aGlzLmRlc3Ryb3llZCkge1xuICAgICAgICBpZiAoaXNGdW5jdGlvbihvcHRpb25zLmhpZGRlbikpIHtcbiAgICAgICAgICBhZGRMaXN0ZW5lcihlbGVtZW50LCBFVkVOVF9ISURERU4sIG9wdGlvbnMuaGlkZGVuLCB7XG4gICAgICAgICAgICBvbmNlOiB0cnVlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBkaXNwYXRjaEV2ZW50KGVsZW1lbnQsIEVWRU5UX0hJRERFTiwgbnVsbCwge1xuICAgICAgICAgIGNhbmNlbGFibGU6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG4gICAgcmVxdWVzdEZ1bGxzY3JlZW46IGZ1bmN0aW9uIHJlcXVlc3RGdWxsc2NyZWVuKG9wdGlvbnMpIHtcbiAgICAgIHZhciBkb2N1bWVudCA9IHRoaXMuZWxlbWVudC5vd25lckRvY3VtZW50O1xuXG4gICAgICBpZiAodGhpcy5mdWxsZWQgJiYgIShkb2N1bWVudC5mdWxsc2NyZWVuRWxlbWVudCB8fCBkb2N1bWVudC53ZWJraXRGdWxsc2NyZWVuRWxlbWVudCB8fCBkb2N1bWVudC5tb3pGdWxsU2NyZWVuRWxlbWVudCB8fCBkb2N1bWVudC5tc0Z1bGxzY3JlZW5FbGVtZW50KSkge1xuICAgICAgICB2YXIgZG9jdW1lbnRFbGVtZW50ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50OyAvLyBFbGVtZW50LnJlcXVlc3RGdWxsc2NyZWVuKClcblxuICAgICAgICBpZiAoZG9jdW1lbnRFbGVtZW50LnJlcXVlc3RGdWxsc2NyZWVuKSB7XG4gICAgICAgICAgLy8gQXZvaWQgVHlwZUVycm9yIHdoZW4gY29udmVydCBgb3B0aW9uc2AgdG8gZGljdGlvbmFyeVxuICAgICAgICAgIGlmIChpc1BsYWluT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgICAgICAgICBkb2N1bWVudEVsZW1lbnQucmVxdWVzdEZ1bGxzY3JlZW4ob3B0aW9ucyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRvY3VtZW50RWxlbWVudC5yZXF1ZXN0RnVsbHNjcmVlbigpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChkb2N1bWVudEVsZW1lbnQud2Via2l0UmVxdWVzdEZ1bGxzY3JlZW4pIHtcbiAgICAgICAgICBkb2N1bWVudEVsZW1lbnQud2Via2l0UmVxdWVzdEZ1bGxzY3JlZW4oRWxlbWVudC5BTExPV19LRVlCT0FSRF9JTlBVVCk7XG4gICAgICAgIH0gZWxzZSBpZiAoZG9jdW1lbnRFbGVtZW50Lm1velJlcXVlc3RGdWxsU2NyZWVuKSB7XG4gICAgICAgICAgZG9jdW1lbnRFbGVtZW50Lm1velJlcXVlc3RGdWxsU2NyZWVuKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoZG9jdW1lbnRFbGVtZW50Lm1zUmVxdWVzdEZ1bGxzY3JlZW4pIHtcbiAgICAgICAgICBkb2N1bWVudEVsZW1lbnQubXNSZXF1ZXN0RnVsbHNjcmVlbigpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBleGl0RnVsbHNjcmVlbjogZnVuY3Rpb24gZXhpdEZ1bGxzY3JlZW4oKSB7XG4gICAgICB2YXIgZG9jdW1lbnQgPSB0aGlzLmVsZW1lbnQub3duZXJEb2N1bWVudDtcblxuICAgICAgaWYgKHRoaXMuZnVsbGVkICYmIChkb2N1bWVudC5mdWxsc2NyZWVuRWxlbWVudCB8fCBkb2N1bWVudC53ZWJraXRGdWxsc2NyZWVuRWxlbWVudCB8fCBkb2N1bWVudC5tb3pGdWxsU2NyZWVuRWxlbWVudCB8fCBkb2N1bWVudC5tc0Z1bGxzY3JlZW5FbGVtZW50KSkge1xuICAgICAgICAvLyBEb2N1bWVudC5leGl0RnVsbHNjcmVlbigpXG4gICAgICAgIGlmIChkb2N1bWVudC5leGl0RnVsbHNjcmVlbikge1xuICAgICAgICAgIGRvY3VtZW50LmV4aXRGdWxsc2NyZWVuKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoZG9jdW1lbnQud2Via2l0RXhpdEZ1bGxzY3JlZW4pIHtcbiAgICAgICAgICBkb2N1bWVudC53ZWJraXRFeGl0RnVsbHNjcmVlbigpO1xuICAgICAgICB9IGVsc2UgaWYgKGRvY3VtZW50Lm1vekNhbmNlbEZ1bGxTY3JlZW4pIHtcbiAgICAgICAgICBkb2N1bWVudC5tb3pDYW5jZWxGdWxsU2NyZWVuKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoZG9jdW1lbnQubXNFeGl0RnVsbHNjcmVlbikge1xuICAgICAgICAgIGRvY3VtZW50Lm1zRXhpdEZ1bGxzY3JlZW4oKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgY2hhbmdlOiBmdW5jdGlvbiBjaGFuZ2UoZXZlbnQpIHtcbiAgICAgIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zLFxuICAgICAgICAgIHBvaW50ZXJzID0gdGhpcy5wb2ludGVycztcbiAgICAgIHZhciBwb2ludGVyID0gcG9pbnRlcnNbT2JqZWN0LmtleXMocG9pbnRlcnMpWzBdXTsgLy8gSW4gdGhlIGNhc2Ugb2YgdGhlIGBwb2ludGVyc2Agb2JqZWN0IGlzIGVtcHR5ICgjNDIxKVxuXG4gICAgICBpZiAoIXBvaW50ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgb2Zmc2V0WCA9IHBvaW50ZXIuZW5kWCAtIHBvaW50ZXIuc3RhcnRYO1xuICAgICAgdmFyIG9mZnNldFkgPSBwb2ludGVyLmVuZFkgLSBwb2ludGVyLnN0YXJ0WTtcblxuICAgICAgc3dpdGNoICh0aGlzLmFjdGlvbikge1xuICAgICAgICAvLyBNb3ZlIHRoZSBjdXJyZW50IGltYWdlXG4gICAgICAgIGNhc2UgQUNUSU9OX01PVkU6XG4gICAgICAgICAgdGhpcy5tb3ZlKG9mZnNldFgsIG9mZnNldFksIGV2ZW50KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgLy8gWm9vbSB0aGUgY3VycmVudCBpbWFnZVxuXG4gICAgICAgIGNhc2UgQUNUSU9OX1pPT006XG4gICAgICAgICAgdGhpcy56b29tKGdldE1heFpvb21SYXRpbyhwb2ludGVycyksIGZhbHNlLCBldmVudCk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBBQ1RJT05fU1dJVENIOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuYWN0aW9uID0gJ3N3aXRjaGVkJztcbiAgICAgICAgICAgIHZhciBhYnNvbHV0ZU9mZnNldFggPSBNYXRoLmFicyhvZmZzZXRYKTtcblxuICAgICAgICAgICAgaWYgKGFic29sdXRlT2Zmc2V0WCA+IDEgJiYgYWJzb2x1dGVPZmZzZXRYID4gTWF0aC5hYnMob2Zmc2V0WSkpIHtcbiAgICAgICAgICAgICAgLy8gRW1wdHkgYHBvaW50ZXJzYCBhcyBgdG91Y2hlbmRgIGV2ZW50IHdpbGwgbm90IGJlIGZpcmVkIGFmdGVyIHN3aXBlZCBpbiBpT1MgYnJvd3NlcnMuXG4gICAgICAgICAgICAgIHRoaXMucG9pbnRlcnMgPSB7fTtcblxuICAgICAgICAgICAgICBpZiAob2Zmc2V0WCA+IDEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnByZXYob3B0aW9ucy5sb29wKTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChvZmZzZXRYIDwgLTEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm5leHQob3B0aW9ucy5sb29wKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICB9IC8vIE92ZXJyaWRlXG5cblxuICAgICAgZm9yRWFjaChwb2ludGVycywgZnVuY3Rpb24gKHApIHtcbiAgICAgICAgcC5zdGFydFggPSBwLmVuZFg7XG4gICAgICAgIHAuc3RhcnRZID0gcC5lbmRZO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBpc1N3aXRjaGFibGU6IGZ1bmN0aW9uIGlzU3dpdGNoYWJsZSgpIHtcbiAgICAgIHZhciBpbWFnZURhdGEgPSB0aGlzLmltYWdlRGF0YSxcbiAgICAgICAgICB2aWV3ZXJEYXRhID0gdGhpcy52aWV3ZXJEYXRhO1xuICAgICAgcmV0dXJuIHRoaXMubGVuZ3RoID4gMSAmJiBpbWFnZURhdGEueCA+PSAwICYmIGltYWdlRGF0YS55ID49IDAgJiYgaW1hZ2VEYXRhLndpZHRoIDw9IHZpZXdlckRhdGEud2lkdGggJiYgaW1hZ2VEYXRhLmhlaWdodCA8PSB2aWV3ZXJEYXRhLmhlaWdodDtcbiAgICB9XG4gIH07XG5cbiAgdmFyIEFub3RoZXJWaWV3ZXIgPSBXSU5ET1cuVmlld2VyO1xuXG4gIHZhciBnZXRVbmlxdWVJRCA9IGZ1bmN0aW9uIChpZCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZCArPSAxO1xuICAgICAgcmV0dXJuIGlkO1xuICAgIH07XG4gIH0oLTEpO1xuXG4gIHZhciBWaWV3ZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBWaWV3ZXIuXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IC0gVGhlIHRhcmdldCBlbGVtZW50IGZvciB2aWV3aW5nLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gLSBUaGUgY29uZmlndXJhdGlvbiBvcHRpb25zLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIFZpZXdlcihlbGVtZW50KSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG5cbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBWaWV3ZXIpO1xuXG4gICAgICBpZiAoIWVsZW1lbnQgfHwgZWxlbWVudC5ub2RlVHlwZSAhPT0gMSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBmaXJzdCBhcmd1bWVudCBpcyByZXF1aXJlZCBhbmQgbXVzdCBiZSBhbiBlbGVtZW50LicpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgdGhpcy5vcHRpb25zID0gYXNzaWduKHt9LCBERUZBVUxUUywgaXNQbGFpbk9iamVjdChvcHRpb25zKSAmJiBvcHRpb25zKTtcbiAgICAgIHRoaXMuYWN0aW9uID0gZmFsc2U7XG4gICAgICB0aGlzLmZhZGluZyA9IGZhbHNlO1xuICAgICAgdGhpcy5mdWxsZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuaGlkaW5nID0gZmFsc2U7XG4gICAgICB0aGlzLmltYWdlQ2xpY2tlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5pbWFnZURhdGEgPSB7fTtcbiAgICAgIHRoaXMuaW5kZXggPSB0aGlzLm9wdGlvbnMuaW5pdGlhbFZpZXdJbmRleDtcbiAgICAgIHRoaXMuaXNJbWcgPSBmYWxzZTtcbiAgICAgIHRoaXMuaXNTaG93biA9IGZhbHNlO1xuICAgICAgdGhpcy5sZW5ndGggPSAwO1xuICAgICAgdGhpcy5tb3ZpbmcgPSBmYWxzZTtcbiAgICAgIHRoaXMucGxheWVkID0gZmFsc2U7XG4gICAgICB0aGlzLnBsYXlpbmcgPSBmYWxzZTtcbiAgICAgIHRoaXMucG9pbnRlcnMgPSB7fTtcbiAgICAgIHRoaXMucmVhZHkgPSBmYWxzZTtcbiAgICAgIHRoaXMucm90YXRpbmcgPSBmYWxzZTtcbiAgICAgIHRoaXMuc2NhbGluZyA9IGZhbHNlO1xuICAgICAgdGhpcy5zaG93aW5nID0gZmFsc2U7XG4gICAgICB0aGlzLnRpbWVvdXQgPSBmYWxzZTtcbiAgICAgIHRoaXMudG9vbHRpcHBpbmcgPSBmYWxzZTtcbiAgICAgIHRoaXMudmlld2VkID0gZmFsc2U7XG4gICAgICB0aGlzLnZpZXdpbmcgPSBmYWxzZTtcbiAgICAgIHRoaXMud2hlZWxpbmcgPSBmYWxzZTtcbiAgICAgIHRoaXMuem9vbWluZyA9IGZhbHNlO1xuICAgICAgdGhpcy5pZCA9IGdldFVuaXF1ZUlEKCk7XG4gICAgICB0aGlzLmluaXQoKTtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoVmlld2VyLCBbe1xuICAgICAga2V5OiBcImluaXRcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgIHZhciBlbGVtZW50ID0gdGhpcy5lbGVtZW50LFxuICAgICAgICAgICAgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcblxuICAgICAgICBpZiAoZWxlbWVudFtOQU1FU1BBQ0VdKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZWxlbWVudFtOQU1FU1BBQ0VdID0gdGhpczsgLy8gVGhlIGBmb2N1c2Agb3B0aW9uIHJlcXVpcmVzIHRoZSBga2V5Ym9hcmRgIG9wdGlvbiBzZXQgdG8gYHRydWVgLlxuXG4gICAgICAgIGlmIChvcHRpb25zLmZvY3VzICYmICFvcHRpb25zLmtleWJvYXJkKSB7XG4gICAgICAgICAgb3B0aW9ucy5mb2N1cyA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGlzSW1nID0gZWxlbWVudC5sb2NhbE5hbWUgPT09ICdpbWcnO1xuICAgICAgICB2YXIgaW1hZ2VzID0gW107XG4gICAgICAgIGZvckVhY2goaXNJbWcgPyBbZWxlbWVudF0gOiBlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2ltZycpLCBmdW5jdGlvbiAoaW1hZ2UpIHtcbiAgICAgICAgICBpZiAoaXNGdW5jdGlvbihvcHRpb25zLmZpbHRlcikpIHtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmZpbHRlci5jYWxsKF90aGlzLCBpbWFnZSkpIHtcbiAgICAgICAgICAgICAgaW1hZ2VzLnB1c2goaW1hZ2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoX3RoaXMuZ2V0SW1hZ2VVUkwoaW1hZ2UpKSB7XG4gICAgICAgICAgICBpbWFnZXMucHVzaChpbWFnZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5pc0ltZyA9IGlzSW1nO1xuICAgICAgICB0aGlzLmxlbmd0aCA9IGltYWdlcy5sZW5ndGg7XG4gICAgICAgIHRoaXMuaW1hZ2VzID0gaW1hZ2VzO1xuICAgICAgICB0aGlzLmluaXRCb2R5KCk7IC8vIE92ZXJyaWRlIGB0cmFuc2l0aW9uYCBvcHRpb24gaWYgaXQgaXMgbm90IHN1cHBvcnRlZFxuXG4gICAgICAgIGlmIChpc1VuZGVmaW5lZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KE5BTUVTUEFDRSkuc3R5bGUudHJhbnNpdGlvbikpIHtcbiAgICAgICAgICBvcHRpb25zLnRyYW5zaXRpb24gPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLmlubGluZSkge1xuICAgICAgICAgIHZhciBjb3VudCA9IDA7XG5cbiAgICAgICAgICB2YXIgcHJvZ3Jlc3MgPSBmdW5jdGlvbiBwcm9ncmVzcygpIHtcbiAgICAgICAgICAgIGNvdW50ICs9IDE7XG5cbiAgICAgICAgICAgIGlmIChjb3VudCA9PT0gX3RoaXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIHZhciB0aW1lb3V0O1xuICAgICAgICAgICAgICBfdGhpcy5pbml0aWFsaXppbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgX3RoaXMuZGVsYXlpbmcgPSB7XG4gICAgICAgICAgICAgICAgYWJvcnQ6IGZ1bmN0aW9uIGFib3J0KCkge1xuICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfTsgLy8gYnVpbGQgYXN5bmNocm9ub3VzbHkgdG8ga2VlcCBgdGhpcy52aWV3ZXJgIGlzIGFjY2Vzc2libGUgaW4gYHJlYWR5YCBldmVudCBoYW5kbGVyLlxuXG4gICAgICAgICAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5kZWxheWluZyA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgX3RoaXMuYnVpbGQoKTtcbiAgICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIHRoaXMuaW5pdGlhbGl6aW5nID0ge1xuICAgICAgICAgICAgYWJvcnQ6IGZ1bmN0aW9uIGFib3J0KCkge1xuICAgICAgICAgICAgICBmb3JFYWNoKGltYWdlcywgZnVuY3Rpb24gKGltYWdlKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFpbWFnZS5jb21wbGV0ZSkge1xuICAgICAgICAgICAgICAgICAgcmVtb3ZlTGlzdGVuZXIoaW1hZ2UsIEVWRU5UX0xPQUQsIHByb2dyZXNzKTtcbiAgICAgICAgICAgICAgICAgIHJlbW92ZUxpc3RlbmVyKGltYWdlLCBFVkVOVF9FUlJPUiwgcHJvZ3Jlc3MpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgICBmb3JFYWNoKGltYWdlcywgZnVuY3Rpb24gKGltYWdlKSB7XG4gICAgICAgICAgICBpZiAoaW1hZ2UuY29tcGxldGUpIHtcbiAgICAgICAgICAgICAgcHJvZ3Jlc3MoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHZhciBvbkxvYWQ7XG4gICAgICAgICAgICAgIHZhciBvbkVycm9yO1xuICAgICAgICAgICAgICBhZGRMaXN0ZW5lcihpbWFnZSwgRVZFTlRfTE9BRCwgb25Mb2FkID0gZnVuY3Rpb24gb25Mb2FkKCkge1xuICAgICAgICAgICAgICAgIHJlbW92ZUxpc3RlbmVyKGltYWdlLCBFVkVOVF9FUlJPUiwgb25FcnJvcik7XG4gICAgICAgICAgICAgICAgcHJvZ3Jlc3MoKTtcbiAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIG9uY2U6IHRydWVcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIGFkZExpc3RlbmVyKGltYWdlLCBFVkVOVF9FUlJPUiwgb25FcnJvciA9IGZ1bmN0aW9uIG9uRXJyb3IoKSB7XG4gICAgICAgICAgICAgICAgcmVtb3ZlTGlzdGVuZXIoaW1hZ2UsIEVWRU5UX0xPQUQsIG9uTG9hZCk7XG4gICAgICAgICAgICAgICAgcHJvZ3Jlc3MoKTtcbiAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIG9uY2U6IHRydWVcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYWRkTGlzdGVuZXIoZWxlbWVudCwgRVZFTlRfQ0xJQ0ssIHRoaXMub25TdGFydCA9IGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICAgICAgICB2YXIgdGFyZ2V0ID0gX3JlZi50YXJnZXQ7XG5cbiAgICAgICAgICAgIGlmICh0YXJnZXQubG9jYWxOYW1lID09PSAnaW1nJyAmJiAoIWlzRnVuY3Rpb24ob3B0aW9ucy5maWx0ZXIpIHx8IG9wdGlvbnMuZmlsdGVyLmNhbGwoX3RoaXMsIHRhcmdldCkpKSB7XG4gICAgICAgICAgICAgIF90aGlzLnZpZXcoX3RoaXMuaW1hZ2VzLmluZGV4T2YodGFyZ2V0KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiYnVpbGRcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBidWlsZCgpIHtcbiAgICAgICAgaWYgKHRoaXMucmVhZHkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZWxlbWVudCA9IHRoaXMuZWxlbWVudCxcbiAgICAgICAgICAgIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIHZhciBwYXJlbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7XG4gICAgICAgIHZhciB0ZW1wbGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICB0ZW1wbGF0ZS5pbm5lckhUTUwgPSBURU1QTEFURTtcbiAgICAgICAgdmFyIHZpZXdlciA9IHRlbXBsYXRlLnF1ZXJ5U2VsZWN0b3IoXCIuXCIuY29uY2F0KE5BTUVTUEFDRSwgXCItY29udGFpbmVyXCIpKTtcbiAgICAgICAgdmFyIHRpdGxlID0gdmlld2VyLnF1ZXJ5U2VsZWN0b3IoXCIuXCIuY29uY2F0KE5BTUVTUEFDRSwgXCItdGl0bGVcIikpO1xuICAgICAgICB2YXIgdG9vbGJhciA9IHZpZXdlci5xdWVyeVNlbGVjdG9yKFwiLlwiLmNvbmNhdChOQU1FU1BBQ0UsIFwiLXRvb2xiYXJcIikpO1xuICAgICAgICB2YXIgbmF2YmFyID0gdmlld2VyLnF1ZXJ5U2VsZWN0b3IoXCIuXCIuY29uY2F0KE5BTUVTUEFDRSwgXCItbmF2YmFyXCIpKTtcbiAgICAgICAgdmFyIGJ1dHRvbiA9IHZpZXdlci5xdWVyeVNlbGVjdG9yKFwiLlwiLmNvbmNhdChOQU1FU1BBQ0UsIFwiLWJ1dHRvblwiKSk7XG4gICAgICAgIHZhciBjYW52YXMgPSB2aWV3ZXIucXVlcnlTZWxlY3RvcihcIi5cIi5jb25jYXQoTkFNRVNQQUNFLCBcIi1jYW52YXNcIikpO1xuICAgICAgICB0aGlzLnBhcmVudCA9IHBhcmVudDtcbiAgICAgICAgdGhpcy52aWV3ZXIgPSB2aWV3ZXI7XG4gICAgICAgIHRoaXMudGl0bGUgPSB0aXRsZTtcbiAgICAgICAgdGhpcy50b29sYmFyID0gdG9vbGJhcjtcbiAgICAgICAgdGhpcy5uYXZiYXIgPSBuYXZiYXI7XG4gICAgICAgIHRoaXMuYnV0dG9uID0gYnV0dG9uO1xuICAgICAgICB0aGlzLmNhbnZhcyA9IGNhbnZhcztcbiAgICAgICAgdGhpcy5mb290ZXIgPSB2aWV3ZXIucXVlcnlTZWxlY3RvcihcIi5cIi5jb25jYXQoTkFNRVNQQUNFLCBcIi1mb290ZXJcIikpO1xuICAgICAgICB0aGlzLnRvb2x0aXBCb3ggPSB2aWV3ZXIucXVlcnlTZWxlY3RvcihcIi5cIi5jb25jYXQoTkFNRVNQQUNFLCBcIi10b29sdGlwXCIpKTtcbiAgICAgICAgdGhpcy5wbGF5ZXIgPSB2aWV3ZXIucXVlcnlTZWxlY3RvcihcIi5cIi5jb25jYXQoTkFNRVNQQUNFLCBcIi1wbGF5ZXJcIikpO1xuICAgICAgICB0aGlzLmxpc3QgPSB2aWV3ZXIucXVlcnlTZWxlY3RvcihcIi5cIi5jb25jYXQoTkFNRVNQQUNFLCBcIi1saXN0XCIpKTtcbiAgICAgICAgdmlld2VyLmlkID0gXCJcIi5jb25jYXQoTkFNRVNQQUNFKS5jb25jYXQodGhpcy5pZCk7XG4gICAgICAgIHRpdGxlLmlkID0gXCJcIi5jb25jYXQoTkFNRVNQQUNFLCBcIlRpdGxlXCIpLmNvbmNhdCh0aGlzLmlkKTtcbiAgICAgICAgYWRkQ2xhc3ModGl0bGUsICFvcHRpb25zLnRpdGxlID8gQ0xBU1NfSElERSA6IGdldFJlc3BvbnNpdmVDbGFzcyhBcnJheS5pc0FycmF5KG9wdGlvbnMudGl0bGUpID8gb3B0aW9ucy50aXRsZVswXSA6IG9wdGlvbnMudGl0bGUpKTtcbiAgICAgICAgYWRkQ2xhc3MobmF2YmFyLCAhb3B0aW9ucy5uYXZiYXIgPyBDTEFTU19ISURFIDogZ2V0UmVzcG9uc2l2ZUNsYXNzKG9wdGlvbnMubmF2YmFyKSk7XG4gICAgICAgIHRvZ2dsZUNsYXNzKGJ1dHRvbiwgQ0xBU1NfSElERSwgIW9wdGlvbnMuYnV0dG9uKTtcblxuICAgICAgICBpZiAob3B0aW9ucy5rZXlib2FyZCkge1xuICAgICAgICAgIGJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgMCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucy5iYWNrZHJvcCkge1xuICAgICAgICAgIGFkZENsYXNzKHZpZXdlciwgXCJcIi5jb25jYXQoTkFNRVNQQUNFLCBcIi1iYWNrZHJvcFwiKSk7XG5cbiAgICAgICAgICBpZiAoIW9wdGlvbnMuaW5saW5lICYmIG9wdGlvbnMuYmFja2Ryb3AgIT09ICdzdGF0aWMnKSB7XG4gICAgICAgICAgICBzZXREYXRhKGNhbnZhcywgREFUQV9BQ1RJT04sICdoaWRlJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzU3RyaW5nKG9wdGlvbnMuY2xhc3NOYW1lKSAmJiBvcHRpb25zLmNsYXNzTmFtZSkge1xuICAgICAgICAgIC8vIEluIGNhc2UgdGhlcmUgYXJlIG11bHRpcGxlIGNsYXNzIG5hbWVzXG4gICAgICAgICAgb3B0aW9ucy5jbGFzc05hbWUuc3BsaXQoUkVHRVhQX1NQQUNFUykuZm9yRWFjaChmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XG4gICAgICAgICAgICBhZGRDbGFzcyh2aWV3ZXIsIGNsYXNzTmFtZSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucy50b29sYmFyKSB7XG4gICAgICAgICAgdmFyIGxpc3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd1bCcpO1xuICAgICAgICAgIHZhciBjdXN0b20gPSBpc1BsYWluT2JqZWN0KG9wdGlvbnMudG9vbGJhcik7XG4gICAgICAgICAgdmFyIHpvb21CdXR0b25zID0gQlVUVE9OUy5zbGljZSgwLCAzKTtcbiAgICAgICAgICB2YXIgcm90YXRlQnV0dG9ucyA9IEJVVFRPTlMuc2xpY2UoNywgOSk7XG4gICAgICAgICAgdmFyIHNjYWxlQnV0dG9ucyA9IEJVVFRPTlMuc2xpY2UoOSk7XG5cbiAgICAgICAgICBpZiAoIWN1c3RvbSkge1xuICAgICAgICAgICAgYWRkQ2xhc3ModG9vbGJhciwgZ2V0UmVzcG9uc2l2ZUNsYXNzKG9wdGlvbnMudG9vbGJhcikpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGZvckVhY2goY3VzdG9tID8gb3B0aW9ucy50b29sYmFyIDogQlVUVE9OUywgZnVuY3Rpb24gKHZhbHVlLCBpbmRleCkge1xuICAgICAgICAgICAgdmFyIGRlZXAgPSBjdXN0b20gJiYgaXNQbGFpbk9iamVjdCh2YWx1ZSk7XG4gICAgICAgICAgICB2YXIgbmFtZSA9IGN1c3RvbSA/IGh5cGhlbmF0ZShpbmRleCkgOiB2YWx1ZTtcbiAgICAgICAgICAgIHZhciBzaG93ID0gZGVlcCAmJiAhaXNVbmRlZmluZWQodmFsdWUuc2hvdykgPyB2YWx1ZS5zaG93IDogdmFsdWU7XG5cbiAgICAgICAgICAgIGlmICghc2hvdyB8fCAhb3B0aW9ucy56b29tYWJsZSAmJiB6b29tQnV0dG9ucy5pbmRleE9mKG5hbWUpICE9PSAtMSB8fCAhb3B0aW9ucy5yb3RhdGFibGUgJiYgcm90YXRlQnV0dG9ucy5pbmRleE9mKG5hbWUpICE9PSAtMSB8fCAhb3B0aW9ucy5zY2FsYWJsZSAmJiBzY2FsZUJ1dHRvbnMuaW5kZXhPZihuYW1lKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgc2l6ZSA9IGRlZXAgJiYgIWlzVW5kZWZpbmVkKHZhbHVlLnNpemUpID8gdmFsdWUuc2l6ZSA6IHZhbHVlO1xuICAgICAgICAgICAgdmFyIGNsaWNrID0gZGVlcCAmJiAhaXNVbmRlZmluZWQodmFsdWUuY2xpY2spID8gdmFsdWUuY2xpY2sgOiB2YWx1ZTtcbiAgICAgICAgICAgIHZhciBpdGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTtcblxuICAgICAgICAgICAgaWYgKG9wdGlvbnMua2V5Ym9hcmQpIHtcbiAgICAgICAgICAgICAgaXRlbS5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgMCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGl0ZW0uc2V0QXR0cmlidXRlKCdyb2xlJywgJ2J1dHRvbicpO1xuICAgICAgICAgICAgYWRkQ2xhc3MoaXRlbSwgXCJcIi5jb25jYXQoTkFNRVNQQUNFLCBcIi1cIikuY29uY2F0KG5hbWUpKTtcblxuICAgICAgICAgICAgaWYgKCFpc0Z1bmN0aW9uKGNsaWNrKSkge1xuICAgICAgICAgICAgICBzZXREYXRhKGl0ZW0sIERBVEFfQUNUSU9OLCBuYW1lKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGlzTnVtYmVyKHNob3cpKSB7XG4gICAgICAgICAgICAgIGFkZENsYXNzKGl0ZW0sIGdldFJlc3BvbnNpdmVDbGFzcyhzaG93KSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChbJ3NtYWxsJywgJ2xhcmdlJ10uaW5kZXhPZihzaXplKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgYWRkQ2xhc3MoaXRlbSwgXCJcIi5jb25jYXQoTkFNRVNQQUNFLCBcIi1cIikuY29uY2F0KHNpemUpKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobmFtZSA9PT0gJ3BsYXknKSB7XG4gICAgICAgICAgICAgIGFkZENsYXNzKGl0ZW0sIFwiXCIuY29uY2F0KE5BTUVTUEFDRSwgXCItbGFyZ2VcIikpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoaXNGdW5jdGlvbihjbGljaykpIHtcbiAgICAgICAgICAgICAgYWRkTGlzdGVuZXIoaXRlbSwgRVZFTlRfQ0xJQ0ssIGNsaWNrKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGlzdC5hcHBlbmRDaGlsZChpdGVtKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB0b29sYmFyLmFwcGVuZENoaWxkKGxpc3QpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFkZENsYXNzKHRvb2xiYXIsIENMQVNTX0hJREUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFvcHRpb25zLnJvdGF0YWJsZSkge1xuICAgICAgICAgIHZhciByb3RhdGVzID0gdG9vbGJhci5xdWVyeVNlbGVjdG9yQWxsKCdsaVtjbGFzcyo9XCJyb3RhdGVcIl0nKTtcbiAgICAgICAgICBhZGRDbGFzcyhyb3RhdGVzLCBDTEFTU19JTlZJU0lCTEUpO1xuICAgICAgICAgIGZvckVhY2gocm90YXRlcywgZnVuY3Rpb24gKHJvdGF0ZSkge1xuICAgICAgICAgICAgdG9vbGJhci5hcHBlbmRDaGlsZChyb3RhdGUpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuaW5saW5lKSB7XG4gICAgICAgICAgYWRkQ2xhc3MoYnV0dG9uLCBDTEFTU19GVUxMU0NSRUVOKTtcbiAgICAgICAgICBzZXRTdHlsZSh2aWV3ZXIsIHtcbiAgICAgICAgICAgIHpJbmRleDogb3B0aW9ucy56SW5kZXhJbmxpbmVcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGlmICh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShwYXJlbnQpLnBvc2l0aW9uID09PSAnc3RhdGljJykge1xuICAgICAgICAgICAgc2V0U3R5bGUocGFyZW50LCB7XG4gICAgICAgICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKHZpZXdlciwgZWxlbWVudC5uZXh0U2libGluZyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYWRkQ2xhc3MoYnV0dG9uLCBDTEFTU19DTE9TRSk7XG4gICAgICAgICAgYWRkQ2xhc3Modmlld2VyLCBDTEFTU19GSVhFRCk7XG4gICAgICAgICAgYWRkQ2xhc3Modmlld2VyLCBDTEFTU19GQURFKTtcbiAgICAgICAgICBhZGRDbGFzcyh2aWV3ZXIsIENMQVNTX0hJREUpO1xuICAgICAgICAgIHNldFN0eWxlKHZpZXdlciwge1xuICAgICAgICAgICAgekluZGV4OiBvcHRpb25zLnpJbmRleFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHZhciBjb250YWluZXIgPSBvcHRpb25zLmNvbnRhaW5lcjtcblxuICAgICAgICAgIGlmIChpc1N0cmluZyhjb250YWluZXIpKSB7XG4gICAgICAgICAgICBjb250YWluZXIgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQucXVlcnlTZWxlY3Rvcihjb250YWluZXIpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICghY29udGFpbmVyKSB7XG4gICAgICAgICAgICBjb250YWluZXIgPSB0aGlzLmJvZHk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHZpZXdlcik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucy5pbmxpbmUpIHtcbiAgICAgICAgICB0aGlzLnJlbmRlcigpO1xuICAgICAgICAgIHRoaXMuYmluZCgpO1xuICAgICAgICAgIHRoaXMuaXNTaG93biA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnJlYWR5ID0gdHJ1ZTtcblxuICAgICAgICBpZiAoaXNGdW5jdGlvbihvcHRpb25zLnJlYWR5KSkge1xuICAgICAgICAgIGFkZExpc3RlbmVyKGVsZW1lbnQsIEVWRU5UX1JFQURZLCBvcHRpb25zLnJlYWR5LCB7XG4gICAgICAgICAgICBvbmNlOiB0cnVlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZGlzcGF0Y2hFdmVudChlbGVtZW50LCBFVkVOVF9SRUFEWSkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgdGhpcy5yZWFkeSA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnJlYWR5ICYmIG9wdGlvbnMuaW5saW5lKSB7XG4gICAgICAgICAgdGhpcy52aWV3KHRoaXMuaW5kZXgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvKipcbiAgICAgICAqIEdldCB0aGUgbm8gY29uZmxpY3Qgdmlld2VyIGNsYXNzLlxuICAgICAgICogQHJldHVybnMge1ZpZXdlcn0gVGhlIHZpZXdlciBjbGFzcy5cbiAgICAgICAqL1xuXG4gICAgfV0sIFt7XG4gICAgICBrZXk6IFwibm9Db25mbGljdFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIG5vQ29uZmxpY3QoKSB7XG4gICAgICAgIHdpbmRvdy5WaWV3ZXIgPSBBbm90aGVyVmlld2VyO1xuICAgICAgICByZXR1cm4gVmlld2VyO1xuICAgICAgfVxuICAgICAgLyoqXG4gICAgICAgKiBDaGFuZ2UgdGhlIGRlZmF1bHQgb3B0aW9ucy5cbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gVGhlIG5ldyBkZWZhdWx0IG9wdGlvbnMuXG4gICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgIGtleTogXCJzZXREZWZhdWx0c1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldERlZmF1bHRzKG9wdGlvbnMpIHtcbiAgICAgICAgYXNzaWduKERFRkFVTFRTLCBpc1BsYWluT2JqZWN0KG9wdGlvbnMpICYmIG9wdGlvbnMpO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBWaWV3ZXI7XG4gIH0oKTtcblxuICBhc3NpZ24oVmlld2VyLnByb3RvdHlwZSwgcmVuZGVyLCBldmVudHMsIGhhbmRsZXJzLCBtZXRob2RzLCBvdGhlcnMpO1xuXG4gIHJldHVybiBWaWV3ZXI7XG5cbn0pKTtcbiIsImV4cG9ydCB2YXIgYmFzZSA9IHtcbiAgODogXCJCYWNrc3BhY2VcIixcbiAgOTogXCJUYWJcIixcbiAgMTA6IFwiRW50ZXJcIixcbiAgMTI6IFwiTnVtTG9ja1wiLFxuICAxMzogXCJFbnRlclwiLFxuICAxNjogXCJTaGlmdFwiLFxuICAxNzogXCJDb250cm9sXCIsXG4gIDE4OiBcIkFsdFwiLFxuICAyMDogXCJDYXBzTG9ja1wiLFxuICAyNzogXCJFc2NhcGVcIixcbiAgMzI6IFwiIFwiLFxuICAzMzogXCJQYWdlVXBcIixcbiAgMzQ6IFwiUGFnZURvd25cIixcbiAgMzU6IFwiRW5kXCIsXG4gIDM2OiBcIkhvbWVcIixcbiAgMzc6IFwiQXJyb3dMZWZ0XCIsXG4gIDM4OiBcIkFycm93VXBcIixcbiAgMzk6IFwiQXJyb3dSaWdodFwiLFxuICA0MDogXCJBcnJvd0Rvd25cIixcbiAgNDQ6IFwiUHJpbnRTY3JlZW5cIixcbiAgNDU6IFwiSW5zZXJ0XCIsXG4gIDQ2OiBcIkRlbGV0ZVwiLFxuICA1OTogXCI7XCIsXG4gIDYxOiBcIj1cIixcbiAgOTE6IFwiTWV0YVwiLFxuICA5MjogXCJNZXRhXCIsXG4gIDEwNjogXCIqXCIsXG4gIDEwNzogXCIrXCIsXG4gIDEwODogXCIsXCIsXG4gIDEwOTogXCItXCIsXG4gIDExMDogXCIuXCIsXG4gIDExMTogXCIvXCIsXG4gIDE0NDogXCJOdW1Mb2NrXCIsXG4gIDE0NTogXCJTY3JvbGxMb2NrXCIsXG4gIDE2MDogXCJTaGlmdFwiLFxuICAxNjE6IFwiU2hpZnRcIixcbiAgMTYyOiBcIkNvbnRyb2xcIixcbiAgMTYzOiBcIkNvbnRyb2xcIixcbiAgMTY0OiBcIkFsdFwiLFxuICAxNjU6IFwiQWx0XCIsXG4gIDE3MzogXCItXCIsXG4gIDE4NjogXCI7XCIsXG4gIDE4NzogXCI9XCIsXG4gIDE4ODogXCIsXCIsXG4gIDE4OTogXCItXCIsXG4gIDE5MDogXCIuXCIsXG4gIDE5MTogXCIvXCIsXG4gIDE5MjogXCJgXCIsXG4gIDIxOTogXCJbXCIsXG4gIDIyMDogXCJcXFxcXCIsXG4gIDIyMTogXCJdXCIsXG4gIDIyMjogXCInXCIsXG4gIDIyOTogXCJxXCJcbn1cblxuZXhwb3J0IHZhciBzaGlmdCA9IHtcbiAgNDg6IFwiKVwiLFxuICA0OTogXCIhXCIsXG4gIDUwOiBcIkBcIixcbiAgNTE6IFwiI1wiLFxuICA1MjogXCIkXCIsXG4gIDUzOiBcIiVcIixcbiAgNTQ6IFwiXlwiLFxuICA1NTogXCImXCIsXG4gIDU2OiBcIipcIixcbiAgNTc6IFwiKFwiLFxuICA1OTogXCI6XCIsXG4gIDYxOiBcIitcIixcbiAgMTczOiBcIl9cIixcbiAgMTg2OiBcIjpcIixcbiAgMTg3OiBcIitcIixcbiAgMTg4OiBcIjxcIixcbiAgMTg5OiBcIl9cIixcbiAgMTkwOiBcIj5cIixcbiAgMTkxOiBcIj9cIixcbiAgMTkyOiBcIn5cIixcbiAgMjE5OiBcIntcIixcbiAgMjIwOiBcInxcIixcbiAgMjIxOiBcIn1cIixcbiAgMjIyOiBcIlxcXCJcIixcbiAgMjI5OiBcIlFcIlxufVxuXG52YXIgY2hyb21lID0gdHlwZW9mIG5hdmlnYXRvciAhPSBcInVuZGVmaW5lZFwiICYmIC9DaHJvbWVcXC8oXFxkKykvLmV4ZWMobmF2aWdhdG9yLnVzZXJBZ2VudClcbnZhciBzYWZhcmkgPSB0eXBlb2YgbmF2aWdhdG9yICE9IFwidW5kZWZpbmVkXCIgJiYgL0FwcGxlIENvbXB1dGVyLy50ZXN0KG5hdmlnYXRvci52ZW5kb3IpXG52YXIgZ2Vja28gPSB0eXBlb2YgbmF2aWdhdG9yICE9IFwidW5kZWZpbmVkXCIgJiYgL0dlY2tvXFwvXFxkKy8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KVxudmFyIG1hYyA9IHR5cGVvZiBuYXZpZ2F0b3IgIT0gXCJ1bmRlZmluZWRcIiAmJiAvTWFjLy50ZXN0KG5hdmlnYXRvci5wbGF0Zm9ybSlcbnZhciBpZSA9IHR5cGVvZiBuYXZpZ2F0b3IgIT0gXCJ1bmRlZmluZWRcIiAmJiAvTVNJRSBcXGR8VHJpZGVudFxcLyg/Ols3LTldfFxcZHsyLH0pXFwuLipydjooXFxkKykvLmV4ZWMobmF2aWdhdG9yLnVzZXJBZ2VudClcbnZhciBicm9rZW5Nb2RpZmllck5hbWVzID0gY2hyb21lICYmIChtYWMgfHwgK2Nocm9tZVsxXSA8IDU3KSB8fCBnZWNrbyAmJiBtYWNcblxuLy8gRmlsbCBpbiB0aGUgZGlnaXQga2V5c1xuZm9yICh2YXIgaSA9IDA7IGkgPCAxMDsgaSsrKSBiYXNlWzQ4ICsgaV0gPSBiYXNlWzk2ICsgaV0gPSBTdHJpbmcoaSlcblxuLy8gVGhlIGZ1bmN0aW9uIGtleXNcbmZvciAodmFyIGkgPSAxOyBpIDw9IDI0OyBpKyspIGJhc2VbaSArIDExMV0gPSBcIkZcIiArIGlcblxuLy8gQW5kIHRoZSBhbHBoYWJldGljIGtleXNcbmZvciAodmFyIGkgPSA2NTsgaSA8PSA5MDsgaSsrKSB7XG4gIGJhc2VbaV0gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGkgKyAzMilcbiAgc2hpZnRbaV0gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpXG59XG5cbi8vIEZvciBlYWNoIGNvZGUgdGhhdCBkb2Vzbid0IGhhdmUgYSBzaGlmdC1lcXVpdmFsZW50LCBjb3B5IHRoZSBiYXNlIG5hbWVcbmZvciAodmFyIGNvZGUgaW4gYmFzZSkgaWYgKCFzaGlmdC5oYXNPd25Qcm9wZXJ0eShjb2RlKSkgc2hpZnRbY29kZV0gPSBiYXNlW2NvZGVdXG5cbmV4cG9ydCBmdW5jdGlvbiBrZXlOYW1lKGV2ZW50KSB7XG4gIC8vIERvbid0IHRydXN0IGV2ZW50LmtleSBpbiBDaHJvbWUgd2hlbiB0aGVyZSBhcmUgbW9kaWZpZXJzIHVudGlsXG4gIC8vIHRoZXkgZml4IGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTYzMzgzOFxuICB2YXIgaWdub3JlS2V5ID0gYnJva2VuTW9kaWZpZXJOYW1lcyAmJiAoZXZlbnQuY3RybEtleSB8fCBldmVudC5hbHRLZXkgfHwgZXZlbnQubWV0YUtleSkgfHxcbiAgICAoc2FmYXJpIHx8IGllKSAmJiBldmVudC5zaGlmdEtleSAmJiBldmVudC5rZXkgJiYgZXZlbnQua2V5Lmxlbmd0aCA9PSAxXG4gIHZhciBuYW1lID0gKCFpZ25vcmVLZXkgJiYgZXZlbnQua2V5KSB8fFxuICAgIChldmVudC5zaGlmdEtleSA/IHNoaWZ0IDogYmFzZSlbZXZlbnQua2V5Q29kZV0gfHxcbiAgICBldmVudC5rZXkgfHwgXCJVbmlkZW50aWZpZWRcIlxuICAvLyBFZGdlIHNvbWV0aW1lcyBwcm9kdWNlcyB3cm9uZyBuYW1lcyAoSXNzdWUgIzMpXG4gIGlmIChuYW1lID09IFwiRXNjXCIpIG5hbWUgPSBcIkVzY2FwZVwiXG4gIGlmIChuYW1lID09IFwiRGVsXCIpIG5hbWUgPSBcIkRlbGV0ZVwiXG4gIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1pY3Jvc29mdC5jb20vZW4tdXMvbWljcm9zb2Z0LWVkZ2UvcGxhdGZvcm0vaXNzdWVzLzg4NjA1NzEvXG4gIGlmIChuYW1lID09IFwiTGVmdFwiKSBuYW1lID0gXCJBcnJvd0xlZnRcIlxuICBpZiAobmFtZSA9PSBcIlVwXCIpIG5hbWUgPSBcIkFycm93VXBcIlxuICBpZiAobmFtZSA9PSBcIlJpZ2h0XCIpIG5hbWUgPSBcIkFycm93UmlnaHRcIlxuICBpZiAobmFtZSA9PSBcIkRvd25cIikgbmFtZSA9IFwiQXJyb3dEb3duXCJcbiAgcmV0dXJuIG5hbWVcbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwib3duS2V5cyIsIm9iamVjdCIsImVudW1lcmFibGVPbmx5Iiwia2V5cyIsIk9iamVjdCIsImdldE93blByb3BlcnR5U3ltYm9scyIsInN5bWJvbHMiLCJmaWx0ZXIiLCJzeW0iLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwicHVzaCIsImFwcGx5IiwiX29iamVjdFNwcmVhZDIiLCJ0YXJnZXQiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwiZm9yRWFjaCIsImtleSIsIl9kZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZGVmaW5lUHJvcGVydHkiLCJfdHlwZW9mIiwib2JqIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJjb25zdHJ1Y3RvciIsInByb3RvdHlwZSIsIl9jbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJUeXBlRXJyb3IiLCJfZGVmaW5lUHJvcGVydGllcyIsInByb3BzIiwiZGVzY3JpcHRvciIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwidmFsdWUiLCJERUZBVUxUUyIsImJhY2tkcm9wIiwiYnV0dG9uIiwibmF2YmFyIiwidGl0bGUiLCJ0b29sYmFyIiwiY2xhc3NOYW1lIiwiY29udGFpbmVyIiwiZnVsbHNjcmVlbiIsImluaGVyaXRlZEF0dHJpYnV0ZXMiLCJpbml0aWFsVmlld0luZGV4IiwiaW5saW5lIiwiaW50ZXJ2YWwiLCJrZXlib2FyZCIsImZvY3VzIiwibG9hZGluZyIsImxvb3AiLCJtaW5XaWR0aCIsIm1pbkhlaWdodCIsIm1vdmFibGUiLCJyb3RhdGFibGUiLCJzY2FsYWJsZSIsInpvb21hYmxlIiwiem9vbU9uVG91Y2giLCJ6b29tT25XaGVlbCIsInNsaWRlT25Ub3VjaCIsInRvZ2dsZU9uRGJsY2xpY2siLCJ0b29sdGlwIiwidHJhbnNpdGlvbiIsInpJbmRleCIsInpJbmRleElubGluZSIsInpvb21SYXRpbyIsIm1pblpvb21SYXRpbyIsIm1heFpvb21SYXRpbyIsInVybCIsInJlYWR5Iiwic2hvdyIsInNob3duIiwiaGlkZSIsImhpZGRlbiIsInZpZXciLCJ2aWV3ZWQiLCJtb3ZlIiwibW92ZWQiLCJyb3RhdGUiLCJyb3RhdGVkIiwic2NhbGUiLCJzY2FsZWQiLCJ6b29tIiwiem9vbWVkIiwicGxheSIsInN0b3AiLCJJU19CUk9XU0VSIiwid2luZG93IiwiZG9jdW1lbnQiLCJXSU5ET1ciLCJJU19UT1VDSF9ERVZJQ0UiLCJkb2N1bWVudEVsZW1lbnQiLCJIQVNfUE9JTlRFUl9FVkVOVCIsIk5BTUVTUEFDRSIsIkFDVElPTl9NT1ZFIiwiQUNUSU9OX1NXSVRDSCIsIkFDVElPTl9aT09NIiwiQ0xBU1NfQUNUSVZFIiwiY29uY2F0IiwiQ0xBU1NfQ0xPU0UiLCJDTEFTU19GQURFIiwiQ0xBU1NfRklYRUQiLCJDTEFTU19GVUxMU0NSRUVOIiwiQ0xBU1NfRlVMTFNDUkVFTl9FWElUIiwiQ0xBU1NfSElERSIsIkNMQVNTX0hJREVfTURfRE9XTiIsIkNMQVNTX0hJREVfU01fRE9XTiIsIkNMQVNTX0hJREVfWFNfRE9XTiIsIkNMQVNTX0lOIiwiQ0xBU1NfSU5WSVNJQkxFIiwiQ0xBU1NfTE9BRElORyIsIkNMQVNTX01PVkUiLCJDTEFTU19PUEVOIiwiQ0xBU1NfU0hPVyIsIkNMQVNTX1RSQU5TSVRJT04iLCJFVkVOVF9DTElDSyIsIkVWRU5UX0RCTENMSUNLIiwiRVZFTlRfRFJBR19TVEFSVCIsIkVWRU5UX0ZPQ1VTSU4iLCJFVkVOVF9LRVlfRE9XTiIsIkVWRU5UX0xPQUQiLCJFVkVOVF9FUlJPUiIsIkVWRU5UX1BPSU5URVJfRE9XTiIsIkVWRU5UX1BPSU5URVJfTU9WRSIsIkVWRU5UX1BPSU5URVJfVVAiLCJFVkVOVF9SRVNJWkUiLCJFVkVOVF9UUkFOU0lUSU9OX0VORCIsIkVWRU5UX1dIRUVMIiwiRVZFTlRfUkVBRFkiLCJFVkVOVF9TSE9XIiwiRVZFTlRfU0hPV04iLCJFVkVOVF9ISURFIiwiRVZFTlRfSElEREVOIiwiRVZFTlRfVklFVyIsIkVWRU5UX1ZJRVdFRCIsIkVWRU5UX01PVkUiLCJFVkVOVF9NT1ZFRCIsIkVWRU5UX1JPVEFURSIsIkVWRU5UX1JPVEFURUQiLCJFVkVOVF9TQ0FMRSIsIkVWRU5UX1NDQUxFRCIsIkVWRU5UX1pPT00iLCJFVkVOVF9aT09NRUQiLCJFVkVOVF9QTEFZIiwiRVZFTlRfU1RPUCIsIkRBVEFfQUNUSU9OIiwiUkVHRVhQX1NQQUNFUyIsIkJVVFRPTlMiLCJpc1N0cmluZyIsImlzTmFOIiwiTnVtYmVyIiwiaXNOdW1iZXIiLCJpc1VuZGVmaW5lZCIsImlzT2JqZWN0IiwiaGFzT3duUHJvcGVydHkiLCJpc1BsYWluT2JqZWN0IiwiX2NvbnN0cnVjdG9yIiwiY2FsbCIsImVycm9yIiwiaXNGdW5jdGlvbiIsImRhdGEiLCJjYWxsYmFjayIsIkFycmF5IiwiaXNBcnJheSIsImFzc2lnbiIsIl9sZW4iLCJhcmdzIiwiX2tleSIsImFyZyIsIlJFR0VYUF9TVUZGSVgiLCJzZXRTdHlsZSIsImVsZW1lbnQiLCJzdHlsZXMiLCJzdHlsZSIsInByb3BlcnR5IiwidGVzdCIsImVzY2FwZUhUTUxFbnRpdGllcyIsInJlcGxhY2UiLCJoYXNDbGFzcyIsImNsYXNzTGlzdCIsImNvbnRhaW5zIiwiaW5kZXhPZiIsImFkZENsYXNzIiwiZWxlbSIsImFkZCIsInRyaW0iLCJyZW1vdmVDbGFzcyIsInJlbW92ZSIsInRvZ2dsZUNsYXNzIiwiYWRkZWQiLCJSRUdFWFBfSFlQSEVOQVRFIiwiaHlwaGVuYXRlIiwidG9Mb3dlckNhc2UiLCJnZXREYXRhIiwibmFtZSIsImRhdGFzZXQiLCJnZXRBdHRyaWJ1dGUiLCJzZXREYXRhIiwic2V0QXR0cmlidXRlIiwib25jZVN1cHBvcnRlZCIsInN1cHBvcnRlZCIsIm9uY2UiLCJsaXN0ZW5lciIsIm9wdGlvbnMiLCJnZXQiLCJzZXQiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInJlbW92ZUxpc3RlbmVyIiwidHlwZSIsInVuZGVmaW5lZCIsImhhbmRsZXIiLCJzcGxpdCIsImV2ZW50IiwibGlzdGVuZXJzIiwiYWRkTGlzdGVuZXIiLCJfaGFuZGxlciIsIl9lbGVtZW50JGxpc3RlbmVycyIsIl9sZW4yIiwiX2tleTIiLCJkaXNwYXRjaEV2ZW50IiwiRXZlbnQiLCJDdXN0b21FdmVudCIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwiZGV0YWlsIiwiY3JlYXRlRXZlbnQiLCJpbml0Q3VzdG9tRXZlbnQiLCJnZXRPZmZzZXQiLCJib3giLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJsZWZ0IiwicGFnZVhPZmZzZXQiLCJjbGllbnRMZWZ0IiwidG9wIiwicGFnZVlPZmZzZXQiLCJjbGllbnRUb3AiLCJnZXRUcmFuc2Zvcm1zIiwiX3JlZiIsInNjYWxlWCIsInNjYWxlWSIsInRyYW5zbGF0ZVgiLCJ0cmFuc2xhdGVZIiwidmFsdWVzIiwidHJhbnNmb3JtIiwiam9pbiIsIldlYmtpdFRyYW5zZm9ybSIsIm1zVHJhbnNmb3JtIiwiSVNfU0FGQVJJIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiZ2V0SW1hZ2VOYXR1cmFsU2l6ZXMiLCJpbWFnZSIsIm5ld0ltYWdlIiwiY3JlYXRlRWxlbWVudCIsIm5hdHVyYWxXaWR0aCIsIm5hdHVyYWxIZWlnaHQiLCJib2R5Iiwib25sb2FkIiwid2lkdGgiLCJoZWlnaHQiLCJyZW1vdmVDaGlsZCIsInNyYyIsImNzc1RleHQiLCJhcHBlbmRDaGlsZCIsImdldFJlc3BvbnNpdmVDbGFzcyIsImdldFBvaW50ZXIiLCJfcmVmMiIsImVuZE9ubHkiLCJwYWdlWCIsInBhZ2VZIiwiZW5kIiwiZW5kWCIsImVuZFkiLCJ0aW1lU3RhbXAiLCJEYXRlIiwibm93Iiwic3RhcnRYIiwic3RhcnRZIiwiZ2V0UG9pbnRlcnNDZW50ZXIiLCJwb2ludGVycyIsImNvdW50IiwiX3JlZjMiLCJpZCIsInJlbmRlciIsInRoaXMiLCJpbml0Q29udGFpbmVyIiwiaW5pdFZpZXdlciIsImluaXRMaXN0IiwicmVuZGVyVmlld2VyIiwiaW5pdEJvZHkiLCJvd25lckRvY3VtZW50Iiwic2Nyb2xsYmFyV2lkdGgiLCJpbm5lcldpZHRoIiwiY2xpZW50V2lkdGgiLCJpbml0aWFsQm9keVBhZGRpbmdSaWdodCIsInBhZGRpbmdSaWdodCIsImluaXRpYWxCb2R5Q29tcHV0ZWRQYWRkaW5nUmlnaHQiLCJnZXRDb21wdXRlZFN0eWxlIiwiY29udGFpbmVyRGF0YSIsImlubmVySGVpZ2h0Iiwidmlld2VyRGF0YSIsInBhcmVudCIsIk1hdGgiLCJtYXgiLCJvZmZzZXRXaWR0aCIsIm9mZnNldEhlaWdodCIsInBhcmVudERhdGEiLCJmdWxsZWQiLCJ2aWV3ZXIiLCJfdGhpcyIsImxpc3QiLCJpdGVtcyIsImlubmVySFRNTCIsImltYWdlcyIsImluZGV4IiwiYWx0IiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiZ2V0SW1hZ2VOYW1lRnJvbVVSTCIsImdldEltYWdlVVJMIiwiaXRlbSIsImltZyIsIm9uTG9hZCIsIm9uRXJyb3IiLCJmaXJzdEVsZW1lbnRDaGlsZCIsImxvYWRJbWFnZSIsInJlbmRlckxpc3QiLCJuZXh0IiwibmV4dEVsZW1lbnRTaWJsaW5nIiwiZ3V0dGVyIiwicGFyc2VJbnQiLCJtYXJnaW5MZWZ0Iiwib3V0ZXJXaWR0aCIsInJlc2V0TGlzdCIsImluaXRJbWFnZSIsImRvbmUiLCJzaXppbmdJbWFnZSIsIl90aGlzMiIsImZvb3RlckhlaWdodCIsImZvb3RlciIsInZpZXdlcldpZHRoIiwidmlld2VySGVpZ2h0Iiwib2xkSW1hZ2VEYXRhIiwiaW1hZ2VEYXRhIiwiaW1hZ2VJbml0aWFsaXppbmciLCJhYm9ydCIsImFzcGVjdFJhdGlvIiwibWluIiwieCIsInkiLCJvbGRSYXRpbyIsInJhdGlvIiwiaW5pdGlhbEltYWdlRGF0YSIsInJlbmRlckltYWdlIiwiX3RoaXMzIiwibWFyZ2luVG9wIiwidmlld2luZyIsIm1vdmluZyIsInJvdGF0aW5nIiwic2NhbGluZyIsInpvb21pbmciLCJvblRyYW5zaXRpb25FbmQiLCJpbWFnZVJlbmRlcmluZyIsInJlc2V0SW1hZ2UiLCJwYXJlbnROb2RlIiwiZXZlbnRzIiwiYmluZCIsImNhbnZhcyIsIm9uQ2xpY2siLCJjbGljayIsIm9uRHJhZ1N0YXJ0IiwiZHJhZ3N0YXJ0Iiwib25Qb2ludGVyRG93biIsInBvaW50ZXJkb3duIiwib25Qb2ludGVyTW92ZSIsInBvaW50ZXJtb3ZlIiwib25Qb2ludGVyVXAiLCJwb2ludGVydXAiLCJvbktleURvd24iLCJrZXlkb3duIiwib25SZXNpemUiLCJyZXNpemUiLCJvbldoZWVsIiwid2hlZWwiLCJwYXNzaXZlIiwiY2FwdHVyZSIsIm9uRGJsY2xpY2siLCJkYmxjbGljayIsInVuYmluZCIsImhhbmRsZXJzIiwiYWN0aW9uIiwibG9jYWxOYW1lIiwicGFyZW50RWxlbWVudCIsImlzVHJ1c3RlZCIsImNsZWFyVGltZW91dCIsImNsaWNrQ2FudmFzVGltZW91dCIsInBsYXllZCIsImV4aXQiLCJmdWxsIiwidG9nZ2xlIiwicmVzZXQiLCJwcmV2IiwicHJldmVudERlZmF1bHQiLCJkb3VibGVDbGlja0ltYWdlVGltZW91dCIsIm9yaWdpbmFsRXZlbnQiLCJsb2FkIiwidGltZW91dCIsIm9yaWdpbmFsSW1hZ2UiLCJwYXJlbnRXaWR0aCIsInBhcmVudEhlaWdodCIsImZpbGxlZCIsImtleUNvZGUiLCJ3aGljaCIsImNoYXJDb2RlIiwiY3RybEtleSIsImJ1dHRvbnMiLCJzaG93aW5nIiwiaGlkaW5nIiwicG9pbnRlclR5cGUiLCJjaGFuZ2VkVG91Y2hlcyIsInRvdWNoIiwiaWRlbnRpZmllciIsInBvaW50ZXJJZCIsImlzU3dpdGNoYWJsZSIsImNoYW5nZSIsInBvaW50ZXIiLCJpbWFnZUNsaWNrZWQiLCJzZXRUaW1lb3V0IiwiaXNTaG93biIsImNsb3NlIiwib3BlbiIsImZ1bGxzY3JlZW5FbGVtZW50Iiwid2Via2l0RnVsbHNjcmVlbkVsZW1lbnQiLCJtb3pGdWxsU2NyZWVuRWxlbWVudCIsIm1zRnVsbHNjcmVlbkVsZW1lbnQiLCJwbGF5ZXIiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsIl90aGlzNCIsIndoZWVsaW5nIiwiZGVsdGEiLCJkZWx0YVkiLCJ3aGVlbERlbHRhIiwibWV0aG9kcyIsImltbWVkaWF0ZSIsImJ1aWxkIiwidHJhbnNpdGlvbmluZyIsInJlbW92ZUF0dHJpYnV0ZSIsImluaXRpYWxPZmZzZXRXaWR0aCIsImhpZGVJbW1lZGlhdGVseSIsIm9uVmlld2VyVHJhbnNpdGlvbkVuZCIsIm9uSW1hZ2VUcmFuc2l0aW9uRW5kIiwiem9vbVRvIiwicXVlcnlTZWxlY3RvciIsImFjdGl2ZUl0ZW0iLCJvblZpZXdlZCIsImNvbXBsZXRlIiwibWF4SW5kZXgiLCJtb3ZlVG8iLCJfb3JpZ2luYWxFdmVudCIsIm9sZFgiLCJvbGRZIiwiY2hhbmdlZCIsImRlZ3JlZSIsInJvdGF0ZVRvIiwib2xkRGVncmVlIiwiX3NjYWxlWCIsIl9zY2FsZVkiLCJfdGhpczUiLCJvbGRTY2FsZVgiLCJvbGRTY2FsZVkiLCJoYXNUb29sdGlwIiwiX3RoaXM2IiwiX3pvb21hYmxlIiwibmV3V2lkdGgiLCJuZXdIZWlnaHQiLCJvZmZzZXQiLCJjZW50ZXIiLCJfdGhpczciLCJ0b3RhbCIsIm9uTG9hZFdoZW5QbGF5IiwicmVxdWVzdEZ1bGxzY3JlZW4iLCJyZWZlcnJlclBvbGljeSIsInBsYXlpbmciLCJfdGhpczgiLCJleGl0RnVsbHNjcmVlbiIsIl90aGlzOSIsImVuZm9yY2VGb2N1cyIsIl90aGlzMTAiLCJjbGVhckVuZm9yY2VGb2N1cyIsIl90aGlzMTEiLCJ0b29sdGlwQm94IiwidGV4dENvbnRlbnQiLCJyb3VuZCIsInRvb2x0aXBwaW5nIiwiZmFkaW5nIiwidXBkYXRlIiwiX3RoaXMxMiIsImlzSW1nIiwiZGVzdHJveSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJjaGFuZ2VkSW5kZXhlcyIsImNoYW5nZWRJbmRleCIsImRlc3Ryb3llZCIsImRlbGF5aW5nIiwiaW5pdGlhbGl6aW5nIiwib25TdGFydCIsIm90aGVycyIsIm9uRm9jdXNpbiIsInBhcnNlRmxvYXQiLCJmdWN1cyIsIndlYmtpdFJlcXVlc3RGdWxsc2NyZWVuIiwiRWxlbWVudCIsIkFMTE9XX0tFWUJPQVJEX0lOUFVUIiwibW96UmVxdWVzdEZ1bGxTY3JlZW4iLCJtc1JlcXVlc3RGdWxsc2NyZWVuIiwid2Via2l0RXhpdEZ1bGxzY3JlZW4iLCJtb3pDYW5jZWxGdWxsU2NyZWVuIiwibXNFeGl0RnVsbHNjcmVlbiIsIm9mZnNldFgiLCJvZmZzZXRZIiwicG9pbnRlcnMyIiwicmF0aW9zIiwicG9pbnRlcjIiLCJ4MSIsImFicyIsInkxIiwieDIiLCJ5MiIsInoxIiwic3FydCIsInNvcnQiLCJhIiwiYiIsImdldE1heFpvb21SYXRpbyIsImFic29sdXRlT2Zmc2V0WCIsInAiLCJBbm90aGVyVmlld2VyIiwiVmlld2VyIiwiZ2V0VW5pcXVlSUQiLCJub2RlVHlwZSIsIkVycm9yIiwiaW5pdCIsInN0YXRpY1Byb3BzIiwicHJvdG9Qcm9wcyIsInByb2dyZXNzIiwidGVtcGxhdGUiLCJjdXN0b20iLCJ6b29tQnV0dG9ucyIsInNsaWNlIiwicm90YXRlQnV0dG9ucyIsInNjYWxlQnV0dG9ucyIsImRlZXAiLCJzaXplIiwicm90YXRlcyIsInBvc2l0aW9uIiwiaW5zZXJ0QmVmb3JlIiwibmV4dFNpYmxpbmciLCJmYWN0b3J5IiwiYmFzZSIsInNoaWZ0IiwiY2hyb21lIiwiZXhlYyIsInNhZmFyaSIsInZlbmRvciIsImdlY2tvIiwibWFjIiwicGxhdGZvcm0iLCJpZSIsImJyb2tlbk1vZGlmaWVyTmFtZXMiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJjb2RlIiwia2V5TmFtZSIsImFsdEtleSIsIm1ldGFLZXkiLCJzaGlmdEtleSJdLCJzb3VyY2VSb290IjoiIn0=